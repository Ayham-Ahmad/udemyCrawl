{
  "courses": [
    {
      "title": "High-Level Synthesis for FPGA, Part 3 - Advanced",
      "bio": "Logic Design with Vitis-HLS",
      "objectives": [
        "Using Multi-Cycle design flow to develop sequential circuits in HLS.",
        "Implementing stream communication and computation in HLS",
        "Using FIFO as the synchronisation mechanism between to connected module",
        "Learning how to use an array variable inside an HLS code",
        "Connecting and AND HLS IP to BRAMs in a Vivado project",
        "Working with pointers in HLS",
        "Working with AXI protocol in HLS",
        "Loop pipelining optimisation in HLS",
        "Loop unrolling optimisation in HLS",
        "Loop flattening optimisation in HLS",
        "Loop rewinding optimisation in HLS",
        "Working with the HLS-Stream library in HLS",
        "Handshaking protocol and interfaces in HLS"
      ],
      "course_content": {
        "Prologue": [
          "Introduction",
          "Course Structure"
        ],
        "LAB Setup": [
          "Introduction",
          "Windows Instullation",
          "Linux Installation"
        ],
        "Multi-Cycle Design": [
          "Introduction",
          "Definition",
          "Multi-Cycle Design vs SCII",
          "Example",
          "Handshaking",
          "Example with vld",
          "Example with ack",
          "Example with hs",
          "Block-Level Handshake",
          "Exercises",
          "Quiz"
        ],
        "Streaming": [
          "Introduction",
          "Definition",
          "Streaming FIFO",
          "Streaming in HLS",
          "Streaming Example: Vitis-HLS",
          "Streaming Example: Vivado",
          "Exercises",
          "Quiz"
        ],
        "ArrayInHLS": [
          "Introduction",
          "Definition",
          "Array Issues",
          "BRAM",
          "Array Read/Write: VitisHLS",
          "Array Read/Write: Vivado",
          "Exercises",
          "Quiz"
        ],
        "Pointers": [
          "Introduction",
          "Definition",
          "Native Pointer Casting",
          "Pointers on the Interface",
          "Pointer Arithmetic",
          "Multi-Access Pointers on the Interface",
          "Exercises",
          "Quiz"
        ],
        "AXI in HLS": [
          "Introduction",
          "Memory Mapped Interface",
          "AXI Protocol",
          "Memory Mapped Output 01",
          "AXI Addressing in Vivado",
          "Memory Mapped Output 02",
          "Memory Mapped I/O",
          "The m-axi interface",
          "Exercises",
          "Quiz"
        ],
        "Loops In HLS": [
          "Introduction",
          "Definition",
          "Loop Unrolling",
          "Piplelining",
          "Failure to Pipeline",
          "(Waveform) Rewinding Pipelined Loops",
          "Exercises",
          "Quiz"
        ],
        "HLS Stream Library": [
          "Introduction",
          "Definition",
          "Stream on the Interface",
          "Blocking/NonBlocking",
          "HLS Stream Dataflow",
          "Exercises",
          "Quiz"
        ]
      },
      "requirements": [
        "Understanding the basic concepts of C/C++ coding",
        "Understanding the basic concepts of logic operators (e.g., AND, OR, XOR, SHIFT )",
        "“High-Level Synthesis for FPGA, Part 1-Combinational Circuits” Udemy course",
        "“High-Level Synthesis for FPGA, Part 2 - Sequential Circuits” Udemy course",
        "BASYS3 evaluation board",
        "Xilinx Vitis-HLS and Vivado (download Vivado ML Edition or Vivado Design Suite - HLx Editions for Windows or Linux)"
      ],
      "description": "This course covers advanced topics in high-level synthesis (HLS) design flow. The goals of the course are describing, debugging and implementing logic circuits on FPGAs using only C/C++ language without any help from HDLs (e.g., VHDL or Verilog). The HLS is recently used by several industry leaders (such as Nvidia and Google) to design their hardware and software platforms. The HLS design flow is the future of hardware design. It quickly becomes a must-have skill for every hardware or software engineer keen on utilising FPGAs for their exceptional performance and low power consumption.\nThis course is the first to explain the advanced HLS design flow topics. It uses the Xilinx HLS software and hardware platforms to demonstrate real examples and applications. Throughout the course, you will follow several examples describing HLS concepts and techniques. The course contains numerous quizzes and exercises to practice and master the proposed methods and approaches.\nThis course is the third of a series of courses on HLS in designing hardware modules and accelerating algorithms on a target FPGA. Whereas this course focuses on multi-cycle design, advanced design, and optimisation techniques in HLS, the other courses in the series explain how to use single-cycle design techniques to develop combinational and sequential logic circuits in HLS.",
      "target_audience": [
        "Hardware engineers",
        "Software engineers who are interested in FPGAs",
        "Lecturers, researchers, and professors who want to use FPGA-based HLS in lectures, courses or research",
        "Digital Logic enthusiasts"
      ],
      "url": "https://www.udemy.com/course/high-level-synthesis-for-fpga-part-3-advanced/"
    },
    {
      "title": "Complete Delta Plc Programming Zero to Expert - All In One",
      "bio": "Learn Delta Plc Programming - Softwares & Servo & Scada & RS-485 Comm & CanOpen & DIAStudio & HMI& Instructions",
      "objectives": [
        "Delta Plc Programming",
        "Modbus Communication",
        "Industrial Automation",
        "Plc Programming Languages (LD , ST , FDB etc.)",
        "Delta HMI Programming",
        "Plc Programming Basics",
        "DIADesigner",
        "DIAStudio",
        "Advanced Delta Plc Programming",
        "CanOpen Communication",
        "ASDA A2 Servo Driving",
        "Asdasoft",
        "AS Series Plcs",
        "Dopsoft",
        "DOP100 HMI",
        "Advanced Programming",
        "Function Block , ST , FBD etc. Languages",
        "WPLSoft"
      ],
      "course_content": {
        "Introduction To Delta Plc": [
          "Introduction to Course - You are all Welcome",
          "Delta Plc Softwares and How to download",
          "Create New Project and Startup",
          "What is Plc & Delta DVP Series Plcs Introduction",
          "Delta DVP14SS2 Hardware Review and Information",
          "Setup the Communication Setting between Pc & Plc - COMMGR Software",
          "Settings & Usage Simulator",
          "How to Project Download & Upload",
          "The Importance Of Scanning Order in Plc Program - Application",
          "Processing Plc Commands",
          "ISPSoft Software Interface and Delta Plc Basics -1",
          "ISPSoft Software Interface and Delta Plc Basics -2",
          "Delta Plc Symbols (X , Y , S , D , T, C)",
          "What is Scan Time of Plcs and Where can we see it in Delta Plcs",
          "How to do Online Edit & Activate 'X' Points",
          "Hardware Structure and Sink- Source and Transistor Output Connections"
        ],
        "Complete Useful Commands for Develop a Projects": [
          "Contact Types and Start-up to Basic Commands",
          "Data Types",
          "Special M Contacts and Usage",
          "Timer and Counter Basics and Usage",
          "Move and Comparison Commands and Types",
          "Math - Increment and Decrement Commands",
          "Data Addressing Commands",
          "Floating Numbers Math and Comparison Commands",
          "Scale Command and Usage",
          "BOUT & ZRST Command",
          "FLT & INT Commands Usage",
          "INV & ALT Commands",
          "SFTR-SFTL Instruction Command",
          "WSFR-WSFL Intstruction",
          "TRD - Reading Time Command",
          "PID & GWPM Instruction Technical Information - Before PID Example",
          "PID Heating - Cooling Example"
        ],
        "Special Modules , Encoder , Stepper Motor Basics and Programming": [
          "Special Modules and FROM/TO Commands - Introduction",
          "PT Temperature Module - DVP04PT-S",
          "TC Temperature Module - DVP04TC-S",
          "Analog Input and Output Usage and Applications",
          "High Speed Counters and Pulse Types - Introduction",
          "SPD - Speed Command Usage",
          "Encoder Basics",
          "What is Encoder & Resolver and What is Differences ?",
          "Encoder Applications - Read Speed and Revolution",
          "1 Phase 1 Input Encoder Usage Example",
          "2 Phase 2 Input Encoder Usage Example",
          "High Speed Comparative Set and Reset Commands",
          "Stepper Motor Basics",
          "Pulse Commands - PLSY/DPLSY",
          "Pulse Commands - PLSV/DPLSV",
          "Pulse Commands - PLSR/DPLSR",
          "Pulse Commands - DRVI/DDRVI",
          "Pulse Commands - DRVA/DDRVA"
        ],
        "WPLSoft Software - Quick and General Review": [
          "WPLSoft - Quick and General Introduction",
          "How to Download WPLSoft",
          "What is a Memory Map and How to Use it ?",
          "Timer & 10 ms Timer Usage",
          "1 ms Timer & Accumulative Timer Usage",
          "16-Bit Counter & 32-Bit Counter Up/Down & INC - DEC",
          "PLS - PLF & ANDP - ANDF- ORP- ORF Instructions",
          "INV Instruction",
          "ATMR Instruction"
        ],
        "WPLSoft Software - Modbus Communication": [
          "Introduction to Hardware",
          "Let's Prepare Environment For Programming",
          "Communication Protocol & Special Bits Codes",
          "Let's Start Communication with Special Bits",
          "VFD Settings",
          "Application and Running of Motor via VFD with Modbus"
        ],
        "Modbus Communication Basics": [
          "What is Communication ?",
          "Communication Connection Ports",
          "Serial Communication Pin Definitions",
          "Com1 - Com2 - Com3 (RS-485) Protocol Settings",
          "Station Number Definition for Communication",
          "Modbus Communication Basics Between Plc and Drive",
          "Delta Plc Complete Modbus Adresses Guide Pdf Download",
          "Modbus Communication Example - 1",
          "Modbus Communication Example - 2",
          "Delta VFD-E Modbus Addresses Guide for Serial Communication",
          "Delta C2000 VFD Modbus Addresses Guide for Serial Communication"
        ],
        "Plc Programming Languages - Ladder - Structured Text - Function Block Diagram": [
          "FBD - Function Block Diagram Basics",
          "Function Block Diagram Basics 2",
          "ST - Structured Text Basics",
          "Structure of ST Language & Basics - 2",
          "ST Operators",
          "IF Loop - Example 1",
          "IF Loop - Example 2",
          "Case Loop - Example 1"
        ],
        "Delta HMI Tutorials (From Basic to Advance) - Dopsoft": [
          "How to Download Dopsoft Software",
          "How to Create New Project and Settings",
          "How to add and Use Set & Reset Buttons & Indicator and Usages",
          "How to Add and Use Momentary & Maintained Buttons",
          "How to Use and Add Numeric Entry & Display and Character Entry & Display",
          "How to add Text and Shapes etc. in HMI",
          "How to use Increment - Decrement and Set Constant Buttons",
          "How to Show Date and Time on HMI",
          "How to Import Your Own Picture from Picture Bank in Dopsoft",
          "HMI Picture Archive Download",
          "How to Create Multiple Language in Dopsoft",
          "How to add Colors on Pipe and How to Animate it"
        ],
        "DOP100 Series New HMIs Of Delta": [
          "Dop100 Series vs DOP-B Series HMI",
          "New Image Library Introduction",
          "Animations",
          "Animations 2 - Variable Position Usage",
          ".GIF in HMI",
          "Operation Log Table - Save any change in HMI",
          "QR Code - How to Create QR code in HMI",
          "Multiple Action Button Usage",
          "PDF - Text Viewer on HMI",
          "SubScreen Usage",
          "How to Prohibited Upload HMI Programs",
          "Max - Min Settings & Offset & Gain Settings",
          "How to Set Password to Buttons & Inputs etc & Security Levels etc.",
          "Alarms - Active Alarm List & Alarm History Table Usage"
        ],
        "Plc Programming Applications - From Real Working Machines": [
          "Let's Practice - Application Example and Solution -1",
          "Let's Practice - Application Example and Solution -2"
        ]
      },
      "requirements": [
        "This course does not require any prior knowledge."
      ],
      "description": "Dear Students ;\nComplete Delta Plc Programming created from our experiences.You can learn with us complete delta plc programming and also plc programming basics.\nBasically this course includes Complete delta plc programming basics, HMI basics , ASDA A2 Servo driving basics , AS series basics , RS485 communication between plc and vfd basics , hardware basics , real life programming examples , downloadable example projects etc.\nYou can find much more than you dream or want.\nJust join to course and find whole valuable informations about delta plcs.\nAs an automation and software engineer and founder of derstagram akademi and derstagram automation home company , I'm gonna be with you whenever you face a problem.\nWith this course, you will learn how to program delta plc completely and professionally.\nThe course includes all topics that will help you on the field.\nApart from PLC programming, hardware and basic automation information was also included in the course.\nIn this way, you will have information about the work of the product groups you will use.\nIn addition to the basic and advanced command information, you will find special modules , encoder, stepper motor, modbus communication, high speed counters, special data and auxiliary relays topics etc.\nYou are going to learn plc programming languages (Ladder diagram programming , Structured text programming , Function block diagram programming etc.)\nYou will also see and learn the solutions to the real problems that we encounter in the question and answer section.\nAt the end of this course, you will be able to program with delta plc and control vfds and other equipment through communication.\nIn this course, you will learn  ISPSoft software and it's interface effectively.\nAlso you are going to learn WPLSoft + DIAStudio effectively.\nYou can be a professional PLC programming developer with this course, where we can help you with many issues from our professional life, which is full of experience as an automation coordinator and plc programmers in the field, as well as Derstagram academy.\nAnd again, you can contact us in your projects about Delta plc and where you get stuck.\nIf you really want to be a professional programmer about plcs ,\n- Write a plc programs as an example after each lesson\n- When you didn't understand anything in lesson , ask question immediately\n- If you need an extra topics , inform us\n- We are going to willing to teach delta plc programming to you , never forget this and push yourself forward always\nUpdate !\nDear Students , AS series plcs , servo drive(asda-a2) , canopen communication and DIAStudio lessons and sections updated.\nYou can learn complete delta plc programming professionally with applications with us.\n\n\nBest Regards\nMustafa",
      "target_audience": [
        "Anyone who is willing to learn PLC programming and wants to improve himself/herself in industrial automation and plcs."
      ],
      "url": "https://www.udemy.com/course/complete-delta-plc-programming-tips-and-tricks/"
    },
    {
      "title": "Fundamentals of Cisco CLI Switch Configuration",
      "bio": "Learn Cisco CLI Switch Configuration",
      "objectives": [
        "Fundamentals of Cisco CLI Switch Configuration",
        "Accessing a switch",
        "Configure the terminal program",
        "Configure a switch hostname",
        "Saving and viewing configurations",
        "Encrypting passwords",
        "Assign an IP address to a switch",
        "Explore port modes and security",
        "Create VLANs",
        "Resetting a switch",
        "Much more"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course working files",
          "Explore the switch and the network topology"
        ],
        "Accessing a Switch": [
          "The Catalyst 2950 switch",
          "Access the switch with in-band and out-of-band methods",
          "Configure the terminal and three configuration modes",
          "Built-in help"
        ],
        "Global Commands": [
          "Configure a switch hostname",
          "Disable ip domain-lookup",
          "Create a banner message",
          "Save and view configurations"
        ],
        "Secure Management Access": [
          "Secure console and Telnet access",
          "Secure privileged EXEC mode access",
          "Encrypt passwords",
          "Addressing a Switch"
        ],
        "Switch Port Mode and Security": [
          "Switch port commands and settings",
          "Switch port security"
        ],
        "VLANs": [
          "Understanding VLANs",
          "Configure VLANs",
          "Add ports to a VLAN",
          "Configure trunk ports",
          "Verifying configurations"
        ]
      },
      "requirements": [
        "Basic understanding of network fundamentals"
      ],
      "description": "In this course you will learn how to access the switches CLI through an out-of-band connection, using a console cable and a terminal program. Learn how to configure a Cisco switch to connect and control resources on your network.\nThe Cisco switches are one of the best on the market. Versatile, reliable, flexible and powerful, the Cisco switch product line offer unparalleled performance and features.\nThis course explore the Cisco command-line interface using an out-of-band connection with a cable and terminal program. We will then get into how to access the switch's three modes—user EXEC, privileged EXEC, and global configuration—and use commands to configure essential settings.\nLearn about the built-in help features, help commands, and the Tab key function. I'll then cover the basic global commands used to configure essential switch settings.\nAfter addressing the switch and configuring a default gateway, we will explain how to modify individual port modes, secure those ports, and create and manage virtual LANs (VLANs).\nFinally, at the end of the course you will learn how to verify your settings and reset the switch if necessary. We will then get into some more tips that you should know.\nBy the end of this course you will have a solid understanding of setting up Cisco CLI Switch Configuration.",
      "target_audience": [
        "IT professionals"
      ],
      "url": "https://www.udemy.com/course/fundamentals-of-cisco-switch/"
    },
    {
      "title": "Introduction to ZigBee",
      "bio": "Learn the fundamentals of the ZigBee Protocol and Build ZigBee Solutions from Scratch",
      "objectives": [
        "Learn in depth the basics of ZigBee Protocol & its features",
        "Tinker with XBee S2C Radios & XCTU Configuration Tool",
        "Implement 3 Projects using Standalone XBee Radios",
        "Work in both Transparent Mode and API Mode",
        "Implement 2 XBee Projects using Raspberry Pi 4 & ESP32",
        "Integrate Mesh Networking with ZigBee Cloud Gateway"
      ],
      "course_content": {
        "Getting Started with ZigBee": [
          "Introduction to the course",
          "Radio Basics",
          "What is ZigBee?",
          "ZigBee Vs. Bluetooth Vs. WiFi",
          "Real World Applications of ZigBee",
          "Assignment 1"
        ],
        "In-depth Understanding of ZigBee": [
          "The ZigBee Protocol Stack",
          "Device Roles and Network Topologies in ZigBee",
          "Device Addressing in ZigBee Networks",
          "ZigBee Application Profiles",
          "ZigBee Operating Modes",
          "Assignment 2",
          "ZigBee Basics"
        ],
        "Getting Hands-on with XBee": [
          "Hardware Overview of XBee S2C Module",
          "Introduction to the XCTU Software",
          "XBee S2C Module Configuration using XCTU Part 1",
          "XBee S2C Module Configuration using XCTU Part 2",
          "Chat Application using 2 XBee Modules Part 1: Basic Implementation",
          "Chat Application using 2 XBee Modules Part 2: Encryption Implementation",
          "Chat Application using 2 XBee Modules Part 3: AT Command Implementation",
          "Assignment 3",
          "ZigBee Hands-on"
        ],
        "Physical Computation using XBee Modules Only": [
          "XBee I/O Line Passing",
          "Digital Sensing and Actuation: Home Security System",
          "Analog Sensing and Actuation: Intelligent Street Light System",
          "Transmit Data on a Logic Level Change: Smart Door Sensor",
          "Sleeping Modes & Encryption in XBee",
          "Assignment 4"
        ],
        "Physical Computation using XBee Modules and MCUs": [
          "In-depth Overview of API Mode",
          "Working with XBee API Mode Libraries Part 1",
          "Working with XBee API Mode Libraries Part 2",
          "XBee Enabled Flight Information Display System Part 1",
          "XBee Enabled Flight Information Display System Part 2",
          "XBee MESH Enabled Forest Fire Cloud Monitoring System Part 1",
          "XBee MESH Enabled Forest Fire Cloud Monitoring System Part 2",
          "XBee MESH Enabled Forest Fire Cloud Monitoring System Part 3",
          "Assignment 5"
        ]
      },
      "requirements": [
        "Basic experience with electronics",
        "Worked on Raspberry Pi and ESP32 Boards",
        "Basic knowledge of Linux, Python, and Arduino IDE."
      ],
      "description": "Hello learners, Welcome to MAKERDEMY's “Introduction to ZigBee” course.\nThis is an introductory course on the ZigBee Protocol. Do you know what Apple, Amazon, and Google have in common? It is ZigBee. Apple, Amazon, and Google have come together to come up with a unified connectivity standard based on ZigBee. Want to learn what makes the ZigBee Protocol so cool?\nThis course is a ONE STOP DESTINATION for an easy introduction to ZigBee. By the end of the course, you would have internalized all the concepts behind the ZigBee protocol and its features. You would have implemented 3 mini projects and 2 major projects using the XBee Boards, Raspberry Pi, and the ESP32, across various operating modes, firmware types, network topologies, and even implement a Cloud Solution. At the end of the course, you will be in a position to come up with your own ZigBee Solutions.\nThroughout the course, we have provided a curated collection of original resources. These resources include links to documents for in-depth learning, links, videos, and more. At MAKERDEMY, we have a dedicated instructor team who will promptly answer any of your course-related queries. So, what are you waiting for?! Come, join me in this course. I'm looking forward to being your instructor, and to teach you the fundamentals about ZigBee.",
      "target_audience": [
        "Anyone who wants to get hands-on experience with the ZigBee Protocol and implement IoT Solutions",
        "Any developer or engineer, who wants to upgrade their existing project with ZigBee Integration"
      ],
      "url": "https://www.udemy.com/course/introduction-to-zigbee/"
    },
    {
      "title": "Building Alexa Skills for Home Automation with Raspberry Pi",
      "bio": "Learn to build Alexa Skills from scratch to control devices in your home with any Amazon Echo device and a Raspberry Pi",
      "objectives": [
        "Learn how to build Custom Alexa Skills",
        "Learn how to use Alexa to control anything in your home",
        "Use the Raspberry Pi and Alexa to Voice Control anything in your home",
        "Learn flask-ask and python programming for home automation projects",
        "Understand how to control AC powered appliances and devices in the home using relays",
        "Write programs to control relay circuits with the Raspberry Pi",
        "Have the confidence to perform home automation with Alexa"
      ],
      "course_content": {
        "Introduction": [
          "What is Alexa?",
          "Why is this important?"
        ],
        "Taking a Deeper Dive into Custom Alexa Skills": [
          "What are Custom Alexa Skills?",
          "Understanding the components that make up Custom Alexa Skills"
        ],
        "Preparing the hardware and software": [
          "Parts list for the course",
          "Setting up your Raspberry Pi",
          "Installing the software that you will need",
          "Downloading all the code and resources for the course",
          "Creating your Amazon Developer Account",
          "Setup and register your Alexa Device"
        ],
        "Understanding flask-ask": [
          "Overview of flask-ask"
        ],
        "Building a Hello World Alexa Skill with flask-ask": [
          "Overview of the Hello World Skill",
          "Creating the Skill Interaction Model",
          "Creating the flask-ask Skill Handler Python Program",
          "Exposing and configuring a URL for the Skill Endpoint",
          "Cryptography Error",
          "Testing our Skill"
        ],
        "Building a Custom Alexa Skill to control an LED": [
          "Overview of the Project",
          "Setting up the Circuit",
          "Creating the Skill Interaction Model",
          "Creating the flask-ask Skill Handler Python Program",
          "Exposing and configuring a URL for the Skill Endpoint",
          "Changing your default language before Testing",
          "Testing our Skill",
          "Test from an Alexa-enabled Device"
        ],
        "Build a Custom Skill to control any device using a relay": [
          "Overview of the Project",
          "Overview of how relays work",
          "Overview of the Circuit",
          "Wiring the Circuit",
          "Creating the Skill Interaction Model",
          "Testing our Relay",
          "Exposing and configuring a URL for the Skill Endpoint",
          "Testing our Skill from the Alexa Console",
          "Enable Skill on the Alexa App",
          "Changing your default language before Testing",
          "Testing our Skill on an actual Alexa Device",
          "Code Review of the MyDevice Skill Handler Python program"
        ],
        "Build a Custom Skill to Control any TV using an Alexa-enabled device": [
          "Introduction to the Project",
          "Technical Overview of the Project",
          "Resources for the Project",
          "Parts that are needed",
          "Setup your Raspberry Pi"
        ],
        "Setting up the circuit": [
          "Review of the Circuit Diagram",
          "Wiring the Circuit"
        ],
        "Configuring LIRC (Linux Infrared Remote Control)": [
          "Installing the LIRC (Linux Infrared Remote Control) Library",
          "LIRC Setup",
          "Testing LIRC with our Circuit",
          "Programming our IR remote"
        ]
      },
      "requirements": [
        "Be familiar with the Raspberry Pi",
        "Have a basic understanding of programming (any language, but Python would be ideal)",
        "No Alexa device needed to test the skills being developed",
        "We will test Alexa skills on freely available browser testing tools and will also test on actual Alexa devices if you have one",
        "No extensive previous  programming or electronics knowledge required",
        "All circuits will be built from scratch and code explained with detailed line-by-line code reviews"
      ],
      "description": "With millions of Alexa devices being sold, learning to build Custom Alexa Skills is becoming a highly sought after skill by employers. Electronics hobbyists and do-it-yourselfers can also use Alexa to perform home automation.\nThere is great power in being able to control any device in your home with an Alexa. But what if you want to perform home automation and have Alexa control your lights, appliances and even any tv in your home and have complete control to customize which devices you control with your voice without spending hundreds or even thousands of dollars on smart home gadgets or devices?\nBy using a Raspberry Pi, it is easy to interface with home electronics and devices to create custom skills using Alexa to voice control anything in your home and achieve true home automation!\nThis course will teach you how to build Alexa Skills that will run on any Amazon Echo device to voice control anything in your home.\nIn this course, you will learn:\nWhat is Alexa and the underlying Alexa ecosystem that uses the Alexa Voice Service\nWe will discuss Custom Alexa Skills and you will learn the components that make up a Custom Alexa Skill\nWe then dive into preparing your Raspberry Pi for the projects we will build\nWe will describe the flask-ask Python library which we will be using to build Custom Alexa Skills\nYou will learn how to use the Amazon Developer Portal to configure and create your Custom Alexa Skill\nWe will build a Skill to control an LED connected to the Raspberry Pi with Alexa\nWe then dive into using relays to safely connect to our Raspberry Pi and AC mains power\nWe will create a Skill that allows you to control any device in your home to turn it on or off using Alexa\nWe create an awesome project that will enable you to voice control any tv in your house even it is 20 years old using Alexa\nWe will build an IR receiver and transmitter circuit that connects to our Raspberry Pi\nWe will work with the LIRC (Linux Infrared Control) library on our Raspberry Pi\nYou will be able to adjust volume, navigate channels, go to a specific channel, power on and off your tv using Alexa\nThis can be completely customized to work with any tv\nYou can add any functionality to the skill such as play, pause, rewind for DVRs or basically add any feature your remote can perform\nThe skills that will be created in this course can be run on any Amazon Echo device in your home. You will learn how to test the custom skills that we will build on an Amazon Echo or any Alexa-enabled device.\nAlong the way you will learn:\nBasic Electronics\nHow to work with relays and safely control high voltage AC devices from a Raspberry Pi\nHow to use an octocoupler circuit to allow electrical isolation to protect your Raspberry Pi when connecting to high voltage AC power from a relay\nHow to work with GPIO pins on the Raspberry Pi\nLearn about infrared transmitters and receivers\nPython programming\nLearn to program for Alexa\nHow to build Custom Alexa Skills from scratch\nHow to expose your Raspberry Pi to the internet via a publicly available https endpoint using Ngrok\nHow to build projects for home automation and the internet of things that can be controlled via Alexa\nNo previous programming knowledge or electronics knowledge required. All principles taught from scratch!\nNo Amazon Echo device is required to build and test skills.\nWhat are you waiting for? Let's learn to build home automation and internet of things projects that you can control via any Alexa Device now!\nGet started today!",
      "target_audience": [
        "Programmers who want to learn to build Alexa Skills",
        "Someone interested in Home Automation",
        "Developers working on Internet of Things Projects",
        "Python programmers who want to build home automation projects with the Raspberry Pi",
        "Developers wanting to learn to build Alexa Skills to work with Raspberry Pi for Home Automation",
        "Electronics Hobbyists and Prototypers",
        "Developer that wants to learn flask-ask",
        "Entrepreneurs seeking to prototype automation and IOT ideas with Alexa",
        "Someone who wants to understand the Alexa ecosystem and its capabilities",
        "Beginners to electronics"
      ],
      "url": "https://www.udemy.com/course/building-alexa-skills-for-home-automation-with-raspberry-pi/"
    },
    {
      "title": "Make an Arduino Robot",
      "bio": "An autonomous light-seeking an obstacle avoiding robot for Arduino Makers that want to learn the hard way",
      "objectives": [
        "Use continuous rotation servos",
        "Use micro servos",
        "Use light sensors to find the bearing of a light source",
        "Usa rotating distance sensor to find a free path",
        "Design a custom moving robot on a breadboard",
        "Understand the basic challenges of robot design",
        "Use a prototyping shield to produce a refined prototype"
      ],
      "course_content": {
        "Introduction": [
          "What is this course about?",
          "Course guide",
          "How to get the most out of this course",
          "Tools you will need",
          "Parts you will need",
          "Specifications - what will the robot do"
        ],
        "The micro controller and sensors": [
          "Introduction",
          "The microcontroller",
          "Single photo sensor",
          "Dual photo sensors",
          "Light conditions and robot actions",
          "Implementing the light seeking sketch",
          "Implementing the light seeking - testing",
          "The ultrasonic distance sensor",
          "The ultrasonic sensor sketch and demo",
          "Section 2 Quiz"
        ],
        "The motors": [
          "Introduction",
          "Continuous rotation servos - circuit assembly",
          "Continuous rotation servos sketch and demo",
          "The mini servo motor",
          "Find a clear path with the distance sensor and the mini servo Part 1",
          "Find a clear path with the distance sensor and the mini servo Part 2",
          "Section 3 Quiz"
        ],
        "The chassis and assembly": [
          "Introduction",
          "The chassis",
          "Attach the continuous rotation servos",
          "Attach the chassis top side",
          "Attach the breadboard",
          "Attach the mini servo and distance sensor",
          "Section 4 Quiz"
        ],
        "Wiring": [
          "Introduction",
          "The wiring schematic walkthrough",
          "Wiring the motors",
          "Wiring the distance sensor",
          "Wiring the LEDs",
          "Wiring the potentiometer and distance sensors",
          "Wiring the batteries",
          "Section 5 Quiz"
        ],
        "Testing": [
          "Introduction",
          "Testing the batteries and sketch",
          "Testing on the bench",
          "First floor test - Light seeking",
          "Second floor test - Light seeking (improved)",
          "Using Bluetooth for wireless telemetry",
          "Third floor test - Obstacles",
          "Testing conclusion",
          "Section 6 Quiz"
        ],
        "Making the project permanent with the prototyping shield": [
          "Introduction",
          "The prototyping shield",
          "Component placement on the prototyping shield Part 1",
          "Component placement on the prototyping shield Part 2",
          "Wire the prototyping shield 1 - Arduino Switch",
          "Wire the prototyping shield 2 - 5V light sensors pot and distance sensor",
          "Wire the prototyping shield 3 - GND light sensors pot and distance sensor",
          "Wire the prototyping shield 3 - Analog pins",
          "Wire the prototyping shield motors 1",
          "Wire the prototyping shield motors 2",
          "Testing the prototyping shield on the bench",
          "Conclusion: Removed the breadboard",
          "Section 7 Quiz"
        ],
        "Conclusion and Bonus Lecture": [
          "What did you learn in this course?",
          "What else can you do with your robot?",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Arduino Step by Step Getting Started",
        "Basic understanding of the Arduino",
        "The hardware components needed to build the course robot (see section 1 for details)",
        "Basic tools like a screwdriver, tweezers, cutters, basic multimeter etc (see section 1 for details)",
        "A computer",
        "The Arduino IDE (free download)"
      ],
      "description": "\"Tell me, and I forget. Teach me, and I remember. Involve me, and I learn.\"\n- Benjamin Franklin\nI have designed this Arduino project course as an opportunity for you to get deep into the messy details of understanding, designing and constructing a simple yet infinitely extensible wheeled robot.\nFrom figuring out what the robot is supposed to do, to selecting the right parts, configuring them, assembling them and testing them, all the way to producing a refined outcome, this project emphasises the iterative process of problem-solving.\nBy the end of the course, you will have created an Arduino wheeled robot that can navigate towards a light source and avoid obstacles along the way, on its own. But more than that, by the end of the course you will have become a better problem solver. You will have experience in analysing problems and designing solutions. You will be able to integrate simple mechanical parts with motors, batteries, sensors and other electronics.\nThe ideal student for this course is someone who has completed Arduino Step by Step Getting Started or has a good basic level of understanding of the Arduino. You already know how to write simple sketches and wire components in a breadboard. Although I will be showing the robot building process in great detail, having a basic level understanding of the Arduino will make this project a lot more enjoyable for you.\nI invite you to review the free lectures in the first section of the course to find out more details about it.\nIf you are excited about becoming a Maker with the Arduino, join many other Makers and me in Make an Arduino Robot!\nI look forward to learning with you!",
      "target_audience": [
        "Arduino Makers looking for a challenging but rewarding project",
        "Graduates of Arduino Step by Step Getting Started",
        "Makers who want to improve their understanding of motors, sensors, system design"
      ],
      "url": "https://www.udemy.com/course/arduino-robot/"
    },
    {
      "title": "Synology NAS - Configure & Administer like a Storage Pro!!",
      "bio": "Become a storage expert by understanding how to setup, use and configure the Synology NAS systems and appliances",
      "objectives": [
        "Systems and Storage Administration",
        "How to setup and configure a Synology NAS",
        "Learn how to use DSM",
        "How to create RAID Groups, Volumes and Disk Pools",
        "Configure Backup and NAS to NAS Replication"
      ],
      "course_content": {
        "Introduction": [
          "Instructor & Course Introduction",
          "What is a NAS",
          "Introduction to Synology"
        ],
        "Hardware and Initial Walkthrough": [
          "NAS Compare - Rackmount vs Desktop",
          "DSM Overview"
        ],
        "Setup & Config": [
          "Initial Setup and Configuration",
          "Security - Set, Update, Reset Passwords",
          "Network Connectivity",
          "Widgets"
        ],
        "Disk Configuration": [
          "Differences of traditional RAID",
          "SSD or HDD for NAS?",
          "Storage Manager",
          "Creating a Volume Overview + Synology Hybrid Raid (SHR)",
          "Hot Spares",
          "Shared folder and permissions",
          "Using FileStation",
          "Delete a Volume & Storage Pool",
          "Setup of Synology Storage to VMware Datastore (Optional)"
        ],
        "Updates and Notifications": [
          "Resource Monitor",
          "Logs",
          "Email Notification",
          "Security Advisor",
          "DSM Updates",
          "Manually Updating DSM"
        ],
        "Services and Operations": [
          "Users and Groups - Local & Domain",
          "Integrate with AD",
          "External devices",
          "Hardware + Power Settings",
          "DHCP Server",
          "Task Scheduler",
          "SSH into NAS",
          "Failed Disk Replacements"
        ],
        "Apps and Further Config": [
          "Package Center",
          "Antivirus",
          "Setup Plex Media Server",
          "Setup a Wordpress Website",
          "Setup and Run Virtual Machines (VM's) on a Synology NAS",
          "Migrating data from one NAS to another NAS"
        ],
        "Backups are Important": [
          "Backup NAS to USB Drive - Using USB Copy",
          "Backup NAS to the AWS Cloud - Using CloudSync",
          "Backup NAS to another NAS",
          "Snapshots and Replication"
        ],
        "Conclusion": [
          "Final Thoughts"
        ]
      },
      "requirements": [
        "Basic IT Skills",
        "Basic Storage knowledge",
        "A desire to learn more!"
      ],
      "description": "In this course we will cover a range of storage technologies focusing on the NAS, but specificatlly how to setup, use and configure Synology NAS systems.\nIf you have heard terms such as SAN, NAS, and Storage this course is perfect for you, even if you are new or just want to learn more! This course will focus on the skills needed to setup and work with the Synology NAS (network attached storage) appliances, which are used in businesses and homes across the world.\nThis course will give you the essential and foundational technical skills to manage a Synology NAS like a pro!\n\n\nIn this course we’ll provide you with -\nknowledge of what a NAS is and introduce you to Synology\nthe expertise on how to setup and configure a NAS\nthe skills to build and use disk pools, voumes and shares\nknowledge of RAID differences\nskills to fully administer and master the Synology NAS\nmuch much more\n\nDo I need to be an expert?\nNo, this course is designed for people who have little to lots of knoweldge about Storage, NAS and Synology systems.\nBy the end of the course you'll be able to fully manage a Synology NAS and take your new skills to administer it like a pro!\n\n\nWhy this course?\nThis course will be easy to understand, and give you an overview of the necessary skills you need to know.\nWe'll provide you with the foundational skills to add to your knowledge bank, while continuing to improve on your tech skills more and more!",
      "target_audience": [
        "Synology NAS Users",
        "Storage Admins",
        "Helpdesk Admins",
        "Desktop Support Techs",
        "Systems Administrators & Engineers"
      ],
      "url": "https://www.udemy.com/course/synologynas/"
    },
    {
      "title": "Arduino Data Visualization using Python",
      "bio": "Control your Arduino using Python easily and effectively and unleash the power of Python coding and Arduino Hardware",
      "objectives": [
        "Connect Python with Arduino",
        "Write Python code to draw a GUI to Control Arduino Pins",
        "Write Python code to collect readings from Arduino",
        "Visualize Data in many ways using a Python coded visual interface",
        "How to read Arduino Input\\Output pins states",
        "How to draw a plot to monitor Arduino pins",
        "How to store Sensors data to Excel file for further processing",
        "Analyze and Convert Sensor Readings as needed",
        "Learn serial communication basics in Python"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Introduction",
          "Visualizing Arduino Data with Python",
          "Who We Are?",
          "Hardware and Software Requirements",
          "Quiz",
          "Introduction and Setup Requirements"
        ],
        "Important Note: Review System": [
          "Important Note: Review System"
        ],
        "Download and Install Software Section": [
          "Download and Install Arduino Pro IDE",
          "Download and Install Python Editor",
          "Download and Install Required Libraries",
          "Quiz",
          "Software Installation and Configuration"
        ],
        "Python Coding to Control Arduino Pins": [
          "Python GUI with Button to Control Arduino Pins",
          "Creating a Python GUI to Control Arduino Pins"
        ],
        "Arduino Real-Time Plotting with Python": [
          "Arduino Real-Time Plotting with Python",
          "Real-Time Data Plotting from Arduino using Python"
        ],
        "Arduino Input/Output Control via Python": [
          "Blink Simple Led Example with Python",
          "Reading Digital Input and Sending Digital Output with Python",
          "Quiz",
          "Input/Output Control with Python and Arduino"
        ],
        "Extra": [
          "Installing Python and PIP"
        ],
        "Practice Test": [
          "Python and Arduino Integration"
        ],
        "Course Project": [
          "Course Project",
          "Demonstrating Arduino Data Visualization with Python"
        ]
      },
      "requirements": [
        "Basic Knowledge of Digital Electronics"
      ],
      "description": ">>> Arduino Data Visualization using Python: Step by step is a course specially created for Electronic Geeks & Engineers who want to take Arduino Programming and Data Manipulation to next level. <<<\nWelcome to this course.\nThe course lesson will explain “How to work on Arduino Data using Python Scripting” by using Python Language and PythonEnvironment. This course will work best for you if your basic knowledge of Electronics and Arduino. You will learn how to interface the Arduino with your Computer and Control it using Python and how to manipulate Arduino Data easily.\nYou will get to create a GUI using Python to control each and every single Pin inside Arduino, turn on and off outputs and visualize data\n\n\nWhy You Should Join this course?\nLearn how to control your Arduino with Python quickly and easily\nUnlock the power of Python coding and Arduino hardware\nMake your own data visualizations with Arduino, using Python\nGet a practical introduction to using Python\nCreate your own electronic music\nCode your own algorithm to solve problems\n\n\nBecause Arduino on its own won't give you much data control, you just get basic Input/Output control, while mixing it with the Powerful Python programming environment will help you unleash its full potential and have full data control.\nYou’ll learn how to:\nWrite Python code to draw a GUI to Control Arduino Pins\nWrite Python code to collect readings from Arduino\nVisualize Data in many ways using a Python coded visual interface\nHow to read Arduino Input\\Output pins states\nHow to draw a plot to monitor Arduino pins\nHow to store Sensors data to Excel file for further processing\nAnalyze and Convert Sensor Readings as needed\n\n\nAt the end of this course, you can create Innovative Projects. The only thing that you need to do is THINKING, WIRING & CODING.",
      "target_audience": [
        "Engineering Students - Electronics, Electrical & Computer Science",
        "High School Science Students",
        "Electronic Geeks, Hobbiest & Art Students",
        "Embedded Systems Geeks",
        "Arduino Geeks",
        "Python Geeks"
      ],
      "url": "https://www.udemy.com/course/arduino-python-data-visualization-pyserial-display-data/"
    },
    {
      "title": "Make Your Own Arduino Shield",
      "bio": "Make Your Own Arduino Shield using More than 5 Software: Fritizing, Circuit maker, Easy Eda and Eagle Software.",
      "objectives": [
        "Create and design a custom Arduino Shield",
        "Draw schematic of Your Specialized Arduino Shield and wire components",
        "Create your own custom components and component library",
        "Compile design detect and eliminate design errors",
        "Define board shape and size",
        "Auto route to speed up the routing process",
        "Route Arduino Shield Printed Circuit Board (PCB)",
        "Eliminate errors and reduce manufacturing board iterations by Using design rule checker"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Section Intro",
          "Introduction",
          "Designing a Custom Arduino Shield",
          "Important Note: Review System",
          "Introduction to the Course",
          "Summery"
        ],
        "Arduino Shield using Fritizing": [
          "Section Intro",
          "Download And Install Software Free",
          "Create Arduino Shield",
          "Create Arduino LCD Shield",
          "Arduino Shield Creation with Fritzing",
          "Arduino Shield Creation with Fritzing",
          "Summary",
          "Reading Meterial"
        ],
        "Arduino Shield using Circuit Maker": [
          "Section Intro",
          "Download and Install Circuit Maker",
          "Create LCD Arduino Shield Schematic",
          "Create PCB For Arduino LCD Shield",
          "Creating Arduino Shields with Circuit Maker",
          "Arduino Shield Creation with Circuit Maker",
          "Summary",
          "Reading Material"
        ],
        "Arduino Shield using Proteus Professional Software": [
          "Section Intro",
          "How to Make Arduino Shield using Proteus",
          "How to Make Arduino Shield PCB using Proteus",
          "Arduino Shield Creation with Proteus",
          "Summery",
          "Reading Meterial"
        ],
        "Easy EDA Arduino Shield PCB Board Design": [
          "Section Intro",
          "EasyEDA Arduino Shield",
          "Designing Arduino Shields with EasyEDA",
          "Summary",
          "Reading Meterial"
        ],
        "Arduino Shield using Eagle Software": [
          "Section Intro",
          "Download and Install Eagle Software",
          "How to Create Arduino PCB Shield Using Eagle",
          "Creating Arduino Shields with Eagle",
          "Summary",
          "Reading Meterial"
        ],
        "Practice Test": [
          "Arduino Shield Creation Techniques"
        ],
        "Who we are?": [
          "Who We Are?"
        ],
        "Course Project": [
          "Course Project",
          "Custom Arduino Shield Design and Integration"
        ],
        "Course Wrap-Up": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Time, Dedication and Patience to learn and implement new knowledge.",
        "A PC"
      ],
      "description": "Welcome to this course.\nWhat is this course about:\nIn this course, you will learn from start to finish, from zero to production-ready, how to design custom Arduino Shield Printed Circuit Boards (PCBs). It will help you to improve your PCB design skills, which will be valuable for freelancing or getting a job in Arduino and PCB design.\nWhy You Should Take This Course:\nLearn about Arduino and how to build your own shield.\nEasy-to-follow video lectures.\nLearn to use more than 5 software tools for designing and creating Arduino Shields.\nPractical design course.\nBuild an Arduino Shield with hands-on guidance.\nLearn about Arduino components and how they work together.\nMaster tools such as Eagle CAD, Fritzing, Easy EDA, and Circuit Maker.\nWhat You Should Expect After Taking This Course:\nGet started with PCB design using more than 5 software tools.\nDownload and install different circuit design software.\nCreate your own shield tailored to your needs.\nDesign the Arduino Shield schematic.\nWire components in schematic view.\nTransfer schematic designs into PCB layouts.\nPlace components on the board.\nCreate multilayer boards.\nRoute layers and place components efficiently.\nUse autorouting to save time.\nEliminate design errors.\nCreate Gerber files for your manufacturer.\nUser Testimonials: \"This course demystified PCB design for me. I now have the confidence to create my own Arduino shields.\" - Alex R.\n\"A fantastic resource for anyone looking to get into PCB design and Arduino. Highly recommend!\" - Lisa M.\nAuthor Bio: Ashraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. As a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world. With over 250,000 students from around the world, Ashraf’s online courses have helped many to kick-start their careers in the industry.\nCall to Action: Enroll now to master PCB design for Arduino shields and take your projects to the next level!\nFAQ: Q: Do I need prior experience in electronics or programming to take this course? A: No, this course is designed for all levels.\nQ: Will I need to buy additional equipment? A: The course provides a list of necessary hardware, all of which are affordable and easily accessible.\nWhat You Will Learn\nDesign custom Arduino shields from scratch\nUse various PCB design software tools\nCreate schematics and PCB layouts\nTransfer designs to production-ready formats\nOptimize PCB designs for functionality and manufacturability\nWho Is This Course For\nElectronics enthusiasts\nHobbyists interested in Arduino and PCB design\nBeginners in PCB design\nAnyone looking to create custom Arduino shields\nRequirements\nAn Arduino board or clone\nBasic understanding of using a computer\nNo prior programming or electronics experience needed\n\n\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading team in the Microcontroller Industry, with over 13 Years of Experience in teaching and doing practical projects. They strive to provide deep, hands-on experience in their courses, offering step-by-step blueprints on various topics.\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and maker. He has been the Chief Educational Engineer at Educational Engineering Team since 2007, and his mission is to explore new trends and technology to help educate the world. His online courses have helped over 250,000 people worldwide to build successful careers.\nEducational Engineering Team offers courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World\nI will now proceed to create an image based on the provided description.",
      "target_audience": [
        "Want to create your own custom Arduino Shield",
        "Want to get a job in PCB design",
        "Want to learn Making Your Own Arduino Shield in the shortest possible time.",
        "Want to get started creating cool gadgets"
      ],
      "url": "https://www.udemy.com/course/arduino-shield-make-your-own-arduino-pcb-shield-arduinoshield/"
    },
    {
      "title": "SPI Interface in an FPGA in VHDL and Verilog",
      "bio": "Become an expert at SPI communication, get working code with this course!",
      "objectives": [
        "Basics of Serial Peripheral Interface (SPI)",
        "VHDL and Verilog FPGA working code of SPI interface",
        "Testbench (code simulations)",
        "Ambient Light Sensor application of SPI using an Analog to Digital Converter (ADC)"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the Course",
          "Basics of SPI",
          "Lecture 1 Quick Quiz",
          "Hardware Used in This Course"
        ],
        "SPI in VHDL": [
          "SPI Master in VHDL",
          "SPI Master Testbench in VHDL",
          "Addition of Chip-Select in VHDL",
          "Testbench with Chip-Select in VHDL"
        ],
        "SPI in Verilog": [
          "SPI Master in Verilog",
          "SPI Master Testbench in Verilog",
          "Addition of Chip-Select in Verilog",
          "Testbench with Chip-Select in Verilog"
        ],
        "PROJECT - Ambient Light Sensor using SPI!": [
          "Project - Ambient Light Sensor in Verilog"
        ],
        "List of Resources": [
          "List of Resources"
        ]
      },
      "requirements": [
        "Basic familiarity with FPGAs",
        "Experience with EITHER Verilog or VHDL, I do both!"
      ],
      "description": "This course will take you through the basics of SPI communication.  I will explain how the interface works, what each signal does, and talk about how master to slave communication is possible.  I then go through both the VHDL and Verilog code for an SPI Master controller and show how to communicate with a peripheral device.",
      "target_audience": [
        "Any level FPGA engineer looking to learn about SPI"
      ],
      "url": "https://www.udemy.com/course/spi-interface-in-an-fpga-in-vhdl-and-verilog/"
    },
    {
      "title": "DSP From Ground Up™ on ARM Processors [UPDATED]",
      "bio": "Digital Signal Processing on ARM : DFT, Filter Design, Convolution, IIR, FIR, CMSIS-DSP, Linear Systems",
      "objectives": [
        "Develop efficient DSP algorithms using MAC and SIMD instructions",
        "Develop RealTime Digital Signal Proceesing firmware",
        "Understand Cortex-M4, M7 DSP optimization strategies",
        "Master the CMSIS-DSP Library",
        "Develop and test the Convolution Kernel algorithm on ARM Processors",
        "Perform convolution using the ARM CMSIS-DSP Library",
        "Develop and test the Discrete Fourier Transform (DFT) algorithm on ARM Processors",
        "Develop and test the Inverse Discrete Fourier Transform (IDFT) algorithm on ARM Processors",
        "Develop and test the Fast Fourier Transform (FFT) algorithm on ARM Processors",
        "Perform Fast Fourier Transform (FFT) using the CMSIS-DSP Library",
        "Perform spectral analysis on ECG signals on ARM Processors",
        "Develop Windowed-Sinc filters on ARM Processors",
        "Develop Finite Impulse Response (FIR) filters on ARM Processors",
        "Develop Infinite Impulse Response (IIR) filters on ARM Processors",
        "Setup Finite Impulse Response (FIR) filters using the CMSIS-DSP Library",
        "Setup Infinite Impulse Response (FIR) filters using the CMSIS-DSP Library",
        "Build passive Low-pass and High-pass filters",
        "Build Modified Sallen-Key filters",
        "Build Bessel, Chebyshev and Butterworth filters",
        "Suppress noise in signals",
        "Give a lecture on Digital Signal Processing (DSP)"
      ],
      "course_content": {
        "Setting Up": [
          "Downloading CubeIDE",
          "Installing CubeIDE",
          "Getting the required documentation",
          "Getting the required package for bare-metal development",
          "Testing the project setup"
        ],
        "Getting Stasrted": [
          "Programming : Enabling the Floating Point Unit (FPU)",
          "Programming : Plotting Signals using the Internal Logic Analyzer",
          "Programming : UART Driver - Analyzing the Documentation",
          "Programming : UART Driver - GPIO Pin Configuration",
          "Programming : UART Driver - Protocol Paramters Configuration",
          "Programming : UART Driver - Transmission Function",
          "Programming : UART Driver - Testing the Driver",
          "Programming : UART Driver - Plotting Signals",
          "Programming : Integrating the CMSIS-DSP Library",
          "Programming : Testing the CMSIS-DSP float32_t",
          "Source Code Download"
        ],
        "Signal Statistics and Noise": [
          "Introduction to Signals",
          "The Signal Mean and Standard Deviation",
          "Programming : Developing the Signal Mean Algorithm",
          "Programming : Developing the Signal Variance Algortihm",
          "Programming : Developing the Signal Standard Deviation Algorithm",
          "Programming : Computing the Signal Standard Deviation using CMSIS-DSP"
        ],
        "Quantization and The Sampling Theorem": [
          "Understanding the Sampling Theorem",
          "The Passive Low-Pass Filter",
          "The Passive High-Pass Filter",
          "The Active Filter",
          "Chebyshev, Butterworth and Bessel Filters"
        ],
        "ARM Cortex-M DSP Support Features": [
          "Overview of Arm Cortex-M DSP Support Features"
        ],
        "Linear Systems and Superposition": [
          "Introduction to Linear Systems",
          "Understanding Superposition",
          "Impulse and Step Decomposition"
        ],
        "Convolution": [
          "Introduction to Convolution",
          "The Convolution Operation",
          "Examining the Output of Convolution",
          "The Convolution Sum Equation",
          "Programming : Analyzing the Input Signals of Convolution",
          "Programming : Developing the Convolution Algorithm",
          "Programming : Analyzing the Output Signal of Convolution",
          "Programming : Computing Convolution using CMSIS-DSP",
          "Programming : Developing a SysTick Driver to Measure Dynamic Efficiency",
          "Programming : Measuring the Dynamic Performance of CMSIS-DSP (Part I)",
          "Programming : Measuring the Dynamic Performance of CMSIS-DSP (Part II)",
          "A closer look at the Delta function",
          "The First Difference and Running Sum",
          "Programming : Implementing the Running Sum Algorithm"
        ],
        "Discrete Fourier Transform (DFT)": [
          "Introduction to Fourier Transform",
          "The Discrete Fourier Transform (DFT) Engine",
          "The Inverse Discrete Fourier Transform (IDFT)",
          "Programming : Developing the Discrete Fourier Transform (DFT) Algorithm",
          "Programming : Analyzing the ECG Signal for Inverse DFT",
          "Programming : Developing the Inverse DFT Algorithm (Part I)",
          "Programming : Developing the Inverse DFT Algorithm (Part II)"
        ],
        "Configuring the Clock Tree for Maximum Speed": [
          "Programming : Analyzing the Documentation",
          "Programming : Listing out the Steps",
          "Programming : Implementing the Clock Config function (PartI)",
          "Programming : Implementing the Clock Config function (PartII)",
          "Programming : Testing the Clock Tree by Running Inverse DFT at 100Mhz"
        ],
        "Digital Filter Design": [
          "Programming : Generating Signals with Matlab",
          "Programming : Combining Signals with Matlab",
          "Programming : Designing a Low-pass Filter Kernel in Matlab",
          "Programming : Designing a High-pass Filter Kernel in Matlab",
          "Programming : Analyzing Frequency Components of Signals in Matlab",
          "Programming : Designing Filters using the FDATool in Matlab",
          "Programming : Implementing a Digital Low Pass Filter on Embedded Device",
          "Programming : Implementing a Digital HighPass Filter on Embedded Device",
          "Programming : Comparing the DFT Results of the Embedded Device to Matlab",
          "Programming : Implementing a Moving Average Filter for Smoothening Noisy Signals"
        ]
      },
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know.",
        "You will need the STM32F411-NUCLEO Board",
        "We shall be using the STM32 IDE which is FREE."
      ],
      "description": "Do you want to learn practical digital signal processing (dsp) without confusion?\n\n\nHere’s an overview of what you’re getting in this dsp on Arm processors course...\n\n\nUnderstanding the foundations of signal processing without complications:\nBefore going on to implement practical dsp algorithms from scratch, this course teaches you the foundation of signal processing step-by-step. We shall look at key topics in signal processing including:\n\n\n-Signal statistics and noise\n-Quantization and sampling theorem\n-Analog filter design\n-Performance metrics of the Chebyshev, Butterworth, and Bessel filters\n-Linear systems and their properties.\n-Finite Impulse Response Filters (FIR)\n-Infinite Impulse Response Filters (IIR)\n-Superposition, synthesis, and decomposition.\n-Convolution and its properties\n-Discrete Fourier Transform (DFT) and IDFT\n\n\nDeveloping Digital Signal Processing Algorithms:\nWe shall practically develop the signal processing algorithms we discussed in the theory class. Over here rather than use live signals we shall use some already acquired and generated signals to test our algorithms, to keep the focus on developing the algorithms and testing them, rather than signal acquisition.\nWe shall develop the following algorithms:\n\n\n-Signal statistics algorithms: signal mean, signal standard deviation, signal variance\n-The Convolution algorithm\n-The Running Sum algorithm\n-The Discrete Fourier Transform (DFT) algorithm\n-The Inverse Discrete Fourier Transform (IDFT) algorithm\n\n\nWe shall also implement some of these algorithms using the CMSIS-DSP library and then compare the dynamic performance     of our algorithm to that of the ones provided by CMSIS-DSP.\n\n\n\n\nDeveloping Drivers and Data Structures for Signal Acquisition:\nTo be able to properly acquire signals from the external world and then apply our signal processing algorithms, we first need to develop analog-to-digital converter (ADC) drivers for acquiring the signals and appropriate data structures more storing and managing the signal. Over here we shall develop :\n\n\n-A bare-Metal ADC driver for acquiring the signal\n-A First-In-First-Out data structure for storing and managing the signal\n\n\nDigital Filter Design and Implementations:\nWe shall learn about the various types of digital filters available and then go on to implement them from scratch. We shall implement:\n\n\n-The Moving Average Filter\n-The Finite Impulse Response (FIR) filter\n-The Infinite Impulse Response (IIR) Filter\n\n\nWe shall also see how to design the filter kernel of the finite impulse response filters using Matlab.\n\n\nPractical DSP Application on Live Signal:\nOver here, we shall apply all that we have learnt to process live signals from our microcontroller’s ADC.\n\n\nThis course is more than just getting the code to work. It will teach you how to ….\n\n\nWrite Practical DSP Algorithms WITHOUT a fancy Engineering Degree\nYou will be able to understand the foundations of signal processing without the hassle of complex mathematical derivations.\n\n\nTaken by 3000+ Students with 200+ Reviews\nThis course is the fully updated version of the 1st edition of the course. The first edition has been taken by over 3000 students with over 290 reviews.\n\n\nHere is what what one student had to say about the course.\n\n\n\"The information covered in this course is exactly what I needed to learn for a new assignment. Both general information about DSP as well as how to implement things on the ARM Cortex M4.\"\n\n\nHere is what another student had to say:\n\n\n\"It is exciting to see how MATLAB is used in embedded systems for signal generation and filter design. The explanation here is simple and to the point. Keeps the viewer's interest captured and avoids unnecessary details.\"\n\n\nIn summary, you really have nothing to lose. Give it a try, it comes with a full money back guarantee. Hope to see you in the course.",
      "target_audience": [
        "If you are an experienced embedded developer and want to learn how to professionally develop embedded applications for ARM processors, then take this course.",
        "If you are an absolute beginner to embedded systems, then take this course."
      ],
      "url": "https://www.udemy.com/course/arm-cortex-dsp/"
    },
    {
      "title": "Arduino Zero to Hero",
      "bio": "Mastering Arduino Step by Step : Circuits, Programs, Sensor Libraries, Storing and Visualizing Data",
      "objectives": [
        "Confidently use many of the popular electronics components: breadboards, resistors, transistors, LED's potentiometers etc..",
        "Write Arduino programs with multiple inputs and outputs",
        "Read values from analog and digital sensors: sound, temperature, light, force, turning moment etc . .",
        "Create music instruments with button and light sensor inputs",
        "Use sensor libraries for acceleromenter, gyroscope and remote control applications",
        "Set up scientific experiments using circuits and code to test memory and reaction time",
        "Save data from ARduino to SD card and export results to Excell",
        "Use processing to connect mouse and keyboard inputs to Arduino",
        "Visualize sensor outputs as live display graphs on Processning software"
      ],
      "course_content": {
        "Building basic Circuits (no programming": [
          "Module Introduction (please watch!)",
          "LED Button Circuit",
          "Using a potentiometer to control an LED",
          "Using a transistor to magnify currents passing through my body",
          "Two transistor amplifier (Darlington Pair) 10,000x amplification",
          "Glow in the Dark Circuit",
          "AND Logic Gate Circuit",
          "OR Logic Gate Circuit",
          "NOT Logic Gate Circuit"
        ],
        "Basic Input / Output Circuits and Programs": [
          "Basic I/O Circuits Program Files",
          "Basic Input Output Circuits Module Introduction",
          "LED Blink ( search into unpercievable blink rates)",
          "4 LED Programmable Circuit",
          "4 LED Input Output Circuit"
        ],
        "Analog Circuits": [
          "Analog Circuits Program Files",
          "Analog Circuits Module Introduction",
          "Voltage Divider Circuit",
          "Using a Photodiode in a Voltage Divider",
          "Arduino Light Theremin",
          "LM 35 Temperature Sensor",
          "RGB Led Circuit Imitating a Maxwell Wheel",
          "RGB LED Color Mixer",
          "Microphone Clap Switch Circuit",
          "Microphone Double Clap Switch",
          "Sound Reacting Circuit (with 4 LED's)"
        ],
        "Digital Circuits": [
          "Digital Circuits Program Files",
          "Digital Circuits Module Introduction",
          "Button Control Buzzer (Arduino Tone Function)",
          "Button Controlled Frequency Generator (with speaker)",
          "Piano Circuit",
          "Piano Sound Effects Generator",
          "8 Segment Display Circuit (a.k.a 7 Segment)",
          "Guess the Number Game",
          "Generating Real Randomness in the Game",
          "Reaction Time Measuring Circuit",
          "Recording Data in Arrays",
          "Memory Game Circuit",
          "Memory Game Full Functionality"
        ],
        "Using Sensor Libraries": [
          "Using Sensor Libraries Program Files",
          "Using Sensor Libraries Module Introduction",
          "Infra Red Remote Control Circuit",
          "Infra Red + Lights and Speaker",
          "Reading Accelerometer / Gyroscope Values (Old version MPU 6050)"
        ],
        "Data Analysis and Visualisation with Arduino": [
          "Data Visualisation Program Files",
          "Data Analysis and Visualisation Module Introduction",
          "Introduction to Processing",
          "Controlling LED via Computer Mouse (using Processing)",
          "Boolean Switch on the LED Mouse Program",
          "Visualising Accelerometer Values",
          "Smoothing Graphs in Processing",
          "Saving Reaction Time Results to SD Card",
          "Creating Graphs in Excel from SD Card",
          "Accelerometer Visualization with Arduino 2.1 and BMI 160 Sensor (NEW VERSION"
        ]
      },
      "requirements": [
        "You should have access to an Arduino Prototyping kit",
        "You should have admin access to a Mac or a PC so you can install the Arduino Software"
      ],
      "description": "Arduino is an open-source microcontroller used for building electronics projects. Since it arrived on the scent, Arduino completely revolutionized DIY electronics, making it possible for artists, teenagers and hobbyists to create a vast array of projects which interact with people and the environment.\nIn this course you will learn how to create simple projects by using Arduino.\nThis course is a product of my 5 years of playing and teaching with Arduino's. The learning sequence of\nSections 1-3 introduce Arduino and build student confidence by first learning how to just build circuits and afterwards how to write programs.\nSection 4 teaches the fundamentals of analog circuits and applies those to sound sensors, temperature sensors, light mixers and musical instruments.\nSection 5 takes on digital circuits, starting with button inputs being used to create sound effects, memory games, guessing games with a 7 segment display and measure human reaction time.\nSection 6 is all about installing and using sensor libraries with Gyro Accelerometer Circuits and Remote Control Circuits.\nSection 7 Wraps up the course with some spectacular visualizations of sensor outputs using a software called Processing.\nEach section will help you learn and finally you can be a master of Arduino.",
      "target_audience": [
        "Ambitious beginners who want to master Arduino.",
        "Intermediate coders, electronics enthusiasts who wand to expand their repetoire",
        "Teachers and educators looking for a systematic step by step way to learn Arduino"
      ],
      "url": "https://www.udemy.com/course/arduino-zero-to-hero/"
    },
    {
      "title": "PYNQ FPGA Development with Python Programming & VIVADO",
      "bio": "Learn Python Development with PYNQ FPGA: covers from Image Processing to Acceleration of Face Recognition Projects.",
      "objectives": [
        "PYNQ Development Flow",
        "Implementing Face Recognition with PYNQ FPGA",
        "Image and Video Processing with PYNQ FPGA and Python Library",
        "Creating Custom Overlay for PYNQ on VIVADO",
        "Machine Learning Algorithm Implementation on PYNQ",
        "Installing Tensorflow on PYNQ and Implementing Neural Network on PYNQ",
        "Python Programming with Jupyter Interface on Internet Browser"
      ],
      "course_content": {
        "Introduction to PYNQ Architecture": [
          "PYNQ FPGA Introduction Part I",
          "PYNQ Introduction Part II",
          "Section 1 PYNQ Boards & Accessories [Demo]",
          "PYNQ-Z2 Unboxing and Demo [Optional]"
        ],
        "PYNQ Development Methodologies": [
          "PYNQ Development Methodologies Overview",
          "PYNQ FPGA Board Setup & Basic Programming Demo"
        ],
        "Section 3 PYNQ with Python_OpenCV for Image Processing & Video_processing": [
          "Section3_0_Python_Overview",
          "Section3_1: Python Programming, Conditional Statements and Loops with PYNQ GPIO",
          "Section3_2: Python OpenCV Development with PYNQ FPGA Part I: OpenCV Basics",
          "Section3_2: Python OpenCV Development with PYNQ Part II: Face & Eye Detection",
          "Python OpenCV HDMI Streaming & Processing",
          "PYNQ-License Plate Localizer on Python OpenCV"
        ],
        "Section 4: Installing Python Library in PYNQ": [
          "Installing Cryptography Python Library on PYNQ"
        ],
        "Section 5 Machine Learning with Python in PYNQ": [
          "Machine Learning with Python",
          "Character Recognition with BNN on PYNQ FPGA"
        ],
        "Section 6 Creating Custom Overlay (VIVADO Project) for PYNQ": [
          "Creating Custom Overlay on PYNQ: Addition & Multiplication Application",
          "How to Create a Custom Overlay for the PYNQ FPGA",
          "Creating PYNQ VDMA Overlay with VIVADO 2021.1 and Python-Notebook"
        ],
        "Section 7 Creating Custom Python Function Accelerator on PYNQ with VIVADO tool": [
          "Accelerating Custom Image Processing Function on PYNQ"
        ],
        "Section 8 TensorFlow Installation on Pynq FPGA": [
          "Tensorflow Installation on PYNQ FPGA Session"
        ],
        "Section 9 Machine Learning with Xilinx Deep Learning (DPU) IP on PYNQ": [
          "DPU on PYNQ Boards: Ultra96/ZCU104/ZCU111"
        ],
        "Bonus Lecture": [
          "What Next?"
        ]
      },
      "requirements": [
        "FPGA Design Basics",
        "Basic of Python Programming",
        "PYNQ FPGA Board",
        "Eager to Learn Pynq Development with Python and VIVADO"
      ],
      "description": "PYNQ (Python+Zynq), An FPGA development platform from Xilinx is an Open Source FPGA development platform. This Course covers from the Architecture of PYNQ (Zynq 7000), PYNQ Development Flow, Basic GPIO interfacing with PYNQ FPGA, Image Processing with PYNQ, using PYNQ libraries as sci_pi, OpenCV, Installing Tensorflow on PYNQ,Machine Learning with Pynq, Neural Network Implementation on PYNQ, Creating Custom PYNQ Overlay on Xilinx VIVADO .\nAfter completing this course you will also know about the Acceleration methodology on the PYNQ Development Platform. Another important section of this course is Implementation of Machine Learning Algorithms on Python for Image Processing and other projects. We will implement Artificial Neural Networks (ANN) algorithms as CNN, BNN and other Neural Networks for real time projects as Number Plate Recognition, Face Recognition etc.\nAt the another section we will have sessions on \"How to design Overlay system with VIVADO for PYNQ FPGA\". This session is based on the VIVADO HLS & IP integrator for creating custom Overlay.",
      "target_audience": [
        "Electrical Engineering",
        "Computer Science",
        "Hardware Design Enthusiast"
      ],
      "url": "https://www.udemy.com/course/pynq-fpga-development-with-python-programming/"
    },
    {
      "title": "A-Z Microbit: Officially accredited by Microsoft [2020]",
      "bio": "Absolute beginner's guide to learning coding, electronics & robotics on the Micro:bit via fun projects. Become an expert",
      "objectives": [
        "Create advanced robotics and electronics projects using learnt hardware (electronics) and software (code) skills",
        "Write Code to integrate input and output electronics (Motors, sensors etc.)",
        "Understand how to wire sensors and other electronics",
        "Understand how to write code to read values from sensors and control electronics like motors",
        "Add wireless functionality to any DIY Project"
      ],
      "course_content": {
        "Fundamentals of hardware & robotics coding": [
          "1.1 Introduction to the Microbit",
          "Watch section 5 for an optional in-depth introduction to the MicroBit",
          "Tour of Makecode: Where we will program and write code",
          "Inputs & Outputs",
          "On Start & Forever functions",
          "Variables & Calculator project",
          "Conditionals (If & Else statements)",
          "Random numbers + Conditionals project: Rock Paper Scissors generator (Project)",
          "Dice Challenge (Project)",
          "Dice Challenge Answers",
          "Introduction to Loops",
          "'While' Loops",
          "'For' Loops",
          "Deuce generator challenge (Project)",
          "Deuce Challenge Answers (Project)"
        ],
        "Projects with the Microbit's built in sensors": [
          "Differences between analog & digital inputs",
          "Built in Light sensor",
          "Light Sensor Project",
          "Accelerometer Sensor",
          "Pancake Flipping Game (Project)",
          "Compass Sensor",
          "Compass guessing game (Project)",
          "Temperature Sensor"
        ],
        "Interfacing with external sensors and outputs on the MicroBit": [
          "How to wire electronics and read Data-Sheets",
          "Attaching Buttons & LEDs",
          "Audio Output from the MicroBit",
          "Air Piano Project",
          "External Moisture Sensor",
          "DIY Pressure Sensor",
          "Pressure Sensitive instrument (project)",
          "Attaching servo motors",
          "Sunflower Robot (Project)",
          "UltraSonic Distance Sensor",
          "Blind person obstacle avoiding cap (Project)"
        ],
        "Wireless data transmission with multiple MicroBits": [
          "Radio functions introdution",
          "Lost object finder (Project)",
          "Shorten our code challenge",
          "Tressure hunt game with Beacons (Project)",
          "Arrays + implementing them in our treasure hunt game",
          "Hot Potato Game (Project)"
        ],
        "Bonus Introduction videos": [
          "Optional Lecture: How to pair Microbit with a tablet or phone to flash code",
          "Optional Lecture: How to flash code on your microbit with a laptop",
          "Optional Lecture: MakeCode vs other programming languages",
          "Optional Lecture: Alternatives to the MicroBit",
          "Optional Lecture: Hardware vs Software Programming",
          "Bonus Lecture: potential links for the materials used in the course"
        ]
      },
      "requirements": [
        "Absolutely no prior knowledge of coding or electronics is required. We will start from the start",
        "A passion for technology and learning!",
        "No hardware is required since we use an online simulator, but it is recommended if you wish to physically test your projects. More details in description"
      ],
      "description": "________\nHave you always wanted to understand the hype behind robotics, coding, electronics, tech, but were overwhelmed by the complexity and not sure where to get started?\nThis course will avoid all that confusion by taking you step-by-step through understanding everything about robotics, coding and electronics.\nEach module of this course revolves around learning key concepts via building fun projects, robots and experiments. Some of the projects we create in the course are: Sunflower robots, Wall detection cap for blind people, air piano, deuce game generator, digital hot-potato, Treasure hunt using wireless data transmission, pressure sensitive instrument, rock paper scissors generator and more!\nFurthermore, each module of the course also includes concepts breakdowns, coding walk-through, challenges and assessments, assembly videos, and demos.\nThe course is centered around the BBC Microbit Platform: The world's easiest and most friendly electronics and coding platform. In fact all the coding can be done on any device- computer, tablet, or phone.\nAll the code we write will be picture based graphical code. No confusing text based code! Graphical code is much easier to understand but the computer science principles learnt in the course are identical to what professional programmers use.\nThe course progression is as follows:\nThe course will first introduce us to what the MicroBit platform is and how to use it\nThen we will learn the fundamentals of programming and computer science (coding)\nWe will then dive in to electronics by exploring the built in sensors and output devices of the MicroBit (simple electronics)\nOnly once comfortable with coding and electronics such as sensors will we start to use external electronics and learn how to wire (code+advance electronics + robotics)\nLastly we learn how to integrate wireless communication into our projects.(code+electronics+robotics)\nEach module will build on what you learnt in the previous module and no prior knowledge will be required.\nThis course will make you a creator, an innovator, a leader in a increasingly digital world filled with robots. With a solid understanding of electronics, sensors, and computer science principles, you will be primed to progress to harder concepts like IOT, AI, Machine learning. Learnings from this course will be applicable to all fields from manufacturing, or military, automation, self-driving cars, smart cities etc.\n\n\nTools required-\nNo hardware & tools needs to be purchased. MicroBit has a free built in online simulator. However, it is recommended that you do purchase the following hardware to physically see how your code works for the projects we create.\nModule 1, Module 2, Module 3- Just a MicroBit\nModule 4- LEDs, Push Button, Servo, Distance sensor, speaker/earphones for music, moisture sensor, aligator clips + jumper cables\nModule 5- Secondary MicroBit\nA full list of recommended hardware + multiple purchase links (with international shipping) is available in the last document of the course\nCheck out my Youtube video  tutorials as well!",
      "target_audience": [
        "Students and Adults who have always wanted to code, learn electronics, or create robots but don't know where to start",
        "People interested in learning robotics and DIY through both hardware(electronics) and software (coding)",
        "People who enjoy making and DIY and want to integrate robotics and electronics in their projects and creations",
        "Learners can be any age group- kids to adults since robotics and coding isn't age limited"
      ],
      "url": "https://www.udemy.com/course/a-z-robotics-project-based-coding-electronics-on-microbit/"
    },
    {
      "title": "Learn 5 PLCs in a Day-AB, Siemens, Schneider, Omron & Delta",
      "url": "https://www.udemy.com/course/nfi-plc-online-leaning/",
      "bio": "PLC Programming of Allen Bradley, Delta, Siemens, Omron and Schneider using LIVE Examples with HMI Interfacing",
      "objectives": [
        "To Learn Ladder Logic Programming",
        "PLC Wiring Concepts & Troubleshooting",
        "To Teach Programming to Technician & Engineer"
      ],
      "course_content": {},
      "requirements": [
        "PLC Software (Included in the Course)"
      ],
      "description": "In today’s world, PLC (Programmable Logic Controller) systems are at the heart of every process and manufacturing industry. Simply knowing how to wire and connect devices isn’t enough—you must understand how to program the brain of the system to troubleshoot effectively and keep operations running smoothly.\nThis course is your all-in-one guide to learning how to Wire, Design, and Program PLCs from scratch. With hands-on tutorials, real-world simulations, and practical projects, you’ll gain the skills you need to succeed in industrial automation.\n\n\nWhy Take This Course?\nLearn to Wire, Program, and Troubleshoot PLCs\nHands-On Practice with Free Simulation Software (ITS PLC, Factory I/O, Simumatik)\nQuizzes and Projects to Test Your Skills\nHigh-Quality Video Tutorials + PLC E-books, Circuit Diagrams & Manuals\nDoubt Clearing LIVE Sessions Included\nWhether you're working on industrial applications, home automation, or factory projects, this course will give you job-ready skills to program popular PLCs like Allen Bradley, Siemens, Delta, Schneider, and more!\n\n\nWhat You’ll Learn:\nLadder Logic Programming\nFunctional Block Diagrams (FBD)\nStructured Text (ST) Programming\nReal-World PLC Circuits & Codes\n\n\nPLC Models Covered:\nDelta DVP 14SS, DVP 12SE\nAllen Bradley Micro850\nSiemens S7-200\nSchneider M221\nOmron CP1E\n\n\nWhat Makes This Course Unique?\nWe go beyond theory to provide:\nFREE PLC Simulation Software for Practice\n40+ Hours of Content\n300+ PLC Tutorials\nComplimentary LIVE Doubt Clearing Sessions\n\n\nEnroll today to take the first step toward mastering PLC programming and building your future in industrial automation!",
      "target_audience": [
        "PLC Programmers",
        "Engineers - Production & Maintenance",
        "Technicians"
      ]
    },
    {
      "title": "Introduction to Electronics",
      "url": "https://www.udemy.com/course/intro-to-electronics/",
      "bio": "A comprehensive course to help you start your adventure in electronics. Solve circuits, simulate, and experiment.",
      "objectives": [
        "Understand electric circuits, including DC and AC types.",
        "Apply Ohm’s and Watt’s Laws for circuit calculations.",
        "Prototype and troubleshoot circuits on a breadboard.",
        "Measure circuit parameters using a multimeter.",
        "Analyze circuits using Kirchhoff's, Thévenin’s, Norton’s, and other theorems.",
        "Work with capacitors, inductors, and RC/RL circuits.",
        "Analyze AC signals with oscilloscopes.",
        "Simulate and experiment with electronic circuits."
      ],
      "course_content": {},
      "requirements": [
        "No prior electronics experience is needed.",
        "Basic math skills are recommended (arithmetic, algebra).",
        "A willingness to learn by doing, as the course includes hands-on projects.",
        "Basic computer literacy for software installation and use of simulation tools.",
        "Access to basic tools such as a breadboard, jumper wires, and electronic components."
      ],
      "description": "Master the fundamentals of electronics with hands-on projects and practical knowledge for beginners.\nAre you ready to dive into the fascinating world of electronics? Whether you're a hobbyist looking to build your first circuit, a student seeking a deeper understanding of how electronics work, or a professional expanding your skillset, this course is your gateway to mastering the essentials of electronics.\nIn this beginner-friendly course, you’ll learn the fundamental concepts of electricity, circuits, and components through a series of engaging, hands-on projects. From understanding the basics of Ohm’s Law to building circuits on a breadboard, you'll gain the confidence to design, assemble, and troubleshoot your own electronic creations.\nWith easy-to-follow lessons, practical examples, and plenty of real-world applications, this course will help you unlock the secrets of the technology that powers our modern world. Start your journey into electronics today and bring your ideas to life!\nWho is this course for?\nThis introductory electronics course is designed for anyone who wants to build a solid foundation in electronics, whether you're a complete beginner or have some prior experience and wish to formalize your understanding.\nHobbyists and DIY Enthusiasts: If you're interested in creating your own electronic projects, tinkering with circuits, or working with microcontrollers like Arduino or Raspberry Pi, this course will give you the essential knowledge and skills to succeed. You'll learn how to work with resistors, capacitors, transistors, and more, as well as how to measure and troubleshoot circuits effectively.\nEngineering and Science Students: Whether you're in high school, college, or university and need a strong understanding of electronics for your coursework, this course provides a comprehensive introduction to key concepts like Ohm’s Law, Kirchhoff’s Laws, and circuit theorems. It’s ideal for those in fields like electrical engineering, computer science, or physics.\nSTEM Educators: Teachers and educators looking to enhance their classroom instruction with hands-on electronics activities will find this course a useful resource. It introduces fundamental principles and practical applications that can easily be incorporated into lesson plans and experiments.\nProfessionals Looking to Broaden Skills: If you work in a technical field (e.g., IT, telecommunications, software development) and want to deepen your understanding of hardware and electronic circuits, this course is a perfect way to extend your skill set.\nMakers and Inventors: For individuals passionate about inventing and prototyping, this course will help demystify the components and techniques behind functional electronic designs. You'll be able to apply what you learn directly to building your own innovations.\nComplete Beginners: No prior knowledge of electronics is required. This course starts with the basics—covering electricity, circuits, and key components—and progresses to more advanced topics like circuit analysis, breadboarding, and signal measurement.\nThis course is for anyone looking to gain practical, hands-on experience with electronics, whether your goal is personal projects, academic success, or professional development.\nWhat are the objectives of the course?\nThis course is designed to provide a comprehensive introduction to electronics, focusing on building practical skills and understanding key concepts. By the end of the course, you will be able to:\nUnderstand the Basics of Electric Circuits:\nGrasp foundational concepts such as electricity, electronic circuits, and signals.\nDifferentiate between Direct Current (DC) and Alternating Current (AC) circuits.\nIdentify and understand the functions of essential electronic components like resistors, capacitors, diodes, transistors, and integrated circuits.\nApply Ohm’s Law and Watt’s Law:\nCalculate voltage, current, and resistance in various types of circuits.\nUse Watt’s Law to perform power calculations in single-resistor and multi-resistor circuits.\nUnderstand and apply voltage and current divider principles.\nMaster Breadboarding and Circuit Assembly:\nLearn how to correctly use a breadboard to prototype circuits.\nUnderstand how to handle and place electronic components in circuits.\nTroubleshoot and diagnose issues in breadboarded circuits effectively.\nUse a Multimeter for Measurements and Testing:\nMeasure voltage, current, resistance, and test continuity in circuits.\nGain proficiency in using an auto-ranging multimeter.\nFollow safety procedures when using a multimeter.\nUnderstand Circuit Theorems and Analysis:\nApply Kirchhoff’s Laws (KVL and KCL) to analyze complex circuits.\nLearn and implement Thévenin’s Theorem, Norton’s Theorem, Superposition Theorem, and Maximum Power Transfer Theorem in both theory and practice.\nPerform mesh and nodal analysis for calculating voltages and currents in circuits.\nWork with Capacitors, Inductors, and RC/RL Circuits:\nUnderstand the behavior of capacitors and inductors in AC and DC circuits.\nCalculate and measure capacitance and inductance in series and parallel configurations.\nExplore the time constant in RC circuits and its practical implications in charge-discharge experiments.\nAnalyze and Measure Signals:\nGet introduced to signal analysis and measurement techniques using oscilloscopes.\nUnderstand AC signals, including sinusoidal, square, and triangular waves.\nLearn how to use signal generators and oscilloscopes for analyzing waveforms and measuring signal parameters.\nSimulate and Experiment with Circuits:\nUse circuit simulators to model and test circuits before building them.\nPerform hands-on experiments with resistors, capacitors, and inductors to observe their real-world behavior in circuits.\nTest theoretical concepts such as voltage division, filtering, and reactance using simulators and breadboards.\nWhat are the knowledge prerequisites?\nThis course is designed for complete beginners, so no prior knowledge of electronics or electrical engineering is required. It starts from the very basics and gradually builds up to more complex topics. However, a few basic skills and knowledge areas can help you get the most out of the course:\nBasic Math Skills:\nA familiarity with basic arithmetic (addition, subtraction, multiplication, and division) is essential for working through calculations involving voltage, current, resistance, and power.\nKnowledge of simple algebra is useful, particularly when applying Ohm’s Law, Kirchhoff’s Laws, and solving equations for circuit analysis.\nFamiliarity with Basic Tools and Technology:\nWhile not required, it can be helpful if you’ve previously used basic tools like a multimeter or worked with a breadboard, but the course will guide you through these tools step by step.\nIf you’ve worked with computers or software before, that’s a plus, as you’ll be introduced to circuit simulation software.\nInterest in Hands-On Learning:\nThis course involves practical experiments and working with real circuits, so students who enjoy hands-on projects and learning by doing will benefit greatly.\nIf you are comfortable with basic math and eager to learn about electronics through practical experimentation, you are ready to start this course!\nHardware & Software\nYou'll need some basic hardware components and tools for hands-on experiments to get the most out of this course. This includes a breadboard for prototyping circuits, a selection of common electronic components such as resistors, capacitors, diodes, transistors, and LEDs, and a multimeter for measuring voltage, current, and resistance. Additionally, jumper wires, a power supply or batteries, and a few integrated circuits will be used in various projects. If you want to simulate circuits before building them, access to a computer with circuit simulation software is recommended. These items are readily available and will allow you to follow along with the course's practical exercises.\nFor this course, you'll need access to circuit simulation software to experiment with and test circuits before building them physically. We recommend using CircuitLab, an intuitive online circuit simulator that allows you to design and analyze circuits directly in your browser. As a student of this course, you will receive an exclusive discount for CircuitLab. Alternatively, you can use free software options like LTSpice or Tinkercad's circuit simulator, both of which offer similar functionality. These tools will help you visualize circuit behavior and perform simulations without needing all the hardware upfront.",
      "target_audience": [
        "Beginners in electronics with little to no prior experience.",
        "Hobbyists interested in learning about circuits and components.",
        "Students looking to understand foundational electronics principles.",
        "Aspiring engineers who want hands-on experience in building and troubleshooting circuits.",
        "Individuals curious about the practical use of electronics in everyday devices."
      ]
    },
    {
      "title": "Cracking Programming Questions (Digital VLSI DV Interviews)",
      "url": "https://www.udemy.com/course/cracking-programming-questions-digital-vlsi-dv-interviews/",
      "bio": "180+ Questions to Test and Hone your Coding and Programming Skills",
      "objectives": [],
      "course_content": {},
      "requirements": [],
      "description": "In the present day scenario where Digital VLSI Designs are trending towards SOC designs with increased complexity, the Design Verification job is visibly becoming more and more software oriented. Both Design and Verification Engineers need to possess strong hardware and software skills surrounding the hardware and software interface. Additionally, with verification testbenches and simulation models becoming more and more complex, software programming knowledge has become a must-have skill for any Verification Engineer.\nA Design Verification Engineer should know at-least one programming language thoroughly (C/C++/SystemVerilog), should have strong scripting skills, working knowledge and familiarity with UNIX/Linux environments, and a good understanding of object oriented programming concepts. Due to these reasons, questions that test a candidate’s understanding of programming basics are part of almost all Verification job interviews. Ability to think and code algorithms, and model design behaviors forms a vital component of an interview.\nHardware Description Languages (HDL) are used to model behavior of digital logic circuits independently of any underlying implementation technology. VHDL and Verilog were the two popular HDLs used for digital logic design, and in the recent years SystemVerilog (which is a super set of Verilog) has become more widely adopted as it supports object oriented programming concepts and several other features which are very useful for implementing testbenches that are used to verify designs.\n\nThis course (practice tests) is therefore organized into six time bound test papers covering some of the most commonly asked interview questions (180+ questions) with their answers. Targeted topics include Basic Programming concepts, Object Oriented Programming concepts, UNIX, Linux, C, C++, PERL, Verilog, and SystemVerilog(Basics).\n\n\nDisclaimer\n\n\nEvery effort has been made to make these practice tests as complete and as accurate as possible, but no warranty is implied. The authors shall have neither the liability nor the responsibility to any person or entity with respect to any loss or damages arising from the information contained in these practice tests or other resources accompanying these tests. These practice tests are independent work of the authors and are not endorsed by their employers.",
      "target_audience": [
        "Students of Electronics (EEE, ECE, E&I), VLSI, Digital/Embedded System Design, and Microelectronics, who want to get ready for a Job in the Semiconductor Industry.",
        "Digital VLSI Design Verification Professionals.",
        "Engineers looking to build a career in VLSI Front-End Design Verification."
      ]
    },
    {
      "title": "Mobile Phone LCD Screen Repair (Beginner to Intermediate)",
      "url": "https://www.udemy.com/course/screen-repair-mastery-become-an-expert-in-phone-lcd-repair/",
      "bio": "Become a Skilled Technician: Learn to Repair Phone Screens with Confidence",
      "objectives": [
        "The basics of phone screen and LCD repair",
        "Chinese Techniques for replacing phone screens and LCDs, including micro soldering",
        "How to change glass screen like a pro one?",
        "How to diagnose problems and troubleshoot issues with phone screen on board (Backlight Circuit)",
        "Skills and knowledge to start a new career or expand their skillset as a repair professional.",
        "Proper handling and use of specialized tools and equipment."
      ],
      "course_content": {
        "Beginner in phone screen LCD Repairing": [
          "START HERE - Learn in your language (10 Subtitles)",
          "What's LCD Phone Screen Repair ?",
          "How to dissemble phones as beginner ?",
          "Hands-On Guide: Step-by-Step Cell Phone Disassembly with a Real Device"
        ],
        "Handwork ( On Real Devices)": [
          "Intro to Handwork section",
          "How to Change Screen Protractor to any phone without break it ?",
          "Ultimate LCD Change (As Real Apple & Samsung Technician)",
          "Glass Screen Change for Beginners",
          "[Mental Lesson] How to deal with Fear in this job ?"
        ],
        "[Secrets Revealing] Materials & Substance to be use in LCD Mobile Screen Repair": [
          "Introduction to Substance Section",
          "Is all Adhesive glue in market are the same ?",
          "Magic substance to take the LCD out of frame in SECONDS !",
          "Best way to polish Mobile Screen and make it glowing",
          "[CRAZY Invention] Cheap substance can clean LCD Flat connector !!!"
        ],
        "How to make money from Mobile Phone Screen Repair?": [
          "How to Make Money from Mobile Phone LCD Screen Repair a.k.a. Glass Cash Business"
        ],
        "Tools Essential for Screen Cell Phone Repairs LCD": [
          "What Are the Essential Tools You Can't Start Screen Cell Phone Repair Without?"
        ],
        "How to find work in United states of America (Regarding Phone Repair Technician)": [
          "Intro to United States Jobs Section",
          "USA Hardware Technician Job (Part 1)",
          "USA Hardware Technician Job (Part 2)",
          "USA Hardware Technician Job (Part 3)",
          "[Mental Lesson] How to deal with Bad Mood ?",
          "Last Episode in United States Section"
        ]
      },
      "requirements": [
        "A willingness to learn and a desire to expand your knowledge in the field of phone screen and LCD repair."
      ],
      "description": "Do you want to change your career and become a skilled phone repair technician? Look no further, as this comprehensive course on phone screen LCD repair is perfect for you.\n\n\nIn this course, you'll learn how to repair and replace phone screens , including Glass of LCD, with confidence and ease. Our experienced instructors will guide you through each step of the process, providing hands-on tutorials and exercises to help you master the skills.\nYou'll learn how to diagnose problems, troubleshoot issues, and repair phone screens efficiently and effectively.\nYou'll also learn how to properly handle delicate components, use specialized tools and equipment, and perform microsoldering with precision. By the end of the course, you'll be able to repair any phone screen.\nWhether you're a beginner looking to start a new career or an experienced repair professional looking to expand your skillset, this course is for you. With our comprehensive curriculum and hands-on approach, you'll be able to repair phone screens like a pro in no time!\nNo more paying exorbitant fees for repairs, as you'll be equipped with the knowledge to fix it yourself. Not only will you save money, but you'll also be able to offer your services to others, opening up new career opportunities.\nWith lifetime access to the course materials, you'll have the opportunity to refer back to the lessons at any time, keeping your skills sharp.\nOur course is designed to help you stop destroying LCDs while changing them. Improve your skills and transform your career with this comprehensive course on phone screen LCD repair. Enroll today and join the thousands of students who have improved their skills and changed their careers with our course.\"\nDon't wait any longer to start your new career. Enroll in this comprehensive course on phone screen LCD repair today and start fixing it yourself with confidence and ease!",
      "target_audience": [
        "Beginners who are interested in starting a new career in the field of phone screen and LCD repair.",
        "Those who have a basic understanding of electronics and want to expand their skillset to include phone screen repair.",
        "Mobile phone owners who want to save money by repairing their phone screens themselves instead of paying for costly repairs.",
        "Professional repair technicians who want to improve their skills and stay up-to-date with the latest techniques.",
        "Anyone who is interested in learning about the inner workings of phone screens and LCDs, and how to repair them."
      ]
    },
    {
      "title": "Embedded System Design using UML State Machines",
      "url": "https://www.udemy.com/course/embedded-system-design-using-uml-state-machines/",
      "bio": "Learn to implement event-driven embedded applications using simple and hierarchical UML state machine approach",
      "objectives": [
        "Event driven programming paradigm",
        "Flat and hierarchical state machines (Simple FSMs and H-FSMs)",
        "UML state machine semantics and state chart drawing",
        "Converting UML statecharts into executable C/C++ code",
        "Action objects design approach",
        "Different state machine implementation strategies",
        "Nested switch implementation of state machines",
        "State table approach to implementing the state machines",
        "State-Handler approach to implementing the state machines",
        "Usage of function pointers in 'C'",
        "Hands-on projects using simple FSM and HSMs",
        "Step by step code development",
        "Graphically modeling event-driven embedded application using UML statecharts modeler tools",
        "Working with QP™ embedded real-time framework and QM™ tool of Quantum Leaps, LLC to draw and implement the HSMs"
      ],
      "course_content": {
        "Introduction": [
          "About the instructor",
          "Important Note",
          "Course Repository and Slides",
          "Introduction to Finite State Machine",
          "Mealy and Moore machine",
          "Mealy and Moore State Transition Table",
          "Exercise-0001 LED control Mealy machine example",
          "Exercise-001 LED control Mealy machine implementation part 1",
          "Exercise-001 LED control Mealy machine implementation part 2",
          "Exercise-002 LED control Moore machine implementation"
        ],
        "UML Flat state machine and Implementation": [
          "Exercise-003 Productivity Timer demo",
          "Astah UML download",
          "UML Simple and Composite states",
          "UML state machine internal state activities(entry/exit/do)",
          "UML state machine types of Transitions",
          "Events and Signals",
          "Exercise-003 States and Initial Psuedostates",
          "Exercise-003 Defining states Entry and Exit actions",
          "Exercise-003 Drawing state transitions",
          "Exercise-003 Implementing TIME_SET state",
          "Exercise-003 Implementing PAUSE state",
          "Exercise-003 Implementing STAT state",
          "Installing Microsoft VS Code and PlatformIO extension"
        ],
        "Flat state machine exercise implementation": [
          "Exercise-003 Create new project",
          "Exercise-003 Data structure explanation",
          "Exercise-003 Defining initial transition function",
          "Different approach to implement state machine"
        ],
        "Nested switch technique to implement State Machine": [
          "Exercise-003 Nested switch implementation of an FSM part 1",
          "Exercise-003 Nested switch implementation of an FSM part 2",
          "Exercise-003 Hardware connections",
          "Exercise-003 Implementing event producer code",
          "Exercise-003 Dispatching time tick event",
          "Button bouncing explanation",
          "Exercise-003 Button software de-bouncing implementation",
          "Adding arduino Library to project in platformIO",
          "Exercise-003 Implementing LCD functions Part 1",
          "Exercise-003 Implementing LCD functions Part 2",
          "Exercise-003 Helper function implementation",
          "Exercise-003 Implementing initial transition actions",
          "Exercise-003 Testing on hardware"
        ],
        "Function pointers in 'C'": [
          "Function pointers in C",
          "Passing function pointers as function arguments"
        ],
        "State handler technique to implement State Machine": [
          "Exercise-004 Implementation using state handler approach"
        ],
        "State table technique to implement State Machine": [
          "Exercise-004 State table approach for implementation of an FSM part-1",
          "Exercise-004 State table approach for implementation of an FSM part-2",
          "2D arrays in C",
          "Exercise-004 State table approach for implementation of an FSM part-3",
          "Exercise-004 State table approach for implementation of an FSM part-4"
        ],
        "UML Hierarchical State Machines and QP™ framework": [
          "Hierarchical State Machines(HSMs)",
          "Run-to-completion and QP™ framework",
          "Download QP™ Nano Arduino library",
          "HSM transition execution sequence testing"
        ],
        "UML HSM transition execution sequences": [
          "Exercise-006 Test HSM transition execution sequence on Arduino",
          "Adding files in QM tool",
          "Adding codes to files using QM tool",
          "Adding a class attribute",
          "Adding class operation",
          "Adding assertion failure callback",
          "QHSM_INIT() and QHSM_DISPATCH() APIs",
          "Exercise-006 Testing",
          "Exercise-006 Testing History state"
        ],
        "UML HSM exercise using QM tool": [
          "Exercise-007 Clock Alarm Introduction",
          "Exercise-007 Clock Alarm demo",
          "Exercise-007 States, Signals and Data structure used",
          "Exercise-007 Drawing an HSM",
          "Exercise-007 Adding main application object and constructor",
          "Atmega328p Timer peripheral explanation",
          "Atmega328p Timer registers and setup code",
          "Exercise-007 Adding class operations",
          "Exercise-007 Defining initial transition actions",
          "Exercise-007 Coding for the TICKING state",
          "Exercise-007 Adding free operations",
          "Exercise-007 Reading curr_time through class operation",
          "Exercise-007 Handling TICK event in TICKING state and testing",
          "Exercise-007 Drawing CLOCK_SETTING state",
          "Exercise-007 Implementing CLOCK_SETTING state part-1",
          "Exercise-007 Implementing CLOCK_SETTING state part-2",
          "Exercise-007 Implementing CLOCK_SETTING state part-3",
          "Exercise-007 Implementing CLOCK_SETTING state part-4",
          "Feedback",
          "Exercise-007 Updating real time",
          "Exercise-007 ALARM_SETTING state",
          "Exercise-007 Implementing ALARM_SETTING state",
          "Exercise-007 Implementing ALARM_NOTIFY state"
        ]
      },
      "requirements": [
        "Basics of 'C' or 'C++' programming"
      ],
      "description": "Learn the fundamentals of simple and hierarchical UML state machines in easy steps\nThe course emphasizes project-based learning, learning by doing.\nThe goal of this course is to introduce an event-driven programming paradigm using simple and hierarchical state machines.\nAfter going through this course, you will be trained to apply the state machine approach to solve your complex embedded systems projects.\nSome of the highlights of this course are as below\nyou will learn,\n1) UML(Unified Modeling Language) state machine semantics like simple/composite states, events, signals, transitions, entry/exit actions, guards, pseudo-states, etc\n2) Drawing UML state machines using graphical modeling tools such as Astah and QM™ modeling tool\n3) Implementing embedded applications using Hierarchical state machines and Active objects design approach\n4) Using QP™ real-time embedded framework and QP™-Nano Arduino library in your embedded projects\n5) Active objects\n6) Hands-on event-driven project implementation and testing on Arduino UNO board (Please check the preview videos)\n\n\nHardware:\nIf you want to test the code developed on the target hardware, you need the below-mentioned boards and components\n1. Arduino UNO(1)\n2. 16x2 character LCD (1)\n3. Pushbuttons (3)\n4. 10KΩ resistors (3)\n5 . 220Ω resistor (3)\n6. 100KΩ Potentiometer (1)\n7. Arduino buzzer (1)\n8. Jumper wires-M2M\n\n\nSoftware:\nInstallation procedure for important software are covered in this course\n1. Arduino IDE (Free and Open source )\n2. Microsoft visual code (Free)\n3. PlatformIO VS code extension(Free and Open source )\n4. QM™ modeling tool by Quantum Leaps, LLC (Free GPL version)\n5. Astah by Change Vision, Inc.(Trial version)\n\n\nLearning order of FastBit Embedded Brain Academy Courses,\nIf you are a beginner in the field of embedded systems, then you can take our courses in the below-mentioned order.\nThis is just a recommendation from the instructor for beginners.\n1) Microcontroller Embedded C Programming: absolute beginners(Embedded C)\n2) Embedded Systems Programming on ARM Cortex-M3/M4 Processor(ARM Cortex M4 Processor specific)\n3) Mastering Microcontroller with Embedded Driver Development(MCU1)\n4) Mastering Microcontroller: TIMERS, PWM, CAN, RTC,LOW POWER(MCU2)\n5) Mastering Microcontroller: STM32-LTDC, LCD-TFT, LVGL(MCU3)\n6) Embedded System Design using UML State Machines(State machine)\n7) Mastering RTOS: Hands-on FreeRTOS and STM32Fx with Debugging(RTOS)\n8) ARM Cortex M Microcontroller DMA Programming Demystified(DMA)\n9) STM32Fx Microcontroller Custom Bootloader Development(Bootloader)\n10) Embedded Linux Step by Step using Beaglebone Black(Linux)\n11) Linux device driver programming using Beaglebone Black(LDD1)\n\n\nOther programming courses\n1) Master The Rust Programming Language : Beginner To Advanced",
      "target_audience": [
        "Anyone who wants to learn and explore embedded system programming",
        "Students and working professionals"
      ]
    },
    {
      "title": "Get Certified with Electronics and Electricity Practice Test",
      "url": "https://www.udemy.com/course/electronics-electricity-and-magnetism-practise-test/",
      "bio": "This Course will help you test skills in Electronics, Electricity and Magnetism and what you need to improve yourself",
      "objectives": [],
      "course_content": {},
      "requirements": [],
      "description": "100 Different Questions Carefully crafted to Test your skills in Electronics, Electricity, and Magnetism\nThe new electronics and electricity certification exam is designed to measure the skills of those who are confident in their knowledge of electronics theory, safety practices, codes of ethics, and more. The exam tests the following categories of knowledge: Basic Electronics Theory, Safety Practices, Codes of Ethics, Basic Electricity Theory.\nWhy would you want to get your certification in Electronics and Electricity?\nThis question can be answered by the overwhelming need for qualified electricians and technicians. As the need for qualified individuals increases, so does the demand to get certified. Electronics and electricity certification can give you a leg up on this competitive field by preparing you with the skills necessary to have a successful career.\nWhy you should take this course?\nWith our Get Certified with Electronics and Electricity Practice Test course, you will have the opportunity to test skills in Electronics, Electricity, and Magnetism.\nThe course is designed to be comprehensive, which means it covers everything from basic principles to more complex topics.\nOur courses are for both students who are studying for their certifications as well as individuals looking for new skills.\nNew material is added regularly.\nContinual Updates\nMore than 7000 STUDENTS!!! THANK YOU!!!\nWhat students are saying:\nAlan Fabregas says, \"This course was excellent! Thank you for helping us be prepared for real exams!\"\nEdward Francisco says, \"This part of the course is on magnetics. It is a real challenge. Great information in test form.\"\nJoan Davis says, \"Questions were pertinent to my knowledge level. Test results show my weak areas.\"\nWelcome to this course.\nIn this course, I fully prepare you for what it is like to take Electronics, Electricity, and Magnetism Certification Exam or any other Electrical Engineering-related test. With 2 practice exams, each of which is timed at 50 minutes with 50 different questions, I have carefully hand-crafted each question to put you to the test.\nThis is the only Electronics, Electricity, and Magnetism Practice Exam course on Udemy that has timed test-taking ability and provides interactive, section-level feedback with 100 Questions.\nWe are one of the best-selling Engineering instructor teams on the Udemy platform and we invite you to visit our instructor profile to learn more about us, the certifications that our team members hold, and read the reviews of our courses. We also encourage you to verify our certifications. There are many instructors trying to sell certification courses, and they themselves are not certified.\nThis course will help you know where you are in Electronics, Electricity, and Magnetism and what you need to improve your skills.\nYou can retake the tests in this course and also interact with me if you need further clarification. In addition to getting interactive feedback with each question, you'll receive explanations on why certain answers are correct, while others are incorrect.\nI update this course to stay current with the latest release of Electronics, Electricity, and Magnetism related topics, and also provide a 30-day money-back guarantee, no questions asked.\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading team in the Microcontroller Industry, with over 13 Years of Experience in teaching and doing practical projects.\nWe strive to put all our hands-on experience into these courses. Instead of superficial knowledge, we go into the depth of the topic and give you the exact step-by-step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the years, we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ courses on Udemy.\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million Views, 20k + Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their careers.\nAshraf’s core skill is explaining difficult concepts in a step-by-step easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, in particular for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World\nWhat you will learn\nHow to assess your skills in Electronics, Electricity, and Magnetism.\nUnderstanding the format of certification exams.\nPractical knowledge of electronics and electricity.\nFamiliarity with commonly asked questions in exams.\nInsight into areas needing improvement.\nWho is this course for\nElectronics and electrical engineering students.\nProfessionals looking to certify their skills.\nBeginners wanting to learn about electronics and electricity.\nAnyone interested in evaluating their knowledge of electronics and electricity.\nRequirements\nBasic understanding of electronics and electricity.\nA computer with internet access.\nEnthusiasm to learn and improve skills.",
      "target_audience": [
        "Electronics Geeks",
        "Electricity Geeks",
        "Electromagnetic Geeks"
      ]
    },
    {
      "title": "Embedded Bootloader Development from Ground Up™",
      "url": "https://www.udemy.com/course/embedded-bootloader-development-from-ground-uptm/",
      "bio": "Essentials of Custom Bootloader Development",
      "objectives": [
        "Develop a deep understanding of the fundamentals of bootloader development, including the embedded build process and memory layout.",
        "Gain hands-on experience working with linker scripts, creating custom sections, defining memory regions, and storing functions in custom sections.",
        "Develop a multi-slot bootloader system that allows you to store multiple application firmware in memory.",
        "Build complex firmware solutions."
      ],
      "course_content": {
        "Introduction": [
          "Downloading CubeIDE",
          "Installing CubeIDE",
          "Getting the required documentation",
          "Getting the required package for bare-metal development",
          "Testing the project setup"
        ],
        "The Right Boot": [
          "The Need for a Bootloader"
        ],
        "Developing Some Generic Drivers": [
          "Important information about this section",
          "Programming : Enabling the Floating Point Unit (FPU)",
          "Programming : Developing a UART Driver - Analyzing the Documentation",
          "Programming : Developing a UART Driver - Listing out the steps",
          "Programming : Developing a UART Driver - Implementing the Init. function",
          "Programming : Developing a UART Driver - Implementing the Write function",
          "Programming : Developing a UART Driver - Testing the Driver",
          "Programming : Developing the System Timebase - Analyzing the Documentation",
          "Programming : Developing the System Timebase - Implementing the Init. function",
          "Programming : Developing the System Timebase - The rest of the functions",
          "Programming : Developing the System Timebase - Testing the Timebase",
          "Programming : BSP : Listing the out the Required Functions",
          "Programming : Writing the LED Driver",
          "Programming : Writing the PushButton Driver",
          "Programming : Testing the Board Support Package"
        ],
        "The Embedded Build Process and Memory Model": [
          "Overview of the Embedded Build Process",
          "A closer look at the Embedded Build Process",
          "Overview of the STM32F4 Memory Model",
          "Understanding the Linkerscript and Linking Process",
          "Analyzing the Linkerscript and Memory Layout"
        ],
        "Working with the Linkerscript": [
          "Source Code Download",
          "Programming : Creating SECTIONS in the Linkerscript",
          "Programming : Defining custom MEMORY regions",
          "Programming : Storing functions in Custom Sections"
        ],
        "Bare-Metal Bootloader Development": [
          "Programming : Implementing the Jump-to-Application function",
          "Programming : Implementing the Default Application(Pt.1)",
          "Programming : Implementing the Default Application(Pt.2)",
          "Programming : Sharing functions between the Bootloader and User Application(Pt1)",
          "Programming : Sharing functions between the Bootloader and User Application(Pt2)"
        ],
        "Final Project- Multi-Slot Bootloader System": [
          "Programming : Receiving UART Commands",
          "Programming : Designing the System",
          "Programming : Implementing the Multi-Slot Bootloader System(Pt.1)",
          "Programming : Implementing the Multi-Slot Bootloader System(Pt.2)",
          "Programming : Implementing the Multi-Slot Bootloader System(Pt.3)"
        ],
        "Closing": [
          "Closing Remarks"
        ]
      },
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know.",
        "NUCLEO-F411"
      ],
      "description": "Get ready to dive into the exciting world of bootloader development with this beginner level course of our bootloader development series on STM32 microcontrollers.\nThroughout this beginner-friendly course, you will explore the fundamentals of bootloader development, from the build process to the memory model and beyond.\n\n\nThrough a number of bite-sized modules, you will learn how to create custom bootloaders that enable you to take control of your firmware and unlock the full potential of your STM32 microcontrollers. You will gain understanding of the embedded build process, the STM32F4 memory model, and the critical role of linkerscripts and the linking process.\nIn addition to theory, you will get hands-on experience working with the linkerscript; creating custom sections, and defining memory regions etc.\nBut that's not all - you'll also have the opportunity to get further hands-on experience with  linkerscripts and design and develop your own bootloader. And in the final project, you'll apply your newfound knowledge to create a multi-slot memory system  bootloader which is capable of storing multiple firmware applications on the same microcontroller, implement a push-button trigger for entering bootloader mode, and develop a simple communication driver for selecting different firmware  applications stored in memory.\n\n\nBy the end of this course, you'll have the skills and knowledge needed to confidently develop custom bootloaders for STM32 microcontrollers, opening up new possibilities for firmware updates, recovery, security, and customization.\n\n\nWith the flexible online format, you can study at your own pace, from anywhere in the world. Plus, we offer a 30-day money-back guarantee, so you can enroll with confidence.\n\n\nHere's a sneak peek at what you can expect to learn:\nThe Right Boot\nWhat is a boot loader?\nWhy is it needed?\n\n\nThe Embedded Build Process and Memory Model\nOverview of the Embedded Build Process\nA closer look at the Embedded Build Process\nOverview of the STM32F4 Memory Model\nUnderstanding the Linkerscript and Linking Process\nAnalyzing the Linkerscript and Memory Layout\n\n\nWorking with the Linkerscript\nCreating SECTIONS in the Linkerscript\nDefining custom MEMORY Regions\nStoring functions in Custom Sections\n\n\nBare-Metal Bootloader Development\n\n\nImplementing the Jump-to-Application function\nImplementing the Default Application\nSharing functions between the Bootloader and User Application\n\n\nMulti-Slot Bootloader System\nReceiving UART Commands\nDesigning the System\nImplementing the Multi-Slot Bootloader System",
      "target_audience": [
        "Embedded systems engineers and developers who want to expand their knowledge of bootloader development and develop custom firmware for STM32 microcontrollers."
      ]
    },
    {
      "title": "Ultimate Guide to Raspberry Pi : Tips, Tricks and Hacks",
      "url": "https://www.udemy.com/course/pi-ultimate-guide/",
      "bio": "Master the Raspberry Pi 4, Work with Python, GPIO pins and sensors, the Pi Camera Module, build an Amazon Echo Clone!",
      "objectives": [
        "Understand what the Raspberry Pi is and how to set it up",
        "Understand the process of installing any OS for the Raspberry Pi",
        "Understand how to connect remotely to your Raspberry Pi and run it in headless mode",
        "Learn the ins and outs of working with the Terminal and Linux commands",
        "Learn how to install software using the APT Package system",
        "Learn how to setup a Web Server",
        "Learn how to work with GPIO pins and read external inputs and sensors (buttons and PIR sensors)",
        "Learn how to work with USB Cameras",
        "Learn how to use the Raspberry Pi Camera Module and interact with it programmatically",
        "Learn how to make an Amazon Echo Clone"
      ],
      "course_content": {},
      "requirements": [
        "No previous programming or electronics knowledge required. Just a passion for mastering the Raspberry Pi"
      ],
      "description": "Last Updated : November 2022\nAdded content to cover the Raspberry Pi Imager which is a new software tool that can be used to flash your SD cards\nAdded details about Raspberry Pi OS, which is the replacement for the Raspbian OS\nUpdate : November 2019\nIncludes the Raspberry Pi 4! Covers both the Raspberry Pi 4 and Raspberry Pi 3.\nStep by Step instructions on how to setup your Raspberry Pi in Headless Mode - No extra monitor, keyboard, mouse or HDMI cable needed!\nThis course will provide the information you need to Master the Raspberry Pi 3 and Raspberry Pi 4! It assumes no prior programming or electronics knowledge and walks you through everything you need to know to use the platform to the fullest! Here are some of the topics that are covered:\nWe will first dive into what the Raspberry Pi is and learn what components you need to set everything up\nStep by step videos on how to set it up\nWe will walk through how to easily flash an SD card with any OS for the Pi\nWe will talk  about tips to prevent SD card corruption\nWe will show configuration tips for the Raspberry Pi Operating System\nMultiple methods of connecting remotely to your Raspberry Pi will be covered to show how you can run it in \"headless mode\" without a monitor\nWe dive into the Terminal and Linux commands to show how you can navigate your system, work with files, perform network and system commands and keyboard shortcuts\nWe dive in depth into the APT Package system for installing software and show how to install any software for your Pi\nBest practices for securing your Raspberry Pi are covered\nWe install a Web Server using different approaches\nWe work with GPIO pins and show how you can control LEDs, determine if a button is pressed, work with a PIR sensor and will make a PIR sensor alarm circuit\nWe will do Python code reviews for the projects so you will understand how the software and hardware work together\nWe work with cameras and images and show how you can setup a USB web cam and install software to create a live streaming camera feed\nWe use the Raspberry Pi Camera module and show how you can interact with it programmatically to take photos, video and create special effects\nWe create a working Amazon Echo Clone with the Alexa Voice Service\nMuch much more!\nNo previous programming or electronics knowledge is required.\n\nYou get the best information that I have compiled over years of trial and error and experience!\nLearn the Raspberry Pi 3  and Pi 4 fast! Install software, build circuits, make projects! Get started now!",
      "target_audience": [
        "Anyone who wants to master the Raspberry and learn tips, tricks and hacks to make you more productive"
      ]
    },
    {
      "title": "PLC Programming in Siemens TIA Portal",
      "url": "https://www.udemy.com/course/plc-programming-in-siemens-tia/",
      "bio": "A beginners level course in PLC and HMI programming",
      "objectives": [
        "How a PLC works",
        "Programming PLCs in Ladder Logic",
        "Program real world example projects",
        "Introduction to HMI programming"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to PLC"
        ],
        "Software requirement": [
          "Getting Started"
        ],
        "Programming fundamentals": [
          "Memory areas"
        ],
        "Software environment": [
          "Creating a new project",
          "The software environment - Part 1",
          "The software environment - Part 2"
        ],
        "Ladder logic": [
          "Networks and ladder logic basics",
          "Coils"
        ],
        "Project 1 - Motor starter": [
          "Motor starter"
        ],
        "Programming essential elements": [
          "Positive - Negative edge",
          "Flip flops",
          "PLCSim",
          "Timers",
          "Counters",
          "Comparators",
          "Math operations",
          "Move operation",
          "Conversion operations",
          "Program control - Part 1",
          "Program control - Part 2",
          "Word logic operations",
          "Shift and rotate operations"
        ],
        "Data blocks and function blocks": [
          "Data blocks",
          "Function blocks - Part 1",
          "Function blocks - Part 2"
        ],
        "Project 2 - Traffic light": [
          "Defining tags",
          "Main logic",
          "Testing the logic"
        ],
        "Project 3 - Elevator": [
          "Project description",
          "Program structure",
          "Defining tags",
          "Main logic",
          "Debugging the logic"
        ]
      },
      "requirements": [
        "There are no prerequisites for this course and it is targeting beginner and intermediate level students"
      ],
      "description": "In this course I will teach you all the basics you need to know about PLC programming. although the software used in this course is from Siemens but the general concept of programming in ladder logic applies to all PLCs from different manufacturers.\nI will start with explaining everything you need to know as a beginner and once we cover the basics we will start applying them to real projects.",
      "target_audience": [
        "Anyone interested in learning PLC programming",
        "Engineers, electricians and technicians working in the automation industry or on industrial machines"
      ]
    },
    {
      "title": "Beyond Arduino, Part 4: C for Embedded Applications",
      "url": "https://www.udemy.com/course/beyond-arduino-c-for-embedded-applications/",
      "bio": "Learn how to write better code for your embedded hardware or IoT projects like professionals, not beginners, do.",
      "objectives": [
        "Create professional grade embedded applications.",
        "Produce embedded applications employing THE most widely used programming language ever.",
        "Benefit from a wide variety of C compiler and preprocessor tricks to help you make better embedded applications."
      ],
      "course_content": {
        "Introduction": [
          "Course Structure",
          "Instructor Introduction",
          "Motivation #1",
          "Motivation #2",
          "What's with the C/C++ thing?"
        ],
        "The C Programming Language Review": [
          "Introduction",
          "Characteristics of C",
          "C is a Compiled Programming Language",
          "C vs. Java",
          "Syntax",
          "Hello World",
          "Variables and Arithmetic",
          "If-Then-Else Statements",
          "Case Statements",
          "Loops",
          "Supported Data Types",
          "Different Sizes of int - Arduino",
          "Different Sizes of int - Keil",
          "Different Sizes of int - CodeWarrior",
          "Chars aren't characters",
          "No Strings in C",
          "Character Arrays",
          "No Booleans Either",
          "Arrays",
          "Pointers",
          "Pointers Example Code",
          "Pointers can be Indexed and Arrays Indirected",
          "Fun with Pointers",
          "Functions",
          "Functions Example Code",
          "Passing Parameters by Value or Reference",
          "Example of Pointers and Parameters"
        ],
        "A Few Preprocessor Tricks": [
          "The C Preprocessor",
          "Defining Constants",
          "#define vs const",
          "Which is Better?",
          "Conditional Inclusion of Code",
          "Conditional Inclusion of Code Example",
          "Embedded Debugging with a Knife in the Woods",
          "The #else Directive",
          "Wikipedia Example",
          "Live Demo: Conditional Inclusion of Code",
          "Include Guards",
          "Key Ideas"
        ],
        "A Few Compiler Tricks": [
          "The C Compiler",
          "Use Portable Data Types",
          "First, a Thought Experiment",
          "The Answers",
          "Reason #1: Multiprocessors",
          "Reason #2: Multithreading",
          "Reason #3: Hardware-Attached Variables",
          "Reason #4: Interrupts",
          "The volatile Qualifier",
          "volatile Demo in Codewarrior",
          "Time Consuming Blocking Delays",
          "Example: Blocking Delays",
          "LPC1114 Tutorial",
          "The KEIL Project",
          "The delay() Function",
          "The Rest of the Code",
          "The main() Function",
          "The walk() Function",
          "Remember the const Qualifier"
        ],
        "Bitwise Manipulation": [
          "Bit Manipulation",
          "Bit Masking",
          "The trick: Binary Masks",
          "How to Set a Bit",
          "How to Clear a Bit",
          "Setting and Clearing Multiple Bits",
          "A Real Microcontroller Example",
          "Setting and clearing select bits",
          "Reacting to Select Bits",
          "Reacting to Select bits",
          "Inverting Select Bits",
          "Inverting Select Bits",
          "A Meaningful Code Example",
          "Implementation Tips",
          "More Clever ways to access bits",
          "A Code Example",
          "Bit Masking Demo in Arduino",
          "Set and Clear bits here and there",
          "Toggle a bit",
          "Bit Fields",
          "Bit Fields Demo in Dev C++",
          "Bit Fields Demo in CodeWarrior",
          "Bit Fields in Libraries",
          "Key Ideas"
        ],
        "Alternatives to Traditional Functions": [
          "Alternatives to Functions",
          "Lookup Tables",
          "Lookup Table Definition",
          "Lookup Tables Example Code",
          "Lookup Tables Caveats",
          "Lookup Tables Demo in Arduino",
          "Lookup Tables in ROM or RAM",
          "Tradeoff between Lookup Tables and Traditional Functions",
          "Macro Functions",
          "Points for the Macro Function",
          "Points for the Traditional Function",
          "Macro Functions",
          "Function Inlining",
          "Inline Functions",
          "Forcing vs. Suggesting",
          "Macros vs Inline Functions",
          "Key Ideas"
        ],
        "What to do when there's no Floating Point Unit": [
          "What to do Without a Floating Point Unit",
          "About Floating Point Numbers",
          "Floating Point Number Formats",
          "Binary 32 Floating Point Format - IEEE 754",
          "Floats are Not Perfect",
          "Some Numbers are Impossible to Represent as floats",
          "Floating Point Types in C",
          "About FPUs",
          "How FPU-less microcontrollers manage without an FPU",
          "Software Implementations of Floats",
          "Float Inaccuracies",
          "Inaccuracies Demo in Dev C++",
          "Fixed Point Numbers",
          "Powers of 2 Scaling Factors",
          "Fixed Point Math",
          "Standardized Fixed Point Formats",
          "Fixed Point is a Real Option",
          "A Fixed Point Library",
          "Fixed vs. Floating Point Demo in Arduino",
          "A Very Clever Fixed Point Trick",
          "Just Integers",
          "Wait! Having an FPU isn't a Silver Bullet",
          "Key Ideas"
        ],
        "Wrap Up": [
          "Think of All the Things we Learned",
          "What's Next?",
          "Farewell",
          "Bonus Lecture: LabsLand and more from Closure Labs!"
        ]
      },
      "requirements": [
        "You should know Basic Microcontroller Programming. This course assumes you know how to program, so general good programming practices are assumed and not enforced in this course (meaningful variable names, commenting your code, indentation, etc.)",
        "You should at least be familiar with the C Programming Language (Good news, just so you know: The Arduino uses C)."
      ],
      "description": "In this fourth part of the Beyond Arduino series, you'll learn many techniques to produce more efficient and professional embedded applications. It's time to leave the toy programs behind.\nYou'll learn how to handle memory-attached hardware registers properly, how to perform bitwise manipulation of data, how to handle interrupts on your microcontroller development platform, and many other techniques which you aren't always aware of because of the immense body of elements that conceal the details in many beginner platforms, like the Arduino, for the sake of simplicity.\nYou'll also learn how to deal with very basic, typically 8-bit, microcontrollers that don't have a Floating Point Unit and still write code that gets the job done in the best way possible even with the limited resources available.\nAfter grasping this knowledge, we expect you to think differently when designing your embedded applications in the future. By adding these best practices to your bag of tricks, you'll get one step closer to making embedded applications like a professional, and hopefully you'll feel less like a beginner.",
      "target_audience": [
        "Arduino Developers.",
        "Software Developers.",
        "Makers."
      ]
    },
    {
      "title": "How to give your laptop a second life - SSD, HDD, RAM, Fans",
      "url": "https://www.udemy.com/course/how-to-give-your-laptop-a-second-life-ssd-hdd-ram-fans/",
      "bio": "Upgrade to a Solid State Drive, add RAM, clean the fan, replace thermal paste, test your laptop. Remove a virus.",
      "objectives": [
        "Dismantle a Laptop Easily",
        "Upgrade to a Solid State Drive in Minutes",
        "Clone a Hard Drive Easily or Make a Back-up",
        "Add and Replace RAM in your Device",
        "Identify Basic Components Inside of a Laptop",
        "Clean the Fan and Heatsink",
        "Replace Thermal Compound",
        "Upgrade BIOS",
        "Check Sensors and Temperatures of CPU and HDD",
        "Remove a Virus",
        "Speed up your Laptop"
      ],
      "course_content": {
        "Introduction": [
          "What to Expect in this Course",
          "Basic Terms you Want to Understand",
          "Does it Makes any Sense to Upgrade my old Laptop?"
        ],
        "What's Inside of a Laptop?": [
          "What Will I Learn?",
          "What Tools Will I Need?",
          "Let's Open a few Laptops",
          "Hard Drives, RAM, Wi-fi Modules, and Fans",
          "Do you Know Enough Laptops' Hardware now?",
          "Before you Move on..."
        ],
        "Upgrade your Laptop using an SSD (Solid State Drive)": [
          "Overview",
          "SSD - is it Worth it?",
          "SATA to USB Converter",
          "Do not Lose your Data - How to Clone a disk",
          "Let's Install our new SSD",
          "Let's Take a Stopwatch and Check the Bootup times"
        ],
        "Challenges and Windows Installation": [
          "A Challenge for you! Why is our SSD so slow?",
          "A Challenge - Walkthrough With Examples",
          "Windows 7, 8, and 10",
          "Installing MS Windows from Scratch"
        ],
        "How To Upgrade a MacBook": [
          "How To Upgrade a MacBook",
          "Replacing a disk in MacBooks",
          "Upgrading RAM in a MacBook",
          "How to Clone a Drive and Install a Solid State Drive in MacBooks"
        ],
        "Upgrading RAM": [
          "Memory Types",
          "How to add RAM to your Laptop",
          "How much RAM Will I Need for Windows 7/8/10 and MacBook?"
        ],
        "Software to Verify and Troubleshoot": [
          "Gathering Information About a Laptop",
          "Cool Applications you Need to Know",
          "Backups are Important",
          "A Cooling Pad - Does it Work?",
          "A Cooling Pad - More Tests"
        ],
        "How to Clean Laptop Fan and Heatsink - For Advanced Users Only": [
          "Removing the Fan and Heatsink",
          "Cleaning it all and Applying the Thermal Compound"
        ],
        "Now to Remove Viruses, Trojans, and Ads": [
          "The Best Antivirus Packages",
          "How to get rid of a Virus",
          "Hardware Solutions - UTMs and Firewalls"
        ],
        "BIOS": [
          "How to Update BIOS - Part 1",
          "How to Update BIOS - Part 2",
          "Let's Summarize Our Course"
        ]
      },
      "requirements": [
        "Basic Knowledge of Laptops and Hardware"
      ],
      "description": "Give your laptop a second life with this course! Is your laptop too slow? Overheating? Maybe you have a virus? Want to add some RAM or a brand new Solid State Drive (SSD)? This is a hands-on course focusing on both hardware and software aspects, showing you how to get started in these areas.\n\nYou've come to the right place. These high quality videos show you how to open a laptop, identify what's inside and upgrade it. Give your laptop a second life!\n\n• How to dismantle a laptop easily\n• Learn how to remove a hard drive and RAM\n• Replace your old hard drive and add a new SSD\n• Clone your old hard drive - no back up required\n• Add RAM to your laptop\n• Clean the fan\n• Replace thermal compound on your cpu/gpu *\n• Check the temperatures of your CPU, graphics card, and hard drive\n• Test your laptop and make sure it is stable\n• Update BIOS\n• Check tips and applications to help you get rid of a virus or trojan\n• Learn if it makes any sense to use a cooling pad\n• A lot of tips and tricks\n\nIn over 3 hours of content, this course covers all the basics about hardware and software updates for your laptop. Learn how to open a laptop, replace the hard drive, and clean the fan. All lectures are recorded in Full HD showing you all details. I focus on Windows-based devices but there is a chapter dedicated to MacBooks as well (how to open, remove the disk, RAM, etc.).\nThere are lectures for more advanced students (*) too. Tips, tricks, and applications you need to know! What are you waiting for?\nGive your laptop a second life. Join now!",
      "target_audience": [
        "Anyone Interested in Upgrading a Laptop",
        "System Engineers"
      ]
    },
    {
      "title": "Pro Soldering Secrets: How to Perfectly Solder Electronics",
      "url": "https://www.udemy.com/course/how-to-solder-electronic-components-like-a-professional/",
      "bio": "From Basics to Brilliance: Your Ultimate Guide to Soldering Mastery",
      "objectives": [
        "Choose the right soldering Iron",
        "Choose the right tools you need to have to keep yourself safe while soldering and solder the right way",
        "Choose the best solder out there, and why it is the best",
        "Clean your soldering Iron",
        "Change the soldering Iron tip head",
        "Extend soldering Iron life span",
        "Get your own Soldering tools that are right for you",
        "Solder Correctly following The right steps to an excellent soldering",
        "Set the right heat, solder and tools to be a soldering professional",
        "Differentiate between good soldering and bad soldering with real life examples"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Introduction",
          "Getting Ready to Master Soldering Techniques",
          "Very Important Note: Review Process",
          "Course Contents",
          "Quiz"
        ],
        "Practical Soldering: This is what you will be able to do at the end": [
          "Note about Practical Sections",
          "How to Solder",
          "Mastering Basic Soldering Skills for Electronics"
        ],
        "Things you need to know about Soldering": [
          "Things you need to start soldering",
          "Things to Consider when Choosing Soldering Irons",
          "Soldering Accessories",
          "Quiz",
          "Important: Theoretical or Practical",
          "Preparing for Effective Soldering: Tools, Equipment, and Considerations"
        ],
        "Soldering Steps": [
          "Step One Preperation",
          "Step Two Tinning",
          "Quiz",
          "Step Three Soldering",
          "Mastering the Basic Steps of Soldering"
        ],
        "Cleaning Your Soldering Iron": [
          "Cleaning Your Soldering Iron",
          "Essential Soldering Iron Maintenance"
        ],
        "Tips and Tricks": [
          "Tips and Tricks",
          "Examples of Bad Soldering",
          "Quiz",
          "Practical: Example of Good soldering and Bad soldering",
          "Enhancing Soldering Skills: Identifying Good and Bad Techniques"
        ],
        "Let's Solder": [
          "Practical: Soldering Iron Practical",
          "Let's Try Soldering",
          "Practical: How to clean soldering tip",
          "Quiz",
          "Practical How to solder correctly",
          "Practical Soldering",
          "Practical Soldering Skills: Techniques and Maintenance"
        ],
        "Practice Test": [
          "Mastering Soldering Techniques: Theory and Practice"
        ],
        "Who we are?": [
          "Who We Are?"
        ],
        "Course Project": [
          "Course Project",
          "Soldering Mastery Project Presentation"
        ]
      },
      "requirements": [
        "Basic experience in Electronics",
        "Basic experience in Electronic devices",
        "A Will to apply, not just watch"
      ],
      "description": "Master Soldering: From Novice to Pro in No Time!\nWhy This Course is a Game-Changer for You:\nUnlock Professional Skills: Dive deep into the world of soldering and emerge with skills that rival professionals.\nSpeedy Learning Curve: Say goodbye to long hours of trial and error. We've streamlined the process to get you soldering quickly and efficiently.\nDiverse Techniques: We don’t just teach soldering; we introduce you to a plethora of techniques, ensuring you're prepared for any soldering challenge.\nUniversal Appeal: Whether you're a seasoned electronics enthusiast or a complete beginner, this course is tailored for everyone.\nJoin Our Growing Community!\nOver 1,600 students have transformed their soldering skills with us. Here's what a few of them have to say:\nDavid Elsbree: \"A game-changer! I've dabbled in soldering as a hobby, but this course filled in all the gaps.\"\nKenneth Long: \"Perfect for beginners. Covers all the essentials.\"\nCourse Highlights:\nHD Content & Practical Videos: Over 2.5 hours of crisp, clear, and actionable content.\nExpert Insights: Stop the guesswork. Learn which soldering iron suits you, how to maintain it, and the secrets behind those perfect soldered boards you admire.\nSafety First: Soldering can be risky. We ensure you're equipped with knowledge to keep safe while achieving the best results.\nHands-On Learning: Real-life examples to distinguish between good and bad soldering, ensuring you always deliver top-notch work.\nCourse Breakdown:\nSoldering Tools: Equip yourself with the best.\nSoldering Accessories: Enhance your soldering game.\nStep-by-Step Guide: From preparation to cleaning, we've got you covered.\nPro Tips & Tricks: Elevate your soldering with insider secrets.\nRemember: Soldering is an art, and like all arts, it requires practice. With the right guidance (that's us!), you'll be on your way to mastery in no time. But always be cautious – working with hot liquid metal demands respect and care.\nEnroll Now & Ignite Your Soldering Journey!\nDon't miss out on this opportunity to elevate your soldering skills to professional levels. Join us and become a soldering maestro today!\nBasic Info:\nCourse locale: English (US)\nCourse instructional level: All Levels\nCourse category: IT & Software\nCourse subcategory: Hardware\nWhat is primarily taught in your course?\nTopic: Soldering\n\n\nAbout the Instructor:\nEducational Engineering Team\nTeam of Skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading entity in the Microcontroller industry with over 13 Years of Experience in teaching and practical projects. We provide in-depth, step-by-step blueprints on taming complex topics in easy and digestible bite-sized videos.\nHaving been in the Programming and Microcontroller business since 2007, we've catered to students' and educators' needs, teaching over 250k-THOUSAND students and counting through our 100+ courses on Udemy.\nAshraf Said AlMadhoun is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He is the Chief Educational Engineer at Educational Engineering Team, a company founded to explore new trends and technologies and to educate the world.\nOur online courses have helped over 250,000 people globally to excel and make great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Electronics Geeks",
        "Anyone Interested in Learning The right way to solder",
        "Electronics and Electrical Engineers"
      ]
    },
    {
      "title": "QNAP NAS - Configure & Administer like a Storage Pro!!",
      "url": "https://www.udemy.com/course/qnap_nas/",
      "bio": "Become a storage expert by understanding how to setup, use and configure the QNAP NAS systems and appliances",
      "objectives": [
        "Setting up QNAP NAS for home or business use",
        "File management and sharing on QNAP NAS",
        "Using QNAP applications and services",
        "Administering, troubleshooting and maintenance of the NAS"
      ],
      "course_content": {
        "Introduction to QNAP NAS": [
          "Welcome",
          "About the QNAP NAS",
          "What are the Hardware Components?"
        ],
        "Getting Started": [
          "Unboxing + Hardware (QNAP TS-h987XU-RP-E2334-16G)",
          "Initial Setup and Configuration",
          "The Desktop and QuTS Overview",
          "Looking at the Control Panel",
          "Setting up Network Connections"
        ],
        "Basic Configuration": [
          "Disk and Storage Basics",
          "SAN (Block-Based) vs NAS (File-Based)",
          "RAID Types and Comparisons",
          "SSD or HDD for NAS?",
          "Configuring Storage Pools and RAID",
          "Creating User Accounts and Groups",
          "Setting Up Shared Folders",
          "Using and Accessing Shared Folders (Windows & Mac)",
          "Enabling Remote Access and Cloud Services"
        ],
        "Application Management": [
          "Installing and managing QNAP applications",
          "Setting up multimedia services (Plex)",
          "Looking at What Apps Come Bundled?"
        ],
        "Advanced Configuration": [
          "Domain Itegration (Using Active Directory)",
          "Using SSH",
          "Using QNAP Storage with VMware (iSCSI / LUN Setup Guide)",
          "Running VM's Directly on NAS (Using Virtualization Station)"
        ],
        "NAS Administration": [
          "Monitoring system resources",
          "Updates and Firmware",
          "Hardware & Power Settings + System Status",
          "QNAPID + Remote Access",
          "External USB Drives",
          "Using Quotas",
          "Removing Shared Folders and Pools."
        ],
        "Backup are VERY important": [
          "Backup Strategies and Snapshots",
          "Computer and Server Backups (Using Hybrid Backup Sync & Hyper Data Protector)",
          "VMware and VM Backups (Using Hyper Data Protector)"
        ],
        "Best Practices and Security": [
          "Keeping your NAS Healthy",
          "Implementing Security Best Practices",
          "Understanding Notification & Alerts",
          "Understanding Logs - QuLog Center",
          "The Recycle Bin"
        ],
        "What Now?": [
          "Next Steps"
        ]
      },
      "requirements": [
        "Basic understanding of computer hardware and networking concepts",
        "Familiarity with file management on Windows or macOS",
        "Access to a QNAP NAS device (optional but recommended)"
      ],
      "description": "Welcome to this comprehensive administrative guide, helping you become a pro at using the QNAP NAS! This course is designed to equip you with the knowledge and skills needed to effectively manage and optimize your QNAP NAS device.\n\n\nQNAP is a leading provider of network-attached storage (NAS) solutions, offering a wide range of products designed to meet the storage, backup, and multimedia needs of home users, small businesses, and enterprises. They are equipped with powerful hardware and feature-rich software, including the QTS operating system, which provides an intuitive user interface for easy administration and management.\n\n\nFrom initial setup to advanced administration tasks, you'll explore every aspect of QNAP NAS management, ensuring smooth operation and maximum efficiency.\n\n\nWhat You'll Learn:\n\n\nIntroduction to QNAP NAS - Understand the basics of QNAP NAS, its hardware components, and key features.\nAdministration - how to set up and administer your QNAP NAS device, configure network settings, and create user accounts.\nStorage Management - storage configuration, including RAID setup, volume management, and storage expansion.\nFile Management - file sharing, access control, and advanced file management techniques on your QNAP NAS.\nBackup and Data Protection - implement backup strategies, including local and remote backup, snapshot management, and disaster recovery options.\nApplication Management - Discover a range of QNAP applications and services, including multimedia, virtualization, and more.\nUser Management - Manage user accounts, groups, and permissions to ensure secure access to your NAS resources.\nSecurity and Maintenance - Learn about security best practices, including firewall settings, antivirus scanning, diagnosing and resolving common issues, along with routine maintenance tasks to keep your QNAP NAS running smoothly.\nBy the end of this course, you'll be equipped with the knowledge and confidence to fully leverage the capabilities of your QNAP NAS, transforming it into a central hub for your digital storage and management needs.",
      "target_audience": [
        "Individuals or business owners who are new to QNAP NAS",
        "People who want to learn more about NAS products"
      ]
    },
    {
      "title": "Set Up an Electronics Home Lab Tools and Equipment",
      "url": "https://www.udemy.com/course/set-up-an-electronics-lab-tools-equipment-laboratory-electronic-solder/",
      "bio": "How to Make a Professional Electronics Lab at Your Own Home and How to Choose the right Tools that really work",
      "objectives": [
        "How to Find the Right Spot",
        "Choose the right soldering Iron",
        "Choose the right tools you need to have to keep yourself safe while soldering and solder the right way",
        "Get your own Soldering tools that are right for you",
        "How to choose the best Multimeter",
        "How to Choose a Soldering Station",
        "What are the Must Have Soldering Accessories",
        "How to choose a Bench Power Supply",
        "Things to Consider when Choosing an Oscilloscope",
        "How to Get the best Wire Stripper",
        "Needle-nose Pliers and Wire Cutter",
        "Should you get a Hot Glue Gun?",
        "Why you must get a Precision Screwdriver Set?",
        "Tweezers",
        "Rotary Tool and Accessories",
        "3D Printer",
        "Assortment Kits and Electronics Components",
        "Breadboards",
        "Jumper Wires",
        "Resistors, LEDs, Potentiometers, Pushbuttons and Other Electronics Components",
        "Varied Sensors and Modules",
        "Arduino Starter Kit",
        "Cabinet organizer",
        "Choose the best solder out there, and why it is the best",
        "How to Buy Electronic Components Online",
        "Differentiate between good soldering and bad soldering with real life examples"
      ],
      "course_content": {},
      "requirements": [
        "Basic experience in Electronics",
        "Basic experience in Electronic devices",
        "A Will to apply, not just watch"
      ],
      "description": "Master Your Electronics Home Lab: Tools, Equipment & More!\nAre you passionate about electronics? Want to establish your own professional-grade lab right at home? Dive into our comprehensive course designed just for enthusiasts like you.\nWhat's Inside?\nYour Own Electronics Lab Setup: Get step-by-step guidance on how to set up an electronics lab at home, in your office, workshop, or even a small desk.\nChoose the Right Tools: Embarking on this electronics journey can be daunting. What tools are essential? Which ones offer the best value for money? We help simplify these decisions for you.\nThe Power of Professional Grade: Grasp electronics and coding with tools that industry professionals trust. No compromises.\nPromote STEM Education: Our course is not just about tools. It's about fostering a love for STEM and learning holistically.\nShop Smart Online: Learn how to find and purchase the equipment you need online, ensuring quality, affordability, and trustworthiness.\nWhy Enroll Today?\nComprehensive Guidance: Not just a list, but curated recommendations tailored to your needs. Start small, dream big, and gradually enhance your lab.\nSafety First: Emphasis on safe, easy-to-use tools to ensure your learning is risk-free.\nSave Money & Time: Avoid investing in unnecessary tools. Get the essentials, understand their worth, and make informed decisions.\nExclusive Bonuses Just For You!\nBonus 1: Master the Art of Soldering\nFrom choosing the right soldering iron to understanding the nuances of a well-soldered board, this bonus content will elevate your skills.\nReal-life examples showcasing the difference between good and bad soldering.\nBonus 2: Smart Online Shopping for Electronics Components\nDiscover the secrets of online shopping, ensuring you always get the best deals.\nGain insights into finding trusted sellers, tracking your purchases, and ensuring product quality.\nTurn your passion into expertise with the right tools, the right knowledge, and the right guidance. Enroll in \"Master Your Electronics Home Lab\" and embark on a rewarding journey into the world of electronics.\nReserve Your Spot Now & Set the Foundation for a Bright Electronics Future!\nWhat you will learn\nHow to set up a professional electronics lab at home.\nChoosing the right tools and equipment.\nStep-by-step guidance on lab setup.\nMastering the art of soldering.\nSmart online shopping for electronics components.\nSafety practices in electronics lab setup.\nWho is this course for\nElectronics enthusiasts and hobbyists.\nSTEM students and educators.\nDIY project makers.\nAnyone interested in setting up a home electronics lab.\nRequirements\nNo prior experience required.\nA willingness to learn and set up an electronics lab.\n\n\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in the Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge, we go into the depth of the topic and give you the exact step-by-step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years, we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy.\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million View, 20k+ Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelance engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their careers.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative teaching style that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, particularly for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to improve and make great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone Interested in Learning The tools required to have your own Electronics Lab at Home",
        "Anyone Looking to Set Up an Electronics Home Lab and looking for the best Tools and Equipment",
        "Electronics Geeks",
        "Electronics and Electrical Engineers"
      ]
    },
    {
      "title": "Learn PCB Design By Designing an Arduino Nano in Altium",
      "url": "https://www.udemy.com/course/create-and-design-your-own-arduino-nano-in-altium-designer/",
      "bio": "Learn Printed Circuit Board (PCB) design by creating your own Arduino Nano in Altium Designer.",
      "objectives": [
        "Create an design a custom Arduino Nano in Altium Designer",
        "Create their own custom components and component library",
        "Draw the schematic of an Arduino Nano and wire components",
        "Compile design detect and eliminate design errors",
        "Define board shape and size",
        "Route Printed Circuit Board (PCB)",
        "Use to the autorouting capabilities to speed up the routing process",
        "Use design rule checker to eliminate errors and reduce manufacturing board iterations"
      ],
      "course_content": {
        "Introduction and Getting Started in Altium Designer": [
          "Introduction",
          "Read this Before Embarking on This Course",
          "Download and Installing Altium",
          "Obtaining an Altium License",
          "Introduction to the Altium Interface",
          "Altium User Interface",
          "Why do I want to learn PCB design",
          "PCB Design Basics and Terminology"
        ],
        "Creating the Component Libraries": [
          "Creating the Atmega Part 1 - Component Symbol",
          "Creating the Atmega Part 2 - PCB Footprint",
          "Creating Diodes in Altium Design Component Library (Optional)",
          "Creating Headers (Optional)",
          "Adding 3D Bodies to Components",
          "Where to Find Altium Designer Libraries",
          "Others places to get Altium Libraries"
        ],
        "Schematic Design": [
          "Placing Components in Schematic View",
          "Wiring Schematics and Using Net Labels Part 1",
          "Wiring Schematics and Using Net Labels Part 2",
          "Altium Keyboard Shortcuts",
          "Detailed Keyboard Shortcuts",
          "Wiring Schematics and Using Net Labels Part 3",
          "Schematic Design Quiz",
          "Keeping things Neat in Altium Schematic View",
          "Annotating Designators and Compiling Project",
          "Got a minute? Please leave a Positive Rating and Comment for this Course"
        ],
        "PCB Design": [
          "PCB Basics",
          "Defining Board Shape",
          "Placing Components in PCB View",
          "Routing and AutoRouting",
          "PCB Keyboard ShortCuts",
          "Eliminating Errors and Design Rule Check Part 1",
          "Eliminating Errors and Design Rule Check Part 2",
          "Eliminating Errors and Design Rule Check Part 3",
          "Cleaning up the PCB Design (Edges and Text Strings)",
          "PCB Design"
        ],
        "Generating Files for Manufacturers": [
          "Generating Manufacturer Gerber Files and Bill of Materials",
          "My First Arduino Bill of Materials",
          "Gerber Files"
        ],
        "Bonus Section": [
          "Cool Resources for Students",
          "Getting Started with PCB Design - A Summary (Bonus)",
          "Differential Pairs – What They Are, Advantages And More",
          "Right angled tracks (90 Degree Tracks) Are they good or evil?",
          "Sizing Traces on PCB"
        ]
      },
      "requirements": [
        "A decently fast internet connection to download once-off +-3 Gigabytes file for Altium Designer (I show you where to download Altium Designer).",
        "Time, Dedication and Patience to learn and implement new knowledge.",
        "A PC that meets the minimum requirements of Altium Designer - Windows 7/8/10 32-bit Intel® Core™ i3 processor or equivalent 4 GByte RAM 3.5 GByte hard disk space (Install + User Files) Intel integrated graphics HD4000 or equivalent, supporting DirectX 9.0c and Shader model 3 (or later) Main monitor 1280x1024 screen resolution, Adobe® Reader® (8 or later) Internet Connection Up to date Web browser Microsoft Excel (required for Bill of Materials templates)",
        "A licence or 30 day trial licence (I show you how to obtain a FREE 30 day trial licence) This course can be completed in less than 15 Days if you are persistent. The 30 days also serves as motivation so you do not procrastinate in your goal to finish this course"
      ],
      "description": "Course Update:\nNote! This course price will increase to  $200 as of 1st June 2020 from $190. The price will increase regularly  due to updated content. Get this course while it is still low. ...................................................\nWhat is this course about:\nThis course is a first of its kind in which you will learn from start to finish on how to design your very own custom Arduino Printed Circuit Board (PCB). This course will help you to improve your PCB design skills which will help you to get started freelancing or to get a job in PCB design with Altium Designer being one of the top PCB design tools used around the world.\nWhat is expect in this course:\nI will show you how to get started in the world of PCB design using Altium Designer\nI show you how to download and install Altium designer as well as demystify the user interface.\nI take you step-by-step on how to create your own component library so that you can create your own components if you need to. (very high possibility that you will need to create your own components)\nShow you how to add 3D models to components and show you a website where you can find all the component models in one place.\nHow to recreate the Arduino Nano Schematic in Altium designer as well as wiring components in Schematic view\nI show you how to transfer your schematic into PCB view as well as define the board shape\nOnce the board shape is defined, I show you how to place components on the board, create a multi-layer board ( we are going to use 4-6 layers) .\nFor a 6 layer board, I teach you how to route between layers and how to strategically place components on to the board design.\nShow you how to auto-route, when you are faced with a complex design to save time.\nCorrect your design and eliminate design errors before sending them to your manufacturer.  This will save you money for numerous design iterations\nFinally I teach you how to create Gerber files, which are files that your manufacturer can read to create your Printed Circuit Board.\nThis course will be updated regularly with new lectures, resources, quizzes and content.\nMoney-Back Guarantee\nThe course comes with an unconditional, Udemy-backed, 30-day money-back guarantee. This is not just a guarantee, it's my personal promise to you that I will go out of my way to help you succeed just like I've done for thousands of my other students.",
      "target_audience": [
        "Learn basic to intermediate PCB design",
        "Want to create your own custom Arduino Printed Circuit Board (PCB).",
        "Want to get a job in PCB design",
        "Want to learn Altium Designer in the shortest possible time.",
        "Want to get started creating cool gadgets",
        "Have a tech kickstarter idea, that you want to get of the ground"
      ]
    },
    {
      "title": "Beyond Arduino: Electronics for Developers & Makers - (GPIO)",
      "url": "https://www.udemy.com/course/beyond-arduino-gpio/",
      "bio": "Learn beyond the basics of electronics and hardware design for your embedded hardware or IoT projects.",
      "objectives": [
        "Design the hardware around your IoT applications",
        "Design add-on circuitry for popular development boards such as Arduino and Raspberry Pi.",
        "Understand how a microcontroller interacts with its supporting hardware"
      ],
      "course_content": {},
      "requirements": [
        "A development platform is recommended to get the most out of this course. Anything from Arduino to Raspberry Pi to the BASIC Stamp, TI Launchpad or NXP Freedom board will do. Even stand alone microcontrollers such as NXP s08, microchip PIC or TI MSP430 will do.",
        "Some actuators and sensors, not necessarily designed to work with your development platform. Anything you'd like to experiment with, such as RC servos, LCD displays, temperature sensors, motors, accelerometers, optical encoders, potentiometers and so on.",
        "Some basic knowledge of how to run your code in your development platform is assumed.",
        "Some basic knowledge on electronics is assumed, such as Ohm's Law, Series and Parallel Circuits, Voltage, Current, and so on"
      ],
      "description": "In this course you will learn that there's more to life than the Arduino Uno and that there's probably a better way to do what you've been doing with microcontrollers. Yes, Arduino is an excellent platform to get you started, but you will learn that Arduino is not part of the day to day electronics you use like your TV, microwave oven or car dashboard.\nDo you know how the supporting hardware in a microcontroller work? Well, you will learn that here. Also as a bonus you will learn how the functions in dumbed-down libraries work.\nThis is not exactly a hands-on course, not if you don't want it to be. There are no promises on the projects you’ll make because I won’t force you to build something you didn’t choose to. However, I strongly recommend that you code along. Several microcontroller development platforms are showcased, but you should follow the examples with your own microcontroller.\nYou should know that most lectures have the following elements:\n-Recommended Material\n-“Recall” Slide\n-Actual lecture content\n-Live Demo\n- and Quizzes",
      "target_audience": [
        "Makers who have some experience with hardware and would like to learn how these circuits work with as few equations as possible.",
        "Coders who were introduced to hardware through some development board popular in the Maker movement, such as the Raspberry Pi or Arduino (e.g. blinking an LED, reading push button input)",
        "Beginners who would rather skip the boring theory and math, and dive into fun hands- on applications that move, light up and make sounds instead.",
        "This course is not for advanced hardware designers or electrical engineers.",
        "This is not an introductory Microcontroller course. You will not learn to use an Arduino board by taking this course.",
        "This is not a theoretical electronics course. Some of the basics are covered but we won't study differential equations,  transforms,  or transfer functions.",
        "This is not a programming introductory course. You won't learn C,  python or Java by taking this course."
      ]
    },
    {
      "title": "Analog Electronics Design & Simulate BJT Circuits on Proteus",
      "url": "https://www.udemy.com/course/analog-electronics-part-2-all-about-transistors-in-depth/",
      "bio": "Semiconductor Devices: Hands on Lab Based Course Learn All about Transistors Analog Electronics and Hardware Design - 2",
      "objectives": [
        "Operating Bipolar Junction Transistors as a switch and understanding the AC model of BJTs on Proteus Software",
        "3-Lab based mini-projects based on Bipolar Junction Transistors ( 1. Automated Street Light Controller using BJTs, 2. DJ Lights using BJTs, 3. Amplifiers, etc)",
        "Undersatnding the Frequency Response of Bipolar Junction Transistors based Amplifier on Proteus Software",
        "Definition of transistors (Bipolar Junction Transistors)",
        "Types of transistors (BJTs, MOSFETs,etc)",
        "Learn circuit simulation on proteus software",
        "Characteristics of Bipolar Junction Transistors",
        "What is biasing and need of biasing in transistors",
        "Biasing techniques and Numericals based on Bipolar Junction Transistors",
        "BJT-Based Circuit Design and Analysis on Proteus",
        "Modelling of Bipolar Junction Transistors",
        "Designing Amplifier from Bipolar Junction Transistors on Proteus Software",
        "Designing and Simulating Bipolar Junction Transistors Circuits with Proteus"
      ],
      "course_content": {
        "Introduction": [
          "Course Trailer",
          "Introduction",
          "Importance or Application of Transistors"
        ],
        "Understanding basic concepts of Transistors": [
          "Definition of transistors",
          "Types of transistors"
        ],
        "Introduction to Bipolar Junction Transistor": [
          "Symbol and Construction of Bipolar Junction Transistor",
          "Why the area of collector region is greater than the emitter region in BJT",
          "Why NPN transistor is preferred over PNP in Bipolar Junction Transistor?",
          "Recognizing Terminals of Bipolar Junction Transistor",
          "Configurations of Bipolar Junction Transistor",
          "Understanding the definition of transistor in depth",
          "Difference between ground and negative potential in electronic circuits",
          "Introduction to Proteus Software",
          "Course Feedback"
        ],
        "Input Characteristics of Bipolar Junction Transistors": [
          "Introduction to Input characteristic and understanding case:-1",
          "Simulating Case:-1 on the Proteus software & plotting the results on the graph",
          "Input characteristic and understanding case:-2",
          "Simulating Case:-2 on the Proteus software & plotting the results on the graph"
        ],
        "Output Characteristics of Bipolar Junction Transistor": [
          "Introduction to Output characteristic and understanding case:-1",
          "Simulating Case:-1 on the Proteus software & plotting the results on the graph",
          "Understanding and simulating case:-2 on the proteus software",
          "Course Feedback"
        ],
        "What is beta or current gain in Bipolar Junction Transistor": [
          "Understanding the concept of the current gain"
        ],
        "What are the different operating regions of Bipolar Junction Transistor?": [
          "Understanding how BJT can be operated in Saturation, Cutoff and Active region"
        ],
        "What is biasing and need of biasing transistors": [
          "What is biasing?",
          "Understand the concept of Load-Line and Q-point in transistors?",
          "Why transistors are biased?"
        ],
        "Biasing Techniques of Transistors": [
          "Fixed Biasing Technique",
          "Modified Fixed Bias",
          "Collector to Base Bias and understanding why it is known as a self bias circuit",
          "Voltage Divider Bias Technique",
          "Why Voltage Divider Bias is known as Self Bias Circuit",
          "Why there is 180 degree phase shift between input and output signal of BJT",
          "Course Feedback"
        ],
        "What is Stability Factor in Bipolar Junction Transistors?": [
          "Definition of Stability Factor",
          "Derivation of Stability Factor",
          "Stability Factor for Different Biasing Techniques"
        ]
      },
      "requirements": [
        "Basic concepts of electrical circuits like KVL, KCL, Nodal analysis and circuit theorems), if you don't know this concepts you can enroll in my course-1 of Current electricity and dc circuits and learn all those concepts.",
        "In depth knowledge of Semiconductors, if you don't know this concepts you can enroll in my course-2 on semiconductors to learn the concept.",
        "In depth knowledge about working of diode & diode circuits or you can enroll my course-3 on Foundation of analog electronics",
        "Download Proteus Software",
        "You should have a desktop"
      ],
      "description": "This course is ideal for Electrical, Electronics, Instrumentation, Biomedical, and Robotic Engineering Students.\nBefore enrolling in the course I expect that you must have a good idea about current electricity, semiconductors, diodes, capacitors, etc. If you don't have any idea about it then you can enroll in the rest of my courses which deal with all these concepts in depth.\nDo you know that your smartphone has millions and billions of transistors but I'm damn sure you don't what is their significance or how they work?\nTo take ECG from the heart, along with an electrode you will require signal conditioning circuits which will enhance the overall signal,\nIn various low-end applications, you need to control the motor and this is generally done by transistors,\nTo amplify the signal amplifier is required,\nIn your smartphone, lots of logic gates are present that switch on and off very quickly to carry out certain tasks and all of these things are done by Transistor. Thus this course is highly recommended for Biomedical, Electrical, Electronics, Instrumentation, and Robotic engineering students.\n@ Course Highlights:-\nExplore the importance and definition of transistors.\nDive into the various types of transistors, with a focus on BJT transistors.\nUnderstand the basics of BJT transistors and discover why NPN is preferred over PNP.\nLearn about the characteristics of BJT and the factors influencing stability.\nDelve into the different biasing techniques of transistors.\nGain hands-on experience with numerical and circuit simulations using Proteus software.\nExplore BJT's applications as a switch and amplifier.\nEngage in three exciting mini-projects with simulations on Proteus software.\n@ Roadmap:-\nImportance of Transistor\nDefinition of Transistor\nTypes of Transistors\nUnderstanding the basics of BJT transistors.\nTypes of BJT transistors\nWhy NPN is preferred over PNP\nWhy area of the collector region is greater than the emitter region?\nCharacteristics of BJT\nWhat is biasing and the need for biasing transistors?\nDifferent biasing techniques of transistors\nStability factor\nNumericals + Simulation of circuits on proteus software\nBJT as a switch\nBJT as an amplifier\n3-Mini projects\n@ Outcome:-\nBJT circuits\n20+ Numericals\nSimulation of circuits on proteus software\nThree Mini projects simulated on proteus software\nFree PDFs are available after each video session for revision purposes\nI hope you will surely enjoy my course. Don't miss out on this opportunity to enhance your knowledge and skill set. Enroll now and enjoy a comprehensive learning experience that will empower you in your engineering journey!",
      "target_audience": [
        "This course is highly recommended for biomedical, electrical, electronics, instrumentation and robotics engineering students",
        "Anyone who wants to learn Bipolar Junction Transistors",
        "Those who want to know what is transistor, it's working and it's application",
        "Anyone who wants to learn electronics from scratch",
        "Bipolar Junction Transistors (BJT)-based Circuit Design and Analysis on Proteus",
        "Advanced Bipolar Junction Transistors (BJT) Analysis and Design on Proteus",
        "Those who want to learn analog electronics",
        "Electronic Engineers",
        "Electrical Engineers",
        "Biomedical Engineers",
        "Instrumentation Engineers"
      ]
    },
    {
      "title": "Upgrading Laptop Hardware: Improve Speed, Memory, & Cooling",
      "url": "https://www.udemy.com/course/laptop-hardware/",
      "bio": "The Basics of Laptop Hardware; Upgrading Laptop Storage Devices, Improving Memory Speeds, and Repairing Air Circulation",
      "objectives": [
        "Successfully take apart a laptop and put it back together.",
        "Safely clean internal computer parts.",
        "Modify / Upgrade certain hardware components.",
        "Intuitively optimize machine cooling performance."
      ],
      "course_content": {},
      "requirements": [
        "Must Own A Laptop",
        "Own a Screwdriver + Philips & Torx Screws",
        "Patience to Work with Delicate Circuitry"
      ],
      "description": "Modifying, Repairing, or Upgrading your laptop can seem daunting.\nLaptop hardware is slightly different from an ATX – sized setup. It’s quite unique.  As a beginner, navigating through laptop internals can be very risky. Circuitry and connectors are smaller and much more fragile.\nInternal maintenance / upgrades are just as important software maintenance. We update our browsers, applications, and operating systems when needed, but leave out the most crucial aspect – the internal hardware.\nThere’s quite a bit you can do to upgrade your laptop’s overall performance. Even if you’ve never touched hardware before, you’ll be able to effectively handle everything presented in this course.\n-- Running out of space?\nUpgrade to a higher capacity storage device!\n-- Experiencing lag when you have multiple applications open?\nUpgrade your RAM chip(s)!\n-- Laptop getting too hot?\nClean & Refresh your CPU cooling unit!\n-- Reeeally slow start-up time?\nSwap in an SSD!\nUpgrade, modify, or repair your laptop hardware. Improve performance while also getting to know the ins and outs of how your machine functions.\nReady to take your laptop to the next level?\nEnroll now!",
      "target_audience": [
        "Beginners who have never taken apart a laptop before",
        "Anyone who wants to upgrade their laptop hardware",
        "Those who want improved storage (HDD or SSD) for their laptop",
        "Performance seekers looking to upgrade RAM",
        "Anyone with excess dust build-up in their laptop"
      ]
    },
    {
      "title": "Building an Architectural Walkthrough Using Unity",
      "url": "https://www.udemy.com/course/building-an-architectural-walkthrough-using-unity/",
      "bio": "Walk around in your own architectural design with the Unity Game Authoring system",
      "objectives": [
        "Export CAD and BIM models into a format that Unity can use",
        "Optimize the geometry and import settings for clean and reliable results",
        "Adjust the materials to add bump maps and transparent or reflective effects",
        "Add a Sun light with shadows and ensure even lighting",
        "Improve interior lighting with additional lights",
        "Bake the lighting onto the model with Lightmapping",
        "Add a character to freely walk around your model",
        "Use animations to apply interactive features such as opening doors",
        "Build a complete standalone application that can be shared online",
        "Gain control over your model with Unity scripts"
      ],
      "course_content": {
        "Importing Architectural Models in Unity": [
          "Introduction and Workflow Overview",
          "From SketchUp to Unity",
          "From ArchiCAD to Unity (Step 1)",
          "From ArchiCAD to Unity (Step 2)",
          "Updating Models",
          "Improving Performance"
        ],
        "Navigating an Architectural Model": [
          "Adding a First-person Controller",
          "Preventing Running Through Walls",
          "Adding a Third-person Controller",
          "Loading a Different 3D Character",
          "Adding a Mini-map"
        ],
        "Improving Materials with Shaders and Textures": [
          "Textured Materials with Bump and Specular Mapping",
          "Using a CubeMap for Sky and Clouds",
          "Using a Better Glass Shader",
          "Procedural Materials Using Substances",
          "Cutout Textures Using Alpha Maps"
        ],
        "Adding Lights and Shadows": [
          "Lighting Types",
          "Adding a Sun with Shadows",
          "Interior Lights Using Point and Spot Lights",
          "Lightmapping (Preparation)",
          "Lightmapping (Calculation)"
        ],
        "Animating Objects and Lighting": [
          "Understanding Animation in Unity",
          "Creating a Rotating Cube",
          "Keyframing an Opening Door",
          "Opening and Moving an Elevator",
          "Setting Up a SunStudy Animation"
        ],
        "Scripting to Add Interactivity": [
          "Creating Your First Script",
          "Editing a Script in Monodevelop",
          "Triggering the Rotation of GameObject",
          "Switching a Material with a Script",
          "Adding a GUI to the Material Switcher"
        ],
        "Expanding the Scripts": [
          "Hiding and Showing Objects",
          "Switching between Cameras",
          "Resetting the Player",
          "Picking Objects",
          "Displaying Object Information"
        ],
        "Presenting the Final Walkthrough": [
          "Bringing Everything Together – The Build Settings",
          "Building the Result and Play",
          "Building for other Platforms – Example iOS",
          "Compiling and Running the iOS App",
          "Adding a Mobile Controller",
          "Some Final Refinements"
        ]
      },
      "requirements": [
        "A quick brush up on the basics of Unity and you will be ready to go.",
        "This video tutorial takes an illustrative approach, with attention to how and why you need to do things. Each step leads you to the final walkthrough and, what’s more, the concepts can be applied to other architectural software too."
      ],
      "description": "Starting from 3D models in common architectural software, we will discuss the workflow to load the models into Unity and even incorporate model changes. The building model will be refined, with better materials and lighting, so it looks attractive to the visitor. With a few basic scripts, we add the necessary interactivity and finally export it into an application you can share.\nThis video tutorial shows an efficient and easy approach to apply an architectural 3D model into your project for quick and reliable results.\nAbout the Author\nStefan Boeykens is an architect-engineer from Leuven (Belgium). After graduation, he was involved in architectural practice for about 4 years, before returning to the KU Leuven for his PhD in 2007 on the integration of Building Information Modeling (BIM) in the design process. He worked on a variety of research and education projects, ranging from CAD and BIM to metadata for architectural archives and cost simulations. His main research interests are BIM, 3D modeling and visualization, digital historical reconstruction, parametric design, programming, and interoperability between a variety of software tools, with a special focus on openBIM.",
      "target_audience": [
        "This video course is meant for architects, designers, engineers, students, or in a nutshell, anyone interested in developing interactive environments with Unity."
      ]
    },
    {
      "title": "Arduino: Make an IoT environment monitor",
      "url": "https://www.udemy.com/course/beginning-arduino/",
      "bio": "A perfect start for the new maker: learn by creating a gadget that posts your environment data to a Web logging service.",
      "objectives": [
        "Make simple circuits based on the Arduino board",
        "Acquire data from sensors and display them on an LCD screen",
        "Upload sensor data to a free cloud logging service and visualise it in a dashboard",
        "Understand the basics of programming for microcontrollers"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Please read this before continuing!",
          "Components needed for this project",
          "Where can you find the sketch source code?",
          "Hello World! Diodes, LEDs, and your 1st circuit",
          "Hello World! Your 1st sketch",
          "Use Pulse Width Modules, make the LED fade"
        ],
        "Arduino development basics": [
          "Compilers, the IDE instructions and functions",
          "Operators",
          "Control structures",
          "Frequently used functions",
          "Custom functions",
          "Reading and writing digital and analog values",
          "Digital and analog read/write demonstration"
        ],
        "Constructing JING": [
          "Measuring light with Lux and the Axel-Benz formula",
          "Measuring light with a photoresistor demonstration",
          "Measuring temperature and humidity",
          "Measuring barometric pressure",
          "Adding an LCD screen, setup the circuit",
          "Adding an LCD screen, adding a library and sketch walkthrough",
          "Create an echo server with the Ethernet Shield",
          "Transmit sensor data with the Ethernet Shield",
          "Emoncms, what is it, walkthrough",
          "Upload data from a single sensor to Emoncms",
          "Setting up logging and visualising data on Emoncms",
          "Completing the hardware assembly",
          "The Jing complete sketch walkthrough",
          "Completing the Jing dashboard"
        ],
        "Video Responses": [
          "How to configure a widget (and why is a widget blank?)"
        ],
        "Conclusion and Bonus Lecture": [
          "Wrap-it up, what did we learn, and improvements",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "The basics of electricity, like voltage, current, resistance."
      ],
      "description": "This course is designed for beginner makers. I will help you get started with the basics of creating circuits with the Arduino prototyping board, and by the end of this course you will have an Internet-connected home environment monitoring gadget, build with your own hands!\nThe only prerequisite is a basic understanding of concepts like voltage, current and resistance, and ability to download and install software on your computer. A very basic understanding of programming is a bonus, but not absolutely necessary.\nAlong the way, you will learn about programming, sensors, and communications.\nThe course is split in three parts:\nPart 1 is an introduction, which will gently help you create your first circuit and open your appetite for more.\nPart 2 contains a primer on making with the Arduino, focusing on the Integrated Development Environment and the sketching language.\nPart 3 is about making JING. JING (not an acronym!) is the environment monitoring system that you will put together piece by piece, and line by line.\nIf learning by making sounds like the way to go, then this course is for you!\nMaterials:\nTo fully take advantage of this course, you will need (all of these are easily sourced from Ebay):\n1) An Arduino (I suggest a genuine Arduino Uno)\n2) A photoresistor\n3) A DHT22 temperature and humidity sensor\n4) A BMP085 barometric sensor breakout\n5) A 16x2 LCD screen based on the Hitachi HD44780 driver (or compatible, these are very common)\n6) A potentiometer\n7) Assorted resistors\n8) A small breadboard\n9) Lot's of breadboard wires.",
      "target_audience": [
        "Makers who have an existing intermediate or better understanding of electronics",
        "Beginner Arduino makers"
      ]
    },
    {
      "title": "Complete Verilog HDL programming with Examples and Projects",
      "url": "https://www.udemy.com/course/digital-design-using-verilog-hdl-programming-with-practical/",
      "bio": "Fundamentals, Design flow, modeling levels, Datatypes, test bench, Tasks & system tasks, FSM, FPGA & examples & Projects",
      "objectives": [
        "Learning Verilog HDL Programming fundamental concepts and properties compare to C Language, feature & advantages of Verilog HDL over VHDL",
        "VLSI Design flow ( FPGA & ASIC) and Difference between FPGA vs ASIC",
        "Different design methodologies in Verilog HDL programming with examples",
        "Behavioral modeling with blocking & Non-Blocking concepts and real time examples",
        "Test bench Verilog program with examples",
        "Task & system tasks with examples for random data generator, file based operations and memory load operations, and file representation input & output etc.",
        "Finite state machine (FSM) with example for both Mealy & Moore and Sequence detector FSM",
        "Complete design & test bench programming for Memory controllers",
        "Complete design & test bench programming for FIFO controller",
        "Complete design & test bench programming for Encoder & decoder for Hamming code Error detection correction",
        "Basics of FPGA"
      ],
      "course_content": {},
      "requirements": [
        "Intension to learn",
        "basic in C Language",
        "basics in Digital design ( not compulsory)"
      ],
      "description": "Complete Verilog HDL programming course with a perfect, well structured and concise course for freshers and experienced, as it is from fundamental level to the application level. This course discuss the concepts in Verilog HDL programming and properties compared with C-Language and discussing the features and advantages.\nIn this course we give information related to VLSI design flow for FPGA & ASIC and gives overview about both.\nThis course gives information on different styles of programming like Gate level, Data flow, Behavioral and switch level with examples.\nThis course gives clear picture on verification, i.e. simulation and writing a test bench and some general examples like counter, clock diver using counter, pulse generator.\nThis courses explains how to write verification models using test benches with task and system tasks with Examples. These examples includes, file based system tasks such as writing data in to file, reading data from file and loading data in to memory and random data generator.\nThis courses shows clear picture on Finite State Machines (FSM)\nhow to draw,\nhow to realize it in to hardware model\nhow ro translate in to verilog code for both Mealy & Moore FSM with examples.\nThis course also shows some projects like Memory controller, FIFO controller and Error detection & correction using Hamming code, this improves ability to analyse and approach to Projects.\nFinally it gives basic knowledge on FPGA's like core concept how bit file is loaded in to FPGA.",
      "target_audience": [
        "Undergraduate Electronics and computer science engineering students",
        "Graduate students who planning their career in VLSI domain front end (Design & verification)",
        "Advanced under graduate students, who willing to do project in front end VLSI design"
      ]
    },
    {
      "title": "Overview of Peripheral Component Interconnect Express (PCIe)",
      "url": "https://www.udemy.com/course/overview-of-peripheral-component-interconnect-express-pcie/",
      "bio": "Peripheral Component Interconnect Express Fundamentals and Essentials",
      "objectives": [
        "Functionality and communication topology of PCIe"
      ],
      "course_content": {},
      "requirements": [
        "Basic Computer Hardware"
      ],
      "description": "Brief introduction about Peripheral Component Interconnect Express (PCIe) and also it presents the PCIe fundamentals and essentials. Also it provides information about PCIe architecture, topology and terminology. Also it details the components like root complex, endpoint, switch and pcie to pci/pci-x bridge. Also it presents the information about PCIe layering with detailed Transaction Layer Packet Information.",
      "target_audience": [
        "Beginner & System Software Developer"
      ]
    },
    {
      "title": "Verification Series Part 4: UVM Projects",
      "url": "https://www.udemy.com/course/uvm-for-verification-part-2-projects/",
      "bio": "Step by Step Guide from Scratch",
      "objectives": [
        "Verification of Combinational Circuits",
        "Verification of Sequential Circuits",
        "Verification of Common Bus Protocols viz. APB, AXI",
        "Verification of Communication Protocols viz. UART, SPI, I2C",
        "Understanding usage of Virtual Sequencer, Sequence Library and TLM analysis FIFO"
      ],
      "course_content": {
        "Agenda": [
          "Course Overview",
          "Course Pre-requisites"
        ],
        "Verification of Combinational Circuit : 4-bit Multiplier": [
          "Multiplier P1",
          "Multiplier P2",
          "Multiplier P3",
          "Design Code",
          "Verification Environment"
        ],
        "Verification of Sequential Circuit : Data Flipflop": [
          "DFF P1",
          "DFF P1",
          "DFF P3",
          "Verification Code",
          "Design Code"
        ],
        "Verification of UART": [
          "Clock Generator for different Baud",
          "Verification P1",
          "Verification P2",
          "Clock Generator : Design",
          "Clock Generator : Verification environment",
          "Understanding UART system",
          "UART Clock Generator",
          "UART Transmitter",
          "UART Receiver",
          "System Top",
          "Typical Transaction",
          "Simple TB code",
          "Verification Environment P1",
          "Verification Environment P2",
          "Design Code",
          "Verification Environment"
        ],
        "Verification of SPI Memory": [
          "Understanding SPI Controller RTL",
          "Understanding SPI Memory",
          "Typical Transactions",
          "SPI controller P1",
          "SPI controller P2",
          "Design Code",
          "Verification Environment",
          "Understanding Native Transactions",
          "Native SPI P1",
          "Native SPI P2",
          "Design Code : Native",
          "Verification Environment : Native"
        ],
        "Verification of I2C Memory": [
          "Understanding I2C",
          "I2C Slave Memory",
          "I2C Master Controller",
          "Typical Transaction to DUT",
          "Verification Environment P1",
          "Verification Environment P2",
          "Design Code",
          "Verification Environment"
        ],
        "Veriicantion of APB_RAM": [
          "Fundamentals",
          "Understanding Design",
          "Understanding Transactions",
          "ABP_RAM P1",
          "ABP_RAM P2",
          "ABP_RAM P3",
          "Design Code",
          "Verification Environment"
        ],
        "Verification of AXI Memory": [
          "Understanding AXI Channels",
          "Write address Channel",
          "Write Data Channel",
          "Write Response Channel",
          "Single Write Transaction",
          "Implementing Write Channel P1",
          "Understanding Burst Type P1",
          "Understanding Burst Type P2",
          "Understanding Burst Type P3",
          "Implementing Write Data Channel",
          "Implementing Write Response Channel",
          "Read Channel",
          "Implementing Read Channel",
          "Verification Environment P1",
          "Verification Environment P2",
          "Verification Environment P3",
          "Design Code",
          "Verification Environment"
        ],
        "Understanding usage of Sequence Library": [
          "Sequence Library P1",
          "Sequence Library P2",
          "Code"
        ],
        "Understanding TLM Analysis FIFO": [
          "Understanding TLM FIFO usage",
          "Demonstration",
          "Code",
          "Usage of TLM Analysis FIFO P1 : Design",
          "Usage of TLM Analysis FIFO P1 : Verification Env P1",
          "Usage of TLM Analysis FIFO P1 : Verification Env P2",
          "Usage of TLM Analysis FIFO P1 : Verification Env P3",
          "Design Code",
          "Verification Environment"
        ]
      },
      "requirements": [
        "Basic understanding of UVM"
      ],
      "description": "Writing Verilog test benches is always fun after completing RTL design. You can assure clients that the design will be bug-free in tested scenarios. As system complexity grows day by day, System Verilog becomes a choice for verification due to its powerful capabilities and reusability, which help verification engineers quickly locate hidden bugs. System Verilog lags behind the structured approach, whereas UVM works hard to form a general skeleton. The addition of the configuration database shifts the way we used to work with the verification language in the past. Within a few years, verification engineers recognized the capabilities of UVM and adopted it as a de facto standard for RTL design verification. The UVM will have a long run in the verification domain; hence, learning about the UVM will help VLSI aspirants pursue a career in this domain.\nThis is a Lab-based course designed such that anyone with the fundamentals of UVM could understand how verification engineers use UVM to perform verification of commonly used RTLs and sub-blocks in FPGA.  The course covers verification of the combinational circuit like combinational adder, Sequential circuit like Data flip-flop, communication interfaces like a clock generator, UART, SPI, and I2C, and Bus protocols like APB, AXI, and demonstration of few useful UVM concepts like a virtual sequencer, TLM analysis FIFO, and a sequence library.",
      "target_audience": [
        "Engineers involved/interested in the verification of RTL's"
      ]
    },
    {
      "title": "Crash Course Digital Electronics",
      "url": "https://www.udemy.com/course/crash-course-digital-electronics/",
      "bio": "Master Digital Electronics and Robotics. Go from Zero to building a real CPU !",
      "objectives": [
        "Core concepts in digital electronics",
        "How a CPU works by building one from scratch",
        "How microprocessors and microcontrollers work and the difference between the two",
        "How softwares are loaded and executed on a microprocessor and a microcontroller",
        "Key building blocks of designing a CPU, a microprocessor and a microcontroller",
        "Memory types like Register, Cache, RAM, SRAM, DRAM, ROM, EEPROM and Flash",
        "The different peripherals that exists in both microprocessor and microcontroller",
        "How has technology progressed starting from the 18th century up to 2022",
        "The different communication protocols that are extensively used in a microcontroller",
        "How operating systems (OS) work and why we need them in the first place",
        "The concepts you will learn can be applied in Robotics, Embedded Software Engineering, Computer Science and of course, Electronics",
        "A solid foundation in the area of digital electronics on which it's easy to build and grow your knowledge"
      ],
      "course_content": {
        "The Basics of Digital Electronics": [
          "Analog vs Digital Electronics",
          "Logic States",
          "Binary Numbers (Conversions and MSB/LSB)",
          "Test your knowledge !"
        ],
        "Logic Gates": [
          "Introduction (From Vacuum Tubes to Transistors)",
          "Fundamental Logic Gates - Part I",
          "Fundamental Logic Gates - Part II",
          "Test your knowledge !"
        ],
        "Negative and Floating Point Numbers, ASCII , UNICODE": [
          "Introduction (Negative Number Representation)",
          "Floating Point Numbers and Letters",
          "Test your knowledge !"
        ],
        "Boolean Arithmetic Using Logic Gates": [
          "Arithmetic Logic Unit (ALU) -Intro",
          "Half-Adder",
          "Full-Adder",
          "8-Bit Adder",
          "Logic Unit (ALU)",
          "Test your knowledge !"
        ],
        "Registers and RAM": [
          "Introduction",
          "AND-OR Latch (Storing 1 Bit)",
          "Gated-Latch",
          "Register Structure",
          "Building an SRAM",
          "Test your knowledge !"
        ],
        "Central Processing Unit - CPU": [
          "CPU-Introduction",
          "Fetch-Decode-Execute Phase",
          "Running our first program",
          "Final Touch - Adding Clock !",
          "Test your knowledge !"
        ],
        "More advanced Instruction Set": [
          "4-bit Instruction Set: LOAD, ADD , STORE instructions",
          "Adding more instructions",
          "Adding Conditional Instructions",
          "Test your knowledge !"
        ],
        "Advanced CPU Design": [
          "Cache Memory - Introduction",
          "Cache Memory - How it Works",
          "Instruction Pipelining",
          "Hazard 1: Out-Of-Order Execution",
          "Hazard 2: Speculative Execution",
          "Superscalar Processor",
          "Multi-Core CPUs",
          "Test your knowledge !"
        ],
        "Early Computers and CPU Architectures": [
          "Earliest form of programming (Punch Cards)",
          "Plug Boards and Memory",
          "CPU Architecture - Von Neumann",
          "CPU Architecture - Harvard",
          "Punched Card Reader",
          "Panel Programming",
          "Test your knowledge !"
        ],
        "How Programming Languages Were Born": [
          "Opcodes and Memory",
          "Machine Language",
          "Assembly Language and Assembler",
          "First high-level programming language (A-0 system)",
          "High-level Programming Languages (Fortran and C)",
          "Compilers (Write Once, Run Anywhere)",
          "Test your knowledge !"
        ]
      },
      "requirements": [
        "Since the course is about digital electronics, to get the full benefit of the course, you will need to follow along and test your knowledge at the end of each chapter.",
        "Basic programming skills in C/C++.",
        "Basis knowledge in analog electronics.",
        "Basic understanding on how to program a microcontroller.",
        "A High School or equivalent understanding of mathematics."
      ],
      "description": "Welcome to Crash Course Digital Electronics!\nCAUTION: If you don't like history, in particular, you are not interested in finding out how the technology has evolved from ancient programming methods to high-level programming languages, or how we scaled from Intel 4004 (first MPU in the world) with a transistor count of just 2300 to modern microprocessors like the M1 microprocessor with a transistor count of a whopping 16 billion, then this course is not for you.\nThis course was developed to teach not only how the fundamental parts of digital electronics work, but how on earth we have reached to build such amazing things? We are going back all the way to 1839 to the Jacquard machine which is considered as the first programmable mechanical computer that was programmed using punch cards, all the way to modern compilers, programming languages, microprocessors, microcontrollers, and operating systems.\nAll the tutorials are built using animation techniques to illustrate the concepts and for ease of understanding (I'm not the best animator by far, but I'm trying really hard !).\n\n\nYour knowledge will be tested! - After finishing a chapter, you will be given a quiz with a plethora of questions (including images and diagrams) you will need to answer. If you get them right, you can be confident that you have understood what I had to say in that chapter.\n\n\nOverall what you will learn after finishing this course :\n- the basics of digital electronics\n- how positive/negative numbers, floating-point numbers, characters are encoded in binary\n- how a CPU works by building one from SCRATCH!\n- how a program is executed on a CPU\n- how to build an external RAM, starting from a 1-bit memory cell and how to scale it up to a bigger one\n- the difference between a CPU, a Microprocessor and a Microcontroller\n- how a Microprocessor and a Microcontroller works\n- the multitude of internal peripherals that can be found inside a modern Microprocessor and a Microcontroller\n- how a compiler works, including linker and linker script file\n- how to program a microcontroller\n- how the different communication protocols work in a microcontroller\n- how does an Operating System works and why do we need them\n\n\nREMEMBER… I'm so confident that you'll love this course that we're offering a FULL money-back guarantee for 30 days! So it's a complete no-brainer, sign up today with ZERO risk and EVERYTHING to gain.",
      "target_audience": [
        "People who are interested in how on earth the digital world works.",
        "Electrical or Computer Engineering students that would like to see what the major is all about end to end as a head start in their degree.",
        "Students who are curious to find out the history behind all the modern programming langauges, compilers and microprocessors.",
        "Individuals who want to demistify the electronics world."
      ]
    },
    {
      "title": "Introduction to Raspberry Pi 4",
      "url": "https://www.udemy.com/course/introduction-to-raspberry-pi-4/",
      "bio": "Learn to create software & hardware projects using Raspberry Pi 4 & Python",
      "objectives": [
        "Get deep knowledge about the hardware features of the Raspberry Pi 4 and its applications",
        "Become confident in setting up the hardware and software for the Raspberry Pi 4 and troubleshooting",
        "A basic understanding of Linux and Python Programming",
        "Basics of physical computation, and would be able to interface a wide variety of sensors and actuators like LED, Button, Light Sensor, Motion Sensor, Motors, Ultrasonic Sensors, and much more",
        "Learn about UART, I2C and SPI Protocols on the Raspberry Pi 4 using hands-on projects",
        "Control GPIO pins wirelessly using Bluetooth and be able to build basic IoT projects using the Cayenne Platform"
      ],
      "course_content": {},
      "requirements": [
        "Good Logical Thinking",
        "Basic Understanding of Electronics"
      ],
      "description": "June 2022 Update:\nAdded a New Lecture With Updated Steps for Headless Installation using Raspberry Pi Imager App\nOverview of the new Raspberry Pi 64 Bit OS\nUpdated Backup & Restore Method for Pi\nSeptember 2020 Update\nImportant Update After the Release of Raspberry Pi OS - Changes in VNC Viewer Setup\nFAQ on Troubleshooting the Raspberry Pi 4\nJuly 2020 Update\nIncluded Documentation to implement Remote GPIO Control over Bluetooth without any error.\n\n\nHello learners, Welcome to MAKERDEMY’s \"Introduction to Raspberry Pi 4\" course. This is an introductory course about Raspberry Pi 4, the credit-card sized computer, which is the latest & greatest in the line-up from the Raspberry Pi foundation. As this is a beginner level course, no prior knowledge of programming or electronics is required to start. If you are a hobbyist, a teacher, or an absolute beginner who wants to get introduced to the world of physical computing using the Raspberry Pi 4, this fully self-contained course is meant for you. We have tailored this course by giving equal importance to projects as well as the concepts. Furthermore, with numerous custom-made illustrations and animations, we have set the standard in terms of production quality. All so that you can have a terrific learning experience.\nBy the end of the course, you will get deep insights into the hardware features of the Raspberry Pi 4. You will learn to configure and set up the software properly and also learn to do proper troubleshooting. You will become competent with Linux & Python programming. You will learn to work with several actuators & sensors like LED, Button, Light Sensor, Motion Sensor, Motors, Ultrasonic Sensors, and much more. You will be confident in working with UART, I2C, and SPI Protocols on the Raspberry Pi 4. You will also learn wireless communication using Bluetooth and implement an IoT project using the Cayenne Platform.\nSo, come join me in this introductory course on the Raspberry Pi 4. I am looking forward to being your instructor and hearing about all the wonderful projects you were able to build after completing this course.",
      "target_audience": [
        "A hobbyist who wants to learn to work with the latest Raspberry Pi",
        "A teacher who wants to get a head start into the world of Physical computing for guiding his or her students",
        "A total beginner, who wants to do projects to solve problems using the Raspberry Pi"
      ]
    },
    {
      "title": "Controller Area Network-Indepth analysis of CAN BUS/Protocol",
      "url": "https://www.udemy.com/course/controller-area-network-indepth-analysis-of-can-busprotocol/",
      "bio": "Automotive Communication Protocol - CAN - Covering both Theory and Practicals",
      "objectives": [
        "Introduction to Controller Area Network - Automotive CAN Protocol",
        "Story of CAN Bus",
        "Serial Communication Concepts, Introduction and Overview",
        "Serial Communication Protocol - UART - Indepth Coverage",
        "Serial Communication Protocol - SPI - Indepth Coverage",
        "Serial Communication Protocol - I2C - Indepth Coverage",
        "Analysis of CAN Protocol - Fundamental Concepts",
        "Further Analysis of CAN Protocol - Frame formats, Error Handling, Differential Bus Concept, Termination Resistor etc",
        "Hands on Practice Session - CAN Protocol Self Learning Kit",
        "Hands on Practice Session - Building a CAN network",
        "Hands on Practice Session - vCAN Bus Analyzer - Monitoring and Controlling of CAN network",
        "Challenges faced by CAN professionals, need for Higher Layer Protocols for CAN, Overview of J1939, ARINC 825"
      ],
      "course_content": {
        "Introduction - Story and background of CAN Bus": [
          "Story and background of CAN Bus"
        ],
        "Embedded Serial Communication - Overview": [
          "Fundamentals of Embedded Serial Communication Protocols"
        ],
        "Embedded Serial Communication Protocol - UART": [
          "UART - Story and Background",
          "RS232 - In UART"
        ],
        "Serial Peripheral Interconnect - SPI Bus": [
          "SPI Bus - Introduction and Overview",
          "SPI Bus - Block Diagram and How it works"
        ],
        "Inter Integrated Circuit - I2C Bus": [
          "I2C Bus - Introduction and sequence of operation",
          "I2C Bus Core concepts - Wired AND, Pull Up resistor, Bus Arbitration analysis.",
          "I2C Bus - Packet Format"
        ],
        "Controller Area Network - CAN Protocol - In depth Theoretical Analysis": [
          "Evolution of Automotive CAN Bus",
          "Fundamental Core concepts of CAN Protocol",
          "Further analysis of CAN Protocol",
          "CAN Protocol - Final Topics"
        ],
        "CAN based Higher Layer Protocols - Overview of J1939": [
          "Need for Higher Layer Protocols in CAN, Overview of J1939, Overview of ARINC 825"
        ],
        "Hands-On with upgraded CAN Protocol Practice Kit": [
          "Gain Hands-On CAN experience with CAN Protocol Practice Kit"
        ],
        "CAN Communication through Coding - Embedded C code for STM32 Microcontroller": [
          "Embedded C Coding for CAN communication on STM32 microcontroller"
        ],
        "CAN Protocol - Hands On Practice - Learn by doing": [
          "CAN Protocol Self Learning Kit - Introduction",
          "Building a CAN network",
          "Analyzing a CAN network"
        ]
      },
      "requirements": [
        "Basic Communication Theory and Digital Concepts"
      ],
      "description": "This course is about Automotive Communication Protocol - CAN Bus.\nController Area Network or CAN Protocol is covered in great detail, starting from the story and background, then moving to the early protocols that existed before CAN, limitations of those early pre-CAN protocols, demands of automotive domain and eventual invention of CAN Bus.\nFundamental concepts of CAN like arbitration, broadcast mechanism, differential bus concept, noise cancellation, termination resistor, frame format & types etc are all discussed with thorough analysis.\nWe also cover challenges of working with CAN networks for CAN professionals, need for higher layer protocols for CAN and also overview of J1939, ARINC 825 Protocols.\nHere both theory and practical parts are covered in depth.\nThe practical part is covered with the help of - CAN Protocol Self Learning Kit- Which consists of CAN Bus Analyzer, Configurable CAN Nodes and applicable software.\nI have conceptualized and developed this Kit for this specific purpose of providing a cost effective hands on learning platform for students and professionals.",
      "target_audience": [
        "Engineering Professionals",
        "Automotive Enginers",
        "Automobile Engineers",
        "Engineering Students",
        "Embedded Systems Engineers",
        "Electrical Engineers",
        "Communication Engineers",
        "Networking Engineers",
        "Automobile Technicians",
        "Harness Technicians"
      ]
    },
    {
      "title": "PLC Fundamentals (Level I)",
      "url": "https://www.udemy.com/course/plc-programming-from-scratch/",
      "bio": "This course will give a person with no prior experience the basic tools necessary to create a PLC program from scratch.",
      "objectives": [
        "By the end of this course, you will be able to create a PLC program from scratch.",
        "The primary and overall objective of this course is to give a novice an understanding of PLC programming, ladder logic, and the inner workings of a standard HMI (Human-Machine Interface).",
        "Students will learn the difference between digital and analog signals and how to bring them into a PLC, process them, and send them back out.",
        "Students will be familiarized enough with a sufficient variety of ladder logic instructions to create a complete PLC program from scratch.",
        "Students will explore basic, standard controls techniques for things like HOA control, level control, pump control, and (on at least an introductory level) PID control loops.",
        "Students will develop an understanding of alarm and notification programming, and the relevant considerations to safety and operator usability.",
        "Students will be introduced to HMI development and given a general understanding of how an HMI program works."
      ],
      "course_content": {},
      "requirements": [
        "There is no software, hardware or experience required in order to complete this course, but practicing the techniques discussed on an emulator or live PLC are necessary steps toward eventual mastery."
      ],
      "description": "This course (which almost ALWAYS costs less on PLC Dojo) is designed to equip the novice with no prior PLC programming experience with the basic tools necessary to create a complete PLC program using ladder logic common to most current platforms.\nUsing the Rockwell software RSLogix 500 and FactoryTalk View Studio, we will be covering such topics as general controls, digital and analog IO, ladder logic programming, alarm / notification handling, HMI, emulation, best practices and more.\nIn the end, we will go through an entire, working PLC program and HMI line by line to solidify comprehension of the learning objectives.\n\nWhat's covered in each of the five PLC courses I teach here and on my own PLC Dojo site?\n\n\nThis course, (PLC Fundamentals) teaches you how to program with the focus on ladder logic, which is the most popular PLC programming language.  The goal is to teach you everything you need to know to make a PLC do what you want it to do.  You are also given all the software necessary to both CREATE and RUN your own programs live - right on your own computer. For some people, that's all they really need.\n\n\nBut for the people who want to really master PLC programming, they have the option of continuing into the advanced material with me.\n\n\nApplied Logic (Level 2) forces you to take what you've learned and solve problem after progressively harder problem unassisted.  You get a spec and are told simply: \"Make it work, and don't progress until you have.\"  After, you get to watch me solve each one as well.  By the end, you don't just know how to program - you are a PROGRAMMER.\nProcess Visualization (Level 3) gives you both knowledge and experience in FIVE different HMI / SCADA development environments.  By the end, you've created several COMPLETE visualization (screen) projects that you can actually run on your own computer (and SHOW PEOPLE in an interview) with no additional hardware.\nIEC Paradigms (Level 4) is only for the heavyweights.  This course teaches you how to program using all five IEC programming languages (plus one more) in multiple environments.  There are projects as well, so by the end, you have seen it all and DONE it all as well.  There won't be anything anybody can show you that you won't already be familiar with.\nTIA Portal Master Project (Level 5) is the culmination of everything. In that course, you'll program an entire power plant using all five PLC programming languages (in PARALLEL!) with a full HMI. It's a massive and complex project that really showcases your talents in an interview!",
      "target_audience": [
        "This course is written for anybody who wants to become functional with ladder logic as quickly as possible."
      ]
    },
    {
      "title": "Mastering Arduino by Building Real World Applications",
      "url": "https://www.udemy.com/course/mastering-arduino-uno/",
      "bio": "Learn Arduino Programming | Sensor Interfacing | IoT | Arduino Projects | Wireless Bluetooth",
      "objectives": [
        "Learn how to use latest Arduino IDE 2.0 and write arduino programs",
        "Interfacing Sensors, Actuators for Controlling and Monitoring",
        "Build several Arduino Mini Projects to get more inside",
        "Get hands-on experience with Arduino Programming (C/C++)",
        "Sending Data to IoT Cloud Platform and Create Android App",
        "Build real world Arduino Projects such as Weather Monitoring, Smart Home.",
        "Design various Arduino Circuits which uses Ethernet shield, Bluetooth Module"
      ],
      "course_content": {
        "Introduction": [
          "Introduction Arduino",
          "List of Components and Parts",
          "Setup and Install Arduino IDE",
          "Latest Arduino IDE Version 2.1 Features",
          "How to Setup Arduino Circuit on Breadboard"
        ],
        "Control Digital Devices": [
          "Digital Output to Control LED",
          "Digital Input to Add Switches"
        ],
        "Programming Basics": [
          "Variables and Datatypes",
          "Making Decision with Programming",
          "Switch Case Statement",
          "For Loops in Programming",
          "While Loops in Programming",
          "Functions and Routines"
        ],
        "Digital & Analog Sensors": [
          "Serial Communication Arduino and PC",
          "Analog Temperature Sensor LM35 Interfacing",
          "Digital PIR Passive IR Motion Sensor",
          "Pulse Width Modulation (PWM)"
        ],
        "LCD Display Programming": [
          "Introduction of LCD Display",
          "Program Character LCD Display"
        ],
        "LDR- Measure Light Intensity": [
          "Introduction of LDR",
          "Setup Circuit of Light Dependent Resistor",
          "Reading Light Intensity using LDR Sensor"
        ],
        "SERVO Motor- Motion Control": [
          "Introduction of SERVO Motors",
          "Connect and Control Servo with Arduino Uno",
          "How to use Tester to Test and Calibrate Servo Motors",
          "Types of Servo Motors-Position and Continous rotation"
        ],
        "Internet and Ethernet Protocol": [
          "Introduction of Arduino Ethernet Shield",
          "Build Webserver using Ethernet Shield"
        ],
        "Send Data to Cloud using Arduino": [
          "Introduction of ThingSpeak",
          "Setup a ThingSpeak Channel",
          "Connect Arduino and ThingSpeak Server"
        ],
        "Bluetooth HC-05 Module and Mobile App": [
          "Introduction of HC-05 Bluetooth Module",
          "Circuit Connection and Programming",
          "Create MIT App Inventor Project",
          "Send and Install Android App to Phone"
        ]
      },
      "requirements": [
        "Arduino Uno Board",
        "Have the desire to learn, try and test",
        "You can create a small circuit with breadboard",
        "Knowledge of a multimeter, breadboard, Jumper wires will be great (Not Must)",
        "A comprehensive list of required tools and parts is available in the first section of the course, free to access"
      ],
      "description": "Learn Arduino Programming to build a working prototype of your Next IDEA\nThis course is for beginners to advance Arduino Users. It doesn’t matter if you already know C Programming. We will begin our journey right from the basics of Arduino Uno. In the first few sections, we will brush-up the concept of C Programming in the context of Arduino. Later, we will make some Arduino Projects. The concept learned in the early part of the course will help us take projects to the next level (advance).\nShort Description:\n\"The Biggest objective of this course is to give you hands-on experience with Arduino Uno. This course will not only help you learn Arduino Programming but also help you understand the electronic circuit. We'll build several projects which will motivate you to learn concepts of electronics and hardware design. We have covered various popular interfaces like Bluetooth, Ethernet, etc. with example projects”\nThis course is a step-by-step guide to setting up Arduino IDE and electronics circuits for Programming. The course starts with very basic concepts and ends up making complex Arduino projects. We will set up every circuit from scratch and write Arduino programs for it. We’ll spend enough time in the beginning, to get the basics right. This will save time in the long run to get you confident to solve complex Arduino programming tasks.\nLater, we'll be building some mini projects using LED, Switches, Sensors (Temperature/Humidity/Light Intensity), PIR Motion Sensor, Servo Motors, Character LCD Display Module, IR Sensor, Ethernet Shield, Wireless ZigBee Module, Bluetooth Module (HC-05), Streaming live data to IoT Cloud Platform like ThingSpeak and many more. These example projects will provide you with hands-on experience. After taking this course you’ll feel confident working with embedded systems projects.\nIn the end, we will connect all the bits and pieces we have learned so far to deliver bigger projects. These Arduino Projects will Include Remote Weather Monitoring Solution, Smart Home Automation, Wireless Sensor Network, etc.",
      "target_audience": [
        "Anyone curious about Arduino & Microcontroller Programming",
        "People with no experience in Electronics and Software Development",
        "Students, Arduino Makers and Professionals looking to build Product Prototype",
        "Arduino makers who wish to improve their programming skills and knowledge"
      ]
    },
    {
      "title": "Learn Siemens S7-300 PLC, Simatic Manager Step 7 & WinCC HMI",
      "url": "https://www.udemy.com/course/learn-siemens-s7-300-plc-simatic-manager-and-wincc-hmi/",
      "bio": "Learn Siemens Simatic Manager Step 7 v5,5, S7-300 PLC & WinCC Flexible HMI with Ladder logic, FBD & STL [English]",
      "objectives": [
        "Students will Learn PLC Hardware, Wiring and Communication with Siemens S7-300",
        "Students will learn Siemens Simatic Manager PLC Software from Scratch and practice programming concepts",
        "Students will learn interfacing S7-300 PLC with PC through MPI Interface",
        "Students will learn PLC Programming with Ladder logic, Functional Block Diagram and Statement List",
        "Students will learn HMI Programming with Siemens WinCC Flexible",
        "Students will practice programming concepts with Factory I/O Applications",
        "Students will be provided with PLC and HMI trial software's for free"
      ],
      "course_content": {},
      "requirements": [
        "Basic Knowledge of Computers and PLC"
      ],
      "description": "Automation Play brings you an interactive and practical online certified course on Siemens S7-300 PLC with excellent content and hands on experience for beginners as well as professionals. This course covers the basics of Simatic Manager and S7-300 PLCs (I'd suggest for absolute beginners to do Siemens TIA Portal course first if they have no knowledge of PLCs)\nI designed this course for beginners as well as professionals to enable them learn PLC Programming on Siemens PLC using Simatic Manager. S7-300 is old legacy system but still in place in many industries. I have covered S7-1200 and S7-1500 latest series in depth in other courses as well.\nFor this course you don’t need hardware at all and i'll provide Siemens PLC software which works for 12-Days (trial version) along with Factory I/O (30-days version). However, i’ll cover hardware as well for students who wish to practice on S7-300 PLCs themselves.\nThe course will cover basic concepts of PLC programming, hardware and interfacing techniques to groom students in the field of Industrial Automation. The course will teach students PLC Programming techniques based on Siemens.\nI’ll be using S7-300 PLC hardware just to enable students understand the hardware configuration, wiring and troubleshooting concepts however mostly we will be using simulation mode.\nCourse Content\nCourse Overview: Introduction and Objectives\nIntroduction to Siemens PLC\nSiemens PLC S7-300 Hardware and Software Setup (Simatic Manager Step 7 v5.5, PLCSIM v.5.4 and WinCC Flexible)\nPLC Software;s: Simatic Manager Installation, Activation and Simulation\nSimatic Manager Complete Overview\nSiemens S7-300 PLC Wiring / Hardware Configuration and MPI Communication\nPLC Wiring: Source/Sink – Discrete Devices – Analog Devices\nProgramming with Ladder Logic\nProgramming with Functional Block Diagram\nProgramming with STL\nProgramming – Relay Logic and Bit Logic Instructions (NO/NC/OUT/Set/Reset/Inv and more)\nProgramming – Timers / Counters / Move / Jump & Label Instructions\nProgramming – Comparator’s / Maths / Convert Instructions\nProgramming – Analog Scaling / Un-Scaling Instruction\nProgramming – Creating your own functions / function blocks (FC/FB)\nProgramming – Real Time Applications\nFactory I/O – 3D Factory Automation Applications\nPLC – Diagnostics and Troubleshooting (Diagnostic Buffer / Monitor Table / CPU Faults)\nWinCC HMI - Software Installation and Simulation\nWinCC HMI - Basic and Advanced Elements\nWinCC HMI - Alarms and Recipes\nWinCC HMI - Data Trends\nBonus Content: Introduction toSiemens TIA Portal and S7-1200 PLC\nSoftware's\nSiemens Simatic Manager and PLC SIM (PLC) -Trial\nFactory I/O (For Real Time Factory Automation) – Trial\nDeliverable\nTraining Lectures\nFree Software’s – Trial\nLifetime Access to the course\nLearning Outcomes\nIntermediate knowledge about PLCs and HMIs\nHands on Programming Experience\nUnderstanding and implementation of Industrial Automation Systems\nUnderstanding of multiple PLC Programming Languages (Ladder/FBD/STL)\nFurther Details:\nStudents can enroll in Siemens S7-1200, TIA Portal and WinCC or Siemens WinCC SCADA course afterwards\nCourse are available on Automation Play",
      "target_audience": [
        "Engineering Students",
        "Engineers",
        "Technicians",
        "Maintenance Engineers"
      ]
    },
    {
      "title": "Machine Learning (Python) for Neuroscience Practical course",
      "url": "https://www.udemy.com/course/machine-learning-python-for-neuroscience-practical-course/",
      "bio": "Specially applied course for Machine Learning with Python for Neuroscience, short way to start use EEG in life",
      "objectives": [
        "Understanding Machine Learning for EEG feature extraction",
        "Python Programming for Machine Learning : Learners will receive scripts in Python for machine learning tasks",
        "ML for EEG Data: Learners will acquire the skills to make feature extraction from EEG data",
        "Applying Advanced Machine Learning Methods: Learners will be able to apply advanced ML methods with scikit-learn"
      ],
      "course_content": {},
      "requirements": [
        "Knowledge of working with Python, Numpy, Pandas, Scipy etc",
        "Gmail",
        "Knowledge of signal processing for neuroscience",
        "Knowledge of  Machine Learning",
        "Knowledge about neuroscience"
      ],
      "description": "Lecture 1: Introduction\nHere you will find a short introduction to the course. We outline the objectives, structure, and practical outcomes. This sets the stage for hands-on experience in machine learning with EEG signals.\nLecture 2: Connect to Google Colab\nThis chapter provides a step-by-step guide on how to connect to and work in Google Colab. You’ll learn how to set up your environment, install required libraries, and ensure you are ready to run the code examples provided throughout the course.\nLecture 3: Hardware for Brain-Computer Interface\nThis chapter covers the essential hardware used in EEG-based brain-computer interfaces.\nLecture 4: Data Evaluation\nWe dive into evaluating the quality of your EEG data. This chapter explores techniques to inspect, clean, and annotate EEG recordings, ensuring that your data is reliable before moving forward with analysis or machine learning tasks.\nLecture 5: Prepare the Dataset\nLearn how to transform raw EEG signals into structured datasets suitable for machine learning. This chapter includes labeling, segmenting, and feature extraction techniques—critical steps for successful model training and testing.\nLecture 6: Machine Learning for Stress Detection via EEG\nThis is the core of the course. You’ll learn how to apply machine learning algorithms to classify stress states from EEG data. This includes model selection, training pipelines, and evaluation metrics using libraries such as Scikit-learn.\nLecture 7: Hyperparameter Tuning\nImproving your model’s performance requires fine-tuning. This chapter covers strategies for hyperparameter optimization using grid search, ensuring you get the most accurate predictions from your EEG-based models.\nLecture 8: Conclusion, Future Steps, and Collaboration\nIn the final chapter, we wrap up the course and discuss possible next steps. and opportunities to collaborate with the broader BCI and neuroscience community.",
      "target_audience": [
        "Individuals with a strong interest in EEG and brain-computer interfaces who want to explore the technical aspects of EEG signal processing as a hobby or personal project.",
        "Graduate and advanced undergraduate students in fields such as neuroscience, biomedical engineering, data science, and psychology, as well as educators looking to integrate EEG signal processing into their curriculum.",
        "Data Scientists and Machine Learning Practitioners: Those who are interested in applying data science and machine learning techniques to biosignals, with a specific focus on EEG data.",
        "Biomedical Engineers and Technologists: Individuals working in the biomedical field who need to process and analyze EEG data as part of their work in developing medical devices or diagnostics.",
        "Neuroscientists and Researchers: Professionals and academics who want to leverage Python for analyzing EEG data to advance their research in neuroscience and related fields."
      ]
    },
    {
      "title": "Verification Series Part 7:SystemVerilog Functional Coverage",
      "url": "https://www.udemy.com/course/systemverilog-functional-coverage-for-newbie/",
      "bio": "Step by Step Guide from Scratch",
      "objectives": [
        "Usage of Functional Coverage in Verification",
        "Implicit and Explicit Bins, Default bins",
        "Illegal bins, Ignore bins, WIldcard bins Default bins",
        "Covergroup, Sampling events, Reusable Covergroup",
        "Transition bins and Cross Coverage",
        "Usage of Functional Coverage in Verilog and SystemVerilog TB",
        "Demonstrations of Functional Coverage with Counters, Priority Encoders, Adders, FIFO, SPI and few other RTL's"
      ],
      "course_content": {},
      "requirements": [
        "Fundamentals of Verilog, Digital Electronics, SystemVerilog"
      ],
      "description": "The verification process is becoming complex and time-consuming day by day with advances in the Hardware Description Languages and IPs. HDL has added capabilities that allow the engineer to Design and write Testbench for complex systems. But verifying designer intent and deciding set of right stimuli to meet the Verification plan is not always easy with HDL. Hence System Verilog introduces assertions and Coverage to fulfill this requirement by adding independent constructs to language. SystemVerilog assertions allow us to verify Designer intent in both Temporal and Non-Temporal domains. Functional Coverage act like feedback for the stimulus we are sending to DUT so that we could reach to best stimulus for verifying the plan in the least amount of time.\nThis course covers the fundamentals of different types of bins viz, Implicit bins, Explicit bins, Wildcard bins, Ignore bins, default bins, illegal bins with a demonstration of each of them in RTL. Fundamentals of Cover group, Reusable Covergroup, and different Sampling methods viz. event, sample() method, and User-defined Sample Method are discussed in detail. Functional Coverage gives us the ability to verify the relation between the signal by using Cross Coverage and detailed discussion on Cross coverage with different combination filtering strategies are covered in detail. Finally, Transition bins provide temporal abilities to Functional Coverage is also discussed in detail with projects demonstrating the usage of Functional Coverage in Verilog and SystemVerilog Testbench.",
      "target_audience": [
        "Anyone interested in adopting Functional Coverage in the Verification process to generate Stimulus meeting Verification plans"
      ]
    },
    {
      "title": "Embedded Software Development using C++",
      "url": "https://www.udemy.com/course/embedded-software-development-using-cpp/",
      "bio": "Object-oriented design and HAL application programming on STM32, ARM Cortex-M",
      "objectives": [
        "Students will be able to design and develop libraries using C++ to interface the STM32 with external devices.",
        "Students will be able to develop embedded software using STM32Cube HAL drivers and C++",
        "Students will be able to apply object-oriented design principles when solving embedded software problems",
        "Students will be able to design, develop and run games on an STM32 microcontroller e.g. Tic Tac Toe",
        "Students will be able to design and develop manual and autonomous robot cars using the STM32 microcontroller",
        "Students will be able to design and develop embedded software by crafting algorithms and deriving workable codes from those algorithms",
        "Students will be able to use the Keil uVision IDE for embedded C++ application development",
        "Students will be able to use the STM32CubeIDE for embedded C++ application development",
        "Students will be able to port libraries and application code from Keil to STM32CubeIDE with minimal effort"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Resources for the course",
          "Purchasing the components"
        ],
        "Refresher": [
          "Bit Manipulation",
          "Bit Manipulation",
          "CMSIS",
          "CMSIS",
          "HAL",
          "Understanding the HAL, CMSIS and hardware registers",
          "What is Object-oriented programming about?",
          "Overview of the STM32 ecosystem"
        ],
        "Servo Motor Library Development": [
          "Introduction to Servo motor",
          "Servo: Creating Keil uVision Project Files",
          "Servo: CubeMx Code Generation",
          "Servo: Servo Class Part 1",
          "Servo: Servo Class Part 2",
          "Timer ARR register calculation",
          "Servo: Demonstration of code developed in previous lecture",
          "Servo Motor Source Code",
          "Driving a Servo Motor"
        ],
        "HC05 Library Development": [
          "Introduction to HC05 Bluetooth module",
          "HC05: CubeMx Code Generation",
          "HC05: HC05 Class Part 1",
          "HC05: HC05 Class Part 2",
          "HC05: Demonstration of code developed in previous lecture",
          "HC05 Source Code"
        ],
        "Project 1: Bluetooth Controlled Servo": [
          "Bluetooth Controlled Servo",
          "Demonstration of code developed in previous lecture",
          "Bluetooth Controlled Servo Source Code"
        ],
        "LCD Library Development": [
          "Introduction to 20x4 LCD",
          "Intro to LCD data and instruction transfer",
          "Understanding the DDRAM memory and 4-bit mode instructions",
          "Enable-pulse and Software initialization sequence",
          "LCD Address Codes",
          "LCD Class design",
          "LCD: LCD Class Intro",
          "LCD: Completing the constructor",
          "LCD: Write Nibble",
          "LCD: Setting Cursor Position",
          "LCD: Print Method (Characters)",
          "LCD: Display Example 1",
          "LCD: Demonstration of previous lecture",
          "Integer to String Algorithm Part 1",
          "Integer to String Algorithm Part 2",
          "LCD: Integer to String function",
          "LCD: Print Method (Integers I)",
          "LCD: Print Method (Integers II)",
          "LCD: Display Example 2",
          "LCD: Demonstration of previous lecture",
          "LCD: Display Example 3",
          "LCD: Demonstration of previous lecture",
          "LCD Source Code"
        ],
        "Keypad Library Development": [
          "Introduction to 4x4 Keypad",
          "Keypad: Exercise",
          "Keypad: Keypad Class (Constructor)",
          "Keypad: Keypad matrix (2D array)",
          "Keypad: Selecting a row",
          "Keypad: Getting a long keypress",
          "Keypad: Example 1 (with demonstration)",
          "Keypad: De-bouncing",
          "Keypad: Getting a short keypress",
          "Keypad: Example 2 (with demonstration)",
          "Keypad Source Code for Long Keypress",
          "Keypad Source Code for Short Keypress",
          "Assignment: Keypad + LCD"
        ],
        "Project 2: Tic Tac Toe": [
          "Introduction",
          "The Hardware",
          "Game Intro",
          "Game menu",
          "Demo video: Rules",
          "Demo video: Start the game",
          "Sample gameplay",
          "Tic-tac-toe Project Source Code"
        ],
        "HCSR04 Library Development": [
          "Introduction to HCSR04 sensor",
          "HCSR04: Trigger Pin Initialization",
          "Application of PWM input mode to the Echo pin",
          "HCSR04: CubeMx Code Generation",
          "HCSR04: HCSR04 Constructor",
          "HCSR04: HCSR04 Distance Measurement",
          "HCSR04: Sample Application",
          "HCSR04 Source Code",
          "HCSR04: Exercise with demo"
        ],
        "DC Motor Library Development": [
          "Introduction to the L298N motor driver",
          "More about the L298N motor driver",
          "TT gear motor",
          "DC Motor Library",
          "Exercise: Developing an application to drive a DC motor"
        ]
      },
      "requirements": [
        "An STM32 board",
        "A 4x4 Keypad Matrix",
        "A 20x4 LCD",
        "10k Potentiometer",
        "A Solderless breadboard",
        "Connecting wires",
        "L298N motor driver",
        "4 Wheel car chassis",
        "HC05 bluetooth module",
        "SG90 servo motor",
        "4 Wheels",
        "4 TT DC gear motor",
        "3 HC-SR04 ultrasonic sensor",
        "12V battery",
        "Basic programming knowledge (Embedded C would be helpful)",
        "Knowledge of the STM32Cube HAL programming (GPIO drivers)"
      ],
      "description": "The Embedded Software Development using C++ course demonstrates the application of object-oriented programming (OOP) in embedded systems. C++ is the language of choice because it has facilities that make OOP easy to implement and it also allows programming at the hardware level. As feature-rich and fantastic as C++ is, it is easy to misuse and this might cause code bloat. In this course, specific features of the language have been chosen to ensure the programs developed obey the following:\nSimplicity\nReadability\nMaintainability\nCore concepts of OOP such as abstraction, encapsulation and polymorphism are covered. The course aims to present this style of programming as simple and friendly as possible hence inheritance isn't covered. In order to make library and application development relatively faster, the STM32Cube HAL APIs are used and direct register-level programming is reduced to a minimum. The STM32F401RE Nucleo Board is used throughout this course and the Keil uVision5 MDK and STM32CubeIDE are used for software development and debugging. Since the course predominantly uses the HAL, then anyone taking the course can use a different STM32 microcontroller and run the same code (with few modifications) due to the portability of the HAL.\nMost embedded software are written in C and with a procedural approach to programming. C++ isn't a replacement for C and neither is OOP a replacement for procedural programming. But C++ does provide some features that our embedded software can benefit from and if used judiciously, it would be rewarding for application development. In the end, it is a matter of preference and use case and this course ensures the applicability of the language and programming paradigm (OOP) are reflected and appreciated.\nAs a student of this course, you'd be exposed to the following:\nObject-oriented programming on an embedded system and the following will be applied:\nClasses, Encapsulation, Abstraction, Polymorphism\nPrivate and Public keywords\nPointers and References\nType safety\nDevelopment of libraries using C++, STM32Cube HAL drivers and information from documentations to interface the STM32 microcontroller with external components like:\n20x4 LCD\n4x4 Keypad\nSG90 Servo\nHC05 Bluetooth Module\nHC-SR04 Ultrasonic Sensor\nL298N Motor Driver\nCode generation using STM32CubeMx as well as modification and customization of the CubeMx generated code to suit the application being developed.\nHAL GPIO, UART and Timer programming on the STM32\nUse of timers for PWM signal generation as well as PWM input capture for determination of an input signal's duty cycle\nSoftware design prior to the development of a library or application code\nCode testing and debugging on Keil uVision 5 and STM32CubeIDE\nAs this course is project-based, students will build at least two projects, some of which include:\nA Tic-tac-toe game console\nAn Autonomous car\nI can guarantee that anyone that enrolls for this course will be able to build embedded software for projects with little to no supervision after completing this course. Also, as a graduate of this course, you'd be able to design and develop simple, readable and maintainable embedded software for several projects with well defined requirements using C++.\nTo get the best out of the course, students are required to purchase some hardware components and install some software in order to follow the lectures, exercises and projects with ease.\nSoftware requirements:\nKeil uVision5 MDK\nJava runtime environment (required for the STM32CubeMx)\nSTM32CubeMx\nSTM32CubeIDE (for boards without HAL support in Keil uVision)\nStudents are also expected to be familiar with STM32 programming at a basic level i.e. understanding of basic peripherals and their registers (GPIO, UART and Timers in normal counting mode). Knowledge of embedded C would also be helpful. Either Keil uVision 5 or STM32CubeIDE can be used. For boards without HAL support in the Keil uVision toolchain (e.g. STM32 bluepill), STM32CubeIDE can be used.\nThe teaching and learning process in this course goes beyond the lectures and exercises. Students can always communicate with the instructor via the Q/A section. This section is very active as questions will be answered within 24 hours.",
      "target_audience": [
        "Students, Engineers and C++ programmers that want to apply OOP techniques to embedded systems programming",
        "Embedded systems enthusiasts that want to develop custom libraries for an STM32 microcontroller using C++",
        "Engineers that want to try a combination of C++ and STM32Cube HAL for quick application development",
        "Students, Engineers and Programmers that want to explore embedded software programming from a different perspective i.e. methods other than Embedded C",
        "Students, Engineers and Programmers that want to design and develop embedded software with the aid of projects"
      ]
    },
    {
      "title": "Hands-On ZYNQ: Mastering AXI4 Bus Protocol",
      "url": "https://www.udemy.com/course/hands-on-zynq-mastering-axi4-bus-protocol/",
      "bio": "Create Verilog and C codes for implementing the AXI4 bus protocol on ZYNQ FPGA",
      "objectives": [
        "Use Xilinx AXI4-based IP Cores",
        "Create your own AXI4-based IP Cores from scratch",
        "Create an AXI4-based Hardware Accelerator IP Core (GCD case study)",
        "Create an AXI4-based Transceiver IP Core (UART case study)"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Vivado Installation"
        ],
        "===== Part I: Use Xilinx AXI4 IP Cores =====": [
          "===== Part I: Use Xilinx AXI4 IP Cores ====="
        ],
        "Chapter1: AXI4-Lite GPIO": [
          "Create the Hardware Design",
          "Test the Hardware Design using XMD",
          "Create the C Program",
          "Add the Internal Logic Analyzer IP Core",
          "Debug the Hardware Design"
        ],
        "Chapter 2: AXI4-Stream Data FIFO": [
          "Simulate the Xilinx IP Core",
          "Create the Hardware Design",
          "Create the C Program"
        ],
        "===== Part II: Create AXI4 IP Cores from Scratch =====": [
          "===== Part II: Create AXI4 IP Cores from Scratch ====="
        ],
        "Chapter 3: AXI4-Lite Shift Register": [
          "Create the Shift Register in Verilog",
          "Create the AXI4-Lite Interface in Verilog",
          "Create the Hardware Design and C Program"
        ],
        "Chapter 4: AXI4-Stream Multiplier": [
          "Create the AXI4-Stream Multiplier in Verilog",
          "Create the AXI4-Lite to AXI4-Stream Interface in Verilog",
          "Create the AXI4-Stream to AXI4-Lite Interface in Verilog",
          "Create the Hardware Design and C Program"
        ],
        "Bonus: Are you interested in learning AI Accelerator like Google TPU?": [
          "From basic Verilog to Zynq interface to miniature Google TPU"
        ]
      },
      "requirements": [
        "Basics of Digital Systems",
        "HDL (Verilog) and C/C++ programming experience",
        "Vivado WebPACK (free) Edition 2016.04 (recommended) or higher",
        "A ZYBO development board (or other ZYNQ boards)"
      ],
      "description": "Note: Take this course if you want save money in training costs of similar contents. The Official Xilinx Traning Courses cost typically from 600 USD to 4000 USD. This course is not only teaches the Zynq Processing System (PS) but also the Programmable Logic (FPGA), and the interface between them.\n\n\nPublished (20 Apr 2019): The GCD accelerator and UART sections will be added later, and the course price will be increased, when those sections are added.\nUpdate 1 (22 Apr 2019): English Subtitles/CCs are enabled for this course\nUpdate 2 (02 Jan 2020): Add bonus lecture.\n\n\nWhat is AXI?\nAdvanced eXtensible Interface (AXI) is an industry-standard, system bus for the connection between CPU and peripheral in System-on-Chip (SoC) design. Today AXI version 4 (AXI4) is used in many SoC that use ARM Cortex-A processors, such as Qualcomm Snapdragon, Samsung Exynos, Broadcom (used on Raspberry Pi), and many more.\nWhat is ZYNQ?\nZYNQ is actually a SoC, not just a FPGA, because ZYNQ consists of hard processor system (ARM Cortex-A9) and programmable logic (Xilinx 7-series FPGA, equivalent to Artix-7 FPGA). The ZYNQ device enables the implementation of custom logic such as hardware accelerator in combination with software that runs on the ARM Cortex-A9. ZYNQ can also run Linux OS, which makes this device like the popular Raspberry Pi, but with FPGA inside.\n\n\nThis course is based on hands-on laboratory with a lot of examples. Sample codes are provided for every project in this courses.\nYou will receive a certificate of completion when finishing this course. There is also Udemy 30 Day Money Back Guarantee, if you are not satisfied with this course.\n\n\nSo, click the course button and see you inside the course.",
      "target_audience": [
        "Students or engineers who are working in Embedded or SoC design",
        "Students or engineers who have a knowledge of HDL (Verilog) and C/C++ but new to AXI4 bus protocol",
        "Students or engineers who are already using ZYNQ and want to create your own IP cores with AXI4 bus protocol"
      ]
    },
    {
      "title": "Computer Organization and Architecture - Part 3",
      "url": "https://www.udemy.com/course/computer-organization-and-architecture-course/",
      "bio": "Learn Computer Organization and Architecture of Computer Science in the most simplified manner",
      "objectives": [
        "You will become very familiar with the topics of machine instructions, addressing modes, signed numbers topics",
        "You will be able to challenge the interviewer on questions related to Computer Architecture & Organization",
        "You will view Computer Science in a different dimension",
        "You will be able to answer all questions of exams like GATE,PGEE,ISRO (after completing all parts of CO course)",
        "You will be able to get a top grade in your Computer Architecture & Organization course in your Bachelor's degree (after completing all parts of CO))",
        "Understand how machine instructions, addressing modes, signed numbers works"
      ],
      "course_content": {
        "Introduction": [
          "Introduction : High Level Code vs Assembly Code vs Machine Code",
          "Introduction : High Level Code vs Assembly Code vs Machine Code continued",
          "Instruction Set of a Processor"
        ],
        "RISC vs CISC": [
          "RISC vs CISC",
          "RISC vs CISC continued",
          "More Insights on RISC vs CISC"
        ],
        "Basics of Computer Architecture": [
          "Important : Components of a CPU",
          "Special purpose vs General purpose registers, Basics of Control Signals",
          "How Instructions are represented in a computer using Binary Numbers",
          "Various ways of representing the Addressing Mode Information in an Instruction"
        ],
        "Register Addressing Mode": [
          "Register Addressing Mode",
          "Advantages and Disadvantages of Register Addressing Mode"
        ],
        "Direct & Indirect Addressing Mode": [
          "Direct Addressing Mode",
          "Advantages and Disadvantages of Direct Addressing Mode",
          "Indirect Addressing Mode"
        ],
        "Immediate Addressing Mode": [
          "Immediate Addressing Mode",
          "When Immediate Addressing Mode is used"
        ],
        "Register Indirect Addressing Mode and Auto Increment/ Decrement Addressing Mode": [
          "Register Indirect Addressing Mode",
          "Linear Access of elements of an array with Register Indirect Addressing Mode",
          "Auto Increment Addressing Mode",
          "Auto Decrement Addressing Mode, Pre vs Post Increment/Decrement Mode"
        ],
        "Displacement Addressing Modes": [
          "Various Displacement Addressing Modes",
          "Indexed Addressing Mode",
          "Base Addressing Mode",
          "Base Addressing Mode continued",
          "Summary : Base Addressing Mode vs Indexed Addressing Mode",
          "PC Relative Addressing Mode"
        ],
        "Implied Addressing Mode": [
          "Implied Addressing Mode"
        ],
        "CPU Organization Types": [
          "Introduction : CPU Organization",
          "General Register CPU Organization",
          "Single Accumulator CPU Organization",
          "Stack based CPU Organization",
          "Stack based CPU Organization continued",
          "More on Stack based CPU Organization",
          "Memory Stack vs Register Stack CPU Organization"
        ]
      },
      "requirements": [
        "Have a PC with internet connection",
        "Have basic idea of computer science concepts"
      ],
      "description": "You’ve just stumbled upon the most in-depth Computer Organization & Organization course series online. With over 15,000 students enrolled and thousands of 5 star reviews to date in the area of computer science, my computer science courses are enjoyed by students from 130 countries.\nWhether you want to:\n- build the skills in computer architecture and organization\n- crack interview questions on machine instructions, addressing modes, signed numbers topics of computer architecture and organization.\n- or just understand computers on how instructions work in a computer\n...this complete Masterclass on computer organization and architecture is the course you need to do.\n\nAre you aiming to get a degree in the area of computer science as a topper ?\n\nThis course is designed to give you the skills you need to answer any question on machine instructions, addressing modes, signed numbers topics. By the end of the course you will understand machine instructions, addressing modes, signed numbers topics of computer organization extremely well and be able to answer any question on these topics.\nLots of students have been successful with getting their first job or a promotion after going through my courses on computer science.\n\nWhy would you choose to learn Computer Organization & Architecture ?\nThe reality is that there is a lot of computer science courses out there. It's in the hundreds. Why would you choose my courses ?\nThe number one reason is its simplicity. According to many students in udemy, my courses are simple to understand as I always teach concepts from scratch in a simple language.\nThe second reason is you get a mentor for computer science through this course. I get lot of doubts from students regarding their career in computer science like which elective subject to choose, which book to refer, etc.\nThe third reason is, you are not just watching my videos, you can also ask doubts if you get one while watching the lectures.\nWhich text book should you refer ?\n\nI have used Computer Organization by Carl Hamacher. Its a great textbook. You can follow it. But I have referred lot of other textbooks like Hennessy Patterson, William Stallings, etc. So its upto you on which textbook you are comfortable with but follow a standard author book. If you complete this course, you will find it much easier to understand these textbooks. But anyway if you complete this course with good detailed notes, you don't need to read any textbook as I am reading them for you and giving the contents in an easy to understand manner.\n\nWhy should you take this course?\n\nYou will be joining over 15000 students who are already enrolled in one of my courses.\nThere are 4000+ reviews left by students. My Courses are rated as the best course to learn computer science for beginners.\n\nWhat makes this course a standout?\nLike you, thousands of others were frustrated and fed up with incomplete Youtube tutorials which assume you already know a bunch of stuff and also bulk textbooks able to send even the most intuitive person to sleep.\nLike you, they were tired of low-quality lessons, poorly explained topics and all-round confusing info presented in the wrong way. That’s why so many find success in my courses. It’s designed in a simple manner so that anybody will be able to understand.\n\nWhat if I have questions?\nYou can ask questions anytime using the Q/A section or through personal messages. I take it very seriously and answer these questions in a detailed manner with simple english words so that anybody can understand it.\nStudent Quote: “Everything you always wanted to know about OS but were afraid to ask\"...And Vignesh Sekar gives the right answers” by Claus Kaliba.\nThere’s no risk either!\nThis course comes with a full 30 day money-back guarantee. Meaning if you are not completely satisfied with the course, you can request udemy for a refund within the first 30 days of purchase.\nYou either end up with Computer Organization skills, learn other core computer subjects, get placed in top notch companies or research areas or you try the course and simply get all your money back if you don’t like it…\nYou literally can’t lose.\nReady to get started ?\nEnrol now using the “Add to Cart” button on the right, and get started on your way to computer science.\nSee you on the inside (hurry, Computer Architecture & Organization Series is waiting!)",
      "target_audience": [
        "Anybody who needs to learn Computer Architecture & Organization from scratch",
        "Anybody who wants to pursue a career in Computer Science",
        "Anybody who has Computer Architecture & Organization in the Bachelor's degree (I am sure most of them will have)",
        "Anybody who is preparing for interview in product based companies",
        "If you are preparing for exams like GATE , PGEE , BITS HD , ISRO ,..etc",
        "If you are a Computer Science Engineer",
        "If you are a software professional"
      ]
    },
    {
      "title": "Raspberry Pi For Beginners - 2025 Complete Course",
      "url": "https://www.udemy.com/course/raspberry-pi-for-beginners-step-by-step/",
      "bio": "Build Amazing Projects with Raspberry Pi 5, using Python 3, GPIOs, Flask, the Raspberry Pi Camera, and More",
      "objectives": [
        "Master your Raspberry Pi, starting from scratch",
        "Build a complete surveillance and alarm project with Raspberry Pi",
        "Learn Python 3 from zero, step by step",
        "Install the latest version of Raspberry Pi OS on your Raspberry Pi 5 (also works on older versions)",
        "Use the Raspberry Pi’s GPIOs to control hardware components",
        "Create a web server on your Raspberry Pi",
        "Send emails from your Raspberry Pi",
        "Learn how to use the terminal to get more control over your Pi",
        "Take pictures and videos with the Raspberry Pi camera",
        "Start directly with the Best Practices",
        "Learn how to be more independent when working on your future projects",
        "Get more practice with hands-on lessons, 11 activities and a final project"
      ],
      "course_content": {
        "Introduction": [
          "Welcome!",
          "What is Raspberry Pi and what can you do with it?",
          "List of Materials for this Course - and Recommendations",
          "How to get the most out of this course"
        ],
        "Install Raspberry Pi OS Without any External Monitor or Keyboard": [
          "Intro",
          "Flash the Raspberry Pi OS on your micro SD card",
          "Boot your Raspberry Pi for the First Time",
          "Find the Raspberry Pi’s IP address",
          "Connect to your Pi using SSH",
          "Setup VNC to Get a Remote Access to your Raspberry Pi OS Desktop",
          "Finish the Startup Configuration - Last Steps",
          "Extra - Raspberry Pi Connect",
          "Extra - not needed for first install: if you have to connect to a new WiFi"
        ],
        "Program with Python 3 - Variables and Functions": [
          "Intro",
          "Your first Python program - Discover the Thonny IDE",
          "Variables",
          "Variables - Data Types",
          "Functions",
          "Variables - Scope",
          "Activity 01 - Create a Function to Concatenate 2 Uppercase Strings",
          "Activity 01 - Solution"
        ],
        "Program with Python 3 - Conditions, Loops, Lists": [
          "Conditions",
          "Condition Operators",
          "Activity 02 - Validate User Input",
          "Activity 02 - Solution",
          "Loops",
          "Lists",
          "Activity 03 - Compute Max Value Inside a List",
          "Activity 03 - Solution",
          "Python Modules",
          "Program with Python 3 - Section Conclusion"
        ],
        "Build Your First Raspberry Pi Circuit": [
          "Intro",
          "Warning - PLEASE WATCH - How to Safely Manipulate Your Board",
          "Understand How a Breadboard Works",
          "The Resistors Color Code",
          "Build your First Circuit"
        ],
        "Control Raspberry Pi's GPIOs with Python": [
          "How GPIOs work",
          "Create a Python Program to Make an LED Blink",
          "Activity 04 - Set the LED’s State From User Input",
          "Activity 04 - Solution",
          "Add a Push Button to Your Circuit",
          "Detect When a Button is Pressed with Python"
        ],
        "Practice More with GPIOs": [
          "Activity 05 - Turn on the LED When the Button is Pressed",
          "Activity 05 - Solution",
          "Add 2 More LEDs to Your Circuit",
          "Activity 06 - Switch the LED When Pressing the Button",
          "Activity 06 - Solution",
          "Activity 07 - Optimize Your Code with Lists",
          "Activity 07 - Solution"
        ],
        "Detect Movement with a PIR Sensor": [
          "Intro",
          "Tune the PIR sensor",
          "Add the PIR Sensor to Your Circuit",
          "Detect a Movement with Python",
          "Activity 08 - Automatic Lighting Control",
          "Activity 08 - Solution"
        ],
        "Use the Terminal on Your Raspberry Pi": [
          "Intro",
          "Navigation and File System",
          "Edit Files From the Terminal with Nano",
          "Create, Remove, and Manipulate Files",
          "Install and Update Software",
          "A Few More Terminal Commands to Gain More Control Over Your Raspberry Pi"
        ],
        "Python 3 and the Terminal": [
          "Install Python Modules",
          "Work with Python from the Terminal",
          "Read, Write, and Manipulate Files with Python",
          "Activity 09 - Create a new Python Script From the Terminal",
          "Activity 09 - Solution"
        ]
      },
      "requirements": [
        "A computer + a Raspberry Pi 5 (also works with Raspberry 4 and older versions)",
        "A list of hardware components (provided in a free preview lecture at the beginning). You can still start the course without those components.",
        "NO external monitor or keyboard required.",
        "NO programming, Linux, or hardware experience required.",
        "A will to learn and to progress with the Raspberry Pi"
      ],
      "description": "This complete, hands-on, step by step course is targeting the latest version of Raspberry Pi, which is the Raspberry Pi 5. Note that everything also works perfectly for Raspberry Pi 4 and older versions.\nYou don’t need any knowledge in programming, electronics, or anything else. To get started, you just need a computer to work from, and a Raspberry Pi board.\nAt the end of the course you will have a strong foundation with your Raspberry Pi, and you will be able to start your own projects in no time.\n\n\n- Why this course?\n\n\nYou may be just getting started, or have already started to learn how to build projects with your Raspberry Pi. But knowing what to do first, and which path to follow can be quite hard and you may feel stuck.\nThe problem with most online resources for Raspberry Pi is that they focus on making you run existing programs to make you feel you’ve accomplished a lot, but in the end you’ve just copied/pasted some random code and didn’t even scratch the surface. The “why you should do that” is not involved. So, the next time you have to do something on your own, you feel stuck and too dependent on other people's code.\nThis course will focus on the “why” and make you become much more autonomous with your Raspberry Pi so you will be able to start your own projects without having to desperately search for code to copy/paste on the Internet. My personal goal is to make you understand enough to get started in a short period of time, and make you think as a problem solver, with engineer-level thinking skills.\n\n\n- And how will we do that you may ask?\n\n\nSimple:\nHANDS-ON.\nSTEP BY STEP.\nNO COPY AND PASTE.\nThis course is not a course where you just download some code and run it. This is a course where you will truly understand how to write the code and work with the different Raspberry Pi functionalities.\nI will take the time to explain everything, step by step, even the basic things. I will write the code with you and explain why I write what I write. With the activities and final project you will have even more opportunities to practice on your own, and you will make progress without even noticing it.\n\n\n- What will you do and learn in this course?\n\n\nHere’s an overview of the different topics we’ll cover:\nSetup your Raspberry Pi and install Raspberry Pi OS without an external monitor and keyboard.\nGet good Python 3 programming basics.\nWork with the Raspberry Pi’s GPIO panel.\nUse a PIR sensor to detect movement from your Pi.\nDiscover how to use a Unix terminal and the most useful command line tools.\nSend an email from your Raspberry Pi.\nTake photos and videos using the Raspberry Pi camera.\nCreate a web server on your Raspberry Pi with the Flask framework.\nThe course is divided into 15 sections to make it easier to navigate and track progress. Each section is focused on one topic. For each topic we start with hands-on explanations.\nAnd all along the way, through the different sections, you will have many opportunities to practice (11 activities) on the most important points.\nAfter learning all those topics, you’ll work on a final project where you can practice more with everything you’ve seen in the course. This is also a good opportunity to mix different functionalities together, which is where you can really start to create much bigger and powerful applications.\n\n\nSo, don’t wait any longer and start your Raspberry Pi journey with this course!\n\n\nThe teaching method I use is now a proven method - not because I or someone arbitrarily said so, but because of the tons of positive feedback about successful learning results I’ve received over the years with thousands of students. Here are actual reviews from students who took this course:\n“Step-by-Step Guide for Beginners to Learn Raspberry Pi. A great choice for beginners!!!” - Evan V.\n“I feel accomplished after completing this course. The amount of knowledge gained and effort put in has been truly rewarding.” - Parul S.\n“This course was a great match for me and helped me understand the GPIO interface, breadboard usage and how to send the proper python commands to control the electronic elements. Thank you!” - Mary P.\n“Total beginner and the course is getting me set up and running. What more could one ask for” - Steve C.\n\n\nI don’t come from an academic background. I’m an engineer and all I’ve done is to try to solve real problems by being practical on what I need to do and to learn. I actually used Raspberry Pi to program an entire 6 axis robotic arm which is now on the market. This forced me to go to the point and focus on what’s really useful.\nThis experience and the lessons I’ve learned is what I want to share with you. Understanding the “why” and focusing on practicing on the key points, is, to me, one of the best ways to progress 10x faster.\nMy goal here is to give you more freedom when you start a project. To make you less dependent on what you may find (or not) on the Internet. To think more by yourself when building new projects.\n\n\nOh, and you also get a 30 days money-back guarantee if you’re not fully satisfied.\nSee you in the course! :)\n\n\nNote - This course is not for you if:\nYou’re not interested in understanding what you’re doing and prefer a quick copy/paste solution.\nYou’re already an advanced Raspberry Pi user.",
      "target_audience": [
        "Students, Engineers, Researchers, Teachers, Developers, Hobbyists.",
        "Anyone wanting to learn how to get started with Raspberry Pi and build amazing projects",
        "Anyone wanting to really understand what they’re doing with Raspberry Pi, Python 3, and the different components you can use with the board",
        "Anyone who already knows Python or Linux and wants to dive into Raspberry Pi",
        "People who want to start robotics projects, home automation, web servers, IoT projects, etc., with their Raspberry Pi",
        "Raspberry Pi users who feel stuck in their projects and want to get more autonomous"
      ]
    },
    {
      "title": "design PCB using Eagle Cadsoft step by step(Older Version)",
      "url": "https://www.udemy.com/course/design-pcb-using-eagle-cadsoft-step-by-step/",
      "bio": "Best way to design PCB circuit boards using Eagle , learn how to choose your project and design it from scratch",
      "objectives": [
        "Understand how to prepare and select a components to your project",
        "You will be able to draw schematics and route PCB boards",
        "Understand how to generate Gerber files , BOM,partlist, 3D View o Eagle"
      ],
      "course_content": {},
      "requirements": [
        "you need to have a motivation to learn.",
        "Patience and perseverance to finish the course",
        "No background knowledge is needed to start this course"
      ],
      "description": "This course is designed to teach you how to use Eagle cadsoft,One of the best PCB design software,even if you don't have any background in PCB design.\n\n\nThis course works with older eagle version 7.5V and newer Eagle 8.x V and all files to install the eagle available in the course.\nThis course I will start with you step by step teaching you how to use Eagle software and organized to let you understand how to deal with Schematic and PCB board editor tools.\nin this course I will show you how to\nanalyze your project , select the components you need , find a reference schematics and PCB board\ncreate your schematic design , place a components , connect them and check your design from any electrical error\nTransfer your schematic to PCB board, arrange the components on the board,route ,add polygon , generate gerber files and many more.\nLearn useful tool and skills to improve you project,like using BUS line , Label, differential pairs,meander,3D View , PCB heatsink and thermal via.\nAfter this course you will be able to transfer your project from idea to a real PCB, you will be able to create your custom PCB board with practical 3 circuit project in this course.",
      "target_audience": [
        "anyone interested to learn designing PCB"
      ]
    },
    {
      "title": "Laptop Repair: Learn How to Repair Dead & Failed Motherboard",
      "url": "https://www.udemy.com/course/laptop-repairing-how-to-repair-dead-laptop-motherboard/",
      "bio": "Laptop repair course, computer hardware Technicians, Dead motherboard repair, Integrated Circuits, Basic Electronics, PC",
      "objectives": [
        "How to diagnose laptop motherboard;",
        "How to check motherboard ICs, MOSFETs, Chips, Inductors, Capacitors, Diodes, Resistors, SMD components and much more;",
        "How to check BIOS IC and SIO IC;",
        "How to check motherboard power jack and and connectors.",
        "How to repair dead laptop motherboard;",
        "Tips and tricks about repairing dead laptop motherboard."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of motherboard repairing."
      ],
      "description": "**Continuous Updates**\n13 Reasons why you should choose this course\nThe course will teach you Everything about how to repair a failed laptop motherboard;\nThe course is created with perfect care by a computer engineer;\nOne-On-One Support.\nThe course is not long, so you can complete it quickly and enjoy your new experiences.\nYour inquiries will be answered in a short time with a full explanation of any question;\nConstant updates.\nSimple and easy-to-understand explanation with examples;\nA certificate will be provided upon completion of the course.\nYou are going to understand laptop motherboard parts and components;\nYou will learn how to check laptop motherboard circuits and components in detail\nYo going to learn how to test motherboard Integrated Circuits, MOSFETs, and all components using a digital multimeter;\nYou will learn and master how to use the digital Multimeter during testing;\nThis course will transform you from a beginner to a Pro.\nTopics that we will be discussing in this course are :\nHow to check laptop motherboard visually without a multimeter;\nHow to check laptop motherboard power jack serviceability;\nHow to check motherboard power circuit and components serviceability;\nLaptop Motherboard Chips and Integrated Circuits;\nHow to check the Super Input-Output IC, SIO, and its circuit;\nHow to check Basic Input Output System IC, BIOS;\nHow to test Fuses using a digital multimeter;\nHow to test Inductors using a digital multimeter;\nHow to test Capacitor using a digital multimeter;\nHow to test a Diode using a digital multimeter;\nHow to test MOSFETs, ICs, and motherboard Chips using a digital multimeter;\nHow to check SMD components on a laptop motherboard;\nHow to check motherboard connectors' serviceability and much more;\nHow to use the Multimeter correctly.\nYou will also learn many tips and tricks that will make you a hardware professional and have a deep understanding of Laptop motherboard repair.\nI will guide you step by step with a straightforward explanation of this course.\nIf you are interested in one of the points we talked about before, then this course is for you.\nWhat are you waiting for?\nEnroll now and join us.\nI'd love to see you in the class.",
      "target_audience": [
        "Hardware students and technicians;",
        "Technicians who want to improve and update their skills on laptop repairing;",
        "Anyone who want to understand how to repair dead laptop motherboard."
      ]
    },
    {
      "title": "FPGA Embedded Design, Part 2 - Basic FPGA Training",
      "url": "https://www.udemy.com/course/fpga-embedded-design-fpgas/",
      "bio": "Learn FPGA embedded application design starting with the basics and leaving with your own working hardware.",
      "objectives": [
        "Build an FPGA embedded solution from the ground up using Altera/Intel FPGAs and software.",
        "Apply your Verilog knowledge to real applications with FPGAs."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of Hardware Description languages like Verilog or VHDL is expected.",
        "You are not required to make any purchases, but an Altera/Intel DE0-CV board will come in handy if you want to follow along with the examples shown throughout the course."
      ],
      "description": "It's time to get your hands on an actual FPGA!\nIn this second part of the FPGA Embedded Design series, we'll get our hands on an actual FPGA to bring our designs to life.\nWe'll use an FPGA development board from Terasic. We'll program a Cyclone V FPGA from Altera/Intel, using their development suite Quartus Prime.\nThis course consists of two main parts:\nFoundations of FPGAs, where we'll cover the essentials of FPGAs, how they work, what they can and cannot do.\nHands-On Training, where we'll design some simple hardware and download it into an FPGA development board. No purchases are required for this second part, but it sure helps to have your own board to follow along, and keep on tinkering in the future with this new superpower.\nWhat are you waiting for? Let's have some fun!!!",
      "target_audience": [
        "Anyone who wants to learn FPGA design.",
        "Developers curious about FPGA Design.",
        "Embedded Engineers who want to learn about FPGAs.",
        "This course is not for experienced embedded engineers specialized in FPGAs."
      ]
    },
    {
      "title": "Sensors: Everything You Need To Know",
      "url": "https://www.udemy.com/course/sensors-interfacing-sensor-wiring-sensor-temperature-humidity-sensors/",
      "bio": "Learn Everything there is to know about Sensors,how they work and how to interface them and why we need them in our life",
      "objectives": [
        "Know how Sensors Work",
        "Learn How to use and Interface Sensors",
        "Know What are Temperature Sensors and how they work",
        "Know What are Pressure Sensors and how they work",
        "Know What are Force Sensors and how they work",
        "Know What are Position Sensors and how they work",
        "Know What are Depth Sensors and how they work",
        "Know What are Flow Sensors and how they work",
        "Know What are Speed Sensors and how they work"
      ],
      "course_content": {},
      "requirements": [
        "Nothing is Required, Just a pen and a Paper to Write down Notes a long the way"
      ],
      "description": "Learn Everything There is to Know About Sensors, How They Work, How to Interface Them, and Why We Need Them in Our Life\nWelcome to this course. More than 40 sensors are explained in full detail. See the list below.\nLearn Sensors Interfacing and Working Principle Today\nWhy You Should Take This Course:\nLearn everything there is to know about sensors.\nUnderstand how they work and what interfaces make a good sensor.\nDiscover why we need sensors in our daily lives.\nGain knowledge on how to interface a sensor with programming and electronics.\nThis course will teach you how sensors work, what they measure, how they measure it, and what the actual working principle for sensors is.\nDifferent Types of Sensors Covered in This Course:\nTemperature Sensors\nPressure Sensors\nForce Sensors\nPosition Sensors\nSpeed Sensors\nDepth Sensors\nFlow Sensors\nYou will learn why sensors have standard output ranges and which sensors to buy. Everything is explained in full detail.\nA List of Sensors and Subcategories Covered in This Course:\nTEMPERATURE TRANSDUCERS\nThermocouples\nResistance Type Sensors\nLiquid Expansion and Vapor Pressure Sensors\nBimetallic Types\nGlass Thermometer\nMechanical PRESSURE TRANSDUCERS\nBourdon Tube\nPiston Type\nCapsules and Bellows\nDiaphragms\nELECTRICAL PRESSURE TRANSDUCERS\nStrain Gauge Types\nPiezoelectric Types\nOther Electric Effects\nSPEED TRANSDUCERS\nOptical Types\nMagnetic Pickups\nTachometers\nFLOW METERS\nPositive Displacement Types\nLobe type or meshing rotor\nInferential Types\nTurbine rotor types\nRotating vane types\nVariable Area Types\nFloat type (Rotameter)\nTapered plug type\nFluted Spiral Gear\nDifferential Pressure Flow Meters\nOrifice Meters\nVenturi Meters\nNozzle Meters\nFORCE SENSORS\nMechanical Types\nHydraulic Types\nElectrical Strain Gauge Types\nPOSITION SENSORS\nResistive\nOptical\nLinear\nRotary\nInductive\nDepth Gauges\nUltrasonic Sensor\nPressure-based Depth Gauge\nSTRAIN GAUGES\nAfter this course, you will be able to recognize any sensor and understand the actual working principle behind the plastic casing that most sensors have. Everything is explained in detail.\nUser Testimonials: \"This course provided a comprehensive understanding of sensors and their applications. A must-take for anyone interested in electronics!\" - Emma T.\n\"A great course that covers a wide range of sensors with practical examples. Highly recommend!\" - David P.\nAuthor Bio: Ashraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. As a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world. With over 250,000 students from around the world, Ashraf’s online courses have helped many to kick-start their careers in the industry.\nCall to Action: Enroll now to master the knowledge of sensors and enhance your skills in electronics!\nFAQ: Q: Do I need prior experience in electronics to take this course? A: No, this course is designed for all levels.\nQ: Will I need to buy additional equipment? A: The course provides a list of necessary sensors, all of which are affordable and easily accessible.\nWhat You Will Learn\nUnderstand the basics of various sensors\nLearn how to interface sensors with microcontrollers\nExplore the working principles of different types of sensors\nGain practical knowledge in using sensors for various applications\nWho Is This Course For\nElectronics enthusiasts\nHobbyists interested in sensors\nBeginners in electronics\nAnyone looking to understand sensors and their applications\nRequirements\nA computer with internet access\nBasic understanding of using a computer\nNo prior electronics experience needed\n\n\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading team in the Microcontroller Industry, with over 13 Years of Experience in teaching and doing practical projects. They strive to provide deep, hands-on experience in their courses, offering step-by-step blueprints on various topics.\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and maker. He has been the Chief Educational Engineer at Educational Engineering Team since 2007, and his mission is to explore new trends and technology to help educate the world. His online courses have helped over 250,000 people worldwide to build successful careers.\nEducational Engineering Team offers courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Engineers",
        "Electronics Geeks",
        "Microcontroller Geeks",
        "Arduino Geeks",
        "Raspberry Pi Geeks",
        "Industrial Engineers",
        "Anyone looking to gain more knowledge about Sensors"
      ]
    },
    {
      "title": "Microsoldering: Everything You Need to Know to Get Started",
      "url": "https://www.udemy.com/course/microsoldering-the-full-curriculum/",
      "bio": "A Beginner's Guide",
      "objectives": [
        "How to make money in your repair shop with common microsoldering repairs",
        "How to fix a customer's phone that was damaged after a general repair",
        "How to diagnose and troubleshoot common logic board problems",
        "How to separate the iPhone X logic board and put them back together",
        "The basics of data recovery via microsoldering"
      ],
      "course_content": {},
      "requirements": [
        "Experience with iPhone disassembly.",
        "Basic soldering experience would be helpful.",
        "Basic electronics troubleshooting would be helpful."
      ],
      "description": "Please note that this course is mainly geared toward BEGINNERS looking to get into the world of microsoldering.  This course is not for those that have been in the business for a while now.  Our aim to help repair technicians and hobbyists get a better understanding of how to get started with their microsoldering journey.\n\n\nIn this course, we will teach you all of the skills needed for iPhone logic board repair. The course is comprised of 4 standalone courses combined into one full curriculum. The course is roughly 4.5 hours of online video content.  You will learn everything that you need to get started with microsoldering.  You will get access to this content for life.  We will periodically update this course with new repairs and information regarding microsoldering.\nThe Basics\nThe basics of iPhone logic board repair.\nHow a logic board works and how its components operate.\nThe most important tools required for logic board problems.\nComplete list of tools and equipment needed for iPhone logic board repair.\nThe most important reasons for logic board damage and the most common problems resulting from that damage.\nThe core of this business and how to get the most from iPhone logic board repair.\nHow to troubleshoot a damaged logic board.\nHow to test components.\nExamples of how a typical repair goes in a real world example from A to Z. The first case is a water damaged iPhone not powering on. And the second case is an iPhone 6/6+ with a bad touchscreen.\nHow to setup and use some of your tools and equipment.\nHow to setup your hot air rework station.\nHow to setup and use your micro pencil and tweezers.\nHow to setup your dc power supply for powering up an iPhone without a battery.\nHow to use diode mode on your digital multimeter to diagnose and troubleshoot problems quickly.\nZXW Tools\nHow to use ZXW tools dongle for troubleshooting and repairing iPhone logic boards.\nThe different functions the tool offers.\nHow to find the circuit lines.\nHow to test lines for problems.\nHow to repair a missing pad.\nHow to repair long screw damage on an iPhone.\nHow to determine the type and value of components.\nWhere to source components.\nHow to get images of these components within the software.\nNo Backlight, No Touch, No Charge, Audio IC/Loop Disease, & iPhone X Logic Board Separation\nHow to repair the most common iPhone logic board problems: no backlight, no touch, no charge & audio ic/loop disease.\nHow to separate the iPhone X logic boards and put them back together.\nHow each system operates.\nDiscuss the functions of each component within each system.\nList all of the relevant system components.\nDiscuss the most important reasons for these logic board problems.\nTeach you how to diagnose and troubleshoot which components are responsible these issues.\nTeach you how to perform each repair.\nDiscuss how to tackle the complications that may arise post repair.\nData Recovery\nList the most common reasons for \"no boot\".\nList some ideas on how to make a dead iPhone power up again.\nProvide a 10 step approach on how to revive a dead iPhone.\nDiscuss in detail the steps required to repair a dead device.\nHow to diagnose whether a device is actually dead or not.\nProvide hands on examples of how to do the repairs.\nWhich circuits are important for data recovery.\nHow to test important circuits.\nHow to repair software issues.\nHow to solve complications post repair.\nWe will use the iPhone 6 as a model. But our approach will be translatable to other iPhone models as well.  This course will be  periodically updated with more common repairs.",
      "target_audience": [
        "Beginners looking to get a better understanding of microsoldering",
        "Hobbyists looking to expand their knowledge of logic board repair",
        "Cell phone repair techs looking to fix a customer's phone that they damaged",
        "Cell phone repair shops looking to expand their business"
      ]
    },
    {
      "title": "High-Level Synthesis for FPGA, Part 2 - Sequential Circuits",
      "url": "https://www.udemy.com/course/high-level-synthesis-for-fpga-part-2-sequential-circuits/",
      "bio": "Logic Design with Vitis-HLS",
      "objectives": [
        "Designing sequential logic circuits with C/C++ language using the HLS approach",
        "Understanding the basic concepts of High-Level Synthesis (HLS)",
        "Using HLS concepts for designing sequential logic circuits",
        "HLS design flow for FPGAs",
        "Working with Xilinx Vitis-HLS and Vivado design suite Toolsets",
        "How to generate RTL hardware IPs using Vitis-HLS",
        "Writing C-testbench in HLS",
        "Implementing three exciting projects with HLS"
      ],
      "course_content": {
        "Prologue": [
          "Introduction",
          "Course Structure"
        ],
        "HW/SW Setup": [
          "Introduction",
          "Vivado-HLX",
          "Vivado and Vitis-HLS",
          "Install Vivado HLx",
          "Test Installation"
        ],
        "D Flip-Flop (DFF)": [
          "Introduction",
          "Memory Cell",
          "Sequential Circuits",
          "Clock Signal",
          "State Concept",
          "Reset Signal",
          "Register",
          "DFF LAB01",
          "DFF LAB02",
          "Exercises"
        ],
        "Single Cycle Design Flow": [
          "Introduction",
          "Definition and Idea",
          "Parallel to Serial",
          "Serial to Parallel",
          "IP-Centric Design Flow",
          "Parallel-Serial-Parallel LAB",
          "Exercises"
        ],
        "Testbench 01": [
          "Introduction",
          "Definition",
          "Parallel to Serial Testbench",
          "Serial to Parallel Testbench",
          "Input Waveform",
          "Exercises"
        ],
        "State Machine": [
          "Introduction",
          "Definition",
          "Concepts",
          "Template",
          "Combination Lock-VitisHLS",
          "CombinationLock-Vivado",
          "Exercises"
        ],
        "Utilities": [
          "Introduction",
          "Timer",
          "Debouncer",
          "Counter",
          "Clock Generator",
          "Pulse Generator",
          "Single-Cycle Regular Pulses",
          "Edge Detector",
          "Exercises"
        ],
        "Vending Machine": [
          "Introduction",
          "Definition",
          "Vitis-HLS",
          "Vivado",
          "Exercises"
        ],
        "Integrated Logic Analyzer (ILA)": [
          "Introduction",
          "Definition",
          "Vivado",
          "Exercises"
        ],
        "Function Pipelining": [
          "Introduction",
          "Definition",
          "Multi-Cycle Design",
          "Pipeline Design",
          "Performance Metrics",
          "IIR Example",
          "Exercises"
        ]
      },
      "requirements": [
        "Understanding the basic concepts of C/C++ coding",
        "\"High-Level Synthesis for FPGA, Part 1 – Combinational Circuits\" course",
        "BASYS3 evaluation board",
        "Xilinx Vitis-HLS and Vivado toolsets"
      ],
      "description": "This course is an introduction to sequential circuits design in high-level synthesis (HLS). The goals of the course are describing, debugging and implementing sequential logic circuits on FPGAs using only C/C++ language without any help from HDLs (e.g., VHDL or Verilog).\nIt uses the Xilinx HLS software and hardware platforms to demonstrate real examples and applications. The course mainly uses the Xilinx Vitis-HLS toolset to describe, simulate and synthesise a high-level design description into the equivalent HDL code. The course also explains how to use the Integrated Logic Analyser (ILA) IP in Vivado to perform real-time debugging on the Basys3 board.\nThis course is the first of its kind that builds the HLS design flow and skills along with the digital logic circuit concepts from scratch. Along the course, you will follow several examples describing the HLS concepts and techniques. The course contains numerous quizzes and exercises for you to practice and master the proposed methods and approaches. In addition, the course utilises three exciting projects to put all the explained concepts together to design real circuits and hardware controllers.\nThis course is the second of a series of courses on HLS in designing hardware modules and accelerating algorithms on a target FPGA. Whereas this course focuses on sequential circuits, the first course explains how to describe combinational circuits in HLS. The other courses in the series will explain how to use HLS in designing advanced logic circuits, algorithm acceleration, and hybrid CPU+ FPGA heterogeneous systems.",
      "target_audience": [
        "Hardware engineers",
        "Software engineers who are interested in FPGA",
        "Lecturers, researchers, professors who want to use FPGA-based HLS in lectures, courses or research",
        "Digital Logic enthusiasts"
      ]
    },
    {
      "title": "Ultimate IT Networking Fundamentals Mastery Course",
      "url": "https://www.udemy.com/course/computing-fundamentals-it-networking-os-virtualization/",
      "bio": "Computing Fundamentals: The Ultimate Guide to IT Networking, OS, Virtualization and Cloud Computing",
      "objectives": [
        "Beginners who want to learn the basics of computer hardware ,Operating System networking and Virtualizaiton",
        "Students pursuing a degree in computer science or information technology.",
        "IT professionals who want to refresh their knowledge of computer fundamentals, operating systems, and networking.",
        "Aspiring IT professionals who want to learn about virtualization and its importance in modern computing environments.",
        "Anyone interested in understanding the fundamentals of computers and networks"
      ],
      "course_content": {
        "Introduction": [
          "About Course",
          "How to get the most out of this course ?"
        ],
        "About Computer": [
          "What is a Computer ?",
          "How Computer Works ?",
          "Computer Architecture",
          "Who is the Father Of Computer ?"
        ],
        "Computer Generations": [
          "First Computer",
          "Second Generation Computer",
          "Third Generation Computer",
          "Fourth Generation Computer",
          "Fifth Generation Computer",
          "First Mainframe Computer",
          "First Personal Computer",
          "First IBM PC",
          "OS for IBM PC"
        ],
        "Computer Components": [
          "What are Computer Components ?",
          "What are Input Devices ?",
          "Output Device",
          "What is processor ?",
          "Processor Speed",
          "Processor Width",
          "Processor FSB",
          "Processor Cache Memory",
          "Processor Virtualization",
          "Processor Core",
          "Processor Generation",
          "Processor Manufacturers",
          "What is Motherboard ?",
          "What is Storage ?",
          "Primary Storage (RAM vs ROM)",
          "What are different RAM Types?",
          "Secondary Storage",
          "Secondary Storage : Harddisk",
          "Secondary Storage : Tape Drive",
          "Secondary Storage : Optical Storage",
          "Secondary Storage : Flash Storage",
          "Secondary Storage : HDD vs SSD",
          "SMPS"
        ],
        "Networking": [
          "Network and Networking",
          "What are different Network Types ?",
          "What is LAN?",
          "What is MAN ?",
          "What is WAN?",
          "What is CAN?",
          "What is PAN?"
        ],
        "Requirements to set up a Network": [
          "What are Requirements to set up a Network?",
          "What are End Devices?",
          "What is media ?",
          "Guided Media",
          "Unguided Media",
          "Network Interface Card ( NIC )",
          "What is the use of a Switch ?",
          "What is the use of an Access Point ?",
          "What is the use of a WLC ?",
          "What is the use of a Router?",
          "What is the use of a Firewall and its zones?",
          "What is an IP Phone ?",
          "What is Wireless Broadband Router ?"
        ],
        "Operating System": [
          "What is an Operating System ? & Operating System Types.",
          "Windows Server 2022 Editions",
          "Windows Server 2022 Features : It is a 64 Bit Operating System",
          "It Provides Advanced Multilayer Security",
          "It Supports Cloud Infra",
          "It has Hybrid Capabilities With Azure",
          "It has Improved Server Manager",
          "It Supports GUI and CLI OS",
          "It has Active Directory",
          "It has Group Policy Management Console",
          "It has Disk Quota Feature",
          "It has Backup and Recovery Feature",
          "It has DNS",
          "It has IIS",
          "It supports Virtualization",
          "Windows Deployment Service",
          "Dynamic Host Configuration Protocol"
        ],
        "Windows Server Operating System Installation": [
          "Hardware requirements to Install Windows Server 2022 OS",
          "Different Ways To Install The Operating System",
          "Computer Specifications For Lab and verification",
          "Software requirement",
          "How to download Windows Server ISO image ?",
          "Download and Install VMWare Workstation For Lab",
          "How to create the virtual machine For Lab?",
          "Installing Windows Server 2022"
        ],
        "IP Addressing": [
          "What is an IP address ?",
          "What is IPv4 ?",
          "What is IPv6 ?",
          "Converting Binary numbers to Decimal Numbers",
          "Converting Decimal Numbers to Binary numbers",
          "How to assign an IP address ? : Therory",
          "How to assign an IP address ? : Lab",
          "Range",
          "Communication Types - Unicast,Broadcast and Multicast",
          "Network and Host Portions",
          "How to design the IP addressing",
          "What is Network ID and Broadcast ID",
          "Subnet Mask.",
          "How to verify the IP address",
          "Public IP Address vs Private IP Address"
        ],
        "Topologies": [
          "What is a Topology?",
          "i) Physical Topology",
          "a ) Bus Topology",
          "b) Ring Topology",
          "c ) Star Topology",
          "ii) Logical Topology",
          "a) Workgroup Model",
          "b) Domain Model",
          "Difference Between Domain and Domain Controller",
          "Requirements to install the Domain Controller",
          "Terminologies",
          "Lab overview",
          "Verify if the Server is in Workgroup",
          "Configuring IP address and PDNS",
          "Installing Active Directory Domain Services (ADDS)",
          "Promoting the Server to a Domain Controller (DC)",
          "Verification"
        ]
      },
      "requirements": [
        "The willingness to learn"
      ],
      "description": "Computing Fundamentals: OS, Network, Virtualization, and Cloud Computing is an introductory course that provides learners with a comprehensive understanding of the basics of modern computing systems.  Learners will gain a deep understanding of the critical concepts and skills necessary to navigate the digital landscape.\n\n\nThe course begins with an overview of operating systems, including the different types of operating systems, how they function, and how they manage computer resources.\n\n\nNext, the course covers computer networking, including the principles of computer networking, and how data is transmitted across networks. You will learn about the different types of networks, including local area networks (LANs), wide area networks (WANs), and the internet.\n\n\nThe course then covers virtualization, including the different types of virtualization, how virtualization is used to optimize IT infrastructure, and how to set up and manage virtual machines. You will learn how virtualization can reduce costs, increase efficiency, and simplify IT management.\n\n\nBy the end of the course, you will have a solid foundation in the fundamentals of modern computing systems, including operating systems, networks, virtualization, and IT networking. You can confidently navigate the digital landscape and understand the basics of IT networking. Whether you're new to the field of computing or seeking to refresh your knowledge, this course provides a comprehensive overview of the essentials of modern computing systems.\n\n\nTestimonials:\n\"Its a great knowledge sharing course indeed.\" Saad Bin Abser\n\n\n\" One of the best lecturers. He used to present the lectures very nicely and the way of conducting classes was impressive. Very knowledgeable and cooperative . He is good at explaining in a very understandable way. The notes provided are precise. He is always reachable even after the class /course and eager to help if there is any doubt\" - Sharmin Akhter\n\n\n\"I have been trained CCNA course by Mohammed. He has the ability to explain complex concepts in a simple and understandable way. Admired by his technique when performing Practical Labs and Troubleshooting the issues. I will look forward to learn more from him in future \"- Ramesh S",
      "target_audience": [
        "This course on computer, operating system, network, and virtualization fundamentals is designed for anyone who wants to gain a solid foundation in the basics of modern computing.  If you're new to the world of computing, this course will help you understand the fundamental concepts behind computers, operating systems, and networks, so you can better navigate the digital landscape with confidence.  If you're a student pursuing a degree in computer science or information technology, this course will provide you with a strong foundation in the basics, so you can build on that knowledge as you progress through your studies.  If you're an IT professional, this course will help you refresh your knowledge of computer fundamentals and provide you with a deeper understanding of operating systems, networks, and virtualization, which are essential for your career.  Finally, if you're an aspiring IT professional, this course will give you a solid foundation in the basics of computing, so you can begin your journey towards a career in the technology industry with confidence.  This course is suitable for learners of all levels, whether you're a complete beginner or you have some experience with computing. By the end of this course, you will have a strong understanding of the basic concepts of computing, operating systems, networks, and virtualization, which will prepare you for further study or a career in the technology industry."
      ]
    },
    {
      "title": "Analog Circuit Design - An Intuitive Approach",
      "url": "https://www.udemy.com/course/analog-circuit-design-intuitive-approach-to-design/",
      "bio": "New Dimension to look at Analog circuits( Single stage /Cascode / Cascade ). Tips and tricks to solve complex circuits",
      "objectives": [
        "Designing of Amplifiers in most intuitive way possible",
        "Quick Mental calculation for Complex Circuits",
        "Modelling of complex circuits into simpler part and analysis.",
        "Quick way to find Input/Output Resistance of a circuit",
        "Finding equivalent GM of a circuit",
        "Significance and role of deign parameters : gm , rds , ids , VGS-VTH , etc",
        "Single Stage /Cascade and Cascode Amplifiers and their significance : Common Source , Common Drain , Common Gate , Cascade : CS-CS , CG-CG. Cascode : CS-CG"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Amplification : Defination",
          "Linearity : Property of a System for amplification",
          "Linearity : Graphical View",
          "Voltage and Current Sources",
          "Thevenin and Norton Models"
        ],
        "Amplifier Models": [
          "Voltage-Voltage AMP",
          "Current-Current AMP",
          "Voltage-Current Amplifier : Transconductance Amp",
          "Current-Voltage Amplifier : Trans Resistance AMP",
          "Summary of Models , Maximum achievable Gain"
        ],
        "MOSFET : Quick Review": [
          "MOSFET : Equations Review and sample examples",
          "MOSFET : Equations Review 2",
          "gm - Transconductance in Different Regions",
          "gm - Transconductance Summary ( Strong and weak Inversion)",
          "rds : Resistance of MOS",
          "Small Signal Modelling",
          "Mos resistance : Looking at Gate , Drain and Source",
          "ROUT at Source with drain Resistance"
        ],
        "Single Stage MOS Amplifiers": [
          "Common Source AMP",
          "Common Drain AMP",
          "Common Gate AMP",
          "Summary of Single Stage AMP"
        ],
        "How to increase or decrease gm and rds : Mathematical and intuitive study": [
          "Increasing rds, Source degeneration",
          "Voltage Suppression at Source. Shock absorber",
          "Solved examples and case study",
          "Some interesting observation : Special Circuits",
          "Solved examples and case study : Part2",
          "Increasing the GM and how ? : Intuitive view",
          "Reducing the GM and how ? : Intuitive view",
          "Why reduce GM ? Intuitive view",
          "Negative Feedback View in GM"
        ],
        "Cascade and Cascode Amplifier : Intuitive View": [
          "CS CS Cascade",
          "CGCG Cascade",
          "CSCG Cascode",
          "CD-CG-CD",
          "What is next",
          "Answer the following",
          "Find the Gain,",
          "Find the Gain,",
          "Test yourself"
        ],
        "Bonus : Body Effect Modelling in Amplifiers": [
          "Define Body Effect- Small Signal model",
          "Body effect in CSA and its mathematical view of GM",
          "Body effect in CSA and its intuitive view : GM",
          "Body effect in CDA",
          "Body effect in common Gate amplifier",
          "Test your understanding"
        ],
        "Interesting Circuits and their analysis": [
          "Summer Circuits",
          "Subtractor Circuits",
          "Phase splitter"
        ]
      },
      "requirements": [
        "Open mind to explore new learning in Analog circuits",
        "Simple application of KVL and KCL",
        "MOSFET : Analog design view point. ( Refer to our course : MOSFET : Foundation course for Analog Circuit Design)",
        "MOSFET : Structure , Region of operation , VTH equations, IDS equations ( A short review will be done in the course )",
        "Some understanding of Small signal modelling ( Review will be done in the course)"
      ],
      "description": "Analog Circuit Design is a course mostly designed for learners at all level.\nCircuit design can be complex and the only way to simply it is to break it down( Divide and conquer ) .\nThe idea of the course is mostly to build intuition and create memory/mental models for circuits.  We believe that , the intuition we create about circuits gives the power to design/analyze and solve circuits.\nThe focus in this course is purely on Amplifiers : Single Stage and Multistage( Cascode and Cascade)\nSome practical aspects will also be discussed which will be beneficial for Students / Beginners in Analog circuit design.\nFew quick analysis techniques will be discussed . For example : Quick GM calculations , Input / Output resistance calculation , Voltage budgeting for a given supply ,  high impedance nodes  , gm reduction and increase techniques , etc\nCase studies on some important circuit configuration will be discussed in detail. In each case study we will concentrate on deriving the Gain, GM and RO without using complex equation.\nPlease note that, this course is not designed for experts but for beginners/Students and early design engineers.\nExperts or experienced engineers can review this course and refresh your design concepts.\nI look forward to welcome you to this course and explore new dimension to look at circuits.  Happy Learning .",
      "target_audience": [
        "Beginners in Analog circuit Design",
        "Students who want to make career in Analog circuit Design or Work on Projects",
        "Working professionals who want to build good understanding on Amplifiers  ( Not recommended for Experts )",
        "If you are someone with good expertise ,this course can be a good review to refresh your understanding"
      ]
    },
    {
      "title": "Arduino for Absolute Beginners by Robojax",
      "url": "https://www.udemy.com/course/robojax-arduino/",
      "bio": "Learn Arduino from a teacher with proven profile",
      "objectives": [
        "What is Arduino, Arduino development boards and introduction to Arduino IDE",
        "Sensors and switches like tile, flame,reed,sound and other sensor",
        "Displays such as LED, LCD and OLED displays",
        "Temperature sensors",
        "Arduino programming elements such as Functions, Arrays, Loops and Switch",
        "Controlling Relays with Arduino",
        "DC motors, Stepper Motors and Servo motors",
        "Obstacle Avoidance methods and modules such as Infrared, Ultrasonic and laser",
        "Using infrared Remote to control TV, Motors and Servos",
        "Touch Sensor, 1, 4 and 16 channel sensor",
        "GPS and extracting gps location",
        "Clock and timer",
        "Keypads",
        "IoT ESP8266 WiFi Development board D1 Mini, NodeMCU",
        "IoT ESP32 WiFi, Bluetooth Development boards"
      ],
      "course_content": {},
      "requirements": [
        "Student should know simple grade 9 math",
        "Own PC with windows and be able to use basic features of windows",
        "Desktop or laptop windows machine"
      ],
      "description": "This course starts from absolute beginner and up. Student will learn using Arduino to build robotics and electronics projects from simple LED blink to detecting obstacle to controlling servo motors or connecting to WiFi and controlling motor.\nAll section have fully explained video for each project and each line of code. For each project student will get wiring diagram to build the project. The codes and related links are provided within the same lecture.\nMain Sections of course are:\n· Introduction to Arduino board and Arduino IDE\n· Sensors and switches\n· Controlling Relay with Arduino\n· Arduino programming elements such as\no Functions\no Array and multidimensional array\no While and \"for\" loop\no Switch and case\n· Temperatures Sensors without display, with LCD, LED and other types of displays\n· Obstacle Avoidance such as\no Infrared\no Ultrasonic\no Laser\n· DC motors controller\n· Clock and Timers\no Arduino timer and clock\no 4 Digit clock\no Timer to control a load based on time\n· Stepper motor control\n· ESP8266 WiFi IoT, D1 Mini, NodeMCU\no Control Stepper motor over WiFi\no Turn ON and OFF AC bulb\n· ESP32 WiFi IoT, Bluetooth development boards\n· AC Projects\no AC dimmer with Arduino\no AC Switch to turn ON/OFF AC load with Arduino and push buttons\n· Displays\n· Infrared and remote control\n· Touch sensor\n· GPS\n· Keypads and Joystick",
      "target_audience": [
        "Beginners who want to learn Arduino and build projects",
        "University and College Student and anyone who want to learn to make tasks automated",
        "Factory or industrial institution to use project or educate staff"
      ]
    },
    {
      "title": "XBee and ZigBee Technologies for the Internet of Things",
      "url": "https://www.udemy.com/course/deesewirelessmodulesforiot/",
      "bio": "Interested in learning how to build simple Internet of Things (IoT) Systems?",
      "objectives": [
        "electrical engineering",
        "software development in Java and JavaScript"
      ],
      "course_content": {},
      "requirements": [
        "Be able to understand code developed for Java, Python, and JavaScript"
      ],
      "description": "This course is directed at students who desire to learn to build hardware and software for Internet of Things (IoT) related projects quickly. It teaches students how to develop systems that employ the Digi-manufactured XBee Series 1 and Series 2 radios based on the ZigBee communication protocol. Specifically, it addresses the following topics: 1) XBee Series 1 radio for point-to-point communication, 2) the Digi Connectport X2 as a star network coordinator, 3) XBee Series 2 radio in AT/transparent mode, 4) XBee Series 2 radio in API mode, 5) relevant python programming basics, 6) data acquisition from a sensor via S2 radio, 7) overview of other Digi-manufactured devices relevant to ZigBee. The course provides an accompanying written document including code examples that students may download and adapt for their purposes.\nThe IEEE 802.15.4 Standard is very useful for the design of low-power wireless sensors. This course explores how technologies based on that standard, like ZigBee, may be applied to various Internet of Things (IoT) and Cyber-Physical Systems applications. This course is aimed at those students with at least some minimal experience building circuits on a breadboard and programming in an object-oriented language like Python. However, beginner students can still take a lot from this course, combining it with free online tutorials on building circuits and programming.",
      "target_audience": [
        "Intermediate Software and Hardware Engineers with Interest in the Internet of Things and Cyber-Physical Systems"
      ]
    },
    {
      "title": "Learn how To Test Motherboard SMD Components with multimeter",
      "url": "https://www.udemy.com/course/computer-repair-how-to-test-motherboard-components-course/",
      "bio": "Learn how to test surface mount devices SMD & Through Hole Technology component THT, Laptop repair course, Electronics",
      "objectives": [
        "How to test Surface Mount Devices (SMD)",
        "How to test Through Hole Technology (THT) Components",
        "How to test resistors, capacitors, diodes, transistors etc",
        "Understand how to calculate resistor and capacitors codes",
        "Learn the working principle of SMD components."
      ],
      "course_content": {},
      "requirements": [
        "You will learn everything you need to know"
      ],
      "description": "- 16 Reasons why you should choose this course.\nThe course will teach you Everything about how to test SMD & THT components using the multimeter;\nThe course is created with perfect care by a computer engineer;\nOne-On-One Support;\nThe course is not long, so you can complete it in a short time, and then enjoy your new experience;\nYour inquiries will be answered in a short time with a full explanation;\nSimple and easy-to-understand explanation with examples;\nA certificate will be provided upon completion of the course;\nYou are going to learn how to test surface mount devices;\nYou are going to learn how to test through-hole technology components;\nYou will learn how to test and check motherboard components step by step;\nYou are going to learn how to calculate SMD resistor codes;\nYou are going to learn how to calculate SMD capacitor codes;\nYou are going to understand the working principle of SMD and THT components;\nYou will learn how to use a digital multimeter;\nYou will learn many tips, secrets, and tricks about testing components.\nThis course will transform you from a beginner to a Pro.\nTopics that we will be discussing in this course are :\nHow to use the Multimeter in the correct way.\nDefinition & Types of Resistors;\nResistor's Symbols & Code Calculation;\nHow To Test SMD Resistors - Practical lecture;\nDefinition, Types & Characteristics Of Capacitors\nElectrolytic & Tantalum Capacitors\nCeramic Capacitors, Symbols & Code Calculation\nHow To Test SMD Capacitors - Practical lecture -\nDefinition, Symbols & Types of SMD Diodes\nHow To Test SMD Diodes - Practical lecture -\nDefinition & Types of Transistors\nHow To Test Transistors - Practical lecture -\nDefinition & Types of MOSFETs\nHow To Test MOSFETs - Practical lecture -\nYou will also learn many tips & tricks that will make you a hardware professional and have a deep understanding of how to test the motherboard components\nI will guide you step by step with a straightforward explanation of this course.\nIf you are interested in one of the points we talked about before, then this course is for you.\nWhat are you waiting for?\nEnroll now and join us.\nI'd love to see you in the class.",
      "target_audience": [
        "Everyone who want to understand how to test SMD components.",
        "Electronic and hardware students and technicians."
      ]
    },
    {
      "title": "Computing Fundamentals",
      "url": "https://www.udemy.com/course/ic3-gs4-computing-fundamentals/",
      "bio": "Computing Fundamentals",
      "objectives": [
        "Learn about the operating system fundamentals",
        "Identify components of a personal computer",
        "Understand the working of computer networking",
        "Develop concept of software and its licensing",
        "Learn the basic troubleshooting techniques"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Introduction",
          "Instructor Introduction"
        ],
        "Module 01 - Operating System Fundamentals": [
          "Operating System Fundamentals",
          "Lesson 1: What is an Operating System?",
          "How Applications and Hardware Work with an OS",
          "The Old Days of the CLI",
          "What the Modern OS Supplied",
          "Demo - Navigating a Modern App",
          "Demo - Working with Multiple Apps",
          "Common OS Features",
          "Demo - Working with Windows",
          "Directory Infrastructure",
          "Demo - Managing Files and Folders",
          "Drivers and Hardware",
          "Common Interface",
          "Common Interface (cont.)",
          "Demo - Signing In to Windows 8 and Managing Tiles",
          "Demo - Using the Account ID Menu",
          "Demo - Viewing the Charms",
          "Demo - Working with Files and Folders",
          "Demo - Navigating the Desktop",
          "Directory Infrastructure",
          "Updates and Patches",
          "Demo - Control Panel",
          "Lesson 2: Configuring the Operating System",
          "Visual Options",
          "The Background",
          "Demo - Desktop Background",
          "Demo - Working with the Elements of a Desktop Window",
          "Lesson 3: What is an Application?",
          "Working with the Operating System",
          "Working with the Software",
          "Security",
          "Lesson 4: Using Control Panel",
          "Software",
          "Demo - Adding/Removing Software",
          "Hardware",
          "Visual Devices",
          "Date/Time",
          "Servers",
          "Module 01 Review",
          "Review Questions"
        ],
        "Module 02 - Computer and Network Terminology": [
          "Computer and Network Terminology",
          "Lesson 1: Hardware and Peripherals",
          "Hardware and Peripherals",
          "Lesson 2: Storage",
          "Demo - Hardware",
          "Storage Devices",
          "How a Hard Drive Works",
          "Demo - Storage",
          "Lesson 3: Connectivity Devices",
          "Server Types",
          "Desktop",
          "Lesson 4: Network Components",
          "Switches",
          "Routers",
          "Demo - Network Settings",
          "Firewalls",
          "Module 02 Review",
          "Review Questions"
        ],
        "Module 03 - Working with Software and the OS": [
          "Working with Software and the OS",
          "Lesson 1: Software and Concepts",
          "Managing Software",
          "Software",
          "Software (cont.)",
          "Demo - Changing Windows Defender Settings",
          "Lesson 2: Licensing",
          "Types of Software Licenses",
          "Pirating",
          "Demo - Licenses",
          "Lesson 3: Using Software",
          "Hardware Limitations",
          "Presentations",
          "Publishing",
          "Content and Entertainment",
          "Working with Media",
          "Demo - Applications",
          "Lesson 4: Software Tools",
          "Database vs. Spreadsheet",
          "Demo - Database vs. Spreadsheet",
          "File Compression",
          "Demo - File Compression",
          "Disk Management",
          "Malware Detection",
          "Module 03 Review",
          "Review Questions"
        ],
        "Module 04 - Troubleshooting": [
          "Troubleshooting",
          "Lesson 1: Software",
          "Updates",
          "Removing Malware",
          "Safe Mode",
          "Knowledge Base",
          "Demo - Getting Help",
          "Task and Process Management",
          "Demo - Task Manager",
          "Lesson 2: Hardware, Devices, and Peripherals",
          "Firmware",
          "Cables and Connections",
          "Devices and Peripherals",
          "Lesson 3: Backup and Restore",
          "Backups",
          "Demo - Backups",
          "Module 04 Review",
          "Review Questions",
          "Course Closure"
        ]
      },
      "requirements": [
        "The course has no formal perquisites.",
        "Anyone can enroll for this course. Please note that the course is very basic in nature; hence, it is not recommended for experienced professionals."
      ],
      "description": "The Computer Fundamentals course is an entry-level training course which targets to develop basic computer literacy among the candidates. The course is oriented towards enabling the candidates to learn the basic concepts of operating system, personal computer, computer networking and to troubleshoot common day-to-day problems that may arise in a very small office or personal setup.\nThis course is designed for staff members of an organization who are transitioning to personal computers from manual work. The course helps the organization to reduce unnecessary burden on their IT team by enabling the non-IT staff to take care of the very basic issues they may face while using personal computers at their workplaces.",
      "target_audience": [
        "Students beginning to learn to use computer",
        "Non-IT staff members of an organization",
        "Candidates looking forward to gain basic knowledge about computers"
      ]
    },
    {
      "title": "Fiber Optics Splicing and Termination Part 1",
      "url": "https://www.udemy.com/course/fiber-optics-splicing-and-termination-part-1/",
      "bio": "fiber splicing and termination",
      "objectives": [
        "Fiber Optics splicing",
        "fiber optics termination",
        "Testing fiber optics",
        "fiber optics color code"
      ],
      "course_content": {
        "Course introduction": [
          "Introduction"
        ],
        "Basic Fiber optics theory": [
          "Theory"
        ],
        "Connectors": [
          "connectors"
        ],
        "Tools": [
          "Tools needed"
        ],
        "solvents": [
          "Solvents used"
        ],
        "Polishing papers": [
          "Polishing papers used"
        ],
        "Cleaning tools": [
          "Cleaning tools used"
        ],
        "Color codes": [
          "Color code"
        ],
        "Splicing steps": [
          "Splicing steps"
        ],
        "Splicing": [
          "Preparing fiber enclosure",
          "Inserting strands in funnel kit",
          "Putting on connector boots",
          "Splicing the glass",
          "Putting bonding solution",
          "Putting glass in connector",
          "Cleaving",
          "Air polishing",
          "Polishing"
        ]
      },
      "requirements": [
        "knowledge about fiber optics"
      ],
      "description": "This course provides skills needed in fiber optics splicing and termination. The course helps individuals understand different testing methods as well as basic theory needed to understand fiber optics. In this course we shall look at different connector types, cleaning tools used in splicing. Also in general we shall understand the different types of tools used in splicing and termination.",
      "target_audience": [
        "IT",
        "software",
        "Cabling technicians",
        "network engineers",
        "Telecommunication engineers",
        "infrastructure engineers",
        "engineers",
        "Technicians",
        "electrical engineers",
        "physicists",
        "Technologists",
        "programming",
        "artificial intelligence",
        "machine learning",
        "c programming",
        "C# programming",
        "comptia",
        "network +",
        "CCNA",
        "microsoft",
        "server"
      ]
    },
    {
      "title": "Arduino Communication with SPI Protocol",
      "url": "https://www.udemy.com/course/spi-arduino-communication-with-spi-protocol/",
      "bio": "Arduino Communication with SPI Bus: A step by step guide to Master SPI Protocol and Start using it in your Arduino",
      "objectives": [
        "What is SPI and how it works",
        "Advantages of SPI",
        "Disadvantages of SPI",
        "SPI Operation",
        "Main SPI Bus Library Functions",
        "Interface different devices with Arduino using SPI",
        "How to implement SPI in your project",
        "What is the difference between SPI and other communication methods",
        "Why using SPI will make your life easier",
        "How to code SPI the right way and how to talk to multiple devices easily",
        "A practical example of SPI"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Section Intro",
          "Introduction",
          "Exploring Serial Peripheral Interface (SPI) with Arduino",
          "Who We Are?",
          "Quiz",
          "Summary",
          "Reading Meterial"
        ],
        "What is SPI": [
          "Section Intro",
          "What is SPI",
          "SPI Working Principle",
          "Quiz",
          "Summary",
          "Reading Meterial",
          "Advanced SPI Communication Between Arduino Boards – Master-Slave Data Exchange"
        ],
        "Arduino SPI Pins": [
          "Section Intro",
          "Arduino SPI Pins",
          "Summary",
          "Quiz",
          "Reading Meterial"
        ],
        "SPI Library in Arduino": [
          "Section Intro",
          "SPI Library in Arduino",
          "Quiz",
          "Summary",
          "Reading Meterial",
          "Implementing SPI Data Logging and Real-Time Monitoring with Arduino"
        ],
        "Download and Install The Required Software": [
          "Section Intro",
          "Software Requirements",
          "Summary",
          "Quiz",
          "Reading Meterial"
        ],
        "Arduino to Arduino SPI Communication": [
          "Section Intro",
          "Circuit Design Arduino to Arduino SPI Communication",
          "Coding Master",
          "Quiz",
          "Coding Slave",
          "Summary",
          "Reading Meterial",
          "Design and Implement SPI Communication Between Two Arduino Boards"
        ],
        "Download and Install Software Section": [
          "Download and Install Proteus Software",
          "Download and Install Arduino Software",
          "Download and Install Circuit Design and Wiring Software",
          "Quiz"
        ],
        "Practice Test": [
          "Arduino SPI Communication Practice Test"
        ],
        "Course Project": [
          "Course Project",
          "Demonstrating SPI Communication Between Arduino and Peripheral Devices"
        ],
        "Course Wrap-Up": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A computer to run the software",
        "A basic knowledge in C Programming language",
        "No Material is required for this Course"
      ],
      "description": "Unlock the power of Serial Peripheral Interface (SPI) and take your Arduino projects to the next level! This course provides a practical, in-depth journey into mastering SPI communication — the go-to protocol for high-speed, synchronous data transfer between microcontrollers and peripherals.\nWhether you're an electronics hobbyist or engineering student, you’ll go from basic concepts to designing real-time SPI applications using multiple Arduino boards. This course is structured with digestible sections including interactive quizzes, guided coding lessons, hardware simulations, and real-world assignments to ensure you're job-ready.\nInside the course, you’ll:\nUnderstand the core of SPI and how it differs from other communication protocols.\nMaster SPI pins and the Arduino SPI library with clarity.\nLearn how to code both Master and Slave Arduino boards.\nUse Proteus, Arduino IDE, and design tools to create full circuits and test your skills.\nBuild hands-on projects like real-time data logging and multi-board communication.\nWhat You Will Learn\nCore principles of SPI protocol\nHow SPI compares to other protocols like I2C or UART\nIdentifying and using SPI pins on Arduino\nUsing the SPI library in practical scenarios\nReal-world SPI communication: Master and Slave setup\nFull Arduino-to-Arduino communication workflow\nData logging and real-time monitoring projects\nInstalling and using Proteus and Arduino software\nCircuit design for multi-device communication\nBest practices for troubleshooting SPI communication\nWho Is This Course For\nArduino beginners who want to go beyond blinking LEDs\nEngineering students learning embedded communication\nMakers & hobbyists wanting reliable multi-device setups\nEducators teaching communication protocols in the classroom\nAnyone preparing for IoT or embedded systems roles\nInstructor Bio\nYour instructor is an experienced embedded systems engineer and Arduino developer, with over 10 years of real-world project experience in industrial automation and IoT systems. Known for clear explanations and practical teaching, they’ve helped thousands of learners move from basic electronics to hands-on embedded programming.\nRequirements\nBasic knowledge of Arduino and electronics\nArduino board (preferably Uno) x2\nUSB cables, jumper wires, and breadboard\nWillingness to learn and build!\nThis course teaches you how to get the most out of your Arduino by adding the SPI bus to it! It teaches you how to get started, set up, and work with this protocol. The course includes examples of using SPI in various projects that will help you save time during debugging.\nFAQ Section\nDo I need any hardware?\nWhile not mandatory, using two Arduino boards (e.g., Uno), jumper wires, and a breadboard will enhance the learning experience.\nWhat software is required?\nYou’ll install the Arduino IDE, Proteus for simulation, and other helpful circuit design tools — all covered in the course.\nIs there a refund policy?\nYes, there's a 30-day money-back guarantee if you're not satisfied.\nCan I interact with the instructor or other students?\nAbsolutely! The course includes access to a learning community and Q&A section where your questions get answered.\n\n\nEnroll Now to Start Building Smarter Arduino Systems",
      "target_audience": [
        "Anyone interested in talking to multiple devices easily via SPI the right way",
        "Anyone Interested in Interfacing Arduino with other ICs or devices via SPI",
        "Anyone Interested in Controlling different devices using SPI Protocol",
        "Arduino Lovers",
        "Microcontrollers Geeks"
      ]
    },
    {
      "title": "Verification Series Part 3: UVM Essentials",
      "url": "https://www.udemy.com/course/uvm-for-verification-part-1-fundamentals/",
      "bio": "Step by Step Guide from Scratch",
      "objectives": [
        "Fundamentals of Universal Verification Methodology",
        "Reporting Macros and associated actions",
        "UVM Object and UVM Component",
        "UVM Phases",
        "TLM Communication",
        "Sequences",
        "UVM Debugging features",
        "Building UVM Verification Environment from Scratch"
      ],
      "course_content": {},
      "requirements": [
        "Fundamentals of SystemVerilog Testbench Environment"
      ],
      "description": "Writing Verilog test benches is always fun after completing RTL Design. You can assure clients that the design will be bug-free in tested scenarios. As System complexity is growing day by day, System Verilog becomes a choice for verification due to its powerful capabilities and reusability helping verification engineers quickly locate hidden bugs. The System Verilog lags structured approach whereas UVM works very hard on forming a general skeleton. The addition of the configuration database Shifts the way we used to work with the Verification Language in the past. Within a few years, verification engineers recognize the capabilities of UVM and adopted UVM as a defacto standard for the RTL Design verification. The UVM will have a long run in the Verification domain hence learning of UVM will help VLSI aspirants to pursue a career in this domain.\nThe course will discuss the fundamentals of the Universal Verification Methodology. This is a Lab-based course designed such that anyone without prior OOPS or system Verilog experience can immediately start writing UVM components such as Transaction, Generator, Sequencer, Driver, monitor, Scoreboard, Agent, Environment, Test. Numerous coding exercises, projects, and simple examples are used throughout the course to build strong foundations of the UVM.",
      "target_audience": [
        "Anyone interested in Verification Engineer Role"
      ]
    },
    {
      "title": "Step-by-Step Learn Wonderware InTouch SCADA (PLC-SCADA-2)",
      "url": "https://www.udemy.com/course/step-by-step-learn-wonderware-intouch-scada-practically/",
      "bio": "Complete practical Training on Wonderware InTouch SCADA With Industry Based Examples | InTouch SCADA A-Z",
      "objectives": [
        "Overview of Wonderware InTouch SCADA.",
        "Function of InTouch SCADA Software.",
        "Animation Links in SCADA System.",
        "Script writing.",
        "Trends in SCADA System.",
        "Alarm System.",
        "Recipe Management.",
        "SCADA Security.",
        "Interfacing with PLC and DDE Protocol.",
        "How to Configure Intouch to Query Database ??"
      ],
      "course_content": {},
      "requirements": [
        "Students are supposed to be familiar with Desktop/Laptop.",
        "No other prerequisites for this course, Because instructor will teach everything from scratch."
      ],
      "description": "The SCADA system is used to control and monitor physical processes, examples of which include electricity transmission, gas transportation and pipelines in oil, water distribution, traffic lights, and other systems used based on modern society Use.\nSCADA is merely a software whereas HMI is a hardware. The advantage of SCADA is we can use a computer, install the SCADA software and can work it like an HMI as well.\nSCASA-SCADA stands for supervisory control and data acquisition. This process is a type of software application program for control. SCADA is a central control system that includes controller network interfaces, input / output, communication equipment and software.\nWonderware \"In Touch\" provides a unified integrated view of all your controls and information resources. Wonderware software is used in various industries, including: automotive assemblies, facilities management, food and beverage, CPG, mining and metals, electricity, oil and gas, chemical, energy, and water and waste water.\nAfter doing this course, you can easily work on the other InTouch version. This software is used to Communicate with all the PLC series. And the instructions and properties remaining the same.\nThis course will teach you step by step How to make a SCADA design & SCADA System to any industrial process Monitor and Control.\nWe have made explanation by Real Time LIVE Camera & Designing Software to understand the concept clearly.\nFollowing is the brief information about the course:\nWhat is SCADA System?\nWhy we required SCADA System?\nHow to do use Animation Link or Properties in SCADA Software? (Touch Links, Colour Fill, Object Size, Object moment, object present Fill, Visibility, Blink, Orientation and Value Display etc.)\nHow to do Script writing?\nHow to use Trends in SCADA System?\nHow to make an Alarm System in SCADA system?\nHow to do Recipe Management Implementation?\nHow to do Security Implementation?\nHow to do Interfacing with PLC?\nHow to use DDE Protocol?\nSCADA Based Projects.",
      "target_audience": [
        "Students who are pursuing or having Masters/ Bachelor’s Degree /Diploma in EC/EE/EEE/EI Branches.",
        "Working Professionals are also invited to join this course to enhance their knowledge in Industrial Automation.",
        "Application Engineers.",
        "SCADA Engineer."
      ]
    },
    {
      "title": "Learning Complete PCB Design: From an Idea to a Product",
      "url": "https://www.udemy.com/course/learning-complete-pcb-design-from-an-idea-to-a-product/",
      "bio": "Learn PCB design (1, 2 & 4 Layers) from the ground up using a free browser based PCB design software known as EasyEDA",
      "objectives": [
        "Learn terminologies related to PCB",
        "Draw schematic of your own circuit",
        "Design your own single and double layer PCB",
        "Fabricating PCB with the help of online manufacturers"
      ],
      "course_content": {},
      "requirements": [
        "A computer with an internet connection",
        "Basic electronics knowledge"
      ],
      "description": "This is a beginner’s course with content focused on PCB design using EasyEDA. All the content of this course is based on the aforementioned software which is either online browser-based or downloadable. you only require a web browser and an active internet connection to start making your very own PCB.\nThis course is designed for new graduates and new engineers so the topics are explained in a simple manner to the audience. The course covers lots of information and topics which would help you become a good designer. You will have a better understanding of how PCB design and PCB manufacturing are related to each other and how they influence each other.\nThis course aims at providing a comprehensive and detailed explanation of how to download, create a circuit, and how to use the tools in the platform, to export the design for manufacturing.\nIn this course, you will learn from start to finish, from zero to production-ready how to design a Printed Circuit Board. It will help you to improve your PCB design skills.\nIn this course you will learn about:\n\n\nBasics of PCBs\nLearn terminologies related to PCB\nDraw a schematic of your own circuit\nDesign your own single and double layer PCB\nFabricating PCB with the help of online manufacturers\nLearn how a PCB is manufactured",
      "target_audience": [
        "Anyone who wants to learn PCB design",
        "Hobbyist and Makers who want to transfer their circuits from breadboard to PCB"
      ]
    },
    {
      "title": "FPGA Design and VHDL",
      "url": "https://www.udemy.com/course/fpgavhdl/",
      "bio": "A course designed to teach FPGA design and digital design (basic and intermediate) using VHDL as a language",
      "objectives": [
        "Basics of Digital Design",
        "Combinational Logic design using VHDL",
        "Sequential Logic Deign Using VHDL",
        "Finite State Machines using VHDL",
        "FPGA design Fundamentals"
      ],
      "course_content": {},
      "requirements": [
        "Basics of Digital Design (AND, OR, NAND, NOR gates, flip flops, counters and registers)",
        "Xilinx Webpack ISE software ( http://www.xilinx.com/products/design-tools/ise-design-suite/ise-webpack.htm )",
        "A PC with windows"
      ],
      "description": "A course designed to teach the candidate the concepts of digital systems design using FPGAs. The design is taught using a Hardware Description Language (HDL) called as VHDL. The course will discuss in-depth all the components of VHDL and how different language constructs help us in designing hardware. The course will then give the student an option of doing real hardware experiments remotely or perform simulation experiments using the software that is available to download from the internet.",
      "target_audience": [
        "Electrical/ Electronics/ Electronics and Communication Engineering students [2nd, 3rd and Final Year]",
        "Engineering Diploma Students [3rd and Final Year]",
        "Working Professionals"
      ]
    },
    {
      "title": "Mastering RTOS: Hands on FreeRTOS and STM32Fx with Debugging",
      "url": "https://www.udemy.com/course/mastering-rtos-hands-on-with-freertos-arduino-and-stm32fx/",
      "bio": "Learn Running/Porting FreeRTOS Real Time Operating System on STM32F4x and ARM cortex M based Mircocontrollers",
      "objectives": [
        "Understanding various RTOS concepts with FreeRTOS Programming and Debugging",
        "Learn Complete Step by step method to run FreeRTOS on STM32 MCUs using OpenSTM32 System Workbench",
        "Using STM32 Standard Peripheral Driver APIs to configure peripherals",
        "FreeRTOS Task Creation , Deletion, Scheduling using with code examples",
        "Important scheduling policies of FreeRTOS Scheduler",
        "FreeRTOS Stack and Heap Management",
        "Right ways of Synchronizing between tasks using Semaphores.",
        "Right ways of Synchronizing between a task and an interrupt using semaphores",
        "Synchronization between multiple events and a task",
        "FreeRTOS Queue management like creation, sending, receiving, blocking, etc",
        "Implementing mutual exclusion between Tasks using Mutex services and semaphores",
        "Understanding Context Switching with in detail code explanation",
        "Understanding Architecture specific codes like SVC_handler, PendSV_handler, SysTick Handler line by line",
        "You will learn about kernel Tick timer, its importance, the kernel tick frequency and its configuration details.",
        "Understanding complete ARM Cortex M and FreeRTOS Priority model and its configuration related informations",
        "FreeRTOS Debugging using SEGGER SystemView Software",
        "Lots of articles which explains line by line the ARM Cortex M related FreeRTOS architecture specific codes",
        "Low power instructions use case in FreeRTOS scenario",
        "Lots of coding exercises",
        "Debugging with SEGGER software toolkit by taking snapshot and continuous mode recording"
      ],
      "course_content": {
        "Overview of the course": [
          "About the instructor",
          "Important Note",
          "What is this course all about ??",
          "Download Course Slides",
          "FAQ",
          "Note for the Students"
        ],
        "RTOS Introduction": [
          "What is Real Time Application(RTAs) ??",
          "What is Real Time Operating System(RTOS) ?",
          "RTOS vs GPOS : Task Scheduling",
          "RTOS vs GPOS : Latency",
          "RTOS vs GPOS : Priority inversion",
          "What is Multitasking ?"
        ],
        "IDE installation and development board": [
          "About the IDE",
          "IDE installation(Windows)",
          "IDE installation(Linux)",
          "Development board used in this course",
          "Downloading documents"
        ],
        "Downloading and Installing FreeRTOS": [
          "Downloading FreeRTOS kernel source"
        ],
        "Creating FreeRTOS based project for STM32 MCUs": [
          "Creating new STM32 project",
          "Adding FreeRTOS kernel source to project",
          "Include path settings",
          "FreeRTOSConfig.h and other settings",
          "Time base selection for STM32+FreeRTOS project",
          "Adding FreeRTOS to STM32 Project Using STM32CubeIDE's Graphical Interface"
        ],
        "FreeRTOS Task Creation": [
          "What is task ?",
          "FreeRTOS task creation API",
          "Task priorities in FreeRTOS",
          "Exercise 001 coding",
          "Scheduling policies",
          "Exercise 001 coding contd.",
          "Exercise 001 testing",
          "Behind the scene task creation",
          "Test Drive"
        ],
        "Trace tool integration": [
          "Trace tool download",
          "What is segger systemview software ?",
          "Segger systemview recording modes",
          "Segger systemview overview",
          "Segger systemview target integration",
          "Analyzing exercise 001 using segger trace",
          "Analyzing cooperative scheduling trace"
        ],
        "IDLE Task and Timer Svc Task of FreerRTOS": [
          "Idle and timer services task"
        ],
        "FreeRTOS Scheduler": [
          "FreeRTOS scheduler",
          "Understanding implementation of xPortStartScheduler() of port.c"
        ],
        "FreeRTOS and ARM Cortex Mx Arch. Specific details": [
          "FreeRTOS Kernel interrupts",
          "RTOS Tick and SysTick Timer explanation",
          "Who configures the RTOS Tick Timer ?",
          "What RTOS Tick ISR (SysTick ISR) does ? summary"
        ]
      },
      "requirements": [
        "Basic knowledge of C and Micro controller could be added advantage but not mandatory"
      ],
      "description": ">> The Complete FreeRTOS Course with Programming and Debugging <<\nLatest update: RTOS debugging using SEGGER SystemView Trace tools, STM32 hal. Peripheral APIs and More examples are added.\nSubtitles(CCs) and transcripts are available for this course.\nDedicated Support team to answer Q/A\n\n\nThe course is designed for Beginners to Advanced audience.\n\n\nShort Description:\n\"The Biggest objective of this course is to demystifying RTOS practically using FreeRTOS and STM32 MCUs\"\nSTEP-by-STEP guide to port/run FreeRTOS using development setup which includes,\n1) STM32CUBEIDE + STM32F4xx + FreeRTOS + SEGGER SystemView\n\n\nDemystifying the complete Architecture (ARM Cortex M) related code of FreeRTOS which will massively help you to put this kernel on any target hardware of your choice.\n\n\nDevelopment board used in this course:\nIf you already have an STM32 Based development board, then please continue using the same. The course uses STM32F407x DISCOVERY(STM32F407G-DISC1) board\n\n\nSoftware used in this course:\n1)  STM32CUBEIDE which can run on all OS platforms(WIN/OSX/LINUX) (free)\n2) SEGGER Systemview software free edition\n\n\nOperating system information:\nWIN/MAC/UBUNTU\n\n\nDebugging FreeRTOS with SEGGER SYSVIEW software\nIn this course debugging freeRTOS with SEGGER Systemview software is covered with STEP-BY-STEP guidance. please watch the preview videos.\n\n\nEmbedded Debugging and Quizzes\nDebugging embedded code is really interesting and learning various debugging techniques and features are very much essential to have a good grip on embedded debugging.\n\n\nAlso, the course consists of various interview questions which will test your knowledge gained !.\n\n\nMy promise!\nI will personally answer your questions about this material, either privately or in a group discussion. If you are in any way not satisfied, for any reason, you can get, No questions asked a full refund from Udemy within 30 days. But I am confident you won't need to. I stand behind this course 100% and am committed to helping you.\n\n\nLearning order of FastBit Embedded Brain Academy Courses,\nIf you are a beginner in the field of embedded systems, then you can take our courses in the below-mentioned order.\nThis is just a recommendation from the instructor for beginners.\n1) Microcontroller Embedded C Programming: absolute beginners(Embedded C)\n2) Embedded Systems Programming on ARM Cortex-M3/M4 Processor(ARM Cortex M4 Processor specific)\n3) Mastering Microcontroller with Embedded Driver Development(MCU1)\n4) Mastering Microcontroller: TIMERS, PWM, CAN, RTC,LOW POWER(MCU2)\n5) Mastering Microcontroller: STM32-LTDC, LCD-TFT, LVGL(MCU3)\n6) Embedded System Design using UML State Machines(State machine)\n7) Mastering RTOS: Hands-on FreeRTOS and STM32Fx with Debugging(RTOS)\n8) ARM Cortex M Microcontroller DMA Programming Demystified(DMA)\n9) STM32Fx Microcontroller Custom Bootloader Development(Bootloader)\n10) Embedded Linux Step by Step using Beaglebone Black(Linux)\n11) Linux device driver programming using Beaglebone Black(LDD1)\n\n\nOther programming courses\n1) Master The Rust Programming Language : Beginner To Advanced",
      "target_audience": [
        "Professionals interested in exploring Embedded systems",
        "Hobbyists and students who want to start their career in Embedded world",
        "RTOS Beginners and Intermediate students",
        "If you think about 'embedded' then think about taking this course. you will not be disappointed"
      ]
    },
    {
      "title": "Build Your Own RealTime OS (RTOS) From Ground Up™ on ARM 1",
      "url": "https://www.udemy.com/course/rtos-building-from-ground-up-on-arm-processors/",
      "bio": "Build Your Own RealTime Operating Systems from first principles . Practice on STM32 and TIVA C boards",
      "objectives": [
        "Build a Real-Time Operating System from Scratch",
        "Build Round-Robin Schedulers",
        "Build Cooperative Schedulers",
        "Build Periodic Schedulers",
        "Build First Come First Served Scheduler",
        "Build Rate Monotonic Schedulers",
        "Build a board support package from scratch",
        "Calculate the CPU Utilization of an RTOS",
        "Write Bare-Metal Embedded-C Code",
        "Write Assembly code",
        "Understand the OS Support Features of the Cortex-M Architecture",
        "Understand the Internals of an RTOS Kernel",
        "Be Implement to implement and explain popular scheduling algorithms",
        "Be able to explain the Cortex-M Architecture",
        "Be able to give a lecture on Real-Time Operating Systems"
      ],
      "course_content": {
        "Setting Up": [
          "Downloading CubeIDE",
          "Installing CubeIDE",
          "Development Board",
          "Getting the Required Documentation",
          "Setting Up the Project Tree (Part I)",
          "Setting Up the Project Tree (Part II)",
          "Getting the best out of this course."
        ],
        "[OPTIONAL] Setting Up Keil uVision 5": [
          "Downloading Keil uVision",
          "Installing Keil uVision 5",
          "Installing Packs",
          "Overview of Keil uVision 5",
          "Changing the Compiler"
        ],
        "Developing the Required Drivers": [
          "Programming : Developing the LED Driver (PartI)",
          "Notice",
          "Programming : Developing the LED Driver (PartII)",
          "[Keil uVision] : Programming : Developing the LED Driver",
          "Programming : Developing the UART Driver (Part I) - Approach",
          "Programming : Developing the UART Driver (Part II) - Initialization Function",
          "Programming : Developing the UART Driver (Part III) - Write Function",
          "[Keil uVision] : Programming : Developing the UART Driver",
          "Programming : Developing the Timebase Initialization Function",
          "Programming : Developing the Timebase Utility Functions",
          "[Keil uVision] : Programming : Developing the Timebase"
        ],
        "The Internals of Realtime Operating Systems": [
          "Programming : Experimenting with Blocking Code",
          "[Keil uVision] : Programming : Experimenting with Blocking Code",
          "Programming : Manual Context Switching",
          "[Keil uVision] : Programming : Manual Context Switching"
        ],
        "Introduction to Real-time Operating Systems": [
          "What is an RTOS?",
          "Performance Metrics of Real Time Operating Systems"
        ],
        "Software Flows": [
          "Busy Wait System",
          "Multi-Threaded Systems (With ISRs)",
          "Real-Time Systems"
        ],
        "The Stack": [
          "Stack & Memory Map",
          "Stack Manipulation"
        ],
        "Overview of Cortex-M OS Support Features": [
          "Inside the Microcontroller",
          "The Shadow Stack Pointer",
          "Exclusive access instructions",
          "The SysTick"
        ],
        "BOOT Sequence": [
          "Cortex-M Boot Sequence PART I",
          "Cortex-M Boot Sequence PRT II"
        ],
        "Introduction to Threads": [
          "The Thread",
          "Classification of Threads"
        ]
      },
      "requirements": [
        "Having basic C programming skills is a plus"
      ],
      "description": "This course teaches you how to build a Real-Time Operating Systems through intensive practice and theory. It starts by getting you excited through an introduction to the internals of a Real-Time Kernel on ARM Processors, which you shall implement yourself in code.Then we move on to learn all there  is about Real-Time Operating Systems, their various parts, how they work and then we finally build our own Real-Time Operating System exploring different scheduling algorithms and Inter-Thread communication tools.\nAt the end of this course you should be able to build your own Real-Time Operating System from scratch, give your own lecture on Real-Time Operating Systems, be able to build a Round-Robin Scheduler, be able to build a Periodic Scheduler, be able to calculate the CPU utilization of your RTOS, be able to build an OS Kernel etc. Please see the course curriculum section to find out all the amazing content awaiting you.",
      "target_audience": [
        "Embedded Systems Engineers",
        "Engineers in general",
        "Embedded System students",
        "Computer Engineering students",
        "Hobbyists"
      ]
    },
    {
      "title": "Fun & Easy Embedded Microcontroller Communication Protocols",
      "url": "https://www.udemy.com/course/fun-easy-embedded-microcontroller-communication-protocols/",
      "bio": "Learn the Fundamental Theory of Embedded Microcontroller Communication Protocols for Arduino and FPGA",
      "objectives": [
        "Understand the fundamentals of Transmitting bits to other devices",
        "Able to differentiate between the various serial protocol and decide which protocol is the best to use for a given application"
      ],
      "course_content": {},
      "requirements": [
        "Passion for Electronics",
        "Have an Arduino or Microcontroller to learn from.",
        "Understand that this is a theory only course and no programming is performed in this course."
      ],
      "description": "(This is a Theory-Only Course - No programming)\n\n----------------------------------------------\nThis course teaches you the basics of microcontroller communication protocols which you can apply instantly to your Arduino or microcontroller Projects. This course is for those who want to learn about communication electronics in an easy and simple way but who also don't really want to open a text book.\nAt the end of this course, you will understand the advantages and disadvantages, bandwidth speed, limitations, maximum transmission length and application of each of the following protocols:\nI2C or TWI\nSPI\nUART\nModbus RTU\nCAN BUS\nUSB\nEthernet\nPCIe\nThese theoretical concepts are important because you cannot use any protocol you wish for any applications. For example it is common knowledge that CAN BUS is best suited for automobile applications due to its reliability and robustness, hence using I2C or SPI would be at bad choice for this application. Another example would be for networking applications, Ethernet protocol is best suited for this as we know and USB would not be able to cope as network protocol.  To transfer massive amount of data such as images or video, you will learn why you cannot use UART but rather PCIe provides you more than enough bandwidth to transfer up to 4K video. This course covers how these protocols work and why they are so useful for their applications.\nSo if you are ready to get started, click on the take this course button and we'll get started with the main concepts. If for whatever reason you are not happy, you are covered by Udemy’s 30 day money back guarantee, full refund, no hassles...period!",
      "target_audience": [
        "Students who are new to electronics",
        "Students who want to learn about micrcontroller transmission protocols and who don't want to learn from a text book",
        "People who want to know the theory behind micro-controller protocols. (No Programming)"
      ]
    },
    {
      "title": "Raspberry Pi Full Stack",
      "url": "https://www.udemy.com/course/raspberry-pi-full-stack-raspbian/",
      "bio": "A whirlwind tour of full-stack web application development on the Raspberry Pi",
      "objectives": [
        "Setup the minimal Raspbian Lite operating system to the RPi.",
        "Learn how to work in headless mode",
        "Learn to install and use the a Python virtual environment.",
        "Install and use Flask, a Python-based web micro-framework",
        "Install and use uWSGI as the application server for Flask",
        "Install and use Nginx light-weight web server",
        "Setup systemd to automatically start your application",
        "Use the RPi GPIOs as digital input and outputs",
        "Use a DHT22 humidity and temperature sensor",
        "Install and use the SQLite database",
        "Use the Google Chart API to create visual representations of the sensor data",
        "Use JQuery to add interactivity to web pages",
        "Use Plotly for graphical analysis of sensor data",
        "Assign a static IP address to your Raspberry Pi",
        "Expose your application to the Internet, and access it from anywhere"
      ],
      "course_content": {
        "Introduction": [
          "0010 - What is this course about",
          "0030 - Parts you will need",
          "0060 - Code repository",
          "0070 – Course update briefing"
        ],
        "Get to know your Raspberry Pi": [
          "0110 - Raspberry Pi 3 specs and features",
          "0111 - Raspberry Pi 4 specs and features",
          "0120 - Raspberry Pi models",
          "0130a - Raspberry Pi vs Arduino high level comparison",
          "0130b - Raspberry Pi vs Arduino comparing the boards"
        ],
        "Getting Started": [
          "0160 - Operating systems for the Raspberry Pi",
          "0165 - Headless vs GUI",
          "Read this before you install the Raspberry Pi OS (in the next lecture)",
          "0170 - Download and Install Raspbian Lite",
          "0180 - How to enable SSH and configure Wifi in headless mode",
          "0190a - Boot for the first time and basic configuration",
          "0190b - Connect for the first time using Mac OS",
          "0190c - Boot for the first time and connection using Windows",
          "0210a - Working as the \"root\" user",
          "0210b - How to enable the \"root\" user for logging on with SSH"
        ],
        "How to recover from a serious glitch by backing up and restoring your SD card": [
          "0220a - Backup an SD card (Mac OS)",
          "0220b - Restore an SD card (Mac OS)",
          "0220c - Backup an SD card (Windows)",
          "0220d - Restore an SD card (Windows)"
        ],
        "Pins, GPIOs, and how to control them with Python": [
          "0250 - The Rapsberry Pi GPIO header and numbering system",
          "0260a - A taste of Python on the Command Line Interpreter",
          "0260b - A taste of Python on the Command Line Interpreter Functions",
          "0270a - A taste of Python with a simple program",
          "0280 - Wire a simple circuit",
          "0290a - Install the Python installer program pip",
          "0290b - Manipulate an LED using rpi.gpio",
          "0300 - Read a button",
          "0305 - Control an LED with a button",
          "Please read before you continue: DHT22 library update",
          "0310a - Install Git and the DHT library",
          "0310b - Use the DHT22 sensor"
        ],
        "Setup the Web application Stack": [
          "0340 - The Web Application Stack",
          "0350 - The Python Virtual Environment",
          "0360a - Set up system Python - preparation",
          "0360b - Download, compile and install Python 3",
          "0365 - Setup the app Python Virtual Environment",
          "0430a - Setup Nginx",
          "0430b - Setup Flask",
          "0435 - A tour of a simple Flask app",
          "0440a - uWSGI installation",
          "0440b - Nginx configuration",
          "0440c - USWGI configuration",
          "0440d - USWGI and Nginx configuration testing"
        ],
        "Styling with Skeleton": [
          "0450 - Configure systemd to auto-start uwsgi",
          "0460a - Install SQlite3",
          "0460b - Working with SQlite3",
          "0470a - Static assets and the Skeleton boilerplate CSS",
          "0470b - Setup the static assets directory",
          "0470c - Introducing the Skeleton boilerplate CSS",
          "0470d - Copying files using SFTP",
          "0480 - Flask templates",
          "0497 - Debugging a Flask app"
        ],
        "Getting started with our web application": [
          "0500a - Introduction to the section - Getting started with our web application",
          "0500b - Install the DHT library and the rpi-gpio module",
          "0500c - Install the DHT library and the rpi-gpio module",
          "0510 - Create a database to store sensor data",
          "0520 - Sensor data capture script",
          "0530 - Schedule sensor readings with cron",
          "0540a - Display database records in the browser - Python script",
          "0540b - Display database records in the browser - Template"
        ],
        "Implement the date range selection feature": [
          "0560a - Introduction - Implement the datetime range selection feature",
          "0560b - Select range of records in SQLite",
          "0570 - Set datetime range in URL and show records in browser",
          "0580 - URL querystring validation",
          "0590 - Quick tidying up",
          "0595 - Adding radio buttons for quick timedate range selection",
          "0597 - Provision the Python script to work with the radio buttons"
        ],
        "Improving the user interface with Google Charts and datetime selector": [
          "0610a - Introduction to Google Charts",
          "0610b - Implementation of Google Charts",
          "0610c - Testing Google Charts",
          "0650a - Introduction to the datetime picker widget",
          "0650b - Implement the datetime picker widget",
          "0650c - Upload and test the datetime picker widget"
        ]
      },
      "requirements": [
        "A Raspberry Pi 4, 3, 2, model B",
        "A Windows, Mac or Linux computer",
        "A DHT22 sensor",
        "An 5mm LED",
        "A pushbutton",
        "A breadboard and jumper wires",
        "Access to the Internet",
        "(Check hardware requirements in a free lecture in the first section of the course)"
      ],
      "description": "Course last updated in August 2022\nWe updated this course to be fully compatible with Raspberry Pi OS version 11 (\"Bullseye\"), Python 3.8.13, and updated software modules across the entire stack.\nIn designing this update, we chose to use the latest available software modules without breaking any part of the application or requiring modifications.\nPlease watch the application briefing video (one of the free lectures in this page) for more details.\nWhat is this course about?\nWelcome to Raspberry Pi: Full Stack, a hands-on project designed to teach you how to build an Internet-of-Things application based on the world’s most popular embedded computer.\nThis is an updated and improved remake of the original Raspberry Pi Full Stack. In this new course, I have updated all of the technologies involved in the current state of the Art, and have also added new content.\nThis course will expose you to the full process of developing a web application.\nYou will integrate LEDs, buttons and sensors with Javascript, HTML, web servers, database servers, routers and schedulers.\nYou will understand why the Raspberry Pi is such a versatile tinkering platform by experiencing first hand how well it combines:\nopen hardware, that includes wireless and wired networking and the ability to connect sensors and actuators,\nthe powerful Linux/Debian operating system, which gives you access to high-level programming languages and desktop-level software applications\nand, the flexibility of open source development software which, literally, powers the cloud applications that you use every day\nAs you progress through the sections, you will learn how to complete a single step of the application development process.\n\nYou’ll start with the operating system, add Python and play with some common hardware. Then you'll set up the web application stack, and the application itself.\nYou will learn and add new features and refinements as you move through the lectures.\nThis course is perfect for people that have at least basic understanding of computers and electronics.\nIdeally, you have experience in experimenting with the Arduino and are comfortable with the breadboard and simple components.\nThis course contains a substantial amount of programming. For this, you will need to be comfortable working with a text editor. Any prior knowledge of Python, Javascript or other high-level programming language will be beneficial, although it is not strictly necessary.\nThere are no requirements necessary to enrol; I only ask you to be ready to learn and willing to put the required time and effort.\nPlease don't forget to watch the free lectures in the first section of the course. These lectures will give you detailed information on the course content and the hardware you will need.\nLooking forward to learning with you!",
      "target_audience": [
        "Makers who want to experience the full process of web application development",
        "Any experience in programming with a high-level language is useful but not necessary",
        "Experience with small breadboard circuit is useful but not necessary",
        "Anyone who want experience working with modern web application development technologies"
      ]
    },
    {
      "title": "Arduino Robotics with the mBot",
      "url": "https://www.udemy.com/course/arduino-robotics-with-the-mbot/",
      "bio": "An introduction to robotics with the world's friendliest learning robot",
      "objectives": [
        "Program the mBot on the tablet device",
        "Program the mBot on the PC",
        "Use the mBot sensors and actuators",
        "Program the mBot using the Scratch language",
        "Come up with your own fun experiments for the mBot"
      ],
      "course_content": {
        "About this course": [
          "What is this course about?",
          "Hardware and software that you will need",
          "Study guide"
        ],
        "Meet the mBot": [
          "Introduction",
          "Parts in the box",
          "Assembly: Chassis, motors, wheels, sensors",
          "Assembly: mCore tour, Bluetooth module",
          "Assembly: Wiring, batteries, controller",
          "Assembly: testing",
          "Additional hardware",
          "Software options",
          "End of section quiz"
        ],
        "Programming the mBot using a tablet": [
          "Introduction",
          "Demonstration of MakeBlock",
          "Demonstration of mBlockly",
          "Demonstration of mBlock",
          "End of section quiz"
        ],
        "Programming the mBot on the PC using mBlock": [
          "Introduction",
          "Install mBlock on your computer",
          "A quick look at Scratch, the graphical programming language",
          "Create and upload your first program",
          "Motor control",
          "Moving left, right, backwards",
          "End of section quiz"
        ],
        "Getting more out of the mBot: programming structures, more sensors": [
          "Introduction",
          "The Loop",
          "The distance/proximity sensor",
          "More experimentation with the distance sensor",
          "The \"If\" and \"If...else\" control structure",
          "Introducing the buzzer",
          "End of section quiz"
        ],
        "Create the line follower program": [
          "Introduction",
          "Introducing the line sensor",
          "Adding the motors to the line follower program",
          "Stopping at the end of the line with the proximity sensor",
          "Implement a U-turn at the end of the line",
          "Using a button to start and stop",
          "Creating custom block (functions)",
          "End of section quiz"
        ],
        "Other things you should know": [
          "Introduction",
          "Restoring the firmware (so that you can control the mbot from the iPad)",
          "Restoring the default program (so that you can control the mbot with the remote",
          "End of section quiz"
        ],
        "Mini project": [
          "Project: Do not cross the line!"
        ],
        "Conclusion and Bonus Lecture": [
          "What's next?",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Absolutely nothing. We'll start at the beginning.",
        "Purchase an mBot kit",
        "Download the free programming interface for Windows/Mac OS",
        "Download the free programming interface for tablets"
      ],
      "description": "This course will introduce you to the mBot, the world's friendliest educational robotics platform. The mBot is an Arduino-based, two-wheel robot that comes with build-in sensors and actuators, and that you can program using Scratch, a graphical programming language.\nThe mBot is also extensible, with a lot of components available that you can use to build your own robotic creations.\nIn this course, I will show you how to assemble the mBot, discuss the additional hardware options, and demonstrate how to program it on your tablet and your Windows or Mac OS computer.\nThe main project of the course involves programming the mBot to follow an arbitrary black line on the floor. In this project we must combine our robot’s sensors and actuators efficiently to enable it to stay on the line while it travels on it as quickly as possible.\nAt first glance, you may think that getting a robot to follow a line is easy. That’s not true for a robot.\nAs the programmer, you must “teach the robot” to do something that to a human is intuitive. You need to extract the intuitive understanding of how to follow a line and convert it into code.\nThe required hardware is the mBot itself, and a computer (Windows or Mac OS). You can purchase an mBot direct from its manufacturer, Makeblock, or from your local reseller. You can download the software from free from the Makeblock website.",
      "target_audience": [
        "School students and homeschoolers interested in robotics projects",
        "Teachers, interested to learn skills for a STEM class",
        "Electronics hobbyists looking for a gentle introduction to robotics",
        "Parents looking for a fun educational activities to take with their children"
      ]
    },
    {
      "title": "Arduino Bootcamp : Learning Through Projects",
      "url": "https://www.udemy.com/course/arduino-bootcamp/",
      "bio": "Build 15+ complete Arduino projects from scratch, a car controlled using an app, cell phone, games, LEDs, sensors, sound",
      "objectives": [
        "Build a remote-controlled car you can drive with a smart phone app",
        "Build your own cell phone that you can make/receive calls and send/receive text messages with",
        "Build games using the Arduino incorporating light, sound and joystick controllers",
        "Understand components like ultrasonic sensors, motor drivers, servos, transistors, bluetooth/wifi/gsm modules",
        "Understand many common electronic components and how they work",
        "Have the confidence to build complex electronics projects",
        "Learn how to prototype electronics projects",
        "Be a confident maker and prototyper"
      ],
      "course_content": {
        "Introduction": [
          "Welcome Message and Helpful Tips",
          "Parts List"
        ],
        "Basic Concepts": [
          "Introduction to the Arduino",
          "Installing the Arduino IDE",
          "An overview of the Arduino IDE and how to upload code to your Arduino",
          "Understanding the Structure of your Arduino Program",
          "Installing Additional Third Party Arduino Libraries",
          "How to Use a Breadboard and Basic Wiring Concepts",
          "Let's create our first project",
          "Helpful Programming Concepts - Part 1",
          "Helpful Programming Concepts - Part 2"
        ],
        "Simple Projects": [
          "Controlling an LED with a Push Button Switch",
          "Controlling an LED with a switch",
          "Controlling a Piezo Buzzer with a Push Button Switch",
          "Controlling a Piezo Buzzer",
          "Using a Potentiometer to Adjust LED Brightness",
          "Using a potentiometer",
          "Controlling a CPU Fan - Part 1 - User Input Control",
          "CPU Fan Control with User Input",
          "Controlling a CPU Fan - Part 2 - Button Speed Control",
          "CPU Fan Control with a Button",
          "LED Reaction Game - Part 1 - Interrupt Demo",
          "LED Reaction Game - Part 2",
          "LED Reaction Game"
        ],
        "Intermediate Projects": [
          "Buzzer Sound Recall Game - Part 1",
          "Buzzer Sound Recall",
          "Buzzer Sound Recall Game - Part 2",
          "Ultrasonic Sensor Alarm",
          "Ultrasonic Sensor",
          "Digital Dice - Part 1",
          "Digital Dice",
          "Digital Dice - Part 2",
          "Infrared Repeater - Part 1 - Infrared Record and Playback",
          "Infrared Repeater - Part 2 - Controlling your Electronic Devices",
          "Infrared Concepts",
          "Joystick LED Matrix Game - Part 1 - Getting Readings from a Joystick",
          "Joystick LED Matrix Game - Part 2 - Using an LED Matrix",
          "Matrix LED",
          "Joystick LED Matrix Game - Part 3 - Putting it all together"
        ],
        "Advanced Projects": [
          "Stopwatch - Part 1 - Controlling a 4 Digit Segment Display",
          "Stopwatch - Part 2 - Using a Shift Register for the 4 Digit Segment Display",
          "Shift Registers",
          "Stopwatch - Part 3 - Completing the Project",
          "Pan-Tilt Assembly Control - Part 1 - Hacking a Wii Nunchuk",
          "Interfacing the Wii Nunchuk with Arduino",
          "Pan-Tilt Assembly Control - Part 2 - Servos",
          "Servos",
          "Pan-Tilt Assembly Control - Part 3 - Frame Assembly",
          "Pan-Tilt Assembly Control - Part 4 - Controlling with the Wii Nunchuk",
          "Online Weather Station - Part 1 -Using a 1602 LCD Screen to Display Information",
          "Online Weather Station - Part 2 - Using a Wifi Shield to Connect to a Network",
          "Shields",
          "Online Weather Station - Part 3 - Final Assembly",
          "Remote Controlled Car - Part 1- Understanding DC Motors",
          "DC Motors",
          "Remote Controlled Car - Part 2-1 - Using a Motor Driver",
          "Motor Drivers",
          "Remote Controlled Car - Part 2-2 - Using a Motor Driver - Demo and Code Review",
          "Remote Controlled Car - Part 3 - Understanding Bluetooth connectivity",
          "Bluetooth Technology",
          "Remote Controlled Car - Part 4-1 - Assembling our Car",
          "Remote Controlled Car - Part 4-2 - Assembling our Car",
          "Downloading the Android App for the Remote Controlled Car",
          "Remote Controlled Car - Part 5 - Controlling via an Android App",
          "Open Source Phone - Part 1 - Understanding the Parts and Assembly",
          "Open Source Phone - Part 2 - Making a Call, Sending SMS, Tune in FM Frequencies"
        ],
        "Closing": [
          "Closing Comments"
        ],
        "Additional Arduino Topics": [
          "How to Apply External Power In Arduino Projects",
          "Many different models exist for Arduino. Which one should you use and why?"
        ],
        "Bonus": [
          "Want to learn more?"
        ]
      },
      "requirements": [
        "Be curious about Arduino",
        "Have the desire to build fun, cool and exciting projects as a way to learn Arduino",
        "Prefer a hands-on approach to learning",
        "No previous electronics or programming knowledge needed",
        "All electronics and programming principles will be taught from scratch",
        "Arduino Uno Microcontroller",
        "Arduino Start Up Kit will be helpful (connecting wires, breadboard, resistors, push button switches etc.) A kit will get you through at least 80% of the course."
      ],
      "description": "This is a hands-on, projects-based approach to learning the Arduino platform catered to all levels of experience. In this course, you will build projects such as:\nAn Arduino car that can be remotely driven using a smart phone app\nYour very own Arduino phone that you can make/receive phone calls with and send/receive text messages\nYour own Universal Arduino Remote that can copy and playback IR signals from any electronic device\nAn Arduino Online Weather Station that connects to the internet to retrieve and display weather information based on your location\nArduino game projects using light, sound and joysticks\nMuch much more...\nNo previous programming or electronics knowledge is required for this course! All electronics concepts and programming for each project will be explained step-by-step in detail.\nYou will quickly learn and become proficient with Arduino in this bootcamp by building complete projects from scratch. Here is the approach that is taken for each project:\nA detailed background of all the electronics principles and operation of the electrical components for each project will first be discussed\nThe wiring of components and layout of the project will then be covered in the circuit diagram\nDetailed step-by-step videos will then show how you how to wire up and assemble the components for the project\nThe code will be uploaded to demo the project and how it works\nA detailed line-by-line code review will then describe how the software and hardware components play together\nYou will get the complete picture and it is a much better way to learn Arduino by creating full working projects from scratch!\nAlong the way, you will learn about and become extremely proficient with the following components and understand exactly how they work as they will be incorporated in projects:\nBreadboards\nLEDs\nActive and Passive Buzzers\nSwitches\nPotentiometers\nTransistors\nUltrasonic Sensors\nSeven Segment LEDs (single and four digit)\nInfrared Receivers\nJoysticks\n8x8 Matrix LEDs\nShift Registers\nDC Motors\nServos\nLCD Screens\nBluetooth Modules\nWifi and GSM Shields\nAnd much much more...\nThe course is broken up into a Simple Projects section, an Intermediate Projects section and an Advanced Projects section allowing you to progress to or start from any level based on how comfortable you are with Arduino.\nIf you are new to Arduino, the first lessons will get you quickly up to speed on what the platform is and how to use it. You can then progress to simple projects which get you comfortable with basic electrical components.\nFor those already familiar with Arduino who want to take their skills to the next level, you can jump straight to the intermediate projects section. There, we will focus on making game-type projects using the Arduino and even an infrared repeater that can allow you to copy, store, and playback any IR signal, just like your own universal remote.\nNext, for those that might be already comfortable with Arduino, there is an advanced projects section where we tackle projects like an online weather station, remote-controlled car that you can drive with a smart phone app, and a working phone that can make actual calls and send text messages and many more.\nI have always believed that project-based learning is the best approach where you actually learn by doing and building something that actually works. This is the approach I am taking in this course. I will explain all the electronics principles involved with each project, show you how to wire up the circuits and give detailed line-by-line code reviews on how it all works.\nDon't just take my word for it, here are what past students are saying about this course!\n\nThis is really a nice course with some great projects and use of add- on devices beyond most simple Arduino courses. The instructor is very easy to understand and does a great job. The only thing I would prefer is more projects and less watching jumpers getting plugged. :) Don't hesitate on this purchase if buying on special. I hope he updates the content so I get more stuff to watch! ~ Johnnie Norsworthy\n\nTop notch Arduino course! Way better than a few of the other highly rated Arduino courses I have taken on Udemy. The projects range from easy to challenging and the instructor explains everything involved in great detail. Don't think twice about joining this course. I have not seen better projects in any other Arduino course! Cheers! ~ Cody Willis\nLee is doing a great job of an instructor. I have no electrical background at all and can follow the course pretty easy. Lee is also super fast on answer your questions ~ Dat Ngyen\nLoved this course! Instructor is clear and to the point! Can't wait to see if he adds more projects to the course. ~ Joan Brixby\n\nLearned so much! Excellent course! The projects I did were really fun. I think i am going to get the instructor's Raspberry Pi Bootcamp course too! ~ Renny Becher\nIf you already have an Arduino or by purchasing an Arduino Kit (about $35 US), you will get most of the components needed to complete at least 80% of the course. The more advanced projects will require some additional parts but they are all really affordable. A detailed parts list by project and for the course is provided once you join the course, with links to online suppliers that are kept up to date. You can buy all the parts at once or select which advanced projects you want to work on and obtain only the specific additional components you need based on your electronics collection.",
      "target_audience": [
        "No previous electronics or programming knowledge required",
        "Someone who is interested in learning about the Arduino platform",
        "Someone interested in building cool projects",
        "Someone interested in learning about electronics",
        "Electronics hobbyist",
        "Students",
        "Makers or Inventors"
      ]
    },
    {
      "title": "Learn to Build a Computer (PC) in 2025 - all types!",
      "url": "https://www.udemy.com/course/computer-building/",
      "bio": "How I budget for and pick the right parts for any computer build, watch me build a pc, setup software and test it!",
      "objectives": [
        "Understand the component parts of a computer and what they all do, and to read product listings for all components and understand what everything means",
        "Understand different types of computer build (gamer, worker, budget) and how you would tailor component choices to suit these users",
        "Learn how to assemble all components into a computer case, setup software and burn-in test a new computer build",
        "Learn how to install components to upgrade an existing computer."
      ],
      "course_content": {
        "Planning A Computer Build - Budget and Aims": [
          "Understanding PC Components",
          "Planning Your PC Build Budget",
          "Tailoring Tech - How to Build for Different Users",
          "Used vs New Components - Can you save money buying used parts? Should you?"
        ],
        "Choosing Components - Components In-Depth (Markets and Specs)": [
          "Choosing a CPU (Central Processing Unit)",
          "Choosing a cooling solution - Air (AIO) or Water?",
          "Choosing memory (RAM) - How much is enough?",
          "Choosing a motherboard - Model ranges and specs",
          "Choosing a GPU (Graphics Card) - Which chipset should you pick? ($200 or $1500)",
          "Choosing internal storage - SSD/M.2 or HDD? And how much do you need? RAID?",
          "Choosing a power supply (PSU) - How many watts do I need? What's 80 Plus?",
          "Choosing a computer case - Case sizes, types and understanding cable routing.",
          "Checklist - Questions to answer before you purchase any component!"
        ],
        "Workspace Setup : Necessary and optional tools": [
          "Setting up your build workspace",
          "What do you need to assemble a computer? (Tools and other useful things...)",
          "ESD - Electrostatic Discharge, how to (and should you?) protect your components",
          "Isopropanol/Isopropyl alcohol (Optional)",
          "5mm socket (Optional)",
          "Cable ties (Optional)",
          "Workspace setup checklist"
        ],
        "Step-by-step Build - Watch me build a mid-range gaming PC": [
          "Build Steps - An overview of the build steps",
          "Inserting the CPU into the motherboard (Installing the CPU)",
          "Meet our CPU cooler (AIO water cooler)",
          "Installing the cooler CPU mount backplate (For aftermarket coolers only)",
          "Meet the computer case - Overview and familiarization",
          "Adjusting motherboard stand-offs (If you need to)",
          "Install Motherboard - Mounting the motherboard into the case",
          "Meet a modular power supply unit (PSU)",
          "Install the PSU into the case",
          "Meet our RAM (DDR4) and some DDR5 and see the differences",
          "Installing memory (DDR RAM)",
          "Installing M.2 NVMe SSD drives into the case",
          "Installing 2.5\" SSD's into the case",
          "Installing 5.25\" HDD's into the case",
          "Removing thermal paste (should you need to)",
          "AIR Cooler - Intel stock AIR cooler installation",
          "AIO Cooler - Positioning",
          "AIO Cooler - Mounting the radiator",
          "AIO Cooler - Applying thermal paste and attaching the pump head to the CPU",
          "AIO Cooler - Why we haven't installed the radiator fans yet",
          "Motherboard - Connecting to power",
          "AIO Cooler - Installing the radiator fans",
          "Connecting fans to power and LED connections on the motherboard",
          "Case front panel (control panel) connections to the motherboard",
          "Storage Drives - power and data (SATA) connections",
          "GPU - Installing a GPU (Graphics Card)",
          "GPU - Connecting power and setting the support bracket",
          "Fire it up! First power on expectations and troubleshooting"
        ],
        "BIOS, Operating System Setup and Burn-In Testing": [
          "BIOS - Tweaking the default FAN curves for silent running",
          "Windows - Creating installation media (and error 0x8007007B)",
          "Windows - Installation (No licence necessary)",
          "WIndows - Installation - Adding Wi-Fi drivers",
          "Installing manufacturer hardware drivers using manufacturer utility (Option 1)",
          "Installing manufacturer hardware drivers manually (Option 2)",
          "Stress testing for any system using AIDA64",
          "Stress testing for a gaming system using 3DMark"
        ],
        "Last (but not least)....": [
          "Your Bonus Lecture!"
        ]
      },
      "requirements": [
        "No experience needed, you'll learn everything you need to know from the basics up."
      ],
      "description": "Learn how to build your own computer, whether it's your dream gaming rig, a work from home PC or a budget casual build with my online course.\nLearn from a seasoned PC builder, hands-on learning, budget friendly tips, no experience needed.\nThis course will take you from complete novice to 'know it all' in the world of desktop computer hardware.\nLearn valuable skills that will not only allow you to build a PC, but might help you land a job in the tech world!\n\n\nWhat you'll learn:\nThe fundamentals of computer hardware, what each component is and what it does\nHow to set a budget for a new build\nHow to allocate that budget to tailor a build to suit you (gamer, home worker, casual user, engineer)\nKnow how to shop for different components by understanding markets and specifications and what they mean\nFull computer assembly, step-by-step over the shoulder lessons where you watch me build a mid-range gaming PC\nKnow how to install an operating system on a newly built PC (no licence key required)\nThe basics of debugging build issues\nLearn how to benchmark and burn-in test a new build to ensure it's stable and will work when put under load.",
      "target_audience": [
        "Anyone who wants to build their own computer.",
        "Anyone who wants to upgrade their own computer."
      ]
    },
    {
      "title": "Develop Embedded Systems using Embedded C on AVR",
      "url": "https://www.udemy.com/course/embedded-c-with-avr/",
      "bio": "Sensors, Actuators, LEDs, Switches, PORTS, Timers, PWM, ADC, LCD, Projects, Develop Embedded Systems with Embedded C AVR",
      "objectives": [
        "Learn basics of Embedded C",
        "Developing Embedded System around AVR Microcontroller",
        "Master Masking Technique in C",
        "Interface Sensors and Actuators using GPIOs / Ports",
        "Demystify Timers to write delays",
        "Learn how to generate PWM, also learn to vary Duty Cycle and Frequency of PWM Wave",
        "Interface Liquid Crystal Displays (LCDs) to print Characters, String and Integers, Also Learn to write Library for LCD",
        "Interface Analog Sensors using inbuilt analog to digital converters"
      ],
      "course_content": {
        "Expectation from Course": [
          "Expectations from Course, What's Inside the Course"
        ],
        "Microcontroller Basics": [
          "Microcontrollers Vs Microprocessors",
          "Von-Neumann Vs Harvard Architecture",
          "How to Select a Microcontroller?"
        ],
        "AVR & its Ports": [
          "Hello AVR!!",
          "Microcontrollers and AVR",
          "AVR Ports",
          "The First Embedded C program",
          "AVR Port Registers"
        ],
        "Embedded C - Masking": [
          "Bit Wise Masking !!",
          "LED Blink using Masking",
          "Masking using Shifting",
          "Blink LED using Masking with Shifting",
          "Circular Shifting / Bit Rotation",
          "Masking"
        ],
        "Play with Switches, Pull Up Resistors & LEDs": [
          "Switch and Pull Up Resistors",
          "How to Enable inbuilt pull-up resistors in AVR?",
          "Interface LED and Switch with AVR using Embedded C",
          "Switch with LED Blink - Have Fun with Embedded C",
          "Switch and LED Blink with Multiple Delay - More Fun with Embedded C"
        ],
        "Timers and Delays": [
          "Introduction to AVR Timers",
          "Lets get inside TIMER0",
          "How to calculate TCNT value to generate a particular delay?",
          "Programming AVR Timers",
          "AVR Timers"
        ],
        "Let us explore Pulse Width Modulation (PWM)": [
          "Introduction to PWM",
          "How PWM wave is generated in Microcontrollers",
          "PWM Registers in AVR and PWM Modes",
          "PWM Frequency",
          "PWM Duty Cycle",
          "Programming to generated PWM Wave - LED Brightness Control",
          "Pulse Width Modulation (PWM)"
        ],
        "Liquid Crystal Displays - LCDs": [
          "Introduction to LCD Displays",
          "LCD - Initialization",
          "LCD - Command and Data Embedded C Functions",
          "LCD - Initialization Function",
          "LCD - Printing Characters using Embedded C",
          "LCD - Embedded C functions to position cursor and print strings",
          "LCD - Printing Strings",
          "LCD - Embedded C Function to Print Integers",
          "LCD - Printing Integers",
          "Embedded C - User defined library for LCD",
          "LCD"
        ],
        "Analog to Digital Conversion": [
          "Need of Analog to Digital Conversion",
          "Characteristics of ADC",
          "Relation between Input Analog Voltage and Binary Output Data",
          "Features of ADC on AVR",
          "ADC - ADMUX Register",
          "ADC - ADCSRA Register",
          "Programming ADC using Embedded C - EXP 1",
          "Programming ADC to Calculate and Display Input Analog Voltage",
          "Analog to Digital Conversion"
        ],
        "Projects": [
          "Temperature Monitoring System using LM35 Sensor",
          "Speed Control of DC Motor - Part 1",
          "Speed Control of DC Motor - Part 2",
          "Project"
        ]
      },
      "requirements": [
        "Be familiar to any programming language, Basics only"
      ],
      "description": "Learn Embedded C with AVR Microcontrollers!!\n8.5 Hours of Video Content.\n8 Quizzes with more than 70 Questions.\n13 Hands-on Practicals\nAll Codes are available in the resources\nLecture Material (PDF / PPTs) are available in the resources\nAll Wiring Diagrams are available resources\nDescription\nThis course Demystifies the internal working of Microcontroller and Peripherals. You will learn register-level Embedded C programming to use inbuilt peripherals on the microcontroller to interface sensors, actuators, and Liquid Crystal Displays (LCD). You will learn to use Timers to generate accurate delays, Use timers to generate Pulse Width Modulation (PWM) Waveforms with variable duty cycle. Learn to use analog to digital converter (ADC) to gather data from analog sensors and display it to LCDs.\nEach section ends with a Quiz to examine your learning outcomes from this course. All the codes (C Programs) are available in resources along with the lecture material.\nThis is NOT Arduino Style Programming!!\nI believe that Arduino is for quick prototyping of products but not for Mastering Microcontrollers and peripherals. In Arduino, you use many Third-Party Libraries, In this course, you will be writing your own libraries, Your code will be talking and manipulate microcontroller registers, True Register Level programming is presented in this course.\n\nMajor Topics Covered\nMasking: Learn to manipulate (Set/Reset) a particular bit in a port or MCU register without altering other bits.\nPull-up Register: Learn the importance of pull-up resistors, enabling and disabling them, also learn to use them in interfacing digital sensors.\nTimers: Learn to write C programs to generate accurate delays using MCU Timers.\nPulse Width Modulation: Learn to generate PWM wave with variable duty cycle using MCU timers and PWM registers.\nLiquid Crystal Display:  Learn to interface LCDs with MCU using GPIOs, No third-party library is used for LCD, You will learn to write your own library for LCDs.\nAnalog to Digital Converter: Learn to interface analog sensors such as a potentiometer to read voltage across it.\nTemperature Monitoring System: Learn to interface LM35 temperature sensor IC to read ambient temperature and display the same on LCD.\nSpeed Control of DC Motor: Learn to control the Direction and Speed of DC Motor using half-bridge integrated circuit L293D and PWM Technique. Vary the Speed using a POT connected to ADC and vary the PWM duty cycle accordingly.",
      "target_audience": [
        "Beginners to develop Embedded Systems around Microcontroller",
        "Beginners curious to write and test Embedded C Programs on Hardware"
      ]
    },
    {
      "title": "Siemens Plc Programming Basics -All In One (S7/200/300/1200)",
      "url": "https://www.udemy.com/course/siemens-plc-programming-basics-all-in-one/",
      "bio": "Learn Siemens Plc Programming Basics and improve your programming skills with us for S7-200/300/400/1200 Series Plcs",
      "objectives": [
        "Siemens Plc Programming",
        "Motion Control",
        "Siemens S7-200 Plc Programming",
        "Siemens S7-300/400 Plc Programming",
        "Siemens S7-1200 Plc Programming",
        "Step7 Microwin",
        "Step7 Simatic Manager",
        "TIA Portal V16",
        "Plc Programming Basics",
        "SCL - FBD Programming Languages"
      ],
      "course_content": {
        "S7-1200 Plc Basics": [
          "Hardware Review S7-1200",
          "Data Types",
          "Absolute Bit & Byte & Word Addressing",
          "How to Create New Project and Add New CPU",
          "How to Go Online to S7-1200 and Backup",
          "Siemens Programming Languages LAD - SCL - FBD",
          "Simulator",
          "System Memory Bits & Tags",
          "Bit Logic",
          "Word Logic",
          "Timers",
          "Counters",
          "Comparison",
          "Math",
          "Move Instructions",
          "Convert Instructions",
          "Retained Memory",
          "Data blocks",
          "High Speed Counters",
          "Analog Input & Output",
          "Function Blocks",
          "Functions",
          "Program Control Instructions",
          "Date & Time"
        ],
        "SCL(Structured Control Language) Programming Language Basics": [
          "SCL Programming Basics- New Project and First Program",
          "IF Loop Basics",
          "CASE Loop Basics",
          "Timer (TON-TOF) Usage",
          "Counter Usage",
          "Rising/Fallin Edge + Increment/Decrement Usage",
          "Comparison + Math Instructions",
          "Functions",
          "Function Blocks"
        ],
        "Programming Skills Improvement Section": [
          "Introduction - Diaview Scada - S7-1200 Cpu Communication & Application",
          "Installation & Configurate Environment and Add Tags",
          "Button - Led Application and Activation S71200 CPU Memory Bits",
          "TextBox and Rectangle Animation Usage",
          "Fan Animation"
        ],
        "FBD - Function Block Diagram Programming Language": [
          "FBD Basics - Startup Programming with FBD"
        ],
        "Tia Portal V16 - Factory I/O Connection and Running with Simulator": [
          "Tia Portal V16 & Factory I/O"
        ],
        "Motion Control": [
          "How to add new Axis + Servo Drive and Connection, Definitions",
          "MC_Power & MC_Reset",
          "MC_Home & MC_Halt",
          "MC_MoveAbsolute & MC_MoveRelative & MC_MoveJog"
        ],
        "Plc Programming Basics - Introduction": [
          "What is Plc ?",
          "Plc Digital Inputs Electrical Structure",
          "Plc Digital Outputs Electrical Structure",
          "Plc Sinking - Sourcing Connection",
          "Theorotically Review Of S7-1200",
          "Theorotically Review of S7-1200 (2)",
          "Theorotically Review Of S7-1200 - Status Leds",
          "Theorotically Review of S7-1200 - Profinet",
          "Theorotically Review Of S7-1200 - Memory Card",
          "Theorotically Review Of S7-1200 - Signal Boards",
          "Theorotically Review Of S7-1200 - Signal Modules",
          "Theorotically Review Of S7-1200 - Analog I/O",
          "Theorotically Review of S7-1200 - Communication"
        ],
        "HMI": [
          "WinCC Basics",
          "Button and Switches",
          "IO Field",
          "Symbolic IO Field , IO Field ,Bar Graph , Text Graphic List, Button.."
        ],
        "S7-300/400 Plc Basics": [
          "PG-PC Interface",
          "New Project & Software Interface Review",
          "Simulator Usage",
          "Hardware Configuration",
          "Program and Data Blocks",
          "Program Instructions - General Review",
          "CPU 315-DP 2 Real Hardware Introduction & Upload Plc Program",
          "Memory Card Reset & New Program (OB1) Download and Monitoring",
          "Bit Logic - 1",
          "Bit Logic RS & SR - 2",
          "Tia Portal Usage for S7-300 CPUs",
          "Bit Logic 3 with Tia Portal"
        ],
        "S7-200 Plc Basics": [
          "How to Upload and Connection with Real Hardwares",
          "MicroWin Software Review",
          "S7-200 Simulator Download",
          "S7-200 Plc Simulator Review",
          "Timers",
          "Counters",
          "Math + Comparison"
        ]
      },
      "requirements": [
        "This course does not require any prior knowledge."
      ],
      "description": "Dear Students;\nSiemens Plc Programming Basics Course is 3. course of Derstagram Akademi.\nI like to explain topics quickly and effectively so you are not going to be bored in this course while you are watching educations.\nYou are going to learn plc programming basics in this course.And we are going to increase our speed a little bit and you are going to learn advanced instructions for siemens plcs.\nYou are going to learn S7-200 plcs software and basics.\nYou are going to learn S7-300/400 plc software and basics.\nAnd mainly you are going to learn S7-1200 plcs , TIA Portal and WinCC HMI basics.\nYou are going to access full free TIA Portal program examples in this course.\nYou are going to have a chance to ask any question about siemens plcs after you register this course.\nPart by part , you are going to gain plc programmer features and you are going to gain logic diagram basics principles.\nI'm going to update this course always with different topics for understand deeply Siemens Plcs.\nAt the end of this course;\n- Siemens plc programming basics\n- TIA Portal software\n- Siemens Plc command structures\n- Siemens plc programming techniques\n- Sİemens HMI basics\n- TIA Portal + Microwin + Step7 Software structure\n- Motion control\n- Advanced programming skills\nYou are going to gain these skills,\n\n\nFor advanced questions , feedbacks or reviews , you can directly contact with me any time .\n\n\nBr\nMustafa\nFounder of Derstagram Automation & Software Home and Derstagram Academy",
      "target_audience": [
        "Anyone who is wants to learn Siemens plc programming and wants to improve himself/herself in industrial automation and plcs.",
        "If you want to program plcs and create a industrial machine automation systems, you are all welcome !"
      ]
    },
    {
      "title": "e-Learning AMBA and I2C protocol concepts",
      "url": "https://www.udemy.com/course/e-learning-amba-and-i2c-protocol-concepts/",
      "bio": "Get upto speed very quickly by learning basics of these protocols by going through this course",
      "objectives": [
        "This course helps you learn in detail about various AMBA and I2C protocol concepts. AMBA protocols e.g. APB, AHB, AXI etc... are widely used across almost all SoCs and knowing these protocol concepts can help people to get straight in their work without spending much time to struggle learning key protocol concepts.",
        "This course is helpful to experienced as well as freshers to VLSI industry. This is useful for design as well as verification engineers."
      ],
      "course_content": {
        "AMBA Protocols evolution and APB 2/3/4 protocol concepts overview": [
          "Part 1 - AMBA protocol evolution and APB2/3/4 protocol concepts overview",
          "Part 2 - AMBA protocol evolution and APB2/3/4 protocol concepts overview"
        ],
        "AHB Protocol overview and its differences with AHB-lite, AHB5": [
          "Part 1: AHB protocol concepts overview and differences with AHB-lite, AHB5",
          "Part 2: AHB protocol concepts overview and differences with AHB-lite, AHB5",
          "Part 3: AHB protocol concepts overview and differences with AHB-lite, AHB5"
        ],
        "AXI3 Protocol concepts overview and AXI4 differences with AXI3, AXI4-lite": [
          "Part 1: AXI3 protocol concepts overview and differences with AXI4lite, AXI4",
          "Part 2: AXI3 protocol concepts overview and differences with AXI4lite, AXI4",
          "Part 3: AXI3 protocol concepts overview and differences with AXI4lite, AXI4"
        ],
        "I2C Protocol concepts overview": [
          "Part 1: I2C protocol concepts overview",
          "Part 2 - I2C protocol concepts overview"
        ],
        "More videos to cover additional concepts from AMBA & I2C protocols": [
          "Part 1: More videos to cover additional concepts from AMBA & I2C protocols",
          "Burst Transfer and Types - AMBA Protocols"
        ]
      },
      "requirements": [
        "There is no pre-requisite to this course. Rather concepts covered in this course are pretty much from basics for each and every protocol, so it will be better to refer this course first and then it will be very smooth going through full protocol specification."
      ],
      "description": "This course shall help you learn basic to detailed concepts of protocols such as APB, AHB, AXI and I2C. This will help you learn not only the basic concepts from basic version of protocol, but will also help you get clear view of the latest versions of these protocols and differences among them.\nThese protocols are very generic read-write in nature, but non-trivial from the bus interface protocol concepts understanding perspective.\nAlong with, there have been quite a few new version of each of the above protocol, so it is important to learn the basic version concepts and why there was a need for a new version and what are the differences.\nThis course is highly useful for a VLSI experienced engineer who need to get quickly ramped up on protocol concepts to get started quickly with their hands-on works.\nAt the same time, this is also highly useful for new entrants in VLSI industry to build on their skills and add-on to resume for increasing their chances of getting short-listed and then selected.",
      "target_audience": [
        "Target students are VLSI engineers. Fresh graduates who are going through various courses which need them to learn basic AMBA and I2C protocol concepts.",
        "This will majorly help experienced VLSI professional (starting from say 1-2+ years experience) to learn these protocols as per their projects requirement.",
        "This shall also help fresh graduates, experienced engineers to refresh their concepts and be successful in interviews."
      ]
    },
    {
      "title": "Raspberry Pi meets Arduino",
      "url": "https://www.udemy.com/course/raspberry-pi-meets-arduino/",
      "bio": "Learn how Raspberry Pi can communicate with Arduino. Also included RFID using Arduino",
      "objectives": [
        "Communicate a message between the Arduino and Raspberry Pi and Vice versa",
        "Learn how RFID works and Find out what the future holds for RFID technology",
        "Employee entry system using Arduino and RFID sensor",
        "Security System and Access Control with Arduino using Keypad 4x4",
        "Acquire data from sensors and display them on an LCD screen"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Connect Arduino and Raspberry Pi with serial USB cable": [
          "Connecting Arduino and Raspberry Pi with serial USB cable",
          "Installing the Arduino IDE in Python programming",
          "Raspberry Pi sending data to the Arduino",
          "Source Code_Raspberry Pi Sending Data to the Arduino",
          "Source Code_Programming the Raspberry Pi(Raspberry Pi to the Arduino)",
          "Arduino sending message to the Raspberry Pi",
          "Source Code_Arduino Sending Data to the Raspberry Pi",
          "Source Code_Programming the Raspberry Pi (Arduino to the Raspberry Pi)",
          "Troubleshooting: Connecting Arduino and Raspberry Pi"
        ],
        "Security System and Access Control with RFID using Arduino": [
          "Uses of RFID reader",
          "Hardware Requirements and Software setup",
          "Code declaration: Security System and Access Control with RFID using Arduino",
          "Code Initialization: Security System and Access Control with RFID using Arduino",
          "Checking the card: Security System and Access Control with RFID using Arduino",
          "RFID",
          "Circuit Connection of RFID sensor and LCD screen",
          "Circuit Diagram: Security System and Access Control with RFID using Arduino",
          "Real time demonstration: Sending data from Arduino to Excel sheet",
          "Source Code_Security Systems and Access Control with RFID using Arduino"
        ],
        "Keypad Combination Security System and Access Control with Arduino": [
          "How to Connect and Read a Keypad with an Arduino",
          "Hardware requirements and Circuit connection of a Keypad",
          "Circuit Diagram: How to connect and Read a Keypad 4x4 with an Arduino",
          "Coding and Real time demonstration: Read a Keypad with an Arduino",
          "Source Code_How to connect and Read a Keypad 4x4 with an Arduino",
          "Simple Digital Code Lock using Arduino",
          "Real time demonstration: Simple Digital Code Lock using Arduino",
          "Circuit Diagram: Digital Code Lock with Keypad 4x4 using Arduino",
          "Source Code_Digital Code Lock with Keypad 4x4 using Arduino",
          "Digital Code Lock Combination using Arduino with a Keypad 4x4",
          "Hardware requirements and Circuit connection of the project",
          "Circuit Diagram: Digital Code Lock Combination using Arduino with a Keypad 4x4",
          "Code: Initiating the Combination Lock",
          "Code: Updating Combination Lock",
          "LCD 16x2",
          "Source Code_Digital Code Lock Combination using Arduino with a Keypad 4x4",
          "Real time demonstration: Digital Code Lock Combination"
        ]
      },
      "requirements": [
        "You would need to download the Arduino IDE software",
        "Arduino UNO, Arduino Mega, Raspberry Pi",
        "1 x RFID-RC522, 1 x LCD 16x2, 1x Keypad 4x4, 1 Kilo Ohm, 1 x Breadboard, RFID Card and Tag",
        "Thin wires to solder and jumper wires"
      ],
      "description": "This is an advanced level course on Arduino. This course is designed for advanced makers. We’ll help you to get started with the basics of creating circuits with the Arduino and Arduino Mega prototyping board. We will show how a Raspberry Pi and Arduino can communicate with each other. By the end of this course, you would have built Security Systems and Access Control with Arduino using Keypad 4x4 and an Employee entry system using Arduino and RFID sensor.\nThe prerequisite for this course is a basic understanding of electrical and electronic concepts and ability to download and install software on your computer. Along the way, you will learn about programming, sensors, and communications.\nThe course split into three parts:\n\nProject 1:\nIn this project, we will teach you how to communicate a message from the Arduino to the Raspberry Pi and vice-versa using a USB serial cable.\nProject 2:\nIn this project, we teach you how to build an employee entry system using Arduino and RFID sensor module. This project is designed to record the employee details, date and time in PLX-DAQ Spreadsheet to monitor the time and date of entry and exit.\nProject 3:\nThis is a security related project. We’ll show you how to make a keypad combination lock. In the project, keypad security system and access control with Arduino can change the combination without reprogramming the Arduino.\nIf learning by making sounds like the way to go, then this course is for you!\nRFID tags are used for everything from credit cards and passports to inventory control and door locks. Everyone should know more than a thing or two about them. With this course, you'll be able to learn how to read, \"spoof\" and use RFID in both standard and creative ways. Their ubiquitous nature and how little an average citizen knows about them also makes for great science fair and educational projects.\nTo explain RFID, we can use a key and lock analogy. Instead, of the key having a unique pattern, RFID keys hold a series of unique numbers that are read by the lock. It is up to our Arduino sketch to determine what happens when the lock reads the number. The key is the tag, card or another small device we carry around or have in our life. We will be using a passive key, which is an integrated circuit and a small aerial. It uses power from a magnetic field associated with the sensor.\n\nIf you are a technology enthusiast and want to learn the cutting-edge technology, then this is the right course for you.\nI will teach you step by step how to go about building this project. I will also share the code with you so that you can replicate the project yourself.\nAt the end of the course, you'll be fully familiarized with Arduino and ready to build your electronic security system. I look forward to you joining this course. It provides the complete source code of the real time project.\nWhat are you waiting for? Enroll now!",
      "target_audience": [
        "People who want to try Arduino and learn about microcontrollers",
        "Makers who have an existing intermediate or better understanding of electronics",
        "Individuals wanting to learn more about RFID applications",
        "Create a strict security system by identifying employees and/or clients, or implement anti-theft devices",
        "Engineering Students - Electronics, Electrical & Computer Science",
        "Electronic Geeks, Hobbiest & Art Students",
        "High School Science Students"
      ]
    },
    {
      "title": "TIA Portal for S7-1200 PLC Analog Programming (PLC-SCADA-11)",
      "url": "https://www.udemy.com/course/siemens-tia-portal-for-s7-1200-plc-analog-programming/",
      "bio": "Siemens TIA Portal for S7-1200 PLC- Concepts of analog programming with live projects.",
      "objectives": [
        "Learn basics of Analog input and output signals in Industries.",
        "Understand the concept behind Analog programming in PLCs.",
        "Learn how to write ladder logic program for Analog inputs and outputs in Siemens-TIA."
      ],
      "course_content": {
        "Analog vs. Digital Signal": [
          "Difference between Analog and Digital Signal"
        ],
        "Understanding Analog Input Signal": [
          "Overview of Analog input signal",
          "Analog input Module",
          "Understanding Resolution (Analog to Digital)",
          "Example on Resolution",
          "Solution",
          "Analog Input Data Handling"
        ],
        "Understanding Analog Output Signal": [
          "Overview of Analog Output signal",
          "Analog Output Module",
          "Analog Output Data Representation",
          "Example on Output Resolution"
        ],
        "Understanding Scaling and Conversion Instruction": [
          "What is Scaling",
          "Normalize Instruction in TIA",
          "Scale instruction in TIA",
          "Convert instruction",
          "Round, Floor, Ceil and Trunk instruction"
        ],
        "Analog Programming in Siemens TIA": [
          "Analog Input Output Module Configuration in TIA",
          "Level Control Of Tank In Factory IO Part-1",
          "Level Control Of Tank In Factory IO Part-2",
          "Level Control Of Tank In Factory IO Part-3",
          "Level Control Of Tank In Factory IO Part-4",
          "Level Control Of Tank In Factory IO Part-5"
        ]
      },
      "requirements": [
        "Basic Fundamentals of Electronics.",
        "Knowledge of basic PLC programming instructions using TIA.",
        "Hunger for Learning new Technology"
      ],
      "description": "Industrial control systems continue to employ standard analog signals for transmitting data between the process and the control equipment. Process transmitters in a chemical plant, for example, convert low-level temperature and pressure signals into robust, 4-20mA current-loop signals that are easily transmitted over several thousand feet.\nDo you know how to scale your Analog input? Or control your Analog output?\nMany people Struggle with Analog signals in PlC programming. How to use an analog input or output in your control algorithm for PLC can be tricky. Most often while you are reading PLCs you will see digital example PLC programs where you have to work with only two condition ON and OFF. But when you will work with analog signals you will see that an analog signal can take any value between its low and high value. So while working with analog signals you have dealt with infinity states.\nSo we have design this course in order to make you understand concept behind analog programming. We have also explained how to use PID controllers in Siemens TIA.\nIn this course you will learn how to represent an analog signal in binary numbers.\nIn this course you will learn how to scale analog input or output using Siemens TIA.\nIn this course we have used factory io software in order to simulate industrial application in 3d environment.\nIn this course you will learn how to use analog signals in PLC programming using Siemens TIA.\nAfter learning this course you will be able to write a ladder logic program for analog signals using Siemens TIA.",
      "target_audience": [
        "Engineering Students.",
        "Working Engineers-Maintenance, Production or Supervisors.",
        "Industrialist."
      ]
    },
    {
      "title": "FPGA Image Processing",
      "url": "https://www.udemy.com/course/fpga-image-processing/",
      "bio": "Real Time Sobel System Implement",
      "objectives": [
        "FPGA real time image processing basic knowledge",
        "Sobel principle, algorithm and system implement in FPGA;",
        "RGB to Grayscale, Grayscale to RGB coding and simulation;",
        "Read, write BMP file skill in FPGA image processing simulation;",
        "Single, double line FIFO Buffer coding and simulation;",
        "Pipeline Principle, coding and simulation skill;"
      ],
      "course_content": {
        "FPGA Image Processing -- Sobel System implement": [
          "FPGA Image processing 01 — Sobel System Structure",
          "FPGA Image processing 02 — Sobel System Camera Sensor ov2640 Interface",
          "FPGA Image processing 03 — Sobel System HDMI display interface",
          "FPGA Image processing 04 — Sobel System Sub Module Analyze",
          "FPGA Image processing 05 — Sobel System Module Interface Coding",
          "FPGA Image processing 06 — RGB to Grayscale Principle",
          "FPGA Image processing 07 — RGB to Grayscale Coding and Simulation",
          "FPGA Image processing 08 — Read Bmp File",
          "FPGA Image processing 09 — Write Bmp File",
          "FPGA Image processing 10 — Whole Flow of BMP_Simulation",
          "FPGA Image processing 11 — Sobel Principle Analyze",
          "FPGA Image processing 12 — Sobel Algorithm Analyze",
          "FPGA Image processing 13 —Sobel Kernel Interface Analyze",
          "FPGA Image processing 14 — Sobel Single Line FIFO Buffer Coding",
          "FPGA Image processing 15 — Sobel Single Line FIFO Buffer Simulation",
          "FPGA Image processing 16 — Sobel Double Line FIFO Buffer Coding",
          "FPGA Image processing 17 — Sobel Double Line FIFO Buffer Simulation",
          "FPGA Image processing 18 — Sobel data modulate coding 01",
          "FPGA Image processing 19 — Sobel data modulate coding 02",
          "FPGA Image processing 20 — Sobel data modulate simulation",
          "FPGA Image processing 21 — Sobel Data Buffer Coding",
          "FPGA Image processing 22 — Sobel Data Buffer Simulation",
          "FPGA Image processing 23 — Sobel Pipeline Calculation Principle Analyze",
          "FPGA Image processing 24 — Sobel Pipeline Calculation Coding",
          "FPGA Image processing 25 — Sobel Pipeline Calculation Simulation",
          "FPGA Image processing 26 — Grayscale to RGB Coding and Simulation",
          "FPGA Image processing 27 — Sobel Mod Coding",
          "FPGA Image processing 28 — Sobel Mod Simulation"
        ]
      },
      "requirements": [
        "vivado",
        "verilog"
      ],
      "description": "The SOBEL image processing is a very popular algorithm for edge detection used to identify and highlight the object boundaries within an image. It has been implemented in all kinds of programming languages. Basically, it performs a 2D spatial gradient operation on one image. It primarily provides the areas of high spatial frequency corresponding to edges.\n\n\nThe SOBEL algorithm requires the calculation as fast as possible, and run lots of operation at the same time. FPGA can process many data at the same time, which is one of the best way to implement the SOBEL algorithm. However, the software program needs high skill and special knowledge. Here we demo the basic knowledge and skill, hope it can be the base for the FPGA image real time processing.\n\n\nThis course only focuses on sobel image processing coding and simulation for FPGA. Note: Though the hdmi and camera interface have been mentioned, they are NOT implemented in the course. It demos the basic knowledge and skill about FPGA real time image processing in verilog, including:\n\n\n(1) Sobel principle, algorithm and system implement in FPGA;\n\n\n(2) RGB to Grayscale, Grayscale to RGB coding and simulation;\n\n\n(3) Read, write BMP file skill in FPGA image processing simulation;\n\n\n(4) Single, double line FIFO Buffer coding and simulation;\n\n\n(5) Pipeline Principle, coding and simulation skill;\n\n\n(6) Verilog real time processing coding skill;",
      "target_audience": [
        "FPGA beginner, Student"
      ]
    },
    {
      "title": "Become an Embedded System Engineer w/ this 60 Days Challenge",
      "url": "https://www.udemy.com/course/become-an-embedded-system-engineer-30-days-challenge-embedded-system/",
      "bio": "Step by step All in One Challenge to be an Embedded System Engineering Engineer and master Needed Skills to Succeed",
      "objectives": [
        "Learn Embedded C",
        "Learn how to program, use and interact with Arduino",
        "Learn how to program, use and interact with PIC Microcontroller",
        "Learn Communication Protocols",
        "Learn Circuit Design and Simulation from scratch",
        "Learn 3D Design and Simulation to make your own 3D Models",
        "Learn PCB Fabrication from scratch",
        "Learn everything about Embedded System",
        "Learn to use all the software tools needed to be successful as an Embedded System Engineer",
        "Build an Arduino prototype to create your own game using LEDs",
        "Learn how to solve complex problems with microcontrollers",
        "Learn how to make your own products - make them work!",
        "How to implement communication protocols in your project"
      ],
      "course_content": {},
      "requirements": [
        "No prior experience in Embedded Systems is required",
        "You should have access to a Computer/laptop and Internet Connection",
        "You should be ready to commit 60 days to learning and practicing",
        "Be ready to Invent new things by making them do what you want"
      ],
      "description": "46 Hour of Full HD Content | 76 sections • 555 lectures | 95 articles\nThis Embedded Systems course is jam-packed with 60 days of lessons that take you from complete Embedded systems novice to feeling confident making your own Embedded systems products or starting a career in the industry.\nWhile you don't have to finish the course in 8 weeks, we've set up the course where each section teaches a new skill.\nA 60 Days challenge Learn to design embedded systems from scratch. You will not need prior knowledge of electronics, programming, or hardware.\nNow I want to help you learn how to become an embedded system engineer in this challenging 60 days Challenge.\nThis Challenge is a quick learning course for those who want to become an Embedded System Engineer and make you a pro.\n\n\nHere’s some feedback from our early bird student who tried the course before launch:\n\"I have been looking for a way to learn about embedded systems and microcontrollers. I am so glad I found this course. It is perfect for beginners and it is a 60-day challenge. The course is very easy to follow and the instructor is very knowledgeable. They also offer a money-back guarantee if you are not satisfied. I highly recommend this course to anyone who wants to learn about embedded systems and microcontrollers.\" Brian D.\n\"Become an Embedded System Engineer with this 60 Days Challenge that will help you learn embedded systems from scratch and master microcontrollers. With the guidance of Ashraf, you will be able to understand how to design and develop embedded systems by using a variety of hardware and software tools. The course is easy to follow and interactive, meaning you will be able to code your own system in no time.\" Kathren Sa.\n\n\nAre you looking for a quick start to a new career? Do you want to learn step by step from zero to embedded system engineer?\n\n\nBecome an embedded system engineer with the 60 Day Challenge. One of the most important aspects of software development is knowing how hardware interacts with software. Whether it's driving cars or running factories, the hardware has to be programmed just like software. The way software communicates with hardware is through the development of embedded systems which we'll teach you about in this challenge.\n\n\nIntroduction:\nThe course is designed to be completed in 60 days. The course covers programming, microcontrollers, communication protocols, circuit design, PCB design, and 3D Modeling and Simulation. It also includes two project-based courses that will guide the user through the development of a firmware package.\nThroughout this course, you will learn various embedded systems engineering skills like how to read AVR assembly code, use C, etc.\nBy reading the content and reviewing the exercises in this course, you will be able to learn how to program an embedded system.\nThis course is not only about programming but also about designing all aspects of a hardware system, including hardware connection and mechanical design.\n\n\nWhat You Will Learn In This Bundle:\nLearn Embedded C\nLearn how to program, use and interact with Arduino\nLearn how to program, use and interact with PIC Microcontroller\nLearn Communication Protocols\nLearn Circuit Design and Simulation from scratch\nLearn 3D Design and Simulation to make your own 3D Models\nLearn PCB Fabrication from scratch\nLearn everything about Embedded System\n\n\n\n\nDaily Section Overview:\nC Programming - 10 Days\nMicrocontrollers Arduino - 10 Days\nMicrocontrollers PIC Microcontroller - 10 Days\nCommunication Protocols - 7 Days\nInternet of Things - Extra\nCircuit Design and Simulation - 7 Days\n3D Design and Simulation - 6 Days\nPCB Fabrication - 10 Days\nWho Teaches This Course:\nThe 60 Day Embedded Systems Challenge is made by Educational Engineering Team, a team of engineers with years of professional experience in the Embedded Systems world. The team made videos that have been viewed by millions of people around the world for small and big companies.\nWe are thrilled to help you to start your embedded systems journey today! We understand what it's like to start from scratch and have tailored this course to complete beginners. At the same time, we share advanced techniques so even if you have some embedded systems experience, you'll still learn.\n\n\nThis Course includes:\nQuizzes\nAssignments\nHomeworks\nSource Codes\nInteractive learning methods\nFinal Project\nNew lessons will be added weekly\nLive Q&A Sessions to answer students questions\n\n\nStart your career as an Embedded System Engineer and master the needed skills to succeed.\nDo you want to take your career to the next level and get a new job as an embedded system engineer?\nAre you ready for a challenge? Do you want to master the skills needed to become an embedded system engineer?\n\n\nWhat students are saying:\n\" very very useful and very informative in short span of time , worth the money.\" Libra Varman . T\n\"This course is extraordinary. The content is very well explained and accompanied by examples. I definitely recommend it for beginners and not only\" Eduard Bumbu\n\"I am a self taught PCB world enthusiast with ideas and designs i want to make a reality and this course hits home. \" Steven Fleshman\n\"Thanks; I do not speak English, however the words and ideas are clear, very easy to understand from the language, to the instructions, I am already looking forward to writing code in python exploring other cards such as esp8266 etc. Wonderful what was explained has been looking for time and had found only very limited micropython.\" Fabian Lopez Mercado\n\"I would be so grateful if you could take time to go through the course and once you get an idea, then please leave an honest review and/or rating. I always start with some theoretical basics in the first few lectures that may sound a bit boring, but this is just a needed step so we can move together to the practical section of the course. I'm extremely motivated in helping you grow in your career. To Your Success, Ashr | Educational Engineering Team Leader\" AKASH SHARMA\nYOU CAN BECOME AN Embedded SYSTEMS ENGINEER IN JUST 60 DAYS!\nBecome an Embedded System Engineer in the shortest time possible.\n\n\nMore Course Details:\nBelow is a breakdown of each Sections of the challenge\n----------------------------------------------\nIn Day #1 - #10 We'll go over C Programming for embedded systems from scratch\nGo from zero to hero in programming with C Language and start your Journey as a highly paid  C Developer/Programmer\nWhy learn C Programming?\nC is a Middle-Level Language. The middle-level languages are somewhere between the Low-level machine-understandable assembly languages and High-Level user-friendly languages. Being a middle-level language, C reduces the gap between the low-level and high-level languages. It can be used for writing operating systems as well as doing application-level programming.\nHelps to understand the fundamentals of Computer Theories. Most of the theories related to computers like Computer Networks, Compiler Designing, Computer Architecture, Operating Systems are based on the C programming language and require a good knowledge of C programming if you are working on them. In modern high-level languages, the machine-level details are hidden from the user, so in order to work with CPU cache, memory, network adapters, learning C programming is a must.\nFewer Libraries. C programming language has fewer libraries in comparison with other high-level languages. So, learning C programming also clears programming concepts to a great extent as you have to write a lot of things from scratch. You will not be dependent on the programming language entirely for implementing some basic operations and implementing them on your own will also help you to build your analytical skills.\nC is very fast in terms of execution time. Programs written and compiled in C execute much faster than compared to any other programming language. C programming language is very fast in terms of execution as it does not have any additional processing overheads such as garbage collection or preventing memory leaks etc. The programmer must take care of these things on his own.\nEmbedded Programming. C is extensively used in Embedded Programming. Embedded Programming is also referred to as micro-controller programming, where the C program is used to control micro-controllers. Microcontrollers and embedded programming is widely used in auto-motives, Robotics, Hardware, etc.\nThis course introduces the C programming language features at the beginning of the semester. Topics covered include data types, control structures, standard input/output, file input/output, mathematic library, problem-solving, functions, arrays, dynamic memory, and pointers.\nWhy you should take this course?\nYou will learn to use C  languages for programming Microcontrollers\nYou will learn the difference between these two languages\nYou will learn how to program a microcontroller from scratch\nYou will gain a strong understanding of how a Microcontroller works\nYou will become a master in embedded system technology\nThis course will provide you with a strong understanding of how Microcontrollers work.\nYou will also gain an insight of what programming is about.\n\n\n----------------------------------------------\nIn Day #11 - #20 We'll go over Arduino Microcontroller in a step by step manner\nIn this Arduino Bootcamp you will learn Arduino in a Step By Step Manner and you will be able to do practical Projects\nWhy you should take this course?\nYou will learn Arduino in a Step By Step Manner\nYou will be able to do practical Projects\nLearn skills like basic engineering, programming, electronics, and IoT\nIt is an online course with videos and downloadable information\nYou will develop an understanding of the fundamental principles behind interactive multimedia systems and interactive applications\nArduino is an open-source, single-board, microcontroller for building devices that can sense and control objects in the physical world. In this instructor-led, live training, participants will learn how to program the Arduino for real-world usage, such as to control lights, motors and motion detection sensors.\n\n\n----------------------------------------------\nIn Day #21 - #30 We'll go over 8 bit PIC Microcontroller with more than 8.5 Hours of HD Content\nYou will enter Microcontroller world of wonders, and together we will make YOU a professional Microcontroller Geeks.\nWhy you should take this course?\n\n\nThe course contains a lot of information that is not found elsewhere and is organized in a practical, easy to follow matter\nThe course is  practical with plenty of examples and exercises\nThis course will help you learn the basics of Computer Programming from scratch\nStep by Step is an excellent introduction for those who have been regretfully put off by the Mathematical nature of most programming courses\nDetailed information on all aspects of Microcontrollers\nIt covers every aspect of microcontroller interfacing, from analog signal interfacing to digital interfacing, and more\nWhat you will Learn?\nThis course will teach you how to design, build, and program a microcontroller system.\nYou'll start with an introduction to microcontroller systems - their history, components, and architecture.\nYou'll learn the basics of digital logic, including binary numbers and Boolean algebra.\nYou'll learn how to read schematic diagrams and use a breadboard to create circuits.\nOnce you've mastered the basics, you can move on to more advanced topics like programming microcontrollers in C\nWith this knowledge under your belt, you'll be well on your way to designing next-generation electronics!\n\n\n----------------------------------------------\nIn Day #31 - #37 We'll go over Communication Protocols\nA step by step guide to Master Communication Protocols\n\n\nMore than 8 hours of Full HD Content | All In One Bundle to Master Communication Protocols in the Microcontroller World\nWhat You Will Learn In This Bundle:\nCreating a GUI to control Arduino and PIC Microcontroller\nUSB Interfacing for Different Microcontrollers\nArduino Communication with I2C Bus\nArduino Communication with SPI Bus\nPIC Microcontroller Communication with I2C Bus\nPIC Microcontroller Communication with SPI Bus\n\n\nWhy you should take this course?\nThis course will teach you how to effectively communicate with any microcontroller\nPerfect for professionals looking to understand the underlying principles of microcontroller communication\nYou can learn on your own time at your own pace, this course is also accessible for beginners\nYou will gain a practical understanding of the basics of communicating with microclusters\nYou will learn about serial communication protocols\nYou will understand what takes place in a packet when it comes in and out of a microcontroller\nYou will become fluent in TCP/IP networking protocols, which are used to send data over the internet\nYou will become fluent in Bluetooth protocols, which are used\n\n\n\n\n----------------------------------------------\nIn Day #38 - #44 We'll go over Circuit Design and Simulation\nEverything there is to know about how to Design, Simulate Electronic Circuits, Microcontrollers, Arduino and Make a PCB\n\n\nThis section Consists of 136 Lectures with more than 12.5 hours of HD Video Content and supplementary material in which we cover more than four different software used to design, simulate and fabricate circuits, I can assure you that after this course you will be a professional in Circuit design and fabrication.\n\n\nWhy you should take this course?\nThe course includes everything you need to know about the electronics design process\nLearn how to Design, Simulate Electronic Circuits, Microcontrollers, Arduino and Make a PCB\nLearn the science of electric circuits\nProgramming knowledge\nYou will learn about Fritzing Software and  Proteus Software\nGet access to all instructional videos\n\n\nYou will get the chance to learn:\nPCB Design and Fabrication using Fritzing Software\nPCB Design: Master Designing Printed Circuit Board using Proteus Software\nPCB Design: Make Arduino Nano using Altium Designer\n3D Simulation: Microcontrollers, Electronics, Mechanism, PCB using Yenka Software\nSoldering Electronic Components Like A Professional\nMicrocontroller Circuit Design and Simulation\nArduino Circuit Design and Simulation\n----------------------------------------------\nIn Day #45 - #50 We'll go over 3D Design and Simulation\nLearn how to create 3D Printed Enclosure for any Custom Microcontroller or electronic Board like Arduino UNO and Mega\n\n\nWhy you should take this course?\nDevelop a practical understanding of 3D modeling and 3D printing\nLearn how to design a case that will house any Arduino Board you have.\nDevelop a practical understanding of designing custom cases to hold electronic boards, in this case Arduino boards.\nUnderstand the importance of enclosing electronics in order to protect them from external forces.\nGain an understanding of how dimensions and axial dimensions are important in the design process.\nGain an understanding of what it takes to create a 3D model, understand constraints, and learn how to successfully print your project.\nLearn about Material Properties and Filament types that can be used for various projects.\nWhat You Will Learn:\nDownload and Install FREE Fusion 360\nUser Interface Explained\nCreate Your Frame using specific dimensions\nUse Extrude, chamfer, split, and other techniques\nTime back feature to fix mistakes\nCheck your design for errors\nImport 3D models to use as a reference\nCreate cut-outs and shape cuts\nAdd your name and artwork\nCreate a 3D Motion Video for your project\nYou will learn by practice: You will follow my steps to create 3D Enclosure for Arduino UNO and Arduino Mega!\nProvides an introduction to creating, editing, and analyzing 3D models. Develops foundational skills to work with, and navigate the digital 3D modeling workspace to create 3D objects. Examines basic elements of the 3D development of modeling, texturing, lighting, animating, and rendering.\n----------------------------------------------\nIn Day #51 - #60 We'll go over PCB Fabrication\n\n\nLearn Printed Circuit Board design using More than one software and Master the Art of PCB Design and Fabrication\nThis Section Consists of More than 80 Lecture with more than 6 hours of HD Video Content and supplementary material in which we cover more than four different software used to design, and fabricate PCB (Printed Circuit Board), I can assure you that after this course you will be a professional in PCB Printed Circuit Board design and fabrication.\n\n\nWhy you should take this course?\nLearn how to design, layout, and produce a Printed Circuit Board\nSave money on outsourcing PCB design work for prototyping\nLearn from a professional engineer who has been designing PCBs for over a decade\nLearn from the comfort of your home from the convenience of your computer\n\n\nYou will get the chance to learn:\nPCB Design and Fabrication using Fritzing Software\nPCB Design: Master Designing Printed Circuit Board using Proteus Software\nPCB Design: Make Arduino Nano using Altium Designer\n3D Simulation: Microcontrollers, Electronics, Mechanism, PCB using Yenka Software\n\n\nThis is a basic course for designing PCB using design software. PCB (Printed Circuit Board) designing is an integral part of each electronics product and this program is designed to make students capable to design their own projects PCB up to industrial grade.\n\n\n----------------------------------------------\nWhy you should take this course?\nYou can learn on your own time at your own pace, this course is also accessible for beginners\nLearn the skills to design, develop, test and deploy embedded systems\nThis course will help you master all the knowledge and skills required to become an Embedded System Engineer.\nLearn in a step-by-step manner from beginner level to advanced concepts.\n\n\nTake your skills to the next level by mastering more advanced topics.\nMaster a skill that will never expire\n\n\nYou don't need to know the first thing about embedded systems engineering to get started. Simply sign up for this 60-day challenge course and you will get all the knowledge, guidance, and support you need. With the help of our expert trainers, you will learn how to create embedded systems. You'll learn how to take care of your equipment, how to work in teams, and become a locksmith expert!\nThere is no time like the present - sign up today!\n\n\nTake this course and start your journey to be an Embedded System Engineer!",
      "target_audience": [
        "Anyone who wants to QUICKLY learn how to become an embedded system engineer",
        "Geeks, University students, hobbyists who want to learn Embedded systems",
        "Anyone who wants to learn the entire embedded system product manufacturing process from beginning to end",
        "This is a special program for those who want to become an Embedded System Engineer",
        "Hobbyist",
        "Beginners",
        "pro and non pro",
        "Developers that wants to gain more knoweldge",
        "A curious learner"
      ]
    },
    {
      "title": "Exploring AWS IoT",
      "url": "https://www.udemy.com/course/exploring-aws-iot/",
      "bio": "Device to AWS Cloud integration: Programming Embedded Devices and managing data in AWS IoT",
      "objectives": [
        "Program the ESP8266, ESP32, or Raspberry Pi 3 to send data to AWS IoT Core",
        "Connect to AWS free Tier and use relevant AWS services",
        "Understand MQTT, JSON, IoT, and the AWS cloud",
        "Become familiar with device to cloud communication",
        "Place IoT data into Dynamo DB by creating a table and data fields",
        "Gain competency designing graphs and using analytics on IoT data",
        "Code with basic programming structures in JavaScript, Python, and C",
        "Get experience with many AWS services vital to IoT like Lambda and S3",
        "Learn to Create Security certificates and policy's in AWS IoT"
      ],
      "course_content": {
        "Welcome to the course": [
          "Welcome to the Course",
          "IoT Devices used for the Course",
          "Development Board recommendations for 2022",
          "Software and Languages used for the Course",
          "The MQTT protocol for IoT and the Publish/Subscribe model",
          "Quiz on AWS and IoT"
        ],
        "Setting up Free tier AWS, AWS CLI, Policys, Security Credentials, and Testing": [
          "AWS Free Tier and Configuring the AWS CLI",
          "Update to AWS IoT Core for 2023",
          "AWS IoT Actions and Core related services",
          "Introducing IAM for IoT policys and Roles",
          "Creating AWS Security Credentials and Attaching an IoT Policy",
          "Communication protocols and security for devices on AWS",
          "Sending JSON test payloads from the AWS CLI and the IoT Core console",
          "Download the MQTT.fx test tool",
          "Using the MQTT.fx tool to test our MQTTs connection and send data to AWS IoT",
          "Using a MQTT.fx script for automated testing as a virtual IoT device",
          "Troubleshooting MQTT.fx connection error",
          "Alternate Option to MQTT.fx: MQTT Explorer",
          "Using the cURL tool to test our AWS IoT certificates via HTTPS to IoT Core",
          "Automated testing using a bash script and the AWS CLI",
          "AWS Setup quiz",
          "AWS Device connect quiz"
        ],
        "MQTTs Arduino sketch to AWS IoT Core for the ESP8266/ESP32": [
          "Arduino Sketch to connect your ESP8266/ESP32 directly to AWS IoT Core",
          "Modified ESP8266/ESP32 Arduino Sketch to deliver JSON payload to AWS IoT Core",
          "ESP8266 Updated sketch changes for Board Manager 3+",
          "Quiz on the Sketchs and the ESP devices"
        ],
        "HTTPs Arduino sketch to AWS IoT Core for the ESP8266 and ESP32": [
          "A word about Node-Red and the Arduino Sketch.",
          "The Arduino HTTPS Sketch to connect your device to AWS IoT Core",
          "Programming Quiz"
        ],
        "MicroPython to AWS IoT Core using Thonny on the ESP32 and ESP8266": [
          "Introduction to MicroPython and Thonny for the ESSP32 and ESP8266",
          "Setting up your ESP device for MicroPython and the Thonny IDE",
          "Programming the ESP32 to connect to AWs IoT Core with Thonny in MircoPython",
          "Programming the ESP8266 to connect to AWs IoT Core with Thonny in MircoPython"
        ],
        "Using Mongoose OS on embedded devices for AWS IoT": [
          "Introduction to Mongoose OS",
          "Reviewing the init.js demo code for our device",
          "Programming our own init.js firmware with Mongoose OS in Javascript",
          "Using Mongoose OS in 2022 to connect with IoT Core with a custom loop program",
          "Quiz on Mongoose OS"
        ],
        "Programming the ESP32 in Python with Zerynth (optional in 2022)": [
          "Zerynth update for 2022",
          "Registering your Device and Installing the virtual machine",
          "Configuring Zerynth to AWS IoT",
          "Running the Test program",
          "Customizing the test program",
          "Quiz on Zerynth for AWS IoT"
        ],
        "Programming the Raspberry Pi with the AWS IoT Device SDK V2": [
          "Introduction to the AWS IoT Device SDK's for the Raspberry Pi",
          "Installing the AWS IoT Device SDK in Python V2 and Running the Sample Code",
          "Modifying the Basic PubSub.py program for our enhanced IoT payload to IoT Core",
          "Installing the AWS IoT SDK in JavaScript V2 and Running the Sample Code",
          "Modifying the Basic Index.js program for our enhanced IoT payload to IoT Core"
        ],
        "SNS Push Notifications": [
          "Set up a text notification for our sensor data",
          "Set up an email notification for our sensor data",
          "Using conditional data testing for notifications"
        ],
        "S3 and data objects": [
          "Saving a data object driectly to S3",
          "Exporting data to CSV or JSON",
          "Creating an open and accessible public S3 data bucket in 2022"
        ]
      },
      "requirements": [
        "Comfortable using a PC, Mac, or a Linux computer",
        "Some knowledge of the Internet of Things ( IoT)",
        "Desire to understand device to cloud communication",
        "Experience with a basic IDE like Arduino",
        "Amazon AWS familiarity is helpful"
      ],
      "description": "This course explores the various features of device to cloud communication using Amazon AWS IoT Core on a AWS  free tier account.\n\n\nBefore the course starts we need an AWS free tier account, a local installation of the AWS CLI tool, and installation of the MQTT.fx testing tool (all free).  After this is set up we will program inexpensive, WiFi enabled embedded devices such as the ESP8266, ESP32, and Raspberry Pi to communicate with AWS IoT Core with MQTT.\n\nWe will take advantage of free \"Internet of Things\" (IoT)  development environments, like Mongoose OS in JavaScript, Arduino in C, Zernyth in Python, AWS FreeRTOS in C,  and the AWS IoT SDK in both JavaScript and Python for the Raspberry Pi to program our inexpensive WiFi devices.\n\nYou will need at least one or more of the following devices to transmit data to AWS IoT.  Alternately, you can send JSON test payloads from IoT Core directly, imitating a IoT device.  The course continues on with programming our embedded devices to send data from the device to the AWS cloud.  To transmit our data we will use the built in MQTT broker on our devices firmware, sending JSON encoded sensor data, to the AWS IoT console.\n\nDevice                                     Development Environment                Programming Language\nESP8266 12-E                           Mongoose OS, MicroPython                  JavaScript, Arduino\nESP32                                       Arduino, Zerynth, FreeRTOS                   JavaScript, Python, Arduino, C\nRaspberry Pi 3 Model B           AWS IoT SDK                                          JavaScript, Python\n\n\nFrom within the IoT console we will create AWS IoT “Rules” and “Actions” to explore many of the built in AWS IoT enabled services that are integrated in the AWS IoT Core console on the AWS cloud. Creating rules-based actions to AWS services we will send, store, file, manipulate, graph and analyze our sensor data through a variety of important AWS applications.   Some of these integrated applications, using these rule-based actions, are Dynamo Database, S3, SNS, Lambda, Data Pipeline, Glue,  QuickSight, AWS IoT Analytics, and SageMaker.\n\n\nIoT is largely the fusion of devices and the web, specifically the cloud; all sending and recording data, ubiquitously and continually, everywhere. Understanding and being able to  prototype and implement an end-to-end, device to cloud path communication is a much in demand career skill.\n\n\nHaving the skills to build a prototyping IoT solution in the cloud is already an important and highly demanded skill set for those wanting to call themselves IoT developers, and this is more true as time goes on and IoT exponentially expands as cheap connected devices become wide-spread.\n\nRemember! 30 days money-back guarantee with no questions asked. I want you to be happy with the value I believe this course provides.",
      "target_audience": [
        "Electronic Hobbyists wanting to acquire more IoT and cloud skills",
        "Engineers interested in the Internet of Things (IoT)",
        "Web or Cloud Programmers interested in Embedded Devices and IoT on the AWS cloud",
        "Embedded device Programmers interested in learning AWS Cloud"
      ]
    },
    {
      "title": "Risk Management: Master FMEA/FMECA & Criticality from A to Z",
      "url": "https://www.udemy.com/course/risk-management-mastering-fmeafmeca-criticality-matrix/",
      "bio": "Become an expert in Risk Analysis and Management by applying the most widely used and accepted methodology: FMEA/FMECA",
      "objectives": [
        "Perform the FMEA/FMECA analysis on products and design/production processes.",
        "Understand the meaning of criticality analysis.",
        "Perform qualitative, semi-quantitative and quantitative criticality analysis.",
        "Use criticality matrix and Risk Priority Number to prioritise remedial or preventive actions.",
        "Properly use a FMEA/FMECA worksheet, criticality matrix and report."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "GENERAL ASPECTS AND BASIC EXAMPLES": [
          "FMEA/FMECA Introduction",
          "Functional Approach",
          "Hardware Approach",
          "System Structure and First Simple FMEA Example",
          "FMEA"
        ],
        "FMEA": [
          "Introduction, Worksheet Header and Identification Column",
          "Failure Modes Determination",
          "Failure Causes",
          "Failure Effects",
          "Failure Compensating Measures",
          "Detection Methods",
          "Severity",
          "Frequency/Probability of Occurrence",
          "Remarks",
          "Analysis Procedure",
          "Example: FMEA for a Toy",
          "Example: FMEA for a Power Wheelchair",
          "Example: PFMEA (Process FMEA) for a Cooking Process",
          "FMEA Worksheet"
        ],
        "FMECA AND CRITICALITY MATRIX: QUALITATIVE ANALYSIS": [
          "FMECA",
          "Qualitative Approach and Probability",
          "Criticality Matrix",
          "How to Use and Read a Criticality Matrix",
          "FMECA - Qualitative",
          "Criticality Matrix"
        ],
        "FMECA: SEMI-QUANTITAVIVE ANALISYS": [
          "Risk R, and Risk Priority Number RPN",
          "Example of Ranking Scales in the Automotive Sector",
          "Risk Evaluation and Prioritisation",
          "Example of FMECA Worksheet with RPN",
          "Weaknesses of Using the Risk Priority Number",
          "FMECA - Semiquantitative"
        ],
        "FMECA: QUANTITATIVE ANALYSIS": [
          "Failure Mode Ratio \"α\" (Alpha)",
          "Modal Failure Rate \"λ\" (Lambda)",
          "Literature and Sources of \"α\" (Alpha) Values",
          "Failure Effect Probability \"β\" (Beta )",
          "Criticality Number \"C\" Determination",
          "Quantitative Criticality Matrix - Item Criticality Vs Failure Mode Criticality",
          "Criticality Matrix - Example 1 - Failure Mode Criticality",
          "Criticality Matrix - Example 2 - Failure Effects Criticality",
          "Quantitative FMECA",
          "Numerical quiz"
        ],
        "REPORT OF THE ANALYSIS": [
          "Scope, Contents, and Effects Summary",
          "Report"
        ],
        "BENEFITS AND LIMITATIONS": [
          "FMEA/FMECA Benefits",
          "FMEA/FMECA Limitations and Deficiencies",
          "Benefits and Limitations"
        ],
        "CONCLUSION": [
          "Conclusion and Greetings"
        ]
      },
      "requirements": [
        "Basic mathematical concepts.",
        "Know the basic concept of probability."
      ],
      "description": "\"Professional FMEA training with examples. Delivers a quality training for the full scope\", Fred\n\n\"It was a good course, well laid out and detailed. The instructor provided very good examples and resources\", Michelle\n\n\n\nCourse Description\n\nWith this course, you will be able to perform, at any level of detail and complexity, a complete Failure Mode and Effect Analysis, Criticality Analysis and Matrix, mastering indexes like Risk, Risk Priority Number, Failure Mode Failure Rate, etc.\n\nRisk Management is an extremely fascinating field, since it helps in foresee and manage hazards and probabilities thereof.\nNowadays, this disciplines is widely used in many fields, and sometimes also required by the legislation. The most common use of risk management are:\n- risk evaluation in product design, e.g. during medical devices and machinery design\n- financial risk evaluation\n- safety on workplace risk assessment\n- design and processes in automotive and aerospace\n- risk evaluation during potentially hazardous processes, like food production, and so on\n- risk evaluation in project management\n- process control techniques, e.g. six sigma\nWe may resort to many different techniques for risk evaluation, however, the most widely used and accepted, is FMEA/FMECA, i.e. Failure Modes, Effects and Criticality Analysis.\nThis methodology follows a bottom-up approach, and starting from the failure of a component (or a phase if we are talking about a process), estimates the final effect and evaluates it consequences. Even if it seems easy to understand at a first sight because of its intuitive concept, actually, performing it thoroughly is not an easy matter, especially if you consider that, the FMEA/FMECA documentation often has a legal value, since you may be asked by the court in case of accidents to show it, in order to prove your design or process was performed with the user safety in mind.\n+++++ Have a look at the course curriculum and at the intro lesson +++++\n\nIn this course we will study both FMEA and the Criticality Analysis, starting from the basic qualitative analysis to the more complex quantitative criticality analysis (and its representation with the criticality matrix) using modal failure rates, and effect conditional probability.\nThere are many version of FMEA/FMECA, and in order to provide the most useful and valuable learning experience to you, we will use as a reference the International Standards IEC 60812, \"Analysis techniques for reliability - Procedure for failure mode and effects analysis (FMEA)\" .\n\nHowever, this standard cover very effectively only FMEA and the qualitative and semi-quantitative  FMECA, not providing much details on quantitative criticality analysis. Therefore, for the latter methodology, I will refer to the methodology borrowed from the US military Standard MIL-STD-1629, which provide a very accurate numerical methodology for the criticality calculation.\nWhich are also the approaches I use in my professional activity.\nIn the course, we will also talk about of Process FMEA, PFMEA, with a simplified  example on a cooking process, and of Design FMEA, DFMEA. We will provide various example, on electric toys, cooking process and various components. However you will get the most from the course if you work in the design field, in particular product design or electronic design, and you will find many examples in it.\nHAVE A LOOK AT THE LESSONS AVAILABLE FOR FREE IN THE COURSE CURRICULUM !!!\n\nAs we said, FMEA/FMECA are very versatile tools, therefore, once learned its concepts, it will be easy to transfer it to other fields, therefore even if you are not exactly in the product development or electronics field, you will earn valuable information and concepts from this course.\nAt the end of the course, you will be able to perform, at any level of detail and complexity, a complete Failure Mode and Effect Analysis, and a  Criticality Analysis.\n\nHAPPY LEARNING!!!",
      "target_audience": [
        "Persons involved in Quality Assurance",
        "Persons involved in product design",
        "Designers and engineers who need to take into account risks",
        "Persons involved in risk analysis and risk management",
        "Project managers",
        "Innovation and technology executives",
        "Process engineers",
        "Safety professionals",
        "Risk managers"
      ]
    },
    {
      "title": "Factory Automation using PLC Logics",
      "url": "https://www.udemy.com/course/factory-automation-using-plc-logics/",
      "bio": "Interactive 3D platform to build and simulate Industrial Automation system",
      "objectives": [
        "To learn how to build Industrial Automation System as per the application",
        "Learn mechanics of installing sensors and actuators in machine",
        "Simulating your industrial system with PLC Logics",
        "Testing and analyzing feasibility of the project."
      ],
      "course_content": {
        "Welcome to the course": [
          "Welcome to the course",
          "Introduction to the course- Factory Automation using PLC"
        ],
        "Introduction to FACTORY I/O": [
          "Understanding Factory I/O Software",
          "Understanding light load conveyor types",
          "Start, Stop and direction control of light load conveyors",
          "Controlling speed of conveyor using POT",
          "Conveyor conveyor speed and direction using sensors",
          "Building Conveyor system Part-1",
          "Building Conveyor system Part-2",
          "Adding Em-Stop to conveyor system",
          "Conveyor energy saving condition",
          "Finalizing conveyor system",
          "Connect with me on LinkedIn",
          "Join our Telegram group"
        ],
        "Factory IO: Understanding Part Essential - How to use?": [
          "Important info",
          "Items- Emitter, Remover, Pallets and Boxes"
        ],
        "Industrial Conveyors": [
          "Heavy Load Conveyors",
          "Light Load Conveyors",
          "Conveyor Scale"
        ],
        "Industrial Sorters": [
          "Pivot Arm Sorters",
          "Pusher",
          "Pop up Wheel Sorter",
          "Wheel aligner, bracket and Stop Blade"
        ],
        "Industrial Sensors and Operators": [
          "Diffuse, Inductive and Capacitive Sensor",
          "Sensors - Light Array and Retro-reflective type",
          "Operators and Walkaway"
        ],
        "Pick and Place Actuator": [
          "Pick and Place Discrete",
          "Pick and Place (Analogue)"
        ],
        "Elevator and Crane": [
          "Elevators",
          "Stacker Crane"
        ],
        "Building Industrial System and simulating via Connect IO": [
          "Operating Conveyor using Start/stop Buttons – ON/OFF and direction control",
          "Operating Conveyor using Start/stop Buttons – ON/OFF and Direction Control",
          "Speed control of Conveyor using Potentiometer",
          "To and Fro motion of box on the conveyor using sensors",
          "To and Fro motion of box with varying speed on the conveyor using sensors",
          "Conveyor Sorting System based on height using Pivot Arm Sorter",
          "Conveyor Sorting system based on weight using Pusher (1)",
          "Conveyor Sorting system based on weight using Pusher (2)",
          "Buffer Station",
          "Converge Station",
          "Download FACTORY I/O Scene and Control I/O Solutions"
        ],
        "FACTORY I/O Exercise using Delta PLC": [
          "How to link PLC with FACTORY I/O?",
          "FACTORY I/O - PLC Exercise",
          "To latch and unlatch conveyor using Push button",
          "To change the direction of Conveyor",
          "To change the direction of Conveyor using sensors",
          "To understand the concept of Emitter and Remover",
          "Interlocking of two conveyors using Sensors",
          "Use pusher to divert the box on Chute conveyor",
          "Indicating the operation of Conveyor using Indicators",
          "Sorting of small/large boxes using Pusher",
          "Use of Pivot arm to divert the boxes on Chute conveyor",
          "Sorting of sall/large boxes using pivot arm",
          "Use of Stop Blade for Buffering",
          "Use of pop up Wheel for Box sorting",
          "Use of Chain transfer for transferring the boxes",
          "Converge System",
          "Use of Turn Table to divert the boxes",
          "Sorting of Boxes based on height using turn table",
          "Get FACTORY I/O Licenses",
          "How to save the course via Mobile application?",
          "How to download Udemy Certificate?",
          "Congratulations and Bonus"
        ]
      },
      "requirements": [
        "Basics of Mechanics"
      ],
      "description": "This course has been created for the users who wants quick learning on real time industrial application like Sorting, Packaging, We have used high end software like FACTORY I/O and CONTROL I/O to explain PLC Logics.\nFactory I/O is the world's first flexible 3D simulation software that takes the simulation of industrial systems to a new level. With state-of-the-art graphics, physics and dynamic sound, Factory I/O immerses users in a realistic 3D industrial environment . With this real time sandbox, users can edit pre-built industrial systems or build new ones. All systems are completely interactive and can be controlled by a wide range of technologies\nNote: Standard license has limited/unlimited access to all drivers and the SDK, a .NET Framework 2.0 assembly, which enables inter-process communication (IPC) between FACTORY I/O and the user's own applications. With the Open (SDK), you can develop your own drivers and use CONTROL I/O.\nEDUCATIONAL AND TRAINING TOOL FOR\nIndustrial Automation\nIndustrial Mechanics\nIndustrial Maintenance\nElectrical Engineering\nMechanical Engineering\nMechatronics\nThis fully interactive simulation includes cutting edge physics, high quality graphics and sound, providing a realistic environment. FACTORY I/O uses an innovative technology that allows an easy and quick creation of 3D industrial systems through a drag and drop approach.",
      "target_audience": [
        "Mechatronics Engineers",
        "Electrical/ Electronics Engineers",
        "Instrumentation Technician",
        "Engineering Students"
      ]
    },
    {
      "title": "Schematics: Electronics, Electrical Wiring & Circuit Diagram",
      "url": "https://www.udemy.com/course/schematics-electronics-electrical-wiring-circuit-diagram/",
      "bio": "Learn how to read any electronics schematics, laptop schematics, basic electrical wiring & circuit diagram in general",
      "objectives": [
        "How to read electronics schematics;",
        "How to troubleshoot using schematics;",
        "How to analyze electronics schemes;",
        "Basic electronics symbols;",
        "Integrated circuits ICs pinout."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge in Electronics"
      ],
      "description": "**Continuous Updates**\n10 Reasons why you should choose this course:\nThe course will teach you Electronics, Electrical Wiring & Circuit Diagram in detail.\nThe course is created with perfect care by a computer engineer;\nOne-On-One Support;\nThe course is not long, so you can complete it in a short time, and then enjoy your new experiences;\nYour inquiries will be answered in a short time with a full explanation of any question;\nConstant updates.\nSimple and easy-to-understand explanation with examples;\nA certificate will be provided upon completion of the course;\nYou going to learn how to analyze any electronics schematics based on this course;\nThe course will teach you how to read schematics step by step in an easy way;\nYou will learn in this Course:\nElectronics Schematics Overview;\nBasic Electronics symbols;\nIntegrated Circuits, ICs Pin Configuration ;\nWiring and Connections;\nHow To Read Electronics Schematics step by step;\nUnderstanding Basic Electrical Circuit Diagram;\nAdvanced Schematic Studying & Analysis;\nHow to Troubleshoot Failures using Schematics;\nHow to analyze electronics schemes and much more\nI will guide you step by step with an easy explanation along this course.\nIf you are interested in one of the points we talked about before, then this course is for you.\nWhat are you waiting for?\nGo ahead and join us.\nI'll love to see you in the class.",
      "target_audience": [
        "Students who are interested in electronics, electrical circuit diagram & computer Hardware;",
        "Electronics and computer engineers or technicians;",
        "anyone who is interested to electronics & computer motherboard repairing."
      ]
    },
    {
      "title": "RSlogix/Studio5000 Training using Function Block Diagrams.",
      "url": "https://www.udemy.com/course/plc-programming-using-fbds-with-logixstudio5000/",
      "bio": "This is RSlogix/Studio5000 Training at a Higher level using Function Block Diagrams.",
      "objectives": [
        "After this course, you will be able to Create Function Block Diagrams using Logical instructions, Analog instructions and PID control.",
        "You can create logic functionality in ladder. Now learn how to do this in FBD's.",
        "Learn how to use analog functions in FBD's. Much easier than ladder.",
        "Do you know PID control? Program a PID loop in FBD's. So straight forward."
      ],
      "course_content": {},
      "requirements": [
        "It is necessary that you have knowledge of RSLogix5000 software. If you have already taken my Basic and Advanced course, this will be an asset."
      ],
      "description": "This course covers the RSlogix/Studio5000 Function Block Diagram Training and is for any of you who require knowledge of Studio5000 Programming Techniques using the alternative languages available, in any of the 4 platforms where it is used. This software, and the  Rockwell Automation platforms that use it, is very powerful and for me is my PLC software and hardware of choice, Very user-friendly. I shall be your instructor during this training and I have had many years of practical experience creating projects and programming PLC's, HMI's, commissioning and face-to-face training. I also possess a SAQA Further Education and Training Certificate: Measurement, Control and Instrumentation. This is South African but recognized in many countries internationally.\nThis course is quite advanced so it is not for the novice. It will be to your advantage if you have previously completed the courses, Studio 5000 Ladder Logic Training. Basic  and the Studio 5000 Ladder Logic Training. Advanced. I will show you how to create a project and use programming techniques utilizing Function Block Diagrams with Studio 5000.\nWho Should Take This Course?\nThis Studio5000 Training Using PLC Function Block Diagrams course is designed as a course for users who require the knowledge to use these languages with confidence.\nThis course is also strongly recommended if you wish to have the choices of language used to create your project.\nThis is an advanced course, so it will be advantageous if you have first taken  Studio 5000 Training Using PLC Ladder Logic. Advanced.\nListed below are some of the topics I will cover with you in this course.\nProgramming Logical functions using FBD's.\nProgramming Analog functions using FBD's.\nProgramming PID control using the PIDE instruction in FBD's.\nProgram control instructions using FBD's.\nTimers and Counters in FBD's.\nRamp/Soak and Totalizer Instructions.\nConfiguration of a D2SD device.(New Lesson.)\nConfiguration of a D3SD device.(New Lesson.)\nThis is just a short description explaining what you will learn but there is a lot more that you will learn if you take the Studio 5000 Function Block Diagrams Training.\nThere are a number of quizzes that you can complete after each section to help you reinforce your knowledge and gain confidence using the software. There are also some practical labs for you to complete. Solutions will be available. The solutions are in Lecture 21.\nAt the end of the course, you will feel confident creating and running a project, interrogating an existing project, and carrying out necessary changes to a running operation.\nThe majority of the course consists of video tutorials where I will explain all the different aspects of RS Studio 5000 and demonstrate the use of the software for each of these aspects.\nThe more you can use the software, the better you will be.\nSo if you are really serious about learning RS Studio 5000 using platforms such as Controllogix, Compactlogix or even Softlogix and you have reasonable knowledge of the software, then this course is for you. Enroll on this course and you can be learning Today.",
      "target_audience": [
        "Anyone who wishes to learn RSlogix5000 PLC programming to a Higher level and use programming, maintenance and commissioning."
      ]
    },
    {
      "title": "SPICE Simulation For Beginners With OrCAD PSPICE -EsteemPCB",
      "url": "https://www.udemy.com/course/spice-simulation-for-beginners/",
      "bio": "On OrCAD Pspice, we will simulate 10 different circuits for DC-Sweep, AC-Sweep, Transient and Parametric-Sweep Analysis",
      "objectives": [
        "What is SPICE Simulator and How it works?",
        "Where do we use SPICE Simulators?",
        "How to use Cadence OrCAD PSPICE Simulator?",
        "What is DC-SWEEP Analysis and how to apply it on different complexity level circuits?",
        "What is Transient analysis and how to apply it on different complexity level circuits?",
        "What is Frequency Sweep or AC-Sweep? And how to apply it on different complexity level circuits?",
        "What is Parametric Sweep? And how to apply it on different complexity level circuits?"
      ],
      "course_content": {
        "Introduction of SPICE, How it works and types of simulations on PSPICE": [
          "Section's Introduction, related documents and project files",
          "What is SPICE, How it works and Types of simulation we can do on Cadence PSPICE?"
        ],
        "Level-1 Circuit: Different SPICE Simulations using Cadence PSPICE": [
          "Section's Introduction, related documents and project files",
          "Level-1 Circuit Introduction and process of creating new project",
          "DC-Sweep Analysis on Level-1 Circuits",
          "AC-Sweep /Frequency Response, Bode Plot Gain & Phase Margin on Level-1 Circuit",
          "Transient Analysis on Level-1 Circuit"
        ],
        "Level-2 Circuits: Different SPICE Simulations using Cadence PSPICE": [
          "Section's Introduction, related documents and project files",
          "Circuit Introduction and Calculations on Level-2 Circuits",
          "Frequency Response Bode plots on level-2 Circuits"
        ],
        "Level-3 Circuits: Different SPICE Simulations using Cadence PSPICE": [
          "Section's Introduction, related documents and project files",
          "Basics of Buck-Converters and few derivations before going for simulation",
          "Buck-Converter Schematic and Vout Derivation",
          "How Inductor energy transfer works for buck converter",
          "Open-loop and Close-loop Buck Converter Simulations and Comparisons of Outputs"
        ],
        "Level-4 Circuits: Different SPICE Simulations using Cadence PSPICE": [
          "Section's Introduction, related documents and project files",
          "Boost Converter Simulations for IL, Vout, IC, and VL etc."
        ]
      },
      "requirements": [
        "Don't need any prior knowledge or experience of SPICE simulation, everything is going to be discussed from very scratch.",
        "Make sure your PC has Cadence OrCAD Pspice.",
        "Basic Understanding of circuit design."
      ],
      "description": "This course is divided into #5 different sections, under each section I have discussed different complexity levels of circuits and their SPICE simulations:\nSection-1 In this section I have discussed\n\"What are SPICE, How it works, and Types of simulation we can do on Cadence PSPICE?\"\n\nSection-2 is all about Level-1 Circuits, their maths, and simulations.\n\"DC-Sweep, AC-Sweep/Frequency Response, Transient analysis on different RC and LC filters\"\n\nSection-3 is all about Level-2 Circuits, their maths, and simulations.\n\"We'll start with circuit introductions and then perform frequency responses and bode plots for gain/phase margins, Circuits we'll discuss under this sections are Active LPF, Inverting and Non-inverting Amplifiers\"\n\nSection-4 is all about Level-3 Circuits, their maths, and simulations.\n\"Under this section, we'll start with Basics of Buck converters and do few derivations to do design calculations, then we'll draw it's schematic and perform different spice simulations like Frequency responses, Probe and understand the working, how we can make it better with a close loop buck converter, etc.\n\nSection-5 is all about Level-4 Circuits, their maths, and simulations.\n\"Under this section, we'll start with Basics of Boost converters and do few derivations to do design calculations, then we'll draw it's schematic and perform different spice simulations like Frequency responses, Probe and understand the working, how we can make it better with a close loop buck converter, etc.",
      "target_audience": [
        "People who wanted to learn SPICE Simulation",
        "Wanted to learn Cadence OrCAD PSPICE",
        "People who wanted to learn how to simulate different circuits for DC-Sweep Analysis",
        "People who wanted to learn how to simulate different circuits for AC-Sweep / Frequency Response Analysis",
        "People who wanted to learn how to simulate different circuits for Transient Analysis",
        "People who wanted to learn how to simulate different circuits for Temperature Sweep Analysis",
        "People who wanted to learn how to simulate different circuits for Monte-Carlo"
      ]
    },
    {
      "title": "PCB/Electronics: Thermal Management, Cooling and Derating",
      "url": "https://www.udemy.com/course/pcbelectronics-thermal-management-derating-fundamentals/",
      "bio": "Master the most important concepts of cooling, thermal management and derating, with a focus on PCB development aspects.",
      "objectives": [
        "Design a PCB/electronic application using comprehensive approach to thermal management, cooling and component derating for reliability.",
        "Know what heatsinks are, their most important aspects and how to choose them for a proper thermal management and cooling.",
        "Undersand and choose heat sink mounting techniques and thermal interface materials.",
        "Understand the use of fans in thermal management and cooling, their impact on heat sinks thermal resistance and parameters.",
        "Master thermal aspects with respect to PCB routing and design (copper plane, vias and similar) and parameters influencing it.",
        "Understand re-rating and de-rating of electronics components (derating power, voltage, currents, fan out, and so on).",
        "Master the reliability aspects of thermal management, cooling and derating, especially with respect to electrical and thermal stress factors.",
        "Analyse, calculate, and design the hardware thermal control of a PCB.",
        "Cool components in PCB design using a proper approach.",
        "Understand the most used cooling techniques and all the parameters influencing it."
      ],
      "course_content": {},
      "requirements": [
        "Knowledge of the basic electronic concepts, like current, voltage, power and Ohm's law.",
        "Knowledge of common electronic components (transistors, capacitors, and other devices of widespread use) and basic PCB concepts."
      ],
      "description": "This course is about cooling, thermal management and derating in PCB design.\nAfter introducing the basic definitions, it provides a clear and logical path to a complete design of thermal aspects.\n- It starts with calculating the dissipated power for different types of components, and understanding whether the thermal equilibrium is optimal or we need a thermal management strategy.\n- Then it introduces heat sinks, which is by far the most used cooling approach, talking about their features, mounting techniques, parameters and so on.\n- Than it speaks about thermal interface materials, used to couple heat sinks to integrated circuits, their types and characteristics.\n- It also speaks about the forced air cooling technique, introducing how to calculate a fan performance and its impact on the heat sink thermal resistance.\n- Then it explains PCB related aspects for thermal management, of particular relevance when the used devices have exposed pads.\nAt the end of these group of lessons, you will be able to understand the need for thermal management and provide your design with a comprehensive strategy mastering all the related aspects and variables influencing it (like altitude, spreading resistance, etc. )\n\nThen the course dedicate an entire section to a related and very important aspect: derating.\nIt explain the concept of re-rating and de-rating, its impact on electronic devices reliability and expected life (MTBF, Mean Time Between Failure, nowadays often used instead of MTTF, Mean Time To Failure), and it shows how the most used electronic components are derated and which parameters are reduced.\nThe course is enriched with exercises and real life examples, using real devices datasheets to show where parameters are gathered and how they are used.\nAt the end of the course you will have a broader understanding of the thermal/cooling management and derating aspects, and you will able to design a PCB that is able to manage the dissipated power (and related temperature rise), and properly choose components parameters based on the right derating considerations.\nTherefore, you will be able to design a PCB that stands thermal and electrical stresses and that actually works and last in the real world environment.",
      "target_audience": [
        "Students interested in electronics, embedded systems and PCB design.",
        "Students who want to understande the most important cooling techniques and basics.",
        "Students who are interested in electronics reliability against thermal and electrinic stress.",
        "Persons interested in derating and its impact in enhancing a device expected life."
      ]
    },
    {
      "title": "Wireless Power to the People - Wireless Charging 101",
      "url": "https://www.udemy.com/course/wireless-power-to-the-people-wireless-charging-101/",
      "bio": "An introduction to the world of modern wireless power electronics with practical engineering demo circuits",
      "objectives": [
        "Learn the various wireless power methods in research and development today (including a few that are scams!)",
        "Learn the pros and cons of all the different wireless power methods and the ONE technology mature enough for mainstream consumer use",
        "Understand electromagnetic induction",
        "Intuitively understand resonance and LC resonant circuits",
        "Understand inductive coupling and resonant power transfer",
        "Build a circuit that can wirelessly power a small fan",
        "Build a wireless power circuit that can power an LED 15cm away",
        "Build a wireless power circuit that can power LEDs, electric motors and more 30cm away",
        "Understand \"the skin effect\" and how to mitigate it",
        "Understand the main components of modern commercial wireless charging systems (with emphasis on Qi)",
        "Understand how data communication works in Qi wireless power systems",
        "Use off the shelf hardware to wirelessly charge phones, Playstation controllers and other USB devices",
        "Use off the shelf hardware to wirelessly power any electronic device up to 4 watts"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of electricity, resistors, capacitors, inductors, transistors, breadboards",
        "Basic knowledge of schematic reading, function generators and oscilloscopes if you want to recreate some of the experiments yourself",
        "The bill of materials is US$11 if you would like to replicate the experiments at home"
      ],
      "description": "Welcome to Wireless Power to the People, the course that brings wireless power to the masses. In this course you're going to learn the basics of the different types of wireless power being researched and developed today. Spoiler alert: Some of them work a lot better than others!\nYou're going to start out by learning the basics of magnetic induction. Then I will show you the power of resonance. Soon you're going to learn how to build a simple wireless powered LED. Things are really going to get interesting when you learn how to increase the power and range of the system, and wirelessly power LEDs, motors, fans and more up to 30cm away! And for the final project we're going to upgrade USB powered devices to be charged with wireless power.\nIf you have ever wondered how wireless charging works, this course is for you.\nIn the media we've seen countless stories of wireless charging using radio waves, vibration and more. Yet we still haven't seen these devices appearing in our homes. Millions of dollars in venture capital have been burned because investors did not fundamentally understand the various technologies used in wireless power.\nIn this course I'm going to cut through all the hype and explain the different types of wireless power being researched today... the pros and cons of each, which ones are viable, which ones are not, and why. Best of all, you will not need a PhD in physics to understand what is going on. Math in this course will be kept to a minimum, and the focus will be on developing an intuitive, visual understanding of the concepts involved.\nDuring the course I am going to be showing you some wireless charging experiments that will require a power supply, an oscilloscope, and a few electronic components. If you don't have these things and you don't feel comfortable building circuits, don't worry. You'll still have a ton of fun just watching the demonstrations and you'll be able to understand the magic behind wireless power. By the end of the course you will know how to wirelessly power any electronic device up to 4 watts! The basic principles taught in this course will scale to higher power levels if you choose to continue work in this field.\nIf you've ever wondered how a Samsung phone charges, this course is for you. If you have ever wondered how iPhone X and Apple Watch charging works, this course is for you. If you are a student or junior engineer who is looking to get up to speed on practical solutions to wireless power problems this course is for you. And if you're someone who is thinking of investing money in a crowdfunded wireless power project, do not spend a dime until you have watched this course!\nThank you for watching, and I hope to be teaching you soon!",
      "target_audience": [
        "Anyone who wants to understand the magic behind wireless power technology",
        "Science and engineering students",
        "Technicians and junior engineers",
        "Investors looking to invest in wireless power projects",
        "Technophiles and gadget lovers"
      ]
    },
    {
      "title": "Verification Series Part 6 : SystemVerilog Assertions Basics",
      "url": "https://www.udemy.com/course/systemverilog-assertions-for-newbie/",
      "bio": "Step by Step Guide from Scratch",
      "objectives": [
        "Insights of System Verilog Assertions according to LRM 1800 2017",
        "Insights of Boolean, Sequence and Property Operators",
        "Power of the Concurrent and Immediate assertions",
        "Insights of System Tasks and Sampled Edge functions",
        "Usage of the Local Variables in Concurrent assertions",
        "Application of Immediate assertions to digital systems",
        "Application of Concurrent assertions to digital systems",
        "Application of the assertion in FSM",
        "Usage of the assertion in SystemVerilog TB"
      ],
      "course_content": {
        "Introduction to the SVA Power and IDE Usage, Course": [
          "Course Framework",
          "Agenda",
          "How to use IDE",
          "Code",
          "Verilog vs SVA",
          "Power of SVA P1",
          "Code",
          "Power of SVA P2",
          "Code",
          "Power of SVA P3",
          "Code",
          "Power of SVA p4",
          "Code",
          "Behavior of the Assertion statements in Synthesizer",
          "Code"
        ],
        "Immediate assertions": [
          "Agenda",
          "Journey of Assertions",
          "Different Simulation Regions and Glitches",
          "Demonstration",
          "Code",
          "Format of different assertions types",
          "Rules for Immediate assertions",
          "Usage of Immediate assertion in Combinational circuit",
          "Code",
          "Usage of Immediate assertion in Sequential circuit",
          "Code",
          "Disabling assertions P1 : Collective Disable",
          "Code",
          "Disabling assertions P2 : Selective Disable",
          "Code",
          "A21",
          "A22",
          "A23",
          "FAQ : Q1"
        ],
        "Getting Started with Concurrent Assertion": [
          "Agenda",
          "Layers in Concurrent Assertions",
          "Allowed operators in each layer",
          "Format of Concurrent assertion",
          "Single or Multiple Evaluation of Property",
          "Demonstration",
          "Code",
          "Understanding Clock edges",
          "Code",
          "Default Clocking",
          "Code",
          "Disabling Concurrent assertion",
          "Code",
          "A31",
          "A32"
        ],
        "Implication Operators": [
          "Agenda",
          "Implication Operators Fundamentals",
          "Overlapping Implication Operator Demo P1",
          "Overlapping Implication Operator Demo P2",
          "Code",
          "Filtering Vacuous Success",
          "Code",
          "Non-Overlapping Implication Operator Demo P1",
          "Non-Overlapping Implication Operator Demo P2",
          "Code",
          "Property and Sequence with arguments",
          "Code",
          "A41",
          "A42",
          "A43",
          "A44",
          "A45"
        ],
        "System Task Part 1": [
          "Agenda",
          "Use of $sampled",
          "Code",
          "Understanding $rose",
          "$rose with single bit signal",
          "Code",
          "$rose with multi-bit signal",
          "Code",
          "Specifying clock for the sample function",
          "Understanding $fell",
          "$fell with Single bit signal",
          "Code",
          "$fell with Single bit and Multibit Signal",
          "Code",
          "Understanding $past P1",
          "Understanding $past P2",
          "Demonstration",
          "Demonstration P2",
          "Code",
          "Typical Used Cases",
          "Demonstration of few used cases",
          "Code",
          "A51",
          "A52",
          "A53"
        ],
        "System Task Part 2": [
          "Agenda",
          "$changed + $stable",
          "Code",
          "$onehot + $onehot0",
          "Code",
          "$onecold",
          "Code",
          "$isunknown",
          "Code",
          "$countbits",
          "Code",
          "$countones",
          "Code",
          "Summary",
          "Used Cases",
          "Code",
          "A61",
          "A62"
        ],
        "Sequence Operators": [
          "Agenda",
          "Getting Started with delay Operator ##",
          "Constant Delay",
          "Code",
          "Variable delay",
          "Code",
          "Unbounded Delay",
          "Code",
          "Summary",
          "Repetition Operators",
          "Consecutive Repetition Operator with constant count",
          "Consecutive Repetition Operator with range",
          "Demonstration",
          "Code",
          "Consectuive Repetition Operator with Unbounded range",
          "Used cases",
          "Code",
          "Non-Consectuive Repetition Operator with constant count",
          "Code",
          "Non-Consecutive Repetition Operator with range",
          "Code",
          "Summary",
          "GOTO VS Non-Consecutive Insights",
          "Demonstration",
          "Code",
          "Used Cases",
          "A71",
          "A72",
          "A73",
          "A74"
        ],
        "Working with Multiple Sequences": [
          "Agenda",
          "Fundamentals of Boolean Operators",
          "Usage of AND operator",
          "Code",
          "Usage of OR operator",
          "Code",
          "Used Case",
          "Code",
          "Matching Operators",
          "Usage of throughout",
          "Code",
          "Within operator P1",
          "Within operator P2",
          "Code",
          "Intersect Operator",
          "Code",
          "Used Cases",
          "Demonstration I",
          "Code",
          "Demonstration II",
          "Code",
          "Demonstration III",
          "Code",
          "A81",
          "A82",
          "A83",
          "A84"
        ],
        "Linear Temporal Logic Operators": [
          "Agenda",
          "Getting started with eventually",
          "Common Usage of eventually",
          "Strong and weak form of eventually",
          "Success and Failure of eventually",
          "Demonstration of eventually",
          "Code",
          "Strong and Weak demonstration",
          "Code",
          "Summary",
          "nexttime",
          "Code",
          "until",
          "Understanding Success and Failure",
          "Demonstration",
          "Code",
          "Strong and Weak nature of until",
          "Code",
          "Followed by Operator",
          "Demonstration",
          "Code",
          "A91",
          "A92",
          "A93",
          "A94",
          "A95"
        ],
        "Local Variables": [
          "Agenda",
          "Fundamentals of Local Variables",
          "Behavior of Local variable with threads P1",
          "Behavior of Local variable with threads P2",
          "Code",
          "Behavior of Local variable with threads P3",
          "Code",
          "Used Case I",
          "Code",
          "Used Case II",
          "Code",
          "Used Case III",
          "Code",
          "Used Case IV",
          "Code",
          "Used Case V",
          "Code"
        ]
      },
      "requirements": [
        "Fundamental understanding of Verilog"
      ],
      "description": "Nowadays, Incorporating the Assertions in the Verification of the design is common to verify RTL behavior against the design specification. Independent of the Hardware Verification Language( HVL ) viz. Verilog, SystemVerilog, UVM used for performing verification of the RTL, the addition of the assertions inside the Verification code helps to quickly trace bugs. The primary advantage of using SV assertion over Verilog-based behavior check is a simplistic implementation of the complex sequence that can consume a good amount of time and effort in Verilog-based codes. SystemVerilog assertion has a limited set of operators so learning them is not difficult but choosing a specific operator to meet design specifications comes with years of experience. In this course,  We will go through series of examples to build a foundation on choosing a correct assertion strategy to verify the RTL Behavior. The assertion comes in three flavors viz. Immediate Assertion, Deferred Immediate assertion, Final deferred immediate assertion, and Concurrent Assertion. An assertion is a code responsible for verifying the behavior of the design. Full Verification of the design essentially includes verification in  Temporal as well as non-temporal domains. SV Immediate and Deferred assertions allow us to verify the functionality of the design in the Non-Temporal region and Concurrent assertion allows us to verify the design in the Temporal region.",
      "target_audience": [
        "Anyone Interested in pursuing career in VLSI or RTL Verification domain"
      ]
    },
    {
      "title": "RF Circuits and Systems - Basic Concepts",
      "url": "https://www.udemy.com/course/rfcircuitsandsystems_basicconcepts/",
      "bio": "Course 1",
      "objectives": [
        "This seven course series, for the first time ever, goes over the radio-frequency circuits and systems. All aspects of the RF design are covered in this course.",
        "Due to its breath and depth, this course is decomposed into two parts. Part 1 covers basic concepts and system-level architectures. Part 2 covers RF circuits.",
        "The students will acquire a deep and hands-on knowledge of RF circuits and systems.",
        "This course delivers essential skillset that is needed for a job in a highly demand Semiconductor industry and especially the field of RFIC."
      ],
      "course_content": {
        "Basic Concepts in RF Circuits and Systems": [
          "Introducing the Concept of Third-Intercept Point (IP3)"
        ]
      },
      "requirements": [
        "The prerequisite for this course is to have a knowledge of analog electronic circuits and basic circuit theory",
        "The second leg of this course may go through Cadence simulation of RF circuits"
      ],
      "description": "Radio-frequency (RF) circuits and systems are ubiquitous parts of any electronic gadget and instrument that are widely used by the general public. RF design is often considered to be one of the most challenging areas in electrical engineering. This course series promises to deliver a comprehensive overview of RF circuits and systems. The first course covered in this series is primarily on basic concepts in RF design. Concepts such as linearity and noise will be presented and figure-of-merits to evaluate the linearity and noise performance of the RF systems will be introduced. Specifically, the course first goes over the basics of wireless transmitters and receivers. Next, the fundamental concept of power transfer in RF circuits will be briefly studied. This is followed by the analysis of large-signal behavior and the associated impairments such as gain compression and intermodulation. Next, device noise will be studied and ways of modeling the impact of various sources of noise in electronic circuits will be investigated and the concepts of noise figure and noise temperature will be introduced. Finally, the course will look at important performance parameters such as receiver sensitivity and dynamic range and study these parameters in terms of noise performance and distortion.",
      "target_audience": [
        "This course is intended for electrical engineers, graduate students, senior-level undergraduate students"
      ]
    },
    {
      "title": "Introduction to SystemVerilog Functional Coverage Language",
      "url": "https://www.udemy.com/course/systemverilog-functional-coverage/",
      "bio": "Introductory Step-by-step overview of SystemVerilog Functional Coverage features, methodology/apps FROM SCRATCH",
      "objectives": [
        "Get you up and running in the shortest possible time. No knowledge of SystemVerilog OOP or UVM required",
        "Make you confident in seeing that you have fully 'functionally' covered your design and testbench before tape-out",
        "Make you knowledgeable in one of the most important and critical part of overall Design Verification landscape",
        "Will make your resume even stronger in the competitive DV landscape."
      ],
      "course_content": {},
      "requirements": [
        "This course will go step-by-step through each of Functional Coverage (FC) language feature and methodology component with practical applications at each step - FROM SCRATCH",
        "You only need very basic knowledge of hardware design and verification",
        "You do NOT need knowledge of Object Oriented Programming (OOP) or Universal Verification Methodology (UVM)"
      ],
      "description": "The knowledge gained from this course will help you cover those critical and hard to find design bugs. SystemVerilog Functional Coverage Language and Methodology is a very important part of overall functional verification methodology and all verification engineers need this knowledge to be successful. The knowledge of FC will indeed be a highlight of your resume when seeking a challenging job or project The course offers step-by-step guide to learning of FC with real life applications to help you solidify your concepts and apply FC to your project in shortest possible time. FC helps the critical part of Functional/Temporal domain coverage which is simply not possible with code coverage.The course does not require any prior knowledge of SystemVerilog or OOP (Object oriented programming) or UVM. The course has 9 lectures that will take you step by step through FC language from scratch.",
      "target_audience": [
        "Hardware design and verification engineers, Verification IP developers and EDA application engineers are best suited for this course.",
        "New college graduates will also benefit tremendously from this course."
      ]
    },
    {
      "title": "ESP32 and Internet of Things For Absolute Beginners",
      "url": "https://www.udemy.com/course/esp32-and-internet-of-things-for-absolute-beginners/",
      "bio": "Fastest Way To Learn IoT including Alexa integration in a Weekend",
      "objectives": [
        "ESP32 SoC and Development Board",
        "C Coding for ESP32",
        "Why ESP32 is preferred for IoT",
        "GPIO and Sensor interfacing with ESP32",
        "IoT Protocols with ESP32 : HTTP and MQTT",
        "Using Cloud platforms for IoT Projects",
        "Complete Automation Project",
        "Circuit Design Guidelines for integrating ESP32 in your project / product"
      ],
      "course_content": {
        "Introduction to ESP32 Microcontroller Series": [
          "Course Introduction and Agenda",
          "About Taking This Course",
          "Getting Started with ESP32",
          "Getting to Know about ESP32 Boards",
          "Components / Materials needed for this course",
          "Components / Materials needed for this course",
          "Getting Started with ESP32 Inside Arduino",
          "Resources"
        ],
        "How to use Serial Port and Digital Input Output on ESP32": [
          "Serial Communication Basics on ESP32",
          "Serial Data Print using ESP32",
          "Serial Data Read using ESP32",
          "Digital Outputs with ESP32",
          "Accepting Logic Inputs, Pull-up and Pull-down concepts",
          "Read Digital Inputs on ESP32",
          "Practice Tasks with Digital Input on ESP32",
          "Switching Circuit - DC Load Switching",
          "Interfacing Relay Switching Circuits with ESP32 Part 1",
          "Interfacing Relay Switching Circuits with ESP32 Part 2",
          "Reading Capacitive Touch Inputs on ESP32"
        ],
        "How to Interface Sensors with ESP32 and Connecting to Wifi Networks": [
          "DHT22 Sensor Interfacing with ESP32 - Read Temperature and Humidity",
          "ESP32 Wifi Based Device Control",
          "ESP32 Weather Monitoring over Wifi (LAN)",
          "ESP32 Weather Monitoring over Wifi (LAN) -- Code Explained",
          "Libraries for AsyncTCP and ESPAsyncWebServer"
        ],
        "Internet of Things with ESP32": [
          "What is Internet of Things?",
          "What are The Hardwares Used for Internet of Things",
          "IoT Protocols and Thingspeak",
          "Sending Values to Thingspeak from ESP32",
          "Data Visualizations in Thingspeak",
          "Analytics in Thingspeak",
          "What is MQTT Protocol?",
          "Adafruit IOT Project - Part 1",
          "Adafruit IOT Project - Part 2",
          "Adafruit IOT Project - Part 3",
          "Adafruit IOT Project - Part 4",
          "Alexa Based Lamp Control"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Basic Understanding of Arduino is recommended but not compulsory",
        "Basic Understanding of Electronics Components"
      ],
      "description": "\"With the right tools and guidance, I believe anyone can learn and master technology. That's why I offer 50% of the videos from all my courses as free previews. Feel free to watch them and enroll only if you believe the course is a good fit for you.\"\nI hope you'd like this transparency!!!\"\nAre you trying to study IoT with ESP32?\nAre you getting confused with all the hardware and software stuffs?\nLearning IoT with ESP32 can be sometimes confusing because of the lots of different esp32 boards available out there. Moreover there are tons of different arduino libraries for various purposes which simply confuses a new learner. Even experienced people struggle in experimenting with ESP32 and IOT\nStop Struggling to understand ESP32\nI’ve created a course which will enable you to learn and experiment with ESP32 in a very easy way\nI firmly believe that anyone regardless of their education and skills can not only learn but excel in experimenting with IoT including all the hardware and software skills.\n\n\n\"What is there to loose if you enroll in this bestseller course? You have a 30 day Full Money Back Guarantee, enroll now and start experimenting on IoT\"\n\n\nHi, My name is Amit Rana, I’m an engineer, programmer and trainer\nI have created \"ESP32 and Internet of Things For Absolute Beginners\" to help you learn IoT with ESP32 within arduino environment.\nIf you’ve always wanted to\nStart or shift your career in Embedded Systems or Internet of things\nGet better in your existing work\nKick start your next dream IoT startup\nStart your own blog and youtube channel, probably online course on this ever growing industry\n… then this course is specially for you.\nThis course is specially created for beginners in electronics hardware and cloud technologies!!!\nIoT is interconnecting various things and devices to send and receive data from internet enabling variety of applications\nIn this program, there are number of different aspects of IoT that we’re going to study\nFirst, we’ll understand the basics of IoT and what are the different hardware and software platforms needed for it\nWe’ll then use ESP32  pi as our controller for this course and see how we can make it up and running. You'll study which esp32 board is right for you which is universally available and dependable to be used in industrial projects. Then you'll study the pinout and how to use esp32 inside arduino IDE. Next, we'll see how to write C programs within arduino environment for esp32 for various interfaces like relays and sensors.\nOnce we get confident about experimenting with ESP32, we’ll then explore IoT with Thingspeak and Adafruit IO and finally try some projects including a full project on alexa integration.\n\n\n\"What is there to loose if you enroll in this bestseller course? You have a 30 day Full Money Back Guarantee, enroll now and start experimenting on IoT\"\nIn This Course, you'll learn\nBasics\nWhat is IoT and why learning it is important\nWhat is ESP32 and which board to use?\nHow to implement IoT, what are the required softwares and hardware for IoT\nIntroduction to C programming for ESP32\nUnderstand the pinout\nInterfacing of various sensors and output devices with ESP32\nC programming to control home appliances and read sensors\nIO Interfaces\nLEDs, Switches Interfacing\nTransistor and Relay Interfacing\nAC Switching Circuits\nCapacitive touch input and digital input\nDHT22 Temperature and Humidity Sensor Interfacing\nInternet of Things\nWhat is IoT?\nDifferent Hardware's used for IoT\nCommunication Protocols used for IoT\nUse cases\nThingspeak\nCreating account on thingspeak\nUse HTTP requests to send data\nSend data from ESP32 to thingspeak\nVisualizations in ESP32\nAnalytics and Alerts in thingspeak\nAdafruit IO\nDeeper understanding of what is MQTT protocol\nWhat are mqtt topics\nAdafruit IO feeds, dashboards\nUsing adafruit IO for creating IoT project using MQTT protocol\nComplete Home automation project using Raspberry pi and Adafruit IO\nAlexa Integration\nUnderstanding IFTTT\nIntegrating IFTTT with adafruit IO\nConnecting Alexa to IFTTT\nLamp Control using Custom Alexa Voice Command\n\n\nWhat this course will do for you?\nGive you a clear understanding of what is IoT?\nTake you from a complete fresher to an experienced ESP32 programmer\nUnderstand IoT protocols\nDesign your IoT systems\nWho Should Enroll?\nComplete Beginners into IoT and ESP32\nPeople who understand little in IoT and want to learn making projects\nFreshers as well as experienced one's\nThis course is specially created for beginners in electronics hardware and cloud technologies!!!\nI have been training and developing from past 10 years. With more than 50000 students trained across 150 countries, you can be assured that you’re in a good company. What’s more, there is always a 30 day money back guarantee so you’re safe about investing your money into this course.",
      "target_audience": [
        "IoT Working Professionals",
        "Hobbyists and Freelancers working in IoT project development",
        "Freshers in Electronics Domain and want to explore IoT with ESP32"
      ]
    },
    {
      "title": "MicroROS and ESP32 WiFi Controlled Robot Hands-On using ROS2",
      "url": "https://www.udemy.com/course/mastering-mobile-robot-with-ros-ardunio-car-sensors-to-ros/",
      "bio": "Step-by-step guide to developing a MicroROS Robot using Platformio for ESP32 development. UDPATED",
      "objectives": [
        "Mobile Robot ROS integeration",
        "ROS and ESP32 Communication",
        "ROS Serial and Wifi Communication",
        "Programming Robots"
      ],
      "course_content": {},
      "requirements": [
        "N20 DC geared motors with Encoders X2",
        "Esp-32 S2 Development board X1",
        "18650 Cells X2",
        "Motor Driver ( Mini L298N)",
        "3D printer if possible",
        "Soldering Wires , Soldering Paste , Solder",
        "Jumper Wires , 5mm nuts and screws",
        "N20 mini Car Caster Wheel X1",
        "N20 motor wheels X2",
        "Slider Button",
        "Mini 360 Buck converter to 5V",
        "Lipo Cell Charger Circuit"
      ],
      "description": "Course Updated to ROS2 Humble\nThe current rating is for the old version of the \"Building ESP32 MicroROS Bot\" course. The new update to projects and the way of explaining is what you are going to love :)\nCourse Workflow\nWelcome to the MicroROS ESP32 WiFi controlled robot course! If you're passionate about robotics and eager to dive into hands-on hardware and ROS2 projects, this course is perfect for you. We'll guide you step-by-step in building a fully functional robot using the ESP32 and MicroROS with ROS2.\nCourse Overview\nSection 1: Building the Robot\nAssemble your robot from the ground up\nUtilize 3D-printed parts and resources we provide\nLearn about electronic connections and power distribution\nSection 2: Basic Programming\nGet started with programming using PlatformIO to control your robot's movements\nWrite simple code to drive the robot and navigate basic paths\nCreate your custom libraries for motor driving\nIntegrate the OLED display into your robot\nSection 3: MicroROS Integration\nIntegrate MicroROS with your ESP32 robot\nEnhance your robot’s capabilities with advanced communication using ROS2\nBy the end of this course, you'll have a deeper understanding of robotics, from hardware assembly to software integration, and you'll walk away with a robot that you built and programmed yourself. Join us on this exciting journey into the world of robotics!\nHardware Requirements\nESP32\nN20 DC geared motors with Encoders X2\n18650 Cells X2\nJumper Wires , 5mm nuts and screws\nMotor driver ( Mini L298N)\nSolder , Soldering Wires , Soldering Paste , Soldering jumper wires\nN20 motor wheels X2\nN20 mini Car Caster Wheel X1\nSlider Button\nMini 360 Buck converter to 5V\nBattery Charger Circuit\nSoftware Requirements\nUbuntu 22.04\nROS2 humble\nA motivated mind for a huge programming project",
      "target_audience": [
        "Intermediate Robotics Software developers",
        "College Students",
        "Robotics Enthusiasts",
        "Robotics Hobbyists"
      ]
    },
    {
      "title": "Power of Perl :: Learn Basic and Advanced Perl Programming",
      "url": "https://www.udemy.com/course/power-of-perl/",
      "bio": "Crash course covering basic & advanced Perl scripting. A must have for Digital VLSI Design and Verification enthusiasts.",
      "objectives": [
        "Thoroughly Learn, Develop, Test, and Hone Programming Skills in Perl",
        "Prepare for a Job in the IT/Semiconductor Industry",
        "Be prepared to face an Interview with confidence",
        "Use Perl to solve important problems"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Course Overview": [
          "Course Overview"
        ],
        "Finding Perl": [
          "Finding Perl",
          "Perl Setup"
        ],
        "Perl Basics - Getting Started": [
          "First Perl Program",
          "Data Types",
          "Operators",
          "Loops and Conditional Statements",
          "Subroutines"
        ],
        "Regular Expressions": [
          "Regular Expressions"
        ],
        "Advanced Perl": [
          "File Read and Write Operations",
          "SpreadSheet Read and Write Operations",
          "Spreadsheet Formatting Examples",
          "SQL basics",
          "Interfacing Perl with MSSQL Server",
          "Brief Overview of HTML",
          "Creating Perl Module and HTML content"
        ]
      },
      "requirements": [
        "Knowledge of at-least one high level programming language (say C, C++, etc.)",
        "Passion for Learning and Programming",
        "Determination to Code with Focus",
        "Interest to learn Basic and Advanced Perl"
      ],
      "description": "Perl stands for Practical Extraction and Reporting Language. It was developed in 1987 by Larry Wall, and it has evolved over time. It’s a High-Level Scripting Language supporting powerful regular expressions.\n\nThis course aims at showcasing the power of Perl using Perl5.26.2.\n\nIt starts with a video on how to get a working Perl setup and progresses on to discuss very basic concepts in the beginning. Moving further, it sheds light on more advanced Perl constructs and capabilities, which are more useful and relevant to the present day Industry.\nIt's pretty hands-on course where each line of the code is discussed in-depth and impact of change in any line of the code is shown real-time on a Perl Interpreter.\nPerl is used extensively in the Digital VLSI industry. It’s used across multiple verticals - Design, Design Verification, Automation, CAD, Tools, etc. and hence this course is useful for anyone and everyone looking to learn about (or enhance) Perl, and land a Job in the Industry (Semiconductor or IT)\nAdvanced Perl Constructs discussed in this course includes:\n\nRegular Expressions,\nFile Read and Write Operations,\nExcel SpreadSheet Read and Write Operations,\nInterfacing with MSSQL databases,\nGenerating HTML formatted content, and\nCreating/Using Perl Modules\n\nAim of this Course\n\n\nIs to help:\nBeginners get started with Perl,\nProfessional hone their Perl skill set, and\nExperts refresh their Perl knowledge,\n\n\nTopics Covered\n\n\n1. Introduction\n2. Course Overview\n3. Finding Perl\n4. Perl Basics – Getting Started\nFirst Perl Program, Data Types, Operators, Loops, Conditional Statements, Subroutines\n5. Regular Expressions\nSpecial Characters, Quantifiers, Anchors\n6. File Read and Write Operations\nFew Facts, File Checks, File Read, Write, Append, and Read Write\n7. SpreadSheet Read and Write Operations (including various formatting operations)\nRelevant Modules to use, SpreadSheet Read, SpreadSheet Write (with various formatting operations)\n8. Interfacing with MSSQL databases\nSQL Basics (How to create a database and table, how to use a database, how to insert into, query from and delete from a database), Using Perl to connect to MSSQL database and perform various different table operations.\n9. Generating HTML formatted content (Using User created Perl Module)\nHTML very brief overview, How to create and use a Perl Module, Generate HTML formatted content in Perl using the generated Perl Module.\n\nWhy Use Perl?\n\n\nPerl is High Level Interpreted language with faster development time and is well suited to perform many automation tasks\nCan help secure a Job as its widely used in the Industry (IT and Semiconductor)\nIn Digital VLSI Industry, it’s used across multiple verticals - Design, Design Verification, Automation, CAD, Tools, etc.\nIt facilitates easy creation of multiple applications using large number of inbuilt modules\n\nDisclaimer\n\n\nEvery effort has been made to make this course as complete and as accurate as possible, but no warranty is implied. The author shall have neither the liability nor the responsibility to any person or entity with respect to any loss or damages arising from the information contained in this course or other resources accompanying this course.\nThis course is an independent work of the author and is not endorsed by his employer.",
      "target_audience": [
        "Students of Computer Science, IT, Electronics (EEE, ECE, E&I), VLSI, Digital/Embedded System Design, and Microelectronics, who want to get ready for a Job in the IT & Semiconductor Industry.",
        "Digital VLSI Design Verification Enthusiasts (Beginners, Professionals, Experts)",
        "Engineers looking to build a career in VLSI Front-End Design Verification"
      ]
    },
    {
      "title": "Learn ESP8266 for IoT",
      "url": "https://www.udemy.com/course/learn-esp8266/",
      "bio": "Build Your Home Automation with ESP8266 and Control Devices from Anywhere in the World",
      "objectives": [
        "Make your Home Connected with Cloud",
        "Understand How PubNub Works",
        "Understand How to Control Your Devices from Anywhere in the World"
      ],
      "course_content": {},
      "requirements": [
        "Basic idea of Computers and Software parts are required",
        "Basics about Hardwares"
      ],
      "description": "What is ESP8266 and why you should learn it?\nESP8266 is among the most integrated Wi-Fi chips in the industry. Measuring just 5mm x 5mm, ESP8266 requires minimal external circuitry and integrates a 32-bit Tensilica microcontroller, standard digital peripheral interfaces, antenna switches, power amplifier, low noise receive amplifier, filters and power management modules - all in one small package. Which makes it perfect for IoT use-case design and development. In many cases, even the production IoT landscape is using ESP8266 due to its capabilities and powerful features. On top of that, it is low cost and available readily.\nWhy you should consider taking this course?\nOne of the challenges while working with ESP8266 is its learning curve. Tools and techniques which one needs to master to get comfortable while using it in projects need to be understood well with a clear understanding of basics. Keeping that in mind we have designed the Professional ESP8266 development course. This course will cover all the concepts one needs to master starting from basics, you will learn how the Architecture of ESP8266 is designed, then you will understand how the flashing is done in ESP8266 where you load your OS, connecting ESP8266 to the internet is then the major step where you will understand the capability of hardware to communicate with the internet which will enable the IoT. Most of the time hardware endpoints will be connected to the data stream network cloud which can manage scale, security, and the stream of communication. We are using a widely used platform which is PubNub with ESP8266 to demonstrate this.\nIn the end, we will put everything together and also have a small end to end project of a smart home where we will cover circuit design, development, and implementation with Go-Live.",
      "target_audience": [
        "Anyone who want to learn about PubNub Cloud",
        "Who is willing to Create Home Automation with PubNub Cloud"
      ]
    },
    {
      "title": "Computer Architecture and MIPS Assembly Language Programming",
      "url": "https://www.udemy.com/course/computer-architectures-and-assembly-programming-mips/",
      "bio": "with Tens of Solved Examples and Assignments with solutions, lecture notes, Exam samples with solution, and tutorials.",
      "objectives": [
        "MIPS Instruction Set Architecture",
        "MIPS Assembly Programming - Theory and Practice with tens of examples",
        "RISC ISA Architectures",
        "Single Cycle and Multi-Cycle Processor Design",
        "Arithmetic and Logic Unit (ALU) Design",
        "Design the Control Unit of a Real Processor",
        "Convert MIPS Assembly Instructions into Machine Codes",
        "Understand Computer internal parts such as ALU, Datapath and control Unit",
        "Understand CPU (Central Process Unit) and how it works"
      ],
      "course_content": {},
      "requirements": [
        "Basics of digital logic design",
        "Basic knowledge of programming in any high level languages( C, python , ...)"
      ],
      "description": "*NEW* Enroll in one course and receive a 100% free coupon to one of my other courses! Please contact me after registering in one of the courses and let me know which other course you prefer.\n\n\nWelcome to the Computer Architectures and MIPS Assembly Programming Course!\n* Updated in Feb 2024*  Several Detailed Explanation Lecture Videos are Uploaded(more than 5 hours)\n\n\n\n\nThis course's major purpose is to outline the architectural aspect of computers. In other words, it is concerned with how computers, as machines, execute instructions at many levels, including the hardware and assembly language levels. Students learn about the fundamental technological structure and evolution of computers, fundamental hardware components, MIPS instructions set architectures and its assembly language, and processor microarchitecture including the control unit (MIPS is used as an example).\nThis course can be divided into 2 chapters: Software and Hardware. In the software chapter (Sections 1-3) you will learn how to write an assembly language program for MIPS architecture and in the hardware chapter (Sections 4-7), I will show you how the internal components of the MIPS processor work together to execute your program. Finally, I prepared several tutorials and assignments with their solutions to help you better understand this topic.\nThe emphasis of the course is on understanding how computers work. This will provide a basis for further study of computer architecture and computer software. The MIPS processor, the subject of this course, has a well designed architecture and is particularly fruitful to study. However, the goal of the course is not to turn you into a MIPS programmer, but to give you an understanding of all computer systems.\nCourse Outline\n1. Introduction to MIPS Assembly Programming\nMemory Operand: Load Word & Store Word in MIPS Assembly Language\nImmediate Addressing Mode & Signed/ Unsigned data in MIPS Assembly Language\nADD, ADDI, ADDU, ADDIU, SUB, LW, and SW Instructions in MIPS\nBranches and Jump Instruction in MIPS Assembly Language + how to read array[i]\nLoop Structure in MIPS Assembly Language\nThe Other Comparison Instruction + Logical Instructions in MIPS\nMIPS Alignment Restrictions: .align, .byte .half and .word Assembler's directive\nHow Data will be Stored in Memory in the MIPS Architecture?\nMIPS System Call\nSimple I/O and MIPS System Calls: Hello World!\nSimple I/O and MIPS System Calls: Read 2 Numbers and Display their Summation\nSimple I/O and MIPS System Calls: an Example of IF-ELSE Structure in MIPS\nSimple I/O and MIPS System Calls: an Example of IF-ELSE-IF Structure in MIPS\nMIPS Divide Instruction + Determine whether the input number is odd or even\nMIPS Example: Read 5 Numbers and Print Their Average\nMIPS Multiplication Instruction\nMIPS Example: Display the Multiplication of 2 numbers + Factorial Example\nMIPS Example: Add Two Integer Numbers\n2. Learn MIPS Programming with Examples\nMIPS Example: Read a char and determine whether it is an uppercase, lowercase or etc. in MIPS\nMIPS Example: Determine the number of zeros in the binary notation of a number\nMIPS Example: Read two numbers A and B and  compute  and print (A+2*B)/5\nMIPS Example: Convert C code to MIPS Assembly\nMIPS Examples: Learn How to Divide and Multiplication\nMIPS Example: Find the Maximum Element of an Array in MIPS Assembly Language\nMIPS Example: Find Both Maximum and Minimum of an Input Integer Array\nMIPS Example: Nested IF-ELSE IF Structure\nMIPS Example: Convert a capital letter  to lowercase and vice versa\nMIPS Example: Check the input character and determine is it alphabet, digit or .\nMIPS Example: Read 2 operands and  an operator and print the result\nMIPS Example: Compute the sum of N integers: (1 + 2 + ... + N),  While Structure\n3.Functions in MIPS Assembly Language with Several Examples\nFunctions in MIPS - Jump and Link (jal) & jump Register(jr) Instructions\nFunctions in MIPS - How to Pass Arguments to the Functions?\nFunctions in MIPS - Who saves the register? Spilling Registers\nFunctions in MIPS - MIPS's conventions to split register spilling chores\nFunctions in MIPS - MIPS Stack and Push and Pop Implementations\nFunctions in MIPS - Factorial Function\nMIPS Example: Write a function to read N numbers and store them in an array\nMIPS Example: Write a function to reverse an input array\nMIPS Example: Write a function to count the number of divisors of an argument\n4.MIPS Instruction Encoding\nMIPS Instruction Encoding: R-Type Instructions\nMIPS Instruction Encoding: I-Type Instructions\nMIPS Instruction Encoding : J-Type Instruction\n5. Computer Architecture: Processor Datapath, ALU and Register File Design\nGeneric Datapath and Register Files Part 1\nGeneric Datapath and Register Files Part 2\nALU Design Part 1\nALU Design Part 2\n\n\n6. Single-Cycle Datapath for MIPS Architecture\nMIPS Datapath Overview\nDatapath for Fetching an Instruction and increment PC  in MIPS Architecture\nDatapath for R-type Instruction in MIPS Architecture\nMIPS Datapath for Load Word (LW) and Store Word (SW) Instructions\nDatapath for Branch Instructions in MIPS Architecture\nCombining the Datapaths of R-type Instructions and LW/SW Instructions\nIntegrating  the datapaths of R-Type, Memory and Branch Instructions in MIPS Arc\nR-Type  + Memory Instructions Data Path\nControl Unit for the Single-cycle  MIPS Processor\nALU Control Unit Design for MIPS Architecture\n7. Multi-Cycle Datapath for MIPS Architecture\nMulti-Cycle Datapath for MIPS Architecture Part 1\nMulti-Cycle Datapath for MIPS Architecture Part 2\nMulti-Cycle Datapath for MIPS Architecture Part 3\nMulti-Cycle Datapath for MIPS Architecture Part 4\n8. Tutorials + Assignments\nTutorial + Assignment: Introduction to MARS\nTutorial + Assignment: Introduction to MIPS Assembly Programming\nTutorial + Assignment: Integer Arithmetic\nTutorial + Assignment: Flow Control\nTutorial + Assignment: Arrays and Files\nTutorial + Assignment: Integer Multiplication and Division\nTutorial + Assignment: MIPS Functions and the Stack Segment\nFibonacci sequence\nCompute the summation of even numbers between 2 input numbers\nSimple I/O in MIPS Assembly Language\nIF-ELSE-IF Structure in MIPS Assembly Language\nSingle-Cycle Datapath Quiz with Video Solution\nMulti-cycle Datapth\nThe course is Example-based. Almost every lecture and component of the course directly leads to a hands-on laboratory assignment with a solution. The more you practice with MIPS hardware and software, the more proficient you will become.\nI use lots and lots of examples. I take you step-by-step through the lessons – each time providing sample code and documentation to make sure you are supported through the course.\nThe course does not waste your time. From the very beginning, we jump right into your first project – Let's Get Started.\nI am here to help. I am an educator with a singular focus on providing a meaningful experience for my students. And, while I cannot do the work for you, I am willing to work WITH you to help you succeed.\nThe goal of this course is to shed light on the obscure interface layer between hardware and software. In this context, we will go over instruction set architectures, assembly programming, computer/memory organization, machine language conversion, data bus, and sub-routines, which are all important topics in computer architecture. This course teaches students about the core hardware components of a computer and how they interact with one another. It educates students about the computer's many layers, such as the application level, operating system level, assembly language level, and machine language level.\nComputer architectures, which I recommend to anyone working on electronic system design or computer programming and who is interested in processor design, have opened many doors for me in my own career. I hope you find this tutorial useful as well.",
      "target_audience": [
        "Computer or Electrical Engineering students",
        "Programmers who want to learn about computer hardware / software interface",
        "Everyone who is interested in Computer / Processor structures!",
        "Candidates considering applying for embedded system design / programming positions in defense industry, aerospace, R&D and IT companies"
      ]
    },
    {
      "title": "Automatic Irrigation System with Arduino",
      "url": "https://www.udemy.com/course/automatic-irrigation-system-with-arduino/",
      "bio": "Make your own Automatic Irrigation System and stop wasting time on checking your Soil manually and Start Automating Life",
      "objectives": [
        "Make your own Automatic Irrigation System with Arduino",
        "Learn Working Principle of Irrigation systems and Soil Moisture Sensors",
        "Interface Soil Moisture Sensors with Arduino",
        "Automate the Irrigation Process using Arduino"
      ],
      "course_content": {},
      "requirements": [
        "Basic experience in Electronics",
        "Basic experience in Arduino",
        "A Will to apply, not just watch"
      ],
      "description": "The recent popularity in home automation has led to the development of new and innovative systems that increase the quality of life for homeowners. One such system is an automatic irrigation system, which can be programmed with an Arduino. The irrigation timer is controlled by a low-power computer, which sends data wirelessly to programmable outlets in order to water plants when needed.\nOne advantage of this system is that it's easy to customize the watering schedule according to personal preferences. Investing in an automatic irrigation system can save you time, money, and water. It can also be a significant factor in preserving the environment. With modern technology, there are many ways to automate an irrigation system. One way is with Arduino. This course will teach you how to create an automated irrigation system that has a wireless remote control for turning on and off the system.\nThis Course will teach you how to Make an Automatic Irrigation System with Arduino. This guide will take you step by step to understand what each component inside the system does, how to wire it up, starting with the Soil Moisture Sensor, Nokia 5110 LCD Screen, and ending with resistors.\nWhy you should take this course?\nStep by step course\nGain valuable knowledge about Arduino\nLearn how to build an irrigation system with Arduino\nExpertise in Electrical Engineering, Computer Science, Software Development\nBuild a uniquely designed irrigation controller that is perfect for any climate\nSave time because this device is self-sufficient and won't need watering manually\nWhat students are saying:\nSunil Thakur says, \"Excellent course for starting in Arduino especially for farm irrigation.\"\nWelcome to this course. You will know the actual working principle of the Soil Moisture Sensor and how to interface and configure it correctly so that you can get accurate data with this Arduino Powered device and automate the Irrigation system.\nAfter this course, you will be able to make your own Automatic Irrigation System device and the choice is yours to use it, sell it, start a business, or do anything that comes to your mind. This will make your life easier, as all connections are explained in detail.\nGoal From This Course:\nConnect Arduino Ethernet Shield to Arduino Board with all necessary Components and make it Internet Based.\nWhat you will learn in this Course:\nHow to connect Nokia 5110 LCD to Arduino.\nHow to connect FC-28 Soil Moisture Sensor to Arduino.\nHow to detect land condition using Arduino.\nHow the irrigation process actually works.\nHow to interface different types of electronic elements with Arduino.\nHow Arduino can make your life easier.\nHow to program, burn a code, and wire Arduino and Soil Moisture Sensor.\nWhat are the right tools that you need to start making amazing projects.\nWhy control with Arduino is better than traditional control methods.\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading team in the Microcontroller Industry, with over 13 Years of Experience in teaching and doing practical projects.\nWe strive to put all our hands-on experience into these courses. Instead of superficial knowledge, we go into the depth of the topic and give you the exact step-by-step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the years, we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ courses on Udemy.\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million Views, 20k + Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their careers.\nAshraf’s core skill is explaining difficult concepts in a step-by-step easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, in particular for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World\nWhat you will learn\nHow to connect Nokia 5110 LCD to Arduino.\nHow to connect FC-28 Soil Moisture Sensor to Arduino.\nHow to detect land condition using Arduino.\nHow the irrigation process actually works.\nHow to interface different types of electronic elements with Arduino.\nHow Arduino can make your life easier.\nHow to program, burn a code, and wire Arduino and Soil Moisture Sensor.\nWhat are the right tools that you need to start making amazing projects.\nWhy control with Arduino is better than traditional control methods.\nWho is this course for\nHome automation enthusiasts\nDIY hobbyists\nGardeners looking for automation solutions\nStudents and professionals interested in Arduino projects\nAnyone interested in learning about automated irrigation systems\nRequirements\nBasic knowledge of electronics\nA computer with internet access\nAn Arduino board and components as listed in the course",
      "target_audience": [
        "Electronics Geeks",
        "Arduino Geeks",
        "Anyone Interested in Learning New Things about Arduino",
        "Anyone Interested in Learning Making Automatic Irrigation System with Arduino"
      ]
    },
    {
      "title": "PCB Design with Proteus",
      "url": "https://www.udemy.com/course/pcb-design-with-proteus/",
      "bio": "Learn to Design Printed Circuit Board with Proteus | PCB Design",
      "objectives": [
        "Design a printed circuit board with Proteus",
        "Design a PCB with 1 or 2 Layers",
        "Understand the complete process to design a PCB",
        "Create schematic symbols & Libraries",
        "Create Footprint & Libraries",
        "Add the 3d Model, Find New 3d Models",
        "How to route the PCB & Autoruoting",
        "Get the manufacturer files (Gerber, PDF)",
        "Understand PTH and SMD components",
        "Understand Proteus Software for PCB Design"
      ],
      "course_content": {},
      "requirements": [
        "Basic Electronic knowledge",
        "Proteus Software",
        "Basic Computer Knowledge",
        "Eager to learn"
      ],
      "description": "In this course We are going to cover all the necessary aspect to design a high quality printed circuit board. This is a step by step course.\nWe are going to start in the squematic circuit then the PCB layout and get the 3d visualization, also We are going to learn how to get the output files like PDF and Gerber files.\nLet's get started¡¡¡\n\n\nWe will cover the complete process to design a PCB with Proteus, and see the below subjects\n\n\n1. The use of Proteus as PCB Desing Software\nProteus is not just an Virtual Electronic Laboratory with different modules, in this course We are using Proteus as PCB Design software, since it has a powerful and dynamic interface.\nWe will learn:\n- How to navegate in the Proteus interface.\n- Understand the working methodology in Proteus.\n- The different files that We will create (Schematic & Footprint Library)\n2. The Schematic & Schematic Library\nIn Proteus We can create an Schematic Library, where we are going to collect all our Projects schematic symbols. It is better to separate our Projects symbols from the Proteus Library Symbols. So in this way We can be sure about the components We are using, in additional when we are going to share our Project File everything will be well separated and idetificated.\nWe will learn:\n- How to create the schematic library.\n- How to create new schematic symbols.\n- How to use the schematic symbols from Proteus Library.\n- How to modify the schematic symbols from Proteus Library.\n- How to add the new symbols into our schematic library.\n- How to identify our schematic library and where to find it.\n- Complete our Schematic Diagram.\n\n3. PCB Layout & Footprint Library\nOnce we complete our schematic diagram, We are going to pass to the PCB Layouy interface. Where we finally will make the layout of our project. After we complete this step, we can get all the out files to create our pcb.\nWe will learn:\n- How to create the Footprint Library.\n- How to create new Footprints and add them into our library.\n- How to modify the Footprint from Proteus Library.\n- How to identify our Footprint library and where to find it.\n- How to use the Autorouting option.\n- How to route our PCB ( 1 & 2 layers pcb)\n- Understand the PCB Layout terminology.\n\n4. Visualization 3D\nProteus offers the 3d Visualization, which we can consider necesary, it will be kind of confirmation between our models and the real component. We add easly the 3d models and get our 3d PCB that we can share.\nWe will learn:\n- How to add 3d models.\n- How to Switch to the 3d view.\n- How to set the 3d pcb (Colors, visual options, Copper, 3d models)\n- Where to find new 3d models.\n- Which extension for 3d model we need to use.\n- Export our 3d pcb.\n\n5. Manufacturer Files\nThe manfacturer files are the final files that we need to get from our Project, and with them we are going to create the pcb in real. Process will provide these information after we complete the layout of our pcb.\nWe will learn:\n- How to get the Gerber Files.\n- How to get the PDF files (Top and Bottom Copper layer )\n- How to order our PCB from PCB factory.",
      "target_audience": [
        "PCB Designers",
        "Makers",
        "Electronic Enthusiasts",
        "Electronic Hobbyists",
        "Electronic Lover",
        "Proteus Users"
      ]
    },
    {
      "title": "UVM Testbenches for Newbie",
      "url": "https://www.udemy.com/course/writing-testbenches-in-uvm-for-newbie/",
      "bio": "Step by Step Guide from Scratch",
      "objectives": [
        "Writing testbenches in UVM",
        "Understanding usage of Configuration db in UVM",
        "Strategies for implementation of UVM components such as Transaction, Generator, Sequencer, Monitor, Scoreboard, Environment, Test",
        "Usage of TLM ports for Communication between Driver , Sequencer, Monitor, Scoreboard",
        "Usage of Reporting Mechanism in UVM",
        "Usage of Virtual Interface",
        "Usage of the Base Classes viz. UVM_Object and UVM_Component",
        "Pure Lab-based course with minimum focus on theoretical aspects of UVM"
      ],
      "course_content": {
        "Reference Manual Link": [
          "Roadmap",
          "UVM Reference Manual"
        ],
        "Configuring Toolchain": [
          "Agenda",
          "Hello World in UVM",
          "Copy this code before next video",
          "How to execute code in EDAP",
          "How to execute code in Questa sim",
          "A21"
        ],
        "Getting Started with Reporting Macros": [
          "Agenda",
          "Comparing $display and UVM_INFO",
          "Other reporting macros",
          "Demonstration",
          "Code",
          "Working with Verbosity",
          "Code",
          "Reporting Values of Variable",
          "Code",
          "A31",
          "A32"
        ],
        "Getting Started with Base Classes": [
          "Agenda",
          "Funamentals of Extended Class",
          "Code",
          "Understanding Base Classes",
          "Building Class by extending UVM_OBJECT",
          "Code",
          "Building Class by extending UVM_COMPONENT",
          "Code"
        ],
        "Getting Started with UVM_OBJECT": [
          "Agenda",
          "Inbuilt Implementation : Print",
          "Code",
          "Do Hooks : Print",
          "Code",
          "Inbuilt Implementation : Copy",
          "Code",
          "do hooks : copy",
          "Code",
          "Create Method",
          "Code",
          "A51",
          "A52"
        ],
        "Getting Started with UVM_COMPONENT": [
          "Agenda",
          "Fundamentals of Phases",
          "Different Phases of UVM",
          "Adding Phases in Test Class",
          "Code",
          "Running Simulation for more than 0 nSec",
          "Code",
          "Understanding UVM_TREE",
          "Demonstration",
          "Code",
          "A61",
          "A62"
        ],
        "Resource Sharing": [
          "Agenda",
          "Fundamentals",
          "UVM_CONFIG_DB",
          "Code",
          "Fundamentals of TLM Ports",
          "PUT Port",
          "Code",
          "GET Port",
          "Code",
          "Sequencer- Driver Communication : Method 1",
          "Sequencer- Driver Communication : Method 2",
          "Code",
          "Analysis Port",
          "Code",
          "First Look at Montor and Scoreboard",
          "Code",
          "A71"
        ],
        "Verification Project 1 : Combinational Adder": [
          "Summary of Verification Environment",
          "Design + Interface",
          "Transaction",
          "Sequence",
          "Driver",
          "Monitor",
          "Scoreboard",
          "Agent",
          "Environment",
          "Test",
          "TB_TOP",
          "Code : Design",
          "Code : Verification env"
        ],
        "Verification Project 2 : 8-bit RAM": [
          "Design + Interface",
          "Transaction",
          "Sequence",
          "Driver",
          "Monitor",
          "Scoreboard",
          "Agent + Env + Test",
          "Code : Design",
          "Code : Verification Env"
        ],
        "Common Error": [
          "Understanding Sequence Overflow Error"
        ]
      },
      "requirements": [
        "Some exposure to Verilog and System Verilog"
      ],
      "description": "Writing Verilog test benches is always fun after completing RTL Design. You can assure clients that the design will be bug-free in tested scenarios. As System complexity is growing day by day, System Verilog becomes a choice for verification due to its powerful capabilities and reusability helping verification engineers quickly locate hidden bugs. The System Verilog lags structured approach whereas UVM works very hard on forming a general skeleton. The addition of the configuration database Shifts the way we used to work with the Verification Language in the past. Within a few years, verification engineers recognize the capabilities of UVM and adopted UVM as a defacto standard for the RTL Design verification. The UVM will have a long run in the Verification domain hence learning of UVM will help VLSI aspirants to pursue a career in this domain.\nThe course will discuss the fundamentals of the Universal Verification Methodology. This is a Lab-based course designed such that anyone without prior OOPS or system Verilog experience can immediately start writing UVM components such as Transaction, Generator, Sequencer, Driver, monitor, Scoreboard, Agent, Environment, Test. Numerous coding exercises, projects, and simple examples are used throughout the course to build strong foundations of the UVM.",
      "target_audience": [
        "Anyone interested in learning Design Verification Testbenches with UVM",
        "FPGA Verification Engineer Aspirants"
      ]
    },
    {
      "title": "Basics of Electricity",
      "url": "https://www.udemy.com/course/basics-of-electricity/",
      "bio": "How to test and understand basic electrical circuits.",
      "objectives": [
        "Calculate circuits",
        "Explain the interaction of amps, volts, and resistance",
        "Explain the interaction of volts, amps, and watts",
        "Understand basic safety concerns of electrical circuits",
        "Use of a multimeter to test circuits",
        "Compare parallel and series circuits",
        "Compare direct and alternating currents",
        "Calculate the cost of operating electrical components"
      ],
      "course_content": {
        "Basics of Electricity and Calculating Circuits": [
          "Basics of Electricity and Calculating Circuits"
        ],
        "Circuit Types and Calculating Resistance": [
          "Comparison of Series and Parallel Circuits and calculating their resistance."
        ],
        "Types of Electricity": [
          "Brief explanation of the differences in Alternating and Direct current"
        ],
        "Using a multimeter to measure and understand electrical circuits.": [
          "Using a multimeter to measure electrical circuits and components",
          "What do the tests tell us?"
        ],
        "Electrical Safety": [
          "Electrical Safety"
        ]
      },
      "requirements": [
        "Use of a calculator, possesion of a multimeter"
      ],
      "description": "In order to understand, make or repair anything electrical from house wiring, automotive wiring, small electronic kits, electric motors etc. a basic understanding of electricity is needed.\nThis course will explain the basic principles of electricity along with how to test and apply them.\nThe course is intended as an introductory course for those who would like to be able to dabble in electronics and electricity. It is not intended to make you a proficient electrician. Remember electricity can be dangerous and have lasting consequences.\nThe course will consist of video clips/lectures. Images, charts, and brief reading as supplemental information. Quizzes are available for self assessment and practice of the information.",
      "target_audience": [
        "The course is intended for those who want to dabble in electronic kits",
        "If you aren't afraid of electricity, but don't really undestand it.",
        "Increase confidence in testing simple electrical circuits and appliances",
        "IT IS NOT to teach you how to make complicated electrical systems",
        "IT IS NOT intended to teach you how to wire anything",
        "IT IS NOT going to make you an electrician"
      ]
    },
    {
      "title": "Make an Open Source Drone: More Fun",
      "url": "https://www.udemy.com/course/make-an-open-source-drone-more-fun/",
      "bio": "Go past the basics and explore some of the most exciting features and capabilities of your drone",
      "objectives": [
        "Improve the features of your FlySky radio controller so that you can take full advantage of the hardware.",
        "Set up radio telemetry between your computer and the drone so that you can track and control your drone from your computer in real time.",
        "Configure fail-safes to prevent avoidable injuries and damage to your drone.",
        "Record high-definition flight video and transmit first-person video to a monitor on the ground.",
        "Setup and configure flight modes.",
        "Design simple and more complicated missions that your drone can execute on its own.",
        "Dow to use the radio telemetry module with the Matek F405TE flight controller",
        "How to setup geofencing inclusion and exclusion zones",
        "How to set up flight modes with the Matek F405TE",
        "How to use the Mission Planner flight simulator",
        "How to test geofencing in the simulator",
        "How to setup the battery monitoring capability in the Matek F405TE"
      ],
      "course_content": {
        "Introduction": [
          "2000 - About this course",
          "Parts and Tools"
        ],
        "Flysky FS-i6 firmware upgrade": [
          "2030 - Flysky FS-i6 firmware upgrade Introduction",
          "2040 - Upgrade objectives and tools",
          "2050 - Download firmware installer and upgrade process",
          "2065 - How to unbrick your controller",
          "2067 - Re-bind transmitter and receiver",
          "2070a - Transmitter calibration",
          "2070b - Transmitter calibration",
          "2080 - Subtrim calibration"
        ],
        "Radio Telemetry": [
          "2100 - Radio Telemetry introduction",
          "Are you using the Matek F405TE?",
          "2105a - Setup the radio telemetry hardware",
          "2105b - Configure the radio telemetry net ID",
          "2110 - Setup channels using a serial monitor",
          "2120a - Connect and test radio telemetry",
          "2120b - Using APM Planner on Mac OS",
          "2130 - Radio telemetry test flight",
          "3000 - Setup the radio telemetry hardware on the Matek F405TE",
          "3001 - Test the radio telemetry hardware on the Matek F405TE"
        ],
        "Failsafes": [
          "2150 - Failsafes Introduction",
          "2160 - Radio failsafe (transmitter loss of connection)",
          "2170 - Geofencing",
          "2180 - Battery failsafe",
          "2195 - Test flight: geofencing",
          "3040 - Geofencing inclusion and exclusion",
          "3050 - Failsafe and Geofencing recommended Options"
        ],
        "Cameras": [
          "2210 - Introduction to drone cameras",
          "2220 - Setup the HD recording camera Firefly Q6",
          "2250 - Test footage of the HD recording camera",
          "2240 - Test footage of the HD recording camera",
          "2260 - Setup of the FPV monitor"
        ],
        "Flight modes": [
          "2300 - Introduction to flight modes",
          "2310 - Basic flight modes",
          "2320a - Setup flight modes on RC switches",
          "2320b - Super Simple Mode and Simple Mode",
          "2325 - How to change flight mode parameters",
          "2330 - Test flight- flight modes",
          "3020 - Setup flight modes on the Matek F405TE"
        ],
        "Mission planning": [
          "2410 - Introduction to mission planning",
          "2420a - Simple Mission design",
          "2420b - Simple Mission simulation",
          "2420c - Simple Mission upload to drone",
          "2420d - Simple Mission refetch a map segment",
          "2430 - Create a more advanced Mission",
          "2440 - Agricultural-type mission",
          "2450 - Polygon fencing",
          "2455 - Test flight- Mission",
          "3010 - The Mission Planner Simulator",
          "3030 - Geofencing in the simulator"
        ],
        "Power": [
          "2470 - Introduction to Power",
          "2480 - Pixhawk ESC secondary power",
          "2500 - TOP - Battery tester",
          "3060 - Voltage and current monitor on the Matek F405TE"
        ],
        "Conclusion and Bonus Lecture": [
          "What's next",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Ideally, you will have completed the course \"Make an Open Source Drone\".",
        "The required parts as listed in the  Parts and Tools lecture in section 1 (free access).",
        "A Windows computer with the Mission Planner software.",
        "A Mac OS computer with the APM software (this includes most functions found in Mission Planner)."
      ],
      "description": "Latest updates\nIn mid-2023, I updated 'Make an Open Source Drone' course to offer detailed instructions on constructing a custom quadcopter with the MATEK F405TE flight controller, in addition to the Crius and the Pixhwak 4. See detailed content for Make an Open Source Drone below.\n\nIn early 2025, I updated 'Make an Open Source Drone More Fun' course with new lectures to teach you how to use the radio telemetry module with the Matek F405TE flight controller, how to setup geofencing inclusion and exclusion zones, how to set up flight modes with the Matek F405TE, how to use the Mission Planner flight simulator and testing geofencing in the simulator, and how to setup the battery monitoringcapability in the Matek F405TE.\n\n\nCourse description\nIn my first drone course “Make an Open Source Drone”, you learned how to build a quadcopter based on open source software and hardware.\nYou now have a modern programmable aircraft and a good understanding of the principles of drone flight and of the skills needed to enjoy being a drone pilot.\nIn this course, you’ll take your knowledge and skill to the next level. You’ll go past the basics and explore some of the most exciting features and capabilities of your drone.\nYour drone, from simply reacting to your radio instructions, will look as if it has a mind of its own, and fly itself.\nI promise, the first time you experience your drone flawlessly execute a mission, you will feel proud and thrilled.\nBy the end of this course, you’ll learn:\nhow to improve the features of your FlySky radio controller so that you can take full advantage of the hardware,\nhow to use the radio telemetry module with the Matek F405TE flight controller,\nhow to setup geofencing inclusion and exclusion zones,\nHow to set up radio telemetry between your computer and the drone so that you can track and control your drone from your computer in real time,\nHow to configure fail-safes to prevent avoidable injuries and damage to your drone,\nHow to record high-definition flight video and transmit first-person video to a monitor on the ground,\nHow to setup and configure flight modes,\nhow to set up flight modes with the Matek F405TE,\nhow to use the Mission Planner flight simulator,\nhow to test geofencing in the simulator,\nhow to setup the battery monitoring capability in the Matek F405TE.\nAnd most important, how to design simple and more complicated missions that your drone can execute on its own.\nI invite you to review the free lectures in the first section of this course to find out more details about it.\nIf you are excited about learning how to to make your open source drone even more fun, join many other Makers and me in \"Make an Open Source Drone: More fun\"!",
      "target_audience": [
        "Drone pilots who have a basic understanding of their aircraft and are ready to learn more.",
        "Graduates of Tech Explorations Make an Open Source Drone.",
        "Anyone interested in learning about the Ardupilot firmware and the Pixhawk flight controller."
      ]
    },
    {
      "title": "The Complete Basic Electricity & Electronics Course",
      "url": "https://www.udemy.com/course/the-complete-basic-electronics-course/",
      "bio": "Learn how Electricity, Electronic Components and Circuits work. Join over 5,000 happy students!",
      "objectives": [
        "Understand the concept of electric Voltage and Current",
        "Understand how the most important electronic components work",
        "Analyze and design basic electronic circuit"
      ],
      "course_content": {},
      "requirements": [
        "Desire to learn how electronic components and circuits really work",
        "No hardware, software or components are required",
        "Basic arithmetic and physics"
      ],
      "description": "WHAT'S IN IT FOR YOU?\nKnowledge of Electricity and Electronics is extremely valuable nowadays!\nElectronic circuits are everywhere, from computers and smartphones, to home appliances and cars. Think of all the everyday objects that are becoming “smart”... in the future, most of the things that we own will contain some electronics. Jobs in electronics are in high demand and well paid in almost every country!\nBuilding electronic products is incredibly rewarding, whether you do it professionally or just as a hobby. There is just something different and exciting about designing something physical that can be hold in one’s hand and that interacts with the outside world, and today it has become incredibly easy to get started thanks to cheap development boards such as the Arduino and Raspberry Pi, combined with the right knowledge.\nDifferently than what happens in other disciplines, knowledge of Electronics does not become obsolete, but it is always current as it is intimately connected to physics and to the fundamental laws of nature. Hence, while new components and chips might come along every year, the fundamental principles of Electronics always stay the same.\n\n\nWHAT'S DIFFERENT ABOUT THIS COURSE?\nWhile most of the material and courses available online tend to be high-level and focused on applications (for instance, it shows students how to connect components on a breadboard to create a circuit), the goal of this course is to explain the fundamental concepts of Electricity and Electronics, to allow you to fully understand how circuits work. Every topic is addressed starting from the first principles of the underlying physics and fundamental laws, and only later the acquired knowledge is used to explain how to design more complex circuits for different applications.\n\n\nWHAT WILL YOU LEARN?\nFundamental concepts of Electricity (Current, Energy, Voltage, Power)\nMost important electronic components (Resistor, Capacitors, Diodes, etc)\nThe main laws governing currents and voltages in circuits (Ohm’s law, Kirchhoff’s laws, etc)\nInterface with Microcontrollers (coming soon)\n\n\nANY PREREQUISITE?\nThis is an introductory course about the theory of Electricity and Electronics, so no previous knowledge is required. To get the best out of the lessons, students should be comfortable with some basic arithmetic as I will often write and solve equations, in particular when analyzing simple circuits. Understanding a bit of physics can help too, but it is not required. Most importantly, no special hardware or software is required.",
      "target_audience": [
        "Makers who want to understand how electronic components really works",
        "College students who want to refresh basic topics of electronics",
        "Electrical Engineers who have forgotten the basics"
      ]
    },
    {
      "title": "Digital Electronics and Circuits",
      "url": "https://www.udemy.com/course/digital-electronics-and-circuits-p/",
      "bio": "Hands-on course spanning over 11+ hours for in-depth learning/practice",
      "objectives": [
        "11+ hours hands-on course explaining Digital Electronics concepts in depth",
        "Thoroughly Learn, and Hone your Digital Electronics knowledge",
        "Prepare for a Job in the IT/Semiconductor Industry",
        "Prepare for Competitive Entrance Exams requiring Digital Electronics Knowledge"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Few Basic Concepts": [
          "Signals, Systems, Elements",
          "Integrated Circuits Families, Characteristics, and Levels",
          "Number Systems and Codes"
        ],
        "Boolean Expressions, Minterms, Maxterms, Circuit Minimization": [
          "Boolean Expressions, Operator Precedence, and Boolean Laws",
          "Basic Gates, Truth Tables, Maxterms, Minterms",
          "K Maps 1",
          "K Maps 2",
          "Quine McCluskey Method"
        ],
        "Combinational Logic and Circuits": [
          "Universal Gate (NAND)",
          "Universal Gate (NOR)",
          "NMoS, PMoS, and CMoS Designs",
          "EX-OR and EX-NOR Gates (Odd and Even Functions)",
          "Adders (Binary, Half, Full, 4-bit)",
          "Subtraction, Ripple Carry Adders and Carry Lookahead Generators",
          "Decoders and Encoders",
          "Multiplexers and Demultiplexers"
        ],
        "Sequential Logic and Circuits": [
          "Concept of Memories, and Latches",
          "Latches Continued",
          "Flip Flops (Latches to FFs, Types of FFs, Setup and Hold Time)",
          "Setup and Hold Times Continued",
          "Analysis of Sequential Circuits (Mealy and Moore Machines)",
          "Design of Sequential Circuits [Sequence Recognizer]",
          "State Reduction Example",
          "Registers",
          "Counters",
          "Ring Counter and Johnson Counter"
        ],
        "Miscellaneous Concepts and Problem Solving": [
          "Metastability",
          "Problem Solving 1 (Design Conversions using MUX)",
          "Problem Solving 2 (Flip Flop Conversions)",
          "Problem Solving 3 (Sequence Recognizer Design)"
        ]
      },
      "requirements": [
        "Passion and Interest for Learning and exploring Digital Circuits"
      ],
      "description": "Section 1: Introduction\nSection 2: Few Basic Concepts\n+Signals, Systems, Elements\n+Integrated Circuit Families, Characteristics, and Levels\n+Number Systems and Codes\nSection 3: Boolean Expressions, Minterms, Maxterms, Circuit Minimization\n+Boolean Expressions, Operator Precedence, and Boolean Laws\n+Basic Gates, Truth Tables, Maxterms, Minterms\n+K Maps 1\n+K Maps 2\n+Quine McCluskey Method\nSection 4: Combinational Logic and Circuits\n+Universal Gates (NAND and NOR)\n+NMoS, PMoS, and CMoS Designs\n+EX-OR and EX-NOR Gates (Odd and Even Functions)\n+Adders (Binary, Half, Full, 4-bit)\n+Subtraction, Ripple Carry Adders and Carry Lookahead Generators\n+Decoders and Encoders\n+Multiplexers and Demultiplexers\nSection 5: Sequential Logic and Circuits\n+Concept of Memories, and Latches\n+Flip Flops (Latches to FF conversion, types of FFs, Setup and Hold Times)\n+Analysis of Sequential Circuits (Mealy and Moore Machines)\n+Design of Sequential Circuits\n+State Reduction\n+Registers\n+Counters\n+Ring Counter and Johnson Counter\nSection 6: Miscellaneous Concepts and Problem Solving\n+Metastability\n+Problem Solving 1 (Design Conversions using MUX)\n+Problem Solving 2 (Flip Flop Conversions)\n+Problem Solving 3 (Sequence Recognizer Circuit)\n* New lectures will be added based upon popular user feedback and request.",
      "target_audience": [
        "Students of Computer Science, IT, Electronics (EEE, ECE, E&I), VLSI, Digital/Embedded System Design, and Microelectronics, who want to get ready for a Job in the IT & Semiconductor Industry.",
        "Digital VLSI Design Verification Enthusiasts (Beginners, Professionals, Experts)",
        "Engineers looking to build a career in VLSI Front-End Design Verification"
      ]
    },
    {
      "title": "How to Use Solderless Electronic Breadboards (Protoboards)",
      "url": "https://www.udemy.com/course/protoboard/",
      "bio": "Learn how to correctly use protoboards to go from an electronic schematic diagram to a working prototype of a circuit..",
      "objectives": [
        "Typically, engineers, students and hobbyists use solderless breadboards (also called protoboards) to assemble and connect proposed electronic circuits, and test their operation with this temporary setup, before proceeding to a permanent circuit on a printed circuit board or other more permanent media.",
        "Using an electronic schematic, a diagram of how to connect electronic components to perform a specific task, students will learn how to correctly place electronic components on a protoboard, also known as a solderless breadboard, so that the circuit operation can be observed and tested."
      ],
      "course_content": {},
      "requirements": [
        "No prior knowledge is required to take and complete this course.",
        "No software is needed to complete this course.",
        "No hardware is required to complete this course. The hardware mentioned in the course is used to demonstrate the process. After completion of the course, any hardware or equipment needed depends solely on what the student may wish to purchase, design or test.",
        "Materials needed for the productive use of protoboards include the protoboard itself, and the electronic components such as resistors, capacitors, transistors, microcontrollers or any other hardware needed to build a proposed circuit. NONE of these types of materials are required to successfully complete this course."
      ],
      "description": "Solderless breadboards, also known as protoboards are used to make a temporary electronic circuit, or a prototype of a proposed circuit. They are also often used for electronics students to set up various circuits that they are taught in electronics engineering college programs.\nSeting Up and Using Protoboards or Solderless Breadboards\nIn order to test an electronic circuit design, or to build a prototype of a desired design, protoboards are very useful because they allow the user to set up a temporary circuit that does not require any printed circuit boards or soldering of any components. Components can easily be reconfigured or rearranged until the circuit becomes what is desired.\nThese are some of the advantages and benefits of protoboards:\nThey require no soldering or permanent connection of any components.\nThey can be rearranged or reconfigured quickly and easily.\nThey allow easy access to all components in the design, for testing.\nTest equipment (multimeters, oscilloscopes, signal generators) can easily be attached to the circuit for initial testing and verification of circuit characteristics.\nCircuits can be disassembled in a very short time.\nThis course covers all of the details necessary for the user to understand the mechanics of protoboards, there use, how to set up power and ground and how start with a schematic and the indicated electronic components (resistors, capacitors, transistors, etc.) and properly recreate that exact circuit on a protoboard.\nThe primary teaching tools for this course is an instructor led PowerPoint presentation that uses diagrams, photos and short instructional videos, so that the student can follow along with the instructor to develop the knowledge and skills required to properly and effectively use protoboards in the design and testing of electronic designs and projects.",
      "target_audience": [
        "This course is best suited for electronic students or hobbyists that wish to build prorotypes of electronic circuits and observe or record the characteristics of the circuit.",
        "These are the most common scenarios for protoboard use:",
        "1. Assemble and test a circuit to make sure it works properly.",
        "2. Students use protoboards to assemble a temporary electronic circuit that can be demonstrated to the instructor as proof that they can design and/or build an operating circuit, such as an amplifier, a transmitter or areceiver.",
        "Protoboards are often used to mount small sub circuits that are needed to enhance the abilities of a larger electronic or robotics project."
      ]
    },
    {
      "title": "From 0 to 1: Raspberry Pi and the Internet of Things",
      "url": "https://www.udemy.com/course/from-0-to-1-raspberry-pi/",
      "bio": "Have a blast using the Raspberry Pi to do some home automation and understand the Internet of Things",
      "objectives": [
        "Understand what the internet of things and physical computing are",
        "Know their way around a Raspberry Pi",
        "Use the Raspberry Pi in Home Automation projects",
        "Think of different IoT applications and visualize the components needed to build them",
        "Do cool things like control switches in their home with their smartphone"
      ],
      "course_content": {
        "What this course is about": [
          "You, This course and Us"
        ],
        "What is the Internet of Things?": [
          "What is the internet of things and why should you care?",
          "What makes a home smart?",
          "Small but Mighty : The Raspberry Pi",
          "Internet of Things"
        ],
        "Pi's Anatomy": [
          "The brain : Raspberry Pi's Microprocessor",
          "Exploring the Raspberry Pi board",
          "Raspberry Pi : Where is the memory?",
          "Operating systems : Make an informed choice",
          "Raspberry Pi"
        ],
        "Getting Started": [
          "Install the Operating system",
          "Let's go on a tour : Raspbian OS",
          "Getting Comfortable : Linux Shell commands",
          "User permissions on the Raspberry Pi",
          "Installing a software",
          "Connecting your Pi to the Internet",
          "Raspbian"
        ],
        "Coding with Python - It's easy as Pi": [
          "Coding is like Cooking",
          "A List is a List",
          "Playing with Lists",
          "Dictionaries and If-Else",
          "Don't Jump Through Hoops, Use Loops",
          "Lists, Dictionaries and Loops",
          "Functions are like Foodprocessors",
          "Stay cool : Import a module",
          "Python"
        ],
        "Physical Computing with the Raspberry Pi": [
          "Raspberry Pi and Physical Computing : How stuff works",
          "Establish the first link : How do devices communicate?",
          "Put the pieces together : Designing a circuit",
          "Tie it all up : Writing the code",
          "Physical Computing"
        ],
        "Let's have some fun! Home Automation projects": [
          "Meet the players: A few common electrical components",
          "Getting our feet wet: Flash an LED",
          "Push some buttons : Reading an input",
          "Our first sensor : How bright is it in here?",
          "Who goes there? : Detect an object & measure distance with an ultrasonic sensor",
          "Get ready for Magic 1 : Automate a switch using a relay and sensors",
          "Get ready for Magic 2 : Automate a switch using a relay and sensors",
          "Control a relay from anywhere - I",
          "Control a relay from anywhere - II",
          "Setting up a video feed with the Pi Camera",
          "Sensors",
          "Relay"
        ],
        "For Arduino lovers: WiringPi": [
          "WiringPi and Pulse Width Modulation",
          "WiringPi"
        ]
      },
      "requirements": [
        "No real prerequisites. Beginner level understanding of electric circuits and programming might help but its not mandatory",
        "If you intend to do the physical computing projects, go ahead and purchase a Raspberry Pi - but the course does give you advice on things you might need to get for your automation projects so you can wait to decide as well."
      ],
      "description": "Taught by a team of electrical engineers from Stanford and IIT Madras.\nAn Internet-Of-Things course for everyone - accessible yet serious, to take you from absolute beginner to a solid intermediate level - built around Home Automation using Raspberry Pi.\n\nThis is a course is for everyone. You need not be an electrical engineer, or an engineer at all. We explain all engineering or automation concepts from absolute scratch.\nThis is an Internet-of-Things course, not merely a Raspberry Pi course. This is important because we think too many courses end up becoming like manuals for the Raspberry Pi, or the Arduino, or some specific hardware device. This course is careful to generalize\nThe course takes you to a solid intermediate level. The objective is to get you to a point where if you imagine a really cool IoT application, you will be able to independently figure out how to implement it.\nWe focus on Home Automation using Raspberry Pi for our use-cases. This is so that you can immediately put it to use around the home (turn that music down without getting off the couch!)\nAs with all our courses, this one too is quirky. The examples are irreverent. Lots of little touches: repetition, zooming out so we remember the big picture, active learning with plenty of quizzes. There’s also a peppy soundtrack, and art - all shown by studies to improve cognition and recall.\nWhat's Covered:\nInternet of Things : Sensors, Actuators, Microcontrollers, Arduino, Raspberry Pi, Physical Computing, Smart homes\nRaspberry Pi 2 Model B Components, System on a Chip (SOC) , Input Output Interfaces, SD Card / Secondary Storage, Choice of Operating Systems, RISC/CISC Architectures, x86 vs ARM, Raspbian OS installation, Raspbian tour, Linux Shell commands overview, Installing softwares, Connecting to the Internet\nPhysical Computing: Sensors (Photoresistors, Ultrasonic sensors, motion sensors, temperature and humidity sensors), Relays, LEDs, Push buttons, Basics of circuit design, Ohm's law, RC circuit, GPIO pins, Serial and Parallel interfaces, UART, SPI, I2C, Pulse Width Modulation (PWM), Python (RPi DOT GPIO), WiringPi, Node js (RPi-GPIO)\nHome Automation projects: Measuring Distance, Measuring Light Intensity, Controlling switches with sensors, Controlling switches over local and external networks",
      "target_audience": [
        "Yep! Anyone who is interested in Internet of Things, Physical computing, hardware hacking and wants to get their hands dirty with real projects",
        "Yep! Non-engineers / Non-tech persons who are interested in home automation projects or Raspberry Pi",
        "Yep! People who are looking to understand the details of IoT and want to think of new startup ideas in the IoT space or work in this space",
        "Yep! Engineers who have book knowledge but want some help with practical application of electronics concepts"
      ]
    },
    {
      "title": "Mastering Microcontroller: STM32-LTDC, LCD-TFT, LVGL (MCU3)",
      "url": "https://www.udemy.com/course/mastering-microcontroller-stm32-ltdc-lcd-tft-lvgl/",
      "bio": "Step by step guide to microcontroller based embedded graphics system , Interfacing, and building graphical UI using LVGL",
      "objectives": [
        "Embedded graphics systems",
        "Interfacing RGB TFT LCD using MIPI DPI and MIPI DBI",
        "Interfacing SPI based TFT-LCD display and programming",
        "STM32 LTDC configuration and programming",
        "STM32 LTDC Layers programming",
        "Running LVGL on simulator and on STM32 microcontroller",
        "Using LVGL objects, widgets , styles , animations, menus,etc",
        "Step by step LVGL UI exercises",
        "Covering three major hardware development boards STM32F439 discovery , STM32F746 discovery and STM32F407+External LCD",
        "Register level step by step programming and demonstration"
      ],
      "course_content": {
        "Embedded graphics systems": [
          "About the instructor",
          "Important Note",
          "Course repository",
          "Introduction to embedded graphics system",
          "Hardware to use with this course",
          "IDE Installation",
          "Roaring tiger demo on STM32F429DISC board",
          "Roaring tiger demo on STM32F746-DISC board",
          "Roaring tiger demo on STM32F407-DISC board with external LCD",
          "LCD module interfacing explanation on various boards"
        ],
        "Important terminologies in graphic systems": [
          "RGB display and pixel",
          "Important pixel formats",
          "Pixel density and resolution",
          "Converting bmp images to 'C' byte array"
        ],
        "LCD-TFT Display Controller": [
          "About LTDC peripheral of STM32 MCU",
          "Display interface types",
          "Significance of RGB interface signals",
          "Analyzing RGB interface signals"
        ],
        "LCD interfacing and register level programming": [
          "Exercise-001 : Displaying VIGBYOR bars on the display",
          "Setting up main system clock of the MCU",
          "Setting up main system clock code implementation part-1",
          "Setting up main system clock code implementation part-2",
          "Setting up main system clock code implementation part-3",
          "Setting up main system clock code implementation part-4",
          "Setting up main system clock code implementation part-5",
          "Setting up main system clock code implementation part-6"
        ],
        "TFT-LCD Interfacing and programming": [
          "ILI9341 LCD programming and data interface",
          "LCD SPI initialization coding part-1",
          "LCD SPI initialization coding part-2",
          "LCD SPI initialization coding part-3",
          "Configuring GPIO pins for SPI functionality",
          "SPI peripheral configuration coding",
          "LCD SPI initialization for STM32F407x+External LCD",
          "ILI9341 TFT-LCD Initialization commands",
          "Testing TFT-LCD command sending",
          "LTDC configuration",
          "LTDC pin initialization",
          "LTDC peripheral configuration part-1",
          "LTDC peripheral configuration part-2",
          "LTDC background testing",
          "LTDC signals trace analysis",
          "LTDC layers initialization",
          "LTDC Layers initialization coding and windowing explanation",
          "LTDC Layers initialization coding contd",
          "LTDC layer testing on hardware",
          "Testing exercise 001 in landscape mode",
          "About portrait orientation",
          "Testing exercise 001 in portrait mode",
          "Pixel writing in the case of STM32F407x+ External LCD",
          "Testing background color STM32F407X+external LCD",
          "Windowing in the case of STM32F407X+external LCD",
          "Testing exercise 001 : STM32F407x + External LCD"
        ],
        "LVGL": [
          "LVGL and simulator download",
          "LVGL simulator sample applications"
        ],
        "Running LVGL on STM32 microcontroller": [
          "Exercise 002 : project creation",
          "Adding LVGL source to the project",
          "Analyzing memory consumption and testing LVGL on STM32F429 board",
          "LVGL project for STM32F746x and STM32F407 disc board"
        ],
        "Creating LVGL GUI": [
          "Exercise 003: RGB mixer demo",
          "LVGL object",
          "Exercise implementation on simulator part-1",
          "Exercise implementation on simulator part-2",
          "Exercise implementation on simulator part-3",
          "Exercise implementation on simulator part-4",
          "Exercise implementation on simulator part-5",
          "Exercise implementation on simulator part-6",
          "Exercise implementation on simulator part-7",
          "Exercise implementation on simulator part-8",
          "Testing RGB mixer application on STM32F429 DISC board",
          "About touch screen controller",
          "Testing RGB mixer application on STM32F746 and STM32F407 DISC board"
        ],
        "LVGL Project": [
          "Project explanation",
          "Project demo on simulator",
          "Project demo on stm32 boards",
          "lvgl_menu example",
          "BONUS LECTURE"
        ]
      },
      "requirements": [
        "Basics 'C' or 'C++' programming knowledge",
        "Basic microcontroller knowledge"
      ],
      "description": "In this course, you learn the embedded graphics systems and programming part of it along with using  LVGL  for creating UI applications.\nIn the first part of the course, you will learn,\n1. Basics of embedded graphics systems\n2. how to interface an LCD-TFT display to the microcontroller board.\n3. How to use the LTDC  peripheral of the STM32 microcontroller,\n4. How to communicate between the microcontroller and the TFT display using MIPI DPI and MIPI DBI\n5. Bare metal programming\nIn this part you are going to write all the code, completely from scratch, that is using register-level programming.\nIn  the second part, you will learn,\n1. Introduction to  LVGL ( an open-source graphics library for microcontrollers)\n2. Using LVGL in STM32 projects\n3. LVGL widgets and their usage, APIs\n4. Create UI application using LVGL\n5. Testing LVGL application on PC simulator and different STM32 development boards\n6. Student project\n\nIn this course I will show you how you can create an embedded graphics application for 3 different boards simultaneously\nyou can either use the STM32F429 Discovery board or STM32F74x Discovery board or you can use any STM32 board with external TFT LCD interfaced via the SPI interface.\nPlease read the course description carefully and you may also watch free preview videos before enrolling in this course.\n\n\nHardware requirements:\nIf you want to test the code developed for target hardware, you would need any one of the below-mentioned board\nFor more information please watch the preview videos above.\n1. 32F429IDISCOVERY Discovery kit with STM32F429ZI MCU  (Explained in the course)\nor\n2. 32F746GDISCOVERY Discovery kit (STM32F746NG MCU)   (Explained in the course)\nor\n3. STM32F7508-DK Discovery kit with STM32F750N8 MCU\nor\n4. STM32F4DISCOVERY Discovery kit with STM32F407VG MCU + External ILI9341 TFT-LCD interfaced via SPI  (Explained in the course)\nor\n5. Any stm32 board + External ILI9341 TFT-LCD interfaced via SPI\n6. USB logic analyzer (Optional )\n7. Jumper wires if you are using hardware option 4 or 5\nNote: LVGL applications can be tested on a PC simulator without the need for any target hardware.\n\n\nSoftware requirements:\nSTM32CUBEIDE\n\n\n\n\nLearning order of FastBit Embedded Brain Academy Courses,\nIf you are a beginner in the field of embedded systems, then you can take our courses in the below-mentioned order.\nThis is just a recommendation from the instructor for beginners.\n1) Microcontroller Embedded C Programming: absolute beginners(Embedded C)\n2) Embedded Systems Programming on ARM Cortex-M3/M4 Processor(ARM Cortex M4 Processor specific)\n3) Mastering Microcontroller with Embedded Driver Development(MCU1)\n4) Mastering Microcontroller: TIMERS, PWM, CAN, RTC,LOW POWER(MCU2)\n5) Mastering Microcontroller: STM32-LTDC, LCD-TFT, LVGL(MCU3)\n6) Embedded System Design using UML State Machines(State machine)\n7) Mastering RTOS: Hands-on FreeRTOS and STM32Fx with Debugging(RTOS)\n8) ARM Cortex M Microcontroller DMA Programming Demystified(DMA)\n9) STM32Fx Microcontroller Custom Bootloader Development(Bootloader)\n10) Embedded Linux Step by Step using Beaglebone Black(Linux)\n11) Linux device driver programming using Beaglebone Black(LDD1)\n\n\nOther programming courses\n1) Master The Rust Programming Language : Beginner To Advanced",
      "target_audience": [
        "Anyone who wants to learn and apply embedded systems programming"
      ]
    },
    {
      "title": "PLC CODESYS - Advanced Software Structural Design | Using ST",
      "url": "https://www.udemy.com/course/plc-structured-desig-no-more-ladder-logic-spaghetti-code/",
      "bio": "Master Structured Text (ST, SCL) and PLC pattern Based and Component based Software design",
      "objectives": [
        "Pattern based PLC programming",
        "Structured Coding",
        "PLC Structured Text and CFC Programming Languages",
        "Real-World Full design project"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Overview",
          "Component Design Overview"
        ],
        "Important: Before you start": [
          "How should you take this course",
          "One more thing"
        ],
        "Units Design": [
          "IO GVL",
          "Analog Handler",
          "Motor Driver",
          "Motor Driver- Unit Test",
          "Digital Sensors Handler",
          "Proximity Sensor- Unit Test",
          "Gate Driver",
          "Gate Driver- Unit Test",
          "Product Handler",
          "Product Handler- Unit Test",
          "Analog Output Handler",
          "Fault Injection Handler"
        ],
        "Doser Component": [
          "DUT FI",
          "Measurement Port Design",
          "Calibration Port Design",
          "Read and Send Ports",
          "IO Encapsulation Structure",
          "Structuring the component",
          "Doser Component Load Cell",
          "Doser Component Motor Frequency",
          "Doser Component Motor Driver",
          "Doser Component Bunker"
        ],
        "Mixer Component": [
          "Timer Unit",
          "Mixer Ports part 1",
          "Mixer Ports Part 2",
          "Structuring the component",
          "Mixer Motor Frequency",
          "Mixer Motor Driver",
          "Mixer Timer",
          "Mixer Gate"
        ],
        "Main Program Puzzle Fit": [
          "Creating The Main Program",
          "Main GVL",
          "Main Ports Mappnig",
          "Main IO Mapping"
        ],
        "The Controller": [
          "FSM Inputs/Outputs",
          "Controller Status functions",
          "Controller User Input Port",
          "Controller Algorithm",
          "Controller Integration"
        ],
        "Production Line Calibration": [
          "Machine Calibration"
        ],
        "Manual Integration Testing and Debugging": [
          "Doser: Integration Test Part 1",
          "Doser: Integration Test Part 2",
          "Doser: Integration Test Part 3",
          "Doser: Integration Test Part 4",
          "Mixer: Integration Test Part 1",
          "Mixer: Integration Test Part 2",
          "Mixer: Integration Test Part 3",
          "Mixer: Integration Test Part 4",
          "Controller : Integration Test"
        ],
        "Manual System Testing": [
          "System Test Part 1",
          "System Test Part 2"
        ]
      },
      "requirements": [
        "Basic PLC programming Knowledge",
        "Windows based machine 7/8/10."
      ],
      "description": "You are on this page, so you probably know that writing a PLC code that gets the job done, is sometimes not really super complicated.\nYou are also probably aware that customers tend to change their minds quite frequently about the PLC design and the system algorithm.\nIf that's the case, then you are definitely aware that changing a complicated algorithm written in Lader Logic or even CFC languages is not that of an easy task. Especially when dependencies in your code are high. Well, that is what we call a Spaghetti Code. It is a code, that basically gets the job done. But it lacks all the extend\nHere I am presenting you a solution, a way to elevate above the masters of PLC programmers.\nLearning Pattern-based programming is like designing a puzzle-based design, where you design individual code pieces and fit them together to create a powerful PLC software infrastructure.\nWe will first start the design by creating unit functions, building them up to components that form the machines in the production line. And finally the controller. Modifying any piece of these would be so easy that you won't have to scratch your head for hours trying to figure out how to modify your algorithm or even worse deleting the whole thing. We all been there once!\nThis knowledge can be applied to any PLC and any platform, be it Codesys, Tia portal, Bechoff or any brand that supports the following languages:\nCFC\nStructured Text\nYou are going to master a very famous design pattern including extensive hands-on Structured text and CFC.\nI hope to see you all in there!",
      "target_audience": [
        "PLC Programmers",
        "Electrical and Electronics Engineers"
      ]
    },
    {
      "title": "Embedded Systems STM32 Low-Layer APIs(LL) Driver Development",
      "url": "https://www.udemy.com/course/embedded-systems-stm32-low-level-ll-driver-development/",
      "bio": "STM32 Low-Level (LL) Drivers: ADC,UART,TIMERS, GPIO,SPI,I2C,RTC,WWDG,IWDG,RCC etc",
      "objectives": [
        "Write firmware using only Low-Level Functions",
        "Understand the Cortex-M Architecture",
        "Write Analog-to-Digital Converter (ADC) drivers using Low-Level Functions",
        "Write PWM drivers using Low-Level Functions",
        "Write UART drivers using Low-Level Functions",
        "Write TIMER drivers using Low-Level Functions",
        "Write Interrupt drivers using Low-Level Functions",
        "Write SPI drivers using Low-Level Functions",
        "Write I2C drivers using Low-Level Functions",
        "Write RTC drivers using Low-Level Functions",
        "Write DMA drivers using Low-Level Functions",
        "Write RCC drivers using Low-Level Functions",
        "Write WWDG drivers using Low-Level Functions",
        "Write IWDG drivers using Low-Level Functions"
      ],
      "course_content": {
        "Introduction": [
          "Downloading the required documentation"
        ],
        "Getting Started": [
          "Notice",
          "Downloading CubeIDE",
          "Setting Up STM32CubeIDE",
          "Quick Notice on CubeMX (Optional)",
          "Installing Packages",
          "Overview",
          "Getting the right STM32 Package"
        ],
        "General Purpose Input/Output Driver Development": [
          "Overview of ARM Cortex-M General Purpose Input/Output Module",
          "Coding : Developing a GPIO Output Driver",
          "Coding : Developing a GPIO Input Driver"
        ],
        "Universal Asynchronous-Synchronous Receiver-Transmitter (USART)": [
          "Overview of the UART Protocol",
          "Coding : Developing a UART Transmitter",
          "Coding : Developing a UART Receiver",
          "Coding : Retargeting printf",
          "Notice"
        ],
        "General Purpose Timer Driver Development": [
          "Understanding the System Tick (SysTick) Timer",
          "Coding : Configuring Systick",
          "Understanding STM32 Timers",
          "Coding : Creating timer delays",
          "Coding : Timer output compare",
          "Coding : Timer Input Capture"
        ],
        "Analog-to-Digital Converters Driver Development": [
          "Understanding ADC Independents Modes",
          "Coding : ADC basic driver",
          "Coding : Transmitting ADC values through the UART"
        ],
        "Interrupt Programming": [
          "Understanding Interrupts",
          "Coding : Input Interrupt Driver",
          "Coding : ADC Interrupt Driver",
          "Coding : UART Interrupt Driver"
        ],
        "Direct Memory Access (DMA) Driver Development": [
          "Overview of the Direct Memory Access (DMA) Module",
          "Coding : ADC Multichannel Driver with DMA (Part I)",
          "Coding : ADC Multichannel Driver with DMA (Part II)",
          "Coding : ADC Multichannel Driver with DMA (Part III)",
          "Coding : ADC Multichannel Driver with DMA (Part IV)",
          "Coding : ADC Multichannel Driver with DMA (Part V)",
          "Coding : ADC Injected Mode Driver (Part I)",
          "Coding : ADC Injected Mode Driver (Part II)",
          "Coding : ADC Analog WatchDog Mode Driver",
          "Coding : UART DMA Case Study (Part I )",
          "Coding : UART DMA Case Study (Part II)",
          "Coding : UART DMA Case Study (Part III )",
          "Coding : UART DMA Case Study (Part IV )"
        ],
        "Inter- Integrated Circuit (I2C) Driver Development -TX": [
          "Understanding the I2C Protocol",
          "Coding : Implementing the I2C Slave Init Function",
          "Coding : Implementing the I2C Master Init Function",
          "Coding : Implementing the I2C Callback Functions",
          "Coding : Finalizing the application"
        ],
        "Inter- Integrated Circuit (I2C) Driver Development -RxTx": [
          "Coding : Implementing the Init functions",
          "Coding : Implementing the Callback Functions",
          "Coding : Implementing the DMA Init Function",
          "Coding : Implementing the Slave and Master Config Functions",
          "Coding : Implementing the Interrupt Request Handlers",
          "Coding : Finalizing the application"
        ]
      },
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know.",
        "STM32F411-NUCLEO",
        "We shall be using the STM32CubeIDE which is FREE."
      ],
      "description": "Welcome to the Embedded Systems STM32 Low-Layer APIs(LL) Driver Development course.\nThe STM32 Low-Layer APIs ( known as LL) offers a fast light-weight expert-oriented layer which is closer to the hardware than the HAL APIs (Hardware Abstraction Layer). The LL offers low-level APIs at the register level with better optimization. These require deep knowledge of the MCU and peripheral specifications which we shall cover in this course.\nWith a programming based approach, this course is designed to give you a solid foundation in firmware and peripheral driver development for the STM32 family of microcontrollers. The goal of this course is to teach you how to navigate the microcontroller reference manual and datasheet to extract the right  information to professionally  build peripheral drivers and firmware using the STM32 Low-Layer APIs\nBy the end of this course you will be able to develop drivers for peripherals like the ADC, UART,PWM, GPIO, TIMER,I2C, SPI, RTC, WWDG, IWDG, RCC, EXTI etc.  You will also master the STM32 architecture and how to build professional embedded firmware for STM32 microcontrollers.\nPlease take a look at the full course curriculum.\nREMEMBER : I have no doubt you will love this course. Also it comes with a  FULL money back guarantee for 30 days!  So put simply, you really have nothing to loose and everything to gain.\nSign up and let's start toggling some register bits.\n\n\n--------------------------------------Some highlights------------------------------------\nWrite  Analog-to-Digital Converter (ADC) drivers using Low-Level functions\nWrite  PWM  drivers using Low-Layer functions\nWrite  UART drivers using Low-Layer functions\nWrite  TIMER drivers using Low-Layer functions\nWrite  Interrupt drivers using Low-Layer functions\nWrite  SPI drivers using Low-Layer functions\nWrite  I2C drivers using Low-Layer functions\nWrite  RTC drivers using Low-Layer functions\nWrite  DMA drivers using Low-Layer functions\nWrite  RCC drivers using Low-Layer functions\nWrite  WWDG drivers using Low-Layer functions\nWrite  IWDG drivers using Low-Layer functions",
      "target_audience": [
        "If you are an absolute beginner to embedded systems, then take this course.",
        "If you are an experienced embedded developer and want to learn how to professionally develop embedded applications for ARM processors, then take this course."
      ]
    },
    {
      "title": "Arduino Long Distance Communication",
      "url": "https://www.udemy.com/course/arduino-long-distance-serial-communication-between-arduinos-rf/",
      "bio": "Start Sending Data Over Long Distance using Arduino via Wired and Wireless Connection and extend Arduino Capabilities",
      "objectives": [
        "Make your own Arduino Long-Distance Transmitter and Receiver",
        "Learn what is the hardware required to make this happen.",
        "Learn what is RS485 and how to implement this communication protocol in long-distance communication.",
        "Dake down the schematic for connecting Two Arduinos using RS485 protocol over long-distance.",
        "Discuss the receiver and transmitter program for RS485.",
        "Talk about the circuit assembly and we will break down the HC-12 module working principle for long-distance wireless communication between two Arduinos.",
        "Perform communication of the Arduino to Arduino using the HC-12 module.",
        "Explain how communication works with Arduino transceiver.",
        "Create a PCB for this project"
      ],
      "course_content": {},
      "requirements": [
        "Basic experience in Electronics",
        "A Will to apply, not just watch",
        "Be familiar with the Arduino Uno",
        "Be familiar with the breadboard and wiring."
      ],
      "description": ">>> Start Sending Data Over Long Distance using Arduino via Wired and Wireless Connection and extend Arduino Capabilities <<<\nWelcome to this course.\nThis course will teach you how to make long-distance communication between two Arduino boards using wired and wireless connections. This guide will take you step by step to understand the needed components, why we use them, and how to wire them up, starting with the basics of Arduino Serial Communication and ending with sending data over a very long distance.\nYou will learn the actual working principle of long-distance communication, the right communication protocols to use, and how to interface the required module to make this happen.\nWe know that Arduino has several built-in buses for fast data transfer, such as the SPI Protocol and I2C Protocol. Various kinds of sensors are often connected using the I2C communication protocol. There is also the popular UART (Universal Asynchronous Receiver Transmitter) protocol, often used with a USB interface to exchange data with a laptop or computer. But all of these methods have a serious drawback: they do not work at large distances.\nImagine a situation where we need to collect data from sensors on the roof of our houses and, depending on the location of the sensors, our hardware, and software setup, we need to transfer a signal from this sensor to our Arduino on the first floor. How can we make it possible? We'll definitely need a powerful long-distance transmission method, one that can be used for years, and in this course, we will cover this. We will cover wireless and wired long-distance communication methods between two or three Arduinos or any two microcontrollers, whether they are Arduino microcontrollers or any other types of microcontrollers.\nWe will make it as simple as possible.\nWhy You Should Take This Course:\nExtend the capabilities of Arduino\nUse wireless communication for more flexible Arduino projects\nSend data wirelessly in Arduino projects\nCreate a wireless sensor network\nSend data over long distances wirelessly or via wired connection\nWhat You Will Learn in This Course:\nLearn the hardware required to make this happen\nUnderstand RS485 and how to implement this communication protocol in long-distance communication\nCreate a schematic for connecting two Arduinos using the RS485 protocol over long-distance\nDiscuss the receiver and transmitter program for RS485\nUnderstand the circuit assembly and break down the HC-12 module working principle for long-distance wireless communication between two Arduinos\nPerform communication between Arduinos using the HC-12 module\nExplain how communication works with Arduino transceiver\nCreate a PCB for this project\nI'm sure that you will gain a lot of knowledge in this course.\nWhat You Will Learn\nHardware required for long-distance communication\nRS485 communication protocol and its implementation\nSchematic creation for connecting two Arduinos using RS485 protocol\nReceiver and transmitter programming for RS485\nCircuit assembly and HC-12 module working principle for long-distance wireless communication\nCommunication between Arduinos using the HC-12 module\nHow communication works with Arduino transceiver\nPCB creation for the project\nWho is This Course For\nArduino enthusiasts looking to expand their skills\nDIY electronics hobbyists\nStudents of technology and engineering\nEducators looking for practical STEM projects\nAnyone interested in long-distance communication methods for Arduino\nRequirements\nBasic understanding of electronics and circuitry\nEnthusiasm for DIY projects and learning new technology\n\n\nAbout the Instructor Info\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge - we go into the depth of the topic and give you the exact - step by step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years - we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy.\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million Views, 20k+ Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThe team also works as freelancer engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their careers.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, particularly for Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to improve their skills and build great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone interested in making his own Arduino Long-Distance Transmitter and Receiver",
        "Anyone interested in making amazing Microcontroller Projects",
        "Anyone Interested in Learning How Long-Distance Communication works",
        "Anyone Interested in Learning Wired and Wireless Long Distance data Transmission",
        "Electronics Geeks",
        "Arduino Geeks",
        "Anyone Interested in Learning New Things about Arduino",
        "Anyone Interested in Microcontrollers"
      ]
    },
    {
      "title": "PCB Design: Make Arduino Nano using Altium Designer",
      "url": "https://www.udemy.com/course/pcb-design-altium-designer-make-arduino-nano-using-altium-designer/",
      "bio": "Learn Printed Circuit Board design by Making Arduino Nano in Altium Designer Software.",
      "objectives": [
        "Create and design a custom Arduino Nano in Altium Designer",
        "Draw schematic of an Arduino Nano and wire components",
        "Create your own custom components and component library",
        "Compile design detect and eliminate design errors",
        "Define board shape and size",
        "Auto route to speed up the routing process",
        "Route Printed Circuit Board (PCB)",
        "Eliminate errors and reduce manufacturing board iterations by Using design rule checker"
      ],
      "course_content": {},
      "requirements": [
        "Time, Dedication and Patience to learn and implement new knowledge.",
        "A PC"
      ],
      "description": ">>> Learn Printed Circuit Board design by Making Arduino Nano in Altium Designer Software. <<<\n>>> Continues Updates <<<\nMore Than 4000 STUDENTS!!! THANK YOU!!!\nWhat students are saying:\nArshdeep Malik says, \"Excellent, very helpful, value for money.\"\nZain Ul Haq says, \"I learned to work with Altium designer that had once perceived as complex software to use. After taking this course I’m confident to work on Altium designer.\"\nWhy you should take this course?\nGet the skills you need to become a professional PCB designer.\nLearn how to design and layout your own Printed Circuit Boards using Altium Designer software.\nCreate Arduino Nano in Altium Designer software and then build it on a development platform (Nano board and Development Tool).\nSuccessfully set out, create, and edit your own PCB layout projects in Altium Designer software.\nLearn the latest industry standard tools and techniques for designing Printed Circuit Boards (PCBs).\nThe course is suitable for beginners who want to get the skills they need to become a professional PCB designer.\nWelcome to this course.\nWhat is this course about:\nIn this course, you will learn from start to finish, from zero to production ready on how to design a custom Arduino Nano Printed Circuit Board. It will help you improve your PCB design skills, which will help you get started freelancing or get a job in PCB design with Altium Designer since it's the most used PCB design tool.\nWhat you should expect after taking this course:\nGet started with PCB design using Altium Designer.\nDownload and install Altium designer.\nCreate your own component library to create components that you don't have a library for, which will help you freelance online since many jobs ask to create component libraries.\nCreate the Arduino Nano Schematic in Altium designer.\nWire components in Schematic view.\nTransfer the schematic into PCB.\nPlace components on the board.\nCreate a multilayer board.\nRoute layers and place components on the board.\nAutoroute to save time.\nEliminate design errors.\nCreate Gerber files for your manufacturer.\nWhat You Will Learn:\nDesign custom Arduino Nano PCBs from scratch using Altium Designer.\nDevelop skills in creating component libraries and schematic designs.\nTransfer schematics to PCB and create multilayer boards.\nUtilize autorouting and error elimination techniques.\nGenerate Gerber files for manufacturing.\nWho is This Course For:\nBeginners interested in PCB design.\nHobbyists and enthusiasts wanting to create custom PCBs.\nAspiring freelancers and professionals aiming to work in PCB design.\nAnyone interested in learning Altium Designer for PCB projects.\nRequirements:\nNo prior experience required.\nBasic knowledge of electronics is helpful.\nWillingness to learn and apply new skills.\n\n\nAbout the Instructor:\nEducational Engineering Team\nTeam of Skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading entity in the Microcontroller industry with over 13 Years of Experience in teaching and practical projects. We provide in-depth, step-by-step blueprints on taming complex topics in easy and digestible bite-sized videos.\nHaving been in the Programming and Microcontroller business since 2007, we've catered to students' and educators' needs, teaching over 250k-THOUSAND students and counting through our 100+ courses on Udemy.\nAshraf Said AlMadhoun is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He is the Chief Educational Engineer at Educational Engineering Team, a company founded to explore new trends and technologies and to educate the world.\nOur online courses have helped over 250,000 people globally to excel and make great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Learn basic to intermediate PCB design",
        "Have a tech kickstarter idea, that you want to get of the ground",
        "Want to create your own custom Arduino Printed Circuit Board (PCB).",
        "Want to get a job in PCB design",
        "Want to learn Altium Designer in the shortest possible time.",
        "Want to get started creating cool gadgets"
      ]
    },
    {
      "title": "PIC Microcontroller: Learn By Building Practical Projects",
      "url": "https://www.udemy.com/course/pic-microcontroller-learn-by-building-practical-projects/",
      "bio": "Learn PIC Microcontroller By Creating Real Life Practical Projects with your own Hands in this Step By Step Guide",
      "objectives": [
        "Connect different type of sensors and actuators to PIC Microcontroller",
        "Interface different type of electronic elements with PIC Microcontroller.",
        "Use sensors and actuators to make useful projects",
        "Program, burn a code and wire PIC Microcontroller",
        "Learn What are the right tools that you need to start making amazing projects",
        "Learn What makes a great Microcontroller Project"
      ],
      "course_content": {
        "Introduction": [
          "Section Intro",
          "Introduction",
          "Planning Hands-On Projects with PIC Microcontrollers",
          "Summary",
          "Introduction and Hardware Requirements",
          "Reading Material",
          "Setting Up Development Tools and Hardware"
        ],
        "Software Requirements": [
          "Section Intro",
          "Software Requirements",
          "Summary",
          "Reading Material"
        ],
        "First Project: Motion Detector": [
          "Section Intro",
          "First Project Goal and Components",
          "Very Important Note: Review Process",
          "First Project Circuit",
          "First Project Code Explained",
          "First Project Simulation",
          "Burning The Code To PIC Microcontroller",
          "First Project Practical Work",
          "Summary",
          "Reading Material"
        ],
        "Second Project: RGB Multi-color Leds Controlled by LDR": [
          "Section Intro",
          "Second Project Goal and Components",
          "Second Project Circuit",
          "Second Project Code",
          "Second Project Simulation",
          "Second Project Practical Work",
          "Summary",
          "Reading Material"
        ],
        "Third Project: Device Control Using Clap Signals": [
          "Section Intro",
          "Third Project Goal and Components",
          "Third Project Circuit",
          "Third Project Code and Simulation",
          "Third Project Practical Work",
          "Summary",
          "Reading Material"
        ],
        "End Of Course": [
          "Section Intro",
          "End",
          "Advanced PIC Microcontroller Projects in C",
          "Summary",
          "Reading Material"
        ],
        "Download and Install Software Section": [
          "Download and Install MikroC Software",
          "Download and Install Proteus Software"
        ],
        "Practice Test": [
          "PIC Microcontroller Practical Projects Test"
        ],
        "who we are": [
          "Who We Are?"
        ],
        "Course Project": [
          "Course Project",
          "Applying PIC Knowledge to Real-World Applications"
        ]
      },
      "requirements": [
        "Basic Knowledge in Electronics Circuits",
        "Basic Knowledge in Circuit Design",
        "Basic Knowledge in C Language"
      ],
      "description": "PIC Microcontroller: Learn By Building Practical Projects\nA PIC microcontroller is a small and inexpensive computer chip designed to allow easy programming and control of electronic devices. The PIC microcontroller is used in a broad range of applications, including motor control, data logging, and data acquisition. It can be used in many different settings, including small robots, appliances, and even the automation of household tasks.\nLearning by theory and simulation is only half the answer, but connecting, wiring, and programming an actual microcontroller, not just a simulated one, is the other more important half. This course covers that essential part, teaching you through practical projects.\nWhy You Should Take This Course:\nStep-by-Step Guide: Comprehensive video lectures guiding you through each step.\nReal-World Application: Apply the course material to real-world projects.\nPractical Training: Hands-on learning to see how theory works in practice.\nLearn the Basics: Understand PIC microcontroller fundamentals.\nCode in C: Learn how to program using the C language.\nBuild Projects: Create practical projects with your own hands.\nStudent Testimonials:\nNathan Johnnie: \"It is a great course; well done.\"\nMike D.: \"Excellent delivery, full of useful information. Already started making my first motion detector, many thanks to you.\"\nCourse Highlights:\nLearning by doing makes a significant difference between someone who learns and someone who applies what they learned. This course provides the opportunity to see PIC microcontrollers in action, starting from simulation to connecting the hardware and testing the code in real life. This will ensure your circuit works as expected, and you can witness the successful completion of your first PIC microcontroller project.\nWhen a circuit works in simulation, it doesn’t always work in real life. In more than 85% of cases, the simulated circuit doesn’t work when connected physically. This course focuses on real-world application, making you proficient in building and testing circuits with actual hardware.\nWhat You Will Learn:\nThe basics of PIC microcontrollers\nHow to code in C\nPractical project building with PIC microcontrollers\nConnecting and testing hardware components\nHands-on skills for real-world applications\nWho is This Course For:\nBeginners and intermediate learners interested in microcontrollers\nHobbyists and DIY enthusiasts\nStudents and professionals looking to enhance their skills\nAnyone who prefers hands-on learning and practical application\nRequirements:\nNo prior experience needed\nBasic understanding of electronics is helpful but not necessary\nA computer with internet access\nWillingness to learn and experiment",
      "target_audience": [
        "Anyone with a curiosity for making electronics",
        "Anyone wants to move from Simulation to Practical Work",
        "Anyone intersted in building real things",
        "People with no experience in electronics",
        "People with an intermediate knowledge of electronics",
        "Children over 14 years old"
      ]
    },
    {
      "title": "Master iPhone LCD repair",
      "url": "https://www.udemy.com/course/master-iphone-lcd-repair/",
      "bio": "Beginners iPhone LCD repair course",
      "objectives": [
        "Dissemble and reassemble an iPhone 6s lcd screen for replacement if damaged."
      ],
      "course_content": {
        "Start Here": [
          "Introduction, a hello from me.",
          "Getting started",
          "The first screws",
          "Half way point",
          "The final part",
          "Well done",
          "Full run trough of course start to finish to help you practice"
        ]
      },
      "requirements": [
        "A steady hand and good eyesight, the right tools and a little bit of patience."
      ],
      "description": "A beginners course in the repair of iPhone LCD, using the iPhone 6s to show the processes we will also show you the differences when repairing other models of iPhone. This is a beginners course and only focuses on the LCD repair. A steady hand and good eyesight is all thats needed.",
      "target_audience": [
        "Anyone wishing to learn iPhone lcd repair or take first steps into smartphone repair."
      ]
    },
    {
      "title": "Introduction to Internet of Things Complete Master Course",
      "url": "https://www.udemy.com/course/introduction-to-internet-of-things-complete-master-course/",
      "bio": "Introduction to Internet,Sensor Networks,Arduino Programming,Sensor-Cloud,Industrial IoT,Fog Computing,Sensors&Actuators",
      "objectives": [
        "Basics and real life application of Internet of Things.",
        "Introduction to IoT: Part I, Part II, Sensing, Actuation, Basics of Networking",
        "Communication Protocols",
        "Sensor Networks",
        "Introduction to Arduino Programming Part I, Part II",
        "Integration of Sensors and Actuators with Arduino",
        "Sensor-Cloud",
        "Fog Computing, Smart Cities and Smart Homes",
        "Connected Vehicles, Smart Grid, Industrial IoT",
        "Case Study: Agriculture, Healthcare, Activity Monitoring"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Basics of Internet of Things(IOT)": [
          "What is Message Queue Telemetry Transport(MQTT) ?",
          "Secure MQTT(SMQTT) and MQTT Topic",
          "What is Constrained Application Protocol(CoAP)?",
          "What is Extensible Messaging and Presence Protocol(XMPP)?",
          "What is Advanced Message Queuing Protocol(AMQP)?"
        ],
        "Communication Protocols": [
          "What is Low-power Wireless Personal Area Networks over IPv6(6LoWPAN)?",
          "LOADng and RPL Routing",
          "Radio‐Frequency Identification(RFID)",
          "IEEE 802.15.4",
          "ZigBee",
          "HART & Wireless HART",
          "Near Field Communication(NFC)",
          "Bluetooth",
          "Bluetooth Protocol Stack and Piconet",
          "Zwave and Difference Between Zigbee Vs Zwave",
          "ISA100.11A"
        ],
        "Social Networks": [
          "Wireless Sensor Networks(WSNs)",
          "Node Behavior in WSNs",
          "Applications of WSNs: Mines and Healthcare"
        ],
        "Arduino Programming": [
          "Introduction to Arduino",
          "Implementation of Arduino",
          "Traffic Control System",
          "Implementation of Traffic Control System using Arduino",
          "Arduino with Digital Humidity and Temperature Sensor(DHT)",
          "Implementation of Digital Humidity and Temperature Sensor(DHT)"
        ],
        "Cloud Computing With IOT": [
          "Sensor Cloud",
          "Fog Computing(PART 1)",
          "Fog Computing(PART 2)"
        ],
        "Smart Cities and Connected Vehicles": [
          "Smart Cities and Smart Homes(PART 1)",
          "Smart Cities and Smart Homes(PART 2)",
          "Connected Vehicles(PART 1)",
          "Connected Vehicles(PART 2)",
          "Smart Grid",
          "IIoT: Industrial Internet of Things",
          "Applications of IIoT"
        ]
      },
      "requirements": [
        "No prerequisites"
      ],
      "description": "Internet of Things (IoT) is presently a hot technology worldwide. Government, academia, and industry are involved in different aspects of research, implementation, and business with IoT. IoT cuts across different application domain verticals ranging from civilian to defence sectors. These domains include agriculture, space, healthcare, manufacturing, construction, water, and mining, which are presently transitioning their legacy infrastructure to support IoT. Today it is possible to envision pervasive connectivity, storage, and computation, which, in turn, gives rise to building different IoT solutions. IoT-based applications such as innovative shopping system, infrastructure management in both urban and rural areas, remote health monitoring and emergency notification systems, and transportation systems, are gradually relying on IoT based systems. Therefore, it is very important to learn the fundamentals of this emerging technology.\nLearning Objectives:\n1: Introduction to IoT: Part I, Part II, Sensing, Actuation, Basics of Networking\n2:  Communication Protocols\n3: Data Protocols\n4: Sensor Networks\n5: Introduction to Arduino Programming Part I, Part II\n6: Integration of Sensors and Actuators with Arduino:\n7:  Sensor-Cloud\n8: Fog Computing, Smart Cities and Smart Homes\n9: Connected Vehicles, Smart Grid, Industrial IoT\n10: Case Study: Agriculture, Healthcare, Activity Monitoring",
      "target_audience": [
        "Beginners to Internet of Things and love to deploy applications in real life."
      ]
    },
    {
      "title": "ARM Cortex-M7 STM32F7 Bare-Metal Programming From Ground Up™",
      "url": "https://www.udemy.com/course/arm-cortex-m7-stm32f7-bare-metal-programming-from-ground-uptm/",
      "bio": "No Libraries used, Professional CMSIS Standard, ARM Cortex, ADC,UART,TIMERS, GPIO,SPI,I2C etc.",
      "objectives": [
        "Write firmware using only bare-metal embedded-c",
        "Understand the Cortex-M Architecture",
        "Write Bare-Metal ADC Drivers for the STM32F7 Microcontroller",
        "Write Bare-Metal TIMER Drivers for the STM32F7 Microcontroller",
        "Write Bare-Metal UART Drivers for the STM32F7 Microcontroller",
        "Write Bare-Metal INTERRUPT Drivers for the STM32F7 Microcontroller",
        "Write Bare-Metal GPIO Drivers for the STM32F7 Microcontroller",
        "Write Bare-Metal SPI Drivers for the STM32F7 Microcontroller",
        "Write Bare-Metal I2C Drivers for the STM32F7 Microcontroller",
        "Build every single line of code from scratch by writing to the microcontroller’s memory space directly.",
        "Use No third party libraries or header files",
        "Understand and write every single line of code yourself- no Copy/Paste",
        "Use the debugger effectively to analyze and resolve any bugs",
        "Develop proficiency in your embedded development skills and confidently take the next steps",
        "Define addresses for the different peripherals",
        "Analyze the chip documentation",
        "Create registers from the addresses"
      ],
      "course_content": {},
      "requirements": [
        "NUCLEO-STM32F7 DEVELOPMENT BOARD",
        "No programming experience needed - I'll teach you everything you need to know."
      ],
      "description": "Are you tired of Copying and Pasting code you don't understand?\nWith a programming based approach, this course is designed to give you a solid foundation in bare-metal firmware development for  ARM-based microcontrollers . The goal of this course is to teach you how to navigate the microcontroller reference manual and datasheet to extract the right  information to professionally  build peripheral drivers and firmware. To achieve this goal, no libraries are used in this course, purely bare-metal embedded-c and register manipulations.\nStill keeping it simple, this course comes in different ARM Cortex-M development boards  so that students can put the techniques to practice using an ARM Cortex-M development board of their choice. This version of the course uses the STMicroelectronics  STM32F7-NUCLEO which has an ARM Cortex-M7 microcontroller.\nSo with that understood, let me tell you…\n\nExactly What You’re Getting\nThis is dramatically different from any course you have ever taken because it’s more of a professional hands-on “field guide” to stm32 bare metal firmware development.\nThe reason why is because there’s no fluff or filler. It immediately gets down to the actual subject, showing you exactly what to do, how to do it, and why.\nPlus, it’s easy.\nAnd you’ll immediately “get” the entire mythology I personally use to build firmware for consumer devices in my professional life.\nIt's About MORE Than Just Getting the Code to Work\nSee, this course will change your professional life forever. Here is what one student had to say about the 1st version (STM32F4) of the course :\n\n\n\"I would suggest this course for all the beginners. The concepts have been covered in the right sequence.And also the best part of this lecture series is getting to know how to explore the reference manual and datasheets.\"\nHere is what another student had to say :\n\"Extremly helpful to get to understand the uC programming deeper! For me it is much easier from now to develop code because I undertstand the base behind, so I'm more confident and more experienced to develop and debug the code. Really, this course is very useful to link the hardware knowledge with the coding skills. This fills the gap between them. Thanks for it! :)\"\nA third student :\n\"I am a professional semiconductor chipset application engineer with 30 years in global embedded product design in system applications. I can say this teacher is very straight forward by sharing his many years knowledge to the students with his true heart. Yes. I love his teaching pace and style!\"\n\n\n\n\nThe First Version (STM32F4)  is being Taken by 5000+ Students with 1000+ Reviews\nIf at least one of the following applies to you then keep reading if not then simply skip this course:\n\n\" Escape From \"\nCopying/Pasting code you don’t understand\nUsing third party libraries and header files like HAL, LL and StdPeriph\nExperiencing bugs you don’t understand\nBeing afraid of technical documentations like the reference manual and datasheet of the chip\nImposter syndrome\n\" Arrive At \"\nBuilding every single line of code from scratch by writing to the microcontroller’s memory space directly.\nUsing No third party libraries or header files\nUnderstanding and writing every single line of code yourself- no Copy/Paste\nUsing the debugger effectively to analyze and resolve any bugs\nDeveloping proficiency in your embedded development skills and confidently take the next steps\nSo like I said, there’s more than just getting each piece of code to work.\nHere’s an overview of what you’re getting...\nAnalyzing the chip documentations:\nBefore developing the firmware for any chip you have to learn how to read the documentation provided by the chip manufacturer.\n\n\nDefining Peripheral address\nAll components on the microcontroller have an address range. To write to a component or read from a component you need to locate its address range in the documentation and properly define the addresses in your code.\n\n\nCreating registers from the address:\nThe addresses in the address range of a component represent the registers of that component. To access these registers you have effectively typecast the addresses.\n\n\nUnderstanding CMSIS:\nCortex-Microcontroller Interface Standard (CMSIS)CMSIS is a standard developed by Arm for all Cortex-Microcontrollers. This is the standard used in professional firmware development\n\n\nBut it gets better because you’re also getting…\n\nDeep Lessons on Developing Peripheral Drivers\nYou will learn how to develop bare-metal drivers for the following peripherals :\nAnalog-to-Digital Converter (ADC)\nSerial Peripheral Interface (SPI)\nInter-Integrated Circuit (I2C)\nNested Vector Interrupt Controller (NVIC)\nGeneral Purpose Timers (TIM)\nSystem Tick Timer (SysTick)\nGeneral Purpose Input/Output (GPIO)\n\n\nSpecially Designed For People Who Hate Copy/Paste\nListen. If you don’t like “Copy/Paste” you’re not alone. I can’t stand it either. I’d literally rather have a piece of code that I wrote from scratch that doesn’t work than someone else’s working code I copied and pasted.\nAnd that’s why I’ve spent months designing and recording this course in which I show you how to locate every single register used and the meaning of every hexadecimal value written into the register.\n\n\nAlso it comes with a money back guarantee so you have nothing to lose.",
      "target_audience": [
        "If you are an absolute beginner to embedded systems, then take this course.",
        "If you are an experienced embedded developer and want to learn how to professionally develop embedded applications the STM32F7 microcontroller, then take this course."
      ]
    },
    {
      "title": "Introduction to Embedded Systems",
      "url": "https://www.udemy.com/course/introduction-to-embedded-systems-arduino/",
      "bio": "Learn electronics using the Arduino platform and program the board to control various peripherals",
      "objectives": [
        "Detailed look at Arduino Uno Board",
        "Arduino Programming",
        "Basic circuit connections on a breadboard",
        "Control of LED",
        "Control of RGB LED",
        "Produce a digital output using Arduino Uno",
        "Produce an analog output using Arduino Uno",
        "Accept a digital input",
        "Read analog data",
        "Work with switches",
        "Temperature measurement using LM35",
        "Work with LDR",
        "Serial Communication from Device to Computer",
        "Serial Commincation from Computer to Device"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is Embedded Systems?",
          "What is a MCU?",
          "Alternatives to a MCU",
          "How to select a MCU?"
        ],
        "Introduction to Arduino": [
          "Introduction to Arduino",
          "Arduino Uno Board",
          "Alternative Development Boards",
          "Parts Required",
          "Arduino IDE Installation",
          "First Steps"
        ],
        "Working with LED": [
          "Overview of Arduino IDE",
          "Arduino Programming Structure",
          "Digital Output",
          "Quiz on Digital Output",
          "LED",
          "LED Connection",
          "Programming to Conrol a LED",
          "LED Blinking",
          "Controlling Two LEDs"
        ],
        "More LEDs": [
          "Introduction",
          "Fade In Fade Out",
          "RGB LED",
          "Working with RGB LED"
        ],
        "Digital Input": [
          "Introduction to Digital Input",
          "Working with Switches",
          "Toggle LED"
        ],
        "Serial Communication": [
          "Introduction to Serial Communication",
          "Quiz on Serial Communication",
          "Transmitting Serial Data",
          "Receiving Serial Data"
        ],
        "Analog Read": [
          "Introdcution to Analog Read",
          "Reading a Potentiometer",
          "Potentiometer and LED",
          "Working with LDR",
          "LDR and LED",
          "Temperature Sensor",
          "Quiz on temperature sensor",
          "Working with LM35",
          "Temperature Indication using LEDs",
          "Conclusion"
        ]
      },
      "requirements": [
        "Computer",
        "Arduino Uno board",
        "Arduino IDE software",
        "Breadboard, resistors, jumper wires, LEDs, LM35, LDR, soldering iron"
      ],
      "description": "Are you looking for a start into the world of embedded systems? Do you want to work with both hardware and software, to get an understanding into world of embedded control? If yes, then let us get started with the course which introduces embedded systems in a  step by step manner. The course is aimed at guiding the learner to level of proficiency where the person can go into more advanced topics on their own.\nThe topics covered in the course are\nIntroduction to Arduino Uno\nDigital Output\nAnalog Output\nDigital Input\nAnalog Input\nSerial Communication",
      "target_audience": [
        "Begineer in Embedded Systems",
        "Students wanting to get started in electronics and programming"
      ]
    },
    {
      "title": "Radio-Frequency Identification (RFID)",
      "url": "https://www.udemy.com/course/radio-frequency-identification-rfid/",
      "bio": "An introductory course about understanding radio-frequency identification, its present and future technology.",
      "objectives": [
        "Be introduced to RFID.",
        "Be aware of the differences between RFID and barcodes.",
        "Learn how RFID works.",
        "Learn the different applications of RFID.",
        "Find out what the future holds for RFID technology."
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of the IT industry",
        "Knowledge of the English language"
      ],
      "description": "Radio-Frequency Identification (RFID) is technology that uses radio waves to transfer data from an electronic tag, called RFID tag or label. The RFID is attached to an object, through a reader for the purpose of identifying and tracking the object.\nThis course will begin by discussing RFID and its advantages and disadvantages. The course will also present how RFID works and how it is used in different applications.",
      "target_audience": [
        "Individuals wanting to learn more about RFID applications.",
        "Businesses wanting to keep track of stock or produce.",
        "Create a strict security system by identifying employees and/or clients, or implement anti-theft devices."
      ]
    },
    {
      "title": "Electronic & Electrical Devices Maintenance&Troubleshooting",
      "url": "https://www.udemy.com/course/electronic-electronics-maintenance-electronic-devices-maintenance/",
      "bio": "This course will give you everything you need to start playing with electronics components and fix electronic devices",
      "objectives": [
        "Understand the concepts of voltage, resistance and current",
        "Understand the VOLT OHM Meter/ Digital Multi Meter and how to use safely",
        "Use Ohm's Law to calculate voltage, current and resistance",
        "Use resistors in various configurations",
        "Understand and use capacitors",
        "Understand and use diodes",
        "Understand and use a transistor"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Section Intro",
          "Introduction",
          "Fundamentals of Device Maintenance and Troubleshooting",
          "Who We Are?",
          "Summary",
          "Reading Material"
        ],
        "Electronic and Electrical Maintenance Repair": [
          "Section Intro",
          "Becoming a Troubleshooter",
          "Becoming a Troubleshooter",
          "Summary",
          "Reading Material"
        ],
        "Tools Needed": [
          "Section Intro",
          "Tools Needed",
          "Multimeters",
          "Wire Cutter and Stripper",
          "Wiring Tools Soldering Iron",
          "Essential Tools for Electronic Maintenance Quiz",
          "Screw Drivers",
          "Pliers",
          "Wrench",
          "Oscilloscope and Function Generator",
          "Hand Tools and Measurement Instruments Quiz",
          "Essential Tools for Electronic Maintenance",
          "Summary",
          "Reading Material"
        ],
        "Electronic Components": [
          "Section Intro",
          "A Must Read Book",
          "Passive Electronic Components",
          "Active Electronic Component Diode",
          "Active Electronic Component Transistor",
          "Common Electronic and Electrical Components",
          "Electronic Components Quiz",
          "Understanding Electronic Components",
          "Summary",
          "Reading Material"
        ],
        "Testing": [
          "Section Intro",
          "Testing A Fuse",
          "Testing A Bulb or Lamp",
          "Testing a Switch",
          "Testing A Transformer",
          "Testing A Resistance",
          "Testing Electronic Components Quiz",
          "Testing Electrical Components",
          "Summary",
          "Reading Material"
        ],
        "Troubleshooting": [
          "Section Intro",
          "Safety Concerns",
          "Main Concerns Maintenance",
          "Main Concerns Servicing",
          "Safety and Maintenance Concerns Quiz",
          "Troubleshooting Part1",
          "Troubleshooting Part2",
          "Troubleshooting Techniques",
          "Summary",
          "Reading Material"
        ],
        "Introduction to Electronic Components: A Step By Step Guide": [
          "Section Intro",
          "Introduction",
          "Voltage Current and Resistance",
          "Types of Current",
          "Types of Circuits",
          "Practical: Introduction to Digital Multi-meter DMM",
          "Basic Electrical Concepts and Tools Quiz",
          "Volt Ohm Meter Basics",
          "Measuring Voltage",
          "Practical: How to Measure DC Voltage",
          "Measuring Current",
          "Measuring Currents - Lab Experiement Explained",
          "Measurement Techniques with Volt Ohm Meter Quiz",
          "Practical 1: How to Measure Current",
          "Practical 2: How to Measure Current",
          "Measuring Resistance",
          "Practical: How to test Resistors",
          "Circuit Diagram Basics and Basic Symbols",
          "Practical Measurement Techniques and Circuit Diagrams Quiz",
          "Introduction To Resistor and Color Band Coding",
          "Power Dissipation + Parallel and Series Resistors",
          "Ohm's Law",
          "Introduction To Capacitors",
          "Capacitors Behavior + Capacitors in Series and Parllel",
          "Resistors, Capacitors, and Ohm's Law Quiz",
          "Practical 1: How to test a capacitor",
          "Practical 2: How to test A Capacitor",
          "Introduction to Inductors",
          "Practical: How to test and measure Coils",
          "esting Capacitors and Inductors Quiz",
          "Introduction to Diode + Zener Diode and LED",
          "Practical 1: How to test a Diode",
          "Practical 2: How to test a Diode",
          "Diodes, Zener Diodes, and LEDs Quiz",
          "Introduction to Transistors",
          "Practical 1: How to test a transistor",
          "Practical 2: How to test a transistor",
          "Practical 3: How to test a transistor",
          "Introduction and Testing Transistors Quiz",
          "Basics of Electronic Components",
          "Summary",
          "Reading Material"
        ],
        "Practice Test": [
          "Section Intro",
          "Electronic and Electrical Maintenance Repair - Practice Test",
          "Summary",
          "Reading Material"
        ],
        "Course Project": [
          "Section Intro",
          "Practical Troubleshooting and Maintenance of Electronic Devices",
          "Summary",
          "Reading Material",
          "Applying Maintenance and Troubleshooting Skills"
        ],
        "Course Wrap-Up": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A multimeter",
        "A breadboard, jumper wires and a battery",
        "Resistors, capacitors, LEDs, diodes, transistors, voltage regulators"
      ],
      "description": ">>> This Electronic & Electrical Devices Maintenance & Troubleshooting course is intended for those interested in learning electronics and electrical devices and board troubleshooting.  <<<\n56 Lecture | 4.5 Hour of HD Content | 2 Hour of Practical Videos | Electronic Maintenance Book | Practical Electronics and Electrical Test\n>>> Continues Updates <<<\n\n\nWhy you should take this course?\nLearn how to fix electronic devices\nLearn about electronic components\nGet a better understanding of electronics\nLearn how to design circuits\nLearn how to solder components onto a circuit board\nAble to read schematic diagrams\n\n\nWhat you will get when you join this course?\nMore than 4 Hours of Practical Videos\nAccess to Electronic and Electrical Practical Test Course | Usually price 200$\nAccess to our Best Selling Amazon Book (Basics of Electronic Components Book) and How to deal with each item| Usually price 50$\nAccess to more than 56 Lecture in Full HD\nAccess to More than 4.5 Hour of Video Content\n\n\nA comprehensive Course that helps you in learning and dealing professionally with electronic components and electronic device maintenance.\n\n\nWelcome to this course.\nTopics that we will be discussed during the Introduction to Electronic Components Course are listed here in a brief outline.\nWhat do you need to start troubleshooting\nTools needed to get the job done\nCommon electrical and electronic Components\nTroubleshooting steps\nMasure concerns and how to deal with different situations\nTesting tools and how to test different components\nThe Components of Electricity\nVolt-Ohm-Meter Basics (Measuring Electricity)\nCircuit Diagrams Basics (Electronic Roadmaps)\nThe Resistor\nOhm’s Law\nThe Capacitor\nThe Inductor\nThe Diode\nThe Transistor (Electronic Valves)\n\n\n\n\nWhat students are saying about our previous Electronic Component Course:\nAndré stenberg says, \"This is a nice introduction course to those who would like to learn the basics of electronics.\"\nMike Mackley says, \"It's covering the topic and establishing the basics very well.\"\nSunil Thakur says, \"Great course for beginning in electronics, especially enjoyed the water analogy part to make learning easier.\"\nQays Qaysaneah says, \"Clear and Simple, and that is so nice :)\"",
      "target_audience": [
        "Anyone with a need to brush up their knowledge of basic electronics"
      ]
    },
    {
      "title": "Raspberry Pi Bootcamp : For the Beginner",
      "url": "https://www.udemy.com/course/pi-bootcamp/",
      "bio": "Learn about the Raspberry Pi, build a DIY Google Home Clone, RetroPie Gaming System, work with GPIO pins and much more..",
      "objectives": [
        "Become familiar with Raspberry Pi",
        "Learn how to easily prepare SD cards for any Raspberry Pi Operating System",
        "Build a Digital Assistant using the Google Assistant API and Raspberry Pi",
        "Build a Gaming System with Raspberry Pi",
        "Understand how to work with GPIO pins and external peripherals",
        "Install and configure a Web Server",
        "Learn how to control circuits and peripherals over the internet via a web page"
      ],
      "course_content": {
        "Introduction": [
          "Intro Video",
          "What is a Raspberry Pi?",
          "Overview of the Raspberry Pi 4",
          "Hardware needed for the course"
        ],
        "Setting up your Raspberry Pi": [
          "Understanding SD Cards",
          "Download and install Etcher",
          "UPDATE : Download and Install the Raspberry Pi Imager for Flashing your SD Card",
          "Downloading Raspbian",
          "Flashing our SD Card with Etcher",
          "UPDATE : Using the Raspberry Pi Imager to install Raspberry Pi OS",
          "Connecting the components"
        ],
        "Raspbian setup and configuration": [
          "First Boot Up",
          "Connecting to a network and configuring preferences",
          "Getting familiar with Raspbian"
        ],
        "Connecting remotely to your Raspberry Pi": [
          "Understanding how remote connections can occur",
          "Secure Shell (SSH)",
          "Virtual Network Computing (VNC)"
        ],
        "Using GPIO (General Purpose Input Output) pins": [
          "Introduction to GPIO pins",
          "Powering an LED from your GPIO pins"
        ],
        "Programmatically controlling GPIO pins": [
          "Wiring change in our circuit",
          "Getting the project resources",
          "Running the program to turn our LED on",
          "Running the program to blink our LED"
        ],
        "Installing a Web Server": [
          "Install and setup Apache",
          "Install and setup PHP"
        ],
        "Controlling Circuits from a Web Page": [
          "Giving the Apache user advanced privileges",
          "Turning our LED on from a Web Page",
          "Python / PHP code review for LED on/off control",
          "Blinking our LED from Web Page Controls",
          "Python / PHP code review for LED blink control"
        ],
        "Set up your own Gaming System using the Raspberry Pi": [
          "Introduction to RetroPie",
          "Components needed",
          "Downloading RetroPie and Flashing our SD Card",
          "Setup Components",
          "Setting up the Gamepad or Controller",
          "Configuring RetroPie",
          "Understanding the process of getting ROMS and how they need to be setup",
          "Preparing and Installing ROMs",
          "Play Games!"
        ],
        "Creating a Google Home Clone": [
          "Hardware components that will be needed",
          "What you should know about preparing our SD card for the project",
          "Preparing our SD card",
          "Connecting our components",
          "Software configuration",
          "Doing the audio and microphone check",
          "Troubleshooting Audio Issues",
          "Setup in the Google Cloud Console",
          "Saving Credentials to the Raspberry Pi",
          "Connecting our push button switch",
          "Try it out! Ask it anything!"
        ]
      },
      "requirements": [
        "No previous programming or electronics knowledge required",
        "Everything is taught from scratch!",
        "Raspberry Pi 3",
        "USB mouse",
        "USB keyboard",
        "HDMI cable",
        "Power Adapter for Raspberry Pi",
        "Micro SD card"
      ],
      "description": "This course is an introduction to the Raspberry Pi platform. It uses the latest Raspberry Pi 4. It is catered for all levels and those interested in learning about the Raspberry Pi and its capabilities.\nIt is a step by step course to help you get your Raspberry Pi up and running, show how to build circuits that connect to the Raspberry Pi and build applications like a RetroPie gaming system and Google Assistant Personal Device!\nAll code, presentations, documentation and links are provided for learners.\nAfter completing this course:\nYou will understand all the components needed to get your Raspberry Pi up and running and how to connect them\nYou will learn how to easily prepare an SD card and flash it for any Operating System for the Pi\nYou will learn to work with GPIO (General Purpose Input Output) pins and how to programmatically control them with Python\nYou will be able to build simple circuits with an LED and interface them to GPIO pins\nYou will build a fully functioning gaming system with RetroPie to play old Nintendo, Sega, PlayStation games and games from many other older consoles..\nYou will build a Personal Digital Assistant or Google Home Clone using the Google Assistant API complete with robust speech recognition\nYou will learn about the different types of Raspberry Pi models\nYou will learn the difference between Arduino and Raspberry Pi and when you should use one over the other\nLots more bonus content is included and new content will be added over time\nNo previous knowledge is required. All principles taught from scratch! The best and easiest way to get up to speed and become extremely familiar with the Raspberry Pi Platform.\nDon't just take my word for it, here are what some past students are saying about the course:\nA great way to get started in the Raspberry PI world for a novice like myself. Lee explains step by step what is needed to accomplish the task and why it is necessary. Just a great way to get your feet wet. ~ Anthony Inniss\n\nGood examples and easy to understand ~ Brad Egebart\nJust exactly the intro to Raspberry Pi I was looking for! Great instructor and excellent course. - Adam Mueller\n\nThe instructor is very easy to understand unlike many other courses. All steps are included and there isnt a lot of repeated information. Getting a gaming system going was worth the price of everything.~ Dan Viste",
      "target_audience": [
        "Anyone interested in learning about Raspberry Pi",
        "Student",
        "Electronics Hobbyist",
        "Maker"
      ]
    },
    {
      "title": "FPGA Embedded Design, Part 3 - EDA Tools",
      "url": "https://www.udemy.com/course/fpga-embedded-design-eda-tools/",
      "bio": "Learn FPGA embedded application design with four different tools.",
      "objectives": [
        "Apply your Verilog knowledge to real applications with FPGAs.",
        "Vivado Studio, by Xilinx",
        "Quartus Prime, by Intel",
        "EDA Playground, by Doulos",
        "LabsLand, a remote lab platform"
      ],
      "course_content": {
        "Introduction": [
          "Course Structure",
          "Instructor Introduction",
          "Motivation 1",
          "Motivation 2"
        ],
        "Electronic Design Automation Tools": [
          "EDA Tools",
          "What's EDA?",
          "Examples of EDA Tools",
          "Typical Features of EDA Tools",
          "Schematic Capture",
          "Simulation",
          "PCB Design",
          "Software Development"
        ],
        "EDA Tools for FPGA Development": [
          "EDA Tools for FPGA Development",
          "The Usual User Steps",
          "Create a Project",
          "Write your Code",
          "Pin Assignment",
          "The Usual Compiler Steps",
          "Timing Analysis",
          "Generating a Programming File",
          "Downloading your Design into an FPGA"
        ],
        "Quartus Prime, by Intel": [
          "Quartus Prime, by Intel",
          "About Quartus and Intel",
          "An Extensive Example of Quartus Prime",
          "Setup: Downloading Quartus",
          "Setup: Installing Quartus",
          "Where Everything Is - Project Navigator",
          "Where Everything Is - Tasks",
          "Where Everything Is - IP Catalog",
          "Setup for Implementation",
          "Hello World - Create a Project",
          "Hello World - Top Module Source File",
          "Hello World - Implementation",
          "Hello World - Programming the FPGA"
        ],
        "EDA Playground, by Doulos": [
          "EDA Playground, by Doulos",
          "About EDA Playground and Doulos",
          "Setup",
          "EDA Playground Setup",
          "Walkthrough: Code Entry",
          "Walkthrough: Left Toolbar",
          "Walkthrough: Other Tools",
          "Demo: Code Example",
          "Demo: Simulation Dump System Tasks",
          "Demo: Simulation Control System Tasks"
        ],
        "Vivado Design Suite, by Xilinx": [
          "Vivado Design Suite, by Xilinx",
          "About Vivado Design Suite and Xilinx",
          "Setup: Downloading Vivado",
          "Setup: The Vivado Installation Wizard",
          "Creating a Project",
          "Walkthrough: Flow Navigator",
          "Walkthrough: Project Manager",
          "Walkthrough: IP Catalog",
          "Walkthrough: Source Files",
          "Walkthrough: Console Output and Messages",
          "Walkthrough: Simulation",
          "Walkthrough: Pin Assignment",
          "Walkthrough: Top Module Code",
          "Walkthrough: Bitstream File Generation",
          "Walkthrough: The Hardware Manager"
        ],
        "LabsLand": [
          "LabsLand",
          "About LabsLand",
          "Walkthrough",
          "FPGA Lab",
          "Verilog IDE Demo: Pin Assignment",
          "Verilog IDE Demo: Adder Code",
          "Verilog IDE Demo: Adder Live Demo",
          "Verilog IDE Demo: Multiplier Live Demo",
          "Recompiling",
          "Uploading Demos"
        ],
        "Wrap Up": [
          "Think of all the things we learned!",
          "What's Next",
          "Farewell",
          "Just for fun",
          "Bonus Lecture: LabsLand and more from Closure Labs!"
        ]
      },
      "requirements": [
        "This course is part of the FPGA Embedded Design series, by Closure Laboratories",
        "Basic knowledge of Hardware Description languages like Verilog or VHDL is expected. Consider taking our course FPGA Embedded Design, Part 1: Verilog",
        "Basic FPGA design. Consider taking our course FPGA Embedded Design, Part 2: Basic FPGA Training"
      ],
      "description": "It's time to learn more about FPGA IDEs!\nIn this third part of the FPGA Embedded Design series, we'll get our hands on four different EDA Tools to bring our designs to life.\nWe'll use four different development tools, and you may follow along with either of them. You may also use an FPGA development board to get the most out of your IDE. We recommend wither  the DE0-CV, with a Cyclone V FPGA from Altera/Intel, or the BASYS3, with an Artix7 FPGA from Xilinx.\nThis course consists of two main parts:\nEDA Tools overview, where we'll cover what EDA Tools are, several examples of commercial and non-commercial tools available.\nHands-On Training, where we'll give you a walkthrough of each of the following tools: Quartus Prime (by Intel), EDA Playground (by Doulos), Vivado Design Suite (by Xilinx), and LabsLand (a remote Lab tool).\nWhat are you waiting for? Let's have some fun!!!",
      "target_audience": [
        "Developers curious about FPGA Design.",
        "Embedded Engineers who want to learn about FPGAs.",
        "This course is not for experienced embedded engineers specialized in FPGAs."
      ]
    },
    {
      "title": "USB Behind the Scenes: Hands-on HID Firmware Development",
      "url": "https://www.udemy.com/course/usb-behind-the-scenes-hands-on-hid-firmware-development/",
      "bio": "The #1 video course that explains programming bare-metal firmware for USB human interface devices (HID) step by step.",
      "objectives": [
        "Write a bare-metal firmware for USB 2.0 human interface devices (HID) without using any third-party libraries or code generators.",
        "Implement USB device driver and USB 2.0 protocol framework.",
        "Program a fully functional USB mouse from zero.",
        "Understand the generic USB descriptors and the descriptors specific to human interface device (HID) class.",
        "Deal with native USB (WITHOUT any conversion to UART)",
        "Use ARM Cortex-M4 based microcontroller (STM32F4xx), one of the most developed and famous MCU in the world.",
        "Debug USB communication using Wireshark and Linux SysLog.",
        "Read different parts of ARM Cortex-M4 reference manual and extract the important information efficiently.",
        "Understanding how USB 2.0 protocol works in full speed mode.",
        "Understand USB endpoints, pipes, transfer types, packets, transactions, frames, power supply, topology, and many more.",
        "Learn the basic mechanical and electrical specifications of the USB (connectors, cables, speed enumeration resistors, and many more).",
        "Know the history and motivation behind developing the universal serial bus (USB).",
        "Learn using Single Wire Output (SWO) to send logs to the debugging host.",
        "Increase your productivity and code portability by using ARM CMSIS.",
        "Document your code using Doxygen syntax."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of C programming language (recommended).",
        "Basic knowledge of designing embedded systems.",
        "Any STM32F4 Microcontroller (ARM Coretx-M4 based) on Discovery or Nucleo board to apply the knowledge."
      ],
      "description": "Have you ever wanted to develop your own device that can be connected to a computer using USB? Are you familiar with using USB <-> UART adapters but want to take your USB knowledge and understanding to the next ultimate level? If yes, then this course is absolutely for you!\nI made the whole content of slides and code by myself after a lot of preparation and fine-tuning to give you the best experience you can find today online to learn and understand USB protocol and framework in theory and in practice.\nYour journey with me in this course should save you from any frustration that could happen when you try to learn or understand USB from any other online source. USB is for most a mystery and a very complex protocol, and most engineers try to avoid it or at least try to convert it to other simpler protocols. However, after taking this course, you will be able to be a confident native USB engineer, and you will be able to develop your first bare-metal USB device with me without using any library, which will give you full control over the powers of USB. Even if you want in your career to use a USB library, taking this course will give you a full understanding of what is going on behind the scenes, and will allow you to be able to develop and fine-tune and USB device you want, because, after the end of this course, I would expect from you to have a full understanding of the concept of USB and how it works.\nIn this course, we will:\n- Start with some theoretical information about USB.\n- Understand the essential details of USB protocol.\n- Take our time to understand how to configure the clock of any embedded system correctly.\n- Implement a bare-metal USB firmware for ARM Cortex M4 based microcontroller (STM32F4xx family).\n- Implement a bare-metal USB framework.\n- Develop our own USB HID mouse from zero to fully functional!\nOf course, the source code of the project we are going to develop together in this course will be available for you to download. You may use it as a template (fully or partially) for your projects in the future.\nThis course is in its early stages and some new additional content will be added or enhanced if necessary frequently. Nevertheless, the current content is full and sufficient to get a fully functional USB human interface device.\nHappy engineering! See you inside the course!",
      "target_audience": [
        "Anyone who wants to understand how the complex USB systems work behind the scenes.",
        "Embedded engineers who want to develop USB devices.",
        "Engineers who want to enrich their knowledge in embedded systems in general.",
        "Engineers who want to write modular and maintainable firmware."
      ]
    },
    {
      "title": "PLC Programming Basics to Advanced Siemens S7-1200",
      "url": "https://www.udemy.com/course/introduction-to-automation-tutorialbay/",
      "bio": "The ultimate PLC training experience to learn PLC automation.",
      "objectives": [
        "Start programming in ladder logic",
        "Understand basic PLC simulations using SIEMENS LOGO! training KIT",
        "Uderstand S7‐1200 PLC and TiA Portal software available CPU’s, extension modules, Tia software, comparison with S7‐300 and STEP 5)"
      ],
      "course_content": {},
      "requirements": [
        "Download software for programming LOGO PLC",
        "You should be familliar with basic computer knowledge"
      ],
      "description": "Mepi presents PLC Course the ultimate PLC training experience to learn PLC programming. Our video tutorials will bring you right into the world of PLC explaining what you need to know to understand the fundamentals. This PLC course is a step-by-step introduction to controllers, built on a everyday experience of a practicing automation experts!\nSo What is a PLC?\n\nA programmable logic controller, also called a PLC or programmable controller, is a computer-type device used to control equipment in an industrial facility. The kinds of equipment that PLCs can control are as varied as industrial facilities themselves. Conveyor systems, food processing machinery, auto assembly lines…you name it and there’s probably a PLC out there controlling it.\nWhat is this PLC Course about?\n\nThis innovative PLC online training, is addressed to all automation enthusiasts. The tutorial is based on Siemen's LOGO! 12/24 RC and Siemens S7-1200. If you are thinking about working in automation industry, you have to deal with PLCs. If you work or study, and wondering if- and how - to start your adventure with PLC, see our course! All over the world, the continuing development of industrial automation makes PLC training a good investment.\nWhat does this course teach?\nProvides you a complete introduction to understanting PLC logic and career building skills needed for this industry. Creating your first projects will teach you solving real world problems in practical projects you may encounter when working with PLC's.\n\n\nWhat will I learn in this course?\n\nFirst programs – basic instructions and challenges filmed using Siemens LOGO Training kit for visualization\nHow to assemble a PLC device\nWhat are the uses of programmable controllers in industry and building automation\nHow to write programs in LOGO! Soft Comfort\nFunctions used in programming\nFundamentals of ladder logic\nHow to work with analog inputs and timers\nMore Advanced topics for S7-1200\nFamiliarize with S7‐1200 PLC and TiA Portal software (available CPU’s,\nextension modules, Tia software, comparison with S7‐300 and STEP 5)\nEasy start with TiA (description of main parts of the screen – project tree,\ninstructions, program view)\nParameterization of PLC (hardware parameters, create hardware set in\nsoftware)\nHardware parameterization part 1 (I/O, PROFINET‐interface, online\ndiagnostics, time‐settings)\nHardware parameterization part 2 (memory bytes, generators, protection,\nweb‐server)\nWatch and force table\nWriting your first programs – basic instructions and challenges\nIntroduction - LADDER, FBD, SCL– definitions and history\nOrganization of memory in PLC\nOB,FB,DB,FC – how to use\nCopy input signals to outputs (open coil)\nSwitching output on each pulse of input signal (P/N-slopes)\nActivation hardware generators – special memory\nProgram for turn signal on basis of system in cars (S/R coils)\nOperations on variables\n\nIintroduction to variables (int,dint,real -> byte, word, dword)\n\nCounters\nCTU\nCTUD\nProgram which use counters (parking) cars (S/R coils)\nTimers and other usefull operations! The list goes on please take a look at the Curriculum of this course.\nAutors of This is PLC Course Compilation are:\nSzymon Kurpisz raduate of Poznan University of Technology at the Faculty of Mechanical Engeeniring and Management.\n\n\nJakub Chmielewski by is a graduate od Wroclaw University of Technology and Otto von Guericke University\n\n\nFrom the Autors:\n\"We have a few years' experience working with various programming systems used in industrial automation, from PLC to visualization systems (SCADA)... It was our intention to do this course based on practical examples, and to relate it to what I see in my work. It means introducing a measure of problem-solving to the tutorials, along with the knowledge you'll need to write the programs we will work on. We hope my course will be a good introduction to the fascinating world of logical controllers...\"\n\n\nNew career opportunities learning PLC Industrial Automation and Control\nPLC devices have been present on the market for over 40 years. The need for automation propels their continuing popularity and development. PLCs are used in various industries but also in building automation. Their big advatage is that they promote green solutions.  All over the world, the continuing development of industrial automation makes PLC programming skills increasingly sought by potential employers. Want to take your career to the next level? Go ahead see for yourself and get going with this exciting course",
      "target_audience": [
        "This PLC course is meant for new users who are not familliar with PLC programming. Non prior programming knolwledge is needed. This course is probably not for you if you're looking to learn more advanced and complex queries"
      ]
    },
    {
      "title": "Verilog HDL: VLSI Hardware Design Comprehensive Masterclass",
      "url": "https://www.udemy.com/course/verilog-hdl-vlsi-hardware-design-comprehensive-masterclass/",
      "bio": "From an expert with 15+ years experience. Core Design principles for VLSI, Soc, Processor and FPGA. VHDL alternative.",
      "objectives": [
        "Unlimited instructor support !",
        "Application Specific Integrated Circuit (ASIC) design flow and its related fundamentals",
        "Learn more than enough to start designing real life circuits using HDL",
        "Have a clear understanding of how to and how not to write a piece of HDL code",
        "The close relationship between hardware and code",
        "From basics to key principles for design engineers",
        "A detailed discussion on every bit of code and hardware"
      ],
      "course_content": {},
      "requirements": [
        "Mandatory: A passion to learn and practice regularly and systematically",
        "Basics of Digital Logic Design",
        "Fundamentals of VLSI",
        "Optional: Any coding experience shall help although not necessary",
        "Computer architecture"
      ],
      "description": "A job oriented exhaustive course on logic design for hardware using the Verilog Hardware Description Language.\nUnique, tested and proven structured style and approach followed.\nThoughtful blend of theory and practice for your learning.\nUnlimited support with the instructor.\nUnderstand all the intricate details in thinking and understanding hardware design.\nPrinciples are reinforced with multiple examples.\nGood coding guidelines and bad examples to avoid.\nAfter completing the course, you can confidently write synthesizable code for complex hardware design.\nThorough discussion of every hardware component design.\nDetailed explanation of the relationship between code and digital hardware units.\nFreely download 100+ code examples and test benches used in the course.\nAccess to all the materials and the future upgrades.\nLoads to quizzes and assignments to check your understanding.\nWork through the lessons at your own pace.",
      "target_audience": [
        "A beginner or an intermediate - eager to grasp and understand Hardware Design concepts with HDL",
        "Anyone aspiring to build a career in VLSI Circuit Design",
        "If you are in the industry and would like to sharpen your skills and clarify your understanding"
      ]
    },
    {
      "title": "Learn Circuits with Tinkercad: Arduino based Robots Design",
      "url": "https://www.udemy.com/course/learn-circuits-with-tinkercad/",
      "bio": "Tinkercad based Circuits and Robots design from beginners to expert level.",
      "objectives": [
        "Robotics and circuit related design using Arduino on Tinkercad platform",
        "30 plus hands on projects using Simulations on Tinkercad",
        "Understand Arduino operation and how to integrate external sensors to the board.",
        "Scratch programming for logical control of the robot.",
        "Simulations using Tinkercad to build a robot."
      ],
      "course_content": {},
      "requirements": [
        "Enthusiastic mind to learn robotics and circuit design",
        "Basic knowledge of voltages and current flow",
        "Logical thinking mind"
      ],
      "description": "The course “Learn Circuits with Tinkercad: Arduino based Robots Design” is designed for beginner level tech enthusiasts who want to dive into the field of robot and circuit design using Arduino. The course will teach about getting started with the Tinkercad platform and how to simulate Arduino based circuits using this platform.\n\n\nCourse content:\n1. Introduction to Arduino and Robotics.\n2. Basic circuit connections: Controlling LEDs and DC motors.\n3. Understand the switches, pushbuttons, and battery connections.\n4. Control multiple motors with Arduino using scratch programming.\n5. Connect the IR sensor and photo-resistor to make an obstacle avoider robot.\n6. Use the Ultrasonic sensor to make a robot and home security system.\n7. Use servo motors to make robotics Arms.\n8. Simple project discussion using the integration of multiple sensors.",
      "target_audience": [
        "School students of grade 5 and above or university students who want to dive into hobby robotics",
        "Beginners and intermediate learners in the field of Robotics."
      ]
    },
    {
      "title": "RFIC Design Software Advanced Design System (ADS)RAHRF209L",
      "url": "https://www.udemy.com/course/rfic-software-keysight-advanced-design-system-adsrahrf209l-rf-sofrware/",
      "bio": "Become a hand on Radio Frequency Integrated Circuit Engineer expert by mastering simulation with ADS Keysight / Agilent",
      "objectives": [
        "After completion the student will have practical hand on knowledge on basics of ADS",
        "Will able to perform different matching characterization and optimizations",
        "Will be able to do simulation and analyze a design"
      ],
      "course_content": {
        "Introduction": [
          "logo",
          "Before we start",
          "4.1.1.1. How to start new workspace in ADS Environment.",
          "4.1.1.2. How to add course file to your workspace.",
          "4.1.1.3. Process design Kit (PDK) of CMOS 180nm"
        ],
        "Simulation": [
          "4.2.1.1. Simulations using ADS : DC Simulations",
          "4.2.1.2. Simulations using ADS : Transistor DC simulation",
          "4.2.2.1 - Simulations using ADS: AC simulation",
          "4.2.2.2. Simulations using ADS:AC Simulation Of RLC circuit",
          "4.2.2.3. Simulations using ADS :AC Simulation of Transistor",
          "4.2.2.4. Simulations using ADS :Transistor fT using AC simulation",
          "4.2.3.1. Simulation using ADS :Transient simulation",
          "4.2.3.2. Simulations using ADS :Transient Simulation for given Transistor",
          "4.2.4.1.Simulations using ADS :S-Parameter Simulation",
          "4.2.4.2.Simulation using ADS : S-Parameter Simulation(Matched circuit)",
          "4.2.4.3.Simulation using ADS : S-Parameter Simulation and obtain Nfmin,Max-Gain",
          "4.2.4.4. Simulations using ADS: Real Inductor",
          "4.2.5.1.Simulations using ADS :How to make symbol?",
          "4.2.5.2. Simulations using ADS : S-Parameter for Amplifier",
          "4.2.6.1. Simulations using ADS : Harmonic Balance Simulation",
          "4.2.6.2. Simulations using ADS : Harmonic Balance Simulation maximum power",
          "4.2.6.3. Simulations using ADS : Harmonic Balance Simulation by introducing Powe",
          "4.2.6.4.Simulations using ADS : Harmonic Balance Simulation by introducing Power",
          "4.2.7.1.Simulations using ADS :LNA simulation -S-parameter and power",
          "4.2.7.2.Simulations using ADS :LNA simulation and XDB simulation",
          "4.2.7.3. Simulations using ADS :LNA Simulation IIP3"
        ],
        "MATCHING USING ADS": [
          "4.3.1.1. Impedance matching Single Frequency Simulation in ADS",
          "4.3.1.2. Matching using ADS: Impedance Matching of Wideband",
          "4.3.1.3. Impedance Matching using ADS :Smith Chart tool",
          "4.3.1.4 Impedance Matching : Transmission Line"
        ],
        "ADS OPTIMIZER": [
          "4.4.1.1. ADS Optimizer:Simple optimization for DC simulation"
        ],
        "EM Simulations": [
          "4.5.1.1 EM Simulation for simple inductor",
          "4.5.1.2 Inductor Simulation",
          "4.5.1.3 Making a Spiral Inductor",
          "4.5.1.4 Simulation of Spiral Inductor"
        ]
      },
      "requirements": [
        "ADS Software from Keysight (instruction for how to get 1 month free trial provided)",
        "RAHRF101 or similar to curriculum knowledge",
        "RAHRF201 or similar to curriculum knowledge",
        "RAHRF200  or similar to curriculum knowledge",
        "in this course we will teach you the basics on how to simulate . Fundamental knowledge behind what we are simulating is provided in above three courses"
      ],
      "description": "Please make sure you take RAHRF101 and RAHRF201 or go through the curriculum of the courses and make sure you have a complete knowledge of the topics prior to taking this course.\nBecome an ADS expert and start your path on becoming an RFIC expert by taking the Advanced Design System online course. In the ADS online course, within four weeks by downloading the free one month ads software and using the examples and pdks provided in this course you would be able to practice practical RFIC simulations and master skills needed for becoming and RF Design Engineer. Using this ADS tutorial you will become an expert and be able to start analyzing designs. Although RAHRF101 is a pre-requisite and we recommend students enrolling in RAHRF101 and RAHRF201 prior to taking the RAHRF209-L, if students have the prior knowledge or experience needed they would be able to enroll in this course.\nCourse Restriction\nUnfortunately due to software licensing policies and the contract with Keysight, for ADS specific courses students from specific countries are not allowed to take this course.\nCurriculum For This Course\nGetting Started With ADS\n4.1.1.1. How to start new workspace in ADS Environment.\n4.1.1.2. How to add course file to your workspace.\n4.1.1.3. Process design Kit (PDK) of CMOS 180nm\nSIMULATION19/19\n4.2.1.1. Simulations using ADS : DC Simulations\n4.2.1.2. Simulations using ADS : Transistor DC simulation\n4.2.2.2. Simulations using ADS:AC Simulation Of RLC circuit\n4.2.2.3. Simulations using ADS :AC Simulation of Transistor\n4.2.2.4. Simulations using ADS :Transistor fT using AC simulation\n4.2.3.1. Simulation using ADS :Transient simulation\n4.2.3.2. Simulations using ADS :Transient Simulation for given Transistor\n4.2.4.1.Simulations using ADS :S-Parameter Simulation\n4.2.4.2.Simulation using ADS : S-Parameter Simulation(Matched circuit)\n4.2.4.3.Simulation using ADS : S-Parameter Simulation and obtain Nfmin,Max-Gain and Stability for an amplifier.\n4.2.4.4. Simulations using ADS: Real Inductor\n4.2.5.1.Simulations using ADS :How to make symbol?\n4.2.5.2. Simulations using ADS : S-Parameter for Amplifier\n4.2.6.1. Simulations using ADS : Harmonic Balance Simulation\n4.2.6.2. Simulations using ADS : Harmonic Balance Simulation maximum power\n4.2.6.3. Simulations using ADS : Harmonic Balance Simulation by introducing Power source\n4.2.6.4.Simulations using ADS : Harmonic Balance Simulation by introducing Power with Matching circuit\n4.2.7.1.Simulations using ADS :LNA simulation -S-parameter and power\n4.2.7.2.Simulations using ADS :LNA simulation and XDB simulation\nMATCHING USING ADS2/2\n4.3.1.2. Matching using ADS: Impedance Matching of Wideband\n4.3.1.3. Impedance Matching using ADS :Smith Chart tool\nADS OPTIMIZER1/1\n4.4.1.1. ADS Optimizer:Simple optimization for DC simulation",
      "target_audience": [
        "RFIC Engineers",
        "Students wanting to join RFIC industry",
        "People who want to learn tools for IC characterization and optimization",
        "RF Design Engineers",
        "Graduate Students in the RF field",
        "Radio Frequency Integrated Circuit Engineer",
        "RF Microwave Design Engineering Student"
      ]
    },
    {
      "title": "Autodesk Eagle : PCB & Hardware Design for Beginners",
      "url": "https://www.udemy.com/course/autodesk-eagle-pcb-hardware-design-for-beginners/",
      "bio": "Arduino compatible Electronics Circuit Design & Eagle PCB Design course using Atmega328p Microcontroller for Beginners",
      "objectives": [
        "Practical aspects of electronics components - Resistor, Capacitor, Potentiometer",
        "How to use Autodesk Eagle software",
        "Hardware Design, Circuit Design, Schematic Design, PCB Design",
        "PCB ordering process",
        "Components ordering process",
        "Bill Of Material, Gerber Data generation",
        "Hardware Testing & Troubleshooting / Board Bring Up"
      ],
      "course_content": {
        "Note & Information": [
          "About Instructor",
          "Warning",
          "About Courses",
          "Important Message",
          "Course Curriculum & Material",
          "Ratings & Review",
          "How to ask questions"
        ],
        "Module 1 : Topic 1 - Introduction to Electronics Components": [
          "Introduction to Topic",
          "What is PCB?",
          "Introduction to Resistors - Part 1",
          "Introduction to Resistors - Part 2",
          "Introduction to Resistors - Part 3",
          "Introduction to Resistors - Part 4",
          "Introduction to Potentiometer - Part 1",
          "Introduction to Potentiometer - Part 2",
          "Introduction to Capacitors - Part 1",
          "Introduction to Capacitors - Part 2",
          "Introduction to Capacitors - Part 3",
          "Introduction to Capacitors - Part 4",
          "Introduction to Capacitors - Part 5",
          "Introduction to Capacitors - Part 6"
        ],
        "Module 1 : Topic 2 - Introduction to training Hardware & development process": [
          "Introduction to Topic",
          "Hardware development process - Part 1",
          "Hardware development process - Part 2",
          "Hardware block diagram",
          "Hardware Overview",
          "Introduction to hardware"
        ],
        "Module 2 : Topic 1 - Download and Install Autodesk Eagle": [
          "Introduction to Topic",
          "Introduction to Eagle software: Download",
          "Introduction to Eagle software : Installation"
        ],
        "Module 2 : Topic 2 - Introduction to schematic editor": [
          "Introduction to Topic",
          "Introduction to Eagle control Panel",
          "Introduction to schematic editor - Part 1",
          "Introduction to schematic editor - Part 2",
          "Introduction to schematic editor - Part 3",
          "Introduction to schematic editor - Part 4",
          "Introduction to schematic editor - Part 5",
          "Introduction to schematic editor - Part 6"
        ],
        "Module 2 : Topic 3 - Introduction to layout editor": [
          "Introduction to Topic",
          "Introduction to layout editor - Part 1",
          "Introduction to layout editor - Part 2",
          "Introduction to layout editor - Part 3",
          "Introduction to layout editor - Part 4"
        ],
        "Module 2 : Topic 4 - Introduction to libraries in Eagle": [
          "Introduction to topic",
          "Introduction to library creation process - Part 1",
          "Introduction to library creation process - Part 2",
          "Introduction to popular eagle library websites",
          "Introduction to library installation process",
          "Introduction to library modification process"
        ],
        "Module 2 : Topic 5 - Introduction to Eagle features": [
          "Introduction to topic",
          "Introduction to Eagle feature : Backup",
          "Introduction to Eagle feature : Back Annotation"
        ],
        "Module 3 : Topic 1 - Power Supply Unit (PSU)": [
          "Introduction to PSU topic",
          "System power budget calculation",
          "Introduction to power supply IC",
          "Understanding circuit of PSU : Part-1",
          "Understanding circuit of PSU : Part-2",
          "Understanding circuit of PSU : Part-3",
          "Schematic design of PSU"
        ],
        "Module 3 : Topic 2 - Microcontroller": [
          "Introduction to microcontroller Topic",
          "Introduction to microcontroller : Part-1 : MCU overview",
          "Introduction to microcontroller : Part-2 : Understanding Pin map",
          "Introduction to microcontroller : Part-3 : Pin Map comparison with Arduino",
          "Understanding circuit of microcontroller part-1",
          "Understanding circuit of microcontroller part-2",
          "Schematic design of microcontroller"
        ]
      },
      "requirements": [
        "Basic Electronics Knowledge (Not Mandatory)",
        "Motivated to learn electronics"
      ],
      "description": "Training Overview\nLearn how to design PCB from scratch.\nCovers the end-to-end hardware development process, with a step by step approach.\nUses Eagle software for PCB designing & Arduino IDE for programming the hardware.\n\n\nDescriptions\nThis training will arm you with knowledge required to design your own PCBs from scratch. Every single step along the way has been thoroughly covered.\nWe will be building a custom Arduino UNO board from scratch, which can be programmed using the Arduino IDE. The training also covers some essential circuits (viz RGB LED, switches, preset, motor drivers, seven segment displays), and their interfacing with the microcontroller on the custom Arduino that we are building. You will find yourself using these circuits in a lot of future projects/products.\nAll in all, this training covers the end-to-end hardware development process. After completing the training, you will be confident in designing your own hardware.\n\n\nKey Skills you will learn\nCircuit Design\nPCB Design\nHardware testing\nTroubleshooting hardware issues\n\n\nWho is this training for\nBeginners, hobbyists & students getting started in embedded designing.\nPeople building hardware for their engineering project.\nPeople collecting knowledge to grab an internship or job in the embedded field.\nYou have any of the following questions:\na. How to convert an idea to a finished PCB?\nb. What is the workflow for designing hardware?\nc. How to approach schematic & layout designing?\nd. How to read the components datasheet?\ne. Where to order the PCB?\nf. Where to get the components?\ng. How are components soldered?\nh. How to test & troubleshoot the circuit?\n\n\nWhat will you learn\nPCB Designing using eagle software\nAtmega328P Microcontroller based system design (microcontroller used in Arduino Uno)\nPower supply system design\nCircuit design for LED, RGB LED, Switch, Preset, Motor Driver, Seven segment Display.\nPurpose of every single component used & how to select them.\nHow to read components datasheet\nPCB ordering process\nComponents sourcing\nComponents soldering\nHardware Testing & troubleshoot techniques\n\n\nWhy should you take this training\nHigh industry demand : PCB design is one of the key skills required to work as a hardware design engineer in electronics product companies like Qualcomm, Texas Instruments, Microchip etc.\nIt's everywhere in your life : Whether it's smart watches, smart phones, IOT devices or electric vehicles, PCBs are everywhere. If designing a system based on a microcontroller & microprocessor excites you, then PCB design is for you.\nHigh scope : The total installed base of IOT devices worldwide is projected to be around 30 billion units by 2025. Due to the surge in products being developed, the demand for PCB design engineers is increasing day by day.",
      "target_audience": [
        "Beginner, Hobbyist & Professionals who want to learn hardware design & PCB Design",
        "Those who want to get started with hardware design process from scratch",
        "Those who are good in software and want to understand hardware"
      ]
    },
    {
      "title": "PCB Design Crash Course: Footprint, 3D model & Board Design.",
      "url": "https://www.udemy.com/course/pcb-design-crash-course-3d-package-board-design-approach/",
      "bio": "Accelerated PCB Design Crash Course: A 3D Footprints & Board Design Approach for Efficient Circuitry for Beginners",
      "objectives": [
        "Printed Circuit Board Layout Design",
        "Circuit Design and Analysis",
        "Basic Electronics",
        "Electronic components and instruments",
        "Board Design and Fabrication",
        "Schematic design: Entry to expert level",
        "Footprint creation: All packages including 3D modelling",
        "Board Design: Single sided, Double sided and multilayer",
        "Constraint manager settings",
        "Double sided Board Design",
        "Multilayer Board Design",
        "Via management",
        "Via creation and application",
        "Blind via, Berried via and Through hole via",
        "Deign Rules Checking (DRC Errors)",
        "Gerber creation",
        "Gerber analysis and improvements",
        "PCB Manufacturing overview"
      ],
      "course_content": {
        "Schematic Entry": [
          "Know about the Course",
          "Introduction to Schematic Design",
          "Circuit Preparation and Error Debugging",
          "Bill Of Material (BOM) Creation"
        ],
        "Footprint Development: 2D Footprint and 3D Model Approach": [
          "Package Design: 2D Footprint Development",
          "Package Design: 3D Model Development",
          "Assignments of Footprint Development."
        ],
        "Printed Circuit Board Design": [
          "Board Shape and Net Rules Definition",
          "Placements and Routing",
          "Push to Fusion 360 (3D Output)"
        ]
      },
      "requirements": [
        "Basic Electronics knowledge",
        "Diploma (Electronics or Electrical)",
        "Bachelors in Electronics and Electrical",
        "Master degree in Electronics and Electrical",
        "Post graduate in Electronics and communication engineering",
        "BE in Electronics and Communication",
        "PCB Manufacturer",
        "Bachelor of Engineering in Electrical and Electronics",
        "BSc in Electronics",
        "MSc in Electronics",
        "MS in Electronics",
        "Post graduate in Electronics and communication"
      ],
      "description": "\"Welcome to our accelerated PCB Design Crash Course that focuses on 3D footprints and board design—an innovative approach to creating efficient circuitry. This course is tailored for beginners, offering a quick and comprehensive entry into the world of PCB design. Whether you're exploring a new hobby or looking to acquire a valuable skill, this course promises to be the ideal starting point.\n\nThe demand for PCB (Printed Circuit Board) design services in the market has been steadily increasing due to several factors:\nElectronics Industry Growth: The proliferation of electronics in various sectors such as consumer electronics, automotive, aerospace, healthcare, and IoT has led to an increased demand for PCBs.\nMiniaturization: As electronic devices become smaller and more compact, the need for intricate PCB designs to accommodate complex circuitry within limited space has risen.\nTechnology Advancements: Advancements in technology, such as the Internet of Things (IoT), 5G connectivity, and wearable devices, require innovative PCB designs to support their functionalities.\nRapid Prototyping: The trend towards rapid prototyping and shortening product development cycles necessitates efficient PCB design services to quickly iterate and test new designs.\nCustomization: Industries increasingly require customized PCBs tailored to their specific needs, which drives demand for PCB design services capable of delivering bespoke solutions.\nOutsourcing Trends: Many companies prefer to outsource their PCB design requirements to specialized service providers to leverage expertise, reduce costs, and accelerate time-to-market.\nGreen Initiatives: There's a growing emphasis on environmentally friendly PCB designs, leading to demand for designers who can develop energy-efficient and recyclable PCBs.\nWhy Our Crash Course Stands Out:\nRapid Learning: In this accelerated crash course, we skip the lengthy theoretical introductions and dive straight into the practical aspects of PCB design.\n3D PCB Design Focus: Unlike traditional courses, we emphasize the significance of 3D footprints in modern PCB design. You'll learn how to leverage this technology to optimize your circuitry efficiently.\nBeginner-Centric: This course is designed with beginners in mind, so no prior knowledge of PCB design is necessary. We start from the ground up and build your skills.\nOnline Learning at Your Pace: Experience the convenience of online education. This course accommodates your schedule, allowing you to learn at your own pace and from the comfort of your own space.\nPractical Application: We prioritize hands-on learning. Throughout the course, you'll have the opportunity to apply what you've learned in real-world projects.\nCourse Highlights:\nCrash Course Approach: This course's accelerated nature means that you can quickly grasp the essentials of PCB design without unnecessary delay.\n3D Footprints Emphasis: Discover the power of 3D footprints in PCB design, and learn to use them effectively to create more efficient circuit boards.\nHands-On Projects: Put your knowledge into practice by working on real-world projects. This practical experience ensures you acquire skills that are immediately applicable.\nBest Practices: Benefit from the instructor's industry insights and best practices, giving you a solid foundation for PCB design.\nWhy PCB Design Matters:\nPCB design plays a pivotal role in modern electronics. As technology advances, efficient and compact circuit boards become increasingly crucial. By learning PCB design, you position yourself at the forefront of technological innovation.\nEmbark on Your PCB Design Journey:\nThis crash course is your express ticket to diving headfirst into the world of PCB design. Whether you're aiming to create your own electronics projects, explore a new career path, or enhance your current skill set, this course will set you on the right track.\nEnroll Today:\nDon't miss the opportunity to access the best introductory PCB design education available online. Enroll now, and let's take the first step toward mastering 3D PCB design. Your journey to expertise in PCB design begins here!\"\n\n\nRequired eligibility:\nDiploma in Electrical or Electronics & Communication.\nBE/BTech. in Electrical or Electronics & Communication.\nBSc/MSc in Electronics & Communication.\nME/MTech. (E&CE) in Communication.\nPCB Design Course Content is given below in brief:\nSchematic Design:\nBasic Electronics theory.\nBasics of Circuit designing.\nSchematic design preparation.\nSchematic part editing and creation.\nNet list and Net class creation.\nBill Of Material generation (BOM).\nElectrical Rule Checking.\nFootprint Creation:\nThrough hole footprint creation.\nSurface Mount Device footprint creation.\nBGA/PGA footprint creation.\nBoard Designing:\nBoard size and shape creation.\nComponent placements.\nPCB Routing.\nPlane creation.\nDesign rule checking.\nGerber generation.\nSkills you gain after the course completion:\nBasic Electronics and Electronic components expertise.\nCircuit Designing (Power management circuit designing)\nCircuit Simulation for best understanding of the subject.\nTools/Software Expertise.\nBasic design module practice up to 2-Layers.\nDesign expertise:\nAssignments consists single and double sided PCB.\nAssignments consists 2-Layers.\nLibrary Module: Symbol and Footprint design for all types of packages.\nGerber generation and editing.\nBenefits of choosing PCB Design Course:\nStrong hold in basic electronics.\nCircuit Design capability.\nCircuit analysis & ERC.\nComponents knowledge.\nPower Supply designing.\nMultiple PCB-CAD tool expertise.\nExpert in library creation.\nGerber creation & editing.",
      "target_audience": [
        "Diploma in electronics",
        "Hardware designers",
        "PCB manufacturer",
        "Electronic Components engineer",
        "PCB design and developer",
        "Circuit designers",
        "Embedded engineers",
        "Beginners interested in development of PCB"
      ]
    },
    {
      "title": "Home Automation using Raspberry Pi",
      "url": "https://www.udemy.com/course/home-automation-using-raspberry-pi/",
      "bio": "Step into the whole new world of Home Automation with the cheapest and the most powerful computer, Raspberry Pi Zero",
      "objectives": [
        "Develop home automation projects using Raspberry Pi",
        "Build a simple Intruder Detection System using the world's smallest and cheapest computer, Raspberry Pi Zero.",
        "Know how to setup the PIR motion detector sensor, Buzzer and the Webcam and how to integrate them with the Raspberry Pi",
        "Send an email with an attachment of the image of the Intruder using Python Program",
        "Create a database using MySQL to store the intrusion log",
        "Setup a LAMP Web server on the Raspberry Pi and configure it to serve a dynamic web page written in PHP"
      ],
      "course_content": {},
      "requirements": [
        "You should be competent in working with Raspberry Pi",
        "You should know basic Python hardware programming",
        "You should know basic Linux shell commands",
        "You should know basic wiring of electrical and electronic components"
      ],
      "description": "This course, \"Home Automation using Raspberry Pi\" is for anyone who is interested in building some really cool Home Automation projects using Raspberry Pi. Since it is not a beginner course, the learner needs to have a basic knowledge of Raspberry Pi, Linux commands and basic Python Programming.\nIn this course, the learner will learn how to build an Intruder Detection System. Whenever there is any intrusion at home or office, it is detected using PIR motion detector sensor, an alarm is produced using a buzzer, an image of the intruder is captured, and an email containing the attachment of the image is sent to the user. A database containing the date, time, and image of the intruder is created and served over a web page using Raspberry Pi as a web server so that the user can access the web page to view the log of all the intrusions that have taken place over time.\nThe complete system is subdivided into individual sections and explained with the utmost detail so that it is easy to understand. It also explains the possible applications for such a system and how the learner can customize for his/her home or office. Complete Python source code and PHP code are also included so that the learner can easily replicate the system.\nAfter completing this course, the learner will know how Raspberry Pi helps us in building home automation stuffs, developed on the core idea of \"Internet of Things\".",
      "target_audience": [
        "This course is for anyone who wants to explore the applications of Raspberry Pi in the field of Home Automation.",
        "Since it is not a beginner course, a basic knowledge on Raspberry Pi is necessary for taking this course.",
        "If you are a beginner, please undertake our previous course on \"Introduction to Raspberry Pi\" before subscribing to this course."
      ]
    },
    {
      "title": "From Wire to PLC , A Bootcamp In Industrial Automation",
      "url": "https://www.udemy.com/course/from-wire-to-plc-a-to-z-compilation/",
      "bio": "Build Electrical Automation Projects From Sctratch. Starting From Wires , Control Circuits And Ending With PLC And HMI",
      "objectives": [
        "Design Factories Automation from A to Z",
        "Design Automation Electrical Panels",
        "Draw Schematics for Electrical panels",
        "Calculation of cable sizes for any project",
        "Design Motor driving control circuits",
        "Get knowledge and hands on experience in using VFD",
        "Learn to program PLC in Ladder Diagram (LD)",
        "Learn to program PLC in Fucntional Blocks (FB)",
        "Learn to program PLC in Structured Text (ST)",
        "Learn to program PLC in Continuous Flow Chart (CFC)",
        "Design Human User Interface (HMI)",
        "Design protection for electrical panel",
        "Learn about the different sensors exist in indusrty"
      ],
      "course_content": {},
      "requirements": [
        "No prior knowledge is required. However , any basic knowledge in programming and circuits is helpful but not a must."
      ],
      "description": "***Update 11/17/2020**\n**** Allen Bradley Training was added***\n***Update 11/28/2018**\n**** Classic control simulation software tutorial is available***\n***Update 14/11/2018***\nOne-Line diagram interpretation section was added\n****Update 29/10/2018******\n****Two new sections were added  \"Troubleshooting for Electrical Panel\" and \"Web/Phone Based Visualization\"\n****Update 11/1/2018****\n****Exercises for almost every section were added in order to help you enforce what you have learned***\n****Some design problems were also included****\n\n\nThis  Course is an intensive course that tries to cover all the concepts required to build a fully functional Electrical Automation Projects.\nWe will utilize no hardware in this course so that you can follow up with the course with having to buy Any equipment but rather  our design and verification  will be based on simulations.\nThis course will walk you through the process of designing your own projects from scratch step by step by first introducing you to the most basic components and concepts that you should be familiar with to keep up with the course and ending with two real-world  compilation projects that will sum up everything you've  learned .\nAll software used are for free and there is not need for a license to be purchased.\nThis course will teach you many deigns skills , software , and electrical engineering concepts in a way that you can combine what you have learned  to create a whole real project.\nA summary of what will be covered:\nBasic Electrical Concepts\nBasic Electrical Components and how they operate\nTraditional motor driving control circuits\nModern motor driving equipment\nProtection components and how to choose them\nWiring and cable sizing\nSensors and their utilization in real projects\nElectrical Panel Troubleshooting\nSchematics drawing and design\nPLC programming using Ladder Logic\nPLC programming using Structured Text\nPLC programming using Functional Block Diagram\nPLC programming using continues flow chart\nAllen Bradley - RsLogix 500, RsEmulate 500 and Rslinx Training\nHuman User Interface design and Animation\nTwo A to Z compilation projects\nWeb/Phone based Visualization\n\n\n\n\nIn the final project you will think like an engineer, and look for every design detail to design your electrical panel specs on paper and draw it in schematic.\nBefore you get into programming , you will calculate and choose wisely all you required components according to standards and your project  specifications , you will draw schematics for the project using a CAD software, and then you will start programming using the most modern industrial programming languages supported by different PLC brands , then you will add the HMI and animation and start simulating what you programmed.\nThis is not a dry course that will only explain boring concepts without you knowing where to use it , this course will give you tips on how and when to use each components in a way suitable to your project. because the final aim of this course is that you learn all the skills that will lead to you starting your business or prepare for project within your job on your own.\nSo who should take this course?\nIf you are an Electrical/Electronics/Computer/Control/Mechatronics  or industrial engineering Graduates/Students wanting to peak and learn the fascinating field of automation design\nA graduate Engineering student preparing for job in the industrial automation field and not knowing what to expect in there\nAnybody willing to learn PLC programming effectively with real life examples\nAnybody who knows how to program a PLC but have no idea how conduct a full electrical automation project from scratch\nMechanical engineers who are looking to do the electrical and automation parts of their projects on their own\n\n\nWhere can you use the skill taught in this course?\nAny industrial manufacturing  project  , be it a huge factory with hundreds of robots or a small machine with coupe of sensors , will require ALL the skills you will learn in this course. Because Industrial Automation is very trendy and it's an enormous field .\nThousands of companies look for employees  with these set of skills to hire them in order to conduct and engineer these type of projects in almost any city in the world.\n\n\nNOTE: Don't expect to get skilled with a certain PLC brand exclusively  , this is not our goal here , we will teach your around  90% of the programming languages supported by different manufacturers out there ,and  you will know each one! 's advantages , disadvantages and where to use it and where not to . And you will be able to simulate and tinker around with each of them to get skilled enough to jump to almost any big PLC brand out there.\n\n\nThis course will be updated and supported on regular basis , and new content will be added to expand the skills you learned here.\n\n\n﻿Updated Note:\nUdemy asks for reviews too soon guys so please don't give a review immediately.\nWatch the content and finalize at least a good portion of it then rate the course accordingly.",
      "target_audience": [
        "Electrical and Electronics Engineers",
        "Control Eningineers",
        "Computer Engineers",
        "Industrial Engineeres",
        "Anybody willing to learn a new profession from scratch",
        "Anybody enthused about factory automation design"
      ]
    },
    {
      "title": "Build 11 Arduino Practical Projects today!",
      "url": "https://www.udemy.com/course/arduino-build-arduino-practical-projects/",
      "bio": "Learn by Practicing real world Projects to apply everything you have learned",
      "objectives": [
        "Connect different type of sensors and actuators to Arduino",
        "Interface different type of electronic elements with Arduino",
        "Use sensors and actuators to make useful projects",
        "Program, burn a code and wire Arduino",
        "Learn What are the right tools that you need to start making amazing projects",
        "Learn What makes a great Arduino Project"
      ],
      "course_content": {},
      "requirements": [
        "Basic Knowledge in Electronics Circuits",
        "Basic Knowledge in Circuit Design",
        "Basic Knowledge in C Language",
        "Basic Knowledge in Arduino"
      ],
      "description": "Learning by theory and simulation is only half the answer, but connecting, wiring, and burning a code to an actual Arduino, not a simulated one, is the other more important half. This is what we will cover in this course: learning by making Arduino Practical Projects.\nMore Than 55k Students on All of Our Courses!!! THANK YOU!!!\nWelcome to this course.\nLearning by doing is what makes the difference between someone who learns and someone who applies what they learned.\nIn this course, you will get the chance to see Arduino in action, starting from simulation and moving forward to connecting the hardware and testing the code in real life. This will help you make sure your circuit works as expected and you can witness yourself building your first fully functional Arduino project.\nThe most important thing to note here is that when a circuit works in simulation, that doesn’t mean it will work in real life. In more than 85% of cases, the simulated circuit doesn’t work when you connect it.\nWhy You Should Take This Course?\nStep-by-Step Videos: Show you how to code and connect hardware.\nCoding Challenges: Teach you new programming concepts.\nHands-On Coding: Practice real-world applications.\nDemonstrations: Easy-to-understand explanations on how circuits work and the purpose of each component.\nWhat is the Best Way to Learn?\nLearning by doing Arduino practical projects is the approach that I prefer. This method allows you to not only master new Arduino skills but also gain practical knowledge along the way.\nArduino Motion Detector: Step By Step Guide\nMake your own Arduino Motion Detector and start catching intruders, controlling devices, and exploring many more cool applications. This course will show you how to build an Arduino Motion Detector Device that will trigger an alarm once an intruder is detected within a range of 6 to 7 meters. It will guide you step-by-step through understanding each component inside the device circuit, how it functions, and how to wire it up.\nArduino Radar: Step By Step Guide\nCreate your own radar using Arduino and get a green map showing objects on your screen in no time. This course takes you step-by-step through building your own radar station that collects data related to objects in the surrounding environment using ultrasonic sensors and a servo motor.\nArduino Web Control: Step By Step Guide\nMake your own Arduino Web Control and start controlling any device you imagine using a simple webpage and Arduino. Learn how to interface and configure an Ethernet shield to control devices via the internet.\nAutomatic Weight Measuring Machine using Arduino\nLearn how to make an Arduino Coin Operated Automatic Weight Measuring Machine. This guide will take you step-by-step through interfacing load cells with Arduino and converting data to display weight on an LCD or 7-segment display.\nAutomatic Irrigation System with Arduino\nCreate your own automatic irrigation system to stop manually checking your soil. This course will guide you through interfacing a soil moisture sensor with Arduino to automate the irrigation process.\nArduino Weather Station: Step By Step Guide\nBuild your own weather station using Arduino to measure temperature, humidity, and time. Learn how to wire and program sensors to display weather data on an LCD.\nArduino Multicolor RGB LED Lamp Controlled Using Bluetooth\nInterface Arduino with a mobile app via Bluetooth to control RGB multicolor LEDs. This course will introduce you to mobile apps, Bluetooth control, and RGB LEDs.\nArduino Bluetooth: Step By Step Guide\nControl your world using your smartphone with Arduino Bluetooth module interfacing. Learn how to control any device using Bluetooth technology embedded in your phone.\nArduino Wireless Power Transmission\nMake your own Arduino Wireless Power Transmission project and learn the principles behind wireless power. This guide will show you how to build a wireless power transmission circuit with Arduino.\nArduino Alarm Clock Using a Real Time Clock and LCD Screen\nCreate your own Arduino Alarm Clock to set alarm times and interact with time and date variables. This course will teach you how to interface an RTC DS3231 module with Arduino and display time and date on an LCD.\nEnroll today and have instant access:\nEasy-to-watch video lessons\nPractical activities\nDownloadable resources\nPremium instructor support\nLifetime access to course updates\nAccess to our exclusive student community\n100% Money-back Guarantee\nWhat You Will Learn\nBuild 11 practical Arduino projects\nInterface various sensors and components with Arduino\nWrite and test Arduino code for real-world applications\nGain hands-on experience in electronics and programming\nWho Is This Course For\nElectronics hobbyists and makers\nStudents and professionals interested in Arduino projects\nAnyone looking to learn Arduino through practical projects\nRequirements\nBasic knowledge of Arduino\nA computer with internet access\nEnthusiasm to learn and create\n\n\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge - we go into the depth of the topic and give you the exact - step by step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years - we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million View, 20k + Subscriber) and author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and provide guidance and consulting for many students over the years to help them kick-start their career.\nAshraf’s core skill is explaining difficult concepts through in a step by step easy to understand matter using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming and in particular for the world of Arduino, PIC Microcontroller, Rasberry Pi has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers Courses on\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone with a curiosity for making electronics",
        "Anyone wants to move from Simulation to Practical Work",
        "Anyone intersted in building real things",
        "People with no experience in electronics",
        "People with an intermediate knowledge of electronics",
        "Children over 14 years old"
      ]
    },
    {
      "title": "Internet of Things (IoT) Fundamentals Certification Training",
      "url": "https://www.udemy.com/course/internet-of-things-iot-fundamentals/",
      "bio": "Become an IoT Engineer / Product Manager. Learn IoT basics, devices, connectivity. Apply ML in IoT to build smart cities",
      "objectives": [
        "Basic understanding of Internet of Things (IoT) concepts",
        "What is IoT, Why to learn IoT, History & Growth of IoT",
        "Power of IoT and how an IoT system works",
        "Fundamental components of an IoT system",
        "Application of IoT",
        "Overview of Sensors and Devices",
        "IoT Device Hardware, Scaling, Manufacturing & Shipping, Gateways",
        "IoT Connectivity - Cellular, Satellite, WiFi, Bluetooth, LPWAN",
        "Data Processing - Introduction to Cloud & IoT Platform",
        "IoT Platform Types, Choosing an IoT Platform",
        "When do you need an IoT Platform?",
        "IoT APIs introduction",
        "User Interface & User Experience in IoT",
        "IoT Protocols & Machine Learning for IoT",
        "IoT Network Protocols - HTTP, LoRaWan, Bluetooth, ZigBee",
        "IoT Data Protocols - MQTT, CoAP, AMQP, M2M Communication protocol, XMPP",
        "IOT for smart cities - What is a smart city and what is the role of IoT in Smart Cities?",
        "Smart city case study: Barcelona, Spain"
      ],
      "course_content": {},
      "requirements": [
        "Enthusiasm and determination to make your mark on the world!"
      ],
      "description": "A warm welcome to the Internet of things (IoT) course by Uplatz.\n\n\nThe Internet of things (IoT) is a term for the growing number of electronics that aren't traditional computing devices, but are connected to the internet to send data, receive instructions or both.\nThere's an incredibly broad range of things that fall under that umbrella: Internet-connected smart versions of traditional appliances like refrigerators and light bulbs, gadgets that could only exist in an internet-enabled world like Alexa-style digital assistants; internet-enabled sensors that are transforming factories, healthcare, transportation, distribution centers and farms.\nThe Internet of Things is transforming our physical world into a complex and dynamic system of connected devices on an unprecedented scale. The IoT brings the power of the internet, data processing and analytics to the real world of physical objects. For consumers, this means interacting with the global information network without the intermediary of a keyboard and screen; many of their everyday objects and appliances can take instructions from that network with minimal human intervention.\n\n\nSimply put, IoT is about connecting machines or, as we refer to them, ‘things’ that were previously ‘dumb objects’. You can think everything from your toaster to a security camera, to the internet in order to transmit the data they collect, monitor them and enable them to ‘talk to each other’.\nAdvances in technology are making possible a more widespread adoption of IoT, from pill-shaped micro-cameras that can pinpoint thousands of images within the body, to smart sensors that can assess crop conditions on a farm, to the smart home devices that are becoming increasingly popular.\n\n\nUplatz provides this comprehensive course on IoT basics to help you get started with the IoT world. This IoT course will help you:\nDescribe the evolution of the Internet of Things\nIdentify the range of options for the way things can communicate\nSelect the standards most appropriate for building successful communications\nBuild addressing architectures that can scale to the sizes required\nAnalyze and record the interactions\nVisualize the results of interactions\nDeliver the security that modern services demand\nBuild new service networks that can support the future Internet of Things\nIn this Internet of Things (IoT) course, students will learn general strategies for planning, designing, developing, implementing, and maintaining an IoT system. Besides other things, you will learn what are the building blocks of IoT and what are the underlying technologies that drive the IoT revolution. There is also a case study on building a smart city by assembling and configuring IoT devices to work in a sensor network.\n\n\nCourse Objectives\nUnderstand the basic concepts of IoT\nPlan an IoT implementation\nConstruct and program an IoT device\nCommunicate with an IoT device using wired and wireless connections\nProcess sensor input and control an actuator on an IoT device\nManage security, privacy, and safety risks on IoT projects\nLearn how to apply Machine Learning in IoT\nManage an IoT prototyping and development project throughout the development lifecycle\n\n\nInternet of Things (IoT) Fundamentals - Course Syllabus\n\n\n1. Overview of Internet of Things (IoT)\nWhat is Internet of Things?\nWhy to learn IoT?\nGrowth in IoT\nHistory of IoT\nThe Power of IoT\nHow an IoT System Actually Works\nFundamental components of an IoT system\nApplication of IoT\n\n\n2. Sensors & Devices\nOverview of Sensors and Devices\nIoT Device Hardware\nScaling\nManufacturing & Shipping\nGateways\n\n\n3. Connectivity\nIntroduction to Connectivity\nCellular\nSatellite\nWiFi\nBluetooth\nLPWAN\n\n\n4. Data Processing\nIntroduction to the Cloud\nIntroduction to the IoT Platform\nWhen Should Your Organization Use an IoT Platform?\nIoT Platform Types\nChoosing an IoT Platform\nWhen Do You Need an IoT Platform?\nAPIs\n\n\n5. User Interface & User Experience in IoT\nIntroduction to UI & UX for IoT\nUser Interface\nHistory of UI\nUser Experience (UX)\nHow IoT will change UX\nKey Considerations for UIs\n\n\n6. IoT Protocols & Machine Learning for IoT\nOverview of IoT Protocols\nIoT Network Protocols\nHTTP\nLoRaWan\nBluetooth\nZigBee\nIoT Data Protocols\nMQTT\nCoAP\nAMQP\nM2M Communication protocol\nXMPP\nWhy should you care about IoT protocols?\nMachine Learning for IoT\n\n\n7. IoT for Smart Cities\nWhat is a smart city?\nWhy do we need smart cities?\nWhat is the role of IoT in Smart Cities?\nSmart city case study: Barcelona, Spain",
      "target_audience": [
        "Embedded IoT Engineers",
        "Beginners and Newbies aspiring for a career in Internet of Things (IoT) technologies",
        "Product Managers - IOT, Global platforms",
        "Sales Executives - IOT & AR",
        "IoT Security Graduate Engineers",
        "Electronics Design Engineers - BLE, IoT, Bluetooth, PCB",
        "IoT Solution Architects & Enterprise Architects",
        "DevOps Engineers - IoT, Cloud Deployment",
        "Data and IoT Engineers",
        "IoT Enthusiasts and anyone interested in learning IoT",
        "FullStack Developers - Angular, Typescript, AWS, IoT, Linux",
        "IoT Technologists",
        "IoT Project Managers & Strategic Advisors",
        "Lead Developers - Growing IoT Business",
        "IoT Sales Directors"
      ]
    },
    {
      "title": "Unleash the Power of Arduino—All with Drag and Drop!",
      "url": "https://www.udemy.com/course/arduino-programming-without-coding-visuino-arduino-kids-program-code/",
      "bio": "Master Arduino Projects with Zero Coding—Your Hands-On Guide to Creating Electronics Projects Without Writing Any Code.",
      "objectives": [
        "How to download and install the required software",
        "The user interface and the components that you need to use to program Arduino without coding.",
        "How to send output signals to different Arduino pins.",
        "How to read digital input and control output.",
        "How to read analog input and display the incoming data using a live serial monitor or a graph simulator.",
        "How to program different components including LCD and different modules without coding or using libraries",
        "How to Turn a Project idea into a Practical Arduino Based device without writing a single line of code"
      ],
      "course_content": {},
      "requirements": [
        "Basic experience in Electronics",
        "A Will to apply, not just watch"
      ],
      "description": "Welcome to the era of Arduino without boundaries! Dive into the fascinating world of Arduino without getting entangled in the web of coding. This course is tailored to set you on a path of innovation, where the power of electronics meets the simplicity of drag-and-drop.\nKey Takeaways:\nThe Future is No-Code: Say goodbye to meticulous and tedious coding processes. Unearth the wonders of Arduino by simply dragging and dropping.\nArduino Simplified: Learn to maneuver the incredible Arduino platform, commanding sensors, motors, and lights without writing a single line of code.\nHolistic Learning: Beyond theoretical knowledge, embark on practical projects like creating an \"Obstacle Avoiding Robot\". Witness the ease and effectiveness of Arduino without coding.\nWhy This Course?\nAll-Inclusive: From programming basics like loops and conditional statements to using diverse modules—Bluetooth, SPI, I2C, and more—you'll get it all.\nFor Everyone: Absolute beginner or seasoned pro, this course caters to all. Even if you aim to introduce a youngster to programming, this is the perfect starting point.\nQuick and Efficient: Skip the hurdles of coding, jump straight into action. Complete intriguing projects and share your masterpieces with the world.\nCourse Highlights:\nDive Deep: An Introduction to No-Code Arduino Programming.\nExplore Modules: Bluetooth, SPI, I2C, Graphical LCD, and Beyond.\nReal-World Applications: Engaging tutorials and step-by-step walkthroughs of amazing projects.\nBoard Compatibility: Master programming across a variety of boards—Arduino, ESP32, Raspberry Pi, and more.\nFinal Thoughts: Imagine a world where you wield the power of Arduino without the intricacies of coding—a world where innovation isn't bounded by coding limitations. That world begins here.\nReady to Dive into the No-Code Revolution of Arduino? Fuel your curiosity and creativity. Enroll today to redefine your Arduino journey!\nUser Testimonials and Social Proof: \"This course demystified Arduino for me. I created my first project without writing any code!\" - Alex K.\n\"Perfect for beginners and those who want to explore Arduino without the coding hassle.\" - Jane P.\nAn Author Bio: Ashraf, the founder of Educational Engineering Team, is a seasoned educator, Mechatronics engineer, electronics and programming hobbyist, and maker. With over 13 years of experience in teaching and practical projects, Ashraf's courses have helped over 250,000 people improve their skills and build successful careers.\nA Single Powerful CTA: Enroll now to start mastering Arduino projects without writing any code!\nFAQ Section: Q: Do I need any prior experience to take this course? A: No prior experience is necessary. This course is suitable for beginners and experienced individuals alike.\nQ: How quickly can I start creating Arduino projects? A: You can start creating projects immediately after completing the relevant sections of the course.\nQ: Is there a money-back guarantee? A: Yes, Udemy offers a 30-day money-back guarantee if you're not satisfied with the course.\nWhat You Will Learn\nTechniques to create Arduino projects without coding\nHow to use drag-and-drop interfaces to control Arduino\nMethods to integrate sensors, motors, and lights with Arduino\nStep-by-step guidance on practical projects like an \"Obstacle Avoiding Robot\"\nUnderstanding and using diverse modules such as Bluetooth, SPI, I2C, and graphical LCDs\nWho is This Course For\nAbsolute beginners looking to explore Arduino\nExperienced users wanting to simplify their projects\nEducators and parents introducing youngsters to programming\nHobbyists interested in creating electronics projects without coding\nAnyone curious about the no-code revolution in electronics\nRequirements\nBasic computer skills\nInternet access\nNo prior coding or electronics experience needed\n\n\nAbout the Instructor Info\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge - we go into the depth of the topic and give you the exact - step by step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years - we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy.\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million Views, 20k+ Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThe team also works as freelancer engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their careers.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, particularly for Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to improve their skills and build great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone Interested in Programming Arduino Without coding",
        "Anyone Interested in Teaching Arduino for Kids and Old people without  the hassle of coding",
        "Anyone Interested in Learning A New Way to Program Arduino",
        "Anyone Interested in Turn Ideas into Projects quickly",
        "Anyone Interested in saving Time, Effort and Money while Programming Arduino",
        "Anyone Interested in Learning New Things about Arduino",
        "Anyone Interested in Making Projects"
      ]
    },
    {
      "title": "Xilinx VIVADO Beginner Course for FPGA Development in VHDL",
      "url": "https://www.udemy.com/course/vhdl-programming-with-xilinx-vivado-and-zynq-fpga/",
      "bio": "Learn how to Create VHDL Design,Simulation Testbench & Implementation with Xilinx VIVADO & FPGA: from Basic to Advanced.",
      "objectives": [
        "Idea of VHDL Programming , VIVADO Design Methodology and Designing/Implementing Design in Zynq FPGA-ZedBoard",
        "Use fundamental VHDL constructs to create simple designs. Understanding the Conditional Statements in VHDL.",
        "Design Simulation testbench on VHDL and simulating the designs.",
        "Design with structural design methodology on VHDL.",
        "Designing Decoder, Adder, Register and Counter in VHDL and Implementing in ZedBoard",
        "Implementing State Machine in VHDL; Designing/Implementing Sequence Detector"
      ],
      "course_content": {
        "Section 1_Introduction and Overview of VHDL, VIVADO & Zynq": [
          "Introduction and Overview of VHDL",
          "VHDL Data Types and Operators:Overview with How to create user defined data type",
          "Section 1_0 How to Install Xilinx VIVADO and Get 30 day Evaluation License",
          "Section_1 Lab Nor Gate in VHDL with VIVADO on ZedBoard",
          "Nor Gate Implementation on ZedBoard FPGA (Optional)"
        ],
        "Simulating VHDL code with Testbench": [
          "Simulation Overview and Lab: Simulation of NAND Gate in VIVADO"
        ],
        "Conditional Statements in VHDL": [
          "Lecture: Conditional Statement in VHDL",
          "Section 3_2 Lab 31 Decoder Design and Implementation on ZedBoard",
          "Section 3_3 Lab 31 Decoder Demo"
        ],
        "Section 4_A Combinational Circuit Design(Half Adder Design) with VHDL in VIVADO": [
          "Section 4_1 Combinational Circuit Design in VHDL",
          "Section 4_2 Lab41 Half Adder Design and Implementation with VIVADO and Zynq",
          "Half Adder Implementation on ZedBoard: Demo"
        ],
        "Section 4_B Seven Segment Decoder Design and Display Interfacing on VHDL": [
          "Seven Segment Decoder Design in VHDL"
        ],
        "Section 5 Structural Design with VHDL (Full Adder Design using Half Adder)": [
          "Section 5 Structural Design with VHDL with Lab on Designing Full Adder using Hal",
          "Section 5 Lab 51 Structural Design Lab for Full Adder Demo"
        ],
        "Section 6 Sequential Circuit Design (BCD Counter Design & Implement) with VHDL": [
          "Section 6_1 Sequential Circuit Design in VHDL",
          "Section 6_2 Lab 61 BCD Counter Design and Implementation",
          "BCD Counter Implementation on ZedBoard: Demo"
        ],
        "Section 7 Finite State Machine Design:Sequence Detector Design/Implement in VHDL": [
          "Section 7 FSM Design in VHDL Lab 71 Sequence Detector Design"
        ],
        "ALU Design (8 bit & N bit ALU Design with Wallace Tree Multiplication Algorithm)": [
          "ALU Design (ALU Overview and 8 Bit ALU Design)-I",
          "ALU Design (ALU Overview and 8 Bit ALU Design)-II",
          "ALU Design: Lab 81 N bit ALU Design"
        ],
        "VHDL Reference Guide (From Basic Design to FSM Examples) from Digitronix Nepal": [
          "VHDL Reference Guide from Digitronix Nepal (Basic Gate to Sequential Circuits)"
        ]
      },
      "requirements": [
        "Basic idea of VHDL",
        "Idea of VIVADO Design Suit and Zynq 7000 Architecture",
        "FPGA Design Methodology Basic",
        "We have included all the basics of VHDL, VIVADO and Zynq in this Course, So No Worries!!!"
      ],
      "description": "\"Learn VIVADO Development from Basic to Intermediate Level!!!\"\nThis Course is of VHDL Programming from Basic (logic gate design) to Advance Design (Structural Design and State Machine Design). After completing the course student will get idea of VHDL programming design methodology, VIVADO Design Flow, Zynq Architecture, Creating Simulation Testbench, Conditional Statements, Combinational Circuit Design with VHDl, Sequential Circuit Design, Structural Design in VHDL and State Machine Design in VHDL.\nIn each section we have included Lab session on VIVADO which have been implemented on Zynq Board (i.e ZedBoard) FPGA, so Student will get complete design skill on VHDL with VIVADO.\nYou guys can Learn the course while using ISE Design Suit.While VIVADO is successor of ISE so this Course and VHDL Design Methodology is same for ISE based design so do not scare about VIVADO because of it just a latest version of Design tool than ISE.\nThe Top Level Outlines of the Course is:\nBasic Digital Design with VHDL and VIVADO Tool\nCreating Testbench on VHDL and Simulating with VIVADO Tool\nCombinational  Circuit Design in VHDL: Decoder Design,\nSequential Circuit Design in VHDL: BCD Counter Design and implementation on ZedBoard\nImplementing digital design lab on Xilinx Zynq Boards: ZedBoard and Zybo\nStructural Design in VHDL: Creating Full Adder using Half Adder\nState Machine Design : Designing Sequence Detector in VHDL\n8-bit ALU Design and Simulation in VHDL",
      "target_audience": [
        "Electronics Engineering",
        "Computer Science",
        "Electrical Engineering",
        "Robotics Enthusiast",
        "Embedded System"
      ]
    },
    {
      "title": "Learn x86 Assembly Language from Zero to Hero",
      "url": "https://www.udemy.com/course/master-x86-assembly-language-part-2/",
      "bio": "The modern x86 course for everyone! Master x86 assembler with projects, challenges and theory. Many courses in one!",
      "objectives": [
        "Master the instructions of x86 Assembly Language.",
        "Develop complex mathematical algorithms in x86 assembler.",
        "Be able to create lookup tables and jump tables in x86 assembly.",
        "Master the MASM assembler syntax.",
        "Develop complex image processing algorithms in x86 assembler.",
        "Be able to write x86 and mixed solid assembler code.",
        "Translate C high level language to x86 assembler.",
        "Get fast and friendly support in the Q&A area."
      ],
      "course_content": {},
      "requirements": [
        "No coding experience is necessary to take this course!",
        "Any computer and OS will work — Windows, macOS or Linux."
      ],
      "description": "You’ve just stumbled upon the most complete, in-depth x86 Assembly Programming course online.\nWhether you want to:\n- build the skills you need to get your first programming job\n- move to a more senior IT position\n- become a computer scientist mastering in assembler\n- or just learn x86 assembly language to be able to work with your own science projects quickly.\n\n...this x86 Assembly Programming Masterclass is the course you need to do all of this, and more.\n\n\nWhat makes this course a bestseller?\nLike you, thousands of others were frustrated and fed up with fragmented Youtube tutorials or incomplete or outdated courses which assume you already know a bunch of stuff, as well as thick, college-like textbooks able to send even the most caffeine-fuelled coder to sleep.\nLike you, they were tired of low-quality lessons, poorly explained topics, and confusing info presented in the wrong way. That’s why so many find success in this complete x86 developer course. It’s designed with simplicity and seamless progression in mind through its content.\n\nThis course assumes no previous coding experience and takes you from absolute beginner core concepts. You will learn the core x86 assembly language skills and master programming in assembler. It's a one-stop shop to learn x86. If you want to go beyond the core content you can do so at any time.\n\n\nHere’s just some of what you’ll learn\n(It’s okay if you don’t understand all this yet. You will in the course)\nMaster the x86 Assembly Language Instructions\nUnderstanding the Memory Space in x86 assembly language\nLearn to program different programs in x86\nMaster Subroutine Management in x86\nMaster the Addresing Modes and Available Registers to perform operations\nTranslate programs from C language to x86 Assembly Language\nHow to develop powerful x86 applications\nComplete chapters on Assembly programming and many aspects of the x86 Recursive mechanism (the protocols and tools for building applications) so you can code for all platforms and derestrict your program’s user base.\n\n\nWhat if I have questions?\nAs if this course wasn’t complete enough, I offer full support, answering any questions you have everyday.\nThis means you’ll never find yourself stuck on one lesson for days on end. With my hand-holding guidance, you’ll progress smoothly through this course without any major roadblocks.\n\n\nThere’s no risk either!\nThis course comes with a full 30-day money-back guarantee. Meaning if you are not completely satisfied with the course or your progress, simply let me know and I’ll refund you 100%, every last penny no questions asked.\nYou either end up with x86 Assembler skills, go on to develop great programs and potentially make an awesome career for yourself, or you try the course and simply get all your money back if you don’t like it…\nYou literally can’t lose.\n\n\nReady to get started, developer?\nEnroll now using the “Add to Cart” button on the right, and get started on your way to creative, advanced x86 Assembler brilliance. Or, take this course for a free spin using the preview feature, so you know you’re 100% certain this course is for you.\nSee you on the inside (hurry, x86 Assembler is waiting!)",
      "target_audience": [
        "If you want to master x86 Assembly Language from scratch.",
        "If you want to learn to code from scratch through projects, then take this course.",
        "If you are a complete beginner then this course will be everything you need to become a x86 professional.",
        "f you are a seasoned programmer wanting to switch to x86 then this is the quickest way. Learn through coding projects."
      ]
    },
    {
      "title": "LDO Circuit Design and Analysis: An Intuitive Approach",
      "url": "https://www.udemy.com/course/ldo-circuit-design-and-analysis-an-intuitive-approach/",
      "bio": "Beginning the mobile device power management",
      "objectives": [
        "Circuit Design",
        "Power Management",
        "Regulation",
        "Design Intuition",
        "Battery output management",
        "Use of regulation in mobile devices"
      ],
      "course_content": {},
      "requirements": [
        "Be able to analyze RC circuits",
        "Be able to understand feedback",
        "Be able to understand the battery output"
      ],
      "description": "In this course, we will learn about one of the important concepts for any hardware / system designer:  Low dropout regulator (LDO) is a simple and cost-effective voltage regulator to get a regulated output voltage from a higher input voltage.\nFurther, we will explore an intuitive approach to managing power and voltage supply for critical analog and digital circuits in mobile devices. We will see what an LDO is, understand how a low drop out voltage regulator works, important characteristics of LDOs and also a few parameters.",
      "target_audience": [
        "Experienced design engineers",
        "Beginner Analog designers",
        "Undergraduate and Graduate students",
        "Designers working on power management circuits"
      ]
    },
    {
      "title": "Variable Frequency Drive PowerFlex 525 VFD Programming Setup",
      "url": "https://www.udemy.com/course/variable-frequency-vfd-powerflex-525-plc-programming-rslogix-5000/",
      "bio": "Electrical Hardware Engineering & Variable Frequency Drive Programming | PLC, HMI, Allen Bradley RSLogix 5000",
      "objectives": [
        "Understand how to work with Variable Frequency Drives (VFDs)",
        "Learn how to work with PowerFlex 525 family Drives",
        "Learn how to Program EtherNet/IP Ladder Logic PLC code in order to interface PowerFlex 525 drives"
      ],
      "course_content": {},
      "requirements": [
        "Basic Computer Skills",
        "Basic Hardware Knowledge",
        "Basic Exposure to Automation Systems"
      ],
      "description": "This class will teach you everything you need to know about PowerFlex 525 Variable Frequency Drives (VFDs)\nThis class takes a hands on approach; within the first few lectures, we will start working with actual hardware and begin exploring the PowerFlex 525. Throughout the course, you can expect me to provide you will start to finish information in order to wire the drive, setup the parameters & control it through a Programmable Logic Controller (PLC).\nThe class is broken down into sequential modules & assumes no prior knowledge from the student. We take one step at a time & build the knowledge in every lecture. We make sure to discuss common pitfalls and best practices when it comes to working with this family of frequency drives.\nWhat are the requirements for the class?\nYou don't need any hardware or software to follow the lectures. However, in order to get the most out of the lectures, it's recommended to take notes, go through the manual (included in the class) & to implement the steps on your own time.\nBasic computer literacy is assumed.\nWhat can I expect from this class?\nYou will learn about the hardware & how to install it within a manufacturing environment.\nYou will learn about the different parameters which need to be configured in order to properly setup & utilize the PowerFlex 525 VFD.\nYou will learn basic control methods which don't require any additional hardware.\nYou will learn advanced control methods which utilize the EtherNet/IP protocol as well as an 1769-L24ER-QB1B PLC Allen Bradley Programmable Logic Controller (PLC).\nYou will become confident in working with these Variable Frequency Drives.\nWhat is the target audience for the class?\nElectrical Engineers looking for a crash course on VFDs.\nElectrical Technicians / Electricians looking to expand their knowledge into controls.\nSoftware Engineers who are seeking to learn about controlling hardware.\nManufacturing Operators looking to progress in their career.\nAnyone interested in how manufacturing processes are executed.",
      "target_audience": [
        "Electrical Technicians",
        "Electrical Engineers",
        "Operators",
        "Electricians",
        "Maintenance Supervisors",
        "Anyone interested in manufacturing automation systems"
      ]
    },
    {
      "title": "ARM Cortex M Microcontroller DMA Programming Demystified",
      "url": "https://www.udemy.com/course/microcontroller-dma-programming-fundamentals-to-advanced/",
      "bio": "Direct Memory Access Demystified with STM32 Peripherals (ADC, SRAM,UART,M2M,M2P,P2M) and Embedded C code Exercises",
      "objectives": [
        "Please watch free preview videos you will learn something today without even enrolling for this course",
        "Fundamentals of Direct Memory Access in a Microcontroller",
        "The Microcontroller Architecture and Bus interfaces",
        "Bus matrix of the ARM cortex M based MCU",
        "Concurrent data access from ARM and DMA",
        "DMA control configurations like burst size, FIFO, Alignment",
        "DMA Controller internals and Bus interfaces",
        "DMA Controller channels,Streams,priority",
        "Memory to Memory data transfer using DMA and Exercises",
        "Peripheral to Memory and Memory to Peripheral DMA and Programming exercises",
        "Peripheral DMA configurations",
        "DMA controller interrupts and interrupts handling",
        "Debugging"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of C and Microcontroller could be added advantage but not mandatory",
        "Mind Receptive to new ideas or arguments"
      ],
      "description": "The course aims to demystify the Microcontroller DMA controller internals and its programming with various peripherals. Suitable for beginners to intermediate students in the field of Embedded Systems and programming. Please go through the description below to understand the course offering.\nKey things you learn,\n1) The Multi AHB bus matrix and ARM Cortex M Bus interfaces\n2) MCU Master and Slave communication over bus matrix\n3) DMA internals: channel mapping / streams/ fifo /Master ports / Arbiter/etc\n4) DMA different transfer modes: M2P, P2M,M2M\n5) DMA with peripherals like ADC, GPIO, UART_RX/TX and many other peripherals will be updated in this course.\n6) DMA programming from scratch. Helps you to troubleshoot DMA issues on other microcontroller or processor platforms. You can speculate and debug problems more quickly when you learn the hard way.\n7) And lots of other videos about circular mode/burst transfer /RTOS etc. will be added shortly.\n\n\nHardware used:\n1) STM32F446RE Nucleo64 board\nyou can also use other STM32 boards such as the discovery board, evaluation board, or any other board.\n\n\nSoftware used:\n1) KEIL MDK V5 (free version, for windows)\n2) Openstm32 system workbench ( windows/linux/mac) (free)\n3) CubeMx software from ST (free)\n\n\nThe installation procedure is covered in the course\nDescription:\nThis course is all about understanding the Direct Memory Access Controller of the Micro-controller and how to use it in the embedded applications.\n\n\nThe course uses ARM Cortex M based STM32 Micro-controller for all theory discussion and code exercises. The course discusses generic details of the DMA which you can leverage to other Micro-controllers but you have made changes to the code in order to run on your target if it's not an ST's 32-bit Micro-controller.\n\n\nThe course will help you to raise your confidence in handling your MCU's DMA controller and connecting dots by going through the various levels of discussion.\nI really tried to simplify the subject with clean/generic explanations and exercises.\nWe will discuss why DMA is required and how it benefits ARM to offload data transfer work with exercises.\nWe will learn different types of DMA transfers like M2M, P2M, and M2P (M: Memory P: Peripheral) and various DMA configurations. Please go through \"What will I learn?\" section above.\nFor the beginners/intermediate students, the course will indeed add huge advantage and helps to use DMA successfully in Embedded applications.\n\n\nLearning order of FastBit Embedded Brain Academy Courses,\nIf you are a beginner in the field of embedded systems, then you can take our courses in the below-mentioned order.\nThis is just a recommendation from the instructor for beginners.\n1) Microcontroller Embedded C Programming: absolute beginners(Embedded C)\n2) Embedded Systems Programming on ARM Cortex-M3/M4 Processor(ARM Cortex M4 Processor specific)\n3) Mastering Microcontroller with Embedded Driver Development(MCU1)\n4) Mastering Microcontroller: TIMERS, PWM, CAN, RTC,LOW POWER(MCU2)\n5) Mastering Microcontroller: STM32-LTDC, LCD-TFT, LVGL(MCU3)\n6) Embedded System Design using UML State Machines(State machine)\n7) Mastering RTOS: Hands-on FreeRTOS and STM32Fx with Debugging(RTOS)\n8) ARM Cortex M Microcontroller DMA Programming Demystified(DMA)\n9) STM32Fx Microcontroller Custom Bootloader Development(Bootloader)\n10) Embedded Linux Step by Step using Beaglebone Black(Linux)\n11) Linux device driver programming using Beaglebone Black(LDD1)\n\n\nOther programming courses\n1) Master The Rust Programming Language : Beginner To Advanced",
      "target_audience": [
        "Professionals interested in exploring Embedded systems",
        "Hobbyists and students who want to start their career in Embedded world",
        "If you think about 'embedded' then think about taking this course. you will not be disappointed"
      ]
    },
    {
      "title": "MicroPython with the ESP32",
      "url": "https://www.udemy.com/course/micropython-with-the-esp32/",
      "bio": "The easiest way to write programs for the ESP32 microcontroller.",
      "objectives": [
        "The MicroPython programming language.",
        "How to use MicroPython with the ESP32 microcontroller.",
        "How to use the Thonny editor with MicroPython and the ESP32.",
        "How to use MicroPython with common peripherals such as motors, displays and sensors.",
        "How to use MicroPython to write programs that work with IoT services like IFTTT.",
        "How to search, find and install MicroPython libraries on the ESP32."
      ],
      "course_content": {
        "Introduction": [
          "01.10 What is this course about?",
          "01.20 What is uPython and why should you care?",
          "01.30 Software you will need",
          "01.40 Hardware you will need",
          "01.50 How to get the most out of this course",
          "01.60 Get the demo scripts for the course"
        ],
        "Getting started with uPython": [
          "02.10 uPython vs CPython",
          "02.20 uPython resources",
          "02.30 uPython compatible boards"
        ],
        "Working with Thonny IDE": [
          "03.10 Getting started with Thonny IDE for Python",
          "03.11 Upgrade to Thonny 4",
          "03.20 How to install the MicroPython firmware to your ESP32",
          "03.21 Upgrade ESP32 to MicroPython v1.18",
          "03.22 How to solve a failure to upload the firmware on an ESP32",
          "03.30 Setting an interpreter",
          "03.40 How to write and execute a MicroPython program",
          "03.50 Other views in Thonny IDE",
          "03.60 Thonny IDE with Raspberry Pi Pico",
          "03.61 Upgrade Rpi Pico to uPython 1.18",
          "03.70 Using Thonny IDE with BBC micro:bit",
          "03.80 Thonny IDE Advanced configuration",
          "03.90 Find Python Packages at PyPI"
        ],
        "MicroPython on the ESP32": [
          "04.10 The MicroPython shell",
          "04.20 Uploading and downloading files with Thonny",
          "04.40 MicroPython Programming with files",
          "04.50 How to interrupt a running program",
          "04.60 How to run a program at boot",
          "04.70 How to debug MicroPython program"
        ],
        "A Python (and MicroPython) quick start": [
          "05.10 Introduction to this section",
          "05.20 Keywords",
          "05.30 Comments",
          "05.40 Variables and types",
          "05.50 Operators",
          "05.60 Strings and formatting",
          "05.70 Lists, tuples, ranges",
          "05.80 Dictionaries",
          "05.90 Loops",
          "05.100 Control with if ..elif.. else",
          "05.110 Functions",
          "05.120 Objects and classes",
          "05.130 MicroPython coding considerations"
        ],
        "Libraries": [
          "06.10 About MicroPython modules",
          "06.20 Built-in modules",
          "06.30 Community modules",
          "06.40 How to install an external module"
        ],
        "Simple pin operations": [
          "07.10 Blink an LED with loop",
          "07.20 Blink an LED with timer",
          "07.30 Fade an LED with PWM",
          "07.40 Read a button with loop",
          "07.50 Read a button with hardware interrupt",
          "07.60 Read a button with timer interrupt",
          "07.70 Read a potentiometer"
        ],
        "Sensors": [
          "08.10 DHT22 environment sensor",
          "08.20 BME280 environment sensor",
          "08.30 ESP32 internal touch sensor",
          "08.40 ADXL335 analog accelerometer",
          "08.50 HC-SR04 ultrasonic distance sensor"
        ],
        "Displays": [
          "09.10 2x16 LCD display with PCF8574 - Part 1: hardware I2C",
          "09.12 2x16 LCD display with PCF8574 - Part 2: software I2C",
          "09.20 0.96\" OLED SSD1306 I2C",
          "09.30 1.3\" OLED SH1106 I2C",
          "09.40 0.96\" OLED SSD1315 I2C",
          "09.50 Neopixels",
          "09.60 MAX7219 8x8 Matrix display - Part 1: random pixels",
          "09.62 MAX7219 8x8 Matrix display - Part 2: text"
        ],
        "Motors": [
          "10.10 Mini servo motor",
          "10.20 DC motor with DRV8871"
        ]
      },
      "requirements": [
        "You have basic understanding of electronics. You are comfortable with assembling simple circuits on a breadboard, and you understand simple concepts like pull-up resistors and voltage dividers.",
        "You have a basic understanding of microcontrollers. For example, you know what is a GPIO, the I2C or SPI interfaces and PWM. You understand that if you connect a 3.3V device to a 5V power source, you will damage the device.",
        "You are familiar with related concepts, such as the Internet Of Things (which features in one of the course sections).",
        "You are comfortable with at least one programming language and programming tool. It doesn’t matter which ones, as all modern languages and programming share the same basics.",
        "You have a growth mindset, and you are willing to work hard in order to learn.",
        "If you feel that you don’t tick one of these boxes, consider doing one of my introductory Arduino and Electronics courses first."
      ],
      "description": "Last Updated in June and July 2022 to cover the latest versions of the Thonny editor (version 4) and MicroPython firmware (version 1.18+).\nMore details about this update: I have introduced new lectures to show you how to install and use Thonny 4, and how to upgrade your ESP32 devkit and Raspberry Pi Pico boards to use the MicroPython 1.18 firmware.\nI have also tested all experiments to ensure that they work with these versions of Thonny and MicroPython.\nIf you are using an ESP32 board that is unable to automatically enter upload mode, you will find a solution in a new lecture in Section 3.\nWith this course, you will learn how to use MicroPython with the ESP32 microcontroller.\nMicroPython is a high-level programming language specifically designed for microcontrollers and resource-limited embedded devices.\nWho is this course for?\nI have created this course for three types of students:\nIf you are familiar with Python, you will find that MicroPython looks, feels, and works like regular Python. This course will help you get started quickly, and help you out with the peculiarities of using Python as MicroPython operating on the ESP32 hardware.\nIf you have little programming experience, MicroPython is a perfect option for learning how to program hardware. This course will help you learn enough MicroPython to be able to write programs that run on the ESP32 microcontroller.\nIf you have experience in programming the ESP32 with the Arduino IDE and language, but what to check out MicroPython, this course will help you do that.\nWhat is MicroPython?\nMicroPython is a programming language that borrows the syntax and language attributes of Python 3.\nPython 3 is a powerful high-level general-purpose language that is designed to be easy to learn and use. It is extremely popular, and among the top-5 most widely used programming languages. As a result, has an extensive set of learning resources, excellent documentation, and code libraries that cover an amazing breadth of applications.\nFrom gaming to the Internet of Things, from data science to industrial automation, anything that can be programmed in Python.\nMicroPython was modelled after Python to reduce the barrier to entry for people that want to write programs for microcontrollers or embedded devices that have limited resources.\nWhat is the ESP32?\nThe ESP32 is a powerful yet low-cost microcontroller device from Espresif.\nThe appeal of the ESP32 device is that it packs a powerful dual-core CPU, with relatively large amounts of RAM and flash storage, a full complement of wireless and wired communications options, with lots of input/output pins in a small low-cost package.\nThe ESP32 is also versatile, as you can program it with a variety of programming tools and languages, including the Arduino IDE, and, of course, MicroPython.\nI selected the ESP32 as the hardware for this course because it is easy to find in the market, very affordable considering its capabilities, and, most likely, most people interested in microcontrollers already have at least one.\nWhat are the objectives of this course?\nThis course has 3 main objectives:\nTo introduce you to the MicroPython programming language, even if you have little or no prior experience.\nTo help you learn how to use MicroPython with common external devices, like motors and screens, with MicroPython programs running on an ESP32 microcontroller.\nTo consolidate this knowledge with the help of two capstone projects. In these projects, you will create a working gadget by combining the knowledge you acquired earlier in the course.\nWhat are the knowledge prerequisites?\nBefore embarking on this course, please confirm that you tick the following boxes:\nYou have a basic understanding of electronics. You are comfortable with assembling simple circuits on a breadboard, and you understand simple concepts like pull-up resistors and voltage dividers.\nYou have a basic understanding of microcontrollers. For example, you know what is a GPIO, the I2C or SPI interfaces and PWM. You understand that if you connect a 3.3V device to a 5V power source, you will damage the device.\nYou are familiar with related concepts, such as the Internet Of Things (which features in one of the course sections).\nYou are comfortable with at least one programming language and programming tool. It doesn’t matter which ones, as all modern languages and programming share the same basics.\nYou have a growth mindset, and you are willing to work hard in order to learn.\nIf you feel that you don’t tick one of these boxes, consider doing one of my introductory Arduino and Electronics courses first. Then you’ll be ready to come back to this course.\nCourse organization\nThis course is organised in four parts.\nIn the first part, you will learn the basics. This is where you’ll learn how to set up and use Thonny, our programming editor, and prepare your ESP32 to work with MicroPython.\nYou will also have the opportunity to learn the basics of MicroPython and where and how to find compatible libraries.\nThe second part is where you roll up your sleeves and write MicroPython programs. You’ll start with simple pin operations that make LEDs blink and read buttons, then move on to sensors, displays, and motors. There’s a large section dedicated to Wifi and Internet of Things applications, and another section dedicated to more advanced topics such as hardware timers, working with internal sensors, and sleep.\nIn the third and final part, you will consolidate your new knowledge with the help of two capstone projects. Both projects combine the same hardware components with one big difference in the software. While in the first project, all of the MicroPython code exists in the same file, in the second project I show you how to modularise the design and break up the code into two files.\nRequired software and hardware\nFor details on the required software and hardware, I have prepared two separate lectures in this section, which I invite you to watch next.\nBut, in summary:\nFor the software, you will the Thonny programming tool, and the MicroPython firmware for the ESP32. Both are open-source and free\nFor the hardware, you will need an ESP32 board, and an assortment of common components like LEDs, resistors, sensors and motors. It doesn’t matter which ESP32 board you have. As long as it is an ESP32, it will work with MicroPython.\nIf you have taken one of my Arduino courses, you probably already have everything you need.\nFor the details, please refer to the two lectures in this section where I go into the details for the required software and hardware.\nOk, what's next???\nI hope that you now have a good understanding of what this course is about and what to expect ahead.\nThe first section contains several free lectures with more detailed information about the course. Feel free to watch them if you wish before enrolling.\nHappy Learning!",
      "target_audience": [
        "People that are familiar with Python that want to program microcontrollers.",
        "People with little programming experience but familiar with basic electronics.",
        "People with experience in the ESP32 using the Arduino IDE."
      ]
    },
    {
      "title": "Introduction to the IoT Development Framework : ESP-IDF",
      "url": "https://www.udemy.com/course/introduction-to-the-iot-development-framework-esp-idf/",
      "bio": "Learn about ESP-IDF from scratch and build an IoT solution using the IoT development framework",
      "objectives": [
        "Understand the project structure of the ESP-IDF",
        "Learn how to get started with the ESP-IDF",
        "Gain in-depth knowledge to implement ESP32 based projects via ESP-IDF",
        "Develop embedded and IoT projects on the Espressif's official IoT Development Framework.",
        "Be confident to design and deploy ESP32 based embedded and IoT projects using ESP-IDF"
      ],
      "course_content": {
        "ESP IDF and Hardware Overview": [
          "Introduction to the course",
          "Hardware requirements of ESP-IDF",
          "Software Overview",
          "VS code ESP-IDF extension installation",
          "Assignment1"
        ],
        "Getting started with ESP-IDF": [
          "ESP-IDF project template",
          "Get started with the Hello World code",
          "Blink an LED with ESP-IDF",
          "Introduction to FreeRTOS",
          "Work with dual cores of ESP32",
          "Assignment2"
        ],
        "Wi-Fi, HTTP servers and Over The Air updates on ESP32": [
          "Operating modes of Wi-Fi in ESP32",
          "Wi-Fi station mode implementation",
          "Wi-Fi softAP mode implementation",
          "HTTP server overview & implementation",
          "Over The Air updates overview",
          "OTA implementation with ESP-IDF",
          "Assignment3"
        ],
        "SPIFFS and peripherals of ESP32": [
          "SPIFFS file system on ESP32",
          "SPIFFS implementation with ESP-IDF",
          "Overview of UART communication",
          "UART implementation with ESP-IDF",
          "Introduction to I2C bus",
          "Interfacing components",
          "Project Implementation : ESP32 - MPU6050",
          "Assignment4"
        ],
        "Capstone Project": [
          "Architecture of the Project",
          "Write to non-volatile storage",
          "Read from the nvs and connect to Wi-Fi",
          "Initialize SPIFFS storage to save HTML file",
          "Test the capstone project",
          "Course Conclusion",
          "Assignment5"
        ]
      },
      "requirements": [
        "Basic understanding of electronics and related concepts",
        "A fair idea of working with ESP32 boards",
        "Basic understanding of embedded C"
      ],
      "description": "Hello learners!\nWelcome to MAKERDEMY's “Introduction to the IoT Development Framework : ESP-IDF” course.\nThis is a beginner level course that will teach you how to install and get started with the ESP-IDF. This course will help you begin with the very basic blink LED code and give you hands-on experience in implementing various IoT projects using this IoT development framework. This course will teach you to build your own IoT projects using ESP32 boards and implementing the same via ESP-IDF. Do you wish to explore and learn how to build projects with ESP-IDF? Want to learn how to work with ESP32 boards and implement embedded and IoT projects via the IoT development framework : ESP-IDF?\nThis course is a one stop destination for getting started with ESP-IDF. By the end of the course, you will become very confident with using the IoT development framework and develop complete embedded or IoT projects. You will learn through demonstrations on getting started with the ESP-IDF and then move onto a capstone project that uses many modules you study throughout the course. If you complete all sections in the course and the course assignments, you are sure to gain in-depth knowledge related to the Espressif's official IoT Development Framework.\nThroughout the course, we have provided a curated collection of original resources. These resources include links to documents for in-depth learning, links, videos, and more. At MAKERDEMY, we have a dedicated instructor team who will promptly answer any of your course-related queries.\nSo, what are you waiting for?! Come, join me in this course. I look forward to being your instructor for this course and introduce you to the IoT Development Framework : ESP-IDF!",
      "target_audience": [
        "An engineer who wants to start working with ESP32 and ESP-IDF",
        "IoT enthusiasts who wish to work with the IoT development framework",
        "Electronics hobbyists who look forward to exploring the world of the Internet of Things",
        "A student who wants to build IoT projects using the ESP-IDF",
        "Anyone with basic programming experience and an interest to learn"
      ]
    },
    {
      "title": "Computer Basics for the Simple Beginner",
      "url": "https://www.udemy.com/course/computer-basics-for-the-simple-beginner/",
      "bio": "A guide for new computer users or those who want to know more to get started with the basics!",
      "objectives": [
        "Know what Windows is",
        "How to operate Windows",
        "Common Terms",
        "The Correct Names of Computer Components",
        "Basic Understanding of the Internet",
        "Basic Computer Security"
      ],
      "course_content": {},
      "requirements": [
        "A Windows PC Computer (Not a MAC) Running Windows 8.1 or higher"
      ],
      "description": "Do you or someone you know understand little to nothing about how to use a computer? Ever wonder what computer terms like virus, mouse, keyboard and antivirus mean? What about all of this downloading and the internet? If you are not sure about those terms or think you may want to know more, this is for you!\nYou hear people talking about all of these weird terms like the Windows Desktop, the start menu and the dreaded virus! You will learn what all of that means in simple, easy to understand terms and actual demonstrations.\nWe will learn the basics of using a computer bit by bit. Each section will be a different computer topic and there will be several lessons in each section. We will learn about using your computer, computer parts such as the mouse, monitor, keyboard, USB and Ethernet as well as topics such as computer security, the internet, problems and troubleshooting as well as a few more advanced topics!\nThis course also includes videos showing features specific to Windows 8.1, 10 and 11! These videos range from basic functions included in each operating system to how to access settings and the layout of your computer desktop. Additionally, we try to cover some of the differences among these operating systems!",
      "target_audience": [
        "Computer Beginners",
        "Want to learn more about using your computer",
        "A basic refresh on windows computers"
      ]
    },
    {
      "title": "IoT based Emergency Health Care System",
      "url": "https://www.udemy.com/course/iot-based-emergency-health-care-system/",
      "bio": "Learn about emergency health tracking system using GSM and GPS module with Arduino board using heart pulse sensor.",
      "objectives": [
        "Understand the principles of programming Arduino microcontroller",
        "Be productive with the Arduino IDE, write, compile and upload sketches, install libraries",
        "How to setup the Arduino software and start outputting code",
        "Understand the ways by which the Arduino can communicate with other devices",
        "Measure your heart rate using a dedicated Arduino-compatible sensor",
        "Interface SIM900A GSM Modem with Arduino",
        "Display the heart rate data on I2C type of 16x2 LCD",
        "Use Arduino to transmit heart rate data via SIM900A module",
        "Use Arduino to receive the exact location of the user with GPS tracker and send the accurate location via SMS",
        "Configure and program sensors and modules like Pulse sensor, I2C type of 16x2 LCD, GSM and GPS modules to work with Arduino",
        "Have the confidence to build a complex electronics project maker and prototyper",
        "Improve technology uses in Hospitals",
        "Transmit the data via SIM900A module to send a message and call to the respective person to get the details",
        "To develop Wearable wrist pulse band"
      ],
      "course_content": {
        "Introduction": [
          "What will you learn from this course?"
        ],
        "Heart Rate sensor with Arduino": [
          "Heart Rate Sensor with Arduino",
          "Let’s get start with Pulse Sensor",
          "Testing the Pulse Sensor",
          "Circuit_Diagram_Heart Rate Sensor with Arduino",
          "Voltage Divider"
        ],
        "Display the heart rate data on I2C type 16x2 LCD": [
          "Display the heart rate data on I2C type 16x2 LCD",
          "16x2 LCD: Interfacing with Arduino",
          "Circuit_Diagram_Display the heart rate data on I2C type 16x2 LCD"
        ],
        "Interfacing SIM900A GSM Module with Arduino": [
          "Interfacing SIM900A GSM Module with Arduino",
          "Booting Up SIM900A and making connections",
          "GSM module: Code for Call using Serial communication",
          "Circuit_Diagram_Interfacing SIM900A GSM Modem with Arduino using Serial",
          "Using a Breadboard",
          "GSM module: Code for Call using SoftwareSerial",
          "Circuit_Diagram_Interfacing SIM900A GSM Modem with Arduino using SoftwareSerial",
          "RS-232 vs. TTL Serial Communication"
        ],
        "Arduino GPS: Get Latitude and Longitude Coordinates": [
          "Arduino GPS: Get Latitude and Longitude Coordinates",
          "GPS Working Explanation and Programming",
          "Circuit_Diagram_Arduino GPS_Get Latitude and Longitude Coordinates",
          "GPS Accuracy"
        ],
        "IoT based Emergency Health Care System": [
          "IoT based Emergency Health Care System",
          "Code_Part I: IoT based Emergency Health Care System",
          "Code_Part II: IoT based Emergency Health Care System",
          "Code_Part III: IoT based Emergency Health Care System",
          "Real-time demonstration_IoT based Emergency Health Care System",
          "Circuit_Diagram_IoT based Emergency Health Care System"
        ],
        "What you have learnt from this course?": [
          "Conclusion"
        ]
      },
      "requirements": [
        "An Arduino Uno",
        "A basic understanding of electricity and electronics",
        "A basic working knowledge of the Arduino Uno is required.",
        "Essential tools: a mini breadboard, jumper wires, a multimeter, a soldering iron and solder, wire cutter",
        "A hands-on projects-based approach with step by step instructions will be used to teach about the Arduino platform",
        "All theory will be explained so you understand all aspects of a project and how/why it works",
        "Line-By-Line Code Reviews so you will understand exactly how the software and hardware play together in a project",
        "1 x SIM900A GSM module, 1 x GPS module, 1 x I2C type 16x2 LCD, 1 x Pulse sensor"
      ],
      "description": "Hello, learners! Greetings from Makerdemy. In this course, you will learn how to program the emergency health tracking system using GSM and GPS module with Arduino board using heart pulse sensor.\n\nThis is an advanced level course on Arduino. This course is designed for advanced makers. We’ll help you to get started with the basics of creating circuits with the Arduino UNO board. We will show how to measure the heart rate using Arduino and display the data on I2C type 16x2 LCD and send the GPS location to the User via SMS. By the end of this course, you would have built Emergency Tracking Systems using GSM and GPS modules.\nThe prerequisite for this course is a basic understanding of electrical and electronic concepts and ability to download and install software on your computer. Along the way, you will learn about programming, sensors, and communications.\nThe course split into five parts:\nProject 1:\nIn this project, we will teach you how to measure your heart rate using a dedicated Arduino-compatible sensor.\nProject 2:\nIn this project, we teach you how to make the connection of I2C type 16x2 LCD and display the message on the screen when the user types on the serial monitor.\nProject 3:\nThis project will explain to you how to make a call using SIM900A GSM module which it connects the Mic and Speaker on GSM. Here, in this project will explain the program using Serial and SoftwareSerial communication methods.\nProject 4:\nIn this project, you will get the accurate location of the user using Arduino GPS_Get Latitude and Longitude Coordinates with SoftwareSerial communication program.\nProject 5:\nIn this project, we will teach you how to measure your heart rate using a dedicated Arduino-compatible sensor. Then, we will transmit the data via SIM900A module to send a message and call to the respective person to get the details. Even we will send the GPS location using GPS module, and also display the heartbeat on the 16x2 LCD screen.\nThis project can be used to develop Wearable for wrist pulse band. This project helps in real time to track the people who are not well and cure them of heart stroke.\nIf you are a technology enthusiast and want to learn the cutting-edge technology, then this is the right course for you.\nI will teach you step by step how to go about building this project. I will also share the code with you so that you can replicate the project yourself.\nAt the end of the course, you'll be fully familiarized with Arduino and ready to build your electronic security system. I look forward to you joining this course. It provides the complete source code of the real time project.\nLet’s dive in to learn the concept one by one.\nWhat are you waiting for? Enroll now!",
      "target_audience": [
        "Anyone interested in learning about programming to interface with a curiosity for making electronics and microcontrollers",
        "Makers who have an existing intermediate or better understanding of electronics",
        "This course will benefit the most students who already have at least a basic working experience with the Arduino Uno",
        "Students over 10 years of age, or younger with with adult supervision. Young students should be supervised at all times when using a soldering iron",
        "Entrepreneurs who need to prototype electronics projects or ideas",
        "Engineering Students - Electronics, Electrical & Computer Science",
        "Electronic Geeks, Hobbiest & Art Students",
        "High School Science Students"
      ]
    },
    {
      "title": "Chip Design 101",
      "url": "https://www.udemy.com/course/chip-design-101/",
      "bio": "learn the chip design basics!",
      "objectives": [
        "After taking the course, you should be able to better comprehend the physical design flow. You will also have a better view while problem solving."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "module - 1, standard cell design": [
          "introduction",
          "schematic",
          "gds",
          "frame view",
          "model",
          "delay and power table",
          "standard cell library",
          "power performance and area"
        ],
        "module - 2, sign-off and variations": [
          "introduction - DRC",
          "lvs",
          "connectivity extraction",
          "device extraction",
          "lvs - example",
          "variation - introduction",
          "process variation",
          "PVT variation",
          "rc variation",
          "ocv"
        ],
        "module - 3, overview of block level design": [
          "introduction",
          "synthesis",
          "dft",
          "combination logic testing",
          "sequential logic testing",
          "different types of cells"
        ],
        "conclusion": [
          "pnr overview",
          "conclusion"
        ]
      },
      "requirements": [
        "basic knowledge from engineering is sufficient for this course"
      ],
      "description": "In this course, you will be learning the basics of chip design. In chip design field, there is no straight forward way to learn something. You will always be thinking you know something very well but still struggle a lot to solve a problem. When it comes to problem solving, only tool that will help you find solutions are the concepts!!! that's our key focus in this course.",
      "target_audience": [
        "Anyone who is starting their career in physical design and curious to learn concepts."
      ]
    },
    {
      "title": "Advanced Embedded Systems with Arduino",
      "url": "https://www.udemy.com/course/learn-to-build-advanced-embedded-systems-using-arduino/",
      "bio": "The super simple beginner friendly course to learn all about Arduino and start creating interesting projects",
      "objectives": [
        "Embedded Systems Programming with Arduino",
        "Learn Arduino Microcontroller Board",
        "Project Making with Arduino",
        "Ultrasonic, Temperature , Humidity, Light, I2C, SPI, SD Card and many such interfaces with Arduino",
        "Arduino Complete project Making",
        "Experimenting with Arduino on hardware (Program downloading)",
        "Experimenting Arduino without having hardware (on simulations)",
        "Learn To use Input and Outputs of Arduino",
        "Interfacing with real world devices like relay, switch, led's and sensors",
        "C programming for arduino"
      ],
      "course_content": {
        "Introduction to The Course": [
          "Introduction"
        ],
        "Introduction To Embedded Systems Concepts": [
          "Embedded System - Part 1",
          "Embedded System - Part 2",
          "Embedded System - Part 3",
          "Embedded System - Part 4",
          "Embedded System - Part 5",
          "Embedded System - Part 6"
        ],
        "What is Arduino?": [
          "Getting Started with Arduino Boards",
          "Writing Your First Arduino Program",
          "Using Online Simulator for Arduino Experiments [When you Don't Have Board]"
        ],
        "Difference Between Conventional C Programming and Arduino Coding": [
          "Arduino Vs C Differences"
        ],
        "How to Use Breadboard for Interfacing Various Sensors with Arduino": [
          "How to Use Breadboard"
        ],
        "Interfacing Light Emitting Diodes (LEDs) with Arduino": [
          "LED Concepts and Hardware Connections",
          "LED Circuit Connections and Experiment on Simulator",
          "LEDs Interfacing on Physical Board and Practical",
          "Task Around Multiple LEDs Interfaced to Arduino"
        ],
        "How to Interface Buzzer with Arduino": [
          "Buzzer Interfacing with Arduino",
          "Tone Generation Using Buzzer"
        ],
        "How to Accept Digital Inputs on Arduino using Simple Switches": [
          "Introduction to Switches",
          "Switch and LED Interface With Arduino",
          "Multiple switches and LEDs Interfacing",
          "Accepting Inputs on Arduino from Logic Output Sensors"
        ],
        "How to use Serial Port (UART) on Arduino Boards": [
          "Introduction to Serial Communication",
          "Serial Communication Program on Arduino",
          "Reading Data Sent From Computer to Arduino",
          "Device Control Using Serial Communication",
          "Using Serial Port of Arduino in Tinkercad Simulation",
          "Up Down Counter Using Serial Port on Arduino"
        ],
        "How to Interface 16x2 Liquid Crystal Display (LCD) with Arduino": [
          "Liquid Crystal Display and Arduino",
          "LCD Programming on Arduino"
        ]
      },
      "requirements": [
        "Strong desire to learn and have fun wit Arduino and embedded systems",
        "Basic Understanding of Electronic Components"
      ],
      "description": "\"Now includes a video on using chatgpt for Arduino code generation!!!!\"\n\n\nNote : Please go through all sample videos before enrolling, I'm getting negative reviews just because some people can't understand my english. It hurts to see such feedback. Please enroll only if you're comfortable with my language. Yes I am an Indian person and yes I have an accent. Although fluent and grammatically error free, yes there's an accent part to it.\nIt takes lots of efforts to build a course, if its not worth your money, you can always take back your money, I request you to please not post negative feedback for wrong reasons\n\n\n\"I believe everyone can learn and excel in technologies with right tools and proper guidance. Hence I make these courses and 50% of all my courses is available for free preview, watch them, if you feel right, enroll!!! I hope you'd like this transparency!!!\"\nThis is for Everyone interested in Arduino's\nI firmly believe that anyone, irrespective of experience, age or technical background can learn and experiment with technologies. With the single goal in mind, I've created this Course on Embedded Systems designing with Arduino.\nAnd I also believe from my personal experience of more than a decade, that\nLEARNING should not be LENGTHY!!!\nMy purpose is to get you started quickly with Arduino and start programming and making systems fast, with less learning and more experimenting. Hence the course is divided into small chunks which you can jump directly at any time and learn any particular module you’re interested in.\n\"What is there to loose if you enroll in this bestseller course? You have a 30 day Full Money Back Guarantee, enroll now and start experimenting on arduino\"\nArduino is probably the number 1 microcontroller board used today in the world in a variety of industries, be it for prototyping the new product or just creating a hobby project for your home. Arduino is no 1 choice of many developers as well as hobbyists. And this course is to make you an expert in Arduino. Yes, you've read it correctly, an expert!!!\nThis course includes many interfaces starting from LEDs to I2C interface and memory card data logger. See a complete list below\nThis course is suitable for Everyone Including:\nComplete Newbee's in the amazing world of arduino's\nArduino Hobbyists\nStudents\nWorking Professionals\nBusiness Owners\n\"What is there to loose if you enroll in this bestseller course? You have a 30 day Full Money Back Guarantee, enroll now and start experimenting on arduino\"\nThis is a complete course on learning Arduino Programming, interfacing and creating projects using Arduino with more than 30 different projects and tasks included with this course. Everything related to Arduino programming and connecting various interfaces with Arduino is covered in complete details, yet the course length is such that anyone can finish it within a single week.\nThis is a complete hand on driven course with more than 30 different programs/projects to be done throughout.\nYou can enroll and start experimenting with this course even if you do not have Arduino board!!!\nYes, I’ve included steps and instructions to use a free online simulator for Arduino where you can perform most of your programs, so if you don’t have Arduino board, or just planning to purchase, you can still enroll to this course, start learning and gather your hardware later.\nList of Hardware Interfaces to learn\nLEDs\nSwitches\nBuzzer\nRelay\nDC Motor\nServo Motor\nPWM\nAnalog Input\nVoltmeter\nThermometer\nLight Sensor\nTemperature and Humidity sensor\nKeypad Interfacing\nUltrasonic Distance Sensor\nSerial port\nLiquid Crystal Display\nI2C\nSPI\nReal-Time Clock\nMemory Card interfacing and data logger\nUsage of EEPROM Memory.\nYou're also going to learn about\nHow to use a breadboard\nwhat's the difference between C and Arduino's C programming\nSimulating Arduino using online tool\nProject Making Tips\n\n\nSupport matters most!!!\n\"What is there to loose if you enroll in this bestseller course? You have a 30 day Full Money Back Guarantee, enroll now and start experimenting on arduino\"\nWhats the best use of learning anything like arduino? Creating projects isn't it? That is exactly I wanted to do when I started learning electronics. It was not only my passion but also my full time profession. And I know the pain if there is no one to tell you, why your board got damaged, why the code is not being uploaded to the board. What to do with the relay chattering all the time? Why my sensor readings are not perfect and on and on, I've gone through them all and in a hard way, solved them. I don't want that for you.\nBecause unlike other courses on Udemy, this course comes with a personalized instructor support. I'm always available to answer the questions and most questions are answered within couple of hours of posting and many times within an hour!!!\nAnyone can not only learn but excel in arduino and hardware project making\nDon’t get overwhelmed by the long list of interfaces to study. All of these are included to make you an expert in as little time as possible. Although it's an advanced course, it's equally applicable to everyone. Even if you’re a complete newbie who’s never done coding before or never seen or used Arduino, you can still join and start experimenting.\nAll the source codes are included in the download area of the respective lessons so that you can either try them yourself or just directly download them and start using.\nI’ve been training and developing Arduino based systems for about 10 hours a day for more than 10 years, I’ve trained students from age 7 to 70 and have trained more than 10000 students from over 65+ countries. So when I say you can learn and excel in Arduino in the quickest possible time, I mean it.\nEnroll now and start experimenting with Arduino!!!",
      "target_audience": [
        "Professionals looking to sharpen Hardware skills",
        "Students looking for help in their studies and project works",
        "Hobbyists trying to develop next weekend project",
        "Artists who're trying to learn Arduino because of its simplicity and power to create amazing projects",
        "Anyone who's interested in Creating projects",
        "School Students looking for Maker Skills"
      ]
    },
    {
      "title": "FreeRTOS From Ground Up™ on ARM Processors (REVISED)",
      "url": "https://www.udemy.com/course/freertos-on-arm-processors/",
      "bio": "RTOS : Build RealTime embedded applications with FreeRTOS. Practice on STM32 and TIVA C boards",
      "objectives": [
        "Build Multitask real-time applications with FreeRTOS",
        "Port FreeRTOS to any ARM Processor",
        "Master FreeRTOS Task Management features",
        "Master FreeRTOS Resource Management features",
        "Master FreeRTOS Task Synchronization features",
        "Master FreeRTOS Event Management features",
        "Calculate the CPU Utilization of an RTOS",
        "Understand the Internals of an RTOS Kernel",
        "Implement and explain popular scheduling algorithms",
        "Give a lecture on the FreeRTOS RealTime Kernel",
        "Master FreeRTOS Interrupt Management features",
        "Master FreeRTOS Time Management features",
        "Master FreeRTOS Interrupt Run-Time statistics features",
        "Build a board support package from scratch",
        "Understand Rate Monotonic Schedulers",
        "Understand First Come First Served Schedulers",
        "Understand Round-Robin Schedulers",
        "Understand Weighted-Round-Robin Schedulers",
        "Understand ARM Design and ARchitecture",
        "Understand ARM OS Support Features"
      ],
      "course_content": {
        "Introduction": [
          "What is a Realtime Operating System (RTOS)",
          "Understanding Context Switching",
          "Comparing RTOS with ISR and Busy Wait Systems",
          "The Concept of a Thread"
        ],
        "Setting Up": [
          "Notice : Development Board Choice",
          "Downloading CubeIDE",
          "Setting Up STM32CubeIDE",
          "Installing Packages",
          "Overview"
        ],
        "Introduction to FreeRTOS": [
          "FreeRTOS naming conventions",
          "Understanding FreeRTOS Macro Names",
          "Coding : Configuring our System"
        ],
        "FreeRTOS Thread Management": [
          "Overview of the TaskCreate functions",
          "Source Code Download",
          "Coding : Creating Tasks",
          "Coding : Creating Tasks from other Tasks",
          "Coding : Working with Task functions",
          "Coding : Understanding Task Priorities",
          "Coding : Changing a Task Priority in Runtime",
          "Coding : Reading the Priority of a Task",
          "Coding : Suspending a Task",
          "Coding : Resuming a suspended Task",
          "Coding : Terminating a Task",
          "Understanding Task States",
          "Using the Blocked State to create delays",
          "Coding : Blocking a Task",
          "Coding : Executing Tasks Periodically",
          "Overview of the Idle Task",
          "Coding : Working with Idle Task",
          "Overview of the Tick Hook"
        ],
        "FreeRTOS Queue and Queueset Management": [
          "Understanding Queues and Queuesets",
          "Coding : Working with Queues",
          "Coding : Updating printf",
          "Coding : Synchronizing Tasks with Queues",
          "Coding : Sending more complex data with Queues",
          "Coding : Working with Queuesets"
        ],
        "Understanding FreeRTOS Semaphores": [
          "Understanding Semaphores",
          "Coding : Working with Binary Semaphores"
        ],
        "Developing Some Drivers": [
          "Coding : Developing some driver (Pt.1)",
          "Coding : Developing some driver (Pt.2)",
          "Coding : Testing the drivers"
        ],
        "Understanding FreeRTOS Semaphores (contd.)": [
          "Coding : Working with a Mutex",
          "Coding : Working with Counting Semaphores"
        ],
        "Gatekeepers": [
          "Coding : Implementing the Gatekeeper task"
        ],
        "FreeRTOS Software Timers": [
          "Overview of Software Timers",
          "Coding : Working with Software Timers",
          "Coding : Stopping the Auto-Reload Timer during runtime"
        ]
      },
      "requirements": [
        "STM32F411-NUCLEO",
        "No programming experience needed - I'll teach you everything you need to know.",
        "We shall be using the STM32CubeIDE which is FREE."
      ],
      "description": "This course teaches you the foundations of real-time systems and how to build real-time applications using FreeRTOS ,one of the most popular real-time operating systems  for embedded systems.  The course gives a detailed overview of the characteristics of the FreeRTOS real-time kernel,  provides a detailed tutorial on the APIs to implement the various features of FreeRTOS  and then goes on to build about 50 real-time projects .\nThis course does not assume prior knowledge of real-time systems and application programming. By the end of this course you should be able to build your own multitask FreeRTOS  real-time applications which use all the features of a modern real-time application (such as semaphores, mutexes, event flags, hooks, queues, mailboxes etc )and  test their performance.You should also be able to : Calculate the CPU Utilization of an RTOS, Understand Rate Monotonic Schedulers,port FreeRTOS  to any ARM processor,Understand Round-Robin Schedulers,Understand Weighted-Round-Robin Schedulers, Understand First Come First Served Schedulers,Understand the Internals of an RTOS kernel, Implement and explain popular scheduling algorithms and so much more. Please take a look at the full course curriculum.\n\n\n----------Some highlights---------------\nBuild Multitask real-time applications with FreeRTOS\nPort FreeRTOS to any ARM Processor\nMaster FreeRTOS Task Management features\nMaster FreeRTOS Resource Management features\nMaster FreeRTOS Task Synchronization features\nMaster FreeRTOS Event Management features\nCalculate the CPU Utilization of an RTOS\nUnderstand the Internals of an RTOS Kernel\nImplement and explain popular scheduling algorithms\nGive a lecture on the FreeRTOS RealTime Kernel\nMaster FreeRTOS Interrupt Management features\nBuild a board support package from scratch",
      "target_audience": [
        "If you are an absolute beginner to embedded systems, then take this course.",
        "If you are an experienced embedded developer and want to learn how to professionally develop embedded applications for ARM processors, then take this course."
      ]
    },
    {
      "title": "Electric Vehicles Specialization",
      "url": "https://www.udemy.com/course/electric-vehicles-specialization/",
      "bio": "Electric Vehicles: Pioneering Sustainable Transportation with Cutting-Edge Technology and Environmental Innovation",
      "objectives": [
        "Define Electric Vehicles and underlying technologies",
        "Learn the Science of Electric Vehicles",
        "Get introduced to Electric Vehicle Engineering",
        "Take a deep-dive into cutting-edge Electric Vehicle Technology",
        "Gain a comprehensive understanding of Electric and Hybrid Buses"
      ],
      "course_content": {
        "The Science of Electric Vehicles": [
          "Part 1 - The Science of Electric Vehicles",
          "Part 2 - The Science of Electric Vehicles",
          "Part 3 - The Science of Electric Vehicles",
          "Part 4 - The Science of Electric Vehicles",
          "Part 5 - The Science of Electric Vehicles",
          "Part 6 - The Science of Electric Vehicles",
          "Part 7 - The Science of Electric Vehicles",
          "Part 8 - The Science of Electric Vehicles",
          "Part 9 - The Science of Electric Vehicles",
          "Part 10 - The Science of Electric Vehicles",
          "Part 11 - The Science of Electric Vehicles"
        ],
        "Electric Vehicle Engineering": [
          "Part 1 - Electric Vehicle Engineering",
          "Part 2 - Electric Vehicle Engineering",
          "Part 3 - Electric Vehicle Engineering",
          "Part 4 - Electric Vehicle Engineering",
          "Part 5 - Electric Vehicle Engineering",
          "Part 6 - Electric Vehicle Engineering",
          "Part 7 - Electric Vehicle Engineering",
          "Part 8 - Electric Vehicle Engineering",
          "Part 9 - Electric Vehicle Engineering"
        ],
        "Electric Vehicle Technology": [
          "Part 1 - Electric Vehicle Technology",
          "Part 2 - Electric Vehicle Technology",
          "Part 3 - Electric Vehicle Technology",
          "Part 4 - Electric Vehicle Technology",
          "Part 5 - Electric Vehicle Technology",
          "Part 6 - Electric Vehicle Technology",
          "Part 7 - Electric Vehicle Technology",
          "Part 8 - Electric Vehicle Technology",
          "Part 9 - Electric Vehicle Technology",
          "Part 10 - Electric Vehicle Technology",
          "Part 11 - Electric Vehicle Technology",
          "Part 12 - Electric Vehicle Technology",
          "Part 13 - Electric Vehicle Technology",
          "Part 14 - Electric Vehicle Technology",
          "Part 15 - Electric Vehicle Technology",
          "Part 16 - Electric Vehicle Technology",
          "Part 17 - Electric Vehicle Technology"
        ],
        "Electric and Hybrid Buses": [
          "Part 1 - Electric and Hybrid Buses",
          "Part 2 - Electric and Hybrid Buses",
          "Part 3 - Electric and Hybrid Buses",
          "Part 4 - Electric and Hybrid Buses",
          "Part 5 - Electric and Hybrid Buses",
          "Part 6 - Electric and Hybrid Buses",
          "Part 7 - Electric and Hybrid Buses",
          "Part 8 - Electric and Hybrid Buses",
          "Part 9 - Electric and Hybrid Buses",
          "Part 10 - Electric and Hybrid Buses",
          "Part 11 - Electric and Hybrid Buses",
          "Part 12 - Electric and Hybrid Buses"
        ],
        "Developing Charging Infrastructure": [
          "Part 1 - Developing Charging Infrastructure",
          "Part 2 - Developing Charging Infrastructure",
          "Part 3 - Developing Charging Infrastructure",
          "Part 4 - Developing Charging Infrastructure",
          "Part 5 - Developing Charging Infrastructure",
          "Part 6 - Developing Charging Infrastructure",
          "Part 7 - Developing Charging Infrastructure",
          "Part 8 - Developing Charging Infrastructure",
          "Part 9 - Developing Charging Infrastructure",
          "Part 10 - Developing Charging Infrastructure",
          "Part 11 - Developing Charging Infrastructure",
          "Part 12 - Developing Charging Infrastructure",
          "Part 13 - Developing Charging Infrastructure",
          "Part 14 - Developing Charging Infrastructure",
          "Part 15 - Developing Charging Infrastructure",
          "Part 16 - Developing Charging Infrastructure"
        ],
        "Small Electric Vehicles": [
          "Part 1 - Small Electric Vehicles",
          "Part 2 - Small Electric Vehicles",
          "Part 3 - Small Electric Vehicles",
          "Part 4 - Small Electric Vehicles",
          "Part 5 - Small Electric Vehicles",
          "Part 6 - Small Electric Vehicles",
          "Part 7 - Small Electric Vehicles",
          "Part 8 - Small Electric Vehicles",
          "Part 9 - Small Electric Vehicles",
          "Part 10 - Small Electric Vehicles",
          "Part 11 - Small Electric Vehicles",
          "Part 1 2 - Small Electric Vehicles",
          "Part 13 - Small Electric Vehicles",
          "Part 14 - Small Electric Vehicles"
        ],
        "End of Course Quiz": [
          "End of Course Quiz"
        ]
      },
      "requirements": [
        "Enthusiasm and determination to make your mark on the world!"
      ],
      "description": "A warm welcome to the Electric Vehicles Specialization course by Uplatz.\n\n\nElectric Vehicles (EVs) represent a paradigm shift in transportation, offering a cleaner, more sustainable alternative to traditional fossil fuel-powered vehicles. At their core, EVs utilize electric motors powered by rechargeable battery packs, eliminating the need for gasoline or diesel fuel. This technology not only reduces greenhouse gas emissions and air pollution but also lessens dependence on finite fossil fuel resources.\nOne of the key innovations driving the advancement of electric vehicles is battery technology. Over the years, lithium-ion batteries have emerged as the dominant technology for EVs due to their high energy density, durability, and rechargeability. Ongoing research and development efforts focus on improving battery efficiency, reducing costs, and extending range to make EVs more competitive with conventional vehicles.\nAnother area of innovation is in charging infrastructure. The proliferation of fast-charging stations and advancements in charging technology are addressing concerns about range anxiety and making EVs more practical for everyday use. Additionally, smart grid integration and vehicle-to-grid (V2G) technology enable EVs to not only consume electricity but also feed energy back into the grid, enhancing overall grid stability and resilience.\nFurthermore, advancements in electric drivetrain technology have led to the development of high-performance EVs capable of rivalling traditional internal combustion engine vehicles in terms of speed, acceleration, and handling. Electric motors offer instant torque delivery, providing exhilarating driving experiences while also being more energy-efficient.\nElectric vehicles represent a convergence of technological innovation, environmental consciousness, and economic feasibility. As the automotive industry continues to invest in research and development, EVs are poised to play a significant role in shaping the future of transportation, offering a sustainable solution to the challenges of urban mobility and climate change.\n\n\nElectric Vehicles Specialization - Course Curriculum\n\n\nThe Science of Electric Vehicles - I\nThe Science of Electric Vehicles - II\nThe Science of Electric Vehicles - III\nThe Science of Electric Vehicles - IV\nThe Science of Electric Vehicles - V\nThe Science of Electric Vehicles - VI\nThe Science of Electric Vehicles - VII\nThe Science of Electric Vehicles - VIII\nThe Science of Electric Vehicles - IX\nThe Science of Electric Vehicles - X\nThe Science of Electric Vehicles - XI\nElectric Vehicle Engineering - I\nElectric Vehicle Engineering - II\nElectric Vehicle Engineering - III\nElectric Vehicle Engineering - IV\nElectric Vehicle Engineering - V\nElectric Vehicle Engineering - VI\nElectric Vehicle Engineering - VII\nElectric Vehicle Engineering - VIII\nElectric Vehicle Engineering - IX\nElectric Vehicle Technology - I\nElectric Vehicle Technology - II\nElectric Vehicle Technology - III\nElectric Vehicle Technology - IV\nElectric Vehicle Technology - V\nElectric Vehicle Technology - VI\nElectric Vehicle Technology - VII\nElectric Vehicle Technology - VIII\nElectric Vehicle Technology - IX\nElectric Vehicle Technology - X\nElectric Vehicle Technology - XI\nElectric Vehicle Technology - XII\nElectric Vehicle Technology - XIII\nElectric Vehicle Technology - XIV\nElectric Vehicle Technology - XV\nElectric Vehicle Technology - XVI\nElectric Vehicle Technology - XVII\nElectric and Hybrid Buses - I\nElectric and Hybrid Buses - II\nElectric and Hybrid Buses - III\nElectric and Hybrid Buses - IV\nElectric and Hybrid Buses - V\nElectric and Hybrid Buses - VI\nElectric and Hybrid Buses - VII\nElectric and Hybrid Buses - VIII\nElectric and Hybrid Buses - IX\nElectric and Hybrid Buses - X\nElectric and Hybrid Buses - XI\nElectric and Hybrid Buses - XII\nDeveloping Charging Infrastructure - I\nDeveloping Charging Infrastructure - II\nDeveloping Charging Infrastructure - III\nDeveloping Charging Infrastructure - IV\nDeveloping Charging Infrastructure - V\nDeveloping Charging Infrastructure - VI\nDeveloping Charging Infrastructure - VII\nDeveloping Charging Infrastructure - VIII\nDeveloping Charging Infrastructure - IX\nDeveloping Charging Infrastructure - X\nDeveloping Charging Infrastructure - XI\nDeveloping Charging Infrastructure - XII\nDeveloping Charging Infrastructure - XIII\nDeveloping Charging Infrastructure - XIV\nDeveloping Charging Infrastructure - XV\nDeveloping Charging Infrastructure - XVI\nSmall Electric Vehicles - I\nSmall Electric Vehicles - II\nSmall Electric Vehicles - III\nSmall Electric Vehicles - IV\nSmall Electric Vehicles - V\nSmall Electric Vehicles - VI\nSmall Electric Vehicles - VII\nSmall Electric Vehicles - VIII\nSmall Electric Vehicles - IX\nSmall Electric Vehicles - X\nSmall Electric Vehicles - XI\nSmall Electric Vehicles - XII\nSmall Electric Vehicles - XIII\nSmall Electric Vehicles - XIV\n\n\nA career in electric vehicles (EVs) offers exciting opportunities at the forefront of sustainable transportation and technological innovation.\nSome potential career paths within the electric vehicle industry are:\nElectric Vehicle Engineering: This field involves designing and developing electric vehicles, including components such as electric motors, battery systems, power electronics, and vehicle control systems. Roles may include electrical engineer, mechanical engineer, systems engineer, or automotive engineer.\nBattery Technology: Battery technology is a crucial aspect of electric vehicles. Careers in this field focus on researching, designing, and improving battery chemistries, materials, and manufacturing processes. Roles may include battery engineer, materials scientist, electrochemist, or battery manufacturing specialist.\nCharging Infrastructure: With the growing demand for electric vehicles, there is a need for expanding and improving charging infrastructure. Careers in this area involve planning, designing, installing, and maintaining charging stations. Roles may include electrical engineer, project manager, infrastructure planner, or electrician.\nElectric Vehicle Software and Control Systems: Electric vehicles rely heavily on software and control systems to manage power distribution, battery charging, regenerative braking, and other functions. Careers in this field involve developing software algorithms, embedded systems, and vehicle control strategies. Roles may include software engineer, control systems engineer, or embedded systems developer.\nResearch and Development: Research institutions, government agencies, and private companies are investing in R&D to advance electric vehicle technology. Careers in this area focus on conducting research, testing prototypes, and pushing the boundaries of innovation in electric transportation. Roles may include research scientist, research engineer, or R&D project manager.\nSales and Marketing: As electric vehicles become more mainstream, there is a growing need for professionals in sales, marketing, and business development. Careers in this field involve promoting electric vehicles, building partnerships with stakeholders, and educating consumers about the benefits of EVs. Roles may include sales representative, marketing manager, business development specialist, or EV advocate.\nPolicy and Advocacy: Government policies and regulations play a significant role in shaping the adoption of electric vehicles. Careers in policy and advocacy focus on influencing legislation, developing incentives, and promoting initiatives to support the transition to electric transportation. Roles may include policy analyst, government relations specialist, or sustainability consultant.\nA career in electric vehicles offers diverse opportunities to contribute to the advancement of sustainable transportation and make a positive impact on the environment and society. With rapid growth and innovation in the EV industry, there is ample room for professionals with various backgrounds and skill sets to thrive and shape the future of mobility.",
      "target_audience": [
        "Electrical Vehicle Research Engineers",
        "Electrical & Electronics Engineers",
        "Anyone interested in electric vehicles and underlying technologies",
        "Beginners & newbies in electric vehicles",
        "Battery Test Engineers (Electric Vehicles)",
        "Automotive Engineers",
        "Embedded Engineers",
        "Electric Vehicles Application Engineers",
        "Data Analysts - Electric Vehicle Research",
        "Electric Vehicles Infrastructure Officers",
        "EV/Automotive Electrical Technicians",
        "EV Systems Integration Engineers"
      ]
    },
    {
      "title": "Arduino Pro IDE: Code like A Pro & Debug Your Arduino Board",
      "url": "https://www.udemy.com/course/arduino-pro-ide-code-like-a-pro-debug-your-arduino-board/",
      "bio": "Unleash full power of Arduino Board with the All new Arduino Pro IDE and Debug Your Arduino Code in no Time",
      "objectives": [
        "Arduino Pro IDE User interface explained",
        "Be one of the first to use Arduino in Pro Mode",
        "New features tips and tricks",
        "Debugging your code natively with the all new Arduino Pro IDE debug features",
        "Why You should use the new Pro mode!"
      ],
      "course_content": {},
      "requirements": [
        "Internet Connection",
        "Computer or laptop"
      ],
      "description": "Unleash the full power of Arduino Board with the All-new Arduino Pro IDE and Debug Your Arduino Code in no Time\nEnjoy the new Look and Feel with a Modern, fully-featured Arduino IDE development environment\nwith features like Dual Mode; Classic Arduino look and Pro (File System view), Board and Library Manager, and much more.\n\n\nWhy you should take this course?\nIn this course you will learn many things about programming that will be of use for all of your future projects\nThis course will show beginner and intermediate users alike how to code like a pro\nLearn how to use Arduino Pro IDE, the IDE from the official developer of Arduino\nLearn how to debug your Arduino Code so it doesn't take hours and hours of time trying to find a bug\nLearn new tricks on what each function does and their parameters so you can code faster and more efficiently\nUnleash full power of Arduino Board with the new All new Arduino Pro IDE & Debug Your Arduino Code in no Time\n\n\nYou will get to know:\nArduino Pro IDE User interface\nBe one of the first to use Arduino in Pro Mode\nNew features tips and tricks\nDebugging your code natively with the all-new Arduino Pro IDE debug features\nWhy You should use the new Pro mode!",
      "target_audience": [
        "Arduino Geeks",
        "Tech Geeks"
      ]
    },
    {
      "title": "Mainframe : The Complete TSO/ISPF from Beginner to Expert",
      "url": "https://www.udemy.com/course/master-tso-ispf-on-mainframe-from-scratch-to-advanced-level/",
      "bio": "Best TSO/ISPF Course. TSO and ISPF commands are explained in detail. Simplified COBOL covered as bonus along with JCL.",
      "objectives": [
        "Master the TSO/ISPF commands on Mainframe to excel in your work and project",
        "Students will be able to create basic COBOL program and JCL and perform all TSO/ISPF operations in them.",
        "Perform all the major TSO/ISPF operations and line commands on COBOL Program",
        "Reduce daily work by 20% by applying these TSO/ISPF commands",
        "Write all TSO/ISPF commands on your mainframe server and use it in your project.",
        "Manipulate Keys to display your own custom keys",
        "Relation between TSO and ISPF and create PS and PDS file",
        "Change the settings in your ISPF screen",
        "Understand library inside utilities",
        "Effortlessly master dataset utilities",
        "Explore deep into foreground and batch processing",
        "Perform major operations inside SPOOL - SDSF",
        "Advanced TSO/ISPF options - Advanced CREATE, different ways to resolve space issue, scrolling, auto fill and so on",
        "Guided Illustration of basic COBOL Program is covered",
        "Basic Knowledge on VSAM is covered as well",
        "The Course also covers DB2 operations like DDL and DML as bonus lectures"
      ],
      "course_content": {},
      "requirements": [
        "You should have a PC with internet connection",
        "It is ideal to have a mainframe id for this course. I will also show you a free option which has certain limitation.",
        "No Previous programming language is required"
      ],
      "description": "\"Welcome to the Most In-Depth and Quality Content Course of TSO/ISPF from a Real Expert with more than 15 years of Experience.\"\nThe Course is full of quality content that you will not find anywhere on the Internet\nLearn from an Expert who has a passion for training\nThe Course covers Real Training with the aim to provide knowledge that is similar to corporate training.\n\n\n===========================================================================================\nSome of the Reviews from my students!!!!\n\n\"Sandeep is a great Instructor and the course gives a great beginning to my career on mainframes.\"\n\"I have zero experience on Mainframe. This Course starts with basics and provides relevant examples which i can apply straight away in my job. Thanks for creating such a great Course. Looking forward to other Courses from you.\"\n\"EI instructor conoce mucho acerca del tema, no es ningún improvisado. La manera de abordar los temas totalmente puntuales. Personalmente soy muy Exquisito con cursos Online y este curso lo considero muy bueno. Sugiero mejorar los subtítulos y mejorar la dicción (si se le entiende pero podría mejorar). Continuare con JCL . Saludos\"\n\n\nJoin this course which is the best TSO/ISPF course on UDEMY. I will Code all the TSO/ISPF commands along the way!!!\n\n\"This the Best Seller Course on Udemy\"\n“There’s a reason this course is a bestseller and highest rated on Udemy...”\nWant to begin your career on Mainframe with no previous coding experience and are confused on joining which course on TSO/ISPF to understand from the basics to the advanced level?\nYou have come to the right place. This is the most complete and in-depth Course on TSO/ISPF considered in UDEMY. If you do not believe me, Please have a look at the Course content carefully and ask a few questions from yourself.\nDoes a real-time expert teach the Course? I have more than 15  years of experience as an Instructor and more than 10 years of experience on Mainframe.I firmly believe that if an Instructor does not have good experience, he/she will flood the course with poor content.\nIs the Course content clear and Precise? I bet you will not get better Course content than this. Please have a look at all the courses and choose wisely.\nWill the Course be In-depth? The Course covers In-Depth knowledge of TSO/ISPF. The amount of Knowledge that is covered in this course is great.\nHow is the quality of the Content? In Mainframes, there is a lot of low-quality content which is spread throughout the internet. Be wise in choosing the course which has the best content and is presented in a good way to provide maximum output.\nThe Course assumes no prior knowledge of Mainframes and teaches you from absolute beginners.\nMost of my students personally message me about their success with this Course. One of my students even surprised me by saying - After taking up this Course, I knew even more TSO/ISPF command than my seniors.\nOnce you Enroll for this Course, you get lifetime access to this course and you will get all the future updates. you also get a Certification of Completion once you complete the Course.\nCaptions\nThe Course has the most accurate Captions. Have a look.\nDo you want to start on Mainframe but have no experience with Mainframes?\nIf you have some prior knowledge of Mainframes or if you are a complete fresher, you are at the right place. The Course teaches you to complete TSO/ISPF right from Scratch to an Advanced level. The course goes one level up and provides a basic introduction to COBOL, JCL, VSAM, and DB2\nWhat makes this Course unique and a Best Seller?\nWell, the course has everything you need to master TSO/ISPF commands. If you want to build a career in Mainframe, TSO/ISPF is a 'MUST HAVE' skill and this is the starting point of Mainframe. The Course gives you a path to learn COBOL, JCL, VSAM, and DB2 as well.\nThere’s no risk involved in taking this Course!\nThis course comes with a 30-day money-back guarantee. I am sure that this is the best course on TSO/ISPF and you can compare the content which is provided in this course against any TSO/ISPF Course I guarantee you that you will not get such good structured content anywhere. Still, if you are not completely satisfied with the course, please let us know and we will provide a refund without asking any questions.\nWhat if you are stuck?\nI personally answer all the questions which are asked here. If you are stuck anywhere, ask a question or you can message me directly and I will answer all your doubts.\nAre you getting updated content?\nYes, I keep updating the content always to make sure, I provide all the information to my students.\n\n\nOnce you enroll for this course-\n1) Learn how to connect to the Mainframe\n2) Learn more than 100 TSO/ISPF commands with real-time examples.\n3) Course empowers students to learn COBOL and JCL as well.\n4) Basic COBOL, JCL, VSAM, and DB2 training is provided as a supplementary topics to all my students.\n5) Students will be able to perform TSO/ISPF operations by creating a COBOL and JCL.\n6) Create a strong knowledge base on TSO/ISPF and apply it to your project.\n7) Think about when you need to apply a particular TSO/ISPF command.\n8) Practice all major Line commands in a PDS or PS\n9) Create a PS and PDS file.\n10) Build your own set of keys\n11) You will be able to perform most of the TSO/ISPF operations inside a file\n12) Save at least 20% of the daily time which you consume to perform TSO/ISPF operations.\n\n\nNote:\nTo understand the complete Mainframe, a professional must have TSO/ISPF skills on the Mainframe server",
      "target_audience": [
        "Anyone who wants to master TSO/ISPF can take up this course. This teaches TSO/ISPF from Scratch to Advanced level",
        "The Course primarily focuses on TSO/ISPF but supplementary information is provided on COBOL and JCL to make sure that students are able to create COBOL and JCL and perform TSO/ISPF operations.",
        "Anyone who wants to understand how to create a COBOL Program can attend this course",
        "Anyone who wants to understand about JCL and want to build their own JCL can attend this course.",
        "If you have knowledge on Mainframe then it will be beneficial but if you don't know what are Mainframe, i have explained about mainframes at the beginning of the course",
        "Be ready to practice all TSO and ISPF commands while i show it to you",
        "When starting to learn Mainframe, TSO/ISPF is the first step"
      ]
    },
    {
      "title": "Embedded Systems with AVR ATMEGA32 Microcontroller",
      "url": "https://www.udemy.com/course/embedded-systems-with-avr-atmega32-microcontroller/",
      "bio": "An In - Depth Approach to Embedded Systems Programming",
      "objectives": [
        "Detailed theoretical aspects of ATMEGA32 MCU (Architecture, Clock Sources, Programming Techniques, Fuse and Lock Bits, etc.)",
        "Detailed concepts of MCU programming and thorough understanding of ATMEGA32 peripherals.",
        "Programming of Basic ATMEGA32 peripherals (GPIO, UART, ADC, External Interrupts, On - Board NVS, Analog Comparator).",
        "Working and programming of critical ATMEGA32 peripherals (Timers, Timer CTC Mode, Counter Mode, Timer Input Capture Mode, PWM)",
        "Some more important topics in MCU programming (Watchdog Timer and Low - Power Modes).",
        "Implementation of embedded system communication protocols (SPI and I2C) along with interfacing of related external peripherals and MCU to MCU communication.",
        "Theory and interfacing of Basic external peripherals (LEDs, Pushbuttons, SPDT Relay, 16x2 LCD, DC Motors with L293D / L298N Motor Drivers, Servo Motors).",
        "More basic peripheral programming (Stepper Motor, Dot Matrix Display, 7 Segment Display).",
        "Complex peripheral programming (KS0108, ST7920, Nokia 5110 Graphical LCDs and SSD1306 OLED Display).",
        "Extraction of vital information from datasheet and other relevant technical documents for programming / interfacing on - board or external peripherals.",
        "Hands - On implementation / testing of each and every circuit and program explained in this course.",
        "Methods for remote control of standard bench equipment like DSO, Signal Generator and Bench Top DC Power Supply."
      ],
      "course_content": {
        "Introduction": [
          "Introducing the Course",
          "Overview of ATMEGA32 Controller",
          "Architecture of ATMEGA32 Controller",
          "Memory Organization of ATMEGA32 Controller",
          "Fuse and Lock Bits of ATMEGA32 Controller",
          "Clock Sources and Distribution in ATMEGA32 Controller",
          "Programming Techniques of ATMEGA32 Controller",
          "Parts Equipment and Software Needed",
          "Working with ATMEL Studio 7",
          "Setup and Downloading Test Program into the Controller",
          "Controlling Signal Generator and DC Power Supply using PC",
          "Controlling and Monitoring DSO using PC"
        ],
        "GPIO Programming": [
          "The Concept of GPIO",
          "GPIO Registers in ATMEGA32",
          "Circuit Diagram for Testing GPIO Programs",
          "GPIO Program - Dancing LED's",
          "GPIO Program - Pushbutton Interface"
        ],
        "Interfacing Basic Peripherals": [
          "Theory of SPDT Relay",
          "Interfacing SPDT Relay with ATMEGA32 MCU",
          "Theory of DC Motor",
          "L293D and L298N Motor Drivers",
          "Interfacing DC Motor with ATMEGA32 MCU - Part 1",
          "Interfacing DC Motor with ATMEGA32 MCU - Part 2",
          "Theory of Stepper Motors",
          "Interfacing Stepper Motor with ATMEGA32 MCU - Part 1",
          "Interfacing Stepper Motor with ATMEGA32 MCU - Part 2",
          "Theory of 7 Segment Display",
          "Interfacing 7 Segment Display with ATMEGA32 MCU - Part 1",
          "Interfacing 7 Segment Display with ATMEGA32 MCU - Part 2",
          "Interfacing 7 Segment Display with ATMEGA32 MCU - Part 3",
          "Theory of 8x8 Dot Matrix Display",
          "Interfacing 8x8 Dot Matrix Display with ATMEGA32 MCU - Part 1",
          "Interfacing 8x8 Dot Matrix Display with ATMEGA32 MCU - Part 2",
          "Theory of 16 x 2 Alphanumeric LCD",
          "Interfacing 16 x 2 Alphanumeric LCD with ATMEGA32 MCU - Part 1",
          "Interfacing 16 x 2 Alphanumeric LCD with ATMEGA32 MCU - Part 2",
          "Interfacing 16 x 2 Alphanumeric LCD with ATMEGA32 MCU - Part 3",
          "Interfacing 16 x 2 Alphanumeric LCD with ATMEGA32 MCU - Part 4",
          "Theory of 4x4 Hex Keypad",
          "Interfacing 4x4 Hex Keypad with ATMEGA32 MCU - Part 1",
          "Interfacing 4x4 Hex Keypad with ATMEGA32 MCU - Part 2"
        ],
        "External Interrupt Programming": [
          "Concept and Working of Interrupts",
          "External Interrupts in ATMEGA32",
          "Programming External Interrupts in ATMEGA32"
        ],
        "UART Programming": [
          "Concept of Serial Communication",
          "Details of Asynchronous Serial Communication",
          "UART Registers in ATMEGA32 MCU",
          "Circuit Diagram and RS232 Interface",
          "Testing UART in ATMEGA32 MCU - Part 1",
          "Testing UART in ATMEGA32 MCU - Part 2",
          "Testing UART in ATMEGA32 MCU - Part 3",
          "Testing UART Based Interrupts in ATMEGA32 MCU"
        ],
        "ADC Programming": [
          "Concept of ADC",
          "ADC Registers in ATMEGA32 MCU",
          "Testing Single Channel ADC in ATMEGA32 MCU",
          "Testing Multi Channel ADC in ATMEGA32 MCU",
          "Testing Differential Channel ADC in ATMEGA32 MCU",
          "ADC using Interrupts in ATMEGA32 MCU",
          "Interfacing 4 x 4 Keypad using ADC in ATMEGA32 MCU"
        ],
        "Analog Comparator and On - Board Non - Volatile Storage Programming": [
          "Understanding Analog Comparator",
          "Testing Analog Comparator in ATMEGA32 MCU",
          "Analog Comparator using Interrupts in ATMEGA32 MCU",
          "Theory of On-Board NVS",
          "Testing API's for On-Board NVS in ATMEGA32 MCU"
        ],
        "Timers and Counters": [
          "Concept of Timers",
          "Timer 0 Registers in ATMEGA32 MCU",
          "Testing Timer 0 Programs in ATMEGA32 MCU",
          "Timer 1 Registers in ATMEGA32 MCU",
          "Testing Timer 1 Programs in ATMEGA32 MCU",
          "Concluding Timers and Counters"
        ],
        "Timer CTC Mode and Input Capture Mode": [
          "Timer 0 CTC Mode Registers in ATMEGA32 MCU",
          "Testing Timer 0 CTC Mode in ATMEGA32 MCU",
          "Timer 1 CTC Mode Registers in ATMEGA32 MCU",
          "Testing Timer 1 CTC Mode in ATMEGA32 MCU",
          "Understanding Timer 1 Input Capture Mode",
          "Basic Testing of Input Capture Mode in ATMEGA32 MCU",
          "Input Capture Mode Application Program 1",
          "Input Capture Mode Application Program 2"
        ],
        "PWM Programming": [
          "Concept of PWM",
          "Testing PWM using Timer 0 in ATMEGA32 MCU",
          "Testing PWM using Timer 1 in ATMEGA32 MCU",
          "PWM Application - Simple LED Dimmer",
          "PWM Application - DC Motor Speed Control",
          "Theory of Servo Motors",
          "Interfacing Servo Motors with ATMEGA32 MCU - Part 1",
          "Interfacing Servo Motors with ATMEGA32 MCU - Part 2"
        ]
      },
      "requirements": [
        "Clarity in \"C programming concepts\" like Input - Output Statements, Control Statements, Looping Statements, Decision Making Statements, Arithmetic and Bitwise Operations, Types of Operators, Operator Precedence, Typecasting, Pre - Processors and Macros, Arrays, Pointers, Structures, User - Defined Functions, etc.",
        "Sound Knowledge about Basics of Digital Electronics along with brief idea about the working of basic electronic components like resistor, inductor, capacitor, diode, transistor, FET, logic gate ICs, etc.",
        "Basic software like \"One Note for Windows 7\", MS Word\" and \"Adobe Acrobat PDF Reader\" must be pre - installed in your computer."
      ],
      "description": "\"Embedded Systems with AVR ATMEGA32 Microcontroller – An In – Depth Approach\" - As the name suggests, this course contains an in - depth analysis of the ATMEGA32 microcontroller along with the absolute fundamentals of microcontroller programming. Now, you must be thinking that, in this modern world where electronics are being powered up using ARM cortex processors and controllers, FPGA's, etc., what is the need for learning an old school controller like ATMEGA32? A very simple answer to this is, if you want to learn the advanced controllers, then it is imperative that you possess a thorough understanding of the fundamental controllers used in embedded system applications and now - a - days, ATMEGA32 is the most beginner friendly microcontroller because it is relatively easy to program and easy to understand.\n\n\nThis course contains a total of 136 lectures divided into 14 sections but I'll layout the entire game plan of this course in 4 major parts: -\n\n\nYou'll be introduced to the ATMEGA32 MCU and its features, followed by detailed discussions about its architecture, memory organization, clock sources, programming techniques, etc. Also you'll know about the various parts, equipment and software that are required and how to work with them.\nYou'll be beginning your microcontroller programming journey starting with programming and testing of basic ATMEGA32 peripherals like GPIO, UART, ADC, External Interrupts, Analog Comparators and On - Board Non - Volatile Storage. Also you'll be knowing how to interface external peripherals like LED's, pushbuttons, LCDs, relays, dot matrix displays, 7 segment displays, DC motors, Stepper motors, etc.\nYou'll be dealing with some critical concepts in microcontroller programming like timers, various modes of timers like Counter, CTC, Input Capture and PWM modes. Also you'll be knowing about some less discussed yet important topics like low power modes and watchdog timers along with generation of interrupts by them in the MCU.\nYou'll be understanding 2 of the most commonly used communication protocols in embedded systems namely SPI and I2C protocols in great details followed by interfacing different external peripherals with the microcontroller using these protocols along with generation of protocol based interrupts in this MCU. Also, towards the end, you'll be dealing with interfacing of complex peripherals like Graphical LCDs and OLED displays with this MCU.\n\n\nThe pattern to learn a given concept in this course is a 5 step process :-\n\n\nYou'll gain an in - depth theoretical background about the concept.\nYou'll be provided with detailed explanations of vital information present in technical documents / datasheets of the MCU and associated components / peripherals because it is very essential for coding the MCU.\nYou'll be understanding related circuit connections for testing the concept and the circuit will be explained in schematic and breadboard formats.\nYou'll be explained each and every line of the programs for testing the concept and the program configurations will be explained with reference to the datasheets of the MCU and its associated components.\nYou'll be implementing circuit connections on the bench and testing the programs on those circuits.\n\n\nNow, why should you choose my course at all?\nThere are 3 good reasons:-\n\n\nThe sheer amount of detail in which each concept of the ATMEGA32 microcontroller has been explored.\nCircuits have not been simulated using simulation software because there are times when simulations can fool you completely.\nMore than 80 programs have been analyzed and implemented practically on the bench.\n\n\nThis course has been designed for beginners in the field of embedded systems programming and also for those who are very enthusiastic about electronics but have absolutely no idea how or where to start from. However, I would recommend having previous knowledge about C programming concepts, fundamentals of digital electronics along with a basic idea of how basic electronic components like resistor, inductor, capacitor, diode, transistor, FET, logic gate ICs, etc. work.\n\n\nFinally, I'll be truthful and honest with you. I can't guarantee that this course is going to be a fun one or like its going to be a walk in the park but I can definitely guarantee that this course is a powerhouse of knowledge and information about microcontroller programming using ATMEGA32 MCU. Once you have successfully completed this arduous journey of 136 lectures, your knowledge, skill and confidence in embedded systems will be boosted to the next level. So please take this interesting course and I assure you that it'll be worth your every penny. Also please leave a genuine feedback in the end as it will only help me improve more and more. Happy learning!!!\n\n\nPS. Please view Sections 1 and 2 completely before going for a refund and also do leave an honest review or reason for the refund",
      "target_audience": [
        "Students who are currently pursuing their \"Bachelors or Masters Degree\" in the field of Electrical Engineering / Embedded Systems / Electrical and Electronics Engineering / Instrumentation Engineering / Electronics and Communication Engineering.",
        "Students who have completed their \"Under - Graduation or Post - Graduation\" in the above mentioned fields and are looking to gain the knowledge and skills to join a company based on embedded systems.",
        "Working professionals in the fields of \"Computer science and IT \" who are interested to switch their career into the field of embedded systems.",
        "Beginners, enthusiasts and researchers in the \"field of electronics\", who want to gain an absolutely detailed knowledge about embedded systems and build / innovate projects in this field."
      ]
    },
    {
      "title": "Advanced Home Automation using Raspberry Pi 3",
      "url": "https://www.udemy.com/course/advanced-home-automation-using-raspberry-pi-3/",
      "bio": "Take your Home Automation using Raspberry Pi skills to the next level by mastering technologies like ESP8266 and OpenHAB",
      "objectives": [
        "Develop home automation projects using Raspberry Pi, ESP8266 and OpenHAB",
        "Setup, test and program ESP8266 Wifi chip",
        "Develop user interface for home automation systems using OpenHAB",
        "Build a remote temperature and humidity measurement system",
        "Build a letter box alert system"
      ],
      "course_content": {},
      "requirements": [
        "You should be competent in working with Raspberry Pi",
        "You should know basic Linux shell commands",
        "You should know basic wiring of electrical and electronic components"
      ],
      "description": "This course, \"Home Automation using Raspberry Pi, ESP8266 and OpenHAB\" is for anyone who wants to build some amazingly cool Home Automation gadgets using Raspberry Pi. Since it is an advanced course, the learner needs to have a basic knowledge of Raspberry Pi, Linux commands, and fundamental electronic circuit connections. However, it is recommended to undertake our previous course on “Introduction to Raspberry Pi” and “Home Automation using Raspberry Pi” before subscribing to this course.\nThe learner will be exposed to the cutting-edge of technologies in Internet of Things and Home Automation. The ESP8266 is a wonder chip which can connect the sensors to Wifi. Thus, one can connect to all the sensors and output devices remotely using Wifi network and thereby making one's home, a hub of several automated systems, controlled using a single Raspberry Pi.\n\nThe learner will also master the open source home automation platform, OpenHAB. OpenHAB provides the environment to build a User Interface for Home automation devices. The user need not create web servers to serve web pages and develop own interfaces for each system. There is a single platform to provide UI that can control all the devices right from the Smartphone.\nIn this course, the learner will learn how to build an Remote Temperature and Humidity Measurement System. A simple gadget one can have at their home to know temperature and humidity for any remote location inside house just using their smartphone. Also the learners will learn to build an Letter box Alert System. By installing this simple home automation gadget in their postbox, the learners can track the arrival of letters into their letterboxes. Thus making their letter boxes to listen and respond.\nThe complete system is subdivided into individual sections and explained with the utmost detail so that it is easy to understand. It also explains the possible applications for such a system and how the learner can customize for his/her home or office. Complete Linux commands and OpenHAB configuration files are also included so that the learner can easily replicate the system.\nAfter completing this course, the learner will know to build kind of splendidly cool home automation stuff using these open source technologies.",
      "target_audience": [
        "This course is for anyone who wants to explore the applications of Raspberry Pi in the field of Home Automation and Internet of Things",
        "Since it is not a beginner course, a basic knowledge on Raspberry Pi is necessary for taking this course.",
        "If you are a beginner, please undertake our previous course on \"Introduction to Raspberry Pi\" and \"Home Automation using Raspberry Pi\" before subscribing to this course."
      ]
    },
    {
      "title": "Siemens PLC Programming Using STL In S7-1500 (TIA Portal)",
      "url": "https://www.udemy.com/course/siemens-s7-1500-plc-programming-using-stl-statement-list/",
      "bio": "Siemens PLC S7-1500 Programming Using STL (Statement List).Software Used TIA portal",
      "objectives": [
        "Learn Siemens PLC programming using STL in S7-1500 using TIA Portal"
      ],
      "course_content": {
        "Logical Gate Programming Using STL": [
          "Implementation of AND,OR and X-OR gate using STL",
          "Combination of Logic Gate using STL",
          "Nested Loop Logic Operation using STL"
        ],
        "Basic of STL Status Word": [
          "Basic of STL Status Word"
        ],
        "Memory Function": [
          "Memory Function using STL"
        ],
        "Timer using STL": [
          "Timer Using STL"
        ],
        "Counter Using STL": [
          "Counter Using STL"
        ],
        "Comparator Using STL": [
          "Comparator Using STL"
        ],
        "Mathematical Operation using STL": [
          "Mathematical Operation using STL"
        ],
        "Conversion Formula Using STL": [
          "Conversion Formula Using STL"
        ],
        "Word Logic Using STL": [
          "Word Logic Using STL"
        ],
        "Program Control Using STL": [
          "Program Control _JUMPS using STL",
          "Program control _Block Call using STL",
          "Program Control _Data Block Using STL",
          "Program Control_Data block -2 using STL"
        ]
      },
      "requirements": [
        "Basic Knowledge of PLC and Digital Electronics"
      ],
      "description": "Hello Friends,\nI am introducing course about Siemens S7-1500 PLC Programming Using STL (Statement List). STL programming Language is widely used in Siemens Program to solve complex and logical calculation. In this course tutorial is made in very attaractive way and easy to understand from very basic. At very first look STL looks very tough language o understand if you don't have right path or someone to present it.\nIn this course we will cover all STL instruction and Will be learn that instruction by practice and Exercise.The instruction covered are Mathematical,Program control,Conversion ,Timer ,Counter,Comperator,Word-Logic,Shift logic etc.\nThis course is exclusively design for beginner for learning STL Programming based on TIA Portal.I have also introduce the communication method between Factory io and TIA Portal Simulation.\nStudent can create their own simulation using TIA Portal simulation and Factory IO .\nI have attached many readymade program to use with commented backup. Student can implement it in their industry and improve their professional career in industry.\nTo address student question , I am available online and I have support them many times with student via TeamViewer and Email.\n\n\nI hope you will enjoy this course and you will be able to program and understand backup in program made based on STL.",
      "target_audience": [
        "Student and Engineering Professional"
      ]
    },
    {
      "title": "Computer Architecture & Organization Part 2 : Hard Disk",
      "url": "https://www.udemy.com/course/computer-architecture-organization-online-course/",
      "bio": "Master Computer Architecture and Organization as it forms the core of computer science",
      "objectives": [
        "You will become very familiar with the topics of secondary memory, memory hierarchy",
        "You will be able to challenge the interviewer on questions related to Computer Architecture & Organization",
        "You will view Computer Science in a different dimension",
        "You will be able to answer all questions of exams like GATE,PGEE,ISRO (after completing all parts of CO course)",
        "You will be able to get a top grade in your Computer Architecture & Organization course in your Bachelor's degree (after completing all parts of CO))",
        "Understand how Secondary Memory works",
        "Understand how various levels of memory work together"
      ],
      "course_content": {
        "Memory Organization": [
          "Important : Simultaneous vs Hierarchial Memory Organization",
          "Example 1 on Memory Hierarchy",
          "Example 2 on Memory Hierarchy",
          "Example 3 on Memory Hierarchy",
          "Example 4 on Memory Hierarchy"
        ],
        "Secondary Memory - Structure of Hard disk": [
          "Structure of Hard disk",
          "Structure of Hard disk continued"
        ],
        "Secondary Memory Concepts": [
          "Capacity of the disk",
          "Finding size of Sector Number field",
          "Formatted Disk Space",
          "Recording Density of the disk",
          "Data Transfer Rate",
          "Average Disk Access Time",
          "Time taken to read a file",
          "Time taken to read data",
          "Finding the Sector Number for a given address",
          "Finding the address for a given sector number",
          "Finding the address for a given sector number 2"
        ],
        "Bonus Section": [
          "Bonus : How to proceed further"
        ]
      },
      "requirements": [
        "Have a PC with internet connection",
        "No prerequisite for this course - I will teach you everything"
      ],
      "description": "You’ve just stumbled upon the most in-depth Computer Organization & Organization course series online. With over 4000 students enrolled and 500+ 5 star reviews to date in the area of computer science, my computer science courses are enjoyed by students from 101 countries.\nWhether you want to:\n- build the skills in computer architecture and organization\n- crack interview questions on secondary memory and memory hierarchy of computer architecture and organization.\n- or just understand computers on how they make use of secondary memory.\n\n...this complete Masterclass on secondary memory is the course you need to do all of this, and more.\n\nAre you aiming to get a degree in the area of computer science as a topper ?\n\nThis course is designed to give you the skills you need to answer any question on secondary memory, memory hierarchy. By the end of the course you will understand secondary memory, memory hierarchy topics of computer organization extremely well and be able to answer any question on these topics.\nLots of students have been successful with getting their first job or a promotion after going through my courses on computer science.\n\nWhy would you choose to learn Computer Organization & Architecture ?\nThe reality is that there is a lot of computer science courses out there. It's in the hundreds. Why would you choose my courses ?\nThe number one reason is its simplicity. According to many students in udemy, my courses are simple to understand as I always teach concepts from scratch in a simple language.\nThe second reason is you get a mentor for computer science through this course. I get lot of doubts from students regarding their career in computer science like which elective subject to choose, which book to refer, etc.\nThe third reason is, you are not just watching my videos, you can also ask doubts if you get one while watching the lectures.\nWhich text book should you refer ?\n\nI have used Computer Organization by Carl Hamacher. Its a great textbook. You can follow it. But I have referred lot of other textbooks like Hennessy Patterson, William Stallings, etc. So its upto you on which textbook you are comfortable with but follow a standard author book. If you complete this course, you will find it much easier to understand these textbooks. But anyway if you complete this course with good detailed notes, you don't need to read any textbook as I am reading them for you and giving the contents in an easy to understand manner.\n\nWhy should you take this course?\n\nYou will be joining over 4000 students who are already enrolled in one of my courses.\nThere are 1000+ reviews left by students. My Courses are rated as the best course to learn computer science for beginners.\n\nWhat makes this course a standout?\nLike you, thousands of others were frustrated and fed up with incomplete Youtube tutorials which assume you already know a bunch of stuff and also bulk textbooks able to send even the most intuitive person to sleep.\nLike you, they were tired of low-quality lessons, poorly explained topics and all-round confusing info presented in the wrong way. That’s why so many find success in my courses. It’s designed in a simple manner so that anybody will be able to understand.\n\nWhat if I have questions?\nYou can ask questions anytime using the Q/A section or through personal messages. I take it very seriously and answer these questions in a detailed manner with simple english words so that anybody can understand it.\nStudent Quote: “Everything you always wanted to know about OS but were afraid to ask\"...And Vignesh Sekar gives the right answers” by Claus Kaliba.\nThere’s no risk either!\nThis course comes with a full 30 day money-back guarantee. Meaning if you are not completely satisfied with the course, you can request udemy for a refund within the first 30 days of purchase.\nYou either end up with Computer Organization skills, learn other core computer subjects, get placed in top notch companies or research areas or you try the course and simply get all your money back if you don’t like it…\nYou literally can’t lose.\nReady to get started ?\nEnrol now using the “Add to Cart” button on the right, and get started on your way to computer science.\nSee you on the inside (hurry, Computer Architecture & Organization Series is waiting!)",
      "target_audience": [
        "Anybody who needs to learn Computer Architecture & Organization from scratch",
        "Anybody who wants to pursue a career in Computer Science",
        "Anybody who has Computer Architecture & Organization in the Bachelor's degree (I am sure most of them will have)",
        "Anybody who is preparing for interview in product based companies",
        "If you are preparing for exams like GATE , PGEE , BITS HD , ISRO ,..etc",
        "If you are a Computer Science Engineer",
        "If you are a software professional"
      ]
    },
    {
      "title": "Circuit Design, Simulation and PCB Fabrication Bundle",
      "url": "https://www.udemy.com/course/circuit-design-simulation-and-pcb-manufacturing-bundle/",
      "bio": "Everything there is to know about how to Design, Simulate Electronic Circuits, Microcontrollers, Arduino and Make a PCB",
      "objectives": [
        "Make PCB with Zero Experience in Electronics",
        "Learn basic to advance PCB design",
        "Draw a schematic of your circuit in few simple steps",
        "Create your own custom Printed Circuit Board (PCB).",
        "Connect a Breadboard of your circuit in few simple steps",
        "Auto Route to speed up the routing process",
        "Make A PCB in the shortest possible time",
        "Route Printed Circuit Board (PCB)",
        "Prototype your kickstarter idea",
        "Get a job in PCB design",
        "Master Designing electronic circuits",
        "Simulate and test your circuit before actually making it",
        "Make a professional Printed Circuit electronic board PCB for your circuit.",
        "Track you errors in seconds",
        "Use Proteus Software which is one of the best electronic software ever",
        "Simulate and design 3D Electronic Circuits",
        "Program 3D PIC microcontroller using Flow-charting",
        "Simulate 3D PCB",
        "Simulate 3D mechanisms",
        "Simulate 3D Measurements",
        "Choose the right soldering Iron",
        "Choose the right tools you need to have to keep yourself safe while soldering and solder the right way",
        "Choose the best solder out there, and why it is the best",
        "Clean your soldering Iron",
        "Change the soldering Iron tip head",
        "Extend soldering Iron life span",
        "Get your own Soldering tools that are right for you",
        "Solder Correctly following The right steps to an excellent soldering",
        "Set the right heat, solder and tools to be a soldering professional",
        "Differentiate between good soldering and bad soldering with real life examples",
        "Test your codes and schematics for PIC Microcontroller without the risk of burning your board. No More bad connections or wrong codes.",
        "Do realtime Simulation of PIC Microcontroller using development boards with integrated debugger or using any code that you have in hand.",
        "Save money, since this software is for FREE, you won’t have to pay anything, you don’t even have to buy any components before testing your code, write the code, upload it to the software, test it then you are good to go.",
        "Simulate PIC16F84, PIC16F628 or PIC16F648, PIC16F777, PIC16F877A, PIC18F452, PIC18F4520, PIC18F4550 or PIC18F4620, ATMEGA328 Microcontrollers",
        "Save Circuit design and Simulation Time, since you will be able to simulate using a real-life board that is designed to meet all your needs",
        "Debug and track signals and data memory in Real-time",
        "Simulate Labtools development board McLab1 Board",
        "Simulate Labtools development board McLab2 Board",
        "Simulate Microgenius development board PICGenios Board",
        "Simulate Arduino Uno development board",
        "Write codes and test them without having a PIC Microcontroller",
        "Test Codes without having a real physical electronic components",
        "Make your Own Training Kit",
        "Design and Manufacture any PCB that comes in your mind",
        "Design any Microcontroller module",
        "Simulate Arduino UNO Boards",
        "Simulate Arduino Mega Boards",
        "Simulate Arduino nano Boards",
        "Write codes and test them without having an Arduino Board",
        "Test Codes without having a real physical an Arduino Board",
        "Create and design a custom Arduino Nano in Altium Designer",
        "Draw schematic of an Arduino Nano and wire components",
        "Create your own custom components and component library",
        "Compile design detect and eliminate design errors",
        "Define board shape and size",
        "Auto route to speed up the routing process",
        "Route Printed Circuit Board (PCB)",
        "Eliminate errors and reduce manufacturing board iterations by Using design rule checker",
        "Make your own Pinguino (PIC Microcontroller Based Arduino) Board",
        "Bootload Your Pinguino (PIC Microcontroller Based Arduino)",
        "Know what is the actual brain of Pinguino (PIC Microcontroller Based Arduino)"
      ],
      "course_content": {},
      "requirements": [
        "A Computer or Laptop with any operating system",
        "The Software that will be used to create the PCB Provided in the first Section (FREE)",
        "Basic experience in Electronics",
        "No materials required if you only wish to view the course",
        "Have A basic Experience in browsing the internet",
        "Time, Dedication and Patience to learn and implement new knowledge."
      ],
      "description": "This Bundle Consists of 136 Lecture with more than 12.5 hours of HD Video Content and supplementary material in which we cover more than four different software used to design, simulate, and fabricate circuits. I can assure you that after this course you will be a professional in Circuit design and fabrication.\nWhy You Should Take This Course?\nThe course includes everything you need to know about the electronics design process.\nLearn how to Design, Simulate Electronic Circuits, Microcontrollers, Arduino and Make a PCB.\nLearn the science of electric circuits.\nGain programming knowledge.\nLearn about Fritzing Software and Proteus Software.\nGet access to all instructional videos.\nWhat You Will Learn:\nPCB Design and Fabrication using Fritzing Software.\nPCB Design: Master Designing Printed Circuit Boards using Proteus Software.\nPCB Design: Make Arduino Nano using Altium Designer.\n3D Simulation: Microcontrollers, Electronics, Mechanism, PCB using Yenka Software.\nSoldering Electronic Components Like A Professional.\nMicrocontroller Circuit Design and Simulation.\nArduino Circuit Design and Simulation.\nCourse Highlights:\nPCB Design and Fabrication For Everyone: Learn Printed Circuit Board (PCB) design from Scratch With Zero Experience in Electronics, No Effort and a Free Software.\nPCB Design: Master Designing Printed Circuit Boards: A-Z Guide to designing, testing, and manufacturing any electronic circuit, using the most popular electronic software.\n3D Simulation: Enter the world of 3D simulation and have fun learning and teaching Microcontroller Electronics, Mechanical and PCB.\nHow to Solder Electronic Components Like A Professional: Learn how to master soldering in no time.\nPIC Microcontroller Simulation: Unleash the power of code in Simulation.\nDesign and Simulate Arduino Boards and Test Your Code: Start working with different Arduino boards without buying them and start unleashing the power of code in Simulation.\nMake PIC microcontroller based Arduino Development Board: This guild will help you know how to make PIC Microcontroller Based Arduino Like board at home Step by Step.\nJoin Our Growing Community:\nEnroll today and gain:\nAccess to crisp video lessons.\nEngaging practical activities.\nA trove of downloadable resources.\nLifelong course updates.\nA vibrant community of learners and experts.\nSatisfaction Guaranteed:\nYour experience matters. If you find the course not living up to your expectations, we offer a 30-day money-back guarantee. We continuously refine our content based on feedback, ensuring you get the best.\nReady to Master Circuit Design, Simulation, and PCB Fabrication?\nEnroll now and become an expert in circuit design and PCB fabrication with comprehensive examples, tips, and hands-on exercises!\nWhat You Will Learn\nMaster the basics of circuit design and simulation\nCreate and fabricate PCBs using various software\nUnderstand and apply electronic circuit concepts\nBuild and simulate microcontroller and Arduino projects\nWho Is This Course For\nElectronics enthusiasts\nEngineering students and professionals\nAnyone interested in circuit design and PCB fabrication\nRequirements\nNo prior experience needed\nA computer with internet access\nEnthusiasm to learn and create\n\n\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge - we go into the depth of the topic and give you the exact - step by step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years - we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million View, 20k + Subscriber) and author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and provide guidance and consulting for many students over the years to help them kick-start their career.\nAshraf’s core skill is explaining difficult concepts through in a step by step easy to understand matter using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming and in particular for the world of Arduino, PIC Microcontroller, Rasberry Pi has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers Courses on\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Circuit Designers",
        "PCB Designers",
        "Electronics Geeks",
        "Circuits Creators",
        "Everyone who's interested in Electronics",
        "School Students who want's to learn more about electronics in simple ways",
        "Teachers who are looking for ways to make learning more fun and interactive",
        "Anyone Interested in Learning The right way to solder",
        "PIC Microcontroller Geeks",
        "Anyone looking to learn PIC Microcontroller but don't want to buy the Microcontrollers or Electronic Components",
        "Anyone looking to learn PIC Microcontroller without spending any money buying Programming and Simulation Software",
        "Anyone starting their journey in PIC Microcontroller",
        "Anyone looking for a free software to Simulate PIC Microcontroller",
        "Anyone looking to unleash the power of coding using Simulation",
        "Newbies looking to enhanse there Circuit design skills and make great PCBs and training kits in not time",
        "Arduino Geeks",
        "Anyone looking to learn Arduino but don't want to buy the boards",
        "Anyone looking to learn Arduino without spending any money buying different boards",
        "Anyone starting their journey in Microcontrollers",
        "Anyone who Want to get a job in PCB design",
        "Anyone who Want to learn Altium Designer in the shortest possible time.",
        "Anyone who Want to get started creating cool gadgets",
        "Anyone Interested in Learning New Things about Pinguino (PIC Microcontroller Based Arduino)",
        "Anyone Interested in Knowing how Pinguino (PIC Microcontroller Based Arduino) board actually works",
        "Anyone Interested in Knowing what each component inside Pinguino (PIC Microcontroller Based Arduino) does"
      ]
    },
    {
      "title": "Learn How to Build a Cryptocurrency Mining Computer",
      "url": "https://www.udemy.com/course/learn-how-to-build-an-ethereum-mining-computer/",
      "bio": "Learn to build your own Cryptocurrency Mining Computer and start Mining Cryptocurrency Today!",
      "objectives": [
        "Build your own cryptocurrency mining computer.",
        "How to configure a cryptocurrency mining computer.",
        "Basic computer components and how they work.",
        "Get up and running fast."
      ],
      "course_content": {
        "Introduction": [
          "5 Things to Consider Before Building a Mining Computer",
          "What you will need to get started",
          "What Kind of Mining Rig Should I build?",
          "Calculating Your Mining Return On Investment (ROI)"
        ],
        "Building Your First Mining Computer": [
          "The Parts List",
          "AMD vs Nvidia Graphics Cards (GPUs)",
          "Building the Mining Computer Frame",
          "Mounting the Motherboard",
          "Installing the CPU",
          "Installing the RAM",
          "Setting up the Power Supply",
          "Connecting the Motherboard to Power",
          "Installing the Hard Drive",
          "Installing the GPU Risers",
          "Installing the GPUs",
          "Getting Ready to Boot Our Mining Rig"
        ],
        "Setting Up Your Mining Computer": [
          "Modifying the Bios of the Motherboard",
          "Installing Windows 10",
          "Setting up Windows 10",
          "Installing a Wifi Adapter",
          "Installing AMD GPU Blockchain Drivers",
          "Modding the AMD RX 580 GPU Bios",
          "Setting Up An Ethereum Wallet",
          "Setting up the Mining Software",
          "Now We're Mining!"
        ],
        "Managing Your Mining Computer": [
          "Overclocking your GPUs",
          "Optimizing Windows 10 for Mining",
          "Automatically Logging In To Windows 10",
          "Set Claymore Miner to Auto Start"
        ],
        "Troubleshooting": [
          "How to Uninstall GPU Drivers",
          "Trouble with GPU Risers",
          "How to fix an under-performing GPU"
        ],
        "What's Next": [
          "Conclusion"
        ]
      },
      "requirements": [
        "You should be able to use a Windows 10 PC at a beginner level.",
        "If you choose to build a Mining Computer, you will need to order parts to build it. A parts list is provided."
      ],
      "description": "Cryptocurrency Mining is a great investment. In the future, the world will use various cryptocurrencies to trade and exchange goods and services. Building a Cryptocurrency Mining Rig to mine cryptocurrency is pretty straightforward, but there many steps during the build and setup process that can save you a lot of time and perhaps a lot of money by knowing up front. This course will save you time and money as you build your first mining computer.\nThis course is designed to walk you through the build process of a Crypto Mining Rig. You can use this rig to mine other altcoins such as ZCash, Ethereum Classic, SiaCoin, Monero, Pascalcoin, Electroneum, and more. We will look at using the popular Mining solutions like Claymore Miner and SimpleMining OS. We will optimize the rig to reach max performance while still maintaining stability.\nEven though Ethereum can no longer be mined using GPUs, there are many other coins to mine that are very profitable.\nThe goal at the end of this course is for you to have a running mining rig that is mining the cryptocurrency of your choice. This mining rig should pay for itself and produce near pure profit after that (once you subtract electricity cost).\nWhether or not you have set up a computer, this course is for you. I go into deep detail to explain not only what to do, but why. Understanding the fundamentals of computer building and cryptocurrency mining will help you reach your return on investment sooner.\nYou will learn how to build a computer, install Windows 10, set up the mining software, optimize the graphics cards (GPUs), overclock your GPUs, optimize Windows 10, and how to access your mining rig remotely. You will even learn how to track your energy consumption so you can calculate your profits.\nJoin me as we build an Ethereum Mining Rig together!",
      "target_audience": [
        "Anyone interested in cryptocurrency mining."
      ]
    },
    {
      "title": "Mitsubishi Plc Programming Basics - All In One",
      "url": "https://www.udemy.com/course/mitsubishi-plc-programming-basics-all-in-one/",
      "bio": "Learn Mitsubishi Plc and HMI Programming Basics and Create Programs for Real Machines & Supported with Applications",
      "objectives": [
        "Plc Programming Basics",
        "Mitsubishi Plc Programming Techniques and Instructions",
        "GX Developer Software",
        "GX Works 3 Software",
        "GT Designer 3 Software",
        "Plc Programming Applications",
        "Plc Programming Languages"
      ],
      "course_content": {},
      "requirements": [
        "This course does not require any prior knowledge."
      ],
      "description": "Dear Students,\nMitsubishi Plc Programming Basics course is suitable for anyone who has just started to learn plc and wants to learn mitsubishi plc.\nThis course has been a course that we have carefully prepared in order to convey the maximum information to you in the light of the experience we have gained from our other courses.\nYou will start this course by learning the gx developer software used to program the old generation plc of Mitsubishi plc group.\nWe will control an FX2N plc together with the GX Developer software.\nBy working with real hardware, you will be able to see all the possibilities that will come your way.\nThis part, where we see what we can do with an FX2N plc, will also teach us the basics of plc programming.\nLater, we will learn about the GX Works 3 software used for the next generation plc.\nLearning the GX Works 3 program interface, which is much more advanced and professional than GX Developer, will be our first job before writing a program.\nWe will not cover the GX Works 2 program in this course.\nAfter the first steps required for you are explained on behalf of the GX Works3 program, we start the plc programming steps with the GX Works3 program again.\nAnd right after that, we will start learning GT Designer 3, which we use to program Mitsubishi HMI.\nYou will find the maximum HMI programming information required for a machine process in this section.\nAnd finally, with our basic information section, you will learn other basic information you need.\nAt the end of the course, when you want to work with a mitsubishi plc, all the necessary information is included in this course.\nAt the end of the course, in summary;\n- You Will Learn Plc Programming Basics\n- You will learn the GX Developer Program\n- You will learn the GX Works 3 Program.\n- You will learn GT Designer 3 Program.\n- You will learn Mitsubishi Plc Programming.\n- You will Have Basic Plc Knowledge.\n- You will learn plc programming languages like fbd , st etc.\n\n\nAfter starting the course, you can ask your questions at any time and find answers.\nBest regards\nMustafa",
      "target_audience": [
        "Anyone who wants to learn plc programming",
        "Anyone who wants to learn mitsubishi plc & hmi programming basics",
        "Anyone who wants to work in industrial automation field",
        "Anyone who interested in with plcs",
        "Anyone who interested in with create a powerful real machine programs"
      ]
    },
    {
      "title": "Designing PCB using Autodesk Eagle for Everyone!",
      "url": "https://www.udemy.com/course/designing-pcb-using-autodesk-eagle-for-beginners/",
      "bio": "in this course you will learn step by step how to use and design your own PCB using the latest version of Autodesk EAGLE",
      "objectives": [
        "Turn your idea into reality by designing PCB boards through Autodesk Eagle",
        "A thorough walkthrough and site tour on Autodesk Eagle and maximize its use",
        "Create your very first and working projects",
        "Learn about the basic electronic components and its uses",
        "Select the best components to be used for your project",
        "Special topics about Autodesk Eagle and Arduino shield"
      ],
      "course_content": {
        "Introduction": [
          "Greetings everyone!",
          "Download and Install Eagle on Your device",
          "Control Panel in EAGLE",
          "Backup Files (Auto-save) in EAGLE",
          "Create a new Project in EAGLE",
          "Introduction to Schematic Editor in EAGLE",
          "Introduction to the most common libraries in EAGLE",
          "Quick introduction to Resistors",
          "Quick introduction to Potentiometer",
          "Quick introduction to Capacitors"
        ],
        "Your first project ASTABLE 555 Timer": [
          "Prepare your project",
          "Schematic Editor:adding components to your project Part 1",
          "Schematic Editor:adding components to your project Part 2",
          "Schematic Editor:Connecting the components",
          "Schematic Editor:Finishing the Schematic",
          "Layout Editor: Arranging the component on the Board",
          "Layout Editor: Routing the components",
          "Layout Editor: How to Apply a polygon to your board",
          "Layout Editor: Design Rule Check DRC",
          "Layout Editor: Finishing the board design",
          "Soldering the PCB and test the board"
        ],
        "things important to know about EAGLE": [
          "Design Rule Check ERC Warning that you should ignore",
          "Introduction to Layers in EAGLE part 1",
          "Introduction to Layers in EAGLE part 2",
          "How to create PCB Heatsink using tstop layer"
        ],
        "Your second Project Shift register 74595 LED controller": [
          "Prepare your project quick look to what we want to do",
          "Schematic Editor:adding components to your project Part 1",
          "adding components to your project Part 2",
          "Schematic Editor:Connecting the components using BUS tool",
          "Schematic Editor:Connecting the components using Name method",
          "Schematic Editor:Finishing the Schematic",
          "Layout Editor: set the board's dimension",
          "Layout Editor: Arranging the component on the Board part 1",
          "Layout Editor: Arranging the component on the Board part 2",
          "Layout Editor: prepare the board for routing",
          "Layout Editor: Routing the components Part 1",
          "Layout Editor: Routing the components Part 2",
          "Layout Editor: Apply a polygon and run DRC",
          "Soldering the PCB and test the board"
        ],
        "Special topics about EAGLE": [
          "How to create a Design Block in EAGLE part 1",
          "How to create a Design Block in EAGLE part 2",
          "How to create a Design Block in EAGLE part 3",
          "How to create a Design Block in EAGLE part 4",
          "Another way to apply a polygon to your board",
          "polygon ranks",
          "Create a custom Board shape (simple shape) part 1",
          "Create a custom Board shape (using DXF File) part 2",
          "ULP (User language programs) in EAGLE part 1",
          "ULP (User language programs) in EAGLE part 2",
          "8 Minutes of Joy with EAGLE's Tools"
        ],
        "Arduino Shield Project for 7 Segment and MAX7219 LED driver": [
          "Prepare your project quick look to what we want to do",
          "Schematic Editor:adding components to your project",
          "Schematic Editor:Connecting the components using BUS tool",
          "Schematic Editor:Connecting the components part 2",
          "Schematic Editor:Finishing the Schematic",
          "Layout Editor: Arranging the component on the Board",
          "Layout Editor: Routing the components Part 1",
          "Layout Editor: Routing the components Part 2",
          "Layout Editor: Apply a polygon and introduction to meander tool",
          "Layout Editor: Finishing the board design and answering some questions",
          "Soldering the PCB and test the board"
        ],
        "Creating libraries in EAGLE and some miscellaneous Topics": [
          "How to create a Library in EAGLE: Creating a Symbol for AT25SF321",
          "How to create a Library in EAGLE: Creating a Footprint for AT25SF321",
          "How to create a Library in EAGLE: another way to Create Footprint for AT25SF321",
          "How to create a Library in EAGLE: Create a device for AT25SF321",
          "different ways to create your Library in EAGLE: TLV700 Series Part 1",
          "different ways to create your Library in EAGLE: TLV700 Series Part 2",
          "different ways to create your Library in EAGLE: TLV700 Series Part 3",
          "different ways to create your Library in EAGLE: TLV700 Series Part 4",
          "How to select the Design Rule Check (DRC) values in EAGLE",
          "How to Add any custom Logo in EAGLE",
          "How to generate Gerber files in EAGLE",
          "How to order PCB online"
        ],
        "Your time to route boards by yourself": [
          "Exercise : Arduino LCD1602 Shield",
          "Arduino LCD1602 Shield DEMO Code"
        ]
      },
      "requirements": [
        "Your computer with Windows / MAC / Linux",
        "connection to the internet."
      ],
      "description": "Do you have a circuit idea that you wanted to create?\nLet’s turn your idea into a real and working circuit by using Autodesk Eagle PCB.And yes, even beginners can learn this course!\nAutodesk Eagle is a free to use software with a capability to design up to 16 layers PCB, CAM integration with Autodesk Fusion 360.\nI will take you in a learning journey from\nIntroduction and installation of the software\nA thorough tour of the software including its functionalities that would help you create projects efficiently\nA brush up and review of the basic electronic components to use\nLearn and create your first project within the first 2 hours of your course*\nCreate more projects with activities to test and challenge yourself in the design space\nMore bonus tips with Arduino Shield and Autodesk Eagle functions.\nAt the end of this course, you’d be confident to know the software and confidently create projects for your school, work , hobbies or even freelance clients.\n\n\nHere’s the review of my previous students:\nI found this very interesting and a t a good pace , Never used Eagle before (Kicad user) - I think I will be making the switch now especially as I have some boards to design for a friend. - Tony Davies\n\n\nLearning how to create and design a PCB does not have to be rocket science, I have broken down the course for you to produce a working project yourself.\n\n\nYou got this!",
      "target_audience": [
        "Everyone How is looking for design PCB.",
        "Engineers how want to take his next step in his /her career",
        "Hobbyist and Makers How want to transform their Electronics design on breadboard to PCB"
      ]
    },
    {
      "title": "Mastering STM32CubeMX 5 and CubeIDE - Embedded Systems",
      "url": "https://www.udemy.com/course/stm32cubemx-5-and-cubeide/",
      "bio": "Code Drivers and Firmware : PWM, USB,TIMER, SPI, ADC, UART, DMA,FreeRTOS,Embedded-C, Assembly etc",
      "objectives": [
        "Develop a USB HID Mouse Firmware Device",
        "Develop a USB HID Keyboard Firmware Device",
        "Develop a USB Virtual Com Port Firmware Device",
        "Develop TIMER Peripheral Drivers",
        "Develop ADC Peripheral Drivers",
        "Develop SPI Peripheral Drivers",
        "Develop UART Peripheral Drivers",
        "Develop Bare-Metal Embedded-C Firmware using CubeIDE",
        "Develop ARM Assembly Language Firmware using CubeIDE",
        "Configure the DMA to work with Peripheral Drivers"
      ],
      "course_content": {
        "Introduction": [
          "Introduction (Same as Promo Video)",
          "Download CubeMX 5 and CubeIDE",
          "Installing CubeMX 5 and CubeIDE",
          "Quick Notice",
          "Installing CubeMX 5 Packages",
          "Overview of STM32CubeMX 5",
          "Overview of the Clock Configuration Tab"
        ],
        "Developing General Purpose Input/Output Drivers and Firmware": [
          "Coding an Input/Output Driver",
          "Coding an Input Interrupt Driver",
          "Coding an Input Interrupt Driver (Multiple Inputs)",
          "Source Code Download"
        ],
        "Embedded Systems Bare-Metal Embedded-C and Assembly Programming with CubeIDE": [
          "Coding Gpio Drivers From Scratch Using Datasheet Information (Part I)",
          "Coding Gpio Drivers From Scratch Using Datasheet Information (Part II)",
          "Coding ARM Assembly Applications in CubeIDE",
          "Coding Gpio Drivers From Scratch In Assembly Language (Part I)",
          "Coding Gpio Drivers From Scratch In Assembly Language (Part II)",
          "Converting Keil MDK ARM Assembly Syntax to GCC Assembly Syntax"
        ],
        "Developing General Purpose Timers Drivers and Firmware": [
          "Coding a Hardware Timer to generate precise Delays",
          "Coding a Hardware Timer Driver for Output Compare Functionality",
          "Coding a Hardware Timer Driver for Counting Events",
          "Coding a Hardware Timer Driver for Generating PWM Signals",
          "Coding a Hardware Timer Driver for Generating Precise Interrupts"
        ],
        "Developing Analog-to-Digital Conversion (ADC) Drivers and Firmware": [
          "Coding an ADC Driver for Single Conversion Mode",
          "Coding an ADC Driver for Continuous Mode Conversion",
          "Coding an ADC Driver for Interrupt Conversion Mode",
          "Coding an ADC Driver for Single-Channel DMA Mode",
          "Coding an ADC Driver for Multi-Channel DMA Scan Mode"
        ],
        "Developing Serial Peripheral Interface ( SPI ) Drivers and Firmware": [
          "Coding SPI Drivers for Polling Transfer Mode",
          "Coding SPI Drivers for Interrupt Transfer Mode",
          "Coding SPI Drivers for DMA Transfer Mode"
        ],
        "Developing Universal Asynchronous Receiver-Transmitter ( UART ) Drivers": [
          "Coding UART Drivers for Polling Transfer Mode",
          "Coding UART Drivers for Interrupt Transfer Mode",
          "Coding UART Drivers for DMA Transfer Mode",
          "Coding Multiple UART Modules"
        ],
        "Developing Universal Serial Bus ( USB) Drivers and Firmware": [
          "Understanding the USB capabilities of different dev boards",
          "Coding USB Drivers for Human Interface Device (HID) - Mouse Functionality",
          "Coding USB Drivers for Human Interface Device (HID) - Keyboard Functionality",
          "Coding USB Drivers for Virtual Com Port Functionality (TX Only)",
          "Coding USB Drivers for Virtual Com Port Functionality (RX and TX )"
        ],
        "Developing Real-time Firmware with FreeRTOS": [
          "Coding : Experimenting with Tasks and Priorities",
          "Coding : Accessing Hardware Drivers from Multiple Threads",
          "Coding : Accessing Hardware Drivers from Multiple Threads using a MUTEX",
          "Coding : Creating Threads Manually",
          "Coding : Sending Notifications Between Threads"
        ],
        "Closing Remarks": [
          "Closing"
        ]
      },
      "requirements": [
        "STM32 board",
        "No programming experience needed - I'll teach you everything you need to know."
      ],
      "description": "Hello Welcome to the Mastering STM32CubeMX 5 and CubeIDE course\nThis course teaches you how build embedded systems firmware and peripheral drivers using the STM32CubeMX 5 framework and the STMCubeIDE development environment. This course has many sections but primarily the course can be divided into three parts.\nThe first part deals with peripheral driver development. In this part we master how to use the STM32CubeMX framework to setup the clocks and register  parameters of our peripheral drivers and then go on to the CubeIDE development environment to complete the development and testing of peripheral drivers. We shall master different setup configurations of our peripheral drivers in this part. These peripherals include the Universal Serial Bus (USB), the PWM, the SPI, the ADC, UART and the DMA.\nThe second part of this master course deals with developing embedded firmware applications using some of the Middleware provided by the STM32CubeMX framework. One of such Middleware we shall master is the FreeRTOS Realtime Kernel. We shall see how to use STM32CubeMX to create tasks and semaphores and other kernel components for realtime firmware development. We shall also see how to develop these kernel components from scratch using our CubeIDE development environment alone.\nThe third part of the course deals with working the CubeIDE as a standalone development environment. Over here we shall see how to develop bare-metal embedded-c firmware and drivers without using any libraries. We shall literally download the microcontroller chip's datasheet and develop our firmware and drivers using information from the datasheet only. We shall then go on to use this same datasheet information to develop firmware and peripheral drivers using ARM Assembly Language.\nPlease take a look at the full course curriculum.\n\n\nREMEMBER : I have no doubt you will love this course. Also it comes with a  FULL money back guarantee for 30 days!  So put simply, you really have nothing to loose and everything to gain.\nSign up and let's start building some drivers.",
      "target_audience": [
        "If you are an absolute beginner to embedded systems, then take this course.",
        "If you are an experienced embedded developer and want to learn how to professionally develop embedded applications for ARM processors, then take this course."
      ]
    },
    {
      "title": "PLC Step By Step: Your Complete Guide",
      "url": "https://www.udemy.com/course/plc-step-by-step-your-complete-guide/",
      "bio": "This course will help know TIMERS, Counters, Relays, Coils and Ladder Logic and build you FIRST PLC Program From Scratch",
      "objectives": [
        "Build a fully functional PLC Program",
        "Use different type of relay that exist inside PLC",
        "Understand the Working principle of Relays and how they interact with Contacts",
        "Differentiate between PIC Microcontroller and PLC",
        "Use Different methods for programming PLC"
      ],
      "course_content": {
        "Introduction": [
          "Section Intro",
          "Introduction",
          "Beginning Your Journey into PLC Automation",
          "Summary",
          "Reading Material"
        ],
        "Control World": [
          "Section Intro",
          "Intdouction to Control World",
          "Contacts and Switches",
          "Very Important Note: Review Process",
          "More about Coils",
          "Line Diagrams Control Loads and Control Devices",
          "Control Systems Fundamentals",
          "Summary",
          "Reading Material",
          "Exploring the Basics of the Control World"
        ],
        "PLC World": [
          "Section Intro",
          "Introduction To PLC",
          "Why Use PLC",
          "Ladder Logic",
          "PLC Connections and Assigment",
          "PLC Basics and Applications",
          "Summary",
          "Reading Material",
          "Understanding PLC Basics and Ladder Logic"
        ],
        "Latches, Timers & Counters": [
          "Section Intro",
          "Latches and Step Relay",
          "Timers",
          "Counters and MCRs",
          "Advanced PLC Functions",
          "Summary",
          "Reading Material",
          "Utilizing Latches, Timers, and Counters in Control Systems"
        ],
        "Practical and Software Examples": [
          "Section Intro",
          "Download and Install the Required Development Environment",
          "First PLC Program",
          "How to Run Simulation Inside The Software to Test Code",
          "Setting Up and Testing Your PLC Environment",
          "Summary",
          "Reading Material",
          "Building and Testing Your First PLC Program"
        ],
        "Final": [
          "Section Intro",
          "End Of Course",
          "Summary",
          "Reading Material"
        ],
        "Practice Test": [
          "Practice Test on PLCs, Ladder Logic, and Control Systems"
        ],
        "who we are?": [
          "Who We Are?"
        ],
        "Course Project": [
          "Course Project",
          "Fully Programmed PLC Control Application"
        ],
        "Course Wrap-Up": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "There is no software, hardware or experience required to complete this course.",
        "A Computer"
      ],
      "description": "This course is designed to help people with no prior experience in PLC programming with the basic tools necessary to create a complete PLC program.\nWhy You Should Take This Course?\nThis course will help you understand PLCs.\nIt discusses TIMERS, Counters, Relays, Coils, and Ladder Logic.\nYou will learn how to build your first PLC program from scratch.\nIt will improve your knowledge about how to write PLC programs.\nYou can create reports or do other things with the information learned in this course.\nLearn the basics of electrical engineering to use in a variety of fields.\nYou'll also be able to build your first PLC program from scratch!\nContinual Updates 4.2 Star | More Than 1000 STUDENTS!!! THANK YOU!!!\nWhat Students Are Saying:\n\"This rating was left because on the whole the lessons have been quite clear & understandable. Quite happy with the course manage to complete & program my first Ladder diagram.\" - Ashley Reid\n\"The course is very much interesting and good for newcomers in PLC.\" - Nelson Acierto\n\"Quick and to the point, easy to follow.\" - Stewart Arthur\n\"I fully understood the instructor's methodology of explaining the process of NC / NO. The instructor does a great job explaining the process. Great start to an interesting topic.\" - Grey Little\n\"Your course has been very educational and helpful to me, thank you!\" - Samuel Hernandez\nCourse Overview: Topics such as control, Coils and Contacts, Input and Output, ladder logic programming, best practices, and more.\nAt the end of this course, you will know how to use timers and counters, latches, and relays to build a fully functional PLC Program.\nTypes of Tutorials Included:\nTheoretical: Helps you understand the basics of control and how you can use different control techniques and implement them using PLC.\nPractical: Helps you write your own PLC code for your machine and simulate it before loading it to an actual PLC to be able to track errors.\nThe course is structured in such a way that people with different experience levels in control and automation can benefit from the material inside it. Books and lectures in PDF are provided for future reference, in addition to 24-hour support for any PLC program issues.\nYou should take this course because it will help you start your industrial career by building the right theoretical and practical industrial automation knowledge in the PLC field.\nWhat You Will Learn\nUnderstanding and using timers, counters, relays, and coils.\nWriting and debugging ladder logic programs.\nBuilding your first PLC program from scratch.\nBasics of electrical engineering for PLC applications.\nImplementing control techniques using PLCs.\nWho Is This Course For\nBeginners with no prior knowledge of PLC programming.\nStudents and professionals looking to enhance their skills in industrial automation.\nAnyone interested in learning about PLCs and ladder logic.\nRequirements\nNo prior knowledge of PLCs required.\nA computer with internet access.\nEnthusiasm and a willingness to learn.\n\n\nAbout the Instructor Info Educational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge - we go into the depth of the topic and give you the exact - step by step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years - we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million View, 20k+ Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology, helping educate the world to make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and provide guidance and consulting for many students over the years to help them kick-start their career.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, particularly for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers courses on\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone who want's to learn Control",
        "Anyone who want's to start making PLC programs",
        "Anyone who want's to control a Machine",
        "Any Tech Geek who want's to know Counter, Timer, Relays and Ladder Logic Programming"
      ]
    },
    {
      "title": "Mastering Microcontroller: Timers, PWM, CAN, Low Power(MCU2)",
      "url": "https://www.udemy.com/course/microcontroller-programming-stm32-timers-pwm-can-bus-protocol/",
      "bio": "Learn STM32 Timers, CAN, RTC, PWM, Low Power embedded systems and program them using STM32 Device HAL APIs step by step.",
      "objectives": [
        "You will learn from scratch about STM32 Timers : Basic and General Purpose Timers",
        "Understand General purpose timer's Input capture apnd Output compare unit handling and Exercises",
        "Handling of Timer interrupts : Time base interrupts, capture interrupts, compare interrupts",
        "Understand about CAN filtering",
        "You will learn from scratch CAN Protocol, CAN Signalling, CAN Transceivers , Bus Access procedures",
        "Learn about CAN interrupts",
        "CAN Peripheral programming using STM32 device HAL drivers",
        "You will master Low power modes of the MCU : SLEEP,STOP and STANDBY",
        "You will understand different power domains of the MCU : VDD domain, 1.2V domain, backup domain",
        "Understand Microcontroller Wakeup Procedures using : RTC, wakeup pins,EXTI,etc.",
        "You will master RTC Features : CALENDAR, ALARM , TIME STAMP,WAKEUP UNIT",
        "RTC interrupts and wake up procedures",
        "Mastering Microcontroller Clocks Handling : HSE,HSI,LSE,LSI,PLL",
        "Understand phase locked loop (PLL) programming",
        "Learn PWM mode and Master through step by step code exercises",
        "You should be able to quickly develop applications which involves STM32 Device HAL layer"
      ],
      "course_content": {
        "Introduction": [
          "About the instructor",
          "what are we going to do in this course ?",
          "Important Note",
          "Source Code and Slides",
          "Rating and Review"
        ],
        "Development board details": [
          "About the development board used in this course",
          "Board Details and Locating Documents",
          "ST-Link Driver Installation",
          "ST Link Firmware Upgrade",
          "Hardware/Software Requirements"
        ],
        "IDE to use for this course": [
          "Which IDE to use for this course?"
        ],
        "Installing STM32CubeIDE": [
          "Note",
          "Migrating to STM32CubeIDE"
        ],
        "Installing OpenSTM32 System-Workbench": [
          "Downloading and Installing OpenSTM32 System-Workbench",
          "Installing OpenSTM32 System-Workbench",
          "About CubeMX version",
          "STM32 CUBE mx installation"
        ],
        "STM32 HAL and Project Architecture": [
          "Introduction to STM32 Cube Project Architecture",
          "Creating and Importing Project into OpenSTM32 System Workbench – Part1",
          "Understanding Project Hierarchy",
          "Project Layers Interaction",
          "STM32 Cube framework program flow-1",
          "STM32 Cube framework program flow-2",
          "HAL_Init()",
          "Understanding main.c msp.c and it.c",
          "Peripheral Handle Structure",
          "Linking Handle Structure and Peripheral",
          "STM32 HAL Header File Hierarchy"
        ],
        "Understanding STM32 HAL program flow with UART exercise": [
          "Importing Source Codes",
          "Project Creation",
          "Low level Processor specific hardware initialization: Part 1",
          "Low level Processor specific hardware initialization: Part 2",
          "Low level Processor specific hardware initialization: Part 3",
          "Peripheral High Level Initialization",
          "Peripheral Low Level Initialization",
          "Peripheral Low Level Initialization : configuring Pin Packs",
          "Peripheral Low Level Initialization : Alternate function settings",
          "Peripheral Low Level Initialization : IRQ settings",
          "STM32 HAL Peripheral data handling APIs",
          "UART Data TXing : Part 1",
          "UART Data TXing : Part 2",
          "UART Data RXing: Intro",
          "Implementing UART DATA RXing in Polling mode",
          "UART Data RXing in Interrupt Mode : Part 1",
          "UART Data RXing in Interrupt Mode : Part 2",
          "UART Data RXing in Interrupt Mode : Part 3",
          "UART Data RXing in Interrupt Mode : Part 4"
        ],
        "Clocks and PLL Programming": [
          "Introduction to different clock sources of the microcontroller",
          "Understanding methods to configure the SYSCLK",
          "Exploring clock handling APIs in RCC driver files",
          "Exercise : OSC Init and HSE bypass",
          "Exercise : Clock init implementation",
          "Exercise : SYSTICK configuration and summary",
          "Exercise : Testing",
          "Understanding HSI calibration",
          "PLL introduction and working principle",
          "Exercise : PLL Configuration via HSI Part 1",
          "Exercise : PLL Configuration via HSI Part 2",
          "Exercise : PLL Configuration via HSE",
          "Exercise : PLL Configuration for 180MHz",
          "Exercise : PLL Configuration for 180MHz implementation"
        ],
        "Timers": [
          "Introduction to Timers",
          "Types of Timers",
          "Timer Availability in STM32 MCUs",
          "Timer Availability in STM32 MCUs : Summary",
          "STM32 Basic Timer Assembly",
          "Timer Exercise : Project creation",
          "Timer Exercise : Understanding Timer Clock (TIMx_CLK)",
          "Timer Exercise : Understanding Prescaler and Period(ARR)",
          "Timer Exercise : Period Value Calculation",
          "Timer Exercise : MSP Init Implementation",
          "Timer Exercise : Test",
          "Timer Exercise : Interrupt Mode",
          "Timer Exercise : 10 Micro timer base generation"
        ],
        "General Purpose Timer: Input Capture Unit": [
          "Timer with input capture block",
          "Input Capture Exercise : working principle",
          "Input Capture Exercise : time base init",
          "Input Capture Exercise : Channel Configuration",
          "Input Capture Exercise : Channel Configuration Coding",
          "LSE Configuration",
          "Testing of LSE on MCO1 Pin",
          "Timer Input Capture Callback Implementation",
          "Input Capture Exercise : Testing",
          "Input Capture Exercise : Update on HSE",
          "Input Capture Exercise : with 4Mhz external signal",
          "Input Capture Exercise : with 50KHz external signal"
        ]
      },
      "requirements": [
        "Basic knowledge of C Programming and Microcontroller could be added advantage but not mandatory"
      ],
      "description": "Update: English closed captions have been added, transcript available\nCourse code: MCU2\n>>Welcome to the course which teaches you advanced Micro-controller programming. In this course you are going to learn and master Timers , PWM, CAN, RTC, Low Power modes of STM32F4x Micro-controller with step by step guidance. Highly recommended if you are seeking a career in the domain of Embedded software. <<\nIn this course, you will understand behind the scene working of peripherals with supportive code exercises. I have included various real-time exercises which help you to master every peripheral covered in this course and this course thoroughly covers both theory and practical aspects of Timers, PWM, CAN, RTC, Low Power modes of STM32F4x Micro-controller.\n\n\nIn Timer Section the course covers,\n1. Simple time-based generation using the basic timer in both polling and interrupt mode\n2. Timer interrupts and IRQ numbers, ISR implementation, callbacks, etc\n3. General-purpose timer\n4. Working with Input Capture channels of General-purpose timer\n5. Interrupts, IRQs, ISRs, callbacks related to Input Capture engine of the general purpose timer\n6. Working with output capture channels of the General purpose timer\n7. Interrupts, IRQs, ISRs, callbacks related to Output Capture engine of the general purpose timer\n8. PWM generation using output capture modes\n9. PWM Exercises\n10. Step by Step code development process will help you to master the TIMER peripheral\n\n\nIn CAN Section the course covers,\n1. Introduction to the CAN protocol\n2. CAN frame formats\n3. Understanding a CAN node\n4. CAN signaling (single-ended signals vs differential signals ) \\\n5. CAN Bus recessive state and dominant state\n6. CAN Bit timing Calculation \\\n7. CAN network with Transceivers\n8. Exploring inside view of CAN transceivers\n9. CAN Self-test modes such as LOOPBACK, SILENT LOOPBACK, etc with code exercises.\n10. Exploring STM32 bXCAN peripheral\n11. self-testing of bxCAN peripheral with exercises\n12. bXCAN block diagram\n13. Tx/Rx path of the bxCAN Peripheral\n14. CAN frame filtering and executrices\n15. CAN in Normal Mode\n16. Communicating between 2 boards over CAN\n17. Code exercises\n\n\nIn the Power Controller Section the course covers,\n1. ARM Cortex Mx Low Power Modes Normals Vs DeepSleep\n2. STM32 SLEEP mode\n3. STOP mode\n4. STANDBY mode\n5. Current measurement with different submode\n6. Waking up MCU by using wakeup pins, EXTI, RTC, etc\n7. Backup SRAM\n8. Step by Step coverage with lots of code exercises.\n\n\nIn RTC Section the course covers,\n1. RTC functional block diagram\n2. RTC clock management\n3. RTC calendar unit\n4. RTC Alarm unit\n5. RTC wake-up unit\n6. RTC Time Stamp Unit\n7. waking up MCU using RTC events\n8. RTC interrupts\n9. and lots of other details with step by step code exercises.\n\n\nSTM32 Device HAL framework\n1. STM32 Device Hal framework details\n2. APIs details\n3. Interrupt handling\n4. Callback implementation\n5. Peripheral Handling and configurations\n6. Step by Step explanation with code exercises.\n\n\n==> Important note: This course is NOT about auto-generating code using STM32CubeMx software<==\n\n\nHardware used :\nSTM32F446RE-NUCLEO Board\nCAN Transceivers for CAN Exercises\n\n\nIDE :\nEclipse-based OpenSTM32 SystemWorkbench or STM32CubeIDE\n\n\nLearning order of FastBit Embedded Brain Academy Courses,\nIf you are a beginner in the field of embedded systems, then you can take our courses in the below-mentioned order.\nThis is just a recommendation from the instructor for beginners.\n1) Microcontroller Embedded C Programming: absolute beginners(Embedded C)\n2) Embedded Systems Programming on ARM Cortex-M3/M4 Processor(ARM Cortex M4 Processor specific)\n3) Mastering Microcontroller with Embedded Driver Development(MCU1)\n4) Mastering Microcontroller: TIMERS, PWM, CAN, RTC,LOW POWER(MCU2)\n5) Mastering Microcontroller: STM32-LTDC, LCD-TFT, LVGL(MCU3)\n6) Embedded System Design using UML State Machines(State machine)\n7) Mastering RTOS: Hands-on FreeRTOS and STM32Fx with Debugging(RTOS)\n8) ARM Cortex M Microcontroller DMA Programming Demystified(DMA)\n9) STM32Fx Microcontroller Custom Bootloader Development(Bootloader)\n10) Embedded Linux Step by Step using Beaglebone Black(Linux)\n11) Linux device driver programming using Beaglebone Black(LDD1)\n\n\nOther programming courses\n1) Master The Rust Programming Language : Beginner To Advanced",
      "target_audience": [
        "Professionals interested in exploring Embedded systems",
        "Anyone who wants to start career in Embedded Systems",
        "Anyone who wants to learn Microcontroller programming in depth",
        "Students in the domain of Embedded Systems"
      ]
    },
    {
      "title": "Switching Theory & Logic Design of Digital Circuits",
      "url": "https://www.udemy.com/course/switching-theory-logic-design-of-digital-circuits/",
      "bio": "Complete course on digital logic ,Boolean theorems, minimizations , k-map, combinational and sequential logic circuits !",
      "objectives": [
        "Introduction to Digital Eectronics and logic design of Digital circuits",
        "Review of Number systems",
        "Logic operations,Error Detection and Correction codes",
        "Minimization of switching functions using K-Maps 3 ,4,5 Variable K-Maps etc.,",
        "Combinatiobal Logic Circuits",
        "Combinational logic circuits ( Advanced)",
        "Sequential Logic Circuits Full Concepts"
      ],
      "course_content": {
        "Basics of course": [
          "Introduction to course outlines",
          "Review of number systems",
          "Review of number systems:Positional and Non Positional number system",
          "Binary number system",
          "Octal number system",
          "Hexadecimal number system",
          "Number systems",
          "Explain the different Number systems?"
        ],
        "Review of Number systems": [
          "Types of number systems (Binary,Decimal,Octal and Hexa decimal )",
          "Conversion possibilities from one radix to another radix",
          "Radix 'r' (Any number system to ) to Decimal",
          "Decimal to radix r (or any number system)Conversion procedure",
          "Decimal to hexa,octal number system conversion with examples",
          "Binary to Hexa decimal conversion",
          "Binary to decimal conversion",
          "Hexa decimal to binary and also to Octal conversion",
          "Hexa decimal to Decimal conversion procedure with examples",
          "Binary to octal conversion",
          "Binary to decimal conversion",
          "Hexa decimal to decimal conversion",
          "Hexa decimal to Octal conversion",
          "Octal to decimal conversion",
          "Diminished radix or 'r-1' s complement with 9s and 1s complement examples",
          "r's complement (10s and 2's complements)",
          "Difference between 'r' and r-1's coplement methods",
          "Octal arithmetic (addition ,subtraction)",
          "Octal multiplication",
          "Hexadecimal arithmetic (Addition and subtraction)",
          "Data representation methods (Unsigned.signed magnitude,1'sc.& 2'scomplement )",
          "r's complement (2's and 10's complement ) method of subtraction",
          "r-1 's complement (1's and 9's complement etc.,) method of subtraction problems",
          "Binary Arithmetic -Addition rules and truth table",
          "Binary Addition problems",
          "Binary subtraction rules and problems",
          "Binary Subtraction (Big number-Small number and vice versa)",
          "Binary multiplication",
          "Binary Division",
          "Binary codes",
          "Binary codes (Sequential ,Alphanumeric etc.,)",
          "Examples on weighted codes",
          "BCD ,EXCESS-3, 2-4-2-1,Self complement codes",
          "Alphanumeric ,EBCDIC,Hollerith codes in details explanation"
        ],
        "Logic operations,Error Detection and Correction codes": [
          "Introduction to Boolean Algebra",
          "Baisc Logic operations",
          "Boolean theorems and postulates",
          "Boolean theorems and postulates-2",
          "Demorgans theorems",
          "Consensus theorem",
          "Boolean function",
          "Dual of the boolean function",
          "Complement of a boolean function",
          "Representation of boolean function:Min term and max term",
          "standard or canonical SOP form",
          "Conversion of SOP to standard or canonical SOP form",
          "Conversion of SOP to standard or canonical SOP form with truthtable (2 methods)",
          "Standard POS & Conversion of POS to standard or canonical POS form",
          "Conversion SOP TO CPOS and CSOP forms with truth table example problems",
          "Conversion SOP TO CPOS and CSOP forms with truth table example problems",
          "Conversion of standaed SOP and POS( vice versa) with procedure( 3rd model)",
          "Conversion of standard CSOP and CPOS with procedure( 3rd model)",
          "Minimization of logic functions using boolean theorems",
          "3 Variable minterms and maxterms",
          "Digital logic gates",
          "LOogic gates",
          "Properties of Excusive OR gate",
          "Inverted Gates",
          "Generation of logic diagram with boolean expression",
          "Multi Level AND-OR realization",
          "Two Level AND-NOR realization",
          "Multi Level AND-OR and NAND realization problems",
          "Multi Level AND-OR and NOR realization problems",
          "Addition of BCD Numbers",
          "Addition of Excess-3",
          "Gray code or self reflection code or cyclic code",
          "Gray to Binary code conversion",
          "Binary to Gray code conversion",
          "Error Detection and Correction codes",
          "Hamming code",
          "Hamming code 7 bit example"
        ],
        "Minimization of switching functions using K-Maps etc.,": [
          "K-Map method",
          "K-Map format",
          "Representation of boolean function:Min term and max term using K-Maps",
          "Plotting a graphical table of 2,3 and 4 variables on K-Map",
          "Plotting of switching/Boolean function or expression",
          "Plot the boolean expressions on K-Map both SOP and POS",
          "Minimization of switching functions using K-map",
          "Rules of adjancent cells & Prime implicants,Essential Prime implicants",
          "4-Variable K-Map",
          "5-Variable K-Map",
          "Minimal SOP realization using K-Map",
          "Minimal POS realization using K-Map",
          "Conversion of SOP to POS to SOP problems using 3,4 variable using K-Map method",
          "Code converters:Binary to BCD conversion using K-Map",
          "Code converters: BCD to EXCESS-3 conversion",
          "EXCESS-3 TO BCD code converter",
          "EXCESS-3 TO BCD code converter 'C' term modification for better group",
          "Binary to Gray code converter",
          "5-Variable K-Map Practice problem",
          "Don't Care Conditions"
        ],
        "Combinatiobal Logic circuits": [
          "Introduction to Combinational logic or switching or digital circuits",
          "How to design a combinational logic circuits",
          "Half-Adder",
          "Full adder",
          "Half-subtractor",
          "Full subtractor",
          "4-8 bit binary adder",
          "How to design parallel binary adders-subtractors and 2's complement adder",
          "4-bit adder-subtractor",
          "BCD adder combinational logic circuit design"
        ],
        "Combinational logic circuits ( advanced)": [
          "Introduction to decoders",
          "2 to 4 decoder",
          "3 to 8 decoder",
          "4 to 16 decoder",
          "4 to 16 decoder using two 3 to 8 decoders",
          "5 to 32 decoder",
          "what is encoder?",
          "Decimal to BCD encoder",
          "Octal to binary encoder",
          "4:2 Priority encoder",
          "Octal to binary priority encoder",
          "Whatis multiplexer",
          "4:1 multilexer",
          "8:1 multiplexer",
          "32:1 multiplexer design using four 8:1 s MUXes and one 2:4 decoder",
          "32:1 multiplexer using two 16:1 muxes",
          "2:1 multiplexer and 3:1 multiplexer using 2:1 multiplexer",
          "Demultiplexer",
          "1:2 Demultiplexer",
          "Implementation of logic gates using 2:1 multiplexer",
          "1:2 Demultiplexer simplified",
          "1:4 Demultiplexer",
          "1:8 Demultiplexer",
          "Designa 1 to 8 demux with two 1 to4 demuxes",
          "How to design Design different types of demultiplexers",
          "Higher order Demultiplexer"
        ],
        "Sequential logic circuits": [
          "Introduction to sequential logic circuits and its comparisions",
          "One bit memory cell",
          "One bit memory cell with simple example",
          "What is latch and Flip-Flop?",
          "SR Latch using NOR gates",
          "S'R' Latch , SR latch and Gated SR latch Using NAND gates",
          "What is Flip-Flop and Types of Triggering (positive and negative edge triggering",
          "Types of Flip-Flops",
          "Clocked SR Flip Flop using NOR gate",
          "Clock SR Flip Flop and Its Truth Table",
          "Characteristic Table of SR Flip Flop",
          "Excitation Table of SR Flop-Flop and state Diagram",
          "Clocked SR Flip Flop using NAND gate",
          "Clocked SR Flip Flop using NAND gate Characteristic Table",
          "Clocked SR Flip Flop using NAND gate Excitation Table",
          "D Flip Flop using SR flip flop of Truth Table ,Characteristic ,Excitation Table",
          "State Diagram and Timing Diagram of D flip flop",
          "JK Flip Flop using NAND Gates includes Truth,Characteristic,Excitationtables etc",
          "Timing Diagram of JK Flip Flop",
          "T FLIP FLOP Truth ,Characteristic,Excitation,Timing, Diagram etc.,",
          "Conversion of One Flip-Flop to another Flip Flop with example",
          "Conversion of SR FlipFlop to D-Flip Flop",
          "Conversion of SR FlipFlop to T-Flip Flop",
          "Conversion of SR FlipFlop to J-K-Flip Flop",
          "Conversion of JK FlipFlop to T-Flip Flop",
          "Applications of Flip Flops(freequency division,registers.parallel data storage)",
          "Introduction to counters",
          "3 bit Asynchronous up Counter",
          "4 bit Asynchronous up Counter",
          "Design of Ripple counter with Modulus <2 power n",
          "Design of MOD-6 synchronous up counter",
          "Timing Diagram of MOD-6 synchronous up counter",
          "Design of MOD-10 (or Decade Counter) Synchronous Up Counter",
          "Design of Asynchronous 2 bit Down Counter",
          "Design of Asynchronous 3 bit Down Counter",
          "Design of synchronous 4 bit Up Counter",
          "Design of synchronous 4 bit Down Counter",
          "Design of Synchronous MOD 5 Counter",
          "Design of BCD synchronous Counter using T-Flip Flops",
          "Ring Counter",
          "Johnson Counter or Twisted Ring Counter",
          "Introduction to Shift Registers",
          "Controlled Buffer Register",
          "SISO,SIPO,PIPO Shift Registers",
          "PISO Shift Registers",
          "Bi Directional Shift Registers",
          "Universal Shift Registers"
        ],
        "Sequnetial circuits -2 (Finite state machines)": [
          "Introduction to finite state machines",
          "Introduction to Mealy and Moore machines in FSM",
          "Components in a state diagram with example",
          "SR flip flop state diagram",
          "JK flip flop state diagram",
          "State Diagram of D flip flop",
          "State Diagram of T-Flip flop",
          "Analysis of clocked sequential circuits",
          "Analysis of clocked sequential circuits (EXAMPLE3)",
          "Analysis of clocked sequential circuits (EXAMPLE2)"
        ]
      },
      "requirements": [
        "There is no need to learn before taking to the course, we will explain each every concept from scratch",
        "All youneed a mobile to listen class or laptop and pen  and paper to make a note of it."
      ],
      "description": "Learning switching theory or  digital electronics is like playing a football! Open doors to careers and hobbies in online digital job field\n\n\nBuilding on the knowledge you gained in the Digital Electronics course will help you to move forward in digital field and opens even more doors to diverse careers, projects and jobs .\nThe trainer is certified person in Coursera and in NPTEL. He has 20 years of teaching field experience in both theoretical and practical.\nWithout computers and digital systems we cannot imagine our lives and coming future rapidly increasing in digital field. Think about how many of them are now operated their works particularly in  industries,  businesses and projects that involve computers or computer control. Even though bio medical ,mechanical and automobiles are chock full of digital electronics now. All of this involves digital electronics, and you want in on it today.\nIn this  course, you will learn digital electronic circuits, switching theory and logic design  and also it will be in use to make digital systems.. You'll don't need a good understanding of any  electronics skills but  some simple math skills, a computer, and that's it!\nNo prior knowledge of digital electronics or programming is required, and yet by the end of this course you'll have built functioning digital electronic circuits and surely you can design some digital circuits which you want.\n\nLesson overview:\nIn this course ,you further develop your knowledge and skills to include digital electronics and practice your skills on real-life digital components.\nIn the first section you may learn the how the digital era changed  and how it helps your career and Review of number systems\nSecond section you may learn the full information on number systems and logic operation,error detection and correction codes\nIn this course you will gain a wide knowledge on digital systems and this course surely will help you to move forward or jump in VLSI field.\nIn this course we'll be covering:\nHistory of Electronics and how digital field emerged\nWhat is signal, analog and digital signal?\nWhat is digital system?\nNumber systems full and its conversions\nIntroduction to Boolean Algebra\nBasic Logic operations\nBoolean theorems and postulates\nDemorgans theorems\nConsensus theorem\nBoolean function\nDual of the Boolean function and Complement of a Boolean function\nRepresentation of Boolean function: Min term and max term\nstandard or canonical SOP form\nConversion of SOP to standard or canonical SOP form\nConversion of SOP to standard or canonical SOP form with truth table (2 methods)\n\n\nStandard POS & Conversion of POS to standard or canonical POS form\nConversion SOP TO CPOS and CSOP forms with truth table example problems\nConversion SOP TO CPOS and CSOP forms with truth table example problems\nConversion of standard SOP and POS( vice versa) with procedure( 3rd model)\nConversion of standard CSOP and CPOS with procedure( 3rd model)\n\n\nMinimization of logic functions using Boolean theorems\n3 Variable minterms and maxterms\nDigital logic gates\nLogic gates\nProperties of Excusive OR gate\nInverted Gates\nGeneration of logic diagram with Boolean expression\nMulti Level AND-OR realization\nTwo Level AND-NOR realization\n\n\nMulti Level AND-OR and NAND realization problems\nMulti Level AND-OR and NOR realization problems\nAddition of BCD Numbers\nAddition of Excess-3\nGray code or self reflection code or cyclic code\nGray to Binary code conversion\nBinary to Gray code conversion\nError Detection and Correction codes\nHamming code\nHamming code 7 bit example.\nMinimization of switching functions using K-Maps\n2,3,4,5 variable K-Maps\nCode converters\nBCD to Excess-3 vice versa\nBinary to Gray vice versa etc.,\nCombinational logic circuits\nHalf adder\nFull adder\nHalf subtractor\nFull subtractor\nParallel adder\nDecoders\nEncoders\nMultiplexers\nDE multiplexers\nSequential logic circuits\nFlip flops\nRegisters\nCounters\nand much more and more!",
      "target_audience": [
        "This course is perfectly suited to those who are studying or working in digital or in electronics and communication field.",
        "Electrical & Electronics Engineers",
        "Computer Science or Engineers  or even Mechanical students also necessary the concepts of digital electronics"
      ]
    },
    {
      "title": "The Complete PLC Programming Bootcamp",
      "url": "https://www.udemy.com/course/plc-programming-bootcamp-plc-delta-siemens-plcmitsubishi-s/",
      "bio": "The only course you need to learn to Program and become PLC developer. Basics, Advance Relays, HMI, SCADA and more!",
      "objectives": [
        "Be able to build ANY PLC Program you want",
        "Build fully-Functional PLC Programs and apps for your idea or machine",
        "Understand the latest PLC technologies, including Advnace modules, Relays, Programming and Simulation Software",
        "Work as a PLC developer",
        "Learn professional PLC developer best practices",
        "Write codes instead of drawing long SFC or Ladder diagrams to",
        "Create SCADA interfaces using various technologies allowing operators to interact with a live, running system.",
        "Draw HMI Layout to Control PLC",
        "Program PLC using Drawings",
        "Use different type of relay that exist inside PLC",
        "Understand the Working principle of Relays and how they interact with Contacts",
        "Differentiate between PIC Microcontroller and PLC",
        "Use Different methods for programming PLC",
        "Create a PLC Control Program",
        "Create amazing PLC projects",
        "Use different type of components inside HMI Screen",
        "Understand the Working principle of HMI",
        "Connect HMI with PLC Practically",
        "Choose the right communication protocol",
        "Advance in your knowledge about PLC",
        "Use the provided PLC program as the basis for your interfaces.",
        "Create a fully-functional graphical interfaces to monitor PLC",
        "Use different types of relay that exist inside PLC",
        "Understand the Working principle of Relays and how they interact with Contacts",
        "Differentiate between PIC Microcontroller and PLC",
        "Learn different methods for programming PLC",
        "Program PLC using Text Commands - Short Codes",
        "Create a PLC Control Program using Short Codes",
        "Write codes instead of drawing long SFC or Ladder diagrams to create amazing projects",
        "Program Any Microcontroller without drawing a single line",
        "Create a PLC Control Program using Flowcharts and Diagrams",
        "Draw instead of writing codes to create amazing projects",
        "Program Any Microcontroller without writing a single code"
      ],
      "course_content": {},
      "requirements": [
        "All software required for this course will be provided Free with Installation instruction in video lectures",
        "A Computer / Laptop",
        "A Will to apply, not just watch",
        "HMI Programming software (Free and Included)"
      ],
      "description": ">>> This course is designed to help people with no prior in PLC programming with the basic tools necessary to create a complete PLC program then teach them advance PLC Topics and how to deal with HMI and SCADA System plus manipulation of internal PLC Registers. <<<\n\n\nWhy you should take this course?\nThe course is for all levels of experience. You can start from the beginning or if you have some experience skip ahead\nLearn the basics all the way to advance programming\nAll videos are professionally made and free of bugs\nYou are going to learn everything you need to know about PLC\nYou will be able to program NEW automation systems, not just repair old ones\n\n\nThings That will be covered in this course:\nPLC Basics\nTopics such as control, Coils and Contacts, Input and Output, ladder logic programming, best practices and more.\nPLC Advance Course Data Registers and Internal Relays\nThis Section will help you move to the next level in PLC Programming, Stop using old coding techniques and start Programming PLC like professionals in no time without going through long code\nHMI Interfacing with PLC\nThis section will help you know HMI (Human Machine Interface) and build you FIRST HMI Program and get it working with your PLC and build you own HMI Interface to Control PLC Operation and do monitoring.\nSCADA System Interface with PLC\nLearn SCADA hands-on by developing your own interfaces for different systems and control Your PLC.\nProgramming PLC Using Text Commands - Mnemonic Language\nStop using Lader diagram and SFC and start Programming PLC using short codes in no time without even a computer\nProgramming PLC Using Drawings - Coding No More\nThis Course will take you to a new level of PLC (Programmable Logic Controller) Programming, It will be a fun, easy, fast and enjoyable Programming Journey for you.\n\n\nWelcome to this course.\nTopics such as control, Coils and Contacts, Input and Output, ladder logic programming, best practices and more.\nAt the end of this course you will know how you can use timers and counters, latches and relays to build a fully functional PLC Program.\nIn this course you will get different type of tutorial\n-Theoretical to help you understand the basics of control and how you can use different control techniques and implement them using PLC.\n-Practical to help you write you own PLC code for your machine and simulate it before load it to an actual PLC to be able to track errors\nThe course is structured in such a way that people with different experience in control and automation can take benefit from the material inside it, Books and lectures in PDF are provided to be in your hands for future reference, in addition to 24 hour support for you in any PLC program that you have problem with.\nYou should take this course because it will help you start your industrial carrier by building the right theoretical and practical industrial automation knowledge in the PLC field.\n---------------------------------------\nPLC Advance Course Data Registers and Internal Relays\nStop using old coding techniques and start Programming PLC like professionals in no time without going through long code\nThis Course will take you to a new level of PLC (Programmable Logic Controller) Programming, It will be a fun, easy, fast and enjoyable Programming Journey for you.\nYou will no longer program PLCs like a newbie.\nAs most of you know, there is an easy way, a long way and a smart way to program a PLC, drawing a long Ladder logic diagrams or an SFC might solve the problem easily or simply, but it won't solve it effectively, it requires through understanding of Ladder Diagrams to give the ability to turn your idea into a project that is professionally programmed with PLC.\nWhat if I tell you that now you can unleash you full potential in PLC Programming and be your own professional programmer.\nYou think this is cool but not yet interested!, well how about the fact that this course will allow you to know what happens in internal registers inside PLC.\nTopics like Internal relays, Data registers, branching, if statements and more advance techniques will be introduced.\n---------------------------------------\nHMI Interfacing with PLC\nThis course will help know HMI (Human Machine Interface)and build you FIRST HMI Program and get it working with your PLC\nWelcome to this course.  HMI is the acronym for Human Machine Interface, and can be designed as just that; an interface between the user and the machine.\nA Human Machine Interface (HMI) is exactly what the name implies; a graphical interface that allows humans and machines to interact. Human machine interfaces vary widely, from control panels for nuclear power plants, to the screen on an iPhone.\n\nIn this course you will get different type of tutorial\n-Theoretical to help you understand the basics of HMI Control and how you can use different control techniques and implement them using Your HMI & PLC.\n-Practical to help you write you own HMI & PLC code for your machine and track errors\nThe course is structured in such a way that people with different experience in control and automation can take benefit from the material inside it, Books and lectures in PDF are provided to be in your hands for future reference, in addition to 24 hour support for you in any HMI & PLC program that you have problem with.\nYou should take this course because it will help you start your industrial carrier by building the right theoretical and practical industrial automation knowledge in the PLC field.\n---------------------------------------\nSCADA System Interface with PLC\nLearn SCADA hands-on by developing your own interfaces for different systems and control Your PLC.\nWelcome to this course.\nIn this course, you're going to learn about SCADA by creating graphical interfaces that you can use to monitor automated process, establish operating parameters, and even acquire data from a system that is already operated and functional.\nWonderware Indusoft Software is the most used solution in the world of visualization.  As such, we'll be working extensively with that technology.\nWe'll also be working hands-on with InduSoft, by the end of this course, you're to know what people are doing in the world of automation today.\nSo get ready to start designing and creating your very first SCADA interface easily and effectively, with 24/7 support\n---------------------------------------\nProgramming PLC Using Text Commands - Mnemonic Language\nStop using Lader diagram and SFC and start Programming PLC using short codes in no time without even a computer\nWelcome to Programming PLC Using Text Commands course.\nYou will no longer hate programming PLCs.\nAs most of you know, drawing Ladder logic diagrams or an SFC is not an easy nor simple process, it requires a thorough understanding of Ladder Diagrams and other languages to give the ability to turn your idea into a project that is based on PLC\nWhat if I tell you that now you can program your PLC and make a fully functional project without even a computer. YES, YOU CAN!\nMnemonic Language (Short Simple and Easy to remember codes) will help you unleash your full potential in PLC Programming without even using a computer!\nThat's not all. After coding, This program will give you the ability to view your code. As a result, it will be ready so that you can download it to your PLC.\nYou think this is cool but not yet interested. Well, how about the fact that this software allows you to trace the code line by line and debug the software while your machine operate!\nThis is a course that will help advance in your career and get more options in PLC Programming world.\nHow many people do you know Program PLC Using Text Commands!. Few I'm sure, now you get to be one step ahead of others in your industry\n---------------------------------------\nProgramming PLC Using Drawings - Coding No More\nStop writing long codes that waste your time and required skills and effort, Start Drawing your Code with Simple Shapes\nWelcome to this course.\nThis Course will take you to a new level of PLC (Programmable Logic Controller) Programming, It will be a fun, easy, fast and enjoyable Programming Journey for you.\nYou will no longer hate programming PLCs.\nAs most of you know, writing a code or Ladder logic diagrams is a complex process that required through understanding of Ladder Diagrams and other languages to give the ability to turn your idea into a project that is based on PLC , but what if I tell you that now you can program your PLC and make a fully functional project without writing a single line of code!!\nThat's not all, after drawing, this program will give you the ability to view your code and it will be ready to be downloaded to your PLC.\nYou think this is cool but not yet interested!, well how about the fact that this software allows you to build a fullly functional simulation environment that will show you how your PLC work in action with modules for hundreds and hundreds of libraries such as Timers, Counters, switches and other advance modules.\n---------------------------------------\n---------------------------------------",
      "target_audience": [
        "Anyone who want's to learn Control",
        "Anyone who want's to start making PLC programs",
        "Anyone who want's to control a Machine",
        "Any Tech Geek who want's to know Counter, Timer, Relays and Ladder Logic Programming",
        "PLC - Programmable Logic Controller - Geeks",
        "People Interested in Industrial Automation",
        "Anyone interested in Programming Programmable Logic Controller",
        "Anyone who want's to start Drawing HMI programs",
        "Anyone who want's to start making PLC programs",
        "Anyone who want's to control a Machine via HMI",
        "Anyone who want's to control a Machine remotely or using a visual interface",
        "Any Tech Geek who want's to know PLC, SCADA and How to take full advantage of SCADA System design.",
        "For those lacking the requisite knowledge to make the most of this course, my first course \"PLC Programming covers things you'll need.",
        "This course requires students to already know the basics of PLC programming"
      ]
    },
    {
      "title": "Process Visualization (Level 3)",
      "url": "https://www.udemy.com/course/hmi-scada/",
      "bio": "Learn HMI / SCADA hands-on by developing your own live interfaces for a running system.",
      "objectives": [
        "By the end of this course, you will have created HMI / SCADA interfaces using various technologies allowing operators to interact with a live, running system.",
        "Using the provided PLC program as the basis for our interfaces, you'll be creating graphical interfaces to run the process and log data into a SQL database.",
        "You'll know how to map data between RSLogix 500 projects and several visualization technologies.",
        "You'll have some AMAZING demo projects to show off in interviews."
      ],
      "course_content": {},
      "requirements": [
        "You will need to download a VERY LARGE archive in order to take full advantage of this course. That file is OVER 10gb! The alternative is to download a LOT of software individually and install and configure it all bit by bit. While I DO provide guidance for doing that in the course, I CANNOT provide one-on-one support.",
        "All software required for this course (except for VMWare if you use a Mac) will be provided. That being said, the versions provided are unregistered, not activated and running in demo mode. Continued use of these programs requires purchase, activation and licensure, however all of it will work for a limited time (adequate to complete this course). So you won't have to pay for software to learn, but the software WILL eventually stop working at the end of the various trial periods.",
        "The only software you need to worry about being able to run is VMWare.  If you have a Windows PC, you can download VMWare Player for free.  If you have a Mac, you will need to purchase a copy of VMWare Workstation... or use a Windows computer.",
        "Familiarity with RSLogix 500, RSLinx and RSLogix 500 Emulate is required for this course."
      ],
      "description": "As a PLC programmer, there are two sides of the coin that you MUST know to get the job done, and those are the PLC and the HMI.  In my first two PLC courses (always cheaper on PLC Dojo), you learned the ins and outs of PLC and have already created some pretty complex programs to run machines.\n\nBut if people aren't able to interact with those machines, they aren't going to be of much use!  In this course, you're going to learn about HMI and SCADA by creating graphical interfaces operators will use to monitor automated process, establish operating parameters, and even acquire and warehouse data from a running system.\nThere are multiple solutions on the market to accomplish these tasks, and as such, we're going to be covering several.  Wonderware (Schneider Electric / Indusoft) is perhaps the top solution in the world of process visualization.  As such, we'll be working extensively with that technology, but we won't limit ourselves to a single package.\nWe'll also be working hands-on with InduSoft, EasyBuilder 5000 and AdvancedHMI, and hands-off with FactoryTalk View Studio and C-More so by the end of this course, you're going to actually know and have working experience with most of what people are using in the world of automation today.\n\n\nWhat's covered in each of the five PLC courses I teach here and on my own PLC Dojo site?\n\n\nPLC Fundamentals (Level 1) teaches you how to program with the focus on ladder logic, which is the most popular PLC programming language.  The goal is to teach you everything you need to know to make a PLC do what you want it to do.  You are also given all the software necessary to both CREATE and RUN your own programs live - right on your own computer.\nApplied Logic (Level 2) forces you to take what you've learned and solve problem after progressively harder problem unassisted.  You get a spec and are told simply: \"Make it work, and don't progress until you have.\"  After, you get to watch me solve each one as well.  By the end, you don't just know how to program - you are a PROGRAMMER.\nProcess Visualization (Level 3) gives you both knowledge and experience in FIVE different HMI / SCADA development environments.  By the end, you've created several COMPLETE visualization (screen) projects that you can actually run on your own computer (and SHOW PEOPLE in an interview) with no additional hardware.\nIEC Paradigms (Level 4) is only for the heavyweights.  This course teaches you how to program using all five IEC programming languages (plus one more) in multiple environments.  There are projects as well, so by the end, you have seen it all and DONE it all as well.  There won't be anything anybody can show you that you won't already be familiar with.\nTIA Portal Master Project (Level 5) is the culmination of everything. In that course, you'll program an entire power plant using all five PLC programming languages (in PARALLEL!) with a full HMI. It's a massive and complex project that really showcases your talents in an interview!",
      "target_audience": [
        "This course requires students to already know the basics of PLC programming.  You should already be familiar with RSLogix 500 memory / IO addresses.  As we will be developing interfaces against a running instance of a PLC program running live on RSLogix 500 Emulate, you should already be familiar with that software as well as RSLinx and RSLogix 500.",
        "For those lacking the requisite knowledge to make the most of this course, my first course \"PLC Programming from Scratch (PLC I) covers everything you'll need and a whole lot more."
      ]
    },
    {
      "title": "STM32Fx Microcontroller Custom Bootloader Development",
      "url": "https://www.udemy.com/course/stm32f4-arm-cortex-mx-custom-bootloader-development/",
      "bio": "Learn fundamentals of Bootloader Development for your ARM Cortex Mx based STM32Fx Microcontroller",
      "objectives": [
        "Write your own custom bootloader for your STM32Fx microcontroller and test",
        "Host Bootloader Communication implementation",
        "Custom Bootloader command packets",
        "Different boot modes of the STM32 Microcontroller",
        "Boot loader flash handling implementation : Sector Erase/Program/Mass erase",
        "Boot loader options bytes(OB) Program handling implementation",
        "Boot loader Flash sector protection status handling implementation",
        "Boot loader In application programming implementation (IAP)",
        "Vector table relocation of ARM cortex Mx processor"
      ],
      "course_content": {},
      "requirements": [
        "STM32Fx based board is needed if you want to test the code developed",
        "Basic 'C' Programming Knowledge is required but not mandatory"
      ],
      "description": "Get started with Micro-controller Bootloader Development.\nThis course will be suitable for beginners in the domain of embedded systems and programming.\nThis course is all about learning to develop a custom BootLoader for ARM CORTEX Mx powered STM32Fx microcontroller.\nIn this course, I will guide you through a step-by-step procedures to develop your own BootLoader and we will explore many things related to BootLoader programming.\n\n\nThe BootLoader we are going to develop in this course will have the following features\n1) It can do in-application programming(IAP). You can use the BootLoader to flash a given application binary\n2) Read microcontroller-specific data\n3) Flash related configurations like setting up read and write protections for different sectors\n4) Flash sector erase\n5) Mass erase of the user flash\n6) Read and display the protection status of the flash memory\n7) Jump to the specified address to execute the code\n\n\nAlong with custom BootLoader development, you will also understand\n1) The different memory organization of a microcontroller\n2) Memory aliasing and different boot modes of STM32\n3) How MCU boots after power-up\n4) Vector table mapping and vector table relocation use case of arm cortex mx processor.\n5) Difference between In-system programming(ISP) and in-application programming(IAP)\n6) Custom boot loader design flow chart\n7) Host and Boot loader communication method\n8) Implementation of different boot loader commands\n\n\nYou can also extend this BootLoader by giving the following features once you complete the course\n1) Encrypt and Decrypt the firmware sent by the host using AES\n2) Over-the-air programming by interfacing WIFI or Zigbee Modules\n\n\n\n\nHardware used in this course:\nIn this course, STM32F446RE Nucleo board is used.\nIf you have any other board based on the STM32 microcontroller then also you can use the codes developed in the course with no or minor changes.\n\n\nSoftware used:\n1) KEIL-MDK-5 for WINDOWS\n2) OpenSTM32 SystemWorkbench for (WINDOWS/LINUX/MAC OS)\n\n\nLearning order of FastBit Embedded Brain Academy Courses,\nIf you are a beginner in the field of embedded systems, then you can take our courses in the below-mentioned order.\nThis is just a recommendation from the instructor for beginners.\n1) Microcontroller Embedded C Programming: absolute beginners(Embedded C)\n2) Embedded Systems Programming on ARM Cortex-M3/M4 Processor(ARM Cortex M4 Processor specific)\n3) Mastering Microcontroller with Embedded Driver Development(MCU1)\n4) Mastering Microcontroller: TIMERS, PWM, CAN, RTC,LOW POWER(MCU2)\n5) Mastering Microcontroller: STM32-LTDC, LCD-TFT, LVGL(MCU3)\n6) Embedded System Design using UML State Machines(State machine)\n7) Mastering RTOS: Hands-on FreeRTOS and STM32Fx with Debugging(RTOS)\n8) ARM Cortex M Microcontroller DMA Programming Demystified(DMA)\n9) STM32Fx Microcontroller Custom Bootloader Development(Bootloader)\n10) Embedded Linux Step by Step using Beaglebone Black(Linux)\n11) Linux device driver programming using Beaglebone Black(LDD1)\n\n\nOther programming courses\n1) Master The Rust Programming Language : Beginner To Advanced",
      "target_audience": [
        "Students in the field of Microcontroller and Embedded Systems",
        "Professionals working in the field of Embedded systems"
      ]
    },
    {
      "title": "MOSFET Crash Course",
      "url": "https://www.udemy.com/course/mosfet-mini-course/",
      "bio": "Learn the core concepts of Metal Oxide Semiconductor Field Effect Transistors and how to build circuits with them",
      "objectives": [
        "MOSFET",
        "CMOS Logic Family",
        "Analog and Digital Circuit Design using MOSFETs"
      ],
      "course_content": {
        "A Review on the concepts and types of Transistors": [
          "1. Review on basic electronic components",
          "2. Transistors - Working, Applications",
          "3. Comparison between FET and BJT, Amplifier Characteristic",
          "4. Types of Field Effect Transistor"
        ],
        "Analysis of Depletion type MOSFETS": [
          "5.Construction and Working of N-Channel Depletion type MOSFET",
          "6. The influence of gate voltage",
          "7. Output Characteristics curve of a N-Channel Depletion type MOSFET",
          "8. Transfer Characteristics curve of a N-Channel Depletion type MOSFET"
        ],
        "Analysis of NMOS and PMOS": [
          "9. Construction and Working of NMOS",
          "10. Transfer Characteristics curve of a NMOS",
          "11. Regions of Operation of NMOS and PMOS",
          "12. Symbols of PMOS and NMOS",
          "13. Device Equations of a MOSFET",
          "14. Circuit Equations of a MOSFET"
        ],
        "MOSFET Amplifiers": [
          "15. Using MOSFET as an amplifier",
          "16. Small signal models of a NMOS",
          "17. Analysis of Common Source and Common Gate Amplifiers",
          "18. Importance of Voltage followers and Common Drain Amplifier",
          "Update - Amplifier Design"
        ],
        "CMOS Logic Families": [
          "19. Features of CMOS Technology",
          "20. Electronic switching circuits and CMOS Inverter",
          "21. Implementing Universal Gates using CMOS Logic"
        ],
        "Hands on Example using a Simulation Tool!": [
          "22. Example - Blinking of an LED using NMOS",
          "23. Simulation of Blinking of an LED using NMOS"
        ]
      },
      "requirements": [
        "Yes, A basic knowledge in electrical circuits is preferred"
      ],
      "description": "Hey there! Welcome to my 'MOSFET Crash course'. In this course, The core concepts of MOSFETs like their construction, working and applications will be dealt.\nAfter studying this course, you'll be able to\n1. Design logic circuits using CMOS Logic.\n2. Design a MOSFET Amplifier using any one of the three combinations (CS, CG, CD)\n3. Use MOSFETs as electronic switches.\n4. Understand the difference between BJT and FET\n5. Understand the different types of FET and MOSFET\n6. Know the formation of different logic gates using PMOS and NMOS.\n7. Know how to use TinkerCAD, A circuit simulation tool.\n8. Use MOSFET to control electronic components like LEDs\n9. Understand the terminologies like Power Consumption, Fan In, Transconductance etc.\n\n\nMOSFETS are widely used in industries. Some of the major applications of MOSFETS are:\n\n\n1. MOSFET is used for switching and amplifying electronics signals in the electronic devices.\n2. It is used as an inverter.\n3. It can be used in digital circuits.\n4. MOSFET can be used as a high frequency amplifier.\n5. It can be used as a passive element e.g. resistor, capacitor and inductor.\n6. It can be used in brushless DC motor drive.\n7. It can be used in electronic DC relay.\n8. It is used in switch mode power supply (SMPS).",
      "target_audience": [
        "Beginner Electronics, CS and Electrical Aspirants"
      ]
    },
    {
      "title": "How to Build a PC [2024] - Beginners to Intermediate",
      "url": "https://www.udemy.com/course/how-to-build-a-pc-2021-beginners-to-intermediate/",
      "bio": "Ultimate Guide on how to easily Build a Computer from Start to Finish [Beginners to Intermediate]",
      "objectives": [
        "Learn what computer components to buy, in order to build a PC",
        "Learn where to find the best online prices for your computer components",
        "Learn how to pre-assemble and test the components to see if they are all working as intended",
        "Learn how to enter the computer BIOS to access advanced settings",
        "Learn how to update the BIOS and install essential hardware drivers",
        "Learn how to overclock your computer for even more performance",
        "Learn how to create a bootable Windows USB flash drive and install Windows from scratch",
        "Learn how to setup the Corsair RGB fan ecosystem",
        "Learn how to Install fans into the case for optimal, positive dust free airflow",
        "Learn how to install the motherboard, CPU, Graphics card, SSD, NVMe, HDD & Power supply into the case",
        "Learn how to customize your PC by removing stickers and giving it a custom spray paint",
        "Finalise your build by testing for noise levels"
      ],
      "course_content": {},
      "requirements": [
        "None, except buying the hardware components to build your PC (which i will give you some tips on)"
      ],
      "description": "Learn how to easily build a high end computer from start to finish in this in-depth course.\n\n\nSave Money by Building your own computer\nHello, my name is Ozarc and I have been building my own computers since I was 12 years old, saving me tens of thousands of dollars over the years.\nKnowing how to Build a PC is a skill that will save you a ton of money, compared to buying a pre-built system from one of the many online companies, who not only overcharge you but slap together whatever log grade components they have available to them.\n\n\nRest assured that your hardware components are of the quality you paid for\nBy learning how to build your own computer you will be assured that your computer consists of the high grade components you personally bought and put together yourself.\n\n\nKnow how to fix your own computer\nBy building your own PC, you get hands-on experience on where all the parts go and connect form day one, giving you priceless insight on how to also fix it, should something break in the future.\nThis will again save you money from not having to let your local computer shop charge and do it for you.\n\n\nFundamental skill to have for anyone looking for a job in IT\nIf you are looking for a job in IT, then knowing how to build and fix a computer is a vital, fundamental skill to have on your resume.",
      "target_audience": [
        "Beginners or anyone who simply wants to be able to easily build and manage their own computer",
        "Anyone who wants to save money by learning to build and maintain their own computer"
      ]
    },
    {
      "title": "Arduino SMS Sending Motion Detector using Python",
      "url": "https://www.udemy.com/course/arduino-sms-sending-motion-detector-using-python/",
      "bio": "Move Arduino to the Next Level using Python and get SMS notifications on your Mobile when Motion is Detected via APIs",
      "objectives": [
        "Design Arduino Circuits",
        "Program Arduino to get it ready for sending data to Python script via Serial Port",
        "Connect Python with Arduino",
        "Learn serial communication basics in Python",
        "Learn serial communication basics in Arduino",
        "Fully Control Arduino using Python and get Motion Sensor reading from Arduino",
        "Send SMS Once a Motion is detected using Python scripting",
        "Unleash the power of APIs in Python",
        "Code like a Professional",
        "Advanced Control of analog and digital inputs and outputs"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Section Intro",
          "Introduction",
          "Who We Are?",
          "Exploring Motion Detection and Messaging Integration Concepts",
          "Getting to Know the Course",
          "Section Summary",
          "Reading Material"
        ],
        "Hardware and Software Requirements": [
          "Section Intro",
          "Hardware and Software Requirements",
          "Preparing Your Workspace",
          "Section Summary",
          "Reading Material"
        ],
        "Important Note: Review System": [
          "Section Intro",
          "Important Note: Review System",
          "Section Summary",
          "Reading Material"
        ],
        "Circuit Design": [
          "Section Intro",
          "Circuit Design",
          "Basic Circuit Design",
          "Section Summary",
          "Reading Material"
        ],
        "Arduino Coding": [
          "Section Intro",
          "Arduino Coding",
          "Writing Your First Arduino Program",
          "Section Summary",
          "Reading Material"
        ],
        "SMS API Service": [
          "Section Intro",
          "Sign up for SMS API Service",
          "Activate SMS API Service via Trial Request",
          "Get Your Online Phone Number",
          "Quiz",
          "Setting Up SMS API",
          "Section Summary",
          "Reading Material"
        ],
        "Coding": [
          "Section Intro",
          "Download and Install Pycharm python Editor",
          "Download and Install Required Libraries using Pycharm",
          "Quiz",
          "Get the Send SMS Python API and Test it",
          "Practical Motion Detector SMS Sending Process",
          "Quiz",
          "Integrating Arduino and Python",
          "Section Summary",
          "Reading Material"
        ],
        "Python Programming": [
          "Section Intro",
          "Download and Install Required Python Libraries",
          "Setting Up Your Python Environment",
          "Section Summary",
          "Reading Material"
        ],
        "Download and Install Software Section": [
          "Section Intro",
          "Download and Install Arduino Pro IDE",
          "Installing Arduino Pro IDE",
          "Section Summary",
          "Reading Material"
        ],
        "Practice Test": [
          "Comprehensive Arduino and SMS API Service Practice Test"
        ]
      },
      "requirements": [
        "Basic Knowledge of Digital Electronics"
      ],
      "description": "Arduino SMS Sending Motion Detector using Python: Step by step guide is a course specially created for Electronic Geeks & Engineers who want to move their Arduino Programming to the next level by implementing Python APIs to receive SMS Notification whenever Arduino detected a Movement.\n\n\nWhy you should take this course?\nLearn how to use Python to connect with the Arduino via SMS\nLearn how to use PIP and MIMETOOLS to send SMS Text Messages\nLearn how to take a Motion Detection image from a camera and upload it securely\nLearn how to build a webcam based Motion Detector using Python\n\n\nWelcome to this new course.\nThe course lesson will explain “How to achieve the full potential of your Arduino using Python” by using Python APIs. This course will work best for you if you have got basic knowledge of Electronics and Arduino. you'll find out how to interface the Arduino along with your Computer and Control it using Python and the way to share data between Arduino and Python to initiate an action like sending an SMS.\nArduino is often employed in your Engineering projects, Industrial Projects or Home Automation related projects.\nArduino is one among the cost-effective tools which you'll create or purchase & starts programming to interact with physical elements along with your logic & create results the way you wish.\nAnd using Python, you'll fully control the Arduino Board and therefore the various process parameters like Motor Speed, LED ON/OFF Feedback, Temperature Signal, you'll also create unlimited Buttons, Switches & Message Box to manage the Arduino\nAfter ending this course, you'll create Innovative Projects. the sole thing that you simply got to do is THINKING, WIRING & CODING.\nNote: No Previous Python experience is required.",
      "target_audience": [
        "Engineering Students - Electronics, Electrical & Computer Science",
        "High School Science Students",
        "Electronic Geeks, Hobbiest & Art Students",
        "Arduino Geeks",
        "Python Geeks"
      ]
    },
    {
      "title": "Fusion 360 Circuit Design and PCB Manufacturing",
      "url": "https://www.udemy.com/course/fusion-360-crash-course/",
      "bio": "Learn how to create circuit design and preparing a PCB for manufacturing plus getting a 3D view of your circuit",
      "objectives": [
        "Follow the trend in circuit design and PCB manufacturing business",
        "Create PCB For free",
        "Integrate circuit design 3-D modeling and simulation",
        "Integrate circuit design and simulation process to the same software that they are familiar with",
        "Create parts and build assemblies",
        "Create sketches",
        "Create and control different versions of your parts with configurations",
        "Automate design modification with equations",
        "Create and export a Video for your parts motion",
        "Create drawings of your designs",
        "Create Motion between parts of your designs",
        "Create and Export PDF File for different views of any part",
        "Create and export drawings as PDF file with all dimensions and different views"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Introduction",
          "Mastering Fusion 360 for Circuit Design and PCB Manufacturing",
          "Quiz"
        ],
        "Important Note: Review System": [
          "Important Note: Review System"
        ],
        "Software Section": [
          "Download Fusion 360",
          "Run Fusion 360 for the First time",
          "Getting Started with Fusion 360",
          "Quiz"
        ],
        "Fusion 360 User Interface": [
          "Fusion 360 User Interface",
          "Exploring the Fusion 360 User Interface",
          "Quiz"
        ],
        "Electronics Parts Library": [
          "Adding Electronic Parts and Libraries in Fusion 360",
          "Managing Electronics Parts and Libraries in Fusion 360",
          "Quiz"
        ],
        "Circuit Design": [
          "Creating our First Schematic",
          "Creating Your First Schematic in Fusion 360",
          "Quiz"
        ],
        "PCB Design": [
          "Create Your PCB Design and 3D View",
          "Designing a PCB in Fusion 360",
          "Quiz"
        ],
        "Practical Example": [
          "Make a PIC microcontroller training Board using fusion 360",
          "Creating a PIC Microcontroller Training Board",
          "Quiz"
        ],
        "Practice Test": [
          "Fusion 360 for Electronics Design"
        ],
        "Who we are?": [
          "Who We Are?"
        ]
      },
      "requirements": [
        "A Computer or Laptop with an Active internet connection"
      ],
      "description": "In this course, you will learn how to create circuit schematics in no time using a library that has tons of electronic elements available free for you to use in the Fusion 360 software.\nWelcome to this course.\nThis course will take you from zero experience in circuit design, simulation, and PCB fabrication to a professional who can build professional circuits and turn them into production-ready products.\nFusion 360 is state-of-the-art software that provides a complete experience to draw your schematic and control every single detail of each electronic part. It allows you to check your schematic for design errors before moving forward to PCB manufacturing. Plus, it can autoroute your PCB in multiplayer mode.\nYou’ll also get a 3D visualization of your circuit that you can easily use in creating a 3D case for your PCB using the very same software, Fusion 360.\nStop using old school software that limits your possibilities and start using one of the most trending software out there, provided by Autodesk. Kickstart your freelancing career in 3D design, circuit design, and simulation plus PCB manufacturing.\nThis software provides you with CAD/CAM and simulation capabilities to help you achieve your full potential and test your circuit before moving to the PCB permanent prototype.\nFusion 360 Electronics workspace expands the capabilities of Fusion 360 to create professional electronic designs.\nWhy You Should Take This Course\nLearn how to create circuit designs and prepare a PCB for manufacturing\nLearn to get a 3D view of your circuit\nGain knowledge in the principles of electrical circuits\nCourse material is interactive and gamified\nThis course is perfect for anyone wanting to design, manufacture, and sell their own products\nAt the end of this course, you can create innovative projects. The only thing that you need to do is THINKING, DESIGNING & MANUFACTURING.\nUser Testimonials and Social Proof\n\"This course transformed my understanding of circuit design and PCB manufacturing. The hands-on approach with Fusion 360 is invaluable.\" - Emily R.\n\"A must-take for anyone serious about electronics design. The detailed explanations and practical examples are top-notch.\" - David S.\nAn Author Bio Showing Off Credentials\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in the Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge - we go into the depth of the topic and give you the exact - step-by-step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years - we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million View, 20k + Subscriber) and author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their career.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative teaching style that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, and in particular for the world of Arduino, PIC Microcontroller, Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers Courses on\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World\nA Single Powerful CTA\nEnroll now and start your journey to mastering Fusion 360 circuit design and PCB manufacturing today!\nFAQ Section\nQ: Do I need any prior knowledge to take this course?\nA: No prior knowledge or skills are required. This course is designed for complete beginners.\nQ: How long will it take to see results?\nA: Results can vary, but many students start seeing results within the first few weeks of applying the strategies taught in the course.\nQ: Is there a money-back guarantee?\nA: Yes, Udemy offers a 30-day money-back guarantee if you are not satisfied with the course.\nWhat You Will Learn\nCreating circuit designs using Fusion 360\nPreparing a PCB for manufacturing\nGetting a 3D view of your circuit\nPrinciples of electrical circuits\nWho Is This Course For\nAnyone interested in creating practical circuit designs\nBeginners with no prior experience in circuit design\nMakers and hobbyists wanting to expand their knowledge\nStudents and professionals looking to enhance their skills\nRequirements\nA computer with internet access\nBasic understanding of the internet and web browsing\nWillingness to learn and implement the strategies taught",
      "target_audience": [
        "Anyone who is looking to follow the trend in circuit design and PCB manufacturing business",
        "Anyone who's looking for a software that is free And has tons of Components To be used.",
        "Anyone who is looking to integrate circuit design 3-D modeling and simulation",
        "Anyone who is familiar with the fusion 360 and wants to integrate circuit design and simulation process to the same software that they are familiar with",
        "Engineering Students - Electronics, Electrical & Computer Science",
        "High School Science Students",
        "Electronic Geeks, Hobbiest & Art Students",
        "Embedded Systems Geeks",
        "3D Geeks and Fans",
        "Inventors and Designers"
      ]
    },
    {
      "title": "Robot Operating System (ROS) with Arduino",
      "url": "https://www.udemy.com/course/arduino-with-robot-operating-system-ros-robotics/",
      "bio": "Unleash Arduino Hardware Superpower with Robot Operating System Algorithms and move Arduino Coding to the Next Level",
      "objectives": [
        "Learn What is ROS",
        "Learn how to Interface Arduino with ROS!",
        "How to Create intelligent robotic systems based on Arduino",
        "How Communication Between ROS and Arduino is accomplished",
        "How to setup Software and Hardware",
        "What are the ROS and Arduino Libraries and how to use them",
        "How to Code and connect an Arduino Circuit to Control it via ROS"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Section Intro",
          "Introduction",
          "Planning Discussion – Integrating Arduino with Robot Operating System (ROS)",
          "Who We Are?",
          "Hardware and Software Requirements",
          "Quiz",
          "Section Summary",
          "Reading Material"
        ],
        "ROS: Robotic Operating System": [
          "Section Intro",
          "What is ROS",
          "Explaining the Concept",
          "Quiz",
          "Section Summary",
          "Reading Material",
          "Exploring ROS Concepts and Architecture"
        ],
        "Getting things Ready": [
          "Section Intro",
          "Download Operating System 1804 and ROS",
          "Download and Install VMware Player",
          "Download and install Ubuntu 18 04 on VMware",
          "Quiz",
          "Download and Install Arduino IDE on Ubuntu",
          "Section Summary",
          "Reading Material",
          "Installing and Configuring Ubuntu 18.04, ROS, and Arduino IDE on VMware"
        ],
        "Arduino ROS Coding": [
          "Section Intro",
          "Download and Install Arduino Pro IDE",
          "Arduino ROS Coding",
          "Quiz",
          "Section Summary",
          "Reading Material",
          "Implementing ROS Communication with Arduino Using Arduino Pro IDE"
        ],
        "Circuit": [
          "Section Intro",
          "Download and Install Fritzing Software",
          "Simple Arduino Circuit to Test Publisher and Subscriber",
          "Quiz",
          "Section Summary",
          "Reading Material",
          "Designing and Testing an Arduino Circuit for ROS Communication"
        ],
        "Finishing Setup": [
          "Section Intro",
          "Upload Arduino Code to Arduino Board",
          "Connect Arduino Board to Ubuntu OS",
          "Starting Roscore and Installing RosSerial",
          "Quiz",
          "Fix Arduino Port Permission Error",
          "Section Summary",
          "Reading Material",
          "Uploading Arduino Code and Establishing Serial Communication with ROS"
        ],
        "Practical Implementation": [
          "Section Intro",
          "Running the System and Controlling Arduino via ROS",
          "Quiz",
          "Section Summary",
          "Reading Material"
        ],
        "Extra Ubuntu 20.04": [
          "Section Intro",
          "Download Operating System and ROS",
          "Install Ubuntu OS Inside Windows",
          "Download and Install Arduino on Ubuntu",
          "Quiz",
          "Download Ubuntu 20 04 Operating System and ROS",
          "Download and Install Noetic ROS on Ubuntu 20 04",
          "Section Summary",
          "Reading Material",
          "Installing and Configuring ROS Noetic and Arduino IDE on Ubuntu 20.04"
        ],
        "ROS on Windows 10": [
          "Section Intro",
          "Meeting the Requirements",
          "Download and Install Visual Studio",
          "Install Windows Package Manager",
          "Section Summary",
          "Reading Material"
        ],
        "Practice Test": [
          "Section Intro",
          "ROS and Arduino Integration Practice Test",
          "Section Summary",
          "Reading Material"
        ]
      },
      "requirements": [
        "Basic experience in Electronics",
        "A Will to apply, not just watch",
        "Be familiar with the Arduino Uno",
        "Be familiar with the breadboard and wiring."
      ],
      "description": "Unleash Arduino Hardware Superpower with Robot Operating System Algorithms and move Arduino Coding to the Next Level\nLearn about ROS, or Robot Operating System, a popular open-source middleware used in robotics!\nArduino boards are used to build small robots and have simple logic defined control. But with limited onboard computational power and software, often developers are unable to graduate to more complex robots. Often, as builders become more experienced, they look for robotics-specific software, as Arduino offers only part of the control.\nWhy you should take this course?\nLearn how to create robot algorithms using the Robot Operating System (ROS)\nGain the skills to use ROS's powerful features for your own robotics project\nLearn how to integrate multiple sensor inputs and actuators with Arduino\nDiscover the language of C++, which is essential for building complex control systems for robots\nThis Course introduces a middleware software framework Robot Operating System (ROS) and walks you through the setup and use of ROS with Arduino to create more intelligent robotic systems.\nRobot Operating System (ROS) is one of the most popular and widely used robotics middleware software frameworks. It is an open-source platform that helps makers and developers alike to get started with robotics software without reinventing the wheel. ROS provides a standard communication architecture for seamless integration, use, development, and deployment of different components of a robotic system including control, perception, planning, and more. It is a language-agnostic platform with cross-platform communication support for different machines regardless of their site of deployment.\nProbably the most used open-source microcontroller development board, Arduino offers an easy-to-use software-hardware interface and an ever-expanding user community. Arduino is mostly compatible with all digital and analog circuitry as well as external devices supporting serial communication interfaces like SPI, I2C, and UART.\nROS-based software frameworks run the high-level algorithms and processes like robot models’ inference, filtering, motion strategy generation, controller algorithms, and more. An Arduino controller mounted on a robot is used to perform the low-level/embedded control and sensing. It includes any or all of motor control, temperature and ultrasonic sensors, IMUs and wheel encoders, and other devices.\nWhat You Will Learn In this Course:\nWhat is ROS\nArduino with ROS!\nHow to Create intelligent robotic systems based on Arduino\nCommunication Between ROS and Arduino\nSoftware and Hardware Setup\nROS and Arduino Libraries\nCoding and Circuit Connection\nA lot of information is waiting for you inside this course, join now and start making your own.\nWhat You Will Learn\nUnderstand what ROS is and its importance in robotics\nLearn how to integrate Arduino with ROS for creating intelligent robotic systems\nSet up the software and hardware for ROS and Arduino integration\nMaster communication between ROS and Arduino\nUtilize ROS and Arduino libraries effectively\nGain practical skills in coding and circuit connection for robotics projects\nWho is This Course For\nRobotics enthusiasts wanting to explore ROS and Arduino integration\nMakers and developers looking to enhance their robotics projects\nStudents and educators in STEM fields\nAnyone interested in learning advanced robotics concepts and applications\nRequirements\nBasic understanding of Arduino and electronics\nEnthusiasm for robotics and programming\nA computer with internet access for software setup\n\n\nAbout the Instructor Info\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge - we go into the depth of the topic and give you the exact - step by step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years - we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy.\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million Views, 20k+ Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThe team also works as freelancer engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their careers.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, particularly for Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to improve their skills and build great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone interested in Unleashing Arduino Hardware Superpower using ROS Coding and Algorithms",
        "ROS Robot Operating System Geeks",
        "Arduino Geeks",
        "Electronics Geeks",
        "Anyone interested in making amazing electronics Projects",
        "Anyone interested in making amazing Microcontroller Projects",
        "Intermediate Robotics Software developers",
        "Robotics Enthusiasts"
      ]
    },
    {
      "title": "ESP8266 Mastery: Rule Your Appliances Remotely | 2025",
      "url": "https://www.udemy.com/course/getting-started-with-nodemcu-step-by-step/",
      "bio": "Craft Your own IoT Web dashboard, Learn LCD Pattern generation, GPIO Interfacing, Physical Input and LUA using ESP8266",
      "objectives": [
        "Create your own IoT dashboard to monitor and control home appliances remotely.",
        "Learn the principles of LCD technology and create animated patterns of your choice.",
        "Gain a deep understanding of LUA programming and the powerful C++ language.",
        "Acquire in-depth knowledge of various IDEs for seamless communication with NodeMCU.",
        "Build your own prototype while keeping expenses low."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of any programming language"
      ],
      "description": "Master NodeMCU: From Setup to Advanced IoT Projects\nAre you ready to dive into the world of IoT and home automation? This step-by-step course will guide you through mastering NodeMCU, starting from the basics and progressing to advanced projects that showcase its true potential.\nWhat You’ll Learn\nFlashing the Latest Firmware – Get your NodeMCU up and running with ease.\nLua Programming – Learn this powerful, high-speed language and build two essential projects to understand its workflow.\nArduino IDE with NodeMCU – Transition seamlessly into C++ programming, unlocking even more possibilities.\nExciting Hands-On Projects\nAnimated Graphics on LCD – Explore NodeMCU’s graphical capabilities by creating dynamic display patterns.\nWeb Server for Remote Control – Build a fully functional web-based AC appliance controller, eliminating the need for third-party apps.\nWhy Choose This Course?\nFull Source Code Access – Replicate and modify projects with ease.\nEnglish Subtitles – Learn comfortably with clear, accessible lectures.\nExpert Technical Support – Get answers within 24 hours (Monday–Saturday) through our Q&A section.\n100% Risk-Free Enrollment – Enjoy a 30-day money-back guarantee, no questions asked.\nTake Your IoT Skills to the Next Level\nJoin now and unlock a world of possibilities in IoT and home automation. Whether you're a beginner or an enthusiast, this course is designed to help you succeed.\nEnroll Today – Risk-Free!",
      "target_audience": [
        "Ideal for those who want to develop a real-time web application to control AC appliances remotely.",
        "Perfect for beginners stepping into the world of IoT with no prior knowledge.",
        "Great for individuals exploring Embedded Systems using an affordable and efficient development board.",
        "Suitable for those looking for an Arduino alternative with an onboard Wi-Fi system-on-chip.",
        "Designed for non-technical individuals with no programming experience who want to enter the world of Embedded Systems."
      ]
    },
    {
      "title": "Building a RepRap 3D Printer",
      "url": "https://www.udemy.com/course/building-a-reprap-3d-printer/",
      "bio": "Build your own open source 3D printer over the weekend",
      "objectives": [
        "Understand the evolution of RepRap and the dynamics of open hardware innovation",
        "Quickly assemble an i3 Berlin 3D printer",
        "Safely connect all the cables and calibrate your 3D printer for perfect 3D prints",
        "Become familiar with the most important 3D-print settings in Slic3r",
        "Get to know the different print materials and how to make multimaterial objects",
        "Explore KISSlicer and Cura path generator",
        "Experiment with alternative solutions and software",
        "Troubleshoot and prevent printing problems with ease"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to RepRap",
          "How a 3D Printer Works",
          "3D Printing Workflow",
          "Overview of the i3 Berlin 3D Printer Design",
          "Tools and Parts"
        ],
        "Building the Y-unit": [
          "Mounting the Threaded Rods and Power Supply",
          "Mounting the Aluminium Plates and the Y-motor",
          "Mounting the Y-carriage and the Timing Belt",
          "Adjusting the Parallels"
        ],
        "Building the XZ-unit": [
          "Mounting the X Axis",
          "Mounting the Z Axis",
          "Mounting the Timing Belt"
        ],
        "Wiring Up the 3D printer": [
          "Wiring the Power Supply",
          "Assembly of the Main Units",
          "Wiring the Y-unit",
          "Wiring the Z-unit",
          "Wiring the X-unit and the Extruder",
          "Wiring the HeatBed"
        ],
        "Calibrating the Printer": [
          "Mount the End Stop Magnets and M5 Rods",
          "Software and Communication",
          "Assemble the Extruder",
          "Test and Mount the Extruder",
          "Calibrating the Movements of the Printer",
          "Mount and Calibrate the Print Platform"
        ],
        "Print in 3D": [
          "Filament and Printer Settings",
          "Print Settings",
          "First Layer",
          "Dual Extrusion",
          "Operate the 3D Printer"
        ],
        "Experiments and Alternatives": [
          "Cura",
          "Kisslicer",
          "Filaments",
          "Print Platform Surface",
          "Extruders",
          "The Future of Open Source 3D Printing"
        ],
        "Troubleshooting": [
          "Software Issues in Windows, Mac, and Linux",
          "Layer Shift",
          "Oozing",
          "Extruder Is Not Working"
        ]
      },
      "requirements": [
        ". It will definitely be an advantage if you know some 3D modelling in any program."
      ],
      "description": "This video course teaches you how to make a 3D printer for yourself and calibrate and adjust it perfectly. You will get to know how to solve and prevent common problems and discover alternative solutions to tailor your 3D printer to your liking and needs. You will learn how to assemble parts for your 3D printer and build it with ordinary tools and skills. The course starts off with assembling of the Y-Unit and the XZ-Unit before moving on to the extruder and wiring. Next, you will be shown how to execute some simple calibrations and suddenly you're printing in 3D with your very own 3D printer. By the end of the video, you will be a junior 3D printing expert. This 3D printer used for demonstration in this course is especially designed for easy assembly and use, and gives you a head start in building your own 3D-printers for now and for the future.\nAbout the Author\nBram de Vries is a mechanical engineer and social scientist dedicated to open hardware. He has previously worked at Demotech, developing pro-poor technologies in Guatemala, Ethiopia, and India.\nThe overarching aim of his work is to open up innovations and make them accessible. For the last four years, his focus has moved from water pumps to open source 3D printing. He also tutors Blender courses.",
      "target_audience": [
        "If you wish to learn and build a 3D printer from scratch, this course is for you. Even if you have ordinary technical skills, you can build and run an open source 3D printer with help of this video."
      ]
    },
    {
      "title": "Learn FPGA Design With VHDL (Intel/Altera)",
      "url": "https://www.udemy.com/course/learn-fpga-design-with-vhdl/",
      "bio": "Gain a Solid Foundation in VHDL for FPGA Development with Lots of Examples",
      "objectives": [
        "We will cover the VHDL language and syntax with lots of example projects",
        "Relate VHDL code to hardware implementation",
        "Creating FPGA building blocks using VHDL",
        "Creating State Machines using VHDL",
        "Creating complex FPGA designs from scratch",
        "Highlight good design practice & common pitfalls",
        "Writing Test Benches in VHDL",
        "Simulate & debug FPGA Designs using ModelSim",
        "Use the Intel Quartus software to compile and implement projects",
        "Use Quartus To Perform Pin Assignments",
        "Programming FPGAs using the USB Blaster",
        "Using the Quartus Netlist Viewer to view the Hardware Realisation",
        "Making sense of the Quartus Fitter Reports",
        "Quartus Assignment Editor",
        "Quartus Settings, Options & Optimisations",
        "Basic Introduction to Quartus Timing Analyser",
        "Implement a UART project that communicates over RS232 with a PC",
        "Implement a State Machine project",
        "Implement a 4 Digit 7-Segment Display to print a Count value",
        "Implement a Project to Create A PWM output",
        "Implement a Shift Register to Drive LEDs",
        "Implement a Project to cover Switch De-bouncing and Synchronisation"
      ],
      "course_content": {
        "Course Videos": [
          "Introduction",
          "Cyclone IV Development Board",
          "Installing Quartus",
          "FPGA Fundamentals",
          "Signals & Data Types I",
          "Signals & Data Types II",
          "Constants",
          "VHDL Operators",
          "Structure of a VHDL File",
          "Project : Switch And LED",
          "The Process Block",
          "State Machine Project",
          "Component Instantiation",
          "Project : Using Quartus IP Wizard To Generate PLL",
          "Quartus Netlist Viewer & Fitter Reports",
          "Quartus Settings & Options",
          "VHDL Concurrent Statements",
          "VHDL Sequential Statements",
          "Signal Assignments I",
          "Signal Assignments II",
          "How To Generate A PWM",
          "Project : PWM LED",
          "Variables",
          "Functions and Procedures",
          "Packages and Libraries",
          "Parameterised Components",
          "Type Conversions",
          "Miscellaneous Topics",
          "Tri-State Drivers",
          "Comparators",
          "Multiplexers",
          "Shift Registers",
          "Serialisers",
          "RAMs & ROMs",
          "Finite State Machines",
          "State Machine Practise",
          "Good Design Practice I",
          "Good Design Practice II",
          "Project : LED Shift Register",
          "How To Debounce A Switch Input",
          "Project : De-bouncing Asynchronous Input",
          "Quartus Timing Analyser",
          "Driving A Seven Segment Display",
          "Project : 4 Digit Counter Using Seven Segment Display",
          "Test Benches I",
          "Test Benches II",
          "Test Benches III",
          "UART Block Diagram",
          "RS232 Protocol",
          "BaudClkGenerator Block Diagram",
          "BaudClkGenerator VHDL",
          "BaudClkGenerator Test Bench",
          "Serialiser Block Diagram",
          "Serialiser VHDL",
          "Serialiser Test Bench",
          "UART Transmitter VHDL",
          "UART Transmitter Test Bench",
          "Shift Register VHDL",
          "Shift Register Test Bench",
          "Synchroniser VHDL",
          "Synchroniser Test Bench",
          "UART Receiver VHDL",
          "UART Receiver Test Bench",
          "Summary So Far",
          "Top Level Module VHDL",
          "Top Level Module Test Bench I",
          "Top Level Module Test Bench II",
          "Quartus Implementation",
          "Conclusion",
          "Quartus Project"
        ]
      },
      "requirements": [
        "Fundamentals of digital electronics & logic gates",
        "Knowledge of binary and hexadecimal number systems"
      ],
      "description": "Course Audience :\nThis course is aimed at students & engineers who want to get into the field of FPGA development using VHDL. No prior knowledge in VHDL/FPGA is assumed so we will start from the very basics.\nStudents should have a basic knowledge of digital electronics including logic gates and flip-flops.\n\n\nCourse Summary :\nThis course covers the VHDL language in detail. In between lectures, we will complete a number of fun projects (please see below) with increasing complexity to consolidate the knowledge we have gained during the course. We will go through how to write Test Benches and we will implement a number of Test Benches to verify the UART project. We cover the Intel Quartus software in detail and also go through how to simulate Test Benches using using ModelSim.\n\n\nProjects (Implemented and Tested On a Cyclone IV Development Board):\n1. Reading a switch input and driving an LED output\n2. Simple State Machine which reacts to user input and drives a number of LEDs\n3. Synchronising and de-bouncing a Switch Input.\n4. Generating a PWM output.\n5. Designing a Shift Register.\n6. 4 Digit 7-Segment display for counting the number of push button activations\n7. UART module & State machine for echoing back characters received from a PC over RS232\n\n\nIntel Quartus Softare:\n1. Creating & Compiling a new project\n2. Performing pin assignments.\n3. Basic introduction to Quartus IP Catalogue.\n4. Using the USB Blaster to program the FPGA via JTAG.\n5. Using the Quartus Net List Viewer to explore the hardware realisation of your design.\n6. Making sense of Quartus Fitter Reports to better understand resource allocation.\n7. Using the Quartus Assignment Editor.\n8. Overview of Quartus settings, options and optimisations.\n9. Basic introduction to timing analyser, timing constraints and SDC files.\n\n\nIntel ModelSim Starter Edition Software :\n1. Creating a new ModelSim Project.\n2. Writing & compiling Test Benches.\n3. Running simulations.\n4. Using the Waveform viewer to analyse results.\n\n\nCourse Details :\nWe will start by covering the basics of FPGA hardware. This hardware background is vital and as we learn how to write VHDL, we will also refer back to how our code gets implemented in hardware.\nIn the second section of the course, we will cover the VHDL language in detail. We will cover all the aspects (Signals & Data types, VHDL Keywords & Operators, Concurrent & Sequential statements, Entity & Architecture, Process Block, Generics, Constants & Variables, Records, Component Instantiation, Procedures & Functions, Packages & Libraries and Type Conversions) that are needed to be able to develop complex and advanced FPGA designs. There will be plenty of simple examples to allow you to learn the VHDL language quickly and enable you to confidently write your own code. We will also look at how most of the VHDL language maps to hardware on the actual device.\nWith this strong foundation in the language, we will look at how to build fundamental FPGA blocks starting from Tri-State Drivers, Registers, Comparators, Multiplexers, Shift Registers, Serialisers, RAMs & ROMs and Finite State Machines. We will look at how to code all of the above structures and also explore how these are implemented in real hardware in the FPGA.\nIn the next section, we will look at hierarchical design with VHDL. This design practise is used when creating complex designs having more than one design unit. We will explore this concept from an example to see how design units can be joined together to form a hierarchical design.\nIn the next section we will explore good FPGA design practise. From my experience most beginners in FPGA design make common mistakes and fall into certain traps. Some of these can lead to issues that are very difficult to debug and fix. The idea behind this section is to make you aware of these common pitfalls and explore ways in which we can circumvent these. We will talk about Latches, Generated Clocks, Clock & Data Gating, Benefits of a Register Rich Design, Benefits of Synchronous Design, Dealing With Asynchronous Inputs, Clock Domain Crossing, Designing for Reuse, Signal Initialisation, Synchronising Reset De-assertion, Routing Clocks & Resets and Using PLLs.\nBy this stage, we would have covered a lot of the theory and also completed a number of design projects so you should have the knowledge to create your own FPGA designs independently. We will now cover design verification. This section will explore how to write test benches. We will explore aspects of VHDL coding styles for writing test benches. We will discuss how to perform file IO for creating input vectors and to store output results. We will also discuss self-checking test benches to help automate the test process.\nIn the final section of the course, we will design a UART module controlled by a State machine. We will write VHDL code to implement the UART and state machine from scratch. We will use a hierarchical design approach where we will have a number of design units. We will write test benches for each design unit and perform simulations (using ModelSim) for verification.  We will bring all design units together into our top level VHDL module and do a system level simulation. Next, we will explore how to create & configure a project in Intel Quartus to implement our design on our FPGA development board. We will look at how to do the pin assignments and also very briefly look at applying very basic timing constraints to get our design to pass. We will then test the design on real hardware to make sure our design works as intended.",
      "target_audience": [
        "Graduate students looking for a career as an RTL engineer or Design Engineer",
        "Electronics engineers/hobbyists who want to get into the field of FPGA design",
        "Those interested in FPGA development who are looking for an introductory course",
        "Anyone about to embark on their first VHDL design project"
      ]
    },
    {
      "title": "Build and Program Smart LEGO Mindstorm EV3 Robot",
      "url": "https://www.udemy.com/course/build-and-program-smart-lego-mindstorm-ev3-robot/",
      "bio": "Discover the power of LEGO Mindstorm EV3 as you learn to invent, build, and program your very own robots",
      "objectives": [
        "Build your own Lego EV3 robot for optimum navigation and place sensors for optimal calibration",
        "Control Your LEGO EV3 robot with the programming app",
        "Let the robot use its multiple sensors to make sense of the functional environment you have created for it",
        "React To Different Environments And Respond To Commands",
        "Use beams, gears, and connector blocks effectively in your own designs",
        "Calibrate the sensors using buttons on the robot"
      ],
      "course_content": {
        "Getting Started with LEGO EV3": [
          "The Course Overview",
          "Getting Started"
        ],
        "Programming Your Robot to Move": [
          "Introduction to Motors",
          "Steering Control",
          "Driving in a Rectangle",
          "Driving in a Triangle",
          "The Parking Challenge"
        ],
        "Communicate with the Robot": [
          "Introduction",
          "What an Image!",
          "Creating a Light Show",
          "Recording Your Own Sound",
          "The Companion Challenge"
        ],
        "Let's Make the Robot Feel": [
          "Introduction to Sensor",
          "Let’s Stop a Collision",
          "Gas Pedal",
          "Let’s Play with Buttons",
          "The Surprise Buttons Challenge"
        ],
        "Let's Give the Robot Eyes": [
          "Introduction to Ultrasonic Sensor",
          "Stop at Obstacle",
          "Keep Constant Distance from Obstacle",
          "The Room Explorer",
          "The Pedestrian Challenge"
        ],
        "Let’s Discover Colors": [
          "Introduction to Color Sensor",
          "What Color Is This?",
          "Dark or Light",
          "Let’s Follow the Line",
          "The Roadworks Challenge"
        ],
        "Exact Turns": [
          "Introduction to Gyro Sensor",
          "Let’s Move in a Circle",
          "Let’s Move in a Rectangle",
          "Let’s Move in a Triangle",
          "The Different Angles Challenge"
        ],
        "Let’s Move Objects": [
          "Using Motors to Move Robot",
          "Grasp the Object",
          "Release the Object",
          "Detect the Object and Move It Around",
          "The Cleaning Challenge"
        ]
      },
      "requirements": [
        "No previous knowledge about robotics and programming is needed."
      ],
      "description": "LEGO EV3 robot has changed the way we think about robotics by making it possible for anyone to build real, working robots.\nThis course starts off by showing you how to setup and program your own robot using the Lego Mindstorm EV3 Kit. It provides step-by-step instructions on the entire programming process of the Robot. The complexity of the robot increases gradually as your progress through the sections. With the examples in the course, you will learn how to build and program various robots using LEGO EV3. It provides clear explanations, fun examples and sample codes.\nBy the end of the course, you will be able to build and program your own robot using LEGO EV3.\nAbout the Author\nJanika Leoste, the owner of Future Robotics, is an adults robotics educator specialized in creating educational robotics online courses for beginners. She holds knowledge about more than 13 different robotic platforms. Also, she has been involved with organizing several international robotics competitions. Currently, a PhD student at Tallinn University conducting an extensive experimental study about robots influence on learning outcomes in basic education math classes. Future Robotics organizes VR and educational robotics entertainment for adults gives robotics workshops for encouraging future workplaces and designs STEM programmes for educational robotics.\nKarl Aleksander Leoste, is a member of Future Robotics and has been involved with robotics for 10 years. Knows everything about what's important in programming and building robots and has taken part in many robotics competitions over the years. Currently, he is studying software development.",
      "target_audience": [
        "This course is for beginners who are robotics enthusiasts, teachers, students, and robotic school coaches."
      ]
    },
    {
      "title": "C Programming Basics For Microcontrollers & Embedded System",
      "url": "https://www.udemy.com/course/c-programming-for-microcontrollers/",
      "bio": "Go from zero to hero in programming with C and C# Languages and start your Microcontroller Journey",
      "objectives": [
        "Program microcontrollers with C programming language",
        "Make a user friendly program",
        "Learn the basics of coding in C",
        "Trace errors in your Code easily and effectively"
      ],
      "course_content": {
        "Introduction and Basics": [
          "Section Intro",
          "Introduction",
          "Who We Are?",
          "Overivew and The software to be used",
          "Learning C Programming for Embedded Systems",
          "Very Important Note: Review Process",
          "Compilation Process and Your First C Project",
          "How to increase the font size in the Programming enviroment",
          "Why C and Basic Program Structure",
          "Introduction to C Programming and Basic Tools",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "Variables": [
          "Section Intro",
          "Variables",
          "Variables Example Code",
          "Understanding Variables in C Programming",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "Statements and Operators": [
          "Section Intro",
          "Statements and Operators",
          "Statements and Operators Example Code",
          "Working with Statements and Operators in C",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "LOOP Statements": [
          "Section Intro",
          "LOOP Statements",
          "While LOOP Statements Example Code",
          "For LOOP Statements Example Code",
          "Do While LOOP Statements Example Code",
          "Working with Loop Statements in C Programming",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "Conditions using if and switch": [
          "Section Intro",
          "Conditions if and switch",
          "if statement Example Code",
          "Switch statements Example Code",
          "Mastering Conditional Statements in C",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "Numbering Systems": [
          "Section Intro",
          "Numbering System",
          "Numbering System Explained in more details",
          "Understanding Numbering Systems in Programming",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "Functions": [
          "Section Intro",
          "Using Functions",
          "Functions Example Code",
          "Understanding and Using Functions in C Programming",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "The Journey Ends": [
          "Section Intro",
          "C Programming Basics For Microcontrollers Book",
          "End",
          "Reflecting on C Programming Basics for Microcontrollers",
          "Summary",
          "Reading Material"
        ],
        "Other Interesting Topics and Tips": [
          "Section Intro",
          "Using Operators",
          "Digital inputs and Delay loops",
          "Exploring Advanced Operators and Digital Inputs",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "C Language Practicing with C# Microsoft Visual Studio": [
          "Section Intro",
          "Download and Install Microsoft Visual Studio",
          "Basics + Create Your First Project",
          "Setting Up and Getting Started with Microsoft Visual Studio",
          "Quiz",
          "Summary",
          "Reading Material"
        ]
      },
      "requirements": [
        "A Computer",
        "Download the provided software which is free and included"
      ],
      "description": "Step into the world of embedded systems with \"C Programming Basics For Microcontrollers & Embedded System\". This course is expertly crafted to turn beginners into skilled practitioners of both C and C# programming languages, with a focus on microcontroller applications.\nWhy Enroll in This Course?\nExpertise in Dual Languages: Dive deep into the intricacies of C and C# to program microcontrollers with precision.\nHands-On Microcontroller Programming: Learn to code microcontrollers from the ground up and understand their core functionality.\nEmbedded Systems Mastery: Develop the expertise needed to excel in the ever-evolving field of embedded system technology.\nPractical Approach: Apply your learning with real-world examples and comprehensive C# material to reinforce basic C concepts.\nContinuous Learning Promise:\nStay ahead with ongoing updates. Join over 5,200 students in this continuously evolving learning journey!\nTestimonials:\nShane Butler: \"An enlightening dive into C programming.\"\nJason Holmes: \"Exceptional course that's truly comprehensive.\"\nCourse Experience:\nForget about courses that drag on without purpose. Here, every lecture is optimized for effective learning, ensuring a quick start in C programming. The content is designed for engagement, with quizzes and practical examples accompanying each new concept.\nWhether you're completely new to microcontrollers or looking to refresh your knowledge, this course adapts to your needs. Each module builds upon the last, with ample resources like sample code and documentation to support your learning curve.\nOur team of educators is dedicated to your success, providing a learning experience that's both meaningful and empowering. While we can't do the work for you, we are here to help you achieve your highest potential.\nWith free software, bonus books, and extra resources included, your journey to mastering microcontrollers and embedded systems starts here. Happy learning from the team at Educational Engineering!\nWhat You Will Learn\nFundamentals of C and C# programming\nProgramming microcontrollers from scratch\nKey concepts of embedded systems\nPractical applications of C and C# in microcontroller projects\nWho is This Course For\nBeginners with no prior programming experience\nHobbyists interested in microcontrollers and embedded systems\nStudents pursuing a career in electronics and programming\nAnyone looking to enhance their programming skills in C and C#\nRequirements\nNo prior programming experience needed\nA computer with internet access\nBasic understanding of electronics is helpful but not necessary\nWillingness to learn and experiment",
      "target_audience": [
        "This course is meant for individuals who are not familiar with microcontrollers",
        "Anyone want's to learn basics of C programming to get started with programming Microcontrollers"
      ]
    },
    {
      "title": "Complete BOOLEAN ALGEBRA & LOGIC GATES Guide For Beginners",
      "url": "https://www.udemy.com/course/boolean-algebra-and-logic-gates/",
      "bio": "Experience a new way of learning by practically applying the logics",
      "objectives": [
        "Over 22 lectures and 1 hour of content.",
        "At the end of this course students will have a complete understanding of Boolean Laws and how they can be useful in simplification of complex Boolean expressions.",
        "The main purpose of this course is to make students completely familiar and comfortable with complex Boolean Algebra rules and make them a perfectionist in their application in digital electronics.",
        "Students will learn to practically apply the Boolean laws and simplification of Logic gates.",
        "This course will be a treat to the eyes and mind of everyone who takes this course.",
        "While making this course my main aim was to give my students an edge over those people who didn't get the opportunity to get to know about this course and get this level of understanding."
      ],
      "course_content": {
        "The topics covered in the whole tutorial.": [
          "Introduction"
        ],
        "Boolean Algebra And Laws of Boolean Algebra": [
          "Commutative Law.",
          "Boolean Algebra Introduction.",
          "Laws of Boolean Algebra.",
          "Associative Law.",
          "Absorption Law.",
          "Identity Law.",
          "Complement Law.",
          "Idempotent Law.",
          "Involution Law.",
          "Distributive Law.",
          "The DeMorgan's Theorem.",
          "Duality Principle.",
          "Simplification of Boolean Expressions using Boolean Laws."
        ],
        "Logic Gates And Its Simplification": [
          "Logic Gates.",
          "AND Gate.",
          "OR Gate.",
          "NOT Gate.",
          "NOR Gate.",
          "NAND Gate.",
          "XOR Gate.",
          "XNOR Gate.",
          "Logic Gates Simplification."
        ]
      },
      "requirements": [
        "Students don't need to have any pre-requisites for taking this course. This course just need your time and patience and the enthusiasm to learn something new."
      ],
      "description": "Boolean Algebra is a very important topic and is easy to understand and apply. It is different from elementary algebra.\nIn this course students will first understand what Boolean Algebra is all about. Next they will learn about the various Laws and important Theorems (Commutative Law, Assocative Law, Absorption Law, Indentity Law, Complement Law, Idempotent law, Involution Law, Distributive Law, The De-Morgan's Theorem and finally Duality Principle) associated with Boolean Algebra. At the end of this section there is a Live Practice lecture where I have taken up some very good examples to explain how we can apply the different Boolean Laws and Theorems we have learnt to simplify and solve complex Boolean expressions. The main aim is to make you a perfectionist in all the aspects of Boolean Laws, be it their understanding or their application.\nIn the very next section students will get a very deep and detailed understanding of different types of Logic Gates (AND gate, OR gate, NOT gate, NOR gate, NAND gate, XOR gate and the last one XNOR gate). This section will cover everything one needs to know on Logic Gates. In the last lecture I have taken some examples to explain how one can derive the Boolean Expressions from a give Logic gate diagram and finally simply that complex expression using the Boolean Laws we learnt in the first section.\nOverall this is going to be a very exciting course and it is going to be a great fun for my students.\nI wish them all the best and look forward for their reviews and discussions.",
      "target_audience": [
        "Students studying computer science at A level or university are often required to study logic circuits and Boolean Algebra.",
        "Students who have no preexisting knowledge of Boolean Algebra.",
        "Students who have some knowledge of Boolean Algebra and wish to reinforce and extend their existing knowledge.",
        "Students who have knowledge of Boolean Algebra and want to learn the application of this knowledge in simplification of Boolean expressions."
      ]
    },
    {
      "title": "Arduino: Everything you need to Know",
      "url": "https://www.udemy.com/course/arduino-for-newbies-crash-course/",
      "bio": "A Guide to start Your Own Arduino adventure in no Time, step by step practical exercises that will help you become Pro",
      "objectives": [
        "Master the skills required to work as a freelance Arduino programmer",
        "Master Programming Arduino in embedded C",
        "Know how to interface different sensors and output devices with Arduino",
        "Program Arduino like a professional",
        "Excel in Arduino programming"
      ],
      "course_content": {},
      "requirements": [
        "You must be familiar with Internet browsing",
        "You must have the Will to apply not just watch"
      ],
      "description": "Arduino: Everything you Need to Know\nArduino is a programmable circuit board that can be hooked up to your computer and can be programmed to control a circuit. It is commonly used in robotics, automobiles, and remote controls. With the right coding, it can also be used to control devices like robotic arms. It is an easy-to-use approach for people who don't have the time or skills to learn about programming.\nArduino Programming Courses online contain lots of unnecessary information that will surely distract beginners and make them feel odd when they first come to the Arduino World. But NOT HERE! This is a guide to start your own Arduino adventure in no time, with step-by-step practical exercises that will help you become a professional. It starts off with an introduction to the board and the different components on it. Then, you learn how to loop and change values to light up LEDs or measure temperature. Mastering these skills will enable you to build much more complicated things, such as a robot car.\nContinues Updates\n4 Star (41 Review) | 4700 STUDENTS!!! THANK YOU!!!\nWhat students are saying:\nDeep Dave says, \"I am an android developer and was looking to get started with Arduino. Glad I've selected this course. The instructor seemed experienced. Users may face some accent-related issues, but better English is not a goal of the course; it's about getting started with Arduino. Thank you very much, Instructor. Thanks, Udemy :)\"\nGandhi Kumarasamy Sezhian says, \"Well explained and clear. The content is good.\"\nBill says, \"Helped me refresh my knowledge of Arduino. Thanks.\"\nBonus!\nWhen you join this course, you will get the Arduino Practice Test: Get Certified and Test Your Skills Course for FREE (Usually worth $200) in the Bonus Section, where you will test your PIC Microcontroller Skills with more than 100 questions. This is the only Arduino Practice Exam course on Udemy that has timed test-taking ability and provides interactive, section-level feedback.\nWhy you should take this course?\nThe course will teach you everything you need to know about Arduino from the ground up.\nIt covers a diverse range of skills that will ensure you can start your own Arduino projects in no time.\nThe practical exercises will help you become a pro in no time.\nThe course begins with an introduction to the product and why it is used. It then goes into setting up the Arduino environment before going into detail about the different components that make up an Arduino system.\nThe course is suitable for all levels of learners from beginners to experts. Beginners can learn the basics and experts can refresh on some topics.\nWelcome to this course.\nThe instructor is a highly experienced hardware developer with a strong background in Arduino development and created this course to help newcomers to the Arduino world. He has also been teaching programming since 2010 and has mastered the art of delivery.\nThis course is designed to introduce the Arduino hardware and programming environment to get you started on building projects as soon as possible.\nThe Arduino is an open-source electronics platform based on easy-to-use hardware and software. Sensing the environment by receiving inputs from many sensors, the Arduino affects its surroundings by controlling lights, motors, and a number of other accessories. It's intended for anyone making interactive hardware projects.\nA Platform for Creating any project that comes to your mind.\nNo experience is required, and all you need is an Arduino. This course is designed for anyone interested in Arduino with zero background knowledge.\nEnroll today and get instant access:\nEasy-to-watch video lessons\nPractical activities\nDownloadable resources\nPremium instructor support\nLifetime access to course updates\nAccess to our exclusive student community\n100% Money-back Guarantee\nIf you are unsatisfied with the course, or if it just isn't for you, we have a 30-day money-back guarantee. My goal is to make sure you love this course! We are always listening to students and improving our courses to make them even better. If you ever have a suggestion on how to make this course better, just let me know!\nWhat are you waiting for?\nJoin us now on this journey, Click Enroll Now and learn something new today!\nWhat You Will Learn:\nBasics of Arduino programming and electronics.\nPractical exercises to build your skills.\nHow to create your own Arduino projects.\nUnderstanding the different components of an Arduino system.\nWho is This Course For:\nBeginners in Arduino and electronics.\nHobbyists and DIY enthusiasts.\nStudents and educators in electronics and programming.\nAnyone interested in learning about Arduino and its applications.\nRequirements:\nNo prior experience required.\nBasic understanding of electronics is helpful.\nWillingness to learn and experiment with Arduino projects.\n\n\nAbout the Instructor:\nEducational Engineering Team\nTeam of Skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading entity in the Microcontroller industry with over 13 Years of Experience in teaching and practical projects. We provide in-depth, step-by-step blueprints on taming complex topics in easy and digestible bite-sized videos.\nHaving been in the Programming and Microcontroller business since 2007, we've catered to students' and educators' needs, teaching over 250k-THOUSAND students and counting through our 100+ courses on Udemy.\nAshraf Said AlMadhoun is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He is the Chief Educational Engineer at Educational Engineering Team, a company founded to explore new trends and technologies and to educate the world.\nOur online courses have helped over 250,000 people globally to excel and make great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Electronics Geeks",
        "Hardware developers",
        "Anyone with slight interest in making great things"
      ]
    },
    {
      "title": "Electronics from beginning by building & designing circuits",
      "url": "https://www.udemy.com/course/learn-electronics-from-beginning-by-build-design-circuits-h/",
      "bio": "Learn electronics to design and build useful circuits using proteus and PCB design. USE CODE (JUST13) FOR UP TO 70% OFF",
      "objectives": [
        "Have a complete knowledge about basic electronics ( analog components )",
        "Design and build useful electronic circuits",
        "Use proteus 8 professional and be a pro in it",
        "Create and build PCB (printed circuit board)",
        "Transform electronic circuit designs into physical electronic board aka PCB"
      ],
      "course_content": {
        "Course content": [
          "Course content"
        ],
        "what is electricity ?": [
          "Electricity",
          "Voltage, current and resistance",
          "AC wave, DC wave and the frequency",
          "Simple circuits for clarification",
          "Parallel and series connection",
          "Quiz on the previues lectures"
        ],
        "Electronic components ,working principle and its use": [
          "Resistor and its calculations",
          "Voltage divider",
          "LDR (photoresistor)",
          "Diode",
          "Diodes as circuit protection",
          "Zener diode",
          "LED (light emitting diode )",
          "LED-current limitting resistor",
          "7 segment display",
          "Capacitor",
          "Bypass capacitor",
          "Transistor as a switch",
          "Transistor as an amplifier",
          "FET transistors",
          "IC chips (integrated circuits)",
          "Relay",
          "Transformer",
          "Quiz on electronics part"
        ],
        "Digital Vs. Analog": [
          "Digital Vs. Analog",
          "Analog to Digital converting",
          "logic gates",
          "AND, OR, NAND, NOR, XOR and XNOR gates",
          "ADC (analog to digital converter)"
        ],
        "Operational amplifier": [
          "Op Amp",
          "Operational amplifier explaination"
        ],
        "PCB (Printed Circuit Board)": [
          "Intro to PCB (Printed Circuit Board)",
          "What are PCBs ?? (Documentary)",
          "PCB ( Printed Circuit Board ) Explained"
        ],
        "The use of proteus 8 professional": [
          "Download and install protues 8 professional",
          "First step with protues",
          "Designing our first circuit (power supply circuit)",
          "Design a variable power supply part 1",
          "Design a variable power supply part 2",
          "Downloading library for protues",
          "Design a light sensor",
          "Simple projects with circuit diagram"
        ],
        "PCB layouts designing": [
          "PCB layouts designing"
        ],
        "Pring the design to life": [
          "Tools needed",
          "printing the layouts on glossy paper",
          "Printing the PCB layouts on PCB board",
          "Inserting and welding the components on board"
        ],
        "Conclusion": [
          "Conclusion video"
        ]
      },
      "requirements": [
        "No expreince needed",
        "Tools for building the circuits .....  will be clarified at the course",
        "Computer pc or mac ....any version of windows or mac os"
      ],
      "description": "This month's offer: use promo code (JUST13)to get discounts  up to 70%off.\nThis is a course that will take you step by step from zero to hero in the field of electronics. This course will help you learn all about electronics using the method of building an electronic board (PCB) so that means that you will build your own circuit board. first, we will start with some knowledge about electronic parts (electronics components) and then we will start designing our circuits after that we will build our electronic board. In the lectures of this course, we use very modern methods of presentation and awesome animated slides to help you focus and attention to the lecture. The best thing about this course is that it is very summarized which means that 1h in any other course = 10 min in this course. and remember that you can have your money back using the 30 days money-back guarantee policy .so with this course you will save time and also learn lots of useful information and circuits. Also, we will update the course every month with new, awesome, and useful circuit designs. which will allow you to practice a lot on your skills in designing electronic circuits. So what's gonna be your choice. that's it and feel free to watch the first free lecture down below that explains the content of this course. we hope to see you inside. and when you join us please don't forget to leave a review.",
      "target_audience": [
        "Beginner at electronic engineering want to build his own electronic board",
        "Any one curious about electronic circuits",
        "Any one want to learn PCB designing",
        "Any one want to learn or work with proteus 8 professional",
        "Beginners that want to build useful electronic circuits",
        "Any one wants to manufacture electronic boards and start a business"
      ]
    },
    {
      "title": "Real-time vehicle tracking system using ESP32 | 2025",
      "url": "https://www.udemy.com/course/real-time-vehicle-tracking-system-using-esp32/",
      "bio": "The complete GPS Master class - Novice to Professional",
      "objectives": [
        "Learn about the ESP32 and its detailed specifications, including power requirements and GPIO functionality.",
        "Test the ESP32 to ensure it works correctly before starting your project.",
        "Understand the OLED display, its working principle, and how to connect it to the ESP32.",
        "Program the OLED display with ESP32 to meet project requirements.",
        "Explore the GPS module, test it using different software, and understand its working principle.",
        "Learn about IoT concepts and how to set up a dashboard for your project.",
        "Get a complete list of hardware modules needed for the project.",
        "Understand the circuit diagram and install necessary libraries for successful execution.",
        "Break down the source code step by step to understand the entire project flow.",
        "Configure the IoT dashboard to track real-time location on Google Maps."
      ],
      "course_content": {
        "Introduction and Detailed Specifications": [
          "Introduction to ESP32",
          "Module & Power Requirements",
          "ESP32 Development Board Pinout"
        ],
        "ESP32 Testing and Functionality": [
          "Testing the new ESP32 Module",
          "Real-Time Demonstration - Testing ESP32",
          "Source code - Testing the ESP32 module"
        ],
        "Testing and Understanding of the OLED display": [
          "Understanding the OLED display",
          "Circuit Diagram - OLED display connection with ESP32",
          "Testing the OLED display",
          "Real-time Demonstration - Testing the OELD display",
          "Source Code - Testing the OLED display"
        ],
        "Testing and Configuring the GPS Module": [
          "Important components used for GPS testing",
          "Testing the GPS module",
          "Circuit Diagram - Testing the GPS module"
        ],
        "Project Concept and Circuit Diagram": [
          "Project concept",
          "Understanding the GPS",
          "Understanding IoT and the dashboard used",
          "Hardware requirements",
          "Hardware requirement list",
          "Understanding the circuit diagram & Library installation",
          "Circuit Diagram - Final circuit diagram for the project development"
        ],
        "Source Code & Real-time Demonstration": [
          "Important notice for the IoT User Interface Updation",
          "Setup IoT Dashboard (New)",
          "Source Code - As per the new Blynk Platform (New)",
          "Output on the Web Dasboard (New)",
          "Final output & Mobile Dashboard Creation (New)",
          "Understanding the final code - Part 1 (for older version)",
          "Understanding the final code - Part 2 (for older version)",
          "Configuring the IoT platform (for older version)",
          "Real-time demonstration - Vehicle Tracking System (Older version output)",
          "Source code - Vehicle Tracking System (for older version)",
          "Hardware modules products URL",
          "Conclusion"
        ],
        "Coding Exercise": [
          "Write a program to find the LCM of two given numbers.",
          "Write a C++ program to merge two arrays by satisfying given constraints.",
          "Write a program to check if a number is an Armstrong number.",
          "Write a program to delete an element from an array.",
          "Write a program to calculate the standard deviation of given data.",
          "Write a program to calculate the area and perimeter of a rectangle.",
          "Bank Account System Simulation"
        ]
      },
      "requirements": [
        "Basic knowledge of programming"
      ],
      "description": "Don't let errors hold you back! Our dedicated technical support team is here to assist you every step of the way. Whether you have a question or concern, simply post in the Question and Answer section and one of our experts will get back to you within 24 hours. They are available from Monday to Saturday, ensuring you complete satisfaction for all the errors you encounter.\nApart from that, your money is 100% safe as the course comes with a 30-days, no-questions-asked Money Back Guarantee. For any reason, if you are not happy with the course, the entire amount will be refunded back to your bank account.\nSo at the end of the day, you have nothing to lose. Enroll in the course with confidence and complete peace of mind and take your technical skills to the next level.\nHello Everyone, I would like to introduce you to a brand new online course “Real-time vehicle tracking system using ESP32”.\nI have always been a firm believer in learning by doing and in this course, you will learn what you need to know by hands-on experience. You don’t need any special knowledge except basic computer skills to get started with the course. Every one of you comes from a different background and hence the course is crafted from basic to advanced level with minute details in every lecture.\nThe course is divided into 6 sections. In the first section, you will learn about ESP32, its detailed specifications, module and power requirements, and the GPIO pin structure and functionality.\nIn the second section, we will understand how to test the newly received ESP32 out of the box. We will learn about the IDE and the required driver for interfacing. This will help us to make sure that our hardware module is working fine before implementing it in the project.\nTesting each module separately will give you clarity about each hardware component's functionality and the working principle. So in the third section, we will learn about the OLED display. We will get to know how to install the required driver, and program the display as per our need.\nThe fourth section begins with the testing of the GPS module right out of the box using two different software applications before implementing it in the real-time project development. You will learn how to set up the GPS environment, satellite tracking, NMEA data, etc.\nIn the fifth section, we will get to know about the project concept and how to implement the same. We will understand the circuit diagram step by step and then proceed further with the installation of the required library for the successful execution of the project. Thereafter we will understand about the IoT and feasible dashboard to be used in the project. This will help us to remotely access the current location of the vehicle and track the same on the google map.\nFinally, In the sixth section, we will understand the source code of the vehicle tracking system. The source code has been explained in a stepwise manner to avoid any further confusion. Thereafter we will proceed with the installation and configuration of the IoT dashboard which will help us to remotely track the real-time location of the running vehicle.\nAll the lectures contain English subtitles for clear and better understanding. If you face any technical issues, please post your query in the question and answer section and I will get back to you within 1 business day.\nAt the end of the course, you will have a solid foundation on ESP32, OLED display, GPS module, etc. So apart from building this project, you will also find it easy to build any other project of your choice.\nThank You",
      "target_audience": [
        "Ideal for those interested in learning about the ESP32, GPS modules, and OLED displays for IoT projects.",
        "Perfect for beginners looking to dive into IoT and GPS-based real-time tracking.",
        "Great for anyone wanting to build hands-on projects that involve hardware assembly, coding, and dashboard configuration."
      ]
    },
    {
      "title": "Build your own GPS tracking system-Raspberry Pi Zero W 2025",
      "url": "https://www.udemy.com/course/build-your-own-vehicle-tracking-system-from-scratch-raspberry-pi-w/",
      "bio": "Installation, setup, configuration, Static IP, GPS Testing, Remote GUI, location tracking on Google Map, IoT, etc.",
      "objectives": [
        "Design an advanced data streaming and visualization tool for vehicle tracking.",
        "Build an IoT-based GPS system to monitor real-time vehicle movement on a web dashboard.",
        "Extract GPS data using Python and automate GPSD to start on boot.",
        "Retrieve raw GPS data using Linux commands and test the module on Windows & Linux.",
        "Understand the working principles of the Global Positioning System (GPS).",
        "Configure a static IP address in the latest Raspbian OS.",
        "Remotely access the Raspberry Pi’s GUI without an external monitor.",
        "Set static IP address in the latest Raspbian OS.",
        "Install the latest OS on Raspberry Pi Zero Wireless without extra peripherals.",
        "Perform IP scanning and connect to Raspberry Pi wirelessly using Putty.",
        "Compare Raspberry Pi Zero Wireless with previous versions in a step-by-step manner.",
        "Gain in-depth knowledge of Raspberry Pi Zero Wireless and its capabilities."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of any programming language.",
        "The course is crafted from basic to advanced level, so even if you new to Raspberry Pi, the course will help you to get up & running."
      ],
      "description": "Are you ready to take your Python coding skills to the next level? In this exciting course, you'll learn how to build your own GPS tracking system from scratch! That's right, you'll be programming the GPS device to acquire real-time coordinates and send them to a backend server to generate a current location and travel path. Imagine the possibilities! You'll not only enhance your coding skills but also be able to implement this concept in any of your projects and create even more advanced systems. Don't miss out on this amazing opportunity to level up your career!\nDon't let errors hold you back! Our dedicated technical support team is here to assist you every step of the way. Whether you have a question or concern, simply post in the Question and Answer section and one of our experts will get back to you within 24 hours. They are available from Monday to Saturday, ensuring you complete satisfaction for all the errors you encounter.\nApart from that, your money is 100% safe as the course comes with a 30-days, no-questions-asked Money Back Guarantee. For any reason, if you are not happy with the course, the entire amount will be refunded back to your bank account.\nSo at the end of the day, you have nothing to lose. Enroll in the course with confidence and complete peace of mind and take your technical skills to the next level.\n\n\nFAQ\n1) I am new to Raspberry Pi, Can I do this course?\nThe course first teaches how to install and setup Raspberry Pi and then the projects start.\n2) I have Raspberry Pi 5, can I do this course?\nOf-course Yes!! The project can be completed on any version of Raspberry Pi.\n3) What if I get stuck and need technical help?\n\nWe cover one business day resolution to all your technical queries. If you don't understand something, please post your query in Q & A section and we will get back in 24 hours.\nStill have doubts, feel free to drop a mail at - support@comfiny.com\nLearn to build a fully functional GPS tracking system from scratch. I have always been a firm believer in learning by doing and in this course, you will learn what you need to know by hands-on experience. You don’t need any special knowledge except basic computer skills to get started with the course. Every one of you comes from a different background and hence; the course is crafted from basic to advanced level with minute detailed in every lecture.\nThe course is divided into 7 sections. In the first section, you will learn about the latest version of Raspberry Pi Zero Wireless in detail, its specifications and how it differs from its previous versions.\nIn the second section, we will begin with installing the latest version of the OS without the help of any external monitor. We will make the IP address static to remotely access the terminal and the graphical user interface without using any IP scanner tool.\nIn the third section, we will get to know about the project concept and the working principle of the Global Positioning System. We will then learn how to test whether the GPS module is functioning or not.\nThe fourth section begins with the different set of Linux commands to access the GPS functionality on the terminal and how to automate the Linux daemon to start on boot.\nThe fifth section takes you to the intermediate level where you will get to know about the GPS data extraction and programming using Python. We will code in python to fetch the GPS coordinates and other relevant details which will keep updating in seconds.\nIn the sixth section, you will come to know how IoT is the game changer. We will design our own dashboard and analyze the data in real time from anywhere. You can track the current position of the vehicle or the school going children in the google map using the mobile app or the web dashboard.\nThe seventh section exposes you to another advanced IoT dashboard tool where we will write our own code to analyze the GPS data in the more enhanced way. We will get to know the complete address where the vehicle is located in real time and monitor its status.\nPlease note that the project covered in the course will work on any version of the Raspberry Pi. Only to keep the project development cost down and to embed the circuit anywhere we are primarily targeting Raspberry Pi Zero Wireless board.\nAll the lectures contain English subtitles for clear and better understanding. If you face any technical issue, please post your query in the question and answer section and I will get back to you within 1 business days.\nAt the end of the course, you will have a solid foundation on navigation system. You will find it easy to build your own device from scratch.\nThe course comes with 30 days no questions asked money back guarantee.\nIf you are not happy with the course, Udemy will refund you the course fee.",
      "target_audience": [
        "Ideal for those who want to build a vehicle tracking system from scratch.",
        "Perfect for parents or schools looking to track the location of school children.",
        "Great for enthusiasts who want to learn GPS technology and create their own prototype."
      ]
    },
    {
      "title": "Introduction to Electronic Components: A Step By Step Guide",
      "url": "https://www.udemy.com/course/introduction-to-electronic-components-a-step-by-step-guide/",
      "bio": "This course will give you everything you need to start playing with electronics components and fix electronic devices",
      "objectives": [
        "Understand the concepts of voltage, resistance and current",
        "Understand the VOLT OHM Meter/ Digital Multi Meter and how to use safely",
        "Use Ohm's Law to calculate voltage, current and resistance",
        "Use resistors in various configurations",
        "Understand and use capacitors",
        "Understand and use diodes",
        "Understand and use a transistor"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Exploring the Basics of Electronic Components"
        ],
        "Basics": [
          "Section Intro",
          "Voltage Current and Resistance",
          "Very Important Note: Review Process",
          "Types of Current",
          "Types of Circuits",
          "Summary",
          "Reading Material"
        ],
        "Introduction to DMM": [
          "Practical: Introduction to Digital Multi-meter DMM"
        ],
        "Voltage: Taking Measurements": [
          "Section Intro",
          "Volt Ohm Meter Basics",
          "Measuring Voltage",
          "Practical: How to Measure DC Voltage",
          "Summary",
          "Reading Material"
        ],
        "Current: Taking Measurements": [
          "Summary",
          "Measuring Current",
          "8 Measuring Currents - Lab Experiement Explained",
          "Practical 1: How to Measure Current",
          "Practical 2: How to Measure Current",
          "Summary",
          "Reading Material"
        ],
        "Resistance: Taking Measurements": [
          "Section Intro",
          "Measuring Resistance",
          "Practical: How to test Resistors",
          "Summary",
          "Reading Material"
        ],
        "Circuit Diagram Basics": [
          "Section Intro",
          "Circuit Diagram Basics and Basic Symbols",
          "Summary",
          "Reading Material"
        ],
        "Resistors": [
          "Section Intro",
          "Introduction To Resistor and Color Band Coding",
          "Power Dissipation + Parallel and Series Resistors",
          "Summary",
          "Reading Material"
        ],
        "Ohm's Law": [
          "Section Intro",
          "Ohm's Law",
          "Summary",
          "Reading Material"
        ],
        "Capacitors": [
          "Section Intro",
          "Introduction To Capacitors",
          "Capacitors Behavior + Capacitors in Series and Parllel",
          "Practical 1: How to test a capacitor",
          "Practical 2: How to test A Capacitor",
          "Summary",
          "Reading Material"
        ]
      },
      "requirements": [
        "A multimeter",
        "A breadboard, jumper wires and a battery",
        "Resistors, capacitors, LEDs, diodes, transistors, voltage regulators"
      ],
      "description": "This Introduction to Electronic Components course is intended for those interested in learning electronics. The course introduces students to the concept of electronic components, their uses, and how they work within an electrical system. The electronics industry has been skyrocketing over the last few years as more and more people are using electrical appliances for their everyday needs. It is so important to know the basics of how these components work, as they are a necessity in modern society. Here is a step-by-step guide to help you understand what electronic components are, what they do, and how they function.\nElectronic components are the building blocks of any electronic device, and they come in a wide range of sizes and shapes. These videos will walk you through some basic information about electronics so you know how to identify and use these building blocks. Practical examples are also added.\nWhy You Should Take This Course?\nLearn how to read circuit diagrams.\nLearn how to solder.\nIdentify parts on an electronic schematic diagram.\nBecome familiar with the most commonly used electronic components.\nThis course will give you everything you need to start playing with electronics components and fix electronic devices. It is designed so that you can quickly get started without having to spend months of your time learning lots of irrelevant information. It covers all of the basics, so even if you never plan on getting any further than this one course, you'll still learn more than enough. You will learn how to take care of the small components that are inside your electronics.\nContinual Updates 4 Star | More Than 4200 STUDENTS!!! THANK YOU!!!\nWhat Students Are Saying:\n\"This is a nice introduction course to those who would like to learn the basics of electronics.\" - André Stenberg\n\"It's covering the topic and establishing the basics very well.\" - Mike Mackley\n\"Great course for beginning in electronics, especially enjoyed the water analogy part to make learning easier.\" - Sunil Thakur\n\"Clear and Simple, and that is so nice :)\" - Qays Qaysaneah\nTopics Covered:\nThe Components of Electricity\nVolt-Ohm-Meter Basics (Measuring Electricity)\nCircuit Diagrams Basics (Electronic Roadmaps)\nThe Resistor\nOhm’s Law\nThe Capacitor\nThe Inductor\nThe Diode\nThe Transistor (Electronic Valves)\nIn this Introduction to Electronic Components Course, we will begin by discussing the three components that make up electricity. Next, we will spend more extensive time on how to measure the three components of electricity. During this section, we will explore two of the three components (voltage and current). This section will cover VOM basics and allow you to become familiar with the most important and most basic piece of test equipment.\nIn the next section, Circuit diagrams section, you will learn how to use electronic component symbols on an electronic road map called a schematic or circuit diagram. Many of the symbols will represent new concepts for many of you, and these concepts will be fully developed once we finish the section. As a result, you will develop the fundamentals of interpreting circuit diagrams so that these illustrations of the arrangement of electronic components can help you with the remainder of the course.\nThe final of the three components, resistors, will be covered next. How the three components are related mathematically is Ohm’s Law, and this fundamental law will be covered in detail. These sections make up the basic, basic material of electronics.\nFour additional components common to virtually all electronic circuits are the capacitor, inductor, diode, and transistor. I will cover these topics with a level of detail that will familiarize the audience with the function of these components and the basics of how they work and react in different situations. There are text reading assignments for each section of the course.\nWhat You Will Learn\nUnderstand the basics of electricity and electronic components.\nRead and interpret circuit diagrams.\nSolder and handle electronic components.\nIdentify and use resistors, capacitors, inductors, diodes, and transistors.\nMeasure electrical properties using a volt-ohm meter (VOM).\nWho Is This Course For\nBeginners interested in electronics.\nStudents and hobbyists looking to understand electronic components.\nAnyone interested in fixing and working with electronic devices.\nRequirements\nNo prior knowledge of electronics required.\nBasic tools and components (a list will be provided).\nA volt-ohm meter (VOM) for measuring electrical properties.\nEnthusiasm and curiosity to learn about electronics!\n\n\nAbout the Instructor Info Educational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge - we go into the depth of the topic and give you the exact - step by step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years - we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million View, 20k+ Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology, helping educate the world to make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and provide guidance and consulting for many students over the years to help them kick-start their career.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, particularly for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers courses on\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone with a need to brush up their knowledge of basic electronics"
      ]
    },
    {
      "title": "Hands-On STM32: Basic Peripherals with HAL",
      "url": "https://www.udemy.com/course/hands-on-stm32-basic-peripherals-with-hal/",
      "bio": "Becoming an expert in STM32 HAL programming. Practice on STM32 basic peripherals using STM32CubeMX.",
      "objectives": [
        "Program microcontrollers using a high level abstraction library",
        "Develop embedded software using Keil uVision 5",
        "Write codes for basic peripherals like Clock Control, GPIO, Interrupt, and DMA",
        "Write codes for commonly used peripherals like UART, Timer, ADC, SPI, and I2C",
        "Write codes for other peripherals like WDG and Power"
      ],
      "course_content": {
        "Getting Ready": [
          "Software Installation"
        ],
        "Hardware Abstraction Layer (HAL)": [
          "New Project",
          "SysTick Timer"
        ],
        "Reset and Clock Control (RCC)": [
          "System Clocks Configuration",
          "Software Reset"
        ],
        "General Purpose Input Output (GPIO)": [
          "Output Configuration",
          "Input Configuration"
        ],
        "External Interrupt (EXTI)": [
          "External Interrupt Configuration"
        ],
        "Nested Vectored Interrupt Controller (NVIC)": [
          "Interrupt Priority Configuration"
        ],
        "Direct Memory Access (DMA)": [
          "Memory-to-Memory Mode"
        ],
        "Universal Asynchronous Receiver Transmitter (UART)": [
          "Polling Mode and Data Type Conversion",
          "Interrupt Mode, RX FIFO Buffer, and DMA Mode"
        ],
        "Timer (TIM)": [
          "Time Based Interrupt and Encoder Interface Mode",
          "Output Compare Toggle and PWM Output",
          "Input Capture and PWM Input"
        ],
        "Analog-to-Digital Converter": [
          "Polling Mode and Interrupt Mode",
          "Analog Watchdog and Scan Mode",
          "Timer Trigger and Injected Channel"
        ]
      },
      "requirements": [
        "You should familiar with basic microcontroller programming"
      ],
      "description": "This course teaches you the hands-on skills of STM32 programming using the HAL library. This course is divided into 3 parts. After finishing the first part, you will be able to write codes for basic peripherals like Clock Control, GPIO, Interrupt, and DMA. After finishing the second part, you will be able to write codes for commonly used peripherals like UART, Timer, ADC, SPI, and I2C. After finishing the third part, you will be able to write codes for other peripherals like WDG and Power. This course is suitable for those who want to learn about HAL library but don't really want to read the documentation. This course provides you with example codes that can be reused in the future as template codes for your embedded system projects. By the end of the course, you will have a solid understanding of how to work with STM32 microcontrollers and confidently implement them in real-world applications. The skills you gain will be applicable in various industries, helping you build reliable and efficient embedded systems for different projects. Throughout the course, you'll also get practical tips and tricks that make the development process smoother and more efficient. This hands-on approach will ensure you gain practical experience with every step.",
      "target_audience": [
        "Anyone who needs a hands-on guide for programming the STM32 with STM32CubeMX"
      ]
    },
    {
      "title": "DIY with Arduino - 5 Simple Projects to Get You Started",
      "url": "https://www.udemy.com/course/diywitharduino/",
      "bio": "Learn how to use the Arduino platform with these 5 simple projects",
      "objectives": [
        "Install the Arduino IDE",
        "Test that their Arduino Board is working",
        "Build Projects using the following parts: LED, Photoresistor, Push Button, Potentiometer, Motor, Keypad, LCD Screen",
        "Use Built-In and External Libraries"
      ],
      "course_content": {
        "Getting Started and Your First Sketch": [
          "Introduction and How to View this Course",
          "List of Parts",
          "Download Arduino IDE",
          "First Sketch - Blink"
        ],
        "Project 1 - Night Light": [
          "What You'll Need and What You'll Learn",
          "Theory",
          "Add Photoresistor",
          "Add LED",
          "Project 1 Questions"
        ],
        "Project 2 - Traffic Light": [
          "What You'll Need and What You'll Learn",
          "Theory",
          "Push Button Control - Toggle LED",
          "Traffic Light - Basic",
          "Traffic Light - Full",
          "Project 2 Questions"
        ],
        "Project 3 - Motor Speed Control": [
          "What You'll Need and What You'll Learn",
          "Theory - PWM",
          "Fade LED",
          "Potentiometer and the Map Function",
          "Motor Speed Control",
          "Project 3 Questions"
        ],
        "Project 4 - Motion Detection Alarm with Sound": [
          "What You'll Need and What You'll Learn",
          "PIR Sensor",
          "Melody",
          "Putting it Together",
          "Project 4 Questions"
        ],
        "Project 5 - Access Control with Keypad and LCD": [
          "What You'll Need and What You'll Learn",
          "Keypad",
          "Password",
          "LCD",
          "Putting it Together",
          "Project 5 Questions"
        ],
        "Bonuses": [
          "Code and Course PDF"
        ]
      },
      "requirements": [
        "Some familiarity with the C programming language",
        "Basic electricity concepts, such as voltage, current and resistance"
      ],
      "description": "JOIN OVER 3500+ SUCCESSFUL STUDENTS WHO HAVE TAKEN THIS COURSE!\n--------------------------------------------------------------------------------------------------------------------------\nCAPTIONS FOR ALL LECTURES!\nThis course will take you from an Arduino beginner to creating your own designs in 5 Easy to Follow Projects.\n\nLearn the building blocks of creating with the Arduino.\nEach project will give you another piece of the puzzle.\nGet Step-by Step Instruction the whole way through each project.\nI'll answer any questions you have to make sure you fully understand the material.\nIf the question can help others, I'll make a video on the topic.\nStart making your own projects in as little as 2 hours\nHave your first sketch running in as little as 10 minutes.\n\n27 lectures with over 2 hours of content.\nGet to know 14 different components and sensors\nLearn to use Photo-resistors and PIR Sensors.\nPush Buttons, Potentiometers, and LEDs.\nSpeakers, Keypads, and LCD Screens.\nThis course it grouped into 5 distinct projects:\nProject 1: Night Light Project\nProject 2: Traffic Light Project\nProject 3: Motor Speed Controller\nProject 4: Motion Detection Alarm\nProject 5: Access Control Device\nSave time and energy with project based learning\nIn just 5 Simple Projects, you can be on your way to making whatever you want.",
      "target_audience": [
        "This course is meant for people new to Arduino, but who have some previous programming experience. You can take this course without prior programming knowledge, however it is assumed that the student knows basic programming concepts. This course is also for those looking for a refresher on the Arduino"
      ]
    },
    {
      "title": "PIC Microcontroller Step by Step: Your complete guide",
      "url": "https://www.udemy.com/course/master-pic-microcontroller-using-mikroc-protuesprofessional/",
      "bio": "You will enter Microcontroller world of wonders, and together we will make YOU a professional Microcontroller Geeks.",
      "objectives": [
        "Program PIC Microcontroller like a champ",
        "Understand the principles of programming micro-controllers",
        "Understand and use many types of sensors and components",
        "Connect your PIC Microcontroller to LCD Screen and control it.",
        "Connect your PIC Microcontroller to Seven Segment and control it.",
        "Connect your PIC Microcontroller to Motor and learn how to control it.",
        "Connect your PIC Microcontroller to Keypad and control it.",
        "Connect your PIC Microcontroller to DOT Matrix and control it.",
        "Use tools to build electronic devices.",
        "Understand basic principles in electronics design."
      ],
      "course_content": {
        "Introduction and Installing the required Software": [
          "Section Intro",
          "Introduction",
          "Learning PIC Microcontrollers from the Ground Up",
          "How to install Proteous Professional",
          "How to Install MikroC Pro for PIC Programming",
          "Very Important Note: Review Process",
          "Summary",
          "Reading Material"
        ],
        "C Programming For Microcontrollers": [
          "Section Intro",
          "Overivew and The software to be used",
          "Compilation Process and Your First C Project",
          "How to increase the font size in the Programming environment",
          "Why C and Basic Program Structure",
          "Variables",
          "Statements and Operators",
          "LOOP Statements",
          "Conditions if and switch",
          "Numbering System",
          "Using Operators",
          "Using Functions",
          "Digital inputs and Delay loops",
          "Summary",
          "Reading Material"
        ],
        "PIC Microcontroller: The story from the beginning": [
          "Section Intro",
          "PIC Manufacture Microship Company",
          "Programming PIC and Circuit Prototyping",
          "PIC Architecture and PIC Families",
          "Harvard Architecture vs Von Neoman Architecture",
          "PIC16F84 Microcontrollers Explained",
          "Signle Word Instructions",
          "Pin Discription and Ocillator Types",
          "System Reset",
          "Summary",
          "Reading Material"
        ],
        "PIC In depth Look": [
          "Section Intro",
          "Ports",
          "PIC Architecture 2 Ports and Registers",
          "Status Register",
          "Option Register",
          "Banking Mechanism",
          "SFRs and GPRs",
          "Memory Organisation",
          "Summary",
          "Reading Material"
        ],
        "Code, Run and Have more Fun": [
          "Section Intro",
          "Part List",
          "First Project in Proteus",
          "First Project in MikroC",
          "How to deal with PIC Ports + First Code",
          "PIC Ports",
          "Necessary Connections",
          "Simple LED example to get things on the right track",
          "Flasher circuit PIC Microcontroller",
          "Lighting Led Follower Example",
          "Control Led using Push Button",
          "Summary",
          "Reading Material"
        ],
        "Get involved even more and make great things": [
          "Section Intro",
          "Controlling Seven Segment using BCD Counter PIC Microcontroller",
          "Controlling LCD using PIC Microcontroller",
          "Display and Move Text on LCD",
          "Stepper Motor Control",
          "Dot Matrix Control",
          "Keypad Interface and control with PIC Microcontroller",
          "Summary",
          "Reading Material"
        ],
        "More is Comming": [
          "Section Intro",
          "PIC Programming Options",
          "Summary",
          "Reading Material"
        ],
        "Practical Experiments": [
          "Exp1: Introduction to Software Tools MikroC, PROTEUS, and QL-2006 programmer",
          "Experiment #1 Introduction to Software Tools MikroC, PROTEUS, and QL-2006",
          "Exp2: Introduction to PIC16F84A",
          "Experiment #2 Introduction to PIC16F84A",
          "Exp3: Introduction to MikroC Language",
          "Experiment #3 Introduction to MikroC Language",
          "Exp4: Some Logic Functions Design",
          "Experiment #4 Some Logic Functions Design",
          "Exp5: Delay Loops Applications Flasher & Counter & Push Buttons",
          "Experiment #5 Delay Loops Applications Flasher & Counter & Push Buttons",
          "Exp6: 7 segment Interface with PIC Microcontroller & Counter Application",
          "Experiment #6 7 segment Interface with PIC Microcontroller & Counter Applicatio",
          "Exp7: LCD Interface with PIC Microcontroller",
          "Experiment #7 LCD Interface with PIC Microcontroller",
          "Exp8: Keypad Interface with PIC",
          "Experiment #8 Keypad Interface with PIC",
          "Experiment #9 Analog Digital Conversion",
          "Experiment #9 Analog Digital Conversion",
          "Experiment #10 Unipolar Stepper Motor Control",
          "Experiment #10 Unipolar Stepper Motor Control",
          "Experiment #11 Dot-Matrix Display",
          "Experiment #11 Dot-Matrix Display",
          "Experiment #12 Serial Interface with PIC Microcontroller",
          "Experiment #12 Serial Interface with PIC Microcontroller",
          "Experiment #13 Interrupt Application Controlling flashing speed of a flasher",
          "Experiment #14 TMR0 Application Counter Using TMR0",
          "Experiment #15 Pulse-width modulation (PWM)",
          "Experiment #16 EEPROM Memory Application",
          "Experiment #17 Application for Keypad and LCD Security System"
        ],
        "Analog To Digital Conversion": [
          "Section Intro",
          "Analog To Digital Conversion",
          "ADC Module in PIC16F877A",
          "ADC Module Configuration Bits and Example",
          "Summary",
          "Reading Material"
        ],
        "Interrupts": [
          "Section Intro",
          "Interrupts and External Interrupt Source",
          "PortB Line Change Interrupt Source",
          "EEPROM Data Write Interrupt",
          "Interrupt Handlers and INTCON Register",
          "Option Register",
          "Programming the External Interrupt RB0 Example",
          "PortB 4 7 Status Change Interrupt",
          "RB0 and RB4-7 Interrupt Example",
          "Summary",
          "Reading Material"
        ]
      },
      "requirements": [
        "Download and Install Proteus Professional! We'll cover this in First section",
        "Download and Install MikroC Pro! We'll cover this in First section"
      ],
      "description": "8.5 Hours of HD Content | More than 1.5k Students | Highest Rated Course\nWhy You Should Take This Course?\nThe course contains a lot of information that is not found elsewhere and is organized in a practical, easy-to-follow manner.\nThe course is practical with plenty of examples and exercises.\nThis course will help you learn the basics of computer programming from scratch.\nStep by Step is an excellent introduction for those who have been put off by the mathematical nature of most programming courses.\nDetailed information on all aspects of microcontrollers.\nIt covers every aspect of microcontroller interfacing, from analog signal interfacing to digital interfacing, and more.\nContinual Updates 4 Star | More Than 1600 STUDENTS!!! THANK YOU!!!\nWhat Students Are Saying:\n\"This instructor is amazing. His ability to explain something complex and help you understand it is worth it. I would recommend this course to anyone interested in PIC programming.\" - James Clapp\n\"I liked this course well. It is a short introduction to the big number of PIC Controllers with most of the standard tasks of an MCU and the typical components attached to it and not more. No unimportant information. The eBooks are convenient.\" - Reinhard Pontius\n\"I enjoyed the content and presentation of the course material. The instructor is very good at responding to questions.\" - Walter Andreeff\n\"Good instructor, well prepared for every single lecture, bugs free, easy to follow, lots of examples and detailed explanations. Worth learning PIC Microcontroller.\" - Tan Pham\n\"Because it is a practical-based course, anyone can learn and understand.\" - Abel Kasawhili\n\"Well done, clear precise information well laid out.\" - Kevin Mills\n\"Best tutorial. Everyone should move thoroughly lecture by lecture.\" - Neeraj Kumar\nWelcome to this course.\nThe PIC Microcontroller is an electronic device that is easy to use in both hardware and software. Sensing the environment by receiving inputs from many sensors, the PIC Microcontroller affects its surroundings by controlling lights, motors, and several other accessories. It's intended for anyone making interactive hardware projects by connecting it with a power source, a few LEDs, and resistors.\nBonus! When you join this course, you will get the PIC Microcontroller Test Your Skills and Get Certified Course for FREE (usually worth $200) in the Bonus Section, where you can test your PIC Microcontroller skills with more than 100 questions. This is the only PIC Microcontroller Practice Exam course on Udemy that has timed test-taking ability and provides interactive, section-level feedback.\nThis course is designed to introduce the PIC Microcontroller hardware and programming environment to get you started on building projects as soon as possible.\nUnleash Your Inner Hero With This Course:\nPIC Microcontroller Inner Structure and Programming Introduction\nLEDs, Resistors, and Pushbuttons\nLCD Screens and Seven Segment Displays\nMotor and Keypad\nDIY Projects and Quick Tips\nA tool for creating any device imaginable, PIC Microcontrollers have become a favorite of electronic students and anyone interested in device manufacturing because of their ease of use and extremely low cost. Example projects include Ardupilot, a UAV platform able to control aerial drones.\nContents and Overview This course is designed for anyone interested in learning electronic design. No experience is required, and all you need is a PIC Microcontroller and several low-cost components. With hours of content in many lectures, this course will take you from zero experience in electronics or programming to PIC Microcontroller Master.\nWhat You Will Learn\nIntroduction to PIC Microcontroller hardware and programming.\nInterfacing with LEDs, resistors, pushbuttons, LCD screens, seven-segment displays, motors, and keypads.\nBuilding interactive hardware projects.\nDeveloping DIY projects and learning quick tips for effective programming.\nWho Is This Course For\nBeginners with no prior knowledge of microcontrollers.\nStudents and professionals looking to enhance their skills in microcontroller programming.\nAnyone interested in learning and developing interactive hardware projects.\nRequirements\nNo prior knowledge of microcontrollers required.\nA PIC Microcontroller and several low-cost components.\nEnthusiasm and a willingness to learn.\n\n\nAbout the Instructor Info Educational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge - we go into the depth of the topic and give you the exact - step by step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years - we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million View, 20k+ Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology, helping educate the world to make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and provide guidance and consulting for many students over the years to help them kick-start their career.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, particularly for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers courses on\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone with a curiosity for making electronics",
        "People with no experience in electronics",
        "People with an intermediate knowledge of electronics",
        "Children over 12 years old"
      ]
    },
    {
      "title": "Chip Level Laptop Repairs: Understanding 3.3 & 5Volt Circuit",
      "url": "https://www.udemy.com/course/chip-level-laptop-repairs-understanding-33-5volt-circuit/",
      "bio": "How to diagnose and repair faulty laptop motherboard ICs using tools like multimeter, schematics and soldering stations",
      "objectives": [
        "After this course, you will have gained the skills to confidently identify, diagnose, and repair faulty chips or ICs on laptop motherboards",
        "Upon completing the course, you will be able to troubleshoot and repair laptop motherboards that do not turn on due to faulty 3.3 and 5 volts chips.",
        "You will be able to successfully unsolder and solder ICs on the motherboard using a soldering station, solder gun, and other appropriate tools.",
        "The knowledge covered in this course can help you repair different motherboard problems in various laptop brands like HP, Dell, Lenovo and MacBook",
        "By the end of the course, you will be able to use a multimeter and schematics to accurately measure and determine faulty chips and where to obtain spare chips",
        "You will be able to apply this knowledge and skills to repair various chip level laptop motherboard issues",
        "You will be able to repair laptops that turn on and off without display"
      ],
      "course_content": {},
      "requirements": [
        "The 3.3 and 5 Volts chip-level laptop motherboard repair course is designed for both beginners and professionals seeking to enhance their chip-level repair skills. While prior knowledge of schematics diagrams is not required, it can make the course easier to understand. By the end of the course, you will have gained the skills necessary to diagnose and repair faulty chips on laptop motherboards, regardless of your prior experience."
      ],
      "description": "Do you want to learn how to diagnose and fix faulty chips on laptop motherboards? Look no further than this Chip Level Laptop Repair Course! Hello and welcome My name is Chaz, and I'll be your instructor for this course.\nIn this course,\nyou'll learn everything you need to know about power supply chips or ICs and how they make voltage, specifically focusing on the 3.3 and 5 volts circuit.\nYou'll learn how to identify these chips on the motherboard, understand their functions, and diagnose faulty chips using tools like multimeters, schematics, and others.\nYou'll also learn where to get spare replacement chips and how to replace them using tools like soldering stations, soldering guns, and many others.\nBut that's not all! We'll also explore how 3.3 and 5 volts circuit is designed in different laptop brands like HP, Dell, Lenovo, and MacBook.\n\n\nBy the end of this course, you'll have a deep understanding of how motherboard chips work and the ability to fix laptops that don't turn and those that turn on and off with no display.\nYou'll also have the confidence to diagnose and replace ICs on the motherboard.\nYou will also understand the function of different chips, and determine compatible chips from different Donor boards regardless of their brand.\n\n\nDon't be intimidated by the complexities of motherboard repair - in this course, I'll break down all the concepts from basics building upwards through well-crafted videos that cover more than 20 topics.\nBut what sets this course apart is the last video that shows you how to practically diagnose and repair a faulty power supply chip on an HP laptop that turns on and off without display. This video will help you apply the concepts you've learned throughout the course and give you the confidence to fix laptops with missing voltages and faulty chips in real life.\nWhether you're a professional technician or just someone who wants to learn how to repair your own laptop, this course is for you.\nBy the end of it, you'll have the skills and knowledge to diagnose and repair laptop motherboards' faulty chips, So what are you waiting for? I encourage you to Join the Chip Level Laptop Repair Course today and explore how motherboards work in depth.",
      "target_audience": [
        "This course is for Laptop technicians who want to understand how to diagnose and repair chip level issues in laptop motherboards",
        "Phone repair Technicians who want to learn laptop repairs and include it as part of their services",
        "IT Technicians who want to learn how to repair laptops",
        "Hobbyists and Tech enthusiastic individuals who want to learn more about how laptop motherboards work on chip level",
        "Computer scientists and students who would like to widen there knowledge of how computers work",
        "Lastly, this course is for all individuals who want to advance there knowledge of how chips and components work on the motherboard"
      ]
    },
    {
      "title": "8051 Microcontroller - An Assembly Language Programming",
      "url": "https://www.udemy.com/course/8051-microcontroller-an-assembly-language-programming/",
      "bio": "Assembly Language Programming for 8051 Microcontroller",
      "objectives": [
        "Architecture of 8051 Microcontroller",
        "Instruction set of 8051 Microcontroller",
        "Assembly language programming of 8051 Microcontroller",
        "Demonstration of MCU8051 software for programming and interfacing"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience needed. You will learn everything in this course"
      ],
      "description": "This 8051 Microcontroller Lecture Series explains the in-depth architecture, pin description, instructions, assembly language program, and interfacing of various peripherals with the microcontroller. In the lecture series, the in-depth MCU8051 software is also explained. The MCU8051 software is used for writing, debugging, and interfacing various in-built peripherals. Learners can see many demonstrations of the program and the interfacing of devices. There are a few demonstrations of using Proteus software.\nAfter completion of this course learners will be able to:\nDifferentiate between 8051, 8052, and 8031 microcontrollers\nUnderstand the RAM Architecture of 8051\nExplain the significance of each bit of Program Status Word (PSW)\nUnderstand the signed and un-signed operations\nIdentify the pin details of the 8051 microcontroller\nDifferentiate different addressing modes\nUnderstand different instructions\nUnderstand timer/counter operations of 8051 microcontroller\nDemonstrate the assembly language programs using timers and counters\nIllustrate the interrupts and their applications\nUnderstand the serial communication method using an 8051 microcontroller\nWorking of Analog to Digital Converter\nWorking of Digital to Analog Converter\nWorking of stepper motor\nInterfacing and programming of LED with 8051 microcontroller\nInterfacing and programming of LCD with 8051 microcontroller\nInterfacing and programming of keypad with 8051 microcontroller\nUnderstand Integrated Development Environment (IDE) used for developing software\nDemonstrate the MCU8051 software for the development of software\nUnderstand how to select the banks of 8051 microcontroller\nUnderstand the concept of stack",
      "target_audience": [
        "Undergraduate Engineering students of Electronics, Electrical and Computer science students",
        "Diploma students of Electronics, Electrical and Computer science"
      ]
    },
    {
      "title": "Embedded Systems Job Interview 101",
      "url": "https://www.udemy.com/course/embedded-systems-job-interview-101/",
      "bio": "This course is a 360 overview of embedded systems paradigm: competencies needed, how to get prepared, and what to expect",
      "objectives": [
        "Have a complete understanding for competencies needed, how to get prepared, and what to expect in an embedded system interview.",
        "Have a 360 degree overview of the embedded system paradigm",
        "Better prepare your resume for an embedded systems Job position",
        "Get a free professional technical resume proof-reading"
      ],
      "course_content": {},
      "requirements": [
        "Some formal or informal general background in electrical and computer engineering",
        "Basic knowledge of programming languages and electronics theory is required.",
        "Desire to pursue a career in  the field of Embedded Systems."
      ],
      "description": "Learn how to handle embedded systems job interviews. This course is a 360 overview of embedded systems paradigm: competencies needed, how to get prepared, and what to expect. The course is also a good tool to assess your skills and understand what background and experience is needed to become an embedded systems developer\nGet a free professional Proof Reading for your resume.\nBy registering through this course, you will also get a free professional proof reading for your resume.\nThe field of embedded systems design is reshaping the way we live our everyday life. The demand for technically trained individuals has skyrocketed. This course will help you get prepared before going to your next Embedded Systems job interview.\nEmbedded System design is more than just programming and Embedded systems Interviews is more than just Q&As. The course covers the skills sets required for an Embedded Systems position. The course highlights various topics that are essential in any embedded systems interview.",
      "target_audience": [
        "students and fresh grads who are interested in pursing career in the field of embedded systems.",
        "Professionals who are pursing a career in the field of embedded systems.",
        "Anyone who is preparing for the next embedded system job interview.",
        "Anyone who wants to get a 360 overview of the embedded system paradigm."
      ]
    },
    {
      "title": "ISO 26262-5:2018: Product development at the hardware level",
      "url": "https://www.udemy.com/course/iso-26262-52018-product-development-at-the-hardware-level/",
      "bio": "Plain and simple clause by clause explanation of ISO 26262-5:2018: HW development with exercises (electric vehicle)",
      "objectives": [
        "Functional Safety",
        "ISO 26262",
        "ISO 26262-5: Product development at the hardware level",
        "Hardware Fault Classification",
        "Single Point Fault Metric",
        "Latent Fault Metric",
        "Hardware Safety Requirements",
        "Hardware Design",
        "Probabilistic Metric for random Hardware Failures",
        "Hardware Safety for Electric Vehicles according to ISO 26262"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is Functional Safety?",
          "Overview of ISO 26262:2018"
        ],
        "5-5 General topics for the product development at the hardware level": [
          "General topics for the product development at the hardware level"
        ],
        "5-6 Specification of hardware safety requirements": [
          "Specification of hardware safety requirements"
        ],
        "5-7 Hardware design": [
          "Hardware design",
          "Wiring Diagram",
          "Circuit Diagram",
          "Coexistence of Elements"
        ],
        "5-8 Evaluation of hardware architectural metrics": [
          "Evaluation of hardware architectural metrics",
          "Safe Fault and Single Point Fault",
          "Residual Point Fault",
          "Multiple Point Faults",
          "Latent Fault",
          "Decision Tree for Fault Classification according to ISO 26262",
          "Calculation of the Single Point Fault Metric and Latent Fault Metric"
        ],
        "5-9 Evaluation of the safety goal violations due to random hardware failures": [
          "Evaluation of the safety goal violations due to random hardware failures",
          "Calculation of the Probabilistic Metric of random Hardware Failures",
          "Distribution of the PMHF target value",
          "Exercise: Calculation of the Hardware Metrics"
        ],
        "5-10 Hardware integration and testing": [
          "Methods to derive test cases",
          "Test methods",
          "Thank you for your attention!",
          "Bonus"
        ]
      },
      "requirements": [
        "Recommended but not mandatory: Basic understanding of ISO 26262 and Functional Safety"
      ],
      "description": "This course is about ISO 26262-4: Product development at the system level. All relevant clauses of this part of ISO 26262 are explained in the course. The following clauses are considered:\nClause 6: Specification of hardware safety requirements\nClause 7: Hardware design\nClause 8: Evaluation of hardware architectural metrics\nClause 9: Evaluation of the safety goal violations due to random hardware failures\nClause 10: Hardware integration and testing\n\n\nThe following aspects are considered in Clause 6: Specification of hardware safety requirements:\nThe ISO 26262 V-model for the hardware phase\nRefinement of the Hardware Software Interface (HSI)\nCharacteristics and attributes for the hardware safety requirements\nThe following aspects are considered in Clause 7: Hardware design:\nRelevant aspects for creation of the hardware design\nThe following aspects are considered in Clause 8: Evaluation of hardware architectural metrics:\nHardware fault classification (Safe Fault, Single Point Fault, Residual Fault, Dual Point Fault, Multiple Point Faults, Latent Fault)\nExamples for several hardware fault categories\nDecision Tree for fault classification according to ISO 26262\nCalculation of the Single Point Fault Metric (SPFM) and the Latent Fault Metric (LFM)\nThe following aspects are considered in Clause 9: Evaluation of the safety goal violations due to random hardware failures:\nEvaluation of the safety goal violations due to random hardware failures\nCalculation of the Probabilistic Metric of random Hardware Failures (PMHF)\nThe following aspects are considered in Clause 10: Hardware integration and testing:\nMethods to derive test cases\nTest methods\n\n\nThe course includes an exercise for determination of the hardware metrics SPFM, LFM and PMHF.\nA possible solution for the exercise is presented in a video.\n\n\nIn the first part of the course you get a quick overview of all ISO 26262:2018 parts. Also the term functional safety is explained in the first part of the course. And you get an overview of functional safety standards for other industries, such as nuclear plants or process industry.\nIn case you already have some basic knowledge about functional safety and ISO 26262 the first part of the course is optional and you can skip it.",
      "target_audience": [
        "Project Leaders",
        "Safety Managers",
        "System Designers",
        "Software Developers",
        "Hardware Developers",
        "Test Engineers",
        "Quality Responsibles"
      ]
    },
    {
      "title": "TIA Portal Master Project (Level 5)",
      "url": "https://www.udemy.com/course/siemens-tia-portal-step-7-wincc-plc-hmi/",
      "bio": "Learn (hands-on) to create complete PLC and HMI solutions from absolute zero in TIA Portal.",
      "objectives": [
        "By the end of this course, you will be able to program Siemens PLCs using ALL of the IEC programming languages supported in TIA Portal.",
        "You will know how to create complete HMI projects using WinCC RT Professional.",
        "At your next interview, you'll be able to bring your laptop with a fully functional PLC program and HMI both running live to actually demonstrate everything you've learned in this course (which will be quite a lot)."
      ],
      "course_content": {},
      "requirements": [
        "Coming into this course, you should already have a basic understanding of PLC / HMI terminologies and basic computer literacy.",
        "If you don't think you're quite ready, check out my beginner's PLC course, \"PLC Programming from Scratch (PLC I).\""
      ],
      "description": "By now, you already know the basics. You know what digital and analog signals are. You know what \"PLC\" and \"HMI\" mean. You know what an INT and a BOOL and a FLOAT are. As long as you're at LEAST that far, you'll be able to handle this course. If you aren't quite there yet, I strongly recommend you check out my first PLC programming course which teaches from the most elementary fundamentals all the way up to creating complete solutions with best practices.\nFor those of you who are still here and think you're ready, you're about to learn Siemens PLC and HMI programming end-to-end and top-to-bottom. There will be some familiar info covered such as alarm programming and HOAs, but we aren't going remedial here. Most of the focus will be on creating a complete program for a theoretical system and doing so with LAD, FBD, SCL, STL and GRAPH programming paradigms. If you've already completed my PLC IV course, this should be a piece of cake.\nBut no PLC is complete without an HMI, right? No worries! We're getting into all of that as well and best of all - you'll be able to follow along in your own (fully-functional 21-day trial version) copy of the software. So you'll be creating PLC programs, creating HMI projects, simulating both and making them talk to each other. It's everything you need and want to develop a HIGH comfort level with Siemens technology!\nFor those of you who might not think you're ready, you can always take a look at my other PLC programming courses.\n\n\nWhat's covered in each of the five PLC courses I teach here and on my own PLC Dojo site?\n\n\nPLC Fundamentals (Level 1) teaches you how to program with the focus on ladder logic, which is the most popular PLC programming language.  The goal is to teach you everything you need to know to make a PLC do what you want it to do.  You are also given all the software necessary to both CREATE and RUN your own programs live - right on your own computer.\nApplied Logic (Level 2) forces you to take what you've learned and solve problem after progressively harder problem unassisted.  You get a spec and are told simply: \"Make it work, and don't progress until you have.\"  After, you get to watch me solve each one as well.  By the end, you don't just know how to program - you are a PROGRAMMER.\nProcess Visualization (Level 3) gives you both knowledge and experience in FIVE different HMI / SCADA development environments.  By the end, you've created several COMPLETE visualization (screen) projects that you can actually run on your own computer (and SHOW PEOPLE in an interview) with no additional hardware.\nIEC Paradigms (Level 4) is only for the heavyweights.  This course teaches you how to program using all five IEC programming languages (plus one more) in multiple environments.  There are projects as well, so by the end, you have seen it all and DONE it all as well.  There won't be anything anybody can show you that you won't already be familiar with.\nTIA Portal Master Project (Level 5) is the culmination of everything. In that course, you'll program an entire power plant using all five PLC programming languages (in PARALLEL!) with a full HMI. It's a massive and complex project that really showcases your talents in an interview!",
      "target_audience": [
        "This course is perfect for anybody wanting to learn PLC / HMI development using the latest Siemens development platform(s)."
      ]
    },
    {
      "title": "Introduction to BBC Micro:bit",
      "url": "https://www.udemy.com/course/introduction-to-bbc-microbit/",
      "bio": "Get introduced to the Maker world through this accessible course on BBC Micro:bit - No programming experience required",
      "objectives": [
        "The history, the impact and the physical overview of the BBC Micro:bit",
        "The basic programming concepts like loops, logic, variable, and math operations in the MakeCode Block editor",
        "The working principle of all the peripherals on the BBC Micro:bit, like the LED Matrix, the button, the accelerometer, the compass, and the Radio. You will also learn the concept of serial communication",
        "To use the LED Matrix of the BBC Micro:bit to display custom images and animations",
        "To use the buttons on the BBC Micro:bit to trigger events",
        "To use the accelerometer to implement a Spirit Level Project",
        "To use the compass/magnetometer to implement a Metal Detector Project",
        "Basics of serial communication and learn to send data between the BBC Micro:bit and a PC. You will also implement a Temperature logger project and plot a graph of the temperature in your surroundings",
        "Basics of radio communication and implement a Digital Telegraphy Project using Morse code between two BBC Micro:bits"
      ],
      "course_content": {
        "Getting Started with the Micro:Bit": [
          "Introduction to the course",
          "Getting to know your BBC Micro:bit",
          "Physical Overview of the BBC Micro:Bit",
          "Getting Started with the Micro:Bit",
          "The Impact of BBC Micro:bit in education"
        ],
        "Visual Programming Using The Block Editor": [
          "Introduction to the Block Editor",
          "Modules in the Block Editor",
          "Introduction to Programming Concepts",
          "“Hello, World!”",
          "Visual Programming Using the Block Editor",
          "Basic Programming Concepts"
        ],
        "Working with the Buttons and the LED Matrix": [
          "Understanding the Micro:Bit buttons and the LED Matrix",
          "Blinking the LED Matrix with a button",
          "Advanced Functions of the LED Matrix",
          "Project: Pomodoro Timer",
          "Activity Project: Light Detector",
          "Working With the Buttons and the LED Matrix",
          "Advanced functions of the LED Matrix"
        ],
        "Working with the Accelerometer": [
          "What is an Accelerometer?",
          "Using the Accelerometer Blocks",
          "Project: Spirit Level",
          "Activity Project: The Earthquake Detector",
          "Working With the Accelerometer",
          "Applications of accelerometer"
        ],
        "Working with the Magnetometer": [
          "What is a Magnetometer?",
          "The Magnetometer Module Blocks",
          "The Metal Detector Project",
          "Digital Compass Activity Project",
          "Working with the Magnetometer",
          "Working with the magnetometer"
        ],
        "Working with Serial Communication": [
          "Understanding Serial Communication",
          "Get the Micro:bit to talk with a PC",
          "The Temperature Logger Project",
          "Working with Serial Communication",
          "Serial communication protocols"
        ],
        "Radio Communication": [
          "What is Radio Communication?",
          "An Overview of the Radio Module Blocks",
          "Digital Telegraphy Project using the Morse Code",
          "Radio Communication",
          "Conclusion",
          "List out 5 different projects"
        ]
      },
      "requirements": [
        "The course assumes no prior knowledge in programming or electronics",
        "All you need is curiosity, hunger to learn and logical thinking"
      ],
      "description": "Hello learners, Welcome to MAKERDEMY’s \"Introduction to BBC Micro:bit\" course. If you are looking for that one course that will help you gain confidence to explore the Micro:bit, you have come to the right place.\nThrough an innovative pedagogy of mixing projects and concepts, this course will help you learn the WHY, HOW and WHAT. To this end, this course is beyond a cook book. You will always know WHY you are doing something. For the more curious learners, we have ample resources to dive in to and continue your learning journey.\nIn just two and half hours, you will learn ALL the peripherals of the Micro:Bit and will build several projects. Along the way, you will learn quite a bit of science related to the projects that you do.\nSo, this course is structured as SCIENCE + Micro:Bit + PROJECTS + ASSIGNMENTS.\nWith numerous custom made illustrations and animations, we have set the standard in terms of production quality. All so that you can have a terrific learning experience.\nThis course is meant for anyone in the age group of 8 to 100+. This is basically for people who are mentally young and curious.\nIf you are a teacher or a parent trying to introduce the BBC Micro:bit to your student or kid, you will find this course very useful as you will be able to answer all the questions your students or kid will ask. This is because we have tailored this course by giving equal importance to both the projects as well as the concepts.\nSo come join me in this introductory course on the BBC Micro:bit. I am looking forward in being your instructor and hearing about all the wonderful projects you were able to make with the BBC Micro:bit",
      "target_audience": [
        "A hobbyist looking to learn how to program the BBC Micro:bit",
        "A parent seeking to teach his/her children basics of the Micro:bit and programming",
        "An absolute Beginner to electronics and programming, who wants to explore the BBC Micro:bit"
      ]
    },
    {
      "title": "Verification Series Part 2: Hands-On SystemVerilog Projects",
      "url": "https://www.udemy.com/course/systemverilog-for-verification-part-2-projects/",
      "bio": "Step by Step Guide from Scratch",
      "objectives": [
        "Verification of Memories viz. FIFO",
        "Verification of Bus Protocols viz. APB, AHB, AXI, Whishbone",
        "Verification of Interface Communication Protocols viz. SPI, UART, I2C",
        "Verification of Simple Compinational Block viz. Adder",
        "Verification of Simple Sequential Block viz. Data Flipflop"
      ],
      "course_content": {
        "Verification Environment for D-FF": [
          "Course Pre-requisites",
          "Summary",
          "D-Flipflop P1",
          "D-Flipflop P2",
          "D-Flipflop P3",
          "Design Code",
          "TB Codes",
          "A11",
          "A12"
        ],
        "Verification environment for First In First Out (FIFO)": [
          "Summary",
          "FIFO P1",
          "FIFO P2",
          "FIFO P3",
          "Design Code",
          "TB code with comments",
          "A21"
        ],
        "Communication Protocol: Verification of Serial Peripheral Interface (SPI)": [
          "SPI Master P1",
          "SPI Master P2",
          "SPI Master P3",
          "Design Code",
          "TB Code",
          "SPI with slave P1",
          "SPI with slave P2",
          "Design Code",
          "Verilog TB",
          "Testbench Code",
          "A31"
        ],
        "Communication Protocol: Verification of UART": [
          "UART P1",
          "UART P2",
          "UART P3",
          "UART P4",
          "UART P5",
          "Design Code",
          "TB Code",
          "A41"
        ],
        "Communication Protocol: Verification of I2C(Inter-Integrated Circuit)": [
          "Understanding start and stop conditions",
          "I2C Write and Read Transactions",
          "I2C Master FSM",
          "I2C Master",
          "I2C Slave",
          "I2C Verification Environment P1",
          "I2C Verification Environment P2",
          "I2C Verification Environment P3",
          "Design Code",
          "TB Code",
          "A51"
        ],
        "Bus Protocol: Verification of APB_RAM": [
          "Understanding APB Signals",
          "APB read and Write Transactions P1",
          "APB read and Write Transactions P2",
          "Design",
          "Testbench environment",
          "Design Code",
          "TB environment",
          "APB Old Videos Google Drive Link"
        ],
        "Bus Protocol: Verification of AXI Memory": [
          "Understanding AXI Lite",
          "Implementing Write",
          "Implementing Read",
          "Testing Write and Read",
          "Building Verification environment P1",
          "Building Verification environment P2",
          "Building Verification environment P3",
          "Building Verification environment P4",
          "Design Code",
          "Verilog TB Code",
          "SV TB Code",
          "AXI Old Videos Google Drive Link"
        ],
        "Bus Protocol: Verification of AHB Memory": [
          "Understanding AHB Signals P1",
          "Understanding AHB Signals P2",
          "Understanding Design P1",
          "Understanding Design P2",
          "Understanding Design P3",
          "Understanding Design P4",
          "Transaction Class",
          "Generator Class",
          "Driver Class P1",
          "Driver Class P2",
          "Driver Class P3",
          "Monitor Class",
          "Scoreboard Class",
          "Verifying different Burst Modes P1",
          "Verifying different Burst Modes P2",
          "Design Code",
          "Testbench Code"
        ],
        "Bus Protocol: Verification of Whishbone Memory": [
          "Understanding Protocol",
          "Understanding Design",
          "Transaction Class",
          "Generator Class",
          "Driver Class",
          "Monitor Class",
          "Scoreboard Class",
          "Testbench Top",
          "Design Code",
          "Testbench Code"
        ],
        "Bonus Internship Program": [
          "Remote Internship Program"
        ]
      },
      "requirements": [
        "Fundamentals of Verilog, Digital Electronics"
      ],
      "description": "The VLSI industry can be divided into two branches, viz., design of RTL and verification of the RTL. Verilog and VHDL remain the popular choices for most design engineers working in RTL design. Functional verification could also be performed with the Hardware Description Language, but the Hardware Description Language has limited capabilities for performing code coverage analysis, corner case testing, and so on, and writing TB code may be impossible for complex systems at times.\nSystemVerilog has become the primary choice of verification engineers to perform verification of complex RTL's. SystemVerilog object-oriented capabilities such as inheritance, polymorphism, and randomization allow users to find critical bugs with minimum effort.\nEach complex system in FPGAs is built with the help of multiple subsystems. These subsystems can be either simple sequential components / simple combinational components / data communication protocols RTL / bus protocol RTL.\nOnce we understand strategies to perform verification of the common subsystems, you can easily perform verification of any complex system with the same logic.\nOur objective for the course will be to build logic with the help of the fundamentals discussed in the first part of the course to perform verification of these common subsystems. We start our course by performing verification of data flipflops and FIFOs, then proceed to verification of common data communication protocols, viz., SPI, UART, and I2C. Finally, we will perform the verification of bus protocols, viz., ABP, AHB, AXI, and Whishbone protocol.",
      "target_audience": [
        "Anyone wish to learn Verification of the RTL with SystemVerilog"
      ]
    },
    {
      "title": "Mastering Microcontroller and Embedded Driver Development",
      "url": "https://www.udemy.com/course/mastering-microcontroller-with-peripheral-driver-development/",
      "bio": "(MCU1) Learn bare metal driver development using Embedded C: Writing drivers for STM32 GPIO,I2C,SPI,USART from scratch",
      "objectives": [
        "Understand Right ways of Handling and programming MCU Peripherals",
        "Develop Peripheral drivers for your Microcontroller",
        "Understand complete Driver Development steps right from scratch for GPIO,SPI,I2C and USART.",
        "Learn Writing peripheral driver headers, prototyping APIs and implementation",
        "Explore MCU data sheets, Reference manuals, start-up Codes to get things done",
        "Learn Right ways of handling/configuring Interrupts for various peripherals",
        "Learn about Peripheral IRQs/Vector table/NVIC interfaces and many",
        "Learn about Configuration/status/Control registers of various Peripherals",
        "Demystifying behind the scene working details of SPI,I2C,GPIOs,USART etc.",
        "Explore hidden secretes of MCU bus interfaces, clock sources, MCU clock configurations, etc.",
        "Understand right ways of enabling/configuring peripheral clocks/serial clocks/baud rates of various serial protocols",
        "Learn about MCUs AHB, APB bus protocols",
        "Learn about different MCU clocks like HCLK, PCLK, PLL,etc",
        "Learn to capture/decode/analyze traces of serial protocols on Logic analyzer",
        "Learn about Quick ways of debugging peripheral issues with case studies"
      ],
      "course_content": {
        "Notes and Information": [
          "About the instructor",
          "Important Note",
          "What is this course all about ??",
          "Source Code and Slides",
          "Rating and Review"
        ],
        "Development board used in our courses": [
          "About MCU Development board"
        ],
        "Hardware/Software Requirements": [
          "Hardware/Software Requirements"
        ],
        "IDE installation": [
          "Downloading STM32CUBEIDE",
          "Installation-Windows",
          "Installation-Ubuntu",
          "Embedded Target",
          "Documents required"
        ],
        "Creating a project using STM32CUBEIDE": [
          "Creating Hello-World project",
          "SWV working principle",
          "Testing Hello-World through SWV",
          "OpenOCD and Semihosting to use printf"
        ],
        "Embedded Code Debugging Tips and tricks": [
          "Debugging options",
          "Single stepping",
          "Disassembly and Register windows",
          "Breakpoints",
          "Expression and variable windows",
          "Memory browser windows",
          "Call stack and fault analyzers",
          "Data watch-points",
          "SFR windows",
          "Other basic features of IDE"
        ],
        "Understanding MCU Memory Map": [
          "Understanding Memory Map of the MCU: Part 1",
          "Understanding Memory Map of the MCU: Part 2",
          "Understanding Memory Map of the MCU: Part 3",
          "Test your understanding"
        ],
        "MCU Bus Interfaces": [
          "MCU Bus Interfaces Explanation Part 1: I-Code/D-Code/S-Bus",
          "MCU Bus Interfaces Explanation Part 2: AHB/APB1/APB2",
          "MCU Bus Interfaces Explanation Part 3: Q/A session",
          "Understanding MCU Bus Matrix",
          "Test your understanding"
        ],
        "Understanding MCU Clocks and Details": [
          "Understanding MCU Clocking System:Part1"
        ],
        "Understanding MCU Clock tree": [
          "Understanding MCU clock sources and HSE",
          "HSI and RCC registers",
          "Peripheral clock configuration",
          "Exercise : HSI measurements",
          "About USB logic analyzer",
          "Code implementation",
          "Exercise : HSE measurements"
        ]
      },
      "requirements": [
        "Basic knowledge of C programming",
        "If you are completely new to MCU and C programming language then you are advised to finish our \"Embedded C\" course for absolute beginners first"
      ],
      "description": ">> Your Search for an in-depth microcontroller programming course ends here !!<<<\nCourse code: MCU1\nLearn bare-metal driver development using Embedded C : Writing drivers for STM32 GPIO,I2C, SPI,USART from scratch\nEnglish Subtitles/CCs are enabled for this course.\nUpdate 6: videos are updated with the latest STM32CUBEIDE\nUpdate 5: All drivers are developed in a live session with step-by-step coding and added stm32-Arduino communication exercises using SPI and I2C.\nUpdate 4: Dedicated support team is assigned to address student's Q/A\nUpdate 3: English Closed captions are fixed\nUpdate 2  : Added Bus matrix / memory map /vector table /interrupt design discussion with code examples.\nUpdate 1: Eclipse IDE setup for ARM Cortex M based MCUs added\n\n\nThe course is designed for beginners to advanced audiences.\n\n\nBrief Description:\nThis course Demystifies the internal working of the Microcontroller and its Peripherals.\nCoding for the Peripherals STEP-BY-STEP and Developing software drivers entirely from scratch by extracting maximum information from Datasheets, Reference manuals, specs, etc\nProtocol Decoding Using logic analyzers, Debugging, Testing along with Hints and Tips.\n\n\nLong Description:\nLearning Embedded System Programming can be a challenge. Since it's a relatively complex field, there's no actual gold standard yet for how things are practiced, or taught, which can frustrate people who are just trying to learn new things and couldn't connect the dots.\nThis is the motivation behind creating this course to help engineers and students learn different aspects of embedded systems by providing high-quality advanced lectures at a relatively low price.\n\n\nMaster Behind the Scene working;\ncreated this course because I believe your time is precious, and you shouldn't have to hunt around to get a practical foundation In Embedded System Programming. In this course, you will learn to write your peripheral driver for most commonly used peripherals such as GPIOs, I2C, SPI, USART, etc., and the exciting thing is that you will learn everything from scratch.\nNo 3rd party libraries!\nNo blind coding!\nWrite your driver APIs by dealing with the peripheral registers of the MCU!\nCode and Implement APIs from scratch, diving into the datasheet and reference manual of the MCU. I will thoroughly explain how to extract the maximum information from datasheets, Technical Reference manuals to configure and handle peripherals. These techniques you can go and apply to any MCUs you have at your hand.\nIn this course, I will walk you through step-by-step procedures on configuring various Peripherals like GPIOs, SPI, USART, I2C by taking you into the reference manual and datasheet. We will develop a fully working driver code, interrupt handlers, sample application everything from scratch to understand the big picture.\nIn each lecture, I assure you that you will learn something new to use in your work or projects. You'll find yourself handling these peripherals with much more clarity. You will be able to speculate and debug the problem quickly. I'll show you tricks and tips to debug the most common issues using debugging tools such as logic analyzers.\n\n\nThis is not the Arduino style of programming:\nI believe Arduino is for quick prototyping of projects/products but not for mastering the working of micro-controllers and their peripherals. Unlike Arduino programming, where you develop a quick solution and prototyping of products using third-party libraries, this course is entirely different. In this course, no 3rd party libraries are used. Everything we will code by referring to the technical reference manual of the MCU and will create our own library. The Power of this approach is that you can quickly speculate problems and debug like a pro when things go wrong in your project due to bugs. If one thing me and my students are good at is \"debugging,.\" To achieve good debugging skills, it's essential to code by understanding how things work behind the scene but not by blindly using some third-party libraries, and that's the biggest TAKE away from this course.\nThe course is designed and explained so that it is generic across any microcontroller. The code we develop can be used as templates to quickly build a peripheral driver for your MCUs on-chip peripherals.\n\n\nSoftware/Hardware used:\nIn this course, the code is developed so that it can be ported to any MCU you have at your hand. If you need any help porting these codes to different MCUs, you can always reach out to me! The course is strictly not bound to any 1 type of MCU. So, if you already have any Development board that runs with an ARM-Cortex M3/M4 processor, I recommend you continue using it. But if you don't have any development boards, then check out the below Development boards.\n\n\n1. STM32F407xx based Discovery board ( This is the board used in this course)\nMCU Vendor: STMicroelectronics\n\n\nIDE: STM32CUBEIDE (Free)\n\n\nMy promise:\nI am confident that this course will save you many hours of studying/experimenting/googling time to learn about MCU programming. I will personally answer your questions about this material, either privately or in a group discussion. If you are not satisfied, for any reason, you can get a full refund from Udemy within 30 days. No questions asked. But I am confident you won't need to. I stand behind this course 100% and am committed to helping you.\n\n\nLearning order of FastBit Embedded Brain Academy Courses,\nIf you are a beginner in the field of embedded systems, then you can take our courses in the below-mentioned order.\nThis is just a recommendation from the instructor for beginners.\n1) Microcontroller Embedded C Programming: absolute beginners(Embedded C)\n2) Embedded Systems Programming on ARM Cortex-M3/M4 Processor(ARM Cortex M4 Processor specific)\n3) Mastering Microcontroller with Embedded Driver Development(MCU1)\n4) Mastering Microcontroller: TIMERS, PWM, CAN, RTC,LOW POWER(MCU2)\n5) Mastering Microcontroller: STM32-LTDC, LCD-TFT, LVGL(MCU3)\n6) Embedded System Design using UML State Machines(State machine)\n7) Mastering RTOS: Hands-on FreeRTOS and STM32Fx with Debugging(RTOS)\n8) ARM Cortex M Microcontroller DMA Programming Demystified(DMA)\n9) STM32Fx Microcontroller Custom Bootloader Development(Bootloader)\n10) Embedded Linux Step by Step using Beaglebone Black(Linux)\n11) Linux device driver programming using Beaglebone Black(LDD1)",
      "target_audience": [
        "Professionals interested in exploring Embedded systems",
        "Hobbyists and students who want to start their career in Embedded world",
        "If you think about 'embedded' then think about taking this course. you will not be disappointe",
        "This Course may not be suitable for those people who are looking for quick prototyping using boards such as Arduino"
      ]
    },
    {
      "title": "PCB101- PCB Design & Manufacturing",
      "url": "https://www.udemy.com/course/elektrolynx-pcb101/",
      "bio": "PCB101- Circuit Board, PCB designer soft skills development with PCB manufacturing understanding",
      "objectives": [
        "How to quickly become a good PCB layout designer",
        "How does PCB design and PCB manufacturing affects each other",
        "Soft skills for PCB layout design",
        "PCB materials and stack-up",
        "Different types of PCBs",
        "Learn about different PCB FINISH",
        "Learn about different PCB colors",
        "How to choose the best PCB supplier",
        "Careers in PCB industry",
        "Quality in PCB field"
      ],
      "course_content": {
        "Introduction": [
          "Personal Intro",
          "Course Intro",
          "PCB Technology"
        ],
        "Understanding PCB": [
          "Breadboard vs PCB",
          "Types of PCBs",
          "PCB Softwares"
        ],
        "Main Course": [
          "Documentation",
          "Documentaion 2",
          "PCB Specifications",
          "PCB Drawing & Specifications",
          "How to import/export PCB files",
          "PCB Materials and Stack-up",
          "DRC (Design Rule Checks) / DFM (Design for Manufacturing)",
          "Manufacturing Process",
          "PCB FINISH",
          "Soldermask & Silkscreen",
          "Array/Panel/Pallete"
        ],
        "PCB Manufacturing - Rigid PCB": [
          "PCB Manufacturing - Rigid PCB Introduction",
          "1 Layer PCB (Single sided)",
          "Steps involved in manufacturing 2 layer and multilayer PCBs",
          "Gold Fingers",
          "HDI Technology",
          "Castellated Vias",
          "Back Drill",
          "Copper Coin",
          "Aluminum PCB",
          "Edge Plating"
        ],
        "PCB Manufacturing - Rigid-Flex PCB": [
          "Flex Introduction",
          "Flex DFM",
          "Flex Materials",
          "Flex Assembly",
          "Flex PCB - Older Lecture - Obseleted"
        ],
        "PCB Assembly": [
          "PCBA Introduction",
          "Assembly - SMT Technology",
          "Assembly - Thru Hole Technology",
          "Hand Soldering vs SMT Machines",
          "PCB Assembly BONUS LECTURE"
        ],
        "PCB Designing - DRC-DFM (Design Rule Checks - Design for Manufacturing)": [
          "PCB Design section introduction",
          "IPC Organization",
          "DRC-DFM Intro",
          "Spacing on Copper Layers",
          "IPC Specifications",
          "Drill Holes Issues 1",
          "Acid Traps",
          "Thermal Pads on Plane Layers",
          "Copper Slivers",
          "Annular Ring",
          "Soldermask Checks",
          "Silkscreen Checks",
          "Outline and Dimensions",
          "Array , Tabs, V-Score"
        ],
        "Additional Info": [
          "Choosing PCB Supplier",
          "Quality",
          "Career Advice"
        ],
        "Conclusion": [
          "Summary and Conclusion"
        ],
        "Additional Topics": [
          "Signal Integrity",
          "Saturn Tool Kit - Free software for quick various calculations related to PCB",
          "How to design Flex Circuits"
        ]
      },
      "requirements": [
        "This is the basic (core) course in the series.",
        "This course is designed for new graduates in Electrical and Electronics field and junior engineers",
        "Anyone who is interested in learning more about PCB"
      ],
      "description": "Develop your PCB design skills with a deep understanding of the PCB manufacturing industry\n\n\nWith my 20+ years of PCB manufacturing experience, I will teach you things that would have taken you years to learn at your job.\nThis course is designed for new graduates and new engineers so the topics are explained in a simple manner to the audience. The course covers lots of information and topics which would help you become a good PCB \"LAYOUT\" designer. These skills go beyond your software skills and abilities.\nWhat You Will Learn:\nDifferent types of PCBs\nFile formats used in the PCB industry\nPCB materials and stack-ups\nDesign Rule Checks\nDesign for Manufacturing\nPCB FINISH\nSoldermask and Silkscreen\nArray and Panelization\nHow to reduce the cost of your PCB\nUnderstanding PCB Supplier capabilities\nHow to find a good PCB supplier\nQuality in PCB\nCareers in PCB industry (PCB design, PCB manufacturing, PCB assembly)\nWhat to expect after finishing this course:\nYou will have a better understanding of how PCB design and PCB manufacturing are related to each other and how they affect each other.\nYou will learn how to improve your design to lower the cost of your PCB\nYou will have a better understanding of career opportunities in different PCB fields.\nSomewhat understanding of how to read material data sheets\nUpdated 31-03-2024",
      "target_audience": [
        "Electrical and Electronics students",
        "New engineering graduates",
        "Electronics hobbiyist",
        "Fellow geeks"
      ]
    },
    {
      "title": "Basics of Embedded C Programming for Beginners",
      "url": "https://www.udemy.com/course/embedded-c-programming-for-embedded-systems/",
      "bio": "Learn basics of Embedded C programming",
      "objectives": [
        "Embedded C program structure",
        "Introduction to Microcntroller",
        "Programming of micocontroller using embedded c",
        "Steps to burn/embed a program in the microcontroller",
        "Programming in KEIL IDE software",
        "Circuit simulation using PROTEUS Simulation Software",
        "FLASH MAGIC for programming flash based microcontrollers"
      ],
      "course_content": {
        "Introduction": [
          "What is an embedded System ?",
          "Programming in Embedded system",
          "Selection of correct programming language for embedded System"
        ],
        "Basics of Embedded C": [
          "Difference between C and Embedded C",
          "Working of Embedded C compiler",
          "Variables in Embedded C",
          "Control Structure in Embedded C",
          "Function in Embedded C",
          "Constants in Embedded C",
          "Number system",
          "Data Types in Embedded C",
          "Arithmatic operations in Embedded C",
          "Embedded C program structure"
        ],
        "Bitwise operations in Embedded C": [
          "Bitwise Oparators in Embedded C",
          "Bit masking in Embedded C",
          "Bit Extracting in Embedded C",
          "Bit monitoring in Embedded C"
        ],
        "Microcontroller Programming": [
          "What is Microcontroller? How it is different from Microprocessor",
          "Architecture of 8051 microcontroller",
          "Keil IDE Software Installation",
          "Proteus Simulation software Installation",
          "How to write program in embedded C ?",
          "Steps to burn/embed a program in the microcontroller",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No prerequisite"
      ],
      "description": "New microcontrollers become available every year and old ones become redundant. The one thing that has stayed the same is the embedded  C programming language used to program these microcontrollers. If you would like to learn this standard language to program microcontrollers,  then this course is for you!\nThis course is for Absolute Beginners who want to learn the basics of Embedded C programming but do not have C programming experience.\nCourses are like music. Everyone has their own taste and it's not always for everyone.\nLatest Update: Date 23 Dec 2018\nAdded new lectures,\nLecture: What is a Microcontroller? How it is different from Microprocessor.\nLecture: Architecture of 8051 microcontrollers.\nUpdate: Date 22 Dec 2018\nAdded a new article and lecture.\nLecture: Steps to burn/embed a program in the microcontroller\nArticle: Proteus Simulation software Installation\n\nFeatures of this course:\nNo programming experience is necessary.\nIdeal for electronic hobbyists, and students who want to learn the C programming language in an embedded environment.\nLearn how to download and use the Embedded C programming tool.\nLearn steps by step process to burn/embed a program in the microcontroller.\nDownload sample programs.\n\n\nLearn:\nEmbedded C program structure\nIntroduction to Microcontroller\nProgramming of the microcontroller using embedded c\nSteps to burn/embed a program in the microcontroller\nProgramming in KEIL IDE software\nA circuit simulation using PROTEUS Simulation Software\nFLASH MAGIC for programming flash-based microcontrollers",
      "target_audience": [
        "This course is for Absolute Beginners who want to learn basics of Embedded C programming but not having C programming experience."
      ]
    },
    {
      "title": "Internet of Things (IoT) - The Mega Course",
      "url": "https://www.udemy.com/course/internet-of-things-the-mega-course/",
      "bio": "Make Your Surroundings a Better Place with exciting projects on IoT",
      "objectives": [
        "Understand what Internet of Things are?",
        "Controlling home appliances from anywhere in the world",
        "Use some of the physical devices like Arduino and Raspberry Pi",
        "Design some of the IoT applications",
        "Attractive Dashboard design for different applications"
      ],
      "course_content": {},
      "requirements": [
        "Beginner level knowledge of Programming.",
        "Having a beginner level understanding of electronic and electrical circuits is recommended but not necessary",
        "Having access to Raspberry Pi or Arduino"
      ],
      "description": "If you want to make career in Internet of Things: an evolving technology then this course is for you. You will learn everything from high level controllers to interactive  dashboard designing.\n\nDefinition of Internet of Things:\nInternet of Things is a general term used for devices talking over a network for the purpose of Monitoring, Analysis & Control without any human interference.\nAs per the definition you will learn the design for all three aspects of IoT i.e. Monitoring, Analysis & Control\nThis course is based on hands on approach where you will be doing various projects with different hardware and with different communication technologies so that you will not be limited to one platform.\nYou will do these 4 Major Projects which you can include in your CV as well\n1. Weather Station Using Arduino\n2. Water Level Email Notifier using Raspberry Pi\n3. Water Level Indicator with a Globally accessible Dashboard\n4. Smart Bulb which can be controlled from anywhere on the globe.\nAfter doing all these high level stuffs your IoT design skills will improve gradually.\nAll the best!",
      "target_audience": [
        "Anyone who is interested in learning about new technologies",
        "Students , developers and technical designers"
      ]
    },
    {
      "title": "Electronics in Biomedical Engineering: Theory & Repair",
      "url": "https://www.udemy.com/course/electronics-in-biomedical-engineering-theory-repair/",
      "bio": "Electronics & Biomed Engineering: Troubleshoot, Repair Medical Devices and Develop Solutions for Healtcare PROMO ONLY-13",
      "objectives": [
        "Analyze and design electronic circuits for biomedical applications.",
        "Understand the principles and operation of various biomedical instruments.",
        "Troubleshoot and diagnose issues in electronic systems and medical devices.",
        "Repair and maintain medical equipment while adhering to safety guidelines.",
        "Apply digital electronics knowledge to program and control medical devices.",
        "Process and analyze biomedical signals using appropriate techniques.",
        "Identify and classify medical devices based on their functionalities and risks.",
        "Integrate electronics and biomedical concepts to develop innovative solutions.",
        "Communicate effectively with engineers and healthcare professionals in the field.",
        "Undertake hands-on projects, applying theoretical knowledge to practical applications."
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the Course"
        ],
        "Introduction to Electronics : Basic electronics knowledge": [
          "what is electricity ?",
          "Voltage, current and resistance",
          "AC wave, DC wave and the frequency"
        ],
        "Introduction to Electronics : Basic electronic components and their properties": [
          "Resistor",
          "Voltage divider (UPDATED LECTURE)",
          "LDR",
          "Diode",
          "Zener diode",
          "LED",
          "LED-current limitting resistor (UPDATED LECTURE)",
          "7 segment display (UPDATED LECTURE)",
          "IR LED",
          "Capacitor",
          "Bypass Capacitor (UPDATED LECTURE)",
          "Transistor as a switch",
          "IC chips",
          "Relay",
          "Transformer"
        ],
        "Introduction to Electronics: Circuit analysis techniques": [
          "Circuit analysis techniques content",
          "Circuit analysis techniques"
        ],
        "Digital Electronics: Analog to Digital Converters": [
          "Digital Vs. Analog Signals",
          "The Duty cycle",
          "ADC (analog to digital converter)",
          "1) Staircase ADC",
          "2) Flash ADC",
          "3) Pipeline ADC",
          "4) SAR ADC",
          "5) Delta-Sigma ADC"
        ],
        "Digital Electronics: Microprocessors and Microcontrollers (Arduino)": [
          "What are Microprocessors and Microcontrollers ??",
          "What is arduino ??",
          "Types of Arduino boards",
          "Sitting up and start programming ( blink project )",
          "Using variables",
          "Using digital pins",
          "Using analog pins",
          "Serial monitor",
          "If statement",
          "While loop",
          "For loop",
          "Dimmable LED",
          "ECG explaination",
          "ECG (Electrocardiogragh) a biomedical project using arduino"
        ],
        "Circuit Design and Analysis: Diode Operation and Applications": [
          "Basic concept of electron flow and p-n junction formation",
          "Diode definition, structure, and symbol",
          "Types of diodes: rectifier, zener, LED",
          "Diode as a rectifier: half-wave and full-wave rectification",
          "Ripple factor and filter capacitor calculation"
        ],
        "Circuit Design and Analysis: Operational amplifiers and their applications": [
          "Op amp introduction",
          "The characteristics of operational amplifier",
          "OP-AMP GAIN",
          "The Bandwidth of Operational Amplifier",
          "The Effect of Input-Offset Voltage on Output Voltage of Operational Amplifiers",
          "Feedback Equation and stability",
          "Cascade circuit of operational amplifier",
          "Some Examples on Op-Amp",
          "Introduction to Operational Amplifier Applications",
          "Understanding Comparators: Operation and Examples",
          "Summing Amplifiers: Combining Signals with Precision",
          "Summing amplifier (Digital to Analog Converter)",
          "Differential amplifier",
          "Low Pass Filters with Integrating Op-Amp: Signal Smoothing and Integration",
          "High Pass Filters with Differentiating Op-Amp: Signal Edge Detection and Differe"
        ],
        "Circuit Design and Analysis: Filters and their design": [
          "what are filters ? and there types",
          "Low-Pass Filters",
          "High-Pass Filters",
          "Band-Pass Filters",
          "Band-Stop Filters (Notch Filters)"
        ],
        "Simple Biomedical project based on previous lectures": [
          "Understanding working principles of heartbeat Sensor for the project",
          "Using proteus 8 pro in simulating and designing the circuits",
          "Designing the project and simulate it using proteus",
          "Using Breadboard in connecting the circuit"
        ]
      },
      "requirements": [
        "No experience is needed just some passion and determination.",
        "To get the full benefit of the course, you will need to follow along and build the circuits. Thus, access to arduino, breadboards, power supplies, tools, parts, etc",
        "Computer pc or mac .... any version of windows or os capable of running various design tools used in this course such as arduino"
      ],
      "description": "\" ONE HOUR WORTH OF NEW CONTENT WERE ADDED UNDER THE SECTION (Diode Operation and Applications) \"\nThe course \"Electronics in Biomedical Engineering: Theory & Repair\" provides a comprehensive and immersive learning experience for individuals interested in the intersection of electronics and biomedical engineering. The content covers a range of essential topics, starting with the fundamentals of electronics components and circuits, ensuring students grasp the core principles.\nMoving forward, the course delves into the applications of electronics in biomedical instrumentation. Students will explore how various medical devices function, enabling accurate measurement and monitoring of vital signs and bioelectric signals. They will gain an understanding of sensors, transducers, and amplifiers used in medical devices and how to optimize their performance.\nA key focus of the course is troubleshooting methodologies. Students will learn structured approaches to diagnose and rectify malfunctions in electronic systems and medical devices. Practical skills will be honed in repairing and maintaining medical equipment, adhering to safety protocols to ensure proper functionality and patient well-being.\nThe course also introduces students to the concept of digital electronics and microcontrollers. They will discover how these components play a vital role in medical device development, allowing for precise control and automation.\nBiomedical signal processing is another crucial aspect of the course, where students will learn how to analyze and process bioelectric signals. Understanding signal processing techniques will enable them to extract valuable information from biomedical signals, crucial for medical diagnosis and research.\nFurthermore, the course presents an overview of medical device technology and classifications. Students will become familiar with the regulatory framework and safety standards guiding the design and use of medical devices.\nIn addition to theoretical knowledge, the course emphasizes practical application. Students will engage in hands-on projects, integrating electronics and biomedical engineering principles to create innovative solutions for healthcare challenges.\nIn summary, \"Electronics in Biomedical Engineering: Theory & Repair\" equips students with a diverse skill set, empowering them to excel in biomedical electronics. Whether pursuing careers in the medical device industry, healthcare settings, or research, students will be well-prepared to make a positive impact in this rapidly evolving field.",
      "target_audience": [
        "Electronics and Biomedical Engineering Students",
        "Electronics Technicians",
        "Innovators and Entrepreneurs",
        "Electronics Enthusiasts",
        "Anyone who has a passion for this field or wants to start working in this field of work",
        "Beginner at electronic engineering want to combin electronics with biomedicine to develop new medical technologies."
      ]
    },
    {
      "title": "Arduino under the Hood - AVR for Professionals",
      "url": "https://www.udemy.com/course/arduino-under-the-hood/",
      "bio": "From C, Makefiles, and Compiler to all Registers, Periphery, Fuses, Power Reduction Tricks, ISP, DebugWIRE, and LockBits",
      "objectives": [
        "Program and Software Optimizations to reduce Power Consumption",
        "Stripping away the Arduino library, how does the ATmega work under the Hood?",
        "All peripherals: Timers, Watchdog, Reset, Brown-Out, Clock Manipulation registers, ADC, Temperatur Sensor (built in), etc.",
        "Effective Computing for Embedded Systems and the Arduino Platform",
        "Pointers to Registers in C: An easy guide, on how to access Registers. Make your code efficient.",
        "Steps in the GNU Compiler Chain: The journey from the Source Code to the Executable",
        "Ease the Compilation Process: What are Makefiles and how to use them?",
        "Communciation Protocols (TWI/I2C, SPI U(S)ART, debugWIRE, Bit Banging) of Embedded Systems: How does the MCU communicate and how to configure it?",
        "How to debug the AVR using debugWIRE? (How to read the Register Contents, step through the Program?)",
        "What is the purpose of the Boot Loader? How to programming the AVR using without it? (through ISP)",
        "Protect your Intellectual Property (IP): Fuses and Locks of the AVR",
        "Develop proficiency in your embedded development skills and confidently take the next steps.",
        "The documentation is thick, but not scary. Learn how to get the information that you need."
      ],
      "course_content": {},
      "requirements": [
        "Working Knowledge in C or Arduino",
        "Soldering/Breadboard Skills for the Examples and Exercises",
        "Able to work with a Multimeter and read Circuit Diagrams"
      ],
      "description": "As one of the most extensive courses available: we will look at everything and more under the hood of Arduino. At its core, the ATmega328P MCU integrates many features that are not exposed through the Arduino library. While learning how the periphery works, the student writes code, exhibiting high performance at low power consumption. Embedded systems deployed in the field and powered by small batteries can run and collect data for years.\nThe enormous advantage of the AVR platform is that many concepts introduced in this course also apply to other MCUs. Therefore, an entire portfolio of MCUs, ranging from the small ATtiny to the larger ATmega series, becomes accessible. The ATmega328P used in this course is just an example and the gained knowledge is applicable to many embedded systems not limited to the Arduino platform. This is motivated by practical sessions and exercises in which real-world problems are to be solved. In case questions during implementation arise, the student can peek at hints and tips and if nothing works, also at the solutions with plenty of comments in the source code.\nThis course provides handmade captions in English covering the following topics, which focus on the practical aspects and what a concept can be used for. In addition, the course does not follow a particular outline and the topics can be taken in any order based on the interest and needs. The covered topics include:\nGNU Compiler Collection and what happens in every Step and why\nA brief introduction to C and Pointers\nMoving from the Arduino library to AVR: Less Luxury, faster Execution, fewer Resources\nHow to compile with Makefiles? Targets, Rules, and Shortcuts\nEasy Mistakes in C and how to avoid them\nAttack Vectors\nPeripheries:\nTimers, Counters, and Pulse Width Modulation\nInterrupts\nCommunication Protocols\nUART/USART\nI2C/TWI\nSPI\nDHT and 1-Wire\nUSI\nHow to mimic other, formerly incompatible, and unsupported Protocols?\nAnalog-Digital Converter\nHow does it work?\nMeasuring the Temperature without external Components\nMeasuring Battery Level with the ADC\nAnalog Comparator\nNon-volatile Memories\nFlash\nHow to use the Flash (Program Memory) for Constants?\nHow to use the Flash while executing a Program?\nEEPROM\nFuses\nClock Sources\nLock Bits\nDebugging\nRunning the AVR on a Breadboard\nSaving power\nSleeping\nDynamic Clock Frequency\nTurning off unnecessary Components\nWake-up Sources\nDebugging (with practical examples)\nSimulators\nJTAG\ndebugWIRE\nBonus Chapter: Parallel Task Execution\nAfter completing this course, the successful student will have the experience not only to evaluate existing software but also create implementations that are highly optimized to be deployed on small microcontrollers to squeeze out every quantum of performance and battery life.",
      "target_audience": [
        "Professional Developers curious about various Program Optimizations for Embedded Systems",
        "Embedded System and IoT Engineers looking for tips how to reduce Power Consumption and extend Battery Life for the Arduinoi Platform",
        "Entrepreneurs who want to lauch a product or start-up"
      ]
    },
    {
      "title": "Cloud Computing & Hybrid Cloud vs On-Premise Solutions",
      "url": "https://www.udemy.com/course/cloud-computing-vs-on-premise-infrastructure-solutions/",
      "bio": "Learn the advantages of on-premise, cloud computing & hybrid cloud infrastructure solutions in this beginner's course!",
      "objectives": [
        "An overview of the different types of IT infrastructure",
        "Allocating resources using public and private cloud services as well as some information on cloud networking",
        "How to connect on-premise and cloud solutions to each other",
        "An overview of Service Level Agreements (SLAs) and how they work in relation to on-premise, cloud and hybrid solutions.",
        "A comparison of the different costs to expect when choosing an infrastructure solution",
        "An overview of licensing and data backups",
        "Choosing a cloud provider",
        "Explanations of Software As A Service (SaaS), Infrastructure as a Service (IaaS) and Platform As A Service (PaaS)",
        "Legal considerations",
        "Cloud security solutions",
        "Multi-cloud solutions",
        "Containers"
      ],
      "course_content": {
        "Cloud Computing: Introduction": [
          "Introduction",
          "Infrastructure types",
          "Section 1 Quiz"
        ],
        "Cloud Computing: Choosing a cloud provider (new 2025)": [
          "Choosing a cloud provider",
          "Choosing a cloud provider",
          "Cloud vs hosted servers (VPS)",
          "Switching between cloud solutions"
        ],
        "Cloud Computing: Resources & Networking": [
          "Hot and cold storage (new 2025)",
          "Cloud resource allocation",
          "Cloud networking overview",
          "Section 2 Quiz"
        ],
        "Cloud Computing: On-premise hardware": [
          "On-premise solutions: overview",
          "On-premise resource allocation",
          "On-premise networking overview",
          "Section 3 Quiz"
        ],
        "Cloud Computing: Hybrid solutions": [
          "Hybrid solutions: overview",
          "Connecting cloud & on-premise systems",
          "Section 4 Quiz"
        ],
        "Cloud Applications: Software as a Service (SaaS) - new 2025": [
          "What is a cloud application?",
          "Cloud applications vs hybrid applications"
        ],
        "Cloud Computing: PaaS and IaaS - new 2025": [
          "What is platform as a service?",
          "What is infrastructure as a service?"
        ],
        "Cloud Computing: Service level agreements (SLAs) & cost comparison": [
          "Service level agreements (SLAs)",
          "Cost comparison",
          "Section 5 Quiz"
        ],
        "Cloud computing: Security solutions (new 2025)": [
          "Cloud security overview",
          "Choosing a security solution"
        ],
        "Cloud computing: Multi-cloud solutions (new 2025)": [
          "What is a multi-cloud solution?",
          "Challenges of multi-cloud solutions"
        ]
      },
      "requirements": [
        "To have a basic understanding of a corporate IT environment, i.e. 1-2 years experience"
      ],
      "description": "Role-play now available on this course!\n\n\nOver this course, you'll learn the different types of infrastructure that are available to organisations and the advantages of cloud computing, course topics are as follows:\n\n\n** New sections added for 2025 **\n* Cloud security solutions\n* Multi-cloud solutions\n* Containers\n* Choosing a cloud provider\n* Explanations of Software As A Service (SaaS), Infrastructure as a Service (IaaS) and Platform As A Service (PaaS)\n* Legal considerations\n\n\n* An overview of the different types of IT infrastructure\n* Allocating resources using public and private cloud services as well as some information on cloud networking\n* Some details for on-premise environments and how this would compare to a public or private cloud.\n* An overview of the advantages of using a hybrid solution within your organisation\n* How to connect on-premise and cloud solutions to each other, which is often required even if your company is only using cloud for backups.\n* An overview of Service Level Agreements (SLAs) and how they work in relation to on-premise, cloud and hybrid solutions.\n* A comparison of the different costs to expect when choosing an infrastructure solution\n* An overview of licensing and data backups\n\n\nNote that whilst the contents of this course are intended to provide a basic understanding of IT infrastructure types, specific requirements are unique to each organisation, meaning that you should analyse your own environment carefully before making any large financial decisions and seek professional advice from either the cloud provider of your choice and also any equipment manufacturers, as they can advise on any specifics that are unique to them.",
      "target_audience": [
        "IT Support Technicians that wish to learn more about on-premise, cloud and hybrid infrastructure solutions"
      ]
    },
    {
      "title": "Schneider PLC Tutorial For Beginners With Ladder and SFC",
      "url": "https://www.udemy.com/course/schneider-plc-tutorial-for-beginners-with-ladder-and-sfc/",
      "bio": "Learn Schneider's Legendary Eco Structure Machine Basic Software From Scratch, With Two Programming Languages",
      "objectives": [
        "Schneider Eco Structure Software Quick Download and installation Guide",
        "Schneider PLC Software startup,",
        "Learn 2 PLC languages (LAD&SFC)",
        "PLC hardware configuration settings",
        "Here is your helping hands for Schneider startup",
        "Logic Boosting Simple questions makes sense and Fun",
        "Programming and exploring mandatory function blocks",
        "Application Level Questions (Beginner level)",
        "Memory organization in PLC",
        "Application level Questions (Moderate level)",
        "User Defined Function Block Creation",
        "Process Plant Automation Question (Moderate level)",
        "Fire alarm Automation(Advanced logic Level)",
        "Sequential Flow Chart programming (SFC) or GRAFECET Programming",
        "Cyclic Process Automation using SFC"
      ],
      "course_content": {},
      "requirements": [
        "Basic ON OFF knowledge",
        "A Windows OS PC with normal Spec"
      ],
      "description": "The course Starting From Downloading the Eco Structure software and Building Logic inside your mind From the Scratch, And Ends up as a moderate level PLC Programmer.\nAny one can learn the Course without any pre PLC Knowledge.\nFrom This tutorial any beginner level guys will be able to Self program and test your Schneider PLC program Using Two Different IEC Programming languages [LAD and SFC]\nThis Course Consist of Programming of Schneider TM2 and TM3 Series PLC's. With Robust Simulation Procedures We can see the coding Working as we like.\nLearning the course will be fun and could help you to boost your Logic and Coding Skills.\nIt includes Timers, Counters, Sequencers, Shifting instructions, Arithmetic, Data moving, Logical And program Control instructions.\nAlso You will be able to Create User Defined Function blocks that allows you to do your own specific task.\nBy Practicing the Application level Problems will make the Programming immersive easy and fun.\nProblems and solutions will come at Basic , Moderate and Advanced.\nThe tutorial will make you to find the Realtime Applications of the logic and Function Blocks in the industries, Through Great animation.\nEnding Will be Mastering the SFC language Through Simple Tasks and Application Level Problems with lots of fun.",
      "target_audience": [
        "PLC programmers",
        "Automaton Enginers",
        "Instrumentation Students",
        "Automation Students",
        "Instrumentation engineers",
        "PLC Developers",
        "Schneider PLC programmers"
      ]
    },
    {
      "title": "The Complete Raspberry Pi Bootcamp",
      "url": "https://www.udemy.com/course/raspberry-pi-complete-raspberrypi-bootcamp-python-raspberry-pi/",
      "bio": "The only course you need to learn to Program and become Raspberry Pi developer. Basics, intermediate and Advance Topics",
      "objectives": [
        "Setup the Raspbian operating system to the RPi",
        "Wire up your Raspberry Pi to create a fully functional computer",
        "Use and Learn Python programming language",
        "Be able to build ANY Raspberry Pi Project you want",
        "Build fully-Functional Raspberry Pi Programs and apps for your idea or machine",
        "Understand the latest Raspberry Pi technologies, including Interfacing Advnace modules, Relays, Programming and Simulation",
        "Work as a Raspberry Pi developer",
        "Learn professional Raspberry Pi developer best practices",
        "Write Python code to control the Raspberry Pi hardware",
        "Install the a Python virtual environment",
        "Use the RPi GPIOs as digital input and outputs",
        "Light up LEDs by controlling the Raspberry Pi hardware",
        "Read Signal from sensors and switches by controlling the Raspberry Pi hardware",
        "Use Light Sensor and Motion detector sensor",
        "Learn and use simple Linux commands",
        "Write a Python program to create a simple calculation method and other useful applications",
        "Know Basics of Linux and Python",
        "Choose the right board that fulfills your needs",
        "Differentiate between each of the boards and why one is better than the other",
        "Link Arduino with Raspberry Pi",
        "Protect Your Raspberry Pi using Arduino as Interface between Raspberry and heavy devices",
        "Make A Smart Mirror",
        "Turn Raspberry Pi to an interactive display",
        "Make your own Obstacle Avoiding Robot with Raspberry Pi",
        "Interface Ultrasonic Sensors with Raspberry Pi",
        "Interface IR Sensors with Raspberry Pi",
        "Interface Motors with Raspberry Pi"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Introduction",
          "Getting Started with Raspberry Pi",
          "Qucik Intro To Raspberry Pi World",
          "10 Uses for Raspberry Pi Board",
          "Quiz on Introduction & Getting Started with Raspberry Pi",
          "Very Important Note: Review Process",
          "Different Versions of Raspberry Pi",
          "Raspberry Pi Components",
          "OS Versions Available for Raspberry Pi",
          "Quiz on Introduction & Getting Started with Raspberry Pi",
          "Arduino Vs Raspberry Pi Vs BeagleBone",
          "Course Material Works with any high tech board!",
          "Component List",
          "Quiz on Introduction & Getting Started with Raspberry Pi",
          "Introduction to Raspberry Pi"
        ],
        "Running The Raspberry Pi Board": [
          "What do you need to RunThe Raspberry Pi",
          "Getting OS and Running Raspberry Pi",
          "Setting Up Raspberry Pi for the First Time",
          "Simulating Raspberry Pi",
          "Quiz on Running The Raspberry Pi Board",
          "Setting Up and Running Raspberry Pi"
        ],
        "Raspberry PI Hardware and Starter Kit that can be used with it": [
          "Simple Starter Kit",
          "Raspberry Pi Model B Unboxing",
          "Exploring Raspberry Pi Hardware and Starter Kits"
        ],
        "A Tour inside Raspberry Pi Operating System": [
          "A tour inside Raspberry Pi Operating System",
          "Raspberry Pi Command Line",
          "Updating Software Packages",
          "Quiz on Navigating the Raspberry Pi Operating System",
          "Navigating the Raspberry Pi Operating System"
        ],
        "Control Raspberry Pi Board From another device": [
          "Control Raspberry Pi from another Device using SSH",
          "Control Raspberry Pi from another Device using VNC Server",
          "Assign A fix IP Address for Raspberry Pi Board",
          "Connecting Raspberry Pi to another computer using Network Cable",
          "Quiz on Remote Control of Raspberry Pi",
          "Remote Control of Raspberry Pi"
        ],
        "Control General Purpose Input Output": [
          "Programming GPIO with Python",
          "Python and Your First Code",
          "Installing the Control Library",
          "Quiz on Programming GPIO with Python",
          "Programming GPIO with Python"
        ],
        "Practical Examples": [
          "Example 1 Blinking Led",
          "Example Two Reading Input Values From A Switch",
          "Example Three Running the Led Using LDR",
          "Example Four PIR Motion Detector",
          "Quiz on Practical GPIO Examples",
          "Practical GPIO Projects"
        ],
        "Arduino Vs Raspberry PI Vs PIC Microcontroller": [
          "What is Arduino Raspberry Pi and PIC Microcontroller",
          "Quick summary of the main differences",
          "Hardware: Power and Connectivity",
          "Quiz on Comparing Microcontrollers and Microcomputers",
          "Hardware: IO Pins Storage and USB",
          "Software Comaprison",
          "Expanding Onward Capabilities",
          "How to decide",
          "Quiz on Comparing Microcontrollers and Microcomputers",
          "Comparing Microcontrollers and Microcomputers"
        ],
        "Connect and Interface Raspberry Pi with Arduino": [
          "Raspberry Pi Connections",
          "Raspberry Pi Configuration and Code",
          "Arduino Configuration",
          "Quiz on Interfacing Raspberry Pi with Arduino",
          "Arduino Raspberry Pi Connection",
          "Finishing Configuration",
          "Completing Python Setup",
          "Final Step",
          "Quiz on Interfacing Raspberry Pi with Arduino",
          "Interfacing Raspberry Pi with Arduino"
        ],
        "Make a Smart Mirror Using Raspberry Pi": [
          "Download Raspian Operating System for Raspberry Pi",
          "Install Raspbian Operating System on the SD Card",
          "Creating a Smart Mirror with Raspberry Pi"
        ]
      },
      "requirements": [
        "A Raspberry Pi, any version (Optional)",
        "A Windows, Mac or Linux computer",
        "A LED Resistors",
        "A breadboard and jumper wires",
        "Access to the Internet",
        "Basic Knowledge of electronics",
        "An open mind to accept the fact that there is a difference"
      ],
      "description": "Master Raspberry Pi Development: From Beginner to Advanced Developer\nUnlock the Potential of Raspberry Pi and Transform Your Ideas into Reality\nCourse Overview\n\"Master Raspberry Pi Development: From Beginner to Advanced Developer\" is the ultimate guide for anyone looking to dive into the world of Raspberry Pi programming and development. Whether you are a complete novice or have some experience, this course will equip you with the skills needed to master Raspberry Pi and leverage its capabilities for innovative projects and real-world applications.\nDuration: 4.5 Hours of Full HD Content\nLectures: Over 70 detailed lectures\nWhy Choose This Course?\nComprehensive Curriculum: From basics to advanced programming and interfacing, cover every aspect needed to become proficient in Raspberry Pi development.\nHands-On Examples: Engage with practical examples that demonstrate real-world applications of Raspberry Pi, enhancing your learning experience.\nNo Prior Experience Required: Start your journey with zero knowledge. This course introduces you to the basics before progressing to more complex topics.\nCourse Highlights\nIntroduction to Raspberry Pi: Understand the capabilities of this credit card-sized computer as a powerful tool for development.\nComparative Analysis: Arduino vs. Raspberry PI vs. PIC Microcontroller - Learn which board suits your needs best.\nInterfacing Raspberry Pi with Arduino: Discover the synergies between Raspberry Pi and Arduino to create more complex systems.\nCreating a Smart Mirror: Step-by-step guide on building a smart mirror that displays news, weather updates, and more.\nBuilding an Obstacle Avoiding Robot: Learn how to construct a robot that navigates obstacles, incorporating sensors and motor control.\nWhat You Will Learn\nSet up and configure Raspberry Pi for various uses, from a simple computer to a complex control system.\nProgramming in Python 3: Write scripts and programs to control and automate your Raspberry Pi.\nUsing GPIO Pins: Master the use of General Purpose Input/Output pins for hardware projects.\nSimulate Raspberry Pi: Don't have the board? No problem! Learn through simulation techniques.\nInternet of Things (IoT): Step into the world of IoT with projects that connect your Raspberry Pi to the internet.\nIdeal for\nHobbyists: Looking to explore new technology and build personal projects.\nCareer Changers: Gain valuable skills in a growing field of technology and development.\nStudents and Educators: Enhance learning or teaching with interactive and engaging technology projects.\nTestimonials\n\"Taking this course has been a game changer for me. I was able to turn my idea into a funded project on Kickstarter thanks to the skills I learned here!\" - Jamie L.\n\"As a complete beginner, I appreciated how the course started from the fundamentals. The step-by-step projects were not only fun but very informative.\" - Samira K.\n\"I had some programming background but no hardware experience. This course made it easy and exciting to combine both into creating real-world applications.\" - Derek W.\nEnroll Now\nJoin thousands of students who have transformed their skills with our comprehensive Raspberry Pi development course. Start building and programming today and make your tech ideas a reality!\nUnlock your potential and embrace the world of microcomputing and development. Enroll now and start your journey into the innovative world of Raspberry Pi!\nEnroll Now - Start Learning Today!\nNote: No prior experience with Linux, Python, or hardware is necessary. This course includes all the foundational knowledge you'll need, plus advanced tips and techniques for those looking to",
      "target_audience": [
        "Arduino Geeks",
        "Raspberry Pi Geeks",
        "Electronics Geeks",
        "Anyone Interested in Learning New Things about Arduino",
        "Anyone Interested in Learning New Things about Raspberry Pi",
        "Anyone Interested in Learning How to protect Raspberry Pi using Arduino"
      ]
    },
    {
      "title": "All about Arduino Wireless and the IoT",
      "url": "https://www.udemy.com/course/all-about-arduino-wireless/",
      "bio": "A complete course on using your Arduino to communicate data wirelessly",
      "objectives": [
        "Use Arduino and ESP8266 to transmit and receive data wirelessly over WiFi, and Radio",
        "Configure and program various transceivers like the Nrf2401, 315Mhz, and LoRa",
        "Protoype basic wireless hardware with Arduino and the ESP8266",
        "Create Datalogs and files using an embedded SD card, and software based datalogging in Putty, Teraterm and Android",
        "Learn how to properly use the send and receive API's to pass arrays and data structures wirelessly",
        "Use various 3rd party sites for Data Visualization and conditional SMS and Email alerts"
      ],
      "course_content": {},
      "requirements": [
        "Have basic knowledge of Arduino",
        "Basic prototyping skills with Arduino and ability to connect jumpers and use a breadboard as needed",
        "Basic Windows PC, UNIX, or MAC Knowledge"
      ],
      "description": "This course is a strong foundation for understanding IoT utilizing wireless Arduino communications.  We will be using both the Arduino and the ESP8266 for wiFi and radio functions.  This course will give students an good understanding of IoT and wireless communications utilizing Arduino and the ESP8266 with inexpensive wireless transmitters, receivers and transceivers. We will go over most of the popular and least expensive methods, tools, and associated hardware to pass data wirelessly between devices and over the web and through the cloud. Students will learn how to configure, develop, and program these popular and cheap wireless devices to trigger an event or pass data between devices. Students will be able to thoroughly grasp the concepts of transmitting data around the web:\n*ESP8266 to the web\n*Between Arduinos\n* Arduino data to a PC\n* Arduino data to the \"Cloud\"\n* Arduino to Putty and Teraterm\n\n* Arduino to SD Card for Datalogging\n* Arduino to ThingSpeak, Google, IFTTT, Losant, Ubidots and others for for graphics and conditional\ncontrol Flow applications.\n\n\n\n\nHardware and Tools utilized in this course:\n\n---------------------------------------------------------------\n315 MHz transmitters\nnRF2401+ (Nordic radio Transceivers)\nESP8266 (Model 12-E)\nDHT11 Environmental Monitor\nBreadboard\nDuPont Jumpers\nEthernet Shield based on the popular WIZnet 5100 chip\nStudents will learn how to manipulate each of the wireless libraries, functions, and protocols to meet the requirements of a wireless network. we will cover not only simple wireless over the \"air\" , Students will also acquire the knowledge needed to use wireless Wifi chips and Ethernet to pass data to the web with, and without, a computer.",
      "target_audience": [
        "Engineers interested in IoT applications",
        "Hobbyists who want to \"make\" and  wish to send data wirelessly with Arduino",
        "Students enrolled in Engineering who are  interested in wireless communications with Arduino",
        "Arduino enthusiasts looking to add IoT and wireless expertise to their embedded toolkit",
        "Anyone wanting to learn the basics of IoT"
      ]
    },
    {
      "title": "FPGA Design with MATLAB & Simulink",
      "url": "https://www.udemy.com/course/fpga-design-with-matlab-simulink/",
      "bio": "FPGA Design approach with System Generator of MATLAB/Simulink & HDL Coder, Course introduced the Complete Design Flow",
      "objectives": [
        "FPGA Development with Matlab and Simulink Tool.",
        "Creating Projects with System Generator and HDL coder",
        "Implementing FIR and IIR Filter on FPGA from System Generator",
        "Implementation of OFDM modulation on FPGA",
        "Zynq FPGA Design with Matlab/Simulink (System Generator)",
        "LMS filter design with HDL coder from Matlab"
      ],
      "course_content": {},
      "requirements": [
        "Basic Idea of Matlab and Simulink",
        "FPGA Design Basics",
        "Idea of FPGA Design with Xilinx ISE and VIVADO",
        "Idea of Hardware Description Language"
      ],
      "description": "This Course will let you know about \"How to Design FPGA based Signal Processing Projects on MATLAB/Simulink\".\nThis course is on Designing FPGA based Signal Processing Projects with MATLAB/Simulink and FPGA Design Tool (Xilinx VIVADO/ISE), we are going to use Xilinx System Generator (interface between MATLAB/Simulink and VIVADO/ISE) and HDL Coder. From this two tools we can design our projects on traditional MATLAB/Sumilink design flow; using Blocks and integrating blocks in Simulink or using MATLAB codes and finally converting this two types of design in to HDL or into Bitstream so we can program FPGA from MATLAB/Simulink or VIVADO/ISE.\nWe have session on FIR,IIR, LMS Filter Design and OFDM Modulation algorithm implementation on FPGA.\nMATLAB & Simulink are the best tools for Signal Processing Projects, while FPGA are best hardware platform for such type of Signal Processing Projects cause of it's flexibility and processing capabilities.",
      "target_audience": [
        "Engineering Enthusiast",
        "Computer Science",
        "FPGA Design Enthusiast"
      ]
    },
    {
      "title": "FPGA Embedded Design, Part 4 - Microprocessor Design",
      "url": "https://www.udemy.com/course/fpga-embedded-design-cpu/",
      "bio": "Learn FPGA embedded application design starting with the basics and leaving with your own CPU.",
      "objectives": [
        "How a CPU works.",
        "How to design a CPU core of your own.",
        "How to design an Instruction Set Architecture",
        "How to design a CPU core in Verilog.",
        "How to synthesize a CPU core for Altera and Xilinx FPGAs."
      ],
      "course_content": {},
      "requirements": [
        "The Verilog Hardware Description Language.",
        "FPGA Design.",
        "Knowledge of any Electronic Design Automation Tool for FPGAs."
      ],
      "description": "It's time to take on a Challenge! How does designing a CPU sound?\nIn this fourth part of the FPGA Embedded Design series, we'll design a CPU from scratch to finally get it up and running on several platforms.\nWe'll write most of the code in the Vivado Design Suite, but you'll have the chance to see it working as well in Quartus Prime, EDA Playground or LabsLand, so you can follow along with your favorite tools. The FPGA boards we'll use are the BASYS3, by Digilent (with a Xilinx FPGA), and the DE0-CV from Terasic (with an Intel FPGA).\nThis course consists of three main parts:\nFoundations of Computer Architecture, where we'll cover the essentials of CPU design and jargon.\nDesign of our own CPU, where we'll make several design decisions to come up with a soft processor that meets our needs.\nHands-On Development, where we'll write the code, simulate and finally get our CPU into an FPGA board. No purchases are required for this part, but it sure helps to have your own board to follow along, and keep on tinkering in the future with your new soft processor.\nWhat are you waiting for? Let's have fun designing a CPU!!!",
      "target_audience": [
        "Embedded designers who want to dive deeper into Soft-Processor design.",
        "Intermediate FPGA enthusiasts who are curious about CPU design.",
        "Anyone are taking the FPGA Embedded Design series by Closure Labs."
      ]
    },
    {
      "title": "Node-RED and ESP32 Project",
      "url": "https://www.udemy.com/course/nodered-esp32/",
      "bio": "Design and build an automated control system using Node-RED and the ESP32",
      "objectives": [
        "Node-RED, the lightweight graphical programming tool.",
        "ESP32, the powerful low-cost microcontroller with Wifi that you can program with the Arduino IDE.",
        "MQTT Mosquitto broker, for reliable messaging between the ESP32 and Node-RED.",
        "Use any Raspberry Pi as a host for Node-RED and the MQTT Mosquitto broker.",
        "How to combine Node-RED, MQTT, the Raspberry Pi, and the ESP32 to create a complete automated control application.",
        "Use Javascript inside Node-RED to process sensor inputs and calculate actions."
      ],
      "course_content": {},
      "requirements": [
        "Be familiar with the Arduino and ESP32.",
        "Be familiar with Raspberry Pi.",
        "Be familiar with Javascript.",
        "Be comfortable on the command line.",
        "Be able to assemble simple circuits.",
        "Not be afraid to make a mistake (and fix it)."
      ],
      "description": "Updated December 2022 to support Node-Red version 3\nIn December 2022, we added a new section with eight lectures that cover Node-RED version 3.\nWith these lectures, you will learn how to upgrade your Node-RED instance to version 3 and use the most important new and updated features.\nUpdated June 2022 to support Node-Red version 2.2.2+ and Node.js 16.\nMore details about this update: We have added ten new lectures that show you how to update Node-Red to version 2.2.2, and Node.js to version 16, as well as how to use several of the new nodes that come with Node-Red 2.\nThere's also a lecture showing you how to complete this project without having to set up an actual terrarium so that you can learn without the mess.\nThis course teaches you how to design and build an automated control system using Node-RED and the ESP32.\nThis course will guide you through the construction of an automated control system. The deliverable is a Terrarium controller.\nAlong the way, you will learn a great deal about useful technologies such as the Node-Red programming environment and MQTT.\nThis course is perfect for makers familiar with the ESP32 and interested in learning how to use it alongside Node-RED.\nNode-RED is a lightweight graphical programming tool. You can use it to join various hardware and software components and create applications such as the automated terrarium controller in this course.\nNode-RED is used in a range of settings. Makers create home automation applications, and organisations use it to automate their factory floors, among many other possibilities.\nThe ESP32 is a powerful low-cost microcontroller with built-in Wi-Fi that we can program with the familiar Arduino IDE. Its \"call to fame\" is that it makes it easy for anyone familiar with the Arduino to leverage their knowledge and create gadgets that need more memory and processing power than what the Arduino Uno can provide, in addition to Wifi and Bluetooth. All this at a lower price point.",
      "target_audience": [
        "Anyone familiar with the Arduino, ESP32 and Raspberry Pi.",
        "Recent graduates of ESP32 for Arduino Makers.",
        "Recent graduates of Raspberry Pi Full Stack.",
        "Anyone interested in learning how to create a complete project using Node-RED, ESP32 and MQTT."
      ]
    },
    {
      "title": "Video Processing with FPGA",
      "url": "https://www.udemy.com/course/video-processing-with-fpga/",
      "bio": "Implementing different Computer Vision Algorithm on Xilinx Zynq FPGA with VIVADO High Level Synthesis & SDK",
      "objectives": [
        "Implement different Computer Vision algorithm for Video Processing",
        "Creating IP from the VIVADO High Level Synthesis",
        "IP integration and configuration with Xilinx VIVADO",
        "Xilinx SDK Application Development",
        "Migrating the OpenCV algorithm on XfOpenCV",
        "Simulating & Generating xfOpenCV codes in the VIVADO HLS",
        "Integrating TPG, VDMA and Writing application for this blocks",
        "Vitis HLS and OpenCV installation Session for 2020.2 or later"
      ],
      "course_content": {
        "Introduction to HLS, VIVADO IP Integrator and SDK": [
          "VIVADO High Level Synthesis [HLS] Overview",
          "Overview of Xilinx VIVADO , IP and Zynq FPGA Architecture",
          "AXI Protocol Overview"
        ],
        "Section 1_2 TPG,VDMA and Video Processing Platform Development": [
          "TPG Overview",
          "Lab 1 Part I: TPG Project Development LAB on VIVADO",
          "Lab 1 Part II: TPG Development [SDK Configuration with Zynq PS]",
          "Demo: TPG Implementation on ZedBoard FPGA",
          "TPG and VDMA Overview",
          "Lab 2 Part I: TPG & VDMA- VIVADO IP Block Design",
          "Lab 2 Part II: TPG & VDMA- SDK Application Development",
          "Demo: TPG & VDMA Project Implementation on ZedBoard"
        ],
        "Section 2_1 Sobel Edge Detection with FPGA": [
          "Sobel Edge Detection-HLS & OpenCV Algorithm",
          "Lab 1 Sobel IP Design on VIVADO HLS",
          "Lab 2 VIVADO IP integration of Sobel Edge IP on Streaming Mode",
          "Sobel Edge Demonstration on Zybo FPGA",
          "Sobel Edge Detection with Zybo Z7-10-Lab Session",
          "Sobel Edge Detection with Zybo Z7-10 [Demo]",
          "Sobel Edge Detection streaming design Zybo Z7-10",
          "Sobel Edge Detection with ZedBoard and FMC HDMI"
        ],
        "Section 2_2 Dilation & Histogram Equalize implementation on HLS": [
          "Histogram Equalize Overview"
        ],
        "Section 3: Fast Corner & Harrish Corner Detection": [
          "Fast Corner Detection Algorithm Overview",
          "Lab 31: Fast Corner Algorithm HLS Synthesis, C Simulation & Implementation",
          "Harrish Corner Overview and Lab Intro"
        ],
        "Porting xfOpenCV into HLS": [
          "Porting xfOpenCV Harrish Corner into HLS"
        ],
        "Video Mixer feature implementation on Zynq 7000 FPGA": [
          "Lab: Video Mixer feature implementation on Zybo Z7-10 board",
          "Lab: 2 TPG and Video Mixer Design with ZedBoard FPGA",
          "Lab: Video Mixer, 2 TPG and HDMI implementation on ZedBoard FPGA"
        ],
        "Vitis HLS 2020.2 or later - Brief Session": [
          "Vitis HLS - Installation and LAB Session"
        ],
        "Bonus Section": [
          "What Next?",
          "Reference Links"
        ]
      },
      "requirements": [
        "Basics of FPGA Design",
        "High Level Synthesis Basics",
        "PC with installed VIVADO, HLS and SDK [we will also show the steps for installation]"
      ],
      "description": "This Course is on implementing different Video Processing algorithm on FPGA. We implement the algorithm on High Level Synthesis [HLS], simulate it with the image input, generate & export IP from the HLS. The HLS IP is integrated with the necessary video processing pipeline [block design] and implemented on the FPGA Device.\nWe have \"Implemented Sobel Edge Detection, Dilation, Histogram Equalize, Fast Corner like algorithm\" on HLS and then FPGA. For the debugging the algorithm on the FPGA, we have initialized the Test Pattern Generator [TPG] IP and Video DMA [VDMA] for processing the image streams on the DDR with the Processing System involvement.\nAfter Completing this course you will be able to:\nUtilized the HLS Video Processing Library and Implement as well as Simulate different OpenCV Algorithm on HLS\nIntegrating the HLS IP with Video Processing Pipeline with TPG and VDMA and Implementing on the FPGA Device.\nImplementing the XfOpenCV [SDSoC] Library on HLS for Computer Vision\nMigrating the OpenCV algorithm into XfOpenCV",
      "target_audience": [
        "Electrical Engineering Enthusiast",
        "Computer Science Enthusiast",
        "FPGA Design Professional",
        "Enthusiast of FPGA Design"
      ]
    },
    {
      "title": "Learn Siemens S7-1200 PLC & HMI from Scratch using TIA",
      "url": "https://www.udemy.com/course/learn-siemens-s7-1200-plc-from-scratch-using-tia/",
      "bio": "Learn wiring, programming and Installation of S7-1200 PLC & HMI with Siemens TIA- Total Integrated Automation Software",
      "objectives": [
        "Learn how to communicate PLC with PC using Siemens TIA",
        "Learn how to convert standard circuits to PLC Circuits",
        "Learn fundamentals commands of Siemens S7-1200 in TIA"
      ],
      "course_content": {
        "Introduction to the Hardware- S7-1200 PLC": [
          "S7-1200 PLC - PLC Hardware",
          "Course resources",
          "S7-1200 PLC - How Processor Works?",
          "S7-1200 PLC - PLC memory and Wiring the PLC",
          "S7-1200 PLC - PLC Input/Output Wiring Types",
          "Converting Schematic to Ladder Diagram",
          "Connect with me on LinkedIn",
          "Join our Telegram group",
          "Test your Skills- Bit Level Instructions",
          "Join our student community",
          "Updates in Industrial Internet of Things"
        ],
        "Introduction to Siemens TIA- Total Integrated Automation": [
          "Introduction to Siemens TIA - Features (LIVE Demo)",
          "Introduction to Siemens TIA - Ethernet communication of PLC with PC",
          "Test your Skills- TIA"
        ],
        "Understanding General Elements of TIA": [
          "Understanding the networks and branches"
        ],
        "Understanding Bit Logic Operations in TIA": [
          "NO, NC & OUT Commands",
          "How to Simulate PLC and HMI without hardware",
          "Exercise Example",
          "Exercise Example (2)",
          "Test your Skills- Bit Logic Operations (1)",
          "SET & RESET Command for Latching/Unlatching",
          "Test your Skills- Bit Logic Operations (2)",
          "SET & RESET Field Command for Latching/Unlatching",
          "Exercise Example",
          "Understanding Rising and Falling Edge",
          "Test your Skills- Bit Logic Operations (3)",
          "Factory Automation Example on Bit Logic Operations"
        ],
        "Understanding Timer operations in TIA": [
          "Understanding Timer Pulse",
          "Exercise Example",
          "Test your Skills (Timer Pulse)",
          "Understanding Timer ON Delay",
          "Understanding Timer OFF Delay",
          "TONR - Retentive On Delay Timer",
          "Test your Skills (TON, TOFF TONR)",
          "Customizing parameters of Timers via Data Block",
          "Test your Skills (Timers via Data Block)",
          "Factory Automation Example on Timers!"
        ],
        "Understanding Counter operations in TIA": [
          "Understanding Up Counter",
          "Understanding Down Counter",
          "Understanding Up/Down Counter",
          "Test your Skills (Counters)",
          "Factory Automation Example on Counters"
        ],
        "Understanding Comparative operations in TIA": [
          "Understanding Comparator operators - Greater, Less, Equal",
          "Test your Skills (Comparative Operations)"
        ],
        "Understanding Math operations in TIA": [
          "Understanding basic mathematical operations like Add, Sub, Mul and divide",
          "Exercise Example",
          "Test your Skills (Math operations )"
        ],
        "Understanding MOVE operations in TIA": [
          "Move, Fill Move and Block Move Instructions",
          "Test your Skills (Move)",
          "Factory Automation Example on Comparator & MOV operators"
        ],
        "Understanding various Program Control operations in TIA": [
          "Understanding Jump and Label instruction",
          "Test your Skills (Jump)"
        ]
      },
      "requirements": [
        "Basic Fundamentals of Electronics",
        "Eagerness to learn PLC in enthusiastic environment"
      ],
      "description": "This course is specifically for the people who want to kick start their training in Siemens PLC & HMI. We are using Siemens S7-1200 PLC and KTP 400 HMI along with Siemens TIA- Total Integrated Automation software for making tutorials. You will find high-quality video tutorials along with a copy of the presentation and PLC code used in the course.\nWe are teaching programming in Ladder Logic with a touch of FBD- Functional block Diagram. Later in the HMI section, we have interfaced Siemens S7-1200 PLC with HMI to learn monitoring and control of PLC parameters.\nFollowing is the pattern of the course:\nIntroduction lecture of the command\nExercise Example of the command\nFactory I/O Industrial Application Example in real 3D Dynamics environment\nQuiz to evaluate your performance\nCopy of presentation and PLC code (if applicable) with every lecture\nAfter learning this course, you would be able to install and program Siemens PLC and HMI in your project or industrial application.\nThis course covers the basic fundamentals commands of PLC.\nIf you buy the course today, the updates would be included in the course for free.\nOnce you finish with this course and would like to learn more advanced instructions and interfacing with IO-Link technology then check out the Siemens S7-1200 Advanced course with more in-depth knowledge.",
      "target_audience": [
        "Engineering Students",
        "Working Engineers - Maintenance, Production or Supervisors",
        "Industrialist"
      ]
    },
    {
      "title": "ABB PLC Programming from Scratch to expert (PLC-SCADA-4)",
      "url": "https://www.udemy.com/course/learn-abb-plc-programming-from-scratch-to-expert-level/",
      "bio": "ABB PLC Programming on CoDeSys software",
      "objectives": [
        "Basics of ABB PLC.",
        "Basics of Ladder diagram.",
        "Latching and Unlatching.",
        "Interlocking, Timer and Counter.",
        "Comparison Operators(GT,LT,GE,LE,EQ,NE).",
        "Arithmetic Operators.",
        "Program or Sequence Control Instruction.",
        "Selection Operators.",
        "Trigger.",
        "Bi-stable Function Block.",
        "Visualization.",
        "You will be enriched with the latest technical knowledge related with the industrial automation.",
        "Students can establish their career in various manufacturing industries like Oil and Gas, Water/Waste Water Treatment, food & Beverages, Power Plants, Manufacturing Process, Chemicals and Pharmaceutical Industries, Power Generation, Automotive, Fabricated Metals, Packaging Process, Metals and Mining’s Aerospace, etc."
      ],
      "course_content": {
        "Overview of PLC": [
          "Introduction to PLC",
          "Block Diagram of PLC",
          "Working Principle of PLC (Scan Time and Scan Cycle of PLC)",
          "What is Sink and Source concept?",
          "PNP and NPN wiring of sensor with PLC (Example Sink and Source Input)"
        ],
        "Basics of ABB PLC": [
          "Introduction to ABB PLC",
          "Functions and features of ABB PLC",
          "Software Interface of CoDeSys",
          "Addressing Format in ABB PLC",
          "Data types in ABB PLC"
        ],
        "Basics of Ladder Diagram": [
          "Bit Logics (NO Type)",
          "Bit Logics (NC Type and Output Coil)",
          "Basic Programming Rule 1",
          "Basic Programming Rule 2",
          "Basic Programming Rule 3",
          "Basic Programming Rule 4",
          "Basic Programming Rule 5",
          "Basic Programming Rule 6",
          "First program in CoDeSys",
          "Problem 1 With Solution",
          "Problem 2 With Solution",
          "Problem 3 With Solution",
          "Problem 4 With Solution",
          "Ladder Logic Program for Boolean Expression",
          "Logic Gates (AND & OR Gate)",
          "Logic Gates (AND & OR Gate) in Software",
          "Logic Gates (NAND & NOR Gate)",
          "Logic Gates (NAND & NOR Gate) in Software",
          "Logic Gates (EX-OR & EX-NOR Gate)",
          "Logic Gates (EX-OR & EX-NOR Gate) in Software"
        ],
        "Latching and Unlatching": [
          "Introduction to Latching (Holding) and Unlatching Concept",
          "Latching (Holding) and Unlatching Concept in Software",
          "Latching and Unlatching Problem-1",
          "Latching and Unlatching Problem-1 Solution Explanation",
          "Latching and Unlatching Problem-1 Solution in Software",
          "Introduction of Set and Reset Instruction",
          "Set and Reset Instruction in Software"
        ],
        "Interlocking": [
          "Interlocking Concept",
          "Interlocking Concept in Software"
        ],
        "Timer": [
          "Introduction to Timer",
          "Different Timer and Time Data types in CoDeSys",
          "ON Delay Timer(TON) Part-1",
          "ON Delay Timer(TON) Part-2",
          "OFF Delay Timer(TOF) Part-1",
          "OFF Delay Timer(TOF) Part-2",
          "Pulse Timer(TP)",
          "Problem-1 with Explanation",
          "Problem-1 Solution in Software",
          "Problem-2 with Explanation",
          "Problem-2 Solution in Software",
          "Problem-3 (Traffic Light)",
          "Problem-3 Solution Explanation(with three timers)",
          "Problem-3 Solution in Software",
          "How to create Flickr Bits?"
        ],
        "Counter": [
          "Introduction of Counter",
          "UP Counter(CTU) Part-1",
          "UP Counter(CTU) Part-2",
          "Down Counter Part-1",
          "Down Counter Part-2",
          "Down Counter Part-3",
          "UP Down Counter Part-1",
          "UP Down Counter Part-2"
        ],
        "Comparison Operators(GT,LT,GE,LE,EQ,NE)": [
          "Comparison Operator Part-1",
          "Comparison Operator Part-2",
          "Problem-1(traffic light problem with single timer) Part-1",
          "Problem-(traffic light problem with single timer) Part-2"
        ],
        "Arithmetic Operators": [
          "Introduction of Arithmetic operators and Addition(ADD)",
          "Subtraction(SUB) And Multiplication(MUL)",
          "Division(DIV) and Modulo Division(MOD)",
          "MOVE Operator"
        ],
        "Program or Sequence Control Instruction": [
          "Introduction of program or sequence control function",
          "Jump and Label Part-1",
          "Jump and Label Part-2"
        ]
      },
      "requirements": [
        "Students are supposed to be familiar with Desktop/Laptop.",
        "No other prerequisites for this course, Because instructor will teach everything from scratch."
      ],
      "description": "Today, PLC is being used in every process and manufacturing industries, apart from knowing the wires and connections, anyone should know the way to do PLC programs.\nPLC-Programmable logic controller is an industrial solid-state computer that monitors input and output, and makes logic-based decisions for automated processes or machines.   ABB automation tools provide solutions with high performance and flexibility to effectively deploy with various industries and applications such as water, building infrastructure, Data Center, renewable energy, machinery automation, material handling, marine and others.   CoDeSys is a complete development environment for your PLC. (CoDeSys stands for Controlled Development System).CoDeSys puts a simple approach to the powerful IEC language at the disposal of the PLC programmer. Use of the editors and debugging functions is based upon the proven development program environments of advanced programming languages.And this course is covering complete programming of PLC Model PM-554-T of ABB PLC.   After doing this course, you can easily program the other PLC series.This software is used for all the PLC series. And the instructions remain the same.   This course will teach you step by step How to make a Ladder Logics & Programming to any industrial process Control.   We have made explanation by Real Time LIVE Camera & Designing Software to understand the concept clearly.\n\n\nNOTE: This course is not short an summary course, this course is detailed course. All topics are covered in it, from scratch. You can understand this course even you don't know about PLC . If you are working in this field, you can enhance your knowledge from this course.\n\n\nFollowing is the brief information about the course:\nIntroduction of PLC.\nFunctions and Features of PLC.\nWhat is Sink and Source concept?   Working Principle of PLC (Scan Time and Scan Cycle of PLC).    Wiring Connection and Communication of PLC.\nBit Logic with Interlocking and Holding Concept.\nTimer, Counter, Compareinstruction, Math instructions, Move instructions, Program Control instructions,Selection Operators and Trigger etc.\nVisualization in CoDeSys Software.   And many more instructions are covering in course.\nProblems with Solution (Industrial Level).",
      "target_audience": [
        "Students who are pursuing or having Masters/ Bachelor’s Degree /Diploma in EC/EE/EEE/EI Branches.",
        "Working Professionals are also invited to join this course to enhance their knowledge in Industrial Automation.",
        "Maintenance Engineers.",
        "Application Engineers.",
        "PLC Programmers."
      ]
    },
    {
      "title": "3D printer programming using G-Code",
      "url": "https://www.udemy.com/course/3d-printer-programming-using-g-code/",
      "bio": "Learn the programming language that 3D printers read - solve issues, split and join G Code files and much more!",
      "objectives": [
        "Have a full understanding of the G-Code language that 3D printers read",
        "Split and Join programs so parts can be printed at separate times",
        "Problem shoot issues at the program level",
        "Become an expert with your 3D printer"
      ],
      "course_content": {},
      "requirements": [
        "3D printer"
      ],
      "description": "Do you own a 3D printer and want to become an expert?\nMaybe your printer is not working as you expect and need to be able to read the gcode file to check for errors when your slicer program writes the file.\nTo have a true understanding of how 3D printers work you need to understand the language that they use.\nSlicer programs can make mistakes when outputting the code, but without being able to read G Code file these small issues could takes weeks to resolve.\nIs it a hardware issue? a model issue? or did the program just miss the code that turns on the heated bed?\nIn this course you will learn\nReading and writing the G-Code file\nThe coordinate system that 3D printers use to produce parts\nMoving the print nozzle with G0, G1, G2 and G3\nAbsolute v Incremental programming\nChanging the printer from metric to imperial\nAll the codes to control your printer, from setting the temperature of the bed to controlling the fans RPM\nSplitting programs into 2 or more separate files that can be run at different times\nJoining programs\nProblem solving\nand much, much more!\n\n\n3D printers use a simplified version of the CNC geometric programming language G-Code.\nI have been teaching this language in an industrial environment for over 20 years and now you can learn from my experience is this easy to follow course on how your printer reads commands from your slicer STL.",
      "target_audience": [
        "Printer owners that are looking to enhance their knowledge of the language it reads",
        "Solve issues quickly by deciphering the commands that your 3D printer reads"
      ]
    },
    {
      "title": "8051 Microcontroller Architecture",
      "url": "https://www.udemy.com/course/8051-architecture-bharat-acharya/",
      "bio": "8051 Microcontroller Architecture, Pins, Flags & Memory Organization",
      "objectives": [
        "8051 Pin Diagram",
        "8051 Architecture",
        "8051 PSW Flag Register",
        "8051 Memory Organization",
        "8051 Internal RAM",
        "8051 SFRs Special Function Registers"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to 8051 microcontroller",
          "Pin Diagram of 8051",
          "Architecture of 8051",
          "PSW - Flag Register of 8051",
          "Memory Organisation (ROM)",
          "Structure of Internal RAM",
          "Introduction to SFRs Special Function Registers",
          "Moving forward..."
        ]
      },
      "requirements": [
        "Nothing at all. Just a will to learn!"
      ],
      "description": "Welcome to our new course on 8051 Microcontroller\n\n\nCourse topics\n\n\n1) Introduction to 8051 Microcontroller\nYou will learn the basics of a microcontroller and how is it different from a microprocessor. You will be introduced to the various aspects of 8051 processor, its internal RAM and ROM, and its I/O components along with their practical implementation.\n\n\n2) Pin Diagram of 8051\nYou will get a detailed explanation of every pin of 8051. Right from its clock input, its power supply, address-data bus, control signals, timer inputs, serial port, parallel ports etc.\n\n\n3) Architecture of 8051\nYou will get a comprehensive explanation of the architecture, ALU, data registers, address registers, internal memory addresses, flag register, I/O port latches etc.\n\n\n4) PSW – Flag Register\nEvery flag with its use and effect by arithmetic and logic operations. Deep insights into signed and unsigned number systems, RAM banks and signed overflow. Umpteen numerical examples will be discussued to make the concept crystal clear for you.\n\n\n\n\n5) Memory Organization (ROM)\n8051 can work with only internal ROM, only external ROM or even both. You will learn how to configure the system in each of these options.\n\n\n6) Internal RAM organization\nDetailed understanding of the internal RAM, its register banks, bit addressable area, general purpose area and stack implementation.\n\n\n7) SFRs – Special Function Registers\nYou will learn what addresses are allotted to SFRs and the amazing reasons behind them. You will also learn the bit addresses of the SFRs.\n\n\n8) Your next step…\nYour next step will be to move into learning addressing modes of 8051 and subsequently dive into the vast instruction set. The more you understand instructions, the better you will write programs of 8051 microcontroller.",
      "target_audience": [
        "Engineering students.",
        "Embedded system developers"
      ]
    },
    {
      "title": "Fire alarm system online training with NFPA codes.",
      "url": "https://www.udemy.com/course/fire-alarm-system/",
      "bio": "Everything of fire alarm system from fire alarm panels, detectors, modules, battery requirement with NFPA guidelines",
      "objectives": [
        "How fire alarm system works ?",
        "NFPA 72 codes and standard related to fire alarm system.",
        "Types of fire alarm systems",
        "What is fire alarm panels, fire alarm repeater panels, smoke detectors, fire alarm interfacing modules, fire alarm sounders etc. ?",
        "Few important building systems that must be interfaced with the building fire alarm system."
      ],
      "course_content": {
        "Fundamentals of Fire alarm system": [
          "What is fire alarm system and it's purpose ?",
          "Types of fire alarm system",
          "What is detector ?",
          "What is Alarm verification feature ?",
          "What is AHJ or Authority having jurisdiction ?",
          "What is Annuciator ?",
          "What is an Alarm signal ?",
          "What is Pre-Alarm Signal ?",
          "What is Supervisory signal ?",
          "What is Trouble signal ?",
          "What is Notification Appliance ?",
          "What is a fire alarm zone ?",
          "Which alarm signal is having the highest priority ?",
          "What is Fire alarm system ?"
        ],
        "Circuits and Pathways": [
          "Fire alarm circuits",
          "Power & Non Power limited fire alarm circuits",
          "Circuit Pathways (Class A & Class B Type)",
          "Circuits and Pathways",
          "Fire Alarm System Circuits and Pathways as per NFPA 72"
        ],
        "Fire Alarm System Cables, Panels and Components": [
          "Types of fire alarm cables",
          "Fire alarm panel",
          "Remote Annuciators or Repeater Panels (Active and Passive)",
          "Loop Cards",
          "Notification Appliance Circuit",
          "Firemen Telephone",
          "Battery Requirement (Second power source)",
          "Fire Alarm System Cables, Panels, and Components"
        ],
        "SLC Initiating Devices": [
          "What is smoke detector and their types ?",
          "Where to install smoke detector ?",
          "Smoke detector coverage and spacing",
          "What is Ceiling void detector ?",
          "What is heat detector and their types ?",
          "Where to install heat detector ?",
          "Beam detector and it types",
          "Duct smoke detector and how it works ?",
          "Manual Pull Station and Manual Call Points",
          "Installation Location of Manual pull stations / Manual call points",
          "Interfacing Unit Module",
          "Quiz"
        ],
        "Notification Appliance": [
          "What is Notification appliance and their application ?",
          "Audible characteristics (Sounders, Sounder bases and speakers)",
          "Visible characteristics : (Strobe, Flasher)",
          "Quiz"
        ],
        "Emergency Control Functions": [
          "Elevator System Interface",
          "Stairwell Pressurization System",
          "Sprinkler Zone Control Valve and Flow Switch",
          "HVAC system (AHU / FAHU / FCU )",
          "Access control system / Turnstile/ Vehicle Traffic Barrier",
          "Quiz"
        ]
      },
      "requirements": [
        "Willing to learn about fire alarm system.",
        "No prior knowledge required."
      ],
      "description": "Hi there! My name is Nilesh & I’m a professional fire alarm engineer active since last 11 years in fire alarm industry. I’m here to help you learn online fire alarm system efficiently and comprehensively\nAfter completing this course, students will have a solid knowledge of the fundamentals of fire alarm system and how it functions\nThe purpose of this online fire alarm training course is to cover basics to in depth knowledge of the fire alarm system\nBelow major topics are covered in this course:\nWhat is fire alarm system and how it works ?\nTypes of fire alarm systems ?\nBasic fire alarm terminologies and definitions\nTypes of fire alarm circuits and pathways\nFire alarm panel and components\nFire alarm detectors and modules\nHow to choose location to install detectors ?\nWhat is notification appliance and their applications ?\nWhat is ceiling void detector ?\nWhat is beam detector and it types ?\nWhat is interface unit module ?\nWhat is manual pull station or manual call points ?\nWhat is SLC loop card ?\nRepeater panels or Remote annuciators\nTypes of repeater panels or remote annuciators\nTypes of fire alarm cables\nElevator interface with building fire alarm system\nStairwell pressurization interface with building fire alarm system\nAccess control system interface with building fire alarm system\nAnd many more.\nAt the end of the course, students will be confident about their knowledge in fire alarm systems and professionals will be refreshes their fire alarm knowledge.",
      "target_audience": [
        "Anyone who wants to learn about fire alarm system",
        "Fire alarm system designers, technicians, and engineers who want to deepen their understanding of fire alarm components, circuits, and NFPA 72 requirements.",
        "Students and recent graduates in electrical, electronics, or fire protection engineering fields.",
        "Facility managers, safety officers, and building maintenance staff who interact with fire alarm systems.",
        "Anyone preparing for certifications or exams related to NFPA 72, NICET, or local authority fire code requirements."
      ]
    },
    {
      "title": "Robotics and ROS - Learn by Doing! Manipulators",
      "url": "https://www.udemy.com/course/robotics-and-ros-learn-by-doing-manipulators/",
      "bio": "Build and Control with your voice a Real Robot with ROS",
      "objectives": [
        "Create a real robot",
        "Mastering ROS, the Robot Operating System",
        "Robotics Theory",
        "Use Alexa to actuate the Robot",
        "Programming Arduino for Robotics Applications",
        "Create a Digital Twin",
        "Simulate the robot in Gazebo",
        "Robot Kinematics",
        "Trajectory Planning with MoveIt!"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of Python or C++",
        "Basic knowledge of Linux",
        "No prior knowledge of ROS required",
        "No prior knowledge of Robotics theory required",
        "No hardware required. All the course can be followed also using only the PC"
      ],
      "description": "Would you like to learn ROS, the Robot Operating System by building a real robot?\n\n\nThe philosophy of this course is the Learn by Doing and quoting the American writer and teacher Dale Carnegie\nLearning is an Active Process. We learn by doing, only knowledge that is used sticks in your mind.\n\n\nIn order for you to master the concepts covered in this course and use them in your projects or, why not, also in your future job, I will guide you through the learning of all the functionalities of ROS both from the theoretical and practical point of view.\nEach section is composed of three parts:\nTheoretical explanation of the concept and functionality\nUsage of the concept in a simple Practical example\nApplication of the functionality in a real Robot\n\n\nI almost forgot! We need one more, essential and exciting part of this course for your active learning!\nExperiment, Develop and Test your ideas in the Robot (real or simulated in your PC)\n\n\nIn each Section of the course, I'll introduce you a new concept and then we will use it to add new functionalities to the robot:\nIntroduction to the Course\nSetup the Environment: Install Ubuntu and ROS Noetic\nIntroduction to ROS: What is ROS and why is so important in Robotics.\nCreate the first ROS node\nROS Publisher/Subscriber\nDigital Twin: Use a simulator to develop and test the functionalities of the robot without the need of any hardware device\nURDF\nGazebo\nROS Parameter Server\nRViz\nROS Launch Files\nControl: How to create a Control System for Robot actuators\nROS Timer\nROS Services\nros_control\nKinematics: Use the package MoveIt! for the Trajectory Planning\nTF\nMoveIt!\nApplication: Interface and make available all the functionalities of the robot to other software to create more complex applications and functionalities\nROS Actions\nAlexa: Use the Alexa Voice Assistant to actuate the robot with the voice\nBuild the Robot: Build the real robot and migrate all the functionalities from a simulated robot to a real one\nrosserial_arduino\nConclusion and Summary of the course\n\n\nTo facilitate your learning and help you join the robotic world, the code lessons are available both in C++ and in Python and you can decide which language to use during the course.\nAnyway, I would suggest you to follow both in order to complete your Robotics Software Developer profile!",
      "target_audience": [
        "Makers and Hobbists keen on robotics",
        "Software developers taht wants to learn ROS and Robotics",
        "Students or Engineers that wants to learn how to buid a robot from scratch",
        "Developers that already knows ROS and that want to use it in a real world application"
      ]
    },
    {
      "title": "Arduino : Electronics circuit, PCB Design & IOT Programming",
      "url": "https://www.udemy.com/course/arduino-industrial-data-logger-designing-and-programming/",
      "bio": "Industrial Datalogger, Electronics circuit design, Embedded System, Eagle PCB Design, Arduino Programming and IOT system",
      "objectives": [
        "Industrial electronics circuit design, PCB Layout using Eagle software,",
        "Interface : Wi-Fi, Bluetooth, SD Card, RTC, RS485, RS232, 0-10v Digital Input, 0-10v Analog Input, 4-20mA sensor, speed controller",
        "ATMEGA256 circuit design, Power Supply Designing (SMPS and Linear Regulator)",
        "Basics of Electronics",
        "Micro-controller selection",
        "Understanding Fuse bytes and boot loader programming procedure",
        "How to use Logic Analyzer to debug protocol",
        "Hardware designing and programming to control AC appliance",
        "Hardware designing and programming to control speed of DC Motor",
        "Hardware designing and programming to read 0-10 V digital input sensor",
        "Hardware designing and programming to read 0-10 V analog input sensor",
        "Hardware designing and programming to read 4-20 mA sensor",
        "Hardware designing and programming to read Real Time Clock parameters",
        "Basic programming concepts",
        "Hardware designing and programming for Bluetooth Low Energy (BLE 4.0)",
        "Hardware designing and programming for WiFi Module",
        "Hardware designing and programming for SD Card",
        "Hardware designing and programming for RS232 Interface",
        "Hardware designing and programming for RS485 Interface",
        "Data visualization",
        "Layout design for data logger PCB",
        "Essential websites for components and PCB manufacturer"
      ],
      "course_content": {
        "Note and Information": [
          "About Instructor",
          "Warning",
          "About Courses",
          "Important Message",
          "Important Note",
          "Course Curriculum",
          "Ratings and Review",
          "How to download course material",
          "How to ask question",
          "Updates"
        ],
        "Introduction to custom data logger PCB": [
          "Hardware Introduction - Brief",
          "Introduction to custom data logger PCB and its different blocks"
        ],
        "Basic Electronics concepts": [
          "Introduction to basic electronics section",
          "Pull up and pull down configuration",
          "Potential divider configuration",
          "Selecting current limiting resistor",
          "Understanding transistor",
          "Voltage level converter using MOSFET",
          "SMD and through hole components calculation and their packages"
        ],
        "Selecting power supply": [
          "Linear voltage regulator",
          "Switch mode power supply (SMPS)"
        ],
        "Eagle software": [
          "Note",
          "Eagle software download and installation",
          "Introduction to eagle software"
        ],
        "Power Supply Design": [
          "Introduction to SMPS IC and Linear regulator IC",
          "Circuit design for SMPS and Linear regulator",
          "Designing a power supply using Eagle software",
          "Introduction to protection circuit for power supply",
          "Designing a protection circuit for power supply using eagle",
          "Introduction to under voltage lockout and PPTC feature of power supply",
          "Designing a under voltage lockout and PPTC feature for power supply",
          "Designing a layout for power supply"
        ],
        "Selecting a micro-controller": [
          "Choosing an appropriate micro controller"
        ],
        "ATMEGA256 circuit designing": [
          "Circuit design for ATMEGA256 Part-1",
          "Circuit design for ATMEGA256 Part-2"
        ],
        "Programming boot-loader in ATMEGA256": [
          "Understanding what is boot loader",
          "Fuse bytes of ATMEGA256 – Part 1",
          "Fuse bytes of ATMEGA256 – Part 2",
          "Fuse bytes of ATMEGA256 – Part 3",
          "Description of USBASP and how to load a boot loader in micro-controller."
        ],
        "Designing a hardware for USB to TTL converter": [
          "Understanding UART interface",
          "Introduction to USB to TTL converter and its description"
        ]
      },
      "requirements": [
        "Basic Knowledge of Electronics",
        "Basic Arduino programming knowledge (But Not mandatory)"
      ],
      "description": "Courses Offered\n1. STM32 : Internet Of Things with 4G LTE Modem\n2. Arduino: Electronics circuit, PCB Design & IOT Programming\n\n\nNote : This course is designed for electronics enthusiast and also for the advanced audience, please check course content before subscribing to this course. I can assure you, you will never regret spending your valuable money on this course.\n\n\nBrief Description\nThis course teaches you following things\n1. How to design custom hardware for an application.\n2. How to do Programming.\n3. PCB designing using Eagle software.\n4. Internet of Things (IOT) based applications.\n5. Protocol decoding using logic analyzer.\n\n\nI created this course because I believe that, its important how much knowledge you have but even more important thing is at what age you have it. Normally it takes time to develop skills in hardware and in this course I am sharing my experience and giving you a right approach to develop your skills in both hardware designing and programming. Which will help you to avoid mistakes and gain more knowledge in less time.\nI remember one quote that I want to share with you.\n\n\n\"Learn from other people's mistakes.\nLife is too short to make them all yourself\"\n- Sam Levenson\n\n\nLong Description:\nHere I have described in brief, what you are going to learn in this course. The entire course is constructed in following format.\n1. Introduction to section\n2. Circuit diagram explanation\n3. Circuit diagram designing using eagle\n4. Program explanation\n5. Practical demonstration\n\n\nBasic electronics\nBasic electronics concepts that are required for the course.\n1. Pull up and pull down configuration.\n2. Potential divider configuration.\n3. Understanding transistor\n4. Voltage level converter\n5. Introduction to SMD packages and calculations.\n\n\nPower Supply\nPower Supply introduction\n1. Linear voltage regulator\n2. Switch Mode Power Supply (SMPS)\n\n\nPower Supply Designing\nIntroduction and circuit design for SMPS and Linear regulator IC's\nIntroduction and circuit design for power supply protection\nPower supply Layout design using eagle software\n\n\nMicro-controller\nSelecting an appropriate micro-controller\nCircuit design for ATMEGA256\n\n\nIntroduction to Boot loader and Programming Procedure\nUnderstanding what is boot loader\nUnderstanding fuse byte of ATMEGA256\nIntroduction to USBASP programmer\nProcess to program  boot loader in ATMEGA256\nIntroduction to USB to TTL converter\n\n\nLogic Analyzer\nIntroduction to logic analyzer\nUnderstanding UART programming and Visualizing UART output using Logic analyzer\n\n\nControlling an AC appliance using micro-controller\nIntroduction to relay driver components and protection circuit\nDesigning a circuit for relay driver using Eagle Software\nDigital Output Programming, Program to drive submersible pump using Relay\n\n\nDC Motor Speed Controller\nIntroduction to DC Motor speed controller components and protection circuit\nDesigning a circuit for DC Motor speed controller using Eagle\nUnderstanding PWM, its programming and visualizing PWM waves using logic analyzer\nProgram to control the speed of DC Motor\n\n\nReading 0-10 v Digital Output sensors\nIntroduction to components to read digital input\nUnderstanding circuit for optocoupler\nDesigning a circuit for Digital Inputs using Eagle software\nDigital Input programming\nUnderstanding Pin change interrupt feature of ATMEGA256\nProgram to count external pulses using pin change interrupt\n\n\nReading (0 - 5v / 0 - 10v) Analog Output sensors\nUnderstanding circuit to read (0-5v/ 0-10v) Analog Input\nDesigning a circuit to read Analog input using Eagle software\nAnalog input programming and reading sensors of different range\n\n\nReading (4 – 20 mA) sensor\nUnderstanding 4-20 mA Industrial standard\nIntroduction and circuit design for Impedance matching circuit\nIntroduction to 16 bit Analog to digital converter\nBrief introduction to I2C Interface\nDesigning a circuit for 4-20 mA sensor using Eagle software\nIntroduction to 4-20 mA simulator circuit\nProgram to read 4-20mA sensor\nVisualizing I2C signal of ADC using logic analyzer\n\n\nReal Time Clock\nIntroduction to RTC IC\nDesigning a circuit for RTC IC using Eagle\nReal time clock programming\nVisualizing RTC parameters using logic analyzer\n\n\nBasic Programming concepts\nUnderstanding essential C functions\nUnderstanding essential conversion functions\n\n\nBluetooth Low Energy (BLE 4.0)\nIntroduction to BLE module\nIntroduction to single channel buffer IC\nDesigning a circuit for BLE module using Eagle\nConfiguring Bluetooth Low Energy Device\nIntroduction to Blynk app\nProgram to send data on Blynk app\n\n\nIndustrial Wi-Fi Module\nIntroduction to WIFI module\nBrief introduction to SPI Interface\nIntroduction to octal Transceiver IC\nDesigning a circuit for WIFI module using\nProgram to check and update the firmware version of WIFI module\nProgram to connect with WIFI router\nCreating an API to fetch Date and Time from cloud\nProgram to fetch Date and Time from cloud\nProgram to update RTC parameters with parameters fetched from cloud\n\n\nSD Card Interface\nIntroduction to SD card and understanding its circuit\nDesigning a circuit for SD card using Eagle for SD card\nProgram to Initialize and write into SD card\nProgram to store system parameters in CSV format in SD card\nProgram to store system parameters Date wise in SD card\nProgram to store system parameters month and year wise in SD card\n\n\nRS232 Interface\nWhat is RS232 Interface, Introduction to RS232 Interface IC\nUnderstanding a circuit of RS232 Interface and RS232 to USB converter\nDesigning a circuit for RS232 Interface using Eagle software\nProgram to receive data over RS232 Interface\nImportance of checksum byte and Program to calculate checksum byte\nProgram to receive data with checksum over RS232 Interface\nDesigning a custom protocol\nProgram to send data over RS232\n\n\nRS485 Interface\nWhat is RS485 Standard, Introduction to RS485 Interface IC\nUnderstanding circuit of RS485 Interface and RS485 to USB converter\nDesigning a circuit for RS485 Interface using Eagle software\nProgram to receive data over RS485 Interface\nProgram to send data over RS485 Interface\n\n\nData Visualization\nCreating dashboard for Data logger\nProgram to send system parameters to freeboard website using WIFI module\n\n\nLayout Designing for schematic\nData Logger layout design\nHow to generate Bill of material, Gerber file, PCB Preview\n\n\nEssential Websites\nWhere to purchase the components\nWhere to send PCB for manufacturing\n\n\nMy promise!\nOne thing that I can promise you is this course is going to save your lot of time to learn hardware designing and programming. I will personally answer your questions about this course . If you are in any way not satisfied, for any reason, you can get a full refund from Udemy within 30 days with no questions asked. But I am confident you won't need to. I stand behind this course 100% and I am committed to helping you.\n\n\nWho this course is for:\nHobbyists and engineering students who want to start their career in Embedded world.\nIf you want to learn hardware and programming then think about taking this course. you will not be disappoint",
      "target_audience": [
        "Hobbyist, Beginner in electronics, Professionals"
      ]
    },
    {
      "title": "3 in 1 IoT Bundle : Arduino Uno, ESP8266 and Raspberry Pi",
      "url": "https://www.udemy.com/course/learn-iot/",
      "bio": "Learn and Understand the Inner working of Most Popular Devices and Hardware for Making IoT Usecases Come to Life",
      "objectives": [
        "Able to connect and create IoT Usecases circuits with Micro Devices",
        "Able to Understand How to Work with Arduino, Raspberry Pi and ESP8266 in Details",
        "Create Own IoT Apps and Usecases",
        "Get Jobs/Projects/Consulting on IoT Field Professional",
        "Be More Aware on the Hardware side of IoT with In Depth Knowledge"
      ],
      "course_content": {
        "Introduction to the Arduino": [
          "Introduction to the Course",
          "1. Introduction to Arduino Prototyping Board"
        ],
        "Setting up the Environment": [
          "2. How to Install Arduino IDE"
        ],
        "Basic LED Blinking with Arduino": [
          "3a. Basic LED Blinking",
          "4. Test using On-board LED",
          "5. Program the Arduino to make an LED Fade and Glow"
        ],
        "HBridge and its uses": [
          "6. Part 1 : Hbridge Driver",
          "7. Part 2: HBridge Driver"
        ],
        "Stepper Motors": [
          "8. Introduction to Stepper Motors",
          "9. How a DC Motor Works?",
          "10. How a Stepper Motor Works?",
          "11.Methods to find a Stepper Motor is Center-Tapped or Not",
          "11a. Stepper 360° Rotation"
        ],
        "Create your Own Arduino": [
          "13. Arduino using ATMEGA328 Microcontroller"
        ],
        "Build your own Line Follower Robot using Arduino": [
          "14. Arduino with Analog Sensor - LDR",
          "15. Line Follower Necessary Components",
          "16. Create and Test Motion Detection Sensor",
          "17. Solder and Code for Line Follower",
          "18. Testing Our Line Follower Robot"
        ],
        "Introduction to ESP8266": [
          "Introduction to the Course",
          "Introduction to the ESP8266",
          "Necessary Components in ESP8266",
          "How it is Fabricated?",
          "Circuit Connection for Flashing the ESP8266"
        ],
        "SAP HANA XSJS and SAPUI5": [
          "Raspberry Pi Introduction",
          "Step 1: configuring Raspberry Pi and connecting it to computer and internet",
          "Step 2: connecting Raspberry Pi to Arduino, updating it and installing Java",
          "Step 3: config & coding Java in Raspberry PI for Arduino serial communication"
        ],
        "Bonus : Extending IoT usecase with PubNub Cloud for real time commercial use": [
          "What is PubNub IoT platform and Why to use it",
          "How PubNub works",
          "How to use PubNub in our existing IoT scenario",
          "Pushing Raspberry Pi data to PubNub cloud",
          "Subscribing to PubNub cloud with UI5 frontend application"
        ]
      },
      "requirements": [
        "Basic fundamentals of how to use computer and english language"
      ],
      "description": "A major part of any new IoT project involves integration and interfacing nowadays. In IoT world we have a lot of proprietary technologies and thus a good number of protocols and interfacing techniques like UART, SPI, I2C, PCIe, SWP, DWP, which makes the life of a new IoT Engineer really challenging. In 3 in 1 IoT Bundle, we consider all those scenario in details and step by step manner.\n\n\n3 in 1 IoT Bundles cover the integration of each popular hardware with its SDK hands-on. Most of this IoT development platform has its own pros and cons which is covered in details with use cases\n\n3 in 1 IoT has covered majorly hardware side of IoT, as this is the first and major point where software developers face challenges. We have covered 4 major hardware development and integration, which is Arduino Uno, Raspberry Pi, Konnect KiT, and wireless-enabled ESP8266.\n\nWhy you should consider taking this course?\nOne of the challenges while working with ESP8266 is its learning curve. Tools and techniques which one needs to master to get comfortable while using it in projects need to be understood well with a clear understanding of basics. Keeping that in mind we have designed the Professional ESP8266 development course. This course will cover all the concepts one needs to master starting from basics, you will learn how the Architecture of ESP8266 is designed, then you will understand how the flashing is done in ESP8266 where you load your OS, connecting ESP8266 to the internet is then the major step where you will understand the capability of hardware to communicate with the internet which will enable the IoT. Most of the time hardware endpoints will be connected to the data stream network cloud which can manage scale, security, and a stream of communication. We are using a widely used platform which is PubNub with ESP8266 to demonstrate this.\nIn the end, we will put everything together and also have a small end to end project of a smart home where we will cover circuit design, development, and implementation with Go-Live.",
      "target_audience": [
        "Students",
        "Developer",
        "Hardware Enthusiast/ Hobbyist",
        "Senior Developer",
        "Software Architect/Solution Architect"
      ]
    },
    {
      "title": "AMBA AXI Infrastructure Based on Xilinx FPGA IPs and Verilog",
      "url": "https://www.udemy.com/course/axi-infra-on-xilinx/",
      "bio": "Explanation of AMBA AXI protocol based on Xilinx Infrastructure, verilog and System verilog",
      "objectives": [
        "ARM AXI Protocol",
        "Xilinx AXI Infrastructure",
        "Xilinx Vivado Tool",
        "FPGA and Verilog",
        "Zynq",
        "System Verilog"
      ],
      "course_content": {
        "AXI Stream Protocol": [
          "AXI-Stream Speck Review",
          "Master AXI Stream Block design using Verilog",
          "Simulation of our AXI-Stream Master using Xilinx Vivado",
          "Slave AXI Stream Block design using Verilog",
          "Simulate our designed AXI-Stream Master and Slave",
          "Xilinx Traffic Generator IP basics for AXI-Stream",
          "Xilinx AXIS DataWidth and Clock Converter IP"
        ],
        "AXI-Lite Protocol": [
          "AXI4-Lite Specification Review",
          "Designing our own AXI Lite Master",
          "AXI Verification IP basics",
          "Verification IP Basics",
          "Simulate our own AXI-Lite Master using AXI Verification IP",
          "AXI-Stream FIFO Intro",
          "AXI-Stream FIFO Example Design",
          "AXI-Lite to AXI-Stream Conversion using AXIS FIFO"
        ],
        "AXI Protocol": [
          "AXI Protocol Speck Review - Introduction",
          "AXI Protocol Speck Review - Burst Operation",
          "Calculate addresses for Wrap Burst",
          "AXI Protocol Speck Review - Transaction Attributes",
          "AXI Protocol Speck Review - Ordering Model",
          "AXi Speck better understanding Quiz"
        ],
        "AXI Project: RAM Write and Read Data": [
          "Project Overview",
          "AXI Traffic Generator IP - AXI_Lite Mode",
          "AXI Traffic Generator IP - AXI Mode",
          "AXI BRAM Controller IP"
        ]
      },
      "requirements": [
        "Basics of Electrical Enginearing",
        "Basics of Verilog language"
      ],
      "description": "Why AXI?\n=========\nThe answer is simple - there is NO any Soc or complex system, which does not contain AXI. If your work somehow is connected with processor, controller or any other big system than there will be multiple AXI buses in the system. AXI bus is a ARM standard bus, which is supported by all hardware companies e.g. Xilinx, Intel, AMD and so on. And by the advance of AI the AXI is going to be more and more popular.\nIn this course AXI protocol and its sub-parts will be explained.\nAlso as a free side knowledge you will study Vivado with its IPs, simulation methods and many more.\n\n\nTarget Students\n==============\nThe course is mainly targeted for FPGA designers, who are using AXI based modules in the design. Also the course will be useful for engineers who is starting to use AXI protocol.\nThe course is extremely helpful for graduate students who is looking for a new job as a FPGA or Soc Developer, in my previous 3 companies AXI questions were the most often to ask the fresh graduates for hire.\n\n\nCourse Content\n==============\nIn the course mainly the basics of AXI protocol family is explained, which allows students easily understand and use AXI based IPs. This is more practical view of AXI usage allowing for jump start to use AXI based modules.  The course does not go to FPGA board level,as the target is AXI protocol and Xilinx provided AXI Infrastucture understanding.The course concentrated on simulation level, not FPGA board running is done.\nThe AXI protocol is complex enough and sometimes it takes much time to get used to it. Usually the AXI protocol is easy to understand when you are familiar with much easy version of it, which are AXI-Stream and AXI-Lite. The course is based on bottom-up-style. At first I explain AXI-stream protocol, than explain AXI-Lite protocol in detail. We do both of these protocol designs using Verilog.\nThan having all that baggage of knowledge we move to AXI protocol.\nIn the course I tried to review the ARM speck for AXI, hoping that this will help students easily jump in speck reading, after finishing the course.\n\n\nSpecial Thanks:\n=============\nI want to express special thanks to Eduard Vardanyan, from ARM, for his great support in making this course. His profound experience and deep knowledge helped me to explain complex AXI parts simply. Without his help I could not do this.\n\n\nCaution:\n=======\nAlso I apologize for my English, I tried my best to speak clearly and grammatically correct, however sometimes there are some mistakes. I really hope that my non-native English will not bother students to understand the material.\n\n\nCourse Materials:\n===============\nAll course codes can be downloaded from Github.\n\n\nNote: If you have software background, I would suggest little bit become familiar with Verilog. There are several lectures which require Verilog and hardware basics.",
      "target_audience": [
        "University Students",
        "Field Engineers who just started using AXI protocoal",
        "Experienced Engineers who want to get knowledge about Xilinx other AXI related IPs",
        "Anyone who wants to learn FPGA"
      ]
    },
    {
      "title": "Complete x86 Assembly Programming | 120+ Practical Exercises",
      "url": "https://www.udemy.com/course/complete-x86-assembly-language-120-practical-exercise/",
      "bio": "Master x86 Assembly language from zero to hero: the base of 8086, 8088,pentium, i3, i5, i7 assembly language easily",
      "objectives": [
        "You will learn x86 Assembly Language From scratch either if you don't know anything about programming",
        "The different counting systems & Converting between them",
        "Data representation \"How to represent numbers,chars ....etc\" in a computer",
        "The general computer architecture",
        "The micro-architecture of intel 8086 processor",
        "The core instructions of intel 8086 processor",
        "How to plan & build an algorithm",
        "How to write an assembly program & How to use 8086emu for that",
        "Be able to write from a simple to complicated assembly program",
        "More than 50 example will make your understanding deeper",
        "Be able to understand what's going on behind the scene"
      ],
      "course_content": {
        "NOTE": [
          "NOTE"
        ],
        "Introduction": [
          "Introduction to the programming languages",
          "Introduction to the programming languages Quiz",
          "Introduction to the Assembly language",
          "Introduction to the computer's architecture",
          "Introduction to the computer's architecture Quiz",
          "The internal architecture of the 8086 processor",
          "The internal architecture of the 8086 processor Quiz",
          "Simulation of the main memory",
          "Simulation of the main memory Quiz",
          "How to install emu8086",
          "First step",
          "First Assignment"
        ],
        "variables & constants": [
          "How and where define variables",
          "How and where define variables Quiz",
          "The rules of naming a variable",
          "The rules of naming a variable Quiz",
          "Size directives",
          "Size directives Quiz",
          "The Constants",
          "Constants Quiz",
          "Types of the numerical values",
          "Second Assignment"
        ],
        "Basics": [
          "Data registers",
          "Data registers Quiz",
          "Mov instruction",
          "Mov instruction Quiz",
          "Mov instruction example I",
          "Mov instruction example II",
          "Xchg instruction",
          "Xchg instruction Quiz",
          "ADD & SUB instructions",
          "ADD & SUB instructions Quiz",
          "ADD & SUB instructions example",
          "INC DEC NEG instructions",
          "INC DEC NEG instructions Quiz",
          "INC DEC NEG instructions example",
          "From binary to hexadecimal",
          "From binary to hexadecimal Quiz",
          "The difference between the signed and unsigned numbers",
          "The difference between the signed and unsigned numbers Quiz",
          "How to choose the right size for a number",
          "How to choose the right size for a number Quiz",
          "Third assignment"
        ],
        "The flags": [
          "The Flags register",
          "Flags register Quiz",
          "The overflow",
          "The overflow Quiz",
          "The overflow in NEG instruction",
          "SF ZF",
          "SF ZF Quiz",
          "SF ZF example",
          "PF",
          "PF Quiz",
          "Fourth Assignment"
        ],
        "The branching & Flow Control Instructions": [
          "Introduction to the branching",
          "Introduction to the branching Quiz",
          "The branching -Part I",
          "The branching -Part I Quiz",
          "The branching -Part II",
          "The branching -Part II Quiz",
          "Branching example -overflow 1",
          "Branching example -overflow 2",
          "Branching example -comparing numbers",
          "The branching -Part III (1)",
          "The branching -Part III (1) Quiz",
          "The branching instructions in the unsigned numbers -example",
          "The branching -Part III (2)",
          "The branching -Part III (2) Quiz",
          "The branching instructions in the signed numbers -example",
          "Using the branching instructions with PF -example",
          "Fifth Assignment"
        ],
        "Data types -chars": [
          "Data types -chars",
          "Data types -chars Quiz",
          "How to print a char in the DOS screen",
          "How to print a char in the DOS screen Quiz",
          "How to read a char from the keyboard",
          "How to read a char from the keyboard Quiz",
          "The DOS services -example",
          "The DOS services -example Quiz",
          "Operations on the chars",
          "Operations on the chars Quiz",
          "From the uppercase to the lowercase",
          "From the uppercase to the lowercase Quiz",
          "Read a digit -example"
        ],
        "Text messages": [
          "How to print a message in the DOS screen",
          "How to print a message in the DOS screen Quiz",
          "From the lowercase to the uppercase",
          "The sixth Assignment"
        ],
        "Simulate some high level languages instructions": [
          "Simple IF",
          "Simple IF Quiz",
          "Complex IF",
          "Complex IF Quiz",
          "IF-Else Condition",
          "IF-Else Condition Quiz",
          "The repeat loop",
          "The repeat loop Quiz",
          "The while loop",
          "The while loop Quiz",
          "The For loop",
          "The For loop Quiz",
          "The seventh Assignment"
        ],
        "The program's segments": [
          "Segments registers",
          "Segments registers Quiz",
          "The offset",
          "The offset Quiz",
          "Memory models",
          "Memory models Quiz",
          "Segments registers -notes",
          "Segments registers -notes Quiz"
        ]
      },
      "requirements": [
        "No programming knowledge is required i will teach you from the bottom",
        "Just take a sit and enjoy learning"
      ],
      "description": "The most effective course to learn the X86 assembly language through focusing on the practical side and exercises in a funny way will make you learn quickly and easily, as well as a Udemy certificate that you can  add  to your CV with confidence.\nIn this course we will take you from zero to the professionalism acquiring the basic skills and principles of the language with the deep & right understanding.\nAre You:\nAn absolute beginner and you have no idea about programming.\nBeginner and you have a little programming experience.\nExpert and you have a long experience in programming.\n\n\nAnd you want to learn x86 assembly language?\n\n\nYou're in the right place !!!\nAre you interested in :\nHardware Developing\nSoftware Developing\nReversing Ingeneering\nData Security\nEthical Hacking\nNetworking\nOperating Systems\nDebugging\nOther processor's Assembly Language\nOthers\nStudent in the University\nAnd you want to learn Assembly Language either you want to be an expert in your specialty or for other reasons\nYou are in the right place !!!\n\n\nComplete x86 Assembly Programming | 120+ Practical Exercises is the best course on udemy to learn x86\nAssembly Language.\n136+ non-boring lectures ( 4 min avg time ): well explained, short, detailed, focus on the principals\nNo need to re-view any lectures ( get it from the first time ):\nEvery lecture has its downloadable  resources\nEvery lecture followed by QUIZ  to practice more\n11+ Assignments to examine your skills\nBig amount of exercises\nIn the end of this course you will acquire this skills:\nYou will learn x86 Assembly Language From scratch either if you don't know anything about programming\nThe different counting systems and how to Convert between them\nSome mathematical skills\nData representation \"How to represent numbers,chars ....etc\" in a computer\nThe general computer architecture\nThe micro-architecture of intel 8086 processor\nThe core instructions of intel 8086 processor (MOV, XCHG, ADD, SUB, MUL, DIV, CMSB...etc)\nDifferent Data Types and structures (numbers, chars, strings, arrays, .... etc)\nHow to plan and build an algorithm to solve problems\nHow to write an assembly program & How to use 8086emu for that\nBe able to write from a simple to complicated assembly program\nMore than 50 example will make your understanding deeper\nBe able to understand what's going on behind the scene\nAnd more...",
      "target_audience": [
        "Absolute beginner",
        "Beginner",
        "Medium",
        "Professional"
      ]
    },
    {
      "title": "Digital Logic Circuits and Design",
      "url": "https://www.udemy.com/course/digital-logic-circuits-and-design/",
      "bio": "Learn how to design a digital circuit in the simplest way in the world of digital electronics",
      "objectives": [
        "Digital Electronics",
        "Digital Circuit Design",
        "Digital Logic Design"
      ],
      "course_content": {},
      "requirements": [
        "No, There are no pre requisites."
      ],
      "description": "After completing this course, you'll be able to\n1. Understand all the fundamentals of number systems and performing conversion between them.\n2. Function of logic circuits and how to design them.\n3. Classify Combinational Logic and Sequential Logic.\n4. How to design a combinational logic circuit for a given scenario with the minimum number of gates possible.\n5. Use all the standard techniques to minimize the logic gate requirements\n6. Design sequential logic circuits like Counters and Shift Registers using Flip flops.\n7. Understand the working of various flip flops and latches and highlight the difference between them.\n\n\nIf you're an aspirant who belong to the field of Computer Science, Electronics and Information Technology, Then this course will strongly build the foundations of the digital electronics in you.\n\n\nObjective of the course is to make everyone design a digital circuit efficiently using various components.\nDigital systems contain information that is represented as binary digits called bits.\nThe alphabet of these bits is the set {0, 1}, which represents the logical value of the\nbits. The physical value is determined by the logic family being used. The transistor-transistor\nlogic (TTL) family represents a logic 0 typically as + 0.2 volts and a logic 1\ntypically as + 3.4 volts using a + 5 volt power supply; the emitter-coupled logic (ECL)\n100K family represents a logic 0 typically as – 1.7 volts and a logic 1 typically as –0.95\nvolts using a – 4.5 volt power supply.\nThus, a signal can be asserted either positive (plus) or negative (minus), depending\nupon the active condition of the signal at that point. The word positive, as used\nhere, does not necessarily mean a positive voltage level, but merely the more positive\nof two voltage levels, as is the case for ECL.",
      "target_audience": [
        "Beginner Electronics, CS and IT Aspirants"
      ]
    },
    {
      "title": "Analog Electronics for Beginners - Diodes & Capacitors",
      "url": "https://www.udemy.com/course/analog-circuit-design-part-1-all-about-diodes-capacitor/",
      "bio": "Semiconductor Devices: Hands on Lab Based Course Learn All about Diodes Analog Electronics & Hardware Design - 1",
      "objectives": [
        "Analog Electronics: Lab based course truly for Engineers and those who want to learn electronics from scratch",
        "Working of diodes and diode circuits",
        "Behaviour of diode in reverse bias and in forward bias condition",
        "Modelling of diode",
        "Learn circuit simulation in Electric Circuit Studio Software available on mobile and desktop as well",
        "Clipper Circuits (diode as half wave rectifier)",
        "Clamper circuits",
        "Working of zener diode and its uses in circuit",
        "Capacitors and its uses in circuit designing",
        "Tips and tricks to solve complex diode circuits",
        "Clears fundamental concepts of electronics required to learn transistors, Op-Amps, etc",
        "15+ complex numericals of diodes"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Brief Introduction"
        ],
        "Software Installation": [
          "Software Installation on desktop",
          "Software Installation on smartphone"
        ],
        "Operation of P-N junction diode in forward and reverse bias": [
          "Conditions to operate diode in forward and reverse bias",
          "Introduction to circuit simulation software & simulation of basic diode circuits",
          "Quiz - 1"
        ],
        "V-I Characteristics of p-n junction diode and Shockley's Equation": [
          "V-I characteristic of p-n junction diode",
          "Understanding Shockley's Equation",
          "Quiz - 2"
        ],
        "Modelling of p-n junction diode diode": [
          "Diode Modelling",
          "What is Dynamic Resistance of Diode?"
        ],
        "Basic numericals on p-n junction diode": [
          "Analysis of numerical-1",
          "Simulation of numerical-1",
          "Analysis of numerical-2",
          "Simulation of numerical-2",
          "Analysis of numerical-3",
          "Simulation of numerical-3",
          "Course Feedback"
        ],
        "Biased Clipper circuits": [
          "Analysis of numerical - 1",
          "Simulation of numerical - 1",
          "Analysis of numerical - 2",
          "Simulation of numerical - 2",
          "Analysis of numerical - 3",
          "Simulation of numerical - 3",
          "Analysis and simulation of numerical - 4",
          "Course Feedback"
        ],
        "Clipper Circuits": [
          "Introduction to clipper circuits"
        ],
        "Basic Numericals on Clipper Circuits": [
          "Analysis of numerical - 1",
          "Simulation of numerical - 1",
          "Analysis of numerical - 2",
          "Simulation of numerical - 2"
        ],
        "Challenging numericals on clipper circuits": [
          "Analysis of numerical - 1",
          "Simulation of numerical - 1",
          "Analysis of numerical - 2 (part - 1)",
          "Analysis of numerical - 2 (part - 2)",
          "Simulation of numerical - 2",
          "Analysis of numerical - 3",
          "Simulation of numerical - 3",
          "Course Feedback"
        ]
      },
      "requirements": [
        "Basic knowledge of electrical circuits like KVL, KCL, Nodal analysis and circuit theorems) if you don't know this concepts you can enroll in my first course and learn all this concepts.",
        "Basic knowledge of Semiconductors if you don't know this concepts you can enroll in my second course and learn all the concepts.",
        "You should have a desktop or a smartphone and a decent internet connection"
      ],
      "description": "This course is ideal for Electrical, Electronics, Instrumentation, Biomedical, and Robotic Engineering Students.\nBefore enrolling in the course I expect that you must have a good idea about current electricity, semiconductors, etc. If you don't have any idea about it then you can enroll in the rest of my courses which deal with all these concepts in depth.\nWant to learn electronics from scratch, this is the perfect course to start. Analog Electronics is a branch of electronics that is derived from semiconductors and has wide applications in Electronics, Electrical Instrumentation, and the Medical field, all of these fields are interrelated with each other.  During pandemics, people use oximeters to check the oxygen level of blood. An oximeter is an electronic device that is a biomedical application. This is just a small example from my side to explain to you the importance of Analog electronics. Thus this course is suitable for Electronics, Biomedical, Robotics, Electrical, and Instrumentation engineering students as well. Below you will get the description of the course.\nIn the previous course, we learned some basic concepts of semiconductors so, from this particular course, we will study analog electronics. Analog electronics is a combination of conductors and semiconductors.\nThis is part 1 of analog electronics and in this course, we will study all the concepts of diodes and capacitors although capacitors don't come in semiconductors it is used in a lot of wave-shaping circuits and therefore we will be studying it in this course.\n\n\n@ Roadmap of the course:-\nRevision of diodes (studied in course 2)\nThe behavior of diode in reverse bias and in forward bias condition\nIntroduction to Electric Circuit Studio software (Available on mobile and on Desktop as well)\nDiode characteristics and Shockley's equation\nModeling of diode\nWorking of diodes and diode circuits (Basic and challenging circuits)\nClipper Circuits (diode as full-wave and half-wave rectifier)\nTips and tricks to solve complex diode circuits\nCapacitors and it's uses in-circuit designing\nClamper circuits\nWorking of Zener diode and its uses in-circuit\nI planned to use Proteus software for this course but then changed my decision because Electric Circuit Studio Software is easy to use and absolutely made for beginners and most importantly it is available in mobile as well as in desktop versions. So those who don't have good processors in their laptops to run software like Proteus or Multisim or those who want to learn and simulate circuits on mobile while they are traveling can also learn both of the things after enrolling in the course. I hope you will surely enjoy the course.\n\n\n@ Outcomes of this course:-\nYou will understand the workings of the diodes and their real-life examples.\nYou will get acquainted with the workings of the diode circuits.\nYou will learn how to simulate the circuits on the Electric Circuit Studio software.\nYou will understand wave shaping circuits and\nMany more concepts that I'm not revealing here.\nSo do join the course. I hope you will surely enjoy the course.",
      "target_audience": [
        "Anyone who is interested in electronics",
        "Those who are curious to learn simulation software",
        "Beginner who wants to start his/her career in electronics",
        "Students who want to make career in Analog circuit Design or Work on Projects",
        "Electrical and electronic engineering students",
        "Those who are curious to learn arduino",
        "Beginner who wants to perceive his career in VLSI domain",
        "Electronic Engineers",
        "Electrical Engineers",
        "Biomedical Engineers",
        "Instrumentation Engineers"
      ]
    },
    {
      "title": "ARM Assembly Language From Ground Up™ 1",
      "url": "https://www.udemy.com/course/arm-assembly-programming/",
      "bio": "Build over 50 Assembly Programs - ARM Instruction Set, Peripheral Driver Development, Algorithms, DSP routines etc.",
      "objectives": [
        "Master the ARM Instruction Set",
        "Master the Thumb and Thumb-2 Instruction Sets",
        "Understand the ARM Design Philosophy",
        "Understand RISC Architecture",
        "Master creating Data Structures in Assembly",
        "Master creating State Machines in Assembly",
        "Master building complex Algorithms in Assembly",
        "Master writing hardware Drivers in Assembly",
        "Be able to create Lookup Tables and Jump Tables in Assembly",
        "Be able to understand and apply the IEEE- 754 Floating point standard"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know",
        "No paid software required - all assembly programs will be created in Keil uVision 5 (which is free)",
        "I'll walk you through, step-by-step how download and install Keil uVision",
        "You will need an STM32F4-DISCOVERY board for some of the practical lessons."
      ],
      "description": "Welcome to the ARM Assembly Programming From Ground Up™ 1 course.\nCovering ARM Systems Design, Architecture and Practical Assembly Programming,  this is the most comprehensive ARM assembly course online.\nI'll take you step-by-step through engaging and fun video tutorials and teach you everything you need to know to succeed as an ARM embedded developer.\nThis course comes in two parts. This is the first part of the course.\nBy the end of this part you will master the ARM Instruction Set, the Thumb Instruction Set and the Thumb-2 Instruction Set. You will be able to create data structures such as FIFOs and LIFOs in Assembly. You will also be able to create Finite  State Machines such as the Moore Machine and Mealy Machine.  Furthermore you will design complex algorithms for performing Binary Search in assembly , and solving advance mathematical problems like the Taylor Series and the Bisection Algorithm .\n\n\nREMEMBER : I have no doubt you will love this course. Also it comes with a  FULL money back guarantee for 30 days!  So put simply, you really have nothing to loose and everything to gain.\nSign up and lets start writing some low level code.",
      "target_audience": [
        "If you are an absolute beginner to embedded programming, then take this course.",
        "If you are a seasoned programmer, then take this course to to get up to speed with ARM architecture and assembly programming",
        "If you are switching from other architectures such x86 to ARM then this is a fast-track way of doing it. You can get started straight away with the ARM Instruction Set."
      ]
    },
    {
      "title": "Static Timing Analysis: VLSI",
      "url": "https://www.udemy.com/course/static-timing-analysis-vlsi/",
      "bio": "Learn the timing parameters and design a circuit that will meet the timing requirements.",
      "objectives": [
        "Perform Static Timing Analysis on a digital circuit",
        "Figuring out the maximum operating frequency of any sequential circuit",
        "Identify the timing violations and mitigate them",
        "Identify all the timing paths in a circuit"
      ],
      "course_content": {},
      "requirements": [
        "No, But a basic knowledge in Digital Electronics will help!"
      ],
      "description": "Want to become a chip design engineer? Then, STA is mandatory for you!\nWelcome to my course on 'Static Timing Analysis on VLSI Circuits'\n\n\nThis course will help you to design a digital circuit meeting all the timing constraints given.\n\n\nThe contents that we will be discussing in this course are\n1. Types of digital circuits - Combinational, Sequential\n2. Working of Memory Elements - Latches, Flipflops\n3. Edge Triggering\n4. Different delays in a combinational circuit - Propagation delay, Contamination delay\n5. Critical path of a combinational circuit\n6. Timing specifications of a sequential circuit\n7. Launch Flipflop, Capture Flipflop\n8. Setup time analysis & violation\n9. Hold time analysis & violation\n10. Different timing paths in a sequential circuit\n11. Finding out the maximum delay (critical path delay)\n12. Minimum clock period, Maximum operating frequency of the circuit\n13. Data Required Time, Data Arrival Time\n14. Slacks - Setup Slack, Hold Slack.\n15. The concept of clock skew and its equation\n16. Effect of clock skew on the maximum frequency of the circuit.\n\n\nAfter understanding the concepts and the equations, Some example problems and interview questions will be solved in the last section.\nA clock signal is used by sequential circuits to regulate the flow of system data. The maximum clock frequency that can be employed in the circuit can be calculated from a set of combinational and sequential components and the timing parameters that go with them. In this study, each flip-flop to flip-flop path in the circuit is looked at. Both the data setup time at the destination flip-flop and the propagation delays throughout the pathways are examined. Each flip-flop to flip-flop path can be checked to see if flip-flop hold times are satisfied after figuring out the maximum clock frequency. The circuit will function as intended if the contamination delays along each path are more than or equal to the target flip flop hold time.",
      "target_audience": [
        "Beginner VLSI Design Aspirants",
        "Anyone who wants to design ASIC"
      ]
    },
    {
      "title": "Internet of Things IOT, Robotics and Hacking with NodeMCU",
      "url": "https://www.udemy.com/course/iot-robotics-hacking-nodemcu/",
      "bio": "Learn NodeMCU by doing fun IOT projects, robotics and ethical hacking from simple to advanced",
      "objectives": [
        "Create Internet of Things ( IOT ) Projects using NodeMCU Development Board",
        "Create robotic projects using NodeMCU",
        "Create hacking projects using NodeMCU"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Taking a look at NodeMCU Development Boards": [
          "Taking a look at 2 popular types of NodeMCU dev boards"
        ],
        "Installing the necessary software and connecting to the PC": [
          "Installing the Arduino IDE",
          "Adding the ESP8266 Board Manager",
          "Connecting to the PC"
        ],
        "Arduino IDE and NodeMCU": [
          "Getting to know the Arduino IDE and configuring it for NodeMCU"
        ],
        "Project 1: Hello World": [
          "Write your first hello world program",
          "Understanding how NodeMCU works"
        ],
        "Project 2: Blink External LED": [
          "Introduction to Project 2: Blink External LED",
          "How to use breadboards",
          "Programming the NodeMCU",
          "How to run NodeMCU as a standalone device"
        ],
        "Implementing Internet Of Things using Blynk": [
          "Introduction to Blynk",
          "Installing the Blynk App",
          "Installing Blynk libraries for Arduino IDE"
        ],
        "Project 3: Light intensity reader - IOT with Blynk": [
          "Building the LDR circuit",
          "Programming the LDR Circuit",
          "Understanding the ldr circuit and the program",
          "Creating Blynk Account and Designing the UI",
          "Adding blynk code to NodeMCU"
        ],
        "Project 4: Light intensity reader - IOT with PHP and MySQL": [
          "Introduction to Light intensity reader project using PHP-MySQL",
          "Installing our web server",
          "Creating our database",
          "Understanding PHP and MySQL",
          "Create php scripts to access the database",
          "Creating nodemcu wifi program",
          "Creating a webpage UI"
        ],
        "Project 5: IOT Car Park System": [
          "Introduction to IOT Car Park System",
          "Building the carpark model",
          "Improving the carpark model",
          "Creating the parking database",
          "Coding the IOT Carpark System",
          "Understanding NodeMCU carpark code",
          "Understanding the carpark php scripts and how the website is created",
          "Updated carpark system"
        ]
      },
      "requirements": [
        "Lolin v3 NodeMCU ,  L298N motor driver and Arduino Pro Micro",
        "An eagerness to explore the many fun things that NodeMCU can do."
      ],
      "description": "Learn about Internet of Things (IOT), Robotics and Ethical Hacking using the low-cost NodeMCU.  This course consists of step-by-step clear video tutorials which shows close-up point-of-view videos of what the instructor is doing and  which are easy to follow along. No need for any in depth technical knowledge. This course focuses on hands-on practicals right away. Start with simple projects and gradually build up to more advanced projects as you gain more skills and experience.\nThis course makes it easy for you to get started by giving you exposure to a wide variety of things you can do with NodeMCU.  You will learn how to build remote monitoring systems, remote control devices through Internet, mobile phone controlled robotic cars and Hacking using NodeMCU. The robot you build will be directly connected to using any Android or iOS device with a web browser. There is no need for a separate Wifi Access Point. There is also no need to build a separate app for your mobile phone.\nIOT is the hot thing today with more and more devices getting connected to the Internet. This course gives you a wide exposure to the many things NodeMCU can do. It is tailored for the beginner who has little knowledge about IOT. This makes it easy for you to get started and is backed by a 30-day money back guarantee. See you inside!",
      "target_audience": [
        "Beginner developers who want to build IOT projects without too much technical knowledge",
        "Anyone who wants to build remote control robots and also try ethical hacking using hardware",
        "Anyone who loves to have fun tinkering with hardware and IT"
      ]
    },
    {
      "title": "Complete PIC Microcontroller course from zero to hero",
      "url": "https://www.udemy.com/course/programming-on-pic16f877a-microcontroller-from-scratch/",
      "bio": "Deep dive into 8-Bit PIC microcontroller programming by reading the datasheet",
      "objectives": [
        "Programming PIC microcontroller in MPLAB X IDE with XC8 Compiler",
        "You will learn how to program a PIC Microcontroller from scratch with datasheet approach",
        "Build your own projects with the PIC microcontroller..",
        "You will be learning all the peripherals programming from scratch no libraries used in MPLAB X IDE",
        "The class starts from the basics of setting up a microcontroller programming and hardware environment."
      ],
      "course_content": {
        "Introduction to the Microcontroller": [
          "Introduction to PIC16F877A microcontroller"
        ],
        "Hardware & Software used in the Course": [
          "Hardware & Software used in the Course",
          "Dowloading and installing MPLAB X IDE with XC8 compiler from website",
          "Project creation in MPLAB X IDE"
        ],
        "General Purpose Input Output (GPIO) OF PIC16F877A": [
          "Port structure and pin layout of PIC16F877A",
          "GPIO register configuration for PIC16F877A"
        ],
        "LED's with PIC16F877A": [
          "Interfacing of single LED with PIC16F877A",
          "Interfacing of 8 LED's to single port of PIC16F877A"
        ],
        "7-Segment Display's with PIC16F877A": [
          "7-Segment display structure and working principle explained",
          "Interfacing of 7-Segment display with PIC16F877A"
        ],
        "Multiplexing 7segment display": [
          "Multiplexing 7Segment Display Explained",
          "Multiplexing 7segment Display's using polling method"
        ],
        "16x2 LCD's with PIC16F877A": [
          "16x2 Liquid Crystal Display working principle explained",
          "Interfacing of 16x2 LCD with PIC16F877A in 8-Bit mode format",
          "16x2 Liquid Crystal Display working principle in 4-Bit mode explained",
          "Interfacing of 16x2 LCD with PIC16F877A in 4-Bit mode format"
        ],
        "PushButton's with PIC16F877A": [
          "Digital input devices working logics explained",
          "Interfacing of pushbutton with PIC16F877A"
        ],
        "4x3 Keypad's with PIC16F877A": [
          "Matrix keypad working principle explained",
          "Interfacing 4x3 matrix keypad with PIC16F877A"
        ],
        "Relay's with PIC16F877A": [
          "Relay Working Principle Explained",
          "Interfacing Relay with PIC16F877A"
        ]
      },
      "requirements": [
        "Basic knowledge on electronics components",
        "Basic knowledge on C programming",
        "Download and Install Proteus Professional all other software links are provided",
        "Basic circuit building skills from schematics"
      ],
      "description": "Over a 47+ lecture videos, 8.5+ Hours of Full HD Content that will take you in an interactive learning to not only master the coding of PIC Microcontroller, but also learn the very basics of PIC Microcontroller internal structure and hardware schematics required for building your own products out of PIC microcontroller, how it really works, it’s parts and how your code is working inside the CPU of a Microcontroller.\nHi, welcome you all to this course on Programming on PIC16F877A microcontroller From Scratch.\nThe course is structured for the need of learners to understand microcontrollers from scratch till you master your skills. This course is the outcome of the experience I gained after training many of graduate students and working professionals in person, and with my expertise in the field of embedded systems. Few basic Embedded C concepts are also covered.\nSM Training Academy invites you all to enroll in this course and explore the world of embedded systems with step by step guidance by own expert trainers to excel in their career. There is no better way to master and understand the PIC microcontroller than joining this course. Whatever you want to learn is available in this course and also we will be updating the course with new lectures in a periodical manner. So join the course and enjoy learning.",
      "target_audience": [
        "Anyone with a curiosity for making electronics",
        "People with some experience in electronics",
        "People with an beginner knowledge of embedded systems"
      ]
    },
    {
      "title": "PCB Design: Master PCB Design using Ultiboard and Multisim",
      "url": "https://www.udemy.com/course/multisim-ultiboard-pcb-design-pcbdesign-using-ultiboard-and-multisim/",
      "bio": "Ultiboard is printed circuit board design and layout software that integrates seamlessly with Multisim to accelerate PCB",
      "objectives": [
        "What is an Ultiboard?",
        "Multisim and Ultiboard download",
        "Ultiboard User Interface",
        "Ultiboard Design Tools",
        "Draw Simple Circuit schematic",
        "Simple PCB Design",
        "Define board shape and size",
        "Compile design detect and eliminate design errors",
        "Eliminate errors and reduce manufacturing board iterations by Using design rule checker",
        "Route Printed Circuit Board (PCB)",
        "Auto route to speed up the routing process",
        "Arduino Shield PCB Design",
        "PIC Microcontroller Development Board PCB Design"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Section Intro",
          "Introduction",
          "What is Ultiboard and Why you should use it",
          "Foundations of PCB Design and Simulation",
          "Summary",
          "Introduction to PCB Design and Ultiboard",
          "Reading Meterial",
          "Introduction to PCB Design Tools"
        ],
        "Download and Install Multisim and Ultiboard": [
          "Section Intro",
          "Download and Install Multisim and Ultiboard",
          "Summary",
          "Reading Meterial"
        ],
        "User Interface Explained": [
          "Section Intro",
          "Multisim User Interface Explained",
          "Summary",
          "Reading Meterial"
        ],
        "Simple Schematic": [
          "Section Intro",
          "Drawing a Simple Schematic",
          "Create your first PCB Design",
          "Multisim and PCB Design Fundamentals",
          "Summary",
          "Reading Meterial",
          "Designing a Simple Circuit in Multisim"
        ],
        "Arduino UNO Shield": [
          "Section Intro",
          "Create a Schematic for Arduino UNO Shield",
          "Create a PCB for Arduino UNO Shield",
          "Summary",
          "Reading Meterial",
          "Quiz",
          "Designing a Custom Arduino Shield"
        ],
        "Arduino Boards Templates": [
          "Section Intro",
          "Arduino Boards Templates for Multisim",
          "Multisim Templates for Custom Arduino Shields",
          "Summary",
          "Reading Meterial"
        ],
        "PIC Microcontroller Breakout Board": [
          "Section Intro",
          "Create PIC Microcontroller Breakout Board Schematic",
          "Create PIC Microcontroller Breakout Board PCB",
          "Summary",
          "Reading Meterial",
          "Designing a Breakout Board for PIC Microcontrollers"
        ],
        "Led Controller Circuit Schematic and PCB Design": [
          "Section Intro",
          "Led Controller Circuit Schematic and PCB Design",
          "PIC Microcontroller and LED Controller PCB Design",
          "Summary",
          "Reading Meterial",
          "LED Controller PCB Design"
        ],
        "Who we are?": [
          "Who we are?"
        ],
        "Course Project": [
          "Multisim and Ultiboard Essentials",
          "Course Project",
          "Completed PCB Design and Simulation"
        ]
      },
      "requirements": [
        "Time, Dedication and Patience to learn and implement new knowledge.",
        "A PC"
      ],
      "description": "Ultiboard is printed circuit board design and layout software that integrates seamlessly with Multisim to accelerate PCB prototype development.\nThe creation of electronic circuits has been around for a long time now, and like any design, modeling is essential for the manufacturing of the end product. PCB layouts and other circuit designs need to be precise, accurate, and flawless for the manufacturer to create an effective and efficient final product. Speed is similarly essential in designing schematics at the end of the day. Your business needs to make a profit.\nWhy you should take this course?\nThe process of designing a PCB is made easier with Ultiboard because the software automates a lot of it for you.\nAs a result, you can create a more robust and easy-to-read board layout by using the Multisim components that are embedded in Ultiboard.\nOne benefit of the integration between Multisim and Ultiboard is that it allows you to work on both at the same time, which saves time.\nThese two tools help you identify potential issues before they become real problems, saving money and time.\nYou also save money by knowing how much material to order before starting the design process because Ultiboard helps calculate this for you.\nThis course aims to provide a comprehensive and detailed explanation from how to download Ultiboard, create a circuit, and maneuver around the platform, to the exportation of the design for manufacturing. We hope that this will be beneficial.\nWelcome to this course.\nWhat is this course about:\nIn this course, you will learn from start to finish, from zero to production-ready on how to design a Printed Circuit Board. It will help you to improve your PCB design skills, which will help you to get started freelancing or to get a job in PCB design with Multisim and Ultiboard since they're the most used PCB design tools.\nWhat you will learn in This Course:\nGet started PCB design using Multisim and Ultiboard.\nDownload and install Multisim and Ultiboard.\nCreate Arduino UNO Shield, PIC Microcontroller Breakout, and other Schematics in Multisim and Ultiboard.\nWire components in Schematic view.\nTransfer schematic into PCB.\nPlace components on board.\nCreate a multilayer board.\nRoute layers and place components on board.\nAutoroute to save time.\nEliminate design errors.\nCreate Gerber files for your manufacturer.\nUltiboard is mainly used for its benefits:\nEasy to use and efficient PCB layout program.\nOptimum control and management of the environment.\nTransfer of simple schematics to PCB.\nFile Standardization - You can export your design file in one format such as DXF or Gerber to another format that is required for standardization purposes.\nNI Ultiboard, or formerly ULTIboard, is an electronic Printed Circuit Board Layout program that is part of a suite of circuit design programs, along with NI Multisim. One of its major features is the Real-Time Design Rule Check, a feature that was only offered on expensive workstations in the days when it was introduced. Ultiboard includes a 3D PCB viewing mode, as well as integrated import and export features to the Schematic Capture and Simulation software in the suite, Multisim.\nUltiboard software offers efficient PCB design layout and routing with a customizable environment. You can use its flexible tools to place parts and copper with manual precision to define critical board elements. With its automated functionality, you can quickly complete a design. The advanced spreadsheet view, toolbox, and design wizards help you easily manage, control, and define any board layout. Seamless integration with Multisim software provides a simple schematic transfer to PCB, and forward and backward annotation ensures design iteration management. You can easily export industry-standard file formats such as Gerber and DXF to complete the design flow from schematic to layout.\nWhat you will learn\nGet started PCB design using Multisim and Ultiboard.\nDownload and install Multisim and Ultiboard.\nCreate Arduino UNO Shield, PIC Microcontroller Breakout, and other Schematics in Multisim and Ultiboard.\nWire components in Schematic view.\nTransfer schematic into PCB.\nPlace components on board.\nCreate a multilayer board.\nRoute layers and place components on board.\nAutoroute to save time.\nEliminate design errors.\nCreate Gerber files for your manufacturer.\nWho is this course for\nBeginners interested in PCB design.\nElectronics hobbyists and enthusiasts.\nEngineering students and professionals.\nAnyone looking to learn Multisim and Ultiboard for PCB design.\nRequirements\nNo prior experience required.\nA computer with Multisim and Ultiboard installed.\n\n\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in the Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge, we go into the depth of the topic and give you the exact step-by-step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years, we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy.\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million View, 20k+ Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelance engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their careers.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative teaching style that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, particularly for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to improve and make great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone who wants to Learn PCB design",
        "Have a tech kickstarter idea, that you want to get of the ground",
        "Want to create your own custom Arduino Printed Circuit Board (PCB).",
        "Want to get a job in PCB design",
        "Want to learn Ultiboard in the shortest possible time.",
        "Want to get started creating cool gadgets",
        "Want to learn Multisim Software for Circuit Design"
      ]
    },
    {
      "title": "How to Build a Custom Gaming PC",
      "url": "https://www.udemy.com/course/how-to-build-a-gaming-pc/",
      "bio": "The complete guide to designing and building your own custom PC.",
      "objectives": [
        "Design and Build a Custom PC",
        "Select Appropriate Parts for Any Build and Budget",
        "Install and Remove All PC Component Parts",
        "Manage Cables for Proper PC Case Airflow",
        "Build PCs for Other People"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How to Use This Course"
        ],
        "System Design": [
          "Introduction to System Design",
          "My Parts List",
          "Selecting Custom Parts",
          "System Cooling",
          "Operating Systems",
          "Additional Build Components"
        ],
        "The Case": [
          "JUST THE FACTS: PC Cases",
          "JUST SHOW ME: Preparing Your Case",
          "JUST SHOW ME: Case Fan Setup",
          "DIGGING DEEP: Case Air Pressures"
        ],
        "The Motherboard": [
          "JUST THE FACTS: Motherboards",
          "JUST SHOW ME: Motherboard Installation",
          "DIGGING DEEP: Bios, Overclocking, and More..."
        ],
        "Optical Drive(s)": [
          "JUST THE FACTS: Optical Drives",
          "JUST SHOW ME: Optical Drive Installation",
          "DIGGING DEEP: Bluray Players, Encryption, and Copy Protection"
        ],
        "Hard Disk Drives (HDDs)": [
          "JUST THE FACTS: HDDs and SSDs",
          "JUST SHOW ME: Installing the SSD",
          "DIGGING DEEP: RAID Arrays"
        ],
        "The Power Supply (PSU)": [
          "JUST THE FACTS: Power Supply Units",
          "JUST SHOW ME: PSU Installation",
          "DIGGING DEEP: Modular Designs"
        ],
        "The CPU": [
          "JUST THE FACTS: CPUs",
          "JUST SHOW ME: Installing the CPU",
          "DIGGING DEEP: Thermal Paste"
        ],
        "RAM (Random Access Memory)": [
          "JUST THE FACTS: RAM",
          "JUST SHOW ME: RAM Installation",
          "DIGGING DEEP: Latency, Bus Speed, and Timing"
        ],
        "The GPU (Graphics Card)": [
          "WAIT! Before connecting the GPU and PCIe Cards",
          "JUST THE FACTS: GPUs",
          "JUST SHOW ME: Installing the GPU",
          "DIGGING DEEP: SLI and Crossfire"
        ]
      },
      "requirements": [
        "No prior knowledge or experience is required.",
        "Basic understanding of computer hardware (CPU, Memory) is recommended.",
        "Philips Head and Flat Head Screwdrivers",
        "Computer parts may be purchased before or after enrolling."
      ],
      "description": "Learn how to build your very own custom gaming PC from the ground up! No prior experience or knowledge is required to enroll in this do-it-yourself project course.\nMy name is Cody Ray Miller, an IT professional and complete computer geek. I'll be walking you through the process of building your own PC step-by-step.\nThe course covers everything from selecting custom parts, to putting it all together. Plus bonus sections to help you DIG DEEP inside each piece of hardware and understand how it works and why..\nAlthough intended for absolute beginners, anyone can enroll in this course and follow along to build an awesome gaming PC for less than $1,000.\nAfter taking this course, you'll know exactly how to DESIGN and BUILD a computer system of any kind, for any purpose. You'll be fully equipped to create systems for other people, according to their specific needs.\nYou'll also increase your knowledge of all system components, thereby improving your ability to diagnose, troubleshoot, and repair PC hardware.\nAll course updates are 100% FREE. Buy this course one time and you own it for life. Not only that, but you will also gain lifetime access to me as your personal instructor. Have a question about building a PC? Just ask! You, as my student, are my #1 priority.\nWait, are you still reading this?! The course comes with a genuine 30 day, no hassles, money-back guarantee. So, there is absolutely nothing to risk here. Enroll today!",
      "target_audience": [
        "This course is primarily designed for absolute beginners who have never built their own PC before. Advanced users are discouraged from enrolling in this course."
      ]
    },
    {
      "title": "Dell EMC VNX Storage System",
      "url": "https://www.udemy.com/course/dell-emc-vnx-storage-system/",
      "bio": "Managing EMC VNX Platform",
      "objectives": [
        "Architecture of EMC VNX & Administration"
      ],
      "course_content": {
        "Dell EMC VNX Storage System": [
          "Introduction to EMC VNX Part 1",
          "Introduction to EMC VNX Part 2",
          "EMC VNX Hardware Components",
          "EMC VNX Logical Components",
          "EMC VNX Administration"
        ]
      },
      "requirements": [
        "Students should have basic knowledge on Storage Fundamentals, NAS & SAN"
      ],
      "description": "This course covers the configuration and management aspects of Dell EMC VNX Storage Solutions.\nIt is beneficial to storage professionals who are deploying and managing VNX Unified Storage in a Windows, Linux and Virtual Environments.\nVNX unified architecture offers block and file level storage services.  This section will cover VNX overview, fundamentals, use cases, VNX Hardware and software suites and licensing features.",
      "target_audience": [
        "Storage Professionals planning to upgrade their knowledge on EMC VNX"
      ]
    },
    {
      "title": "Laptop Repair : Bring Your Laptop Back to Life & Speed It Up",
      "url": "https://www.udemy.com/course/laptop-repair-course-training/",
      "bio": "Master Laptop Repair, Speed Tricks & Recycling. Learn Pro Fixes, Upgrades & Turn Old Laptops into Cash. Start Your Biz!",
      "objectives": [
        "Fix any laptop issue like a pro, from pesky blue screens to stubborn viruses, and bring those 'dead' machines back to life",
        "Supercharge old laptops by mastering hardware upgrades - swap out HDDs for speedy SSDs and boost RAM for lightning-fast performance",
        "Optimize laptop software to run like new, clearing out digital clutter and fine-tuning settings for maximum speed",
        "Turn your laptop repair skills into a money-making machine - learn to recycle, refurbish, and sell old laptops for profit",
        "Diagnose tricky laptop problems in minutes using professional technician secrets and troubleshooting techniques",
        "Launch your own laptop repair business from scratch, with insider tips on pricing, marketing, and building a loyal customer base",
        "Breathe new life into popular laptop brands like Dell, HP, Lenovo. with model-specific repair tricks"
      ],
      "course_content": {
        "Introduction to Laptop Repair Mastery": [
          "START HERE - Learn in YOUR Language (10 Subtitles!)",
          "Is This Course For You?"
        ],
        "Cracking Open Laptops: Your Repair Toolkit and Roadmap": [
          "Safety: Don't Fry Yourself: Staying Safe While Fixing Laptops",
          "Gearing Up: Must-Have Tools for Laptop Heroes",
          "[Practical Learning] : Playing with Your New Repair Toys",
          "Laptop Surgery 101: Cracking That Case Open",
          "[Practical Learning] Your First Laptop Dissection",
          "What's All This Stuff? Decoding Laptop Guts",
          "[Practical Learning] Poking Around Laptop Innards",
          "[Gift of the Section] Secret Sauce: Fixing Laptops Like a Boss",
          "Download your (FREE) Gift + Guide : How to use it?",
          "[Brain Hack] Squashing Those 'I Can't Fix It' Butterflies"
        ],
        "Supercharge That Laptop: Ram, SSD, and Battery Boosters": [
          "RAM Revolution: Giving Your Laptop a Memory Boost",
          "[Practical Learning] : Swapping RAM Like a Pro",
          "SSD Sorcery: Turbocharge Your Laptop's Storage",
          "[Practical Learning] : HDD to SSD Transformation",
          "Battery CPR: Resuscitate Your Laptop's Lifespan",
          "[Practical Learning] : Battery Swap Without the Shocks",
          "[Gift] : Insider Tricks: Squeeze Every Ounce of Speed from Your Upgrades",
          "[Brain Hack] : Shake Off the 'They'll Laugh at My Repair Skills' Jitters"
        ],
        "Software Wizardry: From BIOS Tweaks to Virus Busting": [
          "BIOS Basics: The Hidden Control Room of Your Laptop",
          "[Tips Practical Lesson]: BIOS",
          "Windows Whisperer: Installing OS Like You Wrote It",
          "[Tips Practical Lesson]: Windows",
          "Disk Detective: Cracking the Code of Storage Management",
          "[Tips Practical Lesson] : Disk Partition",
          "Virus Vaporizer: Zapping Digital Nasties Without Breaking a Sweat",
          "[Gift of the section] : Secret Weapon: Software Tricks",
          "[Brain Hacks] : The power of learning basics in tech field"
        ],
        "Cool Runnings: Thermal Tricks and Your Repair Debut": [
          "Chill Out: The Low-Down on Laptop Cooling and Thermal Paste",
          "[Practical Learning] : Thermal Paste Application and Fan Cleanup Masterclass"
        ]
      },
      "requirements": [
        "An old laptop you can practice on - it's your hands-on learning lab for mastering laptop repair skills",
        "A burning desire to become a pro-level laptop technician - we'll turn your passion into expertise"
      ],
      "description": "Is your laptop on life support? Don't pull the plug just yet!\nWelcome to \"Laptop Repair: Bring Your Laptop Back to Life & Speed It Up\" - your one-stop shop for mastering the art of laptop resurrection and optimization.\nWhy let your old laptop gather dust when you can turn it into cash? In this hands-on course, you'll learn how to:\nDiagnose and fix common laptop issues like a pro\nUpgrade hardware for lightning-fast performance\nOptimize software to squeeze every ounce of speed from your machine\nRecycle and refurbish old laptops for profit\nWhether you're a budding technician, a DIY enthusiast, or an entrepreneur looking to start a lucrative tech business, this course has got you covered.\nHere's what you'll master:\nPro-level diagnostic techniques to identify any laptop problem\nStep-by-step hardware upgrades, from RAM to SSD installation\nSoftware optimization secrets to boost laptop speed dramatically\nEffective virus removal without losing your data\nAdvanced troubleshooting for tricky issues like blue screens and overheating\nBusiness basics to kick-start your laptop repair venture\nBut wait, there's more! You'll also discover:\nHow to breathe new life into laptops from top brands like Dell, HP, Lenovo.\nEco-friendly upgrade techniques to make your laptop last longer\nTips and tricks for gaming laptop optimization\nInsider secrets on turning laptop repair into a profitable side hustle or full-time gig from this great laptop repair training\nBy the end of this course, you'll be able to:\n✓ Fix and upgrade laptops like a seasoned pro\n✓ Speed up even the slowest machines\n✓ Start your own lucrative laptop repair business\n✓ Save hundreds on repairs and upgrades\n✓ Turn old laptops into cash-generating machines\nDon't let another day go by with a sluggish laptop or missed tech opportunities. Enroll now and start your journey to becoming a laptop repair wizard!\nRemember: Today's tech trash is tomorrow's treasure. Learn how to find the gold in old laptops and turn your skills into cold, hard cash!\nP.S. This course includes a free certification upon completion this laptop repair course. Boost your credibility and attract more clients with your newfound expertise!\nReady to give your career (and old laptops) a speed boost? Let's get started!",
      "target_audience": [
        "Tech enthusiasts itching to breathe new life into old laptops - whether it's your own dusty machine or a friend's slow PC, you'll learn to work magic",
        "Aspiring laptop repair technicians ready to turn their passion for gadgets into a thriving career - we'll equip you with pro-level skills to tackle any laptop issue",
        "DIY-ers tired of paying sky-high repair bills - discover how to fix and upgrade your laptop, saving a bundle in the process",
        "Entrepreneurs looking to kickstart a laptop repair business - we'll show you how to turn tech skills into cold, hard cash",
        "Career switchers eyeing the booming field of computer repair - get the hands-on training you need to make a confident leap",
        "Budget-conscious folks wanting to squeeze more life out of their old laptops - learn to boost speed and performance without breaking the bank",
        "Eco-warriors passionate about reducing e-waste - master the art of recycling and refurbishing laptops for a greener planet",
        "Curious minds hungry to understand what makes laptops tick - we'll demystify laptop hardware and software, from the inside out"
      ]
    },
    {
      "title": "Learn ESP32 with this 30 Days Challenge",
      "url": "https://www.udemy.com/course/learn-esp32-with-this-30-days-challenge/",
      "bio": "This 30 days challenge will teach you how to use ESP32 to its fullest potential.",
      "objectives": [
        "1. You will get a good foundation in ESP32",
        "2. You will be able to create projects easily",
        "3. You can use ESP32 for your own projects",
        "4. It is a great way to learn more about electronics",
        "5. You will have fun learning ESP32",
        "6. Be able to apply your knowledge in different projects",
        "7. Get a deeper understanding of the hardware and software"
      ],
      "course_content": {
        "Day 1- 6: IoT Internet of Things Crash Course": [
          "who we are",
          "Introduction",
          "Hardware and Software Requirements",
          "What is ESP32",
          "Exploring ESP32 Applications and Learning Strategies",
          "ESP32 Features and Specifications",
          "Important Note Review System",
          "IoT and ESP32 Basics",
          "ESP Board Overview",
          "ESP 32 Pinout v1 DOIT",
          "Download and Install Arduino IDE",
          "ESP8266 Download and Install Arduino ESP and USB Driver",
          "ESP32 v1 Download and Install Arduino Development environment",
          "ESP32 Board Overview and Setup",
          "USB Driver for ESP32",
          "JSON Links to ESP32 Library for Arduino IDE",
          "Getting Started with ESP32 and IoT Basics"
        ],
        "Day 7 - 9: ESP32 Programming without Coding": [
          "Load your first code",
          "Blinking a LED",
          "Hello World! Blinking a LED Code",
          "Loading Code and Blinking an LED on ESP32",
          "Control Built In Touch Sensor with LED",
          "The Touch Sensor Code",
          "Dealing with Analog Signal",
          "Analog Input",
          "Dealing with PWM Control",
          "ESP32 Touch Sensor, Analog Signals, and PWM Control",
          "PWM",
          "Simple Servo Motor Control Code",
          "Advance Servo control Using",
          "Connecting to internet",
          "Simple Wifi Server",
          "Reading Temperature and Humidity",
          "Sending and receiving Data from a Local Web Page",
          "Exploring Basic ESP32 Programming Concepts"
        ],
        "Day 10 - 12: ESP32 OTA Update(Over the Air) course": [
          "Introduction",
          "What is OTA (Over The Air) technique",
          "Libraries needed and how to install them",
          "Coding your First OTA enabled ESP32 code example",
          "The Code",
          "Uploading OTA Enabled Code Example to ESP32 board",
          "Upload New Code Over The Air Thing you must know",
          "ESP32 OTA Update (Over the Air)",
          "Implementing OTA Updates on ESP32"
        ],
        "Day 13 - 15: ESP32 Web Server": [
          "Introduction",
          "What is a web server",
          "ESP32 Operating modes",
          "Circuit Design",
          "ESP32 Web Server Basics",
          "Understanding how esp32 works as a server",
          "Coding WiFi and Webserver settings",
          "Coding HTTP Requests and Server Start",
          "Coding Client Methods",
          "The Code",
          "Writing HTML Code for Webpage",
          "Practical",
          "Coding and Setting Up an ESP32 Web Server",
          "Building a Basic Web Server with ESP32"
        ],
        "Day 16 - 18: ESP32 Email Alert Based on Sensors Reading": [
          "Introduction",
          "Install ESP32 Mail Library for Arduino",
          "What is SMTP Server",
          "SMTP Server Settings",
          "ESP32 Email Alerts and SMTP Basics",
          "Coding the ESP32 Email Alert Project Part",
          "Coding the ESP32 Email Alert Project Part2",
          "Practical Testing",
          "Sensor Alert via Email",
          "Coding and Testing ESP32 Email Alert System",
          "Sending Email Alerts from ESP32"
        ],
        "Day 19 - 21: Create IoT Smart Garden with ESP32 and Blynk": [
          "Introduction",
          "Hardware and Software Requirements",
          "Working Principle",
          "Circuit Connection",
          "IoT Smart Garden with ESP32 and Blynk",
          "Coding ESP32 Part 1",
          "Coding ESP32 Part 2",
          "Coding Setup and Loop Part",
          "Coding the ESP32 for IoT Smart Garden Project",
          "Blynk App Download and Setup",
          "mobile Blynk App Download and Setup",
          "Auth Code and WiFi Settings",
          "Setting Up the Blynk App for IoT Smart Garden Project",
          "Smart Garden Project with ESP32 and Blynk"
        ],
        "Day 22 - 24: ESP32 + Telegram: Get Real-time notification for FREE": [
          "Introduction",
          "Hardware and Software Rewuirements",
          "Creating Telegram Bot for Iot",
          "Installing the Required Arduino Libraries",
          "Setting Up Telegram Notifications for ESP32 IoT Projects",
          "Circuit Schematic how to find the missing part",
          "Write your Code Libraries and Variables",
          "Write your Code SetUp",
          "Write your Code Loop",
          "Coding and Circuit Setup for ESP32 + Telegram Integration",
          "Practical Testing",
          "Practical Testing 2",
          "Sending Temperature Sensor Reading to Telegram Bot",
          "Real-Time Notifications with ESP32 and Telegram"
        ],
        "Day 25 - 27: ESP32 + Databases to Control Anything Anywhere": [
          "Introduction",
          "PHP Part - Hosting Your Website",
          "Creating SQL Table",
          "Integrating ESP32 with Databases for Remote Control",
          "The Code",
          "PHP Script to Insert Data in Database",
          "The Data Code",
          "PHP Script to Display Reading",
          "The Display Code",
          "Coding ESP Part 1",
          "Coding ESP Part 2",
          "PHP and ESP32 Coding for Database Integration",
          "Practical Live Demonstration",
          "Add Actual Sensors and display Reading on Webpage",
          "Storing and Accessing Data with ESP32 and Databases"
        ],
        "Day 28 - 30: ESP32 + Arduino Interfacing: A Step by Step Course": [
          "Introduction",
          "Hardware and Software Requirements",
          "What is MQTT and why we need it",
          "Create mqtt server account cloud mqtt",
          "Create mqtt server account",
          "Understanding and Setting Up MQTT for ESP32 and Arduino Interfacing",
          "Arduino Coding",
          "The code",
          "Esp Coding Part1 Define Variables",
          "ESP Coding Part2 Wifi and MQTT",
          "ESP Coding Part3 Read Incoming Data from Arduino",
          "ESP32 The Code",
          "Coding for ESP32 and Arduino Integration with MQTT",
          "Circuit Connection Explained",
          "Connect Arduino Board and Make sure it works",
          "ESP32 Code Update and Upload",
          "Final ESP32 Server Test",
          "Finalizing ESP32 and Arduino Integration with Circuit Connections and Testing",
          "Interfacing ESP32 with Arduino for Data Exchange"
        ],
        "Practice Test": [
          "Learn ESP32 with this 30 Days Challenge Practice Test"
        ]
      },
      "requirements": [
        "willingness to learn . you will learn everything you need to know",
        "No prior experience with ESP32 is required."
      ],
      "description": "Introduction:\nAre you looking for a single course to teach you everything about the ESP32? Look no further, this 30-day challenge course is for you. The course is designed for beginners who want to get started with the ESP32. We will start by configuring the wifi and network so that you can start coding and using the ESP32.\n\n\nIn the next 30 days, we will cover all the basic features of the ESP32 using a series of sample programs.\nDuring these 30 days, you will develop your programming skills and learn how to use the various tools available for your work.\nYou will also learn how to connect to the ESP32 using the Arduino IDE and make use of libraries.\n\n\nThe ESP32 is a microcontroller with built-in Wi-Fi and Bluetooth capabilities. The ESP32 is a full-featured and powerful microcontroller that can be programmed using C/C++ or other languages.\nIt has a lot of great features, including WiFi, Bluetooth, low power consumption, dual-mode Wi-Fi and Bluetooth connectivity. The ESP32 provides an integrated Wi-Fi and Bluetooth solution, which is the first fully integrated dual-mode Wi-Fi and Bluetooth SoC.\n\n\n\n\nThis course is on includes video content as well as text. The video content will include an overview of the ESP32, followed by an introduction to programming it. The videos also cover the following topics:\n\n\nDay 1- 6: IoT Internet of Things Crash Course\nDay 7 - 9: ESP32 Programming without Coding\nDay 10 - 12: ESP32 OTA Update(Over the Air) course\nDay 13 - 15: ESP32 Web Server\nDay 16 - 18: ESP32 Email Alert Based on Sensors Reading\nDay 19 - 21: Create IoT Smart Garden with ESP32 and Blynk\nDay 22 - 24: ESP32 + Telegram: Get Real-time notification for FREE\nDay 25 - 27: ESP32 + Databases to Control Anything Anywhere\nDay 28 - 30: ESP32 + Arduino Interfacing: A Step by Step Course\nThe ESP32 turns the Arduino IDE into an efficient development platform for all kinds of embedded projects. With the growth of the IoT market, ESP32 is one of the best technologies to fight against competition with its features such as dual-core processor, Wi-Fi, and Bluetooth. The ESP32 is integrated with WIFI and Bluetooth which can be used to connect to the sensors and other devices.\n\n\nWhy you should take this course?\nLearn ESP32 with this 30 Days Challenge course\nLearn how to use different components of the ESP32\nGet up to speed with the basics of programming and using the ESP32\nGet access to a range of tutorials and resources to help you further your knowledge\nYou can use ESP32 for a wide range of applications, including home automation, IoT, and more.\nLearning ESP32 will give you an edge over other programmers.\n\n\nYou will learn everything about ESP32 using this 30 days challenge.\nSign up for the challenge today!",
      "target_audience": [
        "If you have a basic understanding of microcontrollers and programming, then this course will be a great introduction to the ESP32",
        "This course is designed to be a beginner-friendly introduction to the ESP32. However, there are also some advanced topics that you may want to look into if you have prior experience with microcontrollers and programming.",
        "If you have some experience with programming, GPIOs, and LEDs, then this course will be a great introduction to the ESP32. No prior experience with the ESP32 is required."
      ]
    },
    {
      "title": "Advanced AC Drive- VFD, Servo & Stepper - Powerflex & Delta",
      "url": "https://www.udemy.com/course/learn-vfd-in-a-day/",
      "bio": "Learn programming and PLC Interfacing of Allen Bradley & Delta AC Drives - VFD and Servo by LIVE Examples",
      "objectives": [
        "To program the VFD and Servo with customize parameter suitable to the application",
        "To design turn key circuit for VFD's and Servo Drives",
        "To interface VFD's and Servo with PLC for intelligent operation"
      ],
      "course_content": {
        "Understanding VFD & Start up Parameters": [
          "Understanding VFD- Variable Freq. Drive",
          "Selecting the source of Freq.in VFD",
          "Selecting the source of Operation in VFD",
          "Join our student community"
        ],
        "Auxiliary Parameters in VFD": [
          "Acceleration & Deceleration Time Setting in VFD",
          "Jog Mode of Operation in VFD",
          "How to select the Multiple Sources of Frequency in VFD",
          "How to Disable the Reverse Operation of Motor?",
          "How to Secure/Lock your Parameter?",
          "Multi-step Speed Commands in VFD",
          "Connect with me on LinkedIn",
          "Updates in Industrial Internet of Things"
        ],
        "Internal PLC Mode Operation in VFD": [
          "Internal PLC Mode - I",
          "Internal PLC Mode- II & III",
          "Internal PLC Mode- Direction Control",
          "Join our Telegram group"
        ],
        "Other Special Parameters in VFD": [
          "Acceleration & Deceleration Time 2 & Speed Inhibit",
          "How to Bound the Frequency of Drive (Upper Bound & Lower Bound Function)",
          "How to Reset the External Fault in Drive?",
          "Internal Counter of VFD",
          "How to change External Control of VFD?"
        ],
        "VFD Feedback Signals": [
          "VFD Operational Feedback (ON/OFF) - How to read Feedback in PLC",
          "How to read VFD Fault Feedback?",
          "Reading feedback of getting Desired Frequency in VFD"
        ],
        "VFD Biasing - Voltage & Frequency Curves": [
          "VFD Biasing Introduction",
          "Exercise 1: Biasing the Frequency",
          "Exercise 2: Biasing the Frequency with Pot. Freq. Gain",
          "Exercise 3: How to Double the Pot. Freq Gain?",
          "Exercise 4: Biasing the Voltage",
          "Exercise 5: Biasing the Voltage with Pot. Freq. Gain",
          "Exercise 6: Controlling Frequency (0 ~ 50Hz) by 5V ~ 10V signal",
          "Exercise 7: Using full Pot. Scale to Control Speed, Operation & Dir. of Motor",
          "Delta VFD Synchronization with Analog Output Gain Setting",
          "PLC-VFD Modbus Example",
          "PLC- VFD MODBUS Communication Presentation",
          "HMI-VFD Modbus Communication",
          "Delta VFD Circuit Diagram"
        ],
        "VFD Supported Documents & Supplementary material": [
          "VFD- Delta M Series User Manual",
          "Allen Bradley VFD Presentation for Download",
          "Delta VFD Presentation for Download"
        ],
        "VFD Questionnaire with Solutions": [
          "VFD Test 1",
          "VFD Test 2"
        ],
        "Allen Bradley VFD- Powerflex 4M Video Tutorials": [
          "Understanding the VFD- Power Flex 4M",
          "Understanding the Wiring & Circuit Diagram",
          "How to Reset the Drive & Enter Start up Parameters"
        ],
        "Allen Bradley VFD- Various Source of Operation": [
          "How to Run the Drive from Local Keypad",
          "Programming the Drive for 3 Wire Control Mode",
          "Source of Operation- 2 Wire Control",
          "Stop Methods in VFD"
        ]
      },
      "requirements": [
        "Internet"
      ],
      "description": "This course will teach you to step by step How to Install & program AC Drives i.e. VFD- Variable Frequency Drives and Servo Drives in any control system. AC Drives are used to control the Speed, Operation, Torque & direction of the Motor.\n\nThis course includes High-Quality AC Drive Video Tutorial on various Programming parameter which makes the motor control Operation Intelligent. We have made an explanation by Real-Time LIVE Camera & Designing Software to understand the concept clearly.\nCourse Outline\nLearn how to wire the VFD\nLearn how to select various modes of VFD\nLearn how to write Parameters on the VFD\nHow to connect I/O to the VFD for frequency control\nReading feedback from the VFD as Analog output\nLearn how to control VFD using Analog I/Os of PLC\nLearn how to control Servo drive using high-speed outputs from PLC\nLearn how to control Stepper drive using high-speed outputs from PLC\nIncludes Presentations\nVFD and Servo Circuit Diagrams\nExplanation of PLC programming to control VFD\nUsed Ladder logic as PLC Programming language\nPLC-VFD and PLC- Servo Interfacing Examples\nHardware which is covered in this course are:\nDelta PLC 14SS\nDelta PLC Analog cards\nAllen Bradley PLC Micrologix 1400\nAllen Bradley PLC Analog I/Os\nDelta VFD M Series\nAllen Bradley- Powerflex 4M\nDelta B Series Servo drive\nStandard Stepper drive and motor\nCircuit diagrams & Manuals are added in the supplement material. For any help, pop me a question!",
      "target_audience": [
        "Maintenance Technician",
        "Application Engineers",
        "PLC Programmers"
      ]
    },
    {
      "title": "Mastering Cypress PSoC-An Embedded System Design perspective",
      "url": "https://www.udemy.com/course/mastering-cypress-psoc-an-embedded-system-design-perspective/",
      "bio": "Design Hardware, Develop Firmware & Integrate both to see the reflection of your idea.",
      "objectives": [
        "Build applications on unconventional processing element PSoC",
        "Work comfortably on PSoC creator",
        "Develop firmware for embedded processors",
        "Configure various digital and analog peripherals, and interface them to PSoC",
        "Customize PSoC to suit the requirement of system designer",
        "Will learn the fundamentals of discrete components like LED, LCD, Switches etc.,",
        "Can pick suitable communication protocols and program them to initiate communication",
        "Can drive the processor into low power modes like Sleep, Hibernate etc.,",
        "Can update the Firmware on the field with Bootloader",
        "Able to Interface sensors like Accelerometer, Temperature Sensor, Ambient Light Sensor etc., to the CPU"
      ],
      "course_content": {},
      "requirements": [
        "Basics of C programming",
        "Be able to understand Microcontroller's terminology",
        "Windows installed PC",
        "PSoC4 M-series pioneer kit (or any PSoC4 or PSoC5 development kit)."
      ],
      "description": "It is the beginning course in \"Mastering Cypress PSoC\" series & It is on Embedded System Design perspective. It teaches you developing embedded applications on an unconventional processing element PSoC. It gives an experience of working on PSoC Creator, an IDE platform. It teaches you configuring and programming Analog, Digital peripherals & Initiating communication with CPU. It teaches to set up serial communication between two devices. Overall, By the end of this course one can customize the chip to a system that acts as you wish.",
      "target_audience": [
        "Student/Hobbyist/Engineer/Anyone with electronics background.",
        "Those who want to experience unconventional processing element",
        "Those who are beginners and want to be master in developing embedded applications."
      ]
    },
    {
      "title": "Advanced Hardware and PCB Design Masterclass 2022 -EsteemPCB",
      "url": "https://www.udemy.com/course/advanced-hardware-design-course/",
      "bio": "Advanced Hardware Design Course Part-1 RK3399 COB (LPDDR4 SDRAM, WIFI/BT, EMMC, PMIC, 260 Pin DDR4 System on Module)",
      "objectives": [
        "How to Extract Selection information from Requirement Sheet for Processor, SDRAMs, EMMC, WIFI/BT modules etc.",
        "How to Choose a Processor by Defining its No. of Core, Cache, Bandwidth, Clock requirements.",
        "Different Architecture of Processor for Ex. Little-big, and Memory Organization.",
        "Types of Internal and External SDRAMs (DDRX, LPDDRX, and their Enhanced versions).",
        "Comparisons of External SDRAMs up-to DDR5 and LPDDR5",
        "Different Signal Groups of SDRAM (Data, Address & command, Control and Clock Groups)",
        "Develop a Set Procedure on selection of SDRAM, PMIC, EMMC, WIFI Module, Processor for Mobile Application.",
        "How to Read the Datasheet of Different components used in this Board RK3399, 2GB LPDDR4 SDRAM, 16GB EMMC, PMIC, WIFI/BT Module etc.",
        "Pin Mapping of SDRAM, EMMC, SDIOs, MIPIs, EDPs, Type-C, USB3.0 & 2.0, SDMMC etc. with RK3399 on a Simple Excel Sheet.",
        "How to Design the Schematic of Processor, SDRAM, EMMC, WIFI, PMIC using their Respective datasheets and Design Guidelines Documents.",
        "Discussion of Different WIFI/BT Module Certification and Regulation as per US, Europe, Canada etc.",
        "Impedance Profile Planning of More than 1000 interconnects on a Excel Sheet.",
        "Layer Stack up (4/6/8/12L), Finish the Components Placement Planning and its Execution.",
        "Layout Planning, Preliminary Layout, High Speed Design Rules and Length Matching, Power Plane Planning by Sections, Optimization of Layout Loop-1 and Loop-2",
        "FAN-OUT of #828 Balls of RK3399, #200 Balls of LPDDR4 SDRAM and #180 Balls of EMMC."
      ],
      "course_content": {
        "Introduction of Website, Requirement Sheet, Processor Selection, DDRX and Quizz": [
          "Section-1 Introduction and attachment details.",
          "Small Glimpse of Part-2 RPI-4 and Part-3 FPGA board",
          "Requirements Sheet Explanation",
          "Basics of SOC or Processor Selection",
          "DDR/DDR2/DDR3/DDR4/DDR5 In very detail",
          "Answers of Quizzes section-1"
        ],
        "LPDDRx Interfaces Comparisons, Signal Groups, topologies, RK3399 Datasheet": [
          "Section-2 Introduction and attachments details.",
          "LPDDRx Interface detailed Discussion and Comparisons",
          "Signal Groups and Introduction of signals on DRRX LPDDRX",
          "DDRX LPDDX Interface Topologies and Some Mathematical relations",
          "RK3399 Datasheet detailed discussion of all the features",
          "LPDDR4 Selection and Assignment no-1 Explanation"
        ],
        "LPDDR4 Datasheet, Library introduction, SDRAM Schematic, and COBs Block Diagram": [
          "Section-3 Introduction and attachment details.",
          "Datasheet reading of LPDDR4 SDRAM",
          "EsteemPCB COB Library introduction",
          "LPDDR4 Schematic Design Using Datasheet and Design Guidelines",
          "Block Diagram of COB Board"
        ],
        "Selection of PMIC, Datasheet and System Requirement, Power Distribution Block.": [
          "Section-4 Introduction and attachment details.",
          "Selection of Correct PMIC, List of Columns for Comparison Table",
          "RK3399 System Requirement, PMIC Datasheet and Design Guidelines",
          "Power Distribution Blocks for COB"
        ],
        "PMIC Schematic Design, EMMC Datasheet and Schematic design, WIFI Modules.": [
          "Section-5 Introduction and attachment details.",
          "PMIC Schematic Design",
          "PMIC Schematic Design Part-2",
          "EMMC Selection and List of parameters JEDEC EMMC 5.1",
          "EMMC Datasheet and Schematic design",
          "WIFI Modules selection parameters"
        ],
        "Details of WIFI Module parameters and Datasheets of WF60, AP6356S, RK3399 Blocks": [
          "Section-6 Introduction and attachment details",
          "Details of WIFI Modules parameters and Datasheets of WF60, AP6356S",
          "Blocks of RK3399 and List of Page required for creating its schematic"
        ],
        "Power Blocks and High-speed interfaces schematic blocks": [
          "Section-7 Introduction and attachment details.",
          "Schematic of Power blocks of RK3399",
          "EMMC, System Blocks schematic design",
          "SDMMC, ADC, PCIE, MIPI-DSI, EDP, HDMI Schematic blocks of rk3399",
          "Type-c, mipi-csi, gpios, i2cs, uarts schematic blocks for rk3399"
        ],
        "Interfaces I2C SPI UART RS232 RS485 LVDS I2S SDIO MII": [
          "Section-8 Introduction and attachment details.",
          "i2c and spi interfaces",
          "LVDS interfaces",
          "i2s and sdio interfaces",
          "different MII interfaces and assignment"
        ],
        "Other interfaces USB, MIPICSI DSI, EDP, HDMI, PCIE and Other schematic blocks.": [
          "Section-9 Introduction and attachment details",
          "Pending interfaces USB, MIPICSI DSI, EDP, HDMI, PCIE",
          "Pending schematic blocks of RK3399"
        ],
        "Stack-ups and VIA Drill Pairs and Placement planning": [
          "Section-10 Introduction and attachment details.",
          "Rules of layer stack-ups definition and selection",
          "4L , 6L, 8L, and 12L stack-up comparisons, VIA drill pairs",
          "Placement planning"
        ]
      },
      "requirements": [
        "Student should have Understanding of Board Design.",
        "Student should have Completed the Complex Mixed Signal Board Design Course.",
        "Student should have Patience and Determination to complete the course which has more than 10,000 interconnects and Lot of Dense Components to route.",
        "For this course Student should have \"Altium Designer\" Installed on their PC / Laptop",
        "You do not need any prior knowledge of \"Altium Designer\" because we'll going to do everything from scratch."
      ],
      "description": "I have Divided this Course into #13 Different Sections Under Each Section You will find Multiple Lessons:\nSection 1: Discuss the Requirement sheet and Processor RK3399 Datasheet in very detail.\nSection 2: How to Choose an SDRAM (SDR/DDRX/LPDDRX) ? from Very Scratch and Its Pin Mapping and Schematic Design From Datasheet.\nSection 3: Selection and Schematic Design of PMIC (Power Management IC) in very Details.\nSection 4: EMMC (Embedded Multimedia Card) Chip Selection, Pin Mapping, and Schematic Design.\nSection 5: WIFI/BT Module Selection, Certification (US/EU/CA), Selection, and Schematic Design.\nSection 6: Selection of External LDO/DC-DC/Buck-Boost and Their Schematic Design in very Details.\nSection 7: Schematic Design of RK3399, Pin Mapping and Impedances Planning on Schematic through Net-Classes.\nSection 8: Layer Stack up(4/6/8/12L), Finish the Components Placement Planning and its Execution Part-1\nSection 9: Components Placement Planning and its Execution Part-2\nSection 10: Components Placement Planning and its Execution Part-3\nSection 11: Layout Planning, Preliminary Layout, High-Speed Design Rules and Length Matching, Power Plane Planning by Sections, Optimization of Layout Part-1\nSection 12, 13: Power Plane Planning by Sections, Optimization of Layout.\nMajor Schematic Blocks that I have designed in this course are Project Block Diagram, \"Power Budget Block Diagram\", \"Power Supply Schematic for RK3399\", \"PMUIO Schematic Block of RK3399\", \"EMMC/PCIe/ADC Schematic for RK3399\", \"EDP/MIPI-DSI/HDMI Schematic for RK3399\", \"Type-C/USB3.0/USB2.0 Hosts Schematic for RK3399\", \"MIPI-CSI/GPIOs/I2C Schematic of RK3399\", \"MII/RMII/GMII/RGMII Schematic for RK3399\", \"SDR/DDRx/LPDDRx Schematic For RK3399\", \"PMIC/DC-DC/LDOs/Buck-Boost for RK3399\" and many more various subparts you will learn in this course as you can see on the curriculum sections and their lessons.\nYou will also learn some basic hardware designing blocks as well as You will also learn some Basic Blocks as well:\nPre-Schematic Design Blocks (Block Diagram and Power Budget)\nLayer Stack-up Selection and Rules for Defining any Stack-up\nDifferent Grounding Techniques( Signal Grounding, Earth Grounding, Chassis Grounding)\nPower Distribution Network Analysis (PDN Analysis) of any PCB.\nand many more things.\nFerrite Bead, ESD Diodes, and Magnetic Application and their selection.\nHow to do Placement and Layout Planning on Microsoft-Paint and many more.\nAfter the completion of this course, you can design any \"Processor Board\" without any Simulation models and third-party support.",
      "target_audience": [
        "People who have Intermediate experience with Hardware design and want to learn it",
        "People Who want to Learn High-Speed Board Design",
        "People who want to learn PCB designing",
        "People who want to Learn How to Select Components out of millions of chip available",
        "People Who wan to Learn How Create a Board on Altium Designer.",
        "People who want to enhance their Electronic Hardware Designing Skills.",
        "People want to Learn Impedance Profile, Length Matching, High-Speed Design Rules, Complex Layout, Advanced Layout Design etc."
      ]
    },
    {
      "title": "Allen Bradley Micrologix PLC Programming (PLC-SCADA-1)",
      "url": "https://www.udemy.com/course/learn-plc-programming-from-scratch-to-expert-level/",
      "bio": "Complete practical Training on Allen Bradley Micrologix series PLC.",
      "objectives": [
        "You will be enriched with the latest technical knowledge related with the industrial automation.",
        "Students can establish their career in various manufacturing industries like Oil and Gas, Water/Waste Water Treatment, food & Beverages, Power Plants, Manufacturing Process, Chemicals and Pharmaceutical Industries, Power Generation, Automotive, Fabricated Metals, Packaging Process, Metals and Mining’s Aerospace, etc."
      ],
      "course_content": {
        "History & Working of Programmable Logic Controller.": [
          "Introduction:",
          "History of Industrial Automation.",
          "PLC Block Diagram.",
          "Working of PLC.",
          "PLC Communication & Wiring Diagram."
        ],
        "PLC Programming Basics.": [
          "Features and Sink Source Concept",
          "Programming Language with XIC and XIO Instruction",
          "And OR Logical Case in PLC Programming.",
          "Holding and Interlocking Concept.",
          "Addressing Format.",
          "Software Installation.",
          "Software Interface.",
          "First Practical on Simulator.",
          "Assignment"
        ],
        "Implementation Holding and Interlocking Concept on Software.": [
          "Holding & Interlocking Concept.",
          "Example Based on Holding & Interlocking.",
          "Solution of Problem 1"
        ],
        "Timers (TON, TOF, RTO)": [
          "Timers Theory ( TON, TOF, RTO )",
          "TON Timer Concept",
          "TON Timer Example",
          "Solution of Problem 2",
          "TOF Timer Concept.",
          "Example based on TOF Timer",
          "Solution of Problem 3",
          "RTO Timer",
          "Solution of Problem 4"
        ],
        "Counters.": [
          "Basic Concept of Counter",
          "Concept of Counter UP",
          "Example based on Counter UP",
          "Solution of Problem 5",
          "Concept of Counter Down.",
          "Example Based on Counter Down.",
          "Solution of Problem 6."
        ],
        "Compare Block.": [
          "Theory of Compare Block.",
          "Limit, Equal and Not Equal Block.",
          "Less Than, Greater Than or Equal Blocks."
        ],
        "Math Blocks.": [
          "Math Block -Theory",
          "Addition & Subtraction Blocks.",
          "Multiplication , Division & Square Root Blocks."
        ],
        "Move Blocks & Latch Unlatch Output.": [
          "Move Block-Theory.",
          "Software Implementation of Move Function.",
          "Latch & unlatch an output."
        ],
        "Program Control Block.": [
          "Jump Label.",
          "Jump to Subroutine & Return.",
          "Software Implementation of Master Control Reset.",
          "Utility of Temporary End Function"
        ]
      },
      "requirements": [
        "Students are supposed to be familiar with Desktop/Laptop.",
        "No other prerequisites for this course, Because instructor will teach everything from scratch."
      ],
      "description": "Industrial Automation Technology (PLC/SCADA) :\nTo survive in the modern competitive business era, it is mandatory to use latest technology and understand modern industrial requirement to improve quality and quantity of product that we are manufacturing. Now a day’s automation technology provides an integrated, flexible and low-cost system platform, it contains various elements that perform a wide variety of functions like controlling, monitoring, and supervising to the industrial processes.\nAutomation is composed of two Greek words Auto means self, Motos meansmoving, hence if a process of moving (any devices/machineries) is self directed is called as Automation. Industrial automation includes use of various self controlling devices (PLCs/PACs/PC etc.) to operate industrial process and machineries. The automation technology has become back bone of modern industries, because by using Automation technology not only the quality and quantity of products have been maximized, but also it reduces the labor cost, risk factor and manufacturing time.\nExamples of Companies Using Automation Technology (PLC/SCADA):\nOil and Gas, Water/Waste Water Treatment, food & Beverages, Power Plants, Manufacturing Process, Chemicals and Pharmaceutical Industries, Power Generation, Automotive, Fabricated Metals, Packaging Process, Metals and Mining’s Aerospace, etc.\nIndustrial Automation Training by Corporate Trainer:\nThis Course is designed and developed by core industrial professionals having decades of experience in Industrial Automation, This course is not only ‘Hands-On’ practical based, but also includes project works to understand actual Industrial requirements, and work culture. So enjoy the course.",
      "target_audience": [
        "Students who are pursuing or having Masters/ Bachelor’s Degree /Diploma in EC/EE/EEE/EI Branches.",
        "Working Professionals are also invited to join this course to enhance their knowledge in Industrial Automation."
      ]
    },
    {
      "title": "Industrial Embedded Systems Hardware Penetration Testing",
      "url": "https://www.udemy.com/course/embeddedsystemshardwarepenetesting/",
      "bio": "Unlock offensive hardware security skills with tools and tactics tailored for the ICS/OT and IIoT domain!",
      "objectives": [
        "Build an affordable hardware hacking challenge board (we use a NodeMCU ESP8266 dev board) to apply your newly learned skills!",
        "Create a secure and functional hardware hacking lab for this course and your future assessments.",
        "Identify vulnerabilities in industrial embedded systems (ICS/OT and IIoT)!",
        "This is not a course on soldering!"
      ],
      "course_content": {},
      "requirements": [
        "Basic familiarity with Linux is helpful.",
        "Willingness to invest $10-$20 for essential tools and equipment.",
        "Chrome web browser."
      ],
      "description": "Step into the world of hardware penetration testing - where technology meets curiosity! If you’re experienced in traditional penetration testing, this course will open new doors, equipping you with the specialized techniques to target industrial embedded systems. Industrial devices present unique attack vectors and require a precise approach; here, you’ll develop the expertise to identify hidden entry points within PCBs, firmware, and industrial IoT components.\nStarting with the fundamentals of electrical and signal reconnaissance, you’ll learn the ins and outs of PCB hardware tools, delve into firmware and serial interfaces, and explore practical methods for exploiting these systems. This course is rooted in real-world case study industrial devices like a gateway and communication server. The Chronoguard Challenge Board bringing an authentic touch to your skill development. Each module is designed to deepen your understanding of how to leverage specialized tools like multimeters, logic analyzers, and flash programmers in your tests.\nBy the end of this hands-on course, you’ll have expanded your offensive hardware security toolkit with tactics tailored for the ICS/OT and IIoT domain, enabling you to craft advanced attack paths and discover vulnerabilities in industrial environments that remain untouched by traditional IT-focused methods. Elevate your penetration testing skills and gain the expertise needed to secure critical OT systems against the most sophisticated threats. Join now and be among the experts who can bridge the gap between IT and OT security.\nDisclaimer: Always prioritize electrical safety—avoid contact with exposed, voltage-carrying leads and be mindful of hazards. When applying these skills to industrial hardware, success is not guaranteed; debug interfaces are often undocumented or disabled. This course does not cover soldering skills; some basic craftsmanship and soldering knowledge are recommended for effective application.",
      "target_audience": [
        "Traditional Penetration Testers looking for new attack vectors.",
        "ICS/OT Security professionals",
        "Hobbyists with interest in hardware security"
      ]
    },
    {
      "title": "Program an Fpga for someone that has no Fpga experience",
      "url": "https://www.udemy.com/course/learn-how-to-program-an-fpga/",
      "bio": "This programming course is made for a first time beginner.",
      "objectives": [
        "I want to show you how to program 15 digital circuits into an FPGA trainer board using the Xilinx ISE software tool. Each lesson starts by explaining how the logic works in one of the digital circuits. In this course, the programming code for the circuit, in the fpga, will be described with Vhdl programming code. The programming code for each of the 15 circuits, are converted to a bit file and the bit file programs the circuit into an fpga trainer board. The trainer board is now ready to test the circuit. Step by step procedures will show you exactly how to do this course. Learning how to program an FPGA is just like learning how to drive a car. You can read all about driving a car, but until you get behind the wheel and try it for yourself you won't be able to do it. If you view this entire course and complete everything in it, you will have the knowledge to be able program an FPGA by yourself.",
        "You will learn how to describe a circuit using Vhdl code",
        "15 circuits of Vhdl programming code have already been written for this course."
      ],
      "course_content": {
        "Introduction": [
          "Why learn my course",
          "Introduction"
        ],
        "Learn how to program an Fpga": [
          "Welcome with andgate code",
          "Procedure for programming an fpga",
          "Orgate",
          "D flip-flop",
          "Multiplexer",
          "Decoder",
          "Arithmetic Logic Unit",
          "7 Segment Display",
          "Register",
          "Binary Counter",
          "Program Counter",
          "Rom",
          "Ram",
          "Matrix Display using rotate registers",
          "Matrix Display using a Ram",
          "Timing and control for 2 instruction computer",
          "system video and course information",
          "How to buy the Fpga trainer board. The new name of the board is Elbert v2."
        ]
      },
      "requirements": [
        "If you know something about these topics it will help you in this course: binary numbers, hexadecimal numbers, programming, wiring a circuit, digital circuits, basic electronics"
      ],
      "description": "This 3 ½ hour video course is divided into sections showing 16 hardware code routines. To see the routines working, you will need a $30.00 fpga trainer board. The last lesson in  this course will show you where to buy the trainer board. You will also need to download a free software tool called the -Xilinx ISE- so you can write and test hardware code routines on your computer.\nIf you take the hardware code for a digital circuit part and program it into an fpga, the hardware code will configure the circuit into the fpga. The best thing about an fpga is, a whole circuit board full of digital parts can be programmed into one fpga. This technology is very important and I want to show you how it is done. Reading a book is not the easiest way to learn how to program an fpga. A better way is to view step by step explanation videos. Digital circuit boards today using an fpga are less expensive, contain fewer parts, and the design process takes less time.\nBecause hardware coding is different than conventional programming, examining working code routines is a better way to learn how to program an fpga. I have put together 16 different hardware code routines. Each routine is explained in a video lesson. Because hardware code routines can be very difficult to understand, each routine is explained by me in detail. After explaining the code, you will see a video of me testing the code on the fpga trainer board. Your computer's usb plug and cable sends the programming code to the fpga trainer board.\nIt is a long process to learn how to program an fpga, but your effort will be rewarded if you stick with the course. When you end this course you will be one of the very few who know how to program an fpga.\nIf you have any trouble understanding this course, or you have trouble downloading the -Xilinx ISE- or anything else, I will be glad to help you. I learned a lot making this course, I think you will too.",
      "target_audience": [
        "Anyone with some hardware knowledge",
        "Anyone that wants to program hardware code"
      ]
    },
    {
      "title": "Embedded Systems Object-Oriented Programming in C",
      "url": "https://www.udemy.com/course/embedded-systems-object-oriented-programming-j/",
      "bio": "End-to-End Firmware and Driver Development: UART,GPIO,TIMER, etc. From Datasheet to Embedded C and C++",
      "objectives": [
        "Apply Objected-Oriented Principles to Firmware development",
        "Write Objected-Oriented Embedded-C Applications",
        "Write Objected-Oriented Embedded-C++ Applications",
        "Write Embedded Systems Drivers and Libraries using Objected Oriented C and C++",
        "Write firmware by applying Object-Oriented principles like Polymorphism, Inheritance and Encapsulation in C and C++",
        "Write embedded drivers from scratch in C++ using information from the datasheet. E.g. GPIO drivers, TIMERS drivers, UART drivers etc.",
        "Write embedded drivers from scratch in object-oriented C using information from the datasheet. E.g. GPIO drivers, TIMERS drivers, UART drivers etc.",
        "Build every single line of code from scratch by writing to the microcontroller’s memory space directly.",
        "Use No third party libraries or header files",
        "Understand and write every single line of code yourself- no Copy/Paste",
        "Use the debugger effectively to analyze and resolve any bugs",
        "Develop proficiency in your embedded development skills and confidently take the next steps",
        "Define addresses for the different peripherals",
        "Analyze the chip documentation",
        "Create registers from the addresses"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know.",
        "NUCLEO-STM32F4 DEVELOPMENT BOARD"
      ],
      "description": "Are you tired of Copying and Pasting code you don't understand?\nThis course is for anyone seeking to improve their embedded  firmware development skills. This course focuses on how to apply object-oriented principles to embedded firmware development.\nBy the end of this course  you will be able to write Objected-Oriented Embedded-C Applications as well as Objected-Oriented Embedded-C++ Applications.\nSo with that understood, let me tell you…\n\nExactly What You’re Getting\nThis is dramatically different from any course you have ever taken because it’s more of a professional hands-on “field guide” to stm32 bare metal firmware development.\nThe reason why is because there’s no fluff or filler. It immediately gets down to the actual subject, showing you exactly what to do, how to do it, and why.\nPlus, it’s easy.\nAnd you’ll immediately “get” the entire mythology I personally use to build firmware for consumer devices in my professional life.\n\n\n\n\nIt's About MORE Than Just Getting the Code to Work\nSee, this course will change your professional life forever. Here is what one student had to say about the 1st version (STM32F4) of the course :\n\n\n\"So far this class has been awesome. I'm a C programmer that's been using Python a lot lately so this class helps to make my C code look a little more object oriented and class based. Also, he goes through how to transform some C code into C++ code which is pretty great\"\nHere is what another student had to say :\n\"Absolutely it was a good match for me because I am new to the OOP in Embedded system and I have now gained good Understanding of C++ and OOP for Microcontrollers. Very detailed and nicely designed course I will regularly check for the new update. I think it is the best course about OOP on Embedded system.\"\n\n\nIf at least one of the following applies to you then keep reading if not then simply skip this course:\n\" Escape From \"\nCopying/Pasting code you don’t understand\nUsing third party libraries and header files like HAL, LL and StdPeriph\nExperiencing bugs you don’t understand\nBeing afraid of technical documentations like the reference manual and datasheet of the chip\nImposter syndrome\n\" Arrive At \"\nBuilding every single line of code from scratch by writing to the microcontroller’s memory space directly.\nUsing No third party libraries or header files\nUnderstanding and writing every single line of code yourself- no Copy/Paste\nUsing the debugger effectively to analyze and resolve any bugs\nDeveloping proficiency in your embedded development skills and confidently take the next steps\nSo like I said, there’s more than just getting each piece of code to work.\nHere’s an overview of what you’re getting...\nAnalyzing the chip documentations:\nBefore developing the firmware for any chip you have to learn how to read the documentation provided by the chip manufacturer.\n\n\nDefining Peripheral address\nAll components on the microcontroller have an address range. To write to a component or read from a component you need to locate its address range in the documentation and properly define the addresses in your code.\n\n\nCreating registers from the address:\nThe addresses in the address range of a component represent the registers of that component. To access these registers you have effectively typecast the addresses.\n\n\nUnderstanding CMSIS:\nCortex-Microcontroller Interface Standard (CMSIS)CMSIS is a standard developed by Arm for all Cortex-Microcontrollers. This is the standard used in professional firmware development\n\n\nBut it gets better because you’re also getting…\n\nDeep Lessons on Object-Oriented Concepts\nLike:\nPolymorphism\nInheritance\nEncapsulation\n\n\n\n\nSpecially Designed For People Who Hate Copy/Paste\nListen. If you don’t like “Copy/Paste” you’re not alone. I can’t stand it either. I’d literally rather have a piece of code that I wrote from scratch that doesn’t work than someone else’s working code I copied and pasted.\nAnd that’s why I’ve spent months designing and recording this course in which I show you how to locate every single register used and the meaning of every hexadecimal value written into the register.\n\n\nAlso it comes with a money back guarantee so you have nothing to loose.",
      "target_audience": [
        "This course is for anyone seeking to improve their embedded  firmware development skills. This course focuses on how to apply object-oriented principles to embedded firmware development.",
        "If you are an absolute beginner to embedded systems, then take this course."
      ]
    },
    {
      "title": "Arduino Programming and Hardware Fundamentals with Hackster",
      "url": "https://www.udemy.com/course/arduino-programming-and-hardware-fundamentals-with-hackster/",
      "bio": "Learn electrical engineering basics to build circuits and program Arduino to make wearables, robots, and IoT devices",
      "objectives": [
        "Master the fundamentals of Arduino programming with C/C++",
        "Build functioning circuits on a breadboard",
        "Control sensors, robots, and Internet of Things (IoT) devices using Arduino",
        "Write programs that perform basic math, light up LEDs, and control motors",
        "Design circuits and write code for your own project"
      ],
      "course_content": {},
      "requirements": [
        "Be able to use a computer (Windows and Mac covered in the course, Arduino will also work on Linux)",
        "Be able to solve simple algebra problems (e.g. find x in 2x+4 = 10)",
        "If you wish to use the online Arduino simulator, no additional hardware is needed",
        "For hands-on, an Arduino and supporting electronics are required (covered in Lecture 5)"
      ],
      "description": "Learn the Arduino platform and programming language to create robots, interactive art displays, electronic toys, home automation tools, and much more. This course was created in collaboration with Hackster.\nMaster the skills needed to bring your projects to life through electronics.\nLearn to program in Arduino (C/C++)\nBuild electronics that sense and react to the environment\nRemotely log data to an Internet of Things (IoT) platform\nUse the Internet to control your Arduino from anywhere in the world\nA versatile tool for prototyping, playing, and making\nArduino is both a hardware platform and programming language. By learning how to build circuits and code, you can add a new level of interactivity to your projects, prototype potential products, and gain new skills (while hopefully having fun).\nThe Arduino programming language is based on a combination of C and C++. With an understanding of these coding fundamentals, you will be able to more easily learn new languages, such as Java, Python, JavaScript, C#, and Swift, which are in high demand in the job market.\nCourse Overview\nThe first version of Arduino was released in 2003 and has exploded in popularity among makers, hobbyists, and tinkerers, who build everything from animatronic sculptures to interactive wearables. Professional engineers and entrepreneurs sometimes start with an Arduino to create a prototype before developing a finished product. The iconic blue board has even found its way into classrooms, where educators use it to teach programming, electronics, critical thinking, and problem solving skills.\nI designed this course with the absolute beginner in mind: if you do not have any experience with programming or electronics, that’s OK! The first few sections walk you through the basics behind programming in C/C++ as part of the Arduino framework as well as how to build simple circuits that flash lights and spin motors. Following that, we continue our adventure into making noise, sensing the environment, and building a robot. Finally, we dive into the world of IoT, where we learn how to pass messages over the Internet, which allows us to do things like turn on a light with our smartphone!\nEach video lecture is designed to give you one building block of knowledge. Almost every lecture is followed by a hands-on exercise where I ask you to expand on that building block or combine several previous blocks. I provide solutions to each exercise to help you learn. Additionally, most of the sections contain a project that challenges you to synthesize many of the concepts found in that section and from previous sections.\nUpon completing this course, you will have the skills and knowledge needed to create fun and useful Arduino projects.",
      "target_audience": [
        "Makers, crafters, and students who are interested in adding electronics and interactivity to their projects",
        "Entrepreneurs and engineers who are looking to prototype their next hardware product more quickly",
        "Anyone curious about electronics and programming",
        "Children over the age of 12"
      ]
    },
    {
      "title": "3D RUNDOWN (3D Printer Course)",
      "url": "https://www.udemy.com/course/3d-rundown/",
      "bio": "Learn about: MUST-HAVE 3D Printer Tools, Building, Leveling. Z-Offset, Cura, Troubleshooting & Upgrades",
      "objectives": [
        "There is a large box on my Desk, now what!?",
        "Building your 3D Printer!",
        "FILA-WHAT?",
        "What kind of TOOLS do I need?!",
        "OMG, How do I LEVEL this thing?",
        "Setting your Z-OFFSET",
        "I can print stuff... NOW WHAT?",
        "How to use CURA to slice models that actually print properly",
        "OMG, I got a Bambu Lab P1P/P1S!! How do I set this thing up?",
        "What the heck is wrong with my printer?! How do I fix it?",
        "Working with the new Creality K1",
        "Working with the Creality Halot Mage Pro Resin Printer, and similar"
      ],
      "course_content": {},
      "requirements": [
        "Own an FDM (Filament) 3D Printer, such as an Ender 3, CR10, S1, etc.",
        "1 Roll of Filament, or a Sample Roll that may have shipped with your printer.",
        "Computer with CURA installed, (Cura is FREE). Download link provided",
        "Bonus: Now covering Mage Pro, and K1"
      ],
      "description": "Are you any of these:\nYou've bought a 3D Printer. The Box is in your living room. Now what?\nYou built your 3D Printer. NOW WHAT?!\nYou've started using your 1st 3D Printer, but, all your prints are junk. WHY?\nYou installed Cura, and are staring at the screen. NOW WHAT?!\n\n\nIf so. This is the Course for you.\nThis course is taught by ME, a retired Computer Technician, and Network Administrator, for Major Corporations. With over 25 years of experience, Solving problems, and teaching others, to get along better, with their Tech. I also host two partnered YouTube Channels, and operate a successful 3D Print business, that creates Cosplay/Movie Props, used world wide.\n\n\nHaving donated allot of my time, assisting 3D Printer owners, in various internet forums, I have become familiar with the common problems, facing them. and decided to utilize that experience, to create in-depth courses, where new, or frustrated owners, can learn the craft, overcome their issues, and become print READY, rather than print SPAGETTI!\n\nIn this course, I will take you on a Journey from DAY ONE with your Creality Printers, all the way, to advanced methods, for high quality results. I'll explain things, using easy to comprehend language and methods.",
      "target_audience": [
        "3D Printer Beginners, that know NOTHING about 3D Printing",
        "People struggling to print properly",
        "People looking to up their 3D printing game, by learning new things",
        "People looking to learn how to use CURA, to create GCODE files, for 3D Printing.",
        "People struggling to get things to \"Stick\" to the bed."
      ]
    },
    {
      "title": "Introduction to Automotive engineering - Performance",
      "url": "https://www.udemy.com/course/overview-of-automotive-performance-engineering/",
      "bio": "Learn the Basics of Vehicle Performance and take your Automotive knowledge to next level",
      "objectives": [
        "What is acceleration and top speed performance what limits it?",
        "What is Handling performance and what are the factors which contribute",
        "What is Braking performance and the Importance of ABS",
        "What is NVH and Ride vibrations, how are they dealt with",
        "What do you mean by vehicle durability and aspects related to structural strength",
        "What constitutes the factors affecting Fuel economy of an IC engine vehicle?"
      ],
      "course_content": {},
      "requirements": [
        "Basic Automotive Engineering knowledge",
        "Basic Mathematics and understanding of Basic Physics"
      ],
      "description": "Automotive Design is driven by the targets set for performance. Understanding these performance metrics and characteristics is a very important part of the overall Vehicle design process.\nThis course aims to provide an idea of each of these specific areas of performance related to the Typical IC (internal combustion) engine Vehicle.\nTopics covered\nMechanism of Acceleration of the Vehicle\nBasic working principles of IC engine\nTraction and Power limited acceleration\nLimits of Top speed\nRelations between tractive force and engine torque\nNeed for a transmission\n\n\nFactors which affect Vehicle Handling\nImportance of the Tire\nStiff vs Soft suspension\nWhat is Road holding and Grip\nTypes of tests performed for handling\nSteering performance\n\n\nBasic Physics of Braking\nWorking mechanism of a Brake system\nStopping distance derived\nSlip ratio and its affects\nAnti lock braking system working\nRelations between Braking and Handling behavior\n\n\nWhat are vibrations,\nDifference between Ride and NVH\nTypes of sources, paths\nTypes of Noise\nBasic Concepts of Vibrations\nSensitive touch points related to NVH\nHow NVH performance is evaluated?\n\n\nDifferent aspects of Vehicle Durability\nImportance of Material properties to strength\nBending and Torsional stiffness\nTrade off of strength vs Weight\nConsiderations for Design for durability in Vehicle design process\n\n\nFlow of energy in an engine\nTypes of losses\nRelative Contribution of those losses\nSpecific Fuel Consumption\nWhat is Thermal efficiency and ways to improve it\nAffect of Driving patterns and environment\nWays to improve Vehicle Fuel efficiency\n\n\nThe course is designed to be Beginner friendly and consists of minimal Math with a \"First Principles\" approach.\nIf you are a student, engineer working in Automotive industry or an enthusiast wanting to learn about Automobiles this course will give you a Holistic understanding of Performance Criteria which matters and build a conceptual intuitive understanding of underlying principles.\nThis course doesn't deal in-depth in any of the area only deals with \"what matters\" .\nThis course may not be for you if you are looking for a highly analytical approach .\nThis course is suitable for you if already know some basics of cars but want to know the engineering connections in performance.\nKnowledge compiled in the course is partly academic and  partly related to my experiences and learning throughout my working stint at an Automotive manufacturer as a mechanical design engineer .",
      "target_audience": [
        "Engineering students who want to build awareness about Automobile engineering",
        "Enthusiasts who know basic Google level knowledge but want to understand the why behind each performance criteria of vehicle"
      ]
    },
    {
      "title": "Delta PLC Programming Using WPLSoft (PLC-SCADA-8)",
      "url": "https://www.udemy.com/course/delta-plc-from-scratch-to-expert-laval-using-wplsoft/",
      "bio": "Delta PLC Programming Using WPLSoft- Practical approach with industrial examples",
      "objectives": [
        "Basics for Programming of Delta PLC.",
        "Bit Logic with Interlocking and Holding Concept.",
        "Student will be able to understand concept of Timer, Counter, Compare Block, Math Block, Move Block and + & - Pulse and Program Control Block. Student will also be able to use these concepts in Program.",
        "You will be enriched with the latest technical knowledge related with the industrial automation.",
        "Students can establish their career in various manufacturing industries like Oil and Gas, Water/Waste Water Treatment, food & Beverages, Power Plants, Manufacturing Process, Chemicals and Pharmaceutical Industries, Power Generation, Automotive, Fabricated Metals, Packaging Process, Metals and Mining’s Aerospace, etc."
      ],
      "course_content": {
        "Overview of PLC": [
          "Introduction to PLC",
          "Block Diagram of PLC",
          "Working Principle of PLC",
          "What is Sink and Source concept ?",
          "PNP and NPN wiring of sensor with PLC (Example Sink and Source Input)",
          "Wiring Connection and Communication of Delta PLC"
        ],
        "Basics for Programming of Delta PLC": [
          "Introduction to Delta PLC",
          "Functions and features of Delta PLC",
          "How to Install PLC Software ?",
          "Addressing Format in Delta PLC"
        ],
        "Bit Logic and Logic Gates": [
          "Bit Logics (NO Type)",
          "Bit Logics (NC Type and Output Coil)",
          "Basic Programming Rule 1",
          "Basic Programming Rule 2",
          "Basic Programming Rule 3",
          "Basic Programming Rule 4",
          "Basic Programming Rule 5",
          "Basic Programming Rule 6",
          "Problems-1 with Solution",
          "Problems-2 with Solution",
          "Problems-3 with Solution",
          "Problems-4 with Solution",
          "Ladder Logic Program for Boolean Expression",
          "Logic Gates (AND & OR Gate)",
          "Logic Gates (AND & OR Gate) in Software",
          "Logic Gates (NAND & NOR Gate)",
          "Logic Gates (NAND & NOR Gate) in Software",
          "Logic Gates (EX-OR & EX-NOR Gate)",
          "Logic Gates (EX-OR & EX-NOR Gate) in Software"
        ],
        "Latching and Unlatching": [
          "Introduction to Latching (Holding) and Unlatching Concept",
          "Latching (Holding) and Unlatching Concept in Software",
          "Latching and Unlatching Problem-1",
          "Latching and Unlatching Problem-1 in Software",
          "Introduction of Set and Reset Instruction With in Software"
        ],
        "Interlocking": [
          "Interlocking Concept",
          "Interlocking Concept in Software"
        ],
        "Timer": [
          "Introduction to Timer",
          "Timer in Software",
          "Problem-1 with Solution in Software",
          "Problem-2 Explanation",
          "Problem-2 with Solution in Software"
        ],
        "Counter": [
          "Introduction of Counter Part-1",
          "Introduction of Counter Part-2",
          "Problem-1 with Solution in Software"
        ],
        "Compare Instruction (= =, < >, > =, < =, > and <)": [
          "Introduction of Compare Instruction Part-1",
          "Introduction of Compare Instruction Part-2",
          "Introduction of Compare Instruction Part-3",
          "Contact Type Compare Instruction Part-1",
          "Contact Type Compare Instruction Part-2",
          "Zone Compare Instruction"
        ],
        "Mathematical Instruction": [
          "Introduction of Mathematical Instruction",
          "Addition Instruction",
          "Subtraction Instruction",
          "Multiplication Instruction",
          "Division Instruction"
        ],
        "Move Instruction": [
          "Introduction of Move Instruction with in Software"
        ]
      },
      "requirements": [
        "Students are supposed to be familiar with Desktop/Laptop.",
        "No other prerequisites for this course, Because instructor will teach everything from scratch."
      ],
      "description": "Today, PLC is being used in every process and manufacturing industries, apart from knowing the wires and connections, anyone should know the way to do PLC programs.\nPLC-Programmable logic controller is an industrial solid-state computer that monitors input and output, and makes logic-based decisions for automated processes or machines.\nDelta PLC is a control system using electronic operations. It’s easy storing procedures, handy extending principles, functions of sequential/position control, timed counting and input/output control are widely applied to the field of industrial automation control.\nWPLSoft is a program-editing software made for the Delta DVP-PLC series used under WINDOWS.And this course is covering complete programming of PLC Model DVP-14SS2 of Delta PLC.\nAfter doing this course, you can easily program the other PLC series.This software is used for all the PLC series. And the instructions remain the same.\nThis course will teach you step by step How to make a Ladder Logics & Programming to any industrial process Control.\nWe have made explanation by Real Time LIVE Camera & Designing Software to understand the concept clearly.\nNOTE: This course is not short an summary course, this course is detailed course. All topics are covered in it, from scratch. You can understand this course even you don't know about PLC . If you are working in this field, you can enhance your knowledge from this course.\nFollowing is the brief information about the course:\nIntroduction of Delta PLC.\nFunctions and Features of Delta PLC.\nWhat is Sink and Source concept?\nWorking Principle of PLC (Scan Time and Scan Cycle of PLC).\nWiring Connection and Communication of PLC.\nBit Logic with Interlocking and Holding Concept.\nTimer, Counter, Compareinstruction, Math instructions, Move instructionsand Program Control instructions etc.\nAnd many more instructions are covering in course.\nProblems with Solution (Industrial Level).",
      "target_audience": [
        "Students who are pursuing or having Masters/ Bachelor’s Degree /Diploma in EC/EE/EEE/EI Branches.",
        "Working Professionals are also invited to join this course to enhance their knowledge in Industrial Automation.",
        "Maintenance Engineers.",
        "Application Engineers.",
        "PLC Programmers."
      ]
    },
    {
      "title": "Basic electronics for Arduino Makers",
      "url": "https://www.udemy.com/course/basic-electronics/",
      "bio": "An introduction to electronics to help you make the most from your Arduino or other prototyping platform.",
      "objectives": [
        "Understand the concepts of voltage, resistance and current",
        "Use Ohm's Law to calculate voltage, current and resistance",
        "Use Kirchhoff's Laws to calculate voltage and current",
        "Understand the meaning of and calculate energy and power",
        "Use resistors in various configurations, like in voltage dividers and voltage ladders",
        "Read the value of a resistor from its package",
        "Use pull-up and pull-down resistors",
        "Understand the use of capacitors",
        "Use capacitors as energy stores and filters",
        "Calculate the RC time constant of a capacitor",
        "Understand diodes",
        "Measure the voltage drop of a diode",
        "Understand how to use rectifier and zener diodes",
        "Protect a circuit from reverse polarity",
        "Understand how to use a transistor to control low and high power loads",
        "Calculate the currents and base resistor for a bipolar transistor",
        "Use the correct voltage regulator for any circuit"
      ],
      "course_content": {
        "Starting up": [
          "Study guide",
          "Parts list",
          "The tools you will need",
          "The parts you will need",
          "About software"
        ],
        "Electronics, basic concepts": [
          "Electricity, particles, and current",
          "What is voltage?",
          "What is voltage? (supplemental)",
          "What is current?",
          "What is resistance?",
          "Ohm's Law",
          "Ohm's Law",
          "Ohm's Law in the simulator",
          "Calculating energy",
          "Power and energy",
          "Plot energy consumption in the simulator",
          "Kirchhoff's Law",
          "Kirchhoff's Law example",
          "Kirchhoff’s Law in the simulator"
        ],
        "Resistors": [
          "Introduction to resistors",
          "Reading resistor values",
          "A simple resistor circuit",
          "Simulated simple resistor circuit",
          "Resistor power rating",
          "Resistor power",
          "The variable resistor",
          "Voltage divider",
          "Voltage dividers",
          "Voltage divider plot calculation of R2",
          "Voltage divider with current draw",
          "Voltage dividers, with current draw",
          "Voltage divider with current draw in the simulator",
          "Current divider",
          "Current dividers",
          "Solution to Quiz 7, Question 2",
          "Pull-up and pull-down resistors",
          "Pull-up and down simulated"
        ],
        "Capacitors": [
          "Introduction to capacitors",
          "Basic capacitor quiz",
          "Capacitors for storing energy",
          "Capacitor as energy store in the simulator",
          "Capacitors as filter",
          "Capacitors in series and parallel",
          "Capacitors in parallel and series",
          "What is the RC time constant",
          "An RC time constant experiment",
          "RC time constant in the simulator",
          "RC time constant"
        ],
        "Diodes": [
          "Introduction to diodes",
          "Voltage drop and current regulation",
          "Voltage drop and voltage regulation simulated",
          "Measuring the voltage drop in a diode",
          "The voltage dropper circuit",
          "Voltage drop",
          "Zener diodes",
          "Zener diode in the simulator",
          "A circuit that includes a zener diode with a load",
          "Zener diode",
          "Reverse polarity protection",
          "Zener diode with load simulation",
          "How to calculate the appropriate resistor value for an LED",
          "Calculating the LED protective resistor"
        ],
        "Transistors": [
          "Introduction to transistors",
          "Calculating the currents in a transistor circuit",
          "Simple transistor circuit simulation",
          "Calculating transistor currents",
          "A circuit with the 2N2222 bipolar transistor",
          "A circuit with the 2N2222 bipolar transistor simulated",
          "A circuit with a TIP122 and a high-power LED",
          "A circuit with a TIP122 and a motor",
          "Using a custom SPICE model",
          "A circuit with a transistor and a motor simulated"
        ],
        "Voltage regulators": [
          "Introduction to IC voltage regulators",
          "Fixed voltage regulator",
          "Fixed voltage regulator simulation",
          "A variable voltage regulator circuit",
          "How to calculate the resistors for a variable voltage regulator",
          "Voltage regulation with the LM317",
          "Variable voltage regulator simulation"
        ],
        "Conclusion": [
          "What did you learn? What's next?",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Small circuits controlled by an Arduino",
        "A basic understanding of electricity and electronics",
        "Have assorted resistors, capacitors, LEDs, diodes, transistors, voltage regulators (see section 1 for details, free to view)",
        "A breadboard, jumper wires and a battery  (see section 1 for details, free to view)",
        "A multimeter (see section 1 for details, free to view)",
        "Basic algebra"
      ],
      "description": "I have updated this course with new lectures to teach you how to use an online circuit simulator. With this simulator, you can boost your understanding and learning of electronics. You will be able to conduct many experiments to examine multiple circuit scenarios and easily plot currents, voltages, and power without hardware expense. You will learn to use multiple power sources and built-in and custom component models. You can even conduct experiments that would be too dangerous to do in real life.\n-\nAre you an Arduino maker? Can you make things by following how-to guides and are confident with writing or modifying sketches? Yet you are not so confident about things like calculating transistor currents, voltage drops, and using capacitors as filters?\nYou are not alone. I have been teaching Arduino and Raspberry Pi topics for years. During this time, I realized that while these platforms are great for helping you start tinkering with electronics, you will not be able to enjoy their power until you truly understand basic electronics.\nThis course is about helping you achieve a better understanding of the basic electronics principles and components commonly used in making platforms like Arduino and Raspberry Pi.\nI have designed this course for anyone with a basic understanding of electronics who has already spent time tinkering with Arduinos.\nBy the end of this course, you will have learned how to use commonly used components found in Arduino projects. You will also have learned how to do the relevant measurements and calculations to help you select appropriate components for your projects.\nTo complete this course, you will need a few cheap and common components and tools: resistors, capacitors, transistors, LEDs, diodes, and batteries. You will also need a multimeter, a small breadboard, and jumper wires. All of these are probably things that you already have.",
      "target_audience": [
        "Anyone with minimal experience using an Arduino",
        "Anyone with minimal experience using any prototyping platform",
        "Anyone with a need to brush up their knowledge of basic electronics"
      ]
    },
    {
      "title": "IoT Automation with ESP8266: Building Smart Devices",
      "url": "https://www.udemy.com/course/iot-internet-of-things-automation-with-esp8266/",
      "bio": "Explore the world of IoT with ESP8266, mastering device connectivity and smart applications for a connected future.",
      "objectives": [
        "IoT Fundamentals: Gain a solid understanding of IoT concepts and principles.",
        "ESP8266 Programming: Learn to program and work with the ESP8266 microcontroller for IoT applications.",
        "Hardware Integration: Explore hands-on techniques for connecting and integrating various IoT components.",
        "Web Server Programming: Develop skills in programming web servers for IoT applications using ESP8266.",
        "Client-Server Model: Understand and implement the client-server model in IoT projects.",
        "Internet Connectivity: Learn how to connect your IoT devices to the internet and explore remote monitoring.",
        "I2C Devices Integration: Master the interfacing of I2C devices with the ESP8266 microcontroller.",
        "Weather Data Retrieval: Retrieve real-time temperature, humidity, and pressure data from sources like Open Weather Map.",
        "Blynk App Integration: Explore Blynk, an app for control and remote monitoring in IoT projects.",
        "Project Development: Apply your knowledge to develop practical IoT projects with ESP8266."
      ],
      "course_content": {
        "Introduction": [
          "Introduction to IOT",
          "Working With Component in IOT"
        ],
        "Installation": [
          "Install Software to Work with Iot"
        ],
        "Lighting and Blinking an LED": [
          "Bread Board Detail View",
          "How to Light up an LED",
          "How to Blink an LED",
          "How to Blink an LED Continues"
        ],
        "Input Button": [
          "Digital Input from Button",
          "More on Digital Input from Button"
        ],
        "Debugging using Serial Monitor": [
          "Debugging using Serial Monitor",
          "Debugging using Serial Monitor Coding",
          "Debugging using Serial Monitor Coding Continues"
        ],
        "Button as a Switch": [
          "Adding Button to Bread Board",
          "Using Button as a Switch",
          "Analog Read Using LDR"
        ],
        "Connecting Internet": [
          "Analog read from Pot",
          "Pot Controlling LED",
          "Analog Write using PWM",
          "Light Intensity Control using Pot",
          "Connecting to the Internet",
          "More on Connecting to the Internet"
        ],
        "Client-Server Model": [
          "Understanding the Client-Server Model",
          "Understanding the Client-Server Model Continues",
          "More on Client-Server Model"
        ],
        "Programming Web Server": [
          "Programming the ESP as a web server",
          "Programming the ESP as a web server Example",
          "Controlling an LED over the internet",
          "Sending Sensor Values to Browser",
          "Working with ESP Server Example",
          "ESP HTTP Client Server Example"
        ],
        "Interfacing I2C Devices": [
          "More On Nodemcu",
          "More On Nodemcu Continues",
          "I2C Protocol For Nodemcu",
          "Finding Address Of I2C Device",
          "Liquid Crystal I2C Library"
        ]
      },
      "requirements": [
        "No specific prerequisites are required for this course. However, basic knowledge of programming concepts and electronics fundamentals would be beneficial.",
        "A Computer or a laptop"
      ],
      "description": "This comprehensive course on Internet of Things (IoT) provides a step-by-step guide to understanding and working with IoT components. Starting with an insightful Introduction to IoT, participants delve into Installation procedures for necessary software. The course covers practical aspects, such as Lighting and Blinking an LED, working with Input Buttons, and implementing Debugging techniques using Serial Monitor. Participants learn to use a Button as a Switch, Analog Read with LDR, and explore connectivity by Connecting to the Internet. The Client-Server Model is thoroughly explained, along with programming Web Servers. Interfacing I2C Devices, obtaining Temperature and Humidity data, and interacting with Open Weather Map for real-time weather information are also covered. The course concludes with a practical demonstration of Blynk, an app for control and remote monitoring in IoT applications. By the end of the course, participants gain a comprehensive understanding of IoT concepts and practical implementation, equipping them to embark on IoT projects confidently. we will learn the followings:\nSection 1: Introduction\nThis course kicks off with an engaging Introduction to IoT, laying the foundation for participants to understand the intricacies of Internet of Things technology. The initial lectures provide a comprehensive overview of the components and workings of IoT systems.\nSection 2: Installation\nMoving on to the practical side, Section 2 focuses on the Installation process. Participants are guided through the installation of essential software required for working with IoT, setting the stage for hands-on application in subsequent sections.\nSection 3: Lighting and Blinking an LED\nPracticality takes center stage in this section as participants delve into breadboard details and learn how to light up and blink an LED. These fundamental exercises help in building a strong understanding of basic IoT components and their functions.\nSection 4: Input Button\nBuilding on the basics, Section 4 introduces digital input from a button. Participants explore the intricacies of working with buttons, gaining insights into handling digital inputs effectively in IoT projects.\nSection 5: Debugging using Serial Monitor\nDebugging is a crucial skill in IoT development. This section equips participants with the skills to debug their projects effectively using the Serial Monitor, ensuring smooth and error-free execution of their IoT applications.\nSection 6: Button as a Switch\nContinuing the exploration of practical applications, Section 6 demonstrates how to use a button as a switch. Participants gain hands-on experience in implementing this functionality, a common requirement in many IoT projects.\nSection 7: Connecting Internet\nConnectivity is a core aspect of IoT, and Section 7 focuses on connecting IoT devices to the internet. Participants learn the intricacies of this process, setting the stage for more advanced IoT applications in later sections.\nSection 8: Client-Server Model\nUnderstanding the client-server model is essential for designing scalable and efficient IoT systems. Section 8 provides in-depth insights into this model, laying the groundwork for participants to build more complex IoT applications.\nSection 9: Programming Web Server\nPractical implementation continues as participants learn to program an IoT device as a web server. This section delves into the intricacies of web server programming, a critical skill for IoT developers.\nSection 10: Interfacing I2C Devices\nSection 10 introduces participants to the I2C protocol for interfacing with devices. This section provides a detailed exploration of the protocol, preparing participants to connect and communicate with various I2C devices.\nSection 11: Getting Temperature and Humidity\nPractical application takes center stage as participants learn how to obtain temperature and humidity data in Section 11. This hands-on experience equips participants with the skills to integrate environmental sensing into their IoT projects.\nSection 12: Getting Temp, Humidity, and Pressure from Open Weather Map\nSection 12 takes participants through the process of obtaining data from Open Weather Map, enriching their IoT projects with real-time weather information. This section provides practical insights into connecting IoT applications to external data sources.\nSection 13: Blynk (An app for control and Remote Monitoring)\nBringing a practical and user-friendly element to IoT, Section 13 introduces Blynk—an app for control and remote monitoring. Participants learn how to integrate Blynk into their projects, enhancing the user experience of their IoT applications.\nSection 14: Conclusion\nThe course concludes with a comprehensive summary and conclusion for the IoT module. Participants reflect on the knowledge gained throughout the course, solidifying their understanding of IoT concepts and their practical applications.\n\n\nHands-On Learning: One of the highlights of this course is the hands-on approach. You'll engage in practical exercises, such as working with components on a breadboard, connecting buttons, and exploring debugging techniques using Serial Monitor. Through these exercises, you'll gain practical insights into IoT development, preparing you for real-world applications.\nKey Sections:\nClient-Server Model: Understand the foundation of scalable IoT systems by exploring the client-server model.\nProgramming Web Server: Learn to program IoT devices as web servers, a crucial skill for IoT developers.\nInterfacing I2C Devices: Delve into the I2C protocol, enabling you to connect and communicate with various devices seamlessly.\nBlynk Application: Enhance your IoT projects with the Blynk app, offering control and remote monitoring capabilities.\nCourse Benefits:\nPractical Skills: Acquire hands-on experience through various practical exercises and real-world applications.\nComprehensive Knowledge: Gain a deep understanding of IoT components, connectivity, and programming.\nUser-Friendly Applications: Explore Blynk to create user-friendly interfaces for your IoT projects.",
      "target_audience": [
        "Anyone who wants to build projects with the ESP8266",
        "Students/Professionals interested in electronics and programming",
        "This course is for all levels of Audience, Anybody who is interested in building IOT products.",
        "This course is designed for beginners and enthusiasts interested in learning Internet of Things (IoT) using ESP8266. It is suitable for individuals with a curiosity for electronics, programming, and IoT applications."
      ]
    },
    {
      "title": "Complete PLC Allen Bradley Studio 5000 / RsLogix 5000 Course",
      "url": "https://www.udemy.com/course/complete-plc-allen-bradley-studio-5000-rslogix-5000-course/",
      "bio": "Zero to Hero from Scratch, program as an expert PLC Allen Bradley 2022, Studio 5000 RsLogix 5000, industrial automation",
      "objectives": [
        "Basic and Advanced concepts for PLC Programming",
        "Specialities in the field",
        "Devices through time",
        "Professionally manage Studio 5000",
        "Use FactoryTalk View",
        "Learn and communicate 4 languages for programming",
        "Create rutines and subrutines",
        "Exercise practical programs on field",
        "Learn main concepts of industrial automation",
        "Make the right sequence on a program",
        "Learn advanced topics such as Add On Instructions, UDT's",
        "Hacks for Studio 5000",
        "Basic and advanced instructions for Studio 5000"
      ],
      "course_content": {
        "Aditional resources": [
          "Additional Resources"
        ],
        "Introduction to Automation": [
          "Fundamentals of Industrial Automation",
          "Components of Allen Bradley",
          "Digital and Analogical Systems",
          "Type of Data",
          "Specialities in Allen Bradley World",
          "PLC Devices",
          "HMI Devices",
          "Drives Devices",
          "Motion Control Through Time",
          "Network Devices",
          "Main Components of CompactLogix",
          "Firmwares",
          "Communication Networks",
          "Software to Use"
        ],
        "Physical PLC: Network": [
          "IAB Software Use",
          "Adding IP Direction",
          "Physical PLC",
          "* Connecting Our Physical PLC, Downloading Our Program to 1756-L83E",
          "* Loading Program, Change Firmware in Physical PLC"
        ],
        "Download, Install and Software Use": [
          "Setting Our Emulator"
        ],
        "Basic Instructions": [
          "Knowing Studio 5000",
          "* Tasks, Programs",
          "* Creating Our First Program"
        ],
        "Advanced Instructions": [
          "* Timers",
          "* Counters",
          "* Timers TON TOG RTO",
          "* Sequencers MOV EQU instruction - Part 1",
          "* Sequencers MOV EQU instruction - Part 2",
          "* GTR GEQ, LES, LEQ, LIM Instructions",
          "* Latch Untach",
          "EXERCISE N° 1",
          "EXERCISE N°2",
          "EXERCISE N°3",
          "EXERCISE N°4"
        ],
        "Creating Our First Program": [
          "* Practical Exercise"
        ],
        "Creating A First Field Program (Medium Level)": [
          "* Maps And Subrutines",
          "* Security Permissions",
          "Tags Produced and Consumed - Part 1",
          "Tags Produced and Consumed - Part 2",
          "* Messaging Among Processors",
          "* Configuring Remote Chassis in Real Life, Plant Network PT1",
          "* Configuring Remote Chassis in Real Life, Plant Network PT2",
          "* GSV, SSV Instructions",
          "* ADD, SUB, MUL, DIV, ABS, NEG, CPT, Math Instructions",
          "Real Program with Sequencers: Explanation",
          "* Real Program with Sequencers: Variable Declaration",
          "Real Program with Sequencers: Overview",
          "* Real Program with Sequencers: Setting Up the Environment",
          "* Real Program with Sequencers: Getting Started with Programming Logic",
          "* Real Program with Sequencers: Continuation of the Programming Logic",
          "* Real Program with Sequencers: Permissive and Fine Tuning",
          "* Real Program with Sequencers: Manual and Automatic Cycling",
          "EXERCISE NUMBER 5",
          "EXERCISE NUMBER 7",
          "EXERCISE NUMBER 8"
        ],
        "Advanced Programming Level": [
          "* SFC, ST, SFB Programming Languages",
          "* Add On Instructions",
          "Analog Modules, PID Instructions",
          "* PDI Instructions P1",
          "* PDI Instructions P2",
          "* Arrays and UDTS",
          "Trends or Graphics",
          "* Quick Hacks"
        ],
        "HMI Basic Course": [
          "Setting FactoryTalk View",
          "Knowing FTV P1",
          "* Knowing FTV P2",
          "* Knowing FTV Final"
        ]
      },
      "requirements": [
        "Laptop",
        "Logical thinking",
        "Passion for PLC Programming"
      ],
      "description": "UPDATED COURSE 2024\n\n\nStep up in your carreer and become an expert programmer for PLC Allen Bradley from zero to HERO! This course is for future industrial programmers whose interest lies on industrial automation for any kind of industries.\n\n\nIf you have knowledge or a related career in Robotics, Mechatronics, Programming or Automation and Control, this course is for you!\n\n\nYou will be able to start the course without complex knowledge of professional programming, since you will be able to do it from scratch from module one.\n\n\nIn this course, you will be able to learn in depth the basic concepts of PLCs, the different families and uses of equipment; as well as Studio 5000 (the software used to connect and configure PLCs), configure emulators to create complex industrial programs, simulate sequences, and solve logic problems in the field.\n\n\nYou will have extensive knowledge of PLC, Networks, Drives, HMI, Programming Languages in a broad way.\n\n\nYou will know how to connect and program networks and devices in a physical and real way.\n\n\nIdeal for junior programmers who want to become senior programmers and have a 100% understanding of Studio 5000 like never before.\n\n\nThe brand of PLC's is ALLEN BRADLEY, however, in the automation industry it is known that once you program an Allen Bradley PLC, you program anything.\n\n\nAllen Bradley is one of the world's most recognized brands in industrial programming.\n\n\nThe instructor is certified directly by Rockwell Automation in Cleveland, OHIO. Having extensive experience in field projects in the main industries of the country.\n\n\nThis Allen Bradley PLC course is updated 2020-2021, so everything we review in the course will be spearheaded.\n\n\nWe invite you to take a look to our courses:\n-FactoryTalk View, HMI.\n-SIEMENS, TIA Portal Zero to Hero.\n-Drives (4 brands in one).\n-Motion Control indexing axis.\n-Motion Control non indexing axis.\n-Industrial Networks.\n-PLC Programming from Scratch (ladder logic).",
      "target_audience": [
        "Engineers from the next fields: electrical, mecathtonic, automation, robotic, and more",
        "Junior programmers who desire to achieve knowledge exponencially"
      ]
    },
    {
      "title": "How to Set Up an Electronics Lab: Tools & Equipments",
      "url": "https://www.udemy.com/course/how-to-set-up-an-electronics-lab-tools-equipments/",
      "bio": "Set up your own electronics workbench with the tools and equipment according to your budget and learn how to use them",
      "objectives": [
        "Learn about the basic tools and equipment required to set up an electronics workbench",
        "Decide what tools and equipment are best suited for your use case and budget",
        "Learn how to use hand tools and equipments in depth",
        "Learn how to use test equipments like the multimeters & oscillocopes"
      ],
      "course_content": {},
      "requirements": [
        "Basic electrical and electronics knowledge"
      ],
      "description": "First and foremost, an electronics workbench is a place that you have specifically organized in a way that increases your efficiency and makes the process of working with electronics enjoyable, It is where your tools, components, and instruments are.\nIf you are at the point of beginning your electronics journey, it is hard to tell what tools and equipment are essential to begin and even for the same equipment, there exist many variants for different budget ranges and with different features. I will help you choose the right tools and equipment that give the most value for money.\nThis course contains a demo of many tools and equipment for different budget ranges so you can choose what's best suited for you. You can start by buying some basic equipment that is essential for any kind of electronics work and as you gain experience you can decide what other tools you will require and obtain them accordingly.\nIn each lecture, I will present a specific topic and try to demonstrate the use of a tool or equipment. Through these lectures, I wish to help you gain a working understanding of what these tools and equipment are designed for and how to use them to make your circuits.",
      "target_audience": [
        "Anyone who wants to set up an electronics lab"
      ]
    },
    {
      "title": "VLSI - Design For Test (DFT)- JTAG, Boundary SCAN and IJTAG",
      "url": "https://www.udemy.com/course/vlsi-design-for-test-dft-jtag-boundary-scan-and-ijtag/",
      "bio": "A detailed review of concepts described in IEEE 1149.1 and IEEE 1687-2014",
      "objectives": [
        "IJTAG, JTAG and BSDL. DFT concepts"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to DFT",
          "Manufacturing Faults"
        ],
        "JTAG": [
          "Introduction to JTAG",
          "Registers",
          "Test Access Port (TAP)",
          "Quiz on JTAG"
        ],
        "Boundary SCAN": [
          "Boundary Scan Cell",
          "Boundary Scan Instructions",
          "Quiz on Boundary SCAN"
        ],
        "IJTAG": [
          "Introduction",
          "Segment Insertion Bit (SIB)",
          "Instrument Connectivity Language (ICL)",
          "Procedural Description Language (PDL)",
          "Quiz on IJTAG"
        ]
      },
      "requirements": [
        "Electronics circuits, Digital system design"
      ],
      "description": "This course talks about detailed concepts on JTAG, Boundary Scan and IJTAG with several examples.\nThis course teaches in-depth details on IEEE1149.1 and IEEE 1687-2014 standard.\nYou will also learn about how JTAG TAP state machine operates and how it is used to do connectivity test between difference chips in Printed Circuit Board (PCB)\nThe IJTAG operation, ICL and PDL concepts are also discussed in this course.",
      "target_audience": [
        "VLSI aspirants, DFT engineers, Design Engineers"
      ]
    },
    {
      "title": "ROS 2 - Hardware and ros2_control, Step by Step",
      "url": "https://www.udemy.com/course/ros2_control/",
      "bio": "ros2_control made easy - Adapt your own ROS 2 robot to ros2_control - Controller, driver, hardware interface, and so on.",
      "objectives": [
        "Understand how ros2_control works and why to use it",
        "Set up a complete ros2_control pipeline for your robot",
        "Create a custom hardware interface",
        "Write a clean C++ hardware driver",
        "Find and configure existing ros2 controllers",
        "Create a custom controller",
        "Load controllers and hardware interfaces with the controller manager",
        "Use ros2_control for a mobile base and a robotic arm",
        "Use ros2_control with Gazebo",
        "Practice with an additional project",
        "Learn best practices right from the start"
      ],
      "course_content": {
        "Introduction": [
          "Welcome!",
          "Why ros2_control",
          "The hardware we will use",
          "Installation and setup",
          "How to get the most out of this course"
        ],
        "Adapt a Robot to ros2_control (with Mock Hardware)": [
          "Intro - How ros2_control Works",
          "Starting Code + Robot Overview",
          "Add a ros2_control tag in the URDF",
          "Add a Controller Config (Part 1: Joint State Broadcaster)",
          "Add a Controller Config (Part 2: Diff Drive Controller)",
          "Note - For those using ROS 2 Humble",
          "Start Everything from the Terminal",
          "Launch File for ros2_control",
          "ros2_control Command Line, Debugging, and Recap"
        ],
        "Create a C++ Hardware Driver": [
          "Intro",
          "Setup the Motor",
          "Motor Driver",
          "Include the Driver in a ROS Node",
          "Test the Driver"
        ],
        "Write a Hardware Interface for ros2_control": [
          "Intro",
          "Create a Hardware Package and Set Up Your Driver",
          "Write the Hardware Interface (header file)",
          "Write the Hardware Interface (cpp file)",
          "Make the Hardware Interface a Plugin",
          "Build the Hardware Interface",
          "Start the ros2_control Stack with your new Hardware Interface",
          "Debugging Steps",
          "Add Parameters to the Hardware Interface",
          "Your Template for ros2_control (download) + Step Recap"
        ],
        "Project: Set up ros2_control for a Robotic Arm": [
          "Intro - Project Overview",
          "Step 0: Code Setup",
          "Step 1: ros2_control tag in URDF",
          "Step 2: Configure a Controller",
          "Step 3: Test the Controller with the Mock Component",
          "Step 4: Write a Hardware Interface",
          "Step 5: Create a Plugin out of the Hardware Interface",
          "Step 6: Test the Hardware Interface and Debug",
          "Extra: Gazebo and ros2_control"
        ],
        "Create a Custom Controller": [
          "Intro",
          "Write the Controller Header File",
          "Write the Controller cpp File",
          "Build as a Plugin",
          "Use the Controller with our Robot"
        ],
        "Conclusion": [
          "ros2_control Recap",
          "More Examples and Demos",
          "What to do next",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "This is not a course for complete ROS 2 beginners. You need to know about C++, nodes, communications, parameters, launch files, URDF, RViz, etc.",
        "If you are just starting with ROS 2, don’t take this course first, you probably won’t understand anything. Better to start with the ROS2 for beginners series!",
        "For this course you will need to have Ubuntu/ROS installed."
      ],
      "description": "You have learned ROS 2 and you’re now wondering: how can you make your ROS 2 application talk to your hardware? For this, you will need ros2_control.\nAnd maybe you’ve already started to learn ros2_control but you feel lost?\nDon’t worry, this is completely normal, and you found the right course for you. At the end of the course you will be able to adapt your own robot and hardware to ros2_control.\n\n\n-- Why this course?\n\n\nI remember when I first started to learn ros2_control. It was a real nightmare. Almost no online resources, bloated demo codes, and the documentation makes you feel that you can only understand ros2_control if you were the one writing the source code.\nThus, it takes a lot of trial and error to just be able to understand the basics. And this is if you’re already a good ROS developer.\nI’ve been through that and after years of experience, I have created this course. The goal? To save you countless hours and make you learn ros2_control in the easiest way possible.\nInstead of dropping you in a sea of documentation, I will guide you through all the steps, starting from scratch, and with hands-on lessons and projects. Also, since ros2_control means hardware, we will use real hardware for all the projects we do.\nWarning: this course is not for ROS 2 beginners, you need to have good ROS 2 and C++ basics to get started.\n\n\n-- How do I teach?\n\n\nIf you’ve taken other ROS 2 courses from me you know that I’m not here to waste your time.\nMy teaching method is simple:\nStep by step\nGoing to the point\nLearn while doing\nAlso I strongly focus on the “why” behind what you learn. The goal is not just to make you blindly repeat some steps, but to understand why those steps matter.\nAnd don’t take my word for it - here are some reviews from fellow students/researchers/engineers/teachers who took my ROS 2 courses on Udemy:\n“Best course on ROS2 I’ve taken! Other courses (different sites/platforms) made it confusing but this course makes it so clear and easy to understand while letting you try on your own. I am definitely learning a lot in a painless and simple way. I should have gotten this course from the beginning.” - Miguel Martinez G.\n“Overall very satisfied. I’ve a strong background in programming, but at a higher level (web mostly) and the elegant, fluent and clean approach of this course has leveraged my introduction to the ROS environment in a short amount of time, without the struggle of going through a lot of documentation” - Devis D.\n“This is the best course in ROS2 I’ve ever seen” - Aleksandar K.\n“Great course content, straight to the point and very easy to follow” - Kevin M.\n\n\n-- What will you do and learn in the course?\n\n\nYou will follow a progression line that allows you to learn one thing at a time, and to uncover all the components inside ros2_control in a way that doesn’t make you feel overwhelmed.\nWe will start from an existing URDF (which I will provide) and:\nSet up a ros2_control pipeline using a mock component and existing controllers. You will adapt the URDF to ros2_control, provide controller parameters in a YAML file, and write a launch file to start everything.\nGet best practices to write a clean C++ driver for any hardware, and learn how to integrate this driver inside a ROS 2 node.\nWrite a hardware interface for ros2_control.\nPractice more with an additional project, in which you will combine a mobile base and a robotic arm.\nWrite a custom controller.\nEach lesson is built on the previous ones to make learning easier.\nI will focus on writing clean and minimal code all along the course, so you can download the code for each part and use it as a template for your own projects.\nSo, to learn ros2_control and save countless hours, wait no more and enroll in the course today!\nYou don’t take any risk as you get a 30-day money back guarantee if you’re not fully satisfied - no questions asked.\nSee you in the course!\n\n\nNote - this course is not for you if:\nYou have never worked with ROS 2 before. There is no shortcut here, you first need to learn ROS 2.",
      "target_audience": [
        "ROS developers who want to learn ros2_control with a structured course.",
        "Anybody stuck with the ros2_control documentation.",
        "Robotics engineers/students/researchers/teachers who need to work with both software and hardware while using ROS 2.",
        "Even if you only want to do a simulation with Gazebo, ros2_control will be very helpful."
      ]
    },
    {
      "title": "Beyond Arduino, Part 2: Analog Input Output",
      "url": "https://www.udemy.com/course/beyond-arduino-analog/",
      "bio": "Learn how to actually interact with the analog world in your favorite microcontroller platform",
      "objectives": [
        "Design analog hardware around your IoT applications",
        "Design add-on analog circuitry for popular development boards such as Arduino and Raspberry Pi.",
        "Understand how a microcontroller interacts with its supporting analog hardware"
      ],
      "course_content": {
        "Introduction": [
          "Course Structure",
          "Instructor Introduction"
        ],
        "Why Analog?": [
          "Some Examples",
          "More Examples",
          "Comparing Analog and Digital Data",
          "Analog Data in Computing Systems"
        ],
        "What's an Amplifier, Anyway?": [
          "What's an Amplifier?",
          "A Time Plot",
          "Modelling an Amplifier with a 2-port System",
          "Dependent Sources",
          "Desired Parameters",
          "Where do Dependent sources get their Power from?"
        ],
        "Operational Amplifier Basics": [
          "What's an OpAmp?",
          "Internal OpAmp Model",
          "Ideal OpAmp Characteristics",
          "Typical OpAmp Characteristics",
          "Some views of the 741"
        ],
        "OpAmps as Comparators": [
          "The Question it Answers",
          "The Saturation Voltages",
          "The Open Loop Gain",
          "Comparator Example #1: A Potentiometer",
          "Comparator Example #2: A Light Sensor",
          "Not TTL Levels",
          "Adding a Comparator",
          "Output Plot",
          "Optional Project: Infrared Light Sensor"
        ],
        "OpAmps as Inverting Amplifiers": [
          "Negative Feedback",
          "High Input Impedance",
          "KCL Node Analysis",
          "Virtual Ground",
          "Punchline with Some Algebra",
          "Recap and Key Ideas"
        ],
        "Inverting Amplifier Analysis": [
          "Two Port Networks",
          "The Voltage Gain",
          "The rest of the Parameters"
        ],
        "Digital to Analog Converters": [
          "Let's Recall Some Stuff",
          "Digital to Analog Conversion",
          "Pulse Width Modulation",
          "The Usual DAC Pinout",
          "The Binary Weighted DAC",
          "The R-2R DAC",
          "R-2R DAC Circuit Analysis, Part 1",
          "R-2R DAC Circuit Analysis Punchline",
          "R-2R DAC Advantages"
        ],
        "Analog to Digital Converters": [
          "Let's Recall Some Stuff",
          "Analog to Digital Conversion",
          "Analog to Digital Conversion Example",
          "Encoding",
          "Flash ADC",
          "Flash ADC Example",
          "Flash ADC Details"
        ],
        "The Successive Approximation Analog to Digital Converter": [
          "Successive Approximation Analog to Digital Converter",
          "How it Works",
          "The Successive Approximation Register",
          "SAR Example, part 1",
          "SAR Example, part 2",
          "Breaking the 4th Wall",
          "A Time Diagram"
        ]
      },
      "requirements": [
        "A development platform is recommended to get the most out of this course. Anything from Arduino to Raspberry Pi to the BASIC Stamp, TI Launchpad or NXP Freedom board will do. Even stand alone microcontrollers such as NXP s08, microchip PIC or TI MSP430 will do.",
        "Some actuators and sensors, not necessarily designed to work with your development platform. Anything you'd like to experiment with, such as RC servos, LCD displays, temperature sensors, motors, accelerometers, optical encoders, potentiometers and so on.",
        "Some basic knowledge of how to run your code in your development platform is assumed.",
        "Some basic knowledge on electronics is assumed, such as Ohm's Law, Series and Parallel Circuits, Voltage, Current, and so on"
      ],
      "description": "In this course you will learn that there's more to life than the Arduino Uno and that there's probably a better way to do what you've been doing with microcontrollers. Yes, Arduino is an excellent platform to get you started, but you will learn that Arduino is not part of the day to day electronics you use like your TV, microwave oven or car dashboard.\nDo you know how the analog interfacing elements in a microcontroller work? Well, you will learn that here.\nThis is not exactly a hands-on course, not if you don't want it to be. There are no promises on the projects you’ll make because I won’t force you to build something you didn’t choose to. However, I strongly recommend that you code along. Several microcontroller development platforms are showcased, but you should follow the examples with your own microcontroller.",
      "target_audience": [
        "Makers who have some experience with hardware and would like to learn how these circuits work with as few equations as possible.",
        "Coders who were introduced to hardware through some development board popular in the Maker movement, such as the Raspberry Pi or Arduino (e.g. blinking an LED, reading push button input)",
        "Beginners who would rather skip the boring theory and math, and dive into fun hands-on applications that move, light up and make sounds instead.",
        "This course is not for advanced hardware designers or electrical engineers.",
        "This is not an introductory Microcontroller course. You will not learn to use an Arduino board by taking this course.",
        "This is not a theoretical electronics course. Some of the basics are covered but we won't study differential equations,  transforms,  or transfer functions."
      ]
    },
    {
      "title": "CMOS VLSI Design & Sub Systems of Digital Circuits",
      "url": "https://www.udemy.com/course/vlsi-design-and-sub-systems/",
      "bio": "Best VLSI Training Course for starting your career in VLSI Design& Subsystems of MOS circuits (schematic,stick,layouts)",
      "objectives": [
        "Basic Plannar Process or Fabrication process of an Integrated Chip",
        "Basic Electrical Properties of MOS and BiCMOS Circuits",
        "MOS & BiCMOS circuit design process (Including Stick and Layouts)",
        "Basic circuits of NMOS, PMOS and CMOS circuits & Scaling of circuits",
        "Subsystem design of digital circuits (includes combinational digital circuits)"
      ],
      "course_content": {
        "Basic Plannar process for making of Integrated Circuit (IC)": [
          "Fabrication of IC using plannar technology",
          "Epitaxial growth",
          "Thermal oxidation",
          "Photolithography",
          "Diffusion",
          "Ion implantation",
          "Metalization",
          "Testing bonding packaging"
        ],
        "Basic Electrical properties of MOS and BiCMOS circuits and its concepts": [
          "NMOS fabrication",
          "CMOS fabricarion",
          "Introduction",
          "Ids versus Vds realtion in non saturated condition",
          "Ids versus Vds realtion in saturated condition",
          "vlsi design unit2.1 questions",
          "quiz2",
          "gm and gds",
          "nmos inverter",
          "nmos driven by another nmos",
          "pass transistor",
          "mnos driven by another nmos transistor using pass transistors",
          "alternative forms of pull up",
          "alternative forms of pull up contd.,",
          "CMOS inverter voltage transfer characters and its switching threshold point",
          "Bicmos inverters",
          "Latch up in CMOS circuits"
        ],
        "MOS and BiCmos circuit design process (including stick diagrams and layouts)": [
          "mos layers and NMOS color encoding with STICK AND mask layout schems",
          "mos layers and CMOS color encoding with STICK and mask layout schems",
          "stick diagram rule set",
          "Nmos inverter schematic and stick diagram",
          "NAND schematic and stick diagrams",
          "operation of not nor or gates",
          "Stick diagram for NOR and OR gate",
          "cmos inverter schematic and stick diagram",
          "CMOS NAND schematic and stick diagram",
          "CMOS NAND twisted stick diagram and other modified models of sticks for NAND",
          "CMOS NAND operation",
          "CMOS NORoperation and stick diagram",
          "why design rules needed?",
          "lambda based layout rules",
          "CMOS inverter and CMOS- NAND layouts",
          "CMOS- NOR layout"
        ],
        "Basic circuits 0f CMOS Circuits & its scaling. of circuits (Delay,Rs,drivers )": [
          "sheet resistsnce",
          "sheet resistance applied to Mos transistors",
          "sheet resistance for depletion mode MOS inverter",
          "sheet resistance for CMOS inverter",
          "Area capacitance of layers and standard capacitance in different technologies",
          "some area capacitances",
          "multil layer area capacitance",
          "time delay in MOS circuits",
          "inverter pair delay using NMOS",
          "CMOS inverter pair delay",
          "Rise time estimation delay",
          "Fall time estimation dealy and relation b/w rise and fall time",
          "Driving of large capacitive loads",
          "cascaded of inverters",
          "cascaded of inverter for N-even and odd conditions",
          "condition of pair delay to cascaded inverters for NMOS",
          "Condition of pair delay for CMOS cascaded inverter",
          "super buffers",
          "super buffers in inverting mode",
          "super buffers in non inverting mode",
          "what is scaling",
          "scaling for device parameters"
        ],
        "Subsystems": [
          "parity generator and its block diagram",
          "parity generator iin one-bit cell",
          "Implementation of Parity generator with Nmos and CMOS along with stick diagram",
          "What is Bus Arbitration logic and types of Bus arbitration logic?",
          "Bus arbitration logic ,truth table,logic expression,stick diagram, n-bit BAL",
          "Design of Multiplexers 2:1 and 4:1 with schematic and stick diagram",
          "design of 4 bit adder (Ripple carry adder)",
          "design of 4 bit adder (Ripple carry adder) contd.,",
          "design of carry look ahead adder part-1",
          "Design of carry look ahead adder with CMOS schematic diagram-part2"
        ]
      },
      "requirements": [
        "Having an interest on  basic electronics but not needed the any expertise."
      ],
      "description": "Learn how to master on VLSI system Design &  SubSystems of Digital  Circuits and designing of different circuits like combinational and sequential etc. In this course you will  learn very large scale integration design course  from scratch and also covered  each and every details with step by step procedure. Now a days  very large scale integration  technology emerging or growing  day by day. You cannot imagine without the Basic VLSI Design &  SubSystems of Digital  Circuits or even electronics and   integrated circuits because usage of electronic gadgets now becoming a part in our daily routines. So  we much depend on VLSI system Design &  SubSystems of Digital  Circuits  to design like portable electronic gadgets  and other gadgets for different purposes. The  silicon-integrated circuitry make it possible to  design of digital circuits which may be very complex and most  economical in space, power requirements and cost, and potentially very fast The area, power and cost have made silicon the dominant fabrication technology for electronics in very wide ranging areas of application. Like digital signal processing, analog and digital communications as well as in  video processing etc. Metal oxide semiconductor (MOS)  related circuitry will meet requirements but still it is  being researched  by ongoing improvements and the research in fabrication such that  other techniques are being majorly adapted with gallium arsenide technology, including the use of materials other than silicon for the production of integrated circuits. . So its needed to learn  VLSI system Design &  SubSystems of Digital  Circuits for better growth particularly for electronics and computer related people. So those who want to settle in VLSI  design field  learning these concepts is essential .so start your journey with this course from now onwards.\nIn this course you may learn the behavior of MOS circuits  in detail manner as well as you could  get the better understanding after completion of this course.\nThe course covers these topics\nBasic Electrical Properties of metal oxide semiconductor(MOS) and  Bipolar and metal oxide semiconductor circuits\nCurrent and voltage relationship and its characteristics\nThe Non-saturated region\nSaturated region\nMetal oxide semiconductor  transistor transconductance  and output conductance  relationship.\nThe pass transistor\nInverter characteristics\nDetermination of pull up to pull down ration for an NMOS driven by another NMOS inverter.\nPull up to pull down ratio for an NMOS  Inverter driven by another NMOS inverter using the pass transistor.\nComplementary metal oxide semiconductor as  inverter and its characteristics\nTransconductance and output conductance\nAlternative forms of pull ups\nBipolar and Complementary metal oxide semiconductor inverter circuits.\nMOS  layers and NMOS color encoding with STICK AND mask layout schemes\nMOS layers and CMOS color encoding with STICK and mask layout schemes\nStick diagram rule set\nNmos inverter schematic and stick diagram\nNAND schematic and stick diagrams\nOperation of not nor or gates\nStick diagram for NOR and OR gate\nCmos inverter schematic and stick diagram\nCMOS NAND schematic and stick diagram\nCMOS NAND twisted stick diagram and other modified models of sticks for NAND.\nCMOS NAND operation.\nCMOS NOR operation and stick diagram\nWhy design rules needed?\nlambda based layout rules\nCMOS inverter and CMOS- NAND layouts\nCMOS- NOR layout\nSheet resistance\nSheet resistance applied to Mos transistors\nSheet resistance for depletion mode MOS inverter\nSheet resistance for CMOS inverter\nArea capacitance of layers and standard capacitance in different technologies\nSome area capacitances\nMultil layer area capacitance\nTime delay in MOS circuits\nInverter pair delay using NMOS\nCMOS inverter pair delay\nRise time estimation delay\nFall time estimation dealy and relation b/w rise and fall time\nDriving of large capacitive loads\nCascaded of inverter for N-even and odd conditions\nCondition of pair delay to cascaded inverters for NMOS\nCondition of pair delay for CMOS cascaded inverter\nWhat is Super buffers ?\nSuper buffers in inverting mode &  non inverting mode\nWhat is scaling & Scaling for device parameters\nParity generator and its block diagram &Parity generator iin one-bit cell\nImplementation of Parity generator with Nmos and CMOS along with stick diagram\nWhat is Bus Arbitration logic and types of Bus arbitration logic?\nBus arbitration logic ,truth table,logic expression,stick diagram, n-bit BAL\nDesign of Multiplexers 2:1 and 4:1 with schematic and stick diagram\nDesign of 4 bit adder (Ripple carry adder)\ndesign of 4 bit adder (Ripple carry adder)\nDesign of carry look ahead adder with CMOS schematic diagram-part2\n\n\n\n\nFeel free to ask any doubt while learning the course\nHappy learning!\nSkill Gems Education\nPUDI V V S NARAYANA",
      "target_audience": [
        "* Any one who want to learn more on  VLSI DESIGN aspects  in much more deeper its for you!",
        "* Intermediate  or engineering and post graduate or even company employees also can learn the course for better growth"
      ]
    },
    {
      "title": "Pic Microcontroller and Pcb designing step by step",
      "url": "https://www.udemy.com/course/basic-microcontroller-arduino-and-pcb-design-course/",
      "bio": "Master Microcontrollers and Pcb desining from scratch",
      "objectives": [
        "Learn eagle software for designing pcbs",
        "Design your own pcb using iron on glossy paper method",
        "Learn proteus and mikroC",
        "Learn the basics of c programming language",
        "Interface leds, lcds, seven segmants, motors, relays, keypads and ADC modules with Pic Microcontroller",
        "Simulate and make a lot of microcontroller practical projects"
      ],
      "course_content": {
        "Pcb Designing": [
          "Course Roadmap",
          "What is printed circuit board and why is it used",
          "Schematic Layout",
          "Board Layout",
          "JDM programmer components and design",
          "Laser Sensor Alarm - Circuit design",
          "Laser Sensor Alarm - Transferring pattern and etching",
          "Laser Sensor Alarm - Drilling and soldering"
        ],
        "Microcontroller": [
          "Introduction",
          "Construction of microcontroller",
          "Pic 16f877a",
          "Section Requirements",
          "Multimeter",
          "BreadBoard",
          "+5v Power supply circuit",
          "BreadBoard practical - Transistor as a switch",
          "Variables",
          "Operators",
          "Flow Control or Selection",
          "Loops",
          "Data Direction",
          "MikroC",
          "Proteus",
          "K150 Pic Programmer",
          "Flash Program",
          "Flash project Practical",
          "Active low And Active High",
          "Traffic Project",
          "Traffic Project Practical",
          "Seven segments",
          "How to distinction between common cathod and common anode seven segments",
          "Seven segment - Counting project",
          "Seven segment - Counting project using 7447 decoder",
          "Seven segment - Counting project Practical",
          "Lcds",
          "Lcd - Functions",
          "Lcd - Connection in proteus",
          "Lcd - How to shift a word",
          "Lcd - How to print a value",
          "Lcd Practical",
          "What is a Relay and how to interface it with pic 16f877a",
          "Relay Practical",
          "Relay interface with pic 16f877a Practical",
          "ADC",
          "Temperature sensor project",
          "Temperature sensor project Practical",
          "Keypad",
          "Security system",
          "Security system Practical",
          "Dc motors",
          "H bridge",
          "Controlling motor's direction using L293D",
          "L293D direction control using push buttons Practical",
          "Controlling motor's speed Using pulse width modulation",
          "Motor Direction and speed control with pic16f877a",
          "Dc Motor Speed control using pic16f877a and l293d Practical",
          "Dc Motor Direction control using pic16f877a and l293d Practical",
          "The End"
        ]
      },
      "requirements": [
        "Eagle software for desining pcbs",
        "Proteus software for simulation",
        "MikroC for pic programming",
        "Program burner for your pic programmer, i use winpicpgm",
        "Some components that will be introduced in lecture 12"
      ],
      "description": "This course is about pcbs and programming microcontroller\nThis course is submitted for beginners in microcontroller and pcb designing field\nBy the end of this course you will be able to\nLearn how to design a circuit in eagle schematic layout\nTurn your circuit into a pcb through the board layout\nMaster pcb making using iron on glossy paper method\nDesign a JDM programmer\nDesign and make a laser sensor project\nLearn to simulate an electronic circuit using proteus\nLearn to program your pic using microC\nLearn the basic concepts of c programming language\nBurn your programs on your pic using computer\nDesign a lot of microcontroller projects (flash light, traffic light, temperature sensor and security system using keypads and lcds)\nHow to interface leds, lcds, seven segmants, motors, motor drivers, relays, keypads and ADC projects\n\n\nThis course will take 6 hours to complete\nIt is sperated into two sections\nPcb designing section\nMicrocontroller section\n\n\nIf you are a starter in electronics, microcontroller and pcb designing filed i would recommend this course for you as a first step\nIt will take you from scratch to intermediate level.",
      "target_audience": [
        "Electronics beginners",
        "Any body who wants to make his own robot"
      ]
    },
    {
      "title": "System on Chip Design using VIVADO and ZYBO Z7-10",
      "url": "https://www.udemy.com/course/system-on-chip-design-using-vivado-and-zybo-z7-10/",
      "bio": "System on Chip Design using Digilent SOC Development Board ZYBO Z7-10",
      "objectives": [
        "System on Chip Design using VIVADO and ZYBO Z7-10"
      ],
      "course_content": {
        "Outline": [
          "Course Outline"
        ],
        "Introduction to System on Chips": [
          "A General View of System on Chips (SOCs)",
          "XILINX ZYNQ System On Chips",
          "More on ZYNQ System on Chip"
        ],
        "System On Chip Design (SOC) Using XILINX VIVADO using ZYBO Z7-10": [
          "ZYNQ SOC Hardware Design Using VIVADO",
          "Programming Processor Side Using SDK Tool",
          "Creating ZYNQ System Employing Interrupts",
          "Creating ZYNQ System Employing AXI Timer Interrupt"
        ],
        "Vivado High Level Synthesis (HLS)": [
          "Introduction to Vivado High Level Synthesis (HLS)",
          "Steps of High-Level Synthesis Process",
          "Project Creation in Vivado HLS and C/RTL CoSimulation",
          "Arbitrary Precision Data Types Used In VIvado HLS",
          "HLS Interface Specification and Synthesis",
          "HLS Metrics and Pipelining Operation",
          "Loop and array optimization for hardware implementation in Vivado HLS",
          "Creating multiple solutions in HLS and solution optimization"
        ],
        "Creating IP using HDL, Vivado HLS, and Matlab HDL Coder": [
          "IP Core Creation Using VHDL",
          "IP Core Creation Using MATLAB HDL-Coder",
          "IP Core Creation Using VIVADO HLS"
        ],
        "Importing IP-cores to IP-catalog, and audio codec IP-core": [
          "Importing user created IP cores to the IP catalog of Vivado",
          "Use of Audio Codec IP Core in Project"
        ]
      },
      "requirements": [
        "The VHDL knowledge can be a plus"
      ],
      "description": "In this course, we will first provide basic information about system on chips, then SOC design examples will be provided using Vivado and Digilent ZYBO Z7-10 system on chip development board where XILINX ZYNQ 7000 system on chip is available. We will provide a number of practical applications using ZYBO Z7-10 illustrating the SOC design subject. We will also provide information about ZYNQ-7000 system on chip device.",
      "target_audience": [
        "All the engineering students interested in System on Chip Design"
      ]
    },
    {
      "title": "Beyond Arduino, Pt 3: Interrupt Driven Embedded Applications",
      "url": "https://www.udemy.com/course/beyond-arduino-interrupts/",
      "bio": "Learn how to develop embedded applications like professionals, not beginners, do.",
      "objectives": [
        "Create professional grade embedded applications.",
        "Think of embedded applications in an Interrupt-Driven fashion.",
        "Create responsive embedded applications."
      ],
      "course_content": {
        "Introduction": [
          "Course Structure",
          "Instructor Introduction",
          "Motivation",
          "Live Motivation"
        ],
        "Polling vs. Interrupts": [
          "Input Output Handling",
          "The Options",
          "More on Polling",
          "More on Interrupts",
          "An Everyday Analogy",
          "Some Modelling Assumptions",
          "Solution by Polling",
          "Solution by Interrupts",
          "How do These Schemes Compare?",
          "Watch out for Abused Polling",
          "Comparing the Options",
          "Best Case Efficiency for Polling",
          "How the Hotel Analogy Relates to Code Execution",
          "A Simpler Everyday Analogy",
          "How the Incoming Call Analogy relates to Code Execution",
          "Polling and Interrupts in Software",
          "The Polling Version",
          "The Interrupt Driven Version",
          "How it All Looks Over Time"
        ],
        "Elements of Interrupt Handling Hardware": [
          "What Makes it all Work",
          "The Global Interrupt Mask",
          "Local Interrupt Enable Bits",
          "Local Interrupt Flags",
          "Interrupt Service Routines",
          "Interrupt Vectors",
          "The Stack"
        ],
        "Interrupt Handling Process": [
          "Prerequisites for interrupts",
          "What happens when an interrupt occurs",
          "Let's recall our example",
          "Function Content Description",
          "Runtime Example",
          "Step 1 - The Running Instruction is Completed or Aborted",
          "Step 2 - The CPU is pushed into the Stack",
          "Step 3 - The ISR is Retrieved from the Vector",
          "Step 4 - The Interrupt Service Routine is Executed",
          "Step 5 - The CPU is Popped from the Stack",
          "Step 6 - Execution Resumes where it Left Off"
        ],
        "Why we need Interrupts": [
          "Why we need Interrupts",
          "Responsiveness",
          "Efficiency",
          "Portability",
          "Scalability",
          "Priority Awareness",
          "Efficient Energy Consumption"
        ],
        "Wait, Polling isn't that bad either": [
          "Blocking Functions",
          "Non-Blocking Functions",
          "An Everyday Analogy",
          "Polling Abused",
          "Interrupts Abused"
        ],
        "Programmer's Mechanism": [
          "Case Study: ARM Cortex Family",
          "Case Study: Freescale S08 Architecture",
          "Case Study: The Arduino Uno!",
          "Optional Project: Make a Proof of Concept"
        ],
        "An Arduino Live Demo": [
          "A Live Demo",
          "Live Demo code"
        ],
        "More Live Demos": [
          "Going Beyond Arduino"
        ],
        "Live Demo: GD32V RISC-V Microcontroller": [
          "The GD32V Microcontroller",
          "About the GD32V Microcontroller",
          "The ECLIC Module",
          "An Abused Polling Application",
          "Abused Polling Application Hardware",
          "The Abused Polling Application Code",
          "The Abused Polling Application Barely Working",
          "The Interrupt-Driven Application Code",
          "The Timer Initialization Function",
          "The Timer Interrupt Handler",
          "So Where is the Interrupt Handler Defined?",
          "The Interrupt-Driven Application Working"
        ]
      },
      "requirements": [
        "Basic Microcontroller Programming.",
        "Any Programming Language."
      ],
      "description": "In this third part of the Beyond Arduino series, you'll learn why single-threaded applications are inefficient and perform so bad when handling input/output requests.\nYou'll learn about the Interrupt-Driven approach to handling asynchronous events and most of its advantages over the traditional approach to do everything inside a loop, which you aren't always aware of because of the immense body of elements that conceal the details in many beginner platforms, like the Arduino, for the sake of simplicity.\nYou'll learn theoretical, proven facts about the advantages of Interrupts, and you'll also get to try it with your own microcontroller platform on several optional projects that are presented to you as challenges. So this is not exactly a hands-on course, not if you don't want it to be. There are no promises on the projects you’ll make because we won’t force you to build something you didn’t choose to. However, we strongly recommend that you code along. Several microcontroller development platforms are showcased, but you should follow the examples with your own microcontroller.\nAfter grasping this knowledge, we expect you to think differently when designing your embedded applications in the future. By adding this technique to your bag of tricks, you'll get one step closer to making embedded applications like a professional, and hopefully you'll feel less like a beginner.",
      "target_audience": [
        "Arduino Developers.",
        "Software Developers.",
        "Makers."
      ]
    },
    {
      "title": "Verification Series Part 5: UVM RAL Essentials",
      "url": "https://www.udemy.com/course/uvm-for-verification-part-3register-abstraction-layer-ral/",
      "bio": "Step by Step Guide from Scratch",
      "objectives": [
        "Using UVM RAL for verification of DUT Registers and Memories",
        "Understanding different Register as well memories methods",
        "Implementing Frontdoor and Backdoor access methods",
        "Implementing Implicit and Explicit Predictor",
        "Coverage Computation for Register and Memories"
      ],
      "course_content": {
        "Adding Register and Memory to Verification Environment": [
          "Course Overview",
          "Agenda",
          "Advantage of UVM RAL P1",
          "Advantage of UVM RAL P2",
          "Advantage of UVM RAL P3",
          "Advantage of UVM RAL P4",
          "When to use RAL in Verification environment",
          "Code",
          "Components of Register model P1",
          "Components of Register model P2",
          "Components of Register model P3",
          "Notes",
          "Typical Learning Path",
          "Understanding different types of registers",
          "Implementation of Register in Verification Environmnet P1",
          "Implementation of Register in Verification Environmnet P2",
          "Alternate way of adding configure function",
          "Summary : Configure function",
          "Implementation of Register in Verification Environmnet P3",
          "Code",
          "Slides",
          "Adding Register with two fields",
          "Code",
          "Adding Register with reserved bits",
          "Code",
          "Different Access Policy P1",
          "Different Access Policy P2",
          "Different Access Policy P3",
          "Different Access Policy P4",
          "Notes",
          "Adding Memory P1",
          "Adding Memory P2",
          "Code",
          "Slides",
          "A11",
          "A12"
        ],
        "Adding Register Block": [
          "Agenda",
          "Adding Register Block P1",
          "Adding Register Block P2",
          "Adding Register Block P3",
          "Code",
          "Slides",
          "A21"
        ],
        "Understanding Adapter": [
          "Agenda",
          "Usage of adapter",
          "Typical flow",
          "Structure of uvm_reg_bus_op struct",
          "Complete flow",
          "Understanding reg2bus",
          "Understanding bus2reg",
          "Adapter code with native memory ports P1",
          "Adapter code with native memory ports P2",
          "Adapter code with Protocol Specific ports P1",
          "Adapter code with Protocol Specific ports P2",
          "Summary",
          "Slides",
          "A31"
        ],
        "Different Register Method": [
          "Agenda",
          "Types of Predictor : Implicit Predictor",
          "Types of Predictor : Explicit Predictor",
          "Types of Predictor : Passive Predictor",
          "Slide",
          "Driver Sequencer Communication",
          "Code",
          "Understanding Design",
          "Adding Driver + Sequencer",
          "Adding Agent",
          "Adding Register Model",
          "Adding env + uvm test top + testbench top",
          "Executing Code",
          "Design Code",
          "Understanding Desired and Mirrored Values",
          "Different register methods",
          "Working with Desired Value",
          "Testbench Code",
          "Working with Mirrored Value",
          "Testbench Code",
          "Understanding predict and mirror",
          "Demonstration",
          "Testbench Code",
          "Single Read and Write Transaction",
          "Multiple Read and Write Transaction",
          "Testbench Code",
          "Using randomize",
          "Testbench Code",
          "Understanding Reset Methods",
          "Demonstration",
          "Testbench Code",
          "Connecting reset methods to DUT",
          "Testbench Code",
          "A41"
        ],
        "Different ways of accessing Register and Memories": [
          "Agenda",
          "Type of access methods p1: Frontdoor",
          "Type of access methods p2: Backdoor",
          "Frontdoor Demonstration",
          "Testbench Code",
          "Fundamentals of Backdoor access",
          "Demonstration",
          "Design Code",
          "Testbench Code",
          "Peek and Poke P1",
          "Peek and Poke P2",
          "Design Code",
          "Testbench Code",
          "A51"
        ],
        "Explicit Predictor and Coverage": [
          "Agenda",
          "Understanding Design for Explicit Predictor",
          "Building Verification env P1",
          "Building Verification env P2",
          "Building Verification env P3",
          "Building Verification env P4",
          "Testing Code",
          "Design Code",
          "Testbench Code",
          "Coverage analysis P1",
          "Coverage analysis P2",
          "Coverage analysis P3",
          "Design Code",
          "Testbench Code",
          "run.do"
        ],
        "Working with Memories": [
          "Agenda",
          "Understanding Design",
          "Building DRV + MON + SCO + AGENT",
          "Building Register model",
          "Adding Register sequence : Single Transaction",
          "Adding Register sequence : Multiple Transactions",
          "Design Code",
          "Testbench Code",
          "Burst Transactions",
          "Design Code",
          "Testbench Code",
          "Coverage computation for memory P1",
          "Coverage computation for memory P2",
          "Design Code",
          "Testbench Code"
        ],
        "Complete Project": [
          "Agenda",
          "Understanding Design P1",
          "Understand Design P2",
          "Building Verification environment P1",
          "Building Verification environment P2",
          "Building Register model P1",
          "Building Register model P2",
          "Adding testbench top",
          "Testing DUT",
          "Design Code",
          "Testbench Code",
          "A81",
          "A82"
        ],
        "Bonus Internship Program": [
          "Remote Internship Program"
        ]
      },
      "requirements": [
        "Basic understanding of Verilog, SystemVerilog, and UVM"
      ],
      "description": "Writing Verilog test benches is always fun after completing RTL design. You can assure clients that the design will be bug-free in tested scenarios. As system complexity grows day by day, System Verilog becomes a choice for verification due to its powerful capabilities and reusability, which help verification engineers quickly locate hidden bugs. System Verilog lags behind the structured approach, whereas UVM works hard to form a general skeleton. The addition of the configuration database shifts the way we used to work with the verification language in the past. Within a few years, verification engineers recognized the capabilities of UVM and adopted it as a de facto standard for RTL design verification. The UVM will have a long run in the verification domain; hence, learning about the UVM will help VLSI aspirants pursue a career in this domain.\nThe UVM Register layer provides a set of libraries for adopting UVM for verification of DUTs consisting of registers as well as memories. UVM RAL provides a set of abstract methods to access the register as well as memories with either a front-door or back-door access mechanism that are easy to use as well as configurable. We will also be covering the coverage computation we get with UVM RAL.",
      "target_audience": [
        "Engineers involved/interested in the verification of RTL's"
      ]
    },
    {
      "title": "Hands on projects with the I2C protocol - Learn by doing!",
      "url": "https://www.udemy.com/course/i2c-protocol/",
      "bio": "Gain a deep understanding of the I2C and GPIO peripherals with hands on embedded systems projects using STM32",
      "objectives": [
        "Be able to set up I2C communication between microcontrollers and thousands of I2C devices available in the market",
        "Understand how OLED displays work and know how to display content on them",
        "Gain a deep understanding of how to set up I2C communication between a STM32 Nucleo microcontroller and a Linear Technologies LTC2990 Current, Voltage and Temperature sensor",
        "Understand how to enable GPIO input to read input into the microcontroller from push buttons",
        "Understand Hardware Abstraction Layer (HAL) Libraries and how to use them",
        "Feel confident and comfortable programming applications on the Cortex-M platform",
        "Read datasheets for I2C slave devices to figure out how to make them work with a microcontroller master"
      ],
      "course_content": {
        "Introduction": [
          "Before we get started!",
          "Course Introduction"
        ],
        "I2C Protocol Theory": [
          "Section 1 Introduction",
          "I2C Protocol Primer",
          "I2C Primer Quiz",
          "I2C Connections",
          "I2C Connections Quiz",
          "Calculation of Pull-up Resistance",
          "I2C Pull Up Resistance Calculation Excercise",
          "Guidelines",
          "Effects of bus capacitance",
          "Commonly used I2C Formats",
          "Course reference documents",
          "LTC2990 Read Protocol Analysis",
          "About the hardware",
          "Purchasing the hardware"
        ],
        "Development Environment - Atollic": [
          "Alternate Development Environment Setup and Exercises",
          "Alternate Development Environment Handout"
        ],
        "Hands-on lab sessions": [
          "Section 3 Introduction",
          "Installing STCubeMx",
          "Setting up the STCubeMx Project to work with MakerMax I2C Shield",
          "Writing the I2C Read Driver for LTC2990",
          "Using the I2C Driver to read the supply voltage from LTC2990 slave",
          "Using I2C Write to configure the LTC2990",
          "Writing the I2C Driver for SSD1306 controller"
        ],
        "Unlocking the full potential of the I2C shield": [
          "Section 4 Introduction",
          "Challenge 1 - Unlocking real time temperature sensing",
          "Challenge 1 Solution - Unlocking real time temperature sensing",
          "Improving the OLED display",
          "Configuring the LTC2990 Control Register",
          "Challenge 2 - Unlocking potentiometer analog input",
          "Challenge 2 solution - Unlocking potentiometer analog input",
          "Challenge 3 - Unlocking processor current sensing",
          "Challenge 3 solution - Unlocking processor current sensing",
          "Challenge 4 - Unlocking push button digital input",
          "Challenge 4 solution - Unlocking push button digital input"
        ],
        "Closing Notes": [
          "Guidelines",
          "Congratulations and Thank you!"
        ],
        "Setting up the development environment (optional)": [
          "Section 2 Introduction",
          "Setting up the virtual machine",
          "Setting up Linux OS on the virtual machine",
          "Setting up the Eclipse development environment",
          "Setting up the development toolchain",
          "Creating a blinky project",
          "Setting up the open source debugger (Part 1 of 2)",
          "Setting up the open source debugger (Part 2 of 2)",
          "Running the blinky project",
          "FAQ and Troubleshooting"
        ]
      },
      "requirements": [
        "Basic knowledge of embedded systems",
        "STM32 Nucleo development board is recommended, but not mandatory",
        "MakerMax I2C development board is recommended, but not mandatory",
        "Basic understanding of the ARM Cortex processor fundamentals"
      ],
      "description": "Welcome to this course on embedded systems for STM32: I2C protocol masterclass. The I2C communication protocol is a popular protocol that microcontrollers use to talk to various devices such as EEPROMS and NVRAMs, ADCs and DACs, I/O interfaces for port expansion, and a whole array of different types of sensors. This class goes in-depth into the theory behind the I2C protocol, why it was originally designed, what types of common formats are available, and how to implement I2C communication between a STM32 microcontroller, a LTC2990 current, voltage and temperature sensor and an OLED display.\n\n\nWho am I?\nI’m Akshay, and I’ll be your instructor for this course. I have been fascinated with micro controllers since I was a child, and now I consider it lucky to have it as my profession. I currently write firmware for safety critical systems that go inside electric cars. With my knowledge of embedded systems over the past 10+ years, and working in Silicon Valley, I have gained a unique insight into what the industry needs and what the students are lacking.\n\n\nCourse Structure\nThe course is divided into four sections -\nSection 1 - In this section you will learn the theory behind the I2C protocol and how to implement it effectively.\nSection 2 - In this section you will set up a free and open source development environment to program and debug ARM Cortex microcontrollers. If you have previously completed my course on the Foundations of ARM Cortex-M processors, then you may choose to skip to the next section.\nSection 3 - In this section you will get hands-on experience on how to write the I2C drivers for the LTC2990 temperature, current and voltage sensor and the SSD1306 OLED display. You can take the knowledge learned in this section and apply it to any other I2C device of your choosing.\nSection 4 - In this section you will unlock features of the I2C Shield with specially designed assignments. After each assignment I will show you my method of implementation for comparison.\n\n\nWhat hardware is needed for this course?\nThis course is created around the Nucleo series of boards from ST Microelectronics and I have designed, specifically for this course a custom board that fits on top of the Nucleo board. The Nucleo board is available for purchase directly from ST Micro and the custom I2C board can be purchased  on www(dot)makermax(dot)ca to allow you to get hands-on without having a whole electronics lab at your desk. Although this hardware is recommended, it is not mandatory. If you choose not to buy the hardware, you will still be able to follow along through all the lectures as I will show you my implementation. The best way to learn however, is to try and implement it yourself. If you have further questions on the hardware or anything else, send me a message! I would be more than happy to help you.",
      "target_audience": [
        "An embedded systems enthusiast, professional or student who wants to explore the peripherals of a microcontroller",
        "If you wish to master the I2C communication protocol",
        "If you wish to gain a deep understanding of the GPIO peripheral",
        "Already been working with ARM Cortex microcontrollers and want to gain a deeper understanding of the processor's peripherals"
      ]
    },
    {
      "title": "CNC Milling machine programming using G-Code",
      "url": "https://www.udemy.com/course/cnc-milling-machine-programming-using-g-code/",
      "bio": "Learning to read and write CNC programs with FANUC G Code has never been so easy",
      "objectives": [
        "Program a part on a CNC Mill",
        "Have a good understanding of programming G-Code",
        "Program a CNC Machine to a professional level"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Covering the basics"
        ],
        "Program layout and header": [
          "Program header",
          "Setting the datums",
          "Defining the working plane using G17, G18 and G19"
        ],
        "Programming a profile part": [
          "Programming example part"
        ],
        "Mid course Quiz": [
          "Mid Course Quiz"
        ],
        "Canned Cycles": [
          "G81 Drilling cycle",
          "G82 Counter bore cycle",
          "G83 Peck drilling cycle",
          "G84 Tapping cycle",
          "G85 and G86 Boring cycles"
        ],
        "Helical Milling": [
          "Helical Milling"
        ],
        "Programming a part - The Doobry": [
          "Studying the engineering drawing",
          "Roughing out the bore using helical spiral milling",
          "Finishing the bore using the G86 boring cycle",
          "Centre Drilling",
          "Drilling Cycle",
          "Profile"
        ],
        "Final Assessment": [
          "Final Quiz"
        ],
        "Bonus Information": [
          "Bonus Information"
        ]
      },
      "requirements": [
        "Basic knowledge of G-Code required"
      ],
      "description": "Do you want become a CNC machinist?\nDo you have access to a CNC router or milling machine and need to learn how to program it?\nMaybe you are already working in a machine shop and wish to improve your skills and pay grade?\n\n\nGet a foot in the door in any machine shop by learning to program CNC milling machines.\n\n\nDon't just rely on CAD/CAM to produce your parts, having a good understanding of the code CAM software outputs is an important part of being a CNC machinist.\nIf you are a proud owner of a desktop CNC Router or are looking to improve your knowledge in a professional industry. you need to have a complete understanding of how to program FANUC G-Code.\nThis course will teach you how to program CNC parts using G-Code, the language of CNC Machines.\n\n\nAll Cycles Explained\nG81 drilling cycle\nG82 Counter boring\nG83 peck drilling\nG84 Tapping cycle\nG85 Boring Cycles\n\n\nAll the Techniques\n\n\nG10 and G54 Datum setup\nHelical milling\nProgramming best practices\nExample programs\nG17, G18 and G19 planes explained\nFloating datum\n\n\nBecome an expert in the world of CNC machining with this course!\n\n\nWhat this course does not teach:\nMachine setup procedure\nAt the machine instructions\nHow to operate a CNC machine",
      "target_audience": [
        "Machinist apprentice",
        "Hobbyist CNC Owner",
        "CNC Machine operator",
        "CNC Machining Student",
        "Mechanical engineer"
      ]
    },
    {
      "title": "Introduction to Surface Mount Technology",
      "url": "https://www.udemy.com/course/smd-smt-surface-mount-technology-soldering-surface-pcb-circuit-design/",
      "bio": "In this Course, you will learn Surface Mount Technology and Master Soldering Surface Mount Devices (SMD) in no Time",
      "objectives": [
        "What is surface mount Technology?",
        "Advantages and Disadvantages of SMT",
        "Surface Mount vs Through Hole",
        "Why Use SMD Technology?",
        "Types of SMT",
        "SMT Technical Terms",
        "SMD Safety Precautions",
        "Printed circuit boards",
        "Surface Mount Design",
        "Surface mount components",
        "Tools and Equipment",
        "The Work Area",
        "Different Soldering Options",
        "Assembly & Rework",
        "Practical Assembly and Rework",
        "Practical Soldering Steps",
        "Good Soldering Vs Bad Soldering",
        "Applications and Conclusion",
        "Set Up an Electronics Home Lab Tools and Equipment",
        "Troubleshoot Your Electronics Projects",
        "Electronic & Electrical Devices Maintenance&Troubleshooting",
        "How to Solder Electronic Components Like A Professional",
        "How to Buy Electronic Components Online",
        "Introduction to Electronic Components: A Step By Step Guide",
        "Choose the right tools you need to have to keep yourself safe while soldering and solder the right way",
        "Differentiate between good soldering and bad soldering with real life examples",
        "Follow a Hardware Troubleshooting Checklist",
        "Follow a Software Troubleshooting Checklist",
        "What are the right tools for troubleshooting",
        "What are the things to look for when you have a problem in your project",
        "Understand the concepts of voltage, resistance and current",
        "Understand the VOLT OHM Meter/ Digital Multi Meter and how to use safely",
        "Use Ohm's Law to calculate voltage, current and resistance",
        "Use resistors in various configurations",
        "Understand and use capacitors",
        "Understand and use diodes",
        "Understand and use a transistor",
        "Get Free shipping for items they need to purchase online",
        "Start your first online purchase operation",
        "Know what exactly do you need to buy things online"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Introduction",
          "What is SMT?",
          "Discussing Your Familiarity with Surface Mount Assembly Concepts",
          "Advantages of SMT And Disadvantages of SMT"
        ],
        "Surface Mount vs Through Hole": [
          "Surface Mount vs Through Hole",
          "Practical: Surface Mount vs Through Hole",
          "Exploring Surface Mount and Through-Hole Technologies in Electronics",
          "Quiz"
        ],
        "Before You Start": [
          "Things you need to start soldering",
          "SMD Safety Precautions",
          "Essential Preparations for Soldering and Safety Precautions for SMD Work",
          "Quiz"
        ],
        "SMT Layout and Footprint": [
          "SMT Layout and Footprint"
        ],
        "Tools Needed": [
          "Tools Needed for SMD Soldering",
          "Tools Needed",
          "Identifying and Understanding Essential Tools for SMD Soldering",
          "Quiz"
        ],
        "SMD Components": [
          "Resistors",
          "Capacitors",
          "Fuse",
          "Coil",
          "Diode",
          "Transistors",
          "Crystals",
          "SMD Components Summary",
          "Practical: SMD Components",
          "Exploring and Identifying Surface-Mount Device (SMD) Components",
          "Quiz"
        ],
        "Ordering SMT Components": [
          "Ordering SMT Components"
        ],
        "Different SMT Soldering Methods": [
          "Different SMT Soldering Methods"
        ],
        "Working Area": [
          "Working Area"
        ],
        "Process of SMT Assembly": [
          "Process of SMT Assembly"
        ]
      },
      "requirements": [
        "Basic experience in Electronics",
        "Basic experience in Electronic devices",
        "A Will to apply, not just watch"
      ],
      "description": "In this course, you will learn Surface Mount Technology and master soldering Surface Mount Devices (SMD) in no time. With 122 lectures and 10 hours of HD content, including 5 hours of practical videos, an electronic maintenance book, and practical electronics and electrical tests, you'll have all the resources you need to excel.\nWhy you should take this course?\nLearn Surface Mount Technology.\nMaster Soldering Surface Mount Devices (SMD).\nLearn how to make your projects much smaller.\nLearn how to make more space for other components on the board.\nEasy to learn, no previous skills needed.\nWhat you will get when you join this course?\nMore than 5 Hours of Practical Videos.\nAccess to the Electronic and Electrical Practical Test Course (Usually priced at $200).\nAccess to our Best Selling Amazon Book (Basics of Electronic Components Book) and how to deal with each item (Usually priced at $50).\nAccess to more than 122 Lectures in Full HD.\nAccess to more than 10 Hours of Video Content.\nWelcome to this course.\nEver wondered what these little components are that you see on electronic boards and what the right soldering tools are for you? Did you ask yourself how these tiny elements are soldered to a PCB Board? Did you wonder why your soldering doesn't look or feel like a professionally soldered board? This course has all the answers for you.\nYou will learn SMT (Surface Mount Technology) and THT (Through Hole Technology) and how to master soldering using the right tools for the job.\nYou can count on these results:\nWhat is Surface Mount Technology?\nSurface Mount vs. Through Hole.\nWhy Use SMD Technology?\nAdvantages and Disadvantages of SMT.\nTypes of SMT.\nSMT Technical Terms.\nSMD Safety Precautions.\nPrinted Circuit Boards.\nSurface Mount Design.\nSurface Mount Components.\nTools and Equipment.\nThe Work Area.\nDifferent Soldering Options.\nAssembly & Rework.\nPractical Assembly and Rework.\nPractical Soldering Steps.\nGood Soldering vs. Bad Soldering.\nApplications and Conclusion.\nYou will also learn:\nHow to Set Up an Electronics Home Lab Tools and Equipment.\nHow to Solder THT Electronic Components Like A Professional.\nIntroduction to Electronic Components.\nElectronic & Electrical Devices Maintenance Troubleshooting.\nTroubleshoot Your Electronics Projects.\nHow to Buy Electronics Online.\nBasic soldering is a skill that's easy to learn and not hard to master. It just takes practice! There is a huge range of soldered situations out there, from tiny chip resistors on circuit boards to large UHF connectors. There is also a large variety of irons, tips, and solder to choose from, and it certainly does help to have the right tool for the job.\nSurface-mount technology (SMT) is a method for producing electronic circuits in which the components are mounted or placed directly onto the surface of printed circuit boards (PCBs). An electronic device so made is called a surface-mount device (SMD). In the industry, it has largely replaced the through-hole technology construction method of fitting components with wire leads into holes in the circuit board.\nSMT is smaller, faster, cheaper. In this Course, you will learn everything about SMT, THT, and soldering.\nBonuses:\nBonus 1: Introduction to Electronic Components.\nBonus 2: Troubleshoot Your Electronics Projects.\nBonus 3: How to Buy Electronics Online.\nGood luck, and remember, good soldering takes practice! Warning: You are working with HOT liquid metal; it is a matter of time before you will get burned.\nWhat you will learn\nUnderstand Surface Mount Technology (SMT).\nMaster soldering Surface Mount Devices (SMD).\nMake projects smaller and create more space for other components.\nSet up an electronics home lab.\nSolder THT electronic components like a professional.\nTroubleshoot electronic and electrical devices.\nBuy electronics online safely.\nWho is this course for\nBeginners interested in electronics and soldering.\nElectronics hobbyists and enthusiasts.\nEngineering students and professionals.\nAnyone looking to learn Surface Mount Technology.\nRequirements\nNo prior experience required.\nBasic understanding of electronics is helpful but not necessary.\nWillingness to learn and practice soldering.\n\n\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in the Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge, we go into the depth of the topic and give you the exact step-by-step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years, we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy.\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million View, 20k+ Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelance engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their careers.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative teaching style that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, particularly for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to improve and make great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Electronics Geeks",
        "Anyone Interested in Learning The right way to solder SMD Components",
        "Electronics and Electrical Engineers",
        "Anyone with a need to brush up their knowledge of basic electronics"
      ]
    },
    {
      "title": "Learning SystemVerilog Testbenches with Xilinx Vivado 2020",
      "url": "https://www.udemy.com/course/systemverilog-testbenches-for-newbie-with-xilinx-vivado-2020/",
      "bio": "Step by Step Guide from Scratch",
      "objectives": [
        "Learning SystemVerilog Testbenches on Xilinx Vivado Design Suite 2020",
        "Practical approach for learning SystemVerilog Components",
        "Inheritance, Polymorphism, Randomization in SystemVerilog",
        "Understand interprocess Communication",
        "Understand Class, Processes, Interfaces and Constraints",
        "Everything you need to know about SystemVerilog Verification before appearing for Interviews",
        "You will start Loving SystemVerilog",
        "From Zero to Hero in writing SystemVerilog Testbenches"
      ],
      "course_content": {},
      "requirements": [
        "Understanding of Digital System or Digital Electronics",
        "Understanding of Verilog"
      ],
      "description": "VLSI Industry is divided into two popular branches viz. Design of System and Verification of the System. Verilog, VHDL remain the popular choices for most Design Engineers working in this domain. Although, preliminary functional verification can be carried out with Hardware Description Language. Hardware Description language possesses limited capabilities to perform code coverage analysis, Corner cases testing, etc and in fact sometimes it becomes impossible to perform this check with HDL's.\nHence Specialized Verification languages such as SystemVerilog start to become the primary choice for the verification of the design.\nThe SystemVerilog Object-oriented nature allows features such as Inheritance, Polymorphism, etc. adds capabilities of finding critical bugs inside design that HDL simply cannot find.\nVerification is certainly more tricky and interesting as compared to designing a digital system and hence it consists of a large number of OOP's Constructs as opposed to Verilog. SystemVerilog is one of the most popular choices among Verification Engineer for Digital System Verification. This Journey will take you to the most common techniques used to write SystemVerilog Testbench and perform Verification of the Chips. The course is structured so that anyone who wishes to learn about System Verilog will able to understand everything. Finally, Practice is the key to become an expert.",
      "target_audience": [
        "Engineer's wish to pursue carrer as Front End VLSI Engineer / FPGA Design Engineer / Verification Engineer / RTL Engineer",
        "Anyone wish to learn System Verilog with minimum efforts",
        "Anyone wish to start writing their own System Verilog Testbenches"
      ]
    },
    {
      "title": "PLC programming Tia Portal Siemens",
      "url": "https://www.udemy.com/course/plc-programming-siemens-tia-portal/",
      "bio": "PLC Programming using ladder logic in TIA Portal and PLC SIM simulator",
      "objectives": [
        "Write your own PLC program independently from start to end",
        "Foundations of ladder logic and programming in Siemens environment",
        "You will learn what are digital and analog signals and how they interconnect to transmitters, PLCs and how to use them in real life",
        "You will learn what is it like to create a program from scratch (hardware+software design)",
        "You will be able to choose the right equipment, connect sensors to PLC and program it"
      ],
      "course_content": {},
      "requirements": [
        "No prior experience and/or knowledge  is needed for this course",
        "additional (advanced) lectures for those who want to learn more"
      ],
      "description": "No prior knowledge needed\nAfter completing this course you will be able to create your own PLC program from start to end\nNo software needed if you just want to watch and listen to what I do. You will still gain some knowledge from this course.\nBut If you really want to get the best out of this comprehensive course you might want to download free software from Siemens website and follow my steps. That way you will absorb about 70-80% of what I teach.\nIf you want to go even further then complete the tasks that I will give you. These tasks are variation of tasks that I will cover in this course. I guarantee that you will be able to start programming PLCs independently after completing this course.\n\n\nYou will learn the basics of instrumentation such as transmitters and the difference between voltage and current signal\nyou will be introduced to ladder logic programming language where we will go through all the important functions\nyou will be familiarised with the Siemens PLC hardware and Digital input and output cards, as well as Analog input and output cards and which one to choose\nwe will create several real life example codes step by step\neverything that we create together will be simulated with PLCSIM\nyou will differentiate between data types and how and when to use them\ncourse will also include some tips and tricks for intermediate students such as common rules and styles to programming PLCs, what to avoid, and how to structure your code\ncourse will also add tips on how to choose PLC for your specific project to optimise costs and performance",
      "target_audience": [
        "Anyone who wants to learn how to program PLCs",
        "Good for students and junior engineers to get them off to a good start in their future career",
        "Electricians, Technicians and other professions who want to take their careers to a next level and earn more"
      ]
    },
    {
      "title": "Complete 8051 Microcontroller Programming Course",
      "url": "https://www.udemy.com/course/complete-8051-microcontroller-programming-course-at89s52/",
      "bio": "Deep register level programming with 8-Bit 8051 microcontroller programming by reading the datasheet",
      "objectives": [
        "Programming 8051 microcontroller in Keil uVision IDE",
        "You will learn how to program a 8051 Microcontroller from scratch with datasheet approach",
        "Build your own projects with the 8051 microcontroller..",
        "You will be learning all the peripherals programming from scratch no libraries used in Keil uVision IDE"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge on electronics components",
        "Download and Install Proteus Professional",
        "Basic knowledge on C programming not mandatory"
      ],
      "description": "Over a 30+ lecture videos, 6.5+ Hours of Full HD Content that will take you in an interactive learning to not only master the coding of 8051 Microcontroller, but also learn the very basics of 8051 Microcontroller internal structure and hardware schematics required for building your own products out of 8051 (AT89S52) microcontroller, how it really works, it’s parts and how your code is working inside the CPU of a Microcontroller.\nHi, welcome you all to this course on Programming on 8051 microcontroller From Scratch.\nThe course is structured for the need of learners to understand microcontrollers from scratch till you master your skills. This course is the outcome of the experience I gained after training many of graduate students and working professionals in person, and with my expertise in the field of embedded systems. Few basic Embedded C concepts are also covered.\nSM Training Academy invites you all to enroll in this course and explore the world of embedded systems with step by step guidance by own expert trainers to excel in their career. There is no better way to master and understand the AVR microcontroller than joining this course. Whatever you want to learn is available in this course and also we will be updating the course with new lectures in a periodical manner. So join the course and enjoy learning.",
      "target_audience": [
        "Anyone with a curiosity for making electronics",
        "People with an beginner knowledge of embedded systems",
        "Electronics students and hobbyist"
      ]
    },
    {
      "title": "Raspberry Pi PICO an introduction with MicroPython",
      "url": "https://www.udemy.com/course/raspberry_pi_pico_micropython/",
      "bio": "This course is an introduction to Raspberry Pi PICO | PICO W is introduced | Sensors | Robotics| IoT | MicroPython |",
      "objectives": [
        "Raspberry Pi PICO",
        "Raspberry Pi PICO W is introduced",
        "MicroPython coding",
        "Interfacing and understanding sensors",
        "Robotics",
        "MIT app Inventor - Bluetooth App for Android phone",
        "Circuit diagrams and resource code",
        "web server -IoT",
        "Python 3 syntax"
      ],
      "course_content": {},
      "requirements": [
        "Beginner can start the course",
        "Laptop / desktop",
        "Raspberry Pi PICO / PICO W",
        "USB cable",
        "Basic sensors",
        "Android phone"
      ],
      "description": "Micropython is a lightweight version of Python 3 programming language designed for microcontrollers with a minimum of 256KB of ROM and 16KB of RAM. MicroPython supports chips like ESP32,ESP8266,STM32,nRF52,W600, RP2040 etc.\nRaspberry Pi RP2040 is a new microcontroller based on ARM M0+ architecture. Which is developed completely Raspberry PI foundation. MIcroPython coding is easy for students who want to learn the embedded systems.\nThis course mainly covers the basics of MicroPython with different sections, Python 3 syntax, GPIO controlling, and will update with more robotics projects soon. Students can expect regular updates on RPi PICO with MicroPython.\nIn this course, the software used is free of cost.\nFeatures of the board\nRP2040 microcontroller chip designed by Raspberry Pi in the United Kingdom.\nDual-core Arm Cortex M0+ processor, the flexible clock running up to 133 MHz.264KB of SRAM, and 2MB of onboard Flash memory.The castellated module allows soldering directly to carrier boards. USB 1.1 with device and host support. Low-power sleep and dormant modes. Drag-and-drop programming using mass storage over USB. 26 × multi-function GPIO pins.2 × SPI, 2 × I2C, 2 × UART, 3 × 12-bit ADC, 16 × controllable PWM channels. Accurate clock and timer on-chip. Temperature sensor. Accelerated floating-point libraries on-chip. 8 × Programmable I/O (PIO) state machines for custom peripheral support.",
      "target_audience": [
        "Electronics beginner, hobbyists, electronics professionals and anyone have an interest to learn new technology"
      ]
    },
    {
      "title": "The Theory Behind Electronics - A Beginners Guide",
      "url": "https://www.udemy.com/course/the-theory-behind-electronics-a-beginners-guide/",
      "bio": "Start your Journey in Electronics with a Solid Background - Current, Voltage, Resistance and Power",
      "objectives": [
        "Understand the R, L, C building blocks of analog electronics",
        "Calculate Voltage, Current and Power and understand the relation between them",
        "Understand the properties of DC and AC power supply",
        "Understand the applications of Resistors, Capacitors, Inductors, Diodes and Transistors",
        "Analyze basic electronic circuit",
        "Select the right components in future project",
        "Document circuits is a software tool",
        "Develop ideas using a mind mapping software"
      ],
      "course_content": {},
      "requirements": [
        "Setup/Install the recommended software tools  during the course introduction",
        "Start thinking like an innovator",
        "Prepare a nice coffee !"
      ],
      "description": "***** Feedback from Students *******\n\"I love this course. It truly is an amazing subject and the instructor gives great explanations on how electronics works. It amazes me how electronics are used every day and most people have no clue as to how they work.\" Joseph C.\n\"Excellent coverage of the fundamentals. Thanks!\", Kevin O'Reilly.\n\"For years I have wanted someone to explain the basics of electronics to me, and this course does just that, in clear, small focused chapters. I really recommend this to anyone that wants to learn the fundamentals of electronics.\" Paul Cockrell.\n\"This is fantastic. So well organized and presented so clearly! I feel like I'm learning very quickly. I even understand voltage and amperage which other people have explained to me many times but I never \"got\" without a visual analogy. Thank you for this wonderful class, I highly recommend it!.\" Cjay Roughgarden.\n\"Excellent course for beginners and intermediate electronics. I am in my first year of EET in college and this has been a great supplement to my initial courses. I hope you put out some more advanced Electronics courses later on. You do an excellent job of putting everything into terms that are relatable. Thanks\" David M.\n***************************************************************************************\nElectricity is all around us, it is some hidden energy force driving many applications we all use in our daily life. The theory behind electricity is based on some amazing phenomenon in nature and some of several materials properties that were discovered by great scientists. Electronics is a theory developed around the useful applications of electricity.  So, the first thing that we can say about electricity is that it is a really interesting subject!\nToday, electronic is becoming much more friendly hobby for many people worldwide that would like to easily combine hardware and software and do things by themselves, the prices of electric components are dropping, easy to use development platforms were created (e.g. Arduino) and it is very easy to collaborate and learn the subject in a few mouse clicks.\nThe Internet of Things is also an emerging driving force for innovators looking to build things using electronics and harness the power horse of the web technologies to create new products, services or just cool projects!\nThis course is a starting point, to learn the basic building blocks of electronics with step by step education program, easy to follow chapters, simple circuits’ demonstrations, quizzes to evaluate your understanding and review the key things to remember using a mind mapping template.\nJoin me with one of the biggest Makers Movement!",
      "target_audience": [
        "Newbies in electricity and electronics",
        "Do-It-Yourself Makers",
        "Arduino developers looking for more solid background",
        "Internet of Things entrepreneurs",
        "Students looking for a quick refresher on basic electronics theory"
      ]
    },
    {
      "title": "SCADA System Interface with PLC",
      "url": "https://www.udemy.com/course/scada-system-interface-with-plc/",
      "bio": "Learn SCADA hands-on by developing your own interfaces for different systems and control Your PLC.",
      "objectives": [
        "Create SCADA interfaces using various technologies allowing operators to interact with a live, running system.",
        "Use the provided PLC program as the basis for your interfaces.",
        "Create a fully-functional graphical interfaces to monitor PLC",
        "Build a fully functional PLC Program",
        "Use different types of relay that exist inside PLC",
        "Understand the Working principle of Relays and how they interact with Contacts",
        "Differentiate between PIC Microcontroller and PLC",
        "Learn different methods for programming PLC"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Introduction to Software Interface",
          "Project Planning – Integrating SCADA with PLC for Process Automation",
          "Very Important Note: Review Process",
          "Download and Install Indusoft Software",
          "Creating First SCADA Project",
          "Introduction to SCADA Project Setup"
        ],
        "Tags": [
          "Adding Tags to Database",
          "Verifying Our Project and Linking Services",
          "Managing Tags in SCADA Projects",
          "Managing Tags in SCADA Projects"
        ],
        "First SCADA Screen": [
          "Creating and Configuring Your First SCADA Interface",
          "Designing Your First SCADA Interface"
        ],
        "Downloading and Installing PLC Software": [
          "How to download and Install WPLSoft",
          "Setting Up PLC Programming Software"
        ],
        "PLC Program to be Controlled by SCADA Screen": [
          "PLC Program to be Controlled by SCADA",
          "Developing a PLC Program for SCADA Control"
        ],
        "Practical Work": [
          "PLC Practical Introduction",
          "SCADA Practical Implementation",
          "Practical Implementation of PLC and SCADA",
          "Practical Implementation of SCADA and PLC Control"
        ],
        "Practice Test": [
          "SCADA System and PLC Interface Fundamentals - Practice Test"
        ],
        "Who we are?": [
          "Who We Are?"
        ],
        "Course Project": [
          "Course Project",
          "Technical Review – Demonstrating SCADA-PLC Interface Implementation"
        ],
        "Course Wrap-Up": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "All software required for this course will be provided Free with Installation instruction in video lectures",
        "A Computer / Laptop"
      ],
      "description": "SCADA systems are computer-based systems that automate the data collection, monitoring, and control of a process or system. PLCs are a type of electronic device that is used to control a process or a system. Its function is to monitor the performance of its associated equipment and compare it against desired limits while collecting data for later analysis. In this course, you will learn SCADA hands-on by developing your own interfaces for different systems and controlling Your PLC.\n>>> Continues Updates <<<\nThe course is designed for individuals with little to no programming experience, looking to use SCADA systems to view and control PLCs. It begins by explaining the purpose of SCADA systems and how they work in conjunction with PLCs.\nWhy you should take this course?\nLearn SCADA hands-on by developing your own interfaces for different systems.\nControl your PLC with our user-friendly HMI interface.\nTest all inputs and outputs of your system (PLC) using our simulation software.\nCreate dynamic layouts to quickly create interfaces for any situation.\nLearn programming and web development.\n4.2 Star | 1000 STUDENTS!!! THANK YOU!!!\nWhat students are saying:\nDan Menezes says, \"THIS COURSE IS A VERY GOOD MATCH FOR MY REQUIREMENTS TO LEARN HOW TO SET UP A SCADA MONITORING SYSTEM.\"\nDamion Wilson says, \"I enjoyed the course. Thank you for the follow-up and I really enjoyed the extra videos.\"\nWelcome to this course.\nIn this course, you're going to learn about SCADA by creating graphical interfaces that you can use to monitor the automated processes, establish operating parameters, and even acquire data from a system that is already operated and functional. Wonderware Indusoft Software is the most used solution in the world of visualization. As such, we'll be working extensively with that technology.\nWe'll also be working hands-on with InduSoft. By the end of this course, you're to know what people are doing in the world of automation today.\nSo get ready to start designing and creating your very first SCADA interface easily and effectively, with 24/7 support.\nWhat You Will Learn:\nDevelop SCADA interfaces for various systems.\nControl PLCs using user-friendly HMI interfaces.\nTest inputs and outputs with simulation software.\nCreate dynamic layouts for any situation.\nGain skills in programming and web development.\nWho is This Course For:\nIndividuals with little to no programming experience.\nEngineers and technicians looking to learn SCADA.\nProfessionals wanting to control PLCs.\nAnyone interested in automation and control systems.\nRequirements:\nNo prior experience required.\nBasic understanding of computer operations.\nWillingness to learn and apply new skills.\n\n\nAbout the Instructor:\nEducational Engineering Team\nTeam of Skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading entity in the Microcontroller industry with over 13 Years of Experience in teaching and practical projects. We provide in-depth, step-by-step blueprints on taming complex topics in easy and digestible bite-sized videos.\nHaving been in the Programming and Microcontroller business since 2007, we've catered to students' and educators' needs, teaching over 250k-THOUSAND students and counting through our 100+ courses on Udemy.\nAshraf Said AlMadhoun is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He is the Chief Educational Engineer at Educational Engineering Team, a company founded to explore new trends and technologies and to educate the world.\nOur online courses have helped over 250,000 people globally to excel and make great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone who want's to learn Control",
        "Anyone who want's to control a Machine remotely or using a visual interface",
        "Any Tech Geek who want's to know PLC, SCADA and How to take full advantage of SCADA System design.",
        "For those lacking the requisite knowledge to make the most of this course, my first course \"PLC Programming covers things you'll need.",
        "This course requires students to already know the basics of PLC programming"
      ]
    },
    {
      "title": "PCIe Gen 6.0 Protocol : Basics to Advanced (VLSI)",
      "url": "https://www.udemy.com/course/pciegen6/",
      "bio": "Mastering PCIe Gen 6: Gives you unique insights into each layer",
      "objectives": [
        "Key features and advancements of PCIe Gen6.",
        "How data is transferred using high-speed lanes.",
        "Physical and protocol layers of PCIe architecture.",
        "Error management, power efficiency, and security mechanisms.",
        "Real-world applications and system design considerations."
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of computer architecture and I/O interfaces.",
        "Knowledge of digital electronics and data communication principles.",
        "Optionally experience with hardware design or embedded systems.",
        "Interest in high-speed interfaces and system integration."
      ],
      "description": "Unlock the potential of PCIe Gen 6 technology with this specialized course tailored for design and ASIC verification engineers. PCIe (Peripheral Component Interconnect Express) has become a cornerstone of modern high-speed interconnect systems, and Gen 6 introduces groundbreaking advancements to meet the demands of next-generation computing, networking, and storage applications. This course provides a comprehensive understanding of the PCIe Gen 6 transaction layer, focusing on address space management, transaction routing, and the architectural enhancements that set it apart from previous generations.\nThrough structured modules, you’ll explore fundamental concepts, including packet formats, flow control mechanisms, and the introduction of FLIT (Flow Control Unit) encoding—a critical feature enabling Gen 6’s impressive bandwidth capabilities. The course delves into the backward compatibility of PCIe Gen 6 with earlier versions, ensuring seamless integration into existing systems. You'll gain insights into how Gen 6 achieves twice the bandwidth of Gen 5 while addressing power efficiency and system scalability.\nParticipants will also tackle advanced topics such as high-speed signaling challenges, PAM4 (Pulse Amplitude Modulation) encoding, clocking requirements, and error-handling mechanisms unique to Gen 6. Emphasis is placed on practical design considerations and robust verification strategies, leveraging industry-standard methodologies like UVM (Universal Verification Methodology). Hands-on examples, test scenarios, and real-world case studies provide a deep understanding of implementation and compliance testing.\nThis course is designed to equip engineers with the expertise to design and verify PCIe Gen 6 systems confidently. Whether you’re working on cutting-edge ASIC designs or ensuring compliance with stringent verification standards, this course will enable you to tackle complex challenges effectively. Stay ahead in the semiconductor industry by mastering PCIe Gen 6—the backbone of high-performance computing and data-intensive applications. Join us and elevate your skills to the next level.",
      "target_audience": [
        "Beginners who wants to learn the PCIe protocol",
        "Working professionals who want to enhance the knowledge",
        "VLSI Design engineers who are designing the PCIe protocol",
        "VLSI Verification engineers who are verifying different scenarios of PCIe protocol"
      ]
    },
    {
      "title": "Fusion 360 CAD/CAM for CNC routers",
      "url": "https://www.udemy.com/course/fusion-360-cad-cam-for-cnc-routers/",
      "bio": "Make any part using your CNC router with Fusion 360",
      "objectives": [
        "Master Fusion 360 for CNC Routers",
        "CAD/CAM training"
      ],
      "course_content": {},
      "requirements": [
        "No previous knowledge required"
      ],
      "description": "Do you own a CNC router?\nWant to master your machine to make any part?\n\n\nWhether you are a hobbyist or a professional,\nthis course will teach you how to use Fusion 360 to produce parts for your CNC Router.\n\n\nFusion 360 is free for hobbyists, startups and makers. Its the perfect CAD/CAM system for CNC Routers.\n\n\nFrom affordable DIY desktop CNC routers to expensive industrial machines, this course covers it all.\n\n\nGain full control of your machine and program any part you can imagine with CAD/CAM!\nA complete Fusion CAD/CAM training package aimed specifically at CNC router owners/programmers and operators.\n\nCourse includes:\nMastering the menus and navigation of Fusion 360\nHow and when to use constraints\nCAD best practices\nCAM best practices\nSketching\nUsing the correct too paths\nMastering the post-processor\nTips and tricks used in industry\nAll taught by a time served CNC machine tools engineer\nIf you are a CNC Router, hobbyist or professional, this course is made for you.",
      "target_audience": [
        "Hobbyist CNC router owners",
        "Professional CNC router operators"
      ]
    },
    {
      "title": "Make an Open Source Drone",
      "url": "https://www.udemy.com/course/make_a_drone/",
      "bio": "A fun project in which you learn about drones by making one. Use the Pixhawk or Multiwii AIO flight controllers",
      "objectives": [
        "Understand the different types of multi-rotor drones.",
        "Understand flight terminology.",
        "Understand the principles of drone flight.",
        "Understand the roles of propellers, motors, flight controller, ESC in drone flight.",
        "Understand the use of LiPo batteries and their use.",
        "Understand the use of GPS in drone flight.",
        "Understand how to bind a radio receiver and transmitter.",
        "Understand the necessary drone pre-flight checks.",
        "Understand the basic safety and legal requirements involved in recreational drone flight.",
        "Assemble a quadcopter from parts available in the market.",
        "Upload the MultiPirateNG firmware to the Crius V2 flight controller.",
        "Use the open source Mission Planner software to configure a drone.",
        "Practice flying their quadcopter and fun while becoming better pilots!",
        "Learn how to use the Pixhawk flight controller."
      ],
      "course_content": {
        "Introduction": [
          "What is this course about",
          "Parts and Tools",
          "Crius or Pixhawk? Read this before you continue"
        ],
        "Multi-copter drone basics": [
          "Introduction",
          "Another drone classification",
          "Types of multi-rotor drones",
          "Roll, pitch, yaw",
          "Controlling the motors",
          "Procuring the right parts",
          "Terminology",
          "Propellers",
          "Battery and charger, Part 1",
          "Battery and charger, Part 2",
          "Flight controller and its peripherals",
          "Other tools and things",
          "Conclusion"
        ],
        "ESC and motors": [
          "Introduction",
          "Preparation",
          "Attach the connectors to the ESC wires",
          "Attach connectors to motor wires",
          "Conclusion"
        ],
        "Power distribution board assembly": [
          "Introduction",
          "About the power distribution board",
          "Solder the ESC power wires",
          "Solder the battery wires and connectors",
          "Conclusion"
        ],
        "Main body assembly": [
          "Introduction",
          "Attach the motors to the arms",
          "Attach the arms to the power distribution board, Part 1",
          "Attach the arms to the power distribution board, Part 2",
          "Conclusion"
        ],
        "Flight controller and peripherals": [
          "Introduction",
          "The PWM and PPM signalling options, Part 1",
          "The PWM and PPM signalling options, Part 2",
          "Setup radio receiver and flight controller to use PWM",
          "Connect the GPS module to the flight controller, Part 1",
          "Connect the GPS module to the flight controller, Part 2",
          "Connect the GPS module to the flight controller, Part 3",
          "Connect the GPS module to the flight controller, Part 4",
          "Attach flight controller to chassis",
          "Connect ESCs to flight controller",
          "Conclusion"
        ],
        "Battery and charger": [
          "Introduction",
          "A primer on batteries",
          "How to charge the battery",
          "Attach the battery to the frame",
          "Conclusion"
        ],
        "The firmware": [
          "Introduction",
          "Clear the EEPROM",
          "Download and install the firmware",
          "Conclusion"
        ],
        "The transmitter": [
          "Introduction",
          "Binding receiver and transmitter",
          "Understand the transmitter basic operations",
          "Conclusion"
        ],
        "Mission Planner": [
          "Introduction",
          "Download and install Mission Planner",
          "Mission Planner setup, Part 1",
          "Mission Planner setup, Part 2",
          "Test the GPS module",
          "Conclusion"
        ]
      },
      "requirements": [
        "Windows computer",
        "Basic electronics tools (please see free list of tools in section 1)",
        "Be comfortable working with electronic components",
        "Willingness to persevere despite set-downs (like broken propellers resulting from a drone rough landing)"
      ],
      "description": "PLEASE READ: In August 2023, I have updated the course with new lectures and a new flight controller. In the new lecture I show you how to upgrade your drone to use the popular MATEK F405TE flight controller. I have also added lectures about batteries and drone classifications.\nThe MATEKSYS F405-TE is a perfect fit for our learning objectives. It's a minimalist yet powerful flight controller, making it an excellent device to explore.\nAlso, by transitioning to the MATEKSYS F405-TE, I can lower the overall cost of our drone without compromising its performance or capabilities. This will make our quadcopter design more accessible to hobbyists on a budget, which aligns with my mission to make drone technology more attainable and exciting for everyone.\n\n\nWelcome to \"Make an Open Source Drone\", a course that will teach you how to build a quadcopter from scratch!\nPlaying with drones, and especially quadcopters, is fast becoming a very popular hobby. As a hobby, it combines state of the art open technology with large open spaces. It even gives me a great excuse to get out of my lab and get some sun!\nWhile you can just go to a shop and purchase a drone that is ready to fly, by doing so you miss out on all the fun and knowledge that comes with building your own flying machine. I admit I have done that myself. Getting my ready-to-fly drone out of its box and flying it was fun, but only for a short period.\nSoon after the first excitement settled, I realised that I didn't know much more than before I opened the box. I was also unable to do anything more than what the drone was programmed to do, to begin with.\nThat is why making your own open source drone is such a great way to have fun while learning.\nin this course, my co-instructor Aristofanis and I will help you understand drones and how to build them. You will learn about their mechanical and electronic components and how they interact. You will learn about the software that provides semi-autonomous flight capabilities to drones.\nMotors, flight controllers, Electronic Speed Controllers, batteries and chargers, receivers and transmitters, and so much more, will all make sense as you progress through this course and go through the process of assembling your drone.\nBy the end of the course, apart from being able to assemble your drone, you will have the confidence to perform repairs and to extend its capabilities.\nAlong the way, you will learn about the principles of drones and many design and performance details for each of the components and software. With this knowledge, you will be able to go on and construct your own drones, configure and program them, all while having a great time doing so.\nThe course starts by explaining the basic principles of drones.\nYou will learn about the types of multi-rotor drones, flight terminology, principles of drone flight, and we will introduce the basic drone components like propellers, motors, the flight controller and more.\nThen, you will get into the actual construction of the drone. You will solder the Electronic Speed Controllers to the motors and assemble the drone arms.\nYou will then solder the ESCs and battery to the power distribution board, and start the assembly of the drone frame.\nAfter that is the radio control subsystem. You will learn about the different types of signalling, connect the radio receiver to the flight controller, and connect the GPS module.\nNext, you will learn about LiPo batteries and battery chargers, safety and maintenance.\nWith a fully charged battery, you will continue with the firmware and software. You will learn about the MegaPirateNG firmware and how to upload it to your drone.\nYou will learn how to bind your radio transmitter and receiver, and then how to calibrate your new quadcopter using the open source Mission Planner software.\nAs always, we save the best for last! At the end of the course, you will learn how to calibrate the Electronic Speed Controllers and attach the propellers.\nAnd in the end, you will be able to take your drone to a field and launch it, starting to build-up your pilot skills!\nAs with all Tech Explorations courses, we are here to help you in this exciting learning journey. As a student of this course, you will have access to the Questions and Answers board and interact with the instructors. You can ask questions, and make comments or suggestions.\nPlease continue by having a look at the list of parts that you will need in this course. You can find it as a document download in the next lecture",
      "target_audience": [
        "Intermediate-level maker looking for a fun outdoors activity",
        "Anyone interested in drones for recreational use"
      ]
    },
    {
      "title": "Start the Internet of Things (IoT) from scratch",
      "url": "https://www.udemy.com/course/start-the-iot-from-scratch/",
      "bio": "Learn about the Internet of Things (IoT)",
      "objectives": [
        "Build your own IoT projects using NodeMCU based on Arduino platform",
        "Write programs to control your hardware",
        "Connect your IoTs to cloud services to store/process/share some data"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of using a computer",
        "A computer"
      ],
      "description": "Internet of Things (IoT) is the networking of physical devices or things using Wi-Fi or other networks. Things, can refer to a variety of physical devices or sensors such as bio sensors, actuators, home appliances, transponders, automobiles, farm sensors or other hardware. Now, IoT is changing the way we live. It helps us in daily live, i.e. collecting and processing huge amounts of data, interact with each other, and take advantage of cloud services and cloud storage.\nThis course will teach you about IoT and related hardwares from basic level. You will learn about:-\nProgramming a micro-controller using NodeMCU based on Arduino platform\nHow to control devices using digital and analog outputs\nHow to use some sensors for your projects, i.e. temperature, humidity, light sensor and so forth.\nHow to build some projects using digital and analog inputs\nHow to setup an access point and a web server from a NodeMCU micro-controller.",
      "target_audience": [
        "People/students who need to know about the Internet of Things",
        "People/students who need to build an IoT project"
      ]
    },
    {
      "title": "Arduino: NodeMCU ESP8266 IoT Wifi Relay Sensor Dashboard App",
      "url": "https://www.udemy.com/course/arduino-nodemcu-esp8266-wifi-relay-sensor-dashboard-web-app/",
      "bio": "Learn how to build your own sonoff, create amazing IoT dashboard web apps, control switches and graph sensor data",
      "objectives": [
        "Master Arduino ESP8266 programming",
        "Learn how to design and code amazing and beautiful web dashboard apps",
        "Learn how to use ChartJS to graph real-world sensor data",
        "Learn how to prototype esp8266 nodeMcu using breadboards",
        "Learn how to setup your coding environment and packages for maximum productivity using VS Code and Atom"
      ],
      "course_content": {},
      "requirements": [
        "Basic familiarity with Arduino and ESP8266",
        "Basic web technologies knowledge (HTML, CSS, Javascript)"
      ],
      "description": "Are you web developer or embedded developer? Student? Maker? Either way, IoT is not just a buzzword any more, it is becoming increasingly in demand, so if you are looking for a slight career change, great learning opportunity or just a fun and useful project, this course is for you!\n\nIt is designed to give you everything you need to design and code a working real-world IoT home-automation prototype device.\nYou will gain invaluable knowledge on every step of the entire process, explained simply, efficiently and with ease.\n\n\nI went into great detail and planning with each section, so that you can have a solid understanding of the goals for each section.\nI've prepared block diagrams both for hardware and software, schematics, additional learning resources etc. Everything is laid down efficiently, and there is no waste of time in this course, you will learn every minute of it, simple and effective.\n\n\nYou will learn how to build your own Sonoff device\nYou will see how to code Arduino firmware for esp8266 using VS Code, which will make process of coding incredibly enjoyable, clean and professional.\nYou will learn how to use JavaScript library -ko.js, for building amazing web applications from scratch, that are served directly from ESP8266 flash memory\nYou will learn how to use Charts.js - JavaScript library for creating amazing and interactive charts to display data from your switches and sensors.\nYou will learn how to utilize sensors like DHT22 and DS18B20 with esp8266.\nYou will code your own relay control module\nYou will learn how to emulate eeprom on esp8266 to save configuration data\nand much, much more...\n\n\nCourses Offered:\n1. Arduino: NodeMCU ESP8266 IoT Wifi Relay Sensor Dashboard App\n2. ESP8266: IoT Electronics, Programing & Eagle PCB Design",
      "target_audience": [
        "students",
        "makers",
        "learners",
        "web developers",
        "embedded developers"
      ]
    },
    {
      "title": "The updated Beginner's Guide for KNX (second version)",
      "url": "https://www.udemy.com/course/knx-the-ultimate-beginners-course-for-building-automation/",
      "bio": "Learn the basics of building automation and how save energy with KNX",
      "objectives": [
        "know what is building automation and what is KNX",
        "choose KNX components",
        "install a basic KNX system",
        "operate and configurate a KNX system",
        "propose KNX applications",
        "suggest basic KNX solutions for energy savings"
      ],
      "course_content": {},
      "requirements": [
        "All you need is to interested in discovering the amazing word of KNX"
      ],
      "description": "Learn the basic concepts, tools, installation, operation, and configuration of KNX and how you will become a KNX Partner. Create building automation with KNX.\nBuild a strong foundation in KNX and building automation with this tutorial for beginners.\nRecognize KNX components\nInstall a KNX system\nOperate and configure a KNX system\nLearn how to become a KNX partner\nA Powerful Flexible World Standard for Building Automation\nLearning the fundamentals of KNX puts a powerful and very useful, flexible tool at your fingertips. KNX is easy to learn, has excellent documentation from the product manufacturers, and is the Worldwide STANDARD for Home and Building Control.\nProjects with KNX is like a lego game. KNX gives you the ability to extend and modify any time your installation.\nContent and Overview\n\nThrough this course of 29 lectures and 120 minutes of content, you'll learn all of the KNX fundamentals and establish a strong understanding of building automation with the KNX concept. Each chapter sums it up with quizzes, putting your newly learned skills into theoretical use immediately.\nWe are going to start with a small glimpse of the history of KNX, and then we will go deep into KNX. We will explain what is KNX, KNX components, installation, operation, and configuration.\nLater on, we will examine KNX application examples, see its benefits and learn how we can save on energy. Finally, we will show you how someone who is interested can become a KNX Partner and the first exercise in ETS5. You will see the procedure of downloading the individual address and application program into devices of the KNX Live Platform.\nBy completing the course, you'll be able to understand how a KNX system works and you will decide whether you wish to become a partner in the amazing world of KNX, by taking the exam for KNX certification.",
      "target_audience": [
        "Engineering students",
        "Engineers",
        "Maintance Engineers",
        "Architects - Decorators",
        "Designers - Specifiers",
        "Software students",
        "KNX partners",
        "Technologists",
        "Technicians"
      ]
    },
    {
      "title": "Siemens S7-1200 Motion Control Using Stepper Motor.",
      "url": "https://www.udemy.com/course/siemens-s7-1200-motion-control-using-stepper-motor/",
      "bio": "Siemens S7-1200 Motion Control Using Stepper Motor.",
      "objectives": [
        "How to use S7-1200 to Control Motion of Stepper Motor"
      ],
      "course_content": {},
      "requirements": [
        "Basic Knowledge of Stepper Motor and PLC"
      ],
      "description": "Hello all,\n\n\nIn this course I  going to Explain How we can Use S7-1200 Motion Control Block For Controlling Stepper Motor.\nI going to use TIA Portal V15 to program s7-1200 plc . TIA portal has  introduced very rich function Motion controlled library.\nYou can use open loop control as well as close loop motion control. It means you can control motor motion with encoder and without encoder.\nS7-1200 PLC has wide range of Library of Motion Control Block. S7-1200 support HSC (High Speed Counter ) and PTO (High speed Pulse Output ).\nS7-1200 Motion Library has  Power , Reset ,Homming , Absolute Motion , Relative Motion , Jog Operation ,Command Table operation.\nWith use of this available block we can implement Motion Related Application.\nI am using Stepper Drive and Stepper Motor from RHINO Motion Control Company. Stepper Motor Capacity is 10 KGcm. You need wires ,2.2k register to step down voltage from 24 v to 5v. To explain this course i have connect three sensor on the motor for positive limit , negative limit and home position. You can develop this model at your home.\nI have tried to cover all basic and advance fundamental of Motion Control. I have attached some documents and program to help out through this course.\n\n\nThanks",
      "target_audience": [
        "Engineer , Technician , Electrician , and Engineering Student"
      ]
    },
    {
      "title": "Master Windows IoT Core: Embedded Systems with Raspberry Pi",
      "url": "https://www.udemy.com/course/windows-iot-core-raspberry-pi-windows10iot/",
      "bio": "From Zero to Embedded Systems Hero: Harness Windows 10 IoT Core on Raspberry Pi",
      "objectives": [
        "Program Raspberry Pi using Microsoft Visual Studio",
        "Add a new skill to your skillset by learning Windows IoT and integrate it into the famous Raspberry Pi Board",
        "Deploy your C# or C++ Code on Raspberry Pi Board using Windows IoT Core",
        "Initial Setup (Visual Studio and Coding Environment)",
        "Prepare Raspberry Pi",
        "Raspberry Pi Pinout",
        "Write Your First Code to Control Raspberry Pi via Windows IoT Core!",
        "Practical Examples",
        "Resources and Code",
        "Exercises",
        "Troubleshooting",
        "Get Windows IoT Core online resources"
      ],
      "course_content": {
        "Introduction": [
          "Section Intro",
          "Introduction",
          "Leveraging Windows IoT Core on Raspberry Pi",
          "Important Note",
          "Quick Overview",
          "Windows 10 on the Raspberry Pi: What you need to know",
          "Download and Install Microsoft Visual Studio",
          "Quiz on Course Introduction and Setup",
          "Download and Install Windows 10 IoT Core on SD Card",
          "Raspberry Pi Hardware and Software Setup",
          "Raspberry Pi Model B Unboxing",
          "Raspberry Pi Programming",
          "Windows Device Portal Walkthrough",
          "Quiz on Windows 10 IoT Core and Raspberry Pi Setup",
          "Course Introduction and Setup",
          "Summary",
          "Reading Material"
        ],
        "Raspberry Pi Overview": [
          "Section Intro",
          "Raspberry Pi Overview",
          "Summary",
          "Reading Material"
        ],
        "Prepare Environment": [
          "Section Intro",
          "Prepare Environment for Your First Code",
          "Connecting LED to Raspberry Pi GPIO",
          "Write Your First Code and Draw the User Interface",
          "Quiz on Preparing the Coding Environment and Initial Programming",
          "Setting Up Your Coding Environment",
          "Summary",
          "Reading Material"
        ],
        "Practical: Control Output Device with Input Signal": [
          "Section Intro",
          "Coding Process",
          "Practical Implementation and Code Testing",
          "Interface Code XAML",
          "Main Code CS",
          "Implementing and Testing Control Code",
          "Summary",
          "Reading Material"
        ],
        "Resources": [
          "GpioPinDriveMode Enum"
        ],
        "Troubleshooting": [
          "Cannot deploy UWP app to raspberry pi",
          "Target Version Error"
        ],
        "Windows IoT Core samples": [
          "Windows IoT Core samples",
          "Code Examples"
        ],
        "Practice Test": [
          "Windows 10 IoT Core on Raspberry Pi"
        ],
        "Who we are?": [
          "Who we are?"
        ],
        "Course Project": [
          "Course Project",
          "Deploying Windows IoT Core Applications on Raspberry Pi"
        ]
      },
      "requirements": [
        "A Raspberry Pi, any version (Optional)",
        "A Windows, Mac or Linux computer",
        "A LED",
        "Resistors",
        "A breadboard and jumper wires",
        "Access to the Internet",
        "Ability to wire electronics",
        "Ability to do independent research using online resources",
        "Ability to Practice Not Just Watch"
      ],
      "description": "Unlock the full potential of Windows IoT Core and take your Raspberry Pi projects to the next level! This course will guide you through a comprehensive journey into embedded systems programming using Windows 10 IoT Core. With over 2 hours of HD content, continuous updates, and hands-on examples, you’ll become proficient in developing applications for Raspberry Pi with Microsoft's versatile IoT platform.\nWhy Choose This Course?\nComplete & Current: Dive deep into the subject matter, and stay updated with continuous content additions.\nLearn by Doing: Engage in practical sessions, understand how to deploy your code, and realize real-world projects.\nAffordable Learning: Skip the expensive workshops and learn at your own pace with lifetime access.\nExpert Instructors: Learn from the seasoned 'Educational Engineering Team,' backed by a solid track record in IT & Software education.\nCourse Highlights:\nGrasp the essence of Windows 10 IoT Core and its integration with Raspberry Pi.\nWork hands-on with the Raspberry Pi board and its various features.\nDive into topics such as GPIO, Serial communication, Analog inputs, Networking, and more.\nUnlock the power of Visual Studio for development and debugging.\nLearn the nuances of C# programming, Windows app development, and PowerShell.\nWho Is This Course For?\nWhether you're new to Windows development or a seasoned developer looking to expand your skill set with embedded systems, this course is tailor-made for you.\nTestimonials:\n\"An enlightening journey into the world of Windows IoT Core. The blend of theory and hands-on sessions is just perfect. Highly recommended!\" - [Student Name]\n\"I had struggled with embedded systems before, but this course clarified so many concepts. The instructor's approach is commendable!\" - [Student Name]\nFAQs:\nCan I get a refund? Absolutely! If you're not satisfied, we offer a full money-back guarantee within 30 days of purchase.\nWill I get support? Yes, our dedicated team is here to answer any questions and assist you on your journey.\nWhat do I need to start? A Windows 10 computer, a Raspberry Pi, and a local area network. We guide you through everything else!\nAbout the Instructor:\nThe Educational Engineering Team is dedicated to crafting comprehensive IT & Software courses, empowering learners worldwide. With a rich history of satisfied students, their courses promise quality, clarity, and real-world applicability.\nEnroll Now & Unleash the Power of Windows IoT Core!\nWhat you will learn\nGrasp the essence of Windows 10 IoT Core and its integration with Raspberry Pi.\nWork hands-on with the Raspberry Pi board and its various features.\nDive into topics such as GPIO, Serial communication, Analog inputs, Networking, and more.\nUnlock the power of Visual Studio for development and debugging.\nLearn the nuances of C# programming, Windows app development, and PowerShell.\nWho is this course for\nBeginners interested in embedded systems.\nDevelopers looking to expand their skill set.\nEngineers and hobbyists interested in Raspberry Pi projects.\nAnyone interested in Windows IoT Core.\nRequirements\nBasic understanding of electronics and programming.\nA Windows 10 computer.\nA Raspberry Pi.\nNo prior experience with Windows IoT Core required.\n\n\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in the Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge, we go into the depth of the topic and give you the exact step-by-step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years, we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy.\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million View, 20k+ Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelance engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their careers.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative teaching style that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, particularly for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to improve and make great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone Interested In learning how to Setup Raspberry PI with Windows IoT Core",
        "Anyone Interested In learning how to Control Hardware using Windows IoT",
        "Anyone Interested In learning how to Code Raspberry Pi Input/output pins to be controlled by Windows 10 IoT Core Platform",
        "Anyone Interested In learning how to connect Leds, Buttons, Sensors and control them with Universal Windows Applications",
        "Anyone Interested In learning how to Program Raspberry Pi using Microsoft Visual Studio",
        "Anyone Interested In learning how to Deploy your C# or C++ Code on Raspberry Pi Board using Windows IoT Core"
      ]
    },
    {
      "title": "Master Allen Bradley PLC RSLogix/Studio 5000 Essential Guide",
      "url": "https://www.udemy.com/course/master-allen-bradley-plc-rslogixstudio-5000-essential-guide/",
      "bio": "Complete Guide to RSLogix/Studio 5000 for Industrial Automation, Programming, Logic Design, and Troubleshooting Tips.",
      "objectives": [
        "Purpose and applications of RSLogix and Studio 5000 in industrial automation.",
        "Differences and improvements in Studio 5000 compared to RSLogix 5000.",
        "Basics of Programmable Logic Controllers (PLCs) and the ControlLogix platform.",
        "How to install, license, and navigate Studio 5000 software efficiently.",
        "Techniques for creating and managing projects, including configuring controller properties and organizing logic programs.",
        "Effective data management using tags, arrays, and user-defined data structures.",
        "Ladder logic programming fundamentals, including timers, counters, and arithmetic operations.",
        "Alternative programming methods like Structured Text, Function Block Diagrams, Add-On Instructions, and Sequential Function Charts.",
        "Debugging tools, error interpretation, and troubleshooting techniques for automation systems.",
        "Best practices for writing clear, maintainable, and scalable code.",
        "and much more"
      ],
      "course_content": {
        "Introduction to RSLogix/Studio 5000": [
          "Overview of RSLogix/Studio 5000",
          "Differences Between RSLogix 5000 and Studio 5000",
          "Understanding PLCs and ControlLogix Systems"
        ],
        "Navigating the Software": [
          "Software Installation and Licensing",
          "Understanding Project Organization"
        ],
        "Creating and Managing Projects": [
          "Starting a New Project",
          "Configuring Controller Properties",
          "Working with Program Structures",
          "Importing and Exporting Projects"
        ],
        "Tags and Data Management": [
          "Introduction to Tags and Data Types",
          "Creating and Managing Tags",
          "Understanding Arrays and Structures"
        ],
        "Ladder Logic Fundamentals": [
          "Overview of Ladder Logic Programming",
          "Common Ladder Logic Instructions",
          "Timers and Counters",
          "Understanding Comparison and Math Instructions"
        ],
        "Advanced Programming Concepts": [
          "Introduction to Structured Text (ST)",
          "Exploring Function Block Diagrams (FBD)",
          "Using Add-On Instructions (AOIs)",
          "Basic Concepts of Sequential Function Charts (SFC)"
        ],
        "Troubleshooting and Best Practices": [
          "Program Debugging Overview",
          "Cross-Referencing and Searching",
          "Understanding Error Codes and Warnings",
          "Best Practices for Program Organization"
        ]
      },
      "requirements": [
        "Willingness or Interest to learn about RSLogix/Studio 5000 for Ultimate Success."
      ],
      "description": "|| UNOFFICIAL COURSE ||\nIMPORTANT before enrolling:\nThis course is not intended to replace studying any official vendor material for certification exams, is not endorsed by the certification vendor, and you will not be getting the official certification study material or a voucher as a part of this course.\nThis course, Mastering RSLogix/Studio 5000: A Comprehensive Guide to Industrial Automation Programming and Best Practices, is designed to equip you with the knowledge and skills needed to effectively use RSLogix and Studio 5000 software for industrial automation. Covering everything from foundational concepts to advanced programming techniques, this course is ideal for engineers, technicians, and professionals looking to deepen their understanding of programmable logic controllers (PLCs) and the ControlLogix platform.\nYou’ll begin by exploring the purpose and applications of RSLogix and Studio 5000, understanding their role in industrial automation. The course highlights the evolution from RSLogix 5000 to Studio 5000, focusing on enhancements and key differences that improve efficiency and functionality. An introduction to PLCs and the ControlLogix system will lay the groundwork, explaining their importance in modern industrial systems.\nThe course provides step-by-step guidance on software installation, licensing, and initial setup. You’ll learn to navigate the Studio 5000 interface and organize projects effectively, including understanding tasks, programs, and routines. Detailed instructions for starting new projects, configuring controller properties, and structuring logic programs ensure you can build and manage automation systems with confidence.\nData management is a critical component, and this course delves into tags, data types, arrays, and user-defined structures to optimize efficiency and clarity. You’ll gain practical experience creating, editing, and organizing tags for seamless project execution.\nA strong emphasis is placed on ladder logic programming, the foundation of many industrial applications. You’ll master common instructions, timers, counters, and comparison operations, building the skills to design effective automation solutions. The course also introduces alternative programming languages and methodologies, including Structured Text, Function Block Diagrams, Add-On Instructions, and Sequential Function Charts, expanding your toolkit for tackling complex automation challenges.\nTo ensure reliability and efficiency in your work, you’ll learn to debug programs, cross-reference logic elements, and interpret error codes and warnings. Best practices for organizing and maintaining projects will help you create clear, scalable, and maintainable code.\nBy the end of this course, you will have a comprehensive understanding of RSLogix and Studio 5000, enabling you to design, program, and troubleshoot industrial automation systems with confidence and precision.\nWhether you’re new to the field or looking to advance your skills, this course provides the tools and knowledge to succeed.\nThank you",
      "target_audience": [
        "Automation Engineers and Technicians: Looking to enhance their programming skills in RSLogix and Studio 5000 for industrial automation systems.",
        "PLC Programmers: Seeking to deepen their knowledge of ControlLogix platforms and improve their efficiency with advanced features.",
        "Industrial Maintenance Professionals: Who want to troubleshoot and maintain PLC-based automation systems effectively.",
        "Engineering Students: Aspiring to build a strong foundation in industrial automation programming and control systems.",
        "Manufacturing Professionals: Interested in understanding and working with automation systems in production environments.",
        "Anyone New to PLC Programming: Beginners eager to learn industrial automation concepts and practical skills with no prior experience required.",
        "If you're ready to improve your skills, boost your confidence, or pursue a career in industrial automation, this course is for you!"
      ]
    },
    {
      "title": "Arduino IoT Cloud - Getting Started",
      "url": "https://www.udemy.com/course/arduino-iot/",
      "bio": "Create secure and scalable IoT applications using Arduino and ESP32 boards.",
      "objectives": [
        "Understand the concept of the IoT on the Cloud.",
        "Learn how to use the Arduino IoT Cloud development platform and infrastructure.",
        "Learn about the Arduino IoT Cloud concepts of Things, Devices and Dashboards.",
        "Practice using the Arduino MKR1010, Arduino Nano 33 IoT, and ESP32 boards.",
        "Show sensor data and control motors and displays using desktop and mobile dashboards.",
        "Extend your IoT application with Cloud services such as IFTTT."
      ],
      "course_content": {
        "Introduction": [
          "What is this course about?",
          "Software you will need",
          "Hardware you will need",
          "How to get the most out of this course",
          "Scripts and wiring schematics"
        ],
        "Getting started with Arduino IOT Cloud": [
          "What is this section about?",
          "Arduino IOT Cloud vs Arduino IDE",
          "Documentation",
          "Update December 2022: Arduino Cloud UI changes",
          "Demo of a simple Arduino Cloud project",
          "Create your free account and install the Cloud Agent",
          "Hello world with the Arduino IoT Cloud"
        ],
        "Arduino IOT Cloud for the MKR1010": [
          "The experiment",
          "Set up the MKR1010 device",
          "Setup a Thing and Dashboard",
          "Wiring",
          "Step 1: Button",
          "Step 2: PWM LED and over-the-air uploads",
          "Step 3: Potentiometer",
          "Step 4: Sensor BME280",
          "Step 5: Setup OLED",
          "Step 6: RGB LED with Timer",
          "Step 7: Messenger",
          "Test: Dashboard and smartphone app"
        ],
        "Arduino IOT cloud with the Arduino Nano 33 IoT": [
          "The experiment",
          "Set up the Arduino Nano 33 IoT device",
          "Wiring",
          "Setup Thing and variables",
          "Setup Dashboard",
          "Sketch in IoT Cloud",
          "Sync a variable between devices",
          "Dashboard testing"
        ],
        "Arduino IOT cloud for the ESP32": [
          "The experiment",
          "Setup the ESP32 Dev kit device",
          "Set up Thing and variables",
          "Setup a Dashboard",
          "Wiring",
          "Sketch in IoT Cloud",
          "Dashboard Testing"
        ],
        "Arduino IOT Cloud recipes": [
          "What is this section about?",
          "Specialized type example: Environmental data",
          "Servo and relay",
          "LED alphanumeric display",
          "Syncing variables: Thing to Thing",
          "Syncing variables: Device to Device",
          "Webhooks with IFTTT",
          "Download historic data"
        ],
        "Bonus lecture": [
          "Bonus lecture"
        ]
      },
      "requirements": [
        "You should have working knowledge of the Arduino.",
        "You should have working knowledge of the ESP32."
      ],
      "description": "Learn Arduino IoT Cloud to create IoT applications based on the Arduino MKR1010, the Arduino Nano 33 IoT, and the ESP32.\nThe Internet of Things is a term that describes systems that integrate sensors, processing, software and communications.\nA typical Internet of Things application uses the Internet as the backbone for communications between microcontrollers, Cloud services, and smartphones.\nThe Arduino IoT Cloud is a development platform and infrastructure that makes it easy to create scalable Internet of Things application.\nAs a development platform, it offers the technology building blocks which we can use to build our application.\nIt also offers the infrastructure that supports the safe operation of our application.\nThe building blocks consist of the hardware that we can use to interface sensors and actuators with the Cloud infrastructure. Examples of this hardware are the Arduino boards that belong to the MKR family. These boards contain communications and encryption capabilities to ensure the safety of the application data.\nThe development platform also offers a programming editor that allows us to compose the program that runs on the Arduino boards, and a dashboard editor for creating dashboards that can display application data and provide interactivity with the IoT application.\nOf course, the dashboard editor allows us to design dashboards that work in web browsers and on smartphones. This means that we can access our IoT application from any connected device.\nThe Arduino IoT Cloud infrastructure is what supports you application during its operation. It is responsible for interacting with the devices (meaning, the Arduino or other compatible boards), the smartphone or web-based dashboards, and any external cloud services, like IFTTT or Zapier.\nYou, as the creator of the IoT application, can create secure and scalable IoT application by leveraging your existing knowledge of Arduino programming and simple electronics. You don’t need to know anything about encryption, communications, MQTT, Wifi, or how to program a smartphone or server-side application. The Arduino IoT Cloud platform and infrastructure obscures all that so that you can concentrate on building your application.\nThe objective of this course is to help you leverage your existing knowledge of Arduino programming and simple electronics so that you can build your first IoT application on the Arduino IoT Cloud.",
      "target_audience": [
        "This course is for anyone wanting to create secure and scalable IoT applications.",
        "You can be a hobbyist working on a home automation project, or a student working on an assignment or a teacher setting up an IoT lab in the school maker space.",
        "You could be the founder of a startup creating a prototype for an awesome business idea, or a business owner interested in using IoT to automate and optimise your business operations.",
        "You could be an engineer, researching a technology solution for your employer."
      ]
    },
    {
      "title": "Learn VHDL Design using Xilinx Zynq-7000 ARM/FPGA SoC",
      "url": "https://www.udemy.com/course/vhdl-design-and-modeling-of-digital-systems/",
      "bio": "For both the beginner and experienced Engineer using Vivado on the Zybo Z7 Xilinx Zynq FPGA Development Board",
      "objectives": [
        "Describe and explain VHDL syntax and semantics",
        "Create synthesizable designs using VHDL",
        "Use Xilinx FPGA development board for hand-on experience",
        "Design simple and practical test benches in VHDL",
        "Use the Xilinx Vivado toolset",
        "Design and develop VHDL models"
      ],
      "course_content": {
        "Basics": [
          "Intro",
          "Design Units",
          "Comments",
          "Identifiers",
          "Literals",
          "Xilinx Software Tool Installation",
          "Quiz 1"
        ],
        "Data types & operations": [
          "Data Object Classes",
          "Scalar Data Types",
          "Operators",
          "Composite Data Types",
          "Xilinx Zybo Z7 Xor Demo",
          "Quiz 2"
        ],
        "Concurrent statements": [
          "Design Units",
          "Concurrent Statements",
          "Demo 2",
          "Quiz 3"
        ],
        "Sequential statements": [
          "Sequential Statements",
          "Wait Statements",
          "Conditional Statements",
          "Loop Statements",
          "Assert & Report Statements",
          "Quiz 4"
        ],
        "Processes": [
          "Test Benches",
          "Processes",
          "State Machines",
          "Quiz 5",
          "BasicFSM Demo"
        ],
        "Subprograms": [
          "Functions",
          "Procedures",
          "Quiz 6"
        ],
        "Packages": [
          "Packages, Components, and Configuration",
          "Quiz 7",
          "ColorFSM Demo"
        ],
        "Design for synthesis": [
          "Design for Synthesis & Demo"
        ],
        "Advanced topics": [
          "Life Demo",
          "Aliases",
          "Generics",
          "Generate Statements",
          "Quiz 9"
        ],
        "Additional libraries": [
          "NewLife Demo",
          "Additional Libraries"
        ]
      },
      "requirements": [
        "Familiarity with digital logic design, electrical engineering, or equivalent experience"
      ],
      "description": "Teach yourself the analysis and synthesis of digital systems using VHDL to design and simulate FPGA, ASIC, and VLSI digital systems. Participants learn the fundamental concepts of VHDL and practical design techniques using a Xilinx FPGA Development Board and simulation software for hands-on experience. The VHDL methodology and design flow for logic synthesis addresses design issues related to component modeling, data flow description in VHDL and behavioral description of hardware. An emphasis is placed on understanding the hardware description language, VHDL design techniques for logic synthesis, design criteria, and VHDL applications.\nAt the end of this course, participants will be able to accomplish the following:\nDescribe and explain VHDL syntax and semantics\nCreate synthesizable designs using VHDL\nUse Digilent Zybo Z7: Zynq-7000 ARM/FPGA SoC Development Board for hand-on experience\nUse the Xilinx Vivado toolset\nDesign simple and practical test-benches in VHDL\nDesign and develop VHDL models\nPrerequisites:\nFamiliarity with digital logic design, electrical engineering, or equivalent experience.\nEven if you're now already familiar with VHDL but you've:\nNever used an attribute other than ‘event?\nNever used variables?\nAlways used a process where a single concurrent statement would have sufficed?\nNever used assert or report statements except (maybe) in a test-bench?\nNever used an unconstrained vector or array?\nNever used a passive process inside of an entity?\nNever used a real or the math_real library package in synthesizable code?\nAlways used a single process per signal assignment?\nthen this course will definitely have something for you as well.  You will learn finite state machine design, the two-process design methodology, test-bench design, combinatorial and sequential logic, and extensible synthesizable designs that are reusable.",
      "target_audience": [
        "Engineers",
        "Hobbyists",
        "Makers",
        "Engineering Students",
        "Engineering Managers"
      ]
    },
    {
      "title": "Asterisk Administrators Guide to VoIP Polycom IP SIP Phones",
      "url": "https://www.udemy.com/course/asterisk-administrators-guide-to-voip-polycom-vvx-ip-sip-phones/",
      "bio": "Learn how to configure Polycom IP Phones to work with your Asterisk VoIP PBX for intercom, BLF and customizing phones",
      "objectives": [
        "Configure Polycom IP Phones to Work with an Asterisk PBX",
        "Understand the different features and capabilities between the different model Polycom phones",
        "Select the best Polycom phone model for your clients users"
      ],
      "course_content": {
        "Introduction to Polycom Phones and How to Get the Most from this Course": [
          "Course Introduction"
        ],
        "Getting Started with Polycom IP Phones": [
          "Discover the different model Polycom IP phones and see the features of each",
          "See the Different Configuration Methods Available for Polycom IP Phones",
          "See the different ports on the back of a Polycom phone",
          "Navigating the phone menu system and finding the IP address of the phone",
          "Configure network settings to use a VLAN ID in order to separate voice traffic",
          "Polycom phone introduction to configurations and features"
        ],
        "Using the Polycom IP phone web admin interface": [
          "Introduction to phone menu configuration",
          "Reviewing the Polycom web admin interface for the first time and firmware update",
          "Setup your Asterisk server with new SIP peers and a new context for a demo",
          "Configure your first phone using the web admin and Asterisk SIP peers",
          "See how to backup a phone in the event your phone breaks or gets factory reset",
          "Introduction to the Polycom phone web admin"
        ],
        "Customizing Phones Using the XML Style Configuration Files": [
          "Introduction to configuring phones using the XML style config files",
          "Create a new BLF, busy lamp field, button on the Polycom phone",
          "Export XML configuration file from Polycom phone to add BLF button via XML",
          "Understanding DHCP reservations and where to configure them",
          "Load a custom background image on the Polycom phone using the XML file",
          "Configure the network time server settings using the XML file to sync date/time",
          "Configure number of phone calls per button or line appearance",
          "Setup a Polycom phone to receive an intercom call",
          "Create an edit your own XML configuration file"
        ],
        "Conclusion: Course Wrap Up": [
          "Take this knowledge and order a couple of phones to configure"
        ]
      },
      "requirements": [
        "You should be familiar with SIP and have an Asterisk based IP PBX so you are able to configure and register a phone to make and receive phone calls",
        "If you don't have PBX/phone system to work with I have another course you can take to build your own"
      ],
      "description": "In this course you will learn how to create a configuration for seamless interoperability between a Polycom IP phone and an Asterisk based PBX. Since building an Asterisk server is only half of the phone system you need to ensure the physical phone endpoints are configured correctly. The phones are what all the end users interact with daily and gives them the tool to communicate with internal and external users.\nYou will learn how to configure Polycom IP phones\nI will show you the different Polycom IP phone models to choose from\nIn the course resources for each lesson you will get copies of the config files I demonstrate\nIt should only take you a couple hours to get a working configuration file for your PBX\nIf you plan on using Polycom phone you need to take this course and learn how to configure them using the different methods\nMy courses are always structured in an easy to follow format giving you a little bit of knowledge at a time to implement then building on top of that knowledge as the course progresses. I give you real world examples and show you how to do fuctions that are commonly asked for of phone systems.",
      "target_audience": [
        "All level of users who are working with Asterisk or any Asterisk based VoIP IP PBX using SIP Phones",
        "Anyone learning the different model Polycom IP phones and their capabilities",
        "Users looking to configure the Polycom functions using the XML config files"
      ]
    },
    {
      "title": "ESP32 + Databases to Control Anything Anywhere",
      "url": "https://www.udemy.com/course/arduino-esp-database-iot-esp32-control-interfacing/",
      "bio": "Step by Step Course to control stuff from all around the world with ESP32 and Databases",
      "objectives": [
        "Create A Simple ESP32 HTTP Request In Arduino IDE",
        "Get a FREE Hosting server and domain name",
        "Create PHP script to insert data into MySQL",
        "Display data on a web page",
        "MySQL database to store readings",
        "Get Sensors Reading",
        "Program ESP32 Effectively",
        "Create a fully functional Project in no Time"
      ],
      "course_content": {},
      "requirements": [
        "Basic Knowledge of Programming",
        "Be familiar with the Arduino Uno",
        "Be familiar with writing and editing sketches for the Arduino Uno",
        "Be familiar with the breadboard and wiring."
      ],
      "description": "ESP32 + Databases to Control Anything Anywhere: Step by Step Course to help you create your first internet-connected electronics projects using ESP32 wifi breakout board. <<<\nWelcome to this course.\nThe course lesson will explain “How to control stuff from all around the world” by using Arduino IDE Programming Environment. This course will work best for you if you have basic knowledge of Electronics and Arduino. You could connect sensors to an Arduino and send the values to a database on the internet. Then you could enter a website that you will create in this course to see the values from anywhere in the world with an internet connection. You are no longer stuck controlling your devices locally.\nYou could also add boolean buttons to your website and control stuff connected to the Arduino such as Motors, LEDs, Relays, and more.\nWhy You Should Take This Course\nLearn how to get started with the ESP32, an inexpensive microcontroller\nLearn how to make and host your own databases and manage them\nUnderstand how to get data from a MySQL Database and put it on the ESP32\nBe able to set up a web server that will send you emails when your database is updated\nLearn to connect to your WiFi network and update databases remotely\nStart building IoT projects that control other devices by themselves\nYou’ll Learn How To:\nCreate a Simple ESP32 HTTP Request in Arduino IDE\nGet a free hosting server and domain name\nCreate a PHP script to insert data into MySQL\nDisplay data on a web page\nCreate a MySQL database to store readings\nGet sensor readings\nAt the end of this course, you can create innovative projects. The only thing that you need to do is THINKING, WIRING & CODING.\nUser Testimonials and Social Proof\n\"This course gave me the practical skills to build and control my IoT projects remotely. The step-by-step instructions were clear and easy to follow.\" - Emily R.\n\"A comprehensive guide to integrating ESP32 with databases. Perfect for anyone interested in IoT.\" - David S.\nAn Author Bio Showing Off Credentials\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in the Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge - we go into the depth of the topic and give you the exact - step by step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years - we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million View, 20k + Subscriber) and author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their career.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative teaching style that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, and in particular for the world of Arduino, PIC Microcontroller, Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers Courses on\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World\nA Single Powerful CTA\nEnroll now and start your journey to mastering ESP32 and databases today!\nFAQ Section\nQ: Do I need any prior knowledge to take this course?\nA: No prior knowledge or skills are required. This course is designed for complete beginners.\nQ: How long will it take to see results?\nA: Results can vary, but many students start seeing results within the first few weeks of applying the strategies taught in the course.\nQ: Is there a money-back guarantee?\nA: Yes, Udemy offers a 30-day money-back guarantee if you are not satisfied with the course.\nWhat You Will Learn\nCreating a Simple ESP32 HTTP Request in Arduino IDE\nSetting up a free hosting server and domain name\nCreating PHP scripts to interact with MySQL\nDisplaying data on a web page\nStoring sensor readings in a MySQL database\nWho Is This Course For\nTech enthusiasts interested in IoT and ESP32\nDevelopers and engineers seeking to integrate IoT solutions into their projects\nEducators and students looking to broaden their practical knowledge in web programming and electronics\nRequirements\nA computer with internet access\nBasic understanding of the internet and web browsing\nWillingness to learn and implement the strategies taught",
      "target_audience": [
        "Anyone interested in connecting his project to the internet with a low budget solution",
        "Anyone interested in Create A Simple ESP32 HTTP Request In Arduino IDE",
        "Anyone interested in getting a Free Hosting server and domain name",
        "Anyone interested in creating a PHP script to insert data into MySQL",
        "Anyone interested in displaying data on a web page",
        "Anyone interested in using MySQL database to store readings",
        "Anyone interested in Getting Sensors Reading",
        "Arduino Geeks",
        "Engineering Students - Electronics, Electrical & Computer Science",
        "High School Science Students",
        "Electronic Geeks, Hobbiest & Art Students",
        "Embedded Systems Geeks"
      ]
    },
    {
      "title": "Computer Organization: CPU Cache and the Memory Hierarchy",
      "url": "https://www.udemy.com/course/cpu-cache-and-the-memory-hierarchy/",
      "bio": "Master CPU cache organization & ace computer organization, computer architecture exams!",
      "objectives": [
        "Why do our computers have so many different types of memories?",
        "What is a cache?",
        "Why is a cache needed?",
        "What data should be kept in a cache?",
        "What are temporal and spatial locality?",
        "How do caches exploit temporal locality?",
        "How do caches exploit spatial locality?",
        "What is the classic LRU cache replacement policy?",
        "What are cache blocks? Why use them?",
        "What is associativity in caches?",
        "What is a fully associative cache?",
        "What is a direct mapped cache?",
        "What is a set associative cache?",
        "How to determine whether a particular memory address will hit or miss in the cache?",
        "How the address breakdown works for accessing data stored in fully associative, direct mapped, and set-associative caches?",
        "How to modify data in caches?",
        "What is a write-through cache?",
        "What is a write-back cache?",
        "How dirty bits are used in a write-back cache?",
        "What other cache eviction algorithms, besides LRU, can be used?",
        "How are caches organized in a hierarchy in modern computers?"
      ],
      "course_content": {},
      "requirements": [
        "No previous knowledge about caches or memory hierarchy needed. Everything you need to know about the topics will be covered."
      ],
      "description": "Ace cache organization questions in competitive exams, job interviews, and computer organization and architecture course exams. Genuinely understand the implementation and working of caches in modern computers.\n\n\nIn this course, we will begin with an introduction to the memory hierarchy in modern computers. We will see why the computers employ several different types of memories, such as CPU registers, caches, main memory, hard disk, etc. After the introduction, the rest of the course focuses on caches. We will see that cache is a small but extremely fast piece of memory that sits between the fast CPU and slower RAM (main memory). The course is divided into the following nine sections: Introduction, Temporal locality, Performance implications of caches, Spatial locality, Writes in caches, Content addressable memory, Direct mapped caches, Set associative caches, Cache eviction, and hierarchical caches. The sections have several bite-sized lectures, practice problems, detailed animation examples illustrating concepts, and quizzes. Detailed solutions to the practice problems are included in the video and on the last page of the worksheets. Keys and explanations for the quiz questions are also provided. Specifically, the course will answer the following questions in detail.\n\n\n1. Why do our computers have so many different types of memories?\n2. What is a cache?\n3. Why is a cache needed?\n4. What data should be kept in a cache?\n5. What are temporal and spatial locality?\n6. How do caches exploit temporal locality?\n7. How do caches exploit spatial locality?\n8. What is the classic LRU cache replacement policy?\n9. What are cache blocks? Why use them?\n10. What is associativity in caches?\n11. What is a fully associative cache?\n12. What is a direct mapped cache?\n13. What is a set associative cache?\n14. How to determine whether a particular memory address will hit or miss in the cache?\n15. How the address breakdown works for accessing data stored in fully associative, direct mapped, and set-associative caches?\n16. How to modify data in caches?\n17. What is a write-through cache?\n18. What is a write-back cache?\n19. How dirty are bits used in a write-back cache?\n20. Can other cache eviction algorithms besides LRU be used?\n21. How are caches organized in a hierarchy in modern computers?\n\n\n30 day money back guaranteed by Udemy.\n\n\nWisdom scholarships. If you are interested in taking one of our courses but cannot purchase it, you can apply for a scholarship to enroll. Learn more about the application process at my website.",
      "target_audience": [
        "Anyone interested in learning about caches in modern computers could benefit from this course.",
        "Computer science undergraduate students taking a computer organization or computer architecture course could benefit from the course.",
        "You may (optionally) wish to print some of the material"
      ]
    },
    {
      "title": "Arduino meets Python: Step by Step",
      "url": "https://www.udemy.com/course/arduino-python-control-py-code-arduino-using-python-pip/",
      "bio": "Control your Arduino using Python easily and effectively and unleash the power of Python coding and Arduino Hardware",
      "objectives": [
        "Design Arduino Circuits",
        "Program Arduino using Python Language",
        "Connect Python with Arduino",
        "Learn serial communication basics in Python",
        "Learn serial communication basics in Arduino",
        "Fully Control Arduino using Python",
        "Set up electronic circuits",
        "Set up the Communication protocol on Arduino",
        "Write basic applications for Arduino in Python to control basics functions",
        "Advanced Control of analog and digital inputs and outputs",
        "How to Integrate Arduino sensors and switches"
      ],
      "course_content": {},
      "requirements": [
        "Basic Knowledge of Digital Electronics"
      ],
      "description": ">>> Arduino meets Python: Step by step guide is a course specially created for Electronic Geeks & Engineers who want to take Arduino Programming to the next level. <<<\nWelcome to this course.\nThe course lesson will explain “How to work on Arduino and Python” by using Python Language and PythonEnvironment. This course will work best for you if you have basic knowledge of Electronics and Arduino. You will learn how to interface the Arduino with your Computer and Control it using Python.\nArduino can be used in your Engineering projects, Industrial Projects, or Home Automation related projects.\n\n\nWhy should you take this course?\nThe course teaches you how to install Python and Arduino software\nThe course provides easy-to-follow instructions for setting up an Arduino Board with the right shields, sensors, actuators, and more\nThis course takes you to step by step through learning how to use Python scripting on your Arduino board.\nYou'll learn all about Python coding while taking advantage of the huge community support for Arduino boards.\n\n\nYou’ll learn how to:\nSet up electronic circuits\nSet up the Communication protocol on Arduino\nWrite basic applications for Arduino in Python to control basics functions\nAdvanced Control of analog and digital inputs and outputs\nHow to Integrate Arduino sensors and switches\n\n\n\n\nWhy Learn Arduino?\nIf you an Engineering or Science student you might come across projects in which you want Physical interaction with your computer system & to display the operations on PC Screen\nArduino is one of the cost-effective tools which you can create or purchase & starts programming to interact with physical elements with your logic & create results the way you want.\nAnd using Python, you can fully control the Arduino Board and the various process parameters like Motor Speed, LED ON/OFF Feedback, Temperature Signal, you can also create unlimited Buttons, Switches & Message Box to control the Arduino\nAt the end of this course, you can create Innovative Projects. The only thing that you need to do is THINKING, WIRING & CODING.",
      "target_audience": [
        "Engineering Students - Electronics, Electrical & Computer Science",
        "High School Science Students",
        "Electronic Geeks, Hobbiest & Art Students",
        "Arduino Geeks"
      ]
    },
    {
      "title": "Digital Timing Basics for VLSI Interview & SoC Design",
      "url": "https://www.udemy.com/course/digital-timing-basics-for-vlsi-interview-physical-design/",
      "bio": "A VLSI Course on Timing Concepts frequently used in Physical Design (Static Timing Analysis - STA), RTL & Circuit Design",
      "objectives": [
        "Basics of Flop & Latch Timings",
        "Set-up, Hold, Clock to Q, Clock Skew",
        "Set-up & Hold violation checks",
        "Set-up & Hold violation fixes",
        "Latency Minimization",
        "Set-up & Hold Margin in Digital Ckts",
        "Min & Max Path Analysis",
        "Clock Gating",
        "F-V Curve in SoC"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Understanding Flop Timings": [
          "Basic Definitions",
          "Quick Summary",
          "Set-up Time & Set-up Margin",
          "Hold time & Hold Margin",
          "Clock to Q Delay"
        ],
        "Static Timing Foundation": [
          "Buffer",
          "Logic Implementation",
          "Physical Implementation",
          "Set-up Time Condition in Cycle Path",
          "Hold Time Condition in Cycle Path",
          "Example for Set-up & Hold Condition"
        ],
        "Problem Solving for Interview": [
          "Set-up & Hold Margin Computation",
          "Set-up Violation",
          "Set-up Violation Fix : Clock Path Delay",
          "Hold Violation",
          "Hold Violation Fix: Data Path Delay",
          "Good Margin but Higher Latency",
          "Latency Reduction with Optimized Design",
          "Design Issues in Real World SoC"
        ],
        "Advanced Concepts for Interview- Timing Margins": [
          "Positive Latch - Setup & Hold Time",
          "Negative Latch - Set-up & Hold Time",
          "Clock Gating - Set-up & Hold Time",
          "Negative Hold Time for Flop",
          "Negative Set-up Time for Flop"
        ],
        "Common Misconceptions": [
          "Set-up, Hold, Clk2Q and Clock Skew",
          "Hold Margin with Frequency",
          "Set-up Margin with Frequency"
        ],
        "Frequency vs Voltage in SoC": [
          "F-V Curve : Introduction",
          "F-V Curve: Explanation"
        ],
        "Practical Design Issue-1: Multiple Parallel Paths": [
          "Multiple Path - Problem Statement",
          "Multiple Path - Set-up Time Analysis",
          "Multiple Path - Hold Time Analysis",
          "Multiple Path - Summary"
        ],
        "Practical Design Issue -2 : Max & Min Frequency of Operation": [
          "Frequency of Operation",
          "Minimum Frequency of Operation",
          "Maximum Frequency of Operation without Clock Skew",
          "Maximum Frequency of Operation with Clock Skew"
        ],
        "Quiz & Next Step": [
          "Quiz",
          "Next Step"
        ]
      },
      "requirements": [
        "Knowledge of Flop functionality will suffice"
      ],
      "description": "A VLSI Course on Basic Timing Checks for Digital Logics - A MUST Course for VLSI students and professionals intended to work in Physical Design / Front-end (RTL) Design / Verification / Circuit Design.\nUnderstanding of Flop, Latch and Logic Gates timings (Set-up time, hold-time, Clock to Q delay) is very crucial for every VLSI designer. Whether you are working as Physical Designer (back-end) or RTL designer (front-end) or Verification engineer or Circuit Designer, Digital logics and associated timings form the basis of design performance in SoC design.\nClock skew is another important factor in Static Timing Analysis. This course will cover most critical timing aspects of Flops and how set-up and hold margins are computed in Digital design. In addition, this course will provide insights to latency minimization, another crucial aspect of Physical Design.\nThis is a MUST Course for every VLSI aspirants who aspire for a successful career in semiconductor industry. If you are preparing for VLSI interview or GATE exam, then this is right course for you.\nAll the concepts taught in this lecture series are followed by relevant examples which will help students to get a full understanding of each concept. This is perfect course for VLSI interview preparation.\nThis Crash Course is prepared by VLSI industry expert with inputs from Industry professionals working in companies such as Texas Instruments, AMD, Intel, Qualcomm, Rambus, Samsung etc.\nConcepts covered in this course are - Flop and Latch operation, Set-up time, Hold time, Clock to Q delay, Buffer, Clock Skew, Set-up Margin, Hold Margin, Cycle path analysis, Digital vs Physical implementation, Example of violations and fixing those violations, Latency minimization, Clock-Gating and Frequency-Voltage Curve in SoC.\nAll the best for your VLSI journey!",
      "target_audience": [
        "VLSI students",
        "VLSI professionals",
        "Electronics Engineer",
        "Electrical Engineer",
        "Physical Design Engineer",
        "RTL Designer",
        "Circuit Designer",
        "Verification Engineer",
        "SoC Designer"
      ]
    },
    {
      "title": "Embedded System Design with Xilinx Zynq SoC and Vitis IDE",
      "url": "https://www.udemy.com/course/embedded-system-design-with-xilinx-zynq-soc-and-vitis-ide/",
      "bio": "Using Xilinx Vivado Design Suite and Vitis 2020.2",
      "objectives": [
        "Embedded System Design flow for Zynq AP SoC using Xilinx VITIS",
        "Fundamentals strategies to use Xilinx Drivers",
        "Development of C applications for Zynq Devices",
        "Software Profiling with Vitis",
        "Software and Hardware Debugging Strategies",
        "Working with Interrupts"
      ],
      "course_content": {
        "Installation": [
          "Agenda",
          "Downloading Setup Files",
          "Choosing Installation Settings",
          "LIC File",
          "Adding License",
          "Digilent Board files: Download this before proceeding to the next Video",
          "Adding Board files to Vivado"
        ],
        "Toolchain Configuration": [
          "Agenda",
          "Introduction P1",
          "Introduction P2",
          "Introduction P3",
          "Fundamentals P1 : Project Types",
          "Fundamentals P2 : Flow Navigator",
          "Fundamentals P3 : When you need to add Hardware Constraints P1",
          "Fundamentals P3 : When you need to add Hardware Constraints P2",
          "Using TCL Script for Block Automation",
          "Important Files in Project Directory",
          "Reporting Mechanism P1",
          "Reporting Mechanism P2"
        ],
        "Simple Peripherals : Working with GPIO": [
          "Agenda",
          "Ways to access Peripherals from Zynq P1",
          "Ways of accessing Peripherals from Zynq",
          "Fundamentals of XIL Drivers P1",
          "Fundamentals of XIL Drivers P2",
          "Fundamentals of XIL Drivers P3",
          "Demonstration of XIL Driver Initialization",
          "Working with MIO LED P1",
          "Working with MIO LED P2",
          "Code",
          "Working with GPIO MIO LED and Pushbutton P1",
          "Working with GPIO MIO LED and Pushbutton P2",
          "Code",
          "Working with EMIO LED P1",
          "Working with EMIO LED P2",
          "Code",
          "Single Channel AXI GPIO P1",
          "Single Channel AXI GPIO P2",
          "Code",
          "Dual Channel AXI GPIO P1",
          "Dual Channel AXI GPIO P2",
          "Code",
          "Failed to update xparameters.h P1",
          "Failed to update xparameters.h P2",
          "Code",
          "Multiple Instance of AXI GPIO P1",
          "Multiple Instance of AXI GPIO P2",
          "Code"
        ],
        "Working with UART": [
          "Agenda",
          "Overview",
          "Working with MIO UART P1",
          "Working with MIO UART P2 : Changing Baud Rate Dynamically",
          "Code",
          "Working with MIO UART P3 : Sending Data",
          "Working with MIO UART P4 : Sending Data",
          "Code",
          "Working with MIO UART P5 : Receiving Data",
          "Code",
          "Working with UARTLITE P1",
          "Working with UARTLITE P2",
          "Code"
        ],
        "Working with Timers / Counters": [
          "Agenda",
          "Overview",
          "Working with Private Watchdog (WDT) Timer P1",
          "Working with Private Watchdog (WDT) Timer P2",
          "Working with Private Watchdog (WDT) Timer P3",
          "Code",
          "Working with Private 32-bit SCU Timer P1",
          "Working with Private 32-bit SCU Timer P2",
          "Code",
          "Understanding AUTO-RELOAD Mode P1",
          "Understanding AUTO-RELOAD Mode P2",
          "Code",
          "Using RESTART_TIMER for AUTO RELOAD Mode",
          "Code",
          "Using Prescaler",
          "Code",
          "Working with TTC P1",
          "Working with TTC P2",
          "Code",
          "Blinking effect on MIO LED with TTC P1",
          "Blinking effect on MIO LED with TTC P2",
          "Code",
          "Working with AXI Timer P1",
          "Working with AXI Timer P2",
          "Working with AXI Timer autoreload Mode P1",
          "Working with AXI Timer autoreload Mode P2",
          "Code",
          "Code",
          "Using Both Timers",
          "Code",
          "Using AXI Timebase WDT P1",
          "Using AXI Timebase WDT P2",
          "Code"
        ],
        "Debugging Techniques": [
          "Agenda",
          "Working with Serial Terminal P1",
          "Working with Serial Terminal P2",
          "Breakpoint P1",
          "Breakpoint P2",
          "Breakpoint P3",
          "Working with Memory Viewer P1",
          "Working with Memory Viewer P2",
          "Working with Memory Viewer P3",
          "Working with XSCT P1",
          "Working with XSCT P2",
          "Working with Integrated Logic Analyzer P1",
          "Working with Integrated Logic Analyzer P2"
        ],
        "Profiling": [
          "Agenda",
          "Profiling with AXI Timer P1",
          "Profiling with AXI Timer P2",
          "Code",
          "Profiling with 64-bit Global Timer",
          "Code",
          "Vitis Profiler P1",
          "Vitis Profiler P2",
          "Code"
        ],
        "Interrupts": [
          "Agenda",
          "Fundamentals of Interrupt Drivers",
          "Working with GPIO Interrupts P1",
          "Working with GPIO Interrupts P2",
          "Working with GPIO Interrupts P3",
          "Working with GPIO Interrupts P4",
          "Code",
          "Multiple Interrupts P1",
          "Multiple Interrupts P2",
          "Multiple Interrupts P3",
          "Code",
          "Working with AXI Timer Interrupt P1",
          "Working with AXI Timer Interrupt P2",
          "Code",
          "Working with Private SCU Timer Interrupt P1",
          "Working with Private SCU Timer Interrupt P2",
          "Code",
          "Working with Private WDT Interrupt",
          "Code",
          "Working with TTC Interrupt P1",
          "Working with TTC Interrupt P2",
          "Code"
        ]
      },
      "requirements": [
        "Understanding of Digital Electronics",
        "Fundamentals of Computer Architecture",
        "Fundamentals of C"
      ],
      "description": "Xilinx Zynq SoC's are know to provide maximum performance per watt along with maximum reconfiguration flexibility. Zynq family features Dual-Core ARM Cortex A9 processors tightly coupled with the 7-series FPGA to enable faster communication interfaces development with ARM Design flow and hardware acceleration. Zynq devices are available in two categories viz. Zynq-7000s family FPGA for the cost-effective application such as IoT related applications while Zynq 7000 family FPGA are best for high-performance applications such as Embedded Vision etc. The Zynq 7000s comes with Single core ARM while Zynq 7000 comes with Dual-Core ARM.\nThis course covers fundamentals of Popular Xilinx drivers viz. UART, AXI Timers, UART16550, AXI GPIO, AXI BRAM, etc. The course also illustrates the usage of the AXI interrupt controller for handling Interrupts. Also to felicitate incorporation of Hardware accelerators with Zynq based design few examples on building Custom AXI Peripherals are also included. Software and Hardware Debugging, Profiling fundamentals are demonstrated with Zynq to felicitate performance measurement.\nThis course will create the foundation necessary to quickly start building applications on Zynq FPGA devices without prior experience in this domain.  The entire course is a Lab-based course with a major focussed on building skills necessary to handle simple peripherals such as GPIO, Intermediate Peripherals such as UART PS, AXI BRAM, and complex Peripherals such as AXI Interrupt Controller,  AXI Timers, GIC etc.",
      "target_audience": [
        "Anyone wish to build expertise in Xilinx Zynq APSOC and Xilinx VITIS Environment",
        "Embedded System Design with FPGA Processors"
      ]
    },
    {
      "title": "Basic Computer Class For Beginners",
      "url": "https://www.udemy.com/course/basic-computer-class-for-beginners/",
      "bio": "Learn how to use computer in few simple steps",
      "objectives": [
        "Learn The Basics Of Computer To Take Your Business To The Next Level"
      ],
      "course_content": {},
      "requirements": [
        "Minimum knowledge of the computer"
      ],
      "description": "Who Is This Class For?\nThis class is designed for those who are interested in learning how to use a computer. Even if you have never used a computer before, and especially if you are willing to invest in yourself. You will find the class particularly useful if:\nIf you want to know how to use a computer,\nIf you work in a place where computer usage is a requirement,\nIf you own or think of owning a small business,\nIf you want to better find your way around in this computer world and more.\n\n\nClass Description\nIn this class, you will learn the basics of how to use a computer, even if you have never touched a computer before.\n\n\nThe objective of this training class is to take you from a level of no knowledge of the computer to self-sufficiency in its usage.\n\n\nBut first thing, first what is a computer.\n\n\nMore About The Class\nAs we shall learn in this training class, the computer is not just a tool to consider in our house or business these days. Those days of considering computer as an optional tool to have around have passed.\n\n\nIt is now become an essential instrument to make our lives easier if we don’t want to be left behind. So, you want to know how to use a computer and you want to start today.\n\n\nCome to think of it. Learning how to use a computer is so easy as you will find out in this class. Apart from being easy, the computer is also pretty interesting to use.\n\n\nPersonally, I have benefited a lot from the use of computer and I think everyone should have access to the same opportunity.\n\n\nI know you might be busy or thinking that it’s going to be difficult to learn.\n\n\nWell, don’t worry. It’s going to be easy. I have created the training class in a way that it should be easy for you.\n\n\nSo, take advantage of it right away.\n\n\nHow You Can Benefit From Computer\nBy gaining the basics knowledge of computer, we have access to a lot of information and opportunities you might not have even known are there right now.\n\n\nConsider for example:\nElectronic mail: Every week, more than 20 million e-mail messages are sent and received through the Internet. You could finally be closer to your relatives and business associates through email messages.\nDownloading files: Have you ever seen a film and wished you could have that film in your home to watch anytime you want? What if you could be able to do that whenever you want?\nShopping: With the limited time we all have today, you will love to do your shopping at the comfort of your home? Am I correct?\nWhat about playing games, helping your children to do their homework on the computer, or even doing businesses online through your home or office computer?\n\n\nQuite frankly, the benefits you can derive from the usage of computer are endless.\n\n\nSo, let me help you get started and it will be much easier than you have imagined.\n\n\nClick on the enrolment button and let’s get the ball rolling on your basic computer knowledge.",
      "target_audience": [
        "Those willing to know how to use computer"
      ]
    },
    {
      "title": "Embedded Fun with RISC-V, Part 1: The RISC-V ISA",
      "url": "https://www.udemy.com/course/riscv-isa/",
      "bio": "Get to know the inner workings of the RISC-V architecture.",
      "objectives": [
        "How to design an embedded system of your own.",
        "The steps to take when you have an embedded system in mind.",
        "Tips and tricks in several steps of the design and implementation process.",
        "How the RISC-V architecture is organized.",
        "The RISC-V philosophy."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Motivation 1: Become a part of the RISC-V community!",
          "Motivation 2: Learn Computer Architecture",
          "Motivation 3: Get over the Arduino!",
          "About the Exercise Files"
        ],
        "About RISC-V": [
          "About RISC-V",
          "CISC vs RISC Architectures",
          "RISC-V ISA",
          "The RISC-V Foundation",
          "The RISC-V Reader: An Open Architecture Atlas",
          "ARM and a Leg"
        ],
        "Optional: A Crash Course on Computer Architecture": [
          "Parts of a Microprocessor-Based System",
          "Why we need a Bus Architecture",
          "The Bus Architecture",
          "The Data Bus",
          "The Address Bus",
          "The Control Bus",
          "How is it possible to drive a bus?",
          "The Memory Subsystem",
          "The Input/Output Subsystem"
        ],
        "Optional: Inside the CPU": [
          "Parts of a CPU",
          "Arithmetic Logic Unit",
          "Registers",
          "Special Registers",
          "The Data Path",
          "Control Logic",
          "Instruction Encoding",
          "Instruction Execution"
        ],
        "Optional: Some Design Approaches": [
          "Instruction Set Architecture",
          "Addressing Modes",
          "Some Addressing Mode Examples",
          "Number of Operands per Instruction",
          "Harvard vs. Von Neumann"
        ],
        "The RISC-V ISA": [
          "Introduction",
          "CPU Registers",
          "Addressing Modes",
          "Instruction Sets",
          "Instruction Encoding, Part 1",
          "Instruction Encoding, Part 2",
          "Encoding of Immediate Values",
          "RISC-V Reference Card"
        ],
        "RV32I Integer Base ISA": [
          "Register Operations",
          "Immediate Operations",
          "Load and Store",
          "Branches",
          "Jumps",
          "Load Immediates"
        ],
        "RV32 Extension ISAs": [
          "RV32M Multiply Extension ISA",
          "RV32F/D Floating-Point Extension ISAs",
          "FCLASS",
          "RV32C Compressed Extension ISA"
        ],
        "Atomic Operations": [
          "Atomic Operations",
          "Race Condition Example",
          "Race Conditions",
          "Implementing a Lock, Part 1",
          "Implementing a Lock, Part 2",
          "RV32A Atomic Extension ISA",
          "The aq and rl bits"
        ],
        "The GD32VF103 Board": [
          "Some RISC-V SoCs",
          "SiFive",
          "Some RISC-V Boards",
          "The GD32VF103 Board"
        ]
      },
      "requirements": [
        "Be comfortable with digital or analog electronic circuits.",
        "Have some basic experience with schematic diagrams.",
        "Be able to create embedded applications using either a microcontroller or an FPGA."
      ],
      "description": "Learn about the RISC-V Instruction Set Architecture by creating applications in an actual RISC-V microcontroller! See many applications developed on a RISC-V embedded microcontroller board. We've chosen an inexpensive board so you may follow along if you want.\nThis course is part of a hands-on curriculum where you'll get some basic experience on the design and development of embedded applications using a RISC-V core. This curriculum contains the following courses:\nPart 1: The RISCV ISA. Where you'll learn about the RISC-V Instruction Set Architecture.\nPart 2: Embedded Applications. Where you'll learn how to create basic applications using the on-chip peripherals.\nPart 3: Real Time Operating Systems. Where you'll learn how to create RTOS applications with an industry standard RTOS.\nPart 4: The Journey inside an RTOS. Where you'll learn how an RTOS works, now that you know how to use them.\nThe purpose of this first course is to get you acquainted with the RISC-V Instruction Set Architecture, covering the following topics, and more:\nAbout RISC-V\nThe RISC philosophy.\nThe RISC-V foundation.\nThe RISC-V Instruction Set Architecture Details.\nCPU Registers.\nAddressing Modes.\nThe Modular Instruction Set Variants.\nBase (Integer) Instruction Set.\nMultiplication Instruction Set.\nAtomic Operation Instruction Set.\nCompressed Instruction Set.\nFloating Point Instruction Set.\nHands-On Boot Camp\nThe GD32 Board, by Seeed Studio\nSegger Embedded Studio\nCreating a Project\nCompiling your Code\nDebugging\nDisassembled Code",
      "target_audience": [
        "Hobbyists who want to get their ideas in a professional board.",
        "Engineering students who want to create professional applications.",
        "Makers who have created custom applications in a development board, and want to take this expertise to the next level."
      ]
    },
    {
      "title": "Motherboard repairing: How to Diagnose a Laptop Motherboard",
      "url": "https://www.udemy.com/course/motherboard-repairing-how-to-diagnose-a-laptop-motherboard/",
      "bio": "Learn laptop motherboard repairing, computer hardware, PC troubleshoot, Hardware Technician, IT, course for beginners",
      "objectives": [
        "How to check visually any laptop motherboard;",
        "How to diagnose any laptop motherboard easily;",
        "How to troubleshoot motherboard circuits step by step;",
        "How to track the signal and/or voltage in laptop motherboard using the multimeter;",
        "Understanding Laptop Motherboard Power rails and circuits;",
        "How to diagnose motherboard main circuits;",
        "Understand all about 3V & 5V circuit using its schematic;",
        "Tips and Tricks about motherboard repairing;",
        "Understand all about CPU circuit, SIO IC, BIOS IC, Power management ICs and much more."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Laptop Motherboard Diagnosis Process": [
          "visual inspection",
          "Motherboard Main Power Diagnosis",
          "Central Processing Unit Circuit Diagnosis",
          "Drawing and analysis of CPU circuit diagram part 1",
          "Drawing and analysis of CPU circuit diagram part 2",
          "Motherboard Power Rail Analysis",
          "3V & 5V Power Rail Schematic Analysis",
          "3V & 5V Power Circuit Analysis",
          "3V and 5V Power Management IC Circuit Diagram Analysis Part 1",
          "3V and 5V Power Management IC Circuit Diagram Analysis Part 2",
          "How to check 3V and 5V Power Management IC Pinout",
          "3.3V Power Rail diagnosis and analysis",
          "Super IO CHIP Power Rail analysis",
          "How to check Super IO IC",
          "CPU Power Management IC Analysis",
          "Conclusion"
        ]
      },
      "requirements": [
        "Basic knowledge of motherboard repairing"
      ],
      "description": "**Continuous Updates**\n- 10 Reasons why you should choose this course\nThe course will teach you How to Diagnose a Laptop Motherboard in detail;\nThe course is created with perfect care by a computer engineer;\nOne-On-One Support;\nThe course is not long, so you can complete it in a short time;\nYour inquiries will be answered in a short time with a full explanation of any question;\nConstant updates.\nA certificate will be provided upon completion of the course;\nYou going to understand How to diagnose any laptop motherboard;\nYou are going to learn motherboard circuits;\nYou going to learn how to use a digital multimeter.\nTopics that we will be discussing in this course are :\nHow to perform a visual inspection on a laptop motherboard;\nHow to diagnose the Motherboard Main Power circuit;\nHow to diagnose Central Processing Unit Circuit;\nHow to Draw and analyze the CPU circuit diagram;\nMotherboard Power Rail Analysis;\n3V & 5V Power Rail Schematic Analysis;\nHow to read 3V and 5V Power Management IC Circuit Diagram;\nHow to check 3V and 5V Power Management IC Pinout;\n3.3V Power Rail diagnosis and analysis;\nSuper IO CHIP Power Rail analysis;\nHow to check Super IO IC.\nCPU Power Management IC Analysis.\nHow to use the Multimeter in the correct way.\nI'm going also to teach you many tips and tricks that will make you a hardware professional and have a deep understanding of motherboard repair.\nI will guide you step by step with an easy explanation of this course.\nIf you are interested in one of the points we talked about before, then this course is for you.\nSo what are you waiting for?\nEnroll now and join us.\nI'll love to see you in the class.",
      "target_audience": [
        "Anyone who want to learn how to diagnose laptop motherboard;",
        "Motherboard repairing students and technicians."
      ]
    },
    {
      "title": "Advanced ESP32",
      "url": "https://www.udemy.com/course/advanced-esp32/",
      "bio": "Learn to implement OTA Programming, FreeRTOS and Deep Sleep in the ESP32",
      "objectives": [
        "You will get deep insights into the features of the ESP32 Board",
        "You will be confident in writing code in C for any embedded boards",
        "You will be able to implement Over The Air Programming to your projects",
        "You will also be able to integrate WiFi Manager to your projects, to make WiFi Configuration much easier",
        "You will understand FreeRTOS in-depth and be able to implement it to optimize your projects",
        "You will learn to reduce the power consumption of the ESP32 by using Deep Sleep",
        "You will also learn basic ULP Coprocessor Programming for Deep Sleep"
      ],
      "course_content": {
        "A Deeper Insight into the ESP32 Features": [
          "Introduction to the course",
          "Overview of the ESP32 Features",
          "Part 1 : Practical Insights into the ESP32 Features",
          "Part 2 : Practical Insights into the ESP32 Features",
          "Quiz 1",
          "Assignment 1",
          "How to properly Reinstall Arduino IDE to avoid Compilation & Library Errors?"
        ],
        "Over The Air Programming in ESP32": [
          "What is OTA Programming?",
          "How do OTA Updates happen in the ESP32?",
          "Section 2: Top Questions & Answers",
          "How to implement basic OTA Programming in the ESP32 Thing?",
          "Implementing OTA Updates through a Web Server in the SparkFun ESP32 Thing",
          "How to setup Cloud OTA Updates for mDash Version 1.2.4 & above?",
          "Implementing Cloud-Based OTA Updates in the SparkFun ESP32 Thing",
          "WiFi Manager Update",
          "Implementing the WiFiManager Library in the SparkFun ESP32 Thing",
          "Part 1: Implementing WiFiManager and OTA Update in Projects",
          "Part 2: Implementing WiFiManager and OTA Update in Projects",
          "Quiz 2",
          "Assignment 2"
        ],
        "FreeRTOS on the ESP32": [
          "What is a Real Time Operating System?",
          "FreeRTOS Implementation in the ESP32",
          "What are Tasks, Queues and Semaphores?",
          "Section 3: Top Questions & Answers",
          "Implementing Dual-Core Multitasking and Synchronization in the ESP32 Thing",
          "Inter-Task Communication in the SparkFun ESP32 Thing with FreeRTOS",
          "Performance Benchmarking with FreeRTOS implementation in the ESP32 Thing",
          "Quiz 3",
          "Assignment 3"
        ],
        "Deep Sleep in the ESP32": [
          "What are the Sleep Modes in the SparkFun ESP32 Thing?",
          "Implementing Deep Sleep in the SparkFun ESP32 Thing",
          "Implementing External Wake-up Sources for Deep Sleep in the SparkFun ESP32 Thing",
          "Implementing an OLED NTP Clock with Deep Sleep using SparkFun ESP32 Thing",
          "Working with the ULP Coprocessor in the Arduino IDE",
          "Implementing ULP Coprocessor Wake-up from Deep Sleep in the ESP32",
          "Understanding the ULP Coprocessor Assembly Code in the ESP32",
          "Deep Sleep Power Consumption in the SparkFun ESP32 Thing",
          "Quiz 4",
          "Assignment 4",
          "Getting Started with ESP-IDF in ESP32"
        ]
      },
      "requirements": [
        "Completing our “Exploring the ESP32” course is highly recommended.",
        "Good understanding of Programming",
        "Good at using the Arduino IDE",
        "Basic understanding of Electronics",
        "Good logical thinking"
      ],
      "description": "June 2022 Update\nESP IDF Setup has been updated with new Windows Installer Method\nOctober 2020 Update\nExpanded ESP-IDF Resources for Code Migration from Arduino\nIncluded OTA, FreeRTOS, Deep Sleep & ULP Code for ESP-IDF\nSeptember 2020 Update\nAdded a New Lecture - Getting Started with ESP-IDF in ESP32\nApril 2020 Update\nIncluded Document to properly Reinstall Arduino IDE to avoid Compilation & Library Errors\nIncluded Document to setup Cloud OTA Updates for mDash Version 1.2.4 & above\nInclude Document to work with the updated version of the WiFi Manager Library\nIncluded Special Lectures answering top questions on OTA & FreeRTOS implementation\nHello learners, Welcome to MAKERDEMY's \"Advanced ESP32\" course. If you are an engineer, a hobbyist or a student, who wants to learn and implement advanced concepts like Over the Air Programming, FreeRTOS and Ultra Low Power Consumption in your ESP32 Projects or Products, you have come to the right place!\nThis is an advanced level course and experience with ESP32, and Arduino IDE is essential to follow this course. Through an innovative pedagogy of mixing projects and advanced concepts, this course will help you learn the WHY, HOW, and WHAT of the topics covered. For the more curious learners, we have provided ample resources to dive into and continue your learning journey.\nOn finishing this course, you will get deeper insights into the features of the ESP32 Board, that you didn't even realize. You will be able to make your products or projects user-friendly by implementing OTA Programming and WiFi Manager. You will gain an in-depth understanding of RTOS and its applications. You will understand FreeRTOS and be able to implement it to optimize your projects or products. Finally, you will learn to drastically reduce the power consumption of the ESP32 Board, by implementing Deep Sleep and leveraging the ULP Coprocessor of the ESP32 in your products or projects.\nSo, what are you waiting for?! Come, join me in this course. I am looking forward to being your instructor and to guide you in learning advanced embedded engineering concepts using the SparkFun ESP32 Thing.",
      "target_audience": [
        "An engineer looking to hone their skills in product development using the ESP32",
        "A hobbyist who wants to learn and implement advanced concepts using the ESP32",
        "A student who wants to learn cutting edge technologies by using Arduino IDE for the ESP32"
      ]
    },
    {
      "title": "Essentials of Storage Management",
      "url": "https://www.udemy.com/course/basics-of-storage-management/",
      "bio": "Understanding storage technology using OpenFiler an open-source NAS and SAN software solution.",
      "objectives": [
        "Chapter 01. Installing OpenFiler Updated",
        "Chapter 02. Initial Configuration OpenFiler",
        "Chapter 03. Adding Virtual Disks to the OpenFiler Storage",
        "Chapter 04. RAID0 updated",
        "Chapter 05. Managing Linux Volumes",
        "Chapter 06. iSCSI Target, ACL Configuraion & Publishing LUN",
        "Chapter 07. Mounting Remote Storage LUNS",
        "Chapter 08. Mounting LUN in Windows Server"
      ],
      "course_content": {
        "Creating your Storage Practice Lab": [
          "Introduction to SAN",
          "Installing OpenFiler",
          "Initial Configuration openFIler",
          "Adding Disks to OpenFile",
          "Creating RAID0 Volume - STRIPPING",
          "Implementing LVM in OpenFiler",
          "iSCSI Target, ACL Configuraion & Publishing LUN",
          "Accessing & Mounting LUN on Windows Server",
          "Accessing & Mounting LUN on Linux Server"
        ]
      },
      "requirements": [
        "There are no prerequisites.",
        "Basic computer knowledge is enough."
      ],
      "description": "This comprehensive course provides a thorough introduction to Openfiler, an open-source solution for managing Network-Attached Storage (NAS) and Storage Area Network (SAN) environments. Designed for IT professionals, storage administrators, and enthusiasts seeking to enhance their skills in storage management, this course covers essential concepts, configurations, and best practices for deploying and administering storage resources using Openfiler.\n\n\nKey Topics Covered:\nUnderstanding NAS and SAN Concepts: Differentiating between NAS and SAN architectures, their respective advantages, and use cases in enterprise environments.\nIntroduction to Openfiler: Exploring the features, capabilities, and architecture of Openfiler as an open-source storage management solution.\nInstallation and Configuration: Step-by-step guidance on installing and configuring Openfiler on supported hardware or virtualized environments.\nFile Sharing Setup: Configuring NFS, CIFS, FTP, HTTP, and WebDAV protocols for seamless file sharing across networks.\nBlock-Level Storage Configuration: Setting up iSCSI and Fibre Channel protocols for creating SAN environments and managing block-level storage.\nRAID Management: Understanding RAID levels, configuring RAID arrays for data redundancy and performance optimization using Openfiler.\nVolume Management: Creating, resizing, and managing storage volumes to efficiently allocate storage resources.\nSnapshot Support: Implementing and managing snapshots to capture and restore the state of file systems for data recovery and backup purposes.\nUser Authentication and Access Control: Configuring user authentication mechanisms such as LDAP and Active Directory, and implementing access control for shared resources.\nMonitoring and Maintenance: Monitoring storage performance, health, and utilization using Openfiler tools, and performing routine maintenance tasks.\nBy the end of this course, participants will have the knowledge and skills to effectively deploy, configure, and manage storage resources using Openfiler, empowering them to support storage infrastructure in enterprise environments efficiently.",
      "target_audience": [
        "Storage technology aspirants who want to build their understanding on the storage technologies.",
        "System Engineeres or Admins aspiring to know about storage management"
      ]
    },
    {
      "title": "VLSI Design",
      "url": "https://www.udemy.com/course/vlsi-design-mask/",
      "bio": "Learn the principles, concepts and design methodologies adapted to design a VLSI Chip.",
      "objectives": [
        "Learn the concepts, principles of VLSI Design",
        "Adopt different methodologies to design a VLSI Circuit",
        "Draw any digital circuit only using the CMOS Technology",
        "Know how to convert a logic design into a physical design"
      ],
      "course_content": {},
      "requirements": [
        "A basic knowledge in Digital Electronics would be preferred. Yet it is not compulsory"
      ],
      "description": "Welcome to my course on 'VLSI Design'. The course will help you to understand the different design methodologies, rules that are used in the field of VLSI Design.\nThe course essentially holds 7 different modules.\n1. Fundamentals - Introduction to VLSI Design, The VLSI Design Flow,  A review on PMOS, NMOS Transistors.\n2. Inverter design - CMOS, Ratioed, Resistive Load Inverters - Working, VTC, Power, Delay\n3. Logic design - Complementary CMOS, Pass Transistors, Transmission Gates\n4. Dynamic circuits design - Precharge, Evaluation Phases, Characteristics, Dynamic Power Consumption\n5.  ALU Subsystem design - Adders, Shifters, Multipliers, Latches, Flipflops, Multiplexers and so on,\n6. Memory Design - Fundamentals, ROM Cell, RAM Cell - SRAM, DRAM\n7. Layout Design - CMOS Layouts, Mead-Conway rules.\nAll these modules will be frequently updated with new learning contents.\nVery-large-scale integration (VLSI) is the process of creating an integrated circuit (IC) by combining thousands of transistors into a single chip. VLSI began in the 1970s when complex semiconductor and communication technologies were being developed. The microprocessor is a VLSI device.\nOver the past several years, Silicon CMOS technology has become the dominant fabrication process for relatively high performance and cost effective VLSI circuits. The revolutionary nature of these developments is understood by the rapid growth in which the number of transistors integrated on circuit on single chip.\nReferences:\nDigital Integrated Circuits, A Design Perspective by Jan M. Rabaey, Prentice Hall (1996).",
      "target_audience": [
        "Anyone who wants to learn VLSI Design",
        "Anyone who wants to start designing VLSI Circuits"
      ]
    },
    {
      "title": "Microcontroller Communication Protocols Bundle",
      "url": "https://www.udemy.com/course/serial-communication-spi-rs232-spi-communication-protocols-bundle/",
      "bio": "A step by step guide to Master Communication Protocols",
      "objectives": [
        "What is I²C, SPI, RS232, and USB and how they work",
        "Advantages of each communication Protocol (I²C, SPI, RS232, and USB)",
        "Disadvantages of each communication Protocol (I²C, SPI, RS232, and USB)",
        "I²C, SPI, RS232, and USB Operation",
        "Main I²C, SPI, RS232, and USB Bus Library Functions",
        "Interface different devices with Arduino using I²C, SPI, RS232, and USB",
        "How to implement I²C, SPI, RS232, and USB in your project",
        "What is the difference between I²C, SPI, RS232, and USB",
        "Why using I²C, SPI, RS232, and USB will make your life easier",
        "How to code I²C, SPI, RS232, and USB the right way and how to talk to multiple devices easily",
        "A practical example of I²C, SPI, RS232, and USB",
        "Interface different devices with PIC Microcontroller using I²C, SPI, RS232, and USB",
        "Interface different devices with Arduino using I²C, SPI, RS232, and USB",
        "What is SPI",
        "Advantages of SPI",
        "Disadvantages of SPI",
        "SPI Operation",
        "Main SPI Bus Library Functions",
        "Interface different devices with Arduino using SPI",
        "How to implement SPI in your project",
        "What is the difference between SPI and I2C, and other communication methods",
        "How to code SPI the right way and how to talk to multiple devices easily",
        "A practical example of SPI"
      ],
      "course_content": {},
      "requirements": [
        "A computer to run the software",
        "A basic knowledge in C Programming language",
        "No Material is required for this Course",
        "Proteus Professional Software: Explained inside the Course",
        "MikroC Software: Explained inside the Course",
        "Arduino Software"
      ],
      "description": "More than 8 hours of Full HD Content | All In One Bundle to Master Communication Protocols in the Microcontroller World\nWhat You Will Learn In This Bundle:\nCreating a GUI to control Arduino and PIC Microcontroller\nUSB Interfacing for Different Microcontrollers\nArduino Communication with I2C Bus\nArduino Communication with SPI Bus\nPIC Microcontroller Communication with I2C Bus\nPIC Microcontroller Communication with SPI Bus\nDetailed Description of Each Topic:\nArduino Communication with I2C Bus:\nA step by step guide to Master I2C Protocol and Start using it in your Arduino projects.\nI²C (pronounced I-squared-C) allows communication of data between I2C devices over two wires, making it easier to exchange information without too much wiring.\nWhy You Should Take This Course:\nThis course will teach you how to effectively communicate with any microcontroller.\nPerfect for professionals looking to understand the underlying principles of microcontroller communication.\nYou can learn on your own time at your own pace, and this course is accessible for beginners.\nYou will gain a practical understanding of the basics of communicating with microcontrollers.\nYou will learn about serial communication protocols.\nYou will understand what takes place in a packet when it comes in and out of a microcontroller.\nYou will become fluent in TCP/IP networking protocols, which are used to send data over the internet.\nYou will become fluent in Bluetooth protocols, which are used.\nWhat You Will Learn in This Course:\nWhat is I²C and how it works\nHow to implement I²C in your project\nThe difference between I²C and other communication methods\nWhy using I²C will make your life easier\nThe advantages and disadvantages of using I²C\nHow to code I²C the right way and how to talk to multiple devices easily\nA practical example of I²C enabled DS1307 Data and Time IC and how to read data from it using I²C\nPIC Microcontroller Communication with I2C Bus:\nA step by step guide to Master I2C Protocol and Start using it in your projects.\nPIC Microcontroller Communication with SPI Bus:\nA step by step guide to Master SPI Protocol and Start using it in your projects.\nSPI allows communication of data between SPI devices over four wires, making it easier to exchange information without too much wiring.\nArduino Communication with SPI Bus:\nA step by step guide to Master SPI Protocol and Start using it in your projects.\nUser Testimonials: \"This bundle provided me with a comprehensive understanding of microcontroller communication protocols. It's very practical and easy to follow.\" - Alex J.\n\"An excellent course bundle for anyone wanting to master communication protocols with Arduino and PIC microcontrollers!\" - Maria S.\nAuthor Bio: Ashraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. As a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world. With over 250,000 students from around the world, Ashraf’s online courses have helped many to kick-start their careers in the industry.\nCall to Action: Enroll now to master microcontroller communication protocols and elevate your electronics projects!\nFAQ: Q: Do I need prior experience in electronics or programming to take this course? A: No, this course is designed for all levels.\nQ: Will I need to buy additional equipment? A: The course provides a list of necessary hardware, all of which are affordable and easily accessible.\nWhat You Will Learn\nUnderstand and implement I²C and SPI communication protocols\nDevelop practical skills for microcontroller communication\nCreate a GUI to control Arduino and PIC microcontrollers\nInterface USB with different microcontrollers\nWho Is This Course For\nElectronics enthusiasts\nHobbyists interested in microcontroller communication\nBeginners looking to understand communication protocols\nProfessionals wanting to deepen their knowledge\nRequirements\nAn Arduino board, PIC microcontroller, and basic electronic components\nBasic understanding of using a computer\nNo prior programming or electronics experience needed\n\n\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading team in the Microcontroller Industry, with over 13 Years of Experience in teaching and doing practical projects. They strive to provide deep, hands-on experience in their courses, offering step-by-step blueprints on various topics.\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and maker. He has been the Chief Educational Engineer at Educational Engineering Team since 2007, and his mission is to explore new trends and technology to help educate the world. His online courses have helped over 250,000 people worldwide to build successful careers.\nEducational Engineering Team offers courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone interested in talking to multiple devices easily via I²C, SPI, RS232, and USB the right way",
        "Anyone Interested in Interfacing Arduino and PIC Microcontroller with other ICs or devices via I²C, SPI, RS232, and USB",
        "Anyone Interested in Controlling different devices using I²C, SPI, RS232, and USB Protocols",
        "Arduino and PIC Microcontroller Lovers"
      ]
    },
    {
      "title": "RF Concepts, Components and Circuits For Beginners",
      "url": "https://www.udemy.com/course/rf-components-ciruits-rf-concepts-rf-design-rf-training-rf-engineering/",
      "bio": "Radio Frequency (RF) technology: Modulation, Oscillator, Filters, Amplifiers, Antennas, Impedance Matching, Smith Chart",
      "objectives": [
        "Radio Frequency Basics",
        "RF Principles and Concepts",
        "RF Components",
        "RF Circuits",
        "RF Modulation and Demodulation Techniques",
        "Mixers, Oscillators, RF amplifier, Antennas,",
        "RF Filters, Impedance Matching, VSWR",
        "Low Noise Amplifier",
        "S-parameters, Smith Chart, RF Attenuators"
      ],
      "course_content": {
        "Introduction": [
          "What is Frequency and Wavelength?",
          "RF Signals Frequency Range",
          "Modulation/Demodulation: Fundamental requirement for RF communication",
          "What is Modulation?",
          "Why we use modulation? What are its Advantages?",
          "What are Modulation Types?-Analog Modulation"
        ],
        "Bigger Picture-Block Diagrams of Amplitude Modulated RF Transmitter & Receiver": [
          "Amplitude Modulation (AM)",
          "Demodulation of Amplitude Modulated (AM) Signal",
          "RF Transmitter Block Diagram",
          "RF Receiver Block Diagram"
        ],
        "Important Analog And Digital Modulation Schemes": [
          "Quadrature Amplitude Modulation (QAM)-Analog",
          "Types of Digital Modulation Schemes",
          "Amplitude Shift Keying (ASK)",
          "Amplitude Shift Keying, 4-ASK Digital Modulation",
          "4-ASK Demodulation",
          "Binary Frequency Shift Keying (BFSK)",
          "Binary FSK Demodulation",
          "Binary Phase Shift Keying (BPSK) Modulation",
          "Binary Phase Shift Keying (BPSK) Modulation",
          "M-Phase Shift Keying (M-PSK)",
          "Quadrature Phase Shift Keying (QPSK) Modulation",
          "Quadrature Phase Shift Keying (QPSK) Demodulation",
          "M-Quadrature Amplitude Modulation (M-QAM)",
          "16-Quadrature Amplitude Modulation (16-QAM)",
          "16-QAM Demodulation",
          "RF Transmitter And Receiver Module"
        ],
        "Revision Of Some Basic Electronics' concepts": [
          "Active Components: Current Controlled Devices",
          "Active Components: Voltage Controlled Devices",
          "Passive Components",
          "Capacitive Reactance",
          "Inductive Reactance",
          "Impedance",
          "Series Resonance in R-L-C Circuit",
          "Parallel Resonance in R-L-C Circuit"
        ],
        "Oscillators": [
          "Function Of An Oscillator",
          "Types Of Oscillators: 1) Linear (Harmonic) 2) Relaxation",
          "Linear (Harmonic) Oscillators and their Types",
          "Feedback Oscillators",
          "Types of Feedback Oscillators",
          "RC Phase Shift Oscillators",
          "LC Tank Circuits for LC Oscillators",
          "LC Oscillators: Hartley Oscillator",
          "LC Oscillators: Colpitts Oscillator",
          "Crystal Oscillators",
          "Piezoelectric Effect",
          "Electrical Equivalent of Quartz Crystal",
          "Crystal Oscillator Circuits",
          "Negative Resistance Oscillators",
          "Voltage Controlled Oscillators",
          "Problem of Phase Noise in Oscillators"
        ],
        "Mixer and its Applications": [
          "Mixer Operation",
          "Mixer Application: Modulation\\Demodulation",
          "Mixer Application: Superhetrodyne Receiver"
        ],
        "Radio Frequency (RF) Filters": [
          "RF Filters",
          "RF Filters Classes and Types",
          "Decibel Milli Watt (dBm) to measure power in RF systems",
          "Decibel (dB) to Measure Amplification And Attenuation",
          "3 dB Bandwidth of a Filter",
          "Passive Filters: LC Lowpass Filter",
          "Passive Filters: LC Highpass Filter",
          "Q-Factor of a Filter",
          "Passive Filters: LC Bandpass Filter",
          "Passive Filters: LC Bandstop Filter",
          "Active Filters: Lowpass Filter",
          "Order of a Filter"
        ],
        "Power Amplifers": [
          "Power Amplifer",
          "Class A Amplifiers",
          "Why Linear Amplification is Required?",
          "Class B (Push-pull) Power Amplifiers",
          "Class AB Power Amplifiers",
          "Class C Amplifiers",
          "Additional Classes D,E, F etc",
          "Linearity Parameter of an Amplifier: 1 dB Compression Point",
          "Power Amplifier Backoff Operation",
          "Intermodulation (IM) Products due to Non-linearity",
          "Linearity Parameter of an Amplifier: Third Order Intercept"
        ],
        "Antennas": [
          "What is Antenna and its Polarization?",
          "Important Antenna Parameters",
          "Antenna Gain: Isotropic Antenna Power Gain",
          "Dipole Antenna",
          "Dipole Antenna Radiation Pattern And Beamwidth",
          "Monopole (Marconi) Antenna",
          "Loop Antenna",
          "Traveling Wave Type Antennas: Yagi Antenna, Helical Antenna",
          "Log-Periodic Antenna",
          "Micro strip or Patch Antenna",
          "Horn Antenna",
          "Circular Parabolic Reflector Antenna",
          "Array Antennas"
        ],
        "Impedance Matching, Reflected Power & VSWR": [
          "What is Impedance Matching?",
          "Impedance Mismatch: Reflected Power",
          "Impedance Matching in the Case of Complex Loads",
          "Reflected Power Vs Frequency",
          "Quantifying Reflected Power: Return Loss & VSWR",
          "Calculating VSWR Matematically",
          "VSWR Vs Returned Power",
          "Impedance Matching Networks"
        ]
      },
      "requirements": [
        "Basic understanding of Electronics and"
      ],
      "description": "Radio frequency (RF) is the oscillation rate of an alternating electric current or voltage or of a magnetic, electric or electromagnetic field in the frequency range from around 20 kHz to around 300 GHz.\nRadio frequency engineering, or RF engineering, is the study and application of radio waves with the purpose of creating technology and devices that can both receive and send signals using these waves. RF engineering is an important component for those working in aeronautics, telecommunications, military services, commercial radio, television and space-related professions. People use radio waves to communicate on their cell phones, and RF engineers design and implementing the technology that supports 4G and 5G networks.\nThis is a beginner course in RF engineering that addresses important concepts, components and circuits used in the RF engineering. This course  will serve as a basis to move ahead and build upon more advanced concepts in RF engineering and designs.\nThis  course is divided into following sections:\nSection 1: Introduction to RF systems\nSection 2: Bigger Picture: Transmitter/Receiver Block Diagram\nSection 3: Important Analog And Digital Modulation Schemes\nSection 4: Revision Of Some Basic Electronics' concepts\nSection 5: RF Oscillators\nSection 6: Mixer and its Applications\nSection 7: RF Filters\nSection 8: Power Amplifiers\nSection 9: Antennas\nSection 10: Impedance Matching, Reflected Power & VSWR\nSection 11: S (Scattering)-Parameter\nSection 12: Smith Chart And Impedance Matching\nSection 13: Low Noise Amplifier (LNA)\nSection 14: RF Attenuators and their Types\nSection 15: Introduction to Software Defined Radios (SDRs)",
      "target_audience": [
        "Undergraduate Electrical Engineering Students",
        "RF Technicians",
        "RF Engineers",
        "RF Sales Engineers",
        "RF Test Engineers",
        "RF/HAM Radio Enthusiast"
      ]
    },
    {
      "title": "Super way to Learn Arduino | Creative",
      "url": "https://www.udemy.com/course/super-way-to-learn-arduino-creative/",
      "bio": "From Zero To Hero | Thinking Out Of Box",
      "objectives": [
        "Program in Arduino",
        "Use Arduino board and sensors",
        "Solid background about electronics, arduino and programming",
        "Well-equipped with the skills in to how to search and take the idea to real-life"
      ],
      "course_content": {},
      "requirements": [
        "Basics of how to use computer and browser"
      ],
      "description": "Updated: July 26th, 2021| Monday\n_______________________________________\nAbout this course: The Arduino is an open-source computer hardware/software platform for building digital devices and interactive objects that can sense and control the physical world around them. In this class, you will learn how the Arduino platform works in terms of the physical board and libraries and the IDE (integrated development environment). You will also learn about shields, which are smaller boards that plug into the main Arduino board to perform other functions such as sensing light, heat, GPS tracking, or providing a user interface display. The course will also cover programming the Arduino using C code and accessing the pins on the board via the software to control external devices.\nUpon completing this course, you will be able to:\n1. Outline the composition of the Arduino development board\n2. Describe what it means to program the board\n3. All of the Arduino Uno components\n4. Install Arduino IDE\n5. Describe what \"shields\" are and how they are used\n6. Specify the role of libraries in the use of shields\n7. Compile and run a program\n8. Name C Variables and Types\n9. Name common C operators\n10. Use conditionals and loops\n11. Explain functions, their definition, and invocation\n12. Explain the implications of global variables\n13. Undertake the Arduino build process\n14. Describe the role of the tools behind the IDE\n15. Describe how to invoke functions in classes\n16. Explain the structure of an Arduino sketch\n17. Access the pins of the Arduino\n18. Differentiate between digital and analog pin\n19. Hands-on experience and create innovative projects.\n\n\nand all of it through a very creative learning way, I am sure that it is going to be a short and sweet learning process for you.\nIf you would love to start making what you have in your mind of creative ideas, enroll, and best of luck.\n\n\nBest Wishes to all of you ; ).\n- Instructor",
      "target_audience": [
        "Anyone interested in Robots",
        "Anyone interested in Programming",
        "Anyone interested in making new things",
        "Anyone want to make a product",
        "Serious coders & hobbyists",
        "Students & teenagers"
      ]
    },
    {
      "title": "Learning Soldering: Through Hole & Surface Mount Components",
      "url": "https://www.udemy.com/course/learning-soldering-through-hole-and-surface-mount-components/",
      "bio": "A Beginner's Guide to hand solder both through hole and surface mount components like a professional",
      "objectives": [
        "Soldering THT components",
        "Soldering SMD components",
        "Learn about PCBs and download open source files from the internet",
        "Tools required to solder safely",
        "Basic tools required for soldering",
        "Choosing a suitable soldering iron",
        "Setting up the iron and using different tips and temperature",
        "Splicing and soldering wires together",
        "Desolder THT components",
        "Desolder SMD components",
        "Repair mistakes in PCB"
      ],
      "course_content": {},
      "requirements": [
        "Basic Tools To Follow Along"
      ],
      "description": "Soldering is required in all electronics manufacturing and repair operations. It can be applied to very small components on Printed Circuit Boards or on larger electromechanical assemblies. The techniques are similar but the soldering iron, tip, and solder type may be different for each application.\nIn any electronic product, components are attached using solder, a metal compound that melts at a low enough temperature to be able to be worked by hand or machine.\nWhether you are prototyping a new product, manufacturing a product at scale, or working on a project in your spare time, you will need to learn how to solder in order to create the electrical and mechanical connections that make it all work.\nThe basic procedure involves applying a sufficient amount of heat to the two surfaces being joined together. This could be a component lead and a PCB, or a wire lead and a metal terminal, like those found on a switch or another wire termination. The amount of heat required will be dependent on the thermal mass of the materials and the type of solder being used.\nQuality solder joints are a combination of proper technique and proper equipment and materials. The technique is a learned process that is optimized through experience.\nIn this course, learn about the tools and techniques needed to make great solder connections. Plus, get troubleshooting tips, including how to fix a cold solder joint and repair a mistake in a PCB.",
      "target_audience": [
        "Anyone who wants to learn and begin soldering"
      ]
    },
    {
      "title": "Internet of things (IoT) for Beginners: Getting Started",
      "url": "https://www.udemy.com/course/internet-of-things-iot-for-beginners-getting-started/",
      "bio": "Learn the Basics of Internet of Things (IoT). And how to connect sensors with Raspberry Pi and Arduino Board",
      "objectives": [
        "Understand general concepts of Internet of Things",
        "Recognize various sensors and devices",
        "Apply concepts of forming IoT solutions",
        "Key differences between Micro-controllers vs Microprocessor"
      ],
      "course_content": {},
      "requirements": [
        "As such no special requirement or prerequisites",
        "Familiarity with Internet of Things terminology (Preferrable)",
        "Passion to learn new things (Preferrable)",
        "Basic Computer Knowledge"
      ],
      "description": "Internet of things (IoT) is one of the most enticing and upcoming technologies. This introduction to Internet of things (IOT) course is for beginners. This IOT introduction course will help you understand basics of Internet of things and applications of Internet of Things (IOT). And will help you getting started in the world of IoT.\nThe course covers the Basics of Internet of Things and various sensors and Components of IoT world.\nENVIRONMENT MONITORING SYSTEM using MICRO-PYTHON (Video Demo)\nBONUS CONTENT:\nRASPBERRY PI 4 UNBOXING AND INTRODUCTION (Video)\nComparison of Various Raspberry Pi models on Various Parameters (Document)",
      "target_audience": [
        "Beginner level IoT learners curious to learn Internet of Things basics.",
        "Anyone who is interested in diving into the world of IoT",
        "Hobbyist/ IoT enthusiast",
        "Students of Engineering doing projects in IoT/Sensors applications."
      ]
    },
    {
      "title": "Complete ARM Cortex-M Bare-Metal Programming (TM4C123)",
      "url": "https://www.udemy.com/course/cortex-m-internals-master-pointers-structures-memory-etc/",
      "bio": "No Libraries used : Cortex-M Internals, Master Pointers, Structures, Memory Navigation, Debugging, CMSIS,Assembly etc",
      "objectives": [
        "Be able write firmware using bare-metal embedded-c",
        "Write Embedded programs using just pointers and and memory addresses",
        "Write more professional and efficient Embedded programs.",
        "Understand the Cortex-M Architecture",
        "Understand Load - Store Architecture",
        "Understand ARM Cortex-M Debugging",
        "Write UART drivers using ASSEMBLY code",
        "Thoroughly understand the CMSIS core",
        "Write firmware using only bare-metal embedded-c",
        "Write TIMER drivers using ASSEMBLY code",
        "Write Interrupt drivers using bare-metal embedded-c",
        "Write Analog-to-Digital Converter (ADC) drivers using bare-metal embedded-c"
      ],
      "course_content": {},
      "requirements": [
        "We shall be using the Keil uVision 5 IDE and toolchain  which is FREE.",
        "This course assumes no prior knowledge of Cortex-M development",
        "You will need a TIVA C Launchpad - TM4C123  Board"
      ],
      "description": "Welcome to the Complete ARM Cortex-M Bare-Metal Programming (TM4C123) course.\nThis course assumes no prior knowledge of either cortex-m or embedded-c programming.\nAll it requires from students is curiosity.The course takes a practical approach to  cover key areas such as pointers ,structures, memory navigation  and the Cortex-M Software Interface Standard. The main aim of this course is to provide learners with practical skills and a strong foundation that they can build upon to start producing well written code which runs efficiently and leverages the key aspects of the ARM Cortex-M ecosystem.  This course has many key sections.\nThe goal of the assembly peripheral section is to teach you how to navigate the microntroller reference manual and datasheet to extract the right  information to professionally  build peripheral drivers and firmware. To achieve this goal, no libraries are used in this course, purely ARM Assembly Language and bare-metal embedded C\nBy the end of this section  you will be able configure microcontroller peripherals  like ADC, UART, GPIO, TIMER etc in assembly.  You will also master the ARM architecture, ARM Instruction Set Architecture (ISA) and building professional embedded firmware in assembly for ARM processors.\nPlease take a look at the full course curriculum.\nREMEMBER : I have no doubt you will love this course. Also it comes with a  FULL money back guarantee for 30 days!  So put simply, you really have nothing to loose and everything to gain.\nSign up and lets start toggling some register bits.",
      "target_audience": [
        "If you are an absolute beginner to embedded systems, then take this course.",
        "If you are an experienced embedded developer and want to learn how to professionally develop embedded applications for ARM processors, then take this course.",
        "If you want learn how to write peripheral drivers in ASSEMBLY language and Bare-Metal C then take this course."
      ]
    },
    {
      "title": "How Computers Work - Finally resolving the mystery!",
      "url": "https://www.udemy.com/course/how-computers-work-course/",
      "bio": "REAL INSIGHTS into CPU design, logic gates, memory latches, computer architecture, computer fundamentals and basics",
      "objectives": [
        "A step by step guide to design a computer: learn how to combine transistors to build adders, comparators, decoders, sequencers and buffers",
        "A revolutionary way to learn electronics",
        "How to build computer memory: the best explanations on NAND/NOR latches in an unprecedented way!",
        "How instructions work: Instruction fetching and execution",
        "What is programming: how to write a program, how program works",
        "How computers do subtraction, multiplication and division",
        "Learn computer design logics",
        "A great introductory course into computer science"
      ],
      "course_content": {
        "Introduction": [
          "How computers work-Overview",
          "Course content"
        ],
        "How computers compute - ALU": [
          "How to represent numbers",
          "Who's computing on what",
          "How transistor works",
          "Semiconductor technology - PN junction",
          "Semiconductor technology - NPN",
          "Energy band theory",
          "How transistors add two bits",
          "How transistors add 1+1",
          "How transistors add 1+0",
          "Logic gates and half adders",
          "How to add multibits",
          "How to do subtractions",
          "How to do multiplications",
          "How to do divisions",
          "Arithmetic logic unit"
        ],
        "How computers remember - Memory": [
          "What does memory need to do",
          "How to store one bit I",
          "How to store one bit II",
          "How does memory work - general structure",
          "How NOR NAND latches work",
          "How to store many numbers",
          "How to stop interferences - buffers",
          "How to access memory - memory grid",
          "How to decode memory addresses - decoder",
          "How to get memory addresses - memory management"
        ],
        "How computers do things - Control section": [
          "What else computers need to do",
          "How to know what to do - instruction",
          "How to know when to do things - timing switch",
          "How to build the sequencer",
          "How to fetch instructions",
          "How to execute instructions I - computing instruction",
          "How to execute instructions II - data movement instructions",
          "How to execute instructions III - initial data movement instruction"
        ],
        "What is programming": [
          "What is programming - Introduction",
          "How to write programs",
          "How to reuse programs - JMP instruction",
          "How to get out of a loop I - CMP instruction",
          "How to get out of a loop II - JCON instruction",
          "How to clear flags - CLR instruction",
          "How to jump to calculated address - JMPR instruction",
          "How to transport data - IO instruction",
          "Low vs high level programming",
          "Conclusions"
        ],
        "Bonus lecture": [
          "CORDIC algorithm",
          "CORDIC algorithm - Excel implementation"
        ]
      },
      "requirements": [
        "No prerequisites needed, all you need is the curiosity about how and WHY computers work"
      ],
      "description": "Finally an explanation that will quench your curiosity! This course SETTLES it!  Based on Scott CPU by J. Clark Scott, we will talk about how to design a computer step by step, and also discuss extensively the design logics behind! You will know not only how computers work, but more importantly, WHY they are designed this way. You will find it NOWHERE ELSE!!\nIf you are absolute beginners, this course will teach you the nuts and bolts in an intuitive way that’s easy to follow.\nIf you are an experienced programmer curious about how those magical symbols typed turn into actions and results, this course will teach you the missing hardware piece in an enlightening way.\nIf you are an electrical engineer who already know circuits and electronics, this course will give you the unprecedented insights found nowhere else about complex circuits like memory latches, decoders, counters.\nIf you are a lifelong learner hoping to enrich your life experiences by learning science and technologies, this course will give you the fresh insights into the technological aspects of our modern lives.\n\n\nWhy are we able to communicate with students from such drastically different backgrounds? That’s because we’ve uncovered a brand new way of teaching: teach WHY, not just how! When you understand why, the learning process would become a flow experience.\n\n\nWe will talk about how to build each component of a computer. The mechanics of doing is intertwined with the purposes and goals, so the learners will find it so easy to follow.\n(I) How computers compute. In this section, we will talk about how to build ALU that does the computing. Particularly we will talk about number representations, how transistor works, semiconductor technologies, and how to combine transistors to build adders. We will also talk about how computers do subtraction, multiplication and division.\n(II) How computers remember. In this section, we will talk about how to build computer memory. We will show you step by step how to build memory latches, how to build memory grid by using multiple memory units, how to connect the memory grid to the ALU, how memory addressing works.\n(III) How computers control. In this section, we will talk about how to build computer control section. We will discuss the basic tasks a computer needs to perform, how to build a sequencer, how instruction works, how to fetch and execute instructions.\n(IV) What is programming. In this section we will talk about the basic instructions needed, how to wire them and how to do programming. In particular we will talk about jump instructions, load and store instructions, data instructions, clear instructions, IO instructions.\n\n\nHow our teaching differs from others’:\nMany people talk about computers from the perspectives of a machine, rather than the perspectives of human. They start with the different components of computers, detailing one component and move on to the next. Those materials, while presenting the mechanics of the machine in an objective way, they barely speak to our hearts. Because for any information to go into our hearts, we have to understand WHY we do what we do.\nFully understand the needs of learners, the lecturers lay out the components from the perspectives of learners: what do I need to build and why would I build it this way. Eventually every essential components of a computer will be discussed, but the contents are structured in a way that follow human logics and reasoning, rather than the mechanics of the machine. Once you understand the design logics, you will see nothing is really difficult, nothing need to be memorized, because you have fully understood!",
      "target_audience": [
        "Anyone who wants to TRULY know how computers work",
        "Anyone who knows programming, but has no clues how programming works",
        "Anyone who've studied electronics, but still seeking a better understanding",
        "Lifelong learners hoping to enrich your life experiences by learning science and technologies"
      ]
    },
    {
      "title": "How to Build an Extreme Gaming PC!",
      "url": "https://www.udemy.com/course/build-gaming-pc/",
      "bio": "A comprehensive guide to Building Your 1st Gaming PC - Step-by-Step for Beginner's.",
      "objectives": [
        "How to Research a gaming PC Build.",
        "Asus ROG Maximus XI Hero Motherboard full installation.",
        "Install Intel i9-9900K Processor.",
        "Water Cooling System - Install and Setup.",
        "Install Corsair Lighting Node Pro and Commander Pro.",
        "Basics of Overclocking the i9 Processor to 5Ghz",
        "GTX 1060 Vs RTX 2080 - Bang per buck!",
        "Allow you to upgrade components at any time."
      ],
      "course_content": {},
      "requirements": [
        "A willingness to come open minded and ready to learn!"
      ],
      "description": "\"Assembling your own PC will supercharge your gaming experience and allow you to upgrade components at any time.\"\nIf you're a gamer, the thought of building your own PC has crossed your mind. It did for me too... !\nA custom-built gaming PC is the only sure way to get exactly what you want, exactly the way you want it!\nWhen you control everything that goes into your PC from Graphics card to power supply, you know its a surefire way to be able to play the games you want, at the Frame-Rates you want, without sacrificing performance.\nBuilding your own PC is easier than you think and super fun and rewarding. As a gamer, its the next step!\nAn enthusiast built PC let you keep the door open for upgrades. As time moves on technology changes, your gaming taste and needs change - upgrade as your budget allows.\nBuilding a gaming PC isn't hard, but it's also not always a walk in the park. That's why I've put together this comprehensive online video step-by-step guide to building your extreme gaming PC — complete with tips and tricks from me a veteran builder.\n\n\nIntroducing Intel's big daddy processor. This course features the 9th Generation \"Coffee Lake\" Processor -Not for the faint hearted - for users who demand the very best.\nThis Intel i9 system comes with top of the line hardware synonymous with Extreme PC's - Top Motherboard, Top GPU, Top PSU, Top RAM and Top Case, makes it ideal for Video/Music Editing, 3D Rendering, Quantum Mechanical Physics and of course Gaming!!\nCourse Features:\nIntel's i9 9900k - Processor - I show the way to 5Ghz!\nGeForce RTX 2080 - Video Card (GPU).\nAsus ROG Maximus XI Hero (Wi-Fi) - Motherboard (Mobo).\nCosair H100i RGB - Water Cooling system.\nASUS ROG Thor 1200 Watt - Power Supply (PSU).\nCosair Lighting Node Pro & Commander Pro - RGB Lighting System.\nI shall be walking you through the entire process step-by-step, showing how to avoid those expensive pitfalls!!\nI also help remove some of the fear and hype around Overclocking.\nAt the end of this course, not only will be able to talk confidently with friends and colleges, about how to build a Gaming PC\nand you'll have the Confidence, Skills and Knowledge to build yourself the ultimate Computer.\nEnjoy!",
      "target_audience": [
        "Anyone looking for the flexibility of building their own computer"
      ]
    },
    {
      "title": "Learning UVM Testbench with Xilinx Vivado 2020",
      "url": "https://www.udemy.com/course/learning-uvm-testbench-with-xilinx-vivado-2020-for-newbie/",
      "bio": "Step by Step Guide",
      "objectives": [
        "Writing testbenches in UVM using Xilinx Vivado Design Suite",
        "Usage of Config db in UVM",
        "Learning TLM in UVM",
        "UVM_Phases and how to effectively use them",
        "UVM classes and their usage"
      ],
      "course_content": {
        "Introduction": [
          "UVM Reference Manual",
          "UVM Slides used in the Course"
        ],
        "Configuring Toolchain for Development": [
          "How to get Vivado IDE",
          "Vivado LIC File",
          "Configuring Toolchain",
          "Code",
          "Common Warning : Simulation object is not Tracable",
          "Common Error : boost::filesystem::remove",
          "Finding Errors in Code",
          "Understanding Reporting Mechanism",
          "Using Reporting Mechanism in Vivado",
          "Code",
          "Important Facts and Terminology",
          "Printing Variable values with Reporting Mechanism",
          "Assignment 1",
          "Creating Table",
          "Code",
          "Fundamentals of structure",
          "Code",
          "Fundamentals of Class",
          "Code",
          "Important Facts and Terminology",
          "Understanding Extended Class",
          "Code",
          "Important Facts and Terminology",
          "Decoding our Code",
          "Assignment 2",
          "Important Facts and Terminology"
        ],
        "Getting Started with Base Class": [
          "Understanding Polymorphism",
          "Code",
          "Understanding Factory Usage part 1",
          "Code",
          "Understanding Factory Usage part 2",
          "Understanding Factory Usage part 3",
          "Code"
        ],
        "Base Class": [
          "Understanding Classes",
          "Understanding usage of UVM_OBJECT class",
          "Code",
          "Assignment 3",
          "Understanding usage of UVM_COMPONENT",
          "Code",
          "Assignment 4",
          "Using Create() method instead of new()",
          "Code",
          "Using object_utils and printing specific data on Console",
          "Code",
          "Summary",
          "Rule",
          "RULE",
          "Using Configuration Method to Change Verbosity Level : UVM_COMPONENT",
          "Code",
          "Assignment 5",
          "Using Configuration Method to Change Verbosity Level : UVM_OBJECT",
          "Code",
          "Assignment 6",
          "Rule",
          "Rule"
        ],
        "Sequence_item": [
          "Creating UVM_SEQUENCE_ITEM example 1",
          "Code",
          "Adding Constraints",
          "Creating UVM_SEQUENCE_ITEM example 2",
          "Code",
          "Understanding reusability",
          "Code",
          "Assignment 7",
          "Assignment 8"
        ],
        "Interprocesss Communication": [
          "Understanding UVM Phases",
          "Understanding end_of _elaboration_phase",
          "Code",
          "Reading uvm_common_phase.svh",
          "uvm_common_phase.svh file",
          "Summary of UVM phases",
          "Simple Producer Consumer Model",
          "Code",
          "Summary of TLM blocking Port",
          "Assignment 9",
          "Assignment 10",
          "Working with Transaction data in TLM Blocking Port",
          "Code",
          "Replacing global_stop_request",
          "Code",
          "Observing output in compact format",
          "Code",
          "Independent Multiple TLM Blocking Port P1",
          "Incorrect Way Code",
          "Correct Way Code",
          "Using TLM_FIFO part 1",
          "Code",
          "Using TLM_FIFO part 2",
          "Code",
          "Using TLM_analysis port p1",
          "Code",
          "Using TLM Analysis Port p2",
          "Code",
          "Assignment 11",
          "Important Facts and Terminology",
          "Understanding Interface p1",
          "Code",
          "Understanding Interface p2",
          "Code",
          "Understanding Simple Monitor and Scoreboard scenario",
          "Code",
          "Understanding uvm_config_db",
          "Code",
          "Typical format of the usage of uvm_config_db",
          "Example on usage of uvm_config_db",
          "Code",
          "Assignment 12",
          "Getting started with Sequencer",
          "Code"
        ],
        "Summary and Projects": [
          "Complete Testbench : 4-bit adder",
          "Code",
          "Complete Testbench : 4-bit adder Tweaking P1",
          "Complete Testbench : 4-bit adder Tweaking P2",
          "Code",
          "Summary : Skeleton",
          "Summary : Phasing",
          "Assignment 13",
          "Complete Testbench : 8-bit RAM",
          "Code",
          "Developing Scoreboard Check P1",
          "Code",
          "Developing Scoreboard Check P2",
          "Code"
        ],
        "Common Error": [
          "VRFC 10 - 3006"
        ]
      },
      "requirements": [
        "Some exposure to Verilog and System Verilog"
      ],
      "description": "Writing Verilog test benches is always fun after completing RTL Design. You can assure clients that the design will be bug-free in tested scenarios. As System complexity is growing day by day, System Verilog becomes a choice for verification due to its powerful capabilities and reusability helping verification engineers quickly locate hidden bugs. The System Verilog lags structured approach whereas UVM works very hard on forming a general skeleton. The addition of the configuration database Shifts the way we used to work with the Verification Language in the past. Within a few years, verification engineers recognize the capabilities of UVM and adopted UVM as a defacto standard for the RTL Design verification. The UVM will have a long run in the Verification domain hence learning of UVM will help VLSI aspirants to pursue a career in this domain.\nThe course will discuss the fundamentals of the Universal Verification Methodology. This is a Lab-based course designed such that anyone without prior OOPS or system Verilog experience can immediately start writing UVM components such as Transaction, Generator, Sequencer, Driver, monitor, Scoreboard, Agent, Environment, Test. Numerous coding exercises, projects, and simple examples are used throughout the course to build strong foundations of the UVM.",
      "target_audience": [
        "Anyone interested in learning Design Verification Testbenches with UVM"
      ]
    },
    {
      "title": "Embedded Linux Step by Step Using Beaglebone Black",
      "url": "https://www.udemy.com/course/embedded-linux-step-by-step-using-beaglebone/",
      "bio": "Learn ARM Linux systems, Embedded Linux building blocks ,Busybox, Beaglebone interfacing Projects and much more",
      "objectives": [
        "Understanding ROM –Uboot-Kernel boot process on Linux-ARM systems and Testing",
        "Kernel, Bootloaders compilations Step-by-Step and testing on Beaglebone Hardware",
        "U-Boot, MLO, SPL, explanation and Testing",
        "Understanding various sub systems of AM335x SOC such as GPIOs, I2C, MMC, boot modes ,etc",
        "Understanding platform devices and how it works",
        "Understanding ARM-board configuration files",
        "Linux device Tree",
        "Understating various boot modes of AM335x",
        "eMMC OS updating and booting new Debian OS",
        "Serial booting (UART)",
        "TFTP booting",
        "NFS booting",
        "Beaglebone Networking",
        "Busybox compilations and Testing",
        "Configuring and using Buildroot on Beablebone",
        "Writing uEnv dot txt from scratch and Testing",
        "Using I2C tools on BBB",
        "Hardware interfacing projects and 'C' application development using Eclipse IDE",
        "GPIO programming",
        "Interfacing external LEDs, 7 segment displays and code development",
        "Interfacing LCD and related projects",
        "Interfacing MPU6050 sensor and tilt sensing",
        "EEPROM programming"
      ],
      "course_content": {
        "Introduction : BBB board and SOC": [
          "About the instructor",
          "Important Note",
          "overview",
          "FAQ",
          "Additional components list",
          "Download Course materials",
          "BeagleBone Black(BBB) Board Introduction",
          "BeagleBone Black(BBB) Board Introduction contd.",
          "Connecting BBB to PC using external USB TO UART Converter",
          "Using Minicom",
          "Using Teraterm and Putty",
          "Getting started with BBB and initial Setup",
          "BBB Web interface",
          "Test Drive-1"
        ],
        "Installing “Ubuntu-16” on virtual box": [
          "Using virtual machine",
          "Installing “Ubuntu-16” on virtual box –Part 1",
          "Installing “Ubuntu-16” on virtual box –Part 2",
          "communicating with BBB"
        ],
        "AM335x Functional block Overview": [
          "AM335x Functional block Overview Part 1",
          "AM335x Functional block Overview Part 2",
          "Test Drive-2"
        ],
        "Beaglebone Linux booting Process": [
          "What do we need to successfully boot linux on BBB ?",
          "BBB boot options",
          "BBB Linux boot sequence discussion: ROM and SPL",
          "BBB Linux boot sequence discussion-MLO/SPL job",
          "Why AM335x RBL cannot load the Uboot directly to DDR?",
          "Booting RBL and MLO on BBB",
          "Testing MLO image on BBB",
          "Testing U-boot image on BBB",
          "BBB Linux boot sequence discussion-uboot",
          "Decoding U-boot Header of uImage Manually",
          "Linux boot sequence discussion-Boot strap loader part 1",
          "linux boot sequence discussion-Boot strap loader-part 2",
          "linux boot sequence discussion - Kernel Entry",
          "Linux boot sequence discussion - launch of 'INIT'",
          "Test Drive - 3"
        ],
        "BBB eMMC update": [
          "eMMC booting- Big picture",
          "eMMC update-Downloading latest OS image",
          "Enabling Internet on BBB"
        ],
        "Booting BBB from SD card": [
          "Booting the BBB via SD card with the latest images",
          "Login in to the BBB"
        ],
        "Linux Device Tree": [
          "Why Linux device tree is introduced ??",
          "Test Drive - 4"
        ],
        "uEnv.txt and Initramfs": [
          "Writing uEnv.txt file from scratch part 1",
          "Writing uEnv.txt file from scratch part 2",
          "Writing uEnv.txt file from scratch part 3",
          "Writing uEnv.txt file from scratch part 4",
          "Writing uEnv.txt file from scratch part 5",
          "Challenge",
          "About RFS",
          "Generating \"initramfs\" using RFS",
          "Test Drive-5"
        ],
        "Booting BBB over Serial Port": [
          "Serial booting Required Setup",
          "Serial boot - big picture",
          "Important Note",
          "Testing Serial boot part 1",
          "Testing Serial boot part 2",
          "Test Drive-6"
        ],
        "Booting BBB Over TFTP protocol": [
          "TFTP booting Required Setup",
          "TFTP boot - big picture",
          "Preparing TFTP host",
          "Testing TFTP boot on BBB",
          "Challenge-1",
          "Challenge-2"
        ]
      },
      "requirements": [
        "Basic knowledge of linux commands may be required",
        "Basic 'C' Programming knowledge may be required but not mandatory"
      ],
      "description": "Update: English closed captions have been added, transcript available\nUpdate # 1: MPU6050 interfacing and tilt sensing tutorials added\nUpdate # 2: LCD interfacing tutorials added\n\n\nThe course is designed for Beginners to Advanced audience.\nA comprehensive and practical course on learning Embedded Linux systems on Beaglebone hardware\n100% hands-on and step by step explanation using hardware\n\n\nBrief Description:\nThis Course Demystifies learning Embedded Linux Systems and running embedded Linux and its various components on the Beaglebone hardware. See above \"what will I learn?? \" section to understand what this course promises!\n\n\nInteresting Hardware interfacing projects and well explained inner working details step by step\n\n\n'C' application development using Eclipse IDE for your Beaglebone hardware\n\n\nAt the end of each section students will have exciting assignments to complete which strengthen their understanding deeply\n\n\nEmbedded Linux quizzes to test your Understanding.\n\n\nQ/A support\n\n\nMy promise!\nI will personally answer your questions about this material, either privately or in a group discussion. If you are in any way not satisfied, for any reason, you can get, No questions asked a full refund from Udemy within 30 days. But I am confident you won't need to. I stand behind this course 100% and am committed to helping you.\n\n\nLearning order of FastBit Embedded Brain Academy Courses,\nIf you are a beginner in the field of embedded systems, then you can take our courses in the below-mentioned order.\nThis is just a recommendation from the instructor for beginners.\n1) Microcontroller Embedded C Programming: absolute beginners(Embedded C)\n2) Embedded Systems Programming on ARM Cortex-M3/M4 Processor(ARM Cortex M4 Processor specific)\n3) Mastering Microcontroller with Embedded Driver Development(MCU1)\n4) Mastering Microcontroller: TIMERS, PWM, CAN, RTC,LOW POWER(MCU2)\n5) Mastering Microcontroller: STM32-LTDC, LCD-TFT, LVGL(MCU3)\n6) Embedded System Design using UML State Machines(State machine)\n7) Mastering RTOS: Hands-on FreeRTOS and STM32Fx with Debugging(RTOS)\n8) ARM Cortex M Microcontroller DMA Programming Demystified(DMA)\n9) STM32Fx Microcontroller Custom Bootloader Development(Bootloader)\n10) Embedded Linux Step by Step using Beaglebone Black(Linux)\n11) Linux device driver programming using Beaglebone Black(LDD1)\n\n\nOther programming courses\n1) Master The Rust Programming Language : Beginner To Advanced",
      "target_audience": [
        "Students who are looking to explore the world of Linux on ARM",
        "Professionals or students work on Embedded linux systems"
      ]
    },
    {
      "title": "Allen Bradley Micro850 PLC with IIoT",
      "url": "https://www.udemy.com/course/allen-bradley-micro850-plc-with-industrial-examples/",
      "bio": "Learn PLC programming from Scratch using Connected Component Workbench and experience how to connect PLC to IIoT World",
      "objectives": [
        "PLC Wiring and fundamentals using Micro850 PLC",
        "PLC Programming using Connected Component Workbench (Free PLC Software)",
        "Analog IO Programming",
        "Interfacing PLC with 3rd party softwares like Simumatik, SCADA, Node-RED via MODBUS TCP/IP and APIs"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience needed",
        "The course starts from Scratch"
      ],
      "description": "This course has been created with lots of love and passion to teach PLC Programming from Scratch using Micro850 PLC and Connected Component Workbench (CCW). CCW is a free programming tool with PLC Simulator to practice PLC logics along with the course. So you do not have to invest in any PLC software or hardware. You can practice what you learn right away.\n\n\nNow only you will learn PLC Programming but also how to interface PLC with HMI, Node-RED, MQTT broker (local), MQTT Broker in the Cloud (Microsoft Azure and HiveMQ).\n\nAfter learning this course you would be able to:\n\n\nProgram the Micro850 PLC for basic industrial applications\nWire the PLC controller with sensors and actuators\nAdd and configure hardware modules to Micro850 PLC\nInterface Micro850 PLC with 3rd party devices using MODBUS TCP/IP\nInterface Micro850 PLC with Node-RED to build dashboard for I/Os\nInterface Micro850 PLC with Simumatik using APIs for 3D simulation\nInterface Micro850 PLC with Ignition SCADA using MODBUS TCP/IP\nProgram the applications using Analog IOs\nConnect your PLC to Microsoft Azure or HiveMQ via MQTT\nThe following are the hardware devices used to explain various PLC commands:\n\n\nMicro850 PLC model: 2080-LC50-24QWB\n2 Channel Analog Input\n2 Channel Analog Output\nThe following are the software used to explain various PLC commands:\n\n\nConnected Component Worbench (CCW): Free\nNode-RED: Free\nSImumatik: 30 days trial version\nFACTORY IO: 30 days trial version\nMicrosoft Azure IoT Hub (Free account)\nHiveMQ (Free account)\nThe course material is in the form of HQ videos, articles, presentations in pdf format, Challenges with solutions. You will get course completion certificate after successfully completing the course",
      "target_audience": [
        "Beginers in PLC Programming",
        "Industrial Technicians/Engineers,",
        "Production, Maintenance or Mechatronic Engineers"
      ]
    },
    {
      "title": "ESP32 Bootcamp: A Step By Step Practical Approach",
      "url": "https://www.udemy.com/course/esp32-esp-espboard-program-course-boot-camp/",
      "bio": "From Zero To Professional in ESP32, Enter the Internet of Things world with this Bootcamp",
      "objectives": [
        "Introduction to IoT with ESP32",
        "Program ESP32 without Coding",
        "ESP32 and Arduino",
        "IoT Smart Garden with ESP32 and Blynk",
        "ESP32 Databases Control and Display Anything Anywhere",
        "ESP32 Web Server",
        "ESP32 Email Alert Based on Sensors Reading"
      ],
      "course_content": {},
      "requirements": [
        "Basic experience in Electronics",
        "A Will to apply, not just watch"
      ],
      "description": "From Zero To Professional in ESP32, Enter the Internet of Things world with this Bootcamp\n\n\nIn this ESP32 Bootcamp, you will learn in a Step-By-Step practical approach, this course will guide you through creating your first Internet-connected electronics project using a Wi-Fi enabled board, which is the famous ESP32.\n\n\nWhy you should take this course?\nGuide to ESP32 features\nLearn ESP32 programming from scratch by following step by step practical tutorials with clear explanations.\nHands-on tutorial with clear explanation\nPractical approach for beginners to have a good understanding of the topic.\nUnderstand ESP32 programming to control the RGB LED lights, Wifi module, BLE module through Arduino IDE.\nExplore the Internet of Things world with the practical examples to build your own IoT projects.\nGet familiarized with using arduino libraries and develop custom libraries in order to make your projects stand out.\nDevelop apps for Android or IOS.\n\n\nYou will learn the elaborate workflow of hardware and software that makes smart objects succeed through Basic Step-By-Step Practical examples of the most common things you want to build.\n\n\nWhat you learn in this course:\nA quick introduction to the Internet of Things World with ESP32.\nHow to write your very first code.\nHow to program this board without coding, if you are not a fan of coding, this will help you start making great projects without writing a single line of code.\nHow you can easily connect ESP32 and Arduino board together and make use Of the power of the Arduino hardware and how to implement this to exceed the number of inputs and outputs and your board.\nA practical example, which is the smart garden Internet of Things ESP32 based project, and we will use the Blynk app to control this project.\nESP32 database control and how you can display anything anywhere.\nCreate a website and display different information from your ESP board\nHow to make a Web server using ESP32 and how you can easily get email alerts based on sensor reading using ESP32.\nThere are other surprises inside the scores, and I am sure that after taking this course you will gain a lot of knowledge and you can easily start coding your ESP board and make any project that comes to your mind.\nWe provide 24/7 support for our students, so if you have any questions, you can easily contact us using our profile here.\n\n\nA Different IoT Power and Performance, Use ESP32 microcontroller to MAKE IoT projects to unleash your creativity\nThis is a complete bundle to get you started in IoT\nIoT Internet of Things Crash Course: Step by step is a course specially created for Electronic Geeks & Engineers who want to take their Electronics and Microcontroller Projects to the next level, adding Wifi, Bluetooth connectivity and more processor power while maintaining battery life\nESP32 Email Alert Based on Sensors Reading: Send Emails using ESP32 and Arduino IDE coding easily and effectively and unleash the power of coding and ESP32 Hardware\nESP32 Web Server: Step by Step Course to create your very own standalone web server with ESP32 that controls output and display Data.\nESP32 + Databases to Control Anything Anywhere: Step by Step Course to help you create your first internet-connected electronics projects using ESP32 wifi breakout board\nIoT Internet of Things Crash Course: Step by step is a course specially created for Electronic Geeks & Engineers who want to take their Electronics and Microcontroller Projects to the next level, adding Wifi, Bluetooth connectivity and more processor power while maintaining battery life  <<<\nWelcome to this course.\nThe course lesson will explain “How to work on ESP32 Board” by using C Language and the famous Arduino IDE development environment. This course will work best for you if your basic knowledge of Electronics and Arduino. You will learn how to interface the ESP32 Board with your Computer and Control it in no time.\nESP32 can be used in your Engineering projects, Industrial Projects, or IoT Home Automation related projects.\nWhy Learn ESP32?\nIf you an Engineering or Science student you might come across projects in which you want to control or monitor via internet, ESP32 with it's Robust Design, Ultra-Low Power Consumption, High Level of Integration and Hybrid Wi-Fi & Bluetooth Chip is the best fit to get started in Internet of Things World.\nWe will explore:\nDigital Output: Blinking a LED\nDigital Input: Reading a Touch Sensor\nAnalog Input: Reading a variable voltage from a potentiometer\nAnalog Output: Controlling a LED brightness\nAnalog Output: Controlling a Servo Position\nReading Temperature/Humidity Data with a Digital sensor\nConnecting to the Internet and getting local time\nReceiving data from a simple local web page, turning on/off a LED\nTransmitting data to a simple local webPage\nAt the end of this course, you can create Innovative IoT Projects. The only thing that you need to do is THINKING, WIRING & CODING.\n------------------\n>>> ESP32 Email Alert Based on Sensors Reading: Send Emails using ESP32 and Arduino IDE coding easily and effectively and unleash the power of coding and ESP32 Hardware <<<\nWelcome to this course.\nThe course lesson will explain “ESP32 Email Alert Based on Sensors Reading” by using Arduino IDE coding and  Arduino Environment. This course will work best for you if your basic knowledge of Electronics and Arduino. You will learn how to interface the ESP32 with your Computer and Control it using Arduino IDE to read sensor data and send emails accordingly.\nESP32 can be used in your Engineering projects, Industrial Projects, or Home Automation related projects.\nYou’ll learn how to:\nSet up electronic circuits\nSet up the Communication protocol on ESP32\nWrite basic applications for ESP32 in Arduino to control basics functions\nAdvanced Control sensors and email automation using ESP32\nHow to Integrate ESP32 sensors and switches\nWhy Learn ESP32?\nIf you an Engineering or Science student you might come across projects in which you want Physical interaction with your computer system & to display the operations on PC Screen\nESP32 is one of the cost-effective tools which you can create or purchase & starts programming to interact with physical elements with your logic & create results the way you want.\nAnd using Arduino IDE, you can fully control the ESP32Board and the various process parameters like Motor Speed, LED ON/OFF Feedback, Temperature Signal.\nAt the end of this course, you can create Innovative Projects. The only thing that you need to do is THINKING, WIRING & CODING.\n---------------------\n>>> ESP32 Web Server: Step by Step Course to create your very own standalone web server with ESP32 that controls output and display Data. <<<\nWelcome to this course.\nThe course lesson will explain “How to create a webserver” by using Arduino IDE Programming Environment. This course will work best for you if your basic knowledge of Electronics and Arduino. You could connect sensors to an Arduino and control everything using a simple webpage that you will create in this course.\nYou could also control a webserver that is mobile responsive and can be accessed with any device that has a browser on the local network and trigger devices such as Motors, LEDs, Relays, and more.\nWhy You Should Join this course?\nBecause ESP32 Board gives you much data control, you can basically control anything you can imagine using ESP32 Webserver\nYou’ll learn how to:\nCreate A Simple ESP32 Web Server In Arduino IDE\nESP32 Operating Modes\nStation (STA) Mode\nSoft Access Point (AP) Mode\nWiring – Connecting Devices to ESP32\nConcept Behind Controlling Things From ESP32 Web Server\nESP32 as HTTP Server using WiFi Access Point (AP) mode\nAccessing the Web Server in AP mode\nDetailed Code Explanation\nESP32 as HTTP Server using WiFi Station (STA) mode\nAccessing the Web Server in STA mode\n\n\nAt the end of this course, you can create Innovative Projects. The only thing that you need to do is THINKING, WIRING & CODING.\n----------------------------\n>>> ESP32 + Databases to Control Anything Anywhere: Step by Step Course to help you create your first internet-connected electronics projects using ESP32 wifi breakout board. <<<\nWelcome to this course.\nThe course lesson will explain “How to control stuff from all around the world” by using Arduino IDE Programming Environment. This course will work best for you if your basic knowledge of Electronics and Arduino. You could connect sensors to an Arduino and send the values to a database on the internet. Then you could enter a website that you will create in this course to see the values from anywhere in the world with an internet connection. You are no longer stuck controlling your devices locally.\nYou could also add boolean buttons on to your website and control stuff connected to the Arduino such as Motors, LEDs, Relays and more\nWhy You Should Join this course?\nBecause IoT and controlling devices via Internet are one of the top trending topics nowadays and ESP32 Board is one of the best boards that can help you achieve Internet control with tools that you already have.\nYou’ll learn how to:\nCreate A Simple ESP32 HTTP Request In Arduino IDE\nGet a FREE Hosting server and domain name\nCreate a PHP script to insert data into MySQL\nDisplay data on a web page\nCreate MySQL database to store readings\nGet Sensors Reading\n\n\nAt the end of this course, you can create Innovative Projects. The only thing that you need to do is THINKING, WIRING & CODING.",
      "target_audience": [
        "Anyone Interested in Entering the World of Internet of Things",
        "Anyone Interested in Mastering ESP32",
        "Anyone Interested in Making ESP32 Based Projects"
      ]
    },
    {
      "title": "Unleash the Power of Arduino with LabVIEW!",
      "url": "https://www.udemy.com/course/labview-arduino-interfacing-labview-with-arduino-via-linx/",
      "bio": "Bring your Arduino projects to life on your PC screen with LabVIEW's graphical system design.",
      "objectives": [
        "Design Arduino Circuits",
        "Learn Arduino Programming & Interfacing",
        "Program Arduino using C Language",
        "Design LabVIEW Interface",
        "Program Using LabVIEW",
        "Connect LabVIEW with Arduino",
        "Learn serial communication basics in LabVIEW",
        "Learn serial communication basics in Arduino"
      ],
      "course_content": {},
      "requirements": [
        "Basic Knowledge of Digital Electronics"
      ],
      "description": "A Fusion of Two Giants:\nElevate your Arduino capabilities by integrating it with LabVIEW, a powerful graphical development environment. In this course, you'll journey through the process of linking the microcontroller prowess of Arduino with the visual interface of LabVIEW using LINX, allowing for richer project development and visualization.\nCourse Highlights:\nEnd-to-End Integration: Learn the step-by-step process of interfacing Arduino with LabVIEW, ensuring smooth communication between hardware and software.\nVisualize & Control: Create intricate graphical representations of your Arduino circuits within LabVIEW, allowing for real-time monitoring and control.\nHands-On Learning: Dive into practical sessions where you'll design, build, and test Arduino-LabVIEW integrations.\nBoost Your Projects: Whether it's for academic, industrial, or home automation projects, gain the expertise to elevate your creations.\nWhy Choose This Course?\nPractical Oriented: Embrace a learning approach centered around real-world applications and hands-on exercises.\nExpert Guidance: Navigate the nuances of Arduino-LabVIEW interfacing under the mentorship of seasoned instructors.\nCommunity & Support: Join an enthusiastic community of learners, share ideas, troubleshoot issues, and collaborate on projects.\nUnlock New Possibilities:\nImagine being able to control real-world objects with a graphical interface on your PC or visualizing sensor data in rich graphical formats. This course bridges the gap between the physical and digital worlds, empowering you to create dynamic projects with enhanced user experiences.\nEnrollment Benefits:\nComprehensive Modules: Delve deep into topics with well-structured lessons.\nResource Access: Gain access to valuable downloadable resources and reference materials.\nLifetime Updates: Stay abreast of advancements with perpetual access to course content and updates.\nOur Commitment:\nYour learning journey is paramount to us. If you feel this course isn't the right fit, we offer a 30-day money-back guarantee. We're committed to providing you with the best learning experience possible.\nTake the Leap!\nHarness the combined potential of Arduino and LabVIEW. Dive into a world where microcontroller functionality meets visual brilliance. Enroll today and redefine how you approach your Arduino projects.",
      "target_audience": [
        "Engineering Students - Electronics, Electrical & Computer Science",
        "High School Science Students",
        "Electronic Geeks, Hobbiest & Art Students",
        "Arduino Geeks"
      ]
    },
    {
      "title": "Arduino Projects",
      "url": "https://www.udemy.com/course/arduino-course/",
      "bio": "Make Arduino Projects : +15 Arduino projects for beginners and kids that you can make at home",
      "objectives": [
        "Make a Robot Arm and control it with Arduino",
        "Turn on the light with your voice",
        "Make a Line Follower Robot",
        "Turn on a 220V load like a fan when the temperature exceeds a certain limit",
        "Turn on and off an LED using Arduino",
        "Make obstacle avoiding robot",
        "Read the value of temperature using the temperature sensor (LM35) and Arduino",
        "Control 220V load using Rely Kit and Arduino",
        "Turn on an LED in case the object in front of line follower sensor is white",
        "Control a robot car to move in predetermined directions",
        "Control an LED using Smartphone and bluetooth module and Arduino",
        "Control Robot car using Smartphone and bluetooth module and Arduino",
        "Turn on and off the light using the Smartphone",
        "Send SMS to your phone when the temperature exceeds a certain limit",
        "Make lots of Cool stuff using Arduino",
        "Control Servo motor using Arduino",
        "Measure the distance in front of the robot car using ultrasonic sensor"
      ],
      "course_content": {
        "Basics Electronics and programming": [
          "Introduction to Basics Electronics and programming chapter",
          "Required Hardware/Software",
          "Turn on and off an LED using the Arduino",
          "Temperature sensor (LM35) with Arduino",
          "Relay kit with Arduino",
          "Turn 220V load on when the temperature exceeds certain limit"
        ],
        "Line Follower Robot": [
          "Introduction to Line Follower Robot chapter",
          "Required component",
          "Line follower sensor with Arduino",
          "Motor Driver (L293) with Arduino",
          "Line Follower Robot"
        ],
        "Smart Robot": [
          "Introduction to Smart Robot chapter",
          "Required Component",
          "Bluetooth Module (HC-05) with Arduino",
          "Control Robot car with Smartphone"
        ],
        "Connect Android phone with Arduino": [
          "Introduction to Connect Android phone with Arduino chapter",
          "Turning on and off the lighting of your room using the Android phone",
          "Send a short message to your mobile when the temperature exceeds a certain limit",
          "Turn on and off the light of your room with your voice"
        ],
        "Obstacle avoiding Robot": [
          "Introduction & Required component",
          "Control Servo Motor using Arduino",
          "Read the Distance using Ultrasonic sensor and Arduino",
          "How to use functions to simplify the code",
          "Obstacle avoiding Robot"
        ],
        "DIY Robot Arm": [
          "Introduction to Robot Arm and it's applications",
          "Servo Motor Calibration",
          "Base and Left side assembly",
          "Right side assembly and build the middle",
          "Attach Left side to Middle",
          "Attach Right side with Middle and base",
          "Add Left and Right forearm and Right forearm",
          "Build the gripper and attach it to the Robot Arm",
          "Add Voltage Regulator 7805",
          "Final Project (Transporter)"
        ],
        "let's have some fun with Arduino :)": [
          "Let's play games with Arduino"
        ],
        "Start your career as Robot & Arduino instructor for kids": [
          "Introduction to Robot Instructor chapter",
          "Business model canvas for the Robot Instructor",
          "what is the best Business model for Robot Instructor?",
          "How much you will invest to test the market ?",
          "Raise awareness about your course"
        ]
      },
      "requirements": [
        "Basic knowledge about Electricity (Volt, Current, Resistance)"
      ],
      "description": "Arduino is an open source computer hardware and software that give you the ability to make a lot of cool projects.\nCan you turn on the light using the Smartphone? Yes you can with Arduino and Bluetooth module which cost less than 10$\nCan you turn on the light with your voice? Yes you can with Arduino and Bluetooth module and your Android phone Yes you can\nCan you send SMS to your phone when the temperature exceeds a certain limit?Yes you can with Arduino and temperature sensor which cost less than 10$\nCan you make a robot car and control it using a Smartphone? with Arduino and Bluetooth module which cost less than 10$ Yes you can\nCan you make a robot car that follows a line? with Arduino and line follower sensor Yes you can\nCan you turn on the light/fan/alarm automatically when the temperature exceeds a certain limit? with Arduino and a temperature sensor which cost less than 10$ Yes you can\nA lot of cool projects can be done with Arduino\nIn this course i clarify how to make these Arduino projects:\n\n1 - Turn on and off an LED using Arduino.\n2 - Read the value of temperature using the temperature sensor (LM35) and Arduino\n3 - Control 220V load using Rely Kit and Arduino\n4 - Turn on a 220V load like a fan when the temperature exceeds a certain limit\n5 - Turn on an LED in case the object in front of line follower sensor is white\n6 - Control a robot car to move in predetermined directions\n7 - make a Line follower robot which is basically a robot designed to follow a 'line' or path already predetermined by the user\n8 - Control an LED using Smartphone and bluetooth module and Arduino\n9 - Control Robot car using Smartphone and bluetooth module and Arduino\n10 -Turn on and off the light using the Smartphone\n11 -Send SMS to your phone when the temperature exceeds a certain limit\n12 -Turn on and off the light with your voice\n13 -Control Servo motor using Arduino\n14 -Measure the distance in front of the robot car using ultrasonic sensor\n15 -Make obstacle avoiding robot\nThe Arduino project course is updated continuously so make sure to check the updates every month.\nIt's my pleasure answering all of your questions so please don't hesitate to ask me about anything in the course :)",
      "target_audience": [
        "Kids over 7 years that likes to Make Lots of Cool Stuff",
        "Adults like to make an innovative project with the Arduino"
      ]
    },
    {
      "title": "PIC Microcontroller: Advanced Training Course",
      "url": "https://www.udemy.com/course/pic-microcontroller-advanced-training-course/",
      "bio": "You will enter Microcontroller Advance World, and together we will make YOU a Professional Geek.",
      "objectives": [
        "Move to the next level in Programming PIC Microcontroller",
        "Make your Codes more Professional by Learning advance Techniques",
        "Program Interrupt using Microcontroller",
        "Program Timer and Counter using Microcontroller",
        "Program Analog to Digital Conversion using Microcontroller",
        "Program Serial Communication between different devices and PIC Microcontroller",
        "Program and Learn Pulse Width Modulation using PIC Microcontroller",
        "Master new skills and stop playing with loops, TRIS and PORT Registers"
      ],
      "course_content": {},
      "requirements": [
        "Basic Knowledge in PIC Microcontroller"
      ],
      "description": "Welcome to PIC Microcontroller: Advanced Training Course.\nThe PIC Microcontroller is a widely used, easily programmable controller that can be adapted to fit any number of applications. Though originally designed for hobbyists, the PIC Microcontroller has also proved itself as an invaluable tool in the commercial world.\nWith this Advanced Training Course, you will learn about the PIC's powerful features, including fast processing capabilities and versatile applications.\nWhy You Should Take This Course:\nBecome a Pro: Gain confidence to chat with other geeks about advanced microcontroller topics.\nStay Updated: Learn the latest developments in microcontrollers.\nMaster Programming: Master advanced high-level programming languages.\nIn-Depth Knowledge: Discover what makes a microcontroller tick.\nEveryday Applications: Learn languages used in everyday life.\nExpert Support: Get your questions answered by experts and fellow learners.\nFor Everyone: Suitable for programmers and engineers of all ages and backgrounds, including complete beginners.\nStudent Testimonials:\nKamauros: \"That's true 5-star course explaining the most difficult basics of PIC nobody wants to explain.\"\nBurhan Mohayeddin: \"The lessons are short and very informative and contain the important things. Thank you very much.\"\nDakota Dawson-Marmolejo: \"It's very in-depth. Stick with the lesson and you'll be rewarded.\"\nSamuel Kariuki: \"The instructor is clear and straight to the point. I love his mode of delivery.\"\nJames Clapp: \"He is very detailed and does not assume you already know it even if you do. Takes his time and gives you option tracks for learning.\"\nCourse Highlights:\nInteractive teaching tools such as demonstrations and simulations for hands-on learning.\nLearn to program and debug PIC microcontrollers in real-world scenarios.\nAdvanced programming techniques to build complex systems with less code and effort.\nCourse Contents:\nAdvanced Programming Techniques: Learn to write efficient and powerful code for PIC microcontrollers.\nInterrupts: Master the use of interrupts to handle asynchronous events.\nSerial Communication: Understand how to implement serial communication for data transfer.\nTimers and Counters: Learn to use timers and counters with registers.\nPulse Width Modulation: Implement PWM for controlling motors and other peripherals.\nWhat You Will Learn:\nAdvanced PIC microcontroller programming techniques\nEfficient use of interrupts, serial communication, timers, and counters\nHow to implement pulse width modulation\nHands-on projects to solidify your learning\nWho is This Course For:\nProgrammers and engineers of all levels\nHobbyists looking to deepen their knowledge of microcontrollers\nStudents seeking to enhance their skills in advanced microcontroller programming\nRequirements:\nNo prior experience required\nA PIC microcontroller and several low-cost components\nA computer with internet access\nWillingness to learn and experiment",
      "target_audience": [
        "Anyone with a curiosity for making electronics",
        "People with no experience in electronics",
        "People with an intermediate knowledge of electronics",
        "Children over 12 years old"
      ]
    },
    {
      "title": "Introduction to Microsoft Azure IoT",
      "url": "https://www.udemy.com/course/introduction-to-microsoft-azure-iot/",
      "bio": "Learn to build cool Internet of Things (IoT) Projects using Microsoft Azure Cloud services.",
      "objectives": [
        "Microsoft Azure Cloud services",
        "Internet of Things (IoT)",
        "Raspberry Pi",
        "SparkFun ESP32 Thing",
        "Python",
        "Arduino IDE"
      ],
      "course_content": {
        "Getting started with Microsoft Azure IoT": [
          "Introduction to the Course",
          "Microsoft Azure IoT Architecture",
          "Creating & Exploring your Microsoft Azure free account",
          "Road-map of our Course ahead",
          "Quiz-1"
        ],
        "Getting started with our Warm-up Project": [
          "Getting started with your Azure IoT Hub & Setting up your SparkFun ESP32 Thing",
          "Code & Understand your Arduino sketch for sending data to your Azure IoT Hub",
          "Important Update - Azure IoT Python SDK Version 1.X.X is deprecated",
          "Setting up your R-Pi & Hook-up the HC-SR04 Ultra-Sonic sensor to your R-Pi",
          "Code &Understand your Python script and View the Sensor data in the Azure portal",
          "Quiz - 2"
        ],
        "Getting started with our Course Project Part - 1": [
          "Working with Azure services",
          "Setting up your Raspberry Pi to subscribe to your Service Bus Topic",
          "Creating a Shared Access Policy/Key for the Service Bus Namespace",
          "Code & Understand the Python script for implementing Triggering of an LED",
          "Scheduling an Action Part - 1",
          "Scheduling an Action Part - 2",
          "Quiz - 3",
          "Assignment"
        ],
        "Getting started with our Course Project Part - 2": [
          "Sending User Notifications Part - 1",
          "Sending User Notifications Part - 2",
          "Visualizing the Sensor data Part - 1",
          "Visualizing the Sensor data Part - 2",
          "Quiz - 4"
        ],
        "Understanding the Security aspects of Microsoft Azure IoT Platform": [
          "Understanding the Security aspects of Microsoft Azure IoT Hub",
          "Understanding the Security Tokens",
          "Set up X.509 Security in your Azure IoT Hub",
          "Quiz - 5"
        ]
      },
      "requirements": [
        "Basic knowledge of working with the Raspberry Pi & the SparkFun ESP32 Thing.",
        "Basic knowledge about the Linux shell commands & Python programming language",
        "Familiarity with programming in the Arduino IDE"
      ],
      "description": "UPDATE JUNE 2022\nAzure IoT Python SDK Updated Installation\n\n\nHello learners, Welcome to MAKERDEMY’s \"Introduction to Microsoft Azure IoT\" course. If you are looking for that one course that will help you gain the confidence to learn Microsoft Azure IoT, you have come to the right place.\nWith numerous custom made illustrations and animations, we have set the standard in terms of production quality. All so that you can have a terrific learning experience.\nThis course is meant for anyone who wants to build real-world IoT applications using Microsoft Azure Cloud services.\nIf you are an engineer who wants to start working with one of the most popular cloud-based IoT platforms or a hobbyist looking to enter the world of the Internet of Things, you will find this course very useful. This is because we have tailored this course by giving equal importance to both the projects as well as the concepts.\nSo come join me in this introductory course on Microsoft Azure IoT. I am looking forward to being your instructor and hearing about all the wonderful projects you were able to build leveraging the cloud services provided by Microsoft Azure.\nWhat are the requirements or prerequisites for taking your course?\nBasic knowledge of working with the Raspberry Pi & the SparkFun ESP32 Thing.\nBasic knowledge about the Linux shell commands & Python programming language\nFamiliarity with programming in the Arduino IDE",
      "target_audience": [
        "An engineer who wants to start working with, one of the most popular cloud-based IoT platforms.",
        "A hobbyist looking to explore the world of the Internet of Things.",
        "A student who wants to build projects in IoT using Microsoft Azure Cloud services.",
        "Anyone with basic programming experience and an interest to learn."
      ]
    },
    {
      "title": "Embedded Systems with 8051 Micro Controller using Embedded C",
      "url": "https://www.udemy.com/course/embedded-systems-with-8051-micro-controller/",
      "bio": "Deep Dive into embedded systems with in-depth understanding of 8051 micro controller with embedded C programmings",
      "objectives": [
        "Quickly Learn Embedded Systems with 8051 and Embedded C Programming",
        "8051 Microcontroller",
        "Embedded C Coding",
        "Keil IDE",
        "Various Interfaces with 8051 like LCD, Stepper Motor, DC Motor, ADC and many more",
        "Barebone 8051 coding by understanding internal registers and how to configure them"
      ],
      "course_content": {
        "Introduction to Embedded Systems and 8051": [
          "Introduction to the Course",
          "Introduction to Embedded Systems",
          "Introduction to 8051 MicroController",
          "Writing First Program for 8051"
        ],
        "Keil -- IDE Installation on PC": [
          "Installation of Keil IDE",
          "First Project creation on Keil",
          "Simulations"
        ],
        "Input and Output Ports Interfacing with 8051": [
          "Concepts on Interfacing LEDs with 8051 Microcontroller",
          "Project based on LEDs Alternate on off",
          "Using \"For\" Loop"
        ],
        "Accepting Digital Inputs on 8051": [
          "Switch Interfacing with 8051",
          "Switch Exercises"
        ],
        "8051 Interfacing with DC Motor and Relay": [
          "Interfacing Relay with 8051 Part 1",
          "Interfacing Relay with 8051 Part 2",
          "Interfacing DC Motor with 8051 Part 1",
          "Interfacing DC Motor with 8051 Part 2"
        ],
        "Interfacing 16x2 Liquid Crystal Display (LCD) with 8051": [
          "Introduction To LCD",
          "Creating Schematics for LCD",
          "First Program On LCD",
          "LCD Up Down Counter",
          "LCD Interfacing in 4 Bit Mode"
        ],
        "Using UART (Serial Communication) on 8051 and Concepts of RS232": [
          "Using UART of 8051 Microcontroller Part 1",
          "Using UART of 8051 Microcontroller Part 2",
          "Using UART of 8051 Microcontroller Part 3",
          "Using UART of 8051 Microcontroller Part 4"
        ],
        "Using Timers on 8051": [
          "Using Timer on 8051 Part 1",
          "Using Timer on 8051 Part 2",
          "Using Timer on 8051 Part 3"
        ],
        "Timer as Counter": [
          "Timer as Counter"
        ],
        "Interfacing Analog to Digital Converter with 8051 and Read LM35 Sensor": [
          "Using External Analog to Digital Converter with 8051 - Part 1",
          "Using External Analog to Digital Converter with 8051 - Part 2",
          "Using External Analog to Digital Converter with 8051 - Part 3",
          "Interfacing LM35 Temperature Sensor with 8051 Using External ADC"
        ]
      },
      "requirements": [
        "Strong Desire to learn and excel in embedded systems",
        "Little background of electronics",
        "Willing to Learn 8051"
      ],
      "description": "Master Embedded Systems with the 8051 Microcontroller\nDo you want to build a career in embedded systems?\nThis course is your direct path to becoming a true embedded systems professional. Stop playing with simplified platforms. This is your chance to master the fundamental core of embedded programming by learning on the 8051, one of the most influential and widely used microcontrollers in history.\nThis isn't just another course; it's a hands-on, barebone coding experience from a 10-year veteran developer. You'll go beyond basic programming and learn to control the microcontroller at a register level—a skill that separates hobbyists from professionals.\nWhat makes this course unique:\nLearn from a Developer, Not a Trainer: Benefit from my 10+ years of experience and over 150 projects. I'll share practical considerations and real-world insights you won't find in a textbook.\nThe Holy Grail of Embedded Systems: Understand how to configure internal registers. Once you master this, you can pick up any microcontroller's datasheet and start coding from scratch.\nHands-On, Code-Driven Learning: This is not a theory class. We'll write tons of code and test it with a variety of peripherals, including:\nLEDs, Switches, Relays & LCD\nSensors (ADC & Temperature)\nMotors (Stepper & DC)\nPC Interfacing\nAccessible to Everyone: Even if you don't know C programming, this course has you covered with a brief yet powerful introduction.\nNo Hardware Needed: Don't have a development board? No problem. I've included simulation models for every single exercise so you can start learning immediately.\nI believe anyone can master technology. That's why I offer 25% of the course content as a free preview. Take a test drive and see for yourself. If it's a good fit, then enroll and start building your future.",
      "target_audience": [
        "Beginner, Students who are curious to learn Micro controller Programming",
        "College and University students",
        "Working Professionals willing to start studying embedded systems"
      ]
    },
    {
      "title": "Complete Arduino Course For Beginners",
      "url": "https://www.udemy.com/course/full-arduino-course-for-beginners/",
      "bio": "Learn Arduino starting from the beginning. Includes tons of sample code, hours of video, and great practice projects!",
      "objectives": [
        "Understand what is the Arduino",
        "Understand what is the Arduino IDE",
        "Programming on Arduino IDE",
        "How to work on Arduino without having it",
        "What is Arduino simulator and how can it be useful to you",
        "How to display what we want on one digit and four digit 7-segment led display and LCD screen",
        "What is LED and how it can be controlled by Arduino",
        "How to detect that button is pressed",
        "What is a potentiometer and how can it be used?",
        "What is Buzzer and how to play a melody on it?",
        "How to connect and get data from several sensors: • Light sensor • Thermometer • Ultrasonic Distance sensor • Motion (PIR) sensor",
        "Motors. What are the differences between them and how to control them?"
      ],
      "course_content": {},
      "requirements": [
        "Knowledge of any programming language",
        "You do not need any prior knowledge about Arduino"
      ],
      "description": "What will you learn in this course?\n• Short answer is you will learn everything about Arduino.\n• You will get - What is Arduino and what can be made with it?\n• We will learn how to program Arduino.\n• What is LED and how it can be controlled by Arduino\n• How to detect that button is pressed\n• What is a potentiometer and how can it be used?\n• What is Buzzer and how to play a melody on it?\n\n\nYou will learn how to display what we want on\n• one digit and four-digit 7-segment led display\n• LCD screen.\n\n\nYou will learn how to connect and get data from several sensors:\n• Light sensor\n• Thermometer\n• Ultrasonic Distance sensor\n• Motion detection (PIR) sensor\n\n\nYou will learn about motors.\n• What are the differences between them and how to control them?\n\n\n• There will be some advanced themes like:\n• IR Remote and receiver\n• and Wi-Fi module\n\n\nIn the course will be two milestone projects\n• Obstacle-avoiding robot\n• Get weather data from the Internet project\n\n\n\n\nWhat are the prerequisites for the course?\n• You should know the basics of programming in any programming language.\nBecause in this course, we will not learn what is variable or if statement but we will learn how it works for Arduino.\n• You need to have a PC and internet.\n\n\nShould you have an Arduino KIT?\n• About 80 percent of the course, you will be able to pass in an online Arduino simulator.\n• The simulator can be a good start for you to get if you are interested in it and then choose whether should you buy the Arduino KIT.\n\n\n\n\n• The course has a 30-day 100% money-back guaranteed by Udemy",
      "target_audience": [
        "People who have  no experience with Arduino and want to learn it",
        "People who want to learn how to make robots",
        "People who want to know what the Internet of Things is and how it works"
      ]
    },
    {
      "title": "Physical Computing with Scratch using Raspberry Pi",
      "url": "https://www.udemy.com/course/physical-computing-with-scratch-using-raspberry-pi/",
      "bio": "The version of Scratch with Raspberry Pi has many unique features; one being its ability to communicate with GPIO pins.",
      "objectives": [
        "Control the Raspberry Pi GPIO pins using Scratch",
        "Receive input from the Raspberry Pi GPIO pins using Scratch",
        "Create IoT application through ScratchGPIO with Python to send notification to your mail",
        "Multiple projects to work on ScratchGPIO using Raspberry Pi",
        "Connect a passive infra-red (PIR) sensor to the Raspberry Pi",
        "Control the flow of your Scratch program by responding to the input from the sensor"
      ],
      "course_content": {
        "Introduction": [
          "What will you learn from this course?",
          "Introduction to Physical Computing with ScratchGPIO"
        ],
        "Physical Computing with ScratchGPIO": [
          "General Purpose Input/Output(GPIO)",
          "Installing ScratchGPIO software on a Raspberry Pi",
          "Raspberry GPIO"
        ],
        "ScratchGPIO: Basic configuration broadcast and GPIO Server commands": [
          "GPIOServer: Usage and Basic Capabilities",
          "What more can I do with ScratchGPIO"
        ],
        "Lighting an LED": [
          "Lighting an LED",
          "1.Circuit_Diagram_Lighting an LED_Testing GPIO pins and LED",
          "2.Circuit_Diagram_Lighting an LED_Using a Switchable Pin"
        ],
        "Controlling an LED with a Button Push": [
          "Controlling an LED with a Button Push",
          "3.Circuit_Diagram_Connecting a Button",
          "4.Circuit_Diagram_Controlling a LED with a Push Button"
        ],
        "Buzzer Controller": [
          "Using an Active Buzzer",
          "5.Circuit_Diagram_Using an Active Buzzer",
          "Physical Computing with Scratch"
        ],
        "Passive infrared Motion Sensor(PIR)": [
          "Passive infrared Motion Sensor(PIR)",
          "6.Circuit_Diagram_Passive Infrared Motion Sensor (PIR)"
        ],
        "Ultrasonic distance measure with a LCD and a Buzzer": [
          "Ultrasonic Sensor",
          "7.Circuit_Diagram_Ultrasonic Sensor"
        ],
        "DC Motor Control Using L293D in ScratchGPIO with Raspberry Pi": [
          "DC Motor Control Using L293D in ScratchGPIO with Raspberry Pi",
          "Hardware requirements and Concept of L239D IC",
          "Building the Pi Car",
          "Assembling the Circuit",
          "8.Circuit_Diagram_Motor Controller Using L293D with Scratch",
          "Constructing ScratchGPIO program",
          "Obstacle Avoidance: Raspberry Pi Robot Car",
          "9.Circuit_Diagram_Obstacle avoidance on the motor car"
        ],
        "LED based DICE for Monopoly game": [
          "LED based DICE for Monopoly Game",
          "10.Circuit_Diagram_LED based DICE for Monopoly",
          "Physical Computing with Scratch"
        ]
      },
      "requirements": [
        "Basic knowledge of Scratch is requires to get started with the course",
        "Any model of Raspberry Pi",
        "The new Raspbian version along with that, Raspberry has included the latest Scratch system update",
        "Complete beginner sensor module kit"
      ],
      "description": "Hello, learners! Greetings from Makerdemy. In this course, you will learn how to program the ScratchGPIO on Raspberry to work on the Physical Computing with Scratch.\n\nScratch is a very accessible and easy to learn programming framework for both young children and adults. Its close association with the Raspberry Pi and its educational emphasis has been a perfect match.\nThe ScratchGPIO project brings control and sensing of the Pi's low-level GPIO pins to Scratch in a very powerful way. It continues to enhance the package to support LCD screens, motors, compass components, distance sensors, and other electronic and robotic components.\nThe level of hardware control offered by the ScratchGPIO package allows even beginner programmers the ability to interact with the physical world with a simple and familiar programming framework.\nA new version of Scratch for Raspberry Pi added with the GPIO pins. In this course will guide you how to use Scratch Programming Language with the Raspberry Pi.\nThe Scratch included with the Raspberry Pi has some unique features; one of the most useful is its ability to communicate with the GPIO pins (General Purpose Input Output). These pins allow you to connect your Raspberry Pi to a range of devices, from lights and motors to buttons and sensors. The original Raspberry Pi had a 26-pin header and newer models (B+, Pi 2, Pi 3, etc.) have a 40-pin header, but in this course, I will be using the Raspberry Pi 3 model.\nThe Raspberry Pi is great hardware microcontroller to get starting with Scratch. This course is ideal for those who are interested in exploring the possibilities of Physical computing with Raspberry Pi using ScratchGPIO. Basic knowledge of Scratch is required to get started with the course. The GPIO pins on a Raspberry Pi are a great way to interface with physical devices like resistors and sensors with the Scratch.\nBy following this course, you will learn how to install the ScratchGPIO package, where to look for more information about it and Scratch. Also, you will assemble an easy to use breadboard circuits, motors, PIR sensors, Relay, Touch sensor, Ultrasonic sensor to measure the distance and mail notification, etc., that will allow you to experiment safely with Scratch and GPIO control for both input and output.\nFinally, you will create a game that can be used as an example and a basis to be modified to learn and experiment. As the ScratchGPIO project continues to mature and expand, you can look forward to seeing a whole new generation of Raspberry Pi robotics controlled by Scratch.",
      "target_audience": [
        "This course is ideal for those who are interested in exploring the possibilities of Physical computing with Raspberry Pi using ScratchGPIO",
        "The GPIO pins on a Raspberry Pi are a great way to interface with physical devices like resistors and sensors with the Scratch",
        "No prior knowledge of programming or coding is required",
        "Engineering Students - Electronics, Electrical & Computer Science",
        "Electronic Geeks, Hobbiest & Art Students",
        "High School Science Students"
      ]
    },
    {
      "title": "Complete Cognex And Keyence Machine Vision From 0 To Hero",
      "url": "https://www.udemy.com/course/complete-cognex-and-keyence-machine-vision-from-0-to-hero/",
      "bio": "Industrial vision system fundamentals - Detail Cognex vision and real practice - Detail Keyence vision and real practice",
      "objectives": [
        "Industrial vision machine fundamentals: definitions, components, working principle, types, functions, key specifications and applications",
        "Cognex vision: IS2000 functions, specifications, wiring diagram",
        "Cognex vision: In-Sight Explorer instruction, emulation, connected, image setup, locate tools, presence/absence inspect tools, measurement tools, logic tools",
        "Keyence vision: IV3 AI vision sensors, built-in AI advantages, functions, specifications, hardware connection",
        "Keyence vision: IV3 Navigator, AI image optimization, position tools, brightness tools, AI learning tools, OCR text reading tool"
      ],
      "course_content": {
        "Industrial vision system fundamentals": [
          "Definitions, component, working principle, functions, types, applications"
        ],
        "Cognex vision": [
          "Cognex vision sensor IS2000: functions, specifications",
          "Cognex vision sensor IS2000: wiring diagram",
          "In-Sight Explorer introduction",
          "IS2000 in In-Sight Explorer: emulation - connected - Image setup",
          "IS2000 in In-Sight Explorer: locate tools",
          "IS2000 in In-Sight Explorer: presence/absence inspect tools",
          "IS2000 in In-Sight Explorer: measurement inspect tools",
          "IS2000 in In-Sight Explorer: logic inspect tools"
        ],
        "Keyence vision": [
          "Keyence IV3 AI vision sensor: built-in AI advantages, functions, specifications",
          "Keyence AI IV3 - G600MA: hardware connection",
          "Keyence AI IV3 - G600MA: image optimization - position tool",
          "Keyence AI IV3 - G600MA: normal outline tool",
          "Keyence AI IV3 - G600MA: outline - AI learning tool",
          "Keyence AI IV3 - G600MA: normal brightness tool",
          "Keyence AI IV3 - G600MA: brightness - AI learning tool",
          "Keyence AI IV3 - G600MA: OCR text reading tool"
        ]
      },
      "requirements": [
        "Basic understanding of industrial control systems"
      ],
      "description": "Hi everyone, welcome to the Complete Cognex And Keyence Machine Vision From 0 To Hero Online Course\nIn this comprehensive course, we will come into the fascinating world of industrial vision cameras and their applications in various industries.\nIndustrial vision cameras are essential tools in modern manufacturing and production processes. They enable industries to ensure quality control, optimize efficiency, and enhance safety.\nImagine being able to detect defects, recognize objects, measure dimensions, and guide robotic systems with precision. Industrial vision cameras make all of this possible.\nFrom automotive to electronics, from medicine to food processing, industrial vision cameras are transforming the way industries operate.\nThis course is structured to provide you with a step-by-step understanding of industrial vision cameras. Each module focuses on a specific aspect, building your knowledge from the ground up.\nThroughout this course, we will explore three main topics:\n- Industrial vision system fundamentals: we will come into the fundamentals of industrial vision cameras. You will acquire essential knowledge about their components, working principles, types, applications and integration into vision systems.\n- Cognex vision: we will explore Cognex Vision, a prominent brand known for its advanced vision solutions. Here, we will demonstrate how to apply a Cognex vision camera and sensor to a real product scenario.\n- Keyence vision: we will shift our focus to another industry-leading brand, Keyence Vision. Similarly, we will guide you through the process of applying a Keyence vision camera and sensor to a real product scenario. Specifically, for this particular brand, we will introduce a cutting-edge built-in AI vision sensor, representing the pinnacle of technological advancement in the world.\n\n\nThese topics will provide you with an in-depth understanding of two influential vision brands, their technologies, and their applications in real-world scenarios.\nWe will explore each topic extensively in the coming sessions, providing you with detailed insights, practical examples, and hands-on exercises to strengthen your skills.\nBy the end of this course, you will have a solid foundation in industrial vision cameras and the ability to effectively apply both Cognex Vision and Keyence Vision in practical industrial settings.\nAll videos will be accompanied by subtitles to facilitate better comprehension on your part.\n\n\nEnroll now and unlock your potential in the world of industrial vision!",
      "target_audience": [
        "Control/automation engineer/technician in both maintenance and project who is looking to learn machine vision system and apply into daily job/project",
        "Student who wants to apply machine vision in learning/ graduation project",
        "Anyone who wants to develop to professional automation competency for advance position",
        "Anyone who doesn't know anything about machine vision and want to learn to become an expert"
      ]
    },
    {
      "title": "Embedded Systems STM32 HAL APIs Driver Development",
      "url": "https://www.udemy.com/course/embedded-systems-stm32-hal-apis-driver-development/",
      "bio": "STM32 Hardware Abstraction Layer (HAL) Drivers: DMA,ADC,UART,TIMERS, GPIO,SPI,I2C,RTC,RCC etc",
      "objectives": [
        "Write firmware using only HAL functions",
        "Understand the Cortex-M Architecture",
        "Write Analog-to-Digital Converter (ADC) drivers using HAL functions",
        "Write PWM drivers using HAL functions",
        "Write UART drivers using HAL functions",
        "Write TIMER drivers using HAL functions",
        "Write Interrupt drivers using HAL functions",
        "Write SPI drivers using HAL functions",
        "Write I2C drivers using HAL functions",
        "Write RTC drivers using HAL functions",
        "Write DMA drivers using HAL functions",
        "Write RCC drivers using HAL functions"
      ],
      "course_content": {
        "Introduction": [
          "Downloading the required documentation"
        ],
        "Getting Started": [
          "Notice",
          "Downloading CubeIDE",
          "Setting Up STM32CubeIDE",
          "Overview",
          "Notice",
          "Getting the right STM32 Package"
        ],
        "General Purpose Input/Output Driver Development": [
          "Overview of ARM Cortex-M General Purpose Input/Output Module",
          "Notice",
          "Coding : Getting familiar with the Setup and HAL",
          "Coding : Developing a GPIO Driver using information from the documentations"
        ],
        "Universal Asynchronous-Synchronous Receiver-Transmitter (USART)": [
          "Overview of the UART Protocol",
          "Coding : Developing a UART Driver (Pt. 1)",
          "Coding : Developing a UART Driver (Pt. 2)",
          "Coding : Retargeting printf"
        ],
        "General Purpose Timer Driver Development": [
          "Understanding the System Tick (SysTick) Timer",
          "Understanding STM32 Timers",
          "Coding : Developing a Hardware Timer Driver (Pt. 1)",
          "Coding : Developing a Hardware Timer Driver (Pt. 2)"
        ],
        "Analog-to-Digital Converters Driver Development": [
          "Understanding ADC Independents Modes",
          "Coding : Developing the ADC Continuous Conversion Driver (Part I)",
          "Coding : Developing the ADC Continuous Conversion Driver (Part II)",
          "Coding : Developing the ADC Single Conversion Driver"
        ],
        "Interrupt Programming": [
          "Understanding Interrupts",
          "Coding : Developing the EXTI Input Interrupt Driver",
          "Coding : Using Multiple EXTI Input Interrupts",
          "Coding : Developing the ADC Interrupt Driver",
          "Coding : Developing the UART Interrupt Driver",
          "Coding : Using Multiple UART Modules"
        ],
        "Direct Memory Access (DMA) Driver Development": [
          "Overview of the Direct Memory Access (DMA) Module",
          "Coding : Developing the ADC DMA Driver",
          "Coding : Developing the ADC Multi-Channel DMA Driver",
          "Coding : Developing the UART DMA Driver",
          "Coding : DMA Memory to Memory Transfer"
        ],
        "Serial Peripheral Interface (SPI) Driver Development": [
          "Understanding the SPI Protocol",
          "Coding : Developing the SPI Polling Driver",
          "Coding : Developing the SPI Interrupt Driver",
          "Coding : Developing the SPI DMA Driver"
        ],
        "Inter- Integrated Circuit (I2C) Driver Development": [
          "Understanding the I2C Protocol",
          "Coding : Writing an I2C Driver to read data from the ADXL345 Accelerometer (Pt1)",
          "Coding : Writing an I2C Driver to read data from the ADXL345 Accelerometer (Pt2)"
        ]
      },
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know.",
        "STM32F411-NUCLEO.",
        "We shall be using the STM32CubeIDE which is FREE."
      ],
      "description": "Welcome to the Embedded Systems STM32 Hardware Abstraction Layer (HAL) Driver Development course.\nThe STM32 Hardware Abstraction Layer (HAL) provides a simple, generic multi-instance set of APIs (application programming interfaces) to interact with the upper layers like the user application, libraries and stacks.\nThe HAL driver APIs are split into two categories: generic APIs, which provide common and generic functions for all the STM32 series and extension APIs, which include specific and customized functions for a given line or part number. The HAL drivers include a complete set of ready-to-use APIs that simplify the user application implementation. For example, the communication peripherals contain APIs to initialize and configure the peripheral, manage data transfers in polling mode, handle interrupts or DMA, and manage communication errors.\nIn summary, the HAL offers high-level and feature-oriented APIs with a high-portability level. These hide the MCU and peripheral complexity from the end-user.\nWith a programming based approach, this course is designed to give you a solid foundation in firmware and peripheral driver development for the STM32 family of microcontrollers. The goal of this course is to teach you how to navigate the microcontroller reference manual and datasheet to extract the right  information to professionally  build peripheral drivers and firmware using the STM32 HAL APIs\nBy the end of this course you will be able to develop drivers for peripherals like the ADC, UART,PWM, GPIO, TIMER,I2C, SPI, RTC, RCC, EXTI etc.  You will also master the STM32 architecture and how to build professional embedded firmware for STM32 microcontrollers.\nPlease take a look at the full course curriculum.\nREMEMBER : I have no doubt you will love this course. Also it comes with a  FULL money back guarantee for 30 days!  So put simply, you really have nothing to loose and everything to gain.\n\n\nSign up and let's start toggling some register bits.\n\n\n--------------------------------------Some highlights------------------------------------\n\n\nWrite  Analog-to-Digital Converter (ADC) drivers using HAL functions\nWrite  PWM  drivers using HAL functions\nWrite  UART drivers using HAL functions\nWrite  TIMER drivers using HAL functions\nWrite  Interrupt drivers using HAL functions\nWrite  SPI drivers using HAL  functions\nWrite  I2C drivers using HAL  functions\nWrite  RTC drivers using HAL functions\nWrite  DMA drivers using HAL functions\nWrite  RCC drivers using HAL functions",
      "target_audience": [
        "If you are an absolute beginner to embedded systems, then take this course.",
        "If you are an experienced embedded developer and want to learn how to professionally develop embedded applications for ARM processors, then take this course."
      ]
    },
    {
      "title": "Linux Device Driver Programming With Beaglebone Black (LDD1)",
      "url": "https://www.udemy.com/course/linux-device-driver-programming-using-beaglebone-black/",
      "bio": "Foundation course on practical Linux device driver programming",
      "objectives": [
        "Fundamentals of Linux kernel module and writing syntax",
        "Makefile and LKM build procedure",
        "Character device driver implementation",
        "Platform bus, Platform device, and platform driver concepts",
        "Platform driver implementation",
        "Learn device tree from scratch",
        "Device tree node syntax, properties of device tree nodes",
        "Kernel APIs to process device tree nodes",
        "Device instantiation through device tree nodes",
        "Device tree overlays and overlays testing via u-boot",
        "Kernel synchronization services , mutex , spinlocks usage",
        "Linux device model and sysfs",
        "Linux GPIO Subsystem",
        "Linux pinctrl subsystem"
      ],
      "course_content": {
        "Host and target setup": [
          "About the instructor",
          "Source code and course materials",
          "Host and target setup",
          "Tool-chain download",
          "Important Note",
          "Installing gparted application",
          "Tool-chain installation and PATH settings",
          "Note for the students",
          "Target preparation : Serial debug setup",
          "Important documents",
          "Understanding booting sequence of beaglebone black hardware",
          "Preparing SD card for SD boot",
          "Copying boot images to SD card",
          "Booting BBB via SD card",
          "Making SD boot default on BBB by erasing eMMC MBR",
          "Updating Linux kernel image",
          "Linux kernel compilation",
          "Modules compilation",
          "Modules install",
          "Update new boot images and modules in SD card",
          "Enabling internet over USB"
        ],
        "Linux kernel module": [
          "Introduction to Linux kernel module",
          "User space Vs kernel space",
          "LKM writing syntax",
          "__init and __exit macros",
          "LKM entry point registration and other macros",
          "Hello World LKM",
          "Building a Linux kernel module",
          "Compilation and testing of an LKM",
          "Testing of an LKM on target",
          "Makefile",
          "Intree building",
          "printk"
        ],
        "Character device and driver": [
          "What is device driver ?",
          "A char driver , char device and char device number",
          "Dynamically allocating char device numbers",
          "Pseudo character driver implementation",
          "Character device registration",
          "Character device registration contd.",
          "Character driver file operation methods",
          "Character driver file operation methods contd.",
          "Implementing file operation methods",
          "File operations structure initialization",
          "Creating device files",
          "Character driver cleanup function implementation"
        ],
        "Character driver file operations implementation": [
          "Understanding read method",
          "Understanding error codes",
          "Read method implementation",
          "Understanding write method",
          "Write method implementation",
          "lseek method",
          "lseek method implementation",
          "Testing pseudo char driver",
          "Error handling"
        ],
        "Char driver with multiple device nodes": [
          "pcd driver with multiple devices",
          "Pcd driver with multiple devices code implementation part-1",
          "Pcd driver with multiple devices code implementation part-2",
          "Pcd driver with multiple devices code implementation part-3",
          "Pcd driver with multiple devices code implementation part-4",
          "Pcd driver with multiple devices code implementation part-5",
          "Pcd driver with multiple devices code implementation part-6",
          "Pcd driver with multiple devices code implementation part-7",
          "Pcd driver with multiple devices testing",
          "Pcd driver with multiple devices testing contd",
          "Pcd driver with multiple devices lseek implementation",
          "Container of discussion"
        ],
        "Platform bus, Platform devices and Platform drivers": [
          "Platform devices and drivers",
          "Example of platform drivers",
          "Registering platform device and drivers",
          "Platform driver code exercise",
          "Platform device setup code implementation",
          "Platform device setup code implementation contd.",
          "Platform driver code implementation part-1",
          "Platform driver code implementation part-2",
          "Platform driver code implementation part-3",
          "Platform driver code implementation part-4",
          "Platform driver code implementation part-5",
          "Platform driver code implementation part-6",
          "Testing platform driver",
          "Linux device resource managed functions",
          "Using device resource managed kernel functions",
          "Testing with more platform devices",
          "Fixing kernel crash",
          "Platform device driver matching using platform device ids",
          "Fixing error handling in probe function"
        ],
        "Device tree": [
          "Introduction to device tree",
          "Writing device tree",
          "Device tree structure",
          "Device tree writing syntax",
          "Device tree parent and child node",
          "Device tree properties",
          "'compatible' property",
          "Device tree binding",
          "pcd device tree version",
          "Switching to Linux kernel version 5.4",
          "Updating Linux kernel image of 5.4"
        ],
        "Device tree nodes and platform driver": [
          "Device tree nodes for pcd driver",
          "Pcd platform driver DT coding part-1",
          "Testing device tree changes on board",
          "Pcd platform driver DT coding part-2",
          "Pcd platform driver DT coding part-3",
          "Pcd platform driver DT coding part-4"
        ],
        "Device tree overlays": [
          "Introduction to device tree overlays",
          "Device tree overlays exercise",
          "Updating u-boot",
          "Updating u-boot contd.",
          "Applying overlays using u-boot commands",
          "Applying overlays and testing using u-boot uEnv.txt file"
        ],
        "Linux device driver model": [
          "Linux device model",
          "kobjects",
          "kobject type and kset",
          "sysfs and kobject attributes",
          "Creating sysfs attributes",
          "pcd_sysfs_attributes coding part 1",
          "pcd_sysfs_attributes coding part 2",
          "pcd sysfs kernel module testing",
          "show and store methods of the sysfs attributes",
          "pcd_sysfs_attributes coding part 3",
          "Attribute grouping"
        ]
      },
      "requirements": [
        "Students must be familiar with basic Linux command usage",
        "Students must be familiar with 'C' programming language"
      ],
      "description": "==> This should be your very first course to dive into the exciting world of \"Linux device drivers\" <==\nIn this course you will learn ,\nFundamentals Linux kernel module and syntax\nCharacter device driver theory and code implementation\nPlatform bus, Platform device, and platform driver concepts\nPlatform driver implementation\nDevice tree from scratch\nAccessing device tree nodes from drivers\nDevice instantiation through device tree nodes\nDevice tree properties and node syntax\nDevice tree overlays\nOverlays testing via u-boot\nKernel synchronization services (Mutex, Spinlocks)\nLinux device model and sysfs\nLinux GPIO subsystem\nLinux pinctrl subsystem\n\n\nHardware Requirements:\n1) For some exercises involving testing of GPIOs, pinctrl, device tree nodes, overlays, you need a board.\nIn this course, Beaglebone Black board is being used.\n2) Mini USB cable to power BBB\n3) USB to UART cable for serial connection with BBB\n4) Micro SD card 8/16 GB\n5) SD card reader\n6) 16x2 LCD and 10K potentiometer\n7) Jumper wires\n8)Bread board\n\n\nOS Requirements:\n32/64 bit Ubuntu 18.04+ LTS\n\n\nLearning order of FastBit Embedded Brain Academy Courses,\nIf you are a beginner in the field of embedded systems, then you can take our courses in the below-mentioned order.\nThis is just a recommendation from the instructor for beginners.\n1) Microcontroller Embedded C Programming: absolute beginners(Embedded C)\n2) Embedded Systems Programming on ARM Cortex-M3/M4 Processor(ARM Cortex M4 Processor specific)\n3) Mastering Microcontroller with Embedded Driver Development(MCU1)\n4) Mastering Microcontroller: TIMERS, PWM, CAN, RTC,LOW POWER(MCU2)\n5) Mastering Microcontroller: STM32-LTDC, LCD-TFT, LVGL(MCU3)\n6) Embedded System Design using UML State Machines(State machine)\n7) Mastering RTOS: Hands-on FreeRTOS and STM32Fx with Debugging(RTOS)\n8) ARM Cortex M Microcontroller DMA Programming Demystified(DMA)\n9) STM32Fx Microcontroller Custom Bootloader Development(Bootloader)\n10) Embedded Linux Step by Step using Beaglebone Black(Linux)\n11) Linux device driver programming using Beaglebone Black(LDD1)\n\n\nOther programming courses\n1) Master The Rust Programming Language : Beginner To Advanced",
      "target_audience": [
        "Students/Hobbyists/Professionals interested in exploring Linux device driver programming"
      ]
    },
    {
      "title": "SIEMENS TIA PORTAL PLC Course Basic & Intermediate Pt1 PLC",
      "url": "https://www.udemy.com/course/siemens-tia-portal-plc-course-basic-intermediate-pt1-plc/",
      "bio": "Intermediate basic PLC programming course with TIA Portal Siemens software, different from any other course you have eve",
      "objectives": [
        "Learn to program PLCs in a simple way with logical thinking to solve problems in the field.",
        "Advanced Sequences and Instructions from scratch with TIA PORTAL",
        "Usage and programming in Factory IO",
        "Learning and communicating the 4 programming languages focused on SIEMENS",
        "Elaborate complex programs with real industrial exercises carried out in the field.",
        "Learn industrial automation concepts, with a focus on SIEMENS",
        "Basic sequences from scratch with TIA PORTAL",
        "History and SIEMENS Devices in Industry"
      ],
      "course_content": {},
      "requirements": [
        "Have completed the TIA PORTAL Basic Course.",
        "Basic Prior Knowledge of TIA PORTAL",
        "Logical sense",
        "Knowledge and Passion for Industrial Programming",
        "Laptop/PC capable of running TIA PORTAL-Factory IO software",
        "If you are passionate or interested in PLC programming, you are welcome to take this course!"
      ],
      "description": "IMPORTANT: This is the first part of the complete TIA Portal course with more than 35 hours in total. It is for basic and intermediate levels. If you want to learn TIA Portal and Siemens from a more complex or advanced level, we recommend you to purchase the second part of the course. Thank you.\n\n\nAt last the Siemens course is here.\n\n\nThanks to all of you for the great support I have received over the years.\n\n\nMy way of thanking you, is to continue providing courses with the best quality, explained through experience and with situations that will really live in the professional field of automation.\n\n\nWhy is this course so different from any other course you have taken before?\n\n\nIt is the first course in the world where differences and similarities between the Allen Bradley and Siemens programming environment are explained.\n\n\nNowadays, the more knowledge we have, the better, therefore, having more than 30 k students around the world, and with knowledge mostly from Allen Bradley, we implemented this new way of teaching so that they do not have complexity when programming between one brand and another.\n\n\nIs the course practical?\nThanks to the simulators that will be provided in this course, you can practice and simulate real exercises from your computer.\n\n\nCourse syllabus:\nTHEORETICAL SECTION, INTRODUCTION TO SIEMENS.\n1 Why choose SIEMENS or ALLEN BRADLEY?\n2 History of SIEMENS\n3 Industrial Automation and Explanation of what is a PLC\n4 SIEMENS Processors through History\n5 Different S7 Series Processors\n6 S7 400 DCS Controller\n7 Recommendation and Warning with SIEMENS Software Usage\n8 Digital and Analog Signals\n9 SIEMENS PLC Components\n10 Connecting SIEMENS PLC's\n11 Getting to Know SIEMENS Basic Equipment\n12 Connecting to PLC's\n\n\nPROGRAMMING SECTION. BASIC SECTION\n1 Introduction to the TIA Portal Course\n2 Creating Our First Project in TIA Portal (Comparison with Allen Bradley)\n3 Essential Knowledge to learn how to Program any PLC\n4 Memories and Programming Environment Section\n5 Physical Memories in TIA Portal-Studio 5000\n6 Data Types and Virtual Memories\n7 Ladder Language and P1 Memory Addressing\n8 Hello World of Industrial Automation (Serial and Parallel)\n9 NC, NO, Branch and Forcing Table\n10 Coil Repetition (Outputs) and Importance of the NC Blocks\n11 SET and RESET Instructions\n12 Positive and Negative Edge Instructions\n13 TP, TON, TNOR Timers\n14 CTU, CTD, CTUD Counters\n15 Comparators SIEMENS and ALLEN BRADLEY\n16 Absolute and Symbolic Addressing\n17 Mathematical Functions\n18 Program Blocks\n19 TIA Portal and Studio 5000 Arrangements\n20 UDT's in TIA Portal and Studio 5000\n21 Structures and Difference in UDT's\n22 PLC Simulator Tutorial\n\n\nPROGRAMMING SECTION, INTERMEDIATE LEVEL\n1 Variable Tables and Segmentation\n2 Memory Optimization\n3 Cross Reference, Temporary and Static Memories 4 Startup Values, Snapshots\n4 Startup Values, Snapshots 5 General Differences between FC & FB-FC Examples\n6 FB Example\n7 Multi Instance and Instance Parameter\n8 JMP and Label Instructions",
      "target_audience": [
        "Recent graduates in control and automation engineering, mechatronics engineering, robotics engineering, etc.",
        "Junior programmers who are starting their career and wish to increase their knowledge exponentially.",
        "Technicians/Engineers who practice Industrial Programming in any line of business."
      ]
    },
    {
      "title": "Embedded Systems Programming on ARM Cortex-M3/M4 Processor",
      "url": "https://www.udemy.com/course/embedded-system-programming-on-arm-cortex-m3m4/",
      "bio": "With hands on coding using C Programming and assembly on ARM Cortex M Processor based Microcontroller",
      "objectives": [
        "Internal architecture of ARM Cortex M3/M4 processor and programming",
        "Learn Mixed ‘C’ and Assembly Coding using inline assembly technique",
        "Demystifying Memory, Bus interfaces, NVIC, Exception handling with lots of animation",
        "Interrupts and configuration of ARM Cortex Mx based microcontroller",
        "Low level register Programming for interrupts, System Exceptions, Setting Priorities,Preemption,etc.",
        "Learn writing IRQ handlers , IRQ numbers, NVIC and mcu more",
        "Implementation of task scheduler using PENDSV and SYSTICK feature of the processor",
        "Implementation of context switching",
        "Learn and write linker script and mcu startup file from scratch",
        "Bare metal embedded build process",
        "Processor fault exceptions and fault handler implementation and fault analysis",
        "Stack and AAPCS standard",
        "learn inline assembly , naked functions and gcc variable and section attributes"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of C and Micro controller could be added advantage but not mandatory"
      ],
      "description": "Latest Update:\nBare metal embedded , writing linker script and startup file from scratch.\nprocessor fault analysis and handling, stacks, AAPCS explanation.\nImplementation of simple task scheduler using pendsv and systick\nGCC inline assembly and naked functions\n\n\nMore than 10000+ students have already taken this course with More than 900+ happy reviews.\nHave you ever tried to learn about the ARM Cortex M3/M4 Processor by reading a book or technical manuals and found stuck? Have you ended up seeing bits and pieces all over the map but could not able to tie it all together to have a big picture?\nThis course is for Embedded Engineers/Students like you who want to learn and Program ARM Cortex M3/M4 based controllers by digging deep into its internals and programming aspects.\nDon't worry if you are new to the ARM-based controller. In this course, you'll see everything you needed to quickly get started with Programming Cortex M3/M4 based controller. The lab session covers various programming assignments which helps you to remember the concepts better.\n\n\nHardware:\n1. You need ARM Cortex M4 based STM32F407 DISCOVERY board from ST if you want to try out code on the target.\n3. You can also be able to follow this course if you have any other boards from ST such as Nucleo or evaluation.\n\n\nSoftware:\n1. In this course, Eclipse-based STM32CubeIDE is used as the  IDE ( supports Windows/Linux/Mac) (FREE)\n\n\nSave time and have fun!\nWatching lectures, Programming assignments and lots of animations will save hours of your self-study time and will give you the confidence to look at embedded processors from a different perspective. So, learn something new this year and boost your momentum at work.\n\n\nMy promise!\nI am confident that this course will save you many, many hours of studying/experimenting/googling time to learn about this processor. I will personally answer your questions about this material, either privately or in a group discussion. If you are in any way not satisfied, for any reason, you can get a full refund from Udemy within 30 days. No questions asked. But I am confident you won't need to. I stand behind this course 100% and am committed to helping you.\n\n\nLearning order of FastBit Embedded Brain Academy Courses,\nIf you are a beginner in the field of embedded systems, then you can take our courses in the below-mentioned order.\nThis is just a recommendation from the instructor for beginners.\n1) Microcontroller Embedded C Programming: absolute beginners(Embedded C)\n2) Embedded Systems Programming on ARM Cortex-M3/M4 Processor(ARM Cortex M4 Processor specific)\n3) Mastering Microcontroller with Embedded Driver Development(MCU1)\n4) Mastering Microcontroller: TIMERS, PWM, CAN, RTC,LOW POWER(MCU2)\n5) Mastering Microcontroller: STM32-LTDC, LCD-TFT, LVGL(MCU3)\n6) Embedded System Design using UML State Machines(State machine)\n7) Mastering RTOS: Hands-on FreeRTOS and STM32Fx with Debugging(RTOS)\n8) ARM Cortex M Microcontroller DMA Programming Demystified(DMA)\n9) STM32Fx Microcontroller Custom Bootloader Development(Bootloader)\n10) Embedded Linux Step by Step using Beaglebone Black(Linux)\n11) Linux device driver programming using Beaglebone Black(LDD1)\n\n\nOther programming courses\n1) Master The Rust Programming Language : Beginner To Advanced",
      "target_audience": [
        "Professionals interested in exploring Embedded systems",
        "Hobbyists  and students who want to start their career in Embedded world",
        "If  you think about 'embedded' then think about taking this course. you will not be disappointed"
      ]
    },
    {
      "title": "Configuring the Synology Network Attached Storage Appliance",
      "url": "https://www.udemy.com/course/configuring-synology-network-attached-storage-appliances/",
      "bio": "Leverage the Synology NAS appliances and get them to help you with your work with their many productive functions",
      "objectives": [
        "Understand the concepts of Synology NAS Appliances",
        "Learn to configure basic system parameters",
        "Learn how to use DSM Assistant",
        "Configure volumes and storage parameters",
        "Configure connections and targets",
        "Configure shares, file services, users and groups",
        "Work with application packages for extra functionality",
        "Configure backup and replication",
        "Monitor Storage use, harware resources and logs",
        "Configure and use Cloudstation as a private cloud storage solution",
        "Learn about the video surveillance capabilities"
      ],
      "course_content": {},
      "requirements": [
        "Basic networking knowledge",
        "Basic drive volumes and storage knowledge"
      ],
      "description": "Have you heard about storage, SAN, NAS? Are these concepts new to you or are you curious to find out more? Do you want to learn how to configure a Synology Storage appliance?\nWell then, you've come to the right place!\n\nIn this course you will learn how to work with the Synology network attached storage appliances, which will give you many functions that will help you everyday. You'll get to create your own private cloud storage that can rival Dropbox, learn how to connect and record footage from IP surveillance cameras, learn how to create files, shared folders, volumes and even how to install and use a web server on the unit and many more.\nThis prerequisites for this course are basic networking knowledge, basic hard drives and storage knowledge and generally a desire to learn new things.\nBy the end of the course you should be able to take a Synology storage appliance and configure the multitude of functions, while also working with it to be more productive in your day-to-day operations. On top of that, you'll know how to keep your data safe!",
      "target_audience": [
        "Anyone interested in understanding how to operate a Synology NAS"
      ]
    },
    {
      "title": "Digital Electronics: Robotics, learn by building module II",
      "url": "https://www.udemy.com/course/digital-electronics-robotics-learn-by-building-module-ii/",
      "bio": "Over 14,000 enrolled! Open doors to careers and hobbies and have fun while learning digital electronics!",
      "objectives": [
        "Design and construct digital electronic circuits, use microcontrollers to control real world items like robots you build!",
        "You will be able to program microcontrollers like the PIC and Arduino."
      ],
      "course_content": {},
      "requirements": [
        "You will need knowledge of analog electronics and the parts listed in the first lesson.",
        "No prior experience or knowledge in digital electronics is needed - just some basic math and computer skills!"
      ],
      "description": "Updated January 2023\nBuilding on the knowledge you gained in the Analog Electronics module opens even more doors to diverse careers and hobbies. Think about how many industries / businesses / hobbies that involve computers or computer control. Even automobiles are chock full of digital electronics now. All of this involves digital electronics, and you want in on it today. In this module 2 course, you will build digital electronic circuits, use and program microcontrollers like the PIC and Arduino, and connect to the real world with them. You'll need a good understanding of basic electronics (i.e., you've completed the Robotics: Learn by building, module I), some basic math skills, a computer, and that's it!\n\n\nWith over 14,000 students enrolled and more than 500 five star ratings, students aged 8 to 60+ have enjoyed the course and its projects.\nNo prior knowledge of digital electronics or programming is required, and yet by the end of this course you'll have built functioning digital electronic circuits like a digital memory, and programmed microcontrollers which are basically a computer on a microchip. You will connect these to the real world for home automation and of course, controlling your robots. All courses have captions for the hearing impaired.\n\nCourse materials:\nYou will need the analog electronic parts and a breadboard, which you can purchase as an accompanying kit (i.e., the Analog Electronics Kit from module I) or provide your own.\nYou will also need the digital electronics kit which again you can purchase as an accompanying kit or provide your own parts. The first lesson is a walk-through of what is in the kit and acts as a parts list for this module.\n\n\nThis series of \"Robotics: Learn by building\" modules has an end-goal focus on the diverse field of robotics. In module I we learned the basics of electricity and electronics. In this module II you further develop your knowledge and skills to include digital electronics and practice your skills on real-life digital components.\nThis course is the prerequisite for the module III course where you'll learn robotic drive systems and physics, and gain a wide variety of skills in prototyping so you can actually build your own robots and manufacture your own parts. In module IV, you'll culminate all you've learned so far as you build a 3D printer from scratch, hook it up to a desktop computer and make your own plastic parts. The 3D printer is, in effect, a robot which you can then use to make parts for your other robot designs. In module V you can take your robot design and construction skills to the next level with a hands-on approach to autonomous robotic systems: learning about various sensors to know where you are and what your robot is doing, GPS navigation, basic artificial intelligence, powerful microchips known as FPGA's where you literally design a custom circuit on the chip, vision systems and more.\n\n\nLesson overview:\nIn this course we'll be covering:\nWhat is digital?\nBinary & Hexadecimal system and ASCII\nAnalog to digital and digital to analog conversion\nLogic gates and you'll make your own RAM\nDigital Addressing/demultiplexing\nMicroprocessors & microcontrollers - what are they?\nProgramming & using PIC microcontrollers to:\n-display information on an LCD display\n-Read both digital and analog inputs\n-PWM control a DC motor and servo motor\n-Read keypad matrixes\n-control LED displays\n-writing to flash memory on board for remote systems\n\nWhat is Arduino?\n-using Arduino for all of the PIC projects above, as well as using full-colour TFT touch screens\nBuilding our mobile robot\nGiving our mobile robot a \"brain\"\nUltrasonics and ultrasonic radar / external sensing\nProgrammable IR remote\n\n\nand more!",
      "target_audience": [
        "You have a desire to learn computer control and electronics, especially geared towards building and controlling robots.",
        "You want to understand the heartbeat of computers and digital systems, and want to build your own digital electronic devices."
      ]
    },
    {
      "title": "Embedded Systems Bootcamp: RTOS, IoT, AI, Vision and FPGA",
      "url": "https://www.udemy.com/course/embedded-electronics-bootcamp-from-bit-to-deep-learning/",
      "bio": "All microcontrollers in one: Embedded Systems, IoT, RTOS, Deep Learning, Linux and Raspberry PI, ESP32, Arduino",
      "objectives": [
        "Hardware Design Using FPGA by Learning VHDL",
        "Raspberry Pi, Arduino and ESP32",
        "Microcontroller Programming and Simulation",
        "Multi-Threading For Embedded Systems and RTOS",
        "IoT, Remote Control and Monitoring for Embedded Systems",
        "Linux Based Embedded Systems",
        "Python",
        "Deep Learning and Image Processing"
      ],
      "course_content": {
        "The Story Of The Bit": [
          "The Story Of The Bit",
          "Transistor Logic Gates",
          "Before we go further",
          "The Binary System",
          "Storage Circuits",
          "5.The Basis of GPU Circuits",
          "The Display Hardware",
          "Understanding The Differences"
        ],
        "VHDL Resource Files": [
          "Get All The Source Files"
        ],
        "Combinational Logic Design": [
          "Combinational Logic",
          "Combinational Logic Design P1",
          "Combinational Logic Design P2",
          "Complex Gates",
          "Quick VHDL Intro",
          "Downloading Software",
          "Complex Gates Example",
          "Combinational Logic-Programming AND Gate",
          "Combinational Logic-Programming OR Gate",
          "Combinational Logic-Programming XOR Gate"
        ],
        "Multiplexer Circuits": [
          "Multiplexers",
          "Multiplexer Building by Basic Gates",
          "Multiplexer using VHDL"
        ],
        "Binary Representation": [
          "Binary Representation",
          "Binary Operations P1",
          "Binary Operations P2"
        ],
        "Adder Circuits": [
          "Adders Introduction",
          "Half Adder Implementation",
          "1 Bit Adder Implementation",
          "Grounding Inputs",
          "Combining IO Buses",
          "Extending 1-bit Adder to multi-bit",
          "Signed Numbers Subtraction"
        ],
        "Design Techniques": [
          "Dataflow vs Behavioral vs Structural",
          "Casting"
        ],
        "Arithmetic Logic Unit Design ( ALU)": [
          "ALU",
          "Behavioral ALU",
          "ALU Overflow handling",
          "ALU Logic Operations",
          "ALU Integer Multiplication and Division"
        ],
        "Sequential Design": [
          "Proccess",
          "Combinational Vs Sequential",
          "RS Latch",
          "RS Latch Operation",
          "RS Latch Demo",
          "D latch",
          "D Flip Flop",
          "Clock and Data",
          "D Flip Flop Behavioral",
          "Finite State Machine"
        ],
        "VHDL Project - Data path and Controller": [
          "Project Introduction",
          "Project Implementation Part 1",
          "Project Implementation Part 2",
          "Project Implementation Part 3",
          "Project Implementation Part 4",
          "Project Implementation Part 5",
          "Project Implementation Part 6",
          "Project Implementation Part 7",
          "Project Implementation Part 8",
          "Project Implementation Part 9"
        ]
      },
      "requirements": [
        "No Prior Knowledge"
      ],
      "description": "No other E-learning content tried linking all digital sciences with embedded systems like we did with this 17 hours content.\nStarting with FPGA and the VHDL hardware design programming language. specifically from the smallest signal which we call the bit, to building simplified calculation and registration units used in microcontrollers from scratch! And what I mean by scratch is, building it out of basic Logic gates and registers.\nThen Moving to AVR uC and the famous Arduino, and building it up to run The famous Realtime operating system (RTOS) in order to run Multi-threading based application.\nThen dialing it up a notch and introducing ESP boards to run IoT applications, establishing communication to Node-red, android devices and learning about remote access control.\nClosing the whole thing by introducing raspberry pi and Linux. And building up with a basic Python introduction, Neural Networks, before building Embedded Deep learning image processing based models.\nAnd all of that is hands on! No plain theory, no philosophical block of texts explaining useless concepts. Getting your hands dirty, is the my main drive here.\n\n\nHardware Technologies to be taught:\nFPGA\nRaspberry PI\nArduino\nESP32 (Node MCU)\nProgramming Languages to be taught:\nC\nPython\nVHDL\nCommunication and Cloud Technologies to be taught:\nUART\nSPI\nMQTT\nNode-Red\nHivemq\n\n\nTechniques to be taught:\nCombinational Logic Design\nSequential Logic Design\nFSM\nControl Units\nTinker CAD\nDigital and Analog Signals\nInterrupts\nAndroid Control\nRemote Control\nRTOS\nSemaphores\nMutexes\nSharing Resources\nQueues\nParametrized Tasks\nStructures\nLinux\nBasics of Artificial Intelligence\nNeural Networks\nDeep Neural Networks\nCNN",
      "target_audience": [
        "Anyone who want to learn about Embedded Systems from Scratch",
        "Electronics Hobbyists",
        "Robotics Hobbyists",
        "Computer Engineers",
        "Electrical and Electronics Engineers"
      ]
    },
    {
      "title": "Oscilloscopes for beginners",
      "url": "https://www.udemy.com/course/oscilloscopes-for-beginners/",
      "bio": "With this course, you will learn how to use the oscilloscope through a series of experiments",
      "objectives": [
        "Understand the purpose of the oscilloscope.",
        "Understand the basic controls of the oscilloscope.",
        "Learn how to calibrate and use the probes so that a signal is transmitted to the oscilloscope with minimal distortion.",
        "Learn how to use the automatic and manual trigger function to capture a variety of signal types.",
        "Understand the differences and similarities between bench-top, portable and PC/USB oscilloscopes.",
        "Understand what you can and cannot do with an oscilloscope.",
        "Become familiar with the various kinds of waveforms that are typical in electronic circuits.",
        "Understand how to keep your oscilloscope and yourself safe.",
        "Learn how to use the oscilloscope automatic measurement and statistics functions.",
        "Learn how to take manual measurements using the cursors.",
        "Learn how to use cursors in manual, tracking and automatic mode.",
        "Build-up your skill and confidence through a series of experimentations."
      ],
      "course_content": {
        "Introduction": [
          "01.10 What you should know about this course",
          "01.20 Software you will need",
          "01.30 Hardware you will need",
          "01.40 How to get the most out of this course"
        ],
        "What is the oscilloscope?": [
          "02.05 Introduction to section 2",
          "02.10 An introduction to oscilloscopes",
          "02.50 The basic functions of an oscilloscope",
          "02.60 The basic controls of an oscilloscope",
          "02.80 An overview of oscilloscope probes",
          "02.90 An overview of waveforms",
          "02.100 Basic precautions to avoid damage and injury"
        ],
        "Getting comfortable with your oscilloscope": [
          "03.01 Introduction to section 3",
          "03.05 How to connect the probes",
          "03.10 How to calibrate (compensate) the probes",
          "03.15 How to calibrate the oscilloscope",
          "03.40 What is input coupling?",
          "03.50 Get started with automatic triggering",
          "03.85 Cursor basics",
          "03.90 How to manually label your channels",
          "03.110 Quick demo of a USB oscilloscope",
          "03.120 Zoolark quick demo (standalone)",
          "Beware: my Rigol probes have a 10:1 attenuation"
        ],
        "Measure an RC circuit": [
          "04.10 Experiment 1: Introduction",
          "04.20 Experiment 1: Setup the oscilloscope",
          "04.30 Experiment 1: Setup the trigger",
          "04.40 Experiment 1: How to use the automatic edge trigger",
          "04.50 Experiment 1: Measure waveform attributes",
          "04.60 Experiment 1: How to use the manual cursors",
          "04.70 Experiment 1: How to use the automatic cursors",
          "04.80 Experiment 1: How to use cursor tracking",
          "04.90 RC circuit experiment with the USB oscilloscope"
        ],
        "Button press and response": [
          "05.10 Experiment 2: Introduction",
          "05.20 Experiment 2: Review the Arduino circuit and sketch",
          "05.30 Experiment 2: How to connect the probes",
          "05.40 Experiment 2: Setup the trigger",
          "05.50 Experiment 2: Measure waveform attributes",
          "05.70 Experiment 2: Repeat the experiment with a USB oscilloscope"
        ],
        "\"See\" ultrasounds using the Ultrasonic sensor": [
          "06.10 Experiment 3: Introduction",
          "06.20 Experiment 3: Review the Arduino circuit and sketch",
          "06.30 Experiment 3: Connect the probes and see the signal \"live\"",
          "06.40 Experiment 3: Setup the trigger",
          "06.50 Experiment 3: Measure waveform attributes"
        ],
        "Measure a PWM signal": [
          "07.10 Experiment 4: Introduction",
          "07.20 Experiment 4: Review the Arduino circuit and sketch",
          "07.30 Experiment 4: Setup the probes and trigger",
          "07.50 Experiment 4: Measure waveform attributes"
        ],
        "Servo motor control signal": [
          "08.10 Experiment 5: Introduction",
          "08.20 Experiment 5: Review the Arduino circuit and sketch",
          "08.30 Experiment 5: Setup the probes and trigger",
          "08.50 Experiment 5: Measure waveform attributes"
        ],
        "Measure waveforms created by an ESP32": [
          "09.10 Experiment 6: Introduction",
          "09.20 Experiment 6: Review the Arduino circuit and sketch",
          "09.30 Experiment 6: Setup the probe and trigger",
          "09.40 Experiment 6: Sine waveform measurements",
          "09.50 Experiment 6: Triangular waveform measurements",
          "09.60 Experiment 6: Sawtooth waveform measurements",
          "09.70 Experiment 6: Square waveform measurements",
          "09.80 Experiment 6: Decaying waveform measurements",
          "09.90 Experiment 6: Runt waveform measurements",
          "09.110 Stephan's ESP32 Waveform Generator",
          "09.120 Zoolark demo standalone mode",
          "09.130 Zoolark demo PC mode"
        ],
        "Lissajous figures": [
          "Introduction to Lissajous figures",
          "Lissajous figures demonstration",
          "The Game of Life plot by Stephane"
        ]
      },
      "requirements": [
        "Basic electronics, i.e. able to use simple passive components like resistors and capacitors in a breadboard circuit, and understand the meaning of units like Volt, Amperes, and Hz.",
        "A working understanding of the Arduino Uno and the ESP32 as low-cost test signal generators, you should also be familiar with these platforms. We provide all circuit schematics and sketches in the course.",
        "You will need an oscilloscope. If you already have one, you can use it to practice the course experiments. If you don’t, you can purchase an inexpensive PC/USB oscilloscope for less than $100.",
        "To generate the test signals, we use an Arduino Uno and an ESP32, plus a few simple components like buttons, resistors, capacitors and a potentiometer. If you have completed Arduino Step by Step Getting Started and ESP32 For Busy People, you already have everything you need."
      ],
      "description": "Oscilloscopes are incredible: They can capture, display, and analyse an electrical input signal. They can automatically produce all kinds of measurements, like the period, rise time, width, duty cycle, max and min voltages, and lots more, and even decode communications protocols like RS232, and I2C.\nAre you working with electronics and are interested in using an oscilloscope to gain a better understanding of what is happening inside your circuits as they operate?\nPerhaps you already have an oscilloscope but are confused by all its buttons, knobs and menu options?\nPerhaps you are thinking of getting one but not sure if its worth it, or not sure what to look for?\nThis course is dedicated to the oscilloscope, and it will help you answer these questions, plus lots more.\nIt will teach you how to use the oscilloscope that you already have, or are planning to get.\nAfter the multimeter, the oscilloscope is the most useful test instrument for makers.\nOver the last few years, their prices have dropped by a lot, and it is now very common for students and hobbyists to be able to afford one. Today, budget scopes offer a full array of capabilities.\nYou are probably familiar with the multimeter. This test instrument gives you a snapshot of what is happening in your circuit in a specific moment in time. For example, it will tell you that the voltage on a certain pin is 5.1 Volts.\nThe multimeter works in a single dimension.\nThe oscilloscope works in two dimensions.\nOn its screen, it will plot the voltage of your test circuit over time. You can see how voltage changes over time, and get the measurements that describe various aspects of its operation. You can use this information to dive deep into the inner workings of your circuit.\nThis is a course for people who are already familiar with basic electronics.\nTo make the most from this course, you will need to have a working understanding of things like Volt, Hz and duty cycle.\nBecause I use the Arduino and the ESP32 to create experiments based on which I demonstrate various features and capabilities of the oscilloscope, you should also have a basic understanding of those two technologies.\nIn the course, first I’ll talk about the various aspects of an oscilloscope, such as the most important features, functions, and controls.\nSecond, I’ll help you get comfortable with your oscilloscope, calibrate it and get it ready for use.\nAnd third, I’ll show you how to use the oscilloscope by guiding you through multiple experiments. Each experiment is an opportunity to learn and practice several new workflows and operations. This third part, the experimental, consists the bulk of the course.\nSo I invite you to enrol in this course right now, and learn how to use your oscilloscope.\nYou can also have a look at the free lectures for more information about the objectives and structure of this course.",
      "target_audience": [
        "People who are ready to ready to move beyond their multimeter.",
        "People who are ready to dig deeper and understand what is going on in their circuits over time.",
        "People who want to understand what is an oscilloscope and how it works before they purchase one.",
        "People who already have an oscilloscope but are not sure how to use it."
      ]
    },
    {
      "title": "Master Embedded C: Embedded Systems Interview Questions",
      "url": "https://www.udemy.com/course/embedded-systems-interview-questions-explanations/",
      "bio": "Learn Embedded Systems the easy way ! 200 questions, detalied explanations and references.",
      "objectives": [],
      "course_content": {
        "Practice Tests": []
      },
      "requirements": [],
      "description": "This course contains a series of Embedded Systems questions and explanations.\nEmbedded C: pointers, memory layout, memory types, makefiles, compilation steps, interrupts, semaphores, safe coding questions.\nElectronics:  Subjects such as transistors circuits, amplifiers, resistors , capacitors , differential signaling, darlington pair, current mirror,  logic gates with transistors, buck, boost, buck-boost converters, basic electronics in Embedded Systems, stepper motors, DC motors, PCB design\nMicrocontrollers and Computer Architecture: Subjects such as timers, ADC, I2C, SPI, UART, DMA, PWM, Harvard architecture, Von-Neumann, bit operations, CPU architecture, interrupts\nEmbedded Systems in Automotive industry: Subjects such as CAN protocol, FlexRay, standards, testing methods, AUTOSAR, OBD, CAN FD\nNetworking: Subjects such as OSI stack, routers, switches, ARP protocol, spanning tree protocol, socket, pipes, linux, threads, processes",
      "target_audience": [
        "This course will be useful for those of you who are preparing for an interview or willing to have a quick check on fundamentals.",
        "Developers who want to pursue a career in Embedded Systems",
        "C developers",
        "Embedded Software Engineers",
        "Embedded Developer interview"
      ]
    },
    {
      "title": "VHDL for FPGA: Learn from Scratch to Mastery",
      "url": "https://www.udemy.com/course/learn-vhdl-from-the-beginning-for-fpga-and-cpld-development/",
      "bio": "Master VHDL for FPGA: Learn Basics, Programming, and Hands-On Exercises",
      "objectives": [
        "How to write the VHDL code from zero",
        "Fundamentals of FPGA and CPLD",
        "Everything needed in order to become an FPGA engineer",
        "Solving out 6 exercises and learn by examples",
        "How to Simulate your VHDL design",
        "Upload the VHDL code to a real FPGA with development board",
        "VHDL structure, types, variables and how to write the code right"
      ],
      "course_content": {},
      "requirements": [
        "Familiar with logic gates",
        "Familiar with digit represents such as Binary and Hexadecimal"
      ],
      "description": "Learn VHDL for FPGA Development – From Basics to Real-World Applications\nThis course, created by a professional electronic engineer specializing in FPGA development, is designed to take you from the basics of VHDL programming to advanced FPGA implementation.\nNo prior knowledge of VHDL or FPGA is required. You'll start with the fundamentals, including the structure of FPGAs and CPLDs, to build a solid foundation before diving into VHDL programming.\nWhat you’ll learn:\nThe basics of FPGAs/CPLDs and their role in digital design.\nVHDL code structure, from simple to complex designs.\nData types, design units, and VHDL statements.\nWorking with clocks and resets for real-world signal synchronization.\nPractical coding techniques for communication and data processing.\nWith over 50 lectures, this course provides hands-on exercises to reinforce your learning. You’ll complete six projects, starting with basic tasks and progressing to more challenging designs. By the end, you’ll upload and debug your code on a real FPGA using Xilinx tools, including the Integrated Logic Analyzer.\nHere’s what students say:\n“Excellent explanation and easy to understand examples on FPGA.” – N Venkata Bhaskar\n“Covered all concepts step by step with examples.” – Umesh Kumar Sharma\nWhether you’re a beginner or looking to enhance your skills, this course offers valuable insights into FPGA design. Start your VHDL journey today!",
      "target_audience": [
        "Anyone who wants to know VHDL and how to code in VHDL",
        "Anyone who wants to know FPGAs/CPLDs world",
        "Anyone who wants a better resume for his next job with a must knowledge for any Hitech company"
      ]
    },
    {
      "title": "How To Build a Computer: A Beginner's Guide",
      "url": "https://www.udemy.com/course/how-to-build-a-computer-a-beginners-guide/",
      "bio": "Build a computer from scratch, while learning about each component and how they work along the way.",
      "objectives": [
        "Build your first computer from scratch!",
        "Gain a basic knowledge of PC components and how they interact!",
        "Learn how to shop for components that have a high dollar-to-performance ratio!"
      ],
      "course_content": {},
      "requirements": [
        "Knowledge of basic computer usage is necessary for this course."
      ],
      "description": "** Note For New Students **\nThe first section of my course is designed to be a classroom format, with pictures and documents for learning. If you're looking for a step by step video guide on handling physical hardware, what it is and how to put it together, please skip to the 2nd half of the course (the Lab section).\nOver 1000 students joined in the first week of release!\n\nOver 2700 students at the time of this writing!\nA big THANK YOU to my students for making this the HIGHEST RATED (5 STARS!), MOST POPULAR COURSE for building a computer on Udemy!\nJust added in 2017 - How to build a liquid cooled high-performance gaming PC!\n________________________________________\nHave you ever wanted to build your own computer?\nWould you like to know what each component does?\nDo you want to know how to get the best bang for your buck?\nThis course will begin with some explanation of different terminology when it comes to PC components. You'll learn how each component connects to each other, their purposes, things to watch out for when purchasing components, and how to decide what parts need to perform better based on the tasks you want the computer will do.\nYou'll go through the steps of building your first computer piece by piece, with great attention to detail along the way. Afterwhich, you'll learn the process of installing an operating system on the computer, to make the system fully functional and ready to use!\nThis course will evolve over time.. Later installments may include things like:\nHigh-end Gaming PC Builds (Done and added to course!)\nWater Cooling (Done and added to course!)\nHome Theater PC Builds\nRaspberry PI Builds\nHackintosh Builds\nIn the first installment, you'll learn how to build a general usage PC that will perform well for daily use, using a classroom lecture format.\n** First course expansion released! **\nShowing how to build a computer hands-on was easily the most requested feature after the course's original release. So, we've put together a giant new section on building an extremely high performance liquid cooled overclocked gaming PC! You will find this section at the end of the course.\n\nBuy now to get the most value!\nOriginal Pricing - $25\nAfter 2017 Expansion - $50\nAs the course evolves and content is added, the pricing will go up with each installment. Get in now at the low cost of $50 and receive all of the new content for free!\n\nAs a student, you will also receive special discounts unavailable elsewhere for Nathan's other courses that are currently in the works!\nAnd as always, 30-day refunds are 100% guaranteed if your satisfaction is not met!\nThank you! Thank you for taking a look at this course on Udemy!",
      "target_audience": [
        "This course is meant for hobbyists, students and technology enthusiasts that want to build a well performing computer for themselves or for a friend!"
      ]
    },
    {
      "title": "Bitcoin Mining using Raspberry Pi",
      "url": "https://www.udemy.com/course/bitcoin-mining-using-raspberry-pi/",
      "bio": "Get up and running with Bitcoin Mining in no time",
      "objectives": [
        "Understand all the concepts related to bitcoin mining.",
        "Implement bitcoin mining using a Raspberry Pi."
      ],
      "course_content": {
        "Basics of Bitcoin mining": [
          "What you will learn in this course and Introduction to Bitcoins",
          "Terminologies associated with Bitcoin Mining",
          "Bitcoin Mining, Solo mining and Pooled mining",
          "Classsification on the basis of Hardware",
          "Basics of Bitcoin mining"
        ],
        "SHA and Blockchain": [
          "SHA256",
          "The Blockchain",
          "SHA and Blockchain"
        ],
        "Wallet and Account setup": [
          "Setting up your Bitcoin wallet",
          "Creating Mining pool account",
          "Synchronizing wallet to pool",
          "Wallet and Account setup"
        ],
        "Implementation": [
          "Hardware requirements",
          "Hardware requirments and connection diagram",
          "Connection explanation and starting with Raspberry Pi",
          "Installing BFGMINER",
          "Configuration and Execution",
          "Implementation"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "The students need not know anything prior to taking up this course.",
        "All theoretical concepts will be explained from basics."
      ],
      "description": "This course explains to you about bitcoin mining from its very basics. Initially, you will learn about all the different terminologies associated with the mining process. It includes the description of Blockchain, bitcoin wallet, signature, cryptography etc. You will also be explained about the types of mining on the basis of different parameters such as hardware and number of people involved in the mining process. You'll also be briefed about the SHA, which is an algorithm used for implementing bitcoin mining.\nYou will then learn about the blockchain. A sample of the blockchain and the transactions are shown for you to understand the concept clearly.Then you will see what a bitcoin wallet is and how to get a bitcoin wallet for yourself. You'll then learn about how to setup an account for bitcoin mining and synchronization of a bitcoin wallet to this mining account.\nYou will be briefed about the hardware components required for a bitcoin mining setup. You'll be shown how to connect the components and a step by step implementation of the mining process will then be explained using linux commands.",
      "target_audience": [
        "Anyone who is interested to know what Bitcoin mining actually is.",
        "Anyone who wants to learn how to use a Raspberry Pi for the mining process."
      ]
    },
    {
      "title": "Learn bits and bytes of Raspberry Pi & IoT using Node-red",
      "url": "https://www.udemy.com/course/learn-iot-with-node-red/",
      "bio": "A Beginners guide to getting started with Raspberry Pi and Node-red for IoT applications",
      "objectives": [
        "Understand Nodered programming Language for IoT projects",
        "Raspberry Pi and nodered programming",
        "Using node-red to read sensors, and create a variety of IoT applications",
        "BMP180, DHT, Ultrasonic Sensors and Raspberry Pi SenseHAT",
        "Writing Custom javascript in nodered and control output",
        "Using Network Protocols, HTTPs and MQTT for IoT Application"
      ],
      "course_content": {
        "What is Nodered and Why Use It?": [
          "Introduction to Nodered",
          "About taking this course",
          "Installation of Nodered on Windows PC",
          "Creating First Program in Nodered (aka flow)",
          "Creating Your Second Flow"
        ],
        "Raspberry Pi Fundamentals and Getting Your Raspberry Pi Boot Up": [
          "What is Raspberry Pi Computer - Part 1",
          "What is Raspberry Pi Computer - Part 2",
          "Install OS to Raspberry Pi",
          "Downloading OS for Raspberry Pi Computer",
          "Install Raspbian OS using NOOBs Installer [Optional For Ref Only]",
          "Simplest way to Install OS on Raspberry Pi Without External Monitor [2023]",
          "Installation of Raspberry PI 5 OS without using Monitor [2024]",
          "Remote Control Raspberry Pi using VNC Viewer",
          "Get to know about Raspberry Pi - Part 1",
          "Get to know about Raspberry Pi - Part 2",
          "Get to know about Raspberry Pi - Part 3",
          "Raspberry PI Quiz"
        ],
        "How to Interface with Hardware Peripheral Devices Using Nodered": [
          "Interfacing of LEDs with Raspberry Pi GPIO Part 1",
          "Interfacing of LEDs with Raspberry Pi GPIO Part 2",
          "Interfacing Relay with Raspberry Pi GPIO Part 1",
          "Interfacing Relay with Raspberry Pi GPIO Part 2",
          "Interfacing Relay with Raspberry Pi GPIO Part 3",
          "Interfacing Relay with Raspberry Pi GPIO Part 4",
          "Pi quiz"
        ],
        "Use Switch to Trigger Output Action Using Nodered": [
          "Blink LED using Switch Input"
        ],
        "How to Interface Sensors with Raspberry Pi and Nodered": [
          "Using SenseHAT with Raspberry Pi",
          "Connect SenseHat to Raspberry Pi and Writing Flow For It",
          "No SenseHAT? Use the simulator",
          "Using MultiColor LED Matrix Display of SenseHat",
          "Write Javascript within Nodered to Parse Sensor Values",
          "Conditional Statements in Nodered on SenseHat Sensor Values",
          "Interfacing DHT11/DHT22 Sensor with Raspberry Pi using Nodered Part 1",
          "Interfacing DHT11/DHT22 Sensor with Raspberry Pi using Nodered Part 2"
        ],
        "Fundamentals of Internet of things and Creating First Project Using Thingspeak": [
          "Getting Started with Internet of Things",
          "What Are The Hardware Devices Used For IoT",
          "Getting Started with IoT - Thingspeak.com",
          "How To Use Nodered to Send Values to Thingspeak.com"
        ],
        "What is MQTT Protocol and How to Use with Nodered": [
          "What is MQTT",
          "Send Values to MQTT Broker Using nodered",
          "Send Sensor Values to MQTT Broker Using Nodered"
        ],
        "Complete IoT Project using Raspberry Pi, Nodered and Adafruit IO Cloud Server": [
          "Home Automation using Adafruit IO and Nodered"
        ],
        "How to Run Nodered on Boot and Exporting Flows for Portability and Storage": [
          "How to Export and Import Flows",
          "Running Nodered Flow on Boot on Raspberry Pi"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Have little understanding of IoT Concept",
        "Basic Know-how of Raspberry Pi is recommended but not needed",
        "Recommended Hardware : raspberry Pi Computer"
      ],
      "description": "\"I believe everyone can learn and excel in technologies with right tools and proper guidance. Hence I make these courses and 50% of all my courses is available for free preview, watch them, if you feel right, enroll!!! I hope you'd like this transparency!!!\"\nWhat is there to loose if you enroll in this course? You have a 30-day Full Money Back Guarantee, enrol now and start creating IoT projects using Node-red\"\nI believe that anyone not only learn but excel in node-red and Raspberry Pi, with a strong desire to learn and proper guidance. And hence I have created this course with my 10+ years of experience, especially for beginners in electronics design to learn about Raspberry Pi and Node-red for IoT projects. If you are a beginner looking to learn Raspberry Pi and Node-red, you might wanna enroll now.\nLots of People want to Learn Raspberry Pi and Internet of Things. But many times, there are quite a few hurdles. Someone does not know about raspberry pi and some do not know about computer programming, and many don’t know the integration of sensors and cloud servers. If this feels like you, then this course is precisely made for you. In this course, you’ll learn about Raspberry Pi and IoT applications using Node-red. Node-red has standardized the world of IoT where one can write program by simply creating “Flows” which are drag and drop blocks which are interconnected to each other.\nYou'll create your first node-red flow within 20 minutes of enrolling to the course\nHi, my name is Amit Rana, am an engineer, programmer and developer. I have trained more than 20000 students from across 150+ Countries. I have created this course for everyone who wants to learn IoT and node-red.\nThis is a complete beginner friendly course and no previous knowledge of Raspberry Pi or node-red is needed to take this course.\nTake the Free Preview (test drive the course even before enrolling)\nTake the free preview before enrolling the course, 30% of the course is free for you. Decide if its good for you or not even before enrolling. See and decide if you can understand and cope up with the content and the presenter of the course. I have spent hundreds of hours (literally) in creating this course and hence want to help maximum students with it. For many of the learners, even this 30% of the content is all they were looking to learn.\nCourse Highlights\n--> Raspberry Pi (from scratch, installation of OS and onward)\n--> Hardware Interfaces\n--> Nodered\neverything kept cool with minimum hardware required so you don't feel overwhelmed.\n\n\nDetailed Course Contents:\n· What is Raspberry Pi\n· How to use Raspberry Pi\n· How to install Operating System on Raspberry Pi\n· How to install node-red on windows machine and raspberry pi\n· How to create your first flow in node-red\n· How to perform Hardware interfacing with Raspberry Pi using Node-red\n· Interfacing of LEDs, and relays as output devices on Raspberry Pi and Node-red\n· Connecting sensors to Raspberry Pi and creating flow in node-red\n· Sensor DHT11 and SenseHAT sensors interfacing\n· If you don’t have senseHAT, you can use SenseHAT emulator\n· What is IoT and what are the protocols needed for IoT\n· What is MQTT\n· How to send data to mqtt broker using node-red\n· Project : Send sensor data to Hive MQTT broker using node-red\n· Project : send sensor data to Thingspeak Cloud server using node-red\n· Complete Iot Project : send sensor data to cloud server and receive control signals to control devices using node-red\n· How to export Flows of node-red to be saved and sent over\n· How to run Node-red on startup to run your flows automatically\nThis is a comprehensive beginners-oriented program where one will go through everything including raspberry pi to node-red from scratch.\nThis is a complete beginner friendly course and no previous knowledge of Raspberry Pi or node-red is needed to take this course.\nAbsolutely nothing is taken for granted and hence this is most suitable for participants of all ages and educational backgrounds.\nWith more than 10 years of experience in teaching embedded systems, circuit design and IoT to thousands of students from ages 10 to 60, you can count on me that I know my subject well. Join now to start creating IoT project for your hobby or college project or for your next tech-start-up\nWhat this course will NOT do for you?\nPlease be advised that this is a complete beginners course to understand about Raspberry Pi and Node-red\nThis course is not suitable for existing node-red developers or those who already know project making using node-red.\nThis course does not include any tutorial of PLC/SCADA\nEnroll Now and enter this wonderful journey of IoT",
      "target_audience": [
        "Working Professionals",
        "Students",
        "Hobbyists and Project Developers"
      ]
    },
    {
      "title": "Obstacle Avoiding Robot with Raspberry Pi",
      "url": "https://www.udemy.com/course/obstacle-avoiding-robot-with-raspberry-pi/",
      "bio": "Make your own Obstacle Avoiding Robot and start making amazing application such as fire fighting and remote control",
      "objectives": [
        "Make your own Obstacle Avoiding Robot with Raspberry Pi",
        "Interface Ultrasonic Sensors with Raspberry Pi",
        "Interface IR Sensors with Raspberry Pi",
        "Interface Motors with Raspberry Pi"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Section Intro",
          "Introduction",
          "Planning an Obstacle-Avoiding Robot Project",
          "Very Important Note: Review Process",
          "Required Material",
          "Quiz",
          "Section Summary",
          "Reading Material"
        ],
        "How Things Work": [
          "Section Intro",
          "Raspberry Pi and Ultrasonic Sensor",
          "IR Sensor and Motor Driver",
          "Voltage Regulator and DC Motors",
          "Exploring Component Interactions: Sensors, Motors, and Power Regulation",
          "Section Summary",
          "Reading Material"
        ],
        "Circuit Diagram": [
          "Section Intro",
          "Circuit Diagram",
          "Designing and Interpreting Circuit Diagrams",
          "Section Summary",
          "Reading Material"
        ],
        "Code": [
          "Section Intro",
          "Code",
          "Quiz",
          "Section Summary",
          "Reading Material"
        ],
        "The End": [
          "Section Intro",
          "The End",
          "Material",
          "Section Summary",
          "Reading Material"
        ],
        "Practice Test": [
          "Section Intro",
          "Raspberry Pi Sensor Integration and Circuit Design",
          "Section Summary",
          "Reading Material"
        ],
        "Who we are?": [
          "Section Intro",
          "Who We Are?",
          "Section Summary",
          "Reading Material"
        ],
        "Course Project": [
          "Section Intro",
          "Course Project",
          "Obstacle-Avoiding Robot Navigation Review",
          "Section Summary",
          "Reading Material"
        ],
        "Course Wrap-Up": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic experience in Electronics",
        "Basic experience in Raspberry Pi",
        "A Will to apply, not just watch",
        "Intermediate Experience in Python"
      ],
      "description": "The Logic of Obstacle Avoiding Robot\nAs technology continues to evolve so does the need for creativity in the construction of new and more advanced robots. One such example is an obstacle-avoiding robot with Raspberry Pi. The purpose of this project is to construct a robot that avoids obstacles and follows a set path, and the results were quite successful.\nThe opportunity for creativity with this Raspberry Pi course is infinite. With total freedom to choose your own path in creating your very own custom-designed Obstacle Avoiding Robot, you will have so much fun while learning about electronics, programming, computer science, and innovation.\nRaspberry Pi has been programmed with a variety of sensors. The sensors include a Basic Sensor Kit from Sparkfun and a Servo HAT from Adafruit Industries. For obstacle avoidance purposes, a varied configuration is necessary for objects in the environment to be able to be avoided. The Raspberry Pi has been equipped with infrared LEDs, an infrared receiver, and an ultrasonic sensor.\nIt is a small and affordable computer that, when combined with the right accessories, can be used to create an obstacle-avoiding robot.\nWhy you should take this course?\nThe course is designed for beginners.\nThis Raspberry Pi course teaches you how to program your own obstacle-avoiding robot using the Raspberry Pi.\nHelps you to create amazing applications such as fire fighting and remote control.\nLearn robotics programming.\nYou can make this robot for all occasions like teaching children about safety at the park or creating a robot pet for kids.\nThe course will teach you how to design your own circuits for your robots by using an Arduino, which is an open-source electronics prototyping platform.\nYou will be able to build working projects that are fun and educational.\n>>> Continues Updates <<<\nMore Than 700 STUDENTS!!! THANK YOU!!!\nWhat students are saying:\nSam Ander says, \"Thanks, good information\"\nWelcome to this course.\nThis course will teach you how to make your own Obstacle Avoiding Robot and start making amazing applications such as fire fighting and remote control. This guide will take you in a step-by-step manner to know what each component inside this circuit is, and what it does and how to wire it up, starting with the Ultrasonic Sensor, IR Sensor, Motor Driver and ending with resistors.\nYou will know what is the actual working principle of Ultrasonic Sensor and IR Sensor and how to interface and configure them correctly so that you can detect objects in the surrounding with your Raspberry Pi Powered device easily and effectively.\nAfter this course, you will be able to make your own Obstacle Avoiding Robot with Raspberry Pi and the choice is yours to use it in any application that comes to your mind and can make your life easier, as all connections are explained in detail.\nGoal From This Course:\nConnect Arduino Ethernet Shield to Arduino Board with all necessary components and make it internet-based.\nWhat you will learn in this Course:\nHow to connect Motor Driver Module to Raspberry Pi.\nHow to connect Ultrasonic and IR Sensors to Raspberry Pi.\nHow to detect the presence of objects and take actions using Raspberry Pi.\nHow Ultrasonic and IR Sensors actually work.\nHow to interface different types of electronic elements with Raspberry Pi.\nHow Raspberry Pi can make your life easier.\nHow to program, burn a code, and wire Raspberry Pi and different modules.\nWhat are the right tools that you need to start making amazing projects.\nWhy using control with Raspberry Pi is better than traditional control methods.\nDescription should have minimum 200 words.\nBasic info:\nCourse locale: English (US)\nCourse instructional level: All Levels\nCourse category: IT & Software\nCourse subcategory: Hardware\nWhat is primarily taught in your course?\nTopic: Robotics\nPrimary Topic: Raspberry Pi\n\n\nAbout the Instructor:\nEducational Engineering Team\nTeam of Skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading entity in the Microcontroller industry with over 13 Years of Experience in teaching and practical projects. We provide in-depth, step-by-step blueprints on taming complex topics in easy and digestible bite-sized videos.\nHaving been in the Programming and Microcontroller business since 2007, we've catered to students' and educators' needs, teaching over 250k-THOUSAND students and counting through our 100+ courses on Udemy.\nAshraf Said AlMadhoun is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He is the Chief Educational Engineer at Educational Engineering Team, a company founded to explore new trends and technologies and to educate the world.\nOur online courses have helped over 250,000 people globally to excel and make great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Raspberry Pi Geeks",
        "Electronics Geeks",
        "Anyone Interested in Learning New Things about Raspberry Pi"
      ]
    },
    {
      "title": "Arduino Programming and Simulation without Coding",
      "url": "https://www.udemy.com/course/arduino-programming-and-simulation-without-coding/",
      "bio": "Start working with different Arduino boards without buying them and start unleashing the power of code in Simulation",
      "objectives": [
        "Simulate Arduino UNO Boards",
        "Simulate Arduino Mega Boards",
        "Simulate Arduino nano Boards",
        "Write codes and test them without having an Arduino Board",
        "Test Codes without having a real physical an Arduino Board"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Section Intro",
          "Introduction",
          "Exploring Visual Simulation and No-Code Programming for Arduino",
          "Create Your FREE Account",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "Interface Explained": [
          "Interface Explained",
          "Summary",
          "Reading Material",
          "Understanding the Simulation Interface"
        ],
        "Arduino Output Basics": [
          "Section intro",
          "Arduino Digital Output - Led Control",
          "Arduino Dealing with Multiple LEDs and Breadboard",
          "Arduino Analog Output - Fading LED",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "Arduino Input Basics": [
          "Section Intro",
          "Reading Digital Input",
          "Reading Analog Value",
          "Understanding Arduino Input Using Push Buttons",
          "Summary",
          "Reading Material"
        ],
        "Arduino RGB Leds + Potentiometers": [
          "Section Intro",
          "Dealing with RGB Leds with Potentiometers",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "Serial Monitor": [
          "Section Intro",
          "Arduino Serial Monitor",
          "Summary",
          "Reading Material"
        ],
        "Practice Test": [
          "Arduino Programming and Simulation Fundamentals Practice Test"
        ],
        "Who we are?": [
          "Who We Are?"
        ],
        "Course Project": [
          "Course Project",
          "Presenting a Fully Simulated Arduino Project Built Without Code"
        ],
        "Course Wrap-Up": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Have A Computer",
        "Have A basic Experience in browsing the internet",
        "Have a Will to apply",
        "No materials required if you only wish to view the course"
      ],
      "description": "The Arduino is an open-source electronics platform based on easy-to-use hardware and software. Sensing the environment by receiving inputs from many sensors, Arduino affects its surroundings by controlling lights, motors, and a number of other accessories. It's intended for anyone making interactive hardware projects and in this course, we will make it easy for you to Design and Simulate Arduino Boards and Start Testing Your Codes Freely.\nSo, if you want to make cool things using your Arduino, but don't know how to code, this is the course for you!\nThis course will help you learn how to program Arduino without having to use any complicated coding. With helpful illustrations and step-by-step instructions, this is a great way for beginners to get started in Arduino programming. You can also enhance your skills with fun memory games that challenge you to think like an engineer!\nWhy you should take this course?\nLearn how to program Arduino boards without coding with a simulation tool\nLearn how to use Arduino for electronics projects and build standalone applications\nCreate interactive projects using buttons, switches, and dials\nSimulate Arduino programming before actually building\nBe able to create your own boards or circuits that work flawlessly with Arduino software\nWelcome to Arduino Programming and Simulation without Coding.\nIn this course, you will learn how to Simulate different Arduino Boards in a Professional Simulation Environment. It will help you unleash your full coding potential without buying any of the Arduino boards.\nThis course will help you test your codes and schematics for Arduino without the risk of burning your board. No more bad connections or wrong codes.\nContents and Overview:\nThis course is designed for anyone interested in learning electronic design. You don't need to have any previous experience, and all you need is a computer.\nBoards that can be Simulated:\nArduino Uno\nArduino Mega\nArduino Nano\nArduino Zero\nAnd others\nUser Testimonials: \"This course made Arduino programming accessible and fun. Highly recommend it!\" - John D.\n\"A fantastic way to start learning Arduino without the need for hardware. Excellent course!\" - Sarah M.\nAuthor Bio: Ashraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. As a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world. With over 250,000 students from around the world, Ashraf’s online courses have helped many to kick-start their careers in the industry.\nCall to Action: Enroll now to start your journey into Arduino programming and simulation without the need for coding. Unleash your creativity and build amazing projects today!\nFAQ: Q: Do I need any special equipment or software to take this course? A: No, you only need a computer with internet access and the free software mentioned in the course.\nQ: How quickly can I start creating Arduino projects after taking this course? A: Results may vary, but many students see success within the first few projects by following the strategies taught in this course.\nWhat You Will Learn\nHow to program Arduino boards without coding\nHow to use simulation tools for Arduino projects\nHow to create interactive projects using buttons, switches, and dials\nHow to test Arduino codes and schematics without hardware\nWho Is This Course For\nBeginners interested in Arduino programming\nHobbyists and makers looking to learn Arduino without buying hardware\nAnyone interested in electronic design and simulation\nRequirements\nA computer with internet access\nNo prior coding experience needed\n\n\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading team in the Microcontroller Industry, with over 13 Years of Experience in teaching and doing practical projects. They strive to provide deep, hands-on experience in their courses, offering step-by-step blueprints on various topics.\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and maker. He has been the Chief Educational Engineer at Educational Engineering Team since 2007, and his mission is to explore new trends and technology to help educate the world. His online courses have helped over 250,000 people worldwide to build successful careers.\nEducational Engineering Team offers courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Arduino Geeks",
        "Anyone looking to learn Arduino but don't want to buy the boards",
        "Anyone looking to learn Arduino without spending any money buying different boards",
        "Anyone starting their journey in Microcontrollers"
      ]
    },
    {
      "title": "8086 Microprocessor - Architecture & Programming",
      "url": "https://www.udemy.com/course/8086-microprocessor-architecture-programming/",
      "bio": "Assembly Language Programming for 8086 Microprocessor",
      "objectives": [
        "Illustrate the working of processor based system",
        "Understand the architecture of 8086 microprocessor",
        "Understand the instruction set of 8086 microprocessor",
        "Develop the assembly language programs using instruction set of 8086 microprocessor",
        "Learn to use emu8086 software to write, debug and execute assembly language program of 8086 microprocessor",
        "Learn to use MASM software to write, debug and execute assembly language program of 8086 microprocessor"
      ],
      "course_content": {
        "Introduction to Microprocessor": [
          "Introduction",
          "Basic Understanding of Processor Based System",
          "Basics of Memory Interfacing with processor (Part 1)",
          "Basics of Memory Interfacing with processor (Part 2)",
          "Basics of Memory Interfacing with processor (Part 3)",
          "General Operation of Processor (Part 1)",
          "General Operation of Processor (Part 2)",
          "Evolution of Microprocessors",
          "Challenge-1"
        ],
        "Architecture of 8086 Microprocessor": [
          "Architecture of 8086",
          "Pipelining Concept",
          "Register Organization of 8086",
          "Flags of 8086 Microprocessor",
          "Memory Segmentation",
          "Challenge-2"
        ],
        "Signed and Unsigned Numbers": [
          "Signed and Unsigned Number Representation (Part 1)",
          "Signed and Unsigned Number Representation (Part 2)",
          "Examples on Signed and Unsigned Operation"
        ],
        "Addressing Modes": [
          "Addressing Mode (Part 1)",
          "Addressing Mode (Part 2)",
          "Addressing Mode (Part 3)"
        ],
        "Assembly Language Programming": [
          "Programming Example (Part 1)",
          "Programming Example (Part 2)",
          "Programming Example (Part 3)",
          "ADD Instruction & Addition Program Example (Part 1)",
          "ADD Instruction & Addition Program Example (Part 2)",
          "Challenge-3"
        ],
        "Assembler Directives": [
          "Demonstration of emu8086 Software",
          "Assembler Directives",
          "Assembler Directives (emu8086 Software Demonstration)",
          "Programming Using Assembler Directives",
          "Programming Using Assembler Directives (emu8086 Software Demonstration)"
        ],
        "Logical Instruction & Programming Examples": [
          "Logical Instruction (Rotate)",
          "Logical Instruction (Shift)",
          "Program (Reject Negative Numbers from a series)",
          "Comparison Instruction",
          "Program (Find Larger Number)",
          "Stack"
        ],
        "MASM Software demonstration & Programming Examples": [
          "MASM Software demonstration",
          "BCD to ASCII Code Conversion Program",
          "Convert Packed BCD number to Unpacked BCD number",
          "Reject negative numbers and store positive numbers",
          "Count even and odd numbers"
        ]
      },
      "requirements": [
        "No prior programming skills needed."
      ],
      "description": "This \"8086 Microprocessor - Architecture & Programming\" Lecture Series explains the in-depth architecture, instruction set, assembly language program, and directives of the 8086 microprocessor. In the lecture series, the in-depth demonstration of emu8086 and MASAM is also done. The emu8086 and MASAM software are used in this lecture series for writing and debugging assembly language programs. This lecture series contains a vast number of programming examples along with its demonstration using emu8086/MASAM software. After completion of this course learners will be able to:\n1. Understand the development of microprocessor\n2. Understanding the Processor-Based System\n3. Understanding the Memory Interfacing with the processor\n4. Illustrate the General Operation of the Processor\n5. Explain the Evolution of Microprocessors\n6. Understand the Architecture of the 8086 microprocessor\n7. Illustrate the Pipelining Concept\n8. Explain the Register Organization of the 8086 microprocessor\n9. Summarize the status flags of the 8086 microprocessor\n10. Summarize the machine control flags of the 8086 microprocessor\n11.. Explain the significance of each bit of the flag register\n12. Understand the signed and un-signed operations\n13. Illustrate the concept of memory segmentation\n14. Differentiate different addressing modes\n15. Demonstrate the emu8086 Software for the development of the assembly language program of the 8086 microprocessor\n16. Demonstrate the MASM Software for the development of the assembly language program of the 8086 microprocessor\n17. Understand different instructions\n18. Write, debug and execute various programs in the assembly language of the 8086 microprocessor\n19. Understand the stack concept",
      "target_audience": [
        "Beginners to learn architecture of 8086 microprocessor",
        "Beginners to learn assembly language program of 8086 microprocessor",
        "Undergraduate engineering students from Electronics, Electrical and Computer Science branches",
        "Diploma students from Electronics, Electrical and Computer Science branches"
      ]
    },
    {
      "title": "Siemens S7-1200 PLC & HMI using TIA Portal",
      "url": "https://www.udemy.com/course/learn-tia-portal-from-basics/",
      "bio": "Ladder Logic Programming of Siemens PLC and HMI using TIA Portal V15",
      "objectives": [
        "To understand how a Programmable Logic Controller (PLC) works",
        "Pass a technical PLC interview",
        "Understand how to program a PLC",
        "Learn Ladder Logic Programming",
        "Industrial Automation",
        "TIA Portal programming interface"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Introduction of Relay Logic": [
          "Introduction of Relay Logic"
        ],
        "PLC Wiring": [
          "PLC Wiring"
        ],
        "How to Download and Install TIA Portal V15": [
          "Download and Install TIA Portal V15"
        ],
        "Basics of TIA Portal": [
          "Basics of TIA Portal Software and Communication with PLC"
        ],
        "Data Types": [
          "Data Types"
        ],
        "Branches and Rungs": [
          "Branches and Rungs"
        ],
        "Basic Parameters": [
          "Basic Parameters Part 1",
          "Basic Parameters Part 2",
          "Assignment 1"
        ],
        "Logic Gates": [
          "Logic Gates"
        ],
        "Latching": [
          "Latching"
        ]
      },
      "requirements": [
        "Basic Electrical Hardware Understanding",
        "PLC Software (Included in the Course)"
      ],
      "description": "This is a comprehensive course for learning the basic level programing of Siemens S7 1200/1500  PLC in TIA Portal V15 software. You will learn the logic designing of TIA Portal from scratch in a short period. No hardware equipment will be required to follow the course you will just have to install TIA Portal V15 software on you PC and you can do it. Fundamental programming of TIA Portal will be covered step by step including the video lectures, assignments and solved examples.\nCouse Outline:\n1. Introduction to Course\n2. Introduction of Ladder Logic\no Basics of Relay Logic (How Relay Works)\n3. PLC Wiring\no Inputs, Outputs\no Power Supply\no Sink Source\no Ethernet Communication\no NPN & PNP Sensors\n4. Download and Install the TIA Portal V15\n5. Basics of TIA Portal Software and Communication with PLC\no How to Create a New Project\no Selection of Device\no Device Configuration\no Programming Blocks\no How to Create Tags (Data Types)\no TIA communication with Simulator/PLC\n· How to Monitor the Program Online\n· How to Load Program in Simulator\n· How to Build Ethernet Connection with PLC and Load Program\n6. Data Types for Siemens\n7. Branches and Rungs\no Rungs\no Series and Parallel Connections\no How to Name a Network\n8. Basic Parameters\no Normally Open Contact\no Normally Close Contact\no Output Coil\no Series-AND Logic\no Parallel-OR Logic\no Parallel-NAND Logic\no Series-NOR Logic\no Interlocking of Motors\no Assignment_1\n9. Logic Gates\no Basics of Digital Logic Design\no Truth Tables\no Digital Logic to Ladder Logic\n10. Latching\no Latch and Unlatch an Output\no Set and Reset an Output\n11. Extended Instructions\no Clock Cycle of PLC\no Positive Pulse/Rising Edge\no Negative Pulse/Falling Edge\no Positive edge trigger\no Negative edge trigger\no Setting an Output with Pulse\no Assignment_2\n12. Timers\no On Delay Timer\n• Enable of Timer\n• Specifying the Duration of Time\n• Resetting a Timer\no Off-Delay Timer\no Retentive On-Delay Timer\no Assignment_4\no Pulse Timer / TP Timer\no Generating a Pulse of Specific Time Interval\no Assignment_3\n13. Counters\no Up Counter\n• Resetting a Counter\no Down Counter\no Up-Down-Counters\no Assignment_5\n14. MOVE Command\no Moving Operands\no Moving Constants\n15. Comparator operations\no Equal (=)\no Less Than (>)\no Greater Than (<)\n16. Arithmetic Operations\no Addition\no Subtraction\no Multiplication\no Division\no Assignment_6\n17. Conversion Operations\n18. Designing of Complex Systems using Ladder Logic\no Assignment (Chemical Processing Unit)\n19. Basics of HMI\n20. Problem solving approach\no Assignment (Sunrise and Sunset)\n21. Examples\no Fire Detection System\no Coffee Machine\n22. Assignments\no Traffic Signals Control\no Color Mixing Scheme\n_______________________________________________________________________________________________________________________________________\n\n\nall about tia portal,\ntia portal programming,\nbasics of tia portal software,\nhow to use timers in tia portal,\nhow to use counters in tia portal,\nhow to use move command in tia portal,\nhow to use comparators in in tia portal,\nhow to use math operators in tia portal,\nhow to define tags in tia portal,\nwhat is interlocking,\nwhat is ladder logic,\nsiemens hmi,\nwhat is a pulse timer in tia portal,\nlearn tia portal in short time,\nsiemens plc wiring,\ndata types in tia portal,\nhow to define registers in tia portal,\nnormally open and normally close contacts in tia portal,\nhow to use output coil in in tia portal,\npositive pulse and negative pulse operands in in tia portal,\nrising edge and falling edge operands in in tia portal,\narithmatic operators in tia portal,\nhow to do latching in tia portal,\nhow to use set and reset command in tia portal,\nelectrical plc training, freelance plc programmer, how to learn plc programming, learn plc programming, learning plc programming, plc application, plc based control system, plc class, plc classes, online plc, computer plc, controlled equipment, plc controller, training plc, course plc, full form plc, industry plc, interface plc, manufacturing plc, network plc, online courses plc, operation plc, programing course, plc programing courses, plc programing training, plc programmable logic controller, plc programmer training, plc programmers, plc programming classes, plc programming companies, plc programming course, plc programming courses, plc programming language, plc programming online course, plc programming school, plc programming service, plc systems, plc training courses, plc training courses online, plc-programs, plcs for dummies, program logic control training, program plc, program plcs, programing plcs, programmable controller application, programmable logic controller applications, programmable logic controller history, programmable logic controller training, what is a programmable logic controller, what is plc control, what is programmable logic controllers,",
      "target_audience": [
        "Anyone interested in learning how an industrial process works automatically",
        "Electrical, Electronics, Mechatronics and Telecom Engineers",
        "Production, Maintenance & Electrical Technicians"
      ]
    },
    {
      "title": "Verilog for an FPGA Engineer with Xilinx Vivado Design Suite",
      "url": "https://www.udemy.com/course/verilog-for-an-engineer-with-xilinx-vivado-design-suite/",
      "bio": "Using Xilinx FPGA's",
      "objectives": [
        "Fundamentals of Verilog Programming that will help to ace RTL Engineer Job Interviews.",
        "Understand Vivado Design Suite flow for Digital System Design.",
        "Hardware Debugging in Vivado viz. Integrated Logic Analyzer, Virtual I/O.",
        "Different Modelling Styles in Hardware Description Language.",
        "How to use Xilinx IP's and create Custom IP's.",
        "IP integrator Design flow of the Vivado.",
        "Writing Verilog Test benches.",
        "Design of some real world projects such as : PMOD DA4 DAC interface, Function Generator, Small Processor Architecture, UART Interface, PWM, BIST for Development boards and many more.",
        "Common Interview Questions"
      ],
      "course_content": {},
      "requirements": [
        "Fundamental of Digital Circuit will give an added advantages."
      ],
      "description": "FPGA's are everywhere with their presence in the diverse set of the domain is increasing day by day. The two most popular Hardware description languages are VHDL and Verilog each having its unique advantage over the other. The best part about both of them is once you know one of them you automatically understand the other and then the capabilities of both worlds can be used to build complex systems. The course focus on the Verilog language. The curriculum is framed by analyzing the most common skills required by most of the firms working in this domain.  Most of the concepts are explained considering practical real examples to help to build logic.\nThe course illustrates the usage of  Modeling style, Blocking and Non-blocking assignments, Synthesizable FSM, Building Memories with Block and Distribute Memory resources, Vivado IP integrator, and Hardware debugging techniques such as ILA and VIO. The course explores FPGA Design flow with the Xilinx Vivado Design suite along with a discussion on implementation strategies to achieve desired performance. Numerous projects are illustrated in detail to understand the usage of the Verilog constructs to interface real peripheral devices to the FPGA. A separate section on writing Testebench and FPGA architecture further builds an understanding of the FPGA internal resources and steps to perform verification of the design.",
      "target_audience": [
        "VLSI Job Seeker/ Graduate student looking to pursue career as RTL Engineer/ Design Engineer/ Verification Engineer.",
        "Anyone interested to learn Xilinx FPGA/ Vivado Design Suite/ Verilog Hardware Description Language",
        "Anyone interested to start career in ASIC/ VLSI domain."
      ]
    },
    {
      "title": "Start Learning Embedded Systems with AVR Atmega32 Controller",
      "url": "https://www.udemy.com/course/embedded-systems-with-avr-microcontroller/",
      "bio": "A Beginner Friendly Course to Quickly Learn AVR Microcontrollers using Embedded C without a development board",
      "objectives": [
        "Embedded Systems using AVR Atmega32 Microcontroller",
        "Embedded C Programming",
        "Atmel Studio",
        "I/O Interfaces",
        "LCD Interface",
        "Analog to Digital Converter on Atmega32",
        "Timers",
        "Counters",
        "Interrupts",
        "Serial Port",
        "Program Downloading on Hardware board"
      ],
      "course_content": {
        "Introduction to AVR Controllers": [
          "Introduction to Embedded Systems",
          "What are AVR Series Micro Controllers?",
          "Getting Started with Required Tools",
          "Features of Atmega32 Microcontroller",
          "Resources",
          "Changes to Atmel Studio"
        ],
        "Using Input Output Port Pins on AVR": [
          "Understanding Data Direction Register in AVR to Configure Input Output Ports",
          "First \"Hello World\" Program for Atmega32",
          "Interface 8 LEDs with Microcontroller and Write Data Bytewise to Outuput Port",
          "Using Individual Pins To Generate Bitwise Output",
          "Accepting Inputs From Digital Pins and Concepts of Pullup/Pulldown",
          "Write C Program for Accepting Digital inputs",
          "Coding Tasks for Digital Inputs",
          "Coding Task : Solution"
        ],
        "Interfacing Switching Circuits with Microcontroller": [
          "What Are Switching Circuits and Why We Need Them - Part 1",
          "What Are Switching Circuits and Why We Need Them - Part 2",
          "Interfacing Relay Switching with AVR"
        ],
        "How to Read AVR Atmega32 Datasheet": [
          "Reading Atmega32 Datasheet"
        ],
        "Interfacing 16x2 Liquid Crystal Display with Atmega32 Microcontroller": [
          "How to Interface LCD with Atmega 32 - Part 1",
          "How to Interface LCD with Atmega 32 - Part 2",
          "LCD Library for Future Usage",
          "LCD Interfacing Tasks",
          "LCD Source Codes"
        ],
        "How to Use Analog to Digital Converter on AVR Microcontrollers": [
          "What is ADC?",
          "How to Configure ADC of atmega32",
          "Use LM35 Analog Output Temperature Sensor with Atmega32"
        ],
        "How to Use Interrupts on AVR Microcontroller": [
          "What are Interrupts",
          "Interrupts On Atmega32",
          "How to Use External Interrupts on Atmega32",
          "External Interrupts and LCD"
        ],
        "Timers and Counters on AVR Microcontrollers": [
          "What are Timers?",
          "How to Use Timer on Atmega32?",
          "What is Counter and How to Use It?",
          "Use Timer as Event Counter"
        ],
        "Using Serial Communication (UART) on AVR Microcontrollers": [
          "What is Serial Communication",
          "Serial Communication Example",
          "Serial Communication in SimulIDE",
          "Serial Communication in Simulation"
        ],
        "Downloading Program Hex File on Atmega16/32 Microcontrollers": [
          "What Are Fuse Bits in AVR?",
          "How to Download Program Hex File Onto Microcontroller Flash Memory"
        ]
      },
      "requirements": [
        "Basic Electronics Understanding",
        "Basic know-how of C Programming is recommended but not required",
        "Atmel Studio (Link provided)",
        "SimulIDE simulation software (link provided)"
      ],
      "description": "\"With the right tools and guidance, I believe anyone can learn and master technology. That's why I offer 50% of the videos from all my courses as free previews. Feel free to watch them and enroll only if you believe the course is a good fit for you.\"\n\n\n\"Your One Negative Review ruins all the hard work and efforts I've put, I'm not a corporate company or even a 10 people startup. I'm a solo course maker. Any negative review hampers me deeply, please see all the trial videos, HALF of course is for free. They're in order and gives you complete idea about the Accent of Instructor, Quality of Content, and Value delivered through this course\"\nHave you been thinking of learning AVR microcontroller but couldn’t get a head start because its too confusing and you don’t have hardware?\nAnd on the top of it the incomplete tutorials on internet just makes things worse.\nWell this course is designed perfectly for those who wants to quickly start learning and experimenting.\nI have created this course to make learning AVR Controller easier and fun.\nI believe anyone can learn and excel using AVR controllers with Right guidance and proper tools.\nHi, my name is Amit Rana and I have created this course to get started with learning AVR microcontrollers using C coding. This is a complete beginner friendly Embedded systems course on AVR microcontroller. This course is designed for absolute beginners. We’ll be studying and experimenting on atmega32 microcontroller in this course using all simulation tools so its totally fine if you don’t have any hardware tools with you.\n\"What is there to loose if you enroll in this course? You have a 30 day Full Money Back Guarantee, enroll now and start learning AVR Controller\"\nFeatures\nComplete beginner friendly approach\nThose who are complete strangers to embedded systems can also join and start experimenting with Atmega32\nAll Practices on Simulation\nAll resources provided in single file\nRequired minimum Hardware exposure\nAfter taking this course, you'll be\nConfident and comfortable with Embedded Systems and its interfaces\nAble to create projects on atmega32\nLearn newer microcontroller with confidence\nGet good hands-on exercise on embedded C Coding\nTake Free Preview, you'll love it :)\nTake the free preview before enrolling the course, 50% of the course is free for you. Decide if its good for you or not even before enrolling. See and decide if you can understand and cope up with the content and the presenter of the course. I've spent hundreds (literally) of hours in creating this course and hence want to help maximum students with it. For many of the learners, even this 50% of the content is all they were looking to learn.\nIn this course, we’ll study about\nFundamentals of embedded systems\nAVR microcontrollers architecture\nPinout and features of atmega32\nAtmel studio and C programming with it\nInput and Output ports\nAnalog to Digital Converters\nTimers\nCounters\nLCD interface\nInterrupts\nSerial Port interface\nHow to perform all simulations\nAnd\nHow to download program into flash memory of microcontroller.\nYou’ll start creating your first program within an hour of starting this course.\nAs promised, it’s a beginner friendly course and hence complicated discussions are not included in this course to make this simple for beginners to understand\nAnyone who has some understanding of electronics can enroll in this course and start experimenting with Atmega32\nAll practices are taken in simulation software so you don’t need to purchase any additional hardware for it.\nBy the end of the course, I’ll also give you a complete layout of Atmega32 development board which you can make for yourself.\nSo enroll now and start experimenting on AVR controllers\n\"What is there to loose if you enroll in this course? You have a 30 day Full Money Back Guarantee, enroll now and start learning AVR Controller\"\nThank you\nAmit",
      "target_audience": [
        "Students",
        "Working Professionals",
        "Hobbyists",
        "Anyone interested to Learn AVR Controllers"
      ]
    },
    {
      "title": "Communication Series P1 : UART, SPI and I2C in Verilog",
      "url": "https://www.udemy.com/course/communication-series-p1-uart-spi-and-i2c-in-verilog/",
      "bio": "A Step-by-Step Guide",
      "objectives": [
        "Essential principles of UART, SPI, and I2C.",
        "Implementation of UART 16550A, PMOD DA4.",
        "Different Modes of SPI, Daisy Chain Configuration of SPI.",
        "Bit Banging"
      ],
      "course_content": {
        "UART": [
          "Communication Series Overview",
          "Interfaces Classification",
          "Overview",
          "Simple UART TX",
          "Simple UART RX",
          "Simple UART TB",
          "Design Code",
          "TB Code",
          "UART 16550A Overview",
          "UART 16550 : FIFO P1",
          "UART 16550 : FIFO P2",
          "UART 16550 : FIFO P3",
          "UART 16550 : FIFO P4",
          "FIFO TB",
          "Design Code",
          "Testbench Code",
          "UART 16550 TX : Understanding Oversampling in Baud Generator",
          "UART 16550 TX : LCR (Line Control Register)",
          "UART 16550 TX : Stop bits",
          "UART 16550 TX : TX Logic",
          "UART 16550 TX : TX TB",
          "Design Code",
          "TB Code",
          "UART 16550 RX : RX Logic",
          "UART 16550 RX : RX TB",
          "Design Code",
          "TB Code",
          "UART 16550 Registers : Overview",
          "UART 16550 Registers : THR and RBR",
          "UART 16550 Registers : Divisor Latch",
          "UART 16550 Registers : FCR and LCR",
          "UART 16550 Registers : LSR",
          "UART 16550 Registers : TB",
          "Design Code",
          "TB Code",
          "Complete Design",
          "TX testbench",
          "Design Code",
          "TB Code",
          "A11"
        ],
        "SPI": [
          "Overview",
          "Understanding SPI Protocol P1",
          "Understanding SPI Protocol P2",
          "Understanding SPI Protocol P3",
          "SPI protocol without different mode",
          "SPI Master P1",
          "SPI Master P2",
          "SPI Master P3",
          "Code",
          "SPI Slave P1",
          "SPI Slave P2",
          "Code",
          "Alternate Implementation",
          "Code",
          "Understanding CPOL behavior",
          "Implementation",
          "Code",
          "Understanding CPHA",
          "Understanding SPI Modes with different CPOL and CPHA",
          "Working with CPHA Master",
          "Master TB",
          "Code",
          "Working with CPHA Slave",
          "Code",
          "Digilent PMOD DA4 (Analog Devices AD5628) : Understanding Specifications",
          "Digilent PMOD DA4 (Analog Devices AD5628) : Master Design",
          "Digilent PMOD DA4 (Analog Devices AD5628) : TB",
          "Design Code",
          "TB Code",
          "Daisy Chain Configuration",
          "Master",
          "Slave",
          "Testbench",
          "Design Code",
          "TB Code",
          "One Notes",
          "A21"
        ],
        "I2C": [
          "Overview",
          "Understanding I2C Open Drain Interface",
          "Start and Stop Conditions",
          "I2C Write and Read Transactions",
          "I2C Master FSM without Clock Stretch",
          "I2C Master without clock stretch",
          "Master TB",
          "Design Code",
          "TB Code",
          "I2C Slave without clock stretch",
          "Testbench for top",
          "Design Code",
          "TB Code",
          "Bit Banging",
          "Understanding Clock Stretching",
          "Implementation of Master",
          "Implementation of Slave",
          "Design Code",
          "TB Code",
          "A31"
        ]
      },
      "requirements": [
        "Fundamentals of Digital Electronics, Verilog."
      ],
      "description": "This comprehensive course is meticulously designed to cater to a broad audience, ranging from beginners who are just stepping into the world of digital design and hardware description languages (HDLs) to experienced FPGA/ASIC developers looking to deepen their expertise. The central aim of this course is to equip participants with a thorough mastery of digital communication interfaces, employing Verilog as the primary tool. Regardless of your prior experience in the field, this course offers something valuable. Beginners will find a structured and gradual introduction to the complex world of digital communication interfaces and Verilog. The course spans a comprehensive curriculum that encompasses three fundamental digital communication protocols: Serial Peripheral Interface (SPI), Universal Asynchronous Receiver-Transmitter (UART), and Inter-Integrated Circuit (I2C). Each of these protocols plays a critical role in modern electronics and embedded systems, and mastering them is vital for both aspiring and experienced engineers.\nIn summary, this course is a transformative journey that welcomes participants at all skill levels into the world of digital communication interfaces and Verilog. It equips you with the skills, knowledge, and confidence needed to excel in the dynamic and ever-evolving field of digital design and embedded systems. Whether you're taking your first steps or seeking to advance your career, this course provides a robust foundation for your success.",
      "target_audience": [
        "A VLSI engineer is interested in constructing the foundational elements of the standard communication interfaces frequently utilized in FPGA systems."
      ]
    },
    {
      "title": "Internet Of Things- From Beginner To Making You First Device",
      "url": "https://www.udemy.com/course/internet-of-things-from-beginner-to-making-you-first-device/",
      "bio": "Gain Indepth Knowledge In IOT With This Course To Get A Job In IOT Or Turn Your Idea Into A Real IOT Device. Enrol Now.",
      "objectives": [
        "Hunt the relevant job opportunities in Internet Of Things industry",
        "Handle Internet Of Things job interviews more effectively",
        "Turn their idea into a real Internet Of Things device",
        "Start working towards becoming an Internet Of Things entreprenuer"
      ],
      "course_content": {
        "Introduction to Internet Of Things": [
          "The World Of IOT",
          "Global IOT Adoption"
        ],
        "Internet Of Things Applications": [
          "IOT Applications Overview",
          "Internet Of Things Consumer Application Examples",
          "Internet Of Things Enterprise Application Examples"
        ],
        "Internet Of Things Industry": [
          "IOT Ecosystem",
          "IOT Initiative By Samsung, Ninjashpere, Apple, Huawei, Hitachi",
          "IOT Initiative By Google, Allseen Alliance, Cisco, GE, IBM, DELL, Intel And AWS",
          "IOT Initiative By Azure, Oracle, SAP, Salesforce And PTC",
          "Job Opportunities In Internet Of Things",
          "Job Opportunities In Internet Of Things - Part 2",
          "Entrepreneurship Opportunities in IOT"
        ],
        "Components Of Internet Of Things Devices": [
          "IOT Sensors",
          "IOT Sensors and Actuators",
          "Communications In Internet Of Things",
          "DIY IOT Development Boards - Raspberry Pi",
          "DIY IOT Development Boards - Ardiuno, Intel Galileo",
          "Difference between Raspberry Pi and Arduino - Part 1",
          "Difference between Raspberry Pi and Arduino - Part 2",
          "Difference between Raspberry Pi and Arduino - Part 3"
        ],
        "Components Of Internet Of Things Devices - Part 2": [
          "IOT Platforms",
          "Internet Of Things Platform and Development Tools"
        ],
        "Make An Internet Of Things Device With Raspberry Pi": [
          "Introduction To Raspberry Pi Hardware",
          "Rasbberry Pi GPIO Pins",
          "Project Steps and Schematic Diagram",
          "Download Code File",
          "Project - Setting up connections",
          "Project - Code Overview",
          "Alert Email Code Overview",
          "Linux Commands"
        ]
      },
      "requirements": [
        "Excitement to learn about Internet of Things",
        "Basic knowledge of coding may be helpful but not necessary"
      ],
      "description": "Take your first step to get a job in internet of things industry or turn your internet of things idea into a real device. The beginners program will get your foot in the door of one of the fastest growing industries in the world.\n\nStarting from learning about the meaning of the term internet of things, we will together go through a series of lectures with an exciting ending of making your first Internet Of Things motion detection device with Raspberry Pi that sends an email as soon as it detects a motion.",
      "target_audience": [
        "Techies",
        "Non Techies",
        "Entreprenuers",
        "Students"
      ]
    },
    {
      "title": "Software Mobile Cell Phone Repair Mastery: Android & iPhone",
      "url": "https://www.udemy.com/course/software-mobile-cell-phone-repair-mastery-android-iphone/",
      "bio": "Master Software Mobile Cell Phone Repair: Global Opportunities, Entrepreneurial Skills, Financial Success",
      "objectives": [
        "Master Samsung Phone Software Repair: Students will gain comprehensive knowledge and practical skills in troubleshooting and repairing software-related issues",
        "Expertise in Mi Software Repair: Learners will develop specialized skills in diagnosing and fixing software issues in Mi (Xiaomi) phones.",
        "Proficiency in iPhone Software Repair: Participants will learn to proficiently address and resolve software problems in Apple iPhones Software Repair.",
        "Utilization of Software Repair Tools: Students will become adept in using a variety of software tools essential for mobile phone software repair."
      ],
      "course_content": {},
      "requirements": [
        "Laptop/Computer: Students must have access to a laptop or computer with sufficient performance capabilities to run software repair tools and access online resources. A stable internet connection is also necessary for accessing course materials and software updates.",
        "Paid Boxes Tools for Samsung, Mi, and iPhone: It's essential for learners to have specific paid box tools that are compatible with Samsung, Mi (Xiaomi), and iPhone devices. These tools are critical for performing advanced software repair tasks and diagnostics as covered in the course. Prior purchase and installation of these tools are required for practical application of the course content."
      ],
      "description": "Unlock a Rewarding Career with Our Premium Software Mobile Cell Phone Repair Course – Your Pathway to Mastering Samsung, Xiaomi, iPhone, and Beyond\nJumpstart your ascent to becoming a sought-after expert in mobile technology repair with our cutting-edge \"Software Mobile Cell Phone Repair\" course. Crafted for enthusiasts and professionals alike, this course is your bridge to mastering the dynamic realm of mobile repair, focusing on critical brands like Samsung, Xiaomi (Mi), and iPhone. With a curriculum tailored for global relevance – including countries like India, the USA, Nigeria, Mexico, Brazil, Peru, Colombia, Turkey, and Pakistan – we prepare you with the skills to tackle mobile software challenges anywhere in the world.\nWhat Sets Our Course Apart:\nIn-Depth Brand-Specific Training: Delve into the software complexities of market leaders including Samsung, Xiaomi, and iPhone. Learn everything from navigating Samsung's intricate software landscape, mastering Xiaomi's MIUI, to resolving common and uncommon iPhone software dilemmas.\nAdvanced Diagnostic Tools Mastery: Elevate your repair game beyond the basics. We emphasize the strategic use of advanced, paid diagnostic tools, equipping you with the expertise to excel in modern mobile repair and diagnostics.\nPreparedness for the Global Market: Our course content is designed to tackle universal mobile software repair challenges, ensuring you're ready for a career without borders. Embrace the confidence to address software issues across diverse cultures and regions.\nIdeal Candidates for This Course:\nWhether you're an aspiring mobile repair technician, a professional looking to enhance your software repair capabilities, or someone keen on leveraging these skills for career growth or entrepreneurial success, this course is your gateway. Embark on a journey to becoming a top-tier software mobile cell phone repair specialist, with the flexibility to operate internationally, launch your repair business, or progress in your current role.\nEnroll Now and Transform Your Career:\nSeize the opportunity to redefine your professional journey. Enroll in our \"Software Mobile Cell Phone Repair\" course today and step into the role of a high-demand mobile software repair technician. Arm yourself with cutting-edge knowledge and skills to flourish in the fast-evolving mobile technology landscape. Secure a prosperous, fulfilling career by signing up now.",
      "target_audience": [
        "Beginner Software Technicians: If you're at the beginning of your career journey in mobile phone software repair, this course is a perfect starting point. It's tailored to help you build a solid foundation in the field. You'll learn the basics of software repair for different phone brands, including Samsung, Mi, and iPhone. This course will provide you with the necessary skills and knowledge to start your career as a software technician, guiding you through essential concepts and practical applications.",
        "Intermediate Software Technicians Seeking Advanced Skills: For those who already have some experience in the field and are looking to elevate their skills to an advanced level, this course offers in-depth knowledge and advanced techniques in mobile phone software repair. You'll delve into more complex aspects of software issues, learning advanced repair strategies and mastering the use of specialized tools. This course is designed to fill in any gaps in your existing knowledge and provide you with the expertise to handle more challenging repair tasks, setting you apart in the industry."
      ]
    },
    {
      "title": "Learn PCB Printed Circuit Board: A Complete Bundle",
      "url": "https://www.udemy.com/course/pcb-bundle-circuit-design-printed-circuit-board-proteus-orcade-altuim/",
      "bio": "Learn Printed Circuit Board design using More than one software and Master the Art of PCB Design and Fabrication",
      "objectives": [
        "Make PCB with Zero Experience in Electronics",
        "Learn basic to advance PCB design",
        "Create your own custom Printed Circuit Board (PCB).",
        "Route Printed Circuit Board (PCB)",
        "Track you errors in seconds",
        "Learn Proteus Software, Fritizing and Altium Designer all in one Course",
        "Create and design a custom Arduino Nano in Altium Designer",
        "Design and Manufacture any PCB that comes in your mind",
        "Draw schematic of an Arduino Nano and wire components",
        "Create your own custom components and component library",
        "Auto route to speed up the routing process",
        "Compile design detect and eliminate design errors",
        "Define board shape and size",
        "Route Printed Circuit Board (PCB)",
        "Eliminate errors and reduce manufacturing board iterations by Using design rule checker",
        "Draw a schematic of your circuit in few simple steps",
        "Auto Route to speed up the routing process",
        "Make A PCB in the shortest possible time",
        "Prototype your kickstarter idea",
        "Get a job in PCB design",
        "Make a professional Printed Circuit electronic board PCB for your circuit.",
        "Simulate 3D PCB"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Section Intro",
          "Introduction",
          "Mastering PCB Design from Concept to Prototype",
          "Important Note: Review System",
          "Exploring PCB Design with Flux AI",
          "Summary",
          "Reading Material"
        ],
        "PCB Design and Fabrication For Everyone": [
          "Section Intro",
          "Introduction",
          "Download And Install Software Free",
          "Getting Started",
          "Customizing Parts",
          "Schematic",
          "Exporting your design as Image or PDF",
          "Making PCB Part1",
          "Making PCB Part2",
          "Cleaning Board",
          "Finishing Board and Making it yours",
          "Making a more advance random schematic design",
          "Practical PCB Design and Fabrication",
          "Summary",
          "Reading Material"
        ],
        "PCB Fabrication": [
          "Section Intro",
          "Print PCB Design on Heat Paper",
          "PCB Board Cleaning and Etching",
          "Drilling",
          "Practical PCB Fabrication Techniques",
          "Summary",
          "Reading Material"
        ],
        "Altium Designer PCB Design Software Introduction & Getting Started": [
          "Section Intro",
          "Introduction",
          "Very Important Note: Review Process",
          "PCB Design and Fabrication",
          "Summary",
          "Reading Material"
        ],
        "Altium Designer": [
          "Section Intro",
          "Download and Installing Altium Designer",
          "Altium Designer Interface Introduction",
          "Summary",
          "Reading Material"
        ],
        "Creating Component Libraries For Atmega": [
          "Section Intro",
          "Create Component Symbol & Add Pins",
          "Finishing the Schematic",
          "Creating Your Componenets Symbol - Making Footpring and PCB Layout",
          "Link footprint with Schematic Library",
          "Adding the new Library File to your Design",
          "Building and Integrating Custom ATmega Component Libraries",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "Schematic Circuit Design": [
          "Section Intro",
          "Adding Components and Placing them on Schematic",
          "Adding Components Libraries",
          "ATMEGA Schematic Connection",
          "USB Connector Schematic",
          "Header Pins for Nano Board",
          "Adding Resistors LED Indicators Voltage Regulator",
          "Annotating and Compiling Project",
          "Building and Annotating a Schematic Circuit for an ATmega-Based Board",
          "Summary",
          "Reading Material"
        ],
        "PCB Design": [
          "Section Intro",
          "Getting Started with the PCB Design Solve Errors",
          "Drawing The Board Shape",
          "Basic PCB Design and Board Shaping",
          "Summary",
          "Reading Material"
        ],
        "Placing PCB Items": [
          "Section Intro",
          "Placing PCB Items Atmega and Headers",
          "ICSP SWITCH Resistor array crystal microusb",
          "FTDI Regulator Capacitors",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "Routing": [
          "Section Intro",
          "Manual Routing",
          "AutoRouting",
          "Summary",
          "Reading Material"
        ]
      },
      "requirements": [
        "Time, Dedication and Patience to learn and implement new knowledge.",
        "A Computer or Laptop with any operating system",
        "The Software that will be used to create the PCB Provided in the first Section (FREE)",
        "Basic experience in Electronics",
        "No materials required if you only wish to view the course",
        "Have A basic Experience in browsing the internet"
      ],
      "description": "This Bundle Consists of More than 80 Lectures with over 6 hours of HD Video Content and supplementary material covering more than four different software used to design and fabricate PCBs (Printed Circuit Boards). I can assure you that after this course, you will be a professional in PCB design and fabrication.\nWhy You Should Take This Course:\nLearn how to design, layout, and produce a Printed Circuit Board.\nSave money on outsourcing PCB design work for prototyping.\nLearn from a professional engineer with over a decade of experience in designing PCBs.\nLearn from the comfort of your home, at your own pace.\nYou Will Get the Chance to Learn:\nPCB Design and Fabrication using Fritzing Software\nPCB Design: Master Designing Printed Circuit Boards using Proteus Software\nPCB Design: Make Arduino Nano using Altium Designer\n3D Simulation: Microcontrollers, Electronics, Mechanism, PCB using Yenka Software\nLet's Talk in More Detail About Each Section:\nPCB Design and Fabrication For Everyone\nLearn Printed Circuit Board (PCB) design from Scratch With Zero Experience in Electronics, using Free Software.\nThis course will help you gain PCB design skills, which will be valuable for freelancing or securing a job in PCB design. Using one of the top PCB design tools in the industry, you won't have to pay anything for the software, and it includes libraries for almost every electronic component.\nPCB Design: Master Designing Printed Circuit Boards\nAn A-Z Guide to designing, testing, and manufacturing any electronic circuit using the most popular electronic software. This comprehensive course will make you a master at creating your own electric circuit boards.\n3D Simulation: Microcontrollers, Electronics, Mechanism, PCB\nEnter the world of 3D simulation and enjoy learning and teaching Microcontroller Electronics, Mechanical and PCB design. This course covers all aspects of the electronic design process in 3D.\nPCB Design: Make Arduino Nano using Altium Designer\nLearn PCB design by making an Arduino Nano in Altium Designer Software. This course will take you from start to finish, from zero to production-ready, helping you to improve your PCB design skills.\nWhat You Should Expect After Taking This Course:\nGet started with PCB design using Altium Designer.\nDownload and install Altium Designer.\nCreate your own component library to facilitate freelancing opportunities.\nDesign the Arduino Nano schematic in Altium Designer.\nWire components in schematic view.\nTransfer schematics into PCB layouts.\nPlace components on the board.\nCreate multilayer boards.\nRoute layers and place components efficiently.\nUse autorouting to save time.\nEliminate design errors.\nCreate Gerber files for your manufacturer.\nUser Testimonials: \"This course gave me a thorough understanding of PCB design and fabrication. Highly recommended for anyone looking to get into PCB design.\" - Chris T.\n\"An excellent course bundle that covers all aspects of PCB design with practical examples and projects.\" - Maria S.\nAuthor Bio: Ashraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. As a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world. With over 250,000 students from around the world, Ashraf’s online courses have helped many to kick-start their careers in the industry.\nCall to Action: Enroll now to master PCB design and fabrication and take your electronics projects to the next level!\nFAQ: Q: Do I need prior experience in electronics or programming to take this course? A: No, this course is designed for all levels.\nQ: Will I need to buy additional equipment? A: The course provides a list of necessary hardware, all of which are affordable and easily accessible.\nWhat You Will Learn\nDesign custom PCBs from scratch\nUse various PCB design software tools\nCreate schematics and PCB layouts\nTransfer designs to production-ready formats\nOptimize PCB designs for functionality and manufacturability\nWho Is This Course For\nElectronics enthusiasts\nHobbyists interested in PCB design\nBeginners in PCB design\nAnyone looking to create custom PCBs\nRequirements\nA computer with internet access\nBasic understanding of using a computer\nNo prior programming or electronics experience needed\n\n\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading team in the Microcontroller Industry, with over 13 Years of Experience in teaching and doing practical projects. They strive to provide deep, hands-on experience in their courses, offering step-by-step blueprints on various topics.\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and maker. He has been the Chief Educational Engineer at Educational Engineering Team since 2007, and his mission is to explore new trends and technology to help educate the world. His online courses have helped over 250,000 people worldwide to build successful careers.\nEducational Engineering Team offers courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Learn basic to intermediate PCB design",
        "Have a tech kickstarter idea, that you want to get of the ground",
        "Want to create your own custom Arduino Printed Circuit Board (PCB).",
        "Want to get a job in PCB design",
        "Want to learn Altium Designer in the shortest possible time.",
        "Want to get started creating cool gadgets",
        "Circuit Designers",
        "PCB Designers",
        "Circuits Creators"
      ]
    },
    {
      "title": "Intro to Arduino Interfacing",
      "url": "https://www.udemy.com/course/intro-to-embedded-systems-with-arduino/",
      "bio": "Enter the exciting world of Arduino microcontroller platform, sensors, actuators, and interfacing.",
      "objectives": [
        "The Arduino Microcontroller Development Board.",
        "Interfacing a Light Emitting Diodes (LED)",
        "Interfacing a Joystick",
        "Interfacing a Servo",
        "Interfacing an Ultrasonic Range Finder",
        "Interfacing a Photoresistor (LDR)",
        "Interfacing a Water Depth Sensor",
        "Interfacing a Temperature Sensor",
        "Interfacing a Soil Humidity Sensor",
        "Interfacing a Capacitive Touch Sensor"
      ],
      "course_content": {
        "Introduction To Microcontrollers": [
          "Course Files",
          "Microcontrollers",
          "The Arduino Board",
          "The Arduino IDE"
        ],
        "Interfacing Sensors and Actuators with the Arduino Board": [
          "Light Emitting Diodes (LED)",
          "Joystick",
          "Servo",
          "Ultrasonic Range Finder",
          "Light Dependent Resistor (LDR)",
          "Water Depth Sensor",
          "Temperature / Humidity Sensor",
          "Soil Humidity Sensor",
          "Capacitive Touch Sensor"
        ],
        "Deprecated Content": [
          "Introduction",
          "What Are Embedded Systems",
          "Embedded Systems Components",
          "Microcontroller",
          "Sensors",
          "Actuators",
          "The Arduino Board",
          "The Arduino IDE",
          "Light Emitting Diodes (LED)",
          "Joystick",
          "Servo",
          "Ultraonic Range Finder",
          "Photoresistor LDR",
          "Water Depth Sensor",
          "Temperature Sensor",
          "Soil Hygrometer Humidity Sensor",
          "Touch Sensor"
        ]
      },
      "requirements": [
        "Basic Computer Knowledge."
      ],
      "description": "Intro to Arduino Interfacing is an introductory course for beginners wishing to learn Arduino interfacing. You will learn about the Arduino development board, how to download the Arduino IDE, and how to interface different sensors with it. All in all, you will be wiring and programming nine sensors. All the code that controls these sensors and actuators are available for download.",
      "target_audience": [
        "Learner just getting started with Arduino Boards.",
        "Learner who wants to jump into interfacing sensors with Arduino."
      ]
    },
    {
      "title": "Complete 2025 Guide: Embedded Systems from Scratch",
      "url": "https://www.udemy.com/course/complete-2024-guide-embedded-systems-from-scratch/",
      "bio": "Uncover the key features of microcontrollers, their architecture, and how to effectively implement them in real projects",
      "objectives": [
        "Learn the key features and characteristics of microcontrollers, and understand their role in embedded systems for effective real-world applications.",
        "Compare microprocessors and microcontrollers, analyzing their differences in functionality and performance across various real-time scenarios.",
        "Understand the two major microcontroller architectures, RISC and CISC, and their impact on system performance and design efficiency.",
        "Explore Harvard and Von Neumann memory organizations, focusing on their structural differences and advantages in embedded systems.",
        "Grasp the fundamentals of C programming, and understand why compiler-based coding languages are essential for embedded system applications.",
        "Learn the step-by-step process of compiling code, from source to executable, for efficient programming in embedded systems.",
        "Understand straight and cross-compilation, including the circumstances in which each is required for embedded software development.",
        "Explore ARM architecture and core design, understanding its logical blocks and their significance in embedded systems.",
        "Learn the structure of bus architecture and the operating conditions that ensure smooth data transfer in embedded systems.",
        "Understand the function of the AHB-APB bridge and how it enables data exchange between different bus systems in embedded microcontrollers.",
        "Explore the various on-chip peripherals available in STM32F405, understanding how to utilize them effectively in your projects.",
        "Learn to create embedded projects in STM32Cube IDE, gaining hands-on experience in different coding methods and project structures.",
        "Get familiar with Proteus, a powerful simulation tool used to test and simulate interface designs in embedded systems."
      ],
      "course_content": {
        "Introduction to Course": [
          "Welcome to the Course",
          "Course Roadmap Script"
        ],
        "Introduction to Microcontroller": [
          "Microcontroller Features and Characteristics",
          "Difference between microprocessor and microcontroller",
          "RISC Vs CISC",
          "Harvard vs Van-Neumann memory organization"
        ],
        "Programming Concepts": [
          "Introduction to C programming",
          "Compilation process",
          "Cross compilation"
        ],
        "ARM Architecture": [
          "ARM Core",
          "Bus architecture",
          "AHB-APB bridge",
          "On chip peripherals"
        ],
        "Software tools": [
          "Demo: Creating project in STM Cube IDE",
          "Demo: Bare metal programming"
        ],
        "Peripheral Interfacing": [
          "Demo: LED interfacing",
          "Demo: Switch controlled operation",
          "ADC concepts",
          "ADC Registers",
          "Demo: CMSIS programming method",
          "Demo: ADC Programming",
          "Conclusion"
        ]
      },
      "requirements": [
        "(No prior experience is required. We will start from the very basics )"
      ],
      "description": "In 2024, embedded systems are increasingly woven into the fabric of our daily lives, shaping our future and highlighting the need for more professionals who excel in this field. These systems combine hardware and software to create smart devices that simplify and enhance efficiency, whether in our homes or various industries. As microcontrollers continue to advance and connected devices become more prevalent, the demand for skilled individuals who can design and work with these systems is on the rise. Familiarizing yourself with embedded systems can unlock numerous opportunities, making it an appealing field for technology enthusiasts.\n\nKey Outcomes of Your Learning Journey\nBy the end of this course, you will have established a strong foundation in microcontroller technology and its various applications in embedded systems. You will gain insights into the key features of microcontrollers and understand their significance in real-world applications. This course will enable you to differentiate between microprocessors and microcontrollers, allowing you to evaluate their performance and functionality effectively.\n\nYou will explore the RISC and CISC architectures, enhancing your comprehension of their implications for system design and overall performance. Additionally, you'll analyze the structural differences between Harvard and Von Neumann memory organizations, learning their relevance in the context of embedded systems.\n\nA significant focus will be placed on mastering the fundamentals of C programming, which is essential for embedded system development. You'll delve into the intricacies of the compilation process, gaining knowledge about both straight and cross-compilation techniques.\n\n\nInvestigating ARM architecture will further enrich your understanding of its logical blocks and their interactions within embedded systems. You will learn about bus architecture and how data transfer is managed in embedded applications, along with the functionality of the AHB-APB bridge, which facilitates efficient data exchange between bus systems.\n\n\nHands-on experience will be integral to your learning journey, allowing you to create embedded projects using STM32Cube IDE and simulate designs with Proteus. Through practical exercises, you will develop coding skills, focusing on ADC programming and various peripheral interfacing techniques.\n\nUnique Features of Our Course\nWhat sets our Embedded Systems course apart from others is its practical approach and comprehensive curriculum. We blend theoretical knowledge with hands-on experiences, ensuring that you can apply what you learn directly to real-world scenarios. Our structured learning path guides you through complex topics in an understandable manner, allowing you to build confidence as you progress.\nAdditionally, the course includes quizzes and coding exercises at the end of each section, providing opportunities to reinforce your understanding and test your skills. By the end of the course, you will not only have gained valuable knowledge but also practical experience that can be directly applied in the workplace.\n\n\nMaster Tools and Techniques\nThroughout the course, you will work with essential tools that are crucial for developing embedded systems:\nSTM32Cube IDE: Learn to create and manage embedded projects effectively.\nProteus: Utilize this powerful simulation tool to test and visualize your designs.\nC Programming Language: Master this essential coding language for embedded applications.\nCMSIS Programming: Understand this important software interface for ARM microcontrollers.\nBy leveraging these tools, you will gain practical experience that enhances your learning and prepares you for real-world applications.\n\n\nWho Will Find This Course Valuable?\nOur Embedded Systems course is tailored for a diverse group of learners:\nElectronics and Engineering Students: Ideal for students seeking to gain practical skills in embedded systems and microcontrollers.\nAspiring Embedded Engineers: Perfect for those pursuing a career in embedded systems, focusing on microcontroller architecture and programming.\nSoftware Engineers Transitioning to Hardware: A great fit for developers wanting to expand their expertise into embedded systems and hardware integration.\nTech Enthusiasts: For hobbyists eager to learn about microcontrollers, programming, and interfacing techniques.\nWhether you're just starting or looking to deepen your knowledge, this course offers valuable insights and skills for all levels.\n\n\nGet to Know the Course Creator\nWith over 15 years of experience in embedded systems and corporate training, Dr. Sandeep has a wealth of knowledge to share. Having educated thousands of students as an Assistant Professor at Dayananda Sagar College of Engineering, he is passionate about empowering learners in the tech industry.\n\n\nDr. Sandeep’s collaborations with industry giants like Robert Bosch and HCL have enriched his understanding of practical applications in embedded systems, bridging the gap between theory and real-world challenges. His commitment to creating an engaging learning environment fosters student growth and success.\n\n\nWhen you enroll in our Embedded Systems course, you receive lifetime access to all course materials and resources. This means you can revisit the content whenever you need a refresher or to stay updated with the latest developments in embedded systems. Additionally, you will have access to supplementary resources and forums for ongoing support. Embarking on a journey into the world of embedded systems opens up numerous career opportunities in various industries, including automotive, telecommunications, and consumer electronics. As technology continues to evolve, the demand for skilled professionals in embedded systems remains high.\n\n\nThis course not only equips you with essential knowledge but also prepares you for the challenges and innovations in the field. You’ll gain the skills to design and implement effective embedded solutions, positioning you for success in your future endeavors. Are you ready to enhance your skills and understanding of embedded systems? Don’t miss the opportunity to learn from an experienced instructor and connect with fellow learners. Sign up for the Embedded Systems course today, and take the first step towards becoming an expert in microcontrollers and STM32 technology!",
      "target_audience": [
        "Electronics and Engineering Students For students aiming to gain practical skills in embedded systems, microcontrollers, and hardware interfacing.",
        "Aspiring Embedded Engineers Ideal for those pursuing a career in embedded systems, with a focus on microcontroller architecture and programming.",
        "Software Engineers Transitioning to Hardware Perfect for software developers looking to expand into embedded systems and hardware integration.",
        "Tech Enthusiasts For hobbyists interested in learning the fundamentals of microcontrollers, programming, and peripheral interfacing."
      ]
    },
    {
      "title": "The Ultimate Guide to IoT with Raspberry Pi and Python -2024",
      "url": "https://www.udemy.com/course/internet-of-things-using-raspberry-pi-and-python-2023/",
      "bio": "Hands-On Raspberry Pi Projects: Unleash Your Creativity with Python, Linux, GPIO, Thingspeak, AWS IoT Core, IFTTT,Twilio",
      "objectives": [
        "Quick start Building IoT Projects using Raspberry Pi and Python",
        "Raspberry Pi Setup, Raspberry Pi OS Installation, Networking and Linux Commands",
        "Design IoT Devices using Thingspeak Platform, Raspberry Pi and Python",
        "Interfacing Hardware with Raspberry Pi - LEDs, Buzzer, DHT11 Sensor, and PIR Motion sensor",
        "Master Python Programming on Raspberry Pi - Variables, Loops, Conditional Statements and More",
        "Controlling Various Actuators and sensing physical quantities",
        "IoT Cloud Platforms: Thingspeak Cloud, AWS IoT Core",
        "Sending Twitter Notifications",
        "Sending Email Alerts or Notifications based on motion using Raspberry Pi, PIR Sensor and IFTTT"
      ],
      "course_content": {},
      "requirements": [
        "Computer fundamentals, Programming fundamentals,",
        "You don't need to have prior knowledge on Raspberry Pi or IOT or Python or Linux",
        "A Computer + a Raspberry Pi Board (also works with Raspberry 2 or  3 or 4). Don't have Raspberry Pi, you can use emulator.",
        "A list of hardware components. You can still start the course without those components",
        "An eagerness to learn and advance with the Raspberry Pi"
      ],
      "description": "Welcome to the The Ultimate Guide to Internet of Things (IoT) with Raspberry Pi and Python 2023 Course\nUnleash the Power of Raspberry Pi, , Python Programming, Internet of Things, AWS Cloud and More.\n\n\nCourse Highlights\n\n\nDiscover Raspberry Pi Basics-  Setup, OS Installation, Networking and Linux Commands\nEmbrace IoT with Thingspeak Platform-  Collect, Store, and Analyze Sensor Data\nMaster Python Programming on Raspberry Pi- Variables, Loops, Conditional Statements and More\nInteract with Hardware-  LEDs, Buzzer, DHT11 Sensor, and PIR Motion sensor\nEmbrace Cloud Platforms-  Amazon web services, Thingspeak, Real-time Alerts with IFTTT, Twitter, SMTP, Email, and Twilio\nMotion Detection Magic-  Receive Email Alerts with Raspberry Pi and PIR Sensor\nAWS IoT Core- Designing Internet of Things Devices using AWS IoT Core\nAre you ready to unlock the True potential of Raspberry Pi? This action-packed course will guide you through the essentials, from setting up your Raspberry Pi board and installing the operating system to leveraging its power for a variety of exciting projects.\nExplore the Internet of Things (IoT) with the Thingspeak Platform, allowing you to collect and analyze sensor data in real-time. Get hands on with Python programming, mastering variables, loops, and conditional statements to create powerful programs.\nImmerse yourself in hardware interfacing, where you will work with LEDs, buzzers, motion sensors, and the DHT11 sensor to build interactive projects. Dive into cloud platforms like AWS, and automate tasks with real-time alerts using IFTTT, Twitter, Email, and Twilio.\nPlus, learn the art of motion detection as you receive email alerts using the PIR sensor.\nYou do not need any knowledge in programming, electronics, or anything else. To get started, you just need a computer to work from, and a Raspberry Pi board or Raspberry Pi Emulator.\nUpon completion of this course, you'll have a solid and confident foundation with your Raspberry Pi, empowering you to embark on your own projects with ease and enthusiasm. Get ready to unleash your creativity and take the first step towards an exciting world of possibilities!\n\n\nWhy This Course?\nAre you finding yourself stuck and unsure of where to start with your Raspberry Pi projects? Many online resources may leave you feeling like you've achieved something, but in reality, you've merely copied and pasted code without truly understanding the why behind it.\nIn this course, we take a different approach. We prioritize teaching you the why behind each concept, empowering you to become an independent and confident Raspberry Pi enthusiast. You'll gain a deep understanding of how things work, enabling you to start your own Internet of Things (IoT) projects without relying on others' code.\nOur mission is to equip you with problem-solving skills, fostering an engineer-level mindset. No more feeling dependent on pre-existing solutions. You will be the creator, not just the replicator.\nLearn from Internet of Things Practitioner.\nBy the end of this course, you will have a strong foundation in IoT with Raspberry Pi and Python, ready to embark on exciting IoT projects and conquer new challenges with self-assurance.\n\n\nOh, and there is an added bonus  a 30 day money back guarantee if you are not completely satisfied. Your satisfaction is our priority.\nUnleash your creativity and join this captivating journey of Raspberry Pi mastery",
      "target_audience": [
        "Engineers who would like to understand building IoT devices using raspberry Pi and Python",
        "Executives who would like to understand how to work with Raspberry Pi and Programming",
        "Engineering Graduates , Students, IoT Develpers, Hobbyists"
      ]
    },
    {
      "title": "Digital Signal Processing(DSP) From Ground Up™ using Arduino",
      "url": "https://www.udemy.com/course/arduino-dsp/",
      "bio": "Practical DSP on Arduino : FFT, Filter Design, Convolution, IIR, FIR, Hamming Window, Linear Systems,",
      "objectives": [
        "Develop and test the Convolution Kernel algorithm on Arduino",
        "Develop and test the Discrete Fourier Transform (DFT) algorithm on Arduino",
        "Develop and test the Inverse Discrete Fourier Transform (IDFT) on Arduino",
        "Develop and test the Fast Fourier Transform (FFT) algorithm on Arduino",
        "Perform spectral analysis on ECG signals using Arduino",
        "Design and develop Windowed-Sinc filters on Arduino",
        "Design and develop Finite Impulse Response (FIR) filters on Arduino",
        "Design and develop Infinite Impulse Response (IIR) filters on Arduino",
        "Use ARM CMSIS-DSP library on Arduino",
        "Develop the FFT-Convolution algorithm on Arduino",
        "Develop the First Difference algorithm on Arduino",
        "Develop the Running Sum algorithm on Arduino",
        "Develop the Moving Average filter algorithm on Arduino",
        "Develop the Recursive Moving Average filter algorithm on Arduino",
        "Develop signal statistical algorithms on Arduino",
        "Build passive Low-pass and High-pass filters",
        "Build Modified Sallen-Key filters",
        "Build Bessel, Chebyshev and Butterworth filters",
        "Understand all about Linear Systems and their characteristics",
        "Suppress noise in signals using Arduino",
        "Give a lecture on Digital Signal Processing (DSP)"
      ],
      "course_content": {
        "Set up": [
          "Downloading Arduino",
          "Installing Arduino",
          "Capabilities of different arduino boards",
          "Adding new boards to the arduino IDE",
          "Adding CMSIS-DSP capabilites to the Arduino IDE",
          "Testing the CMSIS-DSP set up"
        ],
        "Signal Statistics and Noise": [
          "Nature of a signal",
          "Mean and Standard Deviation",
          "Signal-to-Noise ratio",
          "Notice : Signal Mean algorithm on Arduino Uno",
          "Coding : Developing the Signal Mean algorithm",
          "Coding : Computing the Signal Mean",
          "Coding : Computing the Signal Mean with CMSIS-DSP",
          "Coding : Creating a Signal plot function",
          "Coding : Developing the Signal Variance algorithm",
          "Coding : Computing the Signal Variance",
          "Coding : Computing the Signal Variance with CMSIS-DSP",
          "Coding : Computing the Signal Standard Deviation",
          "Computing the Signal Standard Deviation using CMSIS-DSP"
        ],
        "Quantization and The Sampling Theorem": [
          "Quantization",
          "Nyquist Theorem ( Sampling Theorem )",
          "The Passive Low-Pass Filter",
          "The Passive High-Pass Filter",
          "The Modified Sallen-Key Filter",
          "The Bessel, Chebyshev and Butterworth filters",
          "Comparing the performance of the Bessel, Chebyshev and Butterworth filters",
          "Information encoding : Time-domain and frequency-domain encoding"
        ],
        "Linear Systems and Superposition": [
          "Signal naming conventions",
          "System Homogeneity",
          "System Additivity",
          "System Shift Invariance",
          "Synthesis and Decomposition",
          "Impulse Decomposition",
          "Step Decomposition"
        ],
        "Convolution": [
          "Introduction to Convolution",
          "The Delta Function and Impulse Response",
          "The Convolution Kernel",
          "The Convolution Kernel (Part II)",
          "The Output side analysis and the convolution sum equation",
          "Coding : Developing the Convolution algorithm (Part I )",
          "Coding : Developing the Convolution algorithm (Part II )",
          "Coding : Developing the Convolution algorithm (Part III )",
          "Coding : Code Update",
          "Coding : Performing convolution with the CMSIS-DSP library",
          "The Identity property of convolution",
          "The Running Sum and First Difference",
          "Coding : Developing the Running Sum algorithm",
          "Coding : Developing the First Difference algorithm"
        ],
        "Fourier Transform": [
          "Introduction to Fourier Analysis",
          "Introduction to Discrete Fourier Transform",
          "DFT Basis Functions",
          "Deducing the Inverse DFT",
          "Calculating the Discrete Fourier Transform (DFT)",
          "Coding : Developing the DFT algorithm (Part I)",
          "Coding : Developing the DFT algorithm (Part II)",
          "Coding : Developing the DFT algorithm (Part III)",
          "Coding : Developing the Inverse DFT algorithm (Part I)",
          "Coding : Developing the Inverse DFT algorithm (Part III )",
          "Coding : Developing the Inverse DFT algorithm (Part II)",
          "Coding : Developing the Inverse DFT algorithm (Part IV )",
          "Symmetry between Time domain and frequency domain -Duality",
          "Polar Notation",
          "Introduction to Spectral Analysis",
          "The Frequency Response"
        ],
        "Complex Numbers": [
          "The Complex Number System",
          "Polar Representation of Complex Numbers",
          "Euler's Relation",
          "Representation of Sinusoids",
          "Representing Systems"
        ],
        "Complex Fourier Transform": [
          "Introduction to Complex Fourier Transform",
          "Mathematical Equivalence",
          "The Complex DFT Equation",
          "Comparing Real DFT and Complex DFT"
        ],
        "Fast Fourier Transform (FFT)": [
          "An Overview of how FFT works.",
          "Understanding the complexity of calculating DFT directly",
          "How the Decimation -in-Time FFT Algorithm works"
        ],
        "Digital Filter Design": [
          "Introduction to Digital Filters",
          "The Filter Kernel",
          "The Impulse,Step and Frequency response",
          "Understanding the Logarithmic scale and decibels",
          "Information representations of a signal",
          "Time domain parameters",
          "Frequency domain parameters",
          "Designing digital filters using the spectral inversion method",
          "Designing digital filters using the spectral reversal method",
          "Classification of digital filters"
        ]
      },
      "requirements": [
        "Having basic arduino programming skills is a plus"
      ],
      "description": "With a programming based approach, this course is designed to give you a solid foundation in the most useful aspects of Digital Signal Processing (DSP) in an engaging and easy to follow way. The goal of this course is to present practical techniques while avoiding  obstacles of abstract mathematical theories. To achieve this goal, the DSP techniques are explained in plain language, not simply proven to be true through mathematical derivations.\nStill keeping it simple, this course comes in different programming languages and hardware architectures so that students can put the techniques to practice using a programming language or hardware architecture  of their choice. This version of the course uses the Arduino board and programming language.\n\n\nBy the end of this course you should be able develop and test the Convolution Kernel algorithm on arduino, develop and test the Discrete Fourier Transform (DFT) algorithm on arduino, develop  and  test the Inverse Discrete Fourier Transform (IDFT) algorithm on arduino, design and develop Finite Impulse Response (FIR) filters on arduino, design and develop Infinite Impulse Response (IIR) filters on arduino, develop Windowed-Sinc filters  on arduino, build Modified Sallen-Key filters,  build Bessel, Chebyshev and Butterworth filters, develop the Fast Fourier Transform (FFT) algorithm on arduino, even give a lecture on DSP and so much more. Please take a look at the full course curriculum.",
      "target_audience": [
        "Engineering Students",
        "Arduino users",
        "Embedded Systems Engineers",
        "Computer Engineering students",
        "Hobbyists",
        "Embedded Systems Instructors"
      ]
    },
    {
      "title": "Learn VHDL and FPGA Development",
      "url": "https://www.udemy.com/course/learn-vhdl-and-fpga-development/",
      "bio": "Use VHDL to develop FPGA applications that run on development boards",
      "objectives": [
        "Understand the VHDL design and development process",
        "Learn how to implement designs using VHDL development tools",
        "Become familiar with the various FPGA development tools available",
        "Complete projects from conception to full implementation"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the Course",
          "VHDL Introduction",
          "Creating a Project in Vivado",
          "Creating a Project in Quartus"
        ],
        "VHDL Design and Data Types": [
          "VHDL Keywords",
          "VHDL Libraries",
          "VHDL Entities & Architecture",
          "VHDL Generics",
          "VHDL Data Types",
          "Integers in VHDL",
          "When-Else Statements",
          "Concurrent vs Sequential Statements"
        ],
        "VHDL Simulation": [
          "Introduction to Simulation",
          "Shift Register Design",
          "Shift Register Test Bench Design",
          "Shift Register TCL Script Design",
          "ModelSim Introduction",
          "Create a Project in ModelSim",
          "Running a Simulation in ModelSim",
          "ModelSim TCL Script Demonstration",
          "Navigating ModelSim Simulations",
          "Vivado Simulator Tool Introduction",
          "Running a Simulation in Vivado",
          "Navigating Vivado Simulations"
        ],
        "Buttons & LED Project": [
          "Introduction & Deliverables",
          "Buttons & LEDs Complete Design Walkthrough",
          "Arty A7 IO Placement",
          "Generate a Xilinx Programming File",
          "Programming the Arty A7 Development Board",
          "Arty A7 Demonstration",
          "DE10 Nano IO Placement",
          "Generate Intel Programming File",
          "Programming the DE10 Nano Development Board",
          "DE10 Nano Demonstration"
        ],
        "VHDL Design Concepts": [
          "Signals and Constants",
          "VHDL Processes",
          "VHDL If Statements",
          "If Statement Priority Example"
        ],
        "Blinky LED Project": [
          "Blinky LEDs Introduction & Deliverables",
          "Blinky LEDs Complete Design Walkthrough",
          "Blinky LEDs Arty A7 IO Placement",
          "Blinky LEDs Arty A7 Demonstration",
          "Blinky LEDs DE10 Nano IO Placement",
          "Blinky LEDs DE10 Nano Demonstration"
        ],
        "Pulse Width Modulation": [
          "PWM Signals",
          "PWM VHDL Design Part 1",
          "PWM VHDL Design Part 2",
          "VHDL Generate Statement",
          "Counter Design Part 1",
          "Counter Design Part 2",
          "VHDL Component Instantiations Part 1",
          "VHDL Component Instantiations Part 2"
        ],
        "LED Brightness Project": [
          "LED Brightness Introduction and Deliverables",
          "LED Brightness Complete Design Walkthrough",
          "LED Brightness Arty A7 IO Placement",
          "LED Brightness Arty A7 Demonstration",
          "LED Brightness DE10 Nano IO Placement",
          "LED Brightness DE10 Nano Demonstration"
        ],
        "UART & Softcore Processors": [
          "UART Explained",
          "UART Simulation",
          "MicroBlaze Softcore Processor",
          "Xilinx Software Development Kit (SDK) Part 1",
          "Xilinx Software Development Kit (SDK) Part 2",
          "Nios II Softcore Processor",
          "Nios II Softcore Processor Implementation",
          "Nios II Software Build Tools Part 1",
          "Nios II Software Build Tools Part 2"
        ],
        "UART Demonstration Project": [
          "UART Demonstration Introduction & Deliverables",
          "UART Demonstration Complete Design Walkthrough Xilinx",
          "UART Demonstration Arty A7 IO Placement",
          "UART Demonstration Arty A7 Demonstration",
          "UART Demonstration Complete Design Walkthrough Altera",
          "UART Demonstration DE10 Nano IO Placement",
          "Programming Nios II Softcore Processor",
          "UART Demonstration DE10 Nano"
        ]
      },
      "requirements": [
        "Basic knowledge of digital electronics such as logic gates",
        "No VHDL experience required, this will be covered in the course",
        "Desire to learn about VHDL and/or FPGA's"
      ],
      "description": "Learn the Essentials of VHDL and FPGA Development is course that will teach you the fundamentals and basics of VHDL design. Prior to working through the courses you will go through the VHDL design structure section that will explain the various concepts and terms needed to implement the projects in VHDL. In this course you will be working through various projects that will require you to go through the entire FPGA development process. You will be guided through the coding of the actual VHDL to the synthesis using either Xilinx’s development tool, Vivado or Altera/Intel's development tool Quartus. The projects in this course:\n\n\nShift Register Design\nA project that takes you through the design and simulation steps to fully test and implement a shift register.\nButtons & LEDs\nA project that is designed to teach students the very basics of VHDL as well as how to make specific pins on an FPGA inputs (buttons) and outputs (LEDs).\n\n\nAll of the required background and knowledge to complete each project will be explained prior to completing the projects above. There are demonstration videos and walkthroughs for each project so that you can have a deep understanding of how the project works. Walkthroughs of the completed projects are also included to further your understanding of how these designs are implemented.",
      "target_audience": [
        "Makers and hobbyists who want to learn how to use FPGA's",
        "Anyone interested in learning how to create VHDL designs",
        "Engineers who want to learn or build upon their FPGA development skills"
      ]
    },
    {
      "title": "Introduction to Arduino",
      "url": "https://www.udemy.com/course/introduction-to-arduino/",
      "bio": "Learn Arduino from the ground up with a full fledged project using an Ultrasonic sensor HC-SR04.",
      "objectives": [
        "Use the HC-SR04 ultrasonic sensor to measure distance to an obstacle",
        "How to deploy program into Arduino and use it wirelessly",
        "Build your own applications and devices.",
        "How to use ultrasonic sensor to detect obstacles",
        "Code buzzer to beep in different tone",
        "How to setup the Arduino software and start outputting code"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Types of Arduinos and it's features"
        ],
        "Installation and configuration": [
          "Installation and Setting up of Arduino IDE"
        ],
        "Hardware requirements": [
          "Project concept and hardware requirements",
          "Ultrasonic key features and pin configuration",
          "Hardware"
        ],
        "Programming the hardware": [
          "Code - Initializing the required pins",
          "Code - Declaring If else condition for three different ranges",
          "Code - Defining body of function for all three ranges",
          "Compiling and Error debugging",
          "Circuit diagram",
          "Source code of the project",
          "Arduino Programming",
          "Real time demonstration of the project"
        ],
        "Bonus Content : Arduino Webserver Control using Ethernet Shield": [
          "Bonus Content :Arduino Webserver Control using Ethernet Shield: IP configuration",
          "Bonus Content : Arduino Webserver Control using Ethernet Shield: Code",
          "Bonus Content : Arduino Webserver Control using Ethernet Shield: HTML code",
          "Bonus Content : Circuit diagram",
          "Bonus Content : Source code of the project"
        ]
      },
      "requirements": [
        "You would need to download the Arduino IDE software",
        "Complete Arduino kit",
        "Thin wires to solder and jumper wires"
      ],
      "description": "Over 1,000 students\nOver 25 5 star ratings\nOne of the top Arduino courses on Udemy\nBonus content added regularly. Latest update on 17-Nov-15. We will keep adding new content, so that our students have something to look forward to\nAll our students (Makerdemy brand) get VIP pricing ($8) for all our new courses. We have 10 courses under our brand and will be releasing a new course every 2 months.\n\n\n_____________________________________________________________________\nArduino is one of the cost effective boards you can purchase & start programming with to interact with physical elements using logic & create results the way you want it. It can be used in your Engineering projects, Industrial Projects and Home Automation related projects.\nThe course lesson will explain “How to work on Arduino\" using C Language. This course works best for you if you own an Arduino UNO.\nWhy Learn Arduino?\nIf you an Engineering or Science student you might come across projects in which you want Physical interaction with your computer system.\nThe Arduino development environment makes it easy to write code and upload it to the i/o board. You can use Arduino language(C\\C++) to interface with Arduino hardware.\nThis course is for anyone who is interested in learning about Arduino. The course does not require any prior knowledge about Arduino. It is designed to introduce the Arduino hardware and programming environment to get you started on building projects.\nHowever, basic knowledge of C programming is essential to understand this course. No experience is required, and all you need is an Arduino and several low cost components.\nIn this course, I will walk you through a project called \"The Blind Man Guide\". In this project, an ultrasonic sensor is fitted on to a cap and is powered by Arduino which measures the distance and also alerts about objects or obstacles in front of the device. By wearing this cap, a blind person can be alerted about objects or obstacles in front of him.\nI will teach you step by step how to go about building this project. I will also share the code with you so that you can replicate the project yourself.\nAt the end of the course, you'll be fully familiarized with Arduino and ready to build your own applications and devices. If you're interested in Arduino, or microcontrollers in general, and don't know where to Start - you've found the perfect course. I look forward to you joining this course.",
      "target_audience": [
        "This course is for anyone who is interested in learning about Arduino. The course does not require any prior knowledge about Arduino.",
        "It’s designed to introduce the Arduino hardware and programming environment to get you started on building projects.",
        "However, basic knowledge of C programming is essential to understand this course. No experience is required, and all you need is an Arduino and several low cost components."
      ]
    },
    {
      "title": "PILZ Safety PLC (M1PETH) Programming using PNOZ MultiConfig.",
      "url": "https://www.udemy.com/course/pilz-safety-plc-m1peth-programming-using-pnoz-multiconfig/",
      "bio": "Learn PILZ Safety PLC (M1PETH) Programming using PNOZ MultiConfigurator Software.",
      "objectives": [
        "Learn PILZ Safety PLC (M1PETH) Programming and Design using PNOZ MultiConfigurator Software."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "02_Software Description_PILZ PNOZMulti Configurator V10.9.0": [
          "02_Software Description_PILZ PNOZMulti Configurator V10.9.0"
        ],
        "03_Hardware Overview": [
          "03_Hardware Overview"
        ],
        "04_General Wiring Guidelines": [
          "04_General Wiring Guidelines"
        ],
        "05_Communication with Pilz Safety PLC _1": [
          "05_Communication with Pilz Safety PLC _1"
        ],
        "06_Communication with Pilz Safety PLC _2": [
          "06_Communication with Pilz Safety PLC _2"
        ],
        "07_Upload the Project": [
          "07_Upload the Project"
        ],
        "08_User Access Level": [
          "08_User Access Level"
        ],
        "09_Emergency Switch Programming_1": [
          "09_Emergency Switch Programming_1"
        ],
        "10_Emergency Switch Operation Programming_2": [
          "10_Emergency Switch Operation Programming_2"
        ]
      },
      "requirements": [
        "Basic Knowledge of Digital Electronics."
      ],
      "description": "Hello all,\nWelcome to most awaited course for industrial automation student and professional Engineer.\nIn this course I have used Real hardware PILZ PNOZ Ethernet Module  and PNOZ Multiconfigurator Software.\nNowadays Every machine is equipped with safety plc controller either from Siemens or PILZ.\nBut PILZ Plc is available with many compact , complex and also comming with different Safety PLC Modules.\nIt also support Profibus , Ethernet ,RS232 and also different communication with another company PLC.\nPILZ PLC module is comming with readymade function library like Motion control , CAM control , two hand operation ,\nEmergency switches , Test Pulses Operation , various logic element library is also available.\nSo PILZ PLC is equipped full on  safety Library.\nSoftware:\nPNOZ Multiconfigurator is the software that is used to configure , commissioning , and simulate the PILZ Controller. This software can be installed on windows 10 platform also.\n\n\nIn this Course we will learn below Points,\n(1) . How to use PNOZ Multiconfigurator?\n(2) How to wire PILZ Pnoz M1pETH?\n(3) How to interface Emergency Switches?\n(4) How to implement Logic Element?\n(5) How to implement Relay output and feedback?\n(6) How to use us Test Pulses?\n(7) How to generate Error Coder ( IFault , OFault)?\n(8) How to implement user access for unauthorized Persons?\n\n\nAbove points are highlights of this course. We will see more detail in this course.",
      "target_audience": [
        "Engineering Student , Engineers ,  Professionals."
      ]
    },
    {
      "title": "Learn FreeRTOS from scratch",
      "url": "https://www.udemy.com/course/freertos-getting-started/",
      "bio": "Learn about FreeRTOS basics. Practise it's APIs with different examples.",
      "objectives": [
        "Understand RTOS Concepts in FreeRTOS context",
        "Working knowledge of FreeRTOS APIs",
        "Understand of FreeRTOS Environment and Coding Style",
        "Use Hardware Peripherals in FreeRTOS Application Development",
        "Apply for Job in Embedded Industry"
      ],
      "course_content": {},
      "requirements": [
        "Basic C Programming",
        "Some familiarity with Embedded Systems",
        "Hardware: Any STM32 Board",
        "Motivation!"
      ],
      "description": "Welcome to this FREE course on FreeRTOS. This Course will help you getting started with FreeRTOS. It includes hands-on practice on STM32. All Software Tools used in this course are freely available. All you need is a STM32 Board!\nThis course will teach you the best way to work with FreeRTOS. Using STM32CubeMX design interface, we will generate basic code for our Application Project. Then we will use SW4STM32 IDE to write, compile and debug our application code. We will also learn how to visualize the trace output.\nWhy this Course?\nThe basic aim of this course was to remove the knowledge-and-practice gap between engineering universities and embedded industry by providing interested students with the opportunity to Learn about RTOS and practice it on some hardware, for FREE!\nCourse Curriculum explained\nThe first Section gives you an introduction to the course. Then we will get all required tools, software and hardware in section two and will create and run a Hello World Project to make sure we have everything we need setup.\nNext four section, Section 3-6, introduces and explains to you different RTOS concepts in context of FreeRTOS. These section introduces different APIs provided by freeRTOS to implement those concepts. These section include a variety of application to work on those APIs explaining how to actually programming them, showing there output and verifying the result by visualizing the trace output.\nNow that we you have a understanding of different APIs provided by freeRTOS, Its time to move forward and start interacting with hardware. For this purpose, following sections will be included shortly:\nSection   7:\nInterfacing Hardware (INCLUDED!!!)\nSection   8:\nSerial Communication\n(coming soon)\nSection   9:\nI2C Communication\n(coming soon)\nSection 10:\nSPI Communication\n(coming soon)\nSection 11:\nUsing Watchdog timer\n(coming soon)\nNow, we have a good knowledge of RTOS concepts in context of FreeRTOS and writing application for freeRTOS. It time for us to look at \"freeRTOS\" itself. Following Section will be included to familiarize ourselves with freeRTOS\nSection 12:\nWriting Code, the \"freeRTOS\" Style (coming soon)\nSection 13:\nfreeRTOSConfig.h (coming soon)\n\n\nSection 14:\nfreeRTOS Scheduling (coming soon)\nNow, that we have dealt with the basic stuff one-by-one, let rap this course up by creating a Final Project, that will include all that we have previously learned.\nSection 15:\nA Practical Problem: Elevator Management System\n(coming soon)\nAbout Course Content:\nMost of the content i.e. Section 1,2, 7-15, of this course is written and produced by me for this course. However, Some of the concepts in Sections 3-6 are taken from different sources specially the from book “Using the FreeRTOS Real Time Kernel - A Practical Guide - Cortex-M3 Edition” by Richard Barry.\nHardware Requirements:\nTo follow along this course all you need is a STM32 Board! I am using STM32F103RbT6. You can use any STM32 board you want. When ever changes are required to be made, it's mentioned explicitly, both in lecture videos and code also.",
      "target_audience": [
        "Any one interested in learning FreeRTOS",
        "Fresh Graduates looking to join Embedded Industry",
        "Engineering Students",
        "Software Development Engineers",
        "Embedded Engineers",
        "IoT Developers"
      ]
    },
    {
      "title": "Learn Siemens S7-1200 PLC and HMI via TIA Portal (Advanced)",
      "url": "https://www.udemy.com/course/learn-siemens-s7-1200-plc-and-hmi-via-tia-portal-advanced/",
      "bio": "Learn how to fine tune your programming via structures and how to interface IO-LInk devices",
      "objectives": [
        "How to optimize your PLC Programming in a structured way",
        "Advanced commands of Siemens PLC in TIA Portal",
        "How to use Siemens Web Server",
        "Faceplates in HMI"
      ],
      "course_content": {
        "Understanding Structures and UDT": [
          "Introduction to this course",
          "How to get maximum out of this course?",
          "Understanding structures - Creating a new environment FACTORY I/O",
          "Connect with me on LinkedIn",
          "Defining Structures in PLC Database with various Datatypes",
          "Writing FC (functions) in SCL to move the values from PLC Tags to DB",
          "Adding more Tags in DB and optimizing the logic",
          "Reading analog value from the Potentiometer in the DB",
          "Programming the conveyor logic with Forward-reverse logic",
          "Adding indicator logic to the conveyor system",
          "Calculating the time required by box to reach destination on conveyor",
          "Error formula to check travel time of box",
          "Optimizing the logic!",
          "Understanding UDT (User-defined Datatype)",
          "Join our Telegram group",
          "Quiz 1- Test your skills",
          "Little advice!",
          "Join our student community",
          "Updates in Industrial Internet of Things"
        ],
        "Interfacing RFID with Siemens S7-1200 PLC": [
          "Understanding the objective and hardware requirement",
          "What is IO-Link? How to configure IO-Link master?",
          "Adding IO-Link master AL1100",
          "Configuring ports of IO-Link master AL1100",
          "Testing Read/Write operation of RFID (1)",
          "Testing Read/Write operation of RFID (2)",
          "Writing PLC algorithm for RFID interfacing(1)",
          "Writing PLC algorithm for RFID interfacing (2) - Optimized",
          "Writing PLC algorithm for RFID interfacing (3)",
          "Checking the buffer logic",
          "But i don't have RFID read/write module or IO-Link master!",
          "FACTORY I/O Environment- Configuration and Programming",
          "Buffer Logic in FACTORY I/O Environment",
          "Quiz 2- Test your skills"
        ],
        "Interfacing SmartLight with Siemens PLC via IO-Link": [
          "Understanding the tasks regarding Signal Light",
          "Configuration of AL1100 ports in Signal light",
          "Assigning the DB for AL1100",
          "Testing read write signal for Signal Light",
          "Programming the read write operation of Signal light (1)",
          "Write algorithm for Signal light",
          "Programming the read write operation of Signal light (2)",
          "Do i also get SmartLight (or Signal Light) in FACTORY I/O?",
          "Quiz 3- Test your skills"
        ],
        "High Speed counter instruction using Encoders": [
          "Understanding Encoders and task requirements",
          "Configuration of Encoder",
          "Understanding High speed counter types",
          "Testing Four fold modes of counting",
          "Converting counts to pulses and mm",
          "Converting Encoder counts to degrees and mm",
          "Quiz 4- Test your skills"
        ],
        "PLC-PLC Intercommunication": [
          "Understanding the tasks",
          "Putting information from PLC 1 to PLC 2",
          "Actuating output of PLC 2 via PLC 1",
          "Read/Write information between 2 PLC's",
          "Controlling operation modes of PLC 2 via PLC 1",
          "Quiz 5- Test your skills"
        ],
        "Reading Device status over the PROFINET": [
          "Understanding the tasks",
          "How to write PLC program to read PROFINET device status"
        ],
        "Siemens Web-Server": [
          "Understanding the tasks in this section",
          "How to activate the Web server?",
          "Making simple webpages",
          "Controlling PLC tag from webpage",
          "Accessing webserver using Tablet/Phone"
        ],
        "HMI Lessons - Scripts": [
          "Understanding the tasks",
          "Moving/Copying the HMI internal tag via button using script",
          "Perform basic arithmetic operations using script",
          "Reading PLC tag using script and executing script using PLC Clock pulse",
          "Box animation using script (1)",
          "Box animation using script (2)"
        ],
        "HMI Lessons on User authorization via RFID Tag": [
          "Understanding the tasks",
          "Understanding how PLC is programmed to read RFID tags",
          "Understanding how HMI is designed",
          "Writing scripts in HMI to read RFID information from PLC & authorizing the user"
        ],
        "HMI Lessons on Layout/theme": [
          "Using layout and theme in HMI"
        ]
      },
      "requirements": [
        "Siemens basic PLC Programming in TIA Portal",
        "Siemens basic HMI Programming in TIA Portal"
      ],
      "description": "In this course, you will learn advanced PLC programming and interfacing with IO-Link technology. I am using S7-1200 PLC with the TIA portal to explain the following topics:\n\n\nHow to structure the PLC program using Struct and UDT\nHow to interface RFID via IO-Link master in Siemens S7-1200\nHow to interface SmartLight via IO-Link master in Siemens S7-1200\nHow to read PROFINET device status\nHow to use Siemens web-server\nHow to use high-speed counter instruction for Encoder\nHow to use layout in HMI\nHow to use scripts in HMI\nHow to login to HMI via RFID tags\nTo continue with this course, it is highly recommended that you complete the S7-1200 and HMI from Scratch basic course. Or you must know the basics of PLC programming and HMI Screen designing. The course is explained via real hardware and devices, not just simulation. In order to follow through with this course, it is recommended that the student should have TIA Portal installed and running on their computer. The TIA portal can be downloaded free of cost from Siemens Website and can be used for 21 trial days.\nThere are sufficient quizzes and exercise to make the course interactive and interesting. After completion of the course, the student will get the course completion certificate.\nOnce enrolled, you can access this course for a lifetime and in case you encounter any doubts or if any student needs some help, he/she can contact the instructor via the student dashboard.",
      "target_audience": [
        "Industrial Engineers",
        "Engineering Students"
      ]
    },
    {
      "title": "5G: Technologies, Architecture And Protocols",
      "url": "https://www.udemy.com/course/5g-network-training-key-technologies-architecture-and-protocols/",
      "bio": "5G Air Interface Channels, Voice Over 5G, Security in 5G, NG-RAN, 5G Core, 5G Explained according to 3GPP specifications",
      "objectives": [
        "Everything they need to know to get started with 5G",
        "Standardization of 5G",
        "5G Use Cases-Enhanced Mobile Broadband, Massive Machine Type Communication, URLLC",
        "5G Deployment Options-Standalone Vs Non-standalone Architectures",
        "Dual Connectivity in 5G Networks",
        "Small Cells With Dual Connectivity in 5G Technology",
        "5G Frequency Spectrum in 5G Networks",
        "Flexible Numerology And Frame Structure",
        "5G Cloud Radio Access Network (CRAN)",
        "Massive MIMO AND Beam-forming in 5G",
        "5G Access Network Architecture",
        "5G Core Network Architecture",
        "Network Function Virtualization",
        "Network Slicing",
        "UE Identifiers-PEI, SUPI, SUCI, 5G-S-TMSI, 5G-GUTI",
        "Tracking Areas in 5G",
        "5G Network Identifiers",
        "5G Network Procedures"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of telecommunications",
        "Principles of wireless communications",
        "Understanding of GSM, 3G or 4G is a plus but not required"
      ],
      "description": "This is a very extensive and up-to-date course about 5G mobile networks that will let you understand\n- The requirements and key drivers for 5G wireless development\n- 5G use cases and services\n- the key technologies in 5G NR (Dual Connectivity, small Cells, CRAN, Flexible Numerology, massive MIMO etc)\n- 5G Radio Access Technology And Frame Structure\n-Network Virualization and Slicing in 5G\n-The Key elements/Functions in 5G Core Network\n-UE and Network Identifiers in 5G\n-Procedures in 5G (UE Registeration, PDU Session establishment, Paging, Tracking Area Update, Handover)\n-Handover in 5G, Xn and X2\n-5G Service Based Architecture\n-Network Slicing\n-Security in 5G Mobile Networks\n-Voice Over 5G\n-5G UE State Management\n-5G PDU Session Types, Attributes and Quality of Service (QoS)\n- 5G Air Interface Channels, Cell Acquisition, Data Scheduling, Paging etc\n\n\nThis 5G training is comprehensive and concise, and it is designed to explain the complex concepts in easy to understand manner, so that you may get started with this 5G cellular technology as soon as possible. This course is designed to provide you with necessary functional knowledge possible in shortest possible time.\nThe course comes with 100% MONEY-BACK GUARANTEE.\nThis course is targeted for:\nTelecom Professionals\nTelecom students\nStudents trying to enter the field of telecommunications\nNetwork Professionals\nStudents of wireless communications\nPeople preparing for interview in the field of 5G\nNetwork Engineers",
      "target_audience": [
        "Network and system engineers who want to pursue their carrier in Telecom Industry",
        "Students and working professionals who want understanding of 5G systems.",
        "Anyone who want to learn protocols and procedures involved in 5G systems.",
        "Anyone who want to upgrade their skills for better job."
      ]
    },
    {
      "title": "MicroPython for everyone using ESP32 / ESP8266 (Beginner)",
      "url": "https://www.udemy.com/course/micropython-for-everyone-using-esp32/",
      "bio": "Kick-start to MicroPython . You will learn the basics of MicroPython from Blink an LED to MultiTreading & WiFi connect",
      "objectives": [
        "Kick-start to MicroPython using ESP32 / ESP8266",
        "Coding and flashing using Thonny IDE",
        "Multi-threading with ESP32",
        "Accessing internal sensors of ESP32 ( temperature & hall effect sensors)",
        "Interfacing with DHT11 sensor module",
        "80 % of the course supports with ESP8266",
        "Auto connect to WiFi network"
      ],
      "course_content": {
        "Introduction to Micropython for everyone": [
          "Introduction"
        ],
        "Setting up software for the course": [
          "Software required for the course",
          "Install Python 3",
          "Install Thonny IDE",
          "Install Putty",
          "Solve: port is not detected / device drivers"
        ],
        "Flashing MicroPython firmware to ESP32 / ESP8266": [
          "Download the MicroPython firmware",
          "Flashing MicroPython using Thonny IDE",
          "Flashing MicroPython using esptool",
          "Flashing Micropython using espress-if tool"
        ],
        "Python 3 syntax, recap using MicroPython": [
          "Print function",
          "Type function",
          "Input function",
          "Help function",
          "Conditional statements (if,else, elif)",
          "While loop",
          "For loop",
          "Create own function"
        ],
        "Controlling GPIOs in ESP32 / ESP8266": [
          "PINOUT diagram of ESP32 / ESP8266",
          "Blink an LED",
          "Analog to digital conversion",
          "Capacitive TouchPad",
          "DHT11 -Temperature and humidity",
          "ESP32 Internal temperature",
          "ESP32 internal hall effect sensor",
          "Multi_Threading"
        ],
        "WiFi network access": [
          "Auto connect to WiFi network"
        ],
        "Get weather data of any city": [
          "Get weather data of any city from Openweathermap- part1",
          "Get weather data of any city from Openweathermap- part2"
        ]
      },
      "requirements": [
        "Windows 10 (recommended )  / Linux / Mac computer",
        "Little knowledge of electronics",
        "All required software for this course are of  free of cost",
        "ESP32 / ESP8266",
        "DHT11 sensor module",
        "10 K potentiometer",
        "LD33 voltage regulator IC (3.3 V output)",
        "LEDs",
        "1 K resistors ( ¼ W)",
        "Breadboard",
        "Male to male jumper wires",
        "Micro USB cable (Good quality with data wires)"
      ],
      "description": "This course is a kick-start to MicroPython. Micropython is a lightweight version of Python 3 programming language designed for microcontrollers with a minimum of 256KB of ROM and 16KB of RAM. MicroPython supports chips like ESP32,ESP8266,STM32,nRF52,W600 etc.\n\n\nThis course mainly covers the basics of MicroPython with different sections, Python 3 syntax, GPIO controlling, WiFi connectivity.\n\n\nThe highlight of this course is MultiThreading\nIn this course, the software used is free of cost.",
      "target_audience": [
        "Electronics beginner, hobbyists, engineering students, electronics professionals and anyone have an interest to learn new technology"
      ]
    },
    {
      "title": "How to Become an Embedded Systems Engineer Bootcamp",
      "url": "https://www.udemy.com/course/how-to-become-an-embedded-systems-engineer-embedded-developer/",
      "bio": "Go from Zero to Hero and Turn Embedded Systems from a Hobby to a Career Path",
      "objectives": [
        "What is an Embedded System?",
        "What is an embedded systems engineer?",
        "The core skill set of an embedded systems engineer",
        "Embedded Systems Engineer Career Path",
        "Embedded Systems Engineer Degrees and Certifications",
        "Program microcontrollers with C programming language",
        "Make a user friendly program",
        "Trace errors in your Code easily and effectively",
        "Program in Embedded C",
        "Make PCB Design and Fabrication",
        "Learn C# Fundamentals by Coding",
        "Turn 2D Sketches into 3D Models",
        "Master 3D Design",
        "Program STM32 - 32-bit ARM-Based Microcontroller",
        "How to Set Up an Electronics Home Lab Tools and Equipment",
        "How to Solder Electronic Components Like A Professional"
      ],
      "course_content": {},
      "requirements": [
        "A Computer",
        "Download the provided software which is free and included"
      ],
      "description": "So you want to become an embedded systems engineer? What’s it going to take to get there? If you ’re into robots, know your way around PCBs, and value rendering in C, you might have the material of an embedded systems engineer. In this course, we ’ll fill in the chops, commissions, and career tracks of an embedded systems engineer.\n\n\nSo,  If you want to become an embedded systems engineer and want a career in this field, this course is where you should start.\nThis is a comprehensive, immersive course that will teach you everything you need to know about embedded systems engineering, Includes lectures on hardware and software.\n\n\nWhy you should take this course?\nThis is an online course that takes people from beginner to expert in just a few months\nIt teaches people how to become an embedded systems engineer and provides them with the skills they need for the job\nYou'll learn about all it's aspects , and more\nIt's an easy way for anyone who's interested in learning engineering.\nThe lectures are available as video so that you can watch from any device.\n\n\nWelcome to this course.\n\n\nNearly every lecture and section of the course is delivered with one aim in the head, which is to present you a quick look and get you started swiftly in embedded systems as a career path, not precisely a hoppy.\n\n\nFrom Programming using C language to PCB Design, 3D Design and Programming different Microcontrollers (8- bit and 32- bit).\n\n\nThe course doesn't waste your time. From the very start, we deliver an illustration with every piece of information.\n\n\n\n\nThe course is modular in nature. Are you new to the world of Embedded Systems? Great! start at the beginning, and we'll tutor you everything you need to know.\n\n\nWe take you step-by-step through the assignments each time supplying exemplifications and documentation to make sure you're supported through the course.\n\n\n\n\nWe're instructors with a singular focus on delivering a meaningful experience for our scholars. And, while we can not do the work for you, we will assist you to reach your full eventuality.\n\n\nThe course comes with free software and lots of lagniappes books and wastes that will help you along the way, Enjoy your trip, and Happy literacy from all of us then at Educational Engineering.",
      "target_audience": [
        "This course is meant for individuals who wants to become Embedded Systems Engineers",
        "Anyone want's to learn basics of C programming to get started with programming Microcontrollers",
        "Anyone want's to learn how to Program in Embedded C",
        "Anyone want's to learn how to Make PCB Design and Fabrication",
        "Anyone want's to learn how to Learn C# Fundamentals by Coding",
        "Anyone want's to learn how to Turn 2D Sketches into 3D Models",
        "Anyone want's to learn how to Master 3D Design",
        "Anyone want's to learn how to Program STM32 - 32-bit ARM-Based Microcontroller",
        "Anyone want's to learn How to Set Up an Electronics Home Lab Tools and Equipment",
        "Anyone want's to learn How to Solder Electronic Components Like A Professional"
      ]
    },
    {
      "title": "Arduino FreeRTOS From Ground Up™ : Build RealTime Projects",
      "url": "https://www.udemy.com/course/arduino-freertos/",
      "bio": "Build over 30 RealTime projects on Arduino",
      "objectives": [
        "Port FreeRTOS to any Arduino board",
        "Build Multitask real-time applications with FreeRTOS on Arduino",
        "Master FreeRTOS Task Management features",
        "Master FreeRTOS Resource Management features",
        "Master FreeRTOS Task Synchronization features",
        "Master FreeRTOS Event Management features",
        "Calculate the CPU Utilization of an RTOS",
        "Implement and explain popular scheduling algorithms",
        "Master FreeRTOS Interrupt Management features",
        "Master FreeRTOS Time Management features",
        "Understand Rate Monotonic Schedulers",
        "Understand First Come First Served Schedulers",
        "Understand Round-Robin Schedulers",
        "Understand Weighted-Round-Robin Schedulers"
      ],
      "course_content": {},
      "requirements": [
        "Any Arduino board",
        "Basic Arduino programming skills will be a plus"
      ],
      "description": "This course teaches you the foundations of real-time systems and how to build real-time applications using FreeRTOS on Arduino boards.  The course gives a detailed overview of the characteristics of the FreeRTOS real-time kernel,  provides a detailed tutorial on the APIs required  to implement the various features of FreeRTOS   on Arduino and then goes on to build about 30 real-time projects .\nThis course does not assume prior knowledge of real-time systems and application programming. By the end of this course you should be able to build your own multitask FreeRTOS  real-time applications which use all the features of a modern real-time application (features such as semaphores, mutex, event flags, hooks, queues, mailboxes etc )and then test the performance of these features .You should also be able to : Calculate the CPU Utilization of an RTOS, Understand Rate Monotonic Schedulers,port FreeRTOS  to any Arduino board,Understand Round-Robin Schedulers,Understand Weighted-Round-Robin Schedulers, Understand First Come First Served Schedulers, Implement and explain popular scheduling algorithms and so much more. Please take a look at the full course curriculum.",
      "target_audience": [
        "People who want to advance their Arduino programming skills",
        "Arduino hobbysits",
        "People who want to master real-time applications development"
      ]
    },
    {
      "title": "PCB Design and Fabrication For Everyone",
      "url": "https://www.udemy.com/course/pcb-design-and-fabrication-for-everyone/",
      "bio": "Learn Printed Circuit Board (PCB) design from Scratch With Zero Experience in Electronics, No Effort and a Free Software",
      "objectives": [
        "Make PCB with Zero Experience in Electronics",
        "Learn basic to advance PCB design",
        "Draw a schematic of your circuit in few simple steps",
        "Create your own custom Printed Circuit Board (PCB).",
        "Connect a Breadboard of your circuit in few simple steps",
        "Auto Route to speed up the routing process",
        "Make A PCB in the shortest possible time",
        "Route Printed Circuit Board (PCB)",
        "Prototype your kickstarter idea",
        "Get a job in PCB design"
      ],
      "course_content": {},
      "requirements": [
        "A Computer or Laptop with any operating system",
        "The Software that will be used to create the PCB Provided in the first Section (FREE)"
      ],
      "description": ">>> This course is a first of its kind in which you will learn from start to finish on how to design your own Printed Circuit Board (PCB) with Zero Experience in Electronics and Circuit Design. YES, you did hear me, No experience is required at all. <<<\n>>> Continues Updates <<<\nWhy you should take this course?\nLearn the fundamentals of PCB design.\nLearn a new skill.\nUnderstand the process of making your own circuit board including designing, mounting, routing, soldering, and programming.\nNo prior design experience necessary.\nAdaptable to many fields of interest.\nLearn for free in your spare time.\nNo effort, easy to follow course.\nPractical Content | More Than 5000 STUDENTS!!! THANK YOU!!!\nWhat students are saying:\nDavid Stoneburg says, \"Fritzing exercise was good, same with video showing drilling of thru-holes.\"\nAkshay Gudadari says, \"Quality you get from this course of PCB design is 100%. You get to know about each and everything about the layers in PCB. From basic to professional level PCB design knowledge.\"\nAdam Kio says, \"That channel is awesome. Thanks so much for that, thank you!\"\nAnirban Kar Chaudhuri says, \"Comprehensive, concise, well-illustrated examples and very good hands-on demonstration. Great job.\"\nMercedes Stefania Alaniz says, \"I liked the software that we used in this course!!!, and the teacher of course :) I could understand everything.\"\nWelcome to this course.\nThis course will help you gain PCB design skills that will help you get started freelancing or secure a job in PCB design with a free software that is one of the top PCB design tools used around the world. You won't have to pay anything for the software, and it has a vast library for almost every component in the electronics industry.\nPrinted Circuit Board design is very interesting for any electronics geek, microcontroller programmer, or anyone wishing to build their own PCB by themselves. It is very simple and easy to understand for beginners.\nNo Previous Experience + Free Software + Time-Saving Techniques = Perfect PCB Design\nThis is available for you in this course, along with bonuses and additional material, and PCB design software.\nWhat You Will Learn:\nFundamentals of PCB design.\nHow to design, mount, route, solder, and program PCBs.\nUsing free PCB design software.\nPractical techniques for efficient PCB design.\nWho is This Course For:\nBeginners in electronics and PCB design.\nHobbyists and DIY enthusiasts.\nStudents and educators in electronics and programming.\nAnyone interested in learning PCB design from scratch.\nRequirements:\nNo prior experience required.\nBasic understanding of electronics is helpful.\nWillingness to learn and experiment with PCB design.\n\n\nAbout the Instructor:\nEducational Engineering Team\nTeam of Skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading entity in the Microcontroller industry with over 13 Years of Experience in teaching and practical projects. We provide in-depth, step-by-step blueprints on taming complex topics in easy and digestible bite-sized videos.\nHaving been in the Programming and Microcontroller business since 2007, we've catered to students' and educators' needs, teaching over 250k-THOUSAND students and counting through our 100+ courses on Udemy.\nAshraf Said AlMadhoun is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He is the Chief Educational Engineer at Educational Engineering Team, a company founded to explore new trends and technologies and to educate the world.\nOur online courses have helped over 250,000 people globally to excel and make great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Circuit Designers",
        "PCB Designers",
        "Electronics Geeks",
        "Circuits Creators"
      ]
    },
    {
      "title": "Arduino Step by Step Getting Serious",
      "url": "https://www.udemy.com/course/arduino-sbs-getting-serious/",
      "bio": "Create Arduino gadgets that can communicate, move, interact, measure and detect.",
      "objectives": [
        "Use communications technologies like Wifi, BLE, and radio",
        "Use servo, DC and stepper motors with various controllers",
        "Use LCD, OLED and TFT screens with buttons and touch interfacese",
        "Store data in external storage like SD Cards and EEPROM",
        "Optimise a sketch to minimise memory footprint, reduce power consumption and increase performance",
        "Control large loads like relays and lights",
        "Improve button reliability with hardware debouncing",
        "Much more, please see curriculum for a full listing"
      ],
      "course_content": {
        "Introduction to this course": [
          "What is this course about?",
          "Is this course right for you?",
          "Finding your way around the course",
          "List of parts",
          "Two common questions about parts and tools",
          "How to ask a question",
          "How to report an error"
        ],
        "Arduino Uno R4 Wi-Fi": [
          "An introduction to the Arduino R4 Wi-Fi",
          "LED matrix",
          "Graphics with frames",
          "How to use the LED matrix editor",
          "How to use the built-in frames",
          "Custom animation",
          "Text",
          "Wi-Fi",
          "List Wi-Fi networks",
          "Connect to a local Wi-Fi network and fetch a URL",
          "Control a local LED via remote CSV file",
          "Web server and matrix control",
          "Real-time clock",
          "EEPROM"
        ],
        "The BME280 environment sensor": [
          "[0490a] Introduction to the BME280",
          "[0490b] BME280 SPI wiring",
          "[0490c] BME280 I2C wiring",
          "[0490d] BME280 Sketch walkthrough and demo"
        ],
        "The MPU6050 motion sensor": [
          "[0540a] Introduction to the MPU6050 motion sensor",
          "[0540b] A look at the MPU6050 datasheet",
          "[0540c] MPU6050 wiring",
          "[0540d] MPU6050 Arduino sketch",
          "[0540e] MPU6050 Processing demonstration",
          "[0540f] MPU6050 bonus lecture"
        ],
        "Compass and magnetometer": [
          "[0590a] Introduction to the HMC5883 compass magnetometer",
          "[0590b] HMC5883 wiring",
          "[0590c] HMC5883 sketch",
          "[0590d] HMC5883 demonstration"
        ],
        "The flex sensor and membrane potentiometer": [
          "[0620a] Introduction to the flex sensor",
          "[0620b] Flex sensor wiring",
          "[0620c] Flex sensor sketch",
          "[0630a] Introduction to the membrane potentiometer",
          "[0630b] Membrane potentiometer demonstration"
        ],
        "The rotary encoder": [
          "[0640a] Introduction to the rotary encoder",
          "[0640b] Rotary encoder wiring and quadrature encoding",
          "[0640c] Rotary encoder sketch"
        ],
        "Keypads": [
          "[0670a] Introduction to the keypad",
          "[0670b] Working out the keypad pins",
          "[0670c] Keypad wiring",
          "[0670d] The phone keypad",
          "[0680a] Keypad 1-wire connection, Introduction",
          "[0680b] Keypad 1-wire connection, wiring",
          "[0680c] Keypad 1-wire connection, sketch",
          "[0690a] Keypad with the 74922 decoder IC, Introduction",
          "[690b] Keypad with the 74922 decoder IC, wiring",
          "[690c] Keypad with the 74922 decoder IC, sketch and demo",
          "[690d] Bitwise operators"
        ],
        "Graphics screen: Using a 1.8\" TFT screen shield with joystick and SD card": [
          "[0730a] Introduction",
          "[0730b] Setup, graphics primitives and documentation",
          "[0730c] Displaying images from the SD card",
          "[0730d] Using the joystick and integrated button",
          "[0730e] How to create your own user interface: make the background image",
          "[0730f] How to create your own user interface: an example sketch"
        ],
        "Graphics screen: Using a 2.2\" TFT with SD Card": [
          "[0732a] Introduction",
          "[0732b] Wiring",
          "[0732c] Simple demonstrations",
          "[0732d] Displaying data",
          "[0732e] The library and resources"
        ]
      },
      "requirements": [
        "You have a basic understanding of the Arduino",
        "A copy of the Arduino IDE",
        "You can write simple sketches",
        "You can create small circuits on a breadboard",
        "Basic tools, like a multimeter, a breadboard, wires, an Arduino Uno board, etc (a list of required tools and parts is available in the first section of the course, free to access)"
      ],
      "description": "Course last updated on February 2025\nIn this update I added three new sections at the end of the course to cover these topics:\nHow to use a infrared receiver to control actions on your Arduino. This provides a low cost method of controlling your Arduino projects wirelessly, and provides an excellent alternative to radio control.\nHow to use an RFID module to implement security, identification, or other automation applications.\nHow to use a joystick as an input device.\nUpdated of December 2024\nThis update introduces advanced lectures on using the Wokwi simulator, a powerful tool that enhances your ability to design, debug, and analyze Arduino projects in a virtual environment. With these new lessons, you’ll explore professional-grade features that make learning and prototyping more efficient.\nThe new Section 49: Wokwi Simulator takes your simulation skills to the next level, focusing on advanced applications and tools. Here’s a breakdown of the new lectures:\n• Wi-Fi with ESP32: Learn how to simulate and experiment with Wi-Fi functionality using the ESP32 microcontroller in Wokwi.\n• What Is This Section About?: A brief overview of how this section expands on simulator concepts.\n• Wokwi Refresher: A recap of foundational Wokwi concepts, building on knowledge from Arduino Step by Step Getting Started.\n• Shift Register with 8 LEDs: An example project demonstrating how to simulate a shift register to control multiple LEDs efficiently.\n• SD Card Datalogger: Learn to simulate data storage projects, including writing to and reading from an SD card.\n• Interactive Debugger: Explore Wokwi’s built-in debugging tools to pinpoint and resolve issues in your code.\n• Logic Analyzer: A two-part deep dive into using the logic analyzer for signal analysis and SPI protocol decoding.\n\n\nAbout this course\nWelcome to Tech Explorations Arduino Step by Step Getting Serious, where you will extend your knowledge of Arduino components and techniques and build up new skills in the largest, and the most comprehensive course on the Web!\nArduino is the world's favorite electronics learning and prototyping platform. Millions of people from around the world use it to learn electronics, engineering, programming, and create amazing things, from greenhouse controllers to tree climbing robots remotely controlled lawnmowers.\nIt is a gateway to a career in engineering, a tool for Science, Technology, Engineering, and Mathematics education, a vehicle for artistic and creative expression.\nThe course is split into 40 sections and over 250 lectures spanning more than 30 hours of video content.\nIn each section, you will learn a specific topic.\nEach topic contains:\nmultiple examples of code\nwiring schematics\ndemonstrations of a completed circuit\nalternative scenarios\nPeter, the instructor, and designer of this course, helps you understand the code and the circuit wiring by walking you through them, step by step and explaining every line of code and every wire of the circuit.\n\nStudents have access to:\nThe course repository, which contains all of the sketch code, wiring schematics and external resource links, which Peter keep up-to-date and correct\nThe course discussion Forum, where you can ask questions. Peter monitors this Forum regularly and responds to your questions\nThe Tech Explorations Makers Club private Facebook group where students can discuss their gadget ideas. Use this group to ask questions that don't fit within the context of the course, discuss your projects or help others\n\n\nThis course contains:\n39 hours of brand new video content\n12 hours of retouched video content (which I will be replacing in regular intervals with brand new content)\n49 sections with totally reorganised content\nMore than 300 lectures (and counting)\nOver 100 new and updated sketches (and counting)\nOver 50 new circuit schematics (and counting)\nNew course repository, reorganised so that sketches, schematics and lecture external resources are easy to find (access everything at one place)\n\n\nHere are some of the topics that you will learn about in this course (for a full list, please look at the course curriculum):\nAdvanced environment, motion, position and GPS sensors.\nUsing the Wokwi online simulator to develop Arduino projects in your browser, without real hardware.\nNew ways to receive input from the user with keypads, potentiometers, and encoders.\nNew ways to provide feedback to the user, with color screens, complete with a touch-sensitive surface!\nAwesome ways to configure LEDs, monochrome or color.\nUse matrix or LED strips, display text, graphics, and animation.\nCreate motion with various kinds of motors and controllers.\nNetworking with Ethernet and Wifi. Communications with Bluetooth, Bluetooth Low Energy,\nCommunications with highly-reliable packet-based radio, and simple, ultra low-cost radio for less critical applications\nMultiplying your Arduino's ability to control external devices with shift registers and port expanders.\nMuch, much more (for a full list, please look at the course curriculum)\n\n\nThis course is not appropriate for people new to the Arduino. It will not teach you about the basics of the Arduino, like how to use the Arduino IDE, blink an LED or create a simple sketch and circuit. If you are a new Arduino maker, you should consider taking the Tech Explorations Arduino Step by Step Getting Started course first.\nApart from a basic understanding of the Arduino, a student of this course must be willing to work hard. You can't learn serious skills without serious work. There are a lot of courses out there that promise you a fun and easy learning experience. This is not one of them. I promise you a lot of hard work ahead.\n\nWhat about tools and parts?\nOther than a few essential tools and parts that you can learn about in the first section of the course (which is free to watch) I only ask that you come with an appetite to learn and a willingness to work hard. The course features a large variety of parts, but you don't need (and you shouldn't) get them all to begin learning. In fact, getting all of these parts too early is not a good idea! Watch the free lecture to understand why in the first section of this course.\n\nShould you join right now?\nWatch the free lectures in the first section of this course before you choose to join. They contain valuable information that will help you decide if this is the right course for you.\nI look forward to learning with you!",
      "target_audience": [
        "Arduino makers that wish to improve their skills and knowledge",
        "Teachers who want Arduino resources for their classroom",
        "Maker space coordinators who are need an online resource for their members"
      ]
    },
    {
      "title": "Hands-on Embedded Systems with Atmel SAM4s ARM Processor",
      "url": "https://www.udemy.com/course/armcortex-adc/",
      "bio": "Understand the processor core and the ADC peripheral with hands-on projects using the Atmel SAM4s microcontrollers",
      "objectives": [
        "Understand the processor and exception model for ARM Cortex processors",
        "Use ASF (Atmel Studio Framework) to write embedded code for ARM Cortex microcontrollers",
        "Handle ADC triggers and interrupts",
        "How to read digital codes and find their corresponding analog value",
        "How to read chip temperature using ADCs",
        "Understand the core concepts of analog to digital converters",
        "Directly write to registers to program ARM Cortex peripherals",
        "Understanding embedded systems",
        "Program ADCs on ARM Cortex",
        "Understand and configure various timing requirements of an ADC"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of embedded systems, C programming",
        "We will be using SAM4s Xplained Pro development board, it is helpful but not necessary for students to purchase it"
      ],
      "description": "This course received a major update in Feb 2018 based on the feedback provided.\nWelcome to this course on Hands-on Embedded Systems with Atmel SAM4s ARM Processor. At the end of this course you will be comfortable with the ARM processor core, processor model, exception model, reset sequence, general and special registers, and also a master in the ADC peripheral. This course has been made from the ground-up to help you transition from the world of Arduino into the world of 32 bit Atmel SAM4s ARM microcontrollers.\n\n\n\nWho am I?\n\nI’m Akshay, and I’ll be your instructor for this course. I have been fascinated with micro controllers since I was a child, and now I consider it lucky to have it as my profession. I currently write firmware for safety critical systems that go inside electric cars. With my knowledge of embedded systems over the past 10+ years, and working in Silicon Valley, I have gained a unique insight into what the industry needs and what the students are lacking.\n\n\nCourse Structure\n\nThis course has 8 sections.\nSection 1 will help you understand the differences between Arduino and 32 bit ARM Cortex. You will also understand the Cortex-M instruction set.\nSection 2 is dedicated to the setup of the development environment and hardware. This section also contains reference documents that you will be using for the rest of the course.\nSection 3 is about the processor fundamentals. At the end of this section you will be comfortable with the inner workings of the processor, the general and special registers that do all the magic inside the processor. You will learn how to interpret the assembly instructions and how they work inside the processor.\nSection 4 is about the peripherals. You will learn the theory behind the ADC (Analog to Digital Converter) peripheral.\nSection 5 is the first project of this course where you will sample an analog voltage using ASF libraries in Atmel studio and understand how the peripheral and processor work together to convert this into a digital code.\nSection 6 is the second project in this course where you will understand how an analog voltage is sampled and implement it by directly writing to the registers. (No library use here)\nSection 7 is the third project in this course where you will understand how to sample real time temperature and how the processor interprets the value in degrees C of F. You will implement it using ASF code.\nSection 8 is a homework project in which you will implement temperature sensing using direct register access. Solutions are provided for reference.\n\n\nThis course content was generated from scratch in a way to get the point across to you, in the most efficient, exciting and engaging way!\n\nIs this course for me?\n\nIf you are an embedded systems enthusiast, professional or student who is struggling to start programming on the ARM Cortex-M platform, this course if for you. If you have worked with Arduino before, and have basic working knowledge of embedded systems, this course is for you. If you have already been working with ARM Cortex microcontrollers and want to gain a deeper understanding of the processor’s fundamentals as well as the ADC peripheral, then this course is for you!\n\n\nCan I use another development board?\nI use the Atmel SAM4s Xplained Pro development board in this course which houses a ARM Cortex-M4 processor. You may choose any other microcontroller of your choice that works with Atmel Studio. If you need help selecting a board, let me know and I can help you out.\n\n\nMy personal guarantee\nI am proud to say that I stand behind this course 100%, and guarantee you that you will get valuable information from this course. There is also a 30 day money back guarantee from Udemy.\nWith this, you can feel confident about your purchase and know that it is a valuable find.",
      "target_audience": [
        "Beginners to embedded programming, with basic understanding of code",
        "Intermediate embedded programmers",
        "Students wanting to explore embedded programming",
        "ARM Cortex enthusiasts",
        "Atmel enthusiasts"
      ]
    },
    {
      "title": "All About Brocade Fiber Channel",
      "url": "https://www.udemy.com/course/all-about-brocade-fiber-channel/",
      "bio": "You will have the benefit of getting thousands of training hours condensed into a short and informative course !",
      "objectives": [
        "Successfully Manage and Troubleshoot a brocade fiber channel fabric"
      ],
      "course_content": {},
      "requirements": [
        "Very Basic understanding of Fiber channel or Just purchased a Brocade Fiber channel switch"
      ],
      "description": "This course reviews all the information needed to successfully manage and troubleshoot a Brocade Fiber channel fabric. IF you are new to IT or an experienced professional, you will learn some valuable tips in this course !\nAll course material is created using real world examples and scenarios !\nCourse Topics include:\n1. Intro To FC\n2. Fabric Topologies\n3. Troubleshooting\n4. Zoning\n\n\nAt the end of this course you will be able to easily and confidently manage a Brocade Fiber Channel Fabric. You will know how to approach issues and know how to resolve them when they arise.",
      "target_audience": [
        "New IT Professionals, Anyone interested in learning more about Brocade fabrics"
      ]
    },
    {
      "title": "Design Your PCB Board Using Altium Designer (Arduino Nano)",
      "url": "https://www.udemy.com/course/design-your-pcb-board-using-altium-designer-arduino-nano/",
      "bio": "Design Your PCB Board Using Altium Designer (Based on Arduino Nano Project)",
      "objectives": [
        "You will learn how to deal with Altium Designer, how to design your own PCB.",
        "You will learn how to draw schematic diagram and convert it into your pcb design layout."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Why do we need Altium designer?",
          "How can you download Altium designer?"
        ],
        "Schematic Toolbar": [
          "File",
          "View",
          "Edit",
          "Project",
          "Place",
          "Design",
          "Tools",
          "Reports",
          "Window",
          "Help",
          "Schematic Panels"
        ],
        "Draw the schematic & Creating libraries": [
          "Pre-design Stage",
          "Design Cycle",
          "BOM (Bill of material)",
          "Introduction & Creating Project",
          "Create Capacitor 0.1uF 0805",
          "Create Cap 4.7uF 1206",
          "Create Cap 18pF 0805",
          "Schottky diode, 0.5A 20V",
          "LEDs 0805",
          "ATmega168-20AU",
          "IC USB FS SERIAL UART 28-SSOP",
          "Push Button Switch (B3U-1000P)",
          "Create Voltage Regulator UA78M05CDCYRG3",
          "Crystal 16MHZ",
          "SMD Resistors",
          "Create 15 Position Header",
          "Header ICSP",
          "3D Model of ICSP Header",
          "Mini-USB-B Connector",
          "Doing Mechanical Assembly Layer for all the Components",
          "Connecting Voltage Regulator",
          "Connecting USB IC",
          "Connecting Mini-USB-B Connector",
          "Page Option & Annotation",
          "ATMega Connection",
          "15 Pos. Header Connection",
          "6 Pos. ICSP Header Connection",
          "Auto Selector & Final Connection"
        ],
        "Finalizing Schematic": [
          "Checking & Improving",
          "Adding Notes",
          "Compiling & Validating",
          "Warnings & Errors"
        ],
        "PCB Toolbar": [
          "File",
          "Edit",
          "View",
          "Project",
          "Place",
          "Design",
          "Tools",
          "Route",
          "Reports",
          "Control Panel"
        ],
        "PCB Placement": [
          "Layout Design Cycle",
          "Reading Assignment: The Top 10 PCB Component Placement Tips for the PCB Beginner",
          "Create PCB Board",
          "Setting Board Shape & Dimension & Mouing Holes",
          "Placing Main Headers (15 Pos)",
          "Placing Main Header (ICSP)",
          "Placing Mini-USB Connector",
          "Changing Packages to Fit in the board",
          "Color the 3D Header",
          "Color 3D USB Connector & Pushbutton",
          "ICs Placement",
          "Placement Other Components"
        ],
        "PCB Layout": [
          "Preparing & Planning (Setting Rules)",
          "Routing Headers",
          "Routing Connectors & Others",
          "Final Routing",
          "Polygons",
          "Routing Finalization",
          "Design Rule Checking",
          "Adding SilkScreen (Text)",
          "Setting The Board Outline"
        ],
        "Manufacturing Files": [
          "Printing Schematic in PDF",
          "Exporting 3D Board as PDF & STEP Model",
          "Printing PCB Layers in PDF",
          "Pick & Place File",
          "BOM (Bill Of Material)",
          "Gerber File"
        ]
      },
      "requirements": [
        "You need to download Altium Designer software. If you are a student and you don't have it, ask Altium for a student license.",
        "Basic knowledge of electronics basics."
      ],
      "description": "Description\nLearning a basic board design is essential for everyone who would like to work in electronics or who would like to design electronic boards or products. Learning board design in the right software can open you door into many companies, help you to get a well paid job and can be used to design very complex and advanced boards.\n\nBenefits\nHands-on experience of working with PCB Design.\nExposure to complete PCB Design.\nKnowledge of Electronic Components.\nUnderstanding of Electronics Project Design Flow.\n\n\nContents and Overview\nYou will start with Arduino Uno reference schematic. You will learn how to re-draw the schematic, modify it, you will learn how to improve it and how to do PCB layout. The course videos are step-by-step and even if you are new in electronics or you have never used Altium Designer before, by repeating these steps, you will design your own board. By the end of this course, you will create all the necessary documents needed to manufacture the board.\nWithin 10 hours you will learn how to:\n\n\nDraw schematic, including tips for component selection and important circuits.\nGo through the schematic toolbar to explain it and get more familiar with.\nCreate components, draw schematic symbols and footprints.\nPlacing components into your PCB.\nRoute PCB and useful tips about layout.\nGo through the PCB toolbar it to explain and get more familiar with.\nGo through the DRC to explain it and get more familiar with.\nCreate 3D model of your board.\nCreate Bill of Material (BOM).\nCreate assembly drawings showing position of components on the board.\nGenerate Gerbers, Pick and Place, Drill file and other files needed for manufacturing.\nPrepare professional documents needed to manufacture your PCB and assemble your board.\nFor everyone interested, the manufacturing documents created during this course can be used to build your board. Simply use PCB manufacturing data to get your PCB, buy components from Digikey and solder them by yourself.\n\nEnjoy ..",
      "target_audience": [
        "Beginners: You can design your own electronics board form your scratch in breadboard, you will learn how to use Altium Designer, how to send your files to be manufactured.",
        "College, University Students: During this course you will learn how to work in Altium Designer. Altium is one of the most used software in companies which are designing electronic boards. As a college / university student, you might be able to get a free license of Altium Designer.",
        "Hardware Design Engineers: In this course we will go through complete process of designing an electronics board."
      ]
    },
    {
      "title": "ESP32 Learn By Building Practical Projects",
      "url": "https://www.udemy.com/course/esp32-learn-building-practical-projects-webserver-iot-esp32/",
      "bio": "Build Your Own Projects! This course provides you with everything you need to get started.",
      "objectives": [
        "Learn by building practical projects which is the best way to craft your knowledge",
        "Building a practical ESP32 project will teach you how to use ESP32 Effectively.",
        "You will learn how to build ESP32 Web Server",
        "You will learn how to build ESP32 + Databases to Control Anything Anywhere",
        "You will learn how to build ESP32 Email Alert Based on Sensors Reading",
        "You will learn how to build IoT Smart Garden with ESP32 and Blynk",
        "You will learn how to build ESP32 + Arduino based project",
        "You will learn how to build ESP32 + Telegram to Get Real-time notification",
        "You will learn how to Update ESP32 OTA (Over the Air)",
        "This course will take you from knowing absolutely nothing about the ESP32, to being able to create your own projects",
        "Learn how to build your own projects and take control of your life!",
        "You'll learn how to program the ESP32 in C/C++ and build your own projects."
      ],
      "course_content": {},
      "requirements": [
        "Provides comprehensive guidance",
        "This course provides you with everything you need to get started."
      ],
      "description": "Want to build practical projects but don't know where to start? In this course, you will learn to build practical ESP32 projects that teach you how to use the ESP32 effectively. Understand how to program the ESP32 both in C and Arduino. The course is very hands-on, so learners will learn what they need to know by doing it themselves with a practical step-by-step approach.\nIntroduction: In this course, you will learn and build ESP32 practical projects. You will first learn about how the ESP32 operates and then start with some simple projects and move on to more complex projects that use the ESP32.\nESP32 is a powerful yet inexpensive wireless chip that has been developed by Espressif Systems. It was first unveiled at the Shanghai show in April 2016. This course will teach you how to build your own practical projects using the ESP32, a new and inexpensive wireless chip from Espressif Systems. In this course, you will learn about programming with Arduino, accessing all parts of the ESP32's hardware, and exploring many of its features via practical projects.\nWhy You Should Take This Course:\nLearn by building practical projects and not just theory.\nDevelop real practical projects.\nBuild an ESP32 Web Server.\nBuild ESP32 + Databases to Control Anything Anywhere.\nBuild ESP32 Email Alert Based on Sensors Reading.\nBuild IoT Smart Garden with ESP32 and Blynk.\nBuild ESP32 + Arduino-based project.\nBuild ESP32 + Telegram to Get Real-time notifications.\nUpdate ESP32 OTA (Over the Air).\nLearn by doing with our all-inclusive course curriculum. No coding or programming knowledge is required.\nProgram the ESP32 using both Arduino IDE as well as Micropython, which offers lightning-fast performance and compatibility.\nBenefits:\nThis course will teach you all about the ESP32 chip, a powerful and versatile chip that can be used to create products with internet connectivity.\nThe course includes practical, project-based lessons that will teach you everything from how to set up your ESP32 board to WiFi.\nAbout Us: We're more than just a team. We're your partners. Our expertise is in Engineering and Embedded Systems, and we've been doing it for more than 10 years. Smart. Digital. Creative. We make embedded systems work for businesses locally, nationally, and globally.\nEnroll in the course now!\nCourse Features:\nStep-by-step video lessons\nPractical demonstrations and examples\nTips for building and programming ESP32 projects\nInteractive exercises and quizzes\nOngoing support and engagement through discussion forums\nBonus resources and downloadable guides\nWho Is This Course For:\nBeginners in embedded systems and IoT\nHobbyists and tinkerers\nSTEM students and educators\nAnyone interested in building practical projects with ESP32\nRequirements:\nNo prior knowledge of ESP32 or programming required\nA willingness to learn and experiment\n\n\nAbout the Instructor: Educational Engineering Team\nThe Educational Engineering Team is dedicated to providing high-quality education in the field of electronics and engineering. With a wealth of experience and a passion for teaching, the team ensures that complex concepts are broken down into easy-to-understand lessons, making learning accessible and enjoyable for everyone.",
      "target_audience": [
        "This course is for everyone who wants to learn ESP32 with a Practical approach",
        "The course is taught by an experienced Embedded Systems developer and trainer",
        "Anyone who wants to learn about hardware while simultaneously deepening their knowledge in programming.",
        "Beginners who want to learn how to work with ESP32 that's becoming increasing popular",
        "This course is suitable for everyone, from beginners to experts"
      ]
    },
    {
      "title": "The Electronics Workbench: a Setup Guide",
      "url": "https://www.udemy.com/course/workbench/",
      "bio": "Setting up your own electronics lab at home can be a daunting. This course will help you through the maze of options.",
      "objectives": [
        "Learn the basics components of a well-equiped electronics lab for the non-professional",
        "Learn about power tools, like the electric drill, the hot glue gun and rotary tools.",
        "Learn about soldering and soldering (as well as de-soldering) tools.",
        "Learn about simulation, computer-aided design and electronic circuit calculators",
        "Understand the use of sophisticated test instruments like the oscilloscope, and the function generator."
      ],
      "course_content": {
        "Introduction: The electronics maker lab": [
          "Introduction",
          "My electronics workbench",
          "The parts shown in this course"
        ],
        "Essentials": [
          "Introduction",
          "Wires, screwdrivers, tweezers, breadboards",
          "Wire strippers, cutters, helping hands",
          "Storage",
          "Components",
          "Conclusion"
        ],
        "Power": [
          "Introduction",
          "Battery packs, batteries, chargers",
          "Walled power supplies",
          "Bench power supply",
          "Conclusion"
        ],
        "Power tools": [
          "Introduction",
          "The rotary tool",
          "Finish project box holes with a reamer",
          "A better way to open a hole in a plastic box and attach a toggle switch",
          "The hot glue gun",
          "Conclusion"
        ],
        "Test equipment": [
          "Introduction",
          "Multimeters",
          "Auto-ranging multimeters",
          "Multimeter demo: DC measurement",
          "Multimeter demo: AC measurement",
          "The oscilloscope",
          "Decoding I2C with the oscilloscope",
          "The function generator",
          "Function generator, a demo testing a simple filter",
          "Conclusion"
        ],
        "Soldering and wiring": [
          "Introduction",
          "Soldering tools",
          "Soldering through-hole components demo",
          "Desoldering through-hole components with a desoldering gun",
          "Soldering surface-mount components demo",
          "Desoldering SMD with hot air reworking tool",
          "Heatshrink tubing",
          "Crimping tools",
          "Conclusion"
        ],
        "Software": [
          "Introduction",
          "Simulators",
          "Demo of iCircuit",
          "Calculators",
          "Smartphone apps",
          "Electronic design automation with Kicad",
          "Conclusion"
        ],
        "Other topics": [
          "Introduction",
          "Safety",
          "How to read a datasheet",
          "Conclusion"
        ],
        "Conclusion and Bonus Lecture": [
          "Course Conclusion",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Experience with technologies like the Arduino will help to understand the use of the tools covered in this course.",
        "Basic understanding electronics."
      ],
      "description": "This course is designed to help you setup your own electronics lab.\nIf you are starting your adventures in electronics, and you are not looking to setup a professional electronics lab, then this course is perfect for you.\nA lab is a place at your home that you have specifically organised in a way that promotes your enjoyment of working with electronics.\nIt is where your tools, components and instruments are.\nIt is where you do your circuit experiments and the bulk of your learning.\nThere are significant differences between professional and hobbyist electronics labs. That's because the amateur electronics lab is far more restricted in every respect to the lab of a professional.\nIf you are a hobbyist, using a spare room or your bedroom as your electronics lab, then this course will help you make the most of it.\nIn this course, I will discuss the basic features of an amateur electronics lab by showing you how I have organised mine.\n\nI have most of the restrictions of an amateur, and with the exception of a few of the items in my kit, my lab is purely an amateur lab.\nIn each lecture, I present a specific topic and in most cases I demonstrate the use of a tool or instrument.\nThrough these demos, I wish to help you gain a working understanding of what these items are designed for.\nYou will not become an expert, but you will know enough to know when you need one.\nI am always available to discuss any of the topics I present in this course, so please feel free to ask using the course's discussion tool.",
      "target_audience": [
        "Anyone with an interest in electronics, who is purchasing tool for their work bench.",
        "Take this course before you buy anything!"
      ]
    },
    {
      "title": "Codesys Fundamentals Course - Supported by Beckhoff Software",
      "url": "https://www.udemy.com/course/codesys-fundamentals-course-supported-by-beckhoff-software/",
      "bio": "Learn Codesys From Scratch with Using LD,ST,FBD,CFC Programming Languages and Write Your Own algorithms in Codesys.",
      "objectives": [
        "Codesys Software",
        "Codesys basics",
        "Plc Programming Basics",
        "Plc Programming with Codesys",
        "Codesys Interface",
        "Codesys Visualization",
        "Beckhoff Plc Basics",
        "Twincat Software",
        "Plc Programming Languages",
        "Applications",
        "Industrial Automation Basics"
      ],
      "course_content": {
        "Codesys Startup - Basics": [
          "First Program - Simulation and First Logic",
          "And - Or Contacts - Latching and Basic Logic App",
          "TON Timer Usage",
          "TOF Timer Usage and Basic App",
          "CTU - Counter Up Instruction",
          "CTD - Counter Down Instruction",
          "Move Instruction Usage",
          "Math Instructions",
          "Comparison Instructions",
          "Rising Edge - Falling Edge",
          "SR-RS Instruction",
          "AND & OR Gate",
          "Mux Instruction",
          "SEL Instruction",
          "Limit Instruction",
          "How to Create GVL and New Section",
          "Function Block and Usage",
          "Tasks and Task Configuration",
          "DUT Usage",
          "Arrays",
          "Concat and String Usage",
          "Real Numbers Usage",
          "SQRT",
          "Sin - Cos Instructions",
          "Library Manager"
        ],
        "ST Programming": [
          "IF Loop",
          "FOR Loop",
          "CASE Loop",
          "WHILE Loop",
          "REPEAT Loop",
          "Return",
          "JMP",
          "TON - TOF Timer",
          "CTU - CTD (Counters)",
          "Move",
          "Math",
          "Comparison",
          "R_Trig & F_Trig",
          "Function Block"
        ],
        "FBD Programming": [
          "Introduction and First Project",
          "Math and Understand Usage of FBD",
          "Function Block Usage inside FBD Program",
          "R_TRIG and CTU usage to Understand FBD Better"
        ],
        "CFC Programming": [
          "Introduction and First Project",
          "Example of CFC Programming Language in Mitsubishi Plc",
          "CFC Programming Logic - NO - NC Contacts",
          "Timers",
          "Counter",
          "Comments and FB Usage"
        ],
        "Functions": [
          "How to Create a Function and How to Use it?",
          "Let's Create Our Own Scale Function",
          "Let's Create Our Own Mean Function",
          "How to Return a Bool in Functions"
        ],
        "Visualization (HMI)": [
          "Introduction - First Project and App",
          "Image Pool and Add External Image to Project",
          "ScrollBar and Slider",
          "ProgressBar Usage",
          "Bar and Potentiometer Usage - Measurement Control",
          "Bar Display Image Element",
          "Trace Usage of Any Data",
          "Bit Lamp and Rotary Switch Usage"
        ],
        "Beckhoff Plc & Codesys": [
          "Download Software",
          "Simulator Usage - First Project and Basic App",
          "How to Define I/O of Beckhoff Plc",
          "How to Add Another Programming Language",
          "How to Add an Action to POU ?",
          "GVL",
          "Library Manager Usage",
          "Conversion Usage",
          "Functions",
          "Function Block Usage",
          "How to Add Visualization ?",
          "Microsoft Visual Studio & Twincat"
        ],
        "Applications - Coding": [
          "Application -1",
          "Application -2",
          "Application -3",
          "Application -4",
          "Application -5"
        ],
        "SoftMotion Basics": [
          "Softmotion Libraries and Missing Libraries Solution",
          "How to Use Motion Blocks in Codesys"
        ],
        "Technical Informations": [
          "How Plc Works",
          "Data Types",
          "Number Systems - Introduction",
          "Number Systems - Binary Numbers",
          "Number Systems - Hex",
          "Number Systems - Octal",
          "Decimal to Binary Example",
          "Analog vs Digital",
          "Open - Closed Circuit and Short Circuit",
          "Open & Closed Loop"
        ]
      },
      "requirements": [
        "This course does not require any prior knowledge."
      ],
      "description": "Dear Students,\nWith Codesys Fundamentals Course - Supported by Beckhoff Software, you will learn codesys software and programming starting from the basics.\nThis course is suitable for codesys beginners and anyone who wants to improve themselves in codesys.\nIn the light of our experience from machine automation, we have created this course for you to learn in the fastest and most professional way.\nThe structure of this course will push you to create algorithms and develop and use your own programming skills rather than stereotypes.\nThe only thing required of you in this course is to follow the sections carefully, ask questions at every point you need, and inform us of any missing points.\nWhat you will learn in this course,\n- Codesys basics\n- LD Programming Techniques\n- ST Programming Techniques\n- FBD Programming Techniques\n- CFC Programming Techniques\n- Codesys Programming\n- Twincat Software\n- Beckhoff Plc Programming\n- Industrial Automation Basics\n- Applications\n\n\nThere are dozens of plc brands that can be programmed with Codesys.\nIn this course, we chose the Beckhoff brand and showed you how Codesys works in other plc.\nAgain, you will see different plc models in the course.\n\n\nIf we ask why you should use Codesys and why codesys,\n- Everything is integrated in a single user interface\n- Open selection for the next automation task\n- Power und Usability for effective implementation of complex automation projects\n- Reliable and widely used system for established industrial applications\n\n\nThe main sections you will find in this course are:\n- Codesys Startup - Basics\n- ST Programming\n- FBD Programming\n- CFC Programming\n- Functions\n- Visualization\n- Beckhoff Plc & Codesys\n- Applications & Coding\n- Technical Informations\n\n\nDo not hesitate to contact us for all questions. And let us know all your subject requests.\nAlways learn with us.\n\n\nBest regards",
      "target_audience": [
        "Anyone who wants to learn codesys.",
        "Anyone who wants to learn plc programming basics.",
        "Anyone who wants to learn plc programming  languages.",
        "Anyone who interested in with industrial automation and electronics."
      ]
    },
    {
      "title": "Getting started with Data Acquisition and LabJack",
      "url": "https://www.udemy.com/course/labjack-daq/",
      "bio": "Learn how to use the LabJack device to perform data acquisition and control (DaQ) operations.",
      "objectives": [
        "Learn the basics of data acquisition and control.",
        "Learn how to setup your LabJack and Kipling.",
        "Learn about LabJack's port basic and extended features.",
        "Learn how to program your LabJack using Lua (onboard) and Python (remote).",
        "Learn how to connecting your LabJack to simple sensors and actuators."
      ],
      "course_content": {},
      "requirements": [
        "No requirement for prior experience in data acquisition or control.",
        "A basic understanding of how simple sensors and actuators work.",
        "Ability to wire simple circuits on a breadboard.",
        "Ability to read and write simple Python programs.",
        "Knowledge of the Lua programming language is not required (you'll learn what you need in this course)."
      ],
      "description": "This course is ideal if you want to record a lot of data about the real world from sensors so that you can analyze it later.\nFor example, you may want to record the volume of water that flows through a pipe, the temperature of a fridge, or the movement of a high-rise building due to winds. And, you may want to do this for ten years without any human intervention.\nThis course is also ideal if you want to control the environment based on the data collected from sensors.\nFor example, you may want to adjust the pressure in a water pipe using a variable valve if the pressure sensor shows it is above a certain threshold. Or, you may want to raise an alarm if the temperature of a fridge rises above 0°C.\nWhat is LabJack?\nLabJack is a tool for data acquisition and control.\nLabJack was designed to be robust and reliable, to work autonomously in harsh environments for a long period of time, and to have a lot of input/output ports able to connect to a huge range of sensors and actuators.\nLabJack can be used via an intuitive graphical user interface and is programmable using any one of the many mainstream programming languages.\nYou can start taking measurements without writing a single line of code.\nYou can also write simple or complex scripts that run both on the device or on a host computer to automate data acquisition and control through a network.\nThis course will teach you...\nThe basic concepts of data acquisition and control.\nHow to use a LabJack device without any programming.\nHow to network and automate DaQ tasks using languages like Lua and Python.\nHow to use LabJack's basic and extended port features.\nAnd how to connect a variety of sensors and actuators to a LabJack device.\nWould you like to know more about this course?\nLearn about the exact course content, required hardware, the knowledge prerequisites, and check out the free sample lectures.\nI look forward to seeing you on the course!",
      "target_audience": [
        "Anyone interested in recording real-world data for later analysis.",
        "Anyone interested in building applications to control the environment based on the data collected from sensors.",
        "Anyone interested in learning about DaQ (Data Acquisition) but is not confident how to start.",
        "Anyone interested in learning how to use LabJack devices quickly.",
        "Anyone who is intimidated by the complexity of PLCs and looking for a simple yet powerful way to control anything, from a factory production line to a rocket engine test rig."
      ]
    },
    {
      "title": "PLC, Arduino and HMI Projects over Modbus TCP: From Scratch",
      "url": "https://www.udemy.com/course/arduino-for-industrial-automation-plc-and-hmi-integration/",
      "bio": "Design from A-Z control projects using Arduino, Soft PLC, HMI, VFD, ModBus TCP and Electrical panel with full simulation",
      "objectives": [
        "Integrating an Arduino with Soft-PLC (CodeSYS)",
        "Integrating Arduino with HMI supporting ModBus TCP",
        "Basic motor driver control (VFD) using Arduino",
        "Simulate industrial automation projects using Arduino",
        "Design two full industrial automation projects from scratch",
        "Interfacing industrial sensors with Arduino",
        "Using cutting edge software to design automation projects",
        "Ladder logic skills",
        "Learning VFD setup"
      ],
      "course_content": {
        "Section 1: Getting Started": [
          "Course Overview",
          "Before We Start",
          "PLC VS Soft-PLC",
          "Why to use a protocol",
          "Modbus Master-Slave",
          "ModBus TCP Overview",
          "Address Shifting",
          "Getting the SoftPLC Software",
          "Getting Arduino IDE",
          "Getting HMI Software"
        ],
        "Practical Ladder Logic with CodeSys": [
          "Introduction",
          "Relays",
          "Latch-Unlatch",
          "Counters",
          "Timers",
          "Boolean Operations",
          "Move Blocks",
          "Limit block",
          "Conditional Blocks",
          "Arithmetic Blocks",
          "Custom Function Blocks",
          "Multiple Instances Creation Problem",
          "Data Types in more details",
          "Creating a Quick Visual Interface",
          "Visualization Analog Control"
        ],
        "Arduino and Modbus TCP": [
          "Setting Up The Library",
          "Understanding Holding Registers",
          "Arduino Slave Mode Coding P1",
          "Arduino Slave Mode Coding P2",
          "CodeSYS Communication and channels",
          "Preparing Blocks",
          "Read/Write INT Simulation Test",
          "Masking Techniques Part 1",
          "Masking Techniques Part 2",
          "Read Write Bits"
        ],
        "Project#1 : Arduino and SoftPLC": [
          "Project Overview",
          "Schematic",
          "Programming Soft-PLC Part1",
          "Programming Soft-PLC Part2",
          "Programming Visualization Part 1",
          "Programming Visualization Part 2",
          "Arduino Sketch Coding",
          "Soft Testing",
          "Hardware Relay Output Testing",
          "Hardware: Electrical Panel Demonstration",
          "Cable and Enclosure Choice"
        ],
        "Project #2: Arduino and HMI": [
          "Project Overview",
          "Schematic",
          "HMI ModBus Addressing",
          "HMI Design Part 1",
          "HMI Design Part 2",
          "Algorithm Overview",
          "Finite State Machine",
          "Arduino Sketch",
          "Soft Testing",
          "Hardware: HMI Program Upload",
          "HardwareL Electrical Panel Demonstration"
        ],
        "BONUS": [
          "Master Industrial Automation Control"
        ],
        "Extra supporting lectures": [
          "Power Supplies",
          "Motor Driving Techniques",
          "VFD Demo 1",
          "VFD Demo 2",
          "VFD Demo 3",
          "VFD Demo 4",
          "VFD Demo 5",
          "Proximity Sensors",
          "Pressure Sensors"
        ]
      },
      "requirements": [
        "Prior Arduino programming knowledge",
        "Arduino UNO",
        "Arduino Ethernet shield",
        "A Computer/Laptop equipped with Ethernet port and Windows platform"
      ],
      "description": "This course provides hands-on Step by Step experience to integrate, Arduino, PLC and HMI using Modbus TCP by implementing real industrial projects.\nReal projects will be designed step by step to help you grasp the concepts.\nBy the end of this course, you will be able to integrate various technologies to control industrial automation projects in multiple ways, like using Soft-PLC with Arduino and using HMI with Arduino.\nThe materials also contain a lot of videos that will teach you various skills. Stuff like, Ladder logic programming, HMI design, VFD driving and many other cool lectures that you can use to expand the Arduino integration in real industrial automation projects.\nYou will use technologies and brands like :\nArduino\nCodeSys\nSchneider Electric\nModbus TCP\nVFD (Industrial motor drivers)\n\n\nAnd the best part is you will be able to simulate and integrate most of the things without having to buy any expensive industrial automation hardware. However, if you plan to buy the equipment, then you will be able to design your projects since this course will walk you through Programming and schematic of two complete integration projects.\nThis course will be based on the famous industrial protocol Modbus TCP, where you will learn how to use it in integrating almost any Modbus TCP supported device with Arduino, and just to note, this protocol supported by over 70% of the industrial automation devices and equipment.\nWhat you need is:\n\n\nArduino UNO\nArduino Ethernet shield\nPC/Laptop with Windows\nSome wires and potentiometer\nOptional (8-CH Arduino Relay external card with 5v 700mA  minimum power supply)\n\n\nAll software we will use are free so you don't need to worry about obtaining any of them, all the links will be provided, noting that these are very highly professional software used by the biggest companies around the world and are by no mean poorly developed ones.\n\n\nSkills you will learn in this course:\nArduino Integration with CodeSys Soft PLC systems\nArduino integration with HMI\nLearning how to use Modbus TCP with multiple equipment\nBasic VFD driving using Arduino\nDesign HMI screens in two different software\nDesigning in Ladder Logic\nHandling Classical VFD devices (Industrial motor drivers)\nUsing Arduino to simulate small size industrial automation projects\n\n\nThe two projects designed from scratch in this course w are designed step by step. And besides, by the end of each project, an electrical panel-based demonstration video will be shown to let you see the result not only in simulation but also with real industrial automation electrical hardware.\n\n\nAn Arduino is NOT a replacement for a PLC system, though it can be deployed for small scale projects.",
      "target_audience": [
        "Any enthusiast  about expanding Arduino capabilities to real applications",
        "Anyone curious about integrating arduino with HMI and PLC",
        "Arduino Hobbyist",
        "Industrial Automation Designers",
        "Computer engineers",
        "Electrical and Electronics engineers",
        "Control Engineers",
        "Communication Engineers"
      ]
    },
    {
      "title": "Python Digital Image Processing From Ground Up™",
      "url": "https://www.udemy.com/course/digital-image-processing-from-ground-up-in-python/",
      "bio": "Image Processing : Edge-Detection Algorithms , Convolution, Filter Design, Gray-Level Transformation, Histograms etc.",
      "objectives": [
        "Be able to suppress noise in images",
        "Be able to develop the 2-D Convolution algorithm in Python",
        "Apply Edge-Detection Operators like Laplacian, Sobel, Prewitt, Robinson etc. on Images",
        "Be able to develop Spatial Filtering Algorithms in Python",
        "Be able to compute an Image Histogram and Equalize it in Python",
        "Understand all about operators such as Laplacian, Sobel, Prewitt, Robinson etc.",
        "Be able to perform Image Processing using Python's Imaging Library",
        "Be able to perform Image Processing using SKImage",
        "Be able to perform Arithmetic and Boolean Operations like Addition, Subtraction, AND, OR etc. on images",
        "Be able to perform Image Enhancement Techniques such as Blurring and Sepia using Python",
        "Be able to give a lecture on Digital Image Processing"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know",
        "No paid software required",
        "I'll walk you through, step-by-step on how to download and install Python"
      ],
      "description": "With a programming based approach, this course is designed to give you a solid foundation in the most useful aspects of Image Processing in an engaging and easy to follow way. The goal of this course is to present practical techniques while avoiding  obstacles of abstract mathematical theories. To achieve this goal, the image processing techniques are explained in plain language, not simply proven to be true through mathematical derivations.\nStill keeping it simple, this course comes in different programming languages so that students can put the techniques to practice using a programming language of their choice. This version of the course uses the Python programming language.\n\n\nBy the end of the course you should be able to perform 2-D Discrete Convolution with images in python, perform Edge-Detection in python , perform Spatial Filtering in python, compute an Image Histogram and Equalize it in python,  perform  Gray Level Transformations, suppress noise in images, understand all about operators such as Laplacian, Sobel, Prewitt, Robinson, even give a lecture on image processing and more. Please take a look at the full course curriculum.\nREMEMBER : I have no doubt you will love this course. Also it comes with a  FULL money back guarantee for 30 days!  So put simply, you really have nothing to loose and everything to gain.\nSign up and lets start manipulating some pixels.",
      "target_audience": [
        "If you are an absolute beginner to image processing , then take this course.",
        "If you are a seasoned programmer and want to get a quick guide to performing image processing  in python, then take this course.",
        "If you are a university student taking the theory of image processing in school, then take this course to learn how the theory is applied practically."
      ]
    },
    {
      "title": "NIST AI Risk Management Framework (RMF) Masterclass",
      "url": "https://www.udemy.com/course/nist-ai-risk-management-framework-rmf-masterclass/",
      "bio": "Learn Practical Strategies for Implementing the NIST AI RMF in Your Organization",
      "objectives": [
        "Understand the need for AI Risk Management",
        "Fundamentals of the NIST AI Risk Management Framework (RMF)",
        "Apply the NIST AI RMF in Case Studies",
        "Understand the Foundational and Core Components of the NIST AI RMF",
        "AI Governance",
        "Responsible AI"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Introduction to AI Risks",
          "AI Incidents",
          "Knowledge Check 1"
        ],
        "The NIST AI Risk Management Framework": [
          "Introduction to the NIST AI Framework",
          "Implementing the Framework",
          "Implementing the Framework ( Continued )",
          "Knowledge Check 2"
        ],
        "NIST AI Framework Deepdive - FOUNDATION": [
          "NIST AI RMF - Foundation",
          "NIST AI RMF - Foundation ( Risk Management Challenges )",
          "NIST AI RMF - Foundation ( Risk Management continued .. )",
          "NIST AI RMF - Foundation ( Trustworthy AI Systems )",
          "Knowledge Check 3"
        ],
        "NIST AI Framework Deepdive - CORE": [
          "NIST AI RMF - Introduction to the Core",
          "GOVERN 1",
          "GOVERN 2",
          "GOVERN 3",
          "GOVERN 4",
          "GOVERN 5",
          "GOVERN 6",
          "Knowledge Check - Govern",
          "MAP 1",
          "MAP 2",
          "MAP 3",
          "MAP 4",
          "MAP 5",
          "Knowledge Check - MAP",
          "MEASURE 1",
          "MEASURE 2",
          "MEASURE 3",
          "MEASURE 4",
          "Knowledge Check - MEASURE",
          "MANAGE 1",
          "MANAGE 2",
          "MANAGE 3",
          "MANAGE 4",
          "Knowledge Check - MANAGE"
        ],
        "Integrating the NIST AI RMF with other frameworks": [
          "Combining the NIST AI RMF with other frameworks"
        ],
        "Wrapping up": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Fundamental knowledge of risk management",
        "No knowledge of AI needed"
      ],
      "description": "The NIST AI Risk Management Framework (RMF) Masterclass is an essential course for professionals navigating the complex landscape of AI risk management. With the rapid integration of artificial intelligence into various business sectors, understanding and managing the unique risks associated with these technologies is crucial. This course offers an in-depth exploration of the National Institute of Standards and Technology's AI Risk Management Framework (AI RMF), providing practical insights for its application in corporate environments.\n\n\nWhat You Will Learn\nComprehensive understanding of NIST's AI RMF, its structure, and key concepts.\nTechniques to identify, assess, and manage AI-related risks within your organization.\nCase Studies to help you understand the framework in practical settings\nStrategies to align AI risk management with legal, regulatory, and organizational goals.\n\n\nCourse Outline\nIntroduction to NIST AI RMF\nUnderstanding the NIST AI RMF and its relevance in today's corporate landscape.\nKey principles and structure of the AI RMF.\nAI Risks in the Corporate Environment\nOverview of unique AI risks and their implications in business settings.\nDetailed analysis of how to mitigate AI risks\nImplementing AI RMF in Organizations\nStep-by-step guide to applying AI RMF in a corporate setting.\nCase studies and practical examples of AI risk management.\n\n\n\n\nWho Should Take This Course\nThis course is ideal for professionals involved in AI implementation and risk management, including:\nRisk Management Professionals\nCybersecurity Professionals\nPrivacy Professionals\nBusiness Executives and Decision-Makers\nCompliance and Regulatory Affairs Specialists\nAnyone interested in AI risk management frameworks\n\n\nPrerequisites\nA basic understanding of AI technologies and risk management is recommended, but not mandatory.\n\n\nInstructor\nA multi-award winning, information security leader with over 20+ years of international experience in cyber-security and IT risk management in the fin-tech industry. Winner of major industry awards such as CISO of the year, CISO top 30, CISO top 50 and Most Outstanding Security team.\nTaimur's courses on Cybersecurity and AI have thousands of students from all over the world. He has also been published in leading publications like ISACA journal, CIO Magazine Middle East and published two books on AI Security and Cloud Computing ( ranked #1 new release on Amazon )",
      "target_audience": [
        "Risk Management Professionals",
        "Cybersecurity Professionals",
        "CISOs / CTOs",
        "Privacy Professionals",
        "AI Professionals",
        "Anyone wanting to learn AI Risk !"
      ]
    },
    {
      "title": "The Complete Beginners Guide to The Arduino 2025",
      "url": "https://www.udemy.com/course/the-complete-beginners-guide-to-the-arduino/",
      "bio": "The complete Arduino course, from complete beginner to expert created by a best-selling Arduino book author",
      "objectives": [
        "How to write code for the Arduino",
        "How to easily understand the Arduino language",
        "All of the necessary concepts to code proficiently",
        "How to use and write code to read data from sensors",
        "Essential electronics concepts for hobbyists",
        "How to build electronic circuits on a breadboard",
        "How to bring your interactive creations to life",
        "The necessary skills and knowledge to design and build your own Arduino projects from scratch",
        "How to combine two Arduino sketches into one"
      ],
      "course_content": {},
      "requirements": [
        "A laptop or PC",
        "An Arduino Nano (or Uno if you prefer) plus charging/programming USB cable",
        "A breadboard, jumper wires and basic electronic components such as buttons, LEDs, sensors and so on. e.g. an Arduino Starter Kit",
        "A willingness to learn",
        "A desire to become a proficient Arduino developer and maker",
        "A basic Arduino Starter Kit"
      ],
      "description": "This course, by best-selling Arduino author, Mike McRoberts, will take you from complete beginner to confident and competent coder and electronics circuit builder. Even if you have NEVER coded before or built a circuit, you will be guided through each carefully crafted lesson until you have the skills and knowledge to go it alone and bring your very own creations to life. Brand new for 2025 with new and updated content.\nThis course comprises of multiple projects, specifically designed to take you from complete beginner to capable and confident Arduino coder. You will start off with a tour of the Arduino board and what it is capable of, then you will learning the essential fundamental skills required to understand the C programming language that the Arduino uses. Next, an introduction to electronic fundamentals then you will dive right into the step by step learning projects that have been carefully designed to start you off gently and introduce more coding and electronics concepts as you work your way through the curriculum.\nBy the end of this course you will have all of the necessary skills to enable you to design from scratch and code your very own projects.\nThis course is regularly updated with more content being added all the time.",
      "target_audience": [
        "Complete Beginners",
        "Beginners at coding",
        "Beginners at electronics",
        "People who want to build and program cool creations",
        "People who have struggled with other tutorials or courses",
        "Beginner Arduino developers",
        "People that are looking for a course that is clear and concise and not full of 'filler' material."
      ]
    },
    {
      "title": "IoT enabled Aeroponics using Raspberry Pi 3",
      "url": "https://www.udemy.com/course/iot-enabled-aeroponics-using-raspberry-pi-3/",
      "bio": "Learn how to build your own Aeroponics system and control it remotely using a web dashboard",
      "objectives": [
        "Learn about the newly launched Raspberry Pi 3",
        "Learn how to configure and use the on-board WIFI and the Bluetooth module",
        "Get to know how to build flow meter using Raspberry Pi and measure the flow rate or quantity of a gas or liquid moving through a pipe",
        "Stepwise process to build the Aeroponics system",
        "Learn to connect Raspberry Pi and the sensors to IoT cloud platform",
        "Remotely visualize the data on the dashboard and take action depending on the report",
        "Remotely switch ON & OFF the mist machine to control the humidity level"
      ],
      "course_content": {
        "Introduction": [
          "What will you learn in this course",
          "The new Raspberry Pi 3",
          "Setting up the on-board Bluetooth on your Raspberry Pi 3",
          "Basic"
        ],
        "Flow Meter": [
          "Project concept and the hardware requirements",
          "Circuit diagram - Flow sensor connection",
          "Programming the flow sensor",
          "Real time demonstration : Flow meter",
          "Complete Source Code",
          "Programming"
        ],
        "Aeroponics": [
          "Concept behind Aeroponics system",
          "Hardware requirements and design of the Aeroponics system",
          "Circuit diagram - LCD connection with the GPIO pins",
          "Table - LCD and the GPIO pins mapping",
          "Understanding and programming the 16x2 LCD",
          "16x2 LCD Real time demonstration",
          "Complete Source Code",
          "Circuit diagram - Aeroponics",
          "Choosing the right IoT gateway",
          "Designing the Dashboard",
          "IoT : Back-end configuration in Raspberry Pi",
          "Aeroponics programming : Initializing the API",
          "Aeroponics programming : Controlling the mist machine",
          "Live Dashboard",
          "Real time demonstration Aeroponics",
          "Complete Source Code",
          "Aeroponics"
        ]
      },
      "requirements": [
        "Basic knowledge of Python programming and Linux command"
      ],
      "description": "IOT enabled Aeroponics using Raspberry Pi 3 is an intermediate course on the newly launched Raspberry Pi 3. The course is ideal for those who want to explore the possibilities of Raspberry Pi in the field of agriculture. This course will take your intermediate coding skills to the next level. The course covers two projects.\nIn the first project, you will learn how to program the flow sensor to measure exactly one or more litres of liquid or gas. This can be implemented in any project where you want to know the consumption day by day.\nGoing forward you will learn how to program the small LCD screen and display the dynamic data. Once you are done with it, we will proceed to our major project Aeroponics system. In this, you will learn how to build the system from the ground up and control it remotely using the Raspberry Pi.\nYou will also learn how to integrate with the IoT platform and control the entire system remotely. You will have a dashboard where you can visualize the data in the form of a graph, table, gauge meter, etc. Apart from that, you can also control the mist machine by turning ON and OFF through a virtual switch on your dashboard. This will be a fun project, and you will learn to program for Internet of Things.\n\nThe course provides the complete source code of both the projects.\n\nThe entire course can be completed over a fortnight, including the hardware assembly and coding in Python programming.\n\nBy the end of this course, you will have enough knowledge about the Aeroponics system and how to implement in the real time scenario.",
      "target_audience": [
        "This course is for anyone who wish to explore Raspberry Pi in the field of Agriculture and wants to know in depth about IoT"
      ]
    },
    {
      "title": "PCB Design for everyone with EasyEDA a free and online tool",
      "url": "https://www.udemy.com/course/pcb-design/",
      "bio": "Learn PCB Design without any costly software, with easyeda: a free online and powerful tool for professional PCB Design",
      "objectives": [
        "Be able to create single and double sided PCB Designs",
        "Understand PCB CAD tools",
        "Understand Gerber file and export gerber file for production",
        "Order online PCBs for the designs you create",
        "Be an awesome electronics designer in very low time!!!"
      ],
      "course_content": {},
      "requirements": [
        "Be interested and willing to learn Electronics Printed Circuit Board Design",
        "Have access to a computer (Any OS)",
        "Active Internet connection",
        "Basic Understanding of electronics components like resistors, capacitors, leds and ICs"
      ],
      "description": "Technology is shaping the world and bringing massive changes to our lives, and I firmly believe that Learning technology can make wonders in our life with lots of confidence and wider spectrum career opportunities.\nThis is the reason I've created these series of courses and this one deals with PCB Design using an online tool called easyEDA and as the name suggests learning easyEDA for PCB design is super simple.\nTake the Free Preview\nTake the free preview before enrolling the course, 50% of the course is enabled as a free preview for you. Maybe if you just wanted to learn single Sided PCB, then that much part comes under 50% free. Decide if its good for you or not even before enrolling.. See and decide if you can understand and cope up with the content and the presenter of the course.\nPCB Design for Everyone\nAre you an electronics hobbyist or professional or student who wants to learn Professional Level PCB Design? Are you looking for a free but powerful PCB Design tool? Are you confused on which PCB tool to use for your next project? This course is perfectly suitable for you\nWhy easyEDA\neasyEDA is a 100% free Cloud-based CAD tool for designing professional level PCBs with built-in PCB ordering system. The learning curve of easyEDA is shortest if you compare it with any other tool and it has a wide variety of readily available PCB footprints for almost every single component as well as customized modules. Since there are thousands of easyEDA users already, they're all creating their own components and sharing and adding to the library of easyEDA almost daily. So if you're a student, or startup or even a manufacturing company, easyEDA is perfectly suitable to you\nWhat's in the course\nThis course directly takes you to PCB design with little introduction, So even if you haven't designed PCBs before, its perfectly fine, the introductory sessions will cover all the basics for you and the assignments given will make you a pcb expert in minimum possible time. What's more? You can also directly order PCB's from within the easyEDA interface\n\n\nWhat students are saying about this course!!\nAbraham Ninian Ejin\n\"Useful for absolute beginners who want to get started with PCB design! It would be great if there was a summary of the general practices/good practices of designing a PCB. Maybe, standards in naming components or how to optimize the arrangements/positioning of the components together. Nevertheless, I believe that this was a good purchase on my part and I hope the instructor will keep up with the good work.\"\n\n\nCJ Bhaskar Babu\n\"I was just thinking how do I do design, should I manually wire...and this trainings, had really nailed me.\n\n\nWes Hays\nThe course was easy to follow along for a beginner, and the instructor gave a few things to consider when building a PCB.\n\n\nStephen Doroff\n\"The course is excellent!\nWhen I asked a question of the instructor regarding how to do something he created a whole new video showing EXACTLY what I was looking to do. He could've just answered the question in the Q&A area, but the instructor chose to make a whole new video making this very easy for me.\nAs a complete \"newbie\" to PCB design, I would recommend this course to anyone wanting to do this for the first time. THANK YOU!!!!\"\n\n\nDivya K S\n\"I cannot thank you enough. It was such a well-made lecture series for a beginner\".\n\n\nCem Yildizak\n\"I can advise for the beginners to understand the fundamentals of PCB design and a bridge to jump to start DIY projects...\"",
      "target_audience": [
        "Anyone who wants to learn PCB Design",
        "Electronics engineering students and school students",
        "Professionals who want to start PCB designing",
        "Startups finding difficult to get PCB designed for their products",
        "Those willing to learn PCB Design without buying a costly software"
      ]
    },
    {
      "title": "VSD - RISCV : Instruction Set Architecture (ISA) - Part 1a",
      "url": "https://www.udemy.com/course/vsd-riscv-instruction-set-architecture-isa-part-1a/",
      "bio": "Let's talk to computers",
      "objectives": [
        "Learn any computer ISA",
        "Learn to write short assembly language program for RISCV cpu core",
        "Learn how to define specifications of a system"
      ],
      "course_content": {},
      "requirements": [
        "You should be familiar with binary numbers. This is anyways covered in brief"
      ],
      "description": "***pre-launched with 5 videos***\n\nRISC-V is a free and open RISC instruction set architecture. and was originally developed in Computer Science division of the EECS Department at the University of California, Berkeley\nThis course will talk a lot about RISC-V ISA from scratch, also including a section about why do we even need a computer architecture and how real-time day-to-day apps run on a computer, with examples\nThe final aim of this course is to help everyone to build a robust specifications, which is the very first criteria behind system design. In the upcoming courses,, these specifications will be coded in RTL hardware description language using verilog/vhdl and finally the RTL will placed and routed using opensource EDA tool chain.\nThis course will walk you through the specifications, starting from signed/unsigned integer representation till RV64IMFD Instruction set with some really cool images and examples. The conventions like \"IMFD\" will also be explored in a unique fashion, which is being never done before and any micro-processor or micro-controller related courses\n\nAcknoledgements -\n\nI would like to Thank SiFive, a company that was founded by the creators of RISC-V ISA.\nI would also like to Thank Prof. David Patterson and his book \"Computer Organization And Design - RISCV edition\" which immensely helped in the making of this course.\nLet's get inside computers...",
      "target_audience": [
        "Anyone who wants to understand language of computer",
        "Anyone who wants to learn processor architecture",
        "Anyone who wants understand how apps run on chips inside computer"
      ]
    },
    {
      "title": "Intel Server Hardware Configuration Management",
      "url": "https://www.udemy.com/course/intel-server-management/",
      "bio": "Install and Configure Hardware RAID & Remote Management, Manage DELL Servers, HP Servers and IBM Servers",
      "objectives": [
        "Introduction to Intel Server Management",
        "Understand Server Processor Technology",
        "Understand Server Memory Technology",
        "Understand Server Hard Disk Technology",
        "Understand Remote Management Hardware and its Technologies of DELL, HP and IBM",
        "Configure iDRAC in DELL Server",
        "Configure ILO in HP Server",
        "Understand RAID Technology and RAID Levels",
        "Understand RAID Controller and its Features of DELL, HP and IBM Servers",
        "Configure RAID in HP Server"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Intel Server Management",
          "Understand Server Processor Technology",
          "Understand Server Memory Technology",
          "Understand Server Hard Disk Technology"
        ],
        "Server Hardware Remote Management": [
          "Understand Remote Management Hardware and its Technologies of DELL, HP and IBM",
          "Configure iDRAC in DELL Server",
          "Configure ILO in HP Server"
        ],
        "RAID": [
          "Understand RAID Technology and RAID Levels",
          "Understand RAID Controller and its Features of DELL, HP and IBM Servers",
          "Configure RAID in HP Server"
        ]
      },
      "requirements": [
        "Basic Knowledge on Computer Hardware and Networking",
        "Knowledge On Windows Server Operating System"
      ],
      "description": "This course gives you the essential knowledge required to Install, Configure and Manage DELL Servers, HP Servers and IBM Servers.\n\n\nLooking to streamline your server hardware configuration management? In this informative video, we dive deep into the world of Intel server hardware and how to effectively manage its configuration. Stay ahead of the curve with best practices, expert insights, and practical tips on optimizing your server hardware for peak performance. Whether you're a seasoned IT professional or an aspiring server administrator, this video provides a comprehensive guide to achieving efficient and reliable server configuration management using Intel technologies. Don't miss out on this opportunity to take your server infrastructure management skills to the next level. Watch now and unlock the potential of Intel server hardware configuration management.\n\n\nThrough this course you will gain knowledge on the below concepts:\n\n\nIntroduction to Intel Server Management\nUnderstand Server Processor Technology\nUnderstand Server Memory Technology\nUnderstand Server Hard Disk Technology\n\n\nServer Hardware Remote Management:\n\n\nUnderstand Remote Management Hardware and its Technologies of DELL, HP and IBM\nConfigure iDRAC in DELL Server\nConfigure ILO in HP Server\n\n\nHardware RAID:\n\n\nUnderstand RAID Technology and RAID Levels\nUnderstand RAID Controller and its Features of DELL, HP and IBM Servers\nConfigure RAID in HP Server",
      "target_audience": [
        "System Engineer",
        "System Administrator",
        "Server Engineer",
        "Hardware Engineer",
        "L1/L2/L3- Engineer"
      ]
    },
    {
      "title": "KiCAD PCB Design For Embedded Systems & Electronics Projects",
      "url": "https://www.udemy.com/course/kicad-pcb-design/",
      "bio": "Learn KiCAD For PCB Circuit Design & Create Your Own PCB Boards",
      "objectives": [
        "KiCAD 5.1",
        "Printed Circuit Board (PCB) Design With KiCAD",
        "PCB Design Workflow (Methodology)",
        "Documentation For HW Requirements & TLD",
        "From Idea or Requirement To Actual PCB Product",
        "BOM Selection Process",
        "Schematic Design & Capture",
        "Assigning Footprints To Symbol Parts",
        "PCB Layout Editing & Routing",
        "Gerber Output Files Generation For Fabrication",
        "Generating SMT Files For Automated PCB Assembly",
        "Project-Based Course (Flasher LED Board, Create Your Own Embedded Dev. Board, and a USB-Powered Device)"
      ],
      "course_content": {
        "Introduction": [
          "KiCAD PCB Design Course Overview",
          "Why Do We Need PCBs?",
          "Elements of a PCB",
          "CAD Tools For PCB Design"
        ],
        "Getting Started With KiCAD": [
          "About KiCAD & Download and Install The Software",
          "Create a New KiCAD Project",
          "Schematic Capture With KiCAD Eschema Basics",
          "PCB Layout & Design With KiCAD Basics",
          "Generating Fabrication-Ready Output Files (Gerber)",
          "Create Your First KiCAD PCB Project"
        ],
        "PCB Design Methodology": [
          "PCB Design Methodology Overview",
          "Pre-Design Stage",
          "Schematic Design & BOM Selection Stage",
          "PCB Design Stage"
        ],
        "PCB Design Project1: LED Flasher Board": [
          "Step1 - Hardware Requirements",
          "Step2 - TLD Design",
          "Step3 - Schematic Design",
          "Step4 - Schematic Capture",
          "Step5 - Footprints Assignments",
          "Step6 - ERC Check",
          "Step7 - PCB Layout Editing",
          "Step8 - PCB Routing",
          "Step9 - DRC Check",
          "Optional Step - Silkscreen Custom Graphics Design",
          "Step10 - Generating Fabrication-Ready Output Files (Gerber)"
        ],
        "PCB Design Project2: PIC Microcontroller Development Board": [
          "Step1 - Hardware Requirements",
          "Step2 - TLD Design",
          "Step3 - Schematic Design",
          "Step4 - Schematic Capture",
          "Step5 - Footprints Assignments",
          "Step6 - ERC Check",
          "Step7 - PCB Layout Editing",
          "Step8 - PCB Routing",
          "Step9 - DRC Check",
          "Step10 - Generating Fabrication-Ready Output Files (Gerber)",
          "Running Some Projects On PIC18F Dev Board"
        ],
        "PCB Design Project3: USB-Powered LED Controller With STM32 uC": [
          "Step1 - Hardware Requirements",
          "Step2 - TLD Design",
          "Step3 - Schematic Design",
          "Step4 - Schematic Capture",
          "Step5 - Footprints Assignments",
          "Step6 - ERC Check",
          "Step7 - PCB Layout Editing",
          "Step8 - PCB Routing",
          "Step9 - DRC Check",
          "Step10 - Generating Fabrication-Ready Output Files (Gerber)",
          "Extra Step - Generating SMT Files (BOM & POS) For JLCPCB Service",
          "Bonus Lectures List For This Section"
        ]
      },
      "requirements": [
        "Basic Circuits & Electronics Knowledge",
        "PC (Windows, Mac, or Linux)& Internet Connection",
        "Patience And Willing To Be a PCB Designer"
      ],
      "description": "This course will help you to know the basics of KiCAD and how to use it as a tool for PCB design projects. And it'll also teach you how to formulate a project/product idea and document it in such a way that it becomes easier for you to plan and design each part of the complete system.\nAnd ultimately, help you develop a systematic way to approach PCB hardware design projects. Both as a hobbyist or as an engineering student. This course is Project-Based. You'll learn KiCAD by doing practical project examples through this course.\n\n\nDesign 3 PCB Boards and Learn The Essentials of KiCAD\nSimple LED Flasher Board\nPIC18F-Based Development Board\nSTM32-Based USB-Powered LED Controller Board\n\n\nCourse's Contents and Overview\nThe course starts with an introduction to printed circuit boards (PCB) technology. And then shifts the attention to PCB design CAD software tools and mainly focusing on KiCAD which is the main topic of this course. Then, you'll get introduced to KiCAD tools for schematic capture and PCB layout editing through a very basic example board.\nAfterward, I'll teach you a very intuitive PCB design methodology to get any project done just in 10 actionable steps. And we'll be sticking to this methodology for all the project examples we'll be doing thereafter.\nThen, the last 3 sections will be dedicated to the 3 projects for this course. And in each one of them, we'll be doing:\nHW Req. Statement\nSchematic Design\nSchematic Capture\nERC Check\nFootprints Assignment\nPCB Layout & Routing\nDRC Check\nGenerating Fab.-Ready Output Files (Gerber)\nGenerating BOM File\nGenerating POS For SMT services\nYou'll learn when and how to do each step in detail through this course and three times in 3 different projects. Just to make sure you've got a very good understanding and vision for the PCB design workflow.\n\nEnjoy The Course!",
      "target_audience": [
        "Beginners, Makers, and Electronics Hobbyists: If you build your own electronic circuits on breadboard and would like to transfer it to a real hardware PCB or a product that you can actually test and deliver, this course can help you take an idea in your mind and turn it into a real product PCB.",
        "College / University Students: if you're an engineering student and would like to learn PCB design to make your project look much more professional and to add a skill to your CV, this course can help you in this. You'll learn KiCAD and create your own projects and get to know PCB design methodology and how you can systematically approach PCB design projects and document your progress on the go.",
        "Embedded Systems Enthusiasts: whether you're a junior, freelancer, or experienced engineer, you can still find this course helpful. It'll help you learn KiCAD tools and PCB design workflow. This can help you create complete projects for your clients both firmware and hardware design. And also make the transition from any CAD software to KiCAD which an amazing opensource tool."
      ]
    },
    {
      "title": "Omron Plc Programming Basics - All In One",
      "url": "https://www.udemy.com/course/omron-plc-programming-basics/",
      "bio": "Learn Omron Plc Programming from scratch and be able to write omron plc programs for automation projects.(CX-One+Sysmac)",
      "objectives": [
        "Omron Plc Programming Basics",
        "CX-Programmer Software",
        "Sysmac Studio Software",
        "CX-Designer Basics",
        "Motion Control",
        "Plc Programming Techniques",
        "NB-Designer Basics",
        "Omron HMI Basics",
        "NB HMIs",
        "NA5 HMIs",
        "Sysmac Studio Programming Basics",
        "Plc Programming",
        "ST Programming",
        "Omron Plc Applications",
        "CX-One Software",
        "Modbus Communication Basics"
      ],
      "course_content": {},
      "requirements": [
        "This course does not require any prior knowledge."
      ],
      "description": "Dear All ;\nFirst of all , this course is going to be update always.This is really important.Please Keep following and learning always.\nWith this course you will learn to omron plc programming with cx-programmer and sysmac studio software.\nFirst part of this course includes CX-One and second part includes Sysmac Studio.\nIn this course, which we started from the basic and  you will be able to write code as professionally PLC programming from zero to advanced.\nAs an automation engineer, this course, where I transfer the experiences we have received from the machines, will give you great experiences.\nI will answer your questions that you do not understand at any time and will be ready to assist you in the programs and projects that you are working on it.\nAs a course instructor, I will be constantly updating and will continue to explain until I am sure that you can do omron plc programming professionally.\nWith this course , you are all going to learn ;\n- Omron plc programming basics\n- Use of CX-Programmer software\n- Omron plc command structures\n- Omron plc programming techniques\n- Omron HMI basics\n- CX-One structure\n- Sysmac studio basics\n- Sysmac family\n- Motion control\n- Advanced programming skills\nAnd you will learn many topics supported by examples.\nOmron plc is important for me because it is a very powerful and useful plc and we will constantly work to be the best course in this field.\nNever stop following and learning from this course.\nBest regards\nMustafa",
      "target_audience": [
        "Anyone who is wants to learn PLC programming and wants to improve himself in industrial automation and plc programming."
      ]
    },
    {
      "title": "Advanced PCB Design with KiCad 9",
      "url": "https://www.udemy.com/course/advanced-pcb-design-with-kicad/",
      "bio": "From Concept to Manufacturing: Build, Test, and Deliver a Four-Layer IoT PCB Using KiCad 9",
      "objectives": [
        "Design a complete four-layer PCB with KiCad 9.",
        "Create schematics, assign footprints, and route tracks for high-speed signals like SPI, I2C, and USB.",
        "Implement power and ground planes, copper zones, and via stitching for signal integrity.",
        "Troubleshoot and resolve design issues using KiCad's Electrical Rules Check (ERC) and Design Rules Check (DRC).",
        "Run Design for Manufacturing (DFM) checks with NextPCB to ensure production-ready designs.",
        "Test and validate key PCB components such as an SD card interface, flash memory, sensors, microphone, and OLED display.",
        "Analyze analog and digital signals using test scripts, an oscilloscope, and KiCad's simulation tools.",
        "Techniques for ensuring signal integrity through proper ground and power plane design.",
        "Methods to debug and resolve common PCB design issues using KiCad's tools.",
        "The process for preparing PCB designs for manufacturing with NextPCB or other manufacturers.",
        "Practical skills for testing and validating PCB functionality using an oscilloscope and multimeter.",
        "Insights into the challenges and best practices of IoT PCB design."
      ],
      "course_content": {
        "Introduction": [
          "010 – Introduction to PCB design with Kicad 9",
          "Source code of the project"
        ],
        "Planning": [
          "020 – Component selection and bill of materials",
          "030 – Schematic design and layout overview",
          "040 – Multipage schematic editor",
          "050 – Design priorities",
          "060 – Component walkthrough",
          "070 – Component sources and collection",
          "075 - Section 2 recap",
          "076 - Section 2 review quiz"
        ],
        "Setup": [
          "080 – Start the project",
          "090 – Project configuration",
          "100 – Install the footprint and symbol",
          "105 - Section 3 recap",
          "106 - Section 3 review quiz"
        ],
        "Schematic design": [
          "110 – Starting with the schematic design",
          "120 – Lipo battergy charger",
          "130 – USB port subcircuit",
          "140 – Create nets",
          "150 – Finish Lipo charger design",
          "160 – Voltage regulator",
          "170 – Battery connector",
          "180 – Add hierarchical sheet to page 2",
          "190 – Finish work in sheet 1",
          "195 - Section 4 Recap 1",
          "196 - Section 4 review quiz 1",
          "200 – Schematic design page 2 ESP32",
          "210 – USB-UART bridge",
          "220 – ESP32",
          "230 – SD card module",
          "240 – Flash memory",
          "250 – Create pages 3 and 4",
          "260 – Add test points",
          "265 - Section 4 Recap 2",
          "266 - Section 4 review quiz 2",
          "270 – Schematic design – sensors sheet",
          "280 – BME280",
          "290 – Ambient light sensor",
          "300 – Sound sensor",
          "310 – Schematic design sheet 4 User interface",
          "320 – BOOT and EN buttons",
          "330 – Symbol-footprint associations",
          "340 – Electrical rules check",
          "345 - Section 4 Recap 3",
          "346 - Section 4 review quiz 3"
        ],
        "Layout design": [
          "The full, uncut, uncensored layout design process",
          "350 – Start with the layout editor",
          "360 – Netclass setup",
          "370 – Import schematic to the layout editor",
          "380 – Track width calculator",
          "390 – Bring in remaining components",
          "400 – Main components placement",
          "410 – ESP32 placement",
          "420 – Main component placement",
          "430 – Edge cuts rough",
          "435 - Section 5 Recap 1",
          "436 - Section 5 review quiz 1",
          "440 – Placement and fine-tuning principles",
          "450 – Examples of fine-tuning",
          "460 – Routing of SPI signals",
          "470 – Implement refinement",
          "480 – How to fix a design bug",
          "490 – Continue placement refinement",
          "500 – Board outline refinement",
          "510 – Mounting holes",
          "520 – Routing",
          "525 - Section 5 Recap 2",
          "526 - Section 5 review quiz 2",
          "530 – Create copper zones",
          "540 – Differential pair routing",
          "550 – I2C tracks routing",
          "560 – Length tuning",
          "570 – Routing SPI",
          "580 – Power trace routing",
          "585 - Section 5 Recap 3",
          "586 - Section 5 review quiz 3",
          "590 – USB DP routes",
          "600 – Continue with power tracks",
          "610 – Bulk-fix specific track widths",
          "620 – Complete remaining signal tracks",
          "630 – Fix missing copper zone",
          "640 – Design rules check",
          "650 – Fix unconnected items",
          "660 – Fix violations",
          "670 – Final improvements",
          "675 - Section 5 Recap 4",
          "676 - Section 5 review quiz 4"
        ],
        "Production": [
          "680 – Design for manufacturing",
          "690 – Silkscreen and graphics",
          "710 – Order PCB and assembly",
          "720 – After order placement",
          "730 – Waiting for the PCB",
          "740 – Recap",
          "745 - Section 6 Recap",
          "746 - Section 6 review quiz"
        ],
        "Evaluation": [
          "01-Evaluation start and outline",
          "02-Test scripts",
          "03-Testing recap so far",
          "04-Audio sensor",
          "05-Light sensor",
          "06-Test conclusions and next steps",
          "07-Section 7 Recap",
          "08-Section 7 review quiz"
        ],
        "Improved design for prototype #2": [
          "Review of the changes",
          "Update schematic - Part 1 - Transistor and audio sensor",
          "Update schematic - Part 2 - Light sensor buttons inductor",
          "Symbol and footprint associations",
          "Layout update - Part 1 - Import schematic data, place and wire ferrite bead",
          "Layout update - Part 2 - Audio sensor",
          "Layout update - Part 3 - Light sensor",
          "Layout update - Part 4 - Repair BME280 and USB sub-circuits",
          "Layout update - Part 5 - Repair ESP32 wiring",
          "Design Rules Check (DRC)",
          "Update the 3D model and conclusion"
        ],
        "Bonus lecture": [
          "Bonus lecture"
        ]
      },
      "requirements": [
        "Basic familiarity with KiCad or completion of KiCad Like a Pro, 4th Edition.",
        "Understanding of fundamental electronics concepts (e.g., Ohm's Law, circuit components).",
        "Basic experience with PCB design and schematic creation.",
        "Familiarity with microcontrollers and digital communication protocols (e.g., SPI, I²C, UART) is helpful but not mandatory.",
        "A PC with KiCad 9 installed and a stable internet connection."
      ],
      "description": "Updated July 2025\nI’ve just published the complete, uncut layout design session for the ESP32 KiCad 9 project as a single video.\nThis video shows the entire layout process from start to finish — including every step, every fix, and all decisions made in real time.\nI decided to publish this video after several students asked me a real-time version of the parts of the original lectures where I used fast-forward to speed up parts of the process that I originally considered boring and repetitive.\nI hope that it will help you gain a deeper understanding of how the design was built, how I troubleshoot problems, and how I handle real-world layout challenges.\nUpdated March 2025\nI recorded a series of lectures where I redesigned my ESP32 board to fix issues from the first prototype. You will find the new lectures at the end of the course.\nI modified the audio and light sensor wiring to both use ADC1, integrated a variable resistor into the audio amplifier for adjustable gain, and corrected the photosensor wiring with proper capacitor placement. I also updated the PCB layout by enlarging the buttons, refining the track routing, adding a ferrite bead to reduce noise, and updating component footprints and 3D models.\nAbout this course\nUnlock the full potential of KiCad 9 and learn how to design a fully functional IoT PCB from start to finish. In this comprehensive, project-based course, you will work through the complete design, testing, and manufacturing process of a four-layer PCB using KiCad 9's latest tools and techniques. By the end of the course, you will have a fully designed and tested ESP32-based IoT board, along with the skills to tackle your own advanced PCB design projects.\nWhat You Will Learn:\nDesign a complete four-layer PCB with KiCad 9.\nCreate schematics, assign footprints, and route tracks for high-speed signals like SPI, I2C, and USB.\nImplement power and ground planes, copper zones, and via stitching for signal integrity.\nTroubleshoot and resolve design issues using KiCad's Electrical Rules Check (ERC) and Design Rules Check (DRC).\nRun Design for Manufacturing (DFM) checks with NextPCB to ensure production-ready designs.\nTest and validate key PCB components such as an SD card interface, flash memory, sensors, microphone, and OLED display.\nAnalyze analog and digital signals using test scripts, an oscilloscope, and KiCad's simulation tools.\nCourse Deliverable:\nBy the end of the course, you will have a fully functional ESP32-based IoT PCB, including:\nA professionally designed four-layer PCB, ready for fabrication and assembly.\nComplete KiCad project files for your reference and future use.\nPractical skills to design advanced PCBs for IoT applications.\nInsights into troubleshooting common design issues and preparing files for manufacturing.\nWho Is This Course For?\nThis course is ideal for electronics hobbyists, engineers, and professionals who already have some experience with KiCad and want to take their PCB design skills to the next level. If you are new to KiCad, we recommend starting with our KiCad Like a Pro, 4th Edition course, which provides a solid foundation in PCB design using KiCad.\nWhy Take This Course?\nReal-World Project: Design a complete IoT PCB from concept to fabrication.\nHands-On Learning: Apply best practices for power distribution, signal integrity, and component layout.\nCutting-Edge Tools: Explore the new features of KiCad 9 and learn how to use advanced tools for high-speed and mixed-signal designs.\nManufacturing Insights: Gain practical knowledge about preparing your designs for production with NextPCB.\nWatch the free lectures\nWe invite you to watch the free preview videos available on this page to get a clearer understanding of the course content and teaching style.\nJoin us today and master the art of advanced PCB design with KiCad 9!\nPlease know that a version of this course is also available on Youtube as a single video. You can find it by searching for \"KiCad 9: Design & assemble an ESP32 IoT 4-layer PCB loaded with goodies\". Compared to the YouTube version, this Udemy edition contains additional content, including quizzes and written lecture summaries to help you learn better. And, of course, no ads :-)",
      "target_audience": [
        "Electronics Hobbyists who want to design advanced PCB projects.",
        "Electrical and Electronics Engineers seeking practical PCB design experience.",
        "Embedded Systems Developers who work with IoT devices.",
        "STEM Educators looking to introduce PCB design into their curriculum.",
        "KiCad Users who want to explore the new features in KiCad 9.",
        "Makers and Tinkerers interested in building custom PCB solutions."
      ]
    },
    {
      "title": "Embedded System for Internet of Things",
      "url": "https://www.udemy.com/course/embedded-system-for-internet-of-things-pna/",
      "bio": "Learn Embedded Systems",
      "objectives": [
        "Students will learn about Embedded System.",
        "Students will learn about microcontrollers.",
        "Students will learn about Real time systems and Real time tasks.",
        "Students will learn about difference between General Processors in Computer and Embedded Processors."
      ],
      "course_content": {
        "Embedded System for Internet of Things": [
          "Embedded System - Definition, Example, Characteristics, Components",
          "General Processors in Computer Vs Embedded Processors, Microcontroller",
          "Microcontroller, System-On-Chip, Embedded Processor",
          "Real Time Systems, Real Time Tasks & its Types",
          "Real Time Embedded Systems & its Applications",
          "Addressing Techniques in IOT",
          "MCQ Assignment"
        ]
      },
      "requirements": [
        "Basic Electronics Engineering"
      ],
      "description": "The objective of this course is to understand the fundamentals of the Internet of Things (IoT) and Embedded Systems. In this course, students will learn the definition of the Embedded System, along with it they will learn various characteristics of the Embedded System. Then the concept of Real-time systems, Real-time tasks have been covered in this course. After that, students will learn the basics of processors in which they will understand the difference between the General Processors in Computer and the Embedded Processors. After covering this, students will learn about the basics of Microcontrollers, various properties of Microcontroller, and Components of Microcontrollers. Then an interesting concept of System-On-Chip and its examples will be covered in this course. After the completion of the Microcontrollers, students will be going to learn about the various components of the Embedded Systems. Then students will learn about the embedded processor will be considered an important part of the Internet of Things. This course will be helpful to those who want to learn the Internet of Things from the basics. It will cover the prerequisite required for the very emerging trend in the field of IT i.e., the Internet of Things. After successful completion of this course, students will be able to understand the fundamentals and needs of Embedded Systems for the Internet of Things.",
      "target_audience": [
        "Learners of Embedded Systems"
      ]
    },
    {
      "title": "PIC Microcontroller: Everything you need to Know",
      "url": "https://www.udemy.com/course/pic-microcontroller-step-by-step-your-complete-guide-2/",
      "bio": "You will enter Microcontroller world of wonders, and together we will make YOU a professional Microcontroller Geeks.",
      "objectives": [
        "Program PIC Microcontroller like a champ",
        "Understand the principles of programming micro-controllers",
        "Build electronic devices using different tools",
        "Use and Understand many types of sensors and components",
        "Understand basic principles in electronics design.",
        "Connect your PIC Microcontroller to LCD Screen and control it.",
        "Connect your PIC Microcontroller to Seven Segment and control it.",
        "Connect your PIC Microcontroller to Motor and learn how to control it.",
        "Connect your PIC Microcontroller to Keypad and control it.",
        "Connect your PIC Microcontroller to DOT Matrix and control it."
      ],
      "course_content": {
        "Introduction and Basics": [
          "Section Intro",
          "Introduction",
          "Who We Are?",
          "Exploring Microcontroller Applications with PIC",
          "How to install Proteous Professional",
          "How to Install MikroC Pro for PIC Programming",
          "Summary",
          "Reading Meterial"
        ],
        "C Programming For Microcontrollers": [
          "Section Intro",
          "Overivew and The software to be used",
          "Very Important Note: Review Process",
          "Compilation Process and Your First C Project",
          "How to increase the font size in the Programming enviroment",
          "Why C and Basic Program Structure",
          "Variables",
          "Statements and Operators",
          "LOOP Statements",
          "Conditions if and switch",
          "Numbering System",
          "Using Operators",
          "Using Functions",
          "Digital inputs and Delay loops",
          "Summary",
          "Reading Meterial"
        ],
        "Code, Run and Have more Fun": [
          "Section Intro",
          "First Project in Proteus",
          "First Project in MikroC",
          "How to deal with PIC Ports + First Code",
          "Necessary Connections",
          "Simple LED example to get things on the right track",
          "Flasher circuit PIC Microcontroller",
          "Lighting Led Follower Example",
          "Control Led using Push Button",
          "Controlling Seven Segment using BCD Counter PIC Microcontroller",
          "Controlling LCD using PIC Microcontroller",
          "Display and Move Text on LCD",
          "Stepper Motor Control",
          "Dot Matrix Control",
          "Keypad Interface and control with PIC Microcontroller",
          "Summary",
          "Reading Meterial"
        ],
        "PIC Microcontroller: The story from the beginning": [
          "Section Intro",
          "PIC Manufacture Microship Company",
          "Programming PIC and Circuit Prototyping",
          "PIC Architecture and PIC Families",
          "Harvard Architecture vs Von Neoman Architecture",
          "PIC16F84 Microcontrollers Explained",
          "Signle Word Instructions",
          "Pin Discription and Ocillator Types",
          "System Reset",
          "Summary",
          "Reading Meterial"
        ],
        "PIC Architecture II": [
          "Section Intro",
          "Ports",
          "PIC Architecture 2 Ports and Registers",
          "Status Register",
          "Option Register",
          "Banking Mechanism",
          "SFRs and GPRs",
          "Memory Organisation",
          "Summary",
          "Reading Meterial"
        ],
        "Analog To Digital Conversion": [
          "Section Intro",
          "Analog To Digital Conversion",
          "ADC Module in PIC16F877A",
          "ADC Module Configuration Bits and Example",
          "Summary",
          "Reading Meterial"
        ],
        "Interrupts": [
          "Section Intro",
          "Interrupts and External Interrupt Source",
          "PortB Line Change Interrupt Source",
          "EEPROM Data Write Interrupt",
          "Interrupt Handlers and INTCON Register",
          "Option Register",
          "Programming the External Interrupt RB0 Example",
          "PortB 4 7 Status Change Interrupt",
          "RB0 and RB4-7 Interrupt Example",
          "Summary",
          "Reading Meterial"
        ],
        "Serial Communication Introduction and Basics": [
          "Section Intro",
          "Serial Communication Introduction and Basics",
          "Synchronous Serial Transmission and RS232",
          "Essential Concepts in Serial Communication",
          "PIC TO PIC And PIC TO PC Communication",
          "Serial Communication Example PIC TO PC",
          "Summary",
          "Reading Meterial"
        ],
        "Timers and Counters": [
          "Section Intro",
          "Timers and Counters",
          "Timer0 Interrupt",
          "Delay Using Timer0",
          "Timer0 Interrupt Programming Delay Loops",
          "Interrupt Driven Timers",
          "Timers0 as a Counter",
          "Summary",
          "Reading Meterial"
        ],
        "Practical Experiments": [
          "Section Intro",
          "Exp1: Introduction to Software Tools MikroC, PROTEUS, and QL-2006 programmer",
          "Experiment #1 Introduction to Software Tools MikroC, PROTEUS, and QL-2006",
          "Exp2: Introduction to PIC16F84A",
          "Experiment #2 Introduction to PIC16F84A",
          "Exp3: Introduction to MikroC Language",
          "Experiment #3 Introduction to MikroC Language",
          "Exp4: Some Logic Functions Design",
          "Experiment #4 Some Logic Functions Design",
          "Exp5: Delay Loops Applications Flasher & Counter & Push Buttons",
          "Experiment #5 Delay Loops Applications Flasher & Counter & Push Buttons",
          "Exp6: 7 segment Interface with PIC Microcontroller & Counter Application",
          "Experiment #6 7 segment Interface with PIC Microcontroller & Counter Applicatio",
          "Exp7: LCD Interface with PIC Microcontroller",
          "Experiment #7 LCD Interface with PIC Microcontroller",
          "Exp8: Keypad Interface with PIC",
          "Experiment #8 Keypad Interface with PIC",
          "Experiment #9 Analog Digital Conversion",
          "Experiment #9 Analog Digital Conversion",
          "Experiment #10 Unipolar Stepper Motor Control",
          "Experiment #10 Unipolar Stepper Motor Control",
          "Experiment #11 Dot-Matrix Display",
          "Experiment #11 Dot-Matrix Display",
          "Experiment #12 Serial Interface with PIC Microcontroller",
          "Experiment #12 Serial Interface with PIC Microcontroller",
          "Experiment #13 Interrupt Application Controlling flashing speed of a flasher",
          "Experiment #14 TMR0 Application Counter Using TMR0",
          "Experiment #15 Pulse-width modulation (PWM)",
          "Experiment #16 EEPROM Memory Application",
          "Experiment #17 Application for Keypad and LCD Security System",
          "Summary",
          "Reading Meterial"
        ]
      },
      "requirements": [
        "Download and Install Proteus Professional",
        "Download and Install MikroC Pro!",
        "Download The course Material in PDF and Print them if possible"
      ],
      "description": "Welcome to PIC Microcontroller: Everything you need to Know.\nThis course offers over a hundred lectures and 8.5 hours of HD content, taking you on an informative journey to not only master the coding of PIC Microcontroller but also learn the very basics of PIC Microcontroller's internal structure, how it works, its parts, and how your code is handled inside the brain of a microcontroller.\nWhy You Should Take This Course:\nComprehensive Learning: Learn to program a microcontroller from scratch.\nProject Building: Build your own projects with the knowledge of microcontroller usage.\nDetailed Understanding: Learn about inputs, outputs, interrupts, timers, PWM, analog to digital conversion, and more!\nUnity Programming: Access a course in Unity programming to make games in C# using the knowledge from this course.\nContinuous Updates & Bonuses: Stay updated with new content and get access to additional resources.\nStudent Testimonials:\nAbel Kaswahili: \"I like the way it provided, because it does not make any one to be bored but it encourage to learn.\"\nIngmar Jaitner: \"Very good information about PIC. Looking forward to the practical programming section.\"\nEro Ewaen Osazee: \"Very nice introductory course for the PIC microcontroller, a well-structured introductory course.\"\nCourse Highlights:\nOver a hundred lectures and 8.5 hours of HD content.\nDetailed understanding of the PIC microcontroller's internal structure and functionality.\nHands-on learning with practical experiments and DIY projects.\nComprehensive topics including LEDs, resistors, pushbuttons, LCD screens, seven-segment displays, motors, keypads, timers, counters, and more.\nBonus:\nWhen you join this course, you will get the PIC Microcontroller Test Your Skills and Get Certified course for FREE, usually worth $200. This bonus section includes over 100 questions, timed test-taking abilities, and interactive feedback.\nWhat You Will Learn:\nC Programming Basics\nPIC Microcontroller inner structure and programming introduction\nPractical experiments with LEDs, resistors, pushbuttons, LCD screens, seven-segment displays, motors, keypads, and more\nAdvanced topics like banking mechanism for memory organization, analog to digital conversion, interrupts, and serial communication\nPractical DIY projects and quick tips\nWho is This Course For:\nBeginners to advanced level learners interested in microcontrollers\nHobbyists looking to enhance their microcontroller knowledge\nStudents and professionals aiming to build and program their own microcontroller projects\nRequirements:\nNo prior programming experience needed\nBasic understanding of electronics is helpful but not necessary\nA computer with internet access\nWillingness to learn and experiment",
      "target_audience": [
        "Anyone with a curiosity for making electronics",
        "People with no experience in electronics",
        "People with an intermediate knowledge of electronics",
        "Children over 12 years old"
      ]
    },
    {
      "title": "Advanced Computer Architecture & Organization: HD Course",
      "url": "https://www.udemy.com/course/advance-computer-architecture-and-organization/",
      "bio": "Learn Computer Architecture, Computer Organization, ISA, CPU Design, CISC & RISC Architectue, Pipelining, I/O & more.",
      "objectives": [
        "Computer Architecture",
        "Computer Organization",
        "Instruction Set Architecture",
        "CPU Design",
        "Memory Management",
        "Control Unit Design",
        "SRC processor",
        "CISC and RISC architecture",
        "Pipe lining",
        "Parallel programming",
        "Input/Output Sub Sytems",
        "Registers"
      ],
      "course_content": {
        "Introduction": [
          "What is computer architecture?"
        ],
        "Instruction Set Architecture": [
          "Instruction Set Architecture",
          "Different Addressing Modes",
          "Classification of Machines CPU on the basis of operant and result location",
          "RISC and CISC architecture"
        ],
        "Memory Module": [
          "Concept Of Memory",
          "Main Memory",
          "Cache Memory",
          "Memory management"
        ],
        "CPU Design": [
          "Introduction to CPU",
          "Register Organization",
          "Concept of Program execution",
          "Processor organization; a unibus or single bus implementation",
          "Processor organization; a multiple bus organization",
          "Execution of a complete instruction",
          "Control Signals",
          "Memory Address Register (MAR) circuitry",
          "Memory Buffer Register (MBR) circuitry",
          "Register Connections",
          "Control Signals for the fetch operation",
          "Control Signals for add operation",
          "CPU design section quiz"
        ],
        "Introduction to SRC Processor": [
          "An introduction to SRC Processor",
          "SRC processor instruction formats",
          "An expression evaluation",
          "Different fields in SRC instructions",
          "Writing SRC assembly language program",
          "SRC processor section quiz"
        ],
        "CISC and RISC Architecture": [
          "Historical background for understanding CISC and RISC Architecture",
          "Main Characteristics of RISC",
          "Design issues in RISC Architecture",
          "Main characteristics of CISC architecture"
        ],
        "Control Unit Design": [
          "Introduction to Control Unit",
          "Hardwired implementation of control unit",
          "Microprogrammed implementation of control unit( part-1)",
          "Microprogrammed implementation of the control unit (part-2)"
        ],
        "Pipelining": [
          "Introduction to pipelining",
          "Complications Related to Pipelining",
          "Designing a pipeline",
          "Hazards in Pipelining"
        ],
        "Input/Output Subsystems": [
          "Introduction to input/output subsystems",
          "Memory mapped I/O vs Isolated I/O",
          "Considerations during I/O Subsystem Design",
          "Designing parallel I/O ports",
          "Input/Output techniques"
        ]
      },
      "requirements": [
        "Good Understanding of Computer.",
        "A little assembly language experience needed",
        "No more skills required. I assure, you will learn all things if you have a zero knowledge of computer architecture."
      ],
      "description": "Course Overview\nThis course provides a comprehensive overview of Computer Architecture and Organization from a practical perspective.\nThis course includes video and text explanations particular covers everything from Computer Architecture and Computer Organization. This course consists of different sections: each section covers a specific module related to computer architecture.\nWhat Is Computer Architecture?\nComputer architecture is a science or a set of rules stating how computer software standards and hardware instructions and technology infrastructure are joined together and interact to make a computer work. It defines how computer systems, platforms and programs operate. In other words, computer architecture defines system’s functionality, design, and performance. Creating a computer’s architecture requires IT professionals to first determine the needs of users, technology limitations and process requirements.\nWhat Does This Course Cover?\nThis computer architecture and computer organization course covers all the following necessary topics and areas that a computer architect must understands.\nInstruction Set Architecture (ISA).\nCPU design.\nClassification of Machines CPU on the basis of operand and result location.\nRISC and CISC architecture.\nDifferent addressing modes in machines.\nControl Unit design\nPipe lining.\nMemory Hierarchy.\nRegisters Organization.\nSRC Processor.\nComputer Organization\nFALCON-A Processor.\nInput/Output Sub systems\nInterrupts.\nWho Is the Course For?\nThis course is for:\nComputer Science Students.\nSystem Programmer.\nMachine Level Language Programmer.\nAssembly Language programmer.\nComputer Architects.\nAny body who wish to learn how computer systems work?\nComputer Engineers.\nElectronics Engineers.\nCompiler Writers.\nKeywords:\nComputer Architecture\nComputer Organization",
      "target_audience": [
        "Computer Science Students",
        "Computer Architects",
        "System Programmers",
        "Assembly Language programmers",
        "Computer Engineers",
        "Electronics Engineers",
        "Any body who wish to learn how deos computer systems works?"
      ]
    },
    {
      "title": "Computer Repairing: Learn how to program the BIOS chip",
      "url": "https://www.udemy.com/course/computer-repairing-learn-how-to-program-the-bios-chip/",
      "bio": "Laptop repair course, computer hardware & software, firmware, motherboard repair, BIOS, UEFI, minipro programmer, IT, PC",
      "objectives": [
        "What is the BIOS ?, and how it works ?",
        "How to program the BIOS chip from A to Z;",
        "How to choose a good programmer;",
        "What is the Firmware and how to where we can download it;",
        "What are the faults that require BIOS chip programming;",
        "What is the process of flashing the Basic Input Output System BIOS;",
        "How I convert EXE file to BIN file;",
        "BIOS circuit diagram and pin configuration;",
        "What are the best and cheapest programmers and much more."
      ],
      "course_content": {},
      "requirements": [
        "Basics of computer hardware and software."
      ],
      "description": "- 13 Reasons why you should choose this course.\nThe course will teach you How to program the BIOS chip.\nThe course is created with perfect care by a computer engineer;\nThe course is not long, so you can complete it in a short time;\nYour inquiries will be answered in a short time with a full explanation of any question;\nA certificate will be provided upon completion of the course;\nYou are going to understand everything you need to flash or program BIOS ICs;\nYou are going to learn the BIOS working principle,\nYou going to learn how to check the BIOS using a multimeter;\nI'm going to teach you how to download any firmware you want;\nYou also going to learn about the faults that require BIOS programming;\nYou going to learn the Basic Input Output System schematic and pin configuration;\nI'm going to teach you how to calculate the size of any BIOS IC;\nI will show you where can you buy the BIOS programmer if you don't have it and much more.\n- Topics that we will be discussing in this course are :\nDefinition of the BIOS;\nOverview of Basic Input Output System, BIOS;\nUnderstanding BIOS-Chip Size and References;\nBIOS Pin Configuration & Circuit Diagram;\nBIOS Faults;\nBIOS Programmer;\nWhat you will need to flash the BIOS;\nBIOS Software Minipro studying;\nHow to program the BIOS IC step by step;\nHow to download the firmware and how to convert Exe file to Bin file;\nHow to download BIOS datasheet;\nHow to use the Multimeter correctly.\nI'm going also to teach you many tips and tricks that will make you a hardware professional and have a deep understanding of motherboard repair.\nI will guide you step by step with an easy explanation of this course.\nIf you are interested in one of the points we talked about before, then this course is for you.\nSo what are you waiting for?\nEnroll now and join us.\nI'd love to see you in the class.",
      "target_audience": [
        "Hardware & Software students and technicians;",
        "Students & Technicians who want to improve their skills on laptop repairing;",
        "Anyone who want to understand how to program the BIOS chip."
      ]
    },
    {
      "title": "Electronics for Makers: Design Flight Computers & Controller",
      "url": "https://www.udemy.com/course/maker-electronics/",
      "bio": "Master the Essentials of Electronics: From Fundamentals to PCB Design, Create your own Flight Computers and Controllers",
      "objectives": [
        "Learn Electronic Fundamentals and Key Components",
        "Apply Your Knowledge to Design Functional Circuits",
        "Bring Your Circuits to Life with PCB Design Software",
        "Create Your First Custom PCB for Your Own Project"
      ],
      "course_content": {},
      "requirements": [
        "A basic understanding of high school-level electronics will help you get the most out of this course. That said, we’ll guide you through the essential fundamentals to get you up to speed—right through to designing your first custom PCB."
      ],
      "description": "Welcome to the ultimate maker electronics course! Making things is awesome, and designing your own circuit board takes it to a whole new level. But let’s face it: the journey can be challenging, and finding a clear path has been tough—until now. That’s why I created this course. I’m here to guide you from zero knowledge in electronics to crafting your own custom controller, quickly and easily.\n\n\nI’m Johannes Moser, and at **jm_space**, we’ve been developing actively stabilized model rockets since 2019. To achieve that, I learned to design my own flight computers, creating 20 different designs along the way. While I’m currently studying Aerospace Engineering at TU Delft, I don’t have formal training in electronics. This unique perspective makes this course incredibly valuable; I know exactly what it takes to design your own controller without getting bogged down in unnecessary complexity.\n\n\nWhile this course is tailored for model rocket enthusiasts, the knowledge you gain will extend far beyond rocket flight computers. You’ll also be well-equipped to design flight controllers for drones, RC cars, RC planes, and many other innovative applications.\n\n\nThe electronics path is structured into three comprehensive sections: Electronic Fundamentals, Electronic Circuits, and PCB Design. In the first section - Electronic Fundamentals, we will start from the very basics and gradually build up your knowledge. We will cover the fundamental concepts of atom theory to explain conductivity, electric current, voltage, and resistance. Based on these and other underlying theoretical concepts, you will understand electronic components such as resistors, capacitors, diodes, transistors, inductors, and crystal oscillators.\n\n\nIn the second section - Electronic Circuits, we will continue by learning how to arrange those components to create functional circuits. You will learn about all necessary circuits, including power management, microcontrollers, sensors, and output implementations. By the end of this section, you will have the knowledge needed to devise your own flight computer tailored to your specific requirements. However, understanding and designing circuits is only part of the journey. To bring your designs to life, you need to know how to realize them.\n\n\nThis is where the third section - PCB Design - comes in. We will use the EasyEDA design software to guide you through the entire PCB design process. You’ll learn to create schematics, place components on the layout, and route PCB traces. We’ll also cover how to select components and utilize assembly services. By the end of this section, you’ll place your first PCB order, transforming your theoretical designs into tangible, functional hardware. Along the way, we will incorporate practical examples to demonstrate concepts, components, and circuits. Additionally, activities after each lecture will help you to apply and solidify your understanding.\n\n\nI’ve distilled five years of experience into this course so that you can achieve in weeks what took me years to learn. I wish there had been a course like this when I started out, as it would have saved me so much time and money. By joining this course, you’ll save yourself the time, money, and frustration that comes with trial and error.\n\n\nThe course is priced at $109.99—about the cost of a single failed PCB design. I made three failed designs before getting it right, so not only will this be cheaper than going it alone, but it will also be faster and a lot more fun. So, if you’re a maker—whether your project involves rockets, drones, or anything else—I can’t wait to see where your newfound electronics knowledge takes you.",
      "target_audience": [
        "This course is perfect for anyone looking to master electronics and create custom projects. Whether you're a complete beginner wanting to learn from scratch, an aspiring maker eager to build your own flight computers and controllers, or a DIY enthusiast seeking a straightforward path to functional electronics, this course provides the practical approach you need.",
        "If you have a bold project idea but aren’t sure how to tackle the electronics, this course is perfect for you. It offers a simple, step-by-step approach that serves as a manual for turning your ideas into reality",
        "Even if you have some experience, you’ll find valuable insights and a comprehensive foundation to enhance your skills."
      ]
    },
    {
      "title": "Learn Siemens S7-300 PLC & WinCC HMI or SCADA in TIA Portal",
      "url": "https://www.udemy.com/course/learn-siemens-s7-300-plc-wincc-hmi-or-scada-in-tia-portal/",
      "bio": "Siemens S7-300 CPU Level 1 PLC Programming with WinCC HMI Designing from ZERO to HERO as Quick n Clean",
      "objectives": [
        "Learn Siemens PLC From the beginning",
        "Siemens TIA Portal",
        "Different Function Blocks",
        "WinCC HMI Designing or WinCC SCADA",
        "User Defined Function Blocks and Functions",
        "Siemens Memory Organization",
        "PLC SCADA Connection",
        "PLC To Excel Communication",
        "SCADA VB Scripting",
        "SCADA Object Properties",
        "Trends and Alarms",
        "Security in SCADA",
        "Recipe Control in SCADA",
        "PLC and SCADA/HMI interfacing"
      ],
      "course_content": {},
      "requirements": [
        "For Practice you need to Install TIA Portal, and Download Link will be provided",
        "Preferably a computer with i5 Processor or equivalent and minimum 4GB RAM"
      ],
      "description": "Any one can learn the Course without any pre PLC Knowledge.\nWe will learn all the Siemens Things From Base to the Intermediate.\nFrom This tutorial any beginner level guys will be able to Self program and test your Siemens PLC and WinCC HMI With TIA Portal\nThis Course also comes with the idea about the other IEC language LIKE LAD\nLearning the course will be fun and could help you to boost your Logic and Coding Skills.\nWe can Program the S7-300 CPU with TIA Portal and also interfacing the WinCC SCADA or HMI With That.\nAlso learn The External Communications with the MS EXCEL Software using Third party Apps\nLearning The Object movements and visibility in WinCC with application level Questions Will Make the Practice fun.\nIt includes Timers, Counters, Sequencers, Shifting instructions, Arithmetic, Data moving, Logical And program Control instructions.\nAlso You will be able to Create User Defined Function blocks that allows you to do your own specific task.\nBy Practicing the Application level Problems will make the Programming immersive easy and fun.\nProblems and solutions will come at Basic , Moderate and Advanced.\nThe tutorial will make you to find the Realtime Applications of the logic and Function Blocks in the industries, Through Great animation.",
      "target_audience": [
        "PLC Programmers",
        "Instrumentation Engineers",
        "Automation Engineers",
        "Automation Students",
        "Instrumentation Students",
        "Automation Working professionals"
      ]
    },
    {
      "title": "Advanced VHDL for Verification",
      "url": "https://www.udemy.com/course/advanced-vhdl-for-verification/",
      "bio": "Generics, Alias, Records, Mutli-dimensional arrays, TestIO, Signal Hierarchy, and Bus Functional Models",
      "objectives": [
        "Advanced VHDL for verification, including TextIO, configurations, generics, records, BFM, multi-dimensional arrays, and access types."
      ],
      "course_content": {},
      "requirements": [
        "Experience in VHDL RTL design.  Introduction to VHDL course completion recommended."
      ],
      "description": "The advanced VHDL course includes advanced RTL features as well as verification behavioral capabilities :\n- VHDL Configurations\n- VHDL Arrays\n- Modeling memories in VHDL, creating inferred memories in RTL\n- Modeling and inferring FIFOs in VHDL\n- VHDL Signal Hierarchy\n- VHDL Generics , Records, and Alias\n- VHDL File I/O , and TextIO\n- Creating pseudo-code for simulations\n- Developing VHDL Bus Functional Models",
      "target_audience": [
        "VHDL RTL or Verification engineers who want to use the VHDL language to improve verification."
      ]
    },
    {
      "title": "Internet of Things with Python Programming",
      "url": "https://www.udemy.com/course/iot-with-python/",
      "bio": "Learn foundation python programming and work on various experiments using Arduino Uno & Raspberry Pi",
      "objectives": [
        "The aim of this course is to introduce Python to those with little or very little programming knowledge",
        "You will have an introduction to Computers, Programming and Internet of Things.",
        "We take you through the basics of Hardware and Software",
        "We teach you how computers store data and how a program works",
        "We will introduce you to advanced concepts such as functional programming, object orientation, and exception handling.",
        "You will be able to Rapidly prototype even complex IoT applications with Python and put them to practical use",
        "You will enhance your IoT skills with the most up-to-date applicability in the field of wearable tech, smart environments, and home automation",
        "You will interact with hardware, sensors, and actuators and control your DIY IoT projects through Python"
      ],
      "course_content": {
        "Introduction: Computers and Programming": [
          "Introduction"
        ],
        "Python Foundation: Python Tools": [
          "Python Foundation"
        ],
        "Day 3: Python - Input, Processing and Output": [
          "Day 3"
        ],
        "Day 4: Special Output and Functions": [
          "Day 4"
        ],
        "Day 5: Local and Global Variables": [
          "Day 5"
        ],
        "Day 6: Repetition Structures and Strings": [
          "Day 6"
        ],
        "Day 7: Lists, Tuples & Dictionaries": [
          "Day 7"
        ],
        "Day 8: Files & Extensions, Introduction to Raspberry Pi": [
          "Day 8"
        ],
        "Day 9: Introduction to IoT": [
          "Intro to IoT"
        ],
        "Day10: Interfacing Arduino and Python": [
          "Part 1",
          "Part 2"
        ]
      },
      "requirements": [
        "We assume very little knowledge or experience of Python or programming or IoT"
      ],
      "description": "Learn Python, the language for IoT\nHow great would it be to write your own computer program? Or, design a web or desktop application that millions of people could enjoy? Both are a possibility if you learn how to code in Python. Python is the very versatile, object-oriented programming language used by startups and tech giants, Google, Facebook, Dropbox, and IBM. Python is also recommended for aspiring young developers who are interested in pursuing careers in Security, Networking, and Internet-of-Things.\n\n\nRaspberry Pi development comes in many flavors, but Python is common and powerful. In this project-based course, learn how to work with this highly readable language—along with a Raspberry Pi board—to build a secure ecosystem of interconnected IoT devices. We will be reviewing the basics of IoT smart devices, as well as several important IoT communication models.\nYou will work on 4 Development kits as part of this Hands-on IoT with Python course:\n•Live Weather monitoring\n•Motion detection in a room and image capture\n•Tank alarm using Water level detection sensor\n•Smart trashcan\n\n\nWhat you’ll learn:\nProblem-solve using an algorithmic approach.\nUnderstand programmer's work in the software development process.\nGain knowledge on how a program is executed in a computer environment\nHardware considerations\nIoT communication protocols\nInternet security and cryptography\nDesigning the project architecture\nIntegrating sensors with Raspberry Pi\n\n\nTestimonials:\nvery clear information and easy to understand ~ Soma\nawesome ~ Sanjay chaurasia\nThe class keeps getting more and more interesting ~ Oscar Kidega\nYes it is very useful for me ~ Madhuri Vasant Shelar\nThis was a good match for me. I knew nothing about python, but now this course the teaches me a little every time.\n~ Mason Crowe\nloved this course ~ Jatin aggarwal\nI had a very nice experience with this course this will definitely help me in my project in future. ~ Pritesh Suresh Nikam",
      "target_audience": [
        "Children with age groups 8-15 years",
        "College grads who need a solid introduction to IoT and Python"
      ]
    },
    {
      "title": "Internet of Things (IoT) Automation using Raspberry Pi 2",
      "url": "https://www.udemy.com/course/internet-of-things-automation-using-raspberry-pi-2/",
      "bio": "Learn how to use waterproof temperature sensors to remotely display temperature and alert you through Email.",
      "objectives": [
        "Read the raw temperature of the multiple sensors using Linux command.",
        "Program the sensors to display the updated temperature after a delay of every 10 seconds.",
        "Receive an automated email alert when the temperature crosses a certain limit.",
        "Connect the sensors to an open source cloud and access the temperature in a web dashboard from anywhere.",
        "Retrieve the complete month statistics by visiting the web portal."
      ],
      "course_content": {
        "Introduction": [
          "What will you learn from this course",
          "Introduction and Hardware Requirements",
          "Circuit assembly on Breadboard",
          "Identifying the sensors",
          "Access Raw Temperature via Linux Command",
          "Internet of Things"
        ],
        "Temperature Automation": [
          "Circuit Diagram",
          "CODE - Import the required library",
          "CODE - Read temperature via File Handling",
          "CODE - Define Email server",
          "CODE - Email Authentication",
          "CODE - Error Debugging",
          "CODE- Adding crontab module",
          "Temperature Automation - Real time Demonstration",
          "Source Code : Temperature Automation",
          "Programming"
        ],
        "Remote Access": [
          "Open source cloud - Frontend Configuration",
          "Open source cloud - Backend Configuration",
          "Open Source Cloud - End user accessibility",
          "Open Source Cloud - Real Time Demonstration",
          "Hardware"
        ],
        "Bonus content : Setup your own personal cloud": [
          "Bonus content : Introduction to Tonido",
          "Bonus content : Implementation of Tonido in Raspberry Pi",
          "Bonus content : Automate Tonido upon boot"
        ]
      },
      "requirements": [
        "Pre-Installed Raspbian operating system in any version of Raspberry Pi."
      ],
      "description": "This is an intermediate level course on IoT and Raspberry Pi. This is a follow on course to the #1 Raspberry Pi course on Udemy - \"Introduction to Raspberry Pi\".\nTake your IoT and Raspberry Pi skills to the next level with this course.\nBonus content added regularly. Latest update on 7-Nov-15. We will keep adding new content, so that our students have something to look forward to\nAll our students (Makerdemy brand) get VIP pricing ($8) for all our new courses. We have 10 courses under our brand and will be releasing a new course every 2 months.\n___________________________________________________________________\nAfter creating a successful beginner course on IoT, We are back with another amazing course that will take your basic coding skills to next level. Internet of Things Automation using Raspberry Pi 2 is ideal for those who are interested in exploring the possibilities of IoT using Raspberry Pi 2. The course assumes basic knowledge of computer hardware and software. However, knowledge of Python programming will help you in getting up to speed.\nYou will learn how to connect multiples of DS18B20 waterproof sensors to GPIO pins of Raspberry Pi and access the raw temperature via Linux command. You will code the sensors to display the temperature automatically and also get notified via email alert when the temperature crosses a certain limit. Implementation of IoT through Python programming will make the device remotely accessible. If you are a technology enthusiast and want to learn the cutting edge technology then this is the right course for you.\nFinally, you will learn how to connect multiples sensors to an open source cloud and access the updated temperature through a web portal dashboard.\nThe course provides the complete source code of the real time project.\nThe entire course can be completed over a fortnight, including the hardware assembly and coding in Python programming.\nBy the end of this course, you will have a firm foundation on Internet of Things using Raspberry Pi 2. You can build own IoT controlled devices.\nWhat are you waiting for? Enroll now!",
      "target_audience": [
        "This is a intermediate course on Raspberry Pi 2 meant for those who want to explore the possibilities of Internet of Things using the mini kit."
      ]
    },
    {
      "title": "CompTIA A+ Certification Preparation: Learn the Basics of IT",
      "url": "https://www.udemy.com/course/comptia-aplus-certification-prep/",
      "bio": "Prepare and pass the CompTIA A+ certification with Cyber Training 365, leader in CompTIA preparation courses.",
      "objectives": [
        "Review the components of personal computers, laptops, and portable devices",
        "Understand operating systems, networks, and security",
        "Get up to speed on safety and environmental issues",
        "Practice effective communication and the \"soft skills\" of professionalism"
      ],
      "course_content": {
        "The Development of the Computer": [
          "The Development of the Computer",
          "The Role of a Computer Service Professional"
        ],
        "Computer Communication": [
          "Computer Communication Part 1",
          "Computer Communication Part 2"
        ],
        "The Three Stages of Computing": [
          "The Three Stages of Computing"
        ],
        "Microprocessors": [
          "Microprocessors Part 1",
          "Microprocessors Part 2",
          "Microprocessors Part 3"
        ],
        "Power Supplies": [
          "Power Supplies Part 1",
          "Power Supplies Part 2"
        ],
        "Computer Cases": [
          "Computer Cases Part 1",
          "Computer Cases Part 2",
          "Computer Cases Part 3"
        ],
        "ROM and RAM": [
          "ROM and RAM Part 1",
          "ROM and RAM Part 2",
          "ROM and RAM Part 3"
        ],
        "Understanding Expansion Buses": [
          "Understanding Expansion Buses Part 1",
          "Understanding Expansion Buses Part 2",
          "Understanding Expansion Buses Part 3",
          "Understanding Expansion Buses Part 4",
          "Understanding Expansion Buses Part 5"
        ],
        "Disk Drives": [
          "Disk Drives Part 1",
          "Disk Drives Part 2",
          "Disk Drives Part 3"
        ],
        "CD-ROM and DVD Drives": [
          "CD-ROM and DVD Drives Part 1",
          "CD-ROM and DVD Drives Part 2",
          "CD-ROM and DVD Drives Part 3",
          "CD-ROM and DVD Drives Part 4"
        ]
      },
      "requirements": [
        "Basic Computer Operations"
      ],
      "description": "CompTIA’s A+ certification training will validate an understanding of the most common hardware and software technologies in business as well as the skills necessary to support complex IT infrastructures. The A+ certification by CompTIA is a powerful credential helping IT professionals- worldwide- ignite their careers by proving knowledge needed to assemble elements based on install, customer requirements, configuration and maintenance of software, PCs and devices for end users, understand the basics of security, forensics and networking, safely and properly diagnose, document and resolve common software and hardware issues while applying troubleshooting expertise. These courses prepare the student for the CompTIA A+ Certification Exams 220-802 and 220-801.\nWhat You Will Learn\n\nThe curriculum for CompTIA’s A+ Certification Course begins with a brief history of the Development of the Computer and the basics of Computer Communication. After this common language has been learned the courses follow with The Three Stages of Computing, Microprocessors and Power Supplies. Then we look at the computer more in depth with classes on Computer Cases, ROM and RAM, Expansion Buses, Disk Drives, and CD-ROM and DVD Drives. Once an understanding of computer fundamentals has developed we focus on Printer Basics, Types of Portable Computers, Networking Requirements, Modems, Operating System Basics, and The Windows Family. After delving into Windows 98 and acquiring The Right Tools for the Job, we cover Computer Disassembly and Reassembly and Basic Troubleshooting Techniques. At the end of this course, a student walks away having had practical experience and comprehensive knowledge allowing confident execution of the CompTIA A+ 220-802 and 220-801 exams.",
      "target_audience": [
        "students or workers new to IT",
        "Aspiring computer technicians"
      ]
    },
    {
      "title": "Humanoid Robotics using Raspberry Pi",
      "url": "https://www.udemy.com/course/humanoid-robotics-using-raspberry-pi/",
      "bio": "Learn how to build the humanoid robot from the ground up and control it remotely",
      "objectives": [
        "Learn how to design a basic humanoid robot using Raspberry Pi",
        "Get to know how to code the servo motors using Python programming and move in different angles",
        "Get to know how the Robot can capture images when the obstacle is detected",
        "Wirelessly control the Robot and execute the programs remotely using SSH terminal"
      ],
      "course_content": {
        "Introduction": [
          "What will you learn from the course",
          "Hardware and software requirements",
          "Hardware",
          "Designing the Robot",
          "Designing the leg",
          "Circuit diagram - Designing the robot leg",
          "Designing the upper body of the robot",
          "Real time - Robot design",
          "Coding - Robot walk",
          "Coding - Robot walk Continuation",
          "Source Code - Humanoid Robot",
          "Real Time Demonstration - Robot walk",
          "Conceptual"
        ],
        "Obstacle detection": [
          "Understanding ultrasonic sensor",
          "Circuit diagram - Ultrasonic sensor connection with the GPIO pins",
          "Coding - Obstacle detection",
          "Source Code - Obstacle detection",
          "Real time Demonstration - Obstacle detection"
        ],
        "Webcam Control": [
          "Connecting webcam to Raspberry Pi",
          "Circuit design - Connecting webcam",
          "Webcam control",
          "Source Code - Webcam Control",
          "Real time Demonstration - Webcam access",
          "Programming"
        ]
      },
      "requirements": [
        "Basic knowledge of Python programming and Linux command",
        "Raspberry Pi - Any Model",
        "Raspbian Operating System"
      ],
      "description": "Humanoid Robotics using Raspberry Pi 3 is an advanced course for those who want to explore in depth in the field of physical computing and Robotics. The course requires basic knowledge of Python programming, Linux commands and obviously, your interest in Robotics.\nIn this course, you will learn how to build your own walking Robot from the ground up. This robot will also have obstacle detection feature and will also capture the images of the obstacle.\nIn the first part of this course, I will walk you through the hardware and software requirements so that you can have everything ready with you before working on the project.\nIn the second part, I will teach you how to design the Robot so that it looks like a human. Servo motors will be responsible for the movement of the Robot and we will use some of the sensors to perform different tasks such as obstacle detection and capturing images.\nOnce we are done with the designing part I will be guiding you to write the Robot walking program in python. This section will also include obstacle detection where a green LED will keep glowing while the Robot walks and if any obstacle is found in front of the Robot then a red LED will glow indicating that an obstacle is found.\nOne USB webcam will be attached on the head of the Robot so that it can also be able to capture the images.\nI will guide you step by step how to go about building these projects. I will also share the source code with you so that you can replicate the project by yourself.\nI look forward to you joining this course.",
      "target_audience": [
        "The course is for anyone who wish to explore  the design, construction, operation, and application of robots, as well as computer systems for their control, sensory feedback, and information processing."
      ]
    },
    {
      "title": "Advanced Arduino Boards and Tools",
      "url": "https://www.udemy.com/course/advanced-arduino-boards-and-tools/",
      "bio": "A tour of advanced Arduinos boards, and the tools that will supercharge your projects",
      "objectives": [
        "Select the right Arduino board for your next project",
        "Learn about debugging and relevant tools",
        "Create Internet of Things applications using Arduino and Temboo",
        "Use Processing to create desktop applications that interface with the Arduino",
        "Use OpenOCD and GDB to debug a sketch running on an Arduino Zero",
        "Use Atmel-ICE and Atmel Studio to program and debug Arduino sketches",
        "Appreciate the differences between advanced Arduino boards"
      ],
      "course_content": {
        "Introduction": [
          "What is this course about",
          "A summary of the course content"
        ],
        "The Arduino Zero": [
          "Introduction",
          "The Arduino Zero - An introduction",
          "Setup",
          "Arduino Zero and PWM",
          "Digital to Analog conversion: make a triangular waveform",
          "More waveforms",
          "Arduino Zero and power consumption",
          "The Real Time Counter",
          "Playing with the USB Native port",
          "Conclusion",
          "Test your Arduino Zero knowledge"
        ],
        "The Arduino 101": [
          "Introduction",
          "Introducing the Arduino 101",
          "Setup and the Real Time Counter demo",
          "Bluetooth Low Energy and LED control demo",
          "Bluetooth Low Energy and the Heart Rate service demo",
          "Inertial Measurement Unit and Processing demo",
          "Conclusion",
          "Test your Arduino 101 knowledge"
        ],
        "Arduino Mega 2560": [
          "Introduction",
          "Introduction to the Arduino Mega 2560",
          "Using an Uno-style shield with the Mega 2560",
          "Looking at the Mega 2560 multiple serial ports",
          "Restoring the bootloader with the Atmel-ICE programmer",
          "Conclusion",
          "Test your Arduino Mega 2560 knowledge"
        ],
        "Arduino Due": [
          "Introduction",
          "Introduction to the Arduino Due",
          "Playing with the native USB port and the mouse library",
          "Using an Uno-style shield with the Due",
          "Looking at the Due's dual Digital to Analog outputs",
          "Power consumptions: comparing the Due against the Mega 2560",
          "Debugging on the Due with the Atmel-ICE debugger",
          "Conclusion",
          "Test your Arduino Due knowledge"
        ],
        "Arduino Galileo Gen 2": [
          "Introduction",
          "An introduction to Galileo Gen 2.",
          "Setup and first boot for Galileo Gen 2",
          "Setting up the full Yocto Linux on the Galileo",
          "Using the Ethernet port",
          "Using the SD card module",
          "Using the Wifi mPCI module",
          "Accessing the GPIOs from Linux",
          "Using an I2C LCD screen with the Galileo Gen 2",
          "Using an SPI color OLED display with the Galileo Gen 2",
          "Conclusion",
          "Test your Arduino Galileo Gen 2 knowledge"
        ],
        "Atmel Studio and debugging": [
          "Introduction",
          "Introduction to Atmel Studio",
          "Installing Atmel Studio",
          "A demonstration of debugging in Atmel Studio, Part 1",
          "A demonstration of debugging in Atmel Studio, Part 2",
          "How to restore the bootloader overwritten by Atmel Studio",
          "Conclusion",
          "Test your Atmel Studio knowledge"
        ],
        "Playing with Temboo": [
          "Introduction",
          "What is Temboo?",
          "Creating your first Choreo: setup Google Spreadsheets",
          "Creating your first Choreo: configure and upload",
          "Create an email Choreo",
          "Combine Choreos for practical workflows",
          "Choreos and output triggers",
          "Conclusion",
          "Test your Temboo knowledge"
        ],
        "Processing": [
          "Introduction",
          "About Processing",
          "Setup, quick demo, and resources",
          "Processing, Firmata and Arduino",
          "Visualise sensor data from an Arduino 101",
          "Conclusion",
          "Test your Processing knowledge"
        ],
        "Debugging with OpenOCD and GDB": [
          "Introduction",
          "OpenOCD and GDB: An introduction",
          "Setting up and starting OpenOCD and GDB",
          "A debugging session demonstration",
          "Conclusion",
          "Test your OpenOCD and GDB knowledge"
        ]
      },
      "requirements": [
        "A basic working knowledge of the Arduino Uno is required.",
        "Having at least some of the boards and tools described in this course is optional. You can take the course first, and then decide which board to purchase for your next project",
        "All of the software tools presented in this course are free."
      ],
      "description": "In Advanced Arduino Boards and Tools, I take you on a tour of some of the best technology that the Arduino ecosystem has to offer. This course will contain more than 8 hours of video, presented in over 50 lectures.\nThe Arduino Uno is awesome: rugged, easy to use, low cost, configurable, open source. But sooner or later, you will feel that it is not enough for your projects. Not enough inputs and outputs. Not enough speed. Not enough memory. Not enough communications options. The list goes on.\nThe Arduino ecosystem has you covered. There are more powerful alternatives to the Arduino Uno. You can leverage your existing equipment and components, and especially the time and effort investment that you have made to the Arduino, and adopt a more powerful and specialised Arduinos for your next project.\nIn this course, I present some of the best currently available advanced Arduino boards. I try to help you understand what is special about each one, how you can use them in your projects, and what to look out for when you migrate from the Arduino Uno.\nOf course, advanced Arduino projects depend on software, as well as on hardware. Advanced projects need advanced tools! In this course, I also have this covered. Learn about advanced debugging and editing tools, cloud-based automation, and Arduino-PC collaboration.\nIn this course, I cover these advanced Arduino boards:\nArduino Mega 2560\nArduino Due\nArduino 101\nArduino Zero\nArduino Galileo Gen 2\nFor each board, I discuss the features that distinguish them apart from other Arduino (their \"special powers\"). I demonstrate these features through experimentation.\nI also cover these tools:\nAtmega Studio, an advanced editor and debugger\nAtmega Atmel-ICE, a debugger and programmer device\nTemboo, a cloud automation platform for the Internet of Things\nProcessing, a language and framework for creating desktop applications that inter-operate with the Arduino\nAll demo sketches are available for download from Github, so you will not need to do much typing.\nTo make the most of this course, you should already have some working experience with a basic Arduino board, like the Uno. If you are just starting now, I suggest that you consider enrolling to Arduino Step by Step, and working through the project in Beginning Arduino.\nYou do not need to own one of these boards to take advantage of the materials in this course. You can use this course as a reference guide to understanding each board's benefits and disadvantages before you choose one for your next project.\nStart learning about Advanced Arduino Boards and Tools now!",
      "target_audience": [
        "This course will benefit the most students who already have at least a basic working experience with the Arduino Uno",
        "Students who are looking to upgrade from the Arduino Uno, but don't know which board option is best for their next project",
        "Students who are curious about Internet of Things platforms, like Temboo",
        "Students who are curious about the tools used in more complicated Arduino projects, like editors and debuggers",
        "If you have never worked with the Arduino before, it would be best if you took one of my beginner Arduino courses first"
      ]
    },
    {
      "title": "Fundamentals of Verification and System Verilog",
      "url": "https://www.udemy.com/course/fundamentals-of-verification-and-system-verilog/",
      "bio": "Simple course for students and engineers who wants to learn concepts of verification and basic SystemVerilog Constructs",
      "objectives": [
        "Significance of verification",
        "Verification options, methodologies, approaches and plan",
        "Examples to practice on verification tool EDA Playground",
        "Testbench Fundamentals",
        "Writing your SystemVerilog code",
        "Various SystemVerilog Data Types including User Defined Data Types",
        "Procedural Statements",
        "Interface Concepts"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Course and Typical VLSI Design Flow",
          "What is need of verification?",
          "What is verification?",
          "Technology challenges",
          "Verification technology options",
          "Verification methodology and approaches",
          "The verification plan",
          "Quick test on concepts learned in this session",
          "Conclusion"
        ],
        "Testbench Fundamentals": [
          "Design and Testbench",
          "Basic Testbench Functionality",
          "What is Directed and Random Testing",
          "Layered Testbench",
          "Verification Languages",
          "Why SystemVerilog?",
          "Tool Support for SystemVerilog",
          "First SystemVerilog Program",
          "Operators and Built-in Functions",
          "Quick test on concepts learned in this session",
          "Conclusion"
        ],
        "SystemVerilog Data Types": [
          "The Logic Type",
          "Fixed Size Array",
          "Packed and Unpacked Arrays",
          "Dynamic Arrays",
          "Queues",
          "Associative Arrays",
          "Array Methods",
          "Choosing a Storage Type",
          "Quick test on concepts learned in this session",
          "Conclusion"
        ],
        "SystemVerilog Data Types Continued": [
          "User Defined Data Types",
          "Packages",
          "Type Conversion",
          "Enumerations",
          "Strings",
          "Time Datatype",
          "Quick test on concepts learned in this session",
          "Conclusion"
        ],
        "Procedural Statements in SystemVerilog": [
          "Continous and Procedural Assignments",
          "BLocking and Non-blocking Assignments",
          "Flow Control and Looping Statements",
          "Functions in SystemVerilog",
          "Tasks in SystemVerilog",
          "Local Data Storage and Variable Initialization in SystemVerilog",
          "Quick test on concepts learned in this session",
          "Conclusion"
        ],
        "Interface in SystemVerilog": [
          "Need to Create an Interface",
          "How to Create an Interface",
          "Functions in an Interface",
          "Clocking Block",
          "Program Block",
          "Advanced Interfaces using Cross Module Reference",
          "Quick test on concepts learned in this session",
          "Conclusion"
        ],
        "Summary and Future Topics": [
          "Learnings from this course and Popular Interview Questions"
        ]
      },
      "requirements": [
        "Verilog programming and fundamentals of FPGA programming are supposed to be already known",
        "Familiarity with C and C++ will be an added advantage",
        "Knowledge of digital circuit design"
      ],
      "description": "This course is introduced for learners who wants to learn fundamental concepts of Verification and basic concepts of SystemVerilog. It is assumed that learner is aware of the Verilog hardware description language. In this course, learners will be introduced to why verification is to be done and what is verification. One of the verification language SystemVerilog constructs will be introduced.  Layered testbench and its various components will be discussed. Learner's will also be introduced to various data types, procedural control statements and interfaces in SystemVerilog. Course is being taught with various examples and learner can monitor self-progress by attempting quiz and assignment in each section.",
      "target_audience": [
        "This course is for students and engineers who wants to learn basics of verification and basic constructs of SystemVerilog",
        "Verification engineers who wants to refresh concepts of SystemVerilog",
        "Job seekers in verification industry"
      ]
    },
    {
      "title": "Make Arduino Board at Home: Step by Step Guide",
      "url": "https://www.udemy.com/course/make-your-own-arduino-board-at-home-step-by-step-guide/",
      "bio": "This guild will help you know Arduino internal components and how to make your own board at home step by step",
      "objectives": [
        "Make your own Arduino Board",
        "Bootload Your Arduino",
        "Know the actual brain of an Arduino and how it function"
      ],
      "course_content": {},
      "requirements": [
        "Basic experience in Electronics",
        "A Will to apply, not just watch",
        "Anyone interested in Making Arduino Board"
      ],
      "description": ">>> This tutorial shows you how to build an Arduino compatible breadboard with an Atmel AVR microcontroller. It will take you step by step to understand each component inside the Arduino board, what it does, and how to wire it up. You will learn how to make an Arduino board at home in no time <<<\nWhy you should take this course?\nThis guide will help you understand Arduino internal components and how to make your own board at home step by step.\nThis course is a great introduction to Arduino boards, for beginners and experts alike!\nYou will learn the main steps of making a DIY board: including finding all necessary parts, configuring the circuit, assembling the circuit on a breadboard, and flashing the code.\nYou will also learn about common mistakes that people make when they first start out with electronics and how to correct those mistakes.\nThis course includes hours of video content.\nThis course is project-based, where you'll not only learn about Arduino but also how to work collaboratively with others on a project.\nYou will learn how to competently use tools.\nContinual Updates <<<\nMore than 500 STUDENTS!!! THANK YOU!!!\nWhat students are saying:\nUmer Farooq says, \"That was an amazing experience to learn from the Educational Engineering Team.\"\nPhilip Gregson says, \"It was an informative course, was helpful and supplied me with the information I was looking for.\"\nWelcome to the Make Arduino Board course.\nYou will know the actual brain in the Arduino board, what you can do with it, and how to interface it with your own PC to send codes freely. You will no longer burn a code to a board that you know nothing about its hardware.\nAfter this course, you will be able to make your own board on a breadboard or PCB. The choice is yours, as all connections are explained in detail.\nThe Arduino is an open-source electronics platform based on easy-to-use hardware and software. Sensing the environment by receiving inputs from many sensors, Arduino affects its surroundings by controlling lights, motors, and a number of other accessories. It's for anyone making interactive hardware projects, and in this course, we will make it easy for you to make your very own Arduino board instead of purchasing it.\nYou can count on these results:\nCreate your own schematic for Arduino Board.\nStart making your PCB based on the schematic.\nKnow the right steps to make a perfect PCB.\nLearn what each component does in the circuit and get a list of components.\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading team in the Microcontroller Industry, with over 13 Years of Experience in teaching and doing practical projects.\nWe strive to put all our hands-on experience into these courses. Instead of superficial knowledge, we go into the depth of the topic and give you the exact step-by-step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the years, we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ courses on Udemy.\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million Views, 20k + Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their careers.\nAshraf’s core skill is explaining difficult concepts in a step-by-step easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, in particular for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World\nWhat you will learn\nHow to create your own Arduino board.\nUnderstanding each component inside the Arduino board.\nSteps to find all necessary parts and configure the circuit.\nAssembling the circuit on a breadboard and flashing the code.\nCommon mistakes in electronics and how to correct them.\nHow to competently use tools for electronics projects.\nWho is this course for\nElectronics and Arduino enthusiasts.\nStudents and professionals looking to expand their skills.\nHobbyists interested in DIY electronics projects.\nAnyone interested in creating their own Arduino board.\nRequirements\nBasic knowledge of electronics and Arduino.\nA computer with internet access.\nEnthusiasm to learn and build.",
      "target_audience": [
        "Electronics Geeks",
        "Arduino Geeks",
        "Anyone Interested in Learning New Things about Arduino",
        "Anyone Interested in Knowing how Arduino board actually works",
        "Anyone Interested in Knowing what each component inside Arduino Board does"
      ]
    },
    {
      "title": "MQTT Masterclass",
      "url": "https://www.udemy.com/course/mqtt-masterclass/",
      "bio": "Learn the A to Z of the MQTT Protocol, and develop sharp intuition on using and implementing all the MQTT Features",
      "objectives": [
        "Learn about the basics of MQTT",
        "In-depth learning and implementation of all the MQTT Control packets",
        "Learn and implement Cloud MQTT Integration with IBM Cloud",
        "Learn and implement Topics, Topic Filtering and Wildcards using an Office Monitoring System Project",
        "Learn and implement Quality of Service Levels using an Instant Messaging Application Project",
        "Learn and implement session persistence using the Instant Messaging Application Project",
        "Learn and implement Retained message using the GPS Asset Tracking Project",
        "Learn and implement the Last Will & Testament Feature using the Office Monitoring System Project",
        "Learn and implement the Keep Alive Feature using the GPS Asset Tracking Project",
        "Learn and implement authentication, authorization and payload encryption using the GPS Asset Tracking Project",
        "Learn in-depth about the different features, use cases, and challenges of MQTT V5"
      ],
      "course_content": {
        "Getting Started with the MQ Telemetry Transport Protocol": [
          "Introduction to the course",
          "MQ Telemetry Transport: The Origin Story",
          "How does MQTT work?",
          "Overview of MQTT Methods, Models & Features",
          "Why use MQTT over other Protocols?",
          "Assignment 1"
        ],
        "In-depth Understanding of MQTT Packets": [
          "The MQTT Control Packet Format",
          "Overview of Control Packets and their functions",
          "Setting up your 1st MQTT Project: Project 1",
          "Working Principle & Interfacing of the Actuator and Sensor",
          "Configuration & Coding of the MQTT Clients",
          "MQTT Control Packet Analysis: Part 1",
          "MQTT Control Packet Analysis: Part 2",
          "Assignment 2"
        ],
        "Cloud MQTT Integration with IBM Cloud": [
          "Setting up the IBM Cloud MQTT",
          "IBM Cloud GUI Change Update",
          "Integrating IBM Cloud to 1st MQTT Project",
          "Project Testing & MQTT Packet Capture",
          "Packet Analysis with Cloud MQTT Implementation",
          "Assignment 3"
        ],
        "Topics, Topic Filtering & Wildcards": [
          "What are topics in MQTT & What is meant by Topic Filtering?",
          "Office Monitoring System using MQTT: Project 2 Setup",
          "Office Monitoring System using MQTT: Project 2 Setup Part 2",
          "Wildcards: How to subscribe to Multiple Topics Simultaneously?",
          "Implementation & Analysis for Topics, Topic Filtering & Wildcards in MQTT",
          "Assignment 4"
        ],
        "Quality Of Service Levels in MQTT": [
          "What is Quality of Service?",
          "Instant Messaging Application with MQTT: Project 3 Setup",
          "QoS 0 Implementation with Packet Analysis",
          "QoS 1 & QoS 2 Implementation with Packet Analysis",
          "Assignment 5"
        ],
        "Persistence in MQTT": [
          "What is Session Persistence in MQTT",
          "FAQ & Use Cases of Session Persistence",
          "Implementation & Analysis of Persistent Session in Project 3 Part 1",
          "Implementation & Analysis of Persistent Session in Project 3 Part 2",
          "Assignment 6"
        ],
        "Retained Messages in MQTT": [
          "What are Retained Messages",
          "GPS Asset Tracking Using MQTT: Project 4 Setup",
          "GPS Asset Tracking Using MQTT: Project 4 Client Code",
          "GPS Asset Tracking Using MQTT: Project 4 Implementation & Analysis",
          "Assignment 7"
        ],
        "Last Will & Testament in MQTT": [
          "What is the Last Will & Testament Feature in MQTT?",
          "Implementation of LWT in Project 2: Setup & Client Code",
          "Analysis of LWT in Project 2: Project Implementation",
          "Analysis of LWT in Project 2: Packet Analysis",
          "Assignment 8"
        ],
        "Keep Alive in MQTT": [
          "What is Keep-Alive in MQTT?",
          "Understanding Keep Alive using Project 4: Setup",
          "Understanding Keep Alive using Project 4: Implementation",
          "Understanding Keep Alive using Project 4: Packet Analysis",
          "Assignment 9"
        ],
        "Security in MQTT": [
          "Security Threats for MQTT",
          "Project 4 Security - Authentication: Implementation & Analysis",
          "Project 4 Security - Authorization with TLS/SSL: Implementation & Analysis",
          "Project 4 Security - Payload Encryption: Implementation & Analysis Part 1",
          "Project 4 Security - Payload Encryption: Implementation & Analysis Part 2",
          "Assignment 10"
        ]
      },
      "requirements": [
        "You should have experience working with electronics",
        "You should have worked with the Raspberry Pi 4 and the ESP32",
        "Basic knowledge of Linux, Python, and Arduino IDE"
      ],
      "description": "JUNE 2022 Update:\nIBM Cloud GUI Change Update\nBill of Materials Link Updated\nHello learners, Welcome to MAKERDEMY's \"MQTT Masterclass\" course. This is an advanced level course on the Most Popular IoT Protocol called MQTT.\nIf you are a developer or an engineer who wants to get an in-depth knowledge of all the concepts of the MQTT Protocol or if you want to unlock the full potential of your existing MQTT system, this course is right for you. To get the maximum value out of this course, you should have a functional knowledge of electronics and should have good experience with Raspberry Pi, ESP32, Python, and Linux.\nThis course will teach you in-depth all the concepts of MQTT like Topic Filtering, Wildcards, Quality of Service, Session Persistence, Last Will and Testament, Retained messages, Keep Alive, and Security Implementation, by implementing handpicked projects using the Raspberry Pi 4, ESP32, and IBM Cloud IoT Platform. We will also cover in-depth the features of MQTT V5. By the end of the course, you will intuitively understand what features of MQTT will allow you to reach your goals in your existing MQTT system or the one you are currently building. Also, if you completely finish the course, you will win bonus content covering MQTT over Websockets and MQTT-SN.\nThroughout the course, we have provided a curated collection of original resources. These resources include links to documents for in-depth learning, blog links, videos, and more. Furthermore, our Instructor team has an excellent track record of answering your queries and clearing your doubts. Thus, they will be ready to answer any of your course-related questions.\nSo, what are you waiting for?! Come, join me in this course. I'm looking forward to being your instructor and make you a Master of the MQTT Protocol.",
      "target_audience": [
        "Any developer or an engineer who wants to get an in-depth knowledge of all the concepts of the MQTT Protocol",
        "Anyone, who is trying to unlock the full potential of there existing MQTT system, by gaining an in-depth understanding of the MQTT"
      ]
    },
    {
      "title": "Mastering STM32 microcontrollers",
      "url": "https://www.udemy.com/course/mastering-stm32f407-microcontrollers/",
      "bio": "Developing applications exploring many STM32F4 peripherals",
      "objectives": [
        "Explore the features of the STM32F407 microcontrollers by knowing its electrical characteristics, its main registers and applications",
        "Explore many resources of the STM32CubeIDE as well as software libraries, HAL API, and a bunch of middlewares to accelarate the development task",
        "Provide practical skills for diagnosing common programming failures through the use of STM32CubeIDE embeeded debugger tools, and STM32CubeMonitor",
        "Develop applications integrating microcontroller peripherals such as ADC, USART, USB, TIM, RTC, SPI, GPIO, IWDG, etc",
        "Develop solutions for Graphic Display and Touch controller, uSD Cards, Ethernet interface and much more."
      ],
      "course_content": {},
      "requirements": [
        "STM32F407 Development board + aditional peripheral boards and display"
      ],
      "description": "Programming course in C language for ARM Cortex-M4 microcontrollers, based on the microcontroller STM32F407.\nExplore the features of the STM32F407 microcontrollers by knowing its electrical characteristics, its main registers and applications.\nExplore many resources of the STM32CubeIDE as well as software libraries, HAL API, and a bunch of middlewares to accelarate the development task.\nProvide practical skills for diagnosing common programming failures through the use of STM32CubeIDE embeeded debugger tools, or even by monitoring and terminal tools as STM32CubeMonitor.\nDevelop applications integrating microcontroller peripherals such as ADC, USART, USB, TIM, RTC, SPI, GPIO, IWDG, etc. With those peripherals and their software resources, develop solutions for Graphic Display and Touch controller, uSD Cards, Ethernet interface and much more.\nCommon hardware resources avaluable in the market as STM32F407 based development boards, Touch LCD Display based on ILI9341 and XPT2046,  LAN8720 Ethernet expansion board, uSD card, USB to serial adapter, ST-Link V2 Programmer, Potentiometer and Dupont FxF Jumpers are applied in this course.\nComplementary documentation as Application Notes, User Manuals, Reference Manuals, Datasheets, Firmware Packages and much more, can be downloaded in their last version directly form ST website. Software like STM32CubeIDE, STM32CubeMonitor, USB HID Demonstrator, can be downloaded directly from ST website too.",
      "target_audience": [
        "Programmers",
        "Engineers",
        "Technicians",
        "Electronic hobbyists"
      ]
    },
    {
      "title": "Mastering MQTT",
      "url": "https://www.udemy.com/course/mastering-mqtt/",
      "bio": "Learn about the MQTT protocol by developing a project with NodeMCU/ESP8266 and Raspberry Pi",
      "objectives": [
        "Understand the Message Queuing Telemetry Transport IoT protocol",
        "You will learn the features of MQTT with the help of examples",
        "Be productive with the Arduino IDE, write, compile and upload sketches, install libraries",
        "You will learn to setup Mosquitto MQTT Broker",
        "Understand the utilities of the ESP8266 chip",
        "You will learn to use ESP8266, MQTT and Raspberry pi to publish DHT sensor measurements",
        "You will learn to use ESP8266, MQTT to control LED from a Raspberry pi web server",
        "You will learn to Develop a Garbage monitoring system using Ultrasonic sensor, ESP8266, Raspberry pi and MQTT"
      ],
      "course_content": {
        "About the Course": [
          "Introduction",
          "Important Update",
          "Goals of this course",
          "Prerequisites"
        ],
        "MQTT fundamentals": [
          "Description",
          "Internet of Things",
          "A view on Security – IoT",
          "Why MQTT ?",
          "What is MQTT?",
          "Terminologies used in MQTT",
          "Features of MQTT",
          "Additional: Message Frame Format"
        ],
        "Mosquitto MQTT broker": [
          "Description",
          "Mosquitto MQTT: Utility and Features"
        ],
        "Mosquitto broker on Raspberry pi": [
          "Description",
          "Hardware and software requirements",
          "Changes in setting static IP on Raspberry Pi",
          "Setting up Raspberry pi",
          "Installation",
          "Installation of Mosquitto on Raspbian Stretch",
          "Testing of MOSQUITTO BROKER",
          "Adding Authentication to Mosquitto MQTT"
        ],
        "Mosquitto broker on Windows Laptop": [
          "Description",
          "Installation",
          "Setting up of mosquitto broker",
          "Testing of Mosquitto Broker"
        ],
        "MQTT Client tool": [
          "Description",
          "What is MQTT Client tool",
          "Mqtt.fx tool",
          "MyMQTT tool"
        ],
        "Working of MQTT data transfer protocol": [
          "Description",
          "Initial setup",
          "EXAMPLE 1: Broker-Publisher is Windows OS subscriber is MQTT.fx client tool",
          "EXAMPLE 2: Broker-Publisher is Windows OS subscriber is MyMQTT client tool",
          "EXAMPLE 3: Broker-Raspberry pi 3, Publisher-MyMQTT tool and Mqtt.fx-subscriber",
          "EXAMPLE 4: QOS and Retained message",
          "EXAMPLE 5: Wildcards Implementation"
        ],
        "All about ESP8266": [
          "Description",
          "Introduction to ESP8266 12E",
          "Setting up ESP8266 12E",
          "Circuit Diagram for NodeMCU ESP8266",
          "Testing ESP8266",
          "Programming ESP8266",
          "Checking ESP8266 WiFi connection"
        ],
        "How Raspberry pi publish-subscribe messages through ESP8266": [
          "Description",
          "Introduction",
          "Client end - ESP8266 module",
          "Installing required files on raspberry pi-server end",
          "Step By Step Procedure for the Project",
          "Real time demo"
        ],
        "Swachh Garbage system": [
          "Description",
          "Introduction",
          "Client end - ESP8266 module",
          "Creating python script - server end",
          "Real time demo"
        ]
      },
      "requirements": [
        "No pre-requisites are required for the first few sections.",
        "Essential tools: a mini breadboard, jumper wires, a multimeter, a soldering iron and solder, wire cutter",
        "Essential modules: 1 x Raspberry pi 3 , 1 x ESP8266 12E module, 1 x Ultrasonic sensor HCSR-04, 1x DHT11 temperature and Humidity sensor"
      ],
      "description": "October 2020 Update\nAdded a Bill Of Materials PDF and an Update Video\nJune 2019 Update\nIncluded Documentation to implement Secure MQTT Authentication in Mosquitto.\nIncluded Circuit Diagrams of Projects with NodeMCU ESP8266 Board.\nIncluded Standard Operating Procedure for doing the projects in NodeMCU ESP8266 Board.\nUpdated all Software download links, codes and added links to resources.\nUpdated all Raspberry Pi commands with updated working commands.\nHello, learners! Greetings from Makerdemy. In this course, you will learn about the MQTT Data transfer protocol with the help of Examples and Projects.\nThe course is a beginner level course on MQTT. The course takes off with the introduction of MQTT and sheds light on the Features that define the purpose of the protocol. Then the course explains how MQTT benefits the field of Internet of Thing.Next, the course moves on to the MOSQUITTO MQTT BROKER which is one of the standard MQTT broker tool available and teaches how to install and test in on Raspberry pi 3 and Laptop running Windows OS. The course then introduces the MQTT Client tools that help to Publish and Subscribe messages effectively.\nThe course then introduces the ESP8266 which is a low-cost WiFi module that can be programmed using the Arduino IDE. Then the course demonstrates two projects that use MQTT protocol with the ESP8266 12E module.\nProject 1: In this project, you will learn how to Remotely control LED and Publish readings from temperature and humidity sensor using Raspberry Pi, ESP8266 and MQTT Protocol\nProject 2: In this project, you will learn about the Swachh garbage system where an ultrasonic sensor is used along with ESP8266 and Raspberry Pi to monitor the percentage of the garbage-filled in the bins.\nThe projects are designed to showcase the potential use cases of the MQTT protocol and the ESP8266 module such that you can build your projects.\nWhile doing your projects and going through the course, you can feel free to ask your doubts on the Udemy discussion forum. You will get a response within one working day. Thank you and have a nice time learning.",
      "target_audience": [
        "Anyone who wants to learn about the MQTT protocol",
        "Anyone who wants to learn to work with ESP8266 and Sensors",
        "Anyone who wants to learn to build Wireless standalone monitoring system"
      ]
    },
    {
      "title": "Arduino Masterclass For Beginners: AI, Robotics & ChatGPT",
      "url": "https://www.udemy.com/course/arduino-masterclass/",
      "bio": "Learn Arduino, Electronics, And Robotics By Building AI-Powered Projects, Arduino Programming & Embedded Systems, ESP32.",
      "objectives": [
        "Understand and build circuits using Arduino UNO and ESP32 microcontrollers, including sensors, motors, and other electronic components.",
        "Write and upload Arduino code from scratch, mastering key programming concepts like loops, conditionals, and functions.",
        "Create real-world interactive projects, such as robots, games, dashboards, and smart devices that integrate AI and APIs like ChatGPT.",
        "Design and troubleshoot embedded systems, gaining the confidence to develop and expand your own Arduino-based inventions independently."
      ],
      "course_content": {
        "Arduino Foundations: From Basics to Prototyping": [
          "What is Arduino?",
          "The Kit We Use (Buy this to follow along)",
          "The Arduino UNO",
          "The Arduino IDE",
          "Using a Breadboard: Using Digital Output Pins",
          "Using Analog Output Pins",
          "Using Digital Input Pins",
          "Using Analog Input Pins",
          "Hardware Communication Basics",
          "Arduino Shields and Modules",
          "Using an external power supply",
          "Multimeter Basics",
          "Using a Protoboard"
        ],
        "Arduino Programming Basics: From Setup to Libraries": [
          "Understanding Arduino Program Structure and History",
          "Variables in Arduino",
          "Control Structures: The If Statement",
          "Control Structures: The While Loop",
          "Control Structures: The For Loop",
          "Control Structures: The Switch Statement",
          "Data Structures: The Array",
          "Functions in Arduino",
          "Using Libraries in Arduino",
          "Going Further: Using Documentation"
        ],
        "Arduino Robotics: Your First Project": [
          "Project Overview",
          "Assembling the hardware",
          "Controlling the motors",
          "Adding remote control",
          "Adding remote control - PART 2",
          "Adding an Ultrasonic Sensor",
          "Adding an Ultrasonic Sensor - PART 2",
          "Adding Infrared reflectance sensors",
          "Adding Infrared reflectance sensors - PART 2"
        ],
        "Arduino and Processing: Data Visualization and Control": [
          "What is Processing",
          "Sending Data from Arduino to Processing",
          "Sending Data from Arduino to Processing - PART 2",
          "Sending Data from Processing to Arduino",
          "Sending Data from Processing to Arduino - PART 2",
          "Creating a Control Interface in Processing",
          "Creating a Control Interface in Processing - PART 2",
          "Finishing the Interface, Adding Two-Way Communication",
          "Finishing the Interface, Adding Two-Way Communication - PART 2"
        ],
        "IoT Basics: Introduction with ESP32": [
          "1 - What is the Internet of Things",
          "The ESP32 Board",
          "Connecting to WIFI, Creating a Web Server",
          "Connecting to WIFI, Creating a Web Server - PART 2",
          "Controlling the ESP32 Over Local WIFI",
          "Controlling the ESP32 Over Local WIFI - PART 2",
          "Captive Portal Control and WiFi Configuration with the ESP32",
          "Getting Started with Over the Air Updates"
        ],
        "Web Interfaces with Arduino: HTML, CSS, and JS": [
          "Introduction",
          "Intro to HTML",
          "Intro to CSS",
          "Intro to CSS - PART 2",
          "Intro to JavaScript",
          "Intro to JavaScript - PART 2",
          "Hosting on the ESP32",
          "Hosting on the ESP32 - PART 2",
          "Hosting on the ESP32 - PART 3",
          "Hosting on the ESP32 - PART 4"
        ],
        "ESP32 Car Control: A Step-by-Step Guide": [
          "Introduction",
          "Connecting the ESP32 to the hardware",
          "Connecting the ESP32 to the hardware - PART 2",
          "Developing a basic control interface for the car",
          "Developing a basic control interface for the car - PART 2",
          "Improving and completing the control interface",
          "Improving and completing the control interface - PART 2"
        ],
        "Mastering APIs with Arduino and ESP32": [
          "What is an API",
          "Using a Weather API with the ESP32",
          "Displaying the Weather with the ESP32",
          "Intro to the ChatGPT API",
          "The ChatGPT API on the ESP32",
          "Recreating the ChatGPT interface with the ESP32",
          "Creating a Smart Weather Assistant",
          "Implementing API Endpoints for the Assistant"
        ],
        "ESP32 AI Assistant and Advanced Controls": [
          "Building the ESP32 AI assistant visual interface",
          "Completing the ESP32 AI assistant visual interface",
          "Completing the ESP32 AI assistant visual interface - PART 2",
          "Combining the AI assistant and car control interfaces",
          "Adding car control functionality to the ESP32 assistant backend",
          "Developing a complex car control API with ChatGPT",
          "Moving the car with ChatGPT",
          "ChatGPT control demo"
        ],
        "Building Interactive Games with ESP32": [
          "Introduction",
          "Building the Circuit",
          "Creating a Basic Web Game Design",
          "Creating a Basic Web Game Design - PART 2",
          "Adding Control to the Game",
          "Adding Control to the Game -PART 2",
          "Hosting the Game on the ESP32",
          "Integrating Physical Controls",
          "Integrating Physical Outputs"
        ]
      },
      "requirements": [
        "No prior experience required — this course is designed for total beginners.",
        "A computer with internet access to run the Arduino IDE and access course content.",
        "You’ll need an Arduino UNO and ESP32 board, a breadboard, some jumper wires, and a few basic electronic components (we’ll give you a full list)"
      ],
      "description": "Ready to dive into the world of Arduino, electronics, and AI - without any prior experience?\nYou're in the right place.\n\n\nThis brand-new, beginner-friendly masterclass was built from the ground up for today’s world - where AI meets robotics, and anyone with an idea can bring it to life with just a few components and a spark of curiosity.\n\n\nWhether you’re an aspiring entrepreneur dreaming of building smart products, a tech enthusiast eager to learn real-world skills, or someone who’s just curious about how things work, this course was made for you.\n\n\nWe’ll start from scratch:\nYou’ll get a full introduction to Arduino hardware and programming, electronics fundamentals, robotics, and embedded systems using Arduino UNO and ESP32. You’ll wire up your first breadboard, write your first lines of Arduino code, and bring your first robot to life - step by step, with clear guidance every step of the way.\n\n\nBut this isn’t just another Arduino course.\nYou’ll go beyond blinking LEDs and controlling motors - into the future.\nYou’ll learn how to integrate AI into your projects, use real APIs like ChatGPT, build web dashboards, create interactive games, and even develop a voice-powered assistant with ESP32.\n\n\nWe’ve made it fun. We’ve made it hands-on. And we’ve made it totally beginner-proof.\nBy the end, you'll have a portfolio of impressive projects under your belt - and the skills to keep building smarter, more advanced things on your own.\n\n\nSo whether you're looking to launch a product, land a job, or just have fun learning something new, this course will give you the confidence and capabilities to make it happen.\n\n\nLet’s build something amazing - together.",
      "target_audience": [
        "Absolute beginners who want to learn Arduino, electronics, and coding with no prior experience.",
        "Aspiring makers, inventors, and entrepreneurs who want to prototype smart devices or tech products.",
        "Tech enthusiasts and hobbyists curious about robotics, embedded systems, and how AI can be integrated into real-world projects.",
        "Students and professionals looking to build a practical portfolio of projects for school, work, or fun."
      ]
    },
    {
      "title": "Verilog Programming with Xilinx ISE Tool & FPGA",
      "url": "https://www.udemy.com/course/verilog-hdl-programming-for-beginners-with-xilinx-ise-design/",
      "bio": "In 4.5 hours you will: Create VHDL Design, Write Simulation Testbenches,Implement Design with Xilinx ISE Tool & FPGA.",
      "objectives": [
        "Familiar with Verilog HDL Syntax and Semantics.",
        "Use fundamental Verilog constructs to create simple designs.",
        "Creating Synthesizable designs in Verilog HDL",
        "To Create Simulation testbench on Verilog and generating waveform's.",
        "Use of Conditional Statements as If, Case & Loops with Always block for designing different combinational and sequential components.",
        "Use Xilinx ISE Design Suit (license of ISE is Free) for FPGA/ASIC based design in Verilog.",
        "Design with structural design methodology on Verilog.",
        "Create a PROM File with ISE and Program PROM of FPGA"
      ],
      "course_content": {
        "Section 1 Introduction and Basic Design with Verilog": [
          "How to download and install Xilinx ISE Design Suit & get free License",
          "Introduction and Basic Design with Verilog HDL",
          "Multiple Choice Question",
          "Multiple Choice Question related with Module,Input and Output declaration",
          "Example of How to Write Verilog Program for Basic Logic Gate:AND in Xilinx ISE",
          "Operators , Data Type and Basic Syntax",
          "Design Simulation and Implementation of NAND Gate on ISE and Spartan 3E FPGA",
          "Demo-NAND Gate Implementation on Spartan 3E"
        ],
        "Section 2 Simulating Verilog Code with Testbench/Testfixture": [
          "Simulating Verilog Code with Testfixture: Simulating Logic Gate on ISE",
          "Introduction to Simulation and Testbench MCQ's",
          "DUT MCQ's"
        ],
        "Section 3 Conditional Statement in Verilog (4:1 MUX Design and Simulation)": [
          "Conditional Statements in Verilog HDL (4:1 MUX Design & Simulation)",
          "Quiz on the concept of always block",
          "Quiz on IF statement",
          "Quiz on Case Statement"
        ],
        "Section 4 Combinational Circuit Design with Verilog (Full Adder/Encoder Design)": [
          "Combinational Circuit Design in Verilog (Full Adder Design & Simulation) II",
          "Section 4 2 Implementation on Full Adder on Spartan 3E FPGA",
          "Demo: Full Adder Implementation on Spartan 3E FPGA",
          "Basic Combinaitonal Circuit concepts",
          "Quiz on Combination of gate design",
          "Quiz on Decoder Design in Verilog",
          "Encoder (16:4) Design and Simulation in Verilog with ISE Design Suit"
        ],
        "Section 5 Sequential Circuit Design with Verilog (Flip-Flop and FSM Design)": [
          "Sequential Circuits Design in Verilog (Flip-Flop Design & Simulation)",
          "Quiz on Latch Design",
          "Quiz on Flipflop",
          "Quiz on Register Design in Verilog",
          "FSM Design in Verilog (State Machine: Sequence Detector Design and Simulation)",
          "Quiz on FSM Design"
        ],
        "Section 6 Structural Design with Verilog (Structural Design of 4 bit Full Adder)": [
          "Structural Design in Verilog (Designing of 4 bit Full Adder-F.A using 1 bit F.A)",
          "Structural Design Basics Quiz",
          "Structural Design : Module Integration Quiz"
        ],
        "8 bit ALU Design and Simulation on Verilog": [
          "8 bit ALU Design and Simulation on Verilog"
        ],
        "Section 7 Creating PROM File from ISE Design Suit and Uploading to FPGA": [
          "Section 7_1 How to Create PROM file and Upload on FPGA"
        ],
        "Verilog Programming Reference Guide from Digitronix Nepal": [
          "Verilog Reference Guide From Digitronix Nepal"
        ],
        "Summary: Verilog Programming": [
          "Lexical Conventions in Verilog",
          "Verilog Data Types, Directives & Dataflow Modeling",
          "Procedural Assignments in Verilog"
        ]
      },
      "requirements": [
        "Basic Idea of C Programming",
        "Familiarity with Digital Logic Design",
        "Hardware Design Basics",
        "Basic Idea of Logic Simulation"
      ],
      "description": ">>>> This is Crash Course on Verilog Programming which includes Verilog Basics to Advance Design <<<<\nThis Course of Verilog HDL Programming for Beginners is targeted for those enthusiasts and beginners who want to get idea of Verilog, Its programming methodology, Syntax, Operators, Always Block,Conditional Statements-Case/IF else, Writing Simulation Testbench etc. We have started this course from very basic to the designing combinational and sequential circuits (including Finite State Machine) Design.We have used Xilinx ISE Design suit in this course because of it's License is free from Xilinx (You just need to make a user account and follow: our Video Lecture on this Course \"How to Get free Xilinx ISE Design suit License\" ).\nWe have showed up you the implementation of Projects of ISE and Spartan 3E & Nexys 2 FPGA and there are some Demo of the implementation on Spartan 3E & Nexys 2FPGA. Finally we have Session on \"How to Create PROM File with ISE and Program PROM of Spartan 3E & Nexys 2 FPGA\".\nThe objective of this course is to explore verilog basics, how can project on Xilinx ISE be developed, how to synthesize the design, implement , how to analyse the RTL schematic and how to write constraint for the custom verilog project.\nSo you can practice this course on Xilinx ISE Design Suit or Altera Quartus Suit.",
      "target_audience": [
        "Electronics Engineering and Computer Science",
        "Electrical Engineering",
        "Computer Engineering",
        "Hardware Design with FPGA enthusiasts",
        "Digital Design with FPGA enthusiasts"
      ]
    },
    {
      "title": "Mastering Microcontroller Programming",
      "url": "https://www.udemy.com/course/microcontroller-programming/",
      "bio": "Learn Microcontroller Programming (8-bit AVR) to use Peripherals like GPIO, Timer, Interrupt, PWM, ADC, Serial UART etc.",
      "objectives": [
        "Embedded C Programing",
        "Microcontroller Architecture (8-bit AVR)",
        "Bare-metal Microcontroller Programming",
        "Setting up Atmel Studio 7 for C Programming & Debugging",
        "Learn to develop peripheral drivers GPIO, TIMER, INTERRUPT, ADC, Serial UART etc.",
        "Much more, Please See Curriculum for a Full Listing ............"
      ],
      "course_content": {
        "Introduction": [
          "AVR ATmega328",
          "Technical Specifications",
          "Select Development Board",
          "Pin Description of ATmega328"
        ],
        "Setup and Install Software": [
          "Download Atmel Studio7 IDE",
          "Setup Hardware for Programming",
          "Create Microcontroller Project"
        ],
        "Basics of Bit Manipulation": [
          "Number Systems",
          "Bitwise Operator",
          "Bit-Masking"
        ],
        "Control Digital Devices (LED, Switches, etc.)": [
          "Control GPIO as Output",
          "Control GPIO as Input"
        ],
        "Timer and Counters": [
          "Timers",
          "Programming Timers",
          "Use Timer Flag in Project"
        ],
        "Interrupts and ISR": [
          "Interrupts",
          "Types of Interrupts",
          "Use Timer Interrupt in Project"
        ],
        "Pulse Width Modulation": [
          "Introduction of PWM",
          "PWM: Modes of Operation",
          "Brightness Control of an LED"
        ],
        "Serial Communication: UART": [
          "Introduction of UART",
          "Install PuTTY Terminal",
          "Transmit Character Byte",
          "Receive Character Byte",
          "Send String to Serial Console (PC)"
        ],
        "Create Multiple File Project": [
          "Create Libraries and Use them as Project"
        ],
        "Analog to Digital Conversion (ADC)": [
          "Introduction of ADC",
          "Read Analog Temperature Sensor (LM35)",
          "Calculation for LM35 Temperature Sensor",
          "Read Multiple ADC Channels"
        ]
      },
      "requirements": [
        "Windows OS",
        "The prior knowledge of C Programming and basics of electronics could be added advantage but not mandatory"
      ],
      "description": "If you’re reading books of microcontroller programming, following different blogs and still feel stuck. Then you came to the right place, this microcontroller programming course designed around most popular 8-bit ATmega328 AVR Microcontroller. In this course, we will learn how to write C Programs for ATmega328 MCU. I’ve made complex concept easy to understand using quality content. It doesn’t matter if you’re new to microcontrollers or already know basics. I am sure you’ll enjoy learning with this course.\nShort Description:\nWe’ll begin our journey to explore microcontroller right from the basics like setting-up official Atmel Studio7 IDE, installing programming utilities and hooking up the circuits in easiest way. To keep the hardware part simple in the beginning, we will use ATmega328 chip on Arduino Uno. Believe me this will save our time at hardware side so that we can focus more on core microcontroller features through AVR C Programming. Later on, as the time rolls on we will use ATmega328 Xplained Mini evaluation kit to learn advance debugging techniques.\n\"The Biggest objective of this course is to help you build sound understanding of microcontroller architecture and peripheral registers in-order to use them while writing professional embedded systems software”\nWe will setup every circuit from scratch and write microcontroller firmware for it. We will spend enough time in the beginning to get basics right. This will save time in long run and make you feel confident working with Microcontroller Architecture and C Programming.\nLater on, we will be building mini projects to use LED, Switches, Analog and Digital Sensors (temperature/humidity/light Intensity/distance), IR Sensor, Relays and many more. These projects can be small yet very powerful to lay down strong foundation to use GPIO, Timer/Counter, Interrupt, PWM, ADC, Serial UART and other peripherals while developing embedded software and hardware.",
      "target_audience": [
        "Electronics, electrical, computer engineering graduates",
        "Anyone interested in learning Microcontroller Programming",
        "Students/Professionals who wish to take on career in Embedded Systems",
        "Arduino Users who want to be Professional Embedded Software Developer"
      ]
    },
    {
      "title": "Automotive - Over The Air Update [ OTA ]",
      "url": "https://www.udemy.com/course/automotive-over-the-air-update-ota/",
      "bio": "OTA , E\\E ,HPC, MQTT , Demo-Campaign mgmt,SDV levels,Software Defined vehicle, TCU,OTA cyber attacks,testing,Bootloader",
      "objectives": [
        "What is OTA",
        "SOTA vs FOTA",
        "Importance OF OTA",
        "Market analysis- By OEM , By country",
        "OTA architecture",
        "OEM backend",
        "Cloud providers(AWS , AZURE,IBM)",
        "Campaign management Demonstration",
        "MQTT in Automotive example and HTTPS",
        "OTA Manager",
        "UDS flashing, UDS over CAN , UDS over Ethernet",
        "DOIP and CAN TP demo",
        "OTA testing",
        "Tesla Usecase",
        "Fail safe strategy(Single bank, dual bank)",
        "OTA cyber attacks",
        "Bootloader, bootmanager",
        "SDV High level architecture",
        "SDL level 1 -5"
      ],
      "course_content": {
        "Introduction to OTA(Over the Air) and market analysis": [
          "Introduction",
          "Agenda",
          "What is OTA?",
          "Importance of OTA",
          "SOTA vs FOTA",
          "Challenges of OTA",
          "Need of OTA (UN R156)",
          "OTA Services",
          "Market Analysis- By OEM, By Country",
          "How OTA happens"
        ],
        "OTA architecture - Overview": [
          "Precondition of vehicle state",
          "OTA Architecture",
          "Vehicle Architecture – Prepare yourself for tomorrow",
          "Quiz-1",
          "Quiz 2",
          "Quiz 3"
        ],
        "OEM backend": [
          "OEM backend",
          "Automotive Cloud providers",
          "Demonstration of Campaign Management",
          "Quiz-4"
        ],
        "User experience - HMI , OEM APP": [
          "HMI",
          "OEM APP",
          "Quiz -5"
        ],
        "OEM backend to TCU connectivity (MQTT , HTTPS)": [
          "MQTT - General concept",
          "MQTT (connectivity OEM backend to TCU)",
          "HTTPS",
          "Quiz - 6"
        ],
        "TCU(Telematic controller Unit)": [
          "TCU - Architecture",
          "TCU_Hardware_1",
          "TCU_Hardware_2",
          "TCU - Softwares",
          "OTA Manager",
          "UDS tester",
          "TCU - Standards",
          "Quiz - 7"
        ],
        "Target device(ECU to be Flashed)": [
          "UDS over CAN vs UDS over Ethernet",
          "AUTOSAR walkthorugh",
          "UDS Over CAN : CAN Frame (CAN-TP)",
          "UDS over Ethernet - AUTOSAR DOIP",
          "DOIP in ethernet frame",
          "DoIP : Connection to external tester",
          "Automotive Bootloader",
          "Bootloader detailed walkthrough!",
          "Target device memory handling",
          "Fail safe strategy",
          "Quiz-8",
          "Quiz-9"
        ],
        "OTA testing": [
          "Is OTA Testing necessary?",
          "Testing OTA : Ways",
          "Testing OTA : Tool Chain",
          "Quiz-10"
        ],
        "Usecase": [
          "Tesla usecase"
        ],
        "Remote Diagnostics": [
          "Remote Diagnostics"
        ]
      },
      "requirements": [
        "Nothing is required, depth concepts are explained in easily understandable Animations.",
        "No programming experience needed"
      ],
      "description": "It was inevitable that the increasing amount of software installed in a car would one day pose a problem. When you consider the infotainment system, advanced driver assistance system (ADAS), and under-the-hood software used for engine management, you can be sure that it all will need updating at some stage. The need to keep all of this software up to date and secure is challenging the industry. And that’s just current functionality—the expectation of new features and functionality is just as important. As Figure 1 illustrates, current projections are that within the coming decade, approximately 50% of a vehicle’s value will be defined by software and experiences, compared to just 10% in the past (when the remaining 90% was accounted for by tangible mechanical component parts).\n\nWhile OTA opens the opportunity to remotely update firmware and software, it also opens the vehicle system to the Internet. The security challenges associated with any connected device arise, along automotive-specific safety and reliability concerns. Consider, as well, connection requirements and cost for OTA enablement. Given varying data rates, automakers must ensure that the connection to the vehicle is robust enough to transmit required updates while keeping costs low. In the face of widely varying bandwidth and signal strengths, the OTA solution must be capable of completing and verifying update downloads that have had to stop and start several times\n\nIn very few years OTA will raise as a mandatory element in Automotive and this course will be helpful understanding the overall view about Automotive OTA concepts.",
      "target_audience": [
        "Automotive enthusiast, Automotive embedded professionals",
        "Who wants to switch or start their career in Automotive OTA domain to become a OTA developer"
      ]
    },
    {
      "title": "Learn to Repair & Troubleshoot Electronics",
      "url": "https://www.udemy.com/course/learn-to-repair-troubleshoot-electronics/",
      "bio": "Learn how to identify, troubleshoot and repair electronic components",
      "objectives": [
        "Learn about the general troubleshooting steps and how to narrow down to the fault in electronics",
        "Learn how to use various tools and equipments to find the fault in electronic",
        "Learn how to test if a component is working properly or not and find substitute for it",
        "Learn how components like MOSFETs, transistors and IGBT function"
      ],
      "course_content": {
        "Introduction": [
          "Why to Repair"
        ],
        "Troubleshooting Basics": [
          "Safety",
          "Types of Failure",
          "Causes of Failure",
          "First Steps to Troubleshoot",
          "Disassembly and Assembly"
        ],
        "Tools Required": [
          "Multimeter",
          "Hand Tools",
          "ESR Meter & Component Tester",
          "Variable Lab Bench Power Supply",
          "Soldering & Desoldering"
        ],
        "Component Testing and Repair": [
          "Introduction",
          "Fuses",
          "Resistors and Potentiometers",
          "Capacitors",
          "Inductors and Transformers",
          "Diodes and Rectifiers",
          "Transistors",
          "Voltage Regulators",
          "Relay"
        ],
        "Repair Examples": [
          "Voltage Stabilizer",
          "Mini Inverter",
          "Arduino",
          "Battery Charger",
          "Lab Bench Supply",
          "Uninterruptible Power Supply (UPS) 1",
          "Uninterruptible Power Supply (UPS) 2",
          "How a Switching Supply Works",
          "Switch Mode Power Supply (SMPS)",
          "Desktop ATX SMPS",
          "Bonus"
        ]
      },
      "requirements": [
        "Basic electronics knowledge",
        "Basic electrical measurement tools"
      ],
      "description": "Electronic systems troubleshooting is an essential skill for electrical engineers and hobbyists alike. Knowing where to look for issues and what to look out for in general can prevent both catastrophic failures and costly replacements.\nKnowing how to repair electronics is a useful skill, whether you plan on making a career out of it or just want to be able to fix your own devices when they stop working.\nTroubleshooting is the process of identifying problems in malfunctioning equipment and applying corrective measures to return them to their optimal operation. Engineers achieve this by testing the various components either individually or collectively to isolate faults that occur while using the product in question.\nYou have several options available to you if you’re interested in studying electronics repair in a formal capacity, including college courses, certification programs, and trade apprenticeships. However, it’s also possible to teach yourself the fundamentals at home using helpful resources like textbooks, magazines, and video tutorials, along with some good old-fashioned tinkering.\nThere is no better way to master repair and troubleshooting than to get your hands dirty. Gather up any old or unused electronics you have lying around and practice taking them apart and putting them back together. This will give a chance to examine their inner workings and make sense of the complicated relationships that exist between them.\nAs your knowledge grows, you can play around with modifying, upgrading, and switching out components, which will serve as a valuable introduction to building your own electronics from scratch.\nThink of figuring out how things function as solving a puzzle. The best electronics specialists tend to be people who excel at problem-solving.",
      "target_audience": [
        "Anyone who is interested in electronics hardware",
        "Anyone who wants to repair and troubleshoot electronics hardware"
      ]
    },
    {
      "title": "8051 Microcontroller - Embedded C and Assembly Language",
      "url": "https://www.udemy.com/course/8051-microcontroller-embedded-c-and-assembly-language/",
      "bio": "Hands-on Approach | 25+ code examples | KEIL IDE | Proteus | Flash Magic | 2 Projects | Sensor and display interfacings",
      "objectives": [
        "You will be able to program 8051 microcontroller using assembly language and embedded c language",
        "Embedded C programming",
        "Assembly language programming",
        "Understand the basic 8051 architecture and pin description",
        "How to use Keil software",
        "Working of assembler and compiler",
        "Coding and debugging of embedded C language in Keil Software",
        "Use of assembly language and working of different assembly language instrutions",
        "Relation between Embedded C, Assembly and Machine code",
        "Memory organisation in 8051",
        "Registers in 8051",
        "Addressing modes in 8051",
        "Assembler Directives in 8051",
        "Working of Assembly language instruction set in 8051",
        "Coding and debugging of assembly language in Keil Software",
        "Accurate delay generation using assembly language",
        "Input-Output Ports in 8051 microcontroller",
        "Timer in 8051 microcontroller",
        "Serial communication in 8051 microcontroller",
        "Interrupt in 8051 microcontroller",
        "How to use Proteus Software",
        "Interfacing with LED",
        "Interfacing with switch",
        "Interfacing with LCD Display",
        "Interfacing with 7 segment display",
        "Interfacing with DC motor",
        "Interfacing with relay",
        "How to burn the content of .hex file into flash memory of microcontroller",
        "Project : Speed control of DC motor and LED dimming using Pulse Width Modulation (PWM)",
        "Project : Wireless control of LEDs using Smartphone",
        "Bit masking in Embedded C",
        "Bit Extracting in Embedded C",
        "Bit monitoring in Embedded C",
        "KEIL IDE",
        "PROTEUS simulation Software",
        "FLASH Magic software",
        "Number Systems",
        "Binary Logics",
        "Interview Questions and Answers",
        "Buzzer working and it's interfacing with 8051",
        "Unipolar Stepper Motor interfacing with 8051",
        "Bipolar Stepper Motor interfacing with 8051",
        "Analog to Digital Converter (ADC) Interfacing with 8051",
        "Temperature Sensor LM35 Interfacing with 8051"
      ],
      "course_content": {
        "Introduction": [
          "Why do we need to study 8051 microcontrollers?",
          "What is Microcontroller? How it is different from Microprocessor",
          "8051 Architecture",
          "8051 Pin Diagram",
          "crystal frequency and Machine Cycle"
        ],
        "8051 Input/ Output Ports": [
          "Pull Up and Pull Down Register",
          "8051 I/O Ports P0, P1, P2, P3 configuration and working"
        ],
        "Basics of Digital System (for absolute beginners)": [
          "Number System",
          "Binary Logics"
        ],
        "Embedded C programming": [
          "Keil IDE installation",
          "Proteus Simulation software Installation",
          "8051 C- compiler working",
          "Embedded C program structure",
          "8051 Data Types",
          "8051 Logical and Bit-wise operators",
          "How to write code in Embedded C"
        ],
        "How to burn program into 8051 microcontroller ?": [
          "How to burn program into 8051 microcontroller"
        ],
        "Assembly Language Programming": [
          "Relating Embedded C and Assembly language",
          "Working of Assembler",
          "Relating Assembly code and Machine code",
          "Memory Organisation in 8051 micro-controller",
          "Registers in 8051 Micro-controller",
          "Addressing Modes in 8051 Microcontroller",
          "Working of Call, Jump, RET and DJNZ instructions",
          "8051 Instruction set",
          "Assembler Directives in 8051",
          "How to write code in Assembly language",
          "How to generate exact delay using assembly language"
        ],
        "LCD interfacing": [
          "Working of LCD",
          "Embedded C code to display character on LCD",
          "Assembly Language code to display character on LCD"
        ],
        "Timers in 8051 microcontroller": [
          "Working of Timer in mode1",
          "Working of Timer in mode2 and mode3",
          "Programming Timer in 8051 microcontroller using Embedded C",
          "Programming Timer in 8051 microcontroller using Assembly language"
        ],
        "Counters in 8051 Microcontroller": [
          "working of counter in 8051 microcontroller",
          "Programming the counter in 8051 microcontroller using Embedded c",
          "Programming the counter in 8051 microcontroller using assembly language",
          "Project to count 00 to 99 and display count value on LCD"
        ],
        "Serial communication in 8051 microcontroller": [
          "Working of Serial Communication in 8051 microcontroller",
          "Programming Serial in 8051 microcontroller using embedded C language",
          "Programming Serial in 8051 microcontroller using assembly language"
        ]
      },
      "requirements": [
        "No prerequisite, but it's good to have knowledge of basic of digital electronics and basic of C programming language."
      ],
      "description": "This comprehensive course provides a thorough exploration of 8051 microcontroller programming, covering essential hardware and software requirements. The curriculum is designed to equip participants with the skills necessary to develop and implement standalone microcontroller applications. By integrating foundational theory with extensive hands-on practice, this course establishes a strong basis for future learning in advanced microprocessor and microcontroller systems.\nCourse Highlights:\nLearn 8051 microcontroller programming in detail using Embedded C and Assembly Language.\nThe course focuses on learning through a hands-on approach and straight-to-the-point explanation\nGet the source code and simulation files for every program discussed.\nJoin the group of 6000+ students.\nGet a Certification of completion\nTest what you learned by solving MCQs after the videos.\nExtra Learning material is provided for an absolute beginner.\nNumber System & Binary Logics\nInterview Questions and Answers\nBonus lectures on the \"Basics of Embedded C programming\".\n\n\nLearn software:\nProgramming software                   - KEIL IDE\nSimulation Software                        - PROTEUS\nProgram downloading software    - FLASH Magic\n\n\nLearn 8051 microcontroller interfacing with\nLEDs\nLCD\n7 segments\nSwitches\nRelays\nBuzzer\nDC motor\nStepper Motor\nAnalog to Digital Converter (ADC 0809)\nTemperature Sensor LM35\nBluetooth Module HC-05\nLearn 8051 microcontroller programming of\nI/O Ports\nTimer\nCounter\nSerial Communication (UART)\nInterrupts\n\n\nProject 1: Speed control of DC motor and LED dimming using Pulse Width Modulation (PWM) technique.\nProject 2: Wireless control of LEDs using a Smartphone.\n\n\nLearning Objectives:\nUpon successful completion of this course, participants will be able to:\nAnalyse and configure core 8051 components, including I/O ports, timers, counters, interrupts, and the serial communication interface (UART).\nProgram the 8051 microcontroller proficiently using both Assembly and Embedded C languages.\nInterface a variety of external peripherals, such as LEDs, switches, LCDs, and 7-segment displays, with the microcontroller.\nMaster the complete development workflow, from writing and compiling code to programming (burning) it onto the 8051 microcontroller.\nDevelop two capstone projects that demonstrate advanced control concepts and real-world applications.\n\n\nCourse Content and Methodology:\nOur curriculum is structured to ensure a clear and logical progression from fundamental concepts to advanced applications.\nTheoretical Foundation: Each module begins with a concise overview of the necessary theory to ensure a solid understanding before proceeding to practical implementation.\nPractical Application: The course is centred around practical, step-by-step examples. To provide a comprehensive learning experience, each key example is demonstrated in both Embedded C and Assembly language.\nProgressive Complexity: Topics and projects are arranged to gradually increase in difficulty, facilitating a smooth and effective learning curve.\nCode Portability: The principles and code taught in this course are based on the foundational 8051 architecture and can be adapted to run on any modern 8051-compatible device.\nParticipants will apply their acquired skills to build and test two significant application projects:\nDC Motor Speed Control: Generate a Pulse-Width Modulation (PWM) signal to precisely control the speed of a DC motor.\nWireless Device Control: Implement a wireless control system to manage a device using a smartphone and an 8051 microcontroller.\n\n\nLatest Updates:\n11/08/2025: In response to student feedback, a bonus module on the \"Basics of Embedded C Programming\" has been added to the course.",
      "target_audience": [
        "Anyone who want to learn 8051 microcontroller programming"
      ]
    },
    {
      "title": "Beginners Masterclass: Raspberry Pi and Internet of Things",
      "url": "https://www.udemy.com/course/internet-of-things-raspberrypi-azure/",
      "bio": "Learn IoT with Raspberry Pi and Microsoft Azure",
      "objectives": [
        "Internet of Things with Microsoft Azure",
        "Azure IoT Hub and PowerBI",
        "Azure IoT Hub and Stream Analytics Job",
        "Create Custom web app using Azure",
        "IoT Platform : Thingspeak",
        "IoT Platform: Adafruit IO",
        "Azure IoT Hub",
        "Raspberry Pi and Sensor interfacing",
        "Python Programming",
        "Device Control with Python and IOT"
      ],
      "course_content": {
        "Course Agenda": [
          "Introduction to the Course and what will you learn?",
          "About Course",
          "Resources to Download",
          "List of hardware needed to take this course"
        ],
        "Introduction to Internet of Things and Raspberry Pi": [
          "Introduction To Internet Of Things",
          "Choosing Cloud Services For IoT",
          "Quiz 1",
          "What is Raspberry Pi Part 1",
          "What is Raspberry Pi Part 2",
          "Pi Quiz"
        ],
        "Raspberry Pi Operating System Installation": [
          "Updated Raspberry PI OS installation method (2023) without using monitor",
          "Installing OS to raspberry Pi computer [no more needed kept only for reference]",
          "Downloading OS for Raspberry Pi Noobs [no more needed kept only for reference]",
          "Install OS using NOOBS [no more needed kept only for reference]",
          "Remote Control of Raspberry Pi Using VNC Viewer",
          "Install OS using Raspbian Image part 1 [no more needed kept only for reference]",
          "Install OS using Raspbian Image part 2 [no more needed kept only for reference]",
          "Raspberry Pi 5 OS Installation without using monitor [2024]",
          "OS Related Questions"
        ],
        "Getting familiar with Raspberry Pi": [
          "Getting Around Raspbian Operating System part 1",
          "Getting Around Raspbian Operating System part 2",
          "Getting Around Raspbian Operating System part 3",
          "How To Run Python program On Raspberry Pi",
          "Linux Related Quiz"
        ],
        "Raspberry Pi General Purpose Input Output (GPIO) -- Using Digital Outputs": [
          "Raspberry PI GPIO Concepts",
          "Raspberry Pi GPIO Interfacing Single LED",
          "Raspberry Pi GPIO Interfacing Multiple LED's",
          "Rapberry Pi GPIO Interfacing Buzzer",
          "Github link to download all codes"
        ],
        "Use Raspberry Pi GPIO for Transistor and Relay Switching Circuits": [
          "Raspberry Pi and Transistorized Switching",
          "Raspberry Pi Interfacing with Relay - Part 2",
          "Raspberry Pi Interfacing with Relay - Part 2"
        ],
        "Using Raspberry Pi GPIO Input Pins": [
          "Accepting Digital Input On Raspberry Pi Part 1",
          "Accepting Digital Inputs On Raspberry Pi Part 2",
          "GPIO Quiz"
        ],
        "Interfacing Sensors with Raspberry Pi Computer": [
          "Github link to download all codes",
          "Sensor Interfacing With Raspberry Pi LDR -- Part 1",
          "Sensor Interfacing With Raspberry Pi LDR -- Part 2",
          "Sensor Interfacing With Raspberry Pi LDR -- Part 3",
          "DH11 / 22 Sensor Interfacing With Rapberry Pi -- Part 1",
          "DH11 / 22 Sensor Interfacing With Rapberry Pi -- Part 2",
          "Sensor Interfacing with Raspberry Pi Using SenseHAT",
          "Raspberry Pi Sensors Quiz",
          "How to Interface Ultrasonic Sensor with Raspberry Pi"
        ],
        "Interfacing of I2C Based BMP180 Sensor with Raspberry Pi": [
          "Using BMP180 with Raspberry Pi",
          "Enabling I2C On Raspberry Pi for interfacing with BMP180",
          "Python Code for interfacing BMP180 with Raspberry Pi",
          "Code for BMP"
        ],
        "Internet of Things and Microsoft Azure": [
          "Getting Started With IoT",
          "What are the hardware devices used in IoT",
          "Changes in Azure IoT Hub",
          "Getting Started with Microsoft Azure IoT Hub -- Part 1",
          "Getting Started with Microsoft Azure IoT Hub -- Part 2",
          "Getting Started with Microsoft Azure IoT Hub -- Part 3",
          "Creating IoT Device inside Azure IoT Hub",
          "Enable Azure Cloud Shell and enable IoT Extension",
          "Send Data to Azure IoT Hub Using Python Program",
          "Send Actual Temperature and Humidity Values to Azure IoT hub",
          "Storing The Data on Microsoft Azure Using Custom Gateway",
          "Save data to blob storage using Stream Analytics Job",
          "Data Visualization With Power BI -- Part 1",
          "Data Visualization With Power BI -- Part 2",
          "Creating Custom web app with azure for data visualization -- Part 1",
          "Creating Custom web app with azure for data visualization -- Part 2",
          "Creating Custom web app with azure for data visualization -- Part 3",
          "Dealing with password error while pushing your webapp to azure",
          "Cleaning up Azure Resources",
          "Remote Monitoring using Azure Logic App -- Part 1",
          "Remote Monitoring using Azure Logic App -- Part 2",
          "Workaround for Gmail connection error"
        ]
      },
      "requirements": [
        "Basic Understanding of Electronics hardware is welcome but not necessary",
        "Basic Understanding of any programming"
      ],
      "description": "\"With the right tools and guidance, I believe anyone can learn and master technology. That's why I offer 50% of the videos from all my courses as free previews. Feel free to watch them and enroll only if you believe the course is a good fit for you.\"\nAre you trying to study IoT?\nAre you getting confused with all the hardware and software stuffs?\nLearning IoT can be very confusing especially if you’re new to electronics. Even experienced people struggle in understanding everything at one place, definitely you’re not alone\nStop Struggling to Learn IoT\nI’ve created a course which will enable you to learn and experiment with IoT in a very easy way\nI firmly believe that anyone regardless of their education and skills can not only learn but excel in experimenting with IoT including all the hardware and software skills.\nThis course is specially created for beginners in electronics hardware and cloud technologies!!!\n\"What is there to loose if you enroll in this bestseller course? You have a 30 day Full Money Back Guarantee, enroll now and start experimenting on IoT\"\nHi, My name is Amit Rana, I’m an engineer, programmer and trainer\nI have created “Beginners Masterclass into internet of things” to help you learn IoT with Raspberry Pi and cloud technologies.\n\n\nIf you’ve always wanted to\nStart or shift your career to Internet of things\nGet better in your existing work\nKick start your next dream IoT startup\nStart your own blog and youtube channel, probably online course on this ever growing industry\n… then this course is specially for you.\nThis course is specially created for beginners in electronics hardware and cloud technologies!!!\nIoT is interconnecting various things and devices to send and receive data from internet enabling variety of applications\nIn this program, there are number of different aspects of IoT that we’re going to study\nFirst, we’ll understand the basics of IoT and what are the different hardware and software platforms needed for it\nWe’ll then use raspberry pi as our controller for this course and see how we can make it up and running. We’ll see how to write python programs\nFor various interfaces like relays and sensors.\nOnce we get confident about raspberry pi, we’ll then explore IoT with Microsoft azure and few more platforms\nWith something like Microsoft azure, you can create any kind of system you want, we’ll see how to push data there, how to see data visualization using PowerBI,\nHow to save data and how to create our own custom app over there.\nAfter Microsoft azure, we’ll see some other popular platforms like thingspeak and adafruit IO and try to create a complete home automation project using raspberry pi.\n\"What is there to loose if you enroll in this bestseller course? You have a 30 day Full Money Back Guarantee, enroll now and start experimenting on IoT\"\nIn This Course, you'll learn\nBasics\nWhat is IoT and why learning it is important\nHow to implement IoT, what are the required softwares and hardware for IoT\nWhat is Raspberry pi and how to setup raspberry pi for first time use\nIntroduction to Python programming with raspberry pi\nInterfacing of various sensors and output devices with raspberry pi\nPython programming to control home appliances and read sensors\nMicrosoft Azure IoT and Cloud Platforms\nCommunication protocols in IoT\nWhat are different Cloud platforms used for IoT, what is PaaS and SaaS products\nCreating account on Microsoft Azure and learning\nWhat is IoT Hub creation and its various pricing\nPushing data to IoT hub from raspberry pi\nData Storage using Blobs\nData Visualization and Logic\nWhat is PowerBI?\nCreating account on PowerBI\nUsing PowerBI with Raspberry pi and Azure IoT Hub for creating reports\nCreate real time web app for data visualization\nCreate Custom Logic app to trigger and email from Azure\nThingspeak\nCreating account on thingspeak\nsend data from raspberry pi to thingspeak\nUse HTTP to send data\nAdafruit IO\nDeeper understanding of what is MQTT protocol\nUsing adafruit IO for creating IoT project using MQTT protocol\nComplete Home automation project using Raspberry pi and Adafruit IO\n\n\nWhat this course will do for you?\nGive you a clear understanding of what is IoT?\nTake you from a complete fresher to an experienced Raspberry PI user and programmer\nUnderstand IoT protocols\nDesign your IoT systems\nWho Should Enroll?\nComplete Beginners into IoT and Raspberry Pi\nPeople who understand little in IoT and want to learn Microsoft Azure IoT Hub\nFreshers as well as experienced one's\nThis course is specially created for beginners in electronics hardware and cloud technologies!!!\nI have been training and developing from past 10 years. With more than 50000 students trained across 150 countries, you can be assured that you’re in a good company. What’s more, there is always a 30 day money back guarantee so you’re safe about investing your money into this course.",
      "target_audience": [
        "Working professionals desiring to have a career shift in IoT",
        "Students and Freshers exploring Career in IoT",
        "Hobbyists creating IoT projects for Home",
        "Anyone willing to dive into IoT and Raspberry Pi"
      ]
    },
    {
      "title": "The Foundations of Computer Design",
      "url": "https://www.udemy.com/course/the-foundations-of-computer-design/",
      "bio": "Learn how basic computers are designed - a fundamental topic in computer science",
      "objectives": [
        "Know what binary numbers are and how to do basic math with them",
        "Know how a computer uses electricity to do computations",
        "Design and program a basic, but working, CPU and memory circuit",
        "Be able to define and understand basic assembly and machine code"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction"
        ],
        "Computers and Numbers": [
          "Numbers and Electricity",
          "Intro to Binary Numbers",
          "Binary Numbers Conversion",
          "Intro to Hexadecimal",
          "A Glance at Octal",
          "Binary Addition",
          "Negative Numbers in Binary",
          "Binary Subtraction and Conclusion of Section 1"
        ],
        "Building a Full Adder": [
          "Section Intro and What is a logic gate",
          "The NOT Gate",
          "The AND Gate",
          "The OR Gate",
          "The NAND Gate",
          "The NOR Gate",
          "The Exclusive OR (XOR) gate",
          "More Gates",
          "Building a Circuit that Adds",
          "Building a Circuit that Adds Bigger Numbers"
        ],
        "Other Circuits needed in Computer Design": [
          "Sign Extender",
          "The Decoder",
          "The Multiplexer",
          "A Programmable Circuit",
          "The Full ALU"
        ],
        "Memory": [
          "A Basic Latch",
          "A Computer's Clock",
          "The D Latch",
          "Building a CPU Register File",
          "A Memory Block"
        ],
        "Basic MIPS Programming": [
          "Instructions for Addition and Subtraction",
          "Instructions to Access Memory",
          "Instructions in Machine Language"
        ],
        "Designing A Computer": [
          "Program Counter Data Path",
          "Local CPU Memory - The Registers",
          "Accessing Memory",
          "Conditional Branching",
          "Putting it all together",
          "The ALU Control and Main Control",
          "A Complete Programmable Computer"
        ]
      },
      "requirements": [
        "Students should have a desire to understand how computers really work",
        "The only required knowledge is basic math and the ability to think logically however a total beginner will likely find this class very challenging"
      ],
      "description": "Learn how a computer works with this basic, but detailed course on the foundations of computer design. In this course you will learn how a computer really works and by the end you will be able to understand the design of a programmable central processing unit. This class is the foundation of a computer science curriculum.\nDesigning your first computer!\nLearn binary and hexadecimal numbers\nUnderstand logic gates\nRecognize multiplexers decoders and the ALU\nLearn how to design memory chips and CPU registers\nBuild a basic central processing unit\nA building block to more advanced computer topics\nThis course starts from the ground up and completes with a fully functioning programmable computer. Advanced computer design topics such as power or speed optimizations are not covered but all the information needed to understand basic computer design is packed into this course. A total beginner will likely need to repeat a few of the lectures but it can be understood by anyone who takes the time to study each of the lectures. Anyone who desires to become a computer  science expert must know how processors really work and this course is the first step towards that goal.",
      "target_audience": [
        "This course is for students who desire to know how a basic computer is designed and programmed",
        "Computer professionals who were never exposed to assembly programming may also find this course useful."
      ]
    },
    {
      "title": "Beckhoff TwinCat3 PLC Programming Basics",
      "url": "https://www.udemy.com/course/learn-basics-of-beckhoff-twincat3-plc-in-15-hours/",
      "bio": "Beckhoff PLC Programming in TwinCat3 Software",
      "objectives": [
        "To understand how a Programmable Logic Controller (PLC) works",
        "Pass a technical PLC interview",
        "Understand how to program a PLC",
        "Learn Ladder Logic Programming",
        "Industrial Automation",
        "TwinCat3 programming interface"
      ],
      "course_content": {},
      "requirements": [
        "Basic Electrical Hardware Understanding",
        "Electrical, Electronics, Mechatronics and Telecom Engineers"
      ],
      "description": "This comprehensive course is designed to teach you the fundamentals of Beckhoff PLC programming using TwinCAT 3, starting from scratch. Whether you're a student, technician, or automation enthusiast, you'll gain a solid foundation in relay logic, ladder diagram programming, and real-time simulation—all without needing any physical hardware.\nYou'll learn to set up the TwinCAT 3 software environment, develop ladder logic programs, and test them using the built-in simulator. The course is structured to provide hands-on experience through step-by-step video lectures and practical assignments that mirror real-world industrial scenarios.\nNo prior experience is required, and everything you need to practice is included in the course materials. Simply install TwinCAT 3 on your PC and start learning!\nWhat You Will Learn:\nIntroduction to relay logic and digital control principles\nComplete overview of Beckhoff PLC hardware and communication protocols\nInstallation and configuration of TwinCAT 3 software\nCreating and managing PLC projects in TwinCAT 3\nProgramming with ladder logic: contacts, coils, timers, counters, and more\nUsing advanced instructions like latching, edge detection, and comparators\nPerforming arithmetic and logical operations in PLC logic\nSimulating your program and communicating with actual PLCs via Ethernet\nBasics of HMI design integrated with PLC programming\nReal-life examples and assignments to reinforce your learning\nCourse Outline:\nIntroduction to the Course\nUnderstanding Relay Logic\nBeckhoff PLC Fundamentals\nCommunication Protocols\nInputs/Outputs\nPLC Wiring Concepts\nSinking/Sourcing\nNPN & PNP Sensors\nInstalling TwinCAT 3 Software\nTwinCAT 3 Environment Overview\nNew Project Setup\nDevice Selection\nUser Interface Tour\nConfiguration Tools & Programming Blocks\nTag Creation & Data Types\nSimulator & PLC Communication\nTwinCAT Simulator Setup\nOnline Program Monitoring\nEthernet Configuration for PLCs\nBasic Ladder Elements\nNormally Open/Closed Contacts\nCoils and Motor Interlocking\nWorking with Branches and Rungs\nDigital Logic in Ladder Diagrams\nSeries and Parallel Operations\nTruth Tables\nLogic Conversion Techniques\nAssignment 1\nLatching Logic\nSet/Reset Operations\nTimers\nON-Delay, OFF-Delay, and Retentive Timers\nAssignment 2\nCounters\nUp, Down, and Up-Down Counters\nAssignment 3\nAdvanced Instructions\nEdge Detection: Rising & Falling\nAssignment 4\nMove and Data Conversion Commands\nComparator Operations\n=, <, >, <=, >=\nArithmetic Operations\nAdd, Subtract, Multiply, Divide\nAssignment 5\nIntroduction to HMI Design in TwinCAT 3\nProject Setup and Integration with Ladder Logic\nCapstone Assignments\nTwo-Way Traffic Signal Control\nColor Mixing Automation\nChemical Processing Unit Simulation\n______________________________________________________________________________________________________________________________________\nall about twincat, beckhoff plc programming, how to create new project in twincat software, how to use math operations in twincat, how to add subroutine in twincat, how to use comparators in twincat, how to use timers in twincat, how to use counters in twincat, twincat hmi programming,  how to build an hmi in twincat,\nelectrical plc training, freelance plc programmer, how to learn plc programming, learn plc programming, learning plc programming, plc application, plc based control system, plc class, plc classes, online plc, computer plc, controlled equipment, plc controller, training plc, course plc, full form plc, industry plc, interface plc, manufacturing plc, network plc, online courses plc, operation plc, programing course, plc programing courses, plc programing training, plc programmable logic controller, plc programmer training, plc programmers, plc programming classes, plc programming companies, plc programming course, plc programming courses, plc programming language, plc programming online course, plc programming school, plc programming service, plc systems, plc training courses, plc training courses online, plc-programs, plcs for dummies, program logic control training, program plc, program plcs, programing plcs, programmable controller application, programmable logic controller applications, programmable logic controller history, programmable logic controller training, what is a programmable logic controller, what is plc control, what is programmable logic controllers,",
      "target_audience": [
        "Anyone interested in learning how an industrial process works automatically",
        "Production, Maintenance & Electrical Technicians",
        "Electrical, Electronics, Mechatronics and Telecom Engineers"
      ]
    },
    {
      "title": "PID Controller with Arduino - Masterclass",
      "url": "https://www.udemy.com/course/pid-controller-with-arduino/",
      "bio": "Learn and understand PID Control system in a very practical way with Arduino and with demonstrations",
      "objectives": [
        "For those who are new, a brand new way of thinking about programming and electronics with Arduino",
        "Basic understanding of Control systems",
        "Differences between open loop and closed loop systems",
        "Learn some exciting possibilities with Arduino and Microcontrollers",
        "Master the fundamentals of PID control",
        "Tuning methods for PID controller",
        "Ideas to design your own automated PID control systems",
        "Practical knowledge of designing, building and implementation of PID systems in your hobby projects",
        "Ways to control Position and Speed (and other controls) precisely and intelligently in your DIY projects",
        "Hardware software to build a control system",
        "Tips and thought provoking ideas to build systems from scratch",
        "Power of using programming and electronics together",
        "Power of using Arduino and Microcontrollers in a yet different way"
      ],
      "course_content": {
        "Lectures": [
          "Introduction to Control systems",
          "Open loop System demonstration",
          "Closed loop System demonstration",
          "Introduction to PID control",
          "PID Control Algorithm to Real world",
          "Proportional term P of PID Control",
          "Integral term I of the PID Control",
          "Derivative term D of the PID Control",
          "Tuning PID Control systems",
          "Arduino Sketch",
          "Tips",
          "Control Systems",
          "PID Controller"
        ]
      },
      "requirements": [
        "Be excited about learning and understanding the possibilities with programming and electronics",
        "Who wants to expand their knowledge of ways to use Arduino and microcontrollers and know their capabilities yet in another way",
        "Simply for anyone whose interested in learning IT and engineering concepts",
        "Who likes to design and build things on your own",
        "Knowing Arduino can be an advantage",
        "Be excited about electronics",
        "Be excited about programming",
        "Be excited about Arduino",
        "Be excited about Microcontrollers",
        "Be excited about engineering concepts in everyday life"
      ],
      "description": "This course is focused for those of you who are interested in programming and electronics, who are trying to expand their knowledge base in this field.\nFor those of you who are familiar with Arduino, microcontrollers, and electronics this course can give you yet another idea for new possibilities if you haven’t used PID in your DIY projects. You will find out how easy it is to implement this control systems to make your project very intelligent, sophisticated, and advanced.\nFor others, you will enjoy learning something new.\nThis course can also be exciting for someone who would like to know what PID Control systems are and some possibilities using it in your everyday projects.\nThis course is structured in such a way that we start from the result and then walks backward to figure out the solution and implementations with enough details that you will be empowered to design and implement PID controller in your own systems in almost no time.\nMy goal is to teach you closed loop control systems and how to implement such systems by using PID controllers using Arduino and microcontrollers in a very practical way (You don’t need to understand the maths behind the algorithm to build these systems)\nWith experience I know that if you do not have proper understanding of this amazing and very famous control system, it can remain a mystery for you. As I am targeting this course for beginners of all sorts, to give you a better understanding, I will touch on control systems in general and explain everything in a very practical way so you will get to understand them with ease.\nThis course covers live demonstrations of PID control systems which can be easily duplicated, improvised, and implemented by you. This course also covers some theoretical background about PID controllers and how it relates to real world system.\nRather than delving altogether in theory, my focus is to give you a better understanding and enough knowledge to empower you to immediately put your brain at work. This way you can come up with your own systems almost in no time. I have replaced the theory with lot of practical demonstrations to understand the whole concept behind PID control system.\nOnce you go through this course and have a better understanding of the crucial aspects of PID controllers in a closed loop system, the confusion and mystery behind PID controllers will be gone.\nFor all of you out there, you will enjoy learning something new and exciting.\nThank you",
      "target_audience": [
        "Curious DIY learners",
        "Makers",
        "Beginner students in the field of Electronics and Programming",
        "Students of Arduino and Microcontrollers",
        "Who likes robotics and ways to design and build systems",
        "Basically for anyone who loves the field of programming and or electronics"
      ]
    },
    {
      "title": "Learn How to Build a Computer",
      "url": "https://www.udemy.com/course/learn-how-to-build-a-computer/",
      "bio": "Learn which parts you need, the features to look for, where to buy them, and the step-by-step process of building it.",
      "objectives": [
        "Determine which parts you need to buy",
        "Compare features and benefits of different makes and models of parts",
        "Buy your computer parts from the most reliable sources",
        "Put together all of the parts that make up your PC",
        "Install a Windows operating system",
        "Install anti-virus software",
        "Test your built computer is running at optimal temperatures",
        "Troubleshoot your build in case something didn't go right on the first try"
      ],
      "course_content": {
        "Getting Started": [
          "What You'll Find in This Course",
          "Intro to Buying Parts",
          "Your Build Depends on Your PC's Purpose",
          "Required and Optional Hardware",
          "Similar to Buying Tires for Your Car",
          "Sample Basic PC Configuration",
          "Sample Gaming PC Configurations",
          "Sample Home Theater PC Configuration",
          "Best Places to Buy Parts",
          "What Will You Use Your PC For?"
        ],
        "Choosing Parts": [
          "Parts You'll Need to Buy",
          "Relevant As Technology Improves",
          "Choosing a Case",
          "Explore Computer Cases in More Detail",
          "Choosing a Power Supply",
          "Explore Power Supplies in More Detail",
          "Choosing a Motherboard",
          "Exploring Motherboards in More Detail",
          "Choosing a CPU",
          "Exploring CPUs in More Detail",
          "Choosing RAM (Memory)",
          "Exploring RAM (Memory) in More Detail",
          "Choosing a Hard Drive",
          "Exploring Hard Drives in More Detail",
          "Choosing a Graphics Card",
          "Exploring Graphics Cards in More Detail",
          "Choosing an Optical Drive",
          "Exploring Optical Drives in More Detail",
          "Choosing an Operating System Installation Disc",
          "Understanding the Parts of a Computer"
        ],
        "Installing Parts": [
          "Installing the CPU",
          "Installing the CPU Cooler (Heatsink)",
          "Installing the RAM (Memory)",
          "Installing the Power Supply",
          "Installing the Motherboard in the Case",
          "Installing the Graphics Card",
          "Installing the Hard Drive(s)",
          "Installing the Optical Drive"
        ],
        "Connecting Power & Data Cables": [
          "Connecting Power Cables to the Motherboard and CPU",
          "Power Cables That You'll Need to Connect to Power Supply",
          "Connecting the Front Panel",
          "Connecting Additional Power Cable to Graphics Card",
          "Connecting Power Cables to Hard Drive(s) and Optical Drive",
          "Connecting Data Cables to Hard Drive(s) and Optical Drive",
          "Reviewing Connections",
          "Storing Unused Parts"
        ],
        "Turning Computer On and Installing Windows & Drivers": [
          "Turning the Computer On",
          "Installing Windows 7",
          "Installing Drivers",
          "Updating Windows and Installing Anti-Virus Software",
          "Checking Your CPU's Temperature",
          "Graphics Card Driver",
          "Troubleshooting",
          "Formatting a Second Hard Drive"
        ]
      },
      "requirements": [
        "None",
        "No previous computer building/repair experience"
      ],
      "description": "Building a computer is fun, affordable, and empowering. It's fun being able to choose all of the parts that will go into your machine, it's cheaper than buying a PC from a manufacturer like Dell or HP, and it's just so darn cool to DIY!\nThis course is for anyone that has ever wanted to build their own computer.\nFor this course, I purchased all the parts I needed for a new computer. I show you each part, tell you about the features I thought were important, describe other features you may want to look for, demonstrate how to build the entire computer, and then install the necessary operating system and software.\nYou will go from having no idea what's inside a computer to having a full working computer after this course.\nYou will be able to do the following:\nFigure out your computer's main purpose\nDetermine which parts you need to buy\nCompare features and benefits of different makes and models of parts\nBuy your computer parts from the most reliable sources\nPut together all of the parts that make up your PC\nInstall a Windows operating system\nInstall anti-virus software\nTest your built computer is running at optimal temperatures\nTroubleshoot your build in case something didn't go right on the first try\nFAQ:\nWhat operating system do you demonstrate how to install?\nWindows 7. I am adding a video on how to install Windows 8 and Linux as well.\nHow much do the parts cost?\nIt depends on what you want to do with your new PC. You can spend anywhere from $300 to $3000 on your build. The first thing to do is to identify the purpose of your computer. Are you going to use it for gaming or video editing, or just basic website browsing and media playback? The more performance your machine is, the more it will cost. We've listed out the following sample configurations in the course:\n\nBasic PC ($300)\nBasic PC ($400)\nGaming PC ($464)\nGaming PC ($800)\nGaming PC ($1500\nVideo Editing PC ($1500)\nHome Theater PC ($500)\nHow long will I have access to the videos?\nForever :) Your access won't expire</strong>\nDo you offer a money-back guarantee?\nYes, we have a 30-day money-back guarantee. If you're unhappy for any reason we'll refund 100% of your investment. Of course, if there is anything we can do to help you, we'd love the opportunity to do so first.</strong>\nCan I install Mac OS on a computer I build?\nYes, the method of actually putting together the computer hardware is independent of which operating system you're installing. However, Mac OS will only work with a very limited set of hardware, so building a \"Hackintosh\" is outside the scope of this course.",
      "target_audience": [
        "Anyone who wants to build a computer",
        "Anyone who wants to save money on the cost of a new computer",
        "Anyone who wants to develop a new skill",
        "No previous experience, knowledge, or training needed"
      ]
    },
    {
      "title": "Arduino UNO Bootcamp For Beginners - Complete Course",
      "url": "https://www.udemy.com/course/arduino-uno-bootcamp-for-beginners-2022-complete-course/",
      "bio": "Master Arduino UNO Starting From Zero - Learn with Hands-on Activities and Many Arduino Projects.",
      "objectives": [
        "Learn basics of Arduino UNO",
        "Build 20+ projects using Arduino UNO",
        "Build Arduino UNO Based Obstacle Avoiding Robot Car",
        "Create Obstacle Avoiding Robot Car",
        "Study and Implement about IoT & Home Automation"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Components Overview": [
          "Components Overview"
        ],
        "What is Arduino?": [
          "What is Arduino?"
        ],
        "What is Python?": [
          "What is Python?"
        ],
        "Installing Arduino IDE ,Python, VSCode": [
          "Python & VSCode Installation",
          "Arduino IDE"
        ],
        "Basics of Arduino UNO": [
          "Builtin LED Blinking",
          "LED Blinking",
          "Multiple LED'S Blinking",
          "User Input Control LED",
          "LED Brightness Control",
          "LED Brightness Control With Potentiometer",
          "LED Push Button Control"
        ],
        "4 - channel Relay Module": [
          "User Input Relay Control",
          "4- Relay Control using User Input",
          "Smart Bulb",
          "Smart Bulb 2-Way Switch",
          "Blinking Bulb",
          "Smart Socket",
          "Timer Baed Smart Socket"
        ],
        "Ultrasonic Sensor": [
          "Ultrasonic Sensor Measure Distance",
          "Ultrasonic Distance LED",
          "Distance Based Smart Lamp"
        ],
        "PIR Sensor": [
          "Motion Based Smart Lamp"
        ],
        "LDR (Light Dependent Resistor)": [
          "LDR Based Smart Lamp"
        ]
      },
      "requirements": [
        "No programming experience is needed. You will learn everything you need to know from the basics"
      ],
      "description": "In this course, you will Learn To Create Arduino UNO From the very basics to an advanced level with 25+ projects Arduino UNO Microcontroller.\nWhat is Arduino UNO?\nArduino UNO is a low-cost, flexible, and easy-to-use programmable open-source microcontroller board that can be integrated into a variety of electronic projects. This board can be interfaced with other Arduino boards, Arduino shields, and Raspberry Pi boards and can control relays, LEDs, servos, and motors as an output.\n\n\nWhat you will be learning in the course?\nWhat is Arduino UNO Microcontroller?\nBasics of Arduino\nInstalling Arduino IDE\nBlinking Built-in LED on Arduino\nBlink LED\nMultiple LED'S Blinking In Series\nUser Input Control LED\nLED Brightness Control\nLED Brightness Control With Potentiometer\nLED Push Button Control\nUser Input Relay Control\nCreate Smart Bulb Using Ardunio through User Input\nCreate Smart Bulb 2-Way Switch Using Ardunio through User Input\nBlinking Bulb\nSmart Socket\nSmart Socket With Timmer\nLDR Based Lamp Control\nDistance-Based Lamp Control\nUltrasonic Sensor Measure Distance\nUltrasonic Distance LED\nMotion-Based LampControl\nRGB Strip Control\nMotor Movement in all Directions\nObstacle Avoiding Robot Car\nRC-Control Robot Car.\nAll the above Features and List Goes On...\n\n\nWhat is Obstacle Avoiding Robot?\nNow day’s many industries are using robots due to their high level of performance and reliability and which is a great help for human beings. Obstacle avoidance robotics is used for detecting obstacles and avoiding collisions. This is an autonomous robot. The design of the obstacle avoidance robot requires the integration of many sensors according to their task.\n\n\nObstacle detection is the primary requirement of this autonomous robot. The robot gets the information from the surrounding area through mounted sensors on the robot. Some sensing devices used for obstacle detection like bump sensors, infrared sensors, ultrasonic sensors, etc. The ultrasonic sensor is most suitable for obstacle detection and it is of low cost and has a high ranking capability.\n\n\nWhat is RC-Control Robot?\nRadio-controlled cars (or RC cars for short) are miniature model cars or trucks that can be controlled from a distance using a specialized transmitter or remote.\n\n\nSo what are you waiting for?\nEnroll now.",
      "target_audience": [
        "Beginner in Ardunio and Robotics",
        "Beginner interested in building Projects",
        "Beginner in Robotics looking for hands-on experience",
        "Beginner Arduino developers curious about IoT & Home Automation"
      ]
    },
    {
      "title": "EE1C01 - Electronics Engineering Bootcamp",
      "url": "https://www.udemy.com/course/ee1c01-electronics-engineering-bootcamp/",
      "bio": "Hands-on learning by building, A course for electrical engineering, embedded systems engineering students and hobbyists",
      "objectives": [
        "Understand the core concepts of electronic theory (voltage, current, resistance, energy, power in a circuit)",
        "Read and draw electronic schematics.",
        "Build practical circuits on a breadboard.",
        "Use lab tools such as a multimeter to debug circuits"
      ],
      "course_content": {},
      "requirements": [
        "knowledge in high school physics, chemistry and mathematics.",
        "An electronics kit containing tools and components is recommended, but not required."
      ],
      "description": "Electronics engineering is a discipline of Electrical engineering which focuses on the design and construction of circuits that process information and control of electric power.  Unlike most electronics engineering courses offered online or in universities, which are highly academic, this course uses a hands-on approach to learning, and focuses heavily on practical applications.\nThe purpose of this bootcamp is to teach the bare minimum in math and theory to provide a solid foundation, while focus heavily on practical design methodology, applications, and electronics know-how that is typically only learned with years of industry experience. By the end of the bootcamp, all students shall be able to design professional, industrial-grade embedded systems and electronic circuits that can process and transmit high speed signals, and control of high power circuits.\nThis is the first course in a multi-course bootcamp, that requires no previous knowledge besides high school math, chemistry and physics. It will build an intuitive understanding of electronic theory and provide the bare minimum knowledge to get started building very simple circuits, such as controlling LEDs, adjusting brightness of LEDs, operating relays, mixing colors, and a few others.",
      "target_audience": [
        "Hobbyists and makers interested in electronics design, or undergraduate students currently studying electrical, computer, mechatronics, or embedded systems engineering"
      ]
    },
    {
      "title": "Studio 5000 Programming using SFC's.",
      "url": "https://www.udemy.com/course/rslogixstudio5000-plc-programming-training-using-sfcs/",
      "bio": "Studio 5000 PLC Programming Training using Sequential Function Charts incorporating Structured Text.",
      "objectives": [
        "Here you will learn how to program Sequential Function Charts and when to use them as an alternative to other programming languages.",
        "Learn how to program If, Then, Else statements with ease.",
        "Do you know structured text? After this course, you will.",
        "Gain confidence with this language as an alternative to ladder logic."
      ],
      "course_content": {},
      "requirements": [
        "You certainly need to know your way around the Studio 5000 software. Knowledge of script type programming will be an advantage."
      ],
      "description": "Due to many requests, I have decided to create a course Studio 5000 PLC Programming using SFC's and it is for any of you who require the knowledge to design, program and implement Sequential Function Chart systems throughout your operation, or for anyone who wishes to expand their knowledge to the highest level.\nMy name is Jeff Sharman and I shall be your instructor during this training. I have had many years of practical experience in all aspects of PLC's, Instrumentation, and Control Systems as well as training both face to face and Online. I have travelled extensively throughout Africa and the Middle East both in a training and client support capacity. I also possess a SAQA Further Education and Training Certificate: Measurement, Control and Instrumentation. This is South African but recognized in many countries internationally.\nI have been privileged to meet some of the most amazing people from all over the world. Lots of humourous moments also.\nThe course will start by giving you a general introduction to all the aspects that will be discussed.\nWho Should Take This Course?\nThis course, Studio 5000 PLC Programming using SFC's is designed for anyone already in the PLC and Instrumentation field, who wishes to enhance their knowledge further and feel confident using the best practices when programming your PLC. Use the language that is best for the application.\nFor anyone who just wishes to enhance their knowledge.\n\n\nListed below are some of the topics I will cover with you in this course.\nIntroduction to SFC's incorporating Structured Text.\nCreating an SFC, the different components used.\nProgramming an SFC using Steps, Transitions and Actions.\nCreating Assignments and interpreting the Syntax used.\nUsing Expressions within an SFC.\nProgramming Constructs and Comments within an SFC.\nThis is just a short description of the things you will learn in this course. There is a lot of detail behind those titles.\nThere are a number of quizzes that you can complete after each section to help you reinforce your knowledge and gain confidence.\nOnce you finish the course, you will receive a certificate of completion.\nThe majority of the course consists of video tutorials where I will explain all the different aspects of SFC Programming and usage and demonstrate how it can be used.\nThe more you understand, the better you will be,\nSo if you are really serious about learning, Enroll Today.",
      "target_audience": [
        "Instrumentation and control systems personnel with some experience in PLC programming and it will be advantageous if you have exposure to using script type languages for programming but this is not essential. Anyone who has an interest and need to program Sequential routines."
      ]
    },
    {
      "title": "5G Lab for Service Based Architecture & Signaling",
      "url": "https://www.udemy.com/course/5g-service-based-architecture-and-signaling-practical-demo/",
      "bio": "Demonstration of 5G lab for better understanding of Service Based Architecture and End to End Signaling",
      "objectives": [
        "Highlight the need of lab setup to understand 5G end to end signaling",
        "Understanding 5G concepts in terms of current and future releases",
        "Providing a practical configuration example to understand Service Based Architecture of 5G",
        "Understanding 5G Protocols",
        "Providing details of Service Based Interface and HTTP/2 Protocols",
        "Demonstration of 5G lab to capture and understand end to end traces"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of 4G/5G and telecom fundamentals is preferred"
      ],
      "description": "This is the first course in our series of 5G lab based courses.\nIn this training program we will demonstrate the overall structure of our 5G lab.\nIn this course we will learn Following Topics\n1. 5G Basic Introduction,\n2. 5G Core architecture,\n3. 5G Architecture Framework\n4. 5G Service Based Architecture and Signaling with detailed description of AMF (Access Mobility Function), SMF (Session Management Function), UPF (User Plane Function), PCF (Policy Control Function), UDR (Unified Data repository), AUSF (Authentication Server Function), UDM (Unified Data Management), AF (Application Function), NEF, NRF, NSSF (Network Slice Selection Function). All the parameters explained with lab demonstration as well. We have also described the features which are new in 5G technology like NEF (Network Exposure Function), NRF (Network repository Function)\n5. Service Based Architecture of 5G Core Network\n6. Interaction between network functions / services follows two basic mechanisms\n7. Example Network Function AMF (Access Mobility Function)\n8. 5G Protocols,\n9. 5G User Plane Protocol Stack\n10. 5G Control Plane Protocol Stack\n11. SBI Protocol Stack\n12. Introduction to HTTP/2 for SBI (Service Based Interface)\n13. Benefits of HTTP/2\n14. Service API With Example\n15. Service and Service Operation Example\n16. NRF and NPF\n17. 5G Key Enabler Features like New Radio, Network Slicing, Massive MIMO, mmWave, ML/AI, MEC, NFV/SDN, Kubernetes, Cloud RAN, Front/Mid Haul\n18. High Level Call flow using lab,\n19. 5GS Reference Point Representation,\n20. Service based interface,\n21. Various network functions of 5GS,\n22. 5G SA End to End Call flow.\n23. Release 16 Study\n24. Release 17 Study\n25. All the parameters of 5G network architecture explained with lab demonstration",
      "target_audience": [
        "Anyone who would like to understand the working principal of 5G lab for 5G Service Based Architecture and end to end signaling"
      ]
    },
    {
      "title": "Communication Protocols: UART, USART, I2C, I3C, SPI, GPIO",
      "url": "https://www.udemy.com/course/communication-protocols-uart-usart-i2c-i3c-spi-gpio/",
      "bio": "UART RS232 and USART working, I2C and I3C, SMBUS working, SPI, Dual SPI and Quad SPI, GPIO functionality, OSI model",
      "objectives": [
        "Defines the basics in communication protocol",
        "Explains UART protocol and USART protocol",
        "Explains I2C protocol, SMBUS and I3C protocol.",
        "Explains SPI protocol, Dual SPI and Quad SPI",
        "Defines the features and functionality of GPIO"
      ],
      "course_content": {
        "Communication Protocol": [
          "Introduction",
          "Types of Communication",
          "Serial vs Parallel",
          "Parallel Communication Limitation",
          "Data Transfer Modes",
          "Data Transmission Modes",
          "OSI Model",
          "Communication Protocol Definitions",
          "Communication"
        ],
        "UART": [
          "Introduction",
          "UART Protocol",
          "UART signals and modes",
          "Baud Rate",
          "UART Packet Format",
          "UART Packet Flow",
          "UART Packet Flow example",
          "UART Pros and Cons",
          "RS232",
          "UART vs RS232",
          "RS232 Electrical Characteristics",
          "RTS and CTS",
          "RS232 Working",
          "RS422 and RS485",
          "Physical Connectors",
          "USART",
          "USART Modes",
          "UART"
        ],
        "I2C": [
          "Introduction",
          "I2C Protocol",
          "I2C signals and modes",
          "I2C Speed modes",
          "I2C Packet",
          "I2C Packet Flow",
          "I2C Address modes",
          "Multiple Slaves Connection",
          "Multi Slaves Packet Flow",
          "Master Arbitration",
          "Open Drain IO",
          "Repeated Start",
          "Clock Stretching",
          "I2C Debug options",
          "SMBus",
          "I3C Protocol",
          "I2C vs I3C",
          "I3C Packet flow",
          "I2C"
        ],
        "SPI": [
          "Introduction",
          "SPI Protocol",
          "SPI Signals and Speed",
          "Slave Select",
          "Multiple Slaves",
          "CPOL and CPHA",
          "SPI Clock Modes",
          "SPI Packet Flow",
          "SPI on 3 wires",
          "Dual SPI",
          "Quad SPI",
          "SPI"
        ],
        "GPIO": [
          "Introduction",
          "GPIO",
          "GPIO functions",
          "GPIO Applications",
          "Drive Strength",
          "IO Configuration",
          "GPIO"
        ],
        "UART vs I2C vs SPI": [
          "UART vs I2C vs SPI",
          "Conclusion"
        ]
      },
      "requirements": [
        "Basic knowledge in digital electronics required.",
        "No programming experience required. You can learn the complete communication protocol understanding of UART, USART, I2C, I3C, SPI and GPIO"
      ],
      "description": "A job oriented exhaustive course on low speed communication protocol in embedded systems or microcontroller interface for transmit data from master device to slave device.\nIn detail explanation on basics of communication protocol like data transfer modes, how and when data will be sampled and transmitted.\nUnderstand about open system interconnect (OSI) model for data communication.\nDetailed explanation on UART protocol including signals, modes, UART packet format and flow, RS232 working, RS 422 and RS485.\nDetailed explanation on I2C protocol includes signals, modes, I2C packet format and flow. Explanation on SMBUS - System Management Bus working. Understanding on I3C protocol and packet flow.\nDetailed explanation on SPI protocol includes signals, modes, SPI packet flow. Explanation on CPOL and CPHA and SPI clock modes. SPI on 3 wires, Dual SPI mode and Quad SPI mode.\nUnderstanding on GPIO functionality, its features, IO Driver strength. Explanation on different types of IO configuration.\nLoads quizzes to check your understanding about the communication protocols.\nUnlimited support with the instructor.\nAccess to all the materials and the future upgrades.\nAfter completing this course you can confidently understand how low speed communication protocols works in embedded system interface or PCB microcontroller.\nWork through the lessons at your own place.",
      "target_audience": [
        "Embedded systems Validation and Testing Enginneers. Electronics and Electrical graduates"
      ]
    },
    {
      "title": "Arduino Step by Step: Getting Started",
      "url": "https://www.udemy.com/course/arduino-sbs-17gs/",
      "bio": "The original comprehensive course designed for new Arduino Makers",
      "objectives": [
        "Build simple circuits around the Arduino Uno, that implement simple functions.",
        "Write simple Arduino sketches that can get sensor reading, make LEDs blink, write text on an LCD screen, read the position of a potentiometer, and much more.",
        "Understand what is the Arduino.",
        "Understand what is prototyping.",
        "Understand analog and digital inputs and outputs",
        "Understand the ways by which the Arduino can communicate with other devices",
        "Use the multimeter to measure voltage, current, resistance and continuity",
        "Use protoboards to make projects permanent",
        "be productive with the Arduino IDE, write, compile and upload sketches, install libraries",
        "Understand what is Arduino programming, it's basic concepts, structures, and keywords",
        "Detect and measure visible light, color, and ultraviolet light",
        "Measure temperature, humidity and acceleration",
        "Measure the distance between the sensor and an object in front of it",
        "Detect a person entering a room",
        "Detect a noise",
        "Make noise and play music",
        "Display text on a liquid crystal display",
        "Learn about the Arduino IDE 2.0 and the Arduino Web Editor"
      ],
      "course_content": {},
      "requirements": [
        "A Windows, Mac or Linux computer",
        "An Arduino Uno",
        "Electronics parts like resistors, LEDs, sensors, as listed in Section 1 of the course",
        "Essential tools: a mini breadboard, jumper wires, a multimeter, a soldering iron and solder, wire cutter",
        "Be excited about electronics!"
      ],
      "description": "Course last updated in December 2024\nI have updated Arduino Step by Step Getting Started with an exciting new section on using online Arduino simulators to accelerate your learning and development. These tools allow you to design, test, and debug Arduino projects without physical hardware, saving time and resources. The new lectures introduce two powerful simulation platforms: Wokwi and Tinkercad. They provide detailed examples and hands-on exercises to help you get started.\n\n\nThe new section features a variety of practical examples, including simple LED blink and fade circuits, projects using potentiometers and digital sensors like the DHT22 and HC-SR04 ultrasonic sensor, and more advanced setups incorporating I2C LCDs and servos. Each example is demonstrated in both Wokwi and Tinkercad, allowing you to compare the capabilities of these platforms and choose the one that best fits your needs. Whether you’re a beginner or looking for a way to prototype your ideas faster, these new lectures make exploring and experimenting with Arduino projects easier than ever.\nCourse updated in August 2024\nI have updated this course with a new section covering the new Arduino Uno R4 Minima. This new Model offers a powerful and cost-effective upgrade over the classic R3. It has a faster processor and more memory, perfect for advanced projects with a compact form factor.\nIf you are interested in the Arduino Uno R4 WiFi, please know that I have updated Arduino Step by Step Getting Serious with a new section that covers that specific board.\nYou can complete this course using the classic R3 or the new R4 Minima board.\n\n\nUPDATED: OCTOBER 2022\nMy flagship course, designed for people new to electronics and programming, has received a comprehensive update!\nI have added new lectures in the first half of the course. They are in the sections “Know your Arduino Uno,” “Arduino boards and kits,” and “The Arduino IDE.”\nIn these lectures, I cover the latest developments in Arduino software and hardware, including the Arduino Web IDE, the upcoming Arduino IDE 2.0, and the modern Arduino MKR and Nano IoT board families.\nI have also verified all links to external websites and other resources, like data sheets, and in many cases, we have added new links to external resources.\n\n\nUPDATED: January 2020\nI have updated this course with a new section on using arrays in Arduino sketches. This is a very useful skill, as it allows you to program repetitive tasks with just a few lines of code. Enjoy!\n\n\nAbout this course\nThis is the original, legendary Arduino course on Udemy by Tech Explorations, which is fanatically supported by Dr. Peter Dalmaris.\nThousands of students trust it, and it contains over 16 hours of content, quizzes, a GitHub code repository, thousands of active student discussions, and countless downloadable and linked resources.\nPlease don't be confused by other courses with a similar name.\nThis course is for the new Arduino Maker.\nDo you have a passion for learning?\nAre you excited about becoming a Maker with the Arduino?\nIf you answered \"yes!\" to both, you are ready to start!\nIn this course, I emphasized the importance of getting the basics right and learning to mastery. As an educator for over 15 years, I know first-hand that hitting a roadblock because you lack the fundamental knowledge to progress can be demotivating.\nIn Arduino Step by Step Getting Started, I ensure that the more than 19 hours of video content, mini projects, and quizzes cover all the basics so you can enjoy learning about Arduino.\nBy the end of the course, you will have a good understanding of the capabilities of the Arduino Uno, the best Arduino for beginners, and you will be familiar with the capabilities of several of its cousins.\nYou will be comfortable with the basic prototyping tools and their usage and the basics of the Arduino programming environment, language, and programming.\nYou can use a variety of components, from simple buttons and LEDs to visible color, ultraviolet light, and other environmental sensors.\nIn this course, you will learn to use the components I demonstrate. You will also learn to read datasheets, use libraries independently, and create the gadgets you want. With knowledge comes freedom, and I will help you achieve it.\nI invite you to review the free lectures in the first section of the course to learn more details about it.\nIf you are excited about becoming a Maker with the Arduino, join many other Makers and me in Arduino Step by Step Getting Started!\nI look forward to learning with you!",
      "target_audience": [
        "Students over 10 years of age, or younger with with adult supervision. Young students should be supervised at all times when using a soldering iron.",
        "Students with a little or no prior experience with electronics or programming."
      ]
    },
    {
      "title": "Design a CPU",
      "url": "https://www.udemy.com/course/design-a-cpu/",
      "bio": "Computer Architecture and Design",
      "objectives": [
        "Design and Simulate an 8 BIT CPU",
        "Create your own INSTRUCTION SET",
        "Create your own ASSEMBLY LANGUAGE",
        "Create your own ASSEMBLER in EXCEL",
        "Create your own assembly language DEBUGGER in EXCEL VBA",
        "Write your own assembly language PROGRAMS",
        "Put simply , 'IF YOU WANT TO KNOW HOW A COMPUTER WORKS THEN TAKE THIS COURSE !!!'",
        "That's right , 'IF YOU REALLY WANT TO KNOW HOW A COMPUTER WORKS THEN TAKE THIS COURSE !!!'",
        "Subtitles added in 78 different languages"
      ],
      "course_content": {
        "RAM , ALU , Registers and Clock": [
          "Introduction",
          "Logisim",
          "Simple Gates",
          "Building Blocks",
          "1 Bit Memory Cell",
          "1 Byte Memory Cell",
          "8 Bit Register",
          "Decoder",
          "Automated Design",
          "Control Buffer",
          "Random Access Memory",
          "Arithmetic Logic Unit",
          "Clock",
          "Central Processing Unit Overview"
        ],
        "Can a computer tell you the answer to Life the Universe and Everything (42) ?": [
          "Algorithms",
          "Turing Machine"
        ],
        "Control Section": [
          "Control Section Add 2 Numbers",
          "Control Section Stepper",
          "Control Section Fetch Cycle",
          "Control Section ALU Instruction",
          "Control Section Load and Store Instructions",
          "Control Section Data Instructions",
          "Control Section Jump Register Instruction",
          "Control Section Jump Address Instruction",
          "Control Section Jump If Instruction",
          "Control Section Clear Flags Instruction"
        ],
        "Assembly Language (Assembler and Debugger)": [
          "Assembler",
          "Assembly Language Program",
          "Assembly Language Debugger"
        ],
        "Load and Run a Program": [
          "CPU",
          "Reset the CPU",
          "Load Program into CPU",
          "Top Level Simulation",
          "Goodbye"
        ],
        "New Design and Some other Interesting Stuff": [
          "New Design",
          "Debugger VBA Code Explained",
          "Fibonacci Series in Assembler Full Design",
          "Build a 16 Bit CPU",
          "DESIGN A CPU 2 (SUPERCHARGED)"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You need a computer. Also I would suggest a book called ButHowDoItKnow , The Basic Principles of Computers for Everyone by J. Clark Scott."
      ],
      "description": "If you want to know how a computer works then this course is for you. I work through the design of a simple CPU (Central Processing Unit) which is the beating heart of a modern computer. I design and simulate each block of the CPU in an online tool called Logisim. You can download the tool and simulate the CPU on your own computer or if you  like you can take a copy of my simulation files and just load them into the tool and simulate what you have learned in the videos or just listen along to the videos (it's up to you).\nI have added subtitles for 78 different languages. If your language is not there then get in touch and I will add it in. If you are not a native English speaker then try the subtitles and run the videos at 0.75x speed.\nFirst we download the free design tool called LOGISIM in which we design and simulate our CPU and take a look around the tool and show you how it works. Then the fun begins. We design and simulate the following blocks\nSimple logic gates\n1 bit memory cell\n8 bit memory cell\n8 bit register\nDecoder\nRAM (Random Access Memory)\nALU (Arithmetic Logic Unit)\nClock\nWe then take a break from our hard work (pheeewww!!!) and ask the question ,  ' Can a computer answer the question of Life the Universe and Everything ? '  We look at some of the ideas behind what a computer is and what it can and more importantly cannot do ! We answer this question in the next two videos.\nAlgorithms\nTuring Machines\nAfter this little break we then get back to designing our CPU. We design and simulate the most difficult section called the Control Unit. This is where the MAGIC happens and you will get that amazing EUREKA moment when you can say, ' I KNOW HOW A COMPUTER WORKS !!! ' In this section we build up the INSTRUCTION SET within the CONTROL UNIT. This INSTRUCTION SET consists of :\nFETCH EXECUTE Cycle\nALU Instructions\nLOAD and STORE Instructions\nDATA Instruction\nJUMP REGISTER Instruction\nJUMP ADDRESS Instruction\nJUMP IF Instruction\nCLEAR FLAGS Instruction\nWe then build up an ASSEMBLER in Microsoft Excel (what's an assembler ? Once you get to this point you will know and you will be home and dry !)\nWe then model the CPU using Excel VBA and from this build an ASSEMBLY LANGUAGE DEBUGGER. This will help us write our ASSEMBLY LANGUAGE PROGRAMS. Finally we are in a position to load the CPU up with our first assembly language program. An algorithm that multiplies 2 numbers together (might not sound like much but you can then design your own algorithms and simulate them on YOUR OWN CPU).\nWe then look at the Top Level Simulation. We load up the CPU RAM (memory) with our first program and watch it running through the program live right in front of our eyes. You can let it execute the code quickly or you can step through a 0 and a 1 at a time and see every little detail of what is happening inside the CPU that YOU have just designed !!!\nAlso keep a look out in the bonus section for extra material that I will be periodically adding. I expand the CPU from 8 bits to 16 bits , create some more assembly language algorithms that run on the CPU and explain in detail the VBA code from the assembler and debugger (PLUS MORE TO COME).\nThis course follows the CPU design in the book ButHowDoItKnow (The Basic Principles of Computers for Everyone). THIS COURSE IS FEATURED ON THE AUTHORS WEBSITE. You do not need to buy the book to follow the course but I would highly recommend the book.\nIF YOU WANT TO KNOW WHAT LIES AT THE HEART OF A COMPUTER AND HOW IT WORKS THEN THIS IS THE COURSE FOR YOU !!!",
      "target_audience": [
        "Everyone and anyone who asks the question ' How do computers work ?'"
      ]
    },
    {
      "title": "Raspberry Pi Step By Step: You Complete Guide",
      "url": "https://www.udemy.com/course/raspberry-pi-step-by-step-you-complete-guide/",
      "bio": "Master software and hardware projects creation using Raspberry Pi and Python.",
      "objectives": [
        "Setup the Raspbian operating system to the RPi",
        "Wire up your Raspberry Pi to create a fully functional computer",
        "Use and Learn Python programming language",
        "Write Python code to control the Raspberry Pi hardware",
        "Install the a Python virtual environment",
        "Use the RPi GPIOs as digital input and outputs",
        "Light up LEDs by controlling the Raspberry Pi hardware",
        "Read Signal from sensors and switches by controlling the Raspberry Pi hardware",
        "Use Light Sensor and Motion detector sensor",
        "Learn and use simple Linux commands",
        "Write a Python program to create a simple calculation method and other useful applications",
        "Know Basics of Linux and Python"
      ],
      "course_content": {},
      "requirements": [
        "A Raspberry Pi, any version (Optional)",
        "A Windows, Mac or Linux computer",
        "A LED",
        "Resistors",
        "A breadboard and jumper wires",
        "Access to the Internet"
      ],
      "description": "Welcome to the ultimate guide to mastering the Raspberry Pi! This comprehensive course is designed for both beginners and experienced enthusiasts looking to deepen their knowledge and skills in using this versatile microcontroller. Whether you’re looking to automate your home, build a robot, or create a personal weather station, this course covers it all.\nWhy You Should Take This Course?\nThis is a complete guide course. The tutorials are broken down into step-by-step lessons.\nLearn how to program in Python and create a Raspberry Pi robot.\nConnect to other hardware like Arduino.\nCreate a virtual machine with Linux to run Windows software without rebooting your computer.\nBuild a weather station for your backyard so you know what to wear tomorrow.\nBreak down and solder together simple electronics circuits without worrying about accidentally frying the board.\nContinual Updates\n2.5 Hours of HD Content | 3.8 Star | More Than 650 STUDENTS!!! THANK YOU!!!\nWhat Students Are Saying:\n\"The content is comprehensive and everything is clear, the instructor is easy to follow and the overall experience is really great, everything I needed to know is there.\" - Sami Mousa\n\"Fab so far for a Newbee!\" - Lisa Jane\nWhy Raspberry Pi?\nRaspberry Pi is a credit card-sized computer that has a processor, memory, and can be connected to any screen, booting up like a fully functional computer at a very low cost starting at $25.\nIn this newest course, Raspberry Pi Step By Step: Your Complete Guide, you will be taken from the very beginning. Everything will be covered, starting from why Raspberry Pi board is much better than PIC Microcontroller and ending in how you can write a code to control its pins just like in a microcontroller.\nThings You Will Learn:\nTurn any old TV into a SMART TV using Raspberry Pi board.\nProgram a code in Python that can take sensor signals as input and send light signals as output (No previous Programming knowledge needed).\nGet inside the IOT (Internet of Things) world and start making your own awesome project that can make everybody’s life easier.\nInstall Linux for the first time and learn to deal with it like a professional.\nControl the Raspberry Pi board remotely with more than three different ways.\nLearn how Raspberry Pi boards can be used to make a supercomputer.\nRaspberry Pi board provides tons of libraries that make controlling sensors and handling data a really easy job. No need to make any PCB, just buy the board and plug it into any screen, and you are good to go.\nSpecial Offer All of my students can get a special price ($10) for any of my courses. I have 10 courses; check them, choose what you want, and message me for your discount.\nWhat You Will Learn\nTurn any old TV into a SMART TV.\nProgram in Python for sensor and light signal control.\nDive into IoT projects and create practical applications.\nInstall and operate Linux on Raspberry Pi.\nRemotely control Raspberry Pi in various ways.\nUse Raspberry Pi for building supercomputers.\nWho Is This Course For\nHobbyists interested in Raspberry Pi projects.\nStudents and educators seeking practical applications of microcontroller technology.\nBeginners with no prior programming or Linux experience.\nAnyone interested in DIY projects and automation.\nRequirements\nNo prior knowledge of programming or Linux required.\nA Raspberry Pi board (optional).\nA computer with internet access to download software and updates.\nEnthusiasm and willingness to learn!\n\n\nAbout the Instructor Info Educational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge - we go into the depth of the topic and give you the exact - step by step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years - we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million View, 20k+ Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology, helping educate the world to make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and provide guidance and consulting for many students over the years to help them kick-start their career.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, particularly for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers courses on\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Ability to wire electronics",
        "Ability to do independent research using online resources",
        "Ability to Practice Not Just Watch"
      ]
    },
    {
      "title": "15 Days Arduino Masterclass: 15 Days Bootcamp",
      "url": "https://www.udemy.com/course/arduino-step-by-step-your-complete-guide/",
      "bio": "In this Arduino Bootcamp you will learn Arduino in a Step By Step Manner and you will be able to do practical Projects",
      "objectives": [
        "Start to programming Arduino",
        "Siscover things that will help you to excel in Arduino programming",
        "Simulate Arduino Boards UNO, Mega, nano and others in Windows Environment",
        "Write codes and test them without having an Arduino Board",
        "Choose the right board that fulfills your needs",
        "What is the main difference between each of the boards and why one is better than the other",
        "Make your own Arduino Board",
        "Bootload Your Arduino",
        "Know what is the actual brain of an Arduino",
        "Link Arduino with Raspberry Pi",
        "Protect Your Raspberry Pi using Arduino as Interface between Raspberry and heavy devices",
        "Make your own Web Controlled System using Arduino",
        "Learn Working Principle of Ethernet Shield and web control",
        "Interface Ethernet Shield with Arduino",
        "Control Arduino from Your own Mobile Phone",
        "Make a Home Automation System using Bluetooth",
        "Build your own Radar Using UltraSonic",
        "Know UltraSonic Sensor, Servo Motor, Arduino C and Java Coding",
        "Know more about Arduino and coding different modules such as Servo, SR04",
        "Make your own Motion Detector Device",
        "Learn Working Principle of Motion Detectors",
        "Interface Motion Detector with Arduino",
        "Build your own Weather Station",
        "Know Temperature and Humidity Sensor",
        "Know more about Arduino and coding different modules such as LCD, DHT11 and RTC",
        "Make your own Automatic Irrigation System with Arduino",
        "Learn Working Principle of Irrigation systems and Soil Moisture Sensors",
        "Interface Soil Moisture Sensors with Arduino",
        "Automate the Irrigation Process using Arduino",
        "Make your own Arduino Alarm Clock",
        "Interface Real Time Clock Module with Arduino",
        "Learn Working Principle of Real Time Clock DS3231",
        "Interface LCD with Arduino",
        "Make your own Arduino Wireless Powered Project",
        "Learn How Wireless Electricity Can be transmitted using Arduino",
        "Learn Working Principle of Wireless Power Transmission"
      ],
      "course_content": {
        "DAY –1: Before You Start > How This Course is Structured": [
          "How This Course is Structured",
          "Very Important Note: Review Process"
        ],
        "DAY –2: Simulate Arduino Boards and Test Your Code": [
          "Introduction",
          "Preparing for an Intensive Arduino Bootcamp",
          "Installing Arduino Library For Proteus",
          "Component List",
          "Downloading and Installing Proteus Software",
          "Adding Arduino Library to Proteus",
          "Downloading and Installing Arduino Coding Software",
          "Simulating Arduino Boards in Proteus",
          "Quiz"
        ],
        "DAY –3: Start Testing": [
          "Your First Code in Arduino Coding Software",
          "Editing the code and Getting the Hex File",
          "Load the hex file and Run the Simulation",
          "Creating and Testing Your First Arduino Program",
          "Quiz"
        ],
        "DAY –4: Things You need to know": [
          "Introduction",
          "What is Arduino",
          "The holes in board",
          "How to do it",
          "The Breadboard",
          "How does Arduino thinks?",
          "Putting together Your First circuit",
          "Cut and paste coding",
          "Circuit diagram",
          "Building and Coding Your First Arduino Circuit",
          "Quiz"
        ],
        "Practical Work": [
          "Inputs: Buttons",
          "Analog Input: Potentiometer",
          "Analog Input: IR sensor",
          "Free Arduino Resources Websiters for Codes and Schematics",
          "Building and Testing Inputs with Arduino",
          "Quiz"
        ],
        "DAY –5: Arduino Vs Raspberry PI Vs PIC Microcontroller": [
          "Introduction",
          "What is Arduino Raspberry Pi and PIC Microcontroller",
          "Quick summary of the main differences",
          "Hardware: Power and Connectivity",
          "Hardware: IO Pins Storage and USB",
          "Software Comaprison",
          "Expanding Onward Capablities",
          "How to decide Which one",
          "Understanding the Differences Between Arduino, Raspberry Pi, and PIC Microcontro",
          "Quiz"
        ],
        "DAY –6: Make Your Own Arduino Board at Home": [
          "Introduction",
          "Basic Parts Requirements",
          "Parts needed to get the job done",
          "Wire up a power supply",
          "ATMEGA Introduction",
          "ATMEGA Connection",
          "Arduino Ready",
          "Bootloading your chips optional",
          "Finish up and burn the bootloader",
          "Constructing and Bootloading Your Own Arduino Board",
          "Quiz"
        ],
        "DAY –7: Connect and Interface Raspberry Pi with Arduino": [
          "Introduction",
          "Raspberry Pi Connections",
          "Raspberry Pi Code",
          "Raspberry Pi Configuration and Code",
          "Raspberry Pi Circuit Diagram",
          "Arduino Code",
          "Arduino Configuration",
          "Cable needed to Connect both boards together",
          "Arduino Raspberry Pi Connection",
          "Finishing Configuration",
          "Editing Your Code with the Right USB Port Number",
          "Completing Python Setup",
          "Final Step The End Of This Section",
          "Last but not least",
          "Connecting and Configuring Raspberry Pi with Arduino",
          "Quiz"
        ],
        "DAY –8: Arduino Web Control: Step By Step Guide": [
          "Introduction",
          "Required Materials",
          "Circuit Diagram",
          "Code",
          "Code Overview",
          "Code Explanation Part One",
          "Code Explanation Part Two",
          "Code Explanation Part Three",
          "Resources",
          "Setting Up Web Control for Arduino",
          "Quiz"
        ],
        "DAY –9: Arduino Bluetooth": [
          "Introduction",
          "Hardware and Software Components",
          "Let's Start Building",
          "How does it works",
          "Android Application",
          "Note",
          "Schematic",
          "Code",
          "Testing Code",
          "Creating a Bluetooth-Controlled Arduino Project",
          "Quiz"
        ]
      },
      "requirements": [
        "You must be familiar with Internet browsing",
        "You must have the Will to apply not just watch"
      ],
      "description": "15 Days Arduino Masterclass: Bootcamp\nFor some, making things is second nature. However, for the more introverted among us, this motivation to make can be difficult to come by. Arduino makes it easy to get started with simple tools like an Arduino starter kit. As the computer revolutionized the world of electronics, robotics, and cyber security, it is no surprise that Arduino boards are quickly becoming an integral part of the maker world. This single-board microcontroller has made it possible for any person to take their ideas from concept to prototype without knowing anything about electronics or coding. The possibilities only seem to be limited by your imagination.\nSo, ARE YOU READY? To learn the basics of Arduino programming quickly with this tutorial! This course will teach you how to create Arduino sketches for real-world projects. It outlines the hardware needed, shows you how to use it, provides tutorials for wiring your circuits, coding your sketches, and more. It even shows you how to write your own library.\n\n\nWhat You Will Learn:\nDAY –1: Getting started and How This Course is Structured\nDAY –2: Simulate Arduino Boards and Test Your Code\nDAY –3: Start Testing\nDAY –4: Things You Need to Know\nDAY –5: Arduino Vs Raspberry PI Vs PIC Microcontroller\nDAY –6: Make Your Own Arduino Board at Home\nDAY –7: Connect and Interface Raspberry Pi with Arduino\nDAY –8: Arduino Web Control: Step-by-Step Guide\nDAY –9: Arduino Bluetooth\nDAY –10: Arduino Radar\nDAY –11: Arduino Motion Detector: Step-by-Step Guide\nDAY –12: Arduino Weather Station\nDAY –13: Automatic Irrigation System with Arduino\nDAY –14: Arduino Alarm Clock Using a Real Time Clock and LCD Screen\nDAY –15: Arduino Wireless Power Transmission\n\n\nContinues Updates\nMore Than 7300 STUDENTS!!! THANK YOU!!!\nBonus!\nWhen You Join This Course You Will Get Arduino Practice Test: Get Certified and Test Your Skills Course For FREE (Usually worth $200) in the Bonus Section, in which you will test Your PIC Microcontroller Skills with more than 100 Questions. This is the only Arduino Practice Exam course on Udemy that has timed test-taking ability and provides interactive, section-level feedback.\nWhy you should take this course?\nYou will learn Arduino in a Step By Step Manner.\nYou will be able to do practical projects.\nLearn skills like basic engineering, programming, electronics, and IoT.\nIt is an online course with videos and downloadable information.\nYou will develop an understanding of the fundamental principles behind interactive multimedia systems and interactive applications.\nWelcome to this course.\nThe instructor is a highly experienced hardware developer with a strong background in Arduino development. He has also been teaching programming since 2010 and has mastered the art of delivery. This course is designed to introduce the Arduino hardware and programming environment to get you started on building projects as soon as possible.\nThe Arduino is an open-source electronics platform based on easy-to-use hardware and software. Sensing the environment by receiving inputs from many sensors, Arduino affects its surroundings by controlling lights, motors, and a number of other accessories. It's intended for anyone making interactive hardware projects.\nNo experience is required, and all you need is an Arduino. This course is designed for anyone interested in Arduino with zero background knowledge.\nStart working with different Arduino boards without buying them and start unleashing the power of code in Simulation\nContents and Overview:\nThis course is designed for anyone interested in learning electronic design. No experience is required, and all you need is a computer.\nBoards that can be Simulated:\nArduino Uno\nMega\nNano\nZero\nOthers\n\n\nWho is This Course For:\nBeginners in Arduino and electronics.\nHobbyists and DIY enthusiasts.\nStudents and educators in electronics and programming.\nAnyone interested in learning about Arduino and its applications.\nRequirements:\nNo prior experience required.\nBasic understanding of electronics is helpful.\nWillingness to learn and experiment with Arduino projects.\nAbout the Instructor:\nEducational Engineering Team\nTeam of Skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading entity in the Microcontroller industry with over 13 Years of Experience in teaching and practical projects. We provide in-depth, step-by-step blueprints on taming complex topics in easy and digestible bite-sized videos.\nHaving been in the Programming and Microcontroller business since 2007, we've catered to students' and educators' needs, teaching over 250k-THOUSAND students and counting through our 100+ courses on Udemy.\nAshraf Said AlMadhoun is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He is the Chief Educational Engineer at Educational Engineering Team, a company founded to explore new trends and technologies and to educate the world.\nOur online courses have helped over 250,000 people globally to excel and make great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Arduino Geeks",
        "Electronics Geeks",
        "Hardware developers",
        "Anyone with slight interest in making great things",
        "Anyone looking to learn Arduino but don't want to buy the boards",
        "Anyone starting their journey in Microcontrollers",
        "Anyone Interested in Learning New Things about Arduino",
        "Anyone Interested in Knowing how Arduino board actually works",
        "Anyone Interested in Knowing what each component inside Arduino Board does",
        "Anyone Interested in Learning How to protect Raspberry Pi using Arduino",
        "Anyone Interested in Learning Arduino Web Control",
        "Home Automation Geeks",
        "Anyone Interested in Learning Making Automatic Irrigation System with Arduino",
        "Anyone Interested in Learning How to make Arduino Alarm Clock",
        "Wireless Power Transmission Geeks",
        "Anyone Interested in Learning Wireless Electricity/Power Transmission using Arduino",
        "Anyone Interested in Learning How Wireless Electricity/Power Transmission Works"
      ]
    },
    {
      "title": "Laptop Repairs Using Schematics Diagrams",
      "url": "https://www.udemy.com/course/laptop-repairs-using-schematics-diagrams/",
      "bio": "How to read laptop motherboard schematics diagrams",
      "objectives": [
        "After this course, you will be able understand laptops schematics for all brands like HP, MacBook, Acer, Lenovo, Dell, Asus and other brands.",
        "You will be able to use schematics to diagnoise and fix easy and complex issues in new and old laptops including MacBook and gaming machines.",
        "With this skill, you will be able to multiply your income since fixing complex issues is highly demanded earns a significant amount of money.",
        "You will be able to identify motherboard components like transistors, MOSFETs and be able to use a multimeter to diagnose and fix them.",
        "Boot sequence, Power Rails, 3.3V, processor power, Ram power, short circuit Repair, KBC power and more are all covered in this course."
      ],
      "course_content": {
        "Introduction": [
          "Laptop Repairs Using Schematic Diagrams",
          "Course Overview"
        ],
        "Laptop Repairs Using Schematics Diagrams": [
          "How to Download Schematics Diagrams",
          "What a Boardviews and How to Use Them",
          "Understanding the Meaning of Motherboard Labels",
          "Component Specifications on the Motherboard",
          "Disassembly Clues and Test Points",
          "How to Search for Components in Schematic Diagram",
          "Resistors, Capacitors in Schematics Diagrams",
          "MOSFETs, Diodes and Transistors in Schematics Diagrams",
          "Coil and Crystal Oscillators in schematics Diagrams",
          "Laptop Processor in Schematics Diagrams",
          "RAM in Schematics Diagrams",
          "Motherboard Ground in Schematics Diagrams",
          "Embedded Controller (KBC) and Motherboard Chain of Command",
          "Motherboard Rails or Wires in Schematics Diagrams",
          "Battery, Screen & USB Connectors in Schematics",
          "Block Diagrams & Power Section in Schematics Diagram",
          "Schematics Pages and Content",
          "Schematics Pages and Content Part 2",
          "Schematics Codes, Signal Names & their Functions",
          "Laptop Power UP Sequence part 1",
          "Laptop Power UP Sequence part 2",
          "Voltage Flow in Schematics Diagram",
          "Repairing HP ProBook 4540s following its schematic Diagram"
        ]
      },
      "requirements": [
        "For this course you will need a pdf reader device this may be a phone, Computer or Tablet for viewing pdf schematics diagrams.",
        "You will also need a motherboard for physically seeing what we shall be talking about, this might be old, new or probably not working condition."
      ],
      "description": "Hello, welcome to laptop repairs using schematics course, In this course, I will teach you how to read and understand electronic drawings with more emphasis on Laptop schematics diagrams.\nMy name is Chaz, and I am privileged to be your instructor in this course, I have been fixing and servicing computers for more than 6 years. I have also been teaching laptop repairs in person and online for some time. Online I have been teaching on YouTube, Zoom, and Meet. I am happy that most of my students have benefited from my lessons. Many of them have started up businesses and others have got good-paying jobs.\nAs someone who has been repairing for a long time, I know the challenges of learning laptop repairs especially if you are learning by yourself, that is why I decided to create this course to share my knowledge and experience with you and everyone.\nAfter this course, you will be able to use schematics diagrams to diagnose and fix many laptop brands like\nHP\nDell\nAsus\nAcer\nLenovo\nand many more.\n\n\nYou will also be able to read Apple schematics diagrams which will enable you to fix apple devices like\nMacBooks\niPads\niPhones\nand many other Apple products.\n\n\nYou will also be able to fix complex laptop issues like\nLaptops that don't power on\nShort circuits\nWater damage or liquid spill\nNo display\nTurns on with flashing caps lock with no display\nTurns on with a beeping sound with no display\nFreezing on the logo\nBlue screen\nNot charging\nand many more.\nThroughout this course, you will have access to over 23 well-created videos with an easy-to-understand approach so that you can learn easier in a short time.\n\n\nThis course is for you if\nYou want to advance your skills in laptop repairs,\nYou want to start a computer business,\nYou have been fixing phones or TVs and want to include laptop as part of your service,\nYou want to learn how to read electronic drawings,\nYou want to understand how computers work in-depth,\nYou are an IT or computer science students who would like to widen your knowledge regarding computer hardware,\nAnd also if you are a hobbyist who is curious and maybe want to fix your own laptop, this is the right course for you.\nSo don't hesitate, I encourage you to join this course now and see how this skill can change your life.",
      "target_audience": [
        "This course is for people who are computer | phone repair Technicians, IT specialists, Computer science students who would like to easily understand computer motherboards and all other electronics repair Technicians.",
        "This course is also for hobbyists who would like to fix their own computers plus all those curious to discover how computer motherboards work to chip chip level."
      ]
    },
    {
      "title": "How to Clean Your Computer: Clean your Computer like a Pro",
      "url": "https://www.udemy.com/course/how-to-clean-your-computer-a-beginners-guide/",
      "bio": "Learn Step-by-step how to clean your computer, no software purchase or hiring others to do it for you.",
      "objectives": [
        "Clean your PC removing Virus, Spyware, Malware and more",
        "Remove potential threats to your files",
        "Mantain your PC without paying a cent to anyone else!",
        "Increase the speed of your Computer"
      ],
      "course_content": {
        "Introduction": [
          "Knowing your Instructor"
        ],
        "Virus, Malware and Other Threats to your system": [
          "What Viruses Can Do? Keep an Eye on this things",
          "Spyware and Malware: Your system's silent enemy"
        ],
        "Clearning your Computer": [
          "Recommended AntiVirus",
          "Anti-Spyware and Malware",
          "Where to download the tools?"
        ],
        "Prevent Future Attacks": [
          "Keeping your Windows PC always up to date",
          "Protecting your PC in AutoPilot (Let the PC do the hard Work)"
        ],
        "Boost your PC productivity": [
          "Backup Your Files: Keep Safe your Important Stuff",
          "Recommended Hardware: The best upgrades for your PC",
          "Browsers Tip and Tricks: Be more productive on the Internet!",
          "Removing Unused Software: Gain even more Space!",
          "Power Settings: Get the most of your PC with less Energy as Possible"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "No experience or technical knowledge required"
      ],
      "description": "NEW VERSION 2016!\nTake back the control and give your PC its POWER back!\n\n***This course is perfect for beginners who want to clean a PC! I designed this step-by-step guide to help you get rid of all the dangerous viruses, spyware and more. From the basics to the more advanced techniques, to help you fix your computer!***\nIs your computer running very slow lately? Are you trying to get things done but it takes FOREVER to load anything? Or maybe you enter in a website and your screen gets flooded with windows and annoying pop-ups?\nYour PC might be infected with viruses and spyware!\nHave you ever taken your PC to a repair shop or hired a “specialist\" to take care of your computer problems?\nAren't you tired of paying people hundreds or even thousands of dollars to clean your PC OVER AND OVER again?\nIf you answered to yes, then this course is for you!\nIn this course you'll discover how to install, use and even set-up in automatic mode all the tools to clean your PC, so you can worry about nothing! I'll give you a list of the most used and powerful tools to maintain your PC clean and fast!\nAnd the best part is: You'll see the results for yourself without even finished my course!",
      "target_audience": [
        "You don't need to know complicated computer terminology",
        "This course is for people who want to keep their PC clean and tuned-up all the time, without paying A CENT to anyone to do it.",
        "If you're constantly feeling that your PC is SLOW and you can't work properly, this course is for you!"
      ]
    },
    {
      "title": "Node-RED and Raspberry Pi Pico W Getting Started",
      "url": "https://www.udemy.com/course/node-red-and-raspberry-pi-pico-w-getting-started/",
      "bio": "Learn Node-RED, Raspberry Pi Pico W, and MicroPython, and add these state-of-the-art tools to your technology toolkit.",
      "objectives": [
        "Node-RED in IoT and event-driven systems.",
        "Setting up an Ubuntu virtual machine as a Node-RED host.",
        "Node-RED using Docker.",
        "Docker persistence volumes.",
        "Raspberry Pi Pico and MicroPython.",
        "Using MQTT to enable communications between Node-RED and Raspberry Pi Pico W.",
        "Node-RED security options.",
        "Understanding the Node-RED editor, nodes, flows, creating and deploying.",
        "Node-RED dashboard and widgets.",
        "MQTT installation, testing, authentication.",
        "Use various hardware components with the Raspberry Pi Pico W: switches, buttons, joystick, LCD, RGB strip, servo and DC motors, RFID, IR, sensors.",
        "Node-RED and advanced nodes like RBE, switch, catch. Flow groups, secure credentials, environment variables.",
        "Node-RED with external services and APIs: RESTful APIs, OpenWeatherMap, Google Sheet.",
        "Node-RED with mySQL."
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of microcontrontollers.",
        "Knowing how to wire a simple circuit on a breadboard.",
        "Beginner-level experience with a programming language like Python, Javascript or C++ (all code in the course is explained in detail).",
        "Having completed an introductory course on microcontrollers, such as Arduino Step by Step Getting Started, will help you make the most of this course."
      ],
      "description": "Update August 2025\nI uploaded the Node-RED flow JSON files for the lectures of section 13 to the course Github repository.\n---\n\n\nI've created this course to help you learn Node-RED and the Raspberry Pi Pico W. Whether you're an engineering educator, a student, an industrial automation professional, a research scientist, or an electronics hobbyist, these two technologies are essential.\nNode-RED is an incredible open-source software development tool that allows you to create programs visually instead of writing them line by line.\nThe Raspberry Pi Pico W is a remarkable Wi-Fi microcontroller board for embedded projects. It offers high performance at a low cost.\nThis course teaches you how to set up a system that contains Node-RED and the Raspberry Pi Pico W .\nYou'll gain a solid understanding of Node-RED nodes, flows, and even MicroPython, enabling you to program the Pico W to interact with various peripherals. Additionally, this course covers essential topics such as MQTT, Ubuntu Linux virtual machines, Docker, and MySQL.\nDesigned specifically for beginners with a basic knowledge of electronics, this course will guide you step-by-step through everything you need to know.\nPart 1: Node-RED for the absolute beginner\nPart 1 is dedicated to Node-RED for the absolute beginner. In Part 1, you will learn about Node-RED and event-driven systems, how to install an instance using Docker, the basics of nodes and flows, the dashboard and MQTT.\nPart 2: Add Raspberry Pi Pico W\nIn the lectures of Part 2, you will learn how to use the Pico W as a Node-RED peripheral. You will learn to use MQTT to enable communications between the Pico and the Node-RED instance. You will also learn how to connect different hardware components to the Pico to implement simple circuits and use Node-RED (and its Dashboard) to control these components or view the data they produce. In Part 2, you will encounter motion, distance and water level sensors, motors, displays, relays, and joysticks, to mention a few.\nPart 3: additional Node-RED resources\nThese resources include lectures on essential Nodes, control structures, and ways to integrate your Node-RED flows with external services and APIs. You will create flows that allow Node-RED to communicate with services like OpenWeatherMap and Google Sheet to get, store, and retrieve data. You will also learn how to set up a local instance of the MySQL database for use by Node-RED for data storage and retrieval.\nI highly recommend taking a few minutes to watch the \"About this course\" lecture for more detailed information.\nI can't wait to have you join us on this exciting journey!",
      "target_audience": [
        "Anyone interested in using Node-RED for personal or industry projects.",
        "Anyone interested in the Raspberry Pi Pico W and how to use it with motors, sensors, LEDs, relays and other hardware.",
        "Anyone interested in combining Node-RED with the Raspberry Pi Pico W to build home automation or industrial automation projects.",
        "Learners interested in flow programming as an alternative to traditional text programming.",
        "Anyone interested in using Node-RED with cloud RESTful APIs and databases"
      ]
    },
    {
      "title": "Computer Hardware, Operating System and Networking",
      "url": "https://www.udemy.com/course/computer-hardware-operating-system-and-networking-r/",
      "bio": "For Any Graduates/Engineering/Diploma/Arts & Science/Freshers/Home Users/Individuals/Desktop Support/FM/Service Engineer",
      "objectives": [
        "Computer Hardware & Networking Introduction",
        "Understanding Computers Architecture",
        "Understanding Motherboard Technologies",
        "Understanding Processor Technologies",
        "Understanding Memory Technologies",
        "Understanding Storage Technlogies",
        "Understanding Switch Mode Power Supply (SMPS)",
        "Understanding BIOS & Power On-Self Test",
        "Understanding Optical Storage technologies",
        "Understanding Safe Mode Boot Menu",
        "Understanding Printer Technologies",
        "Understanding Scanner Technologies",
        "Understanding Computer Assembling",
        "Configuring Bitlocker Encryption in Windows10",
        "Understanding BSOD in Windows10",
        "Understanding Windows 10 OS Installation",
        "Understanding Windows 10 Operating System & Features",
        "Understanding VMware Workstation & Installing O/S",
        "Understanding Windows Patchmanagement in End points",
        "Understanding Disk Management in Windows10",
        "Understanding User Account Management",
        "Understanding Local Security Policies",
        "Understanding Network Topologies",
        "Understanding Network Interconnecting Devices",
        "Understanding of OSI Layers",
        "Understanding of IP Address Management",
        "Configuring Windows 10 in Workgroup",
        "Understanding Antivirus Management"
      ],
      "course_content": {
        "Introduction to Hardware and Networking": [
          "Introduction to Hardware and Networking"
        ],
        "Computer Architecture": [
          "Computer Architecture"
        ],
        "Motherboard Technologies": [
          "Motherboard Technologies Part -1",
          "Motherboard Technologies Part -2",
          "Motherboard Technologies Part -3"
        ],
        "Processor Technologies": [
          "Processor Technologies Part - 1",
          "Processor Technologies Part - 2"
        ],
        "Memory Technologies": [
          "Memory Technologies Part-1",
          "Memory Technologies Part-2"
        ],
        "Storage Technologies - Hard disk": [
          "Storage Technologies - Hard disk Part-1",
          "Storage Technologies - Hard disk Part-2",
          "Storage Technologies - Hard disk Part-3"
        ],
        "Storage Technologies - Floppy disk": [
          "Storage Technologies - Floppy disk"
        ],
        "Switch Mode Power Supply": [
          "SMPS Technologies"
        ],
        "BIOS & Power On Self Test": [
          "BIOS & POST"
        ],
        "Optical Storage Technologies": [
          "Optical Storage Technologies"
        ]
      },
      "requirements": [
        "Candidates should have a basic knowledge about computers & Operating System",
        "Candidates with any degree",
        "Home or Individual Computer users"
      ],
      "description": "This course is designed to equip the candidates for becoming an Entry Level L1, Desktop Support, Service Engineer, Customer Support Engineer, FM Engineer, Hardware Engineer and IT Support Specialist in End User Computing environment.\nCandidates will learn about Desktop and Laptop Computer Hardware Technology like Motherboard, Hard Disk, Memory Processors, Assembling, Computer Peripherals Like Printers & Scanners.\nWindows 10 Operating system, Understanding the latest Technologies.\nTroubleshooting all kind of Hardware and OS related issues.\nIn addition, This course develops the candidature/skills of the professionals to face the Job Interviews.\nHome / Individual users can identify the root cause of the issues occurring in their Desktop / Laptop . On their own they can fix, trouble shoot and solve the issue, without the help of any other person .\nThrough this course, candidates shall also gain the knowledge to take the International Certification  example like CompTIA A+ Certification. CompTIA A+ Core Series requires candidates to pass two exams: Core 1 (220-1001) and Core 2 (220-1002).\n\n\nLearners will gain strong knowledge in:\nComputer Hardware & Networking Introduction\nUnderstanding Computers Architecture\nUnderstanding Motherboard Technologies\nUnderstanding Processor Technologies\nUnderstanding Memory Technologies\nUnderstanding Storage Technologies\nUnderstanding Switch Mode Power Supply (SMPS)\nUnderstanding BIOS & Power On-Self Test\nUnderstanding Optical Storage technologies\nUnderstanding Safe Mode Boot Menu\nUnderstanding Printer Technologies\nUnderstanding Scanner Technologies\nUnderstanding Computer Assembling\nConfiguring Bitlocker Encryption in Windows10\nUnderstanding BSOD in Windows10\nUnderstanding Windows 10 OS Installation\nUnderstanding Windows 10  Operating System & Features\nUnderstanding VMware Workstation & Installing O/S\nUnderstanding Windows Patch Management in End points\nUnderstanding Disk Management in Windows10\nUnderstanding User Account Management\nUnderstanding Local Security Policies\nUnderstanding Network Topologies\nUnderstanding Network Interconnecting Devices\nUnderstanding of OSI Layers\nUnderstanding of IP Address Management\nConfiguring Windows 10 in Workgroup\nUnderstanding Antivirus Management",
      "target_audience": [
        "Freshers",
        "Any Graduates",
        "Diploma",
        "Arts & Science",
        "Engineering",
        "Level-1 Engineers",
        "Desktop Support Engineers",
        "FM Engineers",
        "Computer Service Engineers",
        "Customer support engineers",
        "Home Users"
      ]
    },
    {
      "title": "The Most Complete ARDUINO MASTERCLASS for Beginners",
      "url": "https://www.udemy.com/course/the-most-complete-arduino-masterclass-for-beginners-2022/",
      "bio": "Learn Electronic basics, Algorithms, C programming Language and Arduino",
      "objectives": [
        "Electronic basics : Analog vs digital electronic, Tools and components, circuits and schematics, basic electrical laws",
        "Algorithms and basics of C language",
        "Most common sensors and how to use them",
        "What is the Arduino? How is it build ? what it can do?",
        "Write simple Arduino sketches to understand how to use Arduino IDE",
        "Do different small Arduino projects"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Structure"
        ],
        "Electronic Basics": [
          "Introduction - Difference between analog and digital Electronics",
          "The most common tools used in Electronics",
          "The most common components used in Electronics",
          "How to determine resistance value using three different ways",
          "Resistance value",
          "What is an electronic circuit ?",
          "The schematic diagram : how to create your projects designs?",
          "Basic Circuit Laws",
          "Create your first Electronic Circuit"
        ],
        "Algorithms - C Coding Basics": [
          "Algorithms : what is an algorithm and how to create a Pseudocode?",
          "How do computer work ? From a physical problem to a binary code",
          "What is a variable and how to use it in C language ?",
          "The basic structure of a C program",
          "Input / Output functions and format specifier",
          "What is a constant and how to use it in C ?",
          "C Basics",
          "Exercises",
          "Solutions",
          "Conditions : If else statements",
          "Conditions : Switch case Statement",
          "Conditions",
          "Exercises",
          "Solutions",
          "Loops : Introduction",
          "Loops : For Loop",
          "Loops : While Loop",
          "Loops : Do While Loop",
          "Loops",
          "Exercises",
          "Solutions",
          "Functions : Part 1",
          "Functions : Part 2",
          "Abstract : the structure of a C program",
          "Functions"
        ],
        "Most commonly used Sensors and their applications": [
          "Introduction : what is a sensor ?",
          "Why sensors are important for this course?",
          "LDR : Light Dependent Resistor",
          "LIDAR SENSOR",
          "COLOR SENSOR",
          "ULTRASONIC SENSOR",
          "SMOKE SENSOR",
          "NTC & PTC",
          "MOISTURE SENSOR",
          "PRESSURE SENSOR",
          "VISION SENSOR",
          "LASER SENSOR"
        ],
        "Arduino Board Basics": [
          "Introduction",
          "What is Microcontroller and Microprocessor",
          "Arduino Category and different types",
          "Parts of Arduino Uno",
          "Technical Specifications of Arduino Uno"
        ],
        "Arduino IDE": [
          "What is an IDE?",
          "Downloading and Installing the Arduino IDE",
          "Preparing your computer",
          "Parts of Arduino IDE",
          "Simulator to use if you don't have the hardware"
        ],
        "Getting started with Arduino": [
          "Intalling Arduino Libraries",
          "Getting started : Code structure",
          "How to use the Serial Monitor",
          "Practice",
          "Solution",
          "Digital Pin functions",
          "Delay function : Blink LED",
          "The most Important functions in Arduino IDE",
          "The most important Variables/Constants in Arduino IDE",
          "Operators and structure"
        ],
        "Start with Arduino Projects": [
          "Traffic Light Controller",
          "Control an LED using the serial monitor",
          "Control an LED using a Bluetooth Module",
          "Obstacle avoidance with ultrasonic sensors",
          "Conclusion: how to go further and learn more about Arduino"
        ],
        "Global test": [
          "Arduino"
        ]
      },
      "requirements": [
        "Windows, mac or linux laptop",
        "For hands-on, an Arduino and supporting electronics are required (covered in Lecture 3)",
        "Be excited about Electronics and embedded systems (Robotic)"
      ],
      "description": "Do you want to learn Arduino programming from the beginning?\nDo you want to write Arduino code that works, and that you can understand?\nDo you want to really do things by yourself, instead of reading theory and copying/pasting some code?\nDo you want to learn the basics of Electronics and Algorithms using C programming?\nThen you are in the right place!\nThe goal of this course is to give you, step by step, the Arduino programming foundation that you need, along with a ton of practice, so you will be more confident to create much more complex and nice Arduino programs in the future.\nYou don’t need any special knowledge or programming experience to start this course, I will explain everything in detail.\nEvery line of code that you see in this course will be written in front of you. I will write code, and you will also write code. No copy and paste.\nFor every important step in this course, you will do a programming activity to practice and get a better understanding.\nAlong with the different activities, I’ll also give you some programming best practices that I’ve learned myself, so you’ll improve much faster than if you were just alone.\n\n\nWho I am?\nI am Hajar QAIBOU known as Hajar Ram on social media\nI have a double degree in Embedded systems and Electronics Engineering.\nI have worked for different international companies since 2019\nAnd I have around 7 years of teaching experience with a high level of student satisfaction.\n\n\nOverview of this MasterClass\nHere is an overview of what you will learn through the course:\nFirst, we will start with Electronic basics where I will explain the difference between Analog and digital electronics, represent the most common tools and components used in ELectronics, How to build circuits and schematics, and of course, the basic electrical laws that you need to know.\nThen in the second section, you will learn how to think like a Professional programmer by deeply understanding Algorithms and learn the basics of C language.\nAnd of course, in each part, you will have exercises with their solutions and some quizzes to practice what you have learned.\nThen we will cover the most common sensors in electronics and how to use them?\nNext, we will start learning the Arduino\nSo you can understand What is Arduino? How is it built? And what it can do?\nThen we will move on to give an overview of the most used functions, constants, and operators in Arduino and write simple sketches to understand how to use the Arduino IDE.\nAnd in the last section, we will work on many useful projects which can allow you to be more independent when you want to work on specific projects.",
      "target_audience": [
        "Beginners in Arduino",
        "Beginners in Arduino without a background in Electronics and Coding.",
        "Beginners in C language and Electronics"
      ]
    },
    {
      "title": "Learn Arduino by Building 26 Projects!",
      "url": "https://www.udemy.com/course/arduino-learn-arduino-by-building-26-projects/",
      "bio": "Learn Arduino by Building 26 Projects! An extensive reference that will educate you how to utilize the Arduino platform.",
      "objectives": [
        "Learn Arduino the easy way! Build your own Arduino projects from scratch.",
        "Learn how to make a robot arm, a digital dice game, a GPS tracker, an MP3 player, and a variety of other enjoyable projects.",
        "Learn electronics and programming with Arduino by constructing 26 fascinating projects.",
        "You will master the fundamentals of Arduino and will be able to create your own projects.",
        "Create Internet of Things (IoT) projects, home automation projects, and more."
      ],
      "course_content": {},
      "requirements": [
        "Arduino IDE",
        "Arduino Boards",
        "Wires ( depnds on the selected projects )",
        "Basic Programming"
      ],
      "description": "Beginning with Arduino Basics, this course covers 26 projects designed to teach the basics of using Arduino software and hardware. Projects include a motion detector, an LED clock, a weather station, a sound player, and more. By the end of the course, students will have developed essential skills in programming and electronics, as well as know-how to use Arduino libraries and tools.\nLearn Arduino by Building 26 Projects! is a comprehensive course guide that will teach you how to use the Arduino platform to build various circuits and projects. We have designed this course for absolute beginners who want to learn how to use Arduino. The perfect way to start learning coding and electronics!\nIntroduction:\nLearn Arduino by Building 26 Projects! is a step-by-step guide that will teach you how to use the Arduino platform to build various circuits and projects. Arduino Projects is a beginner-friendly guide that starts with the basics and walks you through fun, hands-on projects.\nThe Arduino platform is a popular way to learn how to build electronic projects. This course teaches 26 different Arduino projects that you can complete. Whether a beginner or an experienced electronics enthusiast, these projects will give you the skills and confidence you need to create your own projects.\nCourse Outline Includes:\nAutomatic Medicine Reminder using Arduino\nArduino Alarm Clock Using a Real-Time Clock and LCD Screen\nArduino Motion Detector: Step By Step Guide\nAutomatic Irrigation System with Arduino\nControl Anything Anywhere without the Internet with Arduino\nArduino Rotating LED Display That Prints Text on Air POV\nArduino Interfacing with Sensors in Your Smartphone\nArduino Battery Level Monitor\nArduino JavaScript Browser-based Control\nArduino Long Distance Communication\nArduino Social Distance Detector\nArduino Data Visualization using Python\nArduino SMS Sending Motion Detector using Python\nArduino Email Sending Motion Detector\nCrash Course: Buzz Wire Game using Arduino\nSD Card Interfacing with Arduino\nArduino-Based Real-Time Oscilloscope\nArduino Morse Code Generator\nArduino Text to Speech\nArduino Solar Tracker\nControl Arduino with Your Own Voice\nAutomatic Weight Measuring Machine using Arduino\nArduino Car Parking Assistant\nArduino Multicolor RGB LED Lamp Controlled Using Bluetooth\nArduino Radar: Step-By-Step Guide\nArduino Weather Station: Step By Step Guide\nCourse Benefits:\nBuild Your Way to Arduino Mastery!\nWith 26 different circuits and projects, this course will teach you everything you need to know about Arduino programming and hardware. By the end of the course, you'll be confident in your ability to build complex electronic devices from scratch.\nGet Hands-On Experience\nLooking to get started with Arduino? This course will teach you the basics of electronics and programming, and how to apply them to build 26 different projects. By the end, you'll be able to confidently make your own circuits and write your own code.\nGet Hands-On Experience!\nWhen you enroll in this course, you'll get the opportunity to build 26 different circuits and projects. This will give you the hands-on experience you need to confidently work with Arduino. Not only will you deepen your understanding of electronics, but you'll also have a lot of fun in the process!\nThis course is designed to provide students and professionals with a hands-on introduction to the Arduino platform by having them build 26 different projects. Students will learn the basics of programming and electronics, as well as how to use Arduino to control devices such as LEDs and motors.\nStart creating your own Arduino projects right away by enrolling in this course!\nWhat You Will Learn:\nBasics of Arduino programming\nUsing sensors and actuators\nInterfacing hardware with Arduino\nCreating complex projects with Arduino\nPractical applications of Arduino in real-world projects\nWho Is This Course For:\nBeginners in electronics and programming\nIndividuals interested in learning Arduino\nHobbyists and enthusiasts looking to expand their knowledge\nRequirements:\nBasic computer skills\nNo prior knowledge of Arduino or electronics required\nAccess to Arduino and basic electronic components\n\n\nAbout the Instructor Info\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in the Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge, we go into the depth of the topic and give you the exact, step-by-step blueprint on how to tackle simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years, we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy.\nEducator and Author of “Educational Engineering”\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million Views, 20k + Subscribers) and author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThe team also works as freelance engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their careers.\nAshraf’s core skill is explaining difficult concepts in a step-by-step easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, particularly for the world of Arduino, PIC Microcontroller, Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "this is intended for beginners.",
        "this for Arduino Enthusiast",
        "for everyone who wishes to deepen their understanding and try out additional Arduino projects",
        "this is for Arduino Hobbyist"
      ]
    },
    {
      "title": "FANUC PLC Programming Course - Fanuc Ladder 3",
      "url": "https://www.udemy.com/course/fanuc-plc-programming-course-fanuc-ladder-3/",
      "bio": "Learn to program Fanuc PLC in Ladder Language starting completely from scratch",
      "objectives": [
        "Program PLC Fanuc in Ladder Logic",
        "Create a professional-quality Fanuc Ladder 3 project",
        "Know the memory architecture of a FANUC PLC",
        "Get information and tips collected over years of professional experience",
        "Create a program with Fanuc Ladder 3 starting from zero"
      ],
      "course_content": {
        "Introduzione": [
          "Creation of first project",
          "Work Page Configuration",
          "Description of the memory area",
          "Quiz test"
        ],
        "Programming instructions": [
          "Basic instructions",
          "Creating variables",
          "Complex instructions",
          "Quiz Test"
        ],
        "Function Blocks-Sub Program & Extra": [
          "Function Blocks and Sub Program",
          "Compare programs",
          "Quiz Test"
        ],
        "Coding exercises": [
          "Excercise 1",
          "Exercise 2",
          "Exercise 3"
        ]
      },
      "requirements": [
        "It is not necessary to have previous experience in head of programming PLC , the course is structured to be accessible at all levels, you will start from a totally empty project going step by step together to see everything you need to manage a more complex project",
        "The application used in the course will be Fanuc Laddeer 3 if you have the opportunity to use it can be useful for practicing, otherwise it will not be a problem as each exercise proposed in the course will be carried out and shown in its entirety",
        "It is required to have general knowledge of the architecture of a PLC"
      ],
      "description": "The course shows how to create a project for programming FANUC PLCs using the Fanuc Ladder 3 application.\n\n\nThe main topics covered in the course are:\n· Creating a project from scratch\n· Detailed description of all project options\n· Architecture of a Fanuc PLC and differences between devices\n· Structure of the PLC memory area\n· Creating variables\n· Basic programming instructions\n· Advanced programming instructions\n· Subprograms\n· Function blocks\n· Code comments\n· Functionality of the FANUC Ladder 3 application and customization of the workspace (Toolbar and quick commands)\n· Summary programming exercises of the concepts learned\n· Useful Tips & Tricks (Quick commands to speed up programming and project management)\n· Compare two projects and visualize the differences.\n\n\nEach topic is covered in its entirety without taking anything for granted and without leaving gaps. Therefore, the course is suitable for both beginners and experienced programmers who want to improve their skills.\nAt the end of the course, you will be able to use the programming suite in all its functions and be able to create medium-complexity projects with the quality of a professional.\nI will be available to answer any questions you may have regarding doubts or curiosities about the course topics.\nThe course will be constantly updated with respect to new technologies and introduced updates\n\n\nYou can follow the course even if you have not yet installed the Fanuc LADDER 3 application as everything will be shown from my screen including the solution of the exercises",
      "target_audience": [
        "Novice electronic technologies approaching PLC programming for the first time",
        "Recent graduates who wish to pursue a career as a PLC programmer",
        "Softwarists with experience on other controls who want to get closer to the FANUC world",
        "Young people in training at companies who want help in their training as programmers",
        "Hobbyists interested in the world of automation"
      ]
    },
    {
      "title": "How to Build a Computer from Scratch: Complete Blueprint",
      "url": "https://www.udemy.com/course/how-to-build-a-computer-from-scratch-complete-blueprint/",
      "bio": "Create your own custom-built PC, follow me as I show you how to build a computer from various parts! Comprehensive guide",
      "objectives": [
        "Everything needed to create your own custom built computer",
        "Ability to confidently shop for computer components",
        "Understand how computer hardware works",
        "Modify / Upgrade their current computer systems",
        "Install an OS [Operating System]",
        "Troubleshoot for certain computer issues"
      ],
      "course_content": {},
      "requirements": [
        "A Basic Understanding of How to Use a Computer",
        "Patience",
        "Ability to Properly use a Screwdriver (and other basic tools)",
        "Ability to Follow Instructions"
      ],
      "description": "Join 3200+ Satisfied students!\n\nOver 250 Successful Student Custom Builds made (and counting!)\nHave you always wanted to build your own computer but lacked the know how?\nWould you like to save money on an awesome custom built computer while learning all about computer architecture and how it functions along the way?\nIn this course, you'll not only learn how to assemble your very own computer from scratch, but you'll learn all about the functional roles of the various components and hardware that make up a computing system.\nYou'll watch as I assemble the entire build from scratch parts.\nThis course is the one and only place that has ALL the information you need to;\n- Learn about the basic functions of a computer system\n\n- Pick out appropriate hardware for your build\n- Assemble all hardware needed for a fully functional computer\n- Wire everything within the case like an expert\n- Install an OS (Operating System) onto a computer\n- Build a new home / office computer\nStop settling for those store bought PC's that never seem to have all the features that you want, or even need. It's even more economical to build your computer, as opposed to buying one pre-made! (you'll be paying a lot more fees; i.e assembly fees)\nGo ahead and click \"Take This Course\" and be on your way to building your very own custom built computer!\nScroll up and Enroll Now!",
      "target_audience": [
        "Anyone who wants to learn to build a custom computer from scratch",
        "Performance enthusiasts who demand more from their systems",
        "Anyone who wants to learn how computer hardware works together as a system",
        "PC Gamers who need their computers to produce those extra few frames per second",
        "Anyone who wants to learn to tinker with computers"
      ]
    },
    {
      "title": "Intro to Computer Organization, Number & Data Representation",
      "url": "https://www.udemy.com/course/intro-to-computer-organization-number-and-data-representation/",
      "bio": "Master from scratch number, data representation & ace computer organization, computer architecture exams!",
      "objectives": [
        "What is a computer?",
        "Basic computer organization",
        "What is a program?",
        "Generations of programming languages",
        "What is machine language and assembly language?",
        "What are high-level languages?",
        "What is the computer level hierarchy in modern computers?",
        "What is hardware?",
        "What is software?",
        "What is von Neumann machine?",
        "How do instructions execute in a modern computer?",
        "What is multi-core processor?",
        "What are bits and bytes?",
        "What are binary numbers?",
        "How to convert binary numbers to decimal?",
        "How to convert decimal numbers to binary?",
        "What are hexadecimal numbers and why are they needed?",
        "What is the range of numbers that can be expressed in a given memory space?",
        "How to add binary numbers?",
        "What is arithmetic overflow?",
        "How to prevent overflow in C++ programs?",
        "How to represent negative integers in computer's memory?",
        "How to convert an integer into twos complement representation?",
        "How to add twos complement numbers?",
        "How to detect overflow in twos complement number addition?",
        "What is zero extension and sign extension?",
        "What are floating point numbers?",
        "What is the IEEE floating point representation?",
        "How to convert a real number from decimal to binary format?",
        "How to represent a decimal number in IEEE floating point representation?",
        "What are the reserved bit patterns in IEEE floating point format?",
        "What are the errors introduced in computation due to floating point representation?",
        "How to minimize approximation errors in floating point computations?",
        "What is ASCII character representation?",
        "What is Unicode character representation?",
        "How are images represented in our computer's memory?",
        "How is sound represented in a computer's memory?"
      ],
      "course_content": {},
      "requirements": [
        "No previous knowledge about computer organization needed. Everything you need to know about the topics will be covered."
      ],
      "description": "When purchasing a new computer, have you wondered what \"3,\" \"5,\" and \"7\" mean in Core i3, i5, or i7? (Hint: these are not the number of cores in the processor!) Did you know that when comparing two floating point variables, using the \"==\" in your programs may return False even though the variables are expected to be equal? (\"==\" is not the best way to compare two float variables!) Did you know that a naive statement like i++ could lead to an overflow in your C++ program? Learn the explanations to these and many more intriguing questions in this course!\nAce data representation, number representation, twos complement, IEEE floating point representation, binary arithmetic questions in competitive exams, job interviews, and computer organization and architecture course exams. Genuinely understand the representation of various kinds of data (including integers, real numbers, negative numbers, characters, images, and sound) in modern computers.\nSpecifically, the course will cover the following in detail.\nWhat is a computer?\nBasic computer organization\nWhat is a program?\nGenerations of programming languages\nWhat is machine language and assembly language?\nWhat are high-level languages?\nWhat is the computer level hierarchy in modern computers?\nWhat is hardware?\nWhat is software?\nWhat is von Neumann machine?\nHow do instructions execute in a modern computer?\nWhat is multi-core processor?\nWhat are bits and bytes?\nWhat are binary numbers?\nHow to convert binary numbers to decimal?\nHow to convert decimal numbers to binary?\nWhat are hexadecimal numbers and why are they needed?\nWhat is the range of numbers that can be expressed in a given memory space?\nHow to add binary numbers?\nWhat is arithmetic overflow?\nHow to prevent overflow in C++ programs?\nHow to represent negative integers in computer's memory?\nHow to convert an integer into twos complement representation?\nHow to add twos complement numbers?\nHow to detect overflow in twos complement number addition?\nWhat is zero extension and sign extension?\nWhat are floating point numbers?\nWhat is the IEEE floating point representation?\nHow to convert a real number from decimal to binary format?\nHow to represent a decimal number in IEEE floating point representation?\nWhat are the reserved bit patterns in IEEE floating point format?\nWhat are the errors introduced in computation due to floating point representation?\nHow to minimize approximation errors in floating point computations?\nWhat is ASCII character representation?\nWhat is Unicode character representation?\nHow are images represented in our computer's memory?\nHow is sound represented in a computer's memory?\n\n\n30 day money back guaranteed by Udemy.\n\n\nWisdom scholarships. If you are interested in taking one of our courses but cannot purchase it, you can apply for a scholarship to enroll. Learn more about the application process at my website.",
      "target_audience": [
        "Computer science undergraduate students taking a computer organization or computer architecture course could benefit from the course.",
        "Anyone interested in learning about number and data representation in computers could benefit from this course.",
        "Anyone interested in learning about introduction to computer organization could benefit from this course.",
        "You may (optionally) wish to print some of the material"
      ]
    },
    {
      "title": "Arduino UNO Based Obstacle Avoiding Robot Car & RC-Control",
      "url": "https://www.udemy.com/course/arduino-uno-based-obstacle-avoiding-robot-car-rc-control/",
      "bio": "Learn To Create Arduino UNO Based Obstacle Avoiding Robot Car & RC-Control",
      "objectives": [
        "Learn basics of Arduino UNO",
        "Build 10+ projects using Arduino UNO",
        "Create Obstacle Avoiding Robot Car",
        "Build Arduino UNO Based Obstacle Avoiding Robot Car"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Components Overview": [
          "Components Overview"
        ],
        "Installing Arduino IDE": [
          "Arduino IDE"
        ],
        "Basics of Arduino UNO": [
          "Builtin LED Blinking",
          "LED Blinking",
          "Multiple LED'S Blinking",
          "User Input Control LED",
          "LED Brightness Control",
          "LED Brightness Control With Potentiometer",
          "LED Push Button Control"
        ],
        "Ultrasonic Sensor": [
          "Ultrasonic Distance LED",
          "Ultrasonic Sensor Measure Distance"
        ],
        "Car Kit Assembly": [
          "Car Kit Assembly"
        ],
        "Motor Control With L293D Motor Shield": [
          "1-Motor Control With Motor Shield",
          "4-Motor Control With Motor Shield",
          "Motor Movement In All Directions",
          "Motor Movement Functions",
          "Look Left & Right"
        ]
      },
      "requirements": [
        "No programming experience is needed. You will learn everything you need to know from the basics"
      ],
      "description": "In this course, you will Learn To Create Arduino UNO Based Obstacle Avoiding Robot Car & RC-Control Using Arduino UNO Microcontroller.\n\n\nWhat you will be learning in the course?\nWhat is Arduino UNO Microcontroller?\nBasics of Arduino\nInstalling Arduino IDE\nBlinking Built-in LED on Arduino\nBlink LED\nMultiple LED'S Blinking In Series\nUser Input Control LED\nLED Brightness Control\nLED Brightness Control With Potentiometer\nLED Push Button Control\nUltrasonic Sensor Measure Distance\nUltrasonic Distance LED\nMotor Movement in all Directions\nObstacle Avoiding Robot Car\nRC-Control Robot Car.\nAll the above Features and List Goes On...\n\n\nWhat is Obstacle Avoiding Robot?\nNow day’s many industries are using robots due to their high level of performance and reliability and which is a great help for human beings. Obstacle avoidance robotics is used for detecting obstacles and avoiding collisions. This is an autonomous robot. The design of the obstacle avoidance robot requires the integration of many sensors according to their task.\n\n\nObstacle detection is the primary requirement of this autonomous robot. The robot gets the information from the surrounding area through mounted sensors on the robot. Some sensing devices used for obstacle detection like bump sensors, infrared sensors, ultrasonic sensors, etc. The ultrasonic sensor is most suitable for obstacle detection and it is of low cost and has a high ranking capability.\n\n\nWhat is RC-Control Robot?\nRadio-controlled cars (or RC cars for short) are miniature model cars or trucks that can be controlled from a distance using a specialized transmitter or remote.\n\n\nSo what are you waiting for?\nEnroll now.",
      "target_audience": [
        "Beginner in Ardunio and Robotics",
        "Beginner interested in building Projects",
        "Beginner in Robotics looking for hands-on experience"
      ]
    },
    {
      "title": "CMOS Analog Circuit Design",
      "url": "https://www.udemy.com/course/analog_ic_design_overview/",
      "bio": "By Prof. Phillip E Allen",
      "objectives": [
        "Understand a broad perspective of analog IC design",
        "Refresh their understanding of analog IC design if they have been away from the field for a period of time",
        "Understand the requirements for an analog IC designer",
        "See how technology, modeling, and circuit design come together in analog IC design",
        "Have a top-level understanding of sources, amplifiers, op amps, comparators, and DA and AD converters",
        "Look into the future of analog IC design"
      ],
      "course_content": {
        "Overview of Analog IC design": [
          "Introduction",
          "Technology",
          "Modelling",
          "Analog IC design process",
          "Key principles, concepts and techniques",
          "Characteristics of an Analog Designer",
          "Independent sources",
          "Amplifiers",
          "Op-amps",
          "Comparators",
          "DAC and ADC converter",
          "Future of analog IC design"
        ]
      },
      "requirements": [
        "Students should have an interest in the topic of analog IC design or at least the motivation to find out what it is all about",
        "There are no prerequisites but any previous knowledge of the topic will help the student get more from the class"
      ],
      "description": "This course serves as a brief overview of the topic of analog IC design. It is a high level view of what analog IC design is all about and discusses the requirements for a designer in this field. In reality, this course is a snapshot of a more detailed, 40 hour course on CMOS analog design found elsewhere.\nThe target audience for this course should have some familiarity with analog circuits and integrated circuit technology. The terminology used is that found in both academia and industry.\nThis course is stand alone and has no quizzes or other material - it is designed to be a quick refresher or a introduction to the topic of analog IC design. The course will take approximately 3 hours to complete and consists of 12 lectures of 15-20 minutes in length.\nStudents new to analog IC design can take this course to gain an overview of the topic. Those who are familiar with IC design or have been away from the field for a while, can use the course to come up to date with the field of analog IC design.\nThe more detailed 40 hour course on CMOS Analog Design is found on other venues (Continued Professional Development at Imperial College of London) and has quizzes associated with the course. Check with the instructor, Dr. Allen, if you are interested in the in-depth course or go to the Imperial College website.",
      "target_audience": [
        "This Overview of Analog IC Design should be taken by anyone who would like to gain a quick refresher or a general introduction into the topic of Analog IC Design",
        "This course will prepare the student to go into a more detailed study found elsewhere (www.aicdesign.org) on the topic.",
        "This course can be taken to determine the students interest in the topic of analog IC design"
      ]
    },
    {
      "title": "FreeRTOS on Raspberry PI PICO",
      "url": "https://www.udemy.com/course/freertos-on-rpi-pico/",
      "bio": "Using FreeRTOS Kernel on RP2040 boards including the Pico and Pico W.",
      "objectives": [
        "To get to grips with FreeRTOS on Raspberry PI PICO or RP2040 Board",
        "Be able to develop applications for Pico/RP2040 using FreeRTOS",
        "Protect shared resources using Semaphores",
        "Communicate between tasks using Queues and Message Buffers",
        "Utilise both Cores of the Pico/RP2040 by using Symmetric Multi Processor feature"
      ],
      "course_content": {
        "Introduction": [
          "Course Goals",
          "Introducing Tutor",
          "Course Approach",
          "Section Summary"
        ],
        "Pico Setup": [
          "Section Goals",
          "Raspberry PI Pico Setup",
          "Deploying Code to the Pico",
          "Blink Project Example",
          "Blink Project Example",
          "Course Code Repository",
          "Alternative RP2040 Boards",
          "Section Summary"
        ],
        "FreeRTOS Overview": [
          "Section Goals",
          "FreeRTOS Overview",
          "FreeRTOS Kernel Configuration",
          "FreeRTOS Kernel Port for RP2040",
          "Section Summary"
        ],
        "FreeRTOS Tasks": [
          "Section Goals",
          "Tasks",
          "Debugging Tasks",
          "Task Priority",
          "Tasks Assignment",
          "Static Memory Model",
          "Section Summary"
        ],
        "FreeRTOS Semaphores": [
          "Section Goals",
          "What are Semaphores",
          "FreeRTOS Binary Semaphore",
          "FreeRTOS Counting Semaphore",
          "Assignment Semaphores",
          "Synchronization",
          "Desynchronized Example",
          "Synchronization Using Task Notification",
          "Mutexs Verses Semaphores",
          "Section Summary"
        ],
        "FreeRTOS Queues": [
          "Section Goals",
          "What are Queues",
          "FreeRTOS Queue",
          "Assignment Queues",
          "Section Summary"
        ],
        "FreeRTOS Message Buffers": [
          "Section Goals",
          "What are Message Buffers",
          "FreeRTOS Message Buffers",
          "UART Use of Buffers",
          "Section Summary"
        ],
        "FreeRTOS & Multicore Operation": [
          "Section Goals",
          "RP2040 Multicore",
          "FreeRTOS SMP",
          "Section Summary"
        ],
        "Advanced Topics": [
          "Section Goals",
          "FreeRTOS Kernel Configuration",
          "C++ Memory Management",
          "FreeRTOS Kernel Source Repo",
          "FreeRTOS Kernel V11.2.0 Example",
          "FreeRTOS Kernel V11.2.0 SMP Example",
          "Debugging",
          "Section Summary"
        ],
        "Congratulations": [
          "Congratulations"
        ]
      },
      "requirements": [
        "Basic electronics knowledge (Able to connecting LEDs to PICO)",
        "Good knowledge of C++",
        "Able to compile and copy code to Pico (C++)"
      ],
      "description": "Updated for Pico SDK 2.1.1 and FreeRTOS Kernel V11.2.0 - March 2025.\nFreeRTOS Kernel allows us to add multi-processing to projects on the Raspberry PI Pico. This course teaches the foundations of FreeRTOS Kernel through practical example projects to get you quickly up and running. The course includes 15 separate projects using FreeRTOS Kernel including Symmetric Multi-Processing (using both RP2040 cores).\nThe course is written for the Raspberry PI Pico and Pico W. The examples will also run on any RP2040 board, though some modification due to different pinouts may be required if the board is different from the Raspberry PI Pico. These examples can be used as a basis for your own projects or as reference examples of the concepts of FreeRTOS Kernel.\nThis course covers:\nTasks: Multiple concurrent processes on a single core\nSemaphores: Sending signals between tasks to protect shared resources\nQueues: Queue management. Queues are often used for decoupling tasks\nMessage Buffers: A queue of variable-length items\nSymmetric Multiprocessing: Using both RP2040 cores\nC++ use of the FreeRTOS Heap\nSimple circuits to illuminate LEDs are used in each example. To build these circuits a small amount of equipment is required:\nRaspberry PI Pico or Pico W\nMicro USB Cable for power\nBreadboard and connection wires\n12 LEDs. Any colour though examples use 2x Green, 2x Blue, 8x Red\n12 75Ohm resistors\nDesktop/Laptop for building code and flashing the Pico\nThe course assumes knowledge of C++. Though each example will walk through the functionality, the course will not talk about the syntax of C++. An understanding of how stack and heap are used by C++ is also assumed.\nThe course assumes that you can compile and deploy C++ code to the Pico using the Raspberry PI Pico SDK. My other course “Introduction to C Development Environment for Raspberry PICO” teaches these skills.\nFreeRTOS Kernel is a foundation state in the journey to more complex projects and IoT devices. Join the course today for fun learning FreeRTOS Kernel for the Raspberry PI Pico, Pico W or RP2040 board.\nFreeRTOS Kernel will also run on the Pico 2 and RP2350 boards. The configuration for the RP2350 is a little bit more complex and not covered by this course.",
      "target_audience": [
        "Microcontroller Developers",
        "Hobboy Developers"
      ]
    },
    {
      "title": "Design with KiCad",
      "url": "https://www.udemy.com/course/design-with-kicad-6/",
      "bio": "Quick, systematic, and complete course to learn KiCad for your PCB design.",
      "objectives": [
        "The course was updated for KiCad 7 which was released on 12 Feb 2023",
        "Using KiCad for Printed Circuit Board design.",
        "Starting from schematics to the ready to manufacture designs.",
        "Using the schematics editor and the PCB Layout Editor for generating ready to manufacture designs.",
        "Using Electrical Rule Checker(ERC) and Design Rule Checker (DRC)",
        "General Idea about PCB types.",
        "Calculating tracks widths and spacing using KiCad Calculator.",
        "PCB design beyond connoting pads and tracks.",
        "BOM generation and sending designs to manufacturers and a look at the manufactured boards.",
        "3D View of the project and exporting to 3D design software",
        "Course ends with two real projects."
      ],
      "course_content": {
        "Introduction to Design With KiCad 6": [
          "Introduction to Design with KiCad 6",
          "Why KiCad",
          "Donation commitment",
          "Course plan"
        ],
        "Before we dig in - the principals": [
          "Symbols, Footprints and 3D Models",
          "What is a PCB or a PWB",
          "PCB Types",
          "PCB Layers",
          "Tracks, Vias, and Through Holes",
          "Blind and Buried Vias",
          "Surface Mount (SMT) and Through Hole (THT)",
          "PCB Design Beyond Connecting Parts",
          "Types of components quiz"
        ],
        "Installation, Libraries and 3D models": [
          "Getting the required files",
          "Installing KiCad on a Mac OS system",
          "Installing KiCad on a Windows system",
          "Installing KiCad on a Linux Ubuntu system",
          "Getting KiCad Libraries",
          "Playing with 3D models",
          "Getting third party libraries",
          "Adding Symbols",
          "Adding footprints",
          "General look at a demo project",
          "Symbols, footprints and 3D models"
        ],
        "KiCad Project Manager": [
          "First look at KiCad Project Manager",
          "A look at a demo project in the Project Manager",
          "Project Manager menus explained",
          "Project Manager components explained",
          "Preferences Part 1",
          "Preferences Parts 2",
          "Drawing Sheet Editor",
          "Image Converter",
          "Calculator Tools",
          "KiCad Project Manager"
        ],
        "The Schematic Layout Editor - Eeschema": [
          "Schematic Layout Editor Eeschema - learning by a project",
          "Voltage regulator project explained",
          "Filling the details of the project",
          "Adding symbols of the circuit to Eeschema",
          "Moving symbols and the grid settins",
          "positioning the components of the L7809 part of the circuit in place",
          "Adding power supply and ground to Eeschema",
          "Working on the L7805 part of the circuit and naming the parts",
          "Electrical Rules Check",
          "Adding connectors to the circuit",
          "Properties of a symbol",
          "Symbol sub-menus explained",
          "Symbol sub-menus continued",
          "Right tool bar explained part 1",
          "Right tool bar explained part 2",
          "Right tool bar explained part 3",
          "Right tool bar explained part 4",
          "Right tool bar explained part 5",
          "Upper tool bar explained part 1",
          "Upper tool bar explained part 2",
          "Upper tool bar explained part 3",
          "Upper tool bar explained part 4",
          "Menus explained",
          "Schematics Layout Editor Preferences explained",
          "Edit text and graphics properties explained",
          "Assigning footprint tool",
          "Assigning footprints to the capacitors",
          "Assigning footprints to connectors and resistors",
          "Assigning footprints to L7805, L7809, and the TO 220 package",
          "Symbol Editor",
          "Eeschema section questions"
        ],
        "PCB Layout Editor - Pcbnew": [
          "Introduction to the PCB Editor Pcbnew and updating it with our project",
          "experimenting with moving rotating and the properties of a footprint",
          "Footprint properties continued 2",
          "Footprint properties continued 3 and pads clearance",
          "Placing components in location 1",
          "Placing components in location 2",
          "Placing components in location 3",
          "Placing parts in final location and the Edge Cuts layer",
          "Making curved edges using Draw Arc tool 1",
          "Making curved edges using Draw Arc tool 2",
          "First look at Design Rule Check",
          "Tracks widths, clearances and net classes",
          "Connecting the ground on the back cupper layer",
          "Connecting pads and nets",
          "Design Rule Check - Eliminating some errors",
          "Design Rule Check continued",
          "Vias tool",
          "Filled Zones",
          "Drawing tool and text tool explained",
          "Last tools in the right tool bar explained",
          "Left tool bar explained",
          "Top tool bar explained",
          "Plot tool - generating the GERBER files and the Drill files",
          "Generated GERBER files explained",
          "Board Layer Editor explained",
          "Physical stack up explained",
          "Board finish and solder mask explained",
          "Text, Graphics and Design Rules",
          "Net Classes Explained - IMPORTANT LECTURE",
          "Violation Severity explained",
          "File menu explained",
          "Edit and View menus explained",
          "Place, Route, Inspect menus explained",
          "Interactive router options explained",
          "Preferences explained part 1",
          "Preferences explained part 2",
          "Preferences explained part 3",
          "PCB Layers",
          "Footprint Editor",
          "Design workflow in KiCad 6",
          "Pcbnew section quiz"
        ],
        "Project 1 - REV1 of a two phase bipolar stepper motor controller based on L298": [
          "Introduction to the project and downloading the required data sheets",
          "Parts list and recommendations from the data sheet",
          "Adding components to the Eeschema",
          "Downloading and adding Symbol and Footprint of the L298",
          "Connecting Vs and Vss",
          "Adding power flags and connectors to the schematics",
          "Connecting the screw terminal connectors J1 J2 and J4",
          "Connecting Zener diodes to L298, Vs and Vss",
          "Connecting Rs1, Rs2 and Vss to the L298",
          "Connecting L297 and L298",
          "Connecting the remainder of the schematics and zero rule check errors",
          "Tidying up the schematics",
          "Assigning footprints to the symbols",
          "Placing footprints relatively 1",
          "Placing footprints relatively 2",
          "Placing footprints relatively 3",
          "Placing footprints relatively 4",
          "Edge cut layer - shaping the board",
          "Drawing the curved edges of the board",
          "Drawing the final edges of the board",
          "Placing mounting holes on the board",
          "Creating and assigning net classes - an important lecture",
          "Connecting ground on back cupper layer",
          "Connecting the motor winding Vs and Vss",
          "Routing the remainder of the board 1",
          "Routing the remainder of the board 2",
          "Routing the remainder of the board 3",
          "Routing the remainder of the board 4",
          "Routing the remainder of the board 5",
          "Routing the remainder of the board 6",
          "Routing the remainder of the board 7",
          "Adding 3D model to the L298",
          "Final routing of the board and design rule check",
          "Labeling J3 connector",
          "Labeling the motor windings connector and the back of the board",
          "Generating GERBER and Drill files",
          "Viewing GERBER and drill files before sending to manufacturing",
          "BOM and sending to manufacture",
          "Sending to manufacturing continued",
          "Sending to manufacture 2",
          "First project quiz"
        ],
        "Project 2 - REV2 of a two phase bipolar stepper motor controller based on L298": [
          "Two phase bipolar stepper motor Revision 2",
          "Hints for REV2 design",
          "Design quiz",
          "Creating Rev2 of the Two Phase Bipolar Motor controller.",
          "Solutions for the previous design"
        ],
        "Project 3 - Development board project with STM components and Micro USB": [
          "Introduction to the project and photos of the manufactured board.",
          "Photos of the board in the 3D viewer and photos of the actual manufactured board",
          "The project in Eeschema",
          "Footprint assignment tool for the project",
          "The project in Pcbnew",
          "Routing quiz",
          "Downloading and installing free routing tool",
          "Auto routing our board",
          "Final look at the completely auto routed board",
          "More auto routing practice"
        ],
        "Thank you!": [
          "Thank you!"
        ]
      },
      "requirements": [
        "Students should know basics of electronics"
      ],
      "description": "This course will teach you in a systematic way how to use KiCad 6 for your PCB (Printed Circuit Board) design, it will take you from not knowing the software to making a development board at the final project without overwhelming you with a large number of hours of videos to watch.\nThe approach to teach is in creating a simple project while learning the different parts of the software, then adding up to that project in the following sections, and when the student gets familiar with it the other parts like menus, sub-menus and tool bars are explained.\nThe main project in the course is to create REV1 of a two phase bipolar stepper motor controller then students are asked to create REV2 with different requirements and motor.\nThe last project is about creating a development board and routing it using an auto router with the guidance of the videos and lectures in the final section. There are photos of of the manufactured printed circuit boards created in this course in the different sections.\nSpecial attention was given to the audio and video quality while creating the course for a smooth transition between lectures. The music at the end of every lecture is a hint of the end. Also, a great effort was done to average the lecture at 5 minutes.\nThe purpose of the quiz in the course is not to grade students but to open the eyes on important facts and a subject to google and learn more out of the course scope.\nWhether PCD design is a requirement or a hobby for you, you are going to enjoy the course!",
      "target_audience": [
        "Electronics hobbyists, electrical and electronics engineering students, engineers, and whoever is interested in creating Printed  Circuit Boards"
      ]
    },
    {
      "title": "Blynk mobile development for Arduino - Updated for Blynk 2",
      "url": "https://www.udemy.com/course/blynk-iot/",
      "bio": "Learn how to use the Blynk platform to create apps for iOS and Android that works with the Arduino and ESP32.",
      "objectives": [
        "How to use the Blynk platform to create apps for iOS and Android.",
        "How to use Blynk with the Arduino Nano 33 IoT.",
        "How to use Blynk with the ESP32.",
        "How to create a Blynk project on the Blynk public server.",
        "How to use common widgets, such as the Button, LED, Slider, Step Control, Joystick, Color Picker, Timer, Superchart.",
        "How to create email and smartphone notifications.",
        "How to create Blynk projects with two devices.",
        "How to setup a private Blynk server on a Raspberry Pi Zero W.",
        "How to configure and customise a private Blynk server.",
        "How to optimise your Raspberry Pi Zero W for best performance as a Blynk server host."
      ],
      "course_content": {
        "Introduction": [
          "01.10 What is this course about?",
          "01.20 Software you will need",
          "01.30 Hardware you will need",
          "01.40 A quick review of the Blynk platform",
          "01.41 A quick review of the new Blynk platform",
          "01.50 How to get the most out of this course"
        ],
        "(NEW) Getting started with Blynk Cloud": [
          "02.10 An example Blynk app",
          "02.20 Create your Blynk account (mobile app or Cloud console)",
          "02.30 Hands-on: Create the app Template",
          "02.40 Hands-on: Setup the ESP32 device",
          "02.50 Hands-on: add an LED state confirmation widget",
          "02.60 Hands-on: add a random number datastream",
          "02.70 Hands-on: add a second LED control widget",
          "02.80 Hands-on: add a logger"
        ],
        "(NEW) Blynk Edgent and Firmware Over the Air": [
          "03.10 The Blynk Edgent library",
          "03.20 Convert the demo app to FOTA (Firmware Over the Air)",
          "03.30 Upload Edgent firmware to device and configure Wifi",
          "03.40 Test, change firmware and push update to device (FOTA)"
        ],
        "(LEGACY) Getting Started with Blynk": [
          "02.10 Your first Blynk app using the public server, review",
          "02.20 The Arduino Nano 33 IoT",
          "02.30 Install the Blynk app, create an account",
          "02.40 Create a new Blynk app",
          "02.50 How to use a virtual pin",
          "02.60 Replace the Arduino Nano 33 IoT with an ESP32"
        ],
        "(LEGACY) Blynk with two or more devices": [
          "03.10 Dual-device example with Arduino Nano 33 IoT and ESP32",
          "03.20 Setup project in Blynk",
          "03.30 Sketch for the Arduino and the ESP32",
          "03.40 Dual-device project demonstration"
        ],
        "Explore some of the Blynk widgets": [
          "04.00 Watch this before you continue",
          "04.01 About Blynk basic vs Pro widgets",
          "04.05 How to do these Blynk experiments",
          "04.10 About pins",
          "04.20 Button and styled button",
          "04.25 Hardware button LED",
          "04.26 Hardware potentiometer LED",
          "04.30 Vertical and horizontal slider",
          "04.35 Vertical and horizontal step control",
          "04.40 Joystick",
          "04.50 zeRGBa color picker",
          "04.60 Timer",
          "04.70 LCD with Sensor MCP9808 precision temp sensor (simple)",
          "04.75 LCD with Sensor MCP9808 precision temp sensor (advanced)",
          "04.80 Value and Labeled value display",
          "04.85 Superchart",
          "04.90 Gauge push/pull",
          "04.95 Gauge with accelerometer",
          "04.100 Level with accelerometer",
          "04.110 Terminal receive",
          "04.115 Terminal send",
          "04.120 Email notification",
          "04.130 Smartphone notifications"
        ],
        "Setup a private Blynk server on a Raspberry Pi Zero W": [
          "05.05 What is this section about?",
          "05.10 Prepare the Raspberry Pi Zero W with the OS",
          "05.12 Boot the Raspberry Pi for the first time and basic configuration",
          "05.20 Optimise OS for RPi Zero",
          "Private server installation instructions (text)",
          "05.30 Install the Blynk server",
          "05.40 Test private server with a new Blynk project"
        ],
        "Private Blynk server configuration": [
          "06.10 Introduction to Blynk server configuration",
          "06.20 Setup autostart",
          "06.30 Enable email notifications",
          "06.50 Security with self-signed certificates",
          "06.60 Access your Blynk server from the Internet with port forwarding",
          "06.70 The properties file"
        ],
        "Bonus Lecture": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Working knowledge of the Arduino IDE.",
        "Ability to write simple programs for the Arduino.",
        "Have at least one Arduino board (two boards needed if you want to try out a dual-device project).",
        "See free Lectures 2 and 3 for detailed software and hardware requirements."
      ],
      "description": "--------------------------------\nPLEASE NOTE:\nA few months ago, Blynk completed a significant revamp of their platform. The revamp introduced new features, and ended support for others.\nBlynk 2.0 is much more powerful then the legacy version, and cheaper for hobbyists. It maintains the familiar graphical user interface for creating mobile applications, and adds a cloud dashboard. It also offers a significantly upgraded Arduino library packed with features, including support for over the air firmware upgrades.\nWe have updated the course to cover all new features, and to bridge your knowledge from Blynk \"legacy\" to Blynk \"2.0\".\n--------------------------------\nWith this course, you will learn how to use the Blynk platform to create apps for iOS and Android that work with the Arduino Nano 33 IoT and the ESP32 or any other supported device.\nWith a Blynk smartphone app, you will be able to create powerful applications that integrate your smartphone with any supported device to read data from sensors, control motors, log data, and send out notifications.\nThe Blynk Platform consists of a smartphone application for Apple iOS and Android, microcontroller libraries for dozens of devices like the Arduino MKR 1010, and server software for Linux or Windows hosts.\nThe Blynk smartphone app is like the Arduino IDE: it is a smartphone app editor that allows you to compose your smartphone app using a simple drag-and-drop interface.\nNo programming is needed.\nThe main focus of the Blynk platform is to make it super-easy to develop the mobile phone application.\nAs you will learn in this course, developing a mobile app that can talk to your Arduino is as easy as dragging a widget and configuring a pin.\nThe Blynk device libraries make it easy to connect an Arduino or other microcontroller to a Blynk project. For programming a device like the Arduino Nano 33 IoT or the ESP32, you will use the Arduino IDE.\nAnd, the Blynk server is the component that allows your Blynk smartphone app and as many devices as you want to integrate within one or more Blynk projects.\nThis course is perfect for people who want to create mobile phone-powered microcontroller applications.\nYou may want to create a home automation system, a rocket launcher, a robot, or even an industrial automation application.\nAll this is possible with Blynk.\nThis course will introduce you to the Blynk platform through a series of projects based on an Arduino Nano 33 IoT and an ESP32.\nYou will also show you how to set up your Blynk private server on a Raspberry Pi Zero W so that you can create applications without limitations of size and performance that the public server imposes.",
      "target_audience": [
        "People that are already familiar with the Arduino that want to create IoT mobile apps."
      ]
    },
    {
      "title": "ESP8266 & Micro Python for Internet of Things",
      "url": "https://www.udemy.com/course/iot_using_nodemcu_micropython/",
      "bio": "Unleash the Power of Your Apps: Explore Boundless Possibilities with Sensors (Temperature, Humidity, Gas & Motion)",
      "objectives": [
        "How to create smart IOT applications over NodeMCU hardware Using MircroPython through PyCharm IDE ?",
        "How to use PyCharm as IDE for Code Development & Flashing ?",
        "How to use Vibration / Temperature / Humidity / Gas / LiDAR Sensors ?",
        "How to use Adafruit, Thingspeak, apps for Analysis & Visualization of Data Grabbed from different Sensors ?",
        "How to use Google Voice and IFTTT to make complex \" voice based device control \" applications simple ?",
        "How to use LCD Display Interfaces like SSD1306, Nokia 5110 ?",
        "What is JSON format and how to use it with IoT applications ?"
      ],
      "course_content": {},
      "requirements": [
        "Windows10 Computer",
        "Little Knowledge on Basic Electronics",
        "A Bread Board with a bunch of jumper wires and supply MB102(Optional) (Costs 4$)",
        "ESP8266 NodeMCU-V3 Board(Costs 3$, where as a PyBoard costs you 10 times)",
        "RGB LED(Costs 0.5$)",
        "Motion Sensor SW420 (Costs 0.75$)",
        "Temperature and Humidity Sensor DHT11(Costs:1$)",
        "PyCharm(Free)",
        "Urge to Complete Course",
        "[For New Lectures] 128 x 64 OLED Display - SSD1306 (Costs 1$)",
        "[For New Lectures] uLiDAR Moule - VL6180x (Costs 3$)",
        "[For New Lectures] Nokia 5110 Display (Costs 1.7$)"
      ],
      "description": "Course Updates that Propel Your Learning Experience to New Heights!\nUPDATE 12: ¡Hola! El curso ahora cuenta con subtítulos en alemán para una experiencia de aprendizaje inclusiva [Powered by Google Translate].\nUPDATE 11: Guten Tag! Der Kurs ist nun mit deutschen Untertiteln/Bildunterschriften ausgestattet, um eine inklusive Lernerfahrung zu ermöglichen [Powered by Google Translate].\nUPDATE 10: Immerse Yourself in Project 9! Unleash the Power of Lab 13 & 14 to Create Custom Webpages for Effortless Control of NodeMCU-connected Devices.\nUPDATE 9: Exciting Additions! Lab 13 & 14 Introduce You to the World of NodeMCU as a Webserver, as well as the Basics of HTML & CSS. Get Ready for an Engaging Web Development Journey!\nUPDATE 8: Discover Project 8's Data Logging Magic! Learn How to Push Sensor Data to Google Sheets, Leveraging the Insights from Lab 4 and Building on the Knowledge from Project 7.\nUPDATE 7: Thrilling Projects Ahead! Building on the Foundation of Labs 5 and 6, Project 7 Unveils the Art of Pushing Notifications on Alarming Activities. Brace Yourself for an Interactive Experience!\nUPDATE 6: Unleash the Power of Push Notifications! Dive into the World of NodeMCU and Pushbullet, Enabling Seamless Mobile Alerts and Notifications on Multiple Devices.\nUPDATE 5: Take a Deep Breath, It's Time for MQ135! Explore the Realm of Gas Detection and Empower Your Decision-Making Process with this Cutting-Edge Sensor.\nUPDATE 4: Get Creative with NodeMCU and Nokia5110 Display! Master the Art of Parsing JSON Data, Create a Dynamic Weather Station Dashboard, and Illuminate Your IoT Projects Like Never Before.\nUPDATE 3: Embrace the Excitement of LiDAR in IoT Apps! Step into the Future with a Bonus Lecture on Gesture Recognition using VL6180x—STMicroElectronics' Popular Sensor for Mobile Phones and IoT Applications. Let Your Imagination Run Wild with New Ideas!\nUPDATE 2: Your Requests Answered! Dive into Bonus Lectures on SSD1306—A Marvelous 128 x 64 OLED Display. Learn to Draw Objects, Display Custom Images, and Even Run Mesmerizing GIFs on SSD1306. The Possibilities are Endless!\nUPDATE 1: Enhancing Accessibility for a Seamless Learning Experience! Responding to Valuable Feedback, All Lectures Now Feature Properly Transcribed Captions (CC). Say Goodbye to Annoying Automatic Transcriptions and Enjoy a Clearer Instructional Journey.\n\n\nDon't miss out on these incredible updates that add depth, interactivity, and accessibility to your learning adventure. Enroll today and take your IoT skills to the next level!\n\n\nDescription :\nEmbark on an Exciting IoT Journey with NodeMCU: Create Easy and Impactful Applications at Lightning Speed!\nAre you ready to dive into the world of Internet of Things (IoT) and unleash your creativity? Look no further than this captivating course! Designed for students and enthusiasts alike, we provide a concise yet comprehensive introduction to IoT, empowering you to swiftly develop practical and innovative applications using NodeMCU hardware and a range of supporting sensors.\nWhile traditional IoT courses rely on costly Raspberry Pi setups, we take a different approach by utilizing NodeMCU—a remarkable hardware solution that's open-source, interactive, and incredibly affordable. Powered by ESP8266, this smart and Wi-Fi enabled device offers a simple yet powerful platform for your IoT projects.\nUnlike other courses that primarily focus on C/C++ programming, our course puts the spotlight on MicroPython—an optimized implementation of the Python 3 programming language tailored for microcontrollers and constrained environments. This choice ensures a smooth and user-friendly coding experience, even for beginners.\nEquipped with the popular PyCharm IDE (free as the community edition), you'll have a powerful tool at your fingertips to bring your IoT ideas to life. Bid farewell to dull lectures and introductory graphics—our course takes a hands-on, experimental approach, immersing you in captivating labs and exciting projects from start to finish.\nUnleash the potential of sensors such as vibration, temperature, humidity, and pressure as you learn to effortlessly interface with them. But that's just the beginning! We'll guide you through the process of posting and visualizing data collected from these sensors on the internet. Harness the power of platforms like Thingspeak and Adafruit_IO to create stunning visualizations and gain valuable insights from your IoT data.\nWhat's more, we'll empower you to control IOs and devices connected to your NodeMCU hardware from anywhere in the world. Imagine the possibilities of managing your IoT ecosystem with the help of Google Voice Assistant and If This Then That (IFTTT) platforms, making your projects truly interactive and responsive.\nOur motivation to develop this course stemmed from recognizing the need for an IoT learning experience that fits within a limited budget. Join us in this thrilling adventure, where innovation meets affordability. Enroll now and unlock your potential to build extraordinary IoT applications with NodeMCU!",
      "target_audience": [
        "Hobbyists, Electronics Beginner, Electronics Professionals"
      ]
    },
    {
      "title": "Zynq Ultrascale+MPSoC Development",
      "url": "https://www.udemy.com/course/learn-zynq-ultrascale-plus-mpsoc-development/",
      "bio": "Zynq Ultrascale+MPSoC Training with VIVADO IPI, SDK, Petalinux",
      "objectives": [
        "Learn Zynq Ultrascale+ FPGA Design Methodology",
        "Zynq Ultrascale+ MPSoC FPGA Design with VIVADO IPI, SDK and Petalinux",
        "Create embedded systems with APU, RPU and GPU of the Zynq Ultrascale+MPSoC",
        "Building Software Subsystems with VIVADO SDK and Petalinux",
        "Create Bootable systems and Debugging the Software Application",
        "Implement the MPSoC based projects on Ultra96 [ZCU100] FPGA Board"
      ],
      "course_content": {
        "Section 1 Zynq Ultrascale+ Architecture Overview": [
          "Zynq Ultrascale+MPSoC Architecture Part I",
          "Zynq Ultrascale+MPSoC Architecture Part II",
          "Section 1 Lab 1: Basic IP Overview and Customization",
          "Section 1 Lab 2: First Boot-Up of Ultra 96 FPGA [Zynq Ultrascale+ MPSoC]"
        ],
        "Section 2 Basic Embedded Design with Zynq Ultrascale+ FPGA": [
          "Section 2 Basic Embedded Design with Zynq Ultrascale+MPSoC",
          "Section 2 Lab 21_Embedded Design with Zynq Ultrascale_MPSoC",
          "Section 2 Lab 22 Creating Hello World Application for ARM Cortex A53",
          "Section 2 Lab 23 Creating Hello World Application for Cortex R5",
          "Lab 24: Hello World & Peripheral Test with VIVADO & Ultra96"
        ],
        "Section 3 Building Software for PS Subsystem with VIVADO SDK and Petalinux": [
          "Section 3 Building Software for PS Subsystem with VIVADO SDK & Petalinux",
          "Section 3 Lab 31 a & Lab 31 b Creating FSBL for ARM Cortex A53 & R5",
          "Section 3 Lab 31c & Lab 31d Creating Baremetal Application for APU & RPU"
        ],
        "Section 3 Part II: Petalinux Development with Zynq": [
          "Petalinux Development Basics"
        ],
        "FreeRTOS Development with MPSoC FPGA": [
          "Lab: Creating Multi-thread application on FreeRTOS for MPSoC Boards: Ultra96"
        ],
        "Machine Learning with MPSoC FPGA": [
          "Deep Learning (DPU) TRD for Ultra96 FPGA",
          "ResNet-50 CNN implementation with VIVADO/Petalinux 2019.2 for Ultra96",
          "DPU TRD for ZCU104 FPGA Board",
          "DPU (3.0) TRD for ZCU106"
        ],
        "MPSoC-DPU TRD VIVADO Flow (Vitis AI 2.0)": [
          "Kria KV260 (MPSoC) DPU TRD-VIVADO Flow"
        ],
        "DPU-PYNQ Implementation on Ultra96/ZCU104/ZCU111": [
          "Deep Learning with DPU and PYNQ"
        ],
        "Bonus Lecture": [
          "What Next?"
        ]
      },
      "requirements": [
        "Idea of Zynq 7000 architecture",
        "VIVADO Design Suit Overview",
        "Basic Idea of SDSoC",
        "Basic Idea of Embedded C/C++",
        "Idea of Linux File system and Development"
      ],
      "description": "This course is on FPGA Development with Zynq Ultrascale+ FPGA Family, Programming different blocks of MPSoC. We have included sessions on Zynq Ultrascale+ FPGA  for  embedded processing , building bare-metal application, FSBL and custom bootable system.\nThis Course will widen your views on FPGA Development with Zynq Ultrascale+ MPSoC , VIVADO IPI, SDK, Petalinux and SDSoC (Software Defined System on Chip) Design Tools. We have sessions on Architecture of this family of FPGA and Design Flow to real time project with MPSoC and design tools. We also have some demonstration session of the MPSoC project on Ultra96[ZCU100] FPGA board.",
      "target_audience": [
        "FPGA engineer working on Embedded Design with Zynq MPSoC",
        "Electrical Engineer",
        "Electronics and Computer Engineering",
        "Computer Science"
      ]
    },
    {
      "title": "Raspberry Pi Essentials: Learn More in Less Time",
      "url": "https://www.udemy.com/course/raspberry-pi-essentials/",
      "bio": "Learn Raspberry Pi4 for beginners! Start from the basics and go all the way to build your own Projects",
      "objectives": [
        "Learn how to setup Raspberry Pi3/4 and write python programs",
        "Build several Raspberry Pi based Mini Projects to get more inside",
        "Get hands-on experience of working with Linux and Python Programming",
        "Build real world Raspberry Pi Projects such as Smart Home, Weather Monitoring Station"
      ],
      "course_content": {},
      "requirements": [
        "Raspberry Pi3/4 Model B/B+",
        "Computer with installed Windows OS",
        "You can create a small circuit with breadboard",
        "Knowledge of a multimeter, breadboard, Jumper wires will be great (but not must)",
        "Electronics Components: LED (5mm), Resistor (330ohm), Tact Switch, DHT11 Sensor Module",
        "Tools: HDMI Screen, HDMI Cable, MicroSD Card (8GB, Class 6),  SDCard Adaptor, USB Keyboard, Mouse",
        "For Raspberry Pi4 additional: USB Type-C Cable, Micro HDMI to HDMI Adapter required to complete Setup"
      ],
      "description": "The course is designed for beginners who wish to work with Raspberry Pi. It doesn’t matter if you already know Python Programming. We will begin our journey with Raspberry Pi right from the basics of setting up a Raspberry Pi for first-time boot. Later on, we will make some Raspberry Pi Projects. The concept learned in the early part of the course will help us take projects to the next level.\nThe Biggest objective of this course is to help you quickly get started with Raspberry Pi3/4. This course will not only help you learn Raspberry Pi Programming but also help you understand the underlying concepts of operating systems. We will build some cool projects which will motivate you to learn the concept of electronics\nThis course is a step-by-step guide to setting up Raspberry Pi for Programming. The course starts with very basics and ends up making internet-connected applications. We will set up every circuit from scratch and write python programs for it. We will spend enough time, in the beginning to get the basics right. This will save time in the long run and make you feel confident working with Raspberry Pi and Python.\nLater on, we will be building some mini projects using LED, Switches, DHT11 Sensors (Temperature/Humidity/Light/Distance), Streaming Live Data to the IoT Cloud (Internet of Things), and many more. These Projects will be small yet very powerful which enable you to get hands-on experience with different technologies related to embedded software and hardware development.",
      "target_audience": [
        "Anyone curious about Raspberry Pi4 & Microprocessor Programming",
        "People with no experience in Electronics and Software Development",
        "Students, Raspberry Pi Makers and Professionals looking to build Product Prototype",
        "Raspberry Pi makers who wish to enhance their skills and knowledge about Embedded Linux"
      ]
    },
    {
      "title": "VHDL for an FPGA Engineer with Vivado Design Suite",
      "url": "https://www.udemy.com/course/vhdl-fpga-engineer-with-xilinx-vivado-design-suite/",
      "bio": "Using Xilinx FPGA's",
      "objectives": [
        "Fundamentals of VHDL Programming that will help to ace RTL Engineer Job Interviews.",
        "Understand Vivado Design Suite flow for Digital System Design.",
        "How to write an RTL for Synthesis",
        "Different Modelling Styles in Hardware Description Language , Concurrent and Sequential Statements in VHDL",
        "How to use Xilinx IP's and create Custom IP's.",
        "IP integrator Design flow of the Vivado.",
        "Writing VHDL Test benches.",
        "Hardware Debugging in Vivado viz. Integrated Logic Analyzer, Virtual I/O.",
        "From Zero to Hero in VHDL"
      ],
      "course_content": {
        "Installing Vivado": [
          "Agenda",
          "Read this before downloading newer version of Vivado : 2020.2 or higher",
          "How to Download, Install Vivado Design suite and add License.",
          "Xilinx Vivado Webpack LIC FILE",
          "How to verify License Installation",
          "Adding boards such as Nexys 4 DDR which are not available in the Vivado",
          "Common Error with Vivado: Incorrect Microsoft Visual C++ redistributable package"
        ],
        "Performance Comparison ( Motivation)": [
          "Agenda",
          "Demonstration of Parallel architecture usage",
          "Ease of working with FPGA's",
          "User Programmable I/O of FPGA vs MCU",
          "Comparing Temporary storage",
          "Whether Coding Guidlines really matters?",
          "How to buy FPGA board in India (without paying Custom duty and GSTN no.)"
        ],
        "Frequently Asked Questions": [
          "Q1"
        ],
        "Vivado Design Flow P1": [
          "Agenda",
          "Design Flow P1",
          "Design Flow P2",
          "Design Flow P3",
          "Design flow P4",
          "Design Flow P5",
          "Summary of Design Flow",
          "First Look at VHDL Code",
          "Insights P1",
          "Insights P2",
          "Use of RTL analysis",
          "Use of Post-Synthesis View",
          "Assignment 1"
        ],
        "Vivado Design Flow Part 2": [
          "Agenda",
          "Understanding I/O Planning Project",
          "Understanding Synthesis Settings",
          "Clock Gating",
          "Fundamentals of FSM Encoding",
          "Vivado default Synthesis Configuration",
          "FSM Encoding Technique",
          "Understanding Implementation Strategies of VIVADO",
          "Code",
          "Complete FPGA Design Flow P1",
          "Complete Design flow P2",
          "Code",
          "Perform Complete Design flow."
        ],
        "Fundamentals : Signal and Variable": [
          "Agenda",
          "Fundamentals Signal and Variable P1",
          "Fundamentals Signal and Variable P2",
          "Format of Signal and Variable",
          "Datatypes in VHDL",
          "Using Built-in datatype",
          "Using Non-builtin datatypes",
          "Using User defined datatypes",
          "Using Signal",
          "Using Variable",
          "Initialization of Variable"
        ],
        "Dataflow Modeling Style": [
          "Agenda",
          "Different Modeling Style",
          "Dataflow Modeling Style Fundamentals",
          "Operators in Dataflow Modeling Style",
          "Assignment Operator in Dataflow Modeling Style",
          "Implementation of Half adder",
          "Implementation of Full adder",
          "Handling Multibit vectors P1",
          "Handling Multibit vectors P2",
          "Shift Operators Fundamentals",
          "Shift Operator Demonstration",
          "Rotation Operator Fundamentals",
          "Rotation Operator Demonstration",
          "Arithmetic Operator Fundamentals",
          "Arithmetic Opertation : Unsigned Type",
          "Arithmetic Opertation : Std_logic_Vector Type",
          "Understanding type-conversion function",
          "type-conversion Demonstration",
          "Conditional and Selected Signal Statement",
          "Conditional and Selected Signal Statement",
          "Implement Half Subtractor using Dataflow modeling style.",
          "Implement 4:1 Mux with Dataflow Modeling Style",
          "Implement 4-bit Gray to Binary Code Converter",
          "Performing Division"
        ],
        "Behavioral Modeling Style": [
          "Agenda",
          "Understanding Process block",
          "Behavioral Modeling Style Skeleton",
          "Understanding IF ELSE P1",
          "Understanding IF ELSE P2",
          "Good Practices : IF ELSE P1",
          "Good Practices : IF ELSE P2",
          "D-Flipflop with Synchronus Reset",
          "D-Flipflop with Asynchronus Reset",
          "Simulation : Asynchronus Reset D-Flipflop",
          "Simulation : Synchronus Reset D-Flipflop",
          "Case Statement Skeleton",
          "4:1 Mux with Case Statement",
          "Binary to Seven Segment Decoder P1",
          "Binary to Seven Segment Decoder P2",
          "Binary to Seven Segment Decoder P3",
          "Implementing Counter",
          "Code",
          "Right Circular Shifter P1",
          "Right Circular Shifter P2",
          "Code",
          "Design 8:1 Mux with Behavioral Modeling Style",
          "Design 8:3 Priority Encoder",
          "Design Universal Circular Shifter"
        ],
        "Understanding Testbench": [
          "Ways to create Testbenches",
          "Using Force Constant and Force Clock",
          "VHDL TB Fundamentals P1 : Testbench Overview",
          "VHDL TB Fundamentals P2 : Generating Random signals",
          "Code",
          "VHDL TB Fundamentals P3 : Generating Clock Signal",
          "Code",
          "Summary",
          "Code",
          "Example 1 : 4-bit Counter",
          "Code",
          "Example 2: Adder IP",
          "Design a testbench code for Serial In Serial Out Shift Register"
        ],
        "Structural Modeling Style": [
          "Target",
          "Half adder",
          "Full adder with Half adder",
          "Code",
          "Using Vivado IP Integrator : 4-bit Ripple Carry adder",
          "Block Design",
          "Johnson Counter with D FlipFlop",
          "Design 32:1 Mux with the help of 8:1 Mux using Structural Modeling Style.",
          "Design Ring Counter with the help of D Flipflop using Structural Modeling Style"
        ]
      },
      "requirements": [
        "Fundamental of Digital Circuit will give an added advantages."
      ],
      "description": "FPGA's are everywhere with their presence in the diverse set of the domain is increasing day by day. The two most popular Hardware description languages are VHDL and Verilog each having its unique advantage over the other. The best part about both of them is once you know one of them you automatically understand the other and then the capabilities of both worlds can be used to build complex systems. The course focus on the VHDL language. The curriculum is framed by analyzing the most common skills required by most of the firms working in this domain.  Most of the concepts are explained considering practical real examples to help to build logic.\nThe course illustrates the usage of  Modeling style, Blocking and Non-blocking assignments, Synthesizable FSM, Building Memories with Block and Distribute Memory resources, Vivado IP integrator, and Hardware debugging techniques such as ILA and VIO. The course explores FPGA Design flow with the Xilinx Vivado Design suite along with a discussion on implementation strategies to achieve desired performance. Numerous projects are illustrated in detail to understand the usage of the Verilog constructs to interface real peripheral devices to the FPGA. A separate section on writing Testebench and FPGA architecture further builds an understanding of the FPGA internal resources and steps to perform verification of the design.",
      "target_audience": [
        "VLSI Job Seeker/ Graduate student looking to pursue career as RTL Engineer/ Design Engineer/ Verification Engineer.",
        "Anyone interested to learn Xilinx FPGA/ Vivado Design Suite/ VHDL Hardware Description Language",
        "Anyone interested to start career in ASIC/ VLSI domain."
      ]
    },
    {
      "title": "Verilog HDL Through Examples",
      "url": "https://www.udemy.com/course/verilog-hdl-through-examples/",
      "bio": "Learn Verilog HDL to model digital circuits from the scratch through various examples",
      "objectives": [
        "Verilog HDL",
        "Digital Design in Verilog HDL",
        "Modelling Digital Circuits using Verilog HDL",
        "Fundamentals of Digital Electronics"
      ],
      "course_content": {},
      "requirements": [
        "Yes, A basic knowledge in Digital Electronics"
      ],
      "description": "Hey there, I welcome you all to my course 'Verilog HDL through Examples'\n\n\nWhy Verilog?\n\n\n1. To describe any digital system - microprocessor, memory, flip flop, Verilog is used. Hence it's called as a hardware description language.\n\n\n2. Using Verilog, we can model any electronic component and generate the schematic for the same.\n\n\n3. For timing analysis and test analysis of circuits, Verilog is apt.\n\n\nHighlights of the course:\n\n\n1. Key differences between a programming language like C, C++ or Python and a hardware description language like Verilog, VHDL, SystemVerilog are clearly\n\n\n2. All the fundamental concepts of Verilog are explained through standard combinational and sequential circuits.\n\n\n3. Learning through examples make them very simpler to learn.\n\n\n4. Proper theoretical explanation is provided for each of the circuit that is implemented in verilog in this course.\n\n\n5. Testbench for each design and knowing how to test and validate them.\n\n\n6. Creating Finite State Machines in Verilog.\n\n\n7. Download the code and design for each of the circuits in the resources section.\n\n\n8. Getting to know how to use EDA Playground for Verilog coding and how to generate the output waveform using EPWave.\n\n\n9. Some of the key concepts of Verilog like\nLevels of Abstraction, Two types of assignments, Producing delay, generating clock, Procedural assignments are all explained clearly.",
      "target_audience": [
        "Digital Electronics' Aspirants"
      ]
    },
    {
      "title": "Arduino Radar: Step By Step Guide",
      "url": "https://www.udemy.com/course/arduino-radar-step-by-step-guide/",
      "bio": "Create your Own Radar using Arduino and get a Green Map Showing Objects at your own Screen in no time",
      "objectives": [
        "Know and use Arduino",
        "Build your own Radar Using UltraSonic",
        "Know and use UltraSonic Sensor, Servo Motor",
        "Code different modules such as Servo, SR04",
        "Code Arduino in C and Java Coding"
      ],
      "course_content": {
        "Introduction": [
          "Section Intro",
          "Introduction",
          "Building a Radar System with Arduino",
          "Who We Are?",
          "Very Important Note: Review Process",
          "Final Output Radar Screen",
          "What You Will Learn in this course",
          "Summary",
          "Reading Material"
        ],
        "Hardware Requirements": [
          "Section Intro",
          "Hardware Requirements",
          "What is Arduino + Software Download",
          "What is Ultrasonic Sensor",
          "What is Servo Motor",
          "Understanding and Setting Up Arduino, Ultrasonic Sensors, and Servo Motors",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "Software Requirements": [
          "Section Intro",
          "Software Requirements Schematic",
          "Arduino Code Explained",
          "Download Processing Software for Java Code",
          "Processing Code + Java jdk",
          "Installing and Configuring Software for Arduino, Processing, and Java Integratio",
          "Summary",
          "Reading Material"
        ],
        "Software Download": [
          "Section Intro",
          "Software Download Links",
          "Summary",
          "Reading Material"
        ],
        "Arduino + Processing Code Version 1": [
          "Circuit Diagram for Assembly",
          "Arduino Code",
          "Processing Software Java Code",
          "Summary",
          "Reading Material"
        ],
        "Arduino + Processing Code Version 2": [
          "Section Intro",
          "Circuit Diagram for Assembly",
          "Arduino Code",
          "Processing Software Java Code",
          "Summary",
          "Reading Material"
        ],
        "Practical Assembly": [
          "Section Intro",
          "Basic Parts Needed for this Project",
          "Practical Assembly",
          "Summary",
          "Reading Material"
        ],
        "The End": [
          "Section Intro",
          "The End",
          "Summary",
          "Reading Material"
        ],
        "Practice Test": [
          "Arduino and Sensor Integration Practice Test"
        ],
        "Course Project": [
          "Section Intro",
          "Course Project",
          "Demonstrating Arduino Radar System",
          "Summary",
          "Reading Material"
        ]
      },
      "requirements": [
        "Basic experience in Electronics",
        "A Will to apply, not just watch"
      ],
      "description": ">>> This course will take you in a step by step guide on how to make your own Radar using Arduino Board. <<<\n\n\nWhy you should take this course?\nThis course teaches you how to create your own radar using Arduino\nLearn the basics of programming the Arduino Uno Board\nYou will learn about various sensors and how to read their values with code\nIt includes  interactive lessons that you can use to learn the basics of coding\nLearn how to make great project ideas, including real ones that are successfully used in different industries\nThe course is full of graphics, charts, and videos to help you understand the concepts\n\n\n>>> Continues Updates <<<\n4 Star | More Than 3000 STUDENTS!!! THANK YOU!!!\nWhat students are saying:\nNathan Johnnie says, \"As always Excellent!  \"\nDonald R. Lyons, Sr. says, \"The course is concise and to the point. There is not a lot of wasted discussion.\"\nWelcome to this course.\nYou will get to know how to wire each of these elements, how it works, and why we are using it inside this Project, in no time you will find yourself making your own Radar that shows different object and the distance between you and each object.\nA Radar station is a device that collects data related to objects in the surronding environment using Ultrasonic sensors and a Servo motor to cover wider area.\nThe aim is to make a portable Radar Device\nFeatures it should have\nDistance\nAngle\nMap that show different objects\nYou will wire sensors and motor to Arduino UNO board and start testing the code yourself, every piece of code is well explained so that you can easily know what each segment does.\nA lot of information is waiting for you inside this course, join now and start making your own.",
      "target_audience": [
        "Electronics Geeks",
        "Arduino Geeks",
        "Anyone interested in making amazing electronics Projects",
        "Anyone interested in making amazing Microcontroller Projects"
      ]
    },
    {
      "title": "Arduino Sensor Mastery: Unleashing Digital Brilliance",
      "url": "https://www.udemy.com/course/dc-motor-arduino/",
      "bio": "Decode Arduino Secrets! Master Analog Sensor Reading for Robots, Weather Stations, and Beyond",
      "objectives": [
        "How to read Analog Sensors using Arduino",
        "Wire Analog Sensors to Arduino",
        "Setup your Arduino Sketch",
        "Write code to collect readings from Analog Sensors",
        "Analyze and Convert Sensor Readings",
        "Use sensor data to achieve project goals"
      ],
      "course_content": {
        "Introduction & Things you need to know": [
          "Section Intro",
          "Introduction",
          "Exploring the Role of Sensors in Arduino-Based Projects",
          "How to read analog sensors using Arduino",
          "Quiz",
          "Very Important Note: Review Process",
          "Summary",
          "Reading Material",
          "Understanding the Basics of Arduino and Analog Sensors"
        ],
        "Hardware and software components": [
          "Section Intro",
          "Hardware and software components",
          "Summary",
          "Quiz",
          "Reading Material"
        ],
        "Arduino": [
          "Section Intro",
          "What is Arduino",
          "How to Download and Install Arduino",
          "Reading Material",
          "Exploring Arduino and Reading Analog Sensor Data"
        ],
        "ADC in Arduino Explained": [
          "Section Intro",
          "ADC in Arduino Explained",
          "analogRead",
          "Quiz",
          "Summary",
          "Reading Material"
        ],
        "Working process and applications": [
          "Section Intro",
          "Wiring Analog Sensors to Arduino",
          "Writing code to collect reading from analog sensors",
          "Quiz",
          "Practical Analog Sensor Testing",
          "Wiring, Coding, and Testing Analog Sensors with Arduino",
          "Summary",
          "Reading Material"
        ],
        "Sensor Data Manipulation": [
          "Section Intro",
          "Analyze and convert Sensor Reading",
          "Manipulating Sensors Reading",
          "Sensor Data Analysis and Manipulation in Arduino",
          "Summary",
          "Reading Material"
        ],
        "Practice Test": [
          "Practice Test on Arduino and Analog Sensors"
        ],
        "Who we are?": [
          "Section Intro",
          "Who We Are?",
          "Summary",
          "Reading Material"
        ],
        "Course Project": [
          "Section Intro",
          "Course Project",
          "Summary",
          "Reading Material",
          "Demonstrating Real-World Sensor Applications with Arduino"
        ],
        "Course Wrap-Up": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "An Internet Connection",
        "Basic knowledge in Programming"
      ],
      "description": "Decode Arduino Secrets! Master Analog Sensor Reading for Robots, Weather Stations, and Beyond\nUnlock the power of analog sensors with Arduino! Whether you're crafting robots, weather stations, or dynamic prototypes, this course guides you in reading data from analog sensors. Explore popular Arduino sensor modules, unravel the intricacies of analog readings, and gain hands-on experience for real-world projects.\nWhy Take This Course?\nDecode any analog sensor data for informed code decisions.\nMaster potentiometers, photocells, contact switches, sound sensors, and ultrasonic range finders.\nNavigate ADC readings in the Arduino IDE.\nTailored for those with programming experience and Arduino familiarity.\nWhat You'll Learn:\nHarness the potential of your Arduino sketch.\nCode for diverse Arduino sensor readings.\nAnalyze and transform sensor data effectively.\nImplement data-driven decisions for project evolution.\nEmbark on a journey that goes beyond theory – practice with real-world examples and elevate your projects through a profound understanding of analog sensors.\nEnroll now and get started on this journey.\nEmbark on a journey that goes beyond theory to help you master connecting sensors to your Arduino boards.\nEmbark on a journey that goes beyond theory – practice with real-world examples and elevate your projects through a profound understanding of analog sensors.\nEnroll NOW to enjoy this journey with us.\nWhat You Will Learn:\nHow to decode analog sensor data.\nHow to program and read various sensors using Arduino.\nHow to implement sensor data into practical projects.\nHow to analyze sensor readings and make data-driven decisions.\nWho Is This Course For:\nArduino enthusiasts looking to enhance their skills.\nHobbyists and makers interested in sensor applications.\nStudents and educators seeking hands-on learning experiences.\nAnyone with basic programming knowledge eager to explore Arduino sensors.\nRequirements:\nBasic understanding of Arduino and programming.\nAn Arduino board and various sensor modules (potentiometers, photocells, contact switches, sound sensors, ultrasonic range finders).\nEnthusiasm to learn and experiment.",
      "target_audience": [
        "Anyone Interested in Learning New Things about Arduino",
        "Anyone with slight interest in making great things",
        "Arduino Geeks",
        "Electronics Geeks",
        "Hardware developers"
      ]
    },
    {
      "title": "Arduino Complete Course : Build 30+ projects step by step",
      "url": "https://www.udemy.com/course/arduino-complete-course-build-30-projects-step-by-step/",
      "bio": "Learn Arduino from basics to advance step by step with real working robotic projects",
      "objectives": [
        "Arduino",
        "Arduino Programming",
        "Voice Controlled Robot",
        "Mobile Control Rover",
        "Obstacle Avoiding Robot",
        "Line Following Robot",
        "Laser Alarm System",
        "Project Development using Arduino",
        "Electronics App Development",
        "Arduino IDE",
        "Programming Basics, Datatypes, Conditionals, Loops and Functions",
        "Light Measurement using LDR",
        "Distance Measurement using Ultrasonic Sensor",
        "Object Detection using IR sensor",
        "Line Detection using Line sensor",
        "Colour Detection using Colour sensor",
        "Laser Module",
        "Touch Detection on a body",
        "How to run a LCD Display",
        "Motion Detection using PIR sensor",
        "Temperature Detection using DHT sensor",
        "Motors and Shields Working",
        "How to run gear motors",
        "Chasis and Robots",
        "MIT app inventor",
        "and 30 Arduino Projects"
      ],
      "course_content": {},
      "requirements": [
        "No prior requirements just a computer with internet"
      ],
      "description": "Arduino is a subject that can't be learned without practical experience. This course is designed based on the needs of a student. Here we will begin with very basic concepts of Arduino, like what is an Arduino. And all of its importance, scope, and advantages will be discussed. Then we will move to the course where the course is divided into 5 parts.\n1. Arduino Programming\n2. Hardware\n3. Automatic Robots\n4. App Development\n5. Post Controlled Robots\nNow let me explain to you what you are going to learn in all of these.\nArduino Programming\nBefore directly jumping on creating projects. We will first learn the basics. We will understand what is programming and how it is linked to Arduino and Hardware.\nWe will first learn about the Arduino IDE and how we can install it\nThen we will understand about the compilers and editors\nOnce we are done with these we will move to the basics of programming and understand why is it important to learn to program\nThen we will create our first project which is blinking a led using our programming basics.\nWe will then understand about the simulation. Where we will learn to create projects without the hardware. All by using virtual tools.\nThen we will move to programming concepts and will learn about the following.\nDatatypes\nOperators\nConditionals\nLoops\nFunctions\nWith practical demonstrations in every concept\nAnd once we are done with the programming we will again practice all of our skills in a polish programming module where we will create more than 5 projects to apply whatever we have learned.\nHardware\nNow once we finish the programming. We will learn that how we can control the hardware using programming. There we will cover the following\nWe will learn to measure the light using an LDR sensor\nDistance using Ultrasonic sensor\nLine using a line sensor\nColour using the color sensor\nObject using IR sensor\nMotion using PIR sensor\nTouch on the body using the Touch sensor\nTemperature using DHT sensor\nWe will also learn about the motors and learn to run a DC motor\nHow to control the direction of a motor\nServo motor\nGear motors\nChasis\nLCD and Oled displays\nand will create mini projects with all of these components to understand their working perfectly\nAutomatic Robots\nAfter learning Programming and Hardware we will apply our skills and create 3 projects in this part.\nWhich includes\nA Laser Alarm System.\nA-Line Following Robot\nAn Obstacle Avoiding Robot\nApp Development\nAutomatic robots were great and fun to create. But what if we can control the functions of a robot anytime. So for that, we will create our own apps using which we can control our robots anytime. Which we will learn in this part.\nWe will learn about the MIT app inventor and develop our skills in it\nWe will learn the front end and backend of an application\nOur first app will be for controlling light\nThen we will create 7 apps for all kinds of applications\nWe will create apps to control multiple functions\nWe will create apps to control motors and gears\nWe will create apps to control devices using our voice.\nPost Controlled Robot\nOnce we got our skills in app development we will use those skills and develop our own mobile app-controlled projects where we will create two big projects.\nA Mobile Controlled Rover\nA Voice Controlled Robot",
      "target_audience": [
        "Arduino",
        "Electronics",
        "Electronics and communication",
        "Robotics",
        "App Developer",
        "Programmer",
        "IT",
        "Computer Science",
        "Arduino Uno"
      ]
    },
    {
      "title": "I2C, SPI, UART (RS232), VGA in VHDL for FPGA interfacing",
      "url": "https://www.udemy.com/course/vhdl-implementaiton-of-i2c-serial-communication-protocol/",
      "bio": "I2C, SPI, UART (RS232), VGA communication protocols and VHDL Implementations",
      "objectives": [
        "Serial Communication and Display Protocols snd Their VHDL Implementations",
        "Inter Integrated Circuit (I2C) Serial Communication and its VHDL Implementations",
        "SPI Communication and its VHDL Implementation.",
        "UART (RS232) Communication and its VHDL implementation.",
        "VGA Display Protocol and its VHDL Implementation"
      ],
      "course_content": {},
      "requirements": [
        "VHDL Programming Language and Knowledge of State Machines or Timed State Machines is Required"
      ],
      "description": "In this course we first provide fundamental information about I2C, SPI, UART (RS232), VGA serial communication protocols, then VHDL implementaiton of these protocols are explained in details. Timing waveforms of the protocols are explained by examples in a clear manner. The student who wants to take this course should know VHDL programming and he/she should have an idea about timed state machines in VHDL.",
      "target_audience": [
        "Hardware Engineers Interested in VHDL Implementation of Serial Communication Protocols Such as I2C Serial Communicaiton, SPI Serial Communication, UART (RS232) Serial Communication"
      ]
    },
    {
      "title": "Arduino: Build an Iron Man Arm with Voice Control",
      "url": "https://www.udemy.com/course/arduino-build-your-own-bionic-arm-with-voice-recognition/",
      "bio": "Master Arduino by Creating a 3D-Printed Iron Man Arm with Voice Recognition, Accelerometer, Sound Effects, and More!",
      "objectives": [
        "Build a Functional 3D-Printed Bionic Arm: Learn how to assemble and program an Arduino-powered arm with voice recognition and motion control.",
        "Master Arduino Components: Gain hands-on experience working with servos, LEDs, lasers, accelerometers, and sound modules.",
        "Connecting all of the Peripherals component that are in the bionic arm to an Arduino, such as : Leds, Lasers, Accelerometer unit, Voice recognition,sounds etc.",
        "How to Program the Voice Recognition Unit with your own voice, and how to connect it to the Arduino + programming Arduino to communicate with the component.",
        "Connecting all of the parts, i will give you my schematic - very easy to read, with photos and i will explain it with Videos for every step",
        "Building Bionic ARM, Fully functional with Voice Recognition, Sounds, rubber band minigun and much more!",
        "How to 3D print the parts of the bionic arm",
        "How to upload the sounds to the Sound Card",
        "Where to buy all of the electronic parts needed!"
      ],
      "course_content": {},
      "requirements": [
        "No Prior Arduino Experience Needed: This course is beginner-friendly, with clear, step-by-step instructions for those new to Arduino.",
        "Basic Understanding of Electronics: A basic understanding of electronic components (e.g., LEDs, motors, sensors) will be helpful but not required.",
        "Arduino Nano Board: You will need an Arduino Nano, which will be used to control the arm.",
        "3D Printer: A 3D printer is needed to print the arm parts. If you don’t have one, you can also use a 3D printing service.",
        "Basic Tools: Basic tools for assembling the arm and components, such as a soldering iron, screwdriver, and wire cutters.",
        "Computer with Arduino IDE Installed: You’ll need a computer to write and upload the Arduino code to the board. Instructions for installing the Arduino IDE will be provided.",
        "This course is designed to be accessible for beginners, so even if you have no prior experience, you’ll learn everything you need to get started. Join today and start building your own Iron Man arm!"
      ],
      "description": "Build Your Own Arduino-Powered Iron Man Arm with Voice Recognition!\nIn this Arduino course, you’ll learn how to create a fully functional, 3D-printed bionic arm using Arduino Nano and various electronic components. This hands-on project will teach you practical Arduino skills while guiding you step-by-step to assemble your own working Iron Man-inspired arm.\nWhat Students Are Saying:\n“Thanks for the course, please make more creative courses like this one. It’s the best way to learn!” – Juan Ricardo\n“WOW! This is an amazing course! The explanations are very clear. Thank you so much.” – Or Itzhak\nWhat You’ll Build and Learn:\nVoice recognition for controlling arm functions.\nInteractive features like LEDs, sound effects, and a mini rubber band launcher.\nMotion-controlled lasers using the MPU6050 accelerometer and gyro sensor.\nServo motors for precise movements.\nHow to 3D print, assemble, and wire components for a cohesive design.\nYou’ll receive:\n3D printer files (.stl) compatible with all printers.\nFull schematics for wiring and assembly.\nSource code for Arduino with step-by-step guidance.\nA detailed parts list with links to purchase components.\nThis course is for anyone looking to dive into Arduino while working on a creative and exciting project. With the skills you’ll gain, you’ll be ready to tackle other Arduino-based projects like smart home automation and more!\nJoin today and bring your Iron Man arm to life!",
      "target_audience": [
        "Beginners in Arduino and Electronics: Ideal for those with little to no experience in Arduino, electronics, or programming, who want to dive into building creative, hands-on projects.",
        "Tech Enthusiasts and Makers: Perfect for hobbyists and DIY enthusiasts interested in robotics, 3D printing, and interactive systems like a bionic arm.",
        "Aspiring Engineers and Students: Great for engineering students or those interested in learning the fundamentals of electronics and programming through a fun and engaging project.",
        "Fans of Pop Culture and Robotics: If you’ve always wanted to build your own Iron Man arm or a similar bionic project, this course is for you!",
        "Arduino Learners Seeking a Creative Project: If you're already familiar with basic Arduino concepts and want to level up by working on an exciting, real-world application, this course will guide you through it.",
        "This course is designed for anyone eager to explore Arduino, 3D printing, and voice-controlled electronics while working on an ambitious and fun project. No prior experience is necessary—just a passion for learning and building!"
      ]
    },
    {
      "title": "Design and Simulate Arduino Boards and Test Your Code",
      "url": "https://www.udemy.com/course/simulate-arduino-boards-and-start-testing-your-codes-freely/",
      "bio": "Start working with different Arduino boards without buying them and start unleashing the power of code in Simulation",
      "objectives": [
        "Simulate Arduino UNO Boards",
        "Simulate Arduino Mega Boards",
        "Simulate Arduino nano Boards",
        "Write codes and test them without having an Arduino Board",
        "Test Codes without having a real physical an Arduino Board"
      ],
      "course_content": {},
      "requirements": [
        "Have A Computer",
        "Have A basic Experience in browsing the internet",
        "Have a Will to apply",
        "No materials required if you only wish to view the course"
      ],
      "description": ">>> The Arduino is an open-source electronics platform based on easy-to-use hardware and software. Sensing the environment by receiving inputs from many sensors, Arduino affects its surroundings by controlling lights, motors, and a number of other accessories. It's intended for anyone making interactive hardware projects and in this course, we will make it easy for you to Design and Simulate Arduino Boards and Start Testing Your Codes Freely. <<<\nWhy you should take this course?\nYou will learn how to design and simulate Arduino boards and test your code.\nYou will learn how to experiment with different Arduino boards without buying them.\nYou will get complete knowledge on how to design and simulate Arduino boards.\nYou will explore how to use sensors, actuators, and other components for a variety of projects.\nYou will use the simulator to get up and running quickly with a graphical interface that allows you to wire elements in a circuit, add code if needed, and view the results instantly.\nYou will understand the various ways you can connect various components together.\n>>> Continual Updates <<<\nMore Than 700 STUDENTS!!! THANK YOU!!!\nWhat students are saying about Design and Simulate Arduino Boards Course:\nAshley Reid says, \"Another good course, nice simple & basic. The reason I like this course is there isn't too much talk & theory, just straight into the course. Even though this course is very it goes straight to the point of finding the software, downloading the software & using the software. Even though this is short quick & to the point, it is a very quick start & to the point course, perfect for beginners Great job & cheers.\"\nLeonildo Carnevalli Junior says, \"Short but it fulfills the promises.\"\nWelcome to Design and Simulate Arduino Boards and Test Your Code course.\nIn this course, you will learn how to simulate different Arduino boards in a professional simulation environment. It will help you unleash your full coding potential without buying any of the Arduino boards.\nThis course will help you test your codes and schematics for Arduino without the risk of burning your board. No more bad connections or wrong codes.\nContents and Overview\nThis course is designed for anyone interested in learning electronic design. You don't need to have any previous experience, and all you need is a computer.\nBoards that can be Simulated:\nArduino Uno\nArduino Mega\nArduino Nano\nArduino Zero\nAnd others\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading team in the Microcontroller Industry, with over 13 Years of Experience in teaching and doing practical projects.\nWe strive to put all our hands-on experience into these courses. Instead of superficial knowledge, we go into the depth of the topic and give you the exact step-by-step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the years, we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ courses on Udemy.\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million Views, 20k + Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their careers.\nAshraf’s core skill is explaining difficult concepts in a step-by-step easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, in particular for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World\nWhat you will learn\nHow to design and simulate Arduino boards.\nTest your Arduino code without buying the hardware.\nExperiment with various sensors, actuators, and components.\nUse a professional simulation environment for Arduino projects.\nUnderstand different ways to connect components.\nWho is this course for\nElectronics enthusiasts.\nStudents and professionals interested in Arduino projects.\nHobbyists wanting to simulate and test their Arduino codes.\nAnyone interested in learning electronic design and simulation.\nRequirements\nBasic understanding of electronics and Arduino.\nA computer with internet access.\nEnthusiasm to learn and build.",
      "target_audience": [
        "Arduino Geeks",
        "Anyone looking to learn Arduino but don't want to buy the boards",
        "Anyone looking to learn Arduino without spending any money buying different boards",
        "Anyone starting their journey in Microcontrollers"
      ]
    },
    {
      "title": "PCB design with KiCad - updated for KiCad 9",
      "url": "https://www.udemy.com/course/kicad-like-a-pro-3e/",
      "bio": "A course for the world's favorite open source printed circuit board design software.",
      "objectives": [
        "Updated for KiCad 9",
        "Printed Circuit Board design using KiCad.",
        "Single, double, and multi-layer board design.",
        "The PCB design process.",
        "The schematic design process.",
        "The layout design process.",
        "How to associate schematic symbols to footprints.",
        "How to create the layout of a PCB.",
        "Important PCB concepts, such as edge cuts, copper fills, mounting holes, soldermask, silkscreen, traces etc..",
        "A detailed knowledge of the KiCad CAD application (its apps, configuration, toolbars, menus, project files etc.).",
        "Project-based learning to ensure mastery of the topics taught."
      ],
      "course_content": {},
      "requirements": [
        "A Linux, Windows or Mac OS computer.",
        "An Internet connection.",
        "A growth mindset.",
        "Patience to learn to mastery."
      ],
      "description": "This course is updated for KiCad 9\nI have recorded several new lectures in Section 13 to explain the most important new features and improvements in KiCad 9.\nThe lectures in this section cover a range of topics, including the introduction of Jobsets for structured project management, the Bezier curve tool in all editors, and the Zone Manager for improved control over copper pours. Other lectures discuss the use of Design Blocks for reusing schematic and layout sections, updates to the Autorouter, and the Multiple Track Drag feature for modifying routed traces more efficiently. Additionally, the section includes coverage of Pad Stacks with different copper shapes, 3D model export improvements, the Precision Positioning Tool for accurate placement, and the Tables feature for showing structured information in the schematic and the layout. The Selection Filterin the schematic editor and Component Classes are also explored, highlighting their role in refining schematic organization and circuit design.\nAlso... New project and recipes! I’ve added a brand-new hands-on project to this course: the Tiny Solar Power Supply.\nThis project walks you through the complete design of a compact solar-powered regulator circuit, from schematic to PCB layout and preparation for manufacturing.\nI’ve also expanded the Recipes section with new content that shows you how to use KiCad’s integrated circuit simulator. You’ll learn how to simulate basic analog circuits directly in the schematic editor — a powerful tool for validating your design before layout.\nThis course is updated for KiCad 8\nThis update contains many new and updated lectures to teach you the new features in KiCad 8. For those lectures that I created replacements for, I have moved them to new sections titled \"Legacy\" so you can still access them. Most new and updated content is in sections 1, 2, 3, 4, 5, and 12 (Recipes).\nWelcome to KiCad Like a Pro.\nThis course will help you learn how to design Printed Circuit Boards using KiCad.\nKiCad is an open-source, free-to-use, and unrestricted tool for PCB design. It is the world's most popular open-source PCB tool for electronics engineers and hobbyists.\nKiCad is supported by a dedicated team of volunteer developers and a growing community of users and contributors.\nTo create this edition of KiCad Like a Pro, I have used KiCad 7 and KiCad 8.\nThis course will teach you KiCad so that you can use it in your commercial or hobby projects. It takes a practical approach to learning that combines \"how-to\" content with complete start-to-finish PCB projects.\nIf you are new to PCB design, this course will help you start from the ground level. If you are an experienced PCB designer, this course will help you transition to KiCad from another tool or an earlier version of KiCad.\nPlease read the course description and watch the free lectures in the first section to get more information about this course.\nI look forward to learning with you!",
      "target_audience": [
        "Electronics hobbyists.",
        "Engineers.",
        "Users of other PCB CAD applications that wish to move to KiCad",
        "STEM students and teachers."
      ]
    },
    {
      "title": "Siemens Simotion System And Programming Course",
      "url": "https://www.udemy.com/course/siemens-simotion-system-and-programming-course/",
      "bio": "Simotion System And Programming Course from Beginning to Expertise by Caner Sezer",
      "objectives": [
        "Siemens Simotion System Hardware And Software",
        "Simotion System Programming",
        "PLC Programming with Structure Text, Ladder, FBD, MCC, DCC Programming Languages",
        "Technology Objects, Axes, Drives, Measuring Inputs, Cam Outputs",
        "Synchronous Operations Gearing / Camming",
        "Sinamics And Simotion Trace",
        "OPC Server, OPC XML, OPC UA",
        "Simulation with SIMOSIM",
        "HMI Connection to Simotion CPUs",
        "VBScript For Simotion",
        "Cam Editor, Creating Cams, Online Cam Handling",
        "Path Object, Kinematics",
        "Simotion G-Code Interpreter",
        "Object Oriented Programming",
        "Simotion FTP Server, Web Server",
        "Tips And Tricks"
      ],
      "course_content": {},
      "requirements": [
        "Basic Knowledge of Sinamics",
        "Required Siemens Programs to be Installed",
        "Basic Knowledge of PLC Programming"
      ],
      "description": "With this course from one collegue to another about Simotion both Hardware And Software Side you will able to get information and for your future you will gain more experience during your business life. So from this point of view if you are interested with industrial automation sector, specially motion control area, Simotion is one of the most commonly used product in industry.\n\n\nFrom beginning step by step this course offers you complete walktrough.",
      "target_audience": [
        "Target students are electrical electronic engineering with bach. deg.",
        "Computer Programmers",
        "Beginner of PLC software developers",
        "University students doing practice with project or lab"
      ]
    },
    {
      "title": "Verification Series Part 1: SystemVerilog Essentials",
      "url": "https://www.udemy.com/course/complete-systemverilog-for-rtl-verification-part-1/",
      "bio": "Step by Step Guide from Scratch",
      "objectives": [
        "Fundamentals of SystemVerilog for Verification of RTL",
        "Fundamentals of OOP's for FPGA Engineer",
        "Fundamentals of Constraint Random Verification Methodology",
        "Fundamentals of Layered Testbench architecture",
        "Creating Generator, Driver, Monitor, Scoreboard, Environment Classes",
        "Array, Queue, Dynamic array, Task, and Methods of SV",
        "Interprocess Communication and Randomization of SV"
      ],
      "course_content": {
        "IDE": [
          "Course Overview",
          "Learning Path for Course",
          "Agenda",
          "Copy Code for IDE demonstration",
          "How to use EDA",
          "How to use Xilinx Vivado Design Suite",
          "FAQ"
        ],
        "Fundamentals : Procedural Constructs": [
          "Agenda",
          "Type of signals in TB",
          "Usage of Initial Block",
          "Format of Initial Block in Testbench",
          "Executing Code",
          "Code",
          "A21",
          "A22",
          "Format of always Block",
          "Usage of always Block",
          "Code",
          "A23",
          "Aligning edges of the generated clock and reference clock",
          "Code",
          "Understanding `timescale directive",
          "Demonstration",
          "Code",
          "A24",
          "A25",
          "Understanding parameters for generating Clock",
          "Demonstration Part 1",
          "Demonstration Part 2",
          "Code",
          "A26",
          "Summary"
        ],
        "Understading SV datatypes": [
          "Agenda",
          "Datatypes P1",
          "Datatypes P2",
          "Datatypes P3",
          "Datatypes P4",
          "Demonstration of Datatypes P1",
          "Demonstration of Datatypes P2",
          "Demonstration of Datatypes P3",
          "Demonstration of Datatypes P4",
          "Demonstration of Datatypes P5",
          "Demonstration of Datatypes P6",
          "A31",
          "Understanding usage of array",
          "Using array P1",
          "Using array P2",
          "Using array P3",
          "Array Initialization Strategies",
          "Demonstration",
          "A32",
          "Loops for repetitive array operation P1",
          "Loops for repetitive array operation P2",
          "Loops for repetitive array operation P3",
          "Code",
          "Array Operation P1 : COPY",
          "Array Operation P1 : COMPARE",
          "Dynamic Array P1",
          "Dynamic Array P2",
          "Dynamic Array P3",
          "Queue P1",
          "Queue P2",
          "A33",
          "A34",
          "A35",
          "Usage of Fixed Size array",
          "Usage of Queue"
        ],
        "Verification Fundamentals": [
          "Agenda",
          "Understanding Verification Plan P1",
          "Understanding Verification Plan P2",
          "Directed Test Vs Constraint Random Test P1",
          "Directed Test Vs Constraint Random Test P2",
          "Layered Architecture P1",
          "Layered Architecture P2",
          "Layered Architecture P3",
          "Layered Architecture P4",
          "Summary : Layered Architecture",
          "Individual Components of TB",
          "Summary"
        ],
        "Fundamentals of System Verilog OOP Construct": [
          "Agenda",
          "Fundamentals of Class P1",
          "Fundamentals of Class P2",
          "Code",
          "Fundamentals of Class P3",
          "Code",
          "A51",
          "Ways to add Method to Class",
          "Using Function",
          "A52",
          "Using Task",
          "Code",
          "A53",
          "Understanding Pass by Value",
          "Understanding Pass by Reference",
          "Demonstration of Pass by Value",
          "Demonstration of Pass by Reference",
          "Code",
          "Summary",
          "Using Array in Function",
          "Code",
          "A54",
          "User defined Constructor",
          "Code",
          "Multiple arguments to Constructor P1",
          "Multiple arguments to Constructor P2",
          "Multiple arguments to Constructor P3",
          "Code",
          "A55",
          "Using task in Class",
          "Code",
          "A56",
          "Using Class in Class",
          "Code",
          "Scope of Data member",
          "Code",
          "Copying Object",
          "Code",
          "Strategies to copy Object",
          "Custom Method",
          "Code",
          "Understanding Shallow Copy",
          "Shallow Copy demonstration",
          "Code",
          "Understanding Deep Copy",
          "Deep Copy demonstration",
          "Code",
          "Summary",
          "A57",
          "Extending Class properties by Inheritance",
          "Polymorphism",
          "Code",
          "Understanding Usage of Super Keyword",
          "Code"
        ],
        "Randomization": [
          "Agenda",
          "Understanding Generator",
          "Generating random values with rand P1",
          "Generating random values with rand P2",
          "Code",
          "randc vs rand",
          "Code",
          "Checking randomization is successful : IF ELSE",
          "Checking randomization is successful : assert",
          "Code",
          "Care while working with multiple Stimuli",
          "Code",
          "Adding Constraint : Simple Expression",
          "Code",
          "Adding Constraint : Working with Ranges P1",
          "Adding Constraint : Working with Ranges P2",
          "Code",
          "External Function and Constraint",
          "Code",
          "Pre and Post Randomization Methods",
          "Code",
          "Understanding randc bucket",
          "Things you need to consider while working with RANDC",
          "Code",
          "Weighted Distribution P1",
          "Weighted Distribution P2",
          "Weighted Distribution P3",
          "Using Weighted Distribution P1",
          "Using Weighted Distribution P2",
          ":= vs :/",
          "Constraint Operator",
          "Implication Operator",
          "Code",
          "Equivalence Operator",
          "Code",
          "IF ELSE Operator",
          "Code",
          "Turning ON and OFF Constraint",
          "Code",
          "A61",
          "A62",
          "A63",
          "A64",
          "A65",
          "Understanding FIFO DUT",
          "Building Transaction Class"
        ],
        "IPC": [
          "Agenda",
          "Interprocess Communication Mechanism",
          "IPC",
          "Events",
          "@ VS Wait",
          "Code",
          "Executing Mulitple Process",
          "Multiple Process with Multiple Initial block P1",
          "Multiple Process with Multiple Initial block P2",
          "Code",
          "Multiple Process with FORK JOIN P1",
          "Multiple Process with FORK JOIN P2",
          "Code",
          "Demonstration of FORK_JOIN",
          "Code",
          "Understanding FORK JOIN_ANY",
          "Understanding FORK JOIN_NONE",
          "Usage of FORK JOIN in Testbench",
          "A81",
          "Understanding Semaphore",
          "Code",
          "Understanding Mailbox P1",
          "Understanding Mailbox P2",
          "Code",
          "Specifying Mailbox with Custom Constructor",
          "Code",
          "Sending Transaction data with Mailbox P1",
          "Sending Transaction data with Mailbox P2",
          "Code",
          "Understanding Parameterized Mailbox P1",
          "Understanding Parameterized Mailbox P2",
          "Understanding Parameterized Mailbox P3",
          "Using Parameterized Mailbox",
          "Code",
          "A82",
          "A83"
        ],
        "Getting Started with Interface": [
          "Agenda",
          "Interface",
          "Adding Interface to Simple RTL P1",
          "Adding Interface to Simple RTL P2",
          "Adding Interface to Simple RTL P3",
          "Code",
          "Using blocking operator for Interface Variables",
          "Using Non-blocking Operator for Interface Variables",
          "Why we prefer LOGIC over WIRE and REG in Interface",
          "Adding Driver Code to Interface P1",
          "Adding Driver Code to Interface P2",
          "Code",
          "Understanding MODPORT",
          "Code",
          "Adding Generator P1",
          "Adding Generator P2",
          "Adding Generator P3",
          "Important Rules",
          "Code",
          "Adding Generator P4",
          "Adding Generator P5",
          "Code",
          "A91",
          "Injecting Error P1",
          "Injecting Error P2",
          "Code",
          "Injecting Error P3",
          "Code",
          "Adding Monitor and Scoreboard P1",
          "Adding Monitor and Scoreboard P2",
          "Adding Monitor and Scoreboard P3",
          "Code",
          "Tweaking Monitor and Scoreboard Code",
          "Code",
          "Adding Simple Scoreboard Model",
          "Code",
          "A92"
        ],
        "Bonus Internship Program": [
          "Remote Internship Program"
        ]
      },
      "requirements": [
        "Fundamentals of Verilog and Digital Electronics"
      ],
      "description": "VLSI Industry is divided into two popular branches viz. Design of System and Verification of the System. Verilog, VHDL remain the popular choices for most Design Engineers working in this domain. Although, preliminary functional verification can be carried out with Hardware Description Language. Hardware Description language possesses limited capabilities to perform code coverage analysis, Corner cases testing, etc and in fact sometimes it becomes impossible to perform this check with HDL's.\nHence Specialized Verification languages such as SystemVerilog start to become the primary choice for the verification of the design.\nThe SystemVerilog Object-oriented nature allows features such as Inheritance, Polymorphism, etc. adds capabilities of finding critical bugs inside design that HDL simply cannot find.\nVerification is certainly more tricky and interesting as compared to designing a digital system and hence it consists of a large number of OOP's Constructs as opposed to Verilog. SystemVerilog is one of the most popular choices among Verification Engineer for Digital System Verification. This Journey will take you to the most common techniques used to write SystemVerilog Testbench and perform Verification of the Chips. The course is structured so that anyone who wishes to learn about System Verilog will able to understand everything. Finally, Practice is the key to become an expert.",
      "target_audience": [
        "Anyone wish to migrate to SystemVerilog Testbench for RTL Verification"
      ]
    },
    {
      "title": "Learning Cisco Unified Computing System - UCS",
      "url": "https://www.udemy.com/course/learning-cisco-unified-computing-system-ucs/",
      "bio": "Your guide to complete mastery over Cisco's UCS!",
      "objectives": [
        "Identify common UCS components",
        "Describe and configure service profiles",
        "Describe and configure UCS pools",
        "Describe and configure UCS policies",
        "Connect UCS to the LAN and SAN networks",
        "Design UCS solutions"
      ],
      "course_content": {
        "Introduction to the Course!": [
          "Introduction to the Course!"
        ],
        "Introduction and Hardware": [
          "Why Cisco UCS?",
          "Introducing the UCS Emulator!",
          "UCS Chassis and Blade Overview",
          "UCS Fabric Interconnect Overview",
          "UCS IOM Overview",
          "UCS Blade I/O Adapter Overview",
          "UCS Manager Overview",
          "Backplane Ethernet - 10GBASE-KR Overview"
        ],
        "Connecting UCS to the Data Center": [
          "Bootstrapping the UCS",
          "Demo - Bootstrapping the UCS",
          "IOM Pinning Overview",
          "Demo - Connecting a UCS Chassis",
          "Fabric Interconnects Modes",
          "How UCS Uplinks Work",
          "Demo - Configuring Cisco UCS Uplinks",
          "Demo - Configuring UCS Ethernet Port-Channels",
          "Dynamic Pinning Overview",
          "Static Pinning Overview",
          "Disjoint Layer-2 Overview",
          "Demo - Configuring Disjoint Layer-2",
          "Unified Ports within Cisco UCS",
          "Demo - Configuring Unified Ports",
          "UCS Storage Networking Theory",
          "Demo - SAN Uplink Configuration",
          "Demo - Fibre Channel Port-Channels",
          "Demo - Fibre Channel Uplink Trunking",
          "Demo - FCoE Uplink Configuration"
        ],
        "Configuring Pools and Policies": [
          "Initial vs. Updating Templates",
          "Server Pools and Policies",
          "UUID Pools (Universally Unique Identifiers)",
          "External MGMT IP Address Pools",
          "MAC Address Pools",
          "World Wide Name Pools",
          "WWxN Pools",
          "Configuring BIOS Policies",
          "Configuring Boot Policies (this is kind of important!)",
          "Local Disk Configuration Policies",
          "Configuring Maintenance Policies",
          "Configuring Scrub Policies",
          "Power Control Policies",
          "Network Interface Policies (LACP, Flow Control, etc)",
          "QoS System Classes",
          "QoS Policies",
          "vNIC Templates",
          "Network Control Policies",
          "LAN Connectivity Policies",
          "vHBA Templates and SAN Connectivity Policies"
        ],
        "Service Profiles": [
          "Service Profile Templates",
          "Service Profile - Boot From SAN",
          "Service Profile Cloning and Boot from Local Disk",
          "Service Profile - iSCSI Booting",
          "Service Profile - FlexFlash Booting"
        ],
        "UCS Management": [
          "UCS Organizations",
          "UCS Locales and Local Authentication"
        ]
      },
      "requirements": [
        "Basic understanding of x86 Architectures",
        "Basic understanding of virtualization fundamentals (Hypervisors, virtual machines, etc...)",
        "CCNA or equivalent knowledge",
        "Knowledge of VLAN's and SAN's"
      ],
      "description": "This course takes you soup-to-nuts through the UCS system. We start off answering questions surrounding \"Why UCS?,\" and then move swiftly through the components that comprise a Cisco UCS system.  Following this, we begin discussing how UCS systems are built, and how they function. As an instructor, I firmly believe in the \"see then do\" process, especially when it comes to technology! So my method has always been to talk about the theory surrounding a topic, and then to show you it on a live system, and thats exactly what I do with this course.\nWe will build out the UCS system in the exact sequence that most engineers typically deploy it. We will connect it to the LAN and SAN networks, and configure the pools and policies that make up the identities of our service profiles (the true magic behind UCS!).  We will practice things like 'boot from SAN' and show you how to troubleshoot and verify everything as we go!",
      "target_audience": [
        "Pre and Post Sales Engineers",
        "Support Engineers",
        "Virtualization Engineers",
        "Network Engineers"
      ]
    },
    {
      "title": "PLC Object Oriented Programming :Advanced Infrastructure",
      "url": "https://www.udemy.com/course/plc-object-oriented-programming-advanced-infastrucutre/",
      "bio": "Advanced Structure Text using OOP concepts. Master Program Infrastructure Design. The future of PLC programming.",
      "objectives": [
        "Learn Object Oriented Programming",
        "Learn Structured Text from Basic to Pro",
        "Apply latest features of IEC-61131-3 Standard",
        "Build a scalable PLC Design",
        "Learn to build a re-usable PLC program",
        "Master Advanced CodeSys",
        "Learn to build layered based design",
        "Learn to use some Software Design patterns using a PLC"
      ],
      "course_content": {
        "Course Intro": [
          "Course Intro",
          "What will we learn",
          "IMPORTANT : Before you start",
          "Get the Software"
        ],
        "Structured Text (ST) Revision": [
          "Conditional Statements",
          "Calling Standard Functions",
          "Finite State Machine",
          "Arrays",
          "Loops",
          "Non Instantiated Function Principle",
          "Non Instantiated Function Demo",
          "Do It Your Self Part 1 (Level: Easy)",
          "Design It Your Self Part 1 : Solution"
        ],
        "Class": [
          "What is a Class",
          "Class Demo",
          "Structured Variables",
          "Structured Variables Demo",
          "Passing Structures To Class",
          "Structure Pass Demo",
          "Array Of Structures and Objects",
          "Array of Objects Demo",
          "Calling Multiple Objects",
          "Design It Your Self 2 : (Level Intermediate)",
          "Design it Your Self 2 : Solution"
        ],
        "Methods": [
          "What is a Method",
          "Methods Demo",
          "Methods Parameters pass",
          "This Keyword",
          "This Keyword Demo",
          "Wrappers",
          "Wrappers and method to method passing Demo",
          "Design It Your Self 3 (Level: High Intermediate)",
          "Design it Your Self 3 : Solution",
          "Design It Your Self 3 : Extend the production line",
          "Design It your Self : Extending Solution"
        ],
        "Properties": [
          "What is a Property",
          "Property Software Demo",
          "Properties as IO",
          "Properties as IO Demo"
        ],
        "Inheritance And Polymorhpism": [
          "What is Inheritance",
          "Inheritance Demo Part 1",
          "Inheritance Demo Part 2",
          "Deep Inheritance",
          "Method Override",
          "Override and Super Keyword",
          "What is Polymorphism",
          "Polymorphism Software Demo"
        ],
        "Access Specifiers": [
          "Public",
          "Private",
          "Protected",
          "Application",
          "Application Demo Part 1",
          "Application Demo Part 2"
        ],
        "Interfaces and Abstractions": [
          "What is an Interface",
          "Interface Software Demo",
          "Interfaces Vs Inheritance",
          "Multiple Interfaces Demo",
          "Interfaces and Polymorphism",
          "Interfaces and Polymorphism Demo",
          "Object Composition"
        ],
        "Delegation and Advanced FSM": [
          "What is Delegation",
          "Object Pointers And References",
          "Object Pointers And References Demo",
          "Advanced FSM pointers",
          "FB_INIT Constructor",
          "Advanced FSM Demo Part 1",
          "Transitions",
          "Advanced FSM Demo Part 2",
          "State Initializer"
        ],
        "Project": [
          "Project Overview",
          "Design Layers",
          "Abstract Layer : Interfaces",
          "Features Layer : Device Actuate",
          "Features Layer : Fault Handler",
          "Features Layer : Analog Scale",
          "Features Layer : VFD Frequency Ramp",
          "Features Layer : Test Part 1",
          "Features Layer : Test Part 2",
          "Features Layer : Test Part 3",
          "Actuate and Sense Layer : Gate Controller",
          "Actuate and Sense Layer : Motor Controller",
          "Actuate and Sense Layer : VFD Controller Part 1",
          "Actuate and Sense Layer : VFD Controller Part 2",
          "Actuate and Sense Layer : VFD Controller Test",
          "Actuate and Sense Layer : Load Cell",
          "Actuate and Sense Layer : Proximity",
          "Summary of the process of adding a new Actuator",
          "Wrapper Layer : Part 1",
          "Wrapper Layer : Part 2",
          "Wrapper Layer : Part 3",
          "Wrapper Layer : Part 4",
          "Wrapper Layer : Part 5",
          "FSM Layer : Part 1",
          "FSM Layer : Part 2",
          "FSM Layer : Part 3",
          "FSM Layer : Part 4",
          "FSM Layer : Part 5",
          "FSM Layer : Part 6",
          "FSM Layer : Part 7",
          "FSM Layer : Part 8",
          "FSM Layer : Part 9",
          "FSM Layer : Part 10",
          "FSM Layer : Part 11",
          "FSM Layer : Part 12",
          "FSM Layer : Part 13",
          "FSM Layer : Part 14",
          "Expand the Machine with Couple Lines"
        ]
      },
      "requirements": [
        "Understanding of PLC programming in general",
        "Basic understanding of C/C++ can be helpful but it's not a must"
      ],
      "description": "Master PLC programming with this very unique course :\n\n\nWhen having a project with changing requirements , traditional programming methods using ladder fall short and causes tons of modification to add a new feature to your PLC program.\nNow with the most recent IEC-61131-3  standard features , Object oriented Programming  (OOP) is Introduced where you can apply a very sophisticated and Advanced programming methods to create a advanced  programs with solid infrastructure.\n\n\nAfter completing this course you will have a very solid background on designing using OOP , which its concepts are used in the biggest programming languages like C++ / JAVA / C# and even Python.\n\n\nTopic we will cover:\nBasic of Structured Text programming Language\nModular Design\nClasses\nMethods\nProperties\nInheritance\nPolymorphism\nAccess Specifiers\nPointers and References\nInterfaces and Abstractions\nAdvanced State Pattern\nWrappers and Features\nLayered Design\nFinal Project covering a real-world problem to be solved using OOP\n\n\nAnyone who is looking for the next level PLC programming , this is the right course for you.\nThe future of PLC programming is OOP , since it guarantees a powerful infrastructure for your project , and this is what the IEC-61131-3  standard is pushing for in the last couple years . Ladder alone is inefficient , and if you have programmed big projects before , you can tell how complicated modifying your program or adding a new machine or even a small feature. It can even involve  you erasing your whole program and writing a totally new one to adapt to the new requirement .\nBut with Layered design and OOP , modification can be very simple , no need to copy paste code , not to change base code.\nThere is no other course on the internet that covers these topics in a comprehensive way , and that's my role , i'll feed spoon you these concepts slowly and step by step until you fully understand them.\n\n\nI hope to see you all there .\n\n\nMouhammad Hamsho",
      "target_audience": [
        "Anyone interested in bringing PLC skills to the next level",
        "Electrical And Electronics Engineers",
        "Software Engineers",
        "Control Engineers",
        "Anyone willing to learn Object Oriented Programming concepts and Applications"
      ]
    },
    {
      "title": "Building Video Surveillance Apps Using ESP32 & Arduino",
      "url": "https://www.udemy.com/course/esp32-cam-for-arduino-makers/",
      "bio": "Ignite Your Creativity: Construct a Video Processing Surveillance Car with DIY Robotics",
      "objectives": [
        "How to Start with ESP32-CAM being a Arduino Maker ?",
        "Understanding Camera Settings of ESP32-CAM",
        "Obtaining optimum performance and high perceptual Image quality out of ESP32-CAM",
        "Controlling DC Motors & Servo Motors Using ESP32-CAM",
        "Using ESP32-CAM as IP Camera",
        "Creating Time Lapse Videos using ESP32-CAM",
        "HTML Basics and CSS Styling to Host WebServer on ESP32-CAM",
        "Writing Custom Webserver for ESP32-CAM to Control IO",
        "Remote Controlled and IP Controlled Car using ESP32-CAM over WiFi",
        "360 degree Surveillance Camera Using ESP32-CAM"
      ],
      "course_content": {},
      "requirements": [
        "Windows10 Computer, With Arduino Installed",
        "Little Knowledge on Basic Electronics",
        "ESP32-CAM Hardware(Costs 4.5$)",
        "USB-UART TTL Converter(Costs 1.5$)",
        "L293D Motor Driver Board(Costs 1.5$)",
        "SG90 Micro Servo PAN TILT Setup(Costs 4.5$)",
        "DIY Robot Car Kit(Costs 8$)",
        "Portable USB Power Bank(Costs 10$)",
        "Jumper Wires(2$)",
        "SD-Card(5$)",
        "Soldering Iron Kit(Optional)",
        "Urge to Complete Course"
      ],
      "description": "UPDATE 3: ¡Hola! Now Experience the Course with Captivating Subtitles in German [Powered by Google Translate]\nUPDATE 2: Hallo! Der Kurs ist jetzt mit fesselnden deutschen Untertiteln / Bildunterschriften aktiviert [Powered by Google Translate]\nUPDATE 1: Enhancing Your Learning Experience! Enjoy Accurate Captions (CC) for All Lectures, No More Automatic (Annoying) Transcriptions!\nDescription :\nUnleash the Power of ESP32-CAM: Ignite Your Creativity and Master Vision-Based Applications\nEmbark on a thrilling adventure into the realm of ESP32 and unlock its full potential. This comprehensive course is carefully crafted to empower students, aspirants, and professionals like you to effortlessly create a wide array of easy-to-use and highly practical applications using the cutting-edge ESP32-CAM hardware.\nUnlike other courses that focus on basic IO control or sensor interfacing, we take a giant leap forward by harnessing the remarkable capabilities of ESP32 to create vision-based applications with the ESP32-CAM hardware. Equipped with a brilliant 2-megapixel sensor/camera (OV2640), the ESP32-CAM opens up a world of possibilities.\nDiscover the perfect balance between performance and affordability with ESP32-CAM, a low-cost hardware marvel. Packed with an image sensor, PSRAM, memory card interface, and native Wi-Fi and Bluetooth support, it offers unparalleled versatility for your projects.\nExperience a course designed with hobbyists, students, and professionals in mind. We have chosen the immensely popular Arduino programming language as our foundation, ensuring a seamless learning journey. Every project and application covered in this course is built using the user-friendly Arduino IDE, making it accessible to all.\nGet ready for an immersive, hands-on learning experience that breaks free from the monotony of traditional lectures and introductory graphics. Our carefully structured labs gradually build your expertise, guiding you toward captivating intermediate capstone projects that showcase your skills.\nEmbark on an exciting journey of exploration as you delve into the following concepts through our meticulously designed labs:\n- Harness the power of ESP32-CAM for IP-based live streaming\n- Configure the ESP32 Camera as a versatile access point\n- Fine-tune OV2640 image settings to perfection\n- Craft custom HTML web servers tailored to your needs\n- Build video streaming servers from scratch and unleash your creativity\n- Master DIY servo and car control over IP for ultimate flexibility\n- Create mesmerizing time-lapse videos that captivate your audience\n- Seamlessly interface with memory cards for expanded storage options\nLearn the art of interfacing with the OV2640 camera, capturing and streaming data over Wi-Fi as captivating videos. Master the construction of HTML-based video streaming webservers from scratch, unveiling endless possibilities. And that's not all—this course introduces you to invaluable tools such as FFMPEG, ANYCAMIO, and Notepad++, providing you with a well-rounded skill set.\nIgnite your imagination and revolutionize your robotics projects with innovative vision-based applications. This course empowers you to bring your wildest ideas to life using ESP32-CAM, even on a limited budget.\nJoin us now and seize the opportunity to unlock the limitless potential of ESP32-CAM.",
      "target_audience": [
        "Hobbyists, Electronics Beginner, Electronics Professionals"
      ]
    },
    {
      "title": "IoT with Raspberry Pi and Python: Building Smart Systems",
      "url": "https://www.udemy.com/course/iot-internet-of-things-automation-using-raspberry-pi/",
      "bio": "Unlock the power of Raspberry Pi and Python for IoT development. Build real-world projects and control devices remotely.",
      "objectives": [
        "Setting up Raspberry Pi and configuring the Raspberry Pi OS.",
        "Basic file system operations and programming concepts in Python.",
        "Interfacing with sensors and peripherals using GPIO pins.",
        "Implementing IoT projects such as LED control, sensor data logging, and email alerts.",
        "Networking basics and creating client-server applications.",
        "Integrating Twython API for Twitter updates and search functionalities.",
        "Controlling hardware remotely using commands and tweets.",
        "Sending emails and automating tasks based on sensor data.",
        "Developing complete IoT solutions from scratch using Raspberry Pi and Python.",
        "Conclusion and insights into IoT development practices and future prospects."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge about electronics & programming",
        "A Computer or a laptop"
      ],
      "description": "Welcome to the comprehensive course on \"IoT Development with Raspberry Pi and Python\"!\nIn this course, you will embark on an exciting journey into the world of Internet of Things (IoT) by leveraging the power of Raspberry Pi and Python programming language. Whether you are a beginner or an experienced developer, this course is designed to equip you with the knowledge and skills needed to build innovative IoT applications from scratch.\nThroughout the course, you will learn how to set up and configure a Raspberry Pi board, interact with its GPIO (General Purpose Input/Output) pins, interface with various sensors and actuators, and develop Python scripts to control hardware components. Additionally, you will explore advanced topics such as integrating IoT devices with social media platforms, sending email notifications, and creating web servers.\nBy the end of this course, you will have the confidence and expertise to develop a wide range of IoT projects, from simple sensor monitoring systems to interactive social media-connected applications. So, get ready to unleash your creativity and dive into the exciting world of IoT development with Raspberry Pi and Python!\nSection 1: Introduction\nIn this section, students are introduced to the world of Raspberry Pi 2 and 3, versatile single-board computers widely used for various projects, including IoT applications. They learn about the capabilities and specifications of Raspberry Pi models, understanding their hardware components and software support.\nSection 2: Remote Logging\nRemote logging is a crucial aspect of managing Raspberry Pi devices, allowing users to access and control them from remote locations. Students explore the process of configuring Raspberry Pi settings for remote access, including enabling SSH and obtaining the device's IP address. They learn how to connect to Raspberry Pi remotely using SSH clients, facilitating seamless management and development.\nSection 3: File System in Raspberry Pi\nUnderstanding the file system in Raspberry Pi is essential for efficient file management and programming. Students delve into topics such as navigating the file system, creating and editing text files, and managing directories. They gain practical experience in performing file operations using command-line tools and Python scripts, preparing them for real-world IoT projects.\nSection 4: Creating Variables\nVariables are fundamental elements in programming, used for storing and manipulating data. In this section, students learn how to create variables in Python, understanding different data types and variable naming conventions. They explore the concept of variable assignment, arithmetic operations, and type conversion, honing their skills in basic Python programming.\nSection 5: Arithmetic\nArithmetic operations are essential for performing mathematical calculations in programming. Students delve into arithmetic operations in Python, including addition, subtraction, multiplication, division, and modulus. They learn how to write Python programs to solve mathematical problems, gaining proficiency in numeric computation and expression evaluation.\nSection 6: Bitwise\nBitwise operations involve manipulating individual bits within binary data. Students explore bitwise operators such as AND, OR, XOR, and shift operators, understanding their applications in low-level data manipulation and optimization. They learn how to perform bitwise operations in Python, mastering techniques for bitwise manipulation and binary arithmetic.\nSection 7: Selection Statements\nSelection statements allow programs to make decisions based on certain conditions. Students learn about conditional statements like if, elif, and else, understanding how to control the flow of program execution based on different conditions. They explore practical examples of using selection statements in Python programs, developing skills in conditional programming and decision-making.\nSection 8: Functions\nFunctions are reusable blocks of code that perform specific tasks, promoting code modularity and reusability. In this section, students learn how to define and call functions in Python, understanding concepts such as function parameters, return values, and scope. They explore different types of functions, including built-in functions, user-defined functions, and lambda functions, enhancing their ability to write modular and efficient code.\nSection 9: Looping Statements\nLooping statements allow programs to execute a block of code repeatedly, making them indispensable for automation and iteration. Students explore loop constructs like for and while loops in Python, understanding how to iterate over sequences and perform repetitive tasks efficiently. They learn about loop control statements like break and continue, mastering techniques for loop optimization and flow control.\nSection 10: Strings in Python\nStrings are fundamental data types used for representing text data in programming. Students delve into string manipulation techniques in Python, including string concatenation, slicing, formatting, and common string methods. They learn how to manipulate and process strings effectively, gaining proficiency in text processing and manipulation for IoT applications.\nSection 11: List Examples and List Comprehension\nLists are versatile data structures used for storing collections of items in Python. In this section, students explore practical examples of working with lists, including creating, accessing, modifying, and iterating over lists. They also learn about list comprehension, a concise way of creating lists based on existing iterables, enabling efficient and readable code.\nSection 12: Tuples, Sets, and Dictionaries\nTuples, sets, and dictionaries are other essential data structures in Python, each with its unique characteristics and applications. Students delve into tuples as immutable sequences, sets as unordered collections of unique elements, and dictionaries as key-value pairs for efficient data retrieval. They learn how to manipulate and utilize these data structures effectively in IoT programming scenarios.\nSection 13: Classes and Objects\nObject-oriented programming (OOP) is a powerful paradigm for structuring code and modeling real-world entities. In this section, students learn about classes and objects in Python, understanding concepts such as encapsulation, inheritance, and polymorphism. They explore how to define classes, create objects, and implement OOP principles in IoT applications for improved code organization and maintainability.\nSection 14: Modular Programming\nModular programming involves breaking down a program into smaller, manageable modules for easier development and maintenance. Students explore techniques for modular programming in Python, including creating and importing modules, organizing code into separate files, and leveraging modules for code reuse. They learn how modular design principles can enhance the scalability and maintainability of IoT projects.\nSection 15-16-17: Controlling LED using Raspberry Pi Pins\nPractical hardware interaction is a core aspect of IoT development. In this section, students learn how to interface LEDs with Raspberry Pi GPIO pins and control them programmatically using Python. They explore concepts such as digital output and pulse-width modulation (PWM) to manipulate LED brightness, gaining hands-on experience in hardware-software integration for IoT applications.\nSection 18: Networking Basics\nNetworking plays a crucial role in IoT systems, facilitating communication between devices and enabling data exchange over networks. Students delve into networking basics in Python, understanding concepts such as sockets, IP addressing, and client-server communication. They learn how to develop networked applications using Python's socket module, preparing them for building IoT systems with remote communication capabilities.\nSection 19: Creating a Client Socket and Server Socket\nBuilding on networking fundamentals, students learn how to create client and server sockets in Python for establishing network connections. They explore the process of setting up a server, accepting client connections, and exchanging data between connected devices. Practical examples guide students through implementing client-server communication protocols, enhancing their understanding of network programming concepts.\nSection 20: Controlling a Light with Commands\nIn this section, students leverage their knowledge of networking and hardware interaction to control a light using commands sent over a network. They develop Python scripts to send commands from a client device to a Raspberry Pi server, instructing it to toggle an LED based on received commands. This hands-on project reinforces their skills in IoT application development and remote device control.\nSection 21: Twython API\nThe Twython API enables developers to interact with Twitter's platform programmatically, opening up possibilities for integrating Twitter features into IoT applications. Students explore the Twython API in Python, learning how to authenticate with Twitter, send tweets, and retrieve data from the Twitter API. They gain insights into incorporating social media functionality into IoT projects for enhanced interactivity and communication.\n\nSection 22: Twitter Update and Search Applications\nExpanding on their understanding of the Twython API, students delve into developing applications for updating Twitter status and searching for tweets based on specific criteria. They learn how to authenticate users, compose and post tweets programmatically, and implement tweet search functionality using Python scripts. Through practical examples, students gain proficiency in integrating Twitter features into IoT applications for real-time updates and social media interaction.\nSection 23: LED Controlled by a Tweet\nInnovative IoT applications often involve integrating social media platforms with physical devices for interactive experiences. In this section, students explore how to control an LED using tweets sent to a designated Twitter account. They develop Python scripts to monitor incoming tweets, parse relevant commands, and trigger actions on a Raspberry Pi connected to an LED. This project demonstrates the integration of IoT devices with online services for responsive and engaging applications.\nSection 24: Twython and Gpiozero App\nBuilding on their previous projects, students embark on creating a comprehensive IoT application that combines Twitter integration with hardware control using the Gpiozero library. They develop Python scripts to receive commands from Twitter via the Twython API and translate them into actions to control LEDs or other peripherals connected to a Raspberry Pi. Through hands-on experimentation, students gain proficiency in building interactive IoT systems with social media connectivity.\nSection 25: Creating a Server and Sending Email\nEmail functionality is integral to many IoT applications, enabling notifications, alerts, and data transmission. In this section, students learn how to set up a simple email server on a Raspberry Pi and send emails programmatically using Python. They explore concepts such as SMTP (Simple Mail Transfer Protocol) and email authentication, developing scripts to automate the process of sending email notifications from IoT devices. This project equips students with essential skills for incorporating email functionality into their IoT projects.\nSection 26: Sensor Values in Python\nSensors are fundamental components of IoT systems, providing data on various environmental parameters. In this section, students explore interfacing sensors with Raspberry Pi and acquiring sensor readings using Python. They learn how to connect sensors such as DHT (Digital Humidity and Temperature) sensors to GPIO pins, read sensor data, and process it for further analysis or visualization. Through hands-on experimentation, students gain proficiency in sensor data acquisition and processing for IoT applications.\nSection 27: Conclusion\nIn the concluding section, students reflect on their journey through the course and consolidate their learning. They review key concepts and skills covered in the course, discuss potential applications of IoT technologies, and contemplate future learning and projects in the field. The conclusion serves as a moment of reflection and celebration of students' achievements in mastering Python programming for IoT development.",
      "target_audience": [
        "Beginners and hobbyists interested in learning IoT development with Raspberry Pi and Python.",
        "Students pursuing STEM education looking to gain hands-on experience with hardware and software integration.",
        "Professionals seeking to enhance their skills in IoT and embedded systems development.",
        "DIY enthusiasts and makers who want to build smart systems and home automation projects.",
        "Educators and instructors aiming to teach IoT concepts and practical applications to their students.",
        "Anyone passionate about technology and eager to explore the world of Internet of Things."
      ]
    },
    {
      "title": "Altium Designer 16 - Basics (Arduino FIO)",
      "url": "https://www.udemy.com/course/altiumdesignerbasics/",
      "bio": "Walking you through the basics of Altium Designer in schematic and PCB design, component creation and output generation",
      "objectives": [
        "Design custom printed circuit boards (PCB) in Altium Designer",
        "Generating PCB outputs for fabrication of PCB",
        "Enhance design workflow in PCB design and fabrication"
      ],
      "course_content": {},
      "requirements": [
        "Some electronics background",
        "Altium Designer",
        "Computer"
      ],
      "description": "Do you want to design your own Printed Circuit Board (PCB)?\n\nDo you want to increase your PCB design efficiency in Altium Designer?\nIn this course, you will learn from paper napkin schematics to sending PCB outputs to your manufacturer. This course will help develop a good foundation in Altium Designer, leading to better PCB design practices and skills. Upon completion of this course, you will have the tools required to design your very own custom PCB in a short amount of time.\nWhat is expected in this course?\n\nPreparation of course: Installation, licensing and graphical user interface\nComponent creation: schematic symbol, PCB footprint (2D and 3D) and IPC component wizards\nSchematic design: component placement, physical wiring, logical net labels\nPCB design: board shape definition, footprint placement, multiple routing modes\nSchematic electrical rule check and PCB design rule check\nCross probing between schematic and PCB views\nOutput generation: Bill of material, Gerber files\nWhat are the requirements?\nInternet to download Altium Designer\nAltium Designer license or 15-day trial license\nA computer which meets the requirements of Altium Designer\nWhat am I going to get from this course?\n\n29 lectures and 5 hours of professional intructor-led content!\nCreate your own PCB in Altium Designer\nWhat is the target audience?\nBeginners to intermediate skilled Altium Designer users\nEngineers migrating into Altium Designer\nAspiring product entrepreneurs\nStudents and researchers looking to design their custom PCB\nAnyone interested in designing PCB",
      "target_audience": [
        "Engineers",
        "Engineering students",
        "Entrepreneurs"
      ]
    },
    {
      "title": "Vivado Basics: Learn FPGA Design with a PCIe Project",
      "url": "https://www.udemy.com/course/vivado-learn-from-the-beginning-and-with-pcie-full-project/",
      "bio": "Master FPGA Development with Vivado: Design Xilinx FPGAs from Scratch Using VHDL or Verilog",
      "objectives": [
        "Master the Vivado Design Suite: Learn how to install, navigate, and use Vivado for FPGA design, simulation, and debugging.",
        "Design FPGA Projects from Scratch: Understand how to create and implement projects using Xilinx FPGAs, including block design and adding IP cores.",
        "Simulate and Debug Designs: Gain hands-on experience simulating projects with Vivado and ModelSim, and debug them using tools like the Integrated Logic Analyzer",
        "Develop Advanced Features: Learn to work with PCIe communication, AXI interfaces, and Zynq 7000 processors for real-world applications.",
        "How to create Bit or Mcs file, and even uploading it to a development board!",
        "How to open SDK project.",
        "Axi-Bus, Streamed and Memory-mapped IP's and differences.",
        "How to setup the PCIe root complex write a full communication to the Pcie end point and how to simulate the PCIe.",
        "Adding ILA ,integrated logic analyzer, the strongest tool for real-time debug."
      ],
      "course_content": {},
      "requirements": [
        "No Prior FPGA or Vivado Experience Needed: This course is designed for beginners and starts from the basics.",
        "Basic Understanding of Digital Logic: Familiarity with concepts like logic gates, flip-flops, and binary arithmetic will be helpful but is not mandatory.",
        "A Computer: Students need a computer capable of running Vivado Design Suite and ModelSim (Windows/Linux recommended).",
        "Vivado Design Suite: Instructions for downloading and installing Vivado 2019.1 will be provided in the course."
      ],
      "description": "Master Vivado: FPGA Development from Scratch with PCIe Integration\nThis Vivado course teaches you how to use the Vivado Design Suite to develop Xilinx FPGAs, equipping you with skills in high demand at leading companies like Apple, Microsoft, Intel, Amazon, and Google. Whether you're a beginner or looking to expand your expertise, this course has you covered!\nWhy Learn Vivado?\nFPGA development is one of the most rewarding and in-demand professions in the hardware industry. This course is designed to take you from installing Vivado to mastering its advanced features like PCIe and AXI interfaces.\nWhat You’ll Learn:\nInstalling Vivado Design Suite (2019.1) and ModelSim.\nCreating and simulating FPGA projects using Vivado and third-party tools.\nWorking with Xilinx IP cores, constraints, and synthesis.\nDesigning and debugging FPGA projects in real-time with ILA.\nBuilding a full PCIe project with step-by-step guidance.\nKey Highlights:\nOver 30 lectures, lifetime access.\nA 2.5-hour PCIe project to solidify your skills.\nSubtitles available in 16 languages.\nA 30-day money-back guarantee!\nWhat Students Are Saying:\n“Very informative and helpful. I learned so much!” – Umesh Kumar Sharma\n“Great explanation of PCIe implementation and Vivado usage.” – Paul Burciu\nBy the end, you’ll be ready to design complex FPGA projects and confidently use Vivado in professional settings.\nJoin now and take the first step toward becoming an expert FPGA developer!",
      "target_audience": [
        "Beginners in FPGA Development: Ideal for those with no prior experience in FPGA design or the Vivado Design Suite.",
        "Engineering Students: Perfect for students studying electronics, computer engineering, or related fields who want hands-on experience with FPGA tools.",
        "Professionals in Hardware Design: A valuable resource for engineers looking to expand their skill set in FPGA development and advanced features like PCIe and AXI interfaces.",
        "Hobbyists and Enthusiasts: Great for tech enthusiasts who want to learn FPGA design as a new hobby or to work on personal projects.",
        "Advanced Learners: Suitable for experienced FPGA developers seeking to deepen their understanding of Vivado’s advanced tools and features.",
        "This course is for anyone eager to learn FPGA design, whether to start a career, boost skills, or pursue a personal interest in cutting-edge hardware development. Let me know if you'd like to refine this further!"
      ]
    },
    {
      "title": "Servo Motion Mastery (PLC Programming)",
      "url": "https://www.udemy.com/course/servo-motion-mastery/",
      "bio": "DON'T MISS OUT! PLC programming for the core understanding of SERVO controls in RSLogix 5000 programming.",
      "objectives": [
        "Be able to completely setup and program a basic Rockwell Automation servo system from scratch, from beginning to end, all the way to a successful running servo system. This course will provide all you need to know to use Rockwell Automation PLC programming to be able to control a Kinetix servo system with over 13 hours of detailed video training, knowledge that you can't get just anywhere!"
      ],
      "course_content": {
        "Introduction to Servo Motion Mastery 101": [
          "Introduction"
        ],
        "How to Setup a Servo Controller and the Physical System In the I/O Tree": [
          "How to Setup a Servo In the IO Tree",
          "How to Read servo axis tags and understand them"
        ],
        "Communicating with a Kinetix 6000 with a 1203-USB": [
          "Servo Motion Mastery 1203-USB Connection",
          "Can You Connect a Kinetix 6000 Via Ethernet"
        ],
        "Servo Motion Mastery Direct Commands": [
          "How to use Servo Motion Mastery Direct Commands and understand them"
        ],
        "Servo Motion Mastery Linear and Rotary Axis Types": [
          "Servo Motion Mastery Linear and Rotary Axis Types",
          "Linear Axis vs Rotary Axis",
          "Real World Example of a Linear Axis"
        ],
        "Servo Motion Mastery Basic Servo Controls for a core Learning": [
          "Servo Motion Mastery On / Off Controls",
          "Servo Motion Mastery Servo Jog Controls and Simple State Layout",
          "Servo Motion Mastery MAM Instruction Explanation and Use In Controls",
          "Servo Motion Mastery Jog MCD Instruction and Use in Controls",
          "Servo Motion Mastery Speed Pot MCD"
        ],
        "Understanding Servo Accel and Decel": [
          "Understanding Servo Accel",
          "Understanding Jerks in an S-Curve",
          "S-Curve Trending and Tuning....Key Elements"
        ],
        "Building and Using a Motion UDT or User-Defined Data Type": [
          "Building and Using Motion UDT or User-Defined Data Type"
        ],
        "What is a Virtual Axis and How is it Used": [
          "Servo Motion Mastery Virtual Axis",
          "Servo Motion Mastery Virtual Axis Gearing and Uses Along with Speed Changes",
          "Using an MRP to Properly Match Axis Before an MAG is Commanded.",
          "Servo Motion Mastery Virtual Axis Example in a Full System Use"
        ],
        "Program an Axis Home Instruction": [
          "Servo Motion Mastery Homing",
          "Home to Torque",
          "Home to Torque Example Code",
          "Servo Motion Mastery MRP Instruction Use",
          "Servo Motion Core System"
        ]
      },
      "requirements": [
        "A based understanding of Rockwell Automation Software or the drive to learn RSLogix 5000 PLC programming.",
        "Note: This course is very informative so learning the core servo system controls are made very simple to understand and is a reflection of standard Rockwell classes but much more user-friendly."
      ],
      "description": "This course is designed to give you a deep understanding of the core values needed\nto be able to program, troubleshoot, and have the deepest knowledge of Rockwell\nAutomation PLC servo controls. This course starts from scratch and builds up\nelement by element to give the very best detail about servo motion\ncontrols.\n\n\nThis is the best course in 2018 for detailed Rockwell Automation servo motion training program like this before for this price and I highly doubt that there will be anything close to this unless I am the one who makes it. Continuously raising the bar is my mission and I encourage you to join my journey.\n\n\nAs part of making this course the best, I will be adding revisions or videos from time to time to add more sections but as it sits right now there is over 13 hours of video training about servo controls. This\nis Servo Motion Mastery 101 and  Advanced Servo Motion Mastery 1 is released now as well and Advanced Servo Motion Mastery 2 will be later\nin this year so you have a deep\ncore understanding of servo motion controls.\n\n\nI have a very successful YouTube channel about PLC programming and run a website\nto assist with this effort as will which is Online PLC Support if you were to\nGoogle it.",
      "target_audience": [
        "Anyone looking to learn the complete setup and PLC controls of servo motion",
        "Example: May have some knowledge of servos but is looking to find out the details and the tricks of the trade."
      ]
    },
    {
      "title": "Hardware Cell Phone Mobile Repair & Microsoldering V3.0-2025",
      "url": "https://www.udemy.com/course/mastering-cell-phone-repair-microsolderingandroid-iphone/",
      "bio": "From Beginner to Pro: Mastering Mobile phone repair like a technician who work in a big company.",
      "objectives": [
        "Learn cell phone repair Basics & Advanced Levels",
        "Learn Micro Soldering for mobile devices Basic & Advanced Levels",
        "Understand Smartphone electronics on board",
        "Understand cell phone circuits",
        "How to deal with water damage PCB mobile phone & repair it like a pro technician",
        "Repair common issues in mobile phone",
        "Learn how to troubleshoot diagnose and repair cell phones",
        "Learn how test and check smartphone components using multimeter and much more.",
        "Learn how to use Power Supply in testing and diagnosing in Mobile phone repair.",
        "Join Big Companies like Apple , Samsung , Xiaomi , OPPO , Huawei",
        "Start new business in cell phone repairing.",
        "Repair Mobile Phone as technician who work in Apple , Samsung"
      ],
      "course_content": {},
      "requirements": [
        "No experience needed. I will teach you everything by real applying on real mobile devices."
      ],
      "description": "\"Do you want to change your career and work as technician in mobile device repairs? Welcome to \"Mastering Cell Phone Repair & MicroSoldering (Android-iPhone)\" course!\nIn this comprehensive course, you will learn everything you need to know to become an expert in mobile phone repair, including cell phone repair, iPhone repair, Android repair , and microsoldering.\nWe will cover various topics such as phone repair basics, common problems, and troubleshooting techniques. You'll also get hands-on experience with microsoldering techniques, including soldering and mobile repairing.\nOur team of experienced instructors will guide you through each lesson, providing easy-to-follow instructions and step-by-step demonstrations to ensure that you learn the skills you need to succeed in the cell phone repair industry.\nThis course is perfect for anyone who wants to start a career in mobile phone repair or improve their skills. By the end of this course, you will have the knowledge and confidence to repair any type of mobile phone, whether it's an Android or iPhone.\nDon't miss out on the opportunity to become an expert in phone repair. Enroll now and start mastering cell phone repair and microsoldering today!\nOur instructors will guide you through the process of soldering, which is a fundamental skill in cell phone repair. You'll learn about the different types of soldering techniques and when to use them. We will also provide you with tips and tricks for working with small components and dealing with difficult repairs.\nBy the end of this course, you'll have the skills and knowledge necessary to start your own cell phone repair business or work for an established repair company. You'll also be able to repair your own mobile phone, saving you time and money.\nSo, if you want to become a skilled mobile phone repair technician or improve your existing skills, enroll in \"Mastering Cell Phone Repair & MicroSoldering (Android-iPhone)\" today and take the first step towards a rewarding career in phone repair.",
      "target_audience": [
        "Anyone who wants to master cell phone repairing",
        "Anyone who wants to change his career and join big companies",
        "Anyone who wants to work abroad",
        "Anyone who wants to startup a mobile phone repair center"
      ]
    },
    {
      "title": "IT Asset Management (ITAM) - Hardware Asset Management (HAM)",
      "url": "https://www.udemy.com/course/it-asset-management/",
      "bio": "The ultimate course for learning everything about IT Asset Management. Includes free ITAM eBook & free process flows!",
      "objectives": [
        "Introduction to IT Asset Management",
        "Role of ITAM in an Organization",
        "Starting up an ITAM program",
        "Executive Buy In",
        "The Asset Repository",
        "Asset Procurement",
        "Install Move Add Change (IMAC) Process",
        "The Asset Lifecycle",
        "Vendor Management",
        "Asset Tagging",
        "Responsibilities of an IT Asset Manager",
        "IT Asset Disposition (ITAD) Process",
        "Reporting",
        "ITAM Maturity Model",
        "Total Cost of Ownership (TCO)",
        "Return on Investment (ROI)",
        "Processing Lost or Stolen Assets",
        "Warranties",
        "Configuration Management Database (CMDB)",
        "Return Merchandise Authorization (RMA)",
        "Software as a Service (SaaS)"
      ],
      "course_content": {},
      "requirements": [
        "There are no prerequisites for this course."
      ],
      "description": "Are you an IT Professional who wants to learn about IT Asset Management? Or maybe you already know about IT Asset Management and want to brush up you're existing skills? If so, then this course is perfect for you!\nIn this course you will learn about:\nWhat is IT Asset Management\nRole of ITAM in an Organization\nStarting up an ITAM program\nExecutive Buy In\nThe Asset Repository\nAsset Procurement\nInstall Move Add Change (IMAC) Process\nThe Asset Lifecycle\nAsset Tagging\nVendor Management\nITAM Maturity Model\nReturn Merchandize Authorization (RMA)\nConfiguration Management Database (CMDB)\nTotal Cost of Ownership (TCO)\nManaging your IT Asset Inventory\nAnd many more useful topics\nCareers in the IT Asset Management industry are proving to be more and more common, so the need for solid skills and education is proving to be a basic requirement for all ITAM professionals.\n\n\nDid you know that the average salary for an IT Asset Manager in the United States is $110k? This course will enable you to kick-start your career in IT Asset Management.\n\n\nThe course also comes free with the following:\nITAM glossary\nShould You Track It? Decision Diagram\nA free digital copy of my book \"An IT Manager's Guide to Hardware Asset Management\"\nAsset Check-out form\nAsset Return form\nSample Purchase Order document\n\n\nITIL 4 also places a heavy focus on IT Asset Management, so maybe you are ITIL certified, and want to greater expand your knowledge into ITAM.\n\n\nThis course focuses more on Hardware Asset Management (HAM), rather than Software Asset Management (SAM). But with that being said, this course is an excellent segway into the world of SAM.\n\n\nReviews from some students that have already taken this course:\n★★★★★ “...Very informative and broken down into easy to digest sections, with thorough explanations of terms and concepts. The teacher has a mastery of the material and provides helpful examples to explain concepts.” – Stuart\n★★★★★ “This was a very comprehensive course - it covered all the topics expected in an Asset Management program. It was a really good refresher for me.” - Doreen\n\n\nStudy this course today and elevate you're career to the next level!\n\n\nMaybe you're interested in taking the Certified Hardware Asset Management Professional (CHAMP) course by IAITAM, but don't want to pay the hefty price? Take this course today and learn the SAME information, and much more for 100x less!\n\n\nThis course is perfect for you if you use any of the following IT Asset Management tools, and want to understand ITAM even more:\nServiceNow\nCherwell Asset Manager (CAM)\nIBM Maximo\nFlexera\nSysAid\nManage Engine\nIvanti\nSNOW\nAsset Panda\nFreshService\nSamanage\nDevice42\nAssetCloud\nSnipe IT\nJira ServiceDesk\nRemedy\nSpiceworks\nLandesk\nHP Asset Manager\nThis course is also great studying material for the Hardware Asset Management Specialist Certification exam by ITAM Institute.",
      "target_audience": [
        "This course is for beginner and intermediate IT professionals that either wish to learn about IT Asset Management, or want to brush up their existing skills and knowledge. The course has a particular focus on Hardware Asset Management (HAM), which is around the management of physical hardware assets."
      ]
    },
    {
      "title": "Learn VHDL, ISE and FPGA by Designing a basic Home Alarm",
      "url": "https://www.udemy.com/course/getting-started-with-fpga-ise-and-vhdl/",
      "bio": "In 6 hours, you will become comfortable with designing in VHDL using ISE tools and test your design on a Basys2 board",
      "objectives": [
        "Write VHDL Codes",
        "Use FPGA Editor to understand a design and the available resources",
        "Create Testbenches and Run Simulation",
        "Create Timing Constraints",
        "Run Timing Analysis",
        "Add constraints with PlanAhead",
        "View and understand the Technology Schematics after Synthesis",
        "Generate an IP Core",
        "Run Implementation",
        "Extract information from ISE Reports",
        "Solve errors and understand warnings encountered in the ISE flow",
        "Configure the FPGA and ROM with iMPACT"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of programming",
        "Basics of Digital Electronics"
      ],
      "description": "This course was designed to equip you with the knowledge and skill that will get you up to speed with FPGA Design in VHDL. You will be expected to have some basic knowledge on digital electronics such as the meaning of Flip Flops, Gates and Finite State Machine, and also some basics of programming language would help in the course.\nAlthough the design flow will be dealt with in almost its entirety, the course starts from the basics and take you up to an intermediate level, where you will be able to take a design from a concept through the different stages of design until seeing the design work on a board.\nThe course is structured in four parts, starting with a simplistic view at how FPGA's work and the resources that are available on a typical FPGA. The tool FPGA Editor will be used. Then an overview of ISE Flow will be presented in part 2, along with demos on how the tool is downloaded, installed and used. The third part of the course will explain and demonstrate how the most useful VHDL syntaxes are written, and at each step, the Technology Schematic is viewed to understand how VHDL codes are synthesized into logic.\nThe last part is about designing a Home Alarm System from the concept and State Diagram. A step-by-step approach is used to show all the stages of the flow, including writing of the codes, Synthesize, add constraints, run Implementation, Timing Analysis, Behavioural Simulation and Post implementation Simulation and Configuration of the FPGA and PROM on a Basys 2 board.\nThe course consists of 6 hours of videos, spread over 50 lectures, and provide demos to show how the tool is used effectively.",
      "target_audience": [
        "The course was designed to help you get started from the basics and rise to an intermediate level",
        "Students",
        "Professionals who want to gain these skills",
        "Electronics Enthusiasts",
        "Research Scientists"
      ]
    },
    {
      "title": "Introduction to Internet of Things(IoT) using Raspberry Pi 2",
      "url": "https://www.udemy.com/course/introduction-to-iot-using-raspberry-pi-2/",
      "bio": "Learn how to use Raspberry Pi without Monitor, Keyboard and Mouse. Deploy program remotely and control using PC.",
      "objectives": [
        "share Wi-Fi used on Windows to Raspberry Pi via LAN cable.",
        "Save $100 or more by substituting your monitor, keyboard or mouse with your laptop.",
        "Remotely access Raspberry Pi Linux terminal in Windows.",
        "Transfer files between Windows computer and Raspberry Pi without flash drive.",
        "Access the Raspberry Pi Graphical User Interface in a Windows computer.",
        "Deploy program remotely and control using your personal computer."
      ],
      "course_content": {},
      "requirements": [
        "Pre-Installed Raspbian operating system in any version of Raspberry Pi."
      ],
      "description": "Over 1,000 students & 20+ 5 star reviews.\nThis course is a follow on course to our immensely popular #1 Raspberry Pi course on Udemy - \"Introduction to Raspberry Pi\".\n\n\nBonus content added regularly. Latest update on 7-Nov-15. We will keep adding new content, so that our students have something to look forward to\nAll our students (Makerdemy brand) get VIP pricing ($8) for all our new courses. We have 10 courses under our brand and will be releasing a new course every 2 months.\n\n\n_______________________________________________________________________\nThis is an introductory course on IoT. However, this is not an introductory course on Raspberry Pi. This course is ideal for those who are interested in exploring the possibilities of Internet of Things using Raspberry Pi. The course assumes basic knowledge of computer hardware and software. However, knowledge of Operating system Installation and networking will help you in getting up to speed.\nThe GPIO pins on Raspberry Pi are a great way to interface with physical devices like resistors and sensors. The implementation of IOT within the device will change the operating possibilities. If you are a technology enthusiast and want to learn the cutting edge technology then this is the right course for you.\nYou will learn how to access the complete Graphical User Interface of your Raspberry Pi in your Windows computer. You don't need to buy a Monitor, Keyboard or Mouse separately for this mini kit. By which you can possibly save $100 or more by substituting your personal laptop instead of buying separate peripheral devices. The idea is to reduce costs and use existing devices to interact with the mini kit.\nYou will also learn how to eliminate the use of flash drive and transfer the files wirelessly between Raspberry Pi and Windows computer and vice-versa.\nFinally, you will learn how to deploy the program remotely and access the GPIO pins. You will execute the program from your Windows computer and the output can be seen afar with peripheral devices connected to Raspberry Pi 2.\nThe course provides the complete source code of the real time project.\nThe entire course can be completed over a fortnight, including the hardware assembly and coding in Python.\nBy the end of this course, you will have a firm foundation on Internet of Things using Raspberry Pi 2. You can easily climb the stairs of IOT advance projects.\nWhat are you waiting for? Enroll now!",
      "target_audience": [
        "This is a beginner course on Raspberry Pi 2 meant for those who want to explore the possibilities of Internet of Things using the mini kit."
      ]
    },
    {
      "title": "LabVIEW Step By Step: Beginners Complete Guide",
      "url": "https://www.udemy.com/course/labview-step-by-step-your-complete-guide/",
      "bio": "A-Z Guide that takes you from ZERO to HERO in LabVIEW and helps you start using LabVIEW efficiently",
      "objectives": [
        "Understand the fundamentals of LabVIEW",
        "Program in LabVIEW like a champ",
        "Use tools to build control system apps",
        "Learn LabVIEW and establish a strong understanding of the concept behind Control Systems.",
        "Create fully functional Apps"
      ],
      "course_content": {},
      "requirements": [
        "A computer or laptop - With Window 7 or later, > 2Gb of RAM (4Gb Reccomended) , 1.5Ghz Processor or higher (Multicore Core 2Ghz processor Recommended).",
        "LabVIEW Software in trial version or you can purchase a license",
        "Internet connection to download LabVIEW"
      ],
      "description": "Learn the basic concepts, tools, and functions that you will need to build fully functional control apps with LabVIEW.\nWhy You Should Take This Course?\nA-Z Guide that takes you from ZERO to HERO in LabVIEW.\nHelps you start using LabVIEW efficiently.\nTakes you through the basics of LabVIEW step by step.\nTeaches you how to use all 16 unique graphical programming blocks found in LabVIEW.\nProvides easy-to-understand explanations for each block.\nDelivers all the information without overwhelming you with technical terms.\nContinual Updates More Than 1300 STUDENTS!!! THANK YOU!!!\nWhat Students Are Saying:\n\"Informative. Good graphical explanations help to show examples.\" - Chris Hayden\n\"Thanks a lot for sharing this information with us. I learned a lot from this course. Thank you so much.\" - Yves Lebrun\n\"Gets you started with LabVIEW. Good introductory course.\" - Abhishek Dhar\n\"Perfect for Beginners. Exactly what I need, how it works, what it does, what are the tools, etc.\" - Marie-Neige Guerin\n\"Great foundation for LabVIEW. By the end, I was able to grasp some pretty complex concepts such as loops & graphs.\" - Brady Alan Readling, Jr.\n\"Wonderful teaching.\" - Woo-Young Yoon\nWelcome to this course.\nTogether we will build a strong foundation in LabVIEW fundamentals and start your journey towards greatness in the control industry.\nCourse Content:\nLabVIEW Download and Installation\nBasic Features\nExamples and Exercises\nAdvanced Features and Techniques\nA Powerful Skill at Your Fingertips Learning the fundamentals of LabVIEW puts a powerful and very useful tool at your fingertips. It is easy to learn, has excellent documentation, and is the base for all modern control applications.\nJobs related to LabVIEW application development are plentiful, and being able to learn LabVIEW will give you a strong background to more easily pick up other control software and hardware.\nComplete with working files, datasets, and code samples, you will receive a verifiable certificate of completion upon finishing the course. We also offer a full Udemy 30 Day Money Back Guarantee if you are not happy with this course, so you can learn with no risk to you.\nSee you inside this course.\nWhat You Will Learn\nBasic concepts and tools for LabVIEW.\nHow to build control applications.\nUse of graphical programming blocks in LabVIEW.\nStep-by-step guidance through LabVIEW features and functions.\nPractical examples and exercises to reinforce learning.\nWho Is This Course For\nBeginners with no prior experience in LabVIEW.\nStudents and professionals looking to enhance their skills in control applications.\nAnyone interested in learning graphical programming and control systems.\nRequirements\nNo prior knowledge of LabVIEW required.\nA computer with LabVIEW installed (trial version available).\nEnthusiasm and a willingness to learn.\n\n\nAbout the Instructor Info Educational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a Leading Team in Microcontroller Industry, with over 13 Years of Experience in Teaching and Doing Practical Projects.\nWe strive to put all our hands-on experience in these courses. Instead of superficial knowledge - we go into the depth of the topic and give you the exact - step by step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the course of these years - we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ Courses on Udemy\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million View, 20k+ Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology, helping educate the world to make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and provide guidance and consulting for many students over the years to help them kick-start their career.\nAshraf’s core skill is explaining difficult concepts in a step-by-step, easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, particularly for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers courses on\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone with a curiosity for building control applications",
        "People with no experience in Control or Programming",
        "People with an intermediate knowledge of Control Systems",
        "Children over 12 years old"
      ]
    },
    {
      "title": "FPGA Design with VIVADO HLS -High Level Synthesis",
      "url": "https://www.udemy.com/course/fpga-design-with-high-level-synthesis-vivado-hls/",
      "bio": "Design, Simulate, Synthesize & Export IP with VIVADO HLS : An FPGA Design Approach with C/C++",
      "objectives": [
        "Vitis HLS Installation, OpenCV Setup and LAB session",
        "Image Processing with VIVADO HLS & FPGA: Utilizing Computer Vision & Image/Video Processing Libraries on HLS",
        "Sobel Edge Detection IP design in HLS, integrate IP in VIVADO tool and implement it on Zynq FPGA",
        "Designing complete image processing pipeline on VIVADO tool with HLS IP and testing design on Zynq FPGA",
        "Creating C/C++ Project, Simulating, Synthesizing and Exporting it with High Level Synthesis (VIVADO HLS)",
        "Design, Synthesize, Simulate: Counter, Matrix Multiplier, Frequency Modulator ,Numerically Controlled Oscillator and Exporting Design to VIVADO tool",
        "Debugging and Optimizing HLS Project for Resource Utilization on Targeted ZedBoard FPGA"
      ],
      "course_content": {},
      "requirements": [
        "Basic Idea of C, C++",
        "Basic Idea of HDL (VHDL/Verilog)",
        "Basics of FPGA Design Flow"
      ],
      "description": "At the ending of this course, we also have included how to \"install Vitis HLS, setup OpenCV in Vitis HLS and performing the Vitis Vision 2020.2 based examples\".\nLearn from Basic HLS Design & C-Simulation to Design Computer Vision Application [Real Time Sobel Edge Detection]\nHigh Level Synthesis is new approach on FPGA Design with C/C++ Language.This Course covers : Creating new project on HLS, Running C Simulation on HLS, Synthesizing the HLS Project's which converts C/C++ Source in to Verilog/VHDL and System C, Running C/RTL Co-simulation, Exporting HLS Design in to IP core Format  to VIVADO IP Integrator. We also have include session on \"Sobel Edge IP design in HLS, exporting it to VIVADO tool and then implementing/testing it on Zybo FPGA\".\nAfter Completing this course you will be able to Design, Simulate,Synthesize and Implement/Export HLS projects. HLS includes large number of C/C++ Libraries for Computer Vision (OpenCV), Video/Image Processing and Mathematical Computations which is very much complex while implementing on HDL/RTL.\nIn this Lab you are going to do lab on Design, Simulation , Synthesis and Implementation (Export Design) of Counter, Matrix Multiplier, Frequency Modulator, Numerically Controlled Oscillator (NCO Design) in C++. You will also integrate the exported HLS project with Zynq Processing System at VIVADO IP Integrator and Synthesize, Implement the Project on VIVADO IPI.",
      "target_audience": [
        "Electrical and Electronic Engineering",
        "FPGA Design Enthusiast",
        "Computer Science",
        "High Level Synthesis Enthusiast",
        "Hardware Developer working on HDL & interested on HLS"
      ]
    },
    {
      "title": "Verilog HDL Fundamentals for Digital Design and Verification",
      "url": "https://www.udemy.com/course/verilog-hdl-fundamentals-for-digital-design-and-verification/",
      "bio": "Build a strong Verilog language foundation by implementing combinational / sequential digital circuits and testbenches",
      "objectives": [
        "Master the basics of Verilog language for designing synthesizable digital circuits for ASIC / FPGA",
        "Differentiate between Verilog structural / dataflow / behavioral design styles and how / when to use them in Digital Design and Verification",
        "Implement combinational and sequential digital circuits using Verilog HDL starting from schematics or functional specifications",
        "Create and simulate a Verilog testbench for a digital circuit starting from its functional specifications",
        "Examine the behavior of a digital circuit receiving stimulus in a testbench, using an industry-level simulator (free for academic purposes)",
        "Explicit visual explanations for the 80+ downloadable code examples, circuits, and testbenches offering you increased retention and accelerated learning"
      ],
      "course_content": {},
      "requirements": [
        "Basic notions of programming languages (like C / C++/ Python)",
        "Interest in hardware description languages. You will learn everything about Verilog HDL for Design and Verification in this course",
        "Interest in digital microelectronics, digital circuits design and verification"
      ],
      "description": "Are you a beginner or an enthusiastic hobbyist interested in digital circuits design using the Verilog Hardware Description Language? Did you try to learn Verilog HDL before, but found it very challenging? Are you curious if you have what it takes to become a digital chip designer or a functional verification engineer? Then you're in the right place!\nVerilog Hardware Description Language easy as A,B,C\nYou'll learn the basics of digital circuits theory and we'll focus most of our energy on implementing practical coding examples with real digital circuits using Verilog. You will graduate this course with a strong foundation in Verilog HDL for both Digital Design and Functional Verification.\nFrom the Digital Design perspective, you'll be able to:\nstart from a digital circuit diagram / schematic and implement synthesizable Verilog code for ASIC / FPGA\nstart from a functional description and implement synthesizable Verilog code for ASIC / FPGA\nFrom the Functional Verification perspective, you'll be able to:\nunderstand a functional description of a digital circuit and create stimuli for it\nimplement a self-checking testbench to validate the functionality of a digital circuit\nYou will easily differentiate between different Verilog coding styles (structural, dataflow, behavioral) and how to use them to design synthesizable digital circuits. You'll see just how easy modeling digital circuits using Verilog is!\nAt the end of the course you'll master Verilog industry-level coding techniques to get the best results for digital design or verification.\nLearn how to use an industry-level Verilog HDL simulator\nSimulations are a critical part in designing modern digital chips, thus you will install and learn how to use Modelsim - Intel FPGA Edition (free version for academic purpose).  You will be able to create projects, simulate your Verilog code, and interpret the outputs using an world-class simulator.\nCourse Overview\nThis course is tailored for beginners who are interested in digital microelectronics, digital circuit design and verification. The course contains more than 158 bite-sized lectures out of which more than half are hands-on exercises labeled Action Time. Each Action Time has downloadable resources which you can simulate immediately using Modelsim. Most of these sections also contain challenges for you, so you'll write extra code that extends beyond the initial functionality.\nYour first Verilog examples will be similar to a normal programming language (like C) to learn the operators, and, step-by-step, we'll advance together to the Hardware Description Language constructs, where Verilog procedures execute in parallel.\nYou'll learn how to use Verilog for combinational and sequential logic and how to combine the Structural / Dataflow / Behavioral coding styles to obtain digital circuits with a specific functionality. Your circuits will get more complex as you advance, some of them being composed of a hierarchy of sub-circuits.\nVerilog combinational circuits you will implement during the course :  logic gates, adders, comparator, binary encoder / decoder, priority encoder, multiplexers / de-multiplexers, seven segment display decoder, Arithmetical Logical Unit (ALU), etc...\nVerilog sequential circuits you will implement during the course: flip-flops, latches, shift registers (PIPO, PISO, SIPO, SISO), Linear Feedback Shift Registers, synchronous counters, frequency dividers, Sequence Detector etc...\nNext, you'll experiment with Verilog functions and tasks and how to use them in testbenches and design.\nIn the final chapters you will design memories (SRAM and ROM), Finite State Machines, and more complex circuits like a FIFO and even a data encryption module.\nA workflow with destination SUCCESS!\nWe start from real engineering problems and understand how a digital circuit solves that problem.\nYou are presented a real digital circuit, how it is used in the real world, then how to model and test it using Verilog.\nYou simulate it using Modelsim, and next I walk you through the results interpretation.\nWe do this process together every single time....  I explain the story behind the Verilog code so that, at the end of the course, you will be able to write the Verilog code behind the story.\nWhy learn Verilog HDL?\nChances are more than 50% that all the chips in the devices around you were designed with Verilog.\nWorking as a Digital Design or a Functional Verification engineer means to design today the technologies of tomorrow. This translates into having an exciting and challenging job with a great impact in the world. Since less than 2% of engineers choose this path and the semiconductor industry has never been busier, I'm pretty sure you will find yourself a good place in it.\nVerilog is a good foundation for learning SystemVerilog, which is a very popular object-oriented design and verification language in the semiconductor industry.\nWhy did I create this course?\nAs an engineering student, I found it quite challenging to learn Verilog because it has a very steep learning curve and you need lots of know-how to be able to run even a simple example. Because of this, most students give up learning Verilog for a career in Digital Design or Verification and this also negatively impacts their academic results.\nAfter 10+ years of industry experience, thousands of hours in Verilog, and academic research, I feel I've found the missing puzzle pieces that I didn't have back in the days. This course will show you the beauty and simplicity of digital circuits design using Verilog!\nReady? Set... GO!\nThank you for your interest in Verilog HDL for Digital Circuits Design and Functional Verification!\nReady to embark on your journey in mastering the basics of Verilog HDL for digital design and verification? Let's start this wonderful adventure!",
      "target_audience": [
        "Computer Science, Electronics, Telecommunications, and Microelectronics students who want to learn Verilog for their projects and faculty assignments",
        "Electronics and Microelectronics hobbyists who want to learn the Verilog Hardware Description Language",
        "Beginners who aspire to a career as a Digital Design Engineer or a Functional Verification Engineer",
        "Beginners in digital microelectronics and digital circuits design curious about the Verilog Hardware Description language"
      ]
    },
    {
      "title": "ESP32 For Arduino Makers",
      "url": "https://www.udemy.com/course/esp32-for-arduino-makers/",
      "bio": "Use this powerful microcontroller to turbo-boost your Arduino projects",
      "objectives": [
        "Learn about the ESP32 and what makes it an excellent choice for Arduino Makers.",
        "Learn about the differences and similarities between the ESP32 and the Arduino.",
        "Learn about the variants of the ESP32 module.",
        "Learn about the features ESP32 development kit.",
        "Learn how to use the ESP32 in place of the Arduino to do things such as controlling LEDs, reading button and potentiometer states, drive displays and motors.",
        "Learn how to use the ESP32 more advanced capabilities, like its flash memory (as a file system), the digital to analog and analog to digital converters.",
        "In the end, become confident in using the ESP32 in your projects.",
        "Learn how to use the ESP32 to enable your project to communicate with the Internet.",
        "Learn how to use the ESP32 to enable your project to communicate with Bluetooth devices (classic and BLE)."
      ],
      "course_content": {
        "Introduction": [
          "01.10 What is this course about?",
          "01.20 Software you will need",
          "01.30 Hardware you will need",
          "01.40 How to get the most out of this course",
          "Update 2025: ESP32-S3 Support, Modern IDE, and Fully Revised Codebase"
        ],
        "Know your ESP32": [
          "02.10 The ESP32 module",
          "02.20 The ESP32 Dev Kit",
          "02.30 ESP32 vs Arduino",
          "02.40 GPIOs",
          "02.50 Communications",
          "02.60 Power"
        ],
        "Development environments": [
          "03.10 Setting up ESP32 in the Arduino IDE on Mac OS (to use in this course)",
          "03.20 Setting up ESP32 in the Arduino IDE on Windows 10 (to use in this course)",
          "03.30 Install the drivers CP21012 USB chip"
        ],
        "The modern (2025) ESP32-S3-DevKitC-1": [
          "Comparing the ESP32-WROOM-32 and ESP32-S3-WROOM-1 modules",
          "Comparing the ESP32 DevKit V1 and ESP32-S3-DevKitC-1",
          "Moving from ESP32 Arduino Core v1.x to ESP32 Arduino Core v3.x",
          "Getting started with the ESP32-S3 guidelines"
        ],
        "GPIOs": [
          "04.10 Digital output LED",
          "04.20 PWM and LED",
          "04.30 RGB LED with PWM",
          "04.40 Digital input with Button",
          "04.50 Analog input with a potentiometer",
          "04.52 Analog input with potentiometer and PWM output",
          "04.62a An overview of Digital to Analog Conversion in the ESP32",
          "04.62b DAC demo sketch",
          "04.62c DAC analog waveform demo",
          "04.62d Making noise with the DAC",
          "04.70a GPIO interrupts, an introduction",
          "04.70b GPIO interrupts, sketch and demonstration"
        ],
        "Sensors": [
          "05.10 Integrated Hall effect (use a magnet)",
          "05.20 Touch (capacitive) sensor with LED",
          "05.30 Touch (capacitive) sensor with interrupts and LED",
          "05.40 Photoresistor",
          "05.50 BME280 environment sensor using I2C",
          "05.60 DHT22",
          "05.70 ADXL335 Accelerometer"
        ],
        "Displays": [
          "06.10 LCD I2C screen",
          "06.20 Seven segment display",
          "06.22 Seven segment display with library",
          "06.30 Seven segment clock display with I2C",
          "06.40 8×8 LED matrix display (single)",
          "06.42 8×8 LED matrix display (multiple)"
        ],
        "Motors": [
          "07.10 DC motors with the DRV8871 motor controller",
          "07.20 Servo motor"
        ],
        "Storage": [
          "08.20 EEPROM",
          "08.30 SPIFFS",
          "08.40 How to erase the flash"
        ],
        "Time and date": [
          "09.10 Time and date with the DS3231",
          "09.20 A clock with an LCD and the DS3231"
        ]
      },
      "requirements": [
        "Be familiar with the Arduino Uno",
        "Be familiar with writing and editing sketches for the Arduino Uno",
        "Have completed Arduino Step by Step Getting Started (or have equivalent knowledge)",
        "Be familiar with I2C, serial communications.",
        "Be familiar with the breadboard and wiring."
      ],
      "description": "Course updated in August 2025\nI have updated this course to support the ESP32-S3-DevKitC-1 N16R8 development board, using the latest Arduino IDE (2.2.x) and ESP32 Arduino Core Library (v3.2.1). I have also added new lectures in section four to provide you with the necessary information so that you can work with the newer ESP32-S3 module and devkits.\nI have revised all example sketches for compatibility with this modern hardware and software environment. The complete set of updated scripts is available on GitHub, with most lessons offering both a simple version (ideal for quick testing) and a comprehensive version (including extended functionality and inline documentation). Each script contains detailed comments describing software behavior and hardware wiring instructions. New videos are in development to demonstrate the updated setup and highlight the new capabilities of the ESP32-S3 platform.\nCourse updated in July 2022\nWe updated this course so that all experiments work with the ESP32 Dev Kit v4 (based on the ESP32-WROOM-32E) and the ESP32 Arduino Core library 2.0.3.\nAll sketches and schematics have been tested and updated, links for external resources checked for validity, and several lecture videos were updated to reflect these development.\nThe updated course is tested to work with the ESP32 development kit version 4, ESP32 Arduino Core version 2.0.3, and the Arduino IDE 1.8.19.\nAbout this course\nThe ESP32 is a powerful microcontroller.\nIt integrates Wifi and Bluetooth, many GPIOs, analog input and output capabilities, many device interconnection protocols, a fast dual-core processor.\nAll that, at a low price.\nAnd best of all: you can use your existing Arduino knowledge and skill to turbo-charge your projects.\nEspecially if you have already learned how to use the Arduino Uno in your projects, it is likely that you have hit a hardware limitation.\nPerhaps your projects needed more memory, more speed, or more pins.\nWith the ESP32, you can get a lot more capacity to build more interesting projects, almost for free.\nHowever, the ESP32 is not a plug-in replacement for the Arduino.\nWhile it shares much of the Arduino’s programming and GPIO interface, you still need to learn the basics before you can deploy it.\nThis is the purpose of this course.\nIn this course you will learn:\nWhat is the ESP32.\nWhat are the various modules with that name, and how these modules are available to us in the form of development kits.\nWhat are the differences and similarities between the ESP32 and the Arduino.\nHow can we use what we know from the Arduino to make things based on the ESP32.\nHow can we use the ESP32 GPIOs to work with simple components like LEDs and buttons, but also to drive peripherals like displays, sensors (including the integrated ones) and motors.\nHow can we set up the familiar Arduino IDE so that we can write programs for the ESP32.\nHow to store data in non-volatile memory.\nHow to communicate with near field devices and the Internet.\nIn this course, I have also included numerous mini-projects to demonstrate how to use capabilities such as GPIO read and write, classic Bluetooth, Bluetooth Low Energy, Wifi, digital to analog conversion, touch sensors, and more.\nLarger projects will also show you how to create simple Internet of Things and Bluetooth applications, to name a few.\nIf you are ready to learn more, please be sure to watch the lectures in this introductory section to find our more.",
      "target_audience": [
        "People who are already making things with the Arduino and are looking for a more powerful microcontroller.",
        "People who want to use the ESP32 but are not sure how to start."
      ]
    },
    {
      "title": "Learn PLC basics EASY!",
      "url": "https://www.udemy.com/course/learn-plc-basics/",
      "bio": "Enter the world of industrial automation with this introductory course to Programmable Logic Controllers",
      "objectives": [
        "Understand and select a basic PLC hardware configuration in a typical industrial system",
        "Understand the basic software elements that a PLC uses in industrial automation",
        "Identify and select the best PLC programming language for an automation project.",
        "Master the basic elements that a PLC uses for digital control, including both discrete and analogue signals.",
        "Understand and identify the elementary elements of debugging and advanced control that a PLC uses for debugging and error prevention.",
        "Understand the basic 5S methodology and how to implement it in PLC programming for industrial automation."
      ],
      "course_content": {
        "Introduction - Why follow this course?": [
          "PLC for everyone??"
        ],
        "PLC? what is that?": [
          "Why PLC?",
          "To Program or not to Program?",
          "A little bit of history..."
        ],
        "Let's begin with PLC basics!": [
          "Hardware elementary...",
          "Software maze?",
          "Bits and Words!",
          "Word, bit, or what??"
        ],
        "Programming Languages": [
          "What is Ladder Diagram?",
          "What is Instruction List?",
          "What is Function Block Diagram?",
          "What is Structured Text?",
          "What is Sequential Function Chart?",
          "Choosing a PLC programming language..."
        ],
        "Conclusion - Systems Go!!": [
          "Following the 5S rule!!",
          "All Systems Go!!!"
        ]
      },
      "requirements": [
        "All you need is to be interested in Industrial Automation!"
      ],
      "description": "What you are going to learn within the next almost 2 hours of my course, which I really hope that you will enjoy, is to demystify the world of PLCs, by examining step by step the basic parts that comprise a modern Programmable Logic Controller.\nTo be more precise, we are going to start with a small glimpse of the birth of PLC, then we will take a look at the “heart” of a PLC, see what are the basic staff that a PLC is made of, and later on we will examine PLC’s mind, in order to “capture” the key elements inside PLC programming languages and IEC 61131-3 standard...\nFinally when we finish this course above all I hope that you will know what is neccessary to be able to start implementing a 5S methodology in PLC programming.\nWhat i have learned from all my years of experience is, that it doesn’t matter if you are an electrician, an academic, or an IT programmer…\nWhat really makes the difference is, having someone to show you the easiest way, on how to be clear and methodical….since after all “PLC is for everyone!!”",
      "target_audience": [
        "Maintenance engineers",
        "Engineering Students",
        "Engineers",
        "Technologists",
        "Technicians",
        "Electricians",
        "Industrial Users",
        "Students"
      ]
    },
    {
      "title": "Essentials of Advanced Radio Frequency IC Design",
      "url": "https://www.udemy.com/course/introduction-to-radio-frequency-integrated-circuit-design/",
      "bio": "Design your own RF circuit by conceptualizing the amazing concepts and enhancing great skills of RF circuit design.",
      "objectives": [
        "Get a brief overview of of what RF Design is all about and why it is so essential. You will get to know whether you should pursue a career in RF Design or not."
      ],
      "course_content": {
        "About Us": [
          "About Us",
          "General RF Electronics"
        ],
        "Introduction to RF": [
          "RFIC Design",
          "RFIC Design Flow Part I",
          "RFIC Design Flow Part II",
          "RFIC Design Flow"
        ],
        "RF Basics": [
          "RF Basics Part I",
          "RF Basics Part II",
          "RF Basics Part III",
          "RF Basics"
        ],
        "Radio Frequency Parameters": [
          "dB vs dBm",
          "dB vs dBm",
          "S-Parameters",
          "S-Parameters",
          "Smith Chart Basics"
        ],
        "VLSI and IC Design": [
          "Introduction to VLSI and IC Design",
          "Examples of ICs"
        ],
        "RF IC Fabrication and Foundries": [
          "IC Fabrication Part I",
          "IC Fabrication Part II",
          "IC Fabrication",
          "Foundry and PDK",
          "Foundry and PDKs"
        ],
        "CMOS and RF Design using CMOS": [
          "CMOS RF Design Modelling Part I",
          "CMOS RF Design Modelling Part II",
          "RF CMOS Design"
        ],
        "Power Amplifier (PA) Design": [
          "Power Amplifier Design Part I",
          "Power Amplifier Design Part II",
          "Power Amplifier Design Part III",
          "Power amplifier Design Part IV"
        ],
        "Low Noise Amplifiers": [
          "RFIC design - LNA design and tapeout process"
        ]
      },
      "requirements": [
        "The students do not need any software to learn this course, but if they are interested in taking more advanced courses related to learning design as a career , then he/she should install various tools like Cadence ,ADS tools, Mentor Graphics tools,etc for Design purposes. They need to be thorough with all electronics fundamental principles taught in 2nd and 3rd year of an Electronics Engineering Bachelor degree."
      ],
      "description": "In this course you will see the insights of the RF World! Let's briefly summarize what all you will learn in this course. We will start off with the Introduction to Radio Frequency and Integrated Circuits at wireless( RF) frequencies. We will also discuss the applications of RFICs at a system level.\nYou will initially learn about various RF parameters like S- parameters, VSWR, Reflection Coefficient, etc. and also understand the analysis of RF circuits and transmission lines using Smith Charts and Equations. Alongside, we will also teach you about some fundamentals like impedance matching and power measurement in decibels.\nWe will then glance through the captivating Integrated Circuit Fabrication process and the various steps, materials, and techniques involved in IC Fabrication. You will also learn about Foundries and PDKs and why they are important.\nWe will briefly look at the concept of VLSI Technology and how VLSI is associated with RFIC designing. Later, we will see the basics of CMOS and how CMOS is used in RF Design. Finally, you will learn about some interesting circuit designs like the RF Power Amplifier (PA) and the various RF power amplifier architectures and topologies.\nThis course will enhance your knowledge about Radio Frequency Design which is applied in most of the jobs available in top Wireless and Telecommunication based companies designing wireless products.\nWe hope you enjoy this course!!!",
      "target_audience": [
        "Those students who are thorough with Electronics concepts taught in an Electronics/Electrical/Electronics and Telecommunication Engineering Course/Degree."
      ]
    },
    {
      "title": "Short Circuit Repairs in Laptop Motherboards",
      "url": "https://www.udemy.com/course/master-the-art-of-short-circuit-repair-in-laptop-motherboard/",
      "bio": "This is the course that will teach you how to troubleshoot and fix short circuit problems in laptop motherboards",
      "objectives": [
        "After completing this course, you will be able to use a multimeter to identify and repair short circuit issues on laptop motherboards.",
        "In this course, you will learn how to fix laptops that turn off the charger light when plugged in, as well as laptops that turn on and then off with no display.",
        "Upon completing this course, you will be proficient in using advanced techniques such as voltage injection, isolation, and observation to fix short circuits in",
        "Learn advanced techniques for using a DC power supply to fix motherboard components that cause beeping sounds.",
        "In this course, you will learn how to use your knowledge of schematics to test and fix short circuit chips or ICs on the motherboard",
        "Enroll in this course to become skilled at fixing short circuits on laptop motherboards and stand out as a valuable technician"
      ],
      "course_content": {
        "How to Check and Repair Short Circuit Issues in Laptop Motherboards": [
          "What is a Short Circuit?",
          "Types of Short Circuits",
          "Signs and Symptoms of Short Circuits in Laptops",
          "Why Do Capacitors Around the CPU Always Seem Short to Ground",
          "What Causes Short Circuits in Laptop Motherboards?",
          "Tools We Use in Short Circuit Repair"
        ],
        "Methods Used in Diagnosing and Fixing Short Circuits": [
          "Welcome to Section 2 of this Course",
          "Practical Guide to Repairing a Short Circuit in an HP 430 G7 10th Gen Laptop",
          "How to Use Observation Method While Diagnosing Short Circuit Motherboards",
          "Introduction to Multimeter and Its Role in Short Circuit Repair",
          "How to Use a Multimeter to Diagnose Short Circuit Starting From the Power Jack",
          "How to Check Short Circuit Power Supplies and Capacitors Using a Multimeter",
          "How to Use Resistance Mode to Check for Short Circuits on the Motherboard",
          "How to Check Short Circuit Resistors Using Resistance in Multimeter",
          "How to Use Voltage Injection Method and Power Supply to Fix Short Circuits",
          "Using Isolation Method to Identify Short Circuit Sections on the Motherboard",
          "How to Check Short Circuit Chips (ICs) on the Motherboard"
        ]
      },
      "requirements": [
        "While it is not required, it may be beneficial to have a multimeter on hand to use while working through this course.",
        "In addition to a multimeter, you will also need a laptop or motherboard for practicing in order to fully understand the concepts presented in this course."
      ],
      "description": "Welcome to the laptop short circuit repair course! My name is Chaz, and I'll be your instructor for this course.\nThis course is designed to share with you the knowledge and tricks I've gained over the years,  In this course, you'll learn how to apply different methods, such as:-\nIsolation\nvoltage injection\nResistance Measuring\nContinuity Measuring\nObservation\nto quickly identify short components on the motherboard.\nYou'll also learn how to use tools like:-\nMultimeter,\nPower supply\nUSB current meter\nThermal Camera\nto diagnose and fix motherboards.\nAdditionally, you'll learn the\nSigns\nSymptoms\nand Behaviors E.t.c\nthat can help you identify short circuits in laptops even before opening their housing.\nYou will also learn how to diagnose short circuit components like:-\nMOSFETs\nCapacitors\nTransistors\nProcessor E.t.c\nIn this course, you'll also find a video of me troubleshooting and repairing a short circuit HP 430 G7 10th Gen laptop live on camera. This video will show you how to apply this knowledge step by step in real life.\nThis course is divided into two sections: section one covers theory and section two covers hands-on practicals. If you've watched my schematics course, this class will help you understand how to use your schematics knowledge to test and fix short circuit chips or ICs on the motherboard.\nI've also included a free downloadable PDF document that explains the steps, tools, and tricks you need to fix different laptop brands, including MacBooks. There is a lot of useful information in this course, and I can't cover it all in writing. If you've been struggling to fix laptops, or you just want to fix your own or start a computer business, this is the right course for you. I encourage you to enroll in this course and see how this knowledge will change your life.\nI hope to see you in class!",
      "target_audience": [
        "This course is designed for laptop technicians who want to master the skills needed to fix short circuits on laptop motherboards",
        "This course is ideal for individuals who want to learn how to fix their laptops, especially those with short circuit issues.",
        "Enhance your skills as an IT technician by learning how to diagnose and fix laptop motherboards with this course.",
        "This course is ideal for individuals who want to start a computer business or seek employment as computer technicians."
      ]
    },
    {
      "title": "Connect and Interface Raspberry Pi with Arduino",
      "url": "https://www.udemy.com/course/raspberry-pi-with-arduino-connect-and-interface-/",
      "bio": "In this Course you will learn how to connect Raspberry Pi and Arduino the software and hardware part and why it's useful",
      "objectives": [
        "Link Arduino with Raspberry Pi",
        "Protect Your Raspberry Pi using Arduino as Interface between Raspberry and heavy devices"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Introduction",
          "Planning Raspberry Pi and Arduino Integration",
          "Very Important Note: Review Process",
          "Course Overview and Initial Setup"
        ],
        "Raspberry Pi": [
          "Raspberry Pi Connections",
          "Raspberry Pi Configuration and Code",
          "Quiz",
          "Configuring and Coding the Raspberry Pi"
        ],
        "Arduino": [
          "Arduino Configuration",
          "Setting Up the Arduino"
        ],
        "Arduino & Raspberry Pi": [
          "Arduino Raspberry Pi Connection",
          "Connecting the Arduino and Raspberry Pi"
        ],
        "Finishing Up": [
          "Finishing Configuration",
          "Completing Python Setup",
          "Quiz"
        ],
        "The End": [
          "Final Step The End"
        ],
        "Practice Test": [
          "Raspberry Pi and Arduino Practice Test"
        ],
        "Who we are?": [
          "Who We Are?"
        ],
        "Course Project": [
          "Course Project",
          "System Demo:Integrated Raspberry Pi and Arduino Project"
        ],
        "Course Wrap-Up": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic experience in Electronics",
        "A Will to apply, not just watch",
        "Basic experience in Arduino",
        "Basic experience in Raspberry Pi"
      ],
      "description": ">>> In this Course you will learn how to connect Raspberry Pi and Arduino the software and hardware part and why it's useful <<<\nWhy you should take this course?\nLearn how to connect Raspberry Pi and Arduino software and hardware\nLearn the pros and cons of using this interface\nReceive a certificate of completion upon successful completion\nLearn about the benefits of using Raspberry Pi and Arduino together\nTest your knowledge with quizzes throughout the course\nContinual Updates <<<\nWelcome to this course.\nThis tutorial shows you how to connect Arduino Board with Raspberry Pi. It will take you step by step to know why this is helpful and how it can make your life much easier and save you lots of money.\nYou will know the actual hardware and software configurations needed to make this interfacing work smoothly. You will no longer see your Raspberry Pi damaged or burned by excessive voltage or power source failure. Your Raspberry Pi will work like a mini computer, away from the hardware connection that could damage it.\nAfter this course, you will be able to make your own interfacing and use it in any application that comes to mind since all connections and configurations are explained in detail.\nAbout the Instructor\nEducational Engineering Team\nTeam of skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading team in the Microcontroller Industry, with over 13 Years of Experience in teaching and doing practical projects.\nWe strive to put all our hands-on experience into these courses. Instead of superficial knowledge, we go into the depth of the topic and give you the exact step-by-step blueprint on how to tame simple as well as complex topics in easy and digestible bite-sized videos.\nThis real-world knowledge enables you to grasp knowledge easily, and you can apply this learning immediately to your life and projects.\nEducational Engineering Team has been in the Programming and Microcontroller business since 2007. We have been part of many projects. Over the years, we have gained a good insight into students’ and educators’ needs. We are passionate about sharing all our collective knowledge with you. As of 2018, we have already taught over 250k-THOUSAND students and counting.\nCurrently, we have more than 100+ courses on Udemy.\nEducator and Author of \"Educational Engineering\".\nAshraf is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More Than 4 Million Views, 20k + Subscribers) and is the author of four Microcontroller books.\nAs a Chief Educational Engineer since 2007 at Educational Engineering Team, the company he founded, Ashraf’s mission is to explore new trends and technology and help educate the world and make it a better place.\nEducational Engineering offers educational courses and Bootcamps, articles, lessons, and online support for electronics hobbyists, Programming hobbyists, Microcontroller hobbyists, STEM students, and STEM teachers.\nThat team also works as freelancer engineers, helping many students in their graduation projects, and providing guidance and consulting for many students over the years to help them kick-start their careers.\nAshraf’s core skill is explaining difficult concepts in a step-by-step easy-to-understand manner using video and text. With over 11 years of tertiary teaching experience, Ashraf has developed a simple yet comprehensive and informative style in teaching that students from all around the world appreciate.\nHis passion for Microcontrollers and Programming, in particular for the world of Arduino, PIC Microcontroller, and Raspberry Pi, has guided his personal development and his work through Educational Engineering.\nAshraf’s online courses have helped over 250,000 people from around the world to be better and to make a great career in the industry.\nEducational Engineering Team offers courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World\nWhat you will learn\nHow to connect Raspberry Pi and Arduino hardware.\nHow to configure software for seamless interfacing.\nPros and cons of using Raspberry Pi and Arduino together.\nDetailed steps to avoid damaging your Raspberry Pi.\nPractical applications of interfacing Raspberry Pi with Arduino.\nTroubleshooting common issues in interfacing.\nWho is this course for\nElectronics and programming enthusiasts.\nStudents and professionals looking to expand their skills.\nHobbyists interested in Raspberry Pi and Arduino projects.\nAnyone interested in practical applications of microcontrollers.\nRequirements\nBasic knowledge of electronics and programming.\nA computer with internet access.\nA Raspberry Pi and Arduino board with necessary components.\nEnthusiasm to learn and build.",
      "target_audience": [
        "Electronics Geeks",
        "Arduino Geeks",
        "Raspberry Pi Geeks",
        "Anyone Interested in Learning New Things about Arduino",
        "Anyone Interested in Learning New Things about Raspberry Pi",
        "Anyone Interested in Learning How to protect Raspberry Pi using Arduino"
      ]
    },
    {
      "title": "Learn Verilog with Xilinx VIVADO Tool",
      "url": "https://www.udemy.com/course/learn-verilog-programming-with-vivado-design-suit/",
      "bio": "Learn Verilog Programming from top to bottom with Xilinx VIVADO Design Suite for FPGA Development",
      "objectives": [
        "Learn and understand about Verilog Programming Language",
        "Verilog Design Flow and its Syntax/Semantics",
        "Creating Basic Logic Gates in Verilog",
        "VIVADO Design Flow for FPGA Design with Verilog",
        "Understand Conditional Statement in Verilog",
        "Combinational and Sequential Circuit Design with Verilog",
        "Finite State Machine Design with Verilog",
        "Structural Modeling/Design with Verilog"
      ],
      "course_content": {
        "Introduction and Basic Design with Verilog and VIVADO": [
          "Section 1a Introduction to Verilog and Basic Design with Verilog",
          "Section 1b Introduction to Verilog and Basic Design with Verilog",
          "How to Download, Install VIVADO & Get 30 Day Evaluation License",
          "Section 1 Lab 1 Basic Logic Gate Design with VIVADO in Verilog",
          "Section 1_0 How to Add Zybo Board Files in VIVADO [Optional]"
        ],
        "Simulation with Verilog Testbench": [
          "Section 2 Simulation with Verilog and Testbench Introduction",
          "Section 2 Lab 1 Design Simulation of AND OR Gate"
        ],
        "Section 3 Conditional Statement in Verilog": [
          "Section 3 Conditional Statement in Verilog Overview",
          "Section 3 Lab 1 MUX 4:1 Design and Simulation"
        ],
        "Section 4 Combinational Circuit Design with Verilog": [
          "Section 4 Combinational Circuit Design with Verilog"
        ],
        "Section 5 Sequential Circuit Design": [
          "Section 5 Sequential Circuit Design with Verilog"
        ],
        "Section 6 Structural Design with Verilog": [
          "Section 6 Structural Design with Verilog I",
          "Section 6 Structural Design with Verilog II"
        ],
        "8 bit ALU Design and Simulation on Verilog with Xilinx VIVADO": [
          "8 bit ALU Design and Simulation on Verilog with Xilinx VIVADO"
        ],
        "Verilog Reference Guide (From Basics to Advance Verilog Design)": [
          "Reference Guide of Verilog"
        ],
        "Summary: Verilog Programming": [
          "Lexical Conventions in Verilog",
          "Verilog Data Types, Directives and Dataflow Modeling",
          "Procedural Assignments in Verilog"
        ],
        "Conclusion": [
          "What Next?",
          "Books and Reference Links"
        ]
      },
      "requirements": [
        "Basics of Programming Language (C/C++ or any)",
        "Basic Idea of Digital Design",
        "We introduce Verilog from Very Basics so you don't need to Worry about Prerequisites!!!"
      ],
      "description": ">>>This Course is crash course on Verilog Programming from Top to Bottom with Xilinx VIVADO Design suite<<<\nVerilog is dominant Hardware Description Language or HDL for FPGA/ASIC/VLSI Design and Verification Market globally. It has around 50% of market share in global market . So getting idea of Verilog programming will be the plus point in your Resume for Job Application.\nIn this course we have introduced Verilog Programming in very simple manner so beginner who don't have any idea can get Verilog HDL idea from scratch to intermediate level.\nWe have Sections on Introduction and Basic Design with Verilog Programming, Simulation with Verilog and Creating Verilog Testbench, Conditional Statement in Verilog, Combinational Circuit Design with Verilog, Sequential Circuit Design with Verilog, Finite State Machine (FSM) Design and Structural Modeling with Verilog. All the Sections have Lab sessions which will done on VIVADO Design Suite.\nVIVADO is State of Art FPGA Design environment from Xilinx which have great features of Designing HDL Projects, Synthesizing, Implementing the HDL Project and Generating Bitstream as well as Configuring the Project on FPGA. VIVADO has awesome features on Design/Resources Optimization, Static Timing Analysis and Performance Optimization etc.\nSo, having knowledge with Verilog and VIVADO take to you for best of best opportunities. Hurry Up and Join the Course!",
      "target_audience": [
        "Electrical Engineering",
        "Computer Science",
        "FPGA Design Enthusiast",
        "Computer Engineering",
        "Electrical and Electronics Engineering"
      ]
    },
    {
      "title": "Cluster Pi: Build a Raspberry Pi Beowulf cluster",
      "url": "https://www.udemy.com/course/raspberry-pi-beowulf-cluster/",
      "bio": "Construct a simple supercomputer using the popular $35 Raspberry Pi.",
      "objectives": [
        "Build a Beowulf cluster from Raspberry Pi minicomputers"
      ],
      "course_content": {},
      "requirements": [
        "At least three Raspberry Pi minicomputers",
        "A network switch",
        "One Ethernet cable per Raspberry Pi"
      ],
      "description": "Parallel computing - cheap!\n\nAs computer processors approach their limits in both size and speed, it has become apparent that further advances in computational power will require parallel programming, with many processors networked together and attacking large problems in chunks.\nAlthough supercomputers are far outside of the price range of the normal hobbyist, cheaper minicomputers like the Raspberry Pi can be networked together in the same way to allow hobbyists and experimenters to learn about this powerful form of programming.\nContents of the course\n\nThis course takes you through the process of using some simple hardware and open-source software to construct a parallel-networked cluster, ready to attack larger computational problems. You'll learn:\nThe history of supercomputing\nWhat parallel programming is\nCommon software used and how to install it on a Raspberry Pi\nConnecting and testing the final cluster\nIt's a great introduction to parallel programming, and after only a few lectures you'll have a working Beowulf cluster, based on the inexpensive Raspberry Pi minicomputer. The lectures are entirely video-based, along with included PDFs, example configuration files, and parts lists.\nWhen you're done with this course, you'll have a suite of new skills that can easily be applied to clusters constructed from more powerful machines. It's a great, inexpensive intro to parallel computing!",
      "target_audience": [
        "This course is meant to introduce the concept of networking individual computers and processors together to parallelize computations and increase computational speed and power. Some familiarity with Linux is helpful, but not required.",
        "May not be suitable for absolute beginners to the Pi"
      ]
    },
    {
      "title": "IT Asset Management (ITAM)— Hardware Asset Management",
      "url": "https://www.udemy.com/course/it-asset-management-itam-hardware-asset-management/",
      "bio": "Learn IT Asset Management (ITAM) — Hardware Asset Management From Basics To Advanced",
      "objectives": [
        "Introduction to IT Asset Management",
        "Benefits of IT Asset Management",
        "Need of ITAM",
        "Policy, Process, and Procedure",
        "Types of ITAM",
        "Definition, and Explanation of HAM",
        "Scope of HAM",
        "Device Management Responsibility",
        "Discovery Of Assets & Tracking Hardware And Software Metrics",
        "Keep track of all IT assets throughout their lifecycle & Tracking IT assets usage",
        "Equipment Loan Tracking",
        "Asset tracking",
        "Asset access tracking",
        "Taking Charge of Warranties & Software Licenses Management",
        "IT Asset Tagging",
        "GPS tracking",
        "Service Catalogue In IT Assets",
        "Configuration Management Database (CMDB) and Consumable Management",
        "Asset Life Cycle Management",
        "Stages Of Asset Life Cycle",
        "A Quick Review of HAM Customization",
        "HAM Security",
        "Relationship between software asset management and hardware asset management"
      ],
      "course_content": {
        "Introduction to IT Asset Management": [
          "Short Introduction To Course",
          "Introduction to IT Asset Management",
          "Important Tips For This Course!!",
          "Benefits of IT Asset Management",
          "Need of ITAM",
          "Policy, Process, and Procedure",
          "Types of ITAM",
          "Assignment",
          "Quiz"
        ],
        "Introduction to IT Hardware Asset Management": [
          "Definition, and Explanation of HAM",
          "Scope of HAM",
          "Device Management Responsibility",
          "Assignment",
          "Quiz"
        ],
        "ITAM Processes": [
          "Discovery Of Assets & Tracking Hardware And Software Metrics",
          "Keep track of all IT assets throughout their lifecycle, Tracking IT assets usage",
          "Equipment Loan Tracking, Asset tracking, & Asset access tracking",
          "Taking Charge of Warranties & Software Licenses Management",
          "IT Asset Tagging",
          "GPS tracking",
          "Service catalogue in IT assets",
          "Configuration Management Database and Consumable Management",
          "Quiz",
          "Assignment"
        ],
        "Asset Life Cycle Management": [
          "What is Asset Lifecycle Management?",
          "Stages Of Asset Life Cycle",
          "Planning",
          "Acquisition",
          "Deployment",
          "Operations",
          "Maintenance",
          "Disposal",
          "Benefits of Asset Lifecycle Management",
          "Quiz"
        ],
        "A Quick Review of HAM Customization": [
          "A Quick Review of HAM Customization",
          "Assignment"
        ],
        "HAM Security": [
          "Protecting Your Computer Assets",
          "Best practices in HAM",
          "IT Asset Management Security vs Cybersecurity Asset Management (Case Study)",
          "Cyber Security Asset Management Concerns",
          "IT Asset Management Vs. Cyber Security Asset Management",
          "Quiz"
        ],
        "Relationship Between Software Asset Management and Hardware Asset Management": [
          "Relationship Between Hardware Asset Management- Similarities",
          "Differences",
          "Assignment"
        ],
        "Extras!": [
          "Bonus lecture"
        ],
        "Preview of software asset management course": [
          "Promo",
          "Introduction to Software Asset Management",
          "Key Software Asset Management Terminologies",
          "First Steps of Implementing Software Asset Management (SAM)",
          "Software Asset Management Roadmap",
          "Benefits of Software Asset Management",
          "Software Asset Management Lifecycle"
        ],
        "Preview of Enterprise Risk Management": [
          "Promo",
          "Course Introduction",
          "Introduction To Risk Management",
          "Understand What Exactly is Meant By The Term 'Risk'",
          "Comparison of 'Risk' and 'Issue'",
          "Risk Appetite and Risk Tolerance (Differences and Similarities)",
          "Definition of Risk Management",
          "8 Principles of Risk Management from ISO 31000:2018",
          "Benefits and Application of Risk Management"
        ]
      },
      "requirements": [
        "There Are No Requirements Necessary To Enroll. I Only Ask To Come Open-Minded And Ready To Learn."
      ],
      "description": "Hello and Welcome to the Hardware Asset Management (HAM) Course.\nIn this course, you will learn everything about Hardware asset management, its importance, and its role, in today's emerging world. This course is ideal for beginners and IT professionals who are interested in exploring the hardware asset management world.\nHere at Magine Solutions, highly experienced instructors, engineers, and doctors with more than ten years of experience in the industry will guide you through very high-quality online courses.\nAt the end of this course, you will be able to understand\nWhat is IT asset management\nBenefits of ITAM\nNeed for ITAM\nPolicies, processes, and procedures\nTypes of ITAM\nIts Definition and scope\nDevice management responsibility\nITAM processes like\nDiscovery of assets\nTracking\nLicense management\nAsset tagging and many more\nConfiguration management database (CMDB)\nHAM customization\nHAM security\nRelationship between HAM and SAM\nand much more\nWe will also learn to understand these concepts by looking at case studies to strengthen the theoretical concepts.\nThe ideal student for this course is anyone who wants to learn about hardware asset management or an existing professional who wishes to expand on their current skills.\nThis course will also help out the personnel in the corporate sector who are intending to monitor risk reduction, audits and looking for a cost-effective and efficient return of investment, ultimately wanting to increase profit.\nThere are no requirements necessary to enroll. I only ask to come open-minded and ready to learn.\nFeel free to look at the course description, and I look forward to seeing you inside. Thank you.",
      "target_audience": [
        "The Ideal Student For This Course Is Anyone Who Wants To Learn About 'Hardware Asset Management' Or An Existing Professional Who Wants To Expand On Their Current Skills."
      ]
    },
    {
      "title": "The Complete PLC Software/Hardware full Automation Bootcamp",
      "url": "https://www.udemy.com/course/complete-plc-classic-control-softwarehardware-designs/",
      "bio": "Hands on PLC |Automation controlling systems using Ladder Logic RSLogix,Siemens TIA Portal,PLC Logixpro,FactoryI/O",
      "objectives": [
        "Design complete PLC ladder codes using Siemens TIA Portal , RSLogix500 , LogixPro",
        "Design the different automation controlling circuit using switches , Relays , Contactors timers & circuit breakers",
        "Implement factoryI/O sorting by height PLC automation system (COURSE PROJECT)",
        "Implement the 2 out of 4 Automatic Transfer Switch( ATS) (COURSE PROJECT)",
        "Learn about the PLC analog and digital signals and how to control each of them",
        "Design the PLC temperature controlling system using Lm35 temp. sensor (software/hardware design)",
        "Design the PLC temperature controlling system using PT100 temp. sensor (software/hardware design)",
        "Design the PLC S7-1200 analog input ladder codes",
        "Implement the Siemens S7-1200 PLC hardware wiring & configuration",
        "Design the PLC Start/Stop controlling system (software/hardware design)",
        "Implement the PLC industrial fans interlocking system (software/hardware design)",
        "Implement the PLC industrial fans one-way automation system (software/hardware design)",
        "Design the Door Automation system PLC design on Logixpro",
        "Design the Silo Automation system PLC design on Logixpro",
        "Get your hands on the basic & advanced Allen-Bradley PLC programming on RSLogix500 & logixpro simulator",
        "Get your hands on the basic & advanced Siemens PLC programming on TIA Portal & PLCSIM simulator",
        "Implement the industrial fans sequential operation PLC automation system (software/hardware design)",
        "Implement the industrial fans closed loop PLC automation system (software/hardware design)",
        "Implement the single bush button start/stop PLC automation system (software/hardware design)",
        "Learn about the different types of proximity sensors (software/hardware design)",
        "designs classic controlling system on EKTS software",
        "Design the Start/Stop classic controlling system (software/hardware design)",
        "Design the Three phase induction motor direction controlling system (software/hardware design)",
        "Design the dahlander motor controlling system",
        "Design the start/Delta classic controlling system (software/hardware design)",
        "Understand the working operation of different types of classic controlling timers TON ,TOF , TOR",
        "Implement the optimized Star/Delta classic controlling system (software/hardware design)",
        "Design the motors Closed loop controlling system (software/hardware design)",
        "Design the motors one way controlling system (software/hardware design)",
        "Implement the optimized Forward/Reverse classic controlling system (software/hardware design)"
      ],
      "course_content": {},
      "requirements": [
        "computer !",
        "passion to learn !"
      ],
      "description": "here you will start from scratch practicing  PLC programming & controlling software designs to be more confident with\nyour PLC experience and skills.\n\"PLC , Automation controlling systems are one of the most important system for\nany industrial system or factory \".\nHello there,\nIf the word 'PLC' baffles your mind and you want to master it, then this is for you.\nIf you want to start your career in PLC and classic controlling systems design and make money from it, then is for you.\nIf you want to learn how to design PLC automation system for any Project, then this course is for you.\nIf you get bored of the word 'this course is for you', then this course is for you.\nif you love the controlling engineering.\n\n\nWell, PLC and classing controlling systems are becoming  widely-used words on everybody's tongue, and this is reasonable as most the buildings and industrial systems and factories must include the PLC for automation and classic controlling systems .\nSo we introduce to you the \"Complete PLC & classic control (software/hardware) designs\" course that you need in order to get your hand on the PLC and Automation design as this course collects most of the knowledge that you'll need in your journey.\nWe believe that the brain loves to keep the information that it finds applicable, and that's what we're doing here in UNITED ENGINEERING, we give you years of practice from our instructor that have been gathered in just one an interesting dose.\n\n\nOur course is structured as follows:\n\n\nDiscuss the different types of controlling switches (software/hardware) design .\nDiscuss the different types of controlling Relays (software/hardware) design.\nDiscuss the different types of controlling Contactors (software/hardware)design.\nLearn about the Overcurrent relays.\nLearn about the different kinds of circuit breakers.\nLearn about the PLC programming fundamental.\nImplement the PLC start stop controlling system(software/hardware) design.\nDesign the Siemens S7-1200 PLC configuration, wiring & programming on TIA Portal.\nDesign the industrial fans interlocking PLC automation system (software/hardware) design.\nDesign the industrial fans One-way PLC automation system (software/hardware) design.\nImplement the Door PLC automation system on Logixpro simulator.\nImplement the Silo PLC automation system on Logixpro simulator.\nLearn about the Allen-Bradley PLC timers.\nDesign the industrial fans sequential operation PLC automation system (software/hardware) design.\nLearn about the Allen-Bradley PLC counters.\nDesign the single pushbutton Start/Stop PLC project (software/hardware)design.\nDiscuss the different types of proximity sensors(software/hardware)design.\nDiscuss the PLC analog signals controlling fundamentals & hardware applications.\nDesign the PLC temperature controlling system using Lm35 temp. sensor (software/hardware) design.\nDesign the PLC temperature controlling system using the RTD PT100 temp. sensor (software/hardware )design.\nLearn the Allen-Bradley advanced PLC programming with RSLogix500.\nLearn the Siemens advanced PLC programming with TIA portal.\nImplement the \"advanced sorting by height\" Factory I/O PLC automation system (first course project ).\nDesign the Start/stop classic controlling system (software/hardware) design.\nDesign the Three phase induction motor direction controlling system.\nImplement the Star/delta classic controlling system (software/hardware) design.\nLearn about the Dahlader motor Classic controlling system.\nLean about the timers in classic controlling systems (software/hardware) design.\nOptimize the star/Delta classic controlling system (software/hardware) design.\nDesign the motors closed loop classic controlling system(software/hardware) design.\nDesign the motors one way controlling system(software/hardware) design.\nOptimize the Forward/Reverse classic controlling system (software/hardware) design.\nImplement the 2 out of 4 ATS (automatic transfer switch) controlling system (second course project ).\n\n\n** At this course :\nThese tracks would be like a piece of cake to you.\n\nYou will start practicing yourself by solving excrescences and coding assignments to get your hands on PLC programing and\nreal world projects implementation.\nWe'll take you from the Scratch of Designing and Analysis.\nYou'll learn with practical exciting method in order to understand without being bored.\nAll you need is an open mind and the passion to be successful!\n\n\n** Our help in United Engineering is always available to you if you get stuck or have a question - our support is legendary in Udemy\n--> So don't hesitate and click \" Buy Now \" button so you can begin on the right path!",
      "target_audience": [
        "Anyone who wants to learn and practice PLC and different Automation controlling systems & designs from scratch to the advanced level",
        "Electrical ,Controlling ,Electronics engineers",
        "maintenance engineers",
        "Industrial , production engineers",
        "PLC programmers",
        "electrical technicians",
        "Automation systems designers"
      ]
    },
    {
      "title": "Arduino Bluetooth Low Energy (BLE) From Ground Up™",
      "url": "https://www.udemy.com/course/arduino-bluetooth-low-energy-ble-from-ground-uptm/",
      "bio": "Build BLE Projects from scratch with Arduino",
      "objectives": [
        "Build Bluetooth Low Energy (BLE) firmware for different use cases",
        "Create your own Services and Characteristics",
        "Understand the complete BLE stack",
        "Build Bluetooth Low Energy embedded devices"
      ],
      "course_content": {
        "Introduction": [
          "The Board required for this course",
          "Downloading and Installing the Arduino IDE",
          "Installing the required packages",
          "Installing the LightBlue application",
          "Getting the most out of this course"
        ],
        "Introduction to Bluetooth Low Energy (BLE)": [
          "What is Bluetooth Low Energy (BLE) ?",
          "The Bluetooth Low Energy Stack and Stack Splits"
        ],
        "The Bluetooth Low Energy (BLE) Architecture": [
          "Overview of the Physical Layer (PHY)",
          "Overview of the Link Layer (LL)",
          "Understanding the Link Layer Packets",
          "Overview of the Host Controller Interface (HCI) Layer",
          "Overview of the Logical Link Control and Adaptation Protocol(L2CAP) Layer",
          "Key Features of Bluetooth Low Energy (BLE) 5"
        ],
        "The Generic Access Profile (GAP)": [
          "Overview of the Generic Access Profile (GAP)",
          "Advertising States, Scan Request and Response",
          "Understanding Advertising Events",
          "Understanding Advertising and Scanning Parameters",
          "Connection and Broadcasting",
          "Understanding Modes and Procedures"
        ],
        "The Attribute Protocol (ATT)": [
          "Overview of the Attribute Protocol",
          "Analyzing the parts of an Attribute"
        ],
        "The Generic Attribute Profile (GATT)": [
          "Overview of the Generic Attribute Profile (GATT)",
          "The Mandatory GAP Service Implemented on all GATT Servers"
        ],
        "Developing Bluetooth Low Energy (BLE) Firmware with Arduino Nano Ble 33": [
          "Coding : Creating a Service",
          "Coding : Creating a Characteristic",
          "Coding : Creating a Custom Service and Characteristic",
          "Coding : Creating Multiple Services and Characteristics",
          "Coding : Sending Data to the Client",
          "Coding : Developing a BLE RxTx Chat Application",
          "Coding : Sensor Values to Client",
          "Coding : Using Event Handlers"
        ],
        "Bluetooth Low Energy (BLE) Security": [
          "Some Bluetooth Low Energy Security concepts"
        ],
        "Closing": [
          "Closing Remarks"
        ]
      },
      "requirements": [
        "No prior knowledge is required. I will teach you everything from scratch.",
        "Arduino Nano Ble 33"
      ],
      "description": "Welcome to the Arduino  Bluetooth Low Energy (BLE)  From  Ground Up™  course.\n\n\nThis practical Bluetooth Low Energy (BLE) course will provide you with a solid in-depth training to be able to build BLE embedded devices and use them to communicate with other smart devices and mobile phone app. This course aims to provide a solid practical understanding of Bluetooth Low Energy: the protocol, how data is organized, and the key design trade-offs that were made in the creation of the protocol.\nBy the end of this course you should be able to build your own BLE enabled embedded devices and give a lecture on the BLE protocol.\n\n\nREMEMBER : I have no doubt you will love this course. Also it comes with a  FULL money back guarantee for 30 days!  So put simply, you really have nothing to loose and everything to gain.\nSign up and lets start transmitting some packets.\n\n\n-------------------Some highlights----------------------\nBuild Bluetooth Low Energy (BLE)  firmware for different use cases\nUnderstand the Bluetooth Low Energy (BLE)  Stack\nCreate your own Services and Characteristics\nBuild Bluetooth Low Energy Embedded Devices\n------\nNo prior knowledge is required. I will teach you everything from scratch.\n------\nIf you are thinking about developing a product that incorporates Bluetooth Low Energy then take this course.\nIf you are an embedded engineer who wants to create Bluetooth Low Energy (BLE) firmware then take this course.\nIf you just want to learn how to code and build BLE devices then take this course.\n-------",
      "target_audience": [
        "If you are thinking about developing a product that incorporates Bluetooth Low Energy then take this course.",
        "If you are an embedded engineer who wants to create Bluetooth Low Energy (BLE) firmware then take this course.",
        "If you just want to learn how to code and build BLE devices then take this course."
      ]
    },
    {
      "title": "ARM Raspberry Pi Assembly Language From Ground Up™",
      "url": "https://www.udemy.com/course/arm-raspberry-pi-assembly-programming-from-ground-uptm/",
      "bio": "Practical Assembly Programming on the Raspberry Pi",
      "objectives": [
        "Master the ARM Instruction Set",
        "Master the Thumb and Thumb-2 Instruction Sets",
        "Master writing Hardware Peripheral Drivers in Assembly for the Raspberry Pi",
        "Be able to Create, Assemble, Link and Debug Assembly programs in the Raspberry Pi terminal.",
        "Be create able to Create and Debug Assembly programs using Codeblocks on Raspberry Pi",
        "Understand RISC Architecture",
        "Master creating Data Structures in Assembly",
        "Master creating State Machines in Assembly",
        "Master building complex Algorithms in Assembly",
        "Be able to create Lookup Tables and Jump Tables in Assembly",
        "Be able to understand and apply the IEEE- 754 Floating point standard"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Introduction to ARM Assembly Language": [
          "The Computing Device",
          "Number Systems",
          "Assembly Tools",
          "Translating Bits to Commands",
          "Assembly Syntax"
        ],
        "ARM Design Philosophy and RISC Architecture": [
          "The RISC Design Philosophy",
          "The ARM Design Philosophy",
          "Embedded Systems with ARM Processors",
          "ARM Bus Technology and AMBA Bus Protocol",
          "Memory",
          "Peripherals",
          "Von Neumann and Harvard architecture",
          "Cache and Tightly Couple Memory",
          "Memory Management extensions",
          "Coprocessor extensions"
        ],
        "Set up": [
          "Remotely accessing your Raspberry Pi by SSH",
          "Remotely accessing your Raspberry Pi by Remote Desktop Connection",
          "Installing CodeBlocks IDE on Raspberry Pi"
        ],
        "The Programmer's Model": [
          "Data Types",
          "ARM7TDMI Registers",
          "ARM Cortex-M Registers",
          "ARM Data Flow Model",
          "The Pipeline",
          "ARM Processor Family",
          "ARM Cortex-A and Cortex-R",
          "ARM Cortex-M",
          "Section Summary"
        ],
        "Assembler Rules and Directives": [
          "Structure of an Assembly Module",
          "The ARM,Thumb and Thumb-2 Instruction Sets",
          "Predefined Register Names",
          "Frequently used Directives",
          "GCC ARM Assembly Directives",
          "Difference between Raspberry Pi Assembly code and Kiel ARM Assembly code",
          "How to Assemble,Link and Run with Raspberry Pi Terminal",
          "Debugging with GDB",
          "Coding : Allocating space in memory with the SPACE Directive",
          "Overview of Binary Operators",
          "Coding : Swapping Register Content",
          "Coding : Renaming Registers"
        ],
        "Assemble,Link & Run in Raspberry Pi Terminal": [
          "Coding : Creating an Assembly program with the Raspberry Pi Terminal",
          "Coding : Debugging an Assembly program with the Raspberry Pi Terminal"
        ],
        "Load-Store Instructions": [
          "Memory Demarcations",
          "Frequently used Load/Store Instructions (Part I)",
          "Frequently used Load/Store Instructions (Part II)",
          "Frequently used Load/Store Instructions (Part III)",
          "Pre-Indexed Addressing",
          "Post-Indexed Addressing",
          "Endianness",
          "Defining Memory Areas"
        ],
        "Dealing with Constants and Literals": [
          "The Encoding of the MOV Instruction",
          "The ARM Rotation Scheme",
          "Loading Constants with the LDR Instruction",
          "Loading Constants with the MOVW and MOVT Instructions",
          "Loading Labels with ADR, ADRL and LDR Instructions",
          "Coding : Solving a Simple Equation Method 1",
          "Coding : Solving a Simple Equation Method 2 - Storing Constants in Memory",
          "Coding : Solving a Simple Equation Method 3 - Using Register Relative Addressing",
          "Coding : Solving a Simple Equation Method 4 - Compact Code",
          "Coding : Cleaning up your project",
          "Coding : Adding files to your project"
        ],
        "Arithmetic and Logic Instructions": [
          "Flags",
          "The N and V Flags",
          "The Z and C Flags",
          "Compare/Test Instructions",
          "Overview of Boolean Operations",
          "Coding : Experimenting with the CPSR Flags",
          "Coding : Experimenting with the Carry Flag",
          "Coding : Experimenting with the Carry and Overflow Flags",
          "Introduction to Shifts and Rotations",
          "Understanding Logical Shifts",
          "Understanding Rotations",
          "Some Shift and Rotate Examples",
          "Overview Addition and Subtraction Instructions",
          "Coding : Finding the Maximum Value in a Dataset",
          "Coding : Adding Signed Data",
          "Bit Manipulation Instructions",
          "Overview of Saturated Math Instructions",
          "Overview of Multiplication Instructions",
          "Multiplying by Constants",
          "Coding : Solving a More Complex Equation",
          "Overview of the Division Instruction",
          "Coding : Performing Division by Subtraction",
          "Overview of DSP Instructions",
          "Fractional Notation",
          "Understanding Q Notation"
        ]
      },
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know",
        "Raspberry Pi - all assembly program shall be created and tested on the Raspberry Pi",
        "I'll walk you through, step-by-step how setup your Raspberry Pi for assembly programming"
      ],
      "description": "Welcome to the ARM Raspberry Pi Assembly Programming  From Ground Up™  course.\nCovering ARM Systems Design, Architecture and Practical Assembly Programming,  this is the most comprehensive ARM assembly course online.\nKeeping it simple, there are two versions of this course. This version uses the Raspberry Pi computer as the hardware for creating, assembling, linking and debugging the assembly programs.\nI'll take you step-by-step through engaging and fun video tutorials and teach you everything you need to know to succeed as an ARM embedded developer.\nBy the end of this course you will master the ARM Instruction Set, the Thumb Instruction Set and the Thumb-2 Instruction Set. You will be able to Create, Assemble, Link and Debug  Assembly programs in the Raspberry Pi terminal. You will be  able to Create and Debug Assembly programs using Codeblocks on Raspberry Pi. You will be able to create data structures such as FIFOs and LIFOs in Assembly.  Furthermore you will design complex algorithms for performing Binary Search in assembly , and solving advance mathematical problems like the Taylor Series and the Bisection Algorithm . Finally you will be able to create hardware drivers to configure the Raspberry Pi peripherals in assembly.\n\n\nREMEMBER : I have no doubt you will love this course. Also it comes with a  FULL money back guarantee for 30 days!  So put simply, you really have nothing to loose and everything to gain.\nSign up and lets start writing some low level code.",
      "target_audience": [
        "If you are an absolute beginner to embedded programming, then take this course.",
        "If you are a seasoned programmer, then take this course to to get up to speed with ARM architecture and assembly programming",
        "If you are switching from other architectures such x86 to ARM then this is a fast-track way of doing it. You can get started straight away with the ARM Instruction Set.",
        "If you are a hardware hacker and a Raspberry Pi user, then take this course to explore how to access various aspects of the Raspberry Pi in assembly."
      ]
    },
    {
      "title": "Computer technician training for CompTIA A+ certification",
      "url": "https://www.udemy.com/course/computer-technician-training-course-u/",
      "bio": "Ideal if you want to become a computer tech and get the certification",
      "objectives": [
        "All about computer technician"
      ],
      "course_content": {},
      "requirements": [
        "Use of internet and pc beginners"
      ],
      "description": "++++++ Course description +++++++\nIn these classes, you will learn the basic things to the more complicated things, so if you have no idea what a computer is or how to talk with people and present yourself here I will teach you all those things.\nWe offer you a complete course on how to be a good computer technician, looking at theory and in-depth practice.\n\n\nSubjects in this course:\n1. How to become a computer technician\n2. Communication skills\n3. Difference between honesty and integrity\n4. Dependability and responsibility in a computer technician\n5. Adaptability & versability in a computer technician\n6. Sensitivity talking to customers\n7. Communication between PC technician and customer\n8. Assertive communication\n9. Respectful communication\n10. Eliciting answer\n11. Expectation and follow up\n12. Time frame with customers\n13. Documentation after finishing PC repair\n14. Follow up after the repair\n15. Avoiding ESD electroStatic discharge\n16. How to mitigate problems with EMI & RFI\n17. Personal safety in a computer technician\n18. Basic tools for a computer technician\n19. Troubleshooting theory\n20. What are computers\n21. The computing parts\n22. 5 stages of the computer\n23. Why computer stages matter\n24. Connector and components of a computer\n25. 5 Common operating system function between them all - CompTIA A+\n26. Learning different OS graphical interfaces Windows - Linux - OS X\n27. File structures & patch in an operating system Windows Linux OS X\n28. File structures and patch in windows Linux OSX\n29. 3 tech launch point - PC repair course CompTIA A+\n30. How a CPU or microprocessor works\n31. What is the difference between storage memory - Ram and HDD\n32. Different models of Microprocessors and their history\n33. What is a CPU multiplier\n34. What is the processor 64 bit\n35. What is CPU parallel execution\n36. Virtualization support in a CPU\n37. What is a superscalar architecture & in order and out of order processing\n38. What is hyper-threading in a CPU processor\n39. What is an integrated memory controller or IMC\n40. What is an integrated graphics processing unit in a cpu\n41. What is the security in a CPU windows DEP\n42. What is multicore processing in a CPU\n43. Selecting & installing CPU - knowing the meaning of each model\n44. Installation issue and preventions in a CPU\n45. Class about the Cooling system for CPU\n46. How to troubleshoot a CPU\n47. How memory ram works in your computer\n48. Different types of memory RAM\n49. How memory SDRAM works\n50. Differences between memory RAM, Rambus vs DDR vs SDR\n51. Differences between ddr1 ddr2 ddr3 & ddr4 and their features\n52. What is single & double sided ram vs RANK single double & quad\n53. What is the latency of memory RAM - CAS, RAS, etc\n54. What is parity & ECC ram and how is works\n55. What is registered and buffered memory ram\n56. How to identify when a PC is running low in RAM?\n57. Introduction to Virtual memory in an operating system Certification CompTIA a+\n58. What is a ready boost in windows and how it works\n59. Getting the right RAM for your computer PC MAC Linux Certification CompTIA A+\n60. Mixing ram advice before installation\n61. How to install ram guide and advice\n62. How to read the SPD chip in a memory RAM\n63. How to install memory in a laptop and counting RAM\n64. How to Troubleshoot RAM real parity & phantom error CompTIA A+, class\n65. What is a BIOS and how does it work in a motherboard\n66. What is burn-in in electronics\n67. Difference between BIOS & CMOS\n68. Motherboard difference between workstation vs desktop\n\n\nENROLL NOW and share this great course with me!",
      "target_audience": [
        "All students with interests in computer technical support IT",
        "IT engineers",
        "IT support",
        "IT Security Specialists"
      ]
    },
    {
      "title": "Arduino OOP (Object Oriented Programming)",
      "url": "https://www.udemy.com/course/arduino-oop/",
      "bio": "Learn how to use OOP with Arduino through a step by step project.",
      "objectives": [
        "Master Arduino OOP (Object Oriented Programming)",
        "Write a class for any Arduino component or functionality you want",
        "Package a class as an easy-to-use Arduino library",
        "Make your code easier to read and scalable",
        "Create clear interfaces for other developers to use",
        "Use a class inside another class",
        "Combine classes together to exponentially increase the possibilities of your programs, without writing more code",
        "Learn naming conventions for Arduino OOP code",
        "Clearly organize your code in different files",
        "Learn the best practices from the start",
        "Practice a lot with hands-on lessons"
      ],
      "course_content": {},
      "requirements": [
        "You know how to create basic Arduino programs with basic hardware components.",
        "You understand the basics of Arduino time functionalities (millis, delay, etc).",
        "No need to know OOP prior to the course, but this is a bonus point."
      ],
      "description": "You want to write Arduino code that you can easily read, modify, and share with other Arduino developers?\nOr you already know OOP (Object Oriented Programming) and you want to know how to apply it to Arduino?\nAt the end of this course you will be able to:\nWrite clean Arduino code with OOP for any hardware component or functionality.\nRewrite your own projects using OOP.\nCreate a clean and super easy-to-use OOP Arduino library.\nThe course works for any Arduino board.\n\n\n→ Why this course?\n\n\nFrom what I’ve seen, OOP is not frequently used with Arduino (on libraries, yes, but from most users, no).\nI noticed this when I got started using the Arduino and created a few projects. My initial background was in software engineering, not electronics engineering, so I had a good foundation with OOP, applied to desktop software or web development.\nWhen coming to the Arduino, my thought was: why not use OOP on the Arduino (since it’s possible!). I know not many people do it, but it’s going to make my programs much more scalable and easy to read.\nAnd it worked great. Now, when I write Arduino programs, I almost always use OOP.\nSeeing that there is a lack of structured resources on the Internet to learn how to write OOP code for Arduino, I decided to create this course.\nI have packaged several years of my experience into this course, so you can learn the most important stuff, directly starting with the best practices, and all that in just a few hours.\n\n\n→ How do I teach in this course?\n\n\nWell, this Arduino OOP course is 100% project focused and 100% practical. Throughout the different sections, we are going to write a complete Arduino project, step by step.\nEverything is hands-on (no copy and paste!), so you can directly practice with me on each video. For some of the sections I have also included some challenges for you, so you can practice on your own and develop parts of the project by yourself, using the previous knowledge you got.\nNo distracting fluff, just a step by step process, directly going to the point, and making you practice on the key points so you can then apply the knowledge to your own projects.\n\n\n→ What will you learn/do?\n\n\nHere’s a very quick overview of the course:\nCreate a first class (for an LED component)\nOrganize the class, separate the interface from the implementation\nYour turn: write OOP code for a push button\nCreate a class to make an LED blink (how to use a class inside another class)\nYour turn: create the final TrafficLight class with the high level logic, while using all the previous classes you’ve created\nNote: this course is not an in-depth OOP course for C++, where I explain all the different possibilities and features of OOP. No, this is a practical course on how to apply OOP to Arduino code. Be reassured though, you don’t need to know OOP before taking the course, the first few lessons will help you grasp the main concepts through practice.\nThe course is entirely focused on programming, although we’ll use a hardware circuit with a few basic components. I’ll explain to you exactly what components you need (in a free preview lecture at the beginning), and then how to create the circuit in 10 minutes. And after this, back to the code!\nOn top of that, I will also teach you the process I use to write OOP code, and the best practices you can implement right now.\n\n\nNow, don’t wait any longer and start this Arduino OOP journey with this course! After taking this course, you won’t believe how you could have waited so long to discover OOP with Arduino. Your programs will look much cleaner, modular, and easy to read.\n\n\nOh, and you also get a 30 days money-back guarantee if you’re not fully satisfied. So just get started now, and if I don’t deliver on what I said, please do get the refund.\nSee you in the course! :)\n\n\n\n\nNote - This course is not for you if:\nYou’re a complete Arduino beginner and have never written a program before.\nYou’re an anti-OOP purist. Sorry, not for you!",
      "target_audience": [
        "Students, Engineers, Researchers, Teachers, Developers, Hobbyists.",
        "Arduino developers who want to write easy-to-read and scalable code.",
        "Arduino developers who want to create Arduino libraries with a clean interface.",
        "Developers who understand OOP and want to learn how to apply it to Arduino.",
        "Anyone who wants to discover alternative ways to write Arduino code."
      ]
    },
    {
      "title": "Raspberry Pi for the Beginners",
      "url": "https://www.udemy.com/course/raspberry-pi-for-the-beginners/",
      "bio": "A-Z guide to understand the features of Raspberry Pi.Go from the basics to create the hardware projects on your own.",
      "objectives": [
        "Configuring the Raspberry Pi to use as a fully functioning computer.",
        "Basics of Python Programming and Linux Commands.",
        "Writing number guessing program in python.",
        "Connect and Control Raspberry Pi to use with mobile or computer.",
        "Hardware based LED blinking project.",
        "Attendance application using the Raspberry Pi bluetooth."
      ],
      "course_content": {},
      "requirements": [
        "This course is basically for the Beginners.There is no prerequisite for this course."
      ],
      "description": "Raspberry Pi 3 is a beginner course on the newly launched Raspberry Pi 3. The course is ideal for those who want to understand Raspberry Pi and who are new to the Raspberry Pi and want to explore more about it. This course will take your beginners coding skills to the next level. The course cover two projects.\nIn the first project, you will learn how to program the LED Blinking with the help of Raspberry Pi, Python Programming and Linux command.\nGoing forward you will learn how to program the Attendance Application by using inbuilt Bluetooth of Raspberry Pi.\nYou will also learn the features of Raspberry Pi,  architecture of Raspberry Pi, Installation of Raspbian Operating System, connecting Raspberry Pi with your Laptop and Mobile Phones, Basics Linux Command & Python Programming.\nThe course provides the complete source code of both the projects.\nThe entire course can be completed over a fortnight, including the hardware assembly and coding in Python programming.\nBy the end of this course, you will have enough knowledge about the LED Blinking and Attendance Application and how to implement in the real time scenario.",
      "target_audience": [
        "The Raspberry Pi course is meant for newbie’s who are not familiar with Raspberry Pi or students looking for a quick refresher on Raspberry Pi. No prior programming language is required. This course is  for the beginners who want to learn about the Raspberry Pi and want to explore more about it."
      ]
    },
    {
      "title": "Circuit creation,analysis and simulation using MULTISIM",
      "url": "https://www.udemy.com/course/circuit-creationanalysis-and-simulation-using-multisim/",
      "bio": "Learn how to design circuits using MULTISIM",
      "objectives": [
        "perform analysis of circuits more effectively",
        "understand working of circuits through practical steps"
      ],
      "course_content": {},
      "requirements": [
        "Desktop",
        "Multisim 11.0 software",
        "Basic understanding of electronics is required for taking up this course"
      ],
      "description": "NI Multisim (formerly MultiSIM) is an electronic schematic capture and simulation program which is part of a suite of circuit design programs, along with NI Ultiboard. Multisim is one of the few circuit design programs to employ the original Berkeley SPICE based software simulation. Multisim was originally created by a company named Electronics Workbench Group, which is now a division of National Instruments. Multisim includes microcontroller simulation (formerly known as MultiMCU), as well as integrated import and export features to the printed circuit board layout software in the suite, NI Ultiboard.\nThis course is designed with an aim to teach National Instument's software multisim which is widely used all over electronics industry to analyse and study the performance of circuits.   While doing this course student will gain knowledge about circuit designing,simulation  and performing analysis on the circuits . This  course will help electronics and electrical engineering graduates in understanding electronics more closely.  Knowledge of multisim will give you an edge over others in the electronics industry .\nCourse structure is as follows:\n1 .Understanding multisim platform .\n2 .circuit designing and simulation .\n3 .verification of circuits operations using multisim .\nSeveral examples like working of half wave rectifier,full wave rectifier,voltage regulator,half adder and full adder,low pass  filter,high pass filter,band pass filter ,Gates and many more has been discussed and their performance has been studied and their theoritical   results has been verified with the multisim simulated results .\nBy the end of this course ,you will be comfortable in using multisim for all the academic and professional purposes.\nHappy Learning",
      "target_audience": [
        "High school students",
        "Electronics and electrical engineering graduates",
        "Professionals working in electronics industry"
      ]
    },
    {
      "title": "Building a Computer: From Zero to PC Hero",
      "url": "https://www.udemy.com/course/building-a-computer-from-zero-to-pc-hero/",
      "bio": "True to it's name, this course will teach anyone and give them the confidence and tools to build a computer.",
      "objectives": [
        "How to Build Your Own Desktop Computer",
        "The Orgins of Computers",
        "The Functions of Each Component"
      ],
      "course_content": {},
      "requirements": [
        "A Strong Desire to Learn Something New",
        "A Budget to Purchase Parts",
        "No Prior Computer Experience Needed"
      ],
      "description": "What is a PC Hero?\nA PC Hero is someone that is able to not only build a computer with their mind and body, but also show others how to do the same. This course promises to take you from \"What is a CPU?\" to \"That Intel i7 CPU can fit in this LGA1151 motherboard.\" Looks like another language right now? Not after this course.\nSo what exactly do I learn?\nThe course begins with us meeting face to face and you get a taste of my uniqueness. Then you will find yourself in a lengthy but entertaining and informative PowerPoint that talks about every part of a computer. Every now and then you take a break from the slides and get to step into operating systems such as Linux. After the conclusion of the presentation, you begin the build. With a sky-view of the build process, you get to see each and every step along the way, including a major happy accident made by your own instructor.\nIs this worth taking?\nShort Answer: If you want to.\nLong Answer: Yes! I have recorded over 7 hours of video footage, included the 200+ slide power point, and created a few checklists to help you in the purchasing and building phases of this course. Don't worry, this course will be updated with more guides and resources based on your very own feedback. See you in class soon!",
      "target_audience": [
        "People Who Want to Build A Computer",
        "Those Who Want to Impress Friends and Family",
        "You"
      ]
    },
    {
      "title": "Writing SystemVerilog Testbenches for Newbie",
      "url": "https://www.udemy.com/course/system-verilog-for-chip-verification/",
      "bio": "Step by Step Guide to SystemVerilog",
      "objectives": [
        "From Zero to Hero in writing SystemVerilog Testbenches",
        "Practical approach for learning SystemVerilog Components",
        "Inheritance, Polymorphism, Randomization in SystemVerilog",
        "Understand interprocess Communication",
        "Understand Class, Processes, Interfaces and Constraints",
        "Everything you need to know about SystemVerilog Verification before appearing for Interviews",
        "You will start Loving SystemVerilog"
      ],
      "course_content": {},
      "requirements": [
        "Understanding of Digital System or Digital Electronics",
        "Understanding of Verilog"
      ],
      "description": "VLSI Industry is divided into two popular branches viz. Design of System and Verification of the System. Verilog, VHDL remain the popular choices for most Design Engineers working in this domain. Although, preliminary functional verification can be carried out with Hardware Description Language. Hardware Description language possesses limited capabilities to perform code coverage analysis, Corner cases testing, etc and in fact sometimes it becomes impossible to perform this check with HDL's.\nHence Specialized Verification languages such as SystemVerilog start to become the primary choice for the verification of the design.\nThe SystemVerilog Object-oriented nature allows features such as Inheritance, Polymorphism, etc. adds capabilities of finding critical bugs inside design that HDL simply cannot find.\nVerification is certainly more tricky and interesting as compared to designing a digital system and hence it consists of a large number of OOP's Constructs as opposed to Verilog. SystemVerilog is one of the most popular choices among Verification Engineer for Digital System Verification. This Journey will take you to the most common techniques used to write SystemVerilog Testbench and perform Verification of the Chips. The course is structured so that anyone who wishes to learn about System Verilog will able to understand everything. Finally, Practice is the key to become an expert.",
      "target_audience": [
        "Engineer's wish to pursue carrer as Front End VLSI Engineer / FPGA Design Engineer / Verification Engineer / RTL Engineer",
        "Anyone wish to learn System Verilog with minimum efforts",
        "Anyone wish to start writing their own System Verilog Testbenches"
      ]
    },
    {
      "title": "Embedded Rust Development with STM32: Absolute Beginners",
      "url": "https://www.udemy.com/course/embedded-rust-for-absolute-beginners/",
      "bio": "Master safe, modern embedded systems in Rust with bare-metal, FFI, drivers, crates & projects on STM32 microcontrollers",
      "objectives": [
        "Rust programming language from scratch",
        "Build your first bare-metal Rust application from scratch",
        "Learn how to set up the Rust toolchain for building firmware that runs on ARM Cortex-M microcontrollers",
        "Write your own linker script and startup file, and understand how memory layout and bootstrapping work in embedded Rust",
        "Use cargo-binutils to inspect and analyze ELF files",
        "Set up a modern and efficient workflow using VS Code to build, flash, and debug your Rust code with embedded targets",
        "Using and understanding core embedded Rust crates",
        "Log and debug efficiently in resource-constrained environments",
        "Get hands-on with ARM Cortex peripherals like SysTick and ITM using the cortex-m and cortex-m-rt crates",
        "Rust FFI: Create safe Rust APIs to interface with existing C libraries, making it easier to integrate Rust into existing C-based codebases",
        "Learn how to safely pass structs, strings, and enums between Rust and C while maintaining type safety and control",
        "Expose Rust functions to be callable from C, using unsafe and FFI concepts to manage cross-language interoperability safely",
        "Step-by-step, build a real-world Flappy Bird game application using Rust",
        "Build hardware-agnostic drivers using the embedded-hal traits, making your code portable across multiple microcontroller platforms.",
        "Interface with real sensors ( MPU6050) to control game mechanics",
        "Structure your code in clean, maintainable modules",
        "Use the STM32 HAL crate to easily configure and control your microcontroller’s peripherals with safe Rust abstractions",
        "Writing generic embedded code"
      ],
      "course_content": {},
      "requirements": [
        "No prior programming experience in Rust is required as this course teaches everything from scratch",
        "Basic knowledge of any microcontroller",
        "Basic knowledge of any programming language",
        "If you want to run the code on an embedded target, the listed hardware and components are required"
      ],
      "description": "==>  Looking to add another embedded programming language to your arsenal? Give Rust a shot — you won’t be disappointed!! <==\nThis course is your starting point for using Rust on microcontrollers, even if you are new to embedded systems.\nThis is a fully hands on course that takes you from scratch into real world embedded Rust development on STM32. Each video builds on the previous, helping you progress step-by-step, from writing bare metal code to advanced topics like FFI, crates, driver development, and traits. Ideal for those new to Rust and embedded systems.\n\n\nWhy Rust for embedded?\nRust prevents many common memory issues (like null pointer dereferencing, buffer overflows, and use-after-free errors) through:\nOwnership model: Rust’s strict rules around ownership, borrowing, and lifetimes prevent most accidental memory misuse.\nType safety: Rust’s type system ensures that you access data correctly and helps prevent certain types of invalid memory access by enforcing strict variable usage patterns.\nThanks to Cargo, Rust’s official package manager, you can easily add features by simply including external libraries, or \"crates,\" which are like plug-and-play components.\n\n\nWhat will you learn?\nHere’s what you will master in this course:\nA beginner-friendly introduction to Rust, tailored for embedded systems\nComplete toolchain setup for cross-compiling, flashing, and debugging\nDebugging and logging with defmt and probe-rs for real-time tracing\nHigh-level peripheral programming with STM32 HAL crate\nStep-by-step, build a real-world Flappy Bird game application using Rust\nInterface with real sensors (MPU6050) to control game mechanics\nClean, modular coding practices and hardware abstraction\nBuild hardware-agnostic drivers using the embedded-hal traits\nWriting and understanding your own linker scripts and startup code\nBuilding generic embedded code using Rust generics and traits\nSafe and seamless Rust + C integration through FFI\nConfidence to write robust, reusable, and production-grade embedded firmware in Rust\n\n\nHardware Requirements\nNote: If you already have a microcontroller development board, we recommend continuing with it. This course is designed with such thoroughness that the concepts and steps can be applied to most development boards though some minor adjustments may be needed. But, if you prefer to use the exact same board as the instructor for a smoother experience, you can check out the recommended hardware\n\n\n1) Microcontroller development board\nOption-1. STM32F303-Based Board\nThe course primarily utilizes Fastbit STM32 Nano board which is based on the STM32F303 microcontroller and onboard MPU6050 sensor.\nOption 2.  Any STM32 Microcontroller Board\nYou can use any development board featuring an STM32 microcontroller. The course content is designed to be adaptable, allowing you to follow along with the specific STM32 board you have available.\n2) SWD-Based Debugger\nAn SWD (Serial Wire Debug) based debugger is required for programming and debugging your STM32 microcontroller. This tool is essential for loading your programs onto the microcontroller and for debugging your projects in real-time.\n3) LCD shield\nIn one of the projects, you will need a TFT LCD module for experimentation. This course uses the Fastbit 1.28\" TFT LCD with an 8-bit parallel interface, based on the GC9A01 LCD driver. However, you are free to use the same or a similar compatible module\n4) MPU6050 sensor\n\n\nSoftware requirements\nVS Code\nSTM32CubeIDE",
      "target_audience": [
        "Embedded developers looking to explore Rust as an alternative to C/C++ or to make it coexist with existing code for microcontroller programming",
        "Rust enthusiasts who want to apply their skills to low-level, hardware-focused projects and learn embedded programming.",
        "Beginners in embedded systems eager to build practical skills from the ground up",
        "Looking to add another embedded language to your arsenal? Give Rust a shot, you won’t be disappointed"
      ]
    },
    {
      "title": "Mastering VFD from Basic to Advance",
      "url": "https://www.udemy.com/course/mastering-vfd-from-basic-to-advance/",
      "bio": "Detailed description of VFD Hardware and software part.",
      "objectives": [
        "VFD",
        "Variable Frequency Drive (VFD)",
        "AC Drive",
        "Inverter",
        "LSIS"
      ],
      "course_content": {},
      "requirements": [
        "Basics of Electricity"
      ],
      "description": "This VFD course covers the functions of major modern VFDs. In my course I am using LSIS VFD (LS brand is derived from LG Company). The contents included in this course is related to Hardware, installation, theoretical, Start/Stop options, functions (basic & advance), IOs, Protection parameters and Diagnostics.\n\n\nIn any VFD there can be 100+ functions. Not all are relevant! my practical experience allowed me to hand-pick the function which I ever used in my career.\n\n\nWhy I made this course? I didn't wanted my experience to just stick with me, neither I wish to die with it, I wanted to deliver. So, once you will have to work on VFD (especially LSIS brand), I will be able to provide big help, from installation guide to commissioning. In a way you all will be helpful to me, for my growth.\n\n\nHow can I help? Once you are done with the course, and you might be looking forward for some advice, so I will be able to communicate. Since your completion of course will enable us to understand terms. I can provide detailed stuff which will include parameters and\n\n\nAre all VFDs same? Generally unless the VFD is designed for special application have same concepts and mostly common function. The reason I choose LS VFD is because there drives are economical, and easy to read (thanks to keypad) which shows descriptive functions.\n\n\nWhich brand I will be using? LSIS\n\n\nWhat If course is NOT what I am look for? In that case you have 30 days payback guarantee, please claim refund.\n\n\nWhat If I do not understand certain topic or there is some topic which need more elaboration? You can always contact me for that, and I will be happy to give more details. If I feel that I should add content, I will create and add.\n\n\nWhat is not included in this course? I didn't included Permanent Magnet Motor Drives, I also didn't included Multi-Motor function, and neither Solar panel based VFD solution. These each topic deserves a separate course. However, if you are facing these applications, I will help you with parameters and tips.",
      "target_audience": [
        "Students",
        "Field Engineers"
      ]
    },
    {
      "title": "FPGA Embedded Design, Part 1 - Verilog",
      "url": "https://www.udemy.com/course/fpga-embedded-design-verilog/",
      "bio": "Learn FPGA embedded application design starting with the basics and leaving with your own working designs.",
      "objectives": [
        "Design hardware behavior with the Verilog Hardware Description Language",
        "Simulate Verilog Modules.",
        "The curriculum will take you by the hand through learning Verilog.",
        "In the series, you'll learn how to simulate your designs, how to make them real in an FPGA, and finally how to design and use your own Soft Processor",
        "This first course is about the Verilog Hardware Description Language.",
        "This is NOT a System Verilog course. However, learning Verilog is a starting point if you want to learn System Verilog (Similar to learning C prior to C++)."
      ],
      "course_content": {
        "Introduction": [
          "Course Structure",
          "Instructor Introduction",
          "Motivation: Hardware Design",
          "Motivation: Let's make a CPU!",
          "Motivation: CPU Design",
          "Useful Software"
        ],
        "Hardware Description Languages": [
          "What exactly is a Hardware Description Language?",
          "Concurrent Design",
          "Verilog and VHDL",
          "Other HDLs"
        ],
        "[Optional] Refresher on Digital Circuit Design": [
          "Digital Circuit Design",
          "Logic Gates",
          "Boolean Algebra",
          "Combinational Logic - Muxes and Demuxes",
          "Combinational Logic - Logic with Multiplexers",
          "Combinational Logic - Logic with Demultiplexers",
          "Combinational Logic - Inside Multiplexers and Demultiplexers",
          "Arithmetic with Gates",
          "Adders with Gates",
          "Sequential Logic",
          "Tri-State Buffers"
        ],
        "The Verilog Hardware Description Language": [
          "Before we start...",
          "No, Wait. This is all concurrent!",
          "Verilog Code Structure",
          "Descriptive Modules",
          "Test Bench Modules",
          "Some details about Verilog"
        ],
        "Software Tutorial": [
          "EDA Tools",
          "Typical Steps in EDA Suites"
        ],
        "Quick Overview of EDA Playground": [
          "Creating a Playground",
          "Setting up a Playground",
          "Entering Descriptive Code",
          "Entering Test Bench Code",
          "Entering display System Tasks",
          "Simulating with display Tasks",
          "Simulating with EPWave",
          "Simulating with GTKWave"
        ],
        "Quick Overview of Modelsim": [
          "Download and Installation Tips",
          "Compiling",
          "Simulation Setup",
          "Waveform Simulation",
          "More on Timescales",
          "More Features"
        ],
        "Coding Elements of Verilog": [
          "Wires and Registers",
          "Number Representation: Logic Values",
          "Number Representation: Integers",
          "Logic Gates",
          "The Basics",
          "Higher-Level statements",
          "Data Assignments",
          "Multiplexers and Demultiplexers",
          "case statements",
          "if-else",
          "Hardwired assign",
          "Tri-State Buffers in Veriog",
          "Tri-State Buffer Implementation in Verilog",
          "Sequential Logic",
          "Sequential Logic Example in Verilog",
          "Blocking vs Nonblocking Assignments",
          "Assignment example in EDA Playground",
          "Blocking Results",
          "Nonblocking Results",
          "Nonintuitive Results"
        ],
        "A Combinational System Example": [
          "Let's make a 4-bit Adder!",
          "A Verilog Implementation",
          "Simulating with Multiple Source Files",
          "Simulation",
          "Test Bench",
          "Propagation Delays",
          "An Alternative Implementation in Modelsim",
          "Multiple Bit Signals in Modelsim",
          "Design an ALU"
        ],
        "A Sequential System Example": [
          "Let's make an Up/Down Counter!",
          "A Verilog Implementation",
          "Simulation",
          "Design a Digital Clock"
        ]
      },
      "requirements": [
        "Basic programming knowledge sometimes helps, but the case of no programming experience can be an advantage since you will learn something other than traditional sequential programming.",
        "Although a refresher is provided in this course, some basic digital electronics knowledge always helps. Not necessarily advanced stuff, just the basics: Logic gates, maybe flip flops, counters, tristate buffers, etc.",
        "Ultimately, an FPGA development board will come in handy to build and test your projects. We'll use it starting at the second course in the series."
      ],
      "description": "Do you feel you've learned enough about microcontrollers? Do you want to learn more embedded application design techniques? How about a technique that will allow you to design high-performance systems the way professional equipment designers do?\nIf you're still interested, this curriculum is for you. The FPGA Embedded Design series will teach you the exquisite art of FPGA design.\n\n\nSo what is an FPGA anyway?\nBefore moving on, let me tell you that an FPGA is not a microcontroller. It's not a computer. Well, at least not if you don't want it to be a microcontroller or computer.\n\n\nThe simplest explanation of an FPGA I've found is that it's a shape shifter! It's an integrated circuit that will behave as the logic circuit you'd like, and the way of letting it know the desired behavior is, yes, you guessed it, through programming.\nBut you will not do this with a Programming Language, but with a Hardware Description Language!\n\n\nIn this course, you'll learn Verilog, which is one of the most widely used Hardware Description Languages (along with VHDL). You'll learn the concurrent paradigm in the Verilog code and how to design digital systems with this powerful language. You'll also learn that there are many purposes of an HDL: System design, simulation, implementation in either a traditional chip, or the popular FPGA alternative.\n\n\nDon't let this opportunity pass. Take the first step into the other side of embedded systems: FPGA Embedded Design.",
      "target_audience": [
        "Anyone who wants to learn FPGA design.",
        "Arduino Makers who want to take the next step into embedded systems.",
        "Hardware engineers who would like to learn about the exciting field of FPGA design",
        "This course is not for experienced embedded engineers specialized in FPGAs."
      ]
    },
    {
      "title": "Electrical, Electronics and PCB Design Safety & Compliance",
      "url": "https://www.udemy.com/course/designers-guide-to-electrical-safety-isolation-standards/",
      "bio": "Learn the most important aspects and methods for designing safe electrical and electronics products and applications.",
      "objectives": [
        "Understand electrical product safety concepts, classifications and terminology",
        "Understand the most important electrical safety requirements for an electrical/electronics product design project",
        "Understand the concepts of clearance, creepage and solid insulation and be able to design the related safety measures",
        "Understand the importance of critical components and be able to verify if such components are properly certified/approved. Examples with transformers and capacitors",
        "Understand IP protection against ingress of water and solid parts and properly choose the best solution for a particular design",
        "Be able to draw insulation diagrams, a very important tool for product development, in order to represent the insulation strategy and the product compliance",
        "Be able to find and use technical international standards with respect to electrical products safety",
        "Understand where the safety aspect learned in the course belong in the product design/development lifecycle",
        "Examples with households appliances design",
        "Properly set clerance and creepage values in PCB design CADs, like Eagle Layout PCB Design software (contents applicable also to other CADs software)"
      ],
      "course_content": {},
      "requirements": [
        "Students should already know basic electronics, e.g. basic components like capacitors, resistance and basic concept like currents, voltage, power.",
        "It is not necessary knowledge on active components (e.g. operational amplifiers) or digital electronics (e.g. microcontrollers)",
        "We will not talk about coding firmware"
      ],
      "description": "What students say about this course:\n\n\n\"This course is very informative. As electrical engineer, I am honestly getting valuable information through this program. COURSE WAS EXCELLENT BOTH IN PRESENTATION AND PACKAGE\", Ivwionoku\n\n\n\"Great info on standards, where to get them and how to implement them practically in CAD!\", Alvaro\n\n\"Great details on safety aspects of products with clear methodologies of design using informative examples. Thank you so much!\", Pramit\n\n\n\nLast Update:\n******** October 10th, 2016 - Added a section on how to set and check clearance and creepage in a PCB Design CAD Software. Section name \"PCB CAD/CAM SOFTWARE - CLEARANCE AND CREEPAGE\"\n******** Published in  May 1, 2016 ********\n\n\nCourse Description\n\nBeing a capable electronics designer does not make you a good one.\nBeing an expert in Arduino, Raspberry, firmware, embedded software and microcontrollers, hardware, PCB design, digital and analog design, is only a part of what designers need to know.\nA beautiful and functional product can be appealing, but if basic safety rules are not taken into account even before starting the actual  design activities, a poor design can endanger people and cause its designer big troubles.\nThis course focuses on design safety with respect to electrical/electronics application, including PCB design. It covers the most important aspects that designers need to know, and it teaches a general methodology to develop electronics and electrical applications (including PCB) in compliance with safety principles and international standards.\n+++++ Have a look at the course curriculum +++++\n\nAt the end of the course:\nyou will be able to find in international standards and understand the applicable electrical safety requirements for your electronics project\nyou will be able to calculate the most important parameters like clearance/creepage distance and solid insulation, to be considered during insulation, electronics and PCB design\nyou will be able to set and check creepage and clearance on PCB CAD/CAM Software\nyou will be able to choose the proper IP isolation against ingress of water and solid particles\nyou will be able to choose critical electronics components and verify their certifications\nyou will know what insulation diagrams are and how to make and use them\nyou will know what international standards are, how they are made and where you can find them\nand you will understand the design process and steps toward a compliant product\nso basically you will be able to design a functional, safe and ready for the market electrical application.\nHAVE A LOOK AT THE LESSONS AVAILABLE FOR FREE IN THE COURSE CURRICULUM !!!\nWe will introduce the basic concepts and techniques of electrical, electronics and PCB design for safety, teaching you the path to a project compliant with product safety legislation.\nWe will cover both basic electrical definitions like the product classification and more advance concepts like creepage calculation and critical electronics components.\nThroughout the course you will find practical examples on how to use these techniques on electrical and electronics household appliances design (e.g. food mixers and electric toasters), and also how to set some parameters in a CAD/CAM Software for PCB design.\nWe will take as a reference the most important and recognised international safety standards, like IEC 60335 series, IEC 60529, and the like.\nThe last section will be dedicated to describe the whole design process, from the design specifications to final verification and validation, with a practical example on an electric toaster design.\n------------------------------------------------------------------\nThe course is made essentially of video lessons, but reference to guidelines and datasheets are provided, when considered useful.\nYou will also find several tests. We strongly recommend to take the tests before proceeding to check the concept you have learned.\nIf you really want to understand the safety related part of an electrical/electronics and PCB design and complete your technical culture with this important cornerstone, this course is a must.\nHAPPY LEARNING!!!",
      "target_audience": [
        "This course is for student, professionals and hobbyist engaged with or interested in electrical/electronics design"
      ]
    },
    {
      "title": "Microcontroller Embedded C Programming: Absolute Beginners",
      "url": "https://www.udemy.com/course/microcontroller-embedded-c-programming/",
      "bio": "Foundation course on Embedded C programming using STM32 Microcontroller.",
      "objectives": [
        "'C' programming from scratch",
        "Data types,variables, declarations,",
        "Importance of Bit-Wise operators in \"Embedded\" programming",
        "Bit manipulation techniques using bit-wise operators and examples",
        "Bit extraction and working with memory mapped peripheral registers",
        "Other operators of 'C' (arithmatic, logical, relation, assignment )",
        "Functions in 'C'",
        "Implicit and explicit casting and its importance",
        "Pointers and casting",
        "Pointers arithmetic and importance of pointer datatypes",
        "Accessing memory mapped peripheral registers using pointers",
        "Structures and unions",
        "Importance of structures in peripheral register access",
        "Structure and bit fields",
        "Configuring peripheral register addresses using bit fields",
        "Structures and pointers",
        "interfacing LEDs, Keypad",
        "Const and volatile type qualifiers",
        "importance of volatile during compiler optimization",
        "const data, const pointer, cont volatile explanation with examples",
        "Importance of const",
        "Loops : for, while, do while"
      ],
      "course_content": {
        "Introduction": [
          "About the instructor",
          "Programming languages for Embedded Systems",
          "History of 'C' and standardization",
          "Course repository",
          "Important Note"
        ],
        "IDE installation": [
          "Downloading IDE",
          "Key features of the STM32CubeIDE",
          "Installing STM32CubeIDE",
          "Installing STM32CubeIDE on Linux",
          "Installing compiler (GCC) for host",
          "Installing compiler (GCC) for host (WINDOWS)",
          "Installing compiler (GCC) for host (LINUX)",
          "Installing compiler (GCC) for host (MAC)",
          "Importing course projects in to workspace",
          "Creating a project for the HOST",
          "Creating a project for the Target",
          "FPU warning fix",
          "Hardware/Software Requirements",
          "Meet the embedded target of this course"
        ],
        "Your first 'C' program": [
          "OnlineGDB web tool",
          "Printf and Hello World",
          "Printf exercise solution",
          "Escape sequences in 'C'",
          "Printf exercise solution",
          "Printf exercise solution",
          "Commenting in 'C'"
        ],
        "Data types and variables": [
          "Data types in 'C'",
          "'C' Integer data types and value ranges",
          "Char data type and variable definition",
          "Variable definition exercise",
          "Range calculation for 'char' data type",
          "Integer data type 'short int' and value range",
          "Integer data type 'int' and 'long'",
          "Sizeof",
          "Variables naming rules and definition vs declaration",
          "Declaration vs definition : An illustration",
          "Variables scope and illustration",
          "Variables scope and illustration contd",
          "Summary of local and global variables"
        ],
        "Address of variable": [
          "Address of variables",
          "Address of variables contd."
        ],
        "Storage classes": [
          "Storage class specifiers in 'C'",
          "Use cases of 'static' with variables",
          "Use cases of 'static' with functions",
          "'Extern' storage class specifier",
          "ASCII codes"
        ],
        "functions": [
          "Introduction to functions in 'C'",
          "Function prototypes",
          "Returning data from a function",
          "Function exercise",
          "Typecasting in 'C'",
          "Typecasting in 'C' contd"
        ],
        "Microcontroller and Hello World": [
          "Embedded - 'Hello World'",
          "Testing printf over ARM Cortex M4 ITM+SWO line",
          "Issues with IDE",
          "Testing printf over OpenOCD semihosting",
          "Run Sizeof on Embedded Target",
          "Sizeof testing",
          "Compiler settings on STM32CubeIDE"
        ],
        "Build process": [
          "Embedded project build process"
        ],
        "Analyzing Embedded C code": [
          "What is a Microcontroller ?",
          "Code memory of the microcontroller",
          "Code and Data of the program using memory browser",
          "Analyzing ELF file using GNU tools",
          "Disassembly",
          "IDE option for Instruction level debugging"
        ]
      },
      "requirements": [
        "Basic understanding of number systems , logic gates , bits and bytes.",
        "STM32F407 discovery board is required if you want to try out code on the target"
      ],
      "description": "==> This should be your very first course to dive into the exciting world of \"Embedded Systems.\" <==\nThis is our new course mainly targeted for absolute beginners to learn microcontroller programming using the 'C ' programming language.\nPlease note that \"Embedded C\" is NOT a separate programming language. 'Embedded C' is rather embedded target aware programming using traditional 'C' programming language.\nSome of the critical microcontroller-related 'C' concepts such as\nImportance of bitwise operators\nUsage of bit manipulation techniques to program MCU peripheral registers\naccessing memory-mapped registers using pointers\npointers and casting\nstructures, bitfields, unions, and bit extraction techniques\nrepresenting hardware registers details and configuring them using 'C' structure definitions\nUsage of const and volatile type qualifiers\nInterpret complex variable definitions involving the combination of const and volatile\nThe precise usage of const pointers, const data, volatile const, with pointer and non-pointer variables\nThe behavior of the code during compiler optimization and solution using volatile\nFunctions and friends\nData types, variables definitions, storage class specifiers and much more\nLoops: while, for, do. while\nMCU internal architecture and programming peripherals\nInterfacing projects\nAll these concepts are discussed with clear examples and writing code for the target embedded board.\nAccording to 2017 embedded dot com survey still 'C' is one of the most widely used programming languages  for embedded code development\nThis course gives particular emphasis to learn 'C' programming concepts practically for microcontroller use cases.\n\n\nHardware:\n1. You need ARM Cortex M4 based STM32F407 DISCOVERY board from ST if you want to try out code on the target.\n2. Additional interfacing components may be required for interfacing projects\n3. You can also be able to follow this course if you have any other boards from ST such as Nucleo or evaluation.\n\n\nSoftware:\n1. In this course, Eclipse-based STM32CubeIDE is used as the  IDE ( works on Windows/Linux/Mac) (FREE)\n\n\nLearning order of FastBit Embedded Brain Academy Courses,\nIf you are a beginner in the field of embedded systems, then you can take our courses in the below-mentioned order.\nThis is just a recommendation from the instructor for beginners.\n1) Microcontroller Embedded C Programming: absolute beginners(Embedded C)\n2) Embedded Systems Programming on ARM Cortex-M3/M4 Processor(ARM Cortex M4 Processor specific)\n3) Mastering Microcontroller with Embedded Driver Development(MCU1)\n4) Mastering Microcontroller: TIMERS, PWM, CAN, RTC,LOW POWER(MCU2)\n5) Mastering Microcontroller: STM32-LTDC, LCD-TFT, LVGL(MCU3)\n6) Embedded System Design using UML State Machines(State machine)\n7) Mastering RTOS: Hands-on FreeRTOS and STM32Fx with Debugging(RTOS)\n8) ARM Cortex M Microcontroller DMA Programming Demystified(DMA)\n9) STM32Fx Microcontroller Custom Bootloader Development(Bootloader)\n10) Embedded Linux Step by Step using Beaglebone Black(Linux)\n11) Linux device driver programming using Beaglebone Black(LDD1)\n\n\nOther programming courses\n1) Master The Rust Programming Language : Beginner To Advanced",
      "target_audience": [
        "Beginners curious about embedded systems and microcontroller programming"
      ]
    },
    {
      "title": "MicroPython for the BBC Micro:bit",
      "url": "https://www.udemy.com/course/micropython-for-the-bbc-microbit/",
      "bio": "Get familiarized with MicroPython for the BBC Micro:bit",
      "objectives": [
        "Learn to write code in MicroPython for any hardware that supports it",
        "Learn to work with all on-board peripherals of the Micro:bit using MicroPython",
        "Learn the working and interfacing of external peripherals",
        "Learn the working of relays, LCD and BMP180 sensor through projects"
      ],
      "course_content": {
        "Getting started with MicroPython for the Micro:bit": [
          "Introduction to the course",
          "Using the Mu Editor",
          "MicroPython Basics",
          "Advanced MicroPython",
          "MicroPython Modules for the Micro:bit",
          "Working with the File System",
          "Quiz 1"
        ],
        "Working with the On-board Peripherals": [
          "Working with the buttons and the LED Matrix",
          "Working with temperature, the touch and the light sensor",
          "Working with the accelerometer and the compass",
          "Working with Radio Communication",
          "Quiz 2",
          "Assignment 1"
        ],
        "Working with the External Peripherals": [
          "LED Dimmer using a Potentiometer",
          "What is an LDR and a PIR Sensor?",
          "Interfacing Sensors and Reading Sensor Values",
          "What is a speaker and how to interface it?",
          "Music and Speech Synthesis in the Micro:bit",
          "Quiz 3",
          "Assignment 2"
        ],
        "Home Automation Projects with the Micro:bit": [
          "Working of a Relay",
          "Interfacing of a Relay with the Micro:bit",
          "Automatic Night Light Project",
          "Intruder Detection",
          "Remote Home Automation using 2 Micro:bits",
          "Assignment 3"
        ],
        "Weather Station Project with the Micro:bit": [
          "Working of a 16x2 LCD over I2C",
          "Interfacing 16x2 LCD over I2C",
          "LCD Notice Board Project using the Micro:bit",
          "Working and Interfacing of BMP180 over I2C",
          "Weather Station Project",
          "Assignment 4"
        ]
      },
      "requirements": [
        "Completing our “Introduction to BBC Micro:bit” course is recommended.",
        "Basic understanding of Electronics",
        "No prior knowledge in Programming is required",
        "Good logical thinking"
      ],
      "description": "July 2022 Update\nUpdated Bill of Materials\nHello learners, Welcome to MAKERDEMY’s \"MicroPython for the BBC Micro:bit\" course. If you are looking for that special course which will help you gain confidence to explore the Micro:bit using MicroPython, you have come to the right place. This is an intermediate level course and prior knowledge of Micro:bit is essential to follow this course.\nThrough an innovative pedagogy of mixing projects and concepts, this course will help you learn the WHY, HOW and WHAT. To this end, this course is beyond a cook book. You will always know WHY you are doing something. For the more curious learners, we have ample resources to dive in to and continue your learning journey.\nIn just three hours, you will be confident enough to write code in MicroPython for any compatible hardware. You will also develop an in-depth understanding of the Micro:bit and learn to interface a variety of sensors and peripherals with the Micro:bit. As a part of this course, we will build from ground up, a Weather Station using the Micro:bit with an LCD panel and a BMP180 Sensor. We will also implement a Remote Home Automation Project using a relay module.\nIf you are a hobbyist, a teacher, a student or an engineer with a basic understanding of electronics and want to learn or teach physical computation with Microbit, this is the course for you\nSo, what are you waiting for?! Come, join me in this course. I am looking forward to being your instructor and to guide you in tinkering with the BBC Micro:bit using MicroPython.",
      "target_audience": [
        "A hobbyist looking to learn to program the Micro:bit in MicroPython",
        "A student with a basic understanding of electronics and want to use the Micro:bit to interact with the Physical World",
        "An engineer who wants do fast prototyping of projects using the Micro:bit",
        "A teacher looking to introduce physical computing in his or her class, using MicroPython in the Micro:bit"
      ]
    },
    {
      "title": "Introduction to BLE",
      "url": "https://www.udemy.com/course/introduction-to-ble/",
      "bio": "Learn the Fundamentals of BLE in ESP32, explore its features and Implement BLE Enabled Solutions from Scratch",
      "objectives": [
        "Learn in-depth all the concepts related to BLE & BLE Mesh",
        "In-depth technical primer into BLE covering its architecture, features, core concepts and security process",
        "Explore the BLE Mesh concepts in detail covering its architecture, features, core concepts and security process",
        "Get hands on experience in basic BLE features using the ESP32 board and ESP-IDF",
        "In-depth hands on section with all core features of ESP BLE MESH and implemented them",
        "Complete a BLE Mesh enabled Capstone project"
      ],
      "course_content": {},
      "requirements": [
        "A basic understanding of electronics and related concepts",
        "A basic experience of working with ESP32 on Arduino",
        "Recommended to have a basic knowledge of C and C++ programming languages"
      ],
      "description": "UPDATE JUNE 2022:\nESPIDF BLE Code Compatibility Version Update\nHello learners!\nWelcome to MAKERDEMY's “Introduction to BLE” course.\nThis is a beginner level course that will teach all there is to know about BLE and BLE Mesh. We will be using the most popular IoT board called the ESP32 to explore the BLE features, implementations and projects. This course is one stop destination for beginners to understand BLE in-depth and implement projects.\nThis course will strengthen your knowledge on the fundamental concepts pertaining to BLE and BLE Mesh and will give you hands-on experience in implementing end-to-end projects with the ESP32. You will be very confident with the BLE concepts, architecture, features, how to implement them and the security process. You will become confident to integrate BLE and MESH features into your own projects using ESP IDF and Visual Studio Code. Finally, you will implement a full fledged BLE Mesh enabled Capstone project that combines the learnings and features learned throughout the course\nIf you complete all sections in the course, and the course assignments, you will confidently be able to develop and work on implementing your own BLE solutions.\nThroughout the course, we have provided a curated collection of original resources. These resources include links to documents for in-depth learning, links, videos, and more. At MAKERDEMY, we have a dedicated instructor team who will promptly answer any of your course-related queries.\nSo, what are you waiting for?! Come, join me in this course. I’m looking forward to being your instructor and to give you an introduction into the world of Bluetooth Low Energy.",
      "target_audience": [
        "Any developer or engineer who wants to get hands-on experience with Bluetooth Low Energy and BLE mesh and implement Projects based on them",
        "Any developer or engineer, who wants to upgrade their existing project with BLE Integration",
        "Anyone who is curious about BLE and want to learn about all its features and concepts in depth and also implement projects along the way"
      ]
    },
    {
      "title": "Automation with Raspberry Pi Zero",
      "url": "https://www.udemy.com/course/automation-with-raspberry-pi-zero/",
      "bio": "Learn how to automate the water pump and the plant watering using Raspberry Pi Zero",
      "objectives": [
        "Get to know about the newly launched Raspberry Pi Zero",
        "Learn how to code the small LCD screen and display the dynamic text",
        "Learn how to switch ON & OFF any household appliances using a relay and Python programming",
        "Get rid of the daily manual effort of turning the water pump ON and OFF and automate the entire process",
        "Get to know how to water the plants automatically when the moisture level is low and automate it using Raspberry Pi Zero"
      ],
      "course_content": {},
      "requirements": [
        "Basics of Raspberry Pi and Python programming"
      ],
      "description": "Automation with Raspberry Pi Zero will take your intermediate coding skills to the next level. The course is ideal for those who wants to explore the possibilities of newly launched Raspberry Pi Zero. Going forward you will learn how to program the small LCD screen and display the dynamic data. Next you will learn how to control any of the AC appliances using a relay and Python programming. The course will also cover two complete projects that will give solutions to the real-time problems. The first project will include how to get rid of the daily manual effort of turning the water pump ON and OFF and automate the entire process. And, the second project will teach you how to water the plants automatically when the moisture level is low using Raspberry Pi Zero.\nThe course provides the complete source code of the real time project.\nThe entire course can be completed over a fortnight, including the hardware assembly and coding in Python programming.\nBy the end of this course, you will have fundamental knowledge about automating the things using Raspberry Pi Zero and control the physical things with the mini kit.\nWhat are you waiting for? Enroll now!",
      "target_audience": [
        "The course is for everyone who wants to explore the possibilities of Raspberry Pi Zero in the field of automation"
      ]
    },
    {
      "title": "HMI FactoryTalk Complete Course, PLC Allen Bradley PanelView",
      "url": "https://www.udemy.com/course/hmi-factorytalk-complete-course-plc-allen-bradley-panelview/",
      "bio": "HMI Scada for programming and industrial automation Allen Bradley, FactoryTalk, PanelView, HMI Programming with PLC",
      "objectives": [
        "Understanding how HMI and software wroks",
        "How to program an HMI",
        "Create receipes and project from zero",
        "Apply instructions at advanced objects",
        "Learn about Security, Alarms, Faceplates",
        "Learn Complex Animations and when to apply"
      ],
      "course_content": {},
      "requirements": [
        "Few knowledge about programming, sense of logic"
      ],
      "description": "HMI (HMIs), are a basic piece for any type of industrial programming and automation. HMI programming is applied in every industry, and as a future or current industrial programmer in automation world, you should know all the how's. In this course, we will start from scratch programming an HMI for any type of recipe required in our process, with FactoryTalk View Studio.\nYou should know, this course is 10% theory and 90% practice, so from the first videos we will start with programming, and then raising the difficulty, by experiecing real situations in automation field.\n\n\nWe will tour:\n\n\nMomentary buttons.\n\n\nButtons maintained.\n\n\nNumeric keyboard.\n\n\nGraphic variables, etc.\n\n\nIn this course you will learn to execute:\n\n\nRecipe Systems.\n\n\nMacros creation.\n\n\nCreation of Securities.\n\n\nParameter files.\n\n\nLocal Messages.\n\n\nAlarms.\n\n\nHMI Programming\n\n\nAnimations and more.\n\n\nWe take you by the hand step by step, giving an explanation not only of how the software works, but also that you will understand each of the functions in a logical and practical way, as well as different application examples.\n\n\nWith this HMI course, you will understand the activities to be carried out in real situations as a field engineer, as well as the complete operation of an HMI regardless of its brand, since what matters is its logical sequence in programming.\n\n\nAfter reviewing the functions and programming of each execution, you will be able to create at the end of the course a practical case of a REAL industrial process and applicable in any factory (Software FactoryTalk View Studio, HMI).\n\n\nSo we will remind you to join this community of industrial programmers of the future. Don't forget to visit the other courses we have for you to become a full PLC programmer.",
      "target_audience": [
        "Automation Engineers",
        "Electrical Engineers/Technicians",
        "Integrators",
        "Industrial programmers",
        "Mecathronic Engineers"
      ]
    },
    {
      "title": "Building a RISC-V SoC From Scratch!",
      "url": "https://www.udemy.com/course/building-a-risc-v-soc-from-scratch/",
      "bio": "System-on-chips, SoC, integration, RTL, FPGA, RISC-V.",
      "objectives": [
        "Learn the first principle of how complex computer chips work",
        "Learn how processors execute code from a very low level",
        "Learn the basics of FPGA design",
        "Learn RISC-V ISA",
        "Learn how to work with compilers using the command line",
        "Learn how use linker scripts and its basic syntax",
        "Hands on experience on designing your own custom RISC-V SoC, writing the software for it, simulating it and emulating it on FPGA"
      ],
      "course_content": {},
      "requirements": [
        "basics of c programming",
        "basics of computer architecture",
        "basics of digital logic design",
        "basics of hardware description languages"
      ],
      "description": "Are you eager to explore electronics or bridge a knowledge gap in System-on-Chip design? Maybe you're a hobbyist eager to build SoCs for your projects. If this sounds like you, welcome!\nIn this course, we'll dive into creating System-on-Chips. From learning assembly and C code to simulating RTL and seeing the magic of an FPGA.\n\n\nAGENDA\n\n\nThe agenda for this course is a breakdown of everything you need to know to build the final project.\nThe final project is a working System-on-chip with some peripherals: mainly a GPIO module and a UART transmitter.\n\n\n• Section 1: Introduction\n• Section 2: Processors\n• Section 3: Software, Compiler and Linker\n• Section 4: Building simple SoC\n• Section 5: Adding a peripheral to the SoC\n• Section 6: Accelerated Advanced IP Design for the SoC\n• Section 7: UART IP Core\n• Section 8: FPGA Emulation\n•   +10 Labs\n\n\nYou will …\n• Learn the first principles of how complex computer chips work.\n• Learn how processors execute machine code.\n• Learn RISC-V ISA.\n• Learn how to work with make files, compilers, and linker scripts.\n• Learn how to add external peripherals and use register maps.\n• Learn the basics of the FPGA flow.\n• Have hands-on experience with designing the RISC-V SoC, Writing and debugging software for it, and implementing it on an FPGA board.\n\n\nJoin a community of enthusiasts and learners. This isn't just theory; you'll gain hands-on knowledge and bring your SoC designs to life!",
      "target_audience": [
        "Students: If you're considering a career in engineering, computer science, or technology, this course provides a fantastic introduction to an essential aspect of modern electronics.",
        "Hobbyists and Tinkerers: If you enjoy working with gadgets and have a knack for understanding how things work, this course will empower you to explore and experiment with your own SoC designs.",
        "Tech-Curious Individuals: If you're fascinated by the devices you use every day and want to uncover the mysteries behind them, this course will demystify the technology that powers them.",
        "Professionals in Other Fields: If you work in a field indirectly related to technology and want to bridge the knowledge gap, this course will provide you with a solid foundation in SoC design."
      ]
    },
    {
      "title": "Model, Simulate and Control a Drone in MATLAB & SIMULINK",
      "url": "https://www.udemy.com/course/quadcopter-drone-dji-mavic-matlab-simulink/",
      "bio": "Simulate a DJI Mavic Pro in Matlab & SIMULINK and design your own PID controllers for altitude and attitude control.",
      "objectives": [
        "Understand the functioning and physics behind drones' battery systems.",
        "Approximate the performance of any DC motor or propeller from empirical data mathematically.",
        "Understand and harness the Physics of a Drone.",
        "Convert physical motion (throttle, roll, pitch, yaw) to voltage signals.",
        "Derive, understand and model the rotational dynamics of a drone (pitch, roll and yaw motion).",
        "Derive, understand and model the linear dynamics of a drone (3D linear acceleration, velocity and position).",
        "Implement mathematical functions in Matlab and Simulink.",
        "Create and test an engineering model in Simulink.",
        "Design, tune and implement automated PID algorithms (altitude control and rotational dynamics).",
        "Use and understand common Simulink blocks."
      ],
      "course_content": {
        "Mathematical and Physical Modelling": [
          "DJI Mavic Pro Design Brief",
          "Battery Specifications and Performance",
          "Empirical Modelling of DC Motors",
          "Empirical Modelling of Propeller's Behaviour and Performance",
          "Linear and Rotational Drone Dynamics",
          "Actuation: Moments and Disturbances",
          "Actuation: Thrust Vectors and Linear Forces"
        ],
        "Creating the Open Loop Simulink Model": [
          "SIMULINK and the Motors/Propellers Block",
          "Implementing the Rotational Dynamics Block",
          "Implementing the Linear Dynamics Block",
          "Converting Gusts to Drag Disturbances",
          "Converting Throttle and Attitude Inputs to Motor Voltage Signals",
          "Running and Debugging the Open Loop Drone Model (Direct Online)",
          "3D Motion Visualization from SIMULINK to MATLAB"
        ],
        "Closing the Loop and Implementing PID Feedback Control": [
          "Automated Altitude PID Control",
          "Quadcopter PID Control"
        ]
      },
      "requirements": [
        "Basic understanding of physics (Force, Velocity, Acceleration, etc).",
        "High School Diploma mathematics level (Differentiation, etc).",
        "Udemy Course Control Systems: From Mathematical Modelling to PID Control (useful but not mandatory)."
      ],
      "description": "One of the only comprehensive, detailed and approachable online courses taking you from the mathematical modelling of a quadcopter drone to MATLAB/SIMULINK implementation and PID control design.\nToday, drones are everywhere, from ultra high tech military devices to toys for kids going through advanced flying cameras and much more. How do such \"apparently\" simple machines achieve such precise and impressive flights in varying unstable and unpredictable environmental conditions.\nThis course gives you the opportunity to learn and do the following:\n- Understand and harness the Physics behind a Quadcopter Drone.\n- Establish and approximate the Physics of DC motors and propellers from experimental data.\n- Derive the mathematical equations behind the rotational and linear dynamics of a  drone.\n- Implement them in engineering model in MATLAB & SIMULINK using blocks, MATLAB functions, etc.\n- Test and fit your model to relevant real life performance and inputs.\n- Implement, test and tune PID controllers adapted to your requirements in order to control the output of your system, in this case the altitude, position and attitude of your drone.\n\nI will thoroughly detail and walk you through each of these concepts and techniques and explain down to their fundamental principles, all concepts and subject-specific vocabulary. This course is the ideal beginner, intermediate or advanced learning platform for the mathematics behind engineering systems, the use of MATLAB and SIMULINK in engineering design and PID control. Whatever your background, whether you are a student, an engineer, a sci-fi addict, an amateur roboticist, a drone builder, a computer scientist or a business or sports person, you will master the physics behind an electric car and learn how to implement and control them in SIMULINK by designing powerful PID controllers that bridge the gap between humans and machines!\nIf you have questions at any point of your progress along the course, do not hesitate to contact me, it will be my pleasure to answer you within 24 hours!\nIf this sounds like it might interest you, for your personal growth, career or academic endeavours, I strongly encourage you to join! You won't regret it!",
      "target_audience": [
        "Anyone interested in being able to design control systems for any kind of machine or engineering system.",
        "Anyone interested in harnessing the power of MATLAB & Simulink for engineering design.",
        "Anyone interested in learning about robotics and PID control.",
        "Anyone interested in learning how to model real life engineering systems.",
        "Anyone interested in drones, their systems and dynamics of flight."
      ]
    },
    {
      "title": "Embedded System Design with Xilinx ZYNQ SoC and SDK",
      "url": "https://www.udemy.com/course/embedded-system-design-with-zynq-devices-for-newbie/",
      "bio": "Using Xilinx Vivado Design Suite 2019.1 or Lower",
      "objectives": [
        "Embedded System Design flow using Zynq AP SoC",
        "Development of C applications for Zynq Devices",
        "Fundamentals strategies to use Xilinx Drivers",
        "Software and Hardware Debugging Strategies",
        "Software Profiling",
        "Working with Interrupts"
      ],
      "course_content": {},
      "requirements": [
        "Understanding of Digital Electronics",
        "Fundamentals of Computer Architecture",
        "Fundamentals of C"
      ],
      "description": "Xilinx Zynq SoC's are know to provide maximum performance per watt along with maximum reconfiguration flexibility. Zynq family features Dual-Core ARM Cortex A9 processors tightly coupled with the 7-series FPGA to enable faster communication interfaces development with ARM Design flow and hardware acceleration. Zynq devices are available in two categories viz. Zynq-7000s family FPGA for the cost-effective application such as IoT related applications while Zynq 7000 family FPGA are best for high-performance applications such as Embedded Vision etc. The Zynq 7000s comes with Single core ARM while Zynq 7000 comes with Dual-Core ARM.\nThis course covers fundamentals of Popular Xilinx drivers viz. UART, AXI Timers, UART16550, AXI GPIO, AXI BRAM, etc. The course also illustrates the usage of the AXI interrupt controller for handling Interrupts. Also to felicitate incorporation of Hardware accelerators with Zynq based design few examples on building Custom AXI Peripherals are also included. Software and Hardware Debugging, Profiling fundamentals are demonstrated with Zynq to felicitate performance measurement.\nThis course will create the foundation necessary to quickly start building applications on Zynq FPGA devices without prior experience in this domain.  The entire course is a Lab-based course with a major focussed on building skills necessary to handle simple peripherals such as GPIO, Intermediate Peripherals such as UART PS, AXI BRAM, and complex Peripherals such as AXI Interrupt Controller,  AXI Timers, GIC etc.",
      "target_audience": [
        "Anyone wish to build expertise in Xilinx Zynq APSOC and Xilinx SDK Environment",
        "Embedded System Design with FPGA Processors"
      ]
    },
    {
      "title": "Laptop Schematics: Learn How to Read Motherboard Schemes",
      "url": "https://www.udemy.com/course/laptop-schematics-learn-how-to-read-motherboard-schemes/",
      "bio": "Laptop repair, Schematic, computer schemes, basic electrical wiring, circuit diagram, electronics, course for beginner",
      "objectives": [
        "Learn how to track signals and voltages in motherboard",
        "How to read any laptop schemes;",
        "How to troubleshoot using laptop circuit diagram;",
        "Schematics secrets, symbols, tips and tricks;",
        "Understanding ICs pin configuration;",
        "How to use Components references;",
        "Understanding signal name and much more."
      ],
      "course_content": {},
      "requirements": [
        "No experience needed. You will learn everything you need to know"
      ],
      "description": "13 Reasons why you should choose this course\nThe course will teach you Everything about how to read and understand laptop motherboard schematics in detail.\nThe course is created with perfect care by a computer engineer.\nOne-On-One Support;\nThe course is not long, so you can complete it in a short time, and then enjoy your new experiences.\nYour inquiries will be answered in a short time with a full explanation of any question.\nConstant updates.\nSimple and easy-to-understand explanation with examples;\nA certificate will be provided upon completion of the course.\nYou are going to understand Motherboard circuits.\nYou will learn how to follow signals in the motherboard.\nYou're going to learn how to draw schematics.\nYou will learn and master all motherboard components and symbols.\nThis course will transform you from a beginner to a Pro.\nTopics that we will be discussing in this course are :\nTerminology & Table of contents;\nMotherboard Block Diagram Reading;\nMotherboard Power Sequence;\nHow to Track Motherboard Main Power (+VBAT);\nCharge IC PWM Pin Configuration;\nLaptop Motherboard Test Point;\nLaptop battery circuit;\n3V and 5V circuit diagram mastery;\n1.5V and 1.8V circuit diagram Reading;\n+VCCP circuit diagram Reading;\n+VCC_CORE, CPU circuit diagram Reading;\nVDD and VTT Power, RAM circuit diagram Reading;\nCPU Socket, CPU Parts Circuit Diagram Reading;\nNorthbridge, Graphic Card Circuit Diagram Reading;\nRandom Access Memory Circuit Diagram Reading;\nSouthbridge Architecture, signals, and Circuit Diagram Reading;\nMotherboard Ports and Connectors Circuit Diagram Reading.\nYou will also learn many tips and tricks that will make you a hardware professional and have a deep understanding of Laptop motherboard repair.\nI will guide you step by step with an easy explanation of this course.\nIf you are interested in one of the points we talked about before, then this course is for you.\nWhat are you waiting for?\nEnroll now and join us,\nI'd love to see you in the class.",
      "target_audience": [
        "Beginners curious about motherboard repairing.",
        "Anyone who want learn laptop schematics and motherboard repairing."
      ]
    },
    {
      "title": "Applied Logic (Level 2)",
      "url": "https://www.udemy.com/course/plc_programming/",
      "bio": "This course will give an intermediate-level student the experience necessary to originate complex, logical solutions.",
      "objectives": [
        "By the end of this course, you will be both able and practiced at originating complex ladder logic applications.",
        "The primary and overall objective of this course is to give an INTERMEDIATE PLC programming student, rigorous, practical experience in creating unguided, original ladder logic.",
        "Students will build on the knowledge and understanding of PLC programming they got from \"PLC Programming from Scratch\" by using those instructions and environments and techniques to create real-world solutions to problems defined throughout this course.",
        "Upon completion of this course, students will have the requisite skill set to translate a description of a process into a functioning logical solution."
      ],
      "course_content": {
        "Introduction": [
          "Course Intro: Curriculum / Objectives",
          "Software and Course Notes",
          "Contacting Your Instructor",
          "Student Project Repository"
        ],
        "Intermediate Level Programming Instructions": [
          "Section Intro",
          "Intro to Instructions: RTO, RES",
          "Intro to Instructions: NEG, ABS",
          "Intro to Instructions: RET, TND",
          "Intro to Instructions: AND, OR, NOT, CLR",
          "Intro to Instructions: ASC, AEX",
          "Intro to Instructions: AIC, ACI",
          "Intro to Instructions: ACN, ASR",
          "New Instructions"
        ],
        "Getting the Most Going Forward": [
          "Done Right, This Course Will Prepare You to Succeed"
        ],
        "Digital Control Logic": [
          "Project Specification",
          "How I Built It (Part 1)",
          "How I Built It (Part 2)",
          "How I Built It (Part 3)",
          "Ops Check"
        ],
        "Digital Filling Station": [
          "Project Specification",
          "How I Built It (Part 1)",
          "How I Built It (Part 2)",
          "How I Built It (Part 3)",
          "Ops Check (Part 1)",
          "Ops Check (Part 2)"
        ],
        "Intermission": [
          "Relax and Unwind a Little - Clear You Head"
        ],
        "Inventory Management": [
          "Project Specification",
          "How I Built It (Part 1)",
          "How I Built It (Part 2)",
          "Ops Check"
        ],
        "Multiposition Servo Application": [
          "Project Specification",
          "How I Built It (Part 1)",
          "How I Built It (Part 2)",
          "How I Built It (Part 3)",
          "Ops Check"
        ],
        "Digital Rotameter": [
          "Project Specification",
          "How I Built It",
          "Ops Check"
        ],
        "Hourmeter": [
          "Project Specification",
          "How I Built It",
          "Ops Check"
        ]
      },
      "requirements": [
        "All software required for this course is available for free and links will be provided.",
        "The only OPTIONAL tool we will use in this course which is not free is Microsoft Excel.",
        "You should have already completed \"PLC Programming from Scratch (PLC I)\" before taking this course."
      ],
      "description": "As a PLC programmer, you will usually find yourself working alone, unsupported and with nobody to help you but Google.  Your boss or client will tell you what they need, and the only thing they want to hear from you is, \"Here it is.\"  And when you deliver, it goes without saying that the expectation is - that it WORKS!\nThis is the course (always cheaper on PLC Dojo) the acclimates you to the real world.  This isn't the classroom anymore; this is war!  You vs the PLC.\nIn this course, we hit the ground RUNNING. I designed this course to build upon the theoretical training students received in \"PLC Programming from Scratch\" by taking that knowledge (plus a few new pieces) and constructing original ladder logic applications to solve everyday, industrial problems.\n\nUsing the Rockwell software RSLogix 500, RSLinx and RSLogix 500 Emulate, you will be given various descriptions / specifications for programs and then expected to write each one from scratch.  After, I will walk everybody through my own approach to each problem step-by-step.  Lastly, we'll run each project on the emulator and debug as required before moving on to the next section.\nThis course is 100% practical!  It is expected and assumed that you got the theoretical in my previous PLC course, and as such, this course contains NO REFRESHERS.  This is all new material!  There ARE a few new instructions used in this course, and those will be properly introduced, but you should already know how to use blocks like XIC, XIO, OTE, ONS, SCP, JSR and etc..  Again - this is an INTERMEDIATE course.  It has a PREREQUISITE course before it.  Don't try to walk before you crawl and then get all sour and mad about it when you fall down.\nLet me be clear: you WILL struggle in this course.  That's the whole point.  My first PLC course has a lot of group hugs, hand-holding, warm bottles of milk and hippie drum circles all in a safe, friendly, positive learning environment.  This course is NOT like that.  This is boot camp.  This is you being thrown into the deep end of the swimming pool... with a shark.  If you want to get frustrated, wrack your brain trying to solve hard problems and learn what it's like being a PLC programmer - this is your course!  You'll come out of it better, faster and smarter.  If you're not ready for that yet, take my first course.\n\n\nWhat's covered in each of the five PLC courses I teach here and on my own PLC Dojo site?\n\n\nPLC Fundamentals (Level 1) teaches you how to program with the focus on ladder logic, which is the most popular PLC programming language.  The goal is to teach you everything you need to know to make a PLC do what you want it to do.  You are also given all the software necessary to both CREATE and RUN your own programs live - right on your own computer.\nApplied Logic (Level 2) forces you to take what you've learned and solve problem after progressively harder problem unassisted.  You get a spec and are told simply: \"Make it work, and don't progress until you have.\"  After, you get to watch me solve each one as well.  By the end, you don't just know how to program - you are a PROGRAMMER.\nProcess Visualization (Level 3) gives you both knowledge and experience in FIVE different HMI / SCADA development environments.  By the end, you've created several COMPLETE visualization (screen) projects that you can actually run on your own computer (and SHOW PEOPLE in an interview) with no additional hardware.\nIEC Paradigms (Level 4) is only for the heavyweights.  This course teaches you how to program using all five IEC programming languages (plus one more) in multiple environments.  There are projects as well, so by the end, you have seen it all and DONE it all as well.  There won't be anything anybody can show you that you won't already be familiar with.\nTIA Portal Master Project (Level 5) is the culmination of everything. In that course, you'll program an entire power plant using all five PLC programming languages (in PARALLEL!) with a full HMI. It's a massive and complex project that really showcases your talents in an interview!",
      "target_audience": [
        "This course is a follow-up to \"PLC Programming from Scratch (PLC I)\" and builds upon the knowledge and techniques imparted in that course with NO reviews or primers.",
        "If you have not already completed my course titled \"PLC Programming from Scratch (PLC I)\", you are probably NOT ready for this one. If you have taken it but you've forgotten anything, it would behoove you to go back through it before taking this course.",
        "This course assumes you already know the basic instruction set of RSLogix 500 and are ready to start programming."
      ]
    },
    {
      "title": "HMI Interfacing with PLC",
      "url": "https://www.udemy.com/course/hmi-interfacing-with-plc/",
      "bio": "This course will help know HMI (Human Machine Interface)and build you FIRST HMI Program and get it working with your PLC",
      "objectives": [
        "Build a fully functional HMI Program and Interface it with a PLC Program",
        "Use different type of components inside HMI Screen",
        "Understand the Working principle of HMI",
        "Connect HMI with PLC Practically",
        "Choose the right communication protocol"
      ],
      "course_content": {},
      "requirements": [
        "HMI Programming software (Free and Included)",
        "A Computer",
        "PLC Programming software (Free and Included)"
      ],
      "description": ">>> This course will help you understand HMI (Human Machine Interface) and build your FIRST HMI Program to work with your PLC. <<<\n>>> Continues Updates <<<\n4.4 Star | 400 STUDENTS!!! THANK YOU!!!\nWhat students are saying:\nJoel López says, \"I enjoyed the course and I'm glad you added extra videos showing the components. Very informative.\"\nDan Menezes says, \"Yes, this course is a good match for what I was looking for.\"\nWhy you should take this course?\nLearn the basics of HMI (Human Machine Interface) and how it's used with PLCs.\nBuild your first HMI program.\nUnderstand the five basic instructions in ladder logic.\nProgram for a small, single-purpose machine.\nLearn HMI and PLC interfacing.\nThe course includes lecture videos, quizzes, and an interactive Q/A area.\nWelcome to this course.\nHMI is the acronym for Human Machine Interface and can be designed as just that: an interface between the user and the machine.\nA Human Machine Interface (HMI) is exactly what the name implies: a graphical interface that allows humans and machines to interact. Human machine interfaces vary widely, from control panels for nuclear power plants to the screen on an iPhone.\nIn this course, you will get different types of tutorials:\nTheoretical: To help you understand the basics of HMI control and how you can use different control techniques and implement them using your HMI & PLC.\nPractical: To help you write your own HMI & PLC code for your machine and track errors.\nThe course is structured so that people with different experience levels in control and automation can benefit from the material inside. Books and lectures in PDF are provided for future reference, in addition to 24-hour support for any HMI & PLC program issues.\nYou should take this course because it will help you start your industrial career by building the right theoretical and practical industrial automation knowledge in the PLC field.\nWhat You Will Learn:\nIntroduction to HMI and its applications with PLCs.\nBuilding your first HMI program.\nUnderstanding ladder logic and basic instructions.\nWriting and debugging HMI & PLC code.\nPractical implementation of control techniques using HMI & PLC.\nWho is This Course For:\nBeginners in industrial automation and control systems.\nEngineers and technicians looking to learn HMI and PLC interfacing.\nProfessionals seeking to enhance their automation skills.\nAnyone interested in HMI and PLC technologies.\nRequirements:\nNo prior experience required.\nBasic computer skills.\nWillingness to learn and apply new knowledge.\n\n\nAbout the Instructor:\nEducational Engineering Team\nTeam of Skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading entity in the Microcontroller industry with over 13 Years of Experience in teaching and practical projects. We provide in-depth, step-by-step blueprints on taming complex topics in easy and digestible bite-sized videos.\nHaving been in the Programming and Microcontroller business since 2007, we've catered to students' and educators' needs, teaching over 250k-THOUSAND students and counting through our 100+ courses on Udemy.\nAshraf Said AlMadhoun is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He is the Chief Educational Engineer at Educational Engineering Team, a company founded to explore new trends and technologies and to educate the world.\nOur online courses have helped over 250,000 people globally to excel and make great careers in the industry.\nEducational Engineering Team offers Courses on:\nCircuit Design, Simulation, and PCB Fabrication\nArduino, PIC Microcontroller, and Raspberry Pi\nProgramming in C, Python, and other programming languages\nPLC Industrial Programming and Automation\n3D Design and Simulation\nESP and IoT World",
      "target_audience": [
        "Anyone who want's to learn Control",
        "Anyone who want's to start Drawing HMI programs",
        "Anyone who want's to start making PLC programs",
        "Anyone who want's to control a Machine via HMI"
      ]
    },
    {
      "title": "Make PIC microcontroller based Arduino Development Board",
      "url": "https://www.udemy.com/course/pinguino-a-pic-microcontroller-based-arduino/",
      "bio": "Learn to create a PIC Microcontroller-based Arduino-like board at home, step by step.",
      "objectives": [
        "You will learn how you can easily test your projects without the hustle of using a breadboard to connect PIC Microcontroller based projects",
        "Improve your speed in testing PIC Microcontroller based projects",
        "Make your own Pinguino Board (PIC Microcontroller Based Arduino)",
        "Bootload Your Pinguino Board (PIC Microcontroller Based Arduino)",
        "Know what is the actual brain of Pinguino (PIC Microcontroller Based Arduino)"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Introduction",
          "Exploring Compatibility and Goals Before Building a PIC-Based Arduino Board",
          "Introduction and Required Components",
          "Understanding Project Scope and Components"
        ],
        "Software Requirements": [
          "Download and install Pinguino IDE",
          "Download and Install Proteus Software",
          "Software Setup for Pinguino and Proteus",
          "Installing and Configuring Development Software"
        ],
        "Circuit Design and PCB File": [
          "Schematic",
          "Note"
        ],
        "Boot-loading": [
          "Download Bootloader File",
          "Burn Hex File of Bootloader to Microcontroller",
          "Download Course Files + Schematics",
          "Burning Bootloader to the Microcontroller"
        ],
        "Drivers": [
          "Drivers",
          "Microcontroller Bootloading and Drivers",
          "Installing and Testing Microcontroller Drivers"
        ],
        "Practical Example": [
          "First EXAMPLE BLINK a lED",
          "Blinking an LED – First Program"
        ],
        "Your Turn": [
          "Now Build your own Pinguino"
        ],
        "The End + Bonuses You Shouldn't Miss": [
          "The End",
          "Download and Install MPLAB X IDE"
        ],
        "Practice Test": [
          "Pinguino IDE and Microcontroller Practice Test"
        ],
        "Who we are?": [
          "who we are?",
          "Presenting Your PIC-Based Arduino Development Board for Feedback"
        ]
      },
      "requirements": [
        "Basic experience in Electronics",
        "A Will to apply, not just watch",
        "Anyone interested in Making PIC Microcontroller Based Arduino Like Board"
      ],
      "description": "Welcome to this course.\nHave you ever wanted to try a code on your PIC Microcontroller but didn't have the programmer? Do you wish to have your own Arduino-like PIC Microcontroller board that you can easily plug via USB and start coding your projects? Are you tired of removing a microcontroller from the board to reprogram it for development, testing, and improving your projects?\nThe Solution is here: Our Brand New Course\nThis course will show you, in a step-by-step manner, how to make your very own PIC Microcontroller USB-Enabled Training Board (Just like the Arduino Board).\nAll you need to do is plug the USB cable and start writing your code to the PIC Microcontroller in no time. See the results without having to remove anything, creating a healthy and helpful testing and development environment of your own creation.\nWhat You Will Learn:\nThe essentials needed to start your own T-Shirt business.\nHow to choose the right T-Shirt printing method.\nFinding profitable T-Shirt niches.\nStrategies to promote and sell your T-Shirts.\nStep-by-step guidance on setting up your business.\nThis guide will help you create a PIC Microcontroller-based Arduino-like board at home, step by step. This tutorial shows you how to build a PIC Microcontroller-compatible board, taking you through each component inside the Arduino board, what it does, and how to wire it up.\nWhy This Course?\nFull, Free Lifetime Access: Enroll once and get access for life, including all future lectures and updates.\n30 Day Money-Back Guarantee: We’re confident you’ll find value, but if not, get a full refund—no questions asked.\n24/7 Instructor Chat Support: I will personally answer your questions in the student discussion area, providing support whenever you need it.\nYou will know what the actual brain in the Pinguino board is, what you can do with it, and how to interface it with your PC to send codes freely. You will no longer burn a code to a board you know nothing about its hardware.\nAfter this course, you will be able to make your own board on a breadboard or PCB. The choice is yours since all connections are explained in detail.\nEnroll today and get instant access to:\nEasy-to-watch video lessons\nPractical activities\nDownloadable resources\nPremium instructor support\nLifetime access to course updates\nAccess to our exclusive student community\n100% Money-back Guarantee\nIf you are unsatisfied with the course, or if it just isn't for you, we have a 30-day money-back guarantee.\nWhat are you waiting for?\nJoin us now on this journey, Click \"Enroll Now\" and learn something new today!\nWho Is This Course For:\nAspiring entrepreneurs looking to start an online business.\nIndividuals interested in passive income opportunities.\nBeginners with no prior experience in e-commerce.\nAnyone passionate about T-Shirts and fashion.\nRequirements:\nNo prior experience required.\nA willingness to learn and implement the strategies taught.\nBasic computer skills.\nAbout the Instructor\nProTech Academy\nProTech Academy is dedicated to providing high-quality training and resources for professionals and individuals looking to enhance their skills and productivity. Our experienced instructors are passionate about helping students achieve their goals through practical, hands-on learning.\nAshraf Said AlMadhoun\nAshraf is an experienced educator and entrepreneur, passionate about teaching and helping others achieve their goals. With years of experience in web development and online business, Ashraf brings a wealth of knowledge and practical insights to his courses. His teaching style is clear, engaging, and focused on delivering real value to students.",
      "target_audience": [
        "Electronics Geeks",
        "Arduino Geeks",
        "Anyone Interested in Learning New Things about Pinguino (PIC Microcontroller Based Arduino)",
        "Anyone Interested in Knowing how Pinguino (PIC Microcontroller Based Arduino) board actually works",
        "Anyone Interested in Knowing what each component inside Pinguino (PIC Microcontroller Based Arduino) does"
      ]
    },
    {
      "title": "IEC Paradigms (Level 4)",
      "url": "https://www.udemy.com/course/advanced-plc-programming/",
      "bio": "Functional Block Diagrams, Sequential Function Charts, Instruction Lists, Ladder Diagrams and Structured Text",
      "objectives": [
        "By the end of this course, students will be able to program nearly ANY modern PLC regardless of mfg.",
        "Students will be knowledgeable AND experienced with all five IEC programming paradigms.",
        "Students will know how to lay out a complex PLC program"
      ],
      "course_content": {},
      "requirements": [
        "All software required for this course is available for free and links will be provided.",
        "You should have already completed \"PLC Programming from Scratch (PLC I)\" before taking this course."
      ],
      "description": "You already know how to program a PLC and make it do what you want using Ladder Diagrams. But as you are undoubtedly aware, there are several other \"paradigms\" (programming languages) out there to create logic, and you want to program competently with them all.\n\nAside from learning the paradigms, you also want to develop a comfort level with a few other development environments besides RSLogix 500.  Now, you're going to be learning the Logix5000 environment as well as AB's Connected Components Workbench.  Then we're going to get away from AB and do a lot of work in ABB's Automation Builder where you'll be able to work hands-on with all five IEC paradigms PLUS an ABB proprietary language as well.  As your program grows, you'll be able to simulate it and run your code in real-time every step of the way.\n\n\nWhat's covered in each of the five PLC courses I teach here and on my own PLC Dojo site?\n\n\nPLC Fundamentals (Level 1) teaches you how to program with the focus on ladder logic, which is the most popular PLC programming language.  The goal is to teach you everything you need to know to make a PLC do what you want it to do.  You are also given all the software necessary to both CREATE and RUN your own programs live - right on your own computer.\nApplied Logic (Level 2) forces you to take what you've learned and solve problem after progressively harder problem unassisted.  You get a spec and are told simply: \"Make it work, and don't progress until you have.\"  After, you get to watch me solve each one as well.  By the end, you don't just know how to program - you are a PROGRAMMER.\nProcess Visualization (Level 3) gives you both knowledge and experience in FIVE different HMI / SCADA development environments.  By the end, you've created several COMPLETE visualization (screen) projects that you can actually run on your own computer (and SHOW PEOPLE in an interview) with no additional hardware.\nIEC Paradigms (Level 4) is only for the heavyweights.  This course teaches you how to program using all five IEC programming languages (plus one more) in multiple environments.  There are projects as well, so by the end, you have seen it all and DONE it all as well.  There won't be anything anybody can show you that you won't already be familiar with.\nTIA Portal Master Project (Level 5) is the culmination of everything. In that course, you'll program an entire power plant using all five PLC programming languages (in PARALLEL!) with a full HMI. It's a massive and complex project that really showcases your talents in an interview!",
      "target_audience": [
        "This course is a follow-up to \"PLC Programming from Scratch (PLC I)\" and builds upon the knowledge and techniques imparted in that course with NO reviews or primers.",
        "If you have not already completed my course titled \"PLC Programming from Scratch (PLC I)\", you are probably NOT ready for this one. If you have taken it but you've forgotten anything, it would behoove you to go back through it before taking this course.",
        "PLC II and PLC III are NOT prerequisites for this course."
      ]
    },
    {
      "title": "Become the FASTEST Keyboard Typer",
      "url": "https://www.udemy.com/course/fastest-typing-course/",
      "bio": "Learn how to become the fastest keyboard typer with amazing tips shared by the fastest typer himself.",
      "objectives": [
        "Increase your typing speed drastically",
        "Get more comfortable with your keyboard",
        "Improve your accuracy and minimize mistakes",
        "How to maximize your typing comfort",
        "Develop the confidence to type without looking at the keyboard",
        "Get the best practices for constant improvement",
        "Get LIFETIME Access to Course Materials",
        "Get support from the Instructor whenever"
      ],
      "course_content": {
        "Fast Typing": [
          "Introduction",
          "Basics & Shortcuts",
          "Posture importance & Testing",
          "Touch Typing & Useful Tips",
          "Conclusion & Resources"
        ]
      },
      "requirements": [
        "No prior experience needed, you will learn everything here as long as you have a keyboard!"
      ],
      "description": "This typing course will show you how to become one of the FASTEST typists while mastering proper posture, advanced techniques, and powerful tips to boost your typing performance dramatically.\nAnd who better to guide you than someone who has achieved these results firsthand? My record on 10fastfingers is 180 WPM, and on other platforms, I’ve exceeded 200 WPM as well!\nWhether you need typing speed for work, gaming, studying, or simply to impress, this course covers everything you’ll ever need. You’ll learn how to maximize your speed, improve accuracy, and maintain a professional posture—so you’ll type faster and look confident doing it.\nIf you want to improve quickly and push your limits, I’ll share exactly what helped me reach 180 words per minute (WPM). It wasn’t instant—I experimented, tested, and refined my methods over time. But now, I’ve collected the most effective practices, strategies, and techniques that anyone can apply to see real progress in no time.\nThe course is structured in clear, focused sections, each essential to unlocking your full potential and helping you rise to the top. By the end, you’ll not only have the skills and mindset to compete—you’ll also have the confidence to prove you’re among the fastest typists out there!",
      "target_audience": [
        "All ages",
        "Anyone that wants to improve in keyboard typing"
      ]
    },
    {
      "title": "Verilog on Intel (Altera) FPGA",
      "url": "https://www.udemy.com/course/verilog-on-intel-altera-fpga/",
      "bio": "Basic Lessons",
      "objectives": [
        "Verilog basic knowledge",
        "Verilog coding skill",
        "How to use intel FPGA tools, such as Quartus, Modelsim, USB Blaster etc.",
        "Drive all kinds of sensors"
      ],
      "course_content": {},
      "requirements": [
        "FPGA basic knowledge"
      ],
      "description": "This series of lessons base on Intel (Altera) FPGA. It will include the content as follows:\n(1) Verilog basic knowledge and coding skill;\n(2) FPGA basic knowledge and concept;\n(3) How to use Intel FPGA Quartus software and USB Blaster for coding and debugging.\n(4) How to use modelsim for simulation.\n(5) It will discuss some verilog examples in detail, such as, clock divider, fifo, ram, rom, 7 segment dispaly, uart, sequence detector, keyboard etc.",
      "target_audience": [
        "Freshman for intel FPGA",
        "Beginner of verilog design"
      ]
    },
    {
      "title": "Introduction to MicroPython using the Pyboard",
      "url": "https://www.udemy.com/course/introduction-to-micropython-using-the-pyboard/",
      "bio": "Get introduced to MicroPython and the Pyboard.",
      "objectives": [
        "This course will teach you the programming language MicroPython, it's essential features and the platform or the microcontroller on which it will run, called the Pyboard.",
        "By the end of this course, you will be able to build non-trivial projects using the Pyboard, by programming it using MicroPython.",
        "You will also develop enough confidence to program MicroPython compatible boards other than the Pyboard using MicroPython."
      ],
      "course_content": {},
      "requirements": [
        "To get maximum value out of this course, you should have at least a basic knowledge of programming principles.",
        "Familiarity with Python will help you to follow this course easily.",
        "You will also need to know some of the basic electronic concepts and experience with microcontroller boards like Arduino will help you in following this course."
      ],
      "description": "Update June 2022:\nBill of Materials URLs are Updated\n\n\nThis beginner level course has twin objectives - (1) Introduce you to the Pyboard (2) Introduce you to MicroPython. By the end of this course, you would have developed a firm grasp of the hardware capabilities of the Pyboard and learnt to program it using MicroPython. We assume passing familiarity with the Python Programming language on the part of the learner.\n\nOther than hardware and embedded enthusiasts, this course is also designed to be a gateway to embedded programming for folks coming from hardcore programming background with zero knowledge of electronic development boards. We think hobbyists and hard core engineers (hardware and software) alike will learn much from this course.\nWhat you’ll learn\nThis course will teach you the programming language MicroPython, it's essential features and the platform or the microcontroller on which it will run, called the Pyboard.\nBy the end of this course, you will be able to build non-trivial projects using the Pyboard, by programming it using MicroPython.\nYou will also develop enough confidence to program MicroPython compatible boards other than the Pyboard using MicroPython.\nAre there any course requirements or prerequisites?\nTo get maximum value out of this course, you should have at least a basic knowledge of programming principles.\nFamiliarity with Python will help you to follow this course easily.\nYou will also need to know some of the basic electronic concepts and experience with microcontroller boards like Arduino will help you in following this course.\nWho this course is for:\nA Python developer without hardware experience looking to get started in embedded programming.\nSomeone familiar with conventional microcontroller programming, but are looking to use a high-level language to program the microcontroller.\nAn electronics hobbyist or an enthusiast looking to explore the Pyboard and MicroPython.\nA hardcore electronics engineer looking to learn one of the most exciting developments in the field of microcontroller programming.",
      "target_audience": [
        "A Python developer without hardware experience looking to get started in embedded programming.",
        "Someone familiar with conventional microcontroller programming, but are looking to use a high-level language to program the microcontroller.",
        "An electronics hobbyist or an enthusiast looking to explore the Pyboard and MicroPython.",
        "A hardcore electronics engineer looking to learn one of the most exciting developments in the field of microcontroller programming."
      ]
    },
    {
      "title": "Learn to Design Your Own Boards",
      "url": "https://www.udemy.com/course/learn-to-design-your-own-boards/",
      "bio": "Design a board in 15 hours. Step-by-Step tutorial based on Arduino project (Altium)",
      "objectives": [
        "After this course, you will design your own Arduino like board."
      ],
      "course_content": {},
      "requirements": [
        "You will need Altium Designer software. If you are a college / university student, ask Altium for a student license. In many countries the student license is free."
      ],
      "description": "Learning a basic board design is essential for everyone who would like to work in electronics or who would like to design electronic boards or products. Learning board design in the right software can open you door into many companies, help you to get a well paid job and can be used to design very complex and advanced boards.\n\nDesign a Real Board and Learn Essentials of Using Altium Designer\n- Draw your own schematic\n- Route your PCB and do layout\n- Generate documentation needed to manufacture your PCB\nAltium Designer is a Powerful Software\nDuring this course you will learn how to use Altium Designer software. Altium Designer is a professional software used to design all kind of boards, from very simple ones to motherboards or servers. It is one of the most used software for electronic design. Learning Altium is useful for everyone planning or already working in electronics.\nContents and Overview\nYou will start with Arduino Uno reference schematic. You will learn how to re-draw the schematic, modify it, you will learn how to improve it and how to do PCB layout. The course videos are step-by-step and even if you are new in electronics or you have never used Altium Designer before, by repeating these steps, you will design your own board. By the end of this course, you will create all the necessary documents needed to manufacture the board.\nWithin 15 hours you will learn how to:\n- Draw schematic, including tips for component selection and important circuits\n- Create components, draw schematic symbols and footprints\n- Place components into your PCB\n- Route PCB and useful tips about layout\n- Create 3D model of your board\n- Create board variants with different components fitted / not fitted\n- Create Bill of Material (BOM)\n- Create assembly drawings showing position of components on the board\n- Generate Gerbers, Pick and Place, Drill file and other files needed for manufacturing\n- Prepare professional documents needed to manufacture your PCB and assemble your board\n- Bring your board to life, flash firmware and run a simple LED Blinky example\nFor everyone interested, the manufacturing documents created during this course can be used to build your board. Simply use PCB manufacturing data to get your PCB, buy components from Digikey and solder them by yourself.\n\nEnjoy this course :)",
      "target_audience": [
        "College / University students: During this course you will learn how to work in Altium Designer. Altium is one of the most used software in companies which are designing electronic boards or products. Knowing how to work in Altium can give you an advantage when applying for a job. As a college / university student, you may be able to get a free license of Altium Designer.",
        "Junior / Senior hardware design engineers: During this course you will go through complete process of designing an electronic board. You will learn all the steps exactly the way as they are done in a professional company. After this course you will know everything essential to use Altium Designer in your job. This course can be very useful when you are starting with Altium Designer or when you are moving to Altium Designer from a different CAD system.",
        "Beginners, Hobbyists: If you build your own electronic circuits using wires or breadboards and you have ever wanted to transfer your circuits into a real board or real product, this course can help you. During this course you will learn how you can design your own boards."
      ]
    },
    {
      "title": "Centrifugal pumps : Principles , Operation and Design",
      "url": "https://www.udemy.com/course/centrifugal-pumps-principles-operation-and-design/",
      "bio": "A complete understanding of construction details and functioning of centrifugal pumps for successful plant operation",
      "objectives": [
        "Understand centrifugal pumps working principles for successful operation of your plant and piping systems",
        "Understand centrifugal pumps construction details (impeller, volute, shaft, bearings, packing, mechanical seals, etc)",
        "Lear how to read and interpret your pump curves",
        "Learn how to determine and interpret your piping system curve",
        "Optimize the operation efficiency of your pumping systems",
        "Analyze the problems in operation related to packing, mechanical seals, bearings and flow control",
        "Apply the best practices and guidelines for maintenance, problem solving and troubleshooting"
      ],
      "course_content": {},
      "requirements": [
        "Some engineering or field knowledge is preferable but not mandatory. All the concepts are explained in depth using an easy to understand language to allow students to build their knowledge from the ground up"
      ],
      "description": "Centrifugal Pumps Masterclass: Principles, Design, Operation & Maintenance\nMaster Centrifugal Pump Technology with 3D Animations, Practical Insights, and Real-World Best Practices\nAre you ready to develop in-depth expertise on centrifugal pumps—the backbone of process industries, power generation, and environmental engineering? This comprehensive online course will take you from pump basics to advanced troubleshooting, using clear explanations, engaging graphics, and immersive 3D animations.\nWhy Take This Course?\nEssential for Engineers & Technicians: Gain the critical knowledge needed for successful operation of plant and piping systems in refining, petrochemical, chemical, power, and environmental industries.\nStep-by-Step Learning: Each topic is broken down into simple, easily digestible lessons—perfect for both beginners and experienced professionals.\nHands-On Visualization: Virtual practical exposure with extensive graphics, 3D animations, and detailed cut-sections.\nWhat You’ll Learn\nFundamentals of Centrifugal Pumps:\nOperating principles\nUnderstanding cavitation, NPSH, performance curves, head, and flow\nPump Construction & Components:\nImpellers, shafts, bearings, mechanical seals, and packing\n3D animations and cut-section visuals for real-world understanding\nOperation, Maintenance & Troubleshooting:\nBest practices for reliable operation\nMaintenance guidelines to extend pump life\nTroubleshooting techniques for common pump issues\nCourse Features\nEngaging video lessons with 3D animations and graphics\nVirtual cut-sections for hands-on learning\nDownloadable reference materials and guides\nOne-on-one instructor support: Get help via Udemy Q&A or direct message\nLifetime access: Study at your own pace, anytime, on any device\nWho Should Enroll?\nMechanical, process, and chemical engineers\nMaintenance and reliability technicians\nPlant operators and supervisors\nEngineering students and recent graduates\nAnyone working with pumps in industrial or environmental sectors\nKey Outcomes\nBy the end of this course, you will:\nUnderstand the design, operation, and maintenance of centrifugal pumps\nIdentify and explain the function of key pump components\nInterpret pump performance curves and troubleshoot common issues\nApply best practices for safe, efficient, and reliable pump operation\nReady to Advance Your Engineering Skills?\nPreview the free course videos and explore the curriculum. Join a worldwide community of professionals and students who trust WR Training for clear, practical technical education.\nClick “Enroll Now” and start mastering centrifugal pumps today!\nWR Training – Your Trusted Partner in Engineering Education\nSpread the wings of your knowledge\n\n\n---\nCOURSE UPDATES\nJune 25\nWe have added new video lectures. In addition, new quizzes are being added to help you test your knowledge and emphasize the key learning points. The quiz will include:\nTrue/False questions\nMulti-choice questions\nImages, cross-sectionnal views\nSolved problems\nand much more...\nWhen you think you’ve got a good grasp on a topic within the course, you can test your knowledge by taking the quiz. If you pass, wonderful ! If not, you can review the videos and notes again or ask us for help in the Q&A section.",
      "target_audience": [
        "Chemical, Process and Mechanical Engineers",
        "Product Engineers and Technologists",
        "Operation, technical service and maintenance professionals",
        "Engineers, Consultants and Sales professionals",
        "Technical professionals responsible for piping system inspection",
        "Technical professionals responsible for interdisciplinary energy projects"
      ]
    },
    {
      "title": "Build Your Own Custom Computer!",
      "url": "https://www.udemy.com/course/build-a-computer/",
      "bio": "Learn everything you need to know about computers including how to do your own troubleshooting!",
      "objectives": [
        "Build your own custom computer.",
        "Learn how to optimize your current system.",
        "Learn basic troubleshooting and Windows utilities."
      ],
      "course_content": {
        "Welcome to the Course!": [
          "Welcome to this course on how to build your own computer!",
          "If you feel as if you are stuck or need further clarification, ask me questions!"
        ],
        "Planning Stages: Choosing the Proper Components and Preparing our Build": [
          "What is the primary purpose for your new computer?",
          "Choose the best processor (CPU) that your budget will allow.",
          "Motherboard & RAM can often be bundled up with your CPU.",
          "Selecting our computer case and graphics card.",
          "Choosing a SSD and using a power calculator to choose our PSU.",
          "Choosing a primary operating system.",
          "Which parts can we reuse from our old computer?",
          "Submitting rebates through NewEgg.com"
        ],
        "Get to Know your Hardware: Unboxing each Component": [
          "Our Cooler Master N200 Mini Tower Computer Case.",
          "Our Kingston HyperX FURY 8GB 1600MHz DDR3 random access memory (RAM).",
          "Our Kingston Digital 120GB solid state drive (SSD).",
          "Our Intel Core i3-4170 Dual Core 3.7 GHz Haswell Processor.",
          "Our CORSAIR CX series CX430 430W power supply unit (PSU).",
          "Our MSI Micro ATX Intel Motherboard.",
          "Our EVGA GeForce GTX 950 graphics card (GPU)."
        ],
        "Piecing the Hardware Together": [
          "First step, install your power supply unit (PSU).",
          "Let's secure our motherboard in the case.",
          "After securing the motherboard within the computer case, you can install the CPU",
          "(ERROR) Installing our graphics card.",
          "Hard drive installation.",
          "Installing our 8GB of memory (RAM).",
          "Connecting the necessary power cords, data transfer cables, and LEDs.",
          "Re-installing our graphics card & performing a quick power check.",
          "Closing up our case and preparing for the first boot up.",
          "1st time powering on our new system"
        ],
        "Installing the Necessary Software": [
          "Putting the Windows 7 install disk on a USB drive.",
          "Step-by-step Windows 7 installation.",
          "Downloading the missing on-board LAN (Ethernet) driver (pt.1).",
          "Downloading the missing on-board LAN (Ethernet) driver (pt.2).",
          "Downloading & installing the graphics driver for our Nvidia graphics card.",
          "Window experience index test to check our system."
        ],
        "Getting Started Using Windows 10": [
          "FREE programs to get started with!",
          "Changing which default programs Windows uses to run tasks.",
          "Updating what Windows does with removable drives.",
          "A brief introduction to the toolbar.",
          "Some quick personalization options."
        ],
        "Optional: Linux Installation": [
          "Installing Linux on a virtual machine.",
          "Setting up a live USB with UNetbootin.",
          "Disabling fast start before proceeding with the installation.",
          "Installation alongside Windows 10.",
          "Deleting the Linux partitions.",
          "Ubuntu Linux GRUB bootloader fix."
        ],
        "Bonus Lectures!": [
          "Cleaning up and optimizing a pre-owned computer (pt.1)",
          "Cleaning up and optimizing a pre-owned computer (pt.2)",
          "Cleaning up and optimizing a pre-owned computer (pt.3)",
          "Easily remove malicious (virus, spyware, adware) software from your computer!",
          "How to Delete Unwanted Folders on Windows Desktop (SOLVED)"
        ]
      },
      "requirements": [
        "If you wish to build your own PC you will need various computer parts and an operating system.",
        "An eager mind!"
      ],
      "description": "Thank you for taking the time to view this course on how to build your own personal computer! I have been building my own computers for nearly 10 years now, and it is both a valuable skill & extremely fun to do! Understanding the inner-workings of a computer will help you troubleshoot problems, build superior custom PC's, save money selecting your own components, and elevate your technical skills!\nIf you work in an office or some other administrative job, chances are you spend most of your day using a computer. In fact, computers are typically the most used piece of equipment in both our personal & business lives. I have worked in corporations where administrators were often at the mercy of the IT department, because people in general know very little about how computers actually work. So, learn how to build your very own personal computer today, and level up your technical skills!\n*Update 7/26/16* Complete Ubuntu Linux 16.04.1 LTS installation tutorial.",
      "target_audience": [
        "This course is perfect for people who want to build their own computer!",
        "Take this course if you are curious about the inner workings of a computer."
      ]
    },
    {
      "title": "Building a Processor with Verilog HDL from Scratch",
      "url": "https://www.udemy.com/course/building-a-processor-with-verilog-hdl-from-scratch/",
      "bio": "Using Xilinx Vivado 2020.2",
      "objectives": [
        "Startegies to implement Verilog based CPU",
        "Buliding Custom Intruction Set to meet resource utilizations",
        "Strategies to add Program and Data Memory inside Processor",
        "Strategies to add Jump and Branching Instructions inside Processor"
      ],
      "course_content": {
        "Adding Arithmetic Unit": [
          "Understanding Processor architecture",
          "Agenda",
          "Types of Instructions",
          "Addressing Modes",
          "Understanding Intruction Register",
          "Adding Instruction Register and GPR to Processor",
          "Understanding Arithmetic and Move intructions of Processor",
          "Adding MOV Instructions",
          "Adding Arithmetic Instructions",
          "Adding TB to verify Instructions P1",
          "Adding TB to verify Instructions P2",
          "Design Code",
          "Testbench Code",
          "OneNote Slides",
          "A11 : Testing Multiplication operation"
        ],
        "Adding Logical Unit": [
          "Agenda",
          "Supported Logical Operations",
          "Adding Logical operations to RTL",
          "Adding TB to verify Logical Operations",
          "Analyzing RTL output",
          "Design Code",
          "Testbench Code",
          "OneNote Slides",
          "A21 : Testing Logical Operation in Register mode"
        ],
        "Adding Conditions Flags": [
          "Agenda",
          "Condition flags usage",
          "Logic for Carry flag",
          "Logic for Overflow flag",
          "Logic for Sign, and Zero Flag",
          "Adding Sign flag to RTL",
          "Adding Carry flag to RTL",
          "Adding Zero flag to RTL",
          "Adding Overflow flag to RTL",
          "Verifying operation of condition flags",
          "Design Code",
          "Testbench Code",
          "OneNote Slide"
        ],
        "Adding Program and Data memory": [
          "Agenda",
          "Processor architecture based on Memory model",
          "Working with Memory Generator IP",
          "Code",
          "COE File",
          "Working with Verilog arrays",
          "Code",
          "Adding Memory to Processor RTL P1",
          "Converting independent always block to tasks",
          "Adding logic to read Instructions from Program Memory after fixed delay",
          "Adding Instructions to work with Ports and Data Memory",
          "Program use for testing operation of RTL",
          "Adding TB to verify operation of RTL",
          "Design Code",
          "Testbench Code",
          "OneNote Slides",
          "A41"
        ],
        "Adding Jumping and Branching Instructions": [
          "Agenda",
          "Branch and Jump Instructions our processor support",
          "Operation of Jump Instructions",
          "Adding Jump instructions to Processor RTL",
          "Modifying FSM to incorporate Jump, Branch and Halt : Flowchart",
          "Adding FSM to RTL",
          "Testing existing program with new FSM",
          "Code to Verify Jump and Branch Instructions",
          "Executing Testbench Code",
          "Design Code",
          "Testbench Code",
          "Program memory content",
          "OneNote Slides"
        ]
      },
      "requirements": [
        "Fundamentals of Digital Electronics"
      ],
      "description": "Most of the 21st-century applications require powerful hardware but also along with the centralized controller allowing the development of complex algorithms. As we enter into the AI or Cloud-based devices and as systems complexity is growing daily, the need for incorporating multiple processor instances becomes mandatory as we progress in the AI era. Zynq and Microblaze are two popular alternatives that exist in the market suitable for almost any application requirements. The requirements of using Multiple instances of Processor viz. Multiple instances of Microblaze soft processor or using a hard processor such as Zynq Processor along with single or multiple instances of  Microblazer become necessary to independently handle both Data processing and control requirements. The fundamental challenge of incorporating multiple instances of Soft processors like Microblaze is the number of resources consumed for implementing Microblaze on the FPGA. Since FPGA consists of a limited amount of the FPGA resources, hardware and Software partition plays a prominent role in building complex systems. Another popular alternative approach followed by Embedded Engineers to build a Custom CPU /   Processor with the only required functionality thereby saving a large amount of the resources as compared to adding Microblaze instance. The course will discuss all the fundamentals required to build a simple processor/ CPU with Verilog HDL and strategies to test its functionality. After completing this course, you will understand all the necessary skills required to build Complex CPU architecture to meet requirements. Best wishes for crafting your own processor.",
      "target_audience": [
        "Anyone Interested to build Custom CPU on FPGA for Load Sharing"
      ]
    },
    {
      "title": "Robotics for Beginners - Build Your 1st Robot",
      "url": "https://www.udemy.com/course/robotics-with-arduino-and-magicbot-for-beginners/",
      "bio": "Arduino Programming | Sensors and Actuators | Robotics | Line Following | Obstacle Avoidance | Bluetooth Controlling",
      "objectives": [
        "Learning about robotics & its uses",
        "Learning about basic electronics, sensors & actuators",
        "Learning about wheeled robot control methods",
        "Developing practical robotics applications",
        "Learning basics about control systems",
        "Learning to use Internet of things(IoT) with robots",
        "Arduino Programming"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the course",
          "What is a robot, robot types, new trends in robotics",
          "Sensors used in robotics",
          "Actuators used in robotics"
        ],
        "Basic Electronics & Simulating simple circuits": [
          "Voltage, current and Ohm’s law",
          "Basic electronic components & circuit symbols",
          "Building & simulating a light sensitive dimmer circuit using tinkercad(tm)",
          "What is a microcontroller, benefits of using microcontrollers"
        ],
        "Using Magicbit with Arduino": [
          "Structure of an arduino program & blink",
          "Data types & functions",
          "Reading inputs switches & if else",
          "Loops (for, while)",
          "Reading an analog sensor",
          "PWM & analog outputs"
        ],
        "Intro to Magicbot robotics kit": [
          "Introduction to components comes with the kit",
          "Battery & Motors",
          "Sensors",
          "Motor driving , H-bridge direction control",
          "Steering methods"
        ],
        "Building a Roach Bot": [
          "logic, coding & testing"
        ],
        "Building an obstacle avoidance robot": [
          "Explaining the logic",
          "Introduction to PID controllers",
          "Coding & Testing"
        ],
        "Building a Line Follower Robot": [
          "Basic 2 sensor line follower logic, coding & testing",
          "Building an advanced line follower with PID"
        ],
        "Bluetooth controlled robot": [
          "Control your magicbot with a smartphone using bluetooth"
        ],
        "End of the course": [
          "Congratulations & what is next?"
        ]
      },
      "requirements": [
        "No programming experience is needed",
        "Basic computer skills are required, like installing software"
      ],
      "description": "In this course we are going to teach you from the basics of robotics to building your own robot. 10-20 years ago Robots used to be only in the research institutes & factories, but nowadays robots are in common use in various applications. Even in our households, doing different tasks such as cleaning the floors.\nSo learning robotics from early on is a great investment for the future.\nWe are starting all the way from basic electronics, programming and moving towards robot motion and a bit into control systems & IoT as well. These are few of the most sought after skills in the world today.\nAt the end we are going to teach you how to build several wheeled robots such as,\nLine follower\nObstacle avoid robot\nBluetooth Control robot\nTo effectively follow the practical of this course you need to have a magicbot robot kit with a magicbit development board. But you can build your own robot as well using a generic esp32 board and external components, we will include a guide for that as well.\nCourse is conducted by magicbit, an STEM education company which develops hardware and software tools to enable easy access for innovation, in collaboration with Migara Amithodana, an industrial veteran with years of experience.",
      "target_audience": [
        "Beginners who likes to learn robotics"
      ]
    },
    {
      "title": "Raspberry Pi, Python, and Electronics Bootcamp",
      "url": "https://www.udemy.com/course/getting-started-with-raspberry-pi/",
      "bio": "Kick start Innovation with Complete Raspberry Pi Raspbian Setup and Python 3 programming for LEDs",
      "objectives": [
        "Understand what Raspberry Pi is",
        "Install and Explore Raspbian OS on Raspberry Pi on your own",
        "Get started with Python 3 Programming",
        "Create a simple programs for LEDs"
      ],
      "course_content": {},
      "requirements": [
        "A Windows Computer with Internet Connection",
        "Basic computer knowledge",
        "Zeal and enthusiasm to learn something new",
        "Raspberry Pi Single Board Computer",
        "Minimum 8 GB Class 10 MicroSD Card",
        "SD Card Reader",
        "A pair of keyboard and mouse",
        "A monitor",
        "WiFi Connection"
      ],
      "description": "Get Started with Raspberry Pi, Python 3, and innovation!\nThis is the most comprehensive, yet straight-forward course for the Raspbian OS setup for Raspberry Pi on Udemy!\nWith over 3 hours of video lectures, this comprehensive course leaves no stone unturned for Raspbian OS Setup on Raspberry Pi! This course has Video Lectures and downloadable PDFs containing web resources and Linux commands to teach the complete Raspbian OS setup for Raspberry Pi to beginners.\nThis course will teach you Raspbian OS setup on Raspberry Pi in a very practical, yet easy to understand manner!\nThis course covers a wide variety of topics, including:\nUnboxing of Raspberry Pi\nVarious Models of Raspberry Pi\nVarious plastic cases for Raspberry Pi\nList of download links for various free softwares\nList of Linux commands used in the video course\nList of URLs for further exploration of Raspberry Pi\nRaspbian OS Setup for Raspberry Pi Video Guide\nExplore various IDEs and software packages in Raspbian OS\nLearn the basic electronics components\nProgram LEDs in a beautiful way with Python 3 and Raspberry Pi\nYou will get lifetime access to over 3 hours of video lectures plus corresponding downloadable PDFs for the lectures!\nSo what are you waiting for? Learn Raspbian OS Setup for Raspberry Pi to get started with the amazing revolution in learning and innovation!",
      "target_audience": [
        "Makers, hobbyists, and tinkerers",
        "Teachers and trainers",
        "Students",
        "Programmers and developers",
        "Electronic enthusiasts"
      ]
    },
    {
      "title": "Arduino Simulation and Block Coding",
      "url": "https://www.udemy.com/course/arduino-simulation-block-coding-tinkercad-proteus-visuino-ardusim/",
      "bio": "Start working with different Arduino boards without buying them and start unleashing the power of code in Simulation",
      "objectives": [
        "Control Arduino and different modules without writing a single code, drag and drop to simply auto generate a fully functional code",
        "Simulate Arduino using Software and WebApps",
        "Simulate Arduino UNO Boards",
        "Simulate Arduino Mega Boards",
        "Simulate Arduino nano Boards",
        "Write codes and test them without having an Arduino Board",
        "Test Codes without having a real physical an Arduino Board"
      ],
      "course_content": {
        "Introduction & Getting Started": [
          "Section Intro",
          "Introduction",
          "Who We Are?",
          "Visual Logic and Virtual Prototyping with Arduino",
          "Section Summary",
          "Reading Material"
        ],
        "First Simulation Enviroment": [
          "Section Intro",
          "Download UNO Simulator",
          "Coding and Simulation Your First UNO",
          "Introduction to UnoArduSim: Setting Up and Simulating Your First Arduino Project",
          "Quiz",
          "Section Summary",
          "Reading Material"
        ],
        "Visual Coding using Blocks": [
          "Section Intro",
          "Download and Install Visual Simulation Software",
          "Coding and Simulation Your First UNO",
          "Introduction to Block-Based Visual Coding and Simulation for Arduino",
          "Quiz",
          "Section Summary",
          "Reading Material"
        ],
        "Arduino Simulation: Proteus": [
          "Section Intro",
          "Installing Arduino Library For Proteus",
          "Downloading and Installing Proteus Software",
          "Adding Arduino Library to Proteus",
          "Your First Code in Arduino Coding Software",
          "Editing the code and Getting the Hex File",
          "Load the hex file and Run the Simulation",
          "Creating and Simulating an Arduino Project in Proteus",
          "Quiz",
          "Section Summary",
          "Reading Material"
        ],
        "3D Arduino and Electronics Simulation": [
          "Section Intro",
          "Sign Up in the website",
          "Explaining the Interface and Simulating your First Circuit",
          "Editing Components",
          "Wiring Components",
          "Adding Components",
          "Breadboard and RGB Leds",
          "Series and Parallel Circuits",
          "Arduino led control",
          "Dealing with Multiple LEDs and Breadboard using Arduino",
          "Fading LED with Analog Output",
          "Reading Digital Input",
          "Reading Analog Value",
          "Using Serial Monitor",
          "Dealing with RGB Leds with Potentiometers",
          "Exploring Arduino and Electronic Components in 3D Simulation",
          "Quiz",
          "Section Summary",
          "Reading Material"
        ],
        "Practice Test": [
          "Arduino Simulation and Visual Coding Practice Test"
        ],
        "Course Project": [
          "Course Project",
          "System Showcase: Block-Coded Arduino Project in Virtual Environment"
        ],
        "Course Wrap-Up": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Have A Computer",
        "Have A basic Experience in browsing the internet",
        "Have a Will to apply",
        "No materials required if you only wish to view the course"
      ],
      "description": ">>> The Arduino is an open-source electronics platform based on easy-to-use hardware and software. Sensing the environment by receiving inputs from many sensors, Arduino affects its surroundings by controlling lights, motors, and a number of other accessories. It's intended for anyone making interactive hardware projects and in this course, we will make it easy for you to Design and Simulate Arduino Boards and Start Testing Your Codes Freely. <<<\n\n\nWhy you should take this course?\nLearn Arduino without buying expensive hardware\nUse Arduino simulation to see how code works\nLearn the basics of the most popular programming languages for robotics\nNo need for a specific hardware, learn on your computer with simulation\nImprove your cognitive skills at work and at home\nGain knowledge to design your own creations\n\n\nWelcome to Design and Simulate Arduino Boards and Test Your Code course.\nIn this course, you will learn how to Simulate different Arduino Boards in A Professional Simulation Environment. It will help you unleash your full coding potential without buying any of the Arduino boards.\nThis course will help you test your codes and schematics for Arduino without the risk of burning your board. No More bad connections or wrong codes.\nContents and Overview This course is designed for anyone interested in learning electronic design. You don't need to have any previous experience, and all you need is a computer.\nBoards that can be Simulated: Arduino Uno, Mega, Nano, zero, and others",
      "target_audience": [
        "Arduino Geeks",
        "Anyone looking to learn Arduino but don't want to buy the boards",
        "Anyone looking to learn Arduino without spending any money buying different boards",
        "Anyone starting their journey in Microcontrollers"
      ]
    },
    {
      "title": "Cell Phone Motherboard Repair course for beginners - mobile",
      "url": "https://www.udemy.com/course/cell-phone-motherboard-repair-course-for-beginners-mobile/",
      "bio": "Cell Phone Repairing, mobile phone repair, motherboard phone repair, repair mobile cell phone basics, iPhone repair, IT",
      "objectives": [
        "Learn cell phone repairing basics;",
        "Learn Cell phone architecture;",
        "Understand Smartphone circuits;",
        "Learn how to troubleshoot diagnose and repair cell phones;",
        "Learn how to check ICs;",
        "Learn how test and check smartphone components using multimeter and much more."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Cell Phone Motherboard Overview"
        ],
        "Cell Phone Motherboard Repairing": [
          "Cell Phone Motherboard Architecture",
          "Cell Phone Motherboard Parts and Components",
          "Cell Phone Motherboard Common Faults",
          "How to check switches serviceability",
          "How to check ICs serviceability on mobile cell phone",
          "How to replace failed components in cell phone motherboard",
          "Cell phone motherboard connectors studying",
          "Cell phone motherboard Buses and tracking signals analysis",
          "Learn how to check and test motherboard components",
          "Learn how to diagnose cell phone motherboard",
          "Learn Cell Phone motherboard components symbols",
          "Conclusion"
        ]
      },
      "requirements": [
        "No experience needed. I will teach you everything you need to know;"
      ],
      "description": "Constant updates.\n- 14 Reasons why you should choose this course\nThe course will teach you Everything about Cell Phone Motherboard Repairing.\nThe course is created with perfect care by a computer engineer;\nOne-On-One Support;\nThe course is not long, so you can complete it in a short time, and then enjoy your new experiences;\nYour inquiries will be answered in a short time with a full explanation of any question;\nConstant updates.\nSimple and easy-to-understand explanation with examples;\nA certificate will be provided upon completion of the course;\nYou going to understand Cell Phone Motherboard circuits;\nYou will learn how to follow and track signals in the Cell Phone motherboard;\nYou are going to learn mobile phone architecture;\nyou going to learn how to check and test cell phone connectors;\nYou will learn and master all cell phone motherboard component symbols\nThis course will transform you from a beginner to a Pro.\nTopics that we will be discussing in this course are :\nCell Phone Motherboard Architecture;\nCell Phone Motherboard Parts and Components;\nCell Phone Motherboard Common Faults;\nHow to check switches' serviceability;\nHow to check ICs serviceability on a mobile cell phone;\nHow to replace failed components in cell phone motherboard;\nCell phone motherboard connectors studying;\nCell phone motherboard Buses and tracking signals analysis;\nLearn how to check and test motherboard components;\nLearn how to diagnose cell phone motherboards;\nLearn Cell Phone motherboard components symbols.\nYou will also learn many tips and tricks that will make you a hardware professional and give you a deep understanding of mobile cell phone motherboard repair.\nI will guide you step by step with an easy explanation of this course.\nIf you are interested in one of the points we talked about before, then this course is for you.\nWhat are you waiting for?\nEnroll now,\nAnd let's get started.",
      "target_audience": [
        "Anyone who want to master cell phone repairing"
      ]
    },
    {
      "title": "Hands-On Robotics with Arduino, Build 13 robot projects",
      "url": "https://www.udemy.com/course/robotics-for-beginners-build-time-control-robot-from-scratch/",
      "bio": "Using Arduino build a Voice control robot, Black line follower, Light follower/repeller robot, Smartphone control robot",
      "objectives": [
        "Construct a Robot from Scratch and move in 6 different directions",
        "Understand the working of different components necessary for working of Robot",
        "Downloadable source codes for all 6 directions"
      ],
      "course_content": {},
      "requirements": [
        "No necessary requirement, Basic knowledge of Electronics will be great advantage"
      ],
      "description": "Curious about controlling a Robot with smartphone, you have come to the right place. Learn the basic concept and programming required to design a fully functional Arduino Robot. For this course you will need the simplest but the most powerful and advanced Micro-Controller board called the Arduino UNO and a Bluetooth along with some basic electronics component.\n\n\nFundamentals of Robotics\nRobotics is fundamentally a branch of technology that deals with the design, construction, operation, and application of robots. It is a powerful tool to understand the basic concepts of Computer Science, Mechanical engineering, and Electronics engineering. In this Arduino robot course will use a simplified version of C++ language for programming our Robot using the Arduino IDE.\n\n\nCourse Content and Overview\nThis course is designed for students interested in controlling an Arduino Robot with Android Smartphone. No coding experience is required; all you need is an Arduino, Bluetooth, some low cost hardware and electronics component for building the Robot. We will start from basics of Arduino programming and then move to higher topics.\n\n\nBasics of Arduino\nIn this course you will first understand the basics of Arduino and then we will look at Arduino installation & setting up Arduino with your Computer or Laptop\n\n\nConstruction of Robot\nAfter understanding the basics of Arduino next we will construct our Arduino Robot. All the components required for building this Robot are mentioned in Section 2\nTime Control Robot\nIn the Time Control Robot section you will first understand the working of Motors Driver and how to control 2 motors using a single motor driver.\nWe will then write Arduino program so that the Robot moves in the following direction for a specific period of time\nForward\nBackward\nAxial Left\nAxial Right\nRadial Right\nRadial Left\nStop\n\n\nSerial Communication\nSerial Communication is essential for sending and receiving data between Electronic hardware devices. We will use Serial Communication to control Led’s, Potentiometer sensor and the Arduino Robot.\nIn this section you will learn to read analog values from sensors and display it on the Serial Monitor. You will also write (send data) values from PC to Arduino.\n\n\nAndroid Programming\nAndroid OS has taken the world by storm after its inception nearly 10 years back. One of the major benefits of owning an Android smartphone is the ability to use it as a Remote Control for controlling Robots and other Electronics devices.\nIn this course we will design 5 Android Applications using a tool called AppInventor2. AppInventor2 is a Graphical Programming Software using which even a non programmer can design amazing Android apps in a matter of minutes.\n\n\nControlling Arduino Robot using Android Smartphone\nWe will create 3 android applications for controlling the Arduino and each application works in different manner\nSmartBot\nIn the Smartbot android app we will create 5 buttons (Forward, Backward, Left, Right and Stop). When the user clicks on any of the button the Robot will move in that particular direction.\n\n\nAcceleroControl Robot\nIn the AcceleroControl Robot android app, we will use the accelerometer sensor from the android smartphone to control the Robot. So when the user tilts the robot in forward direction it will will move forward, when the Smartphone is kept flat the Robot will Stop. Similarly by pointing the smartphone in direction you can control the direction of the Arduino Robot.\n\n\nVoiceControl Robot\nIn the Voice Control Robot we will move our Robot in different direction by giving voice inputs\n\n\nBlack Line Follower\nIn Black line follower robot, we will first understand the working principal of the IR sensor and then attach it to our robot. After this we will understand the programming logic and then program the arduino robot to follow a black line.\n\n\nWhite Line Follower\nIn white line follower, we will first understand the working principal of White line follower robot and then we will reverse the black line follower program so that the arduino robot follows a white line\n\n\nObject Follower Robot\nIn Object Follower robot, we will first understand the working principal of this robot. After this we will write the Object Follower robot program so that the arduino robot can follow an Object.\n\n\nObject Repeller Robot\nIn Object Repeller robot, we will first understand the working principal of this robot. After this we will write the program so that arduino robot keeps repelling or keeps moving away from the object.\n\n\nObject Avoider Robot\nObject avoider robot is similar to object repeller robot, but in certain condition, it will simply avoid the object instead of moving away from it.\n\n\nLight Follower Robot\nIn Light Follower robot, we will first understand the working principal of this robot. After this we will write the Light Follower robot program and use the smartphone’s flash light so that the arduino robot can follow it.\n\n\nLight Repeller Robot\nIn Light Repeller robot, we will first understand the working principal of this robot. After this we will write the program so that arduino robot keeps repelling or keeps moving away from a light source.\n\n\nLight Avoider Robot\nLight avoider robot is similar to light repeller robot, but in certain condition, it will simply avoid the object instead of moving away from it.",
      "target_audience": [
        "Students who are interested in learning the basics of Robotics",
        "Arduino Lovers who want to learn more than Arduino basics",
        "Students from Mechanical, Electronics, Electrical, Computer Science, Robotics background are perfectly ideal for this course"
      ]
    },
    {
      "title": "Embedded MicroPython from Ground Up™",
      "url": "https://www.udemy.com/course/embedded-micropython-from-ground-uptm/",
      "bio": "Develop Embedded Drivers and Firmware using the Python Programming Language",
      "objectives": [
        "Develop Embedded Drivers and Firmware using the Python Programming Language",
        "Mix Python with C/C++",
        "Develop General Purpose Input/Output (GPIO)Drivers",
        "Develop Power Management Drivers",
        "Develop General Purpose Timer Drivers",
        "Develop Timer Output Compare Drivers",
        "Developer Timer Input Capture Drivers",
        "Develop PWM Timer Drivers",
        "Develop RealTime Clock (RTC) Drivers",
        "Develop Watchdog Timer (WDG) Drivers",
        "Develop Analog-to-Digital Converter(ADC) Drivers",
        "Develop Analog-to-Digital Converter (ADC) Time Triggered Drivers",
        "Develop Digital-to-Analog Converter (DAC) Drivers",
        "Develop Universal Asynchronous Receiver/Transmitter (UART) Drivers",
        "Develop Serial Peripheral Interface (SPI) Drivers",
        "Develop Inter -Integrated Circuit (I2C) Drivers"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know.",
        "NUCLOE-F411 Development Board"
      ],
      "description": "Whether you are new to Python programming or not you need to take a look at this course as an embedded developer.\nDo you want to know how to write clean and efficient embedded drivers for stm32 microcontrollers using the python programming language?\nIf so, then welcome to Embedded MicroPython from Ground Up™\n\n\nMicroPython is an efficient implementation of Python3 optimised to run on microcontrollers.\n\nNow, why should you ....\n\n\nLearn MicroPython as an embedded systems developer?\nThe simplicity of the python programming language makes micropython very easy to learn.\nIt is very easy to use, and allows you to develop complex firmware and drivers in python with few lines of code\nIt has an extensive software library which you can import into your project to build very complex solutions. E.g. network socket programming.\nIt is extensible with C/C++ and assembly, so you can mix assembly and c with micropython to improve code efficiency or simply implement routines that you are more comfortable implementing in low-level code.\n\n\nSo with that understood, let me tell you…\n\n\nExactly What You’re Getting\n\n\nThis course can be divided into 3 major sections.\n\n\nFirst Section\nThe first section provides practical python essential training for embedded developers. This section is for developers who are not familiar with the python programming language and those who want to brush up on their python development skills. This is required because we need to know who to write python code before we can develop our firmware and drivers in python.\n\nSecond Section\nThe second section deals peripheral driver development. Over here we shall develop drivers for all the standard peripherals of our STM32 microconctoller.\n\nWe shall develop the following drivers:\n\n\nGeneral Purpose Input/Output (GPIO)Drivers\nPower Management Drivers\nGeneral Purpose Timer Drivers\nTimer Output Compare Driver\nTimer Input Capture Driver\nPWM Timer Driver\nRealTime Clock (RTC) Drivers\nA Watchdog Timer (WDG) Drivers\nAnalog-to-Digital Converter(ADC) Drivers\nAnalog-to-Digital Converter (ADC) Time Triggered Drivers\nDigital-to-Analog Converter (DAC) Drivers\nUniversal Asynchronous Receiver/Transmitter (UART) Drivers\nSerial Peripheral Interface (SPI) Drivers\nInter -Integrated Circuit (I2C) Drivers\n\n\nLast Section\n\nIn the final section we shall develop firmware for addressing advanced topics such as:\nAdding Assembly Language Code to MicroPython\nAdding C Language Code to MicroPython\n\n\nPlease take a look at the full course curriculum. I hope to see you in the course.",
      "target_audience": [
        "If you are an absolute beginner to embedded systems, then take this course.",
        "If you are an experienced embedded developer and want to learn how to professionally develop embedded applications for ARM processors, then take this course."
      ]
    },
    {
      "title": "Build Autonomous Navigation Robot: ROS Simulation & Hardware",
      "url": "https://www.udemy.com/course/build-your-own-ros-powered-autonomous-robot/",
      "bio": "Learn how to make a low cost autonomous delivery robot at home from scratch on your own using Robot Operating System!",
      "objectives": [
        "Design and build your customized physical robot",
        "Autonomous navigation using Robot Operating System",
        "Create a map of your house using the lidar scanner of the robot",
        "Command robot to go to any accessible location on the created map",
        "Interact with the robot using a mobile app, joystick, keyboard, push-button, or remote computer",
        "Monitor robot updates via LCD, mobile app, sound, and status LEDs",
        "Automate delivery of small payload and return to home base"
      ],
      "course_content": {
        "Introduction": [
          "About This Course",
          "Introduction",
          "Theory",
          "ROS Navigation Stack",
          "Resources"
        ],
        "Building Robot Step by Step": [
          "Outline",
          "Simulated Robot - Introduction",
          "Preliminary Setup",
          "Building Robot Model",
          "Design Robot Parts Using a 3D Modelling Software",
          "Add the Designed Parts to URDF File",
          "Visualize the robot in RVIZ",
          "Load The Robot Into a Virtual World in Gazebo",
          "Tele Operate The Virtual Robot Using Keyboard",
          "Tele Operate The Virtual Robot Using Joystick",
          "Tele Operate The Virtual Robot Using Android Device",
          "Create Map of The World Using Slam",
          "Perform Autonomous Navigation Using Gazebo",
          "Building Real Robot",
          "Preliminary Software Setup",
          "3D Print The Robot Parts",
          "Electronic Components Used",
          "Wiring",
          "Assembling",
          "Motor Gear Ratio Calculation",
          "Write Motor Controller And Ros Interface",
          "Differential Driver And Odometry",
          "Tele Operation",
          "Odometry Correction - Rotation",
          "Odometry Correction - Translation",
          "Map Building",
          "Autonomous Navigation",
          "Navigation Tuning",
          "Robot Upstart",
          "Autonomous Delivery Application"
        ],
        "Conclusion": [
          "Possible Improvements",
          "Conclusion"
        ]
      },
      "requirements": [
        "Interest in robotics",
        "Basic programming (python)",
        "ROS basics",
        "Arduino basics",
        "3D Printing basics (optional)"
      ],
      "description": "There are many courses on ROS which provides good insights on theoretical aspects and building Robots in simulation. But, in this course, we will be discussing how to build a low cost ROS-powered autonomous robot at home from scratch. Step-by-step instructions will be given in detail on how to build the Autonomous Robot.\nThis course covers lessons on how to physically build a customized Robot including elements like Mechanical design, Electronic circuit assembly, software configuration, ROS navigation stack integration, Arduino integration, Software simulation, real-world navigation and a sample delivery application\nBy the end of this course, you will be able to achieve the following:\nDesign and build your customized physical robot with autonomous navigation capability\nCreate a map of your house using the lidar scanner of the robot\nCommand robot to go to any accessible location on the created map\nInteract with the robot using a mobile app, joystick, keyboard, push-button, or remote computer\nMonitor robot updates via LCD, mobile app, sound, and status LEDs\nAutomate delivery of small payload and return to home base\nThis course is for anyone interested in Robotics who wish to learn about autonomous navigation in robots and build a low-cost ROS Powered robot platform.\nEverything you need to know about building this robot would be explained in this course. A basic understanding of python programming language, ROS basics, Arduino basics, and little bit of 3D printing knowledge would be handy.\nNow let's start to build our Robot !",
      "target_audience": [
        "Anyone interested in Robotics who wish to learn about autonomous navigation in robots",
        "To build a low-cost ROS Powered robot platform"
      ]
    },
    {
      "title": "WebMaster Arduino: Control Anything, Anytime, Anywhere",
      "url": "https://www.udemy.com/course/arduino-web-control-step-by-step-guide/",
      "bio": "Unlock the Power of Internet-Based Device Control with Arduino and Simple Web Coding",
      "objectives": [
        "Make your own Web Controlled System using Arduino",
        "Learn Working Principle of Ethernet Shield and web control",
        "Interface Ethernet Shield with Arduino"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Section Intro",
          "Introduction",
          "Introductory Interview: Integrating Web Control with Arduino Systems",
          "Required Materials",
          "Section Summary",
          "Reading Material"
        ],
        "Software Requirements": [
          "Section Intro",
          "Software Requirements",
          "Quiz",
          "Section Summary",
          "Reading Material"
        ],
        "Circuit": [
          "Section Intro",
          "Circuit Diagram",
          "Very Important Note: Review Process",
          "Create a Simple LED Control Circuit Using Arduino",
          "Section Summary",
          "Reading Material"
        ],
        "Code": [
          "Section Intro",
          "Code Overview",
          "Code Explanation Part One",
          "Code Explanation Part Two",
          "Quiz",
          "Code Explanation Part Three",
          "Resources",
          "Code Analysis and Implementation for PCB Design",
          "Section Summary",
          "Reading Material"
        ],
        "The End": [
          "Section Intro",
          "End",
          "Section Summary",
          "Reading Material"
        ],
        "Download and Install Software Section": [
          "Section Intro",
          "Download and Install Arduino Software",
          "Download and Install Circuit Design and Wiring Software",
          "Quiz",
          "Section Summary",
          "Reading Material"
        ],
        "Practice Test": [
          "Section Intro",
          "Arduino Circuit and Code Fundamentals Practice Test",
          "Section Summary",
          "Reading Material"
        ],
        "Who we are": [
          "Section Intro",
          "Who We Are?",
          "Section Summary",
          "Reading Material"
        ],
        "Course Project": [
          "Section Intro",
          "Course Project",
          "System Demo: WebMaster Arduino Control System",
          "Section Summary",
          "Reading Material"
        ],
        "Course Wrap-Up": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic experience in Electronics",
        "Basic experience in Arduino",
        "A Will to apply, not just watch"
      ],
      "description": "Introduction:\nHave you ever dreamed of controlling your home lighting from the beach? Or maybe feeding your pet while you're at the office? Imagine monitoring your garden irrigation system from another continent! With \"WebMaster Arduino,\" you can make all these dreams a reality.\nIn this course, you will learn to control devices and gadgets around you with the click of a button from anywhere in the world. This is the ultimate guide to unlocking the power of internet-based device control with Arduino and simple web coding.\nWhy Choose This Course?\nProfessional Skills: Learn to connect an Arduino Ethernet Shield to make your device internet-based.\nSeamless Online Actions: Detect and respond to online actions effortlessly.\nInternet Control Mastery: Understand the principles of internet control.\nVersatile Interface: Interface various electronic elements with your Arduino.\nAdvanced Coding: Program, wire, and burn code like a pro.\nWhy Web-Based Control is The Future:\nThe future is digital, and with the Internet of Things (IoT) taking over the world, understanding how to control devices over the internet isn't just cool—it's essential! This course will empower you to join the IoT revolution.\nWho Is This Course For?\nBeginners: No prior programming experience needed. We'll cover the basics!\nTech Enthusiasts: Take your Arduino projects to the next level.\nProfessionals: Learn a valuable skill that can set you apart.\nCourse Features:\nComprehensive Modules: From basics to advanced topics, we've got you covered.\nHands-On Projects: Apply what you learn in real-world scenarios.\nEasy-to-Follow Guides: Step-by-step instructions to ensure you're never lost.\nUnlimited Access: Learn at your own pace, from anywhere, at any time.\nCommunity Support: Join forums and webinars, and get your questions answered by experts.\nStudent Testimonials:\nBobbie Smith: \"The instructor is thorough and concise. Thank you.\"\nSusi Kumar Prava: \"Great, Thank you.\"\nKalid Al-ahmadi: \"I love it, very nice.\"\nTake Action Now!\nStop imagining and start building your own web-controlled world. Click the 'Enroll Now' button to begin your journey into the exciting world of Arduino web control. \"WebMaster Arduino: Control Anything, Anytime, Anywhere\" - because the future is just a click away. Welcome to the revolution!\n\n\nBasic Info\nCourse Locale: English (US)\nCourse Instructional Level: All Levels\nCourse Category: IT & Software\nCourse Subcategory: Hardware\nAbout the Instructor\nEducational Engineering Team\nTeam of Skilled Engineers Sharing Knowledge with the World\nEducational Engineering Team is a leading team in the microcontroller industry, with over 13 Years of Experience in teaching and practical projects. We strive to put all our hands-on experience into these courses, going into the depth of topics and providing step-by-step blueprints to make complex topics easy to understand.\nAshraf Said AlMadhoun is an educator, Mechatronics engineer, electronics and programming hobbyist, and Maker. He creates online video courses on the EduEng YouTube Channel (More than 4 million views, 20k+ subscribers) and is the author of four microcontroller books. As the Chief Educational Engineer since 2007 at Educational Engineering Team, Ashraf’s mission is to explore new trends and technology and help educate the world, making it a better place.",
      "target_audience": [
        "Arduino Geeks",
        "Electronics Geeks",
        "Anyone Interested in Learning New Things about Arduino",
        "Anyone Interested in Learning Arduino Web Control"
      ]
    },
    {
      "title": "How to Build a Personal Computer 2025",
      "url": "https://www.udemy.com/course/personal-computergaming-rig-fundamentals/",
      "bio": "Build a Complete PC in less than 2 Hours",
      "objectives": [
        "What are bottlenecks and how to minimize them",
        "The different system components that make up a PC",
        "Assembling the system from motherboard insertion all the way to system startup",
        "Different types of Air Pressure that occurs in a Computer case",
        "How to turn the USB into a windows bootable drive",
        "How to Format a HDD or SSD using Disk Management in windows",
        "How to install Windows to the PC from the USB drive"
      ],
      "course_content": {},
      "requirements": [
        "Phillips Head (PH2) screwdriver, needle nose pliers",
        "Antistatic Mat & Wrist Strap",
        "USB Drive (8GB) for windows installation",
        "Computer Parts to build PC"
      ],
      "description": "A must have for any student who may not know anything about the PC industry\nHave you ever wondered how to build a gaming PC and don’t know where to start?\nWant to build the best gaming rig with the latest and greatest technology available at the moment?\nHow to Build a Personal Computer/Gaming PC contains all the necessary information required to help you decide on the computer components you want to use in order to achieve the types of games you want to play at 60 FPS or higher. Whether its MMORPGS, Driving Simulators, or your favorite First-Person Shooter, the information provided will get you there.\nThe content that will be covered in this course includes:\nBOTTLENECKS\n· Features: Types of bottlenecks and what slows down your PC\n· Benefits: How to reduce bottlenecks and make your computer run much more efficiently and effectively\nSYSTEM ASSEMBLY AND DISASSEMBLY\n· Features: Computer Assembly Preparation of all components, Looking at Electrostatic Discharge Protection (ESD)\n· Benefits: To be able to Successfully prepare and assemble the computer\nPC COOLING\n· Features: Learn about positive and negative pressure, Case Fans and Ventilation\n· Benefits: Apply using the fans theory to get the most out of your computer case with ventilation and cooling\nHOW TO FORMAT A HARD DRIVE/ SOLID STATE DRIVE\n· Features: Learn how to Format permanent storage, getting your storage ready to use after formatting\n· Benefits: Be able to transfer data and to install the Windows OS\nHOW TO MAKE A BOOTABLE WINDOWS USB\n· Features: Turn the USB Drive into a windows Bootable Drive\n· Benefits: Be able to Install windows to the Computer Via USB. Based on the Write Speed of the Drive will determine the Installation’s speed.\nHOW TO INSTALL WINDOWS FROM SCRATCH\n· Features: Install Windows Via USB step by step process\n· Benefits: Complete the installation process and get the computer to a usable state!\nThe Content that contains all your hardware components will be explained in sufficient detail so you can make the knowledgeable decision on what to get for your gaming rig. Also, windows installation from a USB will be covered!\nWhen it’s all finished here, you will be up and running with the gaming rig of your dreams!  Happy building!\nFeedback is welcomed to enhance the course to your desire, so don't forget to give it a rating and a review\nMore content will be added to the course in the future so be sure to enroll and enjoy all the videos at your expense\n100% Money Back Guarantee if not satisfied",
      "target_audience": [
        "Anyone with no prior knowledge",
        "Anyone with knowledge, but needs updating on the latest technology"
      ]
    },
    {
      "title": "Laptop motherboard repair Technician course",
      "url": "https://www.udemy.com/course/advance-laptop-motherboard-repair-master-course/",
      "bio": "basics electronics /power sequence and sections/ bios programming /schematic diagram/ troubleshooting",
      "objectives": [
        "Power sequences",
        "Knowledge of basic electricity and Electronics",
        "All laptop sections and Voltage regulators are explained",
        "laptop Motherboard Troubleshooting",
        "Bios programming",
        "Knowledge of Laptop schematic diagram"
      ],
      "course_content": {},
      "requirements": [
        "Any one who interested to learn Laptop motherboard Repair. Mobile phone and Computer Hardware Technicians"
      ],
      "description": "Basic electronics for Begineers included.\nExperienced and Beginners can enroll to this course. This course covers Pdf pf basic electricals,AC DC fundamentals, Ampere and voltages, Potential differance, Essantial parts of circuits, Active and passive components, Through hole and SMD Components principles,Details SMD Components, Semiconductor Basics, Diode , working principles of diodes, working principle of transistors are covered. working principles of Diode, transistors, mosfets are included. Each lesson wil have a Pdf Resources that the students can go through it and can understand with out any doubts. Basic electronics to repair the laptop motherboard . All the topics of Laptop Motherboard and primary voltages , secondary voltages are covered. The working principle of voltage regulators is briefly explained. Different sections of the laptop motherboard are covered separately. CPU Core Voltages, graphics Core Voltages, VCCP, VTT, VCCPSA voltages are covered. Run voltages, VS Voltages, also includedTroubleshooting lessons gives you a thorough knowledge of the motherboard. Anyone can repair any motherboard with confidence. almost every theary aspects of lessons for learning laptop motherboard repair are included.\nAnyone who is interested in Laptop repairing OR Who is in the field of laptop or mobile phone repair who needs updation OR who are planning to become an expert in the laptop repair field can enroll  this course.",
      "target_audience": [
        "Anyone interested in Laptop repair ,Computer  Hardware and Mobile phone service engineers who needs to update or who wish to repair their own laptops to save some money."
      ]
    },
    {
      "title": "OMRON PLC Programming Using CX-Programmer (PLC-SCADA-3)",
      "url": "https://www.udemy.com/course/learn-omron-plc-cx-programmer-from-scratch-to-expert-level/",
      "bio": "Practical Course on Omron PLC Programming with Industry Based Example using CX-Programmer",
      "objectives": [
        "Basics of Omron PLC.",
        "Bit Logic and Latching and Unlatching Concept.",
        "Timer and Counter.",
        "Compare Instruction (= =, < >, > =, < =, > and <)",
        "Mathematical Instruction.",
        "Move, Keep, Increment and Decrement Instruction.",
        "Program Control Instruction.",
        "You will be enriched with the latest technical knowledge related with the industrial automation.",
        "Students can establish their career in various manufacturing industries like Oil and Gas, Water/Waste Water Treatment, food & Beverages, Power Plants, Manufacturing Process, Chemicals and Pharmaceutical Industries, Power Generation, Automotive, Fabricated Metals, Packaging Process, Metals and Mining’s Aerospace, etc."
      ],
      "course_content": {
        "Overview of PLC": [
          "Introduction to PLC",
          "Block Diagram of PLC",
          "Working Principle of PLC (Scan Time and Scan Cycle of PLC)",
          "What is Sink and Source concept ?",
          "PNP and NPN wiring of sensor with PLC (Example Sink and Source Input)",
          "Wiring Connection and Communication of PLC"
        ],
        "Basics of Omron PLC": [
          "Introduction to Omron PLC",
          "Functions and features of Omron PLC",
          "Software Interfacing for Omron PLC",
          "Addressing Format in Omron PLC"
        ],
        "Basics of Ladder Diagram": [
          "Bit Logics (NO Type)",
          "Bit Logics (NC Type and Output Coil)",
          "Programming Language of PLC with Basic Example",
          "Basic Programming Rule 1",
          "Basic Programming Rule 2",
          "Basic Programming Rule 3",
          "Basic Programming Rule 4",
          "Basic Programming Rule 5",
          "Basic Programming Rule 6",
          "Problems-1 with Solution",
          "Problems-2 with Solution",
          "Problems-3 with Solution",
          "Problems-4 with Solution",
          "Ladder Logic Program for Boolean Expression",
          "Logic Gates (AND & OR Gate)",
          "Logic Gates (AND & OR Gate) in Software",
          "Logic Gates (NAND & NOR Gate)",
          "Logic Gates (NAND & NOR Gate) in Software",
          "Logic Gates (EX-OR & EX-NOR Gate)",
          "Logic Gates (EX-OR & EX-NOR Gate) in Software"
        ],
        "Latching and Unlatching Concept": [
          "Introduction to Latching (Holding) and Unlatching Concept",
          "Latching (Holding) and Unlatching Concept in Software",
          "Latching and Unlatching Problem-1",
          "Latching and Unlatching Problem-1 Solution Explanation",
          "Latching and Unlatching Problem-1 Solution in Software",
          "Introduction of Set and Reset Instruction",
          "Set and Reset Instruction in Software",
          "Differential Up and Down Instructions"
        ],
        "Interlocking": [
          "Interlocking Concept",
          "Interlocking Concept in Software"
        ],
        "Timer": [
          "Introduction to Timer",
          "How to provide Pre-Set value in Timer",
          "Non-Retentive Timer",
          "Non-Retentive Timer (TIM and TIMX) Part-1",
          "Non-Retentive Timer (TIM and TIMX) Part-2",
          "Non-Retentive Timer (TIMH and TIMHX)",
          "Non-Retentive Timer (TMHH and TMHHX)",
          "Retentive (Accumulative) Timer (TTIM and TTIMX)",
          "Problem-1 with Explanation",
          "Problem-1 Solution in Software",
          "Problem-2 with Explanation",
          "Problem-2 Solution in Software",
          "Problem-3 (Traffic Light)",
          "Problem-3 Solution Explanation",
          "Problem-3 Solution in Software",
          "Problem-4 (Based on Bit Logix and Timer)",
          "Problem-4 Solution Explanation",
          "Problem-4 Solution in Software",
          "How to create Flickr Bits ?",
          "How to increase time delay capabilities of timers method 1 st ?",
          "How to increase time delay capabilities of timers method 2 nd ?"
        ],
        "Counter": [
          "Introduction of Counter",
          "Counter (CNT) Part-1",
          "Counter (CNT) Part-2",
          "Reversible Counter (CNTR) Part-1",
          "Reversible Counter (CNTR) Part-2",
          "Problem-1",
          "Problem-1 Solution Explanation",
          "Problem-1 Solution in Software"
        ],
        "Compare Instruction (= =, < >, > =, < =, > and <)": [
          "Introduction of Compare Instruction Part-1",
          "Introduction of Compare Instruction Part-2",
          "Input Comparison Instruction Part-1",
          "Input Comparison Instruction Part-2",
          "Input Comparison Instruction Part-3"
        ],
        "Mathematical Instruction": [
          "Introduction of Mathematical Instruction",
          "Addition Instruction",
          "Subtraction Instruction",
          "Multiplication and Division Instruction",
          "Problem-1 with Solution"
        ],
        "Move, Keep, Increment and Decrement Instruction": [
          "Introduction of Move Instruction with in Software",
          "Introduction of Keep Instruction with in Software",
          "How to provide ON Delay for a Load using Keep Instruction ?",
          "Increment and Decrement Instruction"
        ]
      },
      "requirements": [
        "Students are supposed to be familiar with Desktop/Laptop.",
        "No other prerequisites for this course, Because instructor will teach everything from scratch."
      ],
      "description": "Today, PLC is being used in every process and manufacturing industries, apart from knowing the wires and connections, anyone should know the way to do PLC programs.\nPLC-Programmable logic controller is an industrial solid-state computer that monitors input and output, and makes logic-based decisions for automated processes or machines.\nOMRON PLC has supported industry with innovative solutions and advanced technologies. Omron Programmable Logic Controllers (PLC) designed with high processing speeds and full transparency. Omron PLC's provide users with numerous functions and controls from small scale equipment to entire production lines.\nCX-Programmer is programming software for all Omron's PLC series. CX-Programmer includes various types of features to accelerate the development of your PLC program.And this course is covering complete programming of PLC Model CP1E-E14DR-A of Omron PLC.\nAfter doing this course, you can easily program the other OMRON PLC series.This software is used for all the Omron PLC series. And the instructions remain the same.\nThis course will teach you step by step How to make a Ladder Logics & Programming to any industrial process Control.\nWe have made explanation by Real Time LIVE Camera & Designing Software to understand the concept clearly.\nNOTE: This course is not short an summary course, this course is detailed course. All topics are covered in it, from scratch. You can understand this course even you don't know about PLC . If you are working in this field, you can enhance your knowledge from this course.\n\n\nFollowing is the brief information about the course:\nIntroduction of PLC.\nFunctions and Features of PLC.\nWhat is Sink and Source concept?\nWorking Principle of PLC (Scan Time and Scan Cycle of PLC).\nWiring Connection and Communication of PLC.\nBit Logic with Interlocking and Holding Concept.\nTimer, Counter, Compareinstruction, Math instructions,\n\n\nMove, Keep, Increment and Decrement Instruction\n\n\nProgram Control instructions etc.\nAnd many more instructions are covering in course.\nProblems with Solution (Industrial Level).",
      "target_audience": [
        "Students who are pursuing or having Masters/ Bachelor’s Degree /Diploma in EC/EE/EEE/EI Branches.",
        "Working Professionals are also invited to join this course to enhance their knowledge in Industrial Automation.",
        "Maintenance Engineers.",
        "Application Engineers.",
        "PLC Programmers."
      ]
    },
    {
      "title": "PCB design with Altium Designer",
      "url": "https://www.udemy.com/course/pcb-design-with-altium-designer-2022-latest-version/",
      "bio": "First we will design Simple MCU based PCB like arduino with Cortex MCU next we design 3 complex and practical PCB",
      "objectives": [
        "Basic tool's of Altium Designer",
        "Design professional PCB's",
        "Design schematic like a pro",
        "power supply",
        "multi-sheet design",
        "Placement and alignment",
        "a lot more"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "install the software"
        ],
        "Schematic Design Part01": [
          "01.create project",
          "02.schematic propereties",
          "little talk",
          "03.components",
          "04.selection",
          "05.filters",
          "06.design schematic like pro",
          "07.new way of doing documenting your schematic",
          "08.Component properties",
          "09.Read document of a component"
        ],
        "Custom schematic component library": [
          "10.create component libriry",
          "11.create schematic component",
          "This section library"
        ],
        "Schematic Design part02": [
          "12.design power supply with our part"
        ],
        "Custom PCB component library (footprint)": [
          "13.create pcb footprint part one top overlay",
          "14.create pads and placing them",
          "15.connect footprint of the component with schematic component"
        ],
        "Anottation": [
          "16.annotating designators"
        ],
        "PCB Design part01": [
          "17.create pcb board and change its size",
          "18.add schematic component to our pcb project",
          "19.some tricks of placing component on pcb",
          "20. component alignment",
          "21.pads alignment",
          "22.routing and routing rules"
        ],
        "Components on internet": [
          "23.find component librarys in internet"
        ],
        "Schematic Design part03": [
          "24.design multi sheet and lets add a mcu",
          "25.MCU power supply section",
          "26.find 8MHz crystal for our mcu",
          "27.use net labels",
          "28.circuit of crystals and its capacitors",
          "29.reset pin of mcu",
          "30.boot options",
          "31.debug section of mcu"
        ],
        "PCB Design Part02": [
          "32.update pcb with our mcu",
          "33.most important design rules",
          "34.bypass cap placement",
          "35.advance rules",
          "36.place reset cap and reset tac switch",
          "37.routing crystals",
          "38.vias and vias rules",
          "39.multilayer design",
          "40.Rooms",
          "41.measurment and dimensions"
        ]
      },
      "requirements": [
        "nothing"
      ],
      "description": "Greetings to all dear students . You can go from beginner to advanced by watching this class and earn money this way . So join us and become a professional . Thank you for your support . Based on the courses I have taken and about 12 years of experience in this field , I decided to share this information with you .\n4 board design from scratch\nschematic design\nPCB design\npower supply distribution\ndatasheet reading together\nesp8266 schematic design\nmicrocontroller design\nmanufacturing step\nbest way of routing\nbest way to place components\nfrom zero to manufacture\n10 hour bonuses content\ntwo version of this course is available in this course\nslow and uncut version of course\nedited version\nAND A LOT MORE\nmy 12 years experience is here for you , if you have any question a lone the way please don't hesitate to ask\ni will answer all question in no time , it will be my honor to serve you in your project\nif you liked this course i will create another course for how to program it\n\n\nthere will be free update to this course in time so please make sure you check this course some times\nall the files will be on one of the lectures like library and project files\nbut if you could not find it please tell me so i will send it to your email in no time",
      "target_audience": [
        "exlectrical engineer",
        "whoever want to learn pcb design"
      ]
    },
    {
      "title": "STM32L4 Bare-Metal Peripheral Drivers Development",
      "url": "https://www.udemy.com/course/stm32l4-bare-metal-peripheral-drivers-development/",
      "bio": "No Libraries used, Professional CMSIS Standard, ARM Cortex, ADC,UART,TIMERS, GPIO,SPI,I2C etc.",
      "objectives": [
        "Write firmware using only bare-metal embedded-c",
        "Write Bare-Metal ADC Drivers for the STM32L4 Microcontroller",
        "Write Bare-Metal TIMER Drivers for the STM32L4 Microcontroller",
        "Write Bare-Metal UART Drivers for the STM32L4 Microcontroller",
        "Write Bare-Metal INTERRUPT Drivers for the STM32L4 Microcontroller",
        "Write Bare-Metal GPIO Drivers for the STM32L4 Microcontroller",
        "Write Bare-Metal SPI Drivers for the STM32L4 Microcontroller",
        "Write Bare-Metal I2C Drivers for the STM32L4 Microcontroller",
        "Build every single line of code from scratch by writing to the microcontroller’s memory space directly.",
        "Use No third party libraries or header files",
        "Understand and write every single line of code yourself- no Copy/Paste",
        "Use the debugger effectively to analyze and resolve any bugs",
        "Develop proficiency in your embedded development skills and confidently take the next steps",
        "Define addresses for the different peripherals",
        "Analyze the chip documentation",
        "Create registers from the addresses"
      ],
      "course_content": {},
      "requirements": [
        "NUCLEO-STM32L476 DEVELOPMENT BOARD",
        "No programming experience needed - I'll teach you everything you need to know."
      ],
      "description": "Are you tired of Copying and Pasting code you don't understand?\nWith a programming based approach, this course is designed to give you a solid foundation in bare-metal firmware development for  ARM-based microcontrollers . The goal of this course is to teach you how to navigate the microcontroller reference manual and datasheet to extract the right  information to professionally  build peripheral drivers and firmware. To achieve this goal, no libraries are used in this course, purely bare-metal embedded-c and register manipulations.\nStill keeping it simple, this course comes in different ARM Cortex-M development boards  so that students can put the techniques to practice using an ARM Cortex-M development board of their choice. This version of the course uses the STMicroelectronics  STM32L4-NUCLEO which has an ARM Cortex-M4 microcontoller.\nSo with that understood, let me tell you…\n\nExactly What You’re Getting\nThis is dramatically different from any course you have ever taken because it’s more of a professional hands-on “field guide” to stm32 bare metal firmware development.\nThe reason why is because there’s no fluff or filler. It immediately gets down to the actual subject, showing you exactly what to do, how to do it, and why.\nPlus, it’s easy.\nAnd you’ll immediately “get” the entire mythology I personally use to build firmware for consumer devices in my professional life.\nIt's About MORE Than Just Getting the Code to Work\nSee, this course will change your professional life forever. Here is what one student had to say about the 1st version (STM32F4) of the course :\n\n\n\"I would suggest this course for all the beginners. The concepts have been covered in the right sequence.And also the best part of this lecture series is getting to know how to explore the reference manual and datasheets.\"\nHere is what another student had to say :\n\"Extremly helpful to get to understand the uC programming deeper! For me it is much easier from now to develop code because I undertstand the base behind, so I'm more confident and more experienced to develop and debug the code. Really, this course is very useful to link the hardware knowledge with the coding skills. This fills the gap between them. Thanks for it! :)\"\nA third student :\n\"I am a professional semiconductor chipset application engineer with 30 years in global embedded product design in system applications. I can say this teacher is very straight forward by sharing his many years knowledge to the students with his true heart. Yes. I love his teaching pace and style!\"\n\n\n\n\nThe First Version (STM32F4)  is being Taken by 5000+ Students with 1000+ Reviews\nIf at least one of the following applies to you then keep reading if not then simply skip this course:\n\n\" Escape From \"\nCopying/Pasting code you don’t understand\nUsing third party libraries and header files like HAL, LL and StdPeriph\nExperiencing bugs you don’t understand\nBeing afraid of technical documentations like the reference manual and datasheet of the chip\nImposter syndrome\n\" Arrive At \"\nBuilding every single line of code from scratch by writing to the microcontroller’s memory space directly.\nUsing No third party libraries or header files\nUnderstanding and writing every single line of code yourself- no Copy/Paste\nUsing the debugger effectively to analyze and resolve any bugs\nDeveloping proficiency in your embedded development skills and confidently take the next steps\nSo like I said, there’s more than just getting each piece of code to work.\nHere’s an overview of what you’re getting...\nAnalyzing the chip documentations:\nBefore developing the firmware for any chip you have to learn how to read the documentation provided by the chip manufacturer.\n\n\nDefining Peripheral address\nAll components on the microcontroller have an address range. To write to a component or read from a component you need to locate its address range in the documentation and properly define the addresses in your code.\n\n\nCreating registers from the address:\nThe addresses in the address range of a component represent the registers of that component. To access these registers you have effectively typecast the addresses.\n\n\nUnderstanding CMSIS:\nCortex-Microcontroller Interface Standard (CMSIS)CMSIS is a standard developed by Arm for all Cortex-Microcontrollers. This is the standard used in professional firmware development\n\n\nBut it gets better because you’re also getting…\n\nDeep Lessons on Developing Peripheral Drivers\nYou will learn how to develop bare-metal drivers for the following peripherals :\nAnalog-to-Digital Converter (ADC)\nSerial Peripheral Interface (SPI)\nInter-Integrated Circuit (I2C)\nNested Vector Interrupt Controller (NVIC)\nGeneral Purpose Timers (TIM)\nSystem Tick Timer (SysTick)\nGeneral Purpose Input/Output (GPIO)\n\n\nSpecially Designed For People Who Hate Copy/Paste\nListen. If you don’t like “Copy/Paste” you’re not alone. I can’t stand it either. I’d literally rather have a piece of code that I wrote from scratch that doesn’t work than someone else’s working code I copied and pasted.\nAnd that’s why I’ve spent months designing and recording this course in which I show you how to locate every single register used and the meaning of every hexadecimal value written into the register.\n\n\nAlso it comes with a money back guarantee so you have nothing to loose.",
      "target_audience": [
        "If you are an absolute beginner to embedded systems, then take this course.",
        "If you are an experienced embedded developer and want to learn how to professionally develop embedded applications the STM32L476 microcontroller, then take this course."
      ]
    },
    {
      "title": "FPGA VHDL course coding QSPI nor flash memory",
      "url": "https://www.udemy.com/course/fpga-vhdl-coding-qspi-nor-flash-memory-from-zero-to-hero/",
      "bio": "Learn how to Read/Write and work with QSPI Flash Memory with FPGA using VHDL code & Simulate with Modelsim from scratch!",
      "objectives": [
        "Nor Flash Memory fundamentals",
        "Designing a VHDL project from scratch! after this course you will be able to design by yourself any project",
        "Writing VHDL code for working with the Nor Flash Memory",
        "How to Read/Write micron Nor Flash Memory",
        "How to Setup new flash memory, Setup its Inner Registers",
        "How to write a simulation for Micron Nor Flash Memory Verilog part and simulate it",
        "Everything you need to know about Micron Nor Flash Memory",
        "How to approach to any Flash Memory of any type and product in the market",
        "How to work with the Nor Flash Memory at different modes: SPI, Dual SPI, Quad SPI"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Nor flash memory Vs Nand flash memory",
          "SPI Protocol and our Flash",
          "Download the QSPI component Verilog model",
          "Our QSPI Nor flash memory PDF datasheet explained",
          "QSPI nor flash communication timing"
        ],
        "VHDL coding": [
          "VHDL Code Plan - Must watch to understand the rest!",
          "Writing the top entity and the Testbench Part1",
          "Write the Registers File Component",
          "Writing the controller for the QSPI PART1",
          "Write the Read Data Process",
          "Writing the Write enable to the global clock",
          "Write the Send Quad command Process",
          "Write the Send Quad Address Process",
          "Write the Send Quad Data Process",
          "Write the Send NonVolatile Data Process",
          "Write the Main State Machine",
          "Write the Initialization State Machine",
          "Write the Read status register state machine",
          "Write the Fast Read state machine",
          "Write the Data to the QSPI state machine",
          "Write 16 bits command state machine",
          "Write 8 bits command state machine",
          "Write the Sector Erase state machine",
          "Connecting the QSPI controller and the register file to the top entity"
        ],
        "Simulating the full project": [
          "Adding the QSPI flash memory Verilog component to the test bench",
          "Open the project files in Modelsim and fixing syntax errors",
          "Simulate the project and fix the clocks and initialization",
          "Writing the Testbench and test the Read status register",
          "Writing the Testbench and test the Write data to the QSPI",
          "Writing the Testbench and test the Fast read",
          "Writing the Testbench and test the Write 16 bits",
          "Writing the Testbench and test the Write 8 bits",
          "Writing the Testbench and test the Sector erase",
          "Final files for this Course and Conclusions!"
        ],
        "Extra": [
          "Bonus lecture"
        ]
      },
      "requirements": [
        "VHDL Knowledge",
        "PC with internet connection",
        "Modelsim simulation tool - (not a must for learning... :)"
      ],
      "description": "Do you want to learn how to write a VHDL code for communicating with Flash memory with a Quad SPI protocol?\nAlso I will teach you about the Flash memory Storage, As an electronic engineer specialized with FPGAs I will go with you step by step from the design of the code to the memory to a real working code that really runs, we will use a special component from Micron site that demonstrate a real flash memory and we will connect it to the code to check it under simulations!\nJoin my VHDL course to start learning!\nStudents saying:\nHassan Rabbani: \"Good Course. Highly recommended\"\nAleksander Bosko: \"I have knowledge in VHDL, I think that you need some knowledge as the instructor wrote. This is a Very good course for learning how to use Flash memory. I tried to find this for long time, thanks for making the impossible possible!!!\"\n\n\nToday, every FPGA needs to load from Flash memory. the Flash load the FPGA in every reset of the board/development board.\nThe other uses of flash memories is of course to storage your data, this will happen from the FPGA itself by writing a code that controls the flash memory or a CPU that can communicate the flash memory.\nEvery company that hire FPGAs engineer will be more than happy to have this knowledge of using Flash memories.\nIn this course, Which is actually the only course/Video or article that explains how to use the Flash memory from zero within the hole internet(and you can check this...), I will teach you everything you need to know in order to work with the Flash memory. After this course you will become a master for Flash memory.\nBecause of the complex of the using of flash memory and the SPI protocol with quad data, there is no even one source you will find- search google and see by yourself.\nThe VHDL course is long so I will cover all of the issues and timing problems within this course.\nWe will write the full VHDL code to work with the flash memory we will also edit and improve the code in the simulation. On the end of this VHDL course you will have a full working code(which you can download or write through the lectures with me and compare to my code).\nHere is a list of just a brief overview of what you will learn:\nNor flash vs Nand flash - why do we need nor flash for fpga load?(why not nand flash?)\nTiming issues of the Flash memories and how to handle them within the code(explained with the PDF datasheet)\nHow to configure the flash memory inner registers\nHow to write data to the flash memory in single mode\nHow to write data to the flash memory in quad mode\nHow to read data from the flash memory\nHow to erase the flash memory\nFlash memory frequencies explanation\nFlash memory - memory table and memory partitions is explained\nHow to connect Micron Memory Flash Verilog module to our VHDL code\nSimulate in Modelsim the Micron flash memory - This flash memory module represent a real module with the real timing issues, voltages and all of its configurations including resetting and everything...\nThe flash memory works with SPI protocol so the VHDL code covers that too\netc.....\n\n\nThis VHDL Course was made for all levels by a professional electronic and computer engineer. with a huge experience with FPGAs of all of the companies in the market and Board designing. Working with many different Flash Memories.\n\n\nAfter finishing this VHDL course I can guarantee you will be able to take any other Flash Memory(Nand,Nor etc..) of any manufacturer and understand it and even write down your VHDL code for it.\nThis VHDL course comes with a 30 day money back guarantee! If you are not satisfied in any way, you'll get your money back.\nSo what are you waiting for? Learn FPGA Development in a way that will advance your career and increase your knowledge, all in a fun and practical way!",
      "target_audience": [
        "Anyone who wants to know how to use FLASH Memory from Scratch",
        "Anyone who wish to become a better VHDL developer"
      ]
    },
    {
      "title": "Raspberry Pi and Arduino - Go to The Next Level",
      "url": "https://www.udemy.com/course/raspberry-pi-and-arduino/",
      "bio": "Make your Raspberry Pi Communicate with Arduino - Build a Complete Intercom Project - Serial, Telegram Bot, Pi Camera...",
      "objectives": [
        "Make Raspberry Pi communicate with Arduino, using Serial",
        "Build a complete Intercom system with Raspberry Pi and Arduino",
        "Use the Raspberry Pi as the “brain” and the Arduino as the “muscles” of your application",
        "Understand the differences between Arduino and Raspberry Pi",
        "Install and configure Arduino IDE on Raspberry Pi OS",
        "Create a bidirectional Serial communication",
        "Build a custom protocol to talk over Serial",
        "Write code with Python 3 on Raspberry Pi and C++ on Arduino",
        "Create a Telegram Bot with Python 3",
        "Send notifications from your Raspberry Pi to your phone",
        "Control Arduino from a Telegram chat",
        "Practice a lot thanks to 9 activities and one big final project",
        "Start directly with the best practices",
        "Develop an engineer mindset when solving problems",
        "Learn how to be more independent when working on your future projects",
        "Understand the “why” behind things",
        "Learn by doing and not just watching"
      ],
      "course_content": {},
      "requirements": [
        "Arduino basics with C++ and how to build a circuit",
        "Raspberry pi basics with Python 3",
        "Arduino board + Raspberry Pi board + a few hardware components (list of components available in a free preview lesson)",
        "This is an intermediate course, not for complete beginners!"
      ],
      "description": "You’re already familiar with Arduino and Raspberry Pi?\nYou want to go further with those boards, and combine them to create more complex and powerful projects?\nWelcome to this Raspberry Pi + Arduino course!\nI will take you from an intermediate level on the two boards, to an advanced level, not only on each board, but on the combination of both.\nAt the end of the course, you will be able to create your own custom projects with Raspberry Pi and Arduino.\nNote: his course is not for complete beginners, for example I will not explain to you how to write basic Python or C++ programs. You definitely don’t need to be an expert, but having a good understanding of both Arduino and Raspberry Pi will really help you get started.\n\n\n→ Why this course?\n\n\nWorking only with Raspberry Pi, or only with Arduino, is already nice: you can do a lot of projects.\nBut sometimes, this is not enough. You will need to combine the strength of both boards: the power of software with Raspberry Pi (brain), and the closeness to hardware with Arduino (muscles).\nWhen looking for tutorials/courses about this on the Internet, I found that they are all very simplified, and work with a very simplistic setup, and only for that setup. If you add any component, any functionality, you’re going to be stuck.\nSo in this course, you won’t get a copy/paste example, but a complete (and efficient) step by step process to create any application with Arduino and Raspberry Pi.\nI will show you how to start a successful Serial communication between the 2 boards, and how to build an application with new components and features around this bridge.\n\n\n→ How will you learn, how do I teach?\n\n\nMy method is simple but efficient:\nWHY: Focus on the “why” so you understand what you’re doing.\nHANDS-ON lessons to learn in a better way.\nSTEP BY STEP: Every lesson is built on top of previous ones.\nPRACTICE with many activities and projects.\nNO COPY AND PASTE!!! I write all the code from scratch.\nThis teaching method actually works: I have already taught 100 000+ students in 150 countries, with 23 000+ reviews over 4.7/5.\n\n\nSome reviews from my students - related to Raspberry Pi:\n“Edouard is an awesome instructor. The course is easy to follow but he makes you think all along the way. Great first class if you are interested in learning Raspberry Pi.” --- Joel Bernstein\n“Awesome class! I highly recommend this class. Mr. Renard is a great instructor. The entire class is hands-on, which in my opinion is the best way to learn.” --- Kirk Wynter\n“Really happy with the course. Exactly what I paid for and am pretty happy with my progress. I am getting exactly what is promised. Edouard is an excellent teacher.” --- Jihad Anbous\n\n\nSome other reviews - related to Arduino:\n“The course was excellent. Congratulations to Edouard. I had already worked through some of the projects in the Arduino projects book, but I still learned much more in this course. Thanks.” --- Sholto Douglas\n“Halfway and still loving this course. The instructor is clear and teaches in such a way that you actually learn how to navigate, conceptualize, and write your own code rather than teaching from premade code. Outstanding work sir!” --- Westley Bolton\n\n\n→ What will you do in the course?\n\n\nAfter an installation section to get all the tools ready for the course (including installing Arduino IDE on your Raspberry Pi OS), you will progress through 4 different parts:\nCommunicate with Serial between Raspberry Pi and Arduino.\nBuild the Arduino circuit for the project, one component at a time. Control Arduino components from the Raspberry Pi\nDiscover new Raspberry Pi functionalities - Camera and Telegram bot. Control the camera from the Arduino, and send commands to Arduino from a Telegram chat.\nComplete Intercom Project (see preview video for an overview of the result).\nFor each part of the course (1-3), you get several additional activities, so you can practice on what you’ve just seen, and link the new knowledge with the previous sections.\nFor the final project, together we will design a complete communication protocol, and we will also practice on the steps design: basically, how to plan/organize your application before writing code. I will give you some tips to help you design and organize your future projects, so you can start them and know what you need to do, in what order. This is something super important that I don’t often see in other courses or tutorials, and I’ve made sure to focus on this when creating the steps for the final project.\n\n\nSo, you want to build more complex applications with Raspberry Pi and Arduino? Don’t wait any longer and start this course today!\n\n\nAs always, my goal is to give you the freedom to start and finish your own projects. With this freedom you won’t have to rely on some copy/paste examples from the internet, because you will have the foundation that allows you to really understand how things work, and build anything from scratch.\nAnd that’s not all: all along the course I will share with you the best practices I personally use for my own projects. You will be able to create robust and scalable code - both for Arduino and Raspberry Pi.\nOh, and you also get a 30 days money-back guarantee if you’re not fully satisfied - no questions asked :)\nSee you in the course!\n\n\n\n\nNote - This course is not for you if:\nYou are a complete Arduino or Raspberry Pi beginner.\nYou want a copy/paste solution to your problems and don’t want to take the time to understand.",
      "target_audience": [
        "Students, Engineers, Researchers, Teachers, Developers, Hobbyists.",
        "Arduino and/or Raspberry Pi makers who want to combine the 2 boards for more fun and complex projects.",
        "Anyone interested in going further with Arduino and Raspberry Pi.",
        "Anyone who wants to build serious robotics or home automation projects."
      ]
    },
    {
      "title": "High-Level Synthesis for FPGA, Part 1-Combinational Circuits",
      "url": "https://www.udemy.com/course/hls-combinational-circuits/",
      "bio": "Logic Design with Vitis-HLS",
      "objectives": [
        "Designing combinational logic circuits with C/C++ language using the HLS approach",
        "Understanding the basic concepts of High-Level Synthesis (HLS)",
        "Using HLS concepts for designing combinational logic circuits",
        "HLS design flow for FPGAs",
        "Working with Xilinx Vitis-HLS and Vivado suite Toolsets",
        "How to generate RTL hardware IPs using Vitis-HLS",
        "Writing C-testbench in HLS",
        "Implementing two exciting projects with HLS"
      ],
      "course_content": {
        "Prologue": [
          "Introduction",
          "Course Structure"
        ],
        "FPGA Concepts": [
          "Introduction",
          "Features and Applications",
          "Design Approach",
          "FPGA Platform vs CPU Platform",
          "FPGA Basic",
          "LUT",
          "Flip-Flop And Other Elements",
          "Basys3 FPGA Development Board",
          "Why HLS?",
          "Hardware and Software Analogy"
        ],
        "Hardware/Software Setup": [
          "Introduction",
          "Vivado-HLx",
          "Vivado and Vivado-HLS",
          "Install Vivado-HLx",
          "Test Installation"
        ],
        "Basic Output": [
          "Introduction",
          "Output Configuration",
          "Controller Concept",
          "HLS Design Overview",
          "HLS Design Flow",
          "HLS C/C++ Design",
          "HLS Ports",
          "HLS LAB",
          "Vivado",
          "Vivado LAB",
          "Basis3 Board",
          "Exercises"
        ],
        "Basic Input/Output": [
          "Introduction",
          "Configuration",
          "Controller Concept",
          "HLS Ports",
          "HLS LAB",
          "Vivado LAB",
          "Exercise"
        ],
        "Combinational Circuit": [
          "Introduction",
          "Definition",
          "Logic Gates",
          "Propagation Delay",
          "Binary Adder Delay",
          "Combinational Circuit in HLS",
          "Combinational Circuit in Vivado-HLS",
          "Combinational Circuit in Vivado",
          "Functions",
          "Dataflow",
          "Traffic Light",
          "Traffic Light-Vivado-HLx",
          "Exercises"
        ],
        "C/C++ Testbench": [
          "Introduction",
          "Definition",
          "Simulation Flow",
          "HLS Testbench Coding",
          "Vivado HLS",
          "Exercises"
        ],
        "Data Type": [
          "Introduction",
          "Native Datatypes",
          "Synthesis",
          "Bit Precision: Declaration",
          "Bit Precision: Initializing",
          "Bit Precision: Assignment",
          "Bit Precision: Print",
          "Bit Precision: Bitlevel",
          "Bit Precision: Bitwise Logical Operators",
          "Bit Precision: Shift/Rotate",
          "Exercises"
        ],
        "Conditional Statements": [
          "Introduction",
          "Definition",
          "Multiplexer",
          "Multiplexer: General Case",
          "HLS",
          "Encoder/Decoder",
          "Leading One",
          "LAB",
          "Exercises"
        ],
        "Seven Segments": [
          "Introduction",
          "Definition",
          "7-Segment Codes",
          "Basys3",
          "One Digit",
          "BCD Code",
          "BCD TO 7-segment: Div/Mod",
          "BCD TO 7-Segment: Double Dabble",
          "Two Digits",
          "LAB",
          "Exercises"
        ]
      },
      "requirements": [
        "Understanding the basic concepts of C/C++ coding",
        "Understanding the basic concepts of logic operators (e.g., AND, OR, XOR, SHIFT )",
        "BASYS3 evaluation board",
        "Xilinx Vitis-HLS and Vivado (download Vivado ML Edition, or Vivado Design Suite - HLx Editions for Windows or Linux)"
      ],
      "description": "This course is an elementary introduction to high-level synthesis (HLS) design flow. The goals of the course are describing, debugging and implementing combinational logic circuits on FPGAs using only C/C++ language without any help from HDLs (e.g., VHDL or Verilog). The HLS is recently used by several industry leaders (such as Nvidia and Google) to design their hardware and software platforms. The HLS design flow is the future of hardware design, which quickly becomes a must-have skill for every hardware or software engineer who is keen on utilising FPGAs for their exceptional performance and low power consumption.\nIt uses the Xilinx HLS software and hardware platforms to demonstrate real examples and applications. This course is the first to build the HLS design flow and skills along with the digital logic circuit concepts from scratch. Throughout the course, you will follow several examples describing HLS concepts and techniques. The course contains numerous quizzes and exercises for you to practice and master the proposed methods and approaches.\nThis course is the first of a series of courses on HLS in designing hardware modules and accelerating algorithms on a target FPGA. Whereas this course focuses on combinational circuits. The other courses in the series will explain how to use HLS in designing sequential logic circuits, algorithm acceleration, and hybrid CPU+ FPGA heterogeneous systems.",
      "target_audience": [
        "Hardware engineers",
        "Software engineers who are interested in FPGAs",
        "Lecturers, researchers, professors who want to use FPGA-based HLS in lectures, courses or research",
        "Digital Logic enthusiasts"
      ]
    },
    {
      "title": "Crash Course on Embedded C Programming",
      "url": "https://www.udemy.com/course/crash-course-on-embedded-c-programming/",
      "bio": "Quickly Learn Embedded C Concepts with this hands on driven Course (50% course is free to learn)",
      "objectives": [
        "Fundamentals of C for Embedded Applications",
        "Most required Embedded C Concepts",
        "Functions, Pointers, Arrays in C",
        "An overview of C coding from Embedded Systems Perspective"
      ],
      "course_content": {},
      "requirements": [
        "Interested in Embedded Systems",
        "Windows 10 Computer",
        "Desire to learn Embedded C"
      ],
      "description": "\"With the right tools and guidance, I believe anyone can learn and master technology. That's why I offer 50% of the videos from all my courses as free previews. Feel free to watch them and enroll only if you believe the course is a good fit for you.\"\n\n\nThis is 100% Most basic quick C tutorial course and not an advanced coding course\n\n\nYou started learning embedded systems in excitement but stumble on some basic C programming concepts? Would you like a quick revision to C Coding to understand embedded systems better? Then this course is perfect for you.\nThis is a Crash Course on C Programming targeted specially for embedded systems learners. This is not to be considered as a full C Programming course but a crash course. Only those topics are included which are mostly used in embedded Systems. Please check entire curriculum before you enroll.\nThis course won't dwell on theory, you can get it from many sources, I have kept this course purely for those who want to start some C Practice right away.\nYou'll create your first program within 30 minutes of joining this course\nThis course covers\nC Programming Introduction\nTypes of Variables and which to use when in embedded systems\nType of operators in C\nWriting simple C Programs\nInput and Output in C and its correlation to embedded systems\nConditional Executions (If / if-else / nested if)\nConditional Executions (switch-case)\nLoops in C (for loop / while loop)\nUnderstanding various programming scenarios\nArrays in C\nInteger arrays\nText Arrays\nUse of arrays in Embedded Systems\nConverting integers to strings\nPointers in C\nUse of Pointers in Embedded Systems\nVarious different ways to use Pointers\nFunctions in C Programming\nPreprocessor directives and their usages in C Programming\nYou'll create your first program within 30 minutes of joining this course\nAs mentioned before, this is not to be considered as a complete C Programming but a crash course for Embedded Systems People\nSo if you're like one of us who is working on Micro controllers and circuit programming, join this course now\n\n\n50% of the course is available for free preview - Start learning now\nThank you :)",
      "target_audience": [
        "Students",
        "Working Professionals",
        "Embedded System Enthusiasts",
        "Anyone Who is Complete Beginners in Embedded Systems"
      ]
    },
    {
      "title": "Arduino Programming for Absolute Beginners",
      "url": "https://www.udemy.com/course/arduino-programming-for-absolute-beginners/",
      "bio": "Learn about the hardware components of Arduino UNO and how to program it using C/C++",
      "objectives": [
        "Arduino Programming in C++",
        "Arduino UNO"
      ],
      "course_content": {
        "Introduction to Arduino and Understanding the hardware": [
          "Non Technical Intro on Embedded Systems",
          "What is Arduino UNO?",
          "Different varieties in Arduino",
          "An outline on the architecture",
          "The ATMega 328",
          "Digital Pins in the Arduino",
          "What is PWM?",
          "Difference between Analog and Digital Signals",
          "Analog Input Pins",
          "Flowchart on Analog Data Flow in the Arduino",
          "Duty Cycle",
          "Marked Pins",
          "Other Components in the board"
        ],
        "C/C++ Programming Concepts for Arduino": [
          "Datatypes and Variables in C",
          "Variables (Part 2)",
          "Conditional If Statements and Operators",
          "While Loop",
          "For Loop",
          "Functions",
          "Global and Local Variables",
          "Scope of a Variable",
          "Preprocessor Directive",
          "Switch case"
        ],
        "The Simulator and Basic Circuits": [
          "Download the Arduino IDE",
          "Getting Started with the Arduino IDE",
          "Introduction to TinkerCAD",
          "Creating Circuits in TinkerCAD",
          "Building a simple circuit using Breadboard",
          "Using pushbutton in our circuit",
          "The Light Dependent Resistor"
        ],
        "Arduino Circuits": [
          "Blinking of an LED in Arduino",
          "Connecting an external LED to the Arduino",
          "Serial Monitor in Arduino",
          "Connecting three terminal components - Potentiometer",
          "Reading Analog Inputs",
          "Converting Analog Values into Digital Values",
          "LED Fading using PWM",
          "Connecting an RGB LED with the Arduino",
          "Flowing Lights! - A fun experiment",
          "Sounding a buzzer",
          "Controlling an LED through Serial Communication",
          "LCD Interfacing"
        ],
        "Interfacing Sensors and Actuators with Arduino and Building Projects": [
          "Interfacing a Passive Infrared Sensor",
          "Trespassers alarm using PIR Sensor",
          "Info",
          "Interfacing a servo motor",
          "Interfacing a Temperature Sensor (TMP36)",
          "Temperature Controlled DC Motor",
          "Interfacing an IR Remote Control and IR Receiver",
          "Interfacing an Ultrasonic sensor and a simple project",
          "Final Quiz"
        ],
        "Update - Project Ideas": [
          "Automatic Water Dispenser System"
        ]
      },
      "requirements": [
        "No, there are no requirements or prerequisites. Anyone can learn."
      ],
      "description": "In this course, You'll learn all the foundations for Arduino UNO and build projects using sensors and actuators. There is no need of any prior knowledge in Programming. We'll have brief insights on Programming in C/C++, particularly for Arduino. We'll also have a deep insight on basic electrical and electronic components such as breadboard, resistors, LED's and Pushbuttons.\nAlso, This course uses an online simulation tool called TinkerCAD and there is no need of any hardware.\nAfter completing this course, You'll be able to\n1. Explain all the core hardware components of Arduino UNO and their working.\n2. Know how to design circuits using Arduino and other electronic components\n3. Design electrical circuits using TinkerCAD\n4. Interface sensors such as Temperature Sensors, Proximity Sensors with Arduino and build some simple projects.\n5. Learn how to interface Servo motors and LCD with Arduino which is the basis for building robots using Arduino.\n6. Building some real world projects.\nArduino is one of the devices with computational intelligence and it is used as an IOT (Internet of things) device nowadays.\nNothing more to write. I'll see you there in my lectures.",
      "target_audience": [
        "Beginner Electronics Aspirants!"
      ]
    },
    {
      "title": "How to Build a Computer from Scratch: The Complete Course",
      "url": "https://www.udemy.com/course/building-a-pc-from-scratch-beginner-to-master/",
      "bio": "The Complete Computer Build Guide: Discover how to choose the correct parts, assemble them, and install windows.",
      "objectives": [
        "Understand the components that go into a PC .",
        "Know what type of user you are.",
        "Develop effective methods for choosing parts",
        "Assemble your very own computer.",
        "Troubleshoot PC problems",
        "Successfully install windows."
      ],
      "course_content": {
        "Building a PC: It Doesn't Need to be Difficult": [
          "Welcome! Building a PC"
        ],
        "Chapter 1: Where to Start: The PC Builders Tool Box": [
          "Beginning the Build: Where to Start",
          "Understanding the Components in your Build",
          "Discover Your Perfect Build with this Website",
          "Effective NewEgg Shopping Tips",
          "This website will guarantee all your components will be compatible",
          "Where to Start (Recap)"
        ],
        "Chapter 2: A Simple Guide to Choosing Parts": [
          "Choosing the Parts (Intro)",
          "Choosing the Perfect CPU",
          "Deciding between i3, i5, i7",
          "CPU Quality Assurance: Benchmark with this Website.",
          "Choosing A Graphics Card: Optimal Gaming Experience",
          "Finalize your Graphics Card Purchase With this Site",
          "Choosing RAM: How Much You Really Need",
          "Choosing a Hard Drive, SSD or both?",
          "Choosing a Motherboard",
          "Choosing a Power Supply: An important Choice",
          "Choosing the Case: Show off Your Build to Friends",
          "Tom's hardware: How it can help you",
          "Choosing the Parts (Recap)"
        ],
        "Chapter 3: Assembling the Parts": [
          "Assembling the Parts (Intro)",
          "Installing the CPU",
          "Installing the Heat Sink & Fan",
          "Installing RAM",
          "Mounting Motherboard in the case",
          "Installing the Graphics Card",
          "Installing the SSD",
          "Installing the Optical Drive",
          "Installing the Power Supply",
          "Cable Installation: Connecting Power Supply Cables",
          "Cable Installation: Connecting cables that came attached to case",
          "Assembling the Parts (Recap)",
          "Troubleshooting secrets to get your build to start"
        ],
        "Chapter 4: Successfully Installing Windows & Setup": [
          "Installing Windows",
          "Connecting to the Internet",
          "Windows Updates",
          "Updating Drivers"
        ],
        "Chapter 5: Three Amazing Bonus Applications": [
          "BONUS: Application 1",
          "BONUS: Application 2",
          "BONUS: Application 3"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "A screwdriver and a passion to learn something new (not necessarily in that order)"
      ],
      "description": "**Over 1000 satisfied students enrolled from 81 different countries**\n\n\n\nAre you a beginner looking to build a computer but don't know where to start?...\n\nDo you want to learn a new skill that will potentially save you hundreds of dollars?...\nDo you want a powerful PC that fits your needs perfectly?\nFantastic! You've selected the right course that will walk you through the entire process of building a computer step by step.\nIN THIS COURSE WE WILL REVEAL HOW TO:\nDevelop simple but effective strategies to determine your ideal build and budget.\nEmpower you to make the right purchasing decisions for each of your components.\nEasily install each component with detailed video footage and explanations.\nUnderstand proven troubleshooting secrets.\nSuccessfully install Windows.\n\n\nWe want to share with you the entire process of building a computer in one comprehensive course that will save you hours of research and uncertainty. Nothing will be left out. We strive to make the research and building process as easy, clear and thorough as possible.\n\n\"Tell me and I forget, teach me and I may remember, involve me and I learn.\"\n-Benjamin Franklin\nThis video presentation is unique. First of all, we cut out the jargon and put it in plain English. We're also not assuming that you know anything about building a computer . Everything will be explained in detail through a variety of different mediums such as: lectures, screen-capture website tutorials, slideshows, and hands on installation videos. We will provide all the tools that will ensure you a successful build.\nIf you are planning to build a computer, we guarantee this investment will be the best one you can make! After completing this course, you will discover that building a computer is much easier than you ever thought.\nWe will also personally respond to all questions just in case you get hung up on something or want any further clarification.\nWe hope you will join us.\n- Pete & Tom\nPS: This decision is an absolute no-brainer. If you are unsatisfied with the course in any way we offer a 30-day money back guarantee. No questions asked.\nPlus, we are going to show you three INCREDIBLE BONUS applications for your new build!\n\nWe'll see you on the inside!",
      "target_audience": [
        "Beginners looking to build a PC.",
        "People who want a fully customized PC that caters to their needs."
      ]
    },
    {
      "title": "Embedded Systems using the ARM Mbed Platform",
      "url": "https://www.udemy.com/course/arm-mbed/",
      "bio": "Learn how to implement different electronic interfaces using the revolutionary mbed platform from ARM.",
      "objectives": [
        "By the end of this course you will be familiar with the ARM mbed platform",
        "You will learn the fundamentals of LEDs. Seven Segment Displays, LCDs, Analog and Serial Interfaces",
        "Basics of C programming"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the ARM Mbed platform",
          "Introduction to SoC (Systems on Chip)",
          "Introduction to mbed and soc"
        ],
        "Getting Started": [
          "Mbed PreLab Driver Installation",
          "Blinking LED Lab",
          "getting started"
        ],
        "Seven Segment Display Interface": [
          "Seven Segment Basics",
          "Mbed Seven Segment Program",
          "Mbed Seven Segment Lab",
          "seven segment display"
        ],
        "Matrix Keypad Interface": [
          "Matrix Keypad Basics",
          "Mbed Matrix Keypad Program with Seven Segment Interface",
          "Mbed Matrix Keypad Lab",
          "matrix key pad"
        ],
        "LCD Interface": [
          "LCD Basics",
          "Mbed LCD Program with Keypad Interface",
          "Mbed LCD and Keypad Lab",
          "lcd"
        ],
        "Analog Interface": [
          "Mbed Analog Basics and Program",
          "Mbed Analog Lab",
          "analog"
        ],
        "Serial Interface": [
          "Basics of Serial Communication",
          "Mbed Serial Basics",
          "Mbed Serial Program and Lab",
          "serial"
        ],
        "Basics of PWM": [
          "Basics of PWM",
          "PWM Lab"
        ]
      },
      "requirements": [
        "Fundamental knowledge of logic and a knowing what is programming",
        "A Freescale Freedom KL25Z ARM mbed board (optional for best results)",
        "LED, LCD, Seven Segment Displays, Potentiometer  (optional for best results)",
        "PC with windows (preferred) or linux"
      ],
      "description": "This course teaches and walks through the implementation of various interfaces with the ARM mbed platform. The mbed development platform is the fastest way to create products based on ARM microcontrollers. The project is being developed by ARM, its Partners and the contributions of the global mbed Developer Community.\nThe course is divided into six sections (17 lectures) with each section discussing the theory, programming and lab of each interface. The interfaces taught in this course are\n1. LEDs\n2. Seven Segment Displays\n3. Character LCD (16 x 2)\n4. Matrix Keypad\n5. Analog Inputs\n6. Serial Communication\nCandidates who take this course can gain a skill set with which they can design electronic platforms for industry as well as for their personal hobby.\nFor this course You will need a hardware mbed board called the Freedom KL25Z board from Freescale Semiconductors. You can get more information about the board from\nhttps://mbed dot org/handbook/mbed-FRDM-KL25Z\nthere are links to purchase the board as well. If you have doubts about ordering the hardware send an email to contact@eduvance.in",
      "target_audience": [
        "Hobbyists with a background in electronics",
        "Undergraduate students in Electrical/Electronics/Electronics and Telecommunication/Computer Engineering",
        "Graduate students in Electrical/Electronics/Electronics and Telecommunication/Computer Engineering",
        "Working professionals in the electronics industry"
      ]
    },
    {
      "title": "PCB Designing in Altium Designer",
      "url": "https://www.udemy.com/course/pcb-designing-in-altium-designer/",
      "bio": "Learn the basics of Printed Circuit Boards and how to design them using Altium Designer",
      "objectives": [
        "Designing Printed Circuit Boards",
        "Altium Designer"
      ],
      "course_content": {
        "Fundamentals of Printed Circuit Boards": [
          "1. Introduction to Printed Circuit Boards",
          "2. Evolution of PCB",
          "3. The need for PCB",
          "4. Steps involved in fabrication of a PCB",
          "5. The First Step in PCB Design - Sketching the circuit"
        ],
        "Terminologies and Types involved in PCB Design": [
          "6. CAD Tools for PCB Design",
          "7. Understanding all the basic elements of a PCB",
          "8. Types of PCB and Mounting Technologies",
          "9. Terminologies involved in a PCB Design"
        ],
        "Working with Altium Designer - Creating a schematic": [
          "10. Introduction to Altium Designer - Creating the files",
          "11. Understanding the properties of the schematic layout",
          "12. Making the schematic of an Half Wave Rectifier",
          "13. Understanding Designation and Selection Filters"
        ],
        "Making the PCB from the Schematic in Altium Designer": [
          "14. Importing the footprints",
          "15. Manual Routing",
          "16. Auto Routing",
          "17. Adjusting the dimensions of Holes and Solder Pads",
          "18. Polygon Pour",
          "19. Printing Texts in Top Overlay",
          "20. Synthesing the Gerber X2 Files for our PCB"
        ],
        "Creating our own component libraries in Altium Designer": [
          "21. Making our own symbol and footprint for LM7805 (20 min)",
          "22. Creating a library for NE555 Timer and closing remarks"
        ]
      },
      "requirements": [
        "Yes, A basic knowledge in Electrical Circuits"
      ],
      "description": "In this course, you will learn\n1. The basic elements of a Printed Circuit Board.\n2. The need for PCB and evolution of the same.\n3. Steps involved in fabrication of a PCB\n4. Steps involved in the design of a PCB\n5. Types of PCB\n6. Mounting Technologies - PTH, SMT\nWe will understand that PCB is a circuit board that connects all the electrical and electronic components through copper conductive tracks. The copper conductive tracks are embedded on a substrate which is basically a fiber.\nAfter that, we will get into the Altium Designer Software in order to learn how to design a Printed Circuit Board.\n1. Learning how to create a schematic and a PCB in the Altium Designer.\n2. Understanding all the widgets and tools in the software.\n3. Understanding how to route the footprints in a PCB - Both Manual and Auto Routing.\n4. Analyzing the morphology of holes and solder pads.\n5. Printing the texts in Top Overlay.\n6. Creating libraries for two or three terminal components.\n7. Creating libraries for some standard IC's.\n8. Getting the 2D and 3D Layouts of the PCB.\n\n\nAt the end of this course, you will be able to design a PCB in Altium Designer for your circuit knowing all the fundamentals of a Printed Circuit Board.",
      "target_audience": [
        "Beginner Electrical and Electronics Aspirants"
      ]
    },
    {
      "title": "STM32F4 Programming Course for Beginners",
      "url": "https://www.udemy.com/course/stm32f4-programming-course-for-beginners/",
      "bio": "Learn how to design electronic projects with the STM32F4 Discovery Board.",
      "objectives": [
        "Understand basic principles in electronics design",
        "Understand the principles of ARM programming",
        "Learn how STM32 works",
        "Usage of the GPIO pins, Analog Digital Converter, Timer, USART Communication",
        "Build your own applications"
      ],
      "course_content": {
        "Introduction Part": [
          "Overview of the ARM Processor",
          "Overview of Embedded Development Tools",
          "Introduction to STM32F4 Discovery Board"
        ],
        "Blink Project": [
          "Create Keil uVision Project for Blink",
          "Start Programming for Bilink",
          "Final Step of Blink Project",
          "Start Blink Project with use CubeMX",
          "Start Programming for Blink with use HAL_Library",
          "Final Step of CubeMX Blink Project"
        ],
        "Theoritical Information Part": [
          "Pull-up, Pull-down and Open Drain Description",
          "Pull up / Pull down Resistor",
          "Resolution Definition",
          "Resolution"
        ],
        "ADC (Analog Digital Converter) Project": [
          "Create Keil uVision Project for ADC(Analog Digital Converter)",
          "ADC Project Programming Part-2",
          "Fix the Bug of ADC Projects Part",
          "Final Step of ADC Project",
          "Start ADC Project with use CubeMX",
          "Final Step of CubeMX ADC Project"
        ],
        "Timer Project": [
          "Start Timer Project",
          "Final Step of Timer Project",
          "Start Timer Project with use CubeMX"
        ],
        "USART Communication Project": [
          "Definition of Serial and Parallel Communications",
          "Parallel Communicaiton and Serial Communication Protocols",
          "Start Programming to USART Project",
          "USART Project Programming with Hardware Flow Control and Parity Bit Definitions",
          "USART Project Programming Part-2",
          "Run USART Project with Use Arduino and Termite Programs"
        ]
      },
      "requirements": [
        "Basic knowledge of C programming is essential to understand this course."
      ],
      "description": "This course is prepared for STM32F4 starters and it can be thought as Getting Started guide for STM32F4. STM32F4 Discovery Board is a new generation board that has high capabilities such as low cost energy, 32-bit microprocessor, very short response time and so on. STM32F4 is a trending technology; however, there is not much educational resources yet. This course provides all basic and practical knowledge for starting to development using STM32F4. The course includes everything required for beginners and experienced users to get started quickly.\nThe course begins with overviews of ARM architectures, Programming Tools and  introduction to STM32F4 Discovery Board. Then course continues with fundamental the SoC peripherals such as I/O ports, ADC, Timers and USART and of course along with their project.\nYou will be able to develop projects using STM32F4 to improve your basic knowledge by learning the fundamental subjects at the end of this course.",
      "target_audience": [
        "This course is for anyone who is interested in learning about STM32. The course does not require any prior knowledge about STM32.",
        "Anyone with a curiosity for ARM Programming."
      ]
    },
    {
      "title": "Learn Siemens PLC S7-1500 Programming and Configuration",
      "url": "https://www.udemy.com/course/simatic_plc_s7-1500_programming/",
      "bio": "Be an Expert in Siemens PLC S7-1500 & TIA Portal,",
      "objectives": [
        "Siemens PLC S7-1500 Programming with TIA Portal Software.",
        "Configuring Siemens PLC S7-1500 Communication with Remote I/O modules.",
        "Configuring ET200MP with PLC communication using Profinet PN or Profibus DP",
        "New Technologies and options in the S7-1500 PLC"
      ],
      "course_content": {
        "Introduction": [
          "Welcome and Contents",
          "Introduction"
        ],
        "S7-1500 PLC Overview": [
          "S7-1500 PLC Product Overview",
          "S7-1500 PLC Hardware Overview",
          "Hardware Assembly",
          "PLC Wiring",
          "CPU Display",
          "S7-1500 Memory Areas",
          "TIA software Portal Overview.",
          "Creating a Project with TIA Portal",
          "Device (Hardware) Configuration - Part 1",
          "Device (Hardware) Configuration - Part 2",
          "Loading Device Configurations to the PLC",
          "First Application with PLC Tags and Simulation",
          "Device Configuration - Part 3 Network and Topology Configuration",
          "Device Configuration - Part 3 Distributed I/O – ET200MP"
        ],
        "PLC Programming": [
          "Bit Logic - Ladder Programming Language - Rules and Mistakes"
        ],
        "Bit Logic Operations (Instructions)": [
          "Bit Logic - Motor Application Starting & Stopping",
          "Bit Logic - Signal Voting Application",
          "SR - RS Flip-Flop (Blocks)"
        ],
        "Program layout": [
          "Program Blocks (Functions FCs and Function Blocks FBs)",
          "Program Blocks FC Example",
          "Program Blocks FB Multi-Instance",
          "Program Blocks Data Blocks (Optimized and Standard)"
        ],
        "Digital Operations (Instructions) - IEC Timers": [
          "Timers Instructions",
          "Motors Sequence Application (with +ve & -ve Edges Instructions)",
          "Motors Running-Hour Application with TONR Instruction"
        ],
        "Digital Operations (Instructions) - IEC Counters": [
          "IEC Counter Instructions",
          "Counter Instructions - Bagging Conveyor Application"
        ],
        "Common Data Types in S7-1500 PLC": [
          "Common Data Types"
        ],
        "Comparators Operations": [
          "Comparators Instructors",
          "Comparators - Product Counting Application"
        ],
        "Math Operations": [
          "Math Functions"
        ]
      },
      "requirements": [
        "Basic PLC knowledge.",
        "Basic Instrumentation and electrical circuits knowledge"
      ],
      "description": "My Greetings,\nThank you for selecting our course, through the course you will get a good knowledge and experience about PLC programming and also configuration of PLC hardware.\nWe hope that you will enjoy and get the knowledge and experience that lead you to more challenge in this field of automation systems.\nWho is this course for?\nElectrical, Automation, Instrumentation and Control engineers, students, or technicians\nPLC, DCS, and SCADA Engineers and students\nThis Course is introduced to you to discuss many topics like:\nProgramable Logic Controller PLC Configuration, Programming.\nYou will learn to use New siemens software TIA portal with different types of software views.\nPractical PLC examples from the industry will be introduced during the lectures.\nRemote I/O modules configuration and communication settings in the TIA Portal  software.\nThis course is important for the following reasons:\nThe new technologies and types of control systems found in the industry.\nThe need to be trained on the new PLC technology like S7-1500 and new software interface in Siemens TIA Portal software.\nTo be familiar with IEC 61131-3 standard that describe the PLC programming languages like ladder diagram.\n. . . . . . . . . . . . .\n\n\n\n\n\n\nBest Regards\nThank you for selecting our course\nMahmoud Nabawy\nAutomation System Instructor",
      "target_audience": [
        "Electrical, Automation, Instrumentation and Control engineers, students, and technicians",
        "PLC, DCS, SCADA Engineers and students"
      ]
    },
    {
      "title": "Embedded Systems Using Cypress Programmable System on Chip",
      "url": "https://www.udemy.com/course/embedded-system-design-using-cypsoc4/",
      "bio": "Learn how to implement basic and advanced electronic interfaces with the Cypress PSoC 4 platform.",
      "objectives": [
        "By the end of this course you will be familiar with the Cypress Programmable System on Chip (PSoC 4)",
        "You will learn the fundamentals of LEDs. Seven Segment Displays, LCDs, Analog and Serial Interfaces",
        "Programming basics"
      ],
      "course_content": {
        "Basics of PSoC": [
          "Introduction to Programmable System on Chip",
          "Getting Started with PSoC",
          "Lab 1 Using Switch to LED Interface",
          "Introdcution to PSoC",
          "Getting Started with PSoC",
          "Interfacing Switches and LEDs"
        ],
        "Basic Interfaces with PSoC": [
          "Basics of Seven Segment Display",
          "Lab 2 Interfacing Seven Segment Display with PSoC",
          "Seven Segment Display",
          "Basics of PWM and PWM Component in PSoC",
          "Lab 3 Varying LED intensity using PWM",
          "PWM Basic",
          "Character LCD Basics",
          "Lab 4 LCD Component and Lab with PSoC",
          "LCD"
        ],
        "Advanced Interfaces with PSoC": [
          "ADC Fundamentals and ADC Component",
          "Lab 6 ADC Lab",
          "Analog basics and Lab",
          "Basics Of Serial Communication",
          "Lab 5a Serial Component",
          "Lab 5b Serial Lab",
          "Serial Communication basics and lab"
        ]
      },
      "requirements": [
        "Fundamental knowledge of logic and a knowing what is programming",
        "LED, LCD, Seven Segment Displays, Potentiometer"
      ],
      "description": "The PSoC platform is a fast industry grade platform to test and develop products. PSoC is also a very interesting and challenging platform for students to begin building their embedded projects and mould them into products at par with industry.\nFor this course you will need a CYPRESS SEMICONDUCTOR - CY8CKIT-042 - DEVELOPMENT BOARD.\nThe course aims at teaching the various concepts of embedded systems and Programmable Systems on Chip. The course covers the basic on-board and off-board interfaces with the PSoC 4 development platform. The course also covers various aspects of programming and focuses over advanced interfaces like Analog and Serial interface with PSoC 4.",
      "target_audience": [
        "People with background in electronics",
        "Undergraduate students in Electrical/Electronics/Electronics and Telecommunication/Computer Engineering",
        "Graduate students in Electrical/Electronics/Electronics and Telecommunication/Computer Engineering",
        "Working professionals in the electronics industry"
      ]
    },
    {
      "title": "STM32 : Internet Of Things with 4G LTE Modem - Hardware",
      "url": "https://www.udemy.com/course/stm32-internet-of-things-with-4g-lte-modem-hardware/",
      "bio": "Industrial IOT Electronics Circuit Design & PCB Design course using STM32 Microcontroller & SIMCOM 4G GSM Modem",
      "objectives": [
        "Industrial IOT Hardware Design, Electronics Circuit Design, Eagle PCB Design, Hardware Development Process",
        "Interface design & Layout : STM32 MCU, 4G LTE GSM, USB 2.0, SD Card, SIM Card, Antenna design (GSM & GNSS), SMPS, LDO, Li-Ion Battery Charger, USB2UART",
        "Detailed Circuit Design Process, Component Selection, Soldering, Testing & Troubleshooting using DSO, Practical demonstration",
        "How to convert customer requirement into a hardware based product",
        "Detailed Power Supply design process : SMPS, Li-Ion Battery Charger, LDO",
        "Detailed hardware design process : STM32 Microcontroller",
        "Detailed hardware design process : SIMCOM 4G LTE GSM Modem",
        "Details components selection process : Power Supply, Microcontroller & 4G LTE Modem block",
        "Layout Design Process : Layout guidelines, Components placement planning, Layout Design",
        "Layout Guideline and components selection process for ESD & EMI suppression",
        "Manufacturing : Understanding Gerber data, Stencil files",
        "Detailed soldering process : Solder paste, Hot air gun, reflow profile, digital microscope",
        "Testing & Troubleshooting with Digital Oscilloscope, Lab Bench Power Supply & DMM"
      ],
      "course_content": {
        "Note & Information": [
          "About Instructor",
          "Warning",
          "Important Note",
          "Short Message",
          "Ratings and Review",
          "How to ask questions"
        ],
        "Introduction to course": [
          "How To Take This Course",
          "Understanding IOT Based System Structure",
          "Understanding Course Structure",
          "Course Update",
          "Introduction To Course Material"
        ],
        "Introduction To Eagle Software": [
          "Eagle Software : Download & Installation",
          "Eagle Software : Introduction",
          "Eagle Software : Library Installation",
          "Eagle Software : Library Modification"
        ],
        "Introduction To Course Hardware": [
          "Introduction to Hardware - Brief",
          "Introduction To Hardware - Detail"
        ],
        "Introduction To Block Diagram Of Hardware": [
          "Introduction To Block Diagram Of Hardware"
        ],
        "Introduction To Soldering Process, Material & Equipments": [
          "Introduction To Essential Soldering Material",
          "Introduction To Non Essential Soldering Material",
          "Introduction To Stencil",
          "Introduction To Solder Paste",
          "Introduction To Hot Air Gun Part - 1",
          "Introduction to Hot Air Gun Part - 2",
          "Introduction to Hot Air Gun Part - 3",
          "Time Lapse Of Hardware"
        ],
        "Power Supply Section : Introduction": [
          "Power Supply : Introduction",
          "Power Supply : Design Architecture",
          "Introduction To Lab Bench Power Supply"
        ],
        "Power Supply Section : SMPS": [
          "Introduction To SMPS Section",
          "How To Select SMPS IC Part - 1",
          "How To Select SMPS IC Part - 2",
          "How To Select SMPS IC Part - 3",
          "How To Select SMPS IC Part - 4",
          "Introduction To SMPS IC",
          "Understanding SMPS IC Circuit Part - 1",
          "Understanding SMPS IC Circuit Part - 2",
          "Understanding SMPS IC Circuit Part - 3",
          "Understanding SMPS IC Circuit Part - 4",
          "Understanding SMPS IC Circuit Part - 5",
          "Understanding SMPS IC Circuit Part - 6",
          "Selecting Components For SMPS IC Circuit Part -1",
          "Selecting Components For SMPS IC Circuit Part -2",
          "SMPS Schematic Design",
          "Introduction To Protection Circuit For Power Supply Part - 1",
          "Introduction To Protection Circuit For Power Supply Part - 2",
          "Introduction To Protection Circuit For Power Supply Part - 3",
          "Introduction To Protection Circuit For Power Supply Part - 4",
          "Introduction To Protection Circuit For Power Supply Part - 5",
          "Introduction To Protection Circuit For Power Supply Part - 6",
          "Introduction To Protection Circuit For Power Supply Part - 7",
          "Introduction To Protection Circuit For Power Supply Part - 7.1",
          "Introduction To Protection Circuit For Power Supply Part - 8",
          "Protection Circuit Schematic Design",
          "SMPS Layout Design Part - 1 : Planning",
          "SMPS Layout Design Part - 2 : Stackup",
          "SMPS Layout Design Part - 3 : Guidelines",
          "SMPS Layout Design Part - 4 : Layout",
          "Soldering Tips & Technique",
          "Testing, Troubleshooting & Demonstration Part - 1",
          "Testing, Troubleshooting & Demonstration Part - 2",
          "Mistakes",
          "Section Review"
        ],
        "Power Supply Section : Li-Ion Battery Charger": [
          "Introduction To Li-Ion Battery Charger Section",
          "Introduction TO Li-Ion Battery",
          "How To Select Li-Ion Battery Charger IC Part - 1",
          "How To Select Li-Ion Battery Charger IC Part - 2",
          "How To Select Li-Ion Battery Charger IC Part - 3",
          "How To Select Li-Ion Battery Charger IC Part - 4",
          "Introduction To Li-Ion Battery Charger IC",
          "Understanding Li-Ion Battery Charger IC Circuit Part - 1",
          "Understanding Li-Ion Battery Charger IC Circuit Part - 2",
          "Understanding Li-Ion Battery Charger IC Circuit Part - 3",
          "Understanding Li-Ion Battery Charger IC Circuit Part - 4",
          "Understanding Li-Ion Battery Charger IC Circuit Part - 5",
          "Understanding Li-Ion Battery Charger IC Circuit Part - 6",
          "Understanding Li-Ion Battery Charger IC Circuit Part - 7",
          "Selecting Components For Li-Ion Battery Charger IC",
          "Li-Ion Battery Charger IC Schematic Design",
          "Introduction To Li-Ion Battery Protection IC & It's Purpose",
          "Selecting Li-Ion Battery Protection IC",
          "Understanding Li-Ion Battery Protection IC Circuit",
          "Li-Ion Battery Protection IC Schematic Design",
          "Li-Ion Battery Charger & Battery Protection Layout Design",
          "Soldering Tips & Technique",
          "Testing, Troubleshooting & Demonstration",
          "Mistakes",
          "Section Review"
        ],
        "Power Supply Section : LDO": [
          "Introduction To LDO Section",
          "How To Select LDO IC Part - 1",
          "How To Select LDO IC Part - 2",
          "How To Select LDO IC Part - 3",
          "Introduction To LDO IC",
          "LDO IC Schematic Design",
          "LDO IC Layout Design",
          "Soldering Tips & Technique",
          "Testing, Troubleshooting & Demonstration",
          "Mistakes",
          "Section Review"
        ]
      },
      "requirements": [
        "Basic Electronics Knowledge",
        "Motivated to learn electronics"
      ],
      "description": "\"If you want to learn hardware designing then think about taking this course, I promise, you will never be disappointed\"\nNote : This course is designed for electronics enthusiast and also for the advanced audience, please check course content before subscribing to this course. I can assure you, you will never regret spending your valuable money on this course.\n\n\nThis course is not just a PCB Design course but it's a complete hardware design course and covers all the aspects of hardware design which a hardware Designer has to go through in his professional life.  The purpose of this course to develop a sense of hardware based product design in the student. All sections of this course is structured in following manner.\nIntroduction to section\nDatasheet explanation\nCircuit design explanation\nComponents selection\nSchematic design\nLayout Design\nComplete soldering process\nTesting, Troubleshooting & Demonstration\nMistakes to avoid\nWe created this course because we believe that, its important how much knowledge you have but even more important thing is at what age you have it. Normally it takes time to develop skills in hardware and in this course we are sharing our experience and giving you a right approach to develop your skills in hardware designing. Which will help you to avoid mistakes and gain more knowledge in less time.\n\n\nA quote that we want to share with you\n\"Learn from other peoples mistakes\nLife is too short to make them all yourself\"\n- Sam Levenson\n\n\nOur Promise.\nOne thing that we can promise you is this course is going to save your lot of time to learn hardware designing. I will personally answer your questions about this course . If you are in any way not satisfied, for any reason, you can get a full refund from Udemy within 30 days with no questions asked. But we am confident you won't need to. We stand behind this course 100% and we are committed to helping you.\n\n\nThis course is an application oriented course that teaches hardware designing considering a 4G GSM Modem based IOT application. The hardware is based on Microcontroller from worlds leading semiconductor manufacturer \"ST Microelectronics\" & 4G LTE Modem from \"SIMCOM\". Both STM32 Microcontroller & SIMCOM Modem are most widely used for industrial IOT based application.\nThis course is mainly divided in three sections and covers the detailed procedure in their respective sections. For that you can check the course content.\nPower Supply Section\nSwitch Mode Power Supply\nLi-Ion Battery Charger\nLow Dropout Regulator (LDO)\nSTM32 Microcontroller Section\n4G LTE Modem Section\nModem Power Supply Design\nModem ON/OFF mechanism\nModem UART Interface\nModem USB 2.0 Interface\nModem USIM Interface\nModem SD Card Interface\nModem Network & Status\nModem Antenna : Mains & Diversity\nModem Antenna : GNSS\nModem DFU (Device Firmware Upgrade)\n\n\n\"If you want to learn hardware designing then think about taking this course, I promise, you will never be disappointed\"",
      "target_audience": [
        "Beginner, Hobbyist & Professionals who want to learn robust hardware design",
        "Those who want to learn detailed hardware design process from scratch",
        "Those who want to learn Hardware Design, PCB Design, components selection",
        "Those who are good in software and want to understand hardware",
        "Those who want to learn how to test and troubleshoot hardware"
      ]
    },
    {
      "title": "Troubleshoot Your Electronics Projects",
      "url": "https://www.udemy.com/course/troubleshoot-electronics-projects-devices-check-maintenance-electronic/",
      "bio": "This course is intended for those interested in learning electronics and electrical Projects, devices and boards trouble",
      "objectives": [
        "Follow a Hardware Troubleshooting Checklist",
        "Follow a Software Troubleshooting Checklist",
        "What are the right tools for troubleshooting",
        "What are the things to look for when you have a problem in your project",
        "Best Practices in Electronics Projects Troubleshooting",
        "Learn how to use different tools to easily investigate problems in electronic Projects and devices",
        "Get Electronics Troubleshooting Book to know how to test each electronic Component",
        "Learn how to test electronic components Practically",
        "Understand the concepts of voltage, resistance and current",
        "Understand the VOLT OHM Meter/ Digital Multi Meter and how to use safely",
        "Use Ohm's Law to calculate voltage, current and resistance",
        "Use resistors in various configurations",
        "Understand and use capacitors",
        "Understand and use diodes",
        "Understand and use a transistor"
      ],
      "course_content": {},
      "requirements": [
        "A multimeter",
        "A breadboard, jumper wires and a battery",
        "Resistors, capacitors, LEDs, diodes, transistors, voltage regulators"
      ],
      "description": ">>> This Troubleshoot Your Electronics Projects course is intended for those interested in learning electronics and electrical Projects, devices and boards troubleshooting.  <<<\n\n\nWhy you should take this course?\nThis course  teaches you troubleshooting techniques for electronic devices\nLearn to identify the issue with the circuit in order to get it fixed\nLearn from a highly qualified teacher\nEarn a certificate for this course\nTake your knowledge and apply it to practical life projects\nLearn how to use tools such as oscilloscopes, multimeters, function generators\nDeal with circuits including analog and digital circuits, power supplies, microcontrollers, etc.\nThis course is perfect for those who have an interest in electronics but don't know where to start. It will also teach you everything from identifying different issues with a circuit too.\n\n\nWhat you will get when you join this course?\nLearn the right steps to follow when investigating electronic Projects and devices to clearly identify and fix the issue.\nLearn how to test electronic components and make sure they work | Practical\nLearn what are the right tools to be used in troubleshooting | Practical\nLearn debugging and dobule checking techniques\nMore than 2.5 Hours of Practical Videos\nAccess to Electronic and Electrical Practical Test Course | Usually price 200$\nAccess to our Best Selling Amazon Book (Basics of Electronic Components Book) and How to deal with each item| Usually price 50$\nAccess to more than 62 Lecture in Full HD\nAccess to More than 4.5 Hour of Video Content\n\n\nA comprehensive Course that helps you in learning and dealing professionally with electronic Projects, components, and electronic devices and easily troubleshoots any problem using a step by step methodology + a checklist.\n\n\nWelcome to this course.\nTopics that we will be discussed during the Introduction to Electronic Components Course are listed here in a brief outline.\nWhat is troubleshooting?\nRight tools needed for troubleshooting?\nStep by step checklist to follow when troubleshooting\nElectronic components testing steps | practical\nWhat do you need to start troubleshooting\nTools needed to get the job done\nCommon electrical and electronic Components\nTroubleshooting steps\nMasure concerns and how to deal with different situations\nTesting tools and how to test different components\nThe Components of Electricity\nVolt-Ohm-Meter Basics (Measuring Electricity)\nCircuit Diagrams Basics (Electronic Roadmaps)\nThe Resistor\nOhm’s Law\nThe Capacitor\nThe Inductor\nThe Diode\nThe Transistor (Electronic Valves)\n\n\n\n\nWhat students are saying about our previous Electronic Component Course:\nAndré stenberg says, \"This is a nice introduction course to those who would like to learn the basics of electronics.\"\nMike Mackley says, \"It's covering the topic and establishing the basics very well.\"\nSunil Thakur says, \"Great course for beginning in electronics, especially enjoyed the water analogy part to make learning easier.\"\nQays Qaysaneah says, \"Clear and Simple, and that is so nice :)\"",
      "target_audience": [
        "Anyone with a need to brush up their knowledge of basic electronics"
      ]
    }
  ]
}