{
  "courses": [
    {
      "title": "Unreal Engine 5 Beginner Blueprints: Make your first game!",
      "url": "https://www.udemy.com/course/unrealengine5-make-your-first-game/",
      "bio": "Become a game developer in 6 hours by creating an entire puzzle platformer in UE5 without a single line of code!",
      "objectives": [
        "How to make an entire game that doesn't suck!",
        "A foundational knowledge of UE5, that can be applied to any project",
        "How to install UE5, create new projects, and navigate the engine",
        "How to program without a single line of code",
        "How to edit levels",
        "Basic lighting, fog, and post processing fundamentals",
        "How to create menus, like pause screens, death screens, and level selection menus",
        "How to add additional improvements to take your games to the next level"
      ],
      "course_content": {},
      "requirements": [
        "A computer capable of running UE5"
      ],
      "description": "As a complete beginner, learning game development can be hard. My goal is that this course will make the process as fun and easy as possible!\nIn just 6 hours, I'll teach you how to create an entire game without any prior game development experience. Throughout every video, I thoroughly explain the necessary systems we're using in a clear and comprehensive way, so that by the end of this course, you'll not only have completed a game, but you'll also have a foundational knowledge of Unreal Engine that you can use to start making games on your own.\n(Course owners will also get a free download for the project files I created for this series, that can be used for anything you like!)\n\n\nHere’s everything that this course will cover.\n\n\nThe Basics:\nI’ll teach you how to install UE5, make new projects, and edit levels with custom imported objects.\nPrograming a Professional Player Character:\nWe’ll add sprinting, customize our characters movement settings specifically to fit our game, then implement realistic, 3D sound effects and camera shake to enhance the games feel.\nReusable Blueprints:\nThroughout the course I’ll show you how to create multiple Blueprints that you can reuse in all your levels, and easily set custom parameters for the important variables in them. We’ll be able to drag and drop these Blueprints to create full scale levels in just minutes. We’ll make things like subtitles, dangerous spikes, moving platforms, and pressure plates to activate them.\nWe’ll also create a dynamic item collection system, where the collectables are used to open the exit for each level. You’ll learn how to make systems that dynamically react to how many collectables are in your scene.\nLevel Design and Creation:\nWe’ll also take some time to go over a few basic level design principles, and draw out designs for each of our levels. After designing our levels, we’ll drag and drop our reusable Blueprints to construct every one super quickly and efficiently.\nI’ll even teach some basic lighting and post processing systems that you can use to bring life to even the simplest scenes.\nPrograming Menus using Widgets:\nAfter creating our levels, you’ll learn all about creating different kinds of menu, like a main menu where you can select levels you want to play, a pause screen that stops the game and allows users to return to the main menu, as well as a death screen and end screen.\nPolishing and Improvements:\nOnce we’ve essentially finished our game, we’ll go back into our Blueprints, and make some tuning adjustments, bug fixes, and add extra sounds.\n\n\nBecome a video game developer today, you won’t regret it!",
      "target_audience": [
        "Anyone interested in learning how to easily create their own games"
      ]
    },
    {
      "title": "Godot 3 Complete Developer Course - 2D and 3D",
      "url": "https://www.udemy.com/course/godotcourse/",
      "bio": "Game development with Godot 3. Learn GDScript and how to use the engine while building your first 6 2D and 3D games",
      "objectives": [
        "Learn how to use GDScript from scratch",
        "Create awesome 2D and 3D games with Godot - and more are coming",
        "Learn to export your games to different platforms",
        "Learn how to publish your games to different platforms"
      ],
      "course_content": {
        "Setup and Getting Started": [
          "Course Structure",
          "Getting the Most Out of This Course",
          "Tips",
          "Installing Godot"
        ],
        "GDScript": [
          "Module Introduction",
          "Variables",
          "Variable Types",
          "If Statements",
          "If Statements Operatores",
          "Loops",
          "Variable Scope",
          "Arrays",
          "Arrays Functions",
          "Functions",
          "GDScript Assignment",
          "GDScript Cheat Sheet"
        ],
        "Number Guesser": [
          "Module Introduction",
          "Project and Engine Layout",
          "First Messages",
          "Reacting to Player Input",
          "Guessing the Number Correctly",
          "Restarting the Game",
          "The Node System",
          "Rich Text Labels",
          "Updating the Text",
          "Buttons and Signals",
          "Finishing the Game",
          "Godot Quiz"
        ],
        "Tree Puncher": [
          "Module Introduction",
          "Project Setup",
          "Game Scene",
          "Player Scene",
          "Trunks",
          "Exporting Variables",
          "Creating the First Tree",
          "Initializing Trunks",
          "Animating the Player",
          "Moving the Player From Side to Side",
          "Punching Trunks",
          "Spawning Trunks",
          "Detecting Collisions and Restarting the Game",
          "Module Assignment"
        ],
        "Space Attack": [
          "Module Introduction",
          "Project Setup",
          "Moving Background",
          "Player Scene and Movement",
          "Player Projectile",
          "Shooting",
          "Enemy and Shooting",
          "Formation",
          "Spawning a Formation Through Code",
          "Defeating and Respawning Formations",
          "Killing the Player and Restarting the Game",
          "Adding Audio",
          "Space Attack Assignment"
        ],
        "Platform Jump": [
          "Module Introduction",
          "Project Setup",
          "Creating the Platforms",
          "The Player Scene",
          "Making the Player React to Gravity",
          "Creating a Camera that Follows the Player",
          "Spawning Initial Platforms",
          "Spawning More Platforms, Restarting The Game and Teleporting The Player",
          "Springs",
          "Particles and Breakable Platforms",
          "Moving Platforms on a Path",
          "Main Menu and Custom Themes",
          "Autoloading Scripts to Change Scenes",
          "Displaying the Player Score",
          "Saving Player Information to Files",
          "Platform Jump Assignment"
        ],
        "Hammer Time": [
          "Module Introduction",
          "Project Setup and 3D Navigation",
          "Hammer Scene and Camera",
          "Lighting and Hammer Materials",
          "Planks",
          "Nail",
          "Spawning Nails on the Plank",
          "Displaying the Player Score",
          "Checking Wrong Hits",
          "End Game Menu",
          "Debugging to Fix End Game",
          "Bomb Scene",
          "Adding Audio",
          "Hammer Time Module Assignment"
        ],
        "Exporting and Publishing": [
          "Module Introduction",
          "Exporting",
          "Android Export",
          "Android Publishing",
          "HTML Export and Publish"
        ]
      },
      "requirements": [
        "Basic programming knowledge helps but isn't required"
      ],
      "description": "New lectures added periodically to the course.\nIn this course you will learn how to develop games using Godot and its own scripting language: GDScript. We will start by learning how to use the language and keep moving on until we learn how to export and publish our games, this way you'll not only learn how to create 2D and 3D games, but also how to share them.\nGodot is an awesome open source engine that gives us the ability to create awesome 2D and 3D games and export them to the Web, Linux, Windows, OSX, Android and iOS with a single code base! Since its open source release, the engine keeps gaining space and grows more each day. Right now is an awesome time to learn this new engine and grow with it!\nThis course is based on projects, this way you won't just learn how to use the functionalities provided to us by Godot, but also apply them on complete games. At the end of most modules, you'll be given assignments so you can overcome problems on your own and apply what you've learned thought out all of the modules.\nAll of the code and the projects created on the lectures are hosted on github repositories, this allows you to jump to any lecture by just downloading the project of the lecture and start from there, and compare your code to mine if you get stuck.\nThe assets used on the games are also provided to you so you don't have to spend any time looking for assets or creating them!\nTo top it all off, we also have a facebook group where you can interact with me and other students. There, you'll be able to post the games you've created and feedback on them, as well as taking part on challenges of game development that I'll host from period to period.\n\nJoin now, you won't be disappointed!",
      "target_audience": [
        "Newcomers who wants to learn how to program while making games",
        "Professionals who are new to Godot"
      ]
    },
    {
      "title": "Unreal: The complete guide for game level design in Unreal 4",
      "url": "https://www.udemy.com/course/unreal-the-complete-guide-for-game-level-design-in-unreal-4/",
      "bio": "Learn Unreal blueprints by developing realistic game environment with this comprehensive guide from begin to finish",
      "objectives": [
        "Learn how to create a level in Unreal Engine 4 from scratch.",
        "Learn object placement and layout basics of assets in UE4",
        "Understand the Foliage system in UE4 to create great looking plants and trees for their games",
        "Understand how to setup lights, particles, and additional post-process assets to improve the visual look of their course"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Getting started with Unreal Engine": [
          "Getting started with Unreal Engine"
        ],
        "Making our landscape": [
          "Making our landscape"
        ],
        "Making our material": [
          "Making our material"
        ],
        "Painting our material onto our landscape": [
          "Painting our material onto our landscape"
        ],
        "Blending our materials": [
          "Blending our material"
        ],
        "Adding some foliage to our landscape": [
          "Adding some foliage to our landscape"
        ],
        "Adding some trees": [
          "Adding some trees"
        ],
        "Adding some volumetric lights to our environment": [
          "Adding some volumetric lights to our environment"
        ],
        "Finalizing our environment": [
          "Finalizing our environment"
        ]
      },
      "requirements": [
        "Unreal Engine 4",
        "World Machine"
      ],
      "description": "More about the Instructor:\nThis course is designed by Animation Hacks which is the visual effect studio with high-quality skill artist work on numerous unannounced projects. In addition, they enjoy sharing their knowledge with those students who learn 3D online.\nNOTE FOR STUDENTS - please take a look Section 1 / Lecture 1 to downloads for the source attachment link with the lesson.)",
      "target_audience": [
        "Beginners to UE4, or Advanced Students who want to expand their knowledge on the engine",
        "This course is also suit for professional-level UE4 artists"
      ]
    },
    {
      "title": "Three.js & WebGL 3D Programming Crash Course (VR, OpenGL)",
      "url": "https://www.udemy.com/course/threejs-programming/",
      "bio": "Learn how to create 3D web applications and games for web browsers with ease.",
      "objectives": [
        "Create interactive 3D web applications",
        "Make 3D games",
        "Use Three.js to create 3D worlds",
        "Create cross platform web applications",
        "Over 10 lectures"
      ],
      "course_content": {
        "Three.js & WebGL 3D Programming": [
          "Course Intro",
          "Introduction",
          "Draw Geometry",
          "Update Viewport On Resize",
          "Controls",
          "Textures & Colours",
          "Lighting",
          "Model Loading",
          "FPS (Frames Per Second/Framerate)",
          "Anaglyphic 3D",
          "Skybox"
        ],
        "Useful Learning Links": [
          "Three.js Homepage",
          "GitHub Code Repository",
          "Aerotwist",
          "Intro By David Scott",
          "Learning Three,js or WebGL For Dummies"
        ],
        "Three.js Plugins": [
          "Physijs (Physics Plugin)",
          "List of Game Extensions",
          "tQuery API (Three.js & jQuery)",
          "whs.js"
        ],
        "Bonus Lecture: Discounted Course": [
          "Bonus Lecture: Discounted Course"
        ]
      },
      "requirements": [
        "You should already be familiar with JavaScript",
        "Passion for web development"
      ],
      "description": "Learn how to create interactive 3D experiences such as web application and games. A step by step process is used to show everything from setting up to creating interactive 3D worlds.\nGain a good understanding of the following concepts:\n3D design\nModel loading\nWorld/Scene generation\nUser interaction\nThree.js and WebGL programming\nGame development\nThree.js allows you to create amazing 3D web applications to target the biggest market in the world, THE WEB. Now with the boom of smart phones the audience is growing rapidly.\nYou will be provided with the full source code to aid in development during and after this course. The source code is free to use in as many projects as you wish.\n\n\nOver 205,000 students have enrolled on my courses and all of them are extremely satisfied. You will also be satisfied with this course. If you do not like the course, remember that within 30 days you can request a full refund. I guarantee you satisfaction.\nIf you have any questions regarding the topics covered in this course, please feel free to ask. I'm always happy to help those who want to learn.\n\n\nTo summarise this is what you get:\n• Lifetime access to HD quality videos. No monthly subscription. Learn at your own pace, whenever you want.\n• All videos are downloadable. Learn wherever you want, even without an internet connection!\n• Downloadable starter code and final code for each section.\n• Free helpful support in the course Q&A when you have questions or get stuck.\n• Multiple coding challenges to practice your new skills (solutions included).\nSounds great? Then start this adventure today by clicking the “Take this course\" button, and join me in the only course that you will need!",
      "target_audience": [
        "This Three.js course is meant for individuals looking to create 3D web applications and games",
        "You should already be familiar with JavaScript programming",
        "A basic understanding of Front End Development is also helpful"
      ]
    },
    {
      "title": "Unreal 5 Stealth Combat: Make Stealth Games in UE5 Blueprint",
      "url": "https://www.udemy.com/course/unreal-5-stealth-combat/",
      "bio": "Build your own 3rd person stealth combat game, complete playable map, alarm hazards, obstacles, enemies &more!",
      "objectives": [
        "An in-depth look at using Blueprints in Unreal to create a 3rd person player controller.",
        "How to use the latest technologies in Unreal 5, like MetaHumans, Quixel, Niagara, Behavior trees, and much more.",
        "Create an enemy AI to interact with the player as we navigate around a map.",
        "Level blockout and level design.",
        "Merging animations to get our 3rd person player controller smoothly navigating around different terrain.",
        "A sensor detection system for the alarms.",
        "An interaction interface to interact with some objects."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Project Setup",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Player Creation": [
          "Section Intro - Player Creation",
          "Player Blueprint",
          "Player Input and Movement",
          "Character Animations"
        ],
        "Sensors and Alarm": [
          "Section Intro - Sensors and Alarm",
          "Alarm Setup",
          "Parent Sensor",
          "Rotative Sensor",
          "Rotative Sensor Model",
          "Bar Sensor",
          "Sensor Lever",
          "Interaction Interface",
          "Lever Logic"
        ],
        "Stealth Combat": [
          "Section Intro - Stealth Combat",
          "Crouch Locomotion Blendspace",
          "Crouch Locomotion State",
          "Crouch Locomotion Logic",
          "Crouch Capsule Collider Shrink",
          "Uncrouch Obstacle Detection",
          "Dummy Setup",
          "Takedown Animations",
          "Guard Blueprint Interface",
          "Dummy Takedown Logic",
          "Player Takedown Logic"
        ],
        "Enemy Guard AI": [
          "Section Intro - Enemy Guard AI",
          "Guard AI Setup",
          "AI Chase Player",
          "AI Catch",
          "AI Perception Sight",
          "AI Catch Trace",
          "Captured Fade Screen",
          "Guard Alarm Trigger",
          "Background and Escaping Music",
          "Dodge Roll",
          "Waypoint Patrol System",
          "Sensor Detection Meter Widget",
          "Sensor Detection Meter Time",
          "Sensor Detection Widget Update",
          "Sensor Detection Exit"
        ],
        "Environment": [
          "Section Intro - Environment",
          "Level Blockout",
          "Level Expansion",
          "AI Guard Patrol Waypoints",
          "Mantle Calculations",
          "Mantle Animations",
          "Mantle Motion Warping",
          "Mantle System Polish",
          "Night Sky",
          "Import Megascans",
          "Add Megascans To Level",
          "Metahumans",
          "Rain Niagara System",
          "Rainy Clouds Nigara System"
        ],
        "Polish": [
          "Section Intro - Polish",
          "Falling and Land States",
          "Captured Menu",
          "Pause Menu",
          "Main Menu",
          "Escape Timer",
          "Leaderboard UI",
          "Escape Widget and Trigger",
          "Steal Jewel",
          "Leaderboard Save System"
        ],
        "Wrap Up": [
          "Outro"
        ]
      },
      "requirements": [
        "This is a “Beginner+” course. That means you should have a beginner's understanding of the Unreal engine and a simple understanding of blueprints.",
        "It'd also be epic if you have a willing and open mind, excited to learn the intricacies of Unreal and Blueprints."
      ],
      "description": "Are you looking to level up your game development skills and take your projects to the next level?\nDo you like games like Assassin's Creed?\nTake your skills from beginner to advanced, while learning to organise and scale larger projects. You’ll learn how to use the latest technologies in Unreal 5, like MetaHumans, Quixel, Niagara, Behavior trees, and much more.\nThis course has everything you need to know, from start to finish, to create an Assassin's Creed like stealth combat game.\nEven if you’re not interested in stealth combat style games, these skills are super transferable to other types of games.\nYou’ll use Unreal Blueprints to create a 3rd person stealth combat game. You’ll create your own playable map, complete with alarm hazards, obstacles, intractables, enemies AND a local leaderboard to show the quickest map completion times!\nSo if you’ve already used Unreal and are looking to develop greater skills inside the engine. Or you’ve always wanted to create your own ‘Assassins Creed’ like combat stealth game. Or you’re simply looking to fully complete a whole project within the engine. This is the course for you!\nThis is a “Beginner+” course, which means you should have a beginner's understanding of the Unreal engine and a simple understanding of blueprints.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced coders, so are able to explain complex concepts clearly, as well as entertain along the way. We’re thrilled to have teamed up with Gorka Games to bring you this course.\nBenefit from our world-class support from both other students, and the instructors who are on the forums regularly.\nYou’ll gain access to a course forum where you can discuss topics on a course-wide basis, or down to the individual video. Get plugged into our communities of amazing developers on Facebook (nearly 20k), in our own TA-curated Community (17k views/day), and our student chat group (10k live at any one time).\nDive in now!",
      "target_audience": [
        "This course is great if you already have a decent understanding of the basics of Unreal, but are looking to develop greater skills inside the engine.",
        "It's also ideal if you want to create an ‘Assassins Creed’ like sort of combat stealth game.",
        "And it's perfect if you want to fully complete a whole project."
      ]
    },
    {
      "title": "How to Create iOS 2D Games with SpriteKit and Swift",
      "url": "https://www.udemy.com/course/2d-games-with-spritekit/",
      "bio": "SpriteKit: Learn to Build 2D Games by Creating a Real World Arcade Game from the iOS App Store.",
      "objectives": [
        "Build 2D Games with SpriteKit",
        "SpriteKit Fundamentals",
        "Create and Work with Game Scenes",
        "Create Cool Animations",
        "Deal with Collisions and Physics"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Using the Project Files"
        ],
        "What is SpriteKit?": [
          "A SpriteKit Overview",
          "Important SpriteKit Classes",
          "Create a SpriteKit Game Project",
          "Create Your First Scene",
          "Your First Animation"
        ],
        "The Game Setup": [
          "Game Design and Mechanics",
          "Prepare Graphic and Sound Assets",
          "Setup the Game Project",
          "Create the Main Game Scene"
        ],
        "SpriteKit Basics & First Game Logic": [
          "From Scene Editor to Code",
          "Add the Player",
          "Detect Touches",
          "Add Touch Based Verticle Game Control",
          "Animations & the Rendering Loop",
          "Animate the Player Horizontally"
        ],
        "SpriteKit Particle Emitter": [
          "What can Particle Emitters do?",
          "How to Create Particle Emitters",
          "A Pulsing Player",
          "Add the Pulse Animation to the Player"
        ],
        "Create and Spawn Enemies": [
          "SKShapeNodes as Enemies",
          "Random Enemy Parameters",
          "Move and Remove Enemies"
        ],
        "Collisions and SKPhysicsBody": [
          "The SKPhysicsBody Class",
          "Bitmasks and Collisions",
          "Sample App: Bitmasks and Collisions",
          "Add Categories and Collision Settings",
          "Take Action based on Collisions"
        ],
        "Refine Gameplay": [
          "Velocity for the Player",
          "Define What Happens After Collisions",
          "Add Sound Effects",
          "Add a HUD: Game Timer and Score",
          "Create Power Ups",
          "Make Power Ups Collectable"
        ],
        "Multiple Scenes and Moving Background": [
          "Add Start and Game Over Scenes",
          "An Infinite Moving Background",
          "Game Over",
          "Handle Game Data with Singleton",
          "Finishing Touches"
        ],
        "Conclusion": [
          "Next Steps"
        ]
      },
      "requirements": [
        "You should know the basics of Swift 3 or 4",
        "You should know the basics of Xcode",
        "Mac with Xcode 8 or later"
      ],
      "description": "Five of the top ten highest grossing apps on the iOS App Store are games. If you ever had an idea for an amazing game but didn’t know how to create it, then this course is for you. Apple provides great game frameworks for every developer. One of these frameworks for 2D games is SpriteKit.\nThis course is going to take you through the process of creating a 2D arcade game step-by-step. Not only will you have finished a complete game project after taking this course, you will also get profound theoretical knowledge about the SpriteKit Framework and many of its important classes.\nI am Brian Advent and I am running one of the largest youtube channels on iOS development. I am also organising the annual Swift Tutorial Conference and with my 17 years of development experience I am offering you a course with a great combination of theory and practice.\nA Real World Project\nThis course is centred around a real world arcade game called Color Trek. You can download it on the App Store for free and you will create this game from start to finish in this course. In that process you will put all the theory that you are going to learn into practice right away.\nHow and what you are going to learn\nSpriteKit is a huge framework, which is why you are going to start your journey with an overview about the most important classes that you are going to encounter.\nYou will then create your first game world and your first animations to familiarise yourself with the tools provided by Apple.\nAfter these first steps you are going to start creating a real game from start to finish, starting with the project setup, the integration of game assets and the creation of the main game scene.\nAmong other things you are then going to learn both theory and practice about:\ntouch gesture detection\nobject movement and animation\nhow to create animations and how to use particle emitters for animations\ngame physics and collisions\nhow to use the power of random\n\n\nIf you have never created a game before, then you will also enjoy my detailed explanations on collision detection, which is one of the most important aspects of 2D game development.\nI designed this Swift course to be easily understandable for any iOS Developer who has a beginner or intermediate knowledge about the Swift programming language and the Xcode IDE.\nThis course comes with extensive exercise files (code files and assets) for every video, with a begin and end state of all projects. You'll be able to work alongside the instructor and will receive a verifiable certificate of completion upon finishing the course.",
      "target_audience": [
        "iOS Developers who want to learn how to create 2D Games with SpriteKit"
      ]
    },
    {
      "title": "Create a Complete Online Co-Op Multiplayer Game in Godot 4",
      "url": "https://www.udemy.com/course/create-a-complete-online-cooperative-multiplayer-game-in-godot-4/",
      "bio": "Learn how to create a complete 2D online cooperative multiplayer game in Godot 4.4+!",
      "objectives": [
        "Server-authoritative architecture for online multiplayer games using Godot’s high-level networking tools.",
        "Remote Procedure Calls (RPCs) to synchronize game state across clients and the server.",
        "MultiplayerSpawner and MultiplayerSynchronizer for scene tree and state synchronization.",
        "Compose game scenes using modular components to create a flexible and maintainable project structure.",
        "UI creation using Godot’s Control nodes and UI theming system.",
        "Gameplay systems including a multiplayer lobby, multiplayer connections, combat, & more!"
      ],
      "course_content": {
        "Setting Up the Foundation": [
          "Godot Setup and Orientation",
          "Creating a Basic Player Scene",
          "Adding Basic Movement and Input Handling to the Player",
          "Laying the Groundwork for Multiplayer Connection",
          "Writing Our First Multiplayer Code",
          "Basic State Synchronization and First RPC Call",
          "Replicating Players Across the Network",
          "Input Authority",
          "Synchronizing Player Positions",
          "Display Configuration",
          "Adding Player Art",
          "Adding a Weapon to the Player",
          "Firing Bullets from the Weapon",
          "Synchronizing Bullets",
          "Creating Bullets at Proper Intervals",
          "Beginning Work on an Enemy",
          "Implementing Bullet Collision",
          "Adding Basic Enemy Health & Synchronization",
          "Adding an Arena",
          "Spawning Enemies",
          "Basic Enemy AI",
          "Adding Round Structure for Enemy Spawns",
          "Creating a Health Component",
          "Global Signals and Advancing Rounds",
          "Hurtbox and Hitbox Components",
          "Making Enemies Damage The Player",
          "Addressing Warnings"
        ],
        "Improving the Look of the Game": [
          "Y-Sorting",
          "Proper Weapon Rotation & Player Flipping",
          "Adding an Animated Background",
          "Creating a Weapon Animation",
          "Synchronizing Weapon Animations",
          "Creating a Muzzle Flash Particle",
          "Spawning Muzzle Flashes In Game",
          "Adding a Visual Timer and Round Counter",
          "Synchronizing Round Timer"
        ],
        "Adding More Mechanics": [
          "Improving Enemies",
          "Adding an Enemy State Machine",
          "Adding Enemy Dash Attack",
          "Adding an Enemy Attack Indicator",
          "Synchronizing the State Machine",
          "Handling Player Death",
          "Handling Game Over",
          "Fixing Player Input Synchronizer",
          "Handling Peer Disconnection"
        ],
        "Adding Even More Polish": [
          "Adding Hit Flash",
          "Adding Impact Particles",
          "Adding Persistent Ground Particles",
          "Adding Camera Shake",
          "Adding a Victory Condition"
        ],
        "User Interface": [
          "Button Theming & Main Menu",
          "Creating a Multiplayer Menu",
          "Enhancing Multiplayer Menu",
          "Making Multiplayer Settings Configurable",
          "Handling Connection Errors",
          "Showing Player Names In-Game",
          "Fixing Single-Player Bug",
          "Player Health UI",
          "Making Health UI Functional",
          "Fixing Player Name Bug",
          "Creating a Pause Menu",
          "Making Pause Menu Functional",
          "Adding Ready-Up to Lobby",
          "Adding Ready-Up UI Part 1",
          "Adding Ready-Up UI Part 2"
        ],
        "Finalizing Game Mechanics": [
          "Adding an Upgrade System with Custom Resources",
          "Synchronizing Upgrade Options to Clients",
          "Allow Clients to Select Upgrades",
          "Fixing Client Upgrade Authority",
          "Synchronizing Upgrade Option State",
          "Making Upgrades Functional Part 1",
          "Making Upgrades Functional Part 2",
          "Advancing Rounds After Upgrading",
          "Adding Visuals to Upgrades",
          "Showing Upgrade Tooltips"
        ],
        "Final Polish": [
          "Animations for Player and Enemy",
          "Adding Acceleration to Player Movement",
          "Tweaking Enemy Attack Behavior",
          "Preventing Bullets from Hitting Multiple Targets",
          "Adding Invulnerability After Taking Damage",
          "Player Damage Feedback",
          "Adding a Custom Mouse Cursor",
          "Adding Sound Effects",
          "Adding Music",
          "Creating an Options Menu",
          "Exporting the Game",
          "Connecting Over the Real Internet",
          "Congratulations and Further Areas of Exploration"
        ]
      },
      "requirements": [
        "Familiarity with general programming concepts"
      ],
      "description": "This course teaches you everything you need to know to create a fully playable online cooperative multiplayer game from start to finish using the Godot Engine (version 4.4 or newer).\nCore features and mechanics you'll learn include:\nServer-authoritative multiplayer architecture\nRemote Procedure Calls (RPCs) for state synchronization\nGodot’s high-level multiplayer networking system\nTwin-stick shooter controls\nModular scene composition\nUI layout with Control nodes and theming\nGameplay programming with GDScript\nThis is just a highlight - check out the full course outline for a complete list of topics covered!\nI'm Firebelley. I have over 7 years of experience using the Godot Engine and have published multiple commercial games to Steam. You'll be learning from someone who has used Godot to ship real games. I'm also the instructor behind several other highly-rated Udemy courses.\nWhether you're just getting started with Godot or looking to get into online multiplayer game development, this course will walk you through the entire process. By the end, you’ll have a solid understanding of the key concepts and systems needed to build and publish a complete online 2D co-op game.\nThis course is perfect for you if:\nYou’re new to Godot and want a hands-on project\nYou’re interested in building multiplayer games\nYou have basic programming experience and want to apply it to game dev\nNote: This course focuses on building an online multiplayer game in Godot 4.4+. It does not cover programming fundamentals. Familiarity with coding concepts is strongly recommended before enrolling - any programming experience will do. GDScript is easy to learn!\nSeveral lessons are available for free preview - watch them to see if the course pace and teaching style are a good fit for you!",
      "target_audience": [
        "Aspiring game developers who want to make multiplayer games",
        "Seasoned Godot developers with an interest in multiplayer",
        "Beginner to intermediate Godot users looking for a complete, hands-on project",
        "Programmers new to game development",
        "Hobbyists and developers looking to learn Godot in a comprehensive way"
      ]
    },
    {
      "title": "Beginner VR Oculus Rift Development with Unity3D",
      "url": "https://www.udemy.com/course/developing-oculus-rift-vr-applications-with-unity3d/",
      "bio": "Starting out with Virtual Reality Development for the Oculus Rift on Windows Using Unity3D with NO programming required.",
      "objectives": [
        "Understand the Challenges of Developing Virtual Reality Applications",
        "Build Virtual Reality Applications Using Unity3D",
        "Setup Unity3D for Virtual Reality Development",
        "Build a Windows Oculus Rift App for Virtual Reality using Unity3D",
        "Share the App with the World!"
      ],
      "course_content": {
        "Introduction: What we'll be learning": [
          "Introduction",
          "Video Introduction: Your Instructor Daniel Buchanan"
        ],
        "Virtual Reality Development Overview": [
          "Getting Started: Mindset",
          "Definitions",
          "History and Modern VR",
          "Oculus Rift Google Cardboard and Other Headsets on the Market",
          "Why Now? VR Development Platforms",
          "Unique VR Dev Challenges",
          "Community and Distribution",
          "Quiz: Virtual Reality"
        ],
        "Installing Unity3D and Setting it up for Virtual Reality Development": [
          "Installing Unity3D for Windows",
          "The Oculus Rift Runtime and SDK",
          "Links for Downloads"
        ],
        "Getting Assets for Your Scene": [
          "Assets in Unity3D",
          "The Unity3D Asset Store",
          "Quiz: Assets"
        ],
        "Building Your Virtual Reality Application": [
          "Setting up your Workflow",
          "Unity Workflow Detail",
          "Getting the Oculus SDK into Unity",
          "VR Rendering in Unity 5",
          "Creating an Oculus Rift Windows Application from Unity3D",
          "Sharing your Virtual Reality Experience",
          "Unity3D for Oculus Rift"
        ],
        "Conclusion": [
          "Conclusion: Now You Are a Virtual Reality Developer!"
        ]
      },
      "requirements": [
        "A computer",
        "An internet connection"
      ],
      "description": "This class is for the beginner who wants to get into the world of virtual reality. We will make a Virtual Reality Application for MIcrosoft Windows using the Unity3D Software. We will start with a broad overview about the medium of Virtual Reality and how it pertains to modern game design. We will also go over some of the unique challenges we face as VR developers, including simulator sickness. We will download Unity3D and the Oculus Rift SDK and set it up for VR development. We will also build an application as a windows program and talk about how to get that out to the world. At this course's conclusion you will be a Virtual Reality Developer, ready to hone your craft and make great VR experiences for your users.",
      "target_audience": [
        "Aspiring Virtual Reality Developers",
        "Mobile Developers",
        "Software Developers",
        "Virtual Reality Enthusiasts who want to Create Virtual Reality Content"
      ]
    },
    {
      "title": "Learn to Build a 3D Puzzle Game with Unity",
      "url": "https://www.udemy.com/course/3dmotive-learn-to-build-a-3d-puzzle-game-with-unity/",
      "bio": "Explore the process of building a complete 3D puzzle game inside of Unity - from start to finish!",
      "objectives": [
        "Lean to build a 3D puzzle game inside of the Unity engine",
        "Lean to import meshes, textures, and animations into the Unity Game Engine",
        "Learn the basics of scripting game elements in Unity"
      ],
      "course_content": {
        "Project Overview and Constructing the Gameplay Space": [
          "Download Course Files Here!",
          "Introduction",
          "Project Overview",
          "Configuring a New Project",
          "Importing Assets",
          "Configuring Meshes and Audio",
          "Creating Materials",
          "Starting Level Design",
          "Completing Level Design",
          "Using Props",
          "Scene Lighting",
          "Lightmap Preparation",
          "Starting Lightmapping",
          "Lightmap Resolution",
          "Final Lightmap",
          "Adding More Levels"
        ],
        "Importing Animations and Learning Movement": [
          "Introduction",
          "Exploring Rigged Meshes",
          "Bones and Hierarchies",
          "Rigs and Avatars",
          "Skinning and Muscles",
          "Exploring Animation Clips",
          "Cheer Animation",
          "Walking and Pushing Animations",
          "Getting Started with State Machines",
          "Parameters and Transitions",
          "Completing the Walk Transition",
          "Completing the State Machine",
          "Scripting and Mecanim",
          "Creating Movement Mechanics",
          "Looking Forward"
        ],
        "Working with Moving Objects, Collisions, and Building the Camera": [
          "Introduction",
          "Movement Overview",
          "Getting Started with Rotation",
          "Completing Player Movement",
          "Adding Crates",
          "Adding Colliders",
          "Planning Collision Detection",
          "Point Intersection",
          "Movement Validation",
          "Hand and Crate Contact",
          "Introducing Inverse Kinematics",
          "Using Empty Objects as IK End Links",
          "Scripting with IK",
          "Completing the IK Rig",
          "Adding Crate Destinations",
          "Detecting End Conditions",
          "Creating Chase View Cameras"
        ],
        "Building Level Conditions, Understanding Game Settings, and FX": [
          "Introduction",
          "The Game Manager",
          "Singletons",
          "Preparing for Level Switching",
          "Checking for a Win Condition",
          "Loading the Next Level",
          "Real Time Lighting",
          "Using Light Probes",
          "Adding Background Music",
          "Adding a Torch Prop",
          "Starting the Fire Particle System",
          "Refining the Fire Particle System",
          "Completing the Fire Particle System",
          "More Prefabs",
          "Image Effects",
          "Testing Resolutions",
          "Game Settings",
          "Moving Onwards"
        ],
        "Additional Game Programming, Final Bug Testing, and Conclusion": [
          "Introduction",
          "The Road Ahead",
          "Player Preferences",
          "Testing Player Prefs",
          "Exploring XML",
          "Introducing Data Serialization",
          "Serializing Transformation Data",
          "Extending the Data Manager",
          "Saving and Loading with the DataManager",
          "Revising the GameManager",
          "Saving Games with the GameManager",
          "Restoring Games with the GameManager",
          "Persistent Data Path",
          "Testing Load and Save Games",
          "Bug Alert",
          "Fixing the Restore Bug with Persistent Objects",
          "Conclusion",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "Unity",
        "Autodesk's Maya"
      ],
      "description": "In this course, instructor Alan Thorn takes you through the process of building a 3D puzzle game inside of the Unity engine. Here he will cover a range of topics including project creation, level design, lightmapping, skinning, animation state machines, collision detection, and camera creation just to name a few.\n\n(Students - please look under Section 1 / Lecture 1 downloads for the source files associated with the lesson.)\nMore about the Instructor:\nAlan Thorn is a game developer, author and educator with 15 years industry experience. He makes games for PC desktop, Mobile and VR. He founded 'Wax Lyrical Games' and created the award-winning game 'Baron Wittard: Nemesis of Ragnarok', working as designer, programmer and artist. He has written sixteen technical books on game development and presented ten video training courses, covering game-play programming, Unity development, and 3D modelling. He has worked in game development education as a visiting lecturer for the 'National Film and Television School', as a Lead Teacher for 'Uppingham School', and is currently a Senior Lecturer at 'Teesside University' where he helps students develop the skills needed for their ideal role in the games industry.",
      "target_audience": [
        "Intermediate game artists and designers interested in building games in Unity"
      ]
    },
    {
      "title": "Asteroids with Python PyGame",
      "url": "https://www.udemy.com/course/asteroids-with-python-pygame/",
      "bio": "PyGame for total beginners",
      "objectives": [
        "Basics of PyGame",
        "Load and display images",
        "Handle keyboard input",
        "Game loop",
        "How to make the Asteroids game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Download the code",
          "Game loop",
          "Draw ship",
          "Rotate image",
          "Keyboard input 1",
          "Keyboard input 2",
          "Keyboard input 3",
          "Draw asteroids",
          "Move asteroids",
          "Basic collision",
          "Collision detection",
          "Fire",
          "Multiple fire",
          "Collision bullet",
          "Whats next?"
        ]
      },
      "requirements": [
        "Basic Python knowledge (no OOP required)"
      ],
      "description": "When I was a kid, I used to play a lot of Asteroids, a simple arcade game where your space ship was orbiting around a bunch of asteroids. In the game you had to move your space ship around to avoid crashing into them or get onto them to destroy them with the lasers on the space ship. Whenever I played it I had fun.\nIn this course you will learn how to make the Asteroids game with the Python programming language. You don't need any advanced knowledge of Python nor any object orientated programming knowledge, it's a beginners course. Only basic Python knowledge is required like functions and loops.\nThe course will introduce you to PyGame, a game programming library. You will learn how to load and display images, how to create animations, how to create game play, how to add text and so on. By the end of this course, you will have a complete asteroids game made with the Python programming language.\nThe course includes all the code examples and graphics so you can follow along with each step. If you want to make games with Python, what are you waiting for? Enroll today and I'll see you inside the course.",
      "target_audience": [
        "Python beginners that want to learn PyGame"
      ]
    },
    {
      "title": "Learning Unreal Engine: From Beginner To Advanced",
      "url": "https://www.udemy.com/course/learning-unreal-engine-from-beginner-to-pro/",
      "bio": "Get Up To Speed With A Working Knowledge Of Unreal Engine 4 and 5 Fast, And Have Fun At The Same Time",
      "objectives": [
        "You will learn how to download & install your personal free copy of Unreal Engine",
        "You will learn how to create your first Unreal Engine scene",
        "You will learn how to import assets to the Unreal Engine",
        "You will learn how to apply materials to your imported asset",
        "You will learn how to light a scene - in just a few simple steps",
        "You will learn how to create an animation sequence and add your assets to the sequence",
        "You will learn how to create a simple animation - ready to render in high-definition video",
        "You will learn how to export your scene out to a video file, ready for further manipulation",
        "You will learn how to create a stunning cinematic animation scene in Unreal Engine, from beginning to end",
        "You will learn how to create the scene in the \"Preview This Course\" video, step-by-step",
        "You will receive all scene files including alien character, male & female characters, spaceship interior & music",
        "Learn the benefits of \"real-time rendering and animation\" - a true game changer in the industry",
        "You will learn how to export a Genesis character from Daz Studio, and import it to Mixamo to prepare for animation",
        "Learn how to export the character and animations from Mixamo and then import them to Unreal Engine 4",
        "You will learn how to use realistic Pbr (Physically based rendering) Materials in your scene to give ultra realism",
        "You will learn how to create smooth camera moves inside Unreal Engine 4, giving your scene a professional cinematic look and feel",
        "You will learn how to color grade your scene with HitFilm Express ( a free video editing program) and upload your finished scene to YouTube",
        "You will get a tutorial on how to use Unreal Engine 4's \"Decals\" which will give your scene a new level of realism",
        "The Complete Unreal Engine Scene File Ready To Go Out-of-the-Box",
        "A Really Cool Toon House To Use In Your Scenes Created by Michael Ricks ($25.00 value)",
        "Four (4) Rigged Daz Original Toon Characters Included With the Course Created by Michael Ricks ($60.00 retail value)",
        "Rigged Robot character included in course (compliments of Epic Games)",
        "You will learn how to create high quality facial animations & more",
        "Learn how to export morph targets (expressions) out of Daz Studio and bring them into Unreal Engine 4",
        "Create high quality blink animations, the basis for realistic characters",
        "Animate side-to-side and up & down eye movements for believable characters",
        "Animate Mouth movements and mouth expressions.",
        "Animate head movements with the little known animation tools within Unreal Engine 4",
        "Create believable, expressive expressions, right within Unreal Engine 4",
        "Includes the incredibly detailed Paragon Sevarog and Paragon Narbash fully rigged characters",
        "You will learn how to use the incredibly fun and powerful cloth tools in Unreal Engine in a few easy steps",
        "You will learn the easy, simple steps to create real-time cloth animation inside of Unreal Engine 4",
        "You will learn how to use physics assets in Unreal Engine 4 that will interact with cloth and clothing",
        "No additional software programs are needed to achieve cloth simulation & animation other than Unreal Engine",
        "You will learn how to create an \"Animation Asset\" from your cloth and physics character setup",
        "Use your characters in games, film, television and commercials",
        "Easy and fun - once you know the simple steps",
        "You will learn how to jump into iClone 7 and get a fast start to animating your characters",
        "Learn how to create an original 3d Character in Character Creator 3",
        "Learn how to send your character to iClone 7 ready for animation",
        "Learn how to pose and animate your character in iClone 7",
        "Learn how to perform facial animation and lip sync with your character",
        "Discover how to use powerful tools such as Motion Puppet, Direct Puppet and Face Puppet",
        "You willYou will learn how to render and export your video from iClone 7 learn how to record your animations for later use on other characters",
        "You will learn how to use \"Live-Link\" to send your character to Unreal Engine for animation and scene setup",
        "You will learn how to setup your scene in Unreal Engine and record the animation there",
        "You will be able to rig and animate a character in Unreal Engine 4 using the Allright Rig plugin and output your animations to video",
        "You will receive the Creature \"The Dweller\" by Josh P. Crockett - fully rigged and ready to animate",
        "Course includes the full Unreal Engine 4.17 scene - setup and ready to go! (v 4.17 required for the free version of Allright Rig 1.3)",
        "UE4 Scene Contains Allright Rig 1.3 (free version) installed",
        "Full step-by-step instructions on how to setup your characters with Allright Rig 2.0",
        "Instructions on how to prepare your characters for rigging in Allright Rig 2.0",
        "Allright Rig 2.0 Presets for Daz characters: Genesis, Genesis 2, Genesis 3, Genesis 8",
        "Allright Rig 2.0 Presets for Paragon characters: Shinbi and Dekker"
      ],
      "course_content": {
        "Introduction: Let's begin - off we go to a quick start": [
          "Preview Video: What you will learn in this course",
          "Preview Video: Facial Animation & More In Unreal Engine! | 3D Animation",
          "Preview Video: Learn Amazing Cloth Animation, Simulation and Animation",
          "Preview Video: Learn iClone 7 | Character Creator | Unreal Engine Pipeline",
          "Where to get your FREE copy of Unreal Engine",
          "Let's Take A Tour Of The Epic Launcher",
          "Create Your First Project and Import The Robot"
        ],
        "How To Organize & Navigate Your Scene/Level/Map": [
          "How To Create Folders To Organize Your Scene",
          "How To Save Your Level (Scene)",
          "How To Hide Scene Icons",
          "How To Open Different Viewports Such As Top, Side, Left, Right and Bottom",
          "How To Dock and Undock Windows",
          "REVIEW: Remember The F Key and ALT Key Are Your Friends"
        ],
        "Let's Build Some Stuff": [
          "Let's Drag & Drop Some Walls Into The Scene",
          "Let's add materials to your walls",
          "A quick look at materials in the Material Editor"
        ],
        "Unreal Engine's Realistic Lighting System: You're Gonna Love This": [
          "Let's Start By Deleting All Our Lights, Then Add A Directional Light (Sun)",
          "If you are having a problem getting your scene completely black?",
          "Contact Shadows: One Of The Keys To Realism",
          "Now We're Going To Set up your First Point Light",
          "That was easy! Now Let's Set Up A Spotlight",
          "Onward to Rectangle Lights",
          "Onto Some Really Cool Lighting Setups",
          "The Sphere Reflection Capture",
          "The Skylight: Lighting With HDRI Images (High Dynamic Range Images)",
          "Let's Create The Sky"
        ],
        "Atmospheric Effects": [
          "Atmospheric Fog",
          "Exponential Height Fog - You're going to love this",
          "God Rays! The Holy Grail of Lighting Effects",
          "How About A Little Fire, Scarecrow? Unreal Engine's Amazing Particle System"
        ],
        "How To Create Amazing Cinematics In Unreal Engine": [
          "First We'll Create A New Level & Add A Character",
          "Here's The Scene We Are Going To Create",
          "Next We'll Create An Awesome HDRI Environment",
          "Add Your Cinematic Camera To The Level and Sequence",
          "Create a new Level Sequence (Cinematic Sequence)",
          "Add \"Manny,\" Our Robot Mannequin Character & Animation",
          "Let's make that camera bad ass and create some advanced settings",
          "Now Let's Get Some Beautiful Depth Of Field In Our Shot",
          "Let's Add Some Camera Movement",
          "Now Let's Add A 2nd Camera",
          "Preparing Our Project For Export: Production Quality Settings",
          "How To Export Your Video For Further Editing & Manipulation"
        ],
        "Video Editing & Color Grading": [
          "FREE Video Editing Program: HitFilm Express",
          "Let's Edit and Color Grade Our Unreal Engine Clips"
        ],
        "Where To Get Your Free Daz 3d Genesis Character Bundles": [
          "Where To Get Your Free Genesis Character Bundles"
        ],
        "Introduction To 3D Character Animation In Unreal Engine": [
          "What You Will Learn About 3D Character Animation In Unreal Engine",
          "This Is The Unreal Engine Movie Scene You Will Be Creating In This Course",
          "Download The Needed Programs - all free"
        ],
        "Resources: All The Course Project Files Needed Are In This Section": [
          "The newest complete Unreal Engine 4.27 Project File"
        ]
      },
      "requirements": [
        "A copy of Unreal Engine, which is free. No knowledge of Unreal Engine is required. You will learn the easy, simple steps to get up and running in Unreal Engine quickly and have lots of fun in the process",
        "DAZ Studio 4.1, which is free"
      ],
      "description": "Everything you'll learn in this course can be applied to Unreal Engine 5.\nYou can even switch the layout of Unreal Engine 5 back to classic Unreal Engine 4 if you'd like to make it easier to follow along.\nKeep in mind that Unreal Engine 5 requires a powerful computer to run efficiently, so be sure that your computer is powerful enough to run the program.  Unreal Engine 4 runs much faster on less powerful computers, so many people are staying with this version until they can upgrade their machines.\n\n\nUnreal Engine has become a leading resource in the creation of games, animations, television shows and feature films!  In this course we will take the absolute beginner from knowing nothing about Unreal Engine 4 and 5  to a workable understanding of:\n\n\nScene setup\nImporting assets & characters\nLighting setup\nBasic material setup and application\nThe Sequencer (Unreal Engine's animation & editing timeline)\nSetting up a simple animation\nImporting audio into the Sequencer\nRendering your movie out to a movie file for further manipulation\n\n\nSTUNNING CINEMATICS\nYou will learn how to create a stunning cinematic animation scene in Unreal Engine from beginning to end\n\n\nFREE COPY OF UNREAL ENGINE\nYou will learn how to get your own free copy of Unreal Engine\n\n\nREAL TIME RENDERING\nLearn the benefits of \"real-time rendering & animation,\" a true game changer in the industry\n\n\nEPIC MANNEQUIN CHARACTER\nYou will learn how to get the awesome Epic Mannequin character along with ready-made animations for your project\n\n\nSUPER REALISTIC PBR MATERIALS\nYou will learn how to use realistic PBR (Physically based materials) in your scene to give ultra realism\n\n\nEDIT WITH HITFILM 3 EXPRESS\nYou will learn how to color grade your scene with HitFilm 3 Express (we'll show you where to get this free program) and upload your finished scene to YouTube\n\n\nTESTIMONIAL\n\"One word for this course . . . \"fantastic.\"  This course is as close to perfection as you can get. The instructor speaks slowly, with enthusiasm. He covers all the necessities without bogging you down with too much info. I love how he gets you having fun quickly with the Sequencer section. The audio is of great quality. His depth of knowledge in a variety of 3d packages is amazing. I am familiar with Daz 3d, Mixamo and Unreal but I learned so many great tips and discovered several things that I was doing incorrectly. I searched YouTube for Unreal Engine 4 sequencer tutorials and found none of them to be satisfactory. After ten minutes with this course, I was very confident with Sequencer. If you are interested in getting Daz 3d characters into Unreal, and a ton of tips and information on top of it, you do not want to miss out on this fantastic course.\" ~ J Jackson\n\nWhat You Will Learn In This Course\n\nIn this course we will cover the  steps on how to animate your character in Unreal Engine.  This is a  project based course, and I’ve designed it to be really, really fun.   All the scene files you will need are included in the course.  You will  get the Exile Alien character along with 28 motion-capture animations  that work with him.  You’re going to love how easy it is - you just drag  and drop your character in the scene and it’s ready to go.\nWe’re also going to cover lighting, physically based materials, camera movement and much more.  Best of all it’s fun.\n\n\nDAZ Studio Export\nWe will cover how to prepare your Daz Genesis  character for export and animation.  There are certain steps that need  to be taken in order for the character to be able to accept  motion-capture animations in Mixamo and then imported into Unreal Engine.\n\n\nMixamo\n(Note: Even though Mixamo discontinued direct support for Unreal Engine, this method works by exporting standard Fbx from Mixamo to Unreal Engine 4.)\nNext, we’ll upload your character into Adobe Mixamo and add motion-capture animations.  Mixamo is a ton of fun, and super easy to  use as you’ll see.  There are literally thousands of animations in  Mixamo, and all you have to do is click on the animated preview and it  will be applied to your character.  So you’re basically auditioning your  character using different animations.   You can adjust the speed of the  animation, and adjust things like the arm spacing as well.  Your  character won’t have his materials or textures applied - we will do that  over in Unreal Engine.\n\n\nUnreal Engine 4 - Drag and Drop Animation\nInside of Unreal Engine we will have some fun with the Mixamo  animations you applied to your character.  All you have to do is select  your character and drag him into your scene.  Hit play, and the  animation begins, being rendered in real-time.\n\n\nAn Army of Animated Aliens\nInside the course, there are 28 animated aliens, ready for you to  drag and drop into your Unreal Engine scene for instant animations!  In no time at  all, you’ll have your aliens fighting, jumping, running, or falling.   You’ll have enough animations to make some really awesome movie scenes.\n\n\nUnreal Engine Sequencer\nNext up is the Unreal Engine Sequencer, which is very similar to a non-linear editor.  We will set up your scene, complete with spaceship  interior, Exile alien characters, lights, smoke effects and cameras and  get it ready for animation.  Sequencer makes it really fun to get your  scene set up and feels very similar to being on a real movie set.  In  fact, I’ve found that’s the best way to think about it - like you’re in  the real world.  Unreal Engine’s lighting system behaves like real world  lights, so it’s very responsive and intuitive, as you will see.\n\n\nExporting your video file - and rendering in near real time\nNow we will export your movie in high-definition... in near  real time.  No longer does it take hours  or days to render a single frame.  This is a real game changer.  Imagine  being able to setup, animate and then render 1 minute of finished  animation per day...it would be entirely possible to complete a  2 hour  feature film in 120 days.  Unreal Engine has provided the tools to make  this possible some day.\n\n\nHITFILM Express\nWe will then take our rendered video file and bring it into HitFilm  Express, or your favorite video editing program. There we will add color  grading, music, sound effects and fine tune our edits to prepare our  scene for final output.\n\n\nYour finished High-Definition Scene\nBy the end of the course you will have completed your own animation  scene from beginning to end and have a good understanding of Unreal  Engine's animation workflow.\n\n\nGo ahead and click on the enroll now button to get immediate access  to your scene files and get started right away!\nTo recap, you’ll get:\nThe Exile Alien Character along with 28 motion-capture animations\nThe complete Unreal Engine 4 project with all assets\nThe Genesis 2 Male and Female characters\nComplete sci-fi spaceship interior\nBest of all, it’s fun\n\n\nSee you on the inside\nLEARN FACIAL ANIMATION & MORE WITH UNREAL ENGINE 4 & DAZ STUDIO\nBoth of these outstanding animation programs are free and will allow you to create stunning and highly professional character animations. In this course we will go over the simple techniques that unlock the little known animation powers inside of Unreal Engine.  By using the high quality Daz 3d characters, you will learn how to export any morph targets you'd like from Daz Studio and then utilize them inside of Unreal Engine.  (Note: Even though there is a Daz to Unreal Bridge there are some issues with it and its good to learn how to do this manually as discussed in this course)\n\n\nREAL TIME ANIMATION RENDERING\nBy far one of the most powerful features of Unreal Engine is the ability to see your animations playing in real time as you work.  No more slow, sluggish systems that cramp your style and hinder your animation creativity.  Unreal Engine is a breeze to use, and best of all ... it's fun.  When you're ready to export your animation to an image sequence for later compositing or to a video file, you will be able to render your animation out in near real time.\n\n\nIN THIS COURSE YOU WILL LEARN:\nHow to prepare your Daz 3d character for export to Unreal Engine 4 with all the morph targets and expressions you wish\nHow to use the Puppeteer tool in Daz Studio as a way to export morphs and animations\nHow to properly import your Daz 3d character with it's skeleton, rigging, morph targets, materials and textures\nLearn where the morph sliders are in Unreal Engine and how to use them\nCreate a realistic blink animation for your character\nCreate side to side and up & down eye movements for your character\nAnimate mouth movements for speech as well as expressions\nAnimate your characters head movements\nCreate and animate believable expressions\nLearn about amazing new tools that work in conjunction with Unreal Engine 4 such as Allright Rig & Akeytsu\nPlus much, much more\nIncluded In The Course Are Five (5) Fully Rigged Characters\n\nSuper Dude - this character is an original creation by Michael Ricks sculpted in ZBrush.  Inspired by the characters from the hit film 'The Incredibles,' Super Dude comes fully rigged with a ton of facial morphs.  You'll have an absolute blast right away when you start sliding around the controls and see what hilarious expressions you can make with him.  He also comes with the phoneme mouth shapes for accurate lip sync punctuation. Super Dude is based on the Daz 3d Genesis 8 character.\nWendy - this cute Toon girl character is also an original creation by Michael Ricks and was sculpted in ZBrush, based on the Daz 3d Genesis 3 character.  She also comes with many facial morph and expression controls and will immediately come alive for you in Unreal Engine 4.  With her big expressive eyes, you will have her emoting in no time at all.\nLil' Frankenstein - this Toon character was also created by Michael Ricks in ZBrush and is based on the Daz 3d Genesis 3 character.  Frankie comes with a wide array facial morphs and can create many emotions.  You'll have tons of fun with Lil' Frankenstein all year around, not just on Halloween.\nBilly - also created and sculpted in ZBrush by Michael Ricks, this Toon boy character is based on the Daz 3d Genesis character and comes with a wide variety of facial morphs.  You'll have a blast animating Billy.\nEpic Robot - this way cool robot character is created by Epic Games for the hit VR game Robot Recall.  He's a stunning 3d character asset and really fun to animate.  He comes with an included animation and sound wave 'roar' so you'll have him up and running right away.\nNOW IS THE BEST TIME TO LEARN ANIMATION!  SO GO AHEAD AND CLICK THE ENROLL NOW BUTTON AND LET'S BEGIN\nAll these characters are included in the course and are for your use both personal and professional for cinematics and film/video use.  If you desire to use the characters in an actual game as a playable character you will need to purchase an interactive license from Daz 3d as these characters are based on the Genesis models.  At this time, game licenses are running approximately $30-$50 per character for a published game.\n\n\n\"The course is well organized and it's a good beginner course. I would recommend this for anybody wanting to learn the basics of unreal  engine 4 cloth simulation.\" ~Robert S\n\n\n\"There is essential info concerning clothes in Unreal Engine 4. I had issues about a character and asked help to Michael. His dedication to help you solve your issues is amazing. 5 stars, and I go to follow his other courses. Thanks again Michael for your professionalism.\" ~Luter L\n__________________________________________________________________________\nLEARN HOW TO CREATE AMAZING, REAL TIME CLOTH ANIMATION\nIn this course you will learn the simple, easy steps to apply real-time cloth animation to your characters. Once a very difficult task, the folks at Epic Games have made this process a lot easier and actually FUN to do, right inside of Unreal Engine 4.\nFULLY RIGGED CHARACTERS ARE INCLUDED IN THIS COURSE\nYou will have access to the amazing Paragon Sevarog and Paragon Narbash characters that are fully rigged and come complete with motion-capture animations.\nONLY A FEW SIMPLE STEPS ARE NECESSARY\nYou will be taken thru the easy step-by-step process of painting cloth weights to create your animation.  You will learn how to use the wind tool inside of Unreal Engine 4 to get your character's clothing to blow in the wind! (This is a little known feature)\nBest of all, the process is simple, and anyone can do it once they follow the steps.\nYOU WILL LEARN ABOUT PHYSICS ASSETS AND HOW TO CREATE AMAZING ANIMATIONS WITH IT\nIn this course you will learn about physics assets and how to set it up on your character to create amazing animations that look like it took you days to hand animate.  This is one of the hidden features of Unreal Engine 4 that few have figured out how to use.  It's amazingly powerful - you're going to love it.\nANIMATION ASSETS\nYou will learn how to create reusable animation assets that can be imported into Sequencer, blended with other animations and then exported out into a cinematic movie file.\nENROLL NOW\nNow is the perfect time to enroll in the course and have fun learning cloth animation in Unreal Engine 4!  See you on the inside\n\n\nIMPORTANT:  Everything you'll learn in this course can be applied to the new releases of Character Creator 4 and iClone 8.\nIn this course you will learn one of the most powerful animation workflows available today -\nReallusion's Character Creator 3, iClone 7 and Unreal Engine\nLearn how to create an original 3D Character in Character Creator 3\nLearn how to send your character to iClone 7 ready for animation\nLearn how to pose and animate your character in iClone 7\nLearn how to perform facial animation and lip sync with your character\nDiscover how to use powerful tools such as Motion Puppet, Direct Puppet and Face Puppet\nYou will learn how to record your animations for later use on other characters\nYou will learn how to render and export your video from iClone 7\nYou will learn how to use \"Live-Link\" to send your character to Unreal Engine for animation and scene setup\nYou will learn how to setup your scene in Unreal Engine and record the animation there\nYou will also learn how to setup and use the amazing Live Face App for iPhone X, 11, or 12 to create high quality lip sync and facial animations.\nYou're going to love how intuitive and simple it is to create your very own custom character in Character Creator 3. In no time at all you will be creating broadcast and film quality characters that are rigged and ready to animate in iClone 7.   You will learn how to apply mocap animations to your character and adjust the animation to your liking - all within iClone 7.\nAfter that you will discover the powerful workflow of sending your character and animation to Unreal Engine, using Live-Link, and then record your animation inside of Unreal Engine in real-time.\nAnd the best part?  It's fun. Now is the perfect time to jump in and learn this powerful workflow that will assist you in bringing your creative vision to life.\n\n\nRIGGING YOUR CHARACTER IN UNREAL ENGINE\n\n\nNew:  Allright Rig's price has now been lowered to $49.99 in the Unreal Engine Marketplace.\nEven with the introduction of the new Epic Control Rig, I have found the Allright Rig to be a very helpful tool.  It's an all in one tool, where you can rig your character's body and facial morphs, so it is ready for animation in Sequencer.\n\n\nFinally. The Holy Grail of animation (Lip Synch animation) can be done inside of Unreal Engine 4 with the new plugin \"Allright Rig 2.0\" created by Alexander Shatalov.\nComplete Unreal Engine 4 Scene File\nAllright Rig 1.3 (free version)\n\"Dweller\" creature character, fully rigged (created by Josh P. Crockett)\nPresets for Genesis, Genesis 2, Genesis 3, & Genesis 8 characters\nComplete video instruction (over 3.5 hours) on how to rig and animate your character - from beginning to end\nNo longer do you need to purchase expensive programs such as Maya and 3ds Max to animate your characters - now you can achieve stunning quality with the powerful combination of Daz Studio, Unreal Engine and Allright Rig 2.0\n\n\nHere is some additional information about the plugin:\n\n\nModular rigging system allows you to create any kind of rigs.\nFacial rigging using bones and blend shapes.\nBaking animation from an animation sequence to the rig and vise versa.\nPartial animation editing.\nPose library.\nCopy/paste, mirror animation using animation tools.\nAnimation constraints such as parent, point, orient, scale and aim.\nAnimation curve filters such as butterworth, peak removal, simplify curve.\nCustom Blueprint library.\nPresets for different character rigs.\nOpen source.\n\n\nENROLL NOW\nNow is the perfect time to enroll in the course and have fun learning Unreal Engine. See you on the inside.",
      "target_audience": [
        "This course is perfect for anyone with absolutely no knowledge of Unreal Engine 4 that would like to get up and running quickly and without delay. It is also great for those familiar with Unreal Engine 4 that would like to brush up on the basics",
        "Anyone who wants to learn how to animate a character inside of Unreal Engine 4",
        "Anyone who wants to learn how to create stunning cinematic animations inside of Unreal Engine 4",
        "Beginner to intermediate animators who wish to learn facial animation & intermediate animation in Unreal Engine 4",
        "Artists, hobbyists, filmmakers and game developers interested in learning the powerful cloth and clothing tools in Unreal Engine 4",
        "Students who are brand new to iClone 7 or current users who wish to dive deeper into character animation using Character Creator 3, iClone 7 and Unreal Engine",
        "Students who wish to learn a cost-effective, powerful workflow for high quality 3D animation for film, TV or game development",
        "Students who wish to learn how to perform facial animation and lip sync for their digital characters",
        "Anyone interested in learning how to rig and animate inside Unreal Engine 4"
      ]
    },
    {
      "title": "Make a 2.5D Game with Godot 4 (2025 UPDATED with Godot 4.4)",
      "url": "https://www.udemy.com/course/adventurer-andie-learn-to-make-a-2point5d-platformer-with-godot/",
      "bio": "(Compatible with Godot 4.4) Make your first Godot 2.5D game with good-looking 3D game assets!",
      "objectives": [
        "Learn to make a good-looking 2.5D action game with Godot",
        "Learn how to code a 2.5D game in GDScript",
        "Learn how to control the player's 2D movement",
        "Learn how to create patrol behavior using the RayCast3D node",
        "Learn how to make the attack & health system",
        "Learn how to make a health pick-up",
        "Learn how to control VFX",
        "Learn how to use StateMachine to control and blend animations",
        "Learn how to create game UI in Godot, like the health UI & the restart button",
        "Learn how to export Godot project into exe files",
        "Learn how to create a trap"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Introduction",
          "Download and install Godot",
          "Download the game assets",
          "Import the game assets"
        ],
        "Creating the Game Scene & the Player Character": [
          "Creating the game scene & the player node",
          "The basic player movement script",
          "Setting up the map input actions",
          "Attaching the sword to the Player",
          "Setting up the player's idle/run animations",
          "Setting up the player's airborne animations",
          "Adding the run & jump VFX to the Player"
        ],
        "Creating the Player's health script & a spike trap": [
          "Creating the spike trap",
          "The player's health script",
          "The player's dead animation",
          "The Player's hurt animation, hurt material effect and invincibility"
        ],
        "Creating the UI system": [
          "Creating the health UI",
          "Creating the Game Over UI & the restart button"
        ],
        "Creating the health pickup": [
          "Create the health pickup 01",
          "Create the health pickup 02"
        ],
        "Creating the Enemy Character": [
          "Creating the enemy node and the enemy script",
          "Creating the enemy patrol behavior",
          "Setting up the enemy to damage the player"
        ],
        "Setting up the Player's attack": [
          "The player's attack 01 - Setup",
          "The player's attack 02 - The enemy hurt material animation",
          "The player's attack 03 - Update the controllability code",
          "The player's attack 04 - Update the player script",
          "The player's attack 05 - The enemy's health code & the hit VFX"
        ],
        "Finishing the game": [
          "Creating the end door",
          "Update the player's invincibility",
          "Design the game level & export the game"
        ],
        "(7/2025 UPDATE) Update the project to Godot 4.4": [
          "Update the project to Godot 4.4"
        ],
        "(7/2025 UPDATE) The Double Jump Ability": [
          "Adding the double jump ability to the player"
        ]
      },
      "requirements": [
        "It would be great if you have beginner-level programming experience"
      ],
      "description": "Hello, I’m Single-minded Ryan, a game developer and digital artist.\nIn this course, we are going to create a typical 2D-style game in a 3D world, but before getting into the details, I know you have a big question a ask:\n\n\nWhat is the core benefit that this course has to offer?\n\n\nThe answer is that I want you to feel like you are making a real game from the very beginning\nI want to you learn the knowledge about game development with production-level game assets, so you can absorb these ideas seamlessly.\nThis is why I put a lot of effort into creating the assets for the course, so you can have high-quality characters, smooth animations, detailed materials and VFX particles, and good-looking level modules to work with.\nThese assets are great benefits you can get with this course because you can use the assets to experiment with new ideas and design your levels even after finishing the course.\n\n\nLet’s talk about what we are going to do in this course.\nOur player can explore this world with 2D movements, so we’ll cover these behaviors in GDScript, including the run, jump, and melee attack actions.\nThen we’ll learn how to control the animations using a combination of different animation nodes, such as the StateMachine node, the blend animation node, and the OneShot node. This way you will have more flexibility when dealing with complicated animation setups.\nWhen it comes to the enemy, I’ll show you how to make it patrol around the platform, and to detect the edges and blocks so it knows when to turn around. These behaviors are achieved by the ray cast feature, which is an essential technique you have to know to deal with the physics engine in game development.\nVisual effect is also a big part of video games, I’ll show you how to control the particles via the script and how to create material animation for the sword-swinging action.\nWant more challenges for the player? Let’s create a trap with spikes, here we’ll learn how to detect physics bodies using a collision shape, and how to use physics layers to manage the collision detection.\nNeed something to keep the player alive? Here comes the health pickup. To make the pickup work, We’ll finish the player’s health system with the heart UI on screen.\nFinally, we’ll set up an end door as the destination of the level, and cover the game over UI and the restart game button to finish up the gameplay\nBy the end of this course, you’ll be able to export the game to executable files and show it off to your friends.\n\n\nIf you are eager to improve your programming skills, this course also has a lot to offer.\n\n\nWe’ll talk about the core idea of Godot game development: the Game Lifecycle functions, these concepts are shared between many game engines, so understanding these functions will help you establish a solid foundation for your further career.\nYou’ll learn about some basic programming ideas like how to use variables and constants, how to use conditions and control flow like the if statement and the for loop.\nWe’ll also talk about some unique GDScript features, like how to use annotations and how to communicate between scripts using signals, which is\nBut I want you to notice that this course is not heavily code-oriented, meaning it would be really great if you understood some basic programming ideas.\n\n\nI’ll keep adding new content later like I’ll add new lectures to talk about how to make collectible coins and how to shoot bullets in summer this year.\n\n\nI can’t wait to see you in this course and check out the cool games you are going to make.\n\n\n\n\nAt the end of this course, you will be able to do things like:\nCode in GDScript, which is Godot's built-in programming language\nCode basic character 2D movement (run/jump)\nHow to create a patrol behavior for the enemy using the RayCast feature\nCreate a melee attack\nUse Godot's input system\nHow to use the StateMachine animation node and OneShot node to control the player’s animation\nHow to blend animations\nControl material effect with GDScript and animation\nControl VFX via GDScript\nControl Enemy's behaviors like causing damage to the player and dead\nHow to create a trap to hurt the player\nCreate a health & damage system\nCreate a health pick-up\nDesign the 2.5D Game Level\nHow to use the UI system to display the player’s health hearts\nHow to reset the game scene\nHow to create a button and how to reload the game\nCustomize Godot's settings for your game and your workflow\nHow to export the game into executable files\nPlease NOTE that this course DOES NOT contain any sound and music assets at the moment, because I don't know how to compose them for now.\n\n\n*All of the assets (models, animations, VFX, etc.) provided in this course are only for educational purposes, please do not use them in any commercial projects.",
      "target_audience": [
        "Beginners who wants to make good-looking games with Godot"
      ]
    },
    {
      "title": "Create a Third-Person Player Character Controller",
      "url": "https://www.udemy.com/course/create-a-third-person-player-character-controller/",
      "bio": "Learn Mixamo and Unity's Mecanim system for constructing and programming your own third-person game character.",
      "objectives": [
        "How to rig and animate a 3D character from a pre-existing library of high quality, motion captured animations.",
        "How to create a state machine of character animations that are controlled via user input.",
        "How to implement the Unity Input System.",
        "How to use Cinemachine to create a character following camera.",
        "How to program from scratch a third-person player character controller for a game environment."
      ],
      "course_content": {},
      "requirements": [
        "A working knowledge of Unity",
        "A working knowledge of C#"
      ],
      "description": "Any self-respecting game developer knows that getting their third-person player character right is one of the fundamental keys to a great gaming experience. Not only this but the controller, once developed, can be transferred from one game to another, making the code reusable and scalable. In this course, you will learn how to put together your own third-person character from scratch using freely available 3D models and animations, which you will learn how to control with C# in Unity.  The idea behind this course is to take students through a series of workshops with the necessary tools to help them make a character, animate a character and program a character without the need of being able to model or animate and gain an understanding of the third-person character controller pipeline.\nThis course uses Unity 2020.1 or 2020.2, Input System 1.0, and Cinemachine 2.6.3\nLearn how to program and work with:\n3D Characters and Rigs\nHumanoid Avatars\nThe Mecanim System\nAvatar Masks\nAnimation Blend Trees\nUnity's new Input System Package\nUnity's Cinemachine Package for 'Character Following' Cameras\nAdobe's Mixamo Service for Rigging and Animating 3D Characters\nThird-Person Character Controllers\nMixing Root Motion with Physics Controls\nWhat people are saying about Penny's courses:\nDr. Penny is a wonderful person and a true expert. All of her courses I've taken have been top notch and in my opinion there is no better teacher out there.\nAllow me to say how hugely important this is for a person who is interested in certain types of game design. Creating games where you can create AI behaviors that support emergent situations.\nI honestly love Holistic's teaching approach and I've never learned so much within a few hours about coding effectively with such detailed explanations!\nThis course focuses on the building of typical third-person character functionality including jumping, falling, weapon handling, shooting, and taking damage. By the end of this course, you will have a great third-person character controller that you can use in your own games or adapt for customized situations.",
      "target_audience": [
        "Beginner game developers who don't necessarily have the skills to create their own character but are interested in alternative ways to use pre-existing models in their games.",
        "3D Modellers who want to learn how to animate their characters in Unity.",
        "Anyone with Unity experience who wants to learn more about what is possible with the built in humanoid animation system."
      ]
    },
    {
      "title": "Complete Godot 3D: Develop Your Own 3D Games Using Godot 4",
      "url": "https://www.udemy.com/course/complete-godot-3d/",
      "bio": "Learn how to create 3D games from start to finish in Godot engine 4 and GDScript!",
      "objectives": [
        "Get the most out of the new Godot 4 game engine by making 3D video games",
        "Make 3 different awesome games, while learning the fundamentals and key concepts of Godot 4",
        "Learn key concepts of Godot such as using Nodes, Scenes, Scripting & Signals",
        "Learn how to program using GDScript, Godot’s tailor-made scripting language - ideal for making things quickly.",
        "Learn how to animate your game with Tweens, AnimationPlayers and even Shaders!",
        "Learn how to build 3D levels, environments, character controllers, enemies, and a host of other essential game objects."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome to the Course",
          "Community & Support",
          "Downloading Godot",
          "Creating a Project",
          "Exploring the Editor",
          "Running the Game",
          "Accessing Our Projects"
        ],
        "Project Boost": [
          "Section Intro - Project Boost",
          "Your First Script",
          "Scripting Essentials",
          "Controlling the Player",
          "Blocking Out the Level",
          "Instantiating the Player",
          "RigidBody3D and Physics",
          "The Input Map",
          "Collision Detection",
          "The Export Annotation",
          "Crashing and Respawning",
          "Loading the Next Level",
          "Introducing Tweens",
          "Tweening Hazards",
          "Introducing Audio",
          "Controlling Audio With Scripts",
          "Introducing Particles",
          "One Shot Particles",
          "Improving the Ship",
          "Coloring the Ship",
          "Building Backgrounds",
          "Lighting the Scene",
          "Exporting Your Game",
          "Wrap Up - Project Boost"
        ],
        "Barbarian Blaster": [
          "Section Intro - Barbarian Blaster",
          "Setting Up the Scene",
          "Introducing the Gridmap",
          "Using the Gridmap",
          "Building Curves With Path3D",
          "PathFollow3D Enemies",
          "Making A Base",
          "Health and Labels",
          "Introducing Properties",
          "Text, Strings and Colors",
          "Mouse Input and Ray Picking",
          "Updating Gridmap Cells",
          "Clicks and Cursors",
          "Building Towers",
          "Picking Turret Positions",
          "Making Projectiles",
          "Introducing Timers",
          "Aiming the Turrets",
          "Damaging Enemies",
          "For Loops and Targeting",
          "Introducing Animations",
          "Instantiating Enemies",
          "Control Nodes and UI",
          "Earning and Spending Gold",
          "Difficulty Curves",
          "Scaling Enemy Health",
          "Ending the Game",
          "The Victory Screen",
          "Rewarding the Player",
          "Using GLTF Files",
          "Updating the MeshLibrary",
          "Barbarians and Animations",
          "Polish and Balance",
          "Wrap Up - Barbarian Blaster"
        ],
        "Robo Rampage": [
          "Section Intro - Robo Rampage",
          "Setting Up the Scene",
          "First Person Movement",
          "Input Events and Aiming",
          "Improved Aiming and Smoothing",
          "Custom Reticles",
          "Advanced Jumping",
          "Making a Prototyping Sandbox",
          "Introducing Navigation",
          "Enemy Movement",
          "Enemy Attacks",
          "Arming the Player",
          "Recoil and Raycasts",
          "Dealing Damage",
          "Making Particles",
          "Instantiating Particles",
          "The SubViewport",
          "Damage Feedback",
          "Game Over",
          "Introducing Shaders",
          "Weapon Variety",
          "Swapping Weapons",
          "Cycling Weapons",
          "Tracking Ammo",
          "The Ammo Label",
          "Ammo Pickups",
          "Pickup Visuals and Shaders",
          "Aiming and Zooming",
          "Building Interiors",
          "Building the Level",
          "Making the Level Playable",
          "Tweaking the Enemy",
          "The AnimationTree Node",
          "Lava Shader",
          "Adding Lava Pools",
          "Decorating the Level",
          "Lighting and Polish",
          "Finishing Touches",
          "Wrap Up - Robo Rampage"
        ]
      },
      "requirements": [
        "The only prerequisites for taking this course is having access to a windows, Linux, or Mac computer or laptop.",
        "Whether you're an absolute beginner or have some programming or Godot experience, this course is for you!"
      ],
      "description": "Learn how to get the most out of the new Godot 4 game engine by making cool 3D video games.\nWe take you through the fundamentals and key concepts of Godot. You’ll use Godot’s built-in scripting language, GDScript, to create interesting game mechanics.\nYou’ll learn how to build 3D levels, environments, character controllers, enemies, and a host of other essential game objects. And you’ll animate your game with Tweens, AnimationPlayers and even Shaders!\nYou’ll create 3, yes 3!, awesome games in Godot 4…\nProject Boost: Your first 3D Godot Project from the ground up, controlling a rocket with physics to explore levels and avoid obstacles.\nBarbarian Blaster: a Tower Defence game where you’ll learn a bunch of essential skills for a variety of games like mouse control, enemies, firing projectiles, dealing damage, spawning game objects, making animations and more.\nRobo Rampage: First Person Shooter game where you’ll learn how to build custom interior levels, enemies with AI and polish off your 3D game dev skills.\nWhether you’re a complete beginner or have dabbled in Godot before, this course will have something for you.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAnd you’ll get access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nGodot 4 is an amazing engine and this course is the perfect place to dive into it.\nGet in early for this highly anticipated and much requested course! The course is still in development, with the first two projects (10+hrs of content) already live. More awesome content is being added on a regular basis. So don't delay, jump in now!",
      "target_audience": [
        "This course is great if you have knowledge of another game engine and are looking to see how things are done in Godot engine, and kickstart your learning process.",
        "It's also ideal if you're an absolute beginner looking to make your first game(s). Scripting is taught from the ground up without assumed knowledge."
      ]
    },
    {
      "title": "The Most Comprehensive Guide To Unity Game Development Vol 1",
      "url": "https://www.udemy.com/course/the-most-comprehensive-guide-to-unity-game-development/",
      "bio": "From Complete Beginner To Professional Game Developer. Learn To Code In C# And Create Stunning Games With Unity",
      "objectives": [
        "Learn how to code in C#",
        "Learn good coding principles and design practices",
        "Develop strong and transferrable problem solving skills",
        "Learn how object oriented programming works in practice",
        "Understand the whole process of creating a game",
        "Learn the ins and outs of Unity game engine",
        "Learn how to use tile maps in Unity",
        "Learn how to save and load game data"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction(IMPORTANT - Watch This Lecture)",
          "2 Notes (IMPORTANT - Watch This Lecture)"
        ],
        "The Unity Game Engine": [
          "Downloading Unity Hub And Unity",
          "About Unity Versions And Creating A New Project",
          "Introduction To Unity's Interface",
          "Starting With Unity Basics",
          "Rigid Bodies And Colliders",
          "Audio Source And UI Elements",
          "Moving Our Character With Code"
        ],
        "Programming In C#": [
          "Introduction To Variables",
          "Operations With Variables",
          "Functions",
          "Conditional Statements",
          "Loops",
          "Classes",
          "Accesibility Modifiers(Data Encapsulation)",
          "Inheritance",
          "Coroutines",
          "Getting Components"
        ],
        "Monster Chase Game": [
          "Game Introduction",
          "Importing Assets And Working With Sprite Sheets",
          "Creating Player Animations",
          "Sorting Layers And Order In Layer",
          "Creating The Game Background",
          "Player Movement",
          "Animating The Player Via Code",
          "Player Jumping",
          "Camera Follow Player",
          "Enemy Animations",
          "Enemy Script",
          "Enemy Spawner",
          "Enemy Collision",
          "The Collector Script",
          "Unity UI System",
          "Creating Main Menu",
          "Navigating Between Scenes",
          "Selecting A Character",
          "Static Variables",
          "Singleton Patern",
          "Events And Delegates",
          "Instantiating The Selected Character When The Game Starts",
          "Finishing Our Game"
        ],
        "The Artifact": [
          "Game Intro",
          "Importing Assets And Creating The Player",
          "Player Movement",
          "Animating The Player",
          "Creating Our Level With Tile Map",
          "Creating The Bush",
          "Enumerations",
          "Bush Visuals",
          "Bush Fruits",
          "Player Backpack",
          "Player Harvest",
          "Particle System",
          "Creating The Artifact",
          "The Artifact Script",
          "Creating The Wolf Enemies",
          "WolfAI Script - Searching For Target",
          "WolfAI Script - Attacking The Bush And The Artifact",
          "Enemy Spawner",
          "Slash Attack Prefab",
          "Player Slash Script",
          "Enemy Health Script",
          "Gameplay UI Elements",
          "Time Manager",
          "Backpack Info And Artifact Health Info",
          "Creating The Game's Main Menu",
          "Creating The How To Play Info",
          "Main Menu Controller And Game Over Panel",
          "Game Over Controller"
        ],
        "Space Adventure": [
          "Game Intro",
          "Importing Assets And Creating The Player Ship",
          "Player Movement And Fire Engines",
          "Projectiles",
          "Weapon Manager(Shooting Projectiles)",
          "Removing Projectiles From The Game",
          "Lists",
          "Reusing Projectiles (Pooling System)",
          "Awake, Start, And OnEnable",
          "Redesigning Projectiles",
          "Creating Enemy Ships",
          "Enemy Movement Script",
          "EnemyMovementPointToPoint Script",
          "EnemyMovementRandom Script(Assignment Solution)",
          "Enemy Shooting",
          "Projectile Collision Detection",
          "Meteor Obstacles",
          "MeteorMovement Script",
          "Meteor Spawner",
          "Enemy Spawner",
          "Creating The Health Bar UI",
          "Enemy Health Script",
          "Enemy Hit And Destroy Effect",
          "Sound Manager",
          "Player Health Script",
          "The Collectable Prefabs",
          "Collectable Script",
          "Player Weapon Upgrades",
          "Drop Collectable When Destroyed",
          "Creating The Game BG",
          "Gameplay UI",
          "Gameplay UI Controller Script",
          "Player Health Slider",
          "Game Over UI Panel",
          "Game Over UI Controller Script",
          "Main Menu And Highscore Menu",
          "Meteor Effect For Main Menu(Solution For Assignment)",
          "Space Ship Effect For Main Menu(Solution For Assigment)",
          "Meteor Effect For Main Menu Pooling System (Solution For Assignment)",
          "Main Menu Controller",
          "Saving Data With Player Preferences",
          "Wrapping Up Our Game"
        ],
        "Knight Platfomer": [
          "Game Intro",
          "Importing Assets And Slicing Level Parts",
          "Creating The Player Character",
          "Player Animations",
          "Player Movement",
          "2 Ways For Moving The Rigid Body",
          "Player Animation Script",
          "Fixing Animation Transitions And Player Facing Direction",
          "Raycasting And Jumping",
          "Boxcasting And Double Jumping",
          "Player Jump Animation",
          "Fixing Player Jump Animation Issue",
          "Creating The First Level",
          "Unlocking The Lock With The Key",
          "Unlocking The Lock With The Key (Another Way To Do It)",
          "Platform Effector",
          "Worm Soldier Enemy",
          "Worm Soldier Movement Script",
          "Circle Obstacle",
          "Hanging Spike",
          "Flying Bat Enemy",
          "Flying Bat Movement Script V1",
          "Flying Bat Movement Script V2",
          "Spider Shooter Enemy",
          "Spider Shooter Script",
          "Spider Jumper Enemy",
          "Spider Jumper Script"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity game engine"
      ],
      "description": "This is the most comprehensive online course that will take you from a complete beginner to creating your own games in Unity game engine.\nAnd not only that, but this course will teach you the complete process of creating a game step by step from an empty project to a playable game.\nTo achieve this, the course is completely project based, and not just simple hello world or move the cube projects, but I am actually taking all the knowledge that I have learned about game development and creating my own games that I've published on the app store, and I am teaching you the exact steps I use to create fun to play games.\nWe will start with very simple things like downloading Unity, creating a sample project, and going through Unity's interface. After that, we will take a look at some basic code examples so that you can see that coding is not scary like everyone thinks. And then we will jump into C# and learn all the basic things we need to get started with game development.\nAs we progress through the course and create game projects, I will revise all the C# concepts that we learned up to that point and explain them with real world examples and give you tips and tricks on how you can use certain techniques in your own projects.\nAnd not only that, but I will explain to you how to optimize your games from the very start so that you avoid the most common optimization heavy mistakes that not only beginners make when they create their games.\nEvery section in this course will gradually increase in size and depth so that you don't get overwhelmed from the very start but instead you digest every concept we learn step by step.\nDuring the lectures, I will give you assignments to challenge your knowledge and to challenge your ability to think like a programmer. Because in game development, the best way to learn is by doing. Of course, I will provide a solution for every assignment that I give you, but I will expect that you try to finish it on your own because it will give you experience, and the feel of how to solve programming problems on your own.\nYou will also benefit from my super fast response if you have any issue that you are stuck with, and oh and all the students taking the course will also be there to help you!\nSome of the things that you will learn in this course:\nUnity's interface\nImporting Assets\nOrganizing The Project\nBasic, Intermediate, And Advanced C# Programming\nBasic AI(Artificial Intelligence)\nAdvanced AI(Artificial Intelligence)\nBasic And Advanced Character Animations\nSound FX And Music\nBasic, Intermediate And Advanced Particle FX\nLearn How To Use Unity's UI System\nCreate And Animate Menus\nSaving And Loading Game Data\nBasic And Advanced Animations\nCreating Reusable Code\nWriting Optimized Code\nThat And Much More Is Awaiting You In This Course\nIf You ever had an idea for an awesome game, then enroll in this course and learn the tools that you need to develop Your next hit game!!!\nWhat Is Your Risk By Taking This Course?\nNothing!! If you are not satisfied with the course, I promise I will give you a full refund of your money NO questions asked!!\nEnroll Now!! You Will Not Be Disappointed!!",
      "target_audience": [
        "Anyone who wants to learn game development but does not know where to start",
        "Beginners with no coding experience",
        "Programmers who want to learn game development",
        "Experienced game developers looking to expand their knowledge"
      ]
    },
    {
      "title": "The Beginner's Guide to Animation (Unity 5 to 2020+)",
      "url": "https://www.udemy.com/course/mastering-3d-animation-in-unity/",
      "bio": "Your ultimate guide to Unity's Mecanim covering keyframes, curves, inverse kinematics, strafe sets, blending and more.",
      "objectives": [
        "create animations from scratch using the Unity Mecanim system and place them onto game objects.",
        "import third party animated assets into Unity and set up animation controllers.",
        "write C# code to dynamically control animations through user interaction.",
        "explore the use of inverse kinematics in humanoid rigs.",
        "create complex animation sequences and blends dynamically controlled by the user at runtime."
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Join the H3D Student Community",
          "Contacting H3D",
          "FAQs",
          "Installation",
          "Unity's Windows",
          "3D Navigation",
          "External Resources",
          "Fixing Model Issues",
          "Physics Bounce"
        ],
        "Press Play": [
          "Why Animation Works",
          "The Principles of Animation",
          "Keyframes",
          "The Animation Window Part 1",
          "The Animation Window Part 2",
          "Curves",
          "Local and World Space",
          "Squash Challenge"
        ],
        "States and Transitions": [
          "The Animator",
          "Triggering Animation States Part 1",
          "Triggering Animation States Part 2",
          "Trigger Challenge Part 1",
          "Trigger Challenge Part 2"
        ],
        "The Bare Bones": [
          "Bones, Joints and Rigs",
          "Importing Animations from 3D Software",
          "Generic Animations",
          "Animation Cycles",
          "Generic Animations and Avatars",
          "Making a Humanoid",
          "Animating a Humanoid",
          "Animating and Rigging with Mixamo",
          "Importing Mixamo to Unity"
        ],
        "Runtime Control": [
          "A Simple Character Controller",
          "Transitioning Between Walking and Idle Animations",
          "Walking In a Straight Line",
          "Jumping",
          "Simple Blending of Animation Transitions",
          "Humanoid Root Motion Challenge Part 1",
          "Humanoid Root Motion Challenge Part 2"
        ],
        "Triggering Animations": [
          "Triggering Animations with Colliders",
          "Triggering Animations By Clicking Part 1",
          "Triggering Animations By Clicking Part 2",
          "Triggering Animations By Clicking Part 3",
          "Jumping and Climbing Part 1",
          "Editing Read Only Animations",
          "Jumping and Climbing Part 2",
          "Jumping and Climbing Part 3",
          "Jumping and Climbing Part 4",
          "Jumping and Climbing Part 5"
        ],
        "Blend Shapes": [
          "Introducing Blendshapes",
          "Creating Blendshapes",
          "Blendshapes for Facial Animation",
          "Blend Tree Basics",
          "Strafe Sets Part 1",
          "Strafe Sets Part 2"
        ],
        "Inverse Kinematics": [
          "Using Inverse Kinematics",
          "Making A Dynamic Animated Character",
          "Using IK to Pickup and Hold an Object"
        ],
        "Final Project": [
          "Project Specifications",
          "Project Solution Part 1",
          "Project Solution Part 2",
          "Project Solution Part 3"
        ],
        "Final Words": [
          "Final Words",
          "Where to now?"
        ]
      },
      "requirements": [
        "Download the free version of the Unity Game Engine.",
        "You do not need to be able to model or animate in an external package - all resources are provided."
      ],
      "description": "The Beginner's Guide to Animation in Unity with Mecanim is for animators and Unity practitioners who want to bring their characters to life in a game environment and want to learn the ins and outs of the mecanim system. You don't need to be able to model or animate in external packages as all models and animations are provided. All aspects of animation in Unity are covered from physics, key framing, curves, forward and inverse kinematics, animation state machines and working with third party assets. Students will be introduced to elementary code, in C#, that is essential for making dynamic animations and triggers to control character behaviour at run time.\n\nIn this course, Penny teaches all the invaluable skills you will require to begin animating your own game characters in Unity using her internationally acclaimed teaching style and knowledge from over 25 years working with games and computer graphics.\n\nUpdated to cover Unity Versions 5 to 2020 the course now contains 5 hours of extra content with:\nnew challenges and projects\nblending animations to create strafe sets\nadjusting curves\ndesigning a character and the placing of motion capture with free third-party tools\n\nLearn how to animate and work with:\nthe mecanim timeline\ncurve and keyframe editors\nanimation events that trigger code\nroot motion\nimported animations created in third party packages\nanimation state machines\n\nContents and Overview\nThe course begins with the very basics of the Unity interface and progresses to an in-depth examination of all the mecanim components (including the Animation, Animator, DopeSheet and Curve windows). The majority of lectures are follow-along, hands-on workshops in which the student will explore a variety of animation techniques from creating a simple bouncing ball, through to a complex animation for a wall climbing character. Animated models and starter projects are included for students who are not confident in creating their own. By the end of this course, the student will have thoroughly explored the functionality of the mecanim system, under the instruction of an internationally-recognised professor, and be well on their way to developing snippets of code to control all aspects of 3d game animation.",
      "target_audience": [
        "This course is for those interested in a thorough understanding of the Unity Mecanim system. It is suitable for beginner game developers and animators, as well as well seasoned animators wanting to import their work into games.",
        "This course is not for those wanting to learn to program in Unity."
      ]
    },
    {
      "title": "Coding in Unity: Introduction to Shaders",
      "url": "https://www.udemy.com/course/coding-in-unity-introduction-to-shaders/",
      "bio": "Make your game look unique through image effects, shaders and custom lighting by learning Unity's ShaderLab language.",
      "objectives": [
        "Program surface shaders - Unity's approach to making it easier to write lit shaders.",
        "Code lower level fragment and vertex shaders.",
        "Program post-processing images effects.",
        "Use your new knowledge to create your own, unique shaders and game feel.",
        "Understand Unity's ShaderLab and CG/HLSL.",
        "Write your own shaders for Unity's built-in Render Pipeline.",
        "Create your own custom lighting"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Meshes",
          "Vertex and Fragment Shaders",
          "Surface Shaders",
          "Image Effects",
          "Unity's In-built Shaders and HLSL Functions",
          "The Render Pipeline and Unity's Shader Graph"
        ],
        "Shader Outline": [
          "Structure: Properties, Subshaders and Passes",
          "Pragma Directives",
          "Properties",
          "Tags",
          "Blender",
          "A Simple Surface Shader",
          "A Simple Vertex and Fragment Shader",
          "Coordinate Systems",
          "Unity's Lighting Models",
          "Ordering"
        ],
        "Full Surface Shader": [
          "Adding a Texture",
          "Adding a Normal Map",
          "Adding Occlusion + Assignment",
          "Making it Metallic",
          "Making it Emissive + Assignment",
          "Emissive Custom Shader GUI",
          "Surface Shader Quiz"
        ],
        "Inverted Image Effect": [
          "Overview",
          "Blit",
          "Culling and Depth Testing",
          "The Invert Shader",
          "The C# Blit Script"
        ],
        "Image Effects": [
          "Fade to Black + Assignment",
          "Lerp Desmos Link",
          "Fade to Colour Using Lerp",
          "Desaturation + Assignment",
          "Parametric Equation Desmos Link",
          "Rolling Distortion: Using _Time and Parametric Equations",
          "Textured Distortion",
          "Chromatic Aberration + Assignment"
        ],
        "Custom Lighting Models": [
          "The Dot Product",
          "A Simple Lambert Model",
          "Cel Shading",
          "Adding Lighting to a Vertex and Fragment Shader"
        ],
        "Swaying Plant Sprites": [
          "A Static Sprite Shader",
          "Blend and Adding Transparency",
          "Step Desmos Link",
          "Step",
          "Adding the Vertex Function",
          "Non-Directional Lights",
          "Improving the Sway"
        ],
        "Dissolve Surface Shader": [
          "Overview",
          "Clip",
          "Dissolve Texture",
          "Smoothstep Desmos Link",
          "Smoothstep",
          "Ramp Smoothstep Desmos Link",
          "Adding the Ramp",
          "The Ramp Contribution"
        ],
        "A Triplanar Shader": [
          "Introduction",
          "A Simple Triplanar Shader",
          "A Weighted Triplanar Shader",
          "Adding a Top Texture",
          "Improving With Noise + Assignment"
        ],
        "Bonus": [
          "Bonus Lecture: My Other Courses"
        ]
      },
      "requirements": [
        "You should have and know how to use Unity 5.6 or above (the free version is fine).",
        "You should be able to program in C#.",
        "You should be familiar with basic mathematical functions like sin and cos, or be willing to learn about them.",
        "You need to have Blender installed as the downloadable materials contain .blend files."
      ],
      "description": "Learn the basic concepts and language you will need to program your own shaders and image effects for Unity's built-in render pipeline, for Unity 5 or above.\n\n\nLearn and Understand Shaders with this Unity Course.\n\n\nLearn about the different properties of a mesh that can be accessed and changed via a shader.\nWrite your own vertex and fragment, and surface shaders.\nCreate your own image effects.\nWrite custom lighting models.\nUnderstand ShaderLab and CG/HLSL.\n\n\nMake your game look unique using shaders.\n\nIn this course, you will learn the basics of programming shaders, from simple colour changes to whole screen image effects. We'll go through the different types of shader, Unity's quirks and in-built functions, and the different bits of code that make up a shader, before writing a full surface shader with a texture, normal map, metallic and emissive effects. We'll also look at writing a custom inspector for your shader. Once we've covered these basics, we'll look at creating an number of image effects, custom lighting models including cel shading, a sprite shader with a sway effect, and a dissolve effect.\nA common criticism of Unity is that games made with the engine all have a similar look. Combat this by writing your own shaders rather than relying on Unity's inbuilt ones - learn how to improve the look and feel of your game.\nBy the end of this course, you will understand the basics of shader coding and will be able to create your own shaders. Source code is included to help you on your way.\nThis course is designed for people who can already use Unity and can program in C#, but who have no previous experience of programming shaders.\nI present examples of increasing difficulty for each type of shader (surface, vertex/fragment and image effect) designed to help you to understand how shaders work so that you can be confident in creating your own effects.\nFor extra support, you can ask questions in the Q&A section, and I’ve provided the completed code examples for download in each Section. You’ll receive a certificate of completion once you finish the course.",
      "target_audience": [
        "Intermediate level Unity developers who want to learn how to code their own shaders from scratch.",
        "People with no shader coding experience.",
        "This course is not for people new to Unity or C#.",
        "This course is not for people wanting to learn Unity's Shader Graph.",
        "People wanting to create their own shaders for Unity's built-in Render Pipeline."
      ]
    },
    {
      "title": "Intro to Construct 3 - Build a Platformer",
      "url": "https://www.udemy.com/course/intro-to-construct-3-build-a-platformer/",
      "bio": "A Project-based Introduction to Game Design with Construct 3",
      "objectives": [
        "Learn to design, build, and publish a simple game using the Construct 3 game engine",
        "Obtain hands-on experience with 2D game development tools, techniques, and terminology"
      ],
      "course_content": {
        "Introduction": [
          "Watch the Promo",
          "Preview the Game"
        ],
        "Getting Started": [
          "Welcome to the Course",
          "Download Project Guide",
          "Download Game Assets",
          "Construct 3 - User Interface",
          "User Interface",
          "WebQuest - User Interface",
          "Course Materials"
        ],
        "The Project": [
          "Construct 3 - Projects",
          "Projects",
          "WebQuest - Projects",
          "Platformer - Creating the Project",
          "Platformer - Project Properties"
        ],
        "Setting the Stage": [
          "Construct 3 - Layouts & Layers",
          "Layouts & Layers",
          "WebQuest - Layouts & Layers",
          "Construct 3 - Objects & Families",
          "Objects & Families",
          "WebQuest - Objects & Families",
          "Platformer - Setting the Stage",
          "Sprite Challenge"
        ],
        "The Player": [
          "Construct 3 - Behaviors",
          "Behaviors",
          "Construct 3 - Platform Behavior",
          "Platformer - The Player",
          "Platformer - The Alien",
          "Construct 3 - Event System",
          "Event System",
          "WebQuest - Event System",
          "Platformer - On the Move",
          "Platform Challenge"
        ],
        "The Challenge": [
          "Platformer - Obstacles",
          "Construct 3 - Variables",
          "Variables",
          "WebQuest - Variables",
          "Platformer - Cashin' In",
          "Platformer - Barnacles & Bees",
          "Powerup Challenge"
        ],
        "Medieval Times": [
          "Platformer - The Castle",
          "Platformer - The Moat",
          "Platformer - Tracking the Player",
          "Platformer - Raising the Gate",
          "Platformer - Crossing the Moat",
          "Parallax Challenge"
        ],
        "Keeping Score": [
          "Platformer - Keeping Score",
          "Platformer - You Win!",
          "Web Font Challenge"
        ],
        "Finishing Touches": [
          "Platformer - Fresh Beats",
          "Platformer - Touch Controls"
        ],
        "Publishing": [
          "Platformer - Publishing",
          "Show Us Your Game Challenge"
        ]
      },
      "requirements": [
        "You need access to a computer, e.g., PC, Mac, tablet, phone, etc., with a modern, up-to-date browser, e.g., Chrome",
        "You need an active Construct 3 license (course cannot be completed using limited, free mode)"
      ],
      "description": "Get up and running fast with one of the most popular and user-friendly game engines of all time: Construct 3.  This project-based course will teach you the essentials of Construct 3, building your confidence so that you feel empowered to create your own games.\nIn this course, you will build a classically-inspired Platform-style game using freely available digital assets.  Instructional videos and a comprehensive, step-by-step project guide are included to support you, however you learn best.\nMore than mere monkey-see-monkey-do video lectures, this course includes a variety of activities aimed at personalizing your learning experience, e.g., hands-on Game Design challenges, WebQuests focused on exploring Construct 3's vast online resources, periodic checks for understanding in the form of quizzes, etc.\nThis course proudly features digital assets by Kenney!",
      "target_audience": [
        "Beginning game designers",
        "Digital creators",
        "Secondary students",
        "Homeschoolers",
        "Secondary teachers seeking to offer a Game Design course, i.e., professional development",
        "Hobbyists",
        "This course is not for experienced developers already familiar with Construct"
      ]
    },
    {
      "title": "Game Audio 201: Advanced Sound Design & Recording Techniques",
      "url": "https://www.udemy.com/course/gameaudio201/",
      "bio": "Learn advanced techniques to create sfx, sounds and audio for games as well as ways to develop your career.",
      "objectives": [
        "Advanced Sound Design for Games",
        "How to Get Paid and Enter The Industry",
        "Synthesizers and Audio Synthesis",
        "Modulation Effects",
        "Stereo Recording Techniques",
        "Dialogue Recording, Editing and Clean-Up",
        "Speaker Construction and Connection Types",
        "Advanced Audio Formats",
        "Part of the \"Game Audio 101 & 201: Beginner to Advanced Game Sound Design\" course bundle!"
      ],
      "course_content": {
        "Audio Skills and Knowledge Review": [
          "Pro Tools - Leftovers & Processing",
          "Pro Tools - Automation Review",
          "Pro Tools - Sends and Reverb Review",
          "Pro Tools - Creating Seamless Loops Review",
          "Pro Tools - Video Review",
          "Audio Warm-Up"
        ],
        "More Microphones, Ear Training, Retro Re-Design": [
          "More Microphones",
          "EQ and Ear Training Exercise",
          "Vintage Video Games With Realistic Sounds",
          "Retro Re-Design"
        ],
        "Stereo Recording Techniques, Phase, BIG Combat Sounds": [
          "Phase",
          "Stereo Recording Techniques",
          "Stereo Recording Techniques Acoustic Guitar",
          "Recording Combat Sounds",
          "Combat Sound Design"
        ],
        "Voice / Dialogue Recording and Editing": [
          "God of War World Serpent",
          "Decibels and Metering",
          "Compression",
          "Dialogue Editing and RX 7",
          "Dialogue Clean-Up",
          "Dialogue Recording"
        ],
        "Delay and Modulation Effects": [
          "Delay and Reverb",
          "Modulation Effects"
        ],
        "Halfway-ish Exam!": [
          "Game Audio 201 Halfway-ish Exam!"
        ],
        "Audio and Music Synthesis": [
          "MIDI",
          "Synthesizers and Synthesis",
          "Weapon Sound Effects"
        ],
        "Connections, Speakers and More Sound Effects Practice": [
          "Connection Types",
          "Speakers",
          "Sound Design Thought Process",
          "Ability Sound Effects"
        ],
        "Career Development - Entering the Industry": [
          "Gear",
          "Legal Considerations",
          "Pricing",
          "Royalties",
          "Marketing Yourself",
          "Getting the Gig"
        ]
      },
      "requirements": [
        "Basic Audio Editing and Sound Design Skills",
        "Working Audio Vocabulary",
        "Suggested Prerequisite: Game Audio 101",
        "DAW Access, preferably Pro Tools",
        "Access to Izotope RX, though not required"
      ],
      "description": "Go more in-depth with the artistic and technological aspects of audio conceptualization and creation. We'll put audio concepts and theory into practice by recording and creating assets for video game trailers, cutscenes, dialogue and individual ability sounds. By the end of this course, you'll have multiple portfolio pieces as well as the audio and career knowledge needed to enter the industry.\nWant more specifics? We'll go over:\nSound Manipulation and Processing\nMore Microphone Types and Attributes\nHow to Train Your Ear\nDialogue Recording & Editing\nPhasing\nModulation & Delay Effects\nStereo Recording Techniques\nAdvanced Audio Formats\nSynthesizers and Audio Synthesis\nCareer Development\nCheck out the bundle course \"Game Audio 101 & 201\" to get both courses at a discounted price, and go from beginner to advanced Game Sound Designer!",
      "target_audience": [
        "Experienced Audio Enthusiasts",
        "Game Developers",
        "Composers",
        "Intermediate Audio Students"
      ]
    },
    {
      "title": "Learn to Build an Outdoor Environment with Unreal Engine 4",
      "url": "https://www.udemy.com/course/3dmotive-learn-to-build-an-outdoor-environment-with-unreal-engine-4/",
      "bio": "Learn to create a game level from scratch using an industry-standard game engine!",
      "objectives": [
        "Learn how to create a level in Unreal Engine 4 from scratch.",
        "Understand the Foliage system in UE4 to create great looking plants and trees for their games",
        "Learn object placement and layout basics of assets in UE4",
        "Understand how to setup lights, particles, and additional post-process assets to improve the visual look of their course"
      ],
      "course_content": {
        "Basic Introduction to UE4 UI and Foliage": [
          "Download Course Materials Here!",
          "Introduction to Building an Environment in UE4",
          "Creating The Forest Floor",
          "Placing Base Assets",
          "Finish Placing Base Assets",
          "Placing All Rocks",
          "Setting Up Foliage",
          "Finish Setting Up Foliage"
        ],
        "Foliage with UE4": [
          "Introduction to Foliage",
          "Painting Foliage",
          "Refining Painted Foliage",
          "Placing Mountains and Cliffs",
          "Placing the Final Assets",
          "Refining the Scene Object Placement"
        ],
        "Refining our Scene and Scene Polish": [
          "Introduction to Scene Refinement and Polish",
          "Lighting the Environment",
          "Refining the Lights",
          "Creating Particles",
          "Creating Base Post Effects",
          "Finishing Post Effects",
          "Color Grading and Final Presentation",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "Access to Unreal Engine 4",
        "Adobe Photoshop"
      ],
      "description": "In this course we will create a game level from scratch using Unreal Engine 4. This course will all be about level design,lighting and rendering of a scene. We will be using free packs from the Unreal Marketplace for our level.There are many topics we will address in this course. First we will go over some of the basics of the UI, to include the location of all our windows and assets and how to do basic functions within the UI.\nWe will also be creating a simple terrain out of a mesh and we will use vertex painting on that to blend multiple materials together to get a realistic looking forest type ground. We will then setup all the foliage with the Unreal foliage painter, where we can setup different settings like scale, position, and rotation variation. Lastly, we will then paint all of our foliage on out terrain.\nWe will then place our objects - going from big objects to small which will be a fairly straight forward process, but we will be discussing the best and most logical places to place them. We will create our entire scene around a few camera angles so that we can get the best possible result from our final screenshots - but of course we will also make sure that the level is playable. After all that is done, we will finish by building the lighting of our scene where we will setup our sun light, reflection spheres, and tweak all our lighting settings. We will also be using post effects to change the visual look of our scene to our liking and to make everything look a bit more realistic. To wrap up the course, we will cover how to take screenshots ready to be used in your portfolio.\nMore about the Instructor:\nEmiel Sleegers is a self-taught 3d artist currently residing in the Netherlands. He's been teaching himself 3D art for the past 3-4 years, and has worked as a freelance artist on numerous unannounced projects. He's a lover of all things 3d and enjoys sharing the knowledge he has obtained with others eager to learn.",
      "target_audience": [
        "Beginners to UE4, or Advanced Students who want to expand their knowledge on the engine",
        "This course is not geared for professional-level UE4 artists"
      ]
    },
    {
      "title": "How to Make a FPS Game – Unreal Engine 5 Multiplayer",
      "url": "https://www.udemy.com/course/ue5-multiplayer-fps/",
      "bio": "Learn how to make a FPS game from scratch using Unreal Engine Blueprint. Make games without coding!",
      "objectives": [
        "How to make an Unreal Engine 5 first-person shooter with multiplayer.",
        "How to add character movement and animation.",
        "How to equip, drop, pick-up, shoot and reload weapons from pistols to rifles.",
        "How to create a complete inventory system with drag and drop functionality.",
        "How to deal damage, including health and armor.",
        "How to design levels from scratch from materials to lighting.",
        "How to spawns and respawns players after death.",
        "How to add team selection with winning conditions.",
        "How to create and display user interfaces from avatars to overlay of game elements.",
        "How to create and add visual and audio effects.",
        "And much much more.."
      ],
      "course_content": {
        "Introduction": [
          "PROJECT FILES",
          "Introduction",
          "Downloading Unreal Engine 5",
          "Creating a New Project",
          "Unreal Engine 5 Overview"
        ],
        "Environment Creation": [
          "Game Introduction",
          "Creating a New Map",
          "Importing Environment Assets",
          "Designing the Environment",
          "Post Process Volume",
          "Lighting the Environment",
          "Environment Optimization Tips"
        ],
        "Player Movement": [
          "Importing the Characters",
          "Parent & Child Blueprint Classes",
          "Setting up the Character",
          "Game Mode & Player Controller",
          "Input Mapping Context",
          "Adding the Input Mapping Context",
          "Blueprint Interface",
          "Player Movement",
          "Importing the Player Animations",
          "Creating IK Rigs",
          "Creating an IK Retargeter",
          "Fixing the Hands",
          "Retargeting the Animations",
          "Introduction to Blend Spaces",
          "Unarmed Blend Spaces",
          "Introduction to Animation Blueprints",
          "Movement Speed & Direction",
          "Multiplayer Crouch Input",
          "Multiplayer Crouch Function",
          "Crouching Animation Blueprint",
          "Variable Replication",
          "Animation Smoothing",
          "Multiplayer Walk",
          "Walking Animation Blueprint",
          "Multiplayer Jump",
          "Jumping Animation Blueprint",
          "Introduction to Enumerations",
          "Switching Movement Variables to Enums",
          "Switching the Animation Transition Rules",
          "Fixing the Player Size",
          "Setting the Movement Speed"
        ],
        "Player Aim": [
          "Aim Offset Blend Space",
          "Preparing the Aim Offset Animations",
          "Adding Animation to the Aim Offset",
          "Calculating the Aim Direction",
          "Adding the Aim Offset",
          "Adding Player Camera to Head",
          "Hiding the Player Model Head",
          "Adding a Third Person Mesh",
          "Camera & FPS Smoothing"
        ],
        "Player Movement Improvements": [
          "Adjusting Movement Speed",
          "Adjusting Animation Speed",
          "Fixing the Camera Wall Clipping",
          "Fixing the Jumping Crouch",
          "Fixing the Remaining Crouch Bugs",
          "Preparing the Footsteps SFX",
          "Timer by Event",
          "Multicast Replication",
          "Footsteps SFX Conditions"
        ],
        "Spawn System": [
          "Placing the Spawn Points",
          "Storing Spawn Point Information",
          "Importing the UI Assets",
          "Importing a Custom Font",
          "Introduction to Widget Blueprints",
          "Displaying the Team Selection UI",
          "Dynamic UI Size for All Screen Sizes",
          "Designing the Team Selection UI",
          "Button Sound Effects",
          "How to Spawn Actors",
          "Player Spawn Location",
          "Game Mode Blueprint Interface",
          "Finishing the Team Selection Logic",
          "Spawning the Player",
          "Setting the Input Mode",
          "Placing a Spectator Camera"
        ],
        "Pistol & Rifle Animations": [
          "Pistol Blend Spaces",
          "Rifle Blend Spaces",
          "Pistol Aim Offsets",
          "Rifle Aim Offsets",
          "Blend Poses By Bool",
          "Blend Poses By Enum",
          "Pistol Animation Blueprint",
          "Rifle Animation Blueprint",
          "Finalizing the Animation Blueprint"
        ],
        "Equipping & Dropping Weapon": [
          "Importing the Weapon Assets",
          "Setting up the Weapon",
          "Enabling Physics",
          "Replicating Actors",
          "Weapon Overlap",
          "Setting the Weapon Type",
          "Checking if Player Has the Weapon",
          "Looting the Weapon",
          "Creating the Weapon Socket",
          "Creating the Remaining Sockets",
          "Attaching Weapon to Hand",
          "Attaching Weapons to Back",
          "Overlapping Two Weapons at Once",
          "Creating the Weapon Structure",
          "Creating the Weapon Data Table",
          "Using the Function Library",
          "Adding the Weapon Name",
          "Replacing the WeaponType Variable",
          "Drop Weapon Input Action",
          "Drop Weapon Logic",
          "Drop Weapon Rep Notify",
          "Resetting the Rep Notify Value",
          "Weapon Interaction Boolean",
          "Removing Interaction from Dropping Player",
          "Weapon Player Interaction Improvement",
          "Looting Weapon with Keyboard Key",
          "Setting the Equipped Item Type Correctly",
          "Fixing the Looting \"Accessed None\" Error",
          "Cleaning up the Code",
          "Fixing a Small Replication Issue"
        ],
        "Weapon Switching": [
          "Weapon Switching Input Actions",
          "Weapon Switching Logic",
          "Equip and Unequip Weapon RepNotify",
          "Equipping Secondary Weapon",
          "Creating Animation Montages",
          "Adjusting the Animation Blueprint",
          "Equip Animation Multicast",
          "Setting up the Weapon Display Widget",
          "Designing the Weapon Display UI",
          "Displaying the Weapon Display UI",
          "Coding the Weapon Display Functionality",
          "Adding Weapon Thumbnail to Structure",
          "Unequipped Weapon UI Opacity",
          "Adding Equip Sound Effects"
        ],
        "Weapon Shooting": [
          "Creating the Crosshair UI",
          "Displaying the Crosshair",
          "Adding Weapon Properties to Structure",
          "Shoot Weapon Input Action & Structure",
          "Creating the Weapon Shot Timer",
          "Line Trace By Channel",
          "Adjusting the Player Collision Settings",
          "Creating the Muzzle Flash Sockets",
          "Shooting VFX & SFX",
          "Preventing Shooting During Equip Anim",
          "Creating the Ammo UI",
          "Setting the Initial Weapon Ammo Amount",
          "Creating the Ammo UI Logic",
          "Update Ammo UI",
          "Hide Ammo UI",
          "Calculating Ammo",
          "Reload Weapon Animation",
          "Reload Weapon Functionality",
          "Shooting Conditions",
          "Reload Weapon With Keyboard Key",
          "Reload Weapon on Weapon Switching",
          "Adding Pistol Shooting",
          "Stopping Shoot VFX on Weapon Switching",
          "Shooting Animation",
          "Out of Ammo SFX",
          "Bullet Impact VFX & SFX",
          "Bullet Spread",
          "Placing the Weapons Correctly"
        ]
      },
      "requirements": [
        "No requirements. Everyone can take this course."
      ],
      "description": "How to make a FPS game - Get started with Unreal Engine 5 Multiplayer.\nThis comprehensive Unreal Engine course will teach you how to make a FPS game in Unreal Engine 5 Multiplayer from scratch. Inspired by the classic game Counter-Strike, you'll learn all the basic and advanced mechanics necessary to know how to make a first-person shooter. All of this without writing a single line of code.\nYou don't need any prior game development experience to take this course; we will go through it step-by-step. Whether you're a beginner or an experienced Unreal Engine developer, this course has something for everyone who wants to learn how to make a fps game in UE5.\nThe main objective of this course is to make you confident in how to make a fps game. It will allow you to earn money and work as an independent game developer from home. In fact, I have been a full-time UE5 game developer for a couple of years, creating games, designing courses, and selling game assets through the Unreal Engine marketplace.\nStart your first person shooter training today by learning how to make a fps game!\nWhat makes me qualified to teach you?\nI am an experienced game developer with nine years of experience. To summarize my work without boring you:\nI have released a Steam game I directed from start to finish with a team of 8.\nI have created 11 game development courses with 40,000+ students and an average rating of 4.8+ out of 5 stars.\nI am currently solo-developing Farmtale 2 from start to finish.\nI also work as a freelancer on various game projects, specializing in programming, lighting, game optimization, and more.\nI am deeply passionate about game development and have made it my full-time job. I would love to teach you everything about Unreal Engine 5 with good game development practices and keep you updated with the latest information.\nIf you want to learn how to publish a game on Steam, check out the course I have released on the topic.\nMake games without coding.\nUnreal Engine blueprint is the powerful Unreal Engine scripting language used in UE5. It allows you to create your own online game from start to finish without writing a single line of code. That means you can easily create your own online game even if you are a beginner, artist, or designer without programming experience.\nThis course doesn't require any programming or Unreal Engine experience. We will go through the Unreal Engine blueprint basics and slowly advance to developing more complex game mechanics. By doing so, you will learn how to develop games from start to finish.\nYou can jump into this course as a beginner as you will learn step-by-step how to make a fps game from scratch.\nUnreal Engine 5 multiplayer.\nGetting into online game development with Unreal Engine 5 is very easy. It is similar to the single-player Unreal Engine blueprint but with an extra step added. While learning how to make a fps game, you will learn everything you need to know about Unreal Engine 5 multiplayer. You don't need prior experience as I will teach you basic and advanced Unreal Engine networking.\nHow to make a video game from scratch.\nEven though this course teaches you how to make a fps game, there are always other important learning objectives in my courses. When watching the video lessons, paying attention to the tools used during game development is essential. You will learn how to develop games starting from an empty Unreal Engine project. Regardless of the genre, the development process for games in Unreal Engine 5 remains the same.\nHow to make a first person shooter - Learn everything.\nIn this Unreal Engine course, you will gain comprehensive knowledge on how to make a fps game. Firstly, the course begins with an empty project and presents you with simple, easy-to-follow video lessons in 4K resolution. Secondly, you will learn how to develop the game environment, including level design, lighting, and optimizing the environment for optimal game performance. Then, we will move on to Unreal Engine 5 multiplayer basics and learn as we develop our game. Some of the key concepts in this Unreal Engine course:\nLearn how to create your own character in Unreal Engine 5.\nLearn Unreal Engine enhanced input for movement and animation.\nLearn level design from materials to lighting and game optimization.\nLearn how to pick up weapons or any other item from the ground.\nLearn how to equip, drop, shoot, and reload pistols and rifles.\nMake an inventory system with drag-and-drop functionality.\nDeal Damage to other players with health and armor.\nCreate a team selection functionality with win conditions.\nLearn how to spawn and respawn players.\nDesign the game user interface (UI).\nAdd visual and sound effects (VFX and SFX).\nAnd much more.\nThis course also includes the finished game project for you to inspect. By the end of this course, you will have acquired the necessary skills to create your own online game.\nTake this course and get certified.\nCompleting the course on how to make a FPS game earns you an Unreal Engine certification. You can use it to strengthen your portfolio as an independent game developer or use it when applying for game development jobs. The Unreal Engine certification can be downloaded and saved locally and is valid indefinitely.\nHow to continue when completing \"How to Make a FPS Game.\"\n\"How to Make a FPS Game\" provides the necessary skills and knowledge to advance toward more challenging topics. You can expand on your first person shooter training by adding an inventory system to switch it into an RPG shooter. This course is available in my profile.\nCreating 2D games within this game development software is surprisingly easy and convenient. Suppose you wish to learn how to make a 2D game in multiplayer using Unreal Engine's 2D features. In that case, you can enroll in my exciting course on how to make a 2D platformer in multiplayer. You can also get into single-player 2D games in Unreal Engine 5 by looking at how to make a clicker game. All of the courses are available in my profile!\nJoin our supportive community.\nUnreal Engine game development can be a frustrating experience at times. For example, you might need to look for an unchecked box somewhere, leaving you feeling lost for hours. Alternatively, you might require moral support and ideas from fellow game developers like yourself. That's why we offer live support 24/7 in the Q/A section or in our community Discord server. You can also join us to chat casually about game development in general or share your work with others. We are always here to help you whenever you need it.\nLet's begin with \"How to make a FPS game\" without any delay. I am eager to see you in the first lesson. So, let's start, and cheers to an exciting learning journey!",
      "target_audience": [
        "Anyone (beginner or intermediate) who wants to make an Unreal Engine 5 first-person shooter.",
        "Anyone who want to learn how to make multiplayer games in Unreal Engine 5.",
        "Experienced developers who want to brush up on their skills.",
        "Game designers and artists who want to get into game programming."
      ]
    },
    {
      "title": "Improve Your Game Design With Better Gameplay",
      "url": "https://www.udemy.com/course/gamedesign/",
      "bio": "Game development made easy. Learn practical examples to improve how your game feels and make it more fun for the player.",
      "objectives": [
        "Enhance their game's design",
        "Understand what makes gameplay fun to the player",
        "Learn simple techniques that will make their games more exciting"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Overview",
          "Project Files"
        ],
        "Gameplay Basics": [
          "Better Animations",
          "The Importance of Sound Effects",
          "Better Shooting",
          "Balancing Fun & Challenge"
        ],
        "Improving Guns": [
          "Bullet Size, Speed & Fire Rate",
          "Muzzle Flash",
          "Impact Effects",
          "Bullet Spray & Less Accuracy"
        ],
        "Impacting Enemies": [
          "Flashing Sprites",
          "Knocking Back Enemies",
          "Keeping Dead Bodies",
          "Changing to Damaged Sprites",
          "Explode Enemy Into Pieces"
        ],
        "Bringing the Camera To Life": [
          "Moving The Camera Smoothly",
          "Moving Ahead Of The Player",
          "Adding Screenshake"
        ],
        "Playing with The Player": [
          "Knockback + Sprite Flash",
          "Making Player Death Interesting",
          "Slowing Time On Death",
          "Strafing While Shooting"
        ],
        "Sounding Good": [
          "How Music Changes The Game",
          "Manipulating Sound Effects"
        ],
        "Turning Everything Up To 11": [
          "Pushing Our Variables To Add Fun",
          "Better Explosions"
        ],
        "Reviewing Progress & Next Project": [
          "Comparing Final Project To The Beginning",
          "Next Project Challenge"
        ],
        "Resource - Completed Project Files": [
          "Completed Project Files"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 5.3 available for free from unity3d.com"
      ],
      "description": "In this course we will take a simple 2D action platformer and you will learn a variety of techniques such as how to add screenshake, how to make damage seem persistant, the importance of player action feedback and much more, all to improve how your game feels to players and learn practical example of how to implement them in your games.\nThe course will be taught using Unity3D but these same principles and methods can be used in any system of development you choose. After completing the course you will also be given another starter project to apply the lessons learned throughout the course yourself, and see the effect these techniques can have in different game types.\nWhether you are a beginner looking to expand your development knowledge or are just looking for ways to help make your game more fun to play, this course will help you gain a greater understanding of the importance of game feel.\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Beginners looking to learn more about game development",
        "Anyone who wants to learn how to improve their gameplay",
        "People interested in working in the game design industy.",
        "Please who want to create and publish their own games."
      ]
    },
    {
      "title": "DirectX 11 Programming",
      "url": "https://www.udemy.com/course/directx11/",
      "bio": "This course is designed to introduce DirectX 11 programming.",
      "objectives": [
        "Develop 2D and 3D DirectX 11 applications and games",
        "Develop software that use DirectX 11 input devices and audio",
        "Import and export 3D models"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction"
        ],
        "An Example DirectX Program": [
          "Introduction",
          "Blank Window",
          "Blank Window D3D, part 1",
          "Blank Window D3D, part 2"
        ],
        "2D Graphics": [
          "Introduction",
          "2D Geometry, part 1",
          "2D Geometry, part 2",
          "Draw Triangle",
          "Draw Summary",
          "Samples",
          "Draw Texture",
          "Draw Sprites"
        ],
        "Text Rendering": [
          "Introduction",
          "Draw Text, part 1",
          "Draw Text, part 2"
        ],
        "Input Devices": [
          "Input Devices"
        ],
        "3D Introduction": [
          "Introduction, Points and Vectors",
          "Vector Arithmetic",
          "Matrix Transformations",
          "Draw Cube"
        ],
        "Shaders and Effects": [
          "Introduction",
          "Draw Cube Effect"
        ],
        "Cameras and Models": [
          "Draw Model, part 1",
          "Draw Model, part 2",
          "Lighting, part 1",
          "Lighting, part 2"
        ],
        "Audio": [
          "Introduction",
          "XACT",
          "Playing Audio with XACT3"
        ],
        "Import/Export 3D Models": [
          "Import/Export 3D Models"
        ]
      },
      "requirements": [
        "Visual Studio 2010 or later versions",
        "Windows 7 and later versions"
      ],
      "description": "This course is designed to introduce DirectX 11 programming. The course begins with an high-level overview of the DirectX 11 architecture and concepts, and proceeds with an initial DirectX example application, 2D graphics, text rendering, input device processing, 3D concepts and rendering, shaders and effects, cameras and models, audio, importing and exporting 3D models, the final project, DirectX 9 and 10, other tools, using Visual Studio 2012 and later, and a final summary. Source code is included.\nWe use DirectX 11.0 in this course. DirectX 11.0 was included in Windows 7. We will use the Microsoft June 2010 DirectX SDK that include tools and libs that where later removed in later versions of DirectX and Visual Studio 2012-2015 Express/Community editions.",
      "target_audience": [
        "People that wish to learn DirectX 11"
      ]
    },
    {
      "title": "Unreal Engine 5 Blueprint Game Development (Updated 5.6)",
      "url": "https://www.udemy.com/course/unrealblueprint/",
      "bio": "Created in collaboration with Epic Games. Master UE5 Blueprints, no coding needed. Build 3 fun, playable games.",
      "objectives": [
        "Build 3 playable games in Unreal Engine 5 using Blueprints.",
        "Master Unreal’s Blueprint visual scripting system - no coding required.",
        "Design and light levels using Unreal Engine 5’s modern tools (including Lumen).",
        "Create reusable gameplay systems and components.",
        "Add interactivity, sound and polish to make games feel professional.",
        "Understand the core logic and principles behind game development.",
        "Gain confidence with the Unreal Editor and project workflows."
      ],
      "course_content": {
        "Introduction & Setup (New UE 5.6 Content)": [
          "Welcome to the Course",
          "Community & Support",
          "Installing Unreal Engine 5"
        ],
        "Marble Run (New UE 5.6 Content)": [
          "Section Intro - Marble Run",
          "First Steps in Unreal Engine",
          "Viewport Navigation & Transforms",
          "Introduction to Blueprints",
          "Referencing Actors in Blueprints",
          "Applying Physics to Static Meshes",
          "Tick Event & Input Axis Events",
          "Getting & Setting Actor Rotations",
          "Intro to Modeling Mode",
          "Building Obstacle Objects",
          "Making Custom Materials",
          "Adding Collision",
          "Trigger Volumes & Overlap Events",
          "Returning Game Time in Seconds",
          "Collision Events & Tags",
          "Bug Fixing & Cleanup",
          "Replacing the Skybox",
          "Packaging the Game"
        ],
        "Crystal Cavern (New UE 5.6 Content)": [
          "Section Intro - Crystal Cavern",
          "Creating a New Project",
          "Level Blockout & Lighting",
          "Types of Lights",
          "Blueprint Actor Class",
          "Player Pawn",
          "Controllers & Possession",
          "Game Mode Blueprint Class",
          "Applying Physics to Player Pawn",
          "Importing an FBX File",
          "Events Graphs & Input Mappings",
          "Adding Force & Torque",
          "Blueprint Variables & Force at Location",
          "Extruding Geometry",
          "Custom Box Trigger Blueprint",
          "Player Camera Manager",
          "Creating Emissive Materials",
          "Destroy Actors on Overlap",
          "Timelines",
          "Blueprint Functions",
          "Multiple Timeline Tracks",
          "Blueprint Macros",
          "Projectiles",
          "Spawning Actors",
          "Exposing Blueprint Variables",
          "Animating Meshes With Timelines",
          "Applying Damage",
          "Collapsing Blueprint Code",
          "Macro Libraries",
          "Get All Actors of Class",
          "Pure and Impure Functions",
          "Working With Arrays",
          "Adding Sound Effects",
          "Triggering Sound Effects",
          "Dynamic Sounds",
          "Casting & Section Wrap Up"
        ],
        "Mars Marine (New UE 5.6 Content)": [
          "Section Intro",
          "Project Introduction & Download",
          "Game Mode & Character Class Setup",
          "Assigning Character Meshes"
        ],
        "Introduction - Marble Run (Original Unreal 4 Content)": [
          "Getting Started with Unreal Engine 4",
          "Community & Support",
          "First Steps in Unreal Engine 4",
          "Viewport Navigation & Transforms",
          "Blueprint Introduction",
          "Referencing Actors in Blueprints",
          "Quiz",
          "Applying Physics to Static Meshes",
          "UE 5.1 Warning: Physics Issues",
          "Event Tick & Input Axis Events",
          "Getting and Setting Actor Rotations",
          "BSP Geometry",
          "Converting BSP to Static Mesh",
          "Quiz",
          "Trigger Volumes & Overlap Events",
          "Returning Game Time in Seconds",
          "Bug Fixing & Code Cleanup",
          "Quiz",
          "Packaging your Game"
        ],
        "Crystal Cavern (Original Unreal 4 Content)": [
          "Crystal Cavern Project Setup",
          "Level Blockout & Lighting",
          "Point Lights, Spot Lights & Sky Lights",
          "Blueprint Actor Class",
          "Player Pawn",
          "Quiz",
          "Controllers & Possession",
          "Game Mode Blueprint Class",
          "Applying Physics to Player Pawn",
          "Event Graphs & Input Mappings",
          "Adding Torque",
          "Quiz",
          "Blueprint Variables",
          "BSP Extrude",
          "Custom Box Trigger Blueprint",
          "Player Camera Manager",
          "Emissive Material",
          "Quiz",
          "Destroying Actors on Overlap",
          "Timelines",
          "Blueprint Functions",
          "Multiple Timeline Tracks",
          "Blueprint Macros",
          "Quiz",
          "Projectiles",
          "Importing FBX files",
          "Spawning Actors",
          "Exposing Blueprint Variables",
          "Animating Meshes with Timelines",
          "Quiz",
          "Applying Damage",
          "Collapsing Blueprint Code",
          "Macro Libraries",
          "Get All Actors Of Class",
          "Pure & Impure Functions",
          "Quiz",
          "Working With Arrays",
          "Casting & Section Wrap Up"
        ],
        "Mars Marine (Original Unreal 4 Content)": [
          "Project Introduction & Download",
          "Game Mode & Character Class Setup",
          "Assigning Character Meshes",
          "Character Movement Input",
          "Animation Blueprints",
          "State Machine Transition Rules",
          "Mars Marine Quiz #1",
          "Blendspaces",
          "Thumbstick Aiming",
          "Thumbstick Deadzone",
          "Mouse Aiming",
          "Input Switching",
          "Attaching Weapon Meshes & FX",
          "Spawning Weapon Sound FX",
          "Unreal Motion Graphics (UMG)",
          "UMG Property Bindings",
          "AI Navigation",
          "Animation Montages",
          "Handling Player Death",
          "Line Traces",
          "Handling AI Death",
          "Spawning AI Characters",
          "AI Wave Spawning",
          "Impact Hits & Health Pickups",
          "Section Wrap Up"
        ]
      },
      "requirements": [
        "A 64-bit PC capable of running Unreal Engine 5 (recommended).",
        "Or a Mac running the latest macOS with Metal support.",
        "At least 8GB of RAM (16GB recommended).",
        "Quad-core CPU, 2.5GHz or faster.",
        "DirectX 11, 12 or Metal 1.2 compatible graphics card.",
        "About 50GB of free disk space.",
        "No prior Unreal or coding experience required - we start from the basics."
      ],
      "description": "Unreal Engine 5 Blueprint Developer - Updating to Unreal 5.6!\nWant to start making awesome games in Unreal? Whether you’re brand new or already code in C++, Blueprints give you a faster, more visual way to bring ideas to life.\nThis beginner-friendly course shows you how to use Unreal’s powerful Blueprint system to build playable games from scratch, while learning the core logic and design principles behind them.\nBy the end, you’ll know your way around Unreal Engine 5 and have three polished projects under your belt, plus the confidence to start creating your own.\n\nWhat You’ll Build\nBy the end of the course, you’ll have three polished games that prove what you can do with Blueprints:\nMarble Run - Build your first Blueprint logic and see it in action as you roll your way to the finish.\nCrystal Caverns - Create a 3D collectathon with tank-style controls, pickups, and a fully lit environment.\nTwin Stick Shooter - Use Unreal’s Lumen lighting and reusable level design to craft a fast-paced arcade shooter.\nAlong the way you’ll learn how to:\nMaster Unreal’s Blueprint visual scripting system - and understand the game logic behind it.\nCreate and import assets to bring your levels to life.\nLight your scenes with Unreal’s cutting-edge Lumen system.\nAdd sounds, interactions, and polish that make your games feel great.\nBuild smart, reusable components that save you time and boost your creativity.\nThis is the partner course to the Complete Unreal C++ Developer, one of the most popular Unreal courses on the web. Together, they give you two powerful paths into Unreal Engine - learn visually with Blueprints, or dive deeper with C++.\nUnreal can feel intimidating to learn on your own, but this course keeps things approachable while still challenging you to think like a game developer. With lifetime access, free updates, and a vibrant GameDev tv community ready to support you, you’ll never be learning alone.\nBy the end, you’ll have the skills to design and build your own games - and three projects to prove it.\nNote: This course is currently being updated to Unreal Engine 5.6\nYou’ll find both the new remastered content and the original course material included. Once the update is complete, the original content will be moved to a separate archive course, which you’ll continue to have full access to.",
      "target_audience": [
        "Complete beginners who want to learn game development with Unreal.",
        "Artists and designers who want to bring their creations to life in a game engine.",
        "Developers who want to learn visual scripting with Blueprints.",
        "Programmers from Unity, Godot, or other engines curious about Unreal.",
        "Anyone who wants to build real, playable games without writing traditional code."
      ]
    },
    {
      "title": "Unreal Engine 5: Action Adventure Game Development Course",
      "url": "https://www.udemy.com/course/unreal-engine-5-action-adventure/",
      "bio": "Create your own 3rd Person action adventure game with Blueprints and Unreal 5's new features!",
      "objectives": [
        "Use Unreal Blueprints visual scripting to create every aspect of your very own 3rd Person action adventure game.",
        "Create your own playable level, complete with hazards, obstacles, pickups and interactables.",
        "Learn how to trigger events, move objects, create hazards and other important action adventure mechanics.",
        "Use the latest Unreal 5.1 tools including creating a character using MetaHumans, using Quixel Bridge for assets and Lumen & Nanite to make the game look great!",
        "Add raycasting to shoot weapons and deal damage to enemies.",
        "Create 3rd person shooting combat mechanics with enemy AI.",
        "You'll make the 3rd person action adventure game you’ve always wanted to make.",
        "Use Unreal’s Blueprint system to improve your programming skills without needing to use C++.",
        "Solve interesting challenges to test your understanding of what you've learnt.",
        "Be part of an amazing and supportive community of people similar to you."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Installing Unreal Engine",
          "Installing Unreal Engine 5 on Linux",
          "Setting Up Our Project",
          "Community & Support",
          "Accessing Our Projects",
          "Importing Quixel Megascans",
          "Creating MetaHumans",
          "Setting Up MetaHumans"
        ],
        "Movement & Physics": [
          "Section Intro - Movement & Physics",
          "Physics Objects",
          "Collectible Coins",
          "Making Our Character Walk",
          "Making Our Character Crouch",
          "Crouching While Walking",
          "Adding A Loss Condition",
          "Adding Stairs and Bridges"
        ],
        "Pickups & Interactables": [
          "Section Intro - Pickups & Interactables",
          "Creating A Torch",
          "Creating Our Torch Pickup",
          "Picking Up Our Torch",
          "Creating Web Of Obstacles"
        ],
        "Basic Enemy AI": [
          "Section Intro - Basic Enemy AI",
          "Setting Up Our Enemy Blueprint",
          "AI Pathfinding",
          "Chasing Our Player",
          "Creating A Distraction",
          "Throwing and Detection"
        ],
        "Weapons & Shooting": [
          "Section Intro - Weapons & Shooting",
          "Creating A Weapon",
          "Picking Up Our Weapon",
          "Updating Our Animations",
          "Aiming Down Sight",
          "Linecasting and Firing Our Weapon"
        ],
        "HP & Destruction": [
          "Section Intro - HP & Destruction",
          "Applying Impulses",
          "Setting Up HP",
          "Destroying Planks",
          "Shooting Enemies",
          "Creating Explosive Barrels",
          "Setting up Destructible Meshes",
          "Anchoring and Triggering Explosions"
        ],
        "Aesthetics & Lighting": [
          "Introduction",
          "Ground Clutter and Cave Interiors",
          "Closing Our Caves (Intro to Lighting)",
          "Custom Materials (Lava)",
          "Post Processing and Render Settings",
          "Cameras and Cinematics",
          "Dynamic Lighting"
        ],
        "Behavior Trees (State Machines)": [
          "Behavior Trees",
          "Intro To Behavior Trees",
          "Switching States (Chasing our Player)",
          "Hearing Perception",
          "Arming our Enemy",
          "Torches and “Standing Guard”",
          "Enemy HP",
          "Environmental Query System",
          "Armed Enemy Movement (EQS)",
          "Taking Cover (EQS)",
          "Player Health",
          "Player Down/Loss",
          "Shooting Back!"
        ],
        "Action Mechanics": [
          "Introduction",
          "Setting Up Our Sequence",
          "Controlling Actors in Sequencer",
          "Updating Our Boulder",
          "Setting Up the Second Sequence",
          "Triggering Our Sequence",
          "Starting Our QTE",
          "QTE Interaction",
          "Animation Retargeting",
          "Animating Our Success Sequence",
          "Saving/Loading Our Game (Checkpoints)",
          "Updating Our Crouch Animations"
        ],
        "User Interface and Packaging": [
          "Introduction",
          "Setting Up Our Crosshair",
          "Setting Up Our UI",
          "Player and Enemy Health Bars",
          "Creating a Main Menu Scene",
          "Input Methods",
          "Optimization and Scalability",
          "Packaging Your Game",
          "Wrap Up"
        ]
      },
      "requirements": [
        "A basic understanding of Unreal and Blueprint would be helpful, but not essential."
      ],
      "description": "Make the 3rd person action adventure game you’ve always wanted too!\nAll using the latest tools in Unreal 5.1, including MetaHumans, Quixel Bridge, Nanite and Lumen.\nYou'll create a great looking game using Unreal’s latest and greatest features, such as creating a character using MetaHumans, using Quixel Bridge for assets and Lumen and Nanite to make the game visually stunning.\nYou'll use Unreal Blueprints visual scripting to create every aspect of your very own 3rd Person action adventure game. We'll teach you how to use raycasting to shoot weapons and deal damage to enemies, how to trigger events, move objects, create hazards and other important action adventure mechanics.\nBy the end of the course you’ll have your own playable level, complete with hazards, obstacles, pickups and interactables.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nYou’ll also gain access to a course forum where you can discuss topics on a course-wide basis, or down to the individual video. Get plugged into our communities of amazing developers on Facebook (nearly 20k), in our own TA-curated Community (17k views/day), and our student chat group (10k live at any one time).\nSo dive into the amazing world of UE5 now!",
      "target_audience": [
        "This is for you if you want to improve your understanding of Unreal and get better with Blueprint",
        "Or if you want to build that 3rd person action adventure game you’ve always wanted to make",
        "Or if you'd like to make a cool game!"
      ]
    },
    {
      "title": "The Complete 2025 ROBLOX Studio Masterclass (UPDATED)",
      "url": "https://www.udemy.com/course/the-complete-2024-roblox-studio-masterclass/",
      "bio": "Master ROBLOX Studio from any starting level - A Guided Course from BEGINNER to EXPERT in all areas!",
      "objectives": [
        "Have a deep understanding of the ROBLOX Studio interface",
        "Design and develop HIGH QUALITY games effectively",
        "Use BLENDER to create advanced models",
        "Become competent in Lua/Luau Scripting",
        "Understand the Client-Server communication model",
        "Be able to solve and debug problems in your own scripts",
        "Walkthrough creating your FIRST GAMES",
        "Know how to effectively PUBLISH, ADVERTISE and MONETISE your game for success",
        "Have support from myself in the Q&A Section",
        "Access to our DISCORD community"
      ],
      "course_content": {},
      "requirements": [
        "Absolutely no previous experience required!",
        "A computer with an internet connection",
        "Desire to become a hit ROBLOX Dev!"
      ],
      "description": "Are you ready to embark on an exciting journey into the world of ROBLOX game development? Whether you're a complete beginner or an experienced developer looking to take your skills to the next level, my Complete ROBLOX Studio Masterclass is your key to becoming a highly skilled ROBLOX developer!\n\n\nIn this course, you will learn all areas of ROBLOX game development including:\nGame Design\nProgramming\nModelling (Blender)\nUI Design (Figma)\nPublishing\nMonetisation\nAdvertising\n\n\nOver 46 Hours of In-Depth Lectures:\nDive deep into ROBLOX game development with over 46 hours of high-quality video lectures. Each lecture contains detailed step-by-step explanations from an experienced ROBLOX tutor and practical real-life examples.\n\n\nBlender Integration:\nMaster the art of 3D modelling with a comprehensive introduction to Blender, a powerful and versatile software. Learn how to create detailed custom 3D assets that will set your games apart, including weapons, buildings, and vehicles.\n\n\nTwo Full Game Creations:\nApply your understanding and skills by creating not only one but two complete ROBLOX games during this course. This hands-on experience will allow you to tackle a wider range of game types and challenges, providing a solid foundation for your game development journey.\n\n\nOver 75 Review Quizzes:\nReinforce your learning and assess your understanding with more than 75 quizzes placed throughout the course. These quizzes provide valuable feedback on your knowledge to help you track your progress and highlight areas you need further practice on.\n\n\nGame Publishing, Advertising, and Monetisation:\nExplore the process of publishing, advertising, and monetising your ROBLOX games. Learn effective strategies to maximise your game's reach and profit potential, from game passes to developer products.\n\n\nCraft High-Quality Front Page Games:\nElevate your game development skills to the next level. By the end of this course, you won’t just be building simple starter games; you’ll have the knowledge and expertise to create high-quality front-page games that captivate players and make a lasting impact in the ROBLOX community.\n\n\nDiscord Community and Help:\nBy enrolling in this course, you will also have access to the dedicated Discord community with over 1000 members. Here you can get help from other course members, get hired by other developers or have a casual chat. Alternatively, you can also message me on Udemy if you get stuck and I will respond to you within 24 hours.\n\n\nWith Udemy's 30-day money-back guarantee, you can try out this course risk-free. If you are not 100% happy with the course, you can get a full refund with no questions asked.\n\n\nJoin today and embark on your journey to game development greatness!",
      "target_audience": [
        "Developers wanting to create their first game",
        "Beginner Lua/Luau Programmers",
        "Existing developers aiming to learn ROBLOX Studio",
        "Intermediate users wanting a greater understanding"
      ]
    },
    {
      "title": "Practical guide to AI in Unity",
      "url": "https://www.udemy.com/course/ai-in-unity/",
      "bio": "Create the AI for a Unity Game: Develop a colony-simulation using State-Machines, Behavior-Trees and Genetic Algorithms",
      "objectives": [
        "Lay the foundation for a Colony-Survival Game like Rimworld or Oxygen Not Included",
        "Develop simple and complex practical AI Solutions for your games",
        "Create a simple AI with State Machines",
        "Make extensible State Machines with the State Pattern",
        "Develop a complex AI with Behaviour Trees",
        "Master the Behavior Designer Plugin",
        "Simulate an ecology with Genetic Algorithms"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "AI - General"
        ],
        "State Machines": [
          "State Machines Theory",
          "State Machines Example",
          "State Machine Exercise",
          "State Machine Exercise - Solution"
        ],
        "State Pattern": [
          "State Pattern Theory",
          "State Pattern Example"
        ],
        "Behavior Trees": [
          "Introduction",
          "Theory",
          "Theoretic Examples & Exercise1"
        ],
        "Behavior Designer": [
          "Project Overview",
          "Our first Behavior Tree with Behavior Designer",
          "Exercise2 - Hunterbehavior",
          "Exercise 2 - Hunterbehavior - Solution",
          "Custom Actions",
          "Custom Conditions",
          "Behavior Designer - Variables",
          "Exercise3 - Custom Condition",
          "Exercise3 - Custom Condition - Solution",
          "Priorities & Conditional Aborts - Theory",
          "Priorities & Conditional Aborts - Example",
          "Exercise4 - Chickenbehavior",
          "Exercise4 - Chickenbehavior - Solution"
        ],
        "Genetic Algorithms": [
          "Introduction",
          "Example",
          "Course Outro"
        ]
      },
      "requirements": [
        "Basic understanding of Unity",
        "Basic understanding of C#"
      ],
      "description": "Learn how to create state of the art AI for video games using Unity.\nI believe in a practical approach in learning so this course will be primarily project-based. You won't just learn dry theory and forget everything within a matter of days but instead apply the learned concepts to two actual Unity-Projects:\nCatch: A simple digital replica of play every kid's favourite game: catch\nColony Simulation: A game like Rimworld or Oxygen Not Included, where you can't control the NPCs directly, but instead they are controlled by the AI and you need to help them survive by making sure they've got enough to eat.\nAlso this course contains a free exclusive Behavior-Designer Educational-License, which would normally cost ~90$. Behavior Designer is the industry-standard solution for Behaviortrees and generously provided me with an exclusive Educational License, which they specifically built for this course. So you won't get it anywhere else.\n\n\nAlso you will of course get full lifetime access to the course.\n\n\nWe'll start with the simplest AI-System that there is, namely State-Machines.\nAfter that we'll improve State-Machines and make them more extensible with the State-Pattern.\nThen we'll hit the main topic which is one of the more advanced techniques that are used in Indie- and AAA-Gameproductions alike: BehaviorTrees.\nLastly we'll have a glimpse at one of the more experimental AI-Approaches, namely Genetic Algorithms, which are more of a niche topic but have the potential for very interesting game-mechanics that stand out of the crowd.\n\n\nWhereas this course is already rather extensive and covers the most important aspects of AI for modern gamedevelopment, I can't possibly cover everything of this huge field. For example I won't address machine learning because this topic alone would fill a whole bunch of courses and really isn't that practical for most Game-AIs because of the lack of control you have over it.\nBy the end of the course you'll be confident with the most important AI-Techniques- and Design Patterns for modern Gamedevelopment.\n\n\nSo what are you waiting for, join me now and start creating astonishing AI-Systems yourself.",
      "target_audience": [
        "Intermediate Gameprogrammers with an interest in AI in Unity",
        "Gamedesigners with some Coding- and Unity-Background"
      ]
    },
    {
      "title": "Procedural Race Tracks - Houdini 17.5/18 and Houdini Engine",
      "url": "https://www.udemy.com/course/procedural-race-tracks-houdini-175-and-houdini-engine/",
      "bio": "Create a full Procedurally built Level with Houdini 17.5, Houdini Engine, Unity 3D & Unreal Engine 4",
      "objectives": [
        "Procedural Modeling in Houdini 17.5",
        "Houdini Engine for Unity 3D and Unreal Engine 4",
        "Create Houdini Digital Assets in a Production proven way for Games",
        "How to use Houdini to create Procedural models to save you time during you game productions",
        "How to Set up HDA's in Unity and Unreal so you procedurally generate Collision Meshes, Materials, UVs, and more!",
        "How to Scatter large amounts of Foliage onto your Terrains",
        "How to use Houdini Engine and Unity's Tree Prototypes",
        "How to create Textures with Houdini"
      ],
      "course_content": {
        "Introduction": [
          "Project Overview",
          "Introduction",
          "Pre-Requisites for this Course"
        ],
        "Installing Houdini and the Houdini Engine": [
          "Introduction",
          "Where to get the Houdini Application",
          "Installing Houdini",
          "Creating a Houdini Project",
          "Using Houdini Projects",
          "Installing the Houdini Engine in Unity 3D",
          "Installing the Houdini Engine in Unreal Engine",
          "Where to find the Houdini Engine Documentation",
          "Conclusion"
        ],
        "Houdini Basics": [
          "Introduction",
          "Navigation in Houdini",
          "Overview of the Houdini User Interface",
          "Customizing the User Interface",
          "Creating and Working with Nodes",
          "Component Display"
        ],
        "The Basics of Houdini Engine and Houdini Digital Assets": [
          "Introduction",
          "Installing the Indie-Pixel Framework",
          "Creating a Basic HDA",
          "Adding Parameters to our HDA",
          "Import into Unity",
          "Import into Unreal",
          "Creating the Road Cone - Part 1",
          "Creating the Road Cone - Part 2",
          "Creating the Road Cone - Part 3",
          "Creating the Road Cone - Part 4",
          "Creating the Road Cone - Part 5",
          "Test in Unity",
          "Test in Unreal",
          "Conclusion"
        ],
        "Tool Kit Planning": [
          "Introduction",
          "Gathering Reference",
          "Defining our Tool Set",
          "Installing the Game Dev Tools into Houdini",
          "Conclusion"
        ],
        "Building the Track Tool": [
          "Introduction",
          "Creating the Track HDA and User Curve",
          "Generating the Track Geometry",
          "Generating the Track Geometry - Houdini 18",
          "Adding Parameters to our Track Geometry",
          "Test in Unity",
          "Test in Unreal",
          "Generating the Side Lines",
          "Generating the Side LInes - Houdini 18",
          "Creating Clean UV's for the Track Geometry",
          "Creating a Helper Utility",
          "Adding Vertex Colors",
          "Test in Unity",
          "Test in Unreal",
          "Conclusion"
        ],
        "Fixing the Track Tool": [
          "Introduction",
          "Fixing the Open Curve Issue",
          "Surprise Bonus Lecture!!",
          "Surprise Bonus Lecture!! - Houdini 18",
          "Conclusion"
        ],
        "Utilizing HDA Inputs & Debugging": [
          "Introduction",
          "Setting up the HDA",
          "Updating the Track Tool",
          "Unity Test",
          "Unreal Test",
          "Debugging with the Houdini Engine",
          "Conclusion"
        ],
        "Creating the Track Bumpers": [
          "Introduction",
          "Setting up the HDA",
          "Measuring Curve Length",
          "Detecting Turn Direction",
          "Joining the Curves",
          "Creating the Bumper Geo - Part 1",
          "Creating the Bumper Geo - Part 2",
          "Creating the Bumper Geo - Part 3",
          "Creating the Bumper Geo - Part 4",
          "Section Errata - @Outside Attribute Fix and Explanation",
          "Creating the Bumper Geo - Part 5",
          "Unity Test",
          "Unreal Test",
          "Generate the UV's for the Track Bumpers",
          "Conclusion"
        ],
        "Houdini Core Concepts - Curve Directions and Vectors": [
          "Introduction",
          "Creating Flow Normals",
          "Creating Curve Directions",
          "Conclusion"
        ]
      },
      "requirements": [
        "A Basic Knowledge of Unity or Unreal",
        "A basic Understanding of the Houdini User Interface",
        "A familiarity of creating models and textures for Game Development",
        "A desire to start using Houdini Engine to create Procedural Models",
        "A desire to create Procedural Levels for Games"
      ],
      "description": "Have you ever wanted to speed up your level creation using Procedural Techniques?  Have you ever tried to use Houdini or the Houdini Engine but hit road blocks that prevented you from being productive with the two applications?  Then this course is for you!\nThroughout this course we are going walk through every step of the way so it is not confusing at all.  You will gain the confidence to begin building your own procedural race track tools for use inside of Unity 3d and Unreal Engine 4.\nThe course starts out by giving individuals new to Houdini, a quick start guide to using Houdini by teaching the basics of navigation, UI, modeling and creating Houdini Digital Assets.  Once armed with that new knowledge we move onto the next level and start building out our Track tools.\nWith the Track tools we will learn how to effectively build a set of HDAs that will generate a Track complete with UV's, the Track bumpers, and the Track Guard Rails.  Through that section of the Course we will see how we can detect the direction of a turn in the Track so we can place either a Track Bumper or a Track Guard Rail.  This will begin to open up the power of using Proceduralism in your game productions.\nWith the Track in place we will walk through the process of creating Procedural Terrains with Houdini and the Houdini Engine.  We will learn how to hook up terrain layers so we can texture our terrains in Unity and in Unreal.\nOnce our Terrains are ready to go we will walk through the process of efficiently creating and Scattering foliage using the Houdini Engine.  We look at how to utilize Unity's Detail object system with Houdini Engine and how to use Unreal's  grass system.\nTo conclude the course we build out a couple more procedural props and learn how to create textures with Houdini using its own Compositing Operators.\nThis course gives you a complete look at how to build a procedural pipeline for your games productions using Houdini 17.5, the Houdini Engine 3.4 and the Game Engine of your choice!\nIf you are looking to learn Houdini and Houdini Engine for Games Development then this Course is for you!\n\n\nNote:  Creating HDAs in the Apprentice version of Houdini will not work with Houdini Engine.  An Indie License or above is required.  But all the modeling and workflows still apply, will just have to export the Track pieces from Houdini Apprentice to OBJ.",
      "target_audience": [
        "Beginning Level Designers",
        "Unity 3D users wanting to automate their Level Creation processes",
        "Unreal Engine users wanting to automate their Level Creation processes with Houdini Engine",
        "Individuals wanting to learn everything about how to use the Houdini Engine",
        "Individuals wanting to boost their Houdini skill sets"
      ]
    },
    {
      "title": "Android Game Development for Beginners - Learn Core Concepts",
      "url": "https://www.udemy.com/course/android-game-development-for-beginners-learn/",
      "bio": "Learn Android Game Development with Android Studio and Java by making a complete Plane Shooter game in View",
      "objectives": [
        "You'll be able to build a complete 2D game in less than 3 hours.",
        "You'll have a clear understanding of the core concepts behind a 2D game.",
        "You'll be able to brush-up your Java skills.",
        "You'll be able to create different levels for your game.",
        "Monetize your app through Google Admob and start getting some revenue."
      ],
      "course_content": {
        "Introduction to Android Game Development": [
          "Introduction to the Course",
          "Which programming language to choose?",
          "Important Update: Must read before you proceed!"
        ],
        "Creating a project in Android Studio": [
          "Create the Project in Android Studio",
          "Game Resource",
          "Join The Community"
        ],
        "Frame-by-Frame Animation in Android": [
          "Frame-by-Frame Animation - A high-level overview",
          "Set a background image for Canvas",
          "Make the background image fully fit the Canvas",
          "Make the Plane move"
        ],
        "Object Oriented Animation Technique": [
          "Do it Object Oriented way",
          "Add another Plane"
        ],
        "More Development": [
          "Draw the tank",
          "Get Touch Event",
          "Fire the missiles when tank is touched"
        ],
        "Collision Detection": [
          "Collision detection"
        ],
        "Add more fun to this game": [
          "Add sound effects",
          "Add score",
          "Add health indicator",
          "Create a cool explosion effect"
        ],
        "Game Over": [
          "Design the GameOver screen",
          "It's GameOver",
          "Monetize your app with Google Admob",
          "Idea for Creating Game Levels"
        ],
        "Course Wrap-Up": [
          "Bye for now",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "We'll be using Java in this course, and since it's an OOP language, it's important to learn OOP fundamentals first. One of my courses titled \"Object Oriented Programming Fundamentals\" teaches that. Note that, it does not teach Java specifically. But it's important to learn that first to be able to work with Java, Kotlin, C++, Python, C# or any other OOP based languages.",
        "You should have Android Studio installed.",
        "Some basic programming experience like variable, if-else, loop, method."
      ],
      "description": "Important Note:\nAll source code provided in this course remains valid and compatible with the latest versions of Android Studio and Android SDKs.\nPlease note, however, that the course was originally created using an earlier version of Android Studio and the Android SDK.\nIf your goal is to:\nLearn game development logic from the ground up,\nBuild a game loop from scratch,\nCreate your own custom game framework to develop future games more quickly and efficiently,\nAnd you wish to code entirely in Java without relying on external game engines,\n— then this course is ideal for you. Otherwise, we recommend exploring other courses that better match your needs.\n\nHi, and welcome to my course Android Game Development for Beginners. I am Sandip, and I’ll be guiding you through the process of creating your very own Android games, using Android Studio and Java. Sound exciting? Let’s get started.\nSome Amazing Reviews From Our Learners\n- i find this course simple but very clear and effective. good job!\n- Course delivers on what it advertises. Quickly and easily explains essential functionality for android game development.\n- Great course, I found the format worked really well and Sandip was really quick to respond when I had a question. I already have some basic android development knowledge but I had never made a game before, now I'm confident I can start making my own games.\n- Very useful. I have been searching for weeks to find a good OOP course. Sandip shows how to implement the app first then moved into OOP so you can understand the differences.\n- So clear for step by step, cheers!\n- Great course, i had lots of fun learning about android development. I am working on my very own app at the moment. Instructor is willing to help you if your stuck.\n- I got the opportunity to know how to build a game and truly speaking it was amusing The instructor made the tutorial easy and attractive\n- Hello, I loved the course as it was well demonstrated with practical point of view. It is must for every beginner in android game development. Loved it. Will be waiting for more!!\nCourse Overview\nThis course will introduce some key elements of game programming. I will be covering basic XML Layout designing, Frame by Frame Animation, Object Oriented concepts for Animation, detecting Touch Event and Collision, showing Score and Health Indicator. Score is displayed in GameOver screen once the game is over. From the GameOver screen, you can either Restart the game or Exit from it. I will show you how you can save your personal best score using Android SharedPreferences class. I believe the best way to learn game programming is by making one. So, I will walk you through the process of creating a complete Android game, from start to finish, step by step in a completely hands-on fashion, sharing some super useful resources along the way. As we move on, we will be creating a small but complete game called “Plane Shooter”. I'll show you step-by-step how to Create Different Levels for your game and add features like changing game background and increasing the speed of the Planes for every succeeding level to make your game more interesting and fun, in the easiest way possible. This course improves your problem-solving ability as I invite you to find the solution yourself so that you can think and solve your coding problems like a pro. I am also available to support you along the way as much as I can. I'll do the heavy lifting for you so that you can have an enjoyable learning experience and focus on implementing the game features that you want. This course doesn't stop here. I'll demonstrate step-by-step how to monetize your app through Google AdMob Banner and Interstitial ads so that you can start getting some revenue. You can download all the project source codes once you purchase this course which you're free to use for your personal work. As a motivation for you, I've included few real apps made by my students with some help from this course (and/or my other android game development course titled Android Game Development - Create Your First Mobile Game). Isn't it amazing?\nWhether for fun or for profit, developing Android games can be very rewarding, both personally and professionally. You can make your own games for fun, to show off your friends and family. You may have been curious about how to make a game. A game that you build yourself and publish can be a great experience and can enrich your life. Either way, you need to have a solid knowledge of game development fundamentals and the skills required to make your Android game a reality.\nWhy Android for making games? Because you will find Android to have a larger amount of players available, bringing more downloads and engagements in your app. Getting your app to big success is greatly dependent upon its exposure. Putting it in the Android mainstream market Google Play is one way to do that.\nJoin me on this exciting journey to become an Android Game Developer. Hit the Enroll Button!",
      "target_audience": [
        "This course is perfectly suitable for anyone interested in making Android Games from scratch but don't know where to start.",
        "If you want to learn the core concepts of a 2D game development like animation, touch event, collision detection, playing sound, saving score etc. then this course is right for you.",
        "If you want to learn game development by writing code in Java."
      ]
    },
    {
      "title": "Python for Game Programming: Pygame from A to Z",
      "url": "https://www.udemy.com/course/python-for-game-programming-pygame-from-a-to-z/",
      "bio": "Mastering the Art of 2D Game Development with Python and Pygame",
      "objectives": [
        "Understand the foundational principles of game development and how these are implemented in Python using the Pygame library.",
        "Develop and design a variety of 2D games from scratch, including platformers, puzzles, and arcade-style games.",
        "Utilize Pygame's functionality for graphics, sound effects, and user input to create interactive and engaging gaming experiences.",
        "Debug and optimize Pygame code to ensure smooth gameplay and performance, and handle different game states and events effectively.",
        "Implement game physics and controls, including collision detection, sprite movement, and character animation in Pygame.",
        "Manage game state and screen transitions, such as starting, pausing, and ending games, with efficient code structures.",
        "Learn to design and use game assets, such as sprites and background images, and how to manage them within Pygame.",
        "Gain insights into best practices for structuring and organizing game projects, improving code readability and maintainability.",
        "Learn to deploy completed Pygame applications for wide distribution."
      ],
      "course_content": {
        "Introduction to Pygame": [
          "Introduction to Pygame and its capabilities",
          "Setting up a Pygame development environment",
          "Creating a Pygame window and basic game loop",
          "Course Materials"
        ],
        "Getting started with Pygame": [
          "Drawing shapes on a surface",
          "Handling keyboard events and frame rates",
          "Adding boundaries",
          "Adding Jump logic",
          "Adding a background image"
        ],
        "Sharp Shooters Game": [
          "Introduction to sprites",
          "Moving and animating sprites",
          "Object oriented programming",
          "Projectiles",
          "Adding enemy",
          "Collision: Manual hitbox",
          "Implementing collision detection using .Rect()",
          "Displaying text & adding scores",
          "Adding Health bars",
          "Implementing sound effects and background music",
          "Fixing bugs"
        ],
        "Snake game": [
          "Game design",
          "Creating a snake",
          "Moving the Snake",
          "Adding boundaries to the snake",
          "Adding apple",
          "Detect when snake eats apple",
          "Scores and Game over",
          "Errors fixing"
        ],
        "Spaceship game": [
          "Introduction to the game",
          "Creating spaceship",
          "Shooting with spaceship",
          "Adding enemies",
          "Add shooting to enemies",
          "Adding bullets collisions",
          "Adding sound effects, scores and Game over"
        ],
        "Final Project : Car race": [
          "Introduction and game design",
          "Adding a car",
          "Drawing background images and crash check",
          "Adding enemy cars and car collisions",
          "Introduction to scrolling background",
          "Adding game difficulty levels",
          "Adding main menu page and menu buttons",
          "Fixing errors and Making buttons interactive",
          "Conclusion"
        ],
        "BONUS Section - Don't Miss Out": [
          "BONUS Section - Don't Miss Out"
        ]
      },
      "requirements": [
        "Basic understanding of Python: Students should be comfortable with Python syntax and its core concepts such as variables, loops, functions, and classes.",
        "Fundamental knowledge of programming concepts: Understanding of concepts such as control flow, data structures, and object-oriented programming would be beneficial.",
        "Access to a computer: Students will need a computer with Python and Pygame installed. Instructions for setting up the necessary software will be provided in the course.",
        "Eagerness to learn: Game programming can be complex, but it's also a lot of fun. A willingness to learn new concepts, to experiment, and to persevere when things get challenging will make the learning experience more enjoyable and rewarding.",
        "Basic familiarity with video games: Having a basic understanding of common video game mechanics and genres will help you grasp the practical examples provided in the course.",
        "No previous game development experience is required: This course is designed for beginners in the field of game programming. If you're passionate about games and want to learn how to make your own, this course is a great starting point."
      ],
      "description": "Unleash your creative potential and delve into the exciting world of game development with our comprehensive course, \"Python for Game Programming: Pygame from A to Z\". This course offers a step-by-step guide to understanding and mastering the art of creating engaging 2D games using Python and its powerful library, Pygame.\nDesigned for beginners yet comprehensive enough for intermediate programmers, this course takes you from the foundational principles of game development to creating your own games from scratch. You will explore a range of concepts including graphics handling, sound effects, user input, game physics, and state management, all while building a variety of games such as platformers, puzzles, and arcade-style games.\nWhether you're an aspiring game developer, a Python programmer looking to expand your skillset, a hobbyist aiming to create captivating games, or a freelancer or entrepreneur intending to monetize your creations, this course is tailored for you. By the end of this journey, you'll have a robust understanding of game development with Python and Pygame, and a portfolio of games to showcase your newfound skills.\nEnroll in \"Python for Game Programming: Pygame from A to Z\" today and take the first steps towards your game development career. No previous game development experience is required - just bring your passion for games and readiness to learn!",
      "target_audience": [
        "Python programmers looking to expand their skills into game development. If you're already comfortable with Python and want to use it to create interactive games, this course is a great choice.",
        "Aspiring game developers who want to learn a beginner-friendly programming language. Python and its Pygame library are perfect for beginners in game development due to their simplicity and straightforward syntax.",
        "Hobbyist game creators interested in learning how to build 2D games from scratch. This course provides a step-by-step guide to building several types of games with Python and Pygame.",
        "Computer science students or self-learners who want to delve deeper into the practical applications of programming. This course can provide an interesting and engaging supplement to more theoretical studies.",
        "Teachers and educators who are seeking to enhance their programming curriculum with game development. This course can provide a foundation in game development with Python, offering a fun and interactive way to teach programming.",
        "Anyone with a love for games and a desire to understand how they're made. If you've ever been curious about the process of game creation, this course can help demystify it for you.",
        "Freelancers and entrepreneurs who aspire to create and monetize their own games. If you're interested in building your own games and potentially selling them for profit, this course will provide the foundational skills needed to start your journey."
      ]
    },
    {
      "title": "SolidWorks Complete Course: Learn 3D Modeling in SolidWorks",
      "url": "https://www.udemy.com/course/solidworks-course-3d-modeling/",
      "bio": "SolidWorks 3D Modeling: The Ultimate Guide to 3D Modeling in SolidWorks. 3D Modeling Techniques. SolidWorks 3D Modeling",
      "objectives": [
        "Learn the basics of SolidWorks",
        "Learn to create 3D Models and 2D Drawings",
        "Learn the advanced functionality and capabilities of SolidWorks",
        "Learn best practices and exclusive techniques",
        "Learn Part Modeling, Detail Drawing, Assembly Modeling, Animation, Rendering and much more"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Defining SolidWorks": [
          "What is SolidWorks",
          "File Formats in SolidWorks",
          "Design Intent"
        ],
        "Getting Started with SolidWorks": [
          "Opening SolidWorks For the First Time",
          "Starting a New Part",
          "Opening and Closing Files",
          "Part Manipulation",
          "Changing Units",
          "Saving Files"
        ],
        "User Interface": [
          "Menu Bar Pull Downs",
          "Command Manager Tabs",
          "Feature Manager Design Trees",
          "Heads Up View Toolbars",
          "Tips and How to Search For Help"
        ],
        "Basic Sketch Tools": [
          "Defining Sketch Planes",
          "How to Make an Axis",
          "How to Draw a Line",
          "How to Draw a Rectangle",
          "How to Draw a Circle",
          "How to Draw a Slot",
          "How to Draw a Arc",
          "How to Draw a Polygon",
          "How to Draw a Spline",
          "How to Draw an Ellipse"
        ],
        "Sketch Relations and Rules": [
          "Under Defined Sketch",
          "Fully Defined Sketch",
          "How to Add and Delete Sketch Constraints/Relations",
          "How to Add Dimensions to a Sketch"
        ],
        "Modify Sketch": [
          "How to Add Sketch Fillet and Chamfer",
          "How to Trim and Extend a Sketch",
          "Offset Entities",
          "Mirror Entities",
          "Linear and Circular Sketch Pattern",
          "Move, Copy, Rotate, Scale, and Stretch Entities"
        ],
        "Basic Part Modeling": [
          "Revolved Boss/Base",
          "Extruded Boss/Base",
          "Convert Entities and Share Sketch",
          "Mirror Features",
          "Fillet and Chamfer",
          "Extruded Cut",
          "Revolved Cut",
          "Circular Pattern",
          "Linear Pattern",
          "Sweep Boss/Base",
          "Swept Cut",
          "Download the Resources in This Lecture",
          "Lofted Boss/Base",
          "Shell",
          "Finish Nail Polish Body",
          "Lofted Cut",
          "Hole Wizard",
          "Draft",
          "Warp"
        ],
        "How to Edit a Part": [
          "How to Edit a Sketch",
          "How to Hide and Show Sketch",
          "How to Edit Features",
          "How to Suppress and Unsuppress Feature",
          "Rollback Feature",
          "Reorder Features"
        ],
        "Evaluate Part": [
          "Measure Tool",
          "Mass Properties Tool"
        ]
      },
      "requirements": [
        "You must have SolidWorks 2016 or a newer version on your computer"
      ],
      "description": "This course will introduce you to SolidWorks tools and the fundamental modeling techniques. It will give you with a  strong understanding of SolidWorks and will cover the creation of parts,  assemblies and drawings. This course takes you from beginner to advanced with clear instruction that goes beyond the basics. Fundamental techniques are detailed with real-world  examples for hands-on learning. Even experienced users will find value in this course by learning new techniques that make familiar tasks quicker, easier to do, and much more organized, including advanced file management tools that simplify and streamline pre-flight checks.",
      "target_audience": [
        "People who want to learn how to create 3D models",
        "People who want to learn how to create 2D Drawings using SolidWorks",
        "People who want to learn CAD"
      ]
    },
    {
      "title": "Your Game, Your Graphics: 2D Art Design in Inkscape",
      "url": "https://www.udemy.com/course/create-2d-game-with-inkscape/",
      "bio": "Create amazing art in Inkscape, explore Inkscape tools, and bring your Inkscape game art to life for stunning 2D games",
      "objectives": [
        "The basics of Inkscape and Game Art Design",
        "Design and animate a 2D game character",
        "Design a beautiful game background"
      ],
      "course_content": {
        "INTRODUCTION TO INKSCAPE": [
          "Introduction to Inkscape tools",
          "Congratulations",
          "Video Speed rate",
          "Raster & Vector Graphics in Inkscape"
        ],
        "Game Design": [
          "Inkscape",
          "Document Properties and first tools in Inkscape",
          "The Ellipse tool and designing a heart in Inkscape",
          "Objects Order, Grouping Objects, the Zoom tool and Colors in Inkscape",
          "Path Operations, the star tool and gradients in Inkscape",
          "Align And Distribute, the text tool and a game coin in Inkscape",
          "Path and Nodes in Inkscape",
          "Section Recap",
          "Starting with the Background and the Character in Inkscape",
          "Lets draw some Ghosts in Inkscape",
          "Adding the Power Ups (fruits) in Inkscape",
          "Layers, the walls of PacMan and Installing a font in Inkscape",
          "Exporting and making a PacMan Wallpaper in Inkscape",
          "Starting with the UI - Buttons in Inkscape",
          "Design some nice platforms in Inkscape",
          "Make the platforms tileable in Inkscape",
          "Design Some popular game assets in Inkscape",
          "Animation Introduction in Inkscape",
          "Finish and preview the animation in Inkscape",
          "Design the head of the character in Inkscape",
          "Continue with the body of the character in Inkscape",
          "First four frames of the walk cycle animation in Inkscape",
          "Finish and preview the walk cycle animation in Inkscape",
          "Your first game background and the spray tool in Inkscape",
          "A Desert Background in Inkscape",
          "Night Sky Background in Inkscape",
          "The Foreground and some more assets in Inkscape",
          "How to setup Inkscape for Isometric game art",
          "Create an Isometric tile in Inkscape",
          "How to set dark theme on Inkscape",
          "Congratulations!"
        ]
      },
      "requirements": [
        "You only need a PC or Mac for this course",
        "You will need Inkscape installed on your computer"
      ],
      "description": "If you have an amazing game idea, and you wish to develop your own custom graphics, this class is for you!\nI’m going to teach you how to use Inkscape, a free design software, and create all the game art you need in order to develop a 2D game!\nBecause Inkscape is a vector graphics software, the assets you create will be scalable and also highly versatile. You will create them once and then you can use them on any device and also any resolution! From iPhones to desktop computers.\nWhy Inkscape?\nIt’s user-friendly and perfect for beginners.\nIt offers amazing documentation to help you at every step.\nIt’s one of the most popular tools for creating professional-quality vector graphics.\nYou will learn the core concepts, tools, and functions and you will be able to develop fully functional 2D Games.\nLearning the basics of Inkscape and Game Art Design will put a very powerful and useful tool at your fingertips. Inkscape is very easy to learn, it has amazing documentation, and is one of the most used tools for creating vector arts.\nWhat are you waiting for? Join me to learn how to create amazing art with free tools and turn your unique ideas into reality!",
      "target_audience": [
        "2D design passionate students",
        "Students interested in Inkscape and 2D games"
      ]
    },
    {
      "title": "Unreal Engine 5: Blueprint Scripting 101",
      "url": "https://www.udemy.com/course/unreal-engine-blueprint-scripting-101/",
      "bio": "Craft amazing gameplay experiences by mastering Blueprint Scripting in the Unreal Engine",
      "objectives": [
        "How to setup a project in Unreal",
        "How to create various Blueprint Types",
        "How to navigate the Blueprint Editor",
        "How to utilize the Event Graph inside of a Blueprint",
        "How to utilize the Construction Script inside of a Blueprint",
        "How to create / add / use Variables in scripts",
        "How to create Object References in scripts",
        "How to create / add / use Events in scripts",
        "How to create / add / use Functions in scripts",
        "How to create / add / use Macros in scripts",
        "How to add / use Flow Control nodes",
        "How to Communicate between Blueprints",
        "How to create / setup \"Framework\" Blueprints",
        "How to create Child Blueprints using Inheritance",
        "How to Compile Blueprints",
        "How to Debug Blueprints",
        "How to utilize hotkeys and other productivity tips & tricks inside of Blueprints"
      ],
      "course_content": {
        "Getting Started": [
          "Course Primer",
          "Download & Install",
          "Create Project"
        ],
        "Blueprint Overview": [
          "Blueprint Example",
          "Components Panel",
          "Viewport Tab",
          "Details Panel",
          "My Blueprint Panel",
          "Event Graph",
          "Construction Script"
        ],
        "Blueprint Types": [
          "Class Blueprints",
          "Level Blueprints"
        ],
        "Scripting Essentials": [
          "Node Types",
          "Execution & Data Pins",
          "Node Wiring",
          "Node Organization"
        ],
        "Creating Object References": [
          "Level BP - Design Time Object References",
          "Level BP - Run Time Object References",
          "Class BP - Design Time Object References",
          "Class BP - Run Time Object References",
          "Casted Object References",
          "Widget BP References",
          "Tag References"
        ],
        "Events": [
          "Event Begin Play",
          "Event Tick",
          "Event Input",
          "Event Axis",
          "Event Begin Overlap",
          "Event End Overlap",
          "Event Begin Cursor Over",
          "Event End Cursor Over",
          "Event On Clicked",
          "Event On Released",
          "Event Hit",
          "Event Any Damage",
          "Event Point Damage",
          "Event Radial Damage",
          "Event Destroyed",
          "Custom Events"
        ],
        "Variables - Basic": [
          "Variables Overview",
          "Boolean",
          "Integer",
          "Float",
          "Name",
          "String",
          "Text",
          "Vector",
          "Rotator",
          "Transform",
          "Actor (Object)",
          "Variables - Things to Know (Part #1)",
          "Variables - Things to Know (Part #2)",
          "Variable Tips & Tricks",
          "Variables Quiz!"
        ],
        "Functions": [
          "Functions Overview",
          "Actor Functions",
          "Class Functions",
          "Component Functions",
          "Creating Functions",
          "Calling Functions",
          "Collapse to Function",
          "Pure & Impure Functions",
          "Function Library",
          "Local Variables",
          "Functions - Things to Know"
        ],
        "Macros": [
          "Macros Overview",
          "Creating Macros",
          "Collapse to Macro",
          "Macro Library"
        ],
        "Variables - Advanced": [
          "Array",
          "Set",
          "Map",
          "Enum",
          "Struct"
        ]
      },
      "requirements": [
        "No programming or previous Unreal Engine experience necessary!"
      ],
      "description": "In this game development course, you'll learn all about Unreal Engine's Blueprint Scripting system. This embedded set of tools inside the editor allows ANYONE to create functional gameplay using a visual, node-based approach.  This course will cover all the essential concepts, skills, and language to get you started creating your own amazing gaming projects.\nThis course contains 113 fun-to-follow video lessons.  Topics covered include how to...\n\n\nSetup a Project inside the Unreal Engine\nNavigate the Blueprint Editor\nUse the Event Graph to add functionality to a Blueprint\nUse the Construction Script to make Procedural Content\nCreate / add / use Object References\nCreate / add / use Events\nCreate / add / use Variables\nWays to Get & Set\nCreate Single, Array, Set, or Map Variables\nCreate / add / use Functions\nCreate Custom Functions\nCreate a Function Library\nCreate / add / use Macros\nCreate Custom Macros\nCreate a Macro Library\nAdd / use Flow Control nodes\nIdentify Blueprint Types\nClass Blueprints\nLevel Blueprints\nUse different Blueprint Communication methods\nCasting\nDirect Communication\nEvent Dispatchers\nBlueprint Interfaces\nIdentify and setup the different \"Framework\" Blueprints in your Project Settings\nGame Mode\nPawn\nPlayer Controller\nGame Instance\nUse Inheritance to Create Child Class Blueprints\nCompile Blueprints\nDebug Blueprints\nUtilize Blueprint Productivity Hacks\n\n\nWith the knowledge gained in these video lessons, you'll have the necessary skills to start creating your OWN custom scripts for your OWN gaming projects!\nPlease don't hesitate to share your creations with me!  I love to show off student projects in promotional emails.",
      "target_audience": [
        "Beginners looking to get started creating gameplay using Unreal",
        "Intermediates or Professionals looking for a repository of Blueprint Scripting know-how"
      ]
    },
    {
      "title": "Make a fighting game in Unity",
      "url": "https://www.udemy.com/course/make-a-fighting-game-in-unity/",
      "bio": "Make a professional looking two player fighting game in Unity",
      "objectives": [
        "Step by step guide showing you how to make a StreetFighter style game in Unity 2020",
        "Add a variety of free characters with a range of different fighting styles",
        "Dynamically load characters and levels into a scene",
        "Add a Main menu and a character select screen",
        "Create both 1 player and 2 player modes",
        "Set up player gamepads for 2 player mode",
        "Create AI characters that will fight you in 1 player mode",
        "Add health bars, timer and win/Lose conditions",
        "Create easy to understand C# code to control your fighters",
        "Use Unity's Mecanim animator to manage different fight animations",
        "Develop professional level game design experience",
        "Develop a fully completed fighting game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Install Unity",
          "Install Post Processing",
          "Reference Code"
        ],
        "Main Scene": [
          "Setting up backgrounds",
          "Downloading characters",
          "Importing characters",
          "Post Processing",
          "Transparency fix",
          "Setup Animations",
          "Animation scripting",
          "Movement",
          "Jumping",
          "Cannot exit screen",
          "Face opponent",
          "Flip Animations"
        ],
        "Combat Animations": [
          "Combat Animations",
          "Spinning Jump",
          "Combat Setup",
          "Task Review",
          "Leg Sweep",
          "Aerial Moves",
          "Flip Animations",
          "Blocking",
          "Sounds",
          "Sound reverb",
          "Reaction animations",
          "Reaction Setup",
          "Reaction Code",
          "Hit sounds",
          "Flip react"
        ],
        "Player 2": [
          "Player 2 animations",
          "Animator setup",
          "Player 2 setup",
          "Player 2 Controls",
          "Player 2 Blocking",
          "Player 2 Animations",
          "Jump Flip edit",
          "Jump over characters",
          "Jump code",
          "Jump animation",
          "Jump review",
          "Don't Push opponent",
          "Don't Push P2",
          "Reset Move",
          "Fixing the jump",
          "Attack Colliders",
          "Collider animations",
          "Collider code",
          "Player 2 colliders",
          "Player 2 code",
          "Fixing reactions",
          "Heavy react slide",
          "Edit Reactions",
          "2 Joypad Setup"
        ],
        "User Interface (UI)": [
          "Health bar graphics",
          "Health bar code",
          "Red bar",
          "Health bars",
          "Knockout",
          "Blocking",
          "Victory animations",
          "Victory code",
          "Heavy react fix",
          "Jump speed fix",
          "Particle Effects",
          "Particle Effects 2",
          "Victory check",
          "Attack timing",
          "Dynamic loading",
          "Dynamic checks",
          "Player prefabs",
          "Player reversal",
          "Player spawning",
          "Spawning Fix"
        ],
        "Artificial Intelligence (AI)": [
          "AI Walking",
          "AI Pause",
          "AI random attack",
          "Attack within range",
          "AI Triggers",
          "AI attack rate",
          "AI dazed",
          "Crouch defend",
          "AI blocking",
          "Crouch colliders",
          "AI Character test",
          "Setting up Eve AI",
          "Saving AI Prefabs"
        ],
        "Sounds": [
          "Text mesh pro",
          "Timer code",
          "Timer reaches 0",
          "Fight round text",
          "Fight round audio",
          "Audio mixer",
          "Win sound",
          "Timer win lose",
          "Importing music",
          "Fade In",
          "Two Player Text",
          "Scene Reload",
          "Rounds 2 and 3",
          "Music delay"
        ],
        "More Characters": [
          "Bring in More Characters",
          "Character Images",
          "Editing Images",
          "Character Icons",
          "Victory Backgrounds",
          "Background edits",
          "Victory screens",
          "Character Select",
          "Player 2 Spawn",
          "Small Fixes",
          "Victory screens",
          "Victory Images",
          "Character Load",
          "Dynamic Loading"
        ],
        "Character Selection": [
          "Selection Screen",
          "P1 and P2 text",
          "Character Select Code",
          "Character display",
          "P1 Indicator",
          "Select Code",
          "Player 2 Selection",
          "Testing Selection",
          "Level Select",
          "Linking Scenes",
          "Changing backgrounds",
          "Resetting wins"
        ],
        "Main Menu": [
          "Main menu layout",
          "Main menu buttons",
          "Controls menu",
          "Options Menu Layout",
          "Options menu",
          "Options test"
        ]
      },
      "requirements": [
        "You will need a PC, Mac or Linux to be able to install the latest version of Unity to complete the course",
        "No prior coding experience is needed as I guide you through coding step by step"
      ],
      "description": "In this course I am going to be showing you how to create your own fighting game inside of the Unity game engine.\nWe're going to be bringing in a series of free characters as well as a wide range of free animations so that each character can have their own unique style.\nWe're going to create a character select screen and we're also going to setup AI characters, these are computer controlled characters that will fight against you and it will seem as though the AI character is just as effective and just as realistic as a real player. The characters you choose will dynamically load into the level you choose and there are a wide variety of levels to choose from.\nWe will also be setting up a 2 player mode and mapping the controls for 2 game pad controllers so you can have two people playing at the same time. You can control characters either by game pad or by keyboard.\nWe will setup options so that you can set a difficulty level for the AI characters. You will also be able to adjust the volume for music and sound effects independently.\nWe're going to be setting up animator controllers for each character and controlling the animations through various parameters that will be called in C# scripts. We're going to create a wide range of C# scripts using easy to understand and easy to implement code.\nSo by the end of this course you will have a fully completed fighting game which will look great in your portfolios. You can also include your completed game for free on websites or sell it commercially online through Steam or other such websites. You will also have gained the experience and knowledge of how to make this type of game inside of the Unity game engine.\nWhy not enroll today and I look forward to seeing you in my course.",
      "target_audience": [
        "You should be eager to build your own games using Unity",
        "This is a useful portfolio example for people trying to get into game design careers"
      ]
    },
    {
      "title": "Unreal Engine 5: The Ultimate Beginner Course",
      "url": "https://www.udemy.com/course/unreal-engine-5/",
      "bio": "From Zero to Hero: Learn Unreal Engine 5 from scratch while creating multiple games!",
      "objectives": [
        "Basics of Unreal Engine 5",
        "Install and navigate Unreal Engine 5",
        "Create great virtual worlds",
        "Build your own games",
        "Intermediate UE5 tools",
        "How to use Unreal Engine 5 editor",
        "Use and build custom blueprints",
        "Cutscene animations",
        "Game design principles",
        "Strong problem solving skills",
        "Import Quixel Megascans assets through Quixel Bridge",
        "Materials, textures and splines"
      ],
      "course_content": {
        "Getting Started": [
          "Creating your First Project and UI Basics",
          "Commands Quiz"
        ],
        "Basics of Unreal": [
          "Basic materials",
          "Textures",
          "Material parameters and texture size",
          "Introduction to static meshes",
          "Lumen and the basics of lighting",
          "Introduction to blueprints",
          "Blueprints Overview"
        ],
        "Landscape": [
          "Lighting an empty level",
          "Level Creation",
          "Sculpting the terrain",
          "Landscape materials - Painting terrain",
          "Landscape Materials",
          "Foliage tool - Adding vegetation to the terrain",
          "Bonus - Roads"
        ],
        "Levels": [
          "Moving between levels",
          "Level transitions based on triggers",
          "Level transitions"
        ],
        "Cinematics": [
          "Creating a cutscene (World)",
          "Autoplay in blueprints",
          "UI animation",
          "Finishing the cutscene"
        ],
        "Creating your first minigame": [
          "Creating the level",
          "Making the lava material",
          "UI animations",
          "Creating the platforms",
          "Connecting game mechanics",
          "Finishing the game"
        ],
        "Taking it to the skies!": [
          "Intro",
          "Key bindings and actor setup",
          "Calculating thrust and forward velocity",
          "Calculating gravity",
          "Do a barrel roll: controlling movement the x, y, and roll axes",
          "Adding simple sounds",
          "Adding jet boosters to the plane",
          "Creating point rings",
          "Don't Crash! Adding collision and a death state",
          "Cleaning up and wrapping up"
        ]
      },
      "requirements": [
        "Computer able to run Unreal Engine 5 (64-bit), 8gb ram minimum preferred",
        "Mac running MacOS 10.14 Mojave or higher",
        "About 40gb of free space"
      ],
      "description": "Have you ever dreamt of creating your own limitless world? How about your own game, movie set, or dream home?\nUnreal Engine 5 is the most powerful tool for building digital worlds that we have ever seen. It is poised to revolutionize the game film, art industries - and getting started has never been easier.\nRight now, you have the power to unleash your creativity while learning invaluable professional skills - and we're here to help you start.\nWith this crash course, you will learn all the fundamentals of Unreal Engine 5 through intuitive explanations, interactive exercises, and supplementary materials. We will guide you through building your first 3D scene, video game, starting you on your path to building the digital worlds of your dreams.\nDon't miss your opportunity to get in early.\nThe Unreal Engine 5: Beginner Crash Course is designed to teach you all the basics of Unreal Engine 5, allowing you to explore and build worlds with your creativity. This course will teach you about materials, static meshes, lighting, Quixel tools, Nanite, animations, cutscenes, UI screens, game flow logic, blueprints - and much more.\nGet ready to start your journey in an endless world with the power of Unreal Engine 5!\nEnroll now!\n\n\nAdditional credits:\nMusic by BenSound\nBackground & Assets: Stylized Forests, Quixel\nEpic Games team",
      "target_audience": [
        "Beginners willing to unveil their creativity",
        "Anyone wanting to learn Unreal Engine 5 with minimum computer knowledge and use",
        "Beginners on UE4 that want to transition to UE5"
      ]
    },
    {
      "title": "Program Voxel Minecraft Worlds with C# - Unity 6 Compatible",
      "url": "https://www.udemy.com/course/unityminecraft/",
      "bio": "A comprehensive guide to blocky mesh building for procedurally-generated worlds.",
      "objectives": [
        "Build a cube-based geometric world like that generated in Minecraft.",
        "Navigate and manipulate discrete values in 3d space.",
        "Build and skin meshes from scratch using C#.",
        "Save and Retrieve Serialised Data.",
        "Build and manage a voxel data structure."
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Join the H3D Student Community",
          "Contacting H3D",
          "FAQs",
          "Voxels",
          "3D Array and Data Management",
          "Why You Can't Build Minecraft with Cubes",
          "Cube World Challenge",
          "Updating to Unity 6"
        ],
        "How to Build a Block": [
          "The Anatomy of a Cube",
          "How to Build a Quad Part 1",
          "How to Build a Quad Part 2",
          "How to Build a Cube Part 1",
          "How to Build a Cube Part 2",
          "Merging Meshes Part 1",
          "Merging Meshes Part 2",
          "Texturing Quads and Blocks",
          "Creating Block Types and Assigning Textures"
        ],
        "How to Build a Chunk": [
          "How to Put a Chunk Together Part 1",
          "How to Put a Chunk Together Part 2",
          "How to Put a Chunk Together Part 3",
          "How to Put a Chunk Together Part 4",
          "Getting to Know the Block Neighbours",
          "Drawing only Visible Quads",
          "Adding Air"
        ],
        "Sculpting a Landscape": [
          "The Theory of Noise",
          "Graphing Noise",
          "Fractal Brownian Motion",
          "Adding Heights to a Chunk"
        ],
        "How to Build a World": [
          "Making Chunk Adjustments for World Use",
          "The World Class",
          "Building the World with a Co-routine",
          "Exploring the World on Foot",
          "Loading with a Progress Bar",
          "Switching Camera Control"
        ],
        "Creating Layers": [
          "Graphing More Perlin Noise",
          "Placing Grass On Top",
          "Preparing for Multiple Layers",
          "Adding a Layer with Probability",
          "Defining a Seam of Minerals",
          "Three Dimensional Perlin Noise",
          "Graphing 3D Perlin Noise",
          "Adding Caves Into the Chunks",
          "Bedrock"
        ],
        "Player Interaction": [
          "Building by the Column",
          "Expanding the World with Player Movement Part 1",
          "Expanding the World with Player Movement Part 2",
          "Expanding the World with Player Movement Part 3",
          "Hiding Chunks",
          "Processing Blocks in Parallel",
          "Building in the Background",
          "Something went wrong on the way to the core."
        ],
        "Mining and Construction": [
          "Digging Holes Part 1",
          "Digging Holes Part 2",
          "A Blocking Building Menu",
          "Building Blocks",
          "Building Across Chunks",
          "Decals and Secondary UVs",
          "Adding Secondary UVs to a Quad",
          "Parallel Processing of Meshes with Two Sets of UVs",
          "Breaking Blocks",
          "Healing Blocks"
        ],
        "Saving and Loading": [
          "Serialising World Data",
          "Extracting World Data",
          "Saving to a File",
          "Reading World Data from File",
          "Loading World Data into Chunk Data",
          "Loading From File Loading Bar",
          "Hiding the Extra World"
        ],
        "Dynamic Block Types": [
          "Block Neighbours and Chunks",
          "Falling Blocks",
          "Digging Beneath",
          "Fluid Blocks",
          "Controlling Flow",
          "Planting Trees",
          "Growing Trees",
          "A Tree Designer",
          "The Water Table"
        ]
      },
      "requirements": [
        "You should be familiar with C# and the Unity Game Development Engine.",
        "It would be useful if you have played Minecraft, but it's not necessary."
      ],
      "description": "All New Content Added for Unity 2020+ and works with Unity 6!\nDid you know that there is not one single cube used in Minecraft? Have you ever looked at Minecraft and wondered, \"How did they build it?\" - a great thing to ponder, it is.  If you haven't and think that programming a whole bunch of cubes is child's play, then think again. On the surface Minecraft looks as though it would be a simple world to recreate in Unity. Start placing cubes around a scene and see how far you get before the frame-rate grinds to a mind-numbing halt.  So wonder and fret no longer, as this course reveals the secrets of programming and rendering procedurally-generated voxel worlds, like Minecraft, with C# in Unity.\nIn this course, Penny teaches all the invaluable skills you will require to build a blocky world from scratch using her internationally acclaimed teaching style and knowledge from over 30 years working with games and graphics.  But hold on tight as you'll be taken on a journey across the computer graphics realm as it is taught to post-graduate university students. Through detailed descriptions and hands-on workshops examining all you need to know about 3d data structures, building meshes from scratch, using noise algorithms to generate terrain features and caves, and texturing blocks you will be programming your own world in no time.\nLearn how to program and work with:\nvoxels\ncustom built polygons and meshes\nvertices and normals\nUV mapping\ntexture atlases\nparallel processing and the Unity Job System\nUnity's MeshAPI for parallel mesh creation\nPerlin noise\ninfinite terrain generation\nloading and saving data\nContents and Overview\nAfter getting a little experience in why it's such a bad idea to build a Minecraft type world using cubes, you'll start following along with Penny, exercise after exercise, toward the end of building your very own and unique blocky terrain.\nYou'll begin by dissecting a cube and examining its fundamental parts from vertices, to normals, to texture mapping.  Armed with this knowledge, you will then begin writing code that redefines the cube and makes it far more efficient to draw as a terrain component.  You'll then bring these pseudo-cubes together to form chunks, to optimise rendering performance. Once you've worked on creating a solid world of chunks you will then learn about smooth noise and a little fractal geometry will be introduced to assist you in carving out realistic landscape features including caves.\nWith terra-firma to stand on, you'll next add a player character and start exploring the new world.  To prevent you falling off, you will also start working on the logic to build the world around you in real-time, out to infinite boundaries.\nWhen you are done with exploring, it will be time to start digging and building.  It's in this part that you will learn how to add and remove blocks at the click of a button to further mould the terrain to your liking.\nFinally, you'll cover the dynamics of adding flowing water, falling sand and start working on the logic for creating your very own biomes.\nWhat students are saying about this course:\nHi! I wanted to thank you and compliment you for the Minecraft Unity course. I've been a (web) programmer for 20 years. After so long creating somewhat boring work I'm excited to make games. My interest is in creating procedurally generated, complex worlds. Learning about Minecraft, therefore, seemed like a good idea.\nLove the amount of detail Penny goes into! Not too little, not too much, she manages to hit the sweet spot that gets you a deep understanding of what's going on, coupled with the ability to jump in with confidence and start doing things yourself. VERY pleased with my course purchase, and look forward to more by her!\nClear, concise, introduction and extension of concepts required to efficiently generate Minecraft style worlds, including Perlin noise and fractal Brownian motion.",
      "target_audience": [
        "Anyone interested in how to put together a blocky voxel world like Minecraft.",
        "Anyone interested in building and skinning geometry in a virtual world through code.",
        "Anyone who loves Minecraft and is interested in the complexities that go on behind the scenes.",
        "Anyone interested in expanding their Unity technical skills with respect to manipulating geometry with code.",
        "Anyone interested in optimising the rendering process for large scale data and multiple textures."
      ]
    },
    {
      "title": "Make Game Assets Easily And Export To Godot / Unity / Unreal",
      "url": "https://www.udemy.com/course/the-blender-to-godot-modelling-workflow/",
      "bio": "Create game assets quickly using non-destructive modular modelling.",
      "objectives": [
        "Low-poly 3D models.",
        "Generative modelling.",
        "Non-destructive Workflow.",
        "Making environmental props.",
        "Parametric modelling.",
        "Exporting assets.",
        "Importing mesh into Godot.",
        "Custom collision shapes.",
        "Material pipeline.",
        "Modifier stacking.",
        "Multi part modelling"
      ],
      "course_content": {
        "Introduction": [
          "Welcome To The Course",
          "Working With External Constraints",
          "Gathering References",
          "Blender 2.8 Onwards",
          "Getting Setup Wrap Up"
        ],
        "Simple Props": [
          "What’s Coming Up In Section 2",
          "What Are Props",
          "The Game Asset Pipeline",
          "The Importance Of Origins",
          "A Simple Crate",
          "Your First Export",
          "Adding A Second Material",
          "Changing Materials",
          "MidSection What's Coming Up",
          "Manual Work",
          "Randomize Transform",
          "Auto Mirror and The Mirror Modifier",
          "Solidifying Our Mesh",
          "The Array Modifier",
          "Adding Some Imperfections Using Displacement",
          "Solving Common Problems With Shading And Scale",
          "Controlling Texture Coordinates And More Complex Arrays",
          "Mid Section Crate Challenge",
          "Exporting With Multiple Modifiers And Objects",
          "Introduction To the Hydrant",
          "4 Ways of Importing Reference Images",
          "Spin And Screw Modifier",
          "Problems You May Encounter When Exporting",
          "Using Primitives As A Template",
          "Basic Drivers",
          "Mid Section Hydrant Challenge",
          "Organisation Decisions",
          "Godot Import Settings And Saving Branch As Scene",
          "Fixing Dependancies",
          "Setting Up Godot's Performace Monitors",
          "The Impact Of Mesh And Materials On Draw Calls",
          "Adding Custom Static Collision Mesh",
          "Adding A Custom Rigid Body Mesh",
          "Setting Up A Physics Test Scene in Godot",
          "The Power Of Python Scripting For Automation",
          "Ripping And The Knife Tool",
          "The Order of Physics Nodes Review",
          "Creating A Showcase Scene",
          "Super Simple Single Colour Texturing",
          "Section 2 Wrap Up",
          "Bonus - Cone",
          "Bonus - Street Lamp",
          "Bonus - Cafe Furniture",
          "Bonus - Zeppelin",
          "Solving Physics Issues"
        ],
        "A Simple Modular Asset": [
          "Welcome To Section 3 A Simple Modular Asset",
          "Grid Map Specifications",
          "Creating The Base Mesh And First Pieces",
          "Creating Dead Ends",
          "Creating A Perfect 90 Degree Turn",
          "Using Existing Geometry To Create New Geometry",
          "Exporting Our Road Pieces",
          "Section 3 Wrap Up"
        ],
        "Modular Buildings": [
          "Introduction To The Section",
          "What's Coming Up In This Section",
          "Basic Blocks",
          "Organising Collections",
          "Modular Unit Size",
          "Building Silhouettes",
          "Adding Detail And A 2.9 Extrude Feature",
          "My Building Modular Unit",
          "Adding Detail To The Ground Floor",
          "Challenge Solution and Effective Modifier Use",
          "Managing A Lot Of Repeating Elements Challenge",
          "Using Drivers To Manage Your Models",
          "Starting The Details - Steps",
          "Workflow Considerations With The Barriers",
          "Making The Doors And Optimising The Mesh",
          "So Many Windows",
          "Matching Materials And Finishing The Building",
          "Making One Mesh Object",
          "Exporting The Building",
          "Optimising A Model's Mesh",
          "Fire Escape - Wire Frame Modifier",
          "Panelling From A Block Model",
          "Creating The Base Panel",
          "Assembling In Object Mode",
          "Creating A More Detailed Panel And Dealing With Common Issues",
          "Fleshing Out the Rest Of The Building",
          "Different Selection Methods And Adding More Detail",
          "Finishing Off The Building Main Form",
          "Overlapping Geometry And Handling Corners",
          "Finished Factory",
          "Getting The Factory Export Ready",
          "Weighted Normals",
          "Fixing Errors And Finishing Off",
          "Section Wrap Up"
        ],
        "A 1930's Car": [
          "Introduction To Making The Car",
          "Importing The Car Reference",
          "Making A Wheel",
          "Blocking Out The Car Chassis",
          "When To Separate Your Base Meshes",
          "Focusing On Medium Level Detail",
          "Planning Car Variations",
          "Finishing Off Major Shapes",
          "Retrospection",
          "Adding Mid Level Details",
          "Adding Small Details",
          "Material Slots Are Important",
          "Making The Pickup",
          "Making The Van",
          "Making The Roadster",
          "Making The Police Car",
          "Removing Unnecessary Geometry",
          "Linking All Your Work Into One Blend File",
          "Final Showcase Scene",
          "Setting Up The Cars For Export",
          "Section Wrap Up"
        ]
      },
      "requirements": [
        "Basic knowledge of Blender and Godot",
        "Know what Edit Mode and Object mode are.",
        "Understand what origins are, how to manipulate them.",
        "Transforming: Moving, rotation and scale.",
        "Mesh operations like: extrudings, inset, loop cut.",
        "Know your way around Blender, so your workspaces and menus."
      ],
      "description": "Part of Godot Getaway: The Blender Course\n\nIf you want to create modular models in Blender for use in-game engines then this is the course for you!\nBlender is a brilliant program, capable of creating amazing models which can be exported to any game engine- in this course, we focus on the free and open-source Godot game engine. Many of the techniques taught will be immediately applicable with other game engines as well. Here are just a few of the things you’ll learn during this course:\nLearn a non-destructive modelling workflow.\nManage multiple game assets.\nLearn the material workflow.\nBring your assets alive in the Godot game engine.\nThis is an intermediate course- but wait! What does that really mean?\nI always start my courses in an easy to understand manner and talk through all of my steps, however, if you are completely new to Blender or 3D modelling, you might struggle to keep up. If you have some existing Blender knowledge you will be able to jump straight in and follow along.\nLearn how to create LowPoly 3D models and assets for games using Blender, the free-to-use 3D production suite. I have labelled the course as intermediate, however, if you have a basic knowledge of Blender you’ll be good to go!\nYou'll be ok with little or no experience. With our online tutorials, you'll be amazed by what you can achieve, with instructor support and online help.\nMichael Bridges is an experienced 3D artist and has teamed up with Yann Burrett who teaches Godot. Together Michael and Yann will provide support, encouragement and plenty of challenges along the way.\nThe course starts with basic props so we can focus on the non-destructive modelling techniques. You will apply your new skills to your project all the time. Project files will all be included, as well as additional references and resources - you'll never get stuck. There are talking-head videos along with the screencasts for you to follow along.\nFor each of the models that you build you will follow this process:\nBe taught a new technique.\nChallenged to apply the lessons to your own work.\nBe shown step-by-step how to build it.\nApply your previous knowledge regularly.\nYou will get lifetime access to the course. The creators are qualified and experienced professionals who are able to explain complex concepts clearly, as well as entertain along the way. By the end of the course, you'll be very confident making 3D assets ready for export to Godot.\nAccess to this course comes with an optional, free community site where you can share games and 3D models and as well as Discord, where you can connect with other students.\nLet’s hop on over, into Blender!",
      "target_audience": [
        "Artists and Game Designers who want to learn to bring their assets alive in Godot .",
        "Game Developers who wish to expand their Skill Set.",
        "Those with some basic knowledge who are willing to work hard.",
        "Students wanting to learn intermediate Blender techniques."
      ]
    },
    {
      "title": "Learning Unity and C# for Complete Beginners",
      "url": "https://www.udemy.com/course/learning-unity-and-c-for-complete-beginners/",
      "bio": "Learn how to make your first video game by making a BomberMan Style 3D game using the Unity Game Engine and C#",
      "objectives": [
        "Learn 3D Game Development using Unity 2021",
        "Learn the basics of the C# Programming language by making your first 3D game",
        "Make your first video game from start to finish",
        "Over 40 Assignments in videos that put your learning skills to the test to make sure you are learning and not just copying code.",
        "Learn to find and troubleshoot bugs in your games",
        "Be comfortable making your own unique games",
        "Complete and publish your first game to the Web so others can play and give feedback"
      ],
      "course_content": {},
      "requirements": [
        "No programming or previous game development experience is required at all",
        "Slow and clear videos so that you do not feel overwhelmed with information overload"
      ],
      "description": "At the end of this course you will have a completed 3D BomberMan style game published to the web. Your game can be very unique to you as you progress through this course by finding your own assets and audio resources which I will show you how to do.\n\n\nI have designed this course specifically for the complete beginner with absolutely ZERO experience in Game Development or programming. You will learn everything you need during this course without having to rely on additional resources.\n\n\nWe are going to build a complete game from scratch and take it all the way to being published on the web to share with your family and friends or even sell.\n\n\nThe course will gradually go through making a very simple prototype of our game using simple primitive shapes such as cubes and spheres. Then once comfortable with these concepts we will continue to expand upon it by adding 3D models as replacements to the prototype assets. Further expanding on that we will then add sound, music, User Interface and menu's, and so on until our game is complete. Taking it one step at a time and breaking everything down in to small tasks so that no matter your skill level you will not feel overwhelmed.\n\n\nI have included over 40 Assignments in the videos that I give to you so that you can practice the skills you have been shown on your own. Practicing using these skills without just following a video will help you remember them and how to use them in real world situations for the future.\n\n\nI will also go over how to check the license of assets you find online so that you know how to check if you are allowed to use the assets you find in commercial projects that you may publish in the future.\n\n\nLETS GET STARTED!",
      "target_audience": [
        "Someone wanting to learn how to create their very first 3D video game with no prior experience"
      ]
    },
    {
      "title": "Create HTML5 Games Using Adobe Animate",
      "url": "https://www.udemy.com/course/create-html5-games-using-adobe-animate/",
      "bio": "Make resolution independent HTML5 games using Adobe Animate CC",
      "objectives": [
        "Create great looking games that do not lose any crispness if taken from mobile phone size to large screen TV.",
        "Learn how to draw with Adobe Animate.",
        "Learn how to animate with Adobe Animate.",
        "Learn how to add interactivity to the output of a Adobe Animate animation.",
        "Learn how to easily add physics to your games using Matterjs.",
        "Pep up your Javascript skills with the latest ES6 syntax. It's easier to use."
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the course",
          "Note about using latest version of Animate",
          "JavaScript in 12 Easy Lessons - e-book",
          "Introduction",
          "An overview of the Adobe Animate IDE"
        ],
        "Drawing with Adobe Animate": [
          "Layers, the timeline and sketching using the Brush Tool",
          "Using the Line Tool",
          "Object drawing mode"
        ],
        "Animating with Adobe Animate": [
          "Using downloaded assets",
          "Character Rigging with the Bone Tool",
          "Creating a walk cycle for a boned character",
          "Tweening",
          "MovieClips or Graphics"
        ],
        "Adding interactivity": [
          "Publishing",
          "Using GitHub",
          "Using simple goto commands",
          "Adding an button on click event",
          "Adding a master Game controller class",
          "Working with sounds",
          "The CreateJS website",
          "Controlling a MovieClip",
          "What have you learned?"
        ],
        "Developing a game step by step": [
          "Step 1: Creating the assets and setting up the code",
          "Step 2: Moving the ball and adding scoring",
          "Step 3: Hit testing, lives and new game panel",
          "Step 4: Adding a character",
          "What have you learned?"
        ],
        "A more complex example": [
          "Overview of Space Cowboy",
          "Controlling the user character",
          "Endlessly scrolling backgrounds",
          "Controlling the Pod and the running Rikon",
          "Controlling the digging Rikon",
          "Controlling the alien",
          "Firing bullets",
          "Handling the user interface",
          "Finishing up. Exporting as texture, using WebFonts and adding sound effects"
        ],
        "Using a physics engine": [
          "Introducing the Matter.js physics engine",
          "Creating a simple Matter.js example",
          "A simple example that uses physics",
          "What have you learned?"
        ],
        "Conclusion": [
          "Top ten key points when creating a HTML5 game with Adobe Animate CC",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You'll need Adobe Animate CC",
        "Knowledge of basic Javascript"
      ],
      "description": "Just a few years ago nearly all browser based games used Adobe Flash. This all changed when Steve Jobs refused to allow the Flash player in the iOS Safari browser and at the same time HTML5 introduced the Canvas with an api to allow fast sprite animations. Most developers have moved away from Adobe Flash, but Adobe Flash in its latest incarnation Adobe Animate can output content that is completely HTML5 compliant. What is more it is resolution independent, so when the output is resized it still looks great. Adobe Animate is targeted mainly at non interactive content. But there is nothing to stop the developer from using the output and some Javascript to create great looking HTML5 games.\nThe author has created Flash games for clients including the Mars Corporation, BBC, Johnson & Johnson and Deloittes. He is also the author of two books about using Flash for game development. In this course he shows how users familiar with Flash can use their existing skills to create great HTML5 games and takes developers unfamiliar with Adobe Animate through the details of using the drawing tools and animation tools to create the assets that will be used in a game. We also look at how it is possible to get free vector based graphics that can then be animated and used in a game.\nThen the course takes the student through all the steps to create a simple game before moving onto a more complex example with a user interface and sound effects.\nHaving completed the course you will be able to control animations created in Adobe Animate using Javascript. Allowing you to create just about any game and you will even be shown how to add a physics engine to create games that use complex physics calculations to control the movement.\nSo what are you waiting for? Sign up now and start using this terrific tool to create some fantastic games. With a 30 day money back guarantee you have nothing to lose.",
      "target_audience": [
        "Developers wanting to understand how to use Adobe Animate CC.",
        "Developers who want to create resolution independent HTML5 games.",
        "Developers wanting to use a highly sophisticated development tool to create great content.",
        "Developers wanting to add animation to their HTML5 games.",
        "Developers wanting to learn tricks of game development from someone who has created hundreds of games.",
        "Ex-Flash developers wanting to use their skills to create HTML5 games"
      ]
    },
    {
      "title": "Learn To Create An Online Multiplayer Game In Unity",
      "url": "https://www.udemy.com/course/unity-online-multiplayer/",
      "bio": "Game development made easy. Learn networking andC# using Unity and create your online multiplayer FPS experience!",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Understand the capabilities of 3D development in Unity.",
        "Learn how to understand Online Networking",
        "Develop strong and transferrable problem solving skills.",
        "Gain an understanding of the game development process.",
        "Learn how object oriented programming works in practice.",
        "Learn to create a fun online multiplayer experience!"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The Player": [
          "Setting Up",
          "Understanding Looking Around",
          "Making The Camera Move",
          "Looking Up & Down",
          "Inverting & Hiding The Mouse",
          "Making The Player Move",
          "Interacting With The World",
          "Moving At Different Speeds",
          "Setting Camera Position",
          "Adding Gravity",
          "Jumping",
          "Staying Grounded",
          "Building The Game To Test",
          "Freeing The Mouse"
        ],
        "Shooting & Weapons": [
          "Shooting",
          "Creating Impact Effect",
          "Placing Impacts",
          "Automatic Firing",
          "Weapon Overheating",
          "Letting The Player Know They've Overheated",
          "Displaying Current Weapon Heat",
          "Adding A Crosshair",
          "Setting Up Multiple Weapons",
          "Switching Weapons",
          "Making The Weapons Function Correctly",
          "Muzzle Flashes"
        ],
        "Making A Level": [
          "Setting Up A Level",
          "Spawning At Different Points",
          "Selecting Weapon With Number Keys",
          "END OF FPS SECTION"
        ],
        "Getting Connected": [
          "Setting up Photon",
          "Laying Out The Connection Menu",
          "Connecting To The Server",
          "Setting Up Room Creation",
          "Creating A Room",
          "Joining The Created Room",
          "Handling Creation Errors",
          "Leaving A Room"
        ],
        "Room Browsing, Nicknames & Starting The Game": [
          "Laying Out The Room Browser",
          "Making The Room Browser work",
          "Joining A Room",
          "Quitting The Game",
          "Listing Players",
          "Updating The Player List",
          "Setting The Players Nickname",
          "Starting the game",
          "Switching Masters",
          "Editor Test Button"
        ],
        "Players On The Network": [
          "Setting Up Player For The Network",
          "Spawning Players",
          "Controlling One Player",
          "Auto Returning To Menu",
          "Showing Player Impacts",
          "Shooting with RPCs",
          "TakIng Hits"
        ],
        "Player Health System": [
          "Respawning",
          "Delaying Respawn & Showing Who Shot",
          "Adding Damage",
          "CHALLENGE - DISPLAYING HEALTH",
          "Preventing Leaving The Map"
        ],
        "Player Display": [
          "Setting Up The Player Model",
          "Animating the Player & Syncing Animations Over Network",
          "Hiding Our Player Model",
          "Putting Weapons in Hands",
          "Displaying The Correct Weapons"
        ],
        "Making The Match": [
          "Setting Up Events",
          "Setting Up Match Manager Systems",
          "Managing Events",
          "Sending New Player Information",
          "Receiving New Player Information",
          "Sharing The Full Player List",
          "Updating Player Stats",
          "Displaying Stats On Screen"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2020.3 or newer"
      ],
      "description": "Learn how to create and program your very own online multiplayer game using Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nIn the course we’ll create an online first-person competitive multiplayer game but the networking principles you learn will be applicable to any kind of online game you wish!\nAt the end of this course you will have developed the ability to understand such game elements as:\nFull First Person character movement\nConnecting to and managing networked games\nTracking networked players\nManaging Multiple Multiplayer Maps\nCreating a Leaderboard System\nfull audio systems\nInteractive Menus\nand much more...\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own online games.",
        "People who want to create and publish their own games.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industry.",
        "Competent and confident with using a computer."
      ]
    },
    {
      "title": "Unity C# Mobile Game Development: Make 3 Games From Scratch",
      "url": "https://www.udemy.com/course/unity-mobile/",
      "bio": "Make and publish mobile games & apps for Android Play Store & iOS App Store using Unity and C#",
      "objectives": [
        "How to develop games for mobile devices (phones and tablets) using Unity",
        "Use Unity's mobile simulator to test the resolution and layout for all of the most popular mobile devices",
        "Implement touch controls using Unity's new input system",
        "How to implement ads for mobile games",
        "How to use push notifications for mobile games",
        "How to use deploy your games to mobile devices for testing and playing",
        "How to prepare and submit your game to be published on the Apple App Store or Google Play Store"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Set Up Unity & VS Code",
          "Overview Of Unity Interface",
          "Reminder Of C# Fundamentals",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Ball Launcher": [
          "Section Intro - Ball Launcher",
          "Project Setup",
          "Looking At 2D Physics",
          "Using The Spring Joint",
          "Reading Touch Input",
          "World & Screen Space",
          "Move Objects With Touch",
          "Launching The Ball",
          "Respawning The Ball",
          "Cinemachine For Dynamic Zoom",
          "Building to Android",
          "Building To iOS",
          "Multi-Touch"
        ],
        "Simple Driving": [
          "Section Intro - Simple Driving",
          "Project Setup",
          "Driving Forward",
          "Steering The Car",
          "Camera Follow",
          "Crashing The Car",
          "Building A Track",
          "Score System",
          "Main Menu",
          "Energy System",
          "Android Notifications",
          "iOS Notifications",
          "Energy Improvement"
        ],
        "Asteroid Avoider": [
          "Section Intro - Asteroid Avoider",
          "Project Setup",
          "Processing Input",
          "Spaceship Movement",
          "Screen Wraparound",
          "Spaceship Rotation",
          "Asteroids",
          "Creating A Starfield",
          "Asteroid Spawner",
          "Game Over",
          "Score System",
          "Implementing Ads",
          "Mobile Profiling"
        ],
        "Publishing Preparation": [
          "Google Play Preparation",
          "App Store Preparation",
          "In App Purchases",
          "Course Wrap Up"
        ],
        "Continuing Your GameDev Journey": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic understanding of Unity and C#",
        "Either a windows or mac computer",
        "An android or apple phone is not necessary to take the course but you'll need access to one if you want"
      ],
      "description": "Build 3 simple mobile games using the free Unity game engine. Learn all the ways mobile games differ from pc games (including touch inputs, push notifications, ads for revenue, screen resolutions and layouts and more). Develop your own awesome mobile games and publish them on the Apple App Store or Google Play Store.\nThis course is not for absolute beginners. You'll need a basic grasp of Unity and C# (understanding variables, methods, if statements, loops and other similar concepts) before you get started, so you're ready for the more advanced concepts taught.\nBy the end of this course you will be able to...\nCreate games specifically designed for mobile devices using touch input controls.\nEnsure that your game will work well no matter what device size or resolution is being used.\nCreate push notifications to inform players about changes in status for the game (eg. their energy has recharged).\nImplement Unity's advertising system so that you can make money from displaying relevant ads in your game.\nUse Unity's profiler to identify what, if any, performance issues users will have in your game.\nPrepare your game and understand how to submit it to be published on the Apple App Store or Google Play Store.\nThis course is created with both Windows and Mac users in mind, meaning you can get full benefit whether you are a windows or mac user. We'll also walk you through deploying to both Android (Google) and iOS (Apple) by showing you how to set up your developer account and submit your game.\nAll students have access to the Q&A forums where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.",
      "target_audience": [
        "Anyone interested in mobile game development"
      ]
    },
    {
      "title": "Unreal Engine 5 C++: Advanced Action RPG",
      "url": "https://www.udemy.com/course/unreal-engine-5-advanced-action-rpg/",
      "bio": "Create advanced RPG combat experience in Unreal Engine 5 through Gameplay Ability System(GAS) using C++",
      "objectives": [
        "Powerful melee combo system with light and heavy attacks",
        "Make use of Gameplay Ability System to create engaging RPG combat experience",
        "Advanced enemy AI using custom BTTask, BTTDecorator, BTService",
        "Environment Query System for advanced AI behaviors",
        "Directional hit react and rolling",
        "Melee block and parry system",
        "Special weapon abilities and rage ability with cost and cooldown",
        "Robust UI notify system",
        "Survival combat game mode that spawns enemies in waves",
        "Main menu, pause menu, winning/losing screen plus a loading screen",
        "Performant target lock system",
        "Different types of enemy with melee and long-ranged abilities",
        "Custom C++ ability task/latent action for combat",
        "Best practices for using asynchronous and synchronous loading in BP and C++",
        "Data-oriented combat stats design",
        "Industry-standard code practices with easily extendable code structure"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Some Common Questions You May Have...",
          "Create a New C++ Project",
          "Set Up Test Map",
          "How to get help?",
          "Hard and Soft Reference"
        ],
        "Set Up Hero Character": [
          "Set Up Hero Character Section Overview",
          "Basic Class Structure",
          "Debug Helper",
          "Set Up Hero Camera",
          "Native Gameplay Tags",
          "Input Config Data Asset",
          "Custom Enhanced Input Component",
          "Binding Input",
          "Character Anim Instance",
          "Hero AnimBP",
          "Hero Anim Instance",
          "Gameplay Ability System",
          "Ability Activation Policy",
          "Set Up Weapon Class",
          "Set Up Hero Weapon",
          "Start Up Data",
          "Synchronous Loading",
          "Share Task: Share Your Progress",
          "Section Wrap Up"
        ],
        "Melee Combo System": [
          "Melee Combo System Section Overview",
          "Challenges Ahead",
          "Pawn Extension Component",
          "Register Spawned Weapon",
          "Hero Gameplay Ability",
          "Ability Input Action",
          "Hero Ability Set",
          "Binding Ability Input",
          "Play Montage and Wait",
          "Wait for Gameplay Event",
          "Animation Layer Interface",
          "Master Anim Layer",
          "Link Anim Layer",
          "Default Weapon Ability",
          "Grant Weapon Ability",
          "Handle Unequip Axe",
          "Light Attack Ability",
          "Combo Logic",
          "Heavy Attack Ability",
          "Heavy Attack Logic",
          "Warrior Function Library",
          "Jump To Finisher",
          "Slow Motion and Sound FX",
          "Share Task: Share Your Combo System",
          "Section Wrap Up"
        ],
        "Hero Combat": [
          "Hero Combat Section Overview",
          "Challenges Ahead",
          "Set Up Enemy Character",
          "Gruntling Guardian",
          "Asynchronous Loading",
          "Spawn Enemy Weapon",
          "Attribute Set",
          "Gameplay Effect",
          "Apply Gameplay Effect To Self",
          "Init Enemy Attributes",
          "Pawn Combat Interface",
          "Toggle Weapon Collision",
          "On Weapon Begin Overlap",
          "On Target Interacted",
          "Notify Melee Hit",
          "Set Up Attack Montages",
          "Make Gameplay Effect Spec Handle",
          "Hero Damage Info",
          "Apply Effect Spec Handle To Target",
          "Capture Relevant Attributes",
          "Retrieve Hero Damage Info",
          "Calculate Final Damage Done",
          "Set Up Heavy Attacks For Damage",
          "Modify Health Attribute",
          "Hit React Ability",
          "Trigger Hit React Ability",
          "Material Hit FX",
          "Hit Pause",
          "Camera Shake",
          "Hit React Sound",
          "Gameplay Cues",
          "Enemy Death Ability",
          "BP Death Interface",
          "Dissolve Material FX",
          "Dissolve Niagara FX",
          "Share Task: Share Your Progress",
          "Pawn UI Component",
          "Broadcast Value Change",
          "Listen For Broadcasting",
          "Enemy Init Created Widget",
          "Template Widgets",
          "Set Status Bar Fill Color",
          "Template Icon Slot Widget",
          "Hero Overlay Widget",
          "Enemy Health Widget Component",
          "Hide Enemy Health Bar",
          "Update Weapon Icon",
          "Final Tweaking",
          "Share Task: Share Your Combat",
          "Section Wrap Up"
        ],
        "Enemy AI": [
          "Enemy AI Section Overview",
          "Preparing Enemy For Combat",
          "Crowd Following Component",
          "AI Perception",
          "Generic Team ID",
          "Behavior Tree",
          "Configure AI Avoidance",
          "Behavior Tree Node Types",
          "Observer Aborts",
          "Orient To Target Actor",
          "Environment Query System",
          "Custom Query Context",
          "Toggle Strafing State",
          "Calculate Direction",
          "Strafing Blend Space",
          "Compute Success Chance",
          "Dot Product Test",
          "Enemy Melee Ability",
          "Activate Ability By Tag",
          "Is Target Pawn Hostile",
          "Notify Melee Hit",
          "Make Enemy Damage Effect Spec Handle",
          "Apply Enemy Damage",
          "Motion Warping",
          "Update Motion Warp Target",
          "Construct Native BT Task",
          "Rotate Enemy In Task",
          "Melee Attack Branch",
          "Does Actor Have Tag Decorator",
          "Duration Gameplay Effect",
          "Should Abort All Logic",
          "Guardian Attack Sound FX",
          "Share Task: Share Your AI",
          "Section Wrap Up"
        ],
        "Hero Combat Abilities": [
          "Hero Combat Abilities Section Overview",
          "Planning Ahead",
          "Two-Key Input Action",
          "Get Last Movement Input",
          "Rolling Distance",
          "Get Value At Level",
          "Rolling Sound FX",
          "Hero Hit React Ability",
          "Trigger Hero Hit React",
          "Hero Hit FX",
          "Compute Hit React Direction",
          "Hit React Tags",
          "Switch On Gameplay Tags",
          "Hit React Sound FX",
          "Hero Block Ability",
          "Add Gameplay Cue To Owner",
          "Is Valid Block",
          "Notify Successful Block",
          "Handle Successful Block",
          "Is Perfect Block",
          "Notify Perfect Block",
          "Initiate Counterattack",
          "Share Task: Share Your Block Ability",
          "Set Up Target Lock Ability",
          "Toggle Target Lock",
          "Get Available Targets",
          "Get Nearest Target",
          "Draw Target Lock Widget",
          "Set Target Lock Widget Position",
          "Execute Task On Tick",
          "On Target Lock Tick",
          "Orient To Target While Target Lock",
          "Switch To Target Lock Poses",
          "Target Lock Walk Speed",
          "Switch Target Input Action",
          "Target Lock Mapping Context",
          "Notify Switch Target",
          "Handle Switch Target",
          "Hero Death",
          "Tweaking Target Lock",
          "Share Task: Share Your Target Lock Ability",
          "Section Wrap Up"
        ],
        "Ranged Enemy": [
          "Ranged Enemy Section Overview",
          "Ranged Enemy Starting Weapon",
          "Glacer Starting Stats",
          "Glacer Hit React",
          "Ranged Behavior Tree",
          "Find Shooting Position",
          "Projectile Ability",
          "Projectile Class",
          "Spawning Projectile",
          "On Projectile Hit",
          "Handle Projectile Hit",
          "Projectile Spec Handle",
          "Make Projectile Spec Handle",
          "Projectile Sound FX",
          "Glacer Melee Ability",
          "Unblockable Attack",
          "Share Task: Share Your Ranged Enemy",
          "Combat Test Map",
          "Section Wrap Up"
        ],
        "Boss Enemy": [
          "Boss Enemy Section Overview",
          "Set Up Boss Character",
          "Giant Starting Stats",
          "Boss Bar Widget",
          "Draw Boss Bar To Screen",
          "Giant Hit React",
          "Giant Death",
          "Remove Boss Bar",
          "Giant Behavior Tree",
          "Giant Melee Ability",
          "Hand Collision Box",
          "Post Edit Change Property",
          "Toggle Box Collision",
          "Giant Second Melee Ability",
          "Giant Combo",
          "Wait Spawn Enemies",
          "Summon Ability",
          "Listen For Gameplay Event",
          "Async Load And Spawn Enemies",
          "Fix Facing Rotation",
          "Stop Spawning Enemies",
          "Enemy Entry FX",
          "Enemy Entry Montage",
          "Check Current Health Percent",
          "Share Task: Share Your Boss Fight",
          "Section Wrap Up"
        ],
        "Hero Special Abilities": [
          "Hero Special Abilities Section Overview",
          "Challenges Ahead",
          "Rage Ability Tags",
          "Rage Ability Blueprint",
          "Rage Anim Montage",
          "Rage Gameplay Cue",
          "Activation Condition",
          "Consume Rgae",
          "Set Up Rage Slash",
          "Spawn Rage Slash",
          "On Rage Slash Begin Overlap",
          "Rage Slash For All Attacks",
          "Gain Rage",
          "Special Weapon Ability Tags",
          "Grant Special Weapon Ability",
          "Light Ability Montage",
          "Light Ability Damage",
          "Cooldown Gameplay Effect",
          "Ability Icon Widget",
          "On Ability Icon Updated",
          "Listen For Ability Icon Change",
          "Notify Ability Cooldown",
          "Custom Latent Action",
          "Count Down Action Class",
          "Construct Count Down Action",
          "Count Down Logic",
          "Update Cooldown",
          "Resume Cooldown",
          "Share Task: Share Your Ability Cooldown",
          "Heavy Ability",
          "Heavy Ability Montage",
          "Heavy Ability Damage",
          "Apply AOE Damage",
          "Commit Ability Cooldown",
          "Stone Class",
          "BP Stone",
          "Pick Up Ability",
          "On Stone Begin Overlap",
          "Collect Stones",
          "Consume Stone Input",
          "Consume Stones",
          "On Stone Consumed",
          "Input Key Widget",
          "Broadcast Display Input Key",
          "Listen For Display Input Key",
          "Spawn Stone Ability",
          "Spawn Stone Logic",
          "Glacer Spawn Stone Chance",
          "Share Task: Share Your Progress",
          "Section Wrap Up"
        ],
        "Survival Game Mode": [
          "Survival Game Mode Section Overview",
          "Game Mode Test Map",
          "Survival Game Mode Class",
          "Enemy Wave Spawner Table Row",
          "Wave Progression Logic",
          "Wave Count Down Widget",
          "Drawing Wave Count Down Widget",
          "Wave Info Widget",
          "Pre Load Next Wave Enemies",
          "Try Spawn Wave Enemies",
          "On Enemy Destoryed",
          "On Wave Completed",
          "Playtesting Game Mode",
          "Register Spawned Enemies",
          "Notify Last Wave",
          "On Player Died",
          "Game Difficulty",
          "Verify Game Difficulty",
          "Share Task: Share Your Survival Game Mode",
          "Section Wrap Up"
        ]
      },
      "requirements": [
        "Some basic C++ experience with Unreal is required"
      ],
      "description": "Welcome to \"Unreal Engine 5 C++: Advanced Action RPG\"! The most comprehensive RPG course you'll ever find online. In this course, we'll employ industry-standard coding practices and data-oriented design to create AAA RPG combat experiences.\n\n\nYou'll learn how to use Gameplay Ability System to create a complex RPG combat experience and implement exciting features like a combo system with light and heavy attacks, directional rolling, hit reactions, blocking, parrying, target locking, special abilities with cooldowns, AI avoidance, advanced enemy AI with strafing and projectile attacks, an epic boss fight, and much more.\n\n\nIn the first section, we’ll set up our hero character for the gameplay ability system and proceed with input binding using native gameplay tags and data assets. Once our character can navigate the level, we’ll combine GAS with linked animation layers to create a melee combo system featuring light and heavy attacks. With these elements in place, we’ll introduce enemy characters, adding attributes, combat feedback, character death, and a robust UI notification system. You’ll also learn to use asynchronous loading for startup data and create a custom function library for handling damage.\n\n\nNext, we’ll implement AI avoidance and strafing using a blend of Blueprint and C++ behavior tree nodes to craft advanced AI behaviors. We’ll incorporate the crowd following component for detour crowd avoidance and explore behavior tree node types and the environment query system to determine strafing locations.\n\n\nWith our enemies capable of dealing damage, we’ll refine our hero’s combat abilities by adding directional rolling, directional hit reactions, blocking, parrying, and target locking. You’ll learn to use motion warping for dynamic rolling distances and handle most of the heavy lifting in C++ for the target lock ability.\n\n\nFollowing this, we’ll introduce a ranged enemy that shoots projectiles and retreats when approached. We’ll then add a boss character complete with a boss bar, powerful melee attacks, and the ability to summon other enemies. Once our combat system is fully functional, we’ll develop a survival game mode with enemy waves. We’ll create multiple widgets, including a win screen, lose screen, pause menu, and main menu. Finally, we’ll port everything to a real map for epic battles against our enemies.\n\n\nThis comprehensive RPG course is unmatched online. With detailed code changes provided in each lecture and a step-by-step approach, there’s no better time to create your dream RPG project. What are you waiting for? Join the course and start your RPG adventure today!",
      "target_audience": [
        "Learners who want to build an action RPG project",
        "Learners who want to level up their C++ skills",
        "Learners who want to write clean, professional and extendable code"
      ]
    },
    {
      "title": "Modding By Kaupenjoe: Forge Modding for Minecraft 1.18.1",
      "url": "https://www.udemy.com/course/minecraft-modding-forge-118/",
      "bio": "Learn Minecraft Modding with Forge and Java. Beginner Friendly Introduction to Java and Minecraft Modding with Forge!",
      "objectives": [
        "Learn to independently program in Java",
        "Learn the Basic Java Skills necessary to make a Minecraft Mod!",
        "The Basics of Minecraft Modding in Forge",
        "Everything from making your first Item to creating Tools and custom Armor"
      ],
      "course_content": {
        "Java Introduction": [
          "Installation & Download",
          "Java Datatypes",
          "Java Syntax",
          "Output & Input",
          "Errors & How not to panic when you get them!",
          "Integers & Arithmetic & Math Methods",
          "Assignment Operators",
          "Booleans & Comparison Operators",
          "Booleans & Logical Operators",
          "If and Else Statements",
          "Switch Statement",
          "Trivia Game",
          "Strings and String Methods",
          "Casting",
          "Ternary Operator",
          "Java Arrays",
          "Loops",
          "Java Methods",
          "Trivia Game with Methods",
          "Java Collections",
          "Object Oriented Programming Explained",
          "Java Classes and Objects",
          "Access Modifiers",
          "Inheritance & Polymorphism",
          "Interfaces & Abstract Classes",
          "Trivia Game with Classes",
          "Bank Management System",
          "Anonymous Classes",
          "Enums & Advanced Enums",
          "Exceptions",
          "Lambda Expressions",
          "Generics"
        ],
        "Basic Minecraft Modding Concepts": [
          "Installation & Setup & GitHub",
          "How to use the Q&A",
          "Using Parchment Mappings",
          "Create a Custom Item",
          "Create a Custom Block",
          "Custom Items & Blocks",
          "Custom Creative Tab",
          "New Recipes",
          "Block Drops with Loot Tables",
          "Custom Recipes & Loot Tables",
          "Advanced Item",
          "Advanced Block",
          "Custom Fuel",
          "Custom Food Item",
          "Custom Tooltips",
          "All about Tags",
          "Custom Stairs & Slabs",
          "Custom Buttons & Pressure Plates",
          "Custom Fences & Fence Gates & Walls",
          "Custom Doors & Trapdoors"
        ],
        "All about Tools & Armor": [
          "Creating a new Tool Set",
          "Making a Multi-Tool (Paxel)",
          "Weapons that apply effects",
          "Creating a new Armor Set",
          "Full Armor Effect",
          "Custom Horse Armor",
          "Custom Enchantment"
        ],
        "Intermediate Minecraft Modding Concepts": [
          "BlockState Properties",
          "How does NBT Data work?",
          "Item Properties",
          "Custom BlockStates Properties & NBTData",
          "Custom Crops",
          "Add Items to the Composter",
          "Custom Flower",
          "Custom Flower Pots",
          "Custom Sounds",
          "Custom Sounds for Blocks",
          "Custom Music Discs",
          "Custom Block Models in Minecraft with BlockBench",
          "Custom Item Models with BlockBench",
          "Custom Bows",
          "Custom Commands",
          "Spawning Particles",
          "Custom Advancements",
          "Custom Paintings",
          "Global Loot Modifiers",
          "Custom Fluids",
          "Events Basics",
          "Updating Forge and Parchment Mappings"
        ],
        "Advanced Minecraft Modding Concepts": [
          "Custom Block Entity",
          "Creating custom Recipe Types",
          "Custom Wood",
          "Custom Sign"
        ],
        "World Generation": [
          "Creating a Custom Tree",
          "Custom Tree Generation",
          "Custom Flower Generation",
          "Custom Ore Generation"
        ],
        "Finishing your Mod": [
          "Exporting your Mod"
        ],
        "Additional Topics (1.18.1)": [
          "Updating Forge (1.18.1)",
          "Adding XP Drops to Blocks",
          "Adding a Custom Menu Screen",
          "Adding Basic Custom Configs",
          "Adding Transparent Blocks",
          "Adding Animated Items",
          "Adding Custom Effects",
          "Adding Custom Potions (+ Potion Recipes)",
          "Adding Custom Entities with Geckolib",
          "Adding Entity Animations with Geckolib and Blockbench",
          "Adding Entity Variants",
          "Tameable Entities",
          "Rideable Entities",
          "Adding a Custom Boat",
          "Entity World Generation",
          "Adding Custom Trades to Villagers"
        ],
        "Additional Topics for 1.18.2": [
          "Updating Forge to 1.18.2",
          "Custom Structures (Working through Tutorial)",
          "Custom Structures (Single Piece)",
          "Custom Structures (Jigsaw Structures)",
          "Custom 3D Armor Models",
          "Custom Villagers",
          "Baby Entities"
        ],
        "1.18.2 More Additional topics": [
          "Custom Geodes",
          "Block that interacts with Redstone",
          "Custom Block Entity Renderer",
          "Loot Chests in custom Structures",
          "Fixing some Mistakes",
          "1.18.2 UPDATE TO 1.19"
        ]
      },
      "requirements": [
        "A Computer",
        "Some knowledge of Minecraft and its Modding Community",
        "Basic Computer skills (like downloading a program of the web)",
        "No programming experience needed!"
      ],
      "description": "Minecraft! It is the most popular game of all time and Minecraft Modding is back in everyone's mouth! Some Minecraft Mods have become so popular that everyone knows them. The Minecraft Modding Community keeps growing every day and it's a great and creative outlet!\nThis course will teach you how to make your own Minecraft Mod! Not only will you learn the programming language Java but also how to effectively use the Minecraft Modding API Forge.\nFor absolutely beginners, I have added a Java Introduction for you, so even with no experience in programming you can start making Minecraft Mods by first going through the Java Introduction!\nIn the Basics Concepts part of the course, you will learn how to add Items, Blocks, custom recipes, tool to Minecraft! The Intermediate Concepts is where you'll really pick up some amazing skill needed for proper Minecraft Modding with Forge! We're gonna talk about BlockStates and NBT Data, add custom crops and see how you can add custom block models to Minecraft!\nBut that's not all! Toward the end of the course, we cover advanced topics such as Block Entities, Custom Recipe Types and even Ore Generation amongst others.\nWith a bit of creativity and applying the lessons you get from this course, you might just make the next Minecraft Mod hit!\nThis course is accessible to complete beginners. Even if you have never programmed in your life! The only requirement is that you own Minecraft and are vaguely familiar with the Game and some popular Minecraft Mods or even Minecraft Modpacks.\nExercise files and the entire Source Code will be available so you can follow along with everything I do in the videos.\nIf you have any questions or suggestions, also feel free to contact me here. I'm happy to help you learn to code in Java and make your own Minecraft Mod with Forge.\nNOTICE: NOT AN OFFICIAL MINECRAFT PRODUCT. NOT APPROVED BY OR ASSOCIATED WITH MOJANG.",
      "target_audience": [
        "Complete Beginners wishing to learn Java!",
        "Beginners that want to create their first Minecraft Mod and don't know where to start",
        "Forge Veterans wanting to update their Minecraft Mod to 1.18.1"
      ]
    },
    {
      "title": "Visual Effects for Games in Unity - Stylized Explosion",
      "url": "https://www.udemy.com/course/visual-effects-for-games-in-unity-stylized-explosion/",
      "bio": "Learn how to create an epic Explosion in Unity!",
      "objectives": [
        "Learn how to create a Stylized Explosion.",
        "Learn Shader Graph for stylized effects.",
        "Learn Visual Effects for Games.",
        "Learn Unity Particle System.",
        "Learn how to create textures by hand and with Material Maker."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Project & Particle System Overview": [
          "Download the Project",
          "Project Overview",
          "Particle System Overview"
        ],
        "Stylized Explosion": [
          "Explosion Studies",
          "So what's the ... ?",
          "Starting the Explosion",
          "Explosion Mesh",
          "Why is the ... ?",
          "Erosion Shader Part 1 - Erosion",
          "Why are we ... ?",
          "Erosion Shader Part 2 - Voronoi and Dissolve",
          "Erosion Shader Part 3 - Vertex Animation",
          "Rest of the Explosion Body",
          "Are you enjoying this course? I would love to have your feedback.",
          "Particles Impact",
          "Simple Particle Shader",
          "Why did we ... ?",
          "Particles Floating",
          "Ring of Smoke - Mesh",
          "Ring of Smoke - Particle System",
          "Ring of Smoke - Texture",
          "Try to create another seamless texture for the Ring of Smoke!",
          "Erosion Texture Shader",
          "Smoke Rings",
          "Would love to have your review, in case you haven't already. Thank you!",
          "Orange Rings",
          "Impact Flipbook Part 1 - Frame 3",
          "Impact Flipbook Part 2 - Frame 1 and 2",
          "Impact Flipbook Part 3 - Last Frame and Export",
          "Impact Flipbook Particle System",
          "How did we ... ?",
          "Material Maker Overview",
          "How does ... ?",
          "Ground Crack Part 1 - Voronoi Nodes",
          "Ground Crack Part 2 - Noise Nodes",
          "Ground Crack Part 3 - Glow and Export",
          "How did we ... ?",
          "Ground Crack Particle System",
          "Parallax Occlusion Shader",
          "Why did we ... ?",
          "Ground Impact Texture",
          "Ground Impact Particle System",
          "Ground Impact Variations",
          "Let's see the Ground Impact variations you came up with!",
          "Floating Particles on Ground Crack",
          "Smoke Trail Mesh",
          "Let's create a Smoke Trail texture!",
          "Erosion Texture Shader - Mask",
          "How did we ... ?",
          "Erosion Texture Shader - Distortion",
          "Smoke Trails Improvements",
          "Smoke Trails Placements",
          "Orange Floating Rings",
          "Particles with Smoke Trail",
          "What did we ... ?",
          "Arched Projectile",
          "Do you ... ?",
          "Color Variations"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Unity: Basic to Intermediate",
        "Krita or Photoshop: Basic",
        "Material Maker: Basic",
        "Blender: Basic",
        "Graphic Tablet Helps",
        "Unity 2022.1 Preferably"
      ],
      "description": "Get ready to create Stylized Explosions in Unity with the Particle System!\nWhat a great adventure this is, being able to create cool explosions for games! Not only explosions, you will dive into the creation of stylized special effects for games! With this techniques you can create so many cool effects!\nWe will have quick overview of the Particle System by creating some sparks. Then we move on to the epic process of creating a Stylized Explosion area of effect.\n\n\nWith this course you will also learn:\n1) How to create simple and advanced Shader Graphs like Pan, Masks, Distortions, Erosions, Parallax Occlusion and more;\n2) Create original Textures from scratch and 3D Meshes;\n3) How to use Material Maker to create unique procedural node-based textures;\n4) How to create hand-painted Flipbook animations;\n5) VFX techniques that work in VR;\n6) Create Stylized Smoke;\n7) And more.\n\n\nWe will have a look at the workflow of Shader Graph and see how to combine with the Particle System to create fantastic Real-Time visual effects for games!\nWhat are you waiting for? You can learn Stylized VFX for games right now! It will take you from a Beginner standpoint to an Intermediate level in Unity Visual Effects. Plus you will watch some cool tips & tricks and get familiar with the Unity Particle System, a tool used in all the games made with Unity!\n\n\nCourse made with Unity URP in 2021.2.11. Compatible with 2020, 2021, 2022 and HDRP.\nA great addition to your portfolio or a great start! Join now!",
      "target_audience": [
        "Game Developers",
        "Unity Beginners or Veterans",
        "Unreal Beginners or Veterans",
        "VFX Beginner",
        "Programmers",
        "Illustrators",
        "3D Generalists",
        "Digital Artists in General"
      ]
    },
    {
      "title": "Unity 2D RPG: Complete Combat System",
      "url": "https://www.udemy.com/course/unity-2d-rpg/",
      "bio": "Code your own top-down RPG game combat system in Unity using C#",
      "objectives": [
        "Learn to manage a bigger project from start to finish learning beginner to more intermediate techniques",
        "Create the foundation of a 2D top-down RPG game",
        "Beginner to Intermediate C# fundamentals",
        "Create a 2D top-down movement, combining C# and animator components",
        "Build a combat system with multiple weapons",
        "Learn tilemap, rule tiles, animated tiles, and scene workflow."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Set Up Unity & VS Code",
          "VS Code Issues?",
          "Project Setup",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Player Movement": [
          "Section Intro - Player Movement",
          "Player Input System",
          "Import Player Sprites",
          "Animating The Player",
          "Player Physics"
        ],
        "Combat": [
          "Section Intro - Combat",
          "Enemy State",
          "Sword Animation",
          "Swing Both Directions",
          "Sword Visual Feedback",
          "Sword Collision",
          "Enemy Health",
          "Knockback",
          "Damage Flash",
          "Death VFX",
          "Constant Swinging",
          "Player Dash",
          "Section Cleanup"
        ],
        "Environment": [
          "Section Intro - Environment",
          "Cinemachine",
          "Tilemap",
          "Rule Tiles",
          "Animated Tiles",
          "Sprite Transparency",
          "Parallax",
          "Destructible Objects"
        ],
        "Portals And Scene Transitions": [
          "Section Intro - Portals & Scene Transitions",
          "Second Scene",
          "Generic Singleton Class",
          "Scene Entry",
          "Camera Controller",
          "Fade Transition",
          "Portal Visual Effect"
        ],
        "URP & Lighting": [
          "Section Intro - URP & Lighting",
          "Post Processing Basics",
          "2D Lighting",
          "Random Idle Animations",
          "Bloom",
          "Finishing Touches"
        ],
        "Inventory & Weapons": [
          "Section Intro - Inventory & Weapons",
          "UI Setup",
          "Toggle Active Slot",
          "IWeapon Interface",
          "Scriptable Objects",
          "Instantiating Weapons Part 1",
          "Instantiating Weapons Part 2",
          "Bow & Staff Visuals",
          "Weapon Cooldown Prep",
          "Bow & Arrow",
          "Arrow Projectile",
          "Magic Staff",
          "Magic Laser",
          "Inventory Section Cleanup"
        ],
        "Bullet Hell": [
          "Section Intro - Bullet Hell",
          "Player Health & Knockback",
          "Enemies Galore",
          "Bullet",
          "IEnemy Interface & State Control",
          "Shooter Bursts",
          "Cone Of Influence",
          "Oscillate & Stagger",
          "OnValidate & Editor Tooltips",
          "Grape Setup",
          "Animation Curves",
          "Grape Splatter",
          "Screen Shake"
        ],
        "Polish": [
          "Section Intro - Polish",
          "Pickups",
          "Spawn Pop-up",
          "Health & Stamina Globes",
          "Player UI",
          "Health Slider",
          "# Economy Manager",
          "Stamina",
          "Custom Cursor",
          "Town Scene",
          "Player Death",
          "Polish Section Cleanup",
          "Uploading Your Game",
          "Congratulations & Farewell"
        ],
        "Continuing Your GameDev Journey": [
          "BONUS Lecture"
        ]
      },
      "requirements": [
        "It would help if you're familiar with the Unity Editor and have beginner-level understanding of C#"
      ],
      "description": "Create your own classic 2D top-down RPG game using Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nRole Playing Games can be complex to create, with many interacting gameplay systems. We make it easy for you, with this online course that teaches you step-by-step how to make the foundations of any good RPG - from scratch.\nIn this course you’ll create the foundation of a 2D top-down RPG game, giving your players a fun combat moment in a well crafted level, based upon a solid game design, built using a robust code architecture.\nIn this “beginner +” course you’ll learn to manage a bigger project from start to finish, learning beginner to more intermediate techniques and C# fundamentals.\nSo if you’re…\nReady to break out from beginner tutorials and build something you can call your own?\nFamiliar with the basics of Unity and looking to take the next steps?\nLooking to build a solid foundation of C# fundamentals with Unity?\nThis is the course for you!\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAnd you’ll get access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nBuilding an RPG is an amazing way to level-up your game development skills, so grab your magic staff and start improving your game development right now!",
      "target_audience": [
        "Want to break out from beginner tutorials and build something you can call your own?",
        "Familiar with the basics of Unity and looking to take the next steps?",
        "Looking to build a solid foundation of C# fundamentals with Unity?",
        "Or simply want to build a classic 2D top-down RPG?",
        "This is the course for you :)"
      ]
    },
    {
      "title": "Unreal Engine 5 for Beginners (2024) - The Complete Course",
      "url": "https://www.udemy.com/course/ue5-beginner/",
      "bio": "Learn the fundamentals in Unreal Engine for Beginners by creating a realistic game-ready environment.",
      "objectives": [
        "Get confident with Unreal Engine 5 and how to navigate around its functionality.",
        "Learn how to apply and adjust textures & materials within the engine.",
        "Learn Unreal Engine 5 by creating a realistic game-ready environment using Quixel Megascans.",
        "You'll learn how to professionally light your level and add audio for a fully immersive experience.",
        "Learn how to use Unreal Engine 5 Blueprints to add a character & movement without writing a single line of code."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Downloading Unreal Engine 5",
          "Creating the Project"
        ],
        "Unreal Engine 5 Overview": [
          "Viewport & Navigation",
          "The Toolbar",
          "The Details Panel",
          "The World Outliner",
          "The Content Browser"
        ],
        "Initial Project Setup": [
          "Creating a New Level",
          "Post Process Volume",
          "Camera Exposure"
        ],
        "Quixel Megascans": [
          "Introduction to Quixel Megascans",
          "Quixel Bridge Overview",
          "Finding Our Assets",
          "Quality vs. Performance",
          "Introduction to Nanite Geometry",
          "Importing Assets"
        ],
        "Materials & Textures": [
          "What is a Texture?",
          "Texture Properties",
          "What is a Material?",
          "The Material Graph",
          "Material Instances",
          "Adjusting the Texture Size"
        ],
        "Level Design": [
          "Importing the Ground Mesh",
          "Adding the Sidewalks",
          "Creating a Blend Material",
          "Blend Material Properties",
          "Mesh Painting Tool",
          "Adjusting the Ground Tiling",
          "Adjusting the Ground Textures",
          "Painting the Ground",
          "Street Lines Decals",
          "Adding the Barricades",
          "Adding the Props",
          "Creating the Landscape",
          "Preparing the Foliage",
          "Adding Foliage",
          "Adding Rocks",
          "Adding Puddles",
          "Adding Blood Decals",
          "Finalizing the Environment"
        ],
        "Lighting (Lumen)": [
          "Light Types",
          "Adding the Lights",
          "Adding the Sky",
          "Adding the Fog",
          "Lightmass Importance Volume",
          "Introduction to Lumen",
          "Adjusting the Lighting",
          "Enabling God Rays",
          "Adjusting the Post Process Volume",
          "Static vs. Stationary vs. Movable"
        ],
        "Game Optimization": [
          "Foliage Optimization",
          "Level of Detail",
          "Texture Size",
          "Optimization Viewmodes",
          "Lightmap Density",
          "Fixing the Wrapping UVs",
          "Limiting the FPS Usage"
        ],
        "Audio": [
          "Importing Sound Assets",
          "Creating Sound Cues",
          "Adding Sound to the Environment"
        ],
        "Presentation": [
          "Adding a Camera",
          "Adjusting the Camera Settings",
          "Taking a Screenshot",
          "Making the Camera Work on Play"
        ]
      },
      "requirements": [
        "A computer capable of running Unreal Engine 5",
        "Interested in making games using Unreal Engine 5"
      ],
      "description": "Unreal Engine for Beginners - Start Your Journey\nUnreal Engine for Beginners is a complete course that teaches how to use Unreal Engine 5 (UE5) while developing games. You will learn UE5 in a fun, hands-on way by designing a realistic and game-ready environment, that utilizes the latest features of the engine.\nTop AAA game studios use UE5 as their main game development software. For instance, games like Fortnite, The Witcher, and Kingdom Hearts 4 are some of the popular games developed using this engine. Therefore, UE5 is an excellent choice for those who want to earn money and work from home as an independent game developer. In fact, I have been a full-time UE5 game developer for a couple of years, creating games, designing courses, and selling game assets through the Unreal Engine marketplace.\nStart making money today by learning UE5 game development through Unreal Engine for Beginners!\nUp-to-date Unreal Engine course by an experienced developer\nMany game development courses available on YouTube and other websites. However, most are created by inexperienced developers who teach poor development practices. Having gone through various Unreal Engine tutorials and courses myself, much of the information provided is disorganized, incorrect, or lacks detail.\nTo address this issue, I have created Unreal Engine for Beginners. The course covers topics in-depth while maintaining quality and emphasizes good game development practices.\nThis course is updated monthly and covers the most recent features of Unreal Engine 5, such as Quixel Megascans, Nanite, and Lumen.\nWhat makes me qualified to teach you?\nI am an experienced game developer with nine years of experience. To summarize my work without boring you:\nI have released a Steam game I directed from start to finish with a team of 8.\nI have created 11 game development courses with 40,000+ students and an average rating of 4.8+ out of 5 stars.\nI am currently solo-developing Farmtale 2 from start to finish.\nI also work as a freelancer on various game projects, specializing in programming, lighting, game optimization, and more.\nI am deeply passionate about game development and have made it my full-time job. I would love to teach you everything about Unreal Engine 5 with good game development practices and keep you updated with the latest information.\nIf you want to learn how to publish a game on Steam, check out the course I have released on the topic.\nYou don't need to look for other courses. I promise.\nUnreal Engine for Beginners is a comprehensive course that teaches you how to use Unreal Engine 5 from scratch. The course starts with a blank project and guides you step-by-step through the process of creating an amazing game-ready environment. You won't need to take any other courses or tutorials on Unreal Engine because this course covers all the essential information and tips I have gathered over the years.\nBy completing Unreal Engine for Beginners, you will have everything you need to start earning money as an independent game developer working from home. Some of the key concepts that the course covers are:\nUnreal Engine 5 project setup and navigation\nUnreal Engine Interface\nQuixel Megascans\nGame-ready level creation and level design using Unreal Engine nanite\nLighting using Unreal Engine lumen\nGame Optimization for maximum FPS\nVisual effects and sound effects\nUnreal Engine blueprint, which is the powerful unreal engine scripting language\nProject presentation\nThe main goal of this course is to equip you with enough confidence and skills to build a game. By the end of the course, you will learn how to make a video game from scratch. Even though the course focuses on how to use Unreal Engine 5 for beginners, it also provides valuable tips and tricks for advanced Unreal Engine 5 developers.\nThe primary objective of Unreal Engine for Beginners is to provide you with adequate knowledge and confidence to build a game. Upon completing the course, you will learn how to make a video game from scratch. While the main focus of the course is how to use Unreal Engine 5 for beginners, it also offers valuable tips and tricks for advanced Unreal Engine 5 developers.\nLearning game development doesn't have to be boring.\nThe design of Unreal Engine for Beginners is to guide you through the process of creating your very own realistic game environment from scratch in a fun and engaging way while teaching you how to use Unreal Engine 5. Whether you're a game developer, artist, or game designer, you don't need any prior experience to take this course. The easy-to-follow videos will provide the necessary workflow and techniques to help you create your game projects.\nBy the end of the course, you will be able to confidently navigate Unreal Engine 5 and create your own custom projects. You will see how easy it is to get started and how quickly you can build a game. With years of experience in Unreal Engine game development and teaching, I will show you the best practices of Unreal Engine 5.\nGame Ready Optimization\nMany game development courses teach poor practices, resulting in low frame rates and poor game performance. However, more than a visually appealing game is required; it must also perform well. Therefore, Unreal Engine for Beginners will guide you through optimizing your game from start to finish. You will learn to utilize various optimization tools for high frame rates and game-ready performance.\nHow to continue when completing Unreal Engine for Beginners\nUnreal Engine for Beginners provides the necessary skills and knowledge to advance towards more challenging topics. Creating 2D games within this game development software is surprisingly easy and convenient. If you wish to learn how to make a 2D game using Unreal Engine's 2D features, you can enroll in my exciting course on how to make a clicker game. Suppose you're interested in Unreal Engine multiplayer. In that case, you can take up the multiplayer shooter course or another Unreal Engine 2D course that teaches how to make a 2D platformer in multiplayer. All of the courses available in my profile!\nJoin our supportive community.\nUnreal Engine game development can be a frustrating experience at times. For example, you might need to look for an unchecked box somewhere, leaving you feeling lost for hours. Alternatively, you might require moral support and ideas from fellow game developers like yourself. That's why we offer live support 24/7 in the Q/A section or our community Discord server. You can also join us to chat casually about game development in general or share your work with others. We are always here to help you whenever you need it.\nLet's begin with Unreal Engine for Beginners without any delay. I am eager to see you in the first lesson. So, let's start, and cheers to an exciting learning journey!",
      "target_audience": [
        "Complete beginners with no prior experience",
        "Game programmers who want to get into level design",
        "Experienced game developers who want to brush up their skills"
      ]
    },
    {
      "title": "The Ultimate Guide to Video Game Optimisation",
      "url": "https://www.udemy.com/course/video-game-optimisation/",
      "bio": "Learn to Squeeze Every Frame of Performance out of Your Unity Game Development Projects (Unity 6 Compatible)",
      "objectives": [
        "How to create a performance budget for a game and stick to it.",
        "How to optimise Unity API calls to use up less memory and CPU time.",
        "How to optimise art and sound assets to speed up their processing at runtime.",
        "How to tweak the Unity physics system to accelerate performance."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Join the H3D Student Community",
          "Contacting H3D",
          "FAQs",
          "Updating to Unity 6"
        ],
        "What is Optimisation": [
          "The Deep End",
          "What do you think optimisation is?",
          "What is Optimisation?",
          "What is a Frame?",
          "The Performance Budget"
        ],
        "Profiling Tools": [
          "Introducing The Unity Profiler",
          "Profiler Markers",
          "GPU Performance Profile"
        ],
        "Optimising Script": [
          "How to Get a Component",
          "Experimenting with Method Performance Assignment",
          "Caching instead of Dynamic Finds",
          "Cache Optimising Challenge",
          "Update Script Experimentation",
          "Using Coroutines for AI Behaviour",
          "Taking Out the Garbage",
          "Making Garbage",
          "Null Testing",
          "Avoiding Strings as IDs",
          "Strings With Animators and Shaders",
          "Is a String Better than a Shader Property ID?",
          "Tag or CompareTag"
        ],
        "Design Patterns and Scripting Strategies": [
          "Singletons and Statics Part 1",
          "Singletons and Statics Part 2",
          "Use Appropriate Data Structures Part 1",
          "Use Appropriate Data Structures Part 2",
          "Object Pooling",
          "Object Pool Challenge",
          "Structs Versus Classes Part 1",
          "Structs Versus Classes Part 2",
          "Disabling Scripts by Visibility and Distance"
        ],
        "Rendering Optimisation": [
          "The Frame Debugger",
          "The Rendering Pipeline",
          "Unity's Render Pipelines",
          "Drawcalls",
          "Improving Drawcalls Through Batching",
          "Texture Atlases",
          "Combining Meshes",
          "Dynamic, Static, Combined or Separate?",
          "Sprite Atlases",
          "Texels & Mip Maps",
          "Level of Detail",
          "LOD Performance Testing",
          "User Interface Optimisation Tricks"
        ],
        "Other Optimisation Opportunities": [
          "The Power of Two",
          "Loading Audio Files",
          "Audio File Tips for Performance"
        ],
        "Physics Optimisation": [
          "Collider Types",
          "Ragdolls",
          "Other Physics Optimisations"
        ],
        "Final Words": [
          "A Final Word from Penny",
          "Where to now?"
        ]
      },
      "requirements": [
        "Students should be familiar with the Unity game engine.",
        "Students should be confident with the use of C# for interacting with the Unity game engine."
      ],
      "description": "What do you think optimisation of a game project is? Do you think it's writing really efficient code or getting your game to run as fast as possible? Is it a task you do days before release or from the very start?  Not sure where to start? Well, this course is for you.\nDesigned for INTERMEDIATE level Unity and C# students, the content within will forge you into an optimization expert. Without even thinking, you'll be pulling up the Unity profiler and investigating CPU and GPU bottlenecks like a pro. You'll find hints and tips on improving the performance of your game starting with the script and moving onto art assets and finally physics. There are plenty of hands-on exercises designed to give you skills in forensic debugging that will be valuable to you far into the future.\nThis course uses Unity 2020.2 or 2020.3 but is also compatible with Unity 6.\nYou will learn about:\nPerformance Budgets\nThe Unity Profiler\nC# Optimisation Tricks for the Unity API\nArt asset optimisation settings\nAudio file usage and settings\nTips and tricks for getting more from the Unity Physics system\nWhat people are saying about Penny's courses:\nA great and engaging course that teaches you a lot about the Unity Profiler which is key to optimising the games. It is a valuable skill that people look for. It's in a tutorial format which is my preferred method of learning.\nAllow me to say how hugely important this is for a person who is interested in certain types of game design. Creating games where you can create AI behaviors that support emergent situations.\nI honestly love Holistic's teaching approach and I've never learned so much within a few hours about coding effectively with such detailed explanations!\nThis course focuses on developing student skills in identifying and solving performance issues in their game development projects.  By the end, they will find the use of the Unity Profiler second nature and be able to identify many CPU and GPU bottlenecks in their's and other's Unity projects.",
      "target_audience": [
        "Intermediate game development students or game professionals wanting to get the best performance from their Unity projects."
      ]
    },
    {
      "title": "Unreal Engine - VFX for Games - Beginner to Intermediate",
      "url": "https://www.udemy.com/course/ue4-vfx-for-games-beginner-to-intermediate/",
      "bio": "Build your portfolio of AAA Visual Effects for Games in Unreal Engine with this game dev course.",
      "objectives": [
        "Create effects for games in Unreal Engine with Niagara.",
        "Fundamental concepts about Visual Effects.",
        "Creating Textures, Meshes and Shaders for Game VFX.",
        "Special skills for Game Developers."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "VFX Fundamentals": [
          "First, let's enable 1080p!",
          "Type of Effects",
          "Recap of the Type of Effects",
          "Principles of VFX | 1 - Gameplay",
          "Principles of VFX | 2 - Timing",
          "Principles of VFX | 3 - Shape",
          "Principles of VFX | 4 - Contrast",
          "Principles of VFX | 5 - Color",
          "Recap of the Principles of VFX"
        ],
        "Pre-Production": [
          "Pre-Production Overview",
          "Recap of the Pre-Production"
        ],
        "Setting Up UE4 - Your Workspace": [
          "Download & Install Unreal Engine 4",
          "Creating Your VFX Project",
          "Quick Unreal Engine 4 Overview",
          "Cascade VS Niagara",
          "Activating Niagara",
          "Recap of Cascade vs Niagara"
        ],
        "Sparks - Getting Familiar With Niagara": [
          "Niagara Overview",
          "Niagara Emitter",
          "Niagara System",
          "Recap of the Niagara basics",
          "Your First Texture",
          "Create another Beam texture",
          "Additive Material",
          "Sparks Impact and Improvements",
          "Gravity and Collisions",
          "Sparks Loop and Niagara Simple Tricks",
          "Recap of the Sparks chapter"
        ],
        "Area of Effect Attack": [
          "References",
          "Sketching",
          "AoE Project - Importing and Overview",
          "Starting the AoE Attack",
          "Creating a Cylinder Mesh",
          "Creating a Fire Texture",
          "Create another Texture for the Cylinder",
          "Starting the Anticipation",
          "Starting the Climax",
          "Fire Impact Texture",
          "Create another Impact Texture",
          "Distortion and Dissolve Material",
          "Adding Color",
          "Area of Effect Blueprint",
          "Easy Scale Control",
          "Easy Color Control",
          "Shockwaves",
          "Ground Crack",
          "Create a different Crack Texture",
          "Alpha Blended Material",
          "Adding a Spiral",
          "Final Touches"
        ],
        "Projectiles / Spells": [
          "References",
          "Sketching",
          "Starting the Projectile, Muzzle and Impact",
          "Projectile Mesh",
          "Projectile Trail",
          "Projectile Texture",
          "Trail Texture",
          "Particles",
          "Easy Color and Scale",
          "Impact",
          "Muzzle",
          "Electric Version Part 1 - Lightning Flipbook",
          "Electric Version Part 2 - Trail Texture",
          "Electric Version Part 3 - Projectile Texture",
          "Electric Version Part 4 - Projectile Mesh",
          "Electric Version Part 5 - Projectile Capsule Setup",
          "Electric Version Part 6- Projectile Trail Setup",
          "Electric Version Part 7 - Final Touches",
          "Electric Version Part 8 - Impact",
          "Electric Version Part 9 - Muzzle & Final Touches"
        ],
        "Conclusion": [
          "A Few Last Words"
        ]
      },
      "requirements": [
        "Unreal Engine: Basic",
        "Photoshop: Basic",
        "Blender: Basic",
        "Graphic Tablet Helps"
      ],
      "description": "This course is all about the creation of VFX or, also know as Realtime FX for Games, with Niagara in Unreal Engine.\n\nYou'll learn the process and workflow of creating Magic Spells, Fireballs, Special Skills and more for games. It will guide you from a Beginner standpoint to an Intermediate level in the art of creating Visual Effects for Games with Unreal Engine.\n\nIt contains the theory, the practice and the techniques you need for your future Visual Effects career, or to improve your skills as a Game Developer!\n\nThis course embraces topics such as:\n-The theory behind VFX for Games - What's good vs What's less good;\n-Pre-Production\n-Niagara Emitters and Systems;\n-How to create simple and complex shaders in Material Maker;\n-The process of building 3d Meshes;\n-How to draw textures by hand;\n-How to feel more comfortable with VFX in general.\n-Improve your skills in one the main areas of Game Development;\n\nI'm Gabriel Aguiar, founder of Golden Bug Studios and of the YouTube channel Gabriel Aguiar Prod., with more then 10 million views related to Game Development but mostly focused on Visual Effects for Games. And I would love to have you on board so you can finally learn special effects for games!",
      "target_audience": [
        "VFX Beginner",
        "Unreal Engine Beginners",
        "Unity Beginners",
        "Game Designers",
        "Programmers",
        "Illustrators",
        "3D Generalists",
        "Artists in General"
      ]
    },
    {
      "title": "Unity 2D Game Developer Course Farming RPG",
      "url": "https://www.udemy.com/course/unity-2d-game-developer-course-farming-rpg/",
      "bio": "Build the core systems for a 2D Farming RPG game using the Unity game engine and C# in this intermediate Unity course.",
      "objectives": [
        "Unity 2D Game Development For A Farming RPG to create the core systems for a Stardew Valley type game.",
        "Intermediate level course will show you how to build a sophisticated game by creating complex Unity components using C# scripting.",
        "43 Hours of in depth tutorials and includes the full completed project with save points after every lecture.",
        "Set-up the Player game object in a multi-level hierarchy, and implement movement and animations using events.",
        "Use multiple tilemap layers to build game scenes which give a sense of depth.",
        "Use Cinemachine to create a camera to follow the player and remain within the scene bounds.",
        "Build comprehensive item and inventory systems using scriptable objects and prefabs.",
        "Build an inventory bar UI that allows the player to pickup, drop and re-arrange items.",
        "Implement a game time system and UI that generates time related events.",
        "Create a scene manager that loads and unloads scenes as the player moves between them.",
        "Use C# Interfaces to define the properties and methods gameobjects should implement to save their game state as the player moves between scenes.",
        "Use hidden tilemaps to store grid properties, such as, where the player can drop items or dig.",
        "Implement a variety of tools that the player can use, such as a hoe to dig ground and an axe to chop down trees.",
        "Build an object pool to re-use objects.",
        "Create a VFX Manager and build particle effects.",
        "Implement a configurable and flexible crop system covering the planting, growing and harvesting of crops.",
        "Create a Pause Menu that provides a full inventory management screen, save game and quit options.",
        "Build sophisticated save and load game functionality that uses C# interfaces and binary serialisation.",
        "Implement functionality to fully customise your game characters appearance.",
        "Create sophisticated AStar pathfinding for the game NPCs and time based movement schedules.",
        "Implement player sounds, ambient sounds, and game music.",
        "Create a Day and Night lighting cycle for the game - using a lighting schedule configurable by season."
      ],
      "course_content": {},
      "requirements": [
        "*** Please do not buy this course if you are an absolute beginner! This course doesn’t cover C# and Unity basics, for example, constructing animation clips from sprites and setting up basic animator controllers. The last thing I want is for you to be frustrated and leave a negative review because you don’t have the required basic knowledge to follow the lectures. This is an intermediate course and you need the required skills listed below. I of course would love you to enrol in the course, but if you don’t have these skills start with some beginner courses and then come back once you have built a few games and have a good level of knowledge of C# and Unity. ***",
        "Intermediate Unity Development Skills - you should have built a few Unity prototypes or games before.",
        "Good knowledge of the Unity editor, and how to use it's main features.",
        "Good knowledge of C# scripting and the fundamentals of object oriented programming.",
        "Good knowledge and understanding of some of the main Unity API classes and C# system classes.",
        "The willingness to look up anything you are not familiar with in the Unity scripting manual or C# resources online.",
        "Install the free Unity 3D game engine software and Visual Studio Community Edition.",
        "Install the free SourceTree git client to help follow along with the provided completed Unity project and the branches that correspond to completed lectures."
      ],
      "description": "Have you ever wanted to create your own Farming RPG?  Games like Stardew Valley and Harvest Moon have been incredibly successful, and you too can develop your own game with the help of this course. We'll explain how to develop many of the core systems and game functionality.  We'll start with a blank project and then develop the game lecture by lecture, covering all the code and Unity configuration you will need.  This course is massive with over 44 hours of lecture videos, 99 lectures, a starter assets pack, and a complete Unity project that you can download to follow along. We even provide another Unity project to demonstrate AStar pathfinding! So while it took the creator of Stardew Valley over 4 years to create his game, you can get a head start by using this course, potentially saving many months or even years of development time !  This is one of the most comprehensive intermediate Unity 2D development courses on Udemy.  We hope that you decide to take the course and join the thousands of students who have already taken their next steps in advancing their Unity game development skills using a sophisticated, intermediate project based course.  I look forward to seeing you in the lectures!\n*** This is an Intermediate Course - Please check the Requirements Section for the experience you need before taking this course ***",
      "target_audience": [
        "Intermediate Unity Developers who want to extend their skills and knowledge using a full project based course.",
        "Existing Unity developers who are fans of Stardew Valley or Harvest Moon and want to build their own Farming RPG.",
        "A Unity developer who has previously built some prototypes or games and wants a challenging project course to level up their skills."
      ]
    },
    {
      "title": "Learn how to make iPhone/android 2D Games without coding",
      "url": "https://www.udemy.com/course/nocode2dgames/",
      "bio": "Become a game developer under one hour of training, the best kept secret of many indie game developers.",
      "objectives": [
        "Create a mobile game from scratch",
        "Learn how to build 2D games",
        "Learn how to port games to iPhone/Android,HTML5,Windows/Flash"
      ],
      "course_content": {
        "Become Familiar with Fusion": [
          "Work Environment and Getting Familiar with Clickteam Fusion",
          "Collisions and Events",
          "Platform and Levels",
          "Platform example"
        ],
        "Learning the software": [
          "Menus and Windows",
          "Application Properties",
          "Frame Properties",
          "Object Properties",
          "Background Properties (Backdrops)",
          "Bakcground Properties (Quick Backdrops)"
        ],
        "Movement Types": [
          "Static Objects",
          "Bouncing Ball Object",
          "Path Object",
          "Eight Direction Movement",
          "Race Car movement",
          "Platform Movement"
        ],
        "Using Physics Movements": [
          "8 Direction Movement",
          "Axial Movement",
          "Platform Movement",
          "Race Car Movement",
          "Spring Object",
          "Static Object"
        ],
        "Physics Objects": [
          "Fan Object",
          "Physics Joints",
          "Magnet Object",
          "Particle Object",
          "Physics Rope",
          "Physics Treadmill / Ground"
        ],
        "Frequently used Items": [
          "Working with text",
          "Working with counters",
          "Score and lives",
          "Qualifiers ( Hidden object game )",
          "Interface Objects"
        ],
        "Graphics and Animation": [
          "Working with Animation"
        ],
        "Music and Sound": [
          "Sound and Music"
        ],
        "Exporting Games": [
          "Exporting to Android ( setup )",
          "Exporting to android (installing Android SDK / Java JDK)",
          "Exporting to Android (Google Keystore/ google playstore)",
          "Exporting to FLASH",
          "Exporting to HTML5",
          "Exporting to iOS"
        ],
        "Building a game": [
          "Let's make a flappy bird clone",
          "Let's make a flappy bird clone (part 2)",
          "Let's make a doodle jump clone",
          "Course Overview"
        ]
      },
      "requirements": [
        "Clickteam Fusion 2.5"
      ],
      "description": "In this course you will learn how to build games for iPhone, Android, PC, HTML5 and Flash.\n\nThe objective of this course is to help you \"a non-programmer\"\ncreate games without you having any experience in game development. If you are a programmer, you will find that this course will help you reduce the amount of time you spend developing games.\n\nThis course will enable anyone willing to enter the gaming industry and begin making games and apps. Ride the current wave of 2D game development for PC, Steam, Tablets, Mobile devices, Micro-Consoles and Browser based games.\nIn this course we will use Clickteam Fusion to build games without coding. We will use Clickteam Fusion's exporters to export games to different platforms (PC, iOS, Android, HTML5, FLASH, OUYA) all with a click of a button, just like that!\nThis course is not technical or theoretical, this is a hands on training course. From lecture 1 to the last lecture you will be actively engaged as the lectures progress and the instructor reveals new material.\n\nEach lecture contains one or more example(s) for you to take a look an experiment yourself. At the end of the course you will learn how to build a Flappy Bird Clone and a Doodle Jump Clone. We'll also review some common techniques to build games in Clickteam Fusion.\n\nFeel free to ask any questions I will be more than glad to help you.\n\nCheers,\n\nRon\n\n* Although you can create 3D games in Fusion, this course will mainly focus on 2D game development.",
      "target_audience": [
        "This course if for newbies who have no idea how to start building a game and have no coding experience",
        "For graphic designers and non-graphic desiners who always wanted to make a game but dislike learning code",
        "There is nothing advanded in this course and no prior knowledge is needed."
      ]
    },
    {
      "title": "Mathematics for Game Development - Unity 6 Compatible",
      "url": "https://www.udemy.com/course/games_mathematics/",
      "bio": "A Beginner's Guide to Essential Mathematics, Data Structures and Algorithms used in Game Programming applied in Unity",
      "objectives": [
        "How to use bitwise operations to optimise processing and storage in games.",
        "Everything there is to know about vector mathematics and how to navigate in 2D and 3D space.",
        "The principles and practice behind collision detection with lines, line segments and ray casting.",
        "The beauty of affine transformations and the fundamentals in transforming game objects.",
        "What a quaternion is and how it is used to rotate game objects.",
        "How to build a mathematics library in C# from scratch."
      ],
      "course_content": {},
      "requirements": [
        "Familiarity with the Unity Game Engine",
        "Confidence in programming with C#",
        "Mathematics skills to high school level (basic trigonometry and algebra)."
      ],
      "description": "Did you know computer games use mathematics to perform every single task, from rendering to animation and physics to AI?  Mathematics is everywhere.  A fundamental understanding of mathematics is critical in every occupation and nowhere is it more important than in games development. It underpins all primary operations performed by a game engine.  You can't even move a character across the screen without it.  Keen to learn more and build up your knowledge in mathematics to improve your game development skills?  Then this course is for you.\nIn this course you will build your own C# classes to work with the geometrical constructs of 2D and 3D space that will develop your understanding of positioning and moving game objects. In short you will build your own maths library to replicate some of Unity's Vector2, Vector3, Matrix4x4 and some Mathf methods.  Throughout, we will be using the Unity Game Engine to help emphasise the mathematics concepts.\nJoin Dr Penny de Byl as she introduces game development mathematics using her internationally acclaimed holistic teaching style and expertise from over 25 years of teaching, research and work in games and computer graphics. Through-out the course you will follow along with hands-on workshops designed to teach you the vital mathematical techniques used in programming computer game mechanics and visuals.\nDuring the course we will be building a game that not only uses the code we've written to move 2D and 3D objects around on the screen, but to play the game you will have to use your knowledge of points and vectors to solve puzzles that will reinforce your learning.  You will also build numerous mini projects to apply mathematical concepts and see how they work in games environments.\nLearn how to program and work with:\nBitwise Operations, Bit Packing and Bitboards\n2D and 3D Space\nPoints\nVectors\nMatrices\nMapping from one coordinate system to another\nPositioning Objects\nNavigation\nAngles\nInterpolation\nQuaternions\nWhat students are saying about this course:\nBrilliant course. Might be the most helpful course I've found on Udemy so far. Penny is an amazing instructor. Even by the end of the first section learned super valuable information that I can apply to my games.\nEarly in the program but already learned enough to make the purchase price worthwhile.\nAs always, the professor delivers a great, clear course on a badly needed subject to learn. She is so knowledgeable and can impart her knowledge to her students. I recommend all her courses and her YouTube channel.",
      "target_audience": [
        "Beginner game development students who want to be able to understand the mathematics behind game engines.",
        "Skilled programmers keen to move into 2D and 3D game development spaces.",
        "Game development enthusiasts who want a deeper understanding of how mathematics is applied in games.",
        "Anyone with an appreciation of mathematics who wants to investigate how it is applied in computer game environments."
      ]
    },
    {
      "title": "Learn To Create A First Person Shooter With Unity & C#",
      "url": "https://www.udemy.com/course/unityfpsgame/",
      "bio": "Game development made easy. Learn C# with Unity and create your very own FPS game.",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Understand the capabilities of 3D development in Unity.",
        "Develop strong and transferrable problem solving skills.",
        "Gain an understanding of the game development process.",
        "Learn how object oriented programming works in practice."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Download Assets",
          "The Unity Interface"
        ],
        "Project Setup": [
          "Importing Assets to the project",
          "Setting up a Basic Scene"
        ],
        "The Player - Moving & Turning": [
          "Setting up the Player",
          "Setting up the Player Controller",
          "Understanding Script Basics",
          "Making the Player Move",
          "Controlling The Camera",
          "Camera Control Options",
          "Moving While Turning",
          "Making the camera follow",
          "Lock Cursor To Screen"
        ],
        "The Player - More Movements": [
          "Adding Gravity",
          "Jumping",
          "Double-Jumping",
          "Running",
          "Movement Bobbing",
          "CHALLENGE - Run Bobbing"
        ],
        "Shooting": [
          "Creating A Projectile",
          "Moving The Projectile",
          "Destroying The Projectile",
          "Firing Projectiles",
          "Adding Effects to Our Projectiles",
          "Fixing Projectile Interactions",
          "Adding A Simple Crosshairs",
          "Changing Projectile Direction",
          "Destroying Targets",
          "CHALLENGE - Create moving targets"
        ],
        "Enemy": [
          "Creating Enemy Health",
          "Moving The Enemy",
          "Making The Enemy Chase & Lose The Player",
          "Setting Up Navigation Area",
          "Adding Navigation To The Enemy",
          "More Enemy Navigation",
          "Creating Enemy Projectiles",
          "Making The Enemy Fire",
          "Waiting Between Shots",
          "Limiting The Firing Angle",
          "Adding an Enemy Model",
          "Animating The Enemy",
          "CHALLENGE - Add Headshots"
        ],
        "Player Health System": [
          "Damaging The Player",
          "Setting Up Health UI",
          "Making The UI Function",
          "Respawning",
          "Creating Checkpoints",
          "CHALLENGE - Bullets & Checkpoints",
          "Add Health Pickup"
        ],
        "Weapons System": [
          "Setting up The Weapon System",
          "Adding Auto-Firing",
          "Limiting Fire Rate",
          "Adding Ammo",
          "CHALLENGE - Displaying Ammo",
          "Ammo Pickups",
          "55 - Adding More Weapons",
          "Switching Weapons",
          "Moving The Firing Point",
          "Aiming down Sights",
          "Adjusting Gun Position While Aiming",
          "Weapon Pickups"
        ],
        "Making It Look Nicer": [
          "Setting up Post Processing Effects",
          "Adding Post Processing Effects",
          "Adding A Muzzle Flash",
          "Make Screen Flash Red"
        ],
        "Menus": [
          "Creating a Title Screen",
          "Creating a Pause Menu",
          "CHALLENGE - Create a Victory Screen"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2019.3 or newer"
      ],
      "description": "Learn how to create your very own first person shooter game using Unity, an industry-standard program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\nA first-person character controller with full movement, jumping & double-jumping capabilites\nA full weapons system including weapon switching and multiple gun types\nCollectibles such as ammo, health & weapons\nDesigning complete levels\nDifferent types of enemies to combat\nManaging Audio Systems\nLevel Mechanics like bouncepads, portals and more\nFull user Interface with interactive menus\nMultiple levels\nImproving visual quality with post-processing effects\nAnd more...!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "People who want to create and publish their own games.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industy.",
        "Competent and confident with using a computer.",
        "Anyone who wants to make games."
      ]
    },
    {
      "title": "Unity C# Scripting : Complete C# For Unity Game Development",
      "url": "https://www.udemy.com/course/unity-c-sharp-scripting/",
      "bio": "Learn C# Scripting for Unity 6 Game Development from Basics, Create your own 3D & 2D Games With Unity & C# ( Unity 6 )",
      "objectives": [
        "Get A Solid Understanding of C# & Basic Programming Concepts",
        "Learn Unity's API from Absolute Basics",
        "Learn Object Oriented Programming Concepts",
        "Learn C# Scripting With Practical Examples in Unity",
        "Use C# Skills for Building Mobile / Android Games",
        "Implement Basic AI Features in Unity",
        "Learn Version Controlling with Github , Bitbucket & SourceTree",
        "Build Real 2D & 3D Example Games With C# & Unity"
      ],
      "course_content": {
        "Introduction To Unity C# Scripting ( Updated 2025 )": [
          "Introduction To This C# Scripting Course",
          "Installing & Setting Up Unity 6 ( 2025 )",
          "Set Unity Active Input Handling - Unity 6.1 (2025)",
          "Installing & Setting Up Unity 2023",
          "Installing and Setting Up Unity 2022",
          "Fixing Visual Studio Auto Completion Problem",
          "Section Quiz"
        ],
        "Getting Started With C# Scripting In Unity": [
          "Creating Your First C# Script in Unity 6",
          "Getting Started With C# Scripting In Unity",
          "Understanding Structure of a C# Script",
          "Event Functions in Unity C#",
          "Variables in Unity C#",
          "Public Variables in Unity C#",
          "The Update Function In Detail",
          "Function Basics in C#",
          "Functions With Return Type & Parameters in Unity",
          "How To Solve Coding Exercises (2024 Updated)",
          "Your First Coding Exercise",
          "Calculate Triple of A Number",
          "If Else Statements in C#",
          "If Else Practice",
          "More Conditions and Equality Checking",
          "Understanding Boolean Variables",
          "Boolean Condition Practice",
          "Introduction To Arrays in Unity C#",
          "More About Arrays in C#",
          "Understanding For Loops in C#",
          "While Loops in Unity C# Scripting",
          "Learning foreach Loops in C#",
          "Switch Case Statements in C#",
          "Section Quiz"
        ],
        "Important Setting for Upcoming Sections": [
          "Set Unity Active Input Handling - Unity 6.1"
        ],
        "Diving into Core Unity C# Programming": [
          "Searching & Finding GameObjects in Unity",
          "Getting Access To Components using GetComponent Function",
          "Moving Rotating & Scaling with Transform Component",
          "Instantiating Random Objects in C#",
          "Repeatedly Calling Funtions with InvokeRepeating",
          "Working With KeyBoard Inputs in Unity",
          "Smooth Movement With Input.GetAxis",
          "Working With Mouse Input In Unity C#",
          "Working With Physics - Creating Player Controller",
          "Shooting Bullets Using Physics",
          "Checking Collisions in Unity with C#",
          "Working With Triggers",
          "Understanding LookAt function",
          "Loading Scenes / Levels In Unity With C#",
          "Section Quiz"
        ],
        "Game 1: Your First 3D Game with Unity & C#": [
          "Build A 3D Coin Collecting Game with Unity & C#",
          "Project Files for This Section"
        ],
        "Unity C# Crash Course for 3D with Practical Examples": [
          "Unity C# Crash Course - Part 1",
          "Unity C# Crash Course - Part 2",
          "Unity C# Crash Course - Part 3",
          "Unity C# Crash Course - Part 4",
          "Unity C# Crash Course - Part 5",
          "Project Files for This Section"
        ],
        "Intermediate Unity C# Scripting Concepts": [
          "Classes & Objects - Object Oriented Programming Concepts",
          "Constructors in C# Unity",
          "Using System.Serializable To Initialize Objects",
          "C# Properties - Everything You Need To Know",
          "Enums in C#",
          "Inheritance in C# - Part 1",
          "Inheritance in c# - Part 2",
          "Polymorphism Virtual Functions & Overriding in C#",
          "Static Variables Functions & Classes in C#",
          "Understanding Method Overloading in C#",
          "Using Namespaces in C# & Unity",
          "Working With Attributes In Unity",
          "Understanding Coroutines in Unity C#",
          "Project Files for This Section"
        ],
        "Unity C# Crash Course for 2D Game Development": [
          "Unity C# Scripting Crash Course for 2D Game Development",
          "Destroying Objects",
          "Detecting Mouse Clicks",
          "Destroying with Keyboard Input",
          "Moving Objects By Adding Velocity",
          "Moving with Keyboard Input",
          "Flipping Direction of Sprites",
          "Detecting Collision Destroying Objects",
          "Creating Score System",
          "Restarting Game Scene",
          "Delaying Function Calling",
          "Project Files for this Section"
        ],
        "Game 2: Create a 2D Candy Catch Game - Start to Finish": [
          "Setting Up Sprites for Game Characters & Backgrounds",
          "Setting Up The Candies",
          "Creating Player Controller",
          "Restricting Player Movement within Boundaries",
          "Checking if Monster Eats Candies",
          "Removing Candies when Out of Screen",
          "Spawning Random Candies",
          "Spawning Candy at Random Position",
          "Repeatedly Spawning Candies",
          "Checking Score",
          "Showing Score UI on Screen",
          "Creating Lives Counter",
          "Showing Available Lives UI",
          "Stop Candy Spawning On GameOver",
          "Creating GameOver Panel",
          "Creating Main Menu",
          "Creating GameOver Menu Controller",
          "Animating The GameOver Panel",
          "Project Files for This Section"
        ],
        "Creating Useful C# Scripts Ready To Use in Your Projects": [
          "Zooming In And Out In Unity with C#",
          "Creating Camera Shake in Unity with C#",
          "Rotating Objects With Mouse With C#",
          "Detecting Button Clicks and Calling Functions",
          "Create 2D Infinite Scrolling Background for Runner Games",
          "Project Files for This Section"
        ]
      },
      "requirements": [
        "No previous programming experience is required",
        "Basic familiarity with computers is enough"
      ],
      "description": "This Course will Teach You everything that you need to get started with C# scripting in Unity. You will learn step by step from scratch every feature of the C# language as well as how to implement it in Unity's API for building Games. All The Content works fine in Unity 6, Unity 2023, 2022 and older versions.\nList of Things You Will Learn:\nLearn C# Language from absolute basics\nMaster basic Programming concepts\nLearn Unity's API\nLearn Object Oriented Programming Concepts\nCreate Ready To Use C# Scripts\nApply Your C# Skills for Building Android / Mobile Games\nImplement Basic AI Features With C#\nLearn Version Controlling With Github, Bitbucket, Source Tree\nI have taught C# Scripting to thousands of people on my Youtube Channel: Charger Games. I love teaching complex concepts in a simple way, so even if you have no previous coding experience, no need to worry, I'm gonna teach you everything step by step in the perfect order.\nLearn the basic concepts, tools, and functions that you will need to build fully functional Games with C# and the Unity game engine.\nBuild a strong foundation in C# Scripting and Unity Game Development with this course.\nGet Started With C# programming\nLearn fundamentals of Unity API\nLearn Object Oriented Programming Concepts\nCreate Reusable C# scripts\nLearn Intermediate C# Concepts in Unity\nTake Your C# Skills to the next level\nA Powerful Skill at Your Fingertips  Learning the fundamentals of C# Scripting in Unity puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building games.\nJobs in unity game development are plentiful, and being able to learn C# Scripting along with Unity game development will give you a strong background to more easily build awesome games.\nContent and Overview  Suitable for beginning programmers, through this course of 100+ lectures and 20+ hours of content, you’ll learn all of the Unity C# Scripting fundamentals and establish a strong understanding of the concept behind C# programming. Each chapter closes with quizes, putting your new learned skills into practical use immediately.\nStarting with the installation of the Unity , Visual Studio , this course will take you through various C# language features and how to use them. By creating example C# Scripts, you’ll a establish a strong understanding of unity game development.\nWith these basics mastered, the course will take you through building different example games with unity to learn more about the process of creating mobile android games with unity.\nStudents completing the course will have the knowledge to create fully functional Games with C# or use their C# skills to Build any other useful thing that they want.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course.",
      "target_audience": [
        "Anyone who wants to Learn C# Scripting for Unity Game Development",
        "Beginner C# developers willing to work in Unity",
        "Anyone who wants to Build Games using C#",
        "Someone proficient in another language & willing to learn C# in a fun way"
      ]
    },
    {
      "title": "Becoming an Unreal Automation Expert",
      "url": "https://www.udemy.com/course/becoming-an-unreal-automation-expert/",
      "bio": "Using Blueprints, C++ and Python",
      "objectives": [
        "Power up your productivity with automation of tedious and repetitive tasks inside of Unreal",
        "Learn how Python, C++ and Blutilities work inside of Unreal. How do they relate to each other, what is the benefit for each?",
        "Increase your market value dramatically by learning automation. You will become an irreplaceable asset in your team.",
        "Learn how to easily work with large amounts of assets and data inside of Unreal",
        "Configure Unreal with your newly created scripts to speed up your workflow tremendously",
        "Astonish your boss and colleagues with the amount of work you suddenly get done effortlessly",
        "Learn one of the most valuable tools for the future: Automation"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Why workflow and pipeline automation is an important skill"
        ],
        "Setup - Prerequisites": [
          "Getting ready for Python scripting",
          "Getting ready for C++ scripting"
        ],
        "Batch Renaming": [
          "What we will create in this chapter",
          "Batch Renaming - Blueprinting",
          "Batch Renaming - Python",
          "Batch Renaming - C++"
        ],
        "Power of Two Validator": [
          "What we will create in this chapter",
          "Power of Two Validator - Blueprinting",
          "Power of Two Validator - Python",
          "Power of Two Validator - C++"
        ],
        "Automatic Asset Prefixes": [
          "What we will create in this chapter",
          "Auto Prefixer - Blueprinting",
          "Auto Prefixer - Python",
          "Auto Prefixer - C++"
        ],
        "Project Organizer": [
          "What we will create in this chapter",
          "Project Organizer - Blueprinting",
          "Project Organizer - Python",
          "Project Organizer - C++"
        ],
        "Asset Duplicator": [
          "What we will create in this chapter",
          "Asset Duplicator - Blueprinting",
          "Asset Duplicator - Python",
          "Asset Duplicator - C++",
          "Speed comparison"
        ],
        "Remove unused assets": [
          "What we will create in this chapter",
          "Remove unused assets - Blueprinting",
          "Remove unused assets - Python",
          "Remove unused assets - C++"
        ],
        "Adding a GUI to our scripts": [
          "GUIs with Python QT",
          "GUIs with C++"
        ],
        "Organize World Outliner": [
          "What we will create in this chapter",
          "Organize World Outliner - Blueprints",
          "Organize World Outliner - Python",
          "Organize World Outliner - C++"
        ]
      },
      "requirements": [
        "A good understanding of Unreal and its core features",
        "Know how to read and and write Blueprints (For Blutility Chapters)",
        "Python Basics (For Python Chapters)",
        "C++ Basics (For C++ Chapters)"
      ],
      "description": "In this course, three leading industry experts will teach you how you can automate Unreal Engine 4 to handle tedious/repetitive tasks. We will use the same examples to show you how you can create tools that will tremendously decrease the time you spent with those tasks. You can follow along with Blueprints, Python, or even C++. This way, you will also gain great insides on the different approaches, how they can work together, and what differentiates them.",
      "target_audience": [
        "Unreal user interested in workflow and pipeline optimization",
        "Technical Artists/Developers who want to speed up their own, or their teams workflow",
        "Everyone who wants to be more efficient in Unreal"
      ]
    },
    {
      "title": "Metroidvania Toolkit: Make a 2D Action Platformer in Unity",
      "url": "https://www.udemy.com/course/metroidvania-toolkit/",
      "bio": "Learn to Code with C# and Design a 2D Action Platformer Video Game Using Unity 2020",
      "objectives": [
        "****DISCOUNT AVAILABLE ON MY WEBSITE****",
        "Computer Coding and Code Architecture",
        "Unity Game Development",
        "C# Code Theories",
        "Complete Movement Controls for 2D Platformer",
        "Object Pooling and Shooting Mechanics",
        "Data Persistency within Unity",
        "Enemy AI",
        "World Map",
        "2D Character Rigging",
        "Inverse Kinematics",
        "2D Animations and Keyframes",
        "Random Drops when Enemies Die",
        "Video Game Development Theories",
        "Save/Load System with Multiple Game Slots"
      ],
      "course_content": {
        "Introduction": [
          "House Keeping/Course Overview/Unity Download and Install",
          "Unity Editor Walkthrough",
          "Introduction to Gameobjects and the Transform component",
          "Building a Level and Parent/Child Relationship with Gameobjects",
          "Introduction to Coding",
          "How Computers Read Code",
          "Writing Our First Script",
          "Reviewing the Movement Script",
          "How to Read API Documentation",
          "Bools and Conditional Checks",
          "Floats, Ints, and Trigger Colliders",
          "Setting Up UI and Discussing String References",
          "Using Vectors, Random Values, and Lights",
          "Brief Introduction to Particle System",
          "Finishing the Gameplay Loop and Building Our First Game"
        ],
        "Creating a Character with Complete Movement and Animations": [
          "Setting Up the Foundation for Metroidvania Tools",
          "Solving for Basic Movement, Else Statements, and Return Methods",
          "Solving for Facing the Correct Direction and Sprinting",
          "Solving for a Jump and Introduction to Layers and Raycasts",
          "Allowing Multiple Jumps and Protecting Jumping While Falling",
          "Limiting the Jump and Fall Speeds",
          "Giving Jump More Height When Button Held",
          "How to Rig a 2D Character",
          "Setting Up IKs for Better Bone Control",
          "Introduction to Animations, Keyframes, and Tweening",
          "Using the Animator Component to Trigger Animations",
          "Blend Trees and Setting up Jump/Falling Animations",
          "Adding and Animating a Glide Ability",
          "Coroutines and the Crouching Ability",
          "Animating and Controlling the Crouch State",
          "Creating a Dash Ability",
          "Animating the Dash Ability",
          "Wall Sliding and Wall Jumping",
          "Animating and Triggering the Wall Slide",
          "Refactoring Input Into One Script"
        ],
        "Shooting Projectiles and Object Pooling": [
          "Introduction to Lists and Arrays",
          "Introduction to Scriptable Objects",
          "Introduction to Object Pooling System",
          "Getting Started with the Weapon Script",
          "Instantiating Projectiles at Barrel of Gun",
          "Moving and Placing Projectiles",
          "Setting Up the Weapon Aiming Component",
          "Solving for Firing Projectiles Forward",
          "Commenting Complicated Code and Unity Inspector Tips",
          "Solving for 8 Directional Aiming",
          "Aiming at Closest Target to Player",
          "Adding Automatic Firing Capabilities to Weapon",
          "Adding More Functionality to Object Pooler",
          "Switching Weapons and Creating Second Projectile",
          "Setting Up the Grappling Hook",
          "Finishing the Grappling Hook"
        ],
        "Level and Game Management Tools": [
          "Setting Up Camera Movement",
          "Finishing Camera Movement, Fixing a Bug in Dash Script",
          "Creating Platform Manager Script",
          "Creating a Falling Platform Script and Introduction to Enums",
          "One Way Platforms and On Collision Enter",
          "Creating a Ladder",
          "Setting Up Moving Platforms",
          "Custom Editor Tools for Moving Platforms",
          "Creating Wind and Water Gameobjects with Area Effectors",
          "Setting Up Level Bounds and Restricting Camera Movement",
          "Instantiating the Player into the Scene",
          "Persisting Character Direction when Instantiating",
          "Instantiating the Player into the Scene at Multiple Locations",
          "Creating a Door to Switch Scenes",
          "Creating a Fade Screen to Load Scenes"
        ],
        "Creating and Managing a World Map and Mini-Map": [
          "Setting Up the Parameters for Scalable Rooms",
          "Mini Map Camera and Creating Rooms for World Map",
          "Creating a Player Indicator for Mini Map",
          "Creating Icons for Mini Map and Setting Up Camera",
          "Adding Movement to the Player Indicator",
          "Mini Map Camera Follow and Clamping",
          "Setting Up the World Map Display Toggle",
          "Moving and Positioning the Big Map",
          "Setting Up Fog of War",
          "Completing Fog of War"
        ],
        "Enemy AI": [
          "Setting Up Enemy AI and Enemy Movment",
          "Turning Enemy Around on Collision and Leftward Movement",
          "Preventing Enemy from Falling and Turning Around on Holes",
          "Rotating and Moving Enemies Around Platforms",
          "Rotating and Moving Enemies Around Platforms Part 2",
          "Rotating and Moving Enemies Around Platforms Part 3",
          "Solving for Enemy Jumping",
          "Creating Flying Movement and Player Detector",
          "Setting Up Everything for Melee Attacks",
          "Setting Up Everything for Projectile Attacks"
        ],
        "Health, Damage, Pickups, Ability Acquisition, and Save/Load System": [
          "Setting Up Health, Damage, and Player Invulnerability State",
          "Setting Up Projectile Damage and Random Drops",
          "Item Pickups and Creating Health Items",
          "Creating a Player Health Bar",
          "Acquiring Abilities Through Pickups",
          "Refining Player Damage and Creating an Out of Bounds System",
          "Setting Up Player Death",
          "Setting Up Basic Pause Menu to Navigate UI Screens",
          "Setting Up Save/Load System and Title Screen",
          "Final Episode/Finishing Up Save/Load System"
        ],
        "Supplemental Learning": [
          "Jump Refinement",
          "Ledge Climbing",
          "Health Scripts Refactor Using GitHub Solution",
          "Player Melee Attack",
          "Changing Characters While Playing",
          "Solution For Project"
        ]
      },
      "requirements": [
        "A working computer that can run Unity's minimum system requirements."
      ],
      "description": "Hi! I'm Brent, I also go by I_Am_Err00r, and thanks so much for taking a look at my first course, \"Metroidvania Toolkit\";  I run a solo game development company Error Free Games, am currently in development making a Metroidvania style action platformer, and wanted to share some of the knowledge I have acquired in making this popular style of genre with the rest of the game dev community.\nThis course is for anyone who is interested in learning the ins and outs of how to create a 2D action platformer from scratch and we will be creating everything from the ground up; throughout the entire series I will take the time to explain and provide insight on how I go about coming up with solutions and we will be building up the solution from nothing which will make understanding complicated theories with code architecture and maintenance easier to comprehend for those who are new.\nIn this course, I will provide solutions for the following popular features:\nHorizontal Movement\nJumping and Double/Multi-Jumping\nWall Sliding/Wall Jumping\nCrouching\nDash/Dodge Roll\nGrappling Hook\nObject Pooling/Weapon Projectile System\nWeapon Inventory\nScene/Room Management\nCamera Movement\nMini Map/World Map\nSave/Load System\nCharacter Ability Acquisition\nEnemy AI\nRandom Drops\nPlayer/Enemy Health\nData Persistency within Unity\nIf you're new to coding, game design, or Unity, then the initial section I provide will get you up to speed and quickly teach you the most basic ideas behind coding as well as how to work within Unity; by the end of the initial section you will have a good understanding of what the different windows in the Unity editor do, as well as an understanding of the most basic data types that are foundational for all coding languages; before we wrap up the initial section, I will show you how to 'build' a game and play it as an application on your computer outside of Unity.\nIf you have some experience coding but struggle writing your own solutions, the rest of the series focuses specifically on how to build an entire Metroidvania style action platformer with over 80 episodes teaching you how to organically come up with solutions using the tools available with Unity out of the box; I will teach code architecture and how to maintain multiple different classes depending on what scripts are communicating with each other, and because we will build this from the ground up, this approach to teaching gives you a behind the curtains look on how these games are built and the why behind more complicated theories rather than just the how.\nIf you are an experienced programmer, this course will save you a ton of valuable time; depending on your experience level and rate of pay per hour, this course probably costs less than half an hour of your going rate, and will definitely get you in the right direction faster on some of the more complicated solutions.\nRegardless of your skill level, this course will give you a head start on creating your very own Metroidvania style game!",
      "target_audience": [
        "Aspiring game developers",
        "Game developers looking to make a platformer",
        "Programmers looking to learn about game development",
        "Hobbyists who want to sharpen their game development and programming skills"
      ]
    },
    {
      "title": "The Absolute Beginner's Guide To Unreal Engine 4 and 5!",
      "url": "https://www.udemy.com/course/the-absolute-beginners-guide-to-learning-unreal-engine-4/",
      "bio": "Get up to speed with a working knowledge of Unreal Engine 4 super QUICK and have FUN at the same time!",
      "objectives": [
        "You will learn how to download & install your personal FREE copy of Unreal Engine 4.23",
        "You will learn how to create your first Unreal Engine scene",
        "You will learn how to import assets to the Unreal Engine",
        "You will learn how to apply materials to your imported asset",
        "You will learn how to light a scene - in just a few simple steps!",
        "You will learn how to create an animation sequence and add your assets to the sequence",
        "You will learn how to create a simple animation - ready to render in high-definition video",
        "You will learn how to export your scene out to a video file, ready for further manipulation"
      ],
      "course_content": {
        "Let's BEGIN! Off we go to a Quick Start!": [
          "Where to get your free copy of Unreal Engine 4",
          "Let's Take A Tour Of The Epic Launcher!",
          "Create Your First Project and Import The Robot"
        ],
        "How To Organize & Navigate Your Scene/Level/MAP": [
          "How To Create Folders To Organize Your Scene",
          "How To Save Your Level (Scene)",
          "How To Hide Scene Icons",
          "How To Open Different Viewports Such As Top, Side, Left, Right and Bottom",
          "How To Dock and Undock Windows",
          "REVIEW: Remember The F Key and ALT Key Are Your Friends!"
        ],
        "Let's Build Some Stuff!": [
          "Let's Drag & Drop Some Walls Into The Scene!",
          "Let's add materials to your walls!",
          "A quick look at materials in the Material Editor"
        ],
        "Unreal Engine's Realistic Lighting System: You're Gonna Love This!": [
          "Let's Start By Deleting All Our Lights Then Adding Directional (Sun) Light",
          "Contact Shadows: One Of The Keys To Realism",
          "Set up your First Point Light",
          "That was easy! Now Let's Set Up A Spotlight!",
          "Onward to a Rectangle Light!",
          "Cool Lighting Setups!",
          "The Sphere Reflection Capture",
          "The Skylight: Lighting With HDRI Images (High Dynamic Range Images)",
          "Let's Create The Sky!"
        ],
        "Atmospheric Effects": [
          "Atmospheric Fog",
          "Exponential Height Fog - You're going to LOVE this!",
          "God Rays! The Holy Grail of Lighting Effects!",
          "How About A Little Fire, Scarecrow? Unreal Engine's Amazing Particle System!"
        ],
        "How To Create Amazing Cinematics In Unreal Engine 4!": [
          "First We'll Create A New Level & Add A Character",
          "Here's The Scene We Are Going To Create!",
          "Next We'll Create An Awesome HDRI Environment!",
          "Add Your Cinematic Camera To The Level and Sequence",
          "Create a new Level Sequence",
          "Add Our Robot Mannequin Character & Animation",
          "Let's make that camera bad ass and change some settings",
          "Now We Will Get Some Beautiful Depth Of Field!",
          "Let's Add Some Camera Movement!",
          "Now Let's Add A 2nd Camera!",
          "Preparing Our Project For Export: Production Quality Settings",
          "How To Export Your Video For Further Editing & Manipulation"
        ],
        "Video Editing & Color Grading": [
          "FREE Video Editing Program: HitFilm3 Express",
          "Let's Edit and Color Grade Our Unreal Engine Clips!"
        ],
        "More Resources & Bonuses": [
          "MetaHuman Creator",
          "Where To Get Your FREE Genesis Character Bundles",
          "Coming Late 2021 - Unreal Engine 5!",
          "VIDEO: Preview of Unreal Engine 5!",
          "BONUS LECTURE: More Unreal Engine courses for you at a HUGE discount!"
        ]
      },
      "requirements": [
        "A copy of Unreal Engine (Free)",
        "No knowledge of Unreal Engine 4 is required. You will learn the simple steps to get up and running in UE4 QUICKLY! And have lots of FUN in the process!"
      ],
      "description": "IMPORTANT:  Everything you'll learn in this course can be applied to the new release of Unreal Engine 5.  The new features of UE5 such as LUMEN and NANITE are not covered in this course yet, however.  You can even switch the layout of UE5 back to classic UE4 if you'd like to make it easier to follow along.  (I prefer the slick new layout of UE5 myself)\n\n\nKeep in mind that Unreal Engine 5 requires a powerful computer to run efficiently, so be sure that your computer is powerful enough to run the program.  Unreal Engine 4 runs much faster on less powerful computers, so many people are staying with this version until they can upgrade their machines.\n\n\nUnreal Engine has become a leading resource in the creation of games, animations, television shows and illustrations!  In this course we will take the absolute beginner from knowing NOTHING about Unreal Engine 4 and 5  to a workable understanding of:\nScene setup\nImporting assets & characters\nLighting setup\nBasic material setup and application\nThe Sequencer (Unreal Engine's animation & editing timeline)\nSetting up a simple animation\nImporting audio into the Sequencer\nRendering your movie out to a movie file for further manipulation\nSTUNNING CINEMATICS!\nYou will learn how to create a stunning cinematic animation scene in Unreal Engine from beginning to end\n\n\nFREE COPY OF UNREAL ENGINE!\nYou will learn how to get your own free copy of Unreal Engine!\n\n\nREAL TIME RENDERING!\nLearn the benefits of \"real-time rendering & animation,\" a true game changer in the industry\n\n\nEPIC MANNEQUIN CHARACTER\nYou will learn how to get the awesome Epic Mannequin character along with ready-made animations for your project!\n\n\nSUPER REALISTIC PBR MATERIALS\nYou will learn how to use realistic PBR (Physically based materials) in your scene to give ultra realism\n\n\nEDIT WITH HITFILM 3 EXPRESS\nYou will learn how to color grade your scene with HitFilm 3 Express (we'll show you where to get this free program) and upload your finished scene to YouTube",
      "target_audience": [
        "This course is perfect for anyone with absolutely no knowledge of Unreal Engine 4 that would like to get up and running quickly and without delay. It is also great for those familiar with UE4 that would like to brush up on the basics"
      ]
    },
    {
      "title": "Unreal Engine 5 C++ Multiplayer Shooter",
      "url": "https://www.udemy.com/course/unreal-engine-5-cpp-multiplayer-shooter/",
      "bio": "Create a fast-paced, competitive multiplayer shooter in Unreal Engine 5 using C++!",
      "objectives": [
        "Connecting players across the internet with matchmaking sessions",
        "Creating a plugin to convert any Unreal Engine project to multiplayer",
        "Program multiplayer matchmaking in Unreal Engine",
        "Learn replication techniques for fast-paced, competitive shooter games",
        "Optimize network code by minimizing bandwidth and maximizing performance",
        "Lag compensation techniques for multiplayer including client-side prediction and server-side rewind",
        "Multiple weapons including pistols, SMGs, assault rifles, shotguns, sniper rifles, rocket launcher, grenade launchers, and throwing grenades",
        "Pickups including shields, health, speed buffs, jump buffs, and ammo pickups",
        "Crouching, aiming, jumping, strafing, reloading, and throwing, all in multiplayer",
        "Working HUD with health and shield bars, ammo count, score and defeats, and game timers",
        "Custom game modes, custom match states, and use of the core classes used in multiplayer",
        "Learn how the Game Mode, Game State, Player State, Player Controller, Pawn, Character, and Actor classes work in multiplayer",
        "Create your own subsystem to manage online sessions",
        "Learn about the Unreal Engine Online Subsystem and use it to program multiplayer games using any online service such as Steam",
        "Display announcements including: Who eliminated who, who won the game, winning teams, countdown timers",
        "Custom Match States: Fly around in the warmup stage, display winners in the cooldown stage"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Rider is now free for non-commercial use",
          "About this Course"
        ],
        "Creating a Multiplayer Plugin": [
          "Multiplayer Concepts",
          "Testing Multiplayer",
          "LAN Connection",
          "Online Subsystem",
          "Online Sessions",
          "Configure For Steam",
          "Accessing the Online Subsystem",
          "Creating a Session",
          "Setup for Joining Game Sessions",
          "Steam Regions",
          "Joining the Session",
          "Creating a Plugin",
          "Creating our Own Subsystem",
          "Session Interface Delegates",
          "The Menu Class",
          "Accessing our Subsystem",
          "Notes on OnLevelRemovedFromWorld",
          "Create Session",
          "Callbacks to our Subsystem Functions",
          "More Subsystem Delegates",
          "Session Settings",
          "Join Sessions from the Menu",
          "Tracking Incoming Players",
          "Optional Challenge: Implement StartSession",
          "Path to Lobby",
          "Polishing the Menu Subsystem",
          "Quiz on the Multiplayer Sessions Subsystem"
        ],
        "Project Creation": [
          "On Unreal Engine Versions",
          "Project Creation",
          "What to Add to DefaultEngine.ini",
          "Testing an Online Session",
          "Assets",
          "Retargeting Animations is Easier in 5.4",
          "Retargeting Animations",
          "Blaster Character",
          "Camera and Spring Arm",
          "Character Movement",
          "Animation Blueprint",
          "Seamless Travel and Lobby",
          "Network Role",
          "Optional Challenge: Show the Player Name",
          "Quiz on Network Role and Seamless Travel"
        ],
        "The Weapon": [
          "Weapon Class",
          "Pickup Widget",
          "Variable Replication",
          "Equipping Weapons",
          "Remote Procedure Calls",
          "Equipped Animation Pose",
          "Crouching",
          "Aiming",
          "Running Blendspace",
          "Leaning and Strafing",
          "Idle and Jumps",
          "Crouch Walking",
          "Aim Walking",
          "Aim Offsets",
          "Applying Aim Offsets",
          "Pitch in Multiplayer",
          "Using our Aim Offsets",
          "FABRIK IK",
          "Turning in Place",
          "Rotate Root Bone",
          "Net Update Frequency",
          "Crouch Unequipped",
          "Rotating Running Animations",
          "Footstep and Jump Sounds",
          "Quiz on the Weapon Section",
          "Optional Challenge: Crouch Footstep Sounds"
        ],
        "Firing Weapons": [
          "Projectile Weapon Class",
          "Fire Montage",
          "Fire Weapon Effects",
          "Fire Effects in Multiplayer",
          "The Hit Target",
          "Spawning the Projectile",
          "Projectile Movement Component",
          "Projectile Tracer",
          "Replicating the Hit Target",
          "Projectile Hit Events",
          "Bullet Shells",
          "Shell Physics",
          "Quiz on Firing Weapons"
        ],
        "Weapon Aim Mechanics": [
          "Optional Challenge: Add random rotation to the bullet shells",
          "Blaster HUD and Player Controller",
          "Drawing the Crosshairs",
          "Crosshair Spread",
          "Correcting the Weapon Rotation",
          "Zoom While Aiming",
          "Shrink Crosshairs when Aiming",
          "Change Crosshairs Color",
          "Extending the Trace Start",
          "Hitting the Character",
          "Smooth Rotation for Proxies",
          "Optional Challenge: Shrink crosshairs when aiming at another player",
          "Automatic Fire",
          "Testing the Game",
          "Quiz on Weapon Aim Mechanics",
          "Optional Challenge: Different Hit Particles"
        ],
        "Health and Player Stats": [
          "Game Framework",
          "Health",
          "Update Health in the HUD",
          "Damage",
          "Blaster Game Mode",
          "Elim Animation",
          "Respawning",
          "Dissolve Material",
          "Dissolving the Character",
          "Dissolving with Curves",
          "Disable Movement when Elimmed",
          "Elim Bot",
          "On Possess",
          "Blaster Player State",
          "Defeats",
          "Optional Challenge: Display a Message in the HUD when Defeated",
          "Quiz on Health and Player Stats"
        ],
        "Ammo": [
          "Weapon Ammo",
          "Can Fire",
          "Carried Ammo",
          "Displaying Carried Ammo",
          "Reloading",
          "Reloading Combat State",
          "Allowing Weapon Fire",
          "Updating Ammo",
          "Reload Effects",
          "Auto Reload",
          "Optional Challenge: Show the Weapon Type in the HUD for the Equipped Weapon",
          "Quiz on Ammo"
        ],
        "Match States": [
          "Game Timer",
          "Syncing Client and Server Time",
          "Match State",
          "On Match State Set",
          "Warmup Timer",
          "Updating Warmup Time",
          "Custom Match States",
          "Cooldown Announcement",
          "Restart Game",
          "Blaster Game State",
          "Optional Challenge: Blinking Countdown Text",
          "Quiz on Match States"
        ],
        "Different Weapon Types": [
          "Rocket Projectiles",
          "Rocket Trails",
          "Spawning Rocket Trails",
          "Rocket Movement Component",
          "Hit Scan Weapons",
          "Beam Particles",
          "Submachine Gun",
          "Strap Physics",
          "Shotgun",
          "Weapon Scatter",
          "Sniper Rifle",
          "Sniper Scope",
          "Grenade Launcher",
          "Projectile Grenades",
          "Reload Animations",
          "Shotgun Reload",
          "Weapon Outline Effect",
          "Grenade Throw Montage",
          "Weapon Attachment while Throwing Grenades",
          "Grenade Assets",
          "Showing the Attached Grenade",
          "Spawning Grenades",
          "Grenades in Multiplayer",
          "Grenades in the HUD",
          "Optional Challenge: Create a new Weapon!",
          "Quiz on Different Weapon Types"
        ]
      },
      "requirements": [
        "C++ basic knowledge (variables, functions, pointers, classes)",
        "At least some experience in Unreal Engine - creation of components, functions, and Blueprints (take one of my other courses!)"
      ],
      "description": "Over 64 hours of content!\nLearn all about Unreal Engine multiplayer in this fully comprehensive C++ course. From scratch, we create a complete multiplayer shooter game, capable of creating and joining game sessions and connecting many players across the internet. We'll create our very own custom plugin that can be added to any Unreal Engine project to easily turn it into a multiplayer game.\n\nWe learn how to optimize our game for the best performance, as competitive shooters require the highest performance possible. We'll implement lag compensation techniques such as client-side prediction and server-side rewind, so the game performs smoothly even in the presence of high lag!\n\nWe learn how to use the proper game classes for each multiplayer mechanic. Custom match states, warmup/cooldown match timers, Elim announcements, HUD with health, shields, ammo and grenades, and more! We keep all important functionality on the server, to prevent cheating, and learn the proper way to use the Player Controller, Game Mode, Game State, Player State, Character and Game Instance classes.\n\nWe make assault rifles, pistols, submachine guns, rocket launchers, grenade launchers, sniper rifles and throwing grenades! All functional in multiplayer, optimized for best performance.\n\nAfter this course, you'll be able to create any multiplayer game you want. If you can do a fast-paced shooter well, you can do any game, because fast-paced, competitive games require the best performance possible.\nThis course assumes that you have knowledge of C++ programming basics. Knowledge of variables, classes, inheritance, and object-oriented programming is recommended to have the best experience in this course.",
      "target_audience": [
        "Those who wish to make multiplayer games",
        "Those who wish to convert their existing projects to multiplayer",
        "Those who want to make a competitive multiplayer game",
        "Those who wish to learn about multiplayer gameplay programming",
        "Those who wish to learn about optimization of multiplayer games",
        "Those who wish to learn about lag compensation techniques used by AAA shooter games",
        "Those who wish to learn Unreal Engine's multiplayer code base so they can make any multiplayer game they want"
      ]
    },
    {
      "title": "Unreal Engine 5 C++: Make Your Own Action Combat Game",
      "url": "https://www.udemy.com/course/unreal-engine-action-combat-game/",
      "bio": "Master Dynamic Combat, AI Challenges, and C++ Techniques to Create Your Own Epic Action Games in UE5",
      "objectives": [
        "Build action-packed combat systems with Unreal Engine 5 and C++.",
        "Master dynamic animations to make your characters fight like pros.",
        "Create enemy AI that’s relentless and keeps players on their toes.",
        "Develop scalable stat systems using maps and enums.",
        "Get hands-on with advanced C++ coding, writing over a thousand lines.",
        "Navigate Unreal's docs to find exactly what you need, fast.",
        "Learn to use interfaces and design patterns like the observer pattern.",
        "Debug like a boss to prevent memory leaks and keep your game smooth."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Installing Unreal and Visual Studio",
          "Starting a New Project",
          "Check Out the Book",
          "Accessing Our Projects",
          "Community & Support"
        ],
        "Character Movement": [
          "Section Intro - Character Movement",
          "Importing the Player and Enemy Models",
          "Adding Animation Blueprints",
          "Adding Animation Blendspaces",
          "Playing Animation Blendspaces",
          "Creating a C++ Anim Instance Class",
          "Unreal Properties",
          "Converting Nodes Into Functions",
          "Function Specifiers"
        ],
        "Lockon System": [
          "Section Intro - Lockon System",
          "Debugging File Updates",
          "Creating an Actor Component Class",
          "Adding Input Actions",
          "Understanding Tracing and Channels",
          "Performing Traces With C++",
          "Locking the Camera and Player",
          "Rotating the Player Toward the Target",
          "Adjusting the Camera",
          "Ending the Lockon",
          "Breaking the Lockon",
          "Adding a Target Widget",
          "Adding Interfaces",
          "Validating Interfaces",
          "Implementing Interface Functions",
          "Combat Locomotion",
          "Observer Pattern",
          "Calculating the Player’s Direction",
          "Lockon Section Cleanup"
        ],
        "Player Combat": [
          "Section Intro - Player Combat",
          "Grabbing Socket Locations and Rotations",
          "Adding Tracing to Our Weapon",
          "Drawing Debug Shapes",
          "Storing Animation Montages",
          "Playing Combo Attacks",
          "Animation Notifications",
          "Enabling Root Animations",
          "Overriding Virtual Functions",
          "Applying Damage to Opponents",
          "Ignoring Targets",
          "Animation Notify States"
        ],
        "Stats": [
          "Section Intro - Stats",
          "Creating Maps",
          "Defining Enums",
          "Instantiating Components",
          "Reducing Character Health",
          "Reducing Stamina",
          "Checking for Stamina",
          "Adding Sprinting",
          "Draining Stamina",
          "Stamina Regeneration",
          "Adding a Regeneration Delay"
        ],
        "Enemy Behaviour": [
          "Section Intro - Enemy Behavior",
          "Starting the Boss Animation",
          "Pawn Sensing",
          "Running a Behavior Tree",
          "Blackboard Decorator",
          "Setting and Getting Blackboard Keys",
          "Creating Behavior Tasks",
          "Playing the Ranged Attack Animation",
          "Creating a Projectile Actor",
          "Spawning the Projectile",
          "Rotating the Projectile",
          "Rotation Interpolation",
          "Rotating With Anim Notify States",
          "Collision Overlap Event",
          "Changing Particle System Templates",
          "Setting Timers",
          "Disabling Collision",
          "Applying Damage to Players",
          "Generating Random Values",
          "Switching to the Charge State",
          "Animations With State Machines",
          "Playing the Charge Animation",
          "Overriding the TickTask Function",
          "AI Move Requests",
          "Binding a Function to an Event",
          "Boosting the Character's Speed",
          "Finishing Latent Tasks",
          "Unreal Structures",
          "Refactoring the Trace Component",
          "Supporting Damage on the Enemy",
          "Creating Behavior Tree Services",
          "Aborting a Task",
          "Switching to the Melee State",
          "Actor Move Requests",
          "Finishing the Melee Task",
          "Selecting Random Attacks",
          "Grabbing the Animation Duration",
          "Switching to the Range Attack",
          "Finishing Touches",
          "Creating a Melee Range Stat"
        ],
        "Game Interface": [
          "Section Intro - Game Interface",
          "Designing the Player UI",
          "Pure Blueprint Functions",
          "Updating the UI With Events",
          "Fixing the Enemy’s Target Reset",
          "Designing the Enemy UI",
          "Finishing the Enemy UI",
          "Widget Animations",
          "Playing Widget Animations"
        ],
        "Finishing Touches": [
          "Section Intro - Finishing Touches",
          "Disabling Player Input",
          "Subscribing to Events With C++",
          "Stopping AI Brain Logic",
          "Destroying Widgets",
          "Ending the Lock on Behavior",
          "Cached Poses and Blending Bones",
          "Playing the Block Animation",
          "Using Dot Products",
          "Hit Animations",
          "Rotating on an Axis",
          "Ignoring Damage",
          "Spawning Emitters",
          "Fixing the Player Attack Reset",
          "Camera Shake",
          "Adding a New Map"
        ],
        "Course Wrapup": [
          "Outro"
        ]
      },
      "requirements": [
        "To get the most from this course, you'll have a solid foundation of C++ concepts, such as variables, conditional statements, classes, and methods."
      ],
      "description": "Ready to create third-person melee combat moments like your favourite AAA brawler games, and take your C++ skills to a new level in UE5?\nEven if you're not a combat designer, this course is an awesome way to power-up your game dev toolkit. We’ll kick things off by coding a component for locking onto enemies, so you don’t have to keep messing with the camera. Focus on the fight, not the fiddling!\nNext up, we’re diving into player combat. Learn how to make your game feel dynamic by cycling through multiple attack animations. Your characters won’t just fight—they’ll perform.\nAnd what's combat without a killer stat system? You’ll build a scalable stat system using maps and enums. This makes sure your game can grow without turning into a tangled mess of code. It's all about writing clean, scalable code that lasts.\nThe enemies in your game won’t just stand there—they’ll be fierce! You’ll code an enemy AI that throws fireballs, charges at players, and keeps them on their toes. Your battles will be tough and thrilling, just like in the best action games.\nThis course isn’t like most others. We’re using C++ to write 90% of the game’s logic. Get ready to write over a thousand lines of code and pick up loads of new C++ tricks.\nThat’s a game-changer for anyone wanting to master Unreal Engine 5. You'll learn to use interfaces and design patterns like the observer pattern to make your game smart and efficient.\nBy the end, you’ll know how to build a game using advanced C++ skills and make it run smoothly. You’ll get confident with Unreal’s documentation, debug like a pro, and keep your code nice and tidy with best practices.\nGot the basics of C++ down? Awesome! If you know your variables, conditional statements, classes, and methods, you’re ready to roll. This course will take you from basics to building a full-on action combat game. Avoid the nightmare of messy codebases and learn to do things right from the start.\nSo, what are you waiting for? Jump in, start coding, and let’s create something epic together (pun intended!).",
      "target_audience": [
        "Perfect if you want to get into the ever-growing popular action combat genre to make your dream game, your way!",
        "Great if you want to learn best practices the first time, so you don’t find yourself in a mess with unmaintainable codebases.",
        "Ideal if you have a solid grasp of C++ concepts but are new to game development."
      ]
    },
    {
      "title": "Complete ARCore & ARKit Gaming Developer - Augmented Reality",
      "url": "https://www.udemy.com/course/complete-arcore-arkit-gaming-developer-augmented-reality/",
      "bio": "Creating Multiplayer Games in Augmented Reality for ARCore & ARKit - Tutorial Mobile Development IOS & Android UNITY3D",
      "objectives": [
        "Master Mobile App Development with Augmented Reality Games in Android & IOS",
        "Basics of Multiplayer Games with Photon",
        "ARCore & ARKit",
        "Understand the Highlevel Features of ARCore and ARKit",
        "Build your own Augmented Reality Apps from Scratch",
        "Basics of Augmented Reality",
        "Learn how object oriented programming works in practice",
        "Students will create AR apps by writing codes in C# programming language"
      ],
      "course_content": {
        "Requirementes & Introduction": [
          "Intro",
          "Requirementes for ARCore (Android)",
          "Requirementes for ARKit (IOS)",
          "Download Unity"
        ],
        "Framework ARKit & ARCore": [
          "ARKit / ARCore in Theory & Problems",
          "Download ARCore & ARKit",
          "Explanation and Structure ARCore / ARKit",
          "The new ARFoundation",
          "The ARInterface",
          "IOS - Transference of the Example Scene to our Phone",
          "ANDROID - Transference of the Example Scene to our Phone Part1",
          "ANDROID - Transference of the Example Scene to our Phone Part2"
        ],
        "ARInterface - The example Scenes": [
          "SimpleAROptions",
          "ScaledContent",
          "MatchScale",
          "ARFocusSquare"
        ],
        "Basics Multiplayer - Photon": [
          "Introduction to Photon & First Connection to Server",
          "Serverlogic in Theory",
          "Connection to Masterserver",
          "Connection to Lobby & Room",
          "Spawning Player & Movement",
          "Modification Tanks",
          "The Shooting-Script for the Tank",
          "Loading an Explosion",
          "Life Display on the Canvas",
          "Modification ShootScript",
          "Life Display with Slider",
          "Adding more Objects to the Gaming-Map",
          "3D World Space Canvas for the Tanks",
          "Mobile Control",
          "Gameplay Modification"
        ],
        "Combining Augmented Reality with Multiplayer": [
          "Augmented Reality & Multiplayer Theory",
          "Setting up the AR-Scene",
          "\"PLACE MAP\" & \"PLACE MAP NEW\" Buttons",
          "ARShadowPlane & Modifications",
          "Changes for ARFoundation"
        ],
        "Marker Based - Car in Augmented Reality": [
          "Demo - Car App",
          "Download Car & Setting up the ARFocus Square",
          "Place-Car Logic",
          "Color-Buttons in AR",
          "Changes for ARFoundation"
        ],
        "Markerless - Helicopter in Augmented Reality": [
          "Demo - Helicopter App",
          "Download Helicopter & Setting up the ARInterface-Scene",
          "ARPlane & Boxcollider",
          "Modifications"
        ]
      },
      "requirements": [
        "For ARKit (IOS) a Mac with XCode and one of the following devices:",
        "iPhone 6s; 6s Plus; iPhone 7; 7 Plus; iPhone SE; iPad Pro (9.7, 10.5 oder 12.9); iPad (2017); iPhone 8 oder 8 Plus; iPhone X",
        "For ARCore (ANDROID) one of the following devices:",
        "Google Pixel ; OnePlus 5; Samsung Galaxy Note8; Samsung Galaxy S8+; Samsung Galaxy S8; Samsung Galaxy S7; Samsung Galaxy S7 Edge",
        "Basic programming knowledge, you should familiar with basics of C# and Unity"
      ],
      "description": "Build your own Augmented Reality Multiplayer Games with Apples ARKit & Googles ARCore!\nCreate one of the first Multiplayer Augmented Reality Games at all (Look in the Google PlayStore or in the App Store, there are only a handful of them)\nWe will use the ARInterface that combines ARKit and ARCore in one Scene\nAll Apps are running on IOS & on Android\nLearning by Doing, we will code all from scratch\n\n\nWhy should you learn Augmented Reality?\nAugmented Reality is in it's early stages.\nThere is still much potential to create awesome Applications.\nThe demand for Augmented Reality apps is bigger than ever before\nBreak into a brand new industry expected to be worth $165 billion by 2024\n\n\nThe most awaited battle between Google and Apple has finally started. The war of augmented reality SDKs. Google’s ARCore is the answer to Apple’s ARKit’.  So the question is: should we use ARCore or ARKit for Augmented Reality Development? - The answer: It doesn't matter. Just use the ARInterface that combines ARKit & ARCore.",
      "target_audience": [
        "Those interested in learning Multiplayer combined with Augmented Reality",
        "People who are looking to create engaging Augmented Reality games",
        "Android & IOS Developers looking for the next big thing",
        "Anyone who wants to start a career in Augmented Reality"
      ]
    },
    {
      "title": "VR Development Fundamentals With Meta Quest 2 And Unity",
      "url": "https://www.udemy.com/course/oculus-quest-development-with-unity/",
      "bio": "Learn the basics of Virtual Reality Development with the mighty Quest 2, All-in-one VR headset from Meta",
      "objectives": [
        "Virtual Reality Development Fundamentals",
        "Oculus Quest 2 Unity Development",
        "Side-Loading to Oculus Quest and Quest 2",
        "Custom VR Avatar Models",
        "Oculus Controllers and Hands",
        "VR Shooting",
        "Grabbing and Distance Grabbing",
        "UI Interactions in VR",
        "Run-time Debugging Tool",
        "VR Scene Loading",
        "VR Slicing",
        "Controller Vibration",
        "OpenXR Setup",
        "Unity's XR Interaction Toolkit",
        "Fullbody VR System with FinalIK and Ready Player Me Avatars"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Read Before Begin"
        ],
        "VR DEVELOPMENT BASICS WITH XR INTERACTION TOOLKIT": [
          "Introduction to Section",
          "Installing Unity and Creating the Project",
          "Build Your First VR Project",
          "Importing XR Interaction Toolkit",
          "Importing Quidditch Game Assets",
          "Creating VR Player: XR Origin Setup",
          "Configuring / Optimizing the Project for Meta Quest Build",
          "Meta Quest Link and OpenXR Setup",
          "Intro to Grabbing Part 1",
          "Intro to Grabbing Part 2",
          "Locomotion in VR Part 1: Continuous Movement",
          "Locomotion in VR Part 2: Teleportation",
          "Basic UI Interactions in VR",
          "Project Source Codes"
        ],
        "FULLBODY VR INTEGRATION WITH READY PLAYER ME AND FINAL IK": [
          "Intro to Section and Downloading the Starter Project",
          "Importing Ready Player Me Unity SDK",
          "Implementing Final IK into Ready Player Me Avatar",
          "Fullbody VR Adjustments"
        ],
        "VR DEVELOPMENT BASICS WITH OCULUS INTEGRATION": [
          "Introduction to Section",
          "Installing Unity and Creating The First Oculus Quest Project",
          "Importing Oculus Integration And Game Assets",
          "OVRCameraRig: Basic Unity Scene Setup For Oculus Quest",
          "Building Your First Oculus Quest Unity Project",
          "Read Me Before Continue",
          "Installing apk Files To The Quest With ADB",
          "Installing apk Files To The Quest With Side-Quest",
          "Adding Local VR Player And Movement With Joystick",
          "Oculus Local Avatar",
          "Oculus Controllers And Custom Hands",
          "Basic Teleportation",
          "Grabbing Objects",
          "Distance Grabbing (Summoning Objects in VR)",
          "UI Interaction in VR",
          "In-Game Debug Console For Oculus Quest",
          "Custom Avatar Implementation Similar to RecRoom"
        ],
        "HAND TRACKING BASICS WITH INTERACTION SDK": [
          "Introduction and Creating Project",
          "Setting up Basic Grabbing",
          "Direct Touch and UI Interaction",
          "3D Button Interaction",
          "Hand Pose Tracking",
          "Project Source Codes"
        ],
        "SWORD AND PISTOL VR GAME": [
          "Introduction",
          "Creating the Project",
          "Importing Oculus Integration Package",
          "Importing Game Assets",
          "VR Pushable Button Basics",
          "Configuring the Project for Oculus Quest Build",
          "Scene Loading in VR And Compositor Layers",
          "GUN or SWORD? Random Cube Spawning",
          "VR Shooting With Pistol",
          "VR Slice Part-1",
          "VR Slice Part-2",
          "VR Slice Part-3",
          "Adding Controller Vibration",
          "Score Manager",
          "Implementing Sound Effects, Polishing And Your First Assignment",
          "Source Codes"
        ]
      },
      "requirements": [
        "Having an Oculus Quest or Quest 2 VR Headset (Oculus Rift will be fine too)",
        "Having an at least Beginner experience with Unity",
        "Having a PC or Mac that supports Unity Game Engine",
        "Desire to learn Virtual Reality Development"
      ],
      "description": "---2023 UPDATE IS HERE---\n\n\nIn May 2019, Oculus Quest is released and humanity's hope for Virtual Reality was raised again.  Finally, we can truly believe that the age of Virtual Reality has already come...\n-WHY?\nBecause Oculus Quest is not an ordinary VR headset. It is the first successful, standalone VR headset that works without an expensive PC and a boring cable.\nAs developers, we are so lucky that a revolutionary product is released in our time.\nSo, it is the best time to develop apps and games for Oculus Quest.\n\n\nIf you agree with me, then this course is for you!  With this course, you can quickly get started with your Oculus Quest and Quest 2 Development.\nBy enrolling in this course, you will learn the fundamentals of VR development with Oculus Quest such as:\nConfiguring a Unity project for Oculus Quest with the latest XR Plugin Management.\nLearning how to build VR experiences with Unity's XR Interaction Toolkit\nSetting up Unity scenes for VR implementation\nInstalling apk files to Oculus Quest with side-loading\nTeleportation\nOculus Local Avatar Implementation\nFullbody VR System with FinalIK and Ready Player Me Avatars\nImplementing Custom Hands and Controllers\nImplementing Grabbing and Distance Grabbing\nUI Interactions in VR\nScene Loading in VR\nVR Shooting\nVR Slicing\nVibrating VR Controllers\nIn-Game Debug Methods for Oculus Quest\nAnd while learning, you will have so much fun with the game assets featuring Quidditch sport from the Harry Potter universe along with the Sword And Pistol VR Game Assets.\nAt the end of this course, you will be able to easily prototype your Oculus Quest and Quest 2 game/app.\nSo, come and join me on this journey to become a part of the Oculus Quest legacy.\nLet's build together,\n-Tevfik",
      "target_audience": [
        "Unity Developers who want to learn Virtual Reality Development with Oculus Quest 2",
        "Creators who want to use Oculus Quest for their creative purposes"
      ]
    },
    {
      "title": "Shaders in Unity with Amplify",
      "url": "https://www.udemy.com/course/shaders-in-unity-with-amplify/",
      "bio": "Create Dynamic Materials Without the Need for Code",
      "objectives": [
        "Real time custom shaders",
        "How to use built in math functions to manipulate surface effects",
        "Create dynamic materials that can be changed in game"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of how to navigate Unity"
      ],
      "description": "Learn how to create real time, high quality, custom materials for your game. This course teaches how to use Amplify Shader Editor in Unity without the need of shader code to create dynamic effects. Covers standard lighting examples, cell shading, vertex manipulation, and shader math to bring your materials to life.",
      "target_audience": [
        "Beginner to intermediate Unity developers unfamiliar with shaders"
      ]
    },
    {
      "title": "Master Unity® VR: Make 30 Mini Games in 3D",
      "url": "https://www.udemy.com/course/build-30-mini-virtual-reality-games-in-unity-3d-from-scratch/",
      "bio": "Learn everything you need to know to make your own mini virtual reality games for mobile!",
      "objectives": [
        "Build 3D games in Unity® 5.4.3f1.",
        "Understand the fundamentals of game design.",
        "Create artwork in Blender.",
        "Code in C#."
      ],
      "course_content": {},
      "requirements": [
        "Download and install Unity® 5.4.3f1 and Blender.",
        "Videos were recorded in MAC, but it is possible to work with PC."
      ],
      "description": "\"The videos are great and the course is interactive. Some of the things have been updated but the community and the instructor is very helpful a must buy for me.\"\n\"This was a very nice course. Almost sad to have reached the end of it... Each mini-game section starts out from the beginning, like it was the first section of the course, so that makes it nice if you want to jump around and program a certain game first. It's not like each one builds on knowledge from the prior one, though after you've done a few, you start to know how the initial setup is going to go.\nIt's also nice that you build everything - from the code to the art. I enjoyed creating my own 3-D artwork in Blender - much nicer than just being handed meshes by the instructor. Instructors are very thorough in their explanations.\" - Dave J.\n\"The amount of detail that has gone into explaining the basics of coding is amazing, truly a great example of teaching.\"\n\"I couldn't come up with a way for this course to be better. This is among the very best I have bought on Udemy.\"\n\"The videos are great and the course is interactive . Some of the things have been updated but the community and the instructor is very helpful a must buy for me.\" - Rivek Tamang\n\"Best Unity3d course I have taken so far.... not only you learn Unity , you learn Blender as well. Thank you for such awesome course.\" - Akash Kumar\n------------------------------------------------------------------------------------------------------------\nHave you ever wanted to make your very own virtual reality games? Well, you've come to the right place!\nAfter purchasing this course, you'll be taken step-by-step through every process needed to do just that. Our two very talented instructors, Kevin Liao and Glauco Pires, explain everything from a basic, beginner level. That means, you don't have to have any prior coding or digital art experience to succeed here.\n**This course covers the Google cardboard and not higher end VR headsets like the HTC Vive. It will help you regardless as we do show many techniques for building VR games that are still applicable.\nIn the first section of each tutorial, Glauco Pires will take you through the process of coding the game in Unity® 5.4.3f1 from scratch. The second section of the tutorial will teach you how to create all the artistic elements you will need to complete the game. Kevin Liao will teach this section of the course in Blender; the wonderful, free 3D modeling program.\nThe final section will teach you how to integrate the art you created in Blender to the game in Unity 5.4.3f1. Glauco will take this part.\nThe beauty of taking an online course like this is the ability to replay any of the lectures at any time. There is no time limit or final tests. You get to learn at your own pace with a practical model method of learning. This course mostly focuses on mobile VR Development. This is because, it is the easiest to develop for and will most widely adopted.\n\"Great course. Definitely learned a lot about how an overall project can come together in Unity. I found the material easy to follow and well constructed. The instructor covers theory and implementation, and it is deep, with real app examples, outstanding.\"\n\"I like how everything is being explained on a very basic level. Easy to follow, I would imagine, for anyone without any modeling experience. Good job guys, and thanks!\"\n\"Very good. Very comprehensive and easy to follow. Can't wait for the other courses to learn more.\" - Yashim W.\nWe hope you decide to purchase this course and take your knowledge to the next level!",
      "target_audience": [
        "No prior coding skills necessary.",
        "Some Blender experience for model creation. If you're a beginner, download the models and import into Unity."
      ]
    },
    {
      "title": "Unity Game Development Build 2D & 3D Games",
      "url": "https://www.udemy.com/course/devslopes-unity3d/",
      "bio": "Learn Unity game design & 2D & 3D game development & make your own C# games in Unity 3D",
      "objectives": [
        "Build 2D Unity games & work with sprites",
        "Build 3D Unity games",
        "Write programs in C#",
        "Apply for Jr. Game Developer jobs as a Unity 3D developer"
      ],
      "course_content": {
        "Intro to Unity course": [
          "Unity 3D Course overview",
          "Downloading & installing Unity 3D (macOS)",
          "Downloading & installing Unity 3D (Windows)",
          "Zombie Roller: Your First Unity 3D Game",
          "Unity 3D pricing plans",
          "Unity 3D Computer System Requirements",
          "BIG discount on Bitgem 3D assets on this lecture"
        ],
        "Learn to code in C# in Unity 3D": [
          "C# variables in Unity 3D",
          "C# numbers in Unity 3D",
          "C# conditionals in Unity 3D",
          "C# arrays & loops in Unity 3D",
          "C# functions & methods in Unity 3D",
          "Object oriented programming & inheritance in C# for Unity"
        ],
        "Haunted Zombie Rush - Unity 3D game": [
          "Intro to Haunted Zombie Rush in Unity",
          "3D Game Assets for your games in Unity",
          "Unity 3D interface overview",
          "Project creation & importing assets into Unity 3D",
          "Working with lighting & materials in Unity 3D",
          "Altering shaders in Unity 3D",
          "Switching build platforms in Unity 3D",
          "Moving objects in Unity 3D",
          "Coroutines & wait times in Unity 3D",
          "Inheritance & reusability in Unity 3D",
          "Importing & animating a character model in Unity 3D",
          "Unity 3D rigidbody & adding force with physics",
          "Working with audio in Unity 3D",
          "Detection collisions & using assertions in Unity 3D",
          "Game state & singletons in Unity 3D",
          "Creating a 2nd camera & how to make UI in Unity 3D",
          "Exercise - Extending your Unity 3D Game",
          "Switching to a better code editor (VS Code)"
        ],
        "Devslopes Defender 2D Game in Unity 3D": [
          "Intro to Devslopes Defender Unity 3D game",
          "The 2D Game Assets for your games in Unity",
          "Importing sprites & grid snapping in Unity 3D Part 1",
          "Importing sprites & grid snapping in Unity 3D Part 2",
          "Animations & 2D colliders in Unity 3D",
          "Game manager singleton & spawning in Unity 3D",
          "Enemy pathfinding in Unity 3D",
          "Generics & singletons in Unity 3D",
          "Data encapsulation, spritesheets, & buttons in Unity 3D",
          "2D Raycasts, tags, and placing towers in Unity 3D",
          "Projectiles, colliders, and more tower placement in Unity 3D",
          "Registering enemies & distance-based attacks in Unity 3D",
          "Shooting projectiles at enemies in Unity 3D",
          "Killing enemies & other animations in Unity 3D",
          "More UI & finishing touches in Unity 3D",
          "UI Labels & buttons for GUI in Unity 3D",
          "Building your Unity 3D game logic part 1",
          "Building your Unity 3D game logic part 2",
          "Adding sound FX to your Unity 3D game",
          "Spawning random enemies in your Unity 3D game",
          "Exporting your game as a standalone platform in Unity 3D",
          "Unity 3D Devslopes Defender Assets",
          "Quiz"
        ],
        "Legend of Devslopes Fantasy Game in Unity 3D": [
          "Intro to Legend of Devslopes in Unity",
          "Prepping the Unity project & building the level",
          "Importing character assets into Unity",
          "Creating the character animation controller in Unity",
          "Animating the player in Unity",
          "Enemy pathfinding & navigation in Unity",
          "Rigidbody and weapons in Unity",
          "Implementing enemy attack systems in Unity",
          "Implementing player health in Unity",
          "Enemy health & player attack in Unity",
          "Heads up display / UI in Unity",
          "Particle systems in Unity",
          "How to create spawn points in Unity",
          "Game manager singleton in Unity",
          "Adjusting animations in Unity",
          "Creating ranged arrow attacks in Unity",
          "Health powerup feature and logic in Unity",
          "Speed powerup feature and logic in Unity",
          "Creating a game menu in Unity",
          "Legend of Devslopes finishing touches in Unity",
          "Legend of Devslopes Assets",
          "Quiz"
        ],
        "Devslopes Devcraft Game (MineCraft Clone)": [
          "Intro to Devcraft game",
          "Creating your first plane of cubes",
          "Create Multiple Voxels",
          "Creating multiple chunks of Voxels",
          "Adding Dimensions",
          "Setting up textures for mobile",
          "Camera setup for our character",
          "Adding movement to your character",
          "Building and destroying blocks",
          "Character Spawning",
          "Rotating your character",
          "Fixing a few bugs",
          "Adding Audio",
          "Building your game to Android",
          "Building your game to iOS"
        ],
        "Beginner & Advanced Lighting in Unity": [
          "Intro to lightning",
          "Creating particle effects in Unity",
          "Working with skyboxes & directional lights in Unity",
          "Using point lights to create mood in Unity 3D",
          "Working with spot lights & subtle light changes",
          "How to use cookies in lighting in Unity",
          "How to bake lighting & support mobile games in Unity",
          "Lighting Assets"
        ],
        "Cinematics & Animations in Unity": [
          "Intro to Animation & Cinematics in Unity 3D",
          "Unity 3D animation editor",
          "Unity cutscenes, cameras, & animation events",
          "Animation curves, camera management, & character cinematics in Unity",
          "Cinematics Assets"
        ],
        "Skeletons VS Zombies MOBA With Multiplayer in Unity": [
          "Intro to Skeletons VS Zombies",
          "Pathfinding with Navigation Mesh in Unity 3D",
          "Camera controls for MOBA in Unity",
          "Point & click movement with pathfinding in Unity",
          "Animations & fireball particle effect in Unity",
          "Shooting fireballs/bullets in Unity",
          "Intro to Unity 3D multiplayer",
          "Network Manager & spawn points",
          "Networking & player movement in Unity",
          "Networking projectiles in Unity",
          "SyncVars & keeping game data synchronized across the network in Unity",
          "Rpc & calling client functions from the server in Unity",
          "Unity Multiplayer Service & online matchmaking in Unity",
          "Unity 3D Multiplayer Assets",
          "Quiz"
        ]
      },
      "requirements": [
        "Must have a Mac or PC for Unity game development",
        "No prior coding experience required or experience in Unity 3D"
      ],
      "description": "Unity Game Development Academy by Devslopes\nThis is the most comprehensive course on Unity 3d on the Internet. We are avid game developers and were tired of all the junk out there - teaching students how to make 3D cubes without real world game development.\nThis Unity course is for absolute beginners & for seasoned programmers!\nThis course will take you down a guided learning path. You'll learn to code in C# and then go on to build 2D & 3D games.\nNot only will you build games, but you will learn how to do it the way the pros do. We'll even cover advanced topics like lighting, cinematics, and multiplayer.\nHere are some of the things you will learn:\nInstallation & setup\nPhysics\nPathfinding\nBasic artificial intelligence\nLightning & lightmapping\nCamera animations & cutscenes\nCharacter animations\nScripting, scripting, scripting!\nMaterials & skyboxes\nSound FX & music\nMultiplayer over LAN & Internet\nParticle FX\nMelee & ranged battle systems\nTower Defense Game\nAdventure Game\nZombies!\nAnd a ton more....\nAnd don't forget about our FREE chatroom where you can get live help, interact with the community, and find people to start your own game studio.\nNow is the time to learn how to code and build Unity 3d games the Devslopes way!",
      "target_audience": [
        "Beginners with no coding experience or Unity 3D experience",
        "Programmers with no C# development experience",
        "Game developers who want to learn Unity",
        "Anyone who wants to learn Unity game development but doesn't know where to start"
      ]
    },
    {
      "title": "Unity VFX Graph - Magic Effects - Intermediate Level",
      "url": "https://www.udemy.com/course/unity-vfx-graph-thunderlord-magic-effects/",
      "bio": "Create astonishing magic abilities for the game character Thunderlord with Unity VFX Graph!",
      "objectives": [
        "Create Magic Abilities for a Game Character.",
        "Learn Unity Visual Effect Graph.",
        "Learn Unity Shader Graph.",
        "Learn how to create Smoke, Hand-Made Flipbooks, Textures, Meshes and Fracture Objects."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "VFX Graph Overview": [
          "VFX Graph vs Particle System (Shuriken)",
          "VFX Graph vs Particle System",
          "Getting Ready for VFX Graph",
          "VFX Graph - Overview",
          "VFX Graph Overview",
          "VFX Graph - Sparks",
          "VFX Graph - Collisions + World and Local Spaces",
          "VFX Graph - Trigger Events",
          "Final VFX Graph Quiz"
        ],
        "Thunderlord Project": [
          "Project Setup",
          "Project Overview",
          "Spawn Abilities Script Overview"
        ],
        "Ability 01: Projectile Hammer": [
          "Projectile Hammer Beginning",
          "What did we use to spawn a ...?",
          "Adding Particles",
          "What did we use to ...?",
          "Lightning Flipbook - The First 4 Frames",
          "Lightning Flipbook - In Between Frames",
          "Lightning Flipbook - Adding Glow and Blur",
          "Lightning Flipbook - Last Frames",
          "Lightning Flipbook - Exporting the Flipbook",
          "Adding the Lightning Flipbook to the Projectile Hammer",
          "What do we need to animate a ...?",
          "Projectile Tail",
          "Create a new Lightning Trail texture.",
          "Scroll Shader",
          "Adding Light",
          "Projectile Impact",
          "Projectile Warm-up",
          "Hammer Glow",
          "HUD Marker",
          "HUD Marker Texture",
          "What's the purpose of the ...?",
          "Projectile Impact Improvements",
          "Create a new Flare Star texture.",
          "Heat Distortion Shader",
          "Projectile Warm-up Improvements",
          "Submit at least two Impact Flare textures.",
          "Adding SFX"
        ],
        "Ability 02: Earthshatter": [
          "Earthshatter Beginning",
          "Earthshatter Texture",
          "Applying the Earthshatter Texture",
          "Master VFX Shader Graph - Unveil",
          "What is the Master VFX Shader Graph for?",
          "Lightning and Particles",
          "Using Earthshatter with Thunderlord",
          "HUD Marker",
          "Adding Debris",
          "Smoke Simulation Part 1",
          "Smoke Simulation Part 2",
          "Smoke Puff Flipbook",
          "Submit the results of your Smoke simulation.",
          "Adding Smoke To Earthshatter",
          "Earthshatter Warm-up",
          "Earthshatter Warm-up Trail",
          "Create a new Trail for the Earthshatter Warm-up.",
          "Adding Light and SFX"
        ],
        "Ability 03: Hammer Punch": [
          "Hammer Punch Beginning",
          "Adding a Lightning Cylinder",
          "Why did we ...?",
          "Master VFX Shader Graph - Scroll and Mask",
          "Master VFX Shader Graph - Dissolve",
          "What's the purpose of the ...?",
          "Adding Lightning and Particles",
          "Electric Impact Flipbook - Start",
          "Electric Impact Flipbook - Frames 6 to 9",
          "Electric Impact Flipbook - End",
          "Electric Impact to Hammer Punch",
          "Adding Smoke and Improving Contrast",
          "HUD Marker",
          "Adding Lights, Distortion and SFX"
        ],
        "Ability 04: Thunderstorm": [
          "Thunderstorm Beginning",
          "Adding a Lightning Ring",
          "Adding Particles",
          "Adding Smoke",
          "Electric Shockwave",
          "Electric Ground Impacts",
          "Lightning Strike",
          "Lightning Ground Mark Texture",
          "Applying the Lightning Ground Mark Texture",
          "Using Thunderstorm with Thunderlord",
          "Falling Hammers",
          "Lightning Warm-up",
          "HUD Marker",
          "Adding Lights, Distortion and SFX"
        ],
        "Revisions Chapter": [
          "Ability 01: Projectile Hammer - Adjustments",
          "Ability 02: Earthshatter - Adjustments",
          "Ability 03: Hammer Punch - Adjustments",
          "Ability 04: Thunderstorm - Adjustments"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Unity: Basics",
        "Photoshop (or similar): Basics",
        "Blender: Basics",
        "Graphic Tablet Helps"
      ],
      "description": "This course is all about the creation of Visual Effects with Unity Visual Effect Graph. You will create an Ability Set for a game character called Thunderlord.\n\n\nYou'll learn how to use Visual Effect Graph from basic to intermediate. We will have a look at the workflow of this powerful node-based-tool and start with some quick and basic exercises to get started, like some sparks. Then we will move on to intermediate and advanced effects creation, an ability set composed of:\n\n\nAbility 01: Projectile - Projectile with Trails, Warm-up effect, Impact and Hammer Glow;\nAbility 02: Earthshatter - Earthshatter effect, Hammer Trails and Hammer Glow;\nAbility 03: Hammer Punch - Hammer Punch effect, Hammer Trails and Hammer Glow;\nAbility 04: Thunderstorm - Thunderstorm AoE, Lightning Strike effect, Warm-up effect, Falling Projectiles effect.\n\n\nWhile you create this advanced effects, you will learn stuff like:\n1) Use Shader Graph and create practical shaders for game effects;\n2) Create original Textures from scratch;\n3) Make some awesome Trails;\n4) Create hand-painted Flipbook Animations;\n5) Create Smoke with Blender;\n6) Fracture Objects with Blender;\n7) And much more.\n\n\nWith this course you will have the closest real life experience possible to the industry of Visual Effects creation in a Game Development scenario.\nCourse made with Unity URP in 2020.1.14. Compatible with 2019, 2020 and 2021.",
      "target_audience": [
        "Unity users",
        "Unreal users",
        "Game Developers",
        "VFX Artists",
        "3D Generalists",
        "Programmers",
        "Illustrators",
        "Animators"
      ]
    },
    {
      "title": "Advanced Unreal Engine 5 Multiplayer Gameplay Programming",
      "url": "https://www.udemy.com/course/advanced-unreal-engine-5-multiplayer-gameplay-programming/",
      "bio": "Industry proven approaches in multiplayer gameplay programming with Unreal Engine 5 and Ability System.",
      "objectives": [
        "Ability System (Theory & Practice)",
        "Locomotion",
        "Movement Abilities (incl. Motion Warping)",
        "Replicated Inventory Basics",
        "Multiplayer Combat Abilities",
        "Environmental features using Ability System"
      ],
      "course_content": {
        "Prerequisites": [
          "Visual Studio and Unreal Engine 5",
          "Creating the Project"
        ],
        "Ability System Overview (Theory)": [
          "Why use Ability System?",
          "AbilitySystemComponent",
          "Gameplay Ability",
          "Ability Tasks",
          "Gameplay Tags",
          "Gameplay Attributes",
          "Gameplay Effects",
          "Gameplay Cues",
          "Gameplay Events"
        ],
        "Setting Up": [
          "GAS Plugin, Ability, Ability System Component, Attribute Set, Character",
          "Character Defaults, Ability System Debug",
          "Character Data, Character Data Asset"
        ],
        "Movement Essentials": [
          "Movement Component, Movement Attributes",
          "Locomotion Blendspace, Movement Debug",
          "Animation Instance, Animation Data, Animation Data Asset",
          "Advanced physical materials",
          "Footsteps Component, Step Anim Notify",
          "Enhanced Input"
        ],
        "Movement Abilities": [
          "Jump Ability",
          "Base Ability",
          "Crouch Ability",
          "Sprint Ability (Attributes)",
          "Vault (Motion Warping) - Theory",
          "Vault (Motion Warping) - Implementation",
          "Wall Run Ability (Ability Tasks)",
          "Ability Relations with Gameplay Tags"
        ],
        "Replicated Inventory (Part I) & Interactions": [
          "Inventory Architecture - Theory",
          "Item Static Data (UClass CDO approach), Action Game Statics",
          "Item Entry, Item List, Item Instance",
          "Inventory Component",
          "Item Actor, Equipping Item, Dropping Item",
          "Finalizing Inventory, Better Inventory Tag Management",
          "Item Animation Overrides"
        ],
        "Combat & Inventory Part II": [
          "WeaponStaticData, Weapon Item Actor, Item Abilities",
          "Single Shot Ability, Inventory Ability, Gameplay Event Notify",
          "Item Effects, Strafe Movement",
          "Automatic Shooting Ability",
          "Data-Driven Damage Effect",
          "Weapon Effects & Hit Impacts",
          "Server-Side Targeting, Aiming Ability, Camera Modifier",
          "Death & Respawn",
          "Projectile, Projectile Shooting Ability, Radial Damage"
        ],
        "Environment": [
          "Ability System Physics Volume",
          "Campfire (Different Burning Effects, Static & Actor Based Gameplay Cues)"
        ],
        "Bonus": [
          "Upgrading to 5.1.1.",
          "Ammunition Inventory Item, Inventory Tags",
          "~5.3 Compilation Fix"
        ]
      },
      "requirements": [
        "Basic C++, Unreal Engine & Replication understanding is recommended."
      ],
      "description": "Why taking this course?\n\nDo you want to learn multiplayer gameplay programming with Unreal Engine 5? This course can save you months or even years of searching though infinite documentations, tutorials, and attempts to implement a stable framework for you projects.\n\nNo need to reinvent the wheel - I will guide you through the proven industry standard approaches and frameworks that will allow you to feel confident with multiplayer gameplay programming and be prepared for the real life challenges.\n\nThe course covers not only practice but also the theory of Ability System, which we will start with.\n\nMy goal is to give you not only a set of examples, but an understanding of how different multiplayer tasks can be approached, with nuances that could take you a lot of time to find out by yourself from trial and error.\n\nYou will also be able to request an access to a complete GitHub repository with all lectures implemented.\n\n\nHow to approach this course?\n\nI highly recommend to follow lecture by lecture to not miss anything, but if you're here for a specific thing, you can always watch some specific lecture or better at least a section.\n\nThis course covers:\n\n- Ability System (Theory & Practice)\n- Locomotion\n- Movement Abilities (incl. Motion Warping)\n- Replicated Inventory Basics\n- Combat Abilities\n- Environmental features using Ability System",
      "target_audience": [
        "Beginner developers who want to learn gameplay programming, as it's done in real projects.",
        "Experienced developers who want to move to gameplay programming or learn Ability System"
      ]
    },
    {
      "title": "Create a 3D Car Racing Game with THREE.js and CANNON.js",
      "url": "https://www.udemy.com/course/create-a-3d-car-racing-game-with-threejs-and-cannonjs/",
      "bio": "Use the CANNON.js physics library and the WebGL library, THREE.js, to easily create a car racing game.",
      "objectives": [
        "You will have a knowledge of the THREE js library.",
        "You will have a working knowledge of how a physics engine works. Particularly CANNON js",
        "You will know how to adapt your assets to work with the CANNON RayCastVehicle class.",
        "You'll know how to use the position and rotation information from the physics engine and apply it to your assets.",
        "You will know how to use colliders in your scene to prevent your car driving through your 3d environment."
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the course",
          "JavaScript in 12 Easy Lessons - e-book",
          "The ThreeJS Primer - FREE e-book",
          "Introduction",
          "Setting up a Web Server",
          "3D Basics",
          "How to get your assets",
          "Using Blender",
          "Test your knowledge"
        ],
        "Introducing THREE.js": [
          "The THREE.js website",
          "Your first 3D app",
          "The FBXLoader class",
          "Test your knowledge"
        ],
        "Introducing CANNON.js": [
          "The CANNON.js website",
          "CANNON.js basics",
          "More about rigid bodies",
          "Debugging your physics",
          "Test your knowledge"
        ],
        "The CANNON.RaycastVehicle class": [
          "Creating a CANNON.RaycastVehicle",
          "Adding wheels",
          "Using the JoyStick class to control your vehicle",
          "Limitations for colliders",
          "Test your knowledge",
          "Using the JoyStick class"
        ],
        "Adding the eye-candy": [
          "Sizing your assets",
          "Adding colliders",
          "Loading your assets",
          "Converting the colliders to Cannon Bodies",
          "Adding a SkyBox",
          "Adding checkpoints and resetting the car",
          "Using the Preloader class",
          "Adding SFX",
          "Test your knowledge",
          "Add a Preloader to your game"
        ],
        "Adding a GUI": [
          "Limiting the GUI to the corners and the centre",
          "Adding onclick events",
          "Controlling the width and height for different screens",
          "What have you learned?"
        ],
        "Conclusion": [
          "More fun with THREE.js and CANNON.js",
          "Three.JS with NPM and Vite",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You need to know basic Javascript.",
        "The tools required are a good text editor and optionally a 3D application program that exports FBX files such as Blender."
      ],
      "description": "Creating a car racing game that works in a browser including mobile devices has never been easier. Using the two Open Source libraries THREE.js and CANNON.js this course takes you through the steps you will need to know and builds towards a complete car racing game. On the way you will learn\nHow to setup your development environment\nHow to access free and low cost assets to use in your game.\nHow to edit those assets to work with the THREE.js and CANNON.js libraries.\nHow to use THREE.js to add 3D to an HTML page.\nThe basics of THREE.js lights, cameras and meshes.\nThe basics of the CANNON.js library, including rigid bodies.\nHow to debug your physics either using the CannonDebugRenderer or using the CannonHelper class created by the author. Both are included in the resources for the course.\nHow to use the CANNON.RayCastVehicle class to add a car with suspension and fully working wheels.\nHow to apply your own assets to the RayCastVehicle and add colliders so it bumps into your content.\nHow to add a responsive GUI to the game\nThe course includes the assets for car racing game as shown in the course image and promo video. The author has won awards for the 3D games he has produced. Learn from an expert who has been creating games for over 30 years. The game we'll develop allows the player to choose from optional, body, engine, exhaust and wheels. It involves driving a remote controlled car around a garden track.\nIt's a great way to improve your JavaScript skills along the way. All code uses the latest ES6 style, using classes throughout.",
      "target_audience": [
        "If you are interested in developing 3D games that work in the browser including on mobile devices.",
        "If you are interested in learning how physics engines work while creating a fun game.",
        "If you want to know how to add a responsive GUI to your game."
      ]
    },
    {
      "title": "Learn To Code By Making a 2D Platformer in Unity & C#",
      "url": "https://www.udemy.com/course/unityplatformer/",
      "bio": "Game development made easy. Learn C# with Unity and create your very own 2D Platformer!",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Understand the capabilities of 2D development in Unity.",
        "Develop strong and transferrable problem solving skills.",
        "Gain an understanding of the game development process.",
        "Learn how object oriented programming works in practice."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Starting Assets"
        ],
        "Getting Started": [
          "Unity Version Note",
          "Introduction To Unity",
          "Setting Up Project & Importing Assets"
        ],
        "The Player": [
          "Adding Player",
          "Sorting Sprites with Layers",
          "Giving Player Physics",
          "Creating a Script",
          "Moving The Player",
          "Jumping",
          "Improving Gameplay Feel",
          "Stop Unlimited Jumping",
          "Adding Double Jump",
          "Animating The Player",
          "CHALLENGE - ANIMATE RUN & JUMP",
          "Switching Animations",
          "Controlling The Animator Through Code",
          "Changing Direction"
        ],
        "The Camera": [
          "Camera Control",
          "Adding Parallax for Depth",
          "Clamping Camera Vertically",
          "CHALLENGE - PARALLAXING VERTICALLY"
        ],
        "Making a Level": [
          "Creating a Tile Palette",
          "Drawing a Level With Tilemaps",
          "Moving Objects Between Levels With Prefabs"
        ],
        "Health System": [
          "Adding Spikes",
          "Creating a Health System",
          "Detecting Spikes Hitting The Player",
          "Damaging The Player",
          "Setting Up Health UI",
          "Updating Health UI",
          "CHALLENGE - SHOWING HALF HEARTS",
          "Adding Invincibility",
          "Displaying Invincibility",
          "Adding Knockback",
          "CHALLENGE - ADD HURT ANIMATION WHEN PLAYER IS HIT"
        ],
        "Checkpoints & Respawning": [
          "Making Checkpoints",
          "Deactivating Checkpoints",
          "Storing Spawn Position",
          "Respawning The Player",
          "CHALLENGE - KILL THE PLAYER OUTSIDE HEALTH SYSTEM"
        ],
        "Pickups": [
          "Collecting Gems",
          "Health Pickup",
          "Adding Gems To UI",
          "Adding a Pickup Effect",
          "Showing Player Death Effect"
        ],
        "Making Enemies": [
          "Creating Our First Enemy",
          "Setting Up Movement",
          "Moving The Frog",
          "Adding Pauses",
          "Animating Enemy Movement",
          "Editing Animation Curves",
          "Defeating Enemies",
          "Bouncing On Enemy",
          "Dropping Health Pickups",
          "Making Enemy Hurt The Player"
        ],
        "Audio": [
          "Playing Sound Effects",
          "CHALLENGE - ADD SOUND EFFECTS",
          "Adjusting Sound Effects",
          "Adding Music & Audio Mixing"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2019.3 or newer"
      ],
      "description": "Learn how to create your very own platformer game using Unity, an industry-standard program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\nA character with full movement, jumping & double-jumping capabilites\nCollectibles such as gems & extra health\nParallaxing background effects\nDifferent types of enemies to combat\nmoving & flying enemies\nLevel Mechanics like Spikes, moving platforms, crushing blocks & more\nFull user Interface with interactive menus\nCreating levels with tilemaps\nMultiple levels and a level select screen\nA unique and challenging boss battle\nAnd more...!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own 2D games.",
        "People who want to create and publish their own games.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industy.",
        "Competent and confident with using a computer."
      ]
    },
    {
      "title": "Unity Mobile Game - Create an Addictive Idle Carrot Clicker",
      "url": "https://www.udemy.com/course/idle-clicker/",
      "bio": "Learn How to Make a Simple yet Amazing Hyper Casual Idle Clicker Mobile Game, Full of Fun Mechanics in Unity",
      "objectives": [
        "Create an Idle Clicker Game from Scratch in Unity",
        "Learn how to detect multiple Finger Clicks",
        "Animate Objects using a Tweening Library",
        "Learn how to Craft a Solid Architecture for your Code",
        "Learn how to write Clean Code",
        "Use, Save & Load Large Numbers",
        "And Much More !"
      ],
      "course_content": {
        "Introduction": [
          "Scene Setup",
          "Detecting Clicks",
          "Our First Carrot Counter",
          "A Much Better Counter",
          "Save & Load the Carrot Count",
          "The Carrot UI"
        ],
        "Quick Polish": [
          "Animating the Carrot",
          "The Carrot Particle",
          "We Spawn More Particles",
          "Filling the Carrot",
          "Frenzy Mode",
          "Frenzy Multiplier",
          "Updating the Frenzy Multiplier",
          "Using the Touch Class"
        ],
        "Building & Testing": [
          "Building & Testing"
        ],
        "Improvements": [
          "Pooling the Bonus Particles"
        ],
        "Adding an AutoClick Feature": [
          "AutoClick Manager",
          "Rotating Around the Carrot",
          "Spawning Bunnies",
          "Animating Bunnies"
        ],
        "Adding an Upgrades Shop": [
          "Open / Close the Shop Panel",
          "UI Setup",
          "Our First Upgrade Button",
          "The Shop Manager",
          "Configuration of the Upgrade Buttons",
          "Updating the Upgrade Buttons",
          "Upgrading our AutoClicker",
          "Purchasing the Upgrades",
          "Getting Carrots for ALL Upgrades"
        ],
        "Offline Earnings": [
          "A bit of Refactoring",
          "The Offline Earnings Manager",
          "Calculating the Offline Earnings",
          "Offline Earnings Popup",
          "Offline Earnings Popup Shows Up !",
          "Animating our Popup",
          "Using the Scientific Notation",
          "Addle Idle Notation & Improvements"
        ],
        "Daily Rewards": [
          "UI Setup",
          "Configuring the Rewards",
          "The Daily Rewards Manager",
          "Claiming the Rewards",
          "Opening & Closing the Panel",
          "Starting our Timer",
          "Completing the Timer",
          "Small Improvements",
          "Improving the Editor a bit"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "How to make your way through the Unity Editor (but not compulsory)",
        "A Computer",
        "An internet connexion"
      ],
      "description": "Hyper casual idle games have always been around as far as mobile games are concerned.\n\n\nYou’ve surely played, or heard about Cookie Clicker ? Let me introduce, Carrot Clicker (very original I know ^^)\n\n\nDo you want to Learn how to bring your Clicker Game Idea to Life ?\nWell, you’re at the Right Place!\n\n\nIn this exciting course, you will learn all of the different aspects of making a Fun & Addictive Clicker Game (with carrots).\n\n\nYou will first learn how to Setup your Unity Project to target Mobile Devices.\nYou will learn how to Detect Clicks using two methods (Using the mouse in the first place, and then using your fingers ! So that you can click much faster)\nThen, you will learn how to use Variable Types to your advantage, and the limitations of some of them.\nYou will learn about the Little Secrets of Tweening Libraries, to give a nice Polish to any game\nAll along the way, You will learn Good Coding Practices that will improve your coding architecture Skills\nYou will also learn how to fill an image to enhance the player experience drastically (This part is so fun)\nYou will implement a “Frenzy Mode” that will provide the player even more carrots for each touch !\nAnd Finally, you will learn how to Build & Test your game on a real device\n\n\nIf there is an aspect of this genre that you want me to explore, leave a review and I’ll try to implement it ;).\n\n\nIf you’re ready to make your First Idle Clicker Game, don’t miss this opportunity.\n\n\nEnroll now",
      "target_audience": [
        "Unity Beginner that dream about making their own Mobile Game",
        "Unity Enthusiasts willing to improve their skills",
        "Unity Experts interested in Trendy Mobile Games Mechanics"
      ]
    },
    {
      "title": "Unity for kids",
      "url": "https://www.udemy.com/course/unity-for-kids/",
      "bio": "Non programming Unity course for beginners",
      "objectives": [
        "How to use Unity software",
        "How to import and use packages"
      ],
      "course_content": {
        "Galaxy Fighter 2022": [
          "About the course",
          "Getting tools and starting a new project",
          "Panels overview",
          "Scenes",
          "Layers",
          "Packages",
          "Level",
          "Main Menu",
          "Prefabs, changes in the game",
          "Player",
          "Game progress package 09",
          "Player shooting",
          "Player Granades and Engine Flames",
          "Teleport",
          "Game progress package 12",
          "Shooting enemy",
          "Game over menu",
          "The Moon",
          "Game progress package 15 The Moon",
          "Kamikaze",
          "Game progress package 16 Kamikaze",
          "Canon shooter",
          "Game progress package 17 Canon shooter",
          "Stone shooter",
          "Game progress package 18 Stone shooter",
          "Boss enemy",
          "Game progress package 19 Boss",
          "Next Level",
          "Build the game"
        ],
        "Galactic Fighter old version": [
          "Old version info",
          "Introduction",
          "Windows",
          "Scenes",
          "Main menu",
          "Game over menu",
          "Player Object",
          "Ground",
          "Kamikaze enemy",
          "Sounds",
          "Teleport",
          "Canon tower",
          "Moon",
          "Stone shooter",
          "Follower",
          "Timer",
          "Exporting the game"
        ]
      },
      "requirements": [
        "Computer with internet access and Unity software installed"
      ],
      "description": "In this course we are going to build a 2D Galaxy Fighter game project.\nWe are going to learn how to set up a project, import packages and design our level.\nThe aim of this course is to get familiar with Unity, get a basic understanding of windows and most used elements available in Unity engine so that it's easier to get on with following programming courses.\nThere are about twenty lessons to complete this project. Each lesson has some package or assets to download and import.\nWe will cover how to create scenes, add UI elements ( User Interface which is: text, button, input field, etc).\nIn this course we will make it possible to create as many levels as you wish. You will have a chance to add many different enemies to the scene and tweak some parameters to change the behaviour of this enemy. You can download and import different graphics, audio files, change colors and texts to make this game unique.\nWe are going to add enemies:\nbasic shooting enemy which can move up and down or travel towards the player,\nkamikaze enemy which will follow the player and try to collide with it\nBoss enemy which has some animations, different bullets and will allow player to move on only when it get's destroyed\nCanon shooter which can't be destroyed\nStone shooter which once triggered, starts shooting burning stones.\nWe can build our game and give it to our friends to play.\nThere will be lots of fun,\nHope you will like making games as much as I do ;)\nSee you in the course.\nMatt",
      "target_audience": [
        "Young students who want to start making games in Unity"
      ]
    },
    {
      "title": "Unity Android : Build 3D ZigZag Racing Game with Unity & C#",
      "url": "https://www.udemy.com/course/unity-android-3d-zigzag-racing-game-development/",
      "bio": "Learn Unity Android Game Development, Build A Complete 3D ZigZag Racing Game, Monetize with Ads, Publish on Google Play",
      "objectives": [
        "Build An Android Game Start To Finish",
        "Learn Unity Game Development from Scratch",
        "Create A 3D ZigZag Racing Game",
        "Monetize Your Game With Video Ads",
        "Publish Your Game Online",
        "Add Music & Special Effects"
      ],
      "course_content": {
        "Introduction & Installing Unity 6": [
          "What's Inside The Course",
          "Installing & Setting Up Unity 6",
          "Creating Your First Script in Unity 6",
          "Setting Up Unity 6 for Android Game Development",
          "Installing and Setting Up Unity 2022",
          "Install & Play Test The Game on Google Play"
        ],
        "Let's Start Creating 3D ZigZag Racer Game": [
          "Introduction To The ZigZag Racer Game",
          "Creating The First Platform",
          "Setting Up The Camera",
          "Creating Small Platforms",
          "Adding The Car Model",
          "Setting Up The Car Collider"
        ],
        "Creating The Basic Game Play": [
          "Creating Car Controller Script and Moving The Car",
          "Checking Input and Changing Direction of The Car",
          "Creating Game Manager & Moving After First Touch",
          "Ignoring The First Tap"
        ],
        "Generating The Game Level": [
          "Understanding The Platform Spawning Mechanism",
          "Creating Random Spawning Platforms",
          "Spawning Platforms Automatically",
          "Creating Smooth Following Camera",
          "Stopping Platform Spawning & Camera Following on Game Over",
          "Creating The Platform Falling Effect",
          "Reloading Level & Fixing Light"
        ],
        "Adding Score & Game UI": [
          "Creating A Simple Score System",
          "Displaying Score on Screen",
          "Updating Score During Game Play",
          "Creating Main Menu UI",
          "Animating The Tap Text",
          "Creating The High Score Text",
          "Updating and Saving The High Score",
          "Fixing Some Problems"
        ],
        "Adding Audio & Collectable Items": [
          "Finding and Importing Free Game Music",
          "Playing Audio",
          "Creating Collectable Items",
          "Spawning Diamonds Randomly",
          "Incrementing Score & Destroying Diamonds",
          "Playing Audio When Collecting Diamonds"
        ],
        "Adding Special Effects To The Game": [
          "Creating Pick Up Particle Effect",
          "Instantiating Pick Up Particle Effect",
          "Changing Background Color Automatically"
        ],
        "Building & Publishing Your Game": [
          "Publish Your Game Online with WebGL Build",
          "Publish Your Game on Android Platform",
          "5 Places To Upload Your Android Game for Free"
        ],
        "Download The Scripts for ZigZag Racer Game": [
          "ZigZag Racer Scripts Download"
        ],
        "Implementing Video Ads & Monetizing Your Game ( Updated 2023 )": [
          "Setting Up Unity Ads",
          "Implementing Interstitial Video Ads",
          "Playing Interstitial Ads In Your Game",
          "Displaying Banner Ads In Your Game"
        ]
      },
      "requirements": [
        "Basic Understanding of Unity & C#"
      ],
      "description": "Do You want to Build & Publish Your own Android Game?\nWith this Course, You can Build & Publish your own Android Game in a few hours.\nYou will Learn Unity & C# while building a 3D ZigZag Racing Android Game from Start to Finish.\nEven if you are absolutely new to Unity, you'll be able to build your Own Game from Scratch easily.\n\n\nIn This Course You Will Learn To:\nCreate A Complete 3D Android Game\nLearn Unity from Scratch\nBuild & Publish your Game Online\nAdd Music to Your Game\nCreate Scoring System\nMonetize with Video Ads\nAdd Special particle effects and many more things..\n\n\nLearn the basic concepts, tools, and functions that you will need to build fully functional Android mobile Games with the Unity game engine.\nBuild a strong foundation in Unity and Android Game Development with this course.\nUnity Installation & Setup\nAndroid Game Development\nImporting 3D Models\nDesigning Game Level\nGame Monetization\nCoding in C# and more..\nA Powerful Skill at Your Fingertips  Learning the fundamentals of Unity Android Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building android games.\nJobs in unity android game development are plentiful, and being able to learn unity android game development will give you a strong background to more easily build awesome android games.\nContent and Overview   Suitable for beginning programmers, through this course of 40+ lectures and 10 hours of content, you’ll learn all of the unity android game development fundamentals and establish a strong understanding of the concept behind android game development.\nStarting with the installation of the Unity , Java Development Kit and Android SDK , this course will take you through various unity features and how to use them. By creating example games, you’ll establish a strong understanding of unity game development.\nWith these basics mastered, the course will take you through building different example games with unity to learn more about the process of creating mobile android games with unity.\nStudents completing the course will have the knowledge to create fully functional and ready to publish android games with unity.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course.\nKeep Learning with this course.",
      "target_audience": [
        "Anyone willing to Learn how to Build and Publish Android Games with Unity"
      ]
    },
    {
      "title": "Flappy Bird Clone - The Complete SFML C++ Game Course",
      "url": "https://www.udemy.com/course/flappy-bird-sfml/",
      "bio": "Game Programming Course To End All Courses",
      "objectives": [
        "Use C++ To Make A Game",
        "Create A Multi Device Game",
        "Create A Cross Platform Game",
        "Use The SFML framework To Make A Game",
        "Understand Game Logic",
        "Create An Extendable Game Engine",
        "Understand Flappy Bird Game Mechanics",
        "Understand How To Create An Adaptable Game Template"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "History": [
          "Great Articles",
          "Psychological Techniques Employed By Flappy Bird"
        ],
        "Project Creation & Setup": [
          "Setup Project - Windows (Visual Studio)",
          "Setup Project - Mac OS X (Xcode)"
        ],
        "Game Engine Setup": [
          "State Machine",
          "Asset Manager",
          "Input Manager",
          "Game Loop"
        ],
        "State Creation": [
          "Splash State",
          "Main Menu State",
          "Game State",
          "Game Over State"
        ],
        "Game Logic": [
          "Pipe Class Setup",
          "Spawn Moving Pipes",
          "Automatically Spawning Pipes and Deleting Them",
          "Create Moving Ground",
          "Randomise Pipe Y Position",
          "Bird Class Setup",
          "Animating The Bird",
          "Fly Bird Fly",
          "Rotate Bird",
          "Collision With The Ground & Game State System",
          "Collision With The Pipes",
          "Flash Screen White Upon Death",
          "Scoring System",
          "Displaying The Score"
        ],
        "Game Over": [
          "Setup",
          "Display Score",
          "Saving Score",
          "Medals"
        ],
        "Extras": [
          "Sound Effects",
          "Extra Task - Music",
          "Hide Console On Windows",
          "Distributing Your Game On Windows",
          "Where To Go Next?"
        ],
        "Bonus Lecture: Discounted Courses": [
          "Bonus Lecture: Discounted Courses"
        ]
      },
      "requirements": [
        "C++ Programming",
        "SFML",
        "Coding",
        "Game Development (optional)",
        "Flappy Bird Game Logic (optional)"
      ],
      "description": "Learn how to make cross platform games using the immensely successful and addictive Flappy Bird as an example. A step by step process is used to show everything from project setup to essential game design technique\nGain a good understanding of the following concepts:\nC++ Game Programming\nVideo Game Logic\nSFML Game Programming\nGame Mechanics\nSFML is one of the easiest game frameworks in the world and will provide you with a solid foundation for your game development journey. The gaming industry is bigger than Hollywood and is constantly growing, start your journey now.\nYou will be provided with the full source code to aid in development during and after this course. The source code and artwork is free to use in as many projects as you wish.\n\n\nOver 205,000 students have enrolled on my courses and all of them are extremely satisfied. You will also be satisfied with this course. If you do not like the course, remember that within 30 days you can request a full refund. I guarantee you satisfaction.\nIf you have any questions regarding the topics covered in this course, please feel free to ask. I'm always happy to help those who want to learn.\n\n\nTo summarise this is what you get:\n• Lifetime access to HD quality videos. No monthly subscription. Learn at your own pace, whenever you want.\n• All videos are downloadable. Learn wherever you want, even without an internet connection!\n• Downloadable starter code and final code for each section.\n• Free helpful support in the course Q&A when you have questions or get stuck.\n• Multiple coding challenges to practice your new skills (solutions included).\nSounds great? Then start this adventure today by clicking the “Take this course\" button, and join me in the only course that you will need!",
      "target_audience": [
        "Suited for C++ Developers",
        "Suited for Budding Game Developers",
        "Fan of Flappy Bird",
        "Love Video Games & Relish The Prospect Of Making A Game",
        "Suited for Developers Looking To Learn SFML"
      ]
    },
    {
      "title": "Learn C++ Programming By Making Games Volume 2",
      "url": "https://www.udemy.com/course/learn-cpp-programming-by-making-games-volume-2/",
      "bio": "An in depth and practical look at Object Oriented Programming",
      "objectives": [
        "Students will learn good OOP fundamentals",
        "Students will learn some fundamentals of 2D computer graphics using SDL",
        "Students will have created a shell app that will contain 4 games",
        "Students will create a game like Tetris",
        "Students will create a game like Break-out!",
        "Students will create a game like Asteroids",
        "Students will create a game like Pac-man",
        "Students will learn some vector math in 2D"
      ],
      "course_content": {
        "Raise the curtain": [
          "Introduction",
          "Course overview",
          "Making things (mostly) from scratch",
          "GCC Setup",
          "Eclipse Setup"
        ],
        "Get to class": [
          "Before we start / Something to remember",
          "Bottom up vs Top down design",
          "Classes and Objects",
          "Encapsulation - Public and Private access",
          "Data members",
          "Methods",
          "Structs Vs Classes",
          "Section 2 Practice Problems"
        ],
        "The particulars": [
          "Constructors",
          "Initializer lists",
          "Delegating Constructors",
          "Destructors",
          "Class scope",
          "The this pointer",
          "How to have references in a class",
          "Explicit constructors",
          "Section 3 Practice Problems"
        ],
        "To instantiate or not to instantiate": [
          "Calling methods on objects",
          "Objects within objects",
          "An array of objects",
          "Copy constructor",
          "Static keyword with classes",
          "Using const in classes",
          "Inlining methods",
          "Section 4 Practice Problems"
        ],
        "Hello operator my old friend....": [
          "What are Operators?",
          "Operators In your classes",
          "A Vector Class",
          "Friend functions and one More Operator overload",
          "Friend classes",
          "Section 5 Practice probelms"
        ],
        "Let's make a thing: Nobody said there would be math...": [
          "Comparing Floating point values",
          "Negating a Vector",
          "Vector multiplication by a scalar",
          "Vector Addition and Subtraction",
          "A Vector's Magnitude",
          "Unit Vectors",
          "Distance formula",
          "The Dot Product",
          "The Dot product interpretation 1 - Projection",
          "The Dot Product interpretation 2 - Trigonometry",
          "Reflecting a vector",
          "Rotating a Point",
          "Section 6 Practice Probelms",
          "Section 6 Source Code"
        ],
        "Dynamic Memory": [
          "Dynamic Memory in classes",
          "Shallow copy vs Deep copy",
          "Operator equals",
          "Using new in constructors",
          "Cleaning up dynamic memory",
          "Pointers to objects",
          "Semi-complete DynamicIntArray",
          "Section 7 Practice Problems"
        ],
        "Let's make a thing: A line": [
          "SDL2 Windows Setup",
          "SDL2 Mac Setup",
          "Setting up SDL 2.0 Window",
          "SDL Window Surface",
          "SDL Pixel Format",
          "The Color Class",
          "Screen Buffer Class",
          "The Screen Class",
          "Line Class",
          "Bresenham's Line Algorithm",
          "Drawing a line",
          "Section 8 Practice Problems",
          "Section 8 Source Code"
        ],
        "I spent your Inheritance kids": [
          "Motivation: Is-A Relationships",
          "Basic Inheritance",
          "Access control: protected keyword",
          "Static and Dynamic binding",
          "Overriding methods",
          "Using base class methods",
          "Inheritance and dynamic memory",
          "Section 9 Practice Problems"
        ],
        "Designing with Inheritance": [
          "Pure virtual functions",
          "Abstract base classes",
          "Pure virtual classes",
          "Multiple inheritance",
          "Multiple inheritance pitfalls - don't use Multiple inheritance",
          "Protected and Private Inheritance",
          "Section 10 Practice Problems"
        ]
      },
      "requirements": [
        "Good understanding of basic C and C++ such as loops, if statements, variables, pointers, and references etc",
        "Good understanding of your IDE and how to setup your C++ environment",
        "No understanding of Objects or OOP will be necessary for this course"
      ],
      "description": "An in depth practical course on OOP using C++. We learn the very basics of OOP like Classes and Objects up to more advanced topics like move semantics and lambda expressions. We then take those topics and apply them through a complex application that will contain 4 different arcade games: Tetris, Break-out!, Asteroids and Pacman. We will code 2 of those games together using the techniques we learned in the previous sections. The other 2 games will be projects for students.\nWe'll be making this arcade app from SCRATCH (mostly), using SDL for window management, input and colour but that's it! Everything else will be hand coded by us so we can get a good understanding of what's happening underneath the hood in game engines.\nWhat we make from scratch:\nDrawing lines and shapes\nVectors\nPolygon fill algorithm\n2D texturing\n2D sprite animations\n2D rotations\nLoading bitmap files\nSprite sheets\nSo much more!\nThis is an exciting course for students to take their skills to the next level through challenging problems and games. This is a HARD course, but if you stick with it (and finish all the exercises and projects), you'll not only be a better programmer than most of your peers, you'll be one step closer to getting that industry job you've been dreaming about.\nThere’s no risk!\nThis course comes with a full 30 day money-back guarantee. If you are not completely satisfied with the course, Udemy will refund you what you paid - no questions asked.\nRegister for the course today!",
      "target_audience": [
        "Anyone who is interested in learning more about C++ and making games",
        "Students with a good understanding of C++ basics: Loops, control flow, functions, pointers"
      ]
    },
    {
      "title": "Unity Game Development: Make Professional 3D Games",
      "url": "https://www.udemy.com/course/unity-game-development-make-professional-3d-games/",
      "bio": "Learn To Code In C# And How To Create Stunning 3D Games In Unity Game Engine",
      "objectives": [
        "Learn To Code in C#",
        "Develop strong and transferrable problem solving skills",
        "Understand the capabilities of game development using Unity",
        "Gain an excellent knowledge of game creation",
        "Learn how object oriented programming works in practice",
        "Create Stunning 3D Games"
      ],
      "course_content": {},
      "requirements": [
        "Must have a Mac or PC capable of running Unity3D"
      ],
      "description": "Enroll Now And Become A Professional 3D Game Developer!\nThis is the most comprehensive online course that will take you from beginner to creating stunning 3D games in Unity Game Engine!\nThe course is completely project based, and we are going to create 5 3D games from scratch using Unity Game Engine.\nWe will start with simple things so you will be comfortable even if you are using Unity for the first time. This also applies to your coding skills, if you did not code before, don't worry, we will deeply cover C# from basic to advanced features.\nI took advantage of my 2 years of online teaching experience and have structured this course in a professional way. I had beginners and intermediate game developers on my mind when I structured this course, so it will not only give you all the information you need as a beginner, but it will also teach you advanced game development techniques if you already know how to make games. Every section in the course starts with basic information about the specific topic, and slowly progresses in difficulty as we finish every video.\nYou will also benefit from my super fast response if you have any issue that you are stuck with(I check Udemy forums every day if someone posts a question). Oh and all the students taking the course will also be there to help you!\n\nSome of the things you will learn in the course:\nUnity's interface\nImporting Assets\nOrganizing The Project\nBasic, Intermediate And Advanced C# Programming\nBasic AI(Artificial Intelligence)\nAdvanced AI(Artificial Intelligence)\nPath Finding\nNav Mesh Agent\nBasic And Advanced Character Animations\nCamera Animations And Cutscenes\nSound FX And Music\nBasic, Intermediate And Advanced Particle FX\nMelee Battle Systems\nBoss Fights\nSpecial In Game Attacks\nProcedural Level Generation\nPooling Techniques\nLearn How To Use Unity's UI System\nCreate And Animate Menus\nCreate Animation Trigger Events With Mecanim And Output Plugin\nThat And Much More Is Awaiting You In This Course\n\nIf You ever had an idea for an awesome game, then enroll in this course and learn the tools that you need to develop Your next hit game!!!\nWhat Is Your Risk By Taking This Course?\n\nNothing!! If you are not satisfied with the course, I promise I will give you a full refund of your money NO questions asked!!\nEnroll Now!! You Will Not Be Disappointed!!",
      "target_audience": [
        "Anyone Who Wants To Learn Game Development But Does Not Know Where To Start",
        "Beginners with no coding experience",
        "Programmers who want to learn game development",
        "Experienced Game Developers"
      ]
    },
    {
      "title": "The complete guide for blueprint development in Unreal 4",
      "url": "https://www.udemy.com/course/the-complete-guide-for-blueprint-development-in-unreal-4/",
      "bio": "Learn Unreal blueprints by developing blueprint with this comprehensive guide from begin to finish",
      "objectives": [
        "Master beginner blueprint concepts, like variables, \"if\" statements, and arrays",
        "Creating a basic sprint system"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Working with Blueprint Classes": [
          "Working with Blueprint Classes"
        ],
        "Introduction to Data Types": [
          "Introduction to Data Types"
        ],
        "Working with Integers": [
          "Working with Integers"
        ],
        "Working with Floats": [
          "Working with Floats"
        ],
        "Working with Vectors": [
          "Working with Vectors"
        ],
        "Working with Boleans": [
          "Working with Boleans"
        ],
        "Branches and Conditioning": [
          "Branches and Conditions"
        ],
        "ForLoops": [
          "ForLoops"
        ],
        "While Loops": [
          "While Loops"
        ]
      },
      "requirements": [
        "Unreal engine 4",
        "A basic understanding of mathematics (order of operations, addition, subtraction, multiplication) will facilitate comprehension of certain coding logic.",
        "No prior programming or Unreal experience is required. If you have worked in C++ or Unreal before, this course can help you fine-tune your game development skills.",
        "Before beginning this course, you should be comfortable browsing the Web."
      ],
      "description": "More about the Instructor:\nThis course is designed by Animation Hacks which is the visual effect studio with high-quality skill artist work on numerous unannounced projects. In addition, they enjoy sharing their knowledge with those students who learn 3D online.\nNOTE FOR STUDENTS - please take a look Section 1 / Lecture 1 to downloads for the source attachment link with the lesson.)",
      "target_audience": [
        "This course is not for someone who is an advanced game developer. This course is also not for students who are not interested in learning to code as you will get an introduction to the fundamentals of blueprint programming.",
        "Anyone seeking an understanding of best visual coding practices such as organization with your project and optimal development workflow that are essential to game development.",
        "People interested in developing commercial quality 2D and 3D games either professionally or as a hobby.",
        "The ideal student for this course is someone who is interested in game development with Unreal and visual programming, C++, blueprint and is looking for an interactive, project-based course."
      ]
    },
    {
      "title": "Learn Advanced C# Scripting in Unity 5 for Games",
      "url": "https://www.udemy.com/course/3dmotive-learn-advanced-c-scripting-in-unity-5/",
      "bio": "Learn advanced and powerful C# scripting techniques for building professional-grade games in Unity",
      "objectives": [
        "Understand the mathematics behind 3D games to create motion, animation and believable behaviours",
        "See real-world case studies in applying C# to solve game development problems",
        "Develop time-saving techniques for building complex gameplay mechanics"
      ],
      "course_content": {
        "Introduction to the Course and an Intro to Movement": [
          "Download Course Files Here!",
          "Introduction to the Course and Overview",
          "Course Requirements",
          "Getting Started with Movement and Motion",
          "Vectors and Coordinate Spaces",
          "DeltaTime",
          "Gizmos",
          "Gizmo Icons",
          "Quaternions",
          "Rotation and Circular Motion",
          "Rotation and Looking",
          "Rotation and Rotational Speed",
          "Orbiting and Movement with Quaternions"
        ],
        "Gravity, Jumping, and basic Physics": [
          "Introduction",
          "Player Movement",
          "Physics and Collisions",
          "World Space vs Local Space",
          "Coordinate Space Conversions",
          "Gravity and Jumping",
          "Quaternion Slerping",
          "Vector Projection",
          "Terrain Hovering Project",
          "Terrain Planar Movement",
          "Terrain Elevation",
          "Normal Vectors"
        ],
        "Character Animation and the Inventory": [
          "Introduction",
          "Getting Started with Character Animation",
          "Correcting Root Motion",
          "Starting a Blend Tree",
          "Working with Motion Fields",
          "Scripting with Blend Trees",
          "JSON Data",
          "JSON and Persistent Data",
          "Planning an Inventory",
          "The Inventory GUI",
          "Creating an Inventory Panel",
          "Scripting Inventory Items",
          "Completing the Inventory"
        ],
        "Expanding on Ammo and Inventory Items": [
          "Introduction",
          "Approaching Object Picking",
          "Handling Tap Input",
          "Introducing Twin Stick Controls",
          "Mouse Looking",
          "Ammo Prefabs",
          "Initiating Ammo",
          "Introducing Ammo Pooling",
          "Scripting Ammo",
          "Creating an Ammo Manager",
          "Creating an Ammo Pool",
          "Introducing Queues",
          "Managing Ammo Spawning and Conclusion"
        ],
        "Building AI": [
          "Introduction",
          "Preparing for AI",
          "Proximity Detection",
          "Field of View",
          "Line of Sight",
          "Navmesh Generation",
          "Path-Finding and Steering",
          "Codeless Patrolling",
          "Introducing FSMs",
          "Creating States",
          "State Switching",
          "Completing the AI",
          "Exploring the Patrol State",
          "Chase, Attack, and Course Conclusion",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "A working understanding of C# and Unity is required"
      ],
      "description": "Learn how to create believable game worlds and behaviours by scripting gameplay in C#. In this comprehensive 3dmotive course targeted at intermediate users, instructor Alan Thorn demonstrates advanced C# scripting techniques and their underlying concepts for solving real-world development problems. Understand core mathematical ideas, like Vectors and Quaternions, for making objects move, rotate and change predictably. See how to apply C# for implementing line of sight functionality, artificial intelligence, collision detection and lots more. In addition, see how to work with large amounts of data, how to understand coordinate systems and spatial problems, and how to customize the Unity editor to work the way you need it to. By the end of this course you’ll have established a highly valuable foundation for coding confidently with C# to develop sophisticated games that are impressive - and marketable.\n(Students - please look under Section 1 / Lecture 1 downloads for the source files associated with the lesson.)\nMore about the Instructor:\nAlan Thorn is a game developer, author and educator with 15 years industry experience. He makes games for PC desktop, Mobile and VR. He founded 'Wax Lyrical Games' and created the award-winning game 'Baron Wittard: Nemesis of Ragnarok', working as designer, programmer and artist. He has written sixteen technical books on game development and presented ten video training courses, covering game-play programming, Unity development, and 3D modelling. He has worked in game development education as a visiting lecturer for the 'National Film and Television School', as a Lead Teacher for 'Uppingham School', and is currently a Senior Lecturer at 'Teesside University' where he helps students develop the skills needed for their ideal role in the games industry.",
      "target_audience": [
        "Indie Developers, Game Development Students, Hobbyists and Professionals seeking to improve their skillset",
        "This course is not intended for beginners!"
      ]
    },
    {
      "title": "Learn To Create a Match-3 Puzzle Game in Unity",
      "url": "https://www.udemy.com/course/unitypuzzle/",
      "bio": "Game development made easy. Learn C# using Unity and create your own puzzle game!",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Understand the capabilities of 2D development in Unity.",
        "Develop strong and transferrable problem solving skills.",
        "Gain an understanding of the game development process.",
        "Learn how object oriented programming works in practice.",
        "Learn to create a fun online multiplayer experience!"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Assets"
        ],
        "Setting Up": [
          "Unity Layout",
          "Setting up the project"
        ],
        "Creating The Board": [
          "Making The Board",
          "Making Gems",
          "Spawning Gems",
          "Storing Gems"
        ],
        "Matching Gems": [
          "Swiping Gems",
          "Swapping Gems Logic",
          "Moving Gems",
          "Finding Matches",
          "Matching Gem Types",
          "Tracking Matched Gems",
          "Swapping Back Unmatched Gems",
          "Preventing Beginning Matches"
        ],
        "Moving Gems On The Board": [
          "Destroying Gems",
          "Making Gems Fall",
          "Refilling The Gems",
          "Removing Duplicates",
          "Sliding Into The Board",
          "Preventing Player Input While Gems Move"
        ],
        "Expanding What Gems Can Do": [
          "Creating Particle Effects",
          "Spawning Gem Bursts",
          "Creating a Bomb",
          "Exploding Bombs",
          "Shuffling The Board"
        ],
        "Controlling A Level": [
          "Laying Out The Level",
          "Tracking Time",
          "Simple Round Ending",
          "Tracking The Score",
          "Score Multipliers",
          "Ending & Rating Check"
        ],
        "Level Select": [
          "Main Menu",
          "Setting Up More Levels",
          "Laying Out The Level Select",
          "Making The Level Select Work",
          "Showing Stars",
          "Browsing More Levels"
        ],
        "Level Variety": [
          "Setting Up Custom Boards",
          "Laying Out Custom Boards",
          "Adding Non-Matching Stones"
        ],
        "Menus & Finishing The Game": [
          "Adding Music",
          "Adding Sound Effects",
          "Pausing The Game",
          "Building The Game",
          "Course Complete And Next Steps"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2021.1 or newer"
      ],
      "description": "Learn how to create and program your very own match-3 puzzle game using Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to understand such game elements as:\nMatching Gems in groups of 3 or more\nAdding Bombs and other custom objects into levels\nCreating Custom Layouts\n3 Star Level Ratings\nComplete Level Select System\nAudio systems\nInteractive Menus\nand much more...\nThe course also includes a complete version of the project to use for your own reference to ensure everything in your game works as it should!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own puzzle games.",
        "People who want to create and publish their own games.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industry.",
        "Competent and confident with using a computer."
      ]
    },
    {
      "title": "Unity C# Game Development: Learn C# Unity From Scratch",
      "url": "https://www.udemy.com/course/c-unity-game-development-learn-c-unity-from-scratch/",
      "bio": "Unity 2d & unity 3d game dev with C# Unity and become game maker. You will learn to design, create and publish games.",
      "objectives": [
        "Whether you’re interested in coding 2D or 3D video games, Unity is one of the most comprehensive and user-friendly game development engines on the market.",
        "Coding video games for modern consoles requires a lot of specialized skills. Unity allows users to program life-like physics, control game audio.",
        "Unity features a full suite of the most modern tools and services that will help you make great video games.",
        "Unity can deploy games to a very wide range of platforms from a single unified base (hence the name). You can deploy your game to mobile, console, PC.",
        "Unity is a development engine for 2D and 3D games and experiences. It supports Virtual Reality (VR), Augmented Reality (AR), and Artificial Intelligence (AI).",
        "Coding is not a requirement. Unity includes a visual scripting tool called Bolt, which doesn't require coding and provides two graph types for users.",
        "Unity operates like a generic scene player. It is a game runner with a collection of assets. When the game starts, Unity initializes.",
        "It has actually become somewhat of a trend for new programmers to use the game engine as an introductory stage before moving on to learn state logic and C#",
        "Unity uses C#, and unreal uses C++. C# is easier to learn. Both products include a visual scripting tool allowing the user to avoid coding altogether.",
        "Learn C# from scratch",
        "Learn the fundamentals of C# and .NET Framework",
        "Learn the fundamentals of game design",
        "Gain an excellent general knowledge of game creation in Unity",
        "Build 2D Unity games & work with sprites",
        "Collect and destroy game objects",
        "Detect collisions, receive user input, and create player movements",
        "Activate and use Unity’s Team Collaboration service",
        "Play Music In Your Game",
        "Unity is an excellent program for beginners to learn."
      ],
      "course_content": {
        "Introduction & Set Up for Unity and C#": [
          "What We Will Learn in C# Section?",
          "What is C#?",
          "What is Visual Studio ?",
          "Installing Visual Studio",
          "How To Install Visual Studio 2019 On Windows?",
          "How To Install Visual Studion On Mac?",
          "How To Install Visual Studio 2022 On Windows?",
          "FAQ About UnityC#",
          "FAQ About UnityC#"
        ],
        "Console Environment for Unity": [
          "What is Console App?",
          "Functions in Console Enviroment",
          "Practice The Write and Read Functions"
        ],
        "Variables": [
          "Why Variables Are Necessary?"
        ],
        "Primitive Types and Operators": [
          "String Type in C#",
          "Practicing String Type in C sharp",
          "Double and Float Types",
          "Char Type",
          "Bool Type",
          "Constant Keyword",
          "Integer Type",
          "Challenge"
        ],
        "Control Flow in C #": [
          "If, Else, Else If Statements",
          "Switch Statement in C#",
          "While, Do While Statements in C sharp",
          "\"For\" Statement",
          "Foreach Statement",
          "Challenge 2 - Summing Numbers Until Zero Comes"
        ],
        "Array and Lists in c sharp programming": [
          "Arrays unity c#",
          "Lists c# unity"
        ],
        "Non-Primitive Types in C#": [
          "Classes"
        ],
        "Functions": [
          "Function in C# ( C sharp )"
        ],
        "Error Handling in C#": [
          "Try Catch Statements"
        ],
        "Files in c sharp for beginners": [
          "File Processing"
        ]
      },
      "requirements": [
        "No prior unity, unity 2d, unity 3d knowledge is required",
        "A Windows or Mac for installing all the free software and tools needed to practice",
        "Desire to learn C# Unity",
        "Nothing else! It’s just you, your computer and your ambition to get started today",
        "LIFETIME ACCESS, course updates, new content, anytime, anywhere, on any device."
      ],
      "description": "Hello there,\nWelcome to Unity For Beginners:Game Development From Scratch with Unity course\nUnity 2d & unity 3d game dev with C# Unity and become game maker You will learn to design, create and publish games\nCoding video games for modern consoles requires a lot of specialized skills Unity allows users to program life-like physics, control game audio, and texture and layer game levels, all in one program Oak Academy has the courses to show you how they all work together\nWhether you’re interested in coding 2D or 3D video games, Unity is one of the most comprehensive and user-friendly game development engines on the market Unity features a full suite of the most modern tools and services that will help you make great video games Unity can deploy games to a very wide range of platforms from a single unified base (hence the name) You can deploy your game to mobile, console, PC and much more\nIn this course you will learn;\n2d & 3d game development with C# Unity\nto design, create and publish your games and you will become game maker\nThis course is completely project based and we believe this is the best way to learn Unity and C# You will start to learn from scratch but you will not just be learning dry programming concepts, you will be applying them to games as you go You will be shown step-by step how to build it We will never let you get stuck\nThis C# Unity Game Development course is for:\nC# Unity Beginners\nGame Development Beginners\nExperienced Game Developers\nAnyone Who Wants To Learn Game Development\nAnyone who is interested in game development with Unity and C# and also is looking for an interactive, project-based course\nArtists who want to learn to bring their assets into games\nAnyone who is looking for a new hobby which can turn into a profitable business\nWhat you will learn?\nC# Programming Basics\nVisual Studio IDE\nUnity Editor\nUnity Concepts\nUser Interface\nPhysics\nTips and Trick for Unity\nc#\nc# net\nunity c#\nc# unity\nc sharp\nc sharp programming\nselenium webdriver with c sharp\nselenium with c sharp\nc sharp for beginners\nselenium c sharp\nc sharp from scratch\nand more!\n\n\nWhy would you want to take this course?\nOur answer is simple: The quality of teaching\nWhen you enroll, you will feel the OAK Academy`s seasoned developers expertise\nWhat is Unity?\nUnity is a development engine for 2D and 3D games and experiences It supports Virtual Reality (VR), Augmented Reality (AR), and Artificial Intelligence (AI) for user interactions While the top three uses of Unity continue to be games and interactive experiences, pre-visualization for films, and architecture visualization, Unity is steadily growing in many other industries Imagine new customer experiences and training videos that include user participation The ability to interactively engage users increases the power of a presentation Unity has become the go-to tool for distance teaching videos and interactive tutorials Unlike other game engines, Unity does not create games The company’s focus remains to build the best game engine for anyone in the world with an idea\nIs Coding required in Unity?\nCoding is not a requirement Unity includes a visual scripting tool called Bolt, which doesn't require coding and provides two graph types for users to implement their ideas Flow Graphs allow the user to implement game flow for low-level logic and complex tasks State Graphs implement finite state machines (FSM) for high-level logic and state management Bolt allows users to edit and create graphs in Play Mode, enabling users to build and prototype games while playing them Bolt is available for download from the Unity Asset Store PlayMaker is a fee-based visual coding tool also available for use with Unity Developers prototype gameplay and artificial intelligence (AI) behaviors associated with objects INSIDE and Hearthstone are Unity games developed with PlayMaker Adventure Creator is another paid visual scripting tool available for use with Unity\nHow does the Unity game engine work?\nUnity operates like a generic scene player It is a game runner with a collection of assets When the game starts, Unity initializes the settings for the interfaces it needs to run, including graphics, audio, and input devices After the splash scene, the first scene of the game loads The scene contains a hierarchy of the game objects and the assets Unity loads all instances of the scripts with reference to them After initialization, Unity runs in a loop or cycle, executing each game scene The scene order is based on the hierarchy loaded during initialization The cycle starts with rendering the scene for the game camera, executing physics simulations and scripted events Then Unity executes the Update and LateUpdate scene scripts and internal operations Repeating this cycle steps the user through the scene states rendering the full game experience\n\nIs Unity good for beginners?\nUnity is an excellent program for beginners to learn It has actually become somewhat of a trend for new programmers to use the game engine as an introductory stage before moving on to learn state logic and C# programming, so anyone looking to delve into 3D game development might find Unity the perfect place to start — whether you're considering self-guided or structured learning Udemy has plenty of beginner tutorials that cover fundamentals like using the editor, creating and updating objects and events, and building and running games For those with a bit more experience, you can also find intermediate tutorials that will teach you how to build a game from scratch incorporating advanced Virtual Reality, Augmented Reality, and Artificial Intelligence features\n\nShould I learn Unreal or Unity?\nAs the top game engines, Unreal and Unity often compete head-to-head for new users Depending on the skills and goals of the user, some differences may tip the user one way or the other Unity uses C#, and unreal uses C++ C# is easier to learn Both products include a visual scripting tool allowing the user to avoid coding altogether VR and AR are better defined in Unity and have a longer history of support Designers and visual artists favor the quality and hands-on control over visual assets in Unreal Indie developers and mobile game developers favor Unity Among AAA-industry games developed with funded teams, Unreal is the more popular choice Both Unity and Unreal maintain a significant online presence with forums and tutorials The Unity Asset Store and the Unreal Marketplace provide free and paid assets\nNo Previous Knowledge is needed!\nThis course will take you from a beginner to a more experienced level\nIf you are new to C# or Unity, no problem, you will learn anything you need to start with C# Unity\nIf you are already used to Unity and you just need a refresher, you are also in the right place You will learn step by step with hands-on examples\nPrefer to learn the app monetization?\nCheck-out our sister course, the Mobile App Marketing: Learn App Monetization From Scratch\nFresh Content\nIt’s no secret how gaming technology is advancing at a rapid rate New tools are released every day, and it’s crucial to stay on top of the latest knowledge With this course you will always have a chance to follow latest trends\nVideo and Audio Production Quality\nAll our contents are created/produced as high quality video/audio to provide you the best learning experience\nYou will be,\n· Seeing clearly\n· Hearing clearly\n· Moving through the course without distractions\nYou'll also get:\nLifetime Access to The Course\nFast & Friendly Support in the Q&A section\nUdemy Certificate of Completion Ready for Download\nDive in now!\nWe offer full support, answering any questions\nSee you in the Unity C# Game Development: Learn C# Unity From Scratch course!",
      "target_audience": [
        "Anyone who wants to learn C#",
        "Anyone who wants to read and write C# code",
        "Anyone who wants to develeop unity 2D or unity 3D games",
        "Anyone who wants develop their own game with unity",
        "Anyone who want to learn game development & design with c# unity",
        "Anyone interested in Unity and C# and is looking for an interactive, project-based course",
        "Anyone who are willing to make a career in Game Development"
      ]
    },
    {
      "title": "Creating turn-based game, Unity Engine",
      "url": "https://www.udemy.com/course/turn-based-strategy-game-development/",
      "bio": "Unity 3D, C#, Pathfinding, AI, Design Patterns, Game Architecture and much more",
      "objectives": [
        "Unity, Development of a tactical turn-based game, C#, pathfinding, AI",
        "If you are tired of platform games then this is the course for you. You will learn how to work with Unity and create strategy games"
      ],
      "course_content": {
        "Creating the Battlefield": [
          "Project Plan",
          "Installing Unity and Visual Studio",
          "Extra Lecture. Canvas",
          "Creating the first object",
          "UI Image",
          "Positioning GameObjects",
          "Variables. Value and Reference types",
          "Extra lecture. Prefabs (Unity 2020)",
          "Creating Hex Prefab",
          "Canvas, Transform, RectTransform",
          "Hexes Prefabs",
          "Creating Battlefield",
          "Else-If Statement, Ternary Operator",
          "Basics of OOP: encapsulation, inheritance, polymorphism",
          "Access Modifiers",
          "Methods. Parameters. Ref, In, Out",
          "Hero Prefab",
          "Animation",
          "For Loop",
          "Array, Two-Dimensional Array",
          "Coordinate System",
          "Enumeration",
          "Foreach loop",
          "All about UI Button"
        ],
        "Movement": [
          "List<T>",
          "Adjacent hexes",
          "Start, Awake, Update functions",
          "Static classes and members",
          "Available Positions",
          "Inheritance",
          "Interface",
          "Properties",
          "Optimal Path, p.1",
          "Optimal Path, p.2",
          "Movement, p.1, Time.deltaTime",
          "Movement, p.2",
          "Movement, p.3, Ground Regiment"
        ],
        "Scrollable Bar": [
          "Scriptable Objects, Serialization",
          "Abstract classes",
          "Heroes",
          "Scroll Rect, Grid Layout Group",
          "Instantiate method",
          "UI Button",
          "OnMouseDown() method",
          "Observer Pattern, Destroy() method",
          "Delegates",
          "Enemy Deployment",
          "Start Button",
          "Completing Hero Prefabs"
        ],
        "The Battle": [
          "The Attacking Regiment",
          "Melee fighter looks for target",
          "Ranged fighter looks for target",
          "The Melee fighter attacks",
          "Coroutine",
          "Particle System",
          "The Arrow's flight",
          "The Mage Ball",
          "AI looks for positions to occupy",
          "AI Calculates distance",
          "AI makes a decision",
          "AI attacks",
          "Turns and Rounds",
          "Game Over"
        ],
        "Bonus Section": [
          "Constructors: Random hex-tiled Field",
          "Correct understanding of the Lerp method",
          "Correct understanding of the Lerp method-2",
          "Realistic arrow flight in an arc",
          "Catapult Fires. Physics2D"
        ]
      },
      "requirements": [
        "For beginners and professionals"
      ],
      "description": "We all remember and love the Heroes of Might and Magic series. Tactical combat is the pinnacle of smart fighting games. Anyone can create a game from scratch. We are going to prove this together.  This course is about IDEAS, С sharp and Unity3D. All This will save your TIME.\nCreate something serious from scratch.\nUnity 2019. With some upgrades to 2020\nThe topics covered:\nIdeas:\nHow to find available positions?\nHow to move hero avoiding obstacles?\nHow how to distinguish between allies and enemies?\nHow to distinguish between deserts, swamps and grass?\nHow to manage scripts?\nHow to define the Optimal Path?\nHow to visualize the damage?\nHow to create a ranged attack?\nHow does the enemy AI make a decision?\nHow to manage turns and rounds?\nHow to place allied regiments?\nHow to make a flying hero fly over water and mountains?\nUnity and c# topics\nBasics of OOP\nAnimations\nElse-If Statements, Loops\nVariables, Properties and Types\nClasses and Objects\nCanvas and Images, anchors and screen resolution\nSprite Renderer, Transform, Rect Transform Components\nPrefabs\nParticle Systems\nArrays and Lists, multi-dimensional array, jagged array\nInterface\nAbstract classes\nScriptable Objects\nDesign Patterns\nArtificial Intelligence\nCode architecture\nMovement\nOptimal path\nScrollable Storage\nRounds and Turns\nC# Methods, ref, out, in\nSprite Renderer\nSerialization\nCoroutine\netc\nThe course is good for those who want to create the game structure using interfaces. The course will be updated frequently for additional ideas.\nPS.  You also will get more than 20 isometric hexagon sprites and bonus ideas:)",
      "target_audience": [
        "Beginners and professionals in game development"
      ]
    },
    {
      "title": "Unreal Engine 5: Build a Complete Survival Game in UE5",
      "url": "https://www.udemy.com/course/unreal-engine-5-build-a-complete-survival-game/",
      "bio": "Create an epic survival game with crafting, combat, and modular systems on a tropical island — powered by UE5 Blueprints",
      "objectives": [
        "Build a full survival game from scratch using Unreal 5’s Blueprints.",
        "Master modular systems for crafting, building, and inventory setups.",
        "Create a slick grid-based inventory that’s easy to expand and customise.",
        "Develop advanced AI to keep players on their toes (and running!).",
        "Design a beautiful, immersive tropical island with Unreal’s tools.",
        "Optimise Blueprints to make your game run smooth, even in intense scenes.",
        "Learn efficient ways to chop, harvest, craft, and conquer the wild.",
        "Tackle tricky game mechanics and make them work seamlessly together."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome to the Course",
          "Project Creation",
          "Accessing Our Projects",
          "Community & Support"
        ],
        "Character Setup": [
          "Section Intro - Character Setup",
          "True First Person Character",
          "Footsteps",
          "Holding Item State"
        ],
        "Island Creation": [
          "Section Intro - Island Creation",
          "Import Megascans Assets",
          "Fab Marketplace Update",
          "Fab - Replacement Assets",
          "Island’s Landscape",
          "Ocean",
          "Paint Foliage, Rocks and Corals"
        ],
        "Stats System": [
          "Section Intro - Stats System",
          "Stats Actor Component",
          "Increase and Decrease Stats",
          "Stats Timers",
          "Player Damage",
          "Stats Widget",
          "Damage Effects",
          "Sprint",
          "Stat Icons"
        ],
        "Inventory System": [
          "Section Intro - Inventory System",
          "Items Database",
          "Inventory Actor Component",
          "Add Item",
          "Remove Item",
          "Inventory Grid",
          "Item Slot",
          "Inventory Grid Update",
          "Item Equipment",
          "Equipped Item Slot Color",
          "Equipped Item Widget",
          "Add Item Notification",
          "Item Slot Hover and Tooltip"
        ],
        "Item Pickup and Resources System": [
          "Section Intro - Item Pickup and Resources System",
          "Item Blueprint",
          "Pickup Interface",
          "Resource Blueprint",
          "More Items",
          "Action Blueprint Component",
          "Tree Chopping",
          "Harvest Niagara Effects",
          "Make Item Slots Bigger"
        ],
        "Item Crafting System": [
          "Section Intro - Item Crafting System",
          "Recipe Structure",
          "Can Craft Function",
          "Crafting Widgets",
          "Add Crafting to Inventory Widget",
          "Crafting Widget Functionality",
          "Add Crafting Slots Widget"
        ],
        "Inventory Polish and Character Viewport": [
          "Section Intro - Inventory Polish and Character Viewport",
          "Inventory Widget Polish",
          "Character Render Target",
          "Character Viewport",
          "Inventory Hover and Click Sounds",
          "Inventory Opening Animation"
        ],
        "Building System": [
          "Section Intro - Building System",
          "Building Parts Database",
          "Building Component",
          "Build Preview",
          "Build Update",
          "Build Placement",
          "Build Part Classes",
          "Build Sockets and Snapping",
          "Integrate Building with Inventory"
        ],
        "Animal AI": [
          "Section Intro - Animal AI",
          "Animal AI Blueprint",
          "Animal AI States",
          "Animal AI Player Detection and Attack",
          "Animal AI Damage Health",
          "Animal AI Tiger"
        ]
      },
      "requirements": [
        "Some experience with Unreal is needed."
      ],
      "description": "Fancy building your own survival game in Unreal Engine 5? This course has got you covered!\nWe’re talking about crafting, chopping trees, battling enemies, and building your own tropical island paradise.\nYou’ll master core mechanics like a modular inventory, robust crafting systems, and even advanced player gameplay.\nPlus, we’ll show you how to design enemy AI that’ll keep players on their toes!\nOur step-by-step guidance means you’ll develop a polished, full-featured survival game you can be proud of.\nIf complex mechanics or modular coding have been holding you back, don't sweat it. We break down advanced concepts so they’re easy to grasp and apply, helping you code smarter, not harder.\nBy the end, you’ll be creating modular systems like a pro.\nThe best part? No more half-finished projects gathering dust. Our structured approach ensures you’ll see your game come to life, one satisfying mechanic at a time.\nThis course is perfect for intermediate Unreal users, survival game enthusiasts, or anyone eager to create a full project from scratch.\nIf you’re itching to finish a game from start to finish, this is your shot.\nSo, what are you waiting for? Let’s dive in, level up those Unreal skills, and create something epic!",
      "target_audience": [
        "This course is great for you if you're an Intermediate Unreal user.",
        "It's also ideal if you're a survival genre lover.",
        "And generally for anyone who wants to create a full project!"
      ]
    },
    {
      "title": "ROBLOX Studio 2025: The Ultimate Scripting Mastery Course",
      "url": "https://www.udemy.com/course/roblox-studio-lua-luau-scripting-basics/",
      "bio": "A guided Lua scripting journey to go from ZERO to HERO in ROBLOX Studio!",
      "objectives": [
        "Become competent in Lua / Luau scripting!",
        "Be able to solve and debug problems in your scripts!",
        "Understand and use ROBLOX studio efficiently!",
        "Understand and utilize the many services available to scripters from the ROBLOX API.",
        "Plan out and create ROBLOX games.",
        "Store and retrieve player data in DataStoreService.",
        "Understand the Client-Server communication model.",
        "Create and script your first games!",
        "Once you learn one programming language, you can learn them all!",
        "Get support in the Q&A section!"
      ],
      "course_content": {
        "Introduction Section: How to get started with ROBLOX studio": [
          "Intro to the course",
          "Join the Discord!",
          "Downloading ROBLOX studio & change studio settings",
          "Disabling the new Beta User Interface",
          "Studio Basics",
          "Clarification for 'Join Surfaces'",
          "Your first script!"
        ],
        "Lua Fundamentals & Scripting Basics": [
          "Basics 1: VARIABLES!",
          "Variables Recap",
          "Basics 2: Conditionals (If Statements)",
          "If Statements Recap",
          "Simple Practice Activity (If statements)",
          "Basics 3: Lexical Scope",
          "Lexical Scope Recap",
          "Basics 4: STRINGS!",
          "String Manipulation Recap",
          "Basics 5: TABLES!",
          "Tables Recap",
          "Basics 6: LOOPS!",
          "Loops Recap",
          "Loops Practice Activity & continue and break keywords",
          "A neat feature with for loops",
          "First Basics Quiz",
          "Basics 7: Comparison Operators",
          "Comparison Operators Recap",
          "Basics 8: Logical Operators",
          "Logical Operators Recap",
          "Basics 9: FUNCTIONS!",
          "Functions Recap",
          "Functions Practice Activity",
          "Notice on the next 2 lectures",
          "Basics 10: Metatables",
          "Metatables Recap",
          "Basics 11: Classes & Constructors",
          "Constructors Recap",
          "Basics 12: Coroutines",
          "Coroutines (document)",
          "Coroutines Recap",
          "Basics 13: Arithmetic & math library",
          "Arithmetic & math library Recap",
          "Basics 14: Understanding & solving errors",
          "Errors Recap",
          "Final Practice Activity",
          "Algorithms",
          "End of Section Quiz",
          "Utilize the cheat sheet!"
        ],
        "ROBLOX API specifics": [
          "Accessing services & the workspace",
          "Local scripts vs. Server scripts",
          "Local Script & Server Script Quiz",
          "Module Scripts",
          "Module Scripts Quiz",
          "The Task Library",
          "Task Library Quiz",
          "ROBLOX data types",
          "Data Types Quiz",
          "All about CFRAMES!",
          "CFrames Quiz",
          "What is an Enum?",
          "Enum Quiz",
          "Connecting to events",
          "Events Quiz",
          "Events Practice",
          "Client-Server Communication",
          "Remote Events & Functions",
          "Client-Server Communication Quiz",
          "Create a consumable item! (all about TOOLS)!",
          "Creating animations for our donut!",
          "Implementing animations & sounds into our donut!",
          "Disco Floor Activity",
          "TweenService & BetterTween",
          "Tween Service Quiz",
          "BetterTween Practice",
          "Toolbox Models & Finding Malicious Scripts",
          "Handling & managing errors, continued!",
          "Error Messages Quiz",
          "Listening to user input (User Input Service)",
          "UserInputService Quiz",
          "Binding actions (Context Action Service)",
          "ContextActionService Quiz",
          "Adding tags to instances (Collection Service)",
          "CollectionService Quiz",
          "Instance Streaming",
          "Instance Streaming Quiz",
          "Storing data in the cloud (DataStoreService)",
          "Ordered Data Stores",
          "Data Stores Quiz",
          "Raycasting",
          "Raycasting Quiz",
          "TextChatService and Rich Text Markup",
          "Rich Text Markup Quiz",
          "Moving character models along paths (PathfindingService)",
          "Pathfinding Service Quiz",
          "Attributes: Store data on Instances!",
          "Attributes Quiz",
          "Why google is going to be your friend",
          "Learning more about ROBLOX Instances and Data Types"
        ],
        "Instances & Studio Tools": [
          "Terrain Tool",
          "Properties of Parts",
          "Particle Emitters",
          "Textures & Decals",
          "Surface Appearances",
          "Attachments",
          "Surface Lights, Spot Lights, & Point Lights",
          "Highlights",
          "SurfaceGUIs, BillboardGUIs, & ScreenGUIs",
          "Collision Groups",
          "Lighting Service",
          "Trails",
          "Beams",
          "Clouds",
          "ProximityPrompts",
          "Physics! (VectorForce, LinearVelocity & AssemblyLinearVelocity)"
        ],
        "UI Design": [
          "What is this next section about?",
          "GUI Objects",
          "Scale, Offset, & Anchor Points",
          "Scrolling Frames",
          "UI Constraints",
          "UI Buttons",
          "9-Slice Design",
          "Text Boxes",
          "Canvas Groups",
          "UI Design Challenge"
        ],
        "Creating our First Game": [
          "What is our first game?",
          "Project setup & map design",
          "Designing the starting menu UI",
          "Scripting the UI",
          "Scripting the camera",
          "Adding a sprint system",
          "Creating a melee weapon (knife)",
          "Creating a healing tool (medkit)",
          "Note for previous lecture",
          "Scripting the leaderboard",
          "A quick note",
          "Using the DataStoreService to save leaderboard data",
          "Disabling player collisions",
          "Prep work before scripting guns",
          "Listening to user input for guns",
          "Verifying & applying gun effects from the server",
          "Adding bullet holes to our gun rays",
          "Creating animations for our guns",
          "Scripting & implementing animations into guns",
          "Adding UI to our guns",
          "Adding hitmarkers to guns",
          "Completed gun models",
          "Scripting ammo crates",
          "Scripting zombie AI Part 1",
          "Scripting zombie AI Part 2",
          "Animating our zombies",
          "Scripting economy system",
          "Scripting the wave system Part 1",
          "Scripting the wave system Part 2",
          "Adding badges",
          "Adding gamepasses",
          "Scripting the spectating system",
          "Creating a splash damage tool (grenades)",
          "Saving player's tools",
          "Note for previous lecture",
          "Play-testing our completed game",
          "Editing & publishing the game",
          "How to sponsor & advertise your game",
          "The completed game!"
        ],
        "What's next?": [
          "Reading the Roblox Documentation Wiki",
          "ChatGPT: What is it & how can we use it?",
          "Congratulations!"
        ],
        "'How to' Section": [
          "How to create: House Plots",
          "How to create: Driveable vehicle",
          "How to create: Day & Night cycle",
          "How to create: Basic crafting system",
          "How to create: Loading screen"
        ],
        "Object-Oriented Programming & Intermediate Concepts": [
          "Welcome to the next sections!",
          "What is Object-Oriented Programming (OOP)?",
          "Metatables",
          "Inheritance",
          "Composition",
          "Abstraction",
          "Polymorphism",
          "Encapsulation",
          "OOP Practice 1: Toxic Gas Cloud",
          "OOP Practice 2: Landmine",
          "String Formatting",
          "OOP Quiz"
        ],
        "Type Annotation": [
          "Type annotation & Type Inferencing modes",
          "Note for previous lecture",
          "Creating a new type",
          "Union, Singleton, Variadic, & Intersection types",
          "Built-in types & Type refinement",
          "Type Casting",
          "Generics",
          "Type annotation quiz"
        ]
      },
      "requirements": [
        "No previous programming experience required!",
        "Motivation, determination, and self-discipline to learn and create.",
        "Computer & internet connection."
      ],
      "description": "USE CODE DEVELOPERS FOR A SWEET DISCOUNT!\nThank you for viewing this course!\nAre you a newbie looking for guidance in the world of ROBLOX game development? Or perhaps are you a seasoned developer who wants to learn new skills?\nThen this complete mastery course is the perfect guide for you to learn the many important tools in ROBLOX Studio that you'll need to become a highly skilled ROBLOX developer!\nYou will learn all of the essentials of the Luau programming language to script games, create tools, handle player data, create game passes, and much more!\nIf you've always desired to create games on ROBLOX, but you had no idea where to begin, then this is the ultimate mastery course for you!\nPerfect for Developers in All Skill Ranges\nWhether you're just a beginner starting your journey or someone who has already developed in ROBLOX Studio, absolutely no prior experience in programming is required!\nComprehensive Foundation into the World of Scripting\nThis course will first introduce you to all of the essential tools of Studio and Lua scripting, and then we’ll move into more advanced topics so you will develop a well-rounded skillset in ROBLOX Studio crucial for game creation.\nOver 50 Hours of Curated Lectures\nThe ROBLOX API is vast and full of many features, and this course will make sure you understand how to utilize these many useful features in your games with an abundance of high-quality lectures to guide you the entire way. You won’t be left behind!\nWork Together with me on Many Projects\nThis course includes many projects to help you understand and learn how to practically implement the knowledge you’ve gained from previous lectures to allow you to unleash your creative drive. This includes working with me on two complete game projects, and not just a boring obby or simulator game, but a zombie-apocalypse wave game and a horror game!\nStrong Community Support and Instructor Communication\nOnce enrolled, you can join our online community of students in many skill ranges and get scripting assistance from me, your instructor, as well as other students in the classroom. This is an opportunity to engage and share your projects with us and get help when you need it the most!\nAll Resources Made Available to You\nAll resources used during the lectures, including code, models, plugins, and documentation will be attached with their associated lectures, so it’s easy for you to look back at anything you didn’t understand the first time. You’ll never be left in the dark!\nLearn Useful Services Crucial for Game Development\nWe will be taking a look at many useful services and features not commonly taught among ROBLOX developers, such as the DataStoreService, PathfindingService, ContextActionSerivce, MemoryStoreService, developer products, raycasting, instance streaming, and much, much more!\nAnd with more than 200+ hours spent prepping, scripting, recording, editing, and curating this mastery course, you are spending less than 25 cents (USD) for one hour of my time!\nWhether you’ve been thinking about ROBLOX game development for a while or you’re already a seasoned developer, this course will push you to your limits and open up new doors of game development to help you create whatever you imagine! Who knows, maybe YOU can be the next front-page ROBLOX developer!\nWith all of that out of the way, I’m excited to work with you and I’ll see you in the classroom soon!\nUSE CODE DEVELOPERS FOR A SWEET DISCOUNT!",
      "target_audience": [
        "Beginner Lua / Luau programmers",
        "Aspiring ROBLOX game developers",
        "Programmers that do not know Luau syntax or ROBLOX studio",
        "Programmers already on ROBLOX who may want extra help or insight"
      ]
    },
    {
      "title": "Android Game Development - Create Your First Mobile Game",
      "url": "https://www.udemy.com/course/android-game-development-course/",
      "bio": "Learn Android Game Development with Android Studio and Java by making a complete Flappy Bird game in SurfaceView",
      "objectives": [
        "In this course you'll be able to build a complete Flappy Bird game in less than 3 hours.",
        "Building games is a great fun. You'll enjoy it.",
        "A game that you build yourself, and publish is a fantastic resume piece and could help you get a great job in Android Development.",
        "Create an efficient game loop.",
        "Learn the basic framework for games.",
        "Everything you need to know to build your own games using Android Studio and Java.",
        "You'll be able to brush-up your Java skills.",
        "Learn Game Development Fundamentals.",
        "Learn Android Game Development Step By Step.",
        "Monetize your app with Google Admob and start getting some revenue."
      ],
      "course_content": {
        "Introduction to Android Game Development": [
          "Introduction to the Course",
          "Which programming language to choose?",
          "Important Update: Must read before you proceed!"
        ],
        "Getting started": [
          "Game Resource",
          "Join The Community",
          "Create the Project in Android Studio",
          "A high-level overview of project Flappy Bird",
          "Definition of Classes and how they work together"
        ],
        "Create the Framework": [
          "Create BitmapBank class",
          "Create GameView class",
          "Create GameThread class",
          "Create BackgroundImage class",
          "Continue constructing the GameEngine",
          "Finish the Framework"
        ],
        "Draw the Bird and Tubes": [
          "Draw the bird, apply Gravity and interact via Touch",
          "Draw the Tubes",
          "Change Tubes randomly"
        ],
        "Add More Fun": [
          "Scoring System",
          "Collision Detection",
          "Add Sound Effects"
        ],
        "Game Over": [
          "Design GameOver screen",
          "It's GameOver",
          "Monetize your app with Admob",
          "Idea for Creating Levels"
        ],
        "Course Wrap-Up": [
          "Bye for now",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "We'll be using Java in this course, and since it's an OOP language, it's important to learn OOP fundamentals first. One of my courses titled \"Object Oriented Programming Fundamentals\" teaches that. Note that, it does not teach Java specifically. But it's important to learn that first to be able to work with Java, Kotlin, C++, Python, C# or any other OOP based languages.",
        "You should have Android Studio installed.",
        "Some basic programming experience like variable, if-else, loop, method.",
        "You don't need prior knowledge in Android Game Development."
      ],
      "description": "Important Note:\nAll source code provided in this course remains valid and compatible with the latest versions of Android Studio and Android SDKs.\nPlease note, however, that the course was originally created using an earlier version of Android Studio and the Android SDK.\nIf your goal is to:\nLearn game development logic from the ground up,\nBuild a game loop from scratch,\nCreate your own custom game framework to develop future games more quickly and efficiently,\nAnd you wish to code entirely in Java without relying on external game engines,\n— then this course is ideal for you. Otherwise, we recommend exploring other courses that better match your needs.\n\n\nHi, do you want to learn how to build Android Games in Java?\nMy name is Sandip. I have published more than ten android games on Google Play. So, I happen to know about android game development and in this course, I’ll show you exactly how to create this awesome Flappy Bird game using Android Studio and Java.\nSome Amazing Reviews From Our Learners\n- This a good course and easy to understand.\n- I enjoyed the course. I recommend it.\n- It was a really well explained course thank you Sandip!\n- This course is amazing. I recommend it to anybody starting out in Android Game development!\n- Its straightforward and well organized.\n- I recommend this course if you are a beginner want to learn android games. very great content.\n- This course helps me to improve my skills, to know how to build a 2d game. I decide to learn java and android, and this course give me experience, and i hope it helps me in future.\nCourse Overview\nThis course is perfectly suitable for anyone who wants to learn the Game Development Fundamentals like creating an efficient Game Loop, handling the Touch Event, Collision Detection, Playing Sound Effects, Score, saving Personal Best, designing XML Layout, etc. If you want to learn the basic framework for games then this is the right course for you. And, if you want to learn android game development by writing code in Java then you’ll enjoy this course as I walk you through the process of creating this game, from start to finish, step by step in a completely hands-on fashion. While my previous course focused on using Android’s View class, this course is aimed to provide a solid foundation for a more dedicated Android class for game development: SurfaceView.\nI'll show you step-by-step how to Create Different Levels for your game and add features like changing the game background and increasing the speed of the Tubes for every succeeding level to make your game more interesting and engaging, in the easiest way possible. This course improves your problem-solving ability as I invite you to find the solution yourself so that you can think and code like a professional. I am also available to support you along the way. I'll solve your coding problems or any feature that you want to implement so that you can have an enjoyable learning experience and focus on the things that matter the most once you fully understand the overall concepts. This course doesn't stop here. I'll demonstrate how to monetize your app through Google AdMob Banner and Interstitial (Fullscreen) ads so that you can start getting some revenue. You'll get all the project source codes once you purchase this course which you're free to use for your personal work. As a motivation, I've included a few real apps made by my students with some help from this course (and/or with some help from my other android game development course titled Android Game Development - Learn Core Concepts).\nAt the end of the course, you’ll be able to build a complete Flappy Bird game using Java which you can publish on Google Play. You'll have a clear understanding of the core concepts behind a 2D game. You’ll have improved Java skills. I promise it will be fun making this Flappy Bird game together. You'll enjoy the course.\nAndroid is the largest ecosystem for gaming so if you’re serious about your career in the gaming industry, this is a great place to start. Or, if you just want to learn programming then Java is an excellent language which is also one of the official languages for Android and building games with Java is great fun. Over the years, I have helped thousands of students in making their Android games and there’s absolutely no reason why you can’t as well.\nStart Learning Now. Hit the Enroll Button!",
      "target_audience": [
        "Beginner to Java programming",
        "Beginner to Android development",
        "Beginner to Android Game Development"
      ]
    },
    {
      "title": "Modern UI Development in Unity 4.6/5.0",
      "url": "https://www.udemy.com/course/modern-ui-development-in-unity-46-or-50/",
      "bio": "This series goes over the core concepts of Unity's UI system and also shows the creation of an entire game using the UI.",
      "objectives": [
        "Become familiar with Unity's UI system",
        "Create an entire game using the UI for all of its visual aspects.",
        "Apply all of what is learned in a real world scenario.",
        "Learn to think like a UI developer."
      ],
      "course_content": {
        "Introduction to the UI": [
          "Introduction",
          "UI Crash Course",
          "The Canvas",
          "Rect Transforms",
          "Images, Text, Rendering and Effects",
          "Input, Selectables, Navigation, and Transitions",
          "Scrolls and Masks",
          "Automatic Layout Groups",
          "Main Menu System"
        ],
        "Practical Game Development with The UI": [
          "Introduction",
          "Symbol Database",
          "Board Tiles",
          "Board Layout Group",
          "Game Board Stub and Test Fixture",
          "Game Board Implementation",
          "Main Game UI",
          "Options Panel",
          "Game HUD",
          "Gutter: Construction",
          "Game Controller",
          "Gutter: Drag and Drop",
          "Win and Lose",
          "Polish, Mobile, and Conclusion!"
        ]
      },
      "requirements": [
        "You will need Unity 4.6 or later.",
        "For the code, we use Visual Studio 2012 - however, you could also follow along just as well with Mono Develop or Visual Studio Express 2012 or later!"
      ],
      "description": "Create a FULL, UI DRIVEN GAME using Unity 4.6, or the latest version, Unity 5.0! Start out by learning the core concepts of the new UI system. Unity's new UI system gives you the flexibility and WYSIWYG (what you see is what you get) experience to create quickly! You will take what you learned about the UI system and apply it to your game, digging even deeper into advanced features of the system. You'll also see how to put together a solid, event driven architecture that powers your game, all from the UI. Nothing will be left out: you will get the experience of building a production-ready application. Section 2 really brings everything together into a wider context, showing that if we work with the UI, we are given all of the power and flexibility we've been promised by Unity Technologies!",
      "target_audience": [
        "This course is for anyone wanting to become familiar with Unity's UI system and those wanting to learn how to construct their own user interface. This series is probably not for advance programmers who already know what they're doing."
      ]
    },
    {
      "title": "Full Scratch 3.0 Programming Course: Beginner to Advanced",
      "url": "https://www.udemy.com/course/learn-to-code-with-scratch-programming-course/",
      "bio": "Use Scratch 3.0 to learn universal programming concepts, create games, design apps, make models, and more!",
      "objectives": [
        "Become an expert with block-based programming",
        "Compatabile with all skill levels and all ages",
        "Learn to develop your own quality 2D/3D games and applications",
        "Understand the \"magic\" behind how computer programs actually work",
        "Be prepared to take on web development, app development, and game development",
        "Build up a solid knowledge of universal computer programming strategies, vocabulary, and logic",
        "Get comfortable with graphic, bitmap, and vector design regardless of artistic ability",
        "No downloads or software required"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Lecture 1 Quiz",
          "Creating a Scratch Account",
          "Lecture 2 Quiz",
          "Getting Familiar with the Scratch Website",
          "Lecture 3 Quiz",
          "Getting Familiar with the Scratch Editor",
          "Lecture 4 Quiz"
        ],
        "The Basics of Block-Based Computer Programming": [
          "What is a Computer Program?",
          "Lecture 5 Quiz",
          "The XY Coordinate System",
          "Lecture 6 Quiz",
          "Graphic Design: Sprites, Costumes, Stages, & Backdrops",
          "Lecture 7 Quiz",
          "Motion",
          "Lecture 8 Quiz",
          "Looks & Sounds",
          "Lecture 9 Quiz",
          "Controls, Operators, & Conditions",
          "Lecture 10 Quiz",
          "Sensing & Variables",
          "Lecture 11 Quiz",
          "Calling Custom Scripts",
          "Lecture 12 Quiz"
        ],
        "Beginner Projects": [
          "Making a Simple Game",
          "Lecture 13 Quiz",
          "Making a Calculator",
          "Lecture 14 Quiz",
          "Making an Art Application",
          "Lecture 15 Quiz",
          "Making a Music Project",
          "Lecture 16 Quiz",
          "Making an Interactive Story",
          "Lecture 17 Quiz",
          "Data Types Review",
          "Lecture 18 Quiz"
        ],
        "Intermediate Projects": [
          "Making a Scrolling Platformer",
          "Lecture 19 Quiz",
          "External Libraries & The \"Pen\" Tool",
          "Lecture 20 Quiz",
          "Making a Render Machine",
          "Lecture 21 Quiz"
        ],
        "Advanced Content": [
          "Understanding Cloud Variables",
          "Lecture 22 Quiz",
          "Working with Phosphorus",
          "Lecture 23 Quiz",
          "Where to go From Here",
          "Lecture 24 Quiz",
          "Conclusion",
          "Lecture 25 Quiz"
        ],
        "Bonus Content": [
          "Final Exam (Optional)"
        ]
      },
      "requirements": [
        "A computer and general computer skills",
        "Basic reading/listening ability",
        "Access to the Internet"
      ],
      "description": "Whether you're a parent looking for a good starting place for your kids to get into computer programming, a teacher looking for a great way to introduce software development to a technology class, or just a curious person looking to learn more about how programming actually works, this course is for you.\n\n\nThis course focuses on what's referred to as \"block-based programming\", where the developer can drag and drop functions together to create scripts that complete tasks, whether they be simple or complex. This course starts out by teaching the universal basics about computer programming and then increases difficulty, contributing to a cumulative knowledge while reinforcing previously learned material through interactive activities.\n\n\nNot only does this course carry you from beginner to expert in block-based programming, but it gives you a strong boost for whichever direction you want to go after taking the course, if you want to continue your programming career. Whether you're looking to get into advanced app development, game development, or web development, this course equips you with the universal concepts, vocabulary, and computer logic you'll need to know.\n\n\nAlthough this course ramps up to expert levels, it is designed to be as comprehensive, interactive, and reinforcing as possible making it suitable for all ages and abilities. Every core concept presented will be thoroughly explained, and the course provides recommendations for external resources after completion for where to go based on your personal interests.\n\n\nHere's what you can get from this course:\nLifetime access to 20 on-demand, video lectures that can be streamed anywhere, anytime.\nHours worth of videos, interactive activities, and hands-on projects.\nA strong programming vocabulary and strong grasp of many universal software development concepts.\nFluency in Scratch 3.0 and expert-level knowledge in block-based programming\nAbility in graphic design, 2D/3D game development, and more.",
      "target_audience": [
        "Beginner developers",
        "Kids interested in computer programming",
        "Anyone interested in Scratch and block-based programming",
        "People looking for a solid starting point in learning about software development",
        "Students",
        "Teachers",
        "Club Organizers",
        "After-school activity managers",
        "Computer programming summer camp leaders"
      ]
    },
    {
      "title": "Unreal Engine 5 PCG: Procedural Content Generation (English)",
      "url": "https://www.udemy.com/course/unreal-engine-pcg-english/",
      "bio": "Learn PCG to create game environments in the fastest way",
      "objectives": [
        "Learn Procedural Content Generation (PCG) in Unreal Engine 5.4",
        "Create game environments quickly, automatically, and accurately",
        "Building Generator",
        "Manage PCG Graph in the most efficient way",
        "Create points on any mesh",
        "Path Spline and Closed Spline",
        "Create custom PCG nodes",
        "Optimize performance"
      ],
      "course_content": {
        "Setup Project": [
          "Section: Setup Project",
          "Unreal Engine 5.4",
          "Create Project",
          "Third Person Template",
          "Create Level",
          "Plugin"
        ],
        "Tree": [
          "Section: Tree",
          "PCG Graph",
          "Surface Sampler",
          "Static Mesh Spawner",
          "Multiple Static Mesh",
          "Transform Point"
        ],
        "Rock": [
          "Section: Rock",
          "PCG Rock",
          "Self Pruning",
          "Bound Modifier",
          "Difference",
          "Node Order"
        ],
        "Foliage": [
          "Section: Foliage",
          "PCG Foliage",
          "Difference"
        ],
        "Parameter": [
          "Scale Multiplier",
          "Mesh",
          "Mesh and Weight",
          "Amount and Looseness",
          "Graph Instance"
        ],
        "Path Spline": [
          "Section: Path Spline",
          "Spline Actor",
          "Spline Sampler",
          "Projection",
          "Difference",
          "Multiple Spline",
          "Steepness"
        ],
        "Mesh Sampler": [
          "Section: Mesh Sampler",
          "Asset",
          "Get Actor Data",
          "Bound Modifier",
          "Mesh Sampler",
          "Normal To Density",
          "Select Points",
          "Subgraph",
          "Difference"
        ],
        "Close Spline": [
          "Spline Actor",
          "PCG Spline",
          "Difference"
        ],
        "Custom PCG Node": [
          "Section: Custom PCG Node",
          "Setup PCG Node",
          "Point Data",
          "Split 2 Arrays",
          "Construct Point Data",
          "Construct Data Collection",
          "Test PCG Node",
          "Node Title Override",
          "Ratio"
        ],
        "Tree Stump": [
          "Section: Tree Stump",
          "PCG Tree Stump",
          "Create Points Grid",
          "Tree Log with Mushrooms",
          "Subgraph Tree Stump",
          "Subgraph Loop",
          "Blueprint Actor for PCG",
          "Change Tree Stump Mesh",
          "Get Actor Property",
          "Tree Branch Asset",
          "Add Tree Branch",
          "Set Bound for each Mesh",
          "Set Bound Tree Stump",
          "Mesh Sampler 1",
          "Mesh Sampler 2",
          "Set Bound for Tree",
          "Difference",
          "Difference and Self Pruning",
          "Tree Stump Blueprint Property",
          "Named Reroute Node",
          "Data Asset"
        ]
      },
      "requirements": [
        "Basic knowledge of Unreal Engine",
        "Familiarity with Blueprint programming in Unreal Engine is an advantage"
      ],
      "description": "This is the English version of the course \"Unreal Engine 5.4 PCG - Tạo Môi Trường Game bằng PCG\".\nSo, what is PCG or Procedural Content Generation?\n\nImagine you want to add trees to a level, you have to determine the quantity, the spacing between the trees, etc. This is very time-consuming if done manually. But with PCG, you can do it quickly and accurately.\nIn the initial sections:\nGet familiar with the PCG framework\nLearn how to use the nodes in the PCG Graph\nUse the Surface Sampler node to create random points\nUse the Static Mesh Spawner node to create meshes from points\nIn the \"Rock\" section, you will add rocks to the level. When the level has various objects like rocks and trees, you will define how they interact with each other. For instance, if a rock and a tree overlap, you will decide whether to remove the rock or the tree.\nIn the \"Mesh Sampler\" section, instead of creating points on the landscape surface, you will learn how to create points on any static mesh. For example, I will use the Mesh Sampler node to create mushrooms on tree logs.\nBesides the existing/native PCG nodes, you will learn how to create new PCG nodes to suit your needs.\nFrom an initial point, you can create surrounding points. For example, each tree stump can have branches or tree logs around it.\nYou might like the \"Building\" section. You will learn how to create a tool for generating buildings. Since a building has many parts, I have broken the section into multiple lectures for each part. You will learn various use cases of the nodes from the previous sections. You can learn and apply a lot after completing this section.",
      "target_audience": [
        "For those who want to create game environments quickly and accurately",
        "For those who want to learn PCG in the latest version of Unreal Engine",
        "For those who want to learn the new features of Unreal Engine 5.4"
      ]
    },
    {
      "title": "Beginner to Expert Full Guide - Roblox Studio 2024",
      "url": "https://www.udemy.com/course/byteblox-expert/",
      "bio": "A full, throughly-explained guide for Roblox Studio beginners",
      "objectives": [
        "Learn the ins-and-outs of the game development process",
        "Unlock a full understanding of Roblox Studio and Roblox Lua",
        "Figure out how to apply what you've been taught",
        "The best framework for solving code-related issues",
        "Feeling proud from your work"
      ],
      "course_content": {
        "Unit 1: Roblox Studio": [
          "Introduction",
          "Downloading Studio",
          "Studio Overview",
          "Studio Extras",
          "Roblox Services",
          "Instances",
          "Unit 1 Challenge",
          "Unit 1 Quiz"
        ],
        "Unit 2: Parts and Scripts": [
          "Parts",
          "Pivot Editing",
          "Part Properties",
          "Tags and Attributes",
          "Snapping",
          "Part Instances",
          "Grouping Parts",
          "Scripts",
          "Changing Properties via Scripts",
          "Functions",
          "Built-in Functions",
          "Events",
          "LocalScripts",
          "Server vs Client",
          "Unit 2 Challenge",
          "Unit 2 Quiz"
        ],
        "Unit 3: Cash Generator": [
          "Unit Overview",
          "Saving Your Game",
          "Building the Cash Generator",
          "ClickDetectors",
          "ClickDetector Events",
          "Coding the Cash Generator",
          "Debounce",
          "Unit 3 Challenges",
          "Unit 3 Quiz"
        ],
        "Unit 4: Cash Values": [
          "Loading Our Saved Game",
          "Polishes",
          "\"PlayerAdded\" Event",
          "Adding the Cash Value",
          "Modifying the Cash Value",
          "Unit 4 Challenge"
        ],
        "Unit 5: DataStores": [
          "Unit Overview",
          "Setting up the DataStore",
          "Loading Existing Data",
          "Enabling DataStore Access",
          "Giving Data to Players",
          "Saving Player Data",
          "Handling Server Shutdown",
          "Unit 5 Challenge"
        ],
        "Unit 6: Pets": [
          "Importing Pet Models",
          "Adjusting the Pets",
          "Unit 6 Challenge"
        ],
        "Unit 7: Pet Shop (+ ModuleScripts)": [
          "Unit Overview",
          "Adding the Pet Shop",
          "Creating Pet-Related DataStores",
          "Fixing the DataStore Script",
          "Scripting the Pet Shop",
          "Explaining Pet Rarity",
          "Introducing ModuleScripts",
          "Scripting the Pet Rarity",
          "DataStoring the PetFolder",
          "Unit 7 Challenge"
        ],
        "Unit 8: User Interface": [
          "Introduction to GUI",
          "GUI Properties",
          "StarterGui vs PlayerGui",
          "Scripting the GUI",
          "RemoteEvents",
          "Unit 8 Challenge"
        ],
        "Unit 9: Pet Inventory": [
          "Unit Overview",
          "Creating the Inventory Frame",
          "Customizing the Inventory Frame",
          "Adding TextLabels",
          "Sell Button and Inventory Limit",
          "Adding a ScrollingFrame",
          "Creating a Toggle Button",
          "Creating a Pet Button Template",
          "Adding ViewportFrames",
          "Adding Text to the Pet Template",
          "Finalizing the Pet Template",
          "Scripting the ScrollingFrame",
          "Polishing the Pet Template",
          "Equipping/Unequipping the Pets",
          "Selling the Pets",
          "Creating a ServerScript for the Pet Inventory",
          "Creating a PetEquip Function",
          "Running the PetEquip Function",
          "Handling the RemoteEvents",
          "Scripting the Pet Inventory Limit",
          "Making the Pets Increase Cash",
          "Fixing the Pets",
          "Unit 9 Challenge",
          "Words of Wisdom"
        ],
        "Unit 10: Polishing/Finishing the Course": [
          "Creating a Starting Area",
          "Creating a Sell All Button",
          "Final Challenge",
          "Publishing Your Game"
        ]
      },
      "requirements": [
        "Zero programming experience needed. I will hold your hand throughout the entire course",
        "A computer/laptop which is able to run Roblox Studio"
      ],
      "description": "This course will cover every major aspect of Roblox Studio, from its layout to its scripting language. We will learn new skills with each lesson, applying them to a Pet Simulator game we will be working on throughout the entire course. This course is specifically designed to be valuable for both beginner and intermediate developers, as the skillset you'll leave this course with will be enough to classify you as a full, expert developer.\n\nI've designed this course with one goal in mind; getting rid of your frustrations, problems and confusions. Whether you are a complete beginner to Roblox Studio wanting to learn more, or a tired intermediate developer who just can't seem to understand what you're supposed to do, I will hold your hand throughout this entire course. I want to leave you with not only a highly valuable skillset, but also the knowledge of how you can properly utilize it to achieve what you TRULY want.\n\nAt last, we will also encounter challenges in forms of errors and bugs, and I will guide you through my efficient process of fixing them, and learning something new from the experience.\n\nAlways feel free to leave me questions and I'll be sure to respond as soon as I can. If you're ready to take that next step, then we'll see you on the other side :)",
      "target_audience": [
        "Beginners feeling frustrated with programming",
        "Entrepreneurs who want to learn a new money-making skill",
        "Someone who enjoys making games as a fun hobby",
        "Parents who want their kids to learn a new, fun skillset"
      ]
    },
    {
      "title": "Unreal Engine: Creating Widgets for UI",
      "url": "https://www.udemy.com/course/unreal-engine-creating-widgets-for-ui/",
      "bio": "Learn how to create UI menu systems for games like Fortnite, Horizon Forbidden West, Final Fantasy, and Call of Duty!",
      "objectives": [
        "What are Widgets and why are they important?",
        "How to create, display, and remove a widget from the viewport",
        "How to create, customize, and utilize the most frequently used UI elements",
        "How to add events and program your widgets using the Graph Editor",
        "Tips & Tricks for using Unreal Widgets",
        "How to create a simple Survival Game with pickups and damage",
        "How to make a Game Instance to transfer variables between levels",
        "How to create a Save Game to save and load your settings"
      ],
      "course_content": {
        "Introduction": [
          "Project Primer",
          "Making The Most Out Of This Course"
        ],
        "Creating Widgets": [
          "What is a Widget?",
          "Creating Widgets"
        ],
        "Widget Designer Mode": [
          "Widget Designer Mode: Designer Mode Window",
          "Widget Designer Mode: Widget Types - Common",
          "Widget Designer Mode: Widget Types - Input",
          "Widget Designer Mode: Widget Types - Misc",
          "Widget Designer Mode: Widget Types - Primitive",
          "Widget Designer Mode: Widget Types - Special Effects",
          "Widget Designer Mode: Widget Types - Panel",
          "Widget Designer Mode: Widget Types - Additional Functionality",
          "Widget Designer Mode: Widget Types - User Created",
          "Widget Designer Mode: Animations",
          "Widget Designer Mode: Conclusion"
        ],
        "Widget Graph Editor Mode": [
          "Widget Graph Editor Mode: Graph Editor Window",
          "Widget Graph Editor Mode: Blueprint Panel",
          "Widget Graph Editor Mode: Debugging"
        ],
        "Tips & Tricks": [
          "Tips & Tricks"
        ],
        "Creating A Survival Game": [
          "Creating A Survival Game: Introduction and Set Up",
          "Creating A Survival Game: Setting Up The Pawn",
          "Creating A Survival Game: Setting Up The Start Level",
          "Creating A Survival Game: Start Level Menu",
          "Creating A Survival Game: Settings Menu Part I",
          "Creating A Survival Game: Save Game and Game Instance",
          "Creating A Survival Game: Settings Menu Part II",
          "Creating A Survival Game: Animating the Menus",
          "Creating A Survival Game: Setting Up the HUD",
          "Creating A Survival Game: Creating the Score HUD",
          "Creating A Survival Game: Setting Up the End Game Widget",
          "Creating A Survival Game: Applying Settings to the Main Level",
          "Creating A Survival Game: Setting Up the Pick Ups",
          "Creating A Survival Game: Creating Electricity",
          "Creating A Survival Game: Unreal 5 Streaming Issue",
          "Creating A Survival Game: One More Thing..."
        ],
        "Conclusion": [
          "Conclusion",
          "BONUS LESSON: Advanced Widgets for UI Project Primer"
        ]
      },
      "requirements": [
        "Recommended: Basic computer knowledge",
        "Recommended: An understanding of basic navigation for the Unreal Engine",
        "Recommended: Unreal Engine 5.1 or higher installed",
        "Recommended: Desktop PC with Windows 7 (or later) 64-bit - OR - a Mac with Mac OS X 10.9.2 or later",
        "Recommended: DirectX 11 compatible video card",
        "Recommended: Quad-core Intel or AMD processor",
        "Recommended: 8 GB RAM",
        "NO programming experience needed!"
      ],
      "description": "In this course, you will learn how to use the Unreal Widget Blueprint system to create UI (User Interface) for your games and applications. These are the same user interfaces that you see in popular games such as Fortnite, Madden NFL, Grand Theft Auto, and Final Fantasy! These menus also mimic the menus that I use to create visualization applications at a Fortune 500 company, and are proven techniques! It is vitally important for any Unreal developer to understand the concepts of widget blueprints. By the end of this course, you will have the knowledge and expertise to be able to create menus, on screen HUD's, and many other kinds of menus that you can use in your own games and applications! You will also have developed a fully functional Survival Game!\n\n\nThis course is a great starting point for users who are unfamiliar with the Unreal Widget Blueprint system. It is targeted at Unreal Engine users who have a basic understanding of Unreal 5. We will not be going over how to download and install the Engine or general navigation of the Editor. However, you will master how to design, program and debug widgets within the Widget Blueprint Editor! NO PROGRAMMING KNOWLEDGE REQUIRED!",
      "target_audience": [
        "Students who want to learn how to create UI for games and applications",
        "Students interested in learning how the various widgets work in Unreal Engine",
        "Students interested in creating a simple Survival Game"
      ]
    },
    {
      "title": "Unity Third Person Shooter",
      "url": "https://www.udemy.com/course/unity-third-person-shooter/",
      "bio": "Learn how to create a complete third person shooter game using Unity",
      "objectives": [
        "Learn how to make third person shooter games",
        "Raycasting and Impact Instantiation for weapons",
        "Change shaders dynamically during gameplay",
        "Create endless waves of vampires that spawn into the game",
        "Control animations through layerweights and layermasks",
        "Implement animation events to trigger custom functions",
        "Easy to learn coding using C#",
        "Build a solid understanding of Unity by creating an actual working video game",
        "Develop transferrable skills that can be applied to First Person Shooters and other types of games"
      ],
      "course_content": {},
      "requirements": [
        "A PC, Mac or Linux capable of running the Unity Game Engine",
        "A basic understanding of Unity"
      ],
      "description": "If you want to make impressive shooter games then this course is for you. I will be showing you step by step how to make a third person shooter game that I call Vampire's Lair. This is full on arcade action, inspired by the original DOOM game. This will help you develop the skills necessary to go onto make your own awesome games.\nThere will be coding and design tasks throughout that will challenge your knowledge of game design and help you to develop professional skills. If you just want to design games for a hobby or if you are looking to embark on a career in the gaming industry this course will help you get there. Plus it'll be a lot of fun too.\nCovered in this Unity course:\nUsing Unity 2019\n\n\nSetting up a third person character\n\n\nPickups for changing ammo/weapon types\n\n\nUsing single shot, rapidfire, flamethrower and grenade launcher weapons\n\n\nSpawning waves of enemies that target your player\n\n\nUsing pathfinding AI\n\n\nKilling enemies with bullets, flames, grenades and exploding barrels\n\n\nImpressive shader/particle systems to give your game a professional look\n\n\nSetting up animation events to trigger functions in C#\n\n\nLearn C# coding using real world coding activities\n\n\nSetting up a Boss with a health bar\n\n\n+ Much More\n(These principles can also be applied to first person shooter games)",
      "target_audience": [
        "People eager to learn how to make video games",
        "People who want to learn C# coding within real world game design",
        "Everybody who love games and want to start making their own"
      ]
    },
    {
      "title": "Metaverse Fundamentals: Blockchain, Cryptocurrency and NFTs",
      "url": "https://www.udemy.com/course/metaverse-fundamentals-blockchain-cryptocurrency-and-nfts/",
      "bio": "Learn Key Elements of the Metaverse, Virtual and Augmented Reality, and Even Create Your Own Avatar in the Metaverse",
      "objectives": [
        "Evolution of the Web towards Web3 for the development of the Metaverse with Blockchain Technology.",
        "Technologies involved in the Metaverse: Augmented Reality (AR), Virtual Reality (MR), Mixed Reality (MR) and Artificial Intelligence (AI).",
        "Metaverse Market Opportunity.",
        "Blockchain Adoption in the Metaverse.",
        "Blockchain, Smart Contracts, NFT Tokens and cryptocurrencies applied to the Metaverse.",
        "Tools for building the Metaverse: Unity, Unreal Engine, Amazon Sumerian and Spark AR.",
        "Metaverse Use Cases.",
        "You will create your own avatar to be used in the Metaverse"
      ],
      "course_content": {},
      "requirements": [
        "There is no special equipment required for this course (Eg. You do not need a VR Headset)",
        "No previous experience or skills needed. You will learn everything you need to know.",
        "You simply need a computer with Internet connection and an open mind to learn new concepts"
      ],
      "description": "Global investment bank Goldman Sachs has predicted that the metaverse could be an $8 trillion opportunity.\n\n\nDo you want to learn what the Metaverse is and how you can participate in it?\nDo you want to understand how Blockchain technology is used in the Metaverse?\nAre you interested in learning about Augmented Reality (AR) and Virtual Reality (VR), and how it will transform how you experience the Internet?\nWould you like to learn about Digital Real Estate and the cryptocurrencies and Non-Fungible Tokens being used, bought and sold in the Metaverse?\n\nIf the answer to any of these questions is Yes - then this course is for you!\nThe metaverse is a concept that denotes the next generation of the internet, which describes an immersive and multisensory experience in the applied use of various devices and technological developments on the internet.\n\n\nFacebook, rebranded now as META take on the Metaverse:\n\nThe massive social network with approximately 3 BILLION users, is fully aligned and directed to create a new world of human interaction, where everything you imagine could be possible inside the Metaverse.\n\n\nThis course is unique, as it has been designed so that you understand and learn what the potential of this new technology is and how technologies such as Augmented Reality (AR), Virtual Reality (VR) and Blockchain Technology are applied, and how they will be further used.\n\n\nIn the course you will delve into the following blocks of knowledge:\n\n\nIntroduction to the Metaverse: Web 3.0 Evolution and the Metaverse Market Opportunity.\nTechnologies involved in the Metaverse: Augmented Reality (AR), Virtual Reality (VR), Mixed Reality (MR) and Artificial Intelligence (AI).\nBlockchain Adoption in the Metaverse: Blockchain, Smart Contracts, NFT Tokens and Cryptocurrencies in the Metaverse.\nTools for creating the Metaverse!\nMetaverse Use Cases\nAnd finish this course by creating your own digital avatar, with your own characteristics, for the Metaverse!!!\nThis course is ideal for anyone who wants to gain solid knowledge about the Metaverse and the growing opportunities that exist in this new environment.\nThis course is recommended for:\nAnyone interested in improving and adapting to current technological changes.\nVisionary entrepreneurs and owners who want to take their companies up a notch with the power of the Metaverse.\nA freelance consultant who has programming skills and wants to transform businesses with the power of Virtual Reality (VR).\nPassionate about technology who want to gain experience with the new environment of social interaction, the Metaverse.\nAnyone who wants to learn about Augmented Reality (AR), Virtual Reality (VR), and Blockchain applied to the Metaverse.\n\nNOTE: There are no previous skills or knowledge required to take this course, and there is no special equipment needed for this course. You just need an Internet connection and a desire to learn about the Metaverse, and how to get started in and participating in these new digital worlds being developed.\n\nDon't wait any longer, the world is changing, be part of this change!\n\nValuable ADDITIONAL CONTENT:\nWe have included two downloadable and printable PDF  Books which will help you further understand blockchain technology.\n\nBlockchain Fundamentals: To the Moon\nTokens\nThis course will help you quickly master the most important ideas and topics in the Metaverse, including the cryptocurrencies used, how blockchain and NFTs are used in the Metaverse, and will give you a solid foundation to take on the exciting virtual worlds of the Metaverse.\nWe look forward to seeing you inside!",
      "target_audience": [
        "Anyone interested in improving and adapting to current technological changes.",
        "Visionary entrepreneurs and owners who want to take their companies up a notch with the power of the Metaverse.",
        "A freelance consultant who has programming skills and wants to transform businesses with the power of Virtual Reality (VR).",
        "Passionate about technology who want to gain experience with the new environment of social interaction, the Metaverse.",
        "Anyone who wants to learn about Augmented Reality (AR), Virtual Reality (VR), and Blockchain applied to the Metaverse."
      ]
    },
    {
      "title": "How to Publish a Game on Steam - Unreal Engine 5",
      "url": "https://www.udemy.com/course/ue5-steam/",
      "bio": "Learn how to publish a game on Steam using Unreal Engine 5. Learn everything about Steam publishing.",
      "objectives": [
        "Package & export game from Unreal Engine 5",
        "How to create a company (Optional)",
        "How to become a Steam Partner",
        "How to upload a game on Steam",
        "How to design the Steam Store Page",
        "How to release the game on Steam"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Downloading Unreal Engine 5",
          "Creating the Project"
        ],
        "Unreal Engine 5": [
          "Game Package Settings",
          "Packaging the Game",
          "Testing the Game",
          "Zipping up the Game"
        ],
        "Steam": [
          "Creating a Steam Account",
          "Creating a Company (Optional)",
          "Joining Steamworks",
          "Steamworks Dashboard",
          "The Checklist",
          "Price & Release Date",
          "The Store Page",
          "Steamworks Documentation",
          "Uploading Game to Steam",
          "The Release Button",
          "Steam Keys",
          "What Now?"
        ]
      },
      "requirements": [
        "A computer capable of running Unreal Engine 5",
        "Interested in making games using Unreal Engine 5"
      ],
      "description": "How to Publish a Game on Steam\nIn this Unreal Engine course, you will learn how to publish a game on Steam using Unreal Engine 5. We'll begin by correctly exporting your game from Unreal Engine 5. Then, we'll look at how to put a game on Steam through the Steam Partner website, Steamworks.\nYou are not required to have a game to take this course. This course will use the default Unreal Engine game development template to teach you how to publish a game on Steam. But you are welcome to use your own game project if you have one.\nReleasing games from Unreal Engine 5 is an excellent idea if you want to work from home and make a living as an independent game developer. In fact, I have been a full-time Unreal Engine developer for a couple of years, creating games, designing courses, and selling game assets through the Unreal Engine marketplace.\nStart this course today and learn how to publish a game on Steam!\nWhat makes me qualified to teach you?\nI am an experienced game developer with nine years of experience. To summarize my work without boring you:\nI have released a Steam game I directed from start to finish with a team of 8.\nI have created 11 game development courses with 40,000+ students and an average rating of 4.8+ out of 5 stars.\nI am currently solo-developing Farmtale 2 from start to finish.\nI also work as a freelancer on various game projects, specializing in programming, lighting, game optimization, and more.\nI am deeply passionate about game development and have made it my full-time job. I would love to teach you everything about Unreal Engine 5 with good game development practices and keep you updated with the latest information. It's time to teach you how to publish a game on Steam.\nLearn every step of how to upload a game to Steam.\nSteam publishing is straightforward if you know the steps, but it is complicated as a beginner if you don't know where to start. This course will teach you every single step of the process. You will create your game using Unreal Engine 5, or you can use your own game project. From there, you'll learn how to export your game and how publishing on Steam works.\nThe key steps covered in this course are:\nHow to create your game in Unreal Engine 5 (or use your project).\nLearn what the correct export settings are when exporting your game for Steam.\nLearn to create an account on the Steam Partner site, Steamworks.\nYou'll learn how to upload games to Steam.\nLearn to edit your Steam Store game description and screenshots.\nYou'll learn how to use your newly created Steam App ID to make your game go live on Steam.\nYou'll learn where to add Steam Achievements and Steam Cards.\nLearn how to get Steam keys for your game to give to friends and family.\nFinally, you'll learn about releasing a game on Steam and make it public for everyone to play.\nBy learning how to publish a game on Steam, uploading games to Steam will be very easy for you as it's a straightforward process.\nHow much does Steam take in revenue?\nAs you might have heard, Steam takes a part of the earnings from your game every month.\nFirst, you must pay $100 to post your game on Steam. The $100 will be refunded to you once your game gains $1000 in revenue, which is very easy to get. Farmtale made $40,000 with no marketing at all.\nOnce you start gaining income, Steam will take 30% of the revenue monthly. That means if you gain $500 from sales, you'll gain $350 sent to your bank account, while Steam takes $150. Yes, Steam takes much money from you, but we can't do anything about it. After all, they provide the largest platform for games and developers. You would lose more money if you don't publish on Steam.\nDon't worry. This Unreal Engine course will show you step-by-step how to publish a game on Steam. I will buy the license with you for $100 in the course to show you the whole process, literally. At the end of the course, you'll know how to get your game on Steam and make it public so that you can gain income from it.\nLearn how to publish a game on Steam from any platform.\nEven though this course teaches you how to publish games on Steam using Unreal Engine 5, the process is precisely the same if you're using Unity, Godot, or any other game development software.\nPublishing a game on Steam from any game development software is the same process. In this course on how to publish a game on Steam, you will see that the process also applies to your own game development software, not just Unreal Engine.\nWhen you've finished this course and learned how to publish a game on Steam, you can apply the process to any future game or game engine you're using.\nWith that said, let's start with this course and learn everything about how to publish a game on Steam!\nTake this course and get certified.\nCompleting the course on how to publish a game on Steam earns you an Unreal Engine certification. You can use it to strengthen your portfolio as an independent game developer or use it when applying for game development jobs. The Unreal Engine certification can be downloaded and saved locally and is valid indefinitely.\nJoin our supportive community.\nUnreal Engine game development can be a frustrating experience at times. For example, you might need to look for an unchecked box somewhere, leaving you feeling lost for hours. Alternatively, you might require moral support and ideas from fellow game developers like yourself. That's why we offer live support 24/7 in the Q/A section or in our community Discord server. You can also join us to chat casually about game development in general or share your work with others. We are always here to help you whenever you need it.\nLet's begin learning how to publish a game on Steam without any delay. I am excited to see you in our first lesson. Let's get started!",
      "target_audience": [
        "Complete beginners with no prior experience",
        "Game Developers who want to release their game on Steam",
        "Anyone who want to release a game on Steam"
      ]
    },
    {
      "title": "Build a Battle Royale and an RPG in Unity and Blender!",
      "url": "https://www.udemy.com/course/build-a-battle-royale-and-an-rpg-in-unity-and-blender/",
      "bio": "Create two awesome Games with Blender and Unity®",
      "objectives": [
        "Build a 3D Adventure game in Unity® from scratch",
        "Create your own unique Battle Royale system.",
        "Navigate the Unity® editor.",
        "Design large environments for your character to explore in.",
        "Build video game levels.",
        "Create your own materials.",
        "Build 3D models for the game in Blender.",
        "Integrate the art from Blender into Unity®.",
        "Learn the basics of animation."
      ],
      "course_content": {
        "Introduction to Unity": [
          "Introduction",
          "Unity Editor",
          "Moving a Cube",
          "Materials",
          "Lights",
          "Particle System",
          "Applying Physics",
          "Asset Store"
        ],
        "Introduction to Coding": [
          "Introduction",
          "Variables",
          "Methods",
          "If Blocks",
          "Loops"
        ],
        "Introduction to Inputs": [
          "Introduction",
          "Key Presses",
          "Moving a Player",
          "Jumping",
          "Moving Forward",
          "Cycling Cameras"
        ],
        "Introduction to Prefabs": [
          "Introduction",
          "Introduction to Prefabs",
          "Random Angles",
          "Explosion Effect",
          "Adding explosion effects"
        ],
        "Player Movement": [
          "Creating a Project",
          "Designing the Player",
          "Moving the Player",
          "Key Input",
          "Activating Physics",
          "Jumping",
          "Double Jump Block",
          "Velocity",
          "Velocity Optimizations",
          "Looking Around"
        ],
        "Weapons": [
          "FAQ on Sword Rotation",
          "Designing a Sword",
          "Swinging the Sword",
          "Moving the Sword Back",
          "Retreating the Sword",
          "Designing a bomb",
          "Bomb Script",
          "Exploding the bomb",
          "Throwing Bombs",
          "Bow",
          "Swapping Weapons"
        ],
        "Enemies": [
          "Simple Enemies",
          "Strong Enemy",
          "Hit Area",
          "Patrolling Logic",
          "Shooting Enemy",
          "Enemy Bullet",
          "Damaging the Player"
        ],
        "Camera and User Interface": [
          "Camera",
          "Game Interface",
          "Health Bar",
          "Main Menu"
        ],
        "Terrains": [
          "Terrain Basics",
          "Painting the Terrain",
          "Trees and Grass",
          "Water",
          "Flares and Camera Effects"
        ],
        "Level Design": [
          "Level Terrain",
          "Dungeon Entrance",
          "Teleporting",
          "Dungeon",
          "Adding Shooting Enemies to the Dungeon",
          "Adding Remaining Enemies",
          "Remaining Enemies"
        ]
      },
      "requirements": [
        "To follow along with these tutorials, you will need the following programs: Blender v2.78 (for 3D modeling and texturing), Photoshop or a free program like Gimp (for 2D art and some texturing), and Unity® (for game set-up and coding).",
        "Unity® and Blender are free to download. Please download and install Unity® and Blender before purchasing this course",
        "This course was recorded on a Mac computer, but you can use Unity® and Blender on a PC."
      ],
      "description": "\"There is so much content!! I love how Blender is put into the course to give you the option to create your own weapons.\" - Keith\n\"I like that you guys take the time to explain every single detail. Looking forward to get into the more serious chapters. You rock!\" - Paul Tibulca\n\"I love FPS/Battle Royale games and have been wanting to make my own game for quite a while. The fact that there is a course that teaches people how to make their own Battle Royale game is absolutely amazing. The learning is not too fast-paced or too slow-paced. It's just the right speed and goes in depth for specific assets, modifications etc. This course is amazing!\" - J Dean\n\"So far this course is very good. The instructor takes his time to explain everything and is not rushing. I will update on this comment once I've completed a bit more of the course.\" - Alexander K.\n------------------------------------------------------------------------------------------------------------\nWe at Mammoth Interactive value input from students like you. We check the Q&A and will get back to every Q within 2 business days.\nDo you love Battle Royale games? This is the perfect course for you. Learn how to create a full 3D environment as well as create and animate characters to wield weapons and run a muck as they try to survive your own Battle Royale.\nA wildly successful Kickstarter funded this course\nIn this course, you learn how to build your own Battle Royale and 3D Adventure Game with Unity® and Blender. This course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and modeling a 3D game.\nFirst you design the game and its functionality in Unity®. You learn how to code in C# and build video game levels. Don't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nWhy Unity®?\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the 3D models for the game in Blender. You build all the art assets for the game. You learn how to integrate your art from Blender into Unity®.\nWhy Blender?\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nThis course contains many Blender sections to give you an in-depth curriculum of 3D modeling your Battle Royale, not just coding. You can choose to build models from scratch or download them from the source files we provide and import straight into Unity.\nLet's get started\nIncluded in this course are bonus sections on topics including C# and Java. This is for when you finish your Battle Royale. You get more content at a great price.\n\"Great instructor. Amazing course, very helpful\" - Hussein C.\nEnroll now to join the Mammoth community!",
      "target_audience": [
        "Anyone who wants their start at making 3D video games.",
        "People that want to create their own Battle Royale.",
        "Anyone who wants to learn game development.",
        "Beginners who want to learn how to use Blender.",
        "This course assumes you know a little about Unity®."
      ]
    },
    {
      "title": "Learn Kotlin and Create Games Using the LibGdx Library",
      "url": "https://www.udemy.com/course/kotlin-libgdx-game-developers-masterclass/",
      "bio": "Become a real games programmer. Create Games Using Kotlin with the LibGDX Game Development Framework.",
      "objectives": [
        "Learn how to create your own games",
        "Understand how to write reusable code that can be reused in other games",
        "Learn how to create your own tools for game development",
        "Have learned the Kotlin language",
        "Understand how to use many useful design patterns"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the Course",
          "IntelliJ for Windows",
          "IntelliJ for MAC"
        ],
        "Kotlin Intro": [
          "Write your first Kotlin Application",
          "Learn how to declare and initialize variables",
          "Learn some basic operators in Kotlin",
          "Learn how to use if statement",
          "Learn how to use while and do-while loops",
          "Learn how to work with arrays",
          "Learn how to use for and foreach loops",
          "Loop Challenge",
          "Break And Continue Statements",
          "Using Strings",
          "String Challenge",
          "Understanding Null Reference",
          "Understanding Methods",
          "Method Overloading",
          "Overloading Challenge",
          "Named And Optional Parameters",
          "Class Constructors",
          "Getters And Setters",
          "Properties",
          "Encapsulation",
          "Encapsulation Challenge",
          "Static Methods",
          "Static Methods Challenge",
          "Inheritance",
          "Method Overriding",
          "Polymorphism",
          "Polymorphism Challenge",
          "Abstract Classes And Interfaces",
          "Interface Challenge",
          "Enums",
          "Code Refactoring",
          "Understanding List",
          "Understanding Stack",
          "Understanding Map",
          "Operator Overloading",
          "Operator Overloading Challenge",
          "Composition",
          "Composition Challenge",
          "Component Pattern",
          "Component Pattern Challenge"
        ],
        "LibGDX Intro": [
          "Create Your First LibGDX Project",
          "Gdx Sampler Preview",
          "Application Lifecycle",
          "Companion Objects And Reified Parameters",
          "Understanding LibGDX Modules",
          "Understanding Input Handling: Polling",
          "Understanding Input Handling: Event Listening",
          "Input Handling: Summary",
          "IntelliJ Tips And Tricks",
          "Introduction to Reflection API",
          "Refactor, DRY and WET Code",
          "Embed Libgdx Into Desktop Application",
          "Adding Control Panel",
          "Finishing Sampler Part 01",
          "Finishing Sampler Part 02",
          "Understanding Camera",
          "Understanding Viewports",
          "Understanding Batch"
        ],
        "Obstacle Avoid Game": [
          "Obstacle Avoid Game Preview",
          "Create And Setup Project",
          "Understanding Shape Renderer",
          "Drawing Shapes",
          "Viewport Extensions",
          "Player Class",
          "Controlling Player Movement",
          "Camera Controller Movement",
          "Camera Controller Zoom",
          "Camera Configuration Part 01",
          "Camera Configuration Part 02",
          "Using Camera Configuration",
          "Limiting Player Movement",
          "Adding Obstacles",
          "Refactor Time - Game Object Base",
          "Collision Detection",
          "Using Hiero Tool",
          "More Refactoring",
          "Understanding Bitmap Font",
          "Hud Lives",
          "Hud Score",
          "Improving Display Score",
          "Game Over Logic",
          "Implementing Difficulty",
          "Refactor - Single Responsibility Principle",
          "Game Controller",
          "Game Renderer",
          "Setup Controller And Renderer",
          "Fixing Viewports",
          "Destroying Obstacles",
          "Fix Obstacle Spawn Logic",
          "Understanding Object Pooling",
          "Pooling Obstacles",
          "Drawing Textures",
          "Fix Bounds and Texture Positioning",
          "Fix Player Positioning",
          "Fix Obstacle Positioning",
          "Restart Logic",
          "Touch Controls"
        ],
        "Asset Management": [
          "Understanding Asset Manager",
          "Using Asset Manager",
          "Understanding Atlas And Region",
          "Packing Game Assets",
          "Using Texture Atlas",
          "Simple Loading Screen"
        ],
        "Extra Information - Source code, and other stuff": [
          "Source Codes",
          "Bonus Lecture and Information"
        ]
      },
      "requirements": [
        "PC or Mac computer",
        "Some programming experience is helpful but not essential"
      ],
      "description": "Games developers are in huge demand, with many new and exciting opportunities becoming available to programmers who understand the technology.\nAre you looking to become a games programmer, but don't know where to start?\nMaybe you are looking for a really comprehensive course on games development, but cannot decide which course to take.\nMaybe you have some skills with LibGDX or another games framework, but want to create game using Kotlin\nWhatever the reason, this course will teach you how to become a master games programming, using LIBGDX.\nKeep in mind that LIBGDX is cross platform, meaning that you can then move games to other platforms\nNo previous experience is necessary.  Goran Lochert, your course instructor is an expert games developer, who has worked on many games in many frameworks.  He is also an official Oracle Java certified developer, and an official contributor to LIBGDX, the games framework used in this course to create games.\nHis skills and experiences with LibGDX are second to none.\nAs a result, you are learning from one of, if not the most experienced Java and Kotlin games developer on Udemy, meaning you can be assured that not only will you learn how to create your own games by following along in this course, but you will also learn the right way to create your game code.\nThe lack of proper programming techniques is one of the main reasons why games do not perform well, or end up really hard to maintain and update.  In addition, learning the wrong way to design and create programming code, can actually harm your career, because employers expect games programmer to write professional code, following accepted industry standards.  You will learn how to do that in this course.\nA complete section on Kotlin is included. This will help you learn Kotlin fast, and to them be able to understand it as you go through the course.\nIncluded, is well over fifteen hours of videos, making this one of the most comprehensive courses of it's type.  Goran has already released a Java version of this course which has over fifty hours of content, and the Kotlin course is being continually updated and will also be this length shortly.\nNothing is glossed over.  Goran goes into detail with each and every aspect of games development through the course, so that you actually understand how things work, and can then apply this to your own games projects.\nAlthough the emphasis is on Android  in this course, because the course uses LibGDX, which is cross-platform, your games can be deployed to many platforms (PC for one).\nLearning how to become a games developer, and how to code the right way, can be difficult.  By the end of this course, you will be able to create your own games, and know how to structure and code your games, the way professional programmers do.\nIf you are ready to join the games industry as a games programmer, then it's time to get busy learning!\nClick the button to sign up for the course and get started today.",
      "target_audience": [
        "Anyone wanting to learn how to write computer games using Kotlin and LibGDX"
      ]
    },
    {
      "title": "Multiplayer Virtual Reality (VR) Development With Unity",
      "url": "https://www.udemy.com/course/multiplayer-virtual-reality-vr-development-with-unity/",
      "bio": "Learn the basics of Multiplayer Virtual Reality by building a fully functional project from scratch",
      "objectives": [
        "Multiplayer Virtual Reality Development",
        "Full Multiplayer VR Synchronization (Head, Hands, Body)",
        "VR Player Movement Synchronization including Teleportation",
        "Networked Grabbing",
        "Oculus Quest Development",
        "Unity XR Interaction Toolkit",
        "Editor Scripts for easy Multiplayer testing",
        "Login with Playername",
        "VR Keyboard",
        "VR Avatar Selection System with five different model",
        "Creating and joining Virtual Rooms by map type"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Read Before Begin"
        ],
        "Creating the Project and Importing Game Assets": [
          "Introduction to Section and about Unity version",
          "Installing Unity",
          "Creating the Project and Importing Game Assets",
          "Importing Unity XR Interaction Toolkit and Configuring Project For Oculus Quest2",
          "XR Rig Setup",
          "Installing apk into Quest/2",
          "Testing with Unity Editor via Oculus Link/SteamVR Setup and OpenXR",
          "(Old Lecture)Testing VR in Unity Editor without a Powerful PC"
        ],
        "VR DEVELOPMENT BASICS": [
          "VR Avatar Implementation",
          "Continuous Moving & Continuous Turn & Character Controller",
          "Teleportation",
          "Grabbing in VR",
          "UI Interactions in VR"
        ],
        "Multiplayer Virtual Reality Basics": [
          "Importing Photon Unity Networking 2 ( PUN 2)",
          "Connecting to Photon Servers",
          "Login UI",
          "VR Keyboard Implementation and Connecting with Playername",
          "Loading Home Scene and Intro to Photon Rooms",
          "Joining Random Rooms",
          "Editor Testing for Multiplayer: Editor Scripting in Unity",
          "Creating Virtual Rooms Based On Map Selection",
          "Joining Virtual Rooms Based on Map Selection",
          "Loading and Synchronizing Scenes Based on Map Selection",
          "Listing Player Counts on Virtual Worlds",
          "Spawning VR Players Inside Virtual Room",
          "Networked VR Player Setup",
          "Fixing Bugs and Leaving Virtual Rooms"
        ],
        "Multiplayer Virtual Reality Synchronization Across the Network": [
          "Photon Synchronization Basics",
          "MultiplayerVRSynchronization Script",
          "Networked Grabbing Part 1: Intro",
          "Networked Grabbing Part 2: Ownership Transfer",
          "Networked Grabbing Part 3: Remote Procedure Calls- RPCs"
        ],
        "Avatar Selection": [
          "Local Avatar Selection System",
          "Remote Avatar Selection System: Custom Player Properties for Avatar Model Synch"
        ],
        "Voice Chat Implementation": [
          "Into and Importing Photon Voice 2 into the Project",
          "Setup Voice Chat",
          "Update in Voice Chat 2",
          "Setup UI For Voice Chat"
        ],
        "Completed Project Source Codes": [
          "Source Codes"
        ],
        "Old Course Content": [
          "Creating the Project and Importing Game Assets",
          "Importing Unity XR Interaction Toolkit and Configuring Project For Oculus Quest/",
          "XR Rig Setup",
          "Viewing the Scene in VR Part 1: XR Rig Setup",
          "Viewing the Scene in VR Part 2: Configuring Project for Oculus Quest Build",
          "Viewing the Scene in VR Part 3: Installing External apk files",
          "Optimizing the Project for Oculus Quest",
          "Capturing XR Button Input",
          "Opening/Closing VR Menu with XR Button",
          "UI Interactions",
          "Loading Home Scene and Intro to Photon Rooms",
          "Joining Random Rooms",
          "Editor Testing for Multiplayer: Editor Scripting in Unity",
          "Creating Virtual Rooms Based On Map Part 1- Setting up Open Worlds UI",
          "Creating Virtual Rooms Based On Map Part 2- Custom Room Properties",
          "Joining Virtual Rooms Based on Map Selection",
          "Loading and Synchronizing Scenes Based on Map Selection",
          "Listing Player Counts on Virtual Worlds",
          "Spawning VR Players Inside Virtual Room",
          "Networked VR Player Setup"
        ]
      },
      "requirements": [
        "Beginner/Intermediate Unity Experience",
        "Beginner/Intermediate C# Experience",
        "Having an Oculus VR Headset (Quest, Rift or Rift S)",
        "Optionally SteamVR supported headset",
        "Unity supported PC or Mac"
      ],
      "description": "!!! JUST UPDATED WITH UNITY 2020.3 LTS !!! (Also the lectures are now 1080p)\n\n\nWelcome to Udemy's first Multiplayer Virtual Reality Development course!\nVirtual Reality is having its best time ever. Stuck in our homes, we find joy and happiness in VR. But some people still think VR is an isolating experience.\nNot anymore! Virtual Reality has the potential the be the next social impact in our lives. With Multiplayer implementation, we can meet people in Virtual Worlds and communicate with tools that do not exist in the real world.\n\n\nIn this course, we build a Multiplayer VR project from scratch. Unity's XR Interaction Toolkit is used for the Virtual Reality solution. Also, Photon- PUN 2 asset is used for Multiplayer implementation. While learning, you will have much fun with the Game Assets that I will share with you.\n\n\nBy enrolling in this course, you will learn Multiplayer VR Development Fundamentals such as:\nConfiguring a Unity project for Oculus Quest with the new XR Interaction Toolkit from Unity 2019.4\nVR Keyboard Implementation\nConnecting servers with player name\nJoining Virtual rooms\nAvatar Selection System\nFull Multiplayer VR Synchronization (Head, Hands, Body)\nMultiplayer VR Movement Synchronization for Teleportation and Joystick\nVoice Chat for VR\nNetworked Grabbing\nEditor Scripting for Multiplayer tests with only one headset\nThis course is tested with Oculus Quest only. However, it should work with Oculus Rift and Rift S without any issue. Because Unity's XR Interaction is used and it offers cross-platform support for VR Development.\n\n\nAt the end of the course, you will have a fully working Multiplayer VR Template project that you can even publish!\nEven if you do not have a VR Supported PC, I will show you how to easily test VR projects.\nIf you have a SteamVR supported headset, you can still follow the course.  Because there is a special lecture explaining how to set up the project for OpenVR. Note that SteamVR is not officially supported by the XR Interaction toolkit, yet. But it will be and the course will be updated according to that.\n\n\nCome and join me to build the Virtual Worlds that we will be living in...\nI will see you there...\n-Tevfik",
      "target_audience": [
        "Unity Developers who want to create Multiplayer Virtual Reality experiences"
      ]
    },
    {
      "title": "Make Simple Games with Python",
      "url": "https://www.udemy.com/course/make-simple-games-with-python/",
      "bio": "A course for beginners",
      "objectives": [
        "How to make games",
        "Both console and graphical games (Tkinter)",
        "Basic concepts of Game Development",
        "How to make hangman, tic-tac-toe and other games"
      ],
      "course_content": {
        "Terminal Games": [
          "Introduction",
          "Guessing game",
          "Quiz",
          "Hangman",
          "Tic tac toe"
        ],
        "Graphical Games": [
          "Intrroduction",
          "Guessing game (GUI)",
          "Quiz (GUI)",
          "Hangman (GUI)",
          "Tic tac toe (GUI)"
        ]
      },
      "requirements": [
        "Basic Python knowledge recommended"
      ],
      "description": "This  course is an introduction to game programming with Python. In this course you will learn to make several video games. It's a course for total beginners who just learned Python. You will learn how to program hangman, tic tac toe and other games both in the terminal and a graphical version (tkinter).\nDo you want to invent your own computer games with python?\nThis course will teach you how to make simple games and the basic concepts. The games are written in the python programming language and all source code is included. To learn more about how they work, you can run them as python scripts .\nThe mini games are called: − TicTacToe − Quiz - Hangman and Guess (Dice). These are all classic games, not arcade style games. Python games are also a fun way to learn Python, but this course requires previous basic experience with the Python language.\nAll of the games can be played in the terminal as well as the desktop. The videos explain all the code and how to program it yourself. This is a fun little course for people who just learned Python and want to make some games. Besides Python and tkinter (optional), no special modules are required.",
      "target_audience": [
        "Beginner Python developers curious about Game Development"
      ]
    },
    {
      "title": "Welcome To Game Design - Game Design Canvas And Document",
      "url": "https://www.udemy.com/course/welcome-to-game-design-game-design-canvas-semaphore/",
      "bio": "Create Efficient Project Documentation to Build Games of any kind (Board, Digital or Gamification)",
      "objectives": [
        "Structure Game Projects",
        "Manage Game Development Processes",
        "Organize your game ideas",
        "Prototype quickly",
        "Develop a Game Design Canvas"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "The Game Design Canvas",
          "How to Rate the course",
          "Brainstorming",
          "Your First Game",
          "Join Our Discord Server ?",
          "Project Management - Kanban Trello",
          "Game Purposes",
          "Quizz 1"
        ],
        "Pre Definitions - Red Sign": [
          "Platforms",
          "Number Of Players",
          "Target Audience",
          "Duration",
          "Quizz 2"
        ],
        "Core Gameplay - Yellow Sign": [
          "Genre",
          "Mechanics",
          "Story And Theme",
          "Aesthetics",
          "Quizz 3"
        ],
        "Green Sign - Gameplay": [
          "Goals",
          "Interaction",
          "Obstacles",
          "Rules",
          "Quizz 4",
          "Thanks and Congratulations"
        ],
        "Extra/Bonus": [
          "Download the Canvas Template",
          "Download The Class Presentation",
          "Bonus Class"
        ]
      },
      "requirements": [
        "There are absolutely no prerequisites to take this course."
      ],
      "description": "The Goal is to understand how to build a Game Design Canvas for any type of Gaming Project you have.\nYou will learn about many different aspects of Game Design that make a game be a game, with clear explanations and examples.\nThe Goal is to understand how to create projects from scratch and develop them using project management tools, brainstorming techniques and tips to make games that make sense.\nFirst you show you how to find the Purpose of your project and define metrics according to your goals.\nThen we start at the Red Sign, where I’ll show you how to define:\nPlatforms\nNumber Of Players\nTarget Audience\nDuration\nOn the Yellow Sign, you’ll learn about:\nGenres\nMechanics\nStory and Theme\nAesthetics\nAnd finally, what makes your game be a game\nGoals\nInteraction\nObstacles\nRules\nBy the end of some classes, I’ll challenge you to do some exercises, to help you learn better. They are not mandatory, but they can make you become a better game designer.\nYou will also answer some Quizzes, to help you memorize what you learnt even more.\nYou’ll also be able to download the presentation used in this course.\nThis course will help you create a bionic eye, after your know how games are made, playing them will never be the same again.\nEnroll Now and I See you in the course!",
      "target_audience": [
        "People who want to learn about the Games Creation",
        "People who want to understand Game Theory",
        "Anyone who plans to work with Games in any area",
        "People who want to be Game Project Managers",
        "People who want to become Great Game Designers",
        "Humans that want to create a Bionic eye and play games as a Game Designer"
      ]
    },
    {
      "title": "Unity VR/XR Developer: Make Immersive VIRTUAL REALITY Games",
      "url": "https://www.udemy.com/course/unity-vr-game-development/",
      "bio": "Build explosions, grabables, touchables, remote control robots & more using Unity's UPDATED XR Toolkit",
      "objectives": [
        "Build the MUST HAVEs for VR games - grabbables, interactables, and movement.",
        "Learn how to get the most out of Unity's POWERFUL XR Interaction Toolkit.",
        "Use the Toolkit's Interaction & Locomotion Modules to navigate your own VR world.",
        "Design your own VR-specific interactions for UI elements, interactable game objects, and hinges.",
        "Learn advanced techniques to procedurally generate walls and environmental elements.",
        "Use Unity's Event System to streamline XR interactions.",
        "Integrate spatial audio into your projects, to make them sound more awesome.",
        "Blow things up. Who doesn't like explosions in games?"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Set Up Unity & VS Code",
          "VS Code Issues?",
          "Assets and XR Management",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Locomotion System": [
          "Section Intro - Locomotion System",
          "Teleportation System Basics",
          "Refining The Teleport System"
        ],
        "XR Grab & Socket Interactables": [
          "Section Intro - Grab & Socket Interactables",
          "Adding Grabbable Game Objects",
          "Grabbable Objects and Sockets",
          "Key Socket Lock System",
          "Customizing The Drawer Grab Interactions",
          "Drawer Movement and Limit Checks",
          "Finishing The Drawers Limit Checks"
        ],
        "UI Interactions": [
          "Section Intro - UI Interactions",
          "Adding UI Button Interactions",
          "Adding UI Ray Interactors With Events",
          "Converting The Button To An Interactable",
          "Changing The Message Text With Code",
          "Starting The Combination Lock",
          "Checking The Combination",
          "Adding Digits And Resetting The Lock"
        ],
        "Interactable Hinges": [
          "Intro To Interactable Hinges",
          "Creating A Simple Hinge",
          "Adding Lock Mechanics To The Hinge",
          "Limiting The Rotation Of The Hinge",
          "Checking The Hand Distance Limits",
          "Adding Collision Limits To The Door",
          "Setting Up A New Door Interactable",
          "The Door: Final Tests And Refactoring"
        ],
        "The Wall": [
          "Intro To The Wall",
          "Building The Wall",
          "Spawning Wall Cube Prefabs",
          "Procedural Column Generation",
          "Adding Editor Build Wall Functionality",
          "Deleting The Wall",
          "Destroying The Wall",
          "Adding Wall SFX & The Explosive Device",
          "Adding Remote Detonation"
        ],
        "Audio Management": [
          "Section Intro - Audio Management",
          "Audio Management Concepts And Set Up",
          "Adding Grab Interactable SFX",
          "Adding Drawer Movement SFX",
          "Adding SFX To Socket Interactions",
          "Adding SFX To The Cabinet Doors",
          "Adding SFX To The Combo Lock"
        ],
        "Immersive Game Design": [
          "Section Intro - Immersive Game Design",
          "Advanced Locomotion",
          "Starting The Progress Control",
          "Adding Progress Audio Feedback",
          "Tracking Progress And Physics Interactions",
          "Finishing The Drawer Challenge Progress",
          "Adding Combo Lock & The Wall Challenges",
          "Creating A XR Slider Interactable"
        ],
        "The Robot": [
          "Section Intro - The Robot",
          "Creating The Joystick And Object Highlighter",
          "Controlling The Robot With The Joystick",
          "The Grande Finale",
          "The Encore"
        ],
        "Bonus: Hand Tracking": [
          "Adding Hand Tracking",
          "Hand Tracking Input Breakdown",
          "Rebuilding The XR Rig",
          "Hand Tracking Wrap Up"
        ]
      },
      "requirements": [
        "To get the most from this course you should be familiar with the Unity editor and have beginner to Intermediate C# knowledge.",
        "Access to a VR headset is not required, as you can use the mock headset in the XR interaction toolkit to enter play mode on your PC."
      ],
      "description": "Want to make Virtual Reality games and apps in Unity?\nKeen to expand your skillset to include XR interactions, so you can create engaging XR games and experiences?\nThen this course is for you!\nUnity has added a ton of functionality and features for making VR products, allowing you to bring your ideas to life. And, thanks to the mock headset in the XR interaction toolkit, you can enter play mode on your PC - meaning you don't need a VR headset to create VR games!\nIn this course, you’ll learn how to harness the power of Unity's XR Interaction Toolkit, along with its Interaction & Locomotion Modules to build immersive XR experiences.\nGet hands-on experience designing and implementing custom interactions for UI elements, interactable game objects and hinges, providing users with intuitive and engaging XR interactions.\nYou’ll get the most from this course if you have some familiarity with the Unity editor, and beginner to intermediate C# knowledge.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nYou’ll also gain access to a course forum where you can discuss topics on a course-wide basis, or down to the individual video. Get plugged into our communities of amazing developers on Facebook (nearly 20k), in our own TA-curated Community (17k views/day), and our student chat group (10k live at any one time).\nDive into the extraordinary world of VR and begin your XR journey today!",
      "target_audience": [
        "Aspiring VR/XR Developers who want to make their own Virtual Reality games.",
        "Game Developers wanting to get better at coding and making games.",
        "Designers and Storytellers excited to build worlds."
      ]
    },
    {
      "title": "Construct 2 - From Beginner to Advanced - Ultimate Course!",
      "url": "https://www.udemy.com/course/construct-2-from-beginner-to-advanced-build-10-games/",
      "bio": "Programmers and non programmers welcome. This is the editor to make anything you dream of. Apps, Ads & Games.",
      "objectives": [
        "Program 5 unique games suggested by users!",
        "Each game has a new principle to offer. By using different ways to program, students will be able to wrap their head around logic like never before.",
        "Develop applications that you have always wanted to make!",
        "Earn money from your new skills"
      ],
      "course_content": {
        "Welcome to the course!": [
          "Welcome to Early Access!",
          "How to approach this course",
          "Introduce Yourself!"
        ],
        "Download our templates!": [
          "Download StarterTemplate+ [Version 3.0] UPDATED 5/15/16",
          "How to install StarterTemplate+",
          "How to use StarterTemplate+"
        ],
        "Construct 2 Overview": [
          "The Construct 2 Overview Section",
          "Learning about the Layout & Window",
          "Customize the Panels",
          "Replicate my exact theme, event sheet color and quick access toolbar!",
          "Event Sheet Basics",
          "Overview Quiz!"
        ],
        "Game 1: Fighting Game": [
          "Play the Fighting Game!",
          "Game Overview",
          "Creating our Layouts",
          "Creating our Project Structure",
          "Setting up our MenuLayout",
          "Setting up our MenuEvent",
          "Player: Creation, Behaviors & Collision",
          "Setting up our GameLayout",
          "Setting up our GameEvent",
          "Setting up our DebugEvent",
          "On/Off Quiz",
          "Player: Adding our AnimationState",
          "Player: Adding our KeyboardEvent",
          "Player: Adding our GamepadEvent",
          "Player: Adding our Camera",
          "Camera: Lerp Resources",
          "Game: Final Setup, Title & Fullscreen",
          "Player: Adding our AttackTriggerState",
          "Player: Adding our Normal attack",
          "Enemy: Adding the PlatformMoveTo plugin",
          "Enemy: Adding our AnimationState",
          "Enemy: Adding our AI Part 1",
          "Enemy: Adding our AI Part 2",
          "Player: Adding Combo 1",
          "Player: Adding Combo 2",
          "Camera: Adding our Screenshake!",
          "Adding our Special Effects!",
          "Setting up our Healthbars",
          "Setting up our MusicEvent",
          "Setting up our OverLayout and Event",
          "Game Review",
          "Download Game| Post your .CAPX and Screenshot of your Fighting Game!"
        ],
        "Game 2: Run N Gun": [
          "Download the Run N Gun Files Here",
          "Assembling the layout",
          "Assembling the assets",
          "Designing our level",
          "Player Walk, Jump, Fall, Slide",
          "Enemy AI 1",
          "Enemy AI 2",
          "Enemy AI 3",
          "Dynamic Shooting Part 1",
          "Dynamic Shooting Part 2",
          "Dynamic Shooting Part 3",
          "Dynamic Shooting Part 4",
          "Death & Screenshake",
          "HUD (Kill Counter, Health, Ammo)",
          "Environment & Lights",
          "FX & Sound"
        ],
        "Game 3: Space Shooter": [
          "Download The Space Shooter Assets Here!",
          "Assembling the layouts (Game & HUD)",
          "Level 1",
          "Level 2",
          "Level 3",
          "Player Control (Keyboard and Gamepad)",
          "Using DeltaTime",
          "Input Control & Collision",
          "Adding our Camera",
          "Player Weapons",
          "Programming the HUD",
          "Enemy AI",
          "Boss AI",
          "Performance Tips & CPUUTILISATION",
          "Adding in Effects [Optional]"
        ],
        "Game 4: Roguelike": [
          "Download The Roguelike Assets Here",
          "Assembling The Layouts",
          "Making our Level",
          "Player Set-Up",
          "Player Shooting",
          "Adding our Camera",
          "Twin Stick Gamepad (Input Control)",
          "Gamepad Object",
          "Environment Objects (Shadows) & Foreground",
          "Player Dash",
          "Download LiteTween [Optional]",
          "Programming the HUD",
          "Enemy AI",
          "Enemy Feedback",
          "Lighting"
        ],
        "Point N Click Adventure": [
          "Download Point N Click Adventure Assets",
          "Download Plugins",
          "What we are making!",
          "Project Setup",
          "Player Mask Set-up",
          "Player Animations Set-Up",
          "Player Reflections",
          "Point Camera",
          "Hover Objects Family",
          "Hover Interactions",
          "Global HUD",
          "Congratulations!",
          "Download Point N Click Adventure .capx (Stable R233)"
        ],
        "What's next!": [
          "Congratulations!"
        ],
        "Bonus Section (Mobile Tower Defense Game) Taught by Ed Farias": [
          "Tower Defense Assets",
          "Tower Defense Overview",
          "Starter Template Mobile Setup",
          "Layout and Global Variables Setup",
          "Turret Bases and Our First Enemy",
          "Spawning and Shooting Enemies",
          "Health Bar and a little bit of flair.",
          "Enemy Waves",
          "Adding the Tank Enemy",
          "Game Over Function",
          "Adding the Tank to Waves",
          "Level End Events",
          "Creating the Pop Up Menu for upgrades and turrets",
          "Adding Icons to the Pop Up Menu",
          "Using the Pop Up Menu to Add objects",
          "Finalizing the Pop Up Menu, adding upgrades"
        ]
      },
      "requirements": [
        "Construct 2 Free [You can make every game but not every feature]",
        "Construct 2 Personal [To complete every task]"
      ],
      "description": "Updated 7/5/19\n\nAbout The Course\nLearn the concepts, tips and programming techniques to build fully functional games with the popular visual scripting editor, Construct 2. By the end of this course, you will know everything to make your own amazing desktop game.\nBuild a solid foundation with programming as this course, and Construct 2, whether you have made games before or not, teaches a structured logic experience like nothing else!\nUnderstand beginner logic such as Global Variables, Local Variables and Instance Variables.\nRecognize that as you are making your engines, once challenging concepts like Arrays, Effects and Functions become easy.\nFind the gameplay experience your games have been missing with lighting, screenshake and more!\nA Powerful Tool at Your Disposal\nLearning the fundamentals of programming can be frustrating, but that's where Construct 2 comes in and swoops you in off your feet. With the [Free] edition it is easy to learn, has excellent documentation, and is the visual scripting tool your brain has been missing.\nGames become your canvas and Construct 2 becomes your paint brush as you will be able to pick up every other language you try. Whether it be, C++, C#, Javascript, Java, Ruby or Pascal, you will find that every programming principle is instilled in Construct 2's editor.\nThroughout each game you will learn new programming principles that can be applied to any language. Each section, you will evolve your code. The first section is different from the last. We start with Starter Template Version 1 and end with version 4.\nStudents completing this course will have the knowledge to create anything they want. Construct 2 doesn't limit you to only games, you can make mobile apps, advertisements, banners and more but better yet you can export them to any platform. Windows, Linux, Mac, Wii, iPhone, Android, Facebook, Kongregate and the Scirra arcade.\nComplete with working .capx files and royalty free art assets, you'll have unlimited access to me as you work through each concept, and each game to achieve the certificate of completion upon finishing this course.",
      "target_audience": [
        "This course is designed for those who have always wanted to learn how to make a game but had no idea how.",
        "This course is meant to be THE goto place for everything logic and Construct 2! You will be a different programmer after this course!",
        "Construct 2 makes programming fun, easy and accessible. With this course you will be able to use C2 for business, applications, games and more!",
        "With the knowledge gained from this course you will find that programming isn't as scary as it can be made out to be.",
        "If you have wanted to take your programming skills to a new level!",
        "If you have always wanted to learn more about Construct 2 and go in-depth!"
      ]
    },
    {
      "title": "Unity & 100+ Asset Store Kits - The Complete Game Developer",
      "url": "https://www.udemy.com/course/best-unity-asset-store-course/",
      "bio": "Learn how to use unity and the best 100+ asset store to create games of your dreams",
      "objectives": [
        "Students will learn how to use Unity game engine and the best 100 Unity Asset Store items"
      ],
      "course_content": {},
      "requirements": [
        "The willing to learn is mandatory, the paid asset store items are optional. But if you want to create a game using those you will have to buy them"
      ],
      "description": "This course is aiming to be a complete guide on how to create games with Unity program.\nI am coding games for almost 10 years and I was using many frameworks and programs but Unity is the most complex game engine  and the one that offers most possiblilities to create games.\nDon't worry if you don't have any experience with programming and/or game development,I will teach you how to create games the fast and correct way, using unity asset store.\nWhen you complete the course you will be able to:\nlearn the basics of Unity interface\nlearn how to do basic things in Unity from scratch\nlearn the basics of programming in c#\nCreate a platfomer game using muliple engines from Unity asset store\nintegrate mobile ads, gamecenter, google playservices, In-app-purchases\nCreate a FPS game\nCreate a racing game\ncreate a match 3\ncreate RPG games\nCreate adventure games\nCreate soccer games\ncreate battle games, chess tower defence and all sort of games\nusing the best 100+ asset store packages to boost your game potential\nWhat do you need to complete this course:\na copy of unity game engine\nthe paid asset that you want to create a game using it",
      "target_audience": [
        "Any game developer beginner that wants to create games the right way(using asset store items)"
      ]
    },
    {
      "title": "Make An RPG With GameMaker Studio 2",
      "url": "https://www.udemy.com/course/gamemakerstudio2rpg/",
      "bio": "Enhance your GameMaker Studio 2 skills by building an RPG",
      "objectives": [
        "Develop games for GameMaker Studio 2",
        "Learn to include certain features like transitions in their GameMaker Studio 2 games"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Downloads For Art Assets"
        ],
        "Recap Of GameMaker Studio 2": [
          "Recap Of GameMaker Studio 2"
        ],
        "Getting Started": [
          "Getting Started",
          "Tile Animations"
        ],
        "How To Make Your Player Move": [
          "How To Make A Moving Player - Part 1",
          "How To Make A Moving Player - Part 2",
          "Cool Camera Trick",
          "How To Make Your Player Run",
          "How To Make Your Player Attack"
        ],
        "Receiving The Sword": [
          "Receiving The Sword - Part 1",
          "Receiving The Sword - Part 2 - Transitions",
          "Receiving The Sword - Part 3",
          "Receiving The Sword - Part 4"
        ],
        "Health": [
          "Drawing Health"
        ],
        "Enemy": [
          "Importing The Enemy Sprites",
          "Have The Enemy Look At The Player",
          "How To Make Your Enemy Attack - Part 1",
          "How To Use Regions To Make Your Code Look Neat",
          "Attack The Enemy"
        ],
        "The Dungeon": [
          "Create A Treasure Chest",
          "Create The Boss"
        ],
        "Miscellaneous": [
          "Sounds"
        ],
        "Conclusion": [
          "Conclusion",
          "Download To The Project File"
        ]
      },
      "requirements": [
        "You should learn how to use a PC",
        "You should have the GameMaker Studio 2 Desktop License"
      ],
      "description": "Welcome to Make An RPG With GameMaker Studio 2.\nIn this course we will build an RPG consisting of commonly used features from other games.\nWe will create a player, that will be able to run around and attack enemies. Later on we will build\na smart enemy that follows around your player that will be later on enhanced as the boss in the game.\nGameMaker Studio 2 is a great engine for building 2D RPG games; since, it gives you the tools to not only produce a decent game, but also makes it easier for you to understand your own and other people's work.\nWe will also build a world that you can explore, in the course, I leave it up to you to make the world as detailed as you want, but we will go over how to use tilemaps to build the world.\nThis course is for intermediate GameMaker Studio 2 users. if you already have knowledge in GameMaker Language and know how the game engine works, this course is for you.\nWe will use many of the features that GameMaker Studio 2 has to offer!\n\nIf you are forgetful, we will recap most of the important things in GameMaker Studio 2 for an hour in the beginning.\nAfter taking this course, you should know how to implement these features into your game.\nTilesets for the world of your game\nFinite State Machines (enumerators)\nA fully functional player\nAn enemy\nA controller object that stores data across all rooms\nOpen chests and have your players hold up the item for a couple of seconds\nUnlimited alarms\nYou'll receive the GameMaker Studio 2 project file for the game at the end of the course.\nFeel free to check out the previews below to get an idea of what the course is like!",
      "target_audience": [
        "People who want to enhance their ability to use GameMaker Studio 2",
        "Anyone who wants to build an awesome RPG game"
      ]
    },
    {
      "title": "Unreal Engine 5: Create a top-down 2D survivors style game",
      "url": "https://www.udemy.com/course/unreal-engine-5-create-a-top-down-2d-survivors-style-game/",
      "bio": "Learn how to create a top-down 2D vampire-survival roguelike game from scratch in unreal engine 5 !",
      "objectives": [
        "Unreal Engine Blueprint fundametals - More than 70 lectures, using completely visual scripting blueprint system to handle various actors (20+ mobs and 2 bosses)",
        "Skill upgrade roguelike mechanics - design 10+ unique skills including active and passive types, enemy waves with different patterns, experience and magnet item",
        "Pooling system for performance optimization - creating \"pools\" to store instances for large number of actors including enemies, bullets and pickable items",
        "Shop system and auto save-loading system - increase player character stats by costing in-game resource, refund function included with saving and loading system",
        "Real-time leaderboard - Encourage players to achieve high scores by adding free real-time leaderboard, competing other players!"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Reference project (UE5.3)"
        ],
        "Basic Setup": [
          "Create Project and Player Flipbooks",
          "TileMap and Scaling",
          "Create Player Character",
          "Setup Enhanced Inputs",
          "Animating Player Character",
          "Create Dummy Enemy",
          "Bullet Projectile"
        ],
        "Pooling Framework (Bullets, Items, Mobs)": [
          "Overview of Pooling Framework",
          "Pooling Bullets Part 1",
          "Pooling Bullets Part 2",
          "Combat Interface",
          "Add Sound Management",
          "Apply Damage to Enemies",
          "Display Damaged Number",
          "Data Table And Enemy Initialization",
          "Fading Out Effect",
          "Enemies Move To Player",
          "Pooling Mobs",
          "Spawn Mobs Outside Screen",
          "Pooling Mob Death",
          "Relative And World Rotation",
          "How To Make Game More Interesting",
          "Create Pickup Actor",
          "Pickup Transition Movement",
          "Pooling Pickups",
          "Create Magnet Effect",
          "Initialize Player Attributes And Skills",
          "Create MainUI",
          "Display Time And EXPInfo",
          "Level Up System",
          "Player Character Death And Game Over",
          "Killings Score And Coin",
          "Two Methods To Avoid Flicking"
        ],
        "Skill Module": [
          "Fill Skill Table",
          "Create Skill Selection Slot",
          "Add Selection Panel",
          "Skill Filtering Logics",
          "Add Skill Tabs",
          "Reroll Skills",
          "Active Skill 1: Ring of Orbs Part 1",
          "Active Skill 1: Ring of Orbs Part 2",
          "Active Skill 2: Holy Shrine",
          "Active Skill 3: Sky Thunder",
          "Active Skill 4: Bullet Rain",
          "Acitve Skill 5: Spiral Sword",
          "Implement Passive Skills"
        ],
        "Hordes Patterns and Special Skill Module": [
          "Base Pattern Actor and Cross Pattern",
          "Circle and Grid Pattern",
          "Gauge bar of special skill",
          "Kill All Enemis inside Screen",
          "Add More Mob Flipbooks",
          "Fill Mobs Attributes in Data Table",
          "Add Mob Burst function",
          "Unpooling BOSS and Wining Logics",
          "BOSS Skill 1 - Shooting Bullet",
          "BOSS Skill 2 - Fast Moving",
          "Input Pattern Mobs Info and Import Music Asset",
          "Script 56 Mob Waves Logics"
        ],
        "Shop Module": [
          "Create Menu And Shop UI",
          "Fill Data Table of Shop Items",
          "Setup Shop Item Display Logics",
          "Create Saves Files",
          "Refund Shop Items logics",
          "Save shop item information and apply to player character",
          "Implement Random Event",
          "Save Coins When Finishing Game",
          "Option Panel for Sound Volumes",
          "Setup Level Boundary"
        ],
        "Leaderboard Module": [
          "Registry And Settings Setup",
          "Register PlayFab And Create UI",
          "Send High Score and Display Rankings",
          "Bugs Fix and Packaging"
        ]
      },
      "requirements": [
        "Some programming/game development experience"
      ],
      "description": "PAY ATTENTION: This course is designed for intermediate or advanced learners.\nFirst of all, this course is based on a my commercial game I created.\nAnd I recommend to learn this course by using UE5.3 . If you use newer version, some plugins might be not available.\n\n\nThis course took me several hundreds of hours to develop, with detailed videos spreading over more than 70 lectures, covering wide scope of modules to create a survivors style game including:\n\n\nSetup paper flipbook animations for player character, 20+ mobs and 2 BOSSES movement\n56 waves of enemies that increase in difficulty over time with different patterns\n13 unique roguelike upgradable skills and player character leveling up system\nObject pooling framework to handle large number of actors during 20 minutes gameplay\nUnique skills for BOSSES and 2 types of layer sorting methods\nPermanent save-loading system to save progress and shop system\nEnhanced Input movement component for controlling player\nReusable damage texts instance and animation, sound management to avoid crashing issue\nUtilize data table to handle large number of attributes of player character, skills, enemies\nRandom spawning hordes of mobs outside screen to attack player character\nSmoothe transition behavior of pickable items when player character is collecting them\nImplement 8 active skill slots and 8 passive skill slots logics to accomodate selected skills\nSpecial skill logics, its indicating gauge and visual effects\nRandom buff effects according to activated level in shop system\nImplement global leaderboard dashboard for all players\n...\n\n\nFor more information, please check outline of this course for a glimpse into topics we will go through.\n\n\nLast but not least, I highly recommend you follow instructions in detailed video tutorial exactly before you tweak any logics, so that it is more effective for you to learn the course.",
      "target_audience": [
        "Junior game developers who are instersted in visual scripting",
        "Game developers who are looking for a top-down 2D development guide for unreal engine",
        "Intermediate/experienced game developer",
        "People who are interested in game development"
      ]
    },
    {
      "title": "GameMaker Studio 2 - The Complete Guide",
      "url": "https://www.udemy.com/course/gamemaker-studio-2-the-complete-guide/",
      "bio": "Learn Game Development & Coding in this GameMaker Studio 2 course.",
      "objectives": [
        "Learn To Code In GML",
        "Learn To Work With Data Structures",
        "Learn Networking In GameMaker Studio 2",
        "Learn How To Make Basic Games"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "The Golden Rule",
          "All Of The Chalkboards Produced",
          "Learn How Things Work"
        ],
        "The Three Main Aspects Of Coding": [
          "The Three Main Aspects Of Coding",
          "Actions",
          "Logic",
          "Variables"
        ],
        "Learn To Code": [
          "Summary",
          "How To Run Your Game",
          "If Statements",
          "Variables",
          "Booleans",
          "Ternary Operators",
          "For Loops",
          "While Loop",
          "Math",
          "Scripts",
          "Randomization",
          "Keyboard And Mouse Input"
        ],
        "Objects And Rooms": [
          "How To Manage Your Object",
          "Collisions",
          "Animations",
          "Working With Image_Xscale And Image_Yscale",
          "Working With Image_Alpha",
          "How To Rotate Your Object: Working With Image_Angle",
          "Backgrounds And Layers In Your Room",
          "Views",
          "How To Move To The Next Room",
          "Alarms"
        ],
        "Data Structures": [
          "Data Structure Lists",
          "Data Structure Maps",
          "JSON"
        ],
        "Saving And Loading Your Game Progress": [
          "How To Save And Load Data With .INI"
        ],
        "Drawing": [
          "Draw Text",
          "Draw Sprite And Draw Rectangle"
        ],
        "Networking": [
          "Overview Of What The Server Will Do And An Important Message",
          "How To Create A Server",
          "How To Create A Client"
        ],
        "Make A Platformer": [
          "Download Link To Assets",
          "Platformer Tutorial"
        ],
        "Space Shooter": [
          "Download Link To Assets",
          "Space Shooter Tutorial"
        ]
      },
      "requirements": [
        "You need to own a copy of GameMaker Studio 2",
        "You need to have a PC"
      ],
      "description": "Learn GameMaker Studio 2\nIn this course we cover how the game engine works and how to produce certain games. We want to help anyone wanting to get into game development so they can produce the game of their dreams.\nBecome A Game Developer And Learn To Code\nWe will build example games so you can understand how to use the engine and the functions provided. Examples are very important as we believe to truly become a game developer, you must know how to solve problems and not just have the tools to do so.\nYou will truly understand at the end of this course how to solve problems that others will not have the answers to.\nTo control your player and enemies in your game, you need to learn to code. Coding is not difficult at all; in fact, it's easier than it looks. You will know what if statements, while loops, for loops, and what variables are. Once you learn all of these skills you can impress your friends and start creating games! The programming language you will learn is GML; which, is similar to many other popular programming languages you may want to learn in the future.\n\nBenefits\nThe knowledge from learning to work with GameMaker Studio 2 will enable you to learn and understand other programming languages such as Java and C# with ease. Less work is needed in transitioning to other engines and languages when you understand how to work with basic computer logic and math.",
      "target_audience": [
        "Anyone who wishes to learn to code",
        "Anyone who wants to make games"
      ]
    },
    {
      "title": "Complete C# Unity 3D Game Development in Unity 6",
      "url": "https://www.udemy.com/course/unitycourse2/",
      "bio": "Build 5 playable 3D games in Unity 6 using C#. Learn real coding skills and master core game dev techniques.",
      "objectives": [
        "Learn to code in C# from scratch by building real Unity 3D games",
        "Build 5 fully playable games in Unity 6, including a rail shooter, endless runner, and FPS",
        "Master essential coding skills: variables, loops, conditionals, functions, and classes",
        "Create polished game mechanics like player movement, collisions, and enemy AI",
        "Use Unity tools like Timeline, Terrain, and ProBuilder to design game worlds",
        "Implement key systems like raycasting, weapon switching, and object pooling",
        "Explore advanced gameplay features like procedural generation and post-processing",
        "Follow a proven project-based structure: challenge → build → apply your knowledge"
      ],
      "course_content": {},
      "requirements": [
        "A PC or Mac capable of running Unity 6 or later.",
        "Regular internet access for course updates, Q&A, and community access",
        "No prior programming or Unity experience required"
      ],
      "description": "This course has been updated to Unity 6, but is still compatible with older versions of Unity.\nThis is the long-awaited sequel to the Complete Unity Developer - one of the most popular e-learning courses on the internet! Completely re-worked from scratch with brand-new projects and our latest teaching techniques. You will benefit from the fact we have already taught over 2 million students programming and game development, many shipping commercial games as a result.\nUnity is an incredible 3D package used for making video games, architectural and medical imaging and more. The challenge is that it's big and complicated to use, especially for complete beginners to coding and game development. We make learning to code easy and fun by leading you step-by-step through the process of creating exciting games.\nGet plugged into our communities of amazing developers on Facebook (nearly 20k), in our own Teaching Assistant-curated Community, and our student Discord chat channel.\nIf you're reading this you probably already have everything you need to get started. Unity is a free download. With regular access to an internet connection you'll be able to engage in our thriving community. Even if you have no experience with coding, or with 3D packages, we will guide you through everything from first principles. Starting slow, then building on what you learn, you'll soon have a very solid working knowledge of Unity.\nYou’ll build five fun games, each teaching you key skills in game development. From the basics like variables and collision detection to more advanced stuff like procedural generation and AI, you’ll master it all - while dodging obstacles and blasting aliens!\n\n\nCreate an 'Obstacle Dodge' game. Learn player input, collisions, variables, and if statements. It's the perfect way to get your feet wet in Unity.\nLaunch into \"Rocket Boost\", a physics-based game. Mess around with forces, namespaces, and classes. Push that rocket—and your skills—even further!\nGear up for \"Galaxy Strike\", an old-school rail shooter. Master Unity's terrain and timeline tools while coding arrays, for-loops, and coroutines. Arcade fun with a modern twist!\nCraft a procedural endless runner in 'Royal Run'. Build worlds that never stop, use lists, pickups, animations, post-processing, and more.\nGet your eye in on \"Sharp Shooter\", a first-person shooter. Tackle nav mesh agents, enemy AI, weapon switching, raycasting, and prototyping levels with ProBuilder. Because who doesn't want to make an FPS?\n\n\nDon't take our word for it, please see the amazing reviews students have taken the time to write. We are proud to be transforming lives, and equipping 1000s of people with valuable new skills. We would love you to become one of them now.\nThe course is project-based, so you will not just be learning dry programming concepts, but applying them immediately to real indie games as you go. All the project files will be included, as well as additional references and resources - you'll never get stuck. There are \"talking heads\", powerful diagrams, quality screencasts and more.\nFor each demo game you build you will follow this process...\nBe challenged to build the entire game yourself.\nBe shown step-by step how to build it.\nBe challenged to apply, and re-apply your knowledge regularly.\nPrefer to focus on 2D? Check-out our Complete Unity Developer 2D course. Want something a little more advanced? Check-out our epic Unity RPG course. Want to get certified, get a job, or learn environment art - we've got you covered. The green leaf logo is your sign of quality.\nYou will get full lifetime access for a single one-off fee. The creators are qualified and experienced coders and avid gamers, so are able to explain complex concepts clearly, as well as entertain along the way.\nWhat this course DOESN'T cover...\nHere are some things we will not be covering in detail...\nArt asset creation (assets provided but not made on-screen).\nAdvanced performance optimization.\nEditor plugins or modifications.\nPhysics engine modification.\nAnyone who wants to learn to create games: Unity 3D is a fantastic platform which enables you to make production-quality games. Furthermore these games can be created for Windows, MacOS, iOS, Android and Web from a single source!\nDive in now, you won't be disappointed!",
      "target_audience": [
        "Anyone who wants to learn to code the fun way - by making games.",
        "Beginners who want to start learning C# programming and Unity 3D from scratch",
        "People who learn best by building real projects instead of just watching tutorials",
        "Aspiring indie game developers looking for a practical, project-based learning path",
        "Anyone curious about game development with no prior coding or Unity experience"
      ]
    },
    {
      "title": "The Ultimate 2D & 3D Shader Graph VFX Unity Course",
      "url": "https://www.udemy.com/course/the-ultimate-2d-3d-shader-graph-vfx-unity-course/",
      "bio": "Learn the foundations of Unity's Shader Graph and proceed with confidence from beginner to intermediate level.",
      "objectives": [
        "Understanding Built-in, URP and HDRP render pipelines",
        "Understanding Shaders and Shader Graph",
        "Create 2D Shader Graphs in Unity",
        "Create 3D Shader Graphs in Unity",
        "Learn Real-Time VFX"
      ],
      "course_content": {
        "Introduction": [
          "Introduction: Course Overview",
          "What is Shader and what is Shader Graph?",
          "What is a render pipeline?",
          "Creating your first URP Unity project",
          "Converting existing project from Built-in render pipeline to URP",
          "Creating your first 2D Shader Graph"
        ],
        "2D Fire Projectile Shader Graph": [
          "Drawing Flames Texture in Photoshop",
          "Creating texture scrolling nodes",
          "Creating colorizing nodes",
          "Creating Movement Dissolve Nodes",
          "Creating Mask Nodes & Final 2D Fire VFX"
        ],
        "2D Wind Vegetation Shader Graph (Vertex Movement Tutorial)": [
          "Using Vertex Position Movement Nodes",
          "Masking the Vertex Movement"
        ],
        "2D Dissolve Shader Graph": [
          "Creating the Dissolve Nodes",
          "Creating the Outline Nodes + Adding Glow Post-Processing Effect",
          "Creating a Script that Controls the Dissolve In and Dissolve Out"
        ],
        "2D Distortion Shader Graph": [
          "Creating the Distortion Nodes",
          "Adding New Render Feature to Allow 2D Distortion",
          "Adding Soft Mask + Distortion Examples"
        ],
        "2D Pixel Art Shader Graphs": [
          "Creating Pixelation Shader",
          "Creating Pixilation Effect Control Codes",
          "Creating 2D Pixel Art Wind Shader Graph"
        ],
        "Standard 3D Lit Shader Graph - Physics-Based Rendering (PBR) Material": [
          "Understanding and Creating the Base Map Nodes",
          "Understanding and Creating the Metallic and Smoothness Maps Nodes.",
          "Understanding and Creating the Normal and Depth Maps Nodes",
          "Understanding and Creating Ambient Occlusion Map Nodes",
          "Understanding and Creating the Emission Map Nodes"
        ],
        "3D Magical Portal": [
          "Creating circle with feathered edges",
          "Creating seamless texture in Photoshop + Vortex effect nodes",
          "Assembling differnt layers of the vortex to create the magical portal VFX",
          "Controling the portal to open and close by code"
        ],
        "3D Stylized Water Shader": [
          "Setting Up the Scene & Creating Water Depth Sub-Shader Graph",
          "Creating Water Refraction and Normal Nodes",
          "Creating Water Foam Nodes",
          "Adding Water Waves Nodes and Smoothness"
        ],
        "3D Halftone Shader Graph": [
          "Creating your first custom lighting.",
          "Creating the Halftone effect Using the Voronoi Node.",
          "Creating the Outline."
        ]
      },
      "requirements": [
        "Unity : Basics.",
        "Blender : Basics.",
        "Photoshop : Basics."
      ],
      "description": "Hello everyone, I’m Ramez Al Tabbaa, the developer of the AvoCuddle game on Steam and the Co-Founder of the Binary Lunar YouTube channel with more than 10k happy subscribers who enjoys more than 70 free tutorials; I have three years of experience in shader graph and gathered all my expertise in this 6 hours course. So, if you want to save time, effort, and money, this course is definitely for you.\nEnter the shader graph world and bring your game visuals to life; this course will carry you from beginner to intermediate level in Shader Graph and VFX with steady steps.\n\nHere is an overview of what you are expecting from this course; you will learn the core concepts behind shaders and render pipelines in the Unity engine, and we will cover the most used nodes in shader graph through the following topics where they increase in complexity as we proceed with the course:\n\n\n2D fireball projectile shader graph\n2D Wind Vegetation Shader Graph\n2D Dissolve Shader Graph\n2D Pixel Art Shader Graphs\nStandard 3D Lit Shader Graph\n3D Stylized Water Shader\n3D Halftone Shader Graph\nSub-Surface Scattering (SSS) Shader Graph\nTriplanar Shader Graph\nZelda Toon Shader Graph\nStylized Fire Projectile VFX\nFire Storm Axe Portal Punch VFX 1\nColors Theory\n\n\nAlways remember nothing is impossible with a strong will and consistency; your dreams are only limited by your imagination, so unleash your creativity and release your true protentional by understanding how Shader Graph works, then expanding your knowledge into endless possibilities.",
      "target_audience": [
        "Game Developers",
        "Unity Users",
        "VFX Creators",
        "3D Generalists",
        "Programmers"
      ]
    },
    {
      "title": "Godot 4 Multiplayer: Make Your Own Online Game",
      "url": "https://www.udemy.com/course/godot-4-multiplayer/",
      "bio": "Start creating multiplayer games in Godot 4 with GDScript and NEW W4 Cloud!",
      "objectives": [
        "Make an online multiplayer game using Godot’s 4.x multiplayer framework.",
        "Learn how to sync all these mechanics across the internet so that players can interact with each other and work together to complete puzzles.",
        "Create many common co-op puzzle platformer mechanics, such as pressure plates, movable objects, locked doors and more.",
        "Use W4 Games lobbies to connect to other players safely over the internet - coming soon!"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Networking Basics",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Player Character": [
          "Section Intro - Player Character",
          "Importing Assets",
          "Tile Sets",
          "Animation Setup",
          "Movement Input",
          "Movement Animations",
          "Double Jumping",
          "Camera Following",
          "Parallax Background",
          "Player Refactoring"
        ],
        "Multiplayer Connection": [
          "Section Intro - Multiplayer Connection",
          "Main Menu",
          "Hosting A Game",
          "Remote Procedure Calls",
          "Joining A Game",
          "Starting The Game",
          "Spawning Players",
          "Player Authority"
        ],
        "Platformer Puzzles": [
          "Section Intro - Platformer Puzzles",
          "Player State Machine",
          "Pressure Plate",
          "Opening A Door",
          "Connecting Interactables",
          "Treasure Chest",
          "Player Interaction",
          "Key Item",
          "Exit Door",
          "Level Design",
          "Co-op Bridge",
          "Pushable Objects",
          "Transferring Ownership",
          "Pushing Forces",
          "Player Finder",
          "Interpolation",
          "Varied Characters",
          "Level Exit"
        ],
        "Connecting Online": [
          "Section Intro - Connecting Online",
          "Multiplayer Services",
          "W4 Games",
          "Authentication",
          "Creating A Lobby",
          "Joining A Lobby",
          "Leaving A Lobby",
          "Course Wrap-Up"
        ]
      },
      "requirements": [
        "A basic knowledge of Godot and GDScript would be helpful, but not essential.",
        "Some experience making single player games would also be useful."
      ],
      "description": "Want to create your own multiplayer masterpiece, where players unite, solve puzzles and embark on adventures together?\nWe’re here to guide you from solo to multiplayer game development using Godot 4. Get ready to make an online game that players won’t want to leave.\nImagine crafting puzzles where players truly need each other. Pressure plates, movable objects, locked doors—you name it, you'll create it.\nThe course tackles the techy stuff, like connecting players over the internet, head-on. While we perfect this feature, get excited for the endless possibilities it’ll bring to your game world.\nYou’ll build an engaging multiplayer game with Godot’s latest multiplayer framework. From syncing game mechanics to global player collaboration, you’ll master it all.\nOnce you've created your game, you'll have a bunch of options for taking it online: Port Forwarding, Relay-Servers, or Dedicated Hosting.\nWe'll also be diving into using the newly launched W4 Games lobbies to get you connected with others around the globe.\nMultiplayer game development sounds daunting, right? Data syncing, server-client authority, and the hassle of hosting. We’ll break these down into manageable lessons, turning challenges into your new strengths.\nThis course is for those who’ve dabbled in single-player games and are itching to explore the online multiplayer universe. It’s a step up, a way to connect and share your creations with the world.\nAll you need to start is a basic grasp of Godot and GDScript, plus some experience in single-player game making. We’re building on your knowledge to open new doors in game development.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAnd you’ll get access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nSo, are you ready to transform your game dev dreams into reality? Join us and lets create gaming experiences that bring players together, one puzzle at a time!",
      "target_audience": [
        "This is course is perfect for you if you've already worked on single player games and want a new challenge.",
        "It's also ideal if you want to make games that can be played online with others!"
      ]
    },
    {
      "title": "Creating An RPG In GoDot",
      "url": "https://www.udemy.com/course/creating-an-rpg-in-godot/",
      "bio": "Games in a python like language",
      "objectives": [
        "How to create auto-tiles",
        "Basic enemy AI",
        "How to make quest journals",
        "Equip items",
        "Encrypt your saved data",
        "and more"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How To Get Godot",
          "Quick Look At UI and Shortcuts",
          "Project Setup and Templates",
          "Importing Assets"
        ],
        "Creating An RPG": [
          "Creating Auto-tiles",
          "Godot 4 Auto Tiles and Collision",
          "Auto Tile Snapping",
          "Player Movement",
          "Animated Movement",
          "Camera Customization",
          "Invisible Barricades",
          "Action Based System",
          "Weapon Hit Detection",
          "Detection Tweaks",
          "NPCs",
          "NPC Interaction",
          "Dialog Part 1",
          "Dialog Part 2",
          "Player Stats",
          "Health Bar",
          "Experience Bar",
          "Pause Menu",
          "Projectiles",
          "The Enemy",
          "Enemy AI",
          "Game Over",
          "Quests Part 1",
          "Quests Part 2",
          "Script Changes",
          "Custom Cursor",
          "Level Up",
          "Inventory",
          "Saving and Loading Inventory",
          "Example Use",
          "File Encryption",
          "Currency",
          "Stat Display",
          "Add Equipment",
          "Equipping Items",
          "Unequipping Items",
          "More Saving and Loading",
          "Json File Saving",
          "Audio Settings",
          "Display Settings",
          "Main Menu",
          "Adding Audio",
          "Exporting Your Game"
        ]
      },
      "requirements": [
        "None but basic understanding of how to navigate around GoDot and GDScript fundamentals will help"
      ],
      "description": "Learn to create games in the Godot game engine using a python-like programming language, GDscript.\n\nIn this course, we will create an RPG that is cross-platform for MacOS, Windows, Linux, Android, IOS or even embed into a browser.\n\nWhile on your game development journey you will gain the skills and ability to create the RPG you want.\n\nThough no prior knowledge is needed beyond basic computer use and typing, knowing how to navigate around the program and having some GDscript or programming knowledge will always help in learning to develop games and basic programming knowledge is recommended as we do not go over basic syntax such as \"what is a variable\" If you have no programming experience I have a course on helping you learn the basics of GDscript programming available.\n\nYou will learn to:\n\nCreate Animations\nCreate An Auto-Tile Tileset\nPass data between scripts\nCreate Simple AI For Enemies\nCreating A Quest System\nHow to encrypt data\nGood Coding Practice\nand more...\n\nGodot provides a huge set of common tools, so you can just focus on making your game without reinventing the wheel.\nGodot is completely free and open-source under the very permissive MIT license. No strings attached, no royalties, nothing. Your game is yours, down to the last line of engine code.\n\nThough no prior knowledge is needed beyond basic computer use and typing, knowing how to navigate around the program and having some GDscript or programming knowledge will always help in learning to develop games and basic programming knowledge is recommended as we do not go over basic syntax such as \"what is a variable\" If you have no programming experience I have a course on helping you learn the basics of GDscript programming available.",
      "target_audience": [
        "GoDot developers who want to learn to make an RPG or how to make some RPG elements"
      ]
    },
    {
      "title": "The Ultimate C++ Unreal Engine 5 & AI Game Dev Course",
      "url": "https://www.udemy.com/course/full-ai-system-in-unreal-engine5-and-cpp-beginners-to-advance/",
      "bio": "Master Unreal Engine 5 Game Development with C++ and Build Advanced AI Systems Using Behavior Trees and C++ Classes",
      "objectives": [
        "Build a strong foundation in C++ programming, progressing to advanced concepts for use in Unreal Engine 5.",
        "Understand how to integrate C++ with Unreal Engine 5 to create powerful gameplay systems.",
        "Build complete game mechanics using C++, including movement, shooting, health, and damage systems.",
        "Master object-oriented programming concepts like classes, inheritance, polymorphism, and virtual functions.",
        "Use Actor, Pawn, and Character classes effectively within Unreal Engine to create dynamic characters.",
        "Create and control intelligent enemies using AI Controllers, Behavior Trees, and Blackboards.",
        "Design and develop a complete shooter game using Unreal Engine 5 and C++.",
        "Full AI control people",
        "AI control cars",
        "Create vehicle AI systems that allow cars to drive, take damage, and explode dynamically.",
        "Car driving",
        "Car damage effect, exploding and spawning old damaged car after shooting the car",
        "Strong AI police system",
        "Creating final project",
        "Implement advanced AI features such as line of sight, shooting decisions, and damage responses.",
        "Learn to use Navigation Mesh and pathfinding systems to control AI movement.",
        "Work with animation blueprints, blend spaces, and state machines to create realistic character movement.",
        "Use C++ to spawn actors, control components, and manage game logic.",
        "Build interactive UI elements like health bars, HUDs, and game over screens using widgets.",
        "Game HUD, Health bar, Loser screen widget, field of view of camera and enemy health bar",
        "Develop and polish a complete game project that includes AI enemies, player mechanics, sound, and effects.",
        "Gain the confidence to build your own AI-driven games using C++ and Unreal Engine 5 from scratch."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Installing Visual Studio community 2022 and Visual Studio Code"
        ],
        "C++ Basics to Advance - Updated": [
          "First Program in C++",
          "Statements in C++",
          "Names and Keywords",
          "Building C++ Program",
          "Errors and Warnings",
          "Data Types",
          "Variables",
          "Integers",
          "const Keyword",
          "Operations on Integers",
          "Increment and Decrement Operators",
          "Floating Point",
          "Type Conversion",
          "Characters",
          "Strings",
          "auto Keyword",
          "Variable Lifetime",
          "Operators",
          "Arithmetic Operators",
          "Assignment Operators",
          "Relational Operators",
          "Logical Operators",
          "Conditional Operator",
          "Boolean",
          "if - else",
          "if-else Example",
          "if-else Example",
          "else if",
          "Nested if",
          "Switch",
          "Loops",
          "while Loop",
          "do...while Loop",
          "for Loop",
          "Range based for Loop",
          "Arrays",
          "Array Elements",
          "Cpp strings",
          "Functions",
          "Calling Functions",
          "Parameters and return",
          "Default Arguments",
          "Arrays to Functions",
          "Static Variables",
          "Function Overloading",
          "Recursion",
          "How do function calls work",
          "Inline Functions",
          "Pointers",
          "Dereferencing Pointers",
          "Array of Pointers and pointer to array",
          "Constant and Pointers",
          "Pointer Arithmetic",
          "Dynamic Memory Allocation",
          "Hazards of Dynamic Memory Allocation",
          "Hazards of Dynamic Memory Allocation - Example",
          "Smart Pointers",
          "Unique Pointer",
          "Shared Pointer",
          "Reference",
          "Returning a pointer from a function",
          "Passing by Reference",
          "Returning Reference from a Function",
          "Input and Output Parameters",
          "Enumerations",
          "Enumerations (Examples)",
          "OOP",
          "Accessing Class Members",
          "Struct",
          "Member Methods",
          "Constructors and Destructors",
          "Default Constructor",
          "friend Class",
          "Setters and Getters",
          "Namespace",
          "Nested Namespace",
          "Inheritance",
          "is a' test",
          "protected class members",
          "Constructors and Destructors",
          "Override class Methods",
          "Polymorphism",
          "virtual Functions",
          "VTables",
          "Default Arguments with virtual functions",
          "static_cast",
          "dynamic_cast"
        ],
        "C++ Basics - Old": [
          "Section Overview",
          "Build first program",
          "Printing hello world",
          "Input",
          "New line",
          "Comment",
          "Compile and Error",
          "Variable",
          "Variable types",
          "Variable Declaration",
          "Variable naming rules",
          "Variable initialization",
          "TEST Program",
          "Constant",
          "Arrays",
          "Initializing Arrays",
          "Accessing the elements of an Array",
          "Expressions and statements",
          "Operators",
          "if - else statement",
          "Looping",
          "While Loop",
          "do...while loop and for loop",
          "What is a function",
          "Function in C++",
          "Pointers",
          "Dereferencing a Pointer",
          "Array of Pointers",
          "const and pointers",
          "Pointer Arithmetic",
          "Reference",
          "Passing by reference",
          "Section Summary",
          "Section Quiz"
        ],
        "C++ first program in C++": [
          "Section Overview",
          "Simple Program",
          "For Loop",
          "Finish program",
          "Section Summary"
        ],
        "Unreal Engine 5 Basics": [
          "Section Overview",
          "Introduction to Unreal Engine 5",
          "Installing Unreal Engine",
          "Creating first project",
          "User Interface",
          "Navigation",
          "View port Settings",
          "Creating and Transforming objects",
          "Post Process Volume",
          "Materials",
          "Texture based Material",
          "Material Parameters, instance and Master Material",
          "Lighting System in Unreal Engine 5",
          "What is Lumen?",
          "Landscape",
          "Landscape Material",
          "Quixel Library",
          "Foliage System in Unreal Engine 5",
          "Section Summary",
          "Do you want to know more about Unreal Engine 5?"
        ],
        "Beginner C++ and UE5 combined use (simple car driving game)": [
          "Section Overview",
          "New Project and files migration",
          "Creating first C++ class in Unreal Engine 5",
          "UE5 Components",
          "Introduction to the code inside Pawn class",
          "Forward Declaration",
          "Capsule Component",
          "Static Mesh Component",
          "UPROPERTY",
          "Spring Arm and Camera Components",
          "Possessing the Pawn as game player",
          "Enhanced Input",
          "Enhanced Input",
          "Subsystem",
          "Input Action",
          "Bind Axis Mapping",
          "Car Movement Control",
          "Car Speed Control",
          "Car Turn",
          "Collision",
          "IsCarMoving",
          "Section Summary"
        ],
        "Creating game map": [
          "Creating an empty level and lights",
          "Creating the map",
          "City map overview"
        ],
        "Shooter Game Starter": [
          "Section overview",
          "Game Setup",
          "Character Movement",
          "Spring Arm and Camera",
          "Animation Blueprint",
          "Animation Blend Space",
          "Movement Speed",
          "Gun Class and Spawning it",
          "Attaching to Socket",
          "Shoot",
          "Particle Effect",
          "LineTraceByChannel",
          "Gun Effects",
          "Sending and Receiving Damage",
          "Killing the Character",
          "Section Summary"
        ],
        "Game AI": [
          "Section Overview",
          "AI Controller",
          "MoveToActor Function",
          "LineOfSightTo function",
          "AI Police",
          "Destroy Enemy Character",
          "Behavior Tree",
          "BT_Decorators",
          "Custom BT Shoot",
          "FCollisionQueryParams",
          "Section Summary"
        ],
        "Game Details": [
          "Section Overview",
          "Sound Effects",
          "GameModeBase",
          "PlayerController",
          "LoserScreen Widget",
          "Game HUD",
          "Healthbar",
          "Field Of View Of Camera",
          "Animation State Machine",
          "Enemy Health bar",
          "Section Summary"
        ]
      },
      "requirements": [
        "No previous Unreal Engine or Programming experience needed."
      ],
      "description": "This is your complete, all-in-one course for learning AI game development with Unreal Engine 5 and C++ — starting from the very basics and progressing all the way to advanced systems. Whether you're a beginner with no prior experience or an intermediate developer looking to go deeper, this course is designed to equip you with both foundational knowledge and practical game development skills.\n\n\n-  Why This Course?\nC++ is one of the most powerful programming languages in the world, used in systems, games, and high-performance applications. Unreal Engine 5 is the industry-standard engine behind Fortnite, Borderlands 3, Star Wars Jedi: Fallen Order, and many more. Combining the power of C++ with UE5 gives you unmatched control, speed, and performance in your games — and in this course, you’ll learn how to do exactly that.\nWe’ll start with C++ from scratch, then dive into Unreal Engine 5 basics, and finally go deep into AI programming, game mechanics, and game systems.\n\n\n- What You’ll Learn\nSection 1: C++ Programming for Game Developers\nWriting your first C++ program\nUnderstanding compilation, errors, and debugging\nVariables, constants, arrays, expressions, and statements\nConditional logic: if-else, switch, loops\nFunctions and recursion\nMemory management: pointers, smart pointers, references\nObject-Oriented Programming: classes, inheritance, polymorphism\nVirtual functions and VTables\nEnumerations, structs, namespaces\nStatic vs dynamic casting\nAdvanced memory handling and hazards\nBonus: Build a \"Secret Maker\" program using pure C++\nSection 2: Unreal Engine 5 Essentials\nInstalling Unreal Engine 5\nNavigating the UE5 interface\nViewport settings, transformation tools, and camera controls\nMaterials, textures, lighting, and Lumen\nCreating landscapes and applying Megascans assets\nUsing the Foliage System to bring your world to life\nSection 3: C++ with Unreal Engine 5 – Build a Simple Car Game\nCreating C++ classes in UE5\nActor vs Pawn vs Character classes\nWorking with Actor Components\nForward declarations and UPROPERTY\nMesh, camera, and spring arm setup\nEnhanced Input System\nLogging with UE_LOG\nMovement and rotation using Delta Time, FVector, and FRotator\nSection 4: Building a Game World\nCreating a complete game map\nLevel design and optimization tips\nSection 5: Creating a Shooter Game (with C++)\nCharacter setup and movement\nAnimation Blueprints and Blend Spaces\nSpawning and attaching actors\nImplementing shooting mechanics with line tracing\nTaking and dealing damage with virtual functions\nHealth, death, and animation triggers\nSection 6: AI Programming in UE5 (with C++)\nAIController class and SetFocus\nNavigation Mesh (NavMesh)\nAI Movement using MoveToActor and LineOfSightTo\nIntroduction to Behavior Trees\nBT Tasks, Decorators, and Blackboard\nCreating custom BTTaskNodes\nAI shooting and combat behavior\nUsing FCollisionQueryParams\nSection 7: Game Polish and UX\nGameMode and PlayerController setup\nAdding UI elements using Widgets\nHealth bars and Game HUDs\nCustom game over screens\nFOV camera effects and state machines\nSection 8: Advanced AI Systems\nFully controllable AI humans with logic\nSmart AI vehicles with driving capabilities\nCar damage and explosion effects\nSpawning damaged vehicles\nAdvanced enemy behavior with combat logic\nSection 9: Finalizing the Game\nFinal game structure and integration\nSound effects and polish\nPerformance tips\nPreparing for packaging\n- Who Is This Course For?\nAspiring game developers who want to master C++ in Unreal Engine 5\nUnreal Engine users who want to go deeper into programming and AI\nStudents, hobbyists, and professionals looking to build powerful game systems\nAnyone interested in learning how AAA-quality games are built\n- By the End of This Course, You Will:\nBe confident in using C++ to develop gameplay and AI systems in UE5\nUnderstand how to create both simple and advanced AI behaviors\nBuild shooter mechanics, animation systems, damage systems, and full game maps\nFinish with a complete, polished AI-driven game project you can show in your portfolio",
      "target_audience": [
        "Aspiring game developers who want to master C++ in Unreal Engine 5",
        "Unreal Engine users who want to go deeper into programming and AI",
        "Students, hobbyists, and professionals looking to build powerful game systems",
        "Anyone interested in learning how AAA-quality games are built"
      ]
    },
    {
      "title": "Learn Modern OpenGL Programming",
      "url": "https://www.udemy.com/course/learn-modern-opengl-programming/",
      "bio": "Create Your Own 3d Graphics with OpenGL and C++",
      "objectives": [
        "Learn a practical level of programming with modern OpenGL",
        "You will learn how to set up an OpenGL window using GLFW and the OpenGL API",
        "You will learn how to write GLSL shaders that program your PCs video card for hardware accelerated graphics",
        "You will learn how to render simple textured rectangles to complex 3D models with realistic lighting",
        "You will learn different types of lighting to make the models look more realistic",
        "You will learn how to set up and control a virtual camera to move around and view objects in the 3D scene"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Setting Up Your Environment",
          "Window and Input",
          "Your First Triangle",
          "Shaders",
          "Texture Mapping",
          "Coordinate Systems",
          "Virtual Camera I",
          "Virtual Camera II",
          "Loading OBJ Models",
          "Basic Lighting I",
          "Basic Lighting II",
          "Basic Lighting III"
        ]
      },
      "requirements": [
        "Windows PC with Windows 7 or higher operating system.",
        "Microsoft Visual Studio 2013 or higher. (Visual Studio can be downloaded for free.)",
        "You will need a basic understanding of C++ programming."
      ],
      "description": "This course will introduce you to modern OpenGL programming.  We will teach you a brief history of OpenGL to help you understand why we chose to teach modern OpenGL with its programmable rendering pipeline over the fixed function pipeline. The majority of tutorials and books only teach the outdated versions of OpenGL API with its fixed function pipeline. We will show you how to use the faster, more efficient and more flexible OpenGL API.\n\nWe begin with the basics of getting OpenGL running in a window using the GLFW library.  Then we will move on to understanding the basics of rendering polygons to the display by sending buffers of data to the computers graphics card and programming it using shaders with the GLSL shading language.  We learn how to map textures to our objects. We'll set up a virtual camera using keyboard and mouse inputs to enable us to move around in the scene.\n\nAfter we have the fundamentals working then we can start building more complex things.  We will learn how to load 3D models and add interesting lighting to the scene.  By the end of this course, you will know how to set up and render in 3D with modern OpenGL.  With each lesson we build the framework with reusable C++ and OpenGL code.  That is a great starting place for you to build your own game engine.  We will start with a blank project and write code each step of the way and each lesson builds upon the last.  Even if you have never touched OpenGL you should find the course easy to follow and everything explained along the way. All of the source code, pre-built third party libraries and Visual Studio solutions for each lesson are included.",
      "target_audience": [
        "People that wish to learn modern OpenGL and its programmable rendering pipeline. Whether you are trying to learn OpenGL for school, in the pursuit of a career or simply looking for a hobby, this course will be perfect for you."
      ]
    },
    {
      "title": "RPG Shops & Abilities: Intermediate C# Game Coding",
      "url": "https://www.udemy.com/course/rpg-shops-abilities/",
      "bio": "Implement Shop Systems, Special Abilities, distributable Trait Points and polish your finished RPG!",
      "objectives": [
        "Build a Shop System fit for any game genre",
        "Build a highly flexible RPG Ability System",
        "Advanced programming concepts such as Composite and Strategy patterns",
        "Create a RPG Trait System to distribute points to Str, Dex, Int, etc.",
        "Design a dynamic Main Menu",
        "Load and save to multiple slots",
        "Create a full game moment to showcase your game"
      ],
      "course_content": {
        "Shops": [
          "Architectural Overview: Recap",
          "Which Unity Version?",
          "Shop Section Overview",
          "Creating a UI Component Library",
          "Solution: Component Library",
          "Shops Basic UI Outline",
          "Headers",
          "Row Variants",
          "Component APIs",
          "Opening Shops",
          "Shop Names & Closing",
          "Building A Shopping List",
          "Displaying A ShopItem",
          "Configuring Stock And Price",
          "Quantity Widget",
          "Preparing A Transaction",
          "Completing A Transaction",
          "Calculating A Total",
          "Money Component",
          "Money UI",
          "Tracking Stock",
          "Checking A Transaction",
          "Checking Inventory Space",
          "Stackables And Free Slots",
          "Switching To Selling",
          "Counting Inventory Availability",
          "Selling Transactions",
          "Setting Filters",
          "Displaying Filters",
          "Filtering Items",
          "Stock Config Based On Level",
          "Calculating Price By Level",
          "Replenish Stock By Level",
          "Saving Stock & Purse"
        ],
        "Abilities": [
          "Abilities Section Overview",
          "Triggering The Action Bar",
          "The Strategy Pattern",
          "Overriding And Abstract Classes",
          "Coroutines From Scriptable Objects",
          "Sphere Cast Area Of Effect",
          "Making A Summoning Circle",
          "Filtering Strategy Pattern",
          "Effect Strategies",
          "Grouping Parameters Into A Class",
          "Blast Particle Effects",
          "Cooldown Timers",
          "Image Type: Filled",
          "Mana Component And Display",
          "Mana Regeneration",
          "Mana Progression",
          "Animation Effect Strategy",
          "The Composite Pattern",
          "Cancelling Abilities",
          "Saving Mana",
          "Self Targeting Strategy",
          "Spawning Projectiles Effect",
          "Directional Targeting",
          "Polish And Extensions"
        ],
        "Traits": [
          "Traits Section Overview",
          "Mock Trait UI",
          "Trait Row UI Scripts",
          "Trait Store Component",
          "Staging And Committing Traits",
          "Progression And Trait Points",
          "Traits And Modifiers",
          "Shop Barter System",
          "Wrap-up & Extensions"
        ],
        "Menus": [
          "Menu Section Overview",
          "Creating A Main Menu Scene",
          "Importing Fonts & Menu UI",
          "Continue Last Save",
          "Switching UI Screens",
          "New Game & PlayerPrefs",
          "Load Game UI",
          "List Files In A Directory",
          "Pausing With TimeScale",
          "Save And Quit",
          "Respawn On Death",
          "Resetting Animators",
          "Resetting Enemies",
          "Bug Fixes & Extensions"
        ],
        "Final Moment": [
          "Final Moment Section Overview",
          "Initial Level Layout Sketch",
          "Auto Attacking and Super Speed",
          "Armour and Defence Points",
          "Tuning Combat Difficulty",
          "Tuning Item Price",
          "Money Pickups",
          "Tuning Drops",
          "Conditions For Equipment",
          "Tough Fight",
          "Experience Tuning",
          "Conditional Dialogues",
          "Conditional Quest Objectives",
          "Course Wrap-up & Extensions"
        ],
        "Continuing Your GameDev Journey": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You should be able comfortable writing intermediate C#.",
        "Some familiarity with Unity's APIs is mandatory.",
        "You should know your way round Unity's editor quite well.",
        "We recommend you take at least the first half of our Complete Unity Developer 2D or 3D, or equivalent, as a pre-requisite.",
        "Previous courses from the RPG series will be extremely helpful but not required."
      ],
      "description": "Learn how to include three essential game mechanics, Shops, Special Abilities and Traits, in your games.\nThis highly acclaimed series was over 200% funded on Kickstarter, and is designed for intermediate users of Unity. We recommend you take at least the first half of our Complete Unity Developer 2D or 3D, or equivalent, as a prerequisite.\nYou can use the code we create in the course in any game or project you build. We’ll be using an RPG as an example. You don't need to have completed the previous parts of the RPG Series (the RPG Core Combat, Inventory Systems and Dialogue & Quests courses) but it will give you an advantage if you already have.\nThe course is project-based as we believe this is the best way to learn Unity and C#. You will not just be learning dry programming concepts, but applying them immediately to a real RPG as you go.\nWe’ll provide the RPG project created so far in the series so that you can practice integrating to an existing complex project. Every element of the project we touch will be fully explained and no knowledge of the project will be required.\nIn the course we will be building the following from scratch:\nShop and Traits UI\nIntegration between Traits and a modifier system\nMain menus\nBarter system giving discounts to player with high charisma\nBuying and selling\nFiltering shop items by type\nFlexible and composable special abilities\nCooldown timers\nMana and money\nIn the process of the course we will cover advanced topics such as: C# Delegates, Interfaces, Lambdas, Strategy and Composite Patterns.\nYou will get full lifetime access for a single one-off fee. The creators are qualified and experienced coders and avid gamers, so are able to explain complex concepts clearly, as well as entertain along the way.\nYou will have access to a course forum where you can discuss topics on a course-wide basis, or down to the individual video. Get plugged into our communities of amazing developers on Facebook (nearly 20k), in our own TA-curated Community (17k views/day), and our student chat group (10k live at any one time).\nThe course is still in production with new videos dropping on a weekly basis, making now a great time to get involved and help shape its future.\nShops and Abilities are core to many game genres. So why not join us and get started improving your game development right now?",
      "target_audience": [
        "This course is for intermediate Unity users who want to create their own Shop, Abilities or Traits systems.",
        "Students who want to complete the RPG series."
      ]
    },
    {
      "title": "Godot 4 C# Action Adventure: Build your own 2.5D RPG",
      "url": "https://www.udemy.com/course/godot-4-c-action-adventure-build-your-own-25d-rpg/",
      "bio": "Unleash Your C# Skills in Game Development: Master 2.5D RPG Creation in Godot 4",
      "objectives": [
        "Build a Complete 2.5D RPG: From concept to completion, develop an RPG with engaging combat and ability systems, immersive UI, and essential RPG features.",
        "Code with Confidence: Write Scalable, Maintainable Code: Grasp the art of scalable coding. Learn when and how to refactor for a game that grows with your vision",
        "Explore Godot’s Core: Get hands-on with nodes, scenes, and animations, unlocking the full potential of the engine.",
        "C# Mastery in Godot: Bridge the gap between languages, translate GDScript, and leverage Godot's APIs like a pro.",
        "Elevate Your C# Expertise: Transition seamlessly into Godot, applying your C# know-how Godot’s unique APIs.",
        "Master physics, input handling, and UI creation to breathe life into your games.",
        "Architect Like a Pro: Learn to build robust game architectures.",
        "Master best practices like abstract classes, interfaces and state machines.",
        "Discover game-changing design patterns for scalable, maintainable code to structure your dream game.",
        "Craft Dynamic Worlds: Dive into the world of particles and shaders. Create stunning, lifelike effects that captivate players and enhance the gaming experience."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome to the Course",
          "Community & Support",
          "Accessing Our Projects",
          "Installing .NET and Godot",
          "Starting a New Project",
          "Check Out the Book"
        ],
        "Player Movement": [
          "Section Intro - Player Movement",
          "Adding Player Animations",
          "Attaching Scripts to Nodes",
          "Configuring Visual Studio Code",
          "Overriding Methods",
          "Moving the Player",
          "Exporting Fields with Attributes",
          "Playing Animations",
          "Game Constants",
          "Flipping the Player",
          "Optimizing the Sprites",
          "Partial Classes"
        ],
        "State Machine": [
          "Section Intro - State Machine",
          "What Is a State Machine",
          "Creating an Idle and Move State",
          "Building the State Machine",
          "Transitioning States",
          "Disabling Nodes",
          "Setting Up the Dash State",
          "Transitioning to the Dash State",
          "Adding a Dash Timer",
          "Finalizing the Dash State",
          "Refactoring States With Inheritance",
          "Using Abstract Classes",
          "Dealing With Magic Numbers",
          "Export Property Hints",
          "Auto Properties"
        ],
        "Designing a Level": [
          "Section Intro - Designing a Level",
          "Preparing Our Models",
          "Using a Grid Map",
          "Attaching a Camera to the Player",
          "Adding Collision",
          "Adjusting the Slope Angle",
          "Adding Invisible Walls"
        ],
        "Adding Enemies": [
          "Section Intro - Adding Enemies",
          "Designing an Enemy",
          "Refactoring the Enemy State Machine",
          "Drawing Patrol Paths",
          "Creating the Enemy Return State",
          "Moving the Enemy",
          "Baking a Navigation Mesh",
          "Navigation Agents",
          "Enemy Patrol State",
          "Patrolling the Path",
          "Pausing on Patrols",
          "Exiting States",
          "Detecting the Player",
          "Chasing the Player",
          "Attacking the Player"
        ],
        "Combat System": [
          "Section Intro - Combat System",
          "Player Combo Attacks",
          "Combo Counters",
          "Resetting the Combo Counter With a Timer",
          "Hitboxes and Hurtboxes",
          "Custom Stat Resources",
          "Understanding LINQ",
          "Property Getters and Setters",
          "Animation Method Tracks",
          "Moving Nodes by Local Position",
          "Toggling Collision Shapes",
          "Working on the Enemy Attack State",
          "Moving the Enemy Hitbox",
          "Finishing the Enemy Attack State",
          "Character Death States"
        ],
        "Game Interface": [
          "Section Intro - Game Interface",
          "Setting Up the Start Menu",
          "Grabbing UI Containers",
          "Starting the Game",
          "Reparenting Nodes",
          "The event Keyword",
          "Handling the End Game Event",
          "Stats UI",
          "Dynamically Updating Labels",
          "Counting the Enemies",
          "Defeat UI",
          "Victory UI",
          "Pause UI"
        ],
        "Finishing Touches": [
          "Section Intro - Finishing Touches",
          "Preparing the Reward Feature",
          "Creating a Reward Resource",
          "Applying Rewards",
          "Preparing the Bomb",
          "Exploding the Bomb",
          "Using Interfaces",
          "Thunder Combo Damage",
          "Creating a Shader",
          "Dynamically Applying a Shader",
          "Stunning Enemies",
          "Designing a Level",
          "Adding Fire Particles",
          "Dash Cooldowns"
        ],
        "Course Wrapup": [
          "Outro"
        ]
      },
      "requirements": [
        "You should have a good grasp of C# basics – variables, conditional statements, classes, and methods."
      ],
      "description": "Ready to conquer the 2.5D RPG realm and forge your adventure with Godot 4 & C#?\nThis course is your gateway to crafting captivating adventures in Godot 4, the powerful, open-source game engine. No prior Godot experience needed, just a thirst for adventure and a grasp of C# concepts.\nYou’ll build a classic dungeon RPG game, with a combination of both 2D and 3D graphics. Your hero will be in combat with state machine driven enemies, drop bombs, and even be rewarded with a lighting strike when performing combo attacks.\nOn top of that you’ll also learn how to properly implement a pixel-perfect UI using Godot’s control nodes. In the final stretch of the course you’ll learn how to give your game that extra wow factor with shaders and particle systems.\nThroughout this course, you'll harness the power of Godot's APIs to bring your game ideas to life. We cover everything from physics and UI to effective game architecture.\nGet hands-on experience in building a fully-featured RPG, complete with combat systems, abilities, and immersive UIs, while also mastering the art of scalable and maintainable code.\nThis course is most suitable for people who have a good grasp of C# basics (variables, conditional statements, classes, and methods), and are looking to learn more intermediate to advanced programming concepts like abstract classes, the observer pattern and more.\nSo if you’re a C# developer venturing into game creation, a RPG enthusiast dreaming of your own title, or simply looking to get it right first time with clean, efficient code, this is the course for you!\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAnd you’ll get access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nReady to embark on your epic RPG coding adventure? Join us and start building your dream action game in Godot 4 now!",
      "target_audience": [
        "C# Enthusiasts: If you're comfortable with C# and eager to dive into game development, this is your launchpad.",
        "Aspiring RPG Creators: Join the RPG revolution. Bring your dream game to life, your way.",
        "Best Practice Advocates: Learn it right the first time. Say goodbye to messy codebases and hello to sleek, maintainable game code."
      ]
    },
    {
      "title": "Unity Game Development Master Class",
      "url": "https://www.udemy.com/course/unity-game-development-master-class/",
      "bio": "Become a Game Developer",
      "objectives": [
        "Unity User Interface",
        "Creating 3D Objects",
        "Moving, Rotating & Scaling Objects",
        "Unity Inspector Window & Scene Hierarchy",
        "Adding components to GameObjects",
        "Creating Materials",
        "Using lighting to create atmosphere (Omni light, Directional Light, ...)",
        "Collisions & Triggers",
        "Physics using Rigidbody & AddForce",
        "Using a CharacterController to control and move a character",
        "Creating & adding scripts to GameObjects",
        "Start, Update (+ Awake, FixedUpdate, ...)",
        "OnTriggerEnter, OnTriggerExit",
        "Instantiating & Destroying GameObjects from scripts",
        "Accessing variables from the Editor (public, private, serializable)",
        "Importing 3D Models",
        "Importing Textures and creating Materials",
        "Playing sounds / Music using AudioSource and AudioClips",
        "Creating assets for instancing and updating scene",
        "Detecting PlayerInput (Mouse movement and Key presses)",
        "Creating various states for Player and Enemies",
        "3D Mathematics using Vectors",
        "Detecting MouseInput",
        "Creating UI in Unity using Canvas System",
        "Importing Animations",
        "Using Animator to set up Animation Tree and Animation Blending",
        "Using script to drive Animations",
        "Creating a GameManager class to manage all objects and score in the game",
        "Creating an Enemy with various states",
        "3D Mathematics for Player Detection",
        "Adding support for a Xbox Controller",
        "Saving the Data of our game to Loadable format",
        "Reading XML data and importing it to the game",
        "Localisation: Adding support for multiple languages using XML",
        "Creating an executable: Building the game for PC",
        "Networking: Creating a Multiplayer game",
        "RPC = Remote Procedure Calls",
        "Profiler: Analysing and optimising the performance of the game",
        "Shaders: Creating a custom shader effect",
        "Particle Emitter: Creating VFX",
        "Unity2D: Building a 2D game",
        "Creating an Interactive Character",
        "Creating a Top Down Shooter",
        "AI Behaviour & Navigation",
        "Raycasting, Animation timeline & Animator",
        "Creating a Third Person Game",
        "Saving & Loading using PlayerPrefs",
        "Controller Input, Local Multiplayer & VFX",
        "UI, XML, Localization, Scene Load & Build .exe",
        "Advanced Animations",
        "Unity Editor Extensions",
        "Advanced Visuals",
        "Source Control & Creating a FPS game",
        "Multiplayer Networking",
        "Advanced Multiplayer Networking",
        "Unity2D & Performance Optimization"
      ],
      "course_content": {
        "Introduction": [
          "Unity Course Projects Overview",
          "Personal & Unity Introduction Video",
          "Downloading and installing Unity",
          "Summer Course Result Compilation Video"
        ],
        "CLASS 1: Creating an Interactive Character": [
          "Class 1 introduction & Unity User Interface",
          "Lighting",
          "C#, Variables, Functions & Code grouping",
          "Creating & executing scripts in Unity",
          "Rigidbody: Collisions & AddForce",
          "Rigidbody: Triggers",
          "CharacterController & Creating an Interactive Character, Time.deltaTime",
          "CharacterController & Jumping logics",
          "Prefabs",
          "Audio & Importing Custom Assets"
        ],
        "CLASS 2: Creating a Top Down Shooter": [
          "Class 2 introduction",
          "Parenting objects in Scene Hierarchy",
          "2D movement -> 3D movement & Rotate towards Movement Direction",
          "Character Rotation to Mouse Position",
          "Creating Bullet Prefab",
          "Creating Gun Prefab & Setting up Bullet Spawn",
          "Spawning Bullets",
          "Rotating & Shooting Bullets",
          "Shot Cooldown & Ammo Count",
          "Canvas UI & Ammo Visualization",
          "Destructible Targets & Applying Textures to Materials",
          "Playing Gun Shot & Gun Empty Sounds",
          "Ammo Crates, refilling Ammo & Accessing other Classes",
          "ADVANCED: Equipping and unequipping weapons",
          "Adding New Weapons & Outro"
        ],
        "CLASS 3: AI Behaviour & Navigation": [
          "Class 3 introduction",
          "Canvas UI Health",
          "Enemy States & Enums",
          "NavMesh Baking",
          "NavMesh Agent",
          "Setting up AI Patrolling behaviour",
          "AI Range & Radius Checking",
          "Damage to Player",
          "Damage to Enemies",
          "Extra Features & Outro"
        ],
        "CLASS 4: Raycasting, Animation timeline & Animator": [
          "Class 4 introduction",
          "Raycasting: Camera to Mouse Position",
          "NavMesh baking & NavMesh agent",
          "Click Visualization",
          "Camera Movement",
          "Importing 3D Models",
          "Animation Timeline",
          "Animation Events",
          "Animator",
          "Raycasting: GameObject to GameObject",
          "Enums PlayerStates",
          "Applying Damage & Outro"
        ],
        "CLASS 5: Creating a Third Person Game": [
          "Class 5 introduction",
          "Third Person Camera & Scene Setup",
          "Player Movement",
          "Camera Movement",
          "Camera Rotation",
          "Camera LookAt & Camera Zooming",
          "Downloading Model & Animation Assets using Mixamo",
          "Importing & Setting up the Character",
          "Animation BlendTree",
          "Setting up Animation Events in Editor",
          "Implementing Animation Events in code",
          "ADVANCED: Contextual Sound Theory & Scene Setup",
          "ADVANCED: Contextual Sound implementation using Raycasting",
          "Player turning towards Camera Direction & Outro"
        ],
        "CLASS 6: Saving & Loading using PlayerPrefs": [
          "Class 6 introduction",
          "Setting up Project & Player assets",
          "Implementing PlayerLogics",
          "Setting up Enemy assets",
          "Implementing EnemyLogics for Animation",
          "Implementing EnemyLogics for States & Movement",
          "Implementing EnemyLogics for WeakPoint & Dying",
          "Setting up Collectibles",
          "Singleton Coding Design Pattern, Serialization of Data, Saving & Loading Theory",
          "Creating GameManager Singleton",
          "Saving & Loading Coin Collectibles",
          "Saving & Loading Zombies",
          "Checkpoint System, Bug fixes & Outro"
        ],
        "CLASS 7: Controller Input, Local Multiplayer & VFX": [
          "Class 7 introduction",
          "Project Settings - Input, Setting up Keyboard & Xbox Controller Input",
          "Creating the Scene & PlayerLogic",
          "Creating 2 Players",
          "Downloading & Setting up Player Model & Animations",
          "Updating PlayerLogics to support animations & Face towards walk direction",
          "Implementing Casting Fireball Behaviour & Animation",
          "Spawning a basic Fireball",
          "Particle Emitter Settings & Fireball VFX Setup",
          "Fireball Collisions & Explosion VFX",
          "Player Death Animation",
          "Player Respawn Logics",
          "Events, Delegates & UI Setup",
          "Implementing UI Manager & Events",
          "Optimization, Bug Fixes & Outro"
        ],
        "CLASS 8: UI, XML, Localization, Scene Load & Build .exe": [
          "Class 8 introduction",
          "Main Menu Setup",
          "Button OnClicked Logics",
          "XML Data, Localization Data & Localization Files setup",
          "Loading XML Files in code",
          "Reading Localization Data in code",
          "Setting up Text fields for Localization",
          "Building .exe, Loading Scenes & Quitting",
          "ADVANCED: UI Selection",
          "ADVANCED: UI Manager State Transition to Options Menu",
          "AVANCED: Improvements & Outro"
        ],
        "CLASS 9: Advanced Animations": [
          "Class 9 introduction",
          "Setting up Project & Player Assets",
          "Setting up Animator Controller & Animation Blend State",
          "Setting up Weapon & Fixing Strafe Right Animation",
          "Aiming & Bone Rotations",
          "WeaponLogics: Weapon Line Renderer",
          "WeaponLogics: Raycasting for Impact Position",
          "WeaponLogics: Shooting logics",
          "Animation Masking Setup",
          "Advanced Animations code implementation",
          "Inverse Kinematics (IK): Left hand supporting Weapon",
          "Inverse Kinematics (IK): Feet IK core implementation",
          "Inverse Kinematics (IK): Feet IK improvements",
          "ADVANCED: Impact Marking Setup",
          "ADVANCED: Impact Marking Code implementation",
          "ADVANCED: Aiming Camera & Outro"
        ]
      },
      "requirements": [
        "There are no course requirements, every step of the development process is shown (including every line of code explained)"
      ],
      "description": "In this Unity course we start from the very basics and cover all topics from complete beginner C#, Unity User Interface and will continue to explore advanced Unity features such as Animations, Animation Blending, Inverse Kinematics, Shaders, Post-Processing and even Multiplayer Networking (UNET) in the final classes.\nThis course contains 230 videos with over 19 hours of video learning content with an average video length of 5 minutes.\nDuring this course you will learn how to create 15 different games of various game genres while learning the core features of Unity Game Development.\nThese game genres include:\nBasic Platformer\nTop Down Shooter\nTop Down Shooter with AI\nBasic MOBA\nThird Person Platformer\nPlatformer with Loading & Saving\nLocal Multiplayer Arena\nMain Menu, Localization & Game Loading\nThird Person Shooter\nProcedural World Generation using Unity Editor Extensions\nExploration Game with Advanced Visuals\nFirst Person Shooter\nTop Down Networked Multiplayer\nFirst Person Shooter Networked Multiplayer\n2D Action Game\nDuring the creation of each game every step of the development process is shown and explained.\nAll scripts which are written an demonstrated are shared with the viewer in order to solve any potential bugs or issues.\nThis course has been taught at ShanghaiTech University to over 60 students and several graduate students have started their Game Development Careers as a result of this course.",
      "target_audience": [
        "Beginner Unity Developers aiming to work in the Game Development Industry",
        "Beginner Unity Developers aiming to create their own Indie Games",
        "High school / College / University students wanting to learn Unity",
        "Mid-level Unity Developers who want to expand their skills & knowledge"
      ]
    },
    {
      "title": "Unreal Engine 5 C++: Create Custom Editor Tools",
      "url": "https://www.udemy.com/course/unrealengine5-c-one-course-solution-for-extending-editor/",
      "bio": "Create custom editor tools in Unreal Engine 5 through different editor modules and slate widgets using C++",
      "objectives": [
        "Extend the existing editor menus through different modules",
        "Explore the existing editor scripting libraries like EditorAssetLibrary and EditorUtilityLibrary",
        "Write slate code to build slate widgets for custom editor functionalities",
        "Create a custom editor tab for displaying slate widgets",
        "Create materials and connect pins through code",
        "Create custom editor hot keys to trigger custom functions",
        "Extend Content Browser Menu",
        "Extend Actor Selection Menu",
        "Extend World Outliner",
        "Add custom icons as UI elements"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Some Common Questions You May Have",
          "Create A C++ Project",
          "How To Get Help?",
          "Modules In Unreal"
        ],
        "Quick Asset Actions": [
          "Quick Asset Actions Section Overview",
          "I can't see Scripted Asset Action...",
          "Asset Action Utility",
          "Create A Debug Header",
          "Asset Batch Duplication",
          "Custom Editor Message",
          "Add Prefixes To Assets",
          "Coding Challenge: Remove _Inst",
          "Share Your Solution",
          "Delete Unused Assets From Selection",
          "Update your code for fixing up redirectors...",
          "Fix Up Redirectors From Code",
          "Optional Challenge: Batch Renaming Assets",
          "Section Wrap Up"
        ],
        "Extend Content Browser Menu": [
          "Extend Content Browser Menu Section Overview",
          "Delegates",
          "How To Create Custom Menu Entry?",
          "Add Custom Delegate",
          "Binding Functions",
          "Search And Delete Unused Assets",
          "Coding Challenge: Fix Up Redirectors From Code",
          "Recap On Delete Unused Assets",
          "Coding Challenge: Add Another Menu Entry For Deleting Empty Folders",
          "Search And Delete Empty Folders",
          "Optional Challenge: Deleting Unused Assets And Empty Folders Together",
          "Secion Wrap Up"
        ],
        "Slate Widget": [
          "Slate Widget Section Overview",
          "What is Slate?",
          "Smart Pointers",
          "Things We Want To Achieve With Slate Widget",
          "Spawn A Custom Editor Tab",
          "Set Up A Class For Slate Widget",
          "Sending Data To Slate Widget",
          "Set Up Basic Layout",
          "Sending Asset Data To Slate Widget",
          "Construct SListView",
          "Construct SChecBox",
          "Add In More Texts For Row Widget",
          "Construct SButton",
          "Delete Single Asset When Clicking The Button",
          "Refresh SListView",
          "Coding Challenge: Constrcut More Buttons",
          "Delete All Selected Assets",
          "Select And Deselect All Assets In The List",
          "Construct SCombo Box",
          "Listing Unused Assets",
          "Perfecting Listing Unused Assets",
          "Coding Challenge: Listing Assets With Same Name",
          "Share Your Solution",
          "Solution: Listing Assets With Same Name",
          "Sync Content Browser To Asset",
          "Add In Help Texts",
          "Section Wrap Up"
        ],
        "Custom Editor Icons": [
          "Custom Editor Icons Section Overview",
          "Process For Adding Custom Icons",
          "The \"Static\" Keyword",
          "Register Custom Icons",
          "Apply Icons To Menu Entries"
        ],
        "Create Material From Code": [
          "Create Material From Code Section Overview",
          "Editor Utility Widget",
          "Build An Editor Utility Widget",
          "Preparing For Material Creation",
          "Process Selected Data",
          "Check Is Name Used",
          "Create Material Asset From Code",
          "Supported Texture Names",
          "Create Node For Base Color",
          "Create Node For Metalic",
          "Coding Challenge: Create More Nodes For Material",
          "Share Your Solution",
          "Solution: Create More Nodes For Material",
          "Create Node For Channel Packed Texture",
          "Coding Challenge: Create Material Instance",
          "Share Your Solution",
          "Solution: Create Material Instance",
          "Optional Challenge: Create Material Instance From Master Material",
          "Section Wrap Up"
        ],
        "Quick Actor Actions": [
          "Quick Actor Actions Section Overview",
          "Editor Actor Subsystem",
          "Actor Batch Selection",
          "Actor Batch Duplication",
          "Coding Challenge: Randomize Actor Rotation",
          "Share Your Solution",
          "Solution: Randomize Actor Rotation",
          "Coding Challenge: Randomize Actor Offset/Scale",
          "Share Your Solution",
          "Solution:Randomize Actor Offset/Scale",
          "Optional Challenge: Select/Deselect Actors By Name",
          "Section Wrap Up"
        ],
        "Extend Level Editor Actor Menu": [
          "Extend Level Editor Actor Menu Section Overview",
          "Custom Level Editor Menu Entry",
          "Select Object Event",
          "Preparing For Selection Lock",
          "Implementing Selection Lock",
          "Custom Editor Icons For Menu Entries",
          "Section Wrap Up"
        ],
        "Custom Editor Hot Keys": [
          "Custom Editor Hot Keys Section Overview",
          "Preparing For Custom Hot Keys",
          "Register Custom Editor Hot Keys",
          "Function Binding For Custom Hot Keys",
          "Optional Challenge: Displaying Locked Actors In A List",
          "Section Wrap Up"
        ],
        "Extend World Outliner": [
          "Extend World Outliner Section Overview",
          "Preparing For Extending World Outliner",
          "Construct SHeaderRow",
          "Construct Row Widget",
          "FActorTreeItem",
          "Refresh Scene Outliner",
          "Construct Toggle Button",
          "Section Wrap Up"
        ]
      },
      "requirements": [
        "Have experience with C++ in Unreal or at least taken one Unreal C++ course before"
      ],
      "description": "Learn everything that you need to know for extending Unreal's editor and create custom menu entries, slate widgets, extend world outliner, register custom icons and much more for boosting your efficiency that your project and your team needs.\n\n\nIn the first part of the course, we’ll focus on the actions to assets and we’ll begin with exploring the existing scripting libraries like UEditorAssetLibrary and UEditirUtilityLibrary in Unreal to help us to achieve some basic quick asset actions.\n\n\nThen we'll look at how to add in our custom menu entries to help us search and delete unused assets and delete empty folders when we right mouse button click a folder. With the ability like this, we'll then dive into slate and create different slate widgets in a custom editor tab that we registered. We'll also cover how to use EditorUtilityWidgets and create our own algorithms to help us quickly create materials from code.\n\n\nIn the second part of the course, we’re going to use the combination of EditorUtilityWidgets and EditorActorSubsystem to help us achieve actor batch selection, actor batch duplication, and randomize actor transform. Then we’ll use the skills and knowledge we learned to create actor selection lock through extending level editor actor menu, custom editor hot keys and extending world outliner.\n\n\nAfter this course, you will be able to create any custom editor tools that you or your team needs for better efficiency when working inside of Unreal.",
      "target_audience": [
        "Learners who want to learn how to extend Unreal's editor",
        "Learners who want to learn how to write slate code and create slate widgets in Unreal",
        "Learners who want to have a deeper understanding of Unreal Engine",
        "Learners who want to know how to create custom menu entries and register custom editor icons"
      ]
    },
    {
      "title": "Unreal 5 Materials - Part 1 Environments",
      "url": "https://www.udemy.com/course/unreal-5-materials-part-1-environments/",
      "bio": "Your complete course for learning Materials in Unreal Engine 5",
      "objectives": [
        "Have a holistic understanding of the Material Editor in Unreal 5",
        "Learn best practices and workflows for using Functions and producing optimal Materials",
        "Explore how to use Data from elsewhere in the Engine to build dynamic materials",
        "Apply all the base knowledge to Environmental examples, such as Landscapes and Vertex Painting"
      ],
      "course_content": {
        "Source Files": [
          "Where to download"
        ],
        "Introduction": [
          "Introduction",
          "Introduction to the Material Editor and UI",
          "Break down of different Node Types",
          "Best practice Workflow in the Material Editor"
        ],
        "Material Types": [
          "Opaque Materials",
          "Masked Materials",
          "Dither Fade Materials",
          "Translucent Materials",
          "Refraction in Materials",
          "Additive Materials",
          "Modulate Materials",
          "Premultiplied Materials",
          "Alpha Holdout Materials"
        ],
        "Material Blend Modes": [
          "Lit and Unlit Materials",
          "Subsurface Materials",
          "Clear Coat Materials",
          "Hair and Eye Materials",
          "Cloth",
          "Single Layer Water and Thin Translucency Materials",
          "Blend Mode by Expression"
        ],
        "Material Editor Math Nodes": [
          "Data Types",
          "Mask and Append",
          "Add Subtract Multiply Divide and One Minus",
          "Power",
          "Sine Waves and Constant Bias Scale",
          "Abs Clamp Min and Max",
          "Floor Ceiling and Frac",
          "If Lerp and SmoothStep",
          "Normalize Dot Product Cross Product and DeriveNormalZ",
          "Panner and Rotator",
          "RotateAboutAxis and Transform",
          "Desaturate",
          "DepthFade and CameraDepthFade",
          "Fresnel",
          "Vertex Interpolator",
          "Distance"
        ],
        "Input Data": [
          "Position Orientation and Scale",
          "World Position",
          "Vertex Colour",
          "Custom Primitive Data",
          "Vertex Normal and Pixel Normal",
          "Two Sided Sign",
          "Time",
          "Camera Position and Vector",
          "Pixel Depth and Scene Depth",
          "Per Instance Random and Fade",
          "Screen Position and View Size",
          "Particles",
          "DDX and DDY",
          "Reflection Vector",
          "Sky Atmosphere Data",
          "Scene Colour"
        ],
        "Working with UVs": [
          "UV Gradients",
          "UV Tiling",
          "Animated Textures",
          "Scaling UVs",
          "Gradient Mapping",
          "UV Distortion",
          "Bump Offset and POM"
        ],
        "Functions": [
          "Perturb Normal HQ",
          "Flipbook",
          "Object Position Randomness",
          "Add Randomness",
          "Offset Contrast",
          "World Space Modifier Functions",
          "Add Noise to Gradient",
          "Auto Landscape Helper Functions"
        ],
        "Master Materials": [
          "Qpaque Master Materials",
          "Master Material Functions",
          "Masked Master Materials",
          "Translucent Master Materials"
        ],
        "Decals": [
          "Decal Basics",
          "Angle Masking",
          "POM Decals",
          "Custom Decal Response"
        ]
      },
      "requirements": [
        "Some basic understanding of 3D Modelling and the Unreal Engine"
      ],
      "description": "Part 1 of this course covers a holistic overview of the Material Editor in Unreal 5 - from Material Types and Blend Modes to individual Math Nodes and Input Data, focusing on not just the How to do things but also the Why and looking at the underlying logic and math behind what the engine is doing.  Covering how to build up your own Material Functions and build that into your workflow to produce powerful and flexible Materials. We also take a deep dive into UV's - how they work in the engine and how we can take that knowledge and produce effects such as Distortion, Animation, and Parallax Occlusion Mapping.\nPart 2 of the course then takes this knowledge and applies it to Environmental Materials, covering:\nMaster Materials and some best practices in how to build them,\nDecals and their various blend modes - as well as more complex effects such as Angle Based Masking and Custom Decal responses,\nVertex Painting to blend between material types,\nvarious approaches to make Landscape Materials and using RVTs to blend objects into them,\nthe new Layered Materials system\nhow to use Input Data to automate variation in materials and create angle based effects such as Snow.",
      "target_audience": [
        "Anyone who wants to learn how to make Materials in Unreal 5"
      ]
    },
    {
      "title": "Build Your Own First Person Shooter / Survival Game in Unity",
      "url": "https://www.udemy.com/course/build-your-own-first-person-shooter-survival-game-in-unity/",
      "bio": "Part I: Create and Design Artificially Intelligent Game Characters with Advanced Animation Systems",
      "objectives": [
        "Develop a robust and extensible artificial intelligence system that syncs with characters' animations",
        "Use state machine behaviors and animation curves to drive game logic",
        "Design smart NPCs (non-player characters) that interact with their world in realistic ways",
        "Understand fundamental game AI concepts like envionement navigation, pathfinding, A*, state machines, animation state machines, etc.",
        "Import and animate multiple characters in less time with animation re-targeting",
        "Use ragdoll physics to support body part specific damage along with more realistic death animations (and re-animations)",
        "Implement screen effects that indicate player damage during attacks",
        "Identify and prepare assets, models, and animations for your game",
        "Learn how to use Unity's Mecanim system in conjunction with root motion animation and navigation mesh based pathfinding."
      ],
      "course_content": {
        "Start Here": [
          "Introduction",
          "Project Setup",
          "Navigation and Pathfinding I",
          "Navigation and Pathfinding II",
          "Navigation and Pathfinding III",
          "Navigation and Pathfinding IV",
          "Navigation and Pathfinding V",
          "Navigation and Pathfinding VI",
          "Navigation and Pathfinding VII",
          "Asset Preparation I",
          "Humanoid Retargeting",
          "Animation State Machines",
          "Mecanim with Navigation",
          "Asset Preparation II",
          "AI System I",
          "AI System II",
          "AI System III",
          "AI System IV",
          "AI System V",
          "The Idle State",
          "The Patrol State",
          "The Alerted State",
          "The Pursuit State",
          "The Feeding State I",
          "The Feeding State II",
          "The FPS Controller I",
          "The FPS Controller II",
          "The Attack System I",
          "The Attack System II",
          "Player Damage Screen Effect I",
          "Player Damage Screen Effect II",
          "Ragdoll Physics",
          "The Damage System I",
          "The Damage System II",
          "Ragdoll Reanimation I",
          "Ragdoll Reanimation II",
          "Injured / Damaged Zombies",
          "Zombie Body Damage",
          "Zombie Player Awareness",
          "Adding Multiple Zombies",
          "Screaming Zombies",
          "AI Final Tweaks and Fixes",
          "Scripting the Audio Mixer",
          "Creating an Audio Pooling System",
          "Audio Collections with Scriptable Objects",
          "The Zombie Sound System I",
          "The Zombie Sound System II",
          "The Zombie Sound System III",
          "The Zombie Sound System IV",
          "Player Damage and Pain Sounds",
          "The Stamina System and HUD (Creeper 001)",
          "The Interactive Item Framework (Creeper 002)",
          "The Elevator Sequence (Creeper 003)",
          "Constructing Gameplay Elements (Creeper 004)",
          "The Generic Switch Trigger (Creeper 005)",
          "Deactivating Lockdown (Creeper 006)",
          "Spawning the Access Code (Creeper 007)",
          "Completing Creeper (Creeper 008)",
          "The Interactive Door System I",
          "The Interactive Door System II",
          "The Interactive Door System III",
          "Making Our Scene Interactive",
          "Heads Up Display I",
          "Heads Up Display II",
          "Player Inventory UI I",
          "Player Inventory UI II",
          "Player Inventory UI III",
          "Inventory System I",
          "Inventory System II",
          "Inventory System III",
          "Inventory System IV",
          "Inventory System V",
          "Inventory System VI",
          "Inventory System VII",
          "The PDA System I",
          "The PDA System II",
          "Dead Earth Part III Preview"
        ]
      },
      "requirements": [
        "You will need a Windows PC and a free copy of Unity 5 to experiment with the source code and follow along."
      ],
      "description": "Whether you’d like to create your own sci-fi or first person military shooter, third person action adventure, or even a role playing game, this Udemy course series provides the training you are looking for. Starting from a blank screen, we'll build all of the systems, together, step-by-step for a game called Dead Earth.\nDead Earth is a commercial grade, first-person, action-survival game set in the modern post-apocalypse. As mankind’s last hope,you’ll traverse a fallen world ravaged by a lethal plague. The game presents players with a variety of dangerous environments where the fight for survival gets progressively more difficult as the story unfolds. The infection has manifested in a variety of terrifying ways, so you’ll face a varied set of enemies -- from enraged humanoids to total mutations whose origins are not fully understood.\n\nIn this first course, we’ll setup our project and start populating the world. You'll learn how to create smart AI characters that think strategically and realistically navigate their environment, all while avoiding obstacles and pursuing the goals that you give them.\n\nYou'll also learn how to tie the physics and animation systems together with the behaviors and states of your in-game characters. This will enable them to interact with their world and with the player physically and visually correctly.\nYou’ll learn how and when to integrate ragdoll physics with the animation system to offer body part specific damage and more realistic death animations. You’ll even learn how to transition between ragdoll and standard animation systems as we reanimate zombies and other characters that are down, but not out.\nAlong the way we'll discuss in detail concepts like A*, pathfinding and navigation, state machines, animation state machines, and much, much more. By the time we’re done, you’ll be able to fill your own worlds with noble companions, background characters, and deadly enemies that bring your games to life!\nOver the totality of this course series you'll build the full game from the ground up. You'll learn how to:\nUse state machine behaviors and animation curves to drive game logic.\nCreate your own missions that chain together different series of game events, unlock additional items and uncover new areas of the world.\nDevelop a complete first person arms/weapons management system with melee and ranged weapon support.\nDive deep into the development of a robust and extensible artificial intelligence system that syncs with your characters’ animations.\nDesign smart NPCs for your game who can interact with their world in very realistic ways.\nBuild an in-game inventory system for players to manage their weapons, ammo, health boosters, mission items, and more.\nAssemble fully interactive worlds with working doors, elevators, cabinets and drawers.\nLearn how to use scripted events to drive your story line forward.\nUnderstand fundamental concepts in the field of game AI, like navigation and path-finding, state machines, animation state machines, and more.\nFind out how to import and animate multiple characters in less time using humanoid re-targeting\nCreate custom interfaces for health bars, ammo, inventory items, and more.\nDevelop your own audio log system for delivering storytelling elements.\nUse a combination of Umbra and custom technology to accelerate real-time lighting and shadows in graphics intensive scenes.",
      "target_audience": [
        "This course is perfect for developers working on games that require artificially intelligent characters and creatures, animation, and related systems, regardless of genre.",
        "Everyone using the Unity engine will benefit since we comprehensively cover how to correctly use many of its more advanced systems e.g., navigation and pathfinding, Mecanim, animation state machines, ragdoll physics, and so on."
      ]
    },
    {
      "title": "Make Unity 3D interactive games with Fungus - no coding!",
      "url": "https://www.udemy.com/course/make-interactive-games-with-fungus-unity3d-no-coding-required/",
      "bio": "Make Branching narrative, point & click and hidden object games all without writing code.",
      "objectives": [
        "You will have a Full working knowledge of Fungus and how it integrates with Unity.",
        "You will be able to create narrative story games, point and click adventures and hidden object games.",
        "You will be able to publish your games to WebGL and have them on your own website, publish them to Android and IOS versions and sell them online.",
        "Most importantly you will be able to do all of this without writing one line of code."
      ],
      "course_content": {
        "Unity 3D & Fungus": [
          "A quick Intro to the course",
          "Download and install Unity 3D",
          "Unity 3D Quick Walk-Through",
          "Install Fungus",
          "Fungus Walk-Through"
        ],
        "Here we start building our game": [
          "Import Art Assets",
          "Place Assets in Scene, Layer & Depth Sorting",
          "Fungus “View's” & Sprites Part 1",
          "Fungus \"View's\" & Sprites part 2",
          "Parallax Sprites.",
          "Clickable Sprites & Music",
          "Cheat Block"
        ],
        "Branching Narrative": [
          "Creating Characters",
          "Branching Narrative",
          "Create Custom Dialogues",
          "Create Custom Menus",
          "Finish Branching Narrative",
          "Portraits"
        ],
        "Hidden Object and Point and Click": [
          "Place and Sort 2nd Set of Art Assets",
          "Clickable Objects",
          "Flowchart, Clickable Objects.",
          "Create Drag & Drop Objects",
          "Flowchart, Drag & Drop Objects Part 1",
          "Flowchart, Drag & Drop Objects Part 2",
          "Additional Tweaks to Drag & Drop Object 1",
          "Flowchart Drag & Drop Objects 2&3 Part 1",
          "Flowchart Drag & Drop Objects 2&3 Part 2"
        ],
        "Variables": [
          "Variables, Lamp On-Off",
          "Variables Lamp Tweak & Painting Rotation.",
          "Set 2D Collider & Tags",
          "Variables, Diploma & Shelf Objects",
          "Variables, “Integer” Diploma, Shelf & Clues.",
          "Make Draggable Objects Appear",
          "Tweak Diploma & Shelf Blocks, Set 2D Collider"
        ],
        "Mecanim": [
          "Add Dr. J to the Scene",
          "Variables & a New Cheat Block",
          "Animator Parameters & Fungus part 1",
          "Animator Parameters & Fungus part 2",
          "Animator Parameters & Fungus part 3"
        ],
        "Seek out the bugs & Publishing": [
          "Testing and Finding Bugs",
          "Exporting to Devices"
        ],
        "Round Up": [
          "Round up."
        ],
        "Final Project download.": [
          "Setting up the Unity Project."
        ]
      },
      "requirements": [
        "A Mac or PC that is capable of running Unity 3D.",
        "The latest version of Unity 3D (we will talk you through download and install on the course).",
        "The latest Version of Fungus (We will talk you through download and install on the course)."
      ],
      "description": "This course is aimed at anyone who wants to make interactive story based games, but, who doesnt' know how to code.\nFungus is a free Unity 3D plugin that allows non coders (like me) access to some of Unity's core features. This course has been updated to include changes & updates to Fungus 3.6\nIf you have never used game development software, or if you have struggled with code trying to make games, Fungus and this course are exactly what you need.\nSo what specifically will we learn?: In no particular order.\nUnity: A working knowledge of the Unity interface, Importing and managing assets / Images / Audio / Animation etc.\nFungus: A full working knowledge of fungus how to combine commands, Use variables etc. All without code.\nControl the camera: camera moves / fades etc.\nControl sound: add music / spot sound effects / control volume.\nSprites: affect their visibility & movement.\nBranching Narrative: create custom characters, dialogs & menus.\nClickable Sprites: Create buttons that interact with the scene.\nDrag & Drop: Create draggable sprites that interact with the scene.\nMecanim Animation: Add animation to the scene and control it.\nWith all of the above mentioned elements we will create a short branching narrative game, where two characters talk to one another and you are presented with choices to influence the story. The narrative section leads into a hidden object point and click adventure, we will explore an interactive environment with clickable images, draggable and droppable objects and an animated character reacting to specific conditions.",
      "target_audience": [
        "If you don’t know how to code and want to make Interactive Story Games. This course is for you.",
        "If you’re an artist, illustrator or writer and would like to delve into game development in an easy and approachable manner, this course if for you.",
        "If you have struggled with code to create games in unity, this course is for you.",
        "If you're able to code and know your way round unity and love the joy of a visual coding interface, this course is for you."
      ]
    },
    {
      "title": "Goal-Oriented Action Planning - Advanced AI For Games",
      "url": "https://www.udemy.com/course/ai_with_goap/",
      "bio": "Artificial Intelligence for Creating Complex Game Character Behaviours for Simulations, Real-Time Strategy Games & More",
      "objectives": [
        "How to design and program more intelligent behaving Non-Player Characters with C#.",
        "How goals, states, actions, believes and path-planning can be applied in computer games.",
        "The finer workings of a Goal-Oriented Action Planning (GOAP) library and building one from scratch.",
        "How to develop and debug your own simulations."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Join the H3D Student Community",
          "Contacting H3D",
          "FAQs",
          "Setting up Pathfinding in Unity",
          "Updating to Unity 6"
        ],
        "A Crash Course in Navigation Meshes": [
          "An Introduction to Navigation Meshes",
          "Setting up your own NavMesh",
          "Moving an Agent Around the Mesh"
        ],
        "Introduction to GOAP": [
          "GOAP Introduction",
          "Setting up a GOAP Environment",
          "Preplanning the Agent Actions",
          "The World States",
          "Actions",
          "Agents"
        ],
        "Planning": [
          "The GOAP Planner Part 1",
          "The GOAP Planner Part 2",
          "Executing a Simple Plan",
          "Creating a Multistep Plan",
          "Plans that Require Multiple Agents"
        ],
        "Inventories": [
          "Adding More Resources to the World",
          "Implementing an Inventory System"
        ],
        "Complex Behaviours": [
          "Moving the Nurse",
          "Adding Goal Challenge",
          "Taking a Break"
        ],
        "Building Functionality and Debugging": [
          "Adding a Doctor Challenge",
          "New Resource Models and Troubleshooting Part 1",
          "New Resource Models and Troubleshooting Part 2",
          "New Resource Challenge",
          "Reusing Actions on Other Agents"
        ],
        "Producing and Removing Resources": [
          "A Little World Refactoring",
          "Monitoring Agent States",
          "Responding to a New Resource"
        ],
        "Interacting with the Environment": [
          "Dragging and Dropping New Resources",
          "Dynamic Navmesh Baking",
          "Repositioning and Rotating Resources",
          "Deleting a Resource",
          "Refactoring for a Multi-resource UI",
          "A UI to Work with Multiple Resources",
          "Improved Repositioning",
          "Moving the Camera"
        ],
        "Final Words": [
          "Some Final Words from Penny",
          "Where to now?",
          "Extra: Attacking and Chasing Framework"
        ]
      },
      "requirements": [
        "You should be familiar with C# and the Unity Game Development Engine."
      ],
      "description": "Goal-Oriented Action Planning (GOAP) is an AI architecture that provides game characters with the ability to select goals and make plans to achieve those goals based on the state of the environment and available resources.  It can be used across a wide range of game genres from first-person shooters to real-time strategies, to develop intelligent characters capable of making smart decisions without the need for large finite state machines.   The codebase is deceptively simple and yet logical, reusable and extremely powerful.  The library is written in C# and implemented in Unity V.2019, however will easily port to other applications.\nThe projects in this course have been tested with and work in Unity 6.\nIn this course, Penny demystifies the advanced AI technique of GOAP used for creating believable and intelligent game characters in games using her internationally acclaimed teaching style and knowledge from over 25 years working with games, graphics and having written two award-winning books on games AI. Throughout, you will follow along with hands-on workshops designed to take you through every step of putting together your own GOAP API.  You will build the entire GOAP library from the ground up while building a hospital simulation scenario in parallel, to test the API as you go.\nLearn how to program and work with:\nA GOAP Library and API that's reusable across a wide range of game projects.\nGoals, Actions, States and Beliefs that define the state of the game environment, what individual characters want to do and how they understand their world.\nNavigation Meshes and Agents that provide advanced path planning and navigation capabilities for characters.\nDynamic Building of NavMeshes to allow for the repositioning of resources in the environment.\nInventories for each character for use in completing tasks that satisfy character goals.\nThe Unity UI system to move draggable resources into a game environment.\nContents and Overview\nThroughout the course, you will follow along while a GOAP library and API are constructed from the ground up, to allow you intimate knowledge of the codebase.  Alongside this, a simple hospital simulation will be constructed to test out the functionality of the library as it is put together.  The simulation will also rely on Unity's NavMesh System for navigation and path planning.\nThe course begins with an overview of Unity's NavMesh System and covers the basic functionality needed for the hospital simulation.  It then goes on to cover the concept of GOAP, where students will discover how goals, actions and plans interact.  A planner will be constructed that dynamically builds each character's sequence of actions, based on what they believe their goals are while in the simulation.\nFollowing this, inventories will be introduced and developed to hold resources for individual characters.  The resources in the inventories will be required for plan completion and also assist in directing a character's navigation around the environment.  This will then build to the design of more complex behaviours in which two characters must collaborate to complete a plan.\nAs the course continues, more characters with differing roles will be added and dynamically created and resources will be added and removed to develop a complex simulation.  By the end of the course, students will have a hospital simulation with patients, nurses, doctors and janitors each with their own roles, goals, actions and required resources.\nAlthough this course is not about building a completed game, a final section will provide some further knowledge on Unity development and examine methods for interacting with the environment such as: dragging and dropping items, dynamic NavMesh baking, user interface creation and camera movement to provide students with some direction on how such a simulation could be turned into a game.\nAt the completion of this course, students will have a fully-fledged GOAP library and API that they can reuse in their own game projects to provide game characters with complex intelligent behaviours.\nWhat students are saying about Penny's courses:\nTurns out, the hardest part of this course for me is finding the words to describe how glad I am to have enrolled in it.\nI honestly love Hollistic's teaching approach and I've never learned so much within a few hours about coding effectively with such detailed explanations!\nPenny is an excellent instructor and she does a great job of breaking down complex concepts into smaller, easy-to-understand topics.",
      "target_audience": [
        "Anyone interested in learning how to better program their own non-player characters (NPCs) for believable behaviour.",
        "Anyone wanting to learn the advanced AI technique of GOAP to control their sims.",
        "Anyone interested in seeing how artificial intelligence is applied in computer games."
      ]
    },
    {
      "title": "Unleash Your Creativity: Build Point & Click Game in Unity",
      "url": "https://www.udemy.com/course/create-a-point-click-adventure-using-unity-3d/",
      "bio": "From Concept to Classic: Build a Point & Click Game with Unity and C# in the 90s Style",
      "objectives": [
        "Create a complete Point & Click Adventure game similar to Monkey Island, Days of the Tentacle and other point click games",
        "Editor Scripting to ease game play development",
        "Object Oriented Programming",
        "Scriptable-Object for Item Database and Inventory",
        "Save and Load features",
        "Light baking and light probe with Unity"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Development": [
          "Unity Project Setup",
          "Basic Player Movement",
          "Player Movement & Interaction",
          "Player Direction",
          "Action's Base Class",
          "Basic Dialog System",
          "Check Mouse over UI",
          "Message Dialog Window",
          "Item & Database Setup",
          "Basic Custom Inspector",
          "Item Database Inspector",
          "Basic Inventory Setup",
          "Inventory Custom Inspector",
          "Basic Data Manager",
          "Item Action",
          "Item Action Inspector",
          "Item Action Functionality",
          "Message Action Inspector",
          "Activate GameObject Action",
          "Importing Game Assets",
          "Player Animation",
          "Animation Action",
          "Animation Action Custom Inspector",
          "Level Manager",
          "Change Scene Action",
          "Player Spawn Position",
          "Player Spawn Position Inspector",
          "NPC Move Action",
          "NPC Move Action Custom Inspector",
          "Interactable Custom Inspector",
          "Entity State Concept",
          "Entity System",
          "Interactable by Trigger",
          "Trigger Interact Custom Inspector",
          "Camera Manager",
          "Camera Switch Action",
          "Inventory UI System",
          "Inventory UI Item Description",
          "Save System Extension",
          "Save Features Setup",
          "Transparent FX",
          "Audio Manager",
          "Audio Action",
          "Create Custom Cursor for Interaction",
          "Look Only Interaction",
          "Preparing the City Scene",
          "Preparing Club Hallway",
          "Preparing Office Scene",
          "Preparing Park Scene",
          "Setup Office Cut Scene",
          "City Gameplay Setup",
          "Additional Item Database Setup",
          "Club Hallway Gameplay Setup",
          "Park Gameplay Setup",
          "Menu Scene Setup",
          "Menu Scene Continued",
          "In Game Save Menu",
          "Saving Thumbnail",
          "Add Thumbnail to Load Menu",
          "Finishing and Build"
        ],
        "Bug Fixes": [
          "Player Script Bug Fixing",
          "Entities Resets Bug"
        ]
      },
      "requirements": [
        "Unity Installed on your PC (version 2018 preferable)",
        "A strong will to learn game development",
        "Basic understanding of Unity C# API"
      ],
      "description": "Are you ready to unleash your creativity and build a captivating Point & Click Adventure game in the style of Monkey Island or Full Throttle? Look no further than this comprehensive Unity course!\nNot only will you create a complete game from scratch, but you'll also gain invaluable experience with object-oriented programming and deepen your understanding of Unity's C# API. We'll even provide all the assets you need to create your own games, including 3D models and audio.\nThroughout the course, we'll explore powerful Object-Oriented techniques such as Inheritance, Editor Scripting for custom inspector development, and Entity State concepts to create a dynamic entity that persists across multiple sessions. Multiple save system with thumbnail on each entry base on the last screenshot. Plus, we'll dive into Unity Timeline for crafting stunning cutscenes and learn how to optimize lighting with Light-maps baking.\nWhile this course is designed for intermediate Unity developers, it's perfect for anyone with a passion for game development. So whether you're an indie game developer, a seasoned pro, or a game enthusiast, join us today and unlock your game development potential!\nWhat they say about this course:\nRoland Simons - \"I am halfway through the course and very impressed with what I am learning. The teacher is very competent and helpful, even three years after publishing the course. Excellent!\"\nLucas R Pinto - \"Excellent course! Excellent! First 10 lessons and I am already satisfied with the course. Excellent programming decisions and techniques. The video resolution is a bit low but taking this apart, I can't complain. The content itself is really not just thoughtless programming but actually well planned and somehow scalable. Keep in mind that you will face some \"not so beginner\" topics like delegates, events, coroutines.\"\nMichael - \"The instructor is great I feel like I am now able to begin to understand very complex work. Instructor is always incredibly supportive too.\"",
      "target_audience": [
        "Intermediate Unity Developer."
      ]
    },
    {
      "title": "Construct 3 Game Development: Build 2D Games Without Coding",
      "url": "https://www.udemy.com/course/construct-3-game-development-build-2d-games-without-coding/",
      "bio": "Get an epic 5-level course and learn to make your own computer games. Build practical projects to add to your portfolio",
      "objectives": [
        "Learn all about Construct 3",
        "Develop games without the need of extensive coding",
        "Get to know the Construct 3 UI",
        "Creating Epic 2D Games and Mechanics",
        "And more!",
        "No more searching for tutorials online to try to put together what you need to know."
      ],
      "course_content": {
        "Introduction to the Course": [
          "Welcome to Contstruct 3"
        ],
        "What to Expect from the Course": [
          "Installing Construct 3",
          "Expectations from the course"
        ],
        "Learn the Basics of Construct 3": [
          "Introduction to Construct 3",
          "Sprites",
          "Events",
          "On Start of Layout Every Tick",
          "Variables"
        ],
        "Rapid Prototyping": [
          "An Essential Skill to have!"
        ],
        "Functions": [
          "Introduction to Functions"
        ],
        "For Loops": [
          "Introduction to For Loops",
          "Adding in For Loops",
          "Using the Loop Index"
        ],
        "GamePad Controls": [
          "Introduction",
          "Adding in functions",
          "Game Axis"
        ],
        "Touch Controls": [
          "Learn about Touch Controls",
          "Introduction to Touch Controls",
          "Adding Specific Controls"
        ],
        "Geo Location": [
          "Add Geo Location"
        ],
        "Make Your Own Pixel Art in Construct 3 from Scratch": [
          "Learn to Master Construct 3's Pixel Art Engine",
          "Learn to Make a TileSet",
          "Create 8x8 Characters",
          "Make 16x16 Characters",
          "Make 32x32 Characters",
          "Learn About Simple Pixel Art Animations"
        ]
      },
      "requirements": [
        "Web browser",
        "Construct 3",
        "Adobe™ Photoshop™ or free alternative like Gimp"
      ],
      "description": "17 Hours of  Game Development in Scirra's Game Engine\nCoding is the hardest part of making a game. What if you could build a game without coding? We are here to show you how to do just that. Enroll now to build your own huge portfolio of simple 2D games. You will learn game development, design and mechanics with no coding.\nCOURSE BREAKDOWN\nConstruct 3 Game Development: Build 2D Games Without Coding\nLEVEL I: Introducing the Construct 3 Ecosystem\nLearn how to rapid prototype simple games\nLearn the basics of how to use Construct 3\nLEVEL II: Make Your Game Work with Cool Features\nLearn to maximize your game efficiency with functions\nLearn about for loops and while loops\nLearn how to add gamepad mechanics to your game\nLearn the philosophy and how to add touch controls\nLearn how to use Geolocation\nLEVEL III: Make Your Own Pixel Art in Construct 3 from Scratch\nLearn to master Construct 3's pixel art engine\nLearn the basics of pixel art\nLearn to make a tile set\nLearn about simple pixel art animations\nBuild a pixel art character\nLEVEL IV: Add More Details to Games You Make\nBuild a game with shadows\nLearn how to add sprite fonts\nLear how to make games efficiently with tile maps\nLearn how to use particle to your advantage\nLEVEL V: Add More Details to Games You Make\nLearn about procedural games\nBuild a Roguelike gamele\nBuild a procedural shooter game\nWhat Is Construct 3?\nConstruct 3 is software that lets you make your own computer games. This revolutionary platform makes game making easier, more convenient and fun.\nYou don't need to install or set up anything. All you need is a computer with an Internet connection. Once loaded Construct 3 will work even offline. Construct 3 will run on all iOS 11+ AND Android based mobile devices.\nWe'll take you through each step on our screen over-the-shoulder style. You'll get to see how the experts do their work.\nTHE VIDEO LESSONS\nIn this series of straight-to-the-point videos, you’ll learn how to:\nGet something no one can take away from you: an education\nBecome a technical and creative thinker\nMake games that work well and look good\nAfter the fundamentals, we’ll get into strategies and specifics, including:\nAvoid common mistakes that cost beginners a fortune\nSolve problems with a smart and fun mindset\nAnd much more!\nREVIEWS OF MAMMOTH INTERACTIVE\n\"Captivating voice, easy to follow at a rapid pace, get some paper and fasten your seat-belts. I'm enjoying every second of this. Literally, I bought this course for specific lectures of the Python + Tensorflow aspects, and after 2 hours I already know way more than after 10 hours of the Zero-to-Deep-Learning.\" - Philip Murray\n\"This course is a great way to get introduced to coding and bringing the game together from a full SLDC stance. The instructors are responsive, and the Q&A sections are extremely helpful. 100% worth the time invested to learn through this course.\" - Derek Hass\n\"Incredible course. Looking forward for more content like this. Thank you and good job.\" - Joniel Gallo",
      "target_audience": [
        "Perfect for people who want to be able to show off their own game and amaze everyone.",
        "Anyone who wants to leap into the game development and design field.",
        "People who already have experience and want to learn the new Construct 3 software."
      ]
    },
    {
      "title": "Unreal Engine 5: Making Mario",
      "url": "https://www.udemy.com/course/unreal-engine-making-mario/",
      "bio": "Love Mario, Meat Boy, or classic Metroid? Learn to use Unreal Engine as we create a side scrolling platformer.",
      "objectives": [
        "How to setup a project in Unreal",
        "How to create and layout a sidescroller level in Unreal",
        "How to script interactive gameplay elements utilizing Unreal Engine 5's Blueprint Scripting tools",
        "How to add menus and in-game HUD to a gaming experience",
        "How to create a COMPLETE gaming experience from scratch"
      ],
      "course_content": {
        "Course Promo": [
          "Course Promo"
        ],
        "Project Setup": [
          "Create Project",
          "Create Level"
        ],
        "Player Setup & Movement": [
          "Player Camera Setup",
          "Player Camera Customization",
          "Player Movement",
          "Player Jumping",
          "Player Jumping FX",
          "Player Setup & Movement"
        ],
        "2D Level Settings": [
          "2D Snap Layers",
          "2D Translation Widget"
        ],
        "Platforms": [
          "Jump Through Platform (Part #1)",
          "Jump Through Platform (Part #2)",
          "Moving Platform",
          "Launch Platform (Part #1)",
          "Launch Platform (Part #2)"
        ],
        "Coin Pickup": [
          "Coin Pickup Components",
          "Coin Pickup Script (Part #1)",
          "Player Controller",
          "Coin Pickup Script (Part #2)",
          "Coin Pickup - Sound Concurrency"
        ],
        "Fire Bar Hazard": [
          "Fire Bar (Part #1)",
          "Fire Bar (Part #2)"
        ],
        "HUD": [
          "HUD Layout",
          "HUD Display",
          "HUD Bindings"
        ],
        "Block Foundations": [
          "Blueprint Function Library",
          "Blueprint Interface"
        ],
        "Block Points Display": [
          "Points Display Widget Blueprint",
          "Points Display Widget Animation",
          "Points Display Actor Class Blueprint",
          "Add Points Function"
        ]
      },
      "requirements": [
        "No programming or previous Unreal Engine experience necessary!"
      ],
      "description": "In this game design course, I will be guiding you step by step through the creation of a side scrolling platformer game (akin to the classic \"Mario\" games) using Unreal Engine:  THE premier free to download gaming engine!  (AND the SAME engine used to build the smash hit \"Fortnite.\")\nThis course contains over 100+ fun to follow video lessons (follow along in sequence).  Things learned in this course include:\nHow to setup and create a project in Unreal Engine\nHow to construct a 2D level using 3D objects\nHow to setup a side scrolling camera\nHow to setup a character's movement mechanics\nHow to create interactive objects using Blueprint Scripting\nHow to create powerups and special player abilities\nHow to implement simple enemy AI\nHow to create a checkpoint system\nHow to respawn a player\nHow to create a working HUD\nHow to create interactive menus\nHow to create a dynamic way of implementing \"Level Settings\" (making things like customizing music and time limits per level a cinch!)\nHow to architecture a gaming project inside Unreal's Project Settings\n\n\nWith the knowledge gained in these video lessons, you will be armed with the necessary skills to start building your OWN gaming creations (WITHOUT any programming knowledge needed!)\n\n\nWhen finished with the course, please send me photos or videos of what YOU have been able to build and I'll share them with the community in future emails.",
      "target_audience": [
        "Complete beginners looking to get started creating games using Unreal",
        "Parents, Homeschoolers, Teachers or Professors looking to introduce their child / student to game development",
        "Any novice or even professional game developer looking to expand your Unreal Engine knowledge"
      ]
    },
    {
      "title": "Unity 3D Course: No Coding, Build & Market Video Games Fast",
      "url": "https://www.udemy.com/course/hackingunity3d/",
      "bio": "No programing required how to build and market your game from scratch complete guide",
      "objectives": [
        "Learn how to get your iOS developer license",
        "Learn basic of Unity 5 for iOS development",
        "Learn advertising network setup within Unity",
        "Learn how find free graphic images for games",
        "Learn how to add your own sound effects",
        "Learn how to find free or cheap sound effects for games",
        "Learn how to create your own iPhone game without having to write code",
        "Learn how to modify and create your own game graphics, for non-artists",
        "Learn how to publish your very own iPhone game to the iTunes app store in one afternoon",
        "Learn to use social media to market your game once developed",
        "How to outsource, hire and use virtual assistants"
      ],
      "course_content": {
        "Welcome to our course": [
          "About this class",
          "READ 1ST BEFORE ENROLLING",
          "Introducing Instructor Yohann",
          "Introducing Instructor Sergey, now its your turn!",
          "Join the FREE Support Group"
        ],
        "Get inspired to find ideas for games that sell": [
          "Example of app games made with Unity"
        ],
        "Create your own game - Initial Setup": [
          "Important Note: Read this First",
          "About Hands-on section",
          "Download the latest unity 3d version",
          "Install Unity 3d version 5 with web player and example projects",
          "Important Lecture get the source code",
          "Get the iOS dev license",
          "Getting ready - assets overview",
          "Get XCode tool and Open it",
          "Create the iOS certificate and app provisioning profile",
          "How are we doing so far?"
        ],
        "Hands on Game Design and Publishing": [
          "Behind the scenes Quick Game Publishing"
        ],
        "Creating your own game theme": [
          "Creating a picture for your game",
          "Modifying the game background images and waves",
          "Creating the captain rocket space robot new title",
          "Designing the main robot character and its walk animation in unity 5",
          "Modifying the dynamic background items",
          "Working on the game over and score board interfaces",
          "Working on the app settings and the app icon design"
        ],
        "Setting the technical details": [
          "Certificates and provisioning profile setup in unity 5 and xcode",
          "Changing xcode info tab app name and bundle ID",
          "Create the iTunes Connect main app settings",
          "Adding the in-app purchase settings to remove ads",
          "Create the game center leaderboard in itunes connect and unity 5",
          "Creating screenshots for all device dimensions",
          "Setup advertising networks google admob banner and chartboost full screen ad",
          "Find free sound effects and adding them to unity 5 source code",
          "Uploading all screenshots to iTunes Connect dashboard",
          "Change Pricing and Launch a Live Chartboost campaign"
        ],
        "Publishing the game to iTunes app store": [
          "Integrate google admob into iOS Xcode",
          "Start XCode archiving process",
          "Uploading the app to the iTUnes app store for technical review",
          "Wrapping up and deal"
        ],
        "Publishing to the Google Play store (Android)": [
          "Download Android SDK and Android Studio for free",
          "Install Android SDK and Android Studio",
          "Switch Unity 5 project to Android",
          "Create the APK file",
          "Locate the Android SDK within Unity",
          "Creating a keystore or using a preexisting one",
          "Adding a new app in google play developer console",
          "Adding google console assets",
          "Upload your APK file to google dev console",
          "Publishing to the Google Play store"
        ],
        "Running a game business - tips and tricks": [
          "The business of making games",
          "Building Games VS Building a Business",
          "Unity at the center of your game business"
        ],
        "The Business of Virtual Reality": [
          "Fastest way to build Virtual reality games (part 1)",
          "Fastest way to build Virtual reality games (part 2)"
        ]
      },
      "requirements": [
        "Must use Mac or IOS Compatible device"
      ],
      "description": "Unity 3D: Create a video game fast & business of game making\nThis course is perfect for those who want to create their own game and publish it on the Apple app store. The first part of the course teaches you how to create a clone of the Captain Rocket game for iPhone, using the Unity game engine, and submit your own version to the app store. The second part of the course teaches you how to promote your game using social media to get it to the top of the iTunes app list.\nEven if you know nothing about making games, you can still create your own game and submit it to the app store without writing a single line of code. The course provides you with the source code to create a clone of the game, and you can apply any theme that you want, from flying angels to robots.\nOther highlights of this course include:\nStep-by-step instructions on how to create your game using a technique called reskinning\nNo programming knowledge required\nThe game comes with multiple advertising channels to bring you passive income\nTeaches you how to market your game using social media such as Facebook and Twitter\nShows you how to outsource some of the tasks for creating the game to virtual assistants\nBonus material on how the game works on Android phones, not just Macs\nYou can complete the entire course in just one afternoon, and have your very own game ready to join the fan. Don't wait, enroll now and start creating your own game today!\n************************\nINSTRUCTOR BACKGROUND\nI've been an entrepreneur and ecommerce seller since the year 2001. I have helped and coached thousands of students online and in person and got over 200,000+ students enrolled in all my online classes. I would love to share the secrets of my success with you, it is my personal mission to help get you to be your best. Learn from my experience and expertise so you can take your business to the next level and beyond.\n************************\nOFFICE HOURS & EXTRAS\nWith the paid purchase of this course you get the following...\n* Free 15-min GoogleHangout coaching session to help you with any problems you might have with your online business\n* Super fast answers to questions ask me course related questions anytime with responses within 24 hours or less\n* Office hours when I hold 30 min-1 hour free sessions answering any of your questions live\n************************\nCERTIFICATE OF COMPLETION\nFinish 100% of class and get rewarded with a beautiful certificate that would be emailed to you. Use this to enhance your resume, show proof of expertise or extra curricular training. Print it out and frame it on your wall it is something you should be proud of.\n************************\nMONEY-BACK GUARANTEE\nThe course comes with an unconditional backed Udemy 30-day money-back guarantee so you can try this course risk free. I am sure you will love this course, this is not just a guarantee it is my personal promise to you that you will succeed and I will help you out so you too can get great results. With paid purchase you receive lifetime access, any future revisions or additional lectures free of charge plus unlimited instructor support.",
      "target_audience": [
        "Solo / Indi entrepreneurs",
        "Graphic design students",
        "Computer science students",
        "great course for someone who wants to learn about the iTunes publication process",
        "People who want to start a mobile app business the inexpensive way, on their own"
      ]
    },
    {
      "title": "Unreal Engine 5 : Exploring Lyra for Game Development",
      "url": "https://www.udemy.com/course/exploring-lyra-for-game-development-in-unreal-engine-52/",
      "bio": "Create Photo Realistic Combat Games using Lyra as a Low Code Platform with Blueprints in Unreal Engine 5 with Free tools",
      "objectives": [
        "Learn Modern Game Development techniques in Unreal Engine 5.2 using the Free Sample Game Lyra as a Framework from the Epic Marketplace.",
        "Understand and Learn Gameplay Ability Framework in Lyra with the Shooter game and Start creating new Character Skills like Archer and Melee",
        "Using the Modular Game Programming and Game Feature Plugins to Develop, Maintain and Extend the Games",
        "Learn to use Reusable techniques from Lyra and Free Marketplace assets to considerably speed up the development time",
        "Learn to create Visually Stunning Virtual worlds using Unreal Engine 5.2 using Procedural techniques."
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Course Introduction Updates",
          "How to get Help ?",
          "Different Aspects of Game Development",
          "Introduction to Procedural game Development",
          "Course Structure",
          "Course Prerequisite",
          "Downloading Free Assets from Fab"
        ],
        "Lyra and Gameplay Ability System Concepts": [
          "Introduction to Gameplay Ability System",
          "Introduction to Lyra",
          "Downloading Lyra from Fab",
          "Lyra Installation",
          "Lyra Experience Walkthrough",
          "Lyra Character Features",
          "Enhanced Input System in Lyra",
          "Lyra Gameplay Character Abilities",
          "Lyra Weapon Abilities",
          "Ability Activation",
          "Gameplay Effects",
          "Gameplay Tags",
          "Gameplay Ability System - Walkthrough",
          "Data Assets",
          "Unreal Engine Fundamentals",
          "Introduction to Game Feature Plugin",
          "Shooter Core Game Feature Plugin",
          "Shooter Core Experience",
          "Shooter Core Experience - Pawn Data",
          "Lyra User Facing Experience Definition",
          "Weapons",
          "Lyra User Interface",
          "Lyra Gameplay Messages",
          "Feedback Time"
        ],
        "Developing a Combat Game": [
          "Lyra Playground",
          "Player Vs Enemies",
          "Update for Unreal Engine 5.4 (Using Auto-Retarget when changing Skeletal Mesh)",
          "Outdated Assets and Alternate options",
          "Replace Mannequin",
          "Hero and the Guards",
          "Creating a Metahuman Character",
          "Metahuman as Hero",
          "Customizing Lyra Player Start",
          "Artificial Intelligence and Shooter Bots",
          "Artificial Intelligence and Melee Bots - Make the Character spawn Unarmed",
          "Artificial Intelligence and Melee Bots - Behavior Tree Creation",
          "Artificial Intelligence and Melee Bots - Setup Paragon Asset Khaimera",
          "Artificial Intelligence and Melee Bots - Create Melee Gameplay Ability",
          "Artificial Intelligence and Melee Bots - Behavior Tree Creation ( Continued )",
          "Artificial Intelligence and Melee Bots - Configuring Behavior Tree",
          "Environment Creation - Landscape Material",
          "Environment Creation - Procedural Spruce Forest",
          "Environment Creation - Ultra Dynamic Sky and Weather",
          "Environment Creation - Configuring the Combat Experience",
          "Environment Creation - Configuring the Combat Experience - Contd",
          "Configuring a Jump Pad",
          "Configuring a Teleporter",
          "Lyra Front End Menu"
        ],
        "Performance Optimization": [
          "Improving the FPS (Frames Per Second)"
        ],
        "Lyra - Deep Dive": [
          "Grenade - Gameplay Ability",
          "Grenade - Blueprint",
          "Grenade - Gameplay Cue - Detonate",
          "Grenade - Cooldown UI Widget"
        ],
        "Extending Lyra - Adding new Character Abilities": [
          "Archer Ability - Creating Bow and Arrow in Blender",
          "Archer Ability - Creating Animation Layer",
          "Archer Ability - Creating the Gameplay Ability",
          "Correction",
          "Archer Ability - Creating the Gameplay Ability (Contd)",
          "Archer Ability - Creating the Gameplay Ability (Contd)",
          "Archer Ability - Creating the Gameplay Ability (Contd)",
          "Melee Ability - Sword and Shield",
          "Vault Ability - Creating a Vault Ability using Motion Warping"
        ],
        "Multiplayer Gaming": [
          "Introduction to Multiplayer Gaming"
        ],
        "How-To": [
          "How to implement Spawn Effect for the Marketplace Characters",
          "How to create a New Gameplay Feature Plugin",
          "How to create Gameplay Ability Walk",
          "Light a Scene | Anim Style | Level Teleporter | FrontEnd Level Configuration",
          "First Person Camera mode",
          "Packaging and Custom EXE name",
          "Procedural Music using Metasound system",
          "Spawn Enemy Dynamically during Gameplay",
          "Lyra Interaction System and Inventory",
          "Custom Authentication for Multiplayer",
          "Drop Weapon Ability",
          "Change Skeletal Mesh Using Auto-Retargeting in UE 5.4"
        ],
        "Mini Project 1 (Custom Animated Characters with Modified Gameplay)": [
          "Adding Custom Enemy Character with animations and Dual Weapon Handling",
          "Adding Gameplay Logic",
          "Feedback Time"
        ],
        "References": [
          "Lyra Reference Sheet"
        ]
      },
      "requirements": [
        "Basic Knowledge in Unreal Engine and Blueprints",
        "Unreal Engine 5.2 and Visual Studio 2022 or above pre installed",
        "Good Gaming PC capable of running Unreal Engine 5.2. Please check the Minimum PC Specifications for Unreal Engine",
        "Readiness to explore further, do Hands-on and Research on the topic"
      ],
      "description": "NOTE : The New Unreal Engine 5.6 - RPG using Lyra Framework course is released now. You can view from my Courses list.\n\n\nIn this Course, you will learn Modern Game Development approaches using Unreal Engine 5 and Lyra Sample Project as a Gameplay Ability System Framework. Only Free assets from the Marketplace will be used throughout this course.\nWe will be using Mostly Blueprints throughout the course with a little customization to the Lyra C++ Framework in a very few places.\nThis Course is not intended to be Step by Step. It is particularly targeted to the Unreal Engine Developers who wants to know more about Lyra Framework and the features available. So there will be many use cases covered on how to use the Lyra Framework features in your game development workflow.\nThis Course is made in Unreal Engine 5.2. But the Lyra Framework concepts are still the same in the Later Unreal Engine version. There are sections in the course to highlight the changes in the latest version of the Unreal Engine 5.3. and I have also added a new video to Unreal Engine 5.4 Auto Retargeting process to get even more better results changing the skeletal mesh.\nThis course will be \"To the Point\" and no time will be wasted. We will be exploring the different features in Lyra and How we can use them in modern game development projects. In this course, we will cover the development of a Combat game using the reusable features in Lyra.  We will start with the understanding of the Lyra Framework features and the concepts of Gameplay Ability System. Then gradually start making modifications and add more features to build our own unique games. We will be using the Market place Characters and Metahumans in this course.\nWe will do some customization to the Lyra gameplay with  changes to the Blueprint and C++. We will also create a photo realistic open world Jungle environment using Procedural tools. We will then extend the Lyra Features and add Archer and Melee Abilities. We will then deep dive into the implementation of some of the Lyra Components and explore the blueprints.\nWe will start the course very light with Basic concepts of Lyra and slowly start using the Lyra features to develop the game. Modular game development approach is followed. The course is targeted for Beginner to Intermediate level Unreal Engine game developers. We wont cover the Unreal Engine concepts from the scratch, but focus more towards using Lyra in Unreal Engine.\nBy the end of this course , you will get a good understanding of using the Lyra Framework in Unreal Engine 5.2.\nThis course will be a good foundation to develop your own virtual worlds for the metaverse and get ready for the Next generation game development.\nThis Course will continue to grow with a lot more features added on a regular basis. You will get lifetime course updates for free.\nNote :  Any reference to the Paid assets (Ultra Dynamic Sky in one of the lectures) are just for reference and a better suggestion and completely optional.\nYou can Join our Discord Channel for any queries about the Course and for the Support.",
      "target_audience": [
        "Beginner Unreal Engine Developers who wants a Quickstart in Lyra and Unreal Engine 5.2",
        "Beginner to Intermediate level Unreal Engine Game developers who wants to get exposure to the Modern modular Gameplay approaches and looking for some insights into the Gameplay Ability System.",
        "Anyone who is interested in Game Development and beginning their journey with Unreal Engine, who is looking for directions about the future of Game Development",
        "Environment Artists who wants to test and demonstrate their Environment with quick gameplay actions",
        "Students interested in Metaverse projects to build virtual worlds and gameplay actions"
      ]
    },
    {
      "title": "Pixel Art Characters: 2D Character Design & Animation",
      "url": "https://www.udemy.com/course/pixel-art-characters/",
      "bio": "Learn to create your own top-down & platformer-based character sprites for video games.",
      "objectives": [
        "Build unique top-down & platformer-based sprites for video games.",
        "Understand character design and create your own characters, enemies and monsters!",
        "Learn the foundation of techniques in forming objects.",
        "Customise and animate your sprites.",
        "Gain skills in creating character portraits & close-ups.",
        "Develop intermediate knowledge when it comes to animating your characters & monsters.",
        "Learn about detailing, shading, and highlighting your Pixel Art.",
        "Explore animation for video game assets.",
        "Quickly become competent using the very popular LibreSprite / Asesprite software.",
        "Be part of an amazing and supportive community of people similar to you."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Download Software",
          "Community & Support",
          "Getting Started with Libresprite",
          "Character Silhouettes",
          "Detailing Silhouettes",
          "Outlining Characters",
          "Creating Platformer Silhouettes",
          "Detailing Platformer Silhouettes",
          "Section Wrap-Up - Introduction & Setup"
        ],
        "Designing Characters": [
          "Section Intro - Designing Characters",
          "Building Top-Down Character Models",
          "Detailing Top-Down Characters",
          "Creating A Top-Down Wizard",
          "Creating A Top-Down Knight",
          "Designing Platformer Character Models",
          "Creating A Platformer Fighter",
          "Creating A Platformer Archer",
          "Designing A Character Portrait",
          "Customizing Character Portraits",
          "Section Wrap-Up - Designing Characters"
        ],
        "Character Animation": [
          "Section Intro - Character Animation",
          "Setting Up Animations",
          "Animating Characters - Idle Cycle",
          "Animating Characters - Run Cycle",
          "Animating Characters - Jumping",
          "Animating Characters - Attacking",
          "Animating Characters - Hit & Death",
          "Section Wrapup - Character Animation"
        ],
        "Creating Monsters": [
          "Section Intro - Creating Monsters",
          "Designing Enemies - Slimes",
          "Designing Enemies - Bats",
          "Designing Enemies - Demons",
          "Designing Enemies - Mimic",
          "Animating Enemies - Slimes",
          "Animating Enemies - Bats",
          "Animating Enemies - Demons",
          "Animating Enemies - Mimic",
          "Section Wrapup - Creating Monsters"
        ],
        "Continuing Your GameDev Journey": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No previous experience required, just an interest in learning pixel art.",
        "You don't need a drawing tablet - just a mouse and keyboard!"
      ],
      "description": "Want to make your games stand out? Pixel art is quick and easy, when you know how!\nLearn how to create your own unique, stylised characters in just a few hours. You’ll develop the skills to quickly make unique and professional characters, making your game stand out (ideal for game jams, portfolios and more)!\nModern graphic resolution is better than ever before, but Pixel Art games continue to be firm favourites. Learn to recreate the nostalgic feel of early computer games with pixel art!\nFrom designing characters, creating character portraits, crafting enemies & monsters, to customising and animating your sprites. This course has it all!\nAnd, the character design process can be applied to all types of 2D character design, not just Pixel Art.\nLearn how to create proper silhouettes to build out sprites. Detailing, shading and highlighting your pixel art. And explore animation for video game assets.\nWhether you’re a beginner looking to learn pixel art from the ground up, or you’re more intermediate and want to improve your skills, this course will help you become a better pixel artist.\nPixel art is cool, fun, quick and accessible. No previous experience or drawing tablet required, an interest in learning pixel art, a mouse and a keyboard is all you need.\nAll students have access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nJump in and start creating your awesome characters now!",
      "target_audience": [
        "Perfect for beginners looking to learn Pixel Art.",
        "Awesome for more intermediate Pixel Artists looking to expand their skill foundation."
      ]
    },
    {
      "title": "Bolt Visual Scripting in Unity",
      "url": "https://www.udemy.com/course/bolt-visual-scripting-in-unity/",
      "bio": "Make games interactively without coding in Unity and Bolt",
      "objectives": [
        "Basics of the Bolt visual editor",
        "Creating custom gameplay with Bolt Flow Machine and Macros",
        "Organizing visual graphs with SuperUnits",
        "Debugging Bolt graphs visually",
        "Making a first-person controller without coding!"
      ],
      "course_content": {
        "Introduction and Project Setup": [
          "Teaser",
          "Getting Started",
          "Project Files",
          "Software Versions",
          "Q&A Forum",
          "Installing Bolt",
          "MacOS Users PLEASE READ"
        ],
        "Bolt Basics": [
          "Flow Machines and Flow Graphs",
          "Graph Variables",
          "Object Variables",
          "Super Units",
          "Null Checks",
          "User Input",
          "Graph Debugging Part 1",
          "Graph Debugging Part 2",
          "Macros Versus Embeds",
          "Challenge: CameraMover",
          "Solution: CameraMover",
          "CameraMover Refactor"
        ],
        "First-Person Player Movement": [
          "First-Person Movement",
          "FPS Player Setup",
          "Camera Tilt",
          "Cursor Toggle",
          "Rigidbody Movement",
          "Graybox Level",
          "Jumping",
          "Challenge: Running",
          "Solution: Running"
        ],
        "Game Mechanics": [
          "HUD Crosshairs",
          "PlayerHUD Part 1: Event Triggers",
          "PlayerHUD Part2: Custom Events",
          "PlayerWeapon: Raycasting",
          "PlayerWeapon: HitEffect",
          "PlayerWeapon: TracerEffect",
          "EnemyTargets",
          "GameManager: State Machines and State Graphs",
          "StartScreen",
          "GameEvents",
          "ScoreManager",
          "Win Condition"
        ],
        "Additional Resources": [
          "More content coming",
          "Beginning Unity"
        ]
      },
      "requirements": [
        "Basic familiarity with the Unity interface",
        "No prior coding experience required!",
        "Ability to problem solve and think logically",
        "PC/Mac with Unity 2019 LTS or Unity 2020",
        "Understanding of 3d fundamentals"
      ],
      "description": "Have you ever wanted to build a game without coding?  Now you can.\nIn this course, we'll cover the essentials of Bolt, Unity's official visual scripting solution:\nTake a deep dive into the essentials of Flow Machines and Flow Graphs\nMaster the fundamentals of Bolt and visual scripting\nConsolidate your graphs with SuperUnits\nCreate first-person movement logic, all without writing a single line of code\nBuild game mechanics in a modular, visual way\nComplete exercises and challenges.  Learn by doing instead of watching.\nUnity is a fantastic engine that enables you to make production-quality games. Build for Windows, macOS, iOS, and Android all from a single project!\nThis course is designed for game developers of all levels who want to learn Unity's visual scripting tools.  Bolt is a visual framework around the UnityEngine API.\nIf you're new to Unity, this is a great gateway into gameplay programming.  If you're an experienced developer, check out a fresh new take on traditional coding.  No matter your skill level, this is a fun way to dive into Unity.\nAt GameAcademy.school, we've trained tens of thousands of students in game development.  If you are a visual learner, there's no better time to get started in game development.\nUnleash your creativity, and you'll be amazed at what you can build with Unity and Bolt!",
      "target_audience": [
        "Beginning Unity game developers",
        "Experienced developers new to Unity visual scripting",
        "Visual problem solvers interested in game development"
      ]
    },
    {
      "title": "Android Game Development with Godot Engine - Create 5 Games!",
      "url": "https://www.udemy.com/course/godotengine/",
      "bio": "Great Reviews|Learn in Practice|Famous Games|Frequent Updates|Powerful Godot Engine|English Subtitles|The best!",
      "objectives": [
        "Create diverse games for Android depending on your needs.",
        "Publish your Game in the Play Store.",
        "Use the various resources present in the Godot Engine.",
        "Comprehend the essential principals of Game Creation."
      ],
      "course_content": {
        "Introdução": [
          "What Will I Learn In This Course?",
          "How to Use the Udemy Video Player?",
          "How to Ask Questions?",
          "For Portuguese Speakers"
        ],
        "Introduction to Godot Engine": [
          "Getting to Know the Godot Engine",
          "Download and Installation - Linux",
          "Creating a Project and Basic Settings",
          "Exploring the Interface",
          "Understanding Nodes and Scenes"
        ],
        "Basic Programming": [
          "Using Variables",
          "Arithmetic Operators",
          "Logic Operators",
          "Making Decisions (If/Else)",
          "Other Types of Variables",
          "Using Loops",
          "Creating Functions",
          "What Have We Learned In This Section?"
        ],
        "Flappy Bird": [
          "Game Introduction",
          "Resources and Final Project Download",
          "Animating the Bird",
          "Configuring and Limiting Movement",
          "Animating the Infinite Background",
          "Creating the Pipe Scene",
          "Generating Pipes",
          "Detecting Collisions",
          "Counting Points",
          "Playing Sounds",
          "What Have We Learned In This Section?"
        ],
        "Timberman": [
          "Game Introduction",
          "Resources and Final Project Download",
          "Creating the Project",
          "Animating the Bird",
          "Creating Barrel Scenes",
          "Stacking the Barrels",
          "Breaking Everything!",
          "Implementing the Time Bar",
          "Counting Points",
          "What Have We Learned In This Section?"
        ],
        "Fruit Ninja": [
          "Game Introduction",
          "Resources and Final Project Download",
          "Creating the Project",
          "Making a Pear",
          "Fruit Launch",
          "Cutting the Fruit",
          "Other Flavors",
          "Detecting Cuts",
          "See the Bomb!",
          "Score and Life System",
          "Game Over",
          "What Have We Learned In This Section?"
        ],
        "Hand Spinner": [
          "Game Introduction",
          "Resources and Final Project Download",
          "Creating a Hand Spinner",
          "Making it Rotate",
          "The Game Screen",
          "A Lot of Signals!",
          "Score System",
          "Game Logic"
        ],
        "Super Mario": [
          "Game Introduction",
          "Resources and Final Project Download",
          "Moving the Character",
          "Animating the Movements",
          "Creating the World",
          "Camera and Background",
          "Adding Coins",
          "Slugs",
          "Understanding Collisions",
          "The Death",
          "Destructibles Blocks",
          "Moving Platforms",
          "Touch Commands",
          "Respawn",
          "Changing Screens",
          "Game Informations",
          "Informations Mechanics",
          "What Have We Learned In This Section?"
        ],
        "Play Store": [
          "Generating the Apk",
          "Testing Game on Smartphone",
          "Creating Developer Account",
          "Production Apk",
          "Publishing the Game"
        ]
      },
      "requirements": [
        "It's necessary to have a computer with Windows, Mac or Linux.",
        "It isn't necessary to have any previous knowledge about programming.",
        "Desire to learn and study.",
        "All the tools used are FREE."
      ],
      "description": "ATTENTION (Read carefully!):\nThis course was originally created and launched in Portuguese, however due to it's success we decided to bring it to other countries! Therefore, note that all the classes have Portuguese audio with English subtitles! Remember to activate the subtitles in the video player!\n=====\nSome reviews of the course:\n\"Instructor is fantastic! Don't be put off by the fact that the instructions are in Portuguese, if you turn captions on, you can follow along perfectly. I've advanced more in a few lessons than I did after spending weeks searching for current tutorials on the net.\" - Juan Aristy\n\"Very good, I'm learning things which will certainly help me a lot in the future! It's worth it to do the course ...\" - Flavio de Souza Batista\n\"The course is very practical and fast, without ceasing to have a lot of content\" - Thiago Souza Santos\n\"The instructor is tranquil and objective, which makes the learning easy and productive.\" - Sergio Biazetto\nAnd many more...\n=====\n\nWelcome to the Complete Course of Game Creation for Android!\nHave you ever had an idea which would make a great game, but didn't know how to put it in practice?\nDo you dream of working in Game Development?\nThen you are in the right place! In this course you will learn everything necessary to create your Games from the beginning!\nHere you will learn to use the newest and completest tool for Game Development, the Godot Engine, which is not only intuitive, but also completely free and limitless.\nDo you think you will only get the theory? None of that! We will create 5 Games similar to the famous:\nSuper Mario\nFlappy Bird\nTimberman\nFruit Ninja\nHand Spinner\nDon't know anything about programming? No problem, we'll teach you!\nHave any doubts during the class? You will have a totally exclusive forum to ask any questions related to the course, which we'll answer with pleasure!\nWhat are you waiting for to begin to create your Awesome Games? Don't lose any time! Sign up now!",
      "target_audience": [
        "Game Development/Design enthusiasts.",
        "Students of Computer Science/Engineering.",
        "People with a desire to create their own game."
      ]
    },
    {
      "title": "Intro to Airplane Physics in Unity 3D - 2017 & 2018",
      "url": "https://www.udemy.com/course/intro-to-airplane-physics-in-unity-3d/",
      "bio": "Learn how to build your very own Custom Airplane Physics with Unity & C#",
      "objectives": [
        "You will be able to create your own Airplane Physics for your own Flying Games in Unity 3D",
        "You will have the confidence to work with Rigidbodies in Unity",
        "You will understand the Basics of Weight and Force to produce belivable Aircraft Physics",
        "You will understand how to put together a Modular set of scripts to make your Aircraft easy to manage in Unity",
        "You will learn how to take advantage of C# inheritance to create Re-Usable code",
        "You will Learn how to set up the UI for an Airplane and how to make them functional"
      ],
      "course_content": {
        "Introduction": [
          "Course Pre-Requisites",
          "Flight Demo"
        ],
        "Getting Set Up!": [
          "Project Setup",
          "Prepping the Development Scene",
          "Prepping the Airplane - Part 1",
          "Prepping the Airplane - Part 2",
          "Designing the Code"
        ],
        "Building the Airplane Inputs": [
          "Introduction",
          "Installing the Completed Project",
          "Stubbing in the Scripts",
          "Keyboard Input - Variables & Namespaces",
          "Keyboard Input - C# Properties",
          "Keyboard Input - C# Virtual Methods",
          "Keyboard Input - Using the Input Manager",
          "Keyboard Input - Creating an Inspector Editor",
          "Xbox Input - Virtual Methods",
          "Xbox Input - Updating the Editor",
          "Xbox Input - Setting the Input Manager"
        ],
        "Creating the Airplane Controller Script": [
          "Introduction",
          "Stubbing in the Scripts & Code Design",
          "Creating a Base Rigidbody Controller Class",
          "Creating the Airplane Controller Class",
          "Airplane Weight Calculation",
          "Creating a Menu Option for Automatic Setup"
        ],
        "Building the Airplane Engine Component": [
          "Introduction",
          "Applying Forces",
          "Stub in the Scripts",
          "Hook up the Engine",
          "Handling the Wheels",
          "Calculating Force with Animation Curves"
        ],
        "Animating the Propeller": [
          "Introduction",
          "Stubbing in the Script",
          "Calculating Degrees Per Second from RPM's",
          "Propeller Graphics",
          "Blending the Propellers",
          "Material Swapping"
        ],
        "Flight Characteristics": [
          "Introduction",
          "Stubbing in the Script",
          "Calculating Forward Speed",
          "Sticky Throttle",
          "Theory of Lift",
          "Creating Lift",
          "Refining Lift with Curves",
          "Drag",
          "Angle of Attack",
          "Handling the Rigidbody",
          "Pitch",
          "Roll",
          "Yaw",
          "Banking"
        ],
        "Building the Airplane Camera": [
          "Introduction",
          "Stub in Scripts",
          "Create a Basic Follow Camera",
          "Ground Height"
        ],
        "Animating the Control Surfaces": [
          "Introduction",
          "Stub in the Script",
          "Coding the Control Surface Script",
          "Hooking up the Rudder",
          "Hooking up the Ailerons"
        ],
        "Completing the Wheels": [
          "Introduction",
          "Rolling and Positiong the Wheels",
          "Braking",
          "Steering"
        ]
      },
      "requirements": [
        "Basic understanding of Unity 3D and how to build simple games with it.",
        "Beginning Understanding of C# and the Unity API.",
        "Basic Knowledge of using Rigidbodies within Unity.",
        "Basic Knowledge of using Unity 3D's UI system",
        "Basic Knowledge of Photoshop to Create UI elements."
      ],
      "description": "Have you ever wanted to build your own Airplane Physics using the Rigidbody component in Unity 3D?  Do you want to know more about setting up modular code to make your workflows faster and more re-usable?  If so, this course is for you!  Throughout the contents of this course you will learn how to create a fully functional Airplane Physics model.\nIn the course you will learn to build the full physics flight model, how to animate the propeller, how to setup inputs, how to build a dynamic airplane camera, how to animate all the control surfaces of the plane, and more!\nBy the end of this course you will have your very own Flight Physics System that you can use for your own flying games.\nBy Purchasing the Course you get the Following:\nThe Complete Airplane Physics Code\nTwo Airplane Models, the Indie-Pixel Plane and the F4U Corsair\nComplete UI kit to create the Instrument UI for the Airplane",
      "target_audience": [
        "Anyone interested in creating their own Aircraft physics for games.",
        "Someone who is looking to take their Unity skills up a notch and begin to utilize modular code and setups.",
        "A Beginner Unity user who wants to learn more about how to create vehicles, specfically aircraft, with Unity's Rigidbodies.",
        "A unity user who would like to learn how to create more advanced UI for vehicles"
      ]
    },
    {
      "title": "Creating Gameplay Mechanics With Blueprints in Unreal Engine",
      "url": "https://www.udemy.com/course/creating-gameplay-mechanics-with-blueprints-in-unreal-engine/",
      "bio": "Learn Unreal blueprints by developing 2D & 3D games with this comprehensive guide from begin to finish",
      "objectives": [
        "Implement sound effects, background music, and particle effects",
        "Collect and destroy game objects",
        "Master beginner blueprint concepts, like variables, \"if\" statements, and arrays",
        "Navigate the Unreal Engine and discover unique features like the Marketplace",
        "Detect collisions, receive user input, and create game mechanics",
        "Creating the basic elevator game mechanics",
        "Creating the sliding door game mechanics",
        "Creating a day and night cycle in game",
        "Creating a basic sprint system",
        "Creating the level changing checkpoint",
        "Create a pickup object with scoring",
        "Create a grenade effect and game mechanics",
        "Creating exploding enemy AI",
        "Creating a UI minimap for game",
        "Creating the player health pickup"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Creating A Basic Sprint System Game Mechanic": [
          "Software Installation And Project Setup"
        ],
        "Creating The Sliding Door Game Mechanic": [
          "Creating The Sliding Door"
        ],
        "Creating The Basic Elevator Game Mechanic": [
          "Creating The Basic Elevator"
        ],
        "Creating The Simple Flashlight Game Mechanic": [
          "Creating The Simple Flashlight"
        ],
        "Creating A Day And Night Cycle Game Mechanic": [
          "Creating A Day And Night Cycle"
        ],
        "Software Installation And Project Setup": [
          "Creating A Basic Sprint System"
        ],
        "Creating The Level Changing Checkpoint Game Mechanic": [
          "Creating The Level Changing Checkpoint"
        ],
        "Creating A Pickup Object With Scoring Game Mechanic": [
          "How To Create A Pickup Object With Scoring"
        ],
        "How To Create A Grenade Game Mechanic": [
          "How To Create A Grenade"
        ]
      },
      "requirements": [
        "Unreal engine 4",
        "A basic understanding of mathematics (order of operations, addition, subtraction, multiplication) will facilitate comprehension of certain coding logic.",
        "No prior programming or Unreal experience is required. If you have worked in C++ or Unreal before, this course can help you fine-tune your game development skills.",
        "Before beginning this course, you should be comfortable browsing the Web."
      ],
      "description": "Often times, learning a new game engine can be difficult, especially when it comes to Unreal Engine 4. Unreal Engine 4 makes your 2D and 3D games stand out, as long as you know how to properly use it.\n\n\nThis course will teach you exactly how to use it. The 15 lecture course (which only takes an hour and a half of your time) starts off with the basics. It teaches you how to implement the basics to create great visuals that are real to the human mind. From there, you are taught simple, clear concepts. That way it’s easy to follow and Unreal Engine 4 becomes much easier to use.\n\n\nThe best part is, you will use the concepts learned for every single game project that you will ever develop. You will even discover and love using the difficult feature, the marketplace. While others (who didn’t take the course) will find that feature hard to maneuver.\n\n\nBy the end of the course, you will be able to:\n\n\nApply what you learned to build your own games from start to finish.\nOrganize your game development to make your workflow not only quality but faster.\nMake use of Unreal’s blueprints to expand on first-person shooting and create new characteristics.\n\n\nWhat’s more? If you struggle with programming and coding, you are in luck! This course gives you examples upon examples guiding you through the fundamentals of Blueprint programming. So that in little to no time, you will be able to make magic with Blueprints.\n\n\nYou will finally get a course that teaches you how to build a game, from A to Z. When you are done, you will know how to make quality 2D and 3D that sets you apart.\n\n\nSimply click the Enroll Now button to get started right now!\n\n\nMore about the Instructor:\nThis course is designed by Animation Hacks which is the visual effect studio with high-quality skill artist work on numerous unannounced projects. In addition, they enjoy sharing their knowledge with those students who learn 3D online.\nNOTE FOR STUDENTS - please take a look Section 1 / Lecture 1 to downloads for the source attachment link with the lesson.)",
      "target_audience": [
        "This course is not for someone who is an advanced game developer. This course is also not for students who are not interested in learning to code as you will get an introduction to the fundamentals of blueprint programming.",
        "Anyone seeking an understanding of best visual coding practices such as organization with your project and optimal development workflow that are essential to game development.",
        "People interested in developing commercial quality 2D and 3D games either professionally or as a hobby.",
        "The ideal student for this course is someone who is interested in game development with Unreal and visual programming, C++, blueprint and is looking for an interactive, project-based course."
      ]
    },
    {
      "title": "Build a Augmented Reality (AR) Game with Unity",
      "url": "https://www.udemy.com/course/build-augmented-reality-dartboard-game-with-unity/",
      "bio": "Learn to develop Augmented Reality (AR) Game from scratch",
      "objectives": [
        "Build AR Dartboard Game in which players throw small missiles, also known as darts, at a circular target, known as a \"dartboard\".",
        "Learn Augmented Reality (AR) from scratch with Unity 2021.",
        "AR game design and game development that will help you build your own games.",
        "Learn how to create a production build with the right settings."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How to Make a Video Game",
          "Introduction to Unity",
          "Introduction to Augmented Reality",
          "What is Dartboard Game",
          "Quiz of Introduction Section"
        ],
        "Setup & Introduction to Unity": [
          "Download Course Resources and Links",
          "Download and Install Unity",
          "Create New Unity Project",
          "Different Ways of Testing Unity Project on Device",
          "Basic Understanding of Unity Editor",
          "Quiz of Setup & Introduction to Unity"
        ],
        "AR Dartboard Game with Unity 2021": [
          "Augmented Reality Supported Devices",
          "Setting up Project with AR Foundation",
          "Create First AR Scene",
          "Adding a 3D Cube in AR",
          "Adding Visuals to detected Surface",
          "Restrict Surface Detection only to Vertical Area",
          "Change the Scanning Visuals",
          "Create a Placement Indicator",
          "Place a Dartboard on the Wall",
          "Restrict to Place a Single Dartboard",
          "Create a Event to Broadcast a Action",
          "Disable Surface Detection on Placement",
          "Instantiate a Dart",
          "Throw a Dart",
          "Throw Dart and Load Next Dart",
          "Dart Stick to Dartboard",
          "Using Mesh Collider On Dartboard",
          "Performance Tips",
          "Show Player Distance From Dartboard in RealTime",
          "Sound Integration",
          "Placement Indicator Direction",
          "Quiz of AR Game Development"
        ],
        "Where to go Next": [
          "Course Summary"
        ]
      },
      "requirements": [
        "No prior experience is necessary.",
        "Basic understanding of Unity and C# Programming language"
      ],
      "description": "Description\nLearn to create an Augmented Reality(AR) Games from scratch in Unity, developing a AR game was not easier from scratch before this interactive course. You are going to create your first Augmented Reality Game from start to end.\nWhat is this Augmented Reality Dart Game is all about?\nAR Dart is a Augmented Reality game in which players throw small missiles, also known as darts, at a circular target, known as a \"dartboard\".\nWe will be using Unity game engine Augmented Reality(AR) capabilities with AR Foundation to develop this app practically step by step. AR Techniques used in this project can be utilized in any of your project. So you can develop your own AR idea in a easy way.\nWhat You Will Learn Dart Game?\nIntroduction to Unity, Augmented Reality, Dartboard Game\nDownload and Install Unity Using HUB\nCreate Your First Unity Project\nBasic Understanding of Unity Editor\nSetting up Project with AR Foundation\nCreate First AR Scene\nAdding a 3D Cube in AR and accessing a device camera\nAdding Visuals to detected Surface\nRestrict Scan only to Vertical Area\nChanging or beautifying the surface detection scanning visuals\nCreate a Placement Indicator\nPlace a Dartboard on the Wall\nRestrict to Place a Single Dartboard\nDisable Marker and Surface Detection after placing Dartboard\nInstantiate a Dartboard and Throw a Dart and Load Next Dart\nDart Stick to Dartboard using Colliders\nPerformance Tips for AR Apps\nShow Player Distance From Dartboard in Real Time\nSound Integration\nContent and Overview:\nEach lecture is solving a subproblem and at the end we have complete project in a step by step practical way. If you are a beginner who really doesn't know how to create a AR app/game in Unity then this course will help you a lot. It can also help you in creating your final year project for your university or college. This course is designed for absolute beginners, but meanwhile, you should have a basic understanding Programming. The Unity packages includes Scripts or 2D/3D Assets are attached to the lecture in which they are used. You can download them and import in your practice project to match your project with course. The Scripts and 2D/3D Assets of this course is attached to the last lecture, and you can download that to use in your own projects.\nThis course benefit to:\nUnity Developers who want to learn Augmented Reality Game development using Unity.\nStudents who want to create a practical project using Unity latest version with C# from scratch.\nNote: For testing the builds you need a AR (Augmented Reality) enable device. It can be Android or iOS device(mobile,ipad etc)",
      "target_audience": [
        "Developers who are interested in Augmented Reality (AR).",
        "Developers who want to learn both AR App/Game Development in same course."
      ]
    },
    {
      "title": "The Complete Guide to Unity 2D : Endless Runner",
      "url": "https://www.udemy.com/course/endless-runner-alexdev/",
      "bio": "Making games is easy! I Learn C# using Unity and create your very own endless runner for PC and Mobile",
      "objectives": [
        "You will create your very own endless runner",
        "You will learn how to code in C# and how to use Unity",
        "You will learn basics of game development",
        "You will learn how object oriented programming works in practice.",
        "You will learn how to make games for Android and IOS"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Watch before you start": [
          "Important to know - Mindset of the course",
          "Important to know - Bugs and Q&A"
        ],
        "Download and setup Unity": [
          "Download and setup Unity",
          "Basic tool and windows of Unity"
        ],
        "Creating player and learn basics of Unity and C#": [
          "Physics and Collision",
          "Sorting layers in Unity",
          "How to cut Sprites",
          "Give collider to your Player - (with challenge)",
          "Make player move",
          "Let's make a Jump",
          "More on the Input System",
          "Execution order in Unity",
          "Learn about bool",
          "Collision detection"
        ],
        "Animations and animation controller": [
          "Idle animation",
          "Move animation",
          "How animator works",
          "Jump animation",
          "Bland tree - (with challenge)"
        ],
        "Level generation": [
          "Learn to generate platform",
          "Endless generation"
        ],
        "Define look of your game": [
          "Camera reviw",
          "Setup your camera",
          "Game idea and resources",
          "Create background",
          "Parallax effect",
          "Jittering explained"
        ],
        "Improving player controller": [
          "Double jump",
          "Physics 2D material",
          "Wall check",
          "Slide abbility",
          "Slide cooldown - (with challenge)",
          "Slide collision",
          "Ledge climb",
          "Speed up",
          "Speed reset",
          "Increase speed of animation",
          "Roll animation",
          "Knockback",
          "Invincibility",
          "Death animation",
          "Tidy up",
          "Ledge climb - hot fix"
        ],
        "Interactable objects": [
          "Game manager",
          "Coin",
          "Coin generator",
          "Trap",
          "Moving trap",
          "Color platforms around you",
          "Restart level on death"
        ],
        "Prepare to create levels": [
          "Restrict camera's movements",
          "How to create level parts"
        ]
      },
      "requirements": [
        "No programming experience. You will learn everything need to know",
        "Any computer and internet"
      ],
      "description": "Learn how to create endless runner game for PC and Mobile using Unity, an industry-standard program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses.\n\n\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nI will not only show you how to do things, but also explain what I'm doing and why I'm doing that.\nI will introduce how game design works on practice sharing with you some tips and tricks how should you plan your game and implement this knowledge on practice.\n\n\nAbout the game itself:\nIt's a cool and fun endless runner where you coloring world by touching platform. You'll have to out run enemies and color everything around you. The further you get the more colors you spread...let's how far can you get\n\n\nAt the end of this course you will have developed the ability to create such game elements as:\nA character that can run, jump, double jump ,slide, ledge climb and roll.\nA knockback, invincibility and death of the player\nDifferent kind of traps that can effect (damage \\ slow down) the player\nAnimations of the player, enemies, items and UI\nCollectibles such as coins & gems\nHow to create and control camera\nParallax background effect\nRandom Endless Level Generation\nSpeed increases for player and score calculation\nFull user Interface with interactive menus\nShop for player\nUI settings\nSaving system , save settings and game progress\nUnique coloring system of the world around you\nAI that can chase and out run the player\nAnd more...",
      "target_audience": [
        "For those who want's to learn how to make games",
        "For beginners in programming",
        "For passionate learners who is eager to make their very own first game",
        "For those who knows how to make games but want's to learn new and powerful features"
      ]
    },
    {
      "title": "Control Rig for Unreal Engine 5",
      "url": "https://www.udemy.com/course/controlrig/",
      "bio": "Learn Control Rig within Unreal Engine 5 to create procedural animation systems.",
      "objectives": [
        "Learn the fundamentals of ControlRig for Unreal Engine 5",
        "Create a procedural walk animation system",
        "Create a procedural turn-in-place animation system",
        "Learn various techniques to add dynamic motion to your character animations",
        "Master ControlRig functions, variables and logic, and how to incorporate it into your project",
        "Learn problem solving and debugging",
        "Learn how to turn your idea from a concept into a working system",
        "Gain an expert understanding of ControlRig's capabilities for use in your single & multiplayer games, videos and animations, UEFN projects and more"
      ],
      "course_content": {
        "Introduction": [
          "Introduction and overview",
          "Basic tips & troubleshooting"
        ],
        "Creating a Procedural Walk Cycle": [
          "Initial Character Blueprint setup",
          "Initial Animation Blueprint setup",
          "Creating the ControlRig class",
          "Make ControlRig DO something",
          "Create an array of FootNames",
          "WorldSpace vs RigSpace explanation",
          "Save the default foot transforms to a new array",
          "Visualize the foot transforms with DrawTransform",
          "FullBodyIK node explanation",
          "Add one leg into the solver",
          "Add the rest of the legs into the solver",
          "SAVE FIRST! Collapse to a function",
          "Convert World transform to Rigspace transforms into the solver",
          "Explanation of how we will calculate the velocity",
          "Create the CalculateVelocity function",
          "Calculate how far the character has moved in the world",
          "Calculate how far the character moves per second and draw it",
          "Smooth the calculated velocity",
          "Add comments to the calculate velocity function",
          "Cycle explanation",
          "Creating the CalculateCycle function",
          "Test our cycle with a print node",
          "Creating the MoveFeetTransforms function",
          "Creating a FootLocked array of booleans",
          "Is the foot locked or unlocked logic",
          "Create the Swing Percent and unlock condition",
          "Unlocked logic and lock condition",
          "Include and test the MoveFeetTransforms function",
          "Making the unlocked foot snap back to the default pose position",
          "Creating the foot timing offset array",
          "Creating the PerFootCycle array",
          "Using the PerFootCycle instead of Master Cycle",
          "A basic interpolation for the swing phase",
          "Creating the foot prediction function",
          "Projecting the landing spot forward in the direction of velocity",
          "Scale the prediction time based on how long until the foot lands",
          "Change cycle speed based on the characters movement speed",
          "Creating the stride length variable, and calculating the cycle time in seconds",
          "Save the foot lift-off spot to a WorldLockedFootTransforms array",
          "Accurate interpolation between the lift-off to the landing spot, based on cycle",
          "Make the legs lift in an arc using a custom curve",
          "Make the lift height based on the movement speed",
          "Overview of the plan for foot traces",
          "A basic trace for every landing spot",
          "Random body motions and general improvements",
          "More advanced traces explanation and testing on a landscape",
          "Implementing more advanced traces"
        ],
        "Porting control rig to another character": [
          "Porting the procedural animation system to another character",
          "Changing variables for the new character"
        ],
        "Various ControlRig features and tips for procedural animation": [
          "Using controls to move the character",
          "FullBodyIK settings, and interpolating control targets",
          "Value Over Time to delay movements",
          "BasicIK node instead of FullBodyIK, when, where, how",
          "Finding the Primary and Secondary axis",
          "Automatically compute the pole vector",
          "Make a bone point in a specific direction",
          "Aim more bones at a target with various weighting and interpolation settings",
          "Randomize the target point",
          "Simulate character breathing with chest scale",
          "Combine with an idle animation and create a character class",
          "Make the character target a position in the actual game level",
          "Creating functions that can be used in any other ControlRig",
          "Create the RotateAroundPoint function, to rotate in RigSpace",
          "Incorporate the translation change when rotating around a point",
          "Create a function to rotate a single bone in place, in RigSpace"
        ],
        "Turn-in-place animation system": [
          "The challenge, the goal, and the starting point",
          "Saving the accumulated rotation",
          "Negate any rotation of the character to keep the same world rotation",
          "Make the spine always look in the correct direction",
          "Adding the solver and starting a rotation timer",
          "Compensate for pieces of the total rotation offset",
          "Applying the calculations to see the result on the character",
          "Offset the rotation timing of each foot",
          "Searching for issues and the next steps to improve",
          "Problem solving",
          "Weight shift towards the grounded leg",
          "Make the movement more natural and bouncy",
          "Bug fixing, finalizing, and looking to the future"
        ]
      },
      "requirements": [
        "No Unreal Engine skills or animation skills are required. This course takes you through every step, starting very slowly and gradually increasing in complexity until you fully master ControlRig for procedural and dynamic animations."
      ],
      "description": "In this course you will learn to use Control Rig in Unreal Engine 5, with a focus on creating procedural animation systems.\n\nThis course is suitable for complete beginners, all the way through to professional animators and experienced game developers. It begins very slowly with detailed explanations and instructions to take you through creating procedural animation systems, which gives us a chance to explore and become familiar with various features of Control Rig.\n\nAfter creating a procedural walk system, we take a general look at some useful features of Control Rig, and experiment with systems that allow you to create characters that interact with the environment and move realistically.\n\nAnd finally we will create a procedural turn in place animation system, including troubleshooting, tweaking, and working through the logic step by step.\n\nThe project file includes the completed versions of everything we create for Unreal Engine 5.2 and 5.3. This will be updated to include a 5.4 version when that version of the engine releases.\n\nThe techniques and methods explored are suitable for single player and multiplayer projects. The techniques used within Control Rig are also suitable for UEFN. This applies to the fully procedural sections and the specific functionalities we explore inside of Control Rig (at the time of writing animBP access is not available in UEFN, preventing a combination with keyframed animation - but the majority of the concepts will still work).\n\n\nThis information in this course is not available elsewhere, and is the result of many years of experimentation with Control Rig and procedural animation systems. My goal was to condense all of my experience with Control Rig into an easily digestible and understandable course, with explanations and diagrams at every step, so that you can learn a full mastery of how to use Control Rig for your own procedural and dynamic animations.\n\nI look forward to seeing you on the course, and for you to share your creations and ideas. I'm always available for a discussion of concepts/ideas/help with any project, even if your specific use-case isn't covered directly in this course.",
      "target_audience": [
        "Game developers looking to add procedural animations to their project.",
        "Animators who want to make their animations more dynamic and interactive.",
        "Anyone who is curious about procedural techniques and the future of real-time animation"
      ]
    },
    {
      "title": "The Complete Unity Indie Game Developer Course",
      "url": "https://www.udemy.com/course/the-complete-unity-indie-game-developer-course/",
      "bio": "Learn how to make games by creating a FULL top down RPG and publishing it to the world.",
      "objectives": [
        "Create a full game and publish it to the world",
        "Know how games are made and experience the process of making a full game",
        "All the skills to use Unity",
        "Game design philosophy"
      ],
      "course_content": {
        "Introduction": [
          "What will I learn in this course?"
        ],
        "Basics of Unity and Programming": [
          "Basic Unity Components",
          "Basic Datatypes",
          "C# IF Statement",
          "C# - for loop",
          "Basics of Object oriented programming"
        ],
        "Creating our player!": [
          "Player Movement",
          "Player Animations",
          "Player Animator",
          "Player Health System",
          "Health system",
          "Quiz 1 : Explained"
        ],
        "Combat!": [
          "Attacking: Part One",
          "Attacking: Part Two",
          "Attacking: Part Three",
          "Attacking: Part Four",
          "Attacking: Sword Polish",
          "Working in a team",
          "Quiz 2: Unity Collaborate Explained"
        ],
        "Enemy AI.": [
          "First Blood!",
          "Enemy Movement",
          "Taking Damage and more Crabs!",
          "Invincibility Frames!",
          "Dragon Animator",
          "Dragon logic: Part One",
          "Dragon logic: Part Two",
          "Dragon logic: Part Three"
        ],
        "Environment Creation.": [
          "Environment Prefabs",
          "Creating our First Level",
          "Potion Pickup",
          "Finishing up the second scene",
          "Fixing Enemy AI",
          "Particle Polish!"
        ],
        "Finishing Up!": [
          "Connecting our levels!",
          "Boss Animator and Script",
          "Boss Attack Pattern",
          "Loading Levels and Camera Follow",
          "Saving and Loading Game Data",
          "Finishing Up and Building the Game"
        ]
      },
      "requirements": [
        "You should have Unity installed",
        "A desire to learn game development"
      ],
      "description": "In this course we will create a full game from scratch in Unity.\nYou will learn about object oriented programming and have an overall better understanding of C#.\n\nWe will provide you with all the assets needed to create a full top down RPG game, feel free to use these assets in your own games.\nIn this course we will cover Animators, Physics, Scene Transitions, Saving and Loading, Enemy AI, Item Pickups, basically everything you would find in an RPG game.\n\nWe will also be talking about good game design practices, and giving you insight about the industry and where you can publish your games.",
      "target_audience": [
        "Anyone who wants to learn how to make games",
        "Indie game developers",
        "Game Developers",
        "Game enthusiasts",
        "Unity developers"
      ]
    },
    {
      "title": "The Complete Guide To Creating Games In Unity Game Engine",
      "url": "https://www.udemy.com/course/the-complete-guide-to-creating-games-in-unity-game-engine/",
      "bio": "Game Development Made Easy. Learn C# And How To Create 2D & 3D Games In Unity",
      "objectives": [
        "Learn To Code in C#",
        "Develop strong and transferrable problem solving skills",
        "Learn good coding and design patterns",
        "Get experience using Unity 2017",
        "Understand the capabilities of game development using Unity",
        "Gain an excellent knowledge of game creation",
        "Learn how object oriented programming works in practice",
        "Create Stunning 2D and 3D Games"
      ],
      "course_content": {
        "Introduction": [
          "Introduction - Watch This Before You Buy The Course Or If You Already Bought",
          "Downloading Unity",
          "Installing Unity And Taking A Look At Its Interface",
          "Awesome Bomber Man - Your First Game"
        ],
        "Learn To Code In C#": [
          "Introduction To Variables",
          "Operations With Variables",
          "Functions",
          "Conditional Statements",
          "Loops",
          "Arrays",
          "Arrays And Functions",
          "Classes And Objects",
          "Constructors",
          "Passing Values And References To Function Parameters",
          "Visibility Modifiers",
          "Inheritance",
          "Monobehaviour",
          "Static Variables And Functions",
          "Coroutines",
          "Delegates",
          "Enumerations",
          "Arrays And Lists"
        ],
        "Awesome Platformer (Mario Clone)": [
          "Awesome Platformer Game Preview",
          "Importing Assets And Creating Player Animations",
          "Moving Our Player",
          "Animating Players Movement And Changing His Direction",
          "Detecting Collisions In Our Code",
          "Making The Player Jump",
          "Making The Players Movement Smoother",
          "Snail Enemy",
          "Stunning The Snail Enemy",
          "Beetle Enemy",
          "Player Shoot",
          "Kill The Enemy With The Bullet",
          "Bird Enemy",
          "Bird Attack",
          "Spider Enemy",
          "Frog Enemy",
          "Fixing Frog Animations",
          "Creating Our Level",
          "Camera Follow Script",
          "Unity's UI System",
          "ScoreScript",
          "Player Damage Script",
          "Bonus Block",
          "Boss Script",
          "Creating Our Main Menu"
        ],
        "Awesome Road Runner": [
          "Awesome Road Runner Game Preview",
          "Importing Assets And Preparing Tile Elements",
          "Preparing Map Generator",
          "Map Generator Part 1",
          "Map Generator Part 2",
          "MapGenerator Part 3",
          "Moving The Camera",
          "Tiles Of Screen",
          "Preparing Our Player",
          "Player Controller Script",
          "Preparing Our Obstacles",
          "Obstacle Holder",
          "Spawning Obstacles In Our Game",
          "Colliding With Obstacles And Collectable Items",
          "SoundManager",
          "Creating Our Main Menu",
          "MainMenu Controller",
          "GameData And Game Manager",
          "Gameplay UI",
          "Finishing GameplayController Script",
          "Wrapping Up Our Game"
        ],
        "Awesome Zombie Crasher": [
          "Awesome Zombie Crasher Game Preview",
          "Importing Assets And Organizing The Project",
          "Materials",
          "Creating Our Level And BaseController Script",
          "PlayerController Script",
          "Smooth Follow",
          "GroundBlock Script",
          "Adding The Bullet And Making Our Tank Shoot",
          "Introduction To Particle Effects",
          "Preparing Our Obstacles",
          "Spawning Obstacles In Our Game",
          "Obstacle Scripts",
          "Creating Gameplay UI",
          "Shoot Button",
          "Adding Finishing Touches",
          "Creating Our Main Menu"
        ],
        "Awesome Maze Warrior": [
          "Awesome Maze Warrior Game Preview",
          "Importing Assets And Creating Player Animations",
          "Player Script",
          "Player Script Part 2",
          "Enemy Goblin",
          "Enemy Script",
          "Detecting And Dealing Damage",
          "GameplayController",
          "Adding Coins In Our Game",
          "Gameover Panel And Main Menu Scene",
          "Creating Levels"
        ],
        "Animations In Unity": [
          "Importing Assets And Creating Animations",
          "Animator Controller",
          "Animation Transitions",
          "Multiple Transition Conditions",
          "Jump Animation"
        ],
        "Lightning And Mood In Unity": [
          "Lightning And Mood In Unity Preview",
          "Directional Lights And Skyboxes",
          "Creating Mood With Point Lights",
          "Spot Lights",
          "Shadow Effects",
          "Baking Lights"
        ],
        "Updates - Everything New In Unity + Tips And Tricks": [
          "How To Change The Screen Size In Game Tab"
        ]
      },
      "requirements": [
        "Must have a Mac or PC capable of running Unity3D"
      ],
      "description": "Enroll Now And Become A Professional Game Developer!\nThis is the most comprehensive online course that will take you from beginner to creating stunning 2D & 3D games in Unity Game Engine!\nThe course is completely project based, and we are going to create 5 games from scratch using Unity Game Engine.\nWe will start with simple things so you will be comfortable even if you are using Unity for the first time. This also applies to your coding skills, if you did not code before, don't worry, we will deeply cover C# from basic to advanced features.\nI took advantage of my 3 years of online teaching experience and have structured this course in a professional way. I had beginners and intermediate game developers on my mind when I structured this course, so it will not only give you all the information you need as a beginner, but it will also teach you advanced game development techniques if you already know how to make games. Every section in the course starts with basic information about the specific topic, and slowly progresses in difficulty as we finish every video.\nYou will also benefit from my super fast response if you have any issue that you are stuck with(I check Udemy forums every day if someone posts a question). Oh and all the students taking the course will also be there to help you!\nSome of the things you will learn in the course:\nUnity's interface\nImporting Assets\nOrganizing The Project\nBasic, Intermediate And Advanced C# Programming\nBasic AI(Artificial Intelligence)\nAdvanced AI(Artificial Intelligence)\nBasic And Advanced Character Animations\nSound FX And Music\nBasic, Intermediate And Advanced Particle FX\nMelee Battle Systems\nBoss Fights\nProcedural Level Generation\nPooling Techniques\nLearn How To Use Unity's UI System\nCreate And Animate Menus\nCreate Animation Trigger Events With Mecanim\nSave And Load Your Game Data\nThat And Much More Is Awaiting You In This Course\nIf You ever had an idea for an awesome game, then enroll in this course and learn the tools that you need to develop Your next hit game!!!\nWhat Is Your Risk By Taking This Course?\nNothing!! If you are not satisfied with the course, I promise I will give you a full refund(within 30 days of purchase) of your money NO questions asked!!\nEnroll Now!! You Will Not Be Disappointed!",
      "target_audience": [
        "Anyone Who Wants To Learn Game Development But Does Not Know Where To Start",
        "Beginners with no coding experience",
        "Programmers who want to learn game development",
        "Experienced Game Developers"
      ]
    },
    {
      "title": "Learn To Create An RPG Game In Unity",
      "url": "https://www.udemy.com/course/unity2drpg/",
      "bio": "Game development made easy. Learn C# using Unity and create your very own classic RPG!",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Understand the capabilities of 2D development in Unity.",
        "Develop strong and transferrable problem solving skills.",
        "Gain an understanding of the game development process.",
        "Learn how object oriented programming works in practice."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Assets"
        ],
        "Basics": [
          "Setting up Unity",
          "Quick Guide to Unity Layout",
          "Importing images & setting to correct values"
        ],
        "The Player": [
          "Chopping up player spritesheet",
          "Sorting Layers & Orders",
          "Giving Player Physics",
          "Creating a Script & understanding variables",
          "Moving the Player through scripting",
          "Animating the Player",
          "Setting up the Player Movement Animations",
          "Facing the right direction",
          "Walking into objects & preventing spinning"
        ],
        "Switching Scenes": [
          "Switching Scenes",
          "Preventing duplicate players",
          "Starting at the correct point",
          "Combining Area changers",
          "Making sure the player is always in scene"
        ],
        "Camera & Maps": [
          "Controlling the camera",
          "Creating a Tileset",
          "Creating a Tile Map",
          "CHALLENGE - Create a simple town area",
          "Keeping Camera inside the map",
          "Hiding the map edges",
          "Keeping the Player inside the map",
          "Adding Screen Between scenes",
          "Fading in & out",
          "Calling the Fade",
          "Loading Essential Objects"
        ],
        "Dialog System": [
          "Laying out Dialog Box",
          "Creating Dialog Manager & Reading Text",
          "Reading multiple Lines",
          "Activating & switching lines",
          "Stopping the player moving",
          "Showing names of characters",
          "Hiding Name-bar for signs"
        ],
        "Levelling Up": [
          "Player Stats",
          "Adding a Levelling System",
          "Testing Levelling",
          "Gaining stats on Level up",
          "Creating a Game Manager"
        ],
        "In-Game Menu": [
          "Laying Out the menu",
          "Laying Out Character Info",
          "Opening & Closing the menu",
          "Stop Player Movement",
          "Setting up Stat references",
          "Updating the Stats",
          "Navigating the Menu",
          "CHALLENGE - Layout the Stats Window",
          "Opening the Stats Window",
          "Filling out the Status information"
        ],
        "Inventory": [
          "Making Items",
          "Layout Item Window",
          "Storing our Inventory & Getting Item Details",
          "Showing the Items in menu",
          "Sorting Items & removing spaces",
          "Selecting Items",
          "Add & Remove Items",
          "Using Discard Button",
          "Selecting Character To Use Item",
          "Using Items",
          "Picking Up Items"
        ],
        "Money & Shops": [
          "CHALLENGE - Create shop scene using inner tileset",
          "Getting Gold",
          "Creating the Shop Menu",
          "Creating a Shopkeeper",
          "Showing Items to Buy & Sell",
          "Selecting Items to Buy & Sell",
          "Buying & Selling"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2018 or newer"
      ],
      "description": "Learn how to create and program your very own classic RPG game using Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\nFull top-down character movement\nCreating tile-based maps in Unity\nA full dialog system\nInventory creation & management\nStat-tracking & leveling up\nShop system\nTurn-based battles with enemies\nBoss Battles\nQuest Management\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own 2D games.",
        "People who want to create and publish their own games.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industy.",
        "Competent and confident with using a computer."
      ]
    },
    {
      "title": "C# For Beginners: Learn C# Programming From Scratch",
      "url": "https://www.udemy.com/course/c-for-beginners-learn-c-programming-from-scratch/",
      "bio": "Learn to code with C# : Learn the most popular game development language C# Fundamentals with Visual Studio and examples",
      "objectives": [
        "C# (pronounced see-sharp) is a general-purpose, object-oriented programming language. It was designed as a multi-paradigm programming language by Microsoft.",
        "Thanks to the .NET framework, C# has many advantages over C++. C# is a refined and modernized version of C++. C++ was developed to bring object-orientation to C",
        "Encapsulation can be used in C# to hide data and program behavior from users. With encapsulation, you can group properties, methods, and other members .",
        "C# is a general-purpose programming language that you can use to build a wide range of programs and applications, such as web applications, Windows applications",
        "As is true for many skills, you can learn C# by taking Udemy courses, reading documentation, and practicing coding hands-on.",
        "Learn C# from scratch",
        "Learn the fundamentals of C# and .NET Framework",
        "Work with Primitive Types and Expressions",
        "Work with classes, structs, arrays",
        "Learn the difference between value types and reference types",
        "Use Arrays and Lists",
        "Work with Date and Time",
        "Debug C# applications",
        "c sharp programming",
        "c sharp for beginners",
        "c sharp from scratch",
        "Develop unity 2D or unity 3D games ( unity c# )"
      ],
      "course_content": {
        "Introduction To The C# Course": [
          "What We Will Learn?",
          "FAQ regarding C#"
        ],
        "Introduction to C#": [
          "What is C#?"
        ],
        "Setting Up the Environment": [
          "What is Visual Studio ?",
          "Installing Visual Studio Community Version ( Free )"
        ],
        "Console Environment": [
          "What is Console App?",
          "Functions in Console Enviroment",
          "Practice The Write and Read Functions"
        ],
        "Variables": [
          "Why Variables Are Necessary?",
          "Quiz"
        ],
        "Primitive Types and Operators": [
          "String Type in C#",
          "Practicing String Type in C sharp",
          "Double and Float Types",
          "Char Type",
          "Bool Type",
          "Constant Keyword",
          "Integer Type",
          "Challenge"
        ],
        "Control Flow in C #": [
          "If, Else, Else If Statements",
          "Switch Statement in C#",
          "While, Do While Statements in C sharp",
          "\"For\" Statement",
          "Foreach Statement",
          "Challenge 2 - Summing Numbers Until Zero Comes"
        ],
        "Array and Lists in c sharp programming": [
          "Arrays unity c#",
          "Lists c# unity"
        ],
        "Non-Primitive Types in C#": [
          "Classes",
          "Quiz"
        ],
        "Functions": [
          "Function in C# ( C sharp )"
        ]
      },
      "requirements": [
        "No prior knowledge of C# ( C sharp ) is required",
        "A Windows or Mac for installing all the free software and tools needed to practice",
        "Desire to learn C#",
        "Nothing else! It’s just you, your computer and your ambition to get started today",
        "LIFETIME ACCESS, course updates, new content, anytime, anywhere, on any device"
      ],
      "description": "Hello there,\nWelcome to \"C# For Beginners: Learn C# From Scratch\" course.\nLearn to code with C# : Learn the most popular game development language C# Fundamentals with Visual Studio and examples.\n\nWhether you’re using C# in conjunction with Xamarin Forms to build cross-platform apps, or designing a new video game in Unity with C#, Udemy has a course for you. Udemy hosts top-rated courses on everything from the fundamentals of C# programming to more advanced topics like databases and asynchronous programming.\n\nEven though C# is a language that’s relatively easy to learn and maintain, it isn’t just for beginners. Its scalability and large support community make C# the language of choice for Microsoft app developers and video game developers working with the Unity Engine. Like C++ and Java, C# is a high-level object-oriented programming language. It is generally more efficient than Java and has useful features such as operator overloading. C# is based on C++ but has several advantages over this older language: it is type-safe, more comprehensively object-oriented, and the syntax has been simplified in several important ways. Most importantly, C# interoperates exceptionally well with other languages on the .NET platform. For this reason, C# is a better choice for building applications for .NET.\nWhat is C# ?\nC# (pronounced see-sharp) is a general-purpose, object-oriented programming language. It was designed as a multi-paradigm programming language by Microsoft in around 2000 as part of its .NET initiative. The .NET framework and .NET applications are multi-platform applications that you can use with programming languages such as C++, C#, Visual Basic, and COBOL. C# is open-source and was designed to be simple yet modern, flexible yet powerful and versatile yet easy to learn and program with. Many programming languages in the past were designed for specific purposes. C# was developed with business and enterprise needs in mind. By providing functionality to support modern-day software development such as web applications, mobile, and response app needs, C# supports many features of modern-day programming languages. That includes generics, var types.\n\nWhat are the advantages of c# over C++ ?\nThanks to the .NET framework, C# has many advantages over C++. C# is a refined and modernized version of C++. C++ was developed to bring object-orientation to C, an older but widely used language, and C++ became the de-facto language for building applications for Windows as well as infrastructure and low-level applications. Visual Basic was for business applications. What C# does is combine the rapid development capabilities of VB with the power of C++. C# also has many new data types, type-safety, to ensure you do not unknowingly reuse initialized variables. It uses a simplified syntax, a huge improvement over the complex coding often required in C++. C# also removes memory management issues thanks to .NET’s garbage collection scheme. You do not have to reference items for garbage collection; the system can reclaim that memory as required.\nWhy use encapsulation in C# ?\nEncapsulation can be used in C# to hide data and program behavior from users. With encapsulation, you can group properties, methods, and other members so that they are treated as a single object. It is a means to prevent the user of a given class from manipulating program objects in ways that were not intended by the designer or developer. Encapsulation hides how a program operates without affecting how it works while still allowing users to service requests for functionality and add or modify internal data or methods to meet changing needs. For example, suppose you have an object called “Patient” that contains patient-related data. In that case, you can use encapsulation to provision patient-specific data to those who need it without exposing all patient data. In addition to information hiding, you can use encapsulation in C# to improve your code's reusability.\n\nWhat is C# used for?\nC# is a general-purpose programming language that you can use to build a wide range of programs and applications, such as web applications, Windows applications and game development. In web application development, you can build dynamic websites and apps using .NET or another open-source platform of your choice. Also, since Microsoft created C# for Microsoft, C# is a popular language for building Windows applications. There are rich resources and a vibrant C# community that can support and documentation for applications and programs specific to Microsoft platform architectures, making it easier than ever to develop applications in this space. Finally, C# is a popular language to use in game-building, especially with Unity, a game engine that runs on C++ and C#.\nWhat is a constructor? What is a destructor?\nTo understand constructors and destructors, we need to understand methods. A method is a block of code that contains a series of statements. Programs run by executing methods. A constructor is a special method of a class that is automatically called whenever an instance of a given class is created. A constructor contains the instructions that execute when an object is created. Developers use it to assign specific initial values to the data members of the same class. In C#, you will get a compile-time error if you try to read from an uninitialized variable. You must first initialize your variables by giving them an initial value, which is what the constructor does. On the other hand, destructors are methods used to destroy instances of a class when they are no longer needed. Destructors are called implicitly by the garbage collector in .NET\nHow do I learn C#?\nAs is true for many skills, you can learn C# by taking Udemy courses, reading documentation, and practicing coding hands-on. There are many resources available for all of the above, including real-time compiler applications that will show you the output of your code as you type it. However, it is best to plan ahead, and you should have an outline of what you need to learn before beginning your journey. The first thing to learn about is what C# is, how and where it is used, and why it was developed. From there, you can learn about data types, variables, keywords, and functions. Once you’ve grasped the basics, you can move on to learning about conditional tests and operators, functions, arguments, object orientation, arrays, strings, classes, methods, structs, debugging, and exception handling.\n\nIf all you want to learn is C#, our new beginner course is the perfect place for you to start.\nWe designed C# .NET (pronounced C- see  #-sharp ) course to give you everything you need to become productive with C#. C# is a cross-platform language that can be used to build a variety of applications. With C#, you can build mobile apps (for Windows, Android, and iOS), games, web sites and desktop applications.  C# is also a widely used and the most popular game development language among Unity developers.\nLearn to code with C# today!\nMaybe you’re a college kid in the middle of achieving your master's in computer science or maybe you’re a coder for a major Cloud hosting firm constantly looking to improve your C# skills.  Whatever the case, learning game development extends far beyond game programming, and nowadays more and more companies are looking to hire bright coders with a background in C#.\nThat`s why you are at a great place to start with C#.\nAll my students will have a chance to learn not only the whats but also learn the whys and hows.\nWhat you will learn?\nC# Programming and Features of C#\nVisual Studio IDE\nConsole Application\nVariables\nPrimitive Types and Non-Primitive Types\nFlow Control Expressions\nArrays and Lists\nError Handling and Debugging\nFunctions\nReading File\nWriting to File\nDateTime\nc#\nc# .net\nunity c#\nc# unity\nc sharp\nc sharp programming\nselenium webdriver with c sharp\nselenium with c sharp\nc sharp for beginners\nselenium c sharp\nc sharp from scratch\nunity\nunity 2d\nunity 3d\nc sharp\n\n\nWhy would you want to take this course?\nOur answer is simple: The quality of teaching.\nWhen you enroll, you will feel the OAK Academy`s seasoned developers' expertise.\nNo prior knowledge is needed!\nIt doesn't need any prior knowledge to learn it and the C# is easy to understand for beginners.\nThis course starts with very basics. First, you will learn how to install the tools, some terminology. Then the show will start and you will learn everything with hands-on practices.  I'll also teach you the best practices and shortcuts.\nStep-by-Step Way, Simple and Easy With Exercises\nBy the end of the course, you’ll have a firm understanding of the C# language and valuable insights on how things work under the hood and you'll also be very confident in the basics of coding and game development, and hungry to learn more. The good news is since the Free and popular tools are used you don’t need to buy any tool or application.\nVideo and Audio Production Quality\nAll our videos are created/produced as high-quality video and audio to provide you the best learning experience.\nYou will be,\nSeeing clearly\nHearing clearly\nMoving through the course without distractions\nYou'll also get:\nLifetime Access to The Course\nFast & Friendly Support in the Q&A section\nUdemy Certificate of Completion Ready for Download\nDive in now!\nWe offer full support, answering any questions.\nSee you in the C# For Beginners: Learn C# Programming From Scratch course!",
      "target_audience": [
        "Newbies or students looking for a refresher on the basics of C# and .NET",
        "People who wants to learn C#",
        "People who wants to read and write C# code",
        "People who wants to learn Visual Studio",
        "People who want to learn game development & design",
        "People who wants to understand the Unity better",
        "People who wants to develop unity 2D or unity 3D games",
        "People who wants develop their own game"
      ]
    },
    {
      "title": "Unity 3D and C# - The Complete RPG Guide for Beginners",
      "url": "https://www.udemy.com/course/the-complete-unity-guide-3d-beginner-to-rpg-game-dev-in-c/",
      "bio": "Build 3 games & learn Unity practical way! Start with fundamentals and finish with an RPG game. Using Unity 2020 and C#",
      "objectives": [
        "The practical approach by creating cool games",
        "Fundamentals and core concepts of game development",
        "Create a RPG game with tons of features",
        "Math explanations behind the code."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How to Resolve Issues"
        ],
        "Project 1 - Evade The Cube": [
          "Installing Unity",
          "Getting More Familiar with Unity",
          "Parenting Gameobjects",
          "About the camera",
          "Components",
          "Project Preview",
          "Create Player",
          "Material and Light",
          "Lighting",
          "First Coding",
          "Update & fps",
          "Init lifecycle function",
          "Update lifecycle functions",
          "Stats and Enemy Object",
          "Get reference to own component",
          "Get Access To other component",
          "Get component through editor",
          "Problems with Awake",
          "Get Horizontal and Vertical axis",
          "Apply Movement",
          "Fix movement speed",
          "Scale plane",
          "Add Walls",
          "Restrict movement of the player",
          "Fix Restrict Movement",
          "Enemy Movement",
          "Prefabs",
          "Create Gameobject from the script",
          "Random X Position",
          "Destroy Game Object",
          "Destroy enemy on collision",
          "Receive damage on hit",
          "Decrease health of the player",
          "Create Canvas HUD",
          "Provide value to health text",
          "Catch Enemy",
          "Create catch enemy from script",
          "Methods Refactor",
          "Change behaviour of catcher",
          "Restart the game",
          "First Project Assignment",
          "First Project Solution"
        ],
        "Project 2 - Platformer Chaser": [
          "Project Preview",
          "Init Second Project",
          "Change position of the player",
          "Move with translate",
          "Normalize Vector",
          "AI - Normalize",
          "Changing the camera",
          "Adds rigid body component",
          "Get RB in script",
          "Rigidbody Explanations",
          "Elevators",
          "Elevators Movement",
          "Wait coroutine",
          "Coroutine in Start",
          "Elevator Refactor",
          "On Trigger Enter",
          "Tags",
          "Change parent of player",
          "Elevator offset",
          "Apply elevator offset",
          "Add rigidbody to elevator",
          "Camera Position",
          "From To Rotation, Include Links For Math and Quaternions",
          "Rotate Towards",
          "Look Backward direction",
          "AI Dot Product",
          "Rotation Refactor",
          "Add Enemy",
          "Enemy follow target",
          "Improve following of player",
          "Spawn Manager",
          "Destroy and Spawn new enemy",
          "Spawn Enemy waves",
          "Powerup",
          "Get speed from powerup",
          "Powerup Coroutines",
          "Add more power to player",
          "Create circle game object",
          "Draw circle method",
          "Draw complete circle",
          "AI - Draw Circle",
          "Add circle to enemy",
          "Add Push range to enemy",
          "Game Manager and Canvas",
          "Spawn enemy on button click",
          "Restart the game + Disable canvas",
          "On Game Start",
          "Finish Project",
          "Project Assignment",
          "Project Solution"
        ],
        "Project 3 - RPG Game": [
          "Project Intro",
          "Section Intro",
          "Project Setup",
          "Learn by inspecting other projects",
          "Simple movement",
          "Adds Rigidbody",
          "Add rotation",
          "Explain Rotate Towards",
          "Follow Camera",
          "Camera Rotation with Player",
          "Rotate Camera Refactor",
          "AI - Lerp",
          "AI - Rest of rotation",
          "AI - Lerp Additional",
          "Move in direction of camera",
          "AI - Move in direction of the camera",
          "Revert to normal movement"
        ],
        "Cinemachine and Character Model": [
          "Section Introduction",
          "Cinemachine",
          "Move camera while holding mouse",
          "Input Manager",
          "Rotate in direction of the camera",
          "Move in direction of the camera",
          "Add Character controller",
          "Add Character model",
          "Character controller properties",
          "Add player input",
          "Refactor Move Input"
        ],
        "Animator": [
          "Section Introduction",
          "Animator Start",
          "New Anim Controller",
          "Change Parameter from Script",
          "Controlling forward speed",
          "Control Acceleration",
          "Applying rotation",
          "AI Code Debugging",
          "AI Rotations",
          "Smooth Rotation",
          "Oposite direction rotation",
          "Change animator settings",
          "Camera controller refactor",
          "Animator Blend Tree",
          "Small Animator Fix",
          "Add gravity"
        ],
        "Add Enemies": [
          "Section Introduction",
          "Performance tips",
          "Create bandit",
          "Player Instance",
          "Detection Range",
          "Draw Solid Arc",
          "AI Draw solid arc",
          "Dot product to detect player",
          "AI Dot Product to detect player"
        ],
        "Navmesh and AI": [
          "Section Introduction",
          "Get player position",
          "Nav Mesh Agent",
          "About the navmesh",
          "About navmesh part 2",
          "Stop the pursuit"
        ],
        "Enemy Animations": [
          "Section Introduction",
          "Go back to original position",
          "In Pursuit Animation Parameter",
          "Near base parameter",
          "Fix Line Endings",
          "Add Enemy animations",
          "Enemy Controller",
          "Move mesh agent into enemy controller",
          "Player Scanner"
        ],
        "Attack System": [
          "Section Introduction",
          "Setup attacking distance",
          "Attack parameter",
          "Attack animation",
          "Refactoring of enemy controller",
          "Sword Stance",
          "Fix Attack distance",
          "Go back to origin rotation",
          "Attack Input",
          "Improving Attack Input",
          "Melee Attack Animator",
          "Damageable Script",
          "Bandit Behaviour Refactor",
          "Fixing initial walk animation"
        ]
      },
      "requirements": [
        "Minimal C# or other OOP language knowledge"
      ],
      "description": "What is Unity?\nUnity is a cross-platform engine. The Unity editor is supported on Windows, macOS, and the Linux platform, while the engine itself currently supports building games for more than 25 different platforms, including mobile, desktop, consoles, and virtual reality.\n\n\nWhat are we going to build?\nThe course covers the development of 3 games. Starting with basic concepts explained in a simple game and finishing with more advanced concepts by creating an RPG sandboxed game. The course covers a full explanation of programming methods and related mathematics concepts.\nThe course starts with easy concepts, targets beginner developers or developers new to Unity, and then slowly progresses into more complex topics.\n\n\nProject 1 (Evade the cubes)\nThe first part of the course covers basic concepts. Students will get familiar with the Unity editor and environment.\nBase game mechanics\nOrientation in 3D space\nPositions of game objects + Vectors\nSimple movement system\nScore system\nHealth system\nMaterials & prefabs\nUI & Canvas\n\n\nProject 2 (Platform Survival)\nThe second part of the course is focused on the physical system.\nRigidbodies\nPhysic system\nMovement + rotations\nFollow camera\nCoroutines\nAdding forces\nPowerups\nEnemies\nFollowing targets\n\n\nProject 3 (Rpg Adventure)\nThe last part of the course covers more advanced concepts and the development of sandboxed RPG games.\nCharacter controller\nCinemachine\n3rd person camera and full movement\nAnimations\n3rd party packages & models\nFight system + Combos\nEnemies + Detection system\nQuest System\nLevel System\nHealth System\nDialog system\nRespawns\nInventory System\nWeapon equipping\nTerrain design",
      "target_audience": [
        "People looking for the practical game development guide",
        "Beginner developers eager to start with game development",
        "Experienced developers discovering new development opportunities"
      ]
    },
    {
      "title": "Unity 2020 URP Make a juicy 2d Shooter prototype",
      "url": "https://www.udemy.com/course/unity-2020-urp-how-to-make-a-2d-roguelike-shooter/",
      "bio": "Create a fun shooting mechanic, simple enemy AI and juicy gameplay by adding visual and sound feedback",
      "objectives": [
        "Unity 2020 in 2D",
        "C# programming",
        "Game Development",
        "Game Design"
      ],
      "course_content": {
        "Introduction": [
          "Course content",
          "Make sure that you use Unity 2020!",
          "Project setup",
          "Using resources and getting help"
        ],
        "Player Character": [
          "Intro - Preparing the project",
          "Camera Setup - Ghosting fix",
          "Preparing sprites for pixel graphics",
          "Preparing sprites - splitting tilemap",
          "Creating player avatar",
          "macOS users Visual Studio tip",
          "Getting input",
          "Basic Player Movement",
          "Movement Data Scriptable object",
          "Better player movement",
          "Better player movement fix",
          "Adding player animations",
          "Playing animations",
          "Getting pointer input",
          "Making player look at pointer",
          "Adding step audio",
          "Project files so far"
        ],
        "Simple Map": [
          "Tilemap setup",
          "Creating floor tiles",
          "Sprite sorting order",
          "Creating walls",
          "Adding collisions",
          "Adding cinemachine camera to follow player",
          "Fixing 2D light",
          "Unity 2021.2+ Point light is now Spot light",
          "Adding Torches",
          "Adding shadows",
          "Pixel perfect camera",
          "Project files so far"
        ],
        "Shooting mechanic": [
          "Preparing weapon sprite",
          "Aiming our weapon through script",
          "Rendering the weapon",
          "Fixing weapon flip logic",
          "Preparing Weapon script",
          "Using AgentWeapon script to shoot",
          "Finishing Weapon script P1",
          "Finishing Weapon script P2",
          "Weapon Data Scriptable Object",
          "Creating bullet prefab",
          "Bullet collisions and BulletDataSO",
          "Regular Bullet script",
          "BulletDataSO",
          "Spawning a bullet",
          "Detecting bullet collision",
          "Shoot sound effect",
          "Changing cursor icon to crosshair",
          "Project files so far"
        ],
        "Enemy setup": [
          "Preparing enemy gameobject",
          "Shooting the enemy",
          "Enemy class and IHittable interface",
          "EnemyData",
          "Enemy Audio",
          "EnemyAI Introduction",
          "EnemyBrain",
          "State Machine architecture",
          "AI Action, Transition, Decision and State classes",
          "Adding AI structure to the Enemy object",
          "Distance decision",
          "ChaseState and IdleState",
          "Finishing the Attack state",
          "Fixing rendering issues - Transparency Sort Mode",
          "Enemy Attack player logic",
          "Adding IHittable to player",
          "FIx - Weapon Damage",
          "Project files so far"
        ],
        "Adding Juiciness": [
          "What is juiciness?",
          "Feedback architecture setup",
          "Weapon feedback - muzzle flash",
          "Weapon Flash light Feedback",
          "Weapon Shake Feedback",
          "Cinemachine Camera shake feedback",
          "Bullet impact - prefabs",
          "Implementing Bullet impact feedback",
          "FIX - Bullet Impact effect spawning away from the wall",
          "Minor fixes",
          "Enemy Feedback Hit - introduction",
          "Unity 2020.2 Shader Graph Changes",
          "Solid Color shader Unity 2020.2",
          "Fixing Solid Color Shader Unity 2020.2",
          "Dissolve shader Unity 2020.2",
          "Improving Enemy Death Feedback",
          "PostProcessing",
          "Fixing bullet issues",
          "Adding Time Freeze feedback",
          "Player Death Animation",
          "Analyzing game testers feedback",
          "Adding knockback to enemies",
          "Bullet shell generator - object pool",
          "Bullet shell generator - implementation",
          "Background music",
          "Project files so far"
        ],
        "UI": [
          "Creating UI layout",
          "Creating health UI",
          "Creating bullet UI",
          "Implementing health ui to our game",
          "Implementing bullet ui to our game",
          "Simple restart menu",
          "Project files so far"
        ],
        "Spawning enemies": [
          "Creating a spawner class",
          "Adding Line of sight to Enemy AI",
          "Project files so far"
        ],
        "Enemy drop ammo and health": [
          "Preparing resource scripts",
          "Item prefabs",
          "ItemDropper",
          "Making Enemy drop item",
          "Picking up items",
          "Project files so far"
        ],
        "FIXES": [
          "FIX 1 - Adding Player backward movement animation",
          "Fix 2 - Building Standalone version"
        ]
      },
      "requirements": [
        "Know how to use Unity at a basic/intermediate level.",
        "C# intermediate level"
      ],
      "description": "UPDATE:\nIn this course we tackle some intermediate topics like AI and we code it in a way that you can reuse it - which also can be a bit more difficult for beginners. The course is about creating the 2d shooting mechanic and polishing it with multiple special effects for it to be fun to play. We will create a simple AI system for the enemy using FSM, create custom Shaders, and explore why it is important for others to playtest your games and give you feedback.\nCourse should work with changes done to Shader Graph in version Unity 2020.\n\n\nUPDATE 2:\nFull project files in zip archive added to each section at the end.\nEach video where we write some code now has a link to scripts on github.\nIntroduction:\nLet's make a 2d top-down shooter in Unity 2020 using universal Rendering Pipeline and focusing on juiciness of the gameplay!\nIn this course beside implementing a standard game mechanics like shooting, picking up health/ammo and enemy AI we will focus our attention on adding visual and audio details into our game. URP will helps us a lot with its 2D lights system and the Shader Graph Editor which makes creating shaders (how game graphic is rendered) really easy.\nWhile it is important to have bug free game mechanics that fits our game genre we also want to make our game stand out. Our goal is to make the game fun to the players and it is achieved only by balancing our game and making sure that our player knows exactly what is going on in the game. In this course we will focus on the latter.\nFeedback is the main path that we as game designers have to communicate to the player what is going on inside the game. To make sure that our player feels like his / her actions influence the game world (Agency) we will make sure to give every action appropriate visual and audio queue. An example would be that shooting will cause the screen to shake, enemies on being hit flash and are knocked back, bullet that hits a wall will produce ricochet sound and a cloud of dust - in summary the player will hopefully have fun playing our game.\nWe will implement custom shaders, animations, tweens (animations using code - DoTween asset and inbuilt Coroutins), audio effects and light effects. in addition we will stricture the project in a way that you can easily balance the game by exposing important settings/values using ScriptableObjects.\nTo create the project we will utilize UnityEvents to make sure that we can easily add new actions to the events happening in the game from Unity inspector instead of having to modify out code. I will do my best to show you how to write object oriented, clean code so that you can easily understand it.\nI encourage you to check out the free video about the outline of the course to learn more.\nSee you in the course!\n-Peter from Sunny Valley Studio",
      "target_audience": [
        "Intermediate Unity developers",
        "Intermediate Game Developers"
      ]
    },
    {
      "title": "Roblox for Beginners: Learn to Script Your Very Own Games!",
      "url": "https://www.udemy.com/course/roblox-for-beginners-learn-to-script-your-very-own-games/",
      "bio": "Learn the basics of Roblox scripting to start your journey to become a fully fledged game developer on Roblox!",
      "objectives": [
        "Enough scripting knowledge to make your own Roblox games!",
        "How scripters set up Roblox Studio.",
        "Good scripting standards that professional scripters use.",
        "A fun guide through all the essential, beginner scripting concepts.",
        "You'll learn how to read the Roblox Wiki, which is really important for game developers."
      ],
      "course_content": {
        "Setting Up Roblox Studio": [
          "What We're Learning!",
          "Menus for Scripting",
          "What Do the Explorer Folders Mean?"
        ],
        "Scripting Guide": [
          "Use Variables to Organize Your Script",
          "Create, Clone and Destroy From a Script",
          "Customize From a Script",
          "How to Set Up Event Listeners",
          "Use Functions to Shorten Your Script",
          "If Statements Complete Guide",
          "While Loop Uses",
          "Numeric and Generic For Loops",
          "How to Read the Roblox Wiki"
        ]
      },
      "requirements": [
        "Access to a computer with internet connection"
      ],
      "description": "Created for You\nThis guide is designed for everyone, including you! The videos are short, packed with knowledge and have MEMES in them so it'll be a blast to watch for anybody! A course like this is truly nothing you've ever seen before and I really recommend you give it a try if you want to create your own Roblox games!\nYou've probably always wanted to make your own game. If that's true then this course will really help you because scripting is needed for every game. I really want you to turn your game development dreams into a reality because that's my dream too!\nEnjoy Learning\nI've been scripting and making games for many years. I've learned how to script fluently through those years so I can teach people effectively. This course took a very long time to create because I wanted to make the learning experience fun! The course is finally available and I hope you're excited to learn!\nLearning Goals\nIn this course you'll learn how to:\nSet up Roblox Studio for scripting\nUnderstand what the folders in the explorer are used for\nUse variables to organize your script\nCreate, clone and destroy from a script\nCustomize a part and turn it into a masterpiece\nUse events to create explosive lava\nUse if statements to check things\nCreate your own custom functions\nWhile loops and how to break a loop\nBoth types of for loops\nHow to read the wiki\nAt the end of the course, you're going to get a cool project! The project combines everything you learn from this course to create your very own game!",
      "target_audience": [
        "Roblox players interested in becoming Roblox developers",
        "People that are interested in creating their own Roblox game",
        "People that want to make Robux through Roblox games"
      ]
    },
    {
      "title": "Unreal Engine 5 Blueprints: Develop Your First Two Games",
      "url": "https://www.udemy.com/course/ue5-twogames/",
      "bio": "Create a 3D platformer and shooter using Unreal Engine 5 Blueprints. Become a game developer!",
      "objectives": [
        "Create an Unreal Engine 5 3D platformer and third-person shooter.",
        "Code with Unreal Engine 5 Blueprints.",
        "Have the necessary workflow, tools and skills to create your own 3D games.",
        "3D game and level design."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Community Discord Server",
          "Downloading Unreal Engine 5",
          "Creating a New Project"
        ],
        "Unreal Engine Overview": [
          "The Toolbar",
          "The Details Panel",
          "The Content Browser",
          "Viewport & Navigation"
        ],
        "Speed Ball - Environment Creation": [
          "Game Introduction",
          "Initial Project Setup",
          "Importing Assets",
          "Creating the Level",
          "Designing the Environment",
          "Lighting the Environment",
          "Post Process & Lightmass Volume"
        ],
        "Speed Ball - Blueprints": [
          "Blueprint Introduction",
          "Blueprint Classes",
          "Level Blueprint vs Blueprint Class",
          "Variables",
          "Creating the Ball",
          "Game Mode & Player Controller",
          "Adding Ball Movement Part 1",
          "Blueprint Communication - Casting",
          "Blueprint Communication - Interfaces",
          "Adding Ball Movement Part 2",
          "Creating the Star",
          "Making the Star Lootable",
          "Adding Star Loot Animation",
          "Creating the Star UI",
          "Displaying the Star UI",
          "Actor Has Tag",
          "Creating Checkpoints",
          "Creating the Portal",
          "Creating the Losing Logic",
          "Win Area",
          "Creating the Win Screen UI",
          "Displaying the Win Screen UI",
          "Camera Fade",
          "Finalizing the Game",
          "Cleaning up the Code",
          "Packaging the Game"
        ],
        "Clone Strike": [
          "Game Introduction",
          "Creating the Project",
          "Importing Assets",
          "Creating the Level",
          "Lighting the Environment",
          "Setting up the Character",
          "Game Mode & Player Controller",
          "Adding Player Movement",
          "Retargeting Animations",
          "Creating a Blend Space",
          "Animation Blueprint",
          "Attaching the Weapon",
          "Setting up the Enemy",
          "Enemy Animation Blueprint",
          "Firing the Weapon",
          "Enemy Damage & Death",
          "Enemy Spawning",
          "Enemy Spawn Animation",
          "Spawn Waves",
          "Creating Spawn Wave UI",
          "Importing Custom Font",
          "Making the Enemy Chase the Player",
          "Enemy Attacking",
          "Applying Damage to Player",
          "Player Health",
          "Player Death",
          "Weapon Reloading",
          "Designing the Main UI",
          "Main UI Functionality",
          "Designing the Game Over UI",
          "Game Over UI Functionality",
          "Creating the Main Menu Background",
          "Designing the Main Menu UI",
          "Main Menu UI Functionality",
          "UI Sound Effects",
          "Game Music",
          "Finalizing the Game",
          "Cleaning up the Code"
        ]
      },
      "requirements": [
        "A computer capable of running Unreal Engine 5",
        "Interested in making games using Unreal Engine 5"
      ],
      "description": "Create games without a single line of code using Unreal Engine 5 Blueprints.\nWhether you are a beginning game developer, programmer, artist or designer, Unreal Engine offers you everything you need being one of the most popular and widely used game engines by professionals. Jump right into game creation with one of the key features: Unreal Engine 5 Blueprints.\nYou don't need any programming experience.\nHave fun while learning quickly as we create an action-packed Unreal Engine 5 3D platformer and third-person shooter from start to finish. With Unreal Engine 5 Blueprints, you will see how easy and intuitive it is to get started, but also finish games. Use the same tools AAA studios use in their Unreal Engine Blueprint projects and apply it to your own. Everything is free.\nBy the end of this course, you will have created and coded a 3D platformer and third-person shooter using Unreal Engine 5 Blueprints with easy follow-along videos. You will have the necessary workflow, tools, and skills to create your own Unreal Engine 5 3D games.\nThis course covers everything you need to start developing games, included but not limited to:\nUnreal Engine 5 overview\nUnreal Engine 5 Blueprints\nCreating game projects\nLevel design, including assets import, lighting, and environment design\nAnimation Blueprints\nCharacter animation\nCharacter movement\nWeapon shooting & reloading\nCreating checkpoints\nMaking lootable items\nCreating enemy AI\nLevel difficulty and change\nHealth & damage / death\nWinning & losing\nGame UI\nMusic & Sound Effects (SFX)\nPackaging the game in the right way ready for release for the platform of your choice\nLearn the best game development practice from a published developer\nMy name is Moustafa, and I am the director and developer of Farmtale on Steam made only with Blueprints. With years of experience making games and teaching, I will show you the best coding and game development practices. Join our supportive developer community on Discord and see real results.\nSee you in lesson 1!",
      "target_audience": [
        "Complete beginners with no prior experience",
        "Individuals who want to develop games but not write code",
        "Experienced developers who want to brush up on their skills",
        "Game designers and artists who want to get into game programming"
      ]
    },
    {
      "title": "Unity Android Game Development : Build 10 2D & 3D Games",
      "url": "https://www.udemy.com/course/unityandroidgamecourse/",
      "bio": "Unity Game Development & Design, Learn Unity Android Game Development with C# & Unity 6",
      "objectives": [
        "Build 10 2D & 3D Games With Unity",
        "Publish Games On Google Play Store",
        "Earn Money With Video Ads",
        "Create Own Game Art Works",
        "Create Online Leaderboards",
        "Create Achievement Unlock Systems"
      ],
      "course_content": {
        "Installing and Setting Up Unity 6 ( 2025 Updated )": [
          "Installing & Setting Up Unity 6",
          "Creating Your First C# Script in Unity 6",
          "Setting Up Unity 6 for Android Game Development",
          "Set Unity Active Input Handling - Unity 6.1 (2025)",
          "Installing and Setting Up Unity 2023",
          "Installing and Setting Up Unity 2022"
        ],
        "Game 1 : Build A Block Dodger Android Game with Unity 2023": [
          "Playtesting The Game",
          "Setting Up & Importing Assets",
          "Adding Ground Player & Sky",
          "Creating The Block",
          "Creating The Block Script",
          "Creating The Player Controller",
          "Creating Game Manager & Spawning Blocks",
          "Creating Score & Menu UI",
          "Creating Title Text & Fixing Tap UI",
          "Building For Android & Creating an Apk",
          "Project Files for this Section"
        ],
        "Game 2 : Create A Simple 3D Endless Runner with Unity 2022": [
          "Create A 3D Runner Game with Unity 2022"
        ],
        "Game 3 : Let's Create 3D ZigZag Game": [
          "Setting Up Game Level, Player and Platform",
          "Controlling The Ball",
          "Moving The Ball After First Touch",
          "Checking When The Ball Falls Off The Platform",
          "Camera Following The Ball Smoothly",
          "Make The Platforms Fall Down After Ball Goes Away",
          "Spawning the Platforms",
          "Random Platform Spawning Algorithm",
          "Fixing Platform Falling",
          "Creating Diamonds and Randomly Spawning Them",
          "Destroying Diamonds On Collision",
          "Creating Awesome particle Effects",
          "Create UiManager and Text Animations",
          "More Main Menu UI Animations",
          "Game Over Menu and Animations",
          "Scripting The UiManager",
          "ScoreManager Score and HighScore",
          "Creating GameManager and Controlling The Whole Game",
          "Final Fixes and Finishing The Game",
          "Building and Publishing To Android"
        ],
        "Game 4 : Build A Simple 2D Android Game in 1 Hour": [
          "Build A Simple 2D Android Game in 1 Hour"
        ],
        "Monetize Your Games with Unity Video Ads ( Updated 2023 )": [
          "Setting Up Unity Ads 2023",
          "Implementing Interstitial Video Ads",
          "Playing Interstitial Ads in Your Game",
          "Displaying Banner Ads in Your Game",
          "Project Files"
        ],
        "Learn Unity Touch Joystick Input By Building A Game ( 2023 Updated )": [
          "Create A Carrot Collector Game with Touch Joystick Support"
        ],
        "Learn To Create Game Art Assets From Scratch": [
          "Inkscape Crash Course",
          "Desinging Tappy Ball Game Sprites - part1",
          "Designing Tappy Ball Game Sprites - Part2",
          "Designing Second Tappy Ball Sprite",
          "Designing The Pipe - Creating Game Art Assets",
          "Designing Sky Clounds & Ground - Game Art Assets",
          "Exporting Your Game Art Assets To Use Them In Game",
          "Test Your Knowledge"
        ],
        "Game 5 : Let's Create Tappy Ball Game": [
          "Creating Tappy Ball Menu and UI",
          "Programming The Ball Movement",
          "Adding The Pipes",
          "Spawning The Pipes",
          "Checking Score",
          "Designing UI and UiManager",
          "GameOver Menu and Animations",
          "Adding Attractive User Interface Elements",
          "Creating Game Manager and Controlling Everything",
          "Adding Final Tweaks and Finishing The Game"
        ],
        "Game 6 : Build A Touch Ball Shoot Android Game with Unity": [
          "Build an Android Game Start to Finish in 40 Minutes"
        ]
      },
      "requirements": [
        "You should already be familiar with Unity Interface",
        "You should already have some idea about Unity C# scripting"
      ],
      "description": "List Of Games You Will Build:\n3D ZigZag Game\nTappy Ball Game\nFruit Ninja Game\n3D Flick Football Game\n3D Runner Game\nOther than that you will learn to:\nIntegrate Video Ads and Earn Money\nPublish on Google Play Store\nLearn Version Controlling With Git & Github, Bitbucket\nDesign Own Game Art Works\nCreate Online Game Leaderboards\nCreate Achievement Unlock System\n\n\nLearn the basic concepts, tools, and functions that you will need to build fully functional Android mobile Games with the Unity game engine.\nBuild a strong foundation in Unity and Android Game Development with this course.\nUnity Installation & Setup\nAndroid Game Examples\nGame Art Creation\nVersion Controlling\nGame Monetization\nLeaderboards implementation\nA Powerful Skill at Your Fingertips  Learning the fundamentals of Unity Android Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building android games.\nJobs in unity android game development are plentiful, and being able to learn unity android game development will give you a strong background to more easily build awesome android games.\nContent and Overview   Suitable for beginning programmers, through this course of 170+ lectures and 30+ hours of content, you’ll learn all of the unity android game development fundamentals and establish a strong understanding of the concept behind android game development.\nStarting with the installation of the Unity , Java Development Kit and Android SDK , this course will take you through various unity features and how to use them. By creating example games, you’ll establish a strong understanding of unity game development.\nWith these basics mastered, the course will take you through building different example games with unity to learn more about the process of creating mobile android games with unity.\nStudents completing the course will have the knowledge to create fully functional and ready to publish android games with unity.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course.",
      "target_audience": [
        "Anyone Who Wants To Build 2D & 3D Games & Earn Money Using Unity Should Take This Course"
      ]
    },
    {
      "title": "Game Development 101: C# and Unity",
      "url": "https://www.udemy.com/course/make-a-katamari-style-sticky-ball-game-in-unity/",
      "bio": "Master game development with C# and Unity in just 45 minutes",
      "objectives": [
        "Build a working sticky ball game using C# and Unity.",
        "Customize your game with your own assets and levels.",
        "Learn from an experienced game designer and programmer.",
        "Develop the skills to continue building your own games."
      ],
      "course_content": {
        "Introduction": [
          "Preview"
        ],
        "The Course": [
          "Important Unity Hotkeys",
          "Creating the Sticky Ball and Ground",
          "Making the Camera Script",
          "Making the Ball Controller",
          "Making Objects Stick to the Ball",
          "Importing Custom Sticky Assets",
          "Setting up Sticky Categories",
          "Creating your own Custom Level",
          "Displaying Ball Mass UI",
          "Importing Music and a Pickup Sound Effect"
        ],
        "Conclusion": [
          "A Heart Warming Conclusion Video"
        ]
      },
      "requirements": [
        "Learn game development with C# and Unity, no prior experience necessary"
      ],
      "description": "Welcome to the Game Development 101: C# and Unity course!\nAre you ready to turn your passion for video games into a career? Look no further, because this course is perfect for you. As the Founder and CEO of Subconscious Games and the founder of the Vancouver Game Development Meetup Group, I have years of experience in the industry and am excited to share my knowledge with you.\nI have programmed an Apple 2x Game of the Day and created a quick Unity development course on how to build a sticky ball game. This course includes nine lectures covering approximately forty-five minutes of expert instruction and four downloads to explain further and demonstrate the information.\nBy the end of this course, you will have a working sticky ball game to play and share with your friends and family. You will learn how to use free or custom assets including graphics, 3D models, music, and sound effects to customize your own levels and bring your creativity to the world of digital fun.\nA basic understanding of C# programming and the Unity Editor is recommended, but not required for this course. It is suitable for beginner and intermediate video game and app creators who want to learn to create video games and for those who love to play and create video games.\nDon't miss out on this opportunity to turn your passion into a career. Enroll in the Game Development 101: C# and Unity course now and let's get started on your journey to becoming a successful game developer. We are confident that you will love this course and leave it a 5-star rating. See you in the classroom!",
      "target_audience": [
        "The intended learners for this course are beginner and intermediate game developers looking to learn how to create video games using C# and Unity. This course is suitable for those who have a basic understanding of C# programming and the Unity Editor, as well as those who have no prior experience. It is also valuable for anyone who loves to play and create videogames and wants to turn their passion into a career."
      ]
    },
    {
      "title": "Build Location Based Augmented Reality Apps with Mapbox",
      "url": "https://www.udemy.com/course/build-location-based-augmented-reality-apps-with-mapbox/",
      "bio": "Create your own GPS-based Pokemon GO - Clone! - using Mapbox, ARKit, ARCore & Unity3D",
      "objectives": [
        "Basics of Mapbox",
        "ARCore & ARKit",
        "Basics of Augmented Reality",
        "Learn how object oriented programming works in practice",
        "Students will create AR apps by writing codes in C# programming language"
      ],
      "course_content": {
        "Einleitung": [
          "\"Import Package\" - Standard Assets",
          "Intro",
          "Introduction to Mapbox",
          "Location Based Scene",
          "City Simulator",
          "Zoomable & Globe",
          "Minecraft - Location Based"
        ],
        "Pokemon GO - Clone": [
          "Setting up the Canvas",
          "Import of our Pokemons",
          "Pikachu - Quick Attack",
          "Gamecontroller",
          "Charizard - Fly Attack",
          "Logic - Select Option Buttons",
          "Pikachu - Thundershock",
          "Charizard - Flamethrower",
          "Healthbar for Charizard",
          "Healthbar for Pikachu",
          "Logic - if Pokemon is dead",
          "Black Screen Effect",
          "Spawn Pikachu",
          "Catch Enemy",
          "Adding Sounds",
          "The new ARFoundation",
          "The ARInterface",
          "\"FightScene\" Source Code"
        ],
        "Adding MapBox to our Game": [
          "Buildings for our Map",
          "Spawning the Pokemons",
          "Trainer Animation"
        ]
      },
      "requirements": [
        "For ARKit (IOS) a Mac with XCode and one of the following devices:",
        "iPhone 6s; 6s Plus; iPhone 7; 7 Plus; iPhone SE; iPad Pro (9.7, 10.5 oder 12.9); iPad (2017); iPhone 8 oder 8 Plus; iPhone X",
        "For ARCore (ANDROID) one of the following devices:",
        "Google Pixel ; OnePlus 5; Samsung Galaxy Note8; Samsung Galaxy S8+; Samsung Galaxy S8; Samsung Galaxy S7; Samsung Galaxy S7 Edge",
        "Basic programming knowledge, you should familiar with basics of C# and Unity"
      ],
      "description": "Build your own Augmented Reality Pokemon-Go Clone!\nCreate a GPS-based Pokemon GO Clone (with Mapbox)\nWe will use the ARInterface that combines ARKit and ARCore in one Scene\nAll Apps are running on IOS & on Android\nLearning by Doing, we will code all from scratch\nWhy should you learn Augmented Reality & Mapbox?\nMapbox handels the mapping, so you’re free to focus on designing, building, and developing your application.\nAugmented Reality is in it's early stages.\nThere is still much potential to create awesome Applications.\nThe demand for Augmented Reality apps is bigger than ever before\nBreak into a brand new industry expected to be worth $165 billion by 2024\n\nThis course is about creating a complete Pokemon GO - Clone from scratch! In order to create a Pokemon-GO Clone, we gonna have a look at numerous basics of the Gameengine Unity3D and the programming language C#.\nFor the GPS-based Part we will use Mapbox. Mapbox is an excellent tool in order to effectively create GPS-based Maps and accessing to datas of the real world.",
      "target_audience": [
        "Those interested in learning GPS-based Maps combined with Augmented Reality",
        "People who are looking to create engaging Augmented Reality games",
        "Android & IOS Developers looking for the next big thing"
      ]
    },
    {
      "title": "Unity 2D Master: Game Development with C# and Unity",
      "url": "https://www.udemy.com/course/unity2dmaster/",
      "bio": "From complete beginner to master level with this unique, easy-to-follow Unity 2D course.",
      "objectives": [
        "Learn C# from scratch and develop good coding practices",
        "Implement Unity's NEW INPUT SYSTEM with controller support",
        "Use Unity latest features: Tilemap, Cinemachine, 2D lighting and Postprocessing",
        "Implement complex player movement and animations",
        "Create enemies and traps, destructible objects, melee combat",
        "Implement moving and one way platforms",
        "Main Menu, UI elements and TextMesh Pro package",
        "Implement Sound Effects and Background music",
        "Get familiar with powerful and versatile Particle System",
        "Screen Shake",
        "Learn to save and load game data with Playerprefs",
        "UPDATE: Advanced Player Movements (Variable Jump, Multiple Jumps, Wall Slide, Wall Jump, Crouch)",
        "UPDATE 2: Timeline and Cutscenes (Unity 2022)"
      ],
      "course_content": {
        "Course Structure": [
          "Course Structure [Don't skip this]",
          "Advanced Movement Update Intro",
          "Timeline Update Intro",
          "Welcome and Discord Server"
        ],
        "Installation": [
          "What is Unity Hub?",
          "Install Unity Hub",
          "Install Unity and Visual Studio"
        ],
        "C# and Unity Fundamentals [Part 1]": [
          "First Project",
          "First Script",
          "Variables",
          "Functions",
          "Challenge- Functions",
          "Challenge Review- Functions",
          "Classes",
          "Access Modifiers",
          "Execution Order in Scripts",
          "New Scene and Layout",
          "Conditions + [Mini Challenge]",
          "Loops",
          "Challenge+Review- Loops",
          "Arrays",
          "Unity Documentation"
        ],
        "Basic Physics Mini Game [Part 1.1]": [
          "Project Setup and Version Note",
          "Sprite Creator",
          "Rigidbody and Gravity",
          "Colliders and Triggers",
          "Collision Matrix and Layers",
          "Challenge- Collision",
          "Challenge Review- Collision",
          "Unity Physics",
          "Import Input Package",
          "Get Component and Move Player",
          "Scene Navigation and Setup",
          "OnCollision Functions",
          "Prefab",
          "Instantiate (create) objects",
          "OnTrigger and Destroy functions",
          "Sorting Layers",
          "Exit The Game",
          "Quick Export / Build"
        ],
        "Tilemap 2D Platformer [Part 2]": [
          "Project Setup and Download Files"
        ],
        "Importing Sprites": [
          "Importing Sprites",
          "Importing Pixel Art Sprites",
          "Sprite Editor and Sprite Sheet + [Mini Challenge]"
        ],
        "Tilemap Fundamentals": [
          "Tilemap Setup",
          "Placing Tiles and Layers + [Mini Challenge]",
          "Tilemap and Composite Collider"
        ],
        "Player Controls and Animations": [
          "Preparing the Player",
          "Controls Setup- New Input System",
          "Moving the Player- New Input System",
          "Flipping the Player",
          "Animation Setup",
          "Animation Transitions",
          "Player Jump",
          "Ground Detection",
          "Challenge+Review- Ground Detection",
          "Jump Animation with Blend Tree",
          "Double Jump and Additional Jumps",
          "Fix Sticky Walls"
        ],
        "Controller Support": [
          "Controller Setup",
          "More About Controllers- Avoid Mistakes"
        ],
        "Upgrade and Version Note": [
          "How to upgrade Unity Version (Upgraded to 2020.3 LTS)"
        ]
      },
      "requirements": [
        "PC or Mac",
        "Free Unity version (2020 or newer) and Visual Studio - Installation process included in the course",
        "No previous experience in C# or Unity is required- This course is beginner friendly and you can start from scratch"
      ],
      "description": "I promise you that this is one of a kind course with short, informative easy-to-follow lessons. No time-wasting, that's why I call it Time Saver.\nThis course covers all skill levels and therefore is divided into two parts:\nsections for complete beginners in C# and Unity\nsections for game developers with experience\nIf you just started with Game Development, then the beginner sections are for you. The lessons will gradually increase your knowledge and improve the skills that are needed for the next part of the course.\nThe beginner sections are:\nInstallation\nC# and Unity Fundamentals\nPhysics 2D Mini-Game\n\n\nThe 2D platformer section is the main part of the course in which you learn how to fully utilize the new input system with controller support.\nThis section will also start as beginner-friendly but it will slowly lead you into advanced programming techniques and solving complex tasks (melee attack, climb ladders, inheritance, virtual functions, lists, singleton pattern GameManager, etc). It will give you a foundation and a great concept on which you can build your games. In the end, make your games stand out with 2D lights and post-processing effects.\nUpdate- Advanced Player Movement\nVariable Jump\nMultiple Variable Jumps (Double, Triple...)\nWall Slide\nWall Jump\nCrouch\nUpdate 2- Timeline and Cutscenes (Unity 2022)\nTimeline Setup\nTimeline Animations\nTimeline Signals\nTimeline and Cinemachine Cameras\nIf you get stuck anywhere or need help, I respond to all messages.\nYou can also join the community on the Discord server and connect with other enrolled students. Also, don't forget that this course will expand over time and you can vote for the next lessons.\nDon't miss this opportunity, you can't lose anything since the course has a 30-day money-back guarantee.\nTrust me, you won't be disappointed.\nThank you for your time and see you in the course lessons.",
      "target_audience": [
        "It's appropriate for both: complete beginners and developers with experience that wish to improve their skills",
        "If you search for quick, informative, straight-to-the point lessons then this is the perfect course for you"
      ]
    },
    {
      "title": "Create Your First RPG And FPS Multiplayer Game In Unity",
      "url": "https://www.udemy.com/course/create-your-first-rpg-and-fps-multiplayer-game-in-unity/",
      "bio": "Learn To Code In C# And How To Create Role Playing And First Person Shooter Multiplayer Games In Unity3D",
      "objectives": [
        "Learn To Code in C#",
        "Develop strong and transferrable problem solving skills",
        "Understand the capabilities of game development using Unity",
        "Gain an excellent knowledge of game creation",
        "Learn how object oriented programming works in practice",
        "Create Stunning 3D Games"
      ],
      "course_content": {
        "Introduction": [
          "Introduction - Watch This Before You Buy The Course Or If You Already Bought",
          "Downloading Unity",
          "Installing Unity And Taking A Look At Its Interface",
          "Save The Golem - Your First Unity3D Game"
        ],
        "Learn To Code In C#": [
          "Introduction To Variables",
          "Operations With Variables",
          "Functions",
          "Conditional Statements",
          "Loops",
          "Arrays",
          "Arrays And Functions",
          "Classes And Objects",
          "Quiz 1",
          "Constructors",
          "Passing Values And References To Function Parameters",
          "Data Encapsulation",
          "Inheritance",
          "MonoBehaviour",
          "Static Variables And Functions",
          "Coroutines",
          "Delegates",
          "Enumerations",
          "Arrays And Lists",
          "Quiz 2"
        ],
        "Awesome Knight (Click And Point) Unity3D Game": [
          "Awesome Knight Game Preview",
          "Importing Assets And Organizing The Project",
          "Terrains In Unity",
          "Materials, Prefabs And Player Game Object",
          "Moving The Player",
          "Finishing Player's Movement",
          "Animator And Animations In Unity",
          "Camera Follow",
          "Introduction To Particles",
          "Stone Runes Circle",
          "Mouse Pointer",
          "Lights And Skyboxes",
          "Unity's UI System",
          "Creating Our Own UI",
          "Player Attack Script",
          "Player Attack Effects",
          "Navigation In Unity",
          "Enemy AI",
          "Enemy AI - Another Way",
          "Skill Damage And Enemy Health",
          "Fire Tornado, Fire Shield And Heal Scripts",
          "Enemy Attack Script",
          "Health Bar",
          "Enemy Boss",
          "Boss Special Effect Damage",
          "Removing The Cursor Point When Attacking"
        ],
        "Animations In Unity": [
          "Importing Assets And Creating Animations",
          "Animator Controller",
          "Animation Transitions",
          "Multiple Transition Conditions",
          "Jump Animations",
          "Quiz 3"
        ],
        "Awesome Heroes (RPG Game)": [
          "Awesome Heroes(RPG) Game Preview",
          "Importing Assets And Organizing The Project",
          "Player Movement",
          "Player Animations",
          "Camera's Movement And Spherical Coordinates",
          "MouseLock",
          "Player Attack System",
          "Enemy AI System",
          "Enemy Attack",
          "Player Damage System",
          "Enemy Damage System",
          "King Warrior And Cat Girl Characters",
          "Creating Our Main Menu",
          "Animating Main Menu Camera",
          "Character Select Panel",
          "Changing Quality Settings In Our Game",
          "Navigating Between Scenes And Loading Screen",
          "GameManager And Spawning A Character In The Level",
          "Navigating To Other Worlds",
          "Player UI Inventory",
          "Player Special Attack",
          "Dead Effect",
          "Adding People In Our Game"
        ],
        "First Person Shooter Multiplayer Unity3D Game": [
          "First Person Shooter Multiplayer Game Preview",
          "Importing Assets And Creating Our Tester Scene",
          "FPSController",
          "FPSMouseLook",
          "Crouch, Sprint And Jump",
          "Player Animations And Blend Trees",
          "Player Weapons",
          "Shoot And Reload Animations Using Two Animation Layers",
          "Selecting Different Weapons",
          "FPSHands",
          "FPSHands Shooting",
          "Creating A Crosshair For Our FPS Character",
          "Intro To Unity Networking",
          "Network Manager And Your First Multiplayer Game",
          "Moving The Local Player And Tracking Movement Over The Network",
          "Syncing The Camera View Over Network",
          "Syncing Animations Over The Network",
          "Dealing Damage And Sync Vars",
          "Custom Network Manager",
          "Unity Multiplayer Services And Hosting The Game Over The Internet"
        ],
        "Light Effects In Unity": [
          "Lightning And Mood Preview",
          "Direction Lights And Skyboxes",
          "Point Lights",
          "Spot Lights",
          "Shadow Effects",
          "Baking Lights"
        ],
        "Updates": [
          "How To Change Screen Size In Game Tab"
        ]
      },
      "requirements": [
        "Must have a Mac or PC capable of running Unity3D"
      ],
      "description": "This is the FIRST online course that will teach you how to create a First Person Shooter Multiplayer Game!!\nThe course is completely project based, and we are going to create four 3D games from scratch using Unity Game Engine.\nWe will start with simple things so you will be comfortable even if you are using Unity for the first time. This also applies to your coding skills, if you did not code before, don't worry, we will deeply cover C# from basic to advanced features.\nI had beginners and intermediate game developers on my mind when I structured this course, so it will not only give you all the information you need as a beginner, but it will also teach you advanced game development techniques if you already know how to make games. Every section in the course starts with basic information about the specific topic, and slowly progresses in difficulty as we finish every video.\nYou will also benefit from my super fast response if you have any issue that you are stuck with(I check Udemy forums every day if someone posts a question). Oh and all the students taking the course will also be there to help you!\nLets take a look at the games that we are going to create inside of this course:\nSave The Golem\nOur First game is called Save The Golem and its a simple game where pumpkins roll down the hill and you try to avoid them with your Golem character, this is just to get us started with game development and see how easy and simple it is to create your first game in 40 minutes.\n\nAwesome Knight\nOur second game is a click and point game called Awesome Knight. In this game we create a character by our mouse, where we click on the screen the player will go towards that position. We will also be able to attack by using melee attack system and special attacks like fire tornado. This game will have enemies that have their or AI and path finding system and we also have a boss who has his own special attacks like throwing magic at us.\n\nAwesome Heroes\nThe third game is an RPG game called Awesome Heroes. In this game we will learn how to create beautiful levels, player select system where we can select multiple players to play the game, we will have multiple worlds to explore and in each world we will have different enemies attacking us which makes the game more exciting. And not to forget that we are going to create an inventory system where we can select multiple weapons for our characters to battle the evil monsters we encounter in our quests.\nFirst Person Shooter Multiplayer\nThis is the most requested game I had and its finally here. First we will learn how to create and animate our fps character, add weapons in the game and shoot with those weapons, detect collision when shooting so that we can apply damage and of course add the famous hands that you see in every first person shooter game. After we finish all of that we will use unity's networking system to connect two players over lan and the internet to play against each other in a multiplayer death match.\n\nSome of the things you will learn in the course:\nUnity's interface\nImporting Assets\nOrganizing The Project\nBasic, Intermediate And Advanced C# Programming\nBasic AI(Artificial Intelligence)\nAdvanced AI(Artificial Intelligence)\nPath Finding\nNav Mesh Agent\nBasic And Advanced Character Animations\nSound FX And Music\nBasic, Intermediate And Advanced Particle FX\nMelee Battle Systems\nBoss Fights\nSpecial In Game Attacks\nLearn How To Use Unity's UI System\nCreate And Animate Menus\nCreate Animation Trigger Events\nCreate Multiplayer Games With Unity's Networking System\nThat And Much More Is Awaiting You In This Course\nIf You ever had an idea for an awesome game, then enroll in this course and learn the tools that you need to develop Your next hit game!!!\nWhat Is Your Risk By Taking This Course?\nNothing!! If you are not satisfied with the course, I promise I will give you a full refund of your money NO questions asked!!\nEnroll Now!! You Will Not Be Disappointed!!",
      "target_audience": [
        "Anyone Who Wants To Learn Game Development But Does Not Know Where To Start",
        "Beginners with no coding experience",
        "Programmers who want to learn game development",
        "Experienced Game Developers"
      ]
    },
    {
      "title": "JavaScript DOM for Beginners Learn how to code",
      "url": "https://www.udemy.com/course/javascript-example-code/",
      "bio": "JavaScript DOM coding examples learn how to create interactive and dynamic web pages Element selection and updating",
      "objectives": [
        "How to use JavaScript",
        "How to create elements dynamically",
        "Manipulate elements using JavaScript"
      ],
      "course_content": {
        "Introduction to learning JavaScript DOM": [
          "Introduction to the DOM JavaScript coding for interactive page elements",
          "Section Lesson Source Code and JavaScript DOM coding Examples",
          "Document Object and Setup.",
          "Page Element Selection.",
          "Element Selection Challenge",
          "Adding and Removing Elements",
          "DOM Element Style JavaScript Code DOM",
          "JavaScript Code DOM Click Events Element Interaction",
          "JavaScript DOM elements Event Object E Parameters",
          "Event Listeners vs Handlers for page elements",
          "Adding Event Listeners to Elements",
          "JavaScript Event Listeners",
          "Events on Form Fields DOM page elements",
          "List Exercise",
          "DOM Content Loaded Event.",
          "Window Object and Events",
          "DOM element attributes",
          "Element Get and Has attribute",
          "Adding and removing Classes",
          "Traversing between elements",
          "Dynamic DOM page element List Exercise.",
          "requestAnimationFrame movement",
          "Bouncing Ball Animation coding challenge"
        ],
        "Input field Character counter": [
          "Introduction to JavaScript examples",
          "TextArea Character Counter Setup",
          "Source Code",
          "Add Eventlisteners Multiple",
          "Source Code",
          "Character Counter",
          "Source Code",
          "Character Warning Message",
          "Source Code"
        ],
        "Element Scrolling Content Code Snippet": [
          "JavaScript Text Scroller Setup",
          "Source Code",
          "Setup Scroll JavaScript",
          "Source Code",
          "Ready set Scroll",
          "Source Code",
          "Mouse Over stopper",
          "Source Code",
          "Dynamic Speed Interactive",
          "Source Code",
          "Scroller Code Review"
        ],
        "Document Object Model - Practice mini application": [
          "DOM Element Fun Document Object Model",
          "Source code",
          "Clone elements JavaScript",
          "Source Code",
          "Moving New Elements",
          "Source Code",
          "JavaScript how to Drag new elements",
          "Source Code",
          "Creating a Random Color Generator",
          "Source Code",
          "Trash Bin for Elements",
          "Source Code",
          "How to Remove Elements from Page",
          "Source Code",
          "Code Review DOM Elements",
          "Source Code"
        ],
        "JavaScript Practice code and exercises Questions and Answers about JavaScript": [
          "JavaScript Game from Scratch Number Lock Combo Guesser Game with Code",
          "Using String and Array Methods to select and Count String Vowels JavaScript",
          "JavaScript Counting string vowels exercise",
          "Fetching Data JSON",
          "Pure JavaScript Fade",
          "JavaScript Closure",
          "higher Order Function examples",
          "Additional Learning Materials Pack: Downloadable Content and Practical Examples"
        ]
      },
      "requirements": [
        "Fundamental JavaScript concepts",
        "Access to computer",
        "Use of editor to write code",
        "HTML and CSS knowledge"
      ],
      "description": "Perfect course to learn more about JavaScript and how to apply JavaScript in real world applications.  Make your web pages come to life with JavaScript.  Create interactive and dynamic web page content today!!!  Learn how to animate page elements, use the page element object properties and values within your code.\nIncludes 30+ Page Downloadable Source Code and JavaScript Resource Guide\nLifeTime Access with new updates - Professional support within the Q&A section.\nJavaScript is used when creating interactive and dynamic web content. It allows you to bring your web pages to life. Almost all modern websites use JavaScript and becoming more familiar with how you can add Javascript code to interact and manipulate your web page elements will propel your web pages to the next level.\nJavaScript DOM coding Lessons\nSimple HTML page with innerHTML update\nPage Element Selection\nSelect and update only divs with a class of output\nCreate Elements and Remove Elements\nPage Element Style Property\nInteractive Page elements Events\nEvent Object values\nEvent Listeners vs Event Handlers\nUseCapture Event Listener Optional\nMouse Movement Events\nForm Field Event listeners\nList Exercise on events\nWindow Object WOM\nDOM element attributes\nElement Get and Has attribute\nAdding and Removing Classes\nTraversing between elements\nList Exercise\nrequestAnimationFrame movement\nBouncing Ball Animation\nJavaScript and the DOM Page Elements : JavaScript and the DOM\nDocument Object Model (DOM) is a programming interface for HTML documents, that is the logical structure of a page and how the page content can be accessed and manipulated. Bring your web pages to life with JavaScript and connect to the web page elements. Create fully interactive content that responds to the user. Create Dynamic web page content that can change without page refresh and present new elements and updated content to the user. Improve your web users experience with JavaScript and the DOM. What is the DOM Document Object Model How to select elements from your webpage with JavaScript Manipulate and change your page elements with JavaScript How to set styling attributes for elements Make them interactive with Event listeners DOM events and Page events with JavaScript How to create elements with code and add them to your webpage Moving elements and animation of elements.\n\n\nElement Selection\nDOM tree\nMultiple Elements selection\nElement Manipulation\nAdding event listeners\nInput Values\nCreate Elements\nAnimation\nElement Movement\nWindow events\nDocument Events\nKeyboard Events\nTracking key presses\nPractice JavaScript while building fun interactive and dynamic min applications with JavaScript\nText area character counter\nEvents handlers\nKeyboard events\nElement manipulation\nText scroll box\nWord scrolling\nMouse events\nFun with Elements\nClone elements\ncreate and remove elements\nanimate elements\ndraw elements\nattaching drag and more\nNo libraries, no shortcuts just learning JavaScript making it DYNAMIC and INTERACTIVE web application.\nStep by step learning with all steps included.\nBeginner JavaScript knowledge is required as the course covers only JavaScript relevant to the building of the game.  Also HTML and CSS knowledge is essential as scope of this course is all JavaScript focused.\nAlong with friendly support in the Q&A to help you learn and answer any questions you may have.\nTry it now you have nothing to lose, comes with a 30 day money back guarantee.\nStart building your own version of the game today!!!!",
      "target_audience": [
        "Beginners to JavaScript",
        "Anyone who wants to practice writing JavaScript",
        "Web developers",
        "Webmasters",
        "Anyone who wants to learn to make a JavaScript game without any libraries"
      ]
    },
    {
      "title": "Unity Parkour & Climbing System",
      "url": "https://www.udemy.com/course/unity-parkour-system/",
      "bio": "Learn to Create a Third Person Parkour & Climbing System in Unity and C# | Learn Gameplay Programming in Unity",
      "objectives": [
        "Create an advanced third person controller with parkour that can be reused in other games",
        "Learn adavnced animation techniques like Target Matching, Humanoid Retargeting etc.",
        "Learn important 3D gameplay programming concepts",
        "Learn to architect data driven systems in Unity using Scriptable Objects",
        "Learn to write clean & modular code in C#"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Download the Complete Project Files"
        ],
        "Third Person Controller": [
          "Section Overview",
          "Project Setup",
          "Camera Controller",
          "Character Movement",
          "Animations Setup",
          "Adding Animations To Character",
          "Collision and Gravity",
          "Controller Input"
        ],
        "Parkour System": [
          "Section Overview",
          "Detecting Obstacles",
          "Obstacle Height Detection",
          "Performing Parkour Action",
          "Selecting Parkour Actions Based on Obstacle Height",
          "Rotating Towards the Obstacle",
          "Target Matching",
          "Climb Up Action",
          "Vault Action",
          "Custom Actions",
          "Section Conclusion"
        ],
        "Ledge Movement & Jumping from Ledges": [
          "Section Overview",
          "Detecting Ledges",
          "Jumping from Ledges",
          "Jumping from Ledges II",
          "Ledge Movement",
          "Ledge Movement Improvments",
          "More Ledge Movement Improvements",
          "Fixes in Jumping",
          "Auto Jumps",
          "Section Conclusion",
          "More Content Coming Soon"
        ],
        "Climbing System": [
          "Section Overview",
          "Code Cleanup",
          "Climb Ledge Detection",
          "Jump To Ledge",
          "Climbing Network",
          "Ledge To Ledge Jumps",
          "Shimmy Actions",
          "Jump Back & Climb Up From Hanging State",
          "Drop to Hanging State"
        ],
        "What to learn next?": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You should know the basics of C# (if, loops etc)",
        "You should know the basics of Unity"
      ],
      "description": "In this course, you’ll learn how to create a third-person parkour & climbing system in Unity and C# while learning important gameplay programming concepts.\n\n\nWe’ll create an advanced third-person controller that can traverse dynamic environments with parkour. It’s a common system in modern-day games like Assassins Creed, Watch Dogs, etc. But the mechanic itself has been there in lots of older games like Zelda Ocarina of Time. So it’s a perfect project for learning core game programming skills.\n\n\nSo we’ll be building all this step by step from scratch. We’ll start by making basic a third-person controller. We’ll not use any assets for it, we’ll build this from scratch because it’s a good way to learn the fundamentals of gameplay programming. and then we’ll implement the parkour system on top of it. We’ll create an environment scanner for detecting obstacles in front of the player and we’ll make the player perform different parkour actions dynamically based on the height and type of the obstacle. We’ll look at advanced animation techniques like target matching that will allow us to adapt the same animation to obstacles of different heights.\nWe’ll architect the parkour actions using scriptable objects in Unity so that they’re data-driven & can be created & modified by designers without touching the code. We'll also create a climbing system similar to the one that you see in games like Assassin's Creed.\n\n\nBy the end of this course, you’ll not just create this parkour system. But you’ll also learn essential game development skills and techniques that you can use throughout your career.",
      "target_audience": [
        "Beginner Unity developers looking to learn intermediate concepts and create reusable systems"
      ]
    },
    {
      "title": "Learn Unity's Entity Component System to Optimise Your Games",
      "url": "https://www.udemy.com/course/unitydots/",
      "bio": "Update your Unity programming skills to take advantage of the new Data Orientated Technology Stack and Burst Compiler",
      "objectives": [
        "Take existing Unity projects created without the use of DOTs and convert them to employ parallel processing and the entity component system.",
        "The advantages and disadvantages of using DOTs."
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "What Version of Unity Should I Use?",
          "What Version of Unity Should I Use 2.0.",
          "Information Relevant to this Course",
          "Join the H3D Student Community",
          "Contacting H3D",
          "FAQs"
        ],
        "DOTS in a Nutshell": [
          "Understanding DOTS",
          "Comparing the Old & the New Part 1",
          "Comparing the Old & the New Part 2",
          "Comparing the Old & the New Part 3",
          "Comparing the Old & the New Part 4",
          "Comparing the Old & the New Part 5",
          "Your First ECS Challenge",
          "Parallel Computing",
          "Structures, Classes and Blittable Types"
        ],
        "Working with Entities": [
          "Creating and Debugging Entities",
          "Accessing and Modifying Entity Data",
          "Adding IComponentData Challenge",
          "Performing Entity Queries",
          "Entity Query Interface Challenge",
          "Adding an Entity from Monobehaviour at Runtime",
          "Constructing an Entity from Scratch",
          "Constructing Sheep Entities from a Mesh Challenge"
        ],
        "Transformation Mathematics in DOTS": [
          "Performing Translations",
          "Performing Rotations",
          "Performing a Slerp to Face a Target",
          "Rotating Around a Pivot Point",
          "Pivoting Challenge"
        ],
        "Working with Custom Components": [
          "Getting Player Transformations into Entities",
          "Adding and Setting Data Values in a Custom Components",
          "Updating Custom Component Values",
          "Waypoint Follow Challenge"
        ],
        "Project: Space Wars Simulation": [
          "Finding Closest Planet",
          "Attacking and Retreat Movement",
          "Spawning an Entity from an Entity Part 1",
          "Spawning an Entity from an Entity Part 2",
          "Spawning Entities from Another Location Part 1",
          "Spawning Entities from Another Location Part 2",
          "Restricting the Lifetime of an Entity",
          "Restricting the Lifetime of an Entity Update",
          "Implementing Line of Sight in an Entity",
          "Faking Collisions",
          "Instantiating Explosions",
          "A System for Scaling Particles"
        ],
        "Project: Infinite Cube World": [
          "Creating a Landscape with Cubes",
          "Using Perlin Noise for Height",
          "Enhanced Perlin Heights",
          "Changing Materials on an Entity",
          "Identifying Bottlenecks and Solutions to FPS Drop",
          "Scrolling the Landscape with the Player"
        ],
        "DOTS Physics": [
          "The Physics Components",
          "An ECS Physics-Based Character Controller",
          "Spawning Multiple Physics Entities",
          "Shooting Physics Bullets Challenge",
          "Moving a Bullet with Physics",
          "Upgrading a Package",
          "Detecting Collisions",
          "Using Custom Values in a Collision Event",
          "Destroying an Entity on Collision",
          "Entity Tracking with the Camera",
          "Detecting Physics Triggers",
          "Converting to a Dynamic Character",
          "Using Custom Values in a Trigger Event"
        ],
        "Raycasting": [
          "Starting with a Tower Defence Setup",
          "Performing a Raycast Hit Part 1",
          "Performing a Raycast Hit Part 2",
          "Destroying an Entity Hit by a Raycast",
          "Performing Raycast Distance Hits P1",
          "Performing Raycast Distance Hits P2",
          "Locating and Following The Closest Physics Entity",
          "Destroying Tracked Physics Entity",
          "Destroying Zombie Challenge P1",
          "Destroying Zombie Challenge P2"
        ],
        "Final Words": [
          "Some Final Words from Penny",
          "Where to now?"
        ]
      },
      "requirements": [
        "Students should have a strong working understanding of the Unity game engine.",
        "Students should be proficient in C#"
      ],
      "description": "Unity's new Data-Oriented Technology Stack (DOTS) and Entity Component System (ECS) programming paradigm have been developed to optimize game development and open up new ways of accessing memory and parallel processing for developing high-performance C# code that takes advantage of contemporary multicore computers. Through the use of the Burst Compiler, your game programs become native code, able to run faster on multiple threads thus pushing the boundaries of the size of your virtual environments and the simultaneous processing of tens of thousands of game objects.\nIn this course, Penny demystifies Unity's new DOTS architecture and introduces intermediate Unity users to ECS by upgrading classic Unity projects and developing a multitude of examples of the use of DOTS concentrating on the most popular game mechanics. Using her internationally acclaimed teaching style and knowledge from over 25 years working with games, graphics and having written two award-winning books on games AI, Penny will take you from familiar object-oriented programming and upgrade your skill to the more memory efficient and optimized entity component architecture. Throughout, you will follow along with hands-on workshops designed to take you through every step of becoming familiar with ECS.  You will build on numerous scenarios that examine the basics of ECS programming through the new DOTS-specific math and physics libraries.\nWhile DOTS is still in preview, this course aims to assist you in understanding how it works and how games are constructed with it.  The knowledge you obtain will further your ability to decipher future released Unity ECS tech demos and handle API updates.\nThis course requires Unity 2019.3.0f6. and the Hybrid Renderer Package 0.3.3.\nLearn how to program and work with:\nEntities and Components\nThe C# Job Systems\nCollision Systems\nTrigger Systems\nUser Input to Control Entities\nInterfacing with classic Unity and game objects to entity-based systems.\nContents and Overview\nThe course begins with a section that compares the old way of working with game objects in Unity, through to the creation of a complete ECS system using the exact same scenario in each instance to give you time to compare the programming methods and optimizations gained through implementing DOTS.\nFollowing this, you will dive deeper into the creation and debugging of entities while learning how to tag, identify and add data to them with custom components.  You will also learn how to find entities once they are injected into the game environment and to access and manipulate them at runtime.\nAfter you've become comfortable with the nature of entities, you will discover how the new math library can be used to replicate many of the functions you've become familiar with in the Unity Mathf API.  The content will cover transformation, rotations, slerps, pivoting, following waypoints and pursuing and fleeing from targets.  A space-based scenario will be created with several planets and thousands of spacecraft programmed to attack, by generating even more thousands of bullets and finally explosions.\nNext, you'll build a blocky Minecraft inspired landscape from cubes that can be infinitely generated in any direction by implementing Perlin Noise and examining how parallel processing (achieved through the C# Jobs system) dramatically speeds up processing that has in the past been limited to the main thread.\nOn completion of this exercise, a thorough examination of the new DOTS physics capabilities will take place.  All the classic Unity elements you've become used to will be replicated via the new physics API and ECS job systems.  You will learn about collisions, triggers, camera tracking, bullet physics and the basics of recreating Newtonian physics for moving dynamic and kinematic entities.\nThe course ends with a challenge and project to recreate a third person shooter in which a single player takes on a swarm of zombies.\nAt the completion of this course, you will be familiar with DOTS and the ECS and be able to further your skills by interpreting and making sense of the Unity tech demos as they are released, presenting updated API and introducing more and more functionality into DOTS.\nWhat students are saying about Penny's courses:\nExcellent course!! I am already in game development industry and there is one quote here that \"Whenever you are not able to solve complex problem, its the right time to get back to the BASICS\"\nShe is the best teacher ever in this platform\nMost instructors are very smart people. Some are good at teaching and some are not. Penny is great at describing complex concepts without going down a dark cerebral rabbit hole that so many instructors feel obligated to do. It's like they need to demonstrate their knowledge by explaining every tiny aspect. Penny does not go there. She explains things clearly but does not overwhelm the student with more than they need to know.",
      "target_audience": [
        "Professionals and students who are comfortable using Unity but would like to upgrade their skills to implement the new Unity DOTS system."
      ]
    },
    {
      "title": "Build an FPS Multi-Player Game with Photon PUN2 & UNITY",
      "url": "https://www.udemy.com/course/fps-photon-pun2-unity/",
      "bio": "Learn how to make your own Multiplayer First-person shooter ZOMBIE game using Photon PUN2 and UNITY 2021",
      "objectives": [
        "Build a First Person Shooter / zombie survivor game",
        "Learn how to use Photon PUN2 to build Multiplayer Games",
        "Expand your Game Design knowledge",
        "Ready to expand to PvP (Player vs. Player) game",
        "Touch controls implementation",
        "Build Maps",
        "Implement Touch Controls",
        "Learn a lot about 3D animations, enemies, health systems, level design, game design"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the course - and how to get most out of it"
        ],
        "Scene Setup and Map building": [
          "Setting up the FPS Project and HDRP vs URP",
          "Setup and Looking at the URP assets",
          "Setting up the Scene and Looking at Skyboxes",
          "- DOWNLOAD - TutorialsEU_Assets",
          "Checking out the Assets we are going to use",
          "Building our Environment - Streets and Houses",
          "Building our Environment - Decorations and Story",
          "Adding Invisible walls and limitations",
          "Challenge - build your own city"
        ],
        "FPS Character Setup": [
          "FPS Character tricks",
          "Adding the Main Character to the Game - How to use Clipping",
          "Looking Around with MouseLook - MouseSensitivity and Clamping",
          "Player Movement using a Character Controller",
          "Adding Gravity Manually and using Layers and Masks",
          "Adding Jumping",
          "Adding an Animator and Where to Find Animations (MIXAMO)",
          "Adding Transitions and Animations",
          "Adding more Transitions and Has Exit Time"
        ],
        "AI Enemy Character Setup": [
          "Starting with the Enemy AI",
          "NavMesh and NavMesh Agent",
          "Baking the NavMesh and using the NavMesh Agent",
          "Using the NavMeshAgent to allow the zombie to follow us",
          "Make Enemy Run after us and Loop The Run Animation",
          "Detect Collision between Enemy and Player"
        ],
        "Core Mechanics Setup": [
          "Creating the PlayerManager and Health that is reduced when Hit",
          "Restarting the Game at 0 Health and Fixing the Pushing up by the Zo",
          "Using Raycasts to shoot",
          "Adding A CrossHair",
          "Adding Enemy Health and Make them killable",
          "Adding a Recoil Animation to the weapon",
          "Triggering the Recoil Animation on Shoot",
          "Adding Spawn locations",
          "Writing the GameManager that takes care of Spawning Enemies Randoml",
          "Enemies call their Death, and a neat little trick assigning the GameManager",
          "Displaying the Rounds",
          "Displaying the Health",
          "Game Over Screen",
          "Displaying Statistics at the end of the game",
          "Making the game Replayable",
          "Main Menu Setup",
          "Returning to Main Menu",
          "Outro Part 1 of the Course"
        ],
        "Quick Mobile Section": [
          "Setup device and Touch",
          "Touch Player Movement",
          "Player Camera look"
        ],
        "Basic UI and VFX/SFX Setup": [
          "Pause menu",
          "UI - Simple Camera Shake",
          "UI - Hurt Screen effect",
          "UI - Zombie Health Bar",
          "VFX - Particle system - Muzzle Flash",
          "VFX - Particle system - Hit effect",
          "VFX - Particle system - Scripting",
          "Animations - Zombie Attack",
          "Animations - Zombie Death",
          "SFX - Shoot and zombie growl",
          "Graphics - Fog and some tweaks",
          "UI - Fade-Out and Fade-In",
          "Build - Build your game for PC"
        ],
        "Implementing Final Assets and Last Needed Features": [
          "Player - Changing Character and Weapon Model",
          "Weapon - Weapon Sway",
          "Player - Sprinting",
          "Weapon - Aiming",
          "AMMO SYSTEM - Setup",
          "AMMO SYSTEM - Reload Animation",
          "AMMO SYSTEM - UI",
          "VFX - Non Target Hit Particles",
          "Weapon - Firerate",
          "Weapon - Auto/Semi",
          "Weapon - Setting up a Pistol",
          "Weapon - Variation Animation Setup",
          "Weapon-Switching between Weapons and Animations",
          "BUG: Weapon stuck reloading when switching mid reload",
          "BUG. Ammo not updating on weapon switch",
          "Enemy - Point System",
          "Interaction system - Vending Machines Setup",
          "BUG: Player goes into crippling debt",
          "Interaction System - Health and Ammo Vending Machines"
        ],
        "PUN 2": [
          "- DOWNLOAD - Project version before Photon PUN implementation",
          "Setup",
          "Networking Manager",
          "Main Menu",
          "Rooms",
          "Scene Syncing",
          "Player Prefab",
          "Player Spawning and Finding Spawners",
          "Player Syncing and Filtering Controls",
          "Transform Sync",
          "Round Sync",
          "Round Number Sync",
          "Zombie Sync",
          "Zombie Switch between players",
          "BUG - Pausing game on Player death",
          "Enemy health and death sync",
          "Player health and death sync",
          "Sync Weapon Switch",
          "- DOWNLOAD - Sync SFX and VFX"
        ]
      },
      "requirements": [
        "Computer with a good internet connection",
        "A PC that can run Unity 2021",
        "An understanding of the Basics of Unity 3D Game Development",
        "An understanding of C# Programming"
      ],
      "description": "Have you ever dreamed about building your own First-person shooter game?\nOr maybe you want to develop games like Call of Duty Zombies, Left 4 dead, or any FPS or Horde-type game?\nThen you found the right course for you!\nIn this course, you will develop your own FPS multiplayer zombie game!\nWith our instructions, you will learn how to use and implement all these things:\nProgram Enemy AI to fight against, in a PvE (Player vs. Environment) round-based style similar to Left 4 Dead and COD Zombies.\nPhoton PUN2 - Learn to make multiplayer games with the best engine available for Unity!\nReady to expand to PvP (Player vs. Player) - Only a few steps away from having your very own PvP combat\nLearn map building secrets and techniques used daily in the industry for competitive and arena-based games\nImprove your game design skills through our design fundamentals and learn what makes a game fun\nGet to know the simple steps it takes to turn your game into a mobile game, including touch controls and in-editor mobile testing.e\nSet up a system to let your player interact with environmental assets, using our vending machine example!\nLearn how to sync everything over the Network via Photon Pun’s built-in components\nGet to know PUN2’s custom functions for network communication like RPC’s (Remote Procedural Calls), Photon Hashtables, Custom properties, and Pun Callback Overrides\nAnd with all that, you’ll be able to take your Singleplayer game and turn it into the Multiplayer game you always wanted!\n\n\nThis course includes:\nIntroduction and Full Implementation of Unity Photon PUN2\nChapters about setting up game elements, animations, AI, player Input, and Game Design in general.\nFull FPS game project + code\n\n\nI’m Denis Panjuta, your instructor for this course. I have taught programming to over 200000 students around the world and worked together with a team of two game developers to make this course as great as possible. You will get to know them in the Q&A section, as they will help you out if you have any questions while going through the course.\nSo you are getting amazing course content, code that is worth more than you are paying, customer support in case you are stuck and if all of that isn’t enough, you are also getting a 30Day money-back guarantee.\nAre you excited about becoming a real game developer? Then don’t hesitate and get started in the course right now!\nOur co-instructor Mohammed Basem will go through all the details and explain to you all the difficult game-building concepts.\nAll the lectures have been prepared by our in-house game developer and YouTuber JafarJ.\n\n\n30-DAY FULL MONEY-BACK GUARANTEE\nThis course comes with a 30-day full money-back guarantee. Take the course, watch every lecture, and do the exercises, and if you feel like this course is not for you, ask for a full refund within 30 days. All your money back, no questions asked.",
      "target_audience": [
        "Anyone who wants to start building multiplayer games",
        "People who want to learn coding in a fun way",
        "Game developers who want to build FPS multiplayer games"
      ]
    },
    {
      "title": "Create Old Arcade Games With Unity Game Engine",
      "url": "https://www.udemy.com/course/make-mobile-games-for-kids-with-unity/",
      "bio": "Learn How To Create Old Arcade Games Like Pacman, Arkanoid, Space Shooter And Others Using Unity Game Engine",
      "objectives": [
        "Learn Intermediate Scripting",
        "Learn Advanced Scripting",
        "Program And Solve Complicated Problems Using C#",
        "Create Simple Menus",
        "Use Two Dimensional Arrays"
      ],
      "course_content": {},
      "requirements": [
        "Anyone Who Knows Programming And Wants To Learn Game Development(You Will Need To Learn Unitys Interface)",
        "Knowledge About C# Programming Language(It Does Not Have To Be Advanced Knowledge But You Should Be Comfortable Writting Your Own Code)"
      ],
      "description": "*** Course Updated April 15 2017 ***\n\nLeveraging Unity's build in 2D tools we are going to take a look at how can we create some of the most popular arcade games.\nWe are going to dive directly into game development so pre-knowledge is required. I'm going to assume that anyone who takes this course knows C#(You don't have to be an expert coder but I do expect that you know what are classes, objects, inheritance, arrays among other things).\nYou will also benefit from my super fast response if you have any issue that you are stuck with(I check Udemy forums every day if someone posts a question). Oh and all the students taking the course will also be there to help you!\nAll project files will be included and you are free to use them for anything that you like, personal or commercial use!\nThe Games That We Are Going To Create Are:\nBrick Breaker\nBrick Breaker is the remake of the famous Arkanoid game where you have a paddle that you can move in order to hit the ball and the ball bounces off that paddle. The goal of the game is to hit all the bricks that are in the game and when the last brick is hit the game is over. We are going to see how can we leverage the power of unity's physics system in order to make the ball move in our level and how can we calculate the direction where the ball needs to go when we hit the paddle.\n\n\n\nSpace Shooter\nSpace Shooter games exist since 1980, and they are very popular. In our game we are going to take a look at how can we create a space shooter game with all of its features. We are going to implement scrollable background to simulate an infinite background effect, we are going to spawn enemies which are going to have their own AI and they are going to try and destroy our ship. The ship that we are going to control is going to be able to move left and right and shoot the attacking ships.\n\n\n\nMinesweeper\nOld and famous windows game where you need to click on the mine field in order to win the game, but be careful if you stumble upon a mine then game over!! We are going to see how can we dynamically create levels e.g easy, medium and hard, and how can we layout our mines through our code. We are going to use two dimensional arrays in order to store the mine fields, and we are going to use the indexes e.g rows and columns to retrieve those mine fields. We are going to use the famous Flood-Fill algorithm which is the algorithm that is used in order to create games such as minesweeper.\n\n\nPacman\nThe good old Pacman was released back in the 1980s, its a cool game where you need to feed the pacman but in the same time avoid the monsters attacking pacman. The most interesting thing that we are going to learn is the AI implemented for the monsters. We are going to program the movement of the monsters so that they determine on their own where they want to go. We will use linecasting to achieve this feature.\n\n\n\nEnroll Now!! You Will Not Be Disappointed!!",
      "target_audience": [
        "Anyone Who Has Created At Least One Game In Unity Or Any Other Game Engine",
        "Experienced Game Developers",
        "Anyone Who Knows Programming And Wants To Learn Game Development(You Will Need To Learn Unitys Interface)"
      ]
    },
    {
      "title": "Unity: From Master To Pro By Building 6 Games",
      "url": "https://www.udemy.com/course/create-a-2d-platformer-game-with-unity/",
      "bio": "Take Your Unity Skills To The Next Level And Become A Pro Game Developer By Building 6 Games From Scratch",
      "objectives": [
        "Learn Intermediate Scripting",
        "Learn Advanced Scripting",
        "Program And Solve Complicated Problems Using C#",
        "Create Menus",
        "Use Two Dimensional Arrays",
        "Use Lists",
        "Calculate And Draw Projectile Paths",
        "Edit The Physics System",
        "Use Physics 2D Materials"
      ],
      "course_content": {
        "Introduction": [
          "Introduction And The Course Overview",
          "Downloading Unity",
          "Installing Unity And Taking A Look At Its Interface"
        ],
        "Pin The Circle": [
          "Pin The Circle Game Preview",
          "Importing Assets And Configuring The Circle And Needle",
          "NeedleMovementScript",
          "Detecting Collision Between The Needle And Cirle",
          "Rotating The Circle",
          "Adding UI Elements And Preparing The GameManager",
          "Scripting Our GameManager",
          "Creating Main Menu",
          "Adding Score",
          "Finishing Touches"
        ],
        "Jump Hero": [
          "Jump Hero Game Preview",
          "Importing Assets And Creating Player Animations",
          "Colliders, Prefabs And Rigidbodies",
          "Preparing The Jump Logic",
          "Jumping",
          "GameManager",
          "Lerping And Creating New Platforms",
          "Creating Main Menu",
          "Creating Game Over Panel",
          "Ending The Game When The Player Dies",
          "Creating Our Score System",
          "Power Bar"
        ],
        "Basketball Shooter": [
          "Basketball Shooter Game Preview",
          "Importing Assets And Creating Our Prefabs",
          "Setting Up Our Gameplay Scene",
          "Creating Main Menu",
          "Main Menu Controller",
          "Selecting A Ball",
          "Creating Balls",
          "Setting Up The ShootScript",
          "Programming Our ShootScript",
          "ShootScript Continued",
          "Finishing ShootScript",
          "Preparing Sound Effects",
          "Ball Count System"
        ],
        "Puzzle Game": [
          "Puzzle Game Preview",
          "Enumerations",
          "Two Dimensional Arrays",
          "Get And Set Accessors",
          "Importing Assets And Slicing Our Sprites",
          "Creating Menus",
          "Programming Our Menus",
          "Helper Classes",
          "GameManager",
          "Loading The Puzzle",
          "Shuffling Puzzle Pieces",
          "Checking For Input",
          "Wrapping Things Up"
        ],
        "Throwing Birds": [
          "Throwing Birds (Angry Birds Style Game) Preview",
          "Importing Assets And Creating Our Prefabs",
          "Creating Our Level",
          "Creating Our Sling Shoot",
          "Brick Script",
          "Game Variables And States",
          "Bird Script",
          "Camera Follow",
          "Preparing Our SlingShoot Script",
          "SlingShoot Script Functions",
          "Finishing Our Sling Shoot Script",
          "Game Manager",
          "Finishing Game Manager",
          "Camera Move",
          "Destroyer And Parallax Scroller",
          "Creating Menus",
          "Pig Script",
          "Wrapping Things Up"
        ],
        "Beans Crusher": [
          "Beans Crusher(Candy Crush Style Game) Preview",
          "Importing Assets, Creating Animations And Prefabs",
          "Bonus Utilities",
          "Game Variables",
          "Candy Script",
          "Match Checker",
          "Candy Array Part 1",
          "Candy Array Part 2",
          "Candy Array Part 3",
          "Altered Candy Info",
          "Candy Array Part 4",
          "Candy Array Final Part",
          "Moving Forward With Our Match Checker",
          "Check Horizontal2 and Horizontal3",
          "Vertical Matches",
          "Finishing Up Our Match Checker",
          "Candy Manager Part 1",
          "Candy Manager Part 2",
          "Candy Manager Part 3",
          "Candy Manager Part 4",
          "Candy Manager Part 5",
          "Candy Manager Part 6",
          "Candy Manager Part 7",
          "Wrapping Things Up",
          "Creating Main Menu"
        ],
        "Updates": [
          "Loading Scenes",
          "OnLevelWasLoaded",
          "Setting Sprites Compression At True Color",
          "Rigidbody IsKinematic",
          "Rigidbody Simulated Property",
          "Common Mistake While Animating In Unity",
          "How To Change The Screen Size In Game Tab"
        ]
      },
      "requirements": [
        "Free Unity3D Software",
        "Knowledge About C# Programming Language(It Does Not Have To Be Advanced Knowledge But You Should Be Comfortable Writting Your Own Code)"
      ],
      "description": "*** Enroll Now And Learn How To Create Your Own Candy Crush Style Game And Angry Birds Style Game From Scratch ***\n\n*** THIS COURSE IS NOT FOR BEGINNERS, so make sure you have a prior knowledge of Unity game development and programming before you join this course ***\n\nA sequel to our Mastering 2D Games In Unity: Build 6 Fully Featured Games From Scratch Course!!\nAs a sequel to a course that already covers the basics of Unity and C#, in this course we are going to take it straight to the point, so if you are a complete beginner we do advise you to take a look at our other course which will help you understand unity and game development.\nAs always we are using practical approaches in teaching game development, so in this course we are going to build 6 games from scratch!!!\nPin The Circle Game\n\nWe are going to start with a simple game called Pin The Circle. In the game we have a circle that is rotating and we need to shoot all our needles in the circle but we must avoid touching other needles in that process. We are going to create a main menu for the game, implement shooting mechanics, spawn a specific number of game objects for a specific level, and see how can we effortlessly create levels for our game in order to make it challenging to our players.\nJump Hero Game\n\nMoving forward with a more complicated game we are going to create a game called Jump Hero. In this game we have platforms on which our hero stands, and he needs to jump from one to another in order to progress through our game. We get one point if we land on a platform without falling down. We are going to see how can we implement the players jump, how can we spawn new platforms for the player to jump and how can we move the camera to the next platform in order for our player to see the next platform and jump on it. We are also going to implement a main menu and a player died panel which is going to show us our score when player dies.\nBasketball Shoot Game\n\nThe next game is even more complicated and its called Basketball Shoot. In the game we have a basketball which we are going to shoot by dragging our mouse or our finger on the screen and we need to score a point in order to progress in the game. We are going to implement main menu and ball select system which will allows us to chose one of the multiple balls that we have in the game. When we drag our ball we are going to create a projectile path which is going to show us where our ball is going to land when we release our button and we are also going to implement a ball scoring system.\nPuzzle Game\n\nNext we are going to create a puzzle game where we are going to slice an image that we import and then we are going to shuffle the pieces of that image so that we form a puzzle. The player will be able to move the puzzle pieces left, right, up and down in order to rearrange them in the correct order so that he can form a whole image.\nAngry Birds Style Game\n\nAfter that we are going to create the good old Angry Birds game. We are going to see how can we shoot our birds to hit the bad piggies and score points. We are going to see how can we implement a slightly different technique in order to draw the projectile path and we are going to see how can we implement the game mechanics for our Angry Birds Game.\nCandy Crush Style Game\n\nAnd finally we are going to create a Candy Crush Clone game. We are going to implement the mechanics of matching 3 equal items in order to score in our game and destroy the matched candies. We are going to use two dimensional arrays to position our candies in the game, and we are going to see how can we implement different algorithms in order to find the equal matches. We are going to implement a nice main menu and a score system which will reward our player when he crushes 3 or more candies, and if he crushes more than 3 candies we are going to give him a bonus candy which will crush a whole row or column when its crushed.\nYou will also benefit from my super fast response if you have any issue that you are stuck with(I check Udemy forums every day if someone posts a question). Oh and all the students taking the course will also be there to help you!\nAll project files will be included and you are free to use them for anything that you like, personal or commercial use!\nIf you are already using unity, this course is going to take you to the next level of your game development skills.\n\nWhat You Will Learn\nAdvanced C#\nSolve Complicated Problems in C#\nHow To Use Two Dimensional Arrays\nConfiguring Game Sprites\nCreate Menus\nAnimate Menus\nUse Rotations\nCalculating And Drawing Projectile Paths\nThat and much more is awaiting for you in this course.\nWhat Is Your Risk By Taking This Course?\nNothing!! If you are not satisfied with the course, I promise I will give you a full refund of your money NO questions asked!!\n\nEnroll Now!! You Will Not Be Disappointed!!",
      "target_audience": [
        "Anyone Who Has Created At Least One Game In Unity Or Any Other Game Engine",
        "Experienced Game Developers",
        "Anyone Who Knows Programming And Wants To Learn Game Development(You Will Need To Learn Unitys Interface)"
      ]
    },
    {
      "title": "The Ultimate Guide to Game Development with Unity (Official)",
      "url": "https://www.udemy.com/course/the-ultimate-guide-to-game-development-with-unity/",
      "bio": "Created in partnership with Unity Technologies: learn C# by developing 2D & 3D games with this comprehensive guide",
      "objectives": [
        "Master beginner C# concepts, like variables, \"if\" statements, and arrays",
        "Detect collisions, receive user input, and create player movements",
        "Create power-ups including triple shots, laser beams, speed boosts, and shields",
        "Apply shaders that transform your game backgrounds",
        "Create enemies with basic AI behavior",
        "Collect and destroy game objects",
        "Implement sound effects, background music, and particle effects",
        "Activate and use Unity’s Team Collaboration service",
        "Navigate the Unity Engine and discover unique features like the Asset Store",
        "Deploy your game to over 20 web or mobile platforms"
      ],
      "course_content": {},
      "requirements": [
        "No prior programming or Unity experience is required. If you have worked in C# or Unity before, this course can help you fine-tune your game development skills.",
        "In this course, I will walk you through installing Unity on your computer. It will be helpful if you are comfortable with installing your own software.",
        "A basic understanding of mathematics (order of operations, addition, subtraction, multiplication) will facilitate comprehension of certain coding logic.",
        "Before beginning this course, you should be comfortable browsing the Web."
      ],
      "description": "** This course has been updated as of June 19, 2023! **\n\n*** Now includes the ENTIRE ultimate guide series! 20+ hours of new content added!\n\nThis course is authorized by and made in partnership with Unity Technologies.\n\nIf you are interested in developing amazing, commercial-quality games that are playable on a variety of platforms, then you've come to the right place. This Unity course is the only one of its kind that is approved by Unity Technologies on Udemy. What better way to learn how to develop games in Unity than with their authorized course? The Ultimate Guide to Game Development with Unity introduces you to the Unity Engine and to the fundamentals of C# programming. The course then dives into developing your first 2D and 3D games. You will discover how to set your games apart from the crowd by polishing them with Unity’s latest features, including post-processing effects and the animation system.\nIn this Unity course, you will:\nMaster C# concepts such as variables and if statements\nDetect collisions, receive user input, and create player movements\nCreate power-ups including triple shots, laser beams, speed boosts, and shields\nApply shaders that transform your game backgrounds\nCreate enemies with basic AI behavior\nCollect and destroy game objects\nImplement sound effects, background music, and particle effects\nActivate and use Unity’s Team Collaboration service\nNavigate the Unity Engine and discover unique features such as the Asset Store\nDeploy your game to over 20 web or mobile platforms using Unity\nAnd more!\nThis Unity course also includes over 200 interactive challenges (New Content Added Weekly!) where you can test your knowledge with concepts you've just learned. These challenges will help you build three commercial-quality games: a 2D Galaxy Shooter Game with polished sprites and cinematic effects, a 3D Click to Move Stealth Game, and a 2D Dungeon Crawler Mobile Game. Get access to the unique artwork provided by this Unity course and add sophisticated features to your games that make you look like you’ve been programming for years.\nWhy Learn Game Development with Unity?\nThe gaming industry is a $200 billion industry worldwide. By 2025, that number is expected to be near $300 billion. With Unity being the most widely used engine to develop games across multiple platforms, there has never been a better time to get into the field. As you will learn, the types of games you can create with Unity and C# are limitless. Game development makes a great hobby, allowing you to learn a new skill and play your game with family and friends. It is also an exciting and rewarding career, where plenty of successful developers, including myself, have learned the fundamentals of game development through courses like this, and not in the traditional classroom setting. Every great game starts somewhere, so why not make it yours? While people often find coding or making games intimidating, this Unity course utilizes a unique teaching method that will allow you to gain a thorough understanding of concepts while you develop your own games. Thanks to the Unity community, you’ll be able to connect with other developers, work together on new projects, and make some incredible games!\n\n\nWhy Learn From Me\nThis is the first and only Unity game development course that has been co-created with Unity Technologies on Udemy.  Because learning to code can be daunting, Unity Technologies wanted to create a course that helps new developers feel comfortable exploring the engine and developing games. I believe that the best way to learn how to code is by doing. Therefore, this is a highly interactive series that does not spoon-feed you the answers. The unique challenges integrated throughout this Unity course will ensure you not only know how to code something, but also understand the logic behind it. As a self-taught software engineer, I found that there simply weren’t any high-quality video tutorials that allowed beginners to truly grasp concepts essential to game development. To remedy this, I created my own YouTube video series focused on Unity game development, where I’ve had the privilege of helping thousands of other people grow their passion for game development.\nI’ve been working in Unity since the initial public release of version 2.6, and I’ve authored a book on Unity 3.X. Since beginning my career in software development, I’ve been fortunate enough to develop games for Cartoon Network, Adult Swim, and several indie game companies. I’ve also developed enterprise augmented reality applications for Fortune 500 companies like Coca-Cola, GE, and Thyssenkrupp. Teaching has always been a passion of mine, and I hope you will see that throughout this course.\nUpon completing this Unity course, you will understand the concepts of C# programming and be able to continue developing your own 2D and 3D games. You will also feel confident knowing that you have mastered the latest and greatest game development techniques that will propel you to success in your professional or personal aspirations.\nJoin me on this adventure today!  I’ll see you inside the course.",
      "target_audience": [
        "The ideal student for this course is someone who is interested in game development with Unity and C# and is looking for an interactive, project-based course.",
        "People interested in developing commercial quality 2D and 3D games either professionally or as a hobby.",
        "Anyone seeking an understanding of best coding practices such as organization with your project and optimal development workflow that are essential to game development.",
        "This course is not for someone who is an advanced game developer. This course is also not for students who are not interested in learning to code as you will get an introduction to the fundamentals of C# programming."
      ]
    },
    {
      "title": "Learn Unity Engine and C# by creating a real top down RPG",
      "url": "https://www.udemy.com/course/learn-unity-engine-by-making-a-top-down-rpg/",
      "bio": "Learn Unity engine and C# while developing a fast and efficient workflow for creating a top down RPG and future projects",
      "objectives": [
        "Create a 2D Top down game",
        "Create and implement RPG elements in a video game",
        "Use the latest tools from Unity Technology",
        "Learn Workflow tips to speed up the development of your games"
      ],
      "course_content": {
        "Setting up": [
          "Obtaining the required softwares",
          "Creating our layout",
          "Obtaining Art Atlas",
          "Source Code and Project Files",
          "Requesting Help"
        ],
        "Moving and Manual Collision Detection": [
          "Cropping out a player sprite",
          "Setting up the metrics of our scene",
          "Creating our first script",
          "Moving the player's sprite",
          "Collision detection, and blocking movement",
          "Creating a follow-camera"
        ],
        "Tilemap and Designing Dungeon": [
          "Cropping out floor and wall tiles",
          "Introducing the Tile Palette",
          "Creating the Main Scene",
          "Creating the Dungeon"
        ],
        "Interactive Objects and Inheritence": [
          "Collidable Objects",
          "Inheritence",
          "Collectable Objects",
          "Portal Object"
        ],
        "Saving Game's State": [
          "Creating a Game Manager",
          "Using C# Action",
          "Custom Serialization"
        ],
        "Floating Text System": [
          "Creating our Floating Text Object",
          "Creating the Manager",
          "Connecting the dots"
        ],
        "Top Down Combat System": [
          "Weapon Definition",
          "Creating a Target Dummy",
          "Introducing the Fighter Class",
          "Introducing the Mover Class",
          "Simple Enemy AI",
          "Pushing around"
        ],
        "Animator and Weapon Swing Animation": [
          "Animator, and key framed animations",
          "Calling the Animation"
        ],
        "Character Menu and the new UI System": [
          "Creating the Menu Skeleton",
          "Show and Hide Menu Animation",
          "Adding Content",
          "Coding for the Menu's Backend",
          "Upgrading the weapon",
          "Implementing the Character Selection",
          "Experience System"
        ],
        "Polishing and Adding Content": [
          "Restoring the Scene Flow",
          "Glitches in between the tiles",
          "Persisting Objects",
          "Creating an Healing Fountain",
          "Adding a Destroyable Crate",
          "Creating a Sprite Animation",
          "Creating a Hitpoint bar",
          "Adding a new Font",
          "Creating a Boss",
          "Death Flow",
          "Bugfixes and Wrap up"
        ]
      },
      "requirements": [
        "Basic coding knowledge",
        "Basic understanding of mathematics (order of operations, addition, subtraction, multiplication)"
      ],
      "description": "If you are interested in quickly developing an amazing top down RPG while learning tricks of the trade to speed up your workflow in Unity, or just looking to learn how to use the engine to its full potential then you've come to the right place.\nIn this Unity course, you will:\nDetect collisions, receive user input, and create player movements\nUse the Animator and animations to save precious coding time\nUse the new Tilemap system\nCollect and destroy game objects\n\nNavigate the Unity Engine\n\nUse C# Inheritence\nAnd more!",
      "target_audience": [
        "Anyone who wants to learn Unity",
        "Anyone who wants to learn how to create a 2D Game using very minimal and optimal art",
        "Anyone who wants to learn more about Collision Detection",
        "Anyone who wants to learn about Inheritence",
        "Anyone who wants to learn how to create a Combat System",
        "Anyone who wants to learn how to use Unity Messages",
        "Anyone who wants to learn the new TileMap tool",
        "Anyone who wants to learn Multi-Sprite Editing",
        "Anyone who wants to learn to code"
      ]
    },
    {
      "title": "Pathfinding in Unity",
      "url": "https://www.udemy.com/course/pathfinding-in-unity/",
      "bio": "implementing A* search and graph search algorithms in Unity",
      "objectives": [
        "Understand the fundamentals of graph search algorithms",
        "Implement your own basic version of A*"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Prerequisites and Course How-To",
          "Naming Conventions"
        ],
        "Constructing a Maze": [
          "Nodes and Graphs",
          "The Node class",
          "The MapData class",
          "The Graph class",
          "Neighbor Nodes",
          "NodeView",
          "GraphView",
          "Text Mapdata Part 1",
          "Text MapData Part 2",
          "Resources",
          "Image Mapdata",
          "Update: Script Execution Order"
        ],
        "Pathfinding Algorithms": [
          "Pathfinding Basics",
          "The Pathfinder class",
          "Search Part 1",
          "Search Part 2",
          "Node Arrows",
          "Path Nodes",
          "Breadth First Search",
          "Dijkstra's Algorithm",
          "Node Distance",
          "Dijkstra's Search",
          "Priority Queue Part 1",
          "Priority Queue Part 2",
          "Priority Queue Part 3",
          "Terrain Cost Part 1",
          "Terrain Cost Part 2",
          "Greedy Best-First Search",
          "A* Search",
          "Code Comments"
        ],
        "Updates": [
          "Search Routine Updates",
          "Refactored Project",
          "Case Study: Monument Valley Prototype"
        ],
        "Bonus": [
          "Credits and Acknowledgments",
          "Bonus lecture"
        ]
      },
      "requirements": [
        "Unity 3D version 2017 or above (personal FREE edition)",
        "Mac or PC",
        "OPTIONAL Photoshop or image-editing program to customize level data"
      ],
      "description": "Description\n\nThis course is designed for intermediate users of Unity (see the Prerequisites for specific topics you should be familiar with before joining).\nThough Unity comes pre-packaged with an excellent pathfinding system, we explore beyond using a black box to calculate paths through your game levels.\nPathfinding and search algorithms are a core component of game development.  If you want to level up your skills, enroll today and dive into implementing your own version of A* search!\nThrough a carefully crafted set of lectures we learn search algorithms, starting with Breadth-First Search, diving in Dijkstra's algorithm and culminating with the industry-standard A* search for pathfinding.\nAll concepts are presented with easy-to-understand visuals!\nSome other bonus features of those course:\nlearn to use text files or texture maps to drive level data in Unity\nlearn how to implement a priority queue (binary heap) in C#\nlearn to structure a small project using the MVC(Model View Controller) design pattern",
      "target_audience": [
        "intermediate Unity developers with good working knowledge of C#",
        "anyone who wants to implement graph search algorithms in Unity"
      ]
    },
    {
      "title": "Create an Idle Tycoon Game using Visual Scripting in Unity",
      "url": "https://www.udemy.com/course/idle-clicker-tycoon-game-bolt-unity-development-visual-scripting/",
      "bio": "Use the Powerful Visual Scripting Tool in Unity (formally Bolt) to Build a Fun Idle Tycoon Game. No Coding Required!",
      "objectives": [
        "Understand the power and flexibility of Bolt & Unity in making Games without Coding",
        "Utilize Design Patterns to Create Increasingly Complex Games",
        "Prototype Games Quickly Using the Bolt Visual Programming Tool & Unity",
        "Use Super Units to Organize Your Game Architecture"
      ],
      "course_content": {
        "Introduction": [
          "Introduction - Learn to Build a Fun Idle Tycoon Game using Bolt & Unity",
          "Setting up the Unity Project and Installing Bolt",
          "Creating our First Flow Machine in Bolt",
          "Capture the onClick Event from the Button and MAKE MONEY!!",
          "Create a Timer and a Progress Slider for our Game",
          "Upgrade the Layout for Our Idle Stores",
          "Refactor and Create a Flow Machine for our Stores",
          "Create a Custom Event to Update the Money in our Game Manager",
          "Learn to use Super Units to Better Organize Your Flow Machines",
          "Implement the Store Buy Button",
          "Finish Implementing the Buy Button",
          "Getting Profits From Multiple Stores and Setting up Store Name",
          "Create Managers to Automate Store Timers",
          "Refactoring and Improving Flow Graph Organization with Super Units",
          "ASSIGNMENT: Refactoring Flow Graphs",
          "Refactoring References to the Game Manager"
        ]
      },
      "requirements": [
        "You must have Unity 3d & Bolt from the Unity Asset Store",
        "A Basic Understanding of the Unity Editor and Development Concepts is Helpful",
        "A Desire to make FUN Games without Writing any code"
      ],
      "description": "Welcome to the very first Bolt  (Visual Scripting) Course on Udemy!!!\nI'm happy to release this course and look forward to your feedback. Even if you do not choose to purchase my course I strongly encourage you to give Visual Scripting (formally Bolt) a try. It's a great tool for beginning or experienced developers.\nWhy Use Vispual Scripting for Making Fun Video Games?\nDeveloping Games can be very fun and rewarding once you know how. And with Unity's Visual Scripting Tool (Known as Bolt when this course was created) it has never been easier to build full robust games without any programming.\nI've been a business application & game developer for over 30 years.  I honestly think Unity's Visual Scripting tools is one of the best that I have worked with. In this course you too will quickly see the real power of Visual Scripting as we almost effortlessly build a fun idle tycoon game like adVenture Capitalist. Even if you have never programmed before, this course will allow you to get started building the game in a matter of minutes.\nOver the past 30 years I've developed games in a variety of platforms and languages.  On Udemy alone I have successful game courses on Odoo, Python, C#, and PlayMaker. I really cannot say enough good things about Unity's Visual Scripting Engine.\nIt is easy to use and integrates nearly seamlessly with the Unity Editor.\nHow does Unity's Visual Scripting compare to Playmaker?\nIn addition to Unity's built in scripting there are several other popular visual scripting assets also available. One of the most popular is Playmaker. Playmaker allows you to use finite state machines to build games. Unity's Visual Scripting platform also provides state machine diagrams that perform much like Playmaker in managing states. The big benefit of Unity's Visual Scripting however is that the scripting flow diagrams themselves map directly to the C# and UnityEngine libraries. This gives you a great advantage if you already know C# when coming into Visual Scripting in Unity. Once I understood how to connect units and create flow graphs I was able to build games with virtually no learning curve at all as I already know C#.\nPlaymaker however uses custom actions that you use to power your state diagrams. These work well and Playmaker is a great asset. Unfortunately having to learn proprietary actions and commands is a big drawback of playMaker. Especially for those who intend to further their game development skills by learning C#.\nUnity's Visual Scripting can help you learn C#\nIf you are a new C# programmer who is finding the syntax of the code gets in your way I can't recommend Bolt enough. Even better, you can configure it to use real C# syntax in the visual units. I really enjoy how I can use real C# methods with the exact same arguments I would use in real C# scripts. It's like intellisense on steroids. This tight tie in with C# makes it that much easier to incorporate what you learn from Bolt into improving your C# skills.\nBolt allows you to focus on game design and achieving results rather than all the syntax of writing code. If you are an experienced C# developer you owe it to yourself to take a look at Bolt for prototyping and approaching game design from an alternative perspective.\nBolt offers a rich API so it is easy to integrate your own C# scripts with Unity's Visual Scripting flow graphs.",
      "target_audience": [
        "Anyone who wishes to learn how to make Video Games or Learn New Ways to Make Video Games",
        "C# Developers who wish to get more familiar with Game Design and the API's",
        "Beginning Developers who wish to learn how develop games and later transition to C# Development",
        "Developers who Learn Better Visually"
      ]
    },
    {
      "title": "Learn C++ and Make a Game from Scratch",
      "url": "https://www.udemy.com/course/complete-game-development-series-04-making-a-game-with-c/",
      "bio": "Complete Game Development Series 04 - Learn the Fundamentals of C++, Git, CMake, and Make a Game from Scratch",
      "objectives": [
        "Learn the Fundamentals of C++",
        "Make a Complete Game with C++",
        "Learn C++ Application Development Proces",
        "Adapt to Git and GitHub SCM",
        "Adapt the CMake Build Tool"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Fundamentals of C++": [
          "Install Visual Studio and C++",
          "Our First Project, Visual Studio and the Entry Point",
          "The Hello World Program, Statements and include",
          "Variables",
          "Other Variable Types and Details about Variables",
          "Baiscs of Array",
          "The Vector Type",
          "The Map Type",
          "Operators",
          "Inputs",
          "If Statement",
          "Foor Loop",
          "Using Foor Loop with Arrays and Vectors",
          "While and Do While Loop",
          "Switch and Enum Types",
          "Simple Tasks 01 Convert Miles to Kilos",
          "Simple Tasks 02 Odd or Even Number",
          "Simple Tasks 03 Count Repeated Words 01 Clean up Input",
          "Simple Tasks 03 Count Repeated Words 02 Count the Words",
          "Simple Tasks 04 Find the Smallest Number",
          "Simple Task 05 The Bubble Sort Algorithm",
          "Fundamentals of Functions",
          "Pass by Reference and the const keyword",
          "Basics of Templates",
          "Variadic Templates and Template Specialization"
        ],
        "Structures of a C++ Project and Library Linking": [
          "Building Stages of a Program and Multiple files",
          "Header Files and Inlines",
          "Separate Utility Code into A Library Project",
          "Link the Utility Library",
          "Link the Utility Library with DLL",
          "Package and Use Our Library in Other Solutions"
        ],
        "Memory and Pointers": [
          "Basic Structure of Memory",
          "Pointers",
          "Debugging and Detailed Examination of Pointers",
          "The Array Type and Pointer",
          "The Stack Memory",
          "The Heap Memory",
          "Access Violation and Memory Leaks",
          "Unique Pointer",
          "Shared Pointer",
          "Weak Pointer"
        ],
        "Classes": [
          "Basics of Classes",
          "Constructors",
          "Destructors",
          "Member Functions and Setter and Getter Pairs",
          "The Const Keyword in Classes",
          "Basics of Inheritance",
          "The Protected Keyword and Function Overriding",
          "Poly Morphism and Pure Virtual Functions",
          "Problems with Shallow Copy",
          "Deep Copy and the Move Semantic",
          "The Copy Assignment Operator",
          "Operator Overloading",
          "Move Assignment Operator and the Big Five",
          "Move Class to Header and Cpp Files",
          "Template Classes",
          "Binary Operators and the Issue with the Friend Keyword",
          "The Static Keyword in Class"
        ],
        "Git": [
          "Git and GitHub",
          "Basic History Tracking with Git",
          "Basics of Branches",
          "Reset the History and Reflog",
          "Revert Commits",
          "Merge Conflict",
          "Push our Repo to GitHub",
          "Update Local and Remote Repositories with Push and Pull",
          "Git Ignore"
        ],
        "Light Years Engine": [
          "Install CMake",
          "Using CMake to Make Our Project",
          "Setup in Linux",
          "Add Light Years Game Project",
          "Refactor the CMake Source Files and Setup Git",
          "Fetch SFML to Our Project",
          "Add Post Build Command to Copy Shared Libraries to Build Target",
          "Setup the Application Class",
          "Setup the Game Loop",
          "Setup the Rendering",
          "Entry Point and Separate Engine and Game Code",
          "Create the Core and the Logging Macro",
          "Defining Common Data Types",
          "Implement the World Class",
          "Implement the Actor Class",
          "The Object Class and Handle Object Destruction",
          "Add Rendering Sprite to Actor",
          "Use a Config File to Setup Asset Path",
          "Create the Asset Manager",
          "Setup Asset Clean Cycle",
          "Implement the Actor Transformation Interface"
        ],
        "Spaceship and Player": [
          "Create the Spaceship Class",
          "Player Spaceship and Move Input",
          "Normalize Player Input",
          "Prevent Player from Going Beyond the Window"
        ],
        "Bullet and Physics Detection": [
          "Basic Shooting Mechanics",
          "Create the Bullet Class and Spawn the Bullets",
          "Bullet Destruction and Actor Clean Cycle",
          "Fetch the Box2D Physics Engine",
          "Add the Physics System",
          "Create the Add Listener Function",
          "Setup Actor Physics Initialization",
          "Connect Overlap Events",
          "100 Implement Physics Body Removal"
        ],
        "Damage and Delegates": [
          "Implement the Health Component",
          "Introduction to the Lambda and the Std Function Class",
          "Enable Get Weak Pointer from This",
          "Create the Delegate Class and the Bind Action Interface",
          "Finish the Delegate Class",
          "Using Team ID and Apply Bullet Damage",
          "Hit Blink and Lerp Facilities",
          "Create the Particle Class",
          "Create the Explosion Class"
        ]
      },
      "requirements": [
        "Time and Dedication",
        "Passion to Game Development",
        "Experience with programming is a plus, but not required."
      ],
      "description": "In this comprehensive course, students will delve deeply into the fundamental aspects of C++, explore the language's core concepts, study the principles of Object-Oriented Programming, and achieve mastery over the intricacies of memory management. The curriculum goes beyond theoretical knowledge, extending to the creation and practical utilization of C++ libraries and executables, equipping learners with tangible, applicable skills. Emphasizing tools relevant to the industry, the course seamlessly integrates Git and CMake into the workflow, ensuring that students acquire essential instruments widely employed in software development.\n\n\nHaving established a robust foundation, the course then progresses to the dynamic creation of a complete game from scratch. This exciting phase involves leveraging C++ in conjunction with a carefully chosen array of powerful libraries. Through immersive, hands-on experiences, students not only cultivate a profound understanding of C++ but also witness firsthand its practical applications in real-world scenarios.\n\n\nUpon completing the course, participants will have garnered valuable insights and proficiency, empowering them to confidently pursue careers in software engineering for game development. Furthermore, the acquired knowledge acts as a sturdy launching pad for further studies, encompassing advanced topics like Unreal Engine and broader application development.\n\n\nThis course stands as the fourth installment in a comprehensive game development series and marks the initial exploration of C++. Importantly, students aspiring to study C++ and subsequently delve into Unreal Engine are not obliged to complete the preceding three courses in the series.",
      "target_audience": [
        "Beginners who what to learn C++ and Game Development",
        "Unity developers who want to jump into Unreal Engine but have no experience with C++",
        "Unreal Engine Developers who what to start using C++ instead of Blueprint",
        "College students who need additional material to study coding",
        "Software Engineer who are interested in game development"
      ]
    },
    {
      "title": "Model and Texture a Stylized Dungeon for Games",
      "url": "https://www.udemy.com/course/3dmotive-model-and-texture-a-stylized-dungeon-for-games/",
      "bio": "Learn the skills to create amazing models and textures to build a stylized environment from start to finish!",
      "objectives": [
        "Model and sculpt stylized assets for games",
        "Define and paint stylized materials like metal, stone, and wood",
        "Sculpt and bake normal maps from a high poly asset down to a low poly object",
        "Create Tileable textures using ZBrush and Photoshop"
      ],
      "course_content": {},
      "requirements": [
        "Any recent version of Maya or 3ds Max (The course uses Maya LT, but a modern 3d modeling app and an understanding is needed)",
        "Any recent version of Photoshop (CC is used in the course)",
        "ZBrush 4R7, or any version that includes Dynamesh",
        "3DCoat",
        "Marmoset"
      ],
      "description": "In this course we will be going through the process of creating a small stylized dungeon environment from the blockout stage to the final presentation. I will be guiding you through the process of modeling the low poly assets and show you different techniques of UVing. We will then take our assets into ZBrush where I will be showing how to define all the materials that you will find in this environment. We will use some of the ZBrush sculpts to render tiling texture flats that we can composite in Photoshop. I will then be guiding you through the process of painting the textures for a few assets so you can reproduce this process for the remaining models. Finally, we are going to set up a scene in Marmoset for the final presentation. By the end of this course, you should be able to create and understand the workflow that I use to create stylized environments like this one.\n(Students - please look under Section 1 / Lecture 1 downloads for the source files associated with the lesson.)\nMore about the Instructor:\nTobias Koepp is an accomplished environment artist in the games industry. He started his career as a student in the Netherlands where he had the chance to work as an intern at Guerilla Games for about half a year. He is now currently working on his first full-time job as a 3D artist at an outsourcing studio in Spain. I’ve always been fascinated by hand painted and stylized art and work hard to turn this passion into a job.",
      "target_audience": [
        "This course is for students that have a basic understanding of modeling, sculpting, and texturing that want to bring their stylized workflow to the next level. It’s also meant for those who have only purely painted their textures without using any normal map baking and will introduce this to their workflow.",
        "This course is not for people who expect a realistic-styled approach to the creation of an environment, as this will not be covered in this course."
      ]
    },
    {
      "title": "Houdini 16.5 - Procedural Prop Modeling - Ammo Crate",
      "url": "https://www.udemy.com/course/procedural-prop-modeling-ammo-crate/",
      "bio": "Learn to model procedurally using Houdini and Substance Painter!",
      "objectives": [
        "The ability to create propcedural props for game development.",
        "A better understanding of how to create relationships, in Houdini, to make 3D models procedural.",
        "The ability to create a single Propcedural Prop for games, with unlimited variations."
      ],
      "course_content": {
        "Introduction and Modeling": [
          "Introduction",
          "Getting Started",
          "Blocking in the Crate",
          "Complete the Crate Block in",
          "Adding Some Proceduralism",
          "Adding the Top and Bottom Supports",
          "Adding more Resolution"
        ],
        "Modeling Details": [
          "Adding Noise",
          "Creating Ropes - Part 1",
          "Creating Ropes - Part 2",
          "Reusable Rope Digital Asset",
          "Creating the Nails",
          "Adding the Clamps",
          "Creating UVs",
          "Grouping"
        ],
        "High Res Modeling": [
          "High Resolution Detailing",
          "Adding Vertex Colors",
          "Exporting for Texturing"
        ],
        "Texturing in Substance Painter": [
          "Creating the Base Materials",
          "Detailing and Paint Layers"
        ]
      },
      "requirements": [
        "Basic Understanding of Houdini",
        "Basic Understanding of Substance Painter"
      ],
      "description": "In this first Installment of the Procedural Props series, we are going to take a look at how to produce a fully procedural Ammo Crate.  Everything from the geometry, uvs, and textures will be generated procedurally.\nWhen you purchase this course you get over 3 hours of video training, all the assets created in the course, as well as the complete Unity setup.\n\n\nDifficulty Level: Intermediate\nDuration: 3 hours\nFile Size: 325 megs\nAssets:\n- Houdini Project Files\n- Textures\n- Painter Project File\n- Unity Package",
      "target_audience": [
        "A beginner Houdini user that wants to see how Houdini and can be used to crete Procedural Props for games!",
        "An experienced Modeler who would like to get a better understanding of how to incoporate Procedural Modeling into their pripeline."
      ]
    },
    {
      "title": "Unreal Engine 5- Beginner Lighting, Fog, and Post Processing",
      "url": "https://www.udemy.com/course/ue5lighting/",
      "bio": "I'll teach you the basics of lighting scenes in UE5, in this beginner friendly game development course!",
      "objectives": [
        "Overviews for each individual light",
        "How to build lighting and avoid common errors",
        "How to use fog, and other atmospheric effects",
        "Basics of using post-process volumes",
        "How to fully light a scene in multiple different styles"
      ],
      "course_content": {
        "The Basics": [
          "Installing Unreal Engine 5",
          "Creating a new Project",
          "Basic Hotkeys and Engine Navigation",
          "Importing Objects to use in your Projects"
        ],
        "Lighting Settings Overviews": [
          "Enabling/Disabling Lumen and Raytracing",
          "Fundamental Lighting Settings, and Point Light Settings",
          "Spotlight Settings Overview",
          "Rect Light Settings Overview",
          "Directional Light Settings Overview",
          "Sky Light Settings Overview",
          "Building Lighting, Common Errors, and adjusting Lightmaps",
          "Creating Emissive Materials"
        ],
        "Fog , Atmosphere, and Post-Processing Overview": [
          "Creating our Demo Scene",
          "Exponential Height Fog Settings Overview",
          "Sky Atmosphere Basic Overview",
          "Post Process Volume Overview"
        ],
        "Lighting our scene": [
          "Lighting walkthrough 1, \"Dreamy Sunset\"",
          "Lighting walkthrough 2, \"Night Time\""
        ],
        "Conclusion": [
          "That's all, now go make something awesome!"
        ]
      },
      "requirements": [
        "Basic understanding of UE4, or 5 will be useful, but not required"
      ],
      "description": "If you're a game developer looking to level-up your lighting abilities in Unreal Engine 5, then you're in the right place!\nIn this course I'll teach you everything you need to know to start lighting beautiful scenes, by taking advantage of all the different light types, as well as teach you the basics of post-processing, and fog.\n---------------------------\nIf you don't have any experience in Unreal Engine 4, or 5, I've got you covered!  I've dedicated part of this course to teaching the basic knowledge needed to complete this course.  You'll learn how to install the engine, how to add objects to your new projects, and even how to navigate the engine and edit levels!\nOnce you learn the basics, or if you already have some experience, we'll hop into learning all of UE5s lighting tools!  I'll teach you the basic universal lighting settings that you'll need to know about for all your projects.  I'll show you how to use global illumination methods, and how to switch between different ones like Lumen and ray tracing.  I'll explain each individual light type so that you can see how the unique settings of each function.  As well as basic lighting, I'll get into some other crucial parts of lighting your scene, like building lighting, and how to avoid common errors.\nAfter learning those tools, we'll dive into learning the basics of the exponential height fog, and post-processing effects that we can use to spice up our scenes.  And finally, with all of the knowledge you've gained throughout the course, I'll demonstrate how we can put all these tools together by walking you through the lighting of two scenes from scratch!\n---------------------------\nIf this sounds like something you're interested in, I look forward to teaching you the basics of lighting scenes in Unreal Engine 5!",
      "target_audience": [
        "Beginner game developers, that want to level up their lighting skills"
      ]
    },
    {
      "title": "Unity & Blender Masterclass: Make a 3D Zenda Game!",
      "url": "https://www.udemy.com/course/build-the-legend-of-zenda-game-in-unity3d-and-blender/",
      "bio": "Learn to build a game in Unity®. Create the game's art from scratch in Blender.",
      "objectives": [
        "Build a 3D \"Legend of Zenda\" game in Unity® from scratch.",
        "Navigate the Unity® editor.",
        "Code in C#.",
        "Use Blender and navigate its interface.",
        "UV map and unwrap your models.",
        "Build 3D models for the game in Blender.",
        "Integrate the art from Blender into Unity®.",
        "Build video game levels.",
        "Create your own materials.",
        "Learn the basics of animation."
      ],
      "course_content": {
        "Introduction": [
          "Download Unity",
          "Gameplay!"
        ],
        "T01. Introduction to Unity": [
          "1.1 Introduction",
          "1.2 Unity Editor",
          "1.3 Moving a Cube",
          "1.4 Materials",
          "1.5 Lights",
          "1.6 Particle System",
          "1.7 Applying Physics",
          "1.8 Asset Store"
        ],
        "T02. Introduction to Coding": [
          "2.1 Introduction",
          "2.2 Variables",
          "2.3 Methods",
          "2.4 If Blocks",
          "2.5 Loops"
        ],
        "T03. Introduction to Inputs": [
          "3.1 Introduction",
          "3.2 Key Presses",
          "3.3 Moving a Player",
          "3.4 Jumping",
          "3.5 Moving Forward",
          "3.6 Cycling Cameras"
        ],
        "T04. Introduction to Prefabs": [
          "4.1 Introduction",
          "4.2 Introduction to Prefabs",
          "FAQ on Instantiating Objects",
          "4.3 Random Angles",
          "FAQ on Destroying Objects",
          "4.4 Explosion Effect",
          "4.5 Adding Explosion Effects"
        ],
        "01G. Player Movement": [
          "g1.1 Creating a Project",
          "g1.2 Designing the Player",
          "g1.3 Moving the Player",
          "g1.4 Key Input",
          "g1.5 Activating Physics",
          "g1.6 Jumping",
          "g1.7 Double Jump Block",
          "g1.8 Velocity",
          "g1.9 Velocity Optimizations",
          "g1.10 Looking Around"
        ],
        "02G. Weapons": [
          "g2.1 Designing a Sword",
          "FAQ on Sword Rotation",
          "g2.2 Swinging the Sword",
          "g2.3 Moving the Sword Back",
          "g2.4 Retreating the Sword",
          "g2.5 Designing the Bomb",
          "g2.6 Bomb Script",
          "g2.7 Exploding the Bomb",
          "g2.8 Throwing Bombs",
          "g2.9 Bow",
          "g2.10 Swapping Weapons"
        ],
        "03G. Enemies": [
          "g3.1 Simple Enemies",
          "g3.2 Strong Enemy",
          "g3.3 Hit Area",
          "g3.4 Patrolling Logic",
          "g3.5 Shooting Enemy",
          "g3.6 Enemy Bullet",
          "g3.7 Damaging the Player"
        ],
        "04G. Camera and User Interface": [
          "g4.1 Camera",
          "g4.2 Game Interface",
          "g4.3 Health Bar",
          "g4.4 Main Menu"
        ],
        "05G. Terrains": [
          "g5.1 Terrain Basics",
          "g5.2 Painting the Terrain",
          "g5.3 Trees and Grass",
          "g5.4 Water",
          "g5.5 Flare and Camera Effects"
        ]
      },
      "requirements": [
        "To follow along with these tutorials, you will need the following programs: Blender v2.78 (for 3D modeling and texturing), Photoshop or a free program like Gimp (for 2D art and some texturing), and Unity® 5.4.3f1 (for game set-up and coding).",
        "Unity® and Blender are free to download. Please download and install Unity® and Blender before purchasing this course.",
        "This course was recorded on a Mac computer, but you can use Unity® and Blender on a PC."
      ],
      "description": "\"This course is a great way to get introduced to coding and bringing the game together from a full SLDC stance. The instructors are responsive, and the Q&A sections are extremely helpful. 100% worth the time invested to learn through this course.\" -Derek H.\n\"I learned so much from taking this course about Blender and Unity and making games in general. Thanks for such an awesome course!\" - Joseph D.\n\"Before this course I only knew basic coding. During this course, mostly due to the great explanations, I learned so much about coding. Looking forward to taking more courses of Mammoth after I make this game shine for my 2 daughters who loved to play every bit of the game during the course.\" ⭐ ⭐ ⭐ ⭐ ⭐\n\"Very comprehensive tutorial for fans of Zelda and Metroidvania games. Goes straight into basic coding with C#, very brief and more of a refresher than a course on C#, then goes straight into coding the game with movement controls, camera controls, AI, ability acquisition, dungeon completion, and designing with Blender. Lessons are straight to the point, easy to follow, and perfect for people who are learning the more intermediate to advanced coding techniques required for these games. Extremely impressed; would learn again!\"\n\"I really like the way the instructor explains the syntax of the code. He is thorough and explains how the syntax works as he shows you how to write it and what it does and how it functions. Need more instructors like him...\"\n---------------------------------------------------------------------------------------------------------------------------\nIn this course, you learn how to build a 3D game with Unity® and Blender. This course is unique because we make both the code and the art for the game from scratch.\nLearn the fundamentals of designing, coding, and modeling a 3D game.\nDesign the game \"The Legend of Zenda\" and its functionality in Unity®.\nLearn how to code in C# and build video game levels.\nWhy Unity®?\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the 3D models for the game in Blender. You build all the art assets for the game, including the characters, weapons, cannon, dungeon, and temple. You learn how to integrate your art from Blender into Unity®.\n\"At the first glance, I was not very amazed, but when I saw the curriculum and methods used in the classes, I am certain that one can take as much as possible out of this course into a real world example. The course teaches you: Unity from ground up C# Programming in general Blender modeling So you don't have to understand Unity nor programming nor Blender. The pace is more on the slow side, but it is very easy to grasp and pick up. It is a great tutorial package with A HUGE library of steps. Highly recommended!\"\n\"The programming portion is very well explained. The instructor provides very good examples on how C# programming is performed on objects. I'm enjoying the Blender portion of the course. The development of a character in Blender is explained very well and I've learned many new techniques for UV Mapping the character.\"\nWhy Blender?\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nThe pace is more on the slow side, but this course is very easy to grasp and pick up. It is a great tutorial package with A HUGE library of steps.\nEven if you're not an artist, you can make basic art models. You may have heard of Axiom Verge and Stardew Valley. These games are million-dollar successes. But did you know that only one person made each?\nUsually it takes a whole team of people to build a game. But creators Thomas Happ and Eric Barone developed and designed their games by themselves. Now they're millionaires. You can do it, too.\nLet's get started!",
      "target_audience": [
        "Anyone who wants to learn Unity® 5.4.3f1 or Blender v2.78.",
        "Anyone who wants to learn game development.",
        "This course assumes you know a little about Unity® 5.4.3f1 and Blender v2.78."
      ]
    },
    {
      "title": "Create a Low Poly Game using Unity, Blender and MagicaVoxel",
      "url": "https://www.udemy.com/course/create-a-low-poly-game-in-1-hour-using-unity-and-blender/",
      "bio": "Create a cool looking, low poly game in just one hour using Unity, Blender and MagicaVoxel.",
      "objectives": [
        "Create a game from scratch"
      ],
      "course_content": {
        "Introduction & Software Installation": [
          "Introduction",
          "Software Installation & Scripts Download",
          "Additional Help"
        ],
        "Game Creation": [
          "Project Creation & Folder Setup",
          "Player & Ghost Model Creation in MagicaVoxel",
          "Obj and Scale Fixes",
          "Player Animation in Unity",
          "Click To Move",
          "Terrain Creation in Blender",
          "Terrain Painting in Blender",
          "Terrain Navmesh Baking",
          "Enemy AI in Unity",
          "Basic User Interface",
          "Camera Follow",
          "Tree Model Creation in Blender",
          "Rock Model Creation in Blender",
          "Tree & Rock Placement and Navmesh Baking",
          "Lighting and Post Processing"
        ],
        "Script Explanations": [
          "Animesh",
          "ClickToMove",
          "Health and Player",
          "EnemyAI"
        ]
      },
      "requirements": [
        "Comfortable using a PC"
      ],
      "description": "Always wanted to create a cool looking game from scratch but haven't had the time to wade through tons of tutorials just to get started?\nWell this course is definitely for you!\nNo messing around, no preamble (apart from this text!?), we just get going and get as much done as we can in one hour. You will be surprised how much you can do with the right guidance.\nWe will use Blender to create terrain, trees and rocks, MagicaVoxel to create our characters and pull them all together using Unity into an awesome looking low poly game that you can call your own, and did I mention that we do all this in one hour?\nThis course will give you the confidence to kickstart your game development career.",
      "target_audience": [
        "Any budding game developer"
      ]
    },
    {
      "title": "Unity C# Programming: Ultimate Guide to Game Scripting",
      "url": "https://www.udemy.com/course/cs-unity-beginner/",
      "bio": "Become a professional Unity Programmer and learn to write quality C# Code by creating amazing 2D-Games.",
      "objectives": [
        "Become a professional C# Programmer. No prior Programming experience required!",
        "Master the Unity Game-Engine",
        "Create playable 2D-Games with Unity and C#",
        "Use Physics, Audio and interactive Userinterfaces in your Unity games",
        "Learn shortcuts and professional workflows for Unity and Visual Studio",
        "Master the Math for Moving and Rotating Objects in Unity"
      ],
      "course_content": {},
      "requirements": [
        "Students should install Unity and Visual studio to follow along. There are A LOT OF PRACICE EXERCISES throughout the course with downloadable Exercise-Projects. I want you to follow along!"
      ],
      "description": "Start programming professional code for your Games\nIf you want to create your first Games the Unity - Engine and C# are the right tools for the job. The Unity - Engine is used by many successful Indie and Triple-A Titles and this course is the best way to get a fundamental understanding of Unity and the C# programming language.\n\n\nCreate Games the way you imagine them\nMost Hobby-Gamedevelopers struggle with the Programming-Aspect their games and thus are very limited in what mechanics they can implement.\nMy goal is to unleash your creative freedom by giving you the tools you need to code the games you want to code with Unity and C#.\n\n\nBy the end of this course you will have programmed at least a Console-Game, an Obstacle-Course and a Shoot em up.\nI am a devout follower of a practical approach to programming.  So this course will be primarily project-based. You won't just learn dry theory and forget everything within a matter of days but instead apply the learned concepts with practical exercises and projects within the Unity - Engine and C#.\n\n\nWhat makes me qualified to teach you?\nMy name is Andreas Metz and I have a Master's Degree in Science for educating Computer Science & Psychology. I have been teaching Game-Programming with Unity and C# for more than 10 years now and as a result I have plenty of experience in what works and what doesn't when it comes to learning how to code.\n\n\nMy promise to You\nThis course will be rather demanding. Programming is no easy topic but if you stick to it and do the exercises and projects yourself you will aquire an excellent understanding of the Unity Game-Engine and have the skills to implement your own 2D-Games.\n\n\nWhat is this Unity - C# Course all about?\nIn this Course you'll not only learn the Essentials of C# and Unity but also how to code with the mindset of a professional Game-Programmer.\n\n\nThis course will cover everything you need to know to start developing your own games with Unity including:\n\n\nBasics of C# and Console Applications\nVariables\nCreating Console-Applications\nIf-Statements\nLoops\nCollections\nFunctions / Methods\nWorkflows in Visual Sudio\nUnity\nUnity - Editor - Basics\nSetting up Unity Projects\nUsing Physics\nBasic Scripting in Unity\nDifferences between classical C# development and Unity\nMoving Objects\nCreating/Destroying Objects\nHandle Collisions\nAudio\nFire Projectiles\nExport Projects\nMultiple Levels\nTimers & Cooldowns\nUser Interface (Text, Buttons, HP-Bars...)\nVector-Math for more complex movement\nRotating Objects\nCommon Pitfalls in Unity\nProfessional Workflows for Unity - Programming\n\n\nGo ahead and click the enroll button, and I'll see you in lesson 1!\nCheers,\nAndreas",
      "target_audience": [
        "Complete Beginners. Programming experience is helpful but in no way required.",
        "Hobby developers who want to create their own game.",
        "Gamedesigners or Artists who want to get an understanding of Programming so they can finally create their own game.",
        "People who want to break into the industry and learn professional workflows for the Unity-Engine.",
        "Experienced Programmers who want to learn how to professionally work with Unity."
      ]
    },
    {
      "title": "Unity Game Tutorial: Board Game - Ludo 3D",
      "url": "https://www.udemy.com/course/unity-game-tutorial-board-game-ludo-3d/",
      "bio": "Learn how to create the board game Ludo 3D with Unity Game Engine.",
      "objectives": [
        "Create a 3D Ludo Game from scratch with Unity Engine.",
        "C# - Lists, Arrays, for loop, foreach loop, while loop,co-routines, statemaschines ...",
        "Node System to move on with a stone.",
        "How AI works and plays alone.",
        "Player input."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The Concept & Unity Settings": [
          "The Ludo Concept",
          "Unity Setup & Import Assets"
        ],
        "The Playfield": [
          "The Route #1",
          "The Route #2",
          "The Outer Route",
          "The Final Routes",
          "The Bases"
        ],
        "Player Stones": [
          "The Stone Selector",
          "The Nodes Script",
          "Stone Variables",
          "Creating the Full Route",
          "Finish the Full Route",
          "Stone Movement #1",
          "Stone Movement #2"
        ],
        "GameManager": [
          "Player List",
          "Statemaschine",
          "Instance & some Variables"
        ],
        "AI Programming": [
          "CPU rolls Dice",
          "Red Stones Setup",
          "Check Start Node #1",
          "Check Start Node #2",
          "Leaving the Base",
          "Update Node & GameManager",
          "Check Possible Move",
          "Check Possible Kick Move",
          "Make a Move #1",
          "Make a Move #2",
          "Adding the other Stones",
          "Switch Players",
          "GameManager Update",
          "CPUs can move"
        ],
        "More Game Mechanics": [
          "Return kicked Stone",
          "Protect After Kick",
          "Recap",
          "Re-Roll when diced 6",
          "Hopping Stones",
          "Hopping from and to Base Node",
          "Check for Win"
        ],
        "Human Player": [
          "Dice Button & StateMaschine",
          "Selector Management",
          "Roll Dice #1",
          "Roll Dice #2",
          "Roll Dice #3",
          "Roll Dice #4",
          "Move Stones"
        ],
        "Physical Dice": [
          "Model Setup",
          "Make it physical",
          "Dice Sides",
          "Dice Script #1",
          "Dice Script #2",
          "Dice Script #3",
          "Dice Script #4",
          "Roll the Dice",
          "Final Steps"
        ],
        "Game Visuals, Scenes & Final Touches": [
          "Info Window",
          "Random Player Starts",
          "Menu Scene #1 - Interface",
          "Menu Scene #2 - Toggle Selection",
          "Menu Scene #3 - Start Button",
          "Load Choosen Players",
          "Save The Winners",
          "Game Over Scene",
          "Game Over Screen Update"
        ]
      },
      "requirements": [
        "You need a PC or Mac.",
        "You need Mouse and Keyboard.",
        "You need to know how to handle a PC or Mac.",
        "Basic knowledge in C# is always helpful.",
        "Basic knowlege in Unity Engine always helps."
      ],
      "description": "In this Course you'll learn how to create the board game Ludo 3D with Unity Engine. Board games a quite popular even on mobile or pc. I will show you step by step how you can create Ludo.\nThis course is a Beginner course, so if you have trouble in any case, write me a message or Q&A, and i'll help as best as i can.\nIf you are beginner, you might have some trouble to follow, but the videos will guide you through the complete course. Don't forget you only become better if you repeat things and keep on learning!\nSo we create Systems which will give us the freedom to:\nC# (Monodevelop)\nA path system to create our own playfield\nA statemaschine to handle all players / cpus\nA node system to know who is where\nAI which is able to play completely alone\nUnity (2018.2)\nwe create a playfield\nwe create a GameManager\nwe create a main menu scene where we can pick who wants to play\nwe create a game over scene to see who are the first 3 players\nCourse Material\nI provide the following Material with the Course:\n1x Node 3D Model\n1x Stone 3D Model\n1x Dice 3D Model\nYou have to write the code on your own, i do not provide the final scripts!\nAll other graphics for Menu's, Icons, Images or Buttons need to be created on your own.\nAll Materials i provide are for education only and should not be in your final release!\nConclusion\nIn the end of this course you will have a fully functional Ludo 3D Game.\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner\nVideo Course Length: ~7 hours\nUnity Version required: 5.3+",
      "target_audience": [
        "You want to learn, how ludo can be created.",
        "You want to create/finish your first or any game at least.",
        "You want to move to the game industry, but need to start anywhere."
      ]
    },
    {
      "title": "Unreal 4 Material Shaders: All You Need to Get Started",
      "url": "https://www.udemy.com/course/unreal4-materials-101/",
      "bio": "A Practical series where we make all manner of material designs",
      "objectives": [
        "Learn to create material through practical demonstrations of all shader types and designs"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Material UI and Theory": [
          "The Material Editor UI and the Options",
          "Material PBR Pins Overview",
          "Material Functions"
        ],
        "Opaque": [
          "The Basic Material",
          "Substance Material",
          "Flexible Wood",
          "Flexible Metal",
          "Lava",
          "Vertex Paint Blending",
          "Angle Based Blending",
          "Floating Rocks (World Position Offset)",
          "Scifi Panel",
          "Triplanar / World Aligned Textures"
        ],
        "Masked": [
          "Simple Hologram",
          "Invisible (Hide Stuff)",
          "Dithered Opacity"
        ],
        "Translucent": [
          "Simple Glass",
          "Water (Opaque)",
          "Water (Translucent)",
          "Simple Particle for VFX"
        ],
        "Decals": [
          "Decals Overview"
        ],
        "Light Functions": [
          "Light Function Basics",
          "Sunlight Cloud Shadows"
        ],
        "Human Shaders": [
          "Skin Talk (No Practical)"
        ]
      },
      "requirements": [
        "A Basic understanding of Unreal will be helpful",
        "A Understanding of texturing in general (not specific to UE4) will also be useful"
      ],
      "description": "In this series I will be taking you with the setup of a large number of different materials to teach you how to utilise the Unreal 4 material system in a practical way.  We will start with some theory on how to use the material UI, the PBR workflow, and addons to the system such as layers and material functions. Then we will move into practical demonstrations, creating new materials each video to cover as many different elements and designs as we can.\nAcross the series we will look at:\nOpaque\nTranslucent\nMasked\nLight Functions\nDeferred Decals\nWe will not be exploring UI, Post Process, Volume or Skin shaders in this series as those fall into a more advanced category",
      "target_audience": [
        "Beginner to Intermediate developers looking to learn how to use the Unreal material system"
      ]
    },
    {
      "title": "Unity: Particles from beginner to advanced!",
      "url": "https://www.udemy.com/course/unity-particles-from-beginner-to-advanced/",
      "bio": "Take your games to the next level by recreating amazing particles seen in many pupular games nowadays.",
      "objectives": [
        "Create amazing particles used in AAA games.",
        "Advance your games to the next level with stunning particle effects."
      ],
      "course_content": {
        "Particle System Introduction": [
          "Particle System Introduction Part I",
          "Particle System Introduction Part II"
        ],
        "Fire Particle": [
          "Fire Particle Part 1",
          "Fire Particle Part 2"
        ],
        "Learn particles by recreating effects from the Legend of Zelda Wind Waker!": [
          "Introduction and preview",
          "Ground Pound Particle",
          "Explosion Particle",
          "Polishing our explosion particle",
          "Consistency with particles"
        ],
        "Environmental Particles": [
          "Create a snow falling particle effect!",
          "Create a rain falling particle effect!",
          "Leaves falling from a tree effect."
        ],
        "Realistic Explosion Effect": [
          "Preview of Effect and setup information.",
          "Creating the base of our explosion effect.",
          "Adding chunks to our Explosion Effect.",
          "Adding Sub Emitters to our chunks!",
          "Adding Sparks to our Explosion.",
          "Final Touches"
        ],
        "Lightning Particle Effect": [
          "Lightning Particle Effect Part 1",
          "Lightning Particle Effect Part 2",
          "Lightning Particle Effect Part 3"
        ],
        "Arcade Explosion": [
          "Arcade Explosion Part 1",
          "Arcade Explosion Part 2",
          "Arcade Explosion Part 3",
          "Arcade Explosion Part 4",
          "Arcade Explosion Part 5"
        ]
      },
      "requirements": [
        "Have a computer that can run Unity.",
        "Have Unity installed."
      ],
      "description": "In this course we will teach you everything you need to know about the Unity particle system.\nYou will learn how to create particles on examples, this means that we will take particles from other games as inspiration, and recreate those so you can get a better understanding of how they were made.\n\nParticles and special effects are an important part of every game and as a game developer you should take the time to learn as much about them as you can.\n\nNo coding involved, we will just be using Unity's built in particle editor.",
      "target_audience": [
        "This course is for game developers who want to learn more about particles in Unity.",
        "For people who wish to take their game development skills to the next level with amazing particles.",
        "Beginners and professionals alike."
      ]
    },
    {
      "title": "Unreal Engine 5 Blueprints - The Ultimate Developer Course",
      "url": "https://www.udemy.com/course/ue5-ultimate-bp-course/",
      "bio": "Code Your First Four Game Projects in Unreal Engine 5 with Blueprint Visual Scripting - From Beginner to Advanced!",
      "objectives": [
        "Create complete games of different genres including flying shooters, 3D platformers, 2D side scrollers, and vehicles .",
        "Program gameplay with Blueprints, without needing to write code.",
        "Get free, high quality assets for levels, characters, props and effects into your game projects.",
        "Blueprint best practices for development, including optimization, speed, memory, and project structure.",
        "Unreal Engine's modeling and rigging tools.",
        "Create effects with Niagara Systems and MetaSounds.",
        "Understand Unreal Engine Materials and create Materials from pro texture maps.",
        "Manage dependencies, the impacts of Tick and Casting, async loading of assets, soft object references and soft class references."
      ],
      "course_content": {},
      "requirements": [
        "No experience necessary. Start as an absolute beginner.",
        "A desire to learn how to make video games!",
        "A computer with internet access.",
        "Must meet the minimum system requirements to run Unreal Engine 5."
      ],
      "description": "This is the Ultimate Blueprint course for Unreal Engine 5.\nIn this course, you will start with absolutely no experience in game development whatsoever. All of the important terms and concepts in game development will be introduced to you and explained carefully and in detail. By the end, you will have four small game projects of different genres, ranging from 2D to 3D, and you'll understand the underlying principles needed to make any creation you can imagine.\nThe course starts you off as a complete beginner, but experienced developers will also benefit from this course, as many best practices and advanced features are covered throughout.\nThe course begins at the beginning - downloading the Epic Games Launcher, where we will install Unreal Engine 5, as well as gain access to the Epic Games Marketplace where we can get tons of free, high-quality assets for our games. After familiarizing ourselves with the Unreal Engine editor, learning about asset types and how to import asset files, we get some practice manipulating objects in the level and building simple game environments with free asset packs.\nWe then get started learning the basic structure of the Blueprint visual scripting system, as well as cover the fundamental math skills every game developer needs to understand. We get practice visualizing vectors in the engine with the various debug drawing Blueprint nodes.\nWith the original assets created specifically for this course, we then create our first simple game, Bad Bot - a drone flying shooter. We cover the fundamentals of Unreal Engine's class hierarchy, learning about the various game classes that come together to form a basic game - including the Actor, the Pawn, the Game Mode, and the Controller. We learn how to bind inputs from keyboard, mouse, and console controller using Unreal Engine's Enhanced Input System. This project covers spawning enemy bots, firing projectiles, and adding sound and visual effects such as impacts and explosions, before finishing the level with a boss fight.\nWe then dive deep into Unreal Engine's collision framework, with a section dedicated to the collision system in Unreal Engine. We learn how Unreal Engine handles collision, including knowledge of:\nThe physics system versus the query system\nCollision Complexity and how meshes can have both simple and complex collision and how to configure these\nHow the method of movement determines the type of interactions objects will have with each other\nSweeping collisions versus physics collisions\nCollision Enabled, Collision Object Types, and Collision Responses, and how these work together\nCustom collision channels, custom collision profiles, and optimization for performance\nBy the end of this chapter, Unreal Engine's collision framework will be completely demystified and you'll easily be able to configure the collision settings correctly so that your game object interact as intended, optimized for performance, and without invisible collision interactions affecting the game's frame rate.\nWith our newly-acquired collision skillset, we start the second game project of the course, Jetpack Journey - a third-person platformer with Kix, an original character created, rigged, and animated for this course. Kix has a jetpack, allowing us to step up our complexity, going from the Pawn class to the Character class. We learn about the Character Movement Component, and how to change movement modes from walking to flying. We implement a fully-functional jetpack with a blendspace, allowing for smooth blending of animations while flying. This project involves creating precious resources in the form of jet fuel, allowing us to implement pickups to refuel, a progress bar for the fuel percent, and moving platforms that force the player to use the flying capability. We learn about some very important concepts in this section, including:\nMovement modes, and switching to flying mode\nSingle and two-dimensional Blendspaces to blend between animation poses\nBinding inputs in the Player Controller versus the Character class\nKeeping Blueprint nodes clean and readable\nManaging class dependencies and coding best practices - we're using Blueprints, but we should still follow best practice!\nSkeletal Mesh Sockets, utilized for jetpack thruster effects\nEnforcing precious resources in the form of jet fuel, with jet fuel pickups to refill fuel\nUse of UMG (Unreal Motion Graphics) to create UI including a progress bar to display fuel percent\nThe impact of Casting on runtime performance and memory via the creation of hard references\nAnalyzing class memory size via the size map, and dependencies via the reference viewer\nReducing file size with texture compression\nLazily loading of assets at runtime and how to load assets asynchronously, using soft object and class references\nLighting and Post Processing\nThis section covers many important aspects of game development that even experienced developers aren't aware of. You're verging on intermediate-to-advanced territory with some of these!\nThe next game project introduces Unreal Engine's 2D capabilities, as we enable the built-in Paper2D plugin for 2D games. We also download the now-free PaperZD, a very important 2D plugin allowing us to use important 2D features for our games. This section's game project is a 2D dungeon-crawling side-scroller with Red Hood, a hooded 2D figure who ventures through a dark dungeon, battling skeleton minions via melee combat. We cover some valuable ground in this section, including:\nWhere to get free 2D assets, including animated characters, props, UI and environments\nCreation of sprites, flipbooks, tile sets and tile maps\nImportant settings for a 2D Unreal Engine game project\n2D level creation\nEnemy AI with the Behavior Tree and Blackboard\nCombat and combo attacks\nUse and creation of the compound data types such as enums and structures\nFloating damage numbers\nImplementing melee combat\nBy this point, you will have the skills necessary to create your own game projects, but we're not quite done yet. We wrap up the course with a final section on Unreal Engine's Chaos Vehicles! Chaos Vehicles are Unreal's physics-based vehicle system. We use original assets created specifically for this course, importing a sci-fi car and wheels into the engine. We use the engine's built-in rigging tools to create a skeleton and skin it to the mesh, before creating a fully-functional chaos vehicle. We end by implementing enter/leave functionality for the car, by migrating the vehicle into our Jetpack Journey project so Kix can enter and leave the vehicle. We learn:\nCreation of Skeletal Meshes from Static Meshes\nRigging and skinning, creating a vehicle skeleton and physics asset\nCreation of a fully-functional chaos vehicle with keyboard/mouse and console controller input (using Enhanced Input)\nCoverage of Chaos Vehicle settings including torque/rpms, friction, front/rear/all-wheel drive, front/rear wheel steering, and more\nMigrating the vehicle into our Jetpack project\nChanging possession of Pawns/Characters to enter and exit the vehicle.\nBy the end of this course, you will have gone from absolute beginner to having intermediate/advanced skills. You will understand the principles necessary to create game projects on your own. You will have hands-on practice, as well as theoretical knowledge underlying every tool and concept used throughout this course.\nYou will also have access to our Druid Mechanics Discord Community, a community of over 23,000 students of all skill levels, all interacting, conversing, and helping each other throughout their game development journeys.\nAfter this course, you will fully understand Unreal Engine's architecture and class hierarchy. If your aim is to develop your own games, or even to further your career or learning journey, or move on to tackle Unreal's C++ system, this course will prepare you and equip you with the skills needed to do so.\nYou will gain lifetime access to the course for a single, one-time fee. You will have access to all updates and patches made to the videos.\nIf you're ready to learn how to make your own games, this course is ready for you.\nSee you soon!",
      "target_audience": [
        "Complete beginners to game development.",
        "Those interested in making games in Unreal Engine.",
        "Those interested in game animation, visual effects, sound effects, and materials.",
        "Those interested in programming gameplay without writing code. Blueprints only!"
      ]
    },
    {
      "title": "Unreal Engine 5 : 7 Course in 1 ultimate mega course UE5",
      "url": "https://www.udemy.com/course/unreal-engine-5-7-course-in-1-ultimate-mega-course-ue5/",
      "bio": "fighter jet , tank , helicopter , ship , destruction , FPS , platforms all in one course with unreal engine 5",
      "objectives": [
        "Fighter jet game mechanics",
        "Radar and Sam missile system",
        "M1 Tank game mechanics",
        "Artilleries",
        "Helicopter game mechanics",
        "Anti air gun",
        "Ship game mechanics",
        "Chaos destruction",
        "APC game mechanics",
        "FPS shooter game mechanics",
        "AI for enemy",
        "Third person game mechanics"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "01.For absolute beginners": [
          "01.Section introduction",
          "02.Install unreal engine",
          "03.Create game",
          "04.Navigating through level",
          "05.Position in level",
          "06.Rotating and scaling",
          "07.Content drawer",
          "08.Importing",
          "09.Materials",
          "10.Blueprint",
          "11.Event graph",
          "12.Variables",
          "13.Location",
          "14.Event tick",
          "15.Vector variable",
          "16.Timers",
          "17.Flip flop",
          "18.Boolean",
          "19.Platform",
          "20.GameMode",
          "21.Character class",
          "22.Spring arm and camera",
          "23.Input mapping context",
          "24.Input action",
          "25.Going forward and backward",
          "26.Move left and right",
          "27.Look around",
          "28.Jump",
          "29.Animation blueprint",
          "30.Animation blueprint event graph",
          "31.State machine",
          "32.BlendSpace",
          "33.Jump and Fall",
          "34.Land animation"
        ],
        "02.Fighter Jet": [
          "01.Create and Import",
          "02.Wheeled vehicle blueprint",
          "03.Look around fighter jet",
          "04.Wheel setup",
          "05.Aerofoil setup",
          "06.Thruster setup",
          "07.Arcade controll setup",
          "08.Vehicle setup",
          "09.Set thrust",
          "10.Interp to",
          "10.Set brake",
          "11.Handbrake",
          "12.Wheel animation",
          "13.Wheel radius",
          "14.Thrust VFX",
          "15.Engine sound",
          "16.Widget blueprint",
          "17.Widget animation",
          "18.Throttle UI",
          "19.Set pitch input",
          "20.Modify Bone",
          "21.Pitch value",
          "22.Aileron and elevator",
          "23.Finterp to for pitch value",
          "24.Roll input",
          "25.Roll aileron and elevator",
          "26.Finterp to for Roll",
          "27.Yaw input",
          "28.Rudder rotation",
          "29.Rudder Yaw Finterp to",
          "30.Front chasis joint",
          "31.Hydrolics",
          "32.Front gear door",
          "33.rear doors",
          "34.Left gear",
          "35.Right gear",
          "36.Timeline for gears",
          "37.Open and close gears",
          "38.Check altitute",
          "39.Missiles and hardpoints",
          "40.Missile Reload system",
          "41.Other Missile Done",
          "42.Missile blueprint",
          "43.Missile meta sound",
          "44.Missile sound attenuation",
          "45.Missile explosion",
          "46.Shoot missiles",
          "47.Kill camera",
          "48.Missile rotation",
          "49.Track camera cancelation",
          "50.Target class",
          "51.homing missile",
          "52.Targetting system",
          "53.Targeting system UI",
          "54.Destroy target event",
          "55.Change target",
          "56.Third target problem",
          "57.Change target with input",
          "58.Missile UI",
          "59.Calculating GForce",
          "60.Destroy Jet",
          "61.Import sam system files",
          "62.Radar blueprint",
          "63.Radar door",
          "64.Radar rotation",
          "65.Radar lock on system",
          "66.Radar hit event",
          "67.Damage Radar",
          "68.Missile system blueprint",
          "69.Missile Looking up",
          "70.Missile rod position",
          "71.Connect radar system to missile system",
          "72.Pass target to missile system",
          "73.Missile system Rotation",
          "74.Sam missile",
          "75.Fire sam missile",
          "76.Sam system collisions",
          "77.Missile system bug fix",
          "78.destroy fighter jet",
          "79.fire all missiels",
          "80.Destroy missile system"
        ],
        "03.Tank": [
          "01.Create and import",
          "02.Tank gamemode",
          "03.Wheel setup",
          "04.Engine setup",
          "05.Look up and down",
          "06.Look left and right",
          "07.Going forward",
          "08.Going backward",
          "09.Wheel animation",
          "10.End wheels",
          "11.Tank tracks",
          "12.Tank track position",
          "13.Going left and right",
          "14.Track animation for turn in place",
          "15.Handbrake",
          "16.rotate turret joint",
          "17.Calculate delta rotation",
          "18.Gun pitch",
          "19.Crosshair widget",
          "20.Crosshair location",
          "21.Tank projectile",
          "22.Fire gun of tank",
          "23.Gun visual effect",
          "24.Add torque when firing",
          "25.Fire recoil",
          "26.Reload progress bar",
          "27.Projectile explosion",
          "28.Engine sound",
          "29.Tank tracks sound",
          "30.Tank UI widget",
          "31.Import Arty files",
          "32.Blueprint for Arty",
          "33.Distance to tank",
          "34.Target in range",
          "35.Rotate arty",
          "36.Predict where tank will be after one second",
          "37.Arty Rotation",
          "38.Arty projectile",
          "39.Arty fire VFX",
          "40.Arty gun motion",
          "41.Apply damage in radius",
          "42.Tank Health system",
          "43.Health bar",
          "44.Destroy tank",
          "45.Arty get radial damage",
          "46.Arty get destroyed"
        ],
        "04.Helicopter": [
          "01 Create project and import files",
          "02 Create helli blueprint",
          "03 Wheel setup",
          "04 Wheel radius",
          "05 Wheel rotation",
          "06 Look up Down",
          "07 Look left Right",
          "08 Handbrake",
          "09 Input action for moving up and moving down",
          "10 Engine setup",
          "11 Modify Rotor bone",
          "12 Rotor rotation",
          "13 Engine manager",
          "14 Diffrent Rotor Speed",
          "15 Finterp to",
          "16 Hovering",
          "17 Check height with line trace",
          "18 Dust VFX location",
          "19 Dust prop speed",
          "20 Engine meta sound",
          "21 Engine sound",
          "22 check if we are on the ground",
          "23 Engine shutdown",
          "24 Go forward and backward",
          "25 Move right and left",
          "26 Turn in place",
          "27 Helli missile",
          "28 Missile Sound",
          "29 Missile Explosion",
          "30 Fire missile",
          "31 Number of missile",
          "32 Reload missiles",
          "33 Missile UI",
          "34 Crosshair",
          "35 Anti air gun Blueprint",
          "36 Modify gun bones",
          "37 Calculate gun direction",
          "38 Anti air gun projectile",
          "39 Fire the guns",
          "40 Randomize direction of projectiles",
          "41 Anti air gun VFX",
          "42 Gun fire sound",
          "43 Helli health system",
          "44 Health bar UI",
          "45 Destroy Helli",
          "46 Helli tip over damage",
          "47 Projectile hit helli sound",
          "48 Destroy anti Air Gun",
          "49 Fix collision of anti air gun",
          "50 Rear rotor movement"
        ],
        "05.Ship": [
          "01 Create project and make it ready for Ship",
          "02 Ship blueprint",
          "03 Ship pontoons",
          "04 Input mapping",
          "05 Moving forward and backward",
          "06 Rotate blades",
          "07 Force Factor",
          "08 Blade rotation",
          "09 Going left and right logic",
          "10 Use force local to go right",
          "11 Go left right smoother",
          "12 Rotate ship gun",
          "13 Gun camera",
          "14 Switch between cameras",
          "15 Rotate gun with controller",
          "16 Gun line trace",
          "17 Crosshair",
          "18 Crosshiar visibility",
          "19 gun fire conditions",
          "20 Ship projectile",
          "21 Ship projectile VFX",
          "22 Fire calculated projectile",
          "23 Gun fire VFX",
          "24 Gun recoil",
          "25 Gun Fire rate",
          "26 Gun camera zoom",
          "27 Anti ship blueprint",
          "28 Box trace",
          "29 Anti ship gun pitch",
          "30 Check can shoot",
          "31 Anti Ship projectile",
          "32 Anti ship Projectile force and damage",
          "33 Anti ship VFX",
          "34 anti ship recoil",
          "35 Apply damage to antiship",
          "36 Destroy antiShip",
          "37 Ship destroyed",
          "38 Health UI",
          "39 Fix bug Radial damage is not working"
        ],
        "06.Destruction": [
          "01 Create destruction project",
          "02 APC blueprint",
          "03 Wheel class",
          "04 Look around APC with mouse",
          "05 Go forward and backward",
          "06 Handbrake",
          "07 Wheel animation",
          "08 Vehicle steering",
          "09 modify gun bone",
          "10 Calculate Gun rotation",
          "11 APC projectile",
          "12 Fire weapon",
          "13 Hit physics body",
          "14 Import destruction files",
          "15 Fracture sphere",
          "16 Fracture material",
          "17 Damage threshhold",
          "18 Damage with Projectile",
          "19 Change power of explosion",
          "20 Size of clusters",
          "21 ExplotionVFX",
          "22 Ancher fields",
          "23 Attach two Geometry collection",
          "24 Destroy ancher filed",
          "25 3D files Folders",
          "26 Fracture corner wall",
          "27 Fracture middle wall",
          "28 Fracture middle window",
          "29 Fracture glasses",
          "30 Fracture interior",
          "31 Creating bulding part01",
          "32 Creating building part02",
          "33 Creating building part03",
          "34 Creating building part04",
          "35 Creating roof top",
          "36 Roof gaps",
          "37 Damage threshold",
          "38 Convert building to blueprint",
          "39 Adding ancher fileds",
          "40 Initilization fields",
          "41 Anchor filed for windows Explaining",
          "42 Anchor filed for the rest of the windows",
          "43 Fix falling part",
          "44 Roof anchor fields",
          "45 Explain smart projectile",
          "46 Apply destructable damage",
          "47 Find touched anchor fields",
          "48 Anchor field to be destroyed",
          "49 Destroy all overlapped anchor fields",
          "50 Make destruction more real",
          "51 APC Engine sound"
        ],
        "07.FPS": [
          "01.Create project and import files",
          "02.FPS Blueprint",
          "03.Look around",
          "04.Go forward backward",
          "05.Go left and right",
          "06.Add gun",
          "07.Sprinting",
          "08.Animation blueprint",
          "09.Get character speed",
          "10.Blend spaces",
          "11.Crosshair UI",
          "12.Crosshair wings",
          "13.Aiming",
          "14.Start aiming",
          "15.Aiming animations",
          "16.Aim walking",
          "17.Anim montages",
          "18.Muzzle flash",
          "19.Firing sound and shell eject",
          "20.Line trace when we are aiming",
          "21.Line trace for not aiming state",
          "22.Return results",
          "23.Fire tracer VFX",
          "24.Fire Impact VFX",
          "25.Gun burst mode",
          "26.Print string tip",
          "27.Ammo manager",
          "28.Reload gun custom event",
          "29.Fill up the magazine",
          "30.Use Rest of the ammo in storage",
          "31.Reload manualy",
          "32.Reload animation",
          "33.Reload sound",
          "34.Firing when sprinting",
          "35.Fix running and gunning",
          "36.Ammo UI background",
          "37.Horizental box widget",
          "38.Ammo UI for magazine and storage",
          "39.Update ammo UI",
          "40.Ammo Item",
          "41.Kraken blueprint",
          "42.AI controller",
          "43.Kraken Move to",
          "44.Check if player is in range",
          "45.Kraken chase player",
          "46.Kraken get damage",
          "47.Kraken health system",
          "48.Kraken Health UI",
          "49.Kraken Health bar Visibility",
          "50.Kraken animation blueprint",
          "51.Kraken death animation",
          "52.move to decorator",
          "53.Kraken Attack task",
          "54.Kraken attack animations",
          "55.Kraken damage player",
          "56.Player health and shield system",
          "57.Player health UI",
          "58.Update health UI",
          "59.Item type",
          "60.Item pickup",
          "61.Game over UI",
          "62.Fottstep sound",
          "63.Input not working after reset"
        ],
        "08.Jumpy": [
          "00.where this course is coming from",
          "Install unreal engine",
          "Create project",
          "Create character class",
          "Create gamemode",
          "Enhanced input",
          "Move Enhanced input",
          "Going right or left check",
          "Going forward and backward check",
          "Move character",
          "Control rotation and forward vector and right vector",
          "Add controller yaw input",
          "Add controller pitch input",
          "Make movement better",
          "Jump",
          "Import animations",
          "Idle state",
          "Run state",
          "BlendSpaces",
          "Lean amount calculation",
          "Finterp to",
          "Air locomotion state machin",
          "Jump state",
          "Jump blend space",
          "Fall state",
          "Land states",
          "Land rules",
          "Create blueprint",
          "Spline points",
          "Control points",
          "Duration",
          "Create actor class",
          "Elevator settings",
          "Go to end location",
          "Begin and End overlap event",
          "Go to start location",
          "Go to end location",
          "End and start location variables",
          "Go to end location smoothly",
          "Go to start location smoothly",
          "Tolerance in distance",
          "Bug fix",
          "create stomper blueprint",
          "Timeline",
          "Timeline setting",
          "Push character",
          "Bug fix",
          "Fan blueprint class",
          "Animate Fan",
          "Timer on loop",
          "Shoot the player",
          "widget blueprint introduction",
          "Show widget in game",
          "Show Height UI",
          "update height",
          "Max height UI",
          "Update max height",
          "Progress bar UI",
          "Coin UI",
          "Increase Coin",
          "Add coin for new max height",
          "Item blueprint class",
          "Random rotation",
          "Collision settings",
          "Pick item up",
          "Pickup meta sound",
          "Game system",
          "Moving platform",
          "Elevator",
          "Stomper",
          "Fan",
          "Item",
          "Package the game",
          "Packaging fix",
          "Opening projects",
          "Door blueprint",
          "Check player",
          "Close and open door",
          "Open and close door smoothly",
          "Creating elevator V02",
          "Elevator being too fast",
          "elevator going down",
          "add jetpack mesh and FX",
          "Turn on Thruster",
          "Jetpack variables",
          "Toggle jetpack function",
          "Player hover with jetpack",
          "Jetpack reset"
        ]
      },
      "requirements": [
        "you need just unreal engine 5"
      ],
      "description": "we have seven course in one course\n\n\nfirst section is anther course just for absolute beginners\n\n\n1.fighter jet course F18\nlets learn how we can use chaos vehicle system to create a game like Ace combat game\nwe start with moving our f18 and then we will add effects for its engine like VFX and sounds\nwe learn how to fly with it and how to maneuver and shoot our targets with our missile system\nwe add more effects to our missile along the course\nnext we need enemy and for that we use a radar system and Sam system\nBy the end of the course you will be able to create your own Fighter jet game with radar system and sam system in unreal engine 5\n\n\n2.tank course M1 Abram\nIn this course we will learn everything about how to create a tank game that we start from defining engine , wheels and then we start with movement of our tank\nwe will add sound and lots of VFX to our game\nthen we will have some UI for having health bar and reload bar and rotation of turret UI\nnext we will add artilleries as enemy that can predict tank movement and shoot at it\n\n\n3.helicopter course apache\nwe will learn all about wheels how to move them rotate them and use a handbrake\nnext we learn how to use vehicle movement component to make our helicopter fly\nthen we add niagara effects for showing the distance to the ground with some dust\nnext we will use animation blueprint to rotate the blades of helicopter\nfor the enemy we will create a anti air gun so it can shoot at our helicopter and destroy it\n\n\n4.ship on ocean course destroyer\nIn this course we will create a ship game that will float on ocean\nfirst we create ocean then we import files for our ship and we create blueprint for our ship to make it float in our ocean\nthen we use ship gun so we can shoot at our enemy\nas enemy we use a anti ship artillery's that can hit ship and sink it\nwe will add some visual effects and some sound to our ship game as well\n\n\n5.chaos destruction course building\nIn this course we learn all about chaos destruction\nwe learn the basics of it\nhow to make things destroyable and how to change their property to resist more to explosion\nnext we go and create building with glasses concrete and woods\n\n\n6.FPS course M4\nIn this course we start from creating our FPS character that can move around look around at aim at things\nnext we will add some UI to our character so we now where we are aiming then we add a ammo system to manage how much ammo we have\nnext we will add firing weapon mechanics and add visual effects (Niagara system) and sound\nnext we add some UI for both ammo manager and health and shield UI with widget blueprint\nthen we will have a reload system\nthen we start with animations to play the reload animations walk and sprint animations and event firing animations\nthen we go and create a AI to be our enemy and we use a kraken skeletal mesh for it that can attack player and get to be killed as well\nnext we create a modular Item blueprint that can be ammo item , health item or shield item\n\n\n7.platforms course stack O bot\nin this course we start by creating our character blueprint and first we make it move with good animations\nthem we add jump and jet pack to it\nnext we create a door blueprint so it will open and close automatically\nnext we create two type of elevator one that get you to top and one that will fall if you stay at top of it\nnext we create a fan blueprint that can shoot the player into the sky\nnext we will create a stomper that can push player of the edge\nnext we create a moving platform that with a spline you can easily tell it where to go and get back",
      "target_audience": [
        "whoever want to develops their own game",
        "find a game developer job as unreal engine developer"
      ]
    },
    {
      "title": "C++ Fundamentals: Game Programming For Beginners",
      "url": "https://www.udemy.com/course/cpp-fundamentals/",
      "bio": "Learn to make games using industry standard C++ and Raylib",
      "objectives": [
        "How to write games in C++ from scratch",
        "The basics of Object Oriented Programming (OOP)",
        "Programming fundamentals (inc variables, loops and if-statements)",
        "Clean coding practices and principles",
        "How to compile and run your C++ games and apps",
        "Problem solving and debugging basics with C++",
        "How to use the Raylib simple games library",
        "How to animate 2D characters"
      ],
      "course_content": {
        "Codename: First Concepts": [
          "Section Intro - First Concepts",
          "PC: Installation And Setup",
          "Mac: Installation And Setup",
          "Linux: Installation And Setup",
          "The Main Function",
          "Your First Program",
          "Compiler",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Axe Game": [
          "Creating A Popup Window",
          "Data Types and Variables",
          "Data Types and Variables 2",
          "Debugging",
          "Comparison Operators",
          "Loops",
          "Clear Background",
          "Function Return Values",
          "Drawing A Circle",
          "Moving The Circle",
          "Logical AND",
          "Drawing The Axe",
          "Logical OR",
          "Collision Detection",
          "The else Statement",
          "Finishing The Game"
        ],
        "Dapper Dasher": [
          "Section Intro - Dapper Dasher",
          "Setting Up dasher.cpp",
          "Velocity and Jumping",
          "Gravity And Acceleration",
          "Preventing Air Jumping",
          "Sprite Sheets And Animation",
          "Drawing From Sprite Sheets",
          "Delta Time",
          "Animating Scarfy",
          "Hazards",
          "Moving The Hazard",
          "Animating The Hazard",
          "Multiple Nebula Hazards",
          "Custom Data Types",
          "More On Custom Data Types",
          "Using AnimData",
          "Arrays",
          "Array Of Nebula Hazards",
          "For Loops",
          "Looping Through The Hazards",
          "Lots Of Nebulae",
          "Functions",
          "Refactoring",
          "Update Animation Data",
          "Scrolling Background",
          "Duplicating The Background",
          "Drawing Midground And Foreground",
          "Finish Line",
          "Collision Detection",
          "Winning And Losing"
        ],
        "Classy Clash": [
          "Section Intro And Map Creation",
          "Top Down Game Setup",
          "Vectors",
          "Movement",
          "Drawing The Character",
          "Animating The Character",
          "Classes",
          "Getters And Setters",
          "Scope",
          "The Tick Function",
          "Character Instance",
          "Header Files And Constructors",
          "Checking The Map Bounds",
          "Constructor Arguments",
          "The Prop Class",
          "Rendering Props",
          "Prop Collision",
          "Enemy Class",
          "Class Inheritance",
          "Inheriting From BaseCharacter",
          "Overriding Functions",
          "Variable Addresses",
          "Enemy Screen Position",
          "Enemy AI",
          "Enemy Run Animation",
          "Drawing The Sword",
          "Attack!",
          "Health And Damage",
          "Strings And Displaying Health",
          "Multiple Enemies And Course Wrap-Up"
        ],
        "Continuing Your GameDev Journey": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Comfortable installing new software",
        "Excited to learn programming 🙂"
      ],
      "description": "Learning to program can be dull, and learning C++ is hard enough without having to learn a game engine as well.\nIn this course we teach you coding the fun way, by making games! And we'll be using a library so you can focus on learning pure C++ and good programming practice.\nYou'll start by compiling your first program in C++, using Visual Studio Code as your text editor.\nThen create your first axe dodging game using the Raylib library. This project introduces the basic concepts of programming: variables, loops and if-statements.\nYou expand on this in Dapper Dasher, by building a side-scrolling running game. In addition to covering essential programming concepts such as structs and functions, you'll learn to animate 2D characters and make your game pretty.\nIn Classy Clash we introduce Object Oriented Programming. You'll learn how this simplifies programming for games and how inheritance can avoid code duplication.\nWhether you're a total beginner to programming and want to learn pure C++, or an intermediate Unreal student who wants to explore making games in pure C++, this is the course for you!\nThere are no course prerequisites, though it'll help if you're comfortable installing new software and excited to learn programming!\nAll students have access to the Q&A forums where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.",
      "target_audience": [
        "Anyone looking to learn C++ in a fun way",
        "Total beginners to programming who want to learn pure C++",
        "Intermediate students of Unreal who want to explore making games in pure C++"
      ]
    },
    {
      "title": "Unreal Engine 5 : All in one UE5 master Blueprint",
      "url": "https://www.udemy.com/course/unreal-engine-5-create-video-game-in-ue5-with-blueprint/",
      "bio": "learn unreal engine 5 from very basic stuff to niagara to control rig to AI to animation",
      "objectives": [
        "Niagara System",
        "Materials",
        "Animations",
        "Blueprint",
        "AI",
        "User interfaces",
        "Landscape",
        "Enviroment"
      ],
      "course_content": {
        "Basics": [
          "01 download and install unreal engine 5 and create our first project",
          "02 move around scene and change position of objects",
          "03 change scale and rotation of an object in our scene",
          "04 world space and local space and surface snapping",
          "05 snapping , camera speed and views",
          "06 outliner",
          "07 detail panel",
          "08 content drawer",
          "discord channel"
        ],
        "Imports": [
          "09 what is static mesh and material",
          "10 diffrent kind of 3d models",
          "11 import 3d models that have material but no texture attached",
          "12 import 3d model that doesnt have textures",
          "13 import 3d model that has multiple part and multiple material",
          "14 quixel 3d models and materials",
          "3D model used in this section",
          "what you should know"
        ],
        "Materials": [
          "15.Create our first material",
          "16.Base color of material",
          "17.metalic roughness and specular in materials",
          "18.emissive color",
          "19.use textures in materials",
          "20.matrial wrap up",
          "21.Excersize - material 1",
          "22.Excersize - material 2",
          "Bonus material tutorial",
          "24.Documentation About materials"
        ],
        "Game Mode": [
          "23.Game Mode introduction",
          "24.Check vehicle and first person game mode",
          "25.Create a game mode and pawn",
          "26.add static mesh and camera to our pawn",
          "27.Event graph default nodes",
          "28.Input setting action mapping",
          "29.Axis mapping",
          "30.move our pawn in blueprint",
          "31.Find node that you want in unreal engine"
        ],
        "Character class": [
          "32.Create character blueprint class",
          "33.Character blueprint class",
          "34.add movement to our character class",
          "35.left and right movement",
          "36.jump in character class",
          "37.orginizing blueprint nodes and make comments",
          "38.Look up and down and turn left and right",
          "39.add skeletal mesh to our charactert",
          "5.2 Update : Import Asset that is not compatible with our unreal engine versi",
          "40.spring arm for camera"
        ],
        "Enhanced Input Basics": [
          "Setup Project for learning enhanced input",
          "Enhanced input for Jump",
          "Enhanced input for going forward and backward",
          "Enhanced input for moving right and left",
          "Enhanced input for looking up and down",
          "Enhanced input for looking left and right",
          "My youtube Video about Enhanced Input"
        ],
        "Animation part01": [
          "41.Animation sequence introduction",
          "42.Play animation in character class",
          "43.animation blueprint",
          "44.State machine",
          "45.fix sliding",
          "46.jump animation",
          "47.cached animation",
          "48.Excersize add run cabality to our character",
          "49.Run animation",
          "50.Blend Space 1D",
          "51.Blend Space 2D",
          "52.use Blend space in animation blueprint"
        ],
        "Lets learn more about Blueprint": [
          "53. Excersize Camera field of view",
          "54.change field of view for aiming",
          "55.change camera location",
          "56.Timeline",
          "57.Use time line to animate camera",
          "58.make timeline smooth",
          "59.lerp node",
          "60.Orginize Variables",
          "61.Collapse Node",
          "62.Macroes",
          "63.Functions",
          "64.triple A games camera movement"
        ],
        "Animation part02": [
          "65.What we are going to do for next step",
          "66.Calculate Turn left and right",
          "67.Turn Right and Turn left",
          "68.Aim offset animation",
          "69.Calculate Aim offset yaw and pitch",
          "70.seperate aim and turn animation",
          "71.Spring arm or Camera boom or camera rail",
          "72.Animate Spring arm",
          "73.Animation mongases",
          "74.Layered blend per bone",
          "75.turn right and left 90 degree with aim offset",
          "76.fix running and gunning",
          "Update 5.2 5.3 Jitteriness and turn animation fixes"
        ],
        "Resident Evil CrossHair": [
          "77.Create laser shape at the end of our gun",
          "78.Create Laser material"
        ]
      },
      "requirements": [
        "this is from very basic so you dont need to know anything"
      ],
      "description": "01. we start from very basic stuff like:\n1. Downloading and installing unreal engine 5\n2. Create different kind of project\n3. Moving around the scene\n4. Change objects position in different ways\n5. Change scale and rotation\n6. About world space and local spaces\n7. Use snapping to make our life easier\n8. Camera speed and different kind of views\n9. About outliner, detail panel and content drawer\n\n\n02. Next, we start with what is static mesh and importing different kind of them into unreal engine from different sources\nAnd we talk about different problem that can happen when you import something\nWe talk about this kind of 3d objects:\n1. import 3d models that have material but no texture attached\n2. import 3d model that doesn’t have textures\n3. import 3d model that has multiple part and multiple material\n4. quixel 3d models and materials\n03. next we start with first part of material section of this course\nin this section we learn all the basic stuff of material in unreal engine that you should know to be able to import different kind of 3d model into unreal engine\nthis is basic section for material so we learn this basic stuff about them:\n1. Create our first material\n2. What is base color\n3. metallic roughness and specular in materials\n4. what is emissive color and how we can use them properly\n5. how to use textures in materials\n6. and at the end of this very basic section ill give you some exercise\n\n\n04. Next, we start with Game mode\nFirst what is game mode and why we need them in unreal engine 5\nNext, we check some game modes like vehicle and first-person game mode\nAfter that we start creating our own game mode as third person game mode\n\n\n05. In next section we talk about how we can create playable character\nWe will talk about:\n1. what is character class\n2. how our character can move\n3. how it can jump\n4. how it can look up and down\n5. how it can have cameras to be like first person or third person\n6. how we can use spring arm properly\n06. next we talk about the animations\nfor this section again we start from very basic stuff to more advanced stuff and because this section is much more important, I divided in to two sections so you will learn them as deep as possible in right time\n1. we start with animation sequence, what it is and how we can use it\n2. we learn about playing animation where ever we want\n3. next we learn about animation blueprint, what it is and why it is very important to use it\n4. we learn about state machines\n5. how our character can walk jump run for basic movement\n6. how we can use cached animations\n7. what is blend space 1D and 2D and how we can use them\n8. and at the end ill give you some exercise so you will learn this basic part better\n\n\n07. in next section we will talk about BLUEPRINT and what you should know about them as starter\n\n\n1. how blueprint works\n2. how you can find what is in your mind in blueprint to do what you want to do\n3. we talk about camera filed of view as an example to see how we can find stuff in blueprint\n4. how we can change camera location\n5. what is timeline and how we can animate things with timeline\n6. how we can make our timeline smooth\n7. what is the lerp node and how we can use them\n8. how to organize variables\n9. what is collapse node and where to use it\n10. what are macros in unreal engine 5\n11. what is function in blueprint and how it works and how we can use them\n\n\n08. now that we know more about blueprint, we go back to animation again and we learn about:\n\n\n1. turn right and turn left animation\n2. aim offset\n3. how we can have both turns and Aim offset together\n4. animate spring arm\n5. what are animation montages and how we can use them\n6. what is layering animation with layered blend per bone and how we can use them\n7. at the end we always go back to animation blueprint as we learn new things\n09. next as a challenge and an exercise with the knowledge that we learn till here we create laser beam like laser beam of resident evil 4\n10. in next section we start with user interface\nAs a basic UI for our game we start with widget blueprint basic stuff\n1. how we can create widget blueprint\n2. what is an slot and why we should use them\n3. what is graphics options\n4. what is render transform\n5. we talk about texts in separate video\n11. in next section we use what ever we learned from last section to create our own crosshair\nWe won’t stop there and we populate some functionality for our crosshair like spreading when we shoot our gun or jumping\n\n\n12. at this point epic game release its unreal engine 5.1 and we learn how we can update our game and engine to latest version that is 5.1 at the time\n\n\n13.after that we go back to crosshair and user interface section again to add more functionality to our game like Crosshair Spread with walking and running jumping and shooting the gun and crosshair be Accurate when aiming, and for doing all of these we learn about some new nodes that are important to know like:\n\n\n1. how interp to work and how we can use them\n2. how to use timers with event and functions\n3. how to use line trace\n4. what is yaw and pitch and roll and how we can calculate them\n5. dynamic yaw and pitch offset calculation\n\n\n14. next we should learn about audio in unreal engine\nRight now, there is two type of audio engine in ue5.1 first one is sound cue and second one is meta sound\nBoth of them are important and we learn both of them in separate sections\n\n\n1. how to import audio files to unreal engine 5\n2. ambient sound options\n3. what is attenuation and how we can use them to create realistic audio\n4. how to play sound from blueprint\n5. branch in sound cue\n6. Concatenator\n7. Continues modulator\n8. Delay node\n9. Modulator\n10. How to randomize stuff with Random node\n11. What is switch node and how we should use it\n\n\n15.after this we should learn about meta sound\nNew way of sound design for games that you can use to create music too . whatever you see other games can do with music and sound you can do it with meta sound easier\nfor this section we learn all the basic next as an example we create a music with some beats after that as another example we create an ambient sound with some effects and for doing them we will learn about:\n\n\n1. How to create meta sound\n2. What is the inputs\n3. Trigger repeat\n4. Delay node\n5. What is graph input\n6. How we can control meta sound from blueprint\n7. How we can use mixers\n8. How we can use sine waves\n9. What is envelopes\n10. Randomize playing audios\n11. How to use ADSR envelope float\n12. What is BPM and how we can use it\n13. How we can use notes in meta sound\n14. How we can use beats to create music\n\n\n\n\n16. next we use all of our knowledge that learn till here to add sound to our own game\nFor our course game we add footstep audio and weapon fire shot audio\n1. First, we find some audio from internet\n2. We learn how to extract and convert audios that we find from internet\n3. We use animation sequence to play sound when foot touch the ground\n4. We learn how to use anim notifier\n\n\n17. now it is time to learn more about materials, learn more advanced stuff and during course we add to our material knowledge as well because some section we should learn it by practical example\nSo that’s why I’m saying animation section will never end and we will add to it when you learn enough about other things\nMaterial as well we will learn more with practical examples during course\nBut for this section we will learn about:\n\n\n1. Preview panel\n2. Data types with base color\n3. Roughness\n4. Texture sample\n5. Lerp in materials\n6. Texture coordinate\n7. Component mask and append Many\n8. Time node\n9. Panner\n10. Material instances\n11. Comments\n12. Sine node\n13. Sine remapped node\n14. Animate opacity\n15. Animate World position offset\n16. Why we should use Reroute node and how to use it\n17. How to control Brightness contrast saturation and tint color\n18. Switch and texture parameter\n\n\n18. now that we know enough about material and blueprint we can learn Niagara particle system in unreal engine 5.1\nFor this section we start from very basic stuff in Niagara and we will create a lot of effects and logic in there\nLike fire, smoke, bullet shell ejection, blood splatter on the ground, muzzle flash and …\nFor all of these effects first we need to learn all the basic stuff like:\n\n\n1. Create empty Niagara system\n2. Spawn rate\n3. How velocity work and how to use it\n4. We will talk about Initialize particle module\n5. Curves\n6. Shape location for spawning particle in a shape\n7. We talk about forces in Niagara system like Gravity force and drag\n8. Niagara Options\n9. We will talk about how to use subuv textures in Niagara\n10. Next, we talk about Niagara parameters\n11. Next, we talk about different type of renderer like Ribbon renderer\n12. Light renderer\n13. Mesh renderer\n14. And next we will learn how we can spawn particle on the body of our character\n19. in the next section we use all the knowledge that we learn from material and Niagara section to create some effect for our course project\n1. First, we import some static mesh for our Niagara system for shell injection\n2. we create material for that bullet and shell\n3. we create our VFX and add it to gun of our character\n4. we create muzzle flash material\n5. for creating muzzle flash VFX we use multiple Niagara emitter\n6. we design another Niagara system for when bullet hit something\n7. at the end we learn how to add decal automatically where bullet hit something\n\n\n20.because we need to create different kind of bullet, we should learn more about collision and physics in UE 5.1\nThat’s why in this section we learn about\n\n\n1. what is collision and physics in UE\n2. we learn about simple and complex collision\n3. we learn pro way of creating simple collision that is more efficient\n4. next we learn about physics simulation\n5. we learn about different kind of collision and their event\n6. after that we learn about collision preset and object types\n\n\n21.with all of our knowledge till now we create 3 kind of bullet for our course project\n1. first bullet we create it with simple adding\n2. second bullet we create it with physics and applying forces\n3. and third bullet we use Projectile movement, the library that unreal engine developers created for us\n22. next it is time to talk about lights and fogs\n\n\n1. we learn about dynamic light and baked light\n2. point light\n3. spot light\n4. rect light\n5. skylight\n6. sun Direction light\n\n\n23. now that all the basics are covered it is time to create some level\nWe will create two level\nOne just a small town and another one really big landscape\nBut as beginner we should start with small town\n\n\n1. we talk about marketplace and its asset\n2. we learn how to create blend material and how to use them. so, you can see we are learning more about material with practical case use\n3. we will start by creating some road and sidewalks\n4. next we add some puddles\n5. next we learn a lot of tricks for positioning stuff on our level\n6.\n7. next it is time to add some props\n8. next we add some light that at night turn on and at day it turn off\n9. next we add traffic lights that automatically work and turn on and off by itself\n10. we add some trees and bushes in old way\n11. next we learn some tricks about selecting object\n12. next we use foliage system as basic as possible because foliage has its own section\n13. next we use nanite to optimize our level more\n14. next we start creating our building and its lights\n15. next we add day and night cycle to our scene and we learn to do it in two different way that has their advantages\n16. next we learn about if it is day or night so all light automatically turn off during day\n17. next we talk about event dispatcher in detail\n18. next we learn how we can modalized building so we can use them multiple time where ever we want\n\n\n24. in next section we will learn all about different kind of creating landscape\nWith unreal engine and with Gaea\n1. first, we learn how we can create landscape in unreal engine\n2. next we learn how we can use landmass to create landscape\n3. next we learn about ocean in unreal\n4. next we talk about rivers\n5. next we use Gaea that is really cool and easy to use software to create really good landscape\n6. we will talk about Gaea graph and how it works\n7. next we learn how to import Gaea landscape to unreal engine\n8. next we learn the calculation for importing from Gaea to unreal\n\n\n25. next we use what we learn to create landscape for our course project\nFor that we use Gaea to create our landscape\n1. create some mountain\n2. combine and transform landmasses in gaea\n3. build our landscape\n4. import it to unreal engine with right calculation\n\n\n26. now it is time to learn all about tricks and tips for creating material for our landscape\n1. we learn where to download right textures for our landscape\n2. we learn about materials function and how we can use them\n3. we learn all about material function inputs\n4. we learn about ORD textures\n5. we learn about camera depth fade\n6. texture bombing\n7. macro variation\n8. world align texture\n27. next we should create our landscape auto material in modular way so we can use it where ever we want\n1. we create auto landscape material\n2. we use material function that we learn in last section to make everything more modular and readable\n3. we learn about parameter priority\n4. we learn how to fix landscape specular value\n5. we add some normal for our landscape\n6. we use ORD textures for our material\n7. we learn how to use layer blend\n8. we learn how to paint on our landscape\n9. we learn how to use flow path that we build in Gaea\n10. we learn about slope layer\n11. we learn how to calculate our own slope layer\n12. we learn how to use world aligned blend\n13. we learn how to create transition from grass to soil\n14. we will create snow material\n15. we learn how to use world position node\n16. we learn how we can add auto snow at top of mountain\n\n\n28. Next we should talk about foliage system. there is two type of foliage system. one of them without collision and one that is fairly new thing in unreal engine is with collision\n1. first, we talk about manual foliage\n2. next we talk about auto grass\n3. next we will talk about procedural tree spawn\n4. next we talk about Cluster, Curl distance\n5. next for optimization we talk about LOD or level of details\n6. we learn how to automatically spawn some tree somewhere and not spawn tree some other places\n7. at the end we will talk about the options that we have\n\n\n\n\n\n\n29. now it is time to talk about AI in ue5.1\n1. first, we download some asset and create some material for them\n2. next we talk about all necessary stuff that we should create for our AI to work\n3. next we talk about go to location functionality of AI\n4. we make our droid to patrol between two locations\n5. next we teach our droid to follow player if player get close to droid\n6. at the end we talk about blackboard, decorator and selector node\n\n\n30.droid is good but we need better enemy to kill. That’s why we choose to use zombie as our enemy\n1. download zombie character from mixamo\n2. we create character class for our zombie\n3. we check for head shot when we shoot the zombie\n4. we talk about physics material and surface type\n5. we create material for blood\n6. we create Niagara system for when we hit the zombie there would be some blood spill on the ground\n7. we create decal material for blood so when we shoot the zombie there will be some blood on the ground\n8. we create health bar for our zombie\n9. we use some animation for our zombie\n10. we create some hit number with some animations\n\n\n31. now that our zombie character is ready we can create some AI for it\n1. we create AI for our zombie so it can patrol between two point\n2. when our zombie sees the player, it will chase the player\n3. when zombie get close to our player it can attack our player\n4. when we shoot zombie, they will chase us as well\n5. next we download more skin for our zombie so we have multiple zombies as enemy\n\n\n32. next it is time to make our player character more beautiful with some functionality\n1. we create health bar for our player\n2. we add some animation for our player health bar when it is attacked by zombie\n3. we create some item like shield\n4. we add some pickup animation for our item\n5. next we create some glow for our item material\n6. next we create some UI to show more information about pickup item\n7. next we add some animation to that UI as well\n\n\n33. next it is time to talk about new feature in unreal engine that is called control rig\n1. first we create control rig\n2. we learn what is controls\n3. we learn some way to do creating controls fast\n4. we learn about basic IK\n5. we learn how we can create animation ourself with forward solve\n6. we learn how to edit animations that we have with backward solve\n7. next we learn Full body IK\n8. we use full body IK to put our player character foot always on stairs in runtime\n\n\n\n\n\n\n\n\n34. next we use all of our knowledge with some new node that I show you to create beautiful main menu\n1. we learn how we can create camera and how to switch between them\n2. we learn how we can create animation for our cameras with level sequencer\n3. and at the end we will create a beautiful main menu with our first level that we create together",
      "target_audience": [
        "If you want to learn game design with unreal engine 5"
      ]
    },
    {
      "title": "Build A Multiplayer Kart Racing Game - Unity 6 Compatible",
      "url": "https://www.udemy.com/course/kart-racing/",
      "bio": "Learn all about vehicle physics, game mechanics, AI, and networking for multiplayer kart racing experiences.",
      "objectives": [
        "How to use Unity's Vehicle Physics system to create a four wheeled vehicle from scratch.",
        "How to implement the Photon Networking Service in Unity Games.",
        "Artificial Intelligence techniques relevant to racing mechanics."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Join the H3D Student Community",
          "Contacting H3D",
          "FAQs",
          "Updating to Unity 6"
        ],
        "Vehicle Setup": [
          "Wheel Physics Part 1",
          "Wheel Physics Part 2",
          "Wheel Physics Part 3",
          "Wheel Physics Part 4",
          "Driving Mechanics"
        ],
        "Vehicle Special Effects": [
          "Skidding Sounds and Skid Marks",
          "Improved Skidding",
          "Wheel Smoke",
          "Brake Lights",
          "Revving the Engine Part 1",
          "Revving the Engine Part 2"
        ],
        "Basic NPC Vehicle Behaviour": [
          "Changing Drivers",
          "Waypoints",
          "Driving a Circuit with an NPC",
          "Auto Flipping",
          "Antiroll",
          "Normalised Braking Part 1",
          "Normalised Braking Part 2",
          "Acceleration"
        ],
        "Improved NPC Vehicle Behaviour": [
          "Cars on Rails",
          "Progress Tracker",
          "Controlling Tracking Braking and Acceleration",
          "Avoid Other Drivers",
          "Getting Unstuck"
        ],
        "Graphical User Interface": [
          "The Starting Signal",
          "A Couple of Challenges",
          "First and Third Player Switching",
          "The Heads Up Display Part 1",
          "The Heads Up Display Part 2",
          "The Heads Up Display Part 3",
          "Displaying the Players Name Part 1",
          "Displaying the Players Name Part 2"
        ],
        "Counting Laps": [
          "Setting up a Checkpoint System",
          "Detecting Checkpoints",
          "Displaying Checkpoint and Lap Counter",
          "Checking the Checkpoints",
          "Checking out the Player",
          "Calculating Places Part 1",
          "Calculating Places Part 2",
          "Displaying the Leaderboard",
          "Getting Cars Out of Trouble Challenges",
          "Cycling Camera through AI Players",
          "Who's the Winner",
          "Game Over",
          "Resetting the Leaderboard"
        ],
        "Custom Play": [
          "Creating Car Prefabs",
          "Creating a Main Menu Screen",
          "Selecting a Car"
        ],
        "Networking": [
          "Photon Network Setup",
          "Understanding Networks",
          "Photon Prefabs",
          "Starting a Multiplayer Game",
          "Creating Networked Players",
          "Creating Networked Names",
          "Understanding Players and Clients",
          "Starting the Race on External Clients",
          "Adding Networked AI Players",
          "Don't Forget the Leaderboard",
          "Resetting the Networked Race",
          "Final Kart Project"
        ],
        "Final Words": [
          "Some Final Words From Penny",
          "Bonus",
          "Where to now?"
        ]
      },
      "requirements": [
        "Have a solid understanding of C#",
        "Be familiar with the Unity Game Engine"
      ],
      "description": "Build a Multiplayer Kart Racing Game From Scratch in Unity will use Unity 2019 and Photon networking tools to take you step-by-step through the setup and development of your own go-kart experience.\nThe projects in this course have been tested and work with Unity 6.\nThe kart racing genre goes back to the 1980s, though it was popularised by Super Mario Kart (1992) and Crash Team Racing (1999). The genre mixes racing and arcade type mechanics with well-known fictional characters and funky tracks littered with pickups and obstacles. Creating such a game combines the skills of networking, artificial intelligence, interface design, special effects and audio.\nIn this course, Penny reveals the most popular AI techniques used for creating NPC racing character behaviour in games using her internationally acclaimed teaching style and knowledge from over 25 years working with games, graphics and having written two award-winning books on games AI. Throughout, you will follow along with hands-on workshops designed to take you through every step of putting together your own kart racing game.  You will first construct from scratch a single-player experience with intelligent NPC components and then add on networking functionality with a Photon master server to create a multiplayer game.\nLearn how to program and work with:\nCar physics and controllers built from the ground up with Unity's wheel colliders and rigid bodies;\nAI driven cars with waypoint navigation, smart acceleration & braking and avoidance behaviours;\nRace Track Mini-maps with Player positions, rear view cameras and leaderboards;\nNetworking with Photon including setting up a master server, remote procedure calls and networked object instantiation;\nCharacter selection for vehicle types and player names; and\nGraphical User Interfaces.\nContents and Overview\nThe course begins with a detailed explanation of Unity's vehicle physics system.  A four-wheeled car will be constructed from scratch using wheel colliders and rigid bodies in which every setting is explored and all possible functionality tested and put through its paces to get the right balance of skid, acceleration, braking and weight. This system will then be transferred to a top quality Kart model and placed in a racing track environment in which artificial intelligence mechanics will be added to develop non-player character vehicles who can effectively drive around the track while avoiding or in some cases aggressively bumping other players.\nYou will work your way up to a completed kart racing single player game in which one player takes on three NPCs.  Race places will be calculated and a heads-up display (HUD) containing a rear view camera, minimap and player leaderboard will be added.  You'll also learn how to implement a camera-following script that you can use to switch between players for differing points of view.\nOnce the single player game is completed, the Photon API will be used to set up a master server and then add multiplayer functionality to the game so you can then play it with your friends.  You will learn how to create your own server, send remote procedure calls to other players and instantiate networked objects, some of them AI characters.\nAt the completion of this course you will have covered a wide variety of game development techniques from artificial intelligence, networking and user interface creation.  The knowledge and skills you acquire will be applicable across numerous game genres and stand you in good stead for adding advanced functionality to your own game projects.\nWhat students are saying about Penny's courses:\nDr.Penny is a wonderful person and a true expert. All of her courses I've taken have been top notch and in my opinion there is no better teacher out there. Her upbeat personality makes you feel as if you're listening to a friend than just another monotone teacher.\nThis is my first course I've ever bought for Unity as I've tinkered for years with Unity and not really done anything , but I'm only 27% through the course and I've already learned so many new things, it's really opened my eyes to the power of Unity. I've followed Penny for a while now on YouTube and she is a brilliant instructor, very clear on the code you're writing and explaining how it all works.\nI really appreciate the clarity. I've had many dabblings with learning how to code previously and have found my knowledge comes and goes. This time around, the concepts are really sticking. There is something to the Holistic3D method!",
      "target_audience": [
        "Beginner game developers interested in seeing what goes into constructing an entire game.",
        "Experienced Unity developers wanting to know how to make their games multiplayer using the Photon Engine.",
        "All game developers wanting to know more about the artificial intelligence techniques used in character navigation and movement."
      ]
    },
    {
      "title": "Unity 3rd Person Combat & Traversal",
      "url": "https://www.udemy.com/course/unity-3rd-person-combat-traversal/",
      "bio": "Make a complete 3rd Person Combat System for an RPG in Unity!",
      "objectives": [
        "Create your own custom state machine using the state machine pattern",
        "Control the player camera using Cinemachine",
        "Use events to drive the movement and animation of the player character",
        "How to use the Unity Animator"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Community & Support",
          "Accessing Our Projects",
          "Installation & Setup"
        ],
        "State Machine": [
          "Section Intro - State Machines",
          "What Is A State Machine?",
          "Creating Our State Machine",
          "Constructors & Inheritance",
          "Testing Player State Machine",
          "Creating An Action Map",
          "Handling Inputs",
          "Input Events"
        ],
        "Basic Movement": [
          "Section Intro - Basic Movement",
          "Player Character",
          "Animator State Machine",
          "Movement Input",
          "Player Character Controller",
          "Movement Blend Tree",
          "Cinemachine Camera",
          "Camera Relative Movement",
          "Movement Refactoring",
          "Creating The Environment"
        ],
        "Melee Combat": [
          "Section Intro - Melee Combat",
          "Targeting",
          "Entering The Targeting State",
          "Selecting A Target",
          "Targeting Camera",
          "State Driven Camera",
          "Cinemachine Target Group",
          "Force Receiver",
          "Targeting Movement",
          "Targeting Animations",
          "Improved Targeting Selection",
          "Mixamo Animations Fix",
          "Player Attacking State",
          "Attack Data",
          "Combo Attacks",
          "Attacking Force",
          "Weapon Hitbox",
          "Dealing Damage",
          "Attacking State Polish",
          "Improving The Environment"
        ],
        "Enemy AI": [
          "Section Intro - Enemy AI",
          "Enemy State Machine",
          "Enemy Idle State",
          "Player Detection",
          "Enemy Chasing State",
          "Enemy Attacking State",
          "Enemy Weapon",
          "Weapon Knockback",
          "Impact States",
          "Impact State Transitions",
          "Dead States",
          "Ragdoll On Death",
          "Player Blocking State",
          "Combat Polishing"
        ],
        "Advanced Movement": [
          "Section Intro - Advanced Movement",
          "Dodging",
          "Jumping & Falling",
          "Improved Dodging",
          "Ledge Detection",
          "Ledge Hanging",
          "Climbing",
          "Bug Fixing & Polish"
        ],
        "Continuing Your Game Dev Journey": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You'll need a basic understanding of C# and the Unity engine"
      ],
      "description": "If you’re interested in learning how to make your own third person action combat game, similar to Dark Souls or Assassin’s Creed, then this is the course for you!\nUsing Unity 2022.1, you'll learn how to create your own 3rd person combat system (similar to that used in games like Dark Souls or Assassin’s Creed). It can easily be added to your RPG project, or any other 3rd person game you’re working on.\nYou’ll learn about player input, animation state machines, attack combos, dodging, target locking, cinemachine camera options, simple enemy attack AI and more.\nBy the end of the course you’ll have created your very own sandbox arena where you can hack and slash as many enemies as you like, using a 3rd person camera and control system - with either mouse / keyboard or game controller.\nThis course is aimed at a beginner plus to intermediate level. You'll need a basic understanding of the Unity interface and C# (if you've taken any of our other Unity courses then you should be good to go).\nAll students have access to the Q&A forums where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nReady to create your own combat game? Come join the course now!",
      "target_audience": [
        "If you're interested in learning how to make your own third person action combat game, similar to Dark Souls or Assassin’s Creed.",
        "It can easily be added to your RPG project, or any other 3rd person game you’re working on.",
        "If you've got some experience in Unity and are looking to level-up your skills."
      ]
    },
    {
      "title": "Unreal Engine 5 C++: Climbing System",
      "url": "https://www.udemy.com/course/unreal-engine-5-cpp-climbing-system/",
      "bio": "Build a climbing system through Movement Component, Control Rig and Motion Warping in Unreal Engine 5 using C++",
      "objectives": [
        "Use custom character movement component to extend the movement logic",
        "Learn all sorts of important math concepts like dot product/cross product for climbing calculation",
        "Use control rig to add root motion to mixamo animation",
        "Use control rig to adjust mixamo animation",
        "Understand the animation logic behind animation blueprint",
        "Utilize control rig for hand and feet IK",
        "Make use of motion warping for advanced character movement",
        "Create custom algorithms for ledge and floor detection",
        "Build a robust climbing system with clean and extendable code",
        "Create custom algorithms for different climbing condition check"
      ],
      "course_content": {
        "Introduction": [
          "Course Intro",
          "Some Common Questions You May Have",
          "Create A C++ Project",
          "How to get help?",
          "Debug Helper",
          "TObjectPtr"
        ],
        "Climbing Movement": [
          "Climbing Movement Section Overview",
          "Enhanced Input",
          "Custom Movement Component",
          "Capsule Trace",
          "Climb Trace",
          "Eye Height Trace",
          "Toggle Climbing",
          "Entering Climb State",
          "Phys Climb",
          "Process Climbable Surfaces",
          "Handle Climb Movement",
          "Cross Product",
          "Dot Product",
          "Share Task: Share Your Results",
          "Section Wrap Up"
        ],
        "Climbing Animation": [
          "Climbing Animation Section Overview",
          "Character Anim Instance",
          "Rebuild Anim BP",
          "Mixamo Animation",
          "Idle To Climb Montage",
          "Transition Between Idle And Climb",
          "Climb Locomotion",
          "Check Has Reached Floor",
          "Coding Challenge: Ledge Detection",
          "Share Task: Share Your Solution",
          "Solution: Ledge Detection",
          "Download Ledge Animation",
          "Control Rig For Animation",
          "Climb Up Ledge",
          "Fix Climb Up Right Hand Position",
          "Coding Challenge: Check Can Climb Down",
          "Share Task: Share Your Solution",
          "Solution: Check Can Climb Down",
          "Adjust Climb Down Ledge Animation",
          "Climb Down Ledge",
          "Section Wrap Up"
        ],
        "Advanced Climbing Features": [
          "Advanced Climbing Features Section Overview",
          "Getting Familiar With Control Rig",
          "Climb IK Trace",
          "Left Foot IK",
          "Right Foot IK",
          "Section Challenge: Hands IK",
          "Share Task: Share Your Results",
          "Import Vaulting .fbx",
          "Motion Warping",
          "Check Can Start Vaulting",
          "Character Vault",
          "Delegate For Climbing State",
          "Climb Input Mapping Context",
          "Chorded Action",
          "Get Last Input Vector",
          "Adjust Hopping Animation",
          "Hop Up",
          "Section Challenge: Hop Down",
          "Fix Vaulting Conflict and Interping Speed",
          "Optional Challenge: Hopping Left/Right",
          "Section Wrap Up"
        ],
        "Congratulations": [
          "Where to go from here?"
        ]
      },
      "requirements": [
        "Experience with C++ in Unreal Engine is required"
      ],
      "description": "Welcome to Unreal Engine 5 C++ Climbing System, in this course, you’ll learn how to build a robust climbing system completely from scratch with a deep understanding of how to handle the climb physics, create climb locomotion, climb up and down the ledge, hand and leg IK using control rig, vaulting mechanics, hopping capabilities and a range of other exciting features for a robust climbing experience.\n\n\nIn the first section, we’ll look into how we can handle the movement for our climbing , and start with a new enhanced input with a custom movement component to handle the basic climbing logic. Then we’ll go over how to use different traces to get hold of all the climbable surface info we need, and handle all the physics code needed in order for us to move our character in a custom movement mode. Once we have a working physics, we’re gonna process all the climbable surface info and calculate the velocity and rotation for our climbing.\n\n\nIn second section, we’re going to take care of climbing up, climbing down, climbing to the left, climbing to the right, climb up the ledge, climb down the ledge, enter and exit the climb state. We’ll begin with a charcter anim instance class in C++ and rebuilding our existing animation blueprint. Then we’ll go through the mixamo animation pipeline and look at how we can make use of mixamo converter to retarget animation. Next, we’ll handle the climb locomotion and create our own algorithms to check if we have reached the floor or the ledge.\n\n\nIn the third section, we’ll build a control rig for our hand and leg IK to fix the placement issue when we are climbing, and we’ll dive into motion warping and enhanced input system to implement features like vaulting and hopping. We’ll start with a handy climb IK trace function in our control rig, and dynamically adjust the position of our hands and feet based on the surface. Then we’ll go into motion warping and create more algorithms to check which surface is vaultable, and dynamically set our target point during runtime. After we have fully functional vaulting mechanics, we’ll dive deep into enhanced input system and look at how we can use it to create a two key action that only be triggered during climbing.",
      "target_audience": [
        "Learners who want to create climbing system",
        "Learners who want to understand vector math",
        "Learners who want to use control rig for animations",
        "Learners who want to write clean, extendable code"
      ]
    },
    {
      "title": "Learn How To Do Amazing Cloth Animation In Unreal Engine!",
      "url": "https://www.udemy.com/course/learn-how-to-do-cloth-animation-in-unreal-engine-4/",
      "bio": "Beginners Guide To Amazing Real-Time Cloth Animation In Unreal Engine! Also Learn The Basics Of Physics Asset Animation!",
      "objectives": [
        "Includes the incredibly detailed Paragon SEVAROG and Paragon NARBASH fully rigged characters!",
        "You will learn how to use the incredibly fun and powerful cloth tools in Unreal Engine in a few easy steps!",
        "You will learn the easy, simple steps to create real-time cloth animation inside of Unreal Engine 4!",
        "You will learn how to use physics assets in UE4 that will interact with cloth and clothing",
        "No additional software programs are needed to achieve cloth simulation & animation other than UE4",
        "You will learn how to create an \"Animation Asset\" from your cloth and physics character setup",
        "Use your characters in games, film, television and commercials!",
        "Easy and fun - once you know the simple steps!"
      ],
      "course_content": {
        "Introduction To Unreal Engine 4 Cloth Animation": [
          "Wardrum Scarecrow Physics Animation Example",
          "Cartoon Girl Example Cloth Animation",
          "Mannequin Toss Physics Asset Example"
        ],
        "Cloth Animation In Unreal Engine 4": [
          "Download Unreal Engine 4 & Create Your Project",
          "Download Your Paragon Characters",
          "Import Characters To Your Project",
          "Create Level & Drag Characters In",
          "Weight Painting Your First Piece of Cloth",
          "Weight Painting Your 2nd Piece of Cloth",
          "Weight Painting Your 3rd Piece of Cloth",
          "Fine Tune Your Clothing Movement In Skeleton Mode",
          "Physics Assets with NARBASH!",
          "Create NARBASH Animation Asset"
        ],
        "Advanced Cloth Animation": [
          "Introduction To Advanced Cloth Animation",
          "Create a New Third Person Project",
          "Make Sevarog a Third Person Game Character",
          "Add Cloth Settings To Your Sevarog Character: Burlap & Heavy Leather",
          "Add Burlap Cloth Settings To Sevarog",
          "Get Cloth To Drape & Drag on the Floor or Other Props",
          "Create a New Sequence & Add Animation",
          "Export Your Animation To Video"
        ],
        "Setting Up Props For Cloth Simulation": [
          "Import Starter Content To Your Project",
          "The Rock: We Will Build a Custom Collision Setting For the Rock Object",
          "The Chair: We Will Build a Custom Collision Setting For the Chair Object",
          "Congratulations On Finishing The Course!",
          "Get Your Genesis 8 Character Into Mixamo, Then Into Unreal Engine 4"
        ],
        "Resources & Bonuses": [
          "MetaHuman Creator",
          "How To Get Your FREE Genesis Character Bundles",
          "Coming Late 2021 - Unreal Engine 5!",
          "VIDEO: Preview of Unreal Engine 5!",
          "BONUS LECTURE: More Unreal Engine courses for you at HUGE discounts!"
        ]
      },
      "requirements": [
        "A copy of Unreal Engine (Free)",
        "Unreal Engine 4 - FREE (any of these versions 4.19, 4.20, 4.21 or later are required to use the Paragon Characters)"
      ],
      "description": "IMPORTANT:  Everything you'll learn in this course can be applied to the new release of Unreal Engine 5.  The new features of UE5 such as LUMEN and NANITE are not covered in this course yet, however.  You can even switch the layout of UE5 back to classic UE4 if you'd like to make it easier to follow along.  (I prefer the slick new layout of UE5 myself)\n\n\n5 stars ★★★★★\n\"The course is well organized and it's a good beginner course. I would recommend this for anybody wanting to learn the basics of unreal  engine 4 cloth simulation.\" ~Robert Shumaker\n5 stars ★★★★★\n\"There is essential info concerning clothes in UE4. I had issues about a character and asked help to Michael. His dedication to help you solve your issues is amazing. 5 stars, and I go to follow his other courses. Thanks again Michael for your professionalism.\" ~Luter Ionov\n____________________________________________________________________________________________________________________\nWHAT YOU WILL LEARN IN THIS COURSE\nIn this course you will learn the simple, easy steps to apply real-time cloth animation to your characters! Once a very difficult task, the folks at Epic Games have made this process a lot easier and actually FUN to do, right inside of Unreal Engine 4!\nWHAT IS INCLUDED IN THIS COURSE\nYou will have access to the amazing Paragon SEVAROG and Paragon NARBASH characters that are fully rigged and come complete with motion-capture animations!\nONLY A FEW SIMPLE STEPS ARE NECESSARY\nYou will be taken thru the EASY step-by-step process of painting cloth weights to create your animation.  You will learn how to use the WIND tool inside of Unreal Engine 4 to get your character's clothing to blow in the wind! (This is a little known feature)\nBest of all, the process is simple, and anyone can do it once they follow the steps!\nYOU WILL LEARN ABOUT PHYSICS ASSETS AND HOW TO CREATE AMAZING ANIMATIONS WITH IT\nIn this course you will learn about physics assets and how to set it up on your character to create amazing animations that look like it took you days to hand animate!  This is one of the hidden features of Unreal Engine 4 that few have figured out how to use.  It's amazingly powerful - you're going to LOVE IT!\nANIMATION ASSETS\nYou will learn how to create reusable animation assets that can be imported into Sequencer, blended with other animations and then exported out into a cinematic movie file!\nENROLL NOW!\nNow is the perfect time to enroll in the course and have fun learning cloth animation in Unreal Engine 4!  See you on the inside!",
      "target_audience": [
        "Artists, hobbyists, filmmakers and game developers interested in learning the powerful cloth and clothing tools in UE4"
      ]
    },
    {
      "title": "Unity Mobile Multiplayer Third Person Shooting Game",
      "url": "https://www.udemy.com/course/multiplayerthirdpersonshooter/",
      "bio": "Learn to Make Third Person Shooter Game for Mobile Devices Like PUBG From Scratch",
      "objectives": [
        "Third person shooting game from scratch",
        "Photon Unity Networking",
        "Lobby and matchmaking Programming",
        "Mobile control Implementation",
        "RPC - Remote procedure call's",
        "Raise Events - Networking",
        "Creating Teams",
        "Chatting System",
        "Spectate functionality in games",
        "Advance Lobby system",
        "Adding car and car Mobile controls",
        "Health System"
      ],
      "course_content": {},
      "requirements": [
        "Basic Understanding Of Unity3d And C#"
      ],
      "description": "Master Multiplayer Third-Person Shooter Game Development for Mobile with Unity & Photon 2\nThis course will thoroughly guide you through the development of a Multiplayer Third-Person Shooter game for mobile devices using Unity and Photon Unity Networking 2 (PUN2).\nDesigned for beginners, this course requires a basic yet essential understanding of Unity and C#, but no prior experience in multiplayer programming is needed. We'll cover all multiplayer concepts from scratch, ensuring you gain a solid and practical foundation in networked game development.\nBy the end of this course, you’ll be able to:\nBuild any type of multiplayer game\nImplement multiplayer functionality seamlessly in your existing games\n\n\nWhat You'll Learn:\nCharacter & Camera Controls\nThird-person movement & animations\nShooting & jumping mechanics\nSmooth camera movement\nVehicle Systems & Mobile Controls\nAdding a car & implementing mobile-friendly controls\nCar entry & exit system\nPhoton Networking Essentials\nLobby & match-making system\nRoom creation & joining mechanics\nRemote Procedure Calls (RPCs) & event handling\nPlayer movement & animation synchronization\nHealth system & team creation\nAdvanced Multiplayer Features\nChat system\nSpectator mode\nRaising & handling network events\n...and much more!\nIf you have any questions, feel free to reach out. Also, check out my YouTube channel \"FastSolution\" for more detailed game development tutorials!\nSee you in the course!",
      "target_audience": [
        "Beginner Unity developers who want to learn Multiplayer",
        "who want to create a 3D Third Person Shooter Game"
      ]
    },
    {
      "title": "Learn Java Creating Android Games Using the LibGDX library",
      "url": "https://www.udemy.com/course/libgdx-game-development-masterclass/",
      "bio": "Become a real games programmer. Create Games Using Java with the LibGDX Game Development Framework.",
      "objectives": [
        "Create their own games for Android",
        "Understand LibGDX and how to use it for games development",
        "Understand and use Entity Component Systems",
        "Understand Entity Component Systems and work with Ashley LibGDX extension",
        "Understand how to create reusable components for future game development",
        "Understand basics of data oriented design",
        "Understand what are Entities, Components, Systems in game development",
        "Understand different techniques of game development and find what technique is best for your next game",
        "Understand how to create professional User Interfaces using Scene2D API",
        "Understand asset loading and master asset management",
        "Understand how to create useful utilities which help to debug your game",
        "Understand how to write clean and maintainable code",
        "Understand how to use particle effects",
        "Understand how to deal with common exceptions and errors",
        "Understand how to check collision between game objects and react on collision",
        "Understand how to work with frame buffer objects",
        "Understand how to clean up and refactor code"
      ],
      "course_content": {},
      "requirements": [
        "A computer running Windows, Mac OS X or Linux",
        "Basic knowledge of Java"
      ],
      "description": "Games developers are in huge demand, with many new and exciting opportunities becoming available to programmers who understand the technology.\nAre you looking to become a games programmer, but don't know where to start?\nMaybe you are looking for a really comprehensive course on games development, but cannot decide which course to take.\nMaybe you have some skills with LibGDX or another games framework, but want to create Android games.\nWhatever the reason, this course will teach you how to become a master games programming, using LIBGDX.\n\nKeep in mind that LIBGDX is cross platform, meaning that you can then move games to other platforms\nNo previous experience is necessary.  Goran Lochert, your course instructor is an expert games developer, who has worked on many games in many frameworks.  He is also an official Oracle Java certified developer, and an official contributor to LIBGDX, the games framework used in this course to create games.\n\nHis skills and experiences with LibGDX are second to none.\nAs a result, you are learning from one of, if not the most experienced Java games developer on Udemy, meaning you can be assured that not only will you learn how to create your own games by following along in this course, but you will also learn the right way to create your game code.\nThe lack of proper programming techniques is one of the main reasons why games do not perform well, or end up really hard to maintain and update.  In addition, learning the wrong way to design and create programming code, can actually harm your career, because employers expect games programmer to write professional code, following accepted industry standards.  You will learn how to do that in this course.\nIncluded, is well over fifty hours and hundreds of videos, making this one of the most comprehensive courses of it's type.\nNothing is glossed over.  Goran goes into detail with each and every aspect of games development through the course, so that you actually understand how things work, and can then apply this to your own games projects.\nAlthough the emphasis is on Android  in this course, because the course uses LibGDX, which is cross-platform, your games can be deployed to many platforms (PC for one).\nLearning how to become a games developer, and how to code the right way, can be difficult.  By the end of this course, you will be able to create your own games, and know how to structure and code your games, the way professional programmers do.\n\nIf you are ready to join the games industry as a games programmer, then it's time to get busy learning!\nClick the button to sign up for the course and get started today.",
      "target_audience": [
        "Anyone wanting to learn how to write games for Android"
      ]
    },
    {
      "title": "Single&Multiplayer online game development Webgl's BabylonJs",
      "url": "https://www.udemy.com/course/single-multiplayer-game-development-in-webgls-babylonjs/",
      "bio": "The Extensive Webgl Series ! - Part II : Single and client - server Multiplayer Game Development Using Babylon Js",
      "objectives": [
        "Understand and use the very nice game engine ( BabylonJs ) to create 3D online games (single-player and multi-player)",
        "Learn NodeJs and Socket-io communication library"
      ],
      "course_content": {
        "Welcome To The Course !": [
          "Welcome To The Course !",
          "The Code Files",
          "Setting up the environment"
        ],
        "Basics of BabylonJs": [
          "First Scene",
          "Getting Higher Resolution",
          "Materials , Lights , and Textures",
          "Mirror Planes",
          "More about materials",
          "Height Maps",
          "Pointer Lock (FPS) and Using WASD keys"
        ],
        "Starting The Game !": [
          "Basic tank, and the follow camera",
          "Moving the tank using WASD keys",
          "Model Loading ! : Importing the dude",
          "Dude Follows Tank !",
          "Organize : The Dude Class",
          "Cloning Models : Multiple Dudes",
          "Bounding Boxes : Theory",
          "Bounding Boxes : Implementation - I",
          "Bounding Boxes : Implementation - II"
        ],
        "Still Some More ...": [
          "Introduction to physics",
          "Forces and Impulses",
          "Explosions, Gravitation, & collision callbacks",
          "Fire Cannon balls !",
          "Actions, Triggers, & ActionManager",
          "RayCasting ! : Fire Laser Beams",
          "Particle Systems !",
          "Laser & Blood",
          "Cannon Balls & Blood"
        ],
        "And Still Some More ...": [
          "The Assets Manager",
          "Loading Dudes using the Assets Manager",
          "Loading Sounds !",
          "Follow Camera For The Hero Dude - I",
          "Follow Camera For The Hero Dude - II",
          "Adjusting vertical position using rays",
          "The Free Camera's Ellipsoid Explained",
          "The First Person Shooter (FPS) Dude",
          "Creating the gun-aim (cross-hair)",
          "Fire The Gun !",
          "Multiple View-Ports",
          "Layer masks and multiple cameras",
          "Key-frame Animations ! : Animating The Camera",
          "Multiple Levels ! - I",
          "Multiple Levels ! - II"
        ],
        "Deploying To Heroku !": [
          "Deploying To Heroku !"
        ],
        "Multiplayer Games !": [
          "Introduction to the multiplayer section",
          "What is Node Js ?",
          "Installing NodeJs",
          "NodeJs modules - First NodeJs Code",
          "Creating a node http server",
          "npm and installing express",
          "Running our game using node server",
          "Introduction to websockets",
          "The socket-io library",
          "Our Multiplayer Game - I",
          "Our Multiplayer Game - II",
          "Our Multiplayer Game - III",
          "Deploying To Heroku"
        ],
        "Get My Other Courses !": [
          "Get My Other Courses !"
        ]
      },
      "requirements": [
        "Be familiar with programming, preferably in Javascript",
        "Be familiar with basic object oriented programming concepts (classes, member functions, etc)",
        "Be slightly familiar with basic web development components like basic html and the client server model"
      ],
      "description": "Welcome to The Extensive Webgl Series - Part II - Single And Multiplayer Online Client-Server 3D Game Development Using WebGL's BabylonJs.\n\nThis is the second course in my extensive webgl series. While watching the first course first is recommended, it is not a strict prerequisite for this second course.\nIn This course you will learn how to create 3D Games inside BabylonJS. BabylonJs is a very nice 3d game engine written in Javascript, that allows creating very nice games quickly and effectively to be run directly on the browser.\nThe course is divided into two main sections : The Single-player section, and the Multi-player section.\nIn The single-player section you will learn the following :\nHow to create your first scene using BabylonJs.\nHow to apply materials and lights to your scene.\nHow to use different types of cameras in your scene.\nHow to create and navigate a vehicle using WASD keys.\nHow to import models into your game and clone them.\nHow to detect and handle collisions in your game.\nHow to apply physics simulations to your object.\nHow to fire rays.\nHow to use particle systems\nHow to create a complete FPS (First Person Shooter) Game from scratch, step by step.\nHow to load sounds to your game.\nHow to use multiple cameras and multiple view ports to see multiple areas of your game at the same time.\nHow to create multiple levels inside your game.\nHow to deploy your game to a remote server.\nAnd much more...\nIn the multiplayer section you will learn the following :\nHow to use NodeJs and its node package manager (npm) to create a web server.\nWhat are websockets and how to use the popular socket-io library.\nHow to create an interactive client-server multiplayer game using node and socket-io.\nHow to deploy the multiplayer game to a remote server.",
      "target_audience": [
        "People interested in creating online 3D games on the web, both single-player and multi-player games"
      ]
    },
    {
      "title": "A gentle introduction to Google Go (Golang) for Beginners",
      "url": "https://www.udemy.com/course/a-gentle-introduction-to-google-go-golang-for-beginners/",
      "bio": "Break into programming with a gentle introduction to Google Go (Golang) for beginners!",
      "objectives": [
        "Learn the basics of programming in one of the hottest new languages - without loosing your mind!",
        "Compile and run Google Go (Golang) Programs",
        "How to learn programming for the first time!",
        "How to install visual studio code, golang and git on Windows, Macintosh and Linux systems.",
        "Really understand how computers work, what programming is and how to develop programs. The foundations of computer science.",
        "Use the Visual Studio Code, to edit, compile, debug and run our yown fully featured programs in Google Go (Golang).",
        "Be an effective beginner Google Go (Golang) Ninja! At the end of this course you will have a competent foundation in all the essential concepts of Google Go (Golang)."
      ],
      "course_content": {
        "Introduction to Google Go (Golang)": [
          "Welcome to the course!",
          "How to get the most from the course!",
          "What is google go and why would you want to learn it?",
          "What is Visual Studio code? Why use it?"
        ],
        "Getting Started with Google Go (Golang)": [
          "Installation overview and Roadmap",
          "Windows Installation for Google Go (Golang) and GIT",
          "Ubuntu Linux Installation for Google Go (Golang) and GIT",
          "Macintosh - OS X Installation for Google Go (Golang) and GIT",
          "Windows Installation for Visual Studio Code (and the Hello World Program)",
          "Ubuntu Linux Installation for Visual Studio Code (and the Hello World Program)",
          "Macintosh OS X Installation for Visual Studio Code (and the Hello World Program)"
        ],
        "Fundamental Google Go (Golang)": [
          "Your Emergency Go Parachute",
          "What is programming - Part 1- Binary and 10 kinds of people",
          "What is programming - Part 2 - Hexawhat?",
          "What is programming - Part 3 - What processing actually is.",
          "What is programming - Part 4 - How it all ties together and the power of Golang",
          "Understanding the Hello World Program - \"No chicken or egg for us!\"",
          "Variables and Constants - Part 1 - Simple Declarations and Data Types",
          "Variables and Constants - Part 2 - Example time!",
          "Variables and Constants - Part 3 - Declaration, Assignment and Initializations",
          "Expressions - Expresso? No... expressions - super important core concept here!",
          "Simple Debugging with Visual Studio Code - Part 1",
          "Section Review - Fundamental Google Go (Golang)"
        ],
        "Intermediate Beginners Google Go (Golang)": [
          "Visual Studio Code - Important Tips",
          "Loops - Part 1 - Count Down For New Years Eve! - The great setup!",
          "Loops - Part 2 - Count down from 1000? No problem. Solving the looping problem",
          "If - Part 1 - Hands on If Statements, and \"How old are you!\"",
          "If - Part 2 - Hands on If statements... and the \"else if!\"",
          "If - Part 3 - \"If .... or ELSE!\"",
          "Switch - Part 1 - \"And a partridge in a pear tree...\"",
          "Switch - Part 2 - Hands on switch!",
          "Switch - Part 3 - Fallingthrough Golang with a partridge in a pear tree!",
          "Functions Part 1 - And the introduction of the super brain!",
          "Functions Part 2 - The simplest function there ever was....",
          "Functions Part 3 - And the data came back...the very next day... and the data ..",
          "Functions - Part 4 - Pointers! By Reference! By Value! See it in action here!",
          "Understanding Scope - (No.... not the mouthwash)",
          "Section Review - Intermediate Beginners Google Go (Golang)"
        ],
        "Advanced Beginners Google Go (Golang)": [
          "Advanced Debugging with Visual Studio Code",
          "Arrays and Slices - Part 1 - Arrays... and seeing multiple!",
          "Arrays and Slices - Part 2 - Hands on Arrays",
          "Arrays and Slices - Part 3 - Slices - A slice of nice!",
          "Arrays and Slices - Part 4 - Hands on slices..... and the power within!",
          "Advanced Topics - Simple Statements (that aren't quite so simple....)",
          "For Range Loops - Processing for loops in a blink of an eye...",
          "Variadic Functions - No function ever sounded \"so cool\". Variadic...functions.",
          "Section Review - Advanced Beginners Google Go (Golang)",
          "Where to go from here!"
        ]
      },
      "requirements": [
        "Computers with 1.6 GHz or faster processor and 1 GB of RAM or more.",
        "OS X Yosemite or later for Macintosh Systems",
        "Windows 7 (with .NET Framework 4.5.2), 8.0, 8.1 and 10 (32-bit and 64-bit)",
        "Linux (Debian): Ubuntu Desktop 14.04, Debian 7 or better",
        "Linux (Red Hat): Red Hat Enterprise Linux 7, CentOS 7, Fedora 23 or better",
        "A passion to learn, and basic computer skills on how to use their computer!",
        "You will need admin access to your computer to successfully install all the tools for this course."
      ],
      "description": "Welcome A Gentle Introduction to Google Go (Golang) for Beginners!\nOur goal for you in this course is: For you to become a beginner Ninja in one of the hottest new languages called \"Google Go\" and also known as Golang.   This course is everything you need to be successful with Google Go.\nThe course is based on Google Go, Visual Studio Code and GIT.  All tools are freely available so there's no additional costs to you!\nThe course includes lectures on installation of all tools on Windows, Macintosh and Linux systems. So no matter what kind of computer you have - there's instructions for you to follow.\nIf you'd rather follow a manual on how to install, there are 6 PDF manuals giving step by step instructions on how to install the tools, totalling 123 pages of content!\nThe course includes two PDF guidebooks to help you on your golang journey as well!\nGoogle go is taking the development world by storm, because of it's system level access and it's design which gives programmers the ability to create multi-core programs.  This is the first development language really developed for the type of mutli-core cpu computers that have been in the market for the last ten years.  Created by three genius developers are google - to solve deficiencies google was experiencing with conventional computer languages.\nIn our 40+ Lectures, You Will Learn:\n\n\nAn Introduction to Golang:\nWhat is Google Go (Golang).  Why does it exist?\nWhat makes Google Go (Golang) an amazing language to learn.\nWhom this course is for, and how to get the most out of it.\nWhat is Visual Studio code, and why would you want to use it?\nHow to create your first google go program in 30 seconds (or less!) [Yes, really!]\nHow to get started with Golang:\nAn overview of Installation.\nHow to install GIT and Go Google Go on Windows, Linux and Macintosh Systems (with guide books!)\nHow to install Visual Studio Code on Windows, Linux and Macintosh Systems (with guide books!)\nHow to create and compile your first Google Go program.\nFundamental Golang:\nA resource kit (Emergency Go Parachute) of 5 resources, that will aid you on your journey so you can get unstuck if you experience trouble - and more importantly, how to never get stuck on learning Google Go in the first place. [Downloadable resource included!]\nLearn the basics of programming and what really happens - unlocking the mystery behind the scenes in an accessible way that even existing programmers should watch.  The four part lecture series on programming will turn you from a \"zero\" to a \"hero\" when it comes to actually understanding how programming works, what high level languages bring to the table and what you can accomplish using Google Go (Golang)\nLearn how Google Go (Golang) uses variables, it's fundamental datatypes, and how to compile and write Google Go (Golang) expressions.\nSimple debugging with Visual Studio Code.\nIntermediate Beginners Golang:\nHow to create multiple projects using Visual Studio Code.\nHow to write Loops in Google Go (Golang), from begging format all the way to advanced loops that include ranges or simple statements. (And yes, simple statements are an advanced topic).\nHow to write control structures, including basic if statements, advanced if statements and switches.  Our switch example especially will show a real world example of how to use the fall through keyword which can be a tricky concept for beginners and experienced programmers alike. Switch in Golang is not the same as in other languages!\nHow to write basic functions, and use them in real world examples.  Learn how Google Go (Golang) passes data into and out of functions.  Here, the lectures from Fundamental Golang really pay of in explaining the tricky concept of \"by value\" vs. \"by reference\" that often boggle experienced programmers.\nUnderstand Scope.  Learn all the rules of what variables are accessible where, and how Scope works in Google Go (Golang).\nAdvanced Beginners Golang:\nAdvanced debugging with Visual Studio code (including step into, step over, and step out)\nArrays and Slices in a four part lecture series!  You'll learn basic arrays and use them in a simple example.  Then we'll show why Slices are \"awesome\" above arrays, and how to effectively use slices.  Once you know and use slices, you'll almost never use arrays in Google Go (Golang) ever again.  But... because slices are based on arrays - it's super important to understand how they work!\nHow to use simple statements, and how they are often used in writing robust code for error handling.\nHow to write for range loops in Google go (Golang) to write very fast and efficient code that deals with slices.\nHow to write and use Variadic functions, which sound complicated - but with our amazing Ninja foundation, we make short work of the concept and fully implement a Variadic function in under seven minutes.\nAnd finally, we complete our tour of Google Go (Golang) with next steps to move from being a Ninja Beginner to becoming a full Ninja master in Google Go.  [Downloadable resource included!]\nThere's simply no better course for those that want to begin to learn Google Go and break into programming for the first time.",
      "target_audience": [
        "Students that may be intimidated to learn how to program, for the very first time.",
        "Students whom want to learn the basics of programming and Google Go (Golang) , with great examples that fully explain how go works.",
        "Students whom want to learn how to program in a fantastic new languages that is going places, and taking the world by storm. There's no better language to get started with than Google Go (Golang)!"
      ]
    },
    {
      "title": "Brick Breaker Game in most Powerful C++ graphic library SDL2",
      "url": "https://www.udemy.com/course/brick-breaker-game-in-most-powerful-c-graphic-library-sdl2/",
      "bio": "English",
      "objectives": [
        "Program your own 2d games using SDL 2.0",
        "Understand the Basic Logic of games and the \"game loop\"",
        "Do body body collision detection and resolution"
      ],
      "course_content": {},
      "requirements": [
        "To be able to follow this course, you will need a Basic skill level with coding in C++",
        "Note: SDL2 is cross platform and can be done on Windows/Linux/Mac, however this course will be taught on Windows. The course content should work on the other 2, but the projects will be different."
      ],
      "description": "In this course I'll take your Basic C++ skills, take them up a little and use them to make a Brick Breaker  game using SDL2. You'll be given code after every few tutorials to carry along\nWe are going to learn basic game development elements, such as Events, game loop, object movement,  object collision ,memory management etc and After taking this course Advance Game Programming will be 5 times easier for you guys.\nAt the end of the course you will be able to build  2D Common marketing Games and sell them...\nLet's make a game!",
      "target_audience": [
        "Anyone with a Basic level of coding and interested in learning Basic Game Programming"
      ]
    },
    {
      "title": "Unreal Engine 5 - Learn to Make a Professional Main Menu",
      "url": "https://www.udemy.com/course/unreal-engine-5-main-menu-widget-blueprint/",
      "bio": "Learn how widget blueprints work in UE5, as I teach how to create an animated main menu and graphics settings menu!",
      "objectives": [
        "How to use Widget Blueprint to make UI menus",
        "How to animate widgets to give your game a professional touch",
        "How to make a working settings menu that adjust your games graphics settings",
        "How to make a main menu"
      ],
      "course_content": {
        "How to create a main menu, and settings menu system": [
          "Creating a new level",
          "Cleaning and prepping our Level",
          "Animating and setting our camera view",
          "Widget Blueprint basics, and creating our menu background",
          "Creating our menu buttons",
          "Animating our menu buttons",
          "Explaining 'Hit Tests' and programming our 'Quit' button",
          "Programming our 'Play' button",
          "Creating our settings menu",
          "Integrating the settings menu and main menu",
          "Conclusion"
        ]
      },
      "requirements": [
        "A basic understanding of navigating Unreal Engine 4 or 5",
        "A basic understanding of Blueprint programming"
      ],
      "description": "In this course I'll show you the easiest way to create a professional main menu for your game.  The menu we'll be creating is nearly identical to the menus I've created for my own video games like Cloud Climber, and My Friend is a Raven, which have been played by hundreds of thousands of people.  That means these tools and techniques are \"battle tested\" and have proven themselves in a professional setting!\nThis course acts as a great starting point for anyone who is unfamiliar with UE5s Widget Blueprint system, and will get you up to speed on all the settings, navigation, and common errors that you'll run into, and how to fix them.  By the time you're done with this 1.5 hour course, you'll not only have created an animated main menu, with a fully functioning graphics settings menu, but you'll also have the knowledge you need to start creating many other kinds of menus and widgets for your games!\n----------------------------------------------------------------------------------------\nThis course is targeted at Unreal Engine users who already have a little bit of experience in UE4 or 5.  You don't need to be a highly advanced programmer, creating your own triple A games, but I won't be explain the basics of UE5 in this course.  I'll be skipping over things like installing the engine, navigating the engine, and won't be explaining the basics of Blueprint either.  This way, we can hop straight into the fun of learning about widgets and menus!",
      "target_audience": [
        "Game developers looking to create simple, yet elegant menus for their games"
      ]
    },
    {
      "title": "Learn Godot 4 by making 2 games",
      "url": "https://www.udemy.com/course/learn-godot-4-by-making-a-2d-game/",
      "bio": "Create your own 2D RPG & 2D Metroidvania from scratch using Godot Engine 4",
      "objectives": [
        "Learn to use Godot 4",
        "Learn how to create a complete game prototype",
        "Learn how to create a saving system",
        "Learn how to create a sword attack",
        "Learn how to create a state machine",
        "Learn how to create a map"
      ],
      "course_content": {
        "Creating our 2D Metroidvania": [
          "Installing Godot and overview of the interface",
          "Creating a simple camera",
          "Creating the player animations",
          "Coding the player movement",
          "Creating a tilemap and autotiling",
          "Coding the jump mechanic",
          "Calling the right animation through code",
          "Coding the double jump",
          "Coding the sword attack",
          "Creating a Finite State Machine to handle our states and animations",
          "Bug fix, creating an object to destroy with our sword, Signal, Area2D, Coroutine",
          "Create the background and understanding the ordering of layer with Z index",
          "Creating the enemy",
          "Coding the enemy movement",
          "Killing the enemy"
        ],
        "Finessing our 2D Metroidvania": [
          "Creating the health system of the player",
          "Bug fix and Creating the GUI",
          "Coding the GUI",
          "Using shader",
          "Create a coin to collect",
          "Display the number of coin collected in the GUI",
          "Coding the camera movement",
          "Creating a door and switch system",
          "Opening the door with the switch and custom signal",
          "Changing levels",
          "Importing sound effect",
          "Importing music and make it loop through code",
          "Create a breakable platform"
        ],
        "Adding UI, Saving system and a map system to our 2D Metroidvania": [
          "Creating a map and pausing the game",
          "Creating a saving system",
          "Saving your game at a specific location (hollow knight bench system)",
          "Create a Title Screen",
          "Create a wall jump",
          "Wall slide and adjusting the collision layer",
          "Last fix for the wall slide and the title screen"
        ],
        "Creating a 2D RPG": [
          "Creating the player and its animations",
          "Calling the animations through code",
          "Setting up the collision shape of the sword",
          "Creating a finite state machine",
          "Slash a crate with our sword and setting up collision layer",
          "Creating an autotiling tilemap with different layers",
          "Creating an animated tilemap with animated flowers and water",
          "Creating an animation tree to better control the player animations",
          "Call the animation tree through code",
          "Create a camera following the player and stopping where the level end",
          "Create a house and make it transparent when the player walk behind it",
          "Create a coin to collect",
          "Loot coins when we are slashing the crate",
          "Creating trees and sorting the scene"
        ],
        "Creating a 2D RPG - Creating GUI, enemies, doors, keys, saving system": [
          "Creating the GUI and creating a Global script to display the coins collected",
          "Display the life of our player in the GUI (Zelda heart system)",
          "Creating animated spikes to hurt our player",
          "Creating a shader and code a hurt fonction for our player",
          "Killing our player",
          "Create checkpoints",
          "Create an enemy that can throw laser",
          "Create a variation of this enemy",
          "Damage the player with laser and create explosion",
          "Fixing the laser enemy",
          "Creating the crawling enemy and its animations",
          "Creating the enemy script with inheritance",
          "Changing the direction of the enemy randomly",
          "Setting the collision of the enemy, creating plots and killing the enemy",
          "The enemy hurt the player",
          "Creating a chest looting a key and updating the GUI",
          "Creating a door we can open with our key",
          "Closing door when we are entering an area",
          "Creating a \"defeat all enemies\" door",
          "Create a saving system"
        ]
      },
      "requirements": [
        "This course is accessible to the beginner aswell as intermediate"
      ],
      "description": "In this course you'll learn the basics of programming a 2D Metroidvania game similar to Hollow Knight or Celeste and a 2D RPG similar to Zelda A link to the past with lots of different mechanic like double jumping, using a sword to kill enemy and break elements, breaking platform and way much more.\n\nI will cover in this course everything you need to know about creating a 2D game in the Godot Engine 4. This course cover all important aspects of creating a 2D game in Godot including:\nGame mechanics like player movement, double jump, collectibles, wall slide, wall jump\nCreating a health system inspired by Zelda with a system of heart\nEnemy\nAdding mechanic like a sword to slash the enemy or break crates\nScene structure and project organization\nSound effects & music\nCreating a saving system in two different ways\nCreating a map to display the position of your player\nLearning how to use shader\nThis list is not exhaustive - please see the course outline for a glimpse into what you're about to learn soon.\nI have made that course for beginner looking to understand the key concept of programming as well as for programmer coming from different engine (like Unity or GameMaker) that want to create a lots of different key mechanic of a game that are rarely covered in Godot 4.\nWhat you’ll learn\n2D platformer mechanics - double jumping, collectables, enemies, sword\n2D RPG mechanics: system of doors to open with keys, enemy throwing projectile at us, patrolling enemy\nSounds effects, doors and switches to change levels\nGodot Engine Concepts - leveraging a variety of nodes, structuring scenes, signals, and more\nCreating map and a flexible saving system\nAre there any course requirements or prerequisites?\nSome programming knowledge are a plus, but you can start from scratch, GDscript (the langage used in Godot) is one of the easiest language for game development\nWho this course is for:\nBeginner\nIntermediate programmers\nIntermediate game developers\nBeginner game developers with programming experience\nIndividuals who are looking to push their project over the edge by adding lots of fun game mechanics",
      "target_audience": [
        "This course is for everyone looking to learn how to use Godot 4 and create a fun little 2D game"
      ]
    },
    {
      "title": "Build your first game with RPG Maker MV",
      "url": "https://www.udemy.com/course/build-your-first-game-with-rpg-maker-mv/",
      "bio": "No programming knowledge needed. Windows, Linux, OSX, and mobile",
      "objectives": [
        "Build a game in RPG Maker MV, compile thier game, upload it to sell."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course requirements",
          "Getting RPG Maker MV Demo (Windows)",
          "How to get RPG Maker MV cheap?",
          "What can I make in RPG Maker MV?",
          "Planning our game",
          "A brief tour of RPG Maker MV",
          "Events",
          "Creating characters in RPG Maker MV (visual)",
          "Making maps in RPG Maker MV",
          "Editing our settings in RPG Maker MV",
          "Uploading videos in RPG Maker MV",
          "Uploading custom pictures to RPG Maker MV",
          "Uploading audio to RPG Maker MV",
          "Adding NPC's",
          "Adding Random encounters",
          "Adding a store",
          "Adding treasure chest, door, inn",
          "Add character emotes",
          "Add enviromental effects",
          "Items",
          "Skills",
          "Adding monsters",
          "Ending the game",
          "Exporting our game",
          "Building our game Part 1: Intro template",
          "Building our game part 2: Making our playable party",
          "Recommended free software",
          "Creating classes in RPG Maker",
          "Building dungeons the easy way.",
          "Add character dialog",
          "Building our game characters Part 3:",
          "Building our castle map and intro Part 4:",
          "Finishing our castle and making our world map Part 5:",
          "Finishing our world and adding our party member Part 6",
          "building our dungeon sequence Part 7:",
          "Finishing our dungeon Part 8:",
          "Finishing our dungeon Part 9",
          "Ending our game Part 10:",
          "Publishing our game on Itchio",
          "Additional content",
          "Converting RPG Maker MV HTML to a APK file (easy) by request",
          "Additional content: Creating a video choice game",
          "Additional content: Adding a ending credit and sharing the game",
          "Additional content: RPG Maker and AI",
          "Join us at"
        ]
      },
      "requirements": [
        "If you were able to enroll in this class, you can make a game! This is a very easy, step by step course. Students are encouraged to ask for help if they have questions or have problems.",
        "To follow along with the demo version you will need a Windows machine. If you want to follow along with the full version a Linux, Windows, or OSX machine with Steam and RPG Maker MV"
      ],
      "description": "Have you always wanted to build a game, but never knew where to start? Maybe the thought of programming scares you, you don't know how to share or sell your games, you want to be able to publish your games to different platforms. This course is for you! In this course you don't need any programming experience at all. You won't need to hunt down resources to build your maps, characters, music, etc. All the tools that you need are build right into the software that we will be using. Have custom music, sounds, graphics? Not a problem, we will go over that too! Have a Windows machine, a Apple, Linux? Good news, RPG Maker works with all platforms. Do you want to build a game that's not a RPG? Again, not a problem, RPG Maker is more than a RPG builder, it is a powerful, flexible tool that is capable of creating various games.\nIn this course we will be going through building a game from scratch, start to finish. We will go over tips and tricks, how to export your game to various formats, and how to publish you game(s) for free or get paid. We will be going through step by step in a easy to follow instructions. If you have any questions or issues during the course? Contact me and I will do my best to help you out. Just because you buy the course, doesn't mean the support ends there.\nDon't stop yourself from realizing your dreams of building and publishing your game. Grab the course, get the software (demo or full) and build your first game!\nFYI, a reminder: I not anyone that is a part of DGS has any affiliation with any of the vendors, software manufactures, or programmers in this course.",
      "target_audience": [
        "Anyone that wants to build a game for Windows, Linux, OSX, or mobile"
      ]
    },
    {
      "title": "Godot 4: Build a 2D Action-Adventure Game",
      "url": "https://www.udemy.com/course/godot-action-adventure/",
      "bio": "Master GDScript, build an expansive world, create puzzles, dialogue & combat—all while making a full 2D action-adventure",
      "objectives": [
        "Build a full 2D action-adventure game in Godot 4 from start to finish.",
        "Learn GDScript and code like a pro—variables, functions, signals, and more.",
        "Design an expansive world with tilemaps, terrains, and hidden secrets.",
        "Create puzzles with movable blocks, pressure plates, and sneaky switches.",
        "Develop a dialogue system so NPCs can drop lore, hints, or just sass.",
        "Make a combat system where enemies chase, attack, and (hopefully) lose.",
        "Structure your game properly with reusable scenes, groups, and signals.",
        "Master game dev skills you can use to create your own epic adventures."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome to the Course",
          "Setting Up Godot",
          "Basics of Godot",
          "Godot 4.4’s Game Tab",
          "Basics of Programming in Godot",
          "Community & Support",
          "Accessing Our Projects",
          "Importing Assets"
        ],
        "Player Movement": [
          "Section Intro - Player Movement",
          "Setting Up the Player",
          "Introducing Variables",
          "If Statements & Reading Inputs",
          "Moving the Player",
          "Variable Scope & @export",
          "Animating the Player",
          "Elif & Else Statements"
        ],
        "Creating Environments": [
          "Section Intro - Creating Environments",
          "Introducing Tilemaps",
          "Introducing Terrains",
          "Adding Obstacles & Y-sorting",
          "Introducing Signals & Area2Ds",
          "Changing Scenes",
          "Introducing Autoloads",
          "Adding Dungeon Floors & Walls",
          "Scaling the Window"
        ],
        "Block Puzzles": [
          "Section Intro - Block Puzzles",
          "Introducing Physics Bodies",
          "Pushing the Block",
          "Introducing Groups",
          "Framerates & _physics_process()",
          "Creating a Puzzle Button",
          "Creating Our Own Signals",
          "Building a Block Puzzle",
          "Introducing Inherited Scenes",
          "Introducing Collision Layers"
        ],
        "Creating NPCs": [
          "Section Intro - Creating NPCs",
          "Creating Our Own Functions",
          "Creating a Basic NPC",
          "Introducing User Interfaces",
          "Adding an Interact Area",
          "Adding Multiple NPCs",
          "Pausing the Game",
          "Introducing Arrays",
          "Multiple Lines of Dialogue"
        ],
        "Switch Puzzles & Treasure": [
          "Section Intro - Switch Puzzles",
          "Adding World Boundaries",
          "Introducing Switches",
          "Adding Secret Rooms",
          "Introducing Switch Puzzles",
          "Adding Treasure Chests",
          "Remembering Opened Chests",
          "Showing Collected Treasure"
        ],
        "Combat": [
          "Section Intro - Combat",
          "Adding Music & Sound Effects",
          "Player HP & Taking Damage",
          "Adding Player Health UI",
          "Setting up the Player Attack",
          "Animating the Player Attack",
          "Moving the Enemy",
          "Adding Knockback & Acceleration",
          "Polishing Combat",
          "Flashing When Taking Damage",
          "Fixing Interactions",
          "Adding Particle Effects",
          "Course Wrap-up"
        ]
      },
      "requirements": [
        "You'll need access to a Windows, Linux, or Mac computer or laptop"
      ],
      "description": "Ever dreamt of making your own 2D action-adventure game? Then you're in luck!\nWhether you're a total newbie or switching to Godot, this course will walk you through creating an amazing game from scratch—no prior experience needed!\nWe’re talking puzzles, NPCs, combat, and an expansive world to explore. Think classic Zelda-like gameplay, but made by you. By the end, you'll have a fully playable game, plus the skills to build your own adventure-packed worlds.\nYou'll master GDScript, Godot’s custom scripting language, so you can make enemies chase the player, NPCs drop wisdom, and puzzles actually work. We’ll keep the code beginner-friendly, but powerful enough to level up your dev skills.\nYou’ll learn to craft tilemaps and terrains to build your world, add hidden rooms and treasure chests, and create a combat system where slimes aren’t just cute—they’re dangerous. (No mercy, they must be defeated.)\nMost tutorials teach you how to make tiny, unfinished games. That’s cool and all, but this course goes all the way—from blank project to fully structured, feature-rich game. No half-baked mechanics. No confusing gaps.\nYou’ll learn by doing, with clear explanations and challenges to make sure you actually understand what you’re coding.\nThis course is perfect for total beginners, or devs looking to jump into Godot 4 without getting lost. No game dev experience? No problem. You just need a computer (Windows, Linux, or Mac) and a bit of curiosity!\nBy the end, you'll have more than just a game—you'll have the confidence to build your own.\nIf you've ever wanted to bring your dream game to life, now’s your chance. Let’s make something awesome together!",
      "target_audience": [
        "This course is perfect for you if you're new to game development as no previous experience is required.",
        "If you're not new, but looking to switch engines then this is a great introduction to Godot and it's systems.",
        "It's also ideal for anyone who would love to make their own action-adventure game!"
      ]
    },
    {
      "title": "Unity For Beginners:Game Development From Scratch with Unity",
      "url": "https://www.udemy.com/course/learn-game-development-from-scratch-with-c-unity/",
      "bio": "Unity Game Development by developing 2D games, use Unity, develop your game with the ultimate guide to game development",
      "objectives": [
        "Gain an excellent general knowledge of game creation in Unity",
        "Navigate the Unity Engine and discover unique features like the Asset Store",
        "Detect collisions, receive user input, and create player movements",
        "Collect and destroy game objects",
        "Activate and use Unity’s Team Collaboration service",
        "Learn C#",
        "Learn the fundamentals of game design",
        "Build 2D Unity games & work with sprites",
        "Learn unity game development",
        "Coding video games for modern consoles requires a lot of specialized skills.",
        "Unity allows users to program life-like physics, control game audio, and texture and layer game levels, all in one program.",
        "Whether you’re interested in coding 2D or 3D video games, Unity is one of the most comprehensive and user-friendly game development engines on the market.",
        "Unity features a full suite of the most modern tools and services that will help you make great video games.",
        "Unity is a development engine for 2D and 3D games and experiences."
      ],
      "course_content": {
        "Introduction to The Unity And Set Up": [
          "Installing Unity",
          "Installing Android SDK ( Software Development Kit ) for Unity",
          "FAQ about Unity, Unity Game Development"
        ],
        "Preparation for Unity Game Development": [
          "Creating A Project in Unity Editor",
          "Using Sprites Pack & Asset Store in Unity"
        ],
        "Using Physics in Unity": [
          "Using Physics in Unity",
          "Creating Prefabs in Unity"
        ],
        "Script Writing in Unity Game Development": [
          "Scripting in C#",
          "Unity Default Functions in Unity",
          "Writing First Function in Unity",
          "Using Unity Input Functions",
          "Camera Script in Unity",
          "Game Manager in Unity",
          "Scoring with Coins in Unity",
          "Game Over in Unity"
        ],
        "Creating New Scene in Unity": [
          "How To Create New Scene in Unity"
        ],
        "Creating User Interface in Unity": [
          "Adding UI Components in Unity"
        ],
        "Saving Data": [
          "How To Save Data in Unity"
        ],
        "Testing Your Game in Unity": [
          "Test Your Game"
        ],
        "Monetising Your Game With AdMob Ads": [
          "Monetise the Unity Game"
        ],
        "Building The Unity Game": [
          "Build Your Unity Game in Android and iOS"
        ]
      },
      "requirements": [
        "A computer to install and run Unity",
        "People who will enroll should have basic computer experience and knowledge",
        "Have an eagerness to learn",
        "Desire to learn unity 3d game development fundamentals",
        "Desire to learn unity",
        "Desire to learn unity game development",
        "Nothing else! It’s just you, your computer and your ambition to get started now"
      ],
      "description": "Hi everyone,\nWelcome to my \"Unity For Beginners: Game Development From Scratch with Unity \" course.\nUnity by developing 2D games, use Unity and develop your game with the ultimate guide to game development\nGaming on the Go\nMobile games have a long way since Game Boy, but like any game on any platform, mobile games are made to keep us having fun. Unity, unity 3d, unity 2d, unity3d, game development, unity 3d game development, unity game, unity mobile game development, unity android game development\nCoding video games for modern consoles requires a lot of specialized skills. Unity allows users to program life-like physics, control game audio, and texture and layer game levels, all in one program. Udemy has the courses to show you how they all work together.\nThis time you will not just play and enjoy but also learn to create video games with Unity C#.\nMy Unity course utilizes a unique teaching method that will allow you to gain a thorough understanding of concepts. If you are interested in game development with Unity and C# and are looking for an interactive, project-based course then my course will be a perfect starter for you to develop your own games.\nBy the end of this course you will learn to;\nNavigate the Unity Engine and discover unique features like the Asset Store\n\nDetect collisions, receive user input, and create player movements\n\nCollect and destroy game objects\n\nBuild 2D Unity games & work with sprites\nand also you will gain confidence in translating theories of physics into working game code\nWith my Unity course, you will also have a brief idea regarding the gaming sector. As mobile is set to be the dominant trend for the foreseeable future, I believe the same can be confidently said of mobile gaming as well.\nIf you want to start a new career or if you want to have a new hobby that can turn into a profitable business in the short term then do not wait!\nWhat is Unity?\nUnity is a development engine for 2D and 3D games and experiences. It supports Virtual Reality (VR), Augmented Reality (AR), and Artificial Intelligence (AI) for user interactions. While the top three uses of Unity continue to be games and interactive experiences, pre-visualization for films, and architecture visualization, Unity is steadily growing in many other industries. Imagine new customer experiences and training videos that include user participation. The ability to interactively engage users increases the power of a presentation. Unity has become the go-to tool for distance teaching videos and interactive tutorials. Unlike other game engines, Unity does not create games. The company’s focus remains to build the best game engine for anyone in the world with an idea.\nIs coding required in Unity?\nCoding is not a requirement. Unity includes a visual scripting tool called Bolt, which doesn't require coding and provides two graph types for users to implement their ideas. Flow Graphs allow the user to implement game flow for low-level logic and complex tasks. State Graphs implement finite state machines (FSM) for high-level logic and state management. Bolt allows users to edit and create graphs in Play Mode, enabling users to build and prototype games while playing them. Bolt is available for download from the Unity Asset Store. PlayMaker is a fee-based visual coding tool also available for use with Unity. Developers prototype gameplay and artificial intelligence (AI) behaviors associated with objects. INSIDE and Hearthstone are Unity games developed with PlayMaker. Adventure Creator is another paid visual scripting tool available for use with Unity. Developers create professional-looking 2D and 3D games using Adventure Creator without writing a single line of code.\nHow does the Unity game engine work?\nUnity operates like a generic scene player. It is a game runner with a collection of assets. When the game starts, Unity initializes the settings for the interfaces it needs to run, including graphics, audio, and input devices. After the splash scene, the first scene of the game loads. The scene contains a hierarchy of the game objects and the assets. Unity loads all instances of the scripts with reference to them. After initialization, Unity runs in a loop or cycle, executing each game scene. The scene order is based on the hierarchy loaded during initialization. The cycle starts with rendering the scene for the game camera, executing physics simulations and scripted events. Then Unity executes the Update and LateUpdate scene scripts and internal operations. Repeating this cycle steps the user through the scene states rendering the full game experience.\nIs Unity good for beginners?\nUnity is an excellent program for beginners to learn. It has actually become somewhat of a trend for new programmers to use the game engine as an introductory stage before moving on to learn state logic and C# programming, so anyone looking to delve into 3D game development might find Unity the perfect place to start — whether you're considering self-guided or structured learning. Udemy has plenty of beginner tutorials that cover fundamentals like using the editor, creating and updating objects and events, and building and running games. For those with a bit more experience, you can also find intermediate tutorials that will teach you how to build a game from scratch incorporating advanced Virtual Reality, Augmented Reality, and Artificial Intelligence features.\nShould I learn Unreal or Unity?\nAs the top game engines, Unreal and Unity often compete head-to-head for new users. Depending on the skills and goals of the user, some differences may tip the user one way or the other. Unity uses C#, and unreal uses C++. C# is easier to learn. Both products include a visual scripting tool allowing the user to avoid coding altogether. VR and AR are better defined in Unity and have a longer history of support. Designers and visual artists favor the quality and hands-on control over visual assets in Unreal. Indie developers and mobile game developers favor Unity. Among AAA-industry games developed with funded teams, Unreal is the more popular choice. Both Unity and Unreal maintain a significant online presence with forums and tutorials. The Unity Asset Store and the Unreal Marketplace provide free and paid assets.\nHow do I know if learning Unity is right for me?\nUnity is a beginner-friendly game-building engine also used for 2D and 3D projects such as creating interactive touch screen experiences, architectural and industrial visualization, and film animation. Because Unity remains free and open-source, anyone in the Unity developer community can improve the program and share knowledge. Learning Unity may be the right choice for anyone who wants to learn the basics of game development and work with one of the most popular game-building platforms in the world. But learning Unity also opens doors to opportunities for developing state-of-the-art animations, and simulations for various other augmented and virtual reality projects for uses, including interactive learning, industrial simulations, and 3D medical models. If you have a passion for gaming, programming, and design, learning Unity can be a solid way to get started in game development and other programming careers.\nWhat skills should I have before learning Unity?\nUnity has a user-friendly interface with plenty of support from the large community of Unity users, so It’s possible to learn how to use this free gaming engine without prior experience in web development and programming. But to master Unity on an advanced level and make full use of its many features for professional game development and 3D design, it’s helpful to have a basic familiarity with developer essentials, including coding and the popular programming languages JavaScript and C+, the language used to create Unity. Knowing these languages allows users to write scripts in Unity and modify critical features of the software for specific project needs.\nAre Unity developers in demand?\nSince Unity got launched in 2005, the size of the global gaming market has tripled, and more than half of all games on both PC and mobile devices run on Unity. Along with that, Unity now gets used in more than 60 percent of all augmented and virtual reality experiences across a wide range of industries, including film, architecture, education, and healthcare. Because Unity is the platform of choice for many gaming, 3D animation, and augmented reality projects of all kinds, Unity developers are now in demand for both on-site and remote opportunities in back-end programming, animation programming, software engineering, machine learning, and game development. Unity developers can also find work in specific industries that use animation, simulations, and visualization, such as healthcare, architecture, and education.\n\n\nDive in now,\nUnity For Beginners: Game Development From Scratch with Unity\nyou won't be disappointed!\nBecause by the end of the course you'll be very confident in the basics of coding and game development, and HUNGRY to learn more.",
      "target_audience": [
        "Anyone who wants to learn Unity Game Engine",
        "Anyone who wants to build games for iOS and Android devices",
        "Anyone who wants to learn how to coding with C# programming language",
        "Anyone want wants to learn how to monetise games with Google Admob ads",
        "Anyone who has a love for game development",
        "Anyone interested in developing commercial quality 2D games either professionally or as a hobby",
        "Anyone interested in Unity and C# and is looking for an interactive, project-based course",
        "People who are willing to make a career in Game Development",
        "People who want to develop a game with unity",
        "People who want to begin unity game development",
        "People who want to develop unity 3d game development"
      ]
    },
    {
      "title": "The Beginners Guide to 3D Web Game Development with Three.JS",
      "url": "https://www.udemy.com/course/beginners-3d-web-game-development-with-threejs/",
      "bio": "Learn how to write JavaScript code while having fun creating games using the WebGL library, Three JS",
      "objectives": [
        "Learn to code in the most popular program language in the world, JavaScript, in a fun way",
        "Learn how to use the in-demand WebGL Open Source library ThreeJS",
        "Add vital skills to your CV",
        "Learn key coding techniques by creating fun games.",
        "Learn to adapt freely available 3D assets so they are game ready."
      ],
      "course_content": {
        "Introduction": [
          "Update",
          "Welcome to the course",
          "Free e-book",
          "Another FREE e-book",
          "Preparing for the course"
        ],
        "JavaScript": [
          "Variables",
          "Strings",
          "Functions",
          "Conditions",
          "Arrays",
          "Objects",
          "Loops",
          "Classes",
          "Modules",
          "Scope",
          "Math",
          "JSON",
          "What have you learnt?"
        ],
        "ThreeJS Primer": [
          "A 3D Primer",
          "Setting up a simple Three.JS app",
          "The basis of all Three.JS apps",
          "Creating a rotating cube",
          "The Three.JS editor",
          "Geometries",
          "Materials",
          "Loaders",
          "What have you learnt?"
        ],
        "Assets": [
          "Finding assets online",
          "Using Mixamo to setup character animations",
          "Using Blender to prepare assets",
          "Exporting and testing",
          "What have you learnt?"
        ],
        "Your First Game": [
          "First steps",
          "Adding user input",
          "Obstacles",
          "Collisions",
          "Explosions",
          "Sound",
          "What have you learnt?"
        ],
        "Shooters": [
          "Preparing the environment",
          "Creating a navigation mesh",
          "Loading the environment",
          "Preparing the NPCs",
          "Using pathfinding to move the NPCs",
          "The NPC class",
          "Patrolling",
          "The player avatar",
          "User input",
          "Gamepads and Onscreen-controllers",
          "Camera tricks",
          "Combat - part 1",
          "Sound and UI",
          "Post Processing",
          "Combat - part 2",
          "What have you learnt?"
        ],
        "Using Physics to Create a Pool Game": [
          "Introducing CannonJS",
          "Ball interaction",
          "A Better Table",
          "Loading assets",
          "Controlling hit strength and testing pocketing",
          "Displaying the UI",
          "What have you learnt?"
        ],
        "Conclusion": [
          "Summary",
          "Three.JS with npm and vite",
          "Bonus lecture"
        ]
      },
      "requirements": [
        "Enthusiasm"
      ],
      "description": "The JavaScript programming language is probably the most popular programming language in the world. Companies all around the global require developers who are proficient with this language. In this course I teach you about the language then apply your new skills to create three games.\nBefore you write your first game you'll use your new JavaScript skills and the popular Open Source library, Three.JS to create several simple online 3D apps. Once you know enough about the ThreeJS library it's time to create your first game. The first game is a simple game. Here you'll learn about loading assets, moving assets, user input and collision testing.\nThe course builds on the skills you learn. The next game is a shooter and you learn how to animate a player avatar, how to control NPC characters so they patrol on a random path using navigation meshes and path-finding. You'll learn how to control the avatar with a keyboard or gamepad and on a mobile using an on-screen controller. You'll learn how to fire bullets at the enemy and add AI to the NPCs so they fire back. All the key ingredients of a shooter game.\nThe last game uses the physics engine CannonJS to control the motion of balls in an Eight-ball Pool game.\nAlong the way you'll learn to use the 3D application program Blender to prepare your 3D assets for the games you develop.\nOnce you've completed the course you'll be super ready for any challenges an employer throws your way when writing JavaScript code. But the main thing is you'll have developed your much in-demand skills while having fun making games.\n\n\nWhat students say about the course.\n\"Best web gaming course for ThreeJS!\"\n\"... a go-to for 3D graphic designers, web designers ...\"\n\"Great course for beginners or JavaScript developers looking to make games!\"\n\"Best course from best instructor in web development, especially in 3D web development. I recommend you check his other courses.\"\n\"The course is well-structured and covers a lot of material in a concise and accessible way. I'm making good progress and really enjoy the teaching style.\"\n\"Totally no fluff and eloquently wrapped together with knowledge and understanding in a comfortable flow. Very absorbable and entertaining which helps a lot when needing to review for good measure.\"",
      "target_audience": [
        "Beginners and intermediate developers hoping to improve their JavaScript skills by learning to code 3D web games",
        "Beginners and intermediate developers wanting to learn to use the Open Source WebGL library ThreeJS"
      ]
    },
    {
      "title": "The Ultimate Unreal Engine 2D Game Development Course",
      "url": "https://www.udemy.com/course/unreal-2d-course/",
      "bio": "Learn all you need to know about Paper 2D and PaperZD to make 2D and 2D/3D hybrid games in Unreal Engine 5!",
      "objectives": [
        "How to make 2D Games with Unreal Engine 5",
        "Create 4 Awesome Games of various genres",
        "All about Sprites, Flipbooks, Tile Maps and Tile Sets",
        "How to use the free PaperZD plugin to enhance your 2D games",
        "Unreal Engine Blueprints, starting from the basics up to intermediate usage",
        "Set up animation trees and anim notifies for your 2D animations",
        "Create 2D enemy AI using the AI Controller and Behavior trees",
        "How to mix 2D Sprites with 3D backgrounds to create 2D/3D Hybrid games",
        "How to polish up your game using hitstop, sprite shake, coyote time and jump buffering"
      ],
      "course_content": {},
      "requirements": [
        "No prior programming or Unreal Engine experience needed! You'll learn everything you need to know."
      ],
      "description": "Welcome to The Ultimate Unreal Engine 2D Game Development Course.\nThis is the most comprehensive and effective course you'll ever find about making 2D and 2D/3D hybrid games with Unreal Engine 5.\nThrough teaching Unreal Engine on YouTube and also in person at a Japanese Game Dev school for the past couple of years I've gained an understanding of what students are really looking for and designed this course to teach you Paper 2D and PaperZD step by step in a structured manner.\nIf you're completely new to Unreal Engine you can check out the Unreal Engine 5 Crash Course which is included in one of the early chapters.\nWe'll start out slowly by making a one-button-minigame that teaches you about how to import sprites and use them in your scene. You'll also learn about project settings we need to adjust and about the enhanced input action system which we'll use throughout all of the other chapters in this course as well.\nThe second game will teach you all about using sprite sheets and how we can create flipbooks.\n\nWe'll also look at how to switch between the idle and run flipbook during gameplay and how to play footstep sounds on the correct animation frames.\n\nSince we want the background to be dynamically adjustable I'll also teach you how we can use a background sprite in a blueprint, attach collisions to them and dynamically change them in the construction script depending on how long we want the stage to be.\nThe Third game is a classic platformer game and will be the first projects using the free PaperZD plugin to improve the workflow of making 2D games with Unreal Engine.\nHere you'll learn how to set up an animation source and animation blueprint file with PaperZD and use them to create animation graphs and animation notifies.\nWe'll also create enemies that can detect walls and ledges to change the direction they walk in and can interact with the player when being stomped on or touching the player character.\n\nYou'll also learn how to create a one-way platform that we can jump through form the bottom, but don't fall through from the top.\nThe forth game will combine all the things we've learned and will be the first 2D/3D hybrid game we create.\n\nThis means that our characters are 2D pixel art, however the backgrounds are 3D environments which allow us to make use of all of the amazing features of Unreal Engine.\n\nFor this game we don't only have platformer mechanics, but we'll also implement hitboxes, a stun system a damage system and many more things you'll need to know about for most of your games.\n\n\nTo lean into metroidvania mechanics we also create an unlockable sword throw ability, which allows you to stick swords into the wall and use them as platforms to reach higher areas.",
      "target_audience": [
        "Beginner and Intermediate Unreal Engine developers who want to make 2D Games"
      ]
    },
    {
      "title": "The Ultimate Guide To C# Unity Programming",
      "url": "https://www.udemy.com/course/the-ultimate-guide-to-c-unity-programming-2020/",
      "bio": "Master Unity's Engine and C# Programing By Creating A Fun 2D Platformer Using Modern Unity Development Technics",
      "objectives": [
        "Learn the fundamentals of C#. Everything from variables, \"if\" statements and creating an object oriented structure. No prior programming experience necessary.",
        "Create a playable Character (Conqueror) with animations, abilities to move in any direction, jump, climb and the attack any enemy that gets in your way.",
        "Master the art of problem solving when it comes to game development. By understanding what obstacles you may face and the many ways to research and find solutions for each.",
        "Flex your \"Game Developer\" muscles by completing challenges presented to you every video. Enhancing your learning experience and adding your own flavor into the project.",
        "Develop NINJA like skills in Unity by Implementing sound effects (SFX), animations, follow camera, and Cinemachine. And creating your own 2D platformer levels with automatic tiling.",
        "Become a professional programmer by learning \"Version Control\" a tool used by expert engineers. Not only in game development but in all programming based projects.",
        "Build a solid foundation of Game design and Level design by comprehending what player experience means and how to create enjoyable and fun games for anyone looking to play your game",
        "Transfer everything you learn from this course into any programming language you choose. Like JAVA, JavaScript, Python, C++ and any other object oriented language"
      ],
      "course_content": {},
      "requirements": [
        "A Working Computer or Laptop with minimum requirements to run Unity and Visual Studio (Which aren't too demanding)",
        "The desire and drive to learn how to create a fun and enjoyable game"
      ],
      "description": "This course is made with the latest content and newest technics used in modern Game Development\n\n\nThe best way to learn anything is by doing it in a really fun way and this is where this course comes from. If you want to learn how all these incredible games you see are made there is no better place to start than this course. We made sure that this course has everything you need to take you from a beginner (even with zero codding experience) and slowly take you to intermediate and finally become a professional.\n\n\nI chose the main project in this course to be a 2D platformer because it not only has a vast library of game development concepts that we can implement and learn, but also because it's very simple (especially if you are a beginner) to delve in and get started on your game development journey.\n\n\nEverything in this course has been meticulously crafted, review and recrafted to provide you with the best experience possible and maximize your learning as much as possible. So not only will you have a great time learning you'll also get the MOST BANG FOR YOUR BUCK by going away from this course with a lot of tools in your arsenal to continue you journey in the wild west of game development.\n\n\nSection 1 - Introduction & Setup:\nWe'll start off by downloading all the necessary tools that we need to start our game development journey. That means the latest version of Unity and the latest version of Visual Studio. We'll also go over everything you need to make you feel right at home and how to use the course to maximize your learning potential. We'll finish off by creating our first code with a very simple game just to take the pressure off.\n\n\nSection 2 - Magic Game Cube: C# & Unity Basics:\nThis is where things get heated up. We'll start by leaning what Version Control is which is an incredibly powerful tool for game developers and used by professional programmers around the world. We'll learn the basics of C# so even if you have ZERO CODING EXPERINCE you can still understand everything and learn how to build great games and continue on with the project. We'll also get a grasp on the fundamentals of Unity Engine and how everything works in it.\n\n\nSection 3 - Castle Conquest: Setting Up Our World:\nWe begin our Main Project. We'll start off by setting up our world, and what better place than the Game Design and player experience of our game. We'll add sprite sheets slice them. You'll learn how all these maps in 2D platformers are so easily created and understand how it's not as hard as it seems. We'll add our character who's a great Conqueror wielding his trusted Hammer and you'll get your first taste of animations.\n\n\nSection 4 - Castle Conquest: Creating Our Conqueror:\nHere is where you go deeper into making our character feel alive. We'll give him the ability to move in the levels we created and interact with various things like the walls and so on. Our Conqueror will jump, climb, run, flip and just stand there sometimes Idling. We'll also implement a modern game development technique called CINEMACHINE that makes our game really cool and professional.\n\n\nSection 5 - Castle Conquest: Adding Enemies & Bombs:\nIt's where things get a bit scary because our Conqueror is no longer safe. There are new threats inside his castle with pigs roaming and bombs ready to explode at any moment. We'll add enemies, animated them and make them hurt our Conqueror if he walks too close to them. We'll also add hazards like bombs that blow our player up if he doesn't keep a safe distance after they start burning.\n\n\nSection 6 - Castle Conquest: Controlling Our Game:\nThis is where we add lives to our player, we add more levels and add a score to get anyone playing our game a goal that they should achieve. Make everything in our world much more interesting and fun to experience. This is also where we add Sound Effects to our world and really make everything come alive.\n\n\nBonus Section:\nThis is where we do a little bit extra. We delve deeper into the UI canvas of our game and make it much better to look at. We add all the SFX we have available, so that everything we interact with has a sound attached to it, and finally we tweak the progression of the levels by adding a couple of new animations to our player.\n\n\nWhat You Will Learn In This Course:\nDownload and install Unity and Visual Studio\nWhy we need Visual Studio with Unity\nUse Visual Studio with Unity in a simple way\nHow to set a good Game Development environment\nUnity Engine are in a simple and comprehensive way\nThe Basics of C# in the most fun ways possible by creating a game\nUse player input to control the behavior of our game\nAdd different component to game objects\nAdd gravity and other forces to game objects\nMake game objects interact with each other in our game\nAdd sprite sheets and slice them up\nCreate Tile assets\nHow to create levels from our tile assets\nBecome a ninja problem solver and learn how to go step by step to solve any problem in Game Development and coding\nCreate animations\nMake transition between animations\nAdd climbing mechanics\nAdd bombs that explode and kill player\nAdd enemies that attack you\nCreate levels automatically with 2Dextras\nLearn what player experience is\nAdd sound effects to your game\nAdd a scoring system to our game\nAdd lives to our player with dying conditions",
      "target_audience": [
        "Aspiring Game Developers that don't know where to start when it comes to creating games",
        "Young programmers who want to learn the basics of coding in a really fun way by creating their own games using Unity's very simple engine",
        "Someone who's looking to create a 2D platformer and doesn't know how to do it easily and efficiently"
      ]
    },
    {
      "title": "Learn Rigging & Animation Techniques in Spine",
      "url": "https://www.udemy.com/course/take10animation/",
      "bio": "Are you ready to take your animations to the next level? Learn everything you need to get started in Spine.",
      "objectives": [
        "Learn basic rigging and animation techniques in Spine",
        "Rig your own 2D characters",
        "Animate your 2D characters",
        "Take your 2D animations and give them a 3D feel"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Working with Vertices": [
          "Working with Vertices Part 1",
          "Working with Vertices Part 2",
          "Working with Vertices Part 3",
          "Working with Vertices Part 4"
        ],
        "Adding Bones and Binding": [
          "Adding Bones and Binding"
        ],
        "Adjusting Weights": [
          "Adjusting Weights Part 1",
          "Adjusting Weights Part 2"
        ],
        "Reverse Foot Controls": [
          "Reverse Foot Controls"
        ],
        "Dimensional Pass Section 1": [
          "Dimensional Pass Part 1",
          "Dimensional Pass Part 2",
          "Dimensional Pass Part 3",
          "Dimensional Pass Part 4"
        ],
        "Dimensional Pass Section 2": [
          "Dimensional Pass Part 5",
          "Dimensional Pass Part 6",
          "Dimensional Pass Part 7",
          "Dimensional Pass Part 8"
        ]
      },
      "requirements": [
        "Copy of Spine Animation Software",
        "Copy of Rigging & Animation Techniques in Spine eBook + videos - Included",
        "Complete Spine files are now included with this course!"
      ],
      "description": "Animation brings games alive. We believe creating great animation requires not only powerful software, but a powerful workflow. Spine is dedicated to 2D animation, providing an efficient workflow both for creating amazing animation and for integrating it into your games.\nWHAT IS SPINE?\nSpine is an animation tool that focuses specifically on 2D animation for games. Spine aims to have an efficient, streamlined workflow, both for creating animations and for making use of those animations in games.\nBENEFITS\nAnimation in Spine is done by attaching images to bones, then animating the bones. This is called skeletal or cutout animation and has numerous benefits over traditional, frame-by-frame animation:\nSmaller size Traditional animation requires an image for each frame of animation. Spine animations store only the bone data, which is very small, allowing you to pack your game full of unique animations.\nArt requirements Spine animations require much fewer art assets, freeing up time and money better spent on the game.\nSmoothness Spine animations use interpolation so animation is always as smooth as the frame rate. Animations can be played in slow motion with no loss in quality.\nAttachments Images attached to bones can be swapped to outfit a character with different items and effects. Animations can be reused for characters that look different, saving countless hours.\nMixing Animations can be blended together. For example, a character could play a shoot animation while also playing a walk, run or swim animation. Changing from one animation to another can be smoothly crossfaded.\nProcedural animation Bones can be manipulated through code, allowing for effects like shooting toward the mouse position, looking toward nearby enemies, or leaning forward when running up hill.\nWHAT'S IN IT FOR ME?\nThis course will take you step by step how to get the most out of your character by implementing basic and advance rigging techniques which will give you more animation functionality. You will learn proper ways to add vertices to your meshes and allow you to give your 2D characters a 3D feel.\nEasy to follow instructions for experienced and beginners. A full character rig is included with 6 different outfits for character customization. Take your game animations to the next level. Enroll today!",
      "target_audience": [
        "2D Animators",
        "3D Animators",
        "Game Developers"
      ]
    },
    {
      "title": "Unreal Engine 5: One Course Solution For Dynamic Sky System",
      "url": "https://www.udemy.com/course/unreal-engine-5one-course-solution-for-sky-weather-system/",
      "bio": "Build a Dynamic Sky and Weather System in Unreal Engine 5 through Blueprint, Niagara and Material",
      "objectives": [
        "Dynamic sky system with drag and drop lighting solution",
        "Multiple sky presets with corresponding weather",
        "Nighttime sky with moon and stars",
        "Cell bombing and Tri-planar projection material",
        "Different Footstep FX with physical material",
        "Build different Niagara Weather VFX",
        "Write custom Niagara module script for advanced particle behavior",
        "Learn the best coding practices for Material/Niagara/Blueprint",
        "Build beautiful Volumetric Cloud material",
        "Deep dive of different properties for lighting",
        "Create decal materials for weather system",
        "Animate weather FX through blueprint and material parameter collection"
      ],
      "course_content": {
        "Introduction": [
          "Course Intro",
          "What Does Dynamic Sky Weather System Need?",
          "Some Common Questions You May Have...",
          "Create A Starting Project",
          "How To Get Help?",
          "Material Hotkey Cheat Sheet"
        ],
        "Day Night Cycle": [
          "Day Night Cycle Section Overview",
          "Environment Light Mixer",
          "BP Dynamic Sky Actor",
          "Construction Script",
          "Time Of Day",
          "Handle Moon Rotation",
          "Blueprint Macros",
          "Mini Challenge Answers",
          "Nighttime Sky",
          "Adjust Blueprint Properties",
          "Sky Sphere",
          "Material Refresher",
          "Stars For Nighttime Sky",
          "Vertex Normal",
          "Channel Mask Parameter",
          "Star Visibility",
          "Moon",
          "Section Challenge: Moon Visibility",
          "Share Task: Share Your Sky",
          "Adjust More Properties From BP",
          "Optional Challenge: Add In Your Own Sun",
          "Section Wrap Up"
        ],
        "Clouds": [
          "Clouds Section Overview",
          "Blueprint Enum",
          "2D Clouds",
          "2D Clouds Adjustment",
          "Sky Atmosphere Tint",
          "Adjust 2D Clouds From Blueprint",
          "Planar Projection",
          "Volumetric Clouds",
          "Volume Texture",
          "Volumetric Advanced Output",
          "Influence Radius Refactoring",
          "Norm Altitude In Layer",
          "Macro Variation For Clouds",
          "Panning Volumetric Clouds",
          "Adjust Volumetric Clouds From Blueprint",
          "Multiple Sampler Type Support",
          "Share Task: Share Your Volumetric Clouds",
          "Section Challenge: Volumetric Clouds Variation",
          "Optional Challenge: New Volumetric Cloud Variation",
          "Section Wrap Up"
        ],
        "Landscape": [
          "Landscape Section Overview",
          "Preparing For Landscape",
          "Noise Sculpting",
          "Texture Bombing Default",
          "Texture Bombing Voronoi",
          "Triplanar Projection Default",
          "Rebuild Triplanar Projection",
          "UV Triplanar Projection",
          "Triplanar Bombing",
          "Share Task: Share Your Material",
          "Landscape Layer Process",
          "MF_TextureBombingVoronoi",
          "MF_ComputeLandscapeUV",
          "Assemble Landscape Layer",
          "Ground Layer Base Color",
          "Params For Base Color",
          "Ground Layer Normal And ORD",
          "Slope Layer",
          "Slope Blend",
          "Share Task: Share Your Landscape Material",
          "Adjust Nighttime Settings",
          "Section Wrap Up"
        ],
        "Snowy Weather": [
          "Snowy Weather Section Overview",
          "Lighting For Snowy Weather",
          "Data Asset",
          "Blueprint Struct",
          "Switch Weathers",
          "Full Refresh",
          "Snow Blend Mask",
          "MF_SnowyWeatherBlend",
          "Material Parameter Collection",
          "Section Challenge: Snow Object Blend",
          "Share Task: Share Your Snow Blend Result",
          "Anim Notify",
          "Blueprint Macro Library",
          "Decal Material",
          "Niagara Refresher",
          "Footprint Niagara System",
          "Share Task: Share Your Progress",
          "Preparing For Weather Particles",
          "NMS_GetCameraProperties",
          "Snow Particles",
          "Smoke Particles For Snow",
          "Toggle Niagara System Component",
          "Section Challenge: User Parameter",
          "Animate Snow Coverage",
          "Sync Default Values",
          "Adjusting Snow Animation",
          "Share Task: Share Your Snowy Weather",
          "Section Wrap Up"
        ],
        "Rainy Weather": [
          "Rainy Weather Section Overview",
          "Rainy Data Asset",
          "Lighting For Rainy Weather",
          "Properties For Puddles",
          "Ripples",
          "Puddle Waves",
          "MF_GenerateRainyWeatherPuddles",
          "Smooth Step",
          "Toggle Rain",
          "Liquid Master Material",
          "Main Rain Drops",
          "Brightness By Distance",
          "Brightness By Look Up Angle",
          "Collision Event",
          "Rain Splashes",
          "GPU Rain",
          "Section Challenge: Toggle Rain FX",
          "Share Task: Share Your Progress",
          "Rain FX User Parameter",
          "Physical Material",
          "Landscape Physical Material Output",
          "Puddle Splash",
          "WARNING! Flashy Footages Ahead!",
          "Lightning Flash",
          "Lightning Bolt",
          "Section Challenge: Toggle Lightning",
          "Share Task: Share Your Lightning",
          "Rain Drops On Surface",
          "Post Process Rain Drops FX",
          "Add Post Process FX To System",
          "The Ultimate Challenge: Animate Puddles",
          "Share Task: Share Your Solution",
          "Solution: Animate Puddles",
          "Section Wrap Up"
        ],
        "Congratulations": [
          "Final Tweaking",
          "Dynamic Day Night Cycle",
          "Switch Weather During Runtime",
          "Where to go from here?",
          "Continue Your One Course Solution Journey..."
        ]
      },
      "requirements": [
        "Experience for Material or Niagara is required(Or has taken my material or niagara course in the past)"
      ],
      "description": "Welcome to your ultimate solution for Unreal Engine 5's Dynamic Sky and Weather System. In this course, you'll embark on a journey to create a robust sky system featuring a dynamic day-night cycle, mesmerizing volumetric clouds, immersive snowy weather complete with footprints and intricate snow particles, and even rainy weather with lifelike raindrops, puddles, and captivating lightning effects. Best of all, we'll be starting from the ground up.\nIn the first section, we'll delve into creating the fundamental day-night cycle. We'll bring stars, the moon, and detailed variables into play, enabling us to fine-tune the appearance of our sky system. Our journey begins with crafting a Blueprint Dynamic Sky Actor, offering a streamlined lighting solution. From there, we'll employ the construction script to lay the foundations of a basic time-of-day system using Blueprint macros. As we progress, we'll explore the concept of a sky sphere and a sky material, introducing our own customizable stars and moon through blueprint variables.\nMoving on to the second section, we'll introduce 2D clouds and volumetric clouds to our dynamic sky system. This adventure starts with creating a Blueprint enum to define distinct cloud modes. We'll then enhance our sky material, built in the previous section, to incorporate 2D clouds seamlessly. Additionally, we'll delve into planar projection, uncovering its role in projecting volumetric clouds onto the sky. We'll explore volume texture and volumetric advanced output for heightened realism and harness normalized altitude masks and macro variations for intricate detail and captivating shapes. After breathing life into our clouds with animations, we'll expose more properties to our blueprint, offering greater control over the final appearance.\nIn the third section, we'll construct a basic landscape complemented by an automatic landscape material, enabling texture bombing, tri-planar projection, and slope blending. We'll initiate the process by sculpting a rudimentary landscape using the noise texture at our disposal. Subsequently, we'll delve into the concepts of texture bombing and tri-planar projection, revolutionizing our landscape's tiling capabilities.\nIn the next section, we'll introduce snowy weather into our system, complete with footprints, snow particles, snow blending for landscapes and objects, and dynamic snow blending. Our journey commences with an exploration of snowy weather lighting within a testing environment. We'll introduce the notion of data assets, blueprint structs, and how they serve as repositories for various lighting properties and weather switching mechanisms. The creation of a snow blend mask for both landscapes and objects will be followed by insights into using material parameter collections for global weather FX control. We'll also explore anim notifies, blueprint macro libraries, decal materials, and Niagara systems to selectively spawn footprints during snowy conditions. Additionally, we'll develop a custom Niagara module for efficient particle generation, using it as a template to produce our snow particles. Lastly, we'll implement dynamic snow blending, employing a timeline within our blueprint.\nIn the final section, we'll tackle rainy weather, complete with raindrops, puddles, interactive splashes, lightning, and post-process raindrop FX. The journey begins with the creation of a new data asset for rainy weather. We'll delve into the intricacies of generating procedural puddles and employing flip book animations within our materials to create ripples. A custom material function for wave generation, as well as the blending of puddles with our landscape, will be covered. We'll then master the art of crafting performant rain FX by establishing a master liquid material and a rain Niagara system. Our exploration extends to custom Niagara input scripting and dot product utilization to scale raindrop brightness based on both distance and viewing angle. Generating splashes through collision events and user parameters for rain FX will be seamlessly integrated. We'll also explore the concept of physical materials and how they define surface types, allowing us to spawn splashes when characters tread on puddles. Lastly, we'll create a material for lightning and initiate work on the accompanying Niagara system. Finally, we'll transform surface raindrops into a post-process material for our system.\nThis course is the most comprehensive guide you'll find online for creating a sky and weather system. Throughout the course, applied tasks and section challenges will ensure your comprehension and ability to replicate each step.",
      "target_audience": [
        "Intermediate Unreal users who want to know how to build a sky system",
        "Learners who want to learn more advanced Material and Niagara techniques"
      ]
    },
    {
      "title": "Unity Android Game & App Development - Build 10 Games & Apps",
      "url": "https://www.udemy.com/course/learn-unity-game-development-android-app-development/",
      "bio": "Learn Android Game Development With Unity & Android App Development With MIT App Inventor, Build 10 Android Games & Apps",
      "objectives": [
        "Build 5 Android Games With Unity & C#",
        "Build 5 Android Apps Without Coding",
        "Learn C# Scripting For Unity Game Development",
        "Build Awesome 2D & 3D Games",
        "Run Games on Real Android Device",
        "Publish Games To Android"
      ],
      "course_content": {
        "Build Your First Android Game with Unity": [
          "Installing & Setting Up Unity 2022",
          "Build Your First Android Game in 1 Hour ( Updated 2020)",
          "Build an Android Game Start to Finish in 40 Minutes"
        ],
        "Game 1 - ZigZag 3D": [
          "Setting Up The Game",
          "Controlling The Ball",
          "Moving Ball After First Touch",
          "Checking When The Balls Falls Off The Platform",
          "Camera following The Ball Smoothly",
          "Make The Platforms Fall Down After Ball Goes Away",
          "Spawning The Platforms",
          "Random Platform Spawning Algorithm",
          "Fixing Platform Falling",
          "Creating Diamonds and Randomly Spawning Them",
          "Destroying Diamonds On Collision",
          "Creating Particle Effects",
          "Create UiManager and Text Animations",
          "More Main Menu UI Animations",
          "Game Over Menu and Animations",
          "Scripting The UiManager",
          "ScoreManager Score and HighScore",
          "Creating GameManager",
          "Final Fixes and Finishing The Game",
          "Building And Publishing"
        ],
        "Game 2 - Tappy Ball": [
          "Creating Menu and UI",
          "Programming The Ball Movement",
          "Adding Pipes",
          "Spawning Pipes",
          "Checking Score",
          "Designing Ui and UiManager",
          "GameOver Menu and Animations",
          "Adding User Interface Elements",
          "Creating GameManager and Controlling Everything",
          "Adding Final Tweaks and Finishing The Game"
        ],
        "Game 3 - Fruit Ninja": [
          "Creating The Fruit Bomb and Background",
          "Adding Touch Swipe Effect",
          "Adding Collider To Swipe Lines",
          "Adding Touch Functionality For Swipe",
          "Spawning and Rotating Fruits Randomly",
          "Cutting The Fruits",
          "Cut Pieces Falling Down",
          "Adding The Bomb",
          "Creating The Blast Effect",
          "Instantiating the Blast Effect"
        ],
        "Game 4 - 3D Flick Football": [
          "Creating The Soccer Field and Goal Post",
          "Adding The Ball and Setting Up",
          "Instantiating The Ball",
          "Adding Swipe / Flick Controls",
          "Setting Up Camera and Testing Ball Flicking",
          "Adding Special Trail Effect To The Ball",
          "Creating Audience and Gallery",
          "Adding Our Goal Keeper"
        ],
        "Game 5 - 3D Runner Game": [
          "Getting The Player Model and Animations",
          "Setting Up The Player in The Scene",
          "Adding Animations To The Player",
          "Moving and Running",
          "Player Jump and Animation",
          "Camera Smooth Follow",
          "Adding Grounds",
          "Designing The Level"
        ],
        "Android App 1 - Hello World App": [
          "What's In This Section",
          "Getting Started With App Inventor",
          "Creating Your First App",
          "Downloading Required Tools To Run App",
          "Running Your App on Real Android Device",
          "What Did You Learn In This Section"
        ],
        "Android App 2 - Talk My Name App": [
          "What's In This Section",
          "Creating App UI",
          "Adding Functionality With Blocks",
          "Testing The App",
          "What Did You Learn In This Section"
        ],
        "Android App 3 - Drawing App": [
          "What's In This Section",
          "Adding The Canvas",
          "Adding Functionality With Blocks",
          "Testing The App So Far",
          "Clearing The Drawing Board",
          "Testing The Final App",
          "What Did You Learn"
        ],
        "Android App 4 - Google voice Search App": [
          "What's In This Section",
          "Taking a Look at the app",
          "Designing the User Interface",
          "Adding Voice Search Functionality",
          "Adding Google Search Functionality",
          "Testing The App so far",
          "Making User Interface Attractive",
          "Testing The Finished App",
          "What Did You Learn"
        ]
      },
      "requirements": [
        "You should have a basic knowledge of unity game engine",
        "you should have some knowledge of unity c# scripting"
      ],
      "description": "List Of Games and Apps You Will Build:\n3D ZigZag Game\nTappy Ball Game\nFruit Ninja Game\n3D Flick Football Game\n3D Runner Game\nHello World Android App\n\nTalk My Name App\n\nDrawing App\nGoogle Voice Search App\n\nBird Smash Game App\n\n\nLearn the basic concepts, tools, and functions that you will need to build fully functional Android mobile Games and Apps with the Unity game engine and MIT App Inventor2.\nBuild a strong foundation in Unity and Android Game and App Development with this course.\nUnity Installation & Setup\nAndroid Game Examples\nLearn C# Scripting\nCreate 2D & 3D Games\nBuild Fully Functional Apps\nDesign and Develop Games and Apps\nA Powerful Skill at Your Fingertips  Learning the fundamentals of Unity Android Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building android games. App Inventor is also free and easy to use tool.\nJobs in unity android game development are plentiful, and being able to learn unity android game development will give you a strong background to more easily build awesome android games.\nContent and Overview  Suitable for beginning programmers, through this course, you’ll learn all of the unity android game development fundamentals and establish a strong understanding of the concept behind android game development. Each chapter closes with quizes, putting your new learned skills into practical use immediately.\nStarting with the installation of the Unity , Java Development Kit and Android SDK , this course will take you through various unity features and how to use them. By creating example games, you’ll a establish a strong understanding of unity game development.\nWith these basics mastered, the course will take you through building different example games with unity to learn more about the process of creating mobile android games with unity.\nStudents completing the course will have the knowledge to create fully functional and ready to publish android games with unity.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course.",
      "target_audience": [
        "This course is for anyone who wants to build their own games and apps"
      ]
    },
    {
      "title": "Unreal Engine 5 for Beginners: Building a tiny Resource Game",
      "url": "https://www.udemy.com/course/unreal-engine-5-for-beginners-building-a-tiny-resource-game/",
      "bio": "Dive into Game Development with Unreal Engine 5 Blueprints and write your very own little Resource Gathering Game!",
      "objectives": [
        "Basic understanding of Unreal Engine 5",
        "Implement custom behavior for game object using Unreal Engine 5 blueprints",
        "Using object orientation concepts in Unreal Engine 5 blueprints",
        "Importing and using assets like meshes and animations in Unreal 5",
        "Collision detection, handling of user Input in Unreal 5 using the new Enhanced Input System",
        "Building User Interfaces in Unreal 5"
      ],
      "course_content": {
        "Einführung": [
          "Einführung"
        ],
        "Installation": [
          "Install Unreal Engine on Windows",
          "Install Unreal Engine on macOS"
        ],
        "Basic setup and defintions": [
          "Create Project and first look at Editor",
          "Object orientation and inheritance",
          "Our first own Blueprint Class",
          "Define Goals, Game Design, Organization"
        ],
        "Camera Movement": [
          "Camera Movement I",
          "Camera Movement II",
          "Camera Movement III"
        ],
        "Placing a Building": [
          "Placing a Building I",
          "Placing a Building II",
          "Placing a Building III"
        ],
        "Create Lumber": [
          "Create Lumber I",
          "Create Lumber II",
          "Create Lumber III",
          "Create Lumber IV",
          "Create Lumber V",
          "Create Lumber VI"
        ],
        "Create Mason": [
          "Create Mason"
        ],
        "Create Game UI": [
          "Create Build Menu",
          "Create Resource Bar I",
          "Create Resource Bar II"
        ],
        "Houses & Tax Payers": [
          "Create House & Tax Payers"
        ],
        "Resource System": [
          "Pay for Buildings",
          "Depleting I",
          "Depleting II"
        ]
      },
      "requirements": [
        "No previous experience in Unreal Engine or programming needed to follow along!"
      ],
      "description": "In this course, we will develop a tiny resource gathering game inspired by famous series like \"Anno\" or \"The Settlers\" using Epic’s fantastic Unreal Engine in Version 5.1. No worries: All lessons have been tested on Version 5.2 as well!\nWe will create a simple building placement system and we will have workers like lumbers and masons looking for resources, gathering them and bringing them back home for processing. The resources will be available to build more stuff and so on.\nAt the end, we will have 3 resources: gold, wood and stone - gold will be collected in form of taxes paid by citizens living in houses, wood will be collected by lumbers and stone will be collected by masons. Resources like a tree will deplete after some harvesting and the lumber will look for the next tree nearby to continue harvesting.\nWe will be using some nice, colorful 3D models from the permanently free section of Epic’s market place as well as animations available for free on Mixamo.\nAll programming will be done using Unreal’s blueprint editor system. All coding will be done from scratch and we will use highly flexible approaches to have a cool and expandable base system that can easily be extended to other resources, more complex multi-step production chains, etc.\nThere’s no prior coding or Unreal experience needed to follow and understand the lessons, some basic knowledge of programming concepts like collections, loops, if-branches and some understanding of vector math will surely help though.\nYou should have access to a reasonable modern and fast computer (running either Windows or Mac OS) as Unreal Engine need some decent computing power to run smoothly.",
      "target_audience": [
        "People that always wanted to get into Game Development with Unreal Engine but don't want to write a first-person shooter game :)"
      ]
    },
    {
      "title": "Blender Animation & Rigging: Bring Your Creations To Life",
      "url": "https://www.udemy.com/course/blender-animation-rigging/",
      "bio": "Learn To Rig & Animate Models & Characters In Blender, For All Skill Levels. Blender 4 Compatible. EARLY ACCESS!",
      "objectives": [
        "Understand the basic and important principles of rigging and animating",
        "Start with a basic character rig, then more complex rigging and tools",
        "Rig characters with basic and automated advanced rigs",
        "Create simple & expressive animations",
        "Learn principles and how to create actions for your characters like run cycles and attack animations.",
        "Create character animations quickly and easily that are ready for game engines",
        "We’ll also show you how to export and have these working in game engines!"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Introduction to the course",
          "Understanding Keyframes",
          "Community & Support",
          "Timeline & Record",
          "Animating Colours",
          "Rendering Animations",
          "Intro to the Graph Editor",
          "Interpolation",
          "Handle Types"
        ],
        "Rigging Basics": [
          "Section Intro: Rigging Basics",
          "Understanding Parenting",
          "Deadly Trap Animation",
          "Bone Basics",
          "Rigging with Bones",
          "Deadly Snake Animation",
          "Rigging & Weight Painting a Leg",
          "Animating with FK",
          "Rigging IK",
          "Animating an IK Leg",
          "Creating IK & FK Arm Rigs",
          "Animating IK & FK Arms"
        ],
        "Basic Human Rig": [
          "Section Intro: Basic Human Rig",
          "Base Character Rig",
          "Complete Rig",
          "Parenting & Weights",
          "Basic Standing Pose",
          "Posing Characters"
        ],
        "Rigify": [
          "Section Intro: Rigify",
          "Blender 4 Updates",
          "Positioning the Rigify Rig",
          "Creating & Parenting the New Rig",
          "Editing the New Rig",
          "Weight Painting",
          "Run Cycle Part 1",
          "Run Cycle Part 2"
        ],
        "Animation Principles": [
          "Section Intro: Animation Principles",
          "Rig & Skin Benny the Bean",
          "Wobble Actions",
          "Looking Left & Right",
          "Shocked and Stretched",
          "Look Around Then Shocked",
          "Follow Through & Overlap",
          "Anticipation & Jump",
          "Long Jump"
        ],
        "Character Animaton": [
          "Section Intro: Character Animation",
          "Simple Idle Animation",
          "Idle & Look Around Part 1",
          "Idle & Look Around Part 2",
          "Holding the Sword",
          "Pose Library",
          "Idle - Holding Weapon - Setup",
          "Idle - Holding Weapon - Complete",
          "Thrust Attack - Part 1",
          "Thrust Attack - Part 2",
          "Thrust Attack - Part 3",
          "Double Swipe Attack"
        ],
        "Exporting": [
          "Section Intro",
          "Tidying Up Actions",
          "Exporting FBX’s",
          "Importing into Unity",
          "Importing All Actions",
          "Fixing Action Issues",
          "Final Thoughts"
        ]
      },
      "requirements": [
        "You'll need a basic understanding of Blender, so at least a few hours of modelling and using Blender under your belt",
        "Most modern computers will run Blender, but check your computers specification with the Blender basic requirements"
      ],
      "description": "Want to create amazing animations, just like you see on your favourite game characters?\nIn this course, you’ll bring your creations to life and learn how to rig and animate models and characters.\nWhile the course is mainly character focused, the principles and tools you learn can be applied to animate anything in Blender.\nBy the end of the course you’ll be able to rig and animate characters ready for game engines, or anything else you want to use them for!\n\n\nUnderstand the basic and important principles of rigging and animating\nStart with a basic character rig, then more complex rigging and tools\nRig characters with basic and automated advanced rigs\nCreate simple & expressive animations\nLearn principles and how to create actions for your characters like run cycles and attack animations.\nCreate character animations quickly and easily that are ready for game engines\nWe’ll also show you how to export and have these working in game engines!\nPlus you get the added bonus of seeing Grant acting out all these animations as a template for the movements.\nThe course is Blender 4 compatible, and will be updated if there are any changes to the way things work in Blender 4.1.\nPerfect if you have a basic/reasonable understanding of the Blender interface (so at least a few hours of modelling and using blender under your belt) and also if you want to create animations for your games and game characters.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAnd you’ll get access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nSo what are you waiting for? Dive in now and start animating!\nGet in early for this much requested animation course! The course is still in development, with the first three sections (4+hrs of content) already live. More awesome content is being added on a regular basis. So don't delay, jump in now!",
      "target_audience": [
        "This course is great if you have some experience of Blender and want to bring your creations to life",
        "And it's perfect if you want to create animations for your games and game characters"
      ]
    },
    {
      "title": "Fast and Furious Game Development with JavaScript and AI",
      "url": "https://www.udemy.com/course/fast-and-furious-game-development-with-javascript-and-ai/",
      "bio": "Master JavaScript, HTML, CSS and Web Development using Game Programming - Build Games/Apps with ChatGPT and Gen AI!",
      "objectives": [
        "Students will learn HTML5 + CSS (Cascading Style Sheets) + JavaScript from the ground up. As well as touch on many Computer Science topics.",
        "Students will learn about many of the new exciting features of the HTML5 APIs such as the Canvas for graphics, asynchronous and high performance coding.",
        "Students will learn the basics of Computer Graphics including rasterization, how to draw objects, bitmapped graphics, and how to create a \"Sprite\" engine.",
        "Students will learn how to load and play sounds and music in their JavaScript programs.",
        "Students will learn how to use numerous tools such as graphics and sound editors to manipulate content for their games.",
        "Students will learn how to get user input from the keyboard and mouse to control their game characters.",
        "Students will learn how to use LLMs (Large Language Models) and Generative AI like ChatGPT to help them write fully functioning games.",
        "Students will learn Game Development by developing over half a dozen classic video games with the help of AI and ChatGPT.",
        "And finally, students will be able to put all these things together and create amazing games of their own."
      ],
      "course_content": {
        "The Starting Line": [
          "Let’s Get Ready to Rumble: Introduction, Setup and Installation"
        ],
        "HTML and CSS Crash Course": [
          "Intro to the Web HTML/CSS Basics and the DOM",
          "Building our First Web Page and Using Online Editors",
          "HTML Primer - Getting to Know the Basic Tags",
          "Adding a Bit of Drama with Style, Div, and Span Tags",
          "Embedding Images and Sounds in HTML",
          "Getting Things Done with Buttons and Input Controls",
          "Working with Forms and Introduction to CSS (Cascading Style Sheets)",
          "Exploring More Advanced CSS Styling and Animation"
        ],
        "JavaScript and Graphics Primer": [
          "JavaScript Primer++ - Getting to Know Types, Objects, Variables, Math and Debug",
          "JavaScript Debugging Techniques and External Scripts",
          "Working with Basic Types Part I - Strings, Arrays, Number, and Math Objects",
          "Basic Types Part II - Strings, Arrays, Bit Operations, Number and Math Objects",
          "More Math, Arrays, and Functions - Part III",
          "Advanced Arrays, Functions, and Interacting with the DOM",
          "Making Decisions with \"if\" - Part I",
          "Advanced Conditionals and the Switch Statement - Part II",
          "Repeating Code and Looping with \"for\" and \"while\"",
          "Reusing Code with Functions",
          "Advanced Function Concepts - Anonymous Functions, Callbacks and Recursion",
          "Introducing \"Objects\" Part I - And Other Things That Go Bump in the Night",
          "Objects Part II - Advanced Concepts, Methods, Properties, and Constructors",
          "Using Pre-Written APIs and Objects and Benchmarking with Time and Date Objects",
          "Interfacing to the HTML DOM Part I: Fundamentals, Handlers and Node Manipulation",
          "Interfacing to the HTML DOM Part II: Adding Elements and More Event Handlers",
          "Graphics and Animation with the Canvas Part I: Points, Lines, Pixels, Color",
          "Graphics and Animation Part II - Understanding Graphics Contexts and Paths",
          "Graphics and Animation Part III - Fundamentals of Animation and Basics Physics",
          "Graphics and Animation Part IV - Parallax 3D Star Field and Working with Fonts",
          "Rendering Bitmaps and Sprites: Understanding Bitmap Formats & Graphical Editors",
          "Bitmaps and Sprites Part II - Building our Sprite Engine, Sprite Sheets and More",
          "Bitmaps and Sprites Part III - Finishing our Sprite Engine & Advanced Animation",
          "Hacking the Keyboard - More sprites, Animation Tools and User Control Schemes",
          "Hacking the Keyboard Part II - Advanced Sprite Character Animation and Effects",
          "Interfacing to the Mouse - Reading the Mouse Position, Buttons and Events",
          "Interfacing to the Mouse Part II - Porting a 3D Game \"Raiders-3D\" with Mouse",
          "Playing Sound FX and Music in JavaScript",
          "Sound Design and Engineering - Adding sound FX and Music to Raiders 3D"
        ],
        "Using ChatGPT and other Generative AIs as Coding Assistants": [
          "Using ChatGPT & LLMs as Coding Assistants - Prompting, Code Generation and Demos",
          "Demos of ChatGPT Generated Games - A Preview of What's Possible with ChatGPT/AI"
        ],
        "Game Development with ChatGPT and JavaScript": [
          "Classic “Pong” Part I - Using Generative AI to Code a Version of \"Pong\"",
          "Classic “Pong” Part II - Adding Code, Graphics, Sound and Music",
          "Building “Breakout” Part I - Using Generative AI to Code a Version of \"Breakout”",
          "Building “Breakout’”Part II - Adding Code, Graphics, Sound and Music",
          "Building “Flappy Bird” Part I - Using Generative AI to Code “Flappy Bird\"",
          "Building “Flappy Bird” Part II - Adding Code, Graphics, Sound and Music",
          "Building “Snake” Part I - Using Generative AI to Code a Version of \"Snake\"",
          "Building “Snake” Part II - Adding Code, Graphics, Sound and Music",
          "Building \"Space Invaders\" Part I - Using Generative AI to Code \"Space Invaders\"",
          "Building “Space Invaders” Part II - Adding Code, Graphics, Sound and Music",
          "Building \"Blackjack\" Part I - Using Generative AI to Code \"Blackjack\"",
          "Building “Blackjack” Part II - Adding Code, Graphics, Sound and Music",
          "Retro Rift - Epilog and AI Musings - ChatGPT Builds its own Game"
        ],
        "Bonus Lectures": [
          "Using ChatGPT and Dall-e to Generate Pixel Art",
          "Interfacing to Gamepads"
        ]
      },
      "requirements": [
        "A modern Windows, MacOS, or Linux PC (or VM) capable of running browser based games and running tools like Krita Paint and the Audacity Sound Editor.",
        "A Junior / High School or equivalent understanding of mathematics. Basically, addition, subtraction, a little algebra and vectors from time to time.",
        "No programming experience is necessary, but it doesn't hurt if you know another programming language such as C/C++, C#, Python, BASIC, or even Java.",
        "A lot of patience! This is a university style course with 30-60 minute lectures. We are going to start with \"Hello World\" in HTML and JavaScript and by the end of the course you will be writing complete video games with and without the help of AI."
      ],
      "description": "\"Fast and Furious Game Development with JavaScript and AI\" was created to take anyone with or without experience in coding, teach them HTML5 + CSS and JavaScript from the ground up using Graphics and Game Development as the platform to learn. And then with the fundamentals in hand, we take one of the most exciting journeys in computing and we learn how to use Generative AIs like ChatGPT to build working games! Thus, this is really three courses in one.\nIn the first part of the course, we start with how the internet and HTML work with respect to browsers. Then we start off with a \"Hello World\" in HTML and build our first web page. From there, lecture after lecture, we dig deeper and deeper into the most important features of HTML5 + CSS, so you can create basic websites with formatting, styling, controls and more. So, if you have never made a website in your life, you will learn step by step in this part of the course. Even if you are a seasoned programmer that has never got around to learning HTML5 + CSS you will enjoy this section.\nIn the next part of the course we cover JavaScript from the ground up, we will learn the basics of variables, math, conditionals, loops, functions, and more. As the lectures progress, we cover more and more advanced subjects like event driven programming, recursion, and object oriented programming in JavaScript. Then we switch gears and start learning about computer graphics and game development as we continue to learn JavaScript features. We learn how to draw on the HTML5 Canvas, how to animate sprites, and perform simple physics simulations. Of course, along the way, we learn how to interface with the keyboard and mouse and how to integrate our HTML pages (websites) with JavaScript and how to send messages between them. Additionally, we learn how to manipulate the DOM (Document Object Model) which is the tree like data structure that represents your webpages. Learning a new language can be a daunting task, but learning a new language using graphics and game development as the platform to learn is the only way to do it! I promise it won't be boring.\nIn the last part of the course, we delve into AI and ChatGPT. At this point in the course, you're a skilled JavaScript programmer with all the tools needed to make complete games. However, instead of making games by ourselves, we are going to learn to collaborate with the most advanced AI in the world (arguably) ChatGPT. You will learn how to \"Prompt\" ChatGPT to create working skeletons of classic arcade games. You will learn how to steer the AI to get it to generate working code along with its limitations through \"Prompt Engineering\". Then after ChatGPT gives us a working skeleton of a game then you and I will take that game and finish it with what we have learned and add graphics, sound, music, and more game play features. We will do this over half a dozen times as we re-create classic games that are fun to play as well as amazing achievements for an AI to create. We will build these games and more:\n\nPong\nBreakout / Arkanoid\nSnake\nFlappy Bird\n3D Wire Frame Space Shooter\nSpace Invaders\nBlackjack\nRetroRift (ChatGPT original)\nFinally, the course also comes with free electronic PDF copies of some of my most classic game development books that have taught millions of students and professionals game development over the years:\n\n\"Tricks of the Windows Game Programming Gurus\"\n\"The Black Art of 3D Game Programming\"\n\"Tricks of the 3D Game Programming Gurus\"\nIn closing, this course takes the hottest subjects in computing; JavaScript + HTML5, Game Development and Artificial Intelligence with ChatGPT and blends them together in a way no one has ever done before making learning these subjects fun and engaging. And with the knowledge you learn, you can deploy games and apps that run on billions of devices that support browsers. That's a Super Power you want to have in your toolbox!",
      "target_audience": [
        "Anyone interested in learning about HTML + CSS + JavaScript in a fun way by making games.",
        "Programmers that already know another language(s), but want to learn about HTML + JavaScript development using game development as the platform for learning.",
        "Anyone that is interested in learning how to use Generative AIs and ChatGPT to help write complex programs such as video games.",
        "In a nutshell, this course is for anyone that wants to learn how to make browser based games and applications in JavaScript that can be deployed to billions of users using AI to collaborate with in way that has never been possible before."
      ]
    },
    {
      "title": "Make Your First 2D Game with Unity & C# - Beginner Course",
      "url": "https://www.udemy.com/course/make-your-first-2d-game-with-unity-c-beginner-course/",
      "bio": "Beginner Course to Game Development : Learn how to use Unity and Program in C# by Making a Small 2D Game from A to Z.",
      "objectives": [
        "Learn the C# fundamentals.",
        "Solve fun programming challenges.",
        "Learn the core features of the Unity game engine.",
        "Create a simple game in Unity from A to Z.",
        "Make game art and animations.",
        "Make simple UI and add sounds and music to your game."
      ],
      "course_content": {
        "INTRODUCTION": [
          "Introduction",
          "How to Use This Course",
          "How to Use this Course Links"
        ],
        "THE BASICS OF UNITY": [
          "Section Introduction",
          "Downloading Unity",
          "Creating Projects & Scenes",
          "Overview of the Unity Interface",
          "Creating Objects and Manipulating them",
          "Unity Components",
          "The Unity Console"
        ],
        "C# FUNDAMENTALS": [
          "Section Introduction",
          "Numbers",
          "Strings",
          "Strings Challenge",
          "Variables",
          "Numbers, Strings and Variables Challenge",
          "Boolean Logic",
          "Boolean Logic Challenge",
          "Conditionals",
          "Conditionals Challenge",
          "Hot and Cold Game",
          "Loops",
          "Loops Challenge",
          "Functions",
          "Functions Challenge",
          "Arrays",
          "More Challenges"
        ],
        "LET'S MAKE A GAME": [
          "Section Introduction",
          "Making Game Art",
          "Import Settings and Rigging the Player Character",
          "Creating the Player Controller Script",
          "Animating our Player Character",
          "Making Animation Transitions",
          "Programming the Hazard's Movement",
          "Dealing the Player Damage",
          "Understanding Prefabs",
          "Making the Spawner Script",
          "Destroying Hazards and Adding some Environment Art",
          "Creating Particle Effects",
          "Adding UI to our Game",
          "Creating a Main Menu and Lose Screen",
          "Adding Sounds and Music",
          "Adding a Dash Move",
          "Publishing the Game to Itch io",
          "Bonus Lecture : Conclusion"
        ]
      },
      "requirements": [
        "Have a PC or MAC",
        "(Optional) Have a drawing tablet to make art for your game. If not you can make pixel art with your mouse, download the project files or use simple geometric shapes."
      ],
      "description": "In this game development course, you'll learn how to make your first game using the Unity game engine and the C# programming language.\n\n\nHere is a list of the keys things that you will learn by watching this course :\nFirst of all, you'll have a very good understanding of the basics of Unity once you've finished this course: you'll know how to navigate its interface, create objects, manipulate those, use the prefab system, and lots more.\n\nYou'll learn all about the C# fundamentals, in other words, understand what are variables, functions, arrays, loops, conditionals, and a wealth of other key programming tools. You'll also be given challenges so that you don't only copy what we do but gain a much deeper understanding of this amazing programming language.\n\nOnce we've covered the basics of both Unity and C# we'll create an entire game: Raining Apocalypse!\nThere we will learn how to make simple game art using a 2D drawing application of your choice like Ps or Gimp, and how to rig and animate your 2D characters in Unity.\nCreate a simple player controller, falling hazards, and a spawning system in C#.\nLearn how to use Unity's UI to make an awesome main menu, game over screen, and to display the player's health.\nLearn how to add cool sounds and music to your game.\nAnd of course, publish your game on Itch io for the world to play and enjoy :)!\n\n\nWhy learn from us?\nMy brother and I created this course to share our passion for making games and help others bring their unique visions to life!\nWe've been teaching aspiring game developers how to use Unity, code with the C# programming language, and make game art and animations. Our tutorials have been viewed by thousands and are very popular, every day we get dozens of developers thanking us for helping them out on their own game dev journey!\nWe've not only made tons of tutorials but we've also created plenty of games using Unity, both 2D, and 3D!\nSo we know what it's like to create a complete, polished experience from A to Z, and really want to equip you with the right tools and knowledge so you can do the same!",
      "target_audience": [
        "Absolute beginner wanting to learn how to make games with Unity.",
        "Or a beginner who already knows a little about game development, but who wants to acquire a stronger understanding of the C# fundamentals and what it takes to make a whole game from A to Z using Unity."
      ]
    },
    {
      "title": "WebGL w/ Unity: The Ultimate Guide to Games in the Browser",
      "url": "https://www.udemy.com/course/webgl-with-unity-the-ultimate-guide-to-games-in-the-browser/",
      "bio": "Unity3D is the easiest way to deploy HTML5 games! (Easier than three.js, babylon.js, phaser and playcanvas!)",
      "objectives": [
        "Deploy a Unity game to the web within the first ten minutes of the course!",
        "Learn where to find free game source code to study and share",
        "Understand the history of Unity and the web and the reasons you'd want to use Unity as a web development tool",
        "Upload games to various services (Simmer, Github Pages, generic web hosting, Firebase and AWS)",
        "Put live browser games on Wordpress, Patreon, Kickstarter, and Medium",
        "Pull images from the web and use them in your games",
        "Interface with a web search API and build a multimedia image search",
        "Build custom WebGL templates and make use of web responsiveness for various resolutions.",
        "Communicate between Unity (C#) to the web browser (Javascript)",
        "Resolve common WebGL errors like CORS, and memory issues"
      ],
      "course_content": {
        "Introduction": [
          "Exporting your first WebGL Game",
          "Local Servers, NGrok and a Place to Deploy Your Game",
          "Review Building and Deploying and an Assignment",
          "Debugging WebGL builds with the Javascript Console"
        ],
        "Syllabus and Background": [
          "Syllabus",
          "History of Unity on the Web",
          "Why Care about WebGL?",
          "Why use Unity for Browser Games?",
          "Why not use Unity for Browser Games?",
          "About your Instructor"
        ],
        "Secrets to a Better WebGL Build": [
          "Three Ways to Instantly make your WebGL Build Better",
          "Make your Game Responsive",
          "Use Better Fonts",
          "Use Data Caching"
        ],
        "Player Settings": [
          "Player Settings"
        ],
        "Hosting and Deployment": [
          "Hosting Options",
          "CPanel Web Hosting with Siteground (part 1, setup)",
          "CPanel Web Hosting with Siteground (part 2, ftp)",
          "Deploy to Github Pages",
          "Deploy to Firebase (Google Cloud)",
          "Deploy to AWS (Introduction)",
          "Adding your Game to a Wordpress or Medium Blog Post",
          "Adding your Game to Patreon or Kickstarter"
        ],
        "Custom WebGL Templates": [
          "Custom WebGL Templates Intro",
          "Aside: Git Bash for Windows",
          "Copying the Minimal Template",
          "Understanding Templates and Avoiding Overwrites",
          "Adding a Background to our Template",
          "Adding a Title and Footer to our Template",
          "Adjusting our Border with Javascript",
          "Centering the Game Container",
          "Cleaning Up our CSS Styles",
          "Backporting Changes to Unity",
          "Review and a Quick Look at the Responsive Template",
          "Assignment: Deploy a Custom WebGL Template"
        ],
        "Loading Images from the Web": [
          "Loading Images Introduction",
          "Aside: Downloading the Project from Github",
          "Downloading an Image from Unity and a CORS Error",
          "Explaining CORS and the Single Origin Policy",
          "Using HTTPie to Inspect Headers",
          "Testing CORS with HTTPie",
          "Using Cloudinary to Beat CORS Errors",
          "A Cloudinary Class in Unity"
        ],
        "Using Web API's with Unity WebGL": [
          "Using JSON & Web API's to Build a Search tool in Unity",
          "Introduction to JSON",
          "The Pixabay API",
          "Setting up the Unity UI",
          "Dowloading JSON with UnityWebRequest",
          "Wiring up the UI",
          "Parsing JSON with MiniJSON (Introduction)",
          "Parsing JSON with MiniJSON (code)",
          "Downloading the Image from Pixabay",
          "Review, Plus the Github Repo for this Section"
        ],
        "Communicating between Unity and the Browser": [
          "Interacting with Browser Scripting",
          "Project Setup and Workflow",
          "Calling Javascript from Unity (C#)",
          "Writing Javascript Code in JSLib to Change the Background Color",
          "Preparing Unity for a Call from Javascript",
          "Calling Unity Code (C#) from Javascript",
          "Backporting Changes to Unity (Again!) and a Github Repo for the Project",
          "Review and the Browser Scripting Unity Manual Page"
        ],
        "Course Review": [
          "Thank You! Final Course Wrap Up",
          "Bonus: Learn Chrome Developer Tools"
        ]
      },
      "requirements": [
        "This course uses both C# (Unity) and Javascript / HTML5 / CSS (Web)",
        "Neither C# nor Javascript knowledge is required, but you'll get the most out of this course if you've done some programming",
        "Low-level WebGL or WebAssembly knowledge is NOT required",
        "A passion for learning incredible new technologies IS required"
      ],
      "description": "Fellow code warriors, if you've ever considered building 2D or 3D games for the browser, you won't find a better guide than Rocco's just completed course on Udemy. Rocco is a gifted instructor and keeps the information flowing at the right pace while maintaining a very practical emphasis.\nAND he very thoughtfully avoids confusing users by wearing the same red plaid shirt for every lecture. Check it out!\n- Michael Sample, Director of Engineering @Gliffy\nAre you a game developer looking for the ultimate low-friction way to reach a wider audience on the web?\nOr are you a web developer looking for a mature development environment for bringing 2D and 3D graphical web applications to life?\nWithin the first ten minutes of this course, you will be able to build a 3D app and deploy it to a live website. Then you'll learn the rich history of Unity and the web, and understand how to deploy browser games to various services including:\nGithub Pages\nGoogle Cloud / Firebase\nAWS\nKickstarter, Patreon, Wordpress and Medium and more...\nEarly in the course, you'll learn three secrets that will instantly make your game look fantastic in the browser. Then you'll do a deep dive about how to use images and textures pulled from the web. You'll learn how to interface with a web search API using CORS and JSON, and we'll cover how to avoid common errors when exporting your game to WebGL. Finally, you'll learn how to achieve bi-directional communication between the browser and Unity.\nThis course is NOT a general purpose Unity tutorial, nor is it a general purpose Web development class. There are plenty of those. This IS an intermediate-level topics course that will spark your imagination with the amazing possibilities of 2D and 3D graphical applications in the browser.\nWhile the earlier lessons don't require much coding, we will use plenty of C#, Javascript, HTML and CSS in the later lessons. You'll get the most out of this course if you have some development experience with either Unity or the web. But don't worry, we'll go over all the code line-by-line, and I'll share various resources and documentation with you that will help you create awesome browser-based 2D and 3D apps!\nFrom the instructor:\nI have almost twenty years of professional development experience. In the first half of my career I was a professional game developer (Rock Band, The Sims, and many more), and in the second half I specialized in graphical applications for the web (Gliffy diagramming and SIMMER game hosting).\nI've tried various web-graphics libraries like three.js, babylon.js, phaser and playcanvas. Nothing comes close to the mature development tools contained within Unity3D. I believe we are at the dawn of a new era of rich 2D and 3D experiences on the web, and Unity is the killer app that will make it happen.",
      "target_audience": [
        "Web Developers interested in 2D and 3D Game Development",
        "Game Developers interested in deploying their game to the Web",
        "Anyone who is interested in creating rich multimedia applications that pull data and images from WebAPI's"
      ]
    },
    {
      "title": "Unity 3D 2017 - Build , program & publish Crossy Road game",
      "url": "https://www.udemy.com/course/unity-3d-2016-build-program-publish-crossy-road-game/",
      "bio": "Step by step video lessons to create and publish a 3D 8 bit art game like Crossy Road to the app stores. using Unity3D",
      "objectives": [
        "Learn how to get your iOS developer license",
        "Learn how to create your own iPhone game using minimal code (C# code)",
        "Learn how to create your own Android game using minimal code (C# code)",
        "Learn basics of Unity 5 for iOS development and advance techniques to make a professional casual game",
        "Learn how to program animations",
        "Learn how to dynamically create game content",
        "Learn how to make a game menu",
        "learn how to keep player's score",
        "Learn how to publish your very own iPhone game to the iTunes app store in one afternoon",
        "Learn how to use 3D pixel art in the game"
      ],
      "course_content": {
        "Initial Setup": [
          "About your instructor",
          "About this course",
          "Download crossy road Unity project and Overview"
        ],
        "Designing the environment": [
          "Creating the smart terrain, grass, road prefabs"
        ],
        "Programming the world": [
          "First check - transition",
          "Creating the main character programming script in c sharp",
          "Starting to write the character jump method in monodevelop",
          "Coding the character jump animation",
          "Make the character move to each strips",
          "Making the character smoothly move to the next location",
          "Working on the jump height animation",
          "Program dynamic strip spawning",
          "Add more prefab templates for grass",
          "Adding trucks and taxis to the roads",
          "Import your own 3D pixel art models into Unity 3D",
          "Add physics collider to main character",
          "Program the collision detection",
          "How to add rigibodies and colliders on all vehicles",
          "Create vehicle prefabs with 3D physics",
          "Optional - Voxel Software Advanced techniques"
        ],
        "Designing the character AI": [
          "Program player death animation",
          "Prevent character from moving after death animation",
          "Adding the swiping functionality to the main character",
          "Writing the method stubs for the multidirectional jumps",
          "Triggering the jump upward on swipe up command",
          "Making the main character face the correct direction",
          "Programming the jump to the left",
          "Programming the jump right logic",
          "Creating physical boundaries left and right",
          "Program the character death colliding with boundaries",
          "Create the obstacle type for trees and rocks",
          "Programming obstacles collision prevention"
        ],
        "Menus and more": [
          "Programming the current score value",
          "Program the score User Interface",
          "Create a simple Game Menu",
          "Programming the Start Menu",
          "Create and add the game title to the start menu",
          "Create the game over menu screen",
          "Programming the Game Over menu",
          "Programming game reloading",
          "Unity settings for iOS development",
          "Lighting Auto baked OFF",
          "Creating the iOS icons for free",
          "Generate the xcode project and open it",
          "Updating Xcode project settings",
          "Addendum 64 bits in Unity compilers"
        ],
        "App Store Publishing (iOS)": [
          "Adding a new app in iTunes Connect",
          "Entering the itunes connect settings",
          "Create ingame screenshots for itunes connect dashboard",
          "Upload your app to iTunes app store",
          "Valid architectures arm64 bits",
          "Add build in ITC and submit for review",
          "Congratulations"
        ],
        "Google Play store (Android)": [
          "01 Download Android SDK and Android Studio for free",
          "Install Android SDK and Android Studio",
          "Switch Unity 5 project to Android",
          "Creating the APK file",
          "Locate the Android SDK within Unity",
          "Creating a keystore or using a preexisting one",
          "Adding a new app in google play developer console",
          "Adding google console assets",
          "Upload your APK file to google dev console",
          "Publishing to the google play store",
          "Help me, help you"
        ],
        "Advanced Topics": [
          "WARNING!",
          "Using SceneManager to control levels",
          "Download these files",
          "Creating the coin system - Importing Coin package",
          "Programming the coin rotation",
          "Programming the coin pickup",
          "Increase coin score and destroy coin",
          "Adding bonus Sound effect to coin",
          "Artifical intelligence - import ghost package",
          "Simple AI with MoveTowards function",
          "Rotating Ghost with LookAt method",
          "Adding collision to ghost prefab",
          "Ways to improve Artificial intelligence",
          "Improving the AI",
          "Starting the Ghost chasing on game start",
          "*** CHARACTER SELECTION SERIES ***",
          "Character Selection Menu",
          "Cleaning up the character selection scene",
          "Taking pictures of the characters",
          "Create the character selection scroll view",
          "Program the code to select the new character",
          "Switching characters in the play scene"
        ],
        "Bonus - Files": [
          "Bonus - Files"
        ]
      },
      "requirements": [
        "a PC, Linux or MAC computer"
      ],
      "description": "Important: all software used are FREE to download and use on PC and MAC computers (no need to pay, cheers!)\nIn this course you will learn how to design and program a 3D pixel art video game just like Crossy Road using Unity3D and publish it in the app stores (iOS and Android).\nWhy would you want to learn how to make a game like crossy road? Because it's the most efficient way to create a good looking game by yourself that you can publish in the app store, without having the need of a team of multiple people.\nThis course can be taken by anyone even if you've got no programming skills or very little\nThis course is meant for non-artists, meaning you don't have to be an artist to be able to use 3D pixel art graphics.\nYou will learn how to use free tools to make an amazing game from scratch as I will show you every single line of programming and how to use Unity 3D to be able to make professional games all by yourself quickly and without having to spend money.\nYou will learn how to download and install unity 3D on Mac, PC or Linux.\nThen we will get to create a project, add levels and add graphichs such as the Crossy Road chickens, Roads, trees, rocks, cars, trucks and much more.\nYou will also learn how to add artificial intelligence to these objects to make them come to life.\nAlso, you will learn how to make game menus, game over screens, and how to keep score.\nOnce we've got a working game, we will go through the whole process to publish the game to the iTunes app store.\nThen you will learn how to add all these objects in the game engine called Unity 3d to make amazing 3d games, just like crossy road.\nNow, this course is meant to make things this super easy for you. All the steps are shown to you in the video lectures, so you cant possibly miss a step.\nAnd by the way as a bonus, this course includes free downloads of the finished 3D models, Unity projects and levels as well.\nThe skills you will learn in this course can be applied to so many more projects as they are the core foundations of any professional video games. Invest in yourself by joining this course now\nWhat is 3D Pixel Art?\n3D Pixel art is a form of digital art, created through the use of 2D-like raster graphics software, where images are edited on the pixel level in the form of blocks. Graphics in most old (or relatively limited) computer, console, graphing calculator and mobile phone video games are mostly 2D pixel art, and now we use the new technologies t have the retro-cool style with the amazing functionality that 3d technology provides.",
      "target_audience": [
        "Solo / Indi entrepreneurs",
        "Graphic design students",
        "Computer science students",
        "great course for someone who wants to learn about the iTunes publication process",
        "People who want to start a mobile app business the inexpensive way, on their own"
      ]
    },
    {
      "title": "Intro to 3d Modeling Using Blender",
      "url": "https://www.udemy.com/course/3dmotive-intro-to-3d-modeling-using-blender/",
      "bio": "In this course, instructor Alan Thorn is going to be giving a comprehensive introduction to Blender for Game Artists!",
      "objectives": [
        "Learn modeling, texturing, UV Unwrapping, rigging, animating, and more using Blender",
        "Learn the full pipeline of how to use Blender for 3d modeling for the first time"
      ],
      "course_content": {
        "Intro to UI, Manipulating Objects, and Navigating the 3d Space": [
          "Download Course Files Here!",
          "Introduction",
          "Downloading Blender",
          "Blender Control Presets",
          "User Preferences",
          "Themes and Colors",
          "Restoring the Last Session",
          "Customizing the UI",
          "UI Presets",
          "Saving Presets",
          "Viewport Navigation",
          "Changing Viewports",
          "Orthographic Mode",
          "Creating Primitives",
          "3d Cursor",
          "Transforming Objects Parametrically",
          "Transforming Objects Interactively",
          "The Outliner",
          "Edit Mode",
          "Object Properties"
        ],
        "Introduction to Modeling and Basic Shapes": [
          "Introduction",
          "Modeling Preparation and References",
          "Starting the Hinge",
          "The Mirror Modifier",
          "Inset and Extrude",
          "Modelling the Lower Arm",
          "Snapping",
          "The Solidify Modifier",
          "The Arm Base",
          "The Knife Tool",
          "The Knife, NGons and Quads",
          "Completing the Forearm",
          "The Arm Tip",
          "Completing the Model"
        ],
        "Modifiers, UV Unwrapping, and Texturing Basics": [
          "Introduction",
          "Disabling the Mirror Modifier",
          "Starting to Unwrap",
          "Seams",
          "Islands and Scale",
          "Pinning",
          "Mapping Cylindrical Objects",
          "Recycling UVs",
          "Texel Density",
          "Combining Islands",
          "Exporting UV Layouts",
          "Creating Textures",
          "Texture Mapping"
        ],
        "Animation and an Intro to Rigging and Poses": [
          "Introduction",
          "Animation Overview",
          "Object Separation",
          "Setting the Base Pivot",
          "Setting the Lower Arm Pivot",
          "Setting the Lower Arm Pivot Part 2",
          "Rigging with Hierarchies",
          "Animation Basics",
          "The Dope Sheet",
          "Auto Key",
          "Pose to Pose Animation",
          "The Graph Editor",
          "Refining the Animation",
          "Markers"
        ],
        "Importing to Unity, Working with Cameras, and Additional Animation": [
          "Introduction",
          "Tweaking Before Export",
          "Exporting to FBX",
          "Importing into Unity",
          "Configuring Meshes",
          "Starting a Scene",
          "Creating an Animation State Machine",
          "Adding Textures",
          "Working With Instances",
          "Building an Environment",
          "Duplicating Objects",
          "Recording a Camera Fly Through",
          "Image Effects",
          "Conclusion",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "Download a copy of the completely free 3d software Blender",
        "Access to Photoshop or Gimp"
      ],
      "description": "In this course, instructor Alan Thorn gives a comprehensive introduction to Blender for Game Artists. Here, Alan will show you how to get up and running in Blender for creating animated in-game models even if you're a complete newbie! In the earlier volumes, you will be learning a range of topics that include: Blender (and 3d software) basics, primitive creation, 3D space coordinates, loading in reference material, and basic mesh manipulation.\nBy the end of the course, you'll start to feel like a game-art pro as you begin to learn and understand the concepts of UV unwrapping for textures, asset rigging for animation, animation creation, mesh exporting, and game integration as you add your asset to Unity! If you've ever wanted to learn 3d from the ground up with a completely free software, this course is for you!\n(Students - please look under Section 1 / Lecture 1 downloads for the source files associated with the lesson.)\nMore about the Instructor:\nAlan Thorn is a freelance game developer and author with over 12 years of industry experience. He is the founder of London-based game studio, Wax Lyrical Games, and is the creator of award-winning adventure game Baron Wittard: Nemesis of Ragnarok. He has worked freelance on over 500 projects worldwide including games, simulators, kiosks, and augmented reality software for game studios, museums and theme parks. He has spoken on game development at universities throughout the UK, and is the author of nine books on game development, including Teach Yourself Games Programming, Unity 4 Fundamentals and the highly popular UDK Game Development.",
      "target_audience": [
        "Absolute beginners to 3d or Blender",
        "The course is not intended for advanced users, but is great for anyone new to the world of 3d"
      ]
    },
    {
      "title": "Learn 2D Game Development: Godot 4.3+ & C# from Scratch",
      "url": "https://www.udemy.com/course/learn-2d-game-development-godot-43-c-from-scratch/",
      "bio": "Master the Godot 4 Engine with C#, Build Engaging 2D Games, and Ignite Your Game Development Journey!",
      "objectives": [
        "Master Godot 4 with C#: Learn scene creation, input handling, collision detection, and more using the power of C# in the Godot 4 game engine.",
        "Create Diverse Games: Develop Flappy Bird, Angry Birds, memory games, platformers, puzzles, space shooters, and maze escapes.",
        "Acquire Game Dev Skills: Gain level design, animation, enemy AI, power-ups, UI design, and apply design patterns like singletons and event buses.",
        "Explore Mechanics & Patterns: Understand parallax scrolling, physics-based gameplay, pathfinding AI, state machines, and dynamic level loading."
      ],
      "course_content": {
        "The grand old Promo and Welcome!": [
          "Hello!"
        ],
        "Setting up and getting help": [
          "Introduction",
          "Godot 4.4!",
          "Note on editor selection",
          "Godot Setup - Linux",
          "Godot Setup - Windows",
          "Godot Setup - MacOS",
          "Getting Help - PLEASE WATCH",
          "Pre-flight - PLEASE WATCH",
          "Resources as zips"
        ],
        "Getting To Know Godot with Gem Catcher": [
          "Ready...",
          "01 - Introduction",
          "02 - Game Scene",
          "03 - Nodes, Classes, Instances",
          "04 - Paddle Scene",
          "05 - Global Position",
          "06 - Gem Challenge",
          "07 - Gem Challenge Solution",
          "08 - UI Features",
          "09 - Scene Life Cycle",
          "10 - Moving Paddle",
          "11 - Restricting Paddle",
          "12 - Gem Falling Challenge",
          "13 - Gem Falling Challenge Solution",
          "14 - Viewport and Tree",
          "15 - Signals",
          "16 - Signals in Code",
          "17 - Custom Signals",
          "18 - Custom Signals Challenge Solution",
          "19 - Referencing Nodes",
          "20 - Spawning A Gem",
          "21 - Spawning Gems Challenge",
          "22 - Spawning Gems Challenge Solution",
          "23 - Game Over Detection Challenge",
          "24 - Game Over Detection Challenge Solution",
          "25 - Stopping The Game",
          "26 - Keeping Score Challenge",
          "27 - Keeping Score Challenge Solution",
          "28 - Music",
          "29 - Sound Effects",
          "30 - Aspect Ratios",
          "31 - Project Files"
        ],
        "Introduction to C#": [
          "01 - Intro",
          "02 - Creating and Running a Project",
          "03 - Variables",
          "04 - Arithmetic Operators",
          "05 - Conditionals and Comparisons",
          "06 - Conditionals Challenge",
          "07 - Conditionals Challenge Solution",
          "08 - Lists And Loops",
          "09 - Dictionaries",
          "10 - Dictionaries Challenge",
          "11 - Dictionaries Challenge Solution",
          "12 - Functions",
          "13 - Classes, Definitions and Properties",
          "14 - Classes, static and constants",
          "15 - Class Inheritance, protected, override",
          "16 - Partial Classes, Program Main",
          "16a - Singletons, this keyword",
          "17 - Attributes",
          "18 - String Formatting",
          "19 - Events and Delegates",
          "20 - Enums"
        ],
        "Game 1 - Tappy Plane (Flappy Bird Clone)": [
          "Introduction",
          "01 - Section Goals",
          "02 - Project Setup Challenge",
          "03 - Project Setup Challenge Solution",
          "04 - Development Approach",
          "05 - Physics Nodes",
          "06 - Plane Scene",
          "07 - Plane Falling",
          "07a - FPS Notes",
          "08 - Plane Flying Challenge",
          "09 - Plane Flying Challenge Solution",
          "10 - Animation Player",
          "11 - Animation Player Challenge",
          "12 - Animation Player Challenge Solution",
          "13 - Static Body Barrier",
          "14 - Pipe Scene Challenge",
          "15 - Pipe Scene Challenge Solution",
          "16 - Laser Scene Challenge",
          "17 - Laser Scene Challenge Solution",
          "18 - Pipes Scene",
          "19 - Pipes Scrolling Challenge",
          "20 - Pipes Scrolling Challenge Solution",
          "21 - Pipes Random Position",
          "22 - Pipes Spawning Challenge",
          "23 - Pipes Spawning Challenge Solution",
          "24 - Plane Hits Floor",
          "25 - Plane Signal Challenge",
          "26 - Plane Signal Challenge Solution",
          "27 - Stop The Pipes Challenge",
          "28 - Stop The Pipes Challenge Solution",
          "29 - Pipes Laser Collision",
          "30 - Main Scene And UI",
          "31 - Main Scene Challenge",
          "32 - Main Scene Challenge Solution",
          "33 - Scene Navigation",
          "34 - Scene Navigation Challenge",
          "35 - Scene Navigation Challenge Solution",
          "36 - Autoloads / Globals",
          "37 - Game Manager",
          "38 - Event Bus Pattern",
          "39 - Singleton Challenge",
          "40 - Singleton Challenge Solution",
          "41 - Pipes Stopping Challenge",
          "42 - Pipes Stopping Challenge Solution",
          "43 - Score Manager Outline",
          "44 - Score Manager Challenge",
          "45 - Score Manager Challenge Solution",
          "46 - Hud, Ui, Canvas Layers",
          "47 - Score Signal",
          "48 - Score Update Challenge",
          "49 - Score Update Challenge Solution",
          "50 - High Score Label Challenge",
          "51 - High Score Label Challenge Solution",
          "51a - High Score Persistence",
          "52 - Game Over UI Challenge",
          "53 - Game Over UI Challenge Solution",
          "54 - Intro to Parallax",
          "55 - Parallax 2D Node",
          "56 - Parallax Scene",
          "57 - Sound, Stopping Parallax",
          "58 - Simple Scene Transition",
          "59 - Complex Scene Transition",
          "60 - Summary",
          "Extras 1 - Using Godot to disconnect signals",
          "Extras 2 - Dean's double score bug!"
        ],
        "Game 2 - Angry Animals (Angry Birds and Physics)": [
          "Introduction",
          "01 - Section Goals",
          "02 - Project Setup Challenge",
          "03 - Project Setup Solution",
          "04 - Rigidbody2D Introduction",
          "05 - Scenes Outline",
          "06 - Animal Scene Challenge",
          "07 - Animal Scene Challenge Solution",
          "08 - Animal Scene Logic",
          "09 - Animal Scene Logic Challenge",
          "10 - Animal Scene Logic Challenge Solution",
          "11 - Animal Scene Logic Flow",
          "12 - Animal Scene Setup Challenge",
          "13 - Animal Scene Setup Challenge Solution",
          "14 - Drag Detection",
          "15 - Drag Movement",
          "16 - Release",
          "17 - Flight",
          "18 - Water Challenge",
          "19 - Water Challenge Solution",
          "20 - Animal Regen Challenge",
          "21 - Animal Regen Challenge Solution",
          "22 - Cup Scene",
          "22a - Cup Collisions Intro",
          "23 - Cup Collisions",
          "24 - Overall Flow",
          "25 - Main Scene, Score Manager Challenge",
          "26 -Main Scene, Score Manager Challenge Solution",
          "27 - Level Button Scene",
          "28 - Level Button Logic Challenge",
          "29 - Level Button Logic Challenge Solution",
          "30 - Scene Inheritence",
          "31 - Navigation Challenge",
          "32 - Navigation Challenge Solution",
          "33 - Game Ui Challenge",
          "34 - Game Ui Challenge Solution",
          "35 - Scorer Scene Logic",
          "36 - Scorer Scene Logic, Groups In Code",
          "37 - Scorer Scene Level Complete Challenge",
          "38 - Scorer Scene Level Complete Solution",
          "39 - Scorer Scene Attempts Challenge",
          "40 - Scorer Scene Attempts Solution",
          "41 - GameUi Logic Challenge",
          "41a - GameUi Logic Solution",
          "42 - Score Persistence Approach",
          "43 - Score Persistence #1",
          "44 - Score Persistence #2"
        ],
        "Game 3 - Memory Madness": [
          "Introduction",
          "01 - Approach",
          "02 - Outline",
          "03 - Project Setup",
          "04 - Project Setup Labels",
          "05 - Master Scene",
          "06 - Custom Resources Intro",
          "07 - Custom Resources Example",
          "08 - Custom Resources Challenge",
          "09 - Custom Resources Challenge Solution",
          "10 - Image Files List Resource Setup",
          "11 - Image Files List Resource Challenge",
          "12 - Image Files List Resource Challenge Solution",
          "13 - Level Data Resources",
          "14 - Image Manager Image Load",
          "15 - Image Manager Image Functions Challenge",
          "16 - Image Manager Image Functions Challenge Solution",
          "17 - Level Button Outline",
          "18 - Level Button UI",
          "19 - Level Button Logic",
          "20 - Main Screen Layout",
          "21 - Front Sprite Intro",
          "22 - Front Sprite Tweens",
          "23 - Game Screen Layout",
          "24 - Game Screen Layout Challenge",
          "25 - Game Screen Layout Challenge Solution",
          "26 - Memory Tile Ui",
          "27 - Level Building Logic Outline",
          "28 - Level Building Logic Implementation",
          "29 - Level Building Logic Challenge",
          "30 - Level Building Logic Challenge Solution",
          "31 - Navigation Outline",
          "32 - Navigation Challenge",
          "33 - Navigation Challenge Solution",
          "34 - Scorer Logic Outline",
          "35 - Tile Logic",
          "36 - Scorer Scene",
          "37 - Scorer Logic 1",
          "38 - Scorer Logic 2",
          "39 - Tile Tweens",
          "40 - Game Over Challenge",
          "41 - Game Over Challenge Solution",
          "42 - Game Over UI Complete",
          "43 - Sound Manager",
          "44 - Updates, End Of Section"
        ],
        "Game 4 - Foxy Antics, the 80s Platformer!": [
          "Introduction",
          "01 - Outline and goals",
          "02 - Setup Challenge",
          "03 - Setup Challenge Solution",
          "04 - Tile Map Layers",
          "05 - Player Scene",
          "06 - Player Animations",
          "07 - Player Movement",
          "08 - Player State",
          "09 - Enemy Outline",
          "10 - Base Enemy",
          "11 - Snail Visuals",
          "12 - Snail Logic",
          "13 - Frog Visuals",
          "14 - Frog Logic",
          "15 - Eagle Visuals",
          "16 - Eagle Logic",
          "17 - Bullets",
          "18 - Bullets Logic",
          "19 - Object Maker",
          "20 - Shooter Scene",
          "21 - Eagle Shoot Challenge",
          "22 - Eagle Shoot Challenge Solution",
          "23 - Explosion",
          "24 - Fruit Pickup",
          "25 - Ball Spikes Path Folllow",
          "26 - One way, Alternative Tiles",
          "27 - Player Invincible and Hurt Outline",
          "28 - Player Invincible and Hurt Challenge / Solution",
          "29 - Player Hurt",
          "30 - Player Lives",
          "31 - Hud Challenge",
          "32 - Hud Challenge Solution",
          "33 - Hud Score And Lives",
          "34 - Boss Intro",
          "35 - Animation Trees and Determinism",
          "36 - Boss Logic",
          "37 - Checkpoint",
          "38 - Checkpoint Challenge",
          "39 - Checkpoint Challenge Solution",
          "40 - Main Scene",
          "Pre-41 - Pixel Snap",
          "41 - Moving Platform Approaches, PathFollow and Tween",
          "42 - Scene Navigation",
          "43 - Hud Navigation",
          "44 - Shake Cam",
          "45 - Parallax",
          "46 - Stopping Things",
          "47 - Pausing the Tree",
          "47a - Terrains (Autotiling)",
          "48 - Final thoughts and thank you"
        ],
        "Game 5 - Sokoban!": [
          "Introduction",
          "01 - Learning Outline",
          "02 - Project Setup",
          "03 - Level Data Structure",
          "04 - Level Data Read",
          "05 - Main Scene",
          "06 - Level Button Scene",
          "07 - Main Scene Level Buttons Challenge",
          "08 - Main Scene Level Buttons Challenge Solution",
          "09 - Level and Player Scenes",
          "10 - Tile Map Layer Api",
          "11 - Building The Level",
          "12 - Placing Camera and Player",
          "13 - Level Button Navigation",
          "14 - Player Movement",
          "15 - Pushing Boxes",
          "16 - Game State",
          "17 - Game ui",
          "18 - Game Over ui",
          "19 - Completed Game"
        ],
        "Game 6 - Space Ace - Your challenge!": [
          "Introduction",
          "01 - Introduction, this is different :D",
          "02 - Project Review",
          "03 - Ui Button Challenge",
          "04 - Ui Button Challenge Solution",
          "05 - Scenes Overview",
          "06 - Inheritance Overview",
          "07 - Player Movement",
          "08 - Player Movement Challenge",
          "09 - Player Movement Challenge Solution",
          "10 - Hit Box",
          "11 - Bullet Challenge",
          "12 - Bullet Challenge Solution",
          "13 - Bullet Movement",
          "14 - Bullet Creation Challenge",
          "15 - Bullet Creation Challenge Solution",
          "16 - PowerUp Scene",
          "17 - Power Up Challenge",
          "18 - Power Up Challenge Solution",
          "19 - Shield Challenge",
          "20 - Shield Challenge Solution",
          "21 - Player Powerup Shield",
          "22 - Explosion Challenge",
          "23 - Explosion Challenge Solution",
          "24 - Enemy Base Challenge",
          "25 - Enemy Base Challenge Solution",
          "26 - Enemy Shoots Challenge",
          "27 - Enemy Shoots Challenge Solution",
          "28 - Health Bar",
          "29 - Enemy Death Challenge",
          "30 - Enemy Death Challenge Solution",
          "31 - Power Up Spawn Challenge",
          "32 - Wave Manager Resource Challenge",
          "33 - Wave Manager Resource Challenge Solution",
          "34 - Wave Manager Scene",
          "35 - Game ui",
          "36 - Player Health Challenge",
          "37 - Player Health Challenge Solution",
          "38 - Scoring",
          "39 - Game Over",
          "40 - Saucer Intro",
          "41 - Saucer Scene",
          "42 - Saucer Manager Scene",
          "43 - Homing Missile Scene",
          "44 - Homing Missile Logic",
          "45 - Homing Missile Complete",
          "46 - Wave Manager Tweaks, Game Complete"
        ]
      },
      "requirements": [
        "Computer with Adequate Specifications: A computer capable of using the Vulkan renderer is required to work on the projects effectively - the course contains a free video to make a check!",
        "This course assumes no prior knowledge of the C# but does assume a basic understanding of programming concepts. However, even individuals without programming experience can benefit from the course.",
        "A 64 bit machine. The lastest .NET does not work with 32 bit machines."
      ],
      "description": "Welcome to \"Learn 2D Game Development: Godot 4.3+ & C# from Scratch\" – an engaging video course designed to equip aspiring developers with the skills and knowledge needed to create incredible games and applications using the powerful and versatile C# programming language.\nIn this comprehensive course, you'll embark on an exciting journey through a variety of projects, each carefully designed to enhance your understanding of essential programming concepts, object-oriented design, and practical problem-solving techniques. Whether you're a complete beginner or have some coding experience, this course provides a solid foundation for building games, applications, and more with C#.\nThroughout the course, you will:\n\n\nCreate a Flappy Bird-style game: Discover the fundamentals of scene creation, handle user inputs, implement collision detection, and add parallax scrolling effects to enhance visual depth.\nRecreate the gameplay of Angry Birds: Dive into physics-based mechanics, develop projectile motion, and design levels featuring destructible environments to master the essentials of game physics and level construction.\nDesign a memory game: Gain hands-on experience with UI-focused game development by building an intuitive and visually engaging memory game interface.\nBring back the nostalgia of 80s platformers with CJ Elephant Antics: Develop intricate level designs, animate characters, and create responsive controls to build obstacle-filled stages. Learn to use Godot's built-in State Machine to design and implement an exciting end-of-level boss!\nTackle puzzle game development with a Sokoban-inspired project: Learn to dynamically load levels from files, implement challenging puzzle mechanics, and apply programming design patterns to create elegant and efficient solutions.\nBuild a fast-paced space shooter: Craft a thrilling intergalactic adventure by designing enemy AI with path-following behaviors, creating dynamic enemy waves, integrating power-up systems, and enhancing visuals with particle effects and other aesthetic touches.\nDevelop an immersive artifact-collection escape game: Utilize 2D navigation AI to program guard behaviors, strategize player escapes, and create tension-filled gameplay moments.\nBy the end of the course, you'll have built an impressive portfolio of C# projects that highlight your skills in both programming fundamentals and game development. You'll be ready to craft engaging gameplay experiences and advance confidently in the world of C# and game development.\nEnroll now and take your first step into the exciting world of C# development!",
      "target_audience": [
        "This course is designed for aspiring game developers who are interested in 2D game development using the C#.",
        "Beginners: Individuals with little to no prior experience in game development or programming, who are eager to learn the foundations of 2D game development and start building their own games.",
        "Hobbyists: Game enthusiasts who want to turn their passion into practical skills. This course provides a structured learning path to enhance their game development abilities and create engaging 2D games.",
        "Self-taught Developers: Individuals who have already dabbled in game development or programming on their own and want to strengthen their skills, learn best practices, and deepen their understanding of the Godot 4 and C#."
      ]
    },
    {
      "title": "Unity 2D Platformer Game Development Course",
      "url": "https://www.udemy.com/course/unitypixelplatformer/",
      "bio": "Learn how to utilize the Unity asset store to learn how to create, and to create stunning 2D games!",
      "objectives": [
        "Learn how to create 2D games in Unity 3D."
      ],
      "course_content": {},
      "requirements": [
        "Beginner C# Level, Computer"
      ],
      "description": "In this course we will take advantage of the Unity Asset store and find stunning 2D pixel art assets, that are free for use.\nWe will use these assets to learn and better understand how 2D games are made in Unity.\n\nWe will cover techniques as:\n2D Level Design\nWhat are Tiles and how to work with them\nHow the Unity 2D grid works and how to set it up properly\nHow to set up animations and make sure the framerate is set up properly\nCharacter movement\nGravity and how to use physics to our advantage\nCamera Follow\nCreating a Main Menu and a score",
      "target_audience": [
        "Beginners in game development interested in creation of 2D Platformer game."
      ]
    },
    {
      "title": "iOS / OSX Game Development - From Start to Store in Swift",
      "url": "https://www.udemy.com/course/ios-osx-games-from-start-to-store/",
      "bio": "Learn to create amazing games from scratch in minimal time by properly understanding the SpriteKit framework and Swift.",
      "objectives": [
        "Use Xcode to create apps",
        "Understand and read Swift code",
        "Build games using the SpriteKit framework",
        "Upload apps to the app store",
        "Understand the science of game design"
      ],
      "course_content": {},
      "requirements": [
        "It is recommended that you have completed a foundations of programming or Swift training course and are familiar with Swift",
        "Have a Mac with Xcode installed",
        "(optional) Have an Apple developer account and test device",
        "(optional) An image editor like PhotoShop"
      ],
      "description": "Learn how to make amazing games with SpriteKit and GameplayKit using the modern Swift 2.x language. See the entire process from starting a new project, through building the app to publishing on the AppStore and even marketing it!\nYou will be provided with the full source code built to current Swift standards in best coding practices which you can use to produce as many apps as you wish. This will include a template to help save you hours developing your games.\nThe template and game source code is worth hundreds of dollars on its own, and it is yours just for owning this course.\nIN SECTION 1 YOU WILL LEARN:\nUnderstand the key functions of SpriteKit via informative animated videos.\nSee real code examples in Xcode of these key SpriteKit functions in Swift.\nGain a basic understanding of game architecture and design patterns.\nIN SECTION 2 YOU WILL LEARN:\nMy 10 step process of game development from initial design to submitting to the AppStore.\nStep by step, create a full game from scratch using great design strategy (Most courses only show you how to make small unscalable apps, not this one!).\nHow to research the competition.\nHow to set up a marketing plan that will actually bring in customers with some basic keyword ASO (App Store Optimisation).\nBenefit from my 5 years developing for the AppStore, learn in hours what took me years.\nCourse Updated: 14/04/2015 - Swift Version 1.2\nUpdateCourse Updated: 30/03/2015 - Lighting Videos AddedCourse Update\nCourse Updated: Swift 2.0, GameplayKit (90% of the course rewritten for maximum quality!) includes tvOS compatibility.\nAre you sick of doing course that take forever because the instructor is chatty or unprepared?\nAre you sick of people teaching you coding techniques which work for small games but aren't scalable to something you can actually be proud of?\nI'm passionate about great coding practices and making great products. If you are sick of amateurs wasting your time and would like to make great games, then please check out this course.",
      "target_audience": [
        "This course is for people new to SpriteKit or wish to gain a greater understanding of SpriteKit and it's functions",
        "You should already have a reasonable understanding of Swift before starting this course."
      ]
    },
    {
      "title": "Construct 3 - The Complete Game Creation Learning Course",
      "url": "https://www.udemy.com/course/construct-3/",
      "bio": "Learn how to create games in Construct 3 (successor of construct 2) from zero all the way to uploading to play stores.",
      "objectives": [
        "Create professional games in Construct 3."
      ],
      "course_content": {
        "Introduction": [
          "Course overview",
          "Introduction",
          "Saving and loading a project from local file",
          "Other ways to save and load the project",
          "Understanding Construct 3",
          "Understanding images",
          "Other objects",
          "Understanding event sheets",
          "Debugging the project",
          "Object behaviour and instance variables",
          "Importing from construct2"
        ],
        "Making a Flappy Bird clone": [
          "Creating the game template",
          "Creating the main menu",
          "Creating playstate background",
          "Adding the player",
          "Adding the info image",
          "Adding pipes",
          "Setting the player",
          "Dying conditions",
          "Scoring",
          "Adding sounds",
          "Gameover",
          "Bestscore"
        ],
        "Fully featured platformer": [
          "Platformer introduction",
          "Tilemaps",
          "Adding a player and doublejump",
          "Camera follow and alternative controls",
          "Animations",
          "Bounding box",
          "Walljump",
          "Collecting coins",
          "User interface",
          "User interface additions",
          "Spike enemy",
          "Patrol enemy",
          "Vertical patrol",
          "Shooting enemy",
          "Power up",
          "Stomp onto enemies",
          "Health",
          "Healthbar",
          "Player shooting",
          "Enemy health",
          "Reloading time",
          "Reloading bar",
          "One side platform",
          "Moving platform",
          "Slopes",
          "Save games"
        ],
        "Match 3 game": [
          "Introduction",
          "Match arranger explained",
          "Match Arranger code explained"
        ],
        "Exporting the game to mobile/desktop/UWP": [
          "Exporting the game to mobile",
          "Exporting to desktop",
          "Exporting to hmlt5 websites",
          "Exporting to UWP (xbox one)",
          "Building the ipa file",
          "Testing the android apk"
        ],
        "Cool features": [
          "Layers and Z order",
          "Remote debugging",
          "Particles",
          "Arrays",
          "Dictionary",
          "Other files to be loaded XML CSS",
          "Webfonts",
          "Speech recognition",
          "Speech synthetis",
          "Camera input",
          "Camera special effects",
          "Geolocation",
          "Recording video",
          "Playing a video",
          "9-patch object",
          "Blend modes",
          "Effects",
          "Special effects fire and rain",
          "Effects made with particles",
          "Shadows",
          "Taking screenshots",
          "Changing icons",
          "Families",
          "Containers",
          "New find system",
          "Addon manager",
          "Breakpoints and special debugger functions",
          "User interface tools buttons",
          "File chooser",
          "Lists",
          "Progress bar and slider bar",
          "Twitter",
          "Facebook",
          "Converting a plugin from c2 to c3",
          "Touch Panning",
          "Touch Rotating",
          "Touch Zooming",
          "Driving game"
        ],
        "Physics": [
          "Physics_basics",
          "Physics ragdol",
          "Physics joints",
          "Physics force point",
          "Physics angry birds like game",
          "Physics puzzle",
          "Physics vehicle",
          "Physics platformer"
        ],
        "Multiplayer": [
          "Multiplayer chat room",
          "Muliplayer ping pong",
          "Multiplayer real time shooting",
          "Multiplayer events and conditions"
        ],
        "Pseudo 3D game": [
          "Pseudo3d game intro",
          "3dracer part1",
          "3d Racer Part 2",
          "3d Racer Part 3",
          "3d Racer Part 4",
          "3d racer final touches"
        ],
        "Strategy Games": [
          "Tower defense 1: pathfinding and enemies",
          "Tower defence 2 turrent behaviour",
          "Real time strategy"
        ]
      },
      "requirements": [
        "It is best if you have an active subscription to construct 3 but you can learn without it"
      ],
      "description": "This course is aiming to be a complete guide on how to create games with construct 3 program.\nI am coding games for more than 10 years and I was using many frameworks and programs  but Construct 3 is the best and the fastest way to create games.\nDon't worry if you don't have any experience with programming and/or game  development,I will teach you how to create games from scratch.\nWhen you complete the course you will be able to:\ncreate a flappy bird clone\ncreate a fully featured platformer game\ncreate a match 3 game.\nexport construct 3 games to android and iOS\ncreate special effects, fire, rain, shadows, access camera, geolocation\ncreate several kind of physics games\ncreate multiplayer games\ncreate a pseodo 3d game from scratch",
      "target_audience": [
        "Somebody who wants to create games even if he hasn't any knoledge at all in this field"
      ]
    },
    {
      "title": "Exploring Game Mechanics with Python by Example",
      "url": "https://www.udemy.com/course/exploring-game-mechanics-with-python-and-pygame/",
      "bio": "Learn about Game Mechanics and Python Programming (with Pygame) Together with these Fun Retro Game Remakes",
      "objectives": [
        "Discuss the game mechanics best suited to human cognitive abilities.",
        "Demonstrate the programming of game mechanics.",
        "Use Python and Pygame to create a 2D game.",
        "Setup a Python and Pycharm Integrated Development Environment and import packages."
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Join the H3D Student Community",
          "Contacting H3D",
          "FAQs",
          "Game Mechanics 101"
        ],
        "Getting Started": [
          "Installing Python and Pycharm",
          "Hello Pygame",
          "The Main Game Loop",
          "Displaying a Sprite",
          "Resizing a Sprite",
          "Moving A Sprite with the Keyboard",
          "Frames",
          "Restricting Movement",
          "Monitoring Mouse Motion",
          "Let's Make a Button Part 1",
          "Let's Make a Button Part 2",
          "Let's Make a Button Part 3"
        ],
        "Breakin' Bricks": [
          "Loading Resources",
          "Placing Bricks",
          "Moving the Bat",
          "Adding the Ball",
          "Batting the Ball",
          "Breaking Bricks"
        ],
        "Tetris": [
          "Project Setup and Base Grid",
          "Defining the Block Shapes",
          "Displaying a Block Shape",
          "Dropping Blocks",
          "Moving Blocks Sideways",
          "Creating a Game Board",
          "Spawning New Blocks",
          "Rotating Blocks",
          "Testing for Block Collision",
          "Changing Block Colours",
          "Eliminating Whole Lines",
          "Displaying a Score",
          "Game Over"
        ],
        "Asteroids": [
          "Window, Background and Ship",
          "Moving the Ship",
          "Moving Asteroids",
          "Shooting Bullets",
          "Shoot Clamping",
          "Ship Drift",
          "Screen Wrapping",
          "Asteroid and Bullet Collisions",
          "Asteroid and Ship Collisions",
          "Sound Effects",
          "Game Over",
          "Splitting Asteroids"
        ],
        "Space Invaders": [
          "Project Setup and Class Structure",
          "Switching Between Scenes",
          "The GamePlay Scene",
          "The Player Character",
          "The Alien Characters",
          "A Grid of Aliens",
          "Moving the Grid of Aliens",
          "Animating Sprites",
          "Shooting At Aliens",
          "Destroying Aliens",
          "Sprite Explosions",
          "Aliens Attack",
          "Game Over"
        ],
        "Final Words": [
          "Some Final Words from Penny",
          "Where to now?"
        ]
      },
      "requirements": [
        "It will be expected that you have a working knowledge of coding (any language)"
      ],
      "description": "What makes games fun? Game mechanics! What makes learning a new programming language fun? Creating games with it! This course allows you to do both.  If you've ever wanted to take your programming skills further and get into Python, then this is your opportunity.  If you already know Python but want to know how to use it to create games, then this course is also for you.\nDesigned for INTERMEDIATE level students with a working knowledge of programming, the content in this course will take you step-by-step through the setup of a Python/Pygame development environment on your own computer and take you through a series of workshops designed to help you learn Python and Pygame while recreating some fun retro computer games including Breakout, Tetris, Asteroids, and Space Invaders.\nYou will learn about:\nThe Pycharm Development Environment.\nThe Pygame API, which is an interface for OpenGL and DirectX.\nThe use of screen coordinates to place, size, move, animate, and restrict game characters.\nConstructing a main game loop.\nWorking with Static and Animated Sprites.\nSprite Collision Detection.\nWhat people are saying about Penny's courses:\nDr. Penny is a wonderful person and a true expert. All of her courses I've taken have been top notch and in my opinion there is no better teacher out there.\nAllow me to say how hugely important this is for a person who is interested in certain types of game design. Creating games where you can create AI behaviors that support emergent situations.\nI honestly love Holistic's teaching approach and I've never learned so much within a few hours about coding effectively with such detailed explanations!\nThis course focuses on providing students with hands-on experience coding game mechanics, while also providing an easy introduction to Python for the intermediate programmer.",
      "target_audience": [
        "Beginner Python developers curious about create games.",
        "Game programmers keen to learn how to use Python to create games."
      ]
    },
    {
      "title": "Create an Arcade Style Game in Roblox",
      "url": "https://www.udemy.com/course/getting-started-in-roblox-development/",
      "bio": "Roblox Game Development",
      "objectives": [
        "Create a Roblox Account and install Roblox Studio",
        "How to Create Roblox Game Objects",
        "Move, Scale, and Rotate Game Object",
        "Add Simple to Advanced scripting techniques",
        "NPC AI for Finding a Player",
        "Linear interpolation for smooth movement (LERP)",
        "Vector mathematics"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "Create a Roblox Account and Install Roblox",
          "Create and Play an Empty Game",
          "Roblox Studio Window Configuration",
          "Roblox Studio",
          "Roblox Studio Player and Test Server",
          "Moving Around in the Workspace (Scene) Window",
          "Add a Part",
          "Moving and Resizing Parts Using the Properties Window",
          "Corridor",
          "Pellet",
          "Delete Objects, Make Models, Make Folders, Inventory",
          "Section 1"
        ],
        "Adding Code to Your Game": [
          "First Script - The Print Statement",
          "Lua (Luau) - The Programming Language or Roblox",
          "Accessing Part Properties with Code",
          "Changing a Game Object's Properties with a Script",
          "Create a Function",
          "Add Parameters to the Function",
          "Refactor Function (+= operator)",
          "Why Function Parameters?",
          "For Loop",
          "Make a Test Area from Your Current Game",
          "For Loop - Task 1: Smoother Transition Faster",
          "For Loop - Using the Loop Counter",
          "For Loop - High to Low",
          "For Loop - Out of Range",
          "While Loop",
          "Variable Scope",
          "Function Return Values",
          "Scripting Basics"
        ],
        "Add a Point System to Your Game": [
          "Touched Event",
          "Humanoid and Touched Event",
          "Check for Player on Touched Event",
          "Leaderboard",
          "Update Leaderboard Points from Pellets",
          "Troubleshooting Leaderboard Exercise",
          "Solution to Leaderboard Exercise",
          "Add Chomp Sound to Player",
          "Chomp Remote Event to Client",
          "SoundService to Play Chomp on Client",
          "Touch Event, Sound, Client"
        ],
        "Maze": [
          "Add to the Maze",
          "Pellets",
          "Activate Pellets - Storing Pellets in a Table",
          "Activate Pellets - For Loop and Debugger",
          "Activate Pellets - For Loop in Pairs",
          "Activate Pellets - Clone Eat Script",
          "Tables, For Loops, Cloning"
        ],
        "NPC Model (Ghosts)": [
          "Create Ghosts",
          "Ghost Ridges - Union and Negate Parts",
          "Ghost Eyes",
          "Ghost Primary Part",
          "Create a Junction Node for AI"
        ],
        "Ghost AI": [
          "Beam For Raycasting",
          "Simple Raycast",
          "Raycast Parameters",
          "Walls Vs Nodes on the Raycast",
          "Raycast Directions",
          "Turn Ghost",
          "Turn Speed",
          "Ghost Move to Node",
          "Ghost Path Choices",
          "Move Nodes and Ghosts into Maze",
          "Place Ghosts",
          "Beams and Raycasts"
        ],
        "Lobby to Map": [
          "Create New Game with Start Area and Map",
          "Make Ghosts Choices Different",
          "Build Lobby",
          "Teleport to Map"
        ],
        "Starter Character": [
          "Get RigEdit Lite",
          "Make Your Starter Character",
          "Add Joints to Character",
          "Create Character Animation",
          "Adjust Heights",
          "Chomp Animation in Your Starter Character",
          "Exercise: Import Everything into a Second Map",
          "Back to MelonMan Map"
        ],
        "Deaths, Lives, Return": [
          "Ghost Damage",
          "Clone Damage Scripts to Ghosts",
          "Count Lives",
          "Create a User Interface Component to Hold Lives",
          "Add Icons for Lives",
          "Add Code to Update Lives UI",
          "Ghost Utils - Module Scripts",
          "Ghost Utils 2 - RayCast, Movement, and Choices in Utils",
          "Patrol - RunGhost",
          "Ghost Configuration",
          "Reset Ghosts on Death",
          "Clone Patrol & Configure Ghosts",
          "Teleport Back to Lobby"
        ],
        "Melon Man and Map Improvements": [
          "Add Some Eyes to MelonMan",
          "Change Death Sound",
          "Start Stound",
          "In-Scene Teleportation",
          "Teleport Maze Cap and Local Sound"
        ]
      },
      "requirements": [
        "Some programing experience.",
        "Internet connection",
        "Computer with permissions to install software"
      ],
      "description": "Welcome to the exciting world of Roblox! In this course, you will learn how to create and develop your own games within the Roblox platform.\nRoblox is a massively popular online gaming platform that has gained tremendous popularity in recent years. It provides a unique opportunity for aspiring game developers to create and publish their own games, share them with a vast community of players, and even earn money from them.\nDuring this course, you will be introduced to the various tools and features available within Roblox, including the game editor, scripting language, and asset library. You will learn how to create compelling game mechanics, design engaging environments, and incorporate sound and visual effects to create a fully immersive gaming experience.\nWhether you are an experienced programmer or a complete beginner, this course is designed to be accessible to all skill levels. Our experienced instructors will guide you through each step of the development process, providing hands-on instruction and feedback to ensure that you are able to create high-quality games that are both fun and engaging.\nBy the end of this course, you will have a good foundation in Roblox game development, and the skills and knowledge necessary to create your own games, share them with others, and even potentially earn a profit from them. So, come join me on this exciting journey into the world of Roblox game development!",
      "target_audience": [
        "Beginner game developers with some programming experience",
        "Developers with minimal experience in Roblox game creation",
        "High school or greater level of mathematics and computer science"
      ]
    },
    {
      "title": "Complete Facebook Instant Games Course",
      "url": "https://www.udemy.com/course/complete-facebook-instant-games-course/",
      "bio": "You will learn how to create Facebook instant games from zero to hero. Take profit of this newly released platform.",
      "objectives": [
        "A student after he completes the course he will have full understanding of the platform and a template game that he can insert into its own games and be able to put thier game live"
      ],
      "course_content": {
        "Platform Overview": [
          "Platform overview",
          "Creating first app",
          "Setting developer environment",
          "Acceptable Games.",
          "Local developer environment",
          "Minimum requirements"
        ],
        "Configuring Facebook Instant in our template": [
          "Getting player data",
          "Sharing the game",
          "Enable test mode",
          "Leaderboards 1",
          "Getting Leaderboards part 1",
          "Getting Leaderboards part 2",
          "Getting leaderboards part 3.1",
          "Getting leaderboards part 3.2",
          "Testing the game with other accounts",
          "Leaderboards Final part",
          "Saving data",
          "Payments",
          "Other features",
          "How to publish your game step by step",
          "How to implement ads"
        ]
      },
      "requirements": [
        "This course is for totally beginners that what to make Facebook Instant games. Construct 2 or 3 is the easiest way to create games but you can use your preffered game engine or even pure javascript"
      ],
      "description": "This is the complete course on how to make Facebook Instant games.\nIn this course we will create a plugin to integrate Facebook Instant SDK to Construct 2 but you can apply the knowledge learned here Regardless of the game engine you us.\n\nEven if you are a total beginner you at the end of this course you will get all the knowledge needed to make games for Facebook Instant platform and a template that you can insert into your own games",
      "target_audience": [
        "Any game aspiring developers that want to submit their games to a huge newly released platform"
      ]
    },
    {
      "title": "Build Your MR Game & Publish it on Meta's Horizon Store",
      "url": "https://www.udemy.com/course/mixedreality/",
      "bio": "Learn the foundations of MR, XR, VR Development on Quest headsets with Meta’s Horizon OS and Unity",
      "objectives": [
        "Learn to create a Mixed Reality Game in Your Living Room, from start to finish.",
        "Understand the fundamentals of Meta's Horizon OS and its key features.",
        "Learn to use Spatial Anchors and position content across sessions in your home.",
        "Learn to use Passthrough, Scene Capture, and Scene Model.",
        "Leverage natural input controls, including hands, voice, and controllers.",
        "Learn to use Interaction SDK, Hand Tracking, Voice SDK, Tracked Keyboard, and Audio SDK.",
        "Use Movement SDK to track your body, face, and eyes and enhance your social experience.",
        "Integrate spatialized audio for an immersive audio experience.",
        "Incorporate voice commands and recognition using the Voice SDK.",
        "Prepare and release your Mixed Reality game",
        "Turn your living room into a Mixed Reality Game with Meta's Horizon OS 2025",
        "Learn to create Virtual Reality Apps with Unity"
      ],
      "course_content": {
        "Introduction": [
          "Master Companion Document",
          "Meta's Horizon OS (previously Meta Presence Platform)",
          "Mixed Reality Features of Meta's Horizon OS",
          "Your GorillaZilla Project",
          "Quiz"
        ],
        "First steps: Unity and Meta SDK": [
          "Introduction: Unity and Meta XR SDK",
          "Prep Materials",
          "Set up Your Own Unity Project",
          "Prep Materials",
          "Import and Configure the Meta SDK",
          "Your First MR Scene Using Meta's Building Blocks",
          "Prep Materials",
          "Deploy your MR project to Meta Quest",
          "Prep Materials",
          "Import the GorillaZilla Project",
          "Quiz"
        ],
        "Mixed Reality: Passthrough & Scene Understanding": [
          "Mixed Reality and passthrough overview",
          "Introduction to Passthrough Mixed Reality",
          "Prep Materials",
          "Add the Passthrough Building Block",
          "Customizing Passthrough Visualization",
          "Scene Understanding Introduction",
          "Completing Space Setup",
          "Utility Kit",
          "Find Available Spawn Locations using MRUK",
          "Quiz"
        ],
        "Interaction SDK": [
          "Introduction to Controllers and Hand Tracking",
          "Prep Materials",
          "Add Controller Support to Your Scene",
          "Add Hand Tracking Support to Your Scene",
          "Adding Poke Interactions for UI",
          "Add Monster Hands to Your Gorillazilla Game",
          "Quiz"
        ],
        "Movement SDK & Body Tracking": [
          "Introduction to Movement SDK",
          "Prep Materials",
          "Import and Configure Movement SDK Samples.",
          "Setup Body Body Tracking and Enhance User Immersion",
          "Eye Tracking, Face Tracking and Movement Samples",
          "Quiz"
        ],
        "Audio and Voice SDK": [
          "Introduction to Meta Voice SDK",
          "Meta Voice SDK",
          "Prep Materials",
          "Use Mic Volume Detection - the GorillaZilla ‘Roaaaaar’",
          "Quiz"
        ],
        "Publish Your Project": [
          "Last Steps",
          "Prep Materials",
          "How to Submit Your Project",
          "Prep Materials",
          "Next Steps and Meta's Start Program for XR Devs"
        ]
      },
      "requirements": [
        "To get the most from this course you’ll need access to a VR class PC. Mac is acceptable, but Unity Play Mode testing on the headset will not be supported.",
        "You’ll need to install a Unity 2022.3 LTS version and we recommend using Unity Hub.",
        "Meta Quest headsets are recommended for this course (Quest 3 or Quest 3s preferred)",
        "Knowledge of C# is valuable but not required."
      ],
      "description": "Want to make Mixed Reality (MR/VR) games and apps in Unity?\nAre you keen to expand your skillset to include Meta’s Horizon OS so you can create engaging Virtual Reality and MR games and experiences?\nThen this course is for you!\nMeta has added a ton of functionalities and features for making the creation of Mixed Reality apps and games easy, allowing you to bring your ideas to life.\nIn this course, you’ll learn how to harness the power of Meta’s Horizon OS to build immersive XR experiences.\nGet hands-on experience designing and implementing\n\n\nPassthrough\nScene Understanding\nSmart Object Positioning\nHand Tracking\nController Support\nInteractions\nMovement\nBody Tracking\nEye Tracking\nFace Tracking\nVoice and Audio Detection\nMeta's Mixed Reality Utility Kit (MRUK) (update January 2025)\nMeshing for Object Occlusion (update January 2025)\nAll in all, you will learn to provide your app or game users with intuitive and engaging XR interactions.\nYou’ll get the most from this course if you have some familiarity with the Unity editor.\nThe creators are qualified and experienced with mixed reality, and will entertain you along the way.\nYou’ll also gain access to our community where you can discuss topics on a course-wide basis, or down to the individual video lesson. Get plugged into our XR Creators community of amazing developers on Discord (over 7000 members), and our student chat group.\nDon’t hesitate to share your MR project with us and get your portfolio project reviewed!\nDive into the extraordinary world of Mixed Reality Experiences and begin your journey today\nBtw, the best submissions will be reviewed to get into the Meta Quest Store and get the chance to win a free Meta Quest  headset!",
      "target_audience": [
        "This course is suitable for participants who are experienced with Unity, but new to Meta's Horizon Platform."
      ]
    },
    {
      "title": "How to Make a 2D Platformer with Unity & C#",
      "url": "https://www.udemy.com/course/how-to-make-a-2d-platformer-with-unity-c/",
      "bio": "Game Development- Learn how to create a 2D platformer game full of unique enemies, weapons and environments using Unity.",
      "objectives": [
        "Learn how to make a 2D platformer player controller with wall jumping and sliding.",
        "Create unique enemy characters with simple but fun AI behaviors.",
        "Make moving platforms.",
        "Learn how to make a weapon pickup and switching system.",
        "Create an unlockable level menu.",
        "Make particle effects and add game juice, learning how to make attacks and jumps more satisfying and fun with sound effects and screen shake.",
        "Add parallax to give your 2D world more depth.",
        "Learn how to make your game environments shine with soft overlays, clouds, and small environmental pieces that react to the player."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How to Use This Course",
          "How to use this course LINKS"
        ],
        "Making the 2D Platformer": [
          "Player Controller",
          "Wall Jumping",
          "Player Animation Transitions",
          "Making the Camera",
          "Patrol Enemy Character",
          "Flying Enemy Character",
          "Warlock Enemy Character",
          "Player Attack",
          "Weapon Switching",
          "Moving Platforms",
          "Camera Shake",
          "Particle Effects",
          "Sound Effects",
          "Bringing our Game Environment to Life",
          "Health UI",
          "Making a Main Menu",
          "Level Selection",
          "Adding some Post Processing",
          "CONCLUSION"
        ]
      },
      "requirements": [
        "Before starting this course you should understand the basics of Unity. Like saving scenes, navigating the interface, using the three basic manipulation tools (Translate, Rotate and Scale), create prefabs and add and modify components inside the inspector.",
        "You should have a strong understanding of the basics of C#, such as creating variables, modifying those and calling functions."
      ],
      "description": "In this game creation course, my brother and I will bring you through the process of making a 2D platformer game using Unity and C#.\nThis is an all-time classic genre, a blank canvas to let your imagination run wild!\n-----------------------------\nWe'll begin by learning how to make a solid player controller, with wall jumping and sliding. Then we will go on a fun journey bringing to life unique enemy characters such as a shooting warlock, a flying bat that avoids obstacles, and a patrolling goblin! So you can expect some simple but fun tutorials on AI.\nYou'll learn how to make moving platforms, a flexible camera, and weapon pickup and switching.\nIf you've ever wondered how to make an easy unlockable level system, then that's covered too!\nGet ready to dive into the universe of particle effects and game juice, learning how to make attacks and jumps more satisfying with sound effects and screen shake for example!\nI'll share some useful and easy to implement tips and tricks to make your platformer game environments shine with soft overlays for lighting, parallax to add depth to the world, little trees and grass tufts which move underfoot and post-processing!\n-----------------------------\nLast but not least, by purchasing this course you'll get access to all the project files. Lots of art, animations, code, sounds, and effects at your disposal! Whatsmore, you'll be able to join the courses unique Discord server and chat with a community of game creators, ask for help if you get stuck, and share your hard work with fellow students!\n\nI look forward to seeing what unique worlds you'll bring to life with the course!",
      "target_audience": [
        "A beginner/intermediate game developer interested in learning how to create a fun 2D platformer game from A to Z using Unity and C#.",
        "This course is also for those curious about programming AI using C#."
      ]
    },
    {
      "title": "The Ultimate Guide to Savegames in Unity",
      "url": "https://www.udemy.com/course/zero-to-hero-guide-for-creating-savegames-in-unity/",
      "bio": "Learn to create a Savegame for your Unity3D Game with different Serialization & Encryption - Techniques.",
      "objectives": [
        "Create simple Savegames in Unity",
        "Create more complex Savegames in Unity",
        "Serialize Data",
        "Encrypt Data"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Basics": [
          "Basics Overview",
          "Exercise - Dont get Angry",
          "Serialization & Datapersistence",
          "PlayerPrefs",
          "PlayerPrefs - Exercise",
          "PlayerPrefs - Problems",
          "StreamWriter",
          "StreamWriter Exercise",
          "StreamWriter Problems",
          "(Optional) BinaryWriter",
          "Nested Classes + Binaryformatter",
          "Nested Classes + Binaryformatter - Exercise",
          "Summary of Basics"
        ],
        "Advanced": [
          "Overview - Advanced Datapersistence",
          "Introduction to Json",
          "Json.net - Theory",
          "Json.net - Practical",
          "Json.Net - Exercise",
          "JsonUtility - Theory",
          "JsonUtility - Practical",
          "JsonUtility - Nested Classes",
          "JsonUtility - Exercise",
          "Saving multiple GameObjects Theory",
          "Saving multiple GameObjects - Practical",
          "Exercise - Save multiple Scene Objects",
          "(Optional) Improve SavegameManager with Interfaces",
          "Encrypt Data - Theory",
          "Encrypt Data - Practical",
          "Encryption - Exercise",
          "Summary Advanced Datapersistence"
        ]
      },
      "requirements": [
        "Basic Understanding of the Unity3D Engine",
        "Basic Understanding of C#"
      ],
      "description": "If you ever wondered how to create savegames in unity then this course is for you!\nThe \"The ultimate Guide to Creating Savegames in Unity\" will teach you best practices for the most basic savegame-solutions like PlayerPrefs, but we will also handle some more advanced topics like Json and Encryption.\n\n\nIn this course you will:\nSave and load the Gamestate\n\nSave/Load simple Data with Playerprefs\n\nCreate your own Save-Files with Streamwriter\n\nCreate unreadable Savegames with Binaryformatter\n\nCreate advanced up- and downward-compatible Savegame-Solutions with Json\n\nEncrypt your Savegames\n\nThis course is very project-based and practical, so you will implement the concepts directly in exercises.\nFor each Concept you will be challenged to implement it yourself, but if you don't feel up to the task you will also be shown a well explained step-by-step guide how to implement it.\n\nThe course also features several Demo-Projects, where you can look up best practice implementations.\n\n\nWhy learn from me?\nI have been teaching game-programming for more than 5 years now and as a result I have plenty of experience in what works and what doesn't when it comes to teaching programming. Also I am a firm believer, that you can only learn the high craft (some might even say art) of programming, by practicing it.\n\n\nWho is the target Audience?\nUnity Developers who want to create Simple Savegames\n\nUnity Developers who want to create more sophisticated encrypted Savegames\n\nProgrammers who want to improve their Skills in the Unity3D - Engine\n\n\nBecome a better Programmer, now! I'll meet you inside the course!",
      "target_audience": [
        "Unity Developers"
      ]
    },
    {
      "title": "Unreal Engine 5 Fundamentals – A Beginner’s Guide",
      "url": "https://www.udemy.com/course/unreal-engine-5-fundamentals-a-beginners-guide/",
      "bio": "Learn the essential Unreal Engine 5 skills, from Blueprints and debugging to multiplayer basics and best practices.",
      "objectives": [
        "Getting Started with Unreal Engine – Understand the basics of the engine and how to set up your first project.",
        "Unreal Engine Editor – Learn how to navigate the editor efficiently, customize your workspace, and use essential tools.",
        "Best Practices for Game Development – Discover efficient workflows and coding standards to keep your projects clean and scalable.",
        "Blueprint Programming – Master the fundamentals of Unreal Engine’s visual scripting system to create game logic without writing code.",
        "Essential Shortcuts & Debugging – Speed up development with useful shortcuts and debugging techniques.",
        "Data Handling in Unreal Engine – Learn how to manage variables, data structures, and Blueprint communication.",
        "Blueprint Communication – Understand different ways Blueprints interact, including event dispatchers and function calls.",
        "Blueprint Visual Best Practices – Organize and structure your Blueprints efficiently to improve readability and performance.",
        "Multiplayer Basics – Get an introduction to Unreal Engine's networking system and how multiplayer functionality works.",
        "Abstract Classes & Dynamic Dispatching – Learn how to use abstract classes and dynamic dispatching for flexible game design.",
        "Materials & UI Basics – Create simple materials and user interfaces to enhance game visuals and interactivity.",
        "Minimal Locomotion & Character Movement – Implement basic player movement and controls.",
        "By the end of this course, you’ll have a solid foundation in Unreal Engine 5, allowing you to start your own projects with confidence."
      ],
      "course_content": {
        "Getting Started": [
          "Introduction - Scope",
          "Introduction - Course Outline",
          "Introduction - Who am I?",
          "Introduction - Disclaimer about used File Names",
          "Creating the Project - Intro",
          "Creating the Project - Epic Games Launcher",
          "Creating the Project - Install The Engine and select Options",
          "Creating the Project - Create and Open the Project",
          "Creating the Project - Adding Third Person Template Pack",
          "Source Control - Intro",
          "Source Control - Example",
          "Sources - Unreal Engine 5 Quick start and advise on starting points",
          "Commonly Asked - Blueprints vs C++",
          "Quiz - Getting Started Unreal Engine Basics"
        ],
        "Editor": [
          "Overview of the viewport - Panels",
          "Overview of the viewport - Navigating the Viewport",
          "Overview of the viewport - Viewmodes",
          "Settings - Plugins Project and Engine Settings",
          "Selection Modes - Landscape and Foliage",
          "Play - Playerstart Play and Simulate",
          "Pilot - Position Objects",
          "Contentbrowser - Filters Folders and Creating Assets",
          "Quiz - Editor"
        ],
        "Best Practices": [
          "Naming Conventions",
          "Folder Structuring",
          "Moving Files - Redirectors",
          "Moving Files - Reference Viewer"
        ],
        "Blueprints": [
          "Class Framework - Intro",
          "Class Framework - Examples",
          "Class Framework - Relation",
          "Blueprint Programming - Intro",
          "Blueprint Programming - Blueprint Overview",
          "Blueprint Programming - Actor Component",
          "Blueprint Programming - Functions and Variables",
          "Blueprint Programming - Exposing Variables",
          "Blueprint Programming - Pure Functions",
          "Blueprint Programming - Parent and Child (OOP)",
          "Blueprint Programming - Macros",
          "Blueprint Programming - Variable Types",
          "Quiz - Blueprints"
        ],
        "Shortcuts": [
          "Improving efficiency in BP programming",
          "Quiz - Shortcuts"
        ],
        "Debugging": [
          "Intro",
          "Breakpoints and Printing",
          "Debugger",
          "Warning and Errors",
          "Searching and Finding",
          "Quiz - Debugging"
        ],
        "Data": [
          "Structures Enumerations and Datatables",
          "Quiz - Data"
        ],
        "Blueprint Communication": [
          "Intro",
          "Tracing",
          "Casting",
          "Event Dispatching",
          "Interfaces",
          "Overlapping",
          "Quiz - Blueprint Communication"
        ],
        "BlueprintStructurtingAndBestPractices": [
          "Intro",
          "Blueprint Structuring"
        ],
        "Multiplayer": [
          "Intro",
          "Simulate Network",
          "Replication Setting",
          "Spawn Actor",
          "Remote Procedure Call - Server Client and Multicasting",
          "Replicate Variable",
          "Rep Notify",
          "Quiz - Multiplayer"
        ]
      },
      "requirements": [
        "Able to listen and read in English",
        "A PC that can run UE5"
      ],
      "description": "Master the Basics of Unreal Engine 5 and Start Building Your Own Games\nAre you new to Unreal Engine and eager to master its fundamentals? This course will introduce you to core Unreal Engine concepts, guiding you from the basics to more advanced topics like Blueprint programming, debugging, and multiplayer fundamentals. Whether you're just starting or looking for a structured approach to learning Unreal Engine, this course will equip you with the essential skills to confidently build your own projects.\nWhat You’ll Learn\nGetting Started with Unreal Engine – Understand the basics of the engine and how to set up your first project.\nUnreal Engine Editor – Learn how to navigate the editor efficiently, customize your workspace, and use essential tools.\nBest Practices for Game Development – Discover efficient workflows and coding standards to keep your projects clean and scalable.\nBlueprint Programming – Master the fundamentals of Unreal Engine’s visual scripting system to create game logic without writing code.\nEssential Shortcuts & Debugging – Speed up development with useful shortcuts and debugging techniques.\nData Handling in Unreal Engine – Learn how to manage variables, data structures, and Blueprint communication.\nBlueprint Communication – Understand different ways Blueprints interact, including event dispatchers and function calls.\nBlueprint Visual Best Practices – Organize and structure your Blueprints efficiently to improve readability and performance.\nMultiplayer Basics – Get an introduction to Unreal Engine's networking system and how multiplayer functionality works.\nAbstract Classes & Dynamic Dispatching – Learn how to use abstract classes and dynamic dispatching for flexible game design.\nMaterials & UI Basics – Create simple materials and user interfaces to enhance game visuals and interactivity.\nMinimal Locomotion & Character Movement – Implement basic player movement and controls\nBy the end of this course, you’ll have a solid foundation in Unreal Engine 5, allowing you to start your own projects with confidence.\nWhy Take This Course?\nDesigned for Beginners – No prior Unreal Engine experience required.\nStep-by-Step Learning – Covers everything from variables to networking in a structured way.\nHands-On & Practical – Learn through real-world examples and project-based exercises.\nPreview Videos Available – Check out free lessons to see the quality before enrolling.\nIf you enjoy this course and are looking for more advanced topics, check out our Multiplayer Survival Framework Course, where we dive deeper into Unreal Engine’s networking and gameplay mechanics.\nStart learning Unreal Engine 5 today and build your foundation for game development!\n\nWith kind regards,\n\nEric Ruts\nCompany Lead Games by Hyper",
      "target_audience": [
        "Beginners that want to feel comfortable in Unreal Engine 5",
        "Intermediates which would like to get a refresher and learn tips and tricks which they probably did not know off."
      ]
    },
    {
      "title": "Create an RPG Game in Unity",
      "url": "https://www.udemy.com/course/create-an-rpg-game-in-unity/",
      "bio": "Advanced game design",
      "objectives": [
        "Create an RPG fantasy game in Unity",
        "Upgrade your knowledge of C# coding to an intermediate level",
        "Create a dynamic menu system for storing pickup items",
        "Create a potion mixing system for creating magic attacks",
        "Setting up enemy AI pathfinding navigation"
      ],
      "course_content": {
        "Setup": [
          "Downloading Unity",
          "Resources",
          "Install probuilder"
        ],
        "Creating an icon bar": [
          "Creating icon slots",
          "Create a health meter",
          "Stamina bar",
          "Create a background",
          "Lighting",
          "Saving out images",
          "Cutting out images",
          "Resizing graphics",
          "Saving images",
          "Creating the UI bar in Unity",
          "Saving the canvas"
        ],
        "Modular House Design": [
          "Characters",
          "Downloading assets",
          "Modular house design",
          "Houses you can enter",
          "Adding props",
          "Editing props",
          "Adding food",
          "Wizard's house",
          "Changing the sign icon",
          "The blacksmith's house"
        ],
        "Creating the Map": [
          "Assets to Install",
          "Downloading terrain assets",
          "Sorting assets",
          "Sculpting the terrain",
          "Painting the terrain",
          "More details",
          "Adding a building",
          "Adding fencing",
          "Adding a forest",
          "Open area",
          "Painting cliffs",
          "Adding another fence",
          "Houses",
          "Sword master area",
          "Farmland",
          "Add another tavern",
          "Wizard's house",
          "Mountain pass",
          "Open space",
          "Wizard's area",
          "A village",
          "Another forest",
          "The town",
          "Static batching",
          "Setting up the lighting",
          "Baking the lightmaps",
          "Lightmap results",
          "Post processing"
        ],
        "Player Movement": [
          "New AI Navigation system in Unity",
          "Nav Mesh",
          "Character animations",
          "Cinemachine",
          "Camera control script",
          "Cursors",
          "Changing cursors",
          "Setting up characters",
          "Checking player prefabs"
        ],
        "Player Select Menu": [
          "Scripting arrays",
          "Player choose scene",
          "Scripting player choose",
          "Saving player name",
          "Spawning in characters"
        ],
        "Inventory Menu": [
          "Setting up the inventory menu",
          "Opening the inventory menu",
          "Pickups",
          "Displaying icons",
          "Multiple pickups",
          "Displaying a hint box",
          "Task review",
          "Different hint messages",
          "Hint messages",
          "Finishing pickups",
          "Opening chests",
          "Entering buildings",
          "Fixing the roof bug",
          "Nav mesh obstacles",
          "Baking the final navmesh"
        ],
        "Shop System": [
          "Download NPC characters",
          "Setup NPC characters",
          "Speechbox",
          "Message Text",
          "Shop menu layout",
          "Buy script",
          "Buy for loop",
          "Check the buying system",
          "Multiple shops",
          "Another tavern",
          "Setting up the Wizard shop UI",
          "Setup the wizard",
          "Wizard shop script",
          "Second wizard",
          "Magic and spells UI",
          "Changing cameras",
          "Potion book layout",
          "Navigating the potion book",
          "Open and close the potion book",
          "Create the potion",
          "Next and back buttons",
          "Hint message",
          "Potion items script",
          "Checking potion creation",
          "Magic hints",
          "Using up items",
          "Testing the potions",
          "Review",
          "Dropping to UI slots",
          "Testing potion creation",
          "Removing the Icon",
          "Fixing the remove",
          "Spell icons",
          "Message display fix"
        ],
        "Music and Sounds": [
          "Music to download",
          "Main music track",
          "Changing to tavern music",
          "Ambient sounds",
          "Menu sounds",
          "Buy sounds",
          "Pickup sounds"
        ],
        "Magic Attacks": [
          "Magic particles",
          "Installing magic particles",
          "Setting up the first magic attack",
          "Refining the fireball",
          "Fire twist",
          "Enemy seeker",
          "Refine enemy seeker",
          "Player stops near enemies",
          "Tornado",
          "Hurricane swirl",
          "One shot particles",
          "Task recap",
          "Static magic effects",
          "Final magic items",
          "Launching magic attacks with keys",
          "Using mana",
          "Adjusting mana bar",
          "One use potion attack",
          "Player invisibility",
          "Adding magic sounds",
          "Magic attack animations",
          "Chest particles",
          "Build a key",
          "Key script",
          "Setting up all player characters",
          "Orbital camera",
          "Starting position"
        ]
      },
      "requirements": [
        "You should have a basic understanding of Unity and C# coding",
        "You will need a computer capable of running Unity 2021"
      ],
      "description": "Do you want to create a great RPG fantasy game in Unity?\nIn this course I am going to take you through the process step by step:\n\n\nSetting up the terrain and level layout\ncreating menus and inventory systems\nsetting up an onscreen mini map\ncreating a shop system to buy ingredients for potions or weapons and armour\nsetting up a dynamic inventory menu where you can mix potions to create unique magic attacks\nspawning in enemies and boss characters with combat systems and navigation pathfinding\nsetting up player magic attacks and melee combat\nsaving and loading player progress\n\n\nThis is a huge course covering more than 40 hours and is intended for learners who have a basic familiarity with Unity and C# coding\nBy the end of this course you will learn key concepts in advanced game design and upgrade your knowledge of C# coding to an intermediate level\nYou will also have a completed RPG fantasy game which you can include in your portfolio, share with friends or even sell online\nI have over 9 years experience of teaching Unity and like all my courses I make learning game design fun and easy, this is why my courses are highly recommended by my learners in the reviews.\nSo, why not enrol today and I look forward to seeing you in my course.",
      "target_audience": [
        "This course is for learners who want to develop their coding ability when creating games in Unity",
        "For learners who want to make their own RPG fantasy games"
      ]
    },
    {
      "title": "Unity Game Developer Masterclass 2021 (2D, 3D and FPS)",
      "url": "https://www.udemy.com/course/unity-game-developer-masterclass/",
      "bio": "Create your first Unity Games - FruitNinja clone, Hausmeister clone, Zombie shooter etc. using Csharp",
      "objectives": [
        "Learn C# by making video games",
        "Learn how to use unity to build your first game",
        "Build your first game, without writing a single line of code",
        "Learn the fundamentals of the programming language C# by building a couple of code-heavy games",
        "Build 2D and 3D games",
        "Build more advanced games such as a 3D Plattformer",
        "Build a Space invader clone 2D",
        "Build Fruit Ninja clone",
        "Build First Person shooter / zombie survivor game",
        "Learn a lot about 3D animations, enemies, health systems, level design, game design"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the course - And how to get most out of it",
          "Introduction to the chapter",
          "What is a game?",
          "What is a game engine?",
          "Installing Unity 2021.1.0",
          "First Project and Checking Connection between Unity And Visual Studio",
          "Overview of Unitys Interface",
          "Using extra windows and changing the layout",
          "Intro To GameObjects and Components",
          "GameObjects and Components in Action",
          "Outro",
          "Get The Most Out Of This Course!"
        ],
        "Code-less Fun Ball in a Maze Game": [
          "Introduction to the chapter",
          "Setting up the Walls",
          "How to Import Unity Packages - And Use the Course Resources",
          "Adding the Player",
          "Setting up the Player Rigidbody",
          "Changing the Player-mode Tint Color to save hours",
          "New Feature: Learning Paths",
          "Explaining Physics and Force - Rigidbody and Torque",
          "Adding A Parent GameObject and a Constant Force",
          "Adding our First UI by adding Buttons",
          "Connecting Game Physics with UI",
          "Adding the Winning UI",
          "Adding a Glass",
          "Stopping the game once won",
          "Adding Audio to the game",
          "What we learned",
          "Polishing the game by using the Asset Store",
          "Polishing challenge",
          "Outro"
        ],
        "Learning C# by Developing Mini Games - Guess the number": [
          "Introduction to the chapter",
          "Why C#",
          "Our first Code",
          "Classes in C#",
          "Guess The Number Intro",
          "Adding The GUI",
          "Connecting a script to a button and using debug.log to write on the",
          "Variables overview",
          "Our first variable",
          "Variables",
          "Getting User Input and use it in our code",
          "Converting Strings to Ints by using the Parse Method",
          "If Statements Overview",
          "If statements",
          "Using Conditions in our game",
          "Checking if the user even entered a number",
          "Working with Text Objects in Unity and Code",
          "Methods overview",
          "Methods",
          "Using Methods in our Guess The Number Game",
          "Challenge 1",
          "Challenge 2",
          "Outro"
        ],
        "Learning Advanced C# by Developing Mini Games - Hangman": [
          "Introduction to the chapter",
          "Setting up the UI",
          "Setting Up the Hangman",
          "Using Deltatime to display a timer",
          "Introduction to Arrays",
          "Using Random Range and The Length of an Array",
          "For Loops and Incrementing and decrementing",
          "For Loops in Action, and Strings are just an Array of Chars",
          "OnGui Overview",
          "OnGui to get Key Events - how to use Contains and multiple conditions in an if s",
          "First advanced topics, what did we learn?",
          "Understanding the IndexOf Method",
          "While Loops",
          "The Substring Method",
          "Adding the game logic to our hang man game",
          "Winning or Losing the game",
          "Getting Words from a Text File into the Game",
          "Resetting a Game by using the SceneManager",
          "Hangman complete, what did we learn?",
          "Outro"
        ],
        "2D - Space Invaders": [
          "Introduction to the chapter",
          "Introduction - what we will build",
          "Setting up our Map",
          "Slicing and Animating our bullet",
          "The Animator and Animating the Player",
          "Sprites and 2D Animations",
          "Game Difficulty - Excurse",
          "Adding Physics and creating prefabs",
          "Inputmanager and Playermovement",
          "Input System",
          "Setting up the Animations in the Animator",
          "Finishing the Animator settings",
          "Has Exit Time explained",
          "Spawning Bullets using Instatiate and InvokeRepeating",
          "Make Bullets and Enemies move",
          "Make Bullets follow the player",
          "Shoot towards the player",
          "Destroying the Bullets with OnCollisionEnter2D",
          "Spawning Bullets differently",
          "Ignoring specific Physics Colliders Using Tags. Bullets can destroy",
          "Destroy the player on collision with enemy",
          "Spawning Monsters Randomly using Instantiate",
          "Resetting the Game when the player dies",
          "Outro"
        ],
        "Unity Physics - Rolling Danger": [
          "Introduction to the chapter",
          "Setting up the Playground",
          "Player Movement in 3D in Depth - Forcemode, Serializefield and Fixe",
          "Overloading",
          "Adding Jumping and Using The Space Key for That",
          "Avoiding Jumpspamming using Collision Detection",
          "Raycasting and Avoiding Jump spamming part 2",
          "Smooth Camera Follow Feature - LookAt- Ref Keyword - LateUpdate",
          "Camera follow",
          "Adding Enemies - IsTrigger - TriggerEnter and Exit - learning more about collide",
          "Prefabs",
          "Setting up The Cannon",
          "Implementing the Cannon Script part 1",
          "Implementing the Cannon Script part 2 - shooting with lasers",
          "Spring Joints",
          "Resetting The Game using the SceneManager",
          "Opening Doors with Keys, Rotating and Moving GameObjects via Code",
          "Understanding Gizmos and Creating them in Code",
          "Displaying Text in the World Space",
          "Winning Platform and Coroutines",
          "Outro"
        ],
        "Mobile - Fruit Ninja": [
          "Introduction to the chapter",
          "Introducing Fruit Ninja",
          "What you will learn building Fruit Ninja",
          "Foreach Loops",
          "Making our Fruits Explode",
          "Spawning Fruits Part 1",
          "Spawning Fruits Part 2",
          "challenge - destroying the cut fruits",
          "Creating the Blade and cutting fruits",
          "Start vs Awake Method",
          "The blade",
          "Adding the GameManager and Scoring System",
          "Adding the Bomb to our Game and Stop it once hit",
          "Spawning Bombs randomly",
          "GameOver GUI And Resetting the Scene",
          "Display the Highscore and Store it permanently",
          "Adding more Fruits",
          "Adding Sound and AudioClips",
          "Preparing the Game for Mobile",
          "Saving a score and important notes for mobile play",
          "Outro"
        ],
        "FPS Zombie Game": [
          "Introduction to the chapter",
          "Setting up the FPS Project and HDRP vs URP",
          "Setup and Looking at the URP assets",
          "Setting up the Scene and Looking at Skyboxes",
          "Checking out the Assets we are going to use",
          "Building our Environment - Streets and Houses",
          "Building our Environment - Decorations and Story",
          "Adding Invisible walls and limitations",
          "Challenge - build your own city",
          "FPS Character tricks",
          "Adding the Main Character to the Game - How to use Clipping",
          "Looking Around with MouseLook - MouseSensitivity and Clamping",
          "Player Movement using a Character Controller",
          "Adding Gravity Manually and using Layers and Masks",
          "Map Building",
          "Adding Jumping",
          "Adding an Animator and Where to Find Animations (MIXAMO)",
          "Adding Transitions and Animations",
          "Adding more Transitions and Has Exit Time",
          "Starting with the Enemy AI",
          "NavMesh and NavMesh Agent",
          "Baking the NavMesh and using the NavMesh Agent",
          "Using the NavMeshAgent to allow the zombie to follow us",
          "Make Enemy Run after us and Loop The Run Animation",
          "Detect Collision between Enemy and Player",
          "Creating the PlayerManager and Health that is reduced when Hit",
          "Restarting the Game at 0 Health and Fixing the Pushing up by the Zombie",
          "Using Raycasts to shoot",
          "Adding A CrossHair",
          "Adding Enemy Health and Make them killable",
          "Adding a Recoil Animation to the weapon",
          "Triggering the Recoil Animation on Shoot",
          "Adding Spawn locations",
          "Writing the GameManager that takes care of Spawning Enemies Randomly",
          "Enemies call their Death, and a neat little trick assigning the GameManager",
          "Displaying the Rounds",
          "Displaying the Health",
          "Game Over Screen",
          "Displaying Statistics at the end of the game",
          "Making the game Replayable",
          "Main Menu Setup",
          "Returning to Main Menu",
          "Core mechanics for this FPS zombie game done, what did we learn?"
        ],
        "Hausemeister Tycoon": [
          "Introduction to the chapter",
          "Setting up the Project",
          "Adding a Button in World Space for our Building",
          "BigInteger",
          "The Singleton Pattern",
          "Singletons",
          "Adding the Money Manager - Singletons and BigIntegers",
          "Buying Buildings",
          "Displaying and Collecting Profit",
          "Upgrading Buildings",
          "Understanding String Formatting",
          "Formatting the Money",
          "Adding the other Buildings",
          "Interfaces",
          "Adding the Ads Manager",
          "Monetization Strategy - Rewarded Ads",
          "Monetization Strategy - Skippable Ads",
          "Google Developer Account and Payment Profile",
          "Preparing in App Purchases",
          "In App Product 1 - Buying Money and Removing Ads",
          "In App Product 2 - Adding the Collecting Manager",
          "JSON, Serialization and Deserialization",
          "JSON in Unity",
          "Constructors",
          "Serialization - Storing our Game State Correctly using JSON",
          "Touch Input",
          "Moving the Camera"
        ],
        "Thank you for completing the course!": [
          "Get the course"
        ]
      },
      "requirements": [
        "Computer with a good internet connection",
        "A PC that can run Unity 2021"
      ],
      "description": "Do you want to get a job as a game developer?\nOr maybe you want to make money with your own games?\nEither way, this course is the ideal start for that. This course is great for complete beginners who have no experience coding and no experience in game development in general.\nYou are going to learn everything step by step and become a game developer as a result.\nFirst, we are going to install Unity and Visual Studio, the best tools for game development out there. Then you will learn how to use unity to build your first game, without writing a single line of code. In the next chapters, we will dive deeper and start coding and discovering different features.\nThroughout the course, you will build several games such as:\n3D Platformer, where you will learn a lot more about physics in game development\nSpace invader clone, which is an amazing 2D game. Here you will learn some neat tricks useful for any 2D game\nFruit Ninja clone, which was a huge success in the mobile games world a couple of years ago.\nOnce you are done with all of these cool but not very graphics and feature-heavy games, we are going to start building an absolute beast of a game. A First-Person shooter slash zombie survivor game. Here you will learn a lot about 3D animations, enemies, health systems, level design, game design, and a lot more.\nThe final Project is a Tycoon game, similar to Adventurist, a huge mobile game success.\nThis course will teach you features like Unity 3D Physics and Physics components and 3D and 2D Game Development.\nYou will learn what are Animations and Animator, what are Collision Detection?\nYou will understand how to monetize your game, how to integrate Ads Manager and In-App Purchases.\nThe different game features include Scene Management, Environment Design, Modular Map Building, Character Control, Navigation Mesh, and many more.\nCheck out the curriculum to get a deeper understanding of the whole course!\n\n\nI'm Denis Panjuta, your instructor for this course. I have taught programming to over 200000 students around the world and worked together with a team of two game developers to make this course as great as possible. You will get to know them in the Q&A section, as they will help you out if you have any questions while going through the course.\nSo you are getting amazing course content, code that is worth more than you are paying, customer support in case you are stuck and if all of that isn't enough, you are also getting a 30Day money-back guarantee.\nAre you excited about becoming a real game developer? Then don't hesitate and get started in the course right now!\n\n\n30-DAY FULL MONEY-BACK GUARANTEE\nThis course comes with a 30-day full money-back guarantee. Take the course, watch every lecture, and do the exercises, and if you feel like this course is not for you, ask for a full refund within 30 days. All your money back, no questions asked.",
      "target_audience": [
        "Anyone who wants to start building games",
        "People who want to learn coding in a fun way"
      ]
    },
    {
      "title": "Intro to Unity 3D Physics: Helicopters",
      "url": "https://www.udemy.com/course/intro-to-unity-3d-physics-helicopters-early-access/",
      "bio": "Learn how to create Helicopter physics for Games with Unity 3D and C#!",
      "objectives": [
        "You will have the experience to work with Rigidbodies in a controllable way",
        "You will have a complete code base to develop any type of Helicopter controller",
        "You will better understand why helicopters fly and the physics behind them.",
        "You will Learn the Beginnings of Editor Scripting",
        "You will learn how to set up a flexible Input System",
        "You will learn about C# concepts such as Inheritance, Interfaces, Properties, and Namespaces",
        "You will gain a better understanding of Organizing your Unity projects",
        "You will gain an insight of how to begin to plan out a Unity Project or Unity System",
        "You will learn to build a re-usable Weapon System",
        "You will learn how to build two types of cameras with re-usable code"
      ],
      "course_content": {},
      "requirements": [
        "A basic Knowledge of Unity 3D and its Interface",
        "Unity 2017 to Unity 2018 is required",
        "A Beginner Level Understanding of C#"
      ],
      "description": "In this course you will learn how to create a helicopter controller from scratch.  You will learn how to create the physics necessary to generate realistic and arcady helicopter flight mechanics.  You will also learn how to set up your Unity project in efficient ways, how to create Editor Scripts, and how to use the Unity Rigidbody to its fullest.\nYou also receive two helicopter models and the contents of the Unity project, to give you a head start on your helicopter games!\nBy the end of the course you will have gained knowledge about Helicopter physics, unity project organization, C# programming, Unity VFX, how to create a weapon system, how to create a camera system, how to create an audio system, and much more!  Enroll today and start flying the friendly skies in you very own helicopter!",
      "target_audience": [
        "A beginner to intermediate Unity user who would like to know more about Physics in Unity",
        "A unity user who would like to gain a better understanding of Unity's Rigidbody",
        "Anyone who is interested in wanting to build a Helicopter game in Unity",
        "Anyone interested in learning how to make a Desert Strike type Game",
        "A beginning Unity user who wants to know more about Project Organization and Editor Scripting"
      ]
    },
    {
      "title": "Build an Idle Business Tycoon Game with Unity3D & PlayMaker",
      "url": "https://www.udemy.com/course/visual-development-idle-business-tycoon-game-unity-playmaker/",
      "bio": "Learn the power of PlayMaker and Visual Programming to create entire feature-filled games in Unity3d.",
      "objectives": [
        "Students who complete this course will learn how to create games using Unity3D & PlayMaker",
        "How to break down problems into finite state machines and develop visual solutions",
        "Understand the advantages and disadvantages of using a visual programming solution",
        "How to create your own C# scripts that can work with PlayMaker"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Setting up your Unity Project and Installing PlayMaker",
          "Creating a Very Simple User Interface to Buy Stores",
          "Setting up your first Finite State Machine in PlayMaker",
          "Buying Stores and Constructing Variables",
          "Tracking Our Money and Spending It",
          "Checking to Ensure There is Enough Money",
          "Let's Make Some Money!",
          "Adding a New State to Update the User Interface",
          "Calculating Profit Across Multiple Stores",
          "Setting up the Timer",
          "Making the Timer Run Asynchronously",
          "Tying the Money to the Timer",
          "Using a Prefab to Spawn Multiple Types of Stores",
          "Referring to Objects Outside the Prefab's Scope",
          "Configuring the Diagram to use Global Transitions",
          "Unlocking a Manager",
          "Connecting the Timer and Manager",
          "CHALLENGE: Subtracting the Cost of a Manager",
          "Allowing One-Time Purchase of Manager"
        ],
        "Adding Additional Features to your Idle Business Tycoon Game": [
          "Improving the Look and Layout of the Game",
          "Adding Store Icons and Formatting the Money",
          "Display a Message when you don't have Enough Money",
          "Improving our Game Architecture with a Game Manager",
          "Creating a Custom Action to Integrate with playMaker and our Idle Game",
          "Retrieving Variables from playMaker State Machines",
          "Fixing the Progress Bar and Adding a Background to Our Game"
        ]
      },
      "requirements": [
        "You should be comfortable using a PC for basic to intermediate tasks",
        "Unity 3D should installed and PlayMaker downloaded from the Unity Asset Store",
        "NOTE: You must have PlayMaker to follow along with this course!",
        "Be open to a fun new way to learn how to program! Visually!"
      ],
      "description": "Important! To following along with this course you must own playMaker. It can be purchased on the Unity Asset Store!\n\n\nThis course is for anyone who wishes to build an Idle Business Tycoon Simulation Game in Unity3D using a visual development tool called PlayMaker.  With PlayMaker, you can make entire games without writing a single line of code. In fact, in this course we build and entire working prototype of an Idle Business Tycoon Simulation game using only visual diagrams.\nLearn the power of visual programming:\nPerfect for making your very first video game ever! Requires Unity3D (Free to download) & playMaker\nStart from the very beginning and follow step-by-step. The course is designed for complete beginners\nThis course is fast paced and focused on building your game. Although this is for beginners these are not boring lectures with fillers. Each lecture you will be learning to design games and building on your game\nLearn to build a complete game in Unity 3D with no C# programming required for the core game.\nFocus on incremental development skills will help you create you own games\nYou will have a basic game up and running within the first few lectures\nCreate an animated progress bar that shows the progress of your store's sales timer\nAfter you have mastered the basics, we expand our game design to support multiple stores and manager upgrades. Become a PlayMaker Pro and solve increasingly more complex problems.\nClear, easy to understand lectures that are paced to make it fun and easy to learn Unity3d & PlayMaker\nCreated by OdooClass Videos... creator of Idle Business Simulation for C# enjoyed by over 1,000 students\nIncludes advanced lectures for students who wish to incorporate their own C# actions into PlayMaker\nGreat starting off point for those who wish to get into game development or expand their range of skills\nWhy would an experienced C# or Javascript programmer be interested in PlayMaker?\n\nThere are several reasons why even experienced programmers may wish to experiment with PlayMaker.\nBuilding games in PlayMaker vs C# allows you to look at game development from a different perspective.\nAs a developer myself who has written code in dozens of languages, it is often refreshing to build games in a visual tool like PlayMaker.  A break from coding and still making games can be fun.\nHow you approach the design and how you build up your game has unique solutions and challenges you will not face  when writing typical C# games.\nIt is relatively easy for an experienced C# developer to write actions that work with PlayMaker. This allows you to use PlayMaker as a state machine and for managing high level functions of your game design while using C# for more complex calculations and algorithms that can be tedious to code using a visual tool.",
      "target_audience": [
        "Anyone interested in learning Unity3d & PlayMaker by making a fun game",
        "Beginning programmers who wish to experiment with visual programming",
        "Experienced programmers who would like to look at game development from a different perspective",
        "Experienced programmers who would like to integrate PlayMaker and custom C# scripts"
      ]
    },
    {
      "title": "Unreal Engine 5: Soulslike Melee Combat System",
      "url": "https://www.udemy.com/course/unreal-engine-5-soulslike-combat/",
      "bio": "Make a complete third person souls-like action RPG melee combat system in Unreal Engine 5!",
      "objectives": [
        "How to program in Unreal Engine with Blueprint",
        "Learn how to create a complete Action RPG Combat System from scratch",
        "Create enemy combat AI using Behavior Tree's",
        "Enemy Boss AI using Behavior Tree's",
        "Different Enemy types such as mobs, heavy mobs, & Bosses",
        "Different types of enemy attacks (Distance based attacks, rare attacks, etc)",
        "Create enemy combat behavior, patrol path behavior, etc.",
        "Hit Detection System using Raycasts",
        "How to use Gameplay tags system",
        "State management & how to manage multiple states in a combat system",
        "Balance the player and enemy stats (e.g. Health, damage, movement speed, etc)",
        "More advanced blueprint techniques such as Interfaces, dispatchers, & gameplay tags",
        "Learn how to use & manage different states within a combat system",
        "Directional dodging system",
        "Multiple Attack types",
        "Multiple Combat Styles (Light sword, Dual Swords, etc)",
        "Hit Reaction System",
        "Blocking & heal mechanic",
        "Targeting System",
        "Different hit reactions based on attack ( e.g. Knockdown)",
        "Equipment (E.g. weapons, armor, etc)",
        "How to setup Visual effects, sound effects, etc"
      ],
      "course_content": {
        "Introduction": [
          "Welcome To The Course",
          "Community & Support",
          "Links & Resources",
          "Initial Setup"
        ],
        "Weapons and Equipment": [
          "Creating base equipment",
          "Equip & Unequip Weapon",
          "Creating the pickup Actor",
          "Different Weapon Styles",
          "Fixing Bugs"
        ],
        "Basic Combat": [
          "Creating the Combat Component",
          "Attack Combinations",
          "Directional Dodge",
          "Combat Reset",
          "Hit Detection System",
          "Character Death",
          "Fixing Bugs & Improving Gameplay"
        ],
        "Advanced Combat": [
          "State Manager System",
          "Character Actions",
          "Sprint Mechanic",
          "Multiple Attack Types",
          "Creating the Stats Component",
          "Stats System Continued",
          "Regeneratable Stats - Stamina System",
          "Different Stat Costs for Different Weapons",
          "Armor & Defense Stat",
          "Gameplay Tags",
          "Dual Wield Weapons",
          "Targeting System",
          "Targeting System Continued",
          "Hit Reaction System"
        ],
        "Enemy Combat AI": [
          "Introduction to Behavior Trees",
          "Setting Up The Enemy AI",
          "AI Patrol System",
          "AI Perception",
          "Enemy Combat",
          "Enemy Combat Continued",
          "Different Enemy Types",
          "System & Gameplay Improvements"
        ],
        "Creating an RPG Prototype": [
          "Initial Setup",
          "Changing Character Mesh",
          "Setting up Gruntling mob",
          "Setting up Gruntling Mob Continued",
          "Humanoid Mob Enemy",
          "Setting Up Boss Enemies",
          "Combat Effects",
          "Blocking mechanic",
          "Use Item (Heal)",
          "Bug Fixes & Improvements",
          "Bug fixes Continued",
          "Block With Sword",
          "Gruntling Patrol"
        ]
      },
      "requirements": [
        "Good knowledge of Blueprint scripting",
        "Good understanding of Unreal Engine"
      ],
      "description": "IMPORTANT NOTE: This course is aimed at intermediate users. So, to take this course you’ll need good knowledge of Blueprint scripting and a good understanding of Unreal Engine.\n\n\nIf you would like to learn how to make your own Souls-like Combat system, then this is the course for you!\n\n\nUsing Unreal Engine 5, you'll learn how to start from a blank project all the way to a complete Dark Souls inspired combat system. While designing the logic for this course, I have focused on making the logic extendable so that you can use what you learn as a foundation for your game!\n\n\nSo what sort of mechanics will I be teaching in this course?\n\n\nYou'll learn about attack combos, multiple attack types, directional dodging, target locking, equipment & multiple weapon styles, collision & hit detection, hit reaction system, combat AI which will include mob enemies, tough mobs, & boss enemies. your own targeting system, hit detection system, applying & receiving damage, multiple damage types, hit reactions, visual effects, & more.\n\n\nBy the end of the course you will have created your very own Dark Souls inspired combat system with all of the features mentioned in the video & on this page.\n\n\nIf you have any questions regarding the course or need help with anything related to the course or for anything game development in general, feel free to join our Discord server!\n\n\nReady to create your own souls-like combat system? Come join the course now!",
      "target_audience": [
        "intermediate Unreal Engine programmers looking to learn how to create a third person action RPG combat system system"
      ]
    },
    {
      "title": "Unity 5.5: develop and publish games quickly",
      "url": "https://www.udemy.com/course/learn-how-to-use-unity-55-to-develop-and-publish-games/",
      "bio": "Learn all the basics of 2D game development with Unity in 1 hour.",
      "objectives": [
        "Students will be able to create and publish their own games to the market.",
        "Understand how game development works.",
        "Use Unity more effectively.",
        "Have confidence in their Unity and C# skills.",
        "Solve problems quicker and more creatively."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Download and Installation of Unity",
          "Setting up our project"
        ],
        "Getting started": [
          "Unity UI",
          "Creating a Main Menu",
          "Animating the Main Menu"
        ],
        "Player and Particles": [
          "Creating a Level",
          "Player Movement",
          "Making the player jump using physics"
        ],
        "Particles and Enemies": [
          "Player Death and Particles",
          "Respawning our Player",
          "Enemy Logic"
        ],
        "Finishing Up": [
          "Shooting Bullets",
          "Enemy Death",
          "Wrapping Up"
        ],
        "Bonus Section": [
          "2D Player Animator",
          "Controlling Animation with a script.",
          "Post processing."
        ]
      },
      "requirements": [
        "Computer."
      ],
      "description": "Ever wanted to make games but felt overwhelmed by all the tools and features available to you?\nWith this course you will learn all the basics needed to start making commercial games in Unity 5.5 with C#. No previous programming knowledge is required.\nWe will focus on teaching you how to use various tools and techniques to speed up your game development.\nYou will be able to program character and enemy AI from scratch, even if you’ve never had experience with coding before.\nThis course will help you get started with your game development career, with the support of our instructor, there won’t be a thing you won’t understand.",
      "target_audience": [
        "Game developers, Game development students",
        "Programmers",
        "Hobbyists"
      ]
    },
    {
      "title": "Create 2 procedurally generated 2D roguelite in Godot 4.4",
      "url": "https://www.udemy.com/course/create-a-procedurally-generated-2d-roguelike-in-godot-4/",
      "bio": "Learn how to make game like Nuclear Throne or Enter the gungeon using Godot 4.4",
      "objectives": [
        "Learn the fundamentals of Godot 4",
        "Learn how to create a procedural generation algorithm",
        "You will learn the fundamentals mechanics of a 2D Roguelike game",
        "You will build a prototype that you will be able to sale"
      ],
      "course_content": {
        "Creating the procedural generation algorithm (NEW COURSE, update for Godot 4.4)": [
          "Setting up the level generation scene and node structure",
          "Creating all the variable needed for the walker",
          "Creating the procedural generation walker algorithm",
          "Generating the background with collision shape",
          "Making the level generation instant",
          "Creating the background terrain",
          "Calling the background terrain in our procgen algorithm",
          "Instancing the Player in the level generated with a Player handler object",
          "Placing exit in the level",
          "Placing object in the level part 1",
          "Placing object in the level part 2"
        ],
        "Creating the player (NEW COURSE, update for Godot 4.4)": [
          "Creating the player node and animations",
          "Creating the player movement",
          "Calling the animations, flipping the player, adjusting the sliding",
          "Instancing our player to our level",
          "z_index and camera setting",
          "Adjusting the collision of the tileset so the player can pass behind tiles",
          "Creating the gun node and the gun class",
          "Making the gun rotate around the player",
          "Flipping the gun in the right direction",
          "Flipping the player in the direction of the mouse",
          "Creating a bullet scene and the script",
          "Creating the shooting mechanic",
          "Changing the cursor of the mouse",
          "Trigger on and off the gun and the mouse cursor",
          "Making sure you can't shoot if the gun is not visible",
          "Creating a sword attack",
          "Creating and activating the collision shape of the sword",
          "Creating the health system and gui",
          "Display the dead animations and restart the level",
          "Create a spike trap to kill the player",
          "Placing the trap in the level using object handler",
          "Creating the ammunitions system and display it in the gui",
          "Creating the ammo scene and place it in the object handler",
          "Creating an exit scene and place it in the level",
          "Screen shake when shooting",
          "Making bullet explode and gun invisible when player die",
          "Slashing spikes with the sword"
        ],
        "Creating the weapons mechanics (New COURSE update for Godot 4.4)": [
          "Refactoring code to shoot three bullet and creating gun ID",
          "Creating the triple shotgun scene",
          "Create the bouncing bullet scene",
          "Coding the bouncing bullet scene",
          "Create the single bounce gun",
          "Create the Triple bounce gun",
          "Creating the rocket launcher",
          "Creating the Rocket scene",
          "Controlling the rocket with the mouse",
          "Creating the gun items scenes to pickup",
          "Instancing the gun in the levels",
          "Creating and coding the gun inventory node",
          "Creating the bridge function and swapping guns collected using a key",
          "What's next?"
        ],
        "Creating the player and the shooting mechanic": [
          "Setting up godot, importing our sprites and creating the main level",
          "Creating the player and its animations",
          "Player movement",
          "Creating the gun",
          "Aiming the direction of the player to the mouse cursor",
          "Creating the projectiles and coding the shooting mechanic",
          "Animating the mouse cursor and changing it to a target icon",
          "Setting up the death animation with state machine & hazards",
          "Fixing the up and down animation of the player",
          "Creating the GUI and displaying the amount of health and ammo",
          "Running out of ammo"
        ],
        "Procedural generation and creating enemy": [
          "Creating the tilemap & tileset",
          "Coding the procedural generation algorithm",
          "Generating our level using the walker",
          "Setting the collision shape of our tilemap and collision layer",
          "Setting up the Ysort of our level",
          "Placing the player in our procedurally generated level",
          "Creating and placing an exit + ysort of the mouse cursor",
          "Creating a second tilemap for the floor + place randomly cosmetics tile",
          "Creating the enemy animations",
          "Coding the enemy movement",
          "Importing enemies in the level and placing them randomly",
          "Killing the enemies and instance an explosion scene",
          "Adding the explosion to the bullet",
          "Creating an ammo pickup and looting the ammo when enemies dies",
          "Create a scent trail",
          "Making our enemy chase the player through the scent trail",
          "Shaders to get hurt and killing the player or the enemy"
        ],
        "Screen shake, Countdown timer, Controls, Bug fixing": [
          "Creating a screen shake when a bullet explode",
          "Creating a countdown timer that restart the level if it reaches zero",
          "Controlling the mouse cursor with the right joystick of a game controller",
          "Bug fixing"
        ]
      },
      "requirements": [
        "A bit of programming knowledge is needed (knowing function, variable, etc), but I'll teach you the rest"
      ],
      "description": "** THIS COURSE HAS BEEN RECENTLY UPDATED for GODOT 4.4**\nIn this course you will learn how to create a procedurally generated 2D Roguelike similar to games like Nuclear Throne or Enter the gungeon. We will use an algorithm called random walker that we will use to create automatically new levels: everytime we will load our level a new one will be automatically generated, which open the gate for infinite levels. We will learn how to place our player, groups of enemies and exit inside it, as well as instancing ammunitions when our enemy dies. We will also create from scratch a player with typical roguelike movement and shooting mechanic like having the rotation of our player and his gun based on the position of the mouse, we will learn how to configure a mouse icon that is animated, how to create enemies that can patrol randomly and chase you once you’ve been detected, and way much more.\nHere is a list of the things we will learn together:\nGenerating procedurally a level that is autotiled with terrains and collisions shape\nRotating the gun and the player toward the mouse position\nInstancing enemies inside the border of our generated level\nHaving our enemy chasing us\nBeing able to collect ammo by looting them inside our level\nHaving a countdown that restart the level when reaching zero\nCreating shader to damage the player\nHaving screen shake when the bullet explode\nHaving a player life system\nHaving an exit portal that we need to find to continue playing the game\nI’ve been enjoying making this new course as I am fascinated by procedural generation, and I hope that this course will be the right entry gate for you if you want to go deeper into that segment of programming that is rarely taught in a way that is complete and accessible for beginner programmer.\nThe asset will be provided with this course, so you just have to enroll and start coding.\nSo thank you for reading this and considering buying this course, and I’ll see you in the first lecture!",
      "target_audience": [
        "This course is targeted first for intermediate programmer but is accessible to beginner looking to learn more how works procedural generation"
      ]
    },
    {
      "title": "Pixel Art Environments: 2D Environment Design & Animation.",
      "url": "https://www.udemy.com/course/pixel-art-environments-2d-environments/",
      "bio": "Learn to create your own top-down & platformer based environments, backgrounds and assets for video games.",
      "objectives": [
        "Create your own top-down and platformer based Pixel Art Environments in just a few hours.",
        "Develop the awesome skills to quickly create Pixel Art backgrounds and landscapes.",
        "Craft Pixel Art objects and environmental assets for decoration.",
        "Design unique 2D game backgrounds.",
        "Make interior environments such as brick walls and castle decorations.",
        "Understand how to create tile sets for top-down and platformer games.",
        "Create nature environments and assets.",
        "Build basic animations for assets and landscapes.",
        "Quickly become competent using the very popular LibreSprite / Asesprite software.",
        "Be part of an amazing and supportive community of people similar to you."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Download Software",
          "Community & Support",
          "Getting Started with Libresprite",
          "Lighting & Colors",
          "Exporting Sprite Sheets",
          "Importing Sprite Sheets",
          "Top-down vs Platformer Sprites",
          "Section Wrap-up - Introduction & Setup"
        ],
        "Creating Tilesets & Assets": [
          "Section Intro - Creating Tilesets & Assets",
          "What’s A Tileset?",
          "Top-down Grass Tilesets",
          "Top-down Nature Assets",
          "Platformer Grass Tilesets",
          "Platformer Nature Assets",
          "Create A Dungeon Tileset",
          "Design Assets For Dungeons",
          "Section Wrap-up - Creating Tilesets & Assets"
        ],
        "Designing Backgrounds": [
          "Section Intro - Designing Backgrounds",
          "Create A Sky Background",
          "Create A Castle Background",
          "Creating Loopable Backgrounds",
          "Create A Landscape: Backgrounds",
          "Create A Landscape: Foregrounds",
          "Polish Your Landscape",
          "Section Wrap-up - Designing Backgrounds"
        ],
        "Polishing Environments": [
          "Section Intro - Polishing Environments",
          "Exporting Animations",
          "Animating Cutscenes",
          "Animating Objects",
          "Building Game Scenes: Backgrounds",
          "Building Game Scenes: Foregrounds",
          "Building Game Scenes: Decorations",
          "Building Game Scenes: Night Cycle",
          "Section Wrapup - Polishing Environments"
        ],
        "Continuing Your GameDev Journey": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No drawing tablet needed - computer, mouse and keyboard is all you need."
      ],
      "description": "Want to make your games stand out? Pixel art is quick and easy, when you know how!\nLearn how to create your own top-down and platformer based Pixel Art Environments in just a few hours.\nUsing the highly popular LibreSprite / Aseprite, you'll create dozens of pixel art assets throughout this course, including nature environments and assets, interior environments such as brick walls, castle decorations and more.\nYou’ll develop the skills to quickly create Pixel Art backgrounds and landscapes, and be crafting Pixel Art objects and environmental assets for decoration in no time!\nAll of this helps make your game stand out, which is ideal for game jams, packed game stores, portfolios and much more!\nFrom creating Environment Pixel Art, to understanding colours, to creating animations and designing game backgrounds. You'll do it all!\nBy the end of the course you'll know how to create tile sets for top-down and platformer games, have designed game backgrounds, and built basic animations for assets and landscapes.\nAnd, the environment design process can be applied to all types of 2D environment design, not just Pixel Art.\nWhether you’re a beginner with pixel art, more intermediate and want to improve your skills, or a game developer working with 2D Engines, this course will help you.\nYour instructor, Reece, will provide you with many tips and tricks to improve quickly and be efficient with your asset creation process.\nAll students have access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nJump in and start creating your awesome environments now!",
      "target_audience": [
        "Pixel Artists (beginner to intermediate)",
        "Game Developers working with 2D Engines",
        "Anyone interested in becoming a Video Game Artist."
      ]
    },
    {
      "title": "Augmented Reality in Depth 101",
      "url": "https://www.udemy.com/course/augmented-reality-in-depth-101-by-debayandey-thnewagetraveller/",
      "bio": "Understand Augmented Reality in Depth ,Various key tracking technology ,and make 20 Apps from scratch using creativity",
      "objectives": [
        "Understand different forms of Augmented Reality and their applications",
        "Import Augmented Reality Software To Unity",
        "Unity 3D fundamentals",
        "Import & Animate 3D Models",
        "Tracking of cylindrical objects and placing digital models surrounding the cylinder",
        "Students will create AR apps by writing codes in C# programming language",
        "Export To IOS & Android",
        "Use Image Targets With Extended Tracking",
        "User Defined Targets",
        "Learn Foundation C# Programming Syntax",
        "Build Your App To A Mobile Device / Tablet",
        "Understand the basic difference between Virtual Reality & Augmented Reality",
        "Understand Mixed Reality",
        "Difference Holography and Photography",
        "Placing a life size Lamborghini car in real world using Markerless tracking"
      ],
      "course_content": {
        "Introduction to Augmented Reality": [
          "Section Outline",
          "Introduction to Augmented Reality",
          "Growing Market",
          "Introduction to Virtual Reality",
          "Difference between AR and VR",
          "Display Technologies",
          "Various Type of Displays",
          "Reality Virtuality Continuum",
          "Introduction to Mixed Reality",
          "Key Tracking Technology",
          "Holography",
          "AR Browsers",
          "Real World Application",
          "Practice Session",
          "Optional Reading Material"
        ],
        "Introduction to Game Engine , Unity3D and Vuforia": [
          "Game Engine",
          "Installing Unity3D",
          "Introduction to Unity3D Editor",
          "Setting up Build Settings",
          "Setup for IOS",
          "Vuforia Setup",
          "Vuforia Engine and PhotoScape",
          "First AR Project",
          "Globe Project",
          "Scripting Time",
          "Time to build app",
          "APK and Test"
        ],
        "Old Uncle APP": [
          "How to Proceed",
          "Importing Assets",
          "Scripting",
          "Build Time"
        ],
        "Virtual Buttons": [
          "Setting up Unity Editor",
          "Adding Virtual Buttons",
          "Scripting",
          "Its Build Time"
        ],
        "2D Page Curl": [
          "Scene Setup and Importing Assets",
          "Understanding Page App Setup",
          "Additional Page Setting"
        ],
        "Cylindrical Targets": [
          "Setting up Cylindrical Targets and Database",
          "Making up the App",
          "Importing Models from Asset Store and setting up the scene",
          "Top and Bottom Clouds along with Helicopters",
          "Setting up Terrain , Planet",
          "Script for Rotation and build the apk"
        ],
        "Multi-Image Target": [
          "What is Multi-Image and its Database SetUp",
          "Editing Image Dimensions in PhotoScape and Updating the Database",
          "Importing Character from Mixamo and Build the App"
        ],
        "User Defined Targets": [
          "What is User Defined Targets and its Setup",
          "Setting up the Scene and Build the APP",
          "Small Tip"
        ],
        "Super-Imposition along with Vuforia Object Scanner": [
          "What is Super-Imposition",
          "Working with .odt file in Unity and Setting up the scene",
          "Build the Apk",
          "Animated Model and Changes in the Script",
          "Build the APP",
          "Designing a Real-World Augmented Reality Experience: Client Consultation and Application Pitch"
        ],
        "Ground Plane Stage": [
          "What is Ground Plane ?",
          "Anchor Stage and Build the APP"
        ]
      },
      "requirements": [
        "A Windows or Mac Computer system",
        "Android SmartPhone or an iPhone",
        "Basic programming knowledge will be of Great help",
        "Most Importantly \"An interest in Augmented Reality\""
      ],
      "description": "Hello Everyone !\n\n\nRequirements\nA Windows or Mac Computer system\nAndroid Smart Phone or an iPhone\nBasic programming knowledge will be of Great help\nGood Internet Speed for Downloading Files\n\n\nCourse Content and Overview\nThis course caters to students interested in venturing into the world of Augmented Reality app development.\nWhether you have no prior experience with Unity 3D or coding, there's no need to worry. We will guide you through every step, starting from the basics.\nThe course comprises 11 sections that cover the latest concepts and insights in the field.\nThroughout the course, you will have access to articles, quizzes, various resources, as well as downloadable files and assets. If you're new to coding, rest assured that C# is a creative and easily understandable language. Additionally, when you install Unity 3D, you'll also get Visual Studio, a programmer-friendly software that will simplify your journey.\nBy enrolling in this course, you will gain a comprehensive understanding of Augmented Reality and delve into its future prospects. The AR market is projected to reach a staggering 85 to 90 billion USD, making this an opportunity you don't want to miss. Prepare yourself to embrace this cutting-edge technology.\n\n\nIn this Course , you will come across 11 sections .\nSECTION 1 : INTRODUCTION TO AUGMENTED REALITY and its FUTURE\n\n\nSECTION 2 : Introduction to Game Engine  , Unity3D and Vuforia\n\n\nSECTION 3 : Old Uncle App\n\n\nSECTION 4 : Virtual Buttons\n\n\nSECTION 5 : 2D Page Curl\n\n\nSECTION 6 : Cylindrical Targets\n\n\nSECTION 7 : Multi-Image Target\n\n\nSECTION 8 : Uer Defined Targets\n\n\nSECTION 9 : Super-Imposition along with Vuforia Object Scanner\n\n\nSECTION 10 : Ground Plane Stage\n\n\nBonus Section ( Section 11 ) : Transformation\n\n\nCurious about Augmented Reality, You have come to the right place. Learn the basics fundamentals and programming techniques required for building fully functional Augmented Reality android and iOS apps. For this course you will need an Android Smartphone or iPhone.\n\n\nSo what is Augmented Reality?\nAccording to Wikipedia, Augmented reality (AR) is a live direct or indirect view of a physical, real-world environment whose elements are \"augmented\" by computer-generated or extracted real-world sensory input such as sound, video, graphics or GPS data.\nIn Augmented Reality the real view is modified by a computer (Smartphone in this case). Augmented reality (AR) enhances one’s current perception of reality, whereas in contrast, virtual reality replaces the real world with a simulated one. Augmentation techniques are basically performed in real time,\n\n\nPower of Augmented Reality\nVuforia platform seemed very promising as developers all over the World have used Vuforia for developing Augmented Reality apps.\nPokemon Go game is the best example of Augmented Reality. Other than that Augmented Reality apps expand over a wide range of topics from Education, Business, Architecture, Health Industry, Home Decoration and obviously mobile gaming.",
      "target_audience": [
        "Anyone Interested to learn Trending Technology",
        "Augmented Reality enthusiast",
        "Beginner level Unity 3D"
      ]
    },
    {
      "title": "Learn to Program by Making Games in Unity",
      "url": "https://www.udemy.com/course/makingunitygames/",
      "bio": "Game development made easy. Learn C# using Unity and create multiple games",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Understand the capabilities of game development using Unity.",
        "Develop strong and transferrable problem solving skills.",
        "Gain an understanding of the game development process.",
        "Learn how object oriented programming works in practice."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Project 1 - Tennis Game": [
          "Tennis Game Overview",
          "Creating A New Project and Introduction To Unity",
          "Resources for Tennis Project",
          "Setting Up The Project",
          "Adding Walls",
          "Creating Paddles & Ball",
          "Adding Physics",
          "Moving The Ball"
        ],
        "Project 1 - Controlling The Player": [
          "Moving The Paddles",
          "Adjusting How The Ball Bounces",
          "Adding Goals",
          "Showing The Score",
          "Tracking & Updating Score",
          "Keeping Paddles On Screen"
        ],
        "Project 1 - Multiplayer & Singleplayer Levels": [
          "Making Multiplayer",
          "Adding Win State",
          "Resetting The Game",
          "Adding Simple AI",
          "Adding Main Menu To Pick Game Mode",
          "Letting The Player Quit To Main Menu",
          "Building The Game"
        ],
        "Project 2 - Brick Breaker Game": [
          "Brick Breaker Game Overview",
          "Resources for Brick Busters",
          "Setting Up The Project",
          "Using a Spritesheet for Multiple Objects",
          "Moving The Paddle - Re-Using Code",
          "Moving The Ball",
          "Starting The Game",
          "Destroying Bricks",
          "Resetting The Ball"
        ],
        "Project 2 - UI & Menus": [
          "Adding Lives & Showing UI",
          "Game Over Screen",
          "Adding Score",
          "Showing Score UI",
          "Adding Score Effect",
          "Creating a Main Menu",
          "Creating a Pause Menu",
          "Creating Level Win Screen",
          "Add Brick Check to Game Manager"
        ],
        "Project 2 - Scores, Hi-Scores & Sound": [
          "Keeping Score & Lives",
          "Restarting After Game Over",
          "Adding High Scores",
          "Adding Simple Sound Effects",
          "Creating a Score Multiplier",
          "Randomising Start Direction",
          "Updating Level 2",
          "Victory Screen",
          "Building the Brick Busters Game"
        ],
        "Project 3 - Side Scrolling Shooter": [
          "Alien Hunters Game Overview",
          "Resources for Alien Hunter",
          "Setting Up The Project",
          "Moving The Player",
          "Keeping The Player On Screen",
          "Introducing Animations (and Dealing with a Unity Bug)",
          "Movement with Animator",
          "Scrolling Space Background",
          "Creating Moving & Rotating Objects",
          "Hurting The Player"
        ],
        "Project 3 - Firing Lasers": [
          "Making Lasers",
          "Firing Lasers",
          "Repeat Firing Lasers",
          "Creating a Particle Impact Effect",
          "Destroying an Object Over Time"
        ],
        "Project 3 - Enemies": [
          "Making Enemies",
          "Destroying Enemies",
          "Making Enemies Fire",
          "CHALLENGE EXERCISE - Create An Explosion When The Enemy Is Destroyed",
          "Different Enemy Movement Types",
          "Stopping Enemies Hitting Each Other",
          "CHALLENGE EXERCISE 2 - Create More Enemies & Asteroid Hazards",
          "Making Waves of Enemies",
          "Managing Waves with Arrays"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity available for free from unity3d.com"
      ],
      "description": "Learn how to program by creating your very own games using Unity3D, an industry-standard program used by many large gaming studios and indie developers across the world.\nIn this course, you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to create such game elements as:\nA character to control\nCollectibles such as coins, extra lives & extra health\nDifferent types of enemies to combat\nDangers such as Spikes, Saws & moving platforms\nUser Interface with interactive menus\nMultiple levels and a level select screen\nA unique and challenging boss battle\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "Anyone who wants to make their own games.",
        "People interested in working in the game design industy.",
        "Please who want to create and publish their own games.",
        "Competent and confident with using a computer."
      ]
    },
    {
      "title": "Unity Basics: A Monetised Android/iOS Game in 4 Hours.",
      "url": "https://www.udemy.com/course/unity-basics-a-monetised-mobile-game-in-4-hours/",
      "bio": "Unity, Basic 3D Game Design with C# Coding. Monetise your games with Ad Support. Suitable for Beginners - Intermediate",
      "objectives": [
        "Build a complete Android/iOS Games In Unity",
        "Monetise Your Games With Ad Support",
        "Code Functionality In C#",
        "Understand how Shaders are used to create interesting visual effects",
        "Polish your Games to be Market Ready.",
        "Have the skills and knowledge to build your own Games."
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Installing Unity",
          "Setup For Mobile",
          "Functions And Unity",
          "Variables",
          "Test"
        ],
        "Game": [
          "Materials",
          "Player Movement",
          "Player Movement Controls",
          "Player Mobile Controls",
          "Camera",
          "Camera Test",
          "Clean Level",
          "Prefabs",
          "Grouping Prefabs",
          "Score Logic",
          "Display Score",
          "Procedural Level Generation",
          "Object Spawning",
          "Randomising Object Spawning"
        ],
        "Polish": [
          "Adding World Shader",
          "Infinite Level Generation",
          "Destroyer",
          "Audio",
          "Menu Layout Setup",
          "Menu Layout",
          "Menu Off And On",
          "Menu Start Game Button",
          "Pause Menu",
          "Game Over Menu",
          "Saving & Loading",
          "Menu Animations"
        ],
        "Conclusion": [
          "Quick Recap",
          "Unity Ads Logic Setup",
          "Unity Ad Functionality",
          "Unity Ad Button Design",
          "Upgrading Player Model",
          "Where To Go From Here",
          "Final Project Export Settings",
          "Thank You (this is not goodbye)"
        ]
      },
      "requirements": [
        "No programming experience necessary, all you need is a computer and an internet connection"
      ],
      "description": "In 2013 Dong Nguyen spent 2-3 days making a simple mobile game called Flappy Bird which went on to earn $50,000 a day in ad-sense revenue. In the last half of 2018, it's not uncommon for a single mobile game to pull in over 1 million dollars a DAY in micro-transactions and ad-sense revenue.\nIn this course, we will be be making a simple but addictive mobile game, that we will monetise with ads in only 4 hours. We will cover;\nInstalling and Using Unity\nMobile Setup\nVariables & Functions\nMaterials, 3D Models\nPlayer Movement\nMobile Input\nCamera Movement\nAdjusting Player Models\nProject Management\nPrefabricated Objects\nGrouping Prefabs\nScore System\nProcedural Level Generation\nObject Spawning\nRandomised Game Design\nCurved World Shader Implementation\nObject Memory Management\nMenu Systems, Menu Layouts, Menu Animations\nPause Menu\nSaving & Loading Data\nUnity Ads\nMonetisation Design Principles.",
      "target_audience": [
        "Beginner game developers looking at creating mobile games with monetization"
      ]
    },
    {
      "title": "Make Awesomely Strange Video Games with Unity and Playmaker",
      "url": "https://www.udemy.com/course/cant-code-who-cares-make-games-anyway/",
      "bio": "No coding. No programming. Learn cutting edge visual scripting tools to make your own video game from start to finish.",
      "objectives": [
        "Create a video game from start to finish without coding",
        "Go through a quick introductory course to fundamental game dev concepts",
        "Create video games using Visual Scripting",
        "Use assets from the demo video game",
        "Learn an intro to Playmaker",
        "Control and animate a 3d third person playable character",
        "Create enemy NPCs that patrol and attack the player on sight with simple AI",
        "Layout a level and set up a Unity Navmesh",
        "Create player pickups like coins and weapons",
        "Set up a weapon firing system with two different types of ammo",
        "Create a boss fight",
        "Set up a treasure chest that opens when the player enters a password",
        "Set up a working health system with UI health bar",
        "Create multiple levels for your game",
        "Create an intro menu"
      ],
      "course_content": {
        "Intro to Game Dev with M dot Strange": [
          "Overview",
          "Introduction",
          "Invisible video game magic",
          "What are variables?",
          "Why variables are important?",
          "Making games without programming",
          "Can we make real games?",
          "Intro to colliders",
          "Mr. Bullet meet Mr. Enemy",
          "Tag! You're it!",
          "Playa makin' moves",
          "Picking up points",
          "Creepy doors that check your keys",
          "How do health bars work?",
          "How to make Torchy the deadly flashlight",
          "How to make a game with a good memory",
          "Making NPCs walk around is SO easy!",
          "Raycast: the magic laser",
          "The old switcheroo trick",
          "How do I control when my animations are played?",
          "Well behaved melee weapons",
          "You can start making games today!",
          "Where to go from here"
        ],
        "Let's Make a Video Game! with the Strange School": [
          "Introduction and Overview",
          "Importing assets we need to make our game",
          "Player movement setup with Playmaker",
          "Finishing our player movement setup",
          "Adding animations to our playable character with Mecanim",
          "Triggering animations using Mecanim parameters",
          "Making our player jump",
          "Adding props to our level",
          "Tweaking the lighting in our scene",
          "Creating coin pickup using Playmaker",
          "Adding FX to our coin pickup and testing it out",
          "Making a gate that traps the player in the Boss Area",
          "Finishing off the gate trap for the Boss fight",
          "Player health state machine",
          "Player health bar setup",
          "Player damage hit effect",
          "Landmine setup",
          "Finishing our landmine setup",
          "Enemy animation and Navmesh setup",
          "Enemy navigation state machine",
          "Basic enemy AI setup",
          "Getting the enemy to chase the player",
          "Making the enemy attack and damage the player",
          "Player weapon setup",
          "Getting the gun in position and firing bullets",
          "Making our bullets hurt and kill the enemy",
          "Adding sound and particle FX to our gun",
          "Boss Enemy setup",
          "Creating a key pickup when the Boss dies",
          "Player bomb projectile setup",
          "Finishing up the player bomb projectile",
          "Boss Enemy AI setup",
          "Making our Boss look and sound deadly - Part I",
          "Making our Boss look and sound deadly - Part II",
          "Boss Area setup",
          "Creating a door we can open with a key - Part I",
          "Creating a door we can open with a key - Part II",
          "Making a treasure chest that opens with a password",
          "Treasure chest password input",
          "Finishing our UI password input",
          "Adding some treasure to our treasure chest",
          "Adding music and a level reset when the player dies",
          "Adding player footstep sounds",
          "Adding more player and enemy sounds",
          "Add a pause, restart and quit to your game - Part I",
          "Add a pause, restart and quit to your game - Part II",
          "Building a Game Start screen - Part I",
          "Building a Game Start screen - Part II",
          "Adding image effects and anchoring our UIs",
          "Adding a Game End Menu",
          "Building our game for release",
          "Fixing our last little bugs"
        ],
        "Bonus Material": [
          "Introduction to Playmaker - Part I",
          "Introduction to Playmaker - Part II",
          "How to control a bomb's damage based on distance",
          "How to use PlayerPrefs with Playmaker",
          "Auto targeting system using Playmaker add-on Arraymaker - Part I",
          "Auto targeting system using Playmaker add-on Arraymaker - Part II",
          "Auto targeting system using Playmaker add-on Arraymaker - Part III",
          "Using a Raycast to target and damage enemies - Part I",
          "Using a Raycast to target and damage enemies - Part II",
          "Using Hash Table to create an inventory system - Part I",
          "Using Hash Table to create an inventory system - Part II",
          "Using Hash Table to create an inventory system - Part III",
          "Using Hash Table to create an inventory system - Part IV"
        ]
      },
      "requirements": [
        "It is recommend that students already have some Unity/Playmaker experience so please download and install Unity and explore the tutorials on Unity3d before taking this course.",
        "A basic understanding of how to get around in Unity is helpful but not required",
        "You will need to download and install Unity 3D free",
        "You will need to purchase, download and install the Unity asset Playmaker"
      ],
      "description": "What is this course about?\nIn this course we will create an entire 3d third person game using Unity and Playmaker. Every step of the process is included. Students will learn everything they need to know to make their own 3d games without writing one line of code. A non technical introduction to game dev course is included, as well as an introduction to Playmaker and 6 bonus advanced Playmaker tutorials.\nStrip away the mystery of game development with Unity + Playmaker and get in the game!\nWhat materials are included?\nAll assets including 3d character models and animation used in the course are included.\nHow long will this course take?\nIt will take 2 - 7 days depending on your speed; there are 15 hours of total material.\nHow is this course structured?\nIn the course we will create a complete 3d third person game from beginning to end; complete with weapon pickups, enemy NPCs, a Boss Battle and an Intro Menu and 'Game Over' screen.\nWhy take this course?\nOne of a kind instructor: this class is taught by indie game developer and internationally renowned award winning animation filmmaker M dot Strange. You can play the games the instructor has made, using the things he will teach you, at mdotstrange (dot) com; see for yourself if he knows what he is talking about.\nReal world learning: use real assets taken from real working games. Everything you learn has been tested and used in games that have shipped.\nBeginner friendly: Minimal geek speak is used so you won't have to google every other world to know what's going on.\nSecrets Unlocked: Learn to do things the easy way. Making games is a lot easier than you think! Let us show you how!\nWe have fun: Learning from an instructor that loves what they do is a lot more fun than learning from someone that is just out to make a quick buck.\nLearn More: Get a deeper understanding as our classes teach you the hows and whys, instead of just how to get an identical end result.\nNo coding. No programming. Skip the grind of traditional game development like a boring cutscene by learning cutting edge visual scripting tools with the Strange School.\nStart today and be a game developer tomorrow!",
      "target_audience": [
        "This course is for people who want to learn how to make an entire video game from start to finish, without knowing how to code."
      ]
    },
    {
      "title": "Create a Complete 2D Survivors Style Game in Godot 4",
      "url": "https://www.udemy.com/course/create-a-complete-2d-arena-survival-roguelike-game-in-godot-4/",
      "bio": "Learn how to create a complete 2D arena survival roguelike game from start to finish in Godot engine 4!",
      "objectives": [
        "Arena survival roguelike mechanics - auto attacking abilities, enemy hordes, experience drops, and roguelike upgrades",
        "Godot engine fundamentals - scene composition using a variety of nodes, scripting, custom user signals, and more",
        "Animations - using squash and stretch to make static sprites pop and give life to your games",
        "UI - containers for layout and sizing, apply theme styling using textures and nine-patch, and use of various other control nodes",
        "Publishing - build the complete game for Windows, Linux, Web, Mac, and update executable icons",
        "Saving and loading - save and load permanent player progression data"
      ],
      "course_content": {
        "Starting Out": [
          "Godot Download, Orientation, and Setup",
          "Creating the Player",
          "Player Movement",
          "Creating a TileMap",
          "Game Camera",
          "Checkpoint"
        ],
        "Building the Foundation": [
          "Creating a Rat Enemy",
          "Creating the First Sword Ability",
          "Introduction to AnimationPlayer",
          "Targeting Enemies With Sword Ability",
          "Destroying Enemies",
          "Project Settings Tweaks",
          "Spawning Enemies Automatically",
          "Improving the Game Feel",
          "Creating the Game Loop Foundation",
          "Experience Drops",
          "Experience Tracking",
          "Creating a Health Component",
          "Implementing Damage",
          "Creating an Experience Bar",
          "Using Custom Resources for Upgrades",
          "Upgrade UI Groundwork",
          "Enabling Upgrade Selection",
          "Making the Upgrade Functional",
          "Improving the Scene Tree Structure",
          "Adding Player Health",
          "Player Health Bar",
          "Creating the Victory Screen",
          "Creating the Defeat Screen"
        ],
        "Gameplay and Visual Improvements": [
          "Increase Difficulty Over Time",
          "Improving the TileMap",
          "Preventing Invalid Spawning",
          "Creating an Axe Ability",
          "Enabling Acquisition of Axe Ability",
          "Prevent Abilities from Being Chosen Twice",
          "Animating the Player",
          "Animating the Enemy",
          "Animating Enemy Death",
          "Adding a Wizard Enemy",
          "Using a Weighted Table for Enemy Spawning",
          "Animating the Wizard",
          "Animating the Experience Vial Pickups",
          "Adding a Custom Font",
          "Adding Floating Damage Text",
          "Implementing a Flash on Enemy Hit",
          "Adding Ability Damage Upgrades",
          "Introduction to UI Theming",
          "Finalizing Upgrade Card Theme",
          "Animating the Upgrade Card",
          "Improving the Upgrade Selection Screen",
          "Applying a Style to the Experience Bar",
          "Animating Victory and Defeat Screens",
          "Applying Styles to the Buttons",
          "Creating a Player Move Speed Upgrade",
          "Adding a Vignette"
        ],
        "Sound Effects": [
          "Adding SFX - Part 1",
          "Adding SFX - Part 2",
          "Adding SFX to UI Elements - Part 1",
          "Adding SFX to UI Elements - Part 2",
          "Adding Victory and Defeat Jingles",
          "Adding Music"
        ],
        "Final Touches": [
          "Creating a Main Menu",
          "Creating an Options Menu",
          "Styling the Options Menu Sliders",
          "Creating a Pause Menu",
          "Adding a Scene Transition Effect",
          "Creating a Meta Progression System",
          "Saving and Loading Meta Progression Data",
          "Creating the Meta Upgrade Card",
          "Allowing Player to Purchase Meta Upgrades",
          "Improving the Meta Upgrade Card",
          "Adding a ScrollContainer to the Meta Upgrade Screen",
          "Exporting the Game for Publishing",
          "Fixing an Enemy Spawning Bug",
          "Conclusion"
        ],
        "Bonus Content": [
          "Adding Another Enemy Type",
          "Adding a Health Regeneration Meta Upgrade",
          "Fixing UI Sizing and Increasing Enemy Count",
          "Creating an Anvil Ability",
          "Adding an Anvil Ability Upgrade",
          "Adding Anvil Impact Particles"
        ]
      },
      "requirements": [
        "Some programming experience"
      ],
      "description": "This course will cover everything you need to know about creating a small 2D arena survival roguelike game from start to finish in the Godot Engine 4. This course covers many aspects of creating a survivors style game including:\nAuto-attacking abilities\nHordes of enemies that increase in difficulty over time\nRoguelike ability and player upgrades\nPermanent progression with saving and loading\nLevelling up by collecting experience dropped from enemies\nThis list is not exhaustive - please see the course outline for a glimpse into the topics that are covered.\nThe goal of this course is to show you how to take an empty project and turn it into a small, complete game. In doing so, this course will give you a robust exposure to many aspects of the Godot engine from input handling, to tilemaps, to saving and loading data, to audio, and more. By the time you complete this course, you will feel comfortable working on your own projects in Godot 4. You will walk away from this course with a solid foundational understanding of making games that are not only functional but also fun.\nThis course will help you greatly if:\nYou are ready to dive into a crash course for the newly released Godot 4\nYou have some game development knowledge and want to learn Godot 4\nYou have some programming knowledge and want to make games\nYou struggle to complete games and want to start and finish a project\nYou regularly participate in game jams and want to improve your ability to craft a fun but short experience\nPlease note that this course is focused purely on the start-to-finish process of making a survivors style game. With that goal in mind, there is no time spent explaining fundamental programming concepts. Familiarity with programming is strongly recommended before taking this course. Any programming experience is fine - GDScript is easy to use.\nSeveral lessons are available to for you to preview for free. Please take a look at those videos before enrolling to determine if the pace of this course is right for you!",
      "target_audience": [
        "Beginner game developers with programming experience",
        "Individuals looking for a complete 2D development guide for Godot 4",
        "Intermediate programmers",
        "Intermediate game developers"
      ]
    },
    {
      "title": "Unity Game Development: Create 2D And 3D Games With C#",
      "url": "https://www.udemy.com/course/unity-game-development-create-2d-and-3d-games-with-c/",
      "bio": "Master The Fundamentals Of Game Development And Learn How To Create 2D And 3D Games With Unity Game Engine",
      "objectives": [
        "Learn To Code in C#",
        "Develop strong and transferrable problem solving skills",
        "Learn good coding and design patterns",
        "Get experience using Unity Game Engine",
        "Gain an excellent knowledge of game creation",
        "Learn how object oriented programming works in practice",
        "Learn How To Create Stunning 2D and 3D Games"
      ],
      "course_content": {
        "Introduction": [
          "Welcome To The Course - IMPORTANT PLEASE DON'T SKIP THIS LECTURE",
          "About Getting Help",
          "Join Our Facebook Group For More Help"
        ],
        "The Code School - Learn To Code In C#": [
          "Downloading Unity",
          "A Word About C# Section - Please Don't Skip",
          "Introduction To Variables",
          "Operations With Variables",
          "Functions",
          "Conditional Statements",
          "Loops",
          "Arrays",
          "Arrays And Functions",
          "Classes And Objects",
          "Constructors",
          "Passing Values And References To Function Parameters",
          "Visibility Modifiers",
          "Inheritance",
          "Monobehaviour",
          "Static Variables And Functions",
          "Coroutines",
          "Delegates",
          "Enumerations",
          "Arrays And Lists",
          "Awesome Bomber Man Your First Game"
        ],
        "Awesome Platformer (Mario Clone)": [
          "Before You Proceed With This Section Please Watch This Video",
          "Awesome Platformer Game Preview",
          "Importing Assets And Creating Player Animations",
          "Moving Our Player",
          "Animating Players Movement And Changing His Direction",
          "Detecting Collisions In Our Code",
          "Making The Player Jump",
          "Making The Players Movement Smoother",
          "Snail Enemy",
          "Stunning The Snail Enemy",
          "Beetle Enemy",
          "Player Shoot",
          "Kill The Enemy With The Bullet",
          "Bird Enemy",
          "Bird Attack",
          "Spider Enemy",
          "Frog Enemy",
          "Fixing Frog Animations",
          "Creating Our Level",
          "Camera Follow Script",
          "Unity's UI System",
          "Score Script",
          "Player Damage Script",
          "Bonus Block",
          "Boss Script",
          "Creating Our Main Menu"
        ],
        "Awesome Zombie Crasher": [
          "Before You Proceed With This Section Please Watch This Video",
          "Awesome Zombie Crasher Preview",
          "Importing Assets And Organizing The Project",
          "Materials",
          "Creating Our Level And BaseController Script",
          "PlayerController Script",
          "Smooth Follow",
          "GroundBlock Script",
          "Adding The Bullet And Making Our Tank Shoot",
          "Introduction To Particle System",
          "Preparing Our Obstacles",
          "Spawning Obstacles In Our Game",
          "Obstacle Scripts",
          "Creating Gameplay UI",
          "Shoot Button",
          "Adding Finishing Touches",
          "Creating Our Main Menu"
        ],
        "Awesome Maze Warrior": [
          "Before You Proceed With This Section Please Watch This Video",
          "Awesome Maze Warrior Preview",
          "Importing Assets And Creating Player Animations",
          "Player Script",
          "Player Script Part 2",
          "Enemy Goblin",
          "Enemy Script",
          "Detecting And Dealing Damage",
          "GameplayController",
          "Adding Coins In Our Game",
          "Gameover Panel And Main Menu Scene",
          "Creating Levels"
        ],
        "Zombie Shooter": [
          "Before You Proceed With This Section Please Watch This Video",
          "Zombie Shooter Game Preview",
          "Importing Assets And Creating Our Character",
          "Player Animations",
          "Moving And Animating The Player",
          "Introduction To Particle System",
          "Shoot And Blood Particle Effects",
          "Weapon Scripts",
          "Weapon Manager",
          "Player Shooting Controls",
          "Smart Pool",
          "Bullet Controller",
          "Importing Zombies",
          "Zombie Scripts",
          "Dealing Damage To Zombie",
          "Melee And Fire Damage",
          "Dealing Damage With Our Zombie",
          "Adding Fence In Our Game",
          "Creating Our Level",
          "Camera Follow Player",
          "Introduction To UI System",
          "Gameplay UI",
          "Creating Different Missions",
          "Creating Our Main Menu",
          "Zombie Spawner",
          "GameManager",
          "AudioManager"
        ],
        "Awesome Road Runner": [
          "Before You Proceed With This Section Please Watch This Video",
          "Awesome Road Runner Game Preview",
          "Importing Assets And Preparing Tile Elements",
          "Preparing Map Generator",
          "Map Generator Part 1",
          "Map Generator Part 2",
          "Map Generator Part 3",
          "Moving The Camera",
          "Tiles Of Screen",
          "Preparing Our Player",
          "Player Controller Script",
          "Preparing Our Obstacles",
          "Obstacle Holder",
          "Spawning Obstacles In Our Game",
          "Colliding With Obstacles And Collectable Items",
          "Sound Manager",
          "Creating Our Main Menu",
          "Main Menu Controller",
          "Game Data And Game Manager",
          "Gameplay UI",
          "Finishing Gameplay Controller Script",
          "Wrapping Up Our Game"
        ],
        "FPS Survival": [
          "Before You Proceed With This Section Please Watch This Video",
          "FPS Survival Game Preview",
          "Importing Level And Configuring Lights In The Game",
          "Creating FPS Player",
          "Coding Players Movement And Jump",
          "FPS Mouse Look And Mouse Controls",
          "Players Sprint And Crouch",
          "Players Footsteps Sound",
          "Animating Players FPS Hands And Weapons",
          "Weapon Handler",
          "Weapon Manager",
          "Player Attack",
          "Creating The Zoom Effect With Animations And Scripting",
          "Creating Arrow And Spear Bullet Prefabs",
          "Configuring And Animating Our Cannibal Enemy",
          "Creating Enemy Animation Script",
          "Enemy Controller",
          "Configuring And Creating The Boar Enemy",
          "Detecting And Dealing Damage",
          "Creating Health Script",
          "Creating Player And Enemies Sound Effects And Shoot Effects Sounds",
          "Creating Player Stats UI",
          "Displaying Health And Stamina Using Player Stats UI",
          "Creating Enemy Manager and adding Finishing Touches To Our Game"
        ],
        "3D Beat Em Up": [
          "Before You Proceed With This Section Please Watch This Video",
          "Beat Em Up Game Preview",
          "Importing Assets And Preparing Our Project",
          "Configuring Our Player",
          "Creating Players Animations",
          "Player Movement Script",
          "Character Animation Script",
          "Player Attack Script",
          "Configuring Our Enemies",
          "Enemy Movement Script",
          "Creating Player Attack Points For Detecting And Dealing Damage",
          "Character Animation Delegate Script",
          "Creating The Health Script",
          "Knocking Down Enemy With Combos",
          "Adding Sound FX In The Game",
          "Camera Shake FX",
          "Enemy Attack Points And Dealing Damage To Player",
          "Enemy Manager Script",
          "Displaying Health Stats With UI"
        ],
        "3D Gladiator Fight Game": [
          "Before You Proceed With This Section Please Watch This Video",
          "Gladiator Arena Game Preview",
          "Importing Assets And Preparing Our Level",
          "Preparing Our Game Character",
          "Player Movement Script",
          "Camera Follow Script",
          "Rotating The Player In The Movement Direction",
          "Player Animations",
          "Player Attack Input",
          "Adding Players Shield And Sword",
          "Preparing The Enemy And The Navigation System",
          "Enemy Controller Script",
          "Creating The Damage System",
          "Health Script",
          "Creating UI",
          "Wrapping Up Our Game"
        ]
      },
      "requirements": [
        "Must have a Mac or PC capable of running Unity3D"
      ],
      "description": "This is the most comprehensive online course that will take you from beginner to creating stunning 3D games in Unity Game Engine!\nThe course is completely project based.\nWe will start with simple things so you will be comfortable even if you are using Unity for the first time. This also applies to your coding skills, if you did not code before, don't worry, we will deeply cover C# from basic to advanced features.\nI had beginners and intermediate game developers on my mind when I structured this course, so it will not only give you all the information you need as a beginner, but it will also teach you advanced game development techniques if you already know how to make games. Every section in the course starts with basic information about the specific topic, and slowly progresses in difficulty as we finish every video.\nMy idea for this course is to make it a single place that will have all the resources you need to learn how to create 2D and 3D games using Unity Game Engine.\nBy having a single course with all the resources it is much easier for me as an instructor to answer you questions so rest assured that you will have my full support while you are going through the course lectures. And it will be much easier for me to update the course on a regular basis.\nSome of the things you will learn in the course:\nUnity's interface\nImporting Assets\nOrganizing The Project\nBasic, Intermediate And Advanced C# Programming\nBasic AI(Artificial Intelligence)\nAdvanced AI(Artificial Intelligence)\nBasic And Advanced Character Animations\nSound FX And Music\nBasic, Intermediate And Advanced Particle FX\nMelee Battle Systems\nBoss Fights\nSpecial In Game Attacks\nLearn How To Use Unity's UI System\nCreate And Animate Menus\nCreate Animation Trigger Events\nThat And Much More Is Awaiting You In This Course\nIf You ever had an idea for an awesome game, then enroll in this course and learn the tools that you need to develop Your next hit game!!!\nWhat Is Your Risk By Taking This Course?\nNothing!! If you are not satisfied with the course, I promise I will give you a full refund of your money NO questions asked!!\nEnroll Now!! You Will Not Be Disappointed!!",
      "target_audience": [
        "Anyone Who Wants To Learn Game Development But Does Not Know Where To Start",
        "Beginners with no coding experience",
        "Programmers who want to learn game development",
        "Experienced Game Developers"
      ]
    },
    {
      "title": "Create a Complete Grid-Based Puzzle Game in Godot 4 with C#",
      "url": "https://www.udemy.com/course/create-a-complete-grid-based-puzzle-game-godot-4-c-sharp/",
      "bio": "Learn how to create a complete 2D grid-based puzzle game from start to finish in Godot engine 4.3+ with C#!",
      "objectives": [
        "Grid-based puzzle mechanics - placing buildings on a grid, updating grid state, and querying the grid",
        "Godot fundamentals - scene composition using a variety of nodes, signal definition and handling, scripting, custom resources, export variables, and more",
        "Godot 4.3+ TileSet and new TileMapLayer - y-sorting multiple stacked layers, tile animations, custom user-defined tile data, and auto tiling",
        "C# scripting - using C# effectively in Godot 4, C# data structures, using LINQ for filtering and querying data, using Nuget packages, and extension methods",
        "Publishing - export your game for distribution",
        "UI - using containers for layout, using custom themes, defining theme variations, textures and nine-slice, and buttons",
        "Saving and loading - using JSON to store and load game save data to a custom user directory",
        "Audio - implementing sound effects and music"
      ],
      "course_content": {},
      "requirements": [
        "Some programming experience with statically-typed languages is strongly recommended"
      ],
      "description": "This course will cover everything you need to know about creating a small 2D grid-based puzzle game from start to finish in the Godot Engine 4.3+ using C# scripting. This course covers many aspects of creating a grid-based puzzle game including:\nBuilding placement on a grid with variable tile sizes\nQuerying grid state using LINQ with C# data structures like HashSets and Dictionaries\nCreating levels using the new Godot 4.3 TileMapLayer, including multi-level maps with y-sorting, animated tiles, and custom tile data\nSaving and loading level completion progress\nImplementing audio including building placement and destruction effects and music\nThis list is not exhaustive - please see the course outline for a glimpse into the topics that are covered.\nThe goal of this course is to show you how to take an empty project and turn it into a small, complete game. In doing so, this course will give you a robust exposure to many aspects of the Godot engine from C# scripting, to input handling, to tile maps, to saving and loading data, to audio, and more. By the time you complete this course, you will feel comfortable working on your own projects in Godot 4.3+ and C#. You will walk away from this course with a solid foundational understanding of making games that are not only functional but also fun.\nThis course will help you greatly if:\nYou are ready to dive into a crash course for Godot 4.3+ with C#\nYou are comfortable in Unity and want to transfer your C# scripting skills to Godot\nYou have some game development knowledge and want to learn Godot\nYou have some programming knowledge and want to make games\nYou struggle to complete games and want to start and finish a project\nPlease note that this course is focused purely on the start-to-finish process of making a grid-based puzzle game. With that goal in mind, there is no time spent explaining fundamental programming concepts of statically typed languages. Familiarity with programming and statically typed languages is strongly recommended before taking this course.\nSeveral lessons are available to for you to preview for free. Please take a look at those videos before enrolling to determine if the pace of this course is right for you!",
      "target_audience": [
        "Beginner game developers with programming experience",
        "Individuals looking for a complete 2D development guide for Godot 4 with C#",
        "Intermediate programmers",
        "Intermediate game developers"
      ]
    },
    {
      "title": "Master Lua Programming and Create Amazing Games with LÖVE!",
      "url": "https://www.udemy.com/course/lua-love/",
      "bio": "Learn the basics of programming, then use that knowledge to create games with the beginner-friendly game engine: Love2D!",
      "objectives": [
        "Understand the basics of programming",
        "How to use Lua",
        "Utilize the core features of LÖVE",
        "Find and use open-source software",
        "Incorporate additional editors and tools",
        "Create your own games!"
      ],
      "course_content": {},
      "requirements": [
        "Capable of using the basic functionality of your computer",
        "Ability to download and install programs"
      ],
      "description": "Whether you're a newcomer to the world of programming or an experienced developer seeking to expand your skillset, LÖVE (also known as Love2D) is a game engine that offers an incredible opportunity to dive into game development. Utilizing the user-friendly Lua scripting language, LÖVE empowers you to bring your game ideas to life.\n\nJoin this project-based course and unleash your creativity as we explore the fundamental concepts of programming and their application in game development.\n\nNo prior technical knowledge is required for this course, except for being capable of using the basic functionality of your computer and the ability to download and install programs. We'll guide you through each step, making it accessible to everyone.\n\nTogether, we'll build three captivating games, gradually increasing the complexity with each project. Through this hands-on experience, you'll gain a solid foundation in programming video games. Equipped with a deep understanding of LÖVE's capabilities, you'll be ready to forge your own path and craft unique games that captivate audiences.\n\nOur journey begins by delving into Lua programming basics, covering essential topics such as variables, conditional statements, loops, functions, comments, and more. These principles are widely applicable across all programming languages, making this knowledge valuable beyond the scope of this course. For those already familiar with programming, we offer a convenient \"syntax recap\" section, specifically focusing on Lua syntax. You can quickly catch up on the language's specific nuances without revisiting every lecture.\n\nOnce we've established the programming foundation, we'll dive headfirst into utilizing LÖVE. Together, we'll create our games, starting with a straightforward Shooting Gallery, progressing to an engaging top-down shooter, and finally moving to a physics-based platformer.\n\nThroughout the course, we'll explore an extensive array of game development concepts, which includes creating your main character, keyboard and mouse input, graphics rendering, enemy mechanics, collision detection, timers, randomness, RGB color schemes, physics simulation, animations, open-source software integration, Tiled map editor utilization, camera manipulation, sound effects, music implementation, score tracking, and data saving.\n\nBy actively coding alongside the lectures, the knowledge you acquire will better stick with you. As we progress, your programming and development skills will strengthen, empowering you to bring your own game ideas to fruition. With the ability to seamlessly incorporate these features, you'll be fully equipped to create captivating games of your own design.\n\nDon't let your game ideas stay dormant—take the leap into game development with LÖVE and Lua programming. Join us on this exciting journey, and unleash your potential to shape unique gaming experiences!",
      "target_audience": [
        "Anyone who wants to learn game development - regardless of technical background"
      ]
    },
    {
      "title": "Unity Tutorial: Idle, Clicker, Incremental Game",
      "url": "https://www.udemy.com/course/unity-tutorial-idle-clicker-incremental-game/",
      "bio": "Learn how to create Clicker, Idle, Incremental Games with Unity Game Engine.",
      "objectives": [
        "Idle, Clicker, Incremental Game ideas in general",
        "C# Fundamentals like Loops, Statements and more",
        "C# Scriptable Objects and their usecases",
        "Some Mathmatics like Exponential Functions",
        "User Interface Design - Scrollable Content and more.."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Conzept & Unity Setup": [
          "The Concept",
          "Unity Setup"
        ],
        "Scriptable Objects": [
          "Scriptable Objects",
          "Calculating Cost",
          "Calculating Income",
          "The First Drink",
          "Editor Scripting Previews",
          "Re-arrange Editor Script",
          "Creating all Drinks"
        ],
        "User Interface Design": [
          "Itemholder",
          "Scrollablity",
          "Scrollbar",
          "Changing the Look"
        ],
        "Scripting": [
          "Itemholder Script",
          "NEW: Prefab handling in Unity 2019+",
          "Buy Button Script",
          "GameManager #1 - The First Class",
          "GameManager #2 - The Variables",
          "GameManager #3 - The Money Ticker",
          "GameManager #4 - Filling the Interface",
          "GameManager #5 - Preparing for Buying",
          "GameManager #6 - Buy An Item"
        ],
        "The Clicker Object": [
          "Watertank #1",
          "Watertank #2",
          "Popup Text on Click #1",
          "Click Popup Text #2",
          "Click Popup Text #3"
        ],
        "User Interface 2": [
          "Money UI",
          "Gold Per Second UI"
        ],
        "Saving and Loading": [
          "The Save Function",
          "The Load Function",
          "Saving the Data",
          "Auto Save",
          "Loading the Data #1",
          "Loading the Data #2",
          "Loading the Data #3",
          "Game Saved Indicator #1",
          "Game Saved Indicator #2"
        ],
        "Updates & Clean Up": [
          "Formatting Numbers",
          "Clean Up"
        ],
        "Conclusion & Bonus Material": [
          "Conclusion"
        ]
      },
      "requirements": [
        "You need at least Unity 5.3+",
        "PC or Mac",
        "Knowledge how to use Mouse and Keyboard"
      ],
      "description": "In this Unity Course you'll learn how to create Clicker, Idle, Incremental Games with Unity Game Engine. I will cover all basics you need to start such a game.\nThis course is made for beginner, which want to learn the basics of Clicker, Idle, Incremental Games.\nWe are creating a system to:\nC# (Monodevelop)\ncreate Scriptable Objects for our items to simplify processes\ncreate a basic Editor Script to show Previews in the Editor\ncreate connector Scripts to easy access User Interfaces\ncreate auto - saving and loading the game\ncreate a exponential function for the cost calculation\nlearn to round floats to 2 digets after komma\nUnity (2018.2)\nsetting up our Editor, so we always see the important content\ncreating our own User Interface for the game using the Canvas System\nimplement scrollable content for our items / itemholder\nimplement a scrollbar\ncreate an Object to click on\nC# Fundamentals\nI'll cover how to use and/or create:\nVariables (float , int, bool, string ...)\nclasses\nfunctions\nif / else statements\nfor and foreach loops\nLists\nArrays\nCoroutines\nCourse Material\ni provide the following Material with the Course:\n8 different Drink Graphics as *.png\n1 simple Background\n1 Itemholder Background\n1 Watertank Graphic to click on\nYou have to write the code on your own, i do not provide the final scripts!\nAll other graphics for Menu's, Icons, Images or Buttons need to be created on your own.\nAll Materials i provide are for education only and should not be in your final release!\nConclusion\nIn the end of this course you will have a fully functional Idle, Clicker, Incremental Game.\nChallenge\nAfter you have created nice Menus, Buttons, and maybe additional content, upload the Game to any Gaming Website, Google Playstore, Apple Store or even Windows Store or Steam.\nSo what are you waiting for?\nLet's make your dream game a reality!!\nLevel: Beginner\nVideo Course Length: ~4 hours\nUnity Version required: 5.3+",
      "target_audience": [
        "If you are interested in game creation.",
        "If you want to ever wanted to start your first game.",
        "If you love incremental, idle, clicker games and you want to learn how they work."
      ]
    },
    {
      "title": "Unity + SQL Databases Player Management Leaderboards + More!",
      "url": "https://www.udemy.com/course/unity-sql-database/",
      "bio": "Allow Players to Sign in, track their scores and build a leaderboard for players around the world with an SQL database!",
      "objectives": [
        "Unity",
        "SQL",
        "Server Scripting",
        "Unity Web Requests",
        "Unity Databasing",
        "Unity Player Management",
        "Unity Leadboards",
        "Unity Sign In Users"
      ],
      "course_content": {
        "Introduction": [
          "Introduction and About this Course",
          "Meet Your Instructor / My Teaching Methodolgy",
          "Is this Course Right for You? More Course Details",
          "Course Overview, Sections and 'Flow' of each section.",
          "Quick Note About Video Speed"
        ],
        "SQL Database Basics": [
          "Overview of SQL",
          "Installing MAMP",
          "phpMyAdmin Overview/ Database and Table Set Up",
          "Changing Table Structure If Needed",
          "Inserting Information Into Our Table",
          "Reading/Selecting Information from Our Table",
          "Updating Information In Our Table",
          "Deleting Information From Our Table"
        ],
        "PHP Scripting Basics": [
          "Overview of PHP + Visual Studio Code Installation",
          "Echo Statements and Variables with PHP",
          "If Statements with PHP",
          "Getting Info Back From Our Database with PHP"
        ],
        "Unity Web Requests / Unity Networking Basics": [
          "Basic Unity Networking Get Requests",
          "Basic Unity Post Requests"
        ],
        "Unity CRUDs / User Management": [
          "Basic Project set up + Create User Part 1 (UI Element Set Up)",
          "Create User Part 2 (Front End Scripting Work)",
          "Create User Part 3 (Networking Requests)",
          "Create user Part 4 (Server Side Scripting)",
          "Create Player Part 5 (Server Error Handling)",
          "Create Player Part 6(Basic Sanitization and Filtering of User Input)",
          "Create Player Part 7 (App Security with Connecting To Our Server (App Password))",
          "Create Player Part 8 (Hashing User Passwords)",
          "Login Player Part 1 (UI Set Up)",
          "Login Player Part 2 (UI Scripting)",
          "Login Player Part 3 (Player Prefab + Current Player Script)",
          "Login Player Part 4 (Network Requests Set Up)",
          "Login Player Part 5 (Server Script)",
          "Login Player Part 6 (Handling Server Response Codes)",
          "Login Player Part 7 (Assigning Player Info in Scene)",
          "Login Player Part 8 (Signing Out Player)",
          "Assigning Player Info In Scene",
          "Updating Player Score Part 1 (Front End Scripting)",
          "Updating Player Score Part 2 (Server Scripting)",
          "Update Player Result Error Talk"
        ],
        "Unity Leaderboard": [
          "Leaderboard UI Set Up Part 1",
          "Leaderboard UI Set Up Explanation",
          "Leaderboard UI Set Up Part 2 (Prefab Set Up)",
          "Leaderboard Front End Scripting",
          "Leaderboard Server Scripting",
          "SimpleJSON Script",
          "Using Simple JSON",
          "Sorting Players By High Score",
          "Giving Players Rankings In Our Leaderboards",
          "Search Function Part 1",
          "Search Function Part 2",
          "Search Function Part 3",
          "Search Function Part 4",
          "Testing our App!"
        ],
        "Cloud Deployment ** BONUS **": [
          "Intro to Cloud Deployment",
          "Launching EC2 Server",
          "Configuring our Server with a LAMP stack + phpMyAdmin",
          "Setting Up Our Table in Database",
          "File Transfer to Server with WinSCP",
          "Script Fixing for server.",
          "Setting Up SSL with our Cloud Server",
          "Fixing Unity Scripts to send information to our cloud server",
          "Final Testing For our App and Cloud Database/Server!"
        ],
        "Conclusion + Bonus!": [
          "Project ZIP For Reference",
          "Conclusion + Where to go from here",
          "Thank you!"
        ]
      },
      "requirements": [
        "Basic Unity"
      ],
      "description": "Take your games to the next level with this course!! Connect your Unity project with a backend database! There is so much that you can do with the information that you will learn from this course. You can track players scores, allow users to sign in and sign out, build a leaderboard of players and connect them from around the world!\nTopic Covered:\nUnity\nUnity Networking / Webrequests\nUnity Database\nUnity Player Management\nSQL Database\nUnity UI Work\nUnity Leaderboards\nPHP Scripting Basics\nLAMP Cloud Server Set Up\nDatabase Security\nPassword Security\nWorking with JSON\nAND SO MUCH MORE!!\nSo come along for the ride and take your Unity projects to a whole new level!!!\n\n\n--Austin Patkos (eJPT, CCP, SAA, BCCe) has taught over 7,000 students on Udemy. He is passionate not only about tech but about teaching tech too. Knowing that remembering information isn't enough, you have to have a deeper understanding to be able to retain all of the information. He teaches in a manner that is sure to help you develop your skills and take you to the next level as a developer. He teaches a careful balance of giving enough information but also taking time to practice it too. Austin has developed these courses to teach people just like how to become better developers.",
      "target_audience": [
        "Unity Developers"
      ]
    },
    {
      "title": "Master Mobile Game Development with Godot 4",
      "url": "https://www.udemy.com/course/mobile-game-godot/",
      "bio": "From concept to app stores, including gameplay, UI system, in-game shop, saving system, in-app purchases and more.",
      "objectives": [
        "Make a complete fully featured mobile game that has all the elements of a finished mobile game: gameplay, UI system, in-game shop, saving system etc.",
        "This course extensively covers in-app purchases using Godot’s plugins, no other resource on the internet currently covers it to this extent.",
        "Learn how to export and run a Godot project to iOS and Android.",
        "Get familiar with the Godot interface and its powerful tools.",
        "Understand the principles of mobile game design, including touch controls and optimization for mobile devices.",
        "Step-by-step guidance on how to publish your game on various mobile platforms."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Course Overview",
          "Creating The Project",
          "Game Architecture",
          "Project Settings",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Mobile Gameplay": [
          "Section Intro - Mobile Gameplay",
          "Player Scene",
          "Horizontal Movement",
          "Teleporting On Edges",
          "Adding Gravity",
          "Platform Scene",
          "Player Jump",
          "Game Camera",
          "Camera Limits",
          "Level Generation Intro",
          "Creating The Ground",
          "Generating The Level",
          "Level Generate Function",
          "Infinite Level",
          "Level Gen Script",
          "Platform Destroyer",
          "Overlapping Platforms",
          "Small Things",
          "Parallax Background",
          "Better Parallax",
          "Wrap Up - Mobile Gameplay"
        ],
        "Exporting And Testing": [
          "Section Intro - Exporting And Testing",
          "Exporting for iOS",
          "Active Development",
          "Android Setup",
          "Developer Mode",
          "Exporting for Android",
          "Accelerometer Input",
          "Simulator Testing",
          "Wrap Up - Exporting And Testing"
        ],
        "UI System": [
          "Section Intro - UI System",
          "Debug Console",
          "Log Messages",
          "Title Screen",
          "Pause Screen",
          "Game Over Screen",
          "Handling Buttons",
          "Changing Screens",
          "Animating Screens",
          "Disabling Buttons",
          "The HUD",
          "Safe Area",
          "Screen Scale",
          "Wrap Up - UI System"
        ],
        "Putting It All Together": [
          "Section Intro - Putting It All Together",
          "Play Button",
          "Lose Condition",
          "Show Game Over",
          "Game Over Back",
          "Game Over Retry",
          "Keeping Score",
          "High Score",
          "Saving High Score",
          "Pausing The Game",
          "Show Pause Screen",
          "Pause Screen Buttons",
          "Pause When Minimized",
          "Sound Effects",
          "Wrap Up - Putting It All Together"
        ],
        "In-app Purchases": [
          "Section Intro - In-app Purchases",
          "New Player Skin",
          "Shop Screen",
          "IAP Manager",
          "Gradle Build",
          "Google Play Plugin",
          "Connecting To Google",
          "Play Console App",
          "Querying Product Info",
          "Purchase Product",
          "Purchases Updated",
          "Acknowledging",
          "Query Purchases",
          "Consume Purchase",
          "Android Internal Testing",
          "iOS Plugin",
          "App Store App",
          "Understanding The API",
          "Event Loop",
          "Purchasing iOS",
          "Restore Purchases",
          "Restore Button",
          "Wrap Up - In-app Purchases"
        ],
        "Publishing The Game": [
          "Section Intro - Publishing The Game",
          "Google Play Store",
          "Apple App Store",
          "Course Wrap Up - Godot Mobile"
        ]
      },
      "requirements": [
        "It would be helpful if you know the fundamentals of Godot, such as scenes, scripting etc."
      ],
      "description": "Want to learn how to create your own mobile games and deploy them to app stores?\nWith this course, you’ll dive into the world of mobile gaming and learn the skills needed to create engaging and dynamic mobile games using Godot Engine.\nYou’ll make a complete fully featured mobile game that has all the elements of a finished mobile game: gameplay, UI system, in-game shop, saving system etc.\nYou’ll learn how to export and run a Godot project to iOS and Android. The course also extensively covers in-app purchases using Godot’s plugins, which no other resource on the internet covers to this extent.\nWhether you're a beginner or an experienced developer, this course will guide you through the fascinating process of mobile game development.\nMaybe you want to make mobile games and release them on the app stores, or you’ve taken a beginner Godot course and want to level up your skills?\nPerhaps you're a game dev enthusiast looking to break into mobile games, or you want to expand your skill set in Godot, with specific features like exporting and using the in-app purchase plugins.\nMove beyond beginner level and build a complete, feature-rich mobile game with this course!\nYou'll Learn…\nGodot Engine Basics: Get familiar with the Godot interface and its powerful tools.\nMobile Game Mechanics: Understand the principles of mobile game design, including touch controls and optimization for mobile devices.\nScripting and Animation: Learn to script in GDScript and create engaging animations.\nPublishing Your Game: Step-by-step guidance on how to publish your game on various mobile platforms.\nMake a complete fully featured mobile game that has all the elements of a finished mobile game: gameplay, UI system, in-game shop, saving system etc.\nThis course extensively covers in-app purchases using Godot’s plugins, no other resource on the internet covers it to this extent.\nThe course teaches how to export and run a Godot project to iOS and Android.\nUnlike beginner courses, this course teaches how to make a complete game. This is very good for students looking to level up their skills and reach an intermediate level.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAnd you’ll get access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nEnrol now and start your journey to become a mobile game developer with Godot!",
      "target_audience": [
        "This is the perfect course if you want to make a mobile game and release it on the app stores.",
        "It's also ideal if you’ve taken one of the Godot beginner courses and you want to level up your skills.",
        "Equally great if you want to learn mobile specific parts of Godot, like exporting and using the in-app purchase plugins."
      ]
    },
    {
      "title": "Learn To Create A Farming Game With Unity 6 & C#",
      "url": "https://www.udemy.com/course/unity6-farming/",
      "bio": "Game development made easy. Learn C# using Unity and create your own crop growing game!",
      "objectives": [
        "Learn C#, a modern versatile programming language",
        "Understand the capabilities of game development in Unity",
        "Develop strong and transferrable problem solving skills",
        "Gain a complete understanding of the game development process",
        "Learn how object oriented programming works in practice"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Assets"
        ],
        "Getting Started": [
          "Setting Up The Project"
        ],
        "Tiles & Tilemaps": [
          "Creating Tiles",
          "Using Tilemaps For The Ground"
        ],
        "The Player": [
          "Setting Up The Player",
          "Setting Up Our First Script",
          "Moving The Player",
          "Controlling The Player",
          "Limiting Diagonal movement",
          "Setting Up Animations",
          "Making The Animator Work",
          "Flipping The Player"
        ],
        "The Camera": [
          "Making The Camera Follow The Player",
          "Keeping The Camera Confined",
          "Showing The Correct Visible Area",
          "Keeping The Player Confined",
          "Creating Hard Objects with the tilemap",
          "Fixing Stray Lines"
        ],
        "Ploughing": [
          "Creating a planting block",
          "Showing Growth",
          "Making The Player Plough"
        ],
        "Managing Tools": [
          "Setting Up Tools",
          "Using Switch Statements",
          "Displaying Tools",
          "Displaying Selected Tool",
          "Making The Player Update UI",
          "Updating At The Start"
        ],
        "Managing Crops": [
          "Watering The Soil",
          "Animating Tools",
          "Limiting Movement While Using Tools",
          "Planting Crops",
          "Making Crops Grow",
          "Harvesting Crops"
        ],
        "Planting On A Grid": [
          "Setting up block positions",
          "Getting The Grid Size",
          "Filling The Grid",
          "Tracking Grid Blocks",
          "Preventing Blocks Spawning"
        ],
        "Targetting": [
          "Adding A Target Indicator",
          "Adjusting The Indicator",
          "Getting A Block With The Indicator",
          "Clearing The Grid"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity"
      ],
      "description": "Learn how to create and program your very own farming game using Unity, an industry-standard game development program used by large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to understand such game elements as:\nGenerating a grid to plant on\nBuying and selling seeds and crops\nSwitching between various tools\nFull player movement\nA complete time and day progression system\nPlanting and growing crops\nTargeting points in the grid\nAn inventory system\nTracking Money\nFull Menu and Audio systems\nand much more...\nThe course also includes a complete version of the project to use for your own reference to ensure everything in your game works as it should!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own farming management games",
        "People who want to create and publish their own games",
        "Complete beginners with an interest in learning game development",
        "Developers who want to re-skill across to game development",
        "People interested in working in the game design industry",
        "Competent and confident with using a computer"
      ]
    },
    {
      "title": "Blender 3D Model a Ghibli Art Stylized Scene",
      "url": "https://www.udemy.com/course/blender-ghibli-beginners-3d-model-guide-oriental-stylized-scene/",
      "bio": "Master 3D Modeling in Blender: Design a Ghibli Art Asian-themed Oriental Fantasy Island Floating in the Sky",
      "objectives": [
        "• Following through a complete guide on creating a stylized oriental island",
        "• Using Blender and understanding its interface and shortcuts",
        "• Creating 16 stunning stylized 3D assets enabling you to build an oriental island scene",
        "• Learning how to bring your scene to life with procedural rocks, foliage and wildlife",
        "• Animating water and creating massive waterfalls",
        "• Animating rapids and turbulence in stylized water",
        "• Animating koi fish",
        "• Seeing butterflies move realistically along a set path",
        "• Creating procedural materials in Blender",
        "• Learning how to create low poly trees using the Blender particle system",
        "• Creating grass using the Japanese Ghibli art style",
        "• Learning an industry-standard 3D modelling professional workflow within Blender",
        "• Going over a complete beginner’s guide to sculpting within Blender",
        "• Effective problem-solving in Blender",
        "• A course within a course introduction into (a) Blender basics, (b) materials and textures, and (c) seams, sharps, and UVs",
        "• Learning how to use HDRI stylized lighting",
        "• Maintaining and optimising stylized art aesthetics for a full oriental island",
        "• Marking Seams, Sharps, and fixing Normals",
        "• Smoothing and preparing meshes for texturing",
        "• Learning the basics of shaders",
        "• Mesh deforming and using Booleans",
        "• Learning how to make loop cuts in Blender",
        "• Fixing Ngons within Blender",
        "• Complete guide on marking seams & texture resolutions",
        "• Complete UV Mapping Guide: UV mapping and UV unwrapping your model",
        "• Creating Collections of Objects and Meshes using a Hierarchy System",
        "• Learning how to use rendering to improve the quality of presentation for your 3D environment in Eevee",
        "• Rendering a stylized oriental island scene to a high level."
      ],
      "course_content": {
        "Introduction": [
          "Section 1 - Introduction"
        ],
        "Section 2 - The Basics of Blender": [
          "Udemy - Lesson 1 - Blender Basics & Course Layout"
        ],
        "Section 3 - Creating The Oriental Street Lantern - Part 1": [
          "Lesson 2 - Starting our Street Lamp with Edge Loops",
          "Lesson 3 - Different Ways to Create Meshes",
          "Lesson 4 - How Seams & Sharps Work",
          "Lesson 5 - Learning About Nodes & Materials",
          "Lesson 6 - Working with Material Nodes",
          "Lesson 7 - Basics of Lighting"
        ],
        "Section 3 - Creating The Oriental Street Lantern - Part 2": [
          "Lesson 8 - Converting and Working with Curves",
          "Lesson 9 - Using Seams Effectively",
          "Lesson 10 - Creating Ornamental Swirls",
          "Lesson 11 - Proportional Editing Workflow",
          "Lesson 12 - Finishing the Lamp Materials",
          "Lesson 13 - Parents & Children in 3D"
        ],
        "Section 4 - Creating The Small Bridge": [
          "Lesson 14 - Working with SVG's",
          "Lesson 15 - Working with Multiple Modifiers",
          "Lesson 16 - Learning how to Speed up Workflows",
          "Lesson 17 - Completing our Small Bridge"
        ],
        "Section 5 - Creating The Oriental Wall Entrance": [
          "Lesson 18 - Working with Deform Modifier",
          "Lesson 19 - Flipping our Normal's",
          "Lesson 20 - Fixing Boolean Meshes"
        ],
        "Section 6 - Creating The Fruit Basket & Fruit": [
          "Lesson 21 - Starting the Fruit Basket",
          "Lesson 22 - Creating the Basket Material",
          "Lesson 23 - Creating Procedural Materials"
        ],
        "Section 7 - Creating The Large Arch": [
          "Lesson 24 - Creating the Large Arch"
        ],
        "Section 8 - Creating The Rock Pool": [
          "Lesson 25 - Introduction to Sculpting",
          "Lesson 26 - Creating the Rock Material",
          "Lesson 27 - Creating a Water Shader",
          "Lesson 28 - Finishing the Rockpool"
        ],
        "Section 9 - Creating The Lilly Pads & Reeds": [
          "Lesson 29 - Creating Reeds the Easy Way",
          "Lesson 30 - Working with Colour Ramps"
        ]
      },
      "requirements": [
        "• To own a computer (Microsoft, Linux or Mac)",
        "• A graphic tablet is highly recommended but not required",
        "• To have downloaded Blender 2.9 (available for free)",
        "• A thirst to learn and excitement about 3D modelling",
        "• To download all course resources including a course handbook, 15 references, and 5 colour maps."
      ],
      "description": "Would you like to learn how to model a stylized oriental island scene reminiscent of anime films or series?\n\n\nNow, what if I told you I have a course to do just that on Udemy?\n\n\n\n\n'Blender 3D Model a Stylized Oriental Scene’ will see you creating 16 assets that complete an exciting scene full of life through 3D animation.\n\n\n'Blender 3D Model a Stylized Oriental Scene’ will give you access to 24 full hours of 3D art.\n\n\nLearn how to build 4 levels of a flying island in 128 lessons.\n\n\nThis course will see you learn all the techniques pros use and how they use them.\n\n\nThrough reading this course description you will find out:\n\n\n- What you want to learn about 3D modelling;\n- What you are going to get through 'Blender 3D Model a Stylized Oriental Scene’, and;\n- What are you going to lose if you don’t enrol in this course.\n\n\n\n\nModeling\n\n\n'Blender 3D Model a Stylized Oriental Scene’ will see you take a deep dive into the power of curves and great techniques for using them.\nLearn how to use multiple modifiers to create amazing 3D models. This will include Blender's simple deform, skin, displace and decimation modifier.\n\n\nA lot of my students have fed back that they would like to learn to sculpt in Blender. We will be doing exactly that!\n\n\nFollowing the success of my latest courses, we will be modelling, texturing, and finalising every individual asset before moving onto the next. Students have said that this has helped them in staying excited throughout the creation process, being able to see how their scene comes closer to the course preview step-by-step.\n\n\nOf course, you could set yourself a challenge and diversify aspects of the scene, such as including different buildings, changing their architectural design or colours, or modelling and animating more animals.\nBe creative! Make your islands bigger and lusher. Add different types of flowers and trees and build up the stylized character of the scene with new assets you have thought of.\n\n\n\n\nTexturing and Materials\n\n\n'Blender 3D Model a Stylized Oriental Island' will teach you all about advanced Blender node techniques and the course will act as an in-depth guide to the entire process.\n\n\nThis course will also teach you the basics of shaders and how to create your own water shader which you will be able to use in any other builds. But that is not the only unique feature of this course.\n\n\n'Blender 3D Model a Stylized Oriental Island' will help you make your own procedural materials and shaders which we will take full advantage of in the course. The procedural materials we will be making include the rocks, the earth material, the paths, the water, the koi fish, the gong, and the foliage.\n\n\n\n\nParticle Systems\n\n\nTake your 3D modelling skills to a new level by creating stylized trees using the Blender particle system.\n\n\nWe will be using a technique that is meant for hair strands to create the grass through procedural systems.\n\n\nThrough completing 'Blender 3D Model a Stylized Oriental Island', you will learn how to use particle systems to create grass in the influential style of Ghibli art. As part of that, you will find out how useful a Blender emission shader is to help you resonate that art style.\n\n\n\n\nAnimation\n\n\nEnrol to 'Blender 3D Model a Stylized Oriental Scene’ to learn how to bring your scene alive with procedural rocks, foliage, and wildlife.\nWe will not just model them. We will also animate them!\n\n\nLearn how to create stylized animated water, including waterfalls, rapids, and turbulence.\n\n\nYou will also be going through a fully comprehensive guide about animating fish and butterflies that move realistically, following a set path.\n\n\n\n\nLighting\n\n\nBy enrolling in 'Blender 3D Model a Stylized Oriental Scene’, you will also learn how to take control of your scene's lighting as we take a close look at HDRI stylized lighting, more so than in any of my other courses.\n\n\nFor a full introduction into lighting 3D scenes, we will also cover all in-built Blender lighting functionalities.\n\n\n\n\nRendering\n\n\n'Blender 3D Model a Stylized Oriental Island' is a complete guide into using Eevee for lighting, rendering, shadows, exposure, and colour management.\nYou will also how to create great rendered animations of the scene using various camera techniques.\n\n\n\n\nCourse Resources & Freebies\n\n\nThe course resource pack will include 16 course references for all the individual stylized oriental island scene assets we will be creating. It also includes 5 colour maps.\n\n\nThe best course navigation tool for 'Blender 3D Model a Stylized Oriental Island' will be available, yet again. The course handbook will give the control back to you and you will be able to fully streamline your learning process to your needs and wants seamlessly.\n\n\nSomething like this is essential to courses as long as this one, and 3D Tudor is the first to consistently include this with all the newest courses.\n\n\nEnrol in this course and come be part of a 3D modeling journey of over 24 hours of learning.\n\n\nCheck out the free introduction and I am sure you won’t be able to put this course down!\n\n\n\n\nStill unsure? Then, let me tell you what's unique about this course:\n\n\n- animating water and creating massive waterfalls;\n- animating rapids and turbulence in stylized water;\n- animating koi fish;\n- seeing butterflies move realistically along a set path;\n- creating grass using the Japanese Ghibli art style;\n- learning how to use HDRI stylized lighting;\n- animations & key commands throughout the learning process;\n- - accessing 3 courses within a course, including full lessons on (a) Blender basics, (b) materials and textures, and (c) seams, sharps, and UVs.\n\n\n\n\nFrom winding stairs to stone steps and cosy fountain nooks, to lush grass, 'Blender 3D Model a Stylized Oriental Island' will take you on a tour of oriental stylized design.\n\n\nLet's build your own Asian fantasy…\n\n\n\n\nUntil next time, happy modelling everyone!\n\n\nNeil – 3D Tudor",
      "target_audience": [
        "• Beginner 3D modellers eager to learn how to build a stylized oriental island",
        "• Enthusiasts of Blender who want to fast-track their understanding of its new and exciting changes",
        "• Mid-Level 3D modellers who want to take their modelling to a new level and improve their workflow with tips and tricks",
        "• Ghibli art style and anime enthusiasts who want to honour their interests through their 3D artwork"
      ]
    },
    {
      "title": "Unity Visual Scripting: Learn Game Coding The Easy Way",
      "url": "https://www.udemy.com/course/unity-visual-scripting-bolt/",
      "bio": "Learn object oriented programming by building 2D & 3D games in Unity using the C# visual scripting language.",
      "objectives": [
        "Build 2D and 3D games in Unity using visual scripting– no coding required!",
        "Create graphs using drag-and-drop nodes to visualize and implement game logic",
        "Understand the fundamentals of game development in Unity",
        "Build a solid foundation for future projects using visual scripting",
        "Navigate the Unity interface with ease"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Promo Video",
          "Welcome To The Course",
          "Installing Unity",
          "Introducing Unity",
          "Introducing Bolt",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Microbe Mayhem": [
          "Section Intro - Microbe Mayhem",
          "Project Setup",
          "Using the Transform Tools",
          "Using Graph Variables",
          "Basic 2D Movement",
          "Smooth Movement",
          "Using Delta Time",
          "Using Input: Get Axis",
          "Normalizing Movement",
          "Introducing Collision",
          "Using Trigger Colliders",
          "Using Object Variables",
          "Introducing Conditionals",
          "Creating a New Enemy",
          "Using Random: Range",
          "Making a Cooldown",
          "Wrap Up - Microbe Mayhem"
        ],
        "Arrows Away": [
          "Section Intro - Arrows Away",
          "Game Design - Arrows Away",
          "Project Setup",
          "Rigidbody Movement",
          "Finishing Player Movement",
          "Camera Setup",
          "Rotating The Camera",
          "Using Mathf: Clamp",
          "Adding A Reticle",
          "Introducing Prefabs",
          "Instantiating An Arrow",
          "Adding Force To Arrows",
          "Hiding The Cursor",
          "Managing Arrow Instances",
          "Using Null Checks",
          "Making The Targets",
          "Creating The Environment",
          "Scoring Points",
          "Hitting The Bullseye",
          "Making A Particle Effect",
          "Triggering A Particle Effect",
          "Adding Player Score",
          "Displaying Player Score",
          "Charging Up Arrows",
          "Clamping Arrow Power",
          "Using A Slider",
          "Setting Flight Orientation",
          "Fixing The Launch Rotation",
          "Decreasing Arrow Power",
          "Adding A Timer",
          "Making A Game Over Panel",
          "Finishing The Game Loop",
          "Wrap Up - Arrows Away"
        ],
        "Icy Ascent": [
          "Section Intro - Icy Ascent",
          "Icy Ascent - Game Design",
          "Project Setup",
          "Using Sorting Layers",
          "Introducing Sprite Shapes",
          "Refining Sprite Shapes",
          "Using Edge Colliders",
          "Setting Up The Player",
          "Making Player Animations",
          "Using The Animator",
          "Setting Up The Input System",
          "Introducing State Graphs",
          "Activating Player Animations",
          "Horizontal Player Movement",
          "Refining Player Movement",
          "Flipping The Player Sprite",
          "Making The Player Jump",
          "Refining The Jump",
          "Adding A Jump Animation",
          "Smoothing the Transitions",
          "Cinemachine Follow Camera",
          "Adding A Camera Confiner",
          "Setting Up Moving Platforms",
          "Finishing Moving Platforms",
          "Adding A Ground Check",
          "Adding A Fall State",
          "Improving The Landing",
          "Setting Up Hazards",
          "Snowman Enemy States",
          "Adding Snowman Projectiles",
          "Changing Snowman Direction",
          "Fixing Movement Bugs",
          "Finishing The Death State",
          "Adding Snow VFX",
          "Finishing Game VFX",
          "Decorating The Level",
          "Creating Parallax Effect",
          "Making The Game Loop",
          "Wrap Up - Icy Ascent"
        ],
        "Continuing Your GameDev Journey": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "This is course is beginner friendly, you don't need any previous experience.",
        "You just need a computer capable of running Unity and an internet connection and you're good to go!"
      ],
      "description": "Ready to build 2D & 3D games in Unity with no coding? Welcome to the wonderful world of Visual Scripting!\nIf you feel intimidated by coding, or don’t know where to start with game development, this is the course for you!\nYou’ll make 2D & 3D games from scratch, without writing a single line of code using Unity’s built in visual scripting tool, a visual alternative to C#. Create graphs, using drag-and-drop nodes to visualise and implement game logic.\nLearn the fundamentals of game development, while learning to navigate the Unity interface, to build a solid foundation for future projects .\nYou’ll learn all about Basic Player Movement and Game Physics, as well as Asset and Graph Management, Player Input and UI. And we’ll take you through Game Design.\nThis course is beginner friendly, no previous Unity or coding experience is needed. It’s perfect if you want to break into Unity game development but are intimidated by coding, or you want to explore an alternate way of scripting games in Unity.\nIt’s also ideal if you prefer a more visual way of representing game logic, or you’re looking for a broad introduction to the fundamentals of 2D and 3D game development using the Unity engine.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced coders, so are able to explain complex concepts clearly, as well as entertain along the way.\nAll students have access to the Q&A forums where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nSo dive in now and create games in Unity with no programming!",
      "target_audience": [
        "Beginner (no previous Unity or coding experience required)",
        "Ideal if you're looking to break into Unity game development but are intimidated by coding or want to explore an alternate way of scripting games in Unity",
        "Perfect if you prefer a more visual way of representing game logic",
        "Great if you're after a broad introduction to the fundamentals of 2D and 3D game development using the Unity engine"
      ]
    },
    {
      "title": "Unreal Engine VR Development Fundamentals",
      "url": "https://www.udemy.com/course/unreal-engine-vr-development-fundamentals/",
      "bio": "Learn how to build the basic VR mechanics from scratch in Unreal Engine 4 using Blueprints for Oculus Quest 2",
      "objectives": [
        "Unreal Engine Blueprints Basics",
        "Prototype VR Projects with Unreal Engine",
        "Configuring Unreal Engine projects for VR Development",
        "Building basic VR Mechanics from scratch",
        "UI Interactions in Unreal Engine",
        "Unreal Engine's Gameplay Framework"
      ],
      "course_content": {
        "Installing Unreal Engine And Setting Up VR Template": [
          "Read Before Begin",
          "Setting up Unreal Engine 4",
          "Creating VR Template Project and Overviewing the Engine Editor",
          "Installing Android Studio And Configuring Unreal Engine for Android Platform",
          "Configuring and Running VR Template Project for Oculus Quest 2"
        ],
        "Intro to Blueprints: Escape From Train Game": [
          "Project Overview",
          "Creating the Project and Importing Assets",
          "Setting up Game Mode and Modifying First Person Character",
          "Opening and Closing the Door Part 1: Blueprint Actors",
          "Opening and Closing the Door Part 2: Timelines and Overlaps",
          "Creating The Secret Key Blueprint",
          "Locked Case Blueprint and Widget Blueprint",
          "Interacting With the Password UI",
          "Escaping from Train"
        ],
        "VR Development Basics": [
          "Creating Project and VR Basics Map",
          "Configuring Project for VR",
          "Building for Oculus Quest 2 and PC VR (via Oculus Link)",
          "Game Mode and VR Pawn",
          "Building VR Pawn Part 1: Adding VR Camera and Motion Controllers",
          "Building VR Pawn Part 2: Adding VR Hands",
          "Building VR Pawn Part 3: Animating VR Hands",
          "Grabbing in VR Part 1: Finding Nearest Object to Grab",
          "Grabbing in VR Part 2: Blueprint Interfaces",
          "Grabbing in VR Part 3",
          "Movement in VR Part 1: Joystick Movement",
          "Movement in VR Part 2: Snap Turn Mechanism",
          "Movement in VR Part 3: Teleportation",
          "UI Interactions in VR Part 1: Widgets",
          "UI Interactions in VR Part 2: Visualizing UI Interaction Beam Using Splines"
        ],
        "Source Codes": [
          "Source Codes"
        ]
      },
      "requirements": [
        "No programming experience needed. We will code visually.",
        "Having an Oculus Quest or Quest 2 VR Headset (Oculus Rift will be fine too)",
        "Having a PC that supports Unreal Engine",
        "Desire to learn VR Development"
      ],
      "description": "Back in 1995, we had the Internet revolution connecting people around the World using 2D websites. Now, the same is happening but in 3D. Instead of 2D pages, we already have 3D experiences via VR headsets. And all these will eventually get us to the Metaverse which is the successor to the internet where we will be all connected in a Virtual Space with our own Avatars, virtual homes, and economy.  To become a part of building the Metaverse, we must definitely know at least one Game Engine to create immersive virtual worlds.\n\n\nUnreal Engine from Epic Games will be one of the few tools empowering the Metaverse! So, that's why it is the best time to learn Unreal Engine VR Development. And we created this course just for that. In this course, you will quickly get started with your Unreal Engine career. We spent tons of time creating the tutorials so that you can save time and learn this complex topic in a very short time.\n\n\nBy enrolling in this course, you will learn the VR Development Fundamental topics such as:\nSetting up and Configuring Unreal Engine for VR Development\nBlueprints Visual Scripting System Basics\nGameplay Framework in Unreal Engine\nBlueprint Actors\nCreating VR Pawn\n\n\nAlso, you will build the basic VR Interactions from scratch such as:\nGrabbing\nAdding and animating VR Hands\nMoving with Thumbstick input\nTeleportation\nSnap Turning\nUI Interactions\n\n\nAt the end of this course, you will have built your own VR Template project that you can use on your projects. Also, you will have built a simple game, Escape From Train from the Blueprints section. Overall, you will have a solid understanding and starting project (you built!) for VR Development in Unreal Engine 4.\n\n\nEnroll now and let's build the Metaverse together!\n-Tevfik",
      "target_audience": [
        "Designers who want to use VR for their creative purposes",
        "Developers who want to get started with Unreal Engine and VR Development",
        "Anyone how want to save time learning a new topic"
      ]
    },
    {
      "title": "Unreal Engine 5: Intermediate Course",
      "url": "https://www.udemy.com/course/unreal-engine-5-the-intermediate-course/",
      "bio": "How to Make Video Games Using Materials, Landscapes, Animations & Blueprints in UE5",
      "objectives": [
        "Intermediate Unreal Engine 5 concepts used to develop games",
        "Detailed understanding of Materials and Textures within Unreal Engine to make your graphics pop",
        "How to create beautiful landscapes and giant open worlds for your games while still achieving high frame rates",
        "How skeletal meshes work and how to import, edit, assign, control and blend animations",
        "Intermediate blueprint concepts such as arrays, data tables, spawning, debugging, event dispatchers, and blueprint interfaces"
      ],
      "course_content": {
        "Materials and Textures": [
          "Materials Overview",
          "Textures",
          "Material Inputs",
          "Normal Maps",
          "Anisotropy and Tangent Inputs",
          "Material Editor Toolbar",
          "Blend Modes",
          "Material Instances",
          "Dynamic Material Instances",
          "Shading Models Part 1",
          "Shading Models Part 2",
          "Water Materials",
          "Math Expressions",
          "Input Data Expressions",
          "Material Functions",
          "Built-In Material Functions",
          "Texture Masking",
          "Material Layers",
          "Material Layer Blends",
          "UV Mapping",
          "Texture Coordinate Node",
          "Gradient Functions",
          "Time Node",
          "Rotator and Panner Nodes",
          "Bump Maps",
          "World Position Offset",
          "Pixel Depth Offset",
          "Decals"
        ],
        "Landscapes and Open Worlds": [
          "Landscape Overview",
          "Landscape Manage Mode",
          "Landscape Brushes",
          "Landscape Edit Layers",
          "Landscape Sculpt Mode Part 1",
          "Landscape Sculpt Mode Part 2",
          "Landscape Paint Mode Part 1",
          "Landscape Paint Mode Part 2",
          "Landscape Hole Materials",
          "Landscape Auto Materials",
          "Landscape Splines Part 1",
          "Landscape Splines Part 2",
          "Landscape Collisions",
          "Landscape Grass Part 1",
          "Landscape Grass Part 2",
          "Foliage Mode Part 1",
          "Foliage Mode Part 2",
          "World Partition Overview Part 1",
          "World Partition Overview Part 2",
          "Streaming Sources",
          "Data Layers",
          "Level Instances",
          "Level of Detail (LOD) Part 1",
          "Level of Detail (LOD) Part 2",
          "Nanite Part 1",
          "Nanite Part 2"
        ],
        "Skeletal Meshes and Animations": [
          "Skeletal Mesh Animation Overview",
          "Skeletal Animation Editors",
          "Skeletons",
          "Sockets",
          "Animation Sequences",
          "Animation Blueprints",
          "State Machines Part 1",
          "State Machines Part 2",
          "Blending Animations Overview",
          "Blend Spaces Part 1",
          "Blend Spaces Part 2",
          "Blend Multi & Blend Poses Nodes",
          "Cached Poses",
          "Layered Blend Per Bone Node Part 1",
          "Layered Blend Per Bone Node Part 2",
          "Blend Profiles",
          "Additive Animations",
          "Aim Offsets",
          "Animation Montages Part 1",
          "Animation Montages Part 2",
          "Animation Notifies Part 1",
          "Animation Notifies Part 2",
          "Animation Curves",
          "Curve Editor Part 1",
          "Curve Editor Part 2",
          "Morph Targets",
          "Animation Attributes"
        ],
        "Intermediate Blueprints": [
          "Blueprints Review",
          "Arrays",
          "Sets",
          "Maps",
          "Structs",
          "Data Tables",
          "Spawning Actors",
          "Referencing Actors",
          "Functions Overview",
          "Function Properties",
          "Advanced Function Properties",
          "Local Variables, Collapsing Nodes, and Overriding",
          "Function Libraries",
          "Macros",
          "Construction Script",
          "Debugging Part 1",
          "Debugging Part 2",
          "Event Dispatchers",
          "Blueprint Interfaces",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic understanding of Unreal Engine concepts such as Projects, Levels, Actors, Meshes, and Collisions",
        "How to navigate within the Level Editor",
        "Some familiarity with using Blueprints within Unreal Engine"
      ],
      "description": "Learn how to make video games with Unreal Engine 5. If you’ve already learned the basics of Unreal Engine and are eager to learn more, this is the course for you. For monetary reasons, almost all courses are beginner’s courses. This course is for those who have been desperately seeking something more advanced on Unreal Engine. Continue your journey towards being a professional video game developer with Unreal Engine 5: Intermediate Course.\n\n\nLearn How to Make Video Games with this Unreal Engine 5 Course for Intermediate Game Developers\nContinue your game dev studies with one of the most up-to-date Unreal Engine courses available. This course is regularly updated so that it will always cover one of the most recent versions of Unreal Engine 5.\nI also spent a great deal of time before the course was first published to plan out all the lessons so that:\nnothing is covered without the prerequisite knowledge needed being covered first\nlectures and sections are self-contained without jumping from topic to topic\nIn other words, I strived to structure the course in the “ideal” order, in order to reduce confusion to a minimum. At this point in your studies, you should understand how difficult it is to achieve goals 1 and 2 at the same time, as so many various topics are closely interrelated, so I’m very proud of what I was able to accomplish with this course.\n\n\nLearn How to Be a Professional Video Game Developer Using Unreal Engine\nThis course was designed for those who are looking for a professional path of study for Unreal Engine 5. This might not line up with your goals. If you’re just looking to play around a bit, then you may not like the attention to detail. But if you’re interested in getting as good as possible, I’ve designed this course to give you what the others won’t.\nThis course covers the details that other courses skip, which causes confusion when trying to learn more advanced topics. By the end you should have a thorough understanding of intermediate concepts of Unreal Engine and be fully prepared to move on to more advanced topics.\n\n\nIntermediate-Level Game Design Concepts\nIf you are familiar with, at a basic level, concepts such as Projects, Levels, Actors, Meshes, Collisions, and Blueprints, then you are fully prepared to take this course.\nThe course will cover the following topics in thorough detail:\nMaterials & Textures\nLandscapes & Open Worlds\nSkeletal Meshes & Animations\nIntermediate Blueprints\nMaterials and Textures - How to make snazzy, professional-looking materials for your meshes. Includes topics such as material inputs, normal maps, blend modes, shading models, material instances, water materials, material functions, texture masking, UV mapping, texture coordinate node, world position offset, and decals.\nLandscapes and Open Worlds - How to make breathtaking landscapes and huge, sprawling open worlds with seamless loading, while still achieving incredible numbers of frames per second. Learn about manage mode, sculpt mode, paint mode, landscape hole materials, landscape auto materials, splines, landscape grass, foliage mode, world partition system, level instances, level of detail (LOD), and nanite.\nSkeletal Meshes and Animations - How to animate skeletal meshes in an interactive manner and blend smoothly between animations. Learn about skeletons, sockets, animation sequences, animation blueprints, state machines, blend spaces, cached poses, blend profiles, additive animations, aim offsets, animation montages, notifies, animation curves, morph targets, and animation attributes.\nIntermediate Blueprints - Recap the fundamentals of Blueprints, then build upon that knowledge to achieve great skill and flexibility when it comes to scripting your games. Topics include advanced data types, data tables, spawning actors, referencing actors, functions, function libraries, macros, local variables, construction script, debugging, event dispatchers, and blueprint interfaces.",
      "target_audience": [
        "Aspiring game developers who have some basic knowledge of Unreal Engine and wish to continue their studies",
        "Students with a desire to learn Unreal Engine 5 concepts in great detail",
        "Those wishing to become professionals using Unreal Engine 5"
      ]
    },
    {
      "title": "Modding By Kaupenjoe: Fabric Modding for Minecraft 1.18.1",
      "url": "https://www.udemy.com/course/minecraft-modding-fabric-118/",
      "bio": "Learn Minecraft Modding with Fabric and Java. Beginner Friendly Introduction to Java and Minecraft Modding with Fabric!",
      "objectives": [
        "Learn to independently program in Java",
        "Learn the Basic Java Skills necessary to make a Minecraft Mod!",
        "The Basics of Minecraft Modding in Fabric",
        "Everything from making your first Item to creating Tools and custom Armor",
        "Including a comprehensive Explanation of Mixins"
      ],
      "course_content": {
        "Java Introduction": [
          "Installation & Download",
          "Datatypes",
          "Java Syntax",
          "Output & Input",
          "Errors & How to Deal with them",
          "Integers, Arithmetic & Math Methods",
          "Assignment Operators",
          "Booleans & Comparison Operators",
          "Booleans & Logical Operators",
          "If and Else Statements",
          "Switch Statement",
          "Trivia Game #1",
          "Strings & String Methods",
          "Casting",
          "Ternary Operator",
          "Arrays Explained",
          "For and While Loops",
          "Java Methods",
          "Updating the Trivia Game with Methods",
          "Java Collections",
          "Java Object Oriented Programming Explained",
          "Java Classes and Objects",
          "Access Modifiers",
          "Inheritance & Polymorphism",
          "Interfaces & Abstract Classes",
          "Updating Trivia Game with Classes",
          "Bank Management Program",
          "Anonymous Classes",
          "Enums & Advanced Enums",
          "Exceptions & Try and Catch",
          "Java Lambda Expressions",
          "Java Generics"
        ],
        "Basic Minecraft Modding Concepts": [
          "Installation, Setup & GitHub",
          "How to use the Q&A",
          "Create a Custom Item",
          "Create a Custom Block",
          "Adding Custom Item Group",
          "Create your own Custom Item & Block",
          "Add Custom Recipes",
          "Custom Block Drops with Loot Tables",
          "Making a Custom Recipe & Loot Table",
          "Making an Advanced Item",
          "Making an Advanced Block",
          "Making a Custom Food Item",
          "Making a Custom Fuel Item",
          "Adding custom Tooltips",
          "All about Tags",
          "Adding Stairs & Slabs",
          "Adding Buttons & Pressure Plates",
          "Adding Fences, Fence Gates & Walls",
          "Adding Doors & Trapdoors"
        ],
        "All about Tools & Armor": [
          "Creating a new Tool Set",
          "Creating a Custom Multi-Tool (Paxel)",
          "Making Weapons that Apply Effects",
          "Creating a new Armor Set",
          "Making a Full Armor Effect",
          "Creating a Custom Horse Armor",
          "Adding a Custom Enchantment"
        ],
        "Intermediate Minecraft Modding Concepts": [
          "Blockstate Properties",
          "How does NBT Data work?",
          "Item Model Predicates",
          "Making a Custom Blockstate Property & NBT Data",
          "Adding a Custom Crop",
          "How to add Items to a Composter",
          "Mixins Explained",
          "Creating Custom Commands",
          "Adding Custom Flowers",
          "Potted Flowers",
          "Adding Custom Sounds",
          "Custom Block Sound Group",
          "Adding Custom Music Discs",
          "Adding a Custom Block Models in Minecraft with Blockbench",
          "Adding a Custom Item Models with Blockbench",
          "Adding a Custom Bow",
          "Custom Fluids",
          "Modifying Existing Loot Tables",
          "Custom Advancements",
          "How to spawn Particles",
          "Add Custom Paintings"
        ],
        "Advanced Minecraft Modding Concepts": [
          "Creating a Custom Block Entity",
          "Making a Custom Recipe Type",
          "Adding Custom Wood",
          "Adding a Custom Sign",
          "Updating Fabric and Minecraft to a newer Version"
        ],
        "World Generation in Minecraft 1.18 with Fabric": [
          "Creating a Custom Tree",
          "Custom Tree World Generation",
          "Custom Flower World Generation",
          "Custom Ore Generation"
        ],
        "Finishing Your Mod": [
          "Exporting your Mod"
        ],
        "Additional Topics (1.18.1)": [
          "Update Fabric (1.18.1)",
          "XP Drops for Blocks",
          "Adding Transparent Blocks",
          "Add Animated Items",
          "Custom Menu Screen",
          "Add Simple & Basic Configs",
          "Add Custom Effects",
          "Add Custom Potions",
          "Add Custom Entities with Geckolib",
          "Add Entities Animations with Geckolib & BlockBench",
          "Add Entity Variants",
          "Add Tameable Entities",
          "Add Rideable Entities",
          "Adding Entity World Generation",
          "Add Custom Trades to Villagers"
        ],
        "1.18.2 Additional Topics": [
          "Fabric Update to 1.18.2",
          "Custom Structures (Tutorial Example Repo)",
          "Custom Structures (Single Piece)",
          "Custom Structures (Jigsaw Structures)",
          "Custom 3D Armor Models",
          "Custom Villagers",
          "Baby Entities"
        ],
        "1.18.2 More Additional Topics": [
          "Custom Geodes",
          "Block that interacts with Redstone",
          "Custom Block Entity Renderer",
          "Loot Chests in custom Structures",
          "1.18.2 UPDATE TO 1.19"
        ]
      },
      "requirements": [
        "A Computer",
        "Some knowledge of Minecraft and its Modding Community",
        "Basic Computer skills (like downloading a program of the web)",
        "No programming experience needed."
      ],
      "description": "Minecraft! It is the most popular game of all time and Minecraft Modding is back in everyone's mouth! Some Minecraft Mods have become so popular that everyone knows them. The Minecraft Modding Community keeps growing every day and it's a great and creative outlet!\nThis course will teach you how to make your own Minecraft Mod! Not only will you learn the programming language Java but also how to effectively use the Minecraft Modding API Fabric.\nFor absolutely beginners, I have added a Java Introduction for you, so even with no experience in programming you can start making Minecraft Mods by first going through the Java Introduction!\nIn the Basics Concepts part of the course, you will learn how to add Items, Blocks, custom recipes, tool to Minecraft! The Intermediate Concepts is where you'll really pick up some amazing skill needed for proper Minecraft Modding with Fabric! We're gonna talk about BlockStates and NBT Data, add custom crops and see how you can add custom block models to Minecraft!\nBut that's not all! Toward the end of the course, we cover advanced topics such as Block Entities, Custom Recipe Types and even Ore Generation amongst others.\nWith a bit of creativity and applying the lessons you get from this course, you might just make the next Minecraft Mod hit!\nThis course is accessible to complete beginners. Even if you have never programmed in your life! The only requirement is that you own Minecraft and are vaguely familiar with the Game and some popular Minecraft Mods or even Minecraft Modpacks.\nExercise files and the entire Source Code will be available so you can follow along with everything I do in the videos.\nIf you have any questions or suggestions, also feel free to contact me here. I'm happy to help you learn to code in Java and make your own Minecraft Mod with Fabric.\nNOTICE: NOT AN OFFICIAL MINECRAFT PRODUCT. NOT APPROVED BY OR ASSOCIATED WITH MOJANG.",
      "target_audience": [
        "Complete Beginners wishing to learn Java!",
        "Beginners that want to create their first Minecraft Mod and don't know where to start",
        "Forge Veterans wanting to switch or port their Minecraft Mod to Fabric"
      ]
    },
    {
      "title": "Unreal Engine C++, A Beginners 101",
      "url": "https://www.udemy.com/course/unreal-engine-cpp-101/",
      "bio": "A tutorial series for Unreal Developers looking to make the leap into C++",
      "objectives": [
        "This series is aimed at Unreal Engine developers of any skill level, looking to get into C++.",
        "We will start slow, explain basics and fundementals of C++ in general and how they relate the Unreal, then dive into some simple practical courses to cover different aspects of code.",
        "The first session will cover the basics of Unreal C++",
        "The second session will be a practical where we make a FPS Character with weapons and weapon inventory",
        "The third session will cover quick tips and tricks",
        "The forth session will be another practical where we set up a RTS style grid system for building on"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "C++ 101": [
          "Getting Started with C++",
          "Includes and Forward Declaration",
          "Creating Classes",
          "Classes Overview",
          "Variables Overview",
          "Variables In Blueprint",
          "Functions Overview",
          "Theory of Engine, Project, and Plugin Source",
          "Adding Modules to the Build.CS",
          "Organising Code into Folders"
        ],
        "Practical Example 01 - Coding a First Person Shooter Character": [
          "Starting our first practical",
          "Setting up the Project and classes",
          "Adding Components to our Character",
          "Adding Meshes to our Character",
          "Adding Inputs",
          "Adding a Health System",
          "Setting up weapons - Part A",
          "Setting up weapons - Part B",
          "Setting up weapons - Part C",
          "Setting up Automatic Firing",
          "Bullets and Damage - Part A",
          "Bullets and Damage - Part B",
          "Weapon Inventory",
          "Polishing Up",
          "Wrapping Practical 01"
        ],
        "Unreal Code tips, tricks and pitfalls to watch out for": [
          "Renaming Code Projects",
          "Overview of Section 3",
          "Logging",
          "Launching from Windows Debugger Error Msg",
          "Material Interface"
        ],
        "Practical Example 02 - RTS Build Grid System": [
          "Building our own variables - Part A",
          "Building our own variables - Part B",
          "Building our own variables - Part C",
          "Grid System - Part A",
          "Grid System - Part B",
          "Grid System - Part C",
          "Grid Previews - Part A",
          "Grid Previews - Part B",
          "Grid Blueprint Implementation",
          "Summary of practical 02"
        ],
        "Closing Thoughts": [
          "Closing Video"
        ]
      },
      "requirements": [
        "A basic understanding of Unreal Engine Blueprint development will be required.",
        "No prior code knowledge required"
      ],
      "description": "In this series I will be taking you through how to get started using C++ for the Unreal Engine. The course is split into theory first, and then two practical demonstrations, with a small interlude in the middle to cover some quick tips and potential areas of problems. The series is going to explain everything and assumes no prior knowledge to C++ for Unreal.",
      "target_audience": [
        "Unreal Developers looking to explore the C++ side, to learn what it can do for you and how to implement it in your own projects"
      ]
    },
    {
      "already_crawled_in": "development/Data Science",
      "url": "https://www.udemy.com/course/machine-learning-with-unity/"
    },
    {
      "title": "Learn to make a 3D Platformer Game with Unity",
      "url": "https://www.udemy.com/course/unity3dplatformer/",
      "bio": "Game development made easy. Learn C# using Unity and create your very own 3D Platformer!",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Understand the capabilities of 3D development in Unity.",
        "Develop strong and transferrable problem solving skills.",
        "Gain an understanding of the game development process.",
        "Learn how object oriented programming works in practice."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setting Up": [
          "Setting Up Unity",
          "Guide To Unity's Layout",
          "Setting Up Our Scene"
        ],
        "The Player": [
          "First Script",
          "Moving The Player",
          "Jumping",
          "Adding Gravity"
        ],
        "Camera Control": [
          "Moving the Camera with Cinemachine",
          "Rotating the Player with the Camera",
          "Saving Your Scene",
          "Moving based on Camera Rotation"
        ],
        "Improving The Player": [
          "Facing the right Direction",
          "Normalizing Movement",
          "Adding Animation",
          "Fixing Infinite Jump & Adding Jump Animation",
          "Moving with Controller"
        ],
        "Basic Systems": [
          "Hiding the Mouse Cursor",
          "Creating Prefabs to Re-Use Objects",
          "Fixing Gravity When Walking Over Edges",
          "Creating a Killzone",
          "Creating An Instance & Setting Up Respawn",
          "Respawning With Coroutines",
          "Moving Camera on Respawn",
          "Removing Jump Animation Error on Respawn",
          "Setting Up Fade to Black When Respawning",
          "Completing the Fade"
        ],
        "Checkpoints": [
          "Adding Checkpoints",
          "Showing Checkpoint as Activated",
          "Adding Particles To Checkpoints",
          "Turning Off Inactive Checkpoints"
        ],
        "Health System": [
          "Adding a health system",
          "Knocking the Player Backwards",
          "Invincibility & Flashing",
          "Health Pickup",
          "Creating Effects",
          "CHALLENGE - Health Particle Effect",
          "Keeping Prefabs up to date"
        ],
        "UI & Collecting Coins": [
          "Displaying the Player's health",
          "Switching Healthbar Images",
          "Collecting Coins",
          "Animating Coins"
        ],
        "Adding Audio": [
          "Playing Music",
          "Switching Music Tracks",
          "Using Audio Mixer",
          "Playing Sound Effects",
          "CHALLENGE - Add Sound Effects To Objects"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2018 or newer"
      ],
      "description": "Learn how to create and program your very own 3D Platformer game using Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\nFull 3D Character Movement\nAnimating Characters\nState-based Enemy AI\nSaving/Loading Progress\nFully-featured Boss Battles\nComplete Health System\nCollectables\nLevel Select Over-world\nAudio system using Audio Mixer\nMultiple Level Mechanics including unlocking doors, retracting spikes, breaking boxes etc.\nUnity's Cinemachine Camera system\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own 3D games.",
        "People who want to create and publish their own games.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industry.",
        "Competent and confident with using a computer."
      ]
    },
    {
      "title": "Learn To Code by Making Video Games - No Experience Needed!",
      "url": "https://www.udemy.com/course/the-complete-beginners-guide-to-making-games-with-gms-2/",
      "bio": "Start coding today by making games, learning in a fun and engaging way using GameMaker Studio 2",
      "objectives": [
        "Code your own video games",
        "Think like a programmer",
        "Use GameMaker Studio 2 like a pro",
        "Animate sprites",
        "Add music and sound FX",
        "Transition between different game levels",
        "Create a menu",
        "Finish a complete video game"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction"
        ],
        "Getting GameMaker Studio 2 Set Up": [
          "Downloading & Installing GameMaker Studio 2",
          "Setting up GameMaker Studio 2",
          "Running Game Domos",
          "GameMaker 2 & 2.3 Differences"
        ],
        "All About Sprites": [
          "Creating Your First Sprite!",
          "Animating Your Sprite",
          "Importing Sprites From Files",
          "How To Use Sprite Sheets"
        ],
        "All About Objects": [
          "Objects Overview",
          "Object Events",
          "Built-in Properties"
        ],
        "Rooms/Levels": [
          "Rooms Overview"
        ],
        "Learning To Code": [
          "Getting Into The Right Mindset",
          "Your First Line of Code",
          "Variables",
          "If Else Logic",
          "Comments",
          "Reading Errors",
          "Functions Part 1",
          "Functions Part 2"
        ],
        "Your First Game!": [
          "Creating The Game",
          "Planning Our Next Game"
        ],
        "The Player Ship": [
          "Import The Player Ship",
          "Movement",
          "Refining Player Movement",
          "Key Mapping (To Use WASD)",
          "Player Lazers",
          "Sound FX",
          "Thruster FX"
        ],
        "Game Look & Feel": [
          "The Room Settings",
          "Background Music"
        ],
        "The Enemy Ship": [
          "Enemy Movement",
          "Enemy Lazers",
          "Collisions",
          "Destroying The Enemy Ship",
          "Player Death"
        ]
      },
      "requirements": [
        "You want to learn to make video games!",
        "You don't need to know how to code.",
        "No game design experience necessary.",
        "No experience in GameMaker Studio 2 or other software required.",
        "A computer capable of running GameMaker Studio 2"
      ],
      "description": "If you've ever wanted to make a game, or start programming, but have been intimidated by the process, this is the course for you! We're going to make a game from scratch using GameMaker Studio 2 Trial - $0, and 0 experience required.\nThis course will walk you through the basics of game development, game design, programming fundamentals, and more. GameMaker Studio 2 is an awesome engine for creating 2D and 3D games with ease. Throughout this course, you'll learn to use Sprites, create Objects, change Rooms, and create your own Scripts. We'll go step by step, explaining everything along the way.\nThe best part is that, by the end, you'll be ready to create your own games, or branch into software development in general. You'll learn real coding, terminology, logic, and more that will help you be a great programmer and game designer.",
      "target_audience": [
        "Anyone who wants to create video games.",
        "Those who want to learn to code, but are scared to start.",
        "Anyone who wants to learn software development."
      ]
    },
    {
      "title": "Unity 2D Dungeon Gunner Roguelike Development Course",
      "url": "https://www.udemy.com/course/unity-2d-dungeon-gunner-roguelike-development-course/",
      "bio": "Build a sophisticated 2D Roguelike Dungeon Shooter game using the Unity game engine and C# in this intermediate course.",
      "objectives": [
        "Unity 2D Game Development to create a 2D Dungeon Shooter Roguelike game like 'Enter The Gungeon' or 'The Binding Of Isaac'.",
        "Intermediate level course will show you how to build a sophisticated game by creating complex Unity components using C# scripting.",
        "How to build a fully featured, complete game – not just a tech demo.",
        "160+ in depth lectures with over 50 hours of detailed video supported by a full completed project with save points after every lecture.",
        "How to build a dungeon room node editor tool to create node graphs of dungeon room layouts for dungeon levels.",
        "Implement game cameras using Cinemachine and Pixel Perfect components.",
        "How to use layers and sorting layers in a 2D game, and create dungeon room templates using tilemap layers.",
        "Create entire randomized game levels using a dungeon builder algorithm that combines dungeon level node graphs and dungeon room templates.",
        "Create multiple player characters using prefabs, animator controllers and animations.",
        "Implement player movement and weapon aiming, including dodge roll manoeuvres.",
        "Doors which open for the player and lock the player into dungeon rooms while battling enemies.",
        "Dungeon lighting that fades in as dungeon rooms are explored.",
        "How to create object pools and use them in the game to improve game performance.",
        "How to implement multiple weapon and ammo types which are configurable using scriptable objects.",
        "How to implement sound effects in the game using audio sources, audio listeners, and audio mixers.",
        "How to create a Minimap in the game UI to show a zoomed out view of the player and surrounding dungeon rooms.",
        "How to create special effects using particle systems and implement them for weapon shooting and ammo hit effects.",
        "Create multiple enemy types and bosses that you will encounter across the multiple dungeon levels.",
        "Use hidden tilemaps to store grid properties, such as preferred paths for enemies.",
        "Understand how AStar pathfinding works by using algorithms and create an AStar pathfinding system for the game enemies.",
        "Learn how to spawn enemies in dungeon rooms in a configurable and random way using materialize effects.",
        "Implement weapons and ammo for enemies, including ammo patterns and enemy weapon firing AI.",
        "Create health and damage systems for ammo damage and contact damage.",
        "Learn how to implement play across multiple dungeon levels with boss battles, and high scores with accuracy multipliers.",
        "Create items to decorate the dungeon rooms that can take damage and be destroyed.",
        "Learn how to implement tables that can be flipped to provide cover for the player.",
        "Implement Dungeon Chests that the player can loot, that can contain health, ammo and weapons.",
        "Implement a dungeon overview map that the player can use to navigate to rooms they’ve already visited.",
        "Learn how to implement music in the game which is configurable for each dungeon room to play both ambient music and battle music.",
        "Add a Pause Menu to adjust the music and sound effect volume levels, and save the set levels using Player Preferences.",
        "Create a Main Menu for the game with a character selector, high scores table, and game play instructions."
      ],
      "course_content": {
        "Welcome To The Course": [
          "Welcome To The Course"
        ],
        "Preparation": [
          "Unity And Visual Studio Installation",
          "Course Project And GIT Client"
        ],
        "Game Architecture Overview": [
          "Game Architecture Overview"
        ],
        "Project Setup": [
          "Initial Project Creation & Setup",
          "Course Assets Walkthrough"
        ],
        "Dungeon Room Editor": [
          "Dungeon Creation Design Overview",
          "Create A Simple Editor Window",
          "Room Node Graphs and Room Nodes Overview",
          "Creating A Room Node With The Editor",
          "Dragging Room Nodes In The Editor",
          "Connecting Lines Between Room Nodes",
          "Entrance Node and Selected Node Style",
          "Room Node Connections Validation",
          "Selecting All Room Nodes",
          "Deleting Rooms and Connections",
          "Drag Canvas & Draw Canvas Grid",
          "Create Dungeon Layout Room Graphs"
        ],
        "Main Game Scene Set-Up": [
          "Cinemachine And Pixel Perfect",
          "Create The Main Game Scene"
        ],
        "Dungeon Room Templates": [
          "Layers And Sorting Layers",
          "Create Base Dungeon Room Template",
          "Tilemaps, Tiles, Palettes, and Brushes",
          "Creating Our First Dungeon Room",
          "Creating Our First Corridors",
          "Store Details About Room Tilemaps",
          "Import Dungeon Room Assets",
          "Create Scriptable Objects For Rooms",
          "Tilemap Tidy Up"
        ],
        "Dungeon Builder": [
          "Dungeon Builder Demo",
          "Dungeon Builder Concepts",
          "Dungeon Levels",
          "Create Singleton Abstract Class",
          "Create The Game Manager",
          "Create The Room Classes",
          "Shader Graph Dungeon Light Shader",
          "Dungeon Builder Placing Rooms",
          "Instantiate Dungeon Room Tilemaps",
          "Block Off Unused Doorways"
        ],
        "Initial Player Set Up": [
          "Initial Player Classes",
          "The Player Prefab",
          "The Thief Player Prefab Variant",
          "Set Up The Thief Animations",
          "Set Up The General Character Prefab",
          "Set Up The Scientist Prefab",
          "Disable Weapon During Thief Roll",
          "Instantiate Player In Dungeon"
        ],
        "Player Movement & Control": [
          "Publishers, Subscribers, And Events",
          "Player Idle And Aim Weapon",
          "Custom Screen Cursor",
          "Player Movement",
          "Player Dodge Roll",
          "Cinemachine Target Group"
        ]
      },
      "requirements": [
        "*** PLEASE DON'T BUY THIS COURSE IF YOU ARE AT A BEGINNER LEVEL! This course doesn’t cover C# and Unity basics. The last thing I want is for you to be frustrated and leave a negative review because you don’t have the required basic knowledge to follow the lectures. This is an intermediate course and you need the required skills listed below. I of course would love you to enrol in the course, but if you don’t have these skills start with some beginner courses and then come back once you have built a few games and have a good level of knowledge of C# and Unity. ***",
        "THIS IS AN INTERMEDIATE LEVEL COURSE. You should have Intermediate Unity Development Skills - and built a few Unity prototypes or games before.",
        "Good knowledge of the Unity editor, and how to use it's main features.",
        "Good knowledge of C# scripting and the fundamentals of object oriented programming.",
        "Good knowledge and understanding of some of the main Unity API classes and C# system classes.",
        "The willingness to look up anything you are not familiar with in the Unity scripting manual or C# resources online.",
        "Install the free Unity 3D game engine software and Visual Studio Community Edition.",
        "Install the free SourceTree git client to help follow along with the provided completed Unity project and the branches that correspond to completed lectures."
      ],
      "description": "Have you ever wanted to build a 2D Roguelike game using the Unity game engine like 'Enter The Gungeon' or 'The Binding of Isaac'?\nWell with this course you can!\nThe course and underlying project have taken several thousand hours to develop, but all that knowledge will be transferred to you step by step, lecture by lecture. The course is massive with over 50 hours of detailed video tutorials spread over more than 160 lectures. This has to be one of the most complete and sophisticated Unity 2D development courses available.\nWe’ll take you through every line of code and every configuration step, from a blank Unity project to a fully functional and complete game. The game is built in a modular and expandable way, and uses best practice coding techniques like events to decouple the interdependencies in the code. The project has been built under GIT source control, so you can easily load the supplied completed course at a save point for every lecture.\nThe game is sophisticated, and goes far beyond what most Unity courses will ever attempt to teach you. The course covers :\n\n\nCreating a node editor tool to build dungeon level layouts\nProcedural random dungeon generation\nMultiple game levels\n2D lighting using the Unity Universal Render Pipeline\nA UI minimap\nA dungeon overview map with player teleporting\nMultiple player characters\nA range of weapons and ammunition types\nMultiple enemy characters\nParticle system special effects\nShader graph material effects\nAStar enemy pathfinding\nEnemy weapon firing AI\nEnemy ammo patterns\nLootable Chests\nFlippable tables for cover\nSound effects\nand Game music\nThis is just a selection of what you’ll learn, and all the assets you’ll need to complete the course and produce a fully functional and polished game are included. The concepts you’ll learn will help you create your own game that you can tailor to match your game development vision.\nSo fasten your seatbelts and prepare yourself for a Unity game development journey like no other, and at the end of this course I’m confident that your Unity game development skills will be levelled up, and that you’ll be able to create better and more sophisticated games on your own.\nSo why not join me in this course, and build your own Dungeon Gunner 2D Roguelike in Unity. I really hope you do, and I look forward to seeing you in the course.",
      "target_audience": [
        "Intermediate Unity Developers who want to extend their skills and knowledge using a full project based course.",
        "Existing Unity developers who are fans of Enter The Gungeon or The Binding Of Issac and want to build their own 2D Roguelike dungeon shooter.",
        "A Unity developer who has previously built some prototypes or games and wants a challenging project course to level up their skills."
      ]
    },
    {
      "title": "Learn how to create a 2D Tower Defense Game in Unity",
      "url": "https://www.udemy.com/course/learn-how-to-create-a-2d-tower-defense-game-in-unity-2020/",
      "bio": "Learn Unity and C# and create your first 2D Tower Defense Game",
      "objectives": [
        "Learn how to create a Tower Defense Game",
        "Build a solid foundation for game design and game development that will help you build your own games.",
        "How to use Events",
        "Use of Scriptable Objects",
        "Learn how to create a 2D Game in Unity",
        "Understand how the relationship between classes works",
        "How to share data",
        "How to Create User Interface (UI)"
      ],
      "course_content": {
        "Introduction": [
          "Course Video",
          "Important Notes",
          "Join Our Discord Community!"
        ],
        "Project Setup": [
          "Create Project and Required Files",
          "Files"
        ],
        "Spawner": [
          "Introduction",
          "Waypoint Class",
          "Waypoint Editor",
          "Spawner Class",
          "Object Pooler",
          "Section 3 Project"
        ],
        "Enemy": [
          "Introduction",
          "Create Enemies",
          "Move Enemy",
          "Enemy Reach Final Position",
          "Spawn new Enemies",
          "Enemy Waves",
          "Enemy Health",
          "Enemy Killed Event",
          "Enemy Animations",
          "Enemy Rotation",
          "Section 4 Project"
        ],
        "Turrets": [
          "Introduction",
          "Create Turrets",
          "Rotate Towards Enemy",
          "Turret Projectiles",
          "Damage Enemy",
          "Show Damage Amount",
          "Singleton Pattern",
          "Create More Turrets",
          "Create Machine Turrets",
          "Create Tank",
          "Machine Projectile",
          "Section 5 Project"
        ],
        "Upgrade Turrets": [
          "Introduction",
          "Upgrade Class",
          "Currency System",
          "Create Prefabs",
          "Section 6 Project"
        ],
        "Map": [
          "Introduction",
          "Create Map with Rule Tile",
          "Challenge: Create your Map",
          "Section 7 Project"
        ],
        "Place Turrets": [
          "Introduction",
          "Create Turrets Panel",
          "Load Turrets",
          "Place Turrets",
          "Upgrade Turret on Node",
          "Sell Turrets",
          "More UI",
          "Sell Value",
          "Section 8 Project"
        ],
        "Achievements": [
          "Introduction",
          "Create Achievements UI",
          "Achievements ScriptableObjects",
          "Load Achievements",
          "Add Progress",
          "Unlock Achievements",
          "Section 9 Project"
        ],
        "Finishing Project": [
          "Spawn Multiple Enemies",
          "Add Game Speed Controls",
          "Game Over Panel"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 2020 or older.",
        "A passion and willingness to learn how to code.",
        "Basic familiarity with the Unity interface"
      ],
      "description": "Learn how to create your first Tower Defense Game in Unity!\nDo you want to learn how to create a Tower Defense in Unity? Have you ever wanted to learn how to create from scratch one of these games? Tower Defense games are very popular on Android, iOS, and PC. In this course I will explain everything you need to be able to create one of these games, together we will create this game from scratch, implementing new features as we advance.\nWe will start with an empty project, where we will implement all the packages we need to create the game, and we are going to discuss what we need to create one of these amazing games.\nThe course will cover some important aspects of Tower Defense Games, like the creation of Spawners to show enemies, adding Object Pooling to increase the performance, working with the Singleton Pattern to communicate between classes, etc.\nThis course covers all the basics you need to create a Tower Defense Game from scratch, at the end of the course, you will have the final project ready to be downloaded.\nThings you will learn:\nCreate Path System\nCreate a Spawner\nCreate Enemies\nCreate Movement\nCreate Towers\nCreate Projectiles\nGood programming practices\nWork with Managers\nCreate Singleton Pattern\nCreate Object Pooler\n\n\nLet´s start making games!",
      "target_audience": [
        "Beginner and Intermediate users who want to learn to create a Tower Defense Game",
        "Anyone who wants to crate a cool 2D game.",
        "Unity users",
        "Students with passion about making games"
      ]
    },
    {
      "title": "Unity 5 Professional Guide - Develop a 2D Arkanoid Game!",
      "url": "https://www.udemy.com/course/unity-professional-guide/",
      "bio": "Think, Understand and Develop a 2D game from scratch on Unity 5. Learn about Transformations, Physics, UI and much more!",
      "objectives": [
        "Master a set of Unity functions that will allow you to create your own games;",
        "Break down a huge problem (a game) into a set of smaller steps to be solved one at a time;",
        "Determine the more efficient and friendly approach to solve a problem."
      ],
      "course_content": {
        "Introduction": [
          "Getting to know the project, pre-requisites and what you'll learn!"
        ],
        "Creating a Breakout-like Game!": [
          "Importing the assets (attached as resource) and creating the prefabs",
          "Moving the bush plant (our controllable character)",
          "Moving the character using keyboard",
          "Coding the physical limits of our scenario",
          "Adding the apple (our co-character)",
          "Coding where the apple can't go",
          "Destroying the planks we hit",
          "Creating groups of planks: The math behind it",
          "Creating groups of planks: Coding part 1",
          "Creating groups of planks: Coding part 2",
          "Defining the movement limits dynamically",
          "Creating our particles: The leaves",
          "Creating our particles: The broken wood bits",
          "Adding the particles in real time",
          "Using Mecanim to animate the platform",
          "Understanding the Unity User Interface System",
          "Creating the Game Over Menu: Part 1",
          "Creating the Game Over Menu: Part 2",
          "Creating the Main Menu",
          "Adding sounds",
          "Final Quiz!"
        ],
        "Farewell": [
          "Congratulations & I see you soon!",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A basic knowledge of C#;",
        "A basic knowledge of Unity3D;",
        "A copy of Unity 5.x installed (don't worry, it's free!)"
      ],
      "description": "In this course you'll think, understand and implement a complete working game on Unity3D. This course is designed for those who have at least a basic knowledge of C#, as we won't go through defining each feature of the language. Also, it would be good if you were comfortable with the Unity 5.x interface. If you're not familiar with these two items, you better off with my first course, which will teach you C# and Unity.\n\nEverything that was used throughout the course (including scripts and the working project) is included as a resource on lecture #2, so I got you covered!\nThe course starts by giving an introduction of how the game works and what kinds of systems we'll have to implement to make it work flawlessly, which should take around 4 hours.\nIf you're tired of code-alongs with no explanation whatsoever, this is the course for you, as I actually teach and explain every single line I'm writing. I'll also explain all the decisions that were made to make the game work as it is, so you can be assured you'll have the best game development instructor you could ask for.",
      "target_audience": [
        "If you are familiar with C# and have at least a basic knowledge of how coding works, you're good!",
        "If you don't know how to use Unity nor what a script is, you better start with my other course instead."
      ]
    },
    {
      "title": "Unreal Engine 5 Survival Framework – Multiplayer Game Dev",
      "url": "https://www.udemy.com/course/unreal-engine-5-survival-framework-multiplayer-game-dev/",
      "bio": "Build a multiplayer survival framework using Blueprints, networking, and modular design in Unreal Engine 5.",
      "objectives": [
        "Game Architecture & Setup – Learn how to properly structure a multiplayer survival game, from initial project setup to core gameplay mechanics.",
        "Blueprint Visual Scripting – Master Unreal Engine’s powerful visual scripting system, including functions, macros, interfaces, and variables.",
        "Multiplayer & Networking – Implement multiplayer features using Unreal Engine’s networking system, ensuring seamless online gameplay.",
        "Game Optimization & Performance – Improve game efficiency by optimizing Blueprints, assets, and networking components.",
        "Quizzes – Test your knowledge with engaging quizzes.",
        "Comprehensive Gameplay Systems – Implement crucial features like:",
        "Locomotion & Movement – Smooth player movement and navigation.",
        "Footstep System – Dynamic sound effects based on terrain.",
        "Menu & UI – Create intuitive interfaces for seamless user experience.",
        "Interaction System – Implement mechanics for object interaction.",
        "Replication Subsystem – Ensure smooth multiplayer synchronization.",
        "Survival Mechanics & Progression – Develop essential survival game features:",
        "Attribute Manager – Manage player stats like health, stamina, and hunger.",
        "Respawn System – Handle player deaths and respawning mechanics.",
        "Inventory System – Implement an organized inventory for item management.",
        "Crafting & Equipment – Build crafting mechanics and equipable gear.",
        "Building System – Allow players to construct structures in the world.",
        "Combat & AI – Enhance your survival game with:",
        "Combat Framework – Develop engaging combat mechanics.",
        "Ragdoll System – Add realistic physics-based character reactions.",
        "Basic AI – Create intelligent NPC behaviors for immersive gameplay.",
        "Environmental Interaction & Gameplay Depth – Add engaging world interactions:",
        "Choppable Trees – Implement resource gathering through environmental destruction."
      ],
      "course_content": {
        "Getting Started": [
          "Introduction - Scope",
          "Introduction - Course Outline",
          "Introduction - Example Project",
          "Introduction - Who am I",
          "Quiz - Getting Started - Survival Course Framework"
        ],
        "Architecture": [
          "Intro",
          "Systems",
          "Data flow",
          "Abstract Classes and Dynamic Dispatching - Intro",
          "Abstract Classes and Dynamic Dispatching - Generic Explanation",
          "Abstract Classes and Dynamic Dispatching - Use of Macros to access Abstract Comp",
          "Quiz - Abstract Classes and Dynamic Dispatching"
        ],
        "Project Setup": [
          "Intro",
          "Create Project",
          "Settings - Engine Settings",
          "Settings - Project Settings",
          "Settings - Plugins",
          "Settings - Refresh All Nodes",
          "Custom Classes",
          "Quiz - Project Setup"
        ],
        "Map": [
          "Intro",
          "Intro - Result of this chapter",
          "Landscape - Add Landscape",
          "Landscape - Heightmap Generators",
          "Landscape - Importing Heightmap",
          "Landscape - Centering the map",
          "Auto Landscape Material - Intro",
          "Auto Landscape Material - Folders",
          "Auto Landscape Material - Slope Mask",
          "Auto Landscape Material - BlendOnHeight",
          "Auto Landscape Material - Macro Variation",
          "Auto Landscape Material - Material Master",
          "Auto Landscape Material - Getting Meshes and Materials",
          "Auto Landscape Material - Finalizing Landscape Master Material",
          "Auto Landscape Material - Adding Grass Foliage",
          "Auto Landscape Material - Outro",
          "Ambiance - Post process Lightning Fog Clouds Skylight",
          "Water - Adding Water Volume",
          "Example Assets - Sources",
          "Example Assets - Placing Assets",
          "Example Assets - Background Sound",
          "Quiz - Map"
        ],
        "Locomotion": [
          "Intro",
          "Intro - Result of this chapter",
          "Character - Importing Custom Character",
          "Character - Drive Animation of Default UE Character",
          "Extended Movement Component - Intro",
          "Extended Movement Component - Creating Input Mappings and Input Actions",
          "Extended Movement Component - Creating the InputMapping function and Actor Compo",
          "Extended Movement Component - Adding Disable Movement Boolean",
          "Extended Movement Component - Montages and Animation Sequences",
          "Sources - Mixamo Lyra and More",
          "Quiz - Locomotion"
        ],
        "Dynamic Footstep System": [
          "Intro",
          "Intro - Result of this chapter",
          "Preparations - Physical Surfaces",
          "Preparations - Sounds",
          "Animation Notify",
          "Footstep Component - Preparing Footstep Component",
          "Footstep Component - Trace function",
          "Footstep Component - Spawn Sound",
          "Landscape Physical Material Output"
        ],
        "Menu": [
          "Intro",
          "Intro - Result of this chapter",
          "Preparations - Plugin and UI Files",
          "Preparations - Button and Text Styles",
          "Preparations - Menu Map and adding UI",
          "Preparations - Open In-Game Menu",
          "Reuseable Widgets - Buttons",
          "Reuseable Widgets - Confirm Dialogue",
          "Main Menu - Setting Widget",
          "Main Menu - Options",
          "Main Menu - Main Menu Widget",
          "Main Menu - In-Game Menu Widget"
        ],
        "Replication Subsystem": [
          "Intro",
          "Intro - Result of this chapter",
          "Replication Component - Animation",
          "Replication Component - Sound"
        ],
        "Interaction System": [
          "Intro",
          "Intro - Result of this chapter",
          "Preparations - Creating the Components",
          "Preparations - Custom Collision Channel",
          "Preparations - Interact Interface",
          "Preparations - Example Interaction Objects",
          "Preparation - Interaction Input Mapping",
          "Interaction Component - Interaction Trace",
          "Interaction Component - Interaction Trace Function",
          "Interaction Component - Turning on Off Lights",
          "Interaction Component - Try Interact Function and finishing up"
        ],
        "Attribute Manager": [
          "Intro",
          "Intro - Result of this chapter",
          "Preparations - Creating Attribute Components and set Variables",
          "Preparations - Component Macro",
          "UI - Progressbar",
          "UI - Progressbars in HUD",
          "UI - Bind Values from component to UI",
          "Update Non Persistent Attributes - Change by Amount",
          "Update Non Persistent Attributes - On Change Health Hydration and Food",
          "Update Non Persistent Attributes - On Damage",
          "Update Non Persistent Attributes - Update on Timer"
        ]
      },
      "requirements": [
        "Able to listen and read in English",
        "A PC that can run UE5",
        "It is assumed that you have a basic understanding of Unreal Engine 5 and programming experience. If not, please check out the UE5 Basics Course."
      ],
      "description": "Master Multiplayer Survival Game Development in Unreal Engine 5\nDo you want to create your own multiplayer survival game? This course will guide you through every step of the process, from designing the game structure to implementing complex mechanics using Unreal Engine 5’s Blueprint system. Whether you're a beginner or an experienced developer looking to enhance your skills, this course will provide you with the knowledge and tools to build a fully functional multiplayer survival game.\nWhat You’ll Learn\nGame Architecture & Setup – Learn how to properly structure a multiplayer survival game, from initial project setup to core gameplay mechanics.\nBlueprint Visual Scripting – Master Unreal Engine’s powerful visual scripting system, including functions, macros, interfaces, and variables.\nMultiplayer & Networking – Implement multiplayer features using Unreal Engine’s networking system, ensuring seamless online gameplay.\nGame Optimization & Performance – Improve game efficiency by optimizing Blueprints, assets, and networking components.\nQuizzes – Test your knowledge with engaging quizzes.\nComprehensive Gameplay Systems – Implement crucial features like:\nLocomotion & Movement – Smooth player movement and navigation.\nFootstep System – Dynamic sound effects based on terrain.\nMenu & UI – Create intuitive interfaces for seamless user experience.\nInteraction System – Implement mechanics for object interaction.\nReplication Subsystem – Ensure smooth multiplayer synchronization.\nSurvival Mechanics & Progression – Develop essential survival game features:\nAttribute Manager – Manage player stats like health, stamina, and hunger.\nRespawn System – Handle player deaths and respawning mechanics.\nInventory System – Implement an organized inventory for item management.\nCrafting & Equipment – Build crafting mechanics and equipable gear.\nBuilding System – Allow players to construct structures in the world.\nCombat & AI – Enhance your survival game with:\nCombat Framework – Develop engaging combat mechanics.\nRagdoll System – Add realistic physics-based character reactions.\nBasic AI – Create intelligent NPC behaviors for immersive gameplay.\nEnvironmental Interaction & Gameplay Depth – Add engaging world interactions:\nChoppable Trees – Implement resource gathering through environmental destruction.\nBy covering all these essential survival game elements, you'll gain the skills to create a fully functional multiplayer survival experience in Unreal Engine 5.\nWhy Take This Course?\nBest Modular Approach – Learn how to develop a structured, modular survival game that allows for easy expansion and flexibility. Build only the components you need for an efficient development process.\nHigh-Quality, Organized Code – Avoid spaghetti code. This course emphasizes well-structured, clear Blueprints and a segmented approach to game development, making it easy to manage and scale.\nProven Track Record – Built upon industry best practices, the techniques taught in this course reflect a reliable and adaptable development approach used by professionals.\nRobust & Reliable Systems – Gain insights into designing game mechanics with flexibility, maintainability, scalability, compatibility, usability, and performance in mind.\nHands-On Learning with Real-World Applications – Apply everything you learn directly to a real multiplayer survival game project.\nThis course is designed to be accessible yet in-depth, making it ideal for both newcomers and those looking to refine their Unreal Engine skills. By the end of this course, you will have a strong, modular, and scalable foundation for your multiplayer survival game, ready to expand and refine.\nJoin now and start building your own multiplayer survival game today!\nGreetings,\nEric Ruts\nCompany Lead of Games by Hyper",
      "target_audience": [
        "Intermediates which would like to get a refresher and learn tips and tricks which they probably did not know off.",
        "Aspiring Game Developers",
        "Game developers whom want to understand the core principles of building a survival game framework."
      ]
    },
    {
      "title": "Learn to Program & Model Procedural Cities in Unity/Blender",
      "url": "https://www.udemy.com/course/procedural-cities-in-unity-blender/",
      "bio": "Your guide to understanding procedural construction of buildings and city maps for games and virtual environments",
      "objectives": [
        "Explain the nature of 3D space and producing a grid for displaying and snapping 3D models together.",
        "Identity several procedural algorithms that can be applied to generate virtual city maps.",
        "Apply fractal and dynamic methods to algorithmically generate buildings and cities.",
        "Create a bespoke procedurally generated city map complete with districts, population densities and vegetation."
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Join the H3D Student Community",
          "Contacting H3D",
          "FAQs",
          "Setting up Pathfinding in Unity",
          "Updating to Unity 6"
        ],
        "Part A: Modelling The Basics": [
          "Section Intro",
          "Getting Blender 3.0",
          "My Blender Configuration",
          "Placeholders",
          "Setting Your World Scale",
          "Planning Your Pieces",
          "Exporting Using a Script",
          "Exporting Manually",
          "Modelling Roads",
          "Modelling Roads Challenge",
          "Modelling Basic Static Buildings",
          "Modelling Buildings Time-Lapse",
          "Quick Tip - Origins",
          "Quick Tip - Normals",
          "Section Wrap Up"
        ],
        "Part A Designing Better Buildings": [
          "Section Intro",
          "Wider Roads - Why Placeholders Are Important",
          "Smooth Shading & Mesh Data Normals",
          "Blocking Out Detail",
          "Extra Extruding Options",
          "Quick Tip - Custom Transformations",
          "Quick Tip - Using An Edge Bevel",
          "Have You Checked Your Organisation?",
          "Boolean Cuts",
          "Finish Off Your Detail Pass",
          "Section Wrap Up"
        ],
        "Part A: Modular Thinking": [
          "Section Introduction",
          "Modular Thinking",
          "Origins Are Critical",
          "Making Pieces More Flexible",
          "Focusing on Faces",
          "Covering Up Joints",
          "Checking Scales",
          "Quick Tip - Undoing Scale",
          "Finishing Off The Detail",
          "Exporting And Testing",
          "Programmatic Construction - The Array Modifier",
          "Controlling The Array Modifier's Object Offset",
          "Constructing Our Basic Apartment Block",
          "Adding The Roof",
          "Introducing Drivers",
          "Linking It All Together With Drivers",
          "The Odd Bit At The Bottom",
          "Extra Decorations",
          "Preparing For Export",
          "Section Wrap Up"
        ],
        "Part A: Procedural Construction": [
          "Section Introduction",
          "Getting Geometry Nodes Set Up",
          "Adding Primitives",
          "Transforming",
          "Control Using Values",
          "Quick Tip - Inputs",
          "Simple Math Controls",
          "Node Groups",
          "Quick Tip - Framing",
          "Quick Nodes Tips",
          "Practice Time - A Little Procedural Toy",
          "Appending Collections",
          "Instance On Points",
          "The Object Info Node",
          "Constructing a Basic Procedural Building",
          "Creating A Second Level Type",
          "The Collection Info Node",
          "S4-16 Creating A Roof",
          "Quick Tip Assigning Materials",
          "Exporting Models Made With Geometry Nodes",
          "Section Wrap Up"
        ],
        "Part B: Grid Based Layouts": [
          "Generating a Grid",
          "Adding Straight Roads",
          "Dead Ends and Corners",
          "Crawling Out A City Plan",
          "Crawling Redesigned",
          "Crawling Around Corners",
          "Crawling Straight Ahead",
          "Removing Duplicate Roads",
          "Replacing Intersections with T-Junctions and Crossroads Part 1",
          "Replacing Intersections with T-Junctions and Crossroads Part 2",
          "Replacing Intersections with T-Junctions and Crossroads Part 3",
          "Replacing Intersections with T-Junctions and Crossroads Part 4"
        ],
        "Part B: Adding Houses": [
          "Allowing for Road Collisions",
          "Placing Houses",
          "Placing Houses Only Near Roads",
          "Rotating Buildings to Face the Road",
          "Adding More Buildings and Artifacts",
          "Mapping the City",
          "Adding Grid Fillers",
          "Combining Meshes",
          "Improved Combining Meshes"
        ],
        "Part B: Districts and Zoning": [
          "Organised Randomness",
          "Fractal Brownian Motion",
          "Population Densities with Perlin",
          "Voronoi Diagrams Part 1",
          "Voronoi Diagrams Part 2",
          "A Test City and New MeshUtils",
          "Using Perlin for Population Density",
          "Using Voronoi for City Districts"
        ],
        "Part B: Advanced Building Placement": [
          "Zoning",
          "Building Residences in Residential Areas",
          "Placing Larger Buildings",
          "Integrating Perlin Noise for Density",
          "Refactoring Building Progress",
          "Confining Building Boundaries",
          "Oops I did it again"
        ],
        "Part B: Parks and Recreation": [
          "Zoned Trees",
          "Using Perlin for Tree Heights",
          "Perlin Noise for Tree Positions",
          "Park Adding Challenge",
          "DeadEnds",
          "Properly Fixing City Road Map"
        ]
      },
      "requirements": [
        "Knowledge of Blender and/or Unity required.",
        "A Working Knowledge of C# in Unity (For Part B)"
      ],
      "description": "Procedural generation in games and virtual environments lends itself to the algorithmic generation of infinitely unique computer-created experiences. Its potential lies in its ability to automatically develop digital content on demand, reducing the amount of work required by programmers and modellers. However, a lot of preparation is necessary for such a strategy to be implemented.  A thorough understanding of the role that both sides of the game development coin (technical/logic and art/design) plays in procedural generation is key for a successful implementation. In this course, Penny and Mike bring a unique experience to both programmers and artists alike and combine their skills and many years of industry and academic knowledge to bring you a holistic learning experience, in which you will find content and invaluable mastery.\nThis course uses Unity 2020.3 and Blender 3.0 and is Windows and Mac compatible.\nThe content has been tested and works with Unity 6.\nThe content is presented in two parts which can be studied in any order, independently or together.\nIn Part A, Mike will be taking you through a series of stages, starting with blocking out your city with simple placeholders, a critical design step often overlooked. Taking those placeholders we add a little extra detail to start bringing the city to life and map out the road system properly. Once that warm-up is out of the way, Mike will start focusing on thinking in a more modular manner by looking at the fundamental building blocks required to make our assets. Then finally, we will move from placing the pieces manually to placing them automatically, first with Blender's Modifier Stack and finally completely procedurally using Blender 3.0's new Geometry Node system.\nIn Part B, Penny will begin by taking you through a variety of workshops using the Unity game development engine, to teaching you how to manipulate and position road models on a plane to create a city street map.  Following this, algorithms will be worked through to create data structures to store city information and populate the city with residential, commercial, and industrial buildings.  The commonly used algorithms for Voronoi Diagrams and Perlin Noise will be employed to calculate city zones and city population densities.\nBy the end of this course, you will have a professional toolkit of programming and modelling skills that will give you the advantage over others who are \"just programmers\" or \"just modellers\", including knowledge of multiple procedural techniques that can be employed in both Unity and Blender. Understanding game development that tightly integrates both design and logic from this standpoint is critical to making you a valuable commodity in the job market or preparing you for running an indie operation.\nWhat others are saying about Penny's courses:\nI do like Penny de Byl's courses and way of teaching, they are much more specific than your average \"master Unity\" kind of courses and usually, you don't learn just the engine but also how things work behind the scenes. She's really amazing!\nI've been coding for about 3 years and since purchasing Penny's \"Animation\", and \"Procedural Terrain\" courses, the excitement and fun have returned once again to my programming.\nPenny and her team know their stuff and are just amazing in explaining everything, breaking it down. Most importantly she challenges you to do stuff on your own rather than just \"spoon-feeding\" you everything. Then she comes back and shows you one way of doing it. Just an amazing course!!!\nWhat others are saying about Mike's courses:\nI've used Blender for a number of years, but I'm a total novice next to Mikey and I've learned so very much from him here!\nMikey is an amazing teacher, I can't praise this course highly enough. Worth every penny.\nMikey is a talented, thorough, and clear instructor, and he knows how to make the student think 'for themselves', which is such a great experience.",
      "target_audience": [
        "Intermediate programmers and 3d artists interested in exploring procedural generation."
      ]
    },
    {
      "title": "Creating Real Time Hair for Game Characters [Beginner]",
      "url": "https://www.udemy.com/course/realtimehairforgames/",
      "bio": "Learn how to easily create QUALITY realistic hair/fur textures under MINIMAL efforts.",
      "objectives": [
        "Create game ready realistic hair texture.",
        "Learn how to use Xgen to create stunning industry standard character hair.",
        "You will learn the proper workflow & techniques on using haircards.",
        "Learn to use industry standard softwares to create quality fast results with less efforts."
      ],
      "course_content": {
        "Creating Real Time Hair for Games": [
          "Welcome! xD",
          "Overview & Softwares",
          "Creating Your First Hair Description [+References]",
          "XGEN Summary & Helpful Links",
          "Finishing All Hair Description ft. Xgen",
          "Hair tips & Exporting Mesh",
          "Tips, Warnings & Resources",
          "Finalizing Xgen Hair Textures ft. SP",
          "Laying Out Hair Pt. 1 [Setting Up]",
          "Laying Out Hair Pt. 2 [Haircards]",
          "Laying Out Hair Pt. 3 [Haircards]",
          "BONUS: Rendering Character ft. SP",
          "What's Next? (bonus lecture)"
        ]
      },
      "requirements": [
        "Basic knowledge of Maya & Substance Painter (navigations)"
      ],
      "description": "In this course I will teach you how to create the AAA standard character hair. We will start from scratch so don't worry too much about being left out. Whether it be furs or actual character hair I got you covered.\n\n\nIn this course, you will learn & have answers to the following questions:\n- How do I properly put hair cards so they don't look flat and fake?\n- How do I create realistic game ready hair textures super quickly but with max quality?\n- How do I lay my Uvs and apply my textures properly so I'm not messing up anything?\n- How can I make it seem like my hair texture has volume?\n- How can I make this hair look more realistic?\n- How do I use \"Xgen,\" Disney's and Blizzard's go to for beautiful hair & apply that to my own artworks?\n\n\nKeep in mind this course is targeted for beginners who are a tiny bit familiar with Maya and Substance Painter. If you aren't, no worries. What I mean by familiar is knowing basic controls of the softwares like panning, zooming etc. Anyway, goodluck and I hope you learn something valuable from this course. You don't need to be a senior artist or an expert to be able to achieve great results! Come join my class, I got you fam.",
      "target_audience": [
        "Anyone who wants to learn the fundamentals of hair creation for games",
        "Anyone who struggle on creating their own textures for hair",
        "Anyone who wish to create realistic looking hair under AAA quality & standards."
      ]
    },
    {
      "title": "Game Physics - Introducing Gravitation & Rotation in Unity",
      "url": "https://www.udemy.com/course/gamephysics/",
      "bio": "Step-by-step tutorial on how to create a basic rigid body motion physics from scratch. Taught in C# using Unity 3D free.",
      "objectives": [
        "Translate new laws of physics to code.",
        "Understand how game engine physics works.",
        "Extend the capabilities of Unity 3Ds physics engine.",
        "Transfer this knowledge to other game engines."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Promo Video",
          "Are You Ready For This?",
          "Welcome To The Course",
          "Installing Unity 3D",
          "Section Summary",
          "Section End QUIZ"
        ],
        "Newtons Laws of Motion": [
          "Introduction To Section 2",
          "Section 2 Assets",
          "Section Notes PDF",
          "Newton's 1st Law",
          "Summing The Forces",
          "Newton's 2nd Law",
          "Newton's 3rd Law",
          "Physics Engine Architecture",
          "Mid Section QUIZ",
          "DOWNLOAD Unity Project",
          "SI Units & Dimensions",
          "Rocket Science 101",
          "Modelling Gravity",
          "Back Down To Earth",
          "Air Resistance",
          "Script Execution Order",
          "Making A Simple Game",
          "Finishing & Tidying Up",
          "Section 2 Wrap-Up",
          "Section End QUIZ"
        ],
        "Simple Rotation": [
          "Introduction To Section 3",
          "Section 3 Assets",
          "Section Notes",
          "Unstable Rotation In Unity 5",
          "Introducing Inertia Tensors",
          "Calculating Moment Of Inertia",
          "Parallel Axis Theorem",
          "“Newton’s Laws Of Rotation”",
          "Applying Torque To Rigidbodies",
          "Vector Cross Products",
          "The Magnus Effect",
          "Section 3 Wrap-Up"
        ],
        "Making Contact": [
          "Introduction To Section 4",
          "Your Section 4 Assets",
          "Your Section Notes",
          "An Overview Of Friction",
          "Static Friction & Critical Angle",
          "Make A Friction Test Rig",
          "Friction Combine In Unity",
          "About Dynamic Friction",
          "How Friction Direction 2 Works",
          "Wrap-up & Next Steps"
        ]
      },
      "requirements": [
        "You need to be comfortable with Unity 3D",
        "You need to be comfortable with C# scripting.",
        "You should be able solve basic algebra equations."
      ],
      "description": "Learn to build your own game physics engine. By the end of this mini-course course you will have gained confidence in translating theories of physics into working game code.\nI will be teaching using Unity 3D free as the example game engine. I expect you to have some experience with both Unity 3D, and C# before starting this course. If you don't then check out my Complete Unity Developer course.\nWhy would you take this course?\nTo understand game physics better.\nPractice creating your own physics components.\nImprove your knowledge of Newtons Laws of Motion.\nNote: We are no longer actively supporting this course, however if we do revisit this subject in the future then students on this course will get the updated content.\nAccess to this course does come with an optional, free community site where you can share games and 3D models, as well as connect with other students.\n\nSee you in there!",
      "target_audience": [
        "This course is ideal for you if you're running into the limits of your game engine's physics.",
        "If you are not confident in how your game engine's physics works \"under the hood\", this course will give you that insight.",
        "This course is probably not for you if you're a physics PhD, who is already confident in coding!"
      ]
    },
    {
      "title": "The Ultimate Guide to making a 2D strategy game in Unity",
      "url": "https://www.udemy.com/course/the-ultimate-guide-to-making-a-2d-strategy-game-in-unity/",
      "bio": "Game development & Game art/animation. Create a 2D turn by turn strategy game using Unity 2019, C# and Ps/Gimp.",
      "objectives": [
        "Create a local multiplayer 2D strategy game in Unity",
        "Understand on a deeper level the C# fundamentals",
        "Create 2D game art",
        "Animate 2D characters in Unity",
        "Make UI and sound effects",
        "Code tile based movement",
        "Code an attack/defense system",
        "Code a turn by turn system",
        "Buy & place units on a battlefield"
      ],
      "course_content": {
        "HOW TO USE THIS COURSE": [
          "Course Introduction",
          "How to use This course",
          "How to use this course LINKS"
        ],
        "THE FOUNDATIONS": [
          "Section Introduction",
          "Creating the Battlefield",
          "Setting Up the Tiles",
          "Drawing the First Character",
          "Animating the Character",
          "Moving the Character on the Battlefield P1",
          "Moving the Character on the Battlefield P2"
        ],
        "ADDING A SECOND PLAYER": [
          "Section Introduction",
          "Creating a Second Character",
          "Turn Switching System",
          "Adding Little Details"
        ],
        "ATTACKING SYSTEM": [
          "Section Introduction",
          "Programming the Attacking System P1",
          "Programming the Attacking System P2",
          "Making the Attack More Juicy P1",
          "Making the Attack More Juicy P2"
        ],
        "UI & EXTRA CHARACTERS": [
          "Section Introduction",
          "Making a Village & Adding Background Art",
          "Adding Extra Characters",
          "Adding UI",
          "Programming the UI & Village",
          "Character Creation System",
          "Character Stats Menu"
        ],
        "FINISHING OUR GAME": [
          "Section Introduction",
          "Creating the Sound Effects",
          "Implementing the Sound Effects",
          "Win/Lose State"
        ],
        "CONCLUSION": [
          "Bonus Lecture: What's Next?"
        ]
      },
      "requirements": [
        "Have Unity and some 2D application like Ps, Gimp, SketchPad or MS Paint installed on your computer.",
        "Before starting this course you should understand the basics of Unity. Like saving scenes, navigating the interface, using the three basic manipulation tools (Translate, Rotate and Scale), create prefabs and add and modify components inside of the inspector.",
        "You should have a strong understanding of the basics of C#, such as creating variables, modifying those and calling functions.",
        "Have a strong desire to learn, have fun and create awesome games !"
      ],
      "description": "In this game dev course, you'll learn how to make a 2D turn by turn strategy game using Unity, C#, and Photoshop (or a free alternative).\n\nHere is a list of the keys things that you will learn by watching this course:\nFirst of all, you'll gain a deeper understanding of what it takes to create an entire game from A to Z, from art to programming to sounds to game design! By the end of the course, you'll be able to make your very own 2D local multiplayer strategy games, which you can share with family and friends.\nThe game we will bring to life is simple, but will teach you the fundamentals of many tactic/strategy games such as turn by turn systems, attack & defense, moving characters on grid-like environments, placing units, gaining resources and more! All with the C# programming language- if you understand the basics of coding, then this is the perfect opportunity to gain a deeper understanding of those fundamentals (such as functions, arrays, vectors, if statements) and learn extra tips and tricks related to turn by turn games.\nYou'll also learn how to make your own game characters. Starting with sketching, inking, and coloring using a 2D art application like Photoshop (but most of what is taught can be done using free alternatives, such as Gimp or Krita).\nWe will also learn how to rig and animate those characters inside of Unity using a simple bone-based method.\nThere will also be tutorials on particle effects, sounds, game juice, and UI. Everything that is needed to make a game will be covered in well-edited, fun, engaging videos. This course will immerse you in the life of a game creator, as you go on an epic journey to bring your visions to life.\n\n\nWhy learn from us?\nMy brother and I created this course to share our passion for making games and help others bring their unique visions to life!\nWe've been teaching aspiring game developers how to use Unity, code with the C# programming language, and make game art and animations for over two years. Our tutorials have been viewed by thousands and are very popular, every day we get dozens of developers thanking us for helping them out on their own game dev journey!\nWe've not only made tons of tutorials but we've also created plenty of games using Unity, both 2D, and 3D, on Itch io, Newgrounds, and Steam.\nSo we know what it's like to create a complete, polished experience from A to Z, and really want to equip you with the right tools and knowledge so you can do the same!",
      "target_audience": [
        "A beginner/intermediate game developer interested in learning how to create a fun, commercial quality 2D strategy game from A to Z using Unity and C#.",
        "This course is also for those curious about programming using C#.",
        "Someone wanting to learn how to draw and animate 2D game characters using a 2D application like Ps or Gimp and Unity.",
        "This course is NOT for complete beginners having never touched Unity or C#. You should have understood the basics of both Unity and C# if you wish to properly follow along and get the most out of this course."
      ]
    },
    {
      "title": "Python Game Development - Create a Flappy Bird Clone",
      "url": "https://www.udemy.com/course/python-game-development-create-a-flappy-bird-clone/",
      "bio": "Learn Python game development by creating your very own Flappy Bird game!",
      "objectives": [
        "Create a clone of Flappy Bird",
        "Learn Python Game Development"
      ],
      "course_content": {
        "Introduction to the Course and the Game": [
          "Introduction",
          "Introduction to PyGame and Initial Coding",
          "Time Clock and Game Over"
        ],
        "Graphics Setup": [
          "Initial Graphics Setup",
          "Background and Adding Graphics to the Screen",
          "Working with Coordinates"
        ],
        "Creating Input Controls": [
          "Creating Input Controls"
        ],
        "Boundaries, Crash Events and Menu Creation": [
          "Part 1",
          "Part 2",
          "Part 3",
          "Part 4"
        ],
        "Creating Obstacles Using Polygons": [
          "Introduction",
          "Completing Our Obstacles"
        ],
        "Game Logic: Using Block Logic": [
          "Game Logic: Using Block Logic"
        ],
        "Game Logic: Success Or Failure": [
          "Hitting Obstacles Part 1",
          "Hitting Obstacles Part 2"
        ],
        "Creating the Score Display": [
          "Creating the Score Display"
        ],
        "Adding Colors and Difficulty Levels": [
          "Adding Colors",
          "Adding Colors Part 2",
          "Adding Difficulty Levels"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "A basic knowledge of Python programming",
        "Free copy of Pygame"
      ],
      "description": "Games by their very nature are supposed to be fun. So why should the process of creating them be tedious and complicated? Instead of sitting through hours of lectures and game development theory, this course cuts to chase and allows you to create a game straight away, learning as you go.\nLearn Python game development by creating your own game\nGain practical experience in Python game development\nDevelop a clone of Flappy Bird using Python game programming\nCreate levels with increasing difficulty and complexity\nUnderstand and utilize the opportunities Python games provide\nMaster game development in a fun environment\nPython game programming is a set of Python modules designed specifically for writing games. It allows you to create fully featured games and multimedia programs using the Python programming language. Python is highly popular and versatile, running on almost every platform and operating system out there; so mastering it is of enormous benefit whether you want to create Python games or pretty much anything else. By completing this course, you can create open source, free, freeware, shareware and commercial games using Python game programming.\nCourse Overview\nThis course contains 21 lectures and over 3 hours of content. It is intended for those who already have a working knowledge of Python programming or general programming, and who want to apply their skills to games development. However, beginners may still be able to follow the course too.\nThe main focus of this course is to create a clone of the smash hit (and extremely simple) game Flappy Bird using Python game programming. You will first be introduced to Python programming concepts and initial coding, and then delve straight into the making your game from scratch.\nThe first two elements of the game you will learn are the time clock and game over. From there, you'll progress to initial graphics setup including the background and adding graphics to the screen. Following that, you'll move on to working with coordinates.\nThe next few sections of the course focus in detail on creating input controls, boundaries, crash events and menu creation, as well as creating obstacles using polygons. Finally, you'll add the finishing elements to your game like game logic, score display, colours, and most importantly, difficulty levels.\nBy the end of this course you will have created your own Flappy Bird game from scratch using Python game programming and Python game development techniques. The skills you picked up along the way will give you a solid groundwork for creating bigger, more complex, and more versatile games that can be run on any platform or any operating system.",
      "target_audience": [
        "Python programmers",
        "General programmers"
      ]
    },
    {
      "title": "Create Fun Games and School Presentations Using Scratch 2.0",
      "url": "https://www.udemy.com/course/create-fun-games-and-school-presentations-using-scratch-20/",
      "bio": "Learn how to teach your child or students basic programming, game creation and mathematical concepts through Scratch",
      "objectives": [
        "Create Fun and Interactive Games and School Presentations Using Scratch"
      ],
      "course_content": {
        "Basics of Scratch": [
          "Setting Up Your Scratch Environment",
          "Understanding Sprites and Backdrops",
          "Scratch Coordinate and Rotation System",
          "Introduction to Scripting",
          "Working with Parameters in Blocks",
          "Motion and Sensing Project - Part 1",
          "Motion and Sensing Project - Part 2",
          "Motion and Sensing Project - Part 3",
          "Motion and Sensing Project - Part 4"
        ],
        "Creating an Interactive Maze Game": [
          "Instructions for the Maze Game",
          "Creating Your Ball, Maze and Finish Line Sprites",
          "Making the Ball in the Maze Move",
          "Ball and Maze Interaction",
          "Time Your Maze Game!"
        ],
        "Two Sprites Having an Interactive Conversation": [
          "Goals for the Conversation Project",
          "Selecting Your Sprites and Beginning the Conversation",
          "Understanding Variables",
          "Understanding the Use of Broadcasting to Send Messages",
          "Using the Join Block to Make Complete Sentences",
          "Using Mathematical Expressions"
        ],
        "Advanced Gaming Project using Cloning": [
          "Introduction to the Rules of the Bug Catcher Game",
          "Setting up the Game",
          "Understanding Cloning",
          "Moving the Bug Sprites Randomly",
          "Interacting With and Deleting Clones",
          "Reporting a Score",
          "Tidying up the Game"
        ],
        "Final Thoughts": [
          "Conclusion"
        ]
      },
      "requirements": [
        "We will be using the Scratch 2.0 Offline Editor that requires an Adobe Air plug-in. But don't install it yet as we will go over that in the first lecture. The students must have a PC or Mac. Tablets like the iPad or Galaxy will not work."
      ],
      "description": "ABOUT THIS COURSE\n\n\n\n\nLearn the basic concepts, tools, and functions that you will need to build fully functional projects with the visual programming language, Scratch.\n\n\nBuild a strong foundation in Scratch and visual programming with this tutorial for beginners to intermediate learners.\n\n\nBuilding code using command blocks\nUsing the coordinate system\nProgramming fundamentals\nReal-life project examples\n\n\nContent and Overview\n\n\nSuitable for students age 7+, teachers, and parents who want to teach the fundamentals of visual programming to their children. Each section includes exercises, so you’ll be able to put your newly learned skills to immediate use. This is NOT a lecture about every single block in Scratch with a boring explanation! It challenges the user by going through real-life examples.\n\n\nStarting with the installation of the free Scratch program and Adobe Air, this course will take you through the basic understanding of the coordinate and rotation system, motion and sensing, and character (sprite) manipulation. With the basics mastered, the course moves on to more advanced subjects including logic controls (if/then/else and forever loops), serial and parallel processing and dynamic interaction between sprites. By creating detailed projects, you’ll establish a strong understanding of programming concepts and how they work in Scratch. Upon completion of the course you will have the knowledge to create your own video games, educational tutorials, and presentations using Scratch. This is great for students who want to create powerful visual aids to complement an oral presentation or book report.\n\n\n\n\nWhy take this course instead of another?\n\n\nMost importantly, my extensive programming background and knowledge of Scratch means that I know a LOT about the subject. And my teaching background means that I am able to pass this knowledge on to you in an easy-to-understand format.\n\n\nThis course contains more content and goes deeper into practical examples than others. It’s a great combination of practice and theory to help get you off and running your own project right away.\n\n\nThe step by step examples are key to understanding programming fundamentals – I don’t just teach you how to use Scratch, I teach you how to understand what you need to know to program on your own.\n\n\nUnlike all the other Scratch videos available, this is NOT just a screen recording – this course contains detailed notes and diagrams within the video to enhance your learning and to help you remember key points throughout the course.\n\n\nWho is the instructor and how knowledgeable are they?\n\n\nHi, I’m Santanu Das and I’ve been programming for over 25 years in C++, C, FORTRAN, Java, and others. As a teaching assistant, I taught C++ at MIT (where Scratch was created) to some of the most brilliant students in the world while getting my degree in engineering. Currently, I manage over 800 software developers at one of the largest private software companies in the world. Over the past few years, I have been teaching a Scratch class to 3rd graders at my son’s elementary school so I have firsthand experience on common stumbling blocks while learning Scratch. I teach Scratch because I want to encourage young people to improve their logic and decision making skills, to encourage STEM in the classroom, and to help people understand the creation of the video games that they play. I believe that programming builds a solid foundation for many other disciplines, including music and liberal arts, as well as science, technology, engineering and math. I DON’T teach the class for additional income. The course fee goes to producing more Scratch tutorials and funding local STEM Grant programs for schools throughout the US. Whether you want to be an engineer, a doctor, an accountant or an educator, Scratch strengthens your decision making, organizational and math skills at any level.\n\n\n\n\nWHAT'S IN THE COURSE?\n\n\n\n\nOver 27 lectures and close to 2.5 hours of content\nExplains the fundamentals of programming, command blocks, and the coordinate system, essential knowledge you will find makes it much easier to create your projects\nI explain how to overcome common obstacles that users encounter, by making mistakes as we go and going back to fix them as you follow along.\nYou will have a great understanding of how to use both basic AND advanced programming blocks and commands\nContains 4 great project examples that can be used to build almost any type of video game/app\n\n\n\n\nCOURSE REQUIREMENTS:\n\n\n\n\nStudents must have a PC or a Mac. Scratch is not yet supported on tablet devices.\n\n\nInstall the free Scratch software onto your computer and you are ready to go. Adobe Air (a free plug-in) is also required, and installation instructions are provided.\n\n\nWHO SHOULD ATTEND?\n\n\nThis class is not just for people who are interested in computer programming – it’s for anyone who would like to sharpen their logic and decision-making skills.\n\n\nOf course, if you are interested in computer programming and want to learn the fundamentals, take this course! It is geared for ages 7+ (second graders and up). It is a great introduction to programming/coding for students of all ages.\n\n\nThis course is also a great primer for teachers who would like to teach programming and have their students submit Scratch projects as part of their curricula. Includes example of how kids can use Scratch to create a unique ‘visual aid’ for a classroom project. This course is used at local elementary schools to teach students Scratch.\n\n\nPerfect for kids who want to learn how to create their own video games, and parents who want to learn how to assist their kids in building their programming and coding skills.",
      "target_audience": [
        "This Scratch course is for elementary, middle and high school students and their teachers/parents who are looking to understand basic programming using a popular visual block coding environment called Scratch. No prior programming knowledge is required."
      ]
    },
    {
      "title": "HTML5 Game Development: 2D Platform Game Fundamentals",
      "url": "https://www.udemy.com/course/html5-game-development-2d-platform-game-fundamentals/",
      "bio": "Learn Phaser and modern web development by building a 2D platform game for your web browser",
      "objectives": [
        "HTML5 Game development using Phaser",
        "2D platform game fundamentals",
        "Webpack and Phaser: Utilising up a robust base project",
        "How to work with sprites and spritesheets",
        "Loading game assets",
        "Character animations",
        "Capturing user input",
        "Platform game physics",
        "Character movement",
        "Finite state machine pattern",
        "Handling collisions",
        "Level building with the Tiled level editor",
        "Cameras",
        "Parallax scrolling"
      ],
      "course_content": {
        "Getting Started": [
          "Tools of the Trade",
          "Project Starter Code",
          "Introduction to Phaser",
          "Updated: Code Completion for Phaser in VS Code",
          "Outdated: Code Completion for Phaser in VS Code",
          "Base Project Code Review"
        ],
        "Building a Character": [
          "Finding Royalty Free Game Assets",
          "Spritesheets and Texture Atlases",
          "Loading Spritesheets",
          "Playing Animations",
          "Enabling the Arcade Physics Engine",
          "Collision Rectangles for Physics Bodies",
          "Creating a Hero Class",
          "Capturing Keyboard Input",
          "Horizontal Movement",
          "Using Acceleration",
          "Jumping",
          "Double Jumping",
          "Fixing Jump Bugs",
          "Intro to Finite State Machines",
          "Installing the javascript-state-machine Library",
          "Movement State Machine",
          "Triggering State Transitions",
          "Logic for State Transitions",
          "Loading Spritesheets and Creating Animations",
          "Fixing the Fall Spritesheet",
          "Flowchart for Animation States",
          "Creating the Animation State Machine",
          "Adding Logic for Animation State Transitions",
          "Completing the Animation State Machine"
        ],
        "Building a Level": [
          "Intro to Tiled",
          "Creating a Tileset",
          "Building a Level in Tiled",
          "Loading the Level",
          "Adding a Camera",
          "Colliding with the Level’s Tiles",
          "Fixing Pixel Bleeding with Extrusion",
          "Adding a Foreground Layer",
          "Adding a Background Layer with Parallax Scrolling",
          "Fixing the Clouds Tile Size Warning",
          "Setting the Hero’s Start Location via the Level",
          "Adding Spike Objects",
          "Finish Adding Spikes Objects",
          "Killing the Hero",
          "Completing the Death Sequence",
          "Resetting the Game"
        ]
      },
      "requirements": [
        "Basic experience with programming in Javascript or another programming language"
      ],
      "description": "In this course, you'll learn the basics of 2D game development using HTML5/Javascript and the excellent Phaser game engine. The course will focus on character movement for a platform game and introduce level creation using the Tiled level editor.\nWe'll cover how to build a character with various moves and animations. We'll use a physics engine to get the jump and horizontal movement feeling just right similar to classic games like Mario Bros. We’ll then create a simple platform game level and setup the collision logic for our character to interact with it.\nAlong the way to building a super fun 2D platform game, we’ll be looking at some best practices on structuring and architecting a game project by starting with a robust boilerplate that you can use for any game, as well as exploring the finite state machine pattern as a means of controlling our character’s movements and animations. This will give you a solid foundation for continuing your journey into game development and give you a kick start in creating a full blown game!\nIf any of the above sounds a bit daunting, don’t worry, the course videos will explain everything in a way that’s suitable even for a complete beginner. While a little familiarity with Javascript would be beneficial, we’ll be doing everything step-by-step in enough detail that you can follow along. Basically, if you have an interest in how 2D platform games work and would like to have a go at creating your own, this course is for you.",
      "target_audience": [
        "Anyone with an interest in learning how they can build their own 2D platform game",
        "Beginner Javascript developers curious about building games for the web"
      ]
    },
    {
      "title": "Learn to make an Awesome Builder-Defender game in Unity!",
      "url": "https://www.udemy.com/course/awesome-builder-defender-game-in-unity/",
      "bio": "Construct Buildings, Gather Resources, Defend your base from Enemies and more!",
      "objectives": [
        "Learn from a Professional Indie Game Developer",
        "Learn how to make a City Builder, Tower Defense, RTS, Village Simulator, etc",
        "Students will learn how to make a complete game from start to finish",
        "Learn how to structure a codebase using Clean Code principles",
        "Learn the basics of Shader Graph, Particle System, UI, Scriptable Objects, etc"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Overview"
        ],
        "Builder Defender Game": [
          "New Project",
          "Unity Layout",
          "Render Pipeline",
          "Project Setup",
          "Game Design",
          "Place Building",
          "Building Types",
          "Resource Manager",
          "Resource Generation",
          "UI",
          "World Map",
          "Cinemachine",
          "Building Placement UI",
          "Building Ghost",
          "Resource Nodes",
          "Building Placement Rules",
          "Building Animations",
          "Building Generator Overlay",
          "Building Costs",
          "Tooltip",
          "HealthSystem",
          "Enemies",
          "Building Tower",
          "Enemy Wave Manager",
          "Post Processing",
          "Shader Graph",
          "Building Construction",
          "Building Demolish",
          "Minimap",
          "Game Over",
          "Building Repair",
          "Sound Manager",
          "Music Manager",
          "Options Menu",
          "Main Menu"
        ],
        "Polish": [
          "Polish",
          "Health Bar Separators",
          "Enemy Trails",
          "Camera Limits",
          "Edge Scrolling",
          "Save PlayerPrefs",
          "Game Balancing",
          "Enemy Explode Particles",
          "Building Particles",
          "Screen Shake",
          "Chromatic Aberration",
          "Day Night Cycle",
          "Building Place No Resources",
          "Arrow Projectile Particles",
          "Game Assets"
        ],
        "Final Showcase": [
          "Final Showcase"
        ],
        "EXTRAS": [
          "Unity Basics",
          "C# Basics",
          "Construction Shader",
          "Grass Wind Shader",
          "Shader Graph in URP 10",
          "Continue Your Learning Journey (Bonus Lecture)"
        ]
      },
      "requirements": [
        "Very basic knowledge of Unity and C#",
        "Use the Q&A Section if you have any questions or feel lost at any point in the Course"
      ],
      "description": "Hello and Welcome!\nI'm your Code Monkey and in THIS course you will learn step-by-step how to make a Builder-Defender game.\nThe design is sort of a mix between a City Builder and a Tower Defense game so if either of those genres are something you're interested in then this course is just for you!\nWith the knowledge you will learn from this course you will be able to make City Builders, RTSs, Tower Defense games, Tycoons, Village simulators and much more.\n\n\nAbout me, I'm a Professional Indie Game Developer with several successful games published on Steam covering a wide range of genres, I've been Programming for over 20 years and using Unity for almost 10.\nAlso a couple of years ago I started a YouTube channel making Free Video Tutorials to share the knowledge I have accumulated to help you learn how to make YOUR OWN games.\nIf you'd like to try out my learning style before purchasing the course you can watch the over 300 Videos available for Free on the YouTube channel.\nThey are presented as clear step-by-step tutorials just like this course.\n\n\nA bit more about the game...\nIt's a really interesting mix between a City-Builder and Tower-Defense game.\nThe player has the ability to place buildings and those buildings gather resources.\nThere's three starting resource types, Wood, Stone and Gold, although everything is set up in such a way that you can easily add more Resource Types.\nThe Resource Generation is based on proximity so a Wood Harvester needs to be placed near Trees in order to gather Wood.\nThe Buildings take some time to be Constructed and it shows that progress with a nice visual element and a really awesome Shader effect.\nThen we also have some Enemies, they are simple but still look great.\nOur HQ can defend itself by shooting arrows and we can also place Towers to add more defenses.\nOver time more and more enemies will be spawned until the player can't take it anymore.\n\n\nSo its all about Placing Buildings, Gathering Resources, Placing more Buildings and Defending your HQ for as long as you can.\n\n\nThe whole game has tons of effects and lots of awesome features. You can see some cool shaders, glow, screenshake, post processing, tooltip, lots of UI elements, smooth camera, particles and so on. The final game plays really great and feels very satisfying.\nThis course starts with a completely empty project starting completely from scratch and step-by-step we will get to the final game.\nEverything is built in a very clean and modular way so you can easily take this as a base and expand upon it with more Building Types, Enemies, Maps and so on.\n\n\n\n\nThis course is presented as a thorough step-by-step guide where I will show you exactly how to do what I'm doing and why it is that I'm doing it so you can learn how to think like a game developer.\n\n\nThis course will cover a bunch of topics including:\nHow to create a Building System\nHandle Building construction and Resource spending\nAlso how to manage Resource Generation\nHandle Enemy AI with Attack Logic and a Health System\nBuild up the World with Resources in specific places\nLearn the basics of Unity tools like Shader Graph, Post Processing, Particle System...\nAnd much much more!\n\n\nAs for requirements you really just need to know the absolute basics of Unity and C#.\nIf you've never touched Unity or C# before then there are two lectures in the extras section which cover the basics\nIf you know, how Unity works, what are Game Objects and Components, what is MonoBehaviour and basic C# syntax then you should be able to follow everything without any issues.\n\n\nIf you feel confused or lost at any point in the course make sure you post your questions in the Q&A section\nI will be there to help with whatever issues you may have\n\n\nAlright so go ahead join me on the course and lets build this awesome game together!\n- Code Monkey",
      "target_audience": [
        "Beginners who want to make a complete game",
        "Advanced users who want to see how a Professional Indie Game Developer structures a game",
        "People who want to make a Tower Defense game",
        "People who want to make a City Builder game",
        "Anyone interested in improving their Game Development skills",
        "Anyone interested in learning from a Professional Indie Game Developer"
      ]
    },
    {
      "title": "Learn Game Development with C# Programming and MonoGame!",
      "url": "https://www.udemy.com/course/monogame/",
      "bio": "Learn game development with C# by utilizing the popular MonoGame framework!",
      "objectives": [
        "Make games using MonoGame",
        "Write code using C#",
        "Understand common programming fundamentals",
        "Design software using Object-Oriented Design",
        "Utilize open-source software in your projects",
        "Finish 3 complete projects from scratch"
      ],
      "course_content": {
        "Overview and Installation": [
          "A Brief History of C# and MonoGame",
          "Installation",
          "Projects On GitHub"
        ],
        "C# Programming Part 1": [
          "Introduction to C#",
          "C# Practice Project Setup",
          "Variables",
          "Arithmetic",
          "Data Types",
          "Conditional Statements",
          "Using Methods",
          "Comments",
          "Syntax Review"
        ],
        "Game #1: Shooting Gallery": [
          "Shooting Gallery Overview",
          "MonoGame Project Structure",
          "Including Assets with the Pipeline Tool",
          "Drawing Graphics #1",
          "Drawing Graphics #2",
          "SpriteFonts",
          "Target Variables",
          "Mouse Input",
          "Shooting the Target",
          "Randomness",
          "Timer",
          "Finishing Touches and Wrapping Up"
        ],
        "C# Programming Part 2": [
          "Arrays",
          "Loops",
          "Classes",
          "Methods",
          "Constructors",
          "Static Modifier"
        ],
        "Game #2: Spaceship": [
          "Spaceship Overview",
          "Project Setup and Loading Assets",
          "Ship Class",
          "Ship Movement",
          "Delta Time",
          "Asteroid Class",
          "Controller Class and Asteroid List",
          "Managing Objects in a List",
          "Asteroid Randomness",
          "Difficulty Progression",
          "Main Menu",
          "Centering Text",
          "Colliding with Asteroids",
          "Timer and Finishing Touches"
        ],
        "C# Programming Part 3": [
          "Structs and Enums",
          "Switch Statements",
          "Private, Getters/Setters, and Properties"
        ],
        "Game #3: RPG": [
          "RPG Overview",
          "Project Setup",
          "Player Class",
          "Camera (Open-Source Software)",
          "Animating the Player",
          "Animating All Directions",
          "Shooting Projectiles",
          "Enemies",
          "Shooting Enemies",
          "Spawning Enemies",
          "Finishing Touches",
          "What's Next?"
        ],
        "Bonus Lectures": [
          "Sound Effects and Music"
        ]
      },
      "requirements": [
        "Understand the basics of using a computer",
        "Must be able to download and install software from the internet (like Visual Studio, MonoGame, etc.)"
      ],
      "description": "Are you ready to embark on an exciting journey into the world of game development? Good news - the path is wide open, and you're invited to join us!\n\nIn this course, we'll dive into the basics of creating games with MonoGame, a game framework that has a rich indie development heritage. You'll be in great company, as countless successful titles, including Stardew Valley, Celeste, Fez, Axiom Verge, and Bastion, have been built using this software, each with millions of sales on Steam.\n\nWe'll be using C#, a widely used programming language in the industry, to bring our game ideas to life. With this powerful combination of a solid game engine and a well-documented language, you'll have all the tools you need to transform your imagination into stunning games.\n\nNow, let's talk about what makes this course special. It's all about hands-on, project-based learning. We'll apply the programming and game development fundamentals we discuss to create our very own MonoGame projects. No need to worry if you've never written a line of code before - this course is designed for beginners and seasoned developers alike. We've got content that will benefit everyone.\n\nAfter an introduction to set the stage, we'll dive into three sections on C# programming and three sections on MonoGame development. By alternating between programming and game development, we'll have you up and running, creating games in no time.\n\nThroughout the course, we'll build three games from scratch using MonoGame. We'll start with an exciting Shooting Gallery game where you'll aim and click on targets that pop up on the screen. Next up, we'll launch into a Spaceship game where you'll navigate through space, dodging incoming asteroids using the arrow keys. And to wrap it all up, we'll take on the challenge of creating a top-down action RPG. In this game, you'll control a player who explores a dynamic world, fights enemies, and shoots projectiles.\n\nWith each new game we develop, we'll build on the skills acquired in the previous one, ensuring a solid foundation in game development. By the end, you'll have a clear understanding of all the essential components needed to create your own games, including playable characters, input controls, image rendering, collision detection, projectile shooting, enemy mechanics, player scoring, health tracking, animations, timers, and even a camera system.\n\n\nTo master these aspects of game development, we'll need a strong grasp of various C# concepts. That's where our programming sections come in. We'll cover a wide range of topics, such as variables and data types, conditional statements, classes and inheritance, methods, loops, switch statements, and data structures.\n\nWhile we'll be exploring these concepts in the context of C#, the core fundamentals exist across many programming languages, so the knowledge gained here will serve you well beyond this course. And don't worry, if you're already familiar with programming, we've got you covered with a handy \"syntax review\" lecture. It'll walk you through the specific usage of these concepts in C#, allowing you to quickly catch up and apply your existing skills to this context.\n\n\nBy actively coding along with the lectures, the information will stick with you as we progress through the material. Plus, you'll have the completed projects right on your computer, ready for reference whenever you need a reminder or a source of inspiration. Armed with a solid understanding of C# and MonoGame, there will be no limits to what you can create!\n\nSo, are you ready to turn your game ideas into reality? Join us on this inspiring adventure, and let's build some incredible games together!",
      "target_audience": [
        "Anyone who wants to learn game development",
        "Anyone who wants to learn programming fundamentals",
        "Anyone interested in picking up C# as a new language"
      ]
    },
    {
      "title": "Complete Roblox Lua: Start making Games with Roblox Studio",
      "url": "https://www.udemy.com/course/complete-roblox-lua-start-making-games-with-roblox-studio/",
      "bio": "Learn Roblox Game development and Roblox Scripting. Includes a short Lua introduction. Everything done in Roblox Studio.",
      "objectives": [
        "Learn the Basics of the Lua Programming Language",
        "Learn the Basic Lua Skills necessary to make a Game for Roblox",
        "The Basics of Roblox Game Development",
        "Create your own Games as a part of the Course",
        "Learn everything, from your first script to publishing your Game"
      ],
      "course_content": {
        "Introduction": [
          "Overview of the Course"
        ],
        "Lua Introduction": [
          "Download Lua Sources",
          "Installing Roblox Studio",
          "Variable Types in Lua",
          "Output & Comments",
          "Math Operations",
          "Relation and Logical Operations",
          "If and Else Statements",
          "Local Variables",
          "String Operations",
          "Loops in Lua",
          "Functions in Lua",
          "Tables in Lua",
          "The Math Library in Lua"
        ],
        "Roblox Basic Concepts": [
          "Download Roblox Basics Sources",
          "Roblox Studio Explained",
          "Reference Parts",
          "Types of Scripts",
          "Properties Overview",
          "Vector3 and Position",
          "The Wait-Function",
          "Basic Part Movement",
          "The Touched Event",
          "New Instances with Scripts",
          "Click Detector",
          "Applying Forces",
          "Constraints",
          "Adding a Spawn Location",
          "Players (Player vs Character)",
          "Saving Value on the Player",
          "Making a Leaderboard with Leaderstats",
          "Make Parts that the Player can collect",
          "Adding a Trail to the Player",
          "Three Types of GUIs in Roblox",
          "How to navigate the API References on your own"
        ],
        "Simple Roblox Game: Creating an Obby": [
          "Download the Obby Files",
          "Introduction and how this Section is build",
          "Modelling the Obby",
          "Changing the Checkpoints",
          "Adding a Leaderboard to the Obby",
          "Adding Disappearing Stairs to the Obby",
          "Adding Moving Parts to the Obby",
          "Additional Ideas for the Obby"
        ],
        "Roblox Intermediate Concepts": [
          "Downloading Intermedite Scripts",
          "Publishing your Roblox Game",
          "Add Pictures to your GUI",
          "Storing Player Data with DataStoreService",
          "Multiple Places in a Single Game",
          "Teleport between different Places"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A Computer",
        "Basic Computer skills (like downloading a program of the web)"
      ],
      "description": "UPDATED FOR 2023\nHave you always wanted to create your own games, but didn't know where to start? This is exactly the course you need then!\nIn this Complete Roblox and Lua Course, you're going learn the basics of the Lua Programming language as well as Game Development with Roblox Studio. No experience is needed for this course to learn the ins and outs of making Games with Roblox Studio.\nThis course is accessible to complete beginners. Even if you have never programmed in your life. Basic knowledge of Roblox would be advantageous but isn't necessary.\nFirst, you will learn the scripting Language Lua, then we'll go through basic concepts of Roblox Game Development like referencing objects, scripting simple scripts and how certain Events work. After you've made your first game, an Obby, it is off to some Intermediate concepts, such as publishing your game and how to store your player's data in the Roblox Cloud using the Data Storage Service.\nThe Entire Source Code will be made available so you can follow along with everything I do in the lectures.\nIf you have any questions or suggestions, also feel free to contact me here. I'm happy to help you learn to make Games with Roblox.",
      "target_audience": [
        "Complete Beginners wishing to learn Lua and Roblox Game development",
        "Beginners that want to create their first Roblox Game and don't know where to start",
        "People looking to extend their skills and have fun while doing so"
      ]
    },
    {
      "title": "Learn UV Unwrapping with Blender for Unity 3D Game Design",
      "url": "https://www.udemy.com/course/learn-uv-unwrapping-with-blender-for-unity-3d-game-design/",
      "bio": "Learn the art of UV Unwrapping for Texture Mapping your own video game models using Blender 3D for Unity Developers",
      "objectives": [
        "UV Unwrap just about any model from a simple cube to just about anything under the sun",
        "Understand why some techniques are more effective than others through demonstration",
        "Get plenty of hands on experience with problematic models you might encounter in real world situations.",
        "We'll go through each of the various unwrapping tools exploring what each tool does and when to use them."
      ],
      "course_content": {
        "To UV or Not to UV": [
          "Introduction",
          "What is UV Unwrapping?",
          "Custom Blender Startup",
          "Is UV for You?",
          "Color without UVs",
          "Section One Quiz"
        ],
        "Unwrap Tools": [
          "\"Seamless\" Cube Projection",
          "Follow Active Quads",
          "Project from View & Stitch",
          "Marking Seams & Unwrap",
          "Section Two Quiz",
          "Unwrapping a Cylinder",
          "Unwrapping a Sphere",
          "Unwrapping a Cone",
          "Symmetrical Approach",
          "Unwrapping \"Suzanne\"",
          "Texture Paint with Smart UV Project",
          "Straightening UV Edges",
          "Section Two Final Quiz"
        ],
        "Problem Solving with Custom Objects": [
          "How This Section Works",
          "Tree (Features & Challenges)",
          "Tree (Unwrapping Finale)",
          "Unboxing Custom Objects",
          "Rocket Ship (Problem Solving)",
          "Rocket Ship (Unwrapping)",
          "Robot (Problem Solving)",
          "Robot (Rounded Cubes)",
          "Robot (Finale)",
          "Gun (Problem Solving Part 1)",
          "Gun (Unwrapping Part 1)",
          "Gun (Problem Solving Part 2)",
          "Gun (Unwrapping Finale)",
          "Tank (Fixing Problems)",
          "Tank (Cannon & Turret)",
          "Tank (Box Cutting)",
          "Tank (Cabin & Windows)",
          "Tank (Exhaust Pipe)",
          "Tank (Fenders & Tracks)",
          "Tank (Wheels & Finale)",
          "Alien (Fixing Problems)",
          "Alien (Unwrapping The Eyes)",
          "Alien (Unwrapping Finger & Toe Nails)",
          "Alien (Unwrapping Body Parts)",
          "Alien (Finale)"
        ],
        "Analyzing the Human Model": [
          "The Human Figure (Free Add-On)",
          "The Human Figure (Analyzing Seams)"
        ],
        "Bonus Material": [
          "BONUS LECTURE: More Courses by Billy McDaniel"
        ]
      },
      "requirements": [
        "Blender 3D Modeling",
        "Unity Video Game Development",
        "Photoshop (or similar 2D graphics editing software)",
        "Texture creation skills is helpful, but not required to learn"
      ],
      "description": "Master UV Unwrapping in Blender for Unity Game Development\nUnderstanding UV unwrapping is a critical skill for game asset creation, allowing you to apply textures accurately and efficiently to your 3D models. Whether you’re creating your own models, working with free downloads, or optimizing purchased assets, this course will help you break through the learning curve and gain full control over UV mapping in Blender 3D.\nDesigned with Unity game developers in mind, this course provides a solid foundation in UV unwrapping techniques, starting with simple primitive shapes like cubes, spheres, and cones before progressing to more complex meshes. You’ll learn how to unwrap objects quickly and effectively, using the most common tools and workflows to minimize stretching and distortion while maximizing texture quality.\nTo give you hands-on practice, this course includes a collection of original 3D models, allowing you to experiment with different unwrapping challenges and refine your skills. These models are yours to keep and use in your own projects, just for enrolling in the course.\nAlthough this course was created using Blender 2.78, the principles and techniques of UV unwrapping remain unchanged, even in the latest versions of Blender. Many students have noted that the concepts taught here are timeless and essential, making it one of the few courses that focuses specifically on the core principles of UV unwrapping.\nIf you're ready to take control of your texture mapping workflow and develop a strong foundation in UV unwrapping, this course will equip you with the skills to unwrap like a pro—ensuring your textures fit seamlessly onto your game-ready models for use in Unity and beyond.",
      "target_audience": [
        "Students who already understand the basics of Blender 3D modeling",
        "Students who intend to add textures to models created with Blender",
        "Students who are using Blender for the purpose of creating video games"
      ]
    },
    {
      "title": "Godot 2D Megacourse: Mastering 2D Game Development",
      "url": "https://www.udemy.com/course/godot-2d-megacourse-game-development-beginner-to-expert/",
      "bio": "Learn how to develop 2D games in Godot with this project-based course!",
      "objectives": [
        "How to set up and navigate the Godot engine",
        "Core principles of 2D game design and development",
        "Creating engaging game scenes, maps, and interactive elements",
        "How to implement player input and movement mechanics",
        "Building game systems using the command pattern and message systems",
        "Creating UI elements like menus, inventory, and shops",
        "Designing non-player characters (NPCs), combat systems, and mini-games",
        "Strategies for saving/loading game data and managing game states",
        "Best practices for structuring game code and organizing projects",
        "Applying game design principles in real-world game development"
      ],
      "course_content": {
        "The Basics": [
          "Introduction",
          "Installing Godot",
          "Creating a New Project",
          "Project Settings: Resolution and Scaling"
        ],
        "First Steps": [
          "Creating the Title Screen",
          "Creating a Base Theme",
          "Displaying the Version Number"
        ],
        "The Loading Screen": [
          "Creating an Asynchronous Loading Scene: UI",
          "Creating an Asynchronous Loading Scene: Code"
        ],
        "The Main Game Scene": [
          "Starting a New Game",
          "Organizing the Game Scene",
          "The World Map: Tileset Creation",
          "The World Map: Tilemap Creation",
          "The World Map: Terrain Data",
          "The World Map: Base Scripting"
        ],
        "Player Input": [
          "Command Menu: UI",
          "The Command Pattern",
          "The Command Processor",
          "Implementing the Move Command"
        ],
        "The Message Console": [
          "The Message Console: UI",
          "The Message Console: Code"
        ],
        "The Message Bus": [
          "The Message Bus"
        ],
        "The Player Avatar": [
          "Creating the 2D Map Player Avatar",
          "Spawning the Avatar",
          "Implementing Player Movement"
        ],
        "Map Entities": [
          "Map Entities",
          "ChangeMapTriggerEntity"
        ],
        "Map Transitions": [
          "Asynchronous Map Loading"
        ]
      },
      "requirements": [
        "Some knowledge in programming and the basics of Godot",
        "A desire to learn!",
        "A positive attitude!"
      ],
      "description": "Learn how to create 2D video games!\nDevelop in Godot like a pro!\n\n\nHave you ever wanted to create your own 2D games, from designing immersive worlds to programming gameplay mechanics? Welcome to the Godot 2D Game Development course, where we’ll help you master game creation using one of the most popular game engines available. But why Godot?\nGodot is an open-source, highly versatile game engine that allows developers of all levels to create both 2D and 3D games. Its user-friendly interface and robust features make it a perfect choice for beginners and experienced game creators alike. Whether you're looking to build your first game or expand your skills, this course is designed to provide a strong foundation in 2D game development.\nIn this course, you’ll learn step by step how to use Godot to bring your game ideas to life. From setting up your project, creating scenes, and programming player mechanics, to designing interactive elements and building complex game systems. Each lesson is filled with practical, hands-on examples to ensure you gain the confidence to develop games independently.\n\n\nAfter taking this course, you will be able to:\n\n\nNavigate the Godot engine with confidence\nBuild and launch your own 2D games\nCreate complex game mechanics using Godot’s scripting language\nApply best practices in game design, development, and project management\nContinue improving your game development skills through independent projects\n\n\nStart creating your own 2D games with Godot today!",
      "target_audience": [
        "Aspiring game developers looking to learn 2D game development with Godot",
        "Beginners with no prior experience in game development or programming",
        "Indie developers wanting to sharpen their skills in Godot for 2D games"
      ]
    },
    {
      "title": "Learn To Create An Action RPG Game In Unity",
      "url": "https://www.udemy.com/course/unityarpg/",
      "bio": "Game development made easy. Learn C# using Unity and create your very own action RPG!",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Understand the capabilities of 2D development in Unity.",
        "Develop strong and transferrable problem solving skills.",
        "Gain an understanding of the game development process.",
        "Learn how object oriented programming works in practice."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Introduction",
          "Project Setup & Asset Import"
        ],
        "Controlling The Player": [
          "Setting Up The Player",
          "Moving The Player",
          "Using Physics",
          "Rigidbody Movement",
          "Animating Movement",
          "4-Direction Movement Animation",
          "Animating A Sword Attack",
          "Attacking in Multiple Directions"
        ],
        "The Camera": [
          "Making The Camera Follow The Player",
          "Limiting The Camera Movement",
          "Moving Between Areas"
        ],
        "Enemies": [
          "Making Enemies",
          "Moving The Enemy",
          "Enhancing Enemy Movement",
          "Chasing The Player",
          "Knocking Back The Player",
          "Hit Effects",
          "CHALLENGE - CREATE DEATH EFFECT"
        ],
        "Health & Damage": [
          "Player Health System",
          "Activating Enemies",
          "Damaging Enemies",
          "CHALLENGE - KNOCKING BACK ENEMIES",
          "Setting Up Health UI",
          "Updating UI",
          "Fixing Destroyed Enemies",
          "Health Pickup",
          "Enemies Dropping Health"
        ],
        "Stamina System": [
          "Dashing",
          "Creating a Stamina System",
          "CHALLENGE - DISPLAYING STAMINA",
          "Big Swing Attack",
          "Collecting Coins"
        ],
        "Menus & Audio": [
          "Main Menu",
          "Making The Menu Work",
          "Setting Up The Pause Menu",
          "Pausing The Game",
          "Adding Audio",
          "Playing Sound Effects",
          "Creating a Test Build of Our Game",
          "Adding Dialog",
          "Activating Dialog"
        ],
        "Exploring The Dungeons": [
          "Making A Dungeon With Tilemaps",
          "Switching Scenes",
          "Updating UI On Switch",
          "Moving The Dungeon Camera",
          "CHALLENGE - MORE ENEMIES & DUNGEON ROOMS ACTIVATION",
          "Creating An Enemy Bullet",
          "Making The Enemy Fire",
          "Sealing & Opening Rooms",
          "Breakable Pots",
          "Setting Up A Shop",
          "Buying From The Shop",
          "Creating Switches"
        ],
        "The Boss": [
          "Boss Room Camera Control",
          "Setting Up The Boss",
          "Making The Boss Move",
          "Hurting The Boss",
          "Setting Up Boss Shooting",
          "Making The Boss Shoot",
          "CHALLENGE - BOSS HEALTH BAR",
          "Boss Battle Music",
          "Bugfix - Camera Area Error",
          "Boss Fight Reward - Sword Upgrade"
        ],
        "Saving & Respawning": [
          "Dying & Respawning",
          "Creating Save Data",
          "Saving & Loading",
          "Continuing The Game",
          "Marking Progress In The Game",
          "Preventing The Boss Battle Based on Progress",
          "Unlocking New Areas & Dialog"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2019 or newer"
      ],
      "description": "Learn how to create and program your very own action RPG game using Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\nFull top-down character movement\nCreating tile-based maps in Unity\nA full dialog system\nStat-tracking & upgrading\nDungeon Room Navigation\nA Simple & Easy Shop system\nAction combat systems\nBoss Battles\nProgression Management\nInteractive Menus\nand much more...\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own 2D games.",
        "People who want to create and publish their own games.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industy.",
        "Competent and confident with using a computer."
      ]
    },
    {
      "title": "The Ultimate Beginners Guide to Game Development with ROBLOX",
      "url": "https://www.udemy.com/course/robloxeducation/",
      "bio": "Game development & design. Become a coding Ninja! Learn how to make your own Roblox games the fun way!",
      "objectives": [
        "After this course you will have a solid Roblox Lua understanding what can be used to create Roblox games.",
        "You can use the game you created to further develop it and make it greater than ever before.",
        "You get a certificate on completing the course you can show to Roblox game studios when applying or a developer role.",
        "You are capable of starting your own game studio on Roblox.",
        "Create a several Roblox Games and get a understanding of the code and responsibilities behind them.",
        "Learn how to build a community around your games.",
        "Create a several Roblox Games and get a understanding of the code and responsibilities behind them."
      ],
      "course_content": {
        "Introduction to the Course": [
          "Why should you take this course",
          "Course Setup",
          "A Note On Asking For Help",
          "Lesson Plan",
          "Introducing Our TA",
          "Getting Quick Help with Questions or Struggles!",
          "Official Learning Discord Server",
          "Course Rework",
          "Lessons Missing Images"
        ],
        "Intro to Studio": [
          "Digital Citizenship",
          "Roblox Account Creation",
          "Project Intro & File Setup",
          "Basics of Roblox Studio",
          "Parts and Platforms",
          "Colors and Materials",
          "Publish and Playtest"
        ],
        "Code Fundamentals": [
          "What are Early Previews",
          "What are Early Previews(Documented)",
          "Early Discord Discussion",
          "(Early Preview) Create a Script",
          "Create a Script",
          "Create a Script (Documented)",
          "String Variables",
          "String Variables (Documented)",
          "Properties and BrickColor",
          "Properties and BrickColor (Documented)",
          "Loops and BrickColor",
          "Loops and BrickColor (Documented)",
          "Reusing Code w/ script.Parent",
          "Reusing Code w/ script.Parent (Documented)",
          "Create and Use Functions",
          "Functions 1: Functions Practice",
          "Functions 1: Function Practice (Documented)",
          "Functions 2: Instances and Particles",
          "Functions 2: Instances and Particles (Documented)",
          "Parameters and Events 1: Traps",
          "Parameters and Events 1: Traps (Documented)",
          "Parameters and Events 2: Buttons",
          "Parameters and Events 2: Buttons (Documented)",
          "Optional Code Challenge",
          "Multiple Parameters and Arguments",
          "Multiple Parameters Optional Discussion",
          "Using if/then Statements",
          "Optional Challenge: Using Different Operators",
          "if/then Statements and Operators",
          "if/then Statements and Operators",
          "Traps with if/then Statements",
          "Powerups with if/then Statements",
          "Powerups with if/then Statements (Documented)",
          "Returning Values from Functions",
          "Challenge: Create a Calculator",
          "Repeating Tasks with For Loops",
          "Glowing Lights with For Loops",
          "Creating a Timed Bridge",
          "Multiple Conditions with Elseif and Else",
          "Multiple Conditions with Elseif and Else ( Challenge 1)",
          "Multiple Conditions with Elseif and Else ( Challenge 2)",
          "Multiple Conditions with Elseif and Else ( Challenge 3)",
          "Multiple Conditions with Elseif and Else ( Challenge 4)",
          "Creating a Point Giving Part",
          "Creating GUI Buttons",
          "Nested Loops",
          "Challenge: Rain actual cupcakes",
          "Solution: Rain actual cupcakes",
          "Creating and Using Arrays",
          "Looping Through Arrays",
          "Looping Through Arrays: Optional Challenge",
          "Making Changes to Arrays",
          "Intro to Dictionaries",
          "pairs and iPairs",
          "Challenge - Waiter NPC",
          "Challenge - Allow Players to Place Orders",
          "Advanced Challenge - Make Me Some Soup Simulator",
          "Returning Values from Tables",
          "Coding Concept: Abstraction",
          "Coding Concept: Algorithms",
          "Challenge - Divide pickcloths() Into Additional Algorithms",
          "Intro to Module Scripts",
          "Creating with Module Scripts"
        ],
        "Game Design Basics": [
          "Beginner Gameplay Student Guide",
          "AdventureGame 1/9",
          "AdventureGame 1/8 (Documented)",
          "AdventureGame 2/9",
          "AdventureGame 2/8 (Documented)",
          "AdventureGame 3/9",
          "AdventureGame 3/8 (Documented)",
          "AdventureGame 4/9 - Part 1",
          "AdventureGame 4/8 (Documented)",
          "AdventureGame 4/9 - Part 2",
          "AdventureGame 5/9",
          "AdventureGame 6/9",
          "AdventureGame 7/9",
          "AdventureGame 8/9",
          "AdventureGame 9/9",
          "Final Game",
          "Adeventure Game - Final Word",
          "Word Games - The Game!",
          "Word Games - Welcome to Your Library",
          "Word Games - Writing the Story",
          "Write a story!",
          "Word Games - Creating Placeholders",
          "Word Games - Opening the Template",
          "Word Games - Opening the Script",
          "Word Games - Coding Variables",
          "Word Games - First Challenge",
          "Word Games - Asking Questions",
          "Word Games - Add a Question",
          "Word Games - Testing Your Code",
          "Word Games - Saving Your Code",
          "Word Games - Second Challenge",
          "Word Games - Write the Story",
          "Adding to the Story",
          "Add a Second Question",
          "Finishing the Story",
          "Third Challenge",
          "Completing the Challenge",
          "Share Your Game",
          "''Create and Destory '' Creator Challenge",
          "Create and Destroy - The Game!",
          "Create and Destroy - What we will make!",
          "Create and Destroy - Designing a Balanced Map",
          "Create and Destroy - Snap to Grid",
          "Create and Destroy - Save and Publish",
          "Create and Destroy - Take the Challenge!",
          "Create and Destroy - Take the Challenge!",
          "Create and Destroy - Building and Testing",
          "Create and Destroy - Build One Half of the Map",
          "Create and Destroy - Playtest the Map",
          "Create and Destroy - Build the Roads",
          "Create and Destroy - Medium Buildings and Props",
          "Create and Destroy - Complete the City",
          "Create and Destroy - Customize the Map Shape",
          "Create and Destroy - Terrain Tools",
          "Create and Destroy - Take the Challenge!",
          "Create and Destroy - Take the Challenge!",
          "Create and Destroy - Polishing & Publishing",
          "Create and Destroy - Change the Points Given",
          "Create and Destroy - Create a Game Icon",
          "Create and Destroy - Upload A Thumbnail",
          "Create and Destroy - Invite Friends to Play",
          "Create and Destroy - Take the Challenge!",
          "Create and Destroy - Take the Challenge! Exam",
          "Create and Destroy - Finish the Challenge",
          "Galactic Speedway Creator Challenge",
          "Speedway word of the Instructor",
          "Galactic Speedway",
          "Get Off the Ground",
          "Take Flight",
          "Designing Your Speeder",
          "Moving the Body",
          "Save and Publish",
          "Take the Challenge!",
          "Adding Wings",
          "Duplicate and Design",
          "Adding Decorations",
          "Grouping the Parts",
          "Add to the Garage",
          "Test the Speeder",
          "Take the Challenge!",
          "Customize and Share",
          "Going for a Race",
          "Invite Friends to Play",
          "Take the Challenge!",
          "Go Beyond the Challenge",
          "Particle Emitters",
          "Sharing Your Speeders",
          "Add New Models",
          "Colors and Textures",
          "Design the World"
        ],
        "Intermediate Game Design": [
          "Intermediate Student Guide",
          "The First Person Element Of A First Person Shooter",
          "Creating A Furniture Placement System",
          "Modeling a projectile’s motion",
          "Making A Circular Color Palette Gui",
          "How to think about Quaternions",
          "How to create interactive grass"
        ],
        "3d Model Design": [
          "Model Design Guide",
          "Model Design Plugins",
          "Building Basic Shapes",
          "Build a Roadblock Roof",
          "Building a complete House",
          "Extra Art Resources"
        ],
        "Blender & Substance Painter Design": [
          "Blender & Substance Painter Design Promo",
          "Download Blender",
          "Into to Blender",
          "Download Substance Painter",
          "Intro to Substance Painter",
          "Stylized Rock Modelling Guide",
          "Making the Stylized Rock in Blender 2.8 - Part 1 (Project Setup)",
          "Making the Stylized Rock in Blender 2.8 - Part 2 (Sculpting)",
          "Making the Stylized Rock in Blender 2.8 - Part 3 (Retopology and UV Unwrapping)",
          "Texturing the Stylized Rock in Substance Painter - Part 1",
          "Texturing the Stylized Rock in Substance Painter - Part 2 (Generators)",
          "Texturing the Stylized Rock in Substance Painter - Part 3 (Dirt)",
          "Rendering the Stylized Rock in Substance Painter - Part 4 (Portfolio Renders)",
          "Stylized Tree Modelling Guide",
          "Making a Low Poly Stylized Tree - Part 1 (Introduction)",
          "Making a Low Poly Stylized Tree - Part 2 (Modelling 1/2)",
          "Making a Low Poly Stylized Tree - Part 3 (Modelling 2/2)",
          "Making a Low Poly Stylized Tree - Part 4 (UV Unwrapping)",
          "Making a Low Poly Stylized Tree - Part 5 (Texturing 1/2)",
          "Making a Low Poly Stylized Tree - Part 6 (Texturing 2/2)",
          "Making a Low Poly Stylized Tree - Part 7 (Lighting)",
          "Making a Low Poly Stylized Tree - Part 8 (Rendering)",
          "Making a Low Poly Stylized Tree - Part 9 (Final)"
        ],
        "Animations": [
          "Using Animations in Games",
          "Using the Animation Editor",
          "Making a FPS Framework Teaser",
          "Making a FPS Gun Fire Animation - Blender 2.9"
        ],
        "Team Development & Collaboration": [
          "Team Create"
        ],
        "Known Reports": [
          "Parameters and Events 1: Traps (R15 support)",
          "Get the Obby Traps Working Again!"
        ]
      },
      "requirements": [
        "Access to a laptop with a stable Wi-Fi connection.",
        "Basic understanding of using Roblox Studio",
        "Interest and willing to learn!",
        "A love for coding!"
      ],
      "description": "Official Roblox Partner and Featured Educator!\nThis is the very first Udemy Roblox course in direct partnership with Roblox and has been featured on the official website for 5 years in a row from 2019 till 2023!\n\nCOURSE UPDATE\nA fresh new 2024 update has been pushed bringing English captions for those that have trouble following along with the Dutch accent.\n\nWhy you should consider taking this course!\n\nRoblox Partner & Featured Educator\nThis course was made in direct partnership with Roblox back in 2019, being the first official Roblox programming course on Udemy and has been features from 2019 till 2023 on the official Roblox website.\n\nAll-In-One Package\nMost instructors on Udemy will try to sell you multiple courses from for example beginner and intermediate programming courses to level creation and modelling courses. While this course teaches you how to program from absolute beginner to the advanced topics as well as show you how to make models both in Roblox Studio and in Blender as well as design levels, make tons of small games and much more all included with your purchase!\n\nSupport for Parents\nSafety for your child always goes first which is why we offer a save non toxic community for support and questions as well as the possibility for parents to message us when their kids are having problems with other kids.\n\nCreate your first video games within hours\nFollow the video tutorials step by step to make your own Roblox games.\n\nTons of Written Guides\nGo beyond the video lessons and learn via tons of written lessons.\n\nPublish your games and play with friends\nPublish your first games to the website and invite your Roblox friends to play them with you!\n\nTaught by Industry Professionals\nThe teachers in this course all work in the professional games industry both on Roblox and for real studios like EA, Naughty Dogs or for example Ubisoft.\n\nTry then buy (30 Day Money Back Guarantee)\nNot sure if this course is for you?\n\nBuy the course and try it out and if you do not like it then you can request a refund within 30 days of your purchase here on Udemy!\n\nFeatures you'll love\nWeb Exclusive\nCheapest Lua course among all on the web\nVideo Tutorials\nLive Updates\nCommercial-Grade Games\nReal Lua Code\nEasy & Fun\nExercises\nQuizzes\nQ&A Section\nPublish Games\nBuild a Community\nEarn Robux\n\n\nHow it works\n\nWatch the easy to follow videos teach you how to code step by step. Listen carefully to the instructor as not everything in the course is just about watching a video and writing down what he or she writes down.\n\nLearn the Lua code to build & expand your own Roblox games. This won't always as easy as you would like to but it's important you keep pushing yourself to the limits to every time reach a higher level and become better every step you take.\n\nShare your games with friends and publish them online. Start playing together with them, ask them for feedback and let them invite there friends to build your community. Host small events and expand your game based on feedback of friends and other Robloxians.\n\nEarn Robux thanks to what you learned and created during the course. Keep thinking about new ways of activating people to spend a little Robux on your game so you may start making a living out of your game business.\n\nTeacher Information\nThe instructor of this course has gotten a slight tick-disorder which causes him to make weird noises in some of the videos which may sound like hick-ups or throwing up.\n\nThe instructor has been busy for the past 3 years to rewrite the entire course to remove all of these noises but please just be aware of this before purchasing the course!",
      "target_audience": [
        "You are interested in coding.",
        "You are able to invest time to get better.",
        "You have a love for game development.",
        "You would like to learn more about Roblox Lua concepts and normal Lua concepts.",
        "You are able to run Roblox Studio on windows",
        "You would like to learn more about networking and server replication",
        "You haven´t found the perfect course for you and are looking for a constantly expanding course."
      ]
    },
    {
      "title": "Little Adventurer: Make a 3D action game with Godot 4",
      "url": "https://www.udemy.com/course/littleadventurerandiegodot/",
      "bio": "Make your first Godot 3D game with good-looking game asset!",
      "objectives": [
        "Learn to make a good-looking 3D action game with Godot",
        "Learn how to code in GDScript",
        "Learn how to design game levels",
        "Learn how to create and control animations in Godot",
        "Learn how to control VFX",
        "Learn how to use Godot's AI navigation system",
        "Learn how to create game UI in Godot"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Learn to create a 3D action game with high-quality game assets",
          "Download Godot",
          "Download the Game Asset",
          "Create our new Godot project with the game asset",
          "Create the game scene",
          "Setup Godot editor"
        ],
        "Setup the player": [
          "Setup the player node",
          "Adding a camera to the player",
          "Adding a characterBody3D script",
          "The player's basic movement (Explaining and tweaking the characterBody3D script)",
          "Setting up the input map",
          "Rotate the player to the input direction",
          "Adding an OminLight3D node to light up the player",
          "Running animation",
          "Attaching the swords to the player"
        ],
        "Creating the player footstep VFX": [
          "Setting up the Footstep VFX",
          "Writing the Footstep VFX script"
        ],
        "Creating the Coin": [
          "Setting up the Coin",
          "Writing the Coin Script",
          "The Coin pickup VFX",
          "Updating the PlayerCharacter Script",
          "Creating the Coin Animation",
          "Setting up the Coin UI label",
          "Writing the GameUIManager Script to update the coin label"
        ],
        "Creating the Enemy AI Using Navigation": [
          "Setting up the Enemy",
          "Creating the NavigationRegion3D node",
          "Creating the NavigationAgent3D node",
          "Writing the enemy movement script",
          "Handling the enemy movement animation"
        ],
        "Introduction To A Simple State Pattern": [
          "What is State Pattern",
          "Writing the State base script",
          "The structure of state machine and state nodes",
          "Writing the state machine script"
        ],
        "Implementing states for the player node": [
          "Creating the player’s idle state",
          "Creating the player’s run state",
          "Updating the footstep VFX script",
          "Setting up the player slide input action and node",
          "Creating the player slide state",
          "Setting up the hitbox for the player",
          "Setting up the player attack input action",
          "Creating the player attack state"
        ],
        "Creating the attack VFX": [
          "Adding material flash VFX to the enemy",
          "Adding attack hit VFX",
          "Adding slide motion to the player’s attack"
        ],
        "The enemy's health & the damaging process": [
          "Writing the enemy’s health script",
          "Updating the player attack state script"
        ]
      },
      "requirements": [
        "It would be great if you have beginner-level programming experience"
      ],
      "description": "Hello, I’m Single-minded Ryan.\n\n\nIn this course, we are going to make a 3D action game with Godot. In the game you will control Andie, our little adventurer, to explore an ancient world. You’ll need to defeat the enemies and collect enough coins to enable the portal at the end stage to finish the game.\n\n\nGodot is a beginner-friendly and highly efficient game engine, its refined and intuitive workflow can save us a lot of time and effort, and I also believe Godot can achieve high-quality game graphics.\n\n\nMy goal is to create a visual-oriented course to show you the potential of Godot.\nI want to combine the intuitive workflow with production-level graphics, to immerse you in the experience where you feel like you are making a real game from scratch.\n\n\nThis course comes with a production-level game asset package, including high-quality characters with high-resolution textures, materials, animations, environment models, a pre-constructed level, and a bundle of VFX.\n(sound & music not included at the moment)\n\n\nAlong the course, you are going to learn everything you need to make your own game, from how to code in GDScript, how to control the characters, create enemy AI, control the animations and VFX, design the game level, create the game UI, all the way to how to compile your game to EXE files.\n\n\nI will try to focus on every detail, but at the same time, it would be great if you have some basic experience with some programming language. You don't necessarily need to know anything about GDScript, but it helps if you understand some general programming ideas such as how variables and functions work.\n\n\nBy the end of this course, you will have a 3D action game that you can show off to your friends.\n\n\nPlease enroll today, I'm looking forward to seeing you in the course.\n\n\n\n\nAt the end of this course, you will be able to do things like:\nCustomize Godot's settings for your game and your workflow\nCode in GDScript, which is Godot's built-in programming language\nCode basic character movement, attack, and dodge abilities\nCreate an attack combo system\nUse Godot's input system\nControl animations with AnimationPlayer node\nHow to communicate from the animations to the script\nCreate animations to move and rotate objects\nControl material effect with GDScript and animation\nControl VFX via GDScript\nCreate Enemy AI with Godot's Navigation System\nControl Enemy's behaviors like spawn and dead\nUse a state pattern to control the Player and the Enemy's status\nCreate a health & damage system\nCreate a health pick-up\nCreate a coin-collecting system\nCreate a Game logic manager\nDesign the Game Level\nCreate 3D text UI\nHow to load and reset game scenes\nCreate a main menu and game menu with the Godot UI system\nHow to create buttons and control button functions with GDScript\nHow to export the game project into EXE files\nPlease NOTE that this course DOES NOT contain any sound and music assets at the moment.\n\n\n*All of the assets (models, animations, VFX, etc.) provided in this course are only for educational purposes, please do not use them in any commercial projects.",
      "target_audience": [
        "Beginners who wants to make good-looking games with Godot"
      ]
    },
    {
      "title": "Build an FPS Zombie Game From Scratch - Unity 6 Compatible",
      "url": "https://www.udemy.com/course/unity-complete/",
      "bio": "Create Your Own First Person Shooter Zombie Game",
      "objectives": [
        "The Unity Game Engine Software",
        "Creating and animating a first person character for use in an FPS",
        "Animating humanoid models and NPCs",
        "Artificial Intelligence techniques for defining the behaviour of non-player characters",
        "Using particle systems to simulate fire, fog and blood",
        "Using physics to develop a shooting mechanic with rag doll animations",
        "Unity's Canvas to develop an integrated heads up display with maps, radar and compass",
        "How to create pickup items with colliders and triggers",
        "Add position checkpoints to save player locations",
        "Add dynamic visual and audio special effects",
        "Unity's Terrain Sculpting System for developing game maps",
        "How to use lighting to enhance a game environment",
        "Post Processing Techniques to enhance the look of a game environment",
        "How to build a standalone game from Unity"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Join the H3D Student Community",
          "Contacting H3D",
          "FAQs",
          "Setting up Pathfinding in Unity",
          "Updating to Unity 6"
        ],
        "Getting Started with Unity": [
          "Installation",
          "Navigating the Interface Part 1",
          "Navigating the Interface Part 2",
          "Models and Meshes",
          "Textures",
          "Textures and UV Values",
          "More About Materials",
          "Shaders",
          "Physics",
          "Physics Materials",
          "An Overview of Programming with Events",
          "An Overview of Programming with Properties"
        ],
        "Creating a First Person Character with Controller": [
          "Programming FPC Movement",
          "Character Physics",
          "A First Person Camera",
          "Orientating and Restricting Movement",
          "Cursor Locking",
          "Adding Character Model",
          "Transitioning Between Animations",
          "Animation Triggers",
          "Adding a Weapon",
          "Completing the Player Animation",
          "Sound Events in Animation",
          "Randomising Sounds",
          "Jumping and Landing Sounds"
        ],
        "Picking Up Items": [
          "Creating Pickups",
          "Detecting Collisions with Pickups",
          "Keeping an Inventory",
          "Firing a Weapon To Deplete Ammunition",
          "Depleting and Topping Up Health",
          "Ammunition Clip Management",
          "Fixing Footstep and Jump Sounds"
        ],
        "The Game Environment": [
          "Sculpting a Terrain",
          "Texturing a Terrain",
          "Trees",
          "Adding Terrain Details",
          "Skyboxes Part 1",
          "Skyboxes Part 2",
          "Fog",
          "Adding Buildings and Props",
          "Design Principles for Terrain Aesthetics",
          "Game Map Layouts",
          "Constructing the Game Level with FPC"
        ],
        "Zombies!!": [
          "Creating Animated Zombies",
          "Importing Zombies To Terrain",
          "Navigation Meshes",
          "Programming NavMesh Agents",
          "Finite State Machines Part 1",
          "Finite State Machines Part 2",
          "Finite State Machines Part 3",
          "Spawning Part 1",
          "Spawning Part 2"
        ],
        "Doing Combat": [
          "Ragdolls Part 1",
          "Ragdolls Part 2",
          "Shooting at Zombies Part 1",
          "Shooting at Zombies Part 2",
          "Creating a Targeting Site for a Weapon",
          "Burying the Undead",
          "Sinking Ragdolls",
          "Damaging The Player Part 1",
          "Damaging The Player Part 2",
          "Game Over Part 1",
          "Game Over Part 2",
          "Victory Dance"
        ],
        "Heads Up Display": [
          "Getting Started with Unity's UI",
          "Creating a Health Bar",
          "Ammunition Counts",
          "Displaying Bullets Left in Gun",
          "Building a Zombie Radar Part 1",
          "Building a Zombie Radar Part 2",
          "Adding Medkits and Ammo Boxes to the Radar",
          "Building a Goal Pointing Compass"
        ],
        "Final Touches": [
          "Lighting",
          "Reflection Probes",
          "Particle Systems Part 1",
          "Particle Systems Part 2",
          "Complex Fire Particle System",
          "Zombie Blood Spatter",
          "Screen Blood Spatter",
          "Sound Effects",
          "Zombie Sounds",
          "Randomly Playing Sound Loops",
          "Post Processing",
          "Future Work with Unity Packages",
          "Main Menu and Scene Switching",
          "Continuous Background Music",
          "Volume Controls"
        ],
        "Extra Challenges": [
          "Zombie Game Title",
          "Game Over",
          "Victory Music",
          "Three Strikes and You're Out",
          "Random Blood Splatter Sizing",
          "Zombies: More than One Shot Wonders",
          "Checkpoint Compass"
        ]
      },
      "requirements": [
        "Students must be confident with a procedural or object-oriented programming language such as C#",
        "Students will require a Mac or PC with the free version of Unity installed"
      ],
      "description": "Getting started in game development doesn't have to be scary.  All you need is the passion to learn and an inquisitive, experimental nature for combining code, animation, graphics, artificial intelligence, art and audio.  Sounds like a lot?  It is, but when you see how you as a solo developer can bring it all together there's a touch of magic in the air.\nUnity is the number one game development engine due to its ease of use and yet powerful abilities.  It works on all platforms and can export to desktop, console and mobile devices.  It's a great way for the beginner to jump straight into the world of game development and get their hands on the tools used by AAA game studios to produce games such as Hearthstone (Blizzard Entertainment), Cities: Skylines (Colossal Order) and Monument Valley 2 (ustwo Games) and best of all, for the beginner and hobbyist it is free!\nIn this course, Penny demystifies Unity's interface and plethora of tools to bring art, code, design, and more together to produce a fully-fledged First Person Shooter game completely from scratch. Using her internationally acclaimed teaching style and knowledge from over 25 years working with games, graphics, and having written two award-winning books on games A.I., Penny will take you from complete noob to a confident user of Unity. Throughout, you will follow along with hands-on workshops designed to take you through every step of becoming familiar with all the functionality of the game engine.  Throughout, you will work towards the creation of a First Person Shooter set in a post-apocalyptic world complete with zombies out for the player's brains!\nThis course was created with Unity 2019.3.11f however is compatible with Unity 2019.4.2f1 (LTS) on either Mac or PC.\nThe projects in this course have been tested in and work with Unity 6.\nLearn how to code, animate, and work with:\nThe Unity Development Environment.\nUnity's C# interface.\nTerrain Sculpting Tools for creating game maps.\nFirst Person Characters and Animations for Walking, Shooting, and Reloading.\nPickup Items for Medical Kits and Ammunition.\n3D Models of Zombies to add Animations for Walking, Chasing and Attacking.\nAn inventory system to keep track of player health and ammunition supplies.\nNavigation Meshes for programming the movement of zombies and path planning on a terrain.\nFinite State Machines for defining enemy A.I. behaviours.\nConstructing Ragdoll models for dynamic death animations.\nA Heads Up Display to inform the player of their health level and ammunition level, complete with a radar for locating zombies and a compass to guide the player home.\nSpecial Effects such as fire, blood splatter, and lighting techniques.\nBuilding the game to a standalone product.\nAll assets and incremental project files are included.\nContents and Overview\nThe course begins with a section to introduce you to the Unity interface.  If you are already familiar with Unity, you can skip to Section 3.  In this introductory session, we will cover Unity's window system, how to add models and textures, the creation of code to manipulate the properties of models, and the physics system.\nFollowing this, we will start work on the First Person Character (FPC).  You will learn how to add physics and code to move the character around, as well as add animated arms and a weapon that you can see in the game view.  You will also work to add animations for firing and reloading the weapon.  Audio effects for the player's footsteps and jumping will also be included here.\nNext, you will create pickup items for medical kits and ammunition that can be scattered around the game environment to provide extra resources to the player when their health or bullet levels get low.  Here you will learn about how colliders and triggers can be used to fire off code to update values on the player that store an inventory.\nWe will then jump into the Unity Terrain Sculpting tool and work through the creation of a large game map on which to place the FPC and enemies.  You will work with textures to colour the terrain and models, to add extra details such as trees and grass.  High-quality models of houses, rocks, fences, and other props will be included for you to be as creative as you like in developing the game environment.\nBy this point, you'll be ready to start adding the zombies.  You will first begin with the zombie models and learn how to add animations to them and then move them about on the game environment using navigation meshes.  Then we will cover one of the most popular artificial intelligence techniques used in games for creating simple behaviours in non-player characters; the Finite State Machine.  You will develop enemies capable of wandering, chasing, attacking, dying, and standing idle.  These actions will be linked to the location of the player such that the zombies will ignore the player when they are far away and only attack when in range.\nOnce these mechanics are in place, you will learn how to use raycasts to link the player's shooting animations with a hit to the zombie.  When hit, the zombie death animation will play and you will also be able to add in a ragdoll instead at this point.  We will work with spotlights to create a crosshair aiming system and program dead zombies to sink into the ground, to remove them from the game.\nLast but not least, we tie everything together with a Heads Up Display complete with health meter, an ammunition count, a radar for detecting nearby zombies, and a compass to point the player toward their goal location.\nOnce you have put all the game mechanics in place, you'll learn several techniques for taking your game to a more professional level with special effects, extra audio & feedback, and a main menu switching system.\nThis is the perfect course to get started with Unity if you are an absolute beginner or learn a few extra techniques if you are familiar with the engine.\nWhat students are saying about Penny's courses:\nExcellent course!! I am already in game development industry and there is one quote here that \"Whenever you are not able to solve complex problem, its the right time to get back to the BASICS\"\nPenny is a natural born teacher, able to explain otherwise difficult concepts in a fun, engaging way that just make such simple sense, and makes you wish you would have had her for a high-school teacher so long ago.\nThis course is absolute gold! I am a Software Engineering Teacher as well as a solo game developer, and of all the courses I have taken on Udemy, this is has been the most useful and eye opening by far.",
      "target_audience": [
        "Beginners interested in learning Unity and game development from scratch",
        "Beginners already familiar with Unity who want to learn how to create a First Person Shooter"
      ]
    },
    {
      "title": "Blender and Godot 4: Make a Low poly Ps1 Style Horror game",
      "url": "https://www.udemy.com/course/blender-and-godot-4-full-course-low-poly/",
      "bio": "From Modeling to Programming: Create Your Own Low Poly Horror Game",
      "objectives": [
        "Use Godot 4 to program a first person character with dynamic footsteps and head movement",
        "Use Blender to model and animate low poly models with ps1 style",
        "Publish and sell your first indie horror game on itch io",
        "How to make a low poly horror indie game"
      ],
      "course_content": {
        "Programming a First person character with dynamic footsteps sounds and cambob": [
          "Introduction to Godot 4 using 3D environments",
          "Rotate the player's camera",
          "Move the player and jumping",
          "HeadBob/Cambob Camera movement up down with code",
          "Walking sounds reliant on groups of the meshes",
          "Running player with faster sounds",
          "Interactive Generic and Inheriting"
        ],
        "Modeling basic assets": [
          "Getting and editing Textures for our game",
          "Modeling a simple apartment inside Godot",
          "Modeling a simple bed and adding it to godot",
          "Modeling a simple chair and applying textures to a model",
          "Applying Textures to the bed and adding a small Caravaggio Painting",
          "Modeling and texturing a door in blender"
        ],
        "Programming the First section of the horror game": [
          "Awesome places to get free 3d models - for problems in the models included",
          "Programming a Door and Key Logic",
          "Prompt for interactable objects",
          "Modeling a key with only base colors materials + More tricks with blender",
          "Modeling and texturing a key, also Even more models for free",
          "Window Resolution and Crosshair",
          "Godot 4 Shaders VHS Effect",
          "Assert Method and making the next levels",
          "Making sure everything works correctly"
        ],
        "Modeling and animating an enemy in blender / Landscape outside level": [
          "Landscape on blender with low fidelity textures",
          "Modeling and texturing a mountain and making a landscape level",
          "Animating and rigging a simple cube",
          "Enabling addons",
          "Modeling a 3d character with Modifiers",
          "Rigging a 3d character",
          "Run Cycle and Texturing a low poly character",
          "Modeling and hand painting a 3D model without skin modifier"
        ],
        "Navigation Region - Programming Enemy AI - Roam and Chase with FSM": [
          "Introduction to Enemy AI",
          "Enemy Scene and nodes",
          "Navigation Region and Navigation Agent 3D",
          "Roam",
          "Roaming around with rotation",
          "Screamer Scene and moving through scenes"
        ],
        "Particles/UI/NPC with dialogues": [
          "Particles 3D With mosquitoes and Keys",
          "Signals with UI How many keys can the player get while avooiding enemies",
          "Creating an NPC with dialogues",
          "Showing the dialogue box",
          "Dialogue Scene finished with npc talking to us"
        ],
        "Publish and sell your game on itch.io / steam / patreon / marketing": [
          "Making a 3D Main Menu Screen",
          "Marketing and selling indie games on itchio, steam, patreon"
        ],
        "Download the source code and assets for this project": [
          "Resource"
        ]
      },
      "requirements": [
        "No experience needed since most stuff is beginner friendly but if you have used godot or blender before that would be great!"
      ],
      "description": "Welcome to the ultimate Udemy course where you'll learn how to create an indie horror game that's reminiscent of the classic PS1 era. In this course, you'll discover how to use Blender 3D to model, animate and rig a terrifying enemy character that will haunt your players' dreams. And to model and texture simple 3d assets such as a bed, a chair, a door and a key. Using the godot engine to create a small apartment.\nWith step-by-step instructions and easy-to-follow tutorials, you'll learn the ins and outs of Godot, a popular game engine, to program your character's AI behavior and create a truly immersive gaming experience.\nAnd, to take your game development skills to the next level, you'll also learn the business side of indie game development by discovering how to market and sell your game on Itch io, the leading indie game distribution platform. You'll discover insider tips on how to get your game noticed, how to price it for maximum profit, and how to build a loyal fanbase.\nWhether you're a seasoned game developer or a complete novice, this course has everything you need to create a low-poly, spine-chilling horror game that will keep players on the edge of their seats. Enroll now and take the first step towards unleashing your inner game developer!\nI've been making games using the Godot Engine for at least 3 years and have published multiple games on both steam and itch io, so i hope this course helps you in your endevours to becoming a godot expert!",
      "target_audience": [
        "Anyone interested in learning Blender and Godot 4 with the example of a indie horror game"
      ]
    },
    {
      "title": "Intro to 3D Game Development Masterclass in Godot! (2024)",
      "url": "https://www.udemy.com/course/godot-masterclass/",
      "bio": "Learn how to build a 3D game from scratch in the Godot game engine with character controls, menus, dialogue, and items!",
      "objectives": [
        "Learn how to use the Godot game engine to create scenes with objects, lights, cameras, and a character that the player can control.",
        "Learn the basic infrastructure common to most games; including menus, saving and loading, game settings, and background music.",
        "Build an event management system that can display dialogue complete with choices, animate characters, move the camera, fade in and out, and mark progress.",
        "Build an inventory system that allows the player to pick up items, view them in a menu, drop, use, or equip items, and trade them with NPCs."
      ],
      "course_content": {
        "Introduction": [
          "Basics",
          "Practice"
        ],
        "Third Person Character Controls": [
          "Scripts",
          "Controls",
          "Import",
          "Walking",
          "Rotation",
          "Jumping",
          "Gravity",
          "Camera",
          "Dungeon",
          "Build Levels"
        ],
        "Game Development Essentials": [
          "Pause",
          "Title",
          "Transition",
          "Globals",
          "Music",
          "Settings",
          "Exit",
          "Enter",
          "Save",
          "Credits",
          "Build Characters"
        ],
        "Dialogue & Events": [
          "Dialog",
          "Monologue",
          "Event Manager",
          "Interact",
          "Choice",
          "Flags",
          "Camera",
          "Animation",
          "Direction",
          "Modularity",
          "Build a Cutscene"
        ],
        "Inventory & Shops": [
          "Coins",
          "Polish",
          "Pick Up",
          "Inventory",
          "Items",
          "Consumables",
          "Equipment",
          "Shop",
          "Build Items"
        ],
        "Combat": [
          "Setup",
          "Lock On",
          "Strafe",
          "Attack",
          "Weapon",
          "Hit",
          "Dodge",
          "Block",
          "Shoot",
          "Enemy"
        ]
      },
      "requirements": [
        "No experience necessary, everything is described in detail and taught step-by-step.",
        "The project starts from scratch and builds individual features one at a time. A sample project is available on GitHub for each section of the course.",
        "You may also choose to follow along with this course to add these features to your own game."
      ],
      "description": "In this course, we will start with a blank project and start by learning the basics of a third person character and camera controller popular in modern action adventure games.  From there we will add the essential elements that are common to most games such as menus, settings, music, saving, and loading.  Next we will add an event system capable of producing complex branching dialogues and cut-scenes complete with animation and camera movements.  Then we will add an inventory system which will allow the player to pick up money and items, see them in an inventory menu, drop, use, or equip their items, and trade them with NPCs.  Lastly, we will allow characters to engage in combat; attacking with weapons, blocking with shields, dodging, shooting projectiles, taking damage, and dying.\nJoin our discord server to work on this course alongside your peers!  Click the website link in my profile to join.\nYou'll also learn useful skills for working with the Godot game engine, organizing, and designing your projects to be more scalable.  You will be learning how to code with GDscript, with everything explained in detail.  Our scripts will be written to be highly customizable and reusable.  All of the project files will also be available on GitHub if you need to review the project as it was after completing each lesson.  These videos were recorded using Godot version 4.3.\nThis course contains:\nIntroduction to 3D Game Development\nGame Development Essentials\nDialogue & Events\nInventory & Shops\nDynamic Combat System\nIf you've already purchased any of these courses, please ask me for a discount on this course.\nThe assets used in this course are from KayKit's Adventurers and Dungeon Remasters packs along with Basic GUI bundle made by Penzilla, and music composed by Eric the Funny Baron.  The inventory icons were made by Shikashi.  All are available to download for free on itch.  Coins sound effects were made by Valenspire on FreeSound.",
      "target_audience": [
        "First time game developers, or anyone switching over to the Godot engine from other engines.",
        "Experienced 2D game developers who are interested in learning about 3D.",
        "Anyone who has completed beginner tutorials but would like to learn real game infrastructure that is scalable."
      ]
    },
    {
      "title": "Intro to Game Development using Unity - Part I",
      "url": "https://www.udemy.com/course/intro-to-game-development-using-unity-part-i/",
      "bio": "A 2D game will be developed from scratch - perfect beginning course for middle and high school age students!",
      "objectives": [
        "Build a basic 2D game using Unity with knowledge and confidence.",
        "Gain an understanding of the game development process.",
        "Use your new Unity skills to create your own games.",
        "Use your Unity knowledge to rapidly launch into learning Augmented, Virtual, and Mixed Reality (AR/VR/MR) development and more."
      ],
      "course_content": {
        "Intro and where to download Unity": [
          "Introduction",
          "What is Unity?",
          "Review Questions for Section 1"
        ],
        "Creating Game Basics": [
          "Unity Interface Basics - Part I",
          "Unity Interface Basics - Part II",
          "Still Life",
          "Still Life Starts to Move",
          "Moving Things Around",
          "Intro to Scripting - Part I",
          "Intro to Scripting - Part II",
          "Review Questions for Section 2"
        ],
        "Adding Gameplay": [
          "Point in the Right Direction",
          "Colliding with the Worm",
          "Bird takes the Worm Home",
          "A Quick Note"
        ]
      },
      "requirements": [
        "A PC or laptop computer",
        "Download and install Unity (see lesson 2)",
        "Curiosity…"
      ],
      "description": "A 2D game will be developed from scratch and you’ll quickly learn the basics of game development and more.\nPerfect for Middle and High School students and just about anyone else who wants to get started developing games. No programming experience at all is required - just an interest in creating a game in Unity, the same software used to create Pokemon Go and so many other best selling games! You’ll painlessly learn the basics of scripting too, because the videos introduce scripting as necessary along the way in both Part I and Part II of the course.\nYou’ll be amazed at how fast you can learn Unity. And, you’ll quickly become confident with all the game-creating basics. The pace of each video is designed for ease of learning, and not designed to cram as much as possible into each lesson. As an option, for those of you who want to continue game development using more features of Unity, the Part II course is available to add to your journey…\nAnd more good news: the Unity basics, features, tools, and principles you learn in this this course apply to all Unity games and apps you may develop! So no time is wasted learning 2D first - it's super fun, easy, and fast coming up to speed in Unity and then gaining the confidence to design and attack your next game. And that next game can be an AR, VR, 3D, or whatever you want because you'll have the knowledge to learn these new features quickly.  Btw, I'm thinking about creating a 3D AR version of this game that can be played on your Android or Apple phone but also on the exciting META smartglasses (and possibly others). If you think you would be interested in such a course, please send me a message that you would be interested :) Thanks.\nWhat are students saying about this course?\nAWESOME! This tutorial is clear and easy to understand. You have explained everything perfectly and I had no problems at all as well as in the last few tutorials. I have got to understand about developing games and I love it.\n- The video has very good graphic's quality\n- The sound is clear\n- You speak nice a slow which makes me understand everything really easily\n- This tutorial is really for the very beginners and I have learned new thing without problems at all.\nPS: I was trying to search tutorials like this for weeks and now I found your videos, You won't even believe how proud am I because I would like to be a software or a game developer. Sorry for my English, but I am still learning. Thank You !  BlenderModeling CZ",
      "target_audience": [
        "This course is for complete beginners with no programming experience. The best, easiest, fastest, and most fun way to learn Unity - guaranteed!!!",
        "Teenagers, middle and high school students, artists, hobbyists, and others will get a gentle introduction to game development",
        "This course is not for users already familiar with developing games using Unity"
      ]
    },
    {
      "title": "Python for Unreal Engine Editor Tools Scripting",
      "url": "https://www.udemy.com/course/ue4python/",
      "bio": "Step by step into the new editor Python API of the Unreal Engine towards a new world of productivity tools development",
      "objectives": [
        "Create Unreal Engine tools & Helpers with Python",
        "Understand the Unreal Engine new Python scripting API",
        "Learn how to build UI tools that is Python based for Unreal Editor",
        "Be able to create unique tools for Unreal Engine 4 or 5"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Prepare the working Environment",
          "Understand the API Reference"
        ],
        "Learning and Mastering the Unreal Python API": [
          "The multiple ways to Execute Python scripts",
          "Logging to Console",
          "The Unreal Engine Python Modules",
          "Make the best out of the Output Log",
          "Access asset files through Python",
          "Access world actors through Python",
          "Factories & asset creation",
          "Progress Tasks",
          "Create new assets through Python",
          "Create new actors through Python",
          "Editor UI window for Python scripts",
          "Read/Editing properties for assets or actors through Python",
          "Advanced UI Python based Editor window",
          "Python Editor tools launcher",
          "Support Unreal Python tools with Python native functions"
        ],
        "Full Examples": [
          "Example 1 - Animation Notifies Cleaner",
          "Example 2 - Delete Unused Assets",
          "Example 3 - Multi Material Instancer",
          "Example 4 - Organize and Prefix all the Project assets"
        ],
        "Conclusion": [
          "What's Next?"
        ],
        "Updated Project Files": [
          "UE4.27 & UE5.0 compatible files"
        ]
      },
      "requirements": [
        "Familiar with Unreal Engine (4 or 5)",
        "Basic knowledge of Python syntax",
        "Passion to the topic!"
      ],
      "description": "Epic games taking huge steps into allowing python for editor scripting, while it was experimental for the UE4.x cycle, it is now a turned ON by default for UE 5.x, and it is massively growing everyday. This opens a huge door for an entire new world of possibilities, starting from automation tools, ending up with full UI tools. In this course we will be going step by step from nothing into the mastery of the Unreal Editor Python scripting in a 4 hours journey.\nWith python editor scripting, you are not only going to create very productive tools, but also will save your time from the slow process of plugins creation and get new opportunities in the game industry that you never though about before. Python is an important language nowadays in the game industry, and using it with Unreal Engine (4 or 5) is a win at all aspects. And that's the main target for that course!\nRegardless if you're targeting Unreal 4 or Unreal 5, the knowledge in that course is 100% applicable at both of them. The course been recorded with Unreal 4, but it was fully revised again with Unreal 5 and made sure that everything covered is still valid.",
      "target_audience": [
        "Existing Unreal Engine users who want to start using the new Unreal Python API to build editor tools & helpers",
        "New Unreal Engine users who want to start with the Editor tools development through Python"
      ]
    },
    {
      "title": "The Ultimate Guide to Unity Designpatterns",
      "url": "https://www.udemy.com/course/ultimate-guide-to-designpatterns-in-unity/",
      "bio": "Improve your Coding Skills in the Unity3D Engine beyond beginner Level with Designpatterns for Unity.",
      "objectives": [
        "Queue Actions of the player, so they are executed one after another",
        "Create a history of player-actions with an undo-Functionality",
        "Write cleaner code",
        "Improve the performance of your game",
        "Improve your game's data-structure by using ScriptableObjects",
        "Implement the Singleton, Objectpool, Flyweight and Command - Designpatterns in your game"
      ],
      "course_content": {
        "Introduction": [
          "Course Overview"
        ],
        "Singleton": [
          "Introduction to Singleton",
          "Singleton - Overview",
          "Static - Keyword",
          "Implementation of Singleton",
          "Exercise - Simple Singleton",
          "Exercise - Solution",
          "GameManagers",
          "Advanced Implementations - Don'tDestroyOnLoad",
          "Advanced Implementations - Lazy Instantiation",
          "Singleton - Summary"
        ],
        "Object Pool - Designpattern": [
          "Introduction to ObjectPool",
          "Implementing an ObjectPool",
          "ObjectPool Exercise",
          "ObjectPool Exercise Solution",
          "Performance Comparison of different ObjectPools",
          "Queues - Theory",
          "Implementing Objectpool with Queues",
          "Advanced Objectpool with Lazy Instantiation"
        ],
        "Flyweight - Designpattern": [
          "Flyweight - Basics",
          "Comparison of different Approaches",
          "Basic Implementation",
          "ScriptableObject - Basics",
          "ScriptableObject - Implementation",
          "(Optional) ScriptableObject - Pitfalls",
          "(Optional) ScriptableObject Singletons",
          "Implementing Flyweight with ScriptableObjects",
          "Solution for Exercise"
        ],
        "Command - Designpattern": [
          "Command - Overview",
          "Command Introduction",
          "Basic Implementation",
          "Exercise1: Remappable Input",
          "Example - RemappableInput Solution",
          "Formal Definition of the Designpattern",
          "Queue Commands",
          "Queue Commands Implementation",
          "Exercise2: Queue Commands",
          "Exercise Queue Commands - Solution",
          "(Optional) More Sophisticated Implementation",
          "Undo Commands",
          "Exercise3: Undo Commands",
          "Exercise Undo Commands - Solution"
        ],
        "Summary": [
          "Summary"
        ]
      },
      "requirements": [
        "Fundamental understanding of Unity, C# and objectoriented Programming"
      ],
      "description": "If you already possess a fundamental understanding of C# and the Unity Engine and want to improve your coding skills further, then this course is for you.\nThe Ultimate Guide to Unity Designpatterns introduces you to best practice solutions for common problems in gameprogramming. You will discover how you can improve the quality of your code by using these important Designpatterns, which are specifically adapted to make use of the unique features of the Unityengine, like for example ScriptableObjects.\n\n\nIn this course you will:\nImplement best practice Solutions to common problems in gameprogramming\n\nDiscover the Singleton - Designpattern\n\n- Structure your game more elegantly\n\nDiscover the ObjectPool - Designpattern\n\n- Improve the performance of your game\n\nDiscover the Command-Designpattern\n\n- Implement a history of player-actions with an Undo-Functionality\n\n- Queue Actions of a player, so they are executed one after another\n\nDiscover the Flyweight - Designpattern\n\n- Improve your game's data-structure by using ScriptableObjects\n\n- Reduce the RAM-Usage of your game\n\n\nThis course is very project-based and practical, so you will implement the concepts directly in small games.\nFor each Concept you will be challenged to implement it yourself, but if you don't feel up to the task you will also be shown a well explained step-by-step guide how to implement it.\n\nThe course also features several Demo-Projects, where you can look up best practice implementations.\nIt also features Projects which are specifically designed to compare the performance of different approaches for implementing these Designpatterns.\n\n\nWhy learn from me?\nI have been a game-programming teacher for more than 5 years now and as a result have plenty of experience in what works and what doesn't when teaching programming. Also I am a firm believer, that you can only learn the high craft (some might even say art) of programming, if you practice it. Which is why I put much effort into making the advantages of these designpatterns clear by giving you small practical assignments where you are challenged to improve an existing game's code with these designpatterns.\n\n\nBecome a better Programmer, now! I'll meet you inside the course!\nWho is the target Audience?\nUnity users who want to improve their programming skills beyond basic tutorials\n\nProgrammers who want to improve the Performance, Quality  and Expandability of their Code\n\nCoders who want to add a few battle-proven solutions for common problems in gameprogramming to their toolkit",
      "target_audience": [
        "Unity users who want to improve their programming skills beyond basic tutorials",
        "Programmers who want to improve the Performance, Quality and Expandability of their Code",
        "Programmers who want to add a few battle-proven solutions for common problems in gameprogramming to their toolkit"
      ]
    },
    {
      "title": "Complete RPG Maker MZ: Create and Publish for PC and Mobile",
      "url": "https://www.udemy.com/course/complete-rpg-maker-mz/",
      "bio": "Learn character creation, map creation, battle systems, cutscenes, puzzles, plugins coding and deploy to PC and Mobile",
      "objectives": [
        "Learn everything about RPG Maker MZ from beginner stuff to the most advanced features like Debug mode and Custom Tilesets.",
        "Complete your own game, with your own story and make it ready for mobile devices including both Android and Apple iOS.",
        "Learn about the best community made plugins to add features that will make your game more professional and different, improving Battles and Dialogues.",
        "Use JavaScript to write your own plugins and make your game unique and stand out of the rest. This section requires coding, don't worry, I will help you!",
        "Create engaging puzzles that add to your story and give your players the rewarding feeling of completing a level.",
        "Create Anime-Style cutscenes including Bust Graphics within dialogue texts, and simple animations without any code.",
        "Create your own Heroes and Enemies, your own Maps and Levels, your own Classes and Skills. Create Items and Shops for players to trade."
      ],
      "course_content": {
        "Introduction": [
          "Why RPG Maker MZ is perfect for Indie Games",
          "Installing RPG Maker MZ from Steam",
          "Creating your first Actor - The Hero",
          "The Actor's Database",
          "Create 4 Actors - The Party",
          "Creating your first Map - The Character Selection Level",
          "Creating your second Map - The World as we know it",
          "Creating your firsts Events - A Hero is born",
          "Polish your Maps"
        ],
        "Storytelling with RPG Maker": [
          "A Hero's Journey Template",
          "Create an original Adventure using the Hero's Journey Template",
          "Basic Dialogue",
          "Adding Music and Sound Effects",
          "Advanced - Conditional Dialog",
          "Populate your Maps - The World needs people to be alive",
          "Advanced - In-Game Cutscenes",
          "Advanced - Custom Tilesets",
          "Create you Alternate World for the B Story"
        ],
        "Role Playing Games Core Mechanics": [
          "Actors, Classes, Skills and States",
          "Items, Weapons and Armors",
          "Create a custom Weapon and Armor",
          "Enemies and Troops",
          "Encounters and Battles",
          "Advanced - Battle Events",
          "Advanced - In-Battle Cutscenes",
          "Create your Nemesis, General and Captains"
        ],
        "Community made Plugins for a more professional result": [
          "Installing DLC and Plugins",
          "Plugins for Tweaking Keyboard Control",
          "Plugins for Improved Texts on Dialogs",
          "Plugins for customizing Title Menu",
          "Plugins for Main Menu enhancements",
          "Plugins for Auto Saving and Saved Games Management",
          "Plugins for Enhancing Battle Experience"
        ],
        "Adding Puzzles inside your Game to make it different, memorable and rewarding": [
          "Keys and Doors",
          "Levers and Buttons",
          "Debug Window",
          "Pushing Objects",
          "Advanced - Logic Puzzles",
          "Create your own Prison Escape Puzzle"
        ],
        "Advanced - More Event Commands": [
          "Message",
          "Game Progression and Flow Control",
          "Party and Actor",
          "Movement and Timing",
          "Character",
          "Picture",
          "Screen, Audio and Video",
          "Scene Control and Shops",
          "Map",
          "System Settings",
          "Battle"
        ],
        "Advanced - Creating your own plugins with JavaScript": [
          "Installing Visual Studio Code and Resources",
          "Plugin Anatomy Overview",
          "Plugin Help and Settings",
          "Plugin Commands",
          "Script Calls Reference",
          "Expert - Mirros and Lasers Puzzle",
          "Expert - MIrrors and Lasers Puzzle Continued",
          "Let's celebrate you are now a Master of RPG Maker"
        ],
        "Showdown - Let's finish this game": [
          "Common Events",
          "Animations Quick Overview",
          "System, Types and Terms",
          "Create the final showdown for your game"
        ],
        "Advanced - Publishing your Game": [
          "Deployment for Windows and MAC OS",
          "Sharing your Game with others for testing",
          "Deploying for Web",
          "Expert - Deploying for Android using Apache Cordova",
          "Expert - Deploying for iOS using Apache Cordova"
        ],
        "Bonus Material": [
          "Get Completed Projects for each Section",
          "Updating to newer versions of RPG Maker MZ",
          "Great Utopia - Making of this Awesome Game"
        ]
      },
      "requirements": [
        "RPG Maker MZ software that costs $80 on Steam (many times it goes on sale).",
        "Windows PC or Mac OS X laptop or desktop.",
        "No coding experience required, but if you are into coding you will love the section on creating your own plugins with JavaScript.",
        "A passion for telling stories and willingness to complete a full game.",
        "Optionally some free available software like Steam, Visual Studio Code, GIMP and Paint .NET"
      ],
      "description": "Are you ready to become an RPG Game Maker!\nThis comprehensive course will be teach you how to use the power of RPG Maker to create your very own games, including characters, maps, cutscenes, and new game mechanics that are unique and different thanks to the power of JavaScript plugins.\nOnce you learn how to publish to Windows, Mac, iOS and Android; you will be able to prove your skills to others as an Indie game developer. Finishing a full game is hard, specially using more complex tools like Unity or Unreal, but with RPG Maker and this course you will definitely be able to complete your own game and show it off, even sell it if that is what you want.\nRPG Maker is simple to use, but since it uses JavaScript at its core, you can create completely new mechanics like puzzles and quests. Don't worry, I will guide you on how to achieve this. In addition to this, learning how to publish JavaScript based games as multi-platform apps is a highly in demand skill that will make you a more valuable professional, not just in the game industry but in the web and app development industry too.\nThis course uses the newest version of RPG Maker, which is RPG Maker MZ released on mid 2020, but I consider that users of the previous version, RPG Maker MV, will also benefit from this course since they are very similar, and because this course is yours too keep, once you are ready to upgrade you will have the latest info.\nWith 60 lectures, this is the most complete RPG Maker MZ course currently available.\nSo what are you waiting for? Start your career as an indie game developer with this course right now!",
      "target_audience": [
        "You love retro RPG games and Anime, and want to create your own game or visual novel.",
        "You don't want to spend hundreds of hours building a game in more complex engines like Unity or Unreal.",
        "You already know RPG Maker MZ but need guidance on the complex stuff like publishing on mobile or coding your own plugins."
      ]
    },
    {
      "title": "Advanced AI for Games; Behaviour Trees (Unity 6 Compatible)",
      "url": "https://www.udemy.com/course/behaviour-trees/",
      "bio": "Create your own Behaviour Tree API in C# and apply it in the Unity Game Engine",
      "objectives": [
        "Students will learn the theory of behaviour tree design.",
        "Students will learn how to develop a behaviour tree API in C#",
        "Students will learn how to use behaviour trees to define the actions of non-player characters."
      ],
      "course_content": {
        "Introduction": [
          "Course Overview",
          "Join the H3D Student Community",
          "Contacting H3D",
          "FAQs",
          "Setting up Pathfinding in Unity",
          "Updating to Unity 6"
        ],
        "Behaviour Tree Concepts": [
          "Introducing Behaviour Trees",
          "Nodes",
          "Tree Printing",
          "Leaf and Action Nodes",
          "NavMesh Movement",
          "Sequences",
          "Selectors",
          "Extending Action Methods",
          "Conditions"
        ],
        "Advanced Behaviours": [
          "Inverters",
          "A Generic Agent Class",
          "Optimising with Coroutines",
          "Repeating Tasks",
          "Ensuring Node Status Return True States of GameObjects",
          "A Prioritising Selector",
          "Dynamically Changing Node Priorities",
          "Random Selector Challenge",
          "Shuffle and Sort Once"
        ],
        "Refactoring for Scalability": [
          "Dealing with Arrays of Choice",
          "Traditional AI: Fleeing Part 1",
          "Traditional AI: Fleeing Part 2",
          "Building A Complex Behaviour Tree",
          "Cancelling Sequences with Conditions",
          "Abandoning Sequences",
          "Adding Co-dependancy Challenge",
          "Fallback Behaviours"
        ],
        "Adding New Agent Challenge": [
          "Art Lovers",
          "Art Lovers Behaviour",
          "A Coroutine to Effect Agent Properties",
          "The Loop Decorator Node"
        ],
        "Environmental Factors": [
          "Blackboards",
          "Integrating Blackboard State Challenge",
          "Not Daylight Robbery",
          "Agent Cooperation",
          "Interacting Agents",
          "Assigning Individual Agents to Work with Each Other",
          "Thinking like a Behaviour Tree",
          "Remember to Add Dependencies"
        ],
        "Final Challenge": [
          "Cop Patrol Challenge",
          "Cop & Robber Challenge"
        ],
        "Final Words": [
          "Debugging a Behaviour Tree",
          "Some Final Words from Penny",
          "Where Do I Go From Here?"
        ]
      },
      "requirements": [
        "Students should have a solid understanding of C#",
        "Students should have a working knowledge of the Unity Game Engine."
      ],
      "description": "Behaviour Trees (BTs) are an A.I. architecture that provide game characters with the ability to select behaviours and carry them out, through a tree-like architecture that defines simple but powerful logic operations.  It can be used across a wide range of game genres from first-person shooters to real-time strategies and developing intelligent characters capable of making smart decisions.   The codebase is deceptively simple and yet logical, reusable and extremely powerful.  The library is written in C# and implemented in Unity 2020, however will easily port to other applications.\nThe project has been tested in Unity 6!\nIn this course, Penny demystifies the advanced A.I. technique of BTs used for creating believable and intelligent game characters in games, using her internationally acclaimed teaching style and knowledge from almost 30 years working with games, graphics, and having written two award-winning books on games AI. Throughout, you will follow along with hands-on workshops designed to take you through every step of putting together your own BT API.  You will build the entire BT library from the ground up, while building an art gallery simulation scenario in parallel, to test the API as you go.\nLearn how to program and work with:\nA Behaviour Tree Library and API that's reusable across a wide range of game projects.\nTree architectures, nodes, leaves, sequences, and selectors that define the behaviour of individual non-player characters (NPCs).\nNavigation Meshes and Agents that provide advanced path planning and navigation capabilities for characters.\nA Blackboard System that acts as a global inventory for world states and allows characters to communicate with each other.\nContents and Overview\nThroughout the course, you will follow along while a BT library and API are constructed from the ground up, to allow you intimate knowledge of the codebase.  Alongside this, a simple art gallery simulation will be constructed to test out the functionality of the library as it is put together.  The simulation will also rely on Unity's NavMesh System for navigation and path planning.\nThe course begins with an overview of Behaviour Trees and covers all the fundamental elements (including trees, nodes, leaves, sequences, selectors, and other logical constructs). Code will be developed to navigate the Behaviour Tree and used to drive non-player characters in the art gallery including a robber, cop, visitors and workers. Throughout this, students will gain a solid knowledge of how Behaviour Trees are constructed and can be traversed, to apply actions to game characters.\nAt the completion of this course, students will have a fully-fledged BT library and API that they can reuse in their own game projects, to provide game characters with complex intelligent behaviours.\nWhat students are saying about Penny's courses:\nTurns out, the hardest part of this course for me is finding the words to describe how glad I am to have enrolled in it.\nI honestly love Hollistic's teaching approach and I've never learned so much within a few hours about coding effectively with such detailed explanations!\nPenny is an excellent instructor and she does a great job of breaking down complex concepts into smaller, easy-to-understand topics.",
      "target_audience": [
        "Intermediate game development students wanting to extend their knowledge of artificial intelligence techniques used in games."
      ]
    },
    {
      "title": "Game Development in JS/TS - The Complete Guide (w/ Phaser 3)",
      "url": "https://www.udemy.com/course/game-development-in-js-the-complete-guide-w-phaser-3/",
      "bio": "Master game dev with Javascript/Typescript and Phaser 3. Create popular browser games from scratch. Publish on Facebook.",
      "objectives": [
        "Learn developing games by creating the games",
        "Core concepts of game development",
        "Use Javascript/Typescript to develop games for Facebook",
        "Publish your own game on Facebook Instant Games"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "New game, new section",
          "How to resolve issues"
        ],
        "Flappy Bird Clone": [
          "Section Intro",
          "Init Project Tips",
          "Init Project",
          "Inspect App",
          "Creating Phaser App",
          "Displaying image",
          "Origin Points",
          "Create Sprite",
          "Velocity",
          "Gravity",
          "Note for the next lecture",
          "Moving back and forth",
          "Flapping feature",
          "Restarting the game",
          "Credit the authors",
          "Place Pipes",
          "Pipe Vertical Distance",
          "Pipe vertical position",
          "Render Multiple Pipes",
          "Place pipe refactor",
          "Pipe Group",
          "Get right most pipe",
          "Recycle pipes",
          "Moving all code to play scene",
          "Shared Config",
          "Play Scene",
          "More refactoring",
          "Add collider",
          "Pause game physics",
          "World bound colliders",
          "Restart the game",
          "Keep Score",
          "Keep Best Score",
          "Pause button",
          "Pausing the game",
          "Menu Scene",
          "Preload Scene",
          "Optimization in Scenes",
          "Base Scene",
          "Menu items",
          "Setup menu events",
          "Navigate to correct scene",
          "Best Score",
          "Back button",
          "Pause Scene",
          "Resume the game",
          "Resume event",
          "Count down",
          "Fixing the flap",
          "Adding difficulties",
          "Increase difficulty",
          "Bird Spritesheet",
          "Play bird animation",
          "Game finished"
        ],
        "Dino Game Clone": [
          "Section Intro",
          "Init project",
          "Add and inspect assets",
          "Create more scenes",
          "Add parts of the ground",
          "Game height and types",
          "Create Player",
          "Types and modules",
          "Make Dino Jump + Namespace",
          "Adds gravity to player",
          "Trigger contact",
          "Player class",
          "Update loop",
          "Player Jump Done",
          "Move Trigger Down",
          "Roll out the ground",
          "Push player to the front",
          "Play run animation",
          "Set texture while jumping",
          "Is game running check",
          "Game scene type",
          "Fix first jump display",
          "Spawn obstacle prep",
          "Spawn obstacle",
          "Preload config",
          "Add obstacle speed",
          "Remove obstacles after passing bounds",
          "Move the ground",
          "Collide with obstacle",
          "Handle dino loose",
          "Display Game over text",
          "Display game over container",
          "Handle Restart Click",
          "Code cleanup",
          "Restart the game",
          "Get dino down",
          "Play down animation",
          "Spawn enemy birds",
          "Enemy anims + Small improvements",
          "Display clouds",
          "Display score text",
          "Keep score value",
          "Display score value",
          "Game speed modifier",
          "Increase game speed",
          "Create highscore text",
          "Compute high score",
          "Add tween to score text",
          "Jump sound",
          "Hit sound",
          "Progress Sound and game done"
        ],
        "Platformer game intro": [
          "Section Intro",
          "Important! Tiled Version",
          "Init Platformer Game",
          "Tiled Explanations",
          "Create your first map",
          "Add map to the game",
          "Layer Refactor",
          "Add Player",
          "Platform as the layer collider",
          "Adds Collidable layer"
        ],
        "Create a player": [
          "Section Intro",
          "Handle Player Movements",
          "Create player class",
          "Player class preUpdate",
          "Player Update Event",
          "Running animation",
          "Idle animation",
          "Switching the animations",
          "Jumping",
          "Double Jump",
          "Play Jump Animations",
          "Mixins",
          "Function to init player colliders",
          "Map offset",
          "Setup camera",
          "Player Zones",
          "Player Spawn Point",
          "Create end zone",
          "End zone overlap"
        ],
        "Enemies": [
          "Section Introduction",
          "Creates a enemy",
          "Enemy body size",
          "Player body size",
          "Create multiple enemies",
          "Enemy super class",
          "Enemies group",
          "Birdman anims"
        ],
        "Raycasting": [
          "Section Introduction",
          "Draw the line",
          "Draw the line in real time",
          "Check tile hits",
          "Colliding tile color",
          "Add raycast on the enemy",
          "Detect the platform in raycast",
          "Optimize performance in raycasting",
          "Turn with the enemy",
          "Fixing direction",
          "Max patrol distance",
          "Small Refactor of patrol",
          "Add Steepnes to raycast"
        ],
        "Player takes a hit": [
          "Section Introduction",
          "Player takes a hit",
          "Bounce off",
          "Set timeout to set velocity",
          "Timed Event",
          "Delay call + Debug",
          "Animation tween"
        ],
        "Healthbar": [
          "Section Introduction",
          "Starting Health Bar",
          "Display Health Bar",
          "Drawing Correct Position",
          "Display healthbar on correct position",
          "Display White Background",
          "Display Green Health",
          "Decrease the health",
          "Healthbar scaling"
        ],
        "Projectiles": [
          "Section Introduction",
          "Projectile",
          "Destroy Projectile",
          "Projectiles Group",
          "Fix the projectile",
          "Correct direction of projectile",
          "Centering the projectile",
          "Projectile Cooldown",
          "Throw anim",
          "Projectile collides with enemy"
        ]
      },
      "requirements": [
        "Minimal Javascript or other programming language knowledge"
      ],
      "description": "What is Phaser?\nPhaser is a framework for creating HTML-based games in Javascript. It’s very simple to use and get started with. It provides a full set of features to create professional games ready to be published on different platforms. Such as Facebook Instant Games, IOS, or Android platforms.\n\n\nWhat is in the course?\nDuring this course, you will acquire hands-on experience in developing three games entirely from scratch. The games include a clone of Flappy Bird, a well-known Dino game from Google Chrome, and a custom Platformer game. No shortcuts will be taken throughout the course, ensuring a comprehensive understanding of the development process. The curriculum encompasses JavaScript, with an added section dedicated to creating a game using TypeScript.\n\n\nThis course is designed to teach you how to create your own games from scratch using Javascript and the Phaser framework. Through a series of practical exercises, you will learn how to develop games that are engaging, challenging, and fun. By the end of the course, you will have created your own games that can be published on Facebook Instant Games.\n\n\nThe course will cover a range of important concepts in game development, including how to initialize the Phaser Game, manipulate physical concepts like gravity and velocity, create and recycle game objects, and use multiple scenes like menu, score, pause, and play. You will also learn how to create difficulty systems and keep track of scores.\n\n\nIn addition to these foundational concepts, the course will also teach you how to create more complex games like platformers. You will learn how to use the Tiled editor to design maps and levels, create different types of attacks like melee and projectile attacks, and animate game objects like characters and enemies. We will also cover advanced concepts like Raycasting, which will allow you to detect enemies and traps, and create a health system that triggers game over when health reaches zero.\n\n\nThe final project of the course will be to create a multi-level platformer game. You will learn how to unlock levels and display credits once the player reaches the end of the game. Throughout the course, you will gain valuable experience that can be applied to other game development platforms like Unity or Unreal Engine.\n\n\nIn conclusion, this course offers an extensive and practical introduction to game development with Javascript and the Phaser framework. Whether you're a beginner or an experienced developer, you will gain valuable insights and skills that will enable you to create your own engaging and fun games.",
      "target_audience": [
        "People looking for the practical game development guide",
        "Beginner developers eager to start developing games",
        "Experienced developers discovering new development opportunities"
      ]
    },
    {
      "title": "Unreal Engine 5 Dedicated Servers with AWS and GameLift",
      "url": "https://www.udemy.com/course/unreal-engine-5-dedicated-servers-with-aws-and-gamelift/",
      "bio": "Build UE5 Dedicated Servers with Cloud Backend - Databases, User Pools, Virtual Machine Hosting, all on the Free Tier!",
      "objectives": [
        "Compile Unreal Engine from source and package dedicated servers",
        "Integrate your Unreal Engine game project with cloud backend services",
        "Save persistent data to cloud databases from within Unreal Engine",
        "Create secure user pools for your games so players can log in from within the game",
        "Create Dedicated Server-hosted lobbies",
        "Manage game sessions with Amazon GameLift",
        "Learn cloud architecture and become an AWS cloud architect"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Getting Started": [
          "Your First Challenge",
          "On Unreal Engine - The Source Build Version of the Engine",
          "On Updates and Documentation",
          "Unreal Source Build",
          "FPS Template Project",
          "Integrating GameLift - Prerequisites",
          "Server Build Target",
          "GameLift Server SDK - Plan",
          "GameLift Server SDK - Perl",
          "GameLift Server SDK - NASM",
          "GameLift Server SDK - OpenSSL",
          "GameLift Server SDK - Server SDK",
          "GameLift Server SDK - Building the Plugin",
          "Using Rider",
          "Section 2 Quiz"
        ],
        "AWS Account": [
          "AWS Account",
          "AWS Billing Management",
          "Identity Center vs IAM",
          "Identity Center User",
          "Permission Sets",
          "Section 3 Quiz"
        ],
        "Integrating GameLift with UE5": [
          "Game Mode",
          "Command Line Arguments",
          "On Start Game Session",
          "On Process Terminate",
          "On Health Check",
          "Port",
          "Process Ready",
          "Packaging the Game",
          "OpenSSL Binaries",
          "Section 4 Quiz"
        ],
        "GameLift Anywhere Fleets": [
          "The AWS CLI",
          "AWS Configure",
          "Create Location",
          "Anywhere Fleet",
          "Register Compute",
          "Get Compute Auth Token",
          "Testing the Dedicated Server",
          "Create Game Session",
          "Create Player Session",
          "Section 5 Quiz"
        ],
        "GameLift Fleets": [
          "Virtual Machines Basics",
          "Build Install Script",
          "Upload Build",
          "Creating GameLift Fleet",
          "Connecting to the Server Build",
          "Deleting the Fleet",
          "Section 6 Quiz"
        ],
        "AWS Lambda": [
          "Serverless",
          "Creating a Lambda",
          "Anatomy of a Lambda Function",
          "Testing a Lambda",
          "Console Log",
          "List Fleets",
          "Try Catch",
          "Section 7 Quiz"
        ],
        "API Gateway": [
          "API Gateway - Our Plan",
          "API Gateway",
          "Creating a Module",
          "Dedicated Servers Game Mode",
          "API Test HUD",
          "List Fleets Widgets",
          "HTTP Request Manager",
          "Game Sessions API Data Asset",
          "Making an HTTP Request",
          "Parsing an HTTP Response",
          "Parsing the Metadata",
          "Parsing the Payload",
          "Parsing Errors",
          "ListFleets Callback",
          "Displaying Fleet Data",
          "Section 8 Quiz"
        ],
        "Game Sessions": [
          "Portal Setup",
          "JoinGame Callbacks",
          "Describe Fleet Attributes",
          "Looping Over Fleets",
          "Describe Game Sessions",
          "Create Game Session",
          "Find or Create Game Session Endpoint",
          "Find or Create Game Sessions HTTP Request",
          "Game Session Struct",
          "Parsing the Game Session Response",
          "Section 9 Quiz"
        ],
        "Player Sessions": [
          "Create Player Session Lambda",
          "Create Player Session Endpoint",
          "Handle Game Session Status",
          "Serializing Content",
          "Player Session Struct",
          "Parsing Create Player Sessions",
          "Traveling to the Server",
          "Testing Absolute Travel",
          "Section 10 Quiz"
        ]
      },
      "requirements": [
        "Must know the basics of Unreal Engine and C++",
        "Must have 230+ GB of storage for an Unreal Engine source build"
      ],
      "description": "This course uses the AWS Free Tier!\nHave you ever wondered how you can let your players launch your game, and connect directly with a server, playing in multiplayer with other players right away?\nOr perhaps how you can allow your players to create user accounts for your game, with username, password and email? How do games allow you to sign up for a new user account, receiving a 6 digit verification code in their email, allowing them verify their account for your game?\nHave you ever wondered how to save player data in databases, so they can see their achievements in the game, showing their progress, skill level, items, or stats from previous matches? Or how leaderboards are made, showing the top scoring players who play the game across the planet?\nHow can you run dedicated servers that players can connect to? How can you set up servers in different regions around the globe, providing access to your game to players in different countries, allowing them to enjoy gameplay with the lowest possible ping times? And how to make competitive multiplayer games fair to all players, with an authoritative server optimized to manage server operations, reduce lag and provide a consistent and performant experience for everyone?\nThis course is a masterclass for dedicated servers and cloud backend for unreal engine games.\nBy the end of this course, you will be able to:\nCompile Unreal Engine from source, create client and server build targets, and package dedicated server and client builds of your game\nIntegrate the GameLift Server SDK into your game to connect with GameLift\nLearn how to make API calls with the AWS (command-line interface)\nHost dedicated servers, both on your own machine and on cloud-hosted virtual machines (and you’ll know what those are)\nLearn how to create serverless functions (in AWS Lambda) to access cloud resources and use AWS SDKs\nCreate secure user pools, where your game's players can create their own login/password, with email verification with Amazon Cognito\nImplement security, requiring temporary access tokens granted via user pool login in order to perform game actions\nCreate your own REST API with endpoints that can be accessed via HTTP request, and secure them to require authentication tokens using Amazon API Gateway\nLearn about HTTP requests and how to send them from Unreal Engine C++ code, triggering serverless functions and accessing cloud resources\nLearn about formatting JSON data for HTTP requests, and Unreal's JSON utilities for conversion from JSON to USTRUCTs for ease of use of data retrieved from the cloud\nCreate NoSQL databases, storing persistent game data for players, including game stats, career, and leaderboard info using the DynamoDB, a high-speed, highly optimized system for storing data to databases\nImplement game lobbies, managed by dedicated servers, displaying player names and efficiently replicating lobby data with Fast Array Serializers\nCreate a sign up/login menu with email verification for new users, and a game Access Portal where we can view Career and Leaderboard data, as well as launch the game lobby\nLearn AWS best practices when it comes to security, Identity and Access Management, Identity Center, Roles, Policies, and Permissions\nLearn how to access the AWS documentation for all AWS APIs and how to easily use them to create code to create, access, and manipulate data on the cloud\nCreate and manage Game Sessions and Player Sessions in Amazon GameLift\nCreate Server and Client packaged builds of your game, and connect to the server from client builds without any external tools (just launch the game, sign-in in the game, connect in the game)\nConnect to cloud services without even being connected to a game server (single-player games)\nClosely monitor your aws billing and management console and setup billing alarms\nAnd so much more!\nYou’ll be creating an AWS account and learning how to manage it using recommended best practices for the cloud. All of the core features of this course use the free tier, aside from two optional lectures using advanced security features in AWS for custom access token scopes – which cost me less than .69 cents to implement for this course. But you can skip those two lectures if you wish to stay in the free tier.\nI’ve created and provided you with an FPS template project as a starting point, with shooter mechanics so we can have some stats to save to the cloud, but it’s not required – you can use your own game project, or a completely empty game project if you want! This course is about creating and hosting servers and setting up the cloud backend for your games.\nWe’ll be downloading and compiling Unreal Engine from source – which means you will need at least 230 GB of storage for this course. You must know the basics of Unreal Engine C++. You must use an Unreal source build of at least UE5.4 or above. (You can use the latest version of the engine, everything works).\nYou do NOT need any experience or knowledge of cloud architecture.\nIt’s time to take your games to the next level, and learn how shipped games manage their users, data, and their game servers.\nAre you ready to upgrade your game development skills? I’ll see you in the course!",
      "target_audience": [
        "Those who wish to deploy their games to dedicated servers",
        "Those who want to scale their games to a player base",
        "Those who want to save persistent data to cloud databases",
        "Those who want their games independent of other services such as Steam"
      ]
    },
    {
      "title": "Learn To Create a Turn-Based Strategy Game With Unity & C#",
      "url": "https://www.udemy.com/course/unity-turnbased-strategy/",
      "bio": "Game development made easy. Learn C# using Unity and create your own strategy action game!",
      "objectives": [
        "Learn C#, a modern versatile programming language",
        "Understand the capabilities of 3D development in Unity",
        "Develop strong and transferrable problem solving skills",
        "Gain an understanding of the game development process",
        "Learn how object oriented programming works in practice"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Assets"
        ],
        "Getting Started": [
          "Setting Up The Project",
          "The Unity UI",
          "Setting Up Our Scene"
        ],
        "Player Control": [
          "Setting Up The Player",
          "Creating A Script & Moving",
          "Moving To A Specific Point",
          "Clicking To Move",
          "Creating More Players",
          "Setting An Active Player"
        ],
        "Movement Grid": [
          "Creating The Movement Grid",
          "Tidying Up The Grid",
          "Detecting The Ground",
          "Avoiding Obstacles",
          "Hiding The Grid"
        ],
        "Camera Control": [
          "Setting Up The Camera System",
          "Following The Player",
          "Moving The Camera Manually",
          "Snapping Back To The Player",
          "Rotating The Camera"
        ],
        "AI Navigation": [
          "Setting Up AI Navigation Mesh",
          "Moving With AI Navigation",
          "Making Enemies"
        ],
        "Taking Turns": [
          "Setting Up A Turn Order",
          "Switching Characters After Action",
          "Making It More Random",
          "Skipping Enemy Turns",
          "Using Turn Points",
          "Limiting Move Range"
        ],
        "Moving With Menus": [
          "Setting Up The Player Menu",
          "Making The Menu Appear",
          "Making Move Input Work",
          "Adding Walking & Running Options",
          "Changing Action Costs",
          "Showing Turn Points",
          "Cancelling Movement",
          "Fixing Accidental Movement",
          "Skipping Your Turn"
        ],
        "Melee Attacks": [
          "Setting Up The Melee Menu",
          "Checking For Melee",
          "Carrying Out Melee",
          "Waiting After Melee",
          "Switching Targets",
          "Showing The Attack Target",
          "Improving The Indicator",
          "How To Fix Bugs (A Camera Problem)",
          "Show An Error Message"
        ],
        "Health System": [
          "Creating A Health System",
          "Defeating Enemies",
          "Setting Up Health UI",
          "Updating Health UI",
          "Billboarding UI"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2021.3 or newer"
      ],
      "description": "Learn how to create and program your very own turn-based strategy game using Unity, an industry-standard game development program used by large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to understand such game elements as:\nA Turn-Based System\nMoving Characters on a Grid\nMeleeing, Shooting & Defending Action Types\nA Full Health System\nAI Decision-making & Navigation\nA Full Camera Movement & Rotation System\nSpawning In Randomised Positions\nAnimation & Audio Systems\nBattle Select System\nand much more...\nThe course also includes a complete version of the project to use for your own reference to ensure everything in your game works as it should!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own turn-based strategy games",
        "People who want to create and publish their own games",
        "Complete beginners with an interest in learning game development",
        "Developers who want to re-skill across to game development",
        "People interested in working in the game design industry",
        "Competent and confident with using a computer"
      ]
    },
    {
      "title": "Unity 2D Game - Kawaii Survivor - The Coolest Roguelike Ever",
      "url": "https://www.udemy.com/course/unity-2d-game-kawaii-survivor-the-coolest-roguelike-ever/",
      "bio": "Create an Amazing 2D Roguelike like Brotato or Vampire Survivors in Unity (Mobile / PC)",
      "objectives": [
        "Object Oriented Programming Principles & How to Apply Them to any game",
        "Creating a SOLID Architecture for this game, and any other one",
        "Planning your Game ahead of time to Ease its Development",
        "Designing & Implementing Complex User Interfaces",
        "Creating an Modular Inventory System",
        "Creating a Unique Roguelike Game in Unity",
        "Writing Clean & Reusable Code"
      ],
      "course_content": {
        "Introduction": [
          "Course Presentation",
          "Starter Pack",
          "Free Additional Packages"
        ],
        "A Solid Base": [
          "The Game Plan",
          "Setting Up Source Control",
          "Exploring The Starter Pack"
        ],
        "Let's Control Dave": [
          "I present you, Dave",
          "Applying Physics to Dave",
          "Controlling Dave With a Joystick",
          "Appendix 01 - Mobile Joystick Setup",
          "Appendix 02 - Mobile Joystick Code",
          "Appendix 03 - Mobile Joystick Knob",
          "Appendix 04 - Mobile Joystick Polish"
        ],
        "Camera Control": [
          "Some Quick Explanations",
          "Following Dave",
          "Clamping Camera Position"
        ],
        "The Arena": [
          "Our First (Really Simple) Arena",
          "Sorting Layer & Order Explanations",
          "Using Unity's Tilemap System",
          "Polishing our Arena",
          "Making the Arena More Interesting",
          "Advanced Sprite Sorting",
          "Built-in Sprite Sorting (Update)",
          "Appendix 05 - Fun 2D Colliders Experiment",
          "Evaluate your knowledge"
        ],
        "Refactoring & Building The Game": [
          "Refactoring the Player",
          "Building the Game Already"
        ],
        "The First Enemy": [
          "Following the Player",
          "Getting Close Enough & Various Gizmos Tips",
          "Your First Particle System",
          "Playing the Enemy Pass Away Particles",
          "Adding a Spawn Indicator",
          "Using a Tweening Library",
          "Completing the Spawn Sequence",
          "We are under Attack !",
          "We All Love Refactoring !",
          "Evaluate your knowledge"
        ],
        "Player Health": [
          "Basics of Player Health",
          "Adding a Health Bar",
          "Coding the Health Bar",
          "Adding a Text Overlay"
        ],
        "Weapons": [
          "The First Weapon",
          "Aiming at Closest Enemy",
          "Using Physics to Detect Enemies",
          "Smoothing out Weapon Aiming",
          "Animating the Bad Way",
          "Animating the Good Way",
          "Destroying Enemies",
          "Dealing Damage To Enemies (how cute)",
          "A Better Attack",
          "Keeping Track of Attacked Enemies",
          "Auto Attack",
          "Quick Fixes",
          "Evaluation"
        ],
        "Damage Particles": [
          "The First Particle",
          "The First Particle Animation",
          "Spawning The Particles",
          "Linking Particles To Enemies",
          "Your First Pool",
          "Improvements",
          "Appendix 06 - Introduction to Actions",
          "Appendix 07 - Actions with Arguments",
          "Appendix 08 - Decoupling Scripts",
          "Appendix 09 - Additional Information on Actions"
        ]
      },
      "requirements": [
        "Unity 2023.2 or higher",
        "Some Basic Unity Knowledge will definitely help",
        "Some Basic C# Knowledge will definitely also help",
        "If you don't have these, you will need Patience my Friend (but I will help you achieve your goals)"
      ],
      "description": "Hey Guys, Welcome to the Ultimate Journey into the creation of a 2D Roguelike game in Unity !\n\n\nIf you want to create an Amazing Roguelike game similar to Vampire Survivors, Brotato or Survivor . io, or simply take the source code, reskin it, and publish it, (...) you’re at the right place !\n\n\nIn this course, we will embark on a Thrilling Adventure through every aspect of game development, from Fundamental Mechanics to Advanced Features that will bring your game to life, and Drastically Improve your Game Development Skills.\n\n\nFirst off, you will learn how to create a Safety Net that will save you HOURS, Source Control.\nYou will learn how to use Github Desktop so that you can have Local Backups of your game, and prevent any unhappy accident.\n\n\nOnce this is correctly setup, We can have fun !\n\n\nYou will learn how to Create a 2D Character using custom made art, Thank you Alex, Animate it, and Control it with a Responsive Joystick.\n\n\nWe will then add Enemies wandering around, looking to exterminate us, but We are not going to back down!\nWe will add Melee & Ranged Weapons so that we can properly defend ourselves.\nAnd if we ever face tougher enemies, we can still Merge our Weapons and make them Stronger.\nYou will learn how to create a Fully Customizable Wave System, so that you decide which enemies spawn when.\n\n\nLike any respectable Roguelike, and in line with Vampire Survivors or Brotato, our character will have Stats.\nFor this course, I’ve decided to add the following ones\n\n\nAttack\nAttackSpeed\nCriticalChance\nCriticalPercent\nMoveSpeed\nMaxHealth\nRange\nHealth Recovery Speed\nArmor\nLuck\nDodge\nLifeSteal\nbut we can still add more if you’ve got ideas, so Feel free to Contribute!\n\n\nTo manage all of these Player Stats, we do need a Great Code Architecture right ?\nOf course we do !\nAnd you are also going to master that !\n\n\nYou will learn some of the Best Coding Practices to make for a SOLID basis, that will allow you to expand on the game, and jump boost your next one.\n\n\nYou won’t use public variables everywhere, this is not healthy\nInstead, you will finally learn how to correctly use private, protected, static, override, virtual & abstract keywords.\nInheritance, Polymorphism, Interfaces & Scriptable Objects will make maintaining our code way easier and enjoyable compared to writing spaghetti code and dealing with whatever mess we would have created…\n\n\nYou will learn how to Manage the Flow of the Game correctly using a Game Manager, and Game States, so that you can correctly configure any system, at each stage of the game cycle.\n\n\nTo Manage all of the weapons & Items, we will create a versatile Inventory System, and give it a nice display with Double Sliding Panels !\n\n\nTalking about that, it’s time to mention the User Interface. I can assure you that it won’t have anymore secrets to you.\n\n\nYou will learn how to Layout your elements so that they fit any screen size\nAnimate the UI the right way with interchangeable animations\nMaster Scroll Views & the different Layout Components so that your UI actually matches your Design (by the way, I came up with a super easy way for that)\nAnd again, DOUBLE SLIDING PANELS !!!\n\n\nWe will add a sweat Character Selection panel, where players can purchase… characters of course with a Premium Currency.\nBecause yeah there is the candy, the currency used to purchase weapons & items during the battle, but this can’t be used for characters.\nSo I’ve decided to show you how to manage Multiple Currencies!\nThis is actually a good thing for the future of the course “Wink wink”\n\n\nCherry on the Top\nYou will learn how to polish the game, and make it shine. We will add\nCamera Shake\nMake use of Object & UI Shader Graphs (these are used to create the scrolling pear texture, sweat huh ?)\nSound Effects\nHaptics (Bzzt Bzzt)\nParticles\nDamage Floating Text\nColor Palettes\n\n\nAll along the way, I will give you some nice Tips & Tricks that will help you code Faster, in a More Consistent way & make your Game Dev Journey more Fun !\n\n\nThere’s even more to the course, you can scroll through the Curriculum because I also need to keep some things secret to spark your curiosity right ?\n\n\nAre you Ready to Level Up your game development skills and create an Exceptional Roguelike Game?\nJoin us on this exciting journey, Enroll now!\n\n\nExtra Packages !\nI’m giving you 2 Hand Made Packages “Mineral” & “Sijil” for free in this Course.\nMineral will let you color your folders to make your experience more enjoyable.\nSijil will make Saving & Loading a breeze ! (No More PlayerPrefs ! (I will still show you how to use them though… Just in case!))\n\n\nP.S. : You can also grab the Complete Source Code attached to the last lesson of the course (The one just before the Bonus Lecture), just sayin’",
      "target_audience": [
        "Those who want to create a Unique Roguelike / Roguelite Arena Shooter in Unity",
        "Those who want to Level Up there Coding & Thinking Skills",
        "Those who want to Design & Implement Intricate User Interfaces",
        "Those who want to support my work"
      ]
    },
    {
      "title": "Build a Idle Clicker Business Sim: Unity C# Game Development",
      "url": "https://www.udemy.com/course/build-a-tycoon-business-sim-in-unity3d-c-game-development/",
      "bio": "Learn Unity and C# Design Patterns by building a fun Idle Business Game Similar to ADVenture Capitalist!",
      "objectives": [
        "Create an Idle Business Tycoon Game in Unity3D Using C#",
        "Improve Game Development Skills by Using Important Design Patterns",
        "Create a Game User Interface in Unity 3D UI Tools",
        "Extend the Tycoon Game with Additional Features such as Managers & Store Upgrades",
        "Complete 100% Source Code with Tons of Comments",
        "BONUS: Idle Game Data Generator and Custom Inspector for Advanced Students!",
        "Using Scriptable Objects to Structure Game Data"
      ],
      "course_content": {
        "Start Building Your Tycoon Game": [
          "Introduction to the Business Tycoon Course and Example Gameplay",
          "Creating Your Unity3D Project",
          "Create Your First Tycoon Store",
          "Create Your First C# Script",
          "Update Your User Interface with Script Output",
          "Tracking Money With Your First IF Statement in C#",
          "EXERCISE: Show us the Money! Update the UI",
          "Time To Make Money! Create a Basic Timer to Track the Time of your Store Income"
        ],
        "Expand Your Tycoon Game With Multiple Stores": [
          "Watching Your Money! Setup a Progress Bar in Unity 5.0 UI",
          "Getting Down To Business! Create a Simple Game Manager",
          "Keeping Your Business Private - Understanding Private and Public Variables",
          "Now You're a Tycoon! Setting Up Multiple Stores",
          "EXERCISE: Expanding Your Empire! Create and Configure Multiple Stores"
        ],
        "Adding Features to Your Tycoon Game": [
          "Automating the Store Timer",
          "Improving the Cost Calculation of Stores",
          "Displaying Store Cost on the Store Buy Button",
          "Improving the Buy Button on the Store to Change Color and Other Features",
          "Improving Your Image - Adding a Picture to Your Stores",
          "Introduction to Unity Prefabs",
          "Hiding Stores The Player Cannot Afford",
          "Improve Gameplay with Small Code Changes"
        ],
        "Getting Down to Serious Business- Take Your Development Skills to the Next Level": [
          "Improving The Game Manager Using the Singleton Pattern",
          "Creating a UI Manager to Improve Game Design - Better Object Composition",
          "Improve Your Game Design using Delegates and Events or the Observer Pattern",
          "Getting Stores Their Very own Store UI Manager",
          "Finishing Up Business on the Store UI Manager Refactoring",
          "Getting More Efficient By Moving Code out of Unity Update Methods",
          "EXERCISE: Make Your Business Private Only!"
        ],
        "Make Your Stores Easier to Manage by using XML for Maintaining Store Data": [
          "Introduction to Loading Your Store Configuration Data from XML",
          "Loading Game Data in from XML - It's really not all that hard!",
          "NEW!!! Setting up a Grid Layout to Hold your Store Prefabs",
          "Building Your Store Prefabs Automatically - Data Driven UI Design",
          "Setting The Store Name from XML",
          "Loading the Store Image from XML",
          "Loading Additional Store Data",
          "Creating an Event to Notify the Game Manager",
          "Loading the Games Starting Balance From XML",
          "EXERCISE: Give Your Company a Name",
          "EXERCISE: Refactor the Load XML Code"
        ],
        "Add a UI to Unlock Store Upgrades - Managers to Automate Clicks for the Stores": [
          "Create the Layout for Unlocking the Store Manager Upgrades",
          "Programatically Create the Unlock Manager Prefabs",
          "Setting Up Our Simple State Machine",
          "Creating Our Method To Unlock the Store Managers",
          "Learn How to Programatically Add a Listener To Your Button",
          "Finishing Up the Store Manager UI"
        ],
        "JUNE 2017 UPDATE - Add Upgrades the player can purchase to improve their store": [
          "Overview and setup up for adding upgrades to our store",
          "Setting Up The Interface For Your Store Upgrades",
          "Creating The Prefabs For The Upgrades",
          "Modifying The Load Game Data Script To Support Our Upgrade Prefab",
          "Unlock The Upgrade and Upgrade the Store Multiplier",
          "Finalize (and Abandon) Our Single Upgrade Per Store Design",
          "Modify the Design To Handle Multiple Upgrades Per Store",
          "Creating a StoreUpgrade Class to Improve our Game Design",
          "Adding a Listener To the Upgrade Button",
          "Finalizing the Multiple Store Upgrades"
        ],
        "JULY 2017 UPDATE - Massive New Game Upgrade - Unity Business Tycoon 2.0": [
          "Overview of the new Unity Business Tycoon 2.0 Upgrade",
          "Looking at the New Game Manager - Namespaces, Constants, Setters & Getters",
          "New Game Manager Methods and Understanding the basics of Coroutines",
          "Resetting our game and understanding static methods and properties",
          "Loading and Managing BIG NUMBER Descriptions",
          "Introduction to the Idle Game Data Generator - Loading From CSV FIles",
          "Generating Idle Game Data into XML",
          "Creating a Custom Inspector and Refactoring to eliminate using prefabs",
          "Using a Custom Inspector to Generate Idle Game Data"
        ],
        "NEW MAJOR Scriptable Object Upgrade - Released DEC 2022": [
          "Introduction to the 2023 Scriptable Object Upgrade",
          "Creating Scriptable Objects",
          "Loading Data From Scriptable Objects",
          "Creating Scriptable Objects Through Script"
        ]
      },
      "requirements": [
        "Have Unity 3D installed and Understand the Basics of Unity 3D",
        "Previous Programming Experience is not Required but is Preferable",
        "Totally New Programmers Should Expect to Watch Videos Multiple Times and Supplement Their Knowledge"
      ],
      "description": "NEW LECTURES ADDED DEC 2022\nI'm happy to announce four new lectures that demonstrate how to use Scriptable Objects to store data.\n\n\nTHE SOURCE CODE THAT COMES WITH THIS COURSE IS A GREAT VALUE AT TEN TIMES THE PRICE!\n\n\nBUILD A FULL FEATURED IDLE GAME WITH COMPLETE SOURCE CODE\nIn this course you will learn how to create an Idle Business Tycoon Game from the ground up that is similar to games such as ADventure Captialist, Web Tycoon, and Cookie Clicker. But more importantly, this course is designed to teach critical game development concepts and design patterns popularized by the Gang of Four.\nDo you enjoy playing Tycoon and other Simulation or Idle games?\nDo you know a little bit about C# and Unity3D but would like to take your Development Skills to the next level?\n\nYou can play AdVenture Capitalist (free on Steam) to get a very good idea of the core game play you will learn to create in this course.\n\n\nMore than 13 Hours of HD 1080P Instruction!\nLearn Important Unity Interface Concepts\nGreat for Beginning to Intermediate Level Game Programmers (Now includes advanced bonus content)\nProduced by Greg Moss of Odoo Class Videos - an Expert in both Enterprise & Game Development Tutorials\nStarts off with simple C# that even a beginner can understand... end up with a full feature idle game!\nCreate full unique games in seconds with dozens of stores and upgrades with the Exclusive Idle Game Data Generator.\nFULL SOURCE CODE and updated projects for Unity 2019, Unity 2020, and Unity 2021.\nVersion 2.0 released December 2021! Now with Scriptable Objects and Full Custom Inspector!\n\n\nTO BE HONEST... THE SOURCE CODE ALONE IS A GREAT VALUE AT TEN TIMES THE PRICE!\nCourse Overview: This course focuses on core Game Design and Programming Principals. I use the tools in Unity to create the Interface and Artwork is all from Creative Commons. The game design borrows from many of the idle Business Tycoon type games such as AdVenture Capitalist, Cookie Clicker, and others.\n\n\nBy the end of the course you will be able to customize the game as you please and create your very own idle game.\n\n\nThis course starts at the beginning but ramps up quickly to teach you important Game Design Patterns that you must know to write professional games:\nBeginning Skills:\nLearn how to create a Unity3D Project\nThe entire project is created step-by-step. Start at the very beginning!\nPerfect for those that are new to Unity and Programming in General\nStart right away using Unity 3D's newest UI tools to create a working tycoon store\nWrite your first C# script and learn the basics of variables, IF statements, creating a Timer, and other simple programming concepts\nCreate an Animated Progress Bar to Show your Store in Operation\nVideo exercises along the way help reinforce what you are learning\nImproving Your Business Tycoon Game Features and Your Development Skills:\nUpgrade the Game Design to Handle Multiple Stores\nCreate a Game Manager to Better Track Money in the Game\nLearn to Implement Math Functions to Calculate Your Next Store Cost\nAdd an Icon for your Store and Learn to Create Dynamic Buttons\nLearn Important Beginner C# Structures and Basic Unity 3D Game Development\nTaking Your Game Development Skills To the Next Level:\nDesigned to take you through important design patterns to improve your development skills\nImprove Your Game Manager with the Singleton Pattern\nUse Delegates and Events to implement the Observer Design Pattern\nRefactor your Tycoon Game into a UI Manager\nUse Unity Prefabs to dynamically create your stores at run time\nLearn to Load Game Data from XML! Critical to allowing gamers to create mods\nLearn to build a State Machine within the UI Manager to handle the various interface states within your growing Tycoon Game\nCreate a Managers Panel to extend the basic game design and provide a template for you to continue adding features to your business tycoon game\nPerfect for those who wish to see how to implement real game designs so you can apply them to more advanced systems and future Tycoon games\n******  ANNOUNCEMENT MASSIVE NEW COURSE UPDATE  *******\nI'm happy to announce that we have completed a major upgrade for the Tycoon Business Sim course! Take your game development skills to the next level. Download the full source code for the entire project!\nThis upgrade will include many new features that are found in commercial idle clicker games including:\nNew video Lectures covering both functional and technical aspects of the game\nLearn how to save and load game progress\nCalculate idle profits (make money when the game isn't even running!)\nCreate a screen to display profits while you were gone\nLearn how to create Scrollviews\nImproved Screen Design and Layout Tips\nCreate games with unlimited stores!  (memory & cpu limitations apply)\nUse the new multiplier button for buying multiple stores at a time\nCalculate earnings per-second for your operations\nBig number descriptions for up to 300 exponents!\nHandle \"Angel\" investors or \"Transcendence\" also known as NewGame+\nNew lectures on how to setup and implement your Idle Tycoon Business Simulation\nSUPER BONUS - Generate Idle Game Data with custom Unity3d Inspector!!\nGenerate Idle Game Data to create procedural generated stores, managers, and upgrades\nLoad and Save Game Template settings to easily generate new game designs\nNo need to hand key store data and upgrades... Adjust parameters to generate the idle game data\nData stored in human readable XML to be easily modified and tweeked as desired\nNew Learning Opportunities!\nUpgraded course video content that reviews the technical upgrades of the project\nStatic methods and properties\nUsing constants\nLoading game data from XML\nUse PlayerPrefs to save game state\nLoading configuration and store names, managers, and upgrades from CSV\nBuild a custom inspector\nBetter division and integration between game models and UI\nImproved performance and smoother gameplay with threading and coroutines\nUsing Setters & Getters to protect your class properties\nUsing LINQ with ArrayLists\nTons of comments throughout all the code\nNew Lectures that cover all the new content\nTEN BONUS LECTURES WALKING THROUGH ADVANCED CONCEPTS!!!!\nLearn Unity and C# fast with code reviews and detailed explanation of advanced architecture concepts.\nCopyright 2015-2021 First Class Ventures, LLC.  This item is not authorized for posting on Steam, or any other game or game asset site without permission.",
      "target_audience": [
        "Anyone Interested in Building an Idle Business Tycoon Game similar to AdVenture Capitalist",
        "Designed for Ambitious Beginners Who Wish to go Quickly From Basics to More Intermediate Game Design",
        "For Beginner to Intermediate Level: Step-by-Step How to Build the Core Gameplay from the Ground Up",
        "Intermediate Programmers who Wish to Learn Design Patterns and Refactoring Techniques"
      ]
    },
    {
      "title": "Master Unity By Building 6 Fully Featured Games From Scratch",
      "url": "https://www.udemy.com/course/make-mobile-games-like-a-pro-using-unity-game-engine/",
      "bio": "Learn How To Plan, Design, Create And Publish Your Games On Any Platform Using Unity Game Engine",
      "objectives": [
        "Program And Solve Complicated Problems Using C#",
        "Organize Project, Slice And Animate Sprites",
        "Learn How To Use New Unity UI System",
        "Create Menus, Levels And Loading Screens",
        "Learn Unitys Physics System",
        "Encript And Save Your Game Data Using Binary I/O",
        "Create Level And Character Lock/Unlock System",
        "Play Music In Your Game",
        "Implement In-App Purchase And Sell Virtual Items",
        "Implement Social Media In Your Game",
        "Share On Facebook From Your Game",
        "Implement Video And Interstitial Ads",
        "Implement Watch Video Earn Virtual Item System",
        "Publish Your Game On Google Play"
      ],
      "course_content": {
        "Introduction": [
          "Introduction And The Course Overview",
          "Downloading Unity",
          "Installing Unity And Taking A Look At Its Interface",
          "Your First Game"
        ],
        "C# Basics": [
          "Introduction To Variables",
          "Operations With Variables",
          "Functions",
          "Conditionals",
          "Loops",
          "Arrays",
          "Coroutines",
          "Classes And Objects",
          "Inheritance",
          "Getting Components",
          "Data Encapsulation",
          "Delegates"
        ],
        "Jack The Giant Recreated In Unity 5": [
          "Jack The Giant Game Preview",
          "Importing Assets For Jack The Giant",
          "Player Animations",
          "Prefabs, Colliders And Rigid Bodies",
          "Player Script",
          "Adding Backgrounds To Our Game",
          "Cloud Collector",
          "Cloud Spawner",
          "Positioning The Player",
          "Camera's Movement",
          "Respawning Clouds",
          "Background Collector",
          "Players Bounds",
          "Creating Our Main Menu",
          "Animating UI Elements",
          "Highscore Menu And Options Menu",
          "Navigating Between Menus",
          "Creating Our Score UI And Pause Panel",
          "PlayerScore Script",
          "Creating Collectable Items",
          "Gameplay Controller",
          "Gameover Panel",
          "Game Manager",
          "Game Preferences",
          "Filling The Blanks",
          "Filling The Blanks 2",
          "Music Controller",
          "Scene Fader",
          "Moving The Player With Joystick",
          "Unity Remote",
          "Exporting Our APK File",
          "About The Walk Animation Problem",
          "Importing Admob Ads Plugin",
          "Ads Controller"
        ],
        "Flappy Bird": [
          "Flappy Bird Preview",
          "Importing Assets For Flappy Bird",
          "Slicing Our Sprites",
          "Creating Animations",
          "Prefabs, Colliders And Rigidbodies",
          "Creating Gameplay Scene",
          "BirdScript",
          "Finishing BirdScript And Creating Camera Script",
          "BG Collector",
          "Pipe Collector",
          "Finishing Touches",
          "Creating Main Menu",
          "Creating Pause Menu",
          "Game Controller",
          "Menu Controller",
          "Scene Fader",
          "Gameplay Controller Part 2",
          "My Coroutine",
          "Before Adding Plugins",
          "Downloading 3RD Party Plugins",
          "Configuring Google Play Games Services",
          "Leaderboards Controller",
          "Social Media Controller",
          "Ads Controller"
        ],
        "Cowboy Runner": [
          "Cowboy Runner Preview",
          "Improting Assets For Cowboy Runner",
          "Sprite Packer",
          "Player And Zombie Animations",
          "Preparing Obstacles",
          "Creating Our Backgorunds",
          "Player Jump",
          "Player Animation And Obstacle Script",
          "Obstacle Spawner",
          "Obstacles And Player Off Screen",
          "Creating Menus",
          "Gameplay Controller",
          "Beffore Adding Plugins",
          "Publishing APK File On Google Play",
          "Before You Publish Your App On Google Play - IMPORTANT",
          "Downloading And Configuring Google Play Games Services",
          "Leaderboards Controller",
          "Publishing Settings"
        ],
        "Spider Cave": [
          "Spider Cave Preview",
          "Importing And Slicing Our Sprites For Spider Cave",
          "Player Animations",
          "Player Script",
          "Spider Shooter And Spider Jumper",
          "Spider Walker",
          "Door And Collectables",
          "Bouncy",
          "Creating Menus",
          "Creating Our Level",
          "Camera Follow",
          "Creating Our UI HUD",
          "Gameplay Controller",
          "Joystick Movement"
        ],
        "Puzzle Game": [
          "Puzzle Game Preview",
          "Importing Assets For Puzzle Game",
          "Configuring And Slicing Our Sprites",
          "Creating Main Menu",
          "Creating Main Menu Buttons",
          "Creating Settings Panel",
          "Settings And Select Puzzle Panel Animations",
          "Programming Main Menu And Settings Panel",
          "Creating Puzzle Level Select Panel",
          "SelectPuzzle Script Continued",
          "Puzzle Game Panel",
          "Puzzle Button",
          "Load Selected Level",
          "Load Selected Level Part 2",
          "Creating Puzzle Buttons And Puzzle Buttons Animators",
          "Laying Out Puzzle Buttons",
          "Setting Up Our Puzzle Game",
          "Puzzle Game Manager",
          "Flipping Our Puzzle Buttons Up",
          "Controlling The Guesses",
          "Check If The Puzzles Match",
          "Counting Guesses",
          "Creating Game Finished Panel",
          "Game Finished Script",
          "Finishing Our Gameplay",
          "Game Data",
          "Puzzle Game Saver Part 1",
          "Puzzle Game Saver Part 2",
          "Level Locker",
          "Stars Locker",
          "Wrapping Things Up",
          "Background Music"
        ],
        "Ball Panic": [
          "Ball Panic Game Preview",
          "Importing Ball Panic Assets In Our Project",
          "Slicing Our Sprites",
          "Creating Player And Brick Animations",
          "Prefabs, Colliders And Rigidbodies",
          "Balls, Bricks, Tags, Layers And Sorting Layers",
          "Creating Arrow And BG Brick Prefabs",
          "Rigidbodies, Colliders And Scripting Players Movement",
          "Bouncing Balls",
          "Moving Arrows",
          "Ready, Aim , Fire The Arrow",
          "BallScript Continued",
          "Player Shoot Once And Player Shoot Twice",
          "ArrowScript Continued",
          "BrickScript",
          "Unity UI Intro",
          "Designing Our Main Menu",
          "ShopMenu, LevelMenu And PlayerMenu",
          "GameController Part 1",
          "GameController Part 2",
          "MainMenuController",
          "MusicController",
          "PlayerMenuController Part 1",
          "PlayerMenuController Part 2",
          "ShopMenuController",
          "LevelController And Loading Screen",
          "Gameplay UI",
          "GameplayController Part 1",
          "GameplayController Part 2",
          "GameplayController Part 3",
          "GameplayController Part 4",
          "Player Movement For Mobile Devices",
          "Testing Our Game On Mobile Devices",
          "PlayerScript Continued",
          "BallScript Continued",
          "Designing Levels",
          "Before Adding Plugins",
          "Before You Publish Your App On Google Play - IMPORTANT",
          "Downloading 3RD Party Plugins",
          "Importing 3RD Party Plugins In Our Project",
          "Preparing Purchase Items",
          "SocialMediaController Part 1",
          "SocialMediaController Part 2",
          "Testing Our Game On A Real Device",
          "Sharing On Facebook From Our Game",
          "LeaderboardsController",
          "AdsController",
          "Final Test Of The Game"
        ],
        "Tips And Tricks": [
          "Publishing Tips",
          "Ad Tips",
          "Performance And Physics Tips",
          "Sprite Tips"
        ],
        "Jack The Giant Created In Unity 4.5": [
          "Before You Begin This Chapter",
          "Importing Assets For Jack The Giant",
          "Slicing Our Sprites",
          "Animating The Player",
          "Prefabs, Colliders And Rigidbodies",
          "Scripting Player's Movement For Keyboard",
          "Unity Remote And Android SDK",
          "Controlling Player Animation Through Our Code",
          "Screen And World Coordinates",
          "Scripting Player's Movement For Mobile Devices",
          "Scripting Camera's Movement",
          "Preparing The Background",
          "Scripting BGCollector",
          "Scripting BGSpawner",
          "Setting Up Cloud Colliders",
          "Scripting Cloud Spawner 1",
          "Scripting Cloud Spawner 2",
          "Scripting Cloud Spawner 3",
          "Scripting Cloud Spawner 4",
          "How To Test Games On Devices",
          "Black Cloud Script",
          "Preparing Collectables",
          "Score System",
          "Creating UI For Life, Coins, And Score",
          "Displaying Score, Coins, And Lives With GUIText",
          "Player Boundaries",
          "Spawning Collectables In Game",
          "Scalling Camera And Background",
          "New UI Intro",
          "Common UI Elements",
          "Preparing Main Menu",
          "Scripting Main Menu Buttons",
          "Navigating Between Scenes",
          "Scripting Options Menu",
          "Creating Menus With OnGUI",
          "Creating Menus With The New UI",
          "Animating New UI Menus",
          "Introducing Player Preferences",
          "Setting Up Default Values For Our Game Preferences",
          "Background Music Setup",
          "Checking If The Music Is On Or Off",
          "MusicOn And MusicOff Buttons",
          "Setting The Difficulty",
          "Setting Up Highscore Menu",
          "Setting The Speed Based On Difficulty",
          "Is The Game Started From Main Menu Or Is It Restarted After Player Died",
          "If The Player Dies",
          "Time Scale",
          "Fading Our Scene",
          "Creating Our Pause Menu",
          "Preview The Score After Player Dies",
          "Before We Add Ads",
          "Implenting Ads",
          "Implementing Ads In Our Game"
        ]
      },
      "requirements": [
        "Unity 5 Game Engine(Free Version)"
      ],
      "description": "*** The Course Is Updated With New Lectures Which Makes It Easier For Beginners To Understand Programming Concepts ***\n\n*** All Games Are Created In Unity Version 5+ ***\n*** The code works on the newest Unity Version ***\n*** The Course Is Updated With All New Unity Features ***\nEnroll Now And Become A Master 2D Game Developer\n\nWith the release of Unity 5 building games was never easier!!!\nThis is a course I wish I had when I first started to learn game development.\nThe course is completely project based, and we are going to create 6 fully featured games from scratch using Unity Game Engine.\nWe will start with simple things so you will be comfortable if you are using Unity for the first time.\nYou will also benefit from my super fast response if you have any issue that you are stuck with(I check Udemy forums every day if someone posts a question). Oh and all the students taking the course will also be there to help you!\nAll project files will be included and you are free to use them for anything that you like, personal or commercial use!\nLets take a look at the games that we are going to create inside of this course:\nWe are going to start with a simple game that I call Jack The Giant. In this game we are going to help Jack climb down the beanstalk, along the way we can jump on white clouds but we need to avoid dark clouds. Besides of creating our gameplay we are going to create menus, implement background music, implement admob ads and much much more.\nThe next game that we are going to create is Flappy Bird, and I know what you are thinking oh not another Flappy Bird clone, but this is not a regular Flappy Bird clone, oh no, I've added a lot of features that you can't find in any other flappy bird clone such as selecting a bird(choose between different flappy birds), implementing tweeter and many other features that you will see inside of the course.\nAfter Flappy Bird we are going to create one of the most popular games out there - Infinite Runner!! In this game we are going to see how can we implement features such as quads to represent our backgrounds, spawning obstacles and destroying them, recycling obstacles, implementing google play game services and much much more.\nNext game that we are going to create is going to be a 2D Plaformer game that I call Spider Cave. In this game our player is able to fly and he needs to collect diamonds in order to exit out of the level, what he needs to avoid though are the spiders that lure inside the cave. We are going to have a spider shooter who shoots our player, spider jumper who tries to eat our player when the player is above him and spider walker who simply walks left and right. For the first time we are going to implement simple AI(Artificial Intelligence) in our games, and you can use these techniques in your own games that you will create!\nAfter our spider cave we are going to create a nice puzzle game, which a kids game. In this game we are going to implement a lot of features such as creating the whole game in one single scene!! We are going to see how can we compare images to each other in order to check if we have a correct guess, we are going to use the mechanim system a lot in this game in order to animate our menus, that and much more awaits you in this lecture.\nThe final game that we are going to create is a game that is called Ball Panic. This is the largest game that we are going to create in this course and the game covers a lot of topics everybody is interested in, such as creating a level and character lock/unlock system, creating weapons menu in order to select a weapon for our player, creating level menu and unlocking those levels, implementing video and interstitial ads and in app purchase, that and much more awaits you in this lecture.\nWhat You will learn\nUnity Interface\nBasic C# Programming\nIntermediate C# Programming\nAdvanced C# Programming\nImporting And Organizing Assets\nSlicing Sprites\nAnimating Sprites\nLearn How To Use Unitys New UI System\nCreating Menus\nCreating Loading Screen\nCreating Cool Animations\nUnderstand And Use Unitys Physics System\nSaving Game Data Using Binary Input/Output\nCreating Character And Level Select Menu\nCreating Character And Level Lock Unlock System\nUsing Game Controllers To Control The Workflow Of Your Game\nPlay Music In Your Game\nCreate In-App Purchase To Sell Virtual Items To Your User\nImplement Social Media In Your Game(Facebook and Tweeter)\nShare On Facebook From Your Game\nCreate Share On Facebook Earn Virtual Item System In Your Game\nImplement Interstitial Ads\nImplement Video Ads\nCreate A Watch Video Earn Virtual Item System In Your Game\nImplement Google Leaderboards And Achievements In Your Game\nLearn How To Support Multiple Screen Resolutions\nLearn How To Submit Your Game On Google Play Store\nThat And Much More Is Awaiting You In This Course\nWhat this course DOES NOT cover :\nThe course teaches everything from basic to more advanced stuff on how to plan, design, develop and publish your game, however the course WILL NOT teach you every single aspect of Unity and how to use it because it's impossible to teach everything.\nUsing what you obtain in this course, you will be equipped with more than enough knowledge in order to continue improving yourself in the field of game development, using Unity or any other game engine.\n\nIf You ever had an idea for an awesome game, then enroll in this course and learn the tools that you need to develop Your next hit game!!!\nWhat Is Your Risk By Taking This Course?\nNothing!! If you are not satisfied with the course, I promise I will give you a full refund of your money NO questions asked!!\n\nEnroll Now!! You Will Not Be Disappointed!!",
      "target_audience": [
        "Unity Beginners",
        "Game Development Beginners",
        "Experienced Game Developers",
        "Anyone Who Wants To Learn Game Development",
        "Complete Beginners"
      ]
    },
    {
      "title": "Learn How To Code Games In Roblox Studio 2025",
      "url": "https://www.udemy.com/course/code-a-simple-game-in-roblox-studio/",
      "bio": "Learn how to create Roblox games in an easy to understand step by step course",
      "objectives": [
        "An understanding of Lua the coding language used to create Roblox Games.",
        "The basic concepts of computer programming",
        "How to get set up to create your first Roblox game by creating an account and downloading and installing Roblox Studio.",
        "How to move, scale and rotate your Roblox parts.",
        "How to create a script, make objects spawn and how to program your Humanoid Roblox Player and much more.",
        "How to Use Roblox Toolbox and create your own models, save them and import them into your projects",
        "How to code the Leaderboard for multi-player games and save player data during the game.",
        "Design, Test, and Play your own game from beginning to end.",
        "You will be able to use all the concepts and coding you learnt in this course to create your own interactive games on Roblox."
      ],
      "course_content": {
        "Getting Started With Roblox Game Development": [
          "How To Use This Course",
          "Create An Account And Install Roblox Studio",
          "Roblox Studio Interface",
          "Using The Camera",
          "Move, Scale, And Rotate Parts",
          "Object Properties",
          "Object Hierarchy",
          "Roblox Client Server Model"
        ],
        "Core Programming Basics": [
          "Using Server Scripts",
          "Luau Language And Syntax",
          "Dot Syntax",
          "Variables, CamelCase and Comments",
          "Conditional Statements",
          "Basic For Loop",
          "Basic Methods",
          "Basic Functions",
          "Create Instances",
          "Basic Tables",
          "While and Repeat Until Loops"
        ],
        "Roblox Building And Coding Basics": [
          "CFrames And Models",
          "Basic Building Skills",
          "Set And Get Attributes",
          "Event Handling",
          "Player And Character",
          "Creating Player Data",
          "Changing Player Data",
          "Basic GUI - Labels And Buttons",
          "Using Local Scripts",
          "Remote Events",
          "Dictionary - Key Value Pairs"
        ],
        "Camping Game Basic": [
          "Download Game Assets",
          "Create A Pickup Script",
          "One Script For Pickups",
          "Adding Stone And Flint",
          "Adding Logs",
          "Start The Fire",
          "Tidy Our Code",
          "Game Messages",
          "Player Messages"
        ],
        "Making It Better": [
          "Adding New Features",
          "Using The Axe",
          "Chop The Tree",
          "Spawn Logs",
          "Mine Stone And Flint",
          "Create An Axe Animation",
          "Use Axe Animation",
          "Create A Pick Animation",
          "Play Again GUI",
          "Reset The Game"
        ],
        "Saving And Loading Player Data": [
          "Stats To Save",
          "Create New Player Data",
          "Save And Load Player Data"
        ]
      },
      "requirements": [
        "Have use of a PC or Mac with an internet connection",
        "Able to download software from roblox.",
        "Have WinZip or Archive to expand compressed files"
      ],
      "description": "Unlock the exciting world of Roblox game development with this comprehensive course!\nWhether you’re a complete beginner or have some prior programming experience, this step-by-step guide will equip you with the skills to build your own engaging Roblox games.\nThe course is divided into 6 structured sections, ensuring a smooth learning journey.\nCourse Breakdown\nSection 1: Getting Started With Roblox Game Development\nPerfect for beginners!\nLearn how to create a Roblox account, download Roblox Studio, and navigate the development environment.\nGain a quick and basic understanding of how Roblox game development works to set a solid foundation.\nSection 2: Core Programming Basics\nFor those new to programming or transitioning from another language.\nMaster essential coding concepts and learn how to apply them in Roblox Studio using Lua scripting.\nThis section is vital for building a strong programming foundation before moving forward.\nSection 3: Roblox Building And Coding Basics\nFocus on platform-specific tools and features unique to Roblox Studio.\nExplore practical examples and skills that are used by Roblox developers of all levels.\nSection 4: Camping Game Basic\nStart your first project!\nApply everything you’ve learned so far to build a small \"Camping Game\" prototype.\nBy the end of this section, you’ll have your first working game.\nSection 5: Making It Better\nEnhance your Camping Game with new features like custom animations and game reset functionality.\nLearn techniques to polish and improve your game, making it more interactive and fun.\nSection 6: Saving And Loading Player Data\nTake your game to the next level by tracking player stats and creating save/load systems.\nUnderstand how to implement persistent data storage for a professional touch to your games.\nWhy Take This Course?\n\n\nStructured Learning: Each section builds on the previous one, ensuring a clear and progressive path.\nHands-On Projects: Create and enhance a real game project step-by-step.\nComprehensive Knowledge: Covers everything from setting up Roblox Studio to advanced data-saving techniques.\nBy the end of this course, you’ll have the skills and confidence to design, build, and improve your own Roblox games. Thank you for enrolling, and I can’t wait to share my knowledge with you. Let’s start creating together.\nSee you in the first video!",
      "target_audience": [
        "Beginner Lua Programmers",
        "Roblox players",
        "Roblox players",
        "Beginner Coders",
        "Gamers"
      ]
    },
    {
      "title": "Create A 2D Ren'Py VIsual Novel RPG",
      "url": "https://www.udemy.com/course/create-a-2d-renpy-visual-novel-rpg/",
      "bio": "Create Your First RPG In Ren'Py",
      "objectives": [
        "Ren'Py",
        "How to create a visual novel",
        "Visual Novel",
        "2D",
        "renpy"
      ],
      "course_content": {
        "Introduction": [
          "What you will create",
          "Introduction",
          "What is a visual novel?",
          "Installing Ren'Py"
        ],
        "Creating Our Game": [
          "Ren'Py Layout",
          "Creating Our First Project",
          "Our First Scene",
          "Creating an intro and characters",
          "Creating Our Player Character and Variables",
          "Display Screens",
          "Creating Menus",
          "Menus, Rooms And Shops",
          "Menus, Rooms And Shops #2",
          "Creating A Custom Main Menu",
          "Creating A World Map (Advanced Screens)",
          "Dialogue and Menu Modification",
          "Adding Music",
          "Controlling The Game Speed",
          "Finishing Our Game (Exporting)"
        ]
      },
      "requirements": [
        "Basic computer skills"
      ],
      "description": "In this course you will learn how to create your own Ren'Py RPG. The information given to you is delivered in a fashion that will allow you to take your knowledge from this project then go forth and apply it to your unique games and ideas.\nThis course is great for beginners of any calibre, be it an absolute beginner, or a beginner with interest for more.",
      "target_audience": [
        "Absolute beginners interested in learning visual novels"
      ]
    },
    {
      "title": "Build a complete pixel platformer in Godot 4! (2024)",
      "url": "https://www.udemy.com/course/build-a-platformer/",
      "bio": "Learn how to use Godot 4 to build an entire game from scratch.",
      "objectives": [
        "Learn how to build an entire game from scratch in Godot 4.",
        "Write scripts with good structure which can be reused and repurposed for other projects.",
        "Design a game following professional game design principles.",
        "Complete a portfolio project with a high degree of polish."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Outline",
          "Project Setup"
        ],
        "Controlling a Character": [
          "Character",
          "Input",
          "Locomotion",
          "Jump",
          "Animation",
          "State Machine",
          "Effects",
          "The Crusty Crew!"
        ],
        "Building Levels": [
          "Tilemap",
          "Godot 4.3+ Tilemap Layers",
          "Decoration",
          "Camera",
          "Tween",
          "Background (script method)",
          "Parallax2D Node (Godot 4.3+)",
          "Water",
          "Boundaries",
          "Land Ho!"
        ],
        "Collecting Treasure": [
          "Godot 4.3+ Update",
          "Data",
          "Coins",
          "User Interface",
          "Lives",
          "Chest",
          "Lock & Key",
          "Map",
          "Bury some treasure!"
        ],
        "Life & Death": [
          "Damage",
          "Reaction",
          "Recovery",
          "Checkpoint",
          "Death",
          "Enemies",
          "Game Over",
          "Bloody Pirates!"
        ],
        "Combat": [
          "Sword",
          "Godot 4.3+ Update",
          "Attack",
          "Air Attack",
          "Patrol",
          "Aggression",
          "Projectile",
          "Boss",
          "Give no Quarter!"
        ],
        "Section 7 Menus": [
          "Pause",
          "Title",
          "Level Select",
          "Save",
          "Unlock",
          "Music",
          "Export",
          "Project"
        ]
      },
      "requirements": [
        "Students should already have a basic understanding of game development and scripting."
      ],
      "description": "Learn how to build a complete pixel platformer in Godot 4 by following along with this course!  Whether you are new to game development, new to the Godot engine, or want to improve your skills with some high level design principles, you will learn a lot here!  I recommend at least having a basic understanding of game engines and writing scripts before starting this course.\nEach section of the course generally focuses on 1 aspect of the game; Character, Levels, Treasure, Enemies, etc.  The sections are further divided into 7 video lessons, each focused on teaching 1 feature of the Godot engine, 1 script, or 1 specific part of game development.  By the end of each section, you will have a template for building the various aspects of your game.  There is an assignment you will need to complete before proceeding on with the rest of the course, repeating many of the lessons taught throughout the section to implement more of the game assets, while also providing extra challenges for those who want to try them.  The challenges are optional and are not required to proceed with the lessons.\nThis course includes scripting in the Godot scripting language.  If this is your first time using scripting, you're welcome to follow along and I will explain individual items as we go.  To avoid overwhelming new students, I will try not to explain everything all at once, but focus on individual elements that are relevant to each lesson.  If you have experience with scripting in other languages, Godot script is extremely easy to pick up and you will be able to appreciate how well it is optimized for the engine and game development in general.\nThe assets used in this course are available for free on itch and FreeSound.\nUpon completion of the course you will have a complete game that you can upload and share.  Since everything taught in this course uses design patterns and good practices, the skills and techniques you learn will allow you to expand this project or use it as a template for something entirely of your own design.",
      "target_audience": [
        "Budding game developers who are interested in building a portfolio project.",
        "Indie game developers who want to learn how to improve the structure and design of their projects."
      ]
    },
    {
      "title": "Programming Design Patterns For Unity: Write Better Code",
      "url": "https://www.udemy.com/course/programming-design-patterns/",
      "bio": "How to apply programming best practices to your Unity projects, improve your game development skills and solve problems",
      "objectives": [
        "Fundamental programming best practices",
        "How to write clean, maintainable code",
        "What problems to solve with Programming Patterns",
        "How to write common Patterns in Unity",
        "How Programming Patterns implement best practices"
      ],
      "course_content": {
        "Introduction": [
          "What’s In This Course?",
          "Why NOT To Use Design Patterns",
          "Community & Support",
          "Naming Things & Cache Invalidation",
          "Sources Of Spaghetti Code",
          "Composition Over Inheritance",
          "The Law Of Demeter"
        ],
        "Studying Patterns": [
          "The Observer Pattern",
          "Observers With UnityEvents",
          "Delegates, Actions and Events",
          "The Singleton (Anti?) Pattern",
          "Better Than A Singleton",
          "Finite State Machines",
          "State Pattern",
          "Object Pooling",
          "Strategy Pattern",
          "Decorator Pattern",
          "Composite Pattern",
          "The Model-View-Controller Family",
          "Model-View-Presenter In Unity"
        ],
        "Wrapping Up": [
          "Further Reading",
          "BONUS: SOLID Principles"
        ]
      },
      "requirements": [
        "A strong understanding of basic C# programming (classes, methods, ifs, loops)",
        "Some familiarity with more advanced concepts (inheritance, interfaces, events)"
      ],
      "description": "Do you ever wonder why your code has so many bugs or find yourself perplexed by code you wrote months ago?\nMaybe you've heard of Programming Patterns but don't understand when to use them, or you want to know how to actually implement these Patterns in Unity?\nIn this course you'll take your coding to the next level!\nFrom fundamental programming best practices including how to write clean, maintainable code to what problems to solve with Programming Patterns, how to write common Patterns in Unity and how Programming Patterns implement best practices.\nBy the end of the course you'll know how to:\nSpot bad practices.\nRefactor bad code into better code.\nUnpack common Patterns to see why they work.\nApply Programming Patterns to game specific examples.\nIf you're an intermediate Unity programmer wanting to make bigger games, without drowning in complex code, then this is the course for you.\nTo take the course you'll need a strong understanding of basic C# programming (classes, methods, ifs, loops) and some familiarity with more advanced concepts (inheritance, interfaces, events).\nAll students have access to the Q&A forums where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.",
      "target_audience": [
        "Programmers wanting to level up their coding skills.",
        "Intermediate Unity programmers who want to make bigger games without drowning in complex code."
      ]
    },
    {
      "title": "Masterclass in C# Programing & Unity 3D Game Development FPS",
      "url": "https://www.udemy.com/course/masterclass-in-c-programing-unity-3d-game-development-fps/",
      "bio": "Master Unity Engine (2024) and C# Programing By Creating A First Person Shooter Using Modern Unity Development Technics",
      "objectives": [
        "Learn the Fundamentals of C# a Modern and very Powerful programing language from scratch (No prior programing experience needed)",
        "Delve into the world of Unity Engine, a mighty tool for Game Development that will help you create Real World Games.",
        "Create a unique First Person Shooter with Movement Mechanics, and a Shooting System with multiple Sci-Fi realistic Weapons.",
        "Master the Art of problem solving. By finding Solutions to unique Challenges you encounter.",
        "Understand the Principles that go into creating Modern AAA shooting games like Call Of Duty.",
        "Flex your \"Game Developer\" Muscles by completing Mini-Challenges presented to you in EVERY VIDEO.",
        "Build Transferable coding skills from this course into any programming language you choose. Like JAVA, JavaScript, Python, C++",
        "Become a professional programmer by learning \"Version Control\" a tool used by expert engineers."
      ],
      "course_content": {
        "Introduction": [
          "How To Use This Course",
          "Download Unity & Visual Studio Step-by-Step",
          "Unity & Visual Studio 101",
          "Your First Code",
          "Version Control",
          "Setting Up Our World"
        ],
        "CyberSpy 2087 - Setting Up FPS Player": [
          "Setting Up Character Controller",
          "Adding Player Movement",
          "Our First Steps",
          "Controlling Player Movement",
          "Setting Up FPS Camera",
          "Better Camera Movement"
        ],
        "CyberSpy 2087 - Setting Up FPS Shooting": [
          "Creating Our Bullets",
          "Firing Bullets",
          "Destroying Our Bullets",
          "Adding Accuracy To Bullets",
          "Making Shooting More Exciting",
          "Adding Bullet Holes",
          "Creating Targets To Destroy"
        ],
        "CyberSpy 2087 - Advanced Movement": [
          "Adding Gravity",
          "Jumping",
          "Crouching",
          "Crouching (part 2)",
          "Animations",
          "Sprinting",
          "Sliding"
        ],
        "CyberSpy 2087 - Advanced Shooting": [
          "Creating Our Gun System",
          "Controlling Our Shooting Rate",
          "Adding Ammunition",
          "Displaying Ammo",
          "Aiming Down The Sign",
          "Zooming In With FOV"
        ],
        "CyberSpy 2087 - Enemy AI": [
          "Animating Our Enemies",
          "Enemy Guarding",
          "Chasing Player",
          "Range Attack",
          "Enemy Projectile",
          "Melee Attack"
        ],
        "CyberSpy 2087 - Health Systems": [
          "Enemy Health System",
          "Player Health System",
          "Displaying Health of the Player",
          "Displaying Enemy Health",
          "Respawning"
        ],
        "CyberSpy 2087 - Weapons System": [
          "Adding More Weapons",
          "Picking Up Weapons",
          "Making The Heavy Rocket Launcher",
          "Weapons Reload Animations",
          "Picking Up More Health and Ammo"
        ],
        "CyberSpy 2087 - Adding Audio & Menus": [
          "Adding Background Music",
          "Managing Audio",
          "Adding Sound Effects (SFX)",
          "Playing Audio With Code",
          "Creating Title Menu",
          "Creating a Pause Menu"
        ],
        "CyberSpy 2087 - Building A World To Kill In": [
          "Adding World Assets",
          "Post Processing",
          "Lighting In Unity",
          "Transitioning Between Levels"
        ]
      },
      "requirements": [
        "A Working Computer or Laptop with minimum requirements to run Unity and Visual Studio (Which aren't too demanding)",
        "A burning Desire to learn how to code and build Incredible games."
      ],
      "description": "The best way to learn anything is by doing it in a really fun way and this is where this course comes from. If you want to learn how all these incredible games you see are made there is no better place to start than this course. We made sure that this course has everything you need to take you from a beginner (even with zero codding experience) and slowly take you to intermediate and finally become a professional.\nI chose the main project in this course to be a 3D First Person Shooter called CyberSpy 2087. As it's always been a dream of mine to create a game like Call Of Duty and since CuberPunk 2077 came out I thought that this would be the perfect time to go ahead and create the game of my dreams. And I'm here to share my game development knowledge with you.\nEverything in this course has been meticulously crafted, review and recrafted to provide you with the best experience possible and maximize your learning as much as possible. So not only will you have a great time learning you'll also get the MOST BANG FOR YOUR BUCK by going away from this course with a lot of tools in your arsenal to continue you journey in the wild west of game development.\nSection 1 - Introduction & Setup:\nWe'll start off by downloading all the necessary tools that we need to start our game development journey. That means the latest version of Unity and the latest version of Visual Studio. We'll also go over everything you need to make you feel right at home and how to use the course to maximize your learning potential. We will learn about a very powerful tool which is called Version Control used not only in game development but any professional team of developers. We'll also create our first code just to ease of the pressure. And finally we'll set up our world and be on our way with the game.\nSection 2 - CyberSpy 2087: Player:\nIn this section we are goin to start of with the basics of any FPS and that is the movement of our player. We're going to set up character controller a tool in unity that will allow us to move through our world. We'll establish inputs from our player and move our character in our world accordingly. Finally we'll attach the camera to our character so now we'll be able to move around our world and see through the eyes of our player.\nSection 3 - CyberSpy 2087: Shooting:\nIn this section we are going to set up the basic shooting in a game. We'll use a cube as our gun and a couple of spheres as our bullets but this will all change later on. We'll establish the physics behind flying bullets and create a way for us to add accuracy to our bullets. We'll also add a couple of objects in our world to use our bullets on. And finally we'll delve into the world of particle systems and use the to create bullet holes and sparks.\nSection 4 - CyberSpy 2087: Advanced Movement:\nThis section we start taking things to the next level. At this point we'll have basic movement and basic camera movement. In this section we add gravity to our character, add jumping ability, we add crouching and finally we'll add a sprinting ability with sliding if we crouch during the sprint. We'll also delve int the world of animations by adding a couple of simple movement to our player as he's holding his gun.\nSection 5 - CyberSpy 2087: Advanced shooting:\nWe take our shooting to the next level by replacing our cube and spheres for actual guns and bullets to shooting everywhere. But this will not be just a visual adjustment. We'll also create a whole separate gun system we're we'll add reloading, we'll also be displaying the amount of bullets we have on screen and see as they're changing. We'll also add an aiming mechanic to our guns.\nSection 6 - CyberSpy 2087: Enemies:\nIn this section we introduce new enemies (the giant monster and the robot). We'll create enemy AI where the enemy walks around and if the player gets too close the enemy will start chasing us around. And if the payer gets in the attack range the enemy will either start shooting the player or he will melee attacking him.\nSection 7 - CyberSpy 2087: Health System:\nNow it's time to add health system to our enemies and player and display them all on screen. We don't want to just have our enemies die from a single shot we want to deal damage and do the same to our player. We also want to display all of that on our screen by adding a health bar to player and to the enemies we're looking to kill. Finally instead of just dying we're going to add a respawning mechanic every time we die.\nSection 8 - CyberSpy 2087: Weapons System:\nTime to add more weapons to our game. We'll a Rifle, a Sniper and a rocket launcher, we'll learn how we can pickup the weapons from the ground. We'll learn how to animate our reloading. And we'll also learn how to pickup med kits and ammunition from the ground to resupply our weapons and player health.\nSection 9 - CyberSpy 2087: Adding Audio & Menus:\nIn this section we're going to introduce different SFX's, background music and not only will we add sounds and music we'll be managing them from a sound mixer. And learn how to play the SFX from code in our scripts and from Unity directly. We'll also create a Title menu where we delve deeper into menus and switching to options. And finally we'll create a pause menu.\nSection 10 - CyberSpy 2087: Building A World To Kill In:\nWe'll introduce a couple of futuristic assets like building, galaxy backgrounds and cool looking DeLorean just to add flavor to our game and make it more realistic. Not only that but we're going to delve deeper into Unity lighting and post processing where we'll control and add a bit more graphics to our game. We'll also learn how to go from level to level using portals.\nSection 11: Grappling Hook (Advanced C# & Unity):\nThis section is not for the faint of heart because we're going beyond what is normal and delving into ADVANCED C# and UNITY by building a grappling hook that flies our player around the world\nWhat You Will Learn In This Course:\nDownload Unity and Visual Studio\nC# language foundations without prior experience\nHow every single button in Unity works\nVersion Control a powerful tool for professional programmers\nHow to add different shapes to our world\nHow to rotate, move and scale objects in our world\nUse character controller\nCreate FPS movement\nTaking inputs from keyboard and mouse\nHow to create bullets that fly\nUse Raycast in Unity to make bullets accurate\nAdd particle effects to simulate bullet holes\nHow to add artificial gravity to jump\nHow to crouch (more complex than you think)\nSprint with our player\nAnimations in Unity (deep dive)\nAmmunition capacity\nReload system for our gun\nReload animations for each gun\nUse Canvass to Display health and Ammo\nCreate Enemy AI that walks around, chases and attacks player\nTwo types of attack from enemy, melee and ranged\nCreate a health system for the player and the enemy\nDisplay health using a health bar\nAdding sound effects and playing them from code\nadding background music\nCreating title menu and pause menu\nPost Processing in Unity\nLighting in Unity\nHow to create materials\nHow to create a grappling hook",
      "target_audience": [
        "Aspiring Game Developers that don't know where to start when it comes to creating games.",
        "Young programmers who want to learn the basics of coding in a really fun way by creating their own games using Unity's very simple engine",
        "Anyone who's ever dreamed of creating a First Person Shooter"
      ]
    },
    {
      "title": "3Ds Max Game Modeling: Complete 3D Modeling in 3Ds Max",
      "url": "https://www.udemy.com/course/3ds-max-modeling/",
      "bio": "3D Modeling in 3Ds Max: Create 3D game assets using 3Ds Max. Learn 3Ds Max. Start 3D modeling in 3Ds Max. 3D modeling.",
      "objectives": [
        "Learn to create 3D game assets",
        "Learn to use 3Ds Max for game development",
        "Learn how to model a high-res mesh and convert it to a game resolution",
        "Learn how to unwrap UVW in 3Ds Max",
        "Learn how to texture models with Substance Painter"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setting Everything Up": [
          "Setting Everything Up"
        ],
        "Modeling (High Poly)": [
          "Setting up Refference",
          "Shapping the Shaft",
          "Detailing the Shaft (Part 1)",
          "Detailing the Shaft (Part 2)",
          "Detailing the Shaft (Part 3)",
          "Modelling the Bottom Grip",
          "Making the Little Details",
          "Modelling the Top Grip",
          "Modeling the Extra Details",
          "Shapping the Head of the Axe",
          "Continuing the Shape of the Head",
          "Finishing the Head of the Axe",
          "Starting to Model the Back Pick",
          "Finishing the Back Pick",
          "Polishing the High Poly",
          "Modeling the Addition to the Grip"
        ],
        "Retopology, Finaliszations and UVing": [
          "Low Poly Modifing of the Shaft",
          "Low Poly Modifing of the Upper Grip And Details",
          "Setting Smoothing Groups on the First Part",
          "Updating the Game Res",
          "Unwrapping the Shaft",
          "Unwrapping the Pick",
          "Finish Unwrapping the Pick",
          "Unwrapping the Adze",
          "Unwrapping the Smaller Grip",
          "Unwrapping the Details",
          "Retopologyzing the Lower Grip",
          "Unwrapping the Large Grip, Setting Smoothing Groups & Assembeling the Sheet",
          "Finishing the Texture Sheep & Exporting the Texture",
          "Setting Material ID's (High Poly)"
        ],
        "Texturing": [
          "Starting to work in Substance Painter",
          "Setting up Basic Materials",
          "Advance Materials (The Shaft)",
          "Advanced Materials (The Pick and Adze)",
          "Advanced Materials (The Screws & Bolts)",
          "Advanced Materials (The Grip)"
        ],
        "Finalisations and Closing": [
          "Rendering (IRay and Marmoset)",
          "Applying to Unreal"
        ]
      },
      "requirements": [
        "You must have 3Ds Max (any version) installed on your computer.",
        "You must have Substance Painter installed on your computer."
      ],
      "description": "This course covers all of the fundamentals of 3D modeling game assets, providing a strong foundation for anyone looking to break into the world of game design and development. These techniques will allow students to create identical, highly accurate replicas of their concept characters, objects, or props, ensuring that their creative visions come to life exactly as imagined. The course takes a practical, hands-on approach to learning. First, it will showcase the finished product as a goal to aim for, giving students a clear understanding of what they will achieve. Then, it meticulously runs through the entire step-by-step process of creating that particular model from start to finish, leaving no stone unturned.\nThe techniques presented in this course are highly effective, making them invaluable tools for aspiring game modelers. They are specifically designed to allow students to develop stand-alone props quickly and efficiently, perfect for populating dynamic game environments and levels. Additionally, the course includes a combination of the latest cutting-edge modeling techniques and time-tested, reliable processes. This blend provides a significant advantage for artists who are new to game modeling work, enabling them to hit the ground running, produce high-quality results, and gain the confidence needed to achieve professional-grade outcomes.",
      "target_audience": [
        "Beginner Modelers",
        "3D Artists",
        "Anyone who wants to learn how to create 3D game assets."
      ]
    },
    {
      "title": "Learn To Create A Vampire Survivors Style Game in Unity & C#",
      "url": "https://www.udemy.com/course/unity-vampire-survival/",
      "bio": "Game development made easy. Learn C# using Unity and create your own avoidance survival game!",
      "objectives": [
        "Learn C#, a modern versatile programming language",
        "Understand the capabilities of 2D development in Unity",
        "Develop strong and transferrable problem solving skills",
        "Gain an understanding of the game development process",
        "Learn how object oriented programming works in practice"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Assets"
        ],
        "Getting Setup": [
          "Setup & Importing Assets",
          "Making a Scene"
        ],
        "The Player": [
          "Adding The Player",
          "Setting Up The First Script",
          "Making The Player Move",
          "Limiting Diagonal Movement Speed",
          "Camera Movement",
          "Animating The Player"
        ],
        "Making Enemies": [
          "Making An Enemy",
          "Moving The Enemy",
          "Animating The Enemy"
        ],
        "Managing Health": [
          "Setting Up Player Health",
          "Making Enemies Hurt",
          "Waiting Between Hits",
          "Setting Up A Health Bar",
          "Updating The Health Bar"
        ],
        "Spawning Enemies": [
          "Making Enemy Prefabs",
          "Spawning Enemies",
          "Spawning Outside The Screen",
          "Some Minor Fixes",
          "Tracking Distant Enemies",
          "Despawning Distant Enemies"
        ],
        "Creating Fireballs": [
          "Creating Our First Weapon",
          "Damaging Enemies",
          "Fire Particles",
          "Spawning & Despawning Fireballs",
          "Growing & Shrinking Fireballs",
          "Enemy Knockback"
        ],
        "Showing Damage Numbers": [
          "Setting Up Damage Number Display",
          "Spawning Damage Numbers",
          "Improving The Appearance",
          "Pooling The Numbers"
        ],
        "Enemy Waves": [
          "Making More Enemies",
          "Setting Up Enemy Waves",
          "Spawning Waves Of Enemies"
        ],
        "Getting Experience": [
          "Setting Up The Experience System",
          "Picking Up Experience",
          "Making Experience Go To The Player",
          "Make Enemies Drop Experience",
          "Adding Levels",
          "Levelling Up",
          "Displaying Experience",
          "Updating Experience Display"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2021.3 or newer"
      ],
      "description": "Learn how to create and program your very own vampire survival-style game using Unity, an industry-standard game development program used by large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to understand such game elements as:\n· Destroying Hordes of Attacking Enemies\n· Multiple Unique Weapon Types\n· Developing a Complete Upgrade & Unlock System\n· Creating an Object Pooling System\n· Spawning Waves of Attackers\n· Levelling Up The Player\n· Displaying Damage Numbers\n· Audio Systems\n· Building & Sharing Your Game\n· And much more…\nThe course also includes a complete version of the project to use for your own reference to ensure everything in your game works as it should!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own action survival games",
        "People who want to create and publish their own games",
        "Complete beginners with an interest in learning game development",
        "Developers who want to re-skill across to game development",
        "People interested in working in the game development industry",
        "Competent and confident with using a computer"
      ]
    },
    {
      "title": "Make Online Games Using Unity's Multiplayer Framework",
      "url": "https://www.udemy.com/course/unity-multiplayer-netcode/",
      "bio": "A comprehensive course on Unity's Netcode For GameObjects (NGO). Intermediate C#. Networking. Gameplay & more.",
      "objectives": [
        "Create an online multiplayer game using Unity’s NEW Netcode for GameObjects (NGO) framework",
        "Use Unity Gaming Services (UGS) Relay & Lobby to be able to self host without the need for port forwarding and sharing IP’s",
        "Create a multiplayer top-down shooter that you can modify and turn into your own fun creation",
        "Build the skills to make your own competitive or cooperative multiplayer game in any genre",
        "Add core gameplay (making your tanks move, shoot, collect coins etc) as well as more advanced features like leaderboards, mini maps and and bounties",
        "Deploy to UGS to allow for dedicated Game Server Hosting",
        "Implement UGS Matchmaker so players can queue up and be automatically connected to a dedicated server",
        "Play with 20 or more people online simultaneously"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Set Up Unity & VS Code",
          "Networking Basics",
          "Installation & Setup",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Core Gameplay": [
          "Section Intro - Core Gameplay",
          "Importing Assets",
          "Reading Input",
          "Network Authority",
          "Player Movement",
          "Player Aiming",
          "Networked Projectiles",
          "Firing Projectiles",
          "Firing Improvements",
          "Health Component",
          "Health Display",
          "Dealing Damage",
          "Coins",
          "Coin Wallet",
          "Coin Spawner",
          "Map Design",
          "Combat Polish"
        ],
        "Connecting Online": [
          "Section Intro - Connecting Online",
          "Main Menu",
          "Application Controller",
          "Authentication",
          "Auth Improvements",
          "Relay Service Setup",
          "Allocating A Relay",
          "Joining A Relay",
          "Lobbies UI",
          "Creating Lobbies",
          "Joining Lobbies",
          "Player Name Selection",
          "Connection Approval",
          "Handling Connections",
          "Networking Improvements",
          "Shutting Down Cleanly"
        ],
        "Gameplay Additions": [
          "Section Intro - Gameplay Additions",
          "Player Camera",
          "Overhead Names",
          "Spawn Points",
          "Respawning",
          "Leaderboard Setup",
          "Custom Data Types",
          "Leaderboard Spawning",
          "Leaderboard Names",
          "Leaderboard Updating",
          "Leaderboard Sorting",
          "Losing Coins",
          "Bounty Coins",
          "Healing Zone Setup",
          "Restoring Health",
          "Mini Map",
          "Gameplay Polish"
        ],
        "Online Matchmaking": [
          "Section Intro - Online Matchmaking",
          "Dedicated Servers",
          "UGS Wrapper",
          "Server Build Prep",
          "Build Deployment",
          "Matchmaking UI",
          "Queuing Up",
          "Matchmaking Ticket",
          "Backfilling",
          "Matchmaker Testing",
          "Matchmaking Polish",
          "Making Trails",
          "Crashes & Bug Fixes",
          "Section Cleanup"
        ],
        "Multiplayer Teams": [
          "Section Intro - Multiplayer Teams",
          "Team Queue",
          "Team Assignment",
          "Team Colours",
          "Friendly Fire",
          "Team Leaderboard",
          "Course Wrap-Up"
        ],
        "Continuing Your GameDev Journey": [
          "BONUS Lecture"
        ]
      },
      "requirements": [
        "Ideally you'll have knowledge of Unity and C#, with some experience making a single player game."
      ],
      "description": "Ever wanted to make your very own multiplayer games? The free Unity Game Engine is making the process easier than it has been with its Netcode For GameObjects (NGO) framework.\nIn this course we'll create a multiplayer top-down shooter that you can modify and turn into your own fun creation and play against 20 or more people simultaneously online. In the process you'll learn how to create and deploy a dedicated server with matchmaking.\nWe’ll be making a .io style game (like slither .io and agar .io), that can accommodate dozens of players. Through that process you’ll build the skills to make your own competitive or cooperative multiplayer game in any genre that interests you.\nYou’ll learn about networking and how to make the game a multiplayer. You’ll start building the core gameplay, making your tanks move, shoot, collect coins etc. Later you’ll add polish and more advanced features like leaderboards, mini maps and bounties.\nYou’ll take your game online using UGS (Unity Gaming Services) so players can connect over the internet without the need to port forward.\nFinally you’ll learn how to make your game deployable as a dedicated server, so none of the players have to host the game. And you’ll learn to integrate matchmaking, so players can queue up, be matched together and a server spun up for them to play on.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAll students have access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nJump in and start creating your own multiplayer game now. You’ll be playing it with your friends in no time!",
      "target_audience": [
        "This course is for if you want to make a game that can be played online with others"
      ]
    },
    {
      "title": "Complete Gaming Package: Learn To Code In Unity® And Unreal",
      "url": "https://www.udemy.com/course/complete-gaming-package-learn-to-code-in-unity-and-unreal/",
      "bio": "Learn to code by building games in Unity® and Unreal Engine. This is a fantastic course to start learning technology.",
      "objectives": [
        "Be able to make 2D and 3D video games",
        "Code in C#",
        "Design Games",
        "Build games from scratch"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Unity - 01. Getting Started with Unity": [
          "01a. Getting Started with Unity - Part 1",
          "01b. Getting Started With Unity - Part 2",
          "01c. Getting Started With Unity - Part 3"
        ],
        "Unity - 02. Make An Awesome Space Shooter": [
          "02a. Make An Awesome Space Shooter - Part 1",
          "02b. Make An Awesome Space Shooter - Part 2",
          "02c. Make An Awesome Space Shooter - Part 3"
        ],
        "Unity - 03. Make A Side Scrolling Shooter": [
          "03a. Make A Side Scrolling Shooter - Part 1",
          "03b. Make A Side Scrolling Shooter - Part 2",
          "03c. Make A Side Scrolling Shooter - Part 3"
        ],
        "Unity - 04. Move Mouse To Location": [
          "04a. Move Mouse To Location - Part 1",
          "04ab. Move Mouse To Location - Part 2"
        ],
        "Unity - 05. Rotational Shooter": [
          "05a. Rotational Shooter - Part 1",
          "05b. Rotational Shooter - Part 2",
          "05c. Rotational Shooter - Part 3"
        ],
        "Unity - 06. Cross Shooter": [
          "06a. Cross Shooter - Part 1",
          "06b. Cross Shooter - Part 2",
          "06c. Cross Shooter - Part 3"
        ],
        "Unity - 07. Space Invaders": [
          "07a. Space Invaders - Part 1",
          "07b. Space Invaders - Part 2",
          "07c. Space Invaders - Part 3"
        ],
        "Unity - 08. Making A Platformer": [
          "08a. Making A Platformer - Part 1",
          "08b. Making A Platformer - Part 2"
        ],
        "Unity - 09. Making A Gravity Platformer": [
          "09a. Making A Gravity Platformer - Part 1",
          "09b. Making A Gravity Platformer - Part 2"
        ]
      },
      "requirements": [
        "Must have a computer that can install Unity®",
        "You need to install the unreal engine."
      ],
      "description": "\"Very good, he fleshes out the scripting language and the meanings behind what each one does very well.\" ⭐ ⭐ ⭐ ⭐ ⭐\nOne of the best features is that you can watch the courses at any speed you want. This means you can speed up the or slow down the video if you want to.\nThis course is project based so you will not be learning a bunch of useless coding practices. At the end of this course you will have real world apps to use in your portfolio. We feel that project based training content is the best way to get from A to B. Taking this course means that you learn practical, employable skills immediately.\nYou can use the projects you build in this course to add to your LinkedIn profile. Give your portfolio fuel to take your career to the next level.\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math and learning how to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\nYou will get full lifetime access to this course for a single one off fee. John Bura has created many games, apps and training courses so he is extremely qualified to teach you how to master technology. This is an instructor that does not only teach, he produces apps. This means you get the most relevant information on how to code. Most courses do not show you practical skills and real world examples.\n\"Complete. Clear. 5/5\"\nWhat makes you a good teacher?\nI have released over 40 games and apps that have done very well in the app store.\nI run a company called Mammoth Interactive so I am actively in the field building apps and making money\nI have been teaching since 2002\nI personally love learning online and my life is much better because I have learned online rather than a classroom\nI am one of the top 10 highest grossing Udemy teachers\nI have been a Udemy instructor since 2011.\nI make sure people learn how to make money from their creations.\nI have over 150k students worldwide\nWho is this class for?\nPeople who want to improve their technical skills\nComplete beginners\nPeople who want to make money. I show people the tools on how to make money through various methods of passive income\nPeople who want to get ahead of the pack by learning online.\nHow you will make money by learning new skills\nLearn practical skills\nLearn about how leverage your new skills to greater wealth\nLearn through practical examples\nWhy should you learn online?\nThere is an online education revolution taking place. You may have heard about it in the news or heard it from a friend. Either-way, education is going to be changed forever. In this short course I talk about how Online Education has\nMotivated me\nHelped my career\nHelped me as a teacher\nImpacted several lives around the planet\nI promise that this course will be better and more effective than reading books. I show how to master technology through the use of video. This course will give you everything you need to thrive in our technological society.",
      "target_audience": [
        "Complete beginners",
        "People who want to make video games"
      ]
    },
    {
      "title": "Unity Dialogue & Quests: Intermediate C# Game Coding",
      "url": "https://www.udemy.com/course/unity-dialogue-quests/",
      "bio": "Implement a Dialogue Editor and Quest System and integrate it into an RPG project.",
      "objectives": [
        "Create custom editors in Unity.",
        "Build UI using Unity AutoLayout.",
        "Create a flexible Dialogue System for any game.",
        "Create a modular Quest System for any game.",
        "Provide Undo functionality in a Unity Editor.",
        "Create a node based editor in Unity.",
        "Implement enemy agro for a groups.",
        "Integrate a Quest system with Dialogue.",
        "Provide Quest rewards through an Inventory system.",
        "Make Dialogue conditional on gameplay events."
      ],
      "course_content": {
        "Intro & Setup": [
          "Introduction: Battle Plan",
          "Architectural Overview: Recap",
          "Which Unity Version?",
          "Project Setup"
        ],
        "Dialogue Editor": [
          "Scriptable Object Primer",
          "Dialogue Scriptable Objects",
          "Showing A Custom Editor",
          "Opening An Asset Callback",
          "Drawing OnGUI",
          "Callback Mechanisms",
          "Adding A Default Node",
          "Editing Dynamic Data",
          "Implementing Undo",
          "Styling Nodes",
          "Dragging Nodes Part 1",
          "Dragging Nodes Part 2",
          "IEnumerables Primer",
          "Dictionaries For Lookups",
          "Drawing Bezier Curves",
          "Adding Nodes",
          "Deleting Nodes",
          "Linking Nodes",
          "Scroll Views",
          "Drag To Scroll",
          "Canvas Background",
          "Dialogue Node Scriptable Objects",
          "Asset Database",
          "Setters, Getters and Undo",
          "Sub Asset SetDirty Bug",
          "Alternating Speakers"
        ],
        "Unity UI Primer": [
          "Unity UI Basics",
          "Autolayout Groups",
          "Flexible and Minimum Height",
          "Nesting Layout Groups",
          "Layout Controllers"
        ],
        "Dialogue Gameplay": [
          "Atomic Design",
          "Mockup To Auto Layout",
          "Styling UI",
          "Dialogue Architecture",
          "Nested ScriptableObject Rename Bug",
          "Choosing A Random Response",
          "Choice UI",
          "Building A Choice List",
          "Choosing State",
          "Choosing A Node",
          "Starting A Dialogue",
          "Quitting A Dialogue",
          "IRaycastable Dialogue",
          "Triggering Dialogue Actions",
          "Dialogue Trigger Components",
          "Enemy Aggro Groups",
          "Conversant Names"
        ],
        "Quests": [
          "Quest List UI Outline",
          "Quest Tooltip Outline",
          "Tooltip Spawning & Show Hide",
          "Quest Scriptable Object",
          "Tooltip Quest Objectives",
          "Displaying Quest Progress",
          "Giving A Quest",
          "Quest Completion",
          "Saveable Quest Progress",
          "Rewards & Objective Descriptions",
          "Reward Giving & UI",
          "Gameplay Conditions In Dialogue",
          "Bug Fix & More Predicates",
          "Complex Conditions",
          "Wrap Up & Challenges"
        ],
        "Continuing Your GameDev Journey": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You should be able to write basic C# (loops, conditionals, components, etc)",
        "Some familiarity with Unity's APIs is helpful.",
        "You should know your way round Unity's editor.",
        "We recommend you take at least the first half of our Complete Unity Developer 2D or 3D, or equivalent, as a pre-requisite."
      ],
      "description": "Learn how to include two essential game mechanics, dialogue and quests, in your games.\nThis highly acclaimed series was over 200% funded on Kickstarter, and is designed for intermediate users of Unity. We recommend you take at least the first half of our Complete Unity Developer 2D or 3D, or equivalent, as a prerequisite.\nYou can use the dialogue and quest systems together or independently in any game or project you build. We’ll be using an RPG as an example. You don't need to have completed the previous parts of the RPG Series (the RPG Core Combat and Inventory Systems courses) but it will give you an advantage if you already have.\nThe course is project-based as we believe this is the best way to learn Unity and C#. You will not just be learning dry programming concepts, but applying them immediately to a real RPG as you go.\nWe’ll provide the RPG project created so far in the series so that you can practice integrating to an existing complex project. Every element of the project we touch will be fully explained and no knowledge of the project will be required.\nIn the course we will be building the following from scratch:\nA node based dialogue editor window\nA ScriptableObject based dialogue asset\nAn in game dialogue UI\nDialogue triggers and condition to integrate with the gameplay\nA quest list with multi-step objectives\nQuest rewards given via the inventory system\nIn the process of the course we will cover advanced topics such as: IEnumerators, Saving Systems, C# Events, Interfaces and Unity UI.\nYou will get full lifetime access for a single one-off fee. The creators are qualified and experienced coders and avid gamers, so are able to explain complex concepts clearly, as well as entertain along the way.\nYou will have access to a course forum where you can discuss topics on a course-wide basis, or down to the individual video. Get plugged into our communities of amazing developers on Facebook (nearly 20k), in our own TA-curated Community (17k views/day), and our student chat group (10k live at any one time).\nDialogues and quests are core to many game genres. So why not join us and get started improving your game development right now?",
      "target_audience": [
        "This course is for intermediate Unity users who want to create their own Dialogue or Questing systems.",
        "Our Complete Unity Developer course provides the perfect pre-requisite."
      ]
    },
    {
      "title": "How to Make a 2D Clicker Game - Unreal Engine 5 (2024)",
      "url": "https://www.udemy.com/course/make-a-2d-idle-clicker-game-unreal-engine-5-blueprint/",
      "bio": "Learn how to make a clicker game in Unreal Engine 5 Blueprint. Get started with Unreal 2D games.",
      "objectives": [
        "You'll learn how to make a 2D game from scratch in Unreal Engine 5.",
        "Learn how to create tile sets, tile maps, sprites and animated flipbooks.",
        "Learn how to spawn, damage, and kill enemies using the Mouse Cursor",
        "You'll create an auto-click mechanic to automatically deal damage",
        "You'll learn how to create floating combat text when doing damage",
        "Learn how to create an item shop with spawnable items.",
        "Learn how to add replayability (ascension) to the game",
        "You'll learn how to add multiple levels to the game which you can switch between."
      ],
      "course_content": {
        "Introduction": [
          "PROJECT FILES",
          "Introduction",
          "Downloading Unreal Engine 5",
          "Creating a New Project",
          "Unreal Engine 5 Overview"
        ],
        "Environment Creation": [
          "Game Introduction",
          "Creating a New Level",
          "Importing the Environment Assets",
          "Creating a Tile Set",
          "Creating a Tile Map",
          "Designing a Temporary Tile Map",
          "Placing the Tile Map in the Level",
          "Post Process Volume",
          "Adjust the Project Settings"
        ],
        "Player & Enemy Setup": [
          "Game Mode & Player Controller",
          "Adding the Player Camera",
          "Extracting the Enemy Sprites",
          "Creating Flipbooks",
          "Parent vs Child Blueprint Class",
          "Finalizing the Enemy Class Setup",
          "Applying the Player Camera as Default"
        ],
        "Spawning Enemy": [
          "Creating the Enemy Spawn Point",
          "Spawn Actor of Class",
          "Blueprint Communication - Casting",
          "Blueprint Communication - Interfaces",
          "Getting the Spawn Point Values",
          "Introduction to Structures",
          "Level Info & Enemy Info Structures",
          "Creating the Enemy Type Enum",
          "Introduction to Data Tables",
          "Level Info & Enemy Info Data Tables",
          "Introduction to Libraries",
          "Creating the Library Functions",
          "Adding the Enemy Names",
          "Spawning the Enemy"
        ],
        "Damage & Death": [
          "Designing the Enemy Name UI",
          "Adding a Custom Font",
          "Adding the Enemy Name UI",
          "Programming the Enemy Info UI",
          "Applying Damage to Enemy",
          "Calculating the Health",
          "Designing the Health Bar",
          "Adding the Health Bar",
          "Updating the Health Bar",
          "Enemy Hit Flipbook",
          "Enemy Death",
          "Incrementing the Level",
          "Fixing the Enemy Death Animations",
          "Clicking Hit VFX",
          "Designing the Floating Text UI",
          "Floating Text Animation",
          "Spawning the Floating Text",
          "Updating the Floating Text Display",
          "Playing the Floating Text Animation"
        ],
        "Round Timer": [
          "Designing the Timer UI",
          "Displaying the Main UI",
          "Setting the Round Timer",
          "Updating the Main UI Timer",
          "Restore Health on Timer End",
          "Reset Timer on Enemy Death"
        ],
        "Currency": [
          "Designing the Currency UI",
          "Currency UI Animation",
          "Amount Of Coins Variable",
          "Add Coins Drop To Enemies",
          "Update the Coins Display"
        ],
        "Item Shop": [
          "Adding the Shop Scroll Box",
          "Designing the Shop Item Card",
          "Item Info Structure & Data Table",
          "Creating the Shop Item Cards",
          "Displaying the Shop Item Cards",
          "Giving Each Item Card the Correct Info",
          "Displaying the Correct Item Card Info",
          "Changing the Buy Text Color",
          "Checking If Player Has Enough Coins",
          "Purchasing the Item",
          "Updating the Amount Of Items Bought",
          "Creating Item Spawn Points",
          "Spawning the Bought Item",
          "Spawning Logic",
          "Spawning Logic - Intermediate",
          "Spawning Logic - Advanced",
          "Item Cost Structure & Data Table",
          "Get Item Cost Function",
          "Increasing Item Cost",
          "Designing the Item Tooltip Widget",
          "Updating the Tooltip Information",
          "Displaying the Tooltip Widget"
        ],
        "Auto Clicking": [
          "Automatically Applying Damage",
          "Calculating the Total DPS",
          "Applying Correct Amount of Damage",
          "Fixing the Hit Effect"
        ],
        "Level Display": [
          "Designing the Level Display",
          "Designing the Level Card",
          "Setting the Level",
          "Unlocking the New Level",
          "Setting the Current Level",
          "Preventing Automatic Enemy Spawn",
          "Adding Skull Icons to Bosses",
          "Adding Icons to Shop Cards"
        ]
      },
      "requirements": [
        "No requirements. Everyone can take this course."
      ],
      "description": "How to make a clicker game - Start your 2D journey.\nThis Unreal Engine course will teach you how to make a Clicker Game in Unreal Engine 5 (UE5) from scratch, similar to the iconic games Clicker Heroes and Cookie Clicker. You will learn the basics of 2D game development in UE5 as well as more advanced topics like game mechanics and UI design.\nYou don't need any prior game development experience to take this course; we will go through it step-by-step. Whether you're a beginner or an experienced Unreal Engine developer, this course has something for everyone who wants to learn how to make a clicker game in UE5.\nThe main objective of this course is to make you confident in making Unreal 2D games. It will allow you to earn money and work as an independent game developer from home. In fact, I have been a full-time UE5 game developer for a couple of years, creating games, designing courses, and selling game assets through the Unreal Engine marketplace.\nStart your 2D game development journey today by learning how to make a Clicker Game!\nMake games without coding.\nUnreal Engine blueprint is the powerful Unreal Engine scripting language used in UE5. It allows you to create your game from start to finish without writing a single line of code. That means you can easily create your game even if you are a beginner, artist, or designer without programming experience.\nThis course doesn't require any programming or Unreal Engine experience. We will go through the Unreal Engine blueprint basics and slowly advance to developing more complex game mechanics. You will learn how to develop games from start to finish.\nYou can jump into this course as a beginner as you will learn step-by-step how to make a clicker game from scratch.\nCan Unreal Engine make 2D games?\nUE5 is highly known for its impressive 3D graphics. However, it may surprise some that creating 2D games in Unreal Engine is also possible. As an individual who has made numerous 2D games using Unreal Engine, I thoroughly enjoy it and highly recommend it.\nHere are the benefits of making 2D games in Unreal Engine 5:\nYou can use Unreal Engine blueprint to code 2D games, which you also use for 3D games. That means you won't need to learn a new language if switching from 3D to 2D game development.\nYou can give your 2D game a unique 3D look by integrating 3D lighting and god rays.\nYou can make a 2D game in a 3D environment.\nMaking a 2D level and adding assets and characters is simple and can be done in minutes.\nYou don't have to learn anything new when switching between 2D and 3D games because you use the same engine tools.\nWhile learning how to make a clicker game, you will see how fun and easy it is to make Unreal 2D games. Suppose you're more interested in Unreal Engine 5 multiplayer. In that case, you can look at my multiplayer course on how to make a platformer game.\nLearn all aspects of 2D in UE5, not just clicker games.\nThis course teaches you how to use Unreal Engine for 2D games in general, although the main focus is creating a clicking game. Throughout the course, you will learn how to work with various 2D assets such as sprites, flipbooks (animated 2D assets), characters, and 2D environments, among other things.\nWhen working with UE5, it is more crucial to focus on the tools used during game development than to specifically focus on how to make a clicker game. By mastering the tools taught in this course, you can create any 2D game using UE5.\nLearn everything you need to know about 2D and clicker games.\nWhile learning how to make a clicker game, the course comprehensively covers various aspects of making 2D games in Unreal Engine 5. In this course, you will learn:\nHow to make a video game from scratch using the Unreal 2D features.\nHow to create tile sets and tile maps to design your 2D level.\nHow to create sprites and flipbooks for static and animated 2D assets.\nLearn how to spawn, damage, and kill enemies using the Mouse Cursor\nYou'll create an auto-click mechanic to automatically deal damage\nYou'll learn how to create floating combat text when doing damage\nLearn how to create an item shop with spawnable items.\nLearn how to add replayability (ascension) to the game\nYou'll learn how to add multiple levels to the game which you can switch between.\nYou will also learn other aspects of 2D game development, such as adding 2D user interfaces, visual effects, and sound effects. When completing this course, you can confidently design your own video game.\nTake this course and get certified.\nCompleting the course on how to make a clicker game earns you an Unreal Engine certification. You can use it to strengthen your portfolio as an independent game developer or use it when applying for game development jobs. The Unreal Engine certification can be downloaded and saved locally and is valid indefinitely.\nWhat makes me qualified to teach you?\nI am an experienced game developer with nine years of experience. To summarize my work without boring you:\nI have released a Steam game I directed from start to finish with a team of 8.\nI have created 11 game development courses with 40,000+ students and an average rating of 4.8+ out of 5 stars.\nI am currently solo-developing Farmtale 2 from start to finish.\nI also work as a freelancer on various game projects, specializing in programming, lighting, game optimization, and more.\nI am deeply passionate about game development and have made it my full-time job. I would love to teach you everything about Unreal Engine 5 with good game development practices and keep you updated with the latest information.\nIf you want to learn how to publish a game on Steam, check out the course I have released on the topic.\nJoin our supportive community.\nUnreal Engine game development can be a frustrating experience at times. For example, you might need to look for an unchecked box somewhere, leaving you feeling lost for hours. Alternatively, you might require moral support and ideas from fellow game developers like yourself. That's why we offer live support 24/7 in the Q/A section or in our community Discord server. You can also join us to chat casually about game development in general or share your work with others. We are always here to help you whenever you need it.\nLet's begin with \"How to Make a Clicker Game\" without any delay. I am eager to see you in the first lesson. So, let's start, and cheers to an exciting learning journey!",
      "target_audience": [
        "Anyone (beginner or intermediate) who wants to make an Unreal Engine 5 2D Idle Clicker Game",
        "Anyone who want to learn how to make 2D games in Unreal Engine 5.",
        "Experienced game developers who want to brush up their skills",
        "Game designers and artists who want to get into game programming."
      ]
    },
    {
      "title": "The Ultimate Guide to Creating an RPG Game in Unity 6",
      "url": "https://www.udemy.com/course/2d-rpg-alexdev/",
      "bio": "Level up your C# and Unity knowledge and create your very own RPG game.",
      "objectives": [
        "Create playable game projects - good for your portfolio, or just for your own sense of achievement.",
        "Learn C#, a modern versatile programming language.",
        "Develop strong and transferrable problem-solving skills.",
        "Learn Object-Oriented Programming in Real-World Scenarios",
        "Gain an excellent general knowledge of video game design.",
        "Write Clean, Maintainable Code and Design Scalable Game Architectures"
      ],
      "course_content": {
        "Watch before you start": [
          "Important to know - Mindset of the course",
          "Important to know - Bugs and Q&A",
          "Important to know - Pep talk"
        ],
        "Crash Course": [
          "Important to know - Crash Course",
          "Install Unity",
          "Windows and Tools",
          "Components in Unity",
          "Basics of C#",
          "Unity's execution order",
          "C# - Functions",
          "Input & Movement",
          "Decision making & Jump",
          "Animator",
          "Animation transitions",
          "Character flip logic",
          "Collision detection",
          "Jump,Fall & Blend tree",
          "Attack animation",
          "Attack logic & Enemy detection",
          "Timers & Cooldowns",
          "OOP - Inheritance",
          "OOP - Polymorphism",
          "OOP - Encapsulation",
          "Conclusion & Project"
        ],
        "FSM & Project Setup": [
          "Create project & Get assets",
          "What is Finite State Machine",
          "Create Finite State Machine",
          "New States & Structure",
          "Setup New Input System",
          "Clean up & Project"
        ],
        "Player State Machine": [
          "Idle and Movement animations",
          "Movement logic",
          "Character Flip Logic",
          "Jump - Input, States & Animations",
          "Jump - Collision and Horizontal Movement",
          "Wall Slide State",
          "Wall Jump State",
          "Dash State",
          "Attack State",
          "Combo attacks",
          "Queue Combo Attacks",
          "Jump Attack",
          "Better Wall Detection, Idle & Move",
          "Clean up & Project"
        ],
        "Level & Camera Setup": [
          "Tile Palette Setup & Assets",
          "Tile Map & Sorting Layers",
          "Cinemachine Camera",
          "Cinemachine Confiner",
          "Parallax background",
          "Endless background",
          "Demo Level Setup",
          "Clean up & Project"
        ],
        "Enemy State Machine": [
          "Creating a Base Entity Script",
          "Enemy Setup",
          "Walk & Idle",
          "Attack State",
          "Player Detection",
          "Chase & Attack",
          "Battle Timer & Retreat Ability",
          "Clean up & Project"
        ],
        "Combat System": [
          "Target detection",
          "Damage system",
          "Take Damage Override",
          "On Damage VFX",
          "On Damage Knockback",
          "Enemy's Death",
          "Player's Death",
          "Interface and Item Chest",
          "Enemy Stunned State",
          "Player Counter Attack State & Logic",
          "On Hit VFX",
          "Health bar",
          "Clean up & Project"
        ],
        "Stat System": [
          "Stat System Design & Stat Class",
          "Stat groups",
          "Chance logic & Evasion system",
          "Physical Damage & Critical attack",
          "Armor mitigation & Armor penetration",
          "Elemental Damage",
          "Element Type & Elemental resistance",
          "Chilled Status Effect",
          "Burned Status Effect",
          "Electrified Status Effect",
          "Health Regen & Attack Speed",
          "Interactable Buff Game Object",
          "Stat Modifiers",
          "Default Stat Setup",
          "Clean up & Project"
        ],
        "Skill Tree System & UI": [
          "Getting Assets",
          "Skill Tree Node",
          "Skill Data",
          "Skill Tree Tool Tip",
          "Skill Tree Connections",
          "Skill Tree Unlock System",
          "Skill Tree Final Touches",
          "Clean up & Project"
        ],
        "Core Skill System": [
          "Skill Manager & Cooldown",
          "Unlock System",
          "Dash Ability Setup",
          "Shard Skill Object",
          "Shard Unlock & Default Unlocks",
          "Shard Upgrades - Moving shard, Multicast",
          "Shard Upgrades - Teleport , Health rewind",
          "Skill Damage & Effect Scaling",
          "Time Shard & Quick Dash Synergy",
          "Clean up & Project"
        ]
      },
      "requirements": [
        "PC or Mac capable of running Unity 2020 or later",
        "Basics of C# will be helpful, but not required."
      ],
      "description": "Are you ready to take your game development skills to the next level and create your own unique RPG game? Look no further than this comprehensive and standalone course, designed to take you through the process step by step, even if you have no previous experience in game development.\nI've even included a 4-hour crash course for those who have zero knowledge in Unity. While it's better to have some experience and knowledge of C#, don't worry if you don't have it, because I'll cover everything you need to know to create an RPG game.\nThroughout this course, you'll learn how to create a versatile player controller using a finite state machine, levels, parallax effect, camera controllers, enemies to fight against, and an engaging combat system with mechanics such as dashes, counterattacks, skills, and more.\nFrom there, you'll move on to more advanced systems that will turn your game into a fully functional RPG, with items, crafting, shop, storage, stats such critical attacks, evasion, magical damage, elemental effects and more. You'll also develop UI elements to manage all of these systems and create a save system to save your progress, checkpoints, items, skills, experience, and currency.\nFinally, you'll polish your game mechanics, visual effects, particles, and build and publish your game. By the end of this course, you'll have all the tools you need to create your own unique RPG game, regardless of your previous experience.\n\nYou can use my design or mix it with your own ideas. The systems in this course are clean and scalable, allowing you to build upon them and create a truly unique RPG game.\nSo don't hesitate, enroll in my course today and turn your game ideas into reality!\n\np.s We don't play games ,we make them.",
      "target_audience": [
        "Anyone who wants to make cool RPG with skills,items,stats and craft.",
        "Anyone who wants to make their own 2D games.",
        "People who want to create and publish their own games.",
        "Beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game",
        "People interested in working in the game design industry.",
        "Enthusiasts eager for a deep dive into game mechanics and Unity's potential."
      ]
    },
    {
      "title": "RPG COURSE",
      "url": "https://www.udemy.com/course/the-complete-guide-to-c-unity-programming-build-an-rpg/",
      "bio": "CREATE RPG IN UNITY",
      "objectives": [
        "Master the art of problem solving when it comes to game development. By understanding what obstacles you may face and the many ways to find solutions",
        "Learn the fundamentals of C#. Everything from variables, \"if\" statements and creating an object oriented structure. No prior programming experience necessary.",
        "Become a professional programmer by learning \"Version Control\" a tool used by expert engineers. Not only in game development but in all programming projects",
        "Transfer everything you learn from this course into any programming language you choose. Like JAVA, JavaScript, Python, C++ and other object oriented languages"
      ],
      "course_content": {},
      "requirements": [
        "A Working Computer or Laptop with minimum requirements to run Unity and Visual Studio (Which aren't too demanding)",
        "The desire and drive to learn how to create a fun and enjoyable game"
      ],
      "description": "Create an RPG Using Unity is a very fun way. We'll be using sprite we download for free. Applying animations to those sprites. Create main menus and create a turn based combat system.\n\n\nWe'll also create a quest system were we find items, gain experience, collect money and go buy items in shops to upgrade our player so that he can find more and more loot.\n\n\nWe'll also learn all about tile sets and how to use cinemachine in our games. It's going to be extremely fun. So let's not waste anymore time and lets get started.\n\n\nCreate an RPG Using Unity is a very fun way. We'll be using sprite we download for free. Applying animations to those sprites. Create main menus and create a turn based combat system.\n\n\nWe'll also create a quest system were we find items, gain experience, collect money and go buy items in shops to upgrade our player so that he can find more and more loot.\n\n\nWe'll also learn all about tile sets and how to use cinemachine in our games. It's going to be extremely fun. So let's not waste anymore time and lets get started.\n\n\nCan't wait to see you there. Have a good day",
      "target_audience": [
        "Aspiring Game Developers that don't know where to start when it comes to creating games",
        "Young programmers who want to learn the basics of coding in a really fun way by creating their own games using Unity's very simple engine",
        "Someone who's looking to create a 2D Role Playing Game and doesn't know how to do it easily and efficiently"
      ]
    },
    {
      "title": "Make an Assassins GO Board Game in Unity",
      "url": "https://www.udemy.com/course/make-an-assassins-go-board-game-in-unity/",
      "bio": "Build a turn-based puzzle game with C# and Unity",
      "objectives": [
        "Build a stunning turn-based game level",
        "Learn proven game architecture to script logically and cleanly"
      ],
      "course_content": {
        "Introduction and Welcome": [
          "Welcome",
          "Prerequisites",
          "Course How-To",
          "Naming Conventions",
          "IMPORTANT: Unity 2019 Update"
        ],
        "Setup": [
          "Project Setup and iTween",
          "More iTween",
          "Scene Setup"
        ],
        "Player Mechanics": [
          "PlayerMover",
          "Move Methods",
          "PlayerInput",
          "PlayerInput Properties",
          "PlayerManager"
        ],
        "The Game Board": [
          "The Game Board",
          "Nodes Part 1 (Unity 2019)",
          "Nodes Part 2 (Unity 2019)",
          "Update: PostProcessing (Unity 2019)",
          "Neighbor Nodes Part 1",
          "Neighbor Nodes Part 2",
          "Node Initialization",
          "Links",
          "Linking Nodes",
          "Board Movement",
          "Obstacles",
          "PlayerNode"
        ],
        "Game Management": [
          "The GameManager Part 1",
          "The GameManager Part 2",
          "ScreenFader",
          "GameManager Events",
          "Goal Node",
          "InitBoard",
          "Level Win",
          "End Screen Blur (Unity 2017 LTS - deprecated)",
          "End Screen Blur (Unity 2019 Update)",
          "End Screen UI Part 1",
          "End Screen UI Part 2",
          "Graphic Mover",
          "EndScreen GraphicMovers"
        ],
        "Level Art": [
          "StartScreen",
          "PlayerCompass Part 1",
          "PlayerCompass Part 2",
          "MazeLayout",
          "Primitive Objects",
          "Level Blocking Part 1",
          "Level Blocking Part 2",
          "Basic Lighting Part 1",
          "Basic Lighting Part 2",
          "Obj Export",
          "Model Detail",
          "Level Layout",
          "Materials and Lightmaps",
          "Finishing Touches",
          "Level Label"
        ],
        "Enemy Mechanics": [
          "Mover Part 1",
          "Mover Part 2",
          "UpdateCurrentNode",
          "EnemyMover",
          "EnemySensor",
          "TurnManager",
          "Player and Enemy Turns Part 1",
          "Player and Enemy Turns Part 2",
          "Patrol Enemy",
          "Enemy Sentry",
          "LoseLevel",
          "PlayerDeath Animation",
          "PlayerBase Animator Controller",
          "Enemy Attack and PlayerDeath",
          "EnemyDeath Part 1",
          "EnemyDeath Part 2",
          "CaptureEnemies",
          "Capture Enemy Update",
          "Enemy Sensor Update"
        ],
        "Updates and Q&A": [
          "Q&A: Mobile Input"
        ],
        "Bonus": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Unity 2019.2 or higher",
        "Mac or PC",
        "intermediate C# skill level"
      ],
      "description": "Are you ready to level up your game dev skills?  There's no better way than immersing yourself in a capstone project!\nIn this course, we will:\n\nstart with a blank Unity project and flesh out a fully working game level\nlearn fundamental techniques for creating your own turn-based game with 3d assets\ncreate C# scripts line-by-line and learn how to architect game components cleanly and logically\nLevel up your Unity skills!\nDesign game board components in C#\nUse the iTween plugin to script animation\nSetup a player character to respond to keyboard input\nScript enemy behavior to challenge your players\nDesign user interface components\nUse UnityEvents to manage complex gameplay behavior\nExplore Unity's Lighting system to render a game level\nWhen you complete the class, you should have a full set of source code and a prototype for your own turn-based indie game!\n\nLearn from 60+ videos broken into small 10-15 minute lessons.  Power through 11 hours of lectures and save weeks of coding to jumpstart your own Unity project!\nJoin the ever growing ranks of our class and see what you can build today!\n\n\nNote: the course project files have been updated and you should be able to complete the course using Unity 2019.\nThough the UI in the recordings is may show a slightly older version of the Editor, the completed game project runs on Unity 2019.\nWe recommend that you use Unity 2019.2 or higher.",
      "target_audience": [
        "Unity developers who want to build a turn-based puzzle game",
        "Intermediate C# developers"
      ]
    },
    {
      "title": "Unity ® Virtual Reality (VR) Development: No Coding Approach",
      "url": "https://www.udemy.com/course/unity-vr-dev-no-coding-required/",
      "bio": "Develop Immersive VR Experiences, Games, Apps & VR Frameworks using Unity 3D & VRTK, without the need for C# programming",
      "objectives": [
        "Develop Immersive VR Experiences.",
        "Build an entire VR Framework, from scratch, with Zero coding.",
        "Build Once, and deploy to both Steam VR, as well as Oculus, 6 DOF devices.",
        "Build a VR Simulator, to test your project without the need for VR hardware, using a XBox Controller, or keyboard and mouse input.",
        "Create core VR Mechanics, such as Interactions as well as, Teleporting, and Sliding forms of locomotion.",
        "Create advanced forms of VR Locomotion, which include Climbing, Arm swinging movement, Teleport Zones, Teleport Regions, and Locomotion using Unity's Nav mesh.",
        "Create Distance Grab Mechanics",
        "Create advanced realistic VR Hands, that allow you use Physics, to push objects about in the VR World.",
        "Build advanced VR Mechanics that involve creating Player holsters, and Inventory Snap Zones.",
        "Setup both linear, and angular joint drives, to create sliding drawers, doors, levers, push buttons and even a steering wheel.",
        "Create advanced Spatial UI, that you can interact with physically, using your hands, as well as using a pointer.",
        "Create 2D UI, that you can interact with using a pointer.",
        "Learn to generate Haptic feedback, upon grabbing objects.",
        "Learn to Outline Objects, using a Shader material, when an object is touched.",
        "Create Spatial Tooltips that can follow any object about.",
        "Create a Mini VR game, without writing a single line of code."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Two ways to approach this Course",
          "Test out the built VR Framework on your Oculus Quest"
        ],
        "Setting your devices up for VR Development": [
          "Introduction",
          "Advantages of using VRTK 4 over Alternative SDKs for VR Development",
          "Setting up Oculus, and Unity XR SDKs",
          "Importing the VRTK 4 packages",
          "Using the VRTK Playground Starter project that uses Unity LTS versio2020.3.15f2"
        ],
        "Setting up your VRTK Rig": [
          "Introduction",
          "Setting up individual Camera Rigs",
          "Setting Up VRTKs Tracked Alias",
          "Configure your Oculus, OVR Camera Rig, and Test Spatial movement using your HMD",
          "The Object State Switcher, to manually switch between Camera Rigs in you Scene"
        ],
        "Setting up Interactors, Velocity Trackers, and your Virtual Hands": [
          "Introduction",
          "Interactor verses Interactable",
          "Setting up your Interactors",
          "Setting up Oculus Hands for Oculus Integration",
          "Setting up Custom Hands for Unity XR, and the Spatial Simulator",
          "Animating Custom Hands based on keyboard, and Controller input, Grab and Ungrab",
          "Animating Custom Hands based on keyboard, and Controller input, Thumbstick",
          "Setting up your Interactors to Grab objects, and setting up Velocity Trackers"
        ],
        "Setting up Interactable Objects": [
          "Introduction",
          "Picking Up Interactable Objects",
          "Setup Customized, Pickup Orientation handles, on Interactable Objects",
          "Adding Secondary Actions to Interactable Objects"
        ],
        "Movement in VR": [
          "Introduction",
          "Instant and Dash Teleportation",
          "Setting up the Teleporter",
          "Setting up Teleport Targets, to cover large Distances",
          "Slide Movement and Rotation",
          "Arm Swinging Locomotion",
          "Setting up a Pseudo Body",
          "Climbing Objects, Tomb Raider style"
        ],
        "Distance Grabbing Objects, using a Straight Pointer": [
          "Introduction",
          "Setting up a Distance Grabber",
          "Setting up a Straight Pointer",
          "Activating and Deactivating the Distance Grabber, via a Button Press"
        ],
        "VRTKs 3D Spatial UI and Unity's 2D UI controls": [
          "Introduction",
          "Setting up a Straight Pointer",
          "Setting up a Spatial, clickable Button",
          "Setting up a Spatial, Button Group",
          "Changing the appearance of your Spatial Buttons",
          "Setting up a Spatial, Toggle Button",
          "Setting up Spatial, Option Buttons",
          "Setting up a Slider",
          "Hacking your Straight Pointer, allowing it to Interact with your Slider",
          "Using your Hands to Interact with VRTKs Spatial Buttons",
          "Using Unity's 2D UI controls with VRTK"
        ],
        "Snap Zones": [
          "Introduction",
          "Importing the Tool Holder UI, Unity Package, and setting up 2 new Work Tools",
          "Making the Axe and Hammer Interactable",
          "Setting up the Snap Zones",
          "Setting up Tooltips for the Snap Zones",
          "Setting up Rules that restrict entry into Snap Zones",
          "Setting up Holsters, that move about with the Player"
        ],
        "Angular and Linear Drives": [
          "Introduction",
          "Creating a Steering Wheel",
          "Creating a Door",
          "Creating a Lever",
          "Exploring the Angular Joint Drive, Value Events, and creating Logic Objects",
          "Creating a Drawer",
          "Creating a simulated, spring Push Button"
        ]
      },
      "requirements": [
        "An Oculus Rift, or HTC Vive headset or an Oculus Quest with a link cable.",
        "A computer that supports your VR headset, in terms of hardware required.",
        "Comfortable with using the Unity editor for basic scene editing.",
        "Some basic knowledge about Unity's Prefabs. No coding knowledge required.",
        "Basic knowledge of how Events work. You don't need to know, how to write event code.",
        "Know how to setup your VR device for development."
      ],
      "description": "Welcome to Udemy's first, No Coding Required, VR development course, using VRTK 4. Build once and deploy to both Oculus and Steam VR devices.\nThis course, teaches you everything you need to know to build your very own VR apps and games using the world class Unity Engine.\nI am an Emeritus certified iDTech instructor and also the author of the book 'Unity® Virtual Reality Development with VRTK4: A No-Coding Approach to Developing Immersive VR Experiences, Games, & Apps' published by Apress and available World wide on the Amazon and Springer stores.\nThe entire completed advanced VR Framework, is available for download, within Section 13 of the course, once you enrol.\nUnity is the top rated game engine, when it comes to developing VR apps and games. VRTK on the other hand is a battle-tested VR solution for Unity. Several block buster games have been made using Unity and VRTK 3.x.\nVRTK 4 in conjunction with Unity, has changed the dynamics of VR development. No other game engine comes even close, to providing you with such advanced functionality for VR development, as does VRTK 4 with Unity.\nFrom a toolkit standpoint, there are several free, as well as paid toolkits out there, for VR development, including Unity's very own XR interaction toolkit. However, none of these toolkits, provide you with the advanced functionality that VRTK 4 provides, out of the box. There is currently no toolkit out there, that would allow you to create such advanced VR mechanics, without the need to write a single line of code.\nThe 2 most prominent VR Toolkits on the Unity Asset Store cost approximately $60 and you don't get the Arm swinging mechanic, different gliding locomotion styles, a rotatable teleport arrow head pointer, a 3D spatial hand interactable UI, a spatial simulator that works with a X Box Controller and a no coding approach.\n\nFor one of these toolkits, for the climbing mechanic alone, you have to shell out an extra $60, resulting in a whopping amount of $120, for a VR toolkit. Over and above this, the learning curve is not easy, as tutorials do not exist or are scarce, and the manuals are poorly written, calling on you to rely on forums and community members, to help you out.\nTry to rebuild the mini game in this course, without writing a single line of code, using any other VR framework or toolkit currently available on the Asset store, even Unity's very own XR Interaction toolkit. It wont be possible.\nIn this course, you will not be called upon to launch Visual Studio, even once. No programming skills are required!\nThere's a popular English saying, \"Give a person a fish and you feed him/her for a day. Teach a person to fish and you feed him/her for a lifetime.\" In this course I give you the lifetime lesson.\nUsing Unity and VRTK 4, you will build a complete framework from scratch, that can be used as the foundation, for building any VR game or experience. Towards the end of this course, you will utilize the framework you have built, to create your very own mini game.\nThis course makes understanding VRTK 4, super easy, and the framework you develop, will be one massive cohesive, lean, mean machine.\nAt the end of this course, you will have an advanced VR framework, that you could even publish!\nYou can even, enhance the mini game further, using the ideas provided within this course, and publish your game to both Oculus, and Steam.\nThis course is aimed at beginner to intermediate Unity users who need to know their way about the Unity editor, for basic scene editing. A basic knowledge on how Unity Prefabs function and a basic understanding of how events work in general, would be helpful. You don't need to know how to write any event code.\nThis course will take you through everything, step by step and give you plenty of practice.\nYou will need to have access to a 6 DOF (degrees of freedom) headset for Steam VR, or Oculus only. This course cannot be taken using a 3 DOF headset, as you need to be able to move around within your world.\nYou could use a Steam VR headset like the HTC Vive, or an Oculus Rift, or an Oculus Quest (both 1 and 2 will work fine), which are some of the more popular, 6 DOF headsets available, and the ones this course has been tested against.\nIf using the Oculus Quest, it would be advisable to have a link cable, as deploying a build to the headset, each time you test is not very practical, and would be time consuming.\nPlease use Udemy's Q & A, for any explanations you seek from my end, related to this course.\nThis course will continue to be updated, as VRTK evolves.\nBecome a VR pioneer now, and create the future!\n- Chris Coutinho",
      "target_audience": [
        "Beginning to Intermediate Unity developers looking for a non coding, fun way to enhance their skills.",
        "Advanced Unity Developers wanting to understand the unique challenges of VR within Unity.",
        "Oculus Quest, Rift or HTC Vive owners wanting to create their own VR experiences.",
        "A VR Hobbyist, wanting to get into VR game development."
      ]
    },
    {
      "title": "Godot Beginner Course - Learn How To Make Games",
      "url": "https://www.udemy.com/course/godot-beginner-course/",
      "bio": "Learn and master the fundamentals of the Godot Engine 3. Code your first game and start you game development journey!",
      "objectives": [
        "Fundamentals of the Godot game engine",
        "How to use Nodes and Scenes to create games in Godot",
        "Scripting fundamentals with easy to learn GDScript",
        "How to use Signals in Godot",
        "How to structure game projects in Godot",
        "How to create 2D games with the Godot Engine",
        "Essential game development knowledge that you need"
      ],
      "course_content": {
        "Introduction and Setting Up": [
          "Update: Godot 4 is released!",
          "Intro",
          "Prerequisites",
          "Before You Start",
          "Kaan's Editor Settings",
          "Download Godot",
          "Create a New Project"
        ],
        "Introduction to Godot's Editor": [
          "Section Intro",
          "Main Menus",
          "Viewport and Workspaces",
          "Scene Tab and Inspector",
          "Moving Around in The Viewport",
          "Manipulate Nodes with Toolbar Tools",
          "File System and Playtest Buttons",
          "Modify the Interface"
        ],
        "Nodes and Scenes": [
          "Section Intro",
          "Nodes and Scenes",
          "Hello World",
          "Child nodes take the position of their parent",
          "Draw Order & Z Index"
        ],
        "Instancing": [
          "Section Intro",
          "What is Instancing?",
          "Instancing Demo",
          "Editing Instances",
          "More on Instancing"
        ],
        "Scripting": [
          "Section Intro",
          "Intro to Scripting",
          "How to attach a script",
          "GDScript Basics",
          "_ready Method and Printing Text",
          "How to use built-in documentation",
          "How to get a reference to a node",
          "Processing - Delta time",
          "Getting Input",
          "Creating Nodes from a Script",
          "Instancing a Scene With Code"
        ],
        "Signals": [
          "Section Intro",
          "What are Signals?",
          "Manually Connecting Signals",
          "Connecting Signals in Code",
          "Custom Signals"
        ],
        "Pong Game": [
          "Section Intro",
          "Setting Up and Planning",
          "The Ball Scene",
          "The Paddle Scene",
          "The Wall Scene",
          "Make the Ball Bounce",
          "Reset The Ball",
          "Score",
          "Exporting"
        ],
        "Star Shooter": [
          "Section Intro",
          "Importing Assets and Setting up the Main Scene",
          "Creating the Player Scene",
          "Clamping Player Movement",
          "Enemy Scene and Normal Enemy",
          "Diver Enemy",
          "Taking Damage",
          "Creating Lasers!",
          "Implement the Player Shooting Mechanic",
          "Shooting Enemy",
          "Enemy Spawner",
          "Death Zone",
          "HUD and Score",
          "Displaying Lives on The HUD",
          "Sound Effects and Music",
          "Main Menu",
          "Game Over Menu",
          "Main Menu Particle Effects",
          "Stars Passing By",
          "Explosion Effect"
        ],
        "Conclusion": [
          "Where to go from here?",
          "Keep on learning!"
        ]
      },
      "requirements": [
        "A computer with internet connection.",
        "Understanding of basic programming principles. If you know variables, functions and loops you are good to go.",
        "A desire to learn game development."
      ],
      "description": "This course will teach you everything you need to know in order to start making games in Godot 3.\nYou don't need any prior experience with game development, this course is aimed at complete beginners who have no previous knowledge or experience with game development.\nThis course aims to be an introduction to the Godot Engine and help beginners get started with creating games their own games using this awesome tool.\nIn this course you will learn:\nFundamentals of the Godot game engine\nHow to use nodes and scenes (Godot's building blocks)\nScripting with GDScript (Godot's easy to use programming language)\nHow to design games in the Godot game engine. You are going to learn the mindset of a Godot developer when it comes to designing a project.\nYou will create 2 awesome games after learning all the basics that you need.\nThe first project is a clone of the classic arcade game pong.\nNext you will build a space shooter shoot'em up game called Star Shooter.\nAfter all of that you will have all the basic knowledge you need to get started with making games with Godot.\nAt the end of this course, you will have a solid grasp of the basics of Godot that you can start building upon. You will be able to start developing your own games by yourself!",
      "target_audience": [
        "Beginners who want to get started with game development with Godot.",
        "Intermediate developers coming from a different engine who want to learn Godot.",
        "Experienced devs who want to get up to speed with Godot."
      ]
    },
    {
      "title": "Make a Match-Three Puzzle Game in Unity",
      "url": "https://www.udemy.com/course/make-a-puzzle-match-game-in-unity/",
      "bio": "Make a match-three game from scratch!",
      "objectives": [
        "Make their own match-three puzzle game to be deployed on PC/Mac or their mobile device!",
        "Create a tile-based 2D game in Unity"
      ],
      "course_content": {
        "Intro": [
          "Introduction",
          "Prerequisites",
          "How to Use this Course",
          "Setup and Naming Conventions",
          "macOS users PLEASE READ"
        ],
        "Basic Game Mechanics": [
          "The Game Board",
          "Camera Setup",
          "Tiles",
          "Game Pieces",
          "GamePiece Movement",
          "Interpolation",
          "Mouse Input",
          "Switching GamePieces",
          "Finding Matches",
          "Horizontal and Vertical Matches",
          "More Matches",
          "Clearing GamePieces",
          "FillBoard",
          "Collapsing Columns",
          "Clear and Collapse Routine",
          "Collapse Adjustments",
          "Refilling the Board"
        ],
        "Extending Gameplay": [
          "Obstacle Tiles",
          "Breakable Tiles",
          "Correction: BreakTileRoutine",
          "Clear and Break Effects",
          "Particle Management Part 1",
          "Particle Management Part 2",
          "Starting GamePieces",
          "Bomb Pieces Part 1",
          "Bomb Pieces Part 2",
          "Dropping Bombs",
          "ChangeColor Method",
          "Chaining Bombs",
          "Bomb FX",
          "Color Bombs",
          "Collectibles Part 1",
          "Collectibles Part 2",
          "Collectibles Part 3",
          "Blockers"
        ],
        "Game Management": [
          "The Singleton pattern",
          "Note: Persistent Singletons",
          "The ScoreManager Part 1",
          "The ScoreManager Part 2",
          "ScreenFader",
          "The GameManager Part 1",
          "The GameManager Part 2",
          "The Message Window Part 1",
          "The Message Window Part 2",
          "The Message Window Part 3",
          "Winning the Game",
          "The SoundManager Part 1",
          "The SoundManager Part 2"
        ],
        "Mobile Devices": [
          "Mobile Devices (iOS/Android)",
          "Setup for iOS",
          "Setup for Android",
          "Unity Player Settings (iOS/Android)",
          "Build and Run (iOS)",
          "Build and Run (Android)"
        ],
        "Additional Features": [
          "Code Comments",
          "Reskinning",
          "WaitForBoardRoutine",
          "Board Updates",
          "BoardDeadlock Part1",
          "BoardDeadlock Part 2",
          "BoardDeadlock Part 3",
          "BoardShuffler Part 1",
          "BoardShuffler Part 2",
          "LevelGoal",
          "LevelGoalScored",
          "ScoreMeter UI",
          "ScoreStar",
          "ScoreMeter",
          "LevelGoalTimed",
          "Timer UI Part 1",
          "Timer UI Part 2",
          "Time Bonus Part 1",
          "TimeBonus Part 2",
          "Time Bonus Part 3",
          "CollectionGoal",
          "Level Goal Collected",
          "Board SwitchTilesRoutine Update",
          "CollectionGoalPanel",
          "UIManager Part 1",
          "UIManager Part 1: Correction",
          "UIManager Part 2",
          "UIManager Part 3",
          "UIManager Part 3 Correction",
          "Message Window Update Part 1",
          "Message Window Update Part 2",
          "Message Window Update Part 3",
          "Message Window Update Part 4"
        ],
        "Boosters": [
          "Boosters Introduction",
          "Booster User Interface",
          "Booster Class Part 1",
          "Booster Class Part 2",
          "Booster Class Part 3"
        ],
        "Q&A Updates": [
          "Color Bomb Update",
          "Board Refactor Update",
          "NOTE ABOUT Q&A LECTURES",
          "Q&A Blockers",
          "Q&A Level Configuration",
          "Q&A: SwitchTiles Update",
          "Q&A: Looping Music",
          "Q&A: PlayerPrefs Usage",
          "Q&A: Camera Drag",
          "Q&A: BoardHint"
        ]
      },
      "requirements": [
        "Unity 3d (lectures recorded in Unity 5.5 but projects can be updated to 2018)",
        "Mac or PC",
        "OPTIONAL Photoshop or image-editing program to customize art assets (downloadable assets provided)"
      ],
      "description": "Note: though much of the course was recorded with an older version of Unity, the final project has been updated to use Unity 2019.\nThough there are minor differences in the UI, you should be able to complete the course using Unity 2019.\nWe have created several advanced features to make this the most complete course on designing a Match-Three course in Unity:\nre-skinning your game using your own Sprites\nchecking for the deadlock condition (no more available moves)\nshuffling the Board pieces (instead of deleting them and re-filling the Board)\nbuilding a one-, two-, or three-star score meter\ncreating new level objectives (scored, timed, and collected)\nThis course now weighs in at a 16+ hour marathon in game development.  Save weeks of work on building your own match three game.\nJoin the ever growing ranks of our class and see what you can build today!\nIn this course, we will:\nstart with a blank Unity project and flesh out a fully working game level\nlearn some fundamental techniques for creating your own tile-based match-three puzzle game\nfollow several C# scripts line-by-line and learn how to organize our scripts logically and cleanly\nWhat is covered:\nSetup our project settings and environment\nCreate a Board class to store our tiles and game pieces\nCreate an auto-centered orthographic camera\nMake a GamePiece class that can move with interpolation\nSetup the tiles to receive mouse input\nSearch for matches in a two-dimensional array\nHandle recursive calls to clear and refill our Board\nAdd sound effects to game events\nApply particle effects to add some punch to our graphics\nMaking a score manager to track player progress\nJoin the democratization of game development! Level up your Unity 3D skills and build your own match-three game today!\n\nWhen you complete the class, you should have a full set of source code as a starting point for your match-three puzzle game!",
      "target_audience": [
        "Intermediate Unity developers with basic working knowledge of C# scripting",
        "Unity developers interested in creating a match-three game"
      ]
    },
    {
      "title": "Unity 5: Lighting Fundamentals",
      "url": "https://www.udemy.com/course/unity-5-lighting-fundamentals/",
      "bio": "This course takes a look and new and existing lighting features in \"Unity 5\" from the perspective of a novice student.",
      "objectives": [
        "Set up effective realtime global illumination systems for vastly improved visual quality in their games",
        "Use baked lighting setups that allow them to cut overhead on mobile games without having to sacrifice visual quality",
        "Create realtime light probe systems allowing for better integration of game characters in their environments",
        "Implement existing and new lighting features found in Unity 5"
      ],
      "course_content": {
        "Scene Setup and Basic lighting": [
          "Course Introduction",
          "Introduction To Basic Lighting",
          "Setting Up Your Player Properties",
          "Directional Lights and Shadows",
          "The Point Light",
          "The Spot Light",
          "Conclusion to Basic Lighting"
        ],
        "Realtime global illumination systems": [
          "Introduction to Realtime Global Illumination",
          "Indirect Ambient Light (Skybox)",
          "Realtime Global Illumination - part 1",
          "Realtime Global Illumination - part 2",
          "Emissive Materials",
          "Conclusion to Realtime Global Illumination"
        ],
        "Baked Light Maps and Light Probes": [
          "Introduction to Light Map Baking and Light Probe Groups",
          "Light Map Baking - Part 1",
          "Light Map Baking - Part 2",
          "Light Probe Group",
          "Conclusion to Light Map Baking and Light Probe Groups"
        ]
      },
      "requirements": [
        "This course does not require any downloaded or external assets. No scripting is required. Simple geometry has been created and used within unity to allow for a focused approach to the topic of lighting.",
        "Students should be familiar with the Unity interface, and be able to create basic unity primitives.",
        "Students should know how to create solid colored standard shaders and apply them to meshes in scene.",
        "You may use your own assets during this course or create similar scenes using default Unity primitives."
      ],
      "description": "This is a course that covers lighting for \"Unity 5\" and does not included any updates for current versions of Unity. A new course is being created to cover all the material needed for lighting in Unity 2017.  Check the \"Announcements\" section for details concerning the new course. If you are still using Unity 5 and want to learn about lighting for this version of Unity than this course is for you. Otherwise check back often to find out more about when the new course will be released.\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nWhat sets an average game apart for a truly amazing visual experience? How can you take your scene from “Oh, that's cool” to “ Wow, that's AWESOME!”. There are many facets that go into making a game look amazing, but when all's said and done the final polish for most any game comes down to lighting.\nIf you're an army of one powering through your own game or a small studio of talented,driven individual, this course will get you up and running with the latest and greatest that Unity 5 has to offer for lighting your projects.\nIn this example based course you'll be introduced to the basic Unity lights and get to know their properties. You'll learn how to control Unity shadow properties and fix common shadow related problems in your scenes. With this solid foundation under your belt you'll be ready to tackle more advanced topic like skybox lighting, Realtime Global Illumination, light map baking, and the all new light probe system.\nAt the end of this course you will have mastered all the latest unity lighting features needed to bring a new level or realism to your projects. You'll be able to up the quality of your portfolio work and set yourself apart when it comes to landing that next job.\nIf you're serious about using Unity as a platform for your creative ideas, then don't pass up this chance to set your work apart with this course on Unity 5 Lighting Fundamentals.",
      "target_audience": [
        "This course is for anyone looking to take the visual quality of their games to a new level by implementing the newest lighting technologies found in Unity 5.",
        "This course explains the processes behind the technologies so that you can understand how the different systems work and make appropriate decisions for your games needs.",
        "This course is not an introduction to Unity 5. It focuses only on new and existing lighting features found in this software's latest release."
      ]
    },
    {
      "title": "Learn to Create a Metroidvania Game using Unity & C#",
      "url": "https://www.udemy.com/course/unity-metvania/",
      "bio": "Game development made easy. Learn C# using Unity and create your own 2D action game!",
      "objectives": [
        "Learn C#, a modern versatile programming language",
        "Understand the capabilities of 2D development in Unity",
        "Develop strong and transferrable problem solving skills",
        "Gain an understanding of the game development process",
        "Learn how object oriented programming works in practice"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Assets For Use In This Course"
        ],
        "Getting Started": [
          "Project Setup",
          "Laying Out A Tilemap"
        ],
        "The Player": [
          "Setting Up The Player",
          "Moving The Player",
          "Jumping",
          "Creating Animations",
          "Controlling Animations",
          "Flipping The Character"
        ],
        "Camera Control": [
          "Camera Following Player",
          "Clamping The Camera"
        ],
        "Firing": [
          "Creating A Bullet",
          "Firing Shots",
          "Adding Impact",
          "Shooting Animation",
          "Removing Unneccesary Packages"
        ],
        "Extra Abilities": [
          "Adding Double Jump",
          "Dashing",
          "Dashing After-Images",
          "Dash Limiting",
          "Becoming A Ball",
          "Animating The Ball",
          "Dropping Bombs",
          "Fixing Player Passing Through Walls",
          "Blowing Up Destructible Objects"
        ],
        "Unlocking Abilities": [
          "Controlling Ability Unlocks",
          "Ability Unlock Pickup",
          "Pickup Effect & Text"
        ],
        "Enemies": [
          "Setting Up Our First Enemy",
          "Making The Enemy Patrol",
          "Finishing Patrolling Enemy",
          "Damaging Enemies",
          "Damaging The Player",
          "Setting Up A Flying Enemy",
          "Making The Flyer Move"
        ],
        "Player Health System": [
          "Displaying Health",
          "Making The Enemy Explode",
          "Invincibility & Flashing",
          "Respawning",
          "Keeping Active Between Scenes",
          "Checkpoints",
          "Player Death Effect",
          "Health Pickup"
        ],
        "Moving Between Levels": [
          "Setting Up A Doorway",
          "Making The Door Work",
          "Fading Between Scenes"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2021.1 or newer"
      ],
      "description": "NEW UPDATE! A complete map system has now been added to the course for inclusion in your projects!\nLearn how to create and program your very own metroidvania game using Unity, an industry-standard game development program used by large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to understand such game elements as:\nSpecial Abilites including Double Jumps, Dashing, Turning Into a ball and more\nUnlocking & Collecting Abilities\nWalking & Flying Enemies\nGame Progression & Storing Your Progress\nComplete Boss Battle\nAudio systems\nInteractive Menus\nA full map system, including fullscreen & mini-maps\nand much more...\nThe course also includes a complete version of the project to use for your own reference to ensure everything in your game works as it should!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own action metroidvania games",
        "People who want to create and publish their own games",
        "Complete beginners with an interest in learning game development",
        "Developers who want to re-skill across to game development",
        "People interested in working in the game design industry",
        "Competent and confident with using a computer"
      ]
    },
    {
      "title": "Unity 5 - Inventory System for Professional Games",
      "url": "https://www.udemy.com/course/unity-5-inventory-system-for-professional-games/",
      "bio": "Complete training on creating an inventory system in Unity 3D - Code included - Great for Online multiplayer game",
      "objectives": [
        "work with Unity3D interface and monoDevelop programming interface",
        "use character with rigging system",
        "create sequences of life-like animations",
        "create a backpack system to store item",
        "create items that users can find while exploring the world",
        "pickup items and store them in the backpack",
        "equip items from the backpack inventory",
        "code logic to throw items, unequip items"
      ],
      "course_content": {
        "Getting started": [
          "Instructor Greetings and Course Overview",
          "01 Download project open it and get familiar with assets"
        ],
        "Core User Interface": [
          "02 Building the Inventory User Interface",
          "03 Programming item drag and drop to inventory slot",
          "04 Programming the item slot logic",
          "05 Create an item slot prefab for the backpack",
          "06 Create another item to swap"
        ],
        "Drag and Drop logic": [
          "07 Programming logic to swap items",
          "08 Creating item image slot prefabs",
          "09 Creating the equip item inventory slots",
          "10 Creating an item type enumeration",
          "11 Adding allow item type to item slots",
          "12 Equipping the allowed item types",
          "13 A Spawning the helmet when slot is filled part 1",
          "13 B Spawning the helmet when slot is filled part 2",
          "14 Spawning items to equip on player",
          "15 Getting the prefab to spawn name from the slot item image",
          "16 Removing equipped gear when swapping",
          "17 Swapping gear items when already equipped",
          "18 programming the hide and Show the inventory",
          "19 Improving the inventory button",
          "20 Picking up item into backpack - part 1",
          "21 Picking up item into backpack - part 2",
          "22 Adding the backpack to the player script",
          "23 Adding item to pickup to all item types",
          "24 Creating an item trash slot"
        ],
        "BONUS": [
          "BONUS"
        ]
      },
      "requirements": [
        "a MAC, a PC or Linux",
        "download Unity 3D for free"
      ],
      "description": "Important: all software used are FREE to download and use on PC and MAC computers (no need to pay, cheers!)\nIn this course you will learn how to build an inventory system for your games using Unity 3D\nWhy would you want to learn how to build an inventory system? Nowadays, all major games, especially online multiplayer games require an inventory system to create an engaging game where players love to explore the world to find legendary items and magic weapons and have their avatar look more powerful.\nAll the great games out there are using this system, look at Zelda, or World of Warcraft or MineCraft or even Star Wars.\nThis course can be taken by anyone even if you've got no programming skills or very little\nThis course is meant for non-artists, meaning you don't need to be an artist to be able to follow along.\nYou will learn how to use Unity 3D to build the inventory system.\nYou will design a backpack and inventory user interface, then you will learn to program how to drag and drop item in the backpacks,  Then you will learn how to equip these items and how to swap weapons, shields, helmets, and all the gear items to make a solid game, and so much more.\nNow, this course is meant to make things this super easy for you. All the steps are shown to you in the video lectures, so you can't possibly miss a step.\nThe skills you will learn in this course can be applied to so many more projects as they are the core foundations of any professional video games. Invest in yourself by joining this course now\nWhat are you waiting for. Let's get started.",
      "target_audience": [
        "computer students",
        "graphic design students",
        "game students",
        "indi developers",
        "gamers",
        "nerds",
        "geeks",
        "artists"
      ]
    },
    {
      "title": "Learn To Code Trading Card Game Battle System With Unity 3D",
      "url": "https://www.udemy.com/course/learn-to-code-trading-card-game-battle-system-with-unity-3d/",
      "bio": "A comprehensive and easy to learn guide to crate a trading card game battle system with Unity 3D.",
      "objectives": [
        "Create beautiful custom cards and creatures for your game",
        "Show enlarged previews when you are hovering over a card or a creature",
        "Enable card rotation and design a custom card back",
        "Highlight cards that your players can play and creatures that can attack this turn with glows around their border",
        "2 different ways to drag cards in trading card games: just dragging cards onto the battlefield area to play them, or dragging onto a specific target to cast spell or attack with creatures",
        "Show targeting gizmo with an arrow and a target icon when attacking with creatures or casting spells",
        "Create adaptive layouts for your player’s hand and table areas. We are not using pre-determined places for cards. All the creatures and cards will always remain centered",
        "Make a Hearthsone-styled mana pool with 10 mana crystals. Players start the game with 0 mana and in the start of each turn they will receive 1 mana crystal",
        "Create framed Hero portraits and round Hero Power buttons",
        "Create a burning rope that will measure time left until the end of the turn",
        "Create decks with variable thickness. The more cards your deck contains – the thicker it looks",
        "Separate Visual and Logical part of your game (aka server – game client)",
        "Create a simple system to manage, edit and create new cards, creatures or Hero classes",
        "Manage turns in trading card games",
        "Establish the most basic game mechanics of playing creatures and attacking opponent’s creatures or opponent’s Hero",
        "Create custom effects for your spells and Hero Powers",
        "Create diverse creature effects that might be triggered: when the creature enters the battlefield, when the creature dies, when the turn starts or ends or even when certain events occur in the game (like: when your Hero takes damage, draws a card, etc…)",
        "Determine “game over” conditions and show some end game animations or events",
        "Create a simple computer AI that will control opponent’s Hero"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to This Course",
          "How to Watch This Course"
        ],
        "Cards": [
          "Introduction to Section 2",
          "Preparation",
          "Creating a Card Template with Unity UI",
          "Simple Decorations",
          "Creating a Face Side for a Spell Card",
          "Creating a Card Back and Adding Beautiful Text Outlines",
          "Card Rotation",
          "Editing Cards with Scriptable Object Assets",
          "Applying the Visual Appearance from a Card Asset onto a Single Card",
          "Card Glow and Creature Cards – Part 1",
          "Card Glow and Creature Cards – Part 2"
        ],
        "Battle Scene Visual Layout": [
          "Introduction to Section 3",
          "Simple Dragging Script",
          "Advanced Dragging Script",
          "Creating Card Previews – Part 1",
          "Creating Card Previews – Part 2",
          "Making a Creature Game Object",
          "Making a Mana Pool – Part 1",
          "Making a Mana Pool – Part 2",
          "Making Player Portraits – Part 1",
          "Making Player Portraits – Part 2",
          "Creating a Burning Rope Timer",
          "Creating a 3D Deck with Variable Thickness",
          "Assembling the Battle Scene Layout",
          "Organizing Cards and Creatures"
        ],
        "Preparing To Introduce Logic Scripts To Our Game": [
          "Introduction to Section 4",
          "Separating Visual Presentation from Logic",
          "Introduction to Command System",
          "Command System – A Use Case Scenario",
          "Applying Visual Looks from a Card Asset onto a Creature",
          "Using Character Assets to Create Class Cards",
          "Applying the Info Stored in Character Asset to Player's Portrait",
          "Damage Effects – Part 1",
          "Damage Effects – Part 2",
          "Targeting System – Introduction",
          "Targeting System – Troubleshooting and Testing",
          "Message Manager"
        ],
        "Basic Game Mechanics": [
          "Introduction to Section 5",
          "Adding All the Remaining Scripts",
          "Assembling Game Logic and Deck Shuffling",
          "Dragging Scripts and GlobalSettings.cs",
          "Turn Manager Script",
          "Rope Testing and Unity Events",
          "Card Scripts and ID System",
          "Creature Script",
          "Configuring Player Areas",
          "Table Script",
          "Hand Script",
          "Command System – Scripts of Individual Commands",
          "Decision Making in Dragging Scripts",
          "Testing Card Draw",
          "Testing Playing Creatures and Dragging Attack Target",
          "Testing Start Game Sequence",
          "Testing All the Basic Game Mechanics"
        ],
        "Advanced Game Mechanics": [
          "Introduction to Section 6",
          "Spell Effects and Hero Power Effects",
          "Creature Effects – Part 1",
          "Creature Effects – Part 2",
          "Game Over Condition and Restarting the Game",
          "Computer AI",
          "Player Class: Detailed Overview – Part 1",
          "Player Class: Detailed Overview – Part 2",
          "Conclusion"
        ],
        "Bonus Section / Downloads Section": [
          "Credits",
          "Saved Projects",
          "All Scripts",
          "Slides",
          "Additional Materials",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "First couple of Sections in this course are very beginner friendly. In these Sections we spend most of the time working in Unity Editor. So anyone can learn how to make and rotate cards, create other visual elements that are used in this game.",
        "In Sections 4-6 we use some advanced scripting techniques to establish all the processes that happen in our game Logic, write AI scripts and so on. So for the final lectures of this course it is best if you have some previous experience with C#. I try to explain everything that I am doing as much as I can.",
        "You should install the latest version of Unity3D to work on this course and open example projects that are provided with this course (to develop this game I used Unity 5.4 beta, so any version of Unity after 5.4 will do)."
      ],
      "description": "This course provides a full guide on trading card game battle mechanics.\nThe material in this course is divided into 6 Sections. Section 1 features a short introduction to the course.\nIn Section 2 we will focus on making cards. We will use Unity UI features to create both faces and card backs of our cards. Spell cards and creature cards will be designed a bit differently. Creature cards will have distinctive oval frames around creature images. You will learn how to rotate cards that are made with Unity UI properly. We will do some scripting to make a simple system that will allow us to create and edit our cards as assets in Unity.\nIn Section 3 we will continue working on different visual elements: mana pools, rope timer, hero portraits, end turn button and so on. By the end of this Section we will assemble a visual layout of our Battle Scene that our players will see in the final version of the game. We will also explore several scripts that will help us drag cards in the game, organize and display enlarged previews of cards and creatures.\nIn Section 4 we will prepare our project for bringing in all the scripts that will handle Logic in our game. We`ll start by taking a look at a small slideshow that will explain the relationship between Visual and Logical parts of our game. We`ll add several new Visual features – Damage Effects that will display amounts of damage taken by creatures or heroes in the game, a simple system that will show messages in the start of each turn and targeted dragging for spell cards and creature attacks.\nSection 5 is the most complicated Section of this course in terms of scripting. We`ll bring all the remaining scripts, including all the Logic scripts into our project. Our goal for this Section is to establish the most basic game mechanics of drawing cards from deck, playing creatures onto the battlefield and attacking either our opponent`s hero or his creatures. We will also discuss turn management and test our burning rope timer.\nIn the final section of this course you will learn to create spell and creature effects for your game. Creature effects might be caused when the creature enters the battlefield, when the creature dies, when the turn starts or ends or even when certain events occur in the game (like: when your Hero takes damage, draws a card, etc…). We will also take a look at a simple AI script that will control our opponent`s behavior and let us play this game against the computer.\nI have tried to save the project that I was working in as often as I can so that you can easily pick up the material from any point in this course. All these assets that are used to create cards, creatures, hero powers and other game elements are free for commercial use and available for download with this course. You can find detailed info on art and scripting assets and links to some other useful resources in the Credits file that you can download with this course.",
      "target_audience": [
        "This course is for trading card game enthusiasts and for people who are interested in making card games like Hearthstone and Magic the Gathering. It will help you both build your own trading card game and explore what happens behind the scenes in your favorite trading card games."
      ]
    },
    {
      "title": "Master Unity Game Development in 30 Days : 25+ Game Projects",
      "url": "https://www.udemy.com/course/master-unity-game-development-in-30-days/",
      "bio": "Build Something New Everyday for 30 Days , Master Unity Game Development & C# Scripting Step By Step ( Unity 6 )",
      "objectives": [
        "Master Unity & C# Scripting in 30 Days",
        "Build Something New Everyday for 30 Days",
        "Create Your First 3D & 2D Games Step By Step",
        "Make Multiple Android Games with Unity",
        "Create 2D Platformer Player Controller",
        "Master C# Scripting for 2D & 3D Games",
        "Build 25+ Game Development Projects",
        "Monetize Your Games with Video Ads"
      ],
      "course_content": {
        "Day 0 : Introduction To This Course": [
          "Introduction To This Course",
          "Section Quiz"
        ],
        "Day 1 : Installing & Setting Up Unity 6": [
          "Installing & Setting Up Unity 6",
          "Creating Your First C# Script in Unity 6",
          "Set Unity Active Input Handling - Unity 6.1 (2025)",
          "Installing & Setting Up Unity 2023",
          "Fixing Visual Studio Auto Completion Problem",
          "Section Quiz"
        ],
        "Day 2 : Creating A Carrot Collector Game with Unity": [
          "Creating A Carrot Collector Game",
          "Section Quiz"
        ],
        "Day 3 : Create A 3D Dodging Game with Unity": [
          "Setting Up the Ground and Player",
          "Creating the Falling Stones",
          "Creating Player Controller",
          "Creating The GameManager",
          "Creating Score Mechanism",
          "Project Files",
          "Section Quiz"
        ],
        "Day 4 : Creating A Balloon Popper 2D Game with Unity": [
          "Creating A Balloon Popper 2D Game",
          "Section Quiz"
        ],
        "Day 5 : Creating A Block Dodger Android Game": [
          "Creating A Block Dodger Game",
          "Section Quiz"
        ],
        "Day 6 : Build 3D Maze Ball Game with Unity": [
          "Introduction To the Maze Ball Game",
          "Setting Up The Game Level",
          "Designing The Mazes",
          "Creating The Player Controller",
          "Adding The Ball",
          "Creating UI Elements",
          "Creating Game Manager and Controlling The Game",
          "Adding A Restart Button",
          "Adding Some Improvements To The Game",
          "Section Quiz"
        ],
        "Day 7 : Creating A 3D Endless Runner Android Game": [
          "Creating A 3D Endless Runner Game"
        ],
        "Day 8 : Monetize Your Games With Video Ads ( 2023 Updated )": [
          "Setting Up Unity Ads with Unity 2023",
          "Implementing Interstitial Ads",
          "Playing Video Ads in Your Games",
          "Displaying Banner Ads",
          "Project Files"
        ],
        "Day 9 : Creating A 3D Coin Collector Game with Unity": [
          "Creating A 3D Coin Collector Game"
        ]
      },
      "requirements": [
        "Basic Understanding of Unity & C# Scripting is Expected"
      ],
      "description": "Learn Something New Everyday for 30 Days Step By Step\nMaster Unity Game Development in 30 Days\n\n\nList Of Projects You Will Build In This Course :\nBuild A Carrot Collector 2D Game\nCreate A Balloon Popper Game\nBuild A 3D Endless Runner Android Game\nCreate 3D Maze Ball Game\nCreate 3D Character Controller\nBuild 2D Platformer Game Prototype\nMonetize Your Android Games with Video Ads\nLearn C# Scripting with Examples\nMaster 2D Game Development\nCreate 2D Car Controller\nand More..\nI have taught Unity Game Development & C# Scripting to thousands of people on my Youtube Channel: Charger Games. I love teaching complex concepts in a simple way, so even if you have no previous coding experience, no need to worry, I'm gonna teach you everything step by step in the perfect order.\nLearn the basic concepts, tools, and functions that you will need to build fully functional Games with C# and the Unity game engine.\nBuild a strong foundation in Unity Game Development with this course.\nLearn to use 2D & 3D features of Unity\nBuild Fully functional Games with Unity\nLearn Basics of C# Programming\nCreate 25+ Game Projects in Unity\nLearn to build Android Games in Unity\nUse skills learned from this course in any Unity project\nA Powerful Skill at Your Fingertips  Learning the fundamentals of Unity 2D & 3D Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building games.\nJobs in unity game development are plentiful, and being able to learn C# Scripting along with Unity game development will give you a strong background to more easily build awesome games.\nContent and Overview  Suitable for beginning programmers, through this course of 100+ lectures and 20+ hours of content, you’ll learn Unity 2D & 3D game development by building 25+ Game projects. You can use this skills in any of your Unity project later on.\nStarting with the installation of the Unity , Visual Studio , this course will take you through the process of learning game development with unity by building 25+ Game projects in unity.\nFor the beginner programmers there's a separate section about C# Scripting, which will teach the fundamentals of C# Scripting for game development in Unity.\nWith these basics mastered, the course will take you through building different example mini projects with unity to learn more about the process of creating games with Unity.\nStudents completing the course will have the knowledge to create fully functional Games with Unity and C# or use their C# skills to Build any other useful thing that they want.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course\n\n\nCredits:\nMusic I use: Bensound\nLicense code: JUCMLM4XVLSJKBN6\n\n\nArt Assets Taken From:\nKenny, gameart2d, gamedeveloperstudio",
      "target_audience": [
        "Anyone willing to Master Unity Game Development in 30 Days",
        "Unity Developers wishing to Build their Portfolio with Multiple Projects",
        "Programmers looking to Get Started with C# by Building Games with Unity"
      ]
    },
    {
      "title": "Unreal Engine 5: The Complete Beginner’s Course",
      "url": "https://www.udemy.com/course/unreal-engine-5-the-complete-beginners-course/",
      "bio": "Learn Video Game Development & How To Design a Game From Scratch Using UE5",
      "objectives": [
        "Learn game development using Unreal Engine 5",
        "Build realistic looking environments for games to take place in",
        "Define custom inputs and movements to control characters",
        "Script logic to define gameplay without needing to know how to code"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "Registration & Installation",
          "Projects",
          "Levels",
          "Actors"
        ],
        "The Level Editor": [
          "Level Editor Overview",
          "Select Editing Mode",
          "Viewport I - Navigating Within the Viewport",
          "Viewport II – Moving, Rotating, and Scaling",
          "Viewport III – Snapping",
          "Viewport IV – Different Ways To View Your Level",
          "Content Browser I - Overview & Finding Content",
          "Content Browser II – Adding, Importing, and Saving",
          "Content Browser III – The Settings Menu",
          "Content Browser IV – Content Browser Windows",
          "Details Panel I - Details Panel Interface",
          "Details Panel II - The Transform Category",
          "Outliner"
        ],
        "Actors": [
          "Static Meshes",
          "Brushes",
          "Materials",
          "Lights",
          "Atmosphere & Clouds",
          "Player Start",
          "Components",
          "Volumes",
          "Tutorial 1 - Creating the Sky",
          "Tutorial 2 - Creating the Playing Area",
          "Tutorial 3 - Building the Inner Structures of the Level"
        ],
        "Blueprints": [
          "Introduction to Blueprints",
          "Variables",
          "Functions",
          "Flow Control I",
          "Flow Control II",
          "Accessing Actors Within the Level Blueprint",
          "Timelines",
          "Blueprint Classes",
          "Tutorial 4 - Building the Elevator Platform",
          "Tutorial 5 - Creating the Enemies",
          "Tutorial 6 - Creating a Rotating Door"
        ],
        "Players & Input": [
          "Game Modes",
          "Pawns",
          "Characters",
          "Controllers",
          "Enhanced Input",
          "Input Triggers",
          "Input Modifiers",
          "Tutorial 7 - Creating a Playable Character"
        ],
        "Collisions": [
          "Collisions I - Collision Volumes",
          "Collisions II - Collision Events",
          "Collisions III - Causing Damage Due to Collisions",
          "Tutorial 8 - Adding a Damage System to the Game",
          "Tutorial 9 - Creating the Orb Item"
        ],
        "User Interfaces": [
          "UMG Overview",
          "Root Widget",
          "Canvas Panel",
          "Horizontal Box and Vertical Box",
          "Grid Panel & Uniform Grid Panel",
          "Common Widget Properties",
          "Visual Designer",
          "Text Widget",
          "Button Widget",
          "Border Widget & Image Widget",
          "Progress Bar Widget",
          "Check Box Widget",
          "Scale Box & Size Box",
          "Tutorial 10 - Creating the HUD",
          "Tutorial 11 - Damage Tint and Collect Item Tint",
          "Tutorial 12 - Restrict Door Opening and Creating a Pause Menu",
          "Tutorial 13 - Game Over and Win Screen Menus"
        ],
        "Audio": [
          "Audio I - Audio Overview & Sound Waves",
          "Audio II - Sound Cues",
          "Audio III - Attenuation",
          "Audio IV - Importing and Converting Audio",
          "Tutorial 14 - Adding Audio to the Game"
        ],
        "Additional Topics": [
          "Downloading Content From the Epic Games Launcher",
          "Importing 3D Objects From the Internet",
          "Packaging",
          "Tutorial 15 - Packaging the Game",
          "Glossary & Important Shortcuts",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Recommended: Desktop PC with Windows 7 (or later) 64-bit or a Mac with Mac OS X 10.9.2 or later",
        "Recommended: 8 GB RAM",
        "Recommended: Quad-core Intel or AMD processor, 2.5 GHz or faster",
        "Recommended: DirectX 11 compatible video card",
        "Unreal Engine 5 will run on desktops and laptops with specifications under these, but performance may be affected"
      ],
      "description": "Learn game development with Unreal Engine 5. UE5 is the industry-leading 3D game design software that the professionals use to create today’s top games. Start your journey towards getting paid to make video games today!\n\n\n\nLearn Video Game Development with this Unreal Engine 5 Course for Beginners\nBegin your game development career with possibly the most up-to-date game dev course on the internet - Unreal Engine 5: The Complete Beginner’s Course. Unlike other courses, which remain static, this course is regularly updated so that it will always cover one of the most recent versions of Unreal Engine 5.\nWhen I began trying to learn Unreal Engine, I found a lot of information, but it was unstructured and lacked detail. So I created this course to provide what others lacked - structure and detail. The course is laid out very carefully so that you can go into it knowing absolutely nothing, and then, little by little, each lecture builds upon the previous lectures, so that every time you learn something new, you already have all the knowledge you need to learn that new thing without any confusion.\nUnlike other courses, it covers the fundamentals in detail, so by the end you should have a thorough understanding of all the basics of Unreal Engine and be fully prepared to move on to more intermediate topics. Depending on your goals, this might not be for you. This course was designed for those who want to learn as much about Unreal Engine 5 as possible. If you’re just looking to have a bit of fun and to tinker around a little bit, then this might not be the right course for you. But, if you’re interested in getting really good, possibly becoming an indie developer or even working for a major studio, then I strongly believe that this is the best course for you to start with. This course will teach you the knowledge that normally falls through the cracks.\nAt the end of each section, there are a series of tutorial videos that provide an opportunity to apply the concepts learned in that section. These tutorials will walk you through the process of making a working game, from start-to-finish, step-by-step.\nThis course covers the fundamentals that other courses skip, causing you to get confused as you try to learn more advanced topics. The course will cover the following topics in thorough detail:\nProjects & Levels\nActor Types\nMeshes & Brushes\nLighting\nMaterials\nCharacters & Input\nCollisions\nBlueprint Logic & Data\nUser Interfaces\nAudio\n\n\nDevelop Games Using Cutting-Edge Game Design Software\nThe Unreal Engine has won the “Best Game Engine” award several times from various organizations, including the Develop Industry Excellence Awards and Game Developer Magazine. It is considered by many to be the most powerful real-time 3D creation tool.\nThe Unreal Engine has been used to develop many blockbuster games and game franchises including Fortnite, BioShock, Gears of Wars, Splinter Cell, Rainbow 6, Borderlands, Dishonored, Mass Effect, Batman: Arkham Asylum, and hundreds more.\nFor years, the Unreal Engine was only affordable for large companies, but now, Unreal Engine 5 is completely free to use, as long as you agree to pay Epic Games 5% of your game sales over $1 million.\n\n\n\nLearn Unreal Engine 5 in this Video Game Design Course\nIn this course, you will learn the fundamentals of game development using the Unreal Engine 5 through a series of 62 lectures and 15 tutorials. By the end of the course, you will have built an entire demo game from scratch.\nThe course will start from scratch and programming knowledge is not required, so anyone with basic computer skills can jump in and begin their Unreal Engine 5 training! For those who learn better with closed captions, 100% of the captions are human transcribed, not auto-generated.\nThe first part of the course will help you get the Unreal Engine 5 up and running and will introduce you to the basic concepts of game development using the Engine. Next, you will learn all the skills you need to craft beautiful environments to stage your games in. Then, you will learn how to script logic for your games so you can define game rules and behaviors, keep track of data such as health and inventory, and create playable characters. You will learn about collisions and damage, key concepts for any action game. You will learn how to create user interfaces using the UMG Editor, so you can add things like menus, load screens, and HUDs to your game. And finally, you will learn how audio works within the Engine so you can add music, dialogue, and sound effects to your game.\nUpon completion of the course, you will have the skills necessary to translate ideas for games into playable games that use environments you sculpt and logic that you define, and you will understand how to make a game in Unreal Engine 5.\n\n\n\n\nLearn How to Make Video Games Using a State-of-the-Art 3D Game Engine\nUnreal Engine is powerful software that can be used for film & tv, architecture, and product development, but this course is specifically designed for learning how to make video games with Unreal Engine. It can be used to make games for PC, mobile, and consoles, including PlayStation, Xbox, and Nintendo consoles. The engine continues to be updated with amazing new features, such as Lumen, Nanite, Virtual Shadow Maps, World Partition, and MegaLights. These features allow you to create games that can quickly render huge amounts of geometric detail inside giant, immersive worlds. Unreal Engine has everything you need to develop professional AAA games.",
      "target_audience": [
        "This video game development course is for absolute beginners who are interested in making games & learning how to design a game from scratch using UE5",
        "Designed for those who want to become professionals using Unreal Engine 5",
        "No programming experience required"
      ]
    },
    {
      "title": "The Ultimate Guide to Creating a Tower Defense Game in Unity",
      "url": "https://www.udemy.com/course/3d-td-alexdev/",
      "bio": "Level up your C# and Unity knowledge and create your very own Tower Defense game.",
      "objectives": [
        "Create playable game projects - good for your portfolio, or just for your own sense of achievement.",
        "Learn C#, a modern versatile programming language.",
        "Develop strong and transferrable problem-solving skills.",
        "Learn Object-Oriented Programming in Real-World Scenarios",
        "Write Clean, Maintainable Code and Design Scalable Game Architectures",
        "Gain an excellent general knowledge of video game design."
      ],
      "course_content": {
        "Introduction": [
          "Important to know - Mindset of the course",
          "Important to know - Crash Course",
          "Important to know - Q&A and Bugs",
          "Important to know - Before we begin"
        ],
        "Crash Course For Beginners": [
          "Get Unity",
          "Tool and Windows",
          "Navigation and Components",
          "Basic of C#",
          "Create objects with simple shapes",
          "References, Rotation, and Conditional Logic",
          "Instantiate",
          "On Trigger Enter",
          "Auto-attack and Attack Cooldown",
          "Boolean Return Type & Clean Code Examples",
          "List and Array",
          "Foreach and Search of closest object",
          "For loop and Enemy Creator",
          "Access modifiers & Encapsulation",
          "Conclusion & Project"
        ],
        "Enemy Setup": [
          "Get Assets and Assets Review",
          "Setup Test Ground and Basic Enemy",
          "Setup AI Navigation",
          "Enemy's Movement",
          "Enemy's Rotation",
          "Enemy's Navigation Priority",
          "Enemy's Wheel Rotation",
          "Enemy's Death",
          "Waypoint Manager",
          "Enemy's Respawn",
          "Wave System",
          "Clean up & Project"
        ],
        "Tower Setup": [
          "Setup Tower & Tower's Rotation",
          "Target Random Enemy Within Attack Range",
          "Inheritance and Polymorphism",
          "Preparing Tower's Inheritance",
          "Raycast detection of Enemies",
          "Attack Visuals",
          "Glow Effect - Part 1 ( Coroutine Loop )",
          "Glow Effect - Part 2 ( Dynamic Color Change on the Material)",
          "Dynamic Laser Strings Setup",
          "Moving Rotor during set period of time",
          "Clean up & Project"
        ],
        "Target and Damage System": [
          "Interface",
          "Enemy's Travel Distance",
          "Target System - Most Advanced Target",
          "How to get center point of the Enemy",
          "Priority Targets System",
          "Dynamic Target Change",
          "Towers as shooting obstacles",
          "Clean up & Project"
        ],
        "Level Creation and 3D Tile System": [
          "Level Creation System - Review",
          "Preparing Tiles",
          "Custom Editor Buttons",
          "Change Tiles",
          "Change Tile's Name and Collider",
          "Extra Tiles, Labels in Custom Editor, Position and Rotation",
          "Grid Builder",
          "Add New Tiles",
          "Bridge Tiles Fix",
          "Nav Mesh Auto Update",
          "Clean up & Project"
        ],
        "Wave Management": [
          "Let's Make Two Ways Level",
          "Upgraded Wave Managment",
          "Individual waypoint system",
          "Improve waypoints selection",
          "Multiple waves",
          "Wave Timers",
          "Dynamic Level Change",
          "Slopes and Enemy's Movement on Slopes",
          "Clean up & Project"
        ],
        "Camera Controller": [
          "Camera Movement",
          "Camera Rotation",
          "Camera Zoom",
          "Mouse Movement",
          "Screen's Edge Movement",
          "Camera Boundaries",
          "Smooth Camera Transitions",
          "Screen Shake Effect",
          "Clean up & Project"
        ],
        "Complete UI Secton": [
          "Import UI Assets & Packages",
          "Main Menu - Part 1",
          "Main Menu - Part 2",
          "Switch UI Elements",
          "UI Credits and Hyperlink",
          "Settings UI Layout",
          "Settings UI Logic - Part 1",
          "Settings UI Logic - Part 2",
          "In Game UI - Health Points",
          "In Game UI - Currency",
          "In Game UI - Wave Timer",
          "In Game UI - Build Buttons",
          "UI Animations",
          "UI Animations - Change Scale",
          "UI Animations - Blink Effect",
          "Fade In Fade Out",
          "UI Build Buttons On Hover Effect",
          "Pause UI",
          "Clean up & Project"
        ],
        "Build System": [
          "Tile Movement Animation & System Example",
          "Build Slot and Build Manager",
          "Build System",
          "Build Towers",
          "Blocking Build Slots",
          "Tower Unlocks System",
          "UI Feedback on Build Actions",
          "Tower's Attack Radius on Build",
          "Tower's Preview Setup",
          "Enable Build Preview System",
          "Build System Hotkeys",
          "Build Bottons Fix",
          "Clean up & Project"
        ]
      },
      "requirements": [
        "PC or Mac capable of running Unity 2020 or later",
        "Basics of C# will be helpful, but not required."
      ],
      "description": "Are you ready to create your very own Tower Defense video game? Whether you're a beginner or an experienced developer, this comprehensive and standalone course will guide you step by step through building a complete game from scratch using Unity and C#.\nNo experience with game development? No problem! I’ve included a crash course section specifically designed for complete beginners who have never touched Unity before. We'll get you on track in no time.\nIn the main section, we’ll start slow and easy, so you can follow along comfortably as we build your skills and confidence.\n\n\nThroughout this course, you’ll learn how to setup:\nEnemy and Wave Management: Set up enemies with AI navigation, including movement, waypoints, and respawn mechanics. Implement wave systems with multiple waves, timers, and dynamic level changes to keep gameplay challenging.\nDiverse Enemy Types: Create a variety of enemies, including basic units, quick sprinters, swarm enemies, heavy tank with shields, stealth units with buffs, flying enemies, and two powerful bosses. All of that is designed to ensure you have plenty of practical examples to learn how to design and develop unique behaviors for your games.\nBuild System: Create a robust build system for tower placement, unlockable towers, attack radius visualization, and interactive previews with hotkeys.\nTowers: Build and design towers with unique mechanics, including cannons, machine guns, lasers, drones, and more. Each tower introduces new mechanics and attack patterns to expand your skills.\nTarget and Damage System: Build an advanced targeting system capable of prioritizing enemies based on progress, proximity, or surrounding groups, with dynamic switching for smarter gameplay.\nLevel Creation and 3D Tile System: Create levels using a 3D tile-based system with custom editor tools, dynamic NavMesh updates, all build to make development faster and easier.\nGame Loop and Seamless Level Transitions: Build a smooth game loop with dynamic progression, seamless level transitions, and win/loss conditions to tie all systems together.\nUI Systems : Design a complete UI system with menus, in-game elements like health and currency, and animations such as fade-ins, button hovers, and shakes to enhance player interaction.\nAudio System: Set up an audio manager to control background music, sound effects, and volume settings, adding immersive audio to your game.\nCamera: Develop a dynamic camera with smooth movement, rotation, zoom, transitions, and screen shake effects.\nPost-Processing and Optimization: Enhance visuals with post-processing and optimize performance to maintain high FPS.\nBy the end of this course, you won’t just have a completed tower defense game—you’ll have the skills and knowledge to create games with confidence. Maybe even publish them on Steam.\nReady to turn your ideas into reality? Let’s make it happen. Enroll in my course today and begin your game dev journey!",
      "target_audience": [
        "Anyone who wants to make their own 3D games.",
        "People who want to create and publish their own games.",
        "Beginners with an interest in learning game development.",
        "People interested in working in the game design industry.",
        "Enthusiasts eager for a deep dive into game mechanics and Unity's potential.",
        "Anyone who wants to make expandable Tower Defense"
      ]
    },
    {
      "title": "Create a Complete 2D Platformer in the Godot Engine",
      "url": "https://www.udemy.com/course/create-a-complete-2d-platformer-in-the-godot-engine/",
      "bio": "Learn how create 2D platformer from scratch in the Godot Engine 3, complete with particles, sound effects, UI, and more!",
      "objectives": [
        "2D platformer mechanics - double jumping, dashing, collectables, and enemies",
        "Polish & Game Feel - particles, camera shake, scene transitions, and sound effects",
        "UI - main menu, pause menu, options menu, and other elements",
        "Publishing - exporting the project executable, updating the executable icon, and changing the boot splash",
        "Godot Engine Concepts - leveraging a variety of nodes, structuring scenes, signals, and more"
      ],
      "course_content": {
        "Creating the Foundation for Development": [
          "Introduction",
          "Setting Up Godot",
          "Getting Ready for Development",
          "Rough Player Controller",
          "Tightening Player Movement",
          "Tilemap Autotiles",
          "Light Reorganization and Tweaks"
        ],
        "Developing the Core Mechanics": [
          "Camera Follow",
          "Animating the Player",
          "Coyote Time",
          "Double Jump",
          "Adding Collectables",
          "Adding Spikes",
          "Player Death and Respawn",
          "Creating an Enemy",
          "Making the Enemy Dangerous",
          "Adding Player Dash Movement",
          "Making the Player Dash Destroy Enemies",
          "Making a Test Level",
          "More Player Tweaks",
          "Win Condition"
        ],
        "Finalizing the Game Mechanics": [
          "Section Introduction",
          "Preventing Player Void Death",
          "Coin Counter",
          "Level UI",
          "Level UI Continued",
          "Enemy Respawns",
          "Changing Levels",
          "Level Complete UI",
          "Level Complete UI Continued",
          "Fixing Scene Load and Font Height"
        ],
        "Game Feel and Polish": [
          "Camera Shake",
          "Triggering Camera Shake",
          "Player Death Animation Part 1",
          "Player Death Animation Part 2",
          "Player Death Animation Part 3",
          "Enemy Death Animation",
          "Enemy Spawn Animation",
          "Player Dash Trail",
          "Footstep Particles",
          "Adding Tile Variety",
          "Clouds",
          "Creating More Levels",
          "Animated Button",
          "Main Menu",
          "Screen Transitions",
          "Pause Menu",
          "Game Complete Screen",
          "Animating UI Panels",
          "Options Menu",
          "Tutorial Signs",
          "Player Victory Animation",
          "Extending the Level Complete Screen",
          "Mouse Cursor",
          "Final Player and Display Tweaks"
        ],
        "Sound Effects and Music": [
          "Section Introduction",
          "Random Audio Stream Player",
          "Audio Buses",
          "Adding Sound Effects Part 1",
          "Adding Sound Effects Part 2",
          "Music",
          "Adding Volume Controls to the Options Menu"
        ],
        "Preparing the Game for Distribution and Final Words": [
          "UI and Sound Fixes",
          "Exporting the Project",
          "Conclusion"
        ]
      },
      "requirements": [
        "Some programming knowledge"
      ],
      "description": "Please note that this course is for Godot 3 and has not been updated for Godot 4. The skills you will learn in this course are largely transferrable to Godot 4, but please be aware of this before you purchase!\nThis course will cover everything you need to know about creating a small 2D platformer from start to finish in the Godot Engine. This course covers all aspects of creating a complete platformer game in Godot including:\nGame mechanics like player movement, collectibles, and basic combat\nHazards like spikes and enemies\nA seamless game loop and transitions between levels\nScene structure and project organization\nSound effects\nA main menu, pause menu, options menu, and other UI elements\nFinishing touches like camera shake, basic shaders, particle effects, and UI animations\nThis list is not exhaustive - please see the course outline for a glimpse into the topics that are covered.\nThe goal of this course is to show you how to take an empty project and turn it into a small, complete game. In doing so, this course will expose you to many aspects of the Godot engine from input handling, to tilemaps, to particles, to audio, and more. By the time you complete this course, you will feel comfortable working on your own projects in Godot. You will walk away from this course with a solid foundational understanding of making games that are not only functional but also fun.\nThis course will help you greatly if:\nYou have some game development knowledge and want to learn Godot\nYou have some programming knowledge and want to make games\nYour games feel sterile and lack polish\nYou struggle to complete games and want to start and finish a project\nYou regularly participate in game jams and want to improve your ability to craft a fun but short experience\nPlease note that this course is focused purely on the start-to-finish process of making a game. As such, there isn't any time spent explaining fundamental programming concepts. Familiarity with programming is strongly recommended before taking this course. Any programming experience is fine - GDScript is easy to use.",
      "target_audience": [
        "Intermediate programmers",
        "Intermediate game developers",
        "Beginner game developers with programming experience",
        "Individuals who are looking to push their project over the edge by adding polish and game feel"
      ]
    },
    {
      "title": "Beginner's Guide to Multiplayer Game Development in Unity",
      "url": "https://www.udemy.com/course/beginners-guide-to-multiplayer-game-development-in-unity/",
      "bio": "Learn how to create a multiplayer game using Unity, the C# programming language and Photon 2",
      "objectives": [
        "Learn how to create a multiplayer game using Unity and Photon.",
        "Discover how to make a multiplayer loading screen and lobby.",
        "Create simple scripts for multiplayer games using the C# programming language.",
        "Learn to sync over the network scripts, visuals, animations and more with components and RPC functions.",
        "Make a top down player controller. Code a stylish dash move and a screen wrap!",
        "Bring a simple enemy AI to life! They will chase the nearest player and reduce the team's health.",
        "Add a nickname to your player character via a main menu.",
        "Juice up your multiplayer world with particles and sounds.",
        "Make a flexible spawning system to challenge the players with hordes of enemies.",
        "Create a score system to keep track of player performance."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Discord Server",
          "Discord Server Link",
          "Dashing Fire"
        ],
        "Making the Game": [
          "Server and Loading",
          "Join and Create Rooms",
          "Spawing Players",
          "Player Controller",
          "Player Animations",
          "Spawning Enemies",
          "RPC Functions",
          "The Golden Ray",
          "Score System",
          "Dash and Wrap",
          "Game Over",
          "Audio and Particles",
          "Adding Nicknames",
          "Conclusion"
        ]
      },
      "requirements": [
        "Before starting this course you should understand the basics of Unity. Like saving scenes, navigating the interface, using the three basic manipulation tools (Translate, Rotate and Scale), create prefabs and add and modify components inside the inspector.",
        "You should have a strong understanding of the basics of C#, such as creating variables, modifying those and calling functions."
      ],
      "description": "In this game development course you'll learn how to create multiplayer games using Unity, C# and Photon 2.\n\n\nHere is a list of the key things you will learn by watching this course :\nFirst of all, you'll have a stronger understanding of what it takes to actually finish a game from A to Z in Unity!\nLearn the differences between singleplayer and multiplayer game development.\nDiscover how to make a multiplayer loading screen and lobby.\nCreate simple scripts for multiplayer games using the C# programming language.\nLearn to sync  over the network scripts, visuals, animations and more with components and RPC functions.\nMake a top down player controller. Code a stylish dash move and a screen wrap!\nBring a simple enemy AI to life! They will chase the nearest player and reduce the team's health.\nMake a flexible spawning system to challenge the players with hordes of enemies.\nAdd a nickname to your player character via a main menu.\nJuice up your multiplayer world with particles and sounds.\nCreate a score system to keep track of player performance.\n\n\nWhy learn from us?\nMy brother and I created this course to share our passion for making games and help others bring their unique visions to life!\nWe've been teaching aspiring game developers how to use Unity, code with the C# programming language, and make game art and animations. Our tutorials have been viewed by thousands and are very popular, every day we get dozens of developers thanking us for helping them out on their own game dev journey!\nWe've not only made tons of tutorials but we've also created plenty of games using Unity, both 2D, and 3D!\nSo we know what it's like to create a complete, polished experience from A to Z, and really want to equip you with the right tools and knowledge so you can do the same!",
      "target_audience": [
        "Students interested in learning how to make multiplayer games.",
        "This course is also for those wanting to deepen their coding knowledge, and program multiplayer experiences using C# and Photon."
      ]
    },
    {
      "title": "Unreal Engine 5: (Easy!) Mini-Map",
      "url": "https://www.udemy.com/course/unreal-engine-5-easy-mini-map/",
      "bio": "Create an easy Mini-Map for your Unreal Engine Open World projects!",
      "objectives": [
        "How to import and create assets in Unreal",
        "How to create / edit Widget Blueprints in Unreal",
        "How to create / display a Mini-Map in Unreal",
        "How to display icons within a Mini-Map"
      ],
      "course_content": {},
      "requirements": [
        "No programming or previous Unreal Engine experience necessary!"
      ],
      "description": "In this game development course, you'll learn how to create and add a simple Mini Map to your Unreal Engine projects.\n\n\nCOURSE HIGHLIGHTS\nMini Map will work for any project type (1st person, 3rd person, Top-Down, Driving, etc.)\nMini Map will work in any level type including Open World type levels utilizing Unreal Engine's Landscapes.\nThrough concepts learned in this class, you can add icons for all kinds things that you'd like to appear in your Mini Map.  Things like:\nTreasures\nInteractable items\nPoints of interest\nNPCs\nMini Map can be customized in terms of size, camera zoom level, where it appears on your HUD, etc.\n\n\nTOPICS COVERED INCLUDE\nCreating a project\nImporting Texture assets in Unreal\nCreating Unreal assets (Render Target, Material, Widget Blueprints)\nHow to add and setup a Scene Capture 2D actor within a level\nHow to attach a Scene Captured 2D actor to your playable character\nHow to create and make a Mini Map appear during a game\nHow to create player and enemy icons\nHow to make player and enemy icons appear in your Mini Map\n\n\nWith the knowledge gained in these video lessons, you'll have the necessary skills to create and customize your OWN Mini Map for your OWN gaming projects.\nPlease don't hesitate to share your creations with me.  I love to show off student projects in promotional emails.",
      "target_audience": [
        "Those with minimal Unreal Engine experience looking for a quick and easy approach to adding a mini-map into their projects."
      ]
    },
    {
      "title": "Character Modelling & Rigging in Blender- Character Design",
      "url": "https://www.udemy.com/course/complete-character-modeling-and-rigging-in-blender/",
      "bio": "Blender character modeling: 3D Character modeling with Blender: Tools to character model. Character animation in Blender",
      "objectives": [
        "Learn plenty of insights and professional techniques for creating characters for games",
        "Shows you how get the most out of Blender, from the fundamentals to tools for texturing, chiseling, and costuming",
        "Ease your way into this complex subject with this straight-forward approach to Blender",
        "Perfect your technique with step-by-step tutorials that allow you to create a detailed character from start to finish",
        "Learn key animation principles",
        "simply rigging a model using a bone-based armature"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Blender": [
          "Setting Up The Reference Images",
          "Modeling The Main Body",
          "Cleaning Up The Body Mesh",
          "Modeling Details 1",
          "Modeling Details 2",
          "Modeling Details 3",
          "Modeling Details 4",
          "Modeling Details 5",
          "Modeling Details 6",
          "Modeling Details 7",
          "Modeling Details 8",
          "Modeling Details 9"
        ],
        "Face Modeling": [
          "Add The Face Background References",
          "Face Modeling 1",
          "Face Modeling 2",
          "Face Modeling 3",
          "Face Modeling 4",
          "Face Modeling 5",
          "Face Modeling 6",
          "Face Modeling 7",
          "Face Modeling 8",
          "Face Modeling 9",
          "Face Modeling 10"
        ],
        "Rigging": [
          "Rigging The character",
          "Getting The Pitchypoy Rig",
          "Rigging 1",
          "Rigging 2",
          "Rigging 3",
          "Rigging 4",
          "Rigging 5",
          "Rigging 6",
          "Rendering"
        ]
      },
      "requirements": [
        "Have Blender installed on your PC"
      ],
      "description": "Beginning with the fundamentals of modeling as well as a thorough introduction to the user interface, this comprehensive course is packed with useful techniques that ease you into the workflow of the program, while at the same time providing tips and tricks that will allow you to achieve certain tasks much more quickly.\nAfter progressing through the tutorials, you will be shown how to use the tools, materials and the interface so that you can utilize these to their full advantage.\nYou will get full lifetime access for a single one-off fee.\nBy the end of the course, you'll be able to model an amazing character, pose and rig the character that can work in game engines as well as in Blender.\n\n\nWhat you'll learn:\nMaster Blender's user interface and navigation\nUnderstand the basics of 3D modeling in Blender\nLearn how to use modeling tools effectively\nApply materials and textures to your models\nLearn how to pose and rig 3D characters for animation\nExport characters that work in both game engines and Blender\nDevelop professional-level skills for creating 3D characters\nConclusion:\nBy the end of the course, you'll be able to model an amazing character, pose, and rig the character that can work in game engines as well as in Blender. You'll have gained essential skills in 3D character modeling, animation, and the full Blender workflow to use in your own creative projects.",
      "target_audience": [
        "Artists, game developers",
        "Game designers",
        "Everybody interested in modeling and rigging using Blender"
      ]
    },
    {
      "title": "Complete C# Unity 2D Game Development (Updated To Unity 6)",
      "url": "https://www.udemy.com/course/unitycourse/",
      "bio": "Build 4 playable 2D games in Unity 6 using C#. Learn real coding skills and master game dev fundamentals.",
      "objectives": [
        "Make 4 real 2D games in Unity and gain the confidence to build your own from scratch",
        "Learn C# programming from scratch — no prior coding experience required",
        "Build a solid foundation in game design and game development principles",
        "Understand how object-oriented programming works through hands-on practice",
        "Create fully playable 2D game projects to boost your portfolio or just for fun",
        "Develop transferable problem-solving and coding skills you can use anywhere",
        "Apply your knowledge beyond Unity — to .NET, other languages, or engines",
        "Join a supportive community of students and devs who learn by building"
      ],
      "course_content": {
        "Introduction & Setup - New Unity 6 Content": [
          "Welcome To The Course",
          "New Updated Content",
          "Download Unity & Editor",
          "Start Using Unity",
          "Our First Code",
          "Community & Support"
        ],
        "Delivery Dash - New Unity 6 Content": [
          "Section Intro - Delivery Dash",
          "Introducing Methods",
          "Transform.Translate()",
          "Introducing Variables",
          "How to Use SerializeField",
          "Keyboard Input & if Statements",
          "Moving Our Car",
          "Using Time.deltaTime",
          "Colliders & Rigidbodies",
          "Using OnCollisionEnter2D()",
          "Using OnTriggerEnter2D()",
          "Introducing Cinemachine",
          "Add Assets To Project",
          "Car & Background",
          "Create A Level",
          "Add Collision Blocks",
          "Using Tags In Unity",
          "Introducing Bools",
          "Introducing Prefabs",
          "How To Destroy Objects",
          "Using GetComponent",
          "Boosts & Bumps",
          "Adding UI Text",
          "Wrap Up - Delivery Dash"
        ],
        "Snow Surfer - New Unity 6 Content": [
          "Section Intro - Snow Surfer",
          "Game Design - Snow Surfer",
          "Introducing Sprite Shapes",
          "Using Edge Colliders",
          "Cinemachine Follow Camera",
          "Setting Up Our Character",
          "Using the Surface Effector 2D",
          "Using Unity’s Input System",
          "Rotating our Player",
          "Finish Line & Crash Detector",
          "Namespaces & SceneManagement",
          "Using Invoke() For Delays",
          "Introducing Particle Systems",
          "Triggering Particle Effects",
          "Take A Moment To Tune",
          "Using FindFirstObjectOfType()",
          "Using OnCollisionExit()",
          "The Public Access Modifier",
          "Calculating Number of Flips",
          "Introducing Function Parameters",
          "Using Fonts",
          "Introducing ScriptableObjects",
          "Activating Powerups",
          "Creating a Timer",
          "Creating Powerup Particles",
          "Anchors & Pivots",
          "Layout Groups & Buttons",
          "Button OnClick() Events",
          "Wrap Up - Snow Surfer"
        ],
        "Tilemania": [
          "Slicing Sprite Sheets",
          "Introduction To Unity Tilemap",
          "Tilemaps With Sorting Layers",
          "How To Use Unity Rule Tiles",
          "Create Player Idle Animation",
          "Animation States & Transitions",
          "Composite Collider For Tilemap",
          "Set Up Input System",
          "Horizontal Player Movement",
          "Flip Player Sprite",
          "Animation State In Code",
          "Jumpy Jump",
          "This Lecture's Project Changes",
          "Climb The Ladder",
          "Stop Sliding On Ladder",
          "Ladder Climb Animation",
          "Cinemachine Follow Camera",
          "Cinemachine Confiner",
          "State-Driven Cameras",
          "Using Physics Material 2D",
          "Prevent Wall Jump",
          "Set Up Enemy",
          "Move & Flip Enemy",
          "Player Mortality",
          "Player Dying State",
          "How To Create Hazards",
          "Instantiate Bullet",
          "Implement Bullet Behaviour",
          "Create Coin Pickup",
          "Add A Sound Effect",
          "Make Some Levels"
        ],
        "Original Unity 2021.1 Content": [
          "Original Unity 2021.1 Content"
        ],
        "Introduction & Setup (Unity 2021.1 Content)": [
          "Welcome To The Course",
          "Install Unity & VS Code",
          "VS Code Issues?",
          "Introducing Unity",
          "Set Up Visual Studio Code",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Delivery Driver (Unity 2021.1 Content)": [
          "Section Intro - Delivery Driver",
          "Game Design - Delivery Driver",
          "Introducing Methods",
          "Transform.Translate()",
          "Introducing Variables",
          "How To Use SerializeField",
          "Using Input.GetAxis()",
          "Using Time.deltaTime()",
          "Colliders & Rigidbodies",
          "Using OnCollisionEnter2D()",
          "Using OnTriggerEnter2D()",
          "Add Assets To Project",
          "Basic Level Layout",
          "Simple Follow Camera",
          "If Statements & Tags",
          "How To Use Bools",
          "How To Destroy Objects",
          "How To Use GetComponent",
          "Boosts & Bumps",
          "Wrap Up - Delivery Driver"
        ],
        "Snow Boarder (Unity 2021.1 Content)": [
          "Section Intro - Snow Boarder",
          "Game Design - Snow Boarder",
          "How To Use Sprite Shapes",
          "Using Edge Colliders",
          "Cinemachine Follow Camera",
          "Set Up Our Character",
          "Using Surface Effector 2D",
          "AddTorque To Rotate",
          "Triggers To Restart Level",
          "NameSpaces & SceneManagement",
          "Using Invoke() For Delays",
          "Introducing Particle Effects",
          "Triggering Particle Effects",
          "Take A Moment To Tune",
          "Using FindObjectOfType",
          "Using OnCollisionExit2D",
          "How To Trigger Sound Effects",
          "Public Access Modifier",
          "Prevent Double Play",
          "Wrap Up - Snow Boarder"
        ],
        "Quiz Master (Unity 2021.1 Content)": [
          "Section Intro - Quiz Master",
          "Game Design - Quiz Master",
          "UI Canvas",
          "TextMeshPro",
          "Button Layout",
          "Scriptable Objects",
          "Getter Methods",
          "Arrays",
          "TextMeshProUGUI",
          "For Loops",
          "Swapping Sprites",
          "Button States",
          "Simple Timer",
          "Timer Fill Fraction",
          "Connecting the Timer",
          "Lists",
          "Keeping Score",
          "Sliders",
          "End Screen",
          "Game Manager",
          "Section Wrap-Up"
        ],
        "TileVania (Unity 2021.1 Content)": [
          "Section Intro - TileVania",
          "Game Design - TileVania",
          "Slicing Sprite Sheets",
          "Introduction To Unity Tilemap",
          "Unity Tilemap With Layers",
          "How To Use Unity Rule Tiles",
          "Create Player Idle Animation",
          "Animation States & Transitions",
          "Using Prefabs In Unity",
          "Composite Collider For Tilemap",
          "Set Up Input System",
          "Horizontal Player Movement",
          "Flip Player Sprite",
          "Animation State In Code",
          "Jumpy Jump",
          "Jump If IsTouchingLayers",
          "Climb That Ladder",
          "Stop Sliding On Ladder",
          "Ladder Climb Animation",
          "Cinemachine Follow Camera",
          "Cinemachine Confiner",
          "State-Driven Cameras",
          "Using Physics Material 2D",
          "Prevent Wall Jump",
          "Set Up Our Enemy",
          "Move & Flip Enemy",
          "Player Mortality",
          "Player Death State",
          "How To Create Hazards",
          "Instantiate Bullet From Gun",
          "Implement Bullet Behaviour",
          "Create Some Levels",
          "Level Exit Portal",
          "Game Session Controller",
          "Make A Coin Pickup",
          "Coin Sound Effect",
          "Persistent Score & Lives",
          "Scene Persist",
          "Prefab Variants",
          "TileVania Wrap Up"
        ]
      },
      "requirements": [
        "A PC or Mac capable of running Unity 6 or later",
        "Regular internet access for Q&A and community support",
        "No coding or Unity experience needed — we’ll teach you everything from scratch",
        "A passion and willingness to learn how to code."
      ],
      "description": "Unlock the Game Developer in You with the Complete Unity 2D Developer Course - now being remastered in Unity 6!\nReady to make your own video games? This course will take you from total beginner to building your own 2D games using Unity 6, the world-leading game engine used by studios and indie developers alike.\nWhether you're new to coding, game design, or both — we’ll guide you step-by-step through the process using Unity’s latest tools and features. You’ll build four complete games, learn C# programming, and develop the confidence to create your own games from scratch.\nGames You’ll Build:\nDelivery Dash – Steer your way through challenges in a fun driving game.\nSnow Surfer – Carve the slopes in a side-scrolling adventure.\nJump Mania (coming soon) – Navigate perilous platforms in a fast-paced platformer.\nStar Blaster (coming soon) – Blast through enemies in a space shooter that’s out of this world.\nAll project files and assets are included, with plenty of support so you never get stuck. You’ll be writing real code with C#, gaining a solid foundation in object-oriented programming, and learning how to apply game development principles the right way.\nYou won’t just watch us build — you’ll try it yourself first, then follow along as we walk you through each step. It’s a hands-on learning experience designed to make the lessons stick.\nYou’ll also join a global community of game developers, with friendly help available in the Q&A, course forums, and beyond.\nWho This Course is For:\nIf you’ve always wanted to make games but didn’t know where to start — this is it.\nPerfect for:\nComplete beginners\nArtists looking to bring assets to life\nCoders curious about game development\nAnyone with a love for games and a desire to create\nWith lifetime access, expert instruction, and a growing library of content, this course gives you everything you need to start your journey as a 2D game developer.\nDon’t just play games — make them. Enrol now and start building with Unity 6!\n\n\nNote: This course is currently being updated to Unity 6.\nYou’ll find both the new content and the original course material included. Once the remaster is complete, the original content will be moved to a separate archive course, which you’ll continue to have full access to.",
      "target_audience": [
        "Anyone who wants to learn to code the fun way – by making games.",
        "Beginners who want to start learning C# programming and Unity 2D from scratch",
        "Aspiring indie game devs who want a structured, project-based path into game development",
        "Anyone curious about making their own platformers, arcade games, or top-down games",
        "Artists who want to learn to bring their assets into games.",
        "Developers who want to re-skill across to game development."
      ]
    },
    {
      "title": "Beginning Mobile Game Development with Solar2D",
      "url": "https://www.udemy.com/course/beginning-mobile-game-development/",
      "bio": "Discover how to use the Solar2D framework to create your own mobile games.",
      "objectives": [
        "After completing the lessons you will have the knowledge to create your own mobile game for iOS or Android.",
        "You will learn animating objects and sprites, how to play audio and sound effects, and even how to structure a complete game."
      ],
      "course_content": {
        "Intro": [
          "Read Me First!",
          "What You'll Discover"
        ],
        "Getting Ready": [
          "Installing the Corona SDK Framework",
          "Installing the Outlaw IDE",
          "Quick Look at Using Outlaw",
          "Downloading the Sample Code"
        ],
        "Lua Boot Camp": [
          "An Introduction to the Lua Language",
          "Variables",
          "Functions",
          "Tables",
          "Control Structures and Loops",
          "Intermediate: Passing Parameters"
        ],
        "Display and Animate Images": [
          "Display Images",
          "Simple Animation",
          "Displaying Multiple Images (Pro Trick!)",
          "Triggering Code with Animations"
        ],
        "Touch and Tap Events": [
          "Event Driven Programming",
          "Listening for a Tap Event",
          "The Phases of Your Touch",
          "Dragging Display Objects"
        ],
        "Make Some Noise - Music and Sound FX": [
          "Playing Short Sounds (Bleep, Bloop)",
          "Playing Music",
          "Sidebar: Fixes for Previous Video",
          "Channel Management for Audio",
          "Channel Management Part 2",
          "Adding Audio to our Frog Project",
          "Tweaking an Audio File with Audacity Software"
        ],
        "Text as Display Objects": [
          "Create Text on the Screen",
          "Sidebar: Using anchorX/Y, not setReferencePoint()",
          "Using a Custom Font",
          "Building a Scoring Module"
        ],
        "Saving and Loading Files": [
          "Writing Data to a Text File",
          "Reading Data from a Text File - Pt 1",
          "Reading Data from a Text File - Pt 2",
          "Using a 3rd-Party Code Lib (GGData)",
          "Adding File I/O to the Froggy Game"
        ],
        "Scene Management with Storyboard": [
          "Setting Up Storyboard",
          "Understanding the Scene Template",
          "Building a Storyboard App",
          "Storyboarding Our Froggy Game"
        ],
        "Sprite Animation": [
          "Intro to Animated Sprites and Image Sheets",
          "Creating Image Sheets",
          "Creating and Playing Sprite Sequences - Pt 1",
          "Creating and Playing Sprite Sequences - Pt 2",
          "Using Animated Sprites in the Frog Project"
        ]
      },
      "requirements": [
        "System Requirements: macOS® X 10.11 or later, Intel Mac",
        "System Requirements: Windows XP or later, 1 GHZ processor"
      ],
      "description": "Aimed at beginners, this video tutorial course will guide you through the creation of your own game for iOS or Android.\nThe  Solar2D framework used for this course is one of the most powerful 2D game engines available, and it's completely free so get started making your own games!\nYou Can Get Started, Right Now!\nThe videos can be viewed online and the sample code can be downloaded to your computer so you can follow along. Since it’s all online and all digital, you don’t have to wait, you can start finding out how to make your own game right now.\nPlay games other people make, or finally take control and make your own games.\n\"You got me up to speed in record time and my first game should be out in 4-6 weeks time. Congrats on an awesome course.\" - Tim Buchalka\nImagine how it will feel when people around the world download and play what you’ve created!",
      "target_audience": [
        "Aimed at beginners who have maybe poked around at Javascript or PHP. Or even someone with zero programming knowledge but a passion for making their own games."
      ]
    },
    {
      "title": "Unity 2019 Learn to write better code making a City Builder",
      "url": "https://www.udemy.com/course/city-builder-game-in-unity-2019-using-best-coding-practices/",
      "bio": "Learn object oriented programming, design patterns and Unit testing while making a City Builder game in Unity using C#.",
      "objectives": [
        "Unity",
        "c# programming",
        "Game design",
        "SOLID principles"
      ],
      "course_content": {
        "Introduction": [
          "Course Content",
          "Check the result",
          "Resources used in this course",
          "General Information about this course"
        ],
        "Programming theory": [
          "Why bother with good coding",
          "BIg picture - Architrcture",
          "Object oriented programming",
          "SOLID principles",
          "Refactoring and code smells",
          "Automated tests - Unit testing"
        ],
        "Designing our city builder": [
          "Simple Game Design Document"
        ],
        "Art prototype": [
          "What is art prototype",
          "OSX resource issue when unzipping zip archive",
          "Unity preset and resources",
          "Creating a town using prefab models",
          "Detailing our town to make it look appealing",
          "Adding simple post-processing effects",
          "Adding simple UI",
          "Summary"
        ],
        "Designing objects and responsibilities": [
          "Class structure of our city builder"
        ],
        "City builder - creating basic code structure": [
          "Project Setup",
          "Getting mouse input",
          "Placing Structure on our map",
          "Refactoring: split code into separate classes",
          "Why Do I Want To Test?",
          "Unity Test: Grid Class",
          "Unit Tests Code"
        ],
        "Refactoring input manager - Delegates": [
          "Refactoring Input Manager using delegates",
          "Cell data structure - storing state of our map",
          "Unity Tests Phase 1"
        ],
        "Switching states - Refactoring Input Manager - Interfaces": [
          "Switching between selection and building state part 1",
          "Switching between selection and building state part 2"
        ],
        "Switching states - State Pattern": [
          "Camera movement script",
          "Input for Camera Movement",
          "What is State Pattern",
          "Implementing state pattern - prepare Input Manager",
          "Implementing state pattern - Preparing states",
          "Implementing state pattern - modifying Game Manager",
          "Play mode Testing"
        ],
        "Refactoring placement state - Decoupling": [
          "Refactoring PlacementManager - Adding BuildingManager",
          "Adding Demolish Structure State",
          "Refactoring Input Manager - different platforms"
        ]
      },
      "requirements": [
        "Using Unity on an intermediate level",
        "c# intermediate skills"
      ],
      "description": "Have you ever created a game prototype that was really cool but as you have started building on it every new feature seemed to introduce bugs in the old code? Or maybe this 1 feature that you had in mind and thought as being 2h of work to implement ended up taking 2 weeks?\n\n\nIf this sounds familiar I encourage you to take a look at this course. In this course we will learn best practices for programming games. We will focus on the general game structure, code structure and how to use design patterns in our game to solve different issues that will arise. By using Unit Tests we will create some degree of certainty that our code will run as it should even after adding new features and refactoring the previously written code.\nThose are mostly overlooked topics in most courses on how to create games. There is a reason for it. They show you how to create a prototype. Your game prototype must be created fast, can be crude and can have bugs. It's role is to get you feedback if your game idea is promising.\nMy goal in this course is to give you an idea about broad range of topics mainly connected with programming. On an example of a city builder game we will look at how to use different design patterns, create unit tests and refactor the previously written code to account for the new features that we want to introduce into our game.\n\n\nAfter receiving a couple of reviews I can see that sometimes I can go too fast through some aspects and I don't explain some more basic concepts of the code. Please take this into consideration that some intermediate knowledge of C# and a good understanding on how Unity editor works is crucial for you to get the most out of this course.\nI hope that I can help you improve your coding skills where it comes to game development. At the same time I am sure that not everyone will be satisfied with my delivery and the quick pace at some points. Please know that you have 30 day to apply for a refund. I don't want anyone to feel dissatisfied with their purchase.\n*This course is made using Unity 2019. You should be able to follow along using latest LTS (long term support) version of Unity 2019.",
      "target_audience": [
        "Intermediate unity developer wanting to better there programming skills",
        "Beginner unity developer willing to work hard"
      ]
    },
    {
      "title": "Unreal Engine 5 VR Blueprint Crash Course",
      "url": "https://www.udemy.com/course/unreal-engine-5-vr-blueprint-crash-course/",
      "bio": "Unreal Engine 5 Steam VR & Oculus Fully Blueprint course for all levels",
      "objectives": [
        "Implement popular VR gameplay mechanics",
        "Unreal Engine VR with Blueprints and no coding",
        "Building & Deploying the game for Oculus Quest or Windows",
        "VR basic features."
      ],
      "course_content": {
        "Setup & Template Project Overview": [
          "Setup",
          "Project setup",
          "Overview I - VRPawn, Input, Movement",
          "VRPawn, Input, Movement",
          "Overview II - Menu",
          "Menu in VR",
          "Overview III - Grabbing, Shooting",
          "Grabbing&Shooting"
        ],
        "Implementing Basic Features": [
          "Grip animation, socket attachment",
          "Two hand grab",
          "Remote pulling",
          "Grab outline",
          "Throwing",
          "Object placement (Inventory)",
          "Full Body Character with head/hands IK (Control Rig)"
        ],
        "Gameplay Prototypes": [
          "Thor's hammer",
          "Laser Sword Game",
          "Archery",
          "Kayaking",
          "Climbing"
        ],
        "Deploying": [
          "Building & Packaging for Windows",
          "Building & Packaging for Oculus"
        ]
      },
      "requirements": [
        "No programming experience needed. We will use blueprints and relatively simple solutions.",
        "We will use Unreal Engine and basic VR Template project.",
        "Ideally Oculus Quest 2, but you can use any headset you can setup for Unreal Engine."
      ],
      "description": "You will learn how to develop basic popular VR mechanics as well as some of the most popular VR gameplay prototypes and how to run everything with or directly on a VR headset device (Oculus Quest 2).\n\nThis course is intended for anyone interested in making something for VR with Unreal Engine. You don't have to be a programmer as we won't use C++, just Unreal Engine visual blueprint scripting. Also we won't be using complex solutions.\n\nWe will start with setting up the required software, then the template project and will investigate it a bit.\n\nNext we will implement basic VR features like two handed grab, throwing or remote object pulling.\n\nAfter basic features we will implement a few popular VR gameplay prototypes such as Archery, Kayaking, Climbing. I will even show you how to implement Thor's Hammer that can smash everything and everyone and return to you from anywhere!\n\nIn the end I will show you how to package and deploy the project for Windows or to Oculus Quest directly.\n\nFor this course I will use Oculus Quest 2, but you still can use the other headset if you can configure it's usage for Unreal.\n\nI've made this course for everyone even absolute beginners and though the videos we will do everything together step by step.\n\nThe course has all the required content so don't worry if you don't have a bow or similar items required - they will be provided.\n\nFor enthusiasts I can give the access to the course github with all lectures implemented, so you could compare your solution.\n\nIf you were interested in VR but didn't know where to start - this course is for you!",
      "target_audience": [
        "Literally anyone who wants to learn how to make popular VR mechanics with no coding.",
        "Those who want to quickly dive into VR development specifically."
      ]
    },
    {
      "title": "Make 10 Advanced Pro Games in Python",
      "url": "https://www.udemy.com/course/make-10-advanced-pro-games-in-python/",
      "bio": "Learn Advanced Level Game Programming in Python using the PyGame Module and get a blueprint of making any type of Game",
      "objectives": [
        "Students will be able to create very interesting and amazing games in python."
      ],
      "course_content": {
        "Setting up Python and Integrated Development Environment IDE": [
          "Setting up Python and Integrated Development Environment IDE"
        ],
        "Dino Game": [
          "Source Code and Media File for Dino Game",
          "Game Part - I",
          "Game Part - II",
          "Game Part - III",
          "Game Part - IV",
          "Game Part - V",
          "Game Part - VI",
          "Game Part - VII",
          "Game Part - VIII",
          "Game Part - IX",
          "Game Part - X",
          "Game Part - XI",
          "Game Part - XII"
        ],
        "Car Racing Game": [
          "Source Code and Media Files for Car Racing Game",
          "Game Part - I",
          "Game Part - II",
          "Game Part - III",
          "Game Part - IV",
          "Game Part - V",
          "Game Part - VI",
          "Game Part - VII",
          "Game Part - VIII",
          "Game Part - IX",
          "Game Part - X",
          "Game Part - XI",
          "Game Part - XII",
          "Game Part - XIII"
        ],
        "Pong Game": [
          "Introduction to the Game",
          "Initializations and Declarations",
          "init Function",
          "Ball Initializations",
          "Event Handlers",
          "GUI",
          "Updating Paddle Positions",
          "Drawing the Paddles",
          "Collision Checking",
          "Updating the Scores"
        ],
        "Snake Game": [
          "Introduction to the Game",
          "Creating the Screen",
          "Creating the Snake",
          "Moving the Snake",
          "Adding Boundaries",
          "Introducing the Food",
          "Increasing Snake Length",
          "Displaying the Score"
        ],
        "Brick Breaker": [
          "Source Code and Media Files for Brick Breaker Game",
          "Game Part - I",
          "Game Part - II",
          "Game Part - III",
          "Game Part - IV",
          "Game Part - V",
          "Game Part - VI",
          "Game Part - VII",
          "Game Part - VIII"
        ],
        "Tic Tac Toe Game": [
          "Introduction to the Game",
          "Getting Started",
          "The Main Function",
          "Initialize Grid",
          "Render Function",
          "Draw Grid",
          "Click the Board",
          "Checking Winner",
          "Final Touch"
        ],
        "Flappy Bird": [
          "Defining Global Variables",
          "The Game Image Array",
          "Audio Sound Array",
          "Welcome Main Screen",
          "Main Game Play - I",
          "Main Game Play - II",
          "Collision Checking",
          "Random Pipes Generation"
        ],
        "Helicopter Game": [
          "Source Code and Media File for this Game",
          "Game Part - I",
          "Game Part - II",
          "Game Part - III",
          "Game Part - IV",
          "Game Part - V",
          "Game Part - VI"
        ],
        "Moving Objects": [
          "Introduction to the Game",
          "Game - I",
          "Game - II",
          "Game - III",
          "Game - IV"
        ]
      },
      "requirements": [
        "Basics of Python is the pre requisite to this course"
      ],
      "description": "In this course you will be able to learn about the Game Development concepts in Python from absolute scratch up to the level where you guys will be able to make Pro Level Games. We are going to do Game development in python using pygame module of Python. Pygame is a very famous and interactive module for Game development in Python. You are going to cover the very latest concepts of Game development using pygame. In this course where we will be covering 10 different Games using pygame each introducing new and interesting concepts for you to learn.\n\n\nEach Game is going to help you to learn more and more interesting concepts. At the end of this course, I assure you that you will be able to create a totally new Games of your own requirements and specifications in pygame. This course covers the latest concepts of Python and pygame. I would love to hear your feedback as you're in your journey in taking this course.\n\n\nFor this course to start, you don't need anything. You don't even need to have any past experience of Python or any other Programming Language. We have uploaded a Python Crash course as well as Pygame Crash Course at the end that will help you gain knowledge of these two topics before you start on with the Game Development in pygame. You can start on with Python then pygame and then Game development if you are a beginner. If you already have the basic knowledge of these two prerequisites then you can directly go towards Game Development using pygame and learn all the interesting concepts we have got for you here in this course.\n\nYou might encounter problems while taking this course. For this, you can directly message me and I will try my best to get back to you as soon as possible. You can ask your question(s) in Q/A Section where there will be many students who are already taking this course will answer you questions. When you done with any Game, I would definitely recommend you to upload your code and your experience with other students. You can also add more and more functionalities to your game as this is one of the prime objective of this course that you should be able to add your own functionalities in your project(game).\n\nI wish you best of Luck with this course.",
      "target_audience": [
        "Anyone who wants to create amazing games using python can enrol in this course"
      ]
    },
    {
      "title": "Unity 5 Professional Guide - Mastering C# Programming!",
      "url": "https://www.udemy.com/course/unity-5-become-a-pro-from-the-very-basics/",
      "bio": "Is coding that complicated to you? Well, let's make it simple! Learn the basics of interface up to becoming a code pro!",
      "objectives": [
        "Manipulate Unity's interface with certainty and confidence",
        "Develop any kind of project through C# skills learned throughout the course",
        "Spot and correct programming errors, avoiding unnecessary frustrations",
        "Handle Unity's set of functions to design your own games",
        "Understand and apply the math behind videogames"
      ],
      "course_content": {
        "Introduction - Getting to know Unity3D": [
          "First look at Unity's interface and Layout Setup",
          "Dealing with Game Objects",
          "Understanding physics components",
          "Managing scenes",
          "Importing models and animations, applying textures and materials",
          "Creating and understanding the importance of Prefabs",
          "Creating cool game effects with Unity's Particle System",
          "Importing 2D game assets and UI elements"
        ],
        "Scripting - Becoming a scripting pro from the basics": [
          "Introduction to the idea of a script and its initial appearance",
          "Variables and main data types",
          "Quiz on variables and main data types",
          "Conditional statements (if, else if and else)",
          "More on Conditional Statements",
          "Loop structures I: While and Do While",
          "Arrays",
          "Loop structure II: For loop",
          "Coding Exercise: Getting the smallest/biggest element from an array",
          "Functions I: Defining functions and arguments",
          "Functions II: Returning values from functions",
          "Functions III: Overload functions and passing parameters by value or reference",
          "Coding Exercise: Writing a function to swap two array indices",
          "Coroutines",
          "Classes and its instances I: A great explanation using real life examples",
          "Classes and its instances II: How to create classes and instances in C#",
          "Constructors",
          "Enumerators",
          "Static Variables and Methods",
          "Encapsulators",
          "Inheritance",
          "Polymorphism and abstraction",
          "How to get two scripts to interact with one another in Unity",
          "[Added Nov 19th] Interfaces: Definition and Application",
          "C# Review"
        ],
        "Math time - Mathematics applied to game development": [
          "Defining a vector",
          "Unit or normalized vector",
          "Operations on vectors",
          "Math example: Using vectors to detect if you’re facing the enemy",
          "Math example: Using vectors to go from A to B in 't' seconds",
          "Applying vectors on Unity"
        ],
        "Action time - Let's learn Unity's API": [
          "Keyboard and Mouse Inputs",
          "Transforming Game Objects",
          "Chasing and Looking at Another Object",
          "Changing Components in Real Time",
          "Understanding and Applying Raycasts",
          "Adding Prefabs in Real Time",
          "Creating User Interfaces and Swapping Between Scenes"
        ],
        "Get up to 25% off on my brand new course!": [
          "Get extra content!"
        ]
      },
      "requirements": [
        "Download, install and apply for a Unity 5 Personal license"
      ],
      "description": "This is the right course for who is seeking great quality knowledge covering from the most basic aspects of game development up to Unity's most useful functionalities in terms of coding! Maybe you're a designer trying to understand the coding aspect, maybe you're just a student that wants to go deeper into game development, it doesn't matter. I come from a game design background and now I'm a scripting expert so you can do it too!\n\nIn this course you can really expect code made easy. Don't fool yourself thinking that no hard work is necessary, though. As well as anything else, learning how to code in Unity is not something that happens overnight, so be sure to put a generous amount of effort onto completing quizzes and following the lectures correctly.\nThe course includes all sorts of files and materials used throughout, so you can be sure that everything you're learning in the lectures is totally reproducible in your computer without need to worry!\nThis course covers from the basics of interface up to the getting in deep touch with Unity's API, that is, the set of functions that make us able to code our own stuff inside the game engine, but don't expect to dive right into coding and all of that complicated stuff (not really). I've structured this course in such a way that you will learn everything without rush, so take your time. No prior knowledge is necessary for each lecture other than what you've learned in the previous one!\nHaving a hard time understanding something? It's like they say: a picture is worth a thousand words. That's why some of the course lectures have blackboard sessions, where I grab some pen and paper (digitally) to clear up your mind with hand-made sketches!\nI have to say that this is the best Unity course out there given its price and how much of Unity it covers. You can expect a dedicated lecturer with quite a lot of prior teaching experience, and trust me when I say: I speak your language! Shall we begin?",
      "target_audience": [
        "So you want to develop a game but have no prior knowledge? You're at the right place, my friend. This course is intended to suit the needs of students that want to get the best training on Unity3D and be a pro at this tool."
      ]
    },
    {
      "title": "Cocos2d-x v3 C++ - Beginning Game Development",
      "url": "https://www.udemy.com/course/cocos2d-x-v3-cpp/",
      "bio": "Learn how to create games for pretty much every platform from phones to tablets to desktop computers.",
      "objectives": [
        "Know the basic skills of making a game in Cocos2d-x",
        "Improved C++ Skills",
        "Game Development Skills",
        "Games Programming Skills",
        "Cross-platform Game Development Skills"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction"
        ],
        "Setting Up": [
          "Setting Up For iOS",
          "Setting Up For Android On Mac",
          "Setting Up For Android On Windows",
          "Multi Resolution Support"
        ],
        "Adding A Sprite": [
          "What Are Sprites?",
          "Adding A Sprite"
        ],
        "Positioning": [
          "Positioning Using MoveBy",
          "Positioning Using MoveTo",
          "Positioning Using JumpBy",
          "Positioning Using JumpTo",
          "Positioning Using BezierBy",
          "Positioning Using BezierTo",
          "Positioning Using Place"
        ],
        "Scaling": [
          "Scaling Using ScaleBy",
          "Scaling Using ScaleTo"
        ],
        "Rotation": [
          "Rotating Using RotateBy",
          "Rotating Using RotateTo"
        ],
        "Tinting": [
          "Tinting Using TintBy",
          "Tinting Using TintTo"
        ],
        "Fading": [
          "Fading Using FadeTo",
          "Fading Using FadeIn",
          "Fading Using FadeOut"
        ],
        "Sequencing": [
          "Repeat",
          "RepeatForever",
          "Sequence"
        ],
        "Skewing": [
          "Skewing Using SkewBy",
          "Skewing Using SkewTo"
        ]
      },
      "requirements": [
        "Programming",
        "C++",
        "Computing Basics",
        "Love for Games"
      ],
      "description": "Learn how to make cross platform games using the immensely successful game engine Cocos2d-x. A step by step process is used to show everything from project setup to essential game design technique\nGain a good understanding of the following concepts:\nC++ Game Programming\nVideo Game Logic\nCocos2d-x Game Programming\nGame Mechanics\nGame development\nGame design\nMobile development\nMobile design\nCross platform development\nCocos2d-x is one of the easiest game frameworks in the world and will provide you with a solid foundation for your game development journey. The gaming industry is bigger than Hollywood and is constantly growing, start your journey now.\nYou will be provided with the full source code to aid in development during and after this course. The source code and artwork is free to use in as many projects as you wish.\nCocos2d-x is a free open source game engine used by indie developers and companies such as Bandai Namco and Zynga.\n\n\nOver 205,000 students have enrolled on my courses and all of them are extremely satisfied. You will also be satisfied with this course. If you do not like the course, remember that within 30 days you can request a full refund. I guarantee you satisfaction.\nIf you have any questions regarding the topics covered in this course, please feel free to ask. I'm always happy to help those who want to learn.\n\n\nTo summarise this is what you get:\n• Lifetime access to HD quality videos. No monthly subscription. Learn at your own pace, whenever you want.\n• All videos are downloadable. Learn wherever you want, even without an internet connection!\n• Downloadable starter code and final code for each section.\n• Free helpful support in the course Q&A when you have questions or get stuck.\n• Multiple coding challenges to practice your new skills (solutions included).\nSounds great? Then start this adventure today by clicking the “Take this course\" button, and join me in the only course that you will need!",
      "target_audience": [
        "For new users",
        "For users with basic C++ experience",
        "People looking for a refresher for Cocos2d-x",
        "People who want to create game"
      ]
    },
    {
      "title": "Unreal Engine 5 C++ Game Development (Updated 5.6)",
      "url": "https://www.udemy.com/course/unrealcourse/",
      "bio": "Created in collaboration with Epic Games. Learn C++ from scratch while making 4 fun games in Unreal Engine 5.6.",
      "objectives": [
        "Build 4 complete games in Unreal Engine 5.6 using C++ from scratch.",
        "Master C++ - the industry-standard language used in AAA games.",
        "Understand Object-Oriented Programming and apply it to real projects.",
        "Implement core game design principles and patterns.",
        "Create smart AI behaviour for enemies and NPCs.",
        "Write clean, efficient, and professional-quality code.",
        "Know when to use Blueprints and when to use C++.",
        "Harness the Unreal Gameplay Framework to speed up development.",
        "Light and optimise your levels using modern Unreal Engine features like Lumen.",
        "Develop strong, transferable problem-solving skills for game development."
      ],
      "course_content": {
        "Introduction & Setup (New UE 5.6 Content)": [
          "New Updated Content",
          "Welcome To The Course!",
          "Installing Unreal Engine",
          "Navigating The Interface",
          "Moving & Placing Actors",
          "Compilers and Editors",
          "Installing Visual Studio on PC",
          "Installing XCode on Mac",
          "Compiling with Visual Studio",
          "Compiling with XCode",
          "C++ vs Blueprint",
          "Community & Support"
        ],
        "Obstacle Assault (New UE 5.6 Content)": [
          "Section Intro - Obstacle Assault",
          "Project Setup",
          "Geometry Brushes",
          "Creating a C++ Class",
          "Live Coding",
          "Variables and Data Types",
          "Logging Variables",
          "Number Operations",
          "Operator Precedence",
          "Member Variables",
          "Structs",
          "SetActorLocation",
          "Tick",
          "Comments",
          "GetActorLocation",
          "Delta Time",
          "Velocity",
          "Functions",
          "Function Parameters",
          "Member Functions",
          "Classes And Instances",
          "Blueprint Child Classes",
          "Distance Between Vectors",
          "If Statements",
          "Overshoot Problem",
          "Correcting Overshoot",
          "Function Return Values",
          "Rotating Platforms",
          "Importing Assets",
          "Creating Obstacles",
          "Movement & Physics",
          "Level Design",
          "Packaging The Game",
          "Wrap Up - Obstacle Assault"
        ],
        "Dungeon Escape (New UE 5.6 Content)": [
          "Section Intro - Dungeon Escape",
          "Creating The Project",
          "Lighting Setup",
          "Materials",
          "Game Mode",
          "Inheritance vs Composition",
          "Actor Components",
          "Pointers 101",
          "Pointer Practice",
          "GetOwner",
          "FMath::VInterpConstantTo",
          "Owner Goes Back",
          "FVector Equals",
          "Logical Not Operator",
          "C++ Compilation Steps",
          "Box Component",
          "The Constructor",
          "FindComponentByClass",
          "True and False Values",
          "Using Delegates",
          "Actor Tags",
          "Logical And Operator",
          "Refactoring Code",
          "Public & Private",
          "Keeping Count",
          "BP_PressurePlate",
          "Adding Tags in C++",
          "CreateDefaultSubobject",
          "Lock Blueprint",
          "Collision 101",
          "Setting Visibility",
          "Enhanced Input System",
          "Input System in C++",
          "Line and Shape Tracing",
          "UWorld Object",
          "Start & End Points",
          "Sphere Collision Shape",
          "C++ References",
          "Pass By Reference",
          "SweepSingleByChannel",
          "Else If Statement",
          "Casting",
          "TArray",
          "Removing From Array",
          "Taking Items Back",
          "Dungeon Assets",
          "Spot Lights",
          "Secret Wall",
          "Escaping The Dungeon",
          "Wrap Up - Dungeon Escape"
        ],
        "Battle Blaster (New UE 5.6 Content)": [
          "Section Intro - Battle Blaster",
          "Starter Project",
          "Base Pawn Class",
          "Child C++ Class",
          "Camera & Spring Arm",
          "C++ Game Mode",
          "Input Mapping Context",
          "Variable Declaration in Condition",
          "Forward Declaration",
          "Move Input",
          "Input Action Value Type",
          "AddActorLocalOffset",
          "AddActorLocalRotation",
          "Line Trace From Cursor",
          "Rotating The Turret",
          "Enemy Tower Class",
          "GetAllActorsOfClass",
          "While Loop",
          "Looping Array Elements",
          "Rotating Towards Player",
          "Projectile Spawn Point",
          "Using Timers",
          "Spawning Projectiles",
          "Projectile Movement",
          "This Keyword",
          "Hit Events",
          "Health Component",
          "Applying Damage",
          "OnTakeAnyDamage",
          "Handling Pawn Death",
          "Super Function Call",
          "Tank Destruction",
          "Show Mouse Cursor",
          "Ternary Operator",
          "Restart Level",
          "Game Instance",
          "Level Management",
          "Countdown Timer",
          "Widget Blueprint",
          "User Widget Class",
          "Creating The Widget",
          "Spawning Particle Systems",
          "Playing Sounds",
          "Camera Shake",
          "Battle Blaster Levels",
          "Wrap Up - Battle Blaster"
        ],
        "Shooter Sam (New UE 5.6 content)": [
          "Section Intro - Shooter Sam",
          "Test Level Setup",
          "Shooter Sam Assets",
          "Third Person Template",
          "Vector2D Input Value",
          "Mouse Input",
          "Camera & Rotation",
          "Skeletal Animations 101",
          "The Animation Blueprint",
          "Blend Spaces",
          "Connecting Animation To Gameplay",
          "Calculating Player Angle",
          "Animation State Machines",
          "Is Player Airborne?",
          "Additive Animations",
          "Crosshair HUD",
          "Shooting Input",
          "Gun Actor"
        ],
        "Original Unreal 5 Content": [
          "More to Come"
        ],
        "Intro & Setup (Original Unreal 5 Content)": [
          "Welcome To The Course",
          "Installing Unreal Engine",
          "Community & Support",
          "Navigating The Viewport",
          "Moving & Placing Actors",
          "C++ versus Blueprint",
          "Helping Us To Help You"
        ],
        "Warehouse Wreckage (Original Unreal 5 Content)": [
          "Section Intro - Warehouse Wreckage",
          "Project Setup",
          "UE 5.1 Warning: Starter Content Folder",
          "Blueprint Event Graph",
          "Physics Simulation",
          "Objects and References",
          "Adding an Impulse",
          "Blueprint Classes and Instances",
          "Spawning Actors",
          "Data Types",
          "Pawns and Actor Location",
          "Control Rotation",
          "Vector Addition & Multiplication",
          "Get Forward Vector",
          "Importing Assets",
          "Geometry Brushes (BSP)",
          "Materials and Lighting",
          "Actor Components",
          "Collision Meshes",
          "Variables",
          "Booleans and Branches",
          "Functions",
          "Return Types",
          "Pure Functions",
          "Member Functions",
          "Loading Levels & Delay Nodes",
          "Wrap-up and Recap"
        ],
        "Obstacle Assault (Original Unreal 5 Content)": [
          "Section Intro - Obstacle Assault",
          "Project Setup",
          "Customizing The Character",
          "Compilers and Editors",
          "UE 5.1 Warning: Installing .NET 6",
          "PC - Installing Visual Studio",
          "Mac - Installing XCode",
          "Installing VSCode",
          "Compiling a C++ Project",
          "UPROPERTY Variables",
          "Live Coding Issues",
          "C++ Files & BeginPlay",
          "Using Structs In C++",
          "Calling Functions in C++",
          "Tick",
          "Local Variables",
          "Pseudo Code",
          "Function Return Values",
          "Velocity & DeltaTime",
          "Scope Resolution Operator",
          "If Statements",
          "Using Member Functions",
          "Blueprint Child Classes",
          "Forcing Character Collisions",
          "GameMode",
          "Writing To The Output Log",
          "FString",
          "Member Functions",
          "Return Statements",
          "Const Member Functions",
          "FRotator",
          "Level Design & Polish",
          "Obstacle Assault: Wrap-Up"
        ],
        "Crypt Raider (Original Unreal 5 Content)": [
          "Section Intro - Crypt Raider",
          "Project Setup",
          "Modular Level Design",
          "Modular Level Layout",
          "Solution: Modular Level Layout",
          "Light Types",
          "Lumen & Light Bleed",
          "Level Lighting",
          "Character Blueprint",
          "Inheritance vs Composition",
          "C++ Actor Component",
          "Pointer Types & GetOwner()",
          "Dereferencing & Arrow (->) Operator",
          "Linkers, Headers and Includes",
          "FMath::VInterpConstantTo",
          "Scene Components",
          "Line Tracing & Sweeping",
          "GetWorld()",
          "DrawDebugLine()",
          "References vs Pointers",
          "Const References & Out Parameters",
          "Geometry Sweeping",
          "Input Action Mappings",
          "Input Action Mappings",
          "Blueprint Callable",
          "FindComponentByClass() & nullptr",
          "DrawDebugSphere()",
          "Grabbing With Physics Handle",
          "Waking Physics Objects",
          "Returning Out Parameters",
          "Overlap Events",
          "Constructors",
          "TArray",
          "While & For Loops",
          "Range Based For Loops",
          "Actor Tags",
          "Early Returns",
          "Dependency Injection",
          "Casting & Actor Attachment",
          "Adding and Removing Tags",
          "Boolean Logical Operators",
          "Level Polish",
          "Crypt Raider: Wrap-Up"
        ]
      },
      "requirements": [
        "A 64-bit PC capable of running Unreal Engine 5 (recommended).",
        "Or a Mac running the latest macOS Big Sur or newer.",
        "8GB RAM (minimum) and a Quad-core CPU at 2.5 GHz or faster.",
        "DirectX 11, 12, or Metal 1.2-compatible graphics card.",
        "Around 50GB of free disk space.",
        "No previous Unreal or coding experience required — we start from the very beginning."
      ],
      "description": "Unreal Engine 5 C++ Developer — Updated for Unreal 5.6!\nReady to make games in the amazing world of Unreal Engine 5.6?\nThis critically acclaimed Unreal Engine course was created in collaboration with Epic Games and has been fully refreshed to take advantage of the latest tools, workflows, and game dev techniques.\nUnreal Engine is the free-to-use powerhouse behind everything from AAA blockbusters to indie hits. Yes — it’s massive. But in this course, we break it down step-by-step so you can tame the beast and start creating your own games.\nNo prior experience? No problem. We start from scratch, guiding you from opening Unreal Engine for the first time to building your own playable games in C++.\nWhat You’ll Build\nObstacle Assault – Learn the fundamentals of movement, collision, and level design.\nDungeon Escape – Explore puzzle mechanics and interactive environments.\nBattle Blaster – Create your own arena shooter with enemies that fight back.\nSniper Sam – Design and code a precision shooter with satisfying game feel.\nWhy Learn Unreal C++?\n“Any serious game programmer needs to know C++.” — Jason Gregory, Lead Programmer at Naughty Dog (Uncharted, The Last of Us)\nThis course teaches you C++ from scratch while building real, playable projects — so you’re not just learning syntax, you’re mastering the language that powers the world’s biggest games.\nYou’ll also discover how Unreal Engine can export your creations to Windows, consoles, macOS, iOS, Android, and even the Web — all from one project.\nMore Than Just Tutorials\nProject-based learning — build, test, and polish real games as you learn.\nBest-in-class support — from both instructors and a thriving student community.\nAll resources included — code, assets, diagrams, and more to keep you moving.\nWhether you dream of working in AAA, launching your own indie hit, or just making games for fun, this is where your Unreal C++ journey begins.\nNote: We’ve rebuilt this course to bring you our best teaching style yet — smoother, slicker, and packed with fresh content. You’ll find both the new material and the original course included. Once the remaster is complete, the original content will be moved to a separate archive course, which you’ll continue to have full access to.",
      "target_audience": [
        "Complete beginners ready to make their first Unreal Engine games.",
        "Artists who want to bring their 3D creations to life in a game engine.",
        "Developers from Unity, Godot, or other platforms looking to learn Unreal C++.",
        "Programmers who want to re-skill into game development.",
        "Hobbyists and aspiring indies ready to explore the power of Unreal Engine 5.6."
      ]
    },
    {
      "title": "The Complete iOS Game Course Using SpriteKit And Swift 3",
      "url": "https://www.udemy.com/course/the-complete-ios-game-course-using-swift/",
      "bio": "Learn How To Plan, Design And Create Your Games For iOS Using SpriteKit Framework",
      "objectives": [
        "Plan, Design, And Develop Your Own Games From Scratch",
        "Program And Solve Complicated Problems Using Swift",
        "Organize Project And Animate Sprites",
        "Create Menus",
        "Create Menus In The Scene Editor",
        "Create Scenes In The Scene Editor",
        "Learn SpriteKit's Physics System",
        "Encript And Save Your Game Data Using NSKeyedArchiver And NSKeyedUnarchiver",
        "Play Music In Your Game",
        "Use Basic And Intermediate Features Of SKActions"
      ],
      "course_content": {
        "Introduction": [
          "Introduction - DONT SKIP THIS VIDEO"
        ],
        "Swift Basics": [
          "Before You Begin - IMPORTANT MUST READ",
          "Downloading XCode",
          "Creating A Playground",
          "Variables",
          "Constants And Comments",
          "Number Variables In More Detail",
          "Conditionals",
          "Conditionals A Deeper Look",
          "Switch And Case",
          "Operations With Variables",
          "Functions",
          "Manipulating Parameters Inside Of Functions",
          "Test Your Knowledge",
          "Classes And Objects",
          "Initializers",
          "Objects And Functions",
          "Visibility Modifiers",
          "Inheritance",
          "Arrays And Tuples",
          "Foor Loop",
          "While Loop",
          "Optionals",
          "Casting",
          "Test Your Knowledge"
        ],
        "SpriteKit Basics": [
          "Addressing New UI Changes In Xcode",
          "Introduction To SpriteKit",
          "Nodes",
          "Touches And Update Function",
          "SKActions",
          "SKPhysicsBody",
          "Detecting Collisions",
          "SKLabelNode And Scene Editor",
          "Test Your Knowledge"
        ],
        "Jack The Giant": [
          "Jack The Giant - Preview",
          "Importing Assets And Organizing The Project",
          "Gameplay Scene",
          "GameplayScene Class",
          "The Player Class",
          "Player Animations",
          "Test Your Knowledge",
          "Main Camera",
          "BG Class",
          "Clouds Controller",
          "Clouds Controller Part 2",
          "Random X",
          "Adding Physics Bodies To Player And Clouds",
          "Fixing Physics Body Problems",
          "Spawning New Clouds",
          "Test Your Knowledge",
          "Creating Our Main Menu",
          "Animating The Buttons",
          "Highscore Menu",
          "Creating Classes For Our Scenes And Navigating Through Our Scenes",
          "Importing Fonts In Our Project",
          "Adding UI Elements",
          "Creating The Pause Panel",
          "Singletons",
          "Gameplay Controller",
          "Collectables Controller",
          "Detecting Collision",
          "Test Your Knowledge",
          "Removing Children Out Of Bounds",
          "Players Bounds",
          "Game Data",
          "Game Manager",
          "Options Menu",
          "Highscore Menu And Camera Speed",
          "Player Died Function",
          "Delaying A Function Call",
          "End Score Panel",
          "Background Music",
          "Playing The Music",
          "Finishing Touches",
          "Test Your Knowledge"
        ],
        "Flappy Bird": [
          "Flappy Bird Game Preview",
          "Importing Assets And Organizing The Project",
          "Creating Our Gameplay Scene",
          "Adding Grounds And Backgrounds To Our Scene",
          "Moving The Grounds And Backgrounds",
          "Adding The Bird In Our Scene",
          "Physics Bodies And Bird Flap",
          "Adding Pipes In The Game",
          "SKAction Sequence",
          "Extensions",
          "Creating Our Score System",
          "Detecting Collision Between Bird And Other Nodes",
          "Bird Died Function",
          "Adding Finishing Touches To Our Gameplay",
          "Main Menu Scene",
          "Bird Button And Game Manager",
          "Animating The Bird Button",
          "Adding Finishing Touches",
          "Saving Our Score"
        ],
        "Cowboy Runner": [
          "Cowboy Runner Game Preview",
          "Importing Assets And Organizing The Project",
          "Creating Our Gameplay Scene",
          "Adding Grounds And Backgrounds To The Scene",
          "Scrolling Our Backgrounds And Grounds",
          "Adding Player To The Scene",
          "Adding Physics Bodies To The Player And Grounds",
          "Making The Player Jump",
          "Creating Obstacles",
          "Spawning Obstacles",
          "Randomizing The Spawn Time And Detecting Collision",
          "Move The Player When We Are On The Obstacle",
          "Player Died",
          "Creating Main Menu Scene",
          "Reloading The Game When We Die",
          "Creating Our Score System",
          "Players Animation",
          "Creating Pause Panel",
          "Saving The Score"
        ]
      },
      "requirements": [
        "Mac Computer",
        "XCode(We will download it in lecture 4)"
      ],
      "description": "***** The Course Is Updated For Swift 3 And Xcode 8 *****\n***** Enroll Now And Master 2D iOS Game Development *****\nWe built an impressive game development course that teaches you all fundamentals so you can build your own games for iOS.\nThe course is structured so that it begins slowly, giving you the basic stuff that you need to move forward, and after each video you will understand more and more fundamentals about developing games with SpriteKit.\nWe take practical approach in teaching, so we are going to build real world games that you can play after you finish building it.\nYou will also benefit from my super fast response if you have any issues that you are stuck with(I check Udemy forums every day if someone posts a question). Oh and all the students taking the course will also be there to help you!\nAll project files will be included and you are free to use them for anything that you like, personal or commercial use!\nLets take a look at the games that we are going to create inside of this course:\n- Jack The Giant -\n\nWe are going to start with a simple game that I call Jack The Giant. In this game we are going to help Jack climb down the beanstalk, along the way we can jump on white clouds but we need to avoid dark clouds. Besides of creating our gameplay we are going to create menus, implement background music, save our game progress, and much much more.\n- Flappy Bird -\nThe next game that we are going to create is Flappy Bird, and I know what you are thinking oh not another Flappy Bird clone, but this is not a regular Flappy Bird clone, oh no, I've added a lot of features that you can't find in any other flappy bird clone such as selecting a bird(choose between different flappy birds), using advanced features of SKActions and many other features that you will see inside of the course.\n- Cowboy Runner -\nAfter Flappy Bird we are going to create one of the most popular games out there - Infinite Runner!! In this game we are going to see how can we scroll our backgrounds, how can we use NSTimer to help us control our game and much much more.\n\nWhat You will learn\nBasic Swift Programming\nIntermediate Swift Programming\nAdvanced Swift Programming\nImporting And Organizing Assets\nAnimating Sprites\nCreating Menus\nCreating Cool Animations\nUnderstand And Use SpriteKit's Physics System\nSaving Game Data Using NSKeyedArchiver And NSKeyedUnarchiver\nUsing Game Controllers To Control The Workflow Of Your Game\nPlay Music In Your Game\nUsing Basic And Intermediate Features Of SKActions\nThat And Much More Is Awaiting For You In This Course\nThe course teaches everything from basic to more advanced stuff on how to plan, design and develop your game, however the course WILL NOT teach you every single aspect of SpriteKit and how to use it because it's impossible to teach everything.\nUsing what you obtain in this course, you will be equipped with more than enough knowledge in order to continue improving yourself in the field of game development, using SpriteKit or any other game development framework.\n\nIf You ever had an idea for an awesome game, then enroll in this course and learn the tools that you need to develop Your next hit game!!!\nWhat Is Your Risk By Taking This Course?\nNothing!! If you are not satisfied with the course, I promise I will give you a full refund of your money NO questions asked!!\n\nEnroll Now!! You Will Not Be Disappointed!!",
      "target_audience": [
        "Complete Beginners",
        "Anyone Who Wants To Learn iOS Game Development Using SpriteKit"
      ]
    },
    {
      "title": "Unreal Engine 4 Blueprints - The Ultimate Developer Course",
      "url": "https://www.udemy.com/course/unreal-engine-blueprints-the-ultimate-developer-course/",
      "bio": "Create three complete video games including a mobile game without a single line of code!",
      "objectives": [
        "Students will create 3 complete games including a mobile game and will test it on their mobile device.",
        "Students will learn how to get beautiful game props, characters and environments online for free.",
        "Students will learn Unreal Engine's Blueprint scripting system, which they will use to create gameplay.",
        "Students will create games without needing to learn coding."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Downloading Unreal Engine",
          "Editor Overview",
          "Maneuvering in the Viewport",
          "Viewport Icons",
          "Viewport Icons (continued)"
        ],
        "Actors": [
          "Presentation - Blueprints and the Unreal Engine Hierarchy",
          "Actor Creation",
          "The Root Component",
          "Default vs. Instance",
          "The BeginPlay Event",
          "The Tick Event",
          "Overlap Events",
          "Casting",
          "Particle Emitters",
          "Scene Components",
          "Sequence Node",
          "IsValid Node",
          "Impulse",
          "Impulse (continued)",
          "Equals Object Node",
          "Hit Events",
          "Level Design",
          "Level Design (continued)"
        ],
        "Your First Game": [
          "The Pawn Class",
          "Possessing the Pawn",
          "Pawn Movement",
          "Trigger Volumes",
          "Jumping",
          "Open Level",
          "Pickups",
          "Assets",
          "Physical Materials",
          "Damping",
          "On Sound Assets",
          "Play Sound",
          "Play Sound (continued)",
          "Particles",
          "Widget Component",
          "Changing Fonts",
          "Widget Visibility",
          "Animate Widget",
          "Bind Text",
          "Explosive",
          "HUD (Heads Up Display)",
          "HUD (continued)",
          "Saving the Game",
          "Button",
          "Door",
          "Door Sounds",
          "Movement Inputs",
          "Winning the Game",
          "Quit and Pause",
          "Booster",
          "Wall Jump",
          "Generic Button",
          "Generic Button 2 - Interfaces",
          "Construction Script",
          "Dynamic Materials",
          "Procedural Fence",
          "Collision Volumes",
          "Progress Bar",
          "Event Dispatchers",
          "Challenge: Health Pickups",
          "Packaging Your First Game"
        ],
        "Your Second Game": [
          "Game 2 - New Game Project",
          "Game 2 - The Ball Class",
          "Game 2 - The Paddle Class",
          "Paddle Course Correcting",
          "The Brick Class",
          "Brick Damage",
          "Lives",
          "Lives (continued)",
          "Game States",
          "Countdown",
          "Oops",
          "Game Over",
          "Level Completed",
          "Game Instance",
          "Level 2",
          "Game Complete",
          "Level Design",
          "Packaging Your Second Game"
        ],
        "Your Third Game - Mobile!": [
          "Top Down Project",
          "New Level",
          "Room Blueprint",
          "Character Animation",
          "Character Movement",
          "Touch Input",
          "Cameras",
          "Cameras (continued)",
          "Cursor Icon",
          "Cursor Animation",
          "Click vs Drag",
          "Character Selection",
          "Updating Character Movement",
          "Unselect",
          "Camera Drag",
          "Camera Drag (continued)",
          "Camera Drag (continued)",
          "Switch",
          "Switch and Door",
          "Door 2 Switches",
          "Final Puzzle",
          "Download Assets",
          "Elven Ruins",
          "Fixing the Nav Mesh",
          "Column Switch",
          "Door and Statue",
          "Second Door",
          "Second Door (continued)",
          "Second Door (continued)",
          "Third Character",
          "Finishing the Level",
          "Character Assets",
          "Downsizing the Project",
          "Vertex Fogging",
          "Post Process Volume",
          "Replacing Materials",
          "Footsteps",
          "Packaging for Mobile",
          "Congratulations!"
        ]
      },
      "requirements": [
        "Any student who is interested in making games can take this course."
      ],
      "description": "This course will teach you how to create video games using Unreal Engine's Blueprint system. Blueprints allows you to create top quality video games without any experience coding. You will create three complete video games, and we will package the third game for mobile and test on an actual mobile device! Learn all the basic game development skills including character mobility and animation, particle and sound effects, HUD elements like progress bars and on-screen animated text widgets, hazards and explosives, pickups, dynamic materials, gameplay mechanics like switches, doors, and much, much more!\nThis course is taught in Unreal Engine 4. Please be aware that you should use Unreal Engine 4.27 or earlier to follow along effectively. The template projects that exist in Unreal Engine 4 do not exist in Unreal Engine 5, though I provide the rolling ball template as a downloadable resource. If you use Unreal Engine 5, please do so at your own risk.\nI am currently working hard to create new content in Unreal Engine 5 in the Blueprint domain. Though the content of this course is still very much relevant, I'm working to get a new Unreal Engine 5 Blueprint course made which will be up to date. Thank you!",
      "target_audience": [
        "Beginners with no game development experience.",
        "Experienced developers who want to brush up on their skills.",
        "Programmers who want to solidify their Blueprint scripting skills.",
        "Anyone who wants to release games and earn a side income from game sales."
      ]
    },
    {
      "title": "The Ultimate 2D Top Down Unreal Engine Course",
      "url": "https://www.udemy.com/course/unreal-2d-top-down/",
      "bio": "Learn all you need to know about Paper 2D and PaperZD to make 2D and 2D/3D hybrid Top Down Games in Unreal Engine 5!",
      "objectives": [
        "How to make 2D Top Down Games in Unreal Engine",
        "Create 3 Awesome Top Down Games with various Art Styles",
        "Mix 2D Sprites with 3D backgrounds to create gorgeous 2D/3D Hybrid games",
        "Create RPG Cutscenes using the Sequencer",
        "Make a Dialogue system with Data Tables and UI Widgets",
        "Best Practices for 2D and 2D/3D hybrid games in Unreal Engine",
        "Unreal Engine Blueprints, starting from the basics up to advanced usage"
      ],
      "course_content": {
        "Course Orientation": [
          "Curriculum Overview",
          "Why make 2D Top Down Games with Unreal Engine?",
          "What Version of Unreal Engine to use (UE5.4)",
          "Our Discord and how to ask for help",
          "Backing Up Your Projects"
        ],
        "Unreal Engine 5 Crash Course": [
          "About the Unreal Engine 5 Crash Course",
          "How to Install Unreal Engine 5",
          "How to create a new Project",
          "How to navigate the Editor",
          "Content Drawer and Blueprints",
          "How to make a simple Blueprint",
          "Adding functionality to our Blueprint",
          "Useful Keyboard Shortcuts and Tips",
          "How to debug your Games"
        ],
        "Paper 2D Basics": [
          "What are Paper 2D and PaperZD?"
        ],
        "Monster World Project": [
          "Monster World Overview",
          "Setting Up the Project and Importing Assets",
          "Making a Tile Set and Tile Map",
          "Preparing the Character Sprites",
          "Best Project Settings for 2D Games",
          "Character Blueprint and Pixels Per Unit",
          "Setting up the Camera and Possessing the Character",
          "Enhanced Input and Character Movement",
          "Directional Character Animations from Scratch",
          "Adjusting the map and collisions",
          "Foreground and Background sorting",
          "Project files with layer sorting",
          "Creating a simple message UI with custom fonts",
          "Making a pickup",
          "Showing the item message",
          "NPC Dialogue and Interfaces",
          "Wrapping up",
          "Completed Project Files: Monster World"
        ],
        "Dungeon Adventure Project": [
          "Dungeon Adventure Overview",
          "PaperZD download changes",
          "Initial Setup and Asset Preparation",
          "Inheritance and Character Blueprints",
          "Multi Directional Animations",
          "Setting Up the Remaining Animations",
          "PaperZD Animation Blueprint Setup",
          "Improving Character Turning and Direction",
          "Making Simple Enemies",
          "Damaging the Player on Overlap",
          "Making a Health Component",
          "Stunned and Defeated State",
          "Sword Attack",
          "For Each Loop Fix for Sword Attack",
          "Some additional notes on Knockback",
          "Implementing Knockback",
          "Making Attacks Feel Impactful",
          "Despawning Enemies",
          "Player Invincibility",
          "Health UI",
          "Making the Bow and Arrow",
          "Arrow Interactions",
          "Creating Pickups and Item Drops",
          "Finalizing the Camera and Map",
          "Making an Enemy and Pickup Spawner",
          "Making a Wave System",
          "Wave System UI Widget",
          "Adding Sound Effects",
          "Wrapping Up",
          "Completed Project Files: Dungeon Adventure"
        ],
        "Hybrid RPG Project": [
          "Hybrid RPG Project Overview",
          "Setting Up the Project and Importing Assets",
          "Preparing All Flipbook Animations",
          "Creating the Character Blueprints",
          "Enabling the Camera and Character Movement",
          "Handling Character Animations",
          "Environment Download Changes",
          "Setting Up a 3D Map for Sprite Characters",
          "Camera Improvements and Anti Aliasing",
          "Depth of Field and Post Processing",
          "NPC Interactions Interface",
          "Creating the Dialogue Icon",
          "Creating the Speech Bubble Widget",
          "Positioning the Dialogue WIdget",
          "Locking Characters While Speaking",
          "UI Transitions for Dialogue",
          "Revealing Dialogue Letter by Letter",
          "Dialogue System through Data Tables",
          "Improving NPC Interactions Further",
          "Navigation Meshes and Free Roaming NPCs",
          "Recruiting a Follower",
          "Adding Sound Effects",
          "Wrapping Up",
          "Completed Project Files: Hybrid RPG"
        ],
        "Extra: Optional Lessons": [
          "Extra Lesson Overview",
          "Pixel Art Textures for Map Assets",
          "Masking Out Foreground Objects",
          "Making Cutscenes With the Sequencer",
          "Adding Gamepad Support",
          "Retro Character Movement"
        ],
        "Bonus: What's next?": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No prior programming or Unreal Engine experience needed! You'll learn everything you need to know."
      ],
      "description": "Welcome to The Ultimate 2D Top Down Unreal Engine Course.\nThis course will teach you everything you need to know about making 2D Top Down Games in Unreal Engine 5 by creating 3 different games.\nThe first 2 projects are 2D games only using sprites, while the last projects is a 2D|3D Hybrid mixing 2D Sprites for the characters with a 3D environment making use of Unreal Engine's cutting edge lighting and post processing.\n\nThrough teaching Unreal Engine on YouTube and also in person at a Japanese Game Dev school for the past couple of years I've gained an understanding of what students are really looking for and designed this course to teach you the process of making games with Unreal Engine.\nAll of the knowledge you'll acquire by going through this course of course doesn't only apply to Top Down games, but to creating games in general!\n\nIf you're completely new to Unreal Engine you can check out the Unreal Engine 5 Crash Course which is included in one of the early chapters.\nAfter covering the basics we'll jump right into making 3 awesome Top Down Games!\n\nThe first game is modeled after retro 'monster catcher' games and you'll learn all about Paper 2D and how we can use sprites and animations in our games.\nWe also cover how to use Tile Maps to build our stages and place obstacles and decorations in it as well that will use proper layer sorting so the character appears in front or behind;\nYou'll also learn how to set up Top Down character movement and directional animations from scratch and we'll end things off by creating an interaction system and a Hud Widget that shows dialogue lines and status text.\n\nThe second game is a Top Down Adventure game again using Tile maps and Sprites.\nWe'll expand upon what we learned in the first chapter and also learn about the intricacies of sword and bow based combat by implementing hitboxes, knockback and much more.\n\nThe last project is the Hybrid RPG which uses 2D character sprites in a 3D Environment for that unique high definition look that has become popular for JRPGs in recent years.\nWe'll expand upon the dialogue system by using Data Tables and UI Widgets that change size depending on the length of our text which will build up letter by letter.",
      "target_audience": [
        "Beginner and Intermediate Unreal Engine developers who want to make Top Down 2D Games"
      ]
    },
    {
      "title": "Game Development using Corona SDK in 2016 with ASO & Ads",
      "url": "https://www.udemy.com/course/game-development-with-corona/",
      "bio": "Dive right into making fun and interactive games for Android and iOS in this Game Development Course.",
      "objectives": [
        "Create an Original Mobile Game that will Guarantee Downloads with Corona SDK",
        "If you want to start an app business, you'll need to build games that aren't just another Flappy Bird Clone. This course will teach you how to make a game that will make an impact on the app store."
      ],
      "course_content": {
        "Course Overview": [
          "Introducing the Game - Pirates vs Ninjas",
          "What You'll Need for this Course",
          "Course Assets",
          "A Quick Lua and Corona Refreshment",
          "Taking a Peek at the Final Product"
        ],
        "Setting Up Our Game": [
          "Build-time Properties - build.settings",
          "Game Configuration Settings - Config.lua",
          "Creating the Starting Point - main.lua"
        ],
        "Creating the Main Menu": [
          "Setting Up the Menu and Composer - scene_menu.lua",
          "Adding Graphics to the Menu",
          "Adding Buttons to the Menu",
          "Adding Functionality to Buttons",
          "Adding Some Animation"
        ],
        "Creating a Place For Player Upgrades": [
          "Setting up the scene - scene_upgrades.lua",
          "Adding Graphics to the Upgrades Scene",
          "Buttons! Adding the Upgrade Buttons",
          "Adding Labels to our Buttons",
          "Making Our Scene Work"
        ],
        "Creating the Game": [
          "Setting Up the Scene - scene_game.lua",
          "Adding Physics for Collision Detection",
          "Setting Up Our Image Sheets",
          "Setting Up the Game Variables",
          "Adding Functions",
          "Adding the User Interface",
          "Adding Our Ninja",
          "Allowing Our Ninja to Move",
          "Release the Shuriken!",
          "Arrgh! Send the Pirates!",
          "Collision Detection - Part 1",
          "Collision Detection - Part 2",
          "It's Game Over!",
          "Who Needs a Pause Button Anyways?",
          "Modifying the Pause Button Function",
          "Wrapping Up Our Scene"
        ],
        "Adding Polish to Your App": [
          "Adding App Icons",
          "Launch Images",
          "Download the Final Version of Pirates vs Ninjas"
        ],
        "Monetization": [
          "Your Monetization Options with Corona SDK",
          "Free or Paid? The choice is yours.",
          "Implement RevMob Ads",
          "Vungle - Short but Sweet Video Ads",
          "Using AdMob"
        ],
        "Publishing Your App": [
          "Who Knew Publishing Could Be So Easy?",
          "Conclusion"
        ],
        "Bonus: Getting Graphics and Sounds for Your Games": [
          "Free Graphics",
          "Sounds"
        ],
        "Bonus: App Store Optimization": [
          "Intro",
          "What is App Store Optimization?",
          "The Tools of the Trade",
          "Apple vs Google vs Amazon Optimization",
          "App Icons",
          "Screenshots",
          "Generating Keywords"
        ]
      },
      "requirements": [
        "Download and Install the Latest Corona SDK",
        "You should have a bit of familiarity with Corona SDK. (Not that much is required!)",
        "Although you'll have access to a refresh, a little working knowledge of LUA will help you throughout the course."
      ],
      "description": "Overview\nHave you ever wanted to learn how to build a mobile game? Then this course is for you! Game Development with Corona SDK will skip past the boring 'Hello World' examples and you'll jump right into making a game that will be sure to make an impact in the app stores.\nYou'll learn to make a game that pits Ninjas against Pirates in a time classic battle. This game features animated characters, an intuitive playing style, an upgrade system, and in-game currency.\nOnce the game is built, you'll turn your focus on monetization. Generating revenue from your games is something that's overlooked in other courses and this course will make sure monetization is a main focus point. We'll look at paid options as well as in-app advertising options using Corona SDK.\nYou'll learn how to:\nDevelop a fun and interactive mobile game\nLearn the easy way to publish your game on multiple app stores - iTunes, Google Play, Amazon, and more!\nExplore ways to generate revenue from your games\nLearn where to find free game art\nDiscover sources for free music\nGet briefed on ASO - app store optimization\nIf you've ever wanted to build your own mobile game and you don't want another boring course on variables or loops, then this course is for you. Imagine the possibilities of being able to create your own games for customers around the world!\nWhat You'll Need\nThis course takes advantage of Corona SDK. Corona SDK is a great platform to quickly bring your ideas to life and you'll need to have a basic understanding of Corona SDK along with the latest public build. This course will walk you through some of the basics and where to download Corona SDK, but your focus will be on topics that are beyond variables and your basic if-then statement.",
      "target_audience": [
        "This course is geared towards students who have a little familiarity with Corona SDK and/or students who are looking to jump into building an original game that will make a splash in the app stores."
      ]
    },
    {
      "title": "Unreal Engine 5 C++ The Ultimate Game Developer Course",
      "url": "https://www.udemy.com/course/unreal-engine-5-the-ultimate-game-developer-course/",
      "bio": "Learn Unreal Engine 5 C++ Programming by Creating an Action-RPG Style Open World Game!",
      "objectives": [
        "How to code games in Unreal Engine 5",
        "An RPG action game with a third-person character",
        "Combat with swords and other melee weapons",
        "Creation of enemies that attack the player",
        "Health bars and player stats",
        "Unreal Engine 5's Open World system",
        "Level design and creation of realistic scenes with Quixel Megascans",
        "Motion Warping, Unreal Engine 5's new system for customized root motion animations",
        "Particle effects like blood splatter and weapon trails",
        "Unreal Engine 5's new MetaSounds system and high-quality sounds in game",
        "Best coding practices for coding games in Unreal Engine 5",
        "Use of data structures and algorithms for games",
        "Design patterns used in Unreal Engine",
        "Creation of multiple types of enemies, from humanoids wielding weapons to monsters and other creatures",
        "Importing entire dungeon levels into our Open World map with Packed Level Instances"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "How to Get Help",
          "Installing Unreal Engine 5",
          "The Level Editor Viewport",
          "View Modes",
          "Object Manipulation",
          "Panels",
          "Section 1 Challenge"
        ],
        "Realistic Landscapes": [
          "New Assets for Students!",
          "Quixel Bridge",
          "Open World",
          "Lighting and Atmosphere",
          "Landscape",
          "11 - Landscape Material",
          "Landscape Painting",
          "Tiling in Landscape Textures",
          "Foliage Painting",
          "More Foliage Painting",
          "Post Process Volume",
          "Forest Polish Up",
          "If You Get This Popup While Migrating...",
          "Packed Level Actors",
          "Mountains",
          "Level Instances",
          "Section 2 Challenge"
        ],
        "Vectors, Rotators, and Trigonometry": [
          "Coordinates",
          "Vectors",
          "Vector Examples",
          "Vector Operations",
          "Vector Operations Examples",
          "Vector Magnitude",
          "Vector Magnitude Examples",
          "Vector Normalization",
          "Rotators",
          "Section 3 Challenge"
        ],
        "C++ in Unreal Engine": [
          "Integrated Development Environment (IDE)",
          "Jetbrains Rider is now Free for non-commercial use",
          "Setting up Visual Studio",
          "C++ Refresher",
          "Reflection and Garbage Collection",
          "Section 4 Challenge"
        ],
        "The Actor Class": [
          "Actor Creation",
          "Blueprint Creation",
          "Onscreen Debug Messages",
          "How to Properly Compile",
          "Formatting Strings",
          "Drawing Debug Spheres",
          "Drawing Debug Lines",
          "Drawing Debug Points",
          "Custom Header Files",
          "Section 5 Challenge"
        ],
        "Moving Objects With Code": [
          "SetActorLocation",
          "SetActorRotation",
          "Actor World Offset",
          "Trig Functions",
          "The Sine Function",
          "Exposing Variables to Blueprint",
          "Visible But Not Editable",
          "Exposing Variables to the Event Graph",
          "Exposing Functions to Blueprint",
          "Template Functions",
          "Components",
          "Components in C++",
          "Section 6 Challenge"
        ],
        "The Pawn Class": [
          "The Pawn Class",
          "Capsule Component",
          "Forward Declaration",
          "Skeletal Mesh Components",
          "Enhanced Input",
          "Binding Inputs",
          "Enhanced Input for Movement",
          "Adding Movement Input",
          "Camera and Spring Arm",
          "Enhanced Input for Controller Input",
          "Adding Controller Input",
          "Setting the Default Pawn",
          "Section 7 Challenge"
        ],
        "The Character Class": [
          "The Character Class",
          "Enhanced Input for the Character",
          "Character Inputs",
          "Character Camera and SpringArm",
          "The Rotation Matrix",
          "Controller Directions",
          "Hair and Eyebrows",
          "Custom Hair Color",
          "Section 8 Challenge"
        ],
        "The Animation Blueprint": [
          "The Animation Blueprint",
          "The Anim Instance",
          "Jumping",
          "Jump Animations",
          "Inverse Kinematics",
          "Section 9 Challenge"
        ],
        "Collision and Overlaps": [
          "Collision Presets",
          "Overlap Events",
          "Delegates",
          "On Component Begin Overlap",
          "On Component End Overlap",
          "Section 10 Challenge"
        ]
      },
      "requirements": [
        "Understanding of the basics of the C++ programming language or a similar language. If you took my course: Learn C++ for Game Development, you're good!"
      ],
      "description": "Learn Unreal Engine 5 C++ Programming by Creating an Action-RPG Style Open World Game!\nThis course will take you from beginner to hero as we create everything in this course project from scratch. Learn Unreal Engine 5's new features from Open World maps, Quixel Bridge megascans for ultra-realistic environments, landscape sculpting and painting, dungeons, free-roaming creatures and humanoids with various weapons, breakable objects that spawn treasure, and more!\nSlay your way through your open world level, hacking and slashing creatures, breaking pots and collecting treasure and souls, and try to keep your health and stamina high!\nWe will implement enemy behavior that can be reused for various creature types, including gruntlings, raptors, insects, and golems. Code your character to be able to pick up and equip better and better weapons as she slays stronger and stronger monsters and collects loot.\nWe will cover new Unreal Engine 5 features such as Motion Warping, Meta Sounds, Linked Anim Graphs, UE5's new retargeting system with IK Rigs and IK Retargeters, Leg IK with Control Rigs, visual effect creation in Niagara, and more!\nWe'll start with a completely empty level and add everything from sky and atmosphere, nature, trees and plants, and we'll even import an entire dungeon level with the use of UE5's new Packed Level Instance feature.\nWe will cover vectors and game development mathematics in a full math section to prepare you for gameplay programming before diving in and creating our first C++ class.\nWe will then learn Unreal Engine's class hierarchy, creating a basic Actor, learning about trigonometry as we use the sine function to give our items floating behavior.\nWe then create a Bird using the Pawn class so we can fly around our level and get a literal bird's-eye view.\nWe then create our Character class, using Echo from the Valley of the Ancient Epic-released free project, a beautiful and lifelike humanoid with cloth physics on her scarf and garments.\nWe implement weapon equipping and combat. We learn how to calculate directional hit reactions, using root motion animations to make our enemies stumble in the correct direction based on the direction of impact.\nWe give our enemies patrolling behavior, then chasing and attacking behavior. We make our enemies smarter with the use of UE5's new Motion Warping system, warping our enemy's location and rotation to make it hit the target more frequently, and making it harder to move out of harm's way.\nWe then give Echo a fighting chance, by implementing a dodge ability, similar to Dark Souls and Elden Ring. She can dodge out of the way while the enemy swings fervently, making them miss so we can move in to counter-attack.\nWe make breakable pots and vases using the Chaos destruction system, and these breakables spawn treasure when we break them, allowing us to collect loot and increment our gold count in the HUD.\nWe create a beautiful Soul effect in Niagara, and make enemies spawn souls upon death so we can gain experience points.\nWe learn how to make enemies stronger with an Attribute component, giving them varying levels of health and damage, and soul spawn counts.\nWe use UE5's new Animation Blueprint Templates to reuse all of our enemy code to create different types of enemies, from humanoids that wield weapons to creatures that bite, sting, and smash.\nGet your RPG project started with this amazing course, which is the product of nearly a decade of professional Unreal Engine experience and teaching.\nThis course is in a whole new universe than the original UE4 version I created four years ago! Benefit from years of learning, teaching, and implementing Unreal's newly evolved system with its cutting-edge game creation capabilities!\nThis is my most well-taught course yet, and by far the most beautiful game project of all my courses on Udemy thus far.\nJoin me and let's have a ton of fun creating the start of an action RPG hack-and-slash Open World game in Unreal Engine 5!",
      "target_audience": [
        "Beginners to Unreal Engine who have some understanding of the C++ programming language",
        "Those who wish to get into game development in Unreal Engine",
        "Those who wish to learn the new features of Unreal Engine 5",
        "Anyone who wants to make their own games",
        "Game developers who want to solidify their understanding of Unreal Engine",
        "Those who are interested in making RPG Open World style games",
        "Those who want to learn how to implement Souls-like combat mechanics"
      ]
    },
    {
      "title": "LittleAdventurer2D: Make a 2D Action Game with Godot 4(2025)",
      "url": "https://www.udemy.com/course/little-adventurer-andie-2d-godot/",
      "bio": "(2025 Updated with Godot 4.4) Make your first 2D Godot game with good-looking game assets!",
      "objectives": [
        "Learn to make a good-looking 2D action game with Godot",
        "Learn how to code a 2D game in GDScript",
        "Learn how to control the player's 2D movement",
        "Learn how to use the AutoTile system with the TileMap node",
        "Learn how to design a 2D game level by painting the tiles",
        "Learn how to create the 2D parallax background layers",
        "Learn how to control 2D animations with the animatedSprite2D node",
        "Learn how to create the attack & health system",
        "Learn how to create a 2D bullet system",
        "Learn how to create the patrol behavior for the enemy",
        "Learn how to create a coin-collecting system",
        "Learn how to create the 2D one-way platform",
        "Learn how to control 2D VFX",
        "Learn how to handle the 2D physics layers and physics detection",
        "Learn how to create game UI in Godot, like the health bar UI & the restart button",
        "Learn how to use some GDScript unique features like the annotations, the setter and the signal system",
        "Learn how to use the Autoload system to control the gameplay flow",
        "Learn how to reload the game scene to restart the game",
        "Learn how to export the game project into executable files",
        "Learn how to use Godot's input system",
        "Learn how to load the game level",
        "Learn how to create a Main Menu and create buttons dynamically",
        "Learn to pause the game and create the pause UI",
        "Learn how to create the material blink effect",
        "Learn how to create the camera shake effect",
        "Learn how to use the Godot physics engine",
        "Learn how to create the moving platform"
      ],
      "course_content": {
        "Introduction & Project Setup": [
          "Introduction",
          "Download & Installation",
          "Download the Asset file",
          "Create the project & Import the Asset files"
        ],
        "Creating the Game Level and the Player": [
          "Setting up the Tilemap",
          "Creating the Level & the Player node",
          "Setting up the Input Map",
          "Creating the Player script & basic movement",
          "Setting up the Tilemap physics layer & physics material",
          "Creating the Run & the Jump animations",
          "Creating the One-way Platform & the Grass",
          "Creating the PlayerResetArea & the GameManager",
          "Setting up the parallax background layers",
          "Designing the first draft of the Level",
          "Setting up the particles & the sunlight",
          "Creating the Jump Up VFX",
          "Creating the Land VFX",
          "Adding the close background"
        ],
        "Creating the Enemy and the Finishing up the Player": [
          "Creating the Enemy Node & the Enemy Movement 01",
          "The Enemy Movement 02",
          "Creating the bullet",
          "The player shoot ability 01",
          "The player shoot ability 02",
          "The Enemy health system",
          "The Enemy attack ability",
          "The Player's hurt state & dead state",
          "The Player health bar UI",
          "Creating the coin",
          "Creating the coin UI"
        ],
        "Creating the UI and the end door": [
          "Creating the Game Over UI",
          "Creating The end door"
        ],
        "Designing the game level and exporting the game": [
          "Designing the level",
          "Exporting the game"
        ],
        "(06/2025 UPDATE) Updating the project to Godot 4.4": [
          "Updating the project to Godot 4.4",
          "Fix some minor warning"
        ],
        "(07/2025 UPDATE) The Main Menu, The Pause Screen and level management": [
          "Updating the door script to switch the game level",
          "Creating the Main Menu 01",
          "Creating the Main Menu 02",
          "Creating the Main Menu 03",
          "Replace the file path with the UID in the EndDoor (Level 01)",
          "Creating the Pause Menu 01",
          "Creating the Pause Menu 02"
        ],
        "(07/2025 UPDATE) Adding some Game Feel": [
          "Creating the material blink effect",
          "Creating the Screen Shake effect"
        ],
        "(07/2025 UPDATE) Adding Physics Behavior to some Coins": [
          "Using the Physics Engine to Create the Coin Burst Out Effect 01",
          "Using the Physics Engine to Create the Coin Burst Out Effect 02"
        ],
        "(07/2025 UPDATE) Adding More Game Features": [
          "Creating the Moving Platform 01",
          "Creating the Moving Platform 02",
          "Creating the Trap 01 (the static one)add file",
          "Creating the Trap 02 (the hidden one with animation)"
        ]
      },
      "requirements": [
        "It would be great if you have beginner-level programming experience"
      ],
      "description": "Hello, I’m Single-minded Ryan, a game developer and digital artist.\nIn this course, we are going to create a classic 2D platformer game, with high-quality game assets.\n\n\nIn the game you will control Andie, our little adventurer, to explore an ancient 2D world. You’ll need to defeat the enemies and reach the portal at the end of the level to finish the game.\n\n\nMy goal is to create a visual-oriented course to make you feel like you are making a real 2D game from scratch.\n\n\nThis course comes with a high-quality game asset package, including the player and enemy animations, VFX files, parallax backgrounds (some are animated), and a level TileMap.\n(sound & music not included at the moment)\n\n\nAlong this course, you'll learn everything you need to start your 2D platformer. From how to design the level using the AutoTile feature, how to control the 2D animations with the animatedSprite2D node, how to code the movement and the enemy patrol behavior, how to create the close-range attack and projectile systems, how to create the pick-up item and the VFX, how to create and control the game UI, all the way to how to export the game project into executable files.\n\n\nI'll try to focus on every detail, but at the same time, it would be great if you have some basic experience with some programming language. You don't necessarily need to know anything about GDScript, but it helps if you understand some general programming ideas such as how variables and functions work.\n\n\nBy the end of this course, you will have a 2D platformer that you can show off to your friends.\n\n\nPlease enroll today, I'm looking forward to seeing you in the course.\n\n\n\n\nAt the end of this course, you will be able to do things like:\nHow to code in GDScript, which is Godot's built-in programming language\nHow to control the player's 2D movement\nHow to use the AutoTile system with the TileMap node\nHow to design a 2D game level by painting the tiles\nHow to create the 2D parallax background layers\nHow to create the moving platform\nHow to control 2D animations with the animatedSprite2D node\nHow to create the attack & health system\nHow to create a 2D bullet system\nHow to create the patrol behavior for the enemy\nHow to create a pick-up item\nHow to control 2D VFX\nHow to handle the 2D physics layers and physics detection\nHow to create game UI in Godot, like the health bar UI & the restart button\nHow to use the Autoload system to control the gameplay flow\nHow to reload the game scene to restart the game\nHow to use Godot's input system\nHow to customize Godot's settings for your game and your workflow\nexport the game project into executable files\nHow to update the project from Godot 4.2 to Godot 4.4\nHow to load the next game level scene\nHow to create a Main Menu\nHow to pause the game\nHow to create the material blink effect (for attack feedback)\nHow to create the camera shake effect (for attack feedback)\nPlease NOTE that this course DOES NOT contain any sound and music assets at the moment.\n\n\n*All of the assets (the tile map, animation files, VFX files, background files, etc.) provided in this course are only for educational purposes, please do not use them in any commercial projects.",
      "target_audience": [
        "Beginners who wants to make good-looking 2D games with Godot",
        "Beginners who wants to learn how to design 2D game levels",
        "Beginners who wants to improve their GDScript skills for 2D games"
      ]
    },
    {
      "title": "Learn to Write Unity Compute Shaders",
      "url": "https://www.udemy.com/course/compute-shaders/",
      "bio": "Harness the power of the GPU",
      "objectives": [
        "How to write Unity Compute Shaders",
        "How to use ComputeShaders in post processing image filters",
        "How to use ComputeShaders for particle effects and flocking",
        "How use StructuredBuffers to share data between a ComputeShader and an instancing Surface Shader",
        "Using ComputeShaders to handle fluid simulations",
        "Using ComputeShaders to create a Physics engine"
      ],
      "course_content": {
        "Introduction": [
          "Contacting H3D",
          "FAQs",
          "Welcome to the course",
          "Your first compute shader",
          "Reviewing your first compute shader",
          "Multiple Kernels",
          "Challenge: Use a compute shader to draw a single square in the middle of a Quad",
          "What have you learned?"
        ],
        "First Steps": [
          "Passing data to the shader",
          "The joy of buffers",
          "Orbiting stars",
          "Using noise in the shader",
          "Mesh deformation",
          "Challenge: Draw a polygon filled with noise.",
          "What have you learned?"
        ],
        "Post Processing": [
          "Setting up the rendering pipeline",
          "A simple blur effect",
          "Night vision lenses",
          "A HUD overlay - part 1",
          "A HUD overlay - part 2",
          "A star glow effect: vertex-fragment shaders - part 1",
          "A star glow effect: vertex-fragment shaders - part 2",
          "Challenge: Create a sepia effect to the renderer output",
          "What have you learned?"
        ],
        "Particle Effects and Flocking": [
          "Setting up a buffer-based particle effect",
          "Adding a mesh to each particle",
          "A simple flocking example",
          "Using instanced meshes in the flock",
          "Using a skinned mesh in the flock",
          "Challenge: Swish that tail",
          "What have you learned?"
        ],
        "Physics on the GPU": [
          "Starting simple, bouncing balls",
          "A bit of theory",
          "Initializing the data",
          "GPU Physics Compute Shader - part 1",
          "GPU Physics Compute Shader - part 2",
          "Voxelization of a mesh",
          "Challenge: tumbling chess pieces",
          "What have you learned?"
        ],
        "Grass": [
          "Using Blender to create a single grass clump",
          "Using instancing to cover a surface with grass",
          "Bending blades of grass",
          "Grass on an uneven surface",
          "Trampling the grass",
          "Challenge: Use noise to bend grass clumps",
          "What have you learned?"
        ],
        "Fluids": [
          "Navier-Stokes: the famous basis for fluids simulations",
          "StableFluids",
          "StableFluids - part 2",
          "Smoothed Particle Hydrodynamics",
          "Position Based Dynamics",
          "Challenge: Smoke using StableFluids",
          "What have you learned?"
        ],
        "Conclusion": [
          "The polygon function",
          "Credits",
          "Bonus lecture",
          "Where to now?"
        ]
      },
      "requirements": [
        "You must be familiar with the basics of Unity",
        "You need to have a basic knowledge of C#"
      ],
      "description": "By learning to create Compute Shaders, you will put yourself at the cutting edge of Unity development. Unlike a traditional shader, you can use a Compute Shader to handle any data manipulation problem, where having dozens (or even hundreds) of threads running simultaneously causing a bottleneck in your game to run many, many times faster. In this course you will start from small steps, learning the basics of compute shaders. First, we look at passing data from the CPU to the GPU using buffers. Then we’ll look at using these buffers in our calculations. Once you have this initial grounding, you learn how to use these techniques to create blisteringly-fast post-processing filters. You can use Compute Shaders to handle particle effects and flocking calculations. In the course, you'll create a flock of thousands of birds where each bird flaps its wings in sync with its speed through the air. Divide and conquer is the way, with Compute Shaders. By using hundreds of threads running simultaneously, we develop a GPU Physics engine that can handle thousands of tumbling chess pieces. Compute Shaders are ideal for handling the orientation of grass blades as an avatar moves through grass. The challenging subject of fluids (both 2D and 3D) are covered in the course and you'll see how much this computationally-intensive field benefits from Compute Shaders.\nThe resources for the course are presented as a code-along version and a complete version and include over 30 different examples. Unity Compute Shaders provides the ideal platform to learn how to handle complex problems in your games. Flocking calculations using the 3 key rules of Separation, Cohesion, and Alignment are covered in detail. The physics calculations to handle fast collision detection and the forces involved are included (both theoretically and practically). Smoothed Particle Hydrodynamics is a technique for calculating fluid simulations. We'll take you through it from the foundation level.\nIf you're working with Unity, you need to understand how to use Compute Shaders to ensure your game has the best performance. After all, why let the GPU sit idle while the CPU is working overtime? You'll see massive performance improvements if you switch some tasks to the GPU and handle them with a Compute Shader.\nThis course uses Unity 2019.4 and is Windows and Mac compatible.\nStudent feedback\n\"This course is simply amazing. I always wanted to learn those topics and finally got some incredible resources. Thank you a lot. Btw I loved the didactic. The default scenes and challenges are really helping me to stick with the course without getting frustrated. The topics covered are very difficult but you made it in a way where we can really get step by step and at the same time seeing incredible things on screen!\"\n\"This course is an intensive, well explained, understanding on how compute shaders work, impressive results and explanations\"\n\"Amazing course - followed up Penny De Byls CG Shader course with this one and they dovetail excellently. Nicholas does a great job with some interesting projects and great concepts - loved the section on fluid simulation.\"\n\"I have just started the Compute Shaders course from Holistic 3D. Loving the course, and I am finding it super easy to understand! Been looking for a decent tutorial for ages, and this is definitely the one I have been looking for!\"\n\"Great tutorial, knowledge is condensed and easy to acquire. I always wanted to learn programming shaders and GPU computing, so this course is something that fits my needs perfectly!\"\n\"This course excels at filling in the blanks from my self-taught knowledge and understanding of compute shaders. The explanations are concise yet full, all the while aiding the connection of the basics to form a solid foundation!\"\n\"Course is super informative with great pacing (on the fast side) and plenty of challenges along the way. The challenges are why I am giving the 5-star rating. These tend to require some thought, but are solvable using what we have learned, and for my taste, just the right level of difficulty.\"\n\"This course is absolutely a must for any 3D graphics developer. It is the best resource I have seen online without a doubt. Nicholas is an amazing instructor and he is able to explain really complicated concepts such as Navier-Stokes equations is very simple terms. I would give 10 stars it if was possible. Way beyond my expectations and I will watch it again several times as references. Thank you Mr. Lever for your outstanding work in teaching incredible content with very accessible language. Please more physics simulation :)\"\n\"This is absolutely worth your time and money if you want to learn about compute shaders.  Nik Lever takes the time to explain the relevant code line by line and is clearly knowledgeable about the subject. His jovial British spirit will encourage even the most jaded souls to hone their knowledge as he presents coding challenges that grow incrementally in complexity as the course progresses. Will be checking out whatever course he creates next.\"\n\"I have been struggling with a bottleneck in my project and learning about compute shaders gave me a whole new perspective. The instructor knows what he's talking about. This is a very good course on the subject.\"\n\n\nWhat others are saying about Nik's courses:\nVery rich content and impressive didactics. Very good to learn from someone who has mastered the subject and knows how to teach.\nNik's style of teaching made me understand everything very intuitively and I'm so comfortable with shaders now.\nI like Nik's courses, I understand in the way he explains. Great content.",
      "target_audience": [
        "Developers wanting to add compute shaders to their skill set",
        "Developers who wish to use the GPU to avoid processing bottle necks on games",
        "Developers curious to know modern techniques for flocking, gpu physics, grass, ray tracing and fluids"
      ]
    },
    {
      "title": "Unreal Engine 5 C++ Multiplayer: Make An Online Co-op Game",
      "url": "https://www.udemy.com/course/unreal-engine-5-multiplayer/",
      "bio": "Learn intermediate C++ and the latest UE5 tech to make your own online multiplayer adventure games.",
      "objectives": [
        "Learn intermediate C++ and the latest UE5 tech to make your own online multiplayer adventure games.",
        "Fundamentals of making online multiplayer games in Unreal.",
        "Create online gameplay sessions.",
        "Program online multiplayer gameplay.",
        "Master the replication system (the part of Unreal used to make multiplayer games).",
        "Use the Online Subsystem (which Unreal uses to create online gameplay sessions).",
        "Use Steam’s online services to connect across the internet.",
        "Design and program a 2 player co-op adventure game that you can play with your friend over the internet.",
        "We’ll also teach you about level design."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Development Setup",
          "UE 5.3 Warning: Client Travel Fails",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Multiplayer Fundamentals": [
          "Section Intro - Multiplayer Fundamentals",
          "Multiplayer Overview",
          "Netmode",
          "Connecting via LAN",
          "Replication Intro",
          "Network Role & Authority",
          "Network Roles Example",
          "Variable Replication",
          "RepNotifies",
          "RepNotifies Continued",
          "Server RPCs",
          "Spawning Static Mesh Actors",
          "RPC Validation",
          "Multicast RPCs",
          "Spawning Particle Effects",
          "Actor Ownership",
          "Client RPCs",
          "Wrap Up - Multiplayer Fundamentals"
        ],
        "Online Subsystem": [
          "Section Intro - Online Subsystem",
          "Online Subsystem Intro",
          "Project Setup - Online Subsystem",
          "Game Instance Subsystem",
          "Main Menu",
          "Session Interface",
          "Batch Script Testing",
          "Accessing Subsystem in Blueprint",
          "CreateSession",
          "Session Interface Delegates",
          "DestroySession",
          "DestroySession Delegate",
          "FindSessions",
          "Using ServerName",
          "JoinSession",
          "Create & Join Menus",
          "Menu Functionality",
          "Disabling Buttons",
          "Wrap Up - Online Subsystem"
        ],
        "Co-op Adventure Gameplay": [
          "Section Intro - Coop Adventure",
          "New Map",
          "Pressure Plate",
          "Pressure Plate Constructor",
          "Pressure Plate Blueprint",
          "Pressure Plate Tick",
          "Pressure Plate Delegates",
          "Transporter Component",
          "Transporter Constructor",
          "Counting Active Plates",
          "Moving Owner Actor",
          "Movable Actor",
          "Movable Actor Constructor",
          "Movable Platform",
          "Movable Door",
          "Pressure Plate Animation",
          "Collectable Key",
          "Collecting The Key",
          "Better Looking Key",
          "The Key Holder",
          "Activating Key Holder",
          "Trigger Actor Keys",
          "Win Area",
          "Win RPC",
          "Win Screen",
          "Customizing Player Movement",
          "Level Design",
          "Level Design #2",
          "Level Design #3",
          "Wrap Up - Coop Adventure"
        ],
        "Continuing Your GameDev Journey": [
          "BONUS Lecture"
        ]
      },
      "requirements": [
        "Beginner to Intermediate user of Unreal - if you already know a bit of Unreal and have an understanding of basic coding concepts this is the course for you!"
      ],
      "description": "Want to learn how to make your own online multiplayer adventure games?\nIn this course you’ll use the latest Unreal Engine 5 features and C++ to do just that!\nThe main game in this course is a two player co-op action adventure game, but you can apply the code and principles to whatever type of online multiplayer game you want to make.\nAlong with learning all about level design, you’ll also create different gameplay features like pressure plates, movable platforms and doors, and collectible keys.\nBy the end of the course you’ll have a fun co-op adventure game you can play with your friend online. Plus the tools to continue to work on it and really make it your own!\nUnderstanding online multiplayer is difficult, this course makes it simple by giving you easy to understand explanations and step by step examples.\nEven if you understand the basics of multiplayer, it’s still difficult to make a multiplayer game. This course will teach you how to put your knowledge to practical use, showing you how to make a full game.\nThis is an intermediate course, so if you already know a bit of Unreal and have an understanding of basic coding concepts this is the course for you!\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nYou’ll also gain access to a course forum where you can discuss topics on a course-wide basis, or down to the individual video. Get plugged into our communities of amazing developers on Facebook (nearly 20k), in our own TA-curated Community (17k views/day), and our student chat group (10k live at any one time).\nSo enrol today and create your own multiplayer game!",
      "target_audience": [
        "Idea if you want to learn to make a multiplayer game in Unreal but don't know where to start.",
        "Even if you understand the basics of multiplayer it's still difficult to make a multiplayer game, this course will teach you how to put your knowledge into practical use and show you how to make a full game."
      ]
    },
    {
      "title": "How to become Technical Artist in Game Development",
      "url": "https://www.udemy.com/course/technical-artist/",
      "bio": "Technical Artist Career overview - From Skills to Interviews.",
      "objectives": [
        "Сlear requirements in Hard and Soft skills for obtaining Technical Artist role",
        "Real Time Engines: Overview, Rendering pipeline; Profiling; Optimizing",
        "Scripting using Python, MaxScript, MEL, VEX",
        "Procedural modeling using Houdini",
        "Procedural Textures & Material creation using Substance Designer",
        "Essential Math for Technical Artists",
        "Shaders: Node-based and HLSL",
        "Production art pipeline creation",
        "Support in preparation to Tech Art interview"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the course",
          "How to use this course",
          "Who is Technical Artist in Game Development"
        ],
        "Hard Skills – Real-Time Engines": [
          "Section overview",
          "Real Time Engines overview (UE, Unity, Custom)",
          "Rendering Pipeline",
          "Performance Profiling Techniques",
          "Scene Optimization Tips",
          "Frame debugging with RenderDoc"
        ],
        "Hard Skills – Scripting": [
          "Section overview",
          "Minimal valuable Python scripting knowledge for Tech Artist",
          "Max Script basics for 3Ds Max scripting",
          "MEL basics for Maya scripting",
          "Tech Art scripting examples"
        ],
        "Hard Skills – Procedural": [
          "Section overview",
          "Proceduralism as a content creation approach",
          "Unveiling Houdini",
          "Houdini learning plan",
          "VEX in Houdini",
          "Houdini SideFX Labs",
          "Substance Designer",
          "[Workshop] Bridge between Substance Designer and Substance Painter"
        ],
        "Hard Skills – Shaders": [
          "Section overview",
          "Shaders introduction",
          "[Workshop] Basics of node-based Shaders creation",
          "Basics of code-based Shaders creation"
        ],
        "Hard Skills – Math": [
          "Section overview",
          "Vectors, Interpolations, Matrices and Quaternions"
        ],
        "Hard Skills – Establishing pipelines": [
          "Section overview",
          "What is pipeline",
          "Art creation pipeline",
          "Project Asset Management pipeline"
        ],
        "Soft Skills": [
          "Section overview",
          "Proactivity",
          "G.S.D Approach",
          "Communication and Collaboration in a team",
          "Looking for the Root",
          "The Power of Feedback"
        ],
        "Planning further steps towards TechArt role": [
          "Section overview",
          "Preparing for the Tech art Interview",
          "Typical Technical Artist interview questions",
          "TechArt Portfolio recommendations",
          "Where to apply? Indie vs AAA studio comparison",
          "BONUS. Links to in-depth learning resources"
        ],
        "Course wrap-up": [
          "Last word from Author"
        ]
      },
      "requirements": [
        "No previous Game Dev / Art / Programming experience required, but would help catching up the learning material more easily"
      ],
      "description": "Technical Artists – rare beasts in Game Development that both have great artistic skills and technical know-how. They take crucial part across the whole production pipeline in any project. The list of TechArt responsibilities is so big and versatile that it would not fit in this description. That explains high demand on the market for Technical Artist and their highest compensation rates across all artists in Game Dev.\n\nIn the vast sea of online information, the key to success lies in strategic learning. With the internet providing nearly limitless resources, it's crucial to discern what truly matters and where to direct your learning efforts. This course is designed to guide you through the maze of information, helping you identify the essentials and focus your energy on what truly brings you closer towards Technical Artist role.\n\nThis course is establishing a foundation which would serve as a Road to obtain Technical Artist role. Its core idea is to clarify all the core required Hard and Soft skills for being a good Technical Artist and do a basic overview of all of them to prepare and simplify further in-depth learning.\n\n\nLay the groundwork of your future success in the dynamic world of Game Development. Your journey towards mastering the Technical Artist role starts here.",
      "target_audience": [
        "Highly motivated beginners interested in obtaining Technical Artist role in Game Development industry",
        "Gameplay/Tools/3D programmers aimed to bring more artistic awareness in GameDev pipelines",
        "Experienced Artists and Animators who want to develop technical skills",
        "Game Designers who're looking towards Technical Design / Technical Art role",
        "Those who aim to create a bridge between Tech and Art in Game Development"
      ]
    },
    {
      "title": "Python Design Patterns",
      "url": "https://www.udemy.com/course/python-design-patterns/",
      "bio": "Design patterns to improve the speed, code reuse, and performance of your Python applications",
      "objectives": [
        "Use creational patterns such as Factory, Builder, and so on",
        "Understand which patterns to use during development, and when",
        "Identify simple ways to realize relationships between entities",
        "Encapsulate behavior in an object and delegate requests to it",
        "Understanding design techniques that will be detrimental to your application"
      ],
      "course_content": {
        "Design Pattern Warm Up": [
          "The Course Overview",
          "What Are Design Patterns?",
          "Design Pattern Classification",
          "Advanced Python Topics",
          "Inheritance in Python"
        ],
        "Producing with Factories": [
          "Factory",
          "Abstract Factory",
          "Builder",
          "Prototype",
          "Singleton Versus Borg"
        ],
        "Structuring Around": [
          "Model View Controller",
          "Façade",
          "Proxy",
          "Decorator",
          "Adapter"
        ],
        "Behaving Ourselves": [
          "Command",
          "Interpreter",
          "State",
          "Chain of Responsibility"
        ],
        "Behaving Ourselves Again": [
          "Observer",
          "Strategy",
          "Memento",
          "Template",
          "Reactive Programming"
        ],
        "No Pattern (a.k.a AntiPattern)": [
          "Spaghetti Code",
          "Blob",
          "Functional Decomposition",
          "Copy and Paste"
        ]
      },
      "requirements": [
        "The user-friendly video has a practical approach. Every pattern discussed is followed by an important example."
      ],
      "description": "A knowledge of design patterns enables developers to improve their codebase, promotes code reuse, and makes the architecture more robust. This course focuses on showing you the practical aspects of smarter coding in Python.\nWe start off by easing you into the world of design patterns, and helping you brush up on your OOP skills. From there, you'll explore the most widely used patterns and create objects in a manner best suited to the situation. Then we take you through some patterns that will help you identify simple ways to realize relationships between entities. Next, we show you how to encapsulate behavior in an object and delegate requests to it, before we up the ante and delve into some advanced patterns. Last but not least, we'll make you aware of design styles that will hamper your development, rather than improving it.\nWith this course, thanks to patterns, you will be well equipped to craft faster, cleaner, and smarter applications.\nAbout the Author :\nTong Qiu\nColibri is a technology consultancy company founded in 2015 by James Cross and Ingrid Funie. The company works to help its clients navigate the rapidly changing and complex world of emerging technologies, with deep expertise in areas like big data, data science, machine learning, and cloud computing. Over the past few years they have worked with some of the world's largest and most prestigious companies, including a tier-1 investment bank, a leading management consultancy group, and one of the world's most popular soft drinks companies, helping each of them to make more sense of its data, and process it in more intelligent ways.\nThe company lives by its motto: Data -> Intelligence -> Action.\nTong Qiu is a full stack web developer. She stumbled into the tech world seven years ago, through computational projects to solve pure math problems at university, and hasn’t looked back since. After graduation, she worked in a large investment bank, building solutions for massive compute parallelization before transitioning to web UI projects to address rapidly changing regulatory requirements.\nTwo years ago, she moved from finance to e-commerce and has been building applications in Python Django as well as React and Redux, solving problems ranging from scaling email send queues to optimizing UX for shopping journeys. She is a big fan of test coverage, and always strives to always find robust, maintainable technical solutions that can solve everyday problems in novel and elegant ways.",
      "target_audience": [
        "The video will appeal to Python developers, engineers, data scientists, and statisticians who use Python for their day to day programming. The video follows a user-friendly approach. A knowledge of Python programming is required."
      ]
    },
    {
      "title": "Anime Character Creator: Make 3D Anime Characters in Blender",
      "url": "https://www.udemy.com/course/blender-anime-character/",
      "bio": "Model, rig and pose an anime character in this intermediate Blender course.",
      "objectives": [
        "Model an anime character",
        "Learn the basics of topology & rigging",
        "Box model or build the character from scratch",
        "Create clothing for the character",
        "Weight painting",
        "Texturing characters"
      ],
      "course_content": {
        "Modelling The Face": [
          "Welcome To The Course",
          "Community & Support",
          "Inserting Background Images",
          "Modelling The Face Outline",
          "The Nose & Mouth",
          "Filling In",
          "Back Of The Skull",
          "The Neck",
          "The Inside Of The Mouth & Eyes",
          "The Ears & Subdivision Modifier"
        ],
        "Modelling The Body": [
          "Section 2 - Modeling the Body",
          "The Torso",
          "The Chest & Buttocks",
          "The Legs",
          "The Feet",
          "The Arms",
          "The Hands",
          "The Fingers",
          "The Iris & Face Adjustments",
          "Upper Body Adjustments",
          "Lower Body Adjustments"
        ],
        "Hair & Clothing": [
          "Section 3 - Hair & Clothing",
          "Upper Boots",
          "Lower Boots",
          "Creases & Details",
          "The Gloves",
          "The Trousers",
          "The Shirt",
          "The Corset",
          "The Belt",
          "The Belt Buckle",
          "Eye Lashes",
          "Shirt Drawstring",
          "Hair Base",
          "Hair Curves"
        ],
        "Texturing": [
          "Section 4 - Texturing",
          "Unwrapping the Clothes",
          "Unwrapping the Body",
          "Finishing the Unwrap",
          "Checking the Unwrap",
          "Blender 4 Updates",
          "Blender 4 Updates",
          "Base Colours",
          "Paint Mask",
          "Painting the Eyes",
          "Painting the Iris",
          "Painting the Face",
          "Painting the Body",
          "Painting the Trousers",
          "Painting the Boots",
          "Painting the Shirt",
          "The Belt Buckle & Drawstring",
          "The Hair"
        ],
        "Rigging & Posing": [
          "Section 5 - Rigging & Posing",
          "The Armature",
          "IK & Pose Mode",
          "Parenting the Body to the Armature",
          "Weight Painting",
          "Rigging the Clothes",
          "Masking the Body",
          "Hair Rigging With Shape Keys",
          "Hair Rigging With Bones",
          "Making the Spear",
          "Posing",
          "Rendering",
          "Course Completion"
        ],
        "Continuing Your GameDev Journey": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A reasonable understanding of the Blender interface. If you've taken any of our other Blender courses then you'll be good!"
      ],
      "description": "Want to learn to rig and pose an anime character in Blender? And at the same time, learn the more complex aspects of 3D modelling such as topology and edge flow?\nIn this course, you’ll learn how to model anime characters and develop skills in box modelling techniques. This is a very technical approach and different to the sculpting workflow, which we cover in other courses.\nYou’ll make clothing for your characters, and learn basic to intermediate techniques which include rigging the clothing and texturing. These simple, yet effective, techniques will prepare you for more advanced modelling and topology\nThis course is aimed at intermediate Blender users looking for more advanced techniques and a “stepping stone” course to make the jump from beginner to pro!\nYou’ll need a reasonable understanding of the blender interface, ideally having gone through one of our more beginner friendly Blender courses.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAll students have access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nNote: access to this course comes with an optional, free community site where you can share games and 3D models, as well as connect with thousands of other students.\nLevel up in Blender and create your own anime characters now!",
      "target_audience": [
        "This course is perfect for you if you're an intermediate to advanced Blender user, looking for a “stepping stone” course to make the jump from beginner to pro!"
      ]
    },
    {
      "title": "Learn Java by building 17 projects step by step",
      "url": "https://www.udemy.com/course/java-for-beginners-with-17-hands-on-projects/",
      "bio": "A beginner's guide to learning to code in Java by creating 17 projects from scratch",
      "objectives": [
        "Develop java console applications",
        "Develop GUI applications in java",
        "Develop applications in NetBeans IDE",
        "Import and use java packages",
        "Run and build java apps outside IDE",
        "Create classes",
        "Create user interface with swing components",
        "Configure swing components",
        "Troubleshoot coding errors",
        "Generate event handlers"
      ],
      "course_content": {
        "Getting Ready For Java": [
          "Introduction",
          "What is Java",
          "Installing JDK and NetBeans Bundle",
          "Your First Java Program",
          "Basic structure of a java program",
          "What is a Java Package",
          "Primitive Data Types",
          "Basic Operators",
          "What are Variables ?",
          "Arrays",
          "Using Comments",
          "Running Java Outside the IDE"
        ],
        "Project 1 :Develop a Height Conversion Tool": [
          "Creating the Project",
          "Building the user interface -Part1",
          "Building the user interface -Part2",
          "Adding styling to your user interface",
          "Changing Variable Names",
          "Coding the exit and clear buttons",
          "Writing Code to do the conversion",
          "Running and Deploying Your Project"
        ],
        "Project 2: Creating a Word Count Tool": [
          "Creating the Project",
          "Designing the GUI - Part 1",
          "Designing the GUI - Part 2",
          "Styling the GUI",
          "Renaming the variables",
          "Programming the exit and clear buttons",
          "Programming the Count Button",
          "Deploying and running your project"
        ],
        "Project 3: Create a Weight Conversion Tool": [
          "Create Project and GUI",
          "Customizing the GUI",
          "Adding Color to GUI",
          "Coding the exit and clear buttons",
          "Coding the convert button",
          "Running and Building your project"
        ],
        "Java Console Beginner Projects": [
          "Project 4: Comparing Two Numbers",
          "Project 5: Calculate Area and Perimeter of a Circle",
          "Project 6:: Constructing a Triangle with Code",
          "Project 7: Finding Even Numbers",
          "Project 8: Write a Program to determine leap years",
          "Project 9 : Write a Program to Generate Prime Numbers",
          "Project 10: Write Program to Find the Largest Numbers",
          "Project 11: Random Number Generator"
        ],
        "Project 12: Creating a basic calculator with Java": [
          "Creating the Project and Adding a Form",
          "Adding a Textbox and button to form",
          "Changing form properties and adding more buttons",
          "Java Form Events",
          "Coding the Plus Button",
          "Coding the equal and clear button",
          "Coding the Math Operators and using a switch statement",
          "Building and deploying your project"
        ],
        "Project 13: Creating a Percentage Calculator": [
          "Creating the Project",
          "Building the Front End",
          "Customizing the GUI - Part 1",
          "Customizing the GUI - Part 2",
          "Coding the exit and clear button",
          "Coding the logic and building the app"
        ],
        "Project 14: Creating a Digital Clock": [
          "Creating the Project Structure",
          "Importing Packages",
          "Using Classes",
          "creating a Thread",
          "Modifying Jlabel Properties",
          "Building and Deploying your application"
        ],
        "Project 15 : Create a Java Program to Add two numbers": [
          "Creating the project",
          "Renaming the Components",
          "Coding the exit buttons",
          "Coding the clear button",
          "Coding the addition button",
          "Running your project outside the IDE"
        ],
        "Project 16 :Build a Temperature Converter Program": [
          "Setting up the project",
          "Creating the GUI",
          "Adding the application logic",
          "Running and deploying your project"
        ]
      },
      "requirements": [
        "You should be able to use a PC at a beginner level"
      ],
      "description": "Learning to code can be both fun and rewarding . Java is a useful ,robust and popular programming language to embark on that journey.\nThis course is a practical Hands-on course from the first to the last section. The best way to learn is by doing so you will be doing a lot of coding.\nJava  is  a  case-sensitive, modern, general-purpose, object-oriented programming language.  One of the reasons Java is so popular is that it is platform independent . You only need to write java code once and then run it on any platform  be it mac, windows or Linux.\nIn this course we will create 17 practical and useful projects step by step. The projects include:\nCalculator\nDigital Clock\nWeight Converter\nTemperature Converter\nHeight Converter\nRandom Number Generator\nBMI Calculator Tool\nPercentage Calculator\nWord Count Tool\nAdd number  program\nProgram to determine Even numbers\nProgram to determine Leap Year\nProgram to calculate area  and perimeter of a circle\nProgram to find highest number\nProgram to find Prime Numbers\nProgram to create a triangle\nProgram to determine largest numbers\n\nThis course  will  guide you through java basics, its core syntax, and the fundamentals of writing strong java code.  I will  show you how to install Java JDK and NetBeans IDE. Netbeans is a  great IDE for developing in java, and then dive into the language itself. Along the way, we will cover topics such as:\nDeclaring and initializing variables with a variety of data types\nExploring  Basic Arithmetic operators\nTroubleshoot Compile errors\nControlling flow with conditional code\nCreating Method\nCreating Event Handler methods\nUsing Component controls and changing their properties\nIf java is your first step into programming or adding it your existing skillset, these training videos will help you understand the language and use it to build your own great software.",
      "target_audience": [
        "Absolute beginners to programming in Java",
        "Absolute beginners to programming in general"
      ]
    },
    {
      "title": "Create your First Computer Game with Stencyl",
      "url": "https://www.udemy.com/course/create-your-first-computer-game-with-stencyl/",
      "bio": "With no previous programming or game design experience, build your own amazing 2D games in just a matter of hours!",
      "objectives": [
        "By the end of this course, you will be capable of creating your own 2D games",
        "You will learn to build logic in a visual interface, skills which are transferable to traditional programming if & when you choose to take that step",
        "You will learn to create your own sprites with Photoshop",
        "You will have acquired a skillset which, in the near future, will allow you to publish your creations to Windows Desktop, Windows 8, Mac OS, IOS & Android"
      ],
      "course_content": {},
      "requirements": [
        "A computer, either Windows or Mac, which can run Stencyl. Almost any computer should be capable of this",
        "Enthusiasm about the subject",
        "Commitment"
      ],
      "description": "Note: This course is officially endorsed by Stencyl.\nNo prior experience is required to take this course. Learning from the ground up, you will acquire all the skills necessary to Design and Create your very own computer games, which can then be shared with your friends, or even published to commercial markets such as flash portals, the App Store & Google play. Using the unique logic block system of Stencyl thought in this Stencyl Course, you will be able to create a game of any genre, quickly and effectively. Please follow through the lectures sequentially, and always maximize the videos to get the most out of them. Among many other things, by the end of the course you will have learned how to:\nCreate a top-down perspective for your game\nMove characters with the keyboard\nEasily rotate actors to look at the mouse cursor\nSpawn and destroy actors in real-time, at will\nWrite simple and advanced AI for non-player characters\nDesign levels using tile-sets and actors\nCreate health bars\nImplement game rules to determine between success or failure\nFor the most effective learning experience, it is essential that you pay close attention to each lecture in order, and then complete the task yourself. If you struggle, watch the video again until you get the full sense of the lesson. Get excited, this is a learning experience you'll never forget. Prepare to start making your own games with Stencyl.",
      "target_audience": [
        "Complete Beginners",
        "Hobbyists who wish to create their first production quality, cross-platform title in less time",
        "Students",
        "Indie Developers, Looking For a Faster Way To Build Multi-Platform Games"
      ]
    },
    {
      "title": "Making an Action-Adventure Game Using GameMaker",
      "url": "https://www.udemy.com/course/gamemakerstudio2/",
      "bio": "Build a feature-rich 2D game while learning the best of GameMaker Language!",
      "objectives": [
        "Build and code your games all by yourself",
        "Data structures and inventory",
        "Day-night cycle and lighting",
        "Dynamic textboxes",
        "Much more!"
      ],
      "course_content": {},
      "requirements": [
        "GameMaker"
      ],
      "description": "Hello there! Welcome to my course.\n♦ About me ♦\nI'm Gurpreet Singh, a 2D indie game developer and instructor. I have years of experience in making games in GameMaker and I want to teach you all of that through this course.\n♦ About the course ♦\nThis course is all about creating a 2D action-adventure game with GameMaker, from the ground up.\nYou'll learn a lot of advanced coding using GameMaker Language. Here are a few examples of what we'll go through:\n• Data structures\n• Auto-tiling and tile collisions\n• Finite state machines\n• NPC movement and textboxes\n• Making houses and going inside them\n• Saving your game and loading it\n• A day-night cycle using blend modes\n• And much more!\nTo check out what the game is like, make sure to watch the video above.\n♦ More about the course ♦\nThis course is beginner-friendly, however it also contains advanced concepts. It is beginner-friendly in the sense that I explain everything I do so that no one feels lost. The advanced concepts allow you to do more in GameMaker. So, you can take this course regardless of your skill level!\nThe style by which I teach is to-the-point without any filler or unnecessary talking. I get things done quickly while explaining stuff comprehensively.\n♦ Support ♦\nOnce you're in the course, you can download the project so that you can import it into GameMaker Studio 2 and have a look at all the code.\nYou can also download all the sprites, scripts and sounds used in the game.\nSo join in, and I'll meet you in the course!",
      "target_audience": [
        "Anyone who wants to learn how to build feature-rich games using GameMaker Studio 2",
        "Anyone who wants to improve their GameMaker Language skills by learning advanced concepts"
      ]
    },
    {
      "title": "Unreal 5 Niagara - Introduction To Niagara",
      "url": "https://www.udemy.com/course/unreal-5-niagara-introduction-to-niagara/",
      "bio": "Your complete course for learning Niagara in Unreal Engine 5",
      "objectives": [
        "Learn the basics of the Niagara Particle system, including industry standard best practices",
        "Understand the role different modules have in controlling Particles, including Vectors and Forces",
        "Learn the differences between the different Renderer Modules and how and when to use them",
        "Learn more complex and advanced topics, such as Particle Collisions and the Particle Attribute Reader"
      ],
      "course_content": {
        "Source Files": [
          "Introduction"
        ],
        "Introduction To Niagara": [
          "Introduction to the Course",
          "Glossary",
          "Data Types",
          "Introduction to the UI",
          "Hanging Particulates 1",
          "Hanging Particulates 2",
          "Hanging Particulates 3",
          "Burst Mesh 1",
          "Burst Mesh 2",
          "User Parameters"
        ],
        "Module Breakdown": [
          "Introduction to Modules",
          "Local Space",
          "Determinism",
          "Interpolated Spawning",
          "CPU vs GPU",
          "Persistent IDs",
          "System Properties",
          "Spawn Rate",
          "Spawn Burst",
          "Spawn Per Unit",
          "Spawn Per Frame, Spawn From Other Emitter",
          "Shape Sphere",
          "Shape Cylinder",
          "Shape Box, Plane",
          "Shape Torus, Disc, Cone",
          "Grid Spawn Location",
          "Jitter Position",
          "System Location",
          "Static Mesh Location",
          "Skeletal Mesh Location",
          "Initial Velocity",
          "Velocity Vortex, Inherit Velocity",
          "Force Introduction",
          "Linear, Gravity, Acceleration Forces",
          "Curl Noise",
          "Wind Force",
          "Aerodynamic Drag",
          "Point Attraction Force",
          "Line Attraction Force",
          "Spring Force",
          "Vortex Force",
          "Vector Noise Force",
          "Sprite Renderer - Sub UV",
          "Sprite Renderer - Cutouts",
          "Sprite Renderer - Alignment",
          "Sprite Renderer - Rotation Rate",
          "Sprite Renderer - Sorting",
          "Mesh Renderer - Setup",
          "Mesh Renderer - Initial Orientation",
          "Mesh Renderer - Update Orientation",
          "Mesh Renderer - Flight Orientation",
          "Mesh Renderer - Rolling Orientation",
          "Ribbon Renderer - Introduction",
          "Ribbon Renderer - Shape",
          "Ribbon Renderer - Spawn Trails",
          "Beam Renderer",
          "Decal Renderer",
          "Light Renderer",
          "Component Renderer",
          "Geo Cache Renderer",
          "Animation",
          "Particle Materials",
          "Auto Materials",
          "Conclusion"
        ],
        "Advanced Concepts": [
          "CPU Collisions",
          "GPU Collisions",
          "Collision Data",
          "Location Events",
          "Death and Collision Events",
          "Location Reader",
          "Scratch Introduction",
          "Death Reader Introduction",
          "Death Scratch Module",
          "Get Has Collided",
          "Transfer Position Bugs",
          "Sampled Age At Collision",
          "Collision Overview",
          "Texture Sampling",
          "Mesh Data Interfaces",
          "Data Interfaces",
          "NPCs"
        ],
        "Worked Examples": [
          "Snow Overview",
          "Snow Spawn",
          "Snow Update",
          "Snow Camera",
          "Snow World Height",
          "NDI - Multiply Many",
          "Mesh Leaves Overview",
          "Mesh Leaves Collisions",
          "Mesh Leaves Emitter",
          "Muzzle Flash Fire",
          "Muzzle Flash Additive",
          "Muzzle Flash Lit Smoke",
          "Muzzle Flash Smoke",
          "Campfire Flames",
          "Campfire Lights and Heat Haze",
          "Paper Burn Setup",
          "Paper Burn Particles"
        ]
      },
      "requirements": [
        "Some basic understanding of the Unreal Engine"
      ],
      "description": "Welcome to my Unreal Engine 5 Niagara Course - Introduction to Niagara, here on Udemy.  This course will take you from the basics of the Niagara UI and introductory template effects, to a good understanding of all the inbuilt Modules available to use, as well as covering more advanced concepts such as Collisions and the Attribute Reader.  Over the course of 12 hours, all broken down into bite size 10-15 min videos, we cover everything from the UI, Modules, Vectors and Forces, Animation, Materials, Collisions, Data Interfaces and much much more.\n\n\nEach chapter contains many examples, full of handy comments, as well as a many corresponding video lectures that explains in full detail what is being done and why - so you're learning both the techniques being used and building up a base of  background knowledge of first principal concepts, allowing you to build up your own effects in future.\n\n\nWith industry standard practices from my 15 year career, including 5 years of teaching Game Art at a Masters Degree level, this course will cover all various uses of Particle effects and Renderers - this course will fully equip you to add some Visual Effects life into your realtime scenes in Unreal Engine 5.",
      "target_audience": [
        "Anyone looking to learn about making use of Particle effects in Realtime and Games projects"
      ]
    },
    {
      "title": "Unreal Engine Cinematic Creator for Video Game Design",
      "url": "https://www.udemy.com/course/unreal-cinematics/",
      "bio": "Use Sequencer to Create Cinematic Cut Scenes & Gameplay Moments for Video Games in Unreal Engine 4.",
      "objectives": [
        "How to use Sequencer in Unreal Engine.",
        "How to create a fully functioning cut scene which is triggered from gameplay",
        "How to create interactive and non-interactive cut scenes",
        "How to animate cameras to create interesting emotions for the player",
        "How to use Sequencer for gameplay - for example opening doors or triggering elevators",
        "How to use Unreal's library of free assets to make a cool looking portfolio piece"
      ],
      "course_content": {
        "The Basics": [
          "Welcome To The Course",
          "Install Unreal Engine",
          "Community & Support",
          "Change Our Player's Hero",
          "UE 5.1 Warning: Importing Incompatible Assets",
          "Build A Simple Reveal",
          "Highlight With Lights",
          "Quick Look At Cameras",
          "Blueprints & Trigger Volumes"
        ],
        "Sequencer & Cameras": [
          "Section Intro - Sequencer & Cameras",
          "Set Our Scene",
          "Sequencer Introduction",
          "Animating Cameras",
          "Auto-Keying Animations",
          "Animation Interpolation Options",
          "Using The Fade Track",
          "Cine Camera Settings",
          "Using Camera Rig Cranes",
          "Using Camera Rig Rails",
          "Render Sequence As A Video"
        ],
        "Triggering Sequences": [
          "Section Intro - Triggering Sequences",
          "Trigger Sequence From Gameplay",
          "Disable Player Control",
          "Trigger Objects To Move",
          "Automatic Doors With Sequencer",
          "Looping Platform With Sequencer",
          "Add SFX With Audio Track",
          "Add Music To Your Level"
        ],
        "Making Cutscenes": [
          "Section Intro - Making Cutscenes",
          "Camera Movement Terminology",
          "Understanding Shot Types",
          "Add Character Animations",
          "Translating Character Animations",
          "Toggle Sequencer Actor Visibility",
          "Storyboarding Your Scene",
          "Block Out Our Sequence",
          "Dialogue Subscenes Track",
          "Add Our Camera Cuts",
          "Triggering & Tidying",
          "Course Wrap Up"
        ],
        "Continuing Your GameDev Journey": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Some familiarity with Unreal Engine and Blueprint is useful but not required"
      ],
      "description": "** From the GameDev-tv team who has taught more than a million awesome students on Udemy **\nMake your own cinematic moments using Unreal Engine 4's Sequencer Tool.\nSequencer (which is included with the Unreal Editor - no additional download necessary) is a powerful editor which allows you to add tracks and animate everything from your cameras to your characters to your world.\nIn this course you will be able to do the following:\nCreate your own non-interactive cut scene which is triggered from gameplay.\nCompose interesting camera shots and animate your cameras as if you were Steven Spielberg's personal camera operator.\nCreate movement and flavor in your levels by animating world events to take place as the player moves through your level (explosions and landslides anyone?).\nCreate simple gameplay systems such as allowing the player to open doors when they run near them.\nCreate animation sequences and render them to movie format so that you can make your own short films if you so desired.\nAnd along the way we'll talk about cinematography theory such as the different types of shots you can create or the various ways to move your camera, including creating camera rails and camera cranes.\nGet plugged into our communities of amazing developers on Facebook (nearly 20k), in our own TA-curated Community (17k views/day), and our student chat group (10k live at any one time).",
      "target_audience": [
        "Beginner Game Developers",
        "Indie Game Developers wanting to make their game more interesting",
        "Artists and Game Designers who want to implement Cinematic moments"
      ]
    },
    {
      "title": "Game Audio 101: How to Create Sounds for Games",
      "url": "https://www.udemy.com/course/gameaudio101/",
      "bio": "Learn game audio, sound design, and sfx creation along with artistic and technical audio skills for beginners.",
      "objectives": [
        "The different uses and affects of audio in games",
        "How to create compelling sounds for a game",
        "Creating audio asset types specific to games",
        "Considerations for mixing a game audioscape",
        "How to make audio feel immersive and \"real\"",
        "Microphone types and recording considerations",
        "How to begin conceptualizing the creation of a sound",
        "Vocabulary to effectively communicate audio ideas and concepts",
        "Part of the Game Audio 101, 201, and 301 Curriculum!"
      ],
      "course_content": {
        "Introduction": [
          "Dead Space Train Room",
          "How To Sound Design Your Life",
          "The Wikisinger",
          "Game Clip Comparison",
          "The Sound of Silence",
          "Pro Tools - Session Folder Structure, Audio Import, Basic Editing"
        ],
        "Audio Physics, Telling Story, More Pro Tools": [
          "What Does Sound Look Like",
          "Volcanic Eruption - Sound as a Wave",
          "Sound Basics for Games",
          "Pro Tools - Bouncing, Fades, Clipping, Master Fader",
          "Telling Story through Sound",
          "1-Minute Audio Story"
        ],
        "Defining Space Through Sound": [
          "Defining Space Through Sound",
          "Why Games Define Space Differently",
          "Pro Tools - Sends, Busses, Auxs, Reverb",
          "Pro Tools - Automation",
          "Reverb, Automation and Routing"
        ],
        "Microphone Basics & Interface Sound": [
          "Mics for Games",
          "Pro Tools - Crossfades, Clip Based Gain",
          "Interface and Menu Sound"
        ],
        "Live Recording & Sound Design Conceptualization": [
          "Production Sound for Games",
          "Live Recording Project",
          "Pro Tools - Video",
          "Sound Design Thought Process",
          "Game Audio Writing Assignment"
        ],
        "Halfway-ish Exam!": [
          "Game Audio 101 Halfway-ish Exam - Multiple choice",
          "Game Audio 101 DAW Practical"
        ],
        "File types, Spotting and Delivery": [
          "Data Storage and File Types",
          "Game Spotting",
          "Delivery Assignment Example",
          "Delivery Project / Crime Spree"
        ],
        "Compression and Creating Seamless Loops": [
          "Compression",
          "Pro Tools - Creating Seamless Loops",
          "Looping Assignment"
        ],
        "EQ and Ear training": [
          "EQ",
          "Pro Tools - EQ",
          "EQ and Ear Training"
        ]
      },
      "requirements": [
        "Access to a DAW - Pro Tools is used in the course examples but all concepts can be applied to other DAWs as well.",
        "Wanting to learn how to make awesome game audio!"
      ],
      "description": "Dive into making sounds for games by examining both the artistic and technological aspects of audio conceptualization and creation. We will cover the basics of sound in the physical and digital realm, uses of sound in games, sound effects editing, scoping/spotting, and sound effects delivery.\nAt a high level, we'll cover\n· The essential ways to use sound in games\n· Audio physics and vocabulary\n· How to define space with sound\n· Microphone types and characteristics\n· Recording/capturing assets\n· Thought process and aesthetics for Sound Design\n· Editing functions and navigation of Pro Tools\n· Creating audio asset types specific to games\nBy looking at these topics, we'll understand sound's creative possibilities and the ways to make games feel immersive and real. We'll also have a healthy dose of best practices for recording your own sounds as well as when using a Digital Audio Workstation to process and manipulate audio.\nThis course is designed for beginner sound designers, composers and game developers.\nCheck out Game Audio 201 & 301 to go from beginner to advanced Game Sound Designer, and learn audio implementation skills using Wwise. With this knowledge and set of tools, you'll have a holistic skillset in game audio that will inform your work and make you that much more marketable!",
      "target_audience": [
        "Audio Enthusiasts",
        "Game Developers",
        "Composers",
        "Beginner Audio Students"
      ]
    },
    {
      "title": "Unreal Engine 5 UI Design: Advance inventory system with UE5",
      "url": "https://www.udemy.com/course/unreal-engine-5-ui-design-advance-inventory-system-with-ue5/",
      "bio": "Design widget blueprint for Inventory sysytem like legend of zelda with all functionality in unreal engine 5",
      "objectives": [
        "Inventory Design",
        "UI Design",
        "Widgets",
        "Blueprint communication",
        "Advance arrays",
        "advance structure",
        "Health bar",
        "Money system",
        "Pick up item",
        "Equipe Item",
        "Tabs System",
        "Action menu",
        "3D model in UI",
        "using Items",
        "Drag and Drop"
      ],
      "course_content": {
        "01.Project setup ( Absolute Beginner )": [
          "01.Course structure",
          "02.Course Files",
          "03.Import the files to unreal engine",
          "04.Material for money"
        ],
        "02.Money ( Intermediate )": [
          "05.Create Blueprint for money",
          "06.Data table and structure",
          "07.Pick money up",
          "08.Add amount to character money",
          "09.Create widget blueprint",
          "10.Enhanced input",
          "11.Show inventory",
          "12.Hide Inventory"
        ],
        "03.Components ( Intermediate )": [
          "13.Create component",
          "14.Transfer variables and nodes to component",
          "15.Events in Components"
        ],
        "04.Money UI ( Intermediate )": [
          "16.Borders and text",
          "17.Money UI",
          "18.Comunicate between component and widget"
        ],
        "05.Health Bar UI ( Pro )": [
          "19.User created widget",
          "20.Heart widget UI",
          "21.Heart widget Coding",
          "22.Max health and health logic",
          "23.empty heart and half heart coding",
          "24.Draw Hearts",
          "25.Increase and Decrease the Health",
          "26.Use Health bar in vieport as well"
        ],
        "06.Guid Ui ( Intermediate )": [
          "27.Create Guid for R Button",
          "28.Alignments",
          "29.Y Button guid",
          "30.A and B Button Guid"
        ],
        "07.Inventory Tab ( Intermediate )": [
          "31.Create tabs button",
          "32.Hovered and Clicked event effects",
          "33.Challenge Done",
          "34.Widget switcher",
          "35.Pre construct",
          "36.Keyboard selection"
        ],
        "08.Pick Item Up ( Pro )": [
          "37.Struct for Items",
          "38.Data tables for Items",
          "39.Enums",
          "40.Item Physics",
          "41.Trace to pickup",
          "42.get picked up Item Data",
          "43.Pick Up guid UI",
          "44.Pick up UI Code"
        ],
        "09.Arrays for UI ( Pro )": [
          "45.Struct of arrays",
          "46.Enhanced input for Pick Up Items",
          "47.Check the Item Type",
          "48.Add to Item that is already in inventory",
          "49.Succes on adding to inventory or not logic",
          "50.Create item inside inventory array",
          "51.Sword array create slot from scratch",
          "52.Increase sword quantity logic",
          "53.Shield array with copy and paste"
        ],
        "10.Slot UI ( Pto )": [
          "54.Create slot border",
          "55.Slot icon and hover effect",
          "56.Quantity UI",
          "57.Box quantity Zero",
          "58.Set values of slot UI",
          "59.Slot hover"
        ]
      },
      "requirements": [
        "Beginner friendly but you need to know about unreal engine at least some basic knowledge",
        "If you need a Inventory system in your game you dont need any requirements"
      ],
      "description": "Hello Everybody, in this course we are going to learn everything that you need to know about creating a advanced dynamic inventory system\nwe will start with very basic stuff like importing files\nthen we start with the money management system for the UI\nafter that we start designing the health bar similar to legends of zelda health bar\nnext we will learn about the Tab system in unreal engine 5\nthen we will learn how to pick items up\nthen we will be creating a dynamic inventory System we learn to work with arrays and structures.\nwe will also learn about components and why we should use them\nwe also learn about how to write code in a modular way so it can be reusable within your game.\nnext we will create item holders and item info widgets so we can hover over a specific item that will give us the information value like power, name, and description.\nThen we will also learn how to add a 3d body to our UI\nAlso we learn how to use and equip items\nat the end we learn about drag and drop and how it works completely\nwe have a very active friendly discord channel that you can join and ask your questions and get help\nwe have a legend there that is always around and willing to help\n\n\nso let us begin, and I hope you really enjoy the course This course is for both Beginners and intermediate users so I have tried my best to accommodate everyone in this course, Thank you.",
      "target_audience": [
        "Game developers"
      ]
    },
    {
      "title": "Learn Unity Games Engine & C# By Creating A VR Space Shooter",
      "url": "https://www.udemy.com/course/unityspaceshooter/",
      "bio": "A beginners guide to Unity focusing on making a virtual reality game for the worlds leading headset. ***UPDATED***",
      "objectives": [
        "Installing Unity Hub and the Unity Game Engine",
        "Navigating the Unity's user interface",
        "Importing and preparing 3D assets",
        "Getting Unity Ready for Virtual Reality a look at some Unity engine settings",
        "Creating A Moon Base - Creative session! use provided assets to personalise your moon base",
        "Lighting an environment using Unity directional lights, spotlights and baking",
        "Setting up the VR Camera - using Unity's XR interaction toolkit",
        "Take a look at the base in VR! - building to the Oculus Quest",
        "Adding your hands - use C# combined with animator blend trees to control your hands.",
        "Picking up your weapon - using Unitys XR interactions",
        "Shooting your gun - an intro to C#",
        "Using Unity's C# events system",
        "Spawning the asteroids - coding in C# to instantiate objects into our scene",
        "Creating a Game Manager, a C# class that looks after everything our game is doing.",
        "C# static variables",
        "C# Enums",
        "C# Interfaces",
        "Keeping track of your score - an intro to user interface in VR using Unitys canvas system",
        "Shooting the Asteroids checking collisions in C# within the unity physics system",
        "Creating a timer using C# to create a timer controlling play duration",
        "How to optimise your game for the Oculus Quest",
        "Bug fixing",
        "Post Processing",
        "Particle System"
      ],
      "course_content": {
        "Course Overview": [
          "Course Overview"
        ],
        "Getting Prepared": [
          "Installing Unity Hub and Unity Engine",
          "First Look At The Unity User Interface",
          "Configuring Unity For XR And Switching To Android Settings",
          "Create XR Camera rig, testing our Build Pipeline, Importing Art Package"
        ],
        "Building The Game Level": [
          "Importing Art Assets!",
          "Importing VR Hands",
          "Creating our VR Scene!!",
          "Setting up our VR Hands!",
          "Creating The Moon Base!",
          "Lighting the Moon Base",
          "Creating Awesome Reflections",
          "Adding The Earth & The Sun!"
        ],
        "Creating the Asteroid Field - Our Games Enemy!": [
          "Setting Up The Asteroids",
          "Spawning The Asteroids",
          "Making Asteroids Move!",
          "Removing The Asteroids"
        ],
        "Freakin Lasers! - Setting Up Our Laser Guns": [
          "Firing The Laser Gun",
          "Raycasting From the Laser Gun",
          "Return To Origin C# Script"
        ],
        "Game Features!": [
          "Creating A Timer",
          "Creating the Game Controller",
          "Creating a Score System Part 1",
          "Creating a Score System Part 2",
          "Rotating and Scaling the Popup using C#"
        ],
        "Game Management! - Structuring The Experience": [
          "Creating The Game Loop!",
          "Creating the Start Menu",
          "Introduction To C# Interfaces",
          "Game Over!",
          "Storing The High Score"
        ],
        "Polishing the Game": [
          "Post Processing",
          "Adding Music",
          "Fading Asteroids In and Out"
        ],
        "Building The Game!": [
          "Building The Game"
        ],
        "BONUS CONTENT!": [
          "Texture Optimisation",
          "Occulusion Culling - Lets Hide What We Can't See!",
          "Light Probes - Optimising our lighting worklflow",
          "Particle Systems - Improving UI Response",
          "UI Instructions",
          "Laser Gun Visuals",
          "Haptic Feedback for the Lasers"
        ]
      },
      "requirements": [
        "To experience the VR you will need a Meta Quest/Rift/Rift S",
        "How to download and install software would be an advantage.",
        "A small understanding of Unity - *But not essential",
        "A basic grasp of maths will help with a little part of the timer coding - *But not essential",
        "A little knowledge of C# would help *but not essential"
      ],
      "description": "***UPDATED***\nThis course is designed to take you from Unity beginner to game developer! I'll show you the process I go through when creating games in unity starting from scratch! from creating a project all the way to a final build.\nUsing the free art assets provided you will construct your moonbase then learn how to pick up objects using your virtual hands, shoot laser guns, destroy asteroids and add user interface elements to enhance the experience!\nWe will create some simple C# scripts that create all the systems behind the game, such as spawning asteroids, managing the player score and controlling the timer. Then to round off the project we add some nice finishing particle effects.\nThis course is going to teach you the following topics:\nWhere to find Unity, and how to install it\nConfiguring Unity for VR\nUsing Unity's XR interaction system\nDealing with art assets and 3D models\nLighting 3D environments\nC# scripts to create custom functionality\nBuilding our application to the Oculus Quest\nUser interface systems\nC# Game manager to control our application\nC# Event system\nC# Interfaces\nC# Enums\nAdding audio to our game\nParticle Systems\nControlling game objects through C#\nPost-processing\nBuilding to our Oculus device\nThis course uses unity 2019.3 and XR interaction toolkit version 0.9.4.\nEverything is designed to be a beginner level so that you can follow along and create your own game with ease. Even intermediate users of Unity will find this useful to learn VR application development",
      "target_audience": [
        "Beginner game developers",
        "3D Artists",
        "Technical Artists",
        "developers looking to get into VR"
      ]
    },
    {
      "title": "How to Make a Retro Style 3D FPS in the Godot Game Engine",
      "url": "https://www.udemy.com/course/how-to-make-a-retro-style-3d-fps-in-the-godot-game-engine/",
      "bio": "Learn how to make an old school fast-paced first person shooter in the Godot game engine",
      "objectives": [
        "How to implement a fast paced old school first person character controller in Godot",
        "How to fully implement a machine gun, shotgun, sword, and rocket launcher in Godot",
        "How to implement basic artificial intelligence in Godot",
        "How to use pathfinding in Godot",
        "How to implement basic GUI in Godot",
        "How to use particle effects in Godot"
      ],
      "course_content": {
        "Making An FPS In Godot 4": [
          "Making The Environment",
          "Player Movement",
          "Player Health",
          "Weapon Manager",
          "Importing Weapon Models",
          "Weapon Animations",
          "Bullet Hit Effects",
          "Hit Scan Bullets",
          "Weapon Script",
          "Muzzle Flashes",
          "Making The Shotgun",
          "Making The Machete",
          "Making the Rocket Launcher",
          "Adding Crosshairs",
          "Animating the Weapon Manager",
          "Importing Monster Meshes and Setting Up Materials",
          "Setting Up Enemy Hitboxes",
          "Setting Up Enemy States and Dying",
          "Enemy Vision and Hearing",
          "Enemy Movement and Facing",
          "Enemy Melee Attacks",
          "Ranged Enemy and Fireball Projectile",
          "Blood Effects",
          "Gibbing",
          "Making Health, Weapon, Ammo Pickups",
          "Player Death Screen",
          "Player Stats Display",
          "Player Health Effects",
          "Pickup History Display",
          "Adding Sound Effects To Everything",
          "Exporting Your Project"
        ],
        "Creating the Environment (Godot 3)": [
          "Setting Up the Scene",
          "Setting Up the Navmeshes",
          "Setting Up Lighting and Skybox"
        ],
        "Creating the Player Character (Godot 3)": [
          "Player Movement and Mouse Aim",
          "Player Health",
          "Weapon Manager"
        ],
        "Making the Weapons (Godot 3)": [
          "Importing the Models",
          "Making the Weapon Animations",
          "Making the Bullet Hit Effect",
          "Making Hitscan bullets",
          "Making the Weapon Script",
          "Making Muzzle Flashes",
          "Making the Shotgun",
          "Making the Machete",
          "Making Explosions",
          "Making Rockets",
          "Making the Rocket Launcher",
          "Adding Crosshairs",
          "Animating the Weapon Manager"
        ],
        "Creating the Enemies (Godot 3)": [
          "Importing Meshes and Setting Up Materials",
          "Setting Up Hitboxes",
          "Setting Up State Machine and Enemy Health",
          "Setting Up Enemy Senses",
          "Setting up Enemy Movement",
          "Setting up Enemy Melee Attacks",
          "Making a Fireball Projectile",
          "Making the Range Enemy",
          "Making Blood Sprays",
          "Making Gibs"
        ],
        "Creating Weapon, Ammo, and Health Pickups (Godot 3)": [
          "Making the Pickups",
          "Making the Pickup Manager"
        ],
        "Making the Player UI (Godot 3)": [
          "Restart Message",
          "Health and Ammo DIsplay",
          "Health Effects",
          "Pickup Info"
        ],
        "Final (Godot 3)": [
          "How to Use Sound Effects",
          "How to Export Your Game"
        ]
      },
      "requirements": [
        "Some familiarity with programming"
      ],
      "description": "In this course you'll learn how to make an old school fast paced 3D FPS in the Godot Game Engine.\nI'll cover how to set up an environment and lighting, make player movement, create four guns: a machete, shotgun, machine gun, and rocket launcher, make two enemies, one melee and one range, with pathfinding and basic ai, create particle effects for explosions and smoke trails, create animations for weapons, create ammo, health, and weapon pickups, and set up a basic hud for the player.\n\n\nUdemy's requirements for course descriptions have changed since I originally posted this course and now require a minimum of 200 words, which is stupid, so here's some filler: I need 88 more words at this point so I'm just going to type random words from the alphabet in. Or I suppose I could use a chatbot, but I'd rather have that human touch. This really is a stupid requirement, I said all I needed to say in only 110 words, which is much clearer than using 200, but because of some arbitrary rule, I'm now required to add this extra section that literally no one will read. Fantastic. Seven more, I guess it could be worse.",
      "target_audience": [
        "Beginner Game Developers"
      ]
    },
    {
      "title": "Unreal Engine 5 C++ Multiplayer CRASH COURSE",
      "url": "https://www.udemy.com/course/ue5-multiplayer-crash-course/",
      "bio": "Quickly learn the fundamentals of Unreal Engine's Multiplayer Framework!",
      "objectives": [
        "Learn how multiplayer works in Unreal Engine 5",
        "Learn how the different core classes work in the engine such as the Game Mode, Game State, Player State, Player Controller, Character, and more",
        "Learn how to replicate variables, send remote functions, replicate movement, and travel to different levels in multiplayer",
        "Learn attachment, component replication, replication conditions, and custom replication",
        "Learn the pitfalls of multiplayer and how to avoid them"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Multiplayer Fundamentals": [
          "The Client-Server Model",
          "Testing Multiplayer",
          "LAN Connection",
          "Listen Servers Via Steam",
          "Section 2 - Multiplayer Fundamentals"
        ],
        "Actor Replication": [
          "Actor Replication",
          "Authority and Net Role",
          "Attachment",
          "Variable Replication",
          "Rep Notifies",
          "Replication Conditions",
          "Custom Rep Conditions",
          "Ownership",
          "Actor Components",
          "Section 3 - Actor Replication"
        ],
        "Remote Functions": [
          "Run on Client",
          "Run on Server",
          "Multicast",
          "RPC Validation",
          "Relevancy and Priority",
          "Section 4 - Remote Functions"
        ],
        "Class Framework": [
          "The Game Mode",
          "The Game State",
          "The Player State",
          "The Player Controller",
          "Pawn and Character",
          "HUD and Widgets",
          "Static Accessor Functions",
          "Section 5 - Class Framework"
        ],
        "Travel in Multiplayer": [
          "Travel",
          "Implementing Seamless Travel",
          "Section 6 - Travel in Multiplayer",
          "Congratulations! Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic understanding of Unreal Engine and C++ is required"
      ],
      "description": "It's time to learn Multiplayer Gameplay Programming in Unreal Engine!\nIn this CRASH COURSE, you will quickly learn the fundamentals of Unreal Engine Multiplayer. You will gain the skills to program multiplayer gameplay in any game genre!\nMany students struggle with multiplayer. Trust me, I've been there! In my 10+ years of experience of Unreal Engine gameplay programming, I've learned many lessons the hard way. I've found that multiplayer gameplay programming can be easy, as long as you understand the core principles behind multiplayer theory and how Unreal Engine's framework is built around multiplayer at its core.\nTo program your games for multiplayer, you don't have to be an expert. You simply need to learn the basic concepts behind what makes multiplayer games work. This course is a condensed summary of the core principles you must understand to program multiplayer games.\nAfter completing this course, you will understand the fundamentals of multiplayer theory, how Unreal Engine implements multiplayer, and how upgrade your single player games to multiplayer, and how to structure your games for multiplayer from the start of your project's creation!\nThis course dives deep into multiplayer theories, and you will be presented with a challenge to test your understanding of each topic so that you can get hands-on experience implementing each technique. After trying out each challenge on your own, you will then watch me solve each challenge and provide you with the steps to complete the problem. Each topic is summarized in a concise recap, and each section ends with a quiz to test your understanding so that you can continue onto the next topic with confidence.\nThis course is structured into the following sections:\nMULTIPLAYER FUNDAMENTALS\nWe will introduce the core multiplayer terms and concepts, including:\nThe Client-Server Model - how it differs from Peer-to-Peer connections, and how Unreal Engine uses this model\nTesting Multiplayer - How you can easily simulate standalone, listen server, and dedicated server games in the engine's Play-In-Editor (PIE)\nLAN Connection - You will create a LAN game, connecting with other computers in your own local network\nListen Servers Via Steam - I provide you with a plugin that allows you to quickly connect to other players via the Steam Online Subsystem\nACTOR REPLICATION\nActors are the heart of Unreal Engine levels. Actors possess the capability to replicate.\nActor Replication - You will see how easy it is to enable replication for Actors, how this allows for the replication of variables, and how to replicate movement to sync the server and client versions of each Actor\nAuthority and Net Role - Once you understand these simple yet crucial concepts, you will understand how to determine which machine a given Actor is on, affording you the power to make important gameplay decisions for your logic\nAttachment - All games involve some form of attachment. You must learn how attachment works in multiplayer for Actors (or doesn't work, if you don't know what you're doing)\nVariable Replication - The crux of multiplayer programming. Replicated variables are the workhorse of all multiplayer games and you will see just how easy it is to make them (and thus how responsible you have to be)\nRep Notifies - Sometimes, you just want to trigger a response of a variable's replication. Rep Notifies are functions designed to trigger in response to variable replication, and even access the pre-replicated value.\nReplication Conditions - Variables replicate when they change. You have the power to decide whether that happens and when, and to which machines, under what circumstances. You learn how in this lecture.\nCustom Rep Conditions - Your games may grow complex. You may find that you need a variable to only replicate sometimes, based on a custom condition you concoct. You will learn how.\nOwnership - You cannot program in multiplayer effectively unless you understand what Ownership means in Unreal Engine. This includes owning connection: which machine is in charge of the object in question. This will be demystified for you in this lecture.\nActor Components - Components can replicate too, but you need to understand how that happens, and how their owning net connection is tied to their owning Actor.\nREMOTE FUNCTIONS\nOne of the most powerful tools in Unreal Engine's multiplayer framework, remote functions do what replicated variables cannot.\nRun on Client - When you need to call a function on the server and have it execute on the owning client, Client RPCs are your go-to.\nRun on Server - While replication only works from server-to-client, Server RPCs are how you get information from client to server.\nMulticast - With great power comes great responsibility. To call a function on the server and have it run on all clients, Multicast RPCs are the tool to use.\nRPC Validation - Multiplayer programmers will quickly learn that they can't trust clients not to cheat (or at least try). Validation functions allow you to make sure the data looks good, or kick the player otherwise\nRelevancy and Priority - Net updates aren't just always happening - sometimes, Actors aren't relevant to other Actors. In addition, some Actors must replicate more often than others. This lecture shows you how relevancy and priority works.\nCLASS FRAMEWORK\nUnderstanding which class is designed for which task can greatly simplify your project's overall structure. You must understand what each core engine class is used for to program your games for multiplayer effectively.\nThe Game Mode - Avoid noob mistakes like trying to access the Game Mode on clients. Learn how the Game Mode dictates the rules of the game and the default classes that are spawned\nThe Game State - Information about the game, which needs to replicate to clients, is stored on this class.\nThe Player State - Where should you store your players' scores? Their teams? Player-specific data rests on this very important class\nThe Player Controller - Representing you as a player, the Player Controller owns your net connection and your Pawn or Character traces its ownership back to this class\nPawn and Character - Every player needs a visible Avatar. How do they work in multiplayer? This lecture has you covered\nHUD and Widgets - How are these visual elements handled in multiplayer? Can you replicate them? (spoiler: you can't!)\nStatic Accessor Functions - Why do we always call these functions, passing in a 0 for the player index when we don't really know what to pass in? Beware of the pitfalls when using these static accessor functions, and the alternatives you can use instead when unsure\nTRAVEL IN MULTIPLAYER\nAt some point, your game needs to change levels. All connected players in a multiplayer game must be moved to another level. How does this work? You will learn how.\nTravel - We discuss the different travel types and how to implement them.\nImplementing Seamless Travel - The final challenge to this course, you will implement seamless travel, migrating each client in the game to another map without disconnecting them.\nBy the end of this course, you will fully understand the fundamentals of the Unreal Engine multiplayer framework. You will be able to program your games for multiplayer, no matter the genre. This course will serve you as a reference manual you can refer back to, skipping to lectures specific to each topic for a refresher.\nI recommend that all of my students take this course before taking any of my more advanced multiplayer courses!\nThis course assumes you already understand the basics of Unreal Engine C++. If you have made at least one Unreal Engine C++ project, or you have completed my Unreal Engine 5 C++ - The Ultimate Game Developer Course, you're ready.\nReady to finally understand how multiplayer works in Unreal Engine? It's not difficult! You just have to understand the fundamentals.\nI'll see you soon,\nStephen",
      "target_audience": [
        "Those who wish to learn Unreal Engine multiplayer",
        "Those who wish to upgrade their single-player projects for multiplayer",
        "Those who wish to tackle advanced Unreal Engine multiplayer concepts like GAS"
      ]
    },
    {
      "title": "Learn Godot by Creating an Idle Business Tycoon Game",
      "url": "https://www.udemy.com/course/godot-gdscript-learn-game-development-idle-business-tycoon-python/",
      "bio": "Prototype a Fun Idle Business Tycoon game like ADventure Captialist - GDScript Videos with GDScript & C# SOURCE CODE",
      "objectives": [
        "How to build games using the fast, powerful and free open source GoDot Game Engine",
        "Core Game Design and Coding Skills to Make an Idle Tycoon Game",
        "Use GDScript, a Language Very Close to Python, to Build Fun Games Fast and Easy",
        "How to use Signals and Design Patterns to Create Well Designed Game Architecture",
        "Learn to Prototype your Game then Re-factor your code to make it more readable and extendable",
        "Learn Game Design and Development Skills you can use with Unity, Unreal, or any Game Engine"
      ],
      "course_content": {
        "Learn GoDot by Creating an Awesome Idle Business Tycoon Game": [
          "Creating the Project and Setting Up the Scene",
          "Learn to Set Variables and Update Labels Using GDScript",
          "Create a Button and Connect a Signal to Call a Method in the Panel Node",
          "Create a Buy Button and Variable for Buying and Maintaining Store Count",
          "Use Conditional Statements to Prevent Buying a Store Without Funds",
          "Improve the Store Interface and Add a Picture and Progress Bar",
          "Create A Popup Dialog Box to Warn the Player About Lack of Funds",
          "Create Timer Nodes for Our Store Timer and Progress Bar",
          "Expanding our Business Idle Game with Multiple Store Types",
          "Refactor our Store and Main Scenes to handle Multiple Stores",
          "Implement a Manager Function to Automate our Idle Stores",
          "QUICK LECTURE - Improve our Game Design Using Custom SIgnals",
          "LONG LECTURE - Improve our Game Design Using Custom SIgnals",
          "Using Signals to Communicate Between Objects Using Callbacks",
          "Use Signals to Re-factor the Unlock Manager Process",
          "Setting up a Modular Popup Dialog Box"
        ],
        "Intermediate GoDot - Improving our game design and adding new functionality": [
          "Learn to Load our Game Data from a CSV File",
          "Dynamically Create Scenes at Runtime to Instance the Stores",
          "Learn How to Dynamically Load Pictures into our Store"
        ]
      },
      "requirements": [
        "Basic Computer Knowledge",
        "Some Programming Experience is recommended",
        "Have Godot 3 Installed and Have the Skills to Create a New Project",
        "A Desire to Make Fun Idle Business Tycoon Games"
      ],
      "description": "### UPDATE 11/27/2021: NEW C# VERSION WITH SOURCE CODE!\nI'm excited to announce a complete new version of Godot Idle Business Tycoon coming within just a few days that uses C# instead of GDScript along with all new lectures walking through all of the code and steps!\nNow make the game in C#, GDScript or BOTH!\nThe C# source is located in the first lecture.  New videos walking through the code coming soon.\n### UPDATE 06/12/2019: I have added three more lectures to the course. These lectures demonstrate how to load our game data out of a CSV file and create our stores dynamically through code (GDScript).\n### UPDATE 01/02/2019: I have added four more lecture to the course. These are critical lectures for game design and game architecture. You will learn how to make custom signals that decouple your classes and make the game more extendable and easier to manage as it grows in complexity.\n### UPDATE 12/27/2018:  I have  added two more lectures that make the prototype more complete by adding the ability to have multiple store types.\nThe Fast & Fun way to Learn Godot!\nThis course is designed to be fun, fast,  and get up and running with Godot right away. You will make a prototype of an Idle Business Tycoon Game much like ADVenture Capitalist. If you are new to Godot you will be amazed how fast you will get your game up and running.\nWe begin by teaching you how to set your scene, create nodes, manage variables and connect up signals. Create timers, a progress bar, and popup dialog boxes to send warnings to the players.\nEven if you are brand new to programming or new to Godot you can follow along because we start at the very beginning and walk you through each stage of building the game step-by-step.\nLearn Important Game Design and Game Architecture\nBy the end of the course you will be comfortable building games in Godot and be ready to start tackling your own game ideas!",
      "target_audience": [
        "Students who want to Start Building Games Fast",
        "Game Developers who wish to Learn the GoDot Game Engine",
        "Python Developers who are looking for a Powerful Game Engine to Leverage Their Skills",
        "Designers and Developers who would like to Learn Critical Prototyping and Design Skills"
      ]
    },
    {
      "title": "Learn how to create a 2D RPG game with Unity",
      "url": "https://www.udemy.com/course/learn-how-to-create-a-2d-rpg-game-with-unity/",
      "bio": "Learn video game development by creating a 2D RPG with multiple systems in Unity",
      "objectives": [
        "Master the use of Scriptable Objects",
        "Learn C#, a modern versatile programming language.",
        "Learn clean code and how to design scalable systems",
        "Gain an excellent general knowledge of video game programming.",
        "Learn how object oriented programming works in practice.",
        "Beginner to Intermediate C# fundamentals."
      ],
      "course_content": {
        "Introduction": [
          "Promotional Video",
          "Join Our Discord Community!",
          "Project Sprites"
        ],
        "Create Player": [
          "Introduction",
          "Create Project",
          "Player Movement",
          "Add Walk Animations",
          "Add Idle Animations",
          "Player Health",
          "Dead Animation",
          "Player Mana",
          "Revive Player",
          "Player EXP",
          "Player UI",
          "Load Player UI",
          "Section 2 Project"
        ],
        "Build World": [
          "Introduction",
          "Setup Sprites",
          "Challenge: Create Props",
          "Create Main Village",
          "Create Mob Spawn Area",
          "Create NPC Area",
          "Section 3 Project"
        ],
        "Enemies": [
          "Introduction",
          "Add Enemies",
          "Create FSM System",
          "Wander State",
          "Waypoint Editor",
          "Patrol State",
          "Detect Player",
          "Chase Player",
          "Attack State",
          "Add Cinemachine",
          "Section 4 Project"
        ],
        "Combat System": [
          "Introduction",
          "Damage Player",
          "Create Damage Text",
          "Select Enemy",
          "Attack Animations",
          "Create Projectiles",
          "Create Weapons",
          "Fire Projectiles",
          "Damage Enemy",
          "Use Melee Weapon",
          "Apply Critical Damage",
          "Section 5 Project"
        ],
        "Leveling": [
          "Introduction",
          "Create Stats Panel",
          "Load Player Stats",
          "Gain Experience",
          "Add Attributes",
          "Upgrade Player",
          "Section 6 Project"
        ],
        "Items": [
          "Introduction",
          "Item Scriptable Object",
          "Item Weapon",
          "Item Health Potion",
          "Item Mana Potion",
          "Singleton Pattern",
          "Item Extra",
          "Challenge: Complete Items",
          "Section 7 Project"
        ],
        "Inventory": [
          "Introduction",
          "Create Inventory UI",
          "Show Inventory Item",
          "Stack Items",
          "Use Item",
          "Fix Call Order",
          "Remove Item",
          "Equip Item",
          "Show Item Description",
          "Section 8 Project"
        ],
        "Save Inventory": [
          "Introduction",
          "Save Inventory",
          "Load Inventory",
          "Section 9 Project"
        ],
        "Looting": [
          "Introduction",
          "Create Loot Panel",
          "Create Loot Items",
          "Collect Items",
          "Section 10 Project"
        ]
      },
      "requirements": [
        "PC or Mac capable of running Unity 2021 or later.",
        "Good foundation with the C# language.",
        "Understand the Unity workflow."
      ],
      "description": "*** Please make sure you meet the requirements for the course ***\nAre you ready to dive into the captivating universe of role-playing games and learn how to craft your interactive world from scratch? This course is your gateway to creating epic and immersive experiences using Unity and its powerful Scriptable Objects system.\nThroughout this comprehensive course, I'll guide you through every crucial step to develop a complete and functional RPG game. From crafting panels, designing player characters, creating enemies, implementing systems like stats, AI, combat mechanics, levelling up, handling items and inventory management, saving and loading inventories, looting mechanics, engaging dialogues, quests, and even setting up a full operational shop.\nOur unique approach focuses on making the complex game development process accessible to all skill levels. From beginners to more experienced developers, this course is designed so that anyone interested in game development can dive in and learn effectively. The clarity of instructions and the logical structure of the course ensure that you can easily understand and apply the presented concepts.\nBelow, we present a brief introduction to the main topics that we will address throughout the course:\nState-based AI System (FSM)\nMaster Scriptable Objects\nDesign an Inventory System\nCreate Dialogues\nCreate Enemies\nCreate Items\nCreate Loot\nCreate a cool Shop\nCreate Quests\nAdd Combat\nUpgrade your Player\nDesign UI\nUse Tilemaps\nGood Programming Practices\nBy the end of this course, you will gain a deep understanding of Unity's fundamental principles and learn how to implement them effectively.\nWhether you're a novice or an experienced game developer, this course will equip you with valuable insights and practical skills that will empower you to create your own captivating game experiences. Get ready to embark on a game development journey and unlock your potential in the world of Unity!",
      "target_audience": [
        "Anyone who wishes how to learn how to create their own RPG game using Unity.",
        "Anyone who wants to make their own 2D games.",
        "People who want to create and publish their own games.",
        "Beginners with an interest in learning game development.",
        "Aspiring indie game developers looking to enhance their game development skills"
      ]
    },
    {
      "title": "Unreal Engine 5 - Gameplay Ability System - Top Down RPG",
      "url": "https://www.udemy.com/course/unreal-engine-5-gas-top-down-rpg/",
      "bio": "Create a multiplayer RPG with Unreal Engine's Gameplay Ability System (GAS)!",
      "objectives": [
        "Unreal Engine's Gameplay Ability System",
        "Multiplayer Gameplay Mechanics",
        "Creation of a full RPG with Combat, Experience and Level Ups, Enemies, Spells, Menus, Game Saving, and much more",
        "SOLID coding principles and AAA quality code architecture",
        "How to determine which code goes in Blueprints and which code goes in C++ for optimal performance in a shipped game",
        "Scalable, modular, maintainable, and expandable code that can serve as the foundation for any serious game",
        "All core features of the Gameplay Ability System",
        "Code debugging tools and practices"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Project Creation": [
          "Jetbrains Rider - Now Free for Non-Commercial Use!",
          "Project Creation",
          "Setting up Version Control (Optional)",
          "The Base Character Class",
          "Player and Enemy Characters",
          "Character Blueprint Setup",
          "Animation Blueprints",
          "Enhanced Input",
          "Aura Player Controller",
          "Movement Input",
          "Game Mode",
          "Enemy Interface",
          "Highlight Enemies",
          "Post Process Highlight",
          "Section 2 Quiz"
        ],
        "Intro to the Gameplay Ability System": [
          "The Gameplay Ability System",
          "The Main Parts of GAS",
          "The Player State",
          "Ability System Component and Attribute Set",
          "GAS in Multiplayer",
          "Constructing the ASC and AS",
          "Replication Mode",
          "Init Ability Actor Info",
          "Section 3 Quiz"
        ],
        "Attributes": [
          "Attributes",
          "Health and Mana",
          "Attribute Accessors",
          "Effect Actor",
          "Section 4 Quiz"
        ],
        "RPG Game UI": [
          "Game UI Architecture",
          "Aura User Widget and Widget Controller",
          "Globe Progress Bar",
          "Health Globe",
          "Aura HUD",
          "Overlay Widget Controller",
          "Broadcasting Initial Values",
          "Listening for Attribute Changes",
          "Callbacks for Mana Changes",
          "Section 5 Quiz"
        ],
        "Gameplay Effects": [
          "Gameplay Effects",
          "Effect Actor Improved",
          "Instant Gameplay Effects",
          "Duration Gameplay Effects",
          "Periodic Gameplay Effects",
          "Effect Stacking",
          "Infinite Gameplay Effects",
          "Instant and Duration Application Policy",
          "Infinite Effect Application and Removal",
          "PreAttributeChange",
          "PostGameplayEffectExecute",
          "Curve Tables for Scalable Floats",
          "Section 6 Quiz"
        ],
        "Gameplay Tags": [
          "Gameplay Tags",
          "Creating Gameplay Tags in the Editor",
          "Creating Gameplay Tags from Data Tables",
          "Adding Gameplay Tags to Gameplay Effects",
          "Apply Gameplay Tags with Effects",
          "Gameplay Effect Delegates",
          "Get All Asset Tags",
          "Broadcasting Effect Asset Tags",
          "UI Widget Data Table",
          "Retrieving Rows from Data Tables",
          "Broadcasting Data Table Rows",
          "Message Widget",
          "Animating the Message Widget",
          "Replacing Callbacks with Lambdas",
          "Ghost Globe",
          "Properly Clamping Attributes",
          "Section 7 Quiz"
        ],
        "RPG Attributes": [
          "Initialize Attributes from a Data Table",
          "Initialize Attributes with Gameplay Effects",
          "Attribute Based Modifiers",
          "Modifier Order of Operations",
          "Modifier Coefficients",
          "Secondary Attributes",
          "Derived Attributes",
          "Custom Calculations",
          "Player Level and Combat Interface",
          "Modifier Magnitude Calculations",
          "Initializing Vital Attributes",
          "Section 8 Quiz"
        ],
        "Attribute Menu": [
          "Attribute Menu - Game Plan",
          "Attribute Menu - Framed Value",
          "Attribute Menu - Text Value Row",
          "Attribute Menu - Text Value Button Row",
          "Attribute Menu - Construction",
          "Button Widget",
          "Wide Button Widget",
          "Opening the Attribute Menu",
          "Closing the Attribute Menu",
          "Plan for Displaying Attribute Data",
          "Gameplay Tags Singleton",
          "Aura Asset Manager",
          "Native Gameplay Tags",
          "Attribute Info Data Asset",
          "Attribute Menu Widget Controller",
          "Aura Ability System Blueprint Library",
          "Constructing the Attribute Menu Widget Controller",
          "Attribute Info Delegate",
          "Widget Attribute Tags",
          "Mapping Tags to Attributes",
          "Responding to Attribute Changes",
          "Section 9 Quiz"
        ],
        "Gameplay Abilities": [
          "Gameplay Abilities",
          "Granting Abilities",
          "Settings on Gameplay Abilities",
          "Input Config Data Asset",
          "Aura Input Component",
          "Callbacks for Ability Input",
          "Activating Abilities",
          "Click To Move",
          "Setting Up Click to Move",
          "Setting Up Auto Running",
          "Implementing Auto Running",
          "Code Clean Up",
          "Aura Projectile",
          "Aura Projectile Spell",
          "Spawning Projectiles",
          "Section 10 Quiz"
        ]
      },
      "requirements": [
        "Knowledge of the C++ Programming Language",
        "Fundamentals of Unreal Engine C++ - have at least created one Unreal Engine C++ project"
      ],
      "description": "This is the most comprehensive Unreal Engine course available. If you want to learn how to architect a fully-functional RPG game, this course will give you the ability to do so with an expandable code base, architected with AAA quality code. If you've ever wondered where to draw the line between C++ and Blueprints, this is the course for you. If you've ever wanted to create an RPG complete with a stats system, abilities, leveling up, spells, attributes, menus, all while keeping your code base clean and following best practices, this is the course for you. If you want to step up your Unreal Engine development capabilities and better understand the inner workings of the engine, this course is for you. If you have plans to make your own serious game with interconnecting systems, involving attributes, abilities, level ups, enemies and AI, and coded for multiplayer, this is the course for you!\nIn this course, we will create a top-down RPG style game, filled with systems architected using Unreal Engine's built-in Gameplay Ability System (GAS). This is where you will learn how to architect a shipped game, and code it expertly so it can be easily expanded, upgraded, and maintained. We follow SOLID coding principles, and balance the Blueprint/C++ ratio in a way that AAA shipped games do, such as Fortnite. My experience with AAA shipped game code, as well as consultations with industry veteran developers has allowed me to reveal to you the way a real shipped game's code base looks like. If you've ever wondered how much of a game can be kept in Blueprint versus C++, look no further. This course is the answer.\nNOTE: This course involves programming in C++, which involves the use of an Integrated Development Environment (IDE) such as Visual Studio, Rider, or VSCode. The IDE used in this course by me will be Rider, but this IDE is not a requirement for students to follow the course. You can use any IDE of your choice.\nThe assets in this game project were made specifically for this course, and will be provided in an asset pack. This includes:\nCharacters, including Aura, the main character, as well as enemy characters including Goblin Warriors, Goblin Rangers, a Goblin Shaman, Red and Black Demons, the Ghoul, and a Shroom.\nA modular dungeon pack that can be pieced together to make basic dungeons\nA waypoint shrine and obelisks\nParticle Niagara System Effects, including explosions, level up effects, slingshot rocks, hit impacts, electricity beams, fireballs, fire bolts, flames, stars for stun effects, and more!\nSound effects for enemies, footsteps, spells, and more!\nTextures for the HUD, including high-quality buttons, frames, dynamically-animated spell globes, progress bars, XP bar, and more!\nFull animation sets for Aura and all enemies\nMuch more!\nIn this course, we will be covering the following topics:\nSetting up a Top-Down Project from scratch\nEnemy and item selection with outline effects\nProper use of OOP and inheritance to create a character class hierarchy\nIntro to the Gameplay Ability System and the core classes that comprise it\nCustom Gameplay Ability System Components and Attribute Sets, and how to replicate Attributes\nAll important settings for all GAS classes and components\nHow to use Attributes for player stats, including Primary Attributes:\nStrength (increases physical damage)\nIntelligence (increases magical damage)\nResilience (increases Armor and Armor Penetration)\nVigor (increases Max Health)\nSecondary Attributes, based off of primary attributes and other custom variables:\nArmor (reduces damage taken, improves Block Chance)\nArmor Penetration (ignores percentage of enemy Armor, increases Critical Hit Chance)\nBlock Chance (change to cut incoming damage in half)\nCritical Hit Chance (chance to double damage plus critical hit bonus)\nCritical Hit Damage (bonus damage added when a critical hit is scored)\nCritical Hit Resistance (reduces critical hit chance of attacking enemies)\nHealth Regeneration (amount of Health restored every 1 second)\nMana Regeneration (amount of Mana restored every 1 second)\nMax Health (maximum amount of Health obtainable)\nMax Mana (maximum amount of Mana obtainable)\nVital Attributes - things like Health and Mana, which are dependent on all the other attributes\nGameplay Effects - classes in the GAS system used to apply changes to attributes\nGameplay Tags - an essential part of GAS, which allows us to identify qualities, attributes, abilities, character classes, and any other thing we can imagine\nGame UI - how to handle complex UI in an RPG game efficiently, in an organized, modular, and scalable manner. We cover different UI paradigms, from MVC (Model View Controller) and MVVM (Model View ViewModel, using Unreal Engine's new ViewModel feature)\nFull Attribute and Spell Menus, with upgrade abilities, spell trees, locked spell levels, spell upgrades by ability level, and more\nAttributes - how to use Gameplay Attributes to represent player stats, and incorporate them into the gameplay mechanics by creating an Effect Application pipeline, allowing for calculations and results caused by phenomena in the game, such as combat damage\nGameplay Abilities - the heart of GAS. We create all manner of types of gameplay abilities to handle the casting of spells, handling important capabilities of the player character and enemy AI, and how to configure different abilities to suit your needs.\nDifferent RPG Classes - we implement different character RPG classes including the Ranger, Warrior, and Elementalist, and do so in an easily-scalable manner so you can have any number of character class types in your game\nDamage and Combat - we implement a full RPG style combat system with different damage types, damage resistances, and debuffs corresponding to damage types, and encode these calculations into our damage pipeline. All attributes, damage types, resistances and debuffs are functional in this game.\nAll combat mechanics are displayed in some form of visual feedback to the player. This includes floating text for damage, changing color based on custom criteria, floating text to inform of critical hits, blocked hits, and critical blocked hits. We also implement knockback and stun mechanics in response to lightning damage, incapacitating the character/enemy, as well as fire debuffs, where characters are set ablaze and take fire damage while burning.\nEnemy AI - We implement the enemy behavior using Unreal Engine Behavior Trees and the Environment Query system (EQS) to provide customized behavior for the Ranged, Warrior, and Elementalist enemy types.\nEnemies can cast spells and summon AI minions\nFading geometry when it gets in the way of the camera for a top-down game\nAbility Cost and Cooldown (spells spend Attribute resources - in this game, spells cost Mana)\nFully functional HUD with Equipped Spells, displaying spell cooldown timers, and experience (XP)\nThe ability to assign Abilities to different inputs in the spell menu (assign FireBolt to the 1 key and Electrocute to the Left Mouse Button, swap them back, etc.)\nExperience and Level-Up System - We craft an experience system, awarding XP for eliminating enemies, and leveling up when reaching XP thresholds for various abilities. XP and Level are displayed in the HUD, and Level Up messages and effects are as well. Leveling up is associated with gaining Attribute Points and Spell Points, which can be used to upgrade Attributes and Spell abilities in the Attribute and Spell Menus respectively, as well as topping off Health and Mana upon Leveling Up. (Basically, you will see enough examples of how to use this system that you'll be able to expand it with any functionality you want for your own games)\nPassive Spells - Spells that you can equip which remain active while they are equipped.\nA variety of Offensive Spells, showcasing different examples and features of GAS, including FireBolt, Electrocute, Arcane Shards, and FireBlast.\nSaving Progress and Level Transitions\nIntermediate/Advanced Unreal Engine topics, including custom Async Tasks, Ability Tasks, Blueprint Function Libraries, Asset Managers, Singletons (and why these are only good for a VERY select few cases), custom Gameplay Effect Contexts, Net Serialization, Struct Ops Type Traits, C++ Lambdas, game mechanics algorithms, and oh, so much more.\nHow to choose which functionality should go into C++ versus Blueprint - This is one of the most valuable lessons, and is taught all throughout the course. Students often ask me \"which functionality should go in C++ versus in Blueprint?\" This course is my answer. This is a serious-scale project foundation with over 100 hours of video, and no filler. The project is architected with approximately 50% Blueprints and 50% C++. I show you which functionality should be on the C++ side, which functionality is more appropriate for Blueprints, and why.\nSOLID Coding Principles and code architecture - We keep our code base clean in this project. Another question I often get is \"Is this best coding practice?\" This course is my answer to this question. This is an example of code you would see in a AAA game, shipped to millions of players. Maintaining clean and modular code is essential to a serious game project that needs to be scalable, expandable, modular, maintainable, testable, performant, and efficient. This course will show you how.\nThis is not a beginner course. I expect you to already understand the C++ programming language and have at least created one Unreal Engine C++ project.\nThis course is my best course yet, and I'm very proud to bring you the Unreal Engine 5 - Gameplay Ability System - Top Down RPG course, the result of nearly a year of painstaking development, research, consultation with professionals, and asset creation. After taking this course, you will understand Unreal Engine far better than the average developer, and you'll be empowered to create your own well-architected projects, large and small, and you'll bring value to your team, your company, your solo venture, and anyone/anything else you grace with your skillset.\nJoin the course, and invest in the biggest leap of your game development career.\nStephen Ulibarri, founder of the Druid Mechanics Game Developer Community\n\nThis course project is created in Unreal Engine version 5.2. Updates are periodically added to ensure compatibility with newer engine versions.",
      "target_audience": [
        "Those who wish to know how to architect a scalable and shippable game in Unreal Engine",
        "Those who wish to know how to implement gameplay Attributes, Abilities, Experience, Level Ups, and how to maintain these in a clean code base",
        "Those who wish to know how to handle game UI for complex systems in an efficient manner",
        "Those who wish to create their own RPG, MOBA, Shooter Game, or any other type of game involving attributes, skills, spells, or other custom mechanics",
        "Those who wish to know how to implement enemy AI with Behavior Trees and Environment Queries (EQS)",
        "Those who have Unreal Engine experience and are looking to expand their skillset to create shippable games",
        "Those who are looking for a comprehensive course on the Gameplay Ability System (GAS) so they can use it in their own game projects",
        "Hobbyists and Professional Game Developers alike will benefit from this course",
        "AAA developers who need to learn the fundamentals of GAS for their team's game project",
        "Leaders of game development projects who need to understand how GAS works in Unreal Engine, its capabilities, limitations, and costs on time and effort for developers",
        "Teams who need to architect their game project in a scalable manner, so it will be easily maintainable post-launch",
        "Anyone who has created some basic Unreal Engine projects and is ready for some next level greatness!"
      ]
    },
    {
      "title": "Modding By Kaupenjoe: Minecraft Modding 1.20.X for Forge",
      "url": "https://www.udemy.com/course/minecraft-modding-120x-for-forge/",
      "bio": "Easily Learn Minecraft Modding with Forge! Beginner Friendly Introduction into Java and Minecraft Modding using Forge!",
      "objectives": [
        "Learn the Basic Java Skills necessary to make a Minecraft Mod!",
        "The Basics of Minecraft Modding in Forge",
        "Learn to independently program in Java",
        "From making your First Item to creating Custom Mobs that roam around in Minecraft"
      ],
      "course_content": {
        "Java Introduction": [
          "Java Installation & Setup",
          "Java Datatypes",
          "Java Syntax",
          "Output & Input",
          "Errors & How to not panic when you get them!",
          "Integers & Arithmetic & Math Methods",
          "Assignment Operators",
          "Boolean & Comparison Operators",
          "Boolean & Logical Operators",
          "If & Else Statements",
          "Switch Statements",
          "Trivia Game #1",
          "String & String Methods",
          "Casting",
          "Ternary Operator",
          "Java Arrays",
          "Loops",
          "Java Methods",
          "Trivia Game with Methods",
          "Java Collections",
          "Object Oriented Programming Explained",
          "Java Classed & Objects",
          "Access Modifiers",
          "Inheritance & Polymorphism",
          "Interfaces & Abstract Classes",
          "Trivia Game with Classes",
          "Bank Management Program",
          "Anonymous Classes",
          "Enums & Advanced Enums",
          "Exceptions",
          "Lambda Expressions",
          "Generics"
        ],
        "Basic Modding Concepts": [
          "Forge Setup, Installation & GitHub",
          "Adding Custom Items",
          "Adding Custom Blocks",
          "Adding a Custom Creative Mode Tab",
          "Adding Ore Blocks",
          "Adding Custom Recipes",
          "Adding Custom Loot Tables (Drops to Blocks)",
          "Adding Custom Advanced Items",
          "Adding Custom Advanced Blocks",
          "Adding Custom Food Items",
          "Adding Custom Fuel Items",
          "Adding Custom Tooltips",
          "Adding Custom Tags",
          "Adding Custom Data Generation",
          "Adding Custom Stairs & Slabs",
          "Adding Custom Buttons & Pressure Plates",
          "Adding Custom Fences & Walls",
          "Adding Custom Doors & Trapdoors",
          "Taking a Look at Vanilla Code",
          "Updating Minecraft from 1.20 to 1.20.1"
        ],
        "All About Tools": [
          "Adding Custom Tools",
          "Adding a Custom Paxel",
          "Adding a Custom Hammer (3x3 Tool)",
          "Adding an Effect on Weapon Hit",
          "Adding Custom Armor",
          "Adding a Custom Full-Armor Effect",
          "Adding Custom Horse Armor",
          "Adding Custom Enchantments"
        ],
        "Intermediate Modding Concepts": [
          "Understanding BlockStates & BlockState Properties",
          "Understanding NBT Data",
          "Adding Custom Item Properties",
          "Adding a Custom Crop Block",
          "Adding an Item to the Composter",
          "Adding a Command",
          "Understanding Events",
          "Adding a Custom Flower",
          "Adding Custom Sounds",
          "Adding Custom Sounds to Blocks",
          "Adding Custom Music Discs",
          "Adding Custom Block Models",
          "Adding Custom Item Models",
          "Adding a Custom Bow",
          "Adding a Custom Shield",
          "Modifying Vanilla Loot Tables",
          "Adding Custom Paintings",
          "Adding Custom Effects",
          "Adding Custom Potions",
          "Adding Custom Villager Trades",
          "Adding Custom Villagers",
          "Adding Custom Advancements",
          "Adding & Spawning Custom Particles",
          "Adding Custom Fluids",
          "2D Texture and 3D Model for Item",
          "Adding Animated Item Textures",
          "How to look at other Mods on GitHub"
        ],
        "All About Block Entities": [
          "Adding a Custom Block Entity",
          "Adding a Custom Recipe Type",
          "Adding JEI Compatibility",
          "Adding a Sided Inventories to the Block Entity",
          "Adding a Energy Handling to the Block Entity",
          "Adding a Fluid Handling to the Block Entity",
          "Adding a Block Entity Renderer",
          "Adding a Custom Wood Type",
          "Adding a Custom Sign (+Hanging Sign)"
        ],
        "About World Gen I": [
          "Adding Custom Tree Generation",
          "Adding Custom Ore Generation",
          "Adding Custom Flower Generation"
        ],
        "Mobs & Entities": [
          "Adding a Custom Entities (Mobs)",
          "Adding Custom Attack Animations",
          "Adding Custom Entity Variants",
          "Custom Mob Sounds",
          "Adding Tameable Mobs",
          "Adding Rideable Mobs",
          "Making Mobs Breedable",
          "Adding a Boss Bar",
          "Making our Entities Spawn in the World",
          "Throwable Projectiles",
          "Adding Projectiles",
          "Custom Boats"
        ],
        "World Gen II": [
          "Growing Trees on other Blocks",
          "Custom Trunk Placers",
          "Custom Foliage Placers",
          "Adding Custom Geodes"
        ],
        "Additional Topics I": [
          "Block with Biome Colors",
          "Adding Custom Items to Suspicious Sand",
          "Adding 2 Block High Crops",
          "Updating Forge and NeoForge!"
        ],
        "World Gen III": [
          "First steps for a Custom Biome",
          "Adding a Custom Dimension"
        ]
      },
      "requirements": [
        "A Computer",
        "Some knowledge of Minecraft and its Modding Community",
        "Basic Computer skills (like downloading a program of the web)",
        "No programming experience needed, but can be useful!"
      ],
      "description": "Minecraft is the most popular game of all time! Minecraft Modding for the Java version of the game is known to be used in many YouTube videos and is played by a huge community! The Minecraft Modding Community keeps growing every day and it's a great and creative outlet!\nThis course will teach you how to make your own Minecraft Mod! You will learn the programming language Java as well as how to effectively use the Minecraft Modding API Forge.\nFor absolutely beginners, I have added a Java Introduction for you, so even with no experience in programming you can start making Minecraft Mods by first going through the Java Introduction!\nIn the Basics Concepts part of the course, you will learn how to add Items, Blocks and Custom Recipes! A section on Tools and how to add those is presented as well!\nThe Intermediate Concepts is where you'll really pick up some amazing skill needed for proper Minecraft Modding with Forge! You'll learn Custom Crops, Sounds, Custom Shields and so, so much more!\nBut that's not all! We will also cover advanced topics such as Block Entities, Custom Mobs and even Ore Generation amongst others and Structure Generation.\nWith a bit of creativity and applying the lessons you get from this course, you might just make the next Minecraft Mod hit!\nThis course is accessible to complete beginners. Even if you have never programmed in your life! The only requirement is that you own Minecraft and are vaguely familiar with the Game and some popular Minecraft Mods or even Minecraft Modpacks.\nAll files and the entire Source Code will be available so you can follow along with everything I do in the videos.\nIf you have any questions or suggestions, also feel free to contact me here. I'm happy to help you learn to code in Java and make your own Minecraft Mod with Forge.\nNOT AN OFFICIAL MINECRAFT PRODUCT. NOT APPROVED BY OR ASSOCIATED WITH MOJANG.",
      "target_audience": [
        "Complete Beginners wishing to learn Java and Minecraft Modding!",
        "Beginners that want to create their first Minecraft Mod and don't know where to start",
        "Forge Modders wanting to update their Minecraft Mod to 1.20.X",
        "Forge Modders interested to deepen their understanding and learn new topics"
      ]
    },
    {
      "title": "Create Stunning Vertical Shoot 'Em Up for Mobile with Unity",
      "url": "https://www.udemy.com/course/create-a-shmup-with-unity-3d/",
      "bio": "Unlock the Secrets of Mobile Vertical SHMUPs with This Hands-On Course in Unity Game Development",
      "objectives": [
        "Create a complete SHMUP game like Skyforce",
        "Upgrade (include timed upgrades) and Save features.",
        "Mobile Optimization (Touch, Object Pooling)"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Scripting Concept",
          "Unity Project Setup"
        ],
        "Game Play Programming": [
          "Player Movement",
          "Temporary Pooling Setup",
          "Scriptable Objects for Weapon Setup",
          "Bullet Prefabs Setup",
          "Shooting Script Setup",
          "Health System pt. 1",
          "Health System pt. 2 (Hit Effects)",
          "Death System",
          "Spawn Objects & Health Bar",
          "Nodes Based Movement Setup",
          "Nodes Based Movement Editor Scripting",
          "Nodes Based Movement - Moving Objects",
          "Nodes Based Movement - World to Local Position",
          "Nodes Based Movement - Rotate Objects",
          "Enemy Waves",
          "Rotating Turret",
          "Missile Turret",
          "Auto Move",
          "Designing Boss",
          "Boss Movement",
          "Human Rescue Setup",
          "Pooling System Continued",
          "Level Design Part 1",
          "Level Design Part 2",
          "Enemy Activator",
          "Coin Setup",
          "Camera Movement",
          "Boss to Level Integration",
          "Enemy Waves Integration",
          "Laser Power Up",
          "Mega Bomb",
          "Shield Power Up",
          "Player Missile"
        ],
        "Menu & Data Management": [
          "Level Manager",
          "Stats & Upgrades pt. 1",
          "Stats & Upgrades pt. 2",
          "Stats & Upgrades pt. 3",
          "Upgrade Item Continued",
          "Dialog System",
          "Save System",
          "Scene Loader Progress",
          "Level Menu pt.1",
          "Level Menu pt.2",
          "UI Transitions",
          "Finishing Up UI"
        ],
        "Final Adjustment": [
          "Audio Setup",
          "Touch Control",
          "Power Up Menu",
          "Applying Stats",
          "Scoring System",
          "Weapon Upgrade Menu",
          "Level Unlocking",
          "Final Builds",
          "Additional Lecture: Node Move Optimization"
        ],
        "Bug Fixes": [
          "StatsManager Bug Fixes"
        ]
      },
      "requirements": [
        "Unity Installed on your PC (version 2017 or newer)",
        "A strong will to learn game development",
        "Basic understanding of Unity C# API"
      ],
      "description": "Course updated to be compatible with Unity 2019.4!\nReady to take your game development skills to the next level? Join us in this exciting course where we will teach you how to create a fully functional Shoot Em Up game (think Skyforce or Raiden) from scratch using Unity.\nWhether you're an experienced Unity developer looking to expand your skill set or a newcomer to the world of game development, this course is for you. We'll guide you through the entire process of creating a game, starting with object oriented programming and delving deep into Unity's C# API.\nBut we won't just stop there. We'll provide you with all the assets you need to bring your game to life, including 3D models and audio. And you'll have the freedom to use these assets in your own games as well.\nThroughout the course, we'll also introduce you to advanced concepts such as Component Based Design, Movement, Shooting Patterns, Curved Movement with Nodes, Scene Transitions, Saving and Loading, Unity's Scriptable Objects, Coins & Human Rescue, and Medal Achievements – all the features you need to create a game that stands out from the rest.\nWith our guidance, you'll gain a deeper understanding of Unity's API and how to leverage it to create games that are engaging, fun, and challenging. So why wait? Sign up now and get ready to unleash your creativity and build the game of your dreams!\nNote: Basic knowledge of Unity's C# API is recommended.\nWho is the target audience?\nGame developers who want to expand their skill set and learn how to create a fully functional Shoot Em Up game using Unity.\nProgrammers who want to improve their knowledge of Unity's C# API and learn how to leverage it to create games.\nDesigners who want to learn how to bring their game ideas to life using Unity's powerful game engine and tools.\nHobbyists and enthusiasts who are interested in game development and want to learn how to create their own Shoot Em Up games.\nStudents who are studying game development or computer science and want to gain practical experience in game development using Unity.\nWhat they say about this course:\nJamie Lowe - \"Course is mainly for more intermediate/advanced developers but even if you attempt this as a beginner then you will still learn some valuable stuff, reason for my 5 star rating is for the fact Romi is always on hand to help with any problem and most other courses I have taken on Udemy I find it sometimes have to wait a long time for help and that's not good when needing to solve issues, Romi still updates this course to fix any bugs that arise and that is exactly what students need so you are not left with a broken project at the end of the course, I will still be hanging around making adjustments to my project, thank you\"\nLance Spence - \"I learned a lot from this course and learned new things that I have not seen covered in other Unity courses such as implementing a pooling system, using platform directives and making use of the Gizmos to visualize objects moving along a path. the instructor is knowledgeable and very responsive to students questions. This is one of the primary reasons he has earned a 5 star rating from me. I highly recommend this course if you've ever wanted to learn how to create an awesome SHMUP.\"",
      "target_audience": [
        "Intermediate Unity Developer."
      ]
    },
    {
      "title": "Create a Battle Royale game using Unreal Engine 4 Blueprints",
      "url": "https://www.udemy.com/course/battleroyale/",
      "bio": "Create a Battle Royale game like Fortnite with the Industry Standard Unreal Engine 4",
      "objectives": [
        "Create a Battle Royale game like Fortnite",
        "Integrate Steam into our game",
        "Learn basic coding principals using Unreal Engine 4's Blueprint system",
        "Learn general Game Development ideas"
      ],
      "course_content": {},
      "requirements": [
        "A PC running Windows 10",
        "Unreal Engine knowledge will help but is not required"
      ],
      "description": "The C++ Survival Course is now available on my Patreon!\n\n\nWhy does this course need to exist?\nEveryone has played a Battle Royale game such as Fortnite. Perhaps you've always wondered how to make your own, but found tutorials were too long and didn't get to the point?\nI want to put an end to Game Development being tiresome and boring. That is why at the end of the 8 hour series, you'll have a fully working Battle Royale game, ready to be built on and made into your own.\nThat means that depending on your learning speed, you can have a working Battle Royale game completely finished in under a week. The lessons you will learn can be used to go on and make any other type of game you can think of.\n\n\nHow is this possible?\nUnreal Engine 4 is completely free to use and is a AAA quality engine, used to make games such as Fortnite, Bioshock, Gears of War, and Borderlands. Unreal Engine ships with Blueprints, an industry standard tool that is the perfect gateway into the games industry for a beginner with no technical knowledge.\nThink of Blueprints as driving an automatic car: you'll be able to learn all the correct skills and concepts, without any extra distractions. It will also put you in a great position to go on to learn the more technical C++ language, if that is what you choose.\n\n\nWho is the teacher?\nThe course is fully developed by Reuben Ward, who has been working professionally as an Unreal Engine Game Engineer, and has over 2 years experience working professionally developing Battle Royale games. He also has plenty of experience teaching game development, and his video tutorials have received over 1,500,000 views on YouTube.\nI understand how difficult Game Development can be when getting started, and that is why I love to take the technical boring parts of game development and make them as simple as possible. I hope you'll join me in making your own Battle Royale game!",
      "target_audience": [
        "Beginner Game Developers wanting to create their own Battle Royale Game"
      ]
    },
    {
      "title": "Develop 16 Augmented Reality Apps in Vuforia 8 in Unity 2020",
      "url": "https://www.udemy.com/course/create-augmented-reality-apps-using-vuforia-in-unity-sdk/",
      "bio": "The Compact Guide on How to Develop Augmented Reality (AR) Apps using Vuforia 8 and Unity 2020.1!",
      "objectives": [
        "*Update your AR Apps to Vuforia 8 in Unity 2020!",
        "How to Develop Simple Augmented Reality Apps in Vuforia (Unity) in under 4 hours!",
        "How to Levitate a Cube in Augmented Reality",
        "An easy guide on how to detect multiple marker targets and Overlay 3D Monsters from Unity Asset Store",
        "How to use Virtual Buttons Effectively within your AR app",
        "How to us your Hands to Draw in Mid-Air using a Leap Motion Controller",
        "Why Vuforia's Smart Terrain is so powerful and How to Implement it",
        "Detect Cylindrical Targets and overlay some particle effects on them",
        "How to get ARCore-like experience using Ground Plane Technology",
        "3 Steps to Export your AR App to Android!"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Introduction the Course",
          "How to Take this Course",
          "Why Augmented Reality with Vuforia is so Cool!"
        ],
        "[Vuforia 6] Getting Started with Augmented Reality App Development in Unity": [
          "Important Note before Downloading and Installing Unity and Vuforia",
          "How to Download and Install Unity and Vuforia",
          "Vuforia Update AR Camera Issue - IMPORTANT!",
          "Github Repository for Vuforia Augmented Reality Course",
          "App 1 - How to Levitate a Cube using Vuforia and Unity 3D",
          "Notes on Troublefree Unity-Vuforia Installation on Windows 10:",
          "[Course Update] - Answering Questions Blank White Texture and Image Database C",
          "App 2 - The Easy Script to Add Rotation to your Cube in Unity",
          "App 3 - The Simple Guide to Multiple Marker Targets in Vuforia",
          "[Course Update] - App4 - AR Movie Projector",
          "App 4 -The Augmented Reality Movie Projector -Coolest Way to Watch Videos in AR",
          "App 5 -Why you need Virtual Buttons in AR and how to implement them",
          "Virtual Button in Unity 2017.2",
          "Review Lecture",
          "App 6 -Let your Hands do the Talking - Leap Motion AR tutorial",
          "App 7 -How to implement Text Recognition in under 8 Minutes",
          "App 8 -How to Go Beyond the AR Marker with Vuforia Smart Terrain",
          "Notes on Creating a Cylinder Target on Vuforia Developer Portal",
          "App 9 -Why would we use Cylindrical Target Detection in Vuforia AR and Unity?",
          "Test Your Knowledge - AR Quiz"
        ],
        "[Vuforia 7] AR in Unity 2017.3, Build to Android and Marker-less Ground Plane AR": [
          "[NEW] Vuforia 7/ Unity 2017.3 Download/Install and HelloWorldAR",
          "App 10 - Vuforia 7 How to get ARCore Experience with Ground Plane Technology",
          "App 11 - Vuforia 7 -The Quick Guide on How to Export to Android Build in Unity",
          "App 12 Vuforia 7 - How to Scan 3D Object in Augmented Reality?"
        ],
        "[Vuforia 8] AR in Unity 2020.1": [
          "[NEW] Vuforia 8 Updates - Models Targets using Deep Learning, VISLAM and more...",
          "[NEW] Vuforia 8 Download & Install in Unity 2020.1 and Export to Android",
          "[NEW] Vuforia 8 Video Playback in Augmented Reality Unity 2020",
          "[NEW] Visual Inertial Simultaneous Localization & Mapping (VI-SLAM)",
          "[NEW] Vuforia 8 Model Targets"
        ],
        "[Non-Tutorial Videos] Demonstration Showcase Videos": [
          "A Quick Demonstation of a 2D Platform Game",
          "Unreal Engine 4 AR Fight Scene Demonstration",
          "Recreate the Unreal Engine Fight Scene"
        ],
        "Conclusion": [
          "Quick Course Summary"
        ],
        "[BONUS] Project E.D.I.T.H. AI Smart Glasses": [
          "Phase 1 - AI Face Detection",
          "Phase 2 - Facial Recognition",
          "Phase 3 - AI Object Detection",
          "Phase 4 - JARVIS AI Voice Assistant",
          "Cool Resources for Students",
          "[NEW] XR Developers Podcast with Ritesh Kanjee"
        ],
        "[Archive] Vuforia 6.2": [
          "Vuforia AR Cube for Vuforia SDK 6.2"
        ]
      },
      "requirements": [
        "Enthusiasm for Augmented Reality",
        "PC/ Laptop that meets Unity SDK minimum requirements",
        "Unity 3D and Vuforia SDK (I show you how to install both for free)",
        "A Webcam (Can use an Android Phone as a webcam)",
        "Printer or Phone/Tablet to print out or display the AR marker",
        "A Leap Motion Controller (Only Required for one of the Lectures)",
        "Very Basic Unity Experience"
      ],
      "description": "***Updated for Vuforia 8 and Unity 2020.1 ***\nThe Fastest Way to Learn Vuforia 8 and Develop 16 Augmented Reality Apps using Unity SDK in under 5 hours!\nWhy should I take this course?\nThere are plenty of courses on Augmented Reality, with courses that run over 10 hours. When I got started in AR, I wanted to learn the Vuforia as quick as possible, because for obvious reasons, time is money. The company I was working for at the time, didn't have the luxury of time to spend on long training courses. So we had to learn learn Vuforia in our own time outside work hours, can you believe it!\nAfter watching  tons of courses and reading through Vuforia documentation, I realized that this SDK is really quite simple and the key concepts to started with developing apps can really be learnt in just a few hours.\nThat is why I developed this course, to teach you all the  fundamentals of the Augmented Reality in the shortest time;  so that you can get started developing your own Augmented Reality Apps and decrease your time to market. Being compact does not mean that we compromise on content, we cover the exact same content as courses that run over 10 hours.\nWho is my lecturer? And what makes you qualified to teach me?\nMy Name is Ritesh Kanjee and I host the popular YouTube Channel called Augmented Startups with over 62 000 subscribers. I am an AR/AI Developer with a Masters Degree in Electronic Engineering, teaching over 46 000 students on Udemy. With over 7 years of AR and Unity experience, you can trust that you are in the right hands.\nOkay so your qualified! What will I learn in this course?\nThis course is designed to help you understand the fundamentals of Augmented Reality using the Vuforia SDK in Unity through practical and easy to understand labs.\nThis class covers these capabilities, including getting started, simple and multiple target detection, smart terrain as well as leap motion integration. You will learn all the fundamentals through practice as you follow along with the training.\nTogether we will build a strong foundation in AR in Unity SDK with this training for beginners. This course will enable you to:\nGet started in Unity and how to download the Vuforia SDK\nCreate a simple AR app with a floating cube\nOnce you have mastered the basics we go ahead and create multiple targets in Augmented Reality\nCreate virtual buttons to add interactivity to your AR apps.\nDisplay Video on a physical wall.\nLeverage the Leap Motion Controller to create a pinch drawing app in AR. (Really Cool!)\nImplement Vuforia's smart terrain algorithm to detection objects in Real Time!\nDetect Cylindrical Target Objects and animate markers\nVuforia 7 and Unity 2017.3\n[NEW] Vuforia 7 Ground Plane (Similar to Googles ARCore)\n\n\n[NEW] Vuforia 8 and Unity 2020.1\n[NEW] Vuforia 8 Video Playback\n[NEW] Vuforia 8 VI-SLAM Fundamentals\n[BONUS] Vuforia 8 Export to Android Device\n\n\n[HUGE BONUS] Build your own AI Smart Glasses Project E.D.I.T.H. (Spiderman Far From Home)\nWhat if I'm not happy with this course?\nWe also offer a full Udemy 30 Day Money Back Guarantee if you are not happy with this course, so you can learn with no risk to you.\nPersonal help within the course?\nI want you to succeed. If you have any questions or need help, leave a question in the QnA section. You can also send me a message on Udemy. You will also receive a verifiable certificate of completion upon finishing the course.\nLet me help you develop 16 Augmented Reality app in 5 hours. Click the button and enroll now.\n=============================================================================================\nSome of the reviews\n\"Excellent course! The instructor responded quickly to questions and provided feedback which allowed me to further enhance my understanding of the topics discussed in the unit.\"  - James Exantus\n\n\n\"I appreciate the fact that these videos begin with an industry overview to contextualize the work ahead.\" -- Les Struck\n\n\n\"simple and effective into to AR with vuforia\" - Bhawana Nathawat\n\n\n\"So far the course is very interesting. I found good the section where is explained what errors may occure and how to solve them(this helps me a lot). \" - Svilen Radichkov\n\n\n\"Excellent course\"   - León Felipe Guevara Chávez\n\n\n\"very clear to follow pace\" - Wayne Williamson\n\n\n\"It's explained in a simple way that's easy to understand.\" - Lloyd Richardson\n\n\n\"this course was awesome . Really I feel it\" - Samrat Chapagain\n\n\n\"it's so simple and amazing i really like it . thank you very much you are amazing\"  -- Tumenjargal Altanginj",
      "target_audience": [
        "This course is for those who want to learn Augmented Reality",
        "This course is not for people who are not willing to practice along. You won't learn by watching but rather by implementing the labs that I provide in this course.",
        "Beginners in Augmented Reality or Mixed Reality",
        "Leap motion developers",
        "This course is implemented in Unity on Windows. Android or iOS deployment is NOT part of the scope of this course. However you can easily find tutorials on how to export your AR app to mobile Operating Systems"
      ]
    },
    {
      "title": "Learn to Create & Publish Games for Mobile",
      "url": "https://www.udemy.com/course/unitymobile/",
      "bio": "Mobile development made easy. Learn C# using Unity and create & publish your own mobile game",
      "objectives": [
        "Publish a full game to the Google Play Store",
        "Understand how to earn revenue using advertising in their games",
        "Learn C#, a modern versatile programming language",
        "Understand the capabilities of mobile development in Unity",
        "Develop strong and transferrable problem solving skills",
        "Gain an understanding of the game development process"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Assets"
        ],
        "Getting Started": [
          "Setting up Unity & Android Studio",
          "The Unity Editor Layout",
          "Setting up the Workspace",
          "Importing Assets",
          "Setting up the Scene",
          "Setting up the Camera",
          "Introduction to Coding"
        ],
        "Movement": [
          "Moving The Player",
          "Moving The World",
          "Creating an Infinite Path",
          "Removing objects off screen",
          "Stopping the World",
          "Controlling the World's Speed"
        ],
        "Filling In The World": [
          "Adding Path Tiles",
          "CHALLENGE - Create More Path Tiles",
          "Selecting Random Tiles",
          "Creating a background Treeline",
          "Making the Treeline Loop & Repeat"
        ],
        "Core Gameplay": [
          "Adding a Character Model",
          "Animating the Player",
          "Creating Hazards to use",
          "CHALLENGE - Add more hazard objects to your game to make it feel more complete!",
          "21 - Adding Tags and movement to Hazards",
          "22 - Generating Random Hazards",
          "23 - Colliding with Hazards",
          "24 - Making Hazards Hurt",
          "25 - Knocking Back Player",
          "26 - Making the Player Jump",
          "27 - Stop Jumping After Death",
          "28 - Stop Jumping In the Air",
          "29 - Adding More Animations",
          "30 - Generating objects outside the path",
          "CHALLENGE - Generate different objects on the other side of the path"
        ],
        "Earning Coins & Adding Difficulty": [
          "31 - Adding Coins to Collect",
          "32 - Generating Groups of Coins",
          "33 - Coin Collection Bug Fixing",
          "34 - Storing Coins Collected",
          "35 - Adding Tap To Start",
          "36 - Increasing Difficulty",
          "37 - Gradually Increasing Speed",
          "38 - Increasing Hazard Spawn Rate",
          "CHALLENGE - Increase the speed of objects appearing at the side of the screen"
        ],
        "Creating a Main Menu": [
          "39 - Setting up a UI Canvas",
          "40 - Laying Out the UI",
          "41 - Creating Main Menu Script",
          "42 - Adding Character to the Main Menu"
        ],
        "Game UI": [
          "43 - Laying Out Text On Screen",
          "44 - Controlling On-Screen Text",
          "45 - Laying Out Death Screen Menu",
          "46 - Controlling Death Screen Text",
          "47 - Making Death Screen Buttons Work",
          "48 - Setting Up Continue Option",
          "49 - Resetting Player On Continue",
          "50 - Setting up Pause Menu"
        ],
        "Switching Characters": [
          "51 - Setting Up Character Switch Menu",
          "52 - Adding Character Models",
          "53 - Moving Camera for Character Switching",
          "54 - Moving Camera Between Characters",
          "55 - Storing Character Unlocks",
          "56 - Fixing Character Unlock Bug",
          "57 - Unlocking Characters",
          "58 - Locking Characters While In Editor",
          "59 - Storing The Selected Character",
          "60 - Starting Game With Selected Character"
        ],
        "Improving GameFeel": [
          "61 - Fading In At Game Start",
          "62 - Improving Shadows",
          "63 - Adding Audio Manager",
          "64 - Saving Audio Muted Preference",
          "65 - Loading Sound Correctly In-Game",
          "66 - Activating Music & Sound Effects In-Game",
          "67 - Creating Particle Effects"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "The latest version of Unity 3D"
      ],
      "description": "Learn how to create your very own endless runner game for mobile using Unity3D, an industry-standard program used by many large gaming studios and indie developers across the world.\nIn this course, you'll learn everything you need to build and release a game on the Google Play Store, from building the game all the way through to how to publish your game on the Play Store itself.\nYou won’t just be learning programming concepts in this course, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding mobile game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to create such mobile game elements as:\nCreating an endless world\nGathering collectibles\nUsing Advertisements to create revenue for your games\nRandomly generating objects in the world\nAdding dangerous elements\nUser Interface with interactive menus\nCreating a character unlocking & switching system\nStart learning today and let me help you become a mobile game developer!",
      "target_audience": [
        "Anyone who wants to make their own mobile games",
        "Anyone interested in learning to publish apps to the Play Store",
        "Complete beginners with an interest in learning mobile game development",
        "Developers who want to re-skill across to mobile development",
        "People who want to create and publish their own mobile game"
      ]
    },
    {
      "title": "Unreal Engine 5 Blueprint Scripting Masterclass, Create GTA5",
      "url": "https://www.udemy.com/course/ue5-blueprint-scripting-masterclass-create-gta5-style-game/",
      "bio": "Learn everything about Unreal Engine 5 and blueprint scripting (create GTA5 style game from scratch)",
      "objectives": [
        "Unreal Engine 5 Basics: Everything you need to know about Unreal Engine 5 as a beginner game developer",
        "Blueprint scripting basics: I will cover all the basics, types and components of blueprints scripting in UE5",
        "How blueprints work: I will explain the logic of blueprint scripting and creating your own game logic",
        "Creating a city map: we will create a complete and big city for game.",
        "Shooter game: we will start creating a shooter game from scratch (blank project and character class)",
        "Weapons: a complete weapon system for three different weapons (Pistol, Rifle and Sniper) like: Shooting, Ammo count, Reloading, Aiming...",
        "Game UI: complete game user interface with weapon info, health bar and enemy count",
        "AI shooter enemy: AI controller, Behavior Tree, Blackboard, BTTasks, BTServices, BTDecorators, finding random locations, Chasing player, Shooting ...",
        "AI people: 4 different people controlled by AI controller, Patrolling points, run while receive damage",
        "Chaos Vehicles (Drivable cars): Complete Drivable cars using Chaos system in UE5",
        "AI cars: using spline, Stop - Go function, stop if something is in front of that, Possess and exit the car at runtime",
        "Traffic lights: complete traffic light system, stop AI cars and people if traffic light is red",
        "Gun and Health pickups",
        "Game mode and rules",
        "Package the final project"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Unreal Engine 5 Basics": [
          "Introduction to Unreal Engine 5",
          "Installing Unreal Engine",
          "Creating first project",
          "User Interface",
          "Navigation in UE5",
          "Viewport Settings",
          "Creating and Transforming Objects",
          "Post Process Volume",
          "Materials",
          "Textures",
          "Static Mesh",
          "Lights",
          "Lumen",
          "Landscape",
          "Landscape Material",
          "Megascans",
          "Foliage",
          "Section test",
          "Do you want to know more about Unreal Engine 5?"
        ],
        "Unreal Blueprint scripting basics": [
          "Introduction to blueprints",
          "Level blueprint",
          "Blueprint Class",
          "Blueprint Components",
          "Event Graph",
          "Functions",
          "Variables",
          "Cheat Sheet",
          "Nodes",
          "Creating Nodes",
          "Construction Script",
          "Section Quiz"
        ],
        "Creating Game City": [
          "Creating blank project",
          "Drawing city map",
          "Landscape and Water",
          "Skysphere",
          "Adding Roads",
          "Setup City Buildings"
        ],
        "Shooter Player": [
          "Setup Map",
          "Base Character Blueprint",
          "Setup Player Character",
          "Player Movement",
          "Looking Around",
          "Animation Blueprint",
          "Blend Space",
          "Set Speed and Direction",
          "Calculate running speed",
          "Walk - Run",
          "Weapon Class",
          "Can pickup weapon",
          "Enumeration",
          "Pickup Weapon",
          "Attach Weapon to character",
          "Pistol Animation",
          "Pickup Function",
          "Rifle and Sniper",
          "Weapon Equip",
          "Equip Pistol",
          "Unequip other weapons",
          "Switching Weapons",
          "Shoot Event",
          "Structure",
          "Line Tracing",
          "Character Hit Effect",
          "Send and recieve damge",
          "Health and Death",
          "Curren Ammo",
          "Reloading Ammo",
          "Setup Rifle",
          "Aiming",
          "Setup Sniper",
          "Animation Montage",
          "Fire animation and Hit reaction"
        ],
        "Game UI": [
          "Widget Blueprint",
          "Weapon Icons",
          "Pickup BG color",
          "Update Weapon info",
          "Nodes Arrangement",
          "Healthbar",
          "Enemy Healthbar",
          "Sniper Aiming"
        ],
        "AI Enemy": [
          "Setup Alien Character",
          "Setup AI controller",
          "Spawn Enemy Gun Actor",
          "Find Random locations for AI",
          "Chase player task",
          "Shooting task",
          "Behavior Tree Services",
          "Disable player input"
        ],
        "AI people": [
          "Setup people character",
          "Setup AI controller",
          "Find Patrol Point",
          "Increament Patrolling points index",
          "Walk - Run"
        ],
        "Chaos Cars": [
          "Setup Cars",
          "Setup Wheels",
          "Torque Curve",
          "Setup Input",
          "Vehicle Animation Blueprint"
        ],
        "AI Cars": [
          "Self Driving Cars",
          "Path Actor (Spline)",
          "Stop - Go",
          "Stop the car if there is something",
          "Setup traffic light actor",
          "Setup Lighting",
          "Traffic light duration",
          "Red - Green and Orange lights",
          "Traffic light to stop the car",
          "Traffic light for people",
          "Possess car at runtime",
          "Exit car"
        ]
      },
      "requirements": [
        "No previous Unreal Engine experience needed."
      ],
      "description": "Do you want to become the master of Unreal Blueprint visual scripting?\nDo you aspire to create a game like GTA5?\nUnreal Engine 5 is the world's most open and advanced real-time 3D creation tool for game development. This engine is renowned for creating games such as Fortnite, PUBG, Borderlands 3, Observer, and Star Wars Jedi: Fallen Order.\nIn this course, I will start with the basics and progress step by step, covering everything you need to know to develop a game like GTA5.\nWe will design a complete and vast city, create a shooter character, and develop weapon systems for three different firearms (Pistol, Rifle, and Sniper). We will also create AI enemies, a chaos-driven car system, AI-controlled cars, game user interface, game modes, and rules. The best part? You'll accomplish all of this using Blueprints, so no prior experience in programming or C++ is necessary.\nAll the necessary assets will be provided, ensuring you can easily follow along.\nIn this course, we will cover:\nUnreal Engine 5 Basics: A comprehensive guide for beginner game developers.\nBlueprint Scripting Basics: I will cover all the fundamental types and components of Blueprint scripting in UE5.\nHow Blueprints Work: Understand the logic behind Blueprint scripting and create your own game logic.\nCreating a City Map: Develop a complete and expansive city for your game.\nShooter Game Development: Start building a shooter game from scratch, beginning with a blank project and character class.\nWeapons: Implement a comprehensive weapon system for three different firearms (Pistol, Rifle, and Sniper), covering shooting, ammo count, reloading, aiming, and more.\nGame UI: Design a complete game user interface displaying weapon information, health bars, and enemy count.\nAI Shooter Enemies: Implement AI controllers, Behavior Trees, Blackboards, BTTasks, BTServices, BTDecorators, random location finding, player chasing, and shooting logic.\nAI People: Create four different AI-controlled characters, set up patrolling points, and enable them to run when they receive damage.\nChaos Vehicles (Drivable Cars): Develop fully functional drivable cars using the Chaos system in UE5.\nAI Cars: Use spline paths, implement stop-go functionality, enable cars to stop if obstacles are in front, and allow dynamic possession and exit of cars during runtime.\nTraffic Lights: Design a complete traffic light system that halts AI cars and pedestrians when the light is red.\nGun and Health Pickups\nGame Modes and Rules\nPackaging the Final Project",
      "target_audience": [
        "Who wants to become the master of Blueprint scripting in Unreal Engine 5.",
        "Game developers who want to create a game like GTA 5",
        "Game developer of any level (Beginners, intermediate and advance)",
        "Game developers of any level (Beginner, intermediate and advanced)",
        "Who wants to learn AI in Games",
        "Environment designers"
      ]
    },
    {
      "title": "Modern Unity UI with UI Toolkit",
      "url": "https://www.udemy.com/course/modern-unity-ui-with-ui-toolkit/",
      "bio": "A Complete Overview Of Unity's New UI System UI Toolkit",
      "objectives": [
        "Create modern and reusable User Interfaces in Unity",
        "Understand all UI Toolkit components",
        "Manipulate your UI from scripts",
        "Combine your UI and gamelogic"
      ],
      "course_content": {
        "Introduction": [
          "What Is UI Toolkit?",
          "What Is This Course About?",
          "What Is This Course NOT About?",
          "Who Is This Course For?",
          "Comparison Of Unity's UI Systems",
          "Unity Versions",
          "Course Resources",
          "Course Updates"
        ],
        "Workflow (Unity 6 Update)": [
          "Meet UI Builder: The New Unity UI Editor",
          "Workflow: Big Picture",
          "Step 1: Layout",
          "Step 2: Styling",
          "Step 3: Functionality",
          "Workflow Summary"
        ],
        "Workflow (before Unity 6)": [
          "Meet UI Builder: The new Unity UI Editor",
          "Workflow: Big Picture",
          "Step 1: Layout",
          "Step 2: Styling",
          "Step 3: Functionality",
          "Connect Your UI To A Game Scene",
          "Workflow Summary"
        ],
        "From Theory To Practise": [
          "How To 'Read' The Posters",
          "Section Poster",
          "Visual Trees",
          "Advantages Of Visual Trees",
          "From Visual Trees To UXML",
          "More UXML",
          "Understanding Stylesheets",
          "USS Files In UI Builder",
          "More USS",
          "Simple Selectors",
          "Selector Precedence",
          "Complex Selectors - Part 1",
          "Complex Selectors - Part 2",
          "Pseudo Selectors",
          "Bringing It All Together"
        ],
        "Layout and Flexbox": [
          "Section Poster",
          "Terminology",
          "Containers And Items",
          "Understanding The Main-Axis Concept",
          "Understanding Flex Direction",
          "Flex Direction In UI Builder",
          "The Flexbox Rabbit Hole",
          "Flex Direction Example 1",
          "Flex Direction Example 2",
          "Justify Content",
          "Align Items",
          "Align-Properties Example",
          "Flex Basis",
          "Definition For Flex Basis",
          "Pixel. Percentage or Auto",
          "Competition For Space",
          "Shrink & Grow",
          "Shrink & Grow Units",
          "Understanding Flex Basis",
          "Flexbox Wrapup",
          "Simple Flexbox Pattern Example",
          "Simple Flexbox Pattern Example 2",
          "Simple Flexbox Pattern Example 3",
          "Positioning",
          "Friendly Request"
        ],
        "Introducing The \"Course Project\"": [
          "Introducing The \"Course Project\"",
          "(Optional) Course Project Setup Part 1",
          "(Optional) Course Project Setup Part 2"
        ],
        "Build-In Controls": [
          "Section Poster",
          "Buttons",
          "Add Basic Functionality To Controls",
          "Working With Text",
          "Themes",
          "Complex Controls - Slider",
          "UI Toolkit Debugger",
          "Styling Controls",
          "Using The Slider",
          "Project : Practice Simple Controls Part 1",
          "Project : Practice Simple Controls Part 2",
          "(Optional) Using The Documentation"
        ],
        "Templates": [
          "Section Poster",
          "Working With Visual Elements In Scripts",
          "Templates in UI Builder",
          "Templates In Scripts",
          "Loading Assets In Scripts",
          "Project: Practice Templates"
        ],
        "Finding Elements With UQuery": [
          "Section Poster",
          "Why are there 3 different ways?",
          "Setup Explained",
          "UQueryBuilder",
          "How To Find Single Elements With Q",
          "How To Find Any Element With Query",
          "Swiss Army Knife For Queries",
          "Project: Practice Queries"
        ],
        "Events in UI Toolkit": [
          "Section Poster",
          "Events Overview",
          "Event Data",
          "Understanding Event Propagation",
          "Event Propagation In Code Part 1",
          "Event Propagation In Code Part 2",
          "Event Example 1",
          "Event Example 2"
        ]
      },
      "requirements": [
        "Some basic programming and Unity knowledge. If you worked with Unity for about 5 hours you should be fine."
      ],
      "description": "This course is a deep dive into Unity's UI Toolkit. You will learn most of the components that make up UI Toolkit and be able to create complex UI Systems for your games or apps.\n\n\nThis course uses a mix of theory and practice. We will create dozens of little UI-Components and examples. Furthermore, we will have a course project on which we will practice what we learned in the particular chapters. Finally, we will bring it all together and create a fully functional UI-based game.\nWhile this course is not explicitly covering Editor Scripting most of the content in the course will also apply to it.\n\n\nHere are some of the topics that we will cover:\n\n\n\nUnderstanding UXML and USS Files\nUnderstand the basic building blocks of UI Toolkit. We will talk about the concept of a visual tree and why it's a good idea to separate structure, styling and behavior.\n\n\nLayouts with FLEXBOX\nUI Toolkit uses the Flexbox system which is also used in web technologies.\n\n\nTemplates\nWe will learn how we can reuse pieces of our layout with templates.\n\n\nEvents and Event Propagation\nNo UI System can function without events. UI Toolkit has its own Event-System with modern features like event-propagation which we can use to our advantage.\n\n\n\nUQuery\nUnity is still a game engine, so more often than not most of your work will be done through scripts. U need an efficient way to connect your scripts and your UI and manipulate certain elements of your UI. In order to do that you first need to find those elements. UQuery provides a comfortable way how you can do that.\n\n\nData Binding\nWhile for editor scripting there is already a system in place which helps you bind your data to your components, this is not the case for runtime. Therefore we will look at some tools and techniques how you can do this manually.\n\n\nCustom Components\nUI Toolkit has a library of several build-in controls, but obviously, those can not cover every use case that you might come across. In this section, we will see how to create our own controls and thereby create our own little library of reusable UI Elements.\n\n\nManipulators\nOne rule of good software development is the separation of concerns. In this section, we will learn how we can group the behavior of particular elements into manipulators.\n\n\nand much more...",
      "target_audience": [
        "Unity developers interested in User Interfaces"
      ]
    },
    {
      "title": "All About Gaming Industry Careers & Game Design Fundamentals",
      "url": "https://www.udemy.com/course/game-industry-career-guide/",
      "bio": "2 courses in 1. Explore Career Paths in the Gaming Industry and the Fundamentals of Game Design",
      "objectives": [
        "Understand the roles in game development",
        "Learn the Fundamentals of Game Design",
        "Generating and drafting ideas for games",
        "Mechanics, dynamics, and systems in game design",
        "The phases of game development",
        "Find out if a career in the gaming industry is for you",
        "Preparing for a job in the game industry"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "Game Industry Studio Structure",
          "Phases of Game Development"
        ],
        "Game Development Roles": [
          "Roles in Game Development",
          "The level designer and design skills",
          "Game programming roles and skills",
          "Game artist roles and skills",
          "Game audio roles and skills"
        ],
        "Game Design and Development": [
          "Game theory",
          "Target Market",
          "Platform, distribution model and choosing a game engine",
          "Independent Game Development",
          "Funding Options for Games"
        ],
        "Game Design": [
          "Role of Game Designer",
          "Types of Game Designers",
          "Ideas for games",
          "Project: Make a Game",
          "Core of a Game",
          "Defining features from a core",
          "Project: Creating features from a core",
          "Players",
          "Game view",
          "Game Mechanics",
          "Goals",
          "The mechanics of play",
          "Game systems",
          "Understanding systems and character system",
          "Project: create character system",
          "Chance in games",
          "Project: chance",
          "Skills and decisions in games",
          "Strategy, tactics and skill",
          "Project: designing for mastery",
          "Pitching a game",
          "Proposing a game",
          "Documenting your game design",
          "Project: Documenting your game pitch",
          "Making games",
          "Going Indie",
          "Getting in the Gaming Industry",
          "Jobs in the Gaming Industry"
        ]
      },
      "requirements": [
        "an interest in gaming development"
      ],
      "description": "Welcome to this 2 part course where you'll get insights on careers in the gaming industry and learn about the fundamentals of game design.\nWe'll start things off where we explore careers in the gaming industry. You'll learn about concepts and skills required to make it in the gaming industry—whether you want to build and finance your own game or land a job at a studio or in mobile gaming.\nWe'll explore the structure of a typical game studio, the distribution paths for different types of games, marketing trends, the various roles (both artistic and technical), and the skills you need for each job.\nThen we'll get into game design. You'll learn about strategies for starting a career in game design,  drafting your game ideas,  tools and skills. We'll also discuss the role of the game designer, as well as how to define the  core loop of your game, create features from a core, and much more.",
      "target_audience": [
        "gamers",
        "developers",
        "programmers",
        "anyone interested in a career in the gaming industry"
      ]
    },
    {
      "title": "Unity 3D Game Development (2021) - From Beginners to Masters",
      "url": "https://www.udemy.com/course/unity-3d-game-development-beginners-to-masters/",
      "bio": "Learn Unity 3D Game Design & Development. Learn C# using Unity Engine. Create 2D and 3D Games for Web, Mobile, PC & Mac",
      "objectives": [
        "Learn the Fundamentals of Unity And Master the Unity Game Engine",
        "Start from Basics to Advance and create Mind Blowing Games",
        "Learn how to create Multiplayer Games using Photon PUN",
        "Learn C# Language from scratch. A powerful modern language.",
        "Create your own Unity 2D and Unity 3D games from Scratch using C# and Unity",
        "Learn your way around Unity 3D Game Engine",
        "Start your Own 3D Game Development Career",
        "How to Monetise your Games with Unity Ads"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Download and Installations"
        ],
        "C# Basics": [
          "Intro to Sections",
          "Variables",
          "Conditional statements",
          "Switch statements",
          "Loops",
          "Test yourself Quiz #1",
          "Functions",
          "Test yourself Quiz #2"
        ],
        "Fundamentals of Unity": [
          "Intro to Section",
          "Creating Sample Project",
          "Basics of UI",
          "Physics used in unity",
          "Test yourself Quiz #3"
        ],
        "First Game: Endless Arcade Game - Dimension-X": [
          "Intro to Section",
          "Collecting Assets",
          "Importing Assets",
          "Links to Assets",
          "Basic Level Setup",
          "Working Controls",
          "Track Algorithm",
          "Generate Random Obstacles",
          "Visual effects(vfx)",
          "Game Over Functionality",
          "Test yourself Quiz #4",
          "Main Menu",
          "Game Over Menu",
          "Polishing Game",
          "Test yourself Quiz #5"
        ],
        "Second Game: Hyper Casual Game - Wall Change": [
          "Intro to Section",
          "Understanding The concept",
          "Creating Player Controller",
          "Creating Algorithm for Endless World",
          "Generate Random Obstacles",
          "Game Over Functionality",
          "Particle System",
          "Main Menu",
          "Test yourself Quiz #6",
          "Game Over Menu",
          "Sound Effects",
          "Ads",
          "Build and Publish",
          "Test yourself Quiz #7"
        ],
        "Third Game: RPG Game - Day Of The Dead": [
          "Intro to Section",
          "Collecting Assets",
          "Understanding The concept",
          "Player Controller",
          "Player Animation",
          "Enemy Controller",
          "Player Attack System",
          "Enemy Attack System",
          "Player Enemy Death System",
          "Antidote System",
          "Test yourself Quiz #8"
        ],
        "Intro to Photon Pun": [
          "Intro to Photon Pun",
          "Why Multiplayer Games?"
        ],
        "Creating a Clone of Brawl Stars": [
          "Intro to Section",
          "Collecting and Importing Packages",
          "Understanding The concept",
          "Player Controller",
          "Main Menu",
          "Spawning Player Character",
          "Player Moment Synchronization",
          "Weapon Functionality",
          "Game Over Functionality and Polishing",
          "The Conclusion!"
        ]
      },
      "requirements": [
        "No prior programming or Unity experience is required.",
        "Just a PC or Mac with good Internet connection is required."
      ],
      "description": "Why Learn Game Development with Unity?\nThe gaming industry is a $100 billion industry worldwide. By the end of 2021, that number is expected to near $120 billion. With Unity being the most widely used engine to develop games across multiple platforms, there has never been a better time to get into the field. As you will learn, the types of games you can create with Unity and C# are limitless. Game development makes a great hobby, allowing you to learn a new skill and play your game with family and friends. It is also an exciting and rewarding career, where plenty of successful developers, including myself, have learned the fundamentals of game development through courses like this, and not in the traditional classroom setting. Every great game starts somewhere, so why not make it yours? While people often find coding or making games intimidating, this Unity course utilizes a unique teaching method which will allow you to gain a thorough understanding of concepts while you develop your own games. Thanks to the Unity community, you’ll be able to connect with other developers, work together on new projects, and make some incredible games!\n\n\nThe course is about creating games using unity game engine. You'll start learning how to create 3D games using unity game engine.\nIn this Unity course, you will:\nMaster Basics Concepts of C#  .\nLearning basic Functionality of unity.\nDetect collisions, receive user input, and create player movements\nImplement sound effects, background music, and particle effects\nLearn about Assets and Navigate the Unity Engine and discover unique features such as the Asset Store\nLearn and create 3 Interactive Games and also learn to create a clone of Brawl stars.\nAll That And Much More Is Awaiting For You In This Course!\n\nWhat if you are unsatisfied with the course?\nIf you are not satisfied with the course, you can apply for a refund within 30 days after your enrolment and You will receive full refund of your money - No Questions Asked!!\n\n\nSo, Don't wait any longer, Begin your Journey creating Amazing Unity Games.\nEnrol Today!!",
      "target_audience": [
        "This course is designed for Students who are Very Interested in Developing Games Professionally or as a Hobby",
        "People who want to learn how to make their own video games, learning to code as they go.",
        "Anyone who has a Game Idea and wants to learn how to Code that Game into Reality"
      ]
    },
    {
      "title": "Tic-Tac-Toe Clone - The Complete SFML C++ Game Course",
      "url": "https://www.udemy.com/course/tic-tac-toe-sfml/",
      "bio": "Ultimate SFML Game Development Course",
      "objectives": [
        "Use C++ To Make A Game",
        "Create A Cross Platform Game",
        "Create A Multi Device Game",
        "Use The SFML framework To Make A Game",
        "Understand Game Logic",
        "Understand How To Create An Adaptable Game Template",
        "Create An Extendable Game Engine",
        "Understand Tic-Tac-Toe Game Mechanics"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Project Setup": [
          "Project Setup On Windows",
          "Project Setup On Mac"
        ],
        "Game Engine Setup": [
          "State Machine",
          "Asset Manager",
          "Input Manager",
          "Game Loop"
        ],
        "State/Screen Creation": [
          "Splash State/Screen",
          "Main Menu State/Screen",
          "Game State/Screen",
          "Pause State/Screen",
          "Game Over State/Screen"
        ],
        "Game Logic": [
          "Grid Part 1 - Initialisation",
          "Grid Part 2 - Placing A Piece",
          "Grid Part 3 - Check For Win Condition",
          "AI",
          "Show Game Over Screen"
        ],
        "Extras & Going Forward": [
          "What To Do Next?"
        ],
        "Bonus Lecture: Discounted Courses": [
          "Bonus Lecture: Discounted Courses"
        ]
      },
      "requirements": [
        "C++ Programming",
        "SFML (optional)",
        "Coding",
        "Game Design (optional)",
        "Tic-Tac-Toe Game Logic (optional)"
      ],
      "description": "Learn how to make cross platform games using Tic-Tac-Toe as an example. A step by step process is used to show everything from project setup to essential game design techniques.\nGain a good understanding of the following concepts:\nC++ Game Programming\nVideo Game Logic\nSFML Game Programming\nGame Mechanics\nSFML is one of the easiest game frameworks in the world and will provide you with a solid foundation for your game development journey. The gaming industry is bigger than Hollywood and is constantly growing, start your journey now.\nYou will be provided with the full source code to aid in development during and after this course. The source code and artwork is free to use in as many projects as you wish.\n\n\nOver 205,000 students have enrolled on my courses and all of them are extremely satisfied. You will also be satisfied with this course. If you do not like the course, remember that within 30 days you can request a full refund. I guarantee you satisfaction.\nIf you have any questions regarding the topics covered in this course, please feel free to ask. I'm always happy to help those who want to learn.\n\n\nTo summarise this is what you get:\n• Lifetime access to HD quality videos. No monthly subscription. Learn at your own pace, whenever you want.\n• All videos are downloadable. Learn wherever you want, even without an internet connection!\n• Downloadable starter code and final code for each section.\n• Free helpful support in the course Q&A when you have questions or get stuck.\n• Multiple coding challenges to practice your new skills (solutions included).\nSounds great? Then start this adventure today by clicking the “Take this course\" button, and join me in the only course that you will need!",
      "target_audience": [
        "Suited for C++ Developers",
        "Suited for Budding Game Developers",
        "Fan of Tic-Tac-Toe",
        "Love Video Games & Relish The Prospect Of Making A Game"
      ]
    },
    {
      "title": "Blender Texture Painting: Create Stunning Stylised Models",
      "url": "https://www.udemy.com/course/blender-texture-painting/",
      "bio": "Become a Blender pro by mastering the impressive technique of texture painting.",
      "objectives": [
        "Basic modelling techniques for low poly texture painted assets",
        "Texture painting techniques for stone, rocks, wood, metal and grass",
        "Unwrapping techniques & texture painting setup",
        "Build a fun castle turret model & texture paint it",
        "Simplest techniques of texturing the most common materials",
        "Unwrapping and modelling low poly models"
      ],
      "course_content": {
        "Main Project": [
          "Blender Texture Painting Course Intro",
          "Community & Support",
          "Start Modelling The Tower",
          "Modelling Tower Stones",
          "Modelling Door & Ground",
          "Modelling Rocks & Pavers",
          "Marking Seams & Unwrapping",
          "Fix Unwrap Stretching",
          "Updates to Texture Painting in Blender 4.3",
          "Creating Our Texture",
          "Texture Painting Base Colours",
          "Painting A Rock",
          "Painting The Ground",
          "Painting Metal Material",
          "Painting Wood Material",
          "Painting Brick Material",
          "Painting Door Frame",
          "Painting Upper Blocks",
          "Painting Timelapse",
          "Blending Between Objects",
          "Creating The Final Look"
        ]
      },
      "requirements": [
        "A graphics tablet helps, but its not essential",
        "Basic knowledge of blender interface will help as we won't be going over this"
      ],
      "description": "Want to create stylised models in Blender that you can place in your games?\nLearn modelling techniques for hand painted objects, giving them a fun, quirky, stylised look.\nLearn how to unwrap and set up for texture painting. Find out how to quickly and easily create different textures for some of the most popular, such as wood, rock, grass, stone and metals.\nThe course is created at a \"real time\" pace, allowing you to follow along and create your models at the same time as the instructors without needing to stop and start the video. Nothing is skipped or speeded up, so you get to see the entire workflow.\nYou also get two, yes two, instructors! Working together, they discuss every step of the process. These valuable insights will be extremely useful for future projects you undertake.\nA basic knowledge of blender interface would be helpful. If you’re a game asset artist, or an artist wanting to make use of your skills to create 3D assets, this course is perfect for you!\nBy the end you’ll have built a fun castle turret model and texture painted it. And, with a bit of practice, you’ll be creating hand painted stylised models for your games or art in no time.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nGet plugged into our communities of amazing developers on Facebook (around 20k), in our own Community curated by our supportive and knowledgeable Teaching Assistants (17k views/day), and our student Discord chat group (10k live at any one time).\nBecome a Blender pro by mastering the super impressive technique of texture painting!",
      "target_audience": [
        "This course is idea if you're a game asset artist",
        "It's also perfect if you're an artist who wants to make 3d assets to make use of your artistic skills"
      ]
    },
    {
      "title": "Unity & C# - Build A Complete 2D Mobile Platformer Game",
      "url": "https://www.udemy.com/course/unity-2d-course-build-a-mobile-platformer-game-from-scratch/",
      "bio": "Learn How to Develop a Complete 2D Mobile Platformer Game in Unity C# From Start to Launch in Google Play Store",
      "objectives": [
        "Create a mobile platformer from scratch to launch in Google Play Store",
        "Easily monetize your game with AdMob banner and interstitial ads",
        "Master Sixteen Popular Platformer Game Mechanics like Background Parallax, Breakable Crates, Coin Pickup Effects and more",
        "Create an animated 2D game character with behaviors like left/right movement, jump, fire bullets, pickup coins, crush enemies, water splash and more",
        "Design/Update levels 10x faster using my Unity asset: Level Designer",
        "Implement Level Locking/Unlocking with awarded stars showing below level buttons in the Level Select Menu",
        "Create and work with Prefabs",
        "Use the components of Unity 2d Physics like Rigidbody2d",
        "Work with Colliders and Collision Detection",
        "Understand best practices of Level Design",
        "Create Your Own 2D Player Controller",
        "Easily create and work with a custom binary database file",
        "Program useful gameobjects like GameController, AdsController, DataController etc using Singleton pattern",
        "Program enemy characters with basic AI",
        "Create a challenging boss battle",
        "Build & test your game on an Android device",
        "Deploy your finished game to Google Play store",
        "Best practices of working within Unity editor and C# scripting",
        "Take practice quizzes after every section"
      ],
      "course_content": {
        "The Essential Intro": [
          "Intro To Unity: Compelling Reasons Why Unity is Here to Stay",
          "Step by Step: Downloading and Installing Unity",
          "Launching Unity & Creating New Project",
          "End of Section Quiz"
        ],
        "Building The Start Menu; The MUST DO Warmup For This Course": [
          "Import Assets For Section 2",
          "Download Sprites And Learn About Spritesheets",
          "Working with the Sprite Editor",
          "Cool Trick For Generating Game Title Images",
          "Add The Background And Learn To Copy Component Values",
          "Designing For Multiple Resolutions and Devices",
          "Sorting Layers and Order In Layer Property",
          "Adding The Buttons",
          "Adding Animations To Button Clicks",
          "Using Custom Fonts",
          "Adding Player Image & Game Title",
          "Scripting in C# - Part 1",
          "Scripting in C# - Part 2",
          "Export the Start Menu as a Package",
          "CLICK HERE TO DOWNLOAD GAME ASSETS FOR THE ENTIRE PROJECT",
          "Create a new project and import game assets and the package created earlier",
          "End of Section Quiz"
        ],
        "Level Design: Hard & Easy Way": [
          "Creating Prefabs: Ground Tile, Coin, Water Tile, Crates",
          "Manual Level Design - 1: Hard and Time Consuming",
          "Manual Level Design - 2",
          "Level Designer: The Easy Way of Designing 2D Levels",
          "Level Designer: Paint Mode",
          "Level Designer: Customizing Prefabs",
          "Paint Mode: Practice Missions",
          "Level Designer: Collider Mode - 1",
          "Level Designer: Collider Mode - 2",
          "Collider Mode: Practice Missions",
          "Level Designer: Selection Mode",
          "Selection Mode: Practice Missions",
          "End of Section Quiz"
        ],
        "Creating The Player Cat & Its Behaviors: Step By Step": [
          "Creating the Player Prefab With Idle Animation",
          "Creating Our First Script: PlayerCtrl",
          "Making the Player Move",
          "Making The Player Jump",
          "Flipping The Player",
          "Adding More Animations for the Player",
          "Setting Up The Animation Controller",
          "Configuring Cat's Animator Controller",
          "Controlling Animations via Scripting",
          "Single Jump",
          "Double Jump",
          "Player Sticks To The Wall Solution",
          "How To Disable Player Rotation",
          "Make the Camera Follow The Player",
          "Make The Player Fire Bullets",
          "CHALLENGE MISSION: Create the Player Dog From Scratch",
          "SOLUTION: Create Player Dog From Scratch",
          "End of Section Quiz"
        ],
        "Building Mobile Buttons and Controller": [
          "Create Mobile Buttons For Controlling Player Behavior",
          "Create A Mobile UI Controller",
          "Scripting The Left & Right Buttons",
          "Scripting The Jump and Fire Buttons",
          "End of Section Quiz"
        ],
        "Level Design Deep Dive: Completing Level One": [
          "Six Useful Techniques For Designing Level One",
          "Level Design: Part 2",
          "Level Design: Part 3",
          "Level Design: Part 4",
          "End of Section Quiz"
        ],
        "Sixteen Game Mechanics You Should Know": [
          "Simple Coins Pickup",
          "SFX Controller: Professional Way To Show Particle Effects",
          "Sparkle Effect When Coins Are Collected",
          "Toggle SFX From Inspector",
          "Improving SFXCtrl",
          "Spinning Coins Effect",
          "Bullet Powerup",
          "Dust Particle Effect When Player Lands",
          "Breakable Crates - Basic Setup",
          "Breakable Crates - Scripting",
          "Game Controller: An Important Aspect Of Your Game",
          "Making a Garbage Collector",
          "Reloading Level When Player Dies",
          "Splash Effect When Player Falls in Water",
          "Dropping Platforms",
          "Moving Platforms",
          "Scrolling Background aka Parallax - Setup",
          "Scrolling Background aka Parallax - Scripting",
          "End of Section Quiz"
        ],
        "Creating The Heads Up Display": [
          "Creating The Heads Up Display (HUD)",
          "Saving Data Using Custom Binary File",
          "Showing Number of Coins Collected",
          "Showing The Score",
          "Making Coins Fly to Coin Meter When Collected",
          "Updating The Level Keys",
          "Adding Countdown Timer",
          "Managing Gameplay Based On Player Lives",
          "End of Section Quiz"
        ],
        "Player Fights Artificially Intelligent Enemies": [
          "Enemy 1: Green Monster",
          "Enemy AI: Linear Movement",
          "Player Dies on Enemy Collision",
          "Shooting the Enemies",
          "Player Jumps on Enemy Head",
          "Enemy AI: Basic Patrolling",
          "Enemy 2: Patrolling Spider",
          "Importing DoTween For Easy Animations",
          "Enemy 3: Bomber Bees",
          "Enemy 4: Jumping Fish",
          "End of Section Quiz"
        ],
        "Adding Sound and Music": [
          "Setting Up The Audio Controller",
          "Player Sound Effects - 1",
          "Player Sound Effects - 2",
          "Background Music",
          "End of Section Quiz"
        ]
      },
      "requirements": [
        "Unity version 5.6 and above (compatible with Unity 2017+ and 2018+)",
        "Beginner level experience working with Unity",
        "Some programming experience with C# or a similar high level programming language"
      ],
      "description": "Welcome To Unity & C# - Complete 2D Mobile Platformer Game Development Course! (Compatible with Unity 2018+)\n\n\nHere's What Students Are Saying:\n\"I am enjoying the course, it is one of the best on Unity I have seen, Everything is explained well and the game being built seems fully featured, other tutorials often leave stuff out that you would probably like to see how to do. I would recommend this for beginners and those with some experience with Unity and C#\"\n\n\n\"I have only just finished section 2 of the course but it is already FAR better than any other Unity course or tutorial I have found (and I did a lot of looking)! This has been a great experience so far. I feel like I will finally be able to learn the skills needed to fulfill my dream of designing and building a genuine Unity mobile game that I can actually publish. Thanks for the great course! Update: Just wanted to add how impressed I am with the speed and detail of the instructor's responses to my questions. I had some issues (totally my fault) getting things working and even after we got them resolved, Sonny made sure to respond with detailed explanations with photos to make sure I understood why the issues occurred and how the solutions actually worked. Honestly I could not be any happier with the quality of this course and its instructor. It is seriously so good!\"\n\n\n\"This course was very great, it has a lot of small challenges to get you to use some of the features you have just learned. It is very detailed and the entire game is build very professionally with very good order and small but important details. Well-worth the price, and this will take you from beginner to pro, in no time. Just imagine being able to familiarize yourself with every single step of the way from idea to final game and how to have that very same game ONLINE on the Google Play Store in just a day's worth (just short of 20 hours) of lectures. Nothing less than incredible\"\nHow Can This Course Help YOU?\nAre you looking for a Unity 2d course that shows you WHAT steps to take and also explains the HOW & WHY behind each step?\nDo you feel that existing Unity tutorials don't contain the right content to help you with your goals?\nAre you looking to learn how to monetize your mobile games in Unity?\nAre you searching for a simple and easy to understand course which shows you how to build a mobile platformer game, step by step?\nDo the terms sprites and sprite sheets confuse you?\nDo you feel lost when it comes to C# scripting?\nAre you baffled by the process of building mobile games in Unity which look good on different screens and resolutions?\nAre Unity 2d concepts hard for you to understand?\nIf you answered yes to any of these questions then i have good news! Take this course and see for yourself that all of this is actually easy.\n\nA few years ago i was just like you, having problems with creating 2d stuff in Unity and looking for tutorials on YouTube, trying to get my head around seemingly hard concepts. None could help me get to a level where i could just start making 2d games with minimum effort. Sprite sheets, Sprite Editor, Canvas, Buttons, C# Scripting, Game Menus all seemed a bit out of reach. But i persisted.\n\n\nI've built numerous mobile games for clients as well as my own projects. I realized that this stuff was not difficult but there was not much documentation or ample video tutorials to explain things in an easy to understand manner. Right then i decided i will make an effort and share what i'd learned with others and the idea of AbleGamesDev was born.\nWaste no time and join this course and see for yourself. I'll see you inside!\nAfter Taking This Course:\nyou will learn the complete workflow of developing a 2d mobile game with Unity and C#\nyou will be able to double your Unity 2d level design speed\nyou will be able to create 2d characters and animate them\nwrite scripts in C# to create popular game-play mechanics\nlearn and implement 16 awesome game mechanics for your Unity mobile platformer game\nlearn how to use AdMob ads strategically to monetize your game while providing a good user experience\nlearn how to create self destructing AdMob banner ads\nlearn how to create level select menu and show stars awarded for each level\nlearn to use binary files for storing and managing game data\nlearn the step by step process of packaging your game for Android\nyou will know how to launch your completed game to Google Play Store through Google Play Developer Console\nyou will learn tips and tricks and best practices to become better with Unity and C# scripting!\n\nDon't just take my word for it, See What Students Are Saying:\n\"This course is fantastic! Not only does it teach a lot of important Unity features, coding and game design concepts but it also challenges you to think for yourself and do problem solving. The teacher Sonny is very pedagogical and inspires you to be creative.\"\n\"This was an excellent course. Sonny does a great job of clearly explaining everything he does. I'm a beginner to Unity & C# and this course was perfect for me - I learned a ton. Sonny also is very quick to respond to any questions or requests for help. I strongly recommend this course and will definitely look for other Unity courses that Sonny teaches.\"\n\"Really good course for anyone who wants to learn making games in Unity because it covers whole Unity Game Engine pretty well. Congratz on Course and Ty.\"\n\"Most useful course for the beginners who are new to Unity and for the people who aspire to become a Gamedev. And most importantly, the Instructor(Sonny) is so helpful in clarifying your doubts then and there.\"\n\"I am midway the course and the content is very engaging, the tutor is very easy to follow and detailed for you to understand why, and what he is doing and talking about. The material covered is really interesting and a good head start to understand how things work inside unity. It also gives you a good starting point to create something on your own by applying all the techniques with your own art. Questions are answered really fast with deep explanation. Thank you for this great course\"\nIf You Feel Courses Don't Explain The WHY Behind The Steps, See What Students Are Saying:\n\n\"The quality of the videos are great, he walks you through everything and tells you the who, what , when, where, and why you do things and the best practices so that you can become a great developer.\"\n\n\"This is the best Unity course I've ever taken. It is a complete course, very well explained. The instructor is exceptional, answers all questions in a short period of time. This course was the best choice.\"\n\n\n\"This course is amazing. I am currently a game development student in college and i only have a background in visual coding in unreal engine 4, i do not know how to use unity or how to write with c#. This course is amazing because it goes through how to use the unity engine step by step and is very beginner friendly for c# coding.\"\n\"This course is amazing for someone new to 2D game development. The instructor guides you through each process in an easy to understand manner and the course is packed with new approaches to workflow within unity. I would highly recommend this course to someone wanting to develop 2D games and learn new processes in unity. This is one of the best game design courses I have taken so far on Udemy.\"\n\n\nHowever, your requirements maybe different. Only way to find out is to enroll in this course. See for yourself.\nThis course comes with a 30 days money back guarantee.\nHope to see you in this course and get you started on your mobile game dev journey!\nCheers,\nSonny (AbleAppsDev)",
      "target_audience": [
        "Someone looking to create and launch a mobile game to Google Play store",
        "Some programming experience with C# or a similar high level programming language",
        "Suitable for both beginner and intermediate level",
        "Someone with a burning desire to learn and grow in the field of games development"
      ]
    },
    {
      "title": "Create a 3D RPG Game With THREE.js",
      "url": "https://www.udemy.com/course/create-a-3d-rpg-game-with-threejs/",
      "bio": "Use THREE.js to create a stunning WebGL 3D game that will run in all modern browsers, including mobile devices.",
      "objectives": [
        "Create 3D games that will run in a browser",
        "Understand how to control a character allowing the user to guide them around a large environment",
        "Learn to load complex external 3D assets that contain animations.",
        "Apply animations to a skinned mesh.",
        "Use simplified geometry to contain the user character within the environment."
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the course",
          "JavaScript in 12 Easy Lessons - e-book",
          "The ThreeJS Primer - FREE e-book",
          "What are you going to learn",
          "Setting up a simple web server",
          "3D basics",
          "Introducing THREE.js",
          "What have you learned?"
        ],
        "Creating 3D assets": [
          "Finding environment assets to use in your game",
          "Using Mixamo characters and animations",
          "An overview of Blender",
          "3D formats",
          "Editing your assets"
        ],
        "Loading your assets": [
          "Creating a Preloader",
          "The THREE.js Animation system",
          "Using the FBXLoader class",
          "Using the PreLoader class"
        ],
        "Character Animation": [
          "Creating an onscreen joystick",
          "Switching animations dynamically",
          "Check your knowledge"
        ],
        "Moving around your environment": [
          "Changing camera angle",
          "Using the Raycaster class to avoid walking through the environment",
          "Loading the environment",
          "Creating a simplified version of your environment",
          "Check your knowledge"
        ],
        "Interacting with the environment": [
          "Using proximity testing for custom actions",
          "Adding cut scenes",
          "Adding custom animations using a Tween class",
          "Use the Tween class to change a Vector3 x value from 1 to 100"
        ],
        "Adding Sound to your game": [
          "The SFX class",
          "Adjust volume using proximity",
          "Use the SFX class to load sound file"
        ],
        "Pathfinding": [
          "Creating a NavMesh",
          "Using a NavMesh"
        ],
        "Conclusion": [
          "What you've learned",
          "Three.JS with NPM and Vite",
          "More ideas for THREE.js games",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You need to be keen to learn to code your own 3D games.",
        "We’ll be using Brackets as the text editor. But feel free to use your preferred editor if you like to use a different one.",
        "Some knowledge of JavaScript will help.",
        "Game will run in a browser, but you need to use a web server. Setting this up simply is described in section 1."
      ],
      "description": "Creating 3D games is fun. In this course you will learn quickly to create a stunning game. The author has won many awards for his 3D browser based games and he will take you through all the skills you need to create games of your own using the amazing THREE.js library.\nTHREE.js makes creating WebGL games much easier. You will not need to worry about how to write complex shaders. Instead the shaders will load from the assets you create in Blender.\nYou’ll learn\nTo setup your development environment .\nHow to export 3D assets from Blender, including animation.\nWhere to source great 3D assets that you can use in your own games.\nThe basics of setting up a THREE.js camera, scene and renderer.\nAdding a pre-loader.\nUsing the FBXLoader class.\nTo master the art of blending animations.\nUse a custom onscreen JoyStick class you can easily add to your own games so that desktop and mobile users get the same experience.\nHow to smoothly switch camera angles.\nHow to use simplified geometry to lock your character to the environment.\nHow to add cut-scenes.\nHow to add Sound to your games that responds to the current camera location.\nIt is exciting and fun and in around 2 hours you will have acquired the skills to create your own games.\n\n\nStudent reviews:\n\"This course is really awesome ! I enjoyed every second of this learning experience. Thanks to Nicholas Lever ( all the respects ) I can't wait for the next course using cannon.js !\"\n\"This is the most exciting class I've taken on Udemy since joining 7 years ago! The instructor gives examples that he made personally, explains all of the coding thoroughly, and shows you vast libraries to source pre-made objects, characters, and worlds... what more could you ask for!?!\"",
      "target_audience": [
        "You want to learn to create 3D games that will run in a modern browser, even on mobile devices.",
        "You want to learn the skills quickly.",
        "You want to focus on a game that has a central in-vision character.",
        "You want to learn to control 3D assets with code."
      ]
    },
    {
      "title": "Unreal Engine 4: How to Develop Your First Two Games",
      "url": "https://www.udemy.com/course/unreale4/",
      "bio": "Epic Games-Approved: learn the Unreal Editor, master the gameplay framework, and use Blueprint to program without coding",
      "objectives": [
        "By the time you complete the course, you will have a holistic understanding of the utility of the engine. You will start your project with confidence and a strong awareness of how Unreal Engine 4 can work for you to build an interactive experience that meets your interests/needs."
      ],
      "course_content": {},
      "requirements": [
        "A desire to build interactive experiences by leveraging Unreal Engine 4.",
        "Have some basic computer skills; know how to install software and explore a new application with curiosity."
      ],
      "description": "Approved by Epic Games and taught by Unreal Engine Evangelist Chris Murphy, this course is for any developer wishing to work in Unreal Engine for creating interactive experiences and/or enterprise fields of real time training simulation, visualization, and media/entertainment. Create realistic games with the complete game development tool -  Unreal Engine 4. Start with the fundamentals so that you build a solid base understanding.\nKnow the basics of how to operate a computer? Maybe a little bit of game design or coding experience? Visual arts designer? You are ready! Learn step by step by creating 3 unique projects. Chris teaches through demonstrations so you will be applying real skills in each lecture.\nGet a complete introduction to core competency with the editor, learn how the engine works and how it works to help make your project run efficiently, how to use assets to customize your project, design and create interactivity, and have the tools and strategies to debug an error.\nBy the end of this course you can design and create working projects that could include games, architectural visualization, training simulations, and media entertainment. Plus, you will be aware of the tools and techniques that you need to focus on your area of interest.",
      "target_audience": [
        "You have an idea for an interactive experience - whether it is a game, a training simulation, a media/entertainment dream you want to bring to life, or art visualization.",
        "You are curious about what Unreal Engine offers and how it can serve your interests and needs. You might have tried learning by following online tutorials or reading the documentation but it just didn't work. You want to learn through a step by step project-based learning experience."
      ]
    },
    {
      "title": "Creating Kid's Games with Construct 2",
      "url": "https://www.udemy.com/course/construct2kidsgames/",
      "bio": "A beginner's course to Construct 2 where you'll create interactive kid's games for web browsers and mobile devices.",
      "objectives": [
        "Create interactive kids games without code.",
        "Use Construct 2 software.",
        "Understand how games are created."
      ],
      "course_content": {
        "Introduction & Set Up": [
          "Introduction",
          "Downloading Software",
          "Setting Up"
        ],
        "Building the First Game": [
          "Title Screen",
          "Setting Up Shapes Game",
          "Shapes Game - Drag and Drop",
          "Shapes Game - Finish",
          "Music"
        ],
        "Letters Game": [
          "Setting Up Letters Game",
          "Letters Game - Finish"
        ],
        "Numbers Game": [
          "Setting Up Numbers Game",
          "Numbers Game Part 1",
          "Numbers Game Part 2",
          "Numbers Game Part 3"
        ],
        "Finishing Touches & Publishing": [
          "Touch to Enlarge Buttons",
          "Publishing Your Game"
        ]
      },
      "requirements": [
        "Computer running Windows XP or newer or Macintosh running Windows simulator",
        "Construct 2 - Free version or Paid version",
        "Desire to make games without code!"
      ],
      "description": "Have you ever had an idea for a kid's game, but didn't know how to get started making it? Would you like to make web and mobile games, but don't want to learn a programming language? Well, you've come to the right place!\nIn this video course you'll learn how to:\nCreate 3 games for kids without writing code\nUse Construct 2 software (FREE!)\nPublish your game to be played on computers and mobile devices\nGo from complete beginner to game developer\nHere's what you'll get:\nOver 2 hours of video tutorials\nAll source files of the games\nArtwork, sound effects and music needed to create 3 games",
      "target_audience": [
        "This Construct 2 course is for beginners who want to make kid's games that will work in web browsers on computers and touchscreen devices such as smartphones and tablets without writing code."
      ]
    },
    {
      "title": "Learn To Create A Racing Game With Unity & C#",
      "url": "https://www.udemy.com/course/unity-racer/",
      "bio": "Game development made easy. Learn C# with Unity and create your very own racing game.",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Understand the capabilities of 3D development in Unity.",
        "Develop strong and transferrable problem solving skills.",
        "Gain an understanding of the game development process.",
        "Learn how object oriented programming works in practice."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Introduction",
          "Introduction to The Unity Interface",
          "Project Asset Package",
          "Importing Assets & Setting Up A Scene"
        ],
        "Driving": [
          "Setting Up Our Car",
          "First Script Basics",
          "Making The Car Move",
          "Controlling Acceleration",
          "Managing Our Cars Forces",
          "Steering The Car",
          "Better Steering",
          "Setting Our Maximum Speed",
          "Limiting Air Control",
          "Pushing To The Ground",
          "Rotating To Ramps",
          "Turning Wheels",
          "Leaving A Trail",
          "Controlling The Trail",
          "Stopping Dust"
        ],
        "Camera Control": [
          "Setting Up A Follow Cam",
          "Smoothing Movement",
          "Top-Down Camera",
          "Switching Cameras"
        ],
        "Sound": [
          "Engine Sounds",
          "Sound Sources",
          "Impact Sounds",
          "Improving The Impact Sound",
          "CHALLENGE - ADD SKID SOUND"
        ],
        "Making Laps!": [
          "Setting Up Simple Test Track",
          "Setting Up Checkpoints",
          "Hitting Checkpoints",
          "Completing A Lap",
          "Prefabs - Applying To A Real Track"
        ],
        "Showing UI": [
          "Setting Up UI",
          "Updating Lap Counters",
          "Displaying Lap Times",
          "Fixing Camera Start Position"
        ],
        "AI Racing": [
          "Setting Up AI Cars",
          "How The AI Will Work",
          "Setting Targets",
          "Making The AI Move",
          "Preventing AI Getting Stuck In Loops",
          "Randomising AI Speed",
          "Fixing AI Not Turning Bug"
        ],
        "Race Management": [
          "Tracking Player Position",
          "CHALLENGE - SHOW PLAYER POSITION ON UI",
          "Adding Rubber Banding",
          "Race Start Countdown",
          "Resetting To Track",
          "Limiting Reset Times",
          "CHALLENGE - MAKING MORE CARS"
        ],
        "Starting & Finishing The Race": [
          "Starting The Player At Different Positions",
          "Spawning Random AI Cars",
          "Ending The Race",
          "Laying Out Race Results",
          "Updating Race Results"
        ],
        "Making Menus": [
          "Setting Up Main Menu",
          "Adding A Background Effect To The Menu",
          "Creating A Pause Menu",
          "Carrying Race Information Between Scenes",
          "Starting Race Using Carried Information",
          "CHALLENGE - MAKING MORE TRACKS"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2019.4 or newer"
      ],
      "description": "Learn how to create your very own racing game using Unity, an industry-standard program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\nA car controller giving you full arcade-style action\nA full race AI system to challenge your players\nUnlocking tracks over time\nDifferent types of cars to race against\nFull Track and car selection systems\nManaging Audio Systems\nDesigning complete custom tracks\nFull user Interface with interactive menus\nAnd more...!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "People who want to create and publish their own games.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industy.",
        "Competent and confident with using a computer.",
        "Anyone who wants to make games."
      ]
    },
    {
      "title": "Learn To Code By Making Games in Python",
      "url": "https://www.udemy.com/course/learn-to-code-by-making-games-in-python/",
      "bio": "Make complete Mario Games and Space Adventure. Learn Python and create your very own 2D Platformer.",
      "objectives": [
        "Learn Python, most paid and used programming language of 2024",
        "Understand the basic and advanced game programming with Python and Pygame",
        "Learn how object oriented programming works in practice.",
        "Learn Python by creating two major games: Mario and Adventure Game",
        "Learn how to make best GUI games with Python"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Introduction to the course"
        ],
        "Getting Started": [
          "What is Python?",
          "Download Python on your machine",
          "Download Visual Studio Code (Must for this course)",
          "Note for the course!",
          "How to get most out of this course?"
        ],
        "Quiz Before Learning Python: Check your programming background": [
          "Before Learning Python",
          "Research about Python before learning about Python"
        ],
        "Data types in Python": [
          "Introduction to the data types",
          "Basic Arithmetic in Python",
          "Operations on Numbers",
          "Introduction to Strings in Python",
          "Access elements of String",
          "Strings methods",
          "More strings methods",
          "Formatting strings",
          "Quiz on Data Types",
          "Assignment on Data Types",
          "Coding Assignment"
        ],
        "Variables in Python": [
          "Introduction to the variables",
          "Create Variables in Python",
          "Proper way to name a variable",
          "Quiz on Variables"
        ],
        "Learn Boolean for Game Development": [
          "Introduction to Booleans in Python",
          "Booleans as numeric",
          "Learn to create conditions",
          "Order comparisons",
          "Code examples for Order Comparisons",
          "\"is\" operator in Python",
          "Logical statements",
          "Quiz on Booleans statements"
        ],
        "Conditionals for Game Making": [
          "Introduction to conditional statements",
          "if else statements"
        ],
        "Data structures for Game development": [
          "Introduction to Data Structures",
          "Checking type of Data Structures",
          "How to access the items from the list?",
          "Learn list built-in methods",
          "List built-in methods continued!"
        ],
        "Learn Loops for making games": [
          "Introduction to the loops in Python",
          "Infinite while loop (Game Loop)",
          "Finite Game Loop",
          "For loop",
          "Important: List Comprehension for Game Development"
        ],
        "Learn Functions to make Games": [
          "What is Function and Why we need it?",
          "Learn to create Functions?",
          "Learn about return statements",
          "Learn about default arguments in Python"
        ]
      },
      "requirements": [
        "Mac or PC with any OS (MacOSx, Linux, Windows) running",
        "No programming experiences required",
        "Proper internet connection"
      ],
      "description": "Have you ever wanted to build a games with a graphical interface but didn't know how to?\nMay be you even know how to create tools on a command line but have no idea how to convert it into a graphical interface that people can click on. In this course we will be learning Python GUI Programming + other advanced python modules to build graphical user interfaces (GUI) and games from scratch.\nGames You will make throughout course:\nComplete Mario Game\nSpace Adventure (2D platform Game)\n\nWe will learn from basics of Python i.e. variables, slicing, string, some module, arithmetic and logical operations, looping, functions, object oriented programming.\nAfter that we will learn the basics and advanced stuff of Game Development with pygame:\nA main character with its movement\nCollectibles such as coins, extra lives & extra health\nDifferent types of enemies to combat\nDangers such as Spikes, Saws & moving platforms\nUser Interface with interactive menus\nThis course is for you if you want to:\n- build the skills you need to get your first Python programming jobs/game developer jobs\n- learn basic to advance programming paradigm\n- get started with some domain of Python such as Machine Learning, Artificial Intelligence, Cryptography and so on\n- Learn as a self taught programmer who want to freelance\n…then you need a solid foundation in Python programming. And this course is designed to give you those core skills, fast.\nThis course is aimed at complete beginners who have never programmed before, as well as existing programmers who want to increase their career options by learning Python.\n--------------------------------------------------------------------------------------------------------------------------------------------------------------\nFAQ's|| Must Read before Enrolling:\nIs Python A Good First Programming Language To Learn?\nEven though it has not yet been adopted as a first language by many computer science programs, Python is widely seen by industry experts as a great first programming language when learning to code and its extensive use in SpaceX to automate and handle technologies to launch rockets, Instagram, Google to support their backends and Many companies to support and execute ML and Deep Learning Algorithms; Its undoubtedly No.1 Programming Language to learn.\nFor starters, the syntax of Python is simpler than that of most other major programming languages, with fewer exceptions and special cases. It also tends to use plain English keywords in place of the system of punctuation that has to be memorized in other languages, making it easier to learn to code. Given these conventions, Python code tends to appear as less of a \"jumble\" to newcomers than it does in comparable languages.\nAnother great feature of Python is the ubiquity of its use. While Python is optimized for development on Linux and Unix systems, interpreters are available for just about every major operating system. All implementations of Python are supported by an excellent standard library, which means that new students can very quickly move on to creating actual functional programs that are useful. Additionally, the standard implementation of Python, CPython, is free and open-source.\nWhat Type Of Jobs Are Available To Python Programmers?\nIn the job market, if you observe the trends; Python is often looked like a strong language to support some primary language that is more broadly used like C or Java. But Lately, with the evolution of ML and Deep Learning Algorithms; it is highly demanded skill to have in 2020 and later. There are a variety of jobs that one can get focusing exclusively on Python development, however. Many of these jobs will be in building and improving the internal tools that a company uses to create its finished marketable products, rather than working on the finished product itself.\nOne specific economic sector where the presence of Python programming is particularly strong is the geospatial industry. This is a critical industry that deals with navigational tools such as GPS, radar, and light measurements.\nIf you're interested in web applications, Python is a better choice for development (working with the back-end or server-side) rather than design (creating the actually finished front-end that site visitors interact with). As mentioned previously, Google employed Python for many components of its search engine, and it is quite widely used in the data mining industry.\nFinally, Python can also be used for game development. Some famous examples of games developed either entirely or in large part with Python include EVE Online, Civilization IV, the Battlefield game series, and the Mount & Blade games. The popular development environment Blender is written in Python.\nReady to get started, My PYTHON PROGRAMMER Friend?\nEnroll now using the “Add to Cart” button on the right, and get started on your way to creative, advanced Python brilliance. Or, take this course for a free spin using the preview feature, so you know you’re 100% certain this course is for you.\nSee you in the class!\nJust give it a try, you won't regret!!",
      "target_audience": [
        "Anyone who wants to develop games but doesn't have any programming skills",
        "Anyone who wants to learn Python Programming by making games",
        "Anyone who wants to make their own 2D game.",
        "People interested in working in the game design industy.",
        "Developers who want to re-skill across to game development."
      ]
    },
    {
      "title": "How to Create a Platformer with a Story - GameMaker Studio 2",
      "url": "https://www.udemy.com/course/platformer/",
      "bio": "Learn to build a platformer using GameMaker Language, while growing as a programmer!",
      "objectives": [
        "Build a platformer with tile collisions",
        "Use finite state machines for input & AI",
        "Use surfaces & data structures",
        "Use marketplace assets to speed up development"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Important Notice About Reviews"
        ],
        "Game Essentials": [
          "Section Intro",
          "Update: Script Changes in GMS 2.3+",
          "Platformer Movement & Tile Collisions",
          "Camera & Animation",
          "Attack State",
          "Enemy AI",
          "Enemy Knockback & Death",
          "Fix: Enemy Falling",
          "Lives & GUI",
          "Player Hurt & Dead States",
          "Coins & GUI",
          "Sounds & Music"
        ],
        "Building The Game Further": [
          "Section Intro",
          "NPCs & Messages",
          "More Levels",
          "Debug: Score & Lives Reset",
          "Platform, Detail & Water Tiles",
          "Inventory Using DS List",
          "Inventory GUI & Pause",
          "Pause Surface",
          "Boss",
          "Locked Path",
          "Boss Music",
          "Main Menu",
          "Text Intro",
          "Saving & Loading",
          "Parallax Background"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "You need GameMaker Studio 2.",
        "Having basic GML knowledge is recommended but not required."
      ],
      "description": "The Course\nWelcome! This course is about creating a platformer in GameMaker Studio 2, using GameMaker Language (GML) coding.\nIt covers many topics, from platforming with tile collisions and finite state machines to data structures and surfaces. Using the skills learned in this course, you can build a complete platformer with your own story!\nNot only that, but the knowledge you gain through my lectures will benefit you in making any kind of game, no matter the genre!\nGameMaker Studio 2\nGameMaker Studio 2 is an amazing 2D game engine, made by YoYo Games. It is easy and effective to start with, and great to work with bigger & advanced projects.\nAbout Me\nI have been with GameMaker for a long time, and I love making games. But more than that, I love teaching others how to do so. I have been an instructor on Udemy for 2 years. I also have a website (GameDev Palace) and a YouTube channel (GameMakerStation). My courses have a 4.5+ star rating.\nBonus\nWith this course, you also get a free link to my pop-up textbox asset, which is a paid asset on the GameMaker Marketplace. In the course, I also show you how to use it. It can prove very useful while making games!\nSo, check out the trailer and the preview lectures to see if this course is for you.\nSee you in the course!",
      "target_audience": [
        "Anyone new to GameMaker",
        "Anyone who wants to learn how a platformer is made in GameMaker",
        "Any user with basic GML knowledge"
      ]
    },
    {
      "title": "Unreal Engine 4 Game Develop: Battle Royale with Blueprint",
      "url": "https://www.udemy.com/course/ue4blueprintbattleroyale/",
      "bio": "This course will create a Battle Royale type shooter based on a PUBG game.",
      "objectives": [
        "Create a shooting game.",
        "Develop using Unreal Engine 4.",
        "Learn to program using blueprints.",
        "Learn how to build a quality set of blueprint object frameworks.",
        "Learn how to create complex UI's.",
        "No programming experience at all is required to learn this course.",
        "Those who already have experience in game development will further enhance their development skills."
      ],
      "course_content": {
        "Preparatory Work": [
          "Content introduction",
          "Engine Download & Installation",
          "Resource Download",
          "Create Project",
          "Resources"
        ],
        "Basic Knowledge": [
          "Editor interface",
          "Play the Game",
          "Important Element",
          "Gameplay Framework"
        ],
        "Project Setting": [
          "Gameplay framework build",
          "Input Settings explained",
          "Setting input keys",
          "Setting Near Clip Plane"
        ],
        "Animation BlendSpace": [
          "Animation BlendSpace explanation",
          "Unarmed Standing Moving BlendSpace",
          "Unarmed Crouching Moving BlendSpace",
          "Unarmed Prone Moving BlendSpace",
          "Armed Standing Moving BlendSpace",
          "Armed Crouching Moving BlendSpace",
          "Armed Prone Moving BlendSpace",
          "Armed Standing Aiming Moving BlendSpace",
          "Armed Crouching Aiming Moving BlendSpace",
          "Parachute BlendSpace"
        ],
        "Animation AimOffset": [
          "AimOffset Explained",
          "Unarmed Standing AimOffset",
          "Unarmed Crouch AimOffset",
          "Armed Standing AimOffset",
          "Armed Standing Aiming AimOffset",
          "Armed Crouching AimOffset",
          "Armed Crouching Aiming AimOffset"
        ],
        "Animation Blueprint": [
          "AnimBlueprint Explained",
          "Creating Character state variables",
          "State Machine: Unarmed",
          "State Machine: Armed",
          "State Machine: Armed to Unarmed",
          "State Machine: Aiming",
          "State Machine: Skydive",
          "State Machine: Jump",
          "State Machine: Death",
          "AnimGraph: Logic Production",
          "AnimGraph: Testing",
          "Event Graph: Creating Variables in Character",
          "Event Graph: Set direct access variables",
          "Event Graph: Calculation of relevant variables",
          "Event Graph: Set AimOffset variables"
        ],
        "Animation Montage": [
          "Animation Montage Explained",
          "Equip animation montage",
          "Take back animation montage",
          "Magazine & Bullet Change animation montage",
          "Shooting related animation montage",
          "Using an Object related animation montage"
        ],
        "Character Base Functionality": [
          "Setting up character default components",
          "Create Camera",
          "Mouse Control Function",
          "Character Movement: Basic functionality",
          "Character Movement: Velocity smoothing",
          "Mouse view: Free view",
          "Mouse view: Adapted character movement",
          "Pose switch: Switching functions",
          "Pose switch: Switch limit",
          "Mouse view: Pitch Angle Limit",
          "Pose switch: Affects camera position",
          "Movement speed: Different movement speeds",
          "Movement speed: Posture affects movement speed",
          "Movement speed: Movement speed test"
        ],
        "Character Fashion": [
          "Creating sub-skeletal models",
          "Preparation of Datas",
          "Replace skeletal models",
          "Special logic for bodysuits",
          "Skin Mask",
          "Default underwear wear"
        ],
        "Making DataTables": [
          "Making Weapons DataTable",
          "Making Ammo DataTable",
          "Making Weapons Accessories DataTable",
          "Making Equipment DataTable",
          "Making Health DataTables"
        ]
      },
      "requirements": [
        "There is normal logic to the mind.",
        "You can run Unreal Engine."
      ],
      "description": "Hi everyone, I'm Big Cat.\n\n\nAbout the Content\nThis course is a complete set of tutorials for the Battle Royale type of game. The features are so huge that they were not shown in the promo video to show all the features. For example, the bullets fired all have a downward effect and reduce the flight speed based on the distance. All features are made as detailed as possible.\nThe course is now fully completed, and you can view the course outline to learn all the contents of this set of courses.\n\n\nAbout Blueprint\nAll content in this set of courses is implemented using blueprints. You'll see a set of blueprint projects with a clear structure and clean nodes, and it's time to really understand the greatness of blueprints.\nIf you develop in C++ at work, this won't stop you from watching my course in the slightest. Because every function in a blueprint can be found in C++, learning blueprints can still help you with your C++ development.\n\n\nWrite at the end\nI did all the work on this course by myself, including blueprint development, lecture writing, video recording, audio recording, captioning, video editing, and even the Green-Screen technology at the beginning of the promo. Every detail was tweaked over and over again to give you as perfect an experience as possible. It's tough to produce a go-to course. I know there are still many things I didn't get right, like my English accent, and I hope you can understand more. Of course, you can contact me if you have any questions, comments, or suggestions, and I'll get back to you as soon as I see them.\n\n\nI'm Big Cat.\n\n\n\n\nFull Course List\nSection1: Preparatory Work (4 lessons)\nDownload and install the Unreal Engine.\nCreate game projects and import resources.\nSection2: Basic Knowledge (4 lessons)\nA basic understanding of the Unreal Engine.\nSection3: Project Setting (4 lessons)\nGameplay framework build.\nComplete the input settings.\nSection4: Animation BlendSpace (10 lessons)\nLearn what Animation BlendSpace is.\nCreate animated BlendSpace with characters standing, crouching, prone, aiming, and parachuting.\nSection5: Animation AimOffset (7 lessons)\nLearn what Animation AimOffset is.\nCreate animated offset aiming for characters standing, crouching, prone, and aiming.\nSection6: Animation Blueprint (15 lessons)\nLearn what Animation Blueprint is.\nMake character animation state machines that contain all the states of the characters.\nLearn to use an animation graph.\nProduce logic functions related to animation.\nSection7: Animation Montage (6 lessons)\nLearn what Animation Montage is.\nCreate an animated montage of equipment and take-back weapons.\nCreate an animated montage of changing magazines and bullets.\nCreate a montage of shooting animations.\nCreate an animation montage of using objects.\nSection8: Character base features (14 lessons)\nSet up character components.\nCreate mouse control functions.\nCreate the character movement function and its effect on the movement speed.\nCreate a pose switch.\nSection9: Character fashion (6 lessons)\nBuild character fashion skeleton model components\nMaterial masking.\nCharacter Avatar system. (Avatar means change of fashion, am I using the right word?)\nSection10: Item DataTables (5 lessons)\nCreation of Weapons DataTable, Ammo DataTable, Weapons Accessories DataTable, Equipment DataTable, Medicine DataTable.\nSection11: Item System (2 lessons)\nItem System Framework Explained.\nCreating an item base class.\nSection12: Pickup Object (8 lessons)\nCreate pickup object base classes.\nCreate pickup objects for items, weapons,  Weapons Accessories, ammo, equipment, health items, energy items, and fashion.\nSection13: Item Object (9 lessons)\nCreate weapon item objects, including skeletal functions, weapon accessories functions, sound components, and particle components.\nCreate ammo, equipment, use type, and fashion item objects.\nSection14: Item Generation System (9 lessons)\nExplain item generation rules.\nCreating probability-related data tables.\nMaking logic for generating items.\nCalculating where to display items.\nSection15: Data Storage (2 lessons)\nData Storage Frameworks.\nCreate data-related variables.\nSection16: Pickup and Discard Items (30 lessons)\nCharacter Avatar logic made.\nPickup and Discard item logic flow explained.\nMake Pickup and Discard item related functions.\nWeapon switching functions.\nSection17: Weapon features (21 lessons)\nWeapon aiming features, including direct aim and open scope aiming.\nFire features, including fire animation, magazine change, bullet change, screen shake, and crosshair deflection.\nBullet functions, including bullet drop logic and a bullet hole.\nSection18: InventroyUI (20 lessons)\nBasic knowledge of UI production explained.\nUI construction and logic production.\nDisplay 3D characters in the UI, and synchronize all costumes.\nUI drag and drop function.\nSection19: MainUI (9 lessons)\nMaking the Crosshairs UI.\nMaking the ActionTips UI.\nMaking the MessageTips UI.\nCreating the UserInfo UI.\nCreating the Countdown UI.\nCreating the Directions UI.\nSection20: Objects used (6 lessons)\nCreate an inventory UI progress bar.\nCreating a circular progress bar.\nMake a usage logic.\nMaking Energy Restoration Logic.\nSection21: Parachute (9 lessons)\nMaking a skydiving UI.\nMaking the Aircraft Actor.\nProduced the free fall flight function.\nProduced the parachute flight function.\nSection22: Safe Zone (4 lessons)\nMake the display function.\nRandom position logic explanation.\nCreate a continuous zoom function.\nMove characters in and out to trigger related functions.\nSection23: Airdrop (4 lessons)\nAirdrop plane flight.\nAirdrop boxes.\nThe items in the airdrop.\nSection24: Bombing Zone (3 lessons)\nBlast points.\nBombing zones.\nExecution logic.\nSection25: Map UI (9 lessons)\nBig map and small map interface building.\nBig map move and zoom.\nSmall map movement logic.\nMap UV creation and interpretation.\nDisplay of Safe Zones, Bombing Zones, and Flight Route Maps.\nSection26: Final Map (2 lessons)\nAdaptation-related logic to the final map.",
      "target_audience": [
        "People who want to learn game development.",
        "People with no or some programming experience.",
        "Programmers, designers, game makers."
      ]
    },
    {
      "title": "Learn how to make a juicy game in Godot 4",
      "url": "https://www.udemy.com/course/learn-how-to-make-a-game-juicy-in-godot-4/",
      "bio": "Learn how to create juicy animations, effects, particles & more, by turning a simple game into a juicy one with Godot 4!",
      "objectives": [
        "Theory behind game feel",
        "Bring a game from boring to juicy using everything from the course",
        "Godot specific implementation with the AnimationPlayer, Particles, Shaders, Sound Effects, etc...",
        "Tips and tricks specific to making games with Godot"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is game juice?",
          "Why is it important?",
          "Examples from juicy games",
          "Base project walkthrough",
          "The impact of assets"
        ],
        "Ball": [
          "Bounce animation",
          "Scale based on velocity",
          "Trail",
          "Bounce particles",
          "Ball bounce particles instantiation",
          "Bump particles",
          "Hitstop",
          "Hitstop when bumping",
          "Appear animation",
          "Explode animation",
          "Decceleration",
          "Lerp color based on velocity",
          "Speed particles",
          "What we've learned"
        ],
        "Camera": [
          "Intro",
          "Shake",
          "Movement: offset & zoom",
          "Changing CanvasLayer viewport mode",
          "What we've learned"
        ],
        "Paddle": [
          "Lerp movement",
          "Animate movement: lerp angle",
          "Animate movement: damped oscillator",
          "Engine particles",
          "Active bump animation",
          "Bounce animation",
          "Dash ghosts",
          "Hitstop when bumping",
          "Laser",
          "Glow in Godot 3.5",
          "What we've learned"
        ],
        "Bricks": [
          "Spawning animation",
          "Tween spawning bricks",
          "Effects when changing value",
          "Destruction particles",
          "Destruction particles part 2",
          "Bomb explosion particles",
          "Energy & bomb wiggle animation",
          "What we've learned"
        ],
        "User Interface": [
          "Stats animation",
          "Stats animation part 2: shaker node",
          "Clear level animation",
          "Death screen animation",
          "Energy bar wiggle & particles",
          "Ultimate announcement",
          "What we've learned"
        ],
        "Sound Effects": [
          "How to create SFX using gdfxr",
          "Ball SFX",
          "Other SFX",
          "SFX results",
          "What we've learned"
        ],
        "Details": [
          "Joypad vibration",
          "Background animation on ball collision",
          "Background how to go further",
          "Combo size and filling animation",
          "Bump timings animation",
          "Lava shader and particles",
          "Lava particles when ball entering",
          "Stage clear and death sequence",
          "What we've learned"
        ],
        "Conclusion": [
          "Congrats, you made it until the end!"
        ]
      },
      "requirements": [
        "Basic programming knowledge",
        "Basic knowledge of Godot"
      ],
      "description": "A course focused on making everything juicy in a game using a breakout clone as a base game (project provided, we won't recreate the game in the course) . We’ll go over everything needed to bring the game from boring to awesome using many technique such as:\n\nAnimations (easing, bezier curves)\nLerp (linear interpolation)\nTween\nDamped oscillator\nTrails\nParticles\nCamera shake & movement\nShaders\nSound effects\nThe list is not exhaustive, please see the course outline for a glimpse into the topics that are covered.\n\n\nBeside the techniques themselves, I also discuss how and why we want to do things a certain way. I explain the importance of using contrast in your effects, anticipation, layering and much more. Throughout the course, you'll have many occasion to use the same techniques in different occasion and for different effects. You'll also have the ability to explore things on your own.\nI’ll show you tips and tricks along the way to make sure you get the most out of Godot and resources that can be useful and help you go further. You will walk away from this course knowing the techniques used to make a game juicy, how and when to use them. You'll be able to implement juice in your own games and bring them to the next level.\nThis course will be helpful if:\nYou have basic knowledge of programming and Godot\nYou want to take your prototypes/games to the next level\nYou want to make games more pleasing to play\nYou feel like your game is boring but don't know how to change it\n\n\nPlease note that we're focusing on the game juice in this course. I won't go over the fundamentals of programming or even Godot. The base game project is provided and we go over its structure quickly, but we don't create the game from scratch. The first time we're facing a new technique, I try to explain it in detail to make it as clear as possible, but you're expected to know a bit about how Godot works. Also, game juice touches on a lot of complicated topics such as animation, visual effects and sound effects. This course is not here to teach you animations or visual effects. Still, I go over some fundamentals and I try to give you as much information as possible. Just don't expect to learn animation or VFX through this course.\n\n\nThis course was made using Godot 4.0. It was the latest stable version of Godot at the time of creating the course. It should be compatible with all the future versions of Godot. In one chapter, I'm using Godot 3.5 to demonstrate how to tuse glow, as it was not implemented in 4.0.\nMultiple lessons are available to for you to preview for free. Please take a look at those videos before enrolling to know if this course is right for you!",
      "target_audience": [
        "Beginner and intermediate gamedev using the Godot Engine"
      ]
    },
    {
      "title": "Level Management in Unity",
      "url": "https://www.udemy.com/course/level-management-in-unity/",
      "bio": "Build a scalable, reusable menu system and save data from Unity",
      "objectives": [
        "Build a scalable, re-usable Menu system from scratch",
        "Save and load persistent data to and from your Unity application",
        "Master Generics and the Singleton design pattern"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to LevelManagement",
          "Course Info and Prerequisites",
          "Coding and Naming Conventions",
          "Unity Hub and Versions"
        ],
        "SceneManagement": [
          "Unity 2019 updates",
          "Sample Game Project",
          "Loading Scenes",
          "Challenge: Load Level Methods",
          "Validating Data",
          "Quiz: Scene Management"
        ],
        "Menu System": [
          "Menus and Screens",
          "Main Menu Layout Part 1",
          "Main Menu Layout Part 2",
          "Play Button Setup",
          "Challenge: Menu Buttons",
          "Menu Management Part 1",
          "Menu Management Part 2",
          "Challenge: Menu Methods",
          "Singleton Pattern",
          "Quiz: Singleton Pattern",
          "Menu Subclasses",
          "Menu Singletons",
          "Generic Menu base class",
          "Quiz: Generics",
          "Challenge: Pause Menu",
          "Review: Pause Menu",
          "Game Menu",
          "Menu Refactor",
          "Win Screen",
          "Initalize Menus Update"
        ],
        "Transitions": [
          "ScreenFader",
          "Canvas SortingOrder",
          "SplashScreen",
          "Challenge: SplashScreen Update",
          "Transition Fader Part 1",
          "Transition Fader Part 2",
          "Challenge: End Transition"
        ],
        "Saving and Loading Data": [
          "Persistent Data",
          "Settings Menu Update",
          "Player Prefs",
          "Custom SaveData",
          "Replacing PlayerPrefs",
          "JSON Utility",
          "Quiz: JsonUtility",
          "Challenge: Saving the PlayerName",
          "Encryption (Cryptographic Hashing)",
          "Hashing Save Data",
          "Code with Comments"
        ],
        "2019 Update: Level Selector": [
          "Introduction to Level Selection",
          "MissionSpecs",
          "MissionList Scriptable Object",
          "UI Layout",
          "Mission Selector",
          "LevelSelect Menu",
          "Menu Integation"
        ],
        "Bonus": [
          "Update: Load Progress Bar",
          "Bonus lecture"
        ]
      },
      "requirements": [
        "Unity 2017 or later",
        "Internet-connected Mac or PC",
        "Familiarity with the Unity Editor",
        "Basic knowledge of C#",
        "Optional: image-editing software to customize art assets"
      ],
      "description": "Are you ready to level up your game dev skills?\nIn this course, we will:\nstart with simple demo Unity project and add a front-end menu system\nlearn techniques for building reusable UI components and transitions in-between Unity scenes\nlearn the fundamentals of saving and loading persistent data locally from your application\ncreate C# scripts line-by-line and learn how to architect game components cleanly and logically\nLevel up your Unity skills!\nlearn the Singleton design pattern\nuse statics and Generics to avoid repetitious code\nexplore PlayerPrefs and JsonUtility to save and load data\nWhen you complete the class, you should have a full set of source code to build your own menu system and to save/load persistent data!\nLearn from 40+ videos broken into small 10-15 minute lessons.  Power through 6 hours of lectures and save weeks of coding!\nJoin the ever-growing ranks of our class and see what you can build today!\nNote: the videos were originally recorded with Unity 2017.3 but the project files have been upgraded to version 2019.3. You should be able to follow along with the lectures using the latest version of Unity.",
      "target_audience": [
        "Beginning to intermediate Unity developers who want to improve their game dev skills"
      ]
    },
    {
      "title": "The complete guide for game environment design in Unreal 4",
      "url": "https://www.udemy.com/course/the-complete-guide-for-game-environment-design-in-unreal-4/",
      "bio": "Learn Unreal blueprints by developing realistic game environment with this comprehensive guide from begin to finish",
      "objectives": [
        "Learn how to create a level in Unreal Engine 4 from scratch.",
        "Learn object placement and layout basics of assets in UE4",
        "Understand the Foliage system in UE4 to create great looking plants and trees for their games",
        "Understand how to setup lights, particles, and additional post-process assets to improve the visual look of their course"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Project Creation": [
          "01_Project Creation"
        ],
        "Importing Market place assets to the project": [
          "Importing Market place assets to the project"
        ],
        "Importing our market place assets": [
          "Importing our market place assets"
        ],
        "Introducing to world machine": [
          "Introducing to world machine"
        ],
        "Creating our terrain in World Machine": [
          "Creating our terrain in World Machine"
        ],
        "Importing our height map to UE4": [
          "Importing our height map to UE4"
        ],
        "Making our Blend material new": [
          "Making our Blend material new"
        ],
        "Finishing our Material": [
          "Finishing our Material"
        ],
        "Testing our Blending material": [
          "Testing our Blending material"
        ]
      },
      "requirements": [
        "Unreal Engine 4",
        "World Machine"
      ],
      "description": "Did you know lightning is the hardest part of a game environment design? You see, bad lighting can ruin your entire project, and since Unreal Engine 4 is a real-time engine, you have to know how to use the built-in tools.\n\n\nThis course teaches you how to optimize your lightening for a real-time game environment. You will know how to set up lights and affect particles (to create a pretty scene.)\n\n\nPlus the course gives you a simple process on the best and logical space to place objects, and you will find out how to import assets from the marketplace, that way you create a fun, playable level.\n\n\nNot to mention you will make a better scene once you create terrains in World Machine and importing heightmaps.\n\n\nIn addition, this course gives you:\n\n\nSecrets tricks to construction, texturing and lighting for a real-time environment.\nHidden concepts of the Foliage system for real life looking grass and trees.\nA solid workflow since you will learn how to use Unreal Engine 4’s material editor to blend faster.\n\n\nWith its jammed packed information on designing your own game environment, this course is lifesaver! Most importantly, the course shows you how to use post-process assets to provide a more visualizing and stimulating design. In the end, you will be left with an enjoyable game environment for both you and the user.\n\n\nSimply click the Enroll Now button to get started right now!\n\n\nMore about the Instructor:\nThis course is designed by Animation Hacks which is the visual effect studio with high-quality skill artist work on numerous unannounced projects. In addition, they enjoy sharing their knowledge with those students who learn 3D online.\nNOTE FOR STUDENTS - please take a look Section 1 / Lecture 1 to downloads for the source attachment link with the lesson.)",
      "target_audience": [
        "Beginners to UE4, or Advanced Students who want to expand their knowledge on the engine",
        "This course is also suit for professional-level UE4 artists"
      ]
    },
    {
      "title": "Modding By Kaupenjoe: Minecraft Modding 1.20.X for Fabric",
      "url": "https://www.udemy.com/course/minecraft-modding-120x-for-fabric/",
      "bio": "Easily Learn Minecraft Modding with Fabric! Beginner Friendly Introduction into Java and Minecraft Modding using Fabric!",
      "objectives": [
        "Learn the Basic Java Skills necessary to make a Minecraft Mod!",
        "The Basics of Minecraft Modding in Fabric",
        "Learn to independently program in Java",
        "From making your First Item to creating Custom Mobs that roam around in Minecraft"
      ],
      "course_content": {
        "Java Introduction": [
          "Java Installation & Setup",
          "Java Datatypes",
          "Java Syntax",
          "Output & Input",
          "Errors & How to not panic when you get them!",
          "Integers & Arithmetic & Math Methods",
          "Assignment Operators",
          "Boolean & Comparison Operators",
          "Boolean & Logical Operators",
          "If & Else Statements",
          "Switch Statements",
          "Trivia Game #1",
          "String & String Methods",
          "Casting",
          "Ternary Operator",
          "Java Arrays",
          "Loops",
          "Java Methods",
          "Trivia Game with Methods",
          "Java Collections",
          "Object Oriented Programming Explained",
          "Java Classed & Objects",
          "Access Modifiers",
          "Inheritance & Polymorphism",
          "Interfaces & Abstract Classes",
          "Trivia Game with Classes",
          "Bank Management Program",
          "Anonymous Classes",
          "Enums & Advanced Enums",
          "Exceptions",
          "Lambda Expressions",
          "Generics"
        ],
        "Basic Modding Concepts": [
          "Fabric Setup, Installation & GitHub",
          "Adding Custom Items",
          "Adding Custom Blocks",
          "Adding a Custom Item Groups",
          "Adding Ore Blocks",
          "Adding Custom Recipes",
          "Custom Loot Tables (Drops for Blocks)",
          "Custom Advanced Items",
          "Custom Advanced Blocks",
          "Custom Food Items",
          "Custom Fuel Items",
          "Custom Tooltips",
          "Custom Tags",
          "Custom Data Generation",
          "Custom Stairs & Slab Blocks",
          "Custom Button & Pressure Plate Blocks",
          "Custom Fences & Walls",
          "Custom Doors & Trapdoors",
          "Taking a Look at Vanilla Code"
        ],
        "All About Tools & Armor": [
          "Adding Custom Tools",
          "Adding a Custom Paxel",
          "Adding an Effect on Weapon Hit",
          "Adding Custom Armor",
          "Adding a Custom Full-Armor Effect",
          "Adding Custom Horse Armor",
          "Adding Custom Enchantments"
        ],
        "Intermediate Modding Concepts": [
          "Understanding BlockStates & BlockState Properties",
          "Understanding NBT Data",
          "Adding Custom Model Predicates",
          "Adding a Custom Crop Block",
          "Adding an Item to the Composter",
          "Understanding Mixin",
          "Adding a Command",
          "Understanding Events",
          "Adding a Custom Flower",
          "Adding Custom Sounds",
          "Adding Custom Sounds to Blocks",
          "Adding Custom Music Discs",
          "Adding Custom Block Models",
          "Adding Custom Item Models",
          "Adding a Custom Bow",
          "Adding a Custom Shield",
          "Modifying Vanilla Loot Tables",
          "Adding Custom Paintings",
          "Adding Custom Effects",
          "Adding Custom Potions",
          "Adding & Spawning Custom Particles",
          "Adding Custom Advancements",
          "Adding Custom Villager Trades",
          "Adding Custom Villagers",
          "Adding Custom Fluids",
          "Making a 2D texture with 3D Model in Hand",
          "Adding Animated Item Textures",
          "Looking at other Mods on GitHub"
        ],
        "About Block Entities": [
          "Adding a custom Block Entity",
          "Adding a Custom Recipe Type",
          "Adding REI Compatability",
          "Adding a Sided Inventory to the Block Entity",
          "Adding Energy Handling to the Block Entity",
          "Adding Fluid Handling to the Block Entity",
          "Adding a Custom Block Entity Renderer",
          "Adding a Custom Wood Type",
          "Adding a Custom Sign"
        ],
        "About World Generation I": [
          "Adding Tree Generation",
          "Adding Ore Generation",
          "Adding Flower Generation"
        ],
        "Mobs And Entities (Non-Geckolib)": [
          "Making a Custom Entity (Mob)",
          "Adding Custom Attack Animations",
          "Custom Entity Variants",
          "Custom Entity Sounds",
          "Adding a Tameable Entity",
          "Adding a Rideable Entity",
          "Making our Mob Breedable",
          "Adding a Boss Bar",
          "Making our Mob spawn",
          "Custom Thrown Projectile",
          "Custom Projectile"
        ],
        "World Gen II": [
          "Trees on a different Block",
          "Custom Trunk Placer",
          "Custom Foliage Placer",
          "Adding Custom Geodes"
        ],
        "Additional Topics I": [
          "Custom Boats",
          "Adding a 2 Block High Crop",
          "Biome Colored Block",
          "Adding custom Item to Suspicious Sand"
        ],
        "World Gen III": [
          "First Steps to Custom Biomes",
          "Adding Custom Dimensions"
        ]
      },
      "requirements": [
        "A Computer",
        "Some knowledge of Minecraft and its Modding Community",
        "Basic Computer skills (like downloading a program of the web)",
        "No programming experience needed, but can be useful!"
      ],
      "description": "Minecraft is the most popular game of all time! Minecraft Modding for the Java version of the game is known to be used in many YouTube videos and is played by a huge community! The Minecraft Modding Community keeps growing every day and it's a great and creative outlet!\nThis course will teach you how to make your own Minecraft Mod! You will learn the programming language Java as well as how to effectively use the Minecraft Modding API Fabric.\nFor absolutely beginners, I have added a Java Introduction for you, so even with no experience in programming you can start making Minecraft Mods by first going through the Java Introduction!\nIn the Basics Concepts part of the course, you will learn how to add Items, Blocks and Custom Recipes! A section on Tools and how to add those is presented as well!\nThe Intermediate Concepts is where you'll really pick up some amazing skill needed for proper Minecraft Modding with Fabric! You'll learn Custom Crops, Sounds, Custom Shields and so, so much more!\nBut that's not all! We will also cover advanced topics such as Block Entities, Custom Mobs and even Ore Generation amongst others and Structure Generation.\nWith a bit of creativity and applying the lessons you get from this course, you might just make the next Minecraft Mod hit!\nThis course is accessible to complete beginners. Even if you have never programmed in your life! The only requirement is that you own Minecraft and are vaguely familiar with the Game and some popular Minecraft Mods or even Minecraft Modpacks.\nAll files and the entire Source Code will be available so you can follow along with everything I do in the videos.\nNOT AN OFFICIAL MINECRAFT PRODUCT. NOT APPROVED BY OR ASSOCIATED WITH MOJANG.",
      "target_audience": [
        "Complete Beginners wishing to learn Java and Minecraft Modding!",
        "Beginners that want to create their first Minecraft Mod and don't know where to start",
        "Fabric Modders wanting to update their Minecraft Mod to 1.20.X",
        "Fabric Modders interested to deepen their understanding and learn new topics"
      ]
    },
    {
      "title": "Android Game Programming & Development for Beginners",
      "url": "https://www.udemy.com/course/android-game-programming-for-beginners/",
      "bio": "Build playable Android games using Java and Android Studio with no previous experience",
      "objectives": [
        "Code in Java from scratch or refresh existing knowledge",
        "Build playable Android games including Breakout and Space Invaders",
        "Create an efficient game loop",
        "Create smoothly animated arcade style graphics",
        "Learn the basic framework for games",
        "Add cool sound FX",
        "All you need to know to move on to design & implement your own games"
      ],
      "course_content": {
        "Getting Started & Java Refresher": [
          "Introduction",
          "Set up Android development environment",
          "Create an Android project and learn about comments",
          "Write some code to learn about variables",
          "Write some code to learn how to manipulate variables",
          "Learn about conditions to make decisions",
          "Learn about branching to control code",
          "Learn about loops to repeat code",
          "Learn about methods to structure code",
          "Learn about Object Oriented Programming"
        ],
        "Building a Breakout Arcade Game Clone": [
          "Overview of the Breakout project",
          "Create the project in Android Studio",
          "Learn about the Android Activity class",
          "Create a new class for the game engine - BreakoutEngine",
          "Code the BreakoutActivity class",
          "Run the game (so far) on the Android emulator",
          "Learn about Threads for smooth gameplay",
          "Learn about Interfaces for using API code",
          "Implement a Thread & the class member variables",
          "Code the main game loop and helper methods",
          "Run the game to see the loop in action",
          "Code & explain the Bat class",
          "Declare, initialize, update & draw the bat",
          "Run the game to see the bat",
          "Code the onTouchListener method",
          "Run the game to see the player control the bat",
          "Code & explain the Ball class",
          "Declare, initialize, update & draw the ball",
          "Run the game to see the ball",
          "Code & explain the Brick class",
          "Learn about arrays for handling lots of objects",
          "Declare, initialize & draw an array of bricks",
          "Run the game to see the bricks",
          "Add the sound effect files to the project",
          "Code the player HUD and load the sound effects",
          "Run the game to see the HUD",
          "Code collision handling for the ball & bricks",
          "Code collision handling for the ball & bat",
          "Code the collision handling for the ball & screen edges"
        ],
        "Building a Space Invaders Arcade Game Clone": [
          "Overview of the Space Invaders project",
          "Code the project outline and prepare the resources",
          "Code the game engine ready for the game objects",
          "Code the PlayerShip class and run the game",
          "Code the Bullet class",
          "Code the player controls & run the game to shoot some bullets",
          "Code the Invader class part 1",
          "Code the Invader class part 2 & run the game",
          "Code the bomb shelters & run the game",
          "Collision detection & finishing the game"
        ]
      },
      "requirements": [
        "You just need to be proficient with your chosen operating system",
        "You do not need to be able to code at all because a Java introduction/refresher is part of the course",
        "The course is shown on a Windows PC but apart from Android Studio setup the course is relevant for Mac as well. You can see basic Mac setup instructions on the Android developer web site if needed."
      ],
      "description": "This video course is all about offering you a fun introduction to the world of game programming, Android, and  the Java language using two fun, fully-playable games. These games are a retro Breakout/Arkanoid type game and the all-time classic, Space Invaders.\nWe will start with the very basics of Java programming, including setting up the development environment, variables, loops, conditions, methods and Object Oriented Programming.\nNext up we will tackle the Breakout game as well as introducing more advanced Java concepts like arrays, threads and interfaces. Finally (for now ;-)) we will take on the more complicated Space Invaders game\nIf you know Java but have never used Android Studio then the course introduces you the basics of Android development as well. If you already know Java and Android but just want to learn to make games then start at section 2 of the course",
      "target_audience": [
        "Beginners to Java coding",
        "Beginners to Android development",
        "Beginners to game coding/development"
      ]
    },
    {
      "already_crawled_in": "development/Data Science",
      "url": "https://www.udemy.com/course/artificial-intelligence-in-unity/"
    },
    {
      "title": "Become a video game developer with Gamemaker Studio 2.3",
      "url": "https://www.udemy.com/course/become-a-video-game-developer-with-gms-23/",
      "bio": "The all you need to know course for beginners",
      "objectives": [
        "What is the indie gaming (development)",
        "Is making video games for you?",
        "What roles can you have as a developer?",
        "A quick overview of the gaming industry",
        "An Introduction into GameMaker Studio 2.3 (with a comic)",
        "Make 6 short video games in GameMaker Studio 2",
        "Roleplay like an indie developer",
        "Understand how programming and game design work",
        "Structure you own video game from scratch"
      ],
      "course_content": {},
      "requirements": [
        "GameMaker Studio 2, ( free trail also possible)",
        "No futher skills needed"
      ],
      "description": "This Udemy course is geared towards beginners and gives you all the informations needed to make good decisions when starting as an indie developer or even when joining the industry as a contractor or employee.\nThe course is split into 3 parts:\nThe gaming industry - how does it look like and what kind of role can you have in there.\n\nGameMaker Studio 2.3 - Essentail guide how to use effectivly the programm and programming basics\n\nMake six games - This part is where we together make small video games with GameMaker Studio 2. After these games you can call yourself an indie devloper because making games should feel at that point natural to you. The endgoal is that you see the whole process of making video games and what kind of role you think suits your needs the best.",
      "target_audience": [
        "Beginners who like to see how making video games is like",
        "People who would like start as an solo developer, be part of an indie developement team or want to join the gaming industry",
        "Everybody who wants to enter the video gaming industry",
        "Everybody who wants to learn GameMaker language",
        "Everybody who wants sell their games"
      ]
    },
    {
      "title": "The Complete Unity 5 Intro - Learn to Build and Design Games",
      "url": "https://www.udemy.com/course/3dmotive-the-complete-unity-5-intro-learn-to-build-and-design-games/",
      "bio": "Everything you need to know to get started in the world of Game and Level Development with Unity 5 from the ground up!",
      "objectives": [
        "Learn from start to finish out to begin building levels and game spaces with the latest version of Unity",
        "Learn the UI, viewport controls, and all the tools you need to start using Unity confidently to be able to start building levels and games"
      ],
      "course_content": {
        "Getting Started with Unity 5": [
          "Download Course Files Here!",
          "Introduction",
          "Downloading and Installing Unity",
          "Creating Your First Project",
          "Interface Layouts",
          "The Asset Store",
          "Viewport Navigation",
          "Maximizing Panels",
          "Transformations",
          "GameObjects and the Object Inspector",
          "Starting Your First Game",
          "Floors and Materials",
          "Mesh Snapping",
          "Adding a Roller Ball",
          "Camera Controls",
          "Meshes and Collisions",
          "Completing the Project"
        ],
        "Adding Complexity and Sound to Your Level": [
          "Introduction",
          "Complex Meshes",
          "Content Creation Tools",
          "Exporting 3d Models",
          "Importing 3d Models",
          "Terrain Overview",
          "Creating Terrain",
          "Terrain and Heightmaps",
          "Importing Heightmaps",
          "Sculpting Terrain",
          "Importing Terrain Assets",
          "Applying a Terrain Base Texture",
          "Texture Painting",
          "First Person Mode",
          "Water",
          "Trees and Collisions",
          "Rocks and Grass",
          "Day and Night Cycles",
          "Audio Overview",
          "Playing Music",
          "Playing 3D Sound",
          "The AudioMixer",
          "Channels and Volumes"
        ],
        "Adding Lights and Building Materials": [
          "Introduction",
          "Getting Started with Lights",
          "Spot Lights",
          "Directional and Point Lights",
          "Gamma and Linear Space",
          "Pre-Computed Global Illumination",
          "Light Baking",
          "Light Probes",
          "Physically Based Shading",
          "Creating Materials",
          "Reflection Probes",
          "Emissive Lighting"
        ],
        "Particles and FX": [
          "Introduction",
          "Getting Started with Particle Systems",
          "Sparks and Afterburners",
          "Creating Particle Systems",
          "Particle Emitters",
          "System Properties",
          "Particle Velocity",
          "Particle Renderers",
          "Completing the Particle System",
          "GettingStartedwithImageEffects",
          "Blur and Chromatic Aberration",
          "Bloom and Edge Detection",
          "Fog Anti-aliasing and Screen Space Ambient Occlusion",
          "Transparency and the Standard Shader"
        ],
        "Animation in Unity": [
          "Introduction",
          "Getting Started with Animation",
          "Configuring Door Animation",
          "Using the Animation Window",
          "Keyframes and Curves",
          "Animating Push Buttons",
          "Object Interaction",
          "Animation Controllers",
          "Animation Transitions",
          "Animation State Machines",
          "Event Triggers",
          "Character Animation Overview",
          "Character Rigging and Avatars",
          "Blend Trees",
          "Blend Trees and Parameters",
          "Root Motion and Course Conclusion",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "A copy of Unity 5 - A free trial version is available online, and the first section even covers downloading and installing"
      ],
      "description": "In this course, instructor Alan Thorn explains everything you need to get started in Unity 5, even if you're completely new to game development. Through clear and concise examples, he will be exploring all of the necessary basics of Unity in a practical context and be covering topics ranging from user interface navigation and viewport controls all the way through some of the more in-depth features such as terrain creation, lighting, materials, particle effects, and animation to name a few. If you're ready to start making games, this course has everything you need!\n\n(Students - please look under Section 1 / Lecture 1 downloads for the source files associated with the lesson.)\nMore about the Instructor:\nAlan Thorn is a freelance game developer and author with over 12 years of industry experience. He is the founder of London-based game studio, Wax Lyrical Games, and is the creator of award-winning adventure game Baron Wittard: Nemesis of Ragnarok. He has worked freelance on over 500 projects worldwide including games, simulators, kiosks, and augmented reality software for game studios, museums and theme parks. He has spoken on game development at universities throughout the UK, and is the author of nine books on game development, including Teach Yourself Games Programming, Unity 4 Fundamentals and the highly popular UDK Game Development.",
      "target_audience": [
        "Intermediate and Beginners alike who are interested in starting their career learning game engines and how games are built"
      ]
    },
    {
      "title": "Jumpstart to 2D Game Development: Godot 4.4+ for Beginners",
      "url": "https://www.udemy.com/course/jumpstart-to-2d-game-development-godot-4-for-beginners/",
      "bio": "Master the Godot 4 Engine, Build Engaging 2D Games, Learn GDScript and Ignite Your Game Development Journey!",
      "objectives": [
        "Master Godot 4: Learn scene creation, input handling, collision detection, and more in the powerful Godot 4 game engine.",
        "Create Diverse Games: Develop Flappy Bird, Angry Birds, memory games, platformers, puzzles, space shooters, and maze escapes.",
        "Acquire Game Dev Skills: Gain level design, animation, enemy AI, power-ups, UI design, and apply design patterns like singletons and event buses.",
        "Explore Mechanics & Patterns: Understand parallax scrolling, physics-based gameplay, pathfinding AI, state machines, and dynamic level loading."
      ],
      "course_content": {},
      "requirements": [
        "Computer with Adequate Specifications: A computer capable of using the Vulkan renderer is required to work on the projects effectively - the course contains a free video to make a check!",
        "This course assumes no prior knowledge of the Godot 4 engine but does assume a basic understanding of programming concepts. However, even individuals without programming experience can benefit from the course by leveraging the visual scripting system provided by Godot 4."
      ],
      "description": "Welcome to \"Jumpstart to 2D Game Development: Godot 4 for Beginners\" – an immersive video course designed to empower aspiring game developers with the skills and knowledge needed to create captivating 2D games using the powerful Godot 4 game engine with it's built in GDScript programming language.\n\n\n** NOW UPDATEs FOR GODOT 4.4** The course has been updated for Godot 4.4.\n\n\nIn this comprehensive course, you'll embark on a thrilling journey through a variety of game projects, each carefully designed to enhance your understanding of essential game development concepts and techniques. Whether you're a complete beginner or have some programming knowledge, this course is tailored to provide a solid foundation for your game development aspirations.\n\n\nThroughout the course, you will:\n\n\n- Create a Flappy Bird clone, where you'll learn about scene creation, input handling, collision detection, and the implementation of parallax scrolling for enhanced visuals.\n- Replicate the addictive mechanics of Angry Birds, developing physics-based gameplay with projectile motion and mastering level design with destructible environments.\n- Dive into the world of UI-driven game development with the creation of a captivating memory game. You'll gain experience in building intuitive and visually appealing user interfaces.\n- Recreate the charm of 80s platformers with the CJ Elephant Antics project. Master level design, character animation, and controls to create challenging levels filled with diverse obstacles. You'll also learn to use GoDot's built in State Machine to create and end of level boss!\n- Explore the realm of puzzle games with a Sokoban-inspired project. Dynamically load levels from files, understand puzzle-solving mechanics, and apply design patterns to create elegant and robust solutions.\n- Engage in an intergalactic adventure as you construct a thrilling space shooter. Design and implement enemy AI with path following for dynamic enemy waves, integrate power-up systems, and enhance visuals with particle effects and other enhancements.\n- Experience the thrill of artefact collection and escape in an immersive game. Utilize Godot 4's 2D navigation AI to program guard behaviour, plan strategic escapes, and create tension-filled gameplay moments.\n\n\nBy the end of this course, you'll have built a diverse portfolio of 2D game projects, showcasing your abilites with Godot 4 and your ability to create captivating gameplay experiences. Enroll now and let's embark on this exciting journey into the world of 2D game development with Godot 4!\n\n\nNote: On the course I write Godot as \"GoDot\" - when I do,  I mean Godot. In case it causes confusion.",
      "target_audience": [
        "This course is designed for aspiring game developers who are interested in 2D game development using the Godot 4 game engine.",
        "Beginners: Individuals with little to no prior experience in game development or programming, who are eager to learn the foundations of 2D game development and start building their own games.",
        "Hobbyists: Game enthusiasts who want to turn their passion into practical skills. This course provides a structured learning path to enhance their game development abilities and create engaging 2D games.",
        "Self-taught Developers: Individuals who have already dabbled in game development or programming on their own and want to strengthen their skills, learn best practices, and deepen their understanding of the Godot 4 engine."
      ]
    },
    {
      "title": "How to Program Games: Tile Classics in JS for HTML5 Canvas",
      "url": "https://www.udemy.com/course/how-to-program-games/",
      "bio": "Learn to code tile-based worlds and related core gameplay for genres like arcade, overhead racing, and puzzle adventure.",
      "objectives": [
        "Create, display, and play with a 2D tile world that supports optimized collision (a central concept for generations of games in a variety of genres!)",
        "Program games in JavaScript for HTML5 Canvas without using any external libraries or plug-ins",
        "Create, load, display, and rotate image graphics in games",
        "Break game code into multiple files to better manage large projects",
        "Define a class and use it to create multiple instances of gameplay objects in unique positions (note: only using the very basic first concept of object-oriented programming, it doesn't dive deep into that rabbit hole)",
        "Handle mouse input for a one-player game, or keyboard controls for both one and two-player games",
        "Implement basic item pick-ups (keys) and trigger their usage upon collision (open doors)",
        "Develop and adapt gameplay for basic platformer movement, digital board/strategy games, simple matrix formations for retro arcade-style enemies, and worlds larger than the screen viewed by scrolling camera",
        "Apply simple trigonometry calls to move game objects at arbitrary angles",
        "Implement basic loading screen functionality in HTML5"
      ],
      "course_content": {
        "Introduction to Your Course and Instructor": [
          "Introduction to Your Course and Instructor"
        ],
        "Ball with Mouse Paddle - Warm-Up and Review": [
          "Section Introduction",
          "Create the HTML File",
          "Proper HTML Header",
          "JavaScript in HTML with Console Use",
          "HTML5 Canvas with Setup Function",
          "Draw Filled Rectangle and Circle",
          "Variable and Timed Updates for Motion",
          "Modify Speed, Also for Vertical Motion",
          "Reason for a Big Rectangle Each Frame",
          "Separate the Motion and Draw Code",
          "Make Functions for Fill Rect and Circle",
          "Mouse-Controlled Horizontal Paddle",
          "Reset Ball When It Goes Off Bottom",
          "Move Paddle From Edge, Reflect Ball",
          "Aim Based on Where Ball Hits Paddle",
          "Section 1 Review"
        ],
        "Row of Removable Bricks": [
          "Section Introduction",
          "Display Mouse Coordinate by Cursor",
          "Set Up and Display the First Brick",
          "Draw Multiple Bricks with Gaps",
          "Vanish Individual Bricks",
          "Renumber Bricks to Start at Zero",
          "Using an Array for Bricks",
          "How For() Can Loop on the Brick Array",
          "Clearing Isolated Bricks in the Array",
          "Label Deeply Stacked Closing Braces",
          "Section 2 Review"
        ],
        "Ball-Brick Grid Collision": [
          "Section Introduction",
          "Display Tile Coordinate Near Mouse",
          "Supporting Multiple Brick Rows",
          "Changing Brick \"Count\" to \"Columns\"",
          "Support Removal of Each Brick Position",
          "Make More Bricks, and Smaller",
          "Compute Index From Row and Column",
          "Remove Bricks Under Mouse",
          "Remove Bricks Where the Ball Goes",
          "Fix Edge-Wrap Collision Bug",
          "Bounce Ball When It Hits Bricks",
          "How to Start the Ball in the Center",
          "Section 3 Review"
        ],
        "Advanced Ball Collision": [
          "Section Introduction",
          "Cutting Ball Code Into Functions",
          "Understanding the Ball-Brick Side Test",
          "Get the Ball Bouncing Off Brick Sides",
          "Add Cheat to Reposition the Ball",
          "Fix the Covered-Edge-Corner Case",
          "Section 4 Review"
        ],
        "Finish Brick Gameplay": [
          "Section Introduction",
          "Keep Count of Bricks Remaining",
          "Start with Empty Gutter at Top",
          "Reset Ball at Start, Bricks After Last Hit",
          "Reset Bricks When Player Misses Ball",
          "Fix Bug with Hitting Bottom Bricks",
          "Testing to Look for Remaining Bugs",
          "Fixing the Ball-Stuck-Along-Edge Bug",
          "Play Testing to Look for Bugs Again",
          "Section 5 Review"
        ],
        "Adapt the Grid for Racing": [
          "Section Introduction",
          "Now Let's Tear This Up",
          "Remove the Paddle",
          "Rename \"Brick\" in the Code to \"Track\"",
          "Stretch Tile Grid to Cover the Canvas",
          "Design a Grid Layout by Hand",
          "Quick Example of Grid Map Design",
          "Fill in a Basic Track Layout",
          "Set Ball Start Location in the Array",
          "Section 6 Review"
        ],
        "Draw and Code an Image": [
          "Section Introduction",
          "How to Create the Car Image",
          "Turning on Headlights and Taillights",
          "Import and Display the Car Image",
          "Section 7 Review"
        ],
        "Spin and Angled Motion": [
          "Section Introduction",
          "Replace \"Ball\" in Code with \"Car\"",
          "Spin the Car Image",
          "Drive the Car the Way It Faces",
          "Use of Sine and Cosine for Games",
          "Understanding Why We Use Sin & Cos",
          "Clean Away Outdated Ball Code",
          "Section 8 Review"
        ],
        "Giving You the Car Keys": [
          "Section Introduction",
          "Functions on Key Press and Release",
          "Find the Key Code for Each Arrow Key",
          "Crude Steering and Gas on Key Presses",
          "Treat Keys More Like Buttons",
          "Lose Speed From Driving Into Walls",
          "Slow Down Over Time",
          "Fix Car's Start Direction",
          "Section 9 Review"
        ]
      },
      "requirements": [
        "Any plain text editor like Notepad will do, however one which supports features for programmers such as multiple file tabs, code highlighting, line numbers, and smart/auto-indentation can be handy for later phases as the code grows in length (Notepad++ is free for Windows, TextWrangler for Mac, or Sublime Text 2 which I use has a fully functional free trial for either)",
        "Any common web browser should work fine, although I use Google Chrome (free) so you may prefer that one just to see on your side exactly how it shows up in the videos",
        "To follow along the few steps for drawing art you'll need a program that lets you draw and save images with transparency. I use a slightly older version of Photoshop, although free alternatives exist and the steps are similar. I also attach all art files that I create, so if you prefer to only focus on the coding steps you can download the images that I create in the videos."
      ],
      "description": "By taking this new course you'll program several classic game types that all incorporate 2D tile-based worlds. You'll code in JavaScript for HTML5 Canvas, so a text editor and ordinary web browser are all you need (an art program can be handy for a few sections but is not required). I've attached my code for each step so you'll never be stuck. At the end you'll learn even more ways to apply what you've learned. Also by completing the course you'll get a PDF of my complete 500-page textbook on game development: Hands-On Intro to Game Programming. The book contains over 100 exercises, a couple of more game types, and additional material with more detail about the projects you created in this course.\n(HTML5 Logo in the course image is by W3C, licensed under Creative Commons Attribution 3.0 Unported. Background pattern for transition cards CC BY-SA 3.0 Subtle Patterns © Atle Mo. drawn by Paul Phönixweiß.)",
      "target_audience": [
        "Anyone who wants to learn practical skills to program their own games at home",
        "People who may already be familiar with programming concepts but are new to applying that knowledge to making real-time computer games",
        "Creators who have only ever tried drag-and-drop tools but are interested in learning more about how to make games by programming for an deeper level of control over the details",
        "Developers interested in getting practice with a more traditional \"code only\" approach to core gameplay programming before moving on to major engines and tools (which are not covered in this course) like Unity or Unreal",
        "People looking for a technical game design foundation based in indie-style games or classic gameplay as a starting point",
        "New developers who completed the free course \"Code Your First Game: Arcade Classic in JavaScript on Canvas\" and are looking to further build upon their game development skills in JavaScript on HTML5 Canvas",
        "Please note that advanced topics like object-oriented programming are only very briefly touched upon - software engineering patterns are generally outside the scope of this course"
      ]
    },
    {
      "title": "Ultimate Unity Overview (70+ Tools and Features Explained!)",
      "url": "https://www.udemy.com/course/ultimate-unity-overview/",
      "bio": "Learn how to make BETTER games FASTER by using all the Unity Tools and Features at your disposal! (Unity 6.0 Updated)",
      "objectives": [
        "Learn how to use 70+ Unity Features and Tools",
        "Make BETTER games FASTER by learning about some Tools you might not know exist!",
        "Learn from a Professional Indie Game Developer",
        "New Lectures added regularly as FREE Updates teaching more Tools and Features"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Overview"
        ],
        "Tools and Features": [
          "Unity Version",
          "Unity Hub",
          "Unity Editor Basic Windows",
          "Unity Editor Layout",
          "Render Pipelines",
          "Package Manager",
          "2D - 3D",
          "Visual Scripting",
          "Post Processing",
          "Ambient Occlusion URP",
          "Text - TextMeshPro",
          "Prefabs",
          "UnityPackage",
          "Grids",
          "RenderTexture",
          "VideoPlayer",
          "Shader Graph",
          "TrailRenderer",
          "Microgames",
          "ProBuilder",
          "Render Pipeline Objects",
          "Assembly Definitions",
          "Resources",
          "Game Object Icon Gizmos",
          "Pivot Center - Local Global",
          "Script Execution Order",
          "Hierarchy Buttons",
          "Logs",
          "NavMesh",
          "Visual Studio Solution with Packages",
          "PlayerPrefs",
          "Game Object vs Transform",
          "Visual Studio Shortcuts",
          "Input Manager (Legacy) Vs Input System (Package)",
          "Input System",
          "Find Class Names and Namespaces",
          "Animation Vs Animator (Legacy, Mecanim)",
          "Animation Window",
          "Animator",
          "Animator Blend Trees",
          "Animation Avatar",
          "Animation Rigging",
          "ProBuilder Cut Mesh",
          "RawImage Vs Image, Sprite Vs Texture",
          "UnityWebRequests - Contact External Servers",
          "UI Effects - Outline, Shadow, Position as UV1",
          "Ragdoll",
          "4 Steps to solve NullReferenceException",
          "JSON and JsonUtility",
          "Addressables",
          "Addressables Remote",
          "Cloud Content Delivery",
          "Dynamic Resolution",
          "Build Size Report",
          "Unity Authentication",
          "Remote Config",
          "Game Overrides",
          "Netcode for Game Objects",
          "Lobby",
          "Relay",
          "Game Server Hosting (Multiplay)",
          "Matchmaker",
          "Cloud Save",
          "Decal Projector",
          "Frame Debugger",
          "Cloud Diagnostics",
          "User Reporting",
          "Localization",
          "TextMeshPro Fallback",
          "DOTS and ECS"
        ],
        "What's Next?": [
          "What's Next?"
        ]
      },
      "requirements": [
        "Anyone can follow and learn",
        "Use the Q&A Section if you have any questions, I answer all of them every single day"
      ],
      "description": "Hello and Welcome!\nI'm your Code Monkey and in THIS course you will learn how to use a lot of the Features and Tools that Unity has.\nUnity is massive so there are over 70 lectures on this course each covering a different Tool or Feature.\nThis is a great way to quickly get up to speed and become familiar with all the Tools and Features Unity has that can make you much better at building your own games.\nLearn all about making Shaders in Shader Graph, 3D modelling with ProBuilder, playing Videos with the VideoPlayer\nLearn about Visual Scripting, Assembly Definitions, RenderTextures, GridSystem, TextMeshPro, Multiplayer, Localization, Addressables and more.\n\n\nIn this course you will find some features that are part of the engine that you didn't even know about which will greatly help you on your game development journey.\nUnity is massive so there are even more features than the ones I covered here, I've been using Unity over 10 years now and even so there's still some I've never used so I need to do extensive research in order to make a lecture.\n\n\nThis course will be updated over time with free updates as I explain more and more Features and Tools.\nThere's already been 6 free updates, the course launched with 30 lectures and currently has 70+!\nLet me know in the Q&A section which ones you're most interested in so I know which ones to prioritize.\n\n\nEach lecture covers a different Tool or Feature of the engine so that means that each Lecture is standalone.\nYou can go through the course Lecture by Lecture, or you can jump around and go to each Lecture that covers a Tool that you're specifically interested in.\nBut my goal with this course is also to expose you to Tools and Features that you might not be familiar with so if you take the approach of jumping between each lecture, make sure you watch the ones you missed in the end.\nThere might be a feature that you simply don't know about that would help you immensely.\n\n\nAbout me, I'm a Professional Indie Game Developer with several successful games published on Steam covering a wide range of genres, I've been Programming for over 20 years and using Unity for over 10.\nAlso a couple of years ago I started a YouTube channel making Free Video Tutorials to share the knowledge I have accumulated to help you learn how to make YOUR OWN games.\nIf you'd like to try out my learning style before purchasing the course you can watch the over 800 Videos available for Free on the YouTube channel.\n\n\nIf you feel confused or lost at any point in the course make sure you post your questions in the Q&A section.\nI am there every single day answering every question to help you with whatever issues you may have.\n\n\nThis course will be updated over time with free updates as I explain more and more Features and Tools.\nThere's already been 6 free updates, the course launched with 30 lectures and currently has 70+!\n\n\nAlright so go ahead join me on the course and let's learn how to use everything that Unity has to offer in order to make BETTER games FASTER!\n- Code Monkey",
      "target_audience": [
        "Anyone who uses Unity",
        "Anyone interested in learning how to use all the Unity Tools to make better games",
        "Anyone is already familiar with Unity but wants to improve further",
        "Anyone interested in learning from a Professional Indie Game Developer"
      ]
    },
    {
      "title": "The Complete LibGDX Game Course Using Java",
      "url": "https://www.udemy.com/course/the-complete-libgdx-game-course/",
      "bio": "Learn How To Plan, Design, And Create Your Games Using LibGDX Java's Game Development Framework",
      "objectives": [
        "Use Java To Solve Complicated Programming Problems",
        "Understand OOP Concepts",
        "Undersand How LibGDX Works",
        "Understand How Box2D Works",
        "Create Menus In LibGDX",
        "Play Music In Your Game",
        "Animate Sprites",
        "Use LibGDX Actions To Program Advanced Game Behavior",
        "Create A Character Select System",
        "Understand How Physics Engines Work Under The Hub",
        "Save Data Using LibGDX Preferences",
        "Save Data Using Encryption"
      ],
      "course_content": {
        "Introduction": [
          "Intro"
        ],
        "Introduction To Java": [
          "Downloading Java JDK And Android Studio",
          "Creating Our First Project",
          "Variables",
          "Operations With Variables",
          "Methods(Functions)",
          "Conditionals",
          "Loops",
          "Arrays",
          "Classes",
          "Data Encapsulation",
          "Inheritance",
          "Interfaces",
          "Array Lists"
        ],
        "Introduction To LibGDX": [
          "Downloading LibGDX And Creating Our First Project",
          "LibGDX Main Components",
          "Helpers, Static Variables And Moving The Player",
          "Creating New Scenes Using The Screen Interface",
          "Extending The Sprite Class",
          "The Physics System",
          "Creating The World And Making The Player Move",
          "Drawing The Bodies On The Screen And Pixels Per Meter Ratio",
          "Moving The Player",
          "Detecting Collision"
        ],
        "Jack The Giant": [
          "Jack The Giant Game Preview",
          "Importing Assets For Jack The Giant",
          "GameInfo Class",
          "Creating And Drawing Our Backgrounds",
          "Main Camera And Gameviewport",
          "Check If Backgrounds Are Out Of Bounds",
          "Cloud Class",
          "Debug Renderer And Debug Camera",
          "Clouds Controller",
          "Positioning And Drawing The Clouds",
          "Randomizing The X axis of the clouds",
          "Creating And Arranging New Clouds",
          "The Player Class",
          "Solution To The Cloud Body Position Problem",
          "Moving The Player",
          "LibGDX Texture Packer",
          "Animating The Player",
          "Main Menu",
          "Creating Main Menu Buttons",
          "Adding Listeners To Our Buttons",
          "Highscore Menu",
          "Highscore Buttons",
          "Options Menu",
          "Options Menu Buttons",
          "UI Hud",
          "Pause Panel",
          "Fixing Players Position",
          "Collectables",
          "Positioning Collectable Items",
          "Sensors, Filters and Colliding With The Collectable Items",
          "Removing Collectable Items",
          "Spawning Collectable Items In Our Game",
          "Removing Off Screen Collectables",
          "Singleton Patern",
          "Game Manager",
          "Player Out Of Bounds",
          "Players Score",
          "Player Died Method",
          "Actions",
          "End Score Panel",
          "Saving Data",
          "Displaying Highscore And Changing The Difficulties",
          "Setting The Speed Based On The Difficulty",
          "Playing Music",
          "Running The Game On An Android Device"
        ],
        "Flappy Bird": [
          "Flappy Bird Game Preview",
          "Importing Assets And Organizing The Project",
          "Game Info Class",
          "Creating Our Backgrounds",
          "Moving Our Backgrounds",
          "Drawing And Moving Grounds",
          "Bird Class",
          "Bird Flap",
          "Ground Body",
          "Pipes Class",
          "Moving The Pipes",
          "Creating Multiple Pipes And Moving Them",
          "Score Body",
          "Detecting Collision",
          "Check For First Touch And Score System",
          "Creating Our Buttons",
          "Main Menu",
          "Change Bird Method",
          "Packing Bird Animation Images",
          "Animating The Birds",
          "Saving Data",
          "Showing Highscore"
        ]
      },
      "requirements": [
        "Android Studio(We Will Download It In Lecture 2)"
      ],
      "description": "*** This Is The Only LibGDX Course That Teaches How To Make Complete Games From Scratch On Udemy!!! ***\nThe course is completely project based, and we are going to create full featured games from scratch using LibGDX framework.\nWe will start with simple things so you will be comfortable if you are using LibGdx for the first time.\nYou will also benefit from my super fast response if you have any issue that you are stuck with(I check Udemy forums every day if someone posts a question). Oh and all the students taking the course will also be there to help you!\nAll project files will be included and you are free to use them for anything that you like, personal or commercial use!\nLets take a look at the games that we are going to create inside of this course:\nWe are going to start with a simple game that I call Jack The Giant. In this game we are going to help Jack climb down the beanstalk, along the way we can jump on white clouds but we need to avoid dark clouds. Besides of creating our gameplay we are going to create menus, implement background music, and much much more.\nThe next game that we are going to create is Flappy Bird, and I know what you are thinking oh not another Flappy Bird clone, but this is not a regular Flappy Bird clone, oh no, I've added a lot of features that you can't find in any other flappy bird clone such as selecting a bird(choose between different flappy birds), and many other features that you will see inside of the course.\nUsing what you obtain in this course, you will be equipped with more than enough knowledge in order to continue improving yourself in the field of game development, using LibGDX or any other game engine.\nIf You ever had an idea for an awesome game, then enroll in this course and learn the tools that you need to develop Your next hit game!!!\nWhat Is Your Risk By Taking This Course?\nNothing!! If you are not satisfied with the course, I promise I will give you a full refund of your money NO questions asked!!\nEnroll Now!! You Will Not Be Disappointed!!",
      "target_audience": [
        "Complete Beginners",
        "Anyone Who Wants To Learn Game Development"
      ]
    },
    {
      "title": "Python Course:Learn Python By building Games in Python.",
      "url": "https://www.udemy.com/course/python-games-development/",
      "bio": "Learn to code In Python by Develop & Build Games in Python, Python Basics, Python OOP, Python Games Projects",
      "objectives": [
        "Learn Python in easy and simple way.",
        "Learn coding in Python by examples.",
        "Learn how to use Jupyter notebook and IPython for Python coding.",
        "Learn Python programming basics.",
        "Learn Object Oriented Programming(OOP) in Python.",
        "Learn How to use Pygame Python Library to build and develop Python Games",
        "5 Python Games projects to Master The Python Powerful Skills you will learn."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Environment Preparing for Python",
          "Python2 VS Python3",
          "Understanding Data Types in Python"
        ],
        "Python Refresher": [
          "Variables, Operators and Data Types in Python.",
          "String Functions in Python.",
          "Data Structures in Python",
          "Control Flow VS Loops",
          "Error Handling in Python",
          "Functions in Python",
          "Files and Modules in Python"
        ],
        "Python Skills Refresher Chat": [
          "Python Skills Refresher Chat",
          "Python Code Review & Refresher."
        ],
        "Object Oriented Programming (OOP) In Python": [
          "Creating Simple Class.",
          "Overviewing Constructor.",
          "Learning How to creating Dunder Methods?",
          "Learning about Inheritance.",
          "Knowing What is the Encapsulation?",
          "Learning also about Multiple Inheritance",
          "Knowing What is the Overriding?",
          "Learning about Decorators.",
          "Learning How to use Build-in Decorators?"
        ],
        "Project Color Choices Game": [
          "Project Walk through",
          "Project Helpful Notes",
          "Project Solution"
        ],
        "Project Hangman Game": [
          "Project Walk through",
          "Project Helful Notes",
          "Project Solution Part 1",
          "Project Solution Part 2"
        ],
        "Project Tic Tac Toc": [
          "Project Walk Through",
          "Project Helpful Notes",
          "Project Solution"
        ],
        "Pygame Python Library (Module)": [
          "Pygame Library Part 1",
          "Pygame Library Part 2",
          "Pygame Library Part 3"
        ],
        "Project 4: Pong Game": [
          "Pong Game Part 1: Create The Pong Display With The Middle Line",
          "Pong Game Part 2: Adding The Two Paddles",
          "Pong Game Part 3: Adding Bouncing Ball",
          "Pong Game Part 4: Adding Score System.",
          "Pong Game Part 5: Adding Game Sound System."
        ],
        "Project 5: Flappy Bird": [
          "Flappy Bird Game Overview",
          "Adding Background and Base",
          "Adding The Doubled lines of Pipes",
          "Adding The Moving Bird",
          "Use Collisions between The Bird & Other Game Objects",
          "Adjust The Bird Animation",
          "Adding The Score System",
          "Adding The Game Sounds"
        ]
      },
      "requirements": [
        "No primer programming experience needed for this course.",
        "Computer and internet.",
        "Your enthusiasm to learn Python Basics and Python Object Oriented Programming.",
        "Everything else you need to learn Python Programming is already in this course."
      ],
      "description": "Python Programming course, full Guide for Python Programmers & Python Coders in a simple and easy way with Python Examples, Python quizzes, Resources & 5 Python Games Projects in Python Games, Python OOP,  to master Python 3 from zero to hero in this course.\nWhat you will learn in this course ?\n\n\nAre you ready to become a Python programming expert? Look no further than this comprehensive course!\n\n\nWith real-world examples, Python quizzes, and resources, you'll gain a solid foundation in Python and be able to apply your skills to a variety of programming tasks, including desktop applications, game programming, and mobile development.\n\n\nThis course covers everything you need to know to master Python 3, including:\n\n\n- Installing Python 3 and choosing the right IDE\n- Python fundamentals: variables, operators, data types, string functions, input string functions, data structures, for loops, control flow, and error handling\n- Advanced techniques like lambda expressions and Python modules\n- Using Python to open files and handle errors in your programs\n- Real-world projects in Python game programming and Python object-oriented programming (OOP)\n\n\nBut why learn Python in the first place? For starters, Python is a high-level, elegant, and easy-to-learn programming language that's also free and open-source. It's also an object-oriented programming language, allowing you to use objects when coding.\n\n\nPlus, Python is a cross-platform language, meaning that code written for one operating system can work well on others without changes to the Python code. This makes it an incredibly versatile tool for a wide range of programming tasks.\n\n\nSo what are you waiting for? Enroll in this course today and become a Python programming hero!",
      "target_audience": [
        "Students want to master Python programming basics.",
        "Students want to apply Python knowledge through Python Projects",
        "Are you welling to learn Python Games Development?"
      ]
    },
    {
      "title": "Complete game animators pipeline from Blender to engine",
      "url": "https://www.udemy.com/course/complete-game-animators-pipeline-from-blender-to-engine/",
      "bio": "Learn 3D rigging, 3d character animation, and the full game animation pipeline from Blender to Unreal engine 5",
      "objectives": [
        "The complete game character animation pipeline from Blender to Unreal",
        "How to make professional complete game ready animation sets for an in game character.",
        "Create a professional game ready animation rig from scratch.",
        "Tips and tricks on creating better walk cycles, and using animation layers to build up compeling movment.",
        "How to set up animation graphs, blend states and more in Unreal engine 5",
        "Create a game ready character that can walk, run, jump, strafe and more!",
        "Learn the correct way to set up a character rig, and correct export and import settings from Blender to Unreal engine.",
        "Compatible with all Blender 3.0 and 4.0 versions"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Download and install Blender": [
          "Download and install Blender"
        ],
        "Setting up the animation rig": [
          "Importance of scale",
          "Download the course resources",
          "Setting up the animation rig",
          "Setting up the foot control bones and leg IK",
          "Setting up the hip, spine and head control bones",
          "Setting up custom bone shapes (For 4.0 Versions of Blender)",
          "Setting up Custom Bone shapes (For 3.0 versions of Blender)",
          "Creating finger drivers using animation actions"
        ],
        "Adding the character mesh to the armature rig": [
          "Quick basics of weight painting",
          "Part 1: Adding the character mesh to the Armature",
          "Part 2: Adding the character mesh to the Armature",
          "Part 3: Adding the character mesh to the Armature",
          "Part 4: Adding the character mesh to the Armature"
        ],
        "Creating the main idle animations": [
          "Section introduction",
          "Animating the main stand idle animation",
          "Animating the main crouched idle animation"
        ],
        "Animating the walk cycles": [
          "Section introduction",
          "Animating with motion extraction in mind",
          "Creating the forward walk cycle part 1",
          "Creating the forward walk cycle part 2",
          "Creating the left walk forward cycle",
          "Creating the right walk forward cycle",
          "Creating the backwards walk cycles",
          "Creating the 45 degree walk cycles Part 1",
          "Creating the 45 degree walk cycles part 2"
        ],
        "Exporting The Armature and animations": [
          "Setting up the idles ready for export",
          "Exporting the main skeleton",
          "Exporting all our animations so far"
        ],
        "Animating the Run cycles": [
          "Section introduction",
          "Creating the forward run cycle part 1",
          "Creating the forward run cycle part 2",
          "Creating the left forward run cycle",
          "Creating the right forward run cycle",
          "Creating the 45 degree forward right run cycle",
          "Creating the 45 degree forward left run cycle",
          "Creating the run back cycle",
          "Creating the run back left cycle",
          "Creating the run back right cycle",
          "Creating the run back right 45 cycle",
          "Student challenge: Creating the run back left 45 cycle"
        ],
        "Student challenge: Exporting the run animation cycles": [
          "Student challenge: Exporting the run animations"
        ],
        "Animating the crouched walk cycles": [
          "Section introduction",
          "Creating the forward crouched walk cycle",
          "Creating the left forward crouched walk cycle",
          "Creating the right forward crouched walk cycle",
          "Creating the crouch left forward 45 cycle",
          "Creating the crouch right forward 45 cycle",
          "Creating the backwards crouched walk cycle",
          "Creating the crouch right back cycle",
          "Creating the crouch left back cycle",
          "Creating the left and right back 45 crouched walk cycles"
        ]
      },
      "requirements": [
        "No experience needed. Follow along and create the animations from scratch, or use the included animation files, and learn the theory of creating a full set of game ready animations and how to set them up in an animation graph in Unreal Engine 5.",
        "All software needed for the course (Blender and Unreal engine 5) can be downloaded for free, and the included character mesh* and animation files means everything is included to complete the course. If you have never done animation before, the course will guide you through each step, in easy to follow sections."
      ],
      "description": "( Now includes Blender 4.0 and higher updates)\nThis course was created to help students or anybody learn the full game animators pipeline from Blender to Unreal. You will learn how to create a professional custom animation rig, and animate by hand, a full set of idle, transition and movement animations, and how to export correctly, and bring them all into the Unreal engine.\nFrom there you will learn how to set up an animation graph and character blueprint, and create a custom character controller that will allow you to walk, run, crouch, jump and more. No experience required, the full process is walked through in easy to follow steps broken down into logical sections, each building on the last, with lots of tips and tricks to make your animations work correctly as a complete set as used in a modern AAA game.\nNo coding knowledge is required as everything will be created in Unreal's blueprint system using nodes, just simply follow along and build up the character controller bit by bit, and by the end of the course, you will have a fully playable character that can move around the game world, with the satisfaction and knowledge that you created the whole thing from scratch.\nSo lets get started!\n\n\n* Credit to \"BlendTek\" for the use of the character mesh",
      "target_audience": [
        "Beginner game developers interested in learning how to create professional game ready character animations, and how to implement them into a game engine.",
        "Students wanting to get a better understanding of the full pipeline required for a games animator."
      ]
    },
    {
      "title": "Simple HTML5 Game Development",
      "url": "https://www.udemy.com/course/html5-simple-game-development/",
      "bio": "Learn to build a complete web or mobile video game using HTML5. No previous programming or web development required.",
      "objectives": [
        "Build a basic web page with HTML",
        "Use CSS to add essential style to your page",
        "Understand the main concepts of programming (variables, conditions, loops, branches, functions, and arrays) using JavaScript",
        "Use JavaScript and the Document Object Model to build a basic interactive web page",
        "Understand how a Scene works in the simpleGame library, and how that adds space and time elements to your game.",
        "Build a basic Sprite object and learn how to build custom sprites to represent any game element you can imagine",
        "Practice object-oriented programming to build complex and interesting game objects that can respond to user input, collisions, and other game events",
        "Manage standard game events like input, boundary-detection and collisions",
        "Manage sound effects",
        "Learn to use the mouse and keyboard for basic user input",
        "Explore how physics can be used for more interesting control like space vehicles, realistic acceleration, and skidding.",
        "Extend your games to mobile platforms with touch and tilt input, and learn to add icons and full-screen behavior to your games",
        "Learn not just the code, but the process of building your own game from idea to reality",
        "Explore the simpleGame engine and see how it does all the magic. Learn how you can extend it yourself for even more power."
      ],
      "course_content": {
        "Building a basic page - and an epic adventure": [
          "Overview of the adventure game",
          "Creating a basic HTML page",
          "Adding Pictures and Links",
          "Modifying a page with CSS",
          "Adding Audio and Building the Adventure Game",
          "Building an adventure game with basic HTML and CSS"
        ],
        "Talking to the Page": [
          "Introducing the word game",
          "Building a basic form",
          "Basic Input and Output",
          "Creating a good-looking form with CSS",
          "Building the word story game",
          "Basic input and output"
        ],
        "Coding Like a Pro": [
          "Managing Data Types",
          "Adding Branching Behavior",
          "Looping with the For Loop",
          "More flexible loops with While",
          "Enhancing functions with parameters and return values",
          "Using arrays",
          "Coding like a pro"
        ],
        "Building a text-based game": [
          "Designing the number guesser",
          "Generating random numbers",
          "Building the number guesser",
          "Random numbers and guessing game"
        ],
        "Introducing the Game Engine": [
          "Introduction to the SimpleGame Engine",
          "SimpleGame Overview",
          "Basic Keyboard Interaction",
          "Using the simpleGame Practice Tool",
          "overview of 2d games quiz"
        ],
        "Creating Game Elements": [
          "Introducing Objects",
          "Adding Sound Effects",
          "Detecting Collisions",
          "Working with the Timer",
          "Creating Game Elements Quiz"
        ],
        "Getting to a Game": [
          "Building a game design diagram",
          "Building prototypes: the Frog and the Fly",
          "Adding collisions and sound effects",
          "Working with multiple flies",
          "Adding timing and a game reset feature",
          "Getting to a Game Quiz"
        ],
        "Motion and Animation": [
          "Simple Physics - motion in space",
          "Adding (kind of) realistic acceleration and drag",
          "Drifting and Skidding made simple",
          "Adding basic gravity",
          "Fun with orbital mechanics",
          "Adding weapons and projectiles to sprites",
          "SpriteSheet animation",
          "Physics and motion"
        ],
        "Going Mobile": [
          "Overview of Mobile HTML5 game development",
          "Using a hosting service and setting the game size",
          "Using buttons and the touch interface as a virtual mouse",
          "Working with the virtual joystick",
          "Working with tilt interfaces",
          "Going Mobile Quz"
        ],
        "SimpleGame in depth": [
          "Understanding the scene class",
          "Using Sprites",
          "Using sounds, keyboard, and the timer",
          "Using the virtual joystick and accelerometer",
          "SimpleGame.js in Depth"
        ]
      },
      "requirements": [
        "Access to an HTML5 - compliant browser (Google Chrome 23 or greater recommended)",
        "Access to a higher-end text editor (specific examples linked in course)",
        "Any major operating system (Windows 7+, Mac OSX, Linux)",
        "Comfort with middle school math (coordinate systems, basic arithmetic, some knowledge of angles)"
      ],
      "description": "Learn to build web and mobile games with HTML5.  Even if you have no experience in programming or web development, you can create your own games.\nThis course begins with a quick overview of web development in HTML5 and shows you the basic web framework used in all modern pages.  It then teaches essential programming concepts using the JavaScript language embedded in all modern browsers.\nThe course centers around a game engine designed especially to be easy to understand. The game engine and all the other tools needed for the course are completely free. You won't need to purchase anything to build great games.\nBy the end of the course, you'll be able to build 2D games on the web as well as on mobile devices like the iPad and mobile phones.",
      "target_audience": [
        "Anyone interested in game development.",
        "Web or programming experience is a bonus, but not required",
        "Suitable for middle school, high school, or adult learners. Motivated younger students will also enjoy the course, but they may need help from an adult. Perfect course for kids and parents to take together!",
        "We&#39;ll have fun, but making a game is complex, and requires a commitment of time and effort. You&#39;ll only get a lot out of this course if you put a lot in."
      ]
    },
    {
      "title": "Unity RPG Inventory Systems Asset Pack: Behind The Scenes",
      "url": "https://www.udemy.com/course/unityinventory/",
      "bio": "Review and integrate an RPG-Style Inventory System. All Code Base Provided As A Flexible Asset Pack",
      "objectives": [
        "Implement and lay out your inventory UI (user interface) so that the panels, buttons, slots and icons make sense.",
        "Use useful UI components like the Scroll View Asset and the Grid Layout Group to more easily structure your inventory UI.",
        "Use the drag-and-drop system so that players can pick up inventory items and move them to other slots, or drop them into the world.",
        "Use a pickup system with scriptable objects providing the data for specific inventory items.",
        "Use and modify the equipping system so that players can equip weapons and armor from their inventory.",
        "Interface between what the player sees in their inventory and what your backend system knows should be stored in the inventory.",
        "Use and modify a tooltip system that gives the player information about their inventory items.",
        "Make items stackable so that if a player has more than one of an item it only takes up one inventory slot and displays how many items have been stacked.",
        "Refactor your code so that when a new feature is added, it propagates to all areas of your project without breaking your game.",
        "Build a user interface mockup in Unity before your functionality is in place."
      ],
      "course_content": {
        "Intro & Setup": [
          "Welcome To The Course",
          "Architectural Overview: Recap",
          "Which Unity Version?",
          "What Are We Creating?",
          "How To Follow This Course",
          "Get The Project",
          "The START HERE Commit",
          "Questions & Getting Support",
          "Asset Partners & Licenses"
        ],
        "Adding UI": [
          "Unity UI Primer",
          "Show & Hide Panels",
          "Placing & Slicing UI Assets",
          "The Scroll View Asset",
          "The Grid Layout Group",
          "Drag & Drop Scripts",
          "Overview Of Interfaces",
          "More Dragging & Dropping",
          "Drag & Drop Challenge"
        ],
        "Inventory Backing Store": [
          "Inventory Script Introduction",
          "Inventory Scriptable Objects",
          "Understanding Inventory.cs",
          "InventorySlotUI.cs Changes",
          "Using The Debugger Tool",
          "Inventory Directory Structure",
          "Item ID Explained",
          "GetFromID()",
          "Using Redraw()"
        ],
        "Saving & Loading System": [
          "Saving System Overview",
          "Inventory System Saving"
        ],
        "Pickup System": [
          "Pickup Architecture Overiew",
          "Spawning Pickups",
          "Pickup Spawner",
          "Clickable & Run-over Pickups"
        ],
        "Drop System": [
          "Drop System Architecture",
          "Using ItemDropper.cs",
          "Integrate Dragging With Dropping"
        ],
        "Tooltips": [
          "Virtual Methods Overview",
          "Tooltips Architecture",
          "Tooltip Prefab",
          "Tooltip Spawner"
        ],
        "Stackable Items": [
          "Stackable Items Overview",
          "Refactor Overview",
          "Adding and Removing Stackables",
          "Stacking UI",
          "Finding An Existing Stack",
          "Saving Stacked Drops",
          "Saving Stackable Inventory"
        ],
        "Equipment System": [
          "Equipment system Overview",
          "Mock Equipment UI",
          "Mock Equipment Dragging",
          "Equipment Component",
          "Equipment Saving"
        ],
        "Action System": [
          "Action System Overview",
          "Consumable Items"
        ]
      },
      "requirements": [
        "You should be able to write basic C# (loops, conditionals, components, etc)",
        "Some familiarity with Unity's APIs is helpful.",
        "You should know your way round Unity's editor.",
        "We recommend you take at least the first half of our Complete Unity Developer 2D or 3D, or equivalent, as a pre-requisite."
      ],
      "description": "Learn how to include an inventory system for any of your projects that require items to be picked up, dropped, moved and equipped!\nThis highly acclaimed series was over 200% funded on Kickstarter, and is designed for intermediate users of Unity. We recommend you take at least the first half of our Complete Unity Developer 2D or 3D, or equivalent, as a prerequisite.\nThis course is the second in our RPG series, you don't need to have completed the first part of the RPG Series (the RPG Core Combat course) but it will give you an advantage if you already have.\nBy enrolling in this course you will have access to the completed Inventory system as an asset pack which you can import into your existing project. We will also take you step-by-step through the process of using, modifying, improving and understanding the code that drives the asset pack.\nPlease note, this course follows a different format. Rather than building the inventory system from scratch, line-by-line, we will provide you with our code and then explain how the code works so that you understand it fully. This is an approach that works well for folks who are already competent with Unity and C# and wanting to \"get to the answer\" more quickly.\nAlthough this course is part of our RPG series, you can use the inventory system for any of your projects that require items to be picked up, dropped, moved and equipped.\nIn this course we will cover the following systems:\nThe click-to-pickup and the runover-to-pickup systems\nThe dropping system\nThe tooltip overlay system\nThe stackable item system\nThe equipping system\nThe saving and loading system\nThe course covers many advanced programming principles and goes into great depth to discuss good code architecture practices. We cover Interfaces, Virtual Methods, the debugging tool and many more things that aren't covered in our beginner courses.\nYou will have access to a course forum where you can discuss topics on a course-wide basis, or down to the individual video. Get plugged into our communities of amazing developers on Facebook (nearly 20k), in our own TA-curated Community (17k views/day), and our student chat group (10k live at any one time). Check out our reviews to see how people love this feature.\nBuilding an RPG is an amazing way to level-up your game development skills, so why not join us and get started improving your game development right now?",
      "target_audience": [
        "This course is for intermediate Unity users who want to create their own Inventory System.",
        "Our Complete Unity Developer course provides the perfect pre-requisite."
      ]
    },
    {
      "title": "Learn To Create a Card Combat Game With Unity & C#",
      "url": "https://www.udemy.com/course/unity-card-combat/",
      "bio": "Game development made easy. Learn C# using Unity and create your own card battling game!",
      "objectives": [
        "Learn C#, a modern versatile programming language",
        "Understand the capabilities of 3D development in Unity",
        "Develop strong and transferrable problem solving skills",
        "Gain an understanding of the game development process",
        "Learn how object oriented programming works in practice"
      ],
      "course_content": {},
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2021.3 or newer"
      ],
      "description": "Learn how to create and program your very own card combat game using Unity, an industry-standard game development program used by large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to understand such game elements as:\nA Turn-Based Card Battling System\nPlacing Cards on a 3D Board\nHolding & Highlighting a hand of Cards\nMana Point System For Cards\nDamaging Player & Enemies\nAudio systems\nEnemy AI with variable playstyles\nBattle Select System\nand much more...\nThe course also includes a complete version of the project to use for your own reference to ensure everything in your game works as it should!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own card battling games",
        "People who want to create and publish their own games",
        "Complete beginners with an interest in learning game development",
        "Developers who want to re-skill across to game development",
        "People interested in working in the game design industry",
        "Competent and confident with using a computer"
      ]
    },
    {
      "title": "Python Game Development™: Build 5 Professional Games",
      "url": "https://www.udemy.com/course/python-game-developmenttm-build-5-professional-games/",
      "bio": "Make games like Solitaire, Space Shooter, Chain Reaction, Pac-man and many more using Python programming Language!",
      "objectives": [
        "Master some complex games with most easiest programming language",
        "Develop a basic logic of programming with Python",
        "Will know how to make best GUI games with Python",
        "Will know how to use arrays of python libraries",
        "Will learn advanced concepts of python like OOP, Functional Programming, Decorators etc.",
        "Python basics like data-types, loops, decision-makings, file handling, libraries, modules, date-times etc."
      ],
      "course_content": {},
      "requirements": [
        "Any machine with OS (Windows, MacOSX, and Linux)",
        "No programming background is essential (if there is, it will be useful)",
        "No prior knowledge of Python is required",
        "Fair internet connection is required to install some softwares and python libraries"
      ],
      "description": "Have you ever wanted to build a game with a graphical interface but didn't know how to? Maybe you even know how to create tools on a command line but have no idea how to convert it into a graphical interface that people can click on. In this course, we will be learning Python GUI Programming + Turtle + other advanced python modules to build graphical user interfaces (GUI) and games from scratch.\nGame projects covered:\n1. Solitaire\n2. Space Shooter\n3. Chain Reaction\n4. Pac-man\n5. Car Racing\n6. Snake and many more.\n\n\nBasic Python course Highlights:\nInstalling Python\nRunning Python Code\nStrings\nLists\nDictionaries\nTuples\nSets\nNumber Data Types\nPrint Formatting\nFunctions\nScope\nargs/ kwargs\nBuilt-in Functions\nDebugging and Error Handling\nModules\nExternal Modules\nObject-Oriented Programming\nInheritance\nPolymorphism\nEncapsulation\nAdvanced Methods\nIterators\nClosures\nand much more!",
      "target_audience": [
        "Anyone who wants to learn Python Programming by making games",
        "Anyone who wants to know blender scripting",
        "Anyone who wants to develop games but doesn't have any programming skills"
      ]
    },
    {
      "title": "Unity By Example : 20+ Mini Projects in Unity",
      "url": "https://www.udemy.com/course/unity-game-development-by-example/",
      "bio": "Learn Unity Game Development , Build 20+ Mini Projects Using Unity & C# . Learn Unity with this Project Based course",
      "objectives": [
        "Learn Unity The Fun Way by Building Mini Projects",
        "Create 20+ Mini Projects Using Unity",
        "Learn C# Scripting Basics",
        "Create Some Fully Function Games",
        "Learn To Build Games for Android",
        "Learn Useful Unity Tips & Tricks"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of Unity & C# is Required",
        "Unity Personal Edition and Visual Studio or Any other Compatible code editor is required to follow along"
      ],
      "description": "Want to Learn Unity by Building lots of Mini Projects?\nThen this is the perfect course for you.\nAfter Finishing this course You will be able to build 20+ Mini Projects using Unity & C#\nList Of Mini Projects You Will Build In This Course :\nBuild A 2D Shooter Game in 1 Hour\nDesign & Animate a Game Character\nCreate Infinite Scrolling Background\nBuild Your First Android Game\nCreate Your First 3D Model & Import into Unity\nCreate A Candy Catching Game\nIntegrate Video ads in Your Games\nCreate Intelligent Enemies\nBuild a 3D Endless Game\nCreate Snowfall Particle Effect\nand many many more\nI have taught Unity Game Development & C# Scripting to thousands of people on my Youtube Channel: Charger Games. I love teaching complex concepts in a simple way, so even if you have no previous coding experience, no need to worry, I'm gonna teach you everything step by step in the perfect order.\nLearn the basic concepts, tools, and functions that you will need to build fully functional Games with C# and the Unity game engine.\nBuild a strong foundation in Unity Game Development with this course.\nLearn to use 2D & 3D features of Unity\nBuild Fully functional Games with Unity\nLearn Basics of C# Programming\nCreate 20+ Mini Projects in Unity\nLearn to build Android Games in Unity\nUse skills learned from this course in any Unity project\nA Powerful Skill at Your Fingertips  Learning the fundamentals of Unity 2D & 3D Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building games.\nJobs in unity game development are plentiful, and being able to learn C# Scripting along with Unity game development will give you a strong background to more easily build awesome games.\nContent and Overview  Suitable for beginning programmers, through this course of 100+ lectures and 20+ hours of content, you’ll learn Unity 2D & 3D game development by building 20+ Mini projects. You can use this skills in any of your Unity project later on.\nStarting with the installation of the Unity , Visual Studio , this course will take you through the process of learning game development with unity by building 20+ mini projects in unity.\nFor the beginner programmers there's a separate section about C# Scripting, which will teach the fundamentals of C# Scripting for game development in Unity.\nWith these basics mastered, the course will take you through building different example mini projects with unity to learn more about the process of creating games with Unity.\nStudents completing the course will have the knowledge to create fully functional Games with Unity and C# or use their C# skills to Build any other useful thing that they want.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course",
      "target_audience": [
        "Anyone who wants to Learn Unity by Building Small Mini Projects",
        "Unity & C# Developers willing to Brush up their Skills",
        "Beginner Unity developers who are interested in building mini projects"
      ]
    },
    {
      "title": "Learn to Code in Game Maker Language",
      "url": "https://www.udemy.com/course/learn-to-code-in-game-maker-language/",
      "bio": "Learn the basics of game development in GML.",
      "objectives": [
        "Learn to understand and write GML code",
        "Learn how to create a maze game",
        "Apply knowledge to other programming languages"
      ],
      "course_content": {
        "Introduction": [
          "Resources",
          "Creating A Project",
          "UI Overview",
          "Changing Themes",
          "Custom Themes",
          "External Editors",
          "Importing Sprites",
          "Origin Point",
          "Room Editor",
          "Backgrounds and Tiles",
          "Objects",
          "Creating an Application",
          "Importing and Exporting Projects",
          "Section 1 Quiz"
        ],
        "GML": [
          "Displaying Text",
          "Comments",
          "Variables",
          "Naming Variables",
          "Arithmetic",
          "PEMDAS",
          "Scope",
          "Global Variables",
          "Macros",
          "String Concatenation",
          "String Concatenation",
          "If-Else Statements",
          "Comparison Operators",
          "Conditional Operators",
          "Boolean Expressions",
          "Switch Statements",
          "Functions and Return Values",
          "For Loops",
          "While and Do-Until Loops",
          "One-Dimensional Arrays",
          "Two-Dimensional Arrays",
          "Create, Step, and Draw Events",
          "Alarms",
          "User Events",
          "Keyboard and Ord",
          "X and Y Positions",
          "Scripts",
          "Optional Arguments and Intellisense",
          "Default Arguments",
          "Array Accessors",
          "Objects and Instances",
          "Instances",
          "Maps",
          "Asynchronous Messages",
          "Section 2 End",
          "Section 2 Quiz"
        ],
        "Gummy's Maze": [
          "Resources",
          "Goals",
          "Importing Sprites",
          "Main Menu",
          "Player Movement",
          "Views",
          "Player Animation",
          "Enemies",
          "Death",
          "Game Over Screen",
          "Background",
          "Adding The Goal",
          "Collectibles",
          "Collectible Blockade",
          "End Game",
          "Finished Project",
          "Section 3 Quiz",
          "End of Course"
        ]
      },
      "requirements": [
        "Students will need to be able to perform basic tasks on a computer (such as installing software or unzipping folders)",
        "Students will need to download and install GameMaker: Studio"
      ],
      "description": "Update - May 30th, 2023:\nThis course covers an older version of GameMaker: Studio; A newer version of GameMaker has since been released, which made a lot of changes to the editor and added new features to GML. While the core programming concepts taught in this course still apply, there may be discrepancies in the sections that discuss GameMaker-specific topics.\n\n\nLearn the the basic concepts of programming while developing games in the fun and friendly language Game Maker Language (GML).\nLearn and Master Core Programming Concepts With GML.\nTypes and Operators\nLoops and Conditionals\nFunctions and Return Values\nObjects and Instances\n\n\nA Powerful Tool to Create Amazing Games\nWe'll learn about the essentials of programming. By using GameMaker: Studio, we can take what you're learning and immediately apply it to actual games. You will also get a glimpse of the structure of video games.\nGameMaker: Studio is a powerful and growing tool that is breaking its way into professional development. Developers often use GameMaker: Studio to quickly prototype and create games that don't require the power of other languages, like C++, Java, and C#. Hotline Miami, Spelunky, TowerFall Ascension, and Gunpoint are only a few examples of the great games that can be created with GameMaker: Studio.\nContent Overview\n\nWhile designing this course, I kept absolute beginners in mind. When you begin this course, you will be taken from the very basics and work your way up to the more complex concepts. There will be several quizzes along the way to test your knowledge of the concepts you are learning.\nBy the end of the course, you will understand core programming concepts, how to create games in GameMaker: Studio, and you will have a cool maze game that you can show off to your friends and family.",
      "target_audience": [
        "Anyone who wants to easily create games",
        "Beginner programmers who want a friendly environment to learn in"
      ]
    },
    {
      "title": "Python Game Development™ : Build 11 Total Games",
      "url": "https://www.udemy.com/course/python-game-development-build-11-total-games/",
      "bio": "Build games like Mario, Angry Bird, Flappy Bird and many more with the Python --Easiest Programming Language",
      "objectives": [
        "Master some complex games with most easiest programming language",
        "Develop a basic logic of programming with Python",
        "Will know how to make best GUI games with Python",
        "Will be ready to deploy new games"
      ],
      "course_content": {},
      "requirements": [
        "A computer—any will do!",
        "There are no other requirements! Give it a go!"
      ],
      "description": "Have you ever wanted to build a games with a graphical interface but didn't know how to? May be you even know how to create tools on a command line but have no idea how to convert it into a graphical interface that people can click on. In this course we will be learning Python GUI Programming + Turtle + other advanced python modules to build graphical user interfaces (GUI) and games from scratch.\nGames You will make throughout course:\nCannon game\n\nFlappy bird from turtle\nPacman\nPong\nSnake\nTiles\nTron\nTic Tac Toe\n\n\nFour major Projects:\nFlappy Bird from Pygame\n\nAngry Bird from Pygame and Pymunk\nRace 2D\nMario Game\nWe will learn from basics of Python i.e. variables, slicing, string, some module, arithmetic and logical operations, looping, functions, object oriented programming.\nAfter that we will learn the basics stuff of Pygame and OpenGL and Blender basics stuff.",
      "target_audience": [
        "Anyone who wants to develop games but doesn't have any programming skills",
        "Anyone who wants to learn Python Programming by making games",
        "Anyone who wants to know blender scripting",
        "Anyone who wants to know basics pygame and openGL python module"
      ]
    },
    {
      "title": "Unreal Engine 4 C++ The Ultimate Shooter Course",
      "url": "https://www.udemy.com/course/unreal-engine-the-ultimate-shooter-course/",
      "bio": "Master Unreal Engine 4 by Creating a Complete Shooter Game!",
      "objectives": [
        "Learn Unreal Engine game development by creating a complete shooter game.",
        "Get in-depth experience with Unreal Engine Animation, Materials, Special Effects, and gameplay!",
        "Learn Unreal Engine's code base.",
        "Learn how to use Unreal Engine 4 to create an action-based shooter game!"
      ],
      "course_content": {},
      "requirements": [
        "Understanding of the basics of C++ (take my C++ course!)"
      ],
      "description": "Please note that this course in done in Unreal Engine 4 and not in Unreal Engine 5.\n\n\nThis is the most comprehensive Unreal Engine tutorial series on the internet. You will create a shooter game complete with AAA quality gameplay mechanics. Learn the theory behind the gameplay mechanics of shooter games, then implement them in this beautiful game project. Topics covered are:\nCharacter creation and movement\nInput for PC and console controllers\nExtensive use of Animation Blueprints (and Anim Instances, their C++ parents)\n1D and 2D Blendspaces\nStrafing\nTurn-in-place\nAim Offsets\nInverse Kinematics\nAnimation Curves\nCharacter lean when running\nCrouching (with dynamic capsule resizing)\nTurn hips while running\nWeapon fire with recoil animations\nReloading\nWeapon blast and impact particles\nWeapon beam particles (smoke trails)\nBullet shell eject particles\nSound effects\nBlending animations per bone, by bool, and by enum - play one animation with one part of the body (running or crouching) while simultaneously playing another animation with another part of the body (reload, aim, or weapon fire)\nAttach and equip different weapons (pistols, submachine guns, assault rifles)\nAutomatic and semi-automatic gunfire\nMove different gun parts (the clip/magazine, and pistol slide) during animations\nCamera zoom while aiming\nDynamic crosshairs that spread in reaction to:\nCharacter speed\nWeapon fire\nAiming\nJumping\nDifferent crosshairs per weapon\nWidget components, showing:\nItem names\nItem types\nAmmo counts\nItem rarity\nHUD animations\nFull item inventory system\nData tables, in Blueprints and C++\nCurves to control:\nItem movement during pickup\nColor and brightness pulse for material effects\nMaterial creation, including:\nPost-process materials\nDynamic material instances\nSetting material properties from C++\nDriving material properties with curves\nMaterial functions\nBlending materials together\nOutline effects\nGlow/pulse effects\nRetargeting animations\nRetargeting whole Animation Blueprints\nNumerous gameplay algorithms\nUse of data structures, including:\nstructs\nenums\narrays\nmaps\nand more\nAnimation montages\nAnim Notifies for sounds, weapon trails, and custom notifies\nSync markers for footsteps and sync groups\nThe course comes with a huge amount of assets, including:\nSounds\nTextures\nParticle effects\nMeshes\nDelegates\nInterfaces\nDynamic footsteps that spawn different sounds and particle systems depending on the surface type\nPhysical materials and surface types\nNiagra particle systems\nLine traces\nEnemy AI\nBehavior Trees and Blackboard Components\nMultiple enemy types with varying levels of Health, Damage, Size and Movement Speed\nHeadshot damage, with:\nHigher damage for headshots\nNumber widgets that pop up and animate with bullet hits\nDifferent colored numbers for headshots\nCharacter and enemy health bars\nEnemy patrol, agro, chase and attack player\nDeath mechanics\nStun mechanics\nMelee attacks with melee weapon trails\nExplosives that cause damage and death\nLevel prototyping\nCreating full levels based on our prototypes using professional assets\nLight baking\nPost-process effects",
      "target_audience": [
        "Unreal Engine beginners who understand the basics of C++.",
        "Unreal Engine intermediate developers who wish to advance in skill level.",
        "Expert Unreal Engine developers to wish to expand their skillset.",
        "Those who wish to make shooter games.",
        "Anyone who wants to have fun and make games!"
      ]
    },
    {
      "title": "Unity NEW Multiplayer Photon Fusion Game Development Course!",
      "url": "https://www.udemy.com/course/unity-multiplayer-2dgame-fusion/",
      "bio": "Build a 2D Online Multiplayer Game In Unity & Photon Fusion! Learn Photon Fusion networking with C#, 2024 Guide!",
      "objectives": [
        "How to create an Online Multiplayer game with Unity & Fusion!",
        "Create multiplayer features such as - match timer, player chat bubble, player damage, syncing player visuals etc",
        "How to work with the new networking solution - Fusion (client-host mode)",
        "Understand the important networking topics such as- Client side prediction, Server reconciliation, lag compensation etc",
        "How to easily test a client and a host (using ParrelSync).",
        "How to simulate lag for testing a multiplayer game."
      ],
      "course_content": {
        "Introduction - Client Server Model & Creating Our Lobby": [
          "Client-Server Architecture in Multiplayer Games",
          "Fusion 2 Welcome",
          "Importing & Setting up Fusion + Importing Game assets!",
          "Lobby Part 1 - Creating Our Lobby UI",
          "Lobby Part 2 - NetworkRunner",
          "Lobby Part 3 (END) - Creating/Joining to a room and loading our MainGame Scene"
        ],
        "Ticks, Fixed Update Network, Client Side Prediction etc.": [
          "Fixed Update Network & Ticks",
          "Proxies & Interpolation data sources"
        ],
        "Developing Our Main Game": [
          "Creating & Spawning Our Player!",
          "Syncing our Player movement",
          "Enabling Client Side Prediction + Player Jump logic",
          "Syncing our Player Nickname & Creating a Camera follow",
          "Syncing Our Player Weapon Rotation!",
          "Syncing Walking Animation",
          "Flipping Our Player",
          "Syncing Muzzle effect + Weapon kick Animation!",
          "Creating Our Bullet PART 1",
          "What Is Lag Compensation",
          "Doing Lag Compensation, Bullet PART 2",
          "Player Health Controller, Bullet PART 3",
          "Camera Shake & Blood Hit Effect",
          "Player Die Logic & Animation!",
          "Respawn logic (reset values and position)",
          "Respawn UI & Timer Logic",
          "Creating Object Pooling!",
          "Match Timer PART 1",
          "Match Timer PART 2",
          "Preventing Player Jump Spam & Layer Matrix",
          "Importing Gameplay Graphics + Physics 2D Material Fix",
          "Creating Death Ground & Camera Boundaries",
          "Creating a Bubbles Chat Logic!"
        ],
        "Extra Videos & End Of The Course!": [
          "EXTRA VIDEO #1 - Simulating Lag + Fusion Stats",
          "EXTRA VIDEO #2 - Fixing Bugs & Updating API!",
          "END OF THE COURSE! - What's next?"
        ],
        "Fusion 2 - How To Upgrade": [
          "Converting to Fusion 2 - PART 1",
          "Converting to Fusion 2 - PART 2",
          "Converting to Fusion 2.0.4 Stable"
        ]
      },
      "requirements": [
        "If you don't have a bit of experience with creating multiplayer games, this could be a challenge (a fun one) but a challenge it will be! So either get exited or skip this course for now!"
      ],
      "description": "Summary -\nHey there, fellow indie game developer! if you're interested in learning how to create a 2D multiplayer game with Fusion, then very cool, welcome -\nIn this Udemy course, we'll dive deep into the world of multiplayer game development using Unity and the new networking solution, Fusion (made by the developers from Photon).\nWe will learn about the fancy topics such as - client-host model, client-side prediction, server reconciliation, proxies, fixed update network and so on.\nYou'll learn how to create a lobby matchmaking system, including joining specific rooms/creating random ones, create object pooling with Fusion, respawn logic, match timers and end logic, player chat bubble logic, and more!\nAnd don't worry about missing out on anything - this course will be updated for any major API changes.\nPlus, you'll receive project files at the end of each video, along with extra recommended links about the current subject.\nAnd to top it all off, you'll have access to a Discord channel where you can get help and help others!\nSo if you're interested in learning multiplayer development and more specifically how to work with Fusion, then enroll in this course today and start creating your own 2D multiplayer game in Unity with Fusion.\n\n\nWhat do you Get?\nProject files at the end of each video.\nLink to the Discord channel where you can get help and help others!\nExtra recommended links at the end of each video about the current topic.\nGame assets throughout all of the course.\n\n\nCourse Strong Points-\nLearning the fundamentals of the server-client model (why do we want to use this kind of a\nmodel), explaining what is client side prediction, server reconciliation and so on.\nLobby matchmaking - Create room as a host, join a specific room as a client, join a random room or create one.\nUnderstanding what are proxies, different ways we interpolate them, fixed update network etc.\nObject pooling with Fusion for all network objects.\nRespawn logic.\nMatch timer and end logic.\nPlayer chat bubble logic.\nPlayer damage and health logic.\nSyncing player visuals - weapon kick, fire muzzle effect, animations etc.\nHow to simulate lag for testing.\nHow to easily test a client and a host (using ParrelSync).\nCourse will be updated for any major API changes!.\nAnd more\n\nSo that's about it, see you in the Discord channel!",
      "target_audience": [
        "Any unity game developer that is interested in learning how to develop with Photon Fusion!",
        "Any unity game developer who is interested in learning how to create a 2D Multiplayer Game with a client-host model.",
        "Intermediate Unity developer who loves making multiplayer games.",
        "Anyone with a basic experience with Fusion/Multiplayer development who wants to deepen their knowledge in the multiplayer development world."
      ]
    },
    {
      "title": "Learn To Code By Making a 2D Platformer in Unity",
      "url": "https://www.udemy.com/course/unity2dplatformer/",
      "bio": "Game development made easy. Learn C# using Unity and create your very own 2D Platformer",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Understand the capabilities of 2D development in Unity.",
        "Develop strong and transferrable problem solving skills.",
        "Gain an understanding of the game development process.",
        "Learn how object oriented programming works in practice."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Downloading & Installing Unity",
          "Unity Workspace Overview"
        ],
        "The First Level": [
          "Importing Spritesheets/Artwork",
          "Creating Our First Level & Platforms",
          "Creating & Using Prefabs"
        ],
        "The Player": [
          "Creating the Player",
          "Creating Your First Script",
          "Moving The Player",
          "Making The Player Jump",
          "Finding The Ground",
          "Animating the Player / Creating animations for the player",
          "Setting up The Animation Controller",
          "Controlling Animations with Code",
          "Flipping The Player"
        ],
        "The Camera": [
          "Basic Camera Control",
          "Moving the Camera with Code",
          "Using Lerp to smoothly position the camera",
          "Fixing On Screen Lines",
          "Stop Player Sticking To Walls"
        ],
        "Dying & Respawning": [
          "Creating a Kill Plane",
          "Making Checkpoints",
          "Respawning at Checkpoint",
          "Controlling Respawns with a Level Manager",
          "Delaying Respawn with Co-Routines"
        ],
        "Level Pieces": [
          "Creating Spike Trap",
          "Particle Effects",
          "Removing Game Objects",
          "Moving Platforms",
          "Sticking Player to Platform",
          "Creating a Moving Danger",
          "Using Sorting Layers",
          "Collectibles"
        ],
        "User Interface (UI)": [
          "Creating a UI & Tracking Coins",
          "Adding Health to UI",
          "Tracking Player Health",
          "Applying Health To Our UI Using Switch Statements"
        ],
        "Making Enemies": [
          "Creating & Animating Our First Enemy",
          "Controlling Spider & Hurting The Player",
          "Creating A Patrolling Enemy",
          "Destroying Enemies",
          "Bouncing On Enemies",
          "Modifying Enemy Stomp",
          "Make Enemies & Items Respawn",
          "Using Arrays to Store Objects",
          "Using For Loops to Reset Objects",
          "Resetting Spider Specifics"
        ],
        "Player Systems": [
          "Getting Knocked Back by Enemies",
          "Becoming Invincible on Knockback",
          "Adding a Lives System",
          "Picking Up Extra Lives",
          "Creating a Game Over Screen",
          "Creating a Health Pickup",
          "Bonus Life For Coins"
        ],
        "Sound": [
          "Adding Sound Effects To Our Player",
          "Adding Sound Effects For Coins",
          "Adding Music",
          "Changing Music In-Game"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 5.3 available for free from unity3d.com"
      ],
      "description": "Note: a newer version of this course is now available under the title 'Learn To Code By Making a 2D Platformer in Unity & C#'. This new course features a complete overhaul and uses the latest version of Unity as well as using updated methods to make learning & developing easier than ever!\n\n\nLearn how to create your very own platformer game using Unity3D, an industry-standard program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\nA character to control\nCollectibles such as coins, extra lives & extra health\nDifferent types of enemies to combat\nDangers such as Spikes, Saws & moving platforms\nUser Interface with interactive menus\nMultiple levels and a level select screen\nA unique and challenging boss battle\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Competent and confident with using a computer.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "Anyone who wants to make their own 2D game.",
        "People interested in working in the game design industy.",
        "Please who want to create and publish their own games."
      ]
    },
    {
      "title": "How to Make Tile Based Platform Games in Gamemaker",
      "url": "https://www.udemy.com/course/how-to-make-tile-based-platform-games-with-gamemaker/",
      "bio": "Learn the basics to build fun and creative platform games, including tricks to add polished and professional features.",
      "objectives": [
        "You will develop a robust platform engine that you can use for future games you make.",
        "You will learn how to do fast tile based collisions, and have the skills to incorporate it into your own games.",
        "You will learn how to implement a customizable lighting system that any object in the game can use.",
        "You will learn how to build custom particles that interact with the environment.",
        "You will learn how to build a Finite State Machine, and use it to efficiently control your player and enemies.",
        "You will learn how to implement wave based attacks, player traps, cameras, fade transitions, highscore saving, custom tooltips, screenshake and more."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Rooms",
          "Moving the Player",
          "Player Animations",
          "Introduction"
        ],
        "Finite State Machines": [
          "Scripts",
          "States",
          "State Arrays",
          "Attack State",
          "Finite State Machines"
        ],
        "Collisions": [
          "Tile Collision Setup",
          "Horizontal Tile Collisions",
          "Vertical Tile Collisions",
          "Tiles"
        ],
        "Jump and Block": [
          "Jump State",
          "Block State",
          "Jump and Block"
        ],
        "Improving Jump": [
          "Controlled Jumps",
          "Double Jumps",
          "Jump Effects",
          "Improving Jump"
        ],
        "Player Improvements": [
          "Crouch and Block",
          "Mask Array",
          "Controller Support",
          "Player Improvements"
        ],
        "Cameras": [
          "Cameras",
          "Cameras"
        ],
        "Tiles": [
          "Laying Tiles",
          "Layering Tiles",
          "Animated Tiles",
          "Parallax Background",
          "One Way Platforms",
          "Tiles"
        ],
        "Frog Enemy": [
          "Frog Enemy",
          "Frog Idle State",
          "Frog Jump State",
          "Frog Jump Start State",
          "Frog Jump Land State",
          "Check for Ledges",
          "Frog Attack State",
          "Frog Attack Warning",
          "Enemy Frog"
        ],
        "Player Attack": [
          "Player Attack",
          "Hurting the Enemy",
          "Optimisations",
          "Showing Damage",
          "Sword Effects",
          "Knockback",
          "Player Attack"
        ]
      },
      "requirements": [
        "The Gamemaker software, which is free to use",
        "PC or Mac capable of running Gamemaker"
      ],
      "description": "Here are a few quotes from the reviews for the course:\n\"This is by far the BEST GameMaker Studio 2 tutorial I've ever taken!  ... this course is SO. MUCH. FUN.\"  - Frank\n\"Without a doubt, this is the best content I have found on learning GMS2: the instructor is obviously an expert in both GM and programming; the pacing is spot-on, the material is excellent and really teaches best practices. It really stands out as the best of all the paid and free tutorials on Gamemaker.\" - Craig\n\"Without a doubt one of the best Game Maker courses I've seen across all online learning websites. - Jason\"\n\"This is a COMPLETE Course and its not just another introduction or beginners guide.\" - Ashanthra\n\"I was very impressed with this course. The engine design is elegant and well thought out.\" - Jonathon\nWell have you always wanted to make your own game, but didn't know how?\nThis course will teach you how to build a very polished and professional looking game, in a short time.  You will learn many tricks and techniques that can then be applied to making your own games.  The possibilities are endless once you've gained these programming skills and you'll be experienced enough to start the process of turning your own ideas into actual working games.\nThe game you will learn to build here is very slick and professional and is a great platform from which to grow your skills.  This could be the start of your game development career, or just a fun hobby, but either way I look forward to assisting you in your journey.\nWithin the course you will learn:\nFinite State Machines (The absolute best way to structure your code)\nTile Based Collisions (Extremely fast collision method)\nCool looking psuedo particles (That interact with the environment)\nLighting Systems (That service multiple objects)\nScripted enemies and sequences (including enemy spawning)\nRoom Fade Transitions, highscore saving, custom tooltips and much more!\nAll the graphics and code is supplied, all you need to do is start learning and you could be making and releasing your own games sooner then you think.  Every lecture is also presented in 1080p/60fps for maximum clarity while learning.\nGamemaker is free to download and use.\nThe course is taught by Peter Morgan.  A former Mathematics and Computer High School Teacher who has studied the game making process, and products, for many years.  I have previously used Gamemaker to release my first mobile game and currently work on assisting others to do the same.\nNote: All code is yours to use as you like.  Some graphic assets are public domain (tile sets, enemies) but some are copyright to Peter Morgan 2021 (player character, background, gui elements, game name and title page) and are not authorized for posting on Steam.",
      "target_audience": [
        "Beginner/Intermediate who is interested in learning an efficient method of coding platform games using tile collisions",
        "Someone who is interested in publishing games on Windows or mobile platforms",
        "Someone curious how a video game is made",
        "Someone who has dabbled in gamemaking, but would like to extend their skill set."
      ]
    },
    {
      "title": "Learning Path: C++ Game Programming",
      "url": "https://www.udemy.com/course/learning-path-c-game-programming/",
      "bio": "Develop your game programming skills by creating innovative and customized games from scratch with C++",
      "objectives": [
        "Get to know C++ from scratch while simultaneously learning game building",
        "Learn the basics of C++, such as variables, loops, and functions, to animate game objects, respond to collisions, keep the score, play sound effects, and build your first playable game.",
        "Use more advanced C++ topics such as classes, inheritance, and references to spawn and control thousands of enemies, shoot with a rapid fire machine gun, and realize random scrolling game worlds",
        "Stretch your C++ knowledge beyond the beginner level and use concepts such as pointers, references, and the Standard Template Library to add features—for example, split-screen co-op, immersive directional sound, and custom levels loaded from level-design files",
        "Get ready to go and build your own unique games!"
      ],
      "course_content": {
        "Beginning C++ Game Programming - Part 1": [
          "The Course Overview",
          "The Games, C++, and SFML",
          "Setting Up the Development Environment",
          "Planning Timber!!! and Creating a Project from the Template",
          "Adding Project Assets and Understanding Co-ordinates",
          "Starting to Code the Game",
          "Opening a Window using SFML",
          "The Main Game Loop",
          "Drawing the Game Background",
          "Handling Errors",
          "C++ Variables",
          "Manipulating Variables",
          "Adding Clouds, a Tree, and a Buzzing Bee",
          "Random Numbers",
          "Making Decisions with if and else",
          "Timing",
          "Moving the Clouds and the Bee",
          "Pausing and Restarting the Game",
          "C++ Strings, SFML Text, and Font",
          "Adding a Score and a Message",
          "Adding a Time Bar",
          "Loops",
          "Arrays",
          "Making Decisions with switch",
          "Class enumerations",
          "Getting Started with Functions",
          "Growing the Branches",
          "Preparing and Drawing the Player and Other Sprites",
          "Handling the Player's Input",
          "Handling Death",
          "Simple Sound FX",
          "Improving the Game and the Code",
          "Planning and Starting the Zombie Arena Game",
          "Object-Oriented Programming",
          "Building Player - The First Class",
          "Controlling the Game Camera with SFML View",
          "Starting the Zombie Arena Game Engine",
          "Managing the Code Files",
          "Starting Coding the Main Game Loop",
          "C++ References",
          "SFML Vertex Arrays and Sprite Sheets",
          "Creating a Randomly Generated Scrolling Background",
          "Using the Background",
          "Getting Started with Pointers",
          "Working with Pointers",
          "The Standard Template Library",
          "The TextureHolder Class",
          "Building a Horde of Zombies",
          "Creating a Horde and Bringing It Back to Life",
          "Using the TextureHolder Class for All Textures",
          "Coding the Bullet Class",
          "Making the Bullets Fly",
          "Giving the Player a Cross-Hair",
          "Coding a Class for Pickups",
          "Using the Pickup Class",
          "Detecting Collisions",
          "Adding All the Text and HUD Objects",
          "Updating the HUD Each Frame",
          "Drawing the HUD, and the Home, and Level-Up Screens",
          "Saving and Loading the High-Score",
          "Preparing Sound Effects",
          "Leveling Up",
          "Restarting the Game",
          "Playing the Rest of the Sounds"
        ],
        "Beginning C++ Game Programming - Part 2": [
          "The Course Overview",
          "The Thomas Was Late Game",
          "Structuring the Thomas Was Late Code",
          "Building the Game Engine",
          "Coding the Main Function",
          "Inheritance",
          "Polymorphism",
          "Abstract Classes – Virtual and Pure Virtual Functions",
          "Building the PlayableCharacter Class",
          "Building the Thomas and Bob Classes",
          "Updating the Game Engine to use Thomas and Bob",
          "Designing Some Levels",
          "Building the Level Manager Class",
          "Coding the loadlevel Function",
          "Updating the Engine",
          "Collision Detection",
          "Spatialization and SFML",
          "Building the SoundManager Class and Adding it to the Game Engine",
          "Populating the Sound Emitters",
          "Playing Sounds",
          "The HUD Class",
          "Using the HUD Class",
          "The SFML Drawable Class",
          "Building a Particle System",
          "OpenGL, Shaders, and GLSL"
        ]
      },
      "requirements": [
        "Basic prior knowledge of game development and C is recommended, but not required."
      ],
      "description": "Are you looking to learn C++ from scratch and simultaneously build stunning and interactive games?\nExplore this Learning Path and you'll get what you're looking for. Start as an amateur and rise as a pro by taking this Learning Path.\nThis Learning Path is a fun journey to the world of game programming starting from the very basics of C++ such as OOP, pointers, introduction to the Standard Template Library, and finally building OpenGL-powered SFML fully-playable complex games.\nThese games are an addictive frantic two-button tapper, a multi-level zombie survival shooter, and a split-screen multiplayer puzzle-platformer.\nYou will explore exciting game programming concepts such as particle effects, directional sound, OpenGL programmable Shaders, spawning thousands of objects, and more.\nPackt’s Video Learning Paths are a series of individual video products put together in a logical and stepwise manner such that each video builds on the skills learned in the video before it.\nAuthor:\nJohn Horton\nJohn Horton is a coding and gaming enthusiast based in the UK. He has a passion for writing apps, games, books, and blog articles about programming, especially for beginners. He is the founder of Game Code School , which is dedicated to helping complete beginners get started with coding using the language and platform that is best suited for them. John sincerely believes that anyone can learn to code and that everybody has a game or an app inside of them, and that they just need to do enough work to bring it out.",
      "target_audience": [
        "If you are a game developer and looking to explore C++ game development, then this is perfect course for you.",
        "This course offers a fun, example-driven approach to learning game development and C++. In addition to explaining game development techniques in an engaging style, you’ll learn the key C++ topics by building a game in a practical (not theory-based) way, with multiple runnable/playable stages in each section."
      ]
    },
    {
      "title": "Create Board and Video Game Design Projects - 4 Courses in 1",
      "url": "https://www.udemy.com/course/game-design-masterclass-board-and-digital-onedaycode/",
      "bio": "Start designing your own Games (Videogame or Board Games) from scratch, using Game Design Theory and Project Management",
      "objectives": [
        "Understand what makes a game be a good game",
        "Develop Simple Game Prototypes With Construct 2",
        "Get to know in which area of the Game Industry the student fits better",
        "Know the differences between the different types of Game Producers",
        "Know the different Games Purposes",
        "Learn how to adjust and choose the best tutorial for each Target Audience",
        "Find free assets to use in their games, even commercially",
        "Fill a basic Game Design Document for their own games",
        "Choose the best Store to publish games, according to the team's goal",
        "Structure Game Projects",
        "Manage Game Development Processes",
        "Prototype quickly",
        "Develop Complete Board or Card Games Prototypes",
        "Create Game Projects with Game Design Document and Canvas",
        "Know how the Tabletop Games and Digital Games were created and how they evolved",
        "Understand what are and when to use Game Components",
        "When to use each type of aesthetics",
        "How to publish your game with a publisher of by yourself",
        "Edit and Export Sprites and Animations",
        "Create different game Arcs and Loops",
        "Create a good Progression in Level Design",
        "Edit simple audio tracks with audacity",
        "Find free assets for your projects"
      ],
      "course_content": {
        "Introduction - Game Structure": [
          "Introduction",
          "What is a Game?",
          "Game Types (Digital, Analog, Gamification)",
          "How to Rate the course",
          "Game Loops",
          "Join Our Discord Server ?",
          "Game Arcs",
          "Quizz 1"
        ],
        "Presentations for Download": [
          "Slides Presentation - Game Design Introduction - Download",
          "Slides Presentation - Game Design Canvas- Download",
          "Slides Presentation - Digital Games - Download",
          "Slides Presentation - Board Games - Download"
        ],
        "Templates for Download": [
          "Template - Game Design Document (Digital Games)",
          "Template - Game Design Document (Board Games)",
          "Template - Game Design Canvas",
          "Template - Game Design Structure Analysis"
        ],
        "Introduction - Game Industry": [
          "Game Careers (Part 1)",
          "Game Careers (Part 2)",
          "Game Industry",
          "Game Purposes",
          "Quizz 2"
        ],
        "Introduction - Game Layers": [
          "Game Layers - How to separate elements",
          "Tutorials - How to teach the player",
          "Licensing - How to get free assets",
          "Quizz 3"
        ],
        "Introduction - Development": [
          "Game Design Document",
          "Crowdfunding",
          "Publishing",
          "Top 10 Game Designer Mistakes",
          "Quizz 4"
        ],
        "Game Design Canvas - Introduction": [
          "Introduction",
          "The Game Design Canvas Semaphore",
          "Brainstorming",
          "Your First Game",
          "Project Management - Kanban Trello",
          "Game Purposes",
          "Quizz"
        ],
        "Game Design Canvas - Pre Definitions (Red Sign)": [
          "Platforms",
          "Number Of Players",
          "Target Audience",
          "Duration",
          "Quizz"
        ],
        "Game Design Canvas - Core Gameplay - Yellow Sign": [
          "Genre",
          "Mechanics",
          "Story And Theme",
          "Aesthetics",
          "Quizz"
        ],
        "Core Gameplay - Gameplay - Green Sign": [
          "Goals",
          "Interaction",
          "Obstacles",
          "Rules",
          "Quizz"
        ]
      },
      "requirements": [
        "There are absolutely no prerequisites to take this course."
      ],
      "description": "THIS IS NOT A PROGRAMMING COURSE.\nThis course will teach you in details why each element of a game exists and how to assemble them in an engaging and fun way.\nThis is the most complete Game Design Course you can find, With over one hundred lessons, this course can turn a complete beginner into a Game Designer.\nThis course will teach you how to create Board Games and Digital Games from Scratch.\nThe Game Designer knows a little about every gaming area and a lot about how to group then together in a context that makes sense.\n\n\nFIRST PART\nIn the first part of the course, you will be introduced to the basics of Game Design Theory , such as\nWhat defines a Game and how they are made\nWhy games are made\nWhat jobs you can get in the game industry and how it works\nHow to get free assets for your games\nHow to write a Game Design Document\n\n\nSECOND PART\nIn the second part, you will learn how to create projects of games using a Game Design Canvas, so you can quickly organize your ideas and develop your project in a very efficient way.\n\n\nTHIRD AND FOURTH PART\nNow you can choose if you want to focus on Digital or Board games.\nIn these sections, you’ll learn about\nThe history of Digital and Board Games since the first games until today\nHow to manage game projects using Kanban and Trello\nWhat kind of elements and components are used in a game\nHow to create prototypes and validate your ideas\nWhat is the best way of earning money with each type of project\nHow to balance a game using Math, Level Design and Progression Systems\nHow the players think and what they want with the psychology of players\nHow to publish your games\n\n\nBy the end of this course, you’ll be able to:\nAnalyse and rate existing games\nCreate and manage game projects from scratch\nChoose the best types of mechanics, aesthetics and theme for each type of project.\nCreate prototypes quickly.\n\n\nBONUSES\nYou’ll also be able to download the presentation used in this course and get acces to templates of:\nGame Design Analysis Template: so you can practice your Game Designer Skills by rating games you already play.\nGame Design Document Template: so you can organize your game rules and parts\nGame Design Canvas Template: so you can clearly see how your game works using a table of contents.\n\n\nBy the end of some classes, I’ll challenge you to do some exercises, to help you learn better.\nThey are not mandatory, but they can make you become a better game designer.\nThis course will help you create a bionic eye, after your know how games are made, playing them will never be the same again.\nEnroll Now and I See you in the course!",
      "target_audience": [
        "People who want to learn about Game Design",
        "People who want to become great Game Designers for any platform",
        "People who want to understand deeply about the game creation processes",
        "Anyone who plans to work with Games in any area",
        "Teams who want to learn how to earn money by making games"
      ]
    },
    {
      "title": "Learn To Create A Local Multiplayer Game In Unity",
      "url": "https://www.udemy.com/course/unity-local-multiplayer/",
      "bio": "Game development made easy. Learn C# using Unity and create your very couch multiplayer action experience!",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Understand the capabilities of 2D development in Unity.",
        "Develop strong and transferrable problem solving skills.",
        "Gain an understanding of the game development process.",
        "Learn how object oriented programming works in practice.",
        "Learn to create a fun local multiplayer experience!"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Basics": [
          "Setting Up The Project",
          "Making The Player",
          "Laying Out Tilemaps",
          "Setting Up Display Layers"
        ],
        "Player Movement": [
          "Adding Physics",
          "Making The Player Move",
          "Jumping & Physics Fixes",
          "Setting Up The New Input System",
          "Making The Player Move Again",
          "Updated Jumping",
          "Ground Only Jumping",
          "Limiting Jump Height"
        ],
        "Player Animations": [
          "Adding Animations",
          "Setting Up The Animation Controller",
          "Controlling Animations And Flipping Through Script"
        ],
        "More Players": [
          "Adding Players To The Game",
          "Adding Another Keyboard Player",
          "Adding Keyboard 2 Player To Game",
          "Limiting The Players",
          "Stopping Players Colliding",
          "Creating A Spawn Effect"
        ],
        "Attacks & Health System": [
          "Setting Up Attack Animation",
          "Making The Player Attack",
          "Creating The Health System",
          "Taking Damage",
          "Fixing Flipping Hearts",
          "Damaging Other Players",
          "Adding Invincibility",
          "Stomping Other Players"
        ],
        "Selecting Characters": [
          "Setting Up The Character Select Area",
          "Using Animator Overrides",
          "Character Select Button",
          "Character Select UI",
          "Prevent Damage Outside The Arena",
          "Leaving Character Select",
          "Bringing Objects Between Scenes"
        ],
        "Fighting Arena": [
          "Setting Up A Fighting Arena",
          "Resetting Players At Startup",
          "Random Starting Points",
          "Ending A Round",
          "Loading Random Levels",
          "Fixing Control Bug"
        ],
        "Finding A Winner!": [
          "Displaying Round Victories",
          "Tracking Round Wins",
          "Winning The Game",
          "Creating A Game Win Screen",
          "Making The Win Screen Work"
        ],
        "Arena Traps": [
          "Death Pits",
          "Spikes",
          "Warp Portals",
          "Bounce Pad",
          "Creating More Content!"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2020.1 or newer"
      ],
      "description": "Learn how to create and program your very own action packed couch multiplayer game using Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to understand such game elements as:\nfull 2D character movement\nhow to use Unity’s new input system to support multiple players easily\nlevel design using tilemaps\ncharacter switching\nvictory tracking\nfull audio systems\nInteractive Menus\nand much more...\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own 2D games.",
        "People who want to create and publish their own games.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industy.",
        "Competent and confident with using a computer."
      ]
    },
    {
      "title": "Unreal Engine 5 C++: Advanced Frontend UI Programming",
      "url": "https://www.udemy.com/course/ureal-engine-5-cpp-advanced-frontend-ui-programming/",
      "bio": "Create AAA Frontend UI/Menu Experience in Unreal Engine 5 using C++ and Common UI",
      "objectives": [
        "Set up a modular UI framework using Unreal Engine 5's Common UI system and C++",
        "Create and manage widgets using widget stacks with gameplay tags and async loading",
        "Develop a fully functional options menu",
        "Tab navigation, Dynamic details panel, Modular setting categories",
        "Game User Settings system for saving/loading config values",
        "Build a complete input remapping system",
        "Use input preprocessors to detect and process player input dynamically",
        "Start Up and In-Game Loading Screen",
        "Utilize Common Activatable Widget, Widget Stacks, Common Text Block and more",
        "Custom Data Objects for List View Item generation"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Some Common Questions You May Have...",
          "What is Common UI?",
          "Create a C++ Project",
          "How to Get Help?"
        ],
        "Set Up Common UI": [
          "Set Up Common UI Section Overview",
          "Set Up Test Map",
          "Frontend Player Controller",
          "Set View Target",
          "Widget Stack Gameplay Tags",
          "Primary Layout Widget",
          "More On Transient...",
          "Register Widget Stack",
          "Debug Helper",
          "Frontend UI Subsystem",
          "Push Soft Widget To Stack Async",
          "BP Async Action",
          "Implement Async Action",
          "Template Layout",
          "Press Any Key Screen",
          "Animate Press Any Key Screen",
          "Developer Settings",
          "Frontend Function Library",
          "Share Task: Share Your Progress",
          "Section Wrap Up"
        ],
        "Main Menu": [
          "Main Menu Section Overview",
          "Get Desired Input Config",
          "Common Button Base",
          "Button Widget Blueprint",
          "Main Menu Widget",
          "On Any Key Pressed",
          "Button Text Style",
          "Button Description Text",
          "Description Text Widget",
          "Bound Action Buttons",
          "Common Input Data",
          "Before using Gamepad...",
          "Testing with Gamepad",
          "Confirmation Screen",
          "Confirm Screen Info Object",
          "Init Confirm Screen",
          "Native Push Confirm Screen To Modal Stack",
          "BP Push Confirm Screen To Modal Stack",
          "Confirm Screen Widget Blueprint",
          "Quitting The Game",
          "Section Challenge: Story Screen",
          "Solution: Story Screen",
          "Section Wrap Up",
          "Fix Menu Issues",
          "Optional Challenge: New Confirmation Window"
        ],
        "Options Menu": [
          "Options Menu Section Overview",
          "Set Up Options Screen",
          "Custom Bound Action Buttons",
          "Binding Bound Action Buttons",
          "Common Tab List Widget",
          "Tab List Widget Blueprint",
          "List Data Object",
          "List Data Object Collection",
          "Options Data Registry",
          "Get or Create Registry",
          "Handle Tab Creation",
          "Testing Tabs With Gamepad",
          "On Options Tab Selected",
          "Optional Challenge: New Tab",
          "Section Wrap Up"
        ],
        "Gameplay Tab": [
          "Gameplay Tab Section Overview",
          "Common List View",
          "List Entry Widget Base",
          "List Entry Widget Blueprint",
          "String Data Object",
          "Set List Source Items",
          "Data List Entry Mapping",
          "On Generate Entry Widget",
          "String Entry Widget",
          "String Entry Widget Blueprint",
          "On List Item Set",
          "String Dynamic Options",
          "On Data Object Initialized",
          "Initialize String Entry Widget",
          "On Button Clicked",
          "Advance To Next Option",
          "On Owning List Data Object Modified",
          "Game User Settings",
          "Data Interaction Helper",
          "Data Dynamic Setter and Getter",
          "Construct Interaction Helper",
          "Apply Settings",
          "On Item Hovered Or Selected",
          "Native On List Entry Widget Hovered",
          "Toggle Highlight State",
          "Select This Entry Widget",
          "Details View Widget",
          "Details View Widget Blueprint",
          "Populate Details View",
          "Update Details View",
          "Data Default Value",
          "Data Reset Logic",
          "Gather Resettable Data",
          "On Reset Button Clicked",
          "Reset Data",
          "Test Options List With Gamepad",
          "Modify Value Through Gamepad",
          "Regain Focus For Gamepad",
          "Display Description Image",
          "Optional Challenge: New Setting with New Description Image",
          "Section Wrap Up"
        ],
        "Audio Tab": [
          "Audio Tab Section Overview",
          "Header List Entry",
          "Header List Entry Widget Blueprint",
          "Find Child List Data Recursively",
          "Is Item Selectable Or Navigable",
          "Scalar Entry Widget",
          "Scalar Entry Widget Blueprint",
          "Scalar Data Object",
          "Construct Scalar Data Object",
          "Initialize Scalar Entry Widget",
          "Volume Config Variables",
          "Hints on Setting the Overall Volume",
          "Set Current Value From Slider",
          "Toggle Scalar Entry Highlight State",
          "Reset Scalar Data",
          "Music Volume",
          "Section Challenge: Sound FX Volume",
          "String Bool Data Object",
          "Construct String Bool Data Object",
          "Use HDR Audio Mode",
          "Test Audio Tab With Gamepad",
          "Share Task: Share Your Progress",
          "Section Wrap Up"
        ],
        "Video Tab": [
          "Video Tab Section Overview",
          "Challenges Ahead",
          "Run Hardware Benchmark",
          "String Enum Data Object",
          "Construct String Enum Data Object",
          "Package Project",
          "Resolution Data Object",
          "Init Resolution Values",
          "Resolution To Value String",
          "Edit Condition Descriptor",
          "Add Edit Condition",
          "On Toggle Editable State",
          "Package Build Only Edit Condition",
          "Window Mode Edit Condition",
          "Edit Dependency Data",
          "Update Widget Editable State",
          "Display Gamma",
          "String Integer Data Object",
          "Overall Quality",
          "Resolution Scale",
          "Global Illumination Quality",
          "Shadow and Anti-Aliasing Quality",
          "More Settings for Graphics Quality",
          "Vertical Sync",
          "Frame Rate Limit",
          "String Table",
          "Test Video Tab with Gamepad",
          "Share Task: Share Your Progress",
          "Section Wrap Up"
        ],
        "Control Tab": [
          "Control Tab Section Overview",
          "Challenges Ahead",
          "Register Input Mapping",
          "Query Mappable Keys",
          "Filter Mappable Keys",
          "Key Remap Data Object",
          "Construct Key Remap Data Object",
          "Key Remap Entry Widget",
          "Key Remap Entry Widget Blueprint",
          "Update Button Image",
          "Get Icon From Key",
          "Refactor Toggle Highlight State",
          "On Remap Button Clicked",
          "Key Remap Screen",
          "Key Remap Screen Widget Blueprint",
          "Push Key Remap Screen",
          "Register Input Preprocessor",
          "Desired Key Types",
          "Process Pressed Key",
          "Notify Key Remap Screen",
          "Request Deactivate Widget",
          "Notify Key Remap List Entry",
          "Notify Key Remap Data Object",
          "Can Reset Key Binding",
          "Reset Key Binding",
          "Section Challenge: Display Gamepad Inputs",
          "Test Control Tab With Gamepad",
          "Optional Challenge: More Key Remap Settings",
          "Section Wrap Up"
        ],
        "Loading Screen": [
          "Loading Screen Section Overview",
          "Start Up Loading Screen",
          "Loading Screen Settings",
          "Loading Screen Widget Blueprint",
          "Loading Screen Subsystem",
          "Tickable World Object",
          "Try Update Loading Screen",
          "Is Pre Load Screen Active",
          "Should Show Loading Screen",
          "Check The Need to Show Loading Screen",
          "Try Display Loading Screen If None",
          "Try Remove Loading Screen",
          "Notify Loading Screen Visibility Changed",
          "Loading Screen Interface",
          "Credit Screen Widget Blueprint",
          "Scroll Credits",
          "Switch Camera By Tag",
          "Optional Challenge: Customize Rich Text",
          "Section Wrap Up"
        ],
        "Congratulations": [
          "Animated UI Background",
          "Where to go from here?",
          "Continue your C++ journey..."
        ]
      },
      "requirements": [
        "Basic Experience with C++ in Unreal Engine is required"
      ],
      "description": "In this comprehensive course, you’ll build a fully-featured, AAA-quality frontend UI system entirely from scratch using Unreal Engine 5’s Common UI framework and C++. From layered menus to full gamepad support, you’ll learn how to create immersive and modular interfaces designed for real-world projects.\n\n\nYou’ll start by setting up the core UI foundation. We’ll create a primary layout widget, register widget stacks using gameplay tags, and implement asynchronous functions for pushing widgets onto the screen. Once that’s in place, you’ll build a responsive “Press Any Key” screen and display it using your new widget flow.\n\n\nNext, you’ll create a dynamic main menu system. We’ll use Common UI buttons backed by native C++ classes to add contextual button descriptions, action buttons, and a flexible confirmation screen. We’ll also ensure full gamepad support is seamlessly integrated. Along the way, you’ll learn how to structure UI features in a modular, reusable way for both Blueprint and C++ projects.\n\n\nOnce the core menu is complete, you’ll move on to building a robust options menu. This system will feature tab buttons at the top, a detailed view panel on the right, and support for multiple settings categories including gameplay, audio, graphics, and input. You’ll learn how to combine data objects with Unreal’s Data Registry system to dynamically populate the UI.\n\n\nAfter setting up the structure, we’ll focus on functionality. You’ll implement logic to reset values to default, customize how list entry widgets are generated, and create a custom Game User Settings system to store and load player preferences from config files.\n\n\nWith that foundation in place, we’ll dive into creating audio and video settings. You’ll add controls for adjusting window mode, resolution, shadow quality, frame rate limit, and more—while managing data dependencies and conditional logic properly for a clean, scalable architecture.\n\n\nFinally, you’ll implement startup and in-game loading screens that integrate seamlessly into your project’s UI flow, giving players a polished experience from launch to gameplay.",
      "target_audience": [
        "Learners who want to deepen their knowledge of UI programming with C++ and Common UI",
        "Learners who want to build production-ready, scalable, and modular UI architectures",
        "Learners whose projects require layered menus, settings, and gamepad support",
        "Learners ready to transition to a C++ based, more powerful and flexible UI framework",
        "Learners who need reusable UI modules like options screens, input remapping, and loading screens"
      ]
    },
    {
      "title": "Game Character Sculpting For Beginners with Zbrush & Maya",
      "url": "https://www.udemy.com/course/game-character-sculpting-for-beginners/",
      "bio": "Step By Step Guide From Besh Mesh Creation to High Poly Sculpting Using Zbrush, Maya and Marvelous Designer",
      "objectives": [
        "Modeling Methods of Maya",
        "Cloth Modeling Using Marvelous Designer",
        "Sculpting Methods in Zbrush",
        "Shoes Detailing in Zbrush",
        "Many Production Tips and Tricks Through Out The Course",
        "A Full Character Model From Start to Finish"
      ],
      "course_content": {},
      "requirements": [
        "Basic computer knowledge and Interest to learn 3d modeling."
      ],
      "description": "Student reviews :\n\nJibak says : One of the best online teaching courses on Character modeling. The course is superb because of the step by step detailing, completeness and 'No skips'. It starts with the very basics of Maya/ Zbrush/ MD and ultimately ends up in great detailing. The transition is very smooth and well organised. It improved my modeling skills a lot and also introduced me to new software like Zbrush & MD . Though I have not completed the course yet but it is amazing and worth buying. Thanks to Udemy and Mr. N. K. Jena for providing such a tutorial.\nStevenf says : The instructor explains everything extremely well and detailed. I\nrecommend this class for anyone interested in learning modeling.\nEdwin Gomez says : Great instruction! The material being delivered is top notch. I love the how the instructor takes the time to explain the tools and all of the little intricacies that are associated with that tool set. I am really enjoying his class and would highly recommend this course !\n\n\nDescription :\n\n\nIn this 12.5 hours of course Game artist Nalini Kanta Jena will teach you, how to create game character from scratch using Maya, Zbrush and Marvelous Designer.\n\nHe describes every steps he takes, so even if you are a totally beginner, you can easily follow him.This course not only shows you step by step guide but also shows you an up to date production pipeline.\nHe will start the course with Base mesh creation in Maya. then He will move to Marvelous Designer to model clothes then Zbrush to create sculpting details.\n\nThe goal of this course is to teach you the entire process of character sculpting and how different software such as Maya, Zbrush and Marvelous Designer work together to create your model.\n\n\nThe course will cover these topics\nMaya Basics\nModeling methods in Maya\nMarvelous Designer Basics\nModeling cloth in Marvelous Designer\nZbrush Basics\nCharacter sculpting methods in Zbrush\nIntegration between Maya, Marvelous Designer and Zbrush\nMany tips and tricks in every lecture\nAfter completing this course you can model game characters with more confident and with clear knowledge of the pipeline. so if you want to be a Game artist then enroll to this class now and start learning today.\n\nIf you are not satisfied with the course then you can refund it. There is a 30 days money back guarantee. So there is no reason to hesitate Enroll to the course and learn production level character sculpting now.",
      "target_audience": [
        "anyone who wants to learn character sculpting for game."
      ]
    },
    {
      "title": "The complete guide for UI game development in Unreal Engine",
      "url": "https://www.udemy.com/course/the-complete-guide-for-ui-game-development-in-unreal-engine/",
      "bio": "Learn Unreal blueprints and UMG widget in UE4 by developing UI games with this comprehensive guide from begin to finish",
      "objectives": [
        "Master beginner blueprint concepts, like variables, \"if\" statements, and arrays",
        "Navigate the Unreal Engine and discover unique features like the Marketplace",
        "Collect and destroy game objects"
      ],
      "course_content": {},
      "requirements": [
        "Unreal engine 4",
        "A basic understanding of mathematics (order of operations, addition, subtraction, multiplication) will facilitate comprehension of certain coding logic.",
        "No prior programming or Unreal experience is required. If you have worked in C++ or Unreal before, this course can help you fine-tune your game development skills.",
        "Before beginning this course, you should be comfortable browsing the"
      ],
      "description": "In this tutorial, you will actually learn how to use the UMG to create User Interface easily.\n\n\nWhen it comes to User Interface, the most simple thing can become difficult. A minor task like changing the size of a button or the color of an image can leave you frustrated, especially without the proper guidance.\n\n\nThat is why this course will spell out clear, concise details for features of Unreal Engine 4. It will teach you every element of User Interface, and in little to no time, you will be able to perform advanced logic (like hooking your health bar to your character.)\n\n\nBut that is just the beginning. This course will also show you how to:\n\n\nUse widgets to make quality and fast User Interface.\nPersonalize your game by teaching you to customize images using User Interface.\nCreate bindings for things like progress bars and texts.\n\n\nFurthermore, you skip all the hassles and cut to the chase to create images, texts, health and progress bars (saving you time and money.)\n\n\nThe course quickly familiarizes you with pallets. It then gives great example projects that help you understand the whole process. That way, you get an easy yet effective learning experience.\n\n\nUsing this course, you can create User Interface at ease with little to no experience. In the end, you will be able to take your skills to a more advanced level.\n\n\nSimply click the Enroll Now button to get started right now!\n\n\nMore about the Instructor:\nThis course is designed by Animation Hacks which is the visual effect studio with high-quality skill artist work on numerous unannounced projects. In addition, they enjoy sharing their knowledge with those students who learn 3D online.\nNOTE FOR STUDENTS - please take a look Section 1 / Lecture 1 to downloads for the source attachment link with the lesson.)",
      "target_audience": [
        "This course is not for someone who is an advanced game developer. This course is also not for students who are not interested in learning to code as you will get an introduction to the fundamentals of blueprint programming.",
        "Anyone seeking an understanding of best visual coding practices such as organization with your project and optimal development workflow that are essential to game development.",
        "The ideal student for this course is someone who is interested in game development with Unreal and visual programming, C++, blueprint and is looking for an interactive, project-based course.",
        "We designed this course for beginner Substance Painter users who want to take their skills to a more advanced next level."
      ]
    },
    {
      "title": "Rigging Your Character For 3D Animation In Unreal Engine 4!",
      "url": "https://www.udemy.com/course/rigging-a-character-for-animation-in-unreal-engine-4/",
      "bio": "'Allright Rig 1.3' Rigging & Animation Plugin Included. Rigged (The Dweller) Character Included. Complete UE4 Project.",
      "objectives": [
        "You will be able to rig and animate a character in Unreal Engine 4 using the Allright Rig plugin and output your animations to video.",
        "You will receive the Creature \"The Dweller\" by Josh P. Crockett - fully rigged and ready to animate!",
        "Course includes the full Unreal Engine 4.17 scene - setup and ready to go! (v 4.17 required for the free version of Allright Rig 1.3)",
        "UE4 Scene Contains Allright Rig 1.3 (free version) installed",
        "Full step-by-step instructions on how to setup your characters with Allright Rig 2.0",
        "Instructions on how to prepare your characters for rigging in Allright Rig 2.0",
        "Allright Rig 2.0 Presets for DAZ characters: Genesis, Genesis 2, Genesis 3, Genesis 8",
        "Allright Rig 2.0 Presets for Paragon characters: Shinbi & Dekker"
      ],
      "course_content": {
        "Introduction": [
          "Included with the course: \"Dweller Creature Character\" by Josh P. Crockett"
        ],
        "Project Source Files": [
          "Unreal Engine Project File Including Allright Rig 1.3 , Characters & Props",
          "Allright Rig 1.3 Plugin",
          "The Dweller DAZ character file (for use in DAZ Studio)",
          "Dweller Character Texture Maps",
          "Allright Rig 2.0 Character Presets",
          "The Dweller (Ready For Allright Rig 2.0)",
          "Where To Get Your FREE Genesis Character Bundles",
          "Allright Rig 2.0 Documentation"
        ],
        "Example Videos of Allright Rig in Action Inside of Unreal Engine 4": [
          "Cartoon Girl Lip Sync Animation",
          "The Dweller Lip Sync Animation",
          "The Pixie Animation Test",
          "Hookah Cat Animation Example",
          "Shinbi Epic Games Paragon Character Animation Test",
          "Epic Mannequin Rigged With Allright Rig - Example Animation",
          "Allright Rig 2.0 Demo Video"
        ],
        "Getting Started With Allright Rig 1.3": [
          "Quick Start - Let's Have A Look Around The Project!",
          "Quick Start: \"The Dweller\" Character - Allright Rig 1.3",
          "Quick Start: Animating Your Character In Sequencer",
          "Quick Start: Creating Animation Asset & Rendering Your Animation To Video"
        ],
        "Preparing Your DAZ Characters For Allright Rig 2.0 & Unreal Engine 4": [
          "Introduction: DAZ Genesis character differences",
          "Preparing & Exporting Genesis & Genesis 2 Characters",
          "Preparing Genesis 3 & Genesis 8 Characters (Re-parenting arm and leg bones)",
          "Exporting Genesis 3 and Genesis 8 Characters Correctly As FBX files"
        ],
        "Rigging Your Character In Allright Rig 2.0": [
          "Prepare Your Unreal Engine Project and Install Allright Rig 2.0",
          "Import & Rig Your Genesis Character with Allright Rig 2.0",
          "Create Morph Controllers & Add Morph Targets - Genesis Character",
          "Create Rig For Genesis 3 & Genesis 8 Characters",
          "Create Rig For Paragon Characters",
          "Rigging A Character From Scratch Part 1 (Create Animation Blueprint)",
          "Rigging A Character From Scratch Part 2",
          "Rigging A Character From Scratch Part 3",
          "How To Rig A Non-Biped Character (Hookahcat Example)"
        ],
        "Let's Animate! Onward To Sequencer!": [
          "Create A New Level For Animation (Add Hobbit House & The Dweller)",
          "Create Your Cinematic Sequence",
          "Export Your Animation To Video",
          "Create an Animation Asset",
          "Editing With Curves Inside Sequencer"
        ],
        "The Pose Library": [
          "How To Create & Save Character Poses",
          "Adding Poses To The Sequencer For Animation (Pose to pose animation)"
        ],
        "Animation Dynamics": [
          "Animation Dynamics - A Dinosaur Whips It's Tail!"
        ],
        "Cool Things & Extras": [
          "MetaHuman Creator",
          "Free Paragon Assets Released!",
          "How To Get Your Genesis 8 Characters Into Mixamo, Then Into Unreal Engine 4",
          "Coming Next Year: Unreal Engine 5 - Late In 2021!",
          "Video: Preview of Unreal Engine 5!",
          "BONUS LECTURE: More Unreal Engine courses for you at a HUGE discount!"
        ]
      },
      "requirements": [
        "Unreal Engine 4 - FREE (version 4.17 required for included project file). DAZ Studio (both are free programs)"
      ],
      "description": "IMPORTANT UPDATE!  Allright Rig's price has now been lowered to $49.99 in the Unreal Engine Marketplace.\nEven with the introduction of the new Epic Control Rig, I have found the Allright Rig to be a very helpful tool.  It's an all in one tool, where you can rig your character's body AND facial morphs, so it is ready for animation in Sequencer.\n\n\nFINALLY! The Holy Grail of animation (Lip Synch animation) can be done INSIDE of Unreal Engine 4 with the new plugin \"Allright Rig 2.0\" created by Alexander Shatalov.  This course contains over 3.5 hours of video instruction along with:\nComplete Unreal Engine 4 Scene File\nAllright Rig 1.3 (free version)\n\"Dweller\" creature character, fully rigged (created by Josh P. Crockett)\nPresets for Genesis, Genesis 2, Genesis 3, & Genesis 8 characters\nComplete video instruction (over 3.5 hours) on how to rig and animate your character - from beginning to end!\nNo longer do you need to purchase expensive programs such as Maya and 3DS Max to animate your characters - now you can achieve stunning quality with the powerful combination of DAZ Studio, Unreal Engine and Allright Rig 2.0!\n\n\nHere is some additional information about the plugin:\n\n\nModular rigging system allows you to create any kind of rigs.\nFacial rigging using bones and blend shapes.\nBaking animation from an animation sequence to the rig and vise versa.\nPartial animation editing.\nPose library.\nCopy/paste, mirror animation using animation tools.\nAnimation constraints such as parent, point, orient, scale and aim.\nAnimation curve filters such as butterworth, peak removal, simplify curve.\nCustom Blueprint library.\nPresets for different character rigs.\nOpen source.",
      "target_audience": [
        "Anyone interested in learning how to rig and animate inside Unreal Engine 4."
      ]
    },
    {
      "title": "Unity Mobile Game Development",
      "url": "https://www.udemy.com/course/unitymobilecourse/",
      "bio": "Create and publish mobile games for Android and iOS using C# and Unity",
      "objectives": [
        "Compatibility with all Resolutions and Mobile Devices",
        "Implement Touch Controls with Unity's New Input System",
        "Monetization (Banner, Interstitial and Rewarded ads)- Android & iOS",
        "Implement Notifications- Android & iOS",
        "How to Test Games on Mobile Devices- Android & iOS",
        "Virtual Joystick",
        "Level Selection With Unlocking System",
        "Power Ups- Health, Shield and Shooting Upgrades",
        "Implement Boss Fight",
        "Score, High Score and Save System",
        "Optimization-Scriptable Objects, Profiler Analysis and Object Pooling System",
        "Publishing on Google Play- Android"
      ],
      "course_content": {
        "Welcome and Update": [
          "Update Intro",
          "Welcome and Discord Server"
        ],
        "Project Setup": [
          "Create a project and choose settings",
          "Device Simulator"
        ],
        "Sprites and Scrolling Background [DOWNLOAD ASSETS]": [
          "Sprite Importing and Sprite Editor [DOWNLOAD ASSETS]",
          "Scrolling Background [Mini Challenge]"
        ],
        "New Input System and Player Movement": [
          "New Input System Setup",
          "Enhanced Touch Fundamentals",
          "Move Player with Touch",
          "Player Movement Restrictions",
          "Camera Boundaries"
        ],
        "New Input System Compatibility Update [DON'T SKIP]": [
          "Touch Controls Update"
        ],
        "Joystick and Taps": [
          "Tap Count",
          "Virtual Joystick"
        ],
        "First Enemy Concept and Spawner": [
          "Enemy Concept (Inheritance)",
          "Meteor Prefab [Mini Challenge]",
          "Collision Matrix",
          "Meteor Spawner",
          "Object Rotation"
        ],
        "Player Shooting": [
          "Shooting Laser Bullets"
        ],
        "Health Bar and Damage System/UI": [
          "PlayerStats and Damage System",
          "UI Fundamentals",
          "Health Bar",
          "Safe Area Helper"
        ],
        "Animations": [
          "Explosion Animation",
          "Damage Animation and Transitions"
        ]
      },
      "requirements": [
        "Basic C# knowledge (variables, functions, etc.)",
        "Familiar with the Unity editor",
        "An Android or iPhone device is preferred but not required"
      ],
      "description": "Have you ever wondered how to make a mobile game? You've come to the right place.\nThe Space Shooter mobile game is designed to guide you step by step through challenges that can occur in mobile game development. You will learn how to make your game compatible with all screen resolutions and devices (automatic Camera adjustments, scaling and placement of UI elements, and more).\nLectures are carefully edited, concise, and easy to follow. There is no time wasting. To follow the course you will need some basic C# knowledge (variables, functions, \"if\" statements, etc.) and you need to be familiar with the Unity editor.\nSome highlights of this course:\nNew Input System\nMonetization\nNotifications\nOptimization\nDevice Compatibility and Testing\nBoss Fight\nPublishing Process\n\n\nBy the end of this course, you will have general knowledge of how to develop and publish mobile games.\n(*please note that the publishing process is covered only for Android, on Google Play Store, the rest of the course covers both, Android and iOS)\nCustomer Support:\nI respond to all messages if you get stuck anywhere or need help.\nYou can also join the community on the Discord server and connect with other enrolled students.\nThank you for your time and see you in the course lessons.",
      "target_audience": [
        "Anyone who wants to quickly start with mobile game development"
      ]
    },
    {
      "title": "Godot Game Engine - The Complete Course",
      "url": "https://www.udemy.com/course/learngodot/",
      "bio": "Learn to make games in the Godot Game Engine and become a game developer.",
      "objectives": [
        "Build games",
        "Program in GDScript",
        "Use the Godot Game Engine",
        "Be familiar with other game engines and programming languages"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How To Download Godot",
          "Download The Artwork"
        ],
        "Write Your First Program/Game": [
          "Hello World"
        ],
        "How Godot Works": [
          "How Godot Works"
        ],
        "Learn To Program": [
          "Actions, Decisions, And Data",
          "Important Things To Know",
          "Variables",
          "Functions",
          "If Statements",
          "While Loop",
          "For Loop",
          "Objects",
          "Access The Top Node",
          "Change Scenes",
          "Commenting",
          "Detect Inputs",
          "Randomization",
          "Dictionary",
          "Global Variables And More On Dictionaries",
          "Arrays",
          "Instancing",
          "Miscellaneous",
          "File System"
        ],
        "Animation": [
          "Animation (Sprite Frames)",
          "Animation (Skeletal)"
        ],
        "The Game Engine - Make 2D Games": [
          "Self",
          "Timer",
          "Sounds",
          "How To Destroy Nodes",
          "Physics Engine - Part 1",
          "Physics Engine - Part 2",
          "Physics Engine - Part 3",
          "Get Collider",
          "Scale And Rotation",
          "UI Elements",
          "Get Global Mouse Position",
          "Cameras"
        ],
        "Platformer": [
          "Platformer Part 1",
          "Platformer - Part 2"
        ],
        "Flappy Bird Clone": [
          "Tappy Plane - Part 1",
          "Tappy Plane - Part 2",
          "Tappy Plane - Part 3"
        ]
      },
      "requirements": [
        "You should know how to use a PC",
        "Have an internet connection"
      ],
      "description": "Welcome to the Godot Game Engine course!\nGodot is a free open-source game engine that is gaining traction due to it's multi-platform capability and ability to make both 2D and 3D games.\nIn this course, you will learn Godot's scripting language GDScript and learn all the basic features so you can start making games.\nWhether you want to make games or learn to code, you will learn both in this course.\nThe Godot game engine is gaining traction with more and more people deciding to use a free game engine, it's necessary to understand it well so you can make great games.",
      "target_audience": [
        "Anyone who wants to learn to code",
        "Anyone who wants to learn to make games"
      ]
    },
    {
      "title": "Building Perceptive AI in Unreal Engine",
      "url": "https://www.udemy.com/course/perceptive-ai-in-unreal-engine/",
      "bio": "AI Perception, Behaviour Trees, and EQS",
      "objectives": [
        "In this series we will be learning how to implement a perceptive AI solution where the AI will sense you via sight and hearing",
        "We will also look at how to setup behavour trees and blackboard to react to the player, with shooting mechanics and ability activations",
        "We will be using blueprint throughout, and no C++ will be required to make this work"
      ],
      "course_content": {
        "Introduction": [
          "Overview"
        ],
        "Shooter AI (2020)": [
          "Getting Started",
          "02 - Meshes, Weapons, Class Basics (Branch FPS Setup)",
          "03 - Characters (Branch 3 - Character Setup)",
          "04 - Interfaces, State Enums (Branch 4 - States)",
          "05 - AI Controllers, Blackboards (Branch 5-Blackboards-And-States)",
          "06 - Player and Enemy Blueprints (Branch 06-World-Setup)",
          "07 - Perception Component (Branch 07-Perception-Component)",
          "08 - Perception Driving States (Branch 08-PerceptionLogic)",
          "09 - Behaviour Trees - Idle (Branch 09-BehaviourTree-Idle)",
          "10 - Behaviour Trees - Patrols",
          "11 - Animations",
          "12 - Behaviour Tree - Investigating",
          "13 - Behaviour Tree - Seeking",
          "14 - Behaviour Tree - Attacking/Firing",
          "15 - Tweaks, Bug fixes"
        ],
        "Shooter AI (Legacy, Depreciated)": [
          "Introduction",
          "Setting up classes",
          "AI Interface",
          "State Functions",
          "Perception Component",
          "Perception Logic",
          "Setting up an Idle System",
          "Finishing Idles and Starting Patrolling",
          "Patrolling BP",
          "Investigation",
          "Seeking",
          "Attacking Part 1",
          "Attacking Part 2",
          "Attacking Part 3",
          "Final Tweaks and Review",
          "Bonus - Aim At BB Entry"
        ],
        "RPG Style AI": [
          "Perception",
          "Blackboards and BT Services",
          "Spellcasting",
          "Ability System Mock-Up",
          "Ability System Tweaks",
          "Learning EQS, an Overview",
          "Teleporting with EQS"
        ],
        "Further learning and Closing words": [
          "Final Learning and Closing thoughts"
        ]
      },
      "requirements": [
        "A basic understanding of Unreal Engine will be helpful"
      ],
      "description": "In this series I will be showing how to set up two different AI designs, one for a shooter experience, and one for a RPG style AI. We will cover blackboard and behaviour trees, EQS queries, and the AI perception component using sight, sound and damage stimuli.\nThe Shooter example will be a longer, slower example where we will explain everything as we go, and it will use sight and sound to give it elements of stealth AI, along with a working shooting system driven by the AI controller and it's behaviour tree.\nThe Magic AI example will be a more concise, straight to the point demonstration of a different way of working compared to the shooter example, and we will utilise sight and damage stimuli to make a reactionary AI who is able to heal, cast spells, and teleport away from the user using a EQS query. This series also includes a large overview of the EQS system and how to many of the tests work.",
      "target_audience": [
        "Unreal Engine developers looking to learn how to implement AI into their games, in particular AI which can see and hear and response to those stimuli"
      ]
    },
    {
      "title": "Complete 2D Platformer in Unity C#",
      "url": "https://www.udemy.com/course/complete-unity-platformer/",
      "bio": "Game development made easy. Learn C# with Unity and create your very own 2D Platformer!",
      "objectives": [
        "Learn C#, a modern versatile programming language",
        "Understand the capabilities of 2D development in Unity",
        "Develop strong and transferrable problem solving skills",
        "Gain an understanding of the game development process",
        "Learn how object oriented programming works in practice"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Assets"
        ],
        "Getting Started": [
          "Setting Up Our Project",
          "Importing Assets",
          "Setting Up A Scene"
        ],
        "The Player": [
          "Basic Physics",
          "Understanding Unity Coding Basics",
          "Moving The Player",
          "Making The Player Jump",
          "Running",
          "Staying Grounded",
          "Double-Jumping",
          "Creating Custom Functions",
          "Making Player Animations",
          "Setting Up The Animator",
          "Controlling The Animator",
          "Switching Directions",
          "CHALLENGE - Double Jump Animations"
        ],
        "The Camera": [
          "Moving The Camera",
          "Limiting Camera Movement Axis",
          "Fixing Jerky Movement",
          "Clamping The Camera",
          "Adjusting The Camera's Clamped Position",
          "Visualising The Clamped Area"
        ],
        "Making A Level": [
          "Creating Tiles",
          "Making A Tilemap",
          "Making It Look Nice",
          "Adding A Background",
          "Adding Parallax",
          "Repeating Background Objects"
        ],
        "Health & Damage": [
          "Adding Spikes",
          "Managing Health",
          "Singletons",
          "Handling Death",
          "Adding Health UI",
          "Setting Up An Array",
          "Controlling Heart Display",
          "Displaying Empty Hearts",
          "Adding Temporary Invincibility",
          "Showing Invincibility",
          "Setting Up Knock Back",
          "Stopping The Player",
          "BUGFIX - Double Jumping",
          "BUGFIX - Background Movement",
          "Adding Health",
          "Health Pickup",
          "Preventing Pickup Waste",
          "Creating a Pickup Effect",
          "Spawning The Pickup Effect",
          "CHALLENGE - Full Health Pickup"
        ],
        "Checkpoints": [
          "Setting Up The Checkpoint",
          "Activating The Checkpoint",
          "Deactivating Checkpoints"
        ],
        "Respawning & Lives": [
          "Respawning At Checkpoints",
          "Adding A Respawn Delay",
          "Death Plane",
          "Tracking Lives",
          "Displaying Lives",
          "Controlling The Lives Display",
          "Game Over Screen",
          "Restarting The Level",
          "Respawning Effects"
        ],
        "Collectible Pickups": [
          "Collecting Pickups",
          "Getting More Life",
          "CHALLENGE - Displaying Collectibles"
        ],
        "Making Enemies": [
          "Creating An Enemy",
          "Moving The Enemy",
          "Switching Points",
          "Waiting At Points",
          "Making The Enemy Look Nice",
          "Damaging The Player",
          "Damaging The Enemy",
          "Enemy Death Effect"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2022.3 or newer"
      ],
      "description": "Learn how to create your very own platformer game using Unity and C#, an industry-standard program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\nCoding with c#, building from the basics up\nA character with full movement, running, jumping & double-jumping capabilites\nCollectibles such as fruit & extra health\nParallaxing background effects\nmoving & flying enemies\nLevel Mechanics like Spikes, moving platforms, crushing blocks & more\nA checkpoint system with respawning and extra lives\nFull user Interface with interactive menus\nCreating levels with tilemaps\nFull health & damage system with player knockback\nTransitioning through multiple levels\nA unique and challenging boss battle\nA complete music and sound effects system\nAnd much more!\nThe course also includes a complete version of the final project to use for your own reference to ensure everything in your game works as it should!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own 2D games.",
        "People who want to create and publish their own games.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industy.",
        "Competent and confident with using a computer."
      ]
    },
    {
      "title": "Learn To Write 2D Games with C# and Unity",
      "url": "https://www.udemy.com/course/unity-game-developers-masterclass-write-games-using-c/",
      "bio": "Obtain the basics of C# and Unity and move on to creating your first space shooter - complete game with source included",
      "objectives": [
        "Learn how to create your own games",
        "Understand how to write reusable code that can be reused in other games",
        "Learn how to create your own tools for game development",
        "Have learned the C# language",
        "Understand how to use many useful design patterns"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the Course",
          "Install Unity 3D for Windows",
          "Install Unity 3D for MAC"
        ],
        "Learning C#": [
          "Creating Project And Editor Layout",
          "First Script And Project Organization",
          "Variables And Constants",
          "Using Operators",
          "If Else Statement",
          "While And Do While Loop",
          "Arrays",
          "For And Foreach Loop",
          "Loop Challenge",
          "Break And Continue Statements",
          "Using Strings - Part 01",
          "Using Strings - Part 02",
          "String Challenge",
          "Understanding Null Reference",
          "Keyword var",
          "Understanding Methods and access modifiers",
          "Method Overloading",
          "Overloading Challenge",
          "Named And Optional Parameters",
          "Constructors",
          "Getter and Setter Methods",
          "Properties",
          "Encapsulation",
          "Encapsulation Challenge",
          "Static and Extension Methods",
          "Static and Extension Methods Challenge",
          "Inheritance",
          "Method Overriding",
          "Polymorphism",
          "Polymorphism Challenge",
          "Abstract Classes And Interfaces",
          "Interface Challenge",
          "Enums - Part 01",
          "Enums - Part 02",
          "Visual Studio Tips And Tricks",
          "Understanding List",
          "Understanding Stack",
          "Understanding Dictionary",
          "Operator Overloading",
          "Operator Overloading Challenge",
          "Composition",
          "Composition Challenge",
          "Component Pattern",
          "Component Challenge",
          "Singleton Pattern Part 01",
          "Singleton Pattern Part 02",
          "Delegates",
          "Events Part 01",
          "Events Part 02",
          "Events Challenge",
          "GameObject And Component",
          "MonoBehavior And Life Cycle",
          "Attributes",
          "Working With Components",
          "Working With Components Challenge"
        ],
        "Astro Assault Game": [
          "Astro Assault Game Mockup",
          "Astro Assault Game Preview",
          "Create And Setup Project",
          "Understanding Camera",
          "Sprite Importing And Slicing",
          "Sprite Importing And Slicing Challenge",
          "Player Controller",
          "Level Layout Part 01",
          "Level Layout Part 02",
          "Keep Player In Bounds",
          "Understanding Prefabs",
          "Prefabs Challenge",
          "Falling Behavior",
          "Spawn Points",
          "Point Spawner",
          "Organized and Clean Project",
          "Improving Point Spawner",
          "Enemy Dock",
          "Dock Spawner Challenge",
          "Improving Enemy Dock",
          "Waypoint Follower",
          "Improving Dock Spawner",
          "Releasing Enemies",
          "Code Cleanup",
          "Player Shooting",
          "Collision Detection",
          "Bullet Destroyer",
          "Destroying Enemies Challenge",
          "Animations",
          "Enemy Explosions",
          "Animation Challenge",
          "Player Respawn Part 01",
          "Player Respawn Part 02",
          "Scoring Logic",
          "User Interface Part 01",
          "User Interface Part 02",
          "Scoring",
          "Life Container Part 01",
          "Life Container Part 02",
          "Animating Mother Ship",
          "Fixing Sprite Order",
          "Level Start Logic",
          "Wave Change Logic Part 01",
          "Wave Change Logic Part 02",
          "Wave Number",
          "Remaining Enemy Count",
          "Enemy Sounds",
          "Sound Controller",
          "Player Sounds Challenge",
          "How To Deal With Duplicated Code",
          "MotherShip Sounds",
          "Screen Flow",
          "Main Menu Screen Part 01",
          "Main Menu Screen Part 02",
          "Main Menu Controller",
          "Options Screen",
          "Options Controller",
          "Saving Options",
          "Keeping Game Object Alive Part 01",
          "Keeping Game Object Alive Part 02",
          "Splash Controller",
          "Pause Screen Challenge",
          "Pausing Game Logic Part 01",
          "Pausing Game Logic Part 02",
          "Game Over Controller Challenge",
          "Finishing Game Over Logic Part 01",
          "Finishing Game Over Logic Part 02",
          "Code Refactoring",
          "Tutorial Screen",
          "Tutorial Controller - Part 01",
          "Tutorial Controller - Part 02",
          "Fine Tuning and Customizing",
          "Zoom Custom Component",
          "Code To Create Code Part 01",
          "Code To Create Code Part 02",
          "Code To Create Code Part 03"
        ],
        "Extra Information - Source code, and other stuff": [
          "Source Codes",
          "Bonus Lecture and Information"
        ]
      },
      "requirements": [
        "PC or Mac computer",
        "Some programming experience is helpful but not essential"
      ],
      "description": "Have you always wanted to create your own games, but don't know where to start?\nMaybe you tried out Unity, but could not really get the hang of it.\nOr perhaps you just want to get become a better games programmer.\nWhatever the reason, this course is for you.\nLearn to creates games in Unity.  But not only that, learn to do it the right way, like the professional game programmers do.\nThe fact is, there are many ways to create games.  It takes skill, but to get the best results, you have to do things the right way.\nThere are many game programming courses on Udemy, but few teach you the right way to go about it.\nImportant concepts included in this course, that many do not include are as follows:\nLearn good and bad practices and be able to focus on good practices.\nLearn what design patterns are and how to put them into practice.\nUnderstand game logic and physics.\nLearn how to write clean and maintainable code.\nLearn how to refactor (What it is and how to do it).\nLearn how to create your own tools for game development.\nLearn how to create custom components\n\nVery few courses teach these concepts, but they should be mandatory.\nWhy?\nBecause failure to learn these lead to buggy code, and projects taking much longer to complete.  By learning the right way to create games, you make life easier for yourself and actually become a lot more productive and a more capable programmer.  The professional games developer develops code like this, you should as well.\n\nWhat experience do I need to take this course?\n\nNo previous experience is necessary.  Goran Lochert, your course instructor is an expert games developer, who has worked on many games in many frameworks.  He is also an official Oracle Java certified developer, and an official contributor to LIBGDX, and other games frameworks.\nHe has great skills and experiences with Unity3D.\n\nAs a result, you are learning from one of, if not the most experienced Unity games developers on Udemy, meaning you can be assured that not only will you learn how to create your own games by following along in this course, but you will also learn the right way to create your game code.\nWhy enrolling in this course is the best decision you can make.\n\nThis course will teach you everything you need to know, to create your own games in Unity.\n\nAs mentioned above, the course not only teaches you how to create your own games, it also teaches you best practices and the right way to create them.\n\nYou are learning from someone who has all the professional training, skills, and experience needed to teach you how to become a proficient games developer in Unity.\n\nPlus, the games created in this course are complete and commercial quality, not half baked, incomplete games you see in many courses.  You can even download and play the games created in this course on your iOS or Android devices.\nFull source code is included! As well as a complete C# tutorial section is included.  Perfect if you have no previous programming experience or need to get up to speed with C#, fast.\nIf you are ready to get that first paid programming job, or to move up to a more senior programming position, then this course is for you!\nAfter completing this course, you will have the necessary skills to be able to write your own games using Unity and C#\n\nThe sooner you sign up for this course, the sooner you will have the skills and knowledge you need to increase your job or consulting opportunities.    Unity game developers are in high demand, and you will understand and be able to create your own games in unity after going through this course.\nYour new job or consulting opportunity awaits!\nWhy not get started today?\nClick the Signup button to sign up for the course!",
      "target_audience": [
        "Anyone wanting to learn how to write computer games using Unity"
      ]
    },
    {
      "title": "Math For Video Games: The Fastest Way To Get Smarter At Math",
      "url": "https://www.udemy.com/course/math-for-games/",
      "bio": "Learn Math for Video Game Design & Coding through Solving fun Video Game Problems",
      "objectives": [
        "Fundamental math concepts",
        "Number base manipulation including binary, decimal and hex",
        "Addition, subtraction, multiplication and division in multiple bases",
        "IEEE754 floating point and why it matters",
        "Deeply understand vector space in 2D, 3D and higher!",
        "Trigonometry calculations such as sin, cos and tan",
        "More advanced vector math such as dot and cross products",
        "Projectile motion mathematics",
        "Combinatorics and probability theory and where to use it"
      ],
      "course_content": {
        "Introduction & Arithmetic": [
          "Welcome To The Course",
          "Addition & Subtraction",
          "Rounding",
          "Multiplication & Number Blocks",
          "Division",
          "Remainders",
          "BODMAS",
          "Quiz",
          "Squaring, Cubing & Powers",
          "Sideways Calculators",
          "Squaring Decimals",
          "Reversing Powers",
          "Quiz",
          "Charts & Graphs 101",
          "Area Under Chart 101",
          "Gradient Of A Line",
          "Distance, Speed & Time",
          "Quiz",
          "Rates Of Change",
          "The Magic of e",
          "Logarithms 101",
          "Logarithms - Changing Base",
          "Factorials & Permutations",
          "Number Bases",
          "Scientific Notation",
          "How To Pass Your First Math Checkpoint",
          "Quiz",
          "What Now?"
        ],
        "Algebra and Equations": [
          "Introduction: Algebra & Equations",
          "Algebra 101",
          "Inequalities",
          "Plotting Graphs",
          "Gradient and Intercept",
          "Linear Equations",
          "Quiz",
          "Graphing Simultaneous Equations",
          "Simultaneous Equations (Substitution)",
          "Simultaneous Equations (Elimination)",
          "Parallel Lines",
          "Quiz",
          "Parabolas",
          "The Quadratic Equation",
          "Intercept Form",
          "The FOIL Method",
          "Vertex Form",
          "Quiz",
          "Completing The Square Part 1",
          "Completing The Square Part 2",
          "Factoring Quadratics",
          "Less than Two Roots",
          "Quiz",
          "Section Wrap-Up"
        ],
        "Introduction: Angles and Circles": [
          "Introduction: Angles and Circles",
          "The Circle",
          "What is Pi?",
          "Degrees and Radians",
          "Triangles",
          "Quiz",
          "Pythagorean Theorem",
          "Sine, Cosine, and Tangent Part 1",
          "Sine, Cosine, and Tangent Part 2",
          "SOH CAH TOA",
          "Quiz",
          "The Sine Rule",
          "The Cosine Rule",
          "The Sine & Cosine Rules Explained",
          "Solving Any Triangle",
          "Quiz",
          "Graphing Sine, Cosine, and Tangent",
          "Manipulating Sine Waves",
          "Combining Waves",
          "Quiz",
          "Section Wrap-up"
        ],
        "Vectors and Matrices": [
          "Introduction: Vectors and Matrices",
          "Reading and Writing Vectors",
          "Magnitude vs Squared Magnitude",
          "Coordinate Systems",
          "Vector Addition",
          "Scalar Multiplication",
          "Quiz",
          "Normalizing Vectors",
          "Zero Vectors",
          "Dot Product",
          "Cross Product",
          "Reflection",
          "Project on a Plane",
          "Quiz",
          "What is a Matrix",
          "Addition and Scalar Multiplication",
          "Adjacency Matrix",
          "Matrix Multiplication",
          "Quiz",
          "Identity Matrix",
          "Determinant",
          "Matrix Inverse",
          "Quiz",
          "Section Wrap-Up"
        ],
        "Rotation & Interpolation": [
          "Introduction: Rotation and Interpolation",
          "Vector Direction",
          "Imaginary Numbers",
          "Complex Numbers",
          "Complex Multiplication",
          "Quiz",
          "Polar Coordinates",
          "Rotation Matrix",
          "Euler Rotation",
          "Gimbal Lock",
          "Quiz",
          "What are Quaternions?",
          "Quaternion Multiplication Part 1",
          "Quaternion Multiplication Part 2",
          "Quaternion Rotation Part 1",
          "Quaternion Rotation Part 2",
          "Quiz",
          "LERP",
          "SLERP",
          "Easing Functions",
          "Quiz",
          "Section Wrap-Up"
        ],
        "Probability & Statistics": [
          "Introduction: Probability and Statistics",
          "Exploring Data",
          "Percentages",
          "Sigma Notation",
          "Averages",
          "Outliers",
          "Quiz",
          "Skewness",
          "Interquartile Range",
          "Standard Deviation",
          "Correlation",
          "Causation",
          "Normalizing Data",
          "Quiz",
          "Probability 101",
          "Consecutive Events",
          "Complement Rule",
          "Theoretical vs Experimental",
          "Quiz",
          "The Law of Averages",
          "Bayes' Theorem",
          "Cumulative Distribution Function",
          "Elo Rating System",
          "Quiz",
          "Section Wrap-Up"
        ],
        "Continuing Your GameDev Journey": [
          "That's All Folks",
          "BONUS Lecture"
        ]
      },
      "requirements": [
        "Pen & paper or digital equivalent",
        "Internet access for quizzes and reference",
        "NO math skills required"
      ],
      "description": "Maths and video games go hand-in-hand. Video games are a practical, challenging, and fun way to sharpen your math skills. What's more, video games are like living math. From graphics and physics, to AI and movement, games are full of math.\nLearn foundational math concepts relevant to game development. In the course we break it down and build it back up, block by block. For each skill you will start from an interesting real-world problem. You'll always understand why you're learning a concept, and feel motivated to solve the problem in hand. In the course you will learn:\n\n\nHow to write and solve equations relevant to game development.\nBasic trigonometry the fun way, triangles, circles & stuff.\nEnough vector math to make 2D and 3D games.\nAbout imaginary & complex numbers, angles & quaternions.\nThe concepts learnt will help you create interesting scoring mechanics, have one object smoothly follow another, calculate the path of a projectile, target enemies using triangles and understand how random item drops work.\nThis course is the result of a successful Kickstarter, and consistent demand from our community of hundreds of thousands of students worldwide. There is a real need to improve math skills, not just for games, but for many areas of life. You'll be amazed how much more colourful the world looks as your math improves.\nAll the math you learn will be reinforced with quizzes. You'll write your own handwritten notes as you go, to help you remember your skills. We'll translate some of the math to pseudocode so you can see how it applies to C#, C++, Python and any other modern language.\nGet plugged into our communities of amazing developers on Facebook (nearly 20k), in our own TA-curated Community (17k views/day), and our student chat group (10k live at any one time).\nYou will get full lifetime access for a single one-off fee. The creators are qualified and experienced coders and avid gamers, so are able to explain complex concepts clearly, as well as entertain along the way.\nJoin us on this exciting journey now, you won't be disappointed!",
      "target_audience": [
        "Game developers of any level who want strong math foundations",
        "Non game-developers who want to learn math the fun way",
        "Those competent in math who want to hone their skills"
      ]
    },
    {
      "title": "Intro to UVW Unwrapping in 3ds Max for Games",
      "url": "https://www.udemy.com/course/3dmotive-intro-to-uvw-unwrapping-in-3ds-max-for-games/",
      "bio": "Master UVW Unwrapping for your game props as we guide you step-by-step through the most important tools in 3ds Max!",
      "objectives": [
        "Learn to UVW Unwrap your game assets in 3ds Max",
        "Understand the very basics of UVW Unwrapping for 3d",
        "Learn the basic, core UI of the UVW Editor in 3ds Max"
      ],
      "course_content": {
        "Introduction to the Principles": [
          "Introduction to the Course",
          "The Purpose of UVW Unwrapping",
          "Adding the Unwrap Modifier",
          "Navigating the Unwrap Window",
          "Unwrapping a Simple Box"
        ],
        "Learn by Doing - Unwrapping our Game Prop": [
          "Saving Your UV Settings as Default",
          "Planning Ahead!",
          "Instancing and the Stitch Tool",
          "Using the Relax Tool",
          "Important Unwrapping Tools",
          "Unwrapping a Curved Shape",
          "Unwrapping a Hose",
          "Packing UVs and Closing",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "A copy of Autodesk's 3ds Max"
      ],
      "description": "Using 3ds Max, we'll take an introductory look at UVW unwrapping, learn about hotkeys and setting up your UI to maximize your unwrapping efficiency, and then move straight on to unwrapping our Oil Tower prop. As we simplify the many tasks associated with unwrapping, we'll breakdown some of the most commonly used tools and have you unwrapping your assets in no time.\nAbout the Instructor:\nDon Ott has been working in the game industry as a 3d artist for over 8 years, and is the co-founder and owner of 3dmotive.com, which produces high-quality, game art and 3d related tutorials by industry pros! He is currently a Senior Artist at High Moon Studios in Carlsbad, CA, currently working on his 6th AAA title, slated for release in 2015. He is also a professor at Laguna College of Art and Design where he teaches Game Asset Modeling. You can see more of Don's work at www.donaldott.com.",
      "target_audience": [
        "Absolute beginners to 3ds Max",
        "Anyone who struggles with UVs or Unwrapping their 3d objects"
      ]
    },
    {
      "title": "Intro to C# Programming and Scripting for Games in Unity",
      "url": "https://www.udemy.com/course/3dmotive-intro-to-c-programming-and-scripting-for-games-in-unity/",
      "bio": "Learn the principle fundamentals of scripting and coding with the C# language for games inside of Unity!",
      "objectives": [
        "Learn the basics of C# programming for Unity",
        "Learn the basics of scripting and coding for Unity to bring more customization to your game"
      ],
      "course_content": {
        "Basic Principles and Introduction": [
          "Download Course Files Here!",
          "Introduction",
          "Creating a C# Script File",
          "Compiling and the Console Window",
          "Creating a Hello World Application",
          "Introducing Variables",
          "Writing Expression with Variables",
          "Enumerations",
          "Constants",
          "Conditional Statements and If",
          "For Loop",
          "While Loop",
          "Functions Introduction",
          "Events Introduction",
          "Functions with Arguments and Return Values",
          "Classes Introduction",
          "Rotating Objects with the Transform Class",
          "Unity Class Documentation",
          "Derived Classes Introduction",
          "Extending a Class",
          "MonoBehaviour"
        ],
        "Practical Application with Game Assets": [
          "Introduction",
          "Coroutine Details",
          "Creating a Coroutine",
          "WaitForSeconds and Coroutines",
          "Coroutines and Frame Delays",
          "Going further with Coroutines",
          "Components and Communication",
          "Accessing Components",
          "Searching for Components",
          "Using BroadcastMessage",
          "Polymorphism and Virtual Functions",
          "Overriding Virtual Functions",
          "Validation with C# Properties",
          "Delegates",
          "Moving Further with Delegates",
          "GameObjects",
          "Searching for GameObjects",
          "Transforms and Hierarchies",
          "Transforms and Translations",
          "Transforms and Rotations",
          "Transforms and Scaling",
          "Singletons"
        ],
        "Advanced Principles": [
          "Introduction",
          "Fixing Game Resolution From the Editor",
          "Fixing Game Resolution From Script",
          "Saving and Restoring Game Resolution",
          "Editing Materials From Script",
          "Creating Component Dependencies",
          "Scheduling Regular Tasks",
          "Creating Animation Curves",
          "Preparing to Work with Curves",
          "Animating Motion with Curves",
          "Notifications and Events",
          "Making NotificationsManager a Singleton Object",
          "Using .NET Dictionaries to Record Listeners",
          "Adding Listener Objects",
          "Posting Notifications",
          "Moving Further",
          "Bonus Lecture: Further Learning with 3dmotive",
          "Bonus Lecture: Further Learning with 3dmotive"
        ]
      },
      "requirements": [
        "The Unity Game Engine"
      ],
      "description": "In this lesson, Alan Thorn is will be covering C# fundamentals as well as how to script in Unity using the C# language. Here you'll learn how to create basic script files and get and understanding for variables, functions, events, loops, conditional statements, and classes as you get your feet wet with programming in Unity. Don't miss it!\n(Students - please look under Section 1 / Lecture 1 downloads for the source files associated with the lesson.)\nMore about the Instructor:\nAlan Thorn is a game developer, author and educator with 15 years industry experience. He makes games for PC desktop, Mobile and VR. He founded 'Wax Lyrical Games' and created the award-winning game 'Baron Wittard: Nemesis of Ragnarok', working as designer, programmer and artist. He has written sixteen technical books on game development and presented ten video training courses, covering game-play programming, Unity development, and 3D modelling. He has worked in game development education as a visiting lecturer for the 'National Film and Television School', as a Lead Teacher for 'Uppingham School', and is currently a Senior Lecturer at 'Teesside University' where he helps students develop the skills needed for their ideal role in the games industry.",
      "target_audience": [
        "Beginners to the world of scripting and programming",
        "People interested in customizing game elements for their projects"
      ]
    },
    {
      "title": "Write Unity CG Shaders From Scratch (2D, 3D)",
      "url": "https://www.udemy.com/course/unity-shader-development/",
      "bio": "Dive deep into learning how to write optimal shader code in Unity, from scratch!",
      "objectives": [
        "Write Unity CG Shaders From Scratch (2D, 3D)",
        "Be proficient at writing CG shaders using Unity",
        "Understand, design and create your own shaders to create any effect you can imagine",
        "Write optimal code usable in professional game development companies",
        "Create unique effects with a deep understanding of CG code as your foundation",
        "Combine imagination and shader code",
        "Unboxing the black box, that is custom shaders"
      ],
      "course_content": {
        "Introduction And Setup": [
          "Introduction & Setup",
          "Unity Setup and how to go through this course",
          "Introduction To The Shader Structure"
        ],
        "2D Shaders - Sampling Textures and Blending": [
          "Sampling A Texture 1",
          "Sampling A Texture 2",
          "Transparency and Blending"
        ],
        "2D Shaders - Animation and Texture Erosion": [
          "UV animations, transform, sliding",
          "2 Texture Samples",
          "Texture Erosion",
          "Texture Erosion Advance"
        ],
        "2D Shaders - Animating Along UVs": [
          "Animating Textures along UVs, Ideal for flowing streams in 2d",
          "Animating Distortions & Warps",
          "Mathematical UVs - Whirlpool effects",
          "Masked Distortion"
        ],
        "2D Shaders - Screen Space UV": [
          "Screen Space UVs to create Shines",
          "Creating \"Textured\" Shines from the original texture"
        ],
        "2D Shaders - Rotation UVs": [
          "Rotating UV Using Rotation Matrix"
        ],
        "3D Shaders - Basic Diffuse": [
          "Diffuse 3D Shader, basic lighting",
          "3D Shader, that takes in light from probes",
          "Moving lighting from vertex to fragment"
        ],
        "3D Shaders - Spec": [
          "Specular highlights"
        ],
        "3D Shaders - Normal mapping, how it works": [
          "Normal Mapping and how it works",
          "Reflections using reflection probes and how it works"
        ],
        "Shader Misc": [
          "Shader Multicompiles, shader features"
        ]
      },
      "requirements": [
        "Basic understanding of Unity"
      ],
      "description": "Write Unity CG Shaders From Scratch (2D, 3D)\nHave you ever wanted to write your own CG/HLSL shader code from scratch? Do you need help with understanding the intricate details of what happens on the back end? Learn to write shaders without the help of the material editor, and rather use the material editor as a prototyping tool?\nIn this Unity CG course, I will be teaching you the fundamentals of shader code so that you can write, create and develop unique looks that not only look amazing but run optimally too.\nThese techniques can be used for personal game development, and I will also go over best practices that can be used on the job in larger game companies.\nMy name is Benjamin Swee, your course instructor. I have been working at various game companies and been a Lead Rendering Engineer on popular titles such as Marvel Contest of Champions, Fast and the Furious games, & a few Lineage titles.\nMy role was often solo, as such I would create complete in-house rendering systems.\nIn this course, I not only want to bring you creative thinking when it comes to rendering, but also real-world industry experience, and the best practices that are used in titles that are launched today.\n\n\nShaders are a black box to many, I aim to unbox it\n\n\nNote that this course is a work in progress. I plan on continually updating it. Let me know in the course messages, what moreyou want to see!",
      "target_audience": [
        "Beginner programmers",
        "New Game developers",
        "Developers who think CG shading in Unity is a black box",
        "Anyone who wants to become a rendering engineer"
      ]
    },
    {
      "title": "Welcome To Game Design - Introduction to Board Game Design",
      "url": "https://www.udemy.com/course/welcome-to-game-design-master-board-game-design/",
      "bio": "Start creating your own Board Games from scratch, using free tools and playtesting with friends.",
      "objectives": [
        "Develop Complete Board or Card Games Prototypes",
        "Create Game Projects with Game Design Document and Canvas",
        "Know how the Tabletop Games were created and how they evolved",
        "What are the main Tabletop Game Genres and how they work",
        "Understand what are and when to use Physical Game Components",
        "When to use each type of aesthetics",
        "How to separate the game moments",
        "How to Balance your game using Math, Randomness and Probabilities",
        "Know what goes in the game and whats goes in expansions",
        "How to publish your game with a publisher of by yourself",
        "Find free assets for your projects"
      ],
      "course_content": {
        "Introduction": [
          "Download The Class Presentation",
          "Introduction",
          "What is A Game?",
          "Join Our Discord Server ?",
          "History - Ancient Games",
          "How to Rate the course",
          "History - New Games",
          "Quizz 1",
          "DISCOUNT COUPON FOR THE MASTER COURSE"
        ],
        "Game Components": [
          "Game Components",
          "Components Feel",
          "Game Aesthetics",
          "Quizz 2"
        ],
        "Game Moments and Types": [
          "Game Genres",
          "Game Tutorials",
          "Game Moments",
          "Game Mechanics",
          "Quizz 3"
        ],
        "Prototyping Your FIrst Game": [
          "Paint Prototypes",
          "Google Slides (Play Online)",
          "Icons For Your Game (Flaticon)",
          "Marketing and Card Templates (Canva)",
          "Game Assets, Graphics and Templates (Licensing)",
          "Physical Components",
          "Game Design Document and Canvas",
          "Your Game Structure (Gdd Template)",
          "Game Design Document Template for Board Games"
        ],
        "Playtesting and Publishing": [
          "Playtests",
          "Game Scope and Expansions",
          "Crowdfunding Platforms",
          "Publishing Costs and Distribution",
          "Quizz 5"
        ],
        "Extra - Mathematics": [
          "Introduction to Math",
          "Percentages and Simplification",
          "Multiple Events - Part 1",
          "Multiple Events - Part 2",
          "Possibilites Interval",
          "Balancing a Game"
        ],
        "Thank you!": [
          "Thank you!"
        ]
      },
      "requirements": [
        "There are absolutely no prerequisites to take this course."
      ],
      "description": "This course will teach you how to create Board Games from Scratch.\nWe start with the history of video games, then you'll learn about the game moments and components used to create a game.\nIn the end, you'll receive a template to start creating your game from scratch and how to publish it.\nYou will also learn how to balance your game to make it fun.\nYou will learn about many different aspects of Game Design in Tabletop Games and how they work, such as:\nHow to create prototypes using free tools and without being an artist\nThe History of Tabletop Game Consoles and their Purposes\nHow to choose the best components for your game\nHow the different game components feel in each situation\nWhat are the main game genres\nHow the game aesthetics influence in the game\nHow to write good rulebooks\nWhat are the main game moments\nWhere to find free assets for your game and use them commercially\nHow to balance your game using math\nHow to separate your game from expansions\nHow to publish and sell your games\nBy the end of some classes, I’ll challenge you to do some exercises, to help you learn better. They are not mandatory, but they can make you become a better game designer.\nThis course will help you create a bionic eye, after your know how games are made, playing them will never be the same again.\nEnroll Now and I See you in the course!",
      "target_audience": [
        "People who want to learn about the Tabletop Games Creation",
        "People who want to understand Game Theory",
        "People who want to know how to create Tabletop Games from Scratch",
        "Anyone who plans to create quick Prototypes to validate their game ideas",
        "People who want to become Great Game Designers",
        "People who want to know how to Create Games using the best components",
        "People who want to learn Mathematics for Games"
      ]
    },
    {
      "title": "How to Create a 3D Survival Game in Godot 4 with GDScript",
      "url": "https://www.udemy.com/course/godot-survival-game/",
      "bio": "Learn to Create a First Person Survival Game with Godot 4 and GDScript. Systems, Gameplay, Design, You'll Learn it All",
      "objectives": [
        "Master Godot Game Development: Learn 2D, 3D, AI, Physics, Animations, Audio and Much More!",
        "Robust Systems Architecture in Godot: Global Communication, Controllers, Configs, Custom Resources",
        "Clean Gameplay Systems in GDScript: Managers, Multithreading, Composition, Inheritance, Viewports",
        "Overcome Common Game Development Obstacles Easily, Using: Raycasting, Physics Layers, UI Layers, Rendering Techniques",
        "Better File Hierarchy",
        "Using Plugins in Godot",
        "Overall Creating Clean, Scalable and Flexible Systems as an Extremely Solid Base for Bigger Games"
      ],
      "course_content": {
        "Before we start": [
          "Note"
        ],
        "Let's Get Started": [
          "Setting Up The Project",
          "Player Character",
          "Interactable Items",
          "HUD, Events and Bulletins",
          "Scene Hierarchy And Stages"
        ],
        "Items": [
          "Item Resources",
          "Inventory Manager",
          "Player Menu 1 - UI",
          "Player Menu 2 - Items",
          "Player Menu 3 - Item Descriptions",
          "Crafting 1 - Pre-configurations",
          "Crafting 2 - Creating New Items",
          "Hotbar",
          "Item Equipping",
          "Axe Swinging"
        ],
        "Gameplay": [
          "Woodchopping",
          "First Person Weapons Rendering Problem",
          "Player Energy",
          "Player Health",
          "Eating",
          "Coal Mining",
          "Peaceful Animal",
          "Animal Fleeing",
          "Hostile Animal",
          "Building",
          "Campfire",
          "Cooking 1 - Pre-configurations",
          "Cooking 2 - UI",
          "Cooking 3 - Logic of Cooking",
          "Adding All Items",
          "Populating The Island"
        ],
        "Finalization": [
          "Water Shader",
          "Music",
          "SFX 1 - System Sounds",
          "SFX 2 - Dynamic Spatial Sounds",
          "SFX 3 - Static Spatial Sounds",
          "Day And Night Cycle",
          "Sleeping",
          "Main Menu",
          "Pause Menu",
          "Threaded Stage Loading",
          "Settings",
          "Saving And Loading Settings",
          "Ending The Game And Credits",
          "Fixes",
          "Polish",
          "Recap"
        ]
      },
      "requirements": [
        "Small understanding of game engines or programming will help you, but not necessary"
      ],
      "description": "Upd: Works in Godot 4.5!\n\nWelcome to our comprehensive course on creating a captivating 3D first-person survival game using the Godot Engine 4 and GDScript programming language. Embark on an exciting journey where you'll dive deep into game development, mastering essential skills to craft immersive gameplay experiences.\nThis is an advanced level course, so I recommend knowing the basics of Godot, like nodes, scenes and GDScript, before starting this one. Everything else will be covered on the course!\nThroughout this course, you'll be equipped with the knowledge and tools needed to bring your game ideas to life. Learn the fundamentals of game design as you build a first-person survival game from scratch, complete with intricate mechanics such as item gathering, crafting, hunting, cooking, and building.\nOne of the core focuses of this course is on establishing a solid systems architecture. You'll delve into creating a well-structured project file hierarchy and develop high-quality, flexible, and scalable game systems with clean and efficient code. By the end, you'll possess the skills to create games that are not only engaging but also easily maintainable and expandable.\nHere's a glimpse of what we'll cover:\nImplementing a first-person controller\nMastering raycasts for precise object detection and interaction\nAdding immersion with sound effects and animations\nEnhancing visual effects with particles and tweens\nImplementing a state machine AI for enemy behavior\nEstablishing a global event system for efficient communication between game elements\nDesigning robust inventory and item equipping systems\nImplementing a dynamic day and night cycle for realistic gameplay\nEnhancing visual aesthetics with a water shader and custom lighting effects\nUtilizing plugins for added functionality and multithreading for improved performance\nCreating custom resources\nBy the end of this course, you'll have the skills and confidence to create your own 3D first-person survival game, ready to share with the world. Join us on this thrilling adventure and turn your game development dreams into reality!",
      "target_audience": [
        "Game developers who want to learn more sophisticated and clean systems architecture and game systems",
        "Beginners who want to start their game development journey with a strong foundation"
      ]
    },
    {
      "title": "MVC Architecture For Unity 6.2 & C# - Lifetime Access",
      "url": "https://www.udemy.com/course/mvc-architecture-for-unity/",
      "bio": "Create Projects With Confidence | Model, View, Controller | Design Patterns | Unity 6 C# Source-Code",
      "objectives": [
        "All downloadable code updated for Unity 6",
        "Master design principles and design patterns",
        "Create new Unity projects with confidence, performance, and scalability",
        "Learn the pros and cons of the most popular architectural approaches",
        "Integrate MVC into projects with success",
        "Plan & create consistently clean code",
        "Identify the best MVC architectures for Unity, for gaming, and for your personal workflow",
        "Avoid the common pitfalls with creating, maintaining, and scaling Unity projects",
        "Get real experience on 4 included projects",
        "EXTRA: Includes coding assignments",
        "EXTRA: Full section on Unit Testing & TDD"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Introduction 1 - General",
          "Course Introduction 2 - Architecture",
          "Udemy's Early Review Prompt",
          "Course Introduction 3 - Philosophy",
          "Course Resources",
          "Section Quiz",
          "Section Assignment"
        ],
        "Unity Overview": [
          "Unity Overview",
          "Unity Structure",
          "Unity Code (C#)",
          "Section Quiz",
          "Section Assignment"
        ],
        "Software Design": [
          "Software Design Overview",
          "UML Diagramming",
          "Observer Pattern",
          "Command Pattern",
          "Section quiz",
          "Section Assignment"
        ],
        "Architectures - 1. Overview": [
          "Architectures Overview",
          "Established Architectures",
          "UMVCS Architecture",
          "Section Quiz",
          "Section Assigment"
        ],
        "Architectures - 2. Mini MVCS For Unity": [
          "Mini MVCS Overview",
          "Mini MVCS Installation",
          "Section Quiz",
          "Section Assignment"
        ],
        "Sample Projects": [
          "Sample Project Overview",
          "Sample Project 1 - Clock (Overview)",
          "Sample Project 1 - Clock (Without Mini MVCS)",
          "Sample Project 1 - Clock (With Mini MVCS)",
          "Sample Project 2 - Login (Overview)",
          "Sample Project 2 - Login (Without Mini)",
          "Sample Project 2 - Login (With Mini MVCS)",
          "Sample Project 2 - Login (Coding Assignment)",
          "Sample Project 3 - Roll-A-Ball (Overview)",
          "Sample Project 3 - Roll-A-Ball (Without Mini MVCS)",
          "Sample Project 3 - Roll-A-Ball (With Mini MVCS)",
          "Sample Project 3 - Roll-A-Ball (Coding Assignment)",
          "Sample Project 4 - Custom (Overview)",
          "Sample Project 4 - Custom (Getting Started)",
          "Sample Project 4 - Custom (Creating The View)",
          "Sample Project 4 - Custom (Communicating, Model<->View)",
          "Section Quiz",
          "Section Assignment"
        ],
        "Course Conclusion": [
          "Course Conclusion",
          "Final Quiz",
          "Final Assignment"
        ],
        "Extra: Unit Testing": [
          "Unit Testing - Overview",
          "Unit Testing - Setup",
          "Unit Testing - Creating Tests",
          "Unit Testing - Test Driven Development (TDD)",
          "Section Quiz",
          "Section Assignment"
        ],
        "Extra: More Sample Projects (Beginner)": [
          "Extra Sample Projects Overview",
          "Sample Project 5 - Calculator (With Mini MVCS)",
          "Sample Project 6 - Count Up (With Mini MVCS)",
          "Sample Project 7 - Bouncy Ball (With Mini MVCS)",
          "Sample Project 8 - Data Binding (With Mini MVCS)",
          "Sample Project 9 - Multiple-Minis (With Mini MVCS)",
          "Sample Project 10 - In-Game Tutorial (With Mini MVCS)",
          "Sample Project 11 - UI Toolkit (With Mini MVCS)",
          "Extra Sample Projects Conclusion"
        ],
        "Thank You!": [
          "Section Assignment - Course Review"
        ]
      },
      "requirements": [
        "COMPUTER: Windows or Mac",
        "SOFTWARE: Course includes links. All are free (Unity, C# Editor, & Web Browser)",
        "EXPERIENCE with Unity: Intermediate / Advanced. Including several months or more with Unity fundamentals",
        "KNOWLEDGE with C#: Including Classes, Interfaces, Methods, Properties Events, & OOP"
      ],
      "description": "Welcome to MVC Architecture For Unity!\n\n\nThis course gives you the training to create Unity projects which are faster to develop and easier to maintain.\n\n\nUNITY 6:\nCourse Content: These lessons apply to current and future versions of Unity 6\nCourse Downloads: All downloadable source-code has been updated to Unity 6\n\n\nCAPTIONS:\n• English: All videos have English subtitles. (Audio/Video/Text Content is in English)\n• French: Toutes les vidéos sont sous-titrées en Français. (Audio/Video/Text Content is in English)\n• German: Alle Videos haben Deutsche Untertitel. (Audio/Video/Text Content is in English)\n• Italian: Tutti i video hanno i sottotitoli in Italiano. (Audio/Video/Text Content is in English)\n• Japanese: ビデオはすべて日本語字幕付き. (Audio/Video/Text Content is in English)\n• Portuguese: Todos os vídeos têm legendas em Português. (Audio/Video/Text Content is in English)\n• Spanish: Todos los vídeos tienen subtítulos en Español. (Audio/Video/Text Content is in English)\n\n\nWe all start projects with the best of intentions. But during development we often find our projects do not meet our expectations for organization, scalability, and for our quality of life as developers.\n\n\nFEATURES:\n•   Rockstar content - Everything you DO need. Just the most relevant, powerful info!\n•   Punk-rock editing - Nothing you DON'T need. No \"ums\", no waiting, no fluff!\n\n\nQUALITIES OF MVC:\n•   Sound philosophies - Built on top of the best design principles and design patterns - championed by software experts\n•   Proven solution - Follow industry-leading practices and solve the biggest challenges with the greatest of ease\n•   Language-agnostic - Translate your new training and skills across many platforms and programming languages\n\n\nBENEFITS OF MVC:\n•   Faster software development - The recipe for how and where to implement your next feature is straight-forward\n•   Faster project maintenance - The separation of your coding concerns allows each to be more simple and more resilient\n•   Empowers you to create projects with confidence, performance, and scalability\n\n\nTAKEAWAY:\n•   After this course you will be confident to design and develop new projects with Unity and MVC\n\n\nINCLUDED SECTIONS:\n•   Course Introduction - Set the vision and goals for the course. Learn the many benefits of MVC architecture for your projects\n•   Unity Overview - Review the popularity and power of Unity as a game engine. Discuss the structure of the systems within and how MVC architecture is a welcome addition\n•   Software Design - Gain insight on the design principles of master software developers, add design patterns to your list of skills, and see the pros and cons of several custom and established architectural solutions\n•   Mini MVCS - Dive deep into this light, powerful architectural framework designed specifically for Unity\n•   Sample Projects - Together we'll review 4 complete Unity projects. All source-code is provided to students. We'll analyze and review a clock, a login, and a Roll-a-ball game. Finally, all of the course philosophy and theory will come together as we create a custom calculator from scratch\n•   Course Conclusion - Review the highlights, celebrate success, and set clear next steps to bring the learnings into your projects\n•   EXTRA Content - With the foundation of MVC architecture, we'll add the power of Unit Testing and Test-Driven Development ( TDD ). With this training you will naturally produce cleaner, more readable, and manageable code\n\n\nINCLUDED UNITY C# SAMPLE PROJECTS:\n•   1. Clock - A clock application. There is no Input, UI, or MonoBehaviours so its a simple way to learn the fundamentals of MVCS\n•   2. Login - A user login demo using Unity UI, one View, and one MonoBehaviour. We grow our expertise with MVCS communication between the coding concerns\n•   3. Roll-A-Ball - A complete 3D game with expanded scope. Includes multiple views, controllers, and MonoBehaviours\n•   4. EXTRA: Calculator - An extra special section. Here we create a new project from scratch to serve as a math calculator Bring together all the philosophy, design principles, design patterns, and architectural learnings of the course into this sample project\n\n\nINCLUDED ASSETS:\n•   Section Videos - High-quality HD video content covering all course topics\n•   Section Source Code- Full C# scripting and complete Unity projects included for download\n•   Section Challenge Assignments - Expand your knowledge with practical, relevant coding trials\n•   Section Quiz  - Ensure you digested all vital info before moving forward\n\n\nWHY LEARN UNITY?\n•   Unity is a versatile game engine which can be used for creating simulations, prototypes, and games\n•   Over 70% of the top 1000 mobile games are created using Unity Technology\n•   Deploys to PC, Xbox, PlayStation, iOS, & Android, WebGL, AR/VR, and more!\n\n\nWHY LEARN MVC ARCHITECTURE?\n•   Get hired! Larger teams on more ambitious projects. Experts use MVC\n•   Get promoted! Software architecture is a most in-demand skill that teams and leadership value in game development\n•   Get it done! Create better projects, more quickly so you can launch your next project on schedule\n\n\nEXTRA: WHY LEARN UNIT TESTING & TDD?\n•   1. Accelerate new features - With testing, developers focus on a small batch of code at a time, not moving on to the next bit until they are done with their batch. This gets results\n•   2. Level-up your maintenance - With Test-Driven Development ( TDD ), developers naturally produce cleaner, more readable, and manageable code\n•   3. Fail fast & Communicate clearly -  Get feedback quickly and improve your solutions. Leave a legacy of unit testing in your codebase which will serve as the best, living documentation\n\n\nWHY LEARN WITH SAMUEL ASHER RIVELLO?\n•   Sam is a Unity Certified Developer with over 20 years of experience creating games and teaching software design\n•   Sam empowers game teams with custom editor tooling for improved workflows ( Game Design, Level Design, 3D Modelers, 3D Animators )\n•   Sam is an author and editor, including Adobe, Future Publishing UK, Packt Publishing, and O’Reilly\n\n\nWHY WAIT?\n•   Avoid the common pitfalls with creating, maintaining, and scaling Unity projects\n•   You can't afford NOT to use Unit Testing and Test-Driven development on your projects\n•   Let's do this!",
      "target_audience": [
        "Learn to CREATE Unity projects with confidence, performance, and scalability",
        "You will AVOID the unmanageable spaghetti-code that often occurs in Unity projects",
        "You will COLLABORATE on high-quality, profitable Unity projects with talented teams"
      ]
    },
    {
      "title": "Unity 5 Interact with the database like a pro - php mysql",
      "url": "https://www.udemy.com/course/unity-5-interact-with-the-database-like-a-pro-php-mysql/",
      "bio": "Full video workshop on how to setup a professional backend to store and retrieve data for all Unity games unity unity",
      "objectives": [
        "build a professional backend layer to store and retrieve data for your Unity video game",
        "understand how to use MySQL and PHP as a solid data layer to communicate with Unity",
        "learn basics of PHP",
        "learn basics of MySQL",
        "learn quick setup of PHP and MYSQL for Unity",
        "read data from PHP and MySQL",
        "retrieve data from PHP and MYSQL",
        "insert data into MYSQL",
        "understand how Unity interacts with other systems"
      ],
      "course_content": {
        "Initial Setup": [
          "Course overview and instructor greetings",
          "Download the Unity project and open the scene",
          "How to play the game server and client and test them",
          "Overview of the scene assets and resources"
        ],
        "Authentication System": [
          "Designing the Login user interface in Unity",
          "Designing the registration UI",
          "Connecting the authentication UI to the code",
          "Swapping between Registration panel and login panel",
          "Adding a feedback message field",
          "Overview of the Authentication system"
        ],
        "The Dabatase Layer": [
          "Installing mySql and Php on MAC and Windows the easy way",
          "Installing the mySql editor",
          "Create the SQL database and user table",
          "Inserting new users using the mysql editor"
        ],
        "PHP Server setup and coding": [
          "Download Php text editors MAC and Windows",
          "Connect the php script to mySql database",
          "Programming the database login script",
          "Loging user connecting Unity login to database"
        ],
        "Connecting Php, MySql and Unity": [
          "Programming the registration in Unity",
          "Triggering the user registration from Unity",
          "Creating a serializable json user object in Unity",
          "Refactoring the request endpoints",
          "Launching the game client after successful login and registration",
          "Testing Game Host and Client Login",
          "Hide password fields and add user ID to User"
        ],
        "Player gear storing and retrievial": [
          "Programming the player gear storage class",
          "Create the SQL gear storage table",
          "Programming PHP code to retrieve player gear",
          "Retrieving stored player gear in Unity",
          "Equipping the helmet retrieved from the server",
          "Adding the item attributes",
          "Equipping the sword from the database",
          "Equipping the database off hand (shield)",
          "Equipping the shoulders from the database in Unity",
          "Adding a reference to the ground objects",
          "Programming Unity to send player gear to database",
          "Storing the player gear in the database",
          "Refactoring item equipping"
        ],
        "Player Backpack - Data storing and retrieving": [
          "Create the backpack SQL script",
          "Programming PHP script to retrieve backpack items",
          "Programming php script to store backpack item data",
          "Coding Unity script to get player backpack items from server",
          "Programming the code that stores backpack data in DB server",
          "INSERT gear and backpack entries at registration"
        ],
        "BONUS": [
          "Bonus"
        ]
      },
      "requirements": [
        "basic use of Unity is recommended but not required",
        "All software is free to use",
        "have a windows PC, MAC, or Linux"
      ],
      "description": "Note: all software used are FREE to download and use on PC, LINUX and MAC computers (no need to pay, cheers!)\nThis course teaches you how to create an authentication system for video games made with Unity.\nWith the authentication system, users can sign up and login into your game from any computers at anytime. It allows you, the developers, to store and retrieve important data such as the player's email address and password, but also critical information such as which weapons and gear items characters are wearing and which items are in the player's backpack.\nAll the great games are using it, look at world of warcraft, diablo, battlefield or league of legends.\nThis course goes beyond Unity as it teaches you how to program the server side that will interact with Unity using MySQL and in PHP.\nThe course is easy to follow because all the steps are show to you in the video lectures, plus you also get all the source codes as reference.\nNobody teaches you how to set up storing/retrieving game player data on a real server, only on home computers as a server, and of course that will not work except to entertain a few friends.\nI'll see you in the course\n***\nWhy use PhP and not connect Unity straight to the database?\nIt's a matter of design. Why would you want your players to connect to the DB directly? Assuming that you do not need to use the DB that often (just to adjust some values which might happen every couple seconds) It's probably always better to have an API in place that takes care of the communication between the client and the server/DB instead of having your players connect directly to the DB.\nAlso, it would probably mean storing your DB access information(db username and password) in your code or somewhere else on the clients side, which would mean that anyone would be able to find it out in some way. Wwhich is obviously something you don't want to happen.\nNow if a user calls a simple SQL link, he/she would have all control over what happens on the server and the DB.\nUsing the PHP layer, the DB isn't exposed to the player directly and as a developer, you’re able to check the data that your server receives to make sure that somebody isn't cheating.\nThe Php server layer checks the incoming data before forwarding it to the DB or else everyone could do some terrible things such as specify some values for the URL and just send them directly to your DB.\nAlso, you don’t want to store the data locally, within the player’s hard drive, because any data stored locally can be easily accessed and modified, and nefarious players could easily equip epic loot without having to defeat bosses, or change their score to a gazillion number.",
      "target_audience": [
        "gamers",
        "tech oriented people",
        "graphic designers",
        "computer students",
        "software engineers",
        "people that fiddle with Unity",
        "entrepreneurs",
        "side entrepreneurs"
      ]
    },
    {
      "title": "Unreal Engine: Advanced Widgets for UI",
      "url": "https://www.udemy.com/course/unreal-engine-advanced-widgets-for-ui/",
      "bio": "Learn advanced UI techniques that will help you build complex menu systems like Skyrim, Final Fantasy, and Call of Duty!",
      "objectives": [
        "How to create data driven dynamic menu systems",
        "Utilizing data tables and structs to create dynamic menus",
        "Advanced widget rendering techniques",
        "Custom widget interaction",
        "3D widget creation and interaction",
        "How to map a game controller to use your widgets",
        "Using a render target to render a secondary camera to a widget",
        "Using image sequence animations within widgets",
        "How to create drag and drop widgets",
        "How to create a Skyrim inspired inventory system"
      ],
      "course_content": {
        "Introduction": [
          "Project Primer",
          "Making The Most Of This Course",
          "UPDATE - DON'T SKIP!"
        ],
        "Data Driven Dynamic Widgets": [
          "Object-Oriented Programming",
          "User Created Widgets",
          "Creating Dynamic Menus",
          "Data Tables And Structs",
          "Importing Data At Runtime",
          "Parsing Data At Runtime",
          "Asset Registry",
          "Data Driven Widget System"
        ],
        "Custom Widget Interaction": [
          "Overriding Events And Functions",
          "Drag And Drop",
          "Preconstruct Event",
          "Controller Mapping",
          "Binding External Events",
          "Editor Widgets"
        ],
        "Advanced Widget Rendering": [
          "Responsive UI",
          "3D Widgets",
          "UI Materials",
          "Render Target Texture",
          "Retainer Box",
          "Widget Alpha Mask",
          "Advanced UI Animation"
        ],
        "Inventory System": [
          "Introduction And Set Up",
          "Item System",
          "Creating The 3D Pickup Widget",
          "Creating The Inventory Item and Inventory Widgets",
          "Creating The Stat Widgets",
          "Creating The Inventory Type Widgets",
          "Creating The Overencumbered Widget",
          "Setting Up The Inventory Menu Functions And Variables",
          "Character: Input Mapping",
          "Character: Initializing Widgets And Getting The Closest Item",
          "Character: Finishing The Character",
          "Inventory Design: Inventory Section",
          "Inventory Design: Description Section",
          "Inventory Design: Bottom Section",
          "Inventory Functionality: Keyboard Or Gamepad Function",
          "Inventory Functionality: Add Item",
          "Inventory Functionality: Populate Inventory",
          "Inventory Functionality: Update Weight",
          "Inventory Functionality: Set Favorite",
          "Inventory Functionality: Drop Item",
          "Inventory Functionality: Click Inventory Item Button",
          "Inventory Functionality: Change Inventory Type",
          "Inventory Functionality: Open Inventory Function",
          "Inventory Functionality: Finishing The Main Inventory",
          "3D Item",
          "Debugging",
          "Populating The World",
          "BONUS LESSON: Creating Widgets for UI Project Primer"
        ]
      },
      "requirements": [
        "Recommended: Basic computer knowledge",
        "Recommended: An understanding of basic navigation for the Unreal Engine",
        "Recommended: A basic understanding of how to create and display widgets",
        "Recommended: A basic understanding of widget designer mode and graph editor mode",
        "Recommended: Unreal Engine 4.27 or higher installed",
        "Recommended: Visual Studio 2019 Community or higher installed (If you want to follow along with the short programming section)",
        "Recommended: Desktop PC with Windows 7 (or later) 64-bit - OR - a Mac with Mac OS X 10.9.2 or later",
        "Recommended: DirectX 11 compatible video card",
        "Recommended: Quad-core Intel or AMD processor",
        "Recommended: 8 GB RAM",
        "NO programming experience needed!"
      ],
      "description": "You already know how to create UI, now learn how to master it!\n\n\nIn this course, you will learn advanced techniques to use the Unreal Widget Blueprint system to create UI (User Interface) for your games and applications. These are the same user interfaces that you see in popular games such as Skyrim, Madden NFL, Hogwarts Legacy, and Final Fantasy! These menus also mimic the menus that I use to create visualization applications at a Fortune 500 company, and are proven techniques! It is vitally important for any Unreal developer to understand how to create more advanced menu systems using the widget blueprint system. By the end of this course, you will have the knowledge and expertise to be able to create complex, data driven menus, utilize advanced rendering techniques, and create virtually any kind of menu within your own games and applications! You will also have developed an advanced dynamic inventory system inspired by The Elder Scrolls Skyrim!\n\n\nThis course is a an advanced course for those who already know the basics of the Unreal Widget Blueprint system. It is targeted at Unreal Engine users who have at least a basic understanding of widgets, though you will be able to follow along no matter what level you are currently. We will not be going over how to download and install the Engine or general navigation of the Editor, nor will we be going over how to create or display a widget. However, you will master how to design and program advanced widgets within the Widget Blueprint Editor! NO PROGRAMMING KNOWLEDGE REQUIRED!",
      "target_audience": [
        "Students who want to learn how to create UI for games and applications",
        "Students interested in learning advanced widget concepts in Unreal Engine",
        "Students interested in creating complex inventory systems",
        "Students interested in creating an Action RPG"
      ]
    },
    {
      "title": "Introduction to Mobile Games Development with Gamesalad",
      "url": "https://www.udemy.com/course/introduction-to-mobile-games-development/",
      "bio": "Learn to make Apple iOS, Android and desktop video games from scratch without any programming!",
      "objectives": [
        "You will learn how to create your own mobile and desktop games using Gamesalad.",
        "You will learn about the elements (sprites, behaviors, physics, sounds, and more) that make a successful game.",
        "You will learn to think like a game developer.",
        "There are downloadable source files and supplementary information to compliment the lectures.",
        "Interactive quizzes will let you test your knowledge of the subjects covered.",
        "By the end of this course you will have completed 3 different video games."
      ],
      "course_content": {
        "Introduction, Installation and Overview": [
          "What is game development and what is Gamesalad?",
          "Install Gamesalad for Macintosh",
          "Macintosh Interface Overview And A Few Words About The Windows Version"
        ],
        "Assets for the Course": [
          "Macintosh Asset Files",
          "Windows Asset Files"
        ],
        "Getting Down to Business with Gamesalad": [
          "Section 2 Assignments",
          "Starting a new game project",
          "The Scene Editor part 1",
          "The Scene Editor part 2",
          "Actors part 1 (sprites and images)",
          "Actors part 2 (sprites and images)",
          "Tags, organizing your actors",
          "Behaviors, actions and scripting part 1",
          "Behaviors, actions and scripting part 2",
          "Important Concepts – 1",
          "Attributes part 1",
          "Attributes part 2",
          "Attributes details handout",
          "Graphics part 1",
          "Graphics part 2",
          "Graphics details handout",
          "Audio, sounds and music",
          "Physics Engine",
          "Physics details handout",
          "Important Concepts – 2"
        ],
        "You're first full game — Classic Pong!": [
          "Make Your Own Pong–The First Commercially Successful Video Game",
          "Pong 2–Adding the paddles",
          "Pong 3–Add the boundaries and the ball/puck",
          "Pong 4–Scoring system and display",
          "Pong 5–Artificial Intelligence",
          "Pong 6–Tweaking the AI",
          "Pong 7–Allowing the computer to serve the ball",
          "Pong 8–Adding some UI messages and finishing the game"
        ],
        "Creating your own endless runner style game!": [
          "Endless Runner 1–What is an endless runner game?",
          "Endless Runner 2-Set up and begin building some platforms",
          "Endless Runner 3–Continue building the plaftorms",
          "Endless Runner 4–Randomize the platforms as they appear on screen",
          "Endless Runner 5–Control the platforms placement and add the player",
          "Endless Runner 6–Adding the player and some graphics",
          "Endless Runner 7–Animate the player and scroll (parallax) the background",
          "Endless Runner 8–Add the obstacles",
          "Endless Runner 9–Scoring and final game details"
        ],
        "Build a physics puzzle game!": [
          "Physics Puzzle 1–Physics puzzle game demo",
          "Physics Puzzle 2–Set up and adding some actors",
          "Physics Puzzle 3–Background scenery and scene building",
          "Physics Puzzle 4–Break the crates with a particle effect",
          "Physics Puzzle 5–Start the main character",
          "Physics Puzzle 6–Winning or losing",
          "Physics Puzzle 7–Adding the UI button controls",
          "Physics Puzzle 8–Finish the UI and build a splash screen",
          "Physics Puzzle 9–Level building"
        ],
        "Conclusion": [
          "The End?"
        ],
        "Bonus Material": [
          "Macintosh and Windows Interface Comparison",
          "IMPORTANT Information for International Windows Users"
        ]
      },
      "requirements": [
        "FREE download of Gamesalad Creator for either Macintosh or Windows computers.",
        "Mac OSX Lion or later, Core 2 Duo or later CPU required. Minimum of 2GB of RAM recommended",
        "Windows Vista, Windows 7, or Windows 8, Core 2 Duo or later CPU required. Minimum of 2GB of RAM recommended"
      ],
      "description": "Since the launch of the Apple App Store in 2008, games have been one of the most downloaded categories of apps for iOS devices, the same holds true for the Android App Stores. Most people seem to think games are very hard to build because they require a lot of difficult to learn programming knowledge. But in this class I will teach you how easy it is to make your own games with NO programming knowledge at all.\nNo prior programming or game development experience is needed for this class. In this class you will learn how to use Gamesalad Creator to create three different video games. You'll learn:\nHow to set up and use Gamesalad's development environment\nHow to think like a game developer\nAbout key game elements like sprites, behaviors, audio, and more\nHow to set up different kinds of player interaction, keyboard for desktop games and touch controls for mobile games\nHow to add physics to your games\nHow to publish your games as HTML 5 and post it on your own webpage\nThe three games that you will have completed by the end of class are:\nClassic Pong\nAn Endless Runner\nAnd a Physics Puzzle game\nAll three games can be previewed for FREE from the lecture outline below!\nLearn Gamesalad Book! I have recently published a book titled \"Learn Mobile Game Development in One Day Using Gamesalad\". While it is NOT required to complete this class it is a great companion to learn more details about Gamesalad and also contains four entirely different game building exercises. Udemy does not allow live links in this area so if you are interested in the book, simple do a Google search and it should pop right up for you.\nSome features of Gamesalad Creator include:\nGamesalad offers a FREE 15 day free trial of their software which should be plenty of time to work through the lessons in this class. After the 15 day free trial you are able to continue using Gamesalad on a monthly or yearly basis through various subscription plans.\nIOS and Android Publishing\nWeb Publishing with HTML 5\nPublish to Macintosh and Windows computers\nPublish to both the Kindle and the Nook\nBuilt in Physics engine\nSimple Drag & Drop user interface\nSign up now and you'll have all the knowledge you need to create and publish your own video games in no time!\nNote: Gamesalad has versions that work on both the Macintosh and Windows operating systems. This course uses the Macintosh version for all of the lessons, while all of the functionality is the same between operating systems, the interface is different so Windows users will see different window and menu layouts in their software. If you are a Windows user consider watching the free preview of Lecture 3 where I discuss the differences between the Windows and Macintosh versions.\nIf you are a Windows user please be sure and watch and read the Windows lectures in Section 8 Bonus Material first!",
      "target_audience": [
        "Beginners",
        "Anyone who wants to learn to make their own video games",
        "Anyone who wants to make their games available for Macintosh, Windows, Android, iOS, and HTML 5 platforms."
      ]
    },
    {
      "title": "Business Intelligence Solutions with Qlik Sense",
      "url": "https://www.udemy.com/course/business-intelligence-solutions-with-qlik-sense/",
      "bio": "Learn Qlik Sense data visualization and analyze data easily and make faster business decisions",
      "objectives": [
        "Develop an intuitive and informative dashboard with the appropriate depth of interactivity using Qlik Sense.",
        "Display data in maps, charts, and text across multiple sheets.",
        "Apply set analysis to your data in Qlik Sense expressions.",
        "Add security in your Qlik Sense applications for better data protection.",
        "Fix real-world issues you face, such as synthetic keys while loading your data .",
        "Modify data in existing tables to obtain values required for your dashboard design as per business requirements.",
        "Transform data to generate new columns and achieve desired outcomes on the dashboard.",
        "Understand the use and benefits of including Preceding Load and Mapping Load in your data model."
      ],
      "course_content": {
        "Learn Qlik Sense Dashboard Development": [
          "The Course Overview",
          "Cloud or offline Qlik Sense",
          "Overview of Qlik Sense Desktop",
          "App Demo",
          "Qlik Sense Architecture",
          "Creating an App",
          "Importing Data from Excel",
          "Understanding Fact and Dimensions",
          "Creating and Understanding Filters",
          "Creating new Sheets",
          "Types of Data Models",
          "Creating a Star Schema Model",
          "Viewing and Analyzing the Resulting Data Model",
          "Creating QVD Files",
          "Filter Properties",
          "Date Filters",
          "Qlik Sense Charts",
          "Master Items",
          "Bookmarks",
          "Adding KPIs",
          "Adding Charts",
          "Simple and Pivot Table",
          "Drill Down Dimension",
          "Text and Images",
          "Maps",
          "Basics of Set Analysis Expression",
          "Assignment Operators",
          "Set Operators",
          "Element Functions",
          "Qlik Sense Security Overview",
          "Understanding Various Types of Security",
          "Configuring Security",
          "Next Steps",
          "Test your knowledge"
        ],
        "Mastering Qlik Sense": [
          "The Course Overview",
          "What’s New in Qlik Sense?",
          "Understanding the Schemas",
          "Our Objective: The Data Model",
          "Introduction to Data Load Editor",
          "Loading Data in Qlik Sense",
          "What is Data Transformation?",
          "Loading Dimension Tables",
          "Synthetic Keys: Problems Arising from Them",
          "Synthetic Keys: Choosing a Solution That Works for You",
          "Synthetic Keys: Impact on Your Dashboard",
          "Loading Data: Database Example",
          "Loading Data from Other Data Files",
          "What Impact Does Circular Reference Have?",
          "Resolving Circular References",
          "Impact of the Circular References on the Dashboard",
          "Using the Where Clause to Filter Data",
          "Using Resident Load to Manipulate Data",
          "Using Where Exists for comparisons",
          "Adding Counters When Needed",
          "Mapping Load",
          "Preceding Load",
          "Introduction of Joins",
          "Using Joins",
          "Concatenation in Qlik Sense",
          "Auto- Concatenation in Qlik Sense",
          "Forced Concatenation in Qlik Sense",
          "Grouping Data Using Class Function",
          "How To Use the Class Function",
          "Link Tables in Qlik Sense",
          "Master Calendar",
          "Master Calendar MinMaxDate",
          "Master Calendar – Final Script",
          "Master Calendar – Dashboard Example",
          "Introduction To Set Analysis",
          "How Does Set Analysis Work",
          "Section Access",
          "Section Access Script",
          "Moving on From Here...",
          "Test your knowledge"
        ]
      },
      "requirements": [
        "A basic understanding of BI concepts is all you need to get started with this course."
      ],
      "description": "Qlik Sense is business intelligence (BI) and visual analytics platform that supports a range of use cases all within a scalable, governed framework. It not only allows you to create interactive reports and dashboards with stunning charts and graphs but also prepares you to be an expert in your organization when it comes to designing BI solutions using Qlik Sense.\nThis course takes a practical and incremental approach. It helps you master all the advanced Business Intelligence capabilities of Qlik Sense to debug common issues and optimize your data model. It will first teach you how to connect your Data with Qlik Sense & create your own Qlik Sense app. Then you'll learn to build your own dashboard by adding different functionalities, perform analyses, and secure your data in Qlik Sense. Moving further you be learning to create a data model to achieve optimized performance, including how to load data from different data sources & much more. Finally, you will be mastering the art of creating dashboards that are not only visually appealing and accurate but also very informative and a BIG bonus to your team while making those tough decisions.\nContents and Overview\nThis training program includes 2 complete courses, carefully chosen to give you the most comprehensive training possible.\nThe first course, Learn Qlik Sense Dashboard Development starts by connecting your Data with Qlik Sense and will create your own Qlik Sense app. You will see how to add data from popular spreadsheet applications MS Excel and work with Qlik Sense components such as charts, list boxes, input boxes, and Text objects. You'll build your own dashboard by adding different functionalities, perform analyses, and secure your data in Qlik Sense. By the end of the course, you will able to analyze data and make business decisions faster.\nThe second course, Mastering Qlik Sense we look at everything that goes into creating a data model to give you the most optimized performance, including how to load data from different data sources, fix synthetic keys, and other issues. Also included are topics such as creating link tables, the master calendar script, and applying set analysis to your data. Thus, you will master the art of creating dashboards that are not only visually appealing and accurate but also very informative and a BIG bonus to your team while making those tough decisions.\nAbout the Authors:\nAbhishek Agarwal has 12+ years of experience in developing analytical solutions. He is a seasoned BI professional with expertise in multiple technologies. He has been teaching BI technologies for the past 5+ years and has worked in a similar domain. He uses QlikView, Power BI, Tableau, and a couple of other technologies for end-to-end analytical solution development in his current work.\n\n\nColibri is a technology consultancy company founded in 2015 by James Cross and Ingrid Funie. The company works to help its clients navigate the rapidly changing and complex world of emerging technologies, with deep expertise in areas such as Big Data, Data Science, Machine Learning, and Cloud Computing. Over the past few years, they have worked with some of the world's largest and most prestigious companies, including a tier 1 investment bank, a leading management consultancy group, and one of the World's most popular soft drinks companies, helping each of them to better make sense of its data, and process it in more intelligent ways. The company lives by its motto: Data -> Intelligence -> Action.\n\n\nDiksha Bhosle is a versatile trainer from Colibri Digital. She has over 12 years' experience and has trained in a number of different technologies including Microsoft, CRM, Marketing Applications and of course Qlik Sense and Qlik View. Having worked with Qlik Technologies for a few years she has in-depth knowledge and understanding of both Qlik View and Qlik Sense. After a number of interactions with Various Qlik Sense customers, she has gained a deeper understanding of common issues faced by customers.",
      "target_audience": [
        "This course is for Business analysts, Business Intelligence professionals and Data Analysts or anyone who just wants to get started with Qlik Sense become experts in using Qlik Sense."
      ]
    },
    {
      "title": "Godot 4: Design & Code a Retro Atari Style 2D Game, SeaQuest",
      "url": "https://www.udemy.com/course/godot-4-retro-remake-design-and-code-a-seaquest-remake/",
      "bio": "Learn how to create a complete shoot em' up game based on SeaQuest from start to finish in Godot 4.",
      "objectives": [
        "Godot 4: Learn everything you need to know to start making your own games. Nodes, Signals, Singletons, GDScript, etc.",
        "Programming & Problem Solving: Develop Proficiency in GDScript Programming and Game Development Problem Solving",
        "Game Design: Understand game design and the theory behind making an enjoyable game",
        "Best Practices: Master Godot 4's Best Practices that make Game Development Easier",
        "Your Games: Gain the Skills to Create Your Own Games from the Ground Up",
        "Sharing your Game: Exporting and Publishing your Game to Share with the World"
      ],
      "course_content": {
        "Introduction & Project Setup": [
          "Project Setup"
        ],
        "Developing the Player": [
          "Player Input",
          "Player Movement",
          "Changing Player Direction",
          "Scene Tree Lesson",
          "Creating the Player Bullet Scene",
          "Player Bullet Movement",
          "Player Shooting",
          "Setting up Reload Delay",
          "Changing Bullet Direction & Bullet Cleanup",
          "Bullet Offset & Spread"
        ],
        "Enemies!": [
          "Sharks",
          "Death to the Sharks",
          "Scene Organization and Area Fixes",
          "Enemy Spawning Intro",
          "Enemy Spawning Direction Fix & Randomness",
          "Revamped Enemy Spawning System Intro",
          "Spawning Multiple Enemies with For Loops",
          "Intro to Arrays",
          "Finishing Enemy Spawning System"
        ],
        "Rescuing People": [
          "Creating the Person Scene",
          "Spawning People",
          "Intro into Singletons",
          "Creating the Global Singleton",
          "Person UI Setup",
          "Setting Up Game Events",
          "Node Ordering and Z-Index"
        ],
        "Oxygen System": [
          "Oxygen Bar UI",
          "Player Code Refactor into Functions",
          "Oxygen Zone Setup",
          "Switching Player to Oxygen State",
          "Oxygen Refueling",
          "Water Background",
          "Environment Tweaks",
          "Clamping Player's Position",
          "Unloading People",
          "Oxygen Bar Text"
        ],
        "Gameplay Improvements": [
          "Camera System",
          "Points System",
          "Fixing Enemy Disappearing Bug",
          "Game Over Signal Setup",
          "Game Over Screen",
          "Restarting the Game",
          "Resetting Global Variables",
          "Highscore",
          "Pausing Enemies",
          "Pausing Enemy Spawner",
          "Using Enums for States",
          "Flashing Textures to Alert the Player",
          "Shaking the Oxygen Bar",
          "Flashing Oxygen Bar White",
          "Sound Manager",
          "Sounds go brrr",
          "Adding the Ground Texture",
          "Creating Object Piece Scene & Animation Player Stuff",
          "Splitting Enemies & Player into Pieces",
          "Point Value Popups",
          "Moving Backwards while Shooting",
          "Rotating to Player Movement",
          "Prevent Collecting People with Full Crew",
          "Kill All Enemies with Full Crew"
        ],
        "Finishing the Course": [
          "Exporting your Game & Sharing it"
        ]
      },
      "requirements": [
        "No prior knowledge of programming, everything will be taught",
        "No prior experience with Godot"
      ],
      "description": "Introducing a comprehensive Godot 4 course! This course is going to teach you everything you need to know about Godot 4 and get you ready to make your own games.\nOver 60 engaging videos await you, packed with invaluable insights and hands-on tutorials\nDive into 13 hours of content meticulously crafted to make you a Godot Engine expert\nIn this course, you'll embark on a journey to master Godot's best practices and harness powerful systems that will supercharge your game development:\nDiscover the custom-built Global Game State for seamless game management\nHarness the Game Event Management System for organized, event-driven gameplay\nWhether you're a seasoned programmer or new to coding, we've got you covered. My explanations are tailored to ensure everyone can learn and succeed.\nLearn the fundamentals of game design\nMaster GDScript programming - no prior experience necessary\nThe centerpiece of this course is a modern twist on the classic Atari 2600 game, SeaQuest, designed by the legendary Steve Cartwright in 1983. Get ready for a \"retro remake\" like no other! While we draw inspiration from the original, we'll explore exciting new directions in game design.\nThe ultimate goal is to liberate you from the confines of \"tutorial hell.\" We've all been there, endlessly watching others create games without reaching that milestone ourselves. It's time to change your learning strategy.\nFollowing tutorials and courses is just the beginning. We'll teach you to dissect game mechanics and systems, leveraging online resources to solve problems independently. When you've mastered this skill, you'll have the power to create your own games from scratch.\nBy the end of this course, you won't just have a completed game; you'll have the knowledge and confidence to craft your own video games.\nEnroll now and start creating your own games today!",
      "target_audience": [
        "Beginner game developers looking to start their career making video games",
        "Existing game developers that want to learn the Godot game engine",
        "Intermediate game developers, looking to improve their Godot workflow"
      ]
    },
    {
      "title": "Unreal Engine 5: One Course Solution For Material",
      "url": "https://www.udemy.com/course/unreal-engin5-one-course-solution-for-material/",
      "bio": "Learn how material works in Unreal Engine 5 through a node by node, step by step approach",
      "objectives": [
        "Use different nodes to create complicated materials",
        "UV/Sine/Component Mask/Panner/Saturate/Lerp/World Position Offset and more",
        "Create a master material that can be used in any project",
        "Understand how bit maps like Base color/Roughness/Normal/Ambient Occulusion work",
        "Create a scene from scratch",
        "Material Blend/Vertex Painting/Decals/Paint Puddles",
        "Create a landscape from scratch",
        "Slope Blend/Height Blend/Auto Foliage/Run Time Virtual Texture",
        "Dot Product/Vertex Normal/Texture Bombing/Triplanar Projection and more",
        "Create an auto landscape material from scratch"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How to get help?",
          "Create First Project",
          "Why Don't I Understand Material"
        ],
        "Material Graph Basic": [
          "Material Graph Basic Section Overview",
          "Basic Data Types",
          "Roughness",
          "How to use lerp",
          "UV",
          "Component Mask",
          "Import A Texture",
          "Make Your Texture Move",
          "Panner",
          "Material Instance",
          "Writing Comments",
          "Section Challenge: Create A Fire Material",
          "Share Task: Share Your Fire",
          "Sine",
          "Manipulate Sine",
          "Create A Floating Rock",
          "Create A Dissolve Material",
          "Add Glow To Edges",
          "Interact With The Dirty Platform",
          "Interact With The Dissolve Mateiral",
          "Share Task: Share What You've Created",
          "Section Wrap Up"
        ],
        "Create A Master Material": [
          "Create A Master Material Section Overview",
          "Intro To Master Material",
          "Full UV Control",
          "Static Switch Paramater",
          "Full Color Control",
          "Organize Paramaters",
          "Metalic Control",
          "Specular Control",
          "Roughness Control",
          "Texture Compression Settings",
          "Normal",
          "Ambient Occlusion",
          "Section Challenge1:Review",
          "Channel Packing",
          "Share Task: Share your thoughts",
          "Channel Unpacking",
          "Section Challenge2:Channel Packed Texture In Master Material",
          "Displacement",
          "Create A Project Template",
          "Share Task: Share Your Master Material",
          "Section Wrap Up"
        ],
        "Create An Auto Landscape Material": [
          "Create An Auto Landscape Material Section Overview",
          "Set Up Landscape Project",
          "Basic Lighting Set Up",
          "Simple Sculpting",
          "Material Function",
          "Base Color Control In Material Function",
          "Camera Depth Fade",
          "Texture Bombing",
          "Macro Variation",
          "Specular In Landscape",
          "Normal In Landscape",
          "Section Challenge: ORD In Landscape",
          "Share Task: Share Your Material Graph",
          "Specular and Macro Variation Control",
          "Landscape Layer Blend",
          "Make A Landscape In Gaea",
          "Output Landscape From Gaea",
          "Import Landscape Maps To Unreal",
          "Section Challenge 1 - Slope Layer",
          "What does \"Auto Landscape\" mean?",
          "Create A Slope Mask",
          "Use Slope Mask In Landscape Material",
          "Transition Slope Blend",
          "Triplanar Projection",
          "Use Triplanar Projection For Slope Layer",
          "Section Challenge 2 - Review",
          "Create A Height Mask",
          "Use Height Mask In Landscape Material",
          "More Adjustment For Height Mask",
          "Section Challenge 3-Use Height Mask With Slope Layer",
          "Share Task: Share Your Solution",
          "Runtime Virtual Texture",
          "Set Up Runtime Virtual Texture",
          "Create Runtime Virtual Texture Blend",
          "Use RVT Blend In Material",
          "Auto Foliage",
          "Landscape Grass Type",
          "Create A Foliage Mask",
          "Performance Optimization For Foliage",
          "Fade In Grass",
          "Section Challenge 4-Auto Trees",
          "Block Surrounding",
          "Post Processing",
          "Section Wrap Up"
        ],
        "Congratulations": [
          "Where to go from here",
          "Continue Your One Course Solution Journey..."
        ]
      },
      "requirements": [
        "No prior knowledge about materials needed, everything will be done from scratch",
        "Have a computer that can run Unreal Engine 5"
      ],
      "description": "Learn everything you need to know for creating and upstanding what's going on in materials for Unreal Engine 5.\n\n\nWe will first learn the most basic stuff for creating materials in the first section, such as data types, lerp, UV to get you right on track for materials.\n\n\nAfter the first section, with everything we learned, we'll dive deeper into materials to create our first master material. Understanding how a master material works is essential for working inside of Unreal Engine. And we do it completely from scratch. We'll also be going over usage of different maps like base color, normal, roughness and etc.\n\n\nIn the third section, we'll start create a scene using vertex painting from scratch. You'll learn the entire process from planning to rendering. After this section, you should be able to create any scene that you want.\n\n\nIn the final section, we'll be creating an auto landscape material right from scratch. In this section, not only will you apply all the things you learned previously, but you'll also learn how to create different masks for blending materials, auto foliage, runtime virtual texture, tiling break up techniques and all the other cool stuff.\n\n\nAfter this course, you should able to read most of the complicated graphs and follow any tutorials about materials you like.",
      "target_audience": [
        "Beginners who want to understand material in Unreal Engine",
        "Learners who want to create amazing materials from scratch",
        "Learners who want to know how to create a scene from scratch",
        "Learners who want to create a landscape from scratch"
      ]
    },
    {
      "title": "Learn To Create a Tower Defence Game With Unity & C#",
      "url": "https://www.udemy.com/course/unity-tower-defence/",
      "bio": "Game development made easy. Learn C# using Unity and create your own top-down strategy game!",
      "objectives": [
        "How To Create a full Tower Defence Game",
        "Spawning Waves of Enemies",
        "Placing & upgrading towers",
        "Creating Different Kinds of Enemies",
        "Creating Towers with different weapons and effects",
        "Creating Dynamic Paths for Enemies To Follow",
        "A Complete Currency System",
        "Audio systems",
        "Interactive Menus",
        "An in-world Level Select system",
        "and much more..."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Assets For Use In This Course"
        ],
        "Setting Up": [
          "Project Setup & Getting Started",
          "Laying Out A Level"
        ],
        "Enemies": [
          "Making An Enemy Move",
          "Creating A Path",
          "Following The Path",
          "Looking Where You Are Going",
          "Animating Movement"
        ],
        "The Castle": [
          "Attacking The Castle",
          "Displaying Castle Health",
          "Spawning Enemies",
          "Assigning To The Enemies",
          "Queuing To Attack",
          "Stopping Movement"
        ],
        "Towers": [
          "Setting Up A Tower",
          "Making Basic Tower Functionality",
          "Getting Enemies In Range"
        ],
        "Firing Cannons": [
          "Creating a Cannonball",
          "Fixing Ground Collisions",
          "Firing Cannonballs",
          "Finding The Nearest Target",
          "Turning The Cannon",
          "Optimising Target Checking",
          "Impact & Shot Effects"
        ],
        "Hurting Enemies": [
          "Damaging Enemies",
          "Displaying Enemy Health",
          "Limiting Damage To One Enemy"
        ],
        "Placing Towers": [
          "Creating A Button",
          "Starting Tower Placement",
          "Indicating Placement Position",
          "Getting Placement Position",
          "Placing A Tower",
          "Replacing The Indicator",
          "Limiting Placement Location",
          "Creating A Safe Button Clicking Zone",
          "Showing Tower Range"
        ],
        "Currency System": [
          "Making Money",
          "Spending Money",
          "Displaying Money",
          "Showing Money Problems"
        ],
        "Ending The Level": [
          "Winning & Losing",
          "Displaying The Result",
          "Preventing Towers When The Level Ends"
        ]
      },
      "requirements": [
        "A copy of Unity 2021.1 or newer",
        "Mac or PC capable of running Unity 3D"
      ],
      "description": "Learn how to create and program your very own tower defence game using Unity, an industry-standard game development program used by large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to understand such game elements as:\nSpawning Waves of Enemies\nPlacing & upgrading towers\nCreating Different Kinds of Enemies\nCreating Towers with different weapons and effects\nCreating Dynamic Paths for Enemies To Follow\nA Complete Currency System\nAudio systems\nInteractive Menus\nAn in-world Level Select system\nand much more...\nThe course also includes a complete version of the project to use for your own reference to ensure everything in your game works as it should!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own top-down strategy games",
        "People who want to create and publish their own games",
        "Complete beginners with an interest in learning game development",
        "Developers who want to re-skill across to game development",
        "People interested in working in the game design industry",
        "Competent and confident with using a computer"
      ]
    },
    {
      "title": "Learn C# and make a videogame with Unity",
      "url": "https://www.udemy.com/course/learn-program-csharp-make-videogame-unity-prefabs-animations-platform/",
      "bio": "Learn how to create your own videogames with Unity with C# the fastest and easiest way to learn how to program csharp",
      "objectives": [
        "Understand the fundamentals of programming such as the creation of variables, decision operators, iteration, collections, classes and objects.",
        "Understand how a computer program works, the stages and aspects of which it consists and its life cycle.",
        "Create and understand C # scripts for Unity.",
        "Interact with the videogame screen through the keyboard, moving the character, making him jump",
        "Program video games for Unity 5, including aspects such as Game Design, HUD, game dynamics and views."
      ],
      "course_content": {
        "Introduction": [
          "Welcome and Introducing Hidran Arias instructor",
          "Introduction"
        ],
        "Installing unity hub and unity": [
          "Installing unity hub",
          "Testing Unity and Visual Studio Community Edition",
          "Unity and c# documentation and developers community",
          "My first script",
          "Git repository with course's examples"
        ],
        "Programming basics": [
          "What is a variable?",
          "Variables: Adding attributes to a class",
          "Adding a string property to a class",
          "Variables: Summary",
          "Methods and functions",
          "What is a class?",
          "Class inheritance",
          "The execution flow",
          "Update method. Moving an object",
          "C# Tutor"
        ],
        "Decision making": [
          "Decision making. Intro",
          "Decision making. If and else statements",
          "Decision making.Not statement and operator",
          "Decision making.And and OR operator",
          "Decision making. Truth tables and summary"
        ],
        "Variables": [
          "Variable visibility",
          "Variable visibility: public vs private",
          "About variables' naming convention",
          "Built-in variable types intro",
          "Float and double types",
          "Arithmetic operators. Binary operators. The remainder operator",
          "Arithmetic operators: Unary operators",
          "Assigment operators",
          "Variable visibility",
          "What we have so far learned"
        ],
        "Methods and functions": [
          "About methods' naming conventions",
          "The input parameters of a function",
          "The return value of a function"
        ],
        "Object collections": [
          "Arrays",
          "Lists",
          "Data access",
          "Arraylists",
          "Dictionaries"
        ],
        "Operators and iterations": [
          "Iteration operators",
          "The foreach loop",
          "Foreach. Looping Hashtables and dictionaries",
          "The for loop",
          "The while loop",
          "Searching algorithm"
        ],
        "Object oriented programming": [
          "Object oriented programming",
          "Instantiating an object",
          "Methods",
          "Managing exceptions",
          "Constructors"
        ],
        "Let's create a game: Game design": [
          "The endless story",
          "The idea, divide and conquer",
          "Tasks list",
          "Key questions for the game designer"
        ]
      },
      "requirements": [
        "A computer (Windows, Linux or Mac) with at least 8GB of RAM",
        "No prior knowledge of programming or video games is required, as this course is an introduction to both.",
        "A computer (Windows, Linux or Mac) with Unity 5.4 or above installed. If you don't know how to install it, don't worry, in the first class we will cover all the steps necessary for you to download and install it like an expert.",
        "A video game idea that you want to develop, so that when you finish the course you can start directly with it."
      ],
      "description": "Welcome to Learn C# and make a videogame with Unity 2020 : beginner to pro.\nIf you are here, it is probably because you like video games and want to learn how to make your own video games. In addition, it is likely that you know how to draw pictures, design your own characters, your enemies, animations, scenarios, have thought out game mechanics, ... but you lack one thing: KNOW HOW TO PROGRAM!\nYou don't have to be ashamed. I myself did not create my first video game until I was 23 years old and since then, I had been studying mathematics. No one is born taught and that is why we are here: so that you can learn to make your own video game in Unity  with the C# (c sharp)  programming language, a simple language that is easy to learn, and that will give you many possibilities to expand your knowledge.\nIn this course, we will start with the basics and fundamentals: programming. Programming is like the language of computers. Right now you and I communicate in a common language: English, which we both understand perfectly and that is why we can be exchanging information: I write and you read. Probably if I were writing this to you in French or German, then you wouldn't even understand what I am telling you, not because it is easier or more difficult, but because I would be using a different language. Computers and mobile devices themselves have their own language, their jargon, their slang. That is where we will begin our learning path together, young Padawan: by learning what a program is, how it manages to communicate with the graphic part, and how we, by pressing an arrow or a button, can make the computer understand what we want to say . We are going to learn together basic programming aspects such as:\n\n\n• Variables and data types\n• Methods or code snippets\n• Object and object-oriented programming\n• Decision operators\n• Collections, arrays, and object lists\n• The iteration operators\n\n\nWith all this, it will be like the cook who leaves the academy and has been taught to peel, cut, cook, boil, season, season ... food. But even if we know how to fry an egg, we all know that fried eggs made by us, by our mothers, or by our grandmothers do not taste the same. Therefore, once we know the tools and basic principles of programming, we will put them into practice with a real project, our first 2D video game: a 2D platform where the objective will be to dodge enemies while collecting the maximum number of coins. It will be a simple video game but we will see its true potential in everything that can really be done from what we know:\n\n\n• We will learn how to plan the Game Design and to split up the development stages of our video game\n• We will learn what a prefab is and how they are used to create scenes for a video game\n• We will create our own menus and the game information HUD\n• We will learn typical mechanics and gameplay such as infinite scrolling or the physics of a video game\n\n\nAnd really with all this, believe it or not, you will have made your first video game !!! I would also like you to introduce yourself when you start, say where you come from and what knowledge of video game development you have, and share in the course's forum what type of video game you would like to make. Please refrain from impossibilities like \"I want to make a Dark Souls, a Witcher, a Metal Gear\" and so on. These games have studies of more than 400 expert developers and we are looking to get started. The goal is for you to make your first video game, and as such, it should be an achievable and easy goal to carry out so you don't get discouraged.\nWell, I've already warmed up and I'm looking forward to learning C # together and starting to create our videogame in Unity. So don't think twice and sign up now to start your career as a video game developer with Unity 2020 and C #.",
      "target_audience": [
        "Players and video game lovers who want to start in the world of video game development.",
        "Beginners in programming who wish to have a solid foundation in the world of programming and want to understand the code as an expert.",
        "Designers and graphic artists who want to learn to program their own video games in parallel with their artistic design skills."
      ]
    },
    {
      "title": "Create Your Own Augmented Reality Application",
      "url": "https://www.udemy.com/course/augmented-reality-merge-cube-create-your-augmented-reality-application/",
      "bio": "Create Your Own Augmented reality (AR) Apps in No Time using Free Tools without Experience Explore this wonderful world",
      "objectives": [
        "Understand different forms of Augmented Reality and their applications",
        "Understand the basic difference between Virtual Reality & Augmented Reality",
        "What is Augmented Reality?",
        "How does Augmented Reality work?",
        "Types of Augmented Reality",
        "Augmented reality devices",
        "What is an Augmented Reality Cube?",
        "Make Your Own Augmented Reality Cube at Home",
        "How to setup Augmented Reality Cubes in your home and everywhere"
      ],
      "course_content": {
        "Introduction and Getting Started": [
          "Introduction",
          "Clarifying AR App Goals and Feasibility Before Development",
          "Note",
          "What is Augmented Reality",
          "How Does Augmented Reality Work",
          "Types of Augmented Reality",
          "Introduction to Augmented Reality (AR)",
          "What is A Merge Cube",
          "Introduction and Getting Started"
        ],
        "Create Your AR Cube at Home": [
          "Print Your Merge Cube",
          "Printing and Cutting the Cube",
          "Downloading the App and Playing in Augmented Reality",
          "Practical Augmented Reality with Merge Cube",
          "Building and Using a Merge Cube"
        ],
        "Create 3D Shapes for Your Augmented Reality": [
          "How to Create 3D Shapes in Tinkercad and Export them",
          "Designing 3D Shapes with Tinkercad"
        ],
        "Create Your Augmented Reality Experience": [
          "How to Create a CoSpace Account",
          "How to Design Your AR Cube Space with 3D Shapes",
          "How to Import 3D Shapes to AR CoSpace",
          "Designing and Importing 3D Shapes in AR CoSpaces",
          "View Your Merge Cube Augmented Reality Creation on Your Phone",
          "Building AR Experiences with CoSpaces"
        ],
        "Resources": [
          "Metaverse",
          "Object Viewer for Merge Cube",
          "Dig (app) for Merge Cube",
          "CoSpaces",
          "Apps for AR creation",
          "You Augment"
        ],
        "Practice Test": [
          "Augmented Reality with Merge Cube Practice Test"
        ],
        "Who we are?": [
          "Who We Are?",
          "Reviewing Your Augmented Reality App Prototype for Feedback"
        ],
        "Course Wrap-Up": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A Windows or Mac Computer system",
        "Android SmartPhone or an iPhone",
        "A Will to Apply, Not Just watch"
      ],
      "description": "Create Your Own Augmented Reality (AR) Apps in No Time using Free Tools without Experience. Explore this wonderful world!\nCurious about Augmented Reality? You have come to the right place. Learn what Augmented Reality is and how you can use your own smartphone, Android, or iOS to start exploring this wonderful world of Augmented Reality.\nFor this course, you will need an Android Smartphone or iPhone.\nPower of Augmented Reality\nI came across Augmented Reality in 2015 after watching a video of an Augmented Reality 3D Modeling App. I was fascinated to know that such technology actually exists. So, I started researching different Augmented Reality platforms. I looked for a way to start playing with Augmented Reality at home without advanced equipment using things we all have at home. Now, I'm sharing this knowledge with you.\nThe Pokémon Go game is the best example of Augmented Reality. Other than that, Augmented Reality apps expand over a wide range of topics from education, business, architecture, health industry, home decoration, and obviously mobile gaming.\nWhat You Will Learn in This Course:\nWhat is Augmented Reality?\nHow does Augmented Reality work?\nTypes of Augmented Reality\nAugmented reality devices\nWhat is an Augmented Reality Cube?\nPhoto slideshow & list of apps for the Augmented Reality Cube\nA FREE “Augment Learning with Augmented Reality Cube” printable poster!\nClassroom integration ideas for the Augmented Reality Cube\nHow to setup Augmented Reality Cubes in your home and everywhere\nExternal links for Augmented Reality Cube\nUser Testimonials: \"This course opened my eyes to the endless possibilities of AR. It's practical and easy to follow.\" - Jane D.\n\"Amazing course! I created my first AR app within a week. Highly recommend!\" - Michael T.\nFAQ: Q: Do I need prior experience in AR to take this course? A: No, this course is designed for all levels.\nQ: Will I need to buy additional software? A: No, the course provides all the necessary tools for free.\nWhat You Will Learn\nUnderstand the fundamentals of Augmented Reality\nDevelop AR applications using free tools\nExplore various AR platforms and devices\nImplement AR Cubes in educational and practical settings\nWho Is This Course For\nAspiring AR developers\nTech enthusiasts curious about AR\nEducators wanting to integrate AR into their teaching\nAnyone interested in learning about AR technology\nRequirements\nAn Android smartphone or iPhone\nBasic understanding of using a smartphone\nNo prior AR experience needed\n\n\nAbout the Instructor:\nProTech Academy\nProTech Academy is dedicated to providing high-quality training and resources for professionals and individuals looking to enhance their skills and productivity. Our experienced instructors are passionate about helping students achieve their goals through practical, hands-on learning.\nInstructor Bio: Our instructors at ProTech Academy have extensive experience in project management, productivity tools, and team collaboration. They bring real-world knowledge and expertise to the courses, ensuring that students receive practical, actionable insights. Join us to learn from the best and take your productivity to the next level!",
      "target_audience": [
        "Augmented Reality Geeks",
        "Anyone who wants to Know what is Augmented Reality",
        "Anyone who wants to start playing with Augmented Reality at home without advance equipment"
      ]
    },
    {
      "title": "Creating a Node Based Editor in Unity 3D",
      "url": "https://www.udemy.com/course/creating-a-node-based-editor-in-unity-3d/",
      "bio": "Learn how to build your own custom Node Based editor directly inside of the Unity Editor, step by step.",
      "objectives": [
        "Learn to create a visual node editor in Unity 3D",
        "Learn to build custom Editor UI's with ease!",
        "Learn to build your own Custom Editor Windows in Unity 3D",
        "Understand how to create and save data created in your custom editor",
        "Actually understand how to create visual nodes in a custom editor that can be hooked up into other nodes to produce logic."
      ],
      "course_content": {},
      "requirements": [
        "You'll need a copy of Unity 3D",
        "Basic Understanding of C#",
        "Familiar with Unity and its interface"
      ],
      "description": "Game development requires the involvement of many different types of disciplines and people to complete. Often times the Game engine or software used to make the game, is very technical making it difficult for some disciplines to work efficiently in. This is where the creation of artist / designer tools come into play. As a unity developer, learning how to create Visual Editor Tools for artists and designers is crucial to the productivity of your game development production.\nThis course will guide you through the process of developing your first visual node based editor that can be used for any sort of game development task. It will give you the underlying knowledge of saving out your nodes data, giving the user the ability to connect nodes, create nodes, and delete nodes. By the end of this course you will have a fully functional node based editor that you can extend to meet the needs of your game development project.",
      "target_audience": [
        "This course is intended for anyone wanting to create their own custom game tools and editors within the Unity 3D game engine. Having a basic understanding of C# in Unity is all you will need to take this course.",
        "If you are just starting out with Unity then it is recommended that you explore more of the C# language and understand how to create basic custom editors in Unity3D."
      ]
    },
    {
      "title": "Unreal Engine: Ultimate Survival Horror Course",
      "url": "https://www.udemy.com/course/unreal-engine-ultimate-survival-horror-course/",
      "bio": "Learn how to create video games in Unreal Engine- from scratch!",
      "objectives": [
        "Make a COMPLETE game in Unreal Engine",
        "Learn blueprints and when to put them into practice",
        "A controllable character from scratch",
        "Design a robust foundation of interaction in-game",
        "Advanced inventory system and item inspection",
        "Tips on GAME DESIGN and indie horror games",
        "How to recreate famous game mechanics from your favorite horror games (Outlast, Amnesia, Resident Evil, FNAF)",
        "Creating a level with proper atmosphere, lighting, and post processing",
        "Jumpscares, cutscenes, objectives",
        "Advanced artificial intelligence",
        "A fundamental understanding of Unreal Engine"
      ],
      "course_content": {},
      "requirements": [
        "64-bit PC or Mac capable of running Unreal Engine",
        "8 GB of RAM"
      ],
      "description": "Ready to create games in Unreal Engine?\n\n\nThis course will teach you how to make a survival horror game, teaching all skillsets the fundamentals of game creation through one of the most popular genres in game media. We will go step by step through the game-making process to show how we can set up a character from scratch, well-designed gameplay, classic and advanced horror mechanics, artificial intelligence, and a lot more.\n\n\nIn this course, you will:\nMake a complete game\nCreate a playable character from scratch\nAn interaction system that allows you to easily assign objects in the world to be interactable\nCreate many horror mechanics to customize and choose from such as: multiple ways to open doors, flickering lights, crouching and sprinting, jumpscares, footsteps, leaning, finding notes, etc.\nUse the environment to hide from AI (e.g. hiding in lockers)\nLearn more game-creation knowledge such as objectives and cutscenes\nLearn how to design and create a good level, going over lighting, post processing, atmosphere, particle effects, and fog.\nGo over some fun mechanics from famous horror games such as Outlast, Amnesia, Resident Evil, and FNAF\nCreate smart AI enemies to add suspense and objective to your game.\nA very detailed inventory system with 3D item inspection (that includes rotating models)\nMany other fun activities such as game over screens, regenerative health, main menu, making 2D images out of 3D meshes, and more.\nMaster the ability to create a game in your vision.\n\n\nWe're going to dive straight in, starting a game from scratch and building ourselves an empire. It's going to be an incredibly fun journey, and at the end of it, you'll have the knowledge needed to create games on your own, from start to finish. You'll learn how much easier it can be to use Unreal Engine once you've got the hang of it, and then nothing will be in the way of you and your dreams of making and finishing video games.\n\n\nWhy Take This Course?\n\n\nEven if survival horror games aren't your interest, this course provides the steps necessary to create a video game from start to finish. You will learn many fundamental things about the game-making process and will be able to utilize that knowledge in the projects you work on from here on out. I'm excited to see what you can create because I understand what you're capable of. So are you ready?\n\n\nLet's start making a video game!",
      "target_audience": [
        "Passionate or curious people looking to expand their Unreal Engine skillset"
      ]
    },
    {
      "title": "The Art of Doing: Video Game Creation With Python and Pygame",
      "url": "https://www.udemy.com/course/the-art-of-doing-video-game-creation-with-python-and-pygame/",
      "bio": "From simple games using single images to complex games using classes and 100 sprites, this course will cover it all!",
      "objectives": [
        "Fundamentals of the Pygame library and overall video game design.",
        "The use of Classes and Inheritance to make complex code more organized and efficient.",
        "How to create surfaces, blit images, render text, handle user input, and detect collisions.",
        "How to work with sprites, sprite groups, and more robust collision methods.",
        "How to create our own tile map and read a tile map to design a game level.",
        "How to use 2 dimensional vectors to handle complex platformer motion such as running and jumping under gravity and friction.",
        "How to add custom character animations using sprite sheets to help make our games really come to life.",
        "How to use collision masks to have pixel perfect collisions when needed.",
        "Create 7 awesome games in total! 4 that are very beginner friendly, 2 that are intermediate, and 1 that is advanced."
      ],
      "course_content": {
        "Setup and Installation": [
          "Course Preview and Introduction",
          "Installing Python",
          "Installing Visual Studio Code",
          "Installing Pygame and Asset Gathering",
          "Finding All Assets For This Course"
        ],
        "Basic Pygame Tutorial": [
          "Creating a Display Surface",
          "Drawing on a Display Surface",
          "Blitting (copying) Images",
          "Blitting (copying) Text",
          "Adding Sound Effects and Music",
          "Discrete Keyboard Movement",
          "Mouse Movement",
          "Continuous Keyboard Movement",
          "Movement Restrictions and Alternative Keymapping",
          "Collision Detection"
        ],
        "Game #1: Feed the Dragon": [
          "Feed the Dragon Preview",
          "Feed the Dragon Setup 1",
          "Feed the Dragon Setup 2",
          "Feed the Dragon Gameplay 1",
          "Feed the Dragon Gameplay 2"
        ],
        "Game #2: Catch the Clown": [
          "Catch the Clown Preview",
          "Catch the Clown Setup 1",
          "Catch the Clown Setup 2",
          "Catch the Clown Gameplay 1",
          "Catch the Clown Gameplay 2"
        ],
        "Game #3: Snake": [
          "Snake Preview",
          "Snake Setup 1",
          "Snake Setup 2",
          "Snake Gameplay 1",
          "Snake Gameplay 2"
        ],
        "Game #4: Burger Dog": [
          "Burger Dog Preview",
          "Burger Dog Setup 1",
          "Burger Dog Setup 2",
          "Burger Dog Gameplay 1",
          "Burger Dog Gameplay 2"
        ],
        "Intermediate Pygame Tutorial": [
          "Class Basics",
          "Inheritance Basics",
          "Sprites and Sprite Groups",
          "Sprite Collide",
          "Group Collide"
        ],
        "Game #5: Monster Wrangler": [
          "Monster Wrangler Preview",
          "Monster Wrangler Setup",
          "Monster Wrangler Player Class",
          "Monster Wrangler Monster Class",
          "Monster Wrangler Game Class 1",
          "Monster Wrangler Game Class 2",
          "Monster Wrangler Game Class 3",
          "Monster Wrangler Game Class 4",
          "Monster Wrangler Game Class 5",
          "Monster Wrangler Fixing a Small Error"
        ],
        "Game #6: Space Invaders": [
          "Space Invaders Preview",
          "Space Invaders Setup",
          "Space Invaders Player Class",
          "Space Invaders Player Bullet Class",
          "Space Invaders Alien Class",
          "Space Invaders Alien Bullet Class",
          "Space Invaders Game Class 1",
          "Space Invaders Game Class 2",
          "Space Invaders Game Class 3",
          "Space Invaders Game Class 4"
        ],
        "Advanced Pygame Tutorial": [
          "Creating a Tile Map",
          "Designing a Level",
          "Using 2 Dimensional Vectors for Player Movement Part 1",
          "Using 2 Dimensional Vectors for Player Movement Part 2",
          "Adding Gravity",
          "Adding Jumping and Wrap Around Movement",
          "Sprite Animation",
          "Collision Masks"
        ]
      },
      "requirements": [
        "Basic Python/computer science understanding.",
        "Students should understand basic things like variables, lists, loops, and conditionals as I wont really spend time teaching these concepts but rather showing how to use them in larger projects.",
        "In the second half of the course we will be switching to using classes extensively. I will spend some time reviewing and teaching the topics of classes and inheritance but prior knowledge may be helpful."
      ],
      "description": "Have you learned the fundamentals of Python and then asked yourself; what's next?\nIf so, consider taking this course which will start you on your journey to making your own playable, fun, and rather addicting video games using Python and the Pygame library.\nSo often, when students ask for advice they are told to, \"Go build something\" or \"Get involved on a project\" but have no idea what projects to build or get involved in.\nThis course will set you on your way! In this course I will walk you though, step by step, on how to to design the layout and the functionality of 7 unique, engaging, and most importantly, FUN games.  By the end of this course, I promise that you will be coming up with your own game ideas and feel confident enough in your abilities to create them.\nIn my experience teaching computer science, students tend to flourish under the basics but hit a wall when we approach object oriented programming.  The shift to using Classes as a way to structure code is difficult and often times students don't have enough exposure to meaningful examples of how to use Classes to help make complex code more efficient.  I believe by the end of this course, you will understand how to use classes.\nThis course is designed in such a way that NO KNOWLEDGE OF CLASSES is needed to start!  We will begin by learning the fundamentals of the Pygame library and video game design concepts as we move onto making 4 very fun arcade style games.\nWe will then review/teach concepts of classes and inheritance in Python as they are crucial tools to help us take our games to the next level using Sprites and Sprite Groups.  We will spend some time learning more intermediate concepts such as how to use sprites, sprite groups, and various sprite collision detection methods as we move onto making 2 intermediate level games.\nThe third portion of this course will focus on more advanced topics such as creating a tile map and using/reading it to create more complex level designs, using 2 dimensional vectors to aid with more complex player movement such as running and jumping under forces of friction and gravity, and adding character animations to make our games really come to life!  We will use these more advanced concepts as well as all of our previous knowledge to make one last game that will be a great final project for you to show off!\nI'm really proud of this class.  I really believe it not only is a great learning experience but it is also A LOT OF FUN!  I hope you consider joining and taking part in the learning.",
      "target_audience": [
        "Beginner Python developers curious about video game design and the Pygame library.",
        "Beginner Python developers looking to strengthen their understanding of Classes and how they can be used in larger projects.",
        "Beginner Python developers who have a love for classic style arcade games."
      ]
    },
    {
      "title": "Godot 4 Shaders: Craft Stunning Visuals",
      "url": "https://www.udemy.com/course/godot-4-shaders/",
      "bio": "Master the Art of Shading: From Basic Techniques to Advanced Visual Effects in 2D and 3D Environments",
      "objectives": [
        "Dive into Godot’s shading language to craft eye-popping visuals.",
        "Start simple with shader basics, then cast complex visual spells.",
        "Animate mind-blowing 2D and 3D effects using vertex and fragment shaders.",
        "Conjure the ultimate 3D water effects that dazzle and delight.",
        "Turn game scenes from flat to phat with advanced shader techniques.",
        "Transform ordinary game visuals into extraordinary experiences.",
        "Decode the mystique of shaders with hands-on practice and examples.",
        "Elevate your games to art with visuals that tell a story beyond words."
      ],
      "course_content": {},
      "requirements": [
        "With just a sprinkle of Godot basics and a dash of enthusiasm, you're set to create something visually unforgettable."
      ],
      "description": "Ever wondered how to make visuals that keep players’ eyes glued to the screen? The secret sauce is Shaders and we’re here to help you pour it all over your game!\nWe'll take you from \"What’s a shader?\" to \"Check out this cool visual effect I made!\" in no time.\nJumpstart your journey with programming in Godot’s own shading language, moving swiftly from the basics to the cooler, more complex spells of the shader world. (GDScript, who? It’s time to meet the cooler cousin!)\nDiscover the magic behind fragment and vertex shaders in both 2D and 3D, and get hands-on with techniques that'll make your game scenes pop like never before.\nAnd yes, we're diving deep into creating that mesmerising 3D water shader – because your games deserve to look spectacular!\nThis course is perfect if you’re familiar with Godot basics but itching to elevate your games from great to \"Whoa, how did you do that?!\"\nWhether you’re just starting out or you’ve been in the game development arena for a while, if you dream of crafting visuals that tell a story beyond words, welcome aboard.\nFeeling confused by shaders or making the switch from another engine? We've got you.\nDreaming of creating stunning visual effects or eager to understand and master shaders? Consider it done.\nWith just a sprinkle of Godot basics and a dash of enthusiasm, you're set to create something visually unforgettable.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAnd you’ll get access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nJoin us and watch as your games transform with every line of code you write. Enrol now, your future games will thank you – and so will your players.",
      "target_audience": [
        "This course is perfect if you’re familiar with Godot basics but itching to elevate your games from great to \"Whoa, how did you do that?!\"",
        "Whether you’re just starting out or you’ve been in the game development arena for a while, if you dream of crafting visuals that tell a story beyond words, welcome aboard.",
        "Dreaming of creating stunning visual effects or eager to understand and master shaders? Consider it done."
      ]
    },
    {
      "title": "Game Development/Art - Create a 2D Action Game with Unity/C#",
      "url": "https://www.udemy.com/course/creating-a-cool-2d-action-game-in-unity/",
      "bio": "Game development & Game art/animation. Create a 2D top down shooter using Unity 2018, C# and Ps/Gimp.",
      "objectives": [
        "Learn how to sketch and paint 2D game characters.",
        "Create awesome 2D game animations using Unity.",
        "Make a player character that can move around an environment and shoot projectiles.",
        "Program some cool AI behaviors for various enemy game characters using C#.",
        "Code a customizable enemy wave spawner.",
        "Make a multi staged boss fight using state machine behaviors.",
        "Make multiple weapons and power ups.",
        "Learn how to make great main menus and responsive UI.",
        "Create epic particle systems and sound effects.",
        "Be able to make an entire game from A to Z using Unity, C# and some 2D application like Ps or Gimp. And then publish that finished product on Itch io, Newgrounds or Gamejolt."
      ],
      "course_content": {
        "HOW TO USE THIS COURSE": [
          "Course introduction",
          "How to Use This Course",
          "How to Use this Course Links",
          "Games Made by other Students"
        ],
        "CREATING THE PLAYER GAME CHARACTER": [
          "Section Introduction",
          "Sketching the Player Character",
          "Painting the Player Character",
          "Importing the Character in Unity",
          "Creating the Character's Rig",
          "Introduction to Unity's Animation Tools",
          "Creating the Player's Animations",
          "Programming the Player's Movement",
          "Creating the Animation Transitions",
          "Creating the Player's Weapon",
          "The Weapon's Rotation",
          "Shooting Projectiles",
          "Creating the Projectile's Particle Effect",
          "Making the Camera Follow Script"
        ],
        "CREATING THE ENEMIES": [
          "Section Introduction",
          "Drawing and Animating the Melee Enemy",
          "Setting up the Enemy Class",
          "Programming the Melee Enemy",
          "Drawing and Animating the Summoner",
          "Programming the Summoner",
          "Drawing and Animating the Ranged Enemy",
          "Programming the Ranged Enemy",
          "Making a Wave Spawner"
        ],
        "MORE WEAPONS & HEALTH PICKUPS": [
          "Section Introduction",
          "Creating More Weapons and Projectiles",
          "Enemy Drops",
          "Creating Health UI Part 1",
          "Creating Health UI Part 2",
          "Creating Health Pickups"
        ],
        "CREATING THE BOSS CHARACTER": [
          "Section Introduction",
          "Drawing and Animating the Boss Part 1",
          "Drawing and Animating the Boss Part 2",
          "Programming the Boss Part 1",
          "Programming the Boss Part 2",
          "The Importance of Playtesting"
        ],
        "ADDING DETAILS AND POLISH TO OUR GAME": [
          "Section Introduction",
          "Creating Particle Effects",
          "Adding Screen Shake and a Hurt Panel",
          "Creating a Cool Custom Cursor",
          "Creating Sound Effects",
          "Implementing the Sound Effects",
          "Creating a Health Bar for the Boss"
        ],
        "MAKING A MAIN MENU & A WIN AND LOSE SCENE": [
          "Section Introduction",
          "Creating the Main Menu",
          "Making Scene Transitions",
          "Creating the Win and Lose Scenes"
        ],
        "FINISHING UP": [
          "Publishing your Game on Itch.Io",
          "Bonus Lecture : What next ?"
        ]
      },
      "requirements": [
        "Have Unity and some 2D application like Ps, Gimp, SketchPad or MS Paint installed on your computer.",
        "Before starting this course you should understand the basics of Unity. Like saving scenes, navigating the interface, using the three basic manipulation tools (Translate, Rotate and Scale), create prefabs and add and modify components inside of the inspector.",
        "You should have a strong understanding of the basics of C#, such as creating variables, modifying those and calling functions.",
        "Have a strong desire to learn, have fun and create awesome games !"
      ],
      "description": "In this game development course you'll learn how to create a commercial quality 2D action game using Unity, C# and a 2D application like Photoshop or Gimp (whatever 2D drawing tool you have installed on your computer).\n\n\nHere is a list of the key things you will learn by watching this course :\nFirst of all, you'll have a stronger understanding of what it takes to actually finish a game from A to Z in Unity!\nYou'll learn how to sketch and paint 2D game characters, then import those creations inside of Unity, rig them and finally make game animations such as run cycles, attack animations, idle animations, and more!\nLearn how to make a player character who can move around an environment and shoot projectiles by programming in C#!\nCreate various enemy game characters: a melee monster that runs fast towards the player and leaps at him to attack | A spooky necromancer that summons small, vicious skeletons that chase after the player | a dangerous bat that shoots dark fireballs at the game's hero!\nUnderstand how to use state machine behaviors to create a multi-stage boss fight in Unity!\nMake multiple weapons the player can equip and use against the game's various foes. As well as a health pickup!\nCreate cool looking effects using Unity's particle system and 2D sprites!\nCreate fun sound effects using Audacity and then implement that inside of your game!\nYou'll learn how to make a nice main menu with responsive, animated UI!\nCreate smooth scene transitions using UI panels and animations!\nPublish your finished game to Itch io, Newgrounds, or Gamejolt!\n\n\nWhy learn from us?\nMy brother and I created this course to share our passion for making games and help others bring their unique visions to life!\nWe've been teaching aspiring game developers how to use Unity, code with the C# programming language, and make game art and animations. Our tutorials have been viewed by thousands and are very popular, every day we get dozens of developers thanking us for helping them out on their own game dev journey!\nWe've not only made tons of tutorials but we've also created plenty of games using Unity, both 2D, and 3D!\nSo we know what it's like to create a complete, polished experience from A to Z, and really want to equip you with the right tools and knowledge so you can do the same!",
      "target_audience": [
        "A beginner/intermediate game developer interested in learning how to create a fun, commercial quality 2D action game from A to Z using Unity and C#.",
        "This course is also for those curious about programming AI using C#.",
        "Someone wanting to learn how to draw and animate 2D game characters using a 2D application like Ps or Gimp and Unity.",
        "This course is NOT for complete beginners having never touched Unity or C#. You should have understood the basics of both Unity and C# if you wish to properly follow along and get the most out of this course."
      ]
    },
    {
      "title": "Game AI Fundamentals with Godot Engine",
      "url": "https://www.udemy.com/course/game-ai-fundamentals-with-godot-engine/",
      "bio": "Learn to how code common game AI features in the Godot Engine",
      "objectives": [
        "Vision Systems",
        "Leading Shots",
        "State Machines",
        "Team-Based Combat",
        "Optimized Pathfinding for Hundreds of Npcs",
        "Accuracy and Aiming Systems"
      ],
      "course_content": {
        "Course": [
          "Intro",
          "Vision",
          "Aiming",
          "Homing Missiles",
          "Pathfinding",
          "Team Fight",
          "Leading Shots - Projectiles With No Gravity",
          "Leading Shots - Projectiles With Gravity",
          "Accuracy System",
          "State Machines - Putting Everything Together"
        ]
      },
      "requirements": [
        "experience with programming in the Godot Engine"
      ],
      "description": "This course covers a bunch of algorithms I use in my games when designing and making npcs to fight the player or fight with the player. These are things like vision systems for handling vision cones and line of sight, aiming systems for aiming at targets with set turn speeds, homing missiles, leading shots when firing projectiles with and without gravity, accuracy systems to simulate more realistic accuracy when leading shots, optimized pathfinding for hundreds of npcs, teams and group battle systems for npcs to engage in large-scale battles with each other, and state machines to simulate behaviours like patrolling, guarding, attacking, and dying. This course is for the Godot engine, though if you're a somewhat experienced programmer you could probably translate the code over pretty easily. There's a new stupid unhelpful 'feature' that requires me to have two hundred words in the description which is completely pointless and wastes people's time so here's some extra words that add literally nothing but help me reach the word count required which some dumb executive probably decided would make courses on this site look more professional when in reality professionals want short and to-the-point content without stupid arbitrary requirements. This course is designed to be clean and to-the-point as much as possible and has a unique lesson-based approach in which I provide partially set-up game scenes with a defined problem to be solved (such as leading shots on a moving target). I then go through and explain how to write the necessary algorithms to solve this problem.",
      "target_audience": [
        "game developers with experience with Godot Engine"
      ]
    },
    {
      "title": "The Ultimate Hyper-Casual Guide With Unity",
      "url": "https://www.udemy.com/course/the-ultimate-hyper-casual-guide-with-unity/",
      "bio": "Learn How To Make Hyper Casual Games With Unity",
      "objectives": [
        "Learn to code in C#, a powerful programming language, from scratch to hero.",
        "Get experience using Unity 2019",
        "Develop a Great Logic for Hyper Casual Games",
        "Learn how object oriented programming works in practice.",
        "Get experience using Unity Game Engine"
      ],
      "course_content": {
        "Introduction": [
          "Showreel",
          "Download Unity And Looking At Its Interface",
          "How To Move In Unity Scene"
        ],
        "C# From Scratch": [
          "Variables",
          "Operations With Variables",
          "Functions",
          "Conditional Statements",
          "Loops",
          "Arrays",
          "Arrays And Functions",
          "Classes And Objects",
          "Constructors",
          "Passing Values And References To Function Parameters",
          "Getter And Setter/Public or Private",
          "Inheritance",
          "Monobehaviour",
          "Static Variables And Functions",
          "Coroutine",
          "Enumerations",
          "Arrays And List"
        ],
        "The Fish Master": [
          "Importing Assets",
          "Preparing the Hook",
          "Hook X Movement",
          "Movement Y Hook",
          "Fish",
          "Spawner",
          "Hooking Fishes",
          "Main UI",
          "Idle Manager",
          "Game Screen",
          "Finishing Our Game"
        ],
        "Paint Hit": [
          "Importing Assets",
          "Ball",
          "Make A New Circle",
          "Color Changer",
          "Making A New Circle",
          "Adding More Circle Scripts",
          "Level Handler Script",
          "Color Script",
          "Making Hurdles",
          "Gameplay UI",
          "Balls And Hearts",
          "Finishing Gameplay UI",
          "Level Complete Screen",
          "Pause And Fail Screen",
          "Main Menu And Start Game",
          "Details"
        ],
        "Angry Blocks": [
          "Importing Assets",
          "Setting Up Our Project Or Cannon",
          "Setting Up Our ShootScript",
          "Finishing Our ShootScript",
          "Shooting And Creating Ground",
          "Spawning Level",
          "Blocks",
          "Changing Levels",
          "Camera Transitions",
          "Shot Count",
          "Shot Count Text",
          "Balls Count And Block Text",
          "Extra Ball Bar",
          "Setting Up For Gameover",
          "Gameover UI",
          "Adding Sound And Finishing Gameover",
          "Pause",
          "Score And HighScore"
        ],
        "Color Helix": [
          "Importing Assets",
          "Implementing Touch",
          "Helix And Cylinder",
          "Ball Movement",
          "Wall",
          "Camera Follow",
          "Colors",
          "More About Colors",
          "Spawning Walls",
          "Adding Finish Line And Collider",
          "ColorBump",
          "Generate Level",
          "Star ColorBump",
          "Changing Color And Finish Line",
          "Adding Smaller Wall",
          "Adding Levels",
          "Game Over",
          "Flashback",
          "Score",
          "UI Score And Pointdisplay",
          "Level UI (Part 1)",
          "Level UI (Part 2)",
          "Soundfx"
        ],
        "Stack Ball": [
          "Stack Fall Analyse",
          "Preview Of The Stack Fall",
          "Adding Sprites And Players Movement",
          "Level Spawner",
          "Destroying",
          "Level Spawner Ramping Up Difficulty",
          "Player Invincible",
          "Stack Part Controller And Stack Controller",
          "Player State And Level Increase",
          "ScoreManager",
          "SoundManager",
          "Game UI",
          "Scripting Game UI",
          "Fire Effect",
          "Home UI",
          "Ignore UI",
          "Finish UI",
          "Gameover UI",
          "Players Effect",
          "Colors"
        ],
        "Color Bump": [
          "Color Bump Analyse",
          "Preview Of The Color Bump",
          "Importing Assets And Players Movement-",
          "Camera Follow And Players Bounds",
          "How To Make Levels",
          "Cylinder Movement And Fixing Project",
          "Player Start, Death And Background",
          "Start And Finish",
          "Generate Lighting",
          "InGame UI GameManager",
          "GameManager",
          "Player Game Over",
          "Fixing Bugs And Adding Trail"
        ],
        "Mr.Bullet": [
          "Mr.Bullet Analyse",
          "Preview Of Mr.Bullet",
          "Improt Assets And Adding A Player",
          "Adding Laser To The Gun And Environment",
          "Player Aim",
          "Player Shoot",
          "Enemy Ninja Part 1",
          "Enemy Ninja Part 2",
          "Creating Props",
          "Using Props (Plank, Boxplank)",
          "Creating Tnt Explosion",
          "GameManager",
          "Game UI And Bullet",
          "Gameover And Crosshair",
          "WinScreen UI",
          "Script WinScreen",
          "Making Levels",
          "SoundManager",
          "Main Menu UI",
          "Scripting Level System",
          "Fade From Scene to Scene"
        ],
        "Run Race 3D": [
          "Run Race 3D Analyse",
          "Preview Of The Run Race 3D",
          "Importing Sprites And Setting Up Scene",
          "Players Movement",
          "Player Jump",
          "Wall Jump And Turn",
          "Double Jump",
          "Wall Slide",
          "Animations",
          "Turn Mechanic",
          "Making Our First Level",
          "Camera Follow",
          "AIController",
          "Checkpoint",
          "Ranking System",
          "Who Is At 1st Place",
          "Declaring A Winner",
          "Finish Lane Makes Sense Now",
          "Real Time Leaderboard",
          "UI Leaderboard",
          "Scripting Game UI And Leader Board",
          "3 2 1 Go",
          "Adding More Levels",
          "Trampoline",
          "Menu Manager",
          "Level System",
          "Player And Bot Names",
          "Camera Zoom In",
          "Creating Character Selection",
          "Scripting Character Selection",
          "Finishing Up Character Selection"
        ]
      },
      "requirements": [
        "Must have a Mac or PC capable of running Unity3D"
      ],
      "description": "This is the most comprehensive online course for making Hyper Casual Games that will take you from beginner to creating your own Hyper Casual games in Unity Game Engine!\nThe course is completely project-based.\nStarting things off very simple with learning Unity and C# from scratch, so if you are a complete beginner, don't you worry I got you covered. You will learn C# from basic to advance topics in no time that will set you off to make games in it.\nThe course is mostly focusing on being All Level course so if you are a beginner or intermediate game developer I will provide you with information that will teach you everything you need to know as a beginner and also teach you some advanced game development techniques. The structure of the course is starting with basic info and slowly progressing into more difficult as we progress with the course.\nMy idea for this course is to make it a single place that will have all the resources you need to learn how to create Hyper Casual Games using the Unity Game Engine.\nBy having a single course with all the resources it is much easier for me as an instructor to answer your questions so rest assured that you will have my full support while you are going through the course lectures. And it will be much easier for me to update the course on a regular basis.\nI want to create this course to be the best learning resource for making Hyper Casual Games that I will upload more and more content based on your vote thus it will make it easier to have my full support.\nSome of the things you will learn in the course:\nUnity's interface\nImporting Assets\nOrganizing the Project\nBasic, Intermediate And Advanced C# Programming\nBasic AI(Artificial Intelligence)\nAdvanced AI(Artificial Intelligence)\nSound FX\nLearn How To Use Unity's UI System\nCreate And Animate Menus\nLevel System (Lock/Unlock Levels)\nVisible Level Progress\nRandom AI Names\nInput Player Name\nThat And Much More Is Awaiting You In This Course\nIf You ever had an idea for an awesome game, then enroll in this course and learn the tools that you need to develop Your next hit game!!!\nEnroll Now!! You Will Not Be Disappointed!!",
      "target_audience": [
        "Beginners Who Are Interested In Game Development.",
        "Beginners With No Coding Experience",
        "Anyone Looking To Learn Hyper Casual Games",
        "Experienced Game Developers"
      ]
    },
    {
      "title": "From Tester to QA Lead: Game Testing, Jira & QA Mastery",
      "url": "https://www.udemy.com/course/qa_lead_in_game_testing/",
      "bio": "Become a Game QA Lead: Master Testing, Leadership, and Project Management Skills",
      "objectives": [
        "Understand the role and responsibilities of a QA Lead in game development",
        "Develop skills to transition from QA Tester to QA Lead effectively",
        "Learn how to create detailed test plans, strategies, and manage project timelines.",
        "Master Jira setup, bug reporting, and configuring dashboards and filters",
        "Gain expertise in risk assessment and implementing mitigation strategies",
        "Understand team dynamics and manage QA personnel effectively for optimal performance"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "QA Lead role essentials": [
          "Responsibilities of QA Lead",
          "Skills of QA Lead",
          "Transition to QA Lead position"
        ],
        "Project preparation": [
          "Requirements",
          "Requirements listing",
          "WBS overview",
          "WBS Creation",
          "Estimation techniques",
          "Estimate creation",
          "Planning",
          "Resource allocation",
          "Timeline creation",
          "Test Plan basics",
          "Test Plan Creation"
        ],
        "Documentation": [
          "QA Reports",
          "Report Template",
          "Report Creation",
          "Defining Severity and Priority"
        ],
        "Jira Setup": [
          "Bug Template",
          "Statuses setup and Filtering",
          "Dashboard Creation"
        ],
        "Testing processes": [
          "Milestones",
          "Alpha Criteria",
          "Adding criteria to Jira",
          "Adding Beta and Golden Criteria",
          "Prioritization",
          "Triage meetings",
          "Environments",
          "General Activities Overview"
        ],
        "Risk Management in QA": [
          "Risk Management Basics",
          "Risk Log Creation"
        ],
        "QA Team": [
          "Communication",
          "Team Composition",
          "Team Composition Preparation",
          "Team Engagement"
        ],
        "Questionnaire for check": [
          "General test"
        ],
        "End": [
          "A few last words"
        ]
      },
      "requirements": [
        "Basic understanding of game development and testing processes"
      ],
      "description": "This course is your guide to becoming an effective QA Lead in game development, crafted entirely from real-world experience. Here’s what you can expect:\n\nReal-World Experience: Every lesson is based on practical, hands-on knowledge—no fluff, just what you’ll actually use on the job.\nKey Skills for QA Leadership: Learn how to transition from QA Tester to QA Lead, manage a team, and drive quality assurance processes effectively.\nEssential Tools & Techniques: Master the essentials, like creating test plans, timelines, setting up efficient workflows in Jira, and developing strong documentation practices.\nRisk Management: Understand how to assess risks and create mitigation strategies, allowing you to anticipate challenges and keep projects on track.\nCommunication & Collaboration: Gain the skills needed to communicate effectively with development teams and other departments, ensuring smooth workflows and fewer bottlenecks.\nTeam Dynamics & Management: Learn how to engage, support, and manage QA personnel, fostering a high-performing and motivated team.\nThis course can be highly beneficial for:\n\nJunior and Mid-Level QA Testers – Those looking to advance into a leadership position in game testing.\nAspiring QA Leads – Individuals aiming to transition from QA Tester to QA Lead and learn essential management skills.\nNewly Appointed QA Leads – Those recently promoted to lead QA roles who need practical guidance and real-world insights.\nGame Development QA Engineers – Engineers who want a better understanding of QA leadership and team management within game development.\nProject Managers in Game Development – PMs who work closely with QA teams and want to understand the QA lead’s role and responsibilities.\nFreelance Game Testers – Freelancers who want to enhance their skills and marketability by adding leadership and project management expertise.\nDevelopers Interested in Quality Assurance – Developers looking to broaden their knowledge of the QA process and how QA leads contribute to the success of a game project.\nGame Development Students and Graduates – Newcomers to the field who are exploring a potential career path in QA and want to understand both foundational and leadership concepts.",
      "target_audience": [
        "QA professionals looking to transition into a QA Lead role",
        "Whether you're currently a QA Tester seeking career advancement or a professional looking to gain expertise in managing QA teams, this course will provide you with the knowledge and tools to succeed.",
        "No prior leadership experience is required, making it accessible to those eager to take the next step in their QA career."
      ]
    },
    {
      "title": "Unity 3D Master Class - Game Development For Beginners",
      "url": "https://www.udemy.com/course/unity-3d-master-class-game-development-for-beginners/",
      "bio": "Learn To Create Professional 3D Games For Any Platform With Unity 3D. A Comprehensive Course That Teaches Real Skills",
      "objectives": [
        "Learn How To Use Unity 3D To Create Stunning Games That Work On Any Platform"
      ],
      "course_content": {
        "Introduction": [
          "Important - Working Files - Download These First",
          "0101 What Is Unity And Who Uses It?",
          "0102 What You Should Expect From This Video Series",
          "0103 3D Modelling And Image Editing In This Series"
        ],
        "Using The Interface": [
          "0201 Creating A New Unity Project",
          "0202 Layouts, Panes And Tabs",
          "0203 Scene",
          "0204 Hierarchy",
          "0205 Project",
          "0206 Inspector",
          "0207 Game",
          "0208 Other"
        ],
        "Manipulating Objects": [
          "0301 Selecting",
          "0302 Moving",
          "0303 Rotating",
          "0304 Scaling",
          "0305 Snapping",
          "0306 Parenting"
        ],
        "Importing And Exporting Assets": [
          "0401 Types Of Assets - Part 1",
          "0402 Types Of Assets - Part 2",
          "0403 Importing 3D Models",
          "0404 Importing Audio",
          "0405 Importing Textures - Part 1",
          "0406 Importing Textures - Part 2",
          "0407 Importing Scripts",
          "0408 Asset Packages"
        ],
        "Setting The Scene": [
          "0501 Adding Components To A Game Object",
          "0502 Realistic Terrain",
          "0503 The Scene Border",
          "0504 Catch All Zone - Part 1",
          "0505 Catch All Zone - Part 2",
          "0506 Catch All Zone - Part 3",
          "0507 Catch All Zone - Part 4"
        ],
        "Physics": [
          "0601 Rigid Bodies And Colliders - Part 1",
          "0602 Rigid Bodies And Colliders - Part 2",
          "0603 Physics Material",
          "0604 Cloth - Part 1",
          "0605 Cloth - Part 2",
          "0606 Rag Doll"
        ],
        "Combining Assets": [
          "0701 Texture Atlases",
          "0702 Materials",
          "0703 3D Modelling Programs",
          "0704 Prefabs"
        ],
        "Populating The Scene": [
          "0801 Adding Meshes",
          "0802 Marking Meshes As Static"
        ],
        "Behaviour Scripting": [
          "0901 Languages - Part 1",
          "0902 Languages - Part 2",
          "0903 Languages - Part 3",
          "0904 Game Objects",
          "0905 Procedural Object Instantiation - Part 1",
          "0906 Procedural Object Instantiation - Part 2",
          "0907 Pickup And Scoring - Part 1",
          "0908 Pickup And Scoring - Part 2",
          "0909 Pickup And Scoring - Part 3",
          "0910 Pickup And Scoring - Part 4"
        ],
        "Culling": [
          "1001 Camera Culling",
          "1002 Distance Culling",
          "1003 Occlusion Culling"
        ]
      },
      "requirements": [
        "Mac Or PC"
      ],
      "description": "This course teaches the core skills for Game Development in Unity 3D. Once you've completed this course you can take your skills even further with our Advanced Unity 3D Game Development course\nThis Unity 3D Game Development training course from Infinite Skills introduces you to the fundamentals of 3D game design with the Unity engine. This tutorial is designed with the absolute beginner in mind; no prior experience with Unity is required.\n\nYou will start by exploring the Unity interface, and learning how to manipulate objects in the editor. Throughout this video training course, you will be putting what you learn to immediate practice by creating an actual game - Coconut Hut. Robert teaches you how to import assets for the game, apply physics to objects in the game, and how to combine assets to create complex objects. You will implement behaviours, learn to develop Boo, JavaScript and C# scripts, add animation and manage lighting for the game. Finally you will render and build the game for distribution.\n\nOnce you have completed this video tutorial for Game Development with Unity 3D, you will have a strong grasp of the fundamentals needed to build a functional game using the Unity 3D engine. Working files are included, allowing you to follow along with the author throughout the lessons.",
      "target_audience": [
        "Anyone Who Wants To Learn How To Create Professional 3D Games",
        "Level: Beginners"
      ]
    },
    {
      "title": "Learn to Create a 3D Platformer Game with Unity & C#",
      "url": "https://www.udemy.com/course/unityplatformer3d/",
      "bio": "Game development made easy. Learn C# using Unity and create your very own 3D Platformer!",
      "objectives": [
        "Learn C#, a modern versatile programming language",
        "Understand the capabilities of 3D development in Unity",
        "Develop strong and transferrable problem solving skills",
        "Gain an understanding of the game development process",
        "Learn how object oriented programming works in practice"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Getting Set Up": [
          "Assets For Use In This Course",
          "Setting Up The Project",
          "Making The Test Area"
        ],
        "Controlling The Player": [
          "Moving The Player",
          "Using The Character Controller",
          "Moving Based On Camera Rotation",
          "Adding Gravity",
          "Jumping & Adjusting Gravity",
          "Turning With Movement",
          "Animating The Player"
        ],
        "The Camera": [
          "Moving The Camera",
          "Limiting Camera Drop",
          "Hiding The Mouse",
          "Better Shadows",
          "Jumping & Landing Effects"
        ],
        "Respawning": [
          "Simple Respawning",
          "Better Respawning with Coroutines",
          "Resetting The Player",
          "Fading In And Out",
          "Snapping The Camera",
          "Making Checkpoints",
          "Showing The Checkpoint Is Active",
          "Deactivating Other Checkpoints"
        ],
        "Player Health System": [
          "Taking Damage",
          "Tracking Player Health",
          "Adding Temporary Invincibility",
          "Flashing Invincibility"
        ],
        "UI": [
          "Laying Out Health UI",
          "Making The UI Work",
          "Level Timer"
        ],
        "Collectibles": [
          "Collecting Coins",
          "Improving Coin Collection",
          "Getting Crystals",
          "Saving Coins & Crystals",
          "Collecting Crystals Once",
          "Collecting Crystals Repeatedly As The Dev"
        ],
        "Making Enemies": [
          "Bringing In An Enemy",
          "Making The Enemy Move",
          "Moving Between Patrol Points",
          "Turning Towards Movement",
          "Making Trails",
          "Setting Up States & Waits",
          "Chasing The Player",
          "Jumping To Action",
          "Damaging The Player",
          "Damaging The Enemy"
        ],
        "Menus": [
          "Laying Out The Pause Menu",
          "Making The Pause Menu Work",
          "Paused Gameplay Bug Fix",
          "Creating The Main Menu",
          "Improving The Main Menu"
        ]
      },
      "requirements": [
        "PC or Mac capable of running Unity 3D",
        "A copy of Unity 2021 or newer"
      ],
      "description": "Learn how to create and program your very own 3D Platformer game using Unity, an industry-standard game development program used by large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to understand such game elements as:\nFull 3D Character Movement\nAnimating Characters\nState-based Enemy AI\nFully-featured Boss Battles\nComplete Health System\nInteractive Menus\nCollectables\nLevel Select Over-world\nGame Progression & Storing Your Progress\nThe course also includes a downloadable, complete version of the project to use for your own reference to ensure everything in your game works as it should!\n\n\nStart learning today and let me help you become a Unity game developer and make something awesome!",
      "target_audience": [
        "Anyone who wants to make their own 3D games.",
        "Anyone who wants to make their own platforming games.",
        "People who want to create and publish their own games.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industry.",
        "Competent and confident with using a computer."
      ]
    },
    {
      "title": "Create a 3D multi-player game using THREE.js and Socket.IO",
      "url": "https://www.udemy.com/course/create-a-3d-multi-player-game-using-threejs-and-socketio/",
      "bio": "Learn to use the WebGL library THREE js, NODE.Js and Socket IO to create a 3D multi-player game.",
      "objectives": [
        "You’ll learn how to use THREE js to show great 3D content in a modern browser, including on mobile devices.",
        "Learn to use a NODE js server.",
        "Learn how to get great 3D assets from online providers including animation assets.",
        "Learn to use Socket io to create a simple chat app.",
        "Put all your new skills together to create a 3D game that has remote players that you can interact with."
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the course",
          "JavaScript in 12 Easy Lessons - e-book",
          "The Three.JS Primer",
          "Introduction"
        ],
        "NODE.js": [
          "What is NODE.js",
          "Resources",
          "Your first NODE.js app",
          "What have you learned?"
        ],
        "Socket.IO": [
          "What is Socket.Io?",
          "Your first Socket.IO app",
          "Connecting a socket to a server",
          "Create a simple chat app",
          "Overview of the rooms version of the chat app",
          "Coding the rooms version of the chat app",
          "What have you learned?"
        ],
        "THREE.js": [
          "The THREE.js website",
          "3D basics",
          "Your first THREE.js web page",
          "Using FBXLoader",
          "What have you learned?",
          "Trying things out on CodePen"
        ],
        "3D assets": [
          "Sourcing 3D assets online",
          "Using Mixamo",
          "Editing assets with Blender"
        ],
        "Blockland": [
          "Loading assets",
          "Setting up cameras",
          "Moving your character",
          "Constraining to the environment"
        ],
        "Multi-player": [
          "Running the game from the resources",
          "The Socket.IO app",
          "A overview of socket events",
          "Handling the local player",
          "Handling the NPCs"
        ],
        "Chat": [
          "Convert text into an image",
          "Make remote players selectable",
          "Add chat feature to game"
        ],
        "Taking it live": [
          "How to map a URL to a specific port address",
          "How to ensure the node app stays running"
        ],
        "Path Finding": [
          "Creating a NavMesh",
          "Using a NavMesh"
        ]
      },
      "requirements": [
        "Only basic JavaScript is assumed"
      ],
      "description": "With Socket IO it is very easy to create a game where multiple remote players can share data. In this course we start by installing NODE.js, a prerequisite of Socket IO.  NODE.js is an open source server environment. We make sure NODE.js is working correctly and that you understand how to run it by running through a few very simple examples.\nIn section 3 we move on to building a simple chat app using Socket IO and I show you how to use the rooms capability of Socket IO to limit inter-Socket communication to groups of sockets that share a room.\nSection 4 introduces the WebGL library, THREE.js, and shows how to display assets using this library.\n.Section 5 looks at accessing online 3D resources both models and animations and shows how you can use Blender to edit these assets.\nSection 6 covers in more detail using THREE.js for games.\nSection 7 brings 3D and Socket IO together to create a framework for a game where we see remote players moving.\nSection 8 shows how we can chat to remote players by sending a private chat message, socket to socket.\nSection 9 shows how to take your game to a live server.\nThe final section gives some important tips when using NODE.js and Socket IO with the THREE.js library in an online game.\nHaving completed the course you will have all the skills necessary to create 3D multi-player games of your own. With the 30 day money back guarantee you can start the course today with complete confidence.\nHere is are some reviews of the course:\n”Nik's tutorials are brilliant”\n”The instructor really explained the whole concept of the process of setting up a complete 3D multi-user chat app using the latest and hottest technologies in a nutshell; I'd like to say he demystified it.”\n\"This course helped me a lot to finish my running project. I loved this course very much. It is probably the only course which shows the use of THREE.js to create a 3d game. It's socket io implementation is amazing. I would surely recommend to enroll in this course.\"\n... and what students on my other THREE.js courses have to say:\n”Easy to Understand and detailed”\n”This course is really awesome! I enjoyed every second of this learning experience.”\n\"Really good course, highly recommend. ... The last time I tried to learn the source code was 20,000 lines of C#. Without the helper classes, this author achieves an awesome 3D Car game in less than 400 lines. In the past I have had a lot of issues with getting FBX from Blender into a THREE.js scene but here it is easily explained and worked effortlessly. Huge thanks to Nik for this fantastic course.\"",
      "target_audience": [
        "If you are interested in creating multiplayer games then this is the course for you.",
        "If you want to learn to use Socket IO then this is the course for you."
      ]
    },
    {
      "title": "RPG Core Combat Creator: Learn Intermediate Unity C# Coding",
      "url": "https://www.udemy.com/course/unityrpg/",
      "bio": "Build Combat for Role Playing Game (RPG) in Unity. Tutorials Cover Code Architecture & Video Game Design.",
      "objectives": [
        "Create core combat mechanics for melee, ranged and special attacks.",
        "More advanced C# techniques such as interfaces, delegates, and co-routines.",
        "Create pathfinding systems and patrol paths for enemies and NPCs.",
        "Make a detailed level with terrain, enemies, triggers, lighting, particles and props.",
        "Balance the player and enemy stats (eg. health, damage, movement, attack speed, and more).",
        "Advanced game design, project management and code architecture strategies."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Install Unity 2018.3",
          "Install Visual Studio Code",
          "Not Making Intellisense?",
          "Quick Game Design Overview",
          "Architectural Overview",
          "Community & Support"
        ],
        "Basic Movement": [
          "Section Overview - Basic Movement",
          "Create A Simple Sandbox",
          "Using The New Navmesh Surface",
          "Move Using Nav Mesh Agent",
          "Refining Your Nav Mesh",
          "Introduction To Raycasting",
          "Implement Click-To-Move",
          "Quiz - Basic Movement #1",
          "Create A Fixed Follow Camera",
          "Animation Blend Trees",
          "Match Animation To Movement",
          "Basic Movement Tweaks",
          "Project Folder Structure",
          "Quiz - Basic Movement #2"
        ],
        "High Level Game Design": [
          "Section Intro - High Level Design",
          "1.5 Page Game Design Document",
          "The Player Experience",
          "First Draft Of Your GDD",
          "Quiz - High Level Design #1"
        ],
        "Basic Combat": [
          "Section Overview - Basic Combat",
          "Separating The Control Layer",
          "Namespaces To See Dependencies",
          "Raycasting For Components",
          "Implementing Action Priority",
          "Move Within Range",
          "Cancelling Combat With Movement",
          "Quiz - Basic Combat #1",
          "Decoupling Dependency Cycles",
          "Dependency Inversion With Interfaces",
          "Add Attack Animation",
          "Trigger Animation In Code",
          "Throttling Our Attacks",
          "Taking Damage",
          "Nested Prefabs And Variants",
          "Using Prefab Variants",
          "Quiz - Basic Combat #2",
          "Any State Animations",
          "Trigger Death Animation",
          "Stop Attacking Already",
          "Look Them In The Eyes",
          "Ignore Dead Enemies",
          "Bugs? What Bugs?",
          "Quiz - Basic Combat #3"
        ],
        "Enemy AI": [
          "Section Overview - Enemy AI",
          "Calculating AI Chase Distance",
          "Swappable Control Systems",
          "Disable Control When Dead",
          "Visualising With Gizmos",
          "AI Guarding Behaviour",
          "Quiz - Enemy AI #1",
          "That's Some Suspicious Behaviour",
          "Visualising Waypoints",
          "Waypoint Loops",
          "Patrolling Behaviour",
          "Dwelling At Waypoints",
          "Quiz - Enemy AI #2"
        ],
        "First Moment": [
          "Section Overview - First Moment",
          "Design A Moment",
          "Sketch Your Moment",
          "Tips To Improve Workflow",
          "Craft The Environment",
          "Hits-To-Kill Design Metric",
          "Quiz - First Moment #1",
          "Tweak Enemy Patrol",
          "Cinemachine Follow Camera",
          "Make Cinematic Sequence",
          "Trigger Cinemachine Cut Scene",
          "The Observer Pattern In C#",
          "Player Input In Cutscenes",
          "Quiz - First Moment #2"
        ],
        "Scene Management": [
          "Section Overview - Scene Management",
          "Make A Second Scene",
          "Scene Loading Portals",
          "How Coroutines Work",
          "Wait For Scene To Load",
          "Player Spawn Point",
          "Cross Scene References",
          "Canvas Groups For Fading",
          "Quiz - Scene Management #1",
          "Nested Coroutines For Fading",
          "Avoiding The Singleton Pattern",
          "Quiz - Scene Management #2"
        ],
        "Saving Asset Pack": [
          "Section Overview: Saving Asset Pack",
          "WARNING - BinaryFormatter Security Vulnerability",
          "The Saving System Overview",
          "Triggering Saving And Loading",
          "Saveable Components And GameObjects",
          "Challenge: Saveable Health",
          "Checkpoints Between Scenes",
          "Loading The Saved Scene",
          "Quiz - Saving Asset Pack"
        ],
        "Saving System": [
          "Skip Or Continue",
          "Section Overview: Saving System",
          "Save System Design",
          "Overview Of Binary Serialization",
          "File Paths In C#",
          "Understanding Unicode",
          "Filestream Read And Write In C#",
          "Converting To Binary In C#",
          "Quiz - Saving System #1",
          "BinaryFormatter For Serialization",
          "Saveable Entities",
          "Generating UUIDs In C#",
          "Editing SerializedFields",
          "Serializing With SaveableEntities",
          "Saving Multiple Scenes - Part 1",
          "Saving Multiple Scenes - Part 2",
          "Checkpoints Between Scenes",
          "ISaveable Components",
          "Quiz - Saving System #2",
          "Deduplicating UUIDs",
          "Restoring Health",
          "Reloading The Last Scene",
          "Fading Before Scene Load",
          "Quiz - Saving System #3"
        ],
        "Simple Weapons": [
          "Section Overview: Simple Weapons",
          "Equip A Weapon",
          "Animator Override Controller",
          "Creating Scriptable Objects",
          "Unarmed As A Weapon",
          "Basic Weapon Pickup",
          "Quiz - Simple Weapons #1",
          "Left Handed Weapons",
          "Make A Weapon Projectile",
          "Shoot Projectiles",
          "Damage From Projectiles",
          "Trails & Prefab Variants",
          "Quiz - Simple Weapons #2",
          "Destroy Old Weapon",
          "Improve Projectile Behaviour",
          "Fireball Weapon & Pickup",
          "Fireball Particle System",
          "Projectile Impact Effect",
          "Quiz - Simple Weapons #3",
          "Destroy The Unwanted",
          "Resetting The Default Animator",
          "Dynamic Resource Loading",
          "Saving Weapon Choice",
          "Pickup Respawning",
          "Quiz - Simple Weapons #4"
        ]
      },
      "requirements": [
        "You should be able to write basic C# (loops, conditionals, components, etc)",
        "Some familiarity with Unity's APIs is helpful.",
        "You should know your way round Unity 5's editor."
      ],
      "description": "Role Playing Games can be complex to create, with many interacting gameplay systems. We make it easy for you! Learn, step-by-step, how to make the foundations of any good RPG combat system - from scratch.\nIn this course we're focusing on the core of any great RPG, giving your players a fun combat moment in a well crafted level, based upon a solid game design, built using a robust code architecture. You will follow our project, but also make the game entirely your own.\nThis highly acclaimed course was over 200% funded on Kickstarter, and is designed for intermediate users of Unity. We recommend you take at least the first half of our Complete Unity Developer 2D or 3D, or equivalent, as a pre-requisite.\nThe course can be a standalone course, or can be taken as the first part in our RPG series. The three other separate courses in this series teach the Inventory system, Shops and Abilities, and Dialogue and Quests.\nThis is a highly realistic and comprehensive introduction to real game development. We'll be taking you through our process step-by-step, with all decisions justified and all avenues explored.\nFancy something a little different to get started? Check out GameDev's other courses, just look for the green logo as your guide.\nWe will be dealing with player movement, NavMesh navigation, AI pathfinding, save and loading systems, basic pick ups, using asset packs, debug code, making particle effects and more. We'll also give you a robust code architecture for managing more complex projects by setting up namespaces.\nYou'll need a basic grasp of Unity and C# before you get start, from there we'll be teaching you more advanced programming techniques such as C# delegates, interfaces, co-routines and more.\nBuilding an RPG is an amazing way to level-up your game development skills, so why not join us and get started improving your game development right now?\nGet plugged into our communities of amazing developers on Facebook (nearly 20k), in our own TA-curated Community (17k views/day), and our student chat group (10k live at any one time).",
      "target_audience": [
        "This course is for intermediate Unity users who want to create their own RPG.",
        "Our Complete Unity Developer course provides the perfect pre-requisite."
      ]
    },
    {
      "title": "Create Space Invaders with Python PyGame",
      "url": "https://www.udemy.com/course/create-space-invaders-with-python-pygame/",
      "bio": "A beginners course",
      "objectives": [
        "How to use PyGame",
        "How to make a basic game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Intro",
          "Basics",
          "Display text",
          "Keyboard input",
          "Draw enemies",
          "Game logic",
          "Refactoring"
        ]
      },
      "requirements": [
        "Basic Python knowledge (no OOP required)"
      ],
      "description": "In this course you learn how to make the game space invaders with Python. You can use this knowledge to make other video games. It is a beginners course, you don't need any knowledge of object orientated programming. You will learn the basics of pygame and be able to make different games.\npygame is a set of Python modules designed for writing games. Pygame supports all common computer operating systems, including Windows, Mac OS X and Linux. With this module you can make all kinds of 2d games, you can display images, play sounds and lots more.\nPygame is designed to create real-time computer games, but without the low-level mechanics of the C programming language and its derivatives. It is one of the module popular modules for creating video games with Python. The pygame module is oriented towards real-time games, not static widget games.\nIf you are new to Python and want to make games, this course is for you. You will create your own version of space invaders and be able to make different types of games, even if you are not an advanced Python programmer. The course goes step by step over the steps required to make the game. Only basic Python programming knowledge is required for this course.",
      "target_audience": [
        "Beginner Python programmers that want to make a game"
      ]
    },
    {
      "title": "Unreal Engine 4 - Build Your First Game with UE4!!",
      "url": "https://www.udemy.com/course/unreal-engine-4-ue4-complete-beginners-course/",
      "bio": "Become a Game Developer! From empty project to full game. Create your own effects, gameplay mechanics, menus, and more.",
      "objectives": [
        "Unreal Engine 4",
        "Unreal Engine",
        "Basics of UE4",
        "Simple Game Theory",
        "Installing the Unreal Engine",
        "Managing projects",
        "Blueprint code",
        "How to create all the basic components of a small game from start to finish."
      ],
      "course_content": {
        "Introduction": [
          "Making the Most of the Course",
          "Making the Most of the Course - Part 2 - Questions",
          "Complete Project - Download",
          "Assets - Download",
          "Section Slides - Download",
          "Join Discord!"
        ],
        "Intro to the Engine": [
          "Module Introduction",
          "Installing the Epic Launcher",
          "Exploring the Epic Launcher",
          "Installing the Unreal Engine",
          "Project Creation",
          "Quiz",
          "BONUS - Minimal UI",
          "BONUS - GUI Compression"
        ],
        "Navigating Unreal": [
          "Module Introduction",
          "The Unreal Interface",
          "Project Folders (Importing Assets)",
          "Default Pawn Movement",
          "Quiz",
          "BONUS - Default Window Open Location"
        ],
        "Intro to Blueprints": [
          "Module Introduction",
          "Class Types",
          "Components",
          "Quiz",
          "Function Execution Order",
          "Simple Movement",
          "Framerate Independent Movement",
          "Alternative Movement Logic",
          "Quiz"
        ],
        "Player": [
          "Module Introduction",
          "Player Setup",
          "Player Input Bindings",
          "Player Collision",
          "Quiz",
          "Player Movement Part 1",
          "Player Rotation",
          "Player Movement Part 2",
          "Player Class Tidy",
          "Quiz"
        ],
        "Source Control": [
          "Module Introduction",
          "Git Accounts and Software",
          "Repository Setup",
          "Git LFS (Large File Storage)",
          "Git Collaboration"
        ],
        "Intro to GameMode": [
          "Module Introduction",
          "Creating Game Modes",
          "Quiz"
        ],
        "Interactive Classes": [
          "Module Introduction",
          "Inheritance",
          "Interactive Base",
          "Interactive Pickup",
          "Quiz",
          "Interactive Magnetic Pickup",
          "Interactive Level Goal",
          "Interactive Level Goal"
        ],
        "Splines": [
          "Module Introduction",
          "Spline Creation",
          "Level Spawner Implementation",
          "Using Splines",
          "Improving Level Spawner",
          "Coin Pickup Spawner",
          "Coordinate Space",
          "Quiz"
        ],
        "Widgets": [
          "Module Introduction",
          "Widget Designer",
          "Widget Graph",
          "Widget Buttons",
          "Quiz",
          "Button Interactions",
          "Displaying Widgets",
          "Player Controllers",
          "Quiz"
        ]
      },
      "requirements": [
        "Basic understanding of navigating your chosen system"
      ],
      "description": "Unreal Engine 4 is one of the most powerful and accessible game engines currently available and with the release of Unreal Engine 5 just around the corner, there's no better time to start your Epic journey.\nLearn to not only use UE4 but gain transferable skills that will assist you in any game development endeavour.\nBuild a complete game from an empty project up to packaging and sharing your work while getting an understanding of:\nThe Unreal Interface and ecosystem\nPlayer Input and character movement\nWorking with Splines\nLevel creation\nCreating custom level design tools\nUI and Widgets\nTextures\nMaterials\nEffects\nUsing a familiar \"Roll a Ball\" style game as the template for the course you'll get the opportunity to learn a huge amount about the Unreal Engine and understand how to transfer that knowledge into your projects.\nNot only that, but as we go through the course we will take the time to not only get things functional and leave it there as in many beginner examples. We'll take deeper dives into refining player movement to be more enjoyable for the user. Looking at efficient ways to make reusable tools. Adding particle and sound effects to add impact to our game, all while keeping a focus on good programming practices.",
      "target_audience": [
        "Anyone who wants to learn UE4",
        "Anyone who'd like to start preparing to start with UE5",
        "People new to game development",
        "People interested not just, how, to get a game working but some of the theory behind what makes certain aspects of a game enjoyable"
      ]
    },
    {
      "title": "QA: Become a Game Tester 2025",
      "url": "https://www.udemy.com/course/qa-become-a-game-tester/",
      "bio": "Learn the art of game testing. Start the incredible journey in game development world!",
      "objectives": [
        "Knowledge about Test Cases, Bug Reports and Checklists",
        "Types of game bugs",
        "All knowledge to find first job",
        "Understanding Jira (Bug creation, Kanban board, Dashboards)",
        "Strong exposure on designing test cases and checklists",
        "Complete knowledge of testing theory for Junior Level"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Game testing generic": [
          "Game testing. Milestones.",
          "Game testing. Types of bugs",
          "Game Testing. Severity",
          "Game testing. Platforms.",
          "Check on Game Testing Generic"
        ],
        "Game testing tools.": [
          "Engines. Unity",
          "Engines. Unreal Engine",
          "Bug Tracking",
          "Versions Control",
          "Jira Practice. Introduction",
          "Jira Practice. Filters",
          "Jira Practice. Dashboards",
          "Check for Testing tools"
        ],
        "Testing theory": [
          "Test methods and test design",
          "Test Levels",
          "Testing types",
          "Small Theoretical Quiz"
        ],
        "Testing Documentation": [
          "Test case",
          "Checklist",
          "Bug Report"
        ],
        "Documentation. Practical part.": [
          "Test case. Formatting",
          "Test case. Positive",
          "Test case. Negative",
          "Test case. Destructive",
          "Checklist. Formatting",
          "Checklist. Creation of basic checklist",
          "Checklist. Execution",
          "Bug report. Creation",
          "Bug report. Second example",
          "Bug Report. Crash report",
          "Next Steps"
        ],
        "The End + Bonus (ISTQB)": [
          "Bonus: ISTQB Certification for Game Testers",
          "The end"
        ]
      },
      "requirements": [
        "No experience needed. This course is for everyone, who wants to test games"
      ],
      "description": "QA: Become a Game Tester - Master the Art of Quality Assurance in Gaming\nThis course is designed and prepared by Ruslan Murha (Worked in Ubisoft as QA Manager) and Artur Kudria (worked in Ubisoft as QA Lead)\n\nEmbark on an exciting journey into the world of game testing with our comprehensive online course, \"QA: Become a Game Tester.\" Whether you're a gaming enthusiast looking to turn your passion into a profession or a newcomer eager to break into the gaming industry, this course is your gateway to mastering the art of Quality Assurance in gaming.\nCourse Highlights:\nUnderstanding the Specifics of the Job:\nDive deep into the intricacies of game testing and gain a profound understanding of the role and responsibilities of a game tester.\nExplore the dynamic landscape of the gaming industry and how quality assurance contributes to the success of game development projects.\nPassion in Practice:\nCultivate a genuine passion for game testing as you uncover the excitement of playing a crucial role in shaping the gaming experience for players worldwide.\nLearn how to turn your enthusiasm for gaming into a strategic advantage in your career, making your journey as a game tester more fulfilling and rewarding.\nTesting Theory Essentials:\nGrasp the fundamental principles of testing theory, including different testing methodologies and strategies.\nAcquire the skills to identify, isolate, and report defects, ensuring the delivery of high-quality games that captivate audiences.\nMastering Testing Tools:\nExplore a variety of testing tools utilized in the gaming industry.\nHands-on experience with industry-standard tools will empower you to efficiently and effectively assess game functionality, performance, and user experience.\nDocumentation Mastery:\nLearn the art of creating comprehensive test plans, test cases, and bug reports that communicate effectively with development teams.\nUnderstand the importance of clear and concise documentation in streamlining the testing process and enhancing collaboration among team members.\nPutting Knowledge into Practice:\nYou can see the examples of creation of basic documentation in practice, its formatting, and execution.\nHelp with ISTQB Certification\nGuide on how to register and pass it (including discount)\nBy the end of this course, you'll not only possess a solid foundation in game testing theory and practice but also carry the confidence and skills necessary to embark on a successful career as a game tester.\nJoin us on this immersive learning adventure and transform your passion for gaming into a fulfilling profession!",
      "target_audience": [
        "People who want to start Game Tester career",
        "People with passion about game development",
        "Gamers, who wants to monetize their passion"
      ]
    },
    {
      "title": "Design Patterns for Game Programming - Unity 6 Compatible",
      "url": "https://www.udemy.com/course/design-patterns-for-game-programming/",
      "bio": "An exploration of robust modularised code building for games and C#.",
      "objectives": [
        "How to create robust, reusable modularised code for use in games programming.",
        "How to implement repeatable solutions to address common game programming problems."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Join the H3D Student Community",
          "Contacting H3D",
          "Frequently Asked Questions",
          "Updating to Unity 6"
        ],
        "The Command Pattern": [
          "Commands Part 1",
          "Commands Part 2",
          "Commands Part 3",
          "Commands Part 4"
        ],
        "The Flyweight Pattern": [
          "Investigating Memory",
          "Scriptable Objects Part 1",
          "Scriptable Objects Part 2",
          "Unity's ECS Part 1",
          "Unity's ECS Part 2",
          "Unity's ECS Part 3",
          "A little ECS Optimisation Extra"
        ],
        "The Observer Pattern": [
          "Observers Part 1",
          "Observers Part 2",
          "Observers Part 3",
          "Observers Part 4",
          "Observers Part 5"
        ],
        "The Prototype Pattern": [
          "The Prototype Pattern",
          "Cloning a Game Object",
          "Dynamic Prefab Creation"
        ],
        "The Singleton Pattern": [
          "The Singleton",
          "Using a Singleton"
        ],
        "The State Pattern": [
          "The State Pattern",
          "Creating and Using a State Class",
          "Patrolling the Perimeter",
          "Chasing the Player Part 1",
          "Chasing the Player Part 2",
          "State Challenge"
        ],
        "The Object Pool": [
          "Setting Up the Project",
          "Adding in an Object Pool",
          "Extending the Object Pool",
          "Blowing Up the Ship"
        ],
        "And...": [
          "More Patterns",
          "Final Words",
          "Where to now??"
        ]
      },
      "requirements": [
        "Be able to program in C#.",
        "Have used the Unity Game Engine at a Basic Level."
      ],
      "description": "Want to create code that is robust, optimized and reusable? Then you need to learn about programmming design patterns.\nGame Programming Design Patterns are templates for building modularised code that are generally a repeatable solution to a commonly occurring mechanic applied in computer games. They are general solutions that aren’t tied to a particular problem, making them reusable. One such pattern is object pooling. Whether a game needs an onslaught of constantly spawning zombies or bullets fired from a gun or asteroids to pummel the player’s spaceship, an object pool is a group of classes that can be reused, exactly as they are, across not only these scenarios but a plethora of others whenever game objects need a spawn manager.\nIn this course, Penny will take you through the top 12 game programming design patterns with C# and the Unity Game Engine using her internationally acclaimed Holistic teaching style and expertise from over 25 years teaching, researching and writing about games. Throughout the course you will follow along with hands-on workshops designed to teach you these core programming concepts that will take your games to the next level.\nLearn how to program and work with patterns such as:\ncommands\nflyweight\nobserver\nprototype\nsingleton\nstates\nobject pools\ngame loops\nupdates\ncomponents\n...and more.\n\n\nContents and Overview\nThe course begins with a brief introduction and then you are straight into hands-on exercises, working through each of the design patterns as listed above. There are a variety of scenarios you will work on in both 2D and 3D from an asteroid shooter, to a radar object finding system to a programmable prototype prefab system. All starter files and Unity assets (including models and scenes) are provided for you.\nIf you want to become a knowledgeable and skilled game developer, then this course is for you.\nWhat students are saying about Penny's courses:\nExcellent course!! I am already in game development industry and there is one quote here from the course that says it all \"Whenever you are not able to solve complex problem, its the right time to get back to the BASICS\".\nShe is the best teacher ever in this platform\nI do like Penny de Byl's courses and way of teaching, they are much more specific than your average \"master Unity\" kind of courses and usually you don't learn just the engine, but also how things work behind the scenes (albeit briefly, at least it gives you an idea if you want to investigate more on your own). She's really amazing!",
      "target_audience": [
        "Game programmers who want to better their understanding of programming constructs to improve their code.",
        "Beginners learning game coding who want to get off on the right foot."
      ]
    },
    {
      "title": "Unreal Engine 5 - Traversal Parkour System using Blueprints",
      "url": "https://www.udemy.com/course/unreal-engine-53-building-a-traversal-parkour-system/",
      "bio": "Beginner Friendly Course to build a Traversal Parkour system for Third Person and Lyra (Blueprints / Motion Warping/ IK)",
      "objectives": [
        "Learn how to effectively use the different Tracing Techniques in Unreal Engine (Sphere, Line, Capsule, Box) to understand the Environment and make decisions.",
        "Understand the Vector Maths behind Complex Traversal Systems like Parkour in the most simplest way possible in a Beginner Friendly way.",
        "Get a good Foundation in Unreal Engine Basics used in this Course before Starting the Actual Traversal Parkour Component with a Workshop of Simpler examples",
        "Using the Free Animations from Mixamo, Adding the Root Bone and Retarget them for Unreal Engine 5. Several Usecases to demonstrate the process.",
        "Learn Inverse Kinematics (IK) techniques to dynamically modify the animations during the gameplay to interact with the Environment.",
        "How to use Motion Warping to use the Root Motion in the Animations to dynamically move the character during the Animation.",
        "Animation Montages and Anim Notifies.",
        "Using Gameplay Tags to Manage States, Types and Actions.",
        "Using DataAssets to effectively simplify Configuration.",
        "How to design Helper Functions to organize the Project.",
        "Learn how to integrate the Traversal Component in Lyra Sample Game."
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Course Project",
          "How to get Help ?"
        ],
        "Unreal Engine Basics Workshop": [
          "Third Person Template",
          "Create a Cube Reference Actor",
          "Initialize Cube Reference Actor",
          "Vector Movement",
          "Vector Movement Helper Functions",
          "Vector Movement Helper Functions (Continued)",
          "Vector Movement Helper Functions (Continued)",
          "Actor Rotation",
          "Draw Debug Helper Function",
          "Vector Movement (Continued)",
          "SphereTraceByChannel",
          "LineTraceByChannel",
          "CapsuleTraceByChannel",
          "BoxTraceByChannel",
          "Reversing the Normal for Wall Rotation",
          "Feedback Time"
        ],
        "Animations": [
          "Download Animations from Mixamo",
          "Blender Version to Add Root Bone to the Animations",
          "Adding the Root Bone to the Animations",
          "NEW:Directions for Unreal Engine 5.4",
          "NEW:AutoRetargeting Mixamo Animations (Unreal Engine 5.4)",
          "NEW:Animation Rootmotion Settings (Unreal Engine 5.4)",
          "Mixamo IKRig Creation (Unreal Engine 5.3)",
          "Mixamo to Unreal Engine 5 Retargeting (Unreal Engine 5.3)",
          "Animation Rootmotion Settings (Unreal Engine 5.3)",
          "Baking Details to Animations using Sequencer (Unreal Engine 5.3)",
          "Adding Baking Details to all the Animations (Unreal Engine 5.3)"
        ],
        "Unreal Engine Basics Workshop (Continued)": [
          "Motion Warping",
          "InverseKinematics"
        ],
        "Traversal System Component Development": [
          "Important Note",
          "Third Person Project Creation",
          "Gameplay Tags",
          "Animation Blueprint Setup",
          "Component Initialization",
          "Set Traversal State",
          "Climb Style and Climb Direction",
          "Helper Functions",
          "Detect Wall Theory",
          "Detect Wall Function",
          "Grid Scan Theory",
          "Grid Scan - Line Hit Traces",
          "Grid Scan - Wall Hit Traces",
          "Grid Scan - Wall Hit Result",
          "Grid Scan - Wall Top Result",
          "Grid Scan - Wall Depth Result",
          "Grid Scan - Wall Vault Result",
          "Measure Wall",
          "Decide Traversal Type",
          "Validate Character In Land",
          "Migrating Animations to Traversal System Project",
          "Animation Montage Jump to Climb",
          "Animation Montage and Data Assets",
          "Unreal Engine 5.4 - Offset Corrections - Jump To Climb",
          "Set Traversal Action",
          "Climb Action and Climb Style",
          "Control Rig Changes",
          "Climb State Machine",
          "Add Movement Input",
          "Climb Movement",
          "Climb Movement (Continued)",
          "Climb Movement (Continued)",
          "Climb Movement (Continued)",
          "Climb Movement (Continued)",
          "Unreal Engine 5.4 - Offset Corrections - Climb Movement",
          "Climb Movement (Continued)",
          "ABP Functions (Location and Rotation)",
          "ABP Hand IK",
          "Anim Notify Hand IK",
          "Anim Notify Hand IK (Continued)",
          "Update Hand IK",
          "ABP Leg IK",
          "Anim Notify Leg IK",
          "Anim Notify Leg IK(Continued)",
          "Update Leg IK",
          "Identify Joint Target Location",
          "Character Drop",
          "Animation Montage Falling Climb",
          "Traversal Action Falling Climb",
          "Unreal Engine 5.4 - Offset Corrections - Falling Climb",
          "Get Controller Direction",
          "Validate Mantle Surface",
          "Animation Montage ClimbUp",
          "Traversal Action ClimbUp",
          "Camera Adjustments",
          "Horizontal and Vertical Hop Distance",
          "Select Hop Action",
          "Adjust Scan Location",
          "Find Hop Location",
          "Animation Montage Hop - Braced HopDown & HopUp",
          "Animation Montage Hop - Braced HopLeft & HopRight",
          "Animation Montage Hop - FreeHang Hop",
          "Traversal Action Hop",
          "Unreal Engine 5.4 - Offset Corrections - Braced_Hop",
          "Animation Montage Mantle",
          "Traversal Action Mantle",
          "Animation Montage Vault",
          "Traversal Action Vault",
          "Fix - Climb Surface Validation",
          "Fix - Anim Notify Changes for HandIK during Freehang Hop",
          "(Alternative Solution) Copy Animation Data to IKBones"
        ],
        "Lyra Integration ( Experimental)": [
          "Lyra Project Creation",
          "Drop Weapon Ability",
          "Validate Animations - Add Gameplay Tags",
          "Setup Animation Blueprint",
          "Anim Graph Changes",
          "Character Class Changes",
          "Traversal State Changes",
          "Camera Changes",
          "Tag Relationship Mapping - Restrict Gameplay Abilities",
          "Unload Weapon during Climb"
        ]
      },
      "requirements": [
        "Basic Knowledge in Unreal Engine and Blueprints",
        "Unreal Engine 5.3 pre installed",
        "Good Gaming PC capable of running Unreal Engine 5.2. Please check the Minimum PC Specifications for Unreal Engine",
        "Readiness to explore further, do Hands-on and Research on the topic"
      ],
      "description": "Note : The Course is updated to support Unreal Engine 5.4 - Auto Retargeting Animations.\nIn this Course, you will learn the concepts to build a Traversal Parkour System which includes Climb, Hop, Mantle and Vault.\nIt's a Complete Blueprint Workshop with a lot of Interesting concepts in Blueprints considering the Traversal Parkour System as a use case.\nThis Course is a Simplified version of the Traversal System which can be easily understood even for the Beginners with knowledge in Blueprints. If you are completely new to Blueprints, you many need to take a Blueprint course along with.\nThe Unreal engine concepts covered in this course is not only applied for Traversal System. It can be used in a lot of scenarios in Game development. This course will be regularly updated with more use cases in the future.\nWe will use only Free animations from Mixamo through out this course. Motion Warping and Inverse Kinematics or IK will be used to build the Parkour abilities. This course is designed for Unreal Engine Developers at any level. Blueprints are used through-out this course. We start with a beginner's section covering the Unreal Engine Concepts used in this course followed by the Implementation of Traversal Parkour System.\nThe Goal of this Course is to Cover the fundamentals of building a Traversal Parkour System using Unreal Engine.\nPlease understand this is not a Product which can be readily used in games. But, consider this as a Workshop to learn Unreal Engine with a Practical Example of Building a Traversal Parkour System. Once, you understand the concepts covered and build your foundations strong, You will be in a position to develop solid products and frameworks covering all the needs of your Next Generation Games.\nThe base concepts behind most of the Traversal Actions remains the same. So Learning the basics will help you get ready to further explore and build advanced systems.\nThere is an Additional Section for Developers interested to try the Traversal System in Lyra.",
      "target_audience": [
        "Beginner or Intermediate Unreal Engine Game Developers interested in exploring new areas",
        "Unreal Engine Game Developers looking to apply the Blueprint features to build innovative Systems.",
        "Absolute Beginners in Unreal Engine ready to Research and do Hands-on to learn new approaches to speed up their Knowledge gathering process.",
        "Unreal Engine Developers who wants to build their own Components and Products for Video game Development"
      ]
    },
    {
      "title": "3D Game Development with Blender",
      "url": "https://www.udemy.com/course/3d-game-development-with-blender/",
      "bio": "Build anything you can imagine, and make fun 3D games!",
      "objectives": [
        "Build 3D models suitable for any game engine",
        "Manipulate a 3D environment",
        "Create custom mesh objects - vehicles, humanoids, animals",
        "Use UV mapping for realistic color effects",
        "Build basic procedural textures and bake them to UVs",
        "Create terrain, sky maps, and ground textures",
        "Create timeline-based animations (moving platforms, doors)",
        "Use shape keys to modify a mesh (moving eyes and mouth, for example)",
        "Create a basic skeleton rig and animate a character with it",
        "Combine various animations into actions",
        "Master the blender game engine logic bricks",
        "Get user input from mouse, keyboard, and joystick",
        "Manage collisions through bounding boxes, raycasting, and convex hull",
        "Use dynamic physics for realistic motion and collisions",
        "Dynamically create and destroy objects",
        "Track properties for scorekeeping, inventory, time",
        "Create scene overlays for dynamic HUD elements",
        "Display dynamic text on the HUD",
        "Write Python code for better control",
        "Use Python to manage joysticks and mouse with more finesse",
        "Generate a realistic car rig with suspension, acceleration, brakes, and emergency brakes",
        "Create a basic FPS with mouselook, jumping, and (of course) weaponry."
      ],
      "course_content": {},
      "requirements": [
        "Please download and install a recent version of Blender (2.76 or greater.) You can use any desktop operating system. Blender is completely free software.",
        "You may also want an image editor like Gimp (free) or Photoshop (definitely not free.)"
      ],
      "description": "You want to make a game, huh?\nMany have gone before, and not all have succeeded.\nTruth is, building games is hard, especially 3D games.  But if you have the right tools and the right tour guide, the process can be relatively easy.  Building games might just be more fun than playing them!\n3D gaming courses tend to come in two flavors.  Either you learn to build all your models in a 3D editor like Blender or 3DSMax but you barely get to put them in a game, or you start with a high-end powerful gaming tool like Unity or Unreal, but you can only use models made by others.\nIn this course, we start from the very beginning.  You'll learn how to build your own model of anything you can imagine using Blender, a powerful free tool.  There are many Blender classes out there, but most do not concentrate on building models for games, which are different than the models used in movies.  Blender is well-known as perhaps the best open-source 3D modeling package in existence.\nBlender's best-kept secret is its game engine.  Not only can you build models in Blender, you can build full-fledged games.  The game system is incredibly powerful, yet not well known.\nThat's where this course comes in. I'll show you how to create compelling models, how to use Blender's logic bricks to write basic games with no programming, and we'll finally transition to writing your own code with the powerful and popular Python language built into Blender.\nI've had a blast creating this course.  I can't wait to share it with you.  The best part of making a game is storing your own playfulness inside a game.  I see this course in exactly the same way.  Let's play together and build some awesome games.",
      "target_audience": [
        "This is a great course for people wanting to make a 3D game.",
        "No art, 3D, or programming experience is necessary.",
        "If you've had high school algebra, you'll see it in use here. If not, I'll show you as we go. No boring math problems. We're blowing stuff up here.",
        "The course is fine for motivated kids. I'm a Dad, so be ready for a few bad Dad jokes and a lot of family-friendly fun.",
        "It's also good for adults, because after dealing with reality all day, who doesn't want to catapult cows over castle walls or whatever, right?"
      ]
    },
    {
      "title": "Unity Multiplayer UNET Build Online Shooter . Code included",
      "url": "https://www.udemy.com/course/unity-multiplayer-make-a-shooter-game-code-included/",
      "bio": "All in one guide to take any Unity games into multiplayer. This is the easiest way to understand and use multiplayer",
      "objectives": [
        "Turn any Unity games into multiplayer games",
        "know how to synchronize players",
        "create a network",
        "host clients",
        "create server clients",
        "launch magic firebolts with different colors",
        "free for all matches"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Prepare the single game int multiplayer ready": [
          "Download single player project and test it",
          "Getting the scripts ready for multiplayer",
          "Temporarly disabling enemies and vehicles",
          "Adding firebolt prefabs",
          "Firing red or blue firebolts"
        ],
        "Multiplayer setup": [
          "Create new player costume materials",
          "Swapping player costumes for multiplayer use",
          "Adding the multiplayer network manager and HUD",
          "Creating multiplayer spawn points",
          "Launching 2 games simultaneously on your computer"
        ],
        "Multiple players logic": [
          "Controlling only one player character in multiplayer",
          "Synchronizing firebolts from server to clients",
          "Synchronizing player position and animations",
          "Creating player unique names (part 1 of 2)",
          "Creating player unique names (part 2 of 2)",
          "Programming player taking damage on all clients",
          "displaying health points as text",
          "Create a health bar",
          "Synchronizing healthbar across clients and testing",
          "Prevent shooting firebolts when dead",
          "Programming the multiplayer respawn",
          "How to easily test multiplayer by running multiple builds",
          "Synchronizing respawn on server and clients",
          "Testing the player life cycle",
          "Respawn player visual countdown timer",
          "Keeping score of player kills count"
        ],
        "Enemies Setup": [
          "Multiplayer enemy spawn point setup",
          "Programming the enemy respawn script",
          "Tweaking the enemy respawning logic",
          "Adding multiple enemy spawn points",
          "Synchronizing vehicles in multiplayer games",
          "Camera follow local player and lighting effects",
          "Synchronize vehicle collision with server and clients"
        ],
        "Online Cloud Server Setup": [
          "Overview of hosting a Unity game online",
          "Create an online git repository",
          "Unity online git repository setup",
          "Unity Editor git settings",
          "Unity Cloud multiplayer setup matchmaking",
          "Launching a build in Unity Cloud",
          "Create a custom multiplayer menu and script",
          "Connecting the custom network manager to the play level"
        ],
        "Bonus": [
          "Bonus - files"
        ]
      },
      "requirements": [
        "basic programming knowledge is recommended but not needed"
      ],
      "description": "Do you want to create online worlds like MineCraft or Clash of Clans? Do you feel like you cannot do it because multiplayer is hard to program?\nWell, you were right until today. I have looked through dozens of ways to make a multiplayer game, and i came up with the easiest way to make it happen.\nThis course contains all you need to easily turn any Unity games into online multiplayer platforms. This course will drive you step by step on taking a shooter robots game and turn it into an online multiplayer Free For All game.\nThe process is fun and it feels great to accomplish such a difficult task.\nJoin the community now\nMULTIPLAYER MADE EASY\nUnity Multiplayer is the easiest way to create real time, networked games for Unity. It’s fast to implement and highly customizable. Unity-provided servers ensure that your players can find and play with each other.\n\n\nEASY TO IMPLEMENT\nUnity Multiplayer uses the component workflow you already know so you can implement and prototype networked features quickly.\n\n\nFLEXIBLE\nLow level APIs grant you access to the core of the Unity Multiplayer’s framework, so you can optimize your game for a networked environment, however you want to.\n\n\nBACKED BY UNITY\nUnity Matchmaker Servers makes it easy to connect your players. Unity Relay Servers brokers network traffic to ensure quality sessions between your players no matter where they are.\n\n\nGET STARTED NOW\nUnity Multiplayer is available to all Unity customers for development purposes at no additional charge. It is totally free to create professional multiplayer games\n\n\nHANDS ON PROJECT\nThis course drives you step by step on how to turn a 3D shooter game into a multiplayer game where 2 to 16 players can play simultaneously controlling robots shooting fireballs at eachother, in a fun environment like MineCraft style.\n\n\nMEGA BONUS\nBy joining this course, you automatically get for FREE all the project files, the source codes, the graphic files, 3d animations, models, and you also get the published iPhone app and Android it. Life is good!",
      "target_audience": [
        "game lovers",
        "hobbyist",
        "entrepreneurs, side entrepreuneurs",
        "computer students",
        "cool kids",
        "graphic designers"
      ]
    },
    {
      "title": "The Complete Modern OpenGL and GLSL Shaders Course for 2021",
      "url": "https://www.udemy.com/course/introduction-to-modern-opengl-a-tale-of-two-shaders/",
      "bio": "Learn Modern OpenGL from a University Instructor",
      "objectives": [
        "Learn all about shaders and how the graphics pipeline works to render images on screen in OpenGL",
        "Students will learn different transformations, projections and views.",
        "Understand how VAO and GLM works",
        "Master projections in 2D and 3D environments in OpenGL",
        "Learn about ambient, diffuse and specular lighting and how they work in theory. Build and code your own 'Light' class to set up lighting.",
        "Understand, code and use your own textures in OpenGL"
      ],
      "course_content": {
        "Course Introduction": [
          "Welcome to Modern OpenGL",
          "Setting up the environment",
          "A brief introduction to OpenGL"
        ],
        "Getting started with Modern OpenGL": [
          "The first little graphics app",
          "Start your graphics engines!",
          "Some input is required",
          "OpenGL...extended",
          "The magic of shaders",
          "Creating the pipeline",
          "Quiz 1"
        ],
        "Vertex, Objects & Buffers": [
          "Send me some data",
          "The vertex buffer objects",
          "Quadrilateral thinking",
          "Where are we?",
          "Quiz 2"
        ],
        "Matrices & Textures": [
          "The model matrix",
          "The view matrix",
          "The projection matrix"
        ],
        "Texture": [
          "Give it some texture",
          "Give it more texture",
          "Light it up",
          "Quiz 3"
        ],
        "Ending and future work": [
          "Epilogue"
        ]
      },
      "requirements": [
        "Knowledge of C++"
      ],
      "description": "Welcome to The Complete Modern OpenGL and GLSL Shaders Course.\nI am a University instructor that has been teaching OpenGL, game design and C++ for over 5 years.  I noticed a lack of quality OpenGL courses that teach the theory and the practical aspects of OpenGL and decided to share my knowledge with the world!\nLet me guide you through the fascinating world of OpenGL by teaching you the THEORY and the PRACTICAL aspects of OpenGL.  With this course, you walk away with a SOLID foundation of OpenGL, as we will go beyond simply copy-pasting codes without explanation.\nIf you're a beginner to OpenGL, this course is perfect for you, as we cover the fundamentals of OpenGL and GLSL shaders.  By the end of this course, you should be able to code your own textures, set up lighting for your 3D scene and move objects in a 3D environment and have a sounds grasp regarding the internals of OpenGL.  Additionally, we will cover the theory behind shaders and learn how to write custom GLSL shader code, covering different components like SDL, GLM & VAO. I will also teach you how to work with extensions in OpenGL, and use GLAD to allow modern OpenGL to be used.\nProjections are an important part of OpenGL.  We cover different projections, namely 2D and 3D, to give you to ability to start moving about in a 3D environment.  Students will also learn about different transformations and views, including a tutorial on GLM and how to link the library to your project.\nSign up for the course now and start your OpenGL journey today.",
      "target_audience": [
        "Beginners curious about OpenGL and 3D game development",
        "Developers interested in basics of 3D game development and graphics",
        "C++ developers looking to add OpenGL to their skillset"
      ]
    },
    {
      "title": "Unreal Engine 4 C++ The Ultimate Game Developer Course",
      "url": "https://www.udemy.com/course/unreal-engine-the-ultimate-game-developer-course/",
      "bio": "Learn how to develop, code and package a complete video game in Unreal Engine",
      "objectives": [
        "How to program in Unreal Engine with C++.",
        "How to create a complete UE4 game from start to finish.",
        "Those with no experience in Unreal Engine will master Unreal.",
        "Combat, adventure game mechanics, platforms, game saving/loading and menu design.",
        "Those already experienced in game development will further expand their skills.",
        "Those who already develop in another engine such as Unity will master Unreal."
      ],
      "course_content": {
        "Introduction to the Course": [
          "Introduction"
        ],
        "Download UE4, and Intro to the Engine": [
          "Installing Unreal Engine and the Unreal Community",
          "The Viewport",
          "Editor Overview",
          "The Level Blueprint",
          "Creating Blueprints"
        ],
        "Intro to Unreal Engine C++": [
          "C++ Refresher and UE4 Hierarchy",
          "Class Creation in Unreal Engine",
          "Reflection and Garbage Collection",
          "Creating a UObject",
          "Using UObject in Blueprints"
        ],
        "The Actor Class": [
          "Actors and Actor Components",
          "Position Vectors",
          "The FVector",
          "FVector (continued)",
          "FVector (continued)",
          "Intro to Collision",
          "Collision (continued)",
          "Sweeping",
          "Local vs World Offset",
          "Force and Torque",
          "Random Numbers",
          "The Sine Function",
          "Deleting Classes"
        ],
        "The Pawn Class": [
          "The Pawn Class",
          "Pawn Movement Input",
          "Pawn Movement Input (continued)",
          "Pawn Movement Input (continued)",
          "Pawn Movement Component",
          "Pawn Movement Component (continued)",
          "Pawn Camera Rotation",
          "Environment Assets"
        ],
        "The Character Class": [
          "Character Assets",
          "Character Assets (continued)",
          "The Character Class",
          "The Character Class (continued)",
          "The Character Class (continued)",
          "The Character Class (continued)",
          "The Animation Blueprint",
          "The Animation Blueprint (continued)",
          "The Animation Blueprint (continued)"
        ],
        "Gameplay Mechanics": [
          "Floor Switch",
          "Floor Switch (continued)",
          "Floor Switch (continued)",
          "Spawn Volume",
          "Spawn Volume (continued)",
          "Floating Platform",
          "Pickups",
          "Pickups (continued)",
          "Pickups (continued)",
          "HUD (Heads Up Display)",
          "HUD (continued)",
          "HUD (continued)",
          "HUD (continued)",
          "HUD (continued)",
          "HUD (continued)",
          "HUD (continued)",
          "Arrays and Debug Spheres"
        ],
        "Combat": [
          "Attaching to Sockets",
          "Weapon Equipping",
          "Weapon Equipping (continued)",
          "Switching Blendspaces",
          "Anim Montages (Attack!)",
          "Anim Montages (continued)",
          "Anim Montages (continued)",
          "Enemy Combat",
          "Enemy Combat (continued)",
          "Enemy Combat (continued)",
          "Enemy Combat (continued)",
          "Console Controller Input",
          "Combat Mechanics",
          "Combat Mechanics (continued)",
          "Combat Mechanics (continued)",
          "Combat Mechanics (continued)",
          "Interpolating to the Enemy",
          "Enemy Attack Delay",
          "Damage and Death",
          "Enemy Health Bar",
          "Fine Tuning Character Death",
          "Fine Tuning Character Death (continued)",
          "Refining Pickups",
          "Refining Sprinting",
          "Extending the Enemy Class",
          "Extending the Enemy Class (continued)",
          "Refining Gameplay",
          "Refining Gameplay (continued)",
          "Weapon Trails",
          "Spawn Volume Improved"
        ],
        "Level Changing and Saving the Game": [
          "Changing Levels in Game",
          "Saving the Game",
          "Saving the Weapon",
          "Pause Menu",
          "Pause Menu (continued)",
          "Pause Menu (continued)",
          "Pause Menu (continued)",
          "Pause Menu (continued)",
          "Pause Menu (continued)",
          "Finishing Up",
          "Removing All Unused Assets",
          "Packaging the Game",
          "Congratulations!"
        ]
      },
      "requirements": [
        "Basic understanding of C++ or a similar language (C#, Python, Java, etc.)",
        "No experience in Unreal Engine needed.",
        "Memory space on computer for Unreal Engine, Visual Studio or XCode, and game assets (meshes, animations, etc.)"
      ],
      "description": "NOTE: This course is in Unreal Engine 4!\n\nIn this series, you will learn Unreal Engine C++ programming from the basics all the way up to packaging a complete video game. You will learn all of the following and more:\nObject, Actor, Pawn and Character creation, and the differences between these classes\nCoding a complete character class, complete with animations and user input\nFinding a nearly endless selection of free assets and how to download and use them for your game\nEnemy movement and behavior\nCombat with melee weapons\nPicking up and equipping items\nDamage, Hit Points and Death\nHUD elements including Health and Stamina Bars as well as Icons\nHow to create menus, including a Pause menu\nSaving and Loading game data even after turning off the computer or exiting the game\nSwitching levels in game\nFloating platforms using interpolation\nTimers for delays in game logic\nTrigger volumes, pressure switches, and doors\nBombs, explosives and hazards\nLogging and drawing spheres for debug purposes\nUsing C++ concepts applied to game development\nMuch much more!\nThis is a C++ course and some basic knowledge of the C++ (or a similar language) is needed. Knowledge of variables, functions, classes, inheritance, and object-oriented programming is needed to have the best experience.",
      "target_audience": [
        "Aspiring game developers.",
        "Those wanting to enter the games industry as a game programmer.",
        "Indie game developers who want to create their own games.",
        "Anyone who wants a COMPLETE game in their portfolio!"
      ]
    },
    {
      "title": "Unreal Engine 5 Blueprints: First Person Shooter (FPS)",
      "url": "https://www.udemy.com/course/unreal-engine-5-blueprints-fps/",
      "bio": "Learn how to make an FPS using Unreal Blueprints. The entire course uses Unreal Engine 5.",
      "objectives": [
        "Create a first person character with movement mechanics and animation",
        "Weapons and combat with effects including sounds and particle systems",
        "Create hostile enemy drones, with AI that pursues and attacks the player",
        "Make a challenging timed game with a goal to clear the area of dangerous drones",
        "Game Mode and HUD with countdown timers, health bars, announcements, game states and score",
        "Implement Health, ammo pickups and more"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Getting Started",
          "Downloading Assets",
          "Shooter Level",
          "Night Sky",
          "Duplicate Objects",
          "Organizing Assets",
          "Community & Support",
          "Editor Overview",
          "Placing Actors",
          "Object Hierarchy"
        ],
        "Character Movement": [
          "Section Intro - Character Movement",
          "Creating The Character",
          "Adding A Camera",
          "Character Movement",
          "Controller Input",
          "Jumping",
          "Animation Blueprint",
          "Animation State Machines"
        ],
        "The Weapon": [
          "Section Intro - The Weapon",
          "Attaching The Weapon",
          "Aiming",
          "Aim Animations",
          "Muzzle Flash",
          "Single Shot Burst",
          "Firing Sound",
          "Fire Animation",
          "Aim Fire Animation",
          "Blueprint Functions",
          "Weapon Line Trace"
        ],
        "The Drone": [
          "Section Intro - The Drone",
          "The Drone Pawn",
          "Exploding the Drone",
          "Overlap Events",
          "Chasing The Player",
          "Explode On Contact",
          "Orient To Movement",
          "Patrol Points",
          "Patrolling",
          "Controlling Overlaps"
        ],
        "Combat": [
          "Section Intro - Combat",
          "Crosshairs",
          "Damage",
          "Macros",
          "Character Health Bar",
          "Getting Hurt",
          "Automatic Fire",
          "Ammo",
          "Ammo Pickups",
          "Aggro When Shot",
          "Health Pickups",
          "Change Drone Lights"
        ],
        "The Game Mode": [
          "Section Intro - The Game Mode",
          "The Game Mode",
          "Drones Remaining",
          "Session States",
          "Warmup State",
          "In Progress State",
          "Time Format",
          "Player Won",
          "Player Died",
          "Finishing The Game"
        ],
        "Continuing Your Game Dev Journey": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No programming experience necessary. You'll need a PC or Mac capable of running UE5."
      ],
      "description": "Ready to create a game in the amazing world of Unreal Engine 5?\nMake an awesome first person shooter game, where players will be spawned into a level with a handful of dangerous drones and tasked with destroying them to clear the zone!\nYour game will have it all! You’ll create a first person shooter character, with movement mechanics and animation. Attach weapons and combat with effects including sounds and particle systems.\nThen you get to create hostile enemy drones with pathfinding. Finally adding Game Mode and HUD with countdown timers, health bars, announcements, game states and score. Oh and it wouldn’t be a FPS game without health and ammo pickups, so you’ll learn that too!\nYou’ll be doing all of this in Blueprints, so you won’t need experience in programming or C++. We’ll walk you through the new Unreal Engine 5 (UE5) interface. And you'll learn best practises for setting up Blueprints and creating game logic.\nAll of the assets are provided, but you’ll make the actual game yourself from scratch!\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAll students have access to the Q&A forums where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nThis course is ideal if you want to make your own video games in UE5, are a beginner with no game development experience or if you have experience in other engines such as Unity.\nSo dive into the amazing world of UE5 now!",
      "target_audience": [
        "This course is ideal if you want to make your own video games in UE5.",
        "It's perfect if you're a beginner with no game development experience",
        "Or if you have experience in other engines such as Unity."
      ]
    },
    {
      "title": "Unity Mobile Game - Create Your First Hybrid Casual Game !",
      "url": "https://www.udemy.com/course/hybrid-casual-mobile-game/",
      "bio": "Crack the Code: From Hyper Casual to Hybrid Casual, You will Learn so much in this Mobile Farming Game !",
      "objectives": [
        "Create a Hybrid Casual Game from Scratch",
        "Learn how to Create a Joystick from scratch & implement Player Control",
        "Add Animations to 3D Characters",
        "Learn how to Craft a Solid Architecture for your Code",
        "Learn how to write Clean Code",
        "Use the Shader Graph to Create Performant Interactive objects",
        "Download & Master External Libraries to Speed Up Game Development",
        "Store your Data inside of Scritable Objects",
        "And Much More !"
      ],
      "course_content": {
        "Introduction": [
          "Project Setup",
          "Where to grab Free Animations",
          "Implementing the First Animations"
        ],
        "Making a Mobile Joystick": [
          "Setup",
          "Coding Time",
          "Moving the Knob",
          "Applying some Polish"
        ],
        "The first Player Steps": [
          "Player Movement",
          "Player Animations",
          "Polishing the Player Animations"
        ],
        "Camera Work": [
          "Adding Cinemachine & Setup"
        ],
        "The First Seed!": [
          "Creating the Seed Particles",
          "Sowing Animation",
          "Using Animation Events",
          "The First Crop Tile",
          "Player Sow Ability"
        ],
        "Actions !": [
          "What is an Action ?",
          "Using Actions with Arguments",
          "Actions to avoid Spaghetti Code"
        ],
        "How to Sow ?": [
          "We Manage Seed Collisions",
          "Crop Field does detect Collisions",
          "How to Grab the Closest Crop Tile ?",
          "Adding a Fake Crop (for Debug Purposes)",
          "Grabbing our first real Crop Model",
          "The Crop Data ( Our first Scriptable Object ! )",
          "Crop Field Improvements"
        ],
        "The Tool Selector": [
          "We Setup the Tool Selection UI",
          "How can we select a Tool ?",
          "Tool Selection Improvements"
        ],
        "Watering our Crops": [
          "Water Particles Setup",
          "Player Water Ability",
          "Watering Animation",
          "Adding a Watering Can Model",
          "Crop Field is fully Watered !",
          "How to Grow Crops & Water the tiles"
        ],
        "Graphics Improvements": [
          "Making it Satisfying",
          "A Library that will change your life",
          "Our first Shader Graph !",
          "Adding a Water Shader",
          "The Outline Shader (First Method)",
          "The Outline Shader (Second Method)",
          "Shadows Improvements"
        ]
      },
      "requirements": [
        "How to make your way through the Unity Editor (but not compulsory)",
        "A Computer",
        "An internet connexion"
      ],
      "description": "Hybrid Casual is the next trend after Hyper Casual ( or hypercasual depending on how you write it ;) )\n\n\nHave you ever wondered how those addictive trendy Hybrid Casual Mobile Games were made ?\nDo you want to Learn how to bring your Hybrid Casual Game Idea to Life ?\n\n\nWell, you’re at the Right Place!\n\n\nIn this exciting course, you will learn all of the different aspects of making a complete Hybrid Casual Game.\n\n\nYou will first learn how to Setup your Unity Project to target Mobile Devices.\nYou will learn how to add a Dynamic Joystick to move your character around in a smooth way. You’ll also go one step further and make the Joystick Responsive, it will feel good on All Screen Resolutions!\nThen, I’ll show a nice way to grab Free Animations for your 3D Characters!\nYou will learn about the Little Secrets of the Animator Component and how to merge 2 animations into one ! How awesome is that ?\nBy writing your own Distance Check Algorithm & Crafting a Solid Game Architecture, you will develop the skills to have a bird’s eye view over your project. Right when creating your next project, you will be able to Design 80% of your objects interactions ! ( The rest is magic ^^ )\nIf Shader Graph is not your thing, you will now Develop that skill as you’ll learn how to make a simple & cute Water Shader, a Dynamic Crop Shader to allow Player Crop interactions, and an Outline Shader !\nHave you seen those Shiny Particles in mobile games, that smoothly move towards the UI, well, you’ll also learn how to Master that! You will control the Unity Particle System to move them around however you want !\nAlong the way, I will show you some Tips & Tricks that will Save you a bunch of Time during your game dev journey !\n\n\nThere is so much you will learn in this course, that I must avoid unveiling some of the aspects in this description.\n\n\nIf you’re ready to Master New Concepts on Hybrid Casual Mobile Games, don’t miss this opportunity.\n\n\nEnroll now",
      "target_audience": [
        "Unity Beginner that dream about making their own Mobile Game",
        "Unity Enthusiasts willing to improve their skills",
        "Unity Experts interested in Trendy Mobile Games Mechanics"
      ]
    },
    {
      "title": "Unreal Engine 4: For Absolute Beginners",
      "url": "https://www.udemy.com/course/unreal-engine-4-ue4/",
      "bio": "Learn the basics of making games with UE4 & Unreal Engine 4",
      "objectives": [
        "Basics of Unreal Engine",
        "How to build games with Unreal Engine Blueprints",
        "How to build levels in UE4",
        "How to spawn enemies",
        "Building shooter games or any game",
        "Game development fundamentals"
      ],
      "course_content": {
        "Introduction to Unreal Engine 4": [
          "Welcome to Unreal Engine 4",
          "Installing Unreal Engine 4",
          "Building your first Unreal Engine 4 game"
        ],
        "Intro to Unreal Engine 4 Level Editor": [
          "Unreal Engine 4 editor overview",
          "Unreal Engine 4 editor mode",
          "Blocking out an area",
          "Creating edges and stairs",
          "Creating simple materials",
          "Creating rounded walls",
          "More editing tools and objects",
          "Preparing to build a bridge",
          "Creating a bridge with subtractions",
          "How to extrude geometry"
        ],
        "Intro to Unreal Engine 4 Materials": [
          "Creating simple materials",
          "Setting textures to materials",
          "Working with metallics",
          "Tinting and multiply nodes",
          "Material texture coordinates",
          "Instance materials: plastic",
          "Instance materials: emission",
          "Creating a dynamic material with Blueprint",
          "Shooting cubes to change color"
        ],
        "D2D Game: Controls, Characters, Enemies & Guns": [
          "Project creation & setup",
          "How to copy & paste Unreal Engine 4 Blueprints",
          "Creating a 3rd person camera",
          "Creating a GameMode",
          "Setting up keyboard and controller inputs",
          "Moving the player forward in Blueprint",
          "Setting up camera rotation in Blueprint",
          "Rotations, vectors, and moving characters",
          "Creating smooth animations with BlendSpace",
          "Connect player input to animations with AnimationBlueprint",
          "Attaching weapons to a player",
          "Creating a gun laser particle system",
          "Attaching a particle system to a weapon in Blueprint",
          "Creating bullets through RayCasting",
          "Creating weapon logic & muzzle flash",
          "Implementing sound effects in Unreal Engine",
          "Spawning bullet effects at hit impact",
          "Enemy artificial intelligence (AI)",
          "Logic to choose animation blends",
          "Implementing player health and Blueprint Interfaces",
          "Raycasting pawns and firing events",
          "Ragdoll physics for the enemy",
          "Final Source Code",
          "Student Exercise"
        ],
        "D2D Game: Game Design, Logic, & Events": [
          "Setup & project creation",
          "Greyboxing the level",
          "Game design document & technical overview",
          "Project Starter Assets & Design Docs",
          "Optimizing 3D models for mobile",
          "Weapon pickup events",
          "Custom animation for weapon/no weapon",
          "Working with physics and constraints",
          "Creating logic in Level Blueprints",
          "Building gameplay and chaining events",
          "Building a terminal and intro to UI with UMG",
          "Showing UI based on events",
          "Creating reusable doors that open",
          "Blueprint interactions and distance between objects",
          "Creating health bars"
        ],
        "Dark City Mobile Game": [
          "Dark City project creation",
          "Setting up Unreal for mobile development",
          "Implementing touch controls",
          "Creating custom touch look controls",
          "Important Unreal Engine 4 mobile resources",
          "Importing a flashlight model",
          "Creating and using texture masks",
          "Creating the flashlight blueprint",
          "Spawning the flashlight onto the player",
          "Rotating the flashlight with player rotation",
          "Creating flashlight cone effects (advanced materials)",
          "Creating battery UI progress bar",
          "Object outlines with post processing",
          "Battery pickup and recharge",
          "Setting up the enemy character",
          "Enemy AI Setup: Behavior Tree, AIController, Blackboard",
          "EQS System and Behavior Tree logic",
          "Modifying animations and connecting enemy velocity"
        ],
        "Diving Deeper Into Unreal Engine": [
          "How to move actors in UE4 with Blueprint",
          "Point & click movement with Blueprint",
          "Re-targeting animations onto 3D character models",
          "Creating a simple first person shooter",
          "Creating progress & health bars",
          "Lighting for mobile games"
        ]
      },
      "requirements": [
        "Computer running macOS or PC running Windows",
        "Have 10-15 Gigabytes of hard drive space available (UE4 is big)"
      ],
      "description": "Welcome to Intro to Unreal Engine 4 (UE4)!\nThis course is designed for absolute beginners and will teach you the basics of Unreal Engine.\nThis course was built to teach you UE4 in the funnest and fastest way possible. As with all Devslopes courses you'll spend 10% of your time on theory and 90% of your time actually building games!\nNO CODING EXPERIENCE IS REQUIRED\nAll gameplay logic is through Unreal Blueprints!\nThis course is packed with the basics and core features of the Unreal Engine.\nSome Things You'll Learn:\nUnreal Geometry editing tools (build your own levels)\nUnreal Materials\nThird person shooter mechanics\nCreating and working with cameras\nSetting up GameModes and LevelBlueprints\nHandling player input for both keyboard and game pads\nWorking with Vectors and Rotations\nAnimationBlueprints and BlendSpaces\nCreating simple particle systems\nRaycasting and shooting bullets\nSimple AI and enemy attack\nCreating game logic in Blueprints\nUser interface with UMG\nBuilding mobile games\nPost processing\nAnd A LOT more\nThis course teaches Unreal Blueprints and does NOT cover C++\nUnreal Blueprints are a powerful visual node-based coding tool that lets you build games WITHOUT WRITING CODE!\nYou can build entire games with Unreal Blueprints and get access to the full power of Unreal Engine.\nIf you want to make awesome games in Unreal Engine 4, then enroll now and we'll see you in class!",
      "target_audience": [
        "Anyone who wants to build games"
      ]
    },
    {
      "title": "Unity tutorial from scratch till infinity",
      "url": "https://www.udemy.com/course/unity-tutorial-from-scratch-till-infinity/",
      "bio": "Unity and Game Development",
      "objectives": [
        "Learn How a game gets created",
        "Learn C# in Unity",
        "Learn Movement Methods",
        "Learn Animation structure",
        "Learn UI in Unity",
        "Learn How to create a Simple Game",
        "How to get income from game"
      ],
      "course_content": {
        "Unity tutorials": [
          "Introduction",
          "Unity installation and code environment",
          "Getting to know different parts of Unity",
          "Understanding components in Unity",
          "C# Programming - Part 1",
          "C# Programming - Part 2",
          "C# Functions in Unity",
          "Physics in Game",
          "Using keyboard buttons in code",
          "Movement & Jump",
          "Collision structure in Unity",
          "Produce Objects in Unity - Instantiate (Shooting bullet)",
          "Important points - Part 1",
          "Create Enemy",
          "Get Score",
          "Save and Load structure",
          "UI in Unity",
          "Create a Menu and UI Buttons",
          "Animation in Unity and Game",
          "Work with Animator (manage animations)",
          "Load Level + Menu Animation in Unity",
          "Music and Sound Effects in Unity",
          "Work with timer (IEnumerator)",
          "Make Pages for Game (Stop Page)",
          "Export from Unity",
          "Make a simple Game - Part 1",
          "Make a simple Game - Part 2",
          "Implement ADS to Game (Unity ADS)",
          "While Loop in Unity"
        ]
      },
      "requirements": [
        "No programming experience needed. You will learn everything you need to know."
      ],
      "description": "Hi :) We are \"BudGames\".\nThis course is suitable for people who want to start making games and have no knowledge and experience of making games and programming. We have tried to implement all the training in the simplest possible way and in the shortest possible time. At the end of the course, you will fully learn how to make the game you want And you also learn how to make money from the games you make. During the course, in some parts, there are Practices that are better to do. We always try to keep this course updated.\nThe lessons taught in this course are prerequisites for making all games (2D, 3D, VR,...)\n\n\nBrief explanation about Unity :\nit is one of the best game engines and you can use it to create games for different platforms Like Android, IOS, Windows, WebGL, AR, VR, PlayStation , etc. The default programming language in Unity is C#, which is a simple and high-level language.\n\n\nEducational Structure :\nOur educational structure is such that the tutorials are first recorded and then voiceover is done on them and then they are edited. Cause of that, all the lectures have no wasted time and they were provided with high quality and useful(This is the reason for the short time of each episode - New Educational system)\n\n\nOur slogan: quality education in the shortest time :).",
      "target_audience": [
        "For all people who want to start game development"
      ]
    },
    {
      "title": "Complete Pygame Tutorial - Create a Dungeon Crawler",
      "url": "https://www.udemy.com/course/pygame-dungeon-crawler/",
      "bio": "Learn how to create a full game in Python from scratch",
      "objectives": [
        "Create a game loop and learn the fundamentals of the pygame module",
        "Work with spritesheets to create various animations",
        "Work with Classes using Object Oriented Programming",
        "Create characters with AI",
        "Use tilemaps to create various game levels",
        "Add collision between the characters and the game level"
      ],
      "course_content": {
        "Game Mechanics": [
          "Introduction",
          "Project Setup",
          "Setting up the Game Loop",
          "Creating the Player",
          "Keyboard Input and Player Movement",
          "Sprites and Animation",
          "Adding Multiple Animation Types",
          "Additional Characters",
          "Adding a Bow",
          "Shooting Arrows",
          "Creating Enemies",
          "Damage Text",
          "Player Health Display",
          "Coins & Potions"
        ],
        "Working with game levels": [
          "Introduction to Tilemaps",
          "Loading Data from Files",
          "Scrolling Camera",
          "Automated Level Generation",
          "Collision"
        ],
        "Artificial Intelligence": [
          "Building different stages of AI for the enemies",
          "Boss Enemy AI"
        ],
        "Additional Game Features": [
          "Working with Multiple Game Levels",
          "Screen Fade Effect",
          "Game Over Screen",
          "Buttons",
          "Game Menu",
          "Music and Sounds"
        ]
      },
      "requirements": [
        "Knowledge and familiarity with Python will be helpful"
      ],
      "description": "In this course you will learn how to use the very popular Pygame module by coding a dungeon crawler game completely from scratch. Since this is a Python module, we will also cover a lot of the fundamentals of Python in the process. This will include different types of loops, lists and even working with files on the computer.\nThe course will cover the fundamentals such as the game loop, keyboard inputs and drawings shapes and images onto the screen. This will give an introduction to Pygame and a refresher of Python if you haven’t used it in a while.\nAfter that the course will move onto more advanced topics such as animation and level tilemaps.\nWe will also tackle AI within this project, by gradually building up layers of intelligence for the enemies, starting with simpler logic, such as having the enemies always run towards the player, to more advanced logic, where the enemies need to see the player before they can chase him.\nThe course includes a set of starter files to help you get the folder structure setup correctly from the beginning. Additionally, I have included my custom level editor so you can edit the levels and even create your own ones to add to the game.",
      "target_audience": [
        "Beginner Python developers who would like to learn game development"
      ]
    },
    {
      "title": "The Complete Guide to Unity 2D : Platformer Development",
      "url": "https://www.udemy.com/course/platformer-alexdev/",
      "bio": "Level up your C# and Unity knowledge and create your very own 2D Platformer with local multiplayer.",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Develop strong and transferrable problem-solving skills.",
        "Learn Object-Oriented Programming in Real-World Scenarios",
        "Gain an excellent general knowledge of video game design.",
        "Create playable game projects - good for your portfolio, or just for your own sense of achievement.",
        "Write Clean, Maintainable Code and Design Scalable Game Architectures"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Important to know - Mindset of the course",
          "Important to know - Q&A and Bugs",
          "Important to know - Before we begin"
        ],
        "Basics of Unity and C#": [
          "Install Unity and Visual Studio",
          "Get and Setup Assets",
          "Window and Tools",
          "Components and what they do",
          "Basic of C# - Variables and Execution order"
        ],
        "Character development": [
          "Player setup",
          "Movement",
          "Idle and Move Animations",
          "Blend Tree",
          "Jump and Collision detection",
          "Jump and Fall Animations",
          "Flip functionality",
          "Double Jump",
          "Wall Slide",
          "Wall Jump",
          "Knockback",
          "Buffer Jump",
          "Coyote Jump",
          "Clean up & Project"
        ],
        "Tile Palette and Level Creation": [
          "Tile Palette, Tile map Collider and Sorting Layer",
          "Rule Tile Setup - Auto Tilling System",
          "Create First Level",
          "Clean up & Project"
        ],
        "Game Manager and Game Mechanics": [
          "Game Manager",
          "OnTriggerEnter2D",
          "Fruit Pickup - Collectable Items",
          "Fruit Manager",
          "Instantiate - Fruit Pickup VFX",
          "Player's Death and Dead Zone",
          "Player's Respawn",
          "Checkpoints",
          "Start & Finish Point",
          "Total Fruits Collected",
          "Clean up & Project"
        ],
        "Traps & Level mechanics": [
          "Simple Trap",
          "Saw Trap",
          "Extend Saw Trap",
          "Trampoline",
          "Pushing Arrow",
          "Falling Platform",
          "Swing Platform",
          "Fire Trap",
          "Clean up & Project"
        ],
        "Enemies": [
          "Enemy Mushroom",
          "Enemy/Player - Interaction",
          "Enemy Chicken",
          "Enemy Rino",
          "Middle Section Clean Up",
          "Enemy Plant",
          "Enemy Trunk",
          "Enemy Snail",
          "Clean up and Project"
        ],
        "UI & Saving System": [
          "Update Unity Version",
          "Animated Background",
          "New Game Button",
          "The End Screen",
          "Fade In / Fade Out Effect",
          "Switch UI Elements",
          "Skin Selection",
          "Level Selection",
          "Save System Example",
          "Save Level Progression",
          "In Game UI",
          "Save Collectables and Best Time",
          "Purchase Skin System",
          "Difficulty Manager & UI",
          "Pause UI",
          "Settings UI",
          "Finalize UI",
          "Clean up & Project"
        ],
        "Camera": [
          "Cinemachine setup & Review",
          "Camera shake",
          "Camera transitions",
          "Interactive camera in Menu",
          "Clean up & Project"
        ],
        "Audio": [
          "Audio Manager",
          "Sound Effects",
          "Background music",
          "Volume settings",
          "Where to look for audio",
          "Clean up & Project"
        ]
      },
      "requirements": [
        "PC or Mac capable of running Unity 2020 or later",
        "No programming experience needed. You will learn everything you need to know"
      ],
      "description": "Are you ready to jump into world of game development and create your own unique 2D platformer with local multiplayer game? Look no further than this comprehensive and standalone course, designed to take you through the process step by step, even if you have no previous experience in game development.\nWhile it's better to have some experience and knowledge of C#, don't worry if you don't have it, because I'll cover everything you need to know to create 2D Platformer with local multiplayer.\nThroughout this course, you'll learn how to create a responsive player controller ,levels with checkpoints, animated background, camera controllers, various traps and level mechanics, enemies to fight against. We'll be making over 11 enemies, providing you with clear examples of how to build different enemies with unique mechanics.\nIn the end I'm going to show you how to make a full gamepad support with, local multiplayer or even how to turn it into a mobile game if you wish to do so.\nYou'll also develop UI elements to manage systems such as difficulty selection, skin shop, level selection, settings and you will create a save system to save your progress - purchased skins, unlocked levels, best score and currency.\n\nFinally, you'll polish your game mechanics, visual effects, particles, and build and publish your game. By the end of this course, you'll have all the tools you need to create your own unique 2D Platformer game, regardless of your previous experience.\n\nYou can use my deisgn or mix it with your own ideas. The systems in this course are clean and scalable, allowing you to build upon them and create a truly unique 2D Platformer game.\nSo don't hesitate, enroll in my course today and turn your game ideas into reality!",
      "target_audience": [
        "Anyone who wants to make their own 2D games.",
        "People who want to create and publish their own games.",
        "Beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game",
        "People interested in working in the game design industry.",
        "Enthusiasts eager for a deep dive into game mechanics and Unity's potential."
      ]
    },
    {
      "title": "The Ultimate C# and Unity course for beginners",
      "url": "https://www.udemy.com/course/ultimate/",
      "bio": "Learn C# and Unity Coding and Game Development",
      "objectives": [
        "You can dive into the course exactly where you want. If you already know programming, you can skip ahead and start at one of the more advanced parts.",
        "You will learn C# programming from scratch. No prior knowledge of any programming language is required. We will start by learning all the basics.",
        "You will learn object-oriented programming. We will use C# to it’s full potential by learning about classes and objects.",
        "You will learn about the core of game development by creating your own 2D game with animated sprites without the help of any game engine.",
        "You will learn what’s happening behind the scenes in a game engine like Unity.",
        "You will learn how to take your own ideas and bring them to life in the Unity game engine."
      ],
      "course_content": {
        "Introduction": [
          "Who am I?"
        ],
        "Basics": [
          "Course structure",
          "Basics introduction",
          "1.0 Visual studio",
          "1.1 Writing code",
          "1.2 Our first program",
          "1.3 Error list",
          "1.4 String variables",
          "1.5 Reading input",
          "1.6 Numeric datatypes"
        ],
        "Program flow": [
          "Program flow introduction",
          "2.0 Flow control",
          "2.1 Else statements",
          "2.2 Logic and",
          "2.3 Logic or",
          "2.4 Switch cases",
          "2.5 For loops",
          "2.6 While loops",
          "2.7 Nested loops",
          "2.8 Foreach & arrays"
        ],
        "Datatypes": [
          "Datatypes introduction",
          "3.0 Enums"
        ],
        "Methods": [
          "3.1 Type conversion",
          "Methods introduction",
          "4.0 Methods",
          "4.1 Parameters",
          "4.2 Return types",
          "4.3 Ref and out",
          "4.4 Value tuple",
          "4.5 Method overloading"
        ],
        "Your first complete game": [
          "5.0 Hangman"
        ],
        "Object oriented": [
          "Object oriented introduction",
          "6.0 Classes and objects",
          "6.1 Fields and properties",
          "6.2 Methods and constructors",
          "6.3 Static members"
        ],
        "Inheritance": [
          "7.0 Inheritance",
          "7.1 Protected",
          "7.2 Overriding",
          "7.3 Abstract",
          "7.4 Base Constructors",
          "7.5 Polymorphism",
          "7.6 Interfaces",
          "7.7 Interfaces - Challenge"
        ],
        "Collections": [
          "Collections introduction",
          "8.0 Lists",
          "8.1 List Challenge",
          "8.2 Dictionary"
        ],
        "Creating a game in Windows forms": [
          "Game introduction",
          "9.0 Drawing a sprite",
          "9.1 GameObject",
          "9.2 GameWorld",
          "9.3 Player movement and Double buffering",
          "9.4 Transform",
          "9.5 Component pattern",
          "9.6 SpriteRenderer",
          "9.7 Player",
          "9.8 Player movement",
          "9.9 DeltaTime",
          "9.10 Enemy",
          "9.11 Enemy Movement",
          "9.12 Laser",
          "9.13 Collision",
          "9.14 Destroy",
          "9.15 Screen limits",
          "9.16 Background",
          "9.17 Infinit Background",
          "9.18 Animation",
          "9.19 Explosion",
          "9.20 Player lives",
          "9.21 Remove life",
          "9.22 Removing the player",
          "9.23 Game Over",
          "9.24 Scoring points",
          "9.25 Supply crate",
          "9.26 Shield",
          "9.27 Immortality"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity",
        "A copy of the latest version of Unity available for free",
        "A copy of visual studio available for free"
      ],
      "description": "This course is all you need, if you want to learn how to create games in Unity. You can’t create games in unity without knowing how to code, that’s why we will spend the first part of the course learning how to code C#.\nIMPORTANT!\nThis course will teach you best practices and teach you how to program. In this course you will not only learn how to do things, but also why we do things.\nNo prior knowledge is required because you will learn everything you need to know right here! When you are done with this course, you will be able to take your own game ideas and bring them to life in Unity.\nThe course is divided into 3 main sections:\nSection 1 – Basic programming\nIn this section we will get to know our tools and get a basic understanding of C#. We will end the section by creating our very first complete game in the console.\nSection 2 – Object oriented programming\nIn this section you will learn about classes and objects. These are the building blocks of every game. When you are done with this section you will know everything you need to know about C# before we dive into the world of Unity.\nWe will end this section by creating our very own complete game with animated sprites, without using any game engine or frame work. We will use all the knowledge that we have acquired in section 1 and 2 to create this game.\nSection 3 – Unity\nIn this section we will learn about the Unity game engine and editor. Because we have learned everything we need to know about C# in the previous section, we will be able to focus all our efforts on Unity.\nWe will end this section by creating a complete game in Unity.",
      "target_audience": [
        "Aspiring game developers and enthusiastic people who wants to dive into the world of game development."
      ]
    },
    {
      "title": "Unreal Engine: Create an Arcade Classic!",
      "url": "https://www.udemy.com/course/unreal-engine-4-create-an-arcade-classic/",
      "bio": "Like \"Fortnite?\" Master the tools used to build it as we re-create an arcade classic using the Unreal Engine.",
      "objectives": [
        "Understand how to download, install, and setup a project in the Unreal Engine",
        "Build levels, create materials, customize particles, and edit sounds in the Unreal Engine",
        "Script interactive gameplay elements utilizing Unreal Engine's Blueprint Scripting tools",
        "Layout, animate, and give functionality to custom-made menu screens and in-game HUD",
        "Create a COMPLETE gaming experience from scratch!"
      ],
      "course_content": {
        "Introduction": [
          "Welcome"
        ],
        "Project Setup": [
          "Project Primer!",
          "Download and Install",
          "Create Project",
          "Folder Structure",
          "Import Marketplace Assets"
        ],
        "Editor Essentials - (FOR BEGINNERS!!!)": [
          "Level Editor - Part 1",
          "Level Editor - Part 2",
          "Content Browser - Part 1",
          "Content Browser - Part 2",
          "Viewport Nav - Mouse",
          "Viewport Nav - Keyboard",
          "Viewport Nav - Maya",
          "Orthographic Views",
          "View Modes / Show Flags",
          "Editor Essentials"
        ],
        "Actor Essentials - (FOR BEGINNERS!!!)": [
          "Placing Actors",
          "Moving Actors",
          "Rotating Actors",
          "Scaling Actors"
        ],
        "Level Building": [
          "Geometry Overview",
          "Additive & Subtractive Brushes",
          "Geometry Brush Settings",
          "Geometry Editing",
          "Building To The Grid",
          "Building Efficiency Tips",
          "Maze Pieces - Part 1",
          "Maze Pieces - Part 2",
          "Maze Layout - Part 1",
          "Maze Layout - Part 2"
        ],
        "Materials": [
          "Creating Materials - Part 1",
          "Creating Materials - Part 2",
          "Applying Materials To Level"
        ],
        "Avatar Creation": [
          "Player Avatar",
          "Enemy Avatar - Part 1",
          "Enemy Avatar - Part 2"
        ],
        "Sounds": [
          "Import Sounds",
          "Sound Cues"
        ],
        "Blueprint Creation": [
          "Class Blueprint Overview",
          "Player Blueprint",
          "Enemy Blueprint",
          "Enemy House Blueprint",
          "Pellet Blueprint",
          "Power Pellet Blueprint",
          "Cherry Blueprint",
          "Orange Blueprint",
          "Power-Up Blueprint"
        ],
        "Blueprint Scripting Fundamentals - (FOR BEGINNERS!!!)": [
          "Scripting Overview",
          "Events",
          "Functions",
          "Variables - Part 1",
          "Variables - Part 2",
          "Flow Control"
        ]
      },
      "requirements": [
        "SUGGESTED: Desktop PC with Windows 7 (or later) 64-bit - OR - a Mac with Mac OS X 10.9.2 or later",
        "SUGGESTED: 8 GB RAM",
        "SUGGESTED: Quad-core Intel or AMD processor",
        "SUGGESTED: DirectX 11 compatible video card",
        "SUGGESTED: Unreal Engine version 4.18 or later",
        "NO programming experience needed! You'll learn how to code functionality using Unreal's \"blueprint scripting\" as we go!"
      ],
      "description": "In this game design course, I will be guiding you step-by-step through the re-creation of an arcade classic using the Unreal Engine: THE premier free to download gaming engine! (AND the SAME engine used to build the smash hit \"Fortnite\").\nThis course contains 161 fun-to-follow video lessons. Things learned in this course include:\nHow to setup and create a project in the Unreal Engine\nHow to navigate the Unreal Editor\nHow to construct simple levels using basic shapes (geometry)\nHow to import and implement sounds\nHow to understand the basics of Unreal's Blueprint Scripting system including:\nHow to create Variables\nHow to create Functions\nHow to use Events, Flow Control, and Timeline nodes\nHow to organize your Blueprints themselves and scripts\nHow to create interactive objects using Blueprint Scripting such as:\nPickups (pellets, power-pellets, fruits)\nEnemies (ghosts)\nWarp zones\nHow to implement simple enemy AI\nHow to create interactive menus\nHow to create a game HUD\nHow to animate menu and HUD elements\nHow to create a saving system\nHow to load a saved game\nHow to create a leaderboard\nHow to add fun presentation elements like slow motion, animating scores, flashing text, etc.\nAnd more!\nWith the knowledge gained in these video lessons, you'll be armed with the necessary skills to start building your OWN gaming creations (WITHOUT any programming knowledge needed)!",
      "target_audience": [
        "Anyone interested in learning how to use the Unreal Engine to create games",
        "NO PRIOR VIDEO GAME DESIGN KNOWLEDGE OR UNREAL ENGINE EXPERIENCE NEEDED!"
      ]
    },
    {
      "title": "Learn To Use Shader Graph To Create Awesome Effects In Unity",
      "url": "https://www.udemy.com/course/unity-shader-graph/",
      "bio": "Game development made easy. Learn to develop shaders with Unity's Shader Graph system!",
      "objectives": [
        "Learn Shader Graph, Unity's built-in visual shader development system",
        "Understand the capabilities of shader development in Unity",
        "Develop strong and transferrable problem solving skills",
        "Gain an understanding of the game development process",
        "Learn how object oriented programming works in practice"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Project Assets"
        ],
        "Getting Set Up": [
          "Setting Up The Project Using The URP Template",
          "Setting Up Without The URP Template",
          "Setting Up Our Assets"
        ],
        "Basics Shaders": [
          "Material Basics",
          "Setting Up A Shader and Material",
          "Controlling Color",
          "Adding More Variables",
          "Adding Texture",
          "Setting Up A Fully Textured Model",
          "Normal Maps & More",
          "Adding Emissive Texture",
          "Tiling & Offset",
          "Wrapping Up The Basics"
        ],
        "Glowing & Holograms": [
          "Setting Up For Glowing",
          "Creating Glowing Edges",
          "Ignoring Lighting",
          "Making It Transparent",
          "Adding Texture Lines",
          "Making Lines Always Horizontal",
          "Scrolling The Lines",
          "Fixing A Potential Line Texture Issues"
        ],
        "Dissolve Shader": [
          "Setting Up A Dissolve Shader",
          "Making Dissolve Work",
          "Adding Noise",
          "Adding Coloured Edges",
          "Improving The Coloured Edges",
          "Controlling Materials Through Code",
          "Controlling The Dissolve Effect",
          "Improving The Effect"
        ],
        "Texture By Position": [
          "Texture By Position Setup",
          "Controlling Texture By Position",
          "Triplanar Node"
        ],
        "Swaying Grass": [
          "Setting Up Grass Swaying Scene",
          "Understanding Vertex Displacement",
          "Setting Up Grass Basics",
          "Moving The Grass",
          "Keeping The Base Steady",
          "Using A Sub-Graph For Efficiency"
        ],
        "Toon Shader": [
          "Setting Up A Toon Shader",
          "Calculating Shadows",
          "Adding Colour & Texture",
          "Adding Coloured Shadows",
          "Adding Highlights",
          "Adding Outlines",
          "A Separate Outline Shader"
        ],
        "Water Shader": [
          "Setting Up The Water Shader",
          "Adding Depth",
          "Making The Surface Move",
          "Adding Foam",
          "Adding Edge Foam"
        ],
        "2D Parallax Shader": [
          "Setting Up 2D Parallax Shader",
          "Making It Work",
          "Limiting Parallax Direction",
          "Moving The Camera"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2022.3 or newer"
      ],
      "description": "Learn how to create and develop your very own graphical effects and shaders using Shader graph in Unity, an industry-standard game development program used by large gaming studios and indie developers across the world.\nIn this course you won’t just be learning graphical concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding the visual side of game dev, this course will help you gain a greater understanding of development.\nAt the end of this course you will have developed the ability to understand such elements as:\nWorking with Unity's built-in Shader Graph system\nDevelop a variety of shader types\nWork with 3D and 2D visual effects\nCreating shader's for practical use in your games\nAdding effects like water depth, cel-shading, Parallaxing, Swaying Grass, Glowing Holograms, dissolving materials and more\nUsing both Texture and Vertex based effects\nLearn to master nodes and combine them to create new effects\nAnd much more\nThe course also includes a complete version of the project to use for your own reference to ensure everything in your game works as it should!\n\n\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own action survival games",
        "People who want to create and publish their own games",
        "Complete beginners with an interest in learning game development",
        "Developers who want to re-skill across to game development",
        "People interested in working in the game development industry",
        "Those who are competent and confident with using a computer"
      ]
    },
    {
      "title": "Unity Game Audio 1: Adding Sound to a Game for Beginners",
      "url": "https://www.udemy.com/course/unity-audio-for-beginners/",
      "bio": "Learn the game audio implementation basics within Unity and further develop your skills. (NEW DISCOUNT in description)",
      "objectives": [
        "Implementing Audio in a Unity Project.",
        "Basic C# Programming.",
        "Learn various techniques which help add audio to a game.",
        "Add audio variations to break repetitiveness.",
        "Linking audio to animation events.",
        "How to easily add audio to menu buttons."
      ],
      "course_content": {
        "Introduction": [
          "Course Overview",
          "Downloading Unity",
          "Navigation Through The Engine"
        ],
        "The Foundation": [
          "Before We Start",
          "Audio Components",
          "Playing a Sound"
        ],
        "When Audio Meets Code": [
          "Understanding Code",
          "Playing A Sound With Code",
          "Point And Click: Part 1 Setting-up",
          "Point And Click: Part 2 Adding sound when there's input",
          "Point And Click: Part 3 Adding sound when clicking an object",
          "Triggering Audio"
        ],
        "Advancing": [
          "A Static Class",
          "Playing Sound Variations",
          "Understanding Prefabs",
          "Point And Click: Adding Audio Variations"
        ],
        "Animations": [
          "Understanding Animations",
          "Events",
          "Adding Audio Through Events"
        ],
        "Player Locomotion": [
          "First Person: Setup",
          "First Person: Footsteps",
          "First Person: Emotes",
          "Third Person: Setup",
          "Third Person: Script",
          "Third Person: Footsteps and Emotes"
        ],
        "UI Sounds": [
          "Understanding UI",
          "Buttons With One Script"
        ],
        "The Final Mix": [
          "Preparing The Scene",
          "Mixing",
          "Extra Material: Reverb Zones"
        ]
      },
      "requirements": [
        "Should have some knowledge of what a game engine is.",
        "Should be able to run Unity and Visual Studio.",
        "Should have a bit of coding knowledge."
      ],
      "description": "Use the code SEPTEMBER23 at checkout to purchase this course at €12.99. Expires 7th of October 2023 06:45 AM GMT\n\n\nIn this course, you'll learn how to navigate within the Unity game engine and how to add sounds to make your scene come to life.\nEvery section goes over a fundamental aspect of implementing sound design. With this knowledge, you can then tackle most (basic) games. You can compare it to drawing the human body. You first need to know the fundamentals (the basics), before you can make stylized character designs. With this I mean that after this course, you'll be able to gather your knowledge and experiment/fully implement your sound design in (smaller) games.\nIn some sections, you'll also be getting some game objects and (free to use) audio files. These files are a mixture of my own written scripts and Unity's Assets (which are free to use through their Asset Store). This way you can focus on the course without having to create any (sound) assets of your own. Feel free to implement your own sound assets to practice and/or experiment.\nSUMMARY\nYou'll learn how to\nmake the environment sound more believable by adding ambiance and music.\nscript and add audio to animations, actions and UI-elements within Unity.\nadd audio (such as footsteps) to your characters.\nmix and fine-tune with Unity's Audio Mixers.\n\n\nI created this course because I couldn't find any other 'sound in Unity' tutorials on Udemy or YouTube that went in-depth. I remember, back in my student days, I wanted a full tutorial that allowed me to know the basics and allowed me to advance even further. This tutorial is what I feel is missing out there and is something that would have helped me greatly in the past.\nFeel free to contact me if you have any questions related to this course.",
      "target_audience": [
        "Sound designers wanting to delve into the gaming world.",
        "First year game design students looking to (understand and) add game audio to their projects.",
        "Unity users wanting to become a technical sound designer."
      ]
    },
    {
      "title": "Unity C# Editor Scripting Masterclass",
      "url": "https://www.udemy.com/course/unity-editor-scripting/",
      "bio": "Create Unity Store Assets or Automate Internal Development!",
      "objectives": [
        "To create internal development tools",
        "To create a localisation package for unity games",
        "To style and distribute unity packages"
      ],
      "course_content": {
        "Introduction": [
          "What This Course Is",
          "Installing and Setting Up Unity (If Needed)"
        ],
        "Build Your Own Internal Tools": [
          "What You Will Be Making",
          "Unity Layouts and Preferences",
          "Starting the Project",
          "Displaying the Custom Editor Window",
          "Basic Layout for Editor",
          "Interacting with Game Objects",
          "Programming Buttons and Spawners",
          "Quiz - Internal Development"
        ],
        "Data Types, Gizmos and Visual Aids": [
          "What You Will Be Making",
          "Field and Data Types",
          "Setting up the 2D Platformer Prototype",
          "Enhancing the Inspector",
          "Using Gizmos for Visual Debugging",
          "Quiz - Datatypes and Gizmos"
        ],
        "Building Beautiful and Powerful Unity Store Products": [
          "What You Will Be Making",
          "Unity Store Research",
          "Designing the Product",
          "Starting the Project",
          "Singletons and Loading Localised Dictionaries",
          "PlayerPrefs and Reading Strings",
          "Setting Text to Objects",
          "Creating a Useful Key Value Editor",
          "Custom Property Drawers",
          "Case Study: Popular Unity Store Components",
          "Making a Custom Image Header and Styling the Editor Window",
          "Reusable Styles",
          "Reorderable Lists",
          "Drag and Drop Handling",
          "Create an Example Scene and Documentation",
          "Creating a Unity Package",
          "Selling on Unity Store",
          "Ongoing Customer Support",
          "Quiz - Building Products"
        ],
        "Conclusion": [
          "Where to Next?",
          "BONUS: Should you attend a local Unite Conference?"
        ]
      },
      "requirements": [
        "Basic understanding of C# programming language",
        "Basic understanding of the Unity platform"
      ],
      "description": "By default the Unity interface is quite powerful and versatile but that is nothing compared to what you can accomplish by scripting the interface, here are some examples of what you can do:\nAutomate testing and development\nCreate visual aids (Gizmos) to help you see parameters as you develop\nCreate Unity Asset Store products\nMake components more user friendly and adaptive\nStreamline development procedures and testing\nMuch more!\nThis course takes you through everything you need to know to get started on implementing unity scripting in to your workflow and create amazing Unity Store products:\nCreate a tool for testing and automated development\nCreate a 2D platformer parallax cloud world using Gizmos\nCreate a fully featured localisation engine completely optimised and styled for the asset store\nVideo content and full source code available\nOngoing support and access to future sections added to this course\nGet ready to enjoy the most comprehensive Unity Editor Scripting course at an affordable price and become a professional editor scripter.",
      "target_audience": [
        "Individuals or teams that want to develop internal tools to streamline their development process",
        "Individuals or teams who have created code based assets they wish to style and package for the Unity Asset Store"
      ]
    },
    {
      "title": "Roblox Beginner ESSENTIALS Course: Code & Build Custom Games",
      "url": "https://www.udemy.com/course/roblox-studio-beginner-course/",
      "bio": "Learn How to Use Roblox Studio to Create Epic Video Games: Build Your World & Script Your Game in this Beginner's Course",
      "objectives": [
        "Learn How to Build and Code Roblox Games in Roblox Studio",
        "Learn Foundational Roblox Game Development Skills like Creating Models, Using the Terrain Editor, Cutting Through Parts, and Changing Game Lighting",
        "Gain a Basic Knowledge for Writing Scripts in the Lua Coding Language on Roblox Studio",
        "Find Out How to Publish Working Games on Roblox so That Others Can Enjoy Your New Game Development Skills"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Beginning Quickstart Lessons": [
          "How to Download and Install Roblox Studio",
          "How to Open a Template, Move Around and Test Your Game in Roblox Studio",
          "How to Install Plugins in Roblox Studio"
        ],
        "How to Use Roblox Studio": [
          "How to Navigate Roblox Studio Lesson 1",
          "How to Navigate Roblox Studio Lesson 2",
          "How to Save and Publish to Roblox",
          "Creating Your World - Terrain Editor Lesson 1",
          "Creating Your World - Terrain Editor Lesson 2",
          "Creating Your World - Terrain Editor Lesson 3",
          "Testing Your Game After Building Your World",
          "How to Add Parts to Your Roblox Game",
          "Customizing Parts in Roblox Studio",
          "Part Properties: Anchored and CanCollide",
          "How to Delete Parts in Roblox Studio",
          "How to Use Models in Roblox Studio",
          "How to Create Your Own Models in Roblox Studio",
          "How to Save Models to Your Roblox Account",
          "How to Overwrite Existing Models",
          "How to Cut Through Parts (Create Windows, Tunnels and More)",
          "How to Change Terrain Colors (to Make Your Game Unique)",
          "Continue to Save Your Game as You Go (and Where to Find Your Different Versions)",
          "Changing the Lighting of Your Game World and Time of Day"
        ],
        "How to Change Gameplay in Roblox Studio": [
          "Intro to Gameplay Section",
          "Where to Find Gameplay Settings in Roblox Studio",
          "How to Change Walking Speed of Players in Your Game",
          "How to Change Gravity and Jumping Height",
          "How to Change a Player's Zoom Distance",
          "Some Game Settings Can Also Be Changed in the Explorer Tab",
          "How to Change the Forcefield (when a Player Spawns)",
          "Dropping the Beat: Adding Background Music to Your Roblox Game",
          "Create Roblox Games with Friends: How to Enable Team Create",
          "How to Add a Picture to Any Game Part",
          "How to Upload Your Own Images to Roblox to Use in Your Games",
          "How to Make a Sign: Adding Text to a Part",
          "How to Add a Seat to Your Game"
        ],
        "Coding in Roblox, Changing Your Game with Scripts": [
          "First Roblox Coding Lesson, the Print Statement and How to Delete or Disable",
          "Comments in Code as well as How to Spot Errors",
          "Changing Elements of a Part with a Script",
          "Introduction to boolean Lines of Code",
          "How to Use Wait in Your Game"
        ],
        "Thank You": [
          "Thank You and Closing Thoughts"
        ]
      },
      "requirements": [
        "A Connection to the Internet to Download Roblox Studio and Basic Computer Skills",
        "No Previous Experience with Roblox Studio Needed",
        "No Coding Experience Required"
      ],
      "description": "Roblox Studio Beginners Essentials Course: Build and Code Your Own Games in Roblox Studio.\n\n\nLearn first hand what it takes to succeed as a Roblox game developer in 2021.\n\n\nLearn from the ground up what it takes to go from beginner to Roblox Game Developer with this course, taught by Roblox Studio enthusiast Kyle Davies.  Offers a comprehensive, step-by-step guide to starting on Roblox Studio and Learning How to Code in Lua.\n\n\nMany people have been creating games on Roblox Studio since it's inception.  You have the opportunity to create exciting, vibrant games that other's can enjoy, starting with zero coding experience.  With hard work, focus and dedication, you can master the skills needed to make your video game concepts a reality.\n\n\nThis course is a must-have for those looking to grow their skills on Roblox Studio.\n\n\nIn this course you will learn:\nHow to setup your Roblox Studio Account to start creating games (with full walkthrough)\nHow build beautiful worlds with the Terrain Editor\nRoblox Studio foundational lessons on building, coding and gameplay\nSolid Foundational Coding Lessons to Use When Writing Scripts\nHow to change game settings in Roblox Studio\nLearn Solid Roblox Game Development Skills like Creating Models, Using the Terrain Editor, Cutting Through Parts, and Changing Game Lighting\nThis course also includes how to take your game development to the next level with:\nHow to get the most out of Roblox Studio\nKeyboard Shortcuts that Will Save you Time\nBest Practices for Coding within Roblox Studio\n\n\nThis course is easy to follow with many full live demos and walkthroughs of exactly what to do.  This is perfect for those who want to learn how to begin using Roblox Studio.\n\n\nWho this course is for:\n\n\nBeginners who have never used Roblox Studio before\nBeginners who may have tried other ways to learn but want a more detailed, step-by-step approach so their games work correctly\nBeginners who want to save time by learning the best ways to use Roblox Studio\nBeginners who have no previous coding experience",
      "target_audience": [
        "Beginner Students Who Want to Build and Code in Roblox Studio",
        "Beginner Game Developers who Want a Foundational Knowledge of Roblox Studio"
      ]
    },
    {
      "title": "Build Multiplayer Games With Unity And Photon ( PUN 2)",
      "url": "https://www.udemy.com/course/build-multiplayer-games-with-unity-and-photon-pun-2/",
      "bio": "Multiplayer game development made easy.Learn the basics of Multiplayer games by building from the scratch with Photon.",
      "objectives": [
        "Multiplayer Game Development Basics",
        "Mobile FPS Shooter Basics",
        "How to use FPS Hands and Full Character Model together in multiplayer FPS game",
        "How to synchronize player movement, health and animation for all players in the same room",
        "Adding Mobile Controls For FPS Games"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Introduction to Photon",
          "Photon Unity Networking 2 Example Scenes"
        ],
        "Your First Multiplayer Game: Pixel GUN 3D Clone": [
          "Introduction",
          "READ BEFORE PROCEED",
          "Creating The Project And Importing Photon Unity Networking 2 ( PUN 2 )",
          "Connecting to Photon With Player Name",
          "Preparing Connection Status UI And Lobby UI",
          "Creating And Joining Random Room",
          "Preparing Game Scene",
          "About The Server Regions",
          "Loading Game Scene When Joining Room",
          "Creating FPS Pixel GUN Character",
          "Basic FPS Movement[Part-1]",
          "Basic FPS Movement [Part-2]",
          "Attaching Weapon to Pixel GUN Character",
          "Spawning Players In The Same Room",
          "Introduction To Player Networking: Movement Synchronization",
          "Showing Player Names On Top Of Players",
          "Showing Health Of Players- Health Bar UI",
          "Shooting Mechanism",
          "Killing Mechanism- RPC Calls",
          "Synchronizing Player Health And Adding Crosshair -RPC Calls",
          "Dying Mechanism"
        ],
        "Mobile Multiplayer FPS Game": [
          "Introduction",
          "Creating Mobile FPS Project And Importing PUN 2",
          "Creating Lobby Scene",
          "NetworkManager Script: Connecting To Photon With Player Name",
          "Preparing Multiplayer UI",
          "Creating Room With Room Name and Max. Players",
          "Showing The Existing Rooms In A List [Part-1]",
          "Showing The Existing Rooms In A List [Part-2]",
          "Showing The Existing Rooms In A List [Part-3]",
          "Listing Players In The Same Room [Part-1]",
          "Listing Players In The Same Room [Part-2]",
          "Joining Random Room",
          "Preparing Game Scene",
          "Loading Game Scene For All Players In the Room",
          "Importing Player Models: Soldier",
          "Importing Player Models: FPS Hands",
          "Instantiating Players In The Same Room",
          "Writing PlayerSetup Script: FPS Hands OR Full Soldier Model ?",
          "Basic FPS Character Movement",
          "Adding Mobile Controller [Part-1]",
          "Adding Mobile Controller [Part-2]",
          "Mobile Movement Across The Network",
          "Character Animations Part-1: Generic Animation Controller",
          "Character Animations Part-2: Blend Trees",
          "Character Animations Part-3: Combining FPS Hands Animations And Animation Sync",
          "Shooting With Hit Effects",
          "Killing Mechanism Part-1: Revisiting RPCs",
          "Killing Mechanism Part-2: Synchronized Hit Effects And Dying Animation",
          "Respawning With Timing"
        ],
        "Multiplayer Racing Game": [
          "Creating The Project: Importing PUN 2",
          "Importing Game Assets",
          "Network Manager Script: Connecting To Photon With Player Name",
          "Preparing UI Navigation",
          "Creating Rooms Based On Game Mode Type- Custom Room Properties [Part-1]",
          "Creating Rooms Based On Game Mode Type- Custom Room Properties [Part-2]",
          "Joining Random Rooms Based On Game Mode",
          "Listing Players In The Same Room [Part-1]",
          "Listing Players In The Same Room [Part-2]",
          "Player Ready Check Mechanism[Part-1]",
          "Player Ready Check Mechanism[Part-2]",
          "Loading Game Mode Scene Based On Game Mode For All Clients",
          "Racing Game Mode: Player Selection UI",
          "Racing Game Mode: Instantiating Players Based On Player Selection",
          "Racing Game Mode: Car Movement Script",
          "Racing Game Mode: PlayerSetup Script And Synchronizing Movement Across The Netwo",
          "Racing Game Mode: Synchronizing Countdown To Start The Race!",
          "Racing Game Mode: Who won?- Lap Controller Script",
          "Racing Game Mode: Displaying The Race Results-Raise Events[Part-1]",
          "Racing Game Mode: Displaying The Race Results - Raise Events[Part-2]",
          "Racing Game Mode: Displaying Player Name On Top of Cars",
          "Death Race Game Mode: Introduction to Scriptable Objects",
          "Death Race Game Mode: Dynamic Player Selection With Scriptable Objects",
          "Death Race Game Mode: Instantiating Players And Synchrozing Movement",
          "Death Race Game Mode: Shooting With Bullets",
          "Death Race Game Mode: Shooting With Rocket Launcher And Fire Rate",
          "Death Race Game Mode: Shooting With Laser Gun",
          "Death Race Game Mode: Synchronizing Shooting Across The Network",
          "Death Race Game Mode: Killing Mechanism",
          "Death Race Game Mode: Respawn Mechanism",
          "Death Race Game Mode: Quit Match Mechanism"
        ],
        "Where to go next?": [
          "Final words on Multiplayer Game Development"
        ],
        "Games Source Codes": [
          "Download Links"
        ],
        "Bonus Section": [
          "Discounts On My Other Courses"
        ]
      },
      "requirements": [
        "Beginner-Intermediate Unity",
        "Intermediate C# Experience",
        "Desire to learn Multiplayer Game Development"
      ],
      "description": "Have you ever wanted to build your own multiplayer games that hit the stores like Pixel GUN 3D, Golf Clash and ShadowGun Legends? Yeah, you've come to the right place!\nBecause all these successful games are built using Photon which is a multiplayer game engine trusted by hundred thousands of developers around the globe!\n\n\nIn this course, you will learn the basics to create your own multiplayer games! And in every section, we will build a multiplayer game from scratch! So, you will learn by doing in every project...\nIn the first section, we will build Pixel Gun 3D Clone project from scratch with Photon Unity Networking 2 (PUN2).\nIt will be your first multiplayer game. By building this game, you will learn lots of things:\nCreating and  joining a random rooms with Photon.\nInstantiating remote players in the same room.\nSynchronizing Player movement and player health across the network.\n\n\nIn the second section, we will build a Mobile Multiplayer FPS Game from scratch with Photon Unity Networking 2 (PUN2).\nIn this section, you will learn more advanced stuff in multiplayer games.\nHow to create rooms by name and max.players.\nHow to list the existing rooms.\nHow to list the players in the room.\nHow to synchronize player animations across the network.\nFirst Person Shooter basics like FPS Hands and 3D player models.\nMobile Controllers\nBasic re-spawning mechanism after the player got killed!\n\n\nIn the third section, we will build Multiplayer Racing Game from scratch with Photon Unity Networking 2 (PUN2).\nThere will be more and more advanced stuff and you will have the opportunity to practice what you learned.\nHow to work with Scriptable Objects\nHow to sync Projectile Shooting over the network\nCharacter Selection\nGame Mode Selection\nRaise Events\nPlayer Ready Mechanism\nAnd more..\n\n\nSo, come and join me on this Multiplayer Game Development  Journey!\nLets build together!\n-Tevfik",
      "target_audience": [
        "Unity developers who want to build multiplayer games",
        "Developers who want to start game development with multiplayer games"
      ]
    },
    {
      "title": "3D Pixel Art for non artist. Crossy Road Modeling. Unity 3D",
      "url": "https://www.udemy.com/course/3d-pixel-art-for-non-artist-crossy-road-modeling-unity-3d/",
      "bio": "Master 3D pixel art to design characters for Unity3D game engine, cocos2d like Minecraft",
      "objectives": [
        "Draw 3d pixel art characters and objects in no time using free software",
        "Use 3D objects in amazing game engines like Unity 3D or cocos2d to make and publish amazing games without having to hire artists nor buy graphic assets",
        "learn about basic script use to animate characters, vehicles and cameras"
      ],
      "course_content": {
        "Getting Started": [
          "Get to know who your instructor is",
          "Download the project files",
          "How to Get the 3D Pixel Art Editor for FREE- MagicaVoxel - windows and MAC OS"
        ],
        "3D pixel software basics": [
          "3D Voxel Basics - Palettes and brushes",
          "Learn how to zoom in, out, rotate the object viewport",
          "3D Voxel Editor basics- render options and shadows",
          "Shapes Basics- Lines and Cubes",
          "Shapes Basics- Spheres and Circles"
        ],
        "Simple item 3D modeling": [
          "How to draw a road like in crossy roads",
          "Brushes basics- how to use attach, erase and paint actions",
          "How to add Trees and rocks",
          "How to take screenshot to use for 2D Games",
          "Help me help you"
        ],
        "3D Voxel Character Modeling": [
          "Crossy Road Chicken 3D - Build the body",
          "Crossy Road Chicken 3D- details",
          "How to make a 8bit pixel art 3d baby duck",
          "Draw a dinosaur pixelart 3d 8 bit - Nessy",
          "Draw a gift body 3d voxel character with magicavoxel",
          "Modeling a 3d voxel snail like inspired by crossy road",
          "pixel art char modeling a tree frog",
          "Create a frog character using a preexisting 3d voxel",
          "Create a green duck reusing the yellow duck 3d voxel",
          "Create a crossy road small car and apply colors"
        ],
        "Using 3D pixelart into Unity games": [
          "Download Unity 3D software",
          "Open the Crossy Road Unity project and test it",
          "Import your 3d pixel models into Unity 3D",
          "Import multiple 3d pixel objects into one unity prefab",
          "Add the jump animation to the crossy road character",
          "Animate cars and trucks crossy road style in unity 3d"
        ],
        "What to do next": [
          "A word from your instructor",
          "Bonus - Files"
        ]
      },
      "requirements": [
        "need a PC or a MAC computer",
        "all software used are FREE to download and use (no need to pay for use!)"
      ],
      "description": "3D Pixel Art for non artist. Crossy Road inspired 3D Modeling. Unity 3D\nImportant: all software used are FREE to download and use on PC and MAC computers (no need to pay, cheers!)\n\nIn this course you will learn how to make 3d pixel art just like in the Crossy Road game.\nThis course is meant for non-artists. With this course you don't have to be an artist to be able to make great 3d art.\nYou will learn how to use free tools to make amazing characters such as the chicken, the baby duck, the tree frog or the zebra.\nYou will also learn how to make landscapes, cars, trucks, roads and trees in no time.\nThen you will learn how to add all these objects in the game engine called Unity 3d to make amazing 3d games, just like crossy road.\nNow, this course is meant to make things this super easy for you. All the steps are shown to you in the video lectures, so you cant possibly miss a step.\nAnd by the way as a bonus, this course includes free downloads of the finished 3D models, that's dozen of them, and all the Unity project as well.\nThe skills you will learn in this course can be applied to so many more projects. Invest in yourself by joining this course now\n\n\nWhat is 3D Pixel Art?\n3D Pixel art is a form of digital art, created through the use of 2D-like raster graphics software, where images are edited on the pixel level in the form of blocks. Graphics in most old (or relatively limited) computer, console, graphing calculator and mobile phone video games are mostly 2D pixel art, and now we use the new technologies t have the retro-cool style with the amazing functionality that 3d technology provides. Some famous 3d pixel art video games (voxels) are minecraft , or crossy road.\nNote: This is the first course in a series to enable you to make amazing mobile games on your own. If you want to make progress, it is recommended to also take my other course on how to make 3D pixel characters and how to animate them within Unity 3D game engine.\nThen it is recommended to follow with the course on how to design, build, program and publish a Crossy Road like game to the app stores using Unity 3D.\nBy taking these courses, you will have a solid set of skills to get you to create professional games and can either become a solo entrepreneur or get hired by AAA game studios.\nEnjoy!\n******\nEnroll now and make 3D pixel art in no time, ready to use in 3D game engines like Unity 3D or Unreal Engine.",
      "target_audience": [
        "game enthusiasts",
        "non-artists",
        "computer students",
        "geeks",
        "game fans",
        "teenagers",
        "indie developers",
        "mom and pop"
      ]
    },
    {
      "title": "Shader Development from Scratch with Cg - Unity 6 Compatible",
      "url": "https://www.udemy.com/course/unity-shaders/",
      "bio": "Learn to program the graphics pipeline in Unity for creating unique visual surfaces for game objects.",
      "objectives": [
        "Use Unity Shaderlab to create their own shader effects with CG/HLSL.",
        "Apply their knowledge of simple mathematics to change the visual surface of virtual objects.",
        "Work with mesh vertices and textures to develop unique rendering effects.",
        "Demonstrate a knowledge of the graphics pipeline and apply it to problem solving shading issues."
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Join the H3D Student Community",
          "Contacting H3D",
          "FAQs",
          "Help! Why can't I see my shaders correctly?",
          "Working with Unity 6 in this course.",
          "The Rendering Pipeline",
          "Your First Surface Shader",
          "Challenge",
          "Crash Course in Vector Mathematics"
        ],
        "Shader Essentials": [
          "Variables and Packed Arrays",
          "The Anatomy of a Mesh and Shader Input",
          "Shader Properties",
          "Properties Challenge 1",
          "Properties Challenge 2",
          "Properties Challenge 3",
          "Properties Challenge 4"
        ],
        "Illuminating Surfaces": [
          "Lambert & Lighting",
          "Normal Mapping",
          "Bumped Diffuse Challenge",
          "Visualising Normals",
          "Illumination Models",
          "Bumped Environments",
          "Bumped Environments Challenge",
          "Buffers and Queues"
        ],
        "The Dot Product": [
          "The Dot Product",
          "Quiz",
          "Rim Lighting",
          "Logical Cutoffs",
          "Challenge"
        ],
        "Lighting": [
          "Lighting Models",
          "Blinn-Phong Lighting & Surface Output",
          "Physically-Based Rendering",
          "Challenge 1",
          "Challenge 2",
          "Writing Your Own Lighting Model",
          "Challenge 3",
          "Challenge 4"
        ],
        "Passes & Blending": [
          "The Alpha Channel",
          "Holograms",
          "Blending",
          "Leaves and Culling",
          "Blending Two Images",
          "Stencil Buffer",
          "Advanced Stencils"
        ],
        "Writing Vertex and Fragment Shaders": [
          "The Anatomy of a Vertex/Fragment Shader",
          "Colouring by Vertices and Fragments",
          "Material Use",
          "Lighting",
          "Shadows",
          "Challenge 1",
          "Challenge 2"
        ],
        "Advanced Effects": [
          "Vertex Extruding",
          "Outlining",
          "Glass",
          "Waves",
          "Scrolling Textures",
          "Challenge 1",
          "Plasma",
          "Challenge 2"
        ],
        "Volumetric Rendering": [
          "Ray Marching",
          "More on Ray Marching",
          "Spherical Fog",
          "Rendering Fog Density P1",
          "Rendering Fog Density P2",
          "Volumetric Clouds Value Noise",
          "Programming Value Noise P1",
          "Programming Value Noise P2",
          "Programming Value Noise P3",
          "Integrating Colours and Depth",
          "Enhanced Noise",
          "Clouds On Camera P1",
          "Clouds On Camera P2",
          "Clouds On Camera P3",
          "Clouds On Camera P4",
          "References"
        ],
        "Final Words": [
          "Where to Now?"
        ]
      },
      "requirements": [
        "You should be familiar with the Unity Game Engine.",
        "You should be able to program in a procedural language such as C#."
      ],
      "description": "Now Updated for Unity 2017 to Unity 6!\nThis course presents a comprehensive guide to programming with Cg and High Level Shader Language in Unity's Shaderlab, to create your own visual surface effects for colouring and lighting game objects. It covers the mathematics of light and surfaces and steps you through the recreation of some of the most popular shaders. Many computer graphics concepts will be presented to help you understand the graphics pipeline and provide you with an essential toolkit of rendering knowledge, that will have you developing your own transparent, animated and texturised shaders in no time.\nIn this course, Penny teaches all the invaluable skills you will require to program the computer graphics pipeline in Unity from scratch using her internationally acclaimed teaching style and knowledge from over 25 years working with games and graphics.  But hold on tight as you'll be taken on a journey across the computer graphics realm as it is taught to post-graduate university students. Through detailed descriptions and hands-on workshops examining all you need to know about rendering queues, vector mathematics, graphics buffers, colour theory, 3D meshes, texture mapping, lighting models and much more.\n\nLearn how to program and work with:\nvariables and packed arrays\nmeshes, vertices and UVs\nthe mathematics for working with objects in 3D and 2D spaces\na variety of lighting models from creating flat shaded objects to highly reflective shiny surfaces\nbump maps for adding extra depth and dimension to surface textures\nspecial effects such as holographic, scrolling textures and surface deformations\nthe variety of graphics buffers used in the rendering pipeline\nforward and deferred lighting\nsurface, vertex and fragment shaders written in CG/HLSL\nvolumetric rendering\nContents and Overview\nAfter diving right in and creating your very first shader from scratch, we will begin the lessons by examining how 3D models are structured and how that is used within shader code to colour and display the surface in computer graphics. You'll discover all the properties of a shader and how they can be controlled in code and via values fed in through Unity's Inspector.\nFollowing this, we will examine a variety of lighting models and how lights and surface textures can influence the final look of a render. Included here, an overview of the buffers involved in the rendering queue will be given with practical examples for creating special effects that require more than one draw call. Students will also be exposed to the power of vector mathematics and especially the dot product and its role in creating beautiful effects such as outlines, rim lighting and holograms. In addition, issues surrounding transparency and blending will be discussed along with many practical hands-on workshops in which students can flex their newfound skills to interrogate the code they write for better understanding.\nThe next section brings together all the skills learned throughout together, to develop some of the more popular complex shaders including animated plasma and animated water with waves.\nFinally volumetric shaders are covered in which you will follow along to create special effects such as fake geometry, fog and clouds.\nWhat students are saying about this course:\nThis is the best course I've ever taken. It is perfect for me. I worked for 15 years in feature animation. A large part of my career was spent developing shaders for a proprietary renderer. This course has already helped me to bring the value of my previous experience into Unity.\nBest shader course I've come across. There are enough and more tutorials on youtube to teach you how to develop your own shaders, but nothing falls into the class of Penny's tutorials. They are clear and to the point. Really happy about this one.\nWow! Thank you so much! If there were 10 stars - this course would deserve it. Going from absolutely knowing nothing about Shader writing to have a profund understanding about it.\nI wanted to let you know that I just finished your shader course and thought it was fantastic. It was a pleasure to take the course and finally get a grasp on a topic that seemed so foreign to me not so long ago. Your teaching style and personality really worked for me and made learning a breeze!",
      "target_audience": [
        "Anyone fascinated by the way computer graphics works.",
        "Anyone wanting to understand how to write their own shaders.",
        "Anyone who loves the visual effects that can be achieved through simple code and mathematics."
      ]
    },
    {
      "title": "Unity Mobile Game - Create Your First Hyper Casual Game !",
      "url": "https://www.udemy.com/course/unity-mobile-game/",
      "bio": "Learn, Create, Prototype a Hyper casual mobile game from scratch in less than a day!",
      "objectives": [
        "How to create a simple Hyper Casual Game from scratch",
        "How to setup your project for mobile",
        "How to get / make the assets you'll need for your Game",
        "Create a Logic for your Game"
      ],
      "course_content": {
        "Introduction": [
          "Downloading Unity Hub",
          "Setup the Project"
        ],
        "Player Logic": [
          "Importing Runner Model",
          "Downloading Runner Animations",
          "Animating the Runner",
          "Controlling the Player",
          "Setup the Camera",
          "Setup the Crowd System",
          "Creating the Crowd Counter"
        ],
        "Core Game Elements": [
          "Creating our first Road Chunk",
          "Creating the Chunk Manager",
          "Graphics & Crowd Improvements",
          "Setting up the Doors",
          "Adding Logic to the Doors",
          "Interacting with the Doors",
          "Making the First Level",
          "Adding a Finish Line"
        ],
        "Basic User Interface": [
          "The Game Manager",
          "Adding a Play Button",
          "Adding a Progress Bar",
          "Adding the Level Text",
          "Creating a Level Scriptable Object",
          "Fixing Runners Animation"
        ],
        "Enemy Logic": [
          "Creating our First Enemy",
          "Adding Logic to our Enemy",
          "Implementing the Fight Logic",
          "Creating an Enemy Group",
          "Adding the Enemy Group to a Level Chunk"
        ],
        "Some More UI & User Experience Improvements": [
          "Gameover Panel and Logic",
          "Level Complete Panel and Logic",
          "Fixing Level Text",
          "Testing the Level Loop",
          "Adding Sounds",
          "Adding Haptics",
          "Adding Settings Panel",
          "Adding Sounds Button Logic",
          "Adding Haptics Button Logic"
        ],
        "Adding Coins to our Game !": [
          "Adding Coin UI Element",
          "Creating the Data Manager",
          "Creating the Coin Prefab",
          "Adding Coin Detection"
        ],
        "Building the Game": [
          "Building & Testing"
        ],
        "Congratz !": [
          "Congratz !"
        ],
        "The Skin Shop": [
          "Creating the Shop UI",
          "Adding the Skins Buttons Grid",
          "Adding the Skin Button Logic",
          "Creating the Shop Manager",
          "Saving the Skin Button State",
          "Purchasing a Random Skin",
          "Adding the Coin Check",
          "Opening / Closing the Shop",
          "Adding the Skins",
          "The First Skin Animation",
          "Creating the Runner Selector",
          "Creating the Player Selector",
          "Selecting a Skin",
          "Adding the Skins Icons"
        ]
      },
      "requirements": [
        "A Computer with an internet connexion",
        "Some basic Unity knowledge is appreciated but not compulsory",
        "The will to understand and finish your game"
      ],
      "description": "In this course, you will learn how to make a cool and fun Hyper Casual game.\n\n\nTogether, we will go through creating variables, creating methods, putting code together, adding 3D models and even creating images.\nWe will then put all of this together to Create a Complete Mobile Game you can play & even publish on the App Store & Google Play Store.\n\n\nAt the end of this course, you'll be able to :\nCreate a similar game by yourself\nAnimate a Human-like 3D Model\nControl any object with your fingers (on the phone of course)\nDetect Collisions and apply a certain Logic\nControl the flow of your game !\nMake Managers ! Like in the real life that will help you control your game\nCreate basic UI Elements\nOpen Unity and be proud of yourself cause you Finally Understand!\n\n\nThis is only a small overview of what you'll learn, I can't put anything in here cause honestly, who's going to read it ?\nJust Kiddin' !\nThe most important thing is that you'll learn, A LOT ! And if you happen to have any questions, I will take your hand and Help until you clearly understand why I wrote or did this instead of that.\nI want YOU to learn because Making Games is Easy & Fun :)\n\n\nSo if you want to impress your friends, have a good time making your own game, self publish your game and make money, publish the next Hit game with a big publisher, or just add a bunch of information to your brain's knowledge database, this course is for you!\n\n\nDon't wait anymore, and Enroll Now !",
      "target_audience": [
        "Humans eager to learn how to make their own mobile game from scratch",
        "Humans eager to create something they can share with their family and friends",
        "Humans eager to publish their games with big publishers"
      ]
    },
    {
      "title": "Unreal Engine Blueprints Optimization",
      "url": "https://www.udemy.com/course/unreal-engine-game-optimization/",
      "bio": "Create and package games with Optimized Blueprints and techniques that are not shown on Youtube!",
      "objectives": [
        "Step By Step videos for Beginners and Advanced Students.",
        "Why you should NEVER use: Cast To, Event Tick, Bind, Delay, Get All Actors of Class.",
        "Advanced Heal/Damage System, Scoring System, Player Interaction and more.",
        "Learn Blueprint Interface, Timers, Custom Events, Functions, and Macros in detail.",
        "Advanced and exciting Gameplay Actions, Player Abilities, Spells, Cooldown System and more.",
        "How to properly Package your Game (.exe) using Project Launcher and reduce file size.",
        "After completing this course you will replace 90% of your Blueprints !"
      ],
      "course_content": {
        "Project Intro and Setup": [
          "Course Preview and Welcome",
          "Creating a New Project",
          "Download Free Assets",
          "Why this Course is special ?"
        ],
        "NEVER use these Blueprints": [
          "Avoid using \"Cast To\" node!",
          "Avoid using \"Event Tick\" node!",
          "Why \"Delay\" node is bad?",
          "Never use \"Delay\" node - Use Timers Instead",
          "Avoid using \"Get All Actors of Class\" node!",
          "Avoid using \"Bind Event\" in Widgets!"
        ],
        "Player Abilities": [
          "IMPORTANT - PLEASE READ",
          "Player HUD",
          "Player Input",
          "Player Health ( Custom Events )",
          "Player Health ( Functions )",
          "Player Health ( Blueprint Interface )",
          "Heal Damage Player using one Blueprint",
          "Damage/Heal Player Overtime ( Timers )",
          "Blueprints Cleanup",
          "Walk/Sprint ( Macros )",
          "Player Dead",
          "Dash + Cooldown HUD",
          "Adding Arrow Component ( Blink Location )",
          "Blink Ability",
          "Checking Assets File Size",
          "Time Slow/Stop + Cooldown",
          "Player Projectile",
          "Destroy Objects With Projectile",
          "Projectile Additional Optimization"
        ],
        "Gameplay Actions": [
          "Game Timer",
          "Pickup Items ( Key )",
          "Creating Sliding Doors",
          "Conditional Door ( Key Needed )",
          "Moving Platforms",
          "Portals ( Teleport Player )",
          "Enemy Projectile + AOE Damage",
          "Enemy Tower",
          "Scoring System ( Pickups )",
          "Jump / Launch Pads",
          "Treasure Chest + Items Drop"
        ],
        "Game Packaging and Shipping (.exe)": [
          "Project Launcher"
        ],
        "Continue your Gamedev Journey": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You must have installed Unreal Engine 4 or 5 (we will start programming immediately).",
        "You should know how to move around in the Viewport.",
        "You can use Unreal Engine 4 or 5 for this Course.",
        "No prior programming knowledge is required, but it can be beneficial."
      ],
      "description": "In this course you will learn how to make games using Unreal Engine 4/5 without writing any lines of code.\nYou will learn how to use the powerful Visual Scripting Language: Blueprints.\nThis course is created for Beginners and Advanced Students.\nThe goal for this course is to ensure that you will understand how each and every Blueprint works, so I am explaining every lesson in great detail with a lot of repetition.\nThe techniques you are going to learn in this course will help you build your own unique gameplay actions and player abilities for any type of game such as Third Person Shooter, First Person Shooter, TopDown, SideScroller, RPG or any other type.\nAfter completing this course you will be able to:\nUnderstand how Blueprints work\nCreate an exciting and cool Gameplay Actions\nCreate unique Player Abilities with a Cooldown system\nCreate a game with powerful and optimized Blueprints\nDetect, reproduce and FIX common errors during programming\nIn this course I will explain why some of the commonly used Blueprints can be bad for your game, such as:\nCasting ( e.g. \"Cast To Third Person Character\" )\nEvent Tick\nEvent Bindings ( in Widget Blueprints )\nDelay\nGet All Actors of Class\nYou are not going to just follow the videos and copy what I'm doing, but you will actually understand how everything works, so after finishing this Course you will be able to program with Blueprints on your own, with a very little to no help from other Tutorials.",
      "target_audience": [
        "Beginners who want to learn how to create games the proper way, using optimized Blueprints.",
        "Students who want to improve their Blueprints to a higher level.",
        "Students who wants to create any size of games, big or small.",
        "Intermediate or Expert Students will benefit from this course.",
        "Students who want to learn how to make games, but don't know or don't want to write lines of code."
      ]
    },
    {
      "title": "Godot 4: Build an Action Combat RPG",
      "url": "https://www.udemy.com/course/godot-rpg/",
      "bio": "Master 3D RPG creation in Godot: build attacks, levelling, gear systems, animated combat, light environments and more",
      "objectives": [
        "Build a feature-packed 3D RPG in Godot that’ll make players want to grind all day.",
        "Create character stats and levelling systems that feel rewarding and satisfying.",
        "Develop gear systems with weapons and armour that change stats and appearance.",
        "Tackle lighting and global illumination to make your game world truly shine.",
        "Design smooth animations with state machines for attacks and movement.",
        "Use custom resources to manage player data and keep everything neat behind the scenes.",
        "Craft a user interface that’s slick, intuitive, and updates with every player action.",
        "Dive into advanced scripting with lambda functions for smarter, leaner gameplay."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome to the Course",
          "Creating the Project",
          "Creating the Player",
          "Scripting Movement",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Movement and Camera Controls": [
          "Section Intro: Movement & Camera Controls",
          "The SpringArm3D Node",
          "Handling Mouse Motion",
          "Handling Complex Rotations",
          "Transform Interpolation",
          "Relative Motion",
          "Adding Assets"
        ],
        "Animating the Player": [
          "Section Intro: Animating the Player",
          "Adding Rigged Characters",
          "Interpolating the Rig",
          "Importing Animations",
          "Controlling an AnimationTree",
          "Animating Weights",
          "AnimationTree Playback",
          "The BoneAttachment3D Node",
          "Attacking Motion",
          "Organizing the physics process",
          "Attaching a RayCast3D"
        ],
        "Making Enemies": [
          "Section Intro: Making Enemies",
          "Enemy Setup",
          "The HealthComponent",
          "Damaging the HealthComponent",
          "Defeat and the ShapeCast3D",
          "Heavy Attacks",
          "Dealing Damage in an Area",
          "Player Defeat",
          "Player Heavy Attacks",
          "Adding a Dash",
          "Dashing Motion",
          "Dashing Physics Frame",
          "Dashing Particles",
          "Fixing Rig Edge Cases"
        ],
        "RPG Stats": [
          "Section Intro: RPG Stats",
          "CharacterStats Resource",
          "Inner Classes",
          "Percentile Lerp",
          "Levelling Up",
          "Experience Points",
          "Applying Ability Modifiers",
          "Critical Hits",
          "Damage Numbers",
          "The VFXManager",
          "HP and Endurance",
          "Additional Ability Modifiers"
        ],
        "User Interface": [
          "Section Intro: User Interface",
          "UI Setup",
          "Updating the Info Bar",
          "Progress Bars",
          "Updating the Health Bar",
          "The Inventory Menu",
          "Pausing the Game",
          "Displaying Attributes",
          "Character Sheet Updates",
          "Character Preview"
        ],
        "Enemy Navigation": [
          "Section Intro: Enemy Navigation",
          "Adding a NavigationRegion3D",
          "Navigation Agents",
          "Pursuit and Avoidance",
          "Chase Animations",
          "Enemy Defeat and Gear"
        ],
        "Graphics and Aesthetics": [
          "Section Intro: Graphics & Aesthetics",
          "Building a Castle",
          "Environment and Illumination",
          "Floors and Horizons",
          "Final Decorations",
          "Graphical Project Settings"
        ],
        "Items and Inventory": [
          "Section Intro: Items & Inventory",
          "Item Icons",
          "Inheritance",
          "Shield and Armor Icons",
          "Loot Containers",
          "Interacting With Loot Containers",
          "Interaction Feedback",
          "Showing Chest Contents",
          "Reparenting Icons",
          "Renaming and Dependencies",
          "Dynamically Connecting Signals",
          "Collecting Gold",
          "Equipping Weapons",
          "Finding Equipment Stats",
          "Armor and Shields",
          "Damage Calculations",
          "Equipment Meshes",
          "Armor Replacement"
        ],
        "Preserving State": [
          "Section Intro: Preserving State",
          "Passages",
          "Scene Transitions",
          "Castle Level",
          "Decorating the Castle",
          "Persistent Data",
          "Caching Gear",
          "Caching Gold and Health",
          "Changes For Play",
          "Wrap Up"
        ]
      },
      "requirements": [
        "As this is a beginner-to-intermediate level course it'd be helpful for you to understand the Godot editor and 3D positioning and interacting with the 3D editor. Also some familiarity with composing scenes and scripts in the Scene Tree would be beneficial.."
      ],
      "description": "Ever dreamed of creating your own epic 3D role-playing game? Now’s your chance!\nJoin us as we guide you through building a large-scale RPG in the Godot engine. You’ll learn to bring your ideas to life, levelling up your dev skills in the process.\nWe’ll start with the essentials and tackle the fun stuff: crafting attacks, abilities, and a levelling system to make your player character truly shine. By the end, you’ll have a fully playable RPG, complete with gear, enemies, and jaw-dropping environments.\nBuilding a game this size sounds intimidating, right? No worries! We’ll guide you step-by-step to create a fully-fledged RPG in Godot, from scratch. You’ll also learn the secret sauce behind pro-level Godot skills.\nEver wondered how to make your character stronger across levels? We’ll teach you how to use resources to manage player stats and create that satisfying \"level-up\" feeling players crave. Power up your skills and your hero at the same time!\nRPGs are all about killer gear. You’ll master inventory systems, item equipping, and weapon damage. Plus, you’ll make sure players can see their hero evolve with each shiny new sword or piece of armour they equip.\nAnimations bringing the game to life? Check! We’ll dive into animation trees and state machines, so your characters don’t just move—they flow. Hook animations into gameplay to make every attack and action feel impactful.\nFrom bone attachments to global illumination, we’ve got your back with advanced techniques that will make your RPG not just playable but downright gorgeous. Make those levels pop with lighting that wows even the pickiest players.\nStuck on complex interfaces? We’ll teach you how to create dynamic UIs that update with player actions—whether it’s equipping items or tracking stats. Build interfaces players love to use.\nThis course is perfect for intermediate Godot devs or anyone who’s taken our Complete Godot 3D course. If you know the editor and can set up scenes, this is your chance to level up.\nStuck? Never fear. You’ll have access to a supportive community and a crack team of teaching assistants. Whether you’re debugging or dreaming up your next feature, you won’t be on this journey alone.\nThe Godot engine is blowing up (not literally!), and now’s your chance to jump on in. Grab your keyboard, your imagination, and maybe a cup of tea—it’s time to get creating. See you in the course!",
      "target_audience": [
        "If you're a Beginner-Plus Godot user looking for a bigger project you're in the right place.",
        "Taken our Complete Godot 3D course and looking to level up? This is the course for you",
        "This course is also ideal for you if you've worked on a 3D Godot project and want something new to get your teeth into."
      ]
    },
    {
      "title": "Unreal engine 5:Advance locomotion system ALS (Intermediate)",
      "url": "https://www.udemy.com/course/unreal-engine-5-advance-locomotion-system-als-intermediate/",
      "bio": "Intermediate course for Having advanced animations for triple A advance locomotion system or ALS with Advance UI and PCG",
      "objectives": [
        "Advancer locomotion system",
        "PCG",
        "Distance matching",
        "Sync groups",
        "Link animations",
        "Advance UI",
        "AI"
      ],
      "course_content": {
        "01.Project Setup ( Beginner )": [
          "Introduction",
          "01.Create Blank project",
          "02.Import character"
        ],
        "02.Blueprint communication ( Intermediate )": [
          "03.Gamemode and character class",
          "04.Animation blueprint",
          "05.Blueprint casting",
          "06.Blueprint Interface",
          "07.Property access"
        ],
        "03.Idle Animations ( Pro )": [
          "08.Import Animations",
          "09.Enhanced input",
          "10.Equiped gun enum",
          "11.Pass equipedGun to animation blueprint",
          "12.State machines and shared rules",
          "13.Blend poses",
          "14.Blend poses by enums",
          "15.Dynamic sequence with blend inertialization"
        ],
        "04.Linked animations ( Pro )": [
          "16.Animation layers",
          "17.Animation layer interfaces",
          "18.Link anim class",
          "19.Animation blueprint childs",
          "20.Inertilize blending"
        ],
        "05.Organizing our work ( Beginner )": [
          "21.Be more Organize"
        ],
        "06.Character movement ( Beginner )": [
          "22.Look Around enhanced input",
          "23.Movement enhanced input",
          "24.Character movement"
        ],
        "07.Cycle Animation Part01 ( Intermediate )": [
          "25.Import animations",
          "26.Move forward animation",
          "27.Aiming enhanced input",
          "28.Use structs and enums for character movement data",
          "29.Use maps for gate setting",
          "30.Update gate function",
          "31.Recieve current gate in animation blueprint",
          "32.Belnd posses with gates",
          "33.Use layer interfaces for cycle",
          "34.Get base animation blueprint in layer blueprint",
          "35.cycle on update",
          "36.Select animation for cycle",
          "37.Edit selection in property matrix"
        ],
        "08.Debug Options ( Intermediate )": [
          "38.Debug a Enumaration variable",
          "39.Debug a float value",
          "40.Draw debug arrow",
          "41.Debug draw vector function",
          "42.Debug draw vector string",
          "43.ALS Debug system",
          "44.Slow mode"
        ],
        "09.Cycle animation Part02 ( Pro )": [
          "45.Calculate velocity Locomotion Data",
          "46.Debug velocity Locomotion Data",
          "47.Create calculate locomotion direction function",
          "48.Going backward calculation",
          "49.Going forward calculation",
          "50.Going right and left Calculation",
          "51.Make calculate direction function more modular",
          "52.Direction deadzone",
          "53.Forward Dead zone",
          "54.Backward Dead zone",
          "55.Right Dead zone",
          "56.Left Dead zone",
          "57.Select animations with directions",
          "58.Select animations with structs",
          "59.Stride Warping",
          "60.Orientation warping"
        ],
        "10.Lean animations ( Intermediate )": [
          "61.Import animations",
          "62.Lean blend space",
          "63.Apply additive",
          "64.Calculate Lean angle",
          "65.Lean for backward animation"
        ]
      },
      "requirements": [
        "It is beginner friendly but it is better to watch at least one beginner course"
      ],
      "description": "Have you ever wondered why your game animations don't quite reach the polished level of AAA titles like Alan Wake 2? It's all about the system behind the scenes called ALS, or Advanced Locomotion System.\nIn this course, we delve into the intricacies from the ground up, starting with idle animations. We progress through cycle animations, utilizing the latest features of Unreal Engine to ensure seamless transitions with precise distance matching. Additive animations bring a natural sway to characters while walking or jogging.\nPivot animations enhance the fluidity of sudden direction changes, followed by a deep dive into turn-in-place systems for lifelike motion. We cover crouching mechanics, master jumping animations for smooth execution, and synchronize all movements seamlessly with sync groups.\nMoving onto firearm mechanics, we employ layered systems for organized code, coupled with advanced foot tracing techniques for realistic ground interaction. Weapon animations, including reloading and firing sequences, are meticulously crafted.\nAudio immersion is key, adjusting footstep volume dynamically based on character speed, while visual effects like impact reactions and muzzle flashes add depth to the experience. UI elements, inspired by modern designs, provide vital information about ammunition and health status.\nPickup systems are modularized for flexibility, while landscape and procedural content generation are explored in-depth. Meet the formidable Kraken enemy, boasting a variety of attacks and behaviors.\nBut mastering these techniques isn't without guidance. Learn advanced debugging methods, from visual aids like arrows to blueprint organization tricks. Join our vibrant Discord community, where myself and fellow enthusiasts, like Max, are on hand to offer support and insight.\nEmbark on this journey with us and unlock the secrets to elevating your game animations to AAA standards. Let's begin together",
      "target_audience": [
        "Everyone interested in creating games"
      ]
    },
    {
      "title": "Unity Shader Graph: Create Procedural Shaders & Dynamic FX",
      "url": "https://www.udemy.com/course/unity-shader-graph-procedural/",
      "bio": "Use Unity Shader Graph to dynamically generate water, fire, smoke, footprints in the snow and more.",
      "objectives": [
        "Create procedural textures that add depth and realism to your environments",
        "Design custom lighting effects that illuminate your scenes with stunning precision",
        "Develop unique visual effects that enhance gameplay and engage players",
        "Explore advanced shader techniques to push the boundaries of visual storytelling"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome to the Course",
          "Installing Unity",
          "My First Shader",
          "Community & Support",
          "Accessing Our Projects",
          "Scrolling UVs",
          "Sub Graphs"
        ],
        "Wind": [
          "Section Intro - Wind",
          "Simple Displacement",
          "Normal Displacement",
          "Linear Waves",
          "Noise Displacement",
          "Wind",
          "Advanced Wind"
        ],
        "Fire & Smoke": [
          "Section Intro - Fire & Smoke",
          "Fire",
          "Moving Fire",
          "Smoke",
          "Embers",
          "Pulsing and Masking Embers",
          "Considering Different Input Geometry"
        ],
        "Moss": [
          "Section Intro - Moss",
          "Moss",
          "Triplanar Mapping UV",
          "Directional Moss Accumulation"
        ],
        "Snow": [
          "Section Intro - Snow",
          "Snow",
          "Height Deformed Snow",
          "Dynamically Deformed Snow",
          "Sparkling Snow"
        ],
        "Water": [
          "Section Intro - Water",
          "Two-Color Depth Fade",
          "Foam",
          "Refraction",
          "Noisy Normals",
          "Simple Wave Displacement",
          "Noise Wave Displacement",
          "Making it all Look Good",
          "Course Wrap-up"
        ]
      },
      "requirements": [
        "Some basic Unity knowledge, such as how to navigate the editor, create objects, and assign materials, would be beneficial."
      ],
      "description": "Master the Art of Unity Shader Graph: Your Gateway to Breathtaking Visuals!\nEmbark on a transformative journey into the world of Unity Shader Graph, the revolutionary tool that allows you to unlock the door to creating stunning visual effects for your games.\nOur comprehensive online course, crafted by industry experts, shows you how to master this powerful technology and level up your game dev skills.\nWith Shader Graph, you'll gain the ability to:\nCraft realistic and captivating materials that bring your game environments to life\nDesign mesmerising lighting effects that immerse players in your world\nCreate dynamic and responsive visual effects that enhance gameplay\nPush the boundaries of visual storytelling with advanced shader techniques\nTailored for beginners and experts alike! Whether you're a budding game developer eager to expand your skillset or an experienced professional seeking to refine your shader expertise, our course is designed to cater to your needs.\nOur engaging and interactive learning platform provides an immersive learning experience, featuring:\nHigh-quality video tutorials that guide you through each concept step-by-step\nHands-on practical exercises to solidify your understanding\nReal-world project-based learning to apply your newfound skills in a practical setting\nUnleash your creativity with Shader Graph, take the course and get the power to:\nCreate procedural textures that add depth and realism to your environments\nDesign custom lighting effects that illuminate your scenes with stunning precision\nDevelop unique visual effects that enhance gameplay and engage players\nExplore advanced shader techniques to push the boundaries of visual storytelling\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAnd you’ll get access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nJoin us on this immersive journey into the world of Unity Shader Graph and unlock a world of possibilities!",
      "target_audience": [
        "Perfect if you're an absolute shader beginner!",
        "Also ideal if you're looking to enhance your knowledge of game development into the VFX / shader realm."
      ]
    },
    {
      "title": "Practical OpenGL and GLSL shaders fundamentals with C++",
      "url": "https://www.udemy.com/course/opengl-and-glsl-fundamentals-cpp/",
      "bio": "Master the OpenGL and GLSL shading language - by writing code! Illustrated theory and practice (from basics to advanced)",
      "objectives": [
        "Learn OpenGL and GLSL",
        "Explore the modern rendering pipeline and shaders",
        "Feed the vertex data - to buffers (VBO) and setup the buffer formats",
        "Play with Shaders and GLSL",
        "Make fun procedural computer graphics",
        "Learn 3D transformations: rotation, scale and perspective projection",
        "Load and draw textures (sprites)",
        "Render the 3D geometry"
      ],
      "course_content": {
        "OpenGL basics": [
          "Computer graphics 101 and course introduction",
          "Intro to the OpenGL API",
          "MacOS setup of the GLFW helper library",
          "Windows setup of the GLFW helper library",
          "Basic GLFW & OpenGL app setup"
        ],
        "Rendering and geometry": [
          "Drawing a circle procedurally",
          "2D point rotation",
          "More on 2D transformations",
          "Stack of matrices"
        ],
        "Shaders and GLSL": [
          "Intro to shaders",
          "The rendering pipeline and shaders",
          "GLSL, shaders attributes and geometry VBOs",
          "Multiple VBOs and geometry, winding directions, etc",
          "Vertex array objects (VAOs) and RAM buffers",
          "Procedural graphics inside the shaders",
          "Bonus: homogenous coordinates"
        ],
        "Textures": [
          "Drawing a textured rectangle (sprite)",
          "Loading a texture from the BMP file"
        ],
        "3D rendering": [
          "Rotating the Cube",
          "Adding the GLM math library",
          "Texturing the cube",
          "Perspective projection"
        ]
      },
      "requirements": [
        "Basic C++ knowledge (Visual studio, XCode)",
        "No prior OpenGL or CG knowledge is required!"
      ],
      "description": "Welcome to the OpenGL, GLSL and computer graphics course!\nIt is practical and illustrated program, designed to give you a visual intuition and practical skills to program computer graphics using OpenGL, GLSL and C ++\nIt is raw concentrated squeeze of OpenGL and GLSL knowledge (no \"water\"! no long talks that make you fall asleep)\nThe course is designed to start from fundamentals - and move to advanced topics like shaders, matrices, transformations, GLSL language, raster effects, texturing and shading.\nIn fact, the course is very easy to master. Because it is practical, visually illustrated and has code samples and live coding sessions.\nIt's created to help you develop the visual intuition about 3D programming models (so I developed some beautiful illustrations and   visualizations - just to show you how things work \"under the hood\")\nIt will help you to build the proper mental models, patterns, and coding skills - to grasp the underlying concepts and internal elegancy of OpenGL machinery, as well as 3D math (because they're tricky)\nThere are live coding sessions and you get the full access to the source code\nThe course covers all important topics of modern OpenGL, such as:\n- geometry, and buffers, VBOs and VAOs\n- transformations and matrices, matrix hierarchy\n- shaders and GLSL\n- procedural art (and GLSL shaders-generated images)\n- texturing\nSo feel free to explore it and I hope you'll enjoy it just as I did during its creation",
      "target_audience": [
        "Computer Graphics students",
        "OpenGL game developers",
        "Computer graphics enthusiasts",
        "Game developers"
      ]
    },
    {
      "title": "Unity DOTS Fundamentals - Making a full game with ECS",
      "url": "https://www.udemy.com/course/unitydotsfundamentals/",
      "bio": "Learn how to make a full game with Unity ECS and DOTS Physics",
      "objectives": [
        "Unity DOTS",
        "Unity ECS",
        "Unity DOTS Physics"
      ],
      "course_content": {
        "Introduction": [
          "Game Preview",
          "Changes in Unity 2020.1",
          "Introduction"
        ],
        "Basic movement with ECS": [
          "Creating Components and Systems",
          "Responding to player inputs"
        ],
        "Unity DOTS Physics with ECS": [
          "DOTS Physics Colliders and Rigidbodies",
          "Creating an enemy AI with Raycasting"
        ],
        "Handling Damage and Collision with ECS and DOTS Physics": [
          "Collision Events and Dynamic Buffers",
          "Creating the Damage System"
        ],
        "Creating Collectable and dealing with Game State": [
          "Creating the Collectable System",
          "Monitoring the world with EntityQueries"
        ],
        "Hooking in to UI and Prefab Instantiation with Spawners": [
          "Creating an Enemy Spawner"
        ],
        "Handling Audio and Camera movement": [
          "Package Updating, and Camera System corrections",
          "Creating a Camera System and an Audio System",
          "Making a generic Follow System and using it with the Camera"
        ],
        "Finishing our game": [
          "Level Management",
          "Handling Win and Lose Conditions",
          "Finishing Up"
        ],
        "Extras": [
          "Subscenes and fixing a few bugs",
          "Dots Animation Source"
        ]
      },
      "requirements": [
        "Intermediate experience with the Unity 3D Engine"
      ],
      "description": "Unity DOTS Fundamentals teaches you how to use the technologies powering the future of Unity development, the Unity Data Oriented Tech Stack.\nIn this course we make a full game using the the Entity Component System (ECS) and Unity DOTS Physics, we'll go over every line of code and learn how to use these future technologies TODAY!\nGeared towards intermediate Unity developers will little to no experience with Unity ECS\nSIX Hours of content\nLearn how to make the most of modern day multi core processors on desktop and mobile\nGet ahead of the pack and learn ECS before everyone else\nBecause of the preview nature of some of these packages. you can expect bonus videos going over changes when we hurdle towards ECS 1.0.",
      "target_audience": [
        "Intermediate Unity developers with an interest in cutting edge Unity tech"
      ]
    },
    {
      "title": "Unity2D Professional Development From A to Z Build 10 Games",
      "url": "https://www.udemy.com/course/unity3d-professional-2d-game-development-from-a-to-z/",
      "bio": "Complete Guide to Design, Build, Monetize and Publish Professional Games Using Unity for iOS & Android.",
      "objectives": [
        "Game Design and colors branding trends.",
        "Unity3D Development Fundemantals.",
        "Design Complete Professional Unity3D Storyboard Game.",
        "Build Your Android Version of the game.",
        "Build Your IOS Version of the game and XCode Integration.",
        "Build And Sell Your Own Unity3d Package to Unity Asset Store.",
        "Work with all types of screens (splash, about us, settings, reset, stages, levels, in game, upcomming).",
        "Work with all types of dialogs (pause,timeout,win,lose,exit,confirmation,3 stars).",
        "Configure game shared preferences storage to store user playing records.",
        "Restart the game to factory settings.",
        "Publish the game to Google Play Store.",
        "Publish the game to Unity Asset Store.",
        "Publish the game to Apple IOS Store.",
        "Discover the mobile apps monetization methods.",
        "Integrate and monetize your game with ads.",
        "Get thousands of free app installs and traffic to your games."
      ],
      "course_content": {
        "Introduction": [
          "Whats New in This Course?",
          "What Does The Course Cover?",
          "Source Code and Important Notes"
        ],
        "Prepare your environment": [
          "Install Unity and Photoshop",
          "Notes about the software"
        ],
        "Get started with Unity and C#": [
          "Introduction to Abstract Thinking and GameObject",
          "How to Create Multiple Game Objects with instantiation",
          "Create First Project and Explore Unity Environment",
          "Create Basic Hello World Application with a Button Click",
          "Change Color State of Button From Serialized Field Based on Button Click",
          "Variables and States, Scope of Variables, Comments",
          "Hierachy Browser, Function Argument, if else Statements",
          "Reference Parent and Child Game Objects and Components",
          "Scope of if statement, return type and void, private and public methods",
          "Function Call Another function, string Concatenation, Get function Result",
          "Passing String Value From UI To Code, Playmode tint",
          "Passing GameObject as a function Argument From UI To Code",
          "Prefabs and Reusability",
          "Getting Objects, Tags, Arrays, Loop",
          "Click to Navigate between Scenes from Build Settings Name"
        ],
        "Design the game objects": [
          "Design the player, background, coins, Obstacles."
        ],
        "Game Core Development": [
          "Create new project and importing sprites",
          "Adding the player and its animation",
          "Adding the game objects and the background",
          "Adding colliders and rigidbody to the game objects",
          "Adding game and player attributes and sounds effects",
          "Add movement to the player and understand isGrounded",
          "Add Score collision detection and score text mesh",
          "Extend and move the world and work with deadzones",
          "Some Notes About Next Two Lectures",
          "Adding Custom Jump Animation with Transition Parameters",
          "Scripting the Jump Animation States with Time Delay",
          "Adding winning checkpoint",
          "You Decide whats next!"
        ],
        "Design Game Manager Layout": [
          "What we are going to build in this section.",
          "Download images used to develop the game manager",
          "Create project and import sprites",
          "Create responsive panels",
          "Design the main panel",
          "Design bottom and top panels"
        ],
        "Advance Screen UI Design, Classes": [
          "Vertical and horizontal layout",
          "Download lecture resources",
          "Add action to buttons, drag and drop",
          "Add buttons listener via script",
          "Download lecture resources",
          "Permanent Storage and Player Preferences",
          "JSON and Serialized Levels",
          "Get Object from JSON",
          "Maintain Player Preferences with JSON",
          "Download lecture resources",
          "DataRoot and Table Saving",
          "Download lecture resources"
        ],
        "Game Storage Manager": [
          "Create Storage Manager",
          "Default Levels Data Method",
          "Save and Read Levels Data",
          "Initialize different status for level",
          "Link Item to level.",
          "Bind level with stored data",
          "Unlock level on button click",
          "Apply data once level is loaded",
          "Lock, Unlock, Reset and Control Stars",
          "Download lecture resources"
        ],
        "Pokemon Game Slider": [
          "Design the slider panels",
          "Download lecture resources",
          "Add slider item, Mask, Scroll Rect",
          "Get width of slide item",
          "Download lecture resources",
          "Dynamic slider recttrasnsform",
          "Manual Slide the slider",
          "Download lecture resources",
          "Activate slider animation with a button click",
          "Download lecture resources",
          "Adjust canvus to the world space",
          "Download lecture resources"
        ],
        "Bind Slider, Menu levels Control": [
          "Get slides inside the script",
          "Bind slides from storage",
          "Download lecture resources",
          "Levels menu and sub level navigation",
          "Download lecture resources"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity3D.",
        "A copy of Unity3D 4.5 or higher, available free.",
        "Adobe Photoshop, available free."
      ],
      "description": "** Updated October-2016 **\nUnity Professional 2D Game Development Plus 7 Games Projects!\n\nIn this course you are going to design, develop, publish and monetize a complete game with 36 level and different stages with a complete story board using Unity3D UI KIT, the name of this game is \"Flaty Box\", This course compatible with Unity 4.x and Unity5.\nNOTE: MORE THAN 400$ ASSETS AND RESOURCES COMES WITH THIS COURSE!.\nYou are going to get 7 Projects worthy over $400 once you register in the course:\nFlaty Box Game\n\nUnity StoryBoard UI KIT ($75)\n\nDraw-on-screen (50$)\n\nStickers 2d (35$)\n\n3 STARS WINING DIALOG (35$)\n\nAndroid ML App + Course ($199)\n\nClony Bird Game\n\nClony Bird Game Manual\n\n\nThis course is unique in its content and the first in its kind; It's a complete project-based process to build a complete 2D game using Unity3D from A to Z. We start building the game from the ground up with a clear step by step lessons without jumping. We cover everything related to the design and development for this game starting from the design in Photoshop and choosing color palette then moving to development, configuration and integration with the professional UI KIT tools with all different components and screens and dialogs and testing of the game using Unity3D in order to let you develop a professional game with attractive user interface not in weeks or months but within a matter of few hours.\nWe guide you in details how to design the listing and publish the game on Google Play Store, Apple iOS Store and on Unity Asset Store which is one of the hottest markets on the web.\nThe Following features are supported in this game :\nSupports PC, Mac, Linux, iOS and Android.\nResponsive UI.\nScripting is based on C#.\nBeautiful graphics & Sound Effects !\nIncludes Scrollable Grid for stages and levels .\nPlayer references (Save,Load,Reset) on local files.\n\n\nGame Storyboard UI KIT will make you forget the UI part when you are creating 2D/3D game. It's using the last Unity features like Sprites, Animation with complete storyboard for your game with all required screens and dialogues.\nUnity is on the top of the develop-once distribute-many platforms and it is really an awesome one-stop-shop platform and game engine for games, that is why we choose it as development platform.\nCourse Preparation Team:\nAhmad Naser\nBaraa Nasser\nAsma Hammad",
      "target_audience": [
        "Game Developers",
        "Game Designers",
        "Non-Programmers",
        "Beginners",
        "Android Developers",
        "IOS Developers"
      ]
    },
    {
      "title": "Modern OpenGL C++ 3D Game Tutorial Series & 3D Rendering",
      "url": "https://www.udemy.com/course/opengl-tutorials/",
      "bio": "Learn modern OpenGL that underpins most new games, game engines and 3D rendering applications.",
      "objectives": [
        "Program in Modern OpenGL",
        "Understand gaming constructs/concepts",
        "Ability to create a game engine",
        "Ability to create a game"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "SETUP": [
          "READ ME BEFORE SETTING UP",
          "GLFW & GLEW Windows (Absolute Linking) Setup",
          "GLFW & GLEW Windows (Relative Linking) Setup",
          "GLFW & GLEW Mac Setup",
          "SDL & GLEW Windows (Absolute Linking) Setup",
          "SDL & GLEW Windows (Relative Linking) Setup",
          "SDL & GLEW Mac Setup",
          "SFML & GLEW Windows (Absolute Linking) Setup",
          "SFML & GLEW Windows (Relative Linking) Setup",
          "SFML & GLEW Mac Setup",
          "GLM Windows Setup",
          "SOIL Windows Setup"
        ],
        "GETTING STARTED": [
          "Drawing A Triangle",
          "Shader Files",
          "Textures",
          "Transformations",
          "Projections and Coordinate Systems",
          "Camera"
        ],
        "LIGHTING": [
          "Colours",
          "Basic Lighting",
          "Materials",
          "Lighting Maps",
          "Directional Lights",
          "Point Lights",
          "Spot Light",
          "Combining Directional, Point and Spot Lights"
        ],
        "MODEL LOADING": [
          "Assimp Windows Setup",
          "Assimp Mac Setup and Mesh Class",
          "Assimp Model Class & Loading A Model"
        ],
        "ADVANCED": [
          "Cubemapping/Skybox"
        ],
        "Extra OpenGL Resource Links": [
          "OpenGL Homepage",
          "Learn OpenGL by Joey de Vries",
          "Open.gl",
          "NVIDIA OpenGL Developer Portal",
          "OpenGL-Tutorials",
          "The Legend That Is NeHe Productions",
          "OGL dev",
          "Fallout Software Game Development Tutorials",
          "Anton's OpenGL Tutorials",
          "Lazy Foo Tutorials"
        ],
        "Porting To Mobile Platforms With OpenGL ES": [
          "Khronos OpenGL ES",
          "Android OpenGL ES Developer Portal",
          "Apple OpenGL ES Developer Portal",
          "Learn OpenGL ES",
          "OpenGL® ES 3.0 Programming Guide - Book Website",
          "iOS OpenGL Guide"
        ],
        "Porting OpenGL To The Web Using WebGL": [
          "Getting Started With WebGL",
          "Mozilla Developer Network - WebGL",
          "Chrome WebGL Experiments",
          "Learning WebGL",
          "WebGL Samples",
          "WebGL Fundamentals",
          "WebGL HTML5 Rocks",
          "WebGL Game Development Tutorials",
          "WebGL Academy",
          "WebGL Tutorials Point",
          "WebGL Essentials"
        ],
        "Beyond OpenGL, Enter Vulkan": [
          "Khronos Vulkan",
          "NVIDIA Vulkan Developer Portal",
          "Vulkan Tutorials",
          "Overview Of The Vulkan API",
          "Uncovering The Secrets of Vulkan by Intel",
          "Vulkan Quick & Easy"
        ]
      },
      "requirements": [
        "Understand the fundamentals of C++ Programming",
        "Basic mechanics in modern games"
      ],
      "description": "Learn about the fundamentals that make the awesome games we play and the game engines behind them. A step by step process is used to show everything from setting up to essential Modern OpenGL features.\nGain a good understanding of the following concepts:\nSetting Up on Windows and Mac using GLFW, SDL and SFML\n2D Drawing\n3D Drawing\nTexturing\nLighting\n3D Rendering\nShaders/GLSL\nModel Loading\nCube Mapping\nC++ Programming\nC++ Game Development\nOpenGL is the most popular graphics library in the world, most mobile games use OpenGL and many other applications as well.\nYou will be provided with the full source code to aid in development during and after this course. The source code is free to use in as many projects as you wish.\n\n\nOver 205,000 students have enrolled on my courses and all of them are extremely satisfied. You will also be satisfied with this course. If you do not like the course, remember that within 30 days you can request a full refund. I guarantee you satisfaction.\nIf you have any questions regarding the topics covered in this course, please feel free to ask. I'm always happy to help those who want to learn.\n\n\nTo summarise this is what you get:\n• Lifetime access to HD quality videos. No monthly subscription. Learn at your own pace, whenever you want.\n• All videos are downloadable. Learn wherever you want, even without an internet connection!\n• Downloadable starter code and final code for each section.\n• Free helpful support in the course Q&A when you have questions or get stuck.\n• Multiple coding challenges to practice your new skills (solutions included).\nSounds great? Then start this adventure today by clicking the “Take this course\" button, and join me in the only course that you will need!\n\n\n\n\n\"Based on LearnOpenGL\" by Joey de Vries as licensed under CC BY 4.0",
      "target_audience": [
        "This OpenGL course if for anyone looking to learn the inner workings of games and game engines.",
        "Anyone looking to move from Immediate Mode to Modern OpenGL"
      ]
    },
    {
      "title": "Internet of Things using Augmented Reality in Unity IoTAR",
      "url": "https://www.udemy.com/course/internet-of-things-using-augmented-reality-and-unity-iotar/",
      "bio": "Learn State of the Art Practical Augmented Reality Internet of Things IoTAR using Vuforia and Unity on Particle Photon",
      "objectives": [
        "Lab 1 - Where we set up out Particle Photon and blink an LED over the Web.",
        "Lab 2 - You will learn the basics of Augmented Reality by setting up Vuforia within the Unity environment… from downloading it to installation, as well as licencing.",
        "Lab 3 - Forms the basis of IoTAR where we blend the boundaries of Internet of thing with Augmented Reality with a simple web dashboard in AR.",
        "Lab 4 - We look at how we can look at ordinary connected objects differently using AR. The thirsty plant project shows just that. It is like you have x ray vision and able to see the water level of plant.",
        "Lab 5 - We use a light dependent resistor or LDR to control the light intensity of an augmented reality camp fire.",
        "Lab 6 - is really cool. Using Multiple Targets in Vuforia, we are able to measure distance in 3D! The app we creating is called RulAR which can make 3D measurement seamless.",
        "Lab 7 - gives you the powers of looking into a 3d skeleton and visualising a heart beating in real time from a pulse heart rate sensor connected to your particle photon.",
        "Lab 8 - You can visualise the temperature of any liquid chromatically. This means if your drink is hot, you AR cup will appear red.",
        "Lab 9 - We visualise force in augmented reality on a gauge as a percentage of total force using a force sensitive resistor.",
        "Lab 10 - We use our particle photon to detect alcohol gas and augments your reality with emissions of virtual gas.",
        "Lab 11 - We move away from the particle photon by fetching weather data off the web. We are able to retrieve the weather in AR for almost any city around the world in real time."
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "Prerequisites for the Course - Bill of Materials",
          "How to Take this Course",
          "[NEW] Introduction to Augmented Reality and Vuforia Features"
        ],
        "Lab_1 - Web Controlled LED": [
          "Setup Your Particle Photon and Blink LED over Web_YT"
        ],
        "Lab_2 - Basic AR Cube App": [
          "Installing Unity and Vuforia",
          "Vuforia Update AR Camera Issue - IMPORTANT!",
          "Simple Augmented Reality Cube to Test Vuforia SDK in Unity",
          "Notes on Troublefree Unity-Vuforia Installation on Windows 10:",
          "[Course Update] - Answering Questions Blank White Texture and Image Database C",
          "Internet of Things Augmented Reality"
        ],
        "Lab_3 - Linking Particle Photon to Unity SDK": [
          "Linking Particle Photon to Unity"
        ],
        "Lab_4 - AR Thirsty Plant Moisture Sensor": [
          "Plant AR you Thirsty? - Water Level Sensor IoTAR - Visualizing Water Level",
          "Thirsty Plant Part 2",
          "Thirsty Plant Part 3"
        ],
        "Lab_5 - Light Intensity": [
          "Light controlled Campfire in Augmented Reality",
          "Review Lecture"
        ],
        "Lab_6 - 3D Distance- AR Measuring Tool": [
          "Rul-AR Augmented reality Measuring Tool"
        ],
        "Lab_7 - HeartRate Sensor AR Bloodflow": [
          "Augmented Reality HeartRate"
        ],
        "Lab_8 - Heat Sensor on Cup": [
          "Lab_8 - Heat Sensor on Cup"
        ],
        "Lab_9 - Measurement Force Scale": [
          "Force Sensitive Resistor in Augmented Reality"
        ]
      },
      "requirements": [
        "Enthusiasm for Augmented Reality",
        "PC/ Laptop that meets Unity SDK minimum requirements",
        "Important! - Unity 5.4.3 and Vuforia SDK (I show you how to install both for free)",
        "A Webcam (Can use an Android Phone as a webcam) - Logitech webcams work best",
        "Printer or Phone/Tablet to print out or display the AR marker",
        "Very Basic Unity Experience",
        "Important! - Particle Photon (Approximately $19)",
        "Important! - Sensors as prescribed in the Bill of Materials Lecture (Approximately $55)",
        "Important! - Unity Assets as prescribed in the Bill of Materials Lecture (Approximately $65)",
        "Basics of Vuforia from my Create Augmented Reality Apps using Vuforia in Unity Course if you are a Total beginner"
      ],
      "description": "Do you want to learn how to mix  Augmented Reality with Internet of Things (IoTAR) in Unity SDK?  Do you want to create the leading edge of technology and experience the future of holograms? Or want to take your Arduino Projects into Augmented Reality?\nThis is the only course of its kind that will teach  you all the fundamentals of the Augmented Reality and Internet of Things in the shortest time so that you can get started developing your own IoTAR Apps.\nI am an AR Developer with a Masters  Degree in Electronic Engineering. I have over 46'000 students on Udemy and over 62'000 subscribers on my YouTube Channel Augmented Startups.\nThis course is designed to help you understand the fundamentals of  Internet of Things and Augmented Reality using the Vuforia assets in Unity through practical  and easy to understand labs. This class covers these capabilities,  including getting started, Interfacing the Arduino Based- Particle Photon IoT Microcontroller with the magic of Augmented Reality.\nWe have designed this course so that you are able to interface any sensor to your IoT device and we show you what we think is the best way to visualize that data so that it makes sense when augmented into the real world.\nYou will learn all the fundamentals through practice as you follow along with the training.  Together we will build a strong foundation in IoT-AR in Unity SDK with this  training for anyone. This course will enable you to:\nGet started with the Particle Photon Development Kit.\nGet started in Unity and how to download the Vuforia SDK.\nCreate a simple AR dashboard that interfaces to your Particle Photon.\nOnce you have mastered the basics we go ahead and interface to sensors via IoT and bring them into AR.\nSee the water level of a plant in AR, almost like having x-ray vision.\nDim the intensity of virtual fire with a Photo cell.\nMeasure distance in 3-Dimensions with Multi-target detection (Really Cool!) .\nSee through a person's body and see their heart beating in real time Augmented Reality (Really Cool!).\nGauge force and gas on a AR meter as well gas emissions.\nSee the weather in Augmented Reality of almost any city in AR using JSON.\n[Vuforia 7] and Unity 2017.3\n[Vuforia 7] Ground Plane\n[NEW] Vuforia 8 and Unity 2020.1\n[NEW] Vuforia 8 Video Playback\n[NEW] Vuforia 8 VI-SLAM Fundamentals\n[BONUS] Vuforia 8 Export to Android Device\n\n\n[HUGE BONUS] Build your own AI Smart Glasses Project E.D.I.T.H. (Spiderman Far From Home)\nTraining Duration:\n5 hours\nApplications of Internet of Things and Augmented Reality IoTAR:\nAR business Cards\nAR Gaming\nEntertainment\nMedical\nMilitary\nIndustrial and Domestic Maintenance\nNavigation\nAdvertising and Promotional Content\nYou won't find a course like this anywhere on Udemy. Not only will you save on money but you will save on Time. You will receive a verifiable certificate of completion upon finishing the course. We also offer a full Udemy 30 Day Money Back Guarantee if you are not happy with this course, so you can learn with no risk to you.\nSee you inside this course\n*NB - Ensure you have all the required training material and tools before you start this course. See the Bill of Materials Lecture (free preview) for details. You are required to purchase beforehand Hardware (Particle Photon Microcontroller), Sensors and Unity Assets. This is to ensure a smooth learning experience for you.",
      "target_audience": [
        "This course is for those who want to learn Augmented Reality",
        "This course is NOT for people who are not willing to practice along. You won't learn by watching but rather by implementing the labs that I provide in this course.",
        "Beginners in Augmented Reality or Mixed Reality",
        "This course is implemented in Unity on Windows. Android or iOS deployment is not part of the scope of this course. However you can easily find tutorials on how to export your AR app to mobile Operating Systems"
      ]
    },
    {
      "title": "Unreal Engine 5 (UE5): Blueprints for Beginners",
      "url": "https://www.udemy.com/course/unreal-engine-5-blueprints/",
      "bio": "Learn the fundamentals of Unreal Engine 5 Blueprints. Code a small platformer game!",
      "objectives": [
        "Getting started with Unreal Engine 5 - overview and navigation.",
        "Fundamentals of Unreal Engine 5 Blueprints.",
        "Code a 3D platformer, including character creation, movement, spawn points, and level changes.",
        "Use what you have learned in your own Unreal Engine Blueprint game projects!"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Community Discord Server",
          "Downloading the Engine",
          "Creating the Project",
          "First Steps in Unreal Engine"
        ],
        "Blueprint Fundamentals": [
          "What are Blueprints?",
          "Setup & Blueprint Layout",
          "Execution Order"
        ],
        "Variables": [
          "What are Variables?",
          "Integer, Float & Byte",
          "Boolean",
          "Text, String & Name",
          "Vector",
          "Rotator",
          "Transform",
          "Variable Operators",
          "Branches & Conditioning",
          "Get & Set",
          "Variables Example"
        ],
        "Events, Functions & Macros": [
          "What are Events, Functions and Macros?",
          "Events",
          "Functions",
          "Macros",
          "Function & Macro Library",
          "Events, Functions & Macros Example"
        ],
        "Arrays": [
          "What are Arrays?",
          "Creating an Array",
          "Array Functions"
        ],
        "Execution Flow": [
          "What are Execution Flow Functions?",
          "Is Valid Check",
          "Sequence",
          "Flip Flop",
          "For Loop",
          "While Loop",
          "Do Once & Do N",
          "Gate & Multi Gate"
        ],
        "Enumeration": [
          "What are Enumerations?",
          "Creating an Enumeration",
          "Compare Enumeration",
          "Switch on Enumeration",
          "Enumeration Example"
        ],
        "Blueprint Classes": [
          "What are Blueprint Classes?",
          "Actor",
          "Pawn",
          "Character",
          "Player Controller",
          "Game Mode"
        ],
        "Blueprint Actors": [
          "What are Blueprint Actors?",
          "Creating a Blueprint Actor",
          "Spawn & Destroy Actor",
          "Scene Components",
          "Editable Variable & Expose on Spawn",
          "Overlap Events",
          "Actor Has Tag",
          "Get All Actors"
        ],
        "Blueprint Communication": [
          "What is Blueprint Communication?",
          "Casting",
          "Blueprint Interface",
          "Event Dispatcher"
        ]
      },
      "requirements": [
        "A computer capable of running Unreal Engine 5",
        "Interested in making games using Unreal Engine 5."
      ],
      "description": "Create high-quality games without a single line of code\nIf you are looking for a fast and powerful visual scripting system that can create any game you want, Unreal Engine Blueprints is your go to programming language. Use the same tools and principles AAA studios use in their Unreal Blueprint projects to create high-quality games. Everything is free.\nJump right into game creation with Unreal Engine 5 Blueprints\nThe beauty about Blueprint visual scripting is that it allows you to jump right into game creation, and gives you a great entry to game development, but at the same time can be a standalone as the case for many professionals. Game designers and artist use Unreal Blueprints to showcase their animations, user interfaces, and audio. Programmers and game developers use Blueprints to code whole games or prototypes, but can also be used in addition to C++.\nBy the end of this course, you will have learned the fundamentals of Unreal Engine 5 blueprints and coded a small platformer game with easy follow-along videos. You will be able to use what you have learned in character creation, movement, collision, spawn points, and level changes in your own UE5 Blueprint game project.\nMy name is Moustafa and I am the director and developer of Farmtale on Steam done only on Blueprints. With many years of experience within game development, I will be here for you every step of the way.\nThis course covers all you need to know about UE5 Blueprints to code your first game, including:\nVariables\nEvents, functions, and macros\nArrays\nExecution flow\nEnumeration\nBlueprint actors, classes, and communication\nLearn the best coding practice from a published Unreal Blueprint game developer\nAll code is not equal. There are many ways to develop games, some better for performance than others. Some code might even break. I will show you how to use different optimization tools to achieve game-ready performance.\nJoin our supportive and sharing community on Discord.\nSee you in lesson 1!\nI wish you the best,\nMoustafa Nafei",
      "target_audience": [
        "Complete beginners with no prior experience",
        "Game artists and designers who want to get into game programming",
        "Experienced developers who want to brush up their skills",
        "Visual learners who prefer visual over text-based code",
        "Programmers with C++ experience"
      ]
    },
    {
      "title": "Create Your 3D MOBA Game for Mobile Using Godot",
      "url": "https://www.udemy.com/course/create-your-3d-moba-game-for-mobile-using-godot/",
      "bio": "Learn the Basics of 3D Multiplayer Online Battle Arena Game Development Targeting Mobile Devices using Godot Engine",
      "objectives": [
        "Write a 100% server authoritative game using Godot",
        "Learn optimization techniques for 60fps performance on Mobile devices",
        "Build advanced movement and combat mechanics across a network",
        "Create a Lobby/Room based system for matchmaking (4-8 players)",
        "Learn anti-cheating methods and mechanisms",
        "Get familiar with advanced network lag compensation methods (Reconciliation, interpolation, clock synchronization)",
        "Import and manipulate 3D models and animations from Mixamo to Blender to Godot",
        "Build manageable server/client code base that can scale",
        "Learn how to use particle systems to create special effects"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Getting the 3D character and animations ready!": [
          "Using Mixamo and downloading animations",
          "Theory: Mixamo-Godot Pipeline",
          "[Add-on] Combining Mixamo Animations in Blender",
          "[New!][Manual] Combining Mixamo Animations in Blender",
          "Importing the Character into Godot",
          "Basic animations editing in Godot",
          "Introducing the AnimationTree node",
          "AnimationTree node part2"
        ],
        "Preparing the 3d Environment": [
          "Building the 3D stage",
          "Let the river flow! Intro to visual shader editor",
          "Adding Lights and Sky to the scene",
          "Adding Collision shapes to the stage",
          "Adding collision shapes to the character and making it unshaded"
        ],
        "Getting Ready for Mobile & Optimizations": [
          "Multi-Resolution and Multi-Touch Buttons",
          "Setup Godot for Android Export",
          "Creating the Camera",
          "Fixing common issues with the mobile",
          "Using Baked Lightmaps",
          "Performance monitoring"
        ],
        "Programming the Character Controller": [
          "Programming the Joystick",
          "Character Movement Part 1",
          "Character Movement Part 2",
          "Adding the Gravity",
          "Adding the various animations to the controller",
          "Code optimizations and fixes"
        ],
        "Adding Special Effects w/Particles": [
          "VFX: Tools and Techniques",
          "Creating Slash Effects",
          "Creating a Fireball Attack Part 1",
          "Creating a Fireball Attack Part 2",
          "Creating a Ground Smash effect"
        ],
        "Networking Introduction": [
          "Theory: Network Architectures & Cheating",
          "Theory: Network Architectures and Cheating",
          "Creating a Server Project",
          "Host your game on a VPS"
        ],
        "Creating the Lobby System": [
          "Creating the Lobby scenes and Scenes Handling",
          "Using the SceneHandler",
          "Coding the Lobby System Part 1",
          "Coding the Lobby System Part 2",
          "Coding the Lobby System Part 3",
          "Coding the Lobby System Part 4",
          "Coding the Lobby System Part 5",
          "Coding the Lobby System Part 6"
        ],
        "Networking Concepts for Multiplayer Games": [
          "Copying the Stage and Character to the Server",
          "Character Spawning and Stage Loading Part 1",
          "Character Spawning and Stage Loading Part 2",
          "Clock Synchronization",
          "Sending input to the Server",
          "The World State - Syncing Animations and Movement",
          "What is Interpolation?",
          "Entity Interpolation",
          "Server Reconciliation",
          "Networked Combat Basics"
        ],
        "Server Authentication": [
          "Coming Soon",
          "Player Authentication using Firebase - Intro & Theory",
          "Setting up Firebase"
        ]
      },
      "requirements": [
        "Familiarity with the basics of Godot engine and having some experience with it would help"
      ],
      "description": "This course will help you start your next 3D MOBA (Multiplayer online battle arena) Game using Godot Engine and making sure it works on mobile devices!\nThe course is currently using Godot 3.x.\nThe course is carefully divided into 10 sections that contain videos relevant to each section.\nYou will learn the basics of importing 3D characters from Mixamo to Godot and how to setup a flexible animation Tree for your character. Then we will build the 3D environment by importing 3D assets into Godot and learning how to manipulate them, then we move into optimizing the assets for mobile devices using Lightmap baking in Godot, and we will go through implementing multi resolution and multi touch input features. You will also learn how to use the particle system in Godot to create special effects.\nNext I will walk you through creating a Lobby/Room system for your Game. We will then address advanced game networking concepts such as entity interpolation, clock sync, reconciliation, etc.. and learn how to utilize them in your next Game through movement and combat.\n\n\nBy the end of this course, you will have a deep understanding of the concepts behind multiplayer networked games and on how to start creating your next 3D MOBA for mobile using Godot!",
      "target_audience": [
        "This course is for game developers wishing to make their next multiplayer online game"
      ]
    },
    {
      "title": "Basic to Advance Realtime VFX Course in Unreal Engine 5",
      "url": "https://www.udemy.com/course/basic-to-advance-realtime-vfx-course-in-unreal-engine-5/",
      "bio": "UE5 Niagara Course",
      "objectives": [
        "I'll teach you the powerful particle system in unreal engine by creating a wide variety of real time effects.",
        "We are going to start supper simple then gradually we're gonna move to create more attractive and professional effects.",
        "This course is for beginners who don't know anything about Niagara or for those who want to dive into real time FX",
        "After you finish watching this course, you will have solid knowledge in Niagara and you'll be able to create your own real time FX confidently. This is what we"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Install UE5",
          "Setup Project",
          "Setup Level",
          "Create First Niagara System",
          "Niagara Basic Properties",
          "Basic Sparks Burst Effect",
          "Material Dynamic Parameter in Niagara"
        ],
        "Fireworks": [
          "Rocket Emitter",
          "Rocket Trails",
          "Burst Effect on Rocket Death",
          "Trail of Burst Particles",
          "Smoke Trail",
          "Add flash for Impact"
        ],
        "Ice Attack": [
          "Create Icicle Mesh in Maya",
          "Icicle Material",
          "Icicle Emitter in Niagara",
          "Small Icicles",
          "Debris",
          "Smoke",
          "Glowing Particles",
          "Frost",
          "Improve Overall Effect",
          "Optimize Effect",
          "Post Process"
        ],
        "Shield Effect": [
          "Shield Mesh in Maya",
          "Shield Material",
          "Shield Emitter",
          "Glow on Ground",
          "Particle Vortex",
          "Smoke Vortex",
          "Dark Elements",
          "Optimize Effect"
        ],
        "Electric Effect": [
          "Import Third Person Template in Project",
          "Ribbon Material",
          "Beam Emitter",
          "Link beam Fx with Player",
          "Improve Effect",
          "Add more Elements",
          "Sparks on Electric hit on ground"
        ]
      },
      "requirements": [
        "Before you enroll in this course you should have basic knowledge of Unreal engine like understanding the user interface and basic knowledge about materials."
      ],
      "description": "This course is about the creation of VFX for Games with Niagara in Unreal Engine 5. You'll learn how to create basic sparks burst, fireworks, Ice attacks, shield effects, electric effects, and more effects for games. It will guide you from a Beginner standpoint to an advanced level in creating Visual Effects with Unreal Engine 4. It contains the theory, the practice, and the techniques you need for your future Visual Effects career. as I am already a tutorial online with more than free tutorials. now I aim to establish myself here on Udemy. so there will be more unreal engine Niagara VFX course soon here for all levels from beginner to advanced almost every topic or category I will try to put here so people who really want to learn realtimevfx in unreal engine 4 or 5 will never struggle to search anything that he wants to create.I hope you all guys will support me and help me to achieve that goal here. also, free tutorials will be available from time to time. this is my first course so there can be something that you can suggest to me for the next course I will really appreciate it if you criticize this course in any manner that will be helpful. thanks, everyone.",
      "target_audience": [
        "Unreal Engine users who want to learn Niagara",
        "Unreal Engine users who want to learn how to create visual effects inside Unreal Engine.",
        "Unreal engine programmers.",
        "Any game developer who wants to learn real time FX in Unreal Engine."
      ]
    },
    {
      "title": "Game Audio Essentials: SFX & Sound Design For Video Games",
      "url": "https://www.udemy.com/course/game-audio-essentials/",
      "bio": "Master foley and audio processing to create sounds for your games. Deploy to Unity, Unreal and Godot!",
      "objectives": [
        "Learn to create a custom punch sound effect using professional foley recording techniques, ready for integration into game engines.",
        "Develop skills in audio mixing and effects processing to produce realistic sword sound effects for game environments.",
        "Design seamless looping sounds for dynamic game elements, such as jetpacks, enhancing continuous gameplay.",
        "Acquire techniques for generating engaging laser sounds using creative audio effects suitable for sci-fi games.",
        "Gain proficiency in implementing and testing custom sounds within various game engines, ensuring compatibility and quality.",
        "Master essential audio processing tools to manipulate sound properties and achieve desired auditory effects.",
        "Explore innovative methods to record and transform everyday sounds into compelling audio assets for games.",
        "Enhance your audio design capabilities, enabling you to create distinctive and memorable soundscapes for your gaming projects."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome to the Course",
          "Community & Support",
          "Installing Audacity"
        ],
        "Making Your First Sound": [
          "Section Intro - Making Your First Sound",
          "Intro to Audacity",
          "Sourcing a Sound Effect",
          "Trimming a Sound in Audacity",
          "Adding Effects in Audacity",
          "Exporting From Audacity"
        ],
        "Making a Punch Sound With Foley": [
          "Section Intro - Making a Punch Sound With Foley",
          "Recording Gear",
          "Intro To Foley",
          "Extracting Takes With Audacity",
          "Installing Reaper",
          "Intro to Reaper",
          "Arranging Our Sound Elements",
          "Making a Rough Mix"
        ],
        "Learning Mixing: Sword Swing Sound": [
          "Section Intro - Learning Mixing - Sword Swing Sound",
          "Gathering Sound Elements",
          "Arranging With Video Reference",
          "Sculpting With Equalization",
          "Noise Reduction in Reaper",
          "Getting Loud With Compression",
          "Introduction to Pitch",
          "Adding Harmony With Pitch",
          "Adding Space With Reverb",
          "Repeating With Delay",
          "Finishing Our Mix",
          "Exporting Our Sound",
          "Revisiting Our Punch Sound"
        ],
        "Looping: Make a Jetpack Sound": [
          "Section Intro - Looping: Make a Jetpack Sound",
          "Gathering Sound Elements",
          "Arranging Sound Elements",
          "Mixing Our Sound",
          "Saturating Sounds With Distortion",
          "Looping Our Jetpack Sound"
        ],
        "Cool Effects: Make a Laser Sound": [
          "Section Intro - Cool Effects: Make a Laser Sound",
          "Gathering Sound Elements",
          "Synthesizing Sound",
          "Taking Off With Flanger",
          "Swooshing With Phaser",
          "Automating Our Tracks",
          "Finishing Our Sound"
        ],
        "Implementing Sounds in Game Engines": [
          "Section Intro - Implementing Sounds in Game Engines",
          "Implementing Sounds in Unity",
          "Implementing Sounds in Unreal",
          "Implementing Sounds in Godot"
        ],
        "Course Wrap Up": [
          "Outro"
        ],
        "Bonus": [
          "Whisper Spell Sound"
        ]
      },
      "requirements": [
        "Some experience with a game engine such as Unity, Unreal, or Godot would be helpful when it comes to adding your sound effects but it's not essential.",
        "You don’t need fancy gear to jump into this course. We’ll provide all the sound recordings from our lessons for you to use in your games, and we'll show you where to snag more online.",
        "But if you’re ready to roll up your sleeves and make your own (and it is a whole heap of fun!), all you need is your phone!"
      ],
      "description": "Ready to turn the dial up on your game's audio?\nWhether you’re tired of browsing lacklustre sound libraries or just itching to put your signature spin on game soundtracks, we’ve got just the adventure for you!\nDive into the world of foley and audio processing without needing a PhD in sound engineering. We’re talking about getting down with DIY sounds that will have your games bursting with originality.\nEver wondered how to make a punch sound like it could actually knock out a dragon? Or a sword clash that sends shivers down players' spines? We’ll show you the ropes, from capturing the raw sounds to mixing them into ear-catching effects. And yes, we’re doing lasers and jetpacks too—because who doesn’t love a good sci-fi vibe?\nNo more confusion about compressors, EQs, and reverbs. We break down audio effects in a way that won’t break your brain. It’s all about making it fun and easy to learn, with plenty of hands-on projects to get your sounds from the studio to the screen.\nAnd because we know you want to see your creations in action, we’ll walk you through integrating these sounds into popular game engines (Unreal, Unity & Godot). It’s one thing to make a cool sound; it’s another to hear it live in the environment it was made for.\nYou don’t need fancy gear to jump into this course. We’ll provide all the sound recordings from our lessons for you to use in your games, and we'll show you where to snag more online.\nBut hey, if you’re ready to roll up your sleeves and make your own, all you need is your phone!\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAnd you’ll get access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nSo, are you ready to be the maestro of your game’s auditory realm? Let’s make some noise and bring your digital worlds to life with sounds that are uniquely yours. Trust us, your games are about to sound incredible!",
      "target_audience": [
        "This course is perfect if you have some game dev experience and are looking to make your games even more unique.",
        "Great if you have experience with game engines, but are new to audio recording and mixing.",
        "Also ideal if you're interested in learning more about audio processing (a real peek behind the curtain about they produce the sound effects used in your favourite games and films!)."
      ]
    },
    {
      "title": "Coding for actual beginners (C# / Unity / Game development)",
      "url": "https://www.udemy.com/course/coding-for-actual-beginners-c-unity-game-development/",
      "bio": "Tired of 'beginner' coding tutorials not really being for beginners? Never touched code in your life? This is for you.",
      "objectives": [
        "Have comfortable knowledge of universal, core coding concepts",
        "Build basic games in Unity 3D",
        "Have a solid base to build your coding skills from"
      ],
      "course_content": {
        "Course / Instructor Introduction": [
          "Watch the intro video"
        ],
        "Unity Introduction": [
          "Create a project",
          "Set up a layout",
          "Window overview",
          "Scene window"
        ],
        "Functions & C# Basics": [
          "What is a function?",
          "Layout of a C# script",
          "Functions in C#",
          "Diagnose errors",
          "Call custom functions"
        ],
        "Variables & Movement": [
          "Movement",
          "Variables (conceptual & applied)",
          "Script instances"
        ],
        "Logic & Input": [
          "If statements",
          "Player input",
          "Input for multiple move directions"
        ],
        "Prefabs & Instantiating Objects": [
          "Prefabs",
          "Instantiate"
        ],
        "Collision Detection": [
          "Collision detection",
          "Collision filtering"
        ],
        "Repeating Functions & Randomization": [
          "Give an enemy basic functionality",
          "Repeating enemy spawn function & Game Manager",
          "Random values"
        ],
        "UI, Score, and Level Loading": [
          "Game Manager",
          "Keep track of score",
          "Show the score on the UI",
          "Load level by pressing a button"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Be comfortable working with a PC/Mac",
        "Have Unity3D installed (it's free)",
        "No previous coding knowledge required!"
      ],
      "description": "Are you tired of watching coding tutorials that claim to be for beginners but talk to you like you've been coding for years? Looking for a course that is actually for beginners with zero coding experience or knowledge? Welcome!\n\nIf you are intimidated by code or have never touched code before you will be totally fine. Concepts are presented thoroughly and using real life analogies that anyone can relate to. This course is also great for anyone who has some coding experience but wants to learn how to apply that to game development or just reinforce important coding concepts and skills.\n\nYou will learn core programming concepts that can be applied in any other programming language for any other purpose. You will also learn the basics of coding in the C# language specifically for game development using Unity.\nI believe in learning through immersion and doing rather than simply observing. The course uses a \"work along with me\" format instead of a traditional \"lecture - test\" format. I highly encourage you to have two monitors so you can work more efficiently with me through the lessons; and you should have two monitors for this line of work anyway.\n\nThis course is an introduction that will give you a solid ground to build off of. Even veteran coders always have to adapt and learn new things, so it is important to understand that you will always have to be learning, researching, and experimenting over your entire career. You will not be able to build a full game from start to finish just after working through this course, but with the basis you gain you will be able to confidently branch out and discover what you need to build your game.\nThe course may also expand. If there are topics brought up to me that I believe are important for this basic beginner course I will add more lessons. I also encourage you to contact me with questions and issues you came across while doing the lessons so I can add those questions to the 'Troubleshooting' sections of the lesson documents. This will greatly help future students and will reduce redundant questions.",
      "target_audience": [
        "Anyone who has never coded before",
        "Anyone terrified or intimidated of code",
        "Anyone who wants to learn C#",
        "Anyone who wants to learn game development through Unity 3D",
        "Anyone who wants to learn basic programming principles"
      ]
    },
    {
      "title": "Unity 3D location based game development with Mapbox",
      "url": "https://www.udemy.com/course/mapbox-unity-3d-essentials/",
      "bio": "Bring location-based experiences to life! Add real time locations and mapping into your games with Unity 3D",
      "objectives": [
        "Integrate the Mapbox SDK into Unity 3D games",
        "Generate Custom 3D Maps",
        "Use Points of Interest to Make Real-World Experiences"
      ],
      "course_content": {
        "PocketDroids GO": [
          "Mapbox Unity 3D Essentials Overview",
          "PocketDroids GO! Promo",
          "What is Mapbox?",
          "Setting up the project",
          "Styling our map with Mapbox Studio",
          "Setting up our map",
          "Building the UI",
          "Putting our player on the map",
          "Creating the Droid class",
          "Singletons and the DroidFactory",
          "Capture Scene Prep",
          "Creating & Implementing the GameManager",
          "Improving the UI Controller",
          "Introduction to Vector Tile Factories",
          "Creating the XP Bonus Prefab",
          "Points of Interest and Game Object Modifiers",
          "Adding Audio to the World Scene",
          "Building the Capture scene",
          "Creating the Override Orb object",
          "Setting up the Override Orb Script",
          "Intro to Platform Dependent Compilation",
          "Throwing the Orb",
          "Handling Orb Collisions",
          "Override Orb Respawn and Limitations",
          "Building the capture scene UI",
          "Controlling the Capture scene UI",
          "Transitioning Between Scenes",
          "Saving & Loading Player Data",
          "Project wrap up and student challenges"
        ],
        "Drenches of War": [
          "Introduction to Drenches of War and Mapbox AR",
          "Setting up the project and Mapbox SDK",
          "Creating and applying a Mapbox Studio Style",
          "Mapbox Image and Terrain Factories",
          "Launching water balloon projectiles",
          "Setting up the UI and the GameManager",
          "Enemy tanks",
          "Debug Land & Paintballs",
          "The Tank Factory",
          "The SpawnOnMap script",
          "Points of Interest (POIs)",
          "Adding Sound Effects",
          "Adding Scripts to Mapbox Vectors",
          "Collision Cleanup",
          "Improving Performance with Filters",
          "Prepping for Deployment",
          "Building the Project",
          "Post-build Cleanup",
          "Building with shaders",
          "Project wrap-up and Challenge",
          "Randomizing Mapbox Location",
          "Building for Android"
        ]
      },
      "requirements": [
        "Must have a Mac or PC for Unity game development",
        "A basic knowledge of Unity 3D"
      ],
      "description": "Mapbox Unity 3D Essentials by Devslopes\nLearn how to build experiences for exploring the world with Mapbox. Add location into any game with their mapping, navigation, and location search SDKs. Harness the power of location like Pokémon GO, Ingress, & Zombies, Run! These videos were produced in collaboration with the good folks at Mapbox.\nThis Unity course is for beginners & seasoned programmers!\nYou'll learn what Mapbox can do, how to add the Mapbox SDK to your Unity 3D projects, then build some amazing games that leverage the power of location and maps.\nFirst off, you’ll build PocketDroids GO where your players will capture Droids into their collection, based on real-time location data which is seamlessly integrated into the game with Mapbox. You’ll build both a main world scene as well as a capture scene where players can attempt to capture rogue bots in the wild.\nMoving on, you’ll build another game called Drenches of War – a super fun, portable, defense game. You’ll learn all about ARTabletopKit from Mapbox so that you can get your drench on anywhere there’s a flat surface! Defend a city from hordes of oncoming enemies bent on soaking you and your home base. We’ll be dynamically generating buildings and obstacles with Mapbox’s Terrain Vector Tile system and their curated Points of Interest.\nHere are some of the things you will learn:\nInstallation & Setup\nCreating a map in Unity\nCustomizing a map in Mapbox Studio\nLocation Providers\nVector Tiles\nTerrain\nCustom Visualizers\nAR Root, MapHolder, & FocusSquare\nLocation-based AI for Enemy motion\nUtilizing Mapbox’s Points of Interest\nNow is the time to learn how Mapbox adds more powerful and engaging experiences to your games!",
      "target_audience": [
        "Game developers who want to add location-based gameplay to their Unity games"
      ]
    },
    {
      "title": "Unreal Engine 5: The Ultimate Endless Runner Course",
      "url": "https://www.udemy.com/course/unreal-engine-5-endless-runner/",
      "bio": "Create an Endless Runner and Learn Game Development with Blueprints",
      "objectives": [
        "A full Endless Runner game, start to finish",
        "How to make games in Unreal Engine 5",
        "A robust understanding of Blueprints",
        "The Unreal Engine interface and terminology",
        "Creating fun and engaging game loops",
        "Game design tips and tricks",
        "Fluid animation blueprinting and movement",
        "Main Menus and HUDs",
        "Saving and loading",
        "A fundamental understanding of Unreal Engine 5"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience required!",
        "64-bit PC or Mac capable of running Unreal Engine"
      ],
      "description": "Ready to create games in Unreal Engine 5?\n\n\nNo Programming Experience Required!\nLearn game development with Unreal Engine 5, the world's leading free game engine. This is the engine that brought us AAA titles such as Fortnite, the Batman Arkham series, Bioshock, and hundreds more. Opening this engine may seem intimidating at a glance, but this course is here to teach you how to become comfortable with the layout and game making process by creating an Endless Runner game. We will go step by step through the game-making process to show how we can set up a character with fluid and responsive movement, well-designed gameplay, and a lot more- without even writing a single line of code!\n\n\nUnreal Engine Blueprints\nWe will be using UE5's built-in visual scripting system, blueprints, to create all the logic for our game. Blueprints are a visual form of C++ and are changing the way creating video games are approached across the world. It may seem like a lot at first, but with the gentle guiding of this course you will quickly understand the efficiency and power of this simple-to-understand system.\n\n\nIn this course, you will:\nMake a complete game\nBecome comfortable coding with blueprints\nLearn the engine's interface and terminology\nUnderstand actor types\nExperiment with different types of collisions\nCharacters and character movement\nBlueprint logic\nMusic and audio\nGain the confidence to turn UE5 into a profitable future\nBecome an Unreal Engine 5 hero!\n\n\nWhy Take This Course?\nEven if an endless runner game isn't your interest, this course provides the steps necessary to create a video game from start to finish. You will learn many fundamental things about the game-making process and will be able to utilize that knowledge in the projects you work on from here on out. I'm excited to see what you can create because Unreal Engine 5 is the tool you need to grasp that opportunity. So are you ready?\n\n\nLet's start making a video game!",
      "target_audience": [
        "People who are passionate to create games in Unreal Engine 5"
      ]
    },
    {
      "title": "Unreal Engine 5: Creating a Car Racing Game",
      "url": "https://www.udemy.com/course/unreal-engine-5-creating-a-car-racing-game/",
      "bio": "Learn the basics of Unreal Engine 5 by Making a Car Racing Game",
      "objectives": [
        "Learn the basics of making Car Models Drivable in Unreal Engine 5",
        "Learn the basics of Blueprints in Unreal Engine 5",
        "Learn the basics of Outdoor Overcast Lighting in Unreal Engine 5",
        "Learn the basics of Creating City environments in Unreal Engine 5"
      ],
      "course_content": {},
      "requirements": [
        "Some experience with Unreal Engine 5 will be helpful"
      ],
      "description": "Unreal Engine 5 is very high in demand right now but learning it can be a little intimidating for beginners, which is why I made this course to show you guys how to make a hyper realistic car racing game from scratch in Unreal Engine 5!\nThis is a project based course and we will be covering all aspects of making a racing game including rigging the car (in Blender 3D), making it drivable in Unreal Engine, texturing it, creating a timer and checkpoint system to make the game interesting, creating a whole city environment with realistic roads, buildings, street lights, trees, and a lot more!\nThis course should be relatively easy for most Unreal beginners however some experience would be helpful. The good thing about this course is that this course will show you the raw process of a game developer in creating games. We will be solving all problems and making all creative decisions together!\nSo what are you waiting for? Just start this course today and take your Unreal skills to a whole new level!\n\n\nProject:\n\n\nThe project is quite simple! You need to first watch the whole course and then make your own game set in your city! You can either use the same 3D models which I used, or you could use others! You must use all the techniques and skills taught in the class to make sure that you are actually learning something new! You get extra points if you model the car and buildings yourself too because that will really enhance your modelling skills as well!\nBe sure to change things up by using your own unique colors and lighting setups!\nGood luck!",
      "target_audience": [
        "Beginner game developers wanting to learn Unreal Engine 5 with a project based approach"
      ]
    },
    {
      "title": "The Complete Guide to Unity 3D : Making a Top Down Shooter",
      "url": "https://www.udemy.com/course/3d-tds-alexdev/",
      "bio": "Level up your C# and Unity knowledge and create your very own Action-Shooter.",
      "objectives": [
        "Create playable game projects - good for your portfolio, or just for your own sense of achievement.",
        "Learn C#, a modern versatile programming language.",
        "Develop strong and transferrable problem-solving skills.",
        "Learn Object-Oriented Programming in Real-World Scenarios",
        "Acquire a Comprehensive Understanding of Game Design Principles",
        "Write Clean, Maintainable Code and Design Scalable Game Architectures"
      ],
      "course_content": {
        "Watch Before You Start": [
          "Important to know - Mindset of the course",
          "Important to know - Crash Course",
          "Important to know - Q&A and Bugs",
          "Important to know - Before we begin"
        ],
        "Crash Course for Beginners": [
          "Install Unity",
          "Basic tools, Windows and Components",
          "Creating Tank with simple shapes",
          "Execution order, Input and Movement",
          "Tank's rotation",
          "Tank's aim",
          "Tower's rotation",
          "Shooting bullets",
          "Setup small playground",
          "Collision detection and simple camera controller"
        ],
        "Character Development": [
          "Setup testing ground and Character Import",
          "Setup New Input System",
          "Setup movement",
          "Setup gravity",
          "Setup aim",
          "Rig Setup and Animations",
          "Setup walk animation",
          "Setup run animation",
          "Setup fire animation"
        ],
        "Gun visuals and Animations": [
          "Create weapon controller",
          "Setup weapon 3D model's",
          "Animation rigging - Setup",
          "Rig aim constraints",
          "Left hand IK - attach left hand to the gun",
          "Left hand IK - diffrent weapons",
          "Weapon animation layers",
          "Introducing layer sync",
          "Reload Animations",
          "Weapon Grab Animations",
          "Clean up & Project"
        ],
        "Camera and Aim": [
          "Setup Camera",
          "Camera Settings",
          "Player Aim and Decomposition of Player Movement",
          "Smooth character rotation - Lerp & SLerp",
          "Camera's Lookahead",
          "Decomposition of Aim and Camera",
          "Create a bullet",
          "Setup bullet's direction",
          "Setup Precise Aim",
          "Setup Target Lock",
          "Visualise Aim with Laser",
          "Clean up & Project"
        ],
        "Colliders and Rigidbodies": [
          "Update project to LTS",
          "Import 3D models",
          "How to setup 3D colliders",
          "Important about Pivot point",
          "Rigidbody",
          "Collision detection type",
          "Flexible mass of a bullet",
          "Shiny bullet & URP setup",
          "Impact Visual Effect of a Bullet",
          "Training ground upgrade",
          "Clean up & Project"
        ],
        "Weapon System": [
          "Weapon class",
          "Weapon type",
          "Weapon slots",
          "Weapon pickup",
          "Weapon's ammo",
          "Weapon's reload",
          "Weapon's model",
          "Equip weapon",
          "Backup weapon model",
          "Reload speed & Equipment speed",
          "Object pool - Bullet pool",
          "Weapon's fire rate",
          "Weapon ready check",
          "Shoot type : Single and Auto",
          "Bullet's spread",
          "Multi-shot and burst shot",
          "Gun distance",
          "Camera distance",
          "2+ weapon slots",
          "Clean up & Project"
        ],
        "Performance and Workflow": [
          "Global object pool",
          "Constructor",
          "Scriptable object",
          "Weapon data & Project"
        ],
        "Interaction System": [
          "Closest interactble",
          "Interaction and inheritance",
          "Weapon pickup interaction",
          "Drop current weapon as pickup item",
          "Ammo box pickup",
          "Clean up & Project"
        ],
        "Enemy Melee": [
          "Brief enemy design",
          "AI Navigation Setup",
          "State Machine Setup",
          "Idle State",
          "Move State",
          "Visuals and Animations",
          "Manual rotation and smooth transition",
          "Recovery state",
          "Root transform position",
          "Chase State",
          "Attack State",
          "Attack Set",
          "Next attack random",
          "Multiple slash attacks",
          "Dead state & Ragdoll",
          "Simple health system",
          "Enemy ability - Shield",
          "Enemy ability - Dodge",
          "Enemy ability - Axe throw",
          "Enemy's Axe",
          "Clean up, Refactoring & Project"
        ]
      },
      "requirements": [
        "PC or Mac capable of running Unity 2020 or later",
        "Basics of C# will be helpful, but not required.",
        "Ideal for motivated beginners ready for a rewarding challenge."
      ],
      "description": "Ready to level up your game-making skills and step into the world of 3D game creation? Look no further than this comprehensive and standalone course, designed to take you through the process step by step, even if you have no previous experience in game development.\nI've even included a 1.5 - hour crash course for those who have zero knowledge in Unity.  While it's better to have some experience and knowledge of C#, don't worry if you don't have it, because I'll cover everything you need to know to create an astonishing action-packed video game.\nA unique asset pack of 3D models was created specifically for this course. Once you complete the course, you can keep these along with the scripts you'll create and use them however you like.\n\n\nThroughout this course, you'll learn how to create a versatile player controller using an Entity Component System (ECS).    You'll discover how to setup New Input System, how to animate 3D characters, manage camera controls, and understand the essentials of 3D physics, including colliders, mass, and velocity.\nMoving forward in the course, we focus on how to create an advanced and expandable weapons system, essential for any shooter game.  This includes creating a variety of weapons and learning how to setup both the logic and animations for visuals to bring them to life in your shooter game.\nWe're going to place a heavy focus on optimizing game performance and personal workflow to ensure the FPS doesn't drop below 120 and your project does not turn into an unmanageable disaster. At the end of each section, we'll clean up the project, and you'll have access to my projects for downloading.  This allows you to double-check your work or start from a specific point of the course, if you wish to do so.\nIn the next part of the course, you'll learn to craft challenging enemies for your game's enemies.  We're going to create melee enemies with different weapons and attack sets who use shields for protection, dodge your bullets, and throw items at you.  Ranged enemies can use covers to hide, throw grenades, and advance from different angles.  We'll also introduce two bosses with unique abilities.  All of this will serve as a great example for you to become very sophisticated in enemy AI design.\nThen, we're going to learn how to design procedural level generation.  This system will allow you to create an endless number of levels, significantly reducing development time and ensuring that your game offers fresh, engaging content for players every time they play.\nTo improve gameplay even further, we're going to develop a quest system.  You will learn how to create different missions and setup different goals for the player.\nNext, we'll build a functional and scalable UI to bring your game to completion.\nThen, we're elevating the experience by integrating new gameplay element - CARS! You'll master creating a versatile car system, allowing you to fine-tune vehicle behavior in every way possible.\nWe'll finish the course by adding an audio system and visual polish, making your game not only engaging and fun to play but transforming it into an immersive experience that's both visually stunning and audibly rich. This phase includes smoothing out bugs and enhancing mechanics, ensuring every aspect of your game shines and operates seamlessly.\nIt’s about elevating your game's overall quality, ensuring it’s not just functional but exceptionally polished.\nAfter mastering these comprehensive skills and polishing your game to perfection, it will be time to celebrate your significant achievement. This course isn't just about learning; it's about recognizing the hard work you've put into transforming your dream game into reality!\n\nAnd there you have it! A journey from the basics to a fully polished, high-quality video game.\nAnd you can start that journey with a single click.\nEnroll in the course today and learn how to create games you've always wanted.",
      "target_audience": [
        "Anyone who wants to make a high-quality video game.",
        "Anyone who wants to make shooter, survival, or roguelike.",
        "People who want to create and publish their own games.",
        "Beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game",
        "People interested in working in the game design industry.",
        "Enthusiasts eager for a deep dive into game mechanics and Unity's potential."
      ]
    },
    {
      "title": "Creating a Modular Kitbash in Blender",
      "url": "https://www.udemy.com/course/modular-kitbash-in-blender/",
      "bio": "This is the complete guide on building modular kitbash systems within Blender. Create Massive & epic scenes from scratch",
      "objectives": [
        "• Following through a complete guide on creating a Medieval Castle Kitbash",
        "• Using Blender 2.9 (the newest software version) and understanding its interface and shortcuts",
        "• Creating 65 stunning medieval castle assets enabling you to build a castle, town or city, unique to every student",
        "• Learning an industry-standard 3D modelling professional workflow within Blender 2.9",
        "• Effective problem-solving in Blender 2.9",
        "• A course within a course introduction into (a) Blender basics, (b) materials and textures, and (c) seams, sharps, and UVs.",
        "• Discovering vertex painting",
        "• Learning how to use HDRIs as backgrounds to feature your 3D models in",
        "• Maintaining and optimising medieval Europe aesthetics for a full castle scene",
        "• Marking Seams, Sharps, and fixing Normals",
        "• Smoothing and preparing meshes for texturing",
        "• Adding materials using Blender 2.9’s node system",
        "• Learning the basics of shaders",
        "• Creating a water shader procedural material in Blender 2.9",
        "• Mesh deforming and using Booleans",
        "• Learning how to make loop cuts in Blender 2.9",
        "• Fixing Ngons within Blender 2.9",
        "• Complete guide on marking seams & texture resolutions",
        "• Complete UV Mapping Guide: UV mapping and UV unwrapping your model",
        "• Creating Collections of Objects and Meshes using a Hierarchy System",
        "• Learning how to use rendering to improve the quality of presentation for your 3D environment in both Blender 2.9 Cycles and Eevee",
        "• Rendering a medieval castle kitbash scene to a high level."
      ],
      "course_content": {
        "Introduction to Course": [
          "Introduction"
        ],
        "Discovering the Course Layout": [
          "Lesson 1 - Course Layout & Blender Basics"
        ],
        "Working with References": [
          "Lesson 2 - Using References to Create Grey Boxes"
        ],
        "Creating the Main Castle Walls": [
          "Lesson 3 - Creating The Block Wall Greybox",
          "Lesson 4 - Finishing the Castle Wall Block",
          "Lesson 5 - Learning how to use Array Modifier",
          "Lesson 6 - Creating the Slit Wall Greybox",
          "Lesson 7 - Finishing the Castle Wall Grey Boxes",
          "Lesson 8 - Introduction to Seams & Sharps",
          "Lesson 9 - Introduction to Materials & Texture Maps",
          "Lesson 10 - Marking Seams & Sharps on our Castle Walls",
          "Lesson 11 - Faster Workflow for UV Mapping",
          "Lesson 12 - Fixing UV's & New Ways to Unwrap Meshes",
          "Lesson 13 - Learning About Collections & Bevels",
          "Lesson 14 - Adding New Materials to our Castle Walls",
          "Lesson 15 - Finishing the Castle Walls"
        ],
        "Lighting & Ngons": [
          "Lesson 16 - Learning About Lighting & Ngons"
        ],
        "Tudor White Wall Creation": [
          "Lesson 17 - Learning About Proportional Editing",
          "Lesson 18 - Introduction to Nodes",
          "Lesson 19 - Tips & Tricks to Speed up Workflow",
          "Lesson 20 - Changing Texture Mapping with Mirror",
          "Lesson 21 - Creating our Door Openings with Boolean",
          "Lesson 22 – Finishing the Walls & Openings"
        ],
        "Building Small Roofs": [
          "Lesson 23 - Creating our First Roof",
          "Lesson 24 - Finishing the Small Roof Greybox",
          "Lesson 25 - Adding Materials to our Small Roof",
          "Lesson 26 - Working With the Knife Tool"
        ],
        "Large Roofs Creation": [
          "Lesson 27 - Discussing Normals & Large Roof Greybox",
          "Lesson 28 - Finishing the Large Roof Greybox",
          "Lesson 29 - Cleaning Up Loose Geometry",
          "Lesson 30 - Finishing the Large Roof Materials"
        ],
        "Square Tower Top Models": [
          "Lesson 31 - Setting out the Tower Template",
          "Lesson 32 - Creating the Tower Top Block Greybox",
          "Lesson 33 - Finishing the Tower Top Block",
          "Lesson 34 - Finishing the Square Tower Tops",
          "Lesson 35 - Creating the Wooden Surround",
          "Lesson 36 - Wooden Surround Materials & Bolts",
          "Lesson 37 - Finishing the Wooden Surround",
          "Udemy - Blender 2.9 - Lesson 38 - Creating the Stone Surround Greybox",
          "Udemy - Blender 2.9 - Lesson 39 - Learning When to Restart a Mesh",
          "Lesson 40 - Finishing our Square Surrounds"
        ],
        "Building the Square Large Towers": [
          "Lesson 41 - Laying Out our Large Tower Idea",
          "Lesson 42 - Different Ways to Solve Problems",
          "Lesson 43 - Adding Materials to the Large Tower",
          "Lesson 44 - Finishing our Large Tower",
          "Lesson 45 - Learning About the Mesh Extras Addon"
        ]
      },
      "requirements": [
        "• To own a computer (Mircrosoft, Linux or Mac)",
        "• To have downloaded any version of Blender from 2.8 - 2.9 (available for free)",
        "• A thirst to learn and excitement about 3D modelling (its a long course)",
        "• To download all course resources including a course handbook, 65 references, and 125 texture maps, including alphas, albedo, AO, roughness, metallic, normal, height, and displacement."
      ],
      "description": "Course Description\n\n\nWould you like to learn how to model an entire medieval castle?\n\n\nNow, what if I told you I have a course to do just that on Udemy?\n\n\n'Blender 2.9 Creating a Medieval Kitbash' will see you creating a super varied group of interlinkable assets.\n\n\nThe biggest set of variations are available for roofs, castle towers, and related fixings.\n\n\nThere’s nothing like this course on Udemy.\n\n\n\n\n'Blender 2.9 Creating a Medieval Castle Kitbash' will give you access to 24 full hours of 3D asset creation. It will teach you the very basics of Blender 2.9, moving on to professional techniques in a short time of accelerated learning.\n\n\n\n\nAnd that's not all. The course will be even longer than that because we still have to build the castle. As a result, this will certainly be my biggest course yet, scoring at over 30 hours of learning.\n\n\n\n\nThrough reading this course description you will find out:\n\n\n- What you want to learn about 3D modeling;\n- What you are going to get through 'Blender 2.9 Creating a Medieval Kitbash', and;\n- What are you going to lose if you don’t enrol in this course.\n\n\nModeling\n\n\nJoin the craziest Blender course on Udemy to complete a kitbash with you infinite possibilities. By completing the course, you will be able to 3D model vast cities, towns, and castles.\n\n\nWe go on a journey through 65 medieval castle kitbash parts.\n\n\nThrough 'Blender 2.9 Creating a Medieval Castle Kitbash', you will be creating a series of exciting variations of castle walls, including walls with or without slits for bowmen (let's imagine there's an impending battle, right?!).\n\n\nYou will also be creating white walls like the ones we built in my 'Blender 2.8 Complete Beginners Guide to 3D Modelling a Scene' course. As part of building these props, you will learn how to create and apply Tudor era wall materials; the iconic wood, wattle and daub (i.e., wooden strips covered with clay).\n\n\nOther awesome props will include hatch doors and windows, wooden walls, a hay roof, stone roofs, a moat bridge, and castle towers with round winding steps.\n\n\nThere will be a huge series of props and individual components for these towers, including extensions and decorative details.\n\n\nFollowing the success of my latest courses, we will be modelling, texturing, and finalising every individual asset before moving onto the next. Students have said that this has helped them in staying excited throughout the creation process, being able to see how their scene comes closer to the course preview step-by-step.\n\n\nKitbash item variations will help you diversify your castle and make it unique from any other student's. With a touch of innovative thinking, which I know you all have, you will be able to create something that stands out.\n\n\nBe creative! Make your castles bigger and grander. Expand your castle keep land or beautify the upper level of the castle to make it stand out more and increase the social class divide with the other people living there.\n\n\nEngage in roleplay thinking as you build your castle and create something that breathes life!\n\n\nTexturing and Materials\n\n\n\n\nOne of the new things we cover in this course is vertex painting. We will be painting on vertices, which gives us the ability to create layered texturing. The more vertices you have, the more detailed you can make a texture. In a few words, we will be painting onto the mesh.\n\n\n\n\nAs part of creating our medieval castle walls, you will learn how to get your bricks to be seamless when they line up. Using this technical know-how, you will learn how to improve how realistic your medieval castle wall design looks.\n\n\nThis course will also teach you the basics of shaders and how to create your own water shader which you will be able to use in any other builds. But that is not the only unique feature of this course.\n\n\nWe will also be using a grass texture to represent the flourishing grass around our castle gate, and we will adorn the scene using solid rocks.\n\n\nLighting\n\n\n\n\nLighting is one of the most fundamental parts of this course and we take a deep dive into not only HDRI real-world lighting. For a full introduction into lighting 3D scenes, we will also cover all in-built Blender lighting functionalities.\n\n\nRendering\n\n\n\n\nWe render the kitbash every time we finish a section to make sure everything is going together correctly. To give you full control over the rendering process, you will learn how to render out your scene in both Eevee and cycles and you will know what their differences are.\n\n\nCourse Resources & Freebies\n\n\n\n\nThe course reference pack includes 125 texture maps, including alphas, albedo, AO, roughness, metallic, normal, height, and displacement. Our course reference schematics will also show you all the little parts of what you will be creating and they include height information for each asset.\n\n\nThe best course navigation tool for 'Blender 2.9 Creating a Medieval Castle Kitbash' will also be included. The course handbook will give the control back to you and you will be able to fully streamline your learning process to your needs and wants seamlessly.\n\n\nSomething like this is essential to courses as long as this one, and 3D Tudor is the first to consistently include this with all the newest courses.\n\n\n\n\n\n\n'Blender 2.9 Creating a Medieval Castle Kitbash', is perhaps the most detailed course on Udemy. We will go through every single part of the creation process. Nothing's left to chance.\n\n\n\n\nEnrol in this course and come be part of a 3D modeling journey of over 30 hours of learning.\n\n\nCheck out the free introduction and I am sure you won’t be able to put this course down.\n\n\nStill unsure? Then, let me tell you what's unique about this course:\n\n\n- a massive course resource pack with 125 free texture maps;\n- 65 references of all kitbash items with real-world dimensions;\n- animations & key commands throughout the learning process;\n- full control over where you render out your scene, using Eevee or cycles;\n- learning how to import and put textures together;\n- becoming an expert at using the in-built Blender node wrangler add-on;\n- accessing 3 courses within a course, including full lessons on (a) Blender basics, (b) materials and textures, and (c) seams, sharps, and UVs.\n\n\n\n\n\n\nWho wouldn’t like to learn how to model a castle, and take their creativity to the next level by scaling it up into an entire medieval city?\n\n\n\n\nLearn how to do it with just 65 pieces. Join now.\n\n\n\n\nUntil next time, happy modelling everyone!\nNeil – 3D Tudor",
      "target_audience": [
        "• Beginner 3D modellers eager to learn how to build a medieval castle modular kitbash",
        "• Enthusiasts of Blender who want to fast-track their understanding of its new and exciting changes",
        "• Mid-Level 3D modellers who want to take their modelling to the new level and improve their workflow with tips and tricks",
        "• Medieval Europe fans who want to recreate a realistic and to-real-world-proportion medieval castle, town or city"
      ]
    },
    {
      "title": "Complete Godot 2D: Develop Your Own 2D Games Using Godot 4",
      "url": "https://www.udemy.com/course/complete-godot-4-game-developer-2d-online-course/",
      "bio": "Learn how to create 2D games from start to finish in Godot engine 4 and GDScript!",
      "objectives": [
        "Get the most out of the new Godot 4 game engine by making 2D video games",
        "Make 3 different awesome games, while learning the fundamentals and key concepts of Godot 4",
        "Learn key concepts of Godot such as using Nodes, Scenes, Scripting & Signals",
        "Use Godot’s built-in scripting language, GDScript, to create interesting game mechanics",
        "Learn the fundamentals of programming such as if statements, loops, functions, coroutines, and more",
        "Discover how to use the new Tilemap, the animation player and other important nodes you need to know to make amazing games"
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Downloading Godot",
          "Create A Project",
          "Exploring Godot’s Interface",
          "More Interface Exploration",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Speedy Saucer": [
          "Section Intro - Speedy Saucer",
          "Project Setup",
          "Nodes & Scenes",
          "Rigidbody2D & Collision Shapes",
          "Instancing Scenes",
          "Editing Instances",
          "Parent & Child Relationship",
          "Draw Order & Z Index",
          "Intro To Scripting",
          "Functions & Printing Text",
          "Number Operations & More Printing",
          "Introducing Variables",
          "Function Parameters/Arguments",
          "Vector2 & apply_impulse( )",
          "Processing & apply_force( )",
          "If Statement & Comparison Operators",
          "Getting Input",
          "Variable Scope",
          "Function Return Values",
          "Following The Player With Camera2D",
          "Making The Maze",
          "Using Signals To Reset The Game",
          "Parallax Background & Text Labels",
          "Wrap Up - Speedy Saucer"
        ],
        "Alien Attack": [
          "Section Intro - Alien Attack",
          "Project Setup & Player Scene",
          "Player Movement",
          "Clamping Players Position",
          "Rocket Scene & Movement",
          "Understanding Delta Time",
          "Shooting Rockets",
          "Creating References To Nodes",
          "Deleting Unwanted Rockets",
          "Enemy Scene & Movement",
          "Enemy Spawner Scene",
          "Spawn Enemy Function",
          "Shooting Enemies & Collision Layers",
          "Enemy Deathzone",
          "Lives & Custom Signals",
          "Scoring & Enemy Died Signal",
          "Score UI",
          "Lives UI",
          "Game Over Screen",
          "Adding Sound Effects",
          "Flame Particle Effect",
          "Path Enemy",
          "Adding Path Enemy To The Spawner",
          "Wrap Up - Alien Attack"
        ],
        "Martian Mike": [
          "Section Intro - Martian Mike",
          "Project Setup - Martian Mike",
          "Animated Sprites",
          "Player Movement",
          "Boolean Operators",
          "Updating Animations",
          "Deathzone",
          "Jump Pad",
          "Traps",
          "Animation Player",
          "Arrays & Groups",
          "The For Loop",
          "Tilemap Basics",
          "Tilemap Terrains (Autotile)",
          "Scrolling Background",
          "Start Area",
          "Exit Area",
          "Changing Scenes",
          "More Levels",
          "Level Timer",
          "Timer HUD",
          "Win Screen",
          "Start Menu",
          "Level Design",
          "Autoloads (Singleton Pattern)",
          "One-Time Sound Effects",
          "Wrap Up - Martian Mike"
        ]
      },
      "requirements": [
        "There's no prerequisites for taking this course. Whether you're an absolute beginner or have some programming or Godot experience, this course is for you!"
      ],
      "description": "Learn how to get the most out of the new Godot 4 game engine by making 2D video games.\nWe take you through the fundamentals and key concepts of Godot. You’ll use Godot’s built-in scripting language, GDScript, to create interesting game mechanics.\nPlus, you’ll learn the fundamentals of programming such as if statements, loops, functions, coroutines, and more.\nBy the end you know how to use the new Tilemap, the animation player and other important nodes to make amazing games!\nYou’ll create 3, yes 3!, games in Godot 4…\nSpeed Saucer: a Collision Avoidance Game where you’ll learn Godots fundamentals, scenes, nodes, instancing, scripting and more\nAlien Attack: 2D Side Scrolling Space Shooter Game covering physics, movement logic, creating UI (user interface), particles and more. You’ll be shooting projectiles and keeping score!\nMartian Mike: 2D Platformer Game packed full of new skills including animations, scene management, tilemap and many more\nWhether you’re a complete beginner or have dabbled in Godot before, this course will have something for you.\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nAnd you’ll get access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nGodot 4 is an amazing engine and this course is the perfect place to dive into it! ?",
      "target_audience": [
        "Absolute beginners to Godot and programming",
        "Absolute beginners to Godot who know some programming",
        "Beginner and lower intermediate users of Godot"
      ]
    },
    {
      "title": "JavaScript Game Development Step by Step",
      "url": "https://www.udemy.com/course/javascript-game-development-step-by-step/",
      "bio": "Create 3 JavaScript games step by step in 1 course, learn animations and publish your games on free GitHub page.",
      "objectives": [
        "Gain an in-depth understanding of HTML canvas",
        "Create any type of animations in the HTML canvas using JavaScript",
        "Build your own JavaScript games from Scratch",
        "Learn to build games with external resources"
      ],
      "course_content": {
        "Prerequisites of the Course": [
          "Prerequisites",
          "How to get course repository and other stuff?"
        ],
        "Introduction to Canvas and JavaScript": [
          "Overview of the Section",
          "Introduction to Canvas",
          "Drawing Elements in the Canvas",
          "Canvas State",
          "Introduction to JavaScript Objects",
          "Drawing Objects in the Canvas",
          "Introduction to JavaScript functions",
          "Understanding the setInterval() function",
          "User inputs & Event Handling",
          "Test Your Skills"
        ],
        "Building the Snake Game": [
          "Overview of the Section",
          "Getting started with the Project",
          "Declaring Objects of the Game",
          "Initializing the Snake and Food",
          "Drawing the Snake",
          "Getting the user inputs",
          "Updating Snake Position",
          "Moving our Snake",
          "Dealing with the boundary conditions",
          "Drawing Food for the Snake",
          "Snake eats Food - Part 1",
          "Snake eats Food - Part 2",
          "Adding Game Over condition - Part 1",
          "Adding Game Over condition - Part 2",
          "Adding Scoring to the Game",
          "Initial Screen of the Game",
          "Game is ready",
          "Test Your Skills"
        ],
        "Building the Breakout Game": [
          "Overview of the Section",
          "Getting started with the Project",
          "Declaring Objects of the Game",
          "Drawing Ball and Base",
          "Updating the Base position",
          "Getting the user inputs",
          "Moving the Base",
          "Updating the Ball position",
          "Collision between Base and Ball",
          "Initializing the Enemy Tiles",
          "Drawing the Enemy Tiles",
          "Tile and Ball collision",
          "Adding Scoring and Lives to the game",
          "Adding Game Over condition",
          "Basic Game ready",
          "Increasing Game difficulty with time",
          "Test Your Skills"
        ],
        "More elements of the Game": [
          "A Short note",
          "Tracking mouse movement",
          "Building a Shooter - Part 1",
          "Building a Shooter - Part 2",
          "Adding Pause Screen to your Game",
          "Adding Sound to your Game"
        ],
        "Building Cupcake Catcher Game": [
          "Getting started with the Project",
          "Loading the resources",
          "Declaring Objects of the Game",
          "Initializing the game",
          "Drawing the tiles",
          "Drawing the Catcher",
          "Adding animation to the Catcher",
          "Moving the Catcher",
          "Learning the jump function",
          "Adding jumping animation",
          "Initializing the cupcakes",
          "Drawing the cupcakes",
          "Defining the collision functions",
          "Using the food collisions",
          "Learning about gravity",
          "Adding levels and scoring",
          "Game Over condition",
          "Click to start or restart",
          "Adding sound to the game",
          "Adding Pause Screen to the game",
          "Test Your Skills"
        ],
        "Bonus - Publishing Your Game": [
          "How to publish your game in GitHub pages?"
        ]
      },
      "requirements": [
        "You should have basic knowledge of HTML",
        "You should have basic understanding of JavaScript"
      ],
      "description": "In this course you will learn about all the tools needed for creating casual games in JavaScript. In the first section you will learn about various components of JavaScript and HTML that would be required in game development.\nIn the succeeding sections you will create two games: Snake and Breakout step by step along with me. You will also learn about several other elements of the games that you can apply to your own game later on.\nIn the last section of the course you will also learn to publish your game online.\nSo, there's a lot to learn in this course and it will surely benefit you if you are planning to step into the world of JavaScript game development.",
      "target_audience": [
        "Anyone who wants to explore the field of game development using JavaScript"
      ]
    },
    {
      "title": "Epic Construct 2 Course: Complete 60 Beginner Games!",
      "url": "https://www.udemy.com/course/the-complete-game-developer-course-build-60-games/",
      "bio": "Learn to build 60 games in Construct 2 without programming. Learn the secrets behind top selling mobile games.",
      "objectives": [
        "Make games from scratch",
        "Know how to build game mechanics",
        "How to release your own game",
        "How to make basic art in Photoshop",
        "Use Construct 2"
      ],
      "course_content": {
        "Introduction": [
          "01. Introduction",
          "02. Course requirements and how to use this course",
          "03. Construct 2 crash course part 1",
          "04. Construct 2 crash course part 2"
        ],
        "Make A Simple fun avoid falling blocks game": [
          "01. Introduction",
          "02. Starting the project",
          "03. Starting the project",
          "04. Adding in the players",
          "05. Adding in the player controls",
          "06. Adding in the spike logi",
          "07. Adding in the score",
          "08. Setting up the HUD and the game over logic",
          "09. Adding in the home screen",
          "10. Making the art",
          "11. Adding in the art to the game",
          "12. Conclusion and Challenge"
        ],
        "Make a fun simple falling block game": [
          "01. Introduction",
          "02. Starting the project",
          "03. Starting the project",
          "04. Adding in the players",
          "05. Adding in the player controls",
          "06. Adding in the spike logi",
          "07. Adding in the score",
          "08. Setting up the HUD and the game over logic",
          "09. Adding in the home screen",
          "10. Making the art"
        ],
        "Build a simple Circular shooter": [
          "01. Introduction",
          "02. Game Preview",
          "03. Starting the game",
          "04. Adding in the controls and the basic game logic",
          "05. Adding in the enemy logic",
          "06. Adding in the enemyLogic",
          "07. Adding in the game over logic",
          "08. Adding in the home screen logic",
          "16. Conclusion and Challenge"
        ],
        "Build a simple monochrome game": [
          "01. Introduction",
          "02. Game Preview",
          "03. Starting the game",
          "04. Adding in simulated stars",
          "05. Adding in the player timers",
          "06. Adding in the collectable logic",
          "07. Adding in the gamestate logic",
          "08. Adding in some finesse",
          "09. Making the art",
          "10. Adding in the art and finalizing the game",
          "12. Conclusion and Challenge"
        ],
        "Build a simple mobile shooter in HD": [
          "01. Introduction",
          "02. Introduction to the game we will be making",
          "03. Starting the file and adding the game sprites",
          "04. Setting up the player",
          "05. Fixing the mouse issue",
          "06. Adding in the enemy logic",
          "07. Setting up winning and losing conditions",
          "08. Making the items in photoshop",
          "09. Making the title screen",
          "10. Exporting the art",
          "11. Conclusion and Challenge"
        ],
        ".Build an avoid mobile game": [
          "01. Introduction",
          "02. Introduction to the game we will be making",
          "03. Starting the project",
          "04. Setting up the avoid blocks",
          "05. Setting up the block spawning timer",
          "06. Setting up the game logic",
          "07. Fixing the bound to layout issue",
          "08. Adding in the rest of the menus",
          "09. A simple way of adding color",
          "10. Making the Art",
          "11. Implementing the art and testing the game",
          "12. Conclusion and Challenge"
        ],
        "Build a simple collection game": [
          "01. Introduction",
          "02. Introduction to the game we will be making",
          "03. Starting a project",
          "04. Adding in the green block logic",
          "05. Adding in timers",
          "06. Fixing the spawning problem",
          "07. Addin in the score",
          "08. Setting up the lose condition",
          "09. Adding in particles",
          "10. Making the title screen",
          "11. Exporting the art",
          "12. The importance of housekeeping",
          "13. Conclusion and Challenge"
        ],
        "Building a simple fall down game": [
          "01. Introduction",
          "02. Introduction to the game we will be making",
          "03. Starting a new project",
          "04. Adding the controls",
          "05. Adding in the bars",
          "06. Setting up the lose logic",
          "07. Adding in the game logic",
          "08. Making the art",
          "09. Wrapping up the game",
          "10. Conclusion and Challenge"
        ],
        "Making an physics endless runner": [
          "01. Introduction",
          "02. Introduction to the game we will be making",
          "03. Starting up the game file",
          "04. Setting up the game objects",
          "05. Adding in the timer and the spawning",
          "06. Setting up the game logic",
          "07. Adding in the collision to the block",
          "08. Setting up a Heads Up Display HUD",
          "09. Adding in the score",
          "10. Tweaking the game numbers",
          "11. Setting up the homepage",
          "12. Conclusion and Challenge"
        ]
      },
      "requirements": [
        "You need the paid version of Construct 2",
        "Must be using a PC",
        "This course does not support virtual mac environments"
      ],
      "description": "\"I am using this class to teach myself new tricks to teach my own class of high schools students in my game development class. Thanks for all of the new ideas!\"\nThis course was funded through a massively successful Kickstarter campaign.\nLearn to build 60 games in Construct 2 without coding. Master game development by building 60 practical projects. Learn to make art and design games in Photoshop. Learn to build games completly from scratch.\nOne of the best features is that you can watch the courses at any speed you want. This means you can speed up the or slow down the video if you want to.\nThis course is project based so you will not be learning a bunch of useless coding practices. At the end of this course you will have real world apps to use in your portfolio. We feel that project based training content is the best way to get from A to B. Taking this course means that you learn practical, employable skills immediately.\n\"Short and precise instructions. I love Mammoth Interactive, one of the best provider of tech courses on Udemy for sure!\"\nYou can use the projects you build in this course to add to your LinkedIn profile. Give your portfolio fuel to take your career to the next level.\n\nLearning how to code is a great way to jump in a new career or enhance your current career. Coding is the new math and learning how to code will propel you forward for any situation. Learn it today and get a head start for tomorrow. People who can master technology will rule the future.\nYou will get full lifetime access to this course for a single one off fee. John Bura has created many games, apps and training courses so he is extremely qualified to teach you how to master technology. This is an instructor that does not only teach, he produces apps. This means you get the most relevant information on how to code. Most courses do not show you practical skills and real world examples.\nWhat makes you a good teacher?\nI have released over 40 games and apps that have done very well in the app store.\nI run a company called Mammoth Interactive so I am actively in the field building apps and making money\nI have been teaching since 2002\nI personally love learning online and my life is much better because I have learned online rather than a classroom\nI am one of the top 10 highest grossing Udemy teachers\nI have been a Udemy instructor since 2011.\nI make sure people learn how to make money from their creations.\nI have over 150k students worldwide\nWho is this class for?\nPeople who want to improve their technical skills\nComplete beginners\nPeople who want to make money. I show people the tools on how to make money through various methods of passive income\nPeople who want to get ahead of the pack by learning online.\nHow you will make money by learning new skills\nLearn practical skills\nLearn about how leverage your new skills to greater wealth\nLearn through practical examples\nWhy should you learn online?\nThere is an online education revolution taking place. You may have heard about it in the news or heard it from a friend. Either-way, education is going to be changed forever. In this short course I talk about how Online Education has\nMotivated me\nHelped my career\nHelped me as a teacher\nImpacted several lives around the planet\nI promise that this course will be better and more effective than reading books. I show how to master technology through the use of video. This course will give you everything you need to thrive in our technological society.\nEnroll now to join the Mammoth community!\n\"ok so i made a few games with this, i waited a while to leave a rating, it deserves my 5 stars, through and through. id give it 6 even. 7 even.\"",
      "target_audience": [
        "Complete beginners",
        "Not for advanced game developers"
      ]
    },
    {
      "title": "Learn Game Artificial Intelligence in Unity Visual Scripting",
      "url": "https://www.udemy.com/course/visual-scripting-with-unity/",
      "bio": "Bring your games to life without coding by building artificial intelligence algorithms with Visual Scripting tools.",
      "objectives": [
        "Learn Visual Scripting from Unity's YouTube Creative Content Producer (and original Bolt YouTuber)",
        "Become a wizard of timing and rotating things in Unity",
        "Create 3D worlds with robots ghosts and cute ducks",
        "Make a city and action game prototype: sandboxes to forever support your learning and dream games",
        "Game AI for enemies and friends",
        "Best practices for architecture and performance"
      ],
      "course_content": {
        "Section 1: Day-Night Cycle | UVS Bootcamp": [
          "Welcome",
          "Join the H3D Student Community",
          "FAQ's",
          "1.1 Introduction & Setup - Hello, Sun!",
          "1.2 Rotating the Sun",
          "1.3 Defining Day and Night",
          "1.4 Fireflies and Streetlights",
          "1.5 Fireflies at Night - Custom Events",
          "1.6 Streetlights - For Loops and Parent-Child",
          "1.7 Day and Night Events - Lists and For-Each Loops",
          "1.8 Starry Night - Timers and Material Parameters",
          "1.9 In-Game Clock Part 1",
          "1.10 In-Game Clock Part 2 - Debug Log",
          "1.11 In-Game Clock Part 3 - Clock Display",
          "1.12 [Addendum] First Steps for Hourly Events"
        ],
        "Section 2: Navigation Meshes": [
          "2.1 First Steps",
          "2.2 Click to Move with Raycasts",
          "2.3 Player Camera with Cinemachine",
          "2.4 Controlling Animations",
          "2.5 Agents that Follow - Friendly Ducks",
          "2.6 Random Destinations - Ducks Return Home",
          "2.7 Subgraphs for Random Rats"
        ],
        "Section 3: Crowd Simulation": [
          "3.1 NPC Waypoint Wandering",
          "3.2 NPC Variation with Animator Offset",
          "3.3 Agents and Obstacles",
          "3.4 Moving Objects - Endless Traffic",
          "3.5 Custom Event Arguments - Traffic Control",
          "3.6 Fleeing 1 - Instantiating Ghosts",
          "3.7 Fleeing 2 - Ghost Detector",
          "3.8 Fleeing 3 - Reducing Update",
          "3.9 Fleeing 4 - Fleeing Agents"
        ],
        "Section 4: State Machines | Action Prototyping": [
          "4.1 Intro & Setup",
          "4.2 Doors - Translate",
          "4.3 Doors - Using DOTween",
          "4.4 Turrets 1 - State Machine Setup + Firing",
          "4.5 Turrets 2 - Rotating",
          "4.6 Turrets 3 - Aiming",
          "4.7 Turrets 4 - Predictive Aiming",
          "4.8 Enemy AI 1 - State Machine Setup",
          "4.9 Enemy AI 2 - Line of Sight",
          "4.10 Enemy AI 3 - Patrol & Idle",
          "4.11 Enemy AI 4 - Chase & Attack"
        ],
        "Bonus!": [
          "5.1 Enemy Health and Damage Events"
        ],
        "Conclusion": [
          "Final Words from Jim"
        ]
      },
      "requirements": [
        "No prior Unity experience needed, but a couple hours of messing around will help!",
        "No programming experience needed"
      ],
      "description": "Strap yourself in: Programming Artificial Intelligence is about to click!\n\n\nMy name is Jim, and I'll be your instructor. Creating this course has been a dream of mine ever since I made the official tutorials for Bolt on Unity's Learn Site. In collaboration with Holistic3D, I took Penny's quintessential C# tutorial series The Beginner's Guide to Artificial Intelligence and adapted it to *drumroll*... Unity Visual Scripting!\n\n\nIn this course, you're getting the best of both worlds:\nLearning content from Penny, a renowned expert on AI and computer science..\n...remixed, riffed on, and presented by me, a creative artist and designer. I've helped thousands learn visual scripting from the early years to today. Through an open-ended, practice-based approach you will follow along as each step is revealed for you to build two game worlds created with Unity 2021.3.9\nHere's the list of what we'll make together:\n\n\nFor total beginners, we start with a Day/Night Cycle to bring sunsets and sunrises to your game worlds.\nWe'll use Custom Events to make fireflies appear and turn streetlights on in the night.\nWant something more advanced? We'll make an in-game clock and sync it with the sun.\nSet up a Click-To-Move Player Controller using Cinemachine and Unity's Nav Mesh system.\nBring to life wildlife in the form of ducks and rats that respond to the world around them.\nPopulate a city with crowds of NPCs who wander around, avoid cars, and run away from ghosts\nMaster rotations and timing with a laser gun turret\nWe'll use predictive aiming to make challenging enemies for the player to face\nFinesse Enemy AI with improved algorithms for Patrol, Chase and Attack strategies\nExtra Content! at the end, based on your requests and questions.\nBy the end of this course you will have:\nA full understanding of UVS and Unity's API - the foundation to make what you imagine\nAn in-game time system - make your game worlds dynamic from the start\nFamiliarity with 3D game mathematics - you'll be comfortable and confident moving and rotating objects in Unity\nLearned Unity's Nav Mesh System - add lifelike characters and creatures to your game worlds\nState machines as an essential part of your game dev toolset - create AI behaviors that respond to the environment and the player's actions\nTwo sandbox projects, a city and sci-fi action prototype - keep libraries of graphs ready to drop into any of your games\nJoined the friendly and active UVS and Holistic3D communities - share your progress, get unstuck, and connect with other UVS creators like you\n\n\nWe're so excited to share the course with you and can't wait to see how you run with it,\n- Jim @HomeMech",
      "target_audience": [
        "Artists, designers, storytellers, and generalists who want to take their craft to the next level",
        "People who struggle learning C# and wish it would click",
        "Students who want to use Unity in their school projects",
        "Professionals in integrated teams of artists, designers, and developers",
        "Hobbyists who don't have a lot of time: tutorials are easy to pick up and come back to"
      ]
    },
    {
      "title": "Video Game Design for Kids",
      "url": "https://www.udemy.com/course/video-game-design-for-ages-7-10/",
      "bio": "Help your child create their own video game to share with their friends!",
      "objectives": [
        "Students learn programming logic to code characters’ behaviors and reactions to events in their games.",
        "Students learn to use the tools available in Kodu to create land, water, mountains, buildings, and more.",
        "Students learn more advanced coding to give their characters power-ups.",
        "Students complete game design planning prior to starting their final projects to create the best video game possible."
      ],
      "course_content": {},
      "requirements": [
        "Basic Computer Skills",
        "Be able to use a mouse and keyboard.",
        "Kodu Game Lab Program-- Free Download-- Only works on a Windows based PC."
      ],
      "description": "How would you like to help your child (Ages 7-10) create their own original video game?  This course helps kids learn to make games via a simple visual programming language. This program is a great entry into design and programming skills. Students will follow a kid-friendly process similar to real video game designers who create the games they play at home!\nStudents learn programming logic to code characters’ behaviors and reactions to events in their games.  All programming in Kodu is WHEN/DO (similar to IF/THEN statements).\nStudents learn to use the tools available in Kodu to create land, water, mountains, buildings, and more.\nStudents learn more advanced coding to give their characters power-ups.  This involves creating parallel programming that changes the behavior of their characters based on a specific event.\nStudents complete game design planning prior to starting their final projects to create the best video game possible.\nImportant: Kodu currently only runs on Windows.  Please test running Kodu prior to signing up for the class.  Kodu is a free download.  Simply Google \"Kodu.\"  This course is designed for parents that want to introduce their kids (Ages 7-10) to coding and video game design.",
      "target_audience": [
        "Parents that want to introduce their kids (Ages 7-10) to coding and video game design."
      ]
    },
    {
      "title": "Develop Minecraft Plugins (Java)",
      "url": "https://www.udemy.com/course/develop-minecraft-plugins-java-programming/",
      "bio": "The world's most sold Minecraft course, delivering expert tutorials backed by a welcoming community with 24/7 support.",
      "objectives": [
        "Learn the programming language Java (if not known)",
        "Develop plugins for Spigot, Paper, Bukkit or BungeeCord (ALL VERSIONS!)",
        "Start with events, commands and progress to minigames and packets!",
        "Best ways to earn money from Minecraft plugins (servers, selling, comissions)"
      ],
      "course_content": {},
      "requirements": [
        "Should have a Minecraft Java account",
        "No programming experience needed"
      ],
      "description": "2025 update: This is now the most sold Minecraft course ever! (Course updated August 2025)\nOur Discord server has 5,000+ students! You'll enjoy 24/7 support and a warm community to learn alongside.\n\nYou'll learn how to create Minecraft plugins, from any level to advanced. The first tutorial is the installation and setup, and we'll work together by starting simple and turning you into some sort of Java god! We'll start with setting up your first plugin, creating commands and listening to events, and then move onto more tricky aspects, such as GUIs, packets and schedulers (and literally everything in between - scroll down to see the list of videos!). We also have full sections on making a minigame, building a network, managing databases and understanding NMS/packets.\nWhether you know Java or not, you'll learn it from this course. I'll be covering Java from basic to advanced throughout the course and this is a skill that you can carry all throughout life. When using it with Minecraft, you can create some beautiful things: for example, you could be developing your own server, doing private commissions or even sell your plugins on marketplaces for people to purchase. At the end of this carefully constructed course you will be confident in creating plugins for Paper, Spigot, Bukkit & Bungee servers.\nIt's now 2025. I first released this course in 2017, and it has since seen several complete remakes! I've been writing Minecraft plugins for around a decade now, and we have built an exceptional exclusive community of thousands of like-minded developers who offer around the clock support in a welcoming, judgement-free environment.\nIf you decide to join us, you're in safe hands. We hope to see you soon!\n\n\nWhy this course?\n• 130+ lectures\n• 4000+ 5 star reviews (and 15,000+ students!)\n• Very generous price and still the best available\n• Discord server with 5000+ members & dozens of support staff (who would love to help!)\n• Constantly being updated to suit API changes (covers all versions)\n• 'Best selling' course by Udemy (quality reviewed by a human)\n• Very high course rating! (average for video game category is 4.2)\n• 24/7 Q&A section (every question answered)\n• One purchase = lifetime access (content is always being added)\n• Extra resources after each lecture for further learning\n• Videos for both Windows and Mac users\n• 1080p 60fps HD videos\n• English captions\n• Partnered with JetBrains! Free 6 month keys (not required for course)!",
      "target_audience": [
        "This course is for Minecraft players who want to create awesome plugins (and make some money)!"
      ]
    },
    {
      "title": "Mastering Game Feel in Unity: Where Code Meets Fun!",
      "url": "https://www.udemy.com/course/mastering-game-feel-in-unity/",
      "bio": "Level Up in C#, Unity, Post-Processing, 2D Lighting, VFX, Audio and more to Amp Up Your Game.",
      "objectives": [
        "Learn how to implement things like a struct, centralized input, interfaces, and several game design patterns.",
        "Implement screen shake, post-processing effects, 2D lighting, particle effects, tilemap prefabs, masking, Unity events, and much more!",
        "Increase your level of understanding when it comes to good C# practices.",
        "Build an expandable Audio Manager system in C# & Unity that can be used in other mid-sized scalable projects.",
        "Build good clean systems in C# and practice good code architecture principles.",
        "Expand your foundational knowledge of Unity."
      ],
      "course_content": {
        "Introduction & Setup": [
          "Welcome To The Course",
          "Set Up Unity & VS Code",
          "Project Setup",
          "VS Code Issues?",
          "Package Overview",
          "Community & Support",
          "Accessing Our Projects"
        ],
        "Weapon Improvements": [
          "Section Intro - Weapon Improvements",
          "Gun Aim",
          "Machine Gun",
          "Observer Pattern",
          "Gun Kickback Animation",
          "Object Pooling",
          "Screen Shake"
        ],
        "Player Controller": [
          "Section Intro - Player Controller",
          "Jump Detection",
          "New Input System",
          "Struct vs Class",
          "Shared Movement Class",
          "Custom Gravity",
          "Double Jump",
          "Coyote Time"
        ],
        "Combat": [
          "Section Intro - Combat",
          "Knockback",
          "Hit Flash",
          "Color Changer",
          "Death Splatter",
          "Splat Particle VFX",
          "Death Handler"
        ],
        "Visual Feedback": [
          "Section Intro - Visual Feedback",
          "Bullet Collision VFX",
          "Walk Effect",
          "Player Lean",
          "Cowboy Hat",
          "Jump Effect",
          "Velocity Ground Check",
          "Bloom"
        ],
        "2D Lighting": [
          "Section Intro - 2D Lighting",
          "Muzzle Flash",
          "Spotlight",
          "Ping Ponging Lights",
          "Interfaces",
          "Disco Party"
        ],
        "Audio": [
          "Section Intro - Audio",
          "Import Assets",
          "Sound Scriptable Object",
          "Audio Manager",
          "Managing Sound Values",
          "Randomizing Sounds",
          "Audio Mixer",
          "Audio Clean Up"
        ],
        "Additional Features": [
          "Section Intro - Additional Features",
          "Background Parallax",
          "One Way Platforms",
          "Jetpack",
          "Mega Challenge - Grenade",
          "Solution - Setting Up Prefabs",
          "Solution - Launching The Grenade",
          "Solution - Explosion & Contact",
          "Solution - Grenade Audio"
        ],
        "Polish": [
          "Section Intro - Polish",
          "Player Hit",
          "Score Kill Count",
          "Player Respawn",
          "Mega Kill Audio",
          "Max Fall Speed"
        ],
        "Course Wrap Up": [
          "Outro"
        ]
      },
      "requirements": [
        "A basic or introductory level of understanding in both Unity and C#."
      ],
      "description": "Ever feel that your game just doesn’t feel quite right?\nLearn how to fix that by implementing a bunch of fun systems, mechanics and effects to enhance the way your game feels from a player perspective!\nBuilding upon solid C# and Unity foundations, it’s time for you to level up.\nIncrease your C# understanding, learn how to implement things like a struct, centralized input, interfaces, and several game design patterns.\nAnd expand on your Unity knowledge by learning screen shake, post-processing effects, 2D lighting, particle effects, tilemap prefabs, masking, Unity events, and much more!\nPlus, you’ll even build an expandable Audio Manager system that can be used in other mid-sized scalable projects.\nYou’ll start with a simple 2D side scroller shooter base template and expand on it to get things feeling the way they should.\nYou’ll make a game that “feels” fun to play with a clean and snappy player controller, a gun that’s fun to shoot, audio and screen visuals to give your player feedback, as well as animations to bring everything together.\nThis course is suitable for all levels of Unity users. So if you’re a beginner to intermediate Unity developer looking to expand your foundation knowledge, maybe you’ve taken our beginner 3D or 2D courses and are looking for the next step, or you’ve used Unity to participate in a game jam or two and are looking to take your projects and games to the next level, this is the course for you!\nYou’ll get full lifetime access for a single one-off fee. The creators are qualified and experienced with modelling and coding, so are able to explain complex concepts clearly, as well as entertain along the way.\nYou’ll also gain access to a course forum where you can discuss topics on a course-wide basis, or down to the individual video. Get plugged into our communities of amazing developers on Facebook (nearly 20k), in our own TA-curated Community (17k views/day), and our student chat group (10k live at any one time).\nSo enrol today and get your game feeling just right!",
      "target_audience": [
        "Beginner+ to intermediate Unity developers looking to expand their foundation knowledge on Unity and C#.",
        "Someone that has participated in a game jam or two but is looking to take their projects and games to the next level.",
        "Someone that has completed one of the GameDevtv beginner 3D or 2D courses and looking for the next step in their learning journey."
      ]
    },
    {
      "title": "Lets Make a Hack n Slash game with SDL2 and C++",
      "url": "https://www.udemy.com/course/hack-n-slash-sdl2/",
      "bio": "Learn how to make a nice little hack n slash using SDL2 and C++ like a boss!",
      "objectives": [
        "Make small games with SDL2 and C++",
        "Learn game development fundamentals and beginner principles",
        "See how it feels to be an Indie Dev :D"
      ],
      "course_content": {
        "Intro": [
          "Introduction"
        ],
        "Setup": [
          "Setup"
        ],
        "Project Walkthrough AND SDL Texture vs Surface": [
          "Project Walkthrough"
        ],
        "Globals": [
          "Globals"
        ],
        "Animation": [
          "Animation Concept",
          "Time Controller",
          "Frame",
          "Animation",
          "Animation Set",
          "Animation Loading"
        ],
        "Concept: Polymorphism": [
          "Polymorphism Concept"
        ],
        "Entity": [
          "Entity",
          "Entity Functions",
          "Collision Concept",
          "Entity Collision",
          "Entity Helper Functions",
          "Entity Statics"
        ],
        "Living Entity": [
          "Living Entity"
        ],
        "Hero": [
          "Hero",
          "Hero Functions",
          "Keyboard Input"
        ],
        "Walls, Obstacles, Things to bump into, etc": [
          "Wall"
        ]
      },
      "requirements": [
        "You should be familiar with C++ (if, while, for, pointers, dynamic memory, classes, inheritance)",
        "Install either Visual Studio Community (2013) for Windows OR",
        "Install XCode for Mac OR",
        "Install CodeBlocks for Linux",
        "Note: SDL2 is cross platform and can be done on Windows/Linux/Mac, however this course will be taught on Windows. The course content should work on the other 2, but the projects will be different."
      ],
      "description": "In this course I'll take your intermediate C++ skills, buff them up a little and use them to make a Hack n Slash game using SDL2. You'll be taken through the entire process of making this game and given source code of the project at various checkpoints if you get lost along the way.\nWe are going to learn basic game dev elements, such as game loop, animations, collisions, player input and AI. I'm also going to boost your skills with Inheritance and Polymorphism to simplify a complex game structure down into a few short bits of game logic.\nAt the end of the course you'll walk out with game dev experience and a little game you can expand on and even build up to a marketable game.\nLet's make a game!",
      "target_audience": [
        "This course is meant for students or hobbyist with a background in C++ looking to get into game development",
        "Anyone with a C++ background who wants to try SDL2"
      ]
    },
    {
      "title": "Scratch 3.0 for Teachers | Teach Coding with Games & Scratch",
      "url": "https://www.udemy.com/course/scratch-3-for-teachers-teach-coding-with-games/",
      "bio": "11 Games for Scratch 3.0 + Lesson Plans for Scratch 3.0 + Scratch Activities for teachers for use in the classroom.",
      "objectives": [
        "You will learn how to teach coding, create programs, make games and solve programming problems with Scratch 3.0",
        "Build a complete understanding to your students of Scratch 3.0 from the ground up!",
        "Teach all the fundamental programming principles with Scratch 3.0.",
        "Teach complex programming topics with an easy, game-based and funny way.",
        "Give motivation to your students teaching them how to use Scratch 3.0 to develop games and learn coding!"
      ],
      "course_content": {
        "Introduction to coding with Scratch 3.0": [
          "Scratch 3.0 Overview",
          "3 Tips to Get More Value Out of this Course",
          "Blocks and Commands in Scratch 3.0"
        ],
        "Teaching Sequential Programming with Scratch 3.0": [
          "Teaching Sequential Programming with examples in Scratch 3.0",
          "Worksheet #1 in Sequential Programming - Getting Familiar with Scratch 3.0",
          "Worksheet #2 in Sequential Programming - Getting Familiar with Scratch 3.0",
          "Worksheet #3 in Sequential Programming - Getting Familiar with Scratch 3.0"
        ],
        "Teaching If-Statement with 2 Arcade Games in Scratch 3.0": [
          "Building Helicopter Game in Scratch 3.0 using If-Statements",
          "Building Racing Car Game in Scratch 3.0",
          "Worksheet #1 in If-Statement with Scratch 3.0",
          "Worksheet #2 in If-Statement with Scratch 3.0",
          "Worksheet #3 in If-Statement with Scratch 3.0"
        ],
        "Teaching Loops with Scratch 3.0": [
          "Teach Loops with Scratch 3.0, Building the \"Ghost Effect\"",
          "Worksheet #1 in Loops with Scratch 3.0",
          "Worksheet #2 in Loops with Scratch 3.0",
          "Worksheet #3 in Loops with Scratch 3.0"
        ],
        "Combining If-Statement and Loops to create Scary Shark Game in Scratch 3.0": [
          "Developing Scary Shark Game in Scratch 3.0",
          "Adding more functionalities in Scary Shark Game and finishing the Game",
          "Worksheet #1 - Combining If-Statement and Loops with Scratch 3.0",
          "Worksheet #2 - Combining If-Statement and Loops with Scratch 3.0"
        ],
        "Teaching Variables with Scratch 3.0": [
          "Learn Variables with \"Crossing the Road Game with the Crab\" in Scratch 3.",
          "Learn Variables with \"Crossing the Road Game with the Crab\" in Scratch 3."
        ],
        "Teaching Geometry and Informatics in Scratch 3.0": [
          "Teaching Geometry and Informatics in Scratch 3.0 with the \"Witch Game\""
        ],
        "Teaching Algebra by Solving Mathematical Polynomial Equations in Scratch 3.0": [
          "Building an Algebra Game Solving Mathematical Polynomial Equations in Scratch."
        ],
        "Teaching Coding with 2 More Games. The Garbage Game and the Great \"Snake\"Game": [
          "Developing \"Collect the Garbage\" Game in Scratch 3.0",
          "The Most Popular Arcade in Scratch 3.0: \"The Snake Game\"",
          "Coding the Head of the Snake Game in Scratch 3.0",
          "Coding the Body of the Snake Game in Scratch 3.0",
          "Coding the Apples of the Snake Game in Scratch 3.0",
          "Coding the \"Game over\" functionality of the Snake Game is Scratch 3.0"
        ],
        "Download all the Games in Scratch 3.0 completed": [
          "Download all the Games in Scratch 3.0 completed"
        ]
      },
      "requirements": [
        "You will not need any any prior knowledge - so get started now!",
        "You should be committed to run through the course and become knowledgeable about Scratch Programming.",
        "Nothing else! It’s just you, your computer and your hunger to get started today!"
      ],
      "description": "**** THIS COURSE  IS ORIENTED FOR TEACHERS THAT WANT TO COVER GAME DEVELOPMENT IN SCRATCH 3.0 AND CODING PRINCIPLES TO FILL THE GAP BETWEEN SCRATCH 3.0 AND REAL CODING. IT INCLUDES LESSON PLANS AND ACTIVITIES READY TO DELIVER. ***\nIn this course you will be learn how to teach coding by developing 14 different games (including the great Arcade Arkanoid Game) in Scratch programming language. For the development of this game, it is used Scratch 3.0 because is an educational programming environment that is has an easy graphical interface that it will allow us to drag and drop the right blocks of coding.\n\n\nI promise you that it will be a funny and exciting course that it will motivate your students to learn coding in more depth.\nScratch 3.0 is a free programming language and online community where your students can create their own interactive stories, games, and animations. Using Scratch, students can create online projects and develop them into almost anything by using a simple block-like interface. When they are ready, they then share, and also discuss their creations with each other. Scratch was developed by the Lifelong Kindergarten group at the MIT Media Lab. Scratch is designed to help children (ages 8 and up) learn to utilize their imaginations, practice common sense, and, most importantly, to interact with computers.\nScratch is the best educational programming software for kids available today. With Scratch, you can create games and interactive art projects all while having lots of fun!\nThis course uses the amazing Scratch program developed by MIT to teach coding. This course is meant for:\n- Everybody that is interested in learning to code, from kids to adults,  Scratch was developed by MIT to teach people to code. It is the best way to learn to code that I have been aware of in my lifetime.\n- Anyone interested in teaching beginning programming as a career or business.  Teaching kids to code is becoming big business.  Want to start your own coding academy school or get a position as an instructor?  They all use Scratch programming, learn Scratch here from a University programming instructor.\n- Anyone that already knows how to code that wants to learn from Scratch Programming and build some fun games. Why did we get into programming in the first place? Because its fun and Scratch is super fun!  No matter your level, you will have fun and learn from Scratch.  I know I did and that is what the people at MIT intended.",
      "target_audience": [
        "Anyone who wants to learn how to teach coding easily in Scratch 3.0 by creating exciting games.",
        "Beginners who have never programmed before in Scratch or used this environment in their classroom.",
        "IT Teachers curious about Game-based Learning and Serious Games"
      ]
    },
    {
      "title": "Starting 2D Game Development in Unity with C#",
      "url": "https://www.udemy.com/course/2d-game-development-unity/",
      "bio": "Begin your Game Development Journey",
      "objectives": [
        "Learn how to create 2D games in Unity 3D",
        "Learn the foundations of game development",
        "Have the skills to move up to bigger and better games"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction",
          "How to use the Course Files",
          "Course Files"
        ],
        "Welcome to Unity": [
          "What is Unity?",
          "Is Unity the right engine for me?",
          "Installing the Tools",
          "Tour of Unity",
          "The Unity Asset Store",
          "Prototyping a 2D Game in Unity",
          "Prototyping a 3D Game in Unity",
          "Layout the Unity Panels",
          "Game Design Theory - MonoBehavior"
        ],
        "Preparing to Build a Game": [
          "Planning your Game",
          "Staying Motivated and on Scope",
          "Sourcing the Resources",
          "Preparing the files"
        ],
        "Building the Game": [
          "What will you be creating",
          "Starting the Project and Creating a Staging Scene",
          "Create a test platform",
          "Build the player prefab - Animations and Physics",
          "Build the player prefab - Coding the player",
          "Create a Collectible Item for the Character to pick up",
          "Materials for Shader Effects",
          "Randomized Scenery",
          "Sorting Order",
          "Create a camera node with constraints",
          "Create a parallax background - Building the layers",
          "Create a parallax background - Coding the controller",
          "Fixing Issues between 2D and 3D Objects",
          "Create a game manager object",
          "Saving and loading game data",
          "Adding 2D Sound Effects"
        ],
        "Building the UI and Menus": [
          "Menu Design Basics",
          "Create a timer and display it on screen",
          "Creativity challenge - Making levels",
          "Create a level select screen and transitions",
          "Handle win and loss events",
          "Create a level exit and kill zone",
          "Preparing the game for Distribution"
        ],
        "Conclusion": [
          "Where to go From Here?",
          "BONUS: Should you attend a local Unite Conference?"
        ]
      },
      "requirements": [
        "Prior knowledge on C# is highly recommended"
      ],
      "description": "Unity 3D is one of the most powerful free to use game engines available today and is an excellent place to start building games.\nThis course will cover the foundations of using Unity and building a 2D platformer game.\nMake sure you watch our free to view videos to prove to you why this is the Unity course you need out of the pack.\nWhat you will learn:\nHow to navigate and use the Unity Interface\nGame development concepts and theory\nBuild a platformer game from scratch including animation, phyiscs, character movement, objects to collect, platforms and much more\nLearn about structuring your game with a main menu and level selection\nCreate re-usable prefabs to build games quickly and elegantly.\nThis course will be supported as long as possible with lifetime access, our other courses have been re-recorded several times due to software updates which offers amazing timeless value.\nFull source code and public domain resources provided.",
      "target_audience": [
        "Someone eager to get in to game development but doesn't know where to start"
      ]
    },
    {
      "title": "How To Get A Job In The Video Game Industry",
      "url": "https://www.udemy.com/course/gameindustryjobs/",
      "bio": "Create a Winning Resume, Portfolio, LinkedIn Profile & Job Application. Dominate Interviews & Networking.",
      "objectives": [
        "Stand out from other candidates and get interviews for video game jobs no matter which role you are interested in.",
        "Create winning Resumes, Cover Letters, Portfolios and LinkedIn profiles specifically tailored to the Video Game Industry.",
        "Dominate in interviews by using specific, proven tactics and strategies.",
        "Take action to get relevant video game industry experience (even if you have no experience to start with).",
        "Create your personal brand in order to make it very clear to employers why you should be hired.",
        "Create Proof-of-Value \"Artifacts\" that will make you stand out more than any other candidate and get your application to the top of the pile.",
        "Use LinkedIn to easily Network with the right industry professionals (ie. Decision Makers who can give you a job)",
        "Find (and create!) job opportunities anywhere in the world."
      ],
      "course_content": {
        "Introduction & Fundamentals": [
          "Welcome and Introduction",
          "Introducing Yourself and Asking Questions",
          "Case Study of Successful Student",
          "Project Checklist and Course Goal For You",
          "Video Game Industry Roles Available To You",
          "Big List of Video Game Industry Roles",
          "Requirements For Specific Job Roles",
          "\"Hot\" Opportunities in the Video Game Industry",
          "Why You Absolutely Have To Specialize",
          "How To Create Your Specialization Statement",
          "Discussion: Generalist Versus Specialist",
          "Job Hunting Mistakes You Have To Stop Doing",
          "End of Section Quiz - Your Understanding of The Fundamentals",
          "Section 1 Wrap Up"
        ],
        "How To Be Valuable - Get This Right First": [
          "Section 2 Introduction",
          "Always Improving",
          "How Your Value is Assessed by Employers",
          "How To Get More \"Skill-Based\" Value",
          "Discussion: Learning New Skills",
          "Finding All Your Experience Points",
          "Offering Value To Get More Experience",
          "Techniques For Getting More Experience",
          "Case Study: Getting Experience on Upwork",
          "End of Section Quiz - Having Value",
          "Section 2 Wrap Up"
        ],
        "How To Display Your Value For Maximum Impact": [
          "Section 3 Introduction",
          "A Note About LinkedIn",
          "You've Got 6 Seconds To Impress",
          "Create Your Brand and Personal Summary",
          "Create a Great Resume",
          "Write Excellent Cover Letters",
          "Mid Section Quiz - Displaying Value",
          "How To Use LinkedIn To Get A Job",
          "Create a Champion LinkedIn Profile",
          "Checklist For Creating a Great LinkedIn Profile",
          "Create A Standout Online Portfolio - Part 1",
          "Create a Standout Online Portfolio - Part 2",
          "End of Section Quiz - Displaying Value",
          "Section 3 Wrap Up"
        ],
        "How To Prove Your Value - The secret sauce revealed": [
          "Section 4 Introduction",
          "Artifacts: The Ultimate Weapon - Part 1",
          "Artifacts: The Ultimate Weapon - Part 2",
          "Discussion: Artifacts For Programmers",
          "How To Be Excellent in Interviews",
          "Secret Preparation Strategies For Your Interview",
          "Typical Things To Expect In a Video Game Interview",
          "End of Section Quiz - Proving Value"
        ],
        "Networking and Job Opportunities": [
          "How To Find Job Opportunities",
          "Using LinkedIn To Network Like a Pro",
          "Creating Job Opportunities",
          "End of Section Quiz - Networking and Opportunities"
        ],
        "Bonus Lectures And New Content": [
          "Getting Jobs In Other Countries",
          "Congratulations & Good Luck!",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Be passionate about wanting to work in the video game industry",
        "Have some basic game creation skill or knowledge - for example, some skills in 2D art or 3D art, programming, game design, project management, audio design, game testing, community management, and so on."
      ],
      "description": "Please note: This course focuses on landing your dream job in the video game industry however the strategies included apply to any creative and technical profession.\nIf you're interested in game development and aspire to have a career making video games, this course will help maximise your chances of finding opportunities, getting interviews and dominating the job application process in order to land your dream job in the video game industry.\nNo matter what role you're interested in (programmer / developer, artist, designer, producer, QA tester and so on) and what experience level you currently have (from \"none\" to \"a lot\"), this course takes you through all of the fundamentals (eg. building your resume, writing cover letters, creating a portfolio, crafting your LinkedIn profile) and dozens of insider tips and strategies that 95% of your job-hunting competitors are not (yet) using.\nThe course is perfect for people who are self-taught from taking courses, those who are soon-to-be and recent graduates, people who are switching careers or industry veterans looking for a change or promotion.\nWhy you'll get HUGE VALUE from this program...\nYou'll have the skill to create \"Artifacts\" - the technique which allows you get get interviews even if you have very little or no job experience in the games industry.\nYou'll create your Personal Brand - a critical step in passing employers \"6-second test\", and a brilliant way to make writing resumes, cover letters, LinkedIn profiles, emails and connection requests easier and more impactful.\nYou'll become a LinkedIn Master - using this incredibly valuable tool to connect with Decision Makers, make new opportunities, gather important intel and opening doors that would otherwise be tightly shut.\nYou'll learn from real-world Case Studies - job seekers like yourself who followed the teachings in this program got the interviews and job offers they wanted in the video game industry.\nYou'll know exactly how you can Get More Experience on your Resume - its tough to get a job if you have no experience right? This course will show you how anyone can get experience by being smart and offering needed value to teams.\nGet plugged into our communities of amazing developers on Facebook (nearly 20k), in our own TA-curated Community (17k views/day), and our student chat group (10k live at any one time).\nSee you in the course\nBen & Rick\nPS Want to get more skills before you dive-in? Check-out our comprehensive catalog of world-class game development tutorials.",
      "target_audience": [
        "Anyone who is serious about finding work in the video game industry.",
        "Students who already have some basic video game skill or training (for example, have completed an art diploma or a game design program or a computer science degree or have made some of their own games for fun or have played many games and are good at explaining the design of those games).",
        "The course is most valuable for those folks who are ready to start looking for jobs now, or will be ready within the next 6 months."
      ]
    },
    {
      "title": "Learn Unity Shaders from Scratch",
      "url": "https://www.udemy.com/course/learn-unity-shaders-from-scratch/",
      "bio": "A complete guide to Unity ShaderLab, URP Shaders, Shader Graph and the HLSL Shading Language using Unity 6",
      "objectives": [
        "The mysteries of writing Unity shaders",
        "You will be gently introduced to how to approach the problem of creating a custom shader.",
        "You will learn the full details of the HLSL shader language.",
        "You will learn to use the Surface Shader syntax to add custom shaders on top of Unity lighting.",
        "You will start with simple unlit 2D shaders and work up to advanced effects such as volumetric shaders and clipping.",
        "Learn to create shaders that work with the Universal Render Pipeline (URP)",
        "Learn to use Shader Graph to create your shaders"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the course",
          "Introduction",
          "Parallel Processing",
          "Cg is not C#",
          "What have you learned?"
        ],
        "First Steps": [
          "Your first shader",
          "Working with vectors in Cg",
          "Using the Properties section",
          "Blending colours",
          "Using step and smoothstep",
          "What have you learned?"
        ],
        "Shaping Functions": [
          "Drawing a circle",
          "Drawing a square",
          "Moving our shape",
          "Moving the square with the mouse",
          "Moving the shape over time",
          "Rotating the square",
          "Changing the rotation centre and scaling",
          "Tiling",
          "Drawing circles",
          "Drawing lines",
          "Combining lines",
          "Showing a polygon",
          "Creating a brick pattern",
          "What have you learned?"
        ],
        "Noise": [
          "#pragmas",
          "What’s all that noise?",
          "Using noise to create a fire shader",
          "Using noise to create wood and marble",
          "What have you learned?"
        ],
        "Textures": [
          "A simple use of a texture image",
          "Ripple the image",
          "Blend between textures.",
          "What have you learned?"
        ],
        "Vertex shaders": [
          "Turning a box into a sphere",
          "Using the Unity lighting - Lambert",
          "Note",
          "Creating a ball of lava",
          "What have you learned?"
        ],
        "Surface Shaders": [
          "ShaderLab Surface Shaders - an introduction",
          "Bump mapping",
          "Fresnel shading",
          "Environment mapping",
          "Adding a bump map to a reflective surface",
          "Blinn Phong lighting",
          "Custom lighting",
          "Standard lighting",
          "Adding a vertex function to a surface shader",
          "What have you learned?"
        ],
        "Advanced effects": [
          "Lighting in a vertex, fragment shader",
          "A position location shader",
          "Drawing a cross on the floor",
          "Tessellation",
          "Using the stencil buffer",
          "Clipping the output",
          "What have you learned?"
        ],
        "Transparent shaders": [
          "Alpha transparency in a surface shader",
          "Space Pirate turns to glass"
        ],
        "Volumetric Shaders": [
          "Volumetric Rendering",
          "Using textures in the render"
        ]
      },
      "requirements": [
        "All you need is a copy of Unity, freely available for students.",
        "A knowledge of the basics of using Unity is assumed, this is readily available by many online tutorials.",
        "No knowledge of shaders is assumed.",
        "A knowledge of a programming language would help but is not assumed."
      ],
      "description": "For the last 5 years I have been working with the team at Unity to create learning resources for them including e-books. Using this insider knowledge I bring you the best Unity Shader course you can find. All updated for Unity 6. Including URP shaders and Shader Graph.\nWith Unity 6 the Universal Render Pipeline (URP) is now the default pipeline. This course shows you how to create shaders for URP either using code or if you are not a coder using Shader Graph. Putting you right at the cutting edge.\nIn this course we're going to look at using HLSL shading language to create amazing shaders.\nMaybe you are\na developer struggling to bring to life a particular game feature because it needs a custom shader.\na developer who always wanted to create custom shaders but was too scared to start.\na developer wanting to add some custom post-processing effects to your 3d renders.\nan artist wanting to create shaders without learning to code.\nHLSL code syntax is based on the C language, but fear not, we will assume you have literally no knowledge of this language at all and we will, as the course title states, learn this from scratch. A shader uses the GPU ( the Graphics Processing Unit) to handle multiple programs at the same time, so it is unbelievably fast.\nWe will start from really simple examples and progress slowly through each stage of developing a custom shader. You will be able to play with the shader code using Visual Studio, or another code editor if you prefer. You can experiment with different values to see the impact it has on the end result.\nUnity shaders are split into vertex shaders and fragment shaders and we will focus initially on the fragment shader, working essentially in a 2d environment. With dozens of shaders in the course resources you will learn the language in gentle stages. Before moving on to use Unity's surface shader syntax to easily include complex lighting.\nOnce you're comfortable with simple shaders we will cover advanced effects such as tessellation, transparency, using the stencil buffer and post-processing.\nCreating your own shaders means understanding the HLSL language and that is the aim of the course. You could search for a suitable shader on ShaderToy or ShaderFrog and then try to adapt the code. But without knowing the language you're going to find that difficult to do. To really be effective you need to know about the  language, shaping functions, tiling and lighting calculations. To do this you will need to follow along with the course and complete the many challenges suggested. At the end you will then be able to create any shader that you can imagine.\n\n\nAs usual there is a 30 day money back guarantee. So you have nothing to lose. Let's get shading today!\n\n\nWhat students say about the course\n\"Great course. Took this as a refresher to get back into shaders. Everything you need is provided. Both starting scenes for each lecture and also completed ones if you get stuck with code errors. Nice learning curve. Everything is well explained. No long boring slideshows. Also plenty of challenges, which I like and find very useful in assisting your learning. Very clear audio and code. So no problems following along and plenty to take in. Also Nicholas is very helpful with your Q&A’s. Highly recommended.\"\n\"The information presented in this course is fantastic. The tutor has a great personality, and I can’t stress enough how enjoyable he makes this course.\"\n\"It is fantastic. You need a little bit of math to understand it better but with attention and repetition it will be easy to anyone. Thanks a lot professor!\"\n\"Exceptional good structured step by step course. Background knowledge is provided on spot when necessary. Nik has a special encouraging attitude and he is fun to listen to. Thanks!\"\n\"The best shaders instructor I've seen so far. His lessons are clear, practical, and the way he talks keeps the student motivated with the right amount of humour but without losing focus! I'm glad I've found this course.\"\n\"I would say that this was the best course I have bought on Udemy so far.\"\n\"If you’re looking to dive deep into Unity shaders, this course is a goldmine. Nicholas walks you through the fundamentals and pushes you to try new things, which makes learning feel much more rewarding.\"",
      "target_audience": [
        "Unity developers who need to go beyond the shaders available on the platform.",
        "Developers keen to learn the HLSL shading language for other development platforms such as Unreal."
      ]
    },
    {
      "title": "Blender Character Creator for Video Games (Updated to 4.2)",
      "url": "https://www.udemy.com/course/blendercharacters/",
      "bio": "Model Video Game Characters. Use The Sculpt Tool To Shape, Add Texture + Rig Video Game Characters in Blender 4",
      "objectives": [
        "Learn to craft epic 3D characters in Blender from scratch to pro level.",
        "Dive into Blender's interface by creating a fun mech character hands-on.",
        "Build game-ready mechs and orcs to spawn in your own games and films.",
        "Explore armour and clothing design to gear up your characters in style.",
        "Master sculpting tools to shape your orc's muscles like a boss designer.",
        "Discover retopology and modifiers to add overpowered details effortlessly.",
        "Create stunning textures on low-poly meshes without lagging your game.",
        "Level up your skills by rigging, posing, lighting, and rendering your models."
      ],
      "course_content": {
        "Introduction & Setup - New Blender 4.2 Content": [
          "Introduction to the course",
          "Content Now in Blender 4.2!",
          "Download & Setup",
          "The Interface",
          "Block Man",
          "Community & Support",
          "loop Cuts",
          "Extrude",
          "The Mirror Modifier",
          "Transform options",
          "Shading & Materials",
          "Textures & Viewport Rendering",
          "Rendering"
        ],
        "Mech Master - New Blender 4.2 Content": [
          "Section Intro - Mech Master",
          "The Cockpit",
          "The Undercarriage",
          "The Legs",
          "The Guns",
          "Adjustments & Pose",
          "Materials & Slots",
          "Rendering Cycles",
          "Rendering Animation"
        ],
        "Blocking Out - New Blender 4.2 Content": [
          "Section Intro - Blocking out",
          "Reference Images",
          "Background Images",
          "Blocking out the body",
          "Blocking out the Hand",
          "The Sculpting Workspace Blender 4.3",
          "Intro to Sculpt Mode",
          "Symmetry",
          "Remesh",
          "Blocking Out the Upper Body",
          "Lower Body Block out",
          "Joining & Remeshing",
          "Box modelling the boots",
          "Blocking out the hand"
        ],
        "Sculpting Level 1 - New Blender 4.2 Content": [
          "Section Intro - Sculpting Base Level",
          "The Beginning Face Shape",
          "Positioning the eyes",
          "Eyes & Nose Shape",
          "Mouth and Teeth",
          "Quick face sculpts",
          "Fingers & Thumb",
          "Hand Beginning Shape",
          "Sculpting the Torso",
          "Back & Arms",
          "Legs"
        ],
        "Clothing - New Blender 4.2 Content": [
          "Section Intro - Clothing & Armour",
          "Reshaping the Boots, Sole, & Toecaps",
          "Reshaping with Shrinkwrap",
          "Boots Extra Armour",
          "The Belt",
          "The Loincloth",
          "The Shoulder Plate",
          "Strap Challenge"
        ],
        "Retopology - New Blender 4.2 Content": [
          "Section Intro - Retopology",
          "Automatic Retopology",
          "Finger Retopology",
          "Hand Retopo",
          "Arm Retopo",
          "Body Retopo",
          "Body Retopo Tidy-up",
          "Waist Retopo front",
          "Waist Retopo back",
          "Waist Retopo tidy-up",
          "Leg Retopo",
          "Face Retopo 1 - Edge Flow",
          "Face Retopo 2 - Connecting loops",
          "Face Retopo 3 - Filling in",
          "Face Retopo 4 - Nose, Mouth & Eyes",
          "Face Retopo 5 - Back of the Head",
          "Ear Retopo",
          "Join the sculpt",
          "Join the Retopology"
        ],
        "Detailed Sculpt - New Blender 4.2 Content": [
          "Section Intro - Detailed Sculpt",
          "Adding the Multiresolution modifier",
          "Unwrap",
          "Hand & Fingers",
          "Arm & Torso",
          "Legs",
          "The Head",
          "Adding Texture Brushes to the Body",
          "Head Details",
          "Asymmetry",
          "Preparing the Shoulder Plate",
          "Sculpting the Shoulder Plate",
          "Sculpting the Horns",
          "Preparing the Boots",
          "Sculpting the Boots",
          "The Belt Plate",
          "The Loin Cloth & Straps"
        ],
        "Unwrap & Bake - New Blender 4.2 Content": [
          "Section Intro - Unwrap & Bake",
          "Unwrapping the Orcs Body",
          "Unwrapping the Armour",
          "Baking Normal Maps - Multires",
          "Baking Ambient Occlusion & Cavity Maps",
          "Baking Selected to Active",
          "Baking the Armour Normals",
          "Baking the Armour Cavity Maps",
          "Baking the Armour Ambient Occlusion Maps",
          "Simpler Texture Options"
        ],
        "Texture Painting - New Blender 4.2 Content": [
          "Section Intro - Texture Painting",
          "Texture Painting the Orc",
          "dealing with Brush Lag",
          "Metallic Maps",
          "Roughness Maps",
          "Using Texture Brushes",
          "Using Stencil Brushes",
          "Brush Blend Modes",
          "PBR Workflow Options",
          "Painting the Belts",
          "Completing the straps",
          "Joining Our Materials",
          "Fill Brush & Blend Modes",
          "Adjusting Roughnes Maps",
          "Adjusting Roughness Maps - Straps",
          "Cleaning the Cavity Map",
          "Cavity Map to Roughness",
          "Material Options - the Eyes"
        ],
        "Posing & Rendering - New Blender 4.2 Content": [
          "Section Intro - Posing Lighting & Rendering",
          "Setting Up the Rig",
          "Parenting the Rig",
          "Weight Painting",
          "Shoulder Armour",
          "Lighting",
          "Posing & Rendering",
          "Final Message"
        ]
      },
      "requirements": [
        "You should be able to use a PC at a beginner level.",
        "A 3-button mouse with scroll wheel recommended."
      ],
      "description": "This course has been updated to Blender 4.2, but is still compatible with older versions of Blender.\nTake your first steps to becoming a 3D character artist - learn everything from modelling to painting to rigging the character. The course is the sequel to the highly popular Blender Character Creator course, enjoyed by 10s of thousands of students.\nThis course has been created using Blender 4.2 and is compatible with newer versions of Blender.\nWhether you're a beginner or more advanced, the experienced instructors will take you through every step of the process, ensuring that you aren't just \"copy and pasting\" what you see, but learning the tools and developing your own creative process as you go.\nFor each concept taught this course includes a relevant challenge for you to implement yourself. You can follow along with the Orc model used in the course, or create your own character using reference material or your own sketches.\nThe course will show you how to create a highly detailed, great looking character for your portfolio.\nThe entire course is project-based, so you will apply your new skills immediately to real 3D models. All the project files will be included, as well as additional references and resources - you'll never get stuck. There are talking-head videos, powerful diagrams, quality screencasts and more.\nFor each model you build, you will follow this process...\nBe challenged to build the entire model yourself.\nBe shown step-by-step how to build it.\nApply your knowledge regularly.\nEncouraged and supported throughout your journey\nYou will get full lifetime access for a single one-off fee. If you're a complete beginner, we'll teach you all the modelling fundamentals you'll need. If you're an artist, we'll teach you to truly bring your assets to life. If you're a coder, we'll teach you modelling and design principles.\nAll students have access to the Q&A where our Instructors, Teaching Assistants and Community are ready to help answer your questions and cheer on your success.\nNote: access to this course comes with an optional, free community site where you can share games and 3D models, as well as connect with thousands of other students.\nDive in now, you won't be disappointed!",
      "target_audience": [
        "You want to create and rig awesome characters.",
        "You'd like to add your character into a game engine."
      ]
    },
    {
      "title": "Python GUI Programming Recipes using PyQt5",
      "url": "https://www.udemy.com/course/python-gui-programming-recipes-using-pyqt5/",
      "bio": "Learn to design a UI with help of PyQT5",
      "objectives": [
        "Visually add and arrange many widgets using QT Designer",
        "Decouple the Python code from the generated QT UI code",
        "Use CSS styling to greatly enhance the GUI look-and-feel",
        "Connect the GUI to a SQL database",
        "Keep the GUI responsive via multiple threads",
        "Learn how to use many widgets in the PyQT5 toolbox",
        "Develop GUIs in a modular style"
      ],
      "course_content": {
        "Introducing the PyQt5 Framework": [
          "The Course Overview",
          "Installing the PyQt5 Framework",
          "Creating Our First GUI in PyQt5",
          "Adding Widgets to the GUI",
          "Layout of Widgets",
          "Introducing the PyQt5 Framework"
        ],
        "Designing Python GUIs with Qt Designer": [
          "Installing Qt Designer Tools",
          "Creating Our First GUI Using Qt Designer",
          "Adding Widgets with Qt Designer",
          "Qt Designer Widget Layout",
          "Converting the Qt Designer UI Code to Python Code",
          "Designing Python GUIs with Qt Designer"
        ],
        "Enhancing the Qt5 GUI Functionality": [
          "Calling Dialogs from the Main Window",
          "Decoupling Python Code from Generated UI Code",
          "Building a Complex GUI with PyQt5",
          "Multi-threading Keeps Our GUI Responsive",
          "Using Drag and Drop Within the PyQt5 GUI",
          "Enhancing the Qt5 GUI functionality"
        ],
        "Advanced Qt5 Programming": [
          "Using the OpenGL Graphics Library",
          "Networking and SQL Database",
          "Animation Inside the GUI",
          "Using CSS Styling to Greatly Enhance the GUI Look-and-Feel",
          "PyQt5 ‘Signals and Slots’ Event Handling Mechanism",
          "Advanced Qt5 Programming"
        ],
        "User Interface Design": [
          "What We See when We Look at the Existing GUIs",
          "A Question of Design of User Interfaces",
          "Displaying Google and Qt5 Maps",
          "How to Create iPhone and Android Apps with Qt5",
          "How to Rock the World with Your GUI",
          "User Interface Design"
        ]
      },
      "requirements": [
        "Python programmers who wish to enhance their Python skills"
      ],
      "description": "Python and one of its QT bindings, PyQT, has changed the face of GUI development. It allows us to build beautiful and powerful GUIs that grab the attention of Python programmers. QT5 has several advantages over other GUI frameworks such as tkinter and wxPython.\nIn this video, we will successfully install PyQt5 and the toolset that contains the QT Designer tool. The QT Designer enables us to develop our GUI in a visual manner, using drag and drop to add and position widgets, and we will use it extensively. We will then learn how to convert QT Designer-generated code into pure Python code.\nAfter having successfully installed PyQt5, the QT Designer, and all other required QT tools, we will start out simple, building a Python GUI using only a few lines of PyQT5 code. Then, we will build a more complex GUI using QT Designer. Along the way, we will explore many QT widgets and learn how to efficiently lay out our GUI design. We will enhance the look-and-feel of the GUI using CSS styling. We will also connect our GUI to a SQL database, which we will create. We decouple the business logic code from the UI code, using best practices. At the end of this video tutorial, viewers will be able to develop complex GUIs using PyQt5.\nAbout the Author :\nBurkhard Meier is a professional software test automation designer, developer, and analyst. He has more than 17 years' professional experience working for several software companies in California, USA.\nHe is the author of Python GUI Programming Cookbook, First and Second Edition. This book is also available as a Packt video course.\nHe is also the author of the Python Projects Packt video course.\nIn his professional career, he developed advanced in-house testing frameworks written in Python 3. He also developed advanced test automation GUIs in Python, which highly increased the productivity of the software development testing team.\nWhen not dreaming in Python code, he reads programming books about design, likes to go for long walks, and reads classical poetry.",
      "target_audience": [
        "This video is for intermediate Python programmers who wish to enhance their Python skills by writing powerful GUIs in Python using PyQt."
      ]
    },
    {
      "title": "Introduction to World Machine",
      "url": "https://www.udemy.com/course/introduction-to-world-machine/",
      "bio": "Gain a strong foundation into the world of procedural terrain generation taught by a 13-year game industry veteran.",
      "objectives": [
        "Create high resolution, highly detailed terrains for rendering or game development.",
        "Texture terrains based on World Machine's masking and coloring devices.",
        "Gain confidence in which node achieves the desired result.",
        "Assemble macros to simplify terrain construction and keep graphs clean.",
        "Understand what all the values within all the nodes actually do to the terrain."
      ],
      "course_content": {
        "Course Overview and Required Files": [
          "Introduction",
          "Download Required Content!"
        ],
        "The User Interface: What Does Everything Do?": [
          "User Interface Overview",
          "Navigating the Device View",
          "Rendering the Terrain",
          "Generators: What do they do?",
          "All About the Layout Generator",
          "Advanced Perlin Generator In-Depth",
          "Combiners: Blending Procedural Data",
          "Filters: Manipulating Terrain Data",
          "Natural: Applying Nature's Effects to Your Terrain",
          "Output: Exporting Terrain Data",
          "Selectors: Masking For Effect",
          "Converters: Generating New Data",
          "Parameters and Flow: Driving the Procedural Inputs",
          "Tools and Favorites: Workflow Enhancements",
          "Getting the Scale Right: Setting Extents and Resolution"
        ],
        "Let's Build Something: The Alpine Terrain": [
          "Creating the Shape",
          "Developing the Ground",
          "Adding Small Details",
          "Fundamentals of Coloring the Terrain",
          "Creating Macros for Frequently Used Graphs",
          "Final Color Techniques",
          "Using Textures in World Machine"
        ],
        "Exporting World Machine Data": [
          "Setting Up the Splat Map and Export",
          "World Machine to Unity Pipeline",
          "World Machine to Unreal Engine Pipeline"
        ],
        "Last Thoughts": [
          "Included Scenes and Techniques in World Machine"
        ]
      },
      "requirements": [
        "If you don't own the Professional version of World Machine, you can download the Basic edition at http://www.world-machine.com. This course does not require the Pro version.",
        "Some files are required for some lectures of the course. They are included.",
        "Source project files are included."
      ],
      "description": "\"Introduction to World Machine\" covers everything you need to put you on a solid foundation to construct your own high quality terrains for film or video games.\nGuaranteed to be the most exhaustive fundamental overview of World Machine's toolset online, I'll cover the effects of each node and how it can be used, and we'll give special coverage on the Advanced Perlin and Layout generators as well as Macro construction. No philosophy here or long-winded explanations; just functional and practical instruction to help you achieve your goals. Once complete, you'll also learn how easy it is to take your World Machine creation, texture it, and bring it into the Unity 5 engine.\nAt the end of the course, you will not just learn World Machine, you'll understand how other procedural texturing systems can benefit you.\nA licensed copy of World Machine is not required!",
      "target_audience": [
        "This course is aimed at those who want to understand, not just learn, World Machine.",
        "No prior knowledge of World Machine is assumed, but those with some familiarity will also benefit from the course."
      ]
    },
    {
      "title": "Unreal Engine 5 - Blueprints Game Developer Masterclass",
      "url": "https://www.udemy.com/course/unreal-engine-5-blueprints-game-developer-masterclass/",
      "bio": "Learn Blueprints and create your own games without any coding knowledge. Create your first AAA game via this course.",
      "objectives": [
        "Learn to program using Blueprints, without needing to write code.",
        "Create logics using Blueprints system.",
        "Learn Events, Function, Flow Control, Arrays, Variables, Blueprint Communication and a lot more.",
        "Setup an FPS human-controlled character.",
        "Start your Indie Game Development journey without knowing how to code.",
        "Make a complete game by the end of this course."
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction"
        ],
        "Unreal Engine Fundamentals": [
          "Blueprints Introduction",
          "Event Graph Basics",
          "Blueprints Execution Order",
          "Always Use Comments",
          "Organize Your Blocks Connections",
          "Different Nodes Shapes and Colors",
          "Fundamentals Chapter Practice Test"
        ],
        "What are Variables": [
          "Type of Variables",
          "Integer",
          "Float",
          "Boolean",
          "Vector",
          "Rotator",
          "Text, String and Name",
          "String Functions",
          "Math With Variables",
          "Conditionals Between Values",
          "Get and Set Variables",
          "Private and Public Variables",
          "Expose Variables in The Scene",
          "Spawn Actors in The Scene Via Blueprints",
          "Variables Chapter Practical Test"
        ],
        "Learn Arrays": [
          "Introduction to Arrays",
          "Create Your First Array",
          "Get Element From Array",
          "Find Item In Array",
          "Find The Length of The Array",
          "Array Last Index",
          "Array Contains",
          "Insert Item In Array",
          "Remove Item From Array",
          "Clear The Array",
          "Append Array",
          "Arrays Chapter Practical Quiz"
        ],
        "Understanding of Unreal Engine Flow Control": [
          "Branches",
          "Sequence",
          "For Loop",
          "While Loop",
          "Do N",
          "Do Once",
          "Flip Flop",
          "Gate",
          "Multi Gate",
          "Flow Control Chapter Practical Quiz"
        ],
        "Functions, Events and Macros": [
          "Functions, Events and Macros",
          "Collapse Nodes",
          "Events",
          "Custom Events",
          "Custom Events Inputs",
          "Functions",
          "Functions - Inputs and Outputs",
          "Macros",
          "Macros and Exec",
          "Macros Library",
          "Functions, Events and Macros Chapter Practical Quiz"
        ],
        "What are Enumerators": [
          "Enumerator Explanation",
          "Get and Set",
          "Creating Custom Enumerators",
          "Compare Enumerators Values",
          "Switch Utility with Enumerators",
          "Enumerators Chapter Practical Quiz"
        ],
        "Classes": [
          "Game Structure",
          "Actors",
          "Components",
          "Game Mode",
          "Pawn",
          "Character",
          "Controller",
          "Classes Chapter Practical Quiz"
        ],
        "Actors": [
          "Static Mesh",
          "Transformations",
          "Spawn and Destroy Actors",
          "IsValid Check",
          "Get All Actors",
          "Skeletal Mesh",
          "Triggers",
          "Mesh Tags",
          "Actors Exercise",
          "Actors Exercise Solution"
        ],
        "Blueprints Communication": [
          "Blueprint Communication",
          "Direct Communication",
          "Cast",
          "Blueprint Interfaces - Basics",
          "Blueprint Interface - Inputs",
          "Blueprint Interface - Outputs",
          "Event Dispatcher"
        ]
      },
      "requirements": [
        "No programming experience necessary.",
        "You'll need a PC or Mac capable of running Unreal Engine.",
        "About 15GB of free disc space.",
        "At least 8GB of RAM is recommended.",
        "Basic Unreal Engine Editor skills like move around your camera, rotate, scale and move objects."
      ],
      "description": "This is a complete Blueprints Masterclass in Unreal Engine 5.\n*The Course is updated frequently with new content.\nIn this course we are entirely focused on how to make games without writing code in Unreal Engine 5.\nYou will learn Unreal Engine powerful visual coding system known as Blueprints.\nThis course will cover all beginners topics, so you will need no prior experience or knowledge of Unreal Engine 5 or game development in general.\nWe will start with all the basic concepts around Blueprints system and gradually increase our Blueprints knowledge.\n\nWhat are Blueprints?\nBlueprints is the visual system of Unreal Engine 5 which a non-coding users can use in order to create full games.\nIt is a representation of the C++ code visually via blocks.\nThis way you will be able to create whole games without having to know any programming language.\n\nThe aim of this course is not only to explain the blocks behind Blueprints system, it is rather to teach you the fundamentals behind game development.\nYou will have a lot of examples, quizzes and tests across this course.\n\nWhat is included in this course?\nIn this course I'll be covering all the fundamentals that you will need in order to start creating your own games.\nUnreal Engine 5 allows you everything you can imagine to be created, like interactive projects, games, films and much more. You will learn how to use very advanced tools that all the big gaming companies are using.\n\nSo if you want to start creating games, but don't have that coding knowledge - Unreal Engine 5 is the way!\nThis course will cover topics like Communication between Blueprints, variables, event, functions, how to manipulate materials, Timelines, Vectors, First Person and Third Person Characters, UI/UX and a lot more!\n\nUnreal Engine 5 - Blueprints Masterclass is not your typical tutorial course in which you will follow few steps and make a game. The purpose is to teach you the fundamentals and give you the knowledge that you need in order to start creating games from scratch.\n\nDo I have to know how to code?\nNo coding experience is required!\nYou just need to know how to navigate in Unreal Engine and the core basics of the editor - panels, move, scale and rotate objects.\n\n\nYou will get full lifetime access for a single one-off fee. Not only that, but you will also receive all the updates and patches that are constantly made to this course.",
      "target_audience": [
        "Complete Blueprints and Unreal Engine beginners with no prior experience.",
        "Individuals who want to develop games but not write code.",
        "Developers who want to learn how to use the Unreal Engine.",
        "Students who have tried coding before but couldn't make progress.",
        "This course is ideal if you want to make your own video games in Unreal Engine.",
        "If you have experience in other engines such as Unity.",
        "Programmers who want to solidify their Blueprint scripting skills.",
        "Anyone who wants to release games and earn a side income from game sales.",
        "Experienced developers who want to brush up on their skills.",
        "Artists that want to create their own Projects and Games."
      ]
    },
    {
      "title": "Become A Game Maker With GameMaker Studio 2",
      "url": "https://www.udemy.com/course/become-a-game-maker-with-gamemaker-studio-2/",
      "bio": "Learn to make GameMaker Studio 2 games with this walk-through on how to make a game.",
      "objectives": [
        "Develop games for GameMaker Studio 2",
        "Implement features such as health into the game",
        "Create a boss battle",
        "Create a character that the player can control"
      ],
      "course_content": {},
      "requirements": [
        "You should learn how to use a basic PC",
        "You should have the GameMaker Studio 2 Desktop License"
      ],
      "description": "Learn To Make GameMaker Studio 2 games in this course by building a game with commonly used mechanics.\nWe will be covering how to code in GML, and how to use that code to build your game.\nThis entire course uses the game we are building as a way for you to learn how to implement certain tools GameMaker Studio 2 gives you.\nYou'll learn how to use -\nThe Create and Step Event\nAlarms (Timers)\nCollision Functions\nTile-maps\nRoom Functions\nView Functions\nThe built in image variables\nThe location variables for both the object and mouse\nCreation code\nObjects\nSprites (and it's new animation system)\nIf you don't know how to program this course is for you, you are walked through on how to solve certain problems and implement certain mechanics.\nThe boss fight we produce in the end uses everything we learned in the course.\nSo what are you waiting for? Enroll in this course and become a game maker with GameMaker Studio 2!",
      "target_audience": [
        "Anyone who wants to make games",
        "Anyone wanting to become a game developer",
        "Anyone who wants to learn programming"
      ]
    },
    {
      "title": "Coding in Unity: Mastering Procedural Mesh Generation",
      "url": "https://www.udemy.com/course/coding-in-unity-procedural-mesh-generation/",
      "bio": "Learn to procedurally program meshes in Unity, from simple shapes to complex terrain and infinite fractal landscapes.",
      "objectives": [
        "Use Unity to generate complex meshes from code.",
        "Create realistic looking landscapes with Perlin and fractal noise.",
        "Program two and three dimensional shapes.",
        "Procedurally generate meshes for both 2D terrain and 3D landscapes.",
        "Use your knowledge of meshes to add vertex colours, and calculate UVs, normals and tangents."
      ],
      "course_content": {},
      "requirements": [
        "You should have and know how to use Unity 5 or above (the free version is fine).",
        "You should be able to to program in C#."
      ],
      "description": "Learn how to procedurally generate meshes in Unity 5.6 or above. You'll start with simple shapes and work your way up to complex, fractal landscapes. This is a code-along style course where you'll learn how program meshes at each stage.\nLearn, Understand and Master Procedural Generation with this Intermediate Unity Course.\nLearn about the different properties of a mesh.\nCreate two and three dimensional shapes.\nCalculate UVs, normals, tangents and vertex colours.\nUnderstand how to use Perlin and fractal noise to generate 2D terrain and 3D landscapes.\nLearn how to program large and infinite landscapes for you game.\nA powerful tool for making games.\nIn this course, you will learn to procedurally generate meshes from geometric objects to worlds with randomly generated terrain. Many popular games use some form of procedural generation, from Minecraft to Dwarf Fortress. Mesh generation is just one aspect of procedural generation which encompasses topics such as texture generation, object placement, and even story generation.\nBy the end of this course, you’ll be able to generate unique and impressive landscapes from code ready to use in your games. Source code is included to help you on your way.\nI designed this course to be easily understood by intermediate level coders and users of Unity with no previous experience of mesh generation.\nI present examples of increasing difficulty designed to help you to understand exactly how mesh generation is done, and guide you through the theory behind it so that you can be confident in creating your own meshes.\nFor extra support, you can ask questions in the Q&A section, and I’ve provided the completed code examples for download in each Section. You’ll receive a certificate of completion once you finish the course.",
      "target_audience": [
        "Intermediate level Unity developers who want to learn procedural mesh generation.",
        "This course is not for people new to Unity or C#."
      ]
    },
    {
      "title": "Flame & Flutter with Dart : Build your First 2D Mobile Game",
      "url": "https://www.udemy.com/course/code-a-2d-mobile-game-in-less-than-6-hours/",
      "bio": "Game Development from ground up. Learn to design and code a 2D Mobile Game, using full Architectural approach with UML",
      "objectives": [
        "Use Flutter and Dart to write a complete 2D Game on top of the Flame Engine. No prior experience necessary.",
        "Create from scratch, a game based on the famous retro-game from ATARI: Asteroids.",
        "Learn collision detection, particle physics, frame independent motion, parallax, sound design, and other advanced topics in game development.",
        "Master design and coding fundamentals that apply to all 2D Game engines.",
        "Think like a Software Architect. Go through the complete process of designing, architecting, and coding the game.",
        "Learn how to write once and deploy to iOS, Android, and the Web from a single codebase.",
        "Develop a solid foundation for game design and game creation that will empower you to build your own games.",
        "Learn how to use Object Oriented Programming practically and effectively using Design Patterns"
      ],
      "course_content": {},
      "requirements": [
        "We assume that you have some coding experience with an Object Oriented language such as Java, C++, C#, Swift, or TypeScript.",
        "Some knowledge of Flutter/Dart is helpful but not strictly required. We will teach you everything you need to know.",
        "Access to a computer. A Mac, Windows, or a Linux based operating system is equally fine. All the tools are OS Independent.",
        "You should have access to a mobile device but this is not strictly necessary as we will develop our code on an emulator/simulator first."
      ],
      "description": "Have you ever dreamed of creating your own mobile game?\nHave you ever wanted to code your own mobile game?\nIf the answer is YES, then THIS course is for you.\n\n\nYou can learn to code a 2D mobile game from the ground up.\nWelcome to the Flame Engine 2D Game Crash Course where you will learn how to design and code a full mobile game in less than 6 hours.\n\n\nThere are so many game enthusiasts who would love to learn how to write mobile games, but do not necessarily have the time to dedicate to it.\nMany Game Engines have a steep learning curve, so creating a full mobile game would take considerable time and effort.\nWe have created this course for all the coders who want to get into creating their own mobile game using a 2D Game Engine, and more importantly, we have created this course to take you from 0 to hero in less than 6 hours.\nWe have provided core 6 hours of lectures but, we also provided more than 5 extra hours of Bonus Material including Coding Exercises and extra eplainers.\n\n\nWhy Flame Engine\nThe Flame Engine is a minimalist 2D game engine that runs on top of the Flutter framework. So it is light-weight with a small footprint.\nThis is perfect for mobile games.\n\n\n\n\nAdvantages of The Flutter Framework\nYou work with one code base but get multiple platform deployment. Basically write once, and deploy to both iOS and Android. This is a huge advantage as it saves you time and effort.\nAnd this is great for mobile games since we do not rely on the specific OS GUI as we basically take over the screen and create our own GUI from scratch.\n\n\n\n\nCrash Course Format\nThis is a crash course. So we remove all the fluff from the usual approach and we focus and zone in, with laser precision, on the fundamentals that apply to all 2D engines. We explain the necessary fundamentals such as:\n\n\nGame Loop\nComponent Rendering\nSpritesheet Animation\nGame Mechanics\nInter-Component Communication and Messaging\nComponent Interoperability and Composability\nCollision Detection\nParticle Physics\nMath for Game developers such as:\nVector Math\nVelocity Control\nRotational Control\nCollision Detection\nBoundary Detection\nGame Parallax For Creating Complex Background Motion\nSound Design  - For Adding Sounds, Sound Effects, and Music to Your Game.\nAll The needed API will be explored as well.\n\n\n\n\nFocus on Fundamentals\nWe will spend the first 3 hours focusing on fundamentals with sample code and architectural examples.\n\n\n\n\nArchitectural Approach\nOur approach to teaching the material is a bit different from most courses. We take the architectural approach. This means that we will also teach you some Software Engineering while we are teaching you about the Flame Engine.\nWe will use UML diagrams to show you the context of what we are doing. All of this is to give you a better perspective of how everything fits together.\nIn other words we will not only work with code. The main objective here is to teach you to think like a Software Architect. We do not want you to just code this game. We want you to go through the process of designing and architecting it in a professional manner.\n\n\n\n\nUsing Case Studies\nPart of how we teach you in this course revolves around practical case studies. Each case study shows you a full solution to a given element of 2D game coding such as for example Joystick control or collision detection.\n\n\n\n\nThe Game we will develop\nWe will develop, from scratch, using our architectural approach, a game based on the famous retro-game from ATARI: Asteroids.\nThis is a perfect game for learning all the fundamentals.\n\n\n\n\nWhy this particular game\nThis is a perfect game to learn a 2D game engine for the following reasons:\n\n\nIt has great Game Mechanics such as:\nSpaceship Control\nSpaceship Explosion\nTracking of Score and Player's Lives\nFiring of Bullets\nAsteroid Motion/Rotation and Splitting up\nOccasional UFO Bonus Showing up\nDeterministic Game Level Generation from a JSON File\nThis will lead us to fully explore and understand:\nJoystick Control\nGame Loop Update And Render\nTimer Component Callbacks\nVector Math\nCollision Detection\nParticle Physics\nRefresh-Rate Independent Rendering\nSounds Design and Game Music\nParallax Effects for Background\nThis game is also great to be played on both a phone as well as a tablet device.\n\n\n\n\nAssumptions\nWe assume that you have some coding experience and we also assume that you know Flutter/Dart and have worked with it.\n\n\nBut in case you have not worked with Flutter do not fret!\n\n\nThe course is designed to help you with the setup and a solid understanding of the language elements because of the architectural approach.\n\n\nSo in reality all you need is experience with any Object Oriented language such as Java, Swift, C#, C++, or TypeScript and you will be fine!\n\n\nPractice Makes Perfect\nFor each Case Study we have provided you with a number of Coding Exercises.\nWe also provide Solution Videos to explain the solution itself, along with code and some PDF materials as well.",
      "target_audience": [
        "We have created this course for all the coders who want to get into creating their own mobile game using a 2D engine.",
        "Coders new to game development who want to write one codebase and deploy their game on multiple platforms."
      ]
    },
    {
      "title": "Complete Unity® and Android Development: Build Games & Apps",
      "url": "https://www.udemy.com/course/complete-unity-and-android-development-build-games-and-apps/",
      "bio": "Learn to code & build beginner Android apps! And make a Legend of Zenda game in Unity®. Make unique game art in Blender",
      "objectives": [
        "Build a 3D \"Legend of Zenda\" game in Unity Technologies from scratch.",
        "Navigate the Unity® and Blender interfaces",
        "Build 3D models for the game in Blender.",
        "Integrate the art from Blender into Unity®.",
        "Build video game levels and scenes.",
        "Code in Java and C#.",
        "Build Android apps."
      ],
      "course_content": {},
      "requirements": [
        "To follow along with the Unity® part, you will need the following programs: Blender (for 3D modeling and texturing), Photoshop or a free program like Gimp (for 2D art and some texturing), and Unity® (for game set-up and coding).",
        "The C# coding section might be overwhelming for someone who has never coded before. Some coding experience is recommended.",
        "Some Blender experience for model creation. If you're a beginner, download the models and import into Unity.",
        "Unity® and Blender are free to download. Please download and install Unity® and Blender before purchasing this course.",
        "This course was recorded on a Mac computer, but you can use Unity® and Blender on a PC.",
        "For the Android part, please have a working computer onto which you can install Android Studio 2.2.",
        "Java coding skills are helpful but not required.",
        "Eclipse."
      ],
      "description": "\"Incredibly essential for a beginner such as myself. I have attempted to figure out Unity on my own and was completely lost even with the system's free tutorials. This is giving me exactly what I need to know in a step-by-step explanation\"\n\"It's really good so far, they are not making me paste lots of code like other tutorials which means I can learn.\" - Eivis T.\n\"Very detailed explanation.\" - Gonzalo C.\n-------------------------------------------------------------------------------------------------------------------------------\nThis beginner's course has 2 parts! In Part 1, you build a 3D Legend of Zenda game in Unity® and Blender. In Part 2, you learn Android app development by making apps from scratch.\nThis course is unique because we make both the code and the art for the game from scratch. We teach you the fundamentals of designing, coding, and modeling a 3D game.\nFirst you design the game \"The Legend of Zenda\" and its functionality in Unity®. You learn how to code in C# and build video game levels.\nDon't worry if you've never coded before. We start simple and add more to the game as the course goes on.\nIncluded in this course is material for beginners to get comfortable with the interfaces. Please note that we reuse this material in similar courses because it is introductory material. You can find some material in this course in the following related courses:\nUnreal Engine 4 & Android Development: Make 6 Games, 12 Apps\nThe ultimate Android course for complete beginners\nUniversal App Development: Code and Make Apps in C# and Java\nComplete Unity and Android Development: Build Games and Apps\nCreate 19 Low Poly Models & Your First 3D RPG In Unity® C#\nComplete Unity and Android Development: Build Games and Apps\nC# Masterclass: Make RPG & Mobile Games in Unity & Blender\nBuild \"The Legend Of Zenda\" Game in Unity and Blender\nMake a 3D Unity Action Game & Low Poly Buildings in Blender\nProfessional Game Development: 3D Modeling and Unity C#\n28 Low Poly Models and a Unity® Game - Complete 3D Developer\nWhy Unity®?\nUnity® is one of the most popular platforms in game development. You can use Unity® to build 2D and 3D games. Unity® is cross-platform, which means it is easy to use with other platforms.\nThen you create the 3D models for the game in Blender. You build all the art assets for the game, including the characters, weapons, cannon, dungeon, and temple. You learn how to integrate your art from Blender into Unity®.\nWhy Blender?\nBlender, like Unity®, is a popular production suite that is free to download. Blender is a revolutionary tool for making 3D art digitally. With Blender, you can make art assets for games, like we do in this course.\nHave you ever wanted to learn how to make Android apps? Chances are you have tried but haven't got anywhere. Sometimes the tutorials are either too basic or too complex. What you need is a pre-planned curriculum that shows you how to build apps.\nLook no further because this course is the Number 1 course that will show you how to build apps for Android. Reach a ton of people with your amazing idea today.\nEnroll today!",
      "target_audience": [
        "Anyone who wants to learn Unity® or Blender.",
        "Anyone who wants to learn game development.",
        "The Unity portion assumes you know a little about Unity® and Blender",
        "Complete beginners who want to learn to code for Android app development"
      ]
    },
    {
      "title": "Unreal Engine 5: One Course Solution For Niagara VFX",
      "url": "https://www.udemy.com/course/unreal-engine-5-one-course-solution-for-niagara-vfx/",
      "bio": "Use Niagara to create stunning, game-ready VFX in Unreal Engine 5 through a step by step approach",
      "objectives": [
        "Different usage of different niagara emitters and renderer",
        "Create different types of game ready VFX",
        "Create different master materials for VFX",
        "Bake out noise texture directly in Unreal",
        "Create multiple environment FX like dandelion, rain, water fall and etc",
        "Create attacking FX like energy strike, lightning hit and projectiles",
        "Create custom modules for custom particle behaviors",
        "Use blueprint to to program VFX behavior",
        "Use custom niagara module to create character disintegration",
        "Basic concepts behind niagara paramaters/namespaces/function/dynamic input"
      ],
      "course_content": {
        "Introduction": [
          "Course Intro",
          "What Consists Of A Niagara VFX?",
          "Important Notes Before You Start",
          "Create A VFX Project",
          "The DemoRoom files are not working...",
          "How To Get Help?",
          "Material Hotkey Cheat Sheet"
        ],
        "Niagara Basic": [
          "Niagara Basic Section Overview",
          "First Emitter",
          "Emitter Stage",
          "Simple Moving Sprite",
          "Shape Location",
          "Forces",
          "GPU Sprite",
          "First VFX Material",
          "Section Challenge: Create Floating Dandeline",
          "Share Task: Share Your Dandelion FX",
          "In case you can't find the fire texture pack...",
          "Sub UV Animation",
          "Start Of Flame Thrower: Create The Main Flame",
          "Smoke For Flame Thrower",
          "Section Challenge: Blue Flame And Ember",
          "My refraction socket is greyed out...",
          "Create Heat Distortion",
          "End Of Flame Thrower: Recap",
          "Share Task: Share Your Flame Thrower",
          "Mesh Renderer",
          "Custom Mesh",
          "Baking Texture In Unreal",
          "Draw Material To Render Target",
          "Ribbon Renderer",
          "Material Refresher: UV Manipulation",
          "Download the InfinityBladeEffects pack..",
          "Create Pan Distort Material",
          "VFXNamingHelper has issues...",
          "Create Perlin Noise",
          "Variation From Voronoi Noise",
          "Share Task: Share Your Noise Texture",
          "Section Warp Up"
        ],
        "Niagara Skill VFX": [
          "Niagara Skill VFX Section Overview",
          "Set Up The Demo Room",
          "My Niagara preview is very different from what I see in level...",
          "Start Of Portall FX: Create The Outline Of Portal",
          "Depth Fade And SubUV Animation",
          "Center Rotating Particles",
          "Center Rotating Patterns",
          "Material Effect With Mesh Renderer",
          "End Of Portal FX: Background Details And Debris",
          "Fix The Missing Center Pattern",
          "Start Of Hit Impact: Create VFX Spawner",
          "Hit Impact Surface",
          "End Of Hit Impact: Section Challenge1 - Hit Impact Body",
          "Section Challenge2: Butterfly FX",
          "Share Task: Share What You Created",
          "Start Of Meteor Attack: Anticipation For Meteor Attack",
          "Meteor Shell Mesh",
          "Create Shell FX",
          "Climax For Meteor Attack",
          "End Of Meteor Attack: Dissipation For Meteor Attack",
          "Start Of Laser Attack: Create Laser Mesh",
          "Create Laser Core",
          "Laser Shell",
          "Laser Fire Pattern",
          "End Of Laser Attack: Decoration Particles",
          "Start Of Energy Strike: Custom Sprite Alignment",
          "Location Event",
          "Custom Rotator",
          "Dynamic Paramaters",
          "Section Challenge3: More Elements For Climax",
          "Section Challenge4: Cylinder FX",
          "End Of Energy Strike: Dissipation",
          "Share Task: Share Your Energy Strike",
          "Start Of Projectile FX: Blade Slash Mesh",
          "Linear Gradient",
          "BP Projectile Master",
          "Projectile VFX Spawner",
          "Blade Slash Variations",
          "Following Particles",
          "Ground Particles",
          "Section Challenge4: Muzzle And Hit Impact VFX",
          "End Of Projectile FX: Different VFX Meshes",
          "Section Wrap Up",
          "Optional Challenge: Create Your Own VFX"
        ],
        "Custom Niagara Module VFX": [
          "Custom Niagara Module VFX Section Overview",
          "Custom Niagara Module 101",
          "Attributes Reader",
          "Follow The Leader Advanced",
          "Start Of Rain FX: Fresnel",
          "Liquid Master Dyn Param",
          "Main Rain Drops",
          "Generate Collision Event",
          "Section Challenge: Rain Splash Large",
          "Ripples",
          "Check Collision Normal",
          "End Of Rain FX: Custom Niagara Enums",
          "Share Task: Share Your Rain FX",
          "Start Of Waterfall FX: Waterfall Mesh",
          "Master Material For Waterfall",
          "Waterfall Refraction",
          "Waterfall Caustics",
          "Falling Water",
          "End Of Waterfall FX: Waterfall Splashes",
          "Share Task: Share Your Waterfall",
          "Use Niagara To Sample Textures",
          "Start Of Dissolving Static Mesh: Static Mesh Location",
          "End Of Dissolving Static Mesh: Particle Color For Dissolving",
          "Start Of Character Disintegration: Mesh Reproduction Sprites",
          "Lerp Particle Attributes",
          "Distance Fields",
          "Use Distance Fields For Dissolving",
          "Trigger Material Dissolve By BP",
          "Particle FX For Dissolving",
          "Noise Dissolve Material",
          "End Of Character Disintegration: Apply Noise Dissolve Material",
          "Restore The Character Mesh",
          "Optional Challenge: Particle FX For Restoring Character Mesh",
          "Section Wrap Up"
        ],
        "Congratulations": [
          "Where to go from here",
          "Continue Your One Course Solution Journey..."
        ]
      },
      "requirements": [
        "No knowledge needed for Niagara, everything will be done from scratch"
      ],
      "description": "Welcome to your unreal engine 5 one course solution for Niagara VFX, in this course ,you are gonna learn how to create different types of VFX like Portal FX, Rain FX, Projectile FX, Energy Strike, character disintegration, and much much more. And we’ll start from scratch.\n\n\nIn the first section, you are going to learn all the basic stuff that you need to know about Niagara for creating different VFX by creating dandelion FX and flame thrower. We are first going to cover the different emitter stages inside of Niagara, then start using the sprite renderer to help us to get more familiar with different Niagara modules.\n\n\nWith all the knowledge and skills we have, in the second section, we are going to create different types of VFX like portal FX, hit impact FX, butterfly FX, meteor attack, laser attack, energy strike, and projectile FX like blade slash and flying sword. We’ll begin with the portal FX and start modifying our master materials created in the last section to support more VFX features. Then, we’ll use blueprint to create a VFX spawner and use it to spawn this hit impact surface and hit impact body FX. After that, we’ll discuss the 3 most important states a VFX must have in order for it to be complete by creating this meteor attack. After that, we’ll go into blender and create a projectile mesh for our Niagara and use blueprint to help us spawn blade slash and flying sword.\n\n\nIn the third section, you’ll learn how to create follow the leader FX, rain FX, waterfall FX, different dissolving effect for texture, static mesh and skeletal mesh. We’ll start with all the basic concepts that you must know for creating a custom Niagara module, then with the knowledge on Niagara parameter, namespaces, we’ll create this follow the leader FX. Then with a little bit of vector math and some calculation in our own custom modules, we’re going to create a more advanced version of it. Then, with all we’ve learned, we’ll look into how to create rain FX, waterfall FX and dissolving FX for texture, static mesh and combine them with distance field to help us create dynamic character disintegration.\n\n\nThis is going to be the most comprehensive Niagara VFX course that you'll ever find online, and after finishing it, you should be able to create any type of VFX that you like on your own.",
      "target_audience": [
        "Learners who would like to learn how to use Niagara to create VFX in Uneal Engine 5",
        "Learners who want to learn how to create VFX materials",
        "Learners who want to know how to create VFX meshes",
        "Learners who want to create environment FX"
      ]
    },
    {
      "title": "Godot 4 - Create 3D RTS style game",
      "url": "https://www.udemy.com/course/godot-4-create-3d-rts-style-game/",
      "bio": "Learn how to create a 3D RTS style game using the Godot 4 game engine",
      "objectives": [
        "How to create a 3D RTS style game",
        "OOP in Godot",
        "How to create a building system",
        "How to create a mini-map and fog of war",
        "How to use the new navigation server",
        "New features in Godot 4"
      ],
      "course_content": {
        "World Environment And Camera": [
          "Godot 4 stable release fixes",
          "Creating the world scene",
          "RTS camera movement",
          "Camera zoom and environment",
          "Code Section"
        ],
        "Creating A Unit": [
          "Godot 4 stable release fixes",
          "Creating the unit scene",
          "Animation Tree",
          "Unit selection",
          "Unit movement",
          "Group selection",
          "Group movement",
          "Circle positioning",
          "Rectangle positioning",
          "Code Section"
        ],
        "GUI Controller": [
          "Godot 4 stable release fixes",
          "Creating the scene",
          "Display units",
          "Code Section"
        ],
        "Creating A Structure": [
          "Godot 4 stable release fixes",
          "Structure scene",
          "Structure script",
          "Code Section"
        ],
        "Adding More Units And Structures": [
          "Godot 4 stable release fixes",
          "Melee Unit",
          "Unit Building",
          "Adding the unit images",
          "Code Section"
        ],
        "Minerals And Spawning Units": [
          "Godot 4 stable release fixes",
          "Adding Minerals",
          "Spawning units",
          "Sending spawned units",
          "Code Section"
        ],
        "Bug fixing and improving": [
          "Godot 4 stable release fixes",
          "Killing bugs",
          "Building unit spawn fix",
          "Unit spawn fix",
          "Navigation Agent Fix"
        ],
        "Health Bar": [
          "Godot 4 stable release fixes",
          "Create unit health bar",
          "Code Section"
        ],
        "Building And Resource gathering": [
          "Add building mechanics",
          "Mining resources",
          "Code Section"
        ],
        "Unit Separation And Combat": [
          "Godot 4 stable release fixes",
          "Separating units",
          "Melee attack",
          "Enemy AI unit",
          "Code Section"
        ]
      },
      "requirements": [
        "You should have a basic understanding of coding and OOP"
      ],
      "description": "Requirements\nYou should have a basic understanding of coding and object oriented programming\n\n\nDescription\nIn this course, you are going to create an RTS style game.\nIt's going to include subjects like unit/group movement, structure building, resource gathering, mini-map and fog of war. At the end of this course, you are going to be able to create your own unique RTS game using Godot 4\n\n\nGame subjects:\nUnit and group movement\nCreating a building system\nSpawning units\nResource gathering\nCombat system\nMini Map\nFog of war\n\n\nGodot 4 subjects:\nThe Tween system\nNew navigation system\nObject oriented programming (inheritance, classes)\nvolumetric fog\ncallable class\nGraphical user interface\n\n\nAdditional information:\nYou can download the project files in the link, though there is no requirement for that. You can use your own assets\nfor your game, the projects files are just there for being a placeholder throughout the course and are made by me.\nSo in case you want to use in any of the models, commercially or not, you can\n\n\n\n\nWho this course is for\ngame developers with little experience in the Godot game engine\nNote: beginners can still take this course, most of the stuff I go through in this course is explained but\nyou should still be ready to go through the documentation and learn the Godot built in functions work\nand learn the basics of programming",
      "target_audience": [
        "Game developers with little experience in the Godot game engine who want to create more advanced games"
      ]
    },
    {
      "title": "Python Game Development using Pygame and Python 3",
      "url": "https://www.udemy.com/course/python-game-development-using-pygame-and-python-3/",
      "bio": "Master game development with Pygame and Python. Includes Shooting bullets, collision detection & building Space Invaders",
      "objectives": [
        "2.5+ hours of Full HD video material divided into 17 downloadable lectures",
        "Building Games that don't suck using - Python Pygame",
        "Game Development concepts like collision detection, Object Movement etc.",
        "Controlling the Game using Input controls like Keyboard",
        "Adding and Removing Graphics/Sound from the Game",
        "Access to our PRIVATE Facebook group available to only students of this Pygame course"
      ],
      "course_content": {
        "Introduction": [
          "Installation",
          "Creating your first game window",
          "Title Logo Color"
        ],
        "Graphics and Input Controls": [
          "Adding an Image",
          "Movement and Motion of Graphics",
          "Interacting with our game using Keyboard",
          "Boundaries and Bounds"
        ],
        "Building the Game": [
          "Creating the Enemy",
          "Enemy Movements",
          "Adding a Background to our Game",
          "Shooting Bullets",
          "Shooting Multiple Bullets",
          "Collision Detection",
          "Creating Multiple Enemies for our Player"
        ],
        "Endgame": [
          "Displaying Score",
          "Adding sounds",
          "Game over"
        ]
      },
      "requirements": [
        "Python Level: Beginner. This Pygame tutorial assumes that you already know the Python basics ( variables, functions etc. ) No need for more as we cover Object Oriented Programming in the BONUS section of this course.",
        "Please watch the preview lectures and read the description of this course before enrolling."
      ],
      "description": "In early 2000, Pygame was released into this world and it soon became the #1 Game Development tool for beginners. Why? It's because it's simple enough for beginners to learn the basic concepts of becoming a Game Developer and yet it is advanced enough for the pros. Here are some of the games that you can create with it -\nSpace Invader - Classic game of shooting the enemies by a Space ship\nFPS Games - You can also create first person 2D shooting games\nSuper Potato Bruh - This game gained a lot of traction on Reddit and went Viral.\nCome learn with me and I'll show you how you can bend Python Pygame to your will. This course is great for beginners in Python at any age and any level of computer literacy.\nThe goal is simple: learn Pygame by working on real project ( Building a Space Invader Game ) step-by-step while we explain every concept along the way. For the duration of this course we will take you on a journey and you're going to learn how to:\nVisualize and create the game that you want want from Scratch\nSound Management in Game Development\nAdding Image and Graphics in your games\nControl the Game using your keyboard\nCreating Multiple Objects like enemies and Players\nAdvance Game Concepts like movement mechanics\nBuild a complete Space Invader Game\nWhy choose me as an instructor? Why buy this course among all those other courses?\nWhen i was a kid i saw this YouTube video on how make a folder invisible on Windows I was so fascinated with this idea. Since then my love for technology has only grown. I understand the  people who are passionate about learning new things. At the end of each  section we will take a quiz to check up on your skills and see if we’re  ready for the next section. We will create this project together from  start to finish.\nSo, why wait? If all this sounds great to you, Press on “Take this Course” and start learning today.",
      "target_audience": [
        "Anyone interested in learning how to create games using Python/Pygame",
        "Beginner Python Developers who are interested in learning about Game Development",
        "Any aspiring Game Developer who wants to step into this crazy and fun world of creating games for joy and profit",
        "Do NOT take this course if you are a Game Developer with many years of experience"
      ]
    },
    {
      "title": "Learn to Code Video Games: Complete Guide to Construct 2 & 3",
      "url": "https://www.udemy.com/course/gaming-bootcamp-mentor-training/",
      "bio": "A hands-on guide to learning Construct 2 while building many complete video games from scratch. No experience necessary.",
      "objectives": [
        "Learn the Construct 2 platform while building multiple video games.",
        "Learn both Constrct 2 and Construct 3",
        "Our course is for those who have no prior experience at all, we specifically designed it for kids in elementary through high-school. But everyone will benefit."
      ],
      "course_content": {
        "Overview of Construct 2": [
          "Download, Install and Launch Construct 2",
          "Introduction to Interface",
          "Layouts and Events",
          "Creating Objects",
          "Create a Sprite",
          "Create a Text Object",
          "Create a Button",
          "Create a Particle",
          "Create a Tiled Background",
          "Copying and Deleting Objects",
          "Behaviors Overview",
          "Behavior (Platform)",
          "Behavior (Physics)",
          "Behavior (Bullet)",
          "Events: Adding Collisions",
          "Events: Adding Fade",
          "Events: Adding Text",
          "Events: Additional Operations",
          "Variables",
          "Layers"
        ],
        "Construct3: Platform Game (NEW)": [
          "Introduction to Platform Game",
          "Part One: Build our level one",
          "Part Two: Add an elevator, coins, and multiple levels"
        ],
        "Maze Game using 8-Direction": [
          "Introduction to maze game.",
          "Add our hero & build out the initial maze",
          "Add coins, an enemy, bullets, and a finish door",
          "Add explosions, secret passageway, and multiple levels"
        ],
        "How to Import Images (Construct2 & Construct3)": [
          "Import using Construct2",
          "Import using Construct3"
        ],
        "Blocks Game": [
          "Introduction to Blocks Game",
          "Editing A Level",
          "Adjusting Properties",
          "Creating a Weird Layout",
          "Menu Walkthrough",
          "Level Walkthrough Part A",
          "Level Walkthrough Part B",
          "Level Walkthrough Part C"
        ],
        "Angry Birds-Like Game": [
          "Introduction to Angry Birds-Like Game",
          "Screen Layout & Background",
          "Adding a Canon",
          "Firing a Canon Ball",
          "Auto-Reload the Cannonball",
          "Building a Tower to Shoot",
          "Explode the Prize",
          "Adding a Heads-up-Display and Keeping Score",
          "Adding a Tail to Our Ammo",
          "Adding Breakable Blocks",
          "Adding a \"Win\" Condition to Proceed to the Next Level",
          "Breaking our Blocks",
          "Splitting the Ammo",
          "Conclusion - Adding Levels and a Win Screen"
        ],
        "Race Car Game": [
          "Introduction to Race Car Game",
          "Create layout and roads",
          "Setup background as our road boundary",
          "Create car and behaviors",
          "Add a block to crash into, just for fun",
          "Create an obstacle car with some very simple artificial intelligence",
          "Build multiple levels and logic to move to the next level",
          "Add a finish line with an award at the end",
          "Conclusion of Race Car game"
        ],
        "Exploding Presents": [
          "Introduction to Exploding Presents",
          "Create our objects",
          "Launching presents",
          "Explode our presents",
          "Keeping score",
          "Adding a bomb",
          "Conclusion of Exploding Presents"
        ],
        "Creating Enemy AI with Pathfinding": [
          "Introduction to Enemy AI",
          "Adding a hero and enemy sprites",
          "Setting up pathfinding",
          "Add obstacles",
          "Add coins to collect",
          "Auto-spawn enemies",
          "Add bullets to our hero",
          "Conclusion of our pathfinding"
        ],
        "Fungus Adventure Game": [
          "Demo the Game",
          "Layout: Setup the Layout",
          "Layout: Setup Background & Barrier Images",
          "Hero: Create Hero/Player",
          "Hero: Add Layout Restart",
          "Blocks: Create Blocks & Layout",
          "Blocks: Break Bricks & Spawn Prizes",
          "Blocks: Collect Prizes",
          "Enemies: Create Mushroom Enemy",
          "Enemies: Add Artificial Intelligence",
          "Enemies: Create Boundary Block",
          "Enemies: Create Turtle Enemy",
          "Enemies: Setup Collision",
          "Coins: Create Heads Up Display (HUD)",
          "Prize: Create Gun Prize",
          "Prize: Create Invincibility Prize",
          "Refinements: Add an Exit Door"
        ]
      },
      "requirements": [
        "Students should have access to a Windows-based computer or laptop in order to follow along.",
        "Constrct 3 will run on Windows, Mac, or Chromebook"
      ],
      "description": "In this course, you will learn how to use Construct 2 through a hands-on program where we walk students through multiple real-world video games. You will learn all about the Construct 2 platform, the basics of creating a video game, and a complete walk-through. (Over 8 games as of today, more coming soon)\nLeveraging exclusively video, students can take this course at their own pace and follow along with the free version of Construct 2. With over 8 hours of course material, we cover every aspect of building video games. All game assets are also available to download.\nWe developed this course specifically for elementary through high school students, with a focus on our in-person Gaming Bootcamp program that we run in Sioux Falls, SD.\nEven if you have ZERO experience with Construct 2 or making video games, this course would be an excellent way to learn the basics and learn to love programing. This is an entry-level through advanced course.",
      "target_audience": [
        "This Construct 2 course is for the beginner or someone who has no prior experience with coding or Construct 2. If you are an experienced program, this course is probably not going be helpful."
      ]
    },
    {
      "title": "Complete C# Unity Developer: Create Games and Learn to Code",
      "url": "https://www.udemy.com/course/unity-developer-course/",
      "bio": "Game development & design taught by using Unity. Learn C# and build your first games for web, mobile and desktop.",
      "objectives": [
        "Learn the powerful programming language C# from scratch.",
        "Gain best practices knowledge of game development and design.",
        "Get used to Unity.",
        "Create 2D, 2.5D and 3D games in Unity.",
        "Learn advanced programming techniques like object oriented programming.",
        "Transfer your knowledge to other programming languages.",
        "Learn to solve problems."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How To Get Most Out Of This Course",
          "Structure Of This Course",
          "Udemy Reviews Update",
          "Download And Installation Of The Required Software",
          "BONUS: What’s new in Unity 2020.1",
          "Get the most from Tutorials.EU",
          "New Feature: Learning Paths"
        ],
        "Unity 3D 2017 Basics": [
          "The Unity 3D Interface",
          "Important note",
          "Creating Your Own Layout",
          "Our First Player And Movement",
          "Physics Basics - Theory",
          "Make Sure Changes Take Effect",
          "Rigidbody",
          "Collider",
          "Trigger Events",
          "The Concept Of Prefabs",
          "Components And Gameobjects",
          "Keeping The Hierarchy Tidy",
          "Challenge Physic Basics in Unity",
          "Cheat Sheet - Basics And Physics",
          "Physics Basics - Quiz"
        ],
        "C# Basics": [
          "Why C# And Not Javascript?",
          "Class Structure",
          "Variables And Data Types Int, Double, Float",
          "Variables And Data Types String, Char And Bool",
          "Quiz - Variables And Data Types",
          "Functions / Methods",
          "Quiz - Methods",
          "Arithmetic Operations",
          "Logical And Comparison Operators",
          "If Statements",
          "Quiz - If Statements",
          "Arrays",
          "Alternative ways to declare arrays",
          "Quiz - Arrays",
          "For Loops",
          "While Loops",
          "Do While Loops",
          "For Each Loops",
          "Quiz - Loops",
          "Basics of OOP and Constructors",
          "Scope",
          "Quiz - OOP and Scope",
          "Mathf And Random Class"
        ],
        "Our First Game - Pong": [
          "Pong Intro",
          "Basics - UI Elements",
          "Basics - Accessing Text Via Code",
          "Basics - Buttons",
          "Basics - Switching Scenes",
          "Basics - Using Sounds",
          "Project Outline - Pong",
          "Creating The Main Menu",
          "Switching Scenes And Using Buttons",
          "Building Our Game Scene",
          "2D vs 3D Colliders And Rigidbody For Our Ball",
          "Moving Our Ball Left And Right",
          "Racket Movement",
          "Bouncing Off Correctly",
          "Scoring System",
          "Restarting A Round",
          "The Game Over Screen",
          "Adding Sound",
          "Adding A Basic AI"
        ],
        "Zig Zag Clone": [
          "Zig Zag Intro",
          "Basics - Instantiating An Object",
          "Basics - Invoke And InvokeRepeating For Delayed Calls And Repeated Calls",
          "Basics - Playerpreferences - Saving Data",
          "Basics- Raycast",
          "Project Outline Zig Zag",
          "Setup For Zig Zag",
          "Setting The Perspective",
          "Moving The character",
          "Make Camera Follow Player",
          "Animate The Character",
          "Start The Game",
          "Restart The Game",
          "Collecting Crystals And Score",
          "Adding A Highscore",
          "Adding The Particle Effect",
          "Background Music Loop",
          "Procedural Creation Of Our Map"
        ],
        "Creating Your Own 3D Objects - Basics Of Blender": [
          "Blender Intro",
          "What Is Blender And What Do I Need It For?",
          "Downloading And Installing Blender",
          "The Basic Functions",
          "Materials, Mesh and how to bring it together",
          "Creating A House",
          "Creating A Wind Mill",
          "Animate The Wind Mill",
          "Import The Wind Mill In Unity"
        ],
        "Fruit Ninja Clone": [
          "Fruit Ninja Intro",
          "Project Outline Fruit Ninja Clone",
          "Create Fruits And Make Them Explode",
          "Create And Configure The Fruit Spawner",
          "Create The Blade",
          "Build The GUI",
          "Game Over And Restart",
          "Highscore",
          "Extend The Game",
          "Challenge - Create Your Own Fruits",
          "Prepare Code For Android",
          "Play The Game On A Phone",
          "Improve The Looks Of Our Game",
          "Implement Unity Ads To Make Money",
          "Prepare Device As A Developer Device",
          "Create Sounds And Adding Them To The Game"
        ],
        "Minesweeper Clone": [
          "Minesweeper Intro",
          "Project Outline - Minesweeper",
          "Minesweeper Resources",
          "Creating A Tile",
          "Creating Our Field",
          "Changing UI Elements Dynamically",
          "Difficulty Levels",
          "Controlling Our Tiles",
          "Click Mechanics Part1",
          "Click Mechanics Part2",
          "Adding a Winning Condition",
          "Some more UI Editing",
          "Resetting The Minefield",
          "Timer, Minesleft, Tieing It All Together",
          "The Highscore",
          "Finalizing the Game"
        ],
        "Bitblaster XL Clone": [
          "Bitblaster XL Clone Intro",
          "Project Outline - Bitblaster XL Clone",
          "Basic Movements",
          "Shooting",
          "Adding Text UI",
          "First Enemy Type",
          "Adding SpawnAreas",
          "Create Enemies",
          "Randomizing Enemy Creation",
          "Destroying Bullets",
          "Destroying Enemies",
          "Adding The Score",
          "Creating The Hud",
          "Nukem All",
          "Losing Shields And Colliding",
          "Multishot",
          "Laser",
          "Berserk Mode",
          "The Collectable Class",
          "Spawning Random Collectables",
          "Collecting Upgrades",
          "Main Menu",
          "Game Over, Highscore and Balance"
        ],
        "Construction Game - Farmville Clone": [
          "Project Outline - Farmville Clone",
          "Farmville Clone Creating Our Map",
          "Importing The Assets And Creating A Nice World",
          "Creating The UI",
          "Resourcesystem",
          "Building And Buildings Class",
          "Build Class And Hover",
          "Creating Buildings",
          "Positioning Buildings",
          "Buy Button Script",
          "Info, Upgrading And Deconstruction",
          "Destroy Button And Testing",
          "Saving The Game",
          "Loading The Game",
          "Rebuilding The Buildings From Save File",
          "Building Farmville For And Testing On IOS",
          "Building Farmville For And Testing On Android"
        ]
      },
      "requirements": [
        "Unity 2019 game engine (free version) and a PC that can run it",
        "That's it... start right now!"
      ],
      "description": "If you want to learn coding the fun way, unity game development is your choice! Learn to make your own games and grab a job in the tech or gaming industry! Start this course now to get there in just a few weeks!\n\n\nThe Complete C# Unity Developer course is completely project based. You are going to create 6 fully featured games from scratch using the Unity 3D Game Engine.\n\nHave you ever had an idea for a game, or wanted to work as a game developer? Then you are at the right place!\n\nYou will love Unity 3D and will even learn to love C#!\nIn this course you are going to discover how to make games with Unity 3D - arguably the best game development engine in the world. Which allows you to create amazing indie titles but also triple A games for nearly every platform.\n\n\nWhat will I get from this Unity 3D course?\nAdvanced C# coding skills\nAdvanced Unity 3D game development skills\nBasic blender skills to create your own 3D assets\nSupport in the discussion forums\nWhich projects will be covered?\nPong Clone\nEndless Runner (e.g. Zig Zag Clone)\nMinesweeper\nFruit Ninja Clone\nFarm Ville Clone\nBitblaser XL Clone\nWhat you will learn:\nUse and adjust the Unity interface\nAdvanced C# programming\nImport assets from the asset store and use the work of others to your advantage\nCreate and Play sounds\nMove objects dynamically or manually\nCharacter Animations\nUsing user input in many different ways, e.g. klick, button taps, keyboard taps, touchscreen input etc.\nUsing scores and highscores\nSwap and reset scenes\nUsing physics materials to bounce or slow down objects\nUsing different types of colliders\nUsing Raycast to check which element is selected\nMake objects follow the mouse of the player\nCreate a 3D map with beautiful 3D assets from the Unity Asset Store\nCreate a beatifull UI\nCreate 3D models with Blender\nRotate gameObjects on middle button press\nImplementation of a \"hover\" functionality\nUsing Unity Ads to make money with your games\nExporting a game to Android\nGame Development Concepts\nand much more\n\n\nWho is your instructor?\nI'm Denis Panjuta, an Instructor who taught over 40k Students how to code already and my mission is to teach coding to 100k students by 2019!  I received my bachelor degree in engineering at the HTWG Konstanz in Germany and love making video games with Unity and teaching others how to do the same.\n\n\nHow you will get from zero to hero in game development with Unity 3D:\nBringing an Idea to life is one of the best feelings one can have. But the path to get there is often full of challenges. So we have created a course that makes this path as easy as possible!\n\n\nYou start off by learning the basics of Unity Physics and player movement. Then you learn to code in C# one of the most advanced and best programming languages available, within a couple of hours.\nOnce you are learned the basics of C# you will start off with Pong a huge success. This will teach you how to create UIs, basic physics, player movement and even a basic AI. This is already the basis for nearly every game you're ever going to make.\nSo you can start the course with no coding experience what so ever. Having the desire to make games is the only prerequisite to start with this course and make that desire reality.\n\n\nWe live in a world, where knowledge and work is shared more than ever, so using assets provided by others is a huge boost to your progress.  You will learn how to use 3D assets to make an endless runner in Unity 3D. Then you’ll use animations, reset the game, use particle systems and finally  create a map procedurally. That’s quite some advanced stuff right there.\n\n\nAs coding is an extremely important skill to make your own complex games, you will get a huge boost to your coding skills in the third game, Minesweeper, a huge success of the nineties and still a highly addictive game. You learn to build random fields, make dynamic User interfaces, use timers and much more. Equipped with those skills, you're already able to build far more complex games on your own\n\n\nI know that learning to code and making games can be hard at times, and sometimes you just get stuck. But no worries, we are there for you. We answer each question as quickly as we can and make sure that you reach your goal of becoming a game developer.\n\n\nThis Unity 3D and C# course teaches you how to make use of stunning graphics and effects, available as \"ready to use\" assets from the internet. In addition, you're going to learn how to create and modify them on your own, so you can build every single aspect of your game on your own by then.\n\n\nEver wanted to slice some fruits on your phone? Then you will love the fifth chapter, where you will learn to build a fruit ninja clone, a huge mobile success. In this chapter you will see how you can build such a successful game within less than two hours from scratch. In this chapter you will also learn how to prepare a game for mobile and export it to and test it on an Android device. Building a Bitblaster XL clone you will learn to make different enemy types, extend a game as you go, use multiple different shooting types, create random enemies, use tags and much more. You could even simply take that game and make it your own.\n\n\nMaking a construction game like Farmville or Anno 1800 is a huge dream of many developers, so we have created a whole chapter covering just that. You will learn how to make your own 3D House and Wind Mill assets, place buildings on the map, while in play mode, create a resource system, make a beautiful ui using assets from the asset store, upgrade buildings and of course how to save and load the game using serializable classes.\n\n\nUpon completion of this course you will know C# perfectly and will be able to take your own ideas and make complete games from them with Unity 3D!\n\n\nSo don’t waste any more time and start to make your dreams and ideas come true by taking this course now!",
      "target_audience": [
        "Anyone who wants to learn to code by making games.",
        "Experienced programmers who want to gain new skills in game development.",
        "Anyone who wants to create awesome games."
      ]
    },
    {
      "title": "Create a Space Shoot 'Em Up With Unity",
      "url": "https://www.udemy.com/course/spaceshooter/",
      "bio": "Game development made easy. Learn C# using Unity and create your very own side-scrolling Space Shooter!",
      "objectives": [
        "Learn C#, a modern versatile programming language.",
        "Understand the capabilities of 2D development in Unity.",
        "Develop strong and transferrable problem solving skills.",
        "Gain an understanding of the game development process.",
        "Learn how object oriented programming works in practice."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Asset Files"
        ],
        "Setup": [
          "Setting Up The Project",
          "Quick Guide To the Unity Layout"
        ],
        "The Player & Backgrounds": [
          "Importing Assets",
          "Moving The Ship",
          "Keeping The Player On Screen",
          "Saving The Scene",
          "Adding a Background",
          "Scrolling the Background",
          "Adding Depth & Moving Objects",
          "Making Solid Meteors"
        ],
        "Shots & Explosions": [
          "Creating a Laser Shot",
          "Firing Shots",
          "Auto firing",
          "Shot Impact Effects",
          "Destroying Meteors",
          "Particle Explosion Effect",
          "CHALLENGE - Create Player Explosion Effect"
        ],
        "Health": [
          "Player Health System"
        ],
        "Enemies": [
          "Making Enemies",
          "Enemy Movement",
          "Better Movement",
          "Creating Enemy Shot",
          "Making Enemies Fire",
          "Giving Enemies Health",
          "CHALLENGE - More Enemies"
        ],
        "Enemy Waves & Lives": [
          "Making Waves",
          "Spawning Waves",
          "CHALLENGE - Making More Waves",
          "Dying & Extra Lives",
          "Respawn Invincibility"
        ],
        "UI": [
          "Setting up Game Over Screen",
          "Activating & Using Game Over Screen",
          "Showing Lives",
          "Showing Health",
          "Score Tracking",
          "High Score"
        ],
        "Power Ups": [
          "Creating a Shield",
          "Picking up shield",
          "Speed Boost",
          "Double Shot",
          "Enemies dropping PowerUps"
        ],
        "Music & Menus": [
          "Adding Music",
          "Ending Level",
          "Controlling The Player After Level End",
          "Adding EndScreen Info",
          "Pause Menu",
          "Reusing Objects in new scenes",
          "Main Menu"
        ]
      },
      "requirements": [
        "Mac or PC capable of running Unity 3D",
        "A copy of Unity 2018 or newer"
      ],
      "description": "Learn how to create and program your very own side-scrolling Space Shooter game using Unity, an industry-standard game development program used by many large gaming studios and indie developers across the world.\nIn this course you won’t just be learning programming concepts, but tying these concepts to real game development uses. You will have access to a course forum where you can discuss the topics covered in the course as well as the next steps to take once the course is complete.\nThis course has been designed to be easily understandable to everyone, so whether you’re a complete beginner, an artist looking to expand their game development range or a programmer interested in understanding game design, this course will help you gain a greater understanding of development.\n\nAt the end of this course you will have developed the ability to create such game elements as:\nFull movement and firing mechanics\nScrolling Backgrounds\nEnemies with multiple movement patterns\nSpawning waves of enemies and space debris\nPower Ups\nMusic & Sound Effects\nA Fully-featured Boss Battle\nFully interactive menus\nTracking scores and high scores\nand more...\nStart learning today and let me help you become a game developer!",
      "target_audience": [
        "Anyone who wants to make their own 2D games.",
        "Please who want to create and publish their own games.",
        "Complete beginners with an interest in learning game development.",
        "Developers who want to re-skill across to game development.",
        "People interested in working in the game design industy.",
        "Competent and confident with using a computer."
      ]
    },
    {
      "title": "Unity 2019 Make an intermediate 3d survival game",
      "url": "https://www.udemy.com/course/unity-2019-make-a-3d-survival-game/",
      "bio": "Create a 3d game with URP from scratch in a low poly style with inventory, crafting and save systems.",
      "objectives": [
        "Unity game development using Universal Rendering Pipeline",
        "Implementing different game systems: movement, cinemachine camera, inventory, pickup, crafting and saving game.",
        "Creating a low-poly map using 3d models and PolyBrush tool"
      ],
      "course_content": {
        "Introduction": [
          "Content of this course",
          "Check the game you will create",
          "Onboarding"
        ],
        "Project setup": [
          "Creating a new Unity project",
          "Using the resources"
        ],
        "Player movement system": [
          "Goal of this section",
          "Preparing the models",
          "3rd person cinemachine camera",
          "Getting player input",
          "Character Controller issue!",
          "Moving using arrows",
          "Rotating the player",
          "Preparing movement animations",
          "Playing movement animations",
          "Jumping and the issues of boolean flags",
          "State pattern - an alternative to boolean flags",
          "State pattern - restoring previous functionality",
          "Jump Animations",
          "Animations for Jumping",
          "Falling State - what happens when we fall down when jumping",
          "Falling state fix",
          "Adding footsteps sound",
          "Testing the system on a prototypical terrain",
          "Adding Right and Left movement"
        ],
        "Inventory system View": [
          "Inventory System Introduction",
          "Inventory System Structure",
          "Preparing UI - basic panel",
          "Preparing UI - settings",
          "Preparing UI - dividing panel into areas",
          "UI Inventory item element",
          "Adding scrollbar",
          "Adding Hotbar UI",
          "Button helper script",
          "Item Helper script part 1",
          "Item Helper script part 2",
          "Finishing the UI",
          "Implementing UI module into our game - player input",
          "Implementing UI module into our game - Inventory State",
          "Preparing logic behind using the Inventory UI"
        ],
        "Inventory System Data Model and Data": [
          "ItemSO Scriptable object",
          "FoodItemSO",
          "Storage system Introduction",
          "Update: implementing storage scripts from scratch",
          "Inventory System Data - Adding Storage p1",
          "Inventory System Data - Adding Storage p2",
          "Inventory System - Hotbar items",
          "Inventory System Data - integrating UI p1",
          "Inventory System Data - integrating UI p2",
          "ItemSO data manager",
          "Testing the UI with dummy items",
          "Testing the UI - displaying data"
        ],
        "Ui Dragging elements in the inventory": [
          "Intro / Recap",
          "Dragging UI element Part 1",
          "Dragging UI element Part 2",
          "Swapping UI data on drag and drop",
          "Swapping data in inventory",
          "Swapping data in hotbar part 1",
          "Swapping data in hotbar part 2",
          "Finishing and debugging"
        ],
        "Picking up items from the map": [
          "Intro / Recap",
          "Pickable Item setup",
          "Detection system",
          "Performing detection",
          "Highlighting the selected item",
          "Highlighting the selected item Part 2",
          "Interacting with an item - Interact State",
          "Interact State Part 2",
          "Adding items to the inventory storage",
          "Fix closing inventory when dragging"
        ],
        "Finishing Inventory System": [
          "Intro / Recap",
          "Inventory Buttons Setup - Drop and Use buttons",
          "Interacting with Drop and Use buttons",
          "Drop button logic",
          "Use button logic Part 1",
          "Use button logic Part 2",
          "Fixing Highlight issue",
          "Interacting with hotbar items",
          "Item Spawner"
        ],
        "Save system for inventory items": [
          "Intro / Recap",
          "Saving system introduction",
          "Saving system implementation outline",
          "Creating ISavable interface",
          "Implementing ISavable for the inventory",
          "SaveSystem Class",
          "Testing save system",
          "Main menu part 1",
          "Main menu part 2",
          "In-game menu p1",
          "In-game menu p2",
          "In-game menu p3",
          "In-game menu p4",
          "Save System UnauthorizedAccessException fix"
        ],
        "Simple Map": [
          "Intro / Recap",
          "Importing a map model",
          "PolyBrush tool",
          "Skybox",
          "Tress and rocks",
          "Post-processing",
          "Adding the new map to our game",
          "Bounding the map using invisible walls",
          "Adding ambient sound",
          "FIX: PolyBrush issues"
        ]
      },
      "requirements": [
        "Intermediate c# knowledge",
        "Intermediate Unity 3d knowledge"
      ],
      "description": "Are you looking for an intermediate Unity course where you will build a small 3d game, from scratch with a maintainable codebase? In this course we will create a survival game with 3rd person camera, player movement system, animations, simple island map, inventory and crafting system and a save system to save our progress to a file. We will use the new Universal Rendering Pipeline to create our project., and structure the code using state pattern and Model-View-Controller architecture to make the code less prone to bugs.\n\n\nIf you have completed few beginner courses on Unity and c# and you feel comfortable using them together I believe that you will benefit greatly from this course.\nWhen I was learning Unity and Game Development overall I was always disappointed with the lack of intermediate courses that actually showed how to make a game that isn't a single monobehaviour or that actually implements some useful systems like save system. I wanted a bigger project that I have lacked the skills to structure properly to keep it maintainable. How do you make a more complex game?\nThe answer is - one step at a time.\nWe will use multiple 3d models, animations and tools that are free on the Unity Asset Store. It really is amazing how many great assets are available for free and how we can use them to create a decent looking game.\nMy hope is that at the end of the course you will have a bigger picture on how to structure the code for your game and have a survival game template that you can reuse.\nIf you think that you could benefit from this course don't hesitate to purchase it. You have 30 days to get a refund in case you don't enjoy my course. Saying that I have really put a lot of effort to make sure that you will benefit from the course and learn some useful techniques from setting up a simple movement system using a character controller to creating a UI, a map with post-processing effects and serializing the data to save it to a JSON file.\nJust click that Buy button See you in the course!\n\n\nUpdate February 2021:\nResources now are containing a \"Survival_Game_FullProject_ ...\" for most of the videos. If you ever get stuck you can simply download a full project for a specific video and use it to help you debug your own project or to just start working on a specific section of the course.\nPreviously the resources were unity packages that was overriding your own project. I hope that full project asset version will be better :)",
      "target_audience": [
        "Intermediate Unity game Developers"
      ]
    },
    {
      "title": "Scratch Programming - Build 14 Games in Scratch 3.0 Bootcamp",
      "url": "https://www.udemy.com/course/learn-coding-by-creating-a-game-from-scratch-in-scratch-2-0/",
      "bio": "Build 14 + 1 Games in Scratch 3.0 including Arkanoid, Snake, Pac-Man, Space Invaders, a Racing Game & Elsa from Frozen!",
      "objectives": [
        "You will learn how to create programs, make games and solve programming problems.",
        "Build a complete understanding of Scratch 3.0 from the ground up!",
        "Understand all the fundamental programming principles.",
        "Understand complex programming topics.",
        "Learn to use Scratch to develop games!",
        "Create games with Scratch, like Arkanoid Game!"
      ],
      "course_content": {
        "Scratch 3.0 Overview": [
          "Getting Introduced in Scratch 3.0 Environment",
          "3 Tips to Get More Value Out of this Course",
          "How to dowload the initial games from the resources and upload them to Scrarch 3",
          "Blocks and Commands in Scratch 3.0"
        ],
        "Learning to Code with Scratch 3.0": [
          "Sequential Programming with Scratch 3.0",
          "Learn Loops with Scratch 3.0, Building the \"Ghost Effect\""
        ],
        "Developing Helicopter Game in Scratch 3.0": [
          "Building a Helicopter Game in Scratch 3.0"
        ],
        "Creating a Game with Elsa from Frozen": [
          "Introducing Elsa and What We Will Create",
          "Coding Elsa's Movements",
          "Coding Elsa's Questions",
          "Finalizing the Game and some Minor Improvements"
        ],
        "Developing the \"Super Space Invaders\" Game in Scratch 3.0": [
          "Introducing Super Space Invaders and What We Will Create",
          "Coding the Ship",
          "Coding the GunFire",
          "Coding the Invader",
          "Finalizing the Game and some Minor Improvements"
        ],
        "The Most Popular Arcade in Scratch 3.0: \"The Snake Game\"": [
          "Snake Game Overview in Scrach 3.0",
          "Coding the Head of the Snake Game in Scratch 3.0",
          "Coding the Body of the Snake Game in Scratch 3.0",
          "Coding the Apples of the Snake Game in Scratch 3.0",
          "Coding the \"Game over\" functionality of the Snake Game is Scratch 3.0"
        ],
        "Creating the Most Loved Game in Scratch 3.0: Pac-Man": [
          "Introducing the Great Pac-Man in Scratch 3.0",
          "Coding Pac-Man in Scratch 3.0",
          "Coding the Dots",
          "Coding the Ghosts",
          "Coding the Messages and Finalizing Pac-Man"
        ],
        "Creating the \"Scary Shark Game\" in Scratch 3.0": [
          "Developing Scary Shark Game in Scratch 3.0",
          "Adding more functionalities in Scary Shark Game and finishing the Game"
        ],
        "Developing Racing Car Game in Scratch 3.0": [
          "Building Racing Car Game in Scratch 3.0"
        ],
        "Developing the \"Crossing the Road Game with the Crab\" in Scratch 3.0": [
          "Building Crossing the Road Game with the Crab in Scratch 3.0 - Part 1",
          "Building Crossing the Road Game with the Crab in Scratch 3.0 - Part 2"
        ]
      },
      "requirements": [
        "You will not need any any prior knowledge - so get started now!",
        "You should be committed to run through the course and become knowledgeable about Scratch Programming.",
        "Nothing else! It’s just you, your computer and your hunger to get started today!"
      ],
      "description": "★ LEARN GAME DEVELOPMENT IN SCRATCH 3.0 – PERFECT FOR TEACHING CODING THROUGH FUN PROJECTS ★\nThis course is designed for **adults—parents, educators, and coding enthusiasts—**who want to learn how to develop fun games using Scratch 3.0 and teach coding fundamentals to beginners.\nIn this project-based course, you'll learn how to develop 14 different games, including classics like the Arkanoid Arcade Game, Pac-Man, and Snake, as well as more unique ones like a Helicopter Game, a Racing Car Game, and even a special game inspired by Elsa from Frozen.\nAll of this is done using Scratch 3.0, an educational programming environment with a simple drag-and-drop interface that makes programming concepts easy to explore.\nScratch 3.0 was developed by the Lifelong Kindergarten Group at the MIT Media Lab, to help learners (typically ages 8 and up) build creativity, problem-solving abilities, and foundational programming skills. As an adult, you can leverage this powerful tool to create engaging learning experiences—whether at home or in the classroom.\nThis course is ideal for:\nParents and guardians who want to support their child’s interest in technology and game development\nTeachers and instructors seeking interactive ways to introduce programming in educational settings\nEntrepreneurs looking to launch a coding academy or create a business teaching code\nProgrammers and hobbyists who want a fun, visual way to build games and explore creative coding\nThis course is taught by a university programming instructor passionate about making programming fun and accessible. The course environment is engaging, beginner-friendly, and designed to keep learners motivated—because learning to code should be a fun and inspiring journey.",
      "target_audience": [
        "Anyone who wants to learn to code easily in Scratch by creating a game.",
        "Beginners who have never programmed before in Scratch.",
        "Students that want to learn difficult programming concepts by having fun using their creativity."
      ]
    },
    {
      "title": "Roblox Rapid Game Development Course - 2025",
      "url": "https://www.udemy.com/course/robloxadvancedcodingcourse/",
      "bio": "Grow your basic scripting skills. Learn to make more complex games and have your scripts work together in your own game",
      "objectives": [
        "Indepth understanding of Lua the coding language used to create Roblox games",
        "Complex programming concepts and how to apply them",
        "Create multiple tool scripts to utilize in your own games",
        "How to have your players interact with objects, clothing and other players through code",
        "Create a Round Based Game Loop with a Lobby, timers and telporters",
        "Create a Simple Simulator to use as a template for your own simulation game ideas",
        "Learn to code concepts for a Survival game including spawning, hunger, rebirths and much more",
        "Learn to save and retrieve your players data using datastores",
        "Create and use animations in your projects"
      ],
      "course_content": {
        "Important Course Instructions": [
          "How To Take This Course",
          "Folders And File Structure"
        ],
        "Essential Concepts And Tools": [
          "CONCEPT: Get Player And Character",
          "CONCEPT: Basic Tables",
          "CONCEPT: Creating And Using Dictionaries",
          "CONCEPT: Using Module Scripts",
          "ESSENTIAL TOOL: Create A Trigger Part And Script",
          "CONCEPT: Damage And Heal Players",
          "CONCEPT: Using Tagged Scripts",
          "ESSENTIAL TOOL: Main Script And Leaderboard",
          "ESSENTIAL TOOL: Player Message GUI",
          "ESSENTIAL TOOL: Template Button And Label GUI",
          "CONCEPT: Remote Events",
          "ESSENTIAL TOOL: Menu GUI",
          "CONCEPT: Create Game Currencies",
          "ESSENTIAL TOOL: Camping Headlight",
          "ESSENTIAL TOOL: Create A Game Clock",
          "ESSENTIAL TOOL: Create Collision Groups",
          "CONCEPT: Spawn Functions",
          "ESSENTIAL TOOL: Day Night Script",
          "ESSENTIAL TOOL: Create Your Own Tools"
        ],
        "ESSENTIAL TOOL: Object Spawning System": [
          "Create And Understand The Environment",
          "Grid Module Script And Start Position",
          "Creating A Grid",
          "Create And Check Regions",
          "Spawn Trees"
        ],
        "Optional Tools": [
          "Pathfinding",
          "Player Trails",
          "Creating A Waterfall With Beams",
          "Parts That Follow The Player",
          "Tweening Parts - Make Spikes Move Up And Down",
          "Teleport In A Place - Moving Players Around"
        ],
        "Round Based Game Mechanics": [
          "Models And Main Script",
          "Create An IsPlaying Region",
          "Check The Player Status"
        ],
        "Simulator Game Mechanics": [
          "Points Mechanic",
          "Rebirth Mechanic",
          "Player Rewards",
          "Set Up Datastores",
          "Save And Load Player Data",
          "Load Player Rewards"
        ],
        "Camping Survival Game Project": [
          "Set Up The Environment",
          "Using The Toolbox",
          "Code The Log Pickup",
          "Utility Module And Player Messages",
          "Add To The Woodpile",
          "Take From The Pile",
          "Adding Logs to The Fire",
          "Burn The Logs",
          "Player Survival Clock",
          "Make Players Hungry",
          "Damage Hungry Players",
          "Collect And Eat Apples",
          "Using An Axe",
          "Create An Axe Animation",
          "Spawning Trees",
          "Find The Nearest Tree",
          "Chop Trees And Spawn Logs",
          "Spawn Apples",
          "Lava Hazzards",
          "Create Rat Enemies",
          "Rat Enemy AI",
          "Rat AI - Patrol And Eat Apples",
          "Rat AI - Attack Players",
          "Rat AI - Only At Night",
          "Rat AI - Player Safe Zone",
          "Rat AI - Send Rats Home",
          "Player Lives And Respawning",
          "Create Player Stats",
          "Game Balancing And Testing",
          "Day Night Cycle And More Rats",
          "Using Data Stores"
        ],
        "The Apple Pie Event": [
          "Adding New Mechanics",
          "Create An Apple Pie Tool",
          "Apple Pie Making Conditions",
          "Make An Apple Pie",
          "Run The Apple Pie Event",
          "Pie Event Timer",
          "Attract The Rats"
        ]
      },
      "requirements": [
        "Basic understanding of Roblox Studio and Lua",
        "Ability to install Roblox Studio on Pc or Mac",
        "A file decompression utility such as WinZip, or Archive to download and open lesson resources"
      ],
      "description": "Roblox is ranked as one of the top online entertainment platforms for audiences under the age of 18.  It's popularity is driven purely by the community, with millions of people signing up through word of mouth every month.\n\n\nRoblox is powered by a global community of over 2 million developers who produce their own immersive multi player experiences each month using Roblox Studio.  Any experience imaginable can be created on Roblox.\n\n\nThis course will teach you how to create a coding toolkit, how to create a round based game with a timer and lobby and how to create your own simulator style game.\n\n\nAll scripts are fully explained with working examples to learn and download for each lesson.\n\n\nA round based project with a lobby and timer that moves players from the lobby to the game and back to the lobby at the end of each round.\n\n\nA basic Simulator project that you can use as a template to begin creating any simulator you can imagine.\n\n\nA Camping Survival Simulator project that shows you some ideas about how to create a simulator and challenge your players.\nTake all the concepts you learn here and create the best game in the world ever!",
      "target_audience": [
        "Roblox coders",
        "Beginner Coders",
        "Intermediate Coders"
      ]
    },
    {
      "title": "Ask Me Anything About Unity",
      "url": "https://www.udemy.com/course/unity-ama/",
      "bio": "Student-requested topics including ECS, Job System, Databases, Augmented Reality, Procedural Animation, AI and more.",
      "objectives": [
        "Apply a diverse set of new game development skills to find custom solutions in implementing their own game mechanics."
      ],
      "course_content": {},
      "requirements": [
        "Be familiar with the Unity Game Engine (V. 2018+)",
        "Have an intermediate understanding of C#"
      ],
      "description": "What do YOU want to know about Unity but have been afraid to ask? Do you think your questions are too trivial to become an entire course? Every day Dr Penny de Byl receives messages from her students asking for assistance on a wide variety of topics that would benefit from a short tutorial.  In this course, Penny puts her 25 years of game development, research and teaching into practice to answer your questions in a variety of popular short workshop based tutorials.\nTopics covered include:\nThe Unity Entity Component and Job System\nTargeting Missiles\nIn-game Quest Systems\nReading and Writing to a Database\nAnimating Facial Expressions\nIntroduction to Augmented Reality for Android and iOS\nObject Pooling\nWorking with Asset Bundles\nContents and Overview\nSection 1:\nThe course begins with a section examining the new Unity Entity Component and Job System where you will build a planet simulation with 50,000 planets that orbit and are under the gravitational influence of four suns.\nSection 2:\nFollowing this, a section examining the creation of target-seeking missiles will cover basic line of sight missiles that remain locked onto a target, after being fired, as well as the addition of a waypoint system that gives missiles interesting curved and funky trajectories.\nSection 3:\nThe next section steps through the ground-up creation of an in-game quest system. Starting with a simple third person game environment, you will build a quest system which monitors player progress, as well as cover the Unity fundamentals of the UI system to support its presentation.\nSection 4:\nIn this section you will learn how to access an online database from inside Unity to store game data.  Through the use of a free online database service, you will follow along as we create a database and write simple PHP, mySQL and C# to link a Unity application with player details stored on an external server.\nSection 5:\nIf you've ever wanted to add real-time facial animations to your own characters to bring them alive, this section is for you.  In it you will add emotional expressions to a character and learn how to blend between them with code.  We will also add extra believability to the character by adding blinking and eye gaze dynamics.\nSection 6:\nWant to learn how to make augmented reality on your mobile phone?  This section will step you through developing several augmented experiences that you can try on your Android or Apple devices.  Using the Wikitude SDK with a special student license just for being enrolled, you'll have your first AR app up and running in 5 minutes.\nSection 7:\nObject Pooling is a very popular game design pattern that will help you save on memory usage.  It's great if you need to create a lot of resources, such as bullets or obstacles.  This section will show you how to build such a system that can be applied anywhere in your own games, through the development of an asteroid shooting game.\nSection 8:\nIn this section you will learn how to work with Unity's Asset Bundles.  These are external resources that you can call into your game at any time.  You'll learn how to create an Asset Bundle from scratch and then how to load them into your project at runtime, from both a local drive as well as an online URL.  I'll also show you how to load and swap player characters at runtime and how to expand the bundle after a games release to continue to bring in new content.\n\nWhat students are saying about Penny's courses:\nPenny is an excellent instructor and she does a great job of breaking down complex concepts into smaller, easy-to-understand topics.\nPenny's teaching style is exceptionally well-motivated and illustrated.\nThis course is awesome. The lecturer explains everything you need to know and encourages you to experiment and challenge yourself.",
      "target_audience": [
        "Unity beginner, intermediate and advanced students who would like to join a community of inquisitive students keen to learn about a variety of game development topics."
      ]
    },
    {
      "title": "Godot : Beginner to Advanced - Complete Course",
      "url": "https://www.udemy.com/course/godot-beginner-to-advanced-complete-course/",
      "bio": "Master the top Open Source game engine by recreating popular games and by exploring the fun features Godot has to offer.",
      "objectives": [
        "Use Godot to develop games."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Our first program - Hello world!",
          "Hello world, part 2."
        ],
        "Creating Pong in Godot!": [
          "Project set up.",
          "Pad Movement.",
          "Pad Movement - part 2.",
          "Pad Collision.",
          "Ball Movement.",
          "Finishing Up."
        ],
        "Creating a Mario Clone in Godot.": [
          "Setting up 2D Character Movement.",
          "Setting up the Jump and Player Collisions.",
          "Limiting The Jump and Flipping the Player.",
          "Animating the Player.",
          "Polishing the Player Animations.",
          "Designing our First Level",
          "Reference Level.",
          "Camera Follow and Level Design",
          "Fixing the wall movement bug.",
          "Destroying Bricks.",
          "Player Scene.",
          "Particle Effects.",
          "Clouds, Pipes, Groups and Bug Fixes.",
          "Creating the Power Up.",
          "Power Up Script.",
          "Picking up The Power Up.",
          "Power Up Brick.",
          "Completing the Power Up Code.",
          "Falling Into Pits.",
          "Creating Our First Enemy.",
          "Enemy AI.",
          "Invincibility Frames!",
          "More to come!"
        ]
      },
      "requirements": [
        "You should have a PC."
      ],
      "description": "In this course we will go through one of my personal favorite game engine - Godot.\n\nGodot is an open source game engine, which is pretty amazing considering just how awesome it is.\nWe will go step by step through the features of Godot. Then, when we are comfortable with the engine we will start by creating some games.\nFirst we will create a two player game - Pong.\nAfterwards we will create a clone of Super Mario Brothers. You will be provided all the necessary assets such as the Character sprites, environments etc. So that you can follow along the course without any problems.\n\nYou will learn and understand just how games work and how small details function, such as collisions and character movement.\n\nWe will use Vector math to calculate collisions, we will create our own physics for our game, so that we have full control of the game world.\nAll this, and more, will be covered in this course.",
      "target_audience": [
        "Anyone who wishes to learn game development.",
        "Anyone who wants to learn a new and exciting engine.",
        "Anyone who wants to learn programming."
      ]
    },
    {
      "title": "Facial Animation & More In Unreal Engine! | 3D Animation",
      "url": "https://www.udemy.com/course/facial-animation-in-unreal-engine-4/",
      "bio": "Learn how to create expressive facial animations using key frame animation inside of Unreal Engine! (Includes project)",
      "objectives": [
        "The Complete Unreal Engine Scene File Ready To Go Out-of-the-Box!",
        "A Really Cool Toon House To Use In Your Scenes Created by Michael Ricks ($25.00 value)",
        "Four (4) Rigged DAZ Original Toon Characters Included With the Course Created by Michael Ricks ($60.00 retail value)",
        "Rigged Robot character included in course (compliments of Epic Games)",
        "You will learn how to create high quality facial animations & more!",
        "Learn how to export morph targets (expressions) out of DAZ Studio and bring them into Unreal Engine 4",
        "Create high quality blink animations, the basis for realistic characters",
        "Animate side-to-side and up & down eye movements for believable characters",
        "Animate Mouth movements and mouth expressions.",
        "Animate head movements with the little known animation tools within Unreal Engine 4",
        "Create believable, expressive expressions, right within UE4!"
      ],
      "course_content": {
        "Introduction To Facial Animation": [
          "What You Will Learn In This Course",
          "Rigged DAZ Characters Included with Course",
          "Character Animation Example with Lip Sync Done Inside of UE4 Sequencer",
          "Download the Required Free Software Programs"
        ],
        "COURSE PROJECT FILES - Download Your Facial Animation Unreal Engine Project File": [
          "Facial Animation Unreal Engine Project File (2.4 Gigs)",
          "Where To Get Your FREE Genesis Character Bundles"
        ],
        "From DAZ Studio to Unreal Engine 4": [
          "Getting Morph Targets Into Unreal Engine 4 - Preview",
          "Preparing Facial Morphs In DAZ Studio",
          "Getting Your Morphs Into the Timeline",
          "Exporting DAZ Character FBX & Importing Into Unreal Engine 4"
        ],
        "Setting Up Your Character In Unreal Engine 4": [
          "Organizing & Preparing Your Scene in Unreal Engine 4",
          "Fix character materials, clean up and organize morph sliders"
        ],
        "Facial Animations & Expressions": [
          "Let's start animating! Creating a realistic eye blink cycle",
          "Look at Me Now! Create a \"Turning Eyes\" Animation",
          "Look Who's Talking Now! Create an Open & Close Mouth Animation",
          "Animating Expressions! Bringing Your Character To Life!"
        ],
        "Head & Body Movements": [
          "Head Movement",
          "Body Movement"
        ],
        "Lip Sync Animation & More!": [
          "Down & Dirty Lip Sync Animation In Unreal Engine",
          "Audacity for Dialogue Recording",
          "Recording Dialogue Live Along with Your Character Part 1",
          "Recording Dialogue Live Along With Your Character Part 2",
          "Add Secondary Mouth & Body Animation",
          "Bringing It All Together! Load Your Character & Animation Into The Sequencer",
          "BLENDSPACES - Amazing fun combining animations in Unreal Engine 4!",
          "Getting Your Character To Move Forward Over Distances"
        ],
        "More Cool Animation Tools!": [
          "Akeytsu - The Amazing, Affordable, Easy To Use Animation Software"
        ],
        "Cool Things & Extras": [
          "MetaHuman Creator",
          "Free Paragon Assets Released!",
          "How To Get Your Genesis 8 Characters Into Mixamo, Then Into Unreal Engine 4",
          "Preview of Unreal Engine 5: Coming In Late 2021!",
          "Video: Preview of Unreal Engine 5",
          "BONUS LECTURE: More courses for you at a HUGE discount!"
        ]
      },
      "requirements": [
        "A working copy of Unreal Engine (Free) & DAZ Studio 4.10 (both are free programs)"
      ],
      "description": "IMPORTANT:  Everything you'll learn in this course can be applied to the new release of Unreal Engine 5.  The new features of UE5 such as LUMEN and NANITE are not covered in this course yet, however.  You can even switch the layout of UE5 back to classic UE4 if you'd like to make it easier to follow along.  (I prefer the slick new layout of UE5 myself)\n\n\nLEARN FACIAL ANIMATION & MORE WITH UNREAL ENGINE 4 & DAZ STUDIO!\nBoth of these outstanding animation programs are FREE and will allow you to create stunning and highly professional character animations. In this course we will go over the simple techniques that unlock the little known animation powers inside of Unreal Engine.  By using the high quality DAZ 3D characters, you will learn how to export any morph targets you'd like from DAZ Studio and then utilize them inside of Unreal Engine.  (Note: Even though there is a DAZ to Unreal Bridge their are some issues with it and its good to learn how to do this manually as discussed in this course)\n\n\nREAL TIME ANIMATION RENDERING\nBy far one of the most powerful features of Unreal Engine is the ability to see your animations playing in real time as you work.  No more slow, sluggish systems that cramp your style and hinder your animation creativity.  Unreal Engine is a breeze to use, and best of all ... it's FUN! When your ready to export your animation to an image sequence for later compositing or to a video file, you will be able to render your animation out in near real time!\n\n\nIN THIS COURSE YOU WILL LEARN:\nHow to prepare your DAZ 3D character for export to Unreal Engine 4 with all the morph targets and expressions you wish\nHow to use the PUPPETEER tool in DAZ as a way to export morphs and animations\nHow to properly import your DAZ3D character with it's skeleton, rigging, morph targets, materials and textures\nLearn where the morph sliders are in Unreal Engine and how to use them\nCreate a realistic blink animation for your character\nCreate side to side and up & down eye movements for your character\nAnimate mouth movements for speech as well as expressions\nAnimate your characters head movements\nCreate and animate believable expressions\nLearn about amazing new tools that work in conjunction with Unreal Engine 4 such as Allright Rig & Akeytsu\nPlus much, much more!\nIncluded In The Course Are Five (5) Fully Rigged Characters\n\nSuper Dude - this character is an original creation by Michael Ricks sculpted in ZBrush.  Inspired by the characters from the hit film 'The Incredibles,' Super Dude comes fully rigged with a ton of facial morphs.  You'll have an absolute blast right away when you start sliding around the controls and see what hilarious expressions you can make with him.  He also comes with the phoneme mouth shapes for accurate lip sync punctuation. Super Dude is based on the DAZ3D Genesis 8 character.\nWendy - this cute Toon girl character is also an original creation by Michael Ricks and was sculpted in ZBrush, based on the DAZ3D Genesis 3 character.  She also comes with many facial morph and expression controls and will immediately come alive for you in Unreal Engine 4.  With her big expressive eyes, you will have her emoting in no time at all!\nLil' Frankenstein - this Toon character was also created by Michael Ricks in ZBrush and is based on the DAZ3D Genesis 3 character.  Frankie comes with a wide array facial morphs and can create many emotions.  You'll have tons of fun with Lil' Frankenstein all year around, not just on Halloween!\nBilly - also created and sculpted in ZBrush by Michael Ricks, this Toon boy character is based on the DAZ3D Genesis character and comes with a wide variety of facial morphs.  You'll have a blast animating Billy!\nEpic Robot - this way cool robot character is created by Epic Games for the hit VR game Robot Recall.  He's a stunning 3d character asset and really fun to animate.  He comes with an included animation and sound wave 'roar' so you'll have him up and running right away.\nNOW IS THE BEST TIME TO LEARN ANIMATION!  SO GO AHEAD AND CLICK THE ENROLL NOW BUTTON AND LET'S BEGIN!\nI'LL SEE YOU ON THE INSIDE!\nAll these characters are included in the course and are for your use both personal and professional for cinematics and film/video use.  If you desire to use the characters in an actual game as a playable character you will need to purchase an interactive license from DAZ3D as these characters are based on the Genesis models.  At this time, game licenses are running approximately $30-$50 per character for a published game. Please go to the DAZ3D website for more information.",
      "target_audience": [
        "Beginner to intermediate animators who wish to learn facial animation & intermediate animation in Unreal Engine 4"
      ]
    },
    {
      "title": "Unity : Beginner to Advanced - Complete Course",
      "url": "https://www.udemy.com/course/unity-master-video-game-development-the-complete-course/",
      "bio": "Master Video Game development from the ground up using Unity and C#. Learn and understand how games are made.",
      "objectives": [
        "Use and understand Unity.",
        "Make their dream games a reality with Unity.",
        "Good game development practices."
      ],
      "course_content": {
        "Introduction": [
          "Downloading Unity and Project Setup.",
          "Unity Objects and Components.",
          "Creating our Own Component."
        ],
        "Unity Engine UI": [
          "Working with User Interface Text.",
          "Creating a Countdown Timer.",
          "Creating a Digital Clock.",
          "Unity UI: Images.",
          "Unity UI: Buttons.",
          "Unity UI: Toggle.",
          "Unity UI: Sliders.",
          "Unity UI: Dropdown.",
          "Unity UI: Input Fields.",
          "Unity UI: Finishing Up."
        ],
        "C# programming.": [
          "Introduction to C# with Unity.",
          "C# If - Else Statement.",
          "C# While - Do While loop.",
          "C# For loop.",
          "C# foreach loop.",
          "C# switch statement."
        ],
        "Creating a Simple Calculator.": [
          "Setting up the Canvas.",
          "Calculator Logic.",
          "Finishing Up Our Calculator.",
          "Running our Calculator in a Browser."
        ],
        "Creating a 2D Sidescroller.": [
          "Importing Our Assets",
          "Making our Character move!",
          "Setting up the Animator for our Character.",
          "Giving our Player Jumping abilities!",
          "Adding Falling Animations and Improving the Jump Feel.",
          "Adding the Shooting Animation.",
          "Shooting Bullets.",
          "Particle and Polish."
        ],
        "Creating a Space Invaders Game.": [
          "Setting up the Ship Movement.",
          "Limiting the Ship Movement.",
          "Bullets and Shooting.",
          "Adding Shooting Sounds and Particles.",
          "Adding Power Ups and Power Downs.",
          "Creating Enemy Prefabs.",
          "Enemy Ship Movement.",
          "Taking and Dealing Damage.",
          "Spawning Enemies.",
          "Polishing Enemy Ship Movement.",
          "Random Enemy Generation.",
          "Enemy Shooting.",
          "Adding Score and Highscore.",
          "Spawning Power Ups and Finishing up."
        ],
        "3D Game Development.": [
          "Lighting in Unity.",
          "Post Processing - Breathing Life into your Scenes.",
          "Post Processing - Part 2.",
          "Creating a First Person Controller.",
          "First Person Camera Movement.",
          "Occlusion Culling."
        ]
      },
      "requirements": [
        "Have a machine that can run Unity."
      ],
      "description": "Learn how to create video games with Unity and C#.\nEven if you are a complete beginner or experience Unity user this course will offer a lot of useful information about game development.\nIn this course we will explore Unity from the ground up, taking a look at the Unity UI system and how we can use it effectively in our games.\nThen we will continue into 2D game development and speak about game feel / game juice, generally how to make your game feel good.\nFinally we will speak about the importance of lighting and post processing in video games, we will create a First Person Game and teach you some good game development practices, like Occlusion Culling, which is a must know technique if working with 3D Game development.",
      "target_audience": [
        "Anyone who wants to learn how to improve their games.",
        "Anyone who wants to learn how to make games.",
        "Anyone who has a love for game developmen."
      ]
    },
    {
      "title": "Unreal Engine 5 (UE5): Complete Beginners Course",
      "url": "https://www.udemy.com/course/unreal-engine-course/",
      "bio": "The Fastest Way to Get Started With Unreal Engine 5",
      "objectives": [
        "Unreal Engine",
        "Unreal Engine 5",
        "Game Design",
        "Architectural Design",
        "Product Design"
      ],
      "course_content": {
        "Introduction to Unreal Engine 5": [
          "Introduction to the Course",
          "Download and Install Unreal Engine 5",
          "Creating Your First UE5 Level",
          "Exposure and Post Processing Volumes"
        ],
        "Unreal Engine 5 Materials": [
          "Introduction to UE5 Materials",
          "Creating Master and Instance Materials"
        ],
        "Epic Unreal Engine Marketplace": [
          "Using the Epic Unreal Marketplace"
        ],
        "UE5 Lighting Basics": [
          "Introduction to UE5 Lighting and Light Types",
          "Creating Light Maps",
          "Light Mass Settings",
          "How to Fix Common Light Map Issues"
        ],
        "UE5 Lumen Lighting Engine": [
          "Introduction to Lumen",
          "Using Emissive Materials with Lumen"
        ],
        "Nanite Virtualized Geometry": [
          "Introduction to Nanite Virtualized Geometry",
          "Building Nanite Objects",
          "Avoiding Overdraw in Nanite"
        ],
        "Using UE5s Integrated Quixel Bridge and Megascans Library": [
          "Getting Started with Quixel Bridge and Megascans",
          "Using Pre-Built Quixel Bridge Materials"
        ],
        "Importing External Assets and Meshes to UE5": [
          "Import FBX Meshes and Materials into UE5"
        ],
        "Introduction to Blueprint Visual Scripting": [
          "Introduction to Blueprints",
          "Your First Blueprint Project",
          "Blueprint Variables",
          "Blueprint Functions",
          "Health and Damage Systems"
        ],
        "Building our First Game: Castaway": [
          "Castaway Game Introduction",
          "Planning our First Game",
          "Setting Up Our Project",
          "Sculpting Landscapes and Terrain",
          "Landscape Painting and Landscape Materials",
          "UE5 Water Bodies",
          "Adding Foliage Variations",
          "Adding Nanite Meshes to Landscape",
          "Importing and Rigging Our Character",
          "Creating the HUD Overlay",
          "Food Caches and Niagra VFX System",
          "Building the Game Mechanics",
          "Event Tick and Timed Events",
          "Finishing Up the Game"
        ]
      },
      "requirements": [
        "No Prerequisites Required"
      ],
      "description": "*Brand New Lectures Added This Month*:\nCharacter Movement and Animations From Scratch\nUE5 Metahumans (Creation and Animation)\n\n\nWelcome to a beginners comprehensive look at the new Unreal Engine 5. UE5 is used by professionals and beginners alike to create stunning real-time content with the help of the new Lumen Lighting System and Nanite Virtualized Geometry Engine. It has never been easier to get started as a Game, Architectural, or Product Developer and create amazing content.\n\n\nWe will take you from Unreal Engine Zero to Hero in just a few hours, covering everything from the general UE5 layout all the way through creating a fully functioning game.\n\n\nJust a bit of what the course covers:\nIntroduction to Unreal Engine 5\nOverview of the new UE5 user interface\nHow to setup your first project\nCreating your first level\nAdjusting manual exposure and exploring post process volumes\n\n\nFull Introduction to Materials and Shaders\nHow to build materials using the material node editor\nHow to create master and instance materials to easily cut down on material efforts\n\n\nExplore the Unreal Marketplace\nHow to use the Unreal Marketplace to score free and paid meshes, materials, functions, and lots more\n\n\nUnreal Engine Lighting Basics\nA full introduction to different lighting types in UE5\nHow to use light map baking to create playable beautiful environments\nAn overview on lightmass settings\nHow to fix common light map issues\nNew: Lumen Lighting Engine\nIntroduction on how the lumen lighting engine works to create amazing real-time environment lighting\nHow to create emissive materials that generate both direct and indirect real-time lighting\nNew: Nanite Virtualized Geometry\nIntroduction to Nanite now allowing million plus poly meshes to be added to your scene without major performance issues\nHow to create Nanite assets from existing meshes\nDiscussions around Nanite limitation like overdraw and how to overcome these limitations\nThe Integrated Quixel Bridge (Megascans) Library\nHow to get started with the Quixel Bridge and Megascan meshes right from the UE5 interface\nA look at pre-built free Quixel Bridge materials\nImporting External Meshes and Assets to Unreal Engine 5\nA walkthrough on how to import FBX files right into UE5\nHow to fix possible material issues at import\nComplete Introduction to the Blueprint Visualized Scripting Engine\nHow to build your very first blueprints and create events in UE5\nMore in depth examples of creating your first UE5 blueprints\nHow to create and use Blueprint Variables and Functions\nHow to build a blueprint health and damage system that updates in realtime\nWe then build a completely functional game that covers additional concepts like:\nPlanning a project\nSetting up a project for the first time\nSculpting landscapes and terrains\nPainting materials on landscapes\nCreating \"auto\" materials that paint different materials based on the slope of the terrain\nHow to create realistic water bodies like oceans and lakes\nAdding foliage variations (plants, weeds, flowers, trees, etc.) using the UE5 foliage creator\nImporting, rigging, and adding animations to characters\nCreating a on screen HUD (Heads Up Display) overlay that shows real-time progress bars\nCreating blueprint food caches\nIntroduction to Unreal's VFX system Niagra\nHow to use the Event Tick and Timed Events in UE5\nAnd lots more...\n\n\nLearn how to Import and Animate Characters from Scratch\nDownload Character Meshes and Animations\nFull Character Setup with Input Keys (Idle, Walk, Run, and Jump)\nCharacter Animation Blending\n\n\nIntroduction to UE5 Metahumans (Digital Humans)\nLearn how to use the Metahuman Creator to create amazingly real human characters\nBasic introduction to Metahuman animation, the Metahuman skeletal rig, and the cinematic sequencer.",
      "target_audience": [
        "Game Design Students",
        "Product Design Students",
        "Architectural Design Students"
      ]
    },
    {
      "title": "Unreal Engine 5 (UE5): The Complete Beginner's Course",
      "url": "https://www.udemy.com/course/unreal-engine-5-beginners-course/",
      "bio": "Learn the fundamentals of Unreal Engine 5 through level design!",
      "objectives": [
        "Install and navigate Unreal Engine 5",
        "Import and Use Quixel Megascans assets",
        "Place and transform different world geometries",
        "Create and apply textures and materials",
        "Add details, sound effects, and lighting",
        "Optimize your environment to game-ready performance"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Community Discord Server",
          "Downloading Unreal Engine 5",
          "Creating the Project"
        ],
        "Unreal Engine Overview": [
          "The Toolbar",
          "The Details Panel",
          "The World Outliner",
          "The Content Browser",
          "Viewport & Navigation"
        ],
        "Initial Project Setup": [
          "Creating a New Level",
          "Post Process Volume",
          "Camera Exposure"
        ],
        "Quixel Megascans": [
          "Introduction to Quixel Megascans",
          "Quixel Bridge Overview",
          "Finding Our Assets",
          "Quality vs. Performance",
          "Importing Assets"
        ],
        "Materials & Textures": [
          "What is a Texture?",
          "Texture Properties",
          "What is a Material?",
          "The Material Graph",
          "Material Instances",
          "Adjusting the Texture Compression"
        ],
        "Level Design": [
          "Placing the Ground Mesh",
          "Creating a Blend Material",
          "Blend Material Properties",
          "Mesh Painting Tool",
          "Adjusting the Ground Tiling",
          "Adjusting the Ground Textures",
          "Painting the Ground",
          "Adding Rocks",
          "Adding Puddles",
          "Adding Branches",
          "Adding Twigs",
          "Adding Cacti",
          "Adding Grass",
          "Adding Props",
          "Applying Decals",
          "Creating a Landscape",
          "Sculpting the Landscape",
          "Adding Assets to Landscape",
          "Finalizing the Environment"
        ],
        "Optimization": [
          "Level Of Detail",
          "Texture Size",
          "Optimization Viewmodes",
          "Lightmap Density",
          "Limiting the FPS Usage"
        ],
        "Lighting": [
          "Light Types",
          "Initial Lighting Setup",
          "Adding a Sky",
          "Adding a Directional Light",
          "Adding a Sky Light",
          "Lightmass Importance Volume",
          "Adding Fog",
          "Adjusting the Lighting",
          "Adjusting the Post Process Volume",
          "Static vs. Stationary vs. Movable",
          "Building the Lighting",
          "BONUS: Insight on Boardcraft Lighting"
        ],
        "Audio": [
          "Importing Sound Assets",
          "Creating Sound Cues",
          "Adding Sound to the Environment"
        ],
        "Presentation": [
          "Adding a Camera",
          "Adjusting the Camera Settings",
          "Taking a Screenshot",
          "Making the Camera Work on Play",
          "What Now?"
        ]
      },
      "requirements": [
        "A computer capable of running Unreal Engine 5",
        "Interested in making games using Unreal Engine 5"
      ],
      "description": "Learn the fundamentals of Unreal Engine 5 through level design!\nUnreal Engine is one of the most popular engines in AAA-studios from games to architecture, product design, and filmmaking. Known for high-quality graphics, I want you to showcase it.\nBy the end of this course, you will have learned the fundamentals of the Engine by creating your own realistic environment from start to finish with easy follow along videos. You will able to use the same workflow and techniques to create your own projects.\nYou will get comfortable navigating the Engine and apply key concepts to your future projects whether you are game developer, programmer, artist, or designer. You don't need any prior experience.\nThis course has all you need to know to get started, including:\nUnreal Engine overview (toolbars, panels, browsers..)\nCreating and setting up projects\nPlacing and transforming different actors\nCreating and applying textures and materials\nAdding details, sound effects, and lighting\nAs a bonus, you get to create a beautiful cinematic and presentation of your finished product.\nLearn the best practice from a published developer\nMy name is Moustafa, and I am the director and developer of Farmtale on Steam. With years of experience within game development and teaching, I will show you the best practice of Unreal Engine 5. It is not enough for games to look good, but they also has to perform. You will use different optimization tools to achieve game-ready performance.\nJoin our supportive and sharing community on Discord.\nSee you in lesson 1!",
      "target_audience": [
        "Complete beginners with no prior experience",
        "Game programmers who want to get into level design",
        "Experienced game developers who want to brush up their skills"
      ]
    },
    {
      "title": "Game Development (Android + IOS): Build 12 Apps & Games",
      "url": "https://www.udemy.com/course/android-game-development-using-python-build-12-apps-games/",
      "bio": "Build 12 Cool Projects-- 2048 game, Flappy Bird, Credit Card Validation, Scientific Calculator etc. with Python!!",
      "objectives": [
        "Will learn about android game development with Kivy & Python",
        "Will learn about all of features in Python 3.6",
        "Will learn about advanced programming with Python",
        "Will learn to make great games and any apps with Python",
        "Will cover advance stuffs pf Programming --iterators, generators, decorators & closure",
        "Will learn about Pygame module",
        "Will learn about GUI with Python",
        "Will learn about Object Oriented Programming Principles",
        "Will learn to make real world projects with python",
        "Will learn to make simple AI with Python that can be implemented in any games",
        "Will learn about lambda functions and some higher order functions",
        "Will learn about implementation of decorators with Python",
        "Will learn about basics game fundamentals",
        "Will learn about Lifecycle of android app development with python"
      ],
      "course_content": {
        "Course Overview": [
          "Introduction"
        ],
        "Setup Python On Your Machine!!": [
          "Setup Python",
          "Setup Python & IDLE on Linux"
        ],
        "Python Introduction": [
          "Variables",
          "Quiz in types",
          "Python Keywords and identifiers",
          "Python statements, indentation",
          "Project: Password Generator",
          "math operations",
          "Quiz in order operations",
          "math module",
          "Quiz on calculations",
          "String",
          "String methods",
          "Slicing Techniques",
          "Formatting String",
          "Project: Simple Million Word Count Problem",
          "Project: Remove Punctuation",
          "Project: Slicing Domain"
        ],
        "Python Flow Control": [
          "Boolean and comparison",
          "conditionals",
          "logical operators",
          "Quiz on logical operators",
          "looping --for",
          "looping --while",
          "PROJECT: STAR PATTERN",
          "PROJECT: ROCK PAPER SCISSORS"
        ],
        "Datastructure in python": [
          "Quiz on List and Tuples",
          "list",
          "dictionary",
          "set"
        ],
        "Functions in python": [
          "Quiz on functions",
          "Function",
          "Default argument",
          "packing and unpacking *args // **kwargs"
        ],
        "Tic Tac toe Projects -- Build simple AI": [
          "tic tac toe intro",
          "creating board",
          "making two players",
          "making main loop and player move",
          "Computer move and simple AI",
          "Making winner method",
          "Wrapping Up!!"
        ],
        "Exception handling with python": [
          "Concept of Exception handling",
          "Python Assertion",
          "PROJECT -- STOP TIMER",
          "project --scientific calculator",
          "project --scientific calculator-II"
        ],
        "Python Class and Object": [
          "Python OOP",
          "Inheritance",
          "Encapsulation",
          "Polymorphism",
          "Operator overloading",
          "Project: Credit Card Validator"
        ],
        "Advance Topics": [
          "Lambda Functions",
          "List Comprehensions",
          "Quiz on comprehensions",
          "Python Iterator",
          "Iterator Example",
          "Generator",
          "Generator Example",
          "Closure",
          "Decorator",
          "Property",
          "Python shwallow and Deep Copy",
          "Regex : match method",
          "Regex: search method",
          "pickle and multiprocessing",
          "__name__ == \"__main__\"",
          "modules and packages"
        ]
      },
      "requirements": [
        "Computer with any OS and Internet connection",
        "No Programming Experience Required"
      ],
      "description": "Welcome to Python Programming world: most popular language skill to have in 2018. You are going to learn every bit of python language in this course so that you can apply your knowledge in real world apps.\nYou will learn:\n1. Android game and app development with Kivy+Python\n2. Python basics and advance\n3. Important pygame module\nQuestions that most beginners ask me :\nIs Python A Good First Programming Language To Learn?\nEven though it has not yet been adopted as a first language by many computer science programs, Python is widely seen by industry experts as a great first programming language when learning to code and its extensive use in SpaceX  to automate and handle technologies to launch rockets, Instagram, Google to support their backends and Many companies to support and execute ML and Deep Learning Algorithms; Its undoubtedly No.1 Programming Language to learn.\nFor starters, the syntax of Python is simpler than that of most other major programming languages, with fewer exceptions and special cases. It also tends to use plain English keywords in place of the system of punctuation that has to be memorized in other languages, making it easier to learn to code. Given these conventions, Python code tends to appear as less of a \"jumble\" to newcomers than it does in comparable languages.\nAnother great feature of Python is the ubiquity of its use. While Python is optimized for development on Linux and Unix systems, interpreters are available for just about every major operating system. All implementations of Python are supported by an excellent standard library, which means that new students can very quickly move on to creating actual functional programs that are useful. Additionally, the standard implementation of Python, CPython, is free and open source.\nWhat Type Of Jobs Are Available To Python Programmers?\nIn the job market, if you observe the trends; Python is often looked as a strong language to support some  primary language that is more broadly used like C or Java. But Lately, with the evolution of ML and Deep Learning Algorithms; it is highly demanded skill to have in 2018 and later. There are a variety of jobs that one can get focusing exclusively on Python development, however. Many of these jobs will be in building and improving the internal tools that a company uses to create its finished marketable products, rather than working on the finished product itself.\nOne specific economic sector where the presence of Python programming is particularly strong is the geospatial industry. This is a critical industry that deals in navigational tools such as GPS, radar and light measurements.\nIf you're interested in web applications, Python is a better choice for development (working with the back-end or server side) rather than design (creating the actual finished front-end that site visitors interact with). As mentioned previously, Google employed Python for many components of its search engine, and it is quite widely used in the data mining industry.\nFinally, Python can also be used for game development. Some famous examples of games developed either entirely or in large part with Python include EVE Online, Civilization IV, the Battlefield game series and the Mount & Blade games. The popular development environment Blender is written in Python.\n\n\nTOPICS TO BE COVERED IN THIS COURSE:\nInstalling Python\nRunning Python Code\nStrings\nLists\nDictionaries\nTuples\nSets\nNumber Data Types\nPrint Formatting\nFunctions\nScope\nargs/kwargs\nBuilt-in Functions\nDebugging and Error Handling\nModules\nExternal Modules\nObject Oriented Programming\nInheritance\nPolymorphism\nEncapsulation\nAdvanced Methods\nCopy Module\nDecorators\nIterators\nAndroid development with Kivy\nClosures\nand much more!\nPROJECTS\nMinor Projects (Basic to advance):\nPassword generator\nDomain Formatting\nStar Pattern\nStop timer\nTic Tac Toe\nSimple word count\nScientific calculator\nRock Paper Scissors\nCredit card Validator\nPunctuation removal\nMajor Projects:\nFlappy Bird\n2048 game",
      "target_audience": [
        "Anyone who wants to learn coding through game development",
        "Anyone who wants to learn coding for their academics",
        "Anyone who wants to learn Python to excel their carrer in Machine Learning and Data Science"
      ]
    },
    {
      "title": "Make a Tetris-style Puzzler in Unity",
      "url": "https://www.udemy.com/course/make-a-tetris-style-puzzler-in-unity/",
      "bio": "Build a tile-based puzzle game with C# and Unity",
      "objectives": [
        "Make their own Tetris-like puzzle game to be deployed on Mac or PC!"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Prerequisites",
          "How This Course is Structured",
          "A History of Tetris"
        ],
        "Project Setup": [
          "Creating Your New Project",
          "Project Folders",
          "Save Point 1"
        ],
        "The Game Board": [
          "Core Components",
          "The Board Class",
          "Create the EmptySquare Sprite",
          "Camera Setup",
          "EmptySquare Prefab",
          "DrawEmptyCells Method",
          "Naming Conventions",
          "Finishing DrawEmptyCells",
          "Grid Storage",
          "Save Point 2"
        ],
        "User Interface": [
          "User Interface Layout",
          "The Overlay Canvas",
          "Text and Images",
          "Layout Groups",
          "Nine-sliced Border",
          "The World Space Canvas",
          "Save Point 3"
        ],
        "Core Components": [
          "Pivot Mode",
          "Shape Prefabs",
          "The Shape Class",
          "The GameController Class",
          "Referencing Other Game Objects",
          "The Spawner Class",
          "The Vectorf Class",
          "Vector2Int and Vector3Int",
          "Save Point 4"
        ],
        "Game Mechanics": [
          "Spawning Shapes",
          "The Time Class",
          "Checking Board Boundaries",
          "Storing Shapes in the Grid",
          "Player Input",
          "More Player Input",
          "Finishing Player Input",
          "Clearing Rows",
          "Game Over",
          "Save Point 5"
        ],
        "Sounds": [
          "The SoundManager Class",
          "Background Music",
          "Sound Effects",
          "Input Sounds",
          "Clear Row Sounds",
          "Vocal Effects",
          "Save Point 6"
        ],
        "UI Enhancements": [
          "Icon Toggle",
          "Rotation Direction Toggle",
          "Pause Button",
          "Screen Fader",
          "Coroutines",
          "Save Point 7"
        ],
        "Scoring": [
          "The ScoreManager Class",
          "Scoring User Interface",
          "Leveling Up",
          "Save Point 8"
        ],
        "Gameplay Extras": [
          "Ghost Shape",
          "Shape Queue (Part 1)",
          "Shape Queue (Part 2)",
          "Correction: Shape Queue",
          "Shape Holder (Part 1)",
          "Shape Holder (Part 2)",
          "Save Point 9"
        ]
      },
      "requirements": [
        "Unity 3D free Personal edition (ParticleSystems require version 2017 and above, but most lectures can be completed with 5.6 or above)",
        "OPTIONAL Photoshop or image-editing program to customize art assets (otherwise, use the downloadable art assets provided)"
      ],
      "description": "Note: although the lectures were recorded with an older version of Unity, the final project runs well on Unity 2019\nUnity 3D  has quickly become one of today's fastest growing game development tools. Learn more about this fascinating game engine in our project-based class, where we build a Tetris-style puzzle game from scratch! If you have some basic knowledge of C# and Unity, take your skills to a new level by exploring this short course in remaking a classic arcade game.\nIf you have completed a few basic tutorials on Unity and have some basic knowledge of C# (variables, loops, data structures, etc.),this class is for you! We take a project-based approach, where we follow one game from start to finish.\n\nWe will:\nstart with a blank Unity project and flesh out a fully working game.\nlearn some fundamental techniques for creating your own puzzle game\nfollow several C# scripts line-by-line and learn how to organize our scripts logically and cleanly\nport our application to iOS and Android!   See your glorious game run on a mobile device!\nWhat is covered:\nSetup our project settings and environment\nBreaking down the gameplay mechanics\nCreating a Board class to store our data\nLaying out user interface items\nCreating our game piece Shape class\nSetting up our master GameController class to handle logic\nApply Time to our game logic\nScript to handle player input\nAdd sound effects to game events\nApply particle effects to add some punch to our graphics\nMaking a score manager to track player progress and high scores\nEnhance our game with extra features to make it a polished experience\nJoin the democratization of game development! Level up your Unity 3D skills and build your Tetris-style game today!",
      "target_audience": [
        "This course is meant for beginning to intermediate students with some familiarity with Unity and C#",
        "This course is NOT meant as an introduction to Unity; though we will walk you step-by-step through the project, do NOT use this as your first course in Unity",
        "Some working knowledge of C# is necessary; do NOT use this as an introduction to C#",
        "If you are a beginning to intermediate game developer interested in improving your skill set, this course is for you!"
      ]
    },
    {
      "title": "Unity Android : Build 8 Mobile Games with Unity & C#",
      "url": "https://www.udemy.com/course/unity-android-game-development/",
      "bio": "Learn Android Game Development with Unity , Build 8 Android Mobile Games with Unity & C#",
      "objectives": [
        "Build Fully Featured Android Games",
        "Learn C# Fundamentals for Building Games",
        "Build & Run Your Games on Android Devices",
        "Monetize Your Games with Video Ads",
        "Create 7 Android Games With Unity",
        "Learn Game Development Fundamentals"
      ],
      "course_content": {
        "Introduction & Installing Unity (2025 Updated)": [
          "Introduction To This Course",
          "Installing & Setting Up Unity 6",
          "Creating Your First C# Script in Unity 6",
          "Setting Up Unity 6 for Android Game Development",
          "Set Unity Active Input Handling - Unity 6.1 (2025)",
          "Installing and Setting Up Unity 2023",
          "Installing and Setting Up Unity 2022",
          "Play Test The Games Before Making Them",
          "Join The Community"
        ],
        "Game 1 : Simple 3D Endless Runner Game with Unity": [
          "Create A 3D Runner Game"
        ],
        "C# Scripting Basics For Unity Game Development": [
          "Getting Started With C# Scripting in Unity",
          "Understanding Structure of a C# Script",
          "Event Functions in Unity C#",
          "Variables in C#",
          "Public variables in Unity C#",
          "The Update Fuction in Detail",
          "Function Basics in C#",
          "Functions with Parameters & Return types in C#",
          "if else statements in C#",
          "More Conditions & Equality Checking",
          "Boolean variables in C#",
          "Introduction to Arrays in Unity C#",
          "More about Arrays in C#",
          "Understanding For Loops in C#",
          "While loops in C#",
          "Learning foreach loops in C#",
          "Switch Case Statements in C#"
        ],
        "Game 2 : Dodging Dog Mobile Game": [
          "Play Test The Game",
          "Adding Background and Boundaries",
          "Adding The Player",
          "Creating The Player Controller",
          "Flipping The Player Direction",
          "Creating Obstacle",
          "Spawning Obstacles",
          "Spawning Obstacles Repeatedly",
          "Creating The GameManager",
          "Creating the Score System",
          "Creating Score UI",
          "Creating Game Over Menu",
          "Adding Functionalities To The Buttons",
          "Creating The Main Menu",
          "Building The Game for Android"
        ],
        "Game 3 : Food Eater Android Game in 15 Minutes": [
          "Creating An Android Game in 15 Minutes"
        ],
        "Game 4 : Line Runner Hyper Casual Game": [
          "Play Test The Liner Runner Game",
          "Setting Up The Project",
          "Creating The Player Controller",
          "Creating Obstacle",
          "Creating More Obstacles",
          "Spawning Obstacles",
          "Spawning obstacles at the Bottom",
          "Detecting Collision and Restarting",
          "Creating Game Manager",
          "Creating Lives Counter",
          "Adding Score",
          "Designing Game Play UI",
          "Creating The Main Menu",
          "Managing Everything When The Game Starts",
          "Creating Tap To Start Animation",
          "Creating Player Trail Particle Effect",
          "Adding Background Particle Effect",
          "Camera Shake Effect"
        ],
        "Monetize Your Games with Unity Video Ads ( Updated 2023 )": [
          "Setting Up Unity Ads 2023",
          "Implementing Interstitial Ads",
          "Playing Interstitial Video Ads in Your Game",
          "Displaying Banner Ads in Your Game"
        ],
        "Monetize Your Games with Unity Video Ads ( Updated 2021 )": [
          "Setting Up Unity Ads for Unity 2021",
          "Displaying Interstitial Video Ads",
          "Showing Rewarded Video Ads",
          "Rewarding The Player for Watching The Complete Ad",
          "Showing Rewarded Ads with a Practical Example"
        ],
        "Game 5 : Ball Smash Android Game": [
          "Build A simple Ball Smash Android Game in 40 Minutes"
        ],
        "Game 6 : Build a 3D Endless Runner Hyper Casual Game": [
          "Setting Up The Game",
          "Adding The Player",
          "Creating Player Controller Script",
          "Limiting Player Position",
          "Creating Enemies",
          "Spawning Enemies from Random Position",
          "Restarting The Game on Collision with Enemies",
          "Creating The Score System",
          "Press Any Key To Start The Game",
          "Creating Animated Blinking Text",
          "Creating The Main Menu",
          "Saving Score and Creating High Score",
          "Adding Fog Effect",
          "Adding Touch Input Controls The Simplest Way",
          "Creating Screen Independent UI that Scales Automatically",
          "Converting To Android & Running on Mobile Device"
        ]
      },
      "requirements": [
        "Basic Understanding of Unity & C#"
      ],
      "description": "List Of Things You Will Learn:\nBuild & Run Your First Android Game in 1 Hour\nLearn C# Basic for Building Games with Unity\nCreate A Dodging dog Game\nBuild A Ball Smash Android Game\nCreate A Line Runner 2D Game\nMake A Food Eater Game in 15 Minutes\nBuild A 3D Endless Runner Hypercasual Game\nCreate A 3D Tappy Ball Game\nImplement Video Ads In Your Game\nReward Your Players with Rewarded Video Ads\n\n\nLearn the basic concepts, tools, and functions that you will need to build fully functional Android mobile Games with the Unity game engine.\nBuild a strong foundation in Unity and Android Game Development with this course.\nUnity Installation & Setup\nAndroid Game Examples\nC# Scripting for Unity\nQuick Prototyping\nGame Monetization\n2D & 3D Game Development\nA Powerful Skill at Your Fingertips  Learning the fundamentals of Unity Android Game Development puts a powerful and very useful tool at your fingertips. Unity is free, easy to learn, has excellent documentation, and is the game engine used for building android games.\nJobs in unity android game development are plentiful, and being able to learn unity android game development will give you a strong background to more easily build awesome android games.\nContent and Overview   Suitable for beginning programmers, through this course of 50+ lectures and 16 hours of content, you’ll learn all of the unity android game development fundamentals and establish a strong understanding of the concept behind android game development.\nStarting with the installation of the Unity , Android SDK , this course will take you through various unity features and how to use them. By creating example games, you’ll establish a strong understanding of unity game development.\nWith these basics mastered, the course will take you through building different example games with unity to learn more about the process of creating mobile android games with unity.\nStudents completing the course will have the knowledge to create fully functional and ready to publish android games with unity.\nComplete with working files, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course.\nMusic Taken from : bensound",
      "target_audience": [
        "Anyone who wants to build Games for Android with Unity"
      ]
    },
    {
      "title": "Procedural Terrain Generation with Unity",
      "url": "https://www.udemy.com/course/procedural-terrain-generation-with-unity/",
      "bio": "Programming realistic environments with C# through the algorithmic manipulation of mesh and vegetation data in URP.",
      "objectives": [
        "Use various algorithmic approaches to create procedurally generated content.",
        "Manipulated terrain meshes with code to create realistic looking landscapes.",
        "Texture terrain meshes procedurally.",
        "Discuss the design principles involved in producing aesthetically pleasing terrains.",
        "Manipulate the render settings in Unity to produce better looking camera results.",
        "Create custom Unity windows and graphical user interface elements for use inside the Editor."
      ],
      "course_content": {
        "Introduction": [
          "How to Study This Course",
          "Join the H3D Student Community",
          "Contacting H3D",
          "Welcome",
          "FAQs"
        ],
        "2024: The Unity Terrain Object": [
          "Getting Started: Setting up Unity for Terrain Generation",
          "Manually Adding Texture Layers",
          "Landscape Reproduction Challenge",
          "A Word about Brushes",
          "Adding Trees to a Terrain",
          "Adding Details to a Terrain",
          "Design Principles for Terrain Aesthetics",
          "Important Terrain Settings",
          "Getting Ready to Create a Custom Editor",
          "Generating Random Heights Part 1",
          "Generating Random Heights Part 2",
          "Loading Height Map Data from an Image",
          "Test Your Knowledge: Height Setting",
          "Want to Refactor?"
        ],
        "2024: Noise": [
          "Noise Theory",
          "Implementing Simple Perlin Noise",
          "Brownian Motion",
          "A Quick Note about the GUITable Code",
          "Multiple Perlin Noise",
          "Test Your Knowledge: Ridge Noise"
        ],
        "2024: Voronoi Tessellation": [
          "What is Voronoi Tessellation",
          "Creating Mountain Peaks",
          "Modifying Mountain Slopes",
          "Multiple Random Peaks",
          "Adding a Choice of Function Types",
          "Test Your Knowledge: Voronoi & Perlin"
        ],
        "2024: Midpoint Displacement": [
          "Introduction to Midpoint Displacement",
          "The Diamond Step",
          "The Square Step Method",
          "Smoothing Part 1",
          "Smoothing Part 2"
        ],
        "2024: Texturing": [
          "Splatmaps",
          "Coding for Terrain Layers",
          "Specifying Texture Heights",
          "Overlapping with Noise",
          "Blending Texture Overlaps",
          "Controlling Tile Size",
          "Adding Normal Maps to Terrain Layers",
          "Running out of Room in the Inspector Editor?",
          "Texturing on a Steep Terrain",
          "Test Your Knowledge: Texturing"
        ],
        "2024: Vegetation": [
          "Working with Tree Prototypes Part 1",
          "Working with Tree Prototypes Part 2",
          "Working with Layers",
          "Setting Tree Heights",
          "Test Your Knowledge: Vegetation"
        ],
        "2024: Detail": [
          "Adding Details",
          "Setting Heights and Slopes for Detail Positions",
          "Terrain Detail Setting Specifics",
          "Working with Detail Properties"
        ],
        "2024: Natural Exposure": [
          "Adding Water",
          "Adding Water Via the Terrain Editor",
          "Erosion",
          "Rain",
          "Thermal",
          "Tidal",
          "River",
          "Wind",
          "Wind Direction",
          "Test Your Knowledge: Canyon Challenge"
        ],
        "2024: The Great Outdoors": [
          "Fog",
          "A Word About Clouds",
          "Making Your Own Clouds Part 1",
          "Making Your Own Clouds Part 2",
          "Cloud Management",
          "Cloud Painting",
          "Cloud Shadows",
          "Cloud Challenge",
          "Producing Rain Particles Part 1",
          "Producing Rain Particles Part 2",
          "Producing Rain Particles Part 3"
        ]
      },
      "requirements": [
        "You should be familiar with C# and the Unity Game Development Engine.",
        "You should have a healthy respect for mathematics.",
        "You should be fascinated by procedural generation and what it can accomplish."
      ],
      "description": "Updated for Unity in 2024\nThe creation of beautiful virtual terrains isn't just the domain of the artist, but also of the programmer. What if you could use your programming skills in C# to manipulate a mesh to create realistic landscapes, using algorithms developed by researchers studying landscape formation and erosion? Well now you can.\nIn this course, Penny introduces procedural terrain generation techniques using her internationally acclaimed holistic teaching style and expertise from over 25 years of teaching, research and work in games and computer graphics. Throughout the course you will follow along with hands-on workshops, designed to teach you the fundamental techniques used for generating realistic virtual landscapes.\nLearn how to program and work with:\nVoronoi Tessellation\nMidpoint Displacement\nPerlin Noise\nSplat Maps\nTrees and Vegetation\nClouds\nWeather\nErosion\nWater and new to 2024\nWorking with Multiple Terrain Objects\nDealing with URP and HDRP\nContents and Overview\nThe course begins by examining the nature of a landscape and the design considerations you should include in making decisions on structure, colour and vegetation. You'll learn what makes for a natural looking terrain, so you can replicate this in Unity.\nFollowing on, we will examine some of the most popular algorithms used in generating terrains (including many fractal and tessellation techniques) that can be used together, to form random and yet convincing mountainous vistas.\nOnce you are confident with landscape formation, we'll move onto texturing the terrain with a variety of images that can be placed via splatmaps onto differing heights and gradients. Then, continue to decorate the terrain with trees, rocks and grass placed with an algorithmic approach before investigating erosion methods, that will add that extra level of realism.\nThe course concludes with the development of a cloud generation system and an exploration of particle systems for adding rain, snow and other atmospheric effects to the finalised landscape.\nThroughout, we'll be developing our own custom Unity editor code that will allow you to build extra functionality and structure into the Unity Inspector, as well as create Editor Windows of your very own.\nWhat students are saying about Penny's courses:\nPenny is an excellent instructor and she does a great job of breaking down complex concepts into smaller, easy-to-understand topics.\nPenny's teaching style is exceptionally well-motivated and illustrated.\nThis course is awesome. The lecturer explains everything you need to know and encourages you to experiment and challenge yourself.",
      "target_audience": [
        "Anyone interested in learning the algorithms used in procedural generation.",
        "Those wanting to develop code to manipulate meshes, to produce realistic landscapes.",
        "Anyone keen to find out how to write custom Unity inspector editors."
      ]
    },
    {
      "title": "Unreal Engine 5 (UE5): Complete Lighting Guide for Beginners",
      "url": "https://www.udemy.com/course/ue5-lighting/",
      "bio": "Learn the fundamentals of lighting in Unreal Engine 5 and light your game environment from scratch",
      "objectives": [
        "Install and navigate Unreal Engine 5",
        "Game environment lighting from scratch",
        "Lighting Optimization for Games",
        "Start on Indie Game Development."
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Downloading Unreal Engine 5",
          "Downloading the Project"
        ],
        "Unreal Engine 5 Overview": [
          "The Toolbar",
          "The Details Panel",
          "The World Outliner",
          "The Content Browser",
          "Viewport & Navigation"
        ],
        "Initial Lighting Setup": [
          "Introduction to Lighting",
          "Importing the Sky",
          "Adding the Sky",
          "Adding the Directional Light",
          "Lighting Mobility",
          "Adding the Sky Light",
          "Adjusting the Exposure",
          "Adding the Lightmass Importance Volume",
          "Building the Lighting",
          "Setting up the Camera"
        ],
        "Lighting the Outdoor Environment": [
          "Adjusting the Sky",
          "Adjusting the Directional Light",
          "Adjusting the Sky Light",
          "Adjusting the Fog"
        ],
        "Lighting the Indoor Environment": [
          "Light Complexity",
          "Lightmap Density",
          "Stationary Light Overlap",
          "Candle Lighting",
          "Lantern Lighting",
          "Readjusting the Sky Light",
          "Portal Lighting",
          "Diamonds Lighting",
          "Candle Lighting Flicker"
        ],
        "Post Processing": [
          "Adjusting the Post Process Volume",
          "Finalizing the Environment",
          "Presentation",
          "What Now?"
        ]
      },
      "requirements": [
        "A computer capable of running Unreal Engine 5.",
        "Interested in making games using Unreal Engine 5."
      ],
      "description": "Learn Unreal Engine 5 Lighting by doing!\nIn this course, you will learn the fundamentals of lighting in Unreal Engine 5 and apply what you have learned to light up your game environment.\nMaster The Fundamentals\nWithin the first sections, you will learn how to install Unreal Engine 5 and set up the project. Through step-by-step videos, you will be comfortable navigating and get familiar with key concepts using Unreal Engine 5 before you jump into lighting.\nYou will use what you have learned and go hands-on with a complete lighting guide covering:\nUnreal Engine 5 Overview\nCamera Setup\nThe Light Types in Unreal Engine 5\nLighting Movability\nExposure\nLighting Properties\nPost Processing\nLighting Optimization\nBy the end of this course, you will have lighted a game environment from scratch. You will be able to apply the same lighting principles to your own levels and move on to more advanced lighting techniques.\nMy name is Moustafa, and I am the director and co-developer of Farmtale on Steam. With years of experience within game development and teaching, I will be here for you every step of the way.\nGame-optimized environment\nIt is not enough for your level to look good, but it also has to perform. You will learn how to use different game optimization tools to optimize your level to game-ready performance when lighting the environment. We will cover lightmap density, lighting complexity, static light overlap and more. We finish off with the cinematic camera system to add to the overall feel of your scene making it showcase ready for your portfolio.\nJoin our supportive community\nGame development can be frustrating from time to time. You might miss an unchecked box somewhere, which leaves you out in the woods for hours. Or you might need moral support and ideas from aspiring developers like you. We are here for you whenever you need it. Join our Discord community and social media listed in the profile description.\nI wish you the best,\nMoustafa Nafei",
      "target_audience": [
        "Complete beginners with no prior experience.",
        "Individuals who want to light environments for games",
        "Anyone who want to get into level design & lighting"
      ]
    },
    {
      "title": "Unreal Engine 4 Class: Blueprints",
      "url": "https://www.udemy.com/course/unreal-engine-4-blueprints/",
      "bio": "Learn Blueprints and create your own games (eng subtitles)",
      "objectives": [
        "Create games using Unreal Engine and Blueprints (Crie jogos com a Unreal Engine através das Blueprints)",
        "Setup a human-controlled Character (Configure um personagem controlável pelo jogador)",
        "Create logics using Blueprints (Crie lógicas usando Blueprints)",
        "Start on Indie Game Development (Iniciar no desenvolvimento de jogos indie)",
        "Learn Events, Function and Blueprint Communication (Aprenda Eventos, Funções e Comunicação entre Blueprints)"
      ],
      "course_content": {},
      "requirements": [
        "Windows knowledge (Conhecimento de Windows)",
        "Basic Unreal Engine Editor skills (Conhecimento básico sobre o Editor da Unreal Engine)"
      ],
      "description": "Este curso recebeu o Epic Mega Grants!\nEpic Mega Grants recipient!\nAudio: Portuguese-BR\nSubtitles: English and Portuguese-BR\nCheck Captions Roadmap lesson to learn more about the subtitles.\nAll companion material are available in Portuguese and English.\n\n\nENGLISH\nIn this course you will learn the Blueprints Fundamentals. This is the first step to start creating your own games and projects, and to begin to understand the Unreal Engine. There are more than 250 lessons, prepared in a didactic way.\nThe couse was recorded in Portuguese, but many English speaker students can follow with the English Captions.\n\n\nWhat are Blueprints? Blueprints are the visual system that frees the user from direct contact with programming language. C++ code are visually represented within the engine. This way you can create whole games and project without having to know the programming language used in the background.\nTherefore, this course goal is not to show you countless lessons so you can just copy. I will teach you the whys of every fundamental and you can apply all you learned in any kind of project as you wish. It is this fact that most students like about this course.\nStill in doubt? Access some classes available for free.\n\n\nContent Description\nIn this course we will see all Blueprints fundamentals so you can start creating your own games. Unreal Engine allows you to create interactive projects and games and using the same tools used by large AAA studios and indies developers around the world. If you want to start your career in game development with one of the best engines in the market, this is your course.\nWe will learn about variables, Events, Functions, Blueprint Communication , Materials, Timelines, Vectors, First and Third Person Characters, Interfaces, and then use all this knowledge to publish our first Project for Windows. This course is not a tutorial that will show you just how to create a game. The proposal is to teach you the fundamentals before you start making the first project. If you already have any knowledge, you can skip the initial classes and go straight to the practical classes.\nWhat do I need to know to start the course?\nYou need no previous experience with games to follow this course.\nBut you need to have some basic knowledge in Unreal. How to navigate and basic editor navigation.\n>> The couse was recorded in Portuguese, but many English speaker students can follow with the English Captions.\n\nPORTUGUES\nNeste curso voce vai aprender os fundamentos sobre Blueprints.\nEsse é o primeiro passo para comecar a criar seus proprios jogos e projetos, e para comecar a entender a Unreal Engine.",
      "target_audience": [
        "Indie Devs who want to learn Blueprints (Desenvolvedores de jogos indie que querem aprender sobre Blueprints)",
        "Professionals that want to create creative and interactive solutions (Profissionais que querem criar soluções criativas e interativas)",
        "Artists that want to create their own Projects and Games (Artistas que querem prototipar seus próprios projetos e jogos)",
        "Blueprint beginners (Iniciantes no universo das Blueprints.)"
      ]
    },
    {
      "title": "Unreal Engine 5 : Getting Started with Blueprints",
      "url": "https://www.udemy.com/course/ue4-getting-started-blueprints/",
      "bio": "Learn how to code with blueprints in Unreal Engine 5!",
      "objectives": [
        "How to navigate the Unreal Engine 5 Blueprint editor UI",
        "What variables are and how they are used in coding",
        "How and when to use functions, events and macros",
        "The different ways blueprints communicate",
        "How to navigate the widget designer UI",
        "Create and set up widgets for the players HUD",
        "How to create some commonly used gameplay systems",
        "How the animation blueprint works"
      ],
      "course_content": {
        "Introduction": [
          "Intro (Overview)",
          "Intro (Creating Blueprints)",
          "Intro (Event Flow)"
        ],
        "Variables": [
          "Variables (Overview)",
          "Variables (Boolean)",
          "Variables (Float)",
          "Variables (Name, Text & Strings)",
          "Variables (Vector, Rotator & Transforms)",
          "Variables (Actors & Objects)",
          "Variables (Arrays & Loops)"
        ],
        "Basics": [
          "Basics (Functions)",
          "Basics (Macros)",
          "Basics (Structs & Enums)",
          "Basics (Events)",
          "Basics (Blueprint Inheritance)",
          "Basics (Casting)",
          "Basics (Event Dispatchers)",
          "Basics (Interfaces)",
          "Basics (Components)",
          "Basics (Player Controllers)",
          "Basics (Gamemodes)",
          "Basics (Utility Nodes)",
          "Basics (Game Instance)"
        ],
        "Additional Lessons": [
          "Additional Lessons (Traces)",
          "Additional Lessons (Data Table)",
          "Additional Lessons (Overlap Nodes)",
          "Additional Lessons (Input Events)",
          "Additional Lessons (Enhanced Inputs)",
          "Additional Lessons (Tags)",
          "Additional Lessons (Spawning Actors)",
          "Additional Lessons (Code Organization)",
          "Additional Lessons (Blueprint Debug Tools)",
          "Additional Lessons (Timelines)",
          "Additional Lessons (Sockets)",
          "Additional Lessons (Movement Component)",
          "Additional Lessons (Audio Effects)",
          "Additional Lessons (Particle Effects)"
        ],
        "Widgets": [
          "Widgets (Overview)",
          "Widgets (Layouts)",
          "Widgets (Creating Widgets)",
          "Widgets (Binding)",
          "Widgets (Borders, Overlays & Grids)",
          "Widgets (Drag & Drop)"
        ],
        "Animation Blueprints": [
          "Animation Blueprints (Overview)",
          "Animation Blueprints (Montages)",
          "Animation Blueprints (Blend Nodes)",
          "Animation Blueprints (Notifies)",
          "Animation Blueprints (States)",
          "Animation Blueprints (Blend Spaces)",
          "Animation Blueprints (Aim Offsets)",
          "Animation Blueprints (Curves & Metadata)"
        ],
        "Gameplay Systems": [
          "Gameplay Systems (Interaction)",
          "Gameplay Systems (Damage)",
          "Gameplay Systems (Health Bar)",
          "Gameplay Systems (Respawn)",
          "Gameplay Systems (Crouching)"
        ]
      },
      "requirements": [
        "Unreal Engine 5",
        "Basic computer knowledge"
      ],
      "description": "Getting Started with Blueprints\nIn this course we will be starting with the basics like what blueprints are and how to navigate the blueprint editor in Unreal Engine 5, right though to creating game play systems and learning how to use many of the main features of blueprints as well as how to setup widgets and animation blueprints.\nThe goal of this course is to provide you with useful information and knowledge so that your able to plan and create your own gameplay systems in your future projects as well as read other peoples blueprints which can really help speed up the learning process. No previous programming knowledge required!\n\n\nWhat will you learn?\nWhat are blueprints\nHow to navigate the Unreal Engine 5 blueprint UI\nWhat variables are and how to use them\nHow to use variable's most commonly used nodes\nHow to use functions, macros and events to keep your project clean and efficient\nThe differences between blueprints types such as characters, game modes and actors\nBlueprint communication including casting, interfaces and event dispatchers\nHow arrays work and how to change them during gameplay\nHow to setup player inputs including the new Enhanced Inputs\nThe fundamentals of animation blueprints\nHow to create and setup widget UI on a players screens\nHow to change widget layouts and bind them to variables and functions\nHow to make a health, interaction, respawn and damage gameplay systems\nSpawning actors, particles and sound effects including the new MetaSounds\nCode organization",
      "target_audience": [
        "Beginners to coding in blueprints",
        "People who want to code without text based languages",
        "Beginners to Unreal Engine 5"
      ]
    },
    {
      "title": "Unity Multiplayer Game development with Photon PUN 2",
      "url": "https://www.udemy.com/course/unity-multiplayer-game-development-using-photon-2-2019/",
      "bio": "Create A fully Functional Multiplayer 2D Platformer Game",
      "objectives": [
        "Multiplayer Game Development Using Photon 2 (PUN)",
        "Multiplayer Concepts and Practices",
        "Creating Complete Multiplayer Platformer Game",
        "Syncing Player Movement and rotation",
        "Creating player Teams",
        "Mobile Controls : To play Game on Mobile Devices",
        "Using Raise events and RPC's",
        "Using Photon player custom properties",
        "Syncing player Animations on Network",
        "Player Death and revive system with Health system",
        "Real-Time Chat system",
        "Player Feeds system on Network"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Overview Of Project"
        ],
        "Setup and Getting Starting": [
          "Photon Intro",
          "Creating Free Account On Photon",
          "Inporting and setting SDK in Unity"
        ],
        "Creating Multiplayer Game Lobby": [
          "User Interface for Lobby",
          "Lobby Programming part 1",
          "Lobby Programming part 2"
        ],
        "Development of Multiplayer Platformer Game": [
          "Setting Up Scene Graphics",
          "Game Manager",
          "Prefab Problem in Unity 2018.3",
          "Player Script",
          "Player Movement Sync Across Network",
          "Player Animations",
          "Player Animations Part 2",
          "Firing Bulletes",
          "Player Name And Animation Sync",
          "Health UI and PingRate",
          "Player Health Programming",
          "Player Death And Revive",
          "Revive and Re-Spawn system [part 1]",
          "Revive and Re-Spawn system [part 2]",
          "Fixing Health And spawn Position",
          "Leaving The Room",
          "Smooth Camera Movement",
          "Chat System",
          "player Jump and Networking",
          "Timeout Functionality [ part 1 ]",
          "Timeout Functionality [ part 2 ]",
          "Introduction To Raise Events",
          "Player Feeds on Network",
          "Player killed Got Killed Feed [part-1]",
          "Player killed Got Killed Feed [part-2]",
          "Disconnect Manager",
          "Fixing Camera Movement",
          "Camera Boundary",
          "Displaying Online Users [ Part 1]",
          "Displaying Online Users [ Part 2]",
          "Displaying Online Users [ Part 3]",
          "Room Listing",
          "Joining Room From List"
        ],
        "Adding Mobile Controls": [
          "Adding Mobile Controls - Set Up Buttons",
          "Mobile Inputs - Left Right Movement [02]",
          "Mobile Inputs - Fire and Jump [03]"
        ],
        "Bonus Lectures": [
          "Testing Project In Unity 2019.1.0",
          "Creating Teams with Custom Properties",
          "Win and Lose Screen",
          "Complete Project from start to Now"
        ]
      },
      "requirements": [
        "Basic Understanding of Unity3D"
      ],
      "description": "Learn how to create video games using Unity, the world-leading free-to-use game development tool. We start super simple, so you need no prior experience with Multiplayer Coding and Concepts. This course will guide you step by step, making complex ideas easy to understand.\nThis course is designed for beginners who have a basic understanding of Unity and are eager to learn Multiplayer GAME Development using Photon 2 (PUN 2).\nIn this course, we will start learning by creating a fully functional Multiplayer 2D Platformer Game where up to eight users can play with each other in a single room. We can create as many rooms as we want, allowing for unlimited gameplay. Additionally, we will add Mobile Controls, so the game can be played seamlessly on any mobile device.\nThe game will have the following functionalities:\nCreating Lobby and Rooms\nCreating Teams\nPlayer Movement Sync\nJumping and Rotation Sync\nFiring Bullets and Syncing\nDeath and Respawn on Network\nPhoton Features like Transform Sync and Rigidbody Sync\nRPC Remote Procedure Calls\nRaise Events on Network\nPlayer Feeds on Network\nDisplaying Online Users\nChatting System\nAnimation Syncing Over the Network\nPlayer Health System\nMobile Controls (Android and iOS)\nOptimizing Performance for Smooth Multiplayer Experience\n\n\nAnd much more...",
      "target_audience": [
        "Beginners Unity Game developers",
        "Who want to create Multiplayer Cross platform Games",
        "Who want to learn Photon 2 latest version to create Real-time Multiplayer Games"
      ]
    },
    {
      "title": "Make a 2D Action Platformer in Unreal Engine 5",
      "url": "https://www.udemy.com/course/ue-2d-action-platformer/",
      "bio": "Learn how to make a 2D Action Platformer similar to Mega Man with Paper 2D in Unreal Engine 5!",
      "objectives": [
        "How to make an Action Platformer similar to the Mega Man Series",
        "Unreal Engine Blueprints, starting from the basics up to advanced usage",
        "Character abilities such as Wall Jumping, Sliding and more",
        "Different types of 2D projectiles and shooting",
        "Create 4 different types of Enemies and their AI",
        "How to create 2D levels with tile sets and tile maps",
        "Best Practices for 2D and 2D/3D hybrid games in Unreal Engine",
        "How to make a dynamic camera system"
      ],
      "course_content": {
        "Course Orientation": [
          "Curriculum Overview",
          "Why make 2D Games with Unreal Engine?",
          "What Version of Unreal Engine to use (UE5.3)",
          "How to ask for help",
          "Backing Up Your Projects"
        ],
        "Unreal Engine 5 Crash Course": [
          "About the Unreal Engine 5 Crash Course",
          "How to Install Unreal Engine 5",
          "How to create a new Project",
          "How to navigate the Editor",
          "Content Drawer and Blueprints",
          "How to make a simple Blueprint",
          "Adding functionality to our Blueprint",
          "Useful Keyboard Shortcuts and Tips",
          "How to debug your games"
        ],
        "Paper 2D Basics": [
          "What are Paper 2D and PaperZD?"
        ],
        "Basics and Character Movement": [
          "Action Platformer Overview",
          "Asset Download",
          "PaperZD download changes",
          "Project Creation and Settings",
          "Preparing all of our Sprites",
          "Inheritance and making the Character Blueprint",
          "Possessing the Player and Camera Setup",
          "Setting Up Inputs and Movement",
          "Setting Up Animations with PaperZD",
          "Improving Character Movement",
          "Making the Iconic Mega Man Jump"
        ],
        "Making the Player Projectile": [
          "Creating Projectiles",
          "Creating Flipbook VFX",
          "Enabling the Player to Shoot",
          "Limiting the Amount of Shots"
        ],
        "Health and Damage System": [
          "Creating the Enemy Base",
          "Health and Damage System",
          "Damage Flash Material",
          "Damaging the Player",
          "Player Knockback and Stun"
        ],
        "Advanced Player Abilities": [
          "Making the Charged Shot",
          "Organizing Variables",
          "Charge Material Flashing",
          "Cube Grid and Greyboxing",
          "Wall Slide System",
          "Wall Slide Animation and Wall Jump",
          "Building the RootMotion Plugin on Mac and Linux",
          "Implementing the Ground Slide",
          "Improving the Slide"
        ],
        "Checkpoints and Respawn": [
          "Respawning the Player",
          "Checkpoint System",
          "Fall Detection"
        ],
        "Enemies and AI": [
          "Making the First Enemy AI",
          "Shooting Enemy AI",
          "Projectile Knockback",
          "Making a Flying Enemy",
          "Making the Chaser Enemy"
        ],
        "User Interface": [
          "UI Introduction",
          "Designing the Health UI",
          "Making the Health UI Functional"
        ]
      },
      "requirements": [
        "No prior programming or Unreal Engine experience needed! You'll learn everything you need to know."
      ],
      "description": "Welcome to the Make a 2D Action Platformer in Unreal Engine 5 Course.\n\nThis course will teach you everything you need to know about Unreal Engine and Blueprint Visual Scripting to become able to make your own games!\n\nThrough teaching Unreal Engine on YouTube and also in person at a Japanese Game Dev school for the past couple of years I've gained an understanding of what students are really looking for and designed this course to teach you the process of making games with Unreal Engine.\n\nBy making a 2D Action Platformer like Mega Man you'll first learn how to import 2D Sprite Sheets and how to use them to create a character that feels fun to control!\nWe'll use the Enhanced Input System to bind actions such as moving, jumping and shooting to the keyboard and then update the character animations accordingly by using the PaperZD Animation Graph.\n\nAfter that we'll implement the projectiles and shooting system for the player and also create a health and damage system that will be shared between the player and enemies and is created in a modular fashion.\nWe'll also add more and more abilities to the player such as a charge shot, Wall Jump and Ground Slide.\nNot only will you learn how to implement these abilities using best practices, but you'll also learn the way of thinking and problem solving that is necessary to create similar abilities for your own games!\n\nWe'll also create 4 different enemy types that all have different AI behavior.\nWe'll handle things such as turning around when walking into a wall or before falling off a ledge, detecting if the player is close and chasing them and much more.\n\nLastly we'll look at how to build 2D stages using Tile Sets and Tile Maps and then put everything together we've learned so far to create a complete action platformer level!",
      "target_audience": [
        "Beginner and Intermediate Unreal Engine developers",
        "Game Designers that want to make Action Platformers"
      ]
    },
    {
      "title": "Building a Crafting Game, with GameMaker",
      "url": "https://www.udemy.com/course/crafting/",
      "bio": "Learn the ins and outs of GameMaker while developing your own resource gathering game!",
      "objectives": [
        "Create your own 2D games",
        "Learn how to code",
        "Add juicy animations to your game",
        "Use data structures for your inventory systems",
        "Build a Crafting system with GML",
        "Make user interfaces with object hierarchies"
      ],
      "course_content": {
        "Introduction to GameMaker": [
          "Course Promo",
          "GameMaker's Interface",
          "What are Events?",
          "GameMaker Language: Functions",
          "Functions Quiz!",
          "GameMaker Language: Variables",
          "Variables Quiz!",
          "More about Variables",
          "GameMaker Language: Conditions",
          "Conditions Quiz!"
        ],
        "Game Basics": [
          "Introduction (Resources)",
          "Player Input & Movement",
          "Resource Name Prefixes",
          "Adding a Camera",
          "Sprites & Animation",
          "Update: Script Changes in GMS 2.3+",
          "Collisions",
          "Depth Ordering",
          "Facing the Mouse",
          "How to build an executable"
        ],
        "Foraging Resources": [
          "Breakable Objects",
          "Creating the Pickaxe",
          "What is Lerp?",
          "Using the Pickaxe",
          "Selector GUI",
          "Breakable Healthbar",
          "What are Arrays?",
          "Creating Resources",
          "Item Drop Animation",
          "Adding More Resources"
        ],
        "Inventory Systems": [
          "What are For Loops?",
          "Stackable Inventory",
          "Pausing",
          "Inventory Limiting",
          "Inventory Interface - Part 1",
          "Inventory Interface - Part 2"
        ],
        "Crafting Systems": [
          "Crafting UI",
          "Title Buttons",
          "Scrolling",
          "Item Display",
          "Recipes",
          "Crafting!",
          "Dropping Items: Manual Dropping",
          "Dropping Items: Automatic Removal"
        ],
        "Game Essentials": [
          "Hearts (and Half Hearts)",
          "Enemies - Part 1 (Objects)",
          "Enemies - Part 2 (AI)",
          "Attacking The Enemies",
          "Getting Attacked",
          "Using Items"
        ],
        "More Craftiness!": [
          "Placing Blocks: Pt. 1",
          "Placing Blocks: Pt. 2",
          "Placing Mode: Updates",
          "Placeable Collisions"
        ],
        "Juice!": [
          "Juice: Scaling Animations",
          "Flashing Colors (with Shaders)",
          "Juice: Player & Enemies"
        ],
        "Chest - Storing Items": [
          "Adding a Chest",
          "Chest Interface - Part 1",
          "Chest Interface - Part 2",
          "Moving Items",
          "Finishing Touches"
        ],
        "Extras": [
          "Extras: Item Stack Sizes"
        ]
      },
      "requirements": [
        "A Windows or Mac computer",
        "Free or paid version of GameMaker installed"
      ],
      "description": "Hi there!\nThis course is all about developing a crafting game, in GameMaker. We'll learn to code with GameMaker Language and develop our game from the ground up!\n\n\nAbout the Instructor\nHi, I'm Gurpreet S. Matharoo! I've been teaching game development for years, and making games for longer. I've taught over 5 courses on Udemy, published numerous tutorial posts on my blog, and regularly create free tutorials on my YouTube channel, GameMakerStation. I also work at YoYo Games as the Technical Writer for GameMaker.\n\n\nAbout the Course\nWhether you're a beginner with no coding background, or a game developer looking to gain more experience; this course will help you get where you need to be. We're gonna go through many practical lessons, learning something new at each step!\nHere are some things we'll be learning in this course:\nGameMaker Language basics\nPlayer movement with pickaxe\nResolution handling\nBreaking objects with pickaxe\nSetting up data with arrays and enums\nStacking inventory using data structures\nUser interfaces\nCrafting systems\nand more!\nThis course is based on v2.2 of GameMaker Studio, but includes updated lectures communicating the structural changes introduced in v2.3.\n\n\nSupport\nYou'll be given a download to the finished project, along with all the resource files used. You can simply use the given images to build the game, so that you don't have to create your own sprites.\nI'm looking forward to you joining the course. Let's start our journey!",
      "target_audience": [
        "Anyone looking to get into game development for the first time",
        "Beginners in game development or GameMaker",
        "Developers somewhat experienced in GM but looking for more learning opportunities"
      ]
    },
    {
      "title": "Godot Genesis: Learning Through 6 classic Game Genres",
      "url": "https://www.udemy.com/course/godot-genesis-learning-through-6-classic-game-genres/",
      "bio": "Gain Hands on practice through 11 completely different Projects Using Godot 4.x. Each project taylored to YOUR needs.",
      "objectives": [
        "Master Game Development: Learn core principles and processes with a 3-step approach.",
        "Skill in Multiple Genres: Gain expertise in 6 game genres through hands-on practice.",
        "Complete 2D and 3D Projects: Finish 11 projects for practical experience in game creation.",
        "Overcome Development Challenges: Learn solutions to common game design obstacles.",
        "Independently Create Games: Gain the skills to design any game in any genre with Godot 4.",
        "Proficiency in Godot 4: Master using Godot 4 for both 2D and 3D game development."
      ],
      "course_content": {
        "Course Overview & Introduction": [
          "Course Structure",
          "Asset Links",
          "IMPORTANT - Understanding Game Development"
        ],
        "1. Platformers": [
          "Platformer Section Overview",
          "Programming Lesson 1: Variables & If Statements",
          "Programming Lesson 2: Functions",
          "Programming Lesson 3: Loops",
          "Lecture 1 - Positions",
          "Lecture 2 - Moving Positions",
          "Lecture 2.1 - Velocity",
          "lecture 3 - Jumping & Gravity",
          "Platformer Example Project 1",
          "Assignment 1 - Infinite Platformer",
          "Platformer Logic Quiz",
          "A1 Solution - Obstacles",
          "A1 Solution - player + bg"
        ],
        "2. 2D RPG's Section": [
          "Top-Down Movement in 2D Spaces (1. 2D Spaces in RPG's)",
          "Top-Down Movement in 2D Spaces (2. Input In Godot)",
          "Top-Down Movement in 2D Spaces (3. Documentation)",
          "Animation (1. AnimationPlayer Setup with AnimatedSprite2D + Sprite2D)",
          "Animation (2. AnimationTree)",
          "Animation (3. AnimationTree + AnimationPlayer Code)",
          "AI Logic (1. AI Logic Overview)",
          "AI Logic (2. Utilizing Area2D For AI Behavior)",
          "State Machines (1. Finite StateMachines Explained)",
          "State Machines (2. StateMachines in Godot - Example)",
          "Other Relevant Topics (Auto Tilemap)",
          "Other Relevant Topics (CanvasLayer + Panel)",
          "Other Relevant Topics (Global Scripts)",
          "Other Relevant Topics (Tweening)",
          "Assignment 2 - 2D RPG Game",
          "1. 8 Dir Movement + Animation Setup - SOLUTION",
          "2. Attacking With Animation - SOLUTION",
          "3. AI Slime Solution - SOLUTION",
          "RPG Quiz"
        ],
        "2. 3D RPG Section": [
          "3D Spaces Explained",
          "2. 3D Environment",
          "3. 3D animation",
          "4. Area3D for AI Logic",
          "5. MeshInstance + GridMap",
          "6. camera Rotation",
          "Assignment 3 - 3D RPG Game",
          "3D RPG Quiz"
        ],
        "3. 2D Shooter Game Section": [
          "Light2D + Shadow Occlusion",
          "Particles Effects",
          "Camera/Screen Shake",
          "Moving Camera Offset With Mouse on Corners",
          "Programming Lesson 4: Arrays",
          "Programming Lesson 5: Dictionaries",
          "Programming Lesson 6: Object-Oriented Programming (OOP)",
          "Programming Lesson 7: Resources",
          "Game design(immersiveness) - Sound & Audio",
          "Game design(immersiveness) - Glow & Shaders",
          "Game design(immersiveness) - Dynamic and Responsive Environments",
          "Game design(immersiveness) - Compelling StoryTelling",
          "Navigation/Pathfinding",
          "Assignment 4: Top-Down 2D Shooter Game Development",
          "1.1-1.2 Player Movement + Shooting Mechanism - SOLUTION",
          "1.4 Camera - SOLUTION",
          "1.5 Guns & Ammo - SOLUTION",
          "2.1 Interface - SOLUTION",
          "3.1-3.2 Enemy AI- SOLUTION",
          "4.1-4.2 Game Environment- SOLUTION",
          "2D Shooter Quiz"
        ],
        "3. 3D FPS Game Section": [
          "Light2D + Shadow Occlusion",
          "Particle3D (Flash Effect)",
          "Camera3D",
          "Maximo & Resources",
          "Assignment 5: 3D FPS Game Development",
          "1.1 + 1.2 - SOLUTION",
          "1.3 + 1.4 - SOLUTION",
          "2.1 + 2.2 - SOLUTION",
          "3. Game Environment",
          "3D Shooter Quiz"
        ],
        "4. 2D Tower Defense Games": [
          "Path2D",
          "Drag And Drop Control Nodes",
          "Containers And Mouse Filter",
          "Tilemap Collision + Layers + Tiles",
          "Assignment 6: 2DTower Defense Game",
          "1.1 + 2.1 Tower Placement & GUI - SOLUTION",
          "1.1 Tower Upgrades- SOLUTION",
          "1.2 + 1.3 - SOLUTION",
          "2.2 - SOLUTION",
          "2D Tower Defense Quiz"
        ],
        "4. 3D Tower Defense Games": [
          "2D Objects in 3D Space",
          "Drag & Drop In 3D",
          "Assignment 7: 3D Tower Defense Game",
          "3D Tower Defense Quiz"
        ],
        "5. 2D Turn-Based Game": [
          "Pokemon Movement",
          "Files => Saving & Loading",
          "Camera2D Properties",
          "Classes + Custom Objects",
          "Turn-Based Logic",
          "Assignment 8: 2D Turn-Based Game",
          "2D Turn-Based Quiz"
        ],
        "5. 3D Turn-Based Game": [
          "Assignment 9: 3D Turn-Based Game"
        ]
      },
      "requirements": [
        "This course will start for complete Intermediate 's Thus a bit of experience in Godot and coding will help",
        "You Will need a decent Laptop or PC to run Godot. You can find their requirements on the Godot Website"
      ],
      "description": "Learning to create your own games can be very difficult and daunting. Most Courses & Teachers will simply take you through the process of THEM creating THEIR own game. But as you might know and as I know… This doesn’t help me much… So, I’ve developed a way for you to create your own game and implemented it into this course! The basic idea is that will we learn through a 3-step process, 1. Learning the Concept, 2. Examples, 3. Exercises.\nThis process allows YOU as the learner to completely understand and digest what we’re actually doing and apply it yourself at a later time. Thus, we will go through this 3-Step process throughout the entire course to learn in a more effective way. To add onto that, we will also be going through 6 DIFFERENT genres!\nPlatformers\nRPG’s\nShooters\nTower Defense Games\nTurn-Based Games\nRTS’s\nWe will be completing 11 different projects/assignments together! 2 assignments from each Section/Genre. One In 2D and one in 3DProviding you with possible solutions to each project!\nBy the end of this long course, if followed properly, you have my guarantee that you will be able to create ANY course of your own in ANY genre within Godot 4!",
      "target_audience": [
        "Suitable for Intermediate to Advanced Aspiring Game Developers"
      ]
    },
    {
      "title": "JavaScript HTML Game from Scratch Blackjack",
      "url": "https://www.udemy.com/course/javascript-game/",
      "bio": "Learn how to create a web application from scratch. Apply JavaScript to HTML and CSS to build a Blackjack application",
      "objectives": [
        "Use JavaScript with HTML and CSS together",
        "Create a Blackjack game from scratch",
        "Apply logic and build a web based game using HTML, CSS and JavaScript"
      ],
      "course_content": {
        "Introduction to building a web based game": [
          "JavaScript game introduction",
          "Course Resources",
          "JavaScript Creating Random Numbers",
          "Creating a deck of Cards JavaScript",
          "Source Code loops and random",
          "Output special Characters JavaScript HTML CSS",
          "Adding Color to Characters ternary operator JavaScript",
          "Source Code",
          "How to generate a random card value using JavaScript",
          "Source Code for random card values"
        ],
        "Creating the game": [
          "Creating a game Start JavaScript",
          "Shuffle Array values random order JavaScript",
          "Deal the cards setup player and dealer JavaScript Loop",
          "Output Dealer and Players Hand of cards JavaScript",
          "Source Code deal out cards",
          "Template for a Card CSS",
          "Using CSS to create a playing card",
          "Output Styled Cards into Gameplay JavaScript CSS",
          "Source Code output styled cards",
          "CSS JavaScript Cover Dealer Card",
          "Adding gameplay elements HTML",
          "Applying Styling CSS to buttons and updating game elements",
          "Hide buttons start game JavaScript",
          "Source Code",
          "Create next options for player JavaScript",
          "Player actions JavaScript",
          "Create player values and interactions JavaScript",
          "Dealer Logic JavaScript play the game",
          "Blackjack values and calculations JavaScript",
          "Determine who won adjust values JavaScript",
          "Working prototype source code"
        ],
        "Code Tweaks and fine tuning JavaScript HTML CSS": [
          "Gameplay adjustments and tweaks JavaScript",
          "User styling and dashboard design CSS HTML",
          "Setting click event JavaScript",
          "Limit min max for input field values JavaScript onchange event",
          "Fix button tweak double JavaScript",
          "Testing and tweaks to debug application JavaScript",
          "Final test run through of gameplay"
        ],
        "Source Code review and exploration": [
          "Game instructions and game play outline",
          "Clean up source code final tweaks JavaScript",
          "HTML source Code index.html",
          "CSS review code",
          "CSS Source Code style.css",
          "JavaScript code review part 1",
          "JavaScript Code review part 2",
          "JavaScript Source Code"
        ],
        "Bonus Section": [
          "Bonus Lecture",
          "JavaScript Callback Example",
          "JavaScript Serialization and deserialization coding example",
          "JavaScript Serialization and deserialization source code example",
          "JS counting vowels",
          "Pure JavaScript Fade",
          "JavaScript Image Gallery",
          "Additional Course Resources: Access to Downloads, Applied Examples"
        ]
      },
      "requirements": [
        "Basic HTML",
        "Basic CSS",
        "Basic JavaScript"
      ],
      "description": "Learn how to build a playable Blackjack web based application from scratch!\nUsing HTML, CSS and JavaScript this course will show you how to create a game from scratch.  One of the best ways to learn how to use JavaScript is to apply it to projects.  This course show you the steps and process from a blank file to building out the entire game.\nThis course is designed for beginners with some basic JavaScript, HTML and CSS experience required.  We will be reviewing only the JavaScript functionality required to build the game and demonstrating how to apply the code. This course does not cover HTML, CSS and JavaScript in their entirety but covers the use of them in relation to building a game.\nStart with the basics of what is needed, apply logic and build out a working web application.  Test your application, tweak fine tune and get it working as designed.\nStart off building a deck of cards in JavaScript\nLearn how to generate values of cards to use within your application.\nPrepare to build the game.  Define the game rules and what you need in order to get that functionality.\nLearn how to build a playing card visually with CSS\nCreate the game play using JavaScript applying logic\nAdd player actions and decision points\ncreate the logic for the dealer\nPut it all together to play Blackjack\nSource Code is included, step by step instruction to demonstration how to build an application.\nTaught by an instructor with over 18 years of web development experience.\nI'm here to help you learn how to write JavaScript and ready to answer any questions you may have.\nThis course showcases how to build a fun interactive application.  When you are ready",
      "target_audience": [
        "Web developers",
        "Web application developers",
        "Anyone who wants to learn how to apply JavaScript",
        "Anyone who wants to Build a web based game from scratch"
      ]
    },
    {
      "title": "Create a 3D Endless Runner from Scratch - Unity 6 Compatible",
      "url": "https://www.udemy.com/course/endlessrunner/",
      "bio": "Learn how to make an infinite scrolling platform game in Unity with C# working through all stages of game development.",
      "objectives": [
        "How to use the Unity Mecanim system to create and trigger animation states on a character.",
        "How to design a graphical user interface with a main menu, pop-up windows and programmable buttons and sliders.",
        "How to program an infinite scrolling 3D platform world.",
        "How to implement background music and sound effects.",
        "How to create and spawn particle systems for magic spells, explosions and special effects.",
        "How to program a lives count and scoring system that saves the state.",
        "How to build an entire casual game from scratch."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Join the H3D Student Community",
          "Contacting H3D",
          "FAQs",
          "Updating to Unity 6"
        ],
        "Animating the Player": [
          "Animating the Player Character",
          "Casting a Spell",
          "Quiz 1"
        ],
        "Creating an Endless Environment": [
          "Platform Model Setup",
          "Turning Corners",
          "Creating a Platform Pool Part 1",
          "Creating a Platform Pool Part 2"
        ],
        "Adding the Perpetual Runner": [
          "Scrolling the Environment",
          "Scrolling in the Y",
          "Spawning Platforms on the Move",
          "The Bounce Dilemma",
          "Adding a T-Intersection"
        ],
        "Adding Obstacles": [
          "Fire Obstacles",
          "Adding Random Fires to Platforms",
          "Building a Wall",
          "Generating Magic",
          "Walled Platforms"
        ],
        "Adding a Graphical User Interface": [
          "The Graphical User Interface",
          "The Main Menu Part 1",
          "The Main Menu Part 2",
          "The Main Menu Part 3",
          "Creating Menu Popups",
          "Finishing Popups"
        ],
        "Lives and Scoring": [
          "Animating Coins",
          "Picking Up Coins",
          "Coin Resetting",
          "Programming Lives Count",
          "Displaying Lives",
          "Statistics"
        ],
        "Final Touches": [
          "Fog",
          "Explosions",
          "Exploding the Wall",
          "Adding Music",
          "Saving Sound Settings",
          "Sound Effects",
          "Syncing Sounds with Animation",
          "Animated Pickups",
          "Final Touches"
        ],
        "Final Words": [
          "Some Final Words from Penny",
          "Where to Now?"
        ]
      },
      "requirements": [
        "A good understanding of C#.",
        "A basic understanding of the Unity Game Engine."
      ],
      "description": "Who doesn’t love a good endless runner? Did you know it’s the genre that reigns from the early platform games of Donkey Kong and Mario Brothers? From Canabalt to Temple Run to Subway Surfer, this casual game has been the pastime of many a gamer with a mobile device and a few moments to while away. But did you know there’s quite a bit of work that goes into such a game? Of course the scenery is repetitive, but did you know that it has to be constructed with pieces of the environment that can always fit together and be procedurally placed?\nIn this course, Penny will take you through all the stages of game development with C# and the Unity Game Engine using her internationally acclaimed Holistic teaching style and expertise from over 25 years teaching, researching and writing about games. Throughout the course you will follow along with hands-on workshops designed to teach you these core programming concepts that will take your games to the next level.  All assets including models, animations, textures and sounds are supplied.\nThe objective of this course is to teach you all you need to know to make your own game!\nLearn how to program and work with:\nCharacter and World Models\nCharacter Animations\nProcedural Infinite World Generation\nGraphical User Interfaces\nPick-ups\nParticle Systems\nBackground Music\nSound Effects\nContent and Overview\nThe course begins with setting up the character and applying animations in the Unity mecanim system, before writing code to control them.  It continues step-by-step, going through the development of an infinite scrolling 3D world, including the use of the pooling and singleton design patterns. In these sections, obstacles such as fire and walls are added which the character is programmed to jump over and destroy. Thereafter, a graphical user interface (GUI) is put together in Unity's canvas system, where you will learn about alignment, fonts and screen resolutions as well as how to program button presses, sliders and create pop-up windows.  Next, particle systems are investigated as a means of providing some special effects and several are constructed from scratch for magical spells and explosions.  Finally, background music and sound effects are covered, as is controlling the sound of each from the GUI.\nWhat students are saying about Penny's courses:\nShe is the best teacher ever in this platform.\nMost instructors are very smart people. Some are good at teaching and some are not. Penny is great at describing complex concepts without going down a dark cerebral rabbit hole that so many instructors feel obligated to do. It's like they need to demonstrate their knowledge by explaining every tiny aspect. Penny does not go there. She explains things clearly but does not overwhelm the student with more than they need to know. There is only so much most people can absorb in one sitting. You need to study, then you need to practice and then more study. I have taken most of her classes and I recommend them all.",
      "target_audience": [
        "Beginner Unity students.",
        "Intermediate users of Unity interested in working through an entire game project.",
        "Game development students of all ages."
      ]
    }
  ]
}