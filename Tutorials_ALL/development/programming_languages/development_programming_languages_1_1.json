{
  "courses": [
    {
      "title": "Python For Everybody : Python Programming MADE EASY",
      "url": "https://www.udemy.com/course/python-programming-tutorial-a-z/",
      "bio": "Python Programming for Beginners. Learn Python for Data Science. Learn Web Development Python / Machine Learning Python.",
      "objectives": [
        "ESSENTIAL concepts of Python programming",
        "Be INSPIRED to continue learning and loving the Python language",
        "That Python is the best beginner programming language",
        "Learn Python programming language syntax",
        "How to install Python on Mac and Windows",
        "How to print Hello World in Python",
        "Python variables",
        "Python data types",
        "Python string manipulation",
        "Python string operations",
        "Python functions",
        "Python loops",
        "Python operators",
        "Python conditionals",
        "Python data structures",
        "Python is the most popular programming language",
        "Python global variables",
        "Python modules",
        "Python exception handling",
        "Python logical and physical lines",
        "Python file operations",
        "Python virtual environments",
        "Python pandas",
        "Pythonic code",
        "Python Object-Oriented Programming",
        "Python special variables like __name__",
        "Python matplotlib"
      ],
      "course_content": {},
      "requirements": [
        "There are NO prerequisites for this course",
        "ANYONE can learn Python - Python for Everybody"
      ],
      "description": "Yes, Python developers are in high demand.\nAs of 2025, according to a number of analyses and surveys (including the TIOBE index), Python has indeed overtaken JavaScript as the number 1 MOST POPULAR programming language - and by a wide margin.\nPython software engineers are also among the highest-paid software developers today, earning an average income of $150,000 a year.\nThe Python language is easy to learn, yet POWERFUL.\nYouTube, Dropbox, Google, Instagram, Spotify, Reddit, Netflix, Pinterest - they are all developed using Python.\nAnd most recently, ChatGPT is also written in Python.\nLearning Python opens up the possibilities of a whole new career in Machine Learning and Data Science.\nThe course is presented in an easy-to-follow format with animation and graphics.\nI put in my very best to make it as easy to understand as possible for everybody.\nThere will be no quizzes, no assignments, no exercises. These are too academic. The focus of this course is to reinforce the concepts through interesting video presentations.\nThis is a hands-on course that provides the student with step-by-step guidance in coding Python programs, explaining the syntax and concepts behind every piece of code that is shown.\nVariables, Data Structures, Algorithms, Control Structures, Functions, Language Syntax, and more, are all taught in this course.\nFor the benefit of those who are new to programming, there is a video on what programming is all about.\nA different approach from the usual instructor typing code teaching method has been adopted - the computer types the codes instead.\nFree preview of some of the videos are available - without you having to pay a cent.\nThis will allow potential course buyers to make a well-informed decision before paying for it.\nThere are no prerequisites for this course.\nThis is a foundation course in Python that does not assume any knowledge of programming.\nAlso, remember to keep your expectations that this is supposed to be a beginners' course and does not go into intermediate or advanced Python.\nAs an instructor for a course that is for everybody who wants to learn programming in Python (“Python for Everybody”), it is imperative to cater to those who are new and have little to no knowledge of this subject.\nRecap learning helps those who are completely new (this is a beginners’ course) and it has motivated me to create “in a nutshell” videos that are presented in a different format simply using slides only.\nThe effort to create just a short recap video is a challenging task for me - and for the slower learners, my extra effort is towards helping this group.\nFast learners and those who already have a programming background can always skip the \"in a nutshell\" videos - they are carved out as separate videos so that it is easy for you to do so.\nThis course does not claim to teach everything, just as no other courses can ever teach you everything you need to know about Python.\nThe main purpose of this course is to ensure students master the essential concepts of the Python language so that they will begin to LOVE the language.\nPython variables, Python data types, Python string operations, Python data structures, Python operators, Python conditionals, Python loops, Python functions, Python modules, Python exception handling, Python file operations, Python virtual environments, Python pandas, Python OOP, Pythonic code, Python matplotlib - these topics are all covered in this course.\nMany of these topics have Part 2 in the workings.\nThis course wants you to be inspired to learn Python.\nCome on and join me in my Python For Everybody lessons.\nSo let's get started.\nCheers, and Happy Learning The Python Language.\nOne other thing :\nThere is no best instructor.\nYou should learn from other instructors as well.\nEvery instructor is different - So Am I.\nBut every instructor shares something in COMMON -\nAS WE TEACH, WE LEARN EVEN MORE !\nAfter taking the course - leave a rating.\nAnd be honest and write truthfully whether it is a good or bad course.\nIf this course is bad, tell me truthfully so that I can further improve on it - that's when I become your student !\nIf this course is good, let others know so that they too can benefit from learning.\nEveryone is still learning - instructors are NO exceptions.\nPython Is For Everybody.",
      "target_audience": [
        "Anyone who wants to LEARN Python programming",
        "Anyone who needs a REFRESHER course in Python",
        "Anyone who wants to learn the most POPULAR programming language",
        "Anyone who wants to learn the BEST programming language for BEGINNERS",
        "Anyone who is needs to program for DATA ANALYTICS and MACHINE LEARNING"
      ]
    },
    {
      "title": "Learn Go for Beginners Crash Course (Golang)",
      "url": "https://www.udemy.com/course/go-programming-language-crash-course/",
      "bio": "Master the Go Programming Language Step by Step - No previous programming experience required.",
      "objectives": [
        "Learn the core Go skills needed to apply for GO developer positions in just 10 hours.",
        "Have a fundamental understanding of the Go programming language.",
        "Understand how to create your own Go programs.",
        "Have the skills and understanding of Go to confidently apply for Google Golang programming jobs.",
        "Be able to demonstrate industry best practices in the Go programming language code you write.",
        "Obtain a solid understanding of what debugging and refactoring is and how to do it."
      ],
      "course_content": {},
      "requirements": [
        "A Windows computer, or a Mac with an appropriate text editor (free is fine)",
        "An open mind to learn something new and exciting which may make a huge difference in your future career."
      ],
      "description": "If you are like most people wanting to learn a programming language, you don't have much spare time.  What time you have is extremely valuable.   If you want to learn Google's GO programming language, then,  what you need is a course that will teach the essential Go programming skills quickly.\nThink of a word processing program like Microsoft word - it has lots of advanced features that most people never use.   It's the same with computer programming.  A typical programming language has many parts that rarely get used, and a lot of what is taught in a typical computer course or textbook never gets used in the real world by professional developers.\n\nSo why learn it all?  It makes much more sense to learn just want you actually need to know to become productive and be then able to apply for GoLang developer positions.   If you really want to learn those other parts of the Go lang language, then you can later, and it's highly likely you will pick it up faster anyway at that point because of the skills you have already learned.\n\nThat's what this course is all about - giving you the skills you need quickly without any fluff or useless information.\nThe course is aimed at complete beginners.  No previous experience is necessary or assumed. If you are coming from another programming language like Java or C++, or C# then you will also feel right at home here, and you can skip any of the introductory parts if you wish.  But keep in mind there are differences in Go compared to those languages, so it's probably a good idea to watch all videos anyway.\n\nWhat will you learn in the course?\nYou will learn about many important GO code concepts including.\nLearn the syntax of the Go language by writing several simple text-based games\nLearn about the difference between Object-oriented programs and Go, which uses Composition\nLearn to think like a programmer: making decisions, looping logic, and performing calculations\nLearn about Go’s use of goroutines, channels, and the select statement for concurrent programming\nLearn how Go can be used to build a production-ready web application\nSome of the other specific things you will work through include:-\nHow to write a Go program\nLearn the language while building simple games\nLearn all about the Go compiler\nLearn best practices when writing Go code\nLearn how to write idiomatic Go code\nLearn how to build a terminal-based Go program\nLearn low to build a basic web-based Go program\nLearn how to use delve, the Go debugger, to find and fix errors in your programs\nAlong the way, we will work with a lot of GO example code.  We'll start with badly written code, and go through it thoroughly to improve it and make it bug-free.  This is an essential skill and you will learn that in this course.\nThe course uses a combination of small snippets of code, and then larger real-world projects that you can run and edit and improve - you will learn how to think like a programmer and how to make the most out of the GO programming language.\nWhat about the instructor?\nYour instructor in the course is Trevor Sawler.\nTrevor has twenty years of experience in professional software development, and twenty years of experience as a University professor.\nHe has worked with a broad range of clients, including Thomson Nelson, Hewlett Packard, the Royal Bank of Canada, Keybank, Sprint, and many, many others.   As a professor, Trevor has taught in a wide variety of course areas, including Computer Science, English, Irish, and American literature, and a number of \"crossover\" courses that bridge the liberal arts and technological fields.\nWhat about if you have questions?\nAs if this course wasn’t complete enough, Trevor offers full support, answering any questions you have via the course Q&A section.\n\nThis means you’ll never find yourself stuck on one lesson for days on end. With their hand-holding guidance, you’ll progress smoothly through this course without any major roadblocks.\nThere’s no risk either!\nThis course comes with a full 30-day money-back guarantee. Meaning if you are not completely satisfied with the course or your progress, simply let the instructors know and they will refund you 100%, every last penny no questions asked.\nYou either end up with GO skills, go on to develop great programs and potentially make an awesome career for yourself, or you try the course and simply get all your money back if you don’t like it…\nYou literally can’t lose.\nReady to get started, developer?\nEnrol now using the “Add to Cart” button on the right, and get started on your way to creative, advanced GO brilliance. Or, take this course for a free spin using the preview feature, so you know you’re 100% certain this course is for you.\nSee you on the inside (hurry, the Go class is waiting!)",
      "target_audience": [
        "This course is perfect for absolute beginners with no previous programming experience.",
        "It's also great if you know an existing programming language like Java and want to become skilled in Go."
      ]
    },
    {
      "title": "Python from Zero to Hero for absolute beginners and kids",
      "url": "https://www.udemy.com/course/python-programming-from-basics-to-advance/",
      "bio": "Python Programming from Python Basics to Advanced Python OOP and GUI in Python - File Handling and Database.",
      "objectives": [
        "learn Python language in detail (python Basics + python Advanced + python GUI programming (tkinter))",
        "pythonFile Handling, python Database, python Regex, python Decorators and more in python",
        "Python Object Oriented Programming - Class and Object, Inheritance, Polymorphism, Abstraction & Encapsulation",
        "python Loops(for while), python conditionals(if else), Numbers and Strings, lists, functions, set in python",
        "python Graphical User Interface (GUI) programming using tkinter (Menu, Widgets, ttk Module and more ) python",
        "python Tic Tac Toe Game detail explanation from coding to GUI in python"
      ],
      "course_content": {
        "Code Editor PyCharm & Jupiter Notebook": [
          "PyCharm for Python Guide",
          "PyCharm making new project and getting look and feel",
          "Jupiter Notebook Guide"
        ],
        "Data Types (Integers, Strings)": [
          "Numbers and Mathematical Operations on them.",
          "Variables",
          "Introduction to Strings",
          "Functions on Strings",
          "Multiline Strings in Python",
          "String Concatenation",
          "Formatted f-String",
          "Special Characters in strings",
          "Raw r-String"
        ],
        "Sequences in Python": [
          "List Sequence",
          "Functions/Methods on List",
          "Nested Lists",
          "Tuple Sequence",
          "Functions list & len on Tuple",
          "Tuples can have Mutable Objects"
        ],
        "Functions": [
          "Introduction to Functions",
          "Make Function in code",
          "Nested Functions",
          "Argument types",
          "Positional Arguments",
          "Keyword Arguments",
          "Multiple Arguments",
          "Decorators Explanation",
          "Decorators Code",
          "range function",
          "sets"
        ],
        "Loops": [
          "Introduction to loops",
          "for loop",
          "for loop code",
          "TASK for loop",
          "SOLUTION of task",
          "while loop"
        ],
        "Conditionals ( if else )": [
          "if else",
          "elif"
        ],
        "File Handling": [
          "What are files?",
          "Read File",
          "Try except File",
          "with and close File",
          "Write and Append",
          "Count Words in a File",
          "Task 1",
          "Solution Task 1",
          "Task 2 Files",
          "Solution Task 2"
        ],
        "SQLite Database": [
          "Make a Connection to Database and make Table",
          "Insert In Database DB",
          "Select Form DB",
          "Where Clause",
          "Delete",
          "Update",
          "Safety points try catch and ?"
        ],
        "Regular Expression (Regex)": [
          "Regular Expression REGEX Explanation",
          "Raw String",
          "REGEX in Code",
          "SET and long string",
          "Start and End",
          "Match function and Email validation",
          "TASK",
          "Solution of Task",
          "FindAll Function",
          "Finditer Function",
          "Split Function"
        ],
        "Object Oriented Programming": [
          "What is Object Oriented Programming? and why to use it.",
          "Class and Object",
          "Making first \"class\"",
          "Constructor of a class",
          "Object of \"Person\" class"
        ]
      },
      "requirements": [
        "No prior knowledge of python or programming is required.",
        "Computer and Internet connection"
      ],
      "description": "Learn Python Programming from Python Basics to Advanced Python\nI strongly recommend this course for students who are new to Python or Programming and want to learn python in a way that is easy to understand\nSo this course will take you from writing you first line of code to learning Advanced python concepts (Including code editors guide)\nIn Advanced section we will be learning:\nPython File Handling\nPython Database\nPython Object Oriented Programming\nPython Nested loops in python\nPython List Comprehension\nPython Nested List Comprehension\nPython Functions\nPython Decorators\nPython Regular Expression (Regex Python)\nPython GUI Programming\n\n\nTo give you a birds eye view of what we will be learning in these topics that I have mentioned above I will explain each of then blow.\n\n\nObject Oriented Programming Python\nIt’s very important to learn OOP concepts like\nCLASS\nOBJECT\nINHERITANCE\nPOLYMORPHISM\nENCAPSULATION\nABSTRACTION\nWe will not only cover them in code but also in visual explanations that will help you understand the concept way better.\n\n\nFile Handling Python\nLearning how to manipulate files is very important. So we will see how to\nMake a FILE\nWrite in a FILE\nUpdate a FILE\nDelete a FILE\nTechniques to handle files better using python.\nAnd tasks for you as well with solution like\nCounting words in a file\nCounting letters in a file\n\n\nDatabase Python\nLearning how to manipulate Databases is very important too. So we will see how to\nMake a Database\nAdd in Database\nRemove form Database\nAnd many for things\n\n\nNested Loops and List Comprehension\nIt can be difficult to understand “Nested” concepts that how exactly things are executed step by step, so I have visual explanation for that too and it will be very easy after understanding those visuals.\n\n\nPython Regular Expression (Regex Python)\nWe will learn searching and validation using regular expression and see how we can execute that in python.\nFor example:\nValidating an email address using python regex.\nSearching in a file using python regex.\n\n\nBasics of Python has following topics:\npython strings, python numbers, python lists, python tuple, python loops, python for loop, python while loop, python conditionals, python if else, python elif\n\n\nAdvanced Python include:\npython functions, python decorators, python list comprehension, python nested for loop, python file handling, python database handling, python Object Oriented Programming, python Class, python Object, python Inheritance, python Polymorphism, python abstraction, python encapsulation\n\n\nGUI python\nPython tkinter module, python ttk module, python tic tac toe game.\nWe will learn how different widgets in python tkinter module work and will make a tables app that has an interface as well.\nWe will make functional python tic tac toe game.\n\n\nLearn python programming in sequence:\nTopics are in sequence, python basics and advanced python areas covers python topics one after the other so no need to worry about what python topics to learn after which python topic.\n\n\nThings to consider in this python course:\nLearn Python Programming in fun and easy way.\nLearn Python Programming Step by Step.\nLearn Python Programming with Visual Animations.\nLearn Python Programming fast.\nLearn Python Programming with practice (I will give you python tasks and also give you solution of those tasks in python language)\n\n\nObject Oriented Programming Python\nConcepts like Class and Object can be difficult to understand if not taught well, so animations in this course will be beneficial for you to understand these concepts.\n\n\nDecorators Python\nConcepts like decorators in python where you can add in the functionality of functions are explained not only in code but also in visual explanations for better understandings.\n\n\nThis course on python teaches you the necessary subjects in python programming that can help you in smoothly going further in your python programming journey.\n\n\nTo be a good programmer having good fundamentals grip is very important either its python or any other programming languages other than python. There are concepts and things common in different programming languages so by taking this course on python it can also help you in other languages like java and more. So in this course we will learn fundamentals in python programming language.\n\n\nWhen grip over python basics is strong then subjects like Python Object Oriented Programming, python file handling, python Database are important to learn so we will learn them as well in python programming language.\n\n\nWhen python basics and python advanced topics are covered then having knowledge of GUI using python is a plus, we will learn that as well in python programming language.\n\n\nLearn concepts like:\npython numbers, python strings, python tuple, python list, python loops, python functions, python decorators, python files, python db, python oop, python inheritance, python polymorphism, python abstraction, python GUI, python widgets, python game tic tac toe with python UI, python ttk, python tkinter.",
      "target_audience": [
        "Students who want to learn Python programming Language",
        "Students who want to learn Object Oriented Programming in python",
        "Students who want to learn GUI programming in python",
        "Students who want to learn python Basics + Advanced python + GUI in python at one place"
      ]
    },
    {
      "title": "Practical Test Driven Development for Java Programmers",
      "url": "https://www.udemy.com/course/practical-test-driven-development-for-java-programmers/",
      "bio": "A truly practical approach to the fundamentals of test driven development in Java, featuring JUnit and Mockito,",
      "objectives": [
        "Be able to confidently create software using Test Driven Development techniques.",
        "Be able to use Mocking frameworks such as Mockito",
        "Understand how to write tests for trickier scenarios",
        "Using TDD techniques to fix applications which weren't developed using TDD"
      ],
      "course_content": {
        "Chapter 1 - Introduction": [
          "Introducing TDD",
          "What will we test?",
          "How to get support while you're taking this course"
        ],
        "Chapter 2 - JUnit": [
          "Introducing our first example project",
          "Using the IntelliJ IDE",
          "Creating a project structure for test cases",
          "JUnit Basics"
        ],
        "Chapter 3 - First tests": [
          "Thinking about examples and outcomes",
          "Step 1 - getting to red",
          "Step 2 - getting to green",
          "Why you must always start with a failing test!",
          "Adding more tests",
          "Finally writing some code"
        ],
        "Chapter 4 - Practising the basics": [
          "Testing for exceptions - and challenge number 1",
          "Challenge 2 - writing a test",
          "Solution to challenge 2",
          "Getting to more complex requirements and finding hidden bugs",
          "Challenge 3 - Adding further business requirements"
        ],
        "Chapter 5 - Refactoring": [
          "Getting started with refactoring - extracting constants",
          "More refactoring - restructuring our code"
        ],
        "Chapter 6 - Best Practices": [
          "What is a good or bad test?",
          "JUnit Asserts"
        ],
        "Chapter 7 - Stubs": [
          "The challenge of testing code that has dependencies",
          "Creating a test stub using just Java"
        ],
        "Chapter 8 - Mocks and Mockito": [
          "Why we want to test behaviour as well as logic",
          "Setting up Mockito and creating a mock",
          "Using mocks to test behaviour",
          "Mockito syntax options"
        ],
        "Chapter 9 - Fakes and Tautologies": [
          "What are Fakes or Dummies",
          "Practical exercise - using Mockito to create a stub",
          "Refactoring our tests - using setup and teardown",
          "How to avoid tautologies"
        ],
        "Chapter 10 - Handling legacy code": [
          "Loading up the case study",
          "Understanding the challenge part 1",
          "Understanding the challenge part 2",
          "Using a Spy",
          "Practical exercise - finding the fault in the business logic"
        ]
      },
      "requirements": [
        "Basic Java knowledge and at least some experience in programming. No experience of JUnit or writing tests is needed."
      ],
      "description": "This course covers the fundamentals of test driven development for Java programmers... not just the theory, but how to use it in real world project examples. This includes mocking with Mockito. This includes some hands on exercises and how to deal with legacy code that doesn't have tests in place.\nIMPORTANT NOTE ABOUT JAVA VERSIONS - This course covers JUnit4 and JUnit5 and is compatible with Java versions 7,8 and 11+.",
      "target_audience": [
        "Experienced and more novice Java developers who want to switch to a more agile way of programming",
        "Programmers who want to improve the way they approach test driven development"
      ]
    },
    {
      "title": "Clean Code with Java: Learn Simple Design, Refactoring & TDD",
      "url": "https://www.udemy.com/course/java-clean-code-with-refactoring-and-tdd/",
      "bio": "Write Clean Code with Java. Learn Simple Design, Refactoring and Test Driven Development - TDD.",
      "objectives": [
        "You will Learn to Write Clean Code with Java",
        "You will Learn and apply 4 Principles of Simple Design",
        "You will Understand Refactoring and Refactor Java Code",
        "You will Learn TDD and apply TDD to write Clean Code in Java",
        "You will look at examples of bad code and refactor them to clean code",
        "You will understand that TDD + 4 Principles of Simple Design + Continuous Refactoring = Clean Code"
      ],
      "course_content": {
        "Getting Started with Clean Code": [
          "Clean Code with Simple Design, Refactoring and TDD - Course Overview",
          "Github Repository for the course",
          "Clean Code with Simple Design, Refactoring and TDD - Getting Setup",
          "DO NOT SKIP: Join our Learning Community",
          "Step 00 - Clarity in Code - Problem 1 - Gilded Rose - Introduction",
          "Step 01 - Clarity in Code - Problem 1 - Gilded Rose - Refactoring Unit Test 1 -",
          "Solution - Clarity of Code - Exercise - Gilded Rose",
          "Step 02 - Clarity in Code - Problem 1 - Gilded Rose - Refactoring Unit Test 2 -",
          "Step 03 - Clarity in Code - Problem 1 - Gilded Rose - Refactoring Unit Test 3 -",
          "Step 04 - Clarity in Code - Problem 1 - Gilded Rose - Refactoring Unit Test 4 -",
          "Step 05 - Clean Code - Attitude for the course",
          "Reviewing Regularly is the Key"
        ],
        "Getting Started with 4 Principles of Simple Design": [
          "Step 01 - 4 Principles of Simple Design - An Introduction",
          "Step 02 - 4 Principles of Simple Design - Exercise - StudentHelper.isGradeB",
          "Step 03 - 4 Principles of Simple Design - Exercise - StudentHelper.getGrade",
          "Step 04 - 4 Principles of Simple Design - Exercise - StudentHelper.willQualifyFo",
          "Solution - 4 Principles of Simple Design - StudentHelper",
          "Step 06 - Most difficult challenge in programming - Naming",
          "Step 07 - 4 Principles of Simple Design - Exercise - TextHelper.swapLastTwoChara",
          "Step 07 - Should you have comments in code?",
          "Step 08 - 4 Principles of Simple Design - Exercise - TextHelper.truncateAInFirst",
          "Solution - 4 Principles of Simple Design - TextHelper",
          "Step 09 - 4 Principles of Simple Design - Exercise - CustomerBOTest",
          "Step 10 - 4 Principles of Simple Design - Exercise - CustomerBOTest",
          "Solution - 4 Principles of Simple Design - CustomerBOTest",
          "Step 11 - Attitude towards Unit Testing",
          "Step 12 - Unit Testing Principles",
          "Do you want to help us?",
          "Why Should You Embrace a Growth Mindset"
        ],
        "Getting Started with Refactoring": [
          "Step 01 - Introduction to Refactoring",
          "Step 02 - Refactoring - Exercise - CustomerBOImpl.getCustomerProductsSum",
          "Solution - Refactoring - CustomerBOImpl",
          "Step 03 - Refactoring - Exercise - Movie.isValidRating",
          "Solution - Refactoring - Movie",
          "Step 04 - Refactoring - Exercise - MenuAccess.setAuthorizationsInEachMenus",
          "Refactoring - Solution - MenuAccess",
          "Step 05 - Refactoring - Exercise - UserLoginChecker.isUserAllowedToLogin - 1",
          "Step 06 - Refactoring - Exercise - UserLoginChecker.isUserAllowedToLogin - 2",
          "Refactoring - Solution - UserLoginChecker",
          "Step 07 - My 10 Tips for Good Programmers"
        ],
        "Getting Started with Test Driven Development": [
          "Step 01 - Introduction to Test Driven Development - TDD",
          "Step 02 - Test Driven Development - TDD - Exercise - StringHelper.replaceAInFirs",
          "Step 03 - Test Driven Development - TDD - Exercise - StringHelper.replaceAInFirs",
          "Step 04 - Test Driven Development - TDD - Exercise - StringHelper.areFirstTwoAnd",
          "Step 05 - Test Driven Development - TDD - Exercise - Bowling Kata - Introduction",
          "Step 06 - Test Driven Development - TDD - Exercise - Bowling Kata - Getting Star",
          "Step 07 - Test Driven Development - TDD - Exercise - Bowling Kata - Spare",
          "Step 08 - Test Driven Development - TDD - Exercise - Bowling Kata - Strike",
          "Step 09 - 3 Tips for Test Driven Development - TDD",
          "Understanding Importance of Deep Work"
        ],
        "Thank You": [
          "Clean Code with Simple Design, Refactoring and TDD - Thank You",
          "Bonus Lecture"
        ],
        "APPENDIX - Java New Features - A Quick Review using Q&A Format": [
          "Java New Features Review - Getting Started",
          "Quick Review - Java New Features",
          "How is Java Marching Forward",
          "Primary goals behind recent Java releases",
          "Important Java versions and most important features",
          "Java New Features Review - Thank You"
        ]
      },
      "requirements": [
        "You will need some programming experience with Java",
        "You will need access to a Java IDE like Eclipse",
        "You have an attitude to learn while having fun :)"
      ],
      "description": "Learn to Write Clean Code with Java.\nGet Hands-on with Code Examples involving 4 principles of Simple Design, Refactoring & TDD.\n\n\nWHAT STUDENTS ARE SAYING\n5 STARS - Straight to the point concise and practical\n5 STARS - It was a great course to get an understanding of clean coding and the TDD approach. Exercises in this course will help me to write in more cleaner and maintainable manner.\n5 STARS - Very well structured course, starting from how to write clean code, then refactor and finally coding with TDD, but with a very practical approach.\n5 STARS - Amazing Course !! It's a recommended course for every developer. The course will explain the best way to write standard, clean & maintainable code. Awesome refactoring tips & tricks .Hats off!! in28minutes team\n5 STARS - This course is awesome; really liking the course so far. The instructor clearly conveys difficult concepts.\n\n\nOUR APPROACH\nGoal I : Understand Clarity of Code (Unit Tests)\nGoal II: Focus on 4 Principles of Simple Design\nGoal III: Get started with Refactoring\nGoal IV : Understand TDD\n\n\nSTEP BY STEP DETAILS\nGetting Started with Clarity in Code\nClean Code with Simple Design, Refactoring and TDD - Getting Setup\nStep 00 - Clarity in Code - Problem 1 - Gilded Rose - Introduction\nStep 01 - Clarity in Code - Problem 1 - Gilded Rose - Refactoring Unit Test 1 - Default Item\nStep 02 - Clarity in Code - Problem 1 - Gilded Rose - Refactoring Unit Test 2 - Default Item\nStep 03 - Clarity in Code - Problem 1 - Gilded Rose - Refactoring Unit Test 3 - Aged Brie\nStep 04 - Clarity in Code - Problem 1 - Gilded Rose - Refactoring Unit Test 4 - Backstage Passes\nStep 05 - Clean Code - Attitude for the course\nGetting Started with 4 Principles of Simple Design\nStep 01 - 4 Principles of Simple Design - An Introduction\nStep 02 - 4 Principles of Simple Design - Exercise - StudentHelper.isGradeB\nStep 03 - 4 Principles of Simple Design - Exercise - StudentHelper.getGrade\nStep 04 - 4 Principles of Simple Design - Exercise - StudentHelper.willQualifyForQuiz\nStep 06 - Most difficult challenge in programming - Naming\nStep 07 - 4 Principles of Simple Design - Exercise - TextHelper.swapLastTwoCharacters\nStep 07 - Should you have comments in code?\nStep 08 - 4 Principles of Simple Design - Exercise - TextHelper.truncateAInFirst2Positions\nStep 09 - 4 Principles of Simple Design - Exercise - CustomerBOTest\nStep 10 - 4 Principles of Simple Design - Exercise - CustomerBOTest\nStep 11 - Attitude towards Unit Testing\nStep 12 - Unit Testing Principles\nGetting Started with Refactoring\nStep 01 - Introduction to Refactoring\nStep 02 - Refactoring - Exercise - CustomerBOImpl.getCustomerProductsSum\nStep 03 - Refactoring - Exercise - Movie.isValidRating\nStep 04 - Refactoring - Exercise - MenuAccess.setAuthorizationsInEachMenus\nStep 05 - Refactoring - Exercise - UserLoginChecker.isUserAllowedToLogin - 1\nStep 06 - Refactoring - Exercise - UserLoginChecker.isUserAllowedToLogin - 2\nStep 07 - My 10 Tips for Good Programmers\nGetting Started with Test Driven Development\nStep 01 - Introduction to Test Driven Development - TDD\nStep 02 - Test Driven Development - TDD - Exercise - StringHelper.replaceAInFirst2Positions\nStep 03 - Test Driven Development - TDD - Exercise - StringHelper.replaceAInFirst2Positions\nStep 04 - Test Driven Development - TDD - Exercise - StringHelper.areFirstTwoAndLastTwoCharsTheSame\nStep 05 - Test Driven Development - TDD - Exercise - Bowling Kata - Introduction\nStep 06 - Test Driven Development - TDD - Exercise - Bowling Kata - Getting Started\nStep 07 - Test Driven Development - TDD - Exercise - Bowling Kata - Spare\nStep 08 - Test Driven Development - TDD - Exercise - Bowling Kata - Strike\nStep 09 - 3 Tips for Test Driven Development - TDD\nThank You\nClean Code with Simple Design, Refactoring and TDD - Thank You",
      "target_audience": [
        "Beginner Programmers curious about Clean Code",
        "Experienced Programmers wanting to practice Clean Code",
        "You want to experience our formula to clean code (TDD + 4 Principles of Simple Design + Continuous Refactoring = Clean Code)"
      ]
    },
    {
      "title": "Linux Shell Course for Beginners - Lite",
      "url": "https://www.udemy.com/course/linux-shell-course-for-beginners-lite/",
      "bio": "This course is teaches the basics of using the linux shell, and is intended as a first course in using the terminal.",
      "objectives": [
        "Get Acquainted with Terminal very Well",
        "Navigate the Directory Structure"
      ],
      "course_content": {
        "Basic Commands": [
          "Introduction",
          "Starting with Terminal",
          "Basic Directory Command",
          "File Listing Command",
          "File Permissions Command",
          "Changing File Permission",
          "Bonus Lecture - Coupon Code"
        ]
      },
      "requirements": [
        "Knowledge of any Command Line is Helpful, but Not Necessary",
        "Any Linux Based Operating System"
      ],
      "description": "This course is teaches the basics of using the linux shell, and is intended as a first course in using the terminal. This course is lite version of our main course Linux Shell Course for Beginners. In this course you’ll learn how to navigate the directory structure, show the contents of directories, how to understand and work with file permissions and more.\nTopics include:\nHow to open the linux terminal\nAll about directories\nListing a directory’s contents\nUnderstanding file permissions\nChanging permissions\n\n\nActual course will explore various aspects of the shell, such as scripting, using utilities such as grep and sed, C and Perl programming in linux, and the file structure.\n\nI hope you join me as we explore linux together.",
      "target_audience": [
        "Expert who Needs to Brush up Basic Linux Shell Skills",
        "Any Fresher Who Wants to Learn Basic Linux Shell Commands"
      ]
    },
    {
      "title": "The Complete Python Career Pack 2025: 15 Projects + GenAI",
      "url": "https://www.udemy.com/course/python-training/",
      "bio": "Master Python: Go Basics To Advance With Projects (Web, GUI, Automation, Scraping, Data Analysis, OpenAI ChatGPT, More)",
      "objectives": [
        "Learn to write clean Python code keeping project building approach in mind",
        "Integrating ChatGPT to our regular day learning to understand things 2x faster",
        "Understand fundamental, intermediate and advanced concepts with detailed explanations and examples!",
        "Work on 13 different projects and 2 assignments with modules: OpenCV, Pandas, Tkinter, Tweepy, Pillow, BeautifulSoup, OpenAI, Flask & More!",
        "Learn about 4 Pillars of Object Oriented Programming",
        "Build problem solving skill with practical examples and project implementations",
        "Use ChatGPT to build project from scratch, build, explain and modify anything!",
        "Explore new features included in Python latest versions including Python 3.12",
        "Explore different niches through projects: Web & Desktop Application, Data Analysis, Work with API, Web Scraping, Automation & More!",
        "Explore OpenAI API for custom projects: AI Chatbot, Podcast Script Writer, Image Generation with DALL-E & More!"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Introduction",
          "Welcome - Lets Get Started!",
          "Resources [Important]",
          "Python Programming - Is Python A Bubble?"
        ],
        "Python Setup & Installing": [
          "Python 3.x Installation",
          "Installing Python on Linux/Mac",
          "Different Methods To Execute Python Codes"
        ],
        "Writing Our First Python Program": [
          "Variables and Python Memory Management"
        ],
        "Datatypes in Python": [
          "Datatypes in Python",
          "Sequences in Python",
          "Sets, Dictionary",
          "Literals and Identifiers",
          "Reserve Words - You Cann't Use Them!"
        ],
        "Operators in Python": [
          "Operators: Arithmetic, Assignment",
          "Operators: Unary Minus, Relational, Logical, Boolean",
          "Understanding Escape Characters"
        ],
        "Input and Output": [
          "Introduction to Input and Output Statements",
          "Output Statements",
          "Input Statements",
          "Python Built-in Functions and Built-in Module"
        ],
        "IDE (Integrated Development Environment)": [
          "Working With Code Editor"
        ],
        "Python Control Statements": [
          "Conditionals: If, If ... Else and Indentation",
          "Indentation",
          "Conditionals: If ... Else Statements With Operators",
          "Conditionals: if... elif ... else Statements + Nested if Statements"
        ],
        "Loops In Python": [
          "While Loop",
          "For Loops - Part 1",
          "For Loops - Part 2",
          "Break and Continue Statements"
        ],
        "Strings and Characters": [
          "Comments and Doc Strings",
          "Diving Deep With \"Strings\""
        ]
      },
      "requirements": [
        "Windows or Mac Operating System with Internet Connection."
      ],
      "description": "Welcome to Python Programming A-Z. One course to start your Python Journey as a beginner step-by-step. The course touches on every important concept of Python with explanations, examples & implementation. The entire course is designed for beginners with one goal in mind, to learn concepts and build Python projects.\nThroughout the course, we will explore the most important Python topics step-by-step:\nFundamental Concepts:\nBasics of Python Programming - Expressions, Variables, and Printing Output\nPython Operators - Python Assignment Operators, Relational and Logical Operators, Short Circuit Operators\nPython Conditionals and If Statement\nMethods - Parameters, Arguments, and Return Values\nComplete Object Oriented Programming - Class, Objects\nOOPS - Encapsulation, Inheritance, and Abstract Class.\nPython Data Structures In-depth - List, Set, Dictionary, and Tuples\nConditionals - If Else Statement, Nested If Else\nLoops - For Loop, While Loop in Python, Break and Continue\nMutability - Immutability of Python Basic Types.\nBuiltin And User-Defined Modules\nErrors And Exception Handling - try, except, else, and finally.\nCustom Exception - Raising Exception, Creating, and Raising a Custom Exception.\nAdvanced Concepts:\nRecursion\nMap, Filter and Reduce\nList Comprehension\nRegular Expressions\nDecorators\nLogging\nDate and Time\nWalrus Operator, Positional-Only Argument & f-String\nUnion Operator, Type Hinting & Native Time Support\nStructural Pattern Matching\nException Notes, Better Error Message & Speed Improvement\nProjects:\nFace Detection with OpenCV\nPassword Generator with Random Module\nData Analysis with Pandas\nAccessing Data through CoinMarketCap API\nBuilding Desktop Applications with Tkinter and Integrating SQLite3 Database.\nAutomated Twitter Bot with Tweepy\nAutomated Web Scraper and mailing with BeautifulSoup\nAutomated Social Media Image Generation using Pillow library and OpenWeatherMap API\nPodcast Script Writer with OpenAI\nConversational Chatbot with OpenAI\nImage Generator with DALL-E\nVideo Summarizer with ChatGPT\nPortfolio Web Application with Flask Framework\nOverall we work on 13 different projects and 2 assignments With OpenCV, Pandas, Tkinter, Tweepy, Pillow, BeautifulSoup, OpenAI, Flask & more. Some projects cover only basics whereas others are in-depth. The main goal of this course is to learn programming by building projects.\n\n\nWhy this course?\nComplete course is focused on the project-building approach, you learn every concept through a logical approach.\nLearn all important concepts in the simplest possible way with many examples and projects.\nNo previous programming or coding experience is required, we will cover everything step-by-step from basics.\nAfter completing this course you will be ready to work as an Intern, fresher, or freelancer and you will also be able to implement everything yourself! Most importantly you will be ready to divide deep with other niche dependent scopes with Python.\nEnroll now, I will make sure you learn the best about Python.",
      "target_audience": [
        "Anyone who wants to learn Python",
        "Anyone who wants to learn programming (No previous knowledge required)"
      ]
    },
    {
      "title": "What's New in C#7, C#8, C#9 and C#10",
      "url": "https://www.udemy.com/course/csharp7-whats-new/",
      "bio": "Learn about latest features of C#7, C#8, C#9 and C#10",
      "objectives": [
        "Understand and appreciate C#7, C#8 and C#9 language features",
        "Learn how to use new language features in practice"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "What's New in C# 7": [
          "Out Variables",
          "Pattern Matching",
          "Tuples",
          "Deconstruction",
          "Local Functions",
          "Ref Returns and Locals",
          "Expression Bodied Members",
          "Throw Expessions",
          "Generalized Async Return Types",
          "Literal Improvements"
        ],
        "What's New in C# 7.1": [
          "Why Is My C#7.1 Program Not Compiling?!?",
          "Async Main",
          "Default Expessions",
          "Ref Assemblies",
          "Infer Tuple Names",
          "Pattern-Matching with Generics"
        ],
        "What's New in C# 7.2": [
          "Leading Digit Separators",
          "'private protected' Access Modifier",
          "Non-trailing named arguments",
          "'in' Parameters",
          "'ref readonly' Variables",
          "'ref struct' and Span<T>",
          "Span<T> Demo"
        ],
        "What's New in C# 7.3": [
          "Performance Improvements",
          "Feature Enhancements",
          "New Compiler Features",
          "Bonus Lecture: Other Courses at a Discount"
        ],
        "What's New in C# 8": [
          "Nullable Reference Types",
          "Indices and Ranges",
          "Default Interface Members",
          "Pattern Matching"
        ],
        "What's New in C# 9": [
          "Introduction",
          "Record Types",
          "Top-Level Calls",
          "Initial Setters",
          "Pattern Matching Improvements",
          "Target-Typed New",
          "Source Generators",
          "Partial Method Syntax and Module Initializers"
        ],
        "What's New in C# 10": [
          "What's New in C# 10"
        ]
      },
      "requirements": [
        "Knowledge of C# 6 and earlier"
      ],
      "description": "This short course covers the latest and greatest features of C#, covering versions 7, 7.1, 7.2, 7.3, 8.0, 9.0 and 10.0 of the language that are being sim-shipped with corresponding Visual Studio updates.\nCourse Topics\nHere's every language feature presented in this course, grouped by the version of the C# language.\nC# 7:\nOut Variables\nPattern Matching (is and switch expressions)\nTuples and Tuple Deconstruction\nLocal Functions\nRef Returns and Locals\nExpression Bodied Members\nThrow Expressions\nGeneralized Async Return Types\nLiteral Improvements\nC# 7.1:\nHow to turn on C# 7.1 support\nAsync Main\nDefault Expressions\nRef Assemblies\nInfer Tuple Names\nPattern-Matching with Generics\nC# 7.2:\nLeading Digit Separators\n'Private Protected' Access Modifier\nNon-Trailing Named Arguments\nReference Semantics on Value Types:\n'In' Parameters\n'Ref Readonly' Variables\n'Ref Struct' and Span<T>\nC# 7.3:\nPerformance improvements\nAccess fixed fields without pinning\nReassign ref local variables\nUse initializers on stackalloc arrays\nUse fixed statements on any type that supports a pattern\nEnhancements to existing features\nTuple == and != support\nUse expression variables in more locations\nAttach attributes to backing field of auto-properties\nImproved method resolution when arguments differ by 'in'\nImproved overload resolution\nNew compiler options:\ndeterministic\npublicsign\npathmap\nC# 8:\nNullable Reference Types\nIndices and Ranges\nDefault Interface Members\nPattern Matching\nC# 9:\nRecord Types\nTop-Level Calls\nInitial Setters\nPattern Matching Improvements (type patterns, parenthesized patterns, conjunctive and, disjunctive or, negated not, relational patterns)\nPerformance and Interop (Native sized integers (nint/nuint), function pointers, SkipLocalsInit)\nFit and Finish (target-typed new, target type resolution of conditional expressions, static modifier for lambda expressions and anonymous methods, covariant return types, foreach GetEnumerator() use, discards as parameters to lambdas, attributes on local functions)\nC# Code Generators (partial method syntax, module initializers)\nC# 10:\nRecord Structs\nGlobal Using Directives\nFile-Scoped Namespace Declarations\nExtended Property Patterns\nGeneric Attributes\nLambda Improvements (attributes, explicit return types, natural type inference)\nEnhanced #line directives\nPrerequisites\nKnowledge and understanding of C# 6 and earlier\nGeneral experience in .NET/C# application development\nLearning Outcomes\nAn understanding and appreciation of latest C# 7/7.1/7.2/7.3/8/9 language features\nUnderstanding of how to convert existing C# code to C# 7/7.1/7.2/7.3/8/9",
      "target_audience": [
        "Beginner and experienced .NET/C# developers"
      ]
    },
    {
      "title": "Learn Spring 5, Boot 2, JPA, AOP, Web MVC, REST",
      "url": "https://www.udemy.com/course/spring-framework-web-development-2020/",
      "bio": "Master Modern Spring Boot, Spring Web MVC, AOP, Hibernate, Thymeleaf, JPA, Spring Security, RESTful services",
      "objectives": [
        "BUILD a REAL-WORLD INDUSTRY STANDARD full-stack Spring web application with Production Deployment",
        "MASTER Industry Relevant practices for development in Spring 5",
        "LEARN Thymeleaf and how to involve Spring data with Javascript",
        "CODE along with me to PRACTICE and IMPLEMENT everything you learn in real-time",
        "LEARN to use Spring MVC & Spring Data CRUD Repositories, Hibernate using a real database like PostgreSQL, as well as H2",
        "PRACTICE Production Deployment in AWS, as well as Containerizing your Spring apps using Docker",
        "LEARN Property File Configurations for Integration Testing vs Live App",
        "TRANSITION from a beginner to a SKILLED Spring Developer",
        "NOT WASTE TIME building 20 Twitter or Todo list app clones, but build something more SIGNIFICANT and dive deeper as you learn and build an INDUSTRY GRADE app",
        "OBTAIN and DEMONSTRATE your skills with the Spring Framework to LAND A JOB as a Spring Developer"
      ],
      "course_content": {
        "Getting Started": [
          "IMPORTANT: Source Code and Files [Watch Entire Video First]",
          "IMPORTANT: Code Repository Link",
          "What and Why of Spring",
          "Setting up the Development Environment",
          "Failed to create the Java Virtual Machine",
          "Dedicated TA Support",
          "Join our Online Community (Discord)",
          "Understanding Post Form, Query Params and Path Variables",
          "How to Proceed in This Course",
          "Path Variables and Request Params Continued",
          "Overview of Spring MVC",
          "Form Submission in Views",
          "Redirects and Data"
        ],
        "Real-world Project + Thymeleaf, Spring Data JPA, and Entity Relationships": [
          "Setting Up a New Project (The PMA Web App)",
          "Turn a Class into an Entity",
          "Bind Java Objects to Forms in Thymeleaf",
          "Create Crud Repository for Project Entity",
          "Create Crud Repository for Employee Entity",
          "Using Crud Repositories",
          "Organize Thymeleaf Views",
          "HW for Thymeleaf Views and Navigation"
        ],
        "Entity Relationship Annotations": [
          "@OneToMany and @ManyToOne Annotations for Relating Entities",
          "@OneToMany Annotation with Thymeleaf Form Binding",
          "@ManyToMany Annotation"
        ],
        "Seeding Databases using CommandLineRunner and SQL Files": [
          "Seeding the Database with CommandLineRunner",
          "Seeding the Database Using SQL Files"
        ],
        "Javascript with Crud Repositories in Thymeleaf Webpages": [
          "Including Javascript and CSS Files in Your Project",
          "Improving the Homepage",
          "Custom Queries in Spring Data Repositories",
          "Custom Query Continued: Project Status Query",
          "Using Model Attributes with JavaScript in Spring and Thymeleaf"
        ],
        "Diving Deeper into Core Spring Concepts": [
          "Spring Dependency Injection",
          "Component Scanning @Service, @Component and @Repository Annotations",
          "Constructor Injection, Field Injection and Setter Injection",
          "@Primary and @Qualifier Annotations"
        ],
        "Spring Properties Configuration Files and Environment Variables": [
          "Property Configurations and Reading Values",
          "Reading Environment Variables in Property Configuration Files"
        ],
        "PostgreSQL Database Integration in a Spring Application": [
          "Installing the PostgreSQL Database and Driver",
          "Configure Properties for Postgres Database"
        ],
        "Spring Integration Testing Separating Real Database vs. In-memory H2 Database": [
          "Setting Up Configurations for Integration Testing",
          "Using @SpringBootTest Annotation Correctly",
          "Integration Tests for Controllers/Views"
        ],
        "Production Deployment on AWS EC2 + Containerizing using Docker + AWS RDS": [
          "Deploy a Spring Application to AWS EC2 Server",
          "Working with Docker to Containerize Your Apps",
          "Building a Docker Image for a Spring Boot App and Running it in a Container",
          "Setting up an AWS Cloud Hosted Postgres Database",
          "Making a Production Ready Docker Image for Your Spring Boot App"
        ]
      },
      "requirements": [
        "Student needs to know how to write basic applications in Java",
        "Basics of SQL Databases"
      ],
      "description": "Are you a Java developer eager to level up your skills with Spring?\nDo you want to create scalable, secure, and production-ready applications using industry-standard tools like Spring Boot, Spring MVC, Spring Security, and more?\nHave you felt frustrated with repetitive, shallow projects and longed for a hands-on, comprehensive learning experience that mirrors real-world challenges?\nIf you answered yes to any of these questions, you’re in the right place.\nWhat Makes This Course Stand Out?\nComprehensive, Real-World Learning: Build an industry-grade full-stack Spring web application from scratch. This course goes beyond simple clones to deliver deep insights into building robust, enterprise-level software.\nStep-by-Step, Hands-On Approach: Code along with practical examples covering every aspect of the Spring ecosystem—from Spring Framework 5 fundamentals to advanced topics like AOP, JPA, and RESTful API development.\nModern Tools & Best Practices: Master production deployment with AWS and containerization using Docker. Learn to integrate real databases like PostgreSQL and apply industry-relevant configurations for both development and integration testing.\nStructured Learning for All Levels: Whether you’re a beginner or looking to enhance your existing Spring skills, this course provides a clear progression that transitions you from basic concepts to advanced application development.\nWhy Spring Is Essential for your Career?\nSpring is, by far, the most popular framework for application development in the Java ecosystem. Nothing else even comes close. Why? Because it makes software development so much easier in Java. You can build webapps, mobile apps, desktop apps, batch and big data apps and services in a record time using Spring. Spring does a lot of things right, and it's getting better and better with each release. There aren't a lot of technologies with the kind of wide reach, stability and maturity of Spring, that still move fast and innovate. That's a really tough balance to hit, and Spring has been a leader in that space for over a decade.\nToday, Spring, along with Boot, is a polished, modern and highly expressive framework that makes building apps like twitter almost trivial (easily passes the twitter test). So, the popularity of the Spring ecosystem is well deserved. If you're working in Java, you're very likely doing work with Spring because 90% of all Java projects use Spring!\nThis course will prepare you to become an expert on the Spring Framework. Together, we will build an industry standard Spring Web Application which will transition you from a beginner to an experienced and employable Spring Developer. We will build a real world application in which we will cover topics and practices that are used throughout the industry. You will type every line of code along with me, as I explain, to ensure that you fully comprehend the subject matter. I will be available to answer any questions that you may have, so you will never be stuck on a section, or have confused on any topic.\n\n\nTopics covered in this course include:\nSpring Framework 5\nSpring Boot 2\nSpring MVC\nMaven\nSpring Data CRUD Repositories\nThymeleaf\nHibernate\nSpring Annotations\nUsing the Command Line to run Spring Boot Apps\nCore Spring Concepts\nProperty Configurations\nPostgreSQL Database\nIntegration Testing\nDeploying our Spring Application to the AWS EC2 Server\nContainerization using Docker\nSpring AOP (Aspect Oriented Programming)\nSpring Security\nRESTFul Web Services API\n\n\nKEY BENEFITS OF SPRING FRAMEWORK MASTERY\nMastering the Spring Framework is not just about learning a technology—it’s about unlocking the ability to build resilient, scalable applications that power today’s enterprises. By gaining in-depth knowledge of Spring Boot, MVC, Security, and more, you'll be equipped to tackle real-world challenges, streamline development processes, and significantly enhance your career prospects in the competitive IT landscape.\n\n\nSTUDENT REVIEWS\nDon’t just take it from me, take it from other students who have taken this course. Here are reviews from real students who took this course:\n★★★★★ Can't thank enough for this course! It's helping me a ton at my job! Great instructor!\n★★★★★ The course material is very organized and to the point. Imtiaz is a very good instructor and he makes complex ideas very easy to grasp with to-the-point examples. Really liking the course so far.\n★★★★★ Worth it, covers so many topics, beginner or expert you will learn new things or a new vision!\n★★★★★ Simple and precise. Best course for Spring beyond Udemy and Yt if you want to see how to develop real time application, not just some surfaced examples. Teacher is thorough, slowly shows every step very clearly. Very professional. Bravo.\n★★★★★ Absolutely has to be the best Spring web development course on Udemy!\n★★★★★ Excellent course so far! The instructor does a fantastic job introducing small pieces at a time, and then slowly building upon the previous piece. At each step, we get to see the effects of the code we are writing.\n★★★★★ First thing first, can I just say how captivating your voice is? Your voice is like music to human ears and the way you explain things is just captivating/soothing? Your style seems to be thorough, to the point and patient. I have just finished section 1 and so far the content has also been really good. I have not forgotten anything you've said so far and whatever code you've shown so far, I can write from the scratch without looking it up. So I have to say, I rate this course 5 out of 5.\n★★★★★ The instructor tries his best to explain each action he is doing while coding. He tries his best to focus on what is important. His voice is very clear. He repeats the important points to set the focus on what you need to remember. He doesn’t make you lose time with non essential concepts which is good because you can see where you need to spend your learning time.\n\n\nKEY TAKEAWAY\nBy the end of this course, you'll have built a complete, industry-standard Spring web application and acquired the skills to confidently design, develop, and deploy enterprise-grade applications. Enroll today and take the definitive step toward becoming a highly skilled Spring Developer!\nEnroll today to learn how to build modern applications using the Spring Framework!",
      "target_audience": [
        "Students that want real-world experience in enterprise software development",
        "Beginner level Java developers",
        "Students that are sick of learning from building 20 little Twitter clones or todo list apps and want to actually master something at a deeper level!"
      ]
    },
    {
      "title": "The Full JavaScript & ES6 Tutorial - (including ES7 & React)",
      "url": "https://www.udemy.com/course/es6-in-depth/",
      "bio": "The most in-depth course on ES6 around. Start with JavaScript, deep-dive into ES6, & even more (Webpack, ES7, & React)!",
      "objectives": [
        "Code in JavaScript like a pro.",
        "Code in es6 comfortably, using all the new features.",
        "Build es6 projects from the ground up using tools like webpack and babel.",
        "Create a basic ReactJS application from scratch."
      ],
      "course_content": {
        "Introducing the Course": [
          "Introducing the Course",
          "Outline of the Course",
          "Installing a Code Editor",
          "Setting Up with Node",
          "Getting the Source Code"
        ],
        "Introducing JavaScript": [
          "Introducing JavaScript",
          "Understanding HTML",
          "Adding JS to HTML",
          "The Document Object Model (DOM)",
          "Introducing JS - A Review"
        ],
        "JavaScript Language and Essentials": [
          "Javascript Language and Essentials - the Foundation",
          "Syntax, Statements, and Data Types",
          "Variables and Assignment",
          "Operators",
          "Help! Can You Fix this Syntax?",
          "Help! Can You Fix This Syntax? | Solution",
          "Functions",
          "Objects",
          "Arrays and Array Methods",
          "Weighing Buddy (Functions and Objects)",
          "Weighing Buddy (Functions and Objects) | Solution",
          "Booleans and Comparison Operators",
          "If Statements",
          "Switch Statements",
          "For Loops",
          "While Loops",
          "Show Me the Evens - Show me the Odds",
          "Show Me the Evens - Show Me the Odds | Solution",
          "Language and Essentials - the Foundations | Section Overview"
        ],
        "Setting up an ES6 Development Environment": [
          "Presenting ES6, Babel, and Webpack",
          "A Note for \"ES6 Essentials\" Students",
          "Why We Need Babel",
          "How Babel Works",
          "Benefits of Webpack",
          "Set Up Project and Webpack 4",
          "Configure Webpack and Development Environment",
          "Set Up Babel with Webpack",
          "Forking the Coding Environment",
          "Setting Up an ES6 Development Environment | Section Overview"
        ],
        "Understanding ES6 Essentials Part 1": [
          "Presenting New ES6 Syntax",
          "Assignment with Let and Const",
          "Control with Block Scoping",
          "Template Literals",
          "Operating and Destructuring | Preview",
          "Spread Operator and Rest Parameters",
          "Destructuring Assignment on Arrays and Objects",
          "Optional Quiz : New ES6 Syntax",
          "Synthesizing ES6 Syntax | Section Overview"
        ],
        "Understanding ES6 Essentials Part 2": [
          "Presenting Methods and Modules",
          "Arrow Functions",
          "Map and Filter Method",
          "Presenting Additional ES6 Built-in Methods",
          "String Helper Methods",
          "Modules",
          "Optional Quiz : Methods and Modules",
          "Methods and Modules | Section Overview"
        ],
        "Classes and Prototypes": [
          "Presenting Classes",
          "Defining Classes",
          "Inheriting Classes",
          "Static Methods in Classes",
          "Fender Bender (Classes)",
          "Fender Bender (Classes) | Solution",
          "Highlighting Differences between Classes and ProtoTypes",
          "ProtoTypes",
          "Prototype a Vehicle",
          "Prototype a Vehicle | Solution",
          "Classes and Prototypes | Section Overview"
        ],
        "Data Structures in ES6": [
          "Presenting Data Structures in ES6",
          "Writing a Set",
          "Does this Word Contain this Letter? (Sets)",
          "Does this Word Contain this Letter? | Solution",
          "Presenting Maps",
          "Writing a Map",
          "How Many Times Does this Letter Appear? (Maps)",
          "How Many Times Does this Letter Appear? | Solution",
          "Data Structures in ES6 | Section Overview"
        ],
        "Closures in ES6": [
          "Presenting Closures",
          "Closures and Scoping",
          "Function Factories",
          "Addition Factory (Closures)",
          "Addition Factory (Closures) | Solution",
          "Private Methods",
          "Optional Quiz: Examining Closures",
          "Closures in ES6 | Section Overview"
        ],
        "ES6 Generators": [
          "Presenting Generators",
          "Defining a Generator",
          "Generation XYZ",
          "Generation XYZ | Solution",
          "Controlling Flow with Generators",
          "Generators vs Iterators",
          "Optional Quiz | Generators in ES6",
          "ES6 Generators | Section Overview"
        ]
      },
      "requirements": [
        "Little to no requirements - beginners welcome!",
        "Some basic JavaScript knowledge will help, but not necessary."
      ],
      "description": "Become a highly-demanded software engineer and developer by taking this in-depth tutorial on JavaScript and ES6. As one of the most highly-paid languages in the industry, learning ES6 will open so many opportunities and jobs for you!\nThis course contains a ton of creative content, so you’ll learn JS and in-depth ES6 in a stimulating, informative, and fun way.\nFilmed tutorials will get you coding yourself. The videos will ensure that you understand the reason behind each new line and keyword.\nOptional quizzes and coding challenges reinforce key concepts. Next, coding breaks in each section allow you to approach the course at your own pace. Jokes come up every now and then, especially in the breaks. Who knows, you may chuckle at some ES6 humor!\nIf you’re new, then this course gives a great intro to JavaScript as a first programming language. If you have a lot of experience, then you’ll find a nice overview of JS and in-depth ES6 topics. Either way, this course is perfect for you!\nWhat are you waiting for? Let’s dive into JavaScript and ES6 and start coding!",
      "target_audience": [
        "Anyone who wants a top-to-bottom intro to JavaScript.",
        "Someone who hopes to elevate their JS with in-depth es6 knowledge.",
        "An experienced programmer wanting an overview of advanced es6 topics."
      ]
    },
    {
      "title": "The Complete Introduction to C++ Programming",
      "url": "https://www.udemy.com/course/the-complete-introduction-to-c-programming/",
      "bio": "Learn all the Basics of C++ by practice and the creation of various basic C++ applications",
      "objectives": [
        "Learn how to use C++ the right way",
        "Understand complex C++ functions",
        "Learn Different Tips and Trics to improve your C++ skills",
        "Create your own basic programs with C++",
        "Be able to use C++ on a daily basis",
        "Learn at your own rythm with different practical exercices at each class"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Introduction to C++",
          "Setting Up everything"
        ],
        "Starting out": [
          "Writing our first lines of code",
          "Understanding our code",
          "Basic Data Storage",
          "Text and functions",
          "The basic of numbers part 1",
          "The basic of numbers part 2",
          "Practicing everything"
        ],
        "More programming": [
          "Interaction with the user",
          "Creating a basic food ordering app",
          "Storing more Data Part 1",
          "Storing more Data Part 2",
          "Working with multiple functions part 1",
          "Working with multiple functions part 2",
          "Understanding various C++ operators",
          "The basics of IF function",
          "Understanding the IF function Part 1",
          "Understanding the IF function Part 2",
          "Creating a coffee selector",
          "The basics of loops",
          "Uderstanding loops part 1",
          "Uderstanding loops part 2",
          "Generating different colors",
          "Adding comments to our project"
        ],
        "Creating your final project": [
          "Final project Part 1",
          "Final project Part 2",
          "Final project Part 3",
          "Final project Part 4",
          "Final project Part 5",
          "Conclusion",
          "Thank you",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Wanting to learn C++ programming",
        "Owning a computer",
        "no experience required"
      ],
      "description": "Learning the basics of programmation can be very complicated no matter the programming language espescially if you never did any programming before. Being able to program in C++ is not different. This is why this course is here to help you learn everything you need to know about C++ and master this programming language. If you :\n- Want to create various projects with this programming language\n- Are in school and need to understand certain notions and concepts in C++\n- Need to learn the basics of this programming language for work\n- Are simply curious about this topic\nThen you will definely love this course and it's content. Not only you will learn and understand all the basics of C++ programming but you will also have a lot of practice throughtout this course. Indeed, by the end of this course you will have a strong and solid understanding of all the basics of C++ programming and will be able to create on your own various C++ programs and applications.\n\n\nThe structure of the course\nThe way this course have been structured and created is made to really help you learn and understand all the basics of this programming language. From the starting point where you will be installing the right tools and writing you first basic lines of code to the more advanced such as functions, statements, loops and many pratical projects, this course has everything you need to start programming in C++ and begin your programmation journey. Also, this course has been created to help you learn all the basics concepts that are the core of C++ programmation. This way, you will not only program in this language but you will also understand the logic behind this programming language and will be able to create various applications in it on your own. Indeed, if you don't have prior programming experience, the hardest part is understanding the programming logic and this course covers all the topics to help you succed in C++ programming.\nAlso, this course is built around a very simple but effective logic that is learning by practice. In other words, this course is definely not theoritical even if it contains some theoritical concepts. Indeed, this course is build on a logic of learning by practice. In other words, you will find various C++ exercices all over the course to help you master this programming language and achieve your end goal of learning how to program is C++.\n\n\nFor who is this course designed\nThere is a lot of C++ course that exist all over the internet. But, this course is different, all the concepts that you will find in this course are simplified to help you understand them more in depth and more easilly. Also, each element that is presented in this course comes with a multitude of various programming examples that will alow you to practice everything that you will learn all over the course. In other words, if you never wrote a single line of code or did any programming prior this course and you always wanted to start somewhere then you will probably love this course. The way this course is presented and structured is here to help you achieve your obective of starting in the programming world and have a solid understanding of C++ programming by the end of this course.\nWhy should I take this course\nIf programming in C++ is something that you always had a passion for and you always wanted to learn more about that programming language then you should definitely take this course. The first thing that this course will teach you is understanding the logic of programming or in other words how to think like a programmer and how to use with C++. You will also learn various C++ concepts as well as create various C++ prrograms and applications all over the course.\n\n\nThere is no risk involved in taking this course\nThis course comes with a 100% satisfaction guarantee, this means that if your are not happy with what you have learned, you have 30 days to get a complete refund with no questions asked. Also, if there is any concept that you find complicated or you are just not able to understand, you can directly contact me and it will be my pleasure to support you in your learning.\n\n\nThis means that you can either learn amazing skills that can be very useful in your professional or everyday life or you can simply try the course and if you don't like it for any reason ask for a refund.\nYou can't lose with this type of offer !!\n\n\nENROL NOW and start learning today :)",
      "target_audience": [
        "people curious about programming",
        "People interested to learn how to program in C++"
      ]
    },
    {
      "title": "Total Python: You Can Master Python Programming in 16 Days",
      "url": "https://www.udemy.com/course/total-python/",
      "bio": "Become a Python Developer. 16 Python Projects. 160 Python Programming Practices. Machine Learning, Data Science, Django+",
      "objectives": [
        "You will master professional Python programming",
        "You will create robust, advanced and useful programmes",
        "You will work on real-world programmes every day. Each section ends with a project that you can complete using what you have learnt during the day",
        "You will apply Python in applications such as: Games, Artificial Intelligence, Machine Learning, Data Science, Administrative Management and much more",
        "Understand Object Oriented Programming (OOP)",
        "You will learn the most complex topics with clarity"
      ],
      "course_content": {
        "TOTAL PYTHON DAY 1 - PROGRAM A NAME CREATOR WITH PYTHON": [
          "Python Course Roadmap",
          "Course Completion Club: Celebrate Your Progress",
          "Why Python?",
          "Day 1 Goal",
          "Installing Python & Pycharm",
          "Print in Python",
          "Print Practice #1",
          "Print Practice #2",
          "Print Practice #3",
          "Strings in Python",
          "String Practice #1",
          "String Practice #2",
          "String Practice #3",
          "Input in Python",
          "Input Practice #1",
          "Input Practice #2",
          "Input Practice #3",
          "Let's Review Day 1",
          "Solution - Day 1 Coding Exercises",
          "Day 1 Python Challenge",
          "Day 1 Python Challenge - Solution",
          "Some Details for Getting Around Udemy"
        ],
        "TOTAL PYTHON DAY 2 - PROGRAM A COMMISSION CALCULATOR WITH PYTHON": [
          "Day 2 Goal: What python skills will you learn today?",
          "Data Types in Python",
          "Variables in Python",
          "Variables Practice #1",
          "Variables Practice #2",
          "Variables Practice #3",
          "Variable Names in Python",
          "Integers & Floats in Python",
          "Integers Practice",
          "Floats Practice",
          "Data Types Practice",
          "Conversions between Data Types in Python",
          "Data Type Conversions Practice #1",
          "Data Type Conversions Practice #2",
          "Data Type Conversions Practice #3",
          "String Formatting in Python",
          "Strings Formatting Practice #1",
          "Strings Formatting Practice #2",
          "Strings Formatting Practice #3",
          "Mathematical Operators in Python",
          "Mathematical Operators Practice #1",
          "Mathematical Operators Practice #2",
          "Mathematical Operators Practice #3",
          "Round Method in Python",
          "Round Practice #1",
          "Round Practice #2",
          "Round Practice #3",
          "Important: About reviews",
          "Let's Review Day 2",
          "Solution - Day 2 Coding Exercises",
          "Day 2 Python Challenge",
          "Day 2 Python Challenge - Solution"
        ],
        "TOTAL PYTHON DAY 3 - PROGRAM A TEXT ANALYZER WITH PYTHON": [
          "Day 3 Goal: What python skills will you learn today?",
          "Index Method in Python",
          "Index Method Practice #1",
          "Index Method Practice #2",
          "Index Method Practice #3",
          "Extracting Sub-Strings in Python",
          "Extracting Sub-Strings Practice #1",
          "Extracting Sub-Strings Practice #2",
          "Extracting Sub-Strings Practice #3",
          "String Methods in Python",
          "String Methods Practice #1",
          "String Methods Practice #2",
          "String Methods Practice #3",
          "String Properties in Python",
          "String Properties Practice #1",
          "String Properties Practice #2",
          "String Properties Practice #3",
          "Lists in Python",
          "Lists Practice #1",
          "Lists Practice #2",
          "Lists Practice #3",
          "Dictionaries in Python",
          "Dictionaries Practice #1",
          "Dictionaries Practice #2",
          "Dictionaries Practice #3",
          "Tuples in Python",
          "Tuples Practice #1",
          "Tuples Practice #2",
          "Tuples Practice #3",
          "Sets in Python",
          "Sets Practice #1",
          "Sets Practice #2",
          "Sets Practice #3",
          "Booleans in Python",
          "Booleans Practice #1",
          "Booleans Practice #2",
          "Booleans Practice #3",
          "Let's Review Day 3",
          "Solution - Day 3 Coding Exercises",
          "Day 3 Python Challenge",
          "Day 3 Python Challenge - Solution"
        ],
        "TOTAL PYTHON DAY 4 - PROGRAM THE 'GUESS THE NUMBER' GAME WITH PYTHON": [
          "Day 4 Goal: What python skills will you learn today?",
          "Comparison Operators in Python",
          "Comparison Operators Practice #1",
          "Comparison Operators Practice #2",
          "Comparison Operators Practice #3",
          "Logical Operators in Python",
          "Logical Operators Practice #1",
          "Logical Operators Practice #2",
          "Logical Operators Practice #3",
          "Decision Making in Python",
          "Decision Making Practice #1",
          "Decision Making Practice #2",
          "Decision Making Practice #3",
          "Loops in Python Intro",
          "For Loops in Python",
          "For Loops Practice #1",
          "For Loops Practice #2",
          "For Loops Practice #3",
          "While Loops in Python",
          "While Loops Practice #1",
          "While Loops Practice #2",
          "Loop Interruption Statements Practice",
          "Using Range in Python",
          "Range Practice #1",
          "Range Practice #2",
          "Range Practice #3",
          "Enumerator in Python",
          "Enumerator Practice #1",
          "Enumerator Practice #2",
          "Enumerator Practice #3",
          "Zip in Python",
          "Zip Practice #1",
          "Zip Practice #2",
          "Zip Practice #3",
          "Min & Max in Python",
          "Min & Max Practice #1",
          "Min & Max Practice #2",
          "Min & Max Practice #3",
          "Random in Python",
          "Random Practice #1",
          "Random Practice #2",
          "Random Practice #3",
          "List Comprehensions in Python",
          "List Comprehensions Practice #1",
          "List Comprehensions Practice #2",
          "List Comprehensions Practice #3",
          "Let's Review Day 4",
          "Solution - Day 4 Coding Exercises",
          "Matches (Update Python 3.10)",
          "Day 4 Python Challenge",
          "Day 4 Python Challenge - Solution"
        ],
        "TOTAL PYTHON DAY 5 - PROGRAM 'THE HANGMAN' GAME WITH PYTHON": [
          "Day 5 Goal: What python skills will you learn today?",
          "Methods, Help & Documentation in Python",
          "Methods, Help & Documentation Practice #1",
          "Methods, Help & Documentation Practice #2",
          "Methods, Help & Documentation Practice #3",
          "Functions",
          "Create Functions",
          "Create Functions Practice #1",
          "Create Functions Practice #2",
          "Create Functions Practice #3",
          "Return",
          "Return Practice #1",
          "Return Practice #2",
          "Return Practice #3",
          "Dynamic Functions",
          "Dynamic Functions Practice #1",
          "Dynamic Functions Practice #2",
          "Dynamic Functions Practice #3",
          "Function Example",
          "Interactions Between Functions",
          "Interactions Between Functions Practice #1",
          "Interactions Between Functions Practice #2",
          "Interactions Between Functions Practice #3",
          "Indefinite Arguments (*args)",
          "Indefinite Arguments (*args) Practice #1",
          "Indefinite Arguments (*args) Practice #2",
          "Indefinite Arguments (*args) Practice #3",
          "Indefinite Arguments (**kwargs)",
          "Indefinite Arguments (**kwargs) Practice #1",
          "Indefinite Arguments (**kwargs) Practice #2",
          "Indefinite Arguments (**kwargs) Practice #3",
          "Practical Problems",
          "Solutions to Practical Problems",
          "Let's Review Day 5",
          "Solution - Day 5 Coding Exercises",
          "Day 5 Python Challenge",
          "Tips & Hints for Today's Project",
          "Day 5 Python Challenge - Solution",
          "Fixing a Bug"
        ],
        "TOTAL PYTHON DAY 6 - PROGRAM A RECIPES BOX WITH PYTHON": [
          "Day 6 Goal: What python skills will you learn today?",
          "Open and Manipulate Files",
          "Open and Manipulate Files Practice #1",
          "Open and Manipulate Files Practice #2",
          "Open and Manipulate Files Practice #3",
          "Create and Write Files",
          "Create and Write Files Practice #1",
          "Create and Write Files Practice #2",
          "Create and Write Files Practice #3",
          "Directories",
          "Directories Quiz",
          "Pathlib",
          "Pathlib Quiz",
          "Path",
          "Path Practice #1",
          "Path Practice #2",
          "Path Practice #3",
          "Clean the Console",
          "Files & Functions",
          "Files & Functions Practice #1",
          "Files & Functions Practice #2",
          "Files & Functions Practice #3",
          "Let's Review Day 6",
          "Solution - Day 6 Coding Exercises",
          "Day 6 Python Challenge",
          "Day 6 Python Challenge - Solution (Part 1)",
          "Day 6 Python Challenge - Solution (Part 2)",
          "Day 6 Python Challenge - Solution (Part 3)",
          "Day 6 Python Challenge - Solution (Part 4)",
          "Testing Today's Project",
          "Fixing a Bug in Today's Project"
        ],
        "TOTAL PYTHON DAY 7 - PROGRAM A BANK ACCOUNT WITH PYTHON": [
          "Day 7 Goal: What python skills will you learn today?",
          "Object Oriented Programming in Python",
          "Classes",
          "Classes Practice #1",
          "Classes Practice #2",
          "Classes Practice #3",
          "Attributes",
          "Attributes Practice #1",
          "Attributes Practice #2",
          "Attributes Practice #3",
          "Methods",
          "Methods Practice #1",
          "Methods Practice #2",
          "Methods Practice #3",
          "Types of Methods",
          "Types of Methods Practice #1",
          "Types of Methods Practice #2",
          "Types of Methods Practice #3",
          "Inheritance",
          "Inheritance Practice #1",
          "Inheritance Practice #2",
          "Inheritance Practice #3",
          "Extended Inheritance",
          "Extended Inheritance Practice #1",
          "Extended Inheritance Practice #2",
          "Extended Inheritance Practice #3",
          "Polymorphism",
          "Polymorphism Practice #1",
          "Polymorphism Practice #2",
          "Polymorphism Practice #3",
          "Pillars of Object Oriented Programming in Python",
          "Special Methods",
          "Special Methods Practice #1",
          "Special Methods Practice #2",
          "Special Methods Practice #3",
          "Let's Review Day 7",
          "Solution - Day 7 Coding Exercises",
          "Day 7 Python Challenge",
          "Day 7 Python Challenge - Solution"
        ],
        "TOTAL PYTHON DAY 8 - PROGRAM A TICKET VENDING MACHINE WITH PYTHON": [
          "Day 8 Goal: What python skills will you learn today?",
          "Install Packages",
          "Install Packages Quizz",
          "Modules and Packages",
          "Modules and Packages Quizz",
          "Error Handling",
          "Error Handling Practice #1",
          "Error Handling Practice #2",
          "Error Handling Practice #3",
          "Searching for Errors with Pylint",
          "Pylint Practice (Self-Assessment)",
          "Test your Code with Unittest",
          "Unittest Quizz",
          "Decorators",
          "Decorators Quizz",
          "Generators",
          "Generators Practice #1",
          "Generators Practice #2",
          "Generators Practice #3",
          "Let's Review Day 8",
          "Solution - Day 8 Coding Exercises",
          "Day 8 Python Challenge",
          "Day 8 Python Challenge - Solution"
        ],
        "TOTAL PYTHON DAY 9 - PROGRAM A SERIAL NUMBER SEARCH ENGINE WITH PYTHON": [
          "Day 9 Goal: What python skills will you learn today?",
          "Collections Module",
          "Collections Module Practice #1",
          "Collections Module Practice #2",
          "Collections Module Practice #3",
          "OS and Shutil Modules",
          "OS and Shutil Modules Quizz",
          "Datetime Module",
          "Datetime Module Practice #1",
          "Datetime Module Practice #2",
          "Datetime Module Practice #3",
          "Modules to Measure Time",
          "Modules to Measure Time Quizz",
          "Math Module",
          "Math Module Practice #1",
          "Math Module Practice #2",
          "Math Module Practice #3",
          "Re Module",
          "RegEx Practice #1",
          "RegEx Practice #2",
          "RegEx Practice #3",
          "Compress and Decompress Files from Python",
          "Compress and Decompress Files from Python Quizz",
          "Let's Review Day 9",
          "Solution - Day 9 Coding Exercises",
          "Day 9 Python Challenge",
          "Day 9 Python Challenge - Solution"
        ],
        "TOTAL PYTHON DAY 10 - PROGRAM THE GAME 'SPACE INVASION' WITH PYTHON": [
          "Day 10 Goal: What python skills will you learn today?",
          "Create the Screen",
          "Change Title, Icon and Color",
          "Add the Player",
          "Move the Player",
          "Controlling the Movement",
          "Setting Limits to the Movement",
          "Create Enemy",
          "Moving the Enemy",
          "Add a Background Image",
          "Bullets",
          "Bullet Movement",
          "Detect Collisions",
          "Add Enemies",
          "Show Score",
          "Add Music and Sounds",
          "Game Over",
          "Let's Review Day 10"
        ]
      },
      "requirements": [
        "A computer with internet connnection",
        "Eagerness to make a jump in your career and gladly learn something every day"
      ],
      "description": "Learn PYTHON Programming in 16 days\nOur intensive program was designed for you to learn and practice, in a 16-day study schedule:\nEach day you will create a real and complete program using Python\nEach new concept includes a downloadable PDF so you have everything at hand\nEach video has a theoretical introduction and a practical real world demonstration\nEach lesson comes with 3 coding exercises for you to practice what you have learned\nEach topic ends with a quiz to reinforce what you've learned\n\n\nYour Python Programming learning path is divided into 3 parts:\nDay 1 to Day 6 = Basic Python Developer training. Learn the fundamental concepts of Python to become a robust programmer with a firm foundation.\nDay 7 to day 9 = Advanced Python Phase. Enter Object Oriented Programming (OOP), to create agile, robust, efficient, repeatable, and maintainable programs.\nDay 10 onwards: Evolve to Python Expert. You are already an advanced Python programmer, and the time has come to learn about its main real-world applications. You'll dive into areas of development such as:\nGames\nGraphical Interfaces\nWeb Scraping\nArtificial Intelligence\nWeb Development\nData Science\nFacial Recognition\nMachine Learning\nand much (much) more.\n\n\nWhy learn Python from us?\nWe are Phil Ebiner and Federico Garay, and we are Best Seller instructors, with top ratings on Udemy. We have created many of the best-selling courses worldwide, that are related to programing languages, graphic & visual design, and other very useful resources for software creators.\nPhil Ebiner is a world-renowned and acclaimed instructor. His more than 2.5 million students have learned skills ranging from programming to photography, and he has taken online teaching to a new level.\nFederico Garay has helped more than 150,000 people achieve life-changing learning. His C#, VBA and Pandas/Python programming courses led many students to achieve that dream job or that much deserved promotion.\n\n\nDon't take our word. What are the students of this Python Developer Course saying?\n\"This program is perfect, the classes well explained and the teachers transmits encouragement and very professional above all, after taking the course I am quite confident to learn more and continue my way in the world of programming and video games.\" (Ares Xavier Aren)\n\n\n\"So far I have found it to be an excellent course, quite detailed, but I am not surprised because I have taken another course before with them, and the truth is that you learn because you learn, some of the best teachers I have seen who are really interested in making the subject clear. As soon as I saw these teachers taught this subject, I did not hesitate to buy it...\" (Erika Raquel Gutiérrez Aguilar)\n\n\n\"As a novice I wanted to learn programming to have another hobby, but how these guys explains it, how they teaches it, how they knows what they are saying, is convincing me to turn it into a real profession\" (Carlos David Villamarin Marrugo)\n\n\n\n\nWhy should you learn PYTHON Programming?\nPython is one of the most sought-after languages in the world. Because of its simplicity, ductility and flexibility, it has become the language of choice. Its instructions are as close as possible to the human language, which makes it easier to learn, and this makes it ideal for people who are just starting out in the world of programming.\nIn addition to being simple, it is powerful: with a few lines of code you can perform tasks that in other programming languages would take hundreds of lines, and this considerably increases your productivity.\nOn the other hand, it is one of the most versatile programming languages in existence, and can be used in many different fields. That is to say, it allows you to program from video games to websites and mobile applications.\n\n\nReasons NOT to take this course\nWe can't think of any. But if you want to take the course RISK-FREE, remember that you have Udemy's 100% money back guarantee within 30 days. We are not worried, because we know you're going to love Total Python.\n\n\nThis is your starting point to explore this interesting field, which you may never have dared to tackle before. This is your chance. In just two days you will overcome all your fears and be ready to go for the most sought-after (and best-paid) programming languages on the planet.\n\n\nDo you dare to start this exciting adventure that will change your life right now? We are waiting for you in lecture #1.\nPhil & Fede",
      "target_audience": [
        "Beginners with no prior knowledge of Python",
        "Initiates who wish to push their skills to the maximum",
        "Advanced Python users who want to apply it in specific areas of development",
        "Programmers of other languages who want to include Python in their CVs",
        "Entrepreneurs who want to create their own applications for their businesses",
        "Dreamers who want to turn their lives around and said, \"I'm going to be a programmer, where do I start?\""
      ]
    },
    {
      "title": "Data Structures and Algorithms: In Depth DSA using C#",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-in-depth-using-c-sharp/",
      "bio": "Learn C# Data Structures, Algorithms (DSA) with Animated Examples, includes Dynamic Programming, Backtracking etc...",
      "objectives": [
        "Understand Complexity of Algorithms ie Time and Space they take at runtime",
        "Learn and compare Algorithms used in Searching and Sorting",
        "Learn different Data Structures and how to use them in applications",
        "Learn how to Code and Implement various data structures and algorithms in C#"
      ],
      "course_content": {
        "Course Overview": [
          "Course Outcomes & Curriculum",
          "Why we Need Data Structures ?",
          "Why Learn Algorithms ?",
          "Abstract Data Type (ADT)",
          "Visual Studio C# : Execution Environment"
        ],
        "Analysis of Algorithms": [
          "Time Complexity",
          "Order of Growth",
          "Asymptotic Analysis",
          "Big-Oh Notation",
          "Big Omega Notation",
          "Big Theta Notation",
          "Performance Summary",
          "Space Complexity",
          "Analysis of Algorithms"
        ],
        "Recursion and Analysis of Recursive Functions": [
          "How Recursion Works ?",
          "Lab: Iteration Vs Recursion - Implementation",
          "Time Complexity of Recursion - Recurrence Relation",
          "Recurrence Relation - Another example",
          "Tail and Head Recursion",
          "Tree Recursion",
          "Indirect Recursion",
          "Sum of N Natural Numbers",
          "Lab: Sum of N Numbers - Implementation",
          "Factorial",
          "Lab: Factorial - Implementation"
        ],
        "Searching Algorithms": [
          "Linear Search Algorithm",
          "Lab: Linear Search - Implementation",
          "Binary Search Iterative Algorithm",
          "Lab: Binary Search using Iterations - Implementation",
          "Binary Search Recursive Algorithm",
          "Lab: Binary Search using Recursion - Implementation"
        ],
        "Sorting Algorithms": [
          "Sorting Introduction",
          "Stable and Unstable Sorting",
          "Selection Sort - How does it Work ?",
          "Selection Sort - Algorithm and Analysis",
          "Lab: Selection Sort - Implementation",
          "Insertion Sort - How does it Work ?",
          "Insertion Sort - Algorithm and Analysis",
          "Lab: Insertion Sort - Implementation",
          "Bubble Sort - How does it Work ?",
          "Bubble Sort - Algorithm and Analysis",
          "Lab: Bubble Sort - Implementation",
          "Shell Sort - How does it Work ?",
          "Shell Sort - Algorithm and Analysis",
          "Lab: Shell Sort - Implementation",
          "Merge Sort - How does it Work ?",
          "Merge Sort - Algorithm",
          "Merging - Algorithm",
          "Merge Sort - Complexity Analysis",
          "Lab: Merge Sort - Implementation",
          "Quick Sort - How does it Work ?",
          "Quick Sort - Algorithm",
          "Quick Sort - Complexity Analysis",
          "Lab: Quick Sort - Implementation",
          "Summary of Complexities - Sorting Algorithms"
        ],
        "Linked List": [
          "Why do we use Linked List ?",
          "Creating Node of Linked List",
          "Playing with the links of Linked List",
          "How to Create Linked List ?",
          "Displaying or Traversing Linked List",
          "Lab: Creating and Displaying Linked List - Implementation",
          "Insert Element at the Beginning of Linked List",
          "Lab: Insert Element at the Beginning of Linked List - Implementation",
          "Insert Element Anywhere in between the Linked List",
          "Lab: Insert Element Anywhere in Between the Linked List - Implementation",
          "Delete Element at Beginning of Linked List",
          "Lab: Delete Element at Beginning of the Linked List - Implementation",
          "Delete Element at End of Linked List",
          "Lab: Delete Element at End of Linked List - Implementation",
          "Delete Element Anywhere in between Linked List",
          "Lab: Delete Element Anywhere in between Linked List - Implementation",
          "Searching Element in Linked List",
          "Lab: Searching the Linked List - Implementation",
          "24. Exercise Solution Inserting Elements in Sorted Order"
        ],
        "Circular Linked List": [
          "What is Circular Linked List ?",
          "Creating Circular Linked List",
          "Traversing Circular Linked List",
          "Lab: Creating and Displaying Circular Linked List - Implementation",
          "Insert Element at the Beginning of Circular Linked List",
          "Lab: Insert Element at the Beginning of Circular Linked List - Implementation",
          "Insert Element Anywhere in between the Circular Linked List",
          "Lab: Insert Element Anywhere in Between the Circular Linked List -Implementation",
          "Delete Element at Beginning of Circular Linked List",
          "Lab: Delete Element at Beginning of the Circular Linked List - Implementation",
          "Delete Element at End of Circular Linked List",
          "Lab: Delete Element at End of Circular Linked List - Implementation",
          "Delete Element Anywhere in between Circular Linked List",
          "Lab: Delete Element Anywhere in between Circular Linked List - Implementation"
        ],
        "Doubly Linked List": [
          "What is Doubly Linked List ?",
          "Creating Node of Doubly Linked List",
          "Playing with links of Doubly Linked List",
          "Creating Doubly Linked List",
          "Traversing Doubly Linked List",
          "Lab: Creating and Displaying Doubly Linked List - Implementation",
          "Insert Element at the Beginning of Doubly Linked List",
          "Lab: Insert Element at the Beginning of Doubly Linked List - Implementation",
          "Insert Element Anywhere in between the Doubly Linked List",
          "Lab: Insert Element Anywhere in Between the Doubly Linked List - Implementation",
          "Delete Element at Beginning of Doubly Linked List",
          "Lab: Delete Element at Beginning of the Doubly Linked List - Implementation",
          "Delete Element at End of Doubly Linked List",
          "Lab: Delete Element at End of Doubly Linked List - Implementation",
          "Delete Element Anywhere in between Doubly Linked List",
          "Lab: Delete Element Anywhere in between Doubly Linked List - Implementation"
        ],
        "Stacks": [
          "What is Stack Data Structure ?",
          "Stacks using Arrays",
          "Lab: Stacks using Arrays - Implementation",
          "Stacks using Linked List",
          "Lab: Stacks using Linked List - Implementation"
        ],
        "Queues": [
          "What is Queue Data Structure ?",
          "Queues using Arrays",
          "Lab: Queues using Arrays - Implementation",
          "Queues using Linked List",
          "Lab: Queues using Linked List - Implementation",
          "What are Double Ended Queues",
          "Lab: Double Ended Queues using Linked List - Implementation"
        ]
      },
      "requirements": [
        "Some prior programming experience is required in any programming language",
        "Basic knowledge of C# is needed"
      ],
      "description": "This course will help you in better understanding of the basics of Data Structures and how algorithms are implemented in C#. This course consists of Videos which covers the theory concepts + implementation in C#.\n\n\nThere’s tons of concepts and content in this course:\nBasics of data structures & Algorithms\nAnalysis of Algorithms (Big O, Time and Space complexity)\nRecursion & Analysis of Recursive Algorithms\nSearching Algorithms\nSorting Algorithms\nLinked List\nStacks\nQueues\nBinary Trees\nBinary Search Trees\nBalanced Binary Search Trees\nPriority Queues and Heaps\nHashing\nGraphs\nGraph Traversal Algorithms\nFollowed by Advanced Topics of Algorithms:\nSets and Disjoint Sets\nDivide and Conquer Approach - Introduction\nDivide and Conquer - Binary Search\nDivide and Conquer - Finding Maximum and Mininum\nDivide and Conquer - Merge Sort\nDivide and Conquer - Quick Sort\nDivide and Conquer - Selection Algorithm\nDivide and Conquer - Strassens Matrix Multiplication\nDivide and Conquer - Closest Pair\nDivide and Conquer - Convex Hull\nGreedy Method - Introduction\nGreedy Method - Knapsack Problem\nGreedy Method - Job Sequencing with Deadlines\nGreedy Method - Mininum Cost Spanning Tree (Prim's & Kruskal's Algorithms)\nGreedy Method - Optimal Storage on Trees\nGreedy Method - Optimal Merge Pattern\nGreedy Method - Single Source Shortest Path (Dijkstra's Algorithm)\nDynamic Programming - Introduction\nDynamic Programming - Multistage Graphs\nDynamic Programming - All Pairs Shortest Path\nDynamic Programming - Single Source Shortest Path\nDynamic Programming - Optimal Binary Search Trees\nDynamic Programming - 0/1 Knapsack Problem\nDynamic Programming - Reliability Design\nDynamic Programming - Travelling Salespersons Problem\nBacktracking - Introduction\nBacktracking - n-Queesn Problem\nBacktracking - Sum of Subsets Problem\nBacktracking - Graph Coloring Problem\nBacktracking - Hamiltonian Cycles Problem\nBacktracking - 0/1 Knapsack Problem\nBranch & Bound - Introduction\nBranch & Bound - n-Queens Problem\nBranch & Bound - Job Sequencing Problem\nBranch & Bound - 0/1 Knapsack Problem\n\n\nAgain, each of these sections includes detailed videos tutorial.",
      "target_audience": [
        "Anyone who wants to learn Data Structures and Algorithms using C#"
      ]
    },
    {
      "title": "Swift 5 Programming For Beginners",
      "url": "https://www.udemy.com/course/swift-programming/",
      "bio": "Learn to Code Swift 5 with Mac's Xcode Playgrounds or Linux or Windows. make iOS 12 iPhone Apps or Command Line Tools",
      "objectives": [
        "What's New in Swift 5",
        "Installing Swift via Mac, Linux or Windows",
        "How to make an iPhone App",
        "Swift Fundamentals",
        "Object Oriented Programming in Swift",
        "Intermidiate Swift Concepts",
        "Downloadble Source Code",
        "Over 20+ Coding Challenges"
      ],
      "course_content": {},
      "requirements": [
        "Nothing. This course is for a complete beginner on any computer"
      ],
      "description": "Have you ever wanted to try out programming but didn't know where to start? Have you previously tried to learn Swift but got fed up with incomplete YouTube videos and poorly written tutorials? Or are you looking to move your code from Swift 4 to 5?\nTHEN THIS IS THE COURSE FOR YOU!\nIn my Swift 5 course, I will walk you through all the essential information you need to write Swift code. I'm a self-taught programmer so I know what it feels like to start from scratch. I care about your learning, but even more importantly... I care about you!\nWhat is Swift?\nSwift is a programming language that allows you to write software for iPhones, iPads, Macs, Apple Watches, Apple TVs, desktops, servers, or anything else that runs code! Swift is great for new programmers because it is very intuitive, it continues to evolve as Apple adds new features, it is relatively easy to catch software bugs compared to other languages, and you can see your results immediately by running code in a Playground.\nIn 2014, Apple announced Swift, along with a 500-page manual explaining how this brand-new language worked. So I immediately jumped into that manual and within three days I created the internet's first Swift course! Since then, Swift has always been my favorite language to teach and I love how it keeps evolving! I have now taught over 200,000 students how to code with Swift, and I'm excited to have you join us. It's going to be a lot of fun :) Also, Swift is open source and so you can now take this course even if you are on a Linux or Windows computer!\nCome learn what's new in Swift 5 and gain a new skill! See you inside!",
      "target_audience": [
        "Students Interested in Learning Swift 5"
      ]
    },
    {
      "title": "VB . NET with VS 2017 and Windows Forms",
      "url": "https://www.udemy.com/course/mastervbdotnet/",
      "bio": "With Early OOP, Connections to C# and the .NET Framework Source Code",
      "objectives": [
        "Learn how to work with events",
        "Learn Basic Graphical Interface Design",
        "Learn Visual Basic . NET",
        "Learn How to Build DLL's",
        "Learn how to control program flow",
        "Learn about the .NET Framework source code",
        "Learn how to build a text editor with saving, opening and printing and other functions",
        "Learn how C# powers the .NET Framework and how VB relates",
        "Learn the practical benefits of polymorphism",
        "Learn how to use the memory window",
        "Learn how to use a variety of looping structures in a practical context",
        "Please read the course curriculum to see everything the course has to offer"
      ],
      "course_content": {},
      "requirements": [
        "Ability to download and install Visual Studio 2017 (100% free)"
      ],
      "description": "Most Important Thing: Please take the time to watch the free preview videos, so you can be sure my style of presentation, the pace of presentation, and the overall feel of the course are truly what you are looking for.\n\nWho should join:\n0. This is a course for those who are willing to push themselves. It's not a \"basic\" introduction that gives an overly simplified perspective on VB. In places, this code connects to the .NET framework, which is a professional level code base written in C#.  My promise is simple: take this course, and you'll discover details not taught in any other course.  Speaking from experience, I can tell you that it is through consistent, daily effort, and I don't mean little effort, but wholehearted effort, that one makes progress when it comes to these technical subjects. That's what years of struggling have taught me.\n1. This course uses the latest preview version of Visual Studio 2017\n2.  This course jumps into aspects of object-oriented programming early, so you can see real VB as soon as possible.\na. This does not mean that every aspect of OOP is covered immediately\nb. It just mentions enough OOP to see what's needed to make reasonable progress\n3. This course provides detailed explanations, so please be sure you enjoy fine detail before enrolling\n4. If you are looking for fast, superficial explanations, and five minutes videos, this course will NOT help you\n5.  There are videos on what happens in your computer memory and how the .NET Framework and C# connect to VB . NET\n6. When I delve into the .NET Framework source code, you will also see C# in operation, and therefore the code will be complex.\n7. Clear, crisp audio done with a studio microphone\n8. Review questions are now embedded directly into the videos at different points, and there are many of them in the videos\n9. You will not see videos on things like printing 1,2,3,4,5 using a loop because this has little practical value\n10. You will see more practical videos on things like using loops to read files/write files\n11. The videos are straightforward code examples, with no talking head or distracting graphics\n12. Some of my explanations step through the code line by line using the debugger,  so if you are impatient, this likely will not work for you\n13. There is a text editor project on the bottom\n14. You also learn about the practical implications of polymorphism and interfaces\n15. I also show you how to use a variety of features in Visual Studio 2017\n16. You can adjust the playback speed on the player very easily to 0.5, 0.75, 1.25,1.5 and 2 times the regular speed so you can learn at a pace that truly works for you\nWho Should Not Join:\n1. People who want to learn VB . NET through console programs\n2. Those who are not ready to be exposed to object-oriented programming\n3. People who want five-minute videos would not be the right fit for this course\n4. People who do not enjoy detailed explanations would not be the right fit for this course\n5. People who do not want to answer review questions would not be the right fit for this course\n6. People who are not willing to do whatever it takes to push their skills higher",
      "target_audience": [
        "Those who are interested in Objected Oriented Programming",
        "Those who are interested in Windows Forms",
        "Do not take this course if you want to study Visual Basic using console programs",
        "Do not take this course if you do not enjoy detailed explanations",
        "Do not take this course if you do not enjoy videos that are 13 minutes on average"
      ]
    },
    {
      "title": "Introduction to Programming Crash Course + Python Primer",
      "url": "https://www.udemy.com/course/programmingintro/",
      "bio": "Launch your career with basics of programming and software development for beginners and learn Python basics",
      "objectives": [
        "Understand basic programming concepts and tools like IDEs and text editors",
        "Edit sample code and test code in an IDE",
        "Use print functions, variables, conditions, arrays, loops, and functions",
        "Learn about skills and techniques to develop your programming skill set and get a job",
        "Plan, write, and debug simple coding projects in Python"
      ],
      "course_content": {},
      "requirements": [
        "None"
      ],
      "description": "\"He was so thorough and detailed with his explanation. Even a year 8 child could relate with his examples and teaching. Wish I could give more stars.\" -Kingsley\n\"Amazingly easy with resources easy to follow & practice on even for complete beginners\" -Wannoruddinrasol\n\n\nIf you need to get a basic understanding of programming quickly and clearly, this is the course for you. We will use real examples of python and java code that you can try on your own. But the content here is applicable to many different programming languages.\nThis course will teach you the following:\nWhat is programming? And which programming language should I learn?\nWhat is an IDE and how does it help us write code?\nHow can we use pseudocode to plan a project?\nHow can I use AI to write, debug, and document code?\nUsing print statements to produce output to the console\nUnderstanding errors and how to effectively debug code\nHow can I use basic arithmetic operators and variables in my code?\nHow can I use Git and GitHub for collaboration and version control?\nUsage of conditional statements such as if/else\nUsing Switch statements to evaluate multiple conditions without multiple if/else statements\nHow to use arrays to contain multiple values\nCreating loops and functions to carry out repeated tasks\nAs a bonus, this course now also includes an introduction to Python!\nAre you brand new to Python? Are you a beginner programmer? Have you found that many of the training resources out there use complex technical jargon that make it difficult to understand the basic concepts? If you need to get a working knowledge of Python quickly and clearly, this is the course for you.\nThis course answers the questions:\nHow do I install Python and start writing code using Anaconda and Jupyter Notebook?\nWhat are the key skills that I must have to write basic Python code?\nHow do I use print functions, loops (while, for), variables, and conditional (else/if) statements in my code?\nWhat are common errors and how can I easily test and debug my code?\nI have taught hundreds of thousands of students across a variety of platforms, and I think anyone who needs to understand programming will love this course. Most lectures in this course are 5 - 10 minutes long. This course gives you an understanding of the most critical knowledge areas of programming.",
      "target_audience": [
        "Programming beginners, management employees, or anyone who needs to understand programming basics"
      ]
    },
    {
      "title": "Digital Signal Processing (DSP) From Ground Up™ in C",
      "url": "https://www.udemy.com/course/digital-signal-processing-dsp-from-ground-uptm-in-c/",
      "bio": "Practical DSP in C : FFT, Filter Design, Convolution, IIR, FIR, Hamming Window, Linear Systems, Chebyshev filters etc",
      "objectives": [
        "Be able to develop the Convolution Kernel algorithm in C",
        "Be able able to develop the Discrete Fourier Transform (DFT) algorithm in C",
        "Be able to develop the Inverse Discrete Fourier Transform (IDFT) algorithm in C",
        "Be able to develop the Fast Fourier Transform (FFT) algorithm in C",
        "Be able to perform spectral analysis on ECG signals in C",
        "Be able to design and develop Windowed-Sinc filters in C",
        "Be able to design and develop Finite Impulse Response (FIR) filters in C",
        "Be able to design and develop Infinite Impulse Response (IIR) filters in C",
        "Be able to develop the FFT Convolution algorithm in C",
        "Be able to develop the First Difference algorithm in C",
        "Be able to develop the Running Sum algorithm in C",
        "Be able to develop the Moving Average filter algorithm in C",
        "Be able to develop the Recursive Moving Average filter algorithm in C",
        "Be able to develop signal statistical algorithms in C",
        "Be able to build passive Low-pass and High-pass filters",
        "Be able to build Modified Sallen-Key filters",
        "Be able to build Bessel, Chebyshev and Butterworth filters",
        "Understand all about Linear Systems and their characteristics",
        "Understand how to synthesize and decompose signals",
        "Understand the relationship between the delta function and the Impulse response",
        "Be able to plot signals with gnuplot",
        "Be able to give a lecture on Digital Signal Processing (DSP)",
        "Be able to suppress noise in signals"
      ],
      "course_content": {
        "Set up": [
          "Setting up an Integrated Development Environment (IDE)",
          "Overview of CodeBlocks",
          "Downloading gnuplot",
          "Installing gnuplot",
          "Overview of gnuplot"
        ],
        "Getting started with gnuplot": [
          "Plotting signals with gnuplot",
          "Plotting multiple signals in the same window"
        ],
        "Signal Statistics and Noise": [
          "Signal Statistics and Noise",
          "Mean and Standard Deviation",
          "Coding : Developing the Signal Mean algorithm",
          "Coding : Computing the Signal Mean",
          "Coding : Developing the Signal Variance algorithm",
          "Coding : Developing the Signal Standard Deviation algorithm"
        ],
        "Quantization and The Sampling Theorem": [
          "Nyquist Theorem ( Sampling Theorem )",
          "The Passive Low-Pass Filter",
          "The Passive High-Pass Filter",
          "The Active Filter",
          "The Bessel, Chebyshev and Butterworth filters"
        ],
        "Linear Systems and Superposition": [
          "Notice",
          "Introduction to Linear Systems",
          "Understanding Superposition",
          "Impulse and Step Decomposition"
        ],
        "Convolution": [
          "Introduction to Convolution",
          "The Convolution Operation",
          "Examinging the Output of Convolution",
          "The Convolution Sum Equation",
          "A Closer look at the Delta function",
          "Coding : Developing the Convolution algorithm (Part I )",
          "Coding : Developing the Convolution algorithm (Part I I)",
          "Coding : Developing the Convolution algorithm (Part III)",
          "Coding : Developing the Convolution algorithm (Part IV)",
          "The Running Sum and First Difference",
          "Coding : Developing the Running Sum algorithm"
        ],
        "Fourier Transsform": [
          "Introduction to Fourier Analysis",
          "The DFT Engine",
          "Understanding Forward and Inverse DFT",
          "Code : Developing the DFT algorithm (Part I)",
          "Code : Developing the DFT algorithm (Part II)",
          "Code : Developing the DFT algorithm (Part III)",
          "Coding : Developing the Inverse DFT algorithm (Part I)",
          "Coding : Developing the Inverse DFT algorithm (Part II)",
          "Coding : Developing the Inverse DFT algorithm (Part III)",
          "Coding : Computing the DFT and IDFT of an ECG signal (Part I)",
          "Coding : Computing the DFT and IDFT of an ECG signal (Part II)",
          "Coding : Identifying the frequencies present in the DFT plot",
          "Symmetry between Time domain and frequency domain -Duality",
          "Polar Notation",
          "Coding : Rectangular notation to the polar notation ( Part I)",
          "Coding : Rectangular notation to the polar notation ( Part II)"
        ],
        "Complex Numbers": [
          "The Complex Number System",
          "Polar Representation of Complex Numbers",
          "Euler's Relation",
          "Representation of Sinusoids",
          "Representing Systems"
        ],
        "Complex Fourier Transform": [
          "Introduction to Complex Fourier Transform",
          "Mathematical Equivalence",
          "The Complex DFT Equation",
          "Comparing Real DFT and Complex DFT",
          "Coding : Developing the Complex DFT equation (Part I)",
          "Coding : Developing the Complex DFT equation (Part II )"
        ],
        "Fast Fourier Transform (FFT)": [
          "An Overview of how FFT works.",
          "Understanding the complexity of calculating DFT directly",
          "How the Decimation -in-Time FFT Algorithm works"
        ]
      },
      "requirements": [
        "Having basic C programming skills is a plus"
      ],
      "description": "With a programming based approach, this course is designed to give you a solid foundation in the most useful aspects of Digital Signal Processing (DSP) in an engaging and easy to follow way. The goal of this course is to present practical techniques while avoiding  obstacles of abstract mathematical theories. To achieve this goal, the DSP techniques are explained in plain language, not simply proven to be true through mathematical derivations.\nStill keeping it simple, this course comes in different programming languages and hardware architectures so that students can put the techniques to practice using a programming language or hardware architecture  of their choice. This version of the course uses the C programming language.\n\n\nBy the end of this course you should be able develop the Convolution Kernel algorithm in C, develop the Discrete Fourier Transform (DFT) algorithm in C, develop the Inverse Discrete Fourier Transform (IDFT) algorithm in C, design and develop Finite Impulse Response (FIR) filters in C, design and develop Infinite Impulse Response (IIR) filters in C, develop Windowed-Sinc filters in C, build Modified Sallen-Key filters,  build Bessel, Chebyshev and Butterworth filters, develop the Fast Fourier Transform (FFT) algorithm in C , even give a lecture on DSP and so much more. Please take a look at the full course curriculum.",
      "target_audience": [
        "Engineering Students",
        "C Developers",
        "Embedded Systems Engineers",
        "Computer Engineering students",
        "Hobbyists",
        "Embedded Systems Instructors"
      ]
    },
    {
      "title": "Python from the beginning in Sinhala - Python මුල සිට සරලව",
      "url": "https://www.udemy.com/course/python-from-the-beginning-in-sinhalese/",
      "bio": "වෘත්තීයමය පරිගණක මෘදුකාංග ඉංජිනේරුවෙක්ගෙන්ම programming ඉගෙන ගන්න.",
      "objectives": [
        "Programming with Python from the beginning - Python මුල සිට සරලව",
        "Create a small project with Python - පයිතන් මගින් කුඩා project එකක් නිර්මාණය කිරීම"
      ],
      "course_content": {
        "Welcome": [
          "Welcome"
        ],
        "Introduction to Programming": [
          "Introduction to Programming",
          "Quiz on Programming"
        ],
        "Setting up the environment": [
          "Setting up",
          "Install Python",
          "Setup an IDE",
          "Hello World"
        ],
        "Data Types and Variables": [
          "Data Types",
          "Variables and Operators",
          "Type Conversion",
          "Data Types Quiz"
        ],
        "Data Structures": [
          "Introduction",
          "Lists",
          "Dictionaries",
          "Sets",
          "Tuples",
          "Slicing",
          "Summary",
          "Data Structures"
        ],
        "Conditions": [
          "Conditions",
          "Quize on Conditions"
        ],
        "Loops": [
          "Introduction",
          "For Loop",
          "While Loop",
          "Break and Continue",
          "Mini Project - Get Min, Max",
          "Iterating Data Structures",
          "Get Min and Max"
        ],
        "Functions/Methods": [
          "Defining a method",
          "Default Parameter Values",
          "Named Arguments",
          "Packed and Keyword Args",
          "Return",
          "Quiz on Methods"
        ],
        "Comprehension": [
          "List Comprehension",
          "Conditional Comprehension",
          "Comprehension on other data structures",
          "Comprehension"
        ],
        "Generators": [
          "Generators",
          "Quiz on Generators"
        ]
      },
      "requirements": [
        "Basic understanding of computers - පරිගණක ගැන මූලික දැනුම",
        "Computer to code - පරිගණකයක්",
        "An internet connection - අන්තර්ජාල සබදතාවයක්",
        "Egerness to learn - ඉගෙනීමට ආශාව"
      ],
      "description": "ඔබත් පරිගණක ක්‍රමලේඛනය (computer programming) ආරම්භ කිරීමට කැමැත්තෙන් සිටී නම් මෙම පාඨමාලාව ඉතා හොඳ ආරම්භයකි.\n\n\nමෙම පාඨමාලාවේදී Python නම් පරිගණක භාෂාව මුල සිටම ඉගැන්වේ. ඔබට අවශ්‍ය වන්නේ පරිගණක ගැන මූලික දැනුමක් සහ විශේෂයෙන්ම ඉගෙන ගැනීමට ඇති ආසාව සහ උනන්දුවයි.\n\n\nපයිතන් යනු වර්ථමානයේ ඉතා බහුලව භාවිතා වන පරිගණක භාෂාවකි. එමෙන්ම යම් කාර්යයක් සඳහා ඉතා පහසුවෙන් ක්‍රමලේඛයක් ලියා ගැනීමට හැකි වීම එහි ඇති ප්‍රධානම වාසියකි. එනිසා බොහෝ ආයතන වලින් පයිතන් ඉංජිනේරුවන් බඳවා ගැනීම සුලභය.\n\n\nමෙම පාඨමාලාව අවසානයේදී Python පරිගණක භාෂාව ගැන මනා දැනුමක් ඔබ සතු වනු ඇති අතර වැඩි දුර ඉගෙනුම සඳහා අවශ්‍ය වන වැඩිදුර කියවීම අදාල වීඩියෝ එකෙහි විස්තරය තුල අඩංගු වී ඇත. නමුත් ශිෂ්‍යයෙක් වශයෙන් ඕනෑම පර්ගණක භාෂාවක් ඉගෙන ගැනීමට ඔබ අමතර කාලයක් වැය කිරීමට සිදු වනු ඇත. නැතිනම් මෙහි පැහැදිලි කරන සංකල්ප කටපාඩම් කිරීමට සිදු වනු ඇත. එමෙන්ම යම් error එකක් ආ විට එය අන්තර්ජාලයේ සොයි පිළියමක් සොයා ගැනීමට හැකි විය යුතුයි. එය ද මෘදුකාංග ඉංජිනේරුවෙක් හට තිබිය යුතු හැකියාවකි!\n\n\nමෙහි පාඨමාලා ගාස්තුව කෙරෙහි මා සතුව ඇති බලපෑම අවමය. යම් හෙයකින් ආර්ථික අපහසුතා නිසා මෙම පාඨමාලාව මිලදී ගත නොහැකි නම්, කරුණාකර පණිවිඩයක් මගින් දැනුම් දෙන්න. එවිට හැකි තරම් උපකාරයක් කිරීමට උත්සහ කරන්නෙමි.\n\n\nNote:\nThis course is taught in Sinhala language, NOT in English. If you want to go to my English course, please visit my profile.",
      "target_audience": [
        "Anyone who want to learn Python programming - Python ඉගෙන ගැනීමට කැමති සැම"
      ]
    },
    {
      "title": "Hello Python 3 Programming for Kids & Beginners",
      "url": "https://www.udemy.com/course/hello-python-programming-story-1/",
      "bio": "Just updated for 2023! Master the fundamentals of Python while working on various use cases in easy steps.",
      "objectives": [
        "The students could understand Python Basics"
      ],
      "course_content": {
        "Hello Python: Story 1": [
          "Course Introduction",
          "Chapter 1: Introduction to Python Programming",
          "Chpater 2: Operating on Variables",
          "Chapter 3: Strings and String Variables",
          "Chapter 4: Lists",
          "Chapter 5: Tuples and Maps"
        ],
        "Hello Python: Story2": [
          "Chapter 1: Turtle Power…Cowabunga!",
          "Chapter 2: Making Decisions is not always Tough",
          "Chapter 3: Loops! You can say that Again!",
          "Chapter 4: Functions - Reduce, Reuse, Recycle!",
          "Chapter 5: Get some Objects for your Classes"
        ],
        "Hello Python: Data Science & Exploratory Data Analysis (EDA)": [
          "Exploratory Data Analysis (EDA) of Super Store Sales with Python",
          "Chapter 2: How to Set Up Data Science Environment",
          "Chapter 3: Data Exploration",
          "Chapter 4: Data Cleaning",
          "Chapter 5: Descriptive Statistics",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A willingness to learn and practice"
      ],
      "description": "Just updated for 2023! We have confirmed the all code of this course in 2022.\n\n\nThis course is designed to help students and programming enthusiasts who are just beginning to learn programming.  The goal is help learners get a better grasp of concepts of programming, along with a little bit of fun.\nStudents will follow Sophia and her brother Jacob, as Sophia is introduced to the world of Python programming. Jacob, the elder sibling, is a programming engineer at an IT company and Sophia is just a curious teenager enthralled by the realm of coding and eager to be an IT engineer herself, just like her brother.\nSophia is excited to learn how to code in Python after her brother tells her that that if she learns how to code, she can create interactive animations and even create her own games. He also lets her in on some other benefits of coding.\n\n\nHe teaches her every single detail, even how to download python from the Internet, how to install it and how to write simple and helpful programs. Jacob lets his sister learn hands-on by letting her do a lot of the coding tasks herself.\nThis course will provide students with a fun way to learn coding skills. The concepts are explained in such a simple fashion, that even a child can easily learn to code.\nAt the end of the course, students will be able to do simple calculations, make lists and learn how programming can be put to practical use . More importantly, students will come to realize that there is no reason to be afraid of coding. In fact, anyone can code, as long as they have the desire to learn.\n\n\nProducer: Animate U, Japan\nWriter: Nahid Akhter, Bangladesh\nMale Voice Talent: Jason Wright, the United States\nFemale Voice talent: Jessica Geffen, the United States\nAnimator: Svitlana Skrypka, Ukraine",
      "target_audience": [
        "Anyone who wants to learn to Python"
      ]
    },
    {
      "title": "Python for Beginners - Go from Java to Python in 100 Steps",
      "url": "https://www.udemy.com/course/learn-python-programming-for-java-programmers/",
      "bio": "Learn Python Programming using Your Java Skills. For Beginner Python Programmers.",
      "objectives": [
        "You will Acquire ALL the Python Skills needed to TRANSITION into Analytics, Machine Learning and Data Science Roles",
        "You will Acquire ALL the SKILLS to demonstrate an EXPERTISE with Python Programming in Your Job Interviews",
        "You will USE all your JAVA SKILLS and LEARN to write awesome PYTHON Programs very QUICKLY",
        "You will Learn Python the MODERN WAY - Step By Step - With 200 HANDS-ON Code Examples",
        "You will Understand the BEST PRACTICES in Writing High Quality Pythonic Code",
        "You will Solve a Wide Range of Hands-on Programming EXERCISES with Python",
        "You will learn about a wide variety of Python Data Structures - List, Set, Dictionary and Tuples",
        "You will Learn to Write AWESOME Object Oriented Programs with Python",
        "You will be introduced to a variety of Python Built-in Modules",
        "You will learn Exception Handling and Functional Programming with Python"
      ],
      "course_content": {
        "Introduction": [
          "Step 00 01 - Introduction-to-the-Course",
          "Step 00 02 - Introduction-to-the-Course-Guide",
          "Step 00 03 - Installing Python 3 and Launch Python Shell",
          "Step 00 04 - Installing PyCharm"
        ],
        "Getting Started With Python": [
          "Step 01 - Hello World in Python",
          "Step 02 - Hello World in Python - Making Sense",
          "Step 03 00 - Importing-Java-Code-into-Eclipse",
          "Step 03 01 - Your First Python Method",
          "Step 04 - Your First Python Method - A Few Tips",
          "Step 05 - Passing Parameters and Your First Python Loop",
          "Step 06 - Exercises with Python Methods and For Loop",
          "Step 07 - Python For Loop - Puzzles",
          "Step 08 - Writing Java Example in Python - Part 1",
          "Step 09 - Writing Java Example in Python - Part 2",
          "Step 10 - Returning values from methods",
          "Step 11 - Introduction to Basic Data Types in Python",
          "Step 12 - Python is Strongly Typed and Dynamic Language",
          "Step 13 - Numberic Operators and Functions in Python",
          "Step 14 - Boolean Operators in Python",
          "Step 15 - Python Text Data Type - String",
          "Step 16 - Data Type Conversion - Puzzles",
          "Step 17 - Strings are immutable",
          "Step 18 - There is no seperate Character data type",
          "Step 19 - String module",
          "Step 20 - Exercise - is_vowel, print lower case and upper case characters",
          "Step 21 - String - Exercises and Puzzles"
        ],
        "Conditionals and Loops": [
          "Step 22 - Overview of Conditionals and Loops in Python",
          "Step 23 - Shortcut If Statement",
          "Step 24 - If Else and Elif in Python",
          "Step 25 - If Elif Exercise - Java to Python",
          "Step 26 - Conditionals - Java vs Python",
          "Step 27 - For Loop - A Review",
          "Step 28 - For Loop - A few examples",
          "Step 29 - While Loop in Python - Introduction and Exercise",
          "Step 30 - Implementing Do While with While"
        ],
        "Object Oriented Programming with Python": [
          "Step 31 - OOPS in Python - An overview",
          "Step 32 - Your First Python Class - Empty Class and Instances",
          "Step 33 - Instance Variables and Constructors in Python",
          "Step 34 - Exercise - Part 1 - Add an attribute",
          "Step 35 - Exercise - Part 2 - Create a new Class",
          "Step 36 - Constructors in Python - A few tips",
          "Step 37 - Adding instance methods",
          "Step 38 - OOPS Under the Hood",
          "Step 39 - Inheritance in Python",
          "Step 40 - Multiple Inheritance in Python",
          "Step 41 - Every class extends object",
          "Step 42 - Creating an Abstract Class",
          "Step 43 - Representing an Interface using Abstract Class",
          "Step 44 - Polymorphism and Duck Typing",
          "Step 45 - Static Variables at Class Level",
          "Step 46 - Static Methods in Python"
        ],
        "Python Data Structures": [
          "Step 47 01 - Introduction to Data Structures in Python",
          "Step 47 01 - Operations on List Data Structure",
          "Step 48 - Puzzles with Strings Lists",
          "Step 49 - List Slicing",
          "Step 50 - List Sorting, Looping and Reversing",
          "Step 51 - List as a Stack and Queue",
          "Step 52 - List with a custom class - Country and representation",
          "Step 53 - List with a custom class - Part 2 - sorting, max and min",
          "Step 54 - List Comprehension",
          "Step 55 - Introduction to Set",
          "Step 56 - Introduction to Dictionary",
          "Step 57 - Puzzles with Data Structures",
          "Step 58 - Tuples"
        ],
        "Exception Handling in Python": [
          "Step 59 - Part 1 - Overview of Exception Handling",
          "Step 59 - Part 2 - Exceptions in Python",
          "Step 60 - Exception Handling with try except else finally block",
          "Step 61 - Throwing Custom Exceptions in Python"
        ],
        "Functional Programming": [
          "Step 62 - Functions are First Class Citizens in Python",
          "Step 63 - Introduction to Lambdas",
          "Step 64 - Filtering a list using filter method",
          "Step 65 - Mapping a List with map method",
          "Step 66 - Reduce a List to one result value",
          "Step 67 - Combining map, filter and reduce - Example 1",
          "Step 68 - Combining map, filter and reduce - Example 2"
        ],
        "Built-In Python Modules": [
          "Step 69 - Tip 1 - Using Predefined Python Modules",
          "Step 70 - Tip 2 - Math Module and Decimal Class",
          "Step 71 - Tip 3 - Statistics Module - find mean and median",
          "Step 72 - Tip 4 - Collections Module - deque for Queue and Stack",
          "Step 73 - Tip 5 - Date Module"
        ],
        "Python Tips": [
          "Step 74 - Tip 1 - Loop - Getting Index Element",
          "Step 75 - Tip 2 - Enum in Python",
          "Step 76 - Tip 3 - Methods and Arguments - Basics",
          "Step 77 - Tip 4 - Methods and Arguments - Keyword Arguments",
          "Step 78 - Tip 5 - Methods and Arguments - Unpacking Lists and Dictionaries",
          "Step 79 - Tip 6 - PEP8 - Python Style Guide",
          "Step 80 - Tip 7 - PEP20 - Zen of Python",
          "Step 81 - Tip 8 - Creating Custom Modules and Using Them",
          "Step 82 - Tip 9 - None",
          "Step 83 - Tip 10 - repr vs str",
          "Step 84 - Tip 11 - No Switch in Python",
          "Step 85 - Tip 12 - Generating Random Values in Python",
          "Step 86 - Tip 13 - Returning Multiple Valus using Tuples",
          "Step 87 - Tip 14 - Implementing Data Classes with namedtuple",
          "Step 88 - Tip 15 - Getters and Setters is Python Anti Pattern",
          "Step 89 - Tip 16 - Implementing Property Decorators",
          "Step 90 - Tip 17 - Operator Overloading - Adding and Subtracting amounts",
          "Step 91 - Tip 18 - Operator Overloading - Other Operators",
          "Step 92 - Tip 19 - Comparing equality of objects",
          "Step 93 - Tip 20 - Using greater than and less than to compare objects",
          "Step 94 - Tip 21 - Total Ordering - Simplifying object comparison",
          "Step 99 - Congratulations",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You have an attitude to learn while having fun :)",
        "You have Java Programming Experience and ZERO Experience with Python",
        "We will help you install Python 3 and PyCharm."
      ],
      "description": "Python is one of the most popular programming languages for beginners. Python offers both object-oriented and structural programming features. Learning Python can be an awesome experience.\nLearning Python will open up great options as a Programmer because Python is one of the most requested skills in 2020!\nSo, do you want to be a kickass Python programmer without a lot of effort? Do you have a little bit of Java Programming Experience?\nWhy not use your Java Programming Experience and learn Python Step by Step at F1 Speed?\nI’m Ranga Karanam, the founder of in28minutes and Your Instructor for this awesome course. I’ve designed this Python Programming Masterclass just for you!\nThis Beginner Python Programming Course takes an hands-on Step By Step Approach using more that 100 Code Examples. We use a combination of Python Shell and PyCharm as an IDE to illustrate more than 100 Python Coding Exercises, Puzzles and Code Examples. We convert a number of Java Examples to Python.\n\n\nWHAT OUR LEARNERS ARE SAYING:\n5 STARS - The tutorial remains focused on what was promised in its title. The flow is quiet good and answers (almost) all the thought questions as and when it comes to mind. I feel transition to the lovely python syntax and capabilities, but difficult to start with for a java programmer, have been quiet nicely done in this tutorial. \"Java programmers go for it.\"\n5 STARS - Detailed explanation with good hands-on. Best course for those who know Java and new to python, and want to learn by comparison.\n5 STARS - Very informative course . The instructor does a great job explaining the details. I feel confident that I create Python programs with accepted standard patterns and style now.\n5 STARS - Amazing course - very helpful in transitioning to Python from a Java mindset\n5 STARS - A java developer can quickly go through all the videos without practicing any example[But recommended to do exercises if you have time and not really eager to know python]. Once you complete all the videos, you can come back and start referring/practicing as per your need.\"\n5 STARS - I think it was clearly laid out and well done. Lots of good ideas from an experienced software developer. Will look for more classes. Thank you.\n5 STARS - “Great Course\"\n5 STARS - \"I'm glad I took this course because a lot of projects that I'm working on now contain Python code as part of the project, and I want to understand what the code is doing. The instructor is easy well-organized and easy to follow.\"\n5 STARS - \"In acquiring a new skill when you know an existing one, learning by comparison is the best way. Putting out Java and Python code side-by-side is like a short-circuit, but without the shocks!\"\n\n\nIn about 100 Steps, we explore the most important Python Programming Language Features that every Beginner Python Programmer should know:\nBasics of Python Programming - Expressions, Variables and Printing Output\nPython Conditionals and If Statement\nMethods - Parameters, Arguments and Return Values\nObject Oriented Programming - Class, Object, State and Behavior\nBasics of OOPS - Encapsulation, Inheritance and Abstract Class.\nBasics about Python Data Types\nBasics about Python Built in Modules\nConditionals with Python - If Else Statement, Nested If Else\nLoops - For Loop, While Loop in Python, Break and Continue\nImmutablity of Python Basic Types\nPython Data Structures - List, Set, Dictionary and Tuples\nBasics of Designing a Class - Class, Object, State and Behavior. Deciding State and Constructors.\nIntroduction to Exception Handling - try, except, else and finally. Exception Hierarchy. Throwing an Exception. Creating and Throwing a Custom Exception.\nHere are the complete step by step details of the Java to Python Course:\nGetting Started With Python\nStep 01 -  Hello World in Python\nStep 02 -  Hello World in Python -  Making Sense\nStep 03 00 -  Importing-Java-Code-into-Eclipse\nStep 03 01 -  Your First Python Method\nStep 04 -  Your First Python Method -  A Few Tips\nStep 05 -  Passing Parameters and Your First Python Loop\nStep 06 -  Exercises with Python Methods and For Loop\nStep 07 -  Python For Loop -  Puzzles\nStep 08 -  Writing Java Example in Python -  Part 1\nStep 09 -  Writing Java Example in Python -  Part 2\nStep 10 -  Returning values from methods\nStep 11 -  Introduction to Basic Data Types in Python\nStep 12 -  Python is Strongly Typed and Dynamic Language\nStep 13 -  Numberic Operators and Functions in Python\nStep 14 -  Boolean Operators in Python\nStep 15 -  Python Text Data Type -  String\nStep 16 -  Data Type Conversion -  Puzzles\nStep 17 -  Strings are immutable\nStep 18 -  There is no seperate Character data type\nStep 19 -  String module\nStep 20 -  Exercise -  is_vowel, print lower case and upper case characters\nStep 21 -  String -  Exercises and Puzzles\nConditionals and Loops\nStep 22 -  Overview of Conditionals and Loops in Python\nStep 23 -  Shortcut If Statement\nStep 24 -  If Else and Elif in Python\nStep 25 -  If Elif Exercise -  Java to Python\nStep 26 -  Conditionals -  Java vs Python\nStep 27 -  For Loop -  A Review\nStep 28 -  For Loop -  A few examples\nStep 29 -  While Loop in Python -  Introduction and Exercise\nStep 30 -  Implementing Do While with While\nObject Oriented Programming with Python\nStep 31 -  OOPS in Python -  An overview\nStep 32 -  Your First Python Class -  Empty Class and Instances\nStep 33 -  Instance Variables and Constructors in Python\nStep 34 -  Exercise -  Part 1 -  Add an attribute\nStep 35 -  Exercise -  Part 2 -  Create a new Class\nStep 36 -  Constructors in Python -  A few tips\nStep 37 -  Adding instance methods\nStep 38 -  OOPS Under the Hood\nStep 39 -  Inheritance in Python\nStep 40 -  Multiple Inheritance in Python\nStep 41 -  Every class extends object\nStep 42 -  Creating an Abstract Class\nStep 43 -  Representing an Interface using Abstract Class\nStep 44 -  Polymorphism and Duck Typing\nStep 45 -  Static Variables at Class Level\nStep 46 -  Static Methods in Python\nPython Data Structures\nStep 47 01 - Introduction to Data Structures in Python\nStep 47 02 -  Operations on List Data Structure\nStep 48 -  Puzzles with Strings Lists\nStep 49 -  List Slicing\nStep 50 -  List Sorting, Looping and Reversing\nStep 51 -  List as a Stack and Queue\nStep 52 -  List with a custom class -  Country and representation TODO EDIT\nStep 53 -  List with a custom class -  Part 2 -  sorting, max and min\nStep 54 -  List Comprehension\nStep 55 -  Introduction to Set\nStep 56 -  Introduction to Dictionary\nStep 57 -  Puzzles with Data Structures\nStep 58 -  Tuples\nException Handling in Python\nStep 59 -  Part 1 -  Overview of Exception Handling\nStep 59 -  Part 2 -  Exceptions in Python\nStep 60 -  Exception Handling with try except else finally block\nStep 61 -  Throwing Custom Exceptions in Python\nFunctional Programming\nStep 62 -  Functions are First Class Citizens in Python\nStep 63 -  Introduction to Lambdas\nStep 64 -  Filtering a list using filter method\nStep 65 -  Mapping a List with map method\nStep 66 -  Reduce a List to one result value\nStep 67 -  Combining map, filter and reduce -  Example 1\nStep 68 -  Combining map, filter and reduce -  Example 2\nPython Tips\nStep 69 -  Tip 1 -  Using Predefined Python Modules\nStep 70 -  Tip 2 -  Math Module and Decimal Class\nStep 71 -  Tip 3 -  Statistics Module -  find mean and median\nStep 72 -  Tip 4 -  Collections Module -  deque for Queue and Stack\nStep 73 -  Tip 5 -  Date Module\nStep 74 -  Tip 1 -  Loop -  Getting Index Element\nStep 75 -  Tip 2 -  Enum in Python\nStep 76 -  Tip 3 -  Methods and Arguments -  Basics\nStep 77 -  Tip 4 -  Methods and Arguments -  Keyword Arguments\nStep 78 -  Tip 5 -  Methods and Arguments -  Unpacking Lists and Dictionaries\nStep 79 -  Tip 6 -  PEP8 -  Python Style Guide\nStep 80 -  Tip 7 -  PEP20 -  Zen of Python\nStep 81 -  Tip 8 -  Creating Custom Modules and Using Them\nStep 82 -  Tip 9 -  None\nStep 83 -  Tip 10 -  repr vs str\nStep 84 -  Tip 11 -  No Switch in Python\nStep 85 -  Tip 12 -  Generating Random Values in Python\nStep 86 - Tip-13 Returning Multiple Values using Tuples v02\nStep 87 -  Tip 14 -  Implementing Data Classes with namedtuple\nStep 88 -  Tip 15 -  Getters and Setters is Python Anti Pattern\nStep 89 -  Tip 16 -  Implementing Property Decorators\nStep 90 -  Tip 17 -  Operator Overloading -  Adding and Subtracting amounts\nStep 91 -  Tip 18 -  Operator Overloading -  Other Operators\nStep 92 -  Tip 19 -  Comparing equality of objects\nStep 93 -  Tip 20 -  Using greater than and less than to compare objects\nStep 94 -  Tip 21 -  Total Ordering -  Simplifying object comparison",
      "target_audience": [
        "You have prior experience with Java and You would want want to learn Python Programming",
        "You are a Beginner in Python Programming and would want to learn more about Python"
      ]
    },
    {
      "title": "The Complete Python Programming Course: Beginner to Advanced",
      "url": "https://www.udemy.com/course/python-complete/",
      "bio": "Learn Python with projects covering game & web development, web scraping, MongoDB, Django, PyQt, and data visualization!",
      "objectives": [
        "Install Python on Windows, Linux and Mac",
        "Setup an IDE",
        "Use programming fundamentals to build a calculator",
        "Use advanced Python concepts to code a role playing game",
        "Find additional packages to expand the functionality of Python",
        "Install essential modules",
        "Code an app for web scraping",
        "Create a NoSQL database using PyMongo",
        "Create web apps using Webpy",
        "Django web server setup",
        "Program a web browser using PyQt",
        "Use Matplotlib and Pandas for data visualization",
        "Develop a speech recognition app using machine learning"
      ],
      "course_content": {
        "Introduction to Programming with Python": [
          "Introduction to Python",
          "Mac/Linux installation",
          "Windows setup",
          "Interpreted vs. compiled programming languages",
          "Creating and running our first Python script",
          "Choosing an integrated development environment (IDE)",
          "How to share your code with us and get help with errors",
          "Section 1 Quiz"
        ],
        "Programming Basics": [
          "Basic types - numbers",
          "Basic types - strings",
          "Basic string manipulation",
          "Basic types - Boolean operators",
          "Lists (arrays)",
          "Dictionaries",
          "Variables",
          "Built-in functions",
          "User-defined functions",
          "Adding arguments to a function",
          "Default arguments",
          "Keyword arguments",
          "Infinite arguments",
          "Return values from functions",
          "If, elif, else statements",
          "For/while loops",
          "Importing libraries into a script",
          "Project #1 - Building a calculator"
        ],
        "Advanced Python Concepts": [
          "PEP guidelines",
          "Breaking out of while loops",
          "Continuing while loops",
          "Classes & objects",
          "Instance variables",
          "Class & instance variables",
          "How to add comments to your code",
          "Importing modules from relative paths"
        ],
        "Project #2 - RPG Battle Script": [
          "RPG setup",
          "Creating our character",
          "Additional utility classes",
          "Enemy instantiation",
          "Using magic",
          "Turning our magic into a class",
          "Healing our player",
          "Adding items",
          "Implementing different item types",
          "Better HP view",
          "Adding members to our party",
          "Working HP bars",
          "White space in HP & MP",
          "Enemy HP bar",
          "Multiple enemies pt.1",
          "Multiple enemies pt.2",
          "Enemy artificial intelligence"
        ],
        "Additional Python Resources": [
          "Reading and writing files in Python",
          "JavaScript Object Notation (JSON)",
          "Using Virtualenv to create a virtual environment",
          "The Python Package Index (PyPI)"
        ],
        "Essential Modules - Requests": [
          "Introduction to Requests",
          "HTTP GET variables",
          "Pillow the image processing library (PIL)",
          "Posting data",
          "Posting JSON",
          "Headers"
        ],
        "Project #3 - Web Scraper": [
          "Beautiful Soup",
          "Parsing our soup",
          "Directional navigation",
          "Image scraper",
          "Improvements to our web scraper"
        ],
        "Project #4 - Getting Started with PyMongo": [
          "Introduction and setup",
          "Inserting documents",
          "Bulk inserts",
          "Counting documents",
          "Multiple find conditions",
          "Datetime and keywords",
          "Indexes"
        ],
        "Project #5 - Web Development Project Using Web.py": [
          "Introduction and simple example",
          "HTML templates",
          "Building a MVC",
          "Importing static files",
          "Setting up a register form",
          "Posting data to web.py",
          "Creating users",
          "Hashing passwords",
          "Login logic",
          "Web.py sessions",
          "Logout functionality",
          "Posting microblogs",
          "Retrieving post objects",
          "User settings and updating Mongo",
          "Relative datetimes",
          "Making our post dates pretty",
          "Adding post comments",
          "Image uploads and avatars"
        ],
        "Project #6 - Django Web Framework": [
          "Django project setup",
          "Creating our blog app",
          "Setting up the admin site",
          "URLs and views",
          "HTML templates",
          "Dynamic template data",
          "Single post page",
          "Implementing Bootstrap",
          "Static files",
          "Template inheritance",
          "Post images, multi-level templates, and more"
        ]
      },
      "requirements": [
        "No previous programming experience necessary",
        "Access to a personal computer or equivalent system",
        "Internet access to download the necessary software"
      ],
      "description": "If you would like to get started programming with Python, and are interested in the field of data science or coding, you are going to LOVE this course! Learn Python as we cover the basics of programming, advanced Python concepts, coding a calculator, essential modules, creating a \"Final Fantasy-esque\" RPG battle script, web scraping, PyMongo, WebPy development, Django web framework, GUI programming, data visualization, machine learning, and much more! With over 18 hours of HD video tutorials, this course was designed to fully immerse you in the Python language. So it is useful for both beginner and veteran programmers!\n\n\n10 Coding Projects in the course:\n• Simple calculator\n• RPG battle script\n• Web scraper\n• PyMongo database\n• Webpy web app\n• Django website\n• PyQt calculator GUI\n• PyQt web browser\n• Data visualization with matplotlib and Pandas\n• Speech recognition & AI\n\n\nTopics covered in the course:\n• Programming Basics\n• Python Fundamentals\n• JavaScript Object Notation (JSON)\n• Web Scraping\n• PyMongo (MongoDB)\n• Web Development\n• Django Web Framework\n• Graphical User Interface (GUI) Programming (PyQt)\n• Data Visualization\n• Machine Learning\n\n\nStill not sold? Check out a few of the awesome reviews this course has received from customers:\n• \"Awesome and very useful course! It gives us a lot of aspects about programming with Python and plenty of information and options to further continue learning this programming language or improving our skills.“\n• \"I am glad I picked this as my first Python course. I had a lot of fun and learned a lot! The course is great for anyone looking for a program with projects and interesting stuff.\"\n• \"Excellent course, it covers everything from basics to developing logical thought process! Best fit for intermediate/pro level programmers to pick up rapidly and start implementing.\"",
      "target_audience": [
        "This course was designed for students with little to no programming experience",
        "Developers familiar with Python can take their knowledge to the next level!",
        "Students who go through the course can expect to walk away with a comprehensive understanding of Python"
      ]
    },
    {
      "title": "The Modern GraphQL Bootcamp (with Node.js and Apollo)",
      "url": "https://www.udemy.com/course/graphql-bootcamp/",
      "bio": "Learn how to build GraphQL applications using Node.js. Includes Prisma v1, authentication, Apollo Client, and more!",
      "objectives": [
        "Learn and master GraphQL by building real-world Node applications.",
        "Use Prisma v1 to store and access data from a production database.",
        "Use Apollo Client to communicate with GraphQL from your web app.",
        "Learn how to deploy and test your GraphQL applications.",
        "Test your skills and gain confidence by completing more than 80 coding challenges.",
        "Get access to a free 110-page PDF guide with lecture notes, code samples, and documentation links."
      ],
      "course_content": {
        "Course Overview": [
          "Welcome to the Class!",
          "Grab the PDF Guide",
          "Why GraphQL?",
          "Installing Node.js and VSC"
        ],
        "GraphQL Basics: Schemas and Queries": [
          "Section Intro: GraphQL Basics: Schemas and Queries",
          "What is a Graph?",
          "GraphQL Queries",
          "Nested GraphQL Queries",
          "Setting up Babel",
          "ES6 Import/Export",
          "Creating Your Own GraphQL API",
          "GraphQL Scalar Types",
          "Live Reload for GraphQL-Yoga",
          "Creating Custom Types",
          "Operation Arguments",
          "Working with Arrays: Part I",
          "Working with Arrays: Part II",
          "Relational Data: Basics",
          "Relational Data: Arrays",
          "Comment Challenge: Part I",
          "Comment Challenge: Part II",
          "Comment Challenge: Part III"
        ],
        "GraphQL Basics: Mutations": [
          "Section Intro: GraphQL Basics: Mutations",
          "Creating Data with Mutations: Part I",
          "Creating Data with Mutations: Part II",
          "The Object Spread Operator with Node.js",
          "The Input Type",
          "Deleting Data with Mutations: Part I",
          "Deleting Data with Mutations: Part II",
          "A Pro GraphQL Project Structure: Part I",
          "A Pro GraphQL Project Structure: Part II",
          "Updating Data with Mutations: Part I",
          "Updating Data with Mutations: Part II"
        ],
        "GraphQL Basics: Subscriptions": [
          "Section Intro: GraphQL Basics: Subscriptions",
          "GraphQL Subscription Basics",
          "Setting up a Comments Subscription",
          "Setting up a Posts Subscription",
          "Expanding the Posts Subscription for Edits and Deletions",
          "Expanding the Comments Subscription for Edits and Deletions",
          "Enums"
        ],
        "Database Storage with Prisma v1": [
          "Section Intro: Database Storage with Prisma",
          "What is Prisma?",
          "Prisma Mac Setup",
          "Prisma Windows Setup",
          "Prisma Ubuntu Setup",
          "Prisma 101",
          "Exploring the Prisma GraphQL API",
          "Add Post type to Prisma",
          "Adding Comment Type to Prisma",
          "Integrating Prisma into a Node.js Project",
          "Using Prisma Bindings",
          "Mutations with Prisma Bindings",
          "Using Async/Await with Prisma Bindings",
          "Checking If Data Exists Using Prisma Bindings",
          "Customizing Type Relationships",
          "Modeling a Review System with Prisma: Set Up",
          "Modeling a Review System with Prisma: Solution"
        ],
        "Authentication with GraphQL": [
          "Section Intro: Authentication with GraphQL",
          "Adding Prisma into GraphQL Queries",
          "Integrating Operation Arguments",
          "Refactoring Custom Type Resolvers",
          "Adding Prisma into GraphQL Mutations",
          "Adding Prisma into GraphQL Update Mutations: Part I",
          "Adding Prisma into GraphQL Update Mutations: Part II",
          "Adding Prisma into GraphQL Subscriptions",
          "Closing Prisma to the Outside World",
          "Allowing for Generated Schemas",
          "Storing Passwords",
          "Creating Auth Tokens with JSON Web Tokens",
          "Logging in Existing Users",
          "Validating Auth Tokens",
          "Locking Down Mutations (Users)",
          "Locking Down Mutations (Posts and Comments)",
          "Locking Down Queries: Part I",
          "Locking Down Queries: Part II",
          "Locking Down Individual Type Fields",
          "Fragments",
          "Cleaning up Some Edge Cases",
          "Locking Down Subscriptions",
          "Token Expiration",
          "Password Updates"
        ],
        "Pagination and Sorting with GraphQL": [
          "Section Intro: Pagination and Sorting with GraphQL",
          "Pagination",
          "Pagination Using Cursors",
          "Working with createdAt and updatedAt",
          "Sorting Data"
        ],
        "Production Deployment": [
          "Section Intro: Production Deployment",
          "Creating a Prisma Service",
          "Prisma Configuration and Deployment",
          "Exploring the Production Prisma Instance",
          "Node.js Production App Deployment: Part I",
          "Node.js Production App Deployment: Part II",
          "Node.js Production Environment Variables"
        ],
        "Apollo Client and Testing GraphQL": [
          "Section Intro: Apollo Client and Testing GraphQL",
          "Setting up a Test Environment",
          "Installing and Exploring Jest",
          "Testing and Assertions",
          "Apollo Client in the Browser: Part I",
          "Apollo Client in the Browser: Part II",
          "Configuring Jest to Start the GraphQL Server",
          "Testing Mutations",
          "Seeding the Database with Test Data",
          "Testing Queries",
          "Expecting GraphQL Operations to Fail",
          "Supporting Multiple Test Suites and Authentication",
          "Testing with Authentication: Part I",
          "Testing with Authentication: Part II",
          "GraphQL Variables: Part I",
          "GraphQL Variables: Part II",
          "Testing Comments",
          "Testing Subscriptions",
          "Test Case Ideas"
        ],
        "Creating a Boilerplate Project": [
          "Section Intro: Creating a Boilerplate Project",
          "Creating a Boilerplate Project",
          "Using the Boilerplate Project"
        ]
      },
      "requirements": [
        "Development: A basic understanding of Node and JavaScript is required.",
        "Hardware: A computer with an internet connection (Windows, macOS, or Ubuntu)."
      ],
      "description": "Do you want to learn GraphQL and keep your Node.js skills up-to-date and relevant?\nGraphQL is quickly changing how Node.js developers write their APIs and backend applications. It offers a much-needed replacement to the traditional REST HTTP API. It’s by far the most exciting change we’ve seen to Node.js development in a long time. Goodbye Express. Hello GraphQL.\nWho should learn GraphQL? Anyone building backend applications with Node.js!\nIn this class, you’ll learn how to use GraphQL to replace the standard Express HTTP API, as well as support features like authentication, real-time applications, and more. GraphQL can be used with any client that has internet access, whether it’s a web app, mobile app, or server-side application.\nBig and small companies, from Twitter and Facebook to Yelp and Twitch, are switching from frameworks like Express to GraphQL.\nI designed this class to give you the skills and real-world experience needed to build and launch your own GraphQL apps.\nTo kick the class off, we’ll answer a few important questions. What is GraphQL? Why is it useful? How is GraphQL going to help me build better applications with Node.js?\nNext, you’ll master the fundamentals of GraphQL by building out a blogging application. You’ll learn about GraphQL schemas, data types, queries, mutations, subscriptions, and many other fantastic GraphQL features.\nFrom there, you’ll set up advanced features like authentication, database storage, production deployment, automated test suites, and more.\nThroughout the course you’ll learn how to:\nModel your application data using schemas\nCreate queries and subscriptions allowing clients to access data in the database\nCreate mutations allowing clients to create and change data in the database\nQuery and change your data from the browser by making requests with Apollo Client\nWork with the Prisma ORM (v1) to communicate with your database via a GraphQL API\nDeploy your GraphQL applications to production\nSecure your application data with an authentication system\nWrite an automated test suite for your application\nLearn GraphQL by Writing Code\nThis course was designed to be interactive, with more than 80 challenges along the way to get you writing code and solving problems on your own. This will give you the real-world skills and experience needed to write GraphQL applications once you’re done with the class.\nEverything you need comes in one easy-to-use package.\nThere’s no need to worry whether you’re learning the right skills to land that GraphQL job or launch that GraphQL app. I’ve mapped out everything you need to know in an interactive, easy-to-follow package designed to get you up and running in a couple of weeks.\nGet access to fast support if you get stuck.\nThere’s nothing worse than getting stuck ten hours into a course and not getting the help you need to continue. Getting stuck is part of the learning process. That’s why I’m here to answer every single question.\nI guarantee this is the most up-to-date and engaging GraphQL course available, and it comes with a Udemy 30-day money-back guarantee.\nThe first videos are available as a free preview, so I’ll see you inside the class!\n- Andrew Mead",
      "target_audience": [
        "This course is for anyone who wants to learn how to build advanced Node applications.",
        "This course is for anyone interested in keeping their Node skills up-to-date."
      ]
    },
    {
      "title": "C# .NET with MS SQL Complete Beginner to Master 2025",
      "url": "https://www.udemy.com/course/net-core-with-ms-sql-beginner-to-expert/",
      "bio": "Learn API Development with C# .NET and MS SQL Server from Mac, Linux or Windows!",
      "objectives": [
        "Understand core concepts of software development in C# that extend beyond any one language",
        "Understand how to read and write code that runs powerful software tools and REST APIs with C# and .NET Core",
        "Understand how to read and write SQL Queries with T SQL for MS SQL Server and Azure SQL",
        "Learn how to use powerful cross-platform tools for writing code (VS Code), querying databases (Azure Data Studio), and testing REST APIS (Postman)",
        "Provision Azure resources for production C# .NET Core 7 Applications and Azure SQL Databases",
        "Use .NET Core to build powerful Data Driven applications and APIs"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Install List",
          ".NET 9",
          "Install",
          "Mac/Linux Install MS SQL Server - Notes",
          "Mac/Linux Install MS SQL Server",
          "Hotkeys and Macros",
          "How To Learn More Easily"
        ],
        "C# Crash Course - Basics": [
          "Basics Theory Pt 1",
          "Console App Theory",
          "Creating a Console App",
          "Basic Theory Pt 2",
          "Console.WriteLine",
          "Nuget package source and C# extensions in VS Code",
          "Nuget package source and C# Extensions",
          "Console App Template",
          "Console.WriteLine",
          "Variables Notes",
          "Variables",
          "Variables",
          "Data Structures",
          "Data Structures",
          "Data Structures",
          "Operators and Conditionals",
          "Operators and Conditionals",
          "Variables, Operators and Conditionals",
          "Basic Theory Pt 3",
          "Conditional Statements",
          "Conditional Statements",
          "Loops",
          "Loops",
          "Methods",
          "Methods",
          "Scope",
          "Conditional Statements, Loops and Methods"
        ],
        "SQL Basics": [
          "MacOS and Linux Users",
          "SQL - Basics Pt1",
          "SQL - Basics Pt2",
          "SQL Basics"
        ],
        "C# Crash Course - Intermediate": [
          "Intermediate Theory",
          "Models",
          "String Property Defaults",
          "Namespaces",
          "Dapper Definitions and Planning",
          "Computer SQL Script",
          "MacOS and Linux Users",
          "Database Connections",
          "Windows Connection Troubleshooting",
          "Error converting varchar to numeric",
          "Dapper Pt 1",
          "Dapper Definitions",
          "Dapper Pt 2",
          "Dynamic Classes and Methods",
          "Entity Framework Definitions and Planning",
          "Entity Framework",
          "Config",
          "Intermediate Theory Pt 2",
          "File Read and Write",
          "JSON Definitions and Planning",
          "JSON",
          "AutoMapper Versioning",
          "Model Mapping",
          "Async Await Theory",
          "Tasks",
          "Async Methods"
        ],
        "SQL Seed": [
          "Skipping Crash Course",
          "MacOS and Linux Users",
          "SQL Seed"
        ],
        "SQL Intermediate": [
          "SQL - Intermediate",
          "SQL Intermediate"
        ],
        "API - Basics": [
          "API Basics Theory",
          "Getting Started",
          "Running the API",
          "Startup.cs",
          "First Custom Controller",
          "launchSettings.json",
          "CORS Code",
          "CORS",
          "MacOS and Linux Users",
          "InvariantGlobalization Bug",
          "AutoMapper Versioning",
          "Database Connection",
          "Http Launch",
          "User Models",
          "Users Controller",
          "Put & Post",
          "DTOs",
          "Namespaces",
          "User Delete",
          "EF Setup",
          "EF User Controller",
          "AutoMapper",
          "Beginner Assignment",
          "Beginner Assignment Solution Dapper",
          "Beginner Assignment Solution Entity Framework"
        ],
        "API - Intermediate": [
          "API Intermediate Theory",
          "UserRepository",
          "IUserRepository",
          "Repository Peripherals",
          "Auth Table SQL",
          "Auth Settings and Models",
          "Password Managment",
          "Login",
          "Registration With Details",
          ".NET 8 Note - IConfiguration.GetSection()",
          "JWT Token Creation",
          "JWT Token Validation",
          "Helpers",
          "Posts Model",
          "Posts Controller",
          "Posts Search"
        ],
        "Stored Procedures": [
          "Stored Procedure Creation",
          "Parameters",
          "Nullable Parameters",
          "Join and Outer Apply",
          "Temp Table",
          "User Upsert",
          "User Upsert Peripherals",
          "User Delete",
          "Posts Get",
          "Post Upsert",
          "Post Delete",
          "Auth"
        ],
        "API - Advanced": [
          "API Advanced Theory",
          "Stored Procedures Script",
          "UserComplete Setup and Get",
          "UserComplete Upsert",
          "User Delete",
          "Posts Get",
          "My Posts",
          "Post Upsert",
          "Post Delete",
          "Auth Register",
          "Reset Password",
          "Login",
          "Cleanup",
          "User Controller DynamicParameters",
          "Advanced Assignment",
          "Advanced Assignment Solution",
          "Reusable SQL"
        ]
      },
      "requirements": [
        "Must have basic computer skills, and a desire to become a great developer",
        "Must have a computer to follow the course on",
        "May be easier with some Powershell or Bash shell experience, but we will cover the necessities"
      ],
      "description": "Up to date and compatible with the latest versions of C# and .NET\nAll resources are available to all operating systems - follow along from Windows, Linux or MacOS. - (Includes special install instructions for MS SQL Server for Linux and Mac**)\n\n\"The course was a great match! Dominic is a very good teacher who explains this subject in a fun and engaging manner.\" - Risto\n\"As a seasoned programmer looking to refresh my knowledge in C#, this walkthrough was very clear and concise. I could have been a complete beginner and still understood.\" - Max\n\"The knowledge gained from this course is very valuable. The pacing is great and the explanations are very clear. I think the most important thing about this course is the instructor - he has such good energy, keeping you engaged.\" - Chris\n\n\nLearning Paths:\n\nThere are 3 different Modular pieces of this course that can be mixed and matched to fit your learning needs, depending on what you already know and what you want to learn.\n\n\nC# Basics (and general programming basics)\n.NET Core 9 API Development\nMS SQL Server and Azure SQL\n\n\nIf you are new to programming, or just new to C#, you can get an in depth understanding of basic programming concepts like variable types, data structures, classes and methods in our C# Basics section.\n\n\nIf you already know C# that's great, you can skip over that basics section and start learning how to build powerful REST APIs with .NET Core.\n\n\nIf you already build REST APIs with .NET Core and just want to write cleaner code, learn how to decouple logic, or consolidate endpoints with more dynamic logic - I highly recommend starting with the SQL section, brushing up on Dapper in the Crash course section if you need to, and then checking out the advanced section of the course.\n\n\n(If that sounds complicated and confusing, it won't at all by the time you are done with the course)\n\n\nThis course is also set up so that the SQL section is entirely optional, although I do think it is very useful and I highly recommend it. As much as I think you would benefit from learning SQL along with C#, I do understand that building REST APIs and writing SQL are two different skills.\n\n\nIf you just want to focus on the API development side of the course, I am happy to be your personal SQL Developer on the side by providing a few scripts you can just drop into Azure Data Studio to get things set up for you in the database, so that you can go through the entire .NET Core part of the course without missing a beat.\n\n\nIf you are new to software development, congratulations on starting your journey to become a developer! I look forward to seeing you inside!\n\n\n\n\"Tried many courses, but I used to get bored/stuck or just had partial understanding. This is one of the best courses. Will recommend this course for anyone learning .NET API development. Using Visual Studio Code, instead of visual studio helped me understand some thing I took for granted and never learned in VS. Also love the fact that you had C# and SQL sections. It was useful for me.\"\n- Abishek\n\"I have gone through about 10 courses on Udemy before this one and I found Dominics course on C# .NET Core to be the best I have gone through yet. It is extensive with many exercises. Dominic while never really holding your hand follows you through the course and explain his design choices and methods so you can understand what you are doing. You will learn a lot from C# fundamentals, MVC design schemes, MS SQL servers, SQL Query Language, Azure. Take your time. It will be well worth it. I recommend this course highly.\"\n- Peter\n\"This is a very in depth course which presented me with many challenges. I have about 1/3rd left to go at this point and usually I like to wait until I've completed things before leaving a review. That said, I decided to just do it now. Dominic's support in answering questions and offering solutions to problems throughout the entirety of this course was amazing. I can't tell you how many courses I've bought to find out there is a dead community, no one to go to with problems, and outdated lectures or assignments that haven't been kept up with. There is none of that here and I greatly appreciate it!\"\n- Emily\n\"My Udemy library is a lot like my Steam library. I've got a lot of courses in there but not many that I've completed. This is one of the few that I've actually finished, and genuinely enjoyed. I knew a little C# going in, and I've done a fair amount of work with SQL in terms of data analysis, but the application layer and dotnet was something of a mystery to me so I wanted to learn more about that. The pace is really good, the delivery is really good and I've really learned a lot. Definitely have the confidence to start expanding out of my comfort zone and experiment with some new projects.\"\n- Lisa\n\"It's been an amazing journey so far, well thought off, clear, simple, and on point. I've been struggling to understand this whole backend concept for about a year now, on and off with different courses until I started your course. You made it so much easier. you are awesome Dominic Tripodi. I will definitely purchase more courses from you\"\n- Holliday\n\"I am Japanese. I took a lecture using the translation function. The video was very easy to understand. Even if there was something I didn't understand, when I asked a question, the instructor gave me an answer immediately. If you are lost in the .net lecture, I recommend it.\"\n- 浩太郎 阿知波\n\"I enrolled in this course as part of a professional transition from traditional WinForms application development to modern web applications, as required by my workplace. I found the course immensely helpful. Dominic's thorough and clear explanations exceeded my expectations, providing deep insights into each topic. I anticipate returning to these videos frequently to continue my learning. Thank you, Dominic, for such a valuable resource!\"\n- Rabin",
      "target_audience": [
        "People who want to start learning how to program",
        "New Programmers who want to learn about API Development",
        "Front End developers looking to learn more about backend APIs and/or Databases",
        "Backend/Full Stack developers who want to learn about .NET Core and/or C#",
        "Backend/Full Stack developers who want to learn about SQL"
      ]
    },
    {
      "title": "Python - The Practical Guide",
      "url": "https://www.udemy.com/course/learn-python-by-building-a-blockchain-cryptocurrency/",
      "bio": "Learn Python from the ground up and use Python to build a hands-on project from scratch!",
      "objectives": [
        "Students can take advanced Python courses and build real projects with it",
        "Students may build upon the Python and Blockchain knowledge gained in this course and start working on their own Blockchain",
        "Students can dive into Web Development or Data Science with Python"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "What is Python?",
          "Join our Online Learning Community",
          "Setting Up Python",
          "Running Python 3 as a Default (on macOS)",
          "Writing our First Python Code",
          "What is the Blockchain?",
          "Course Outline",
          "Python Alternatives",
          "Understanding the Python Versions",
          "How To Get The Most Out Of This Course",
          "Useful Resources & Links"
        ],
        "Diving Into the Basics of Python": [
          "Module Introduction",
          "Understanding the REPL and Data Types",
          "Working with Variables",
          "Working with Numbers",
          "Using Operators",
          "Understanding a \"Special\" Behaviour when Working with Numbers",
          "Working with Strings",
          "Working with Lists",
          "Adding & Removing List Items",
          "Preparing the Blockchain - The Theory",
          "Installing our IDE",
          "Using Functions to Add List Items",
          "Blockchain Theory: Understanding Blocks",
          "Accessing the Last List Item",
          "Adding Arguments to Functions",
          "Understanding the \"return\" Keyword",
          "Using Default Arguments",
          "Working with Keyword Arguments",
          "Using the \"input\" Function",
          "Avoiding Repetitive Code Execution",
          "Understanding the Variable Scope",
          "Exploring the Official Documentation",
          "Adding Comments and Doc Strings",
          "Structuring Multi Line Code in Python",
          "Time to Practice - The Basics",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Working with Loops & Conditionals": [
          "Module Introduction",
          "Understanding Loops - Theory",
          "Creating a \"for\" Loop",
          "Creating a \"while\" Loop",
          "Closing the REPL",
          "Understanding Conditionals - Theory",
          "Adding \"if-else\" to our Blockchain",
          "Working with \"elif\"",
          "Understanding \"break\" & \"continue\"",
          "Improving our Code with Loops & Conditionals",
          "Understanding Boolean Operators - \"is\" & \"in\"",
          "The \"not\" Keyword",
          "Understanding \"and\" and \"or\"",
          "Grouping Conditionals",
          "What About \"switch\" in Python?",
          "Verifying our Blockchain",
          "Blockchain Theory: Understanding Blockchain Verification",
          "Using Conditions inside the \"while\" Loop",
          "Using \"else\" in Loops",
          "Adding the \"range\" Function",
          "Time to Practice - Loops & Conditionals",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Understanding Complex Data Structures": [
          "Module Introduction",
          "Understanding the Required Data Structure for our Blockchain",
          "Working with Iterables",
          "Choosing the Right Datastructure",
          "Transactions with Dictionaries & Tuples",
          "Blockchain Theory: Understanding Transactions",
          "Unpacking the Tuple",
          "Mining Blocks",
          "Hashing Previous Blocks",
          "Understanding List Comprehensions",
          "And What are Dict Comprehensions?",
          "Combining List Comprehensions & \"if\"",
          "Improving the Blockchain Validation Logic",
          "Managing a List of Participants in the Blockchain",
          "Calculating Balances",
          "Rewarding the Miners of our Blockchain",
          "Verifying Transactions",
          "Understanding Reference vs Value Copying",
          "Working with the Range Selector",
          "Understanding Shallow vs Deep Copies",
          "Comparing \"is\" & \"==\"",
          "Diving Deeper Into Iterable Methods",
          "Understanding the \"all\" & \"any\" Functions",
          "Comparing Iterables",
          "Time to Practice - Complex Datastructures",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Working with Functions & Strings": [
          "Module Introduction",
          "Comparing Strings & Lists",
          "Understanding the \"format\" Method",
          "Escaping Characters",
          "Formatting Strings Conveniently with \"f\"",
          "Adding String Formatting to our Project",
          "Understanding the \"map\" Function",
          "Working with Lambda Functions",
          "Reducing Lists",
          "Unpacking Function Arguments",
          "Time to Practice - Functions & Strings",
          "Fixing a Bug",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Working with the Python Standard Library": [
          "Module Introduction",
          "Exploring the Python Standard Library",
          "Importing Packages - Theory",
          "Importing \"hashlib\" to Create a Unique Hash",
          "Blockchain Theory: Understanding Hashes",
          "Using Other Import Syntaxes",
          "The \"Proof of Work\"",
          "Blockchain Theory: Understanding the \"Proof of Work\"",
          "Adding the Proof of Work to our Blockchain",
          "Including the Proof of Work in our Mining Function",
          "Fixing a Hash Order Fault",
          "Splitting Up our Code",
          "Time to Practice - The Standard Library",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Working with Files": [
          "Module Introduction",
          "Handling File Access",
          "Reading Data From a File",
          "Reading Multi-Line Content",
          "Using the \"with\" Block Statement",
          "Adding File Access to our Blockchain",
          "Converting Strings Into Python Objects",
          "Storing Data with Pickle",
          "Comparing Pickle & JSON",
          "Changing the Project Back to JSON",
          "Why we need Proper Error Handling",
          "Time to Practice - Working with Files",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Handling Errors & Debugging": [
          "Module Introduction",
          "Finding Logical Errors with the Debugger",
          "Finding Syntax Errors",
          "Using \"try\" to Find Runtime Errors",
          "Which Errors Should you Handle?",
          "Adding Error Handlers to our Blockchain",
          "Handling Empty File Errors",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Object Oriented Programming": [
          "Module Introduction",
          "What is Object Oriented Programming?",
          "Understanding Classes",
          "Creating a Class",
          "Comparing Classes, Instances & Dictionaries",
          "Understanding Class Attributes",
          "Constructor & Instance Attributes",
          "Printing Classes with Special Methods",
          "Private & Public Attributes",
          "Understanding Inheritance",
          "Planning Blockchain Classes",
          "Adding a \"Block\" Class to the Blockchain",
          "An Issue with Default Arguments",
          "Saving Custom Class Objects via .json",
          "Adding a \"Transaction\" Class",
          "Inheritance in Action",
          "Adding a \"Verification\" Helper Class",
          "Initialising the \"Node\" Class",
          "Turning the Blockchain Into a Class",
          "Adding a \"Node\" Class",
          "Understanding \"Instance\" vs \"Class\" vs \"Static Methods\" & \"Attributes\"",
          "Using \"Static\" & \"Class\" Methods on the \"Verification\" Class",
          "Using Private Attributes in the Blockchain",
          "Properties vs Attributes",
          "Time to Practice - Object Oriented Programming",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Modules": [
          "Module Introduction",
          "Creating Packages - Module Bundles",
          "The \"pycache\" Folder",
          "Module Docstrings",
          "Controlling Exports",
          "Understanding Execution Context & \"__name__\"",
          "Why we Need a Private & Public Key Transaction Protection",
          "Using Anaconda to Install Third Party Packages",
          "Using Virtual Environments",
          "Use Pycryptodome instead of PyCrypto",
          "Generating Keys with a Third Party Package",
          "Connecting the Node & the Wallet",
          "Generating Keys on the Node",
          "Saving & Loading Keys to Files",
          "Creating Transaction Signatures",
          "Adding a Signature to our Transactions",
          "Verifying Signatures",
          "Improving the Verification Logic",
          "Wrap Up",
          "Useful Resources & Links"
        ]
      },
      "requirements": [
        "NO prior programming language is required",
        "You can use whatever operating system you want - macOS, Linux or Windows: It's all covered"
      ],
      "description": "Want to learn Python \"on the job\" whilst building an exciting course project? This course is for you!\nThis is a highly practice-oriented Python course that teaches you Python from scratch - no prior programming experience required!\nPython is THE most trending programming language you can learn these days!\nIt's very popular because it's easy to learn and use, runs on all operating systems and allows you to build a broad variety of programs: Be that web applications, desktop applications, utility scripts or using it for data science and machine learning.\nIn this course, you'll learn Python from scratch - and you'll do so whilst building your own Blockchain and Cryptocurrency. These are of course also highly trending topics and not a lot of people understand what a Blockchain really is. As a nice side-effect, you will know how a Blockchain works once you completed this course. It's an exciting course project that allows you to learn and apply Python to something you know and you can use.\nWhy Python?\nAs written above, Python is both easy-to-use and extremely versatile and powerful at the same time. Certainly not the worst combination. If you check it on Google trends (and compare it to other programming languages), you'll see that it's very popular these days.\nIt's being used by almost any important company - be that Google, Amazon or Facebook. It's used to run web applications, scripts, desktop programs and machine learning algorithms. This course sets the basics for all these use-cases!\nWhy Blockchain?\nI believe that you learn something best if you directly apply it to a real-world project. And the Blockchain technology is an exciting trend which is there to stay. In this course, you'll learn a lot about the core concepts of the Blockchain and you'll see how Python can be used for the many aspects that make up a Blockchain and Cryptocurrency.\nIn my opinion, a perfect course project is challenging, interesting, something you know from real-life but also not overly complex. And that's all the case for the Blockchain! It poses some nice challenges where a lot of different Python features can be used to overcome them. It also is something we hear about all the time and yet no one knows how it works. And we can dive into the core Blockchain concepts without spending 100+ hours working on it.\nWho's teaching you?\nMy name is Maximilian Schwarzmüller and I'm a freelance developer. My focus is on web development but I've been working with Python for many years. It's actually one of the first languages I started with when I was 13. I'm the creator of many 5 star bestseller courses here on Udemy and I love diving into new technologies. That's why I had to dive into this whole Blockchain thing when it became more popular and why I chose it as a project for this course.\nI can't wait to welcome you on board of this course and I hope you'll enjoy it just as much as I did creating it! :-)\nWhat's in the course?\nGreat question! Here's a brief summary:\nA summary of Python and the Blockchain technology\nAll the base Python syntax you need to know (variables, operators, functions, ...)\nLoops and conditional statements\nMore complex data structures like tuples or dictionaries\nA closer look at built-in functions and the standard library Python ships with\nString manipulation\nHow to work with files\nError handling\nDebugging\nObject-oriented programming with classes and inheritance\nInternal & external modules (packages)\nHow to spin up an Http server with the Flask package\nHandling Http requests (sending & receiving)\nAnd more!\nWhat are the course prerequisites?\nNO prior programming knowledge is required\nVery basic knowledge about how a computer works will help you though (but can also be built up whilst you're going through the course)\nIs this course for you?\nIt's for you if\nYou want to get into programming => Python is a great \"first language\" since it's easy to learn and very versatile\nYou want to broaden your horizon => Are you a web developer? Want to learn something new? Here you go!\nYou're interested in Python for web development => This course will teach you Python in general but there are two modules where we'll also dive into web development a bit\nYou're interested in the Blockchain technology => You'll learn the core concepts of it as a side-effect of this course!\nYou know Python but want to practice it => The course project is challenging and taken from real-life - there probably is no better practice\nDoes that sound good to you? I'd be honoured to welcome you in this course! :-)",
      "target_audience": [
        "Anyone interested in learning Python and building a real project with it",
        "Anyone who's interested in learning about the core internals of a blockchain",
        "Beginner developers who want to dive into one of the most trending and popular programming languages"
      ]
    },
    {
      "title": "The Python Programming A-Z Definitive Diploma",
      "url": "https://www.udemy.com/course/the-ultimate-python-programming-a-z-masterclass/",
      "bio": "The Hands-On Guide to Master Modern Python and Data, to Advance your Dev and Data Career in no time!",
      "objectives": [
        "Basic and Advanced Python concepts to become a Rockstar Python Developer",
        "Python tools, keywords, best Practicing, high level descriptions",
        "All bout Variables, Data Types, Literals, Techniques, Importing and Formatting.",
        "Hands-on different types of Operations, Decision Making and Repetitive execution for sequences",
        "Designing Data Structures",
        "The Design of Functional Programs",
        "Object-oriented design Principles",
        "Files Handling, Modules and its Operations",
        "Scientific computing for Data with NumPy",
        "Data Visualization with Matplotlib and pyplot",
        "Using Databases with Python"
      ],
      "course_content": {},
      "requirements": [
        "No prior experience required."
      ],
      "description": "Hi, Welcome to The Python Programming A-Z Definitive Diploma.\nYour complete Guide to Python Programming.\nAlmost Python is currently used for everything in Software Engineering.\nAlthough it is very easy to learn, but, it is very useful and powerful.\nIts fields are so many, and by learning python, it will be very easy for you to get higher Jobs in the largest companies such as Google, Dropbox, Spotify and many more.\nSimply you can do multi scale tasks with python , because it is multipurpose professionally and quickly with fewer lines of code.\nAlso, python works everywhere.\nAmong its most important fields are: data science, machine learning, web application development, desktop application development, cybersecurity, and many other fields that cannot be confined to one video.\nPlus, you can use it on any operating system you use.\nIts programs can be written and executed with any text editor or any ide easily.\nI will help and support you through this step-by-step course. Because the most important thing for me is to help you to get the most out of this course.\n\n\nBy the end of this course you'll be a Professional Python Developer, And you have all the skills that Python experts have. Also, you'll have all the ability to build multi scale apps.\nDevelop Python Apps, Data Analysis, Present and visualize information, Manage Database using Python 3.9. All of that and many more.\n\n\nIn this course, we will start from very easy basic topics such as Variables, Data types, IO Formatting, Operations, Conditional statements, loops, Data Structures, Functions, and many others, then we will move on to advanced topics such as Object Oriented Design,  and also how to deal with Data Science libraries and Modules of all kinds, then we will move on to learn how to use Databases with Python . All of this and more, supported by practical examples.\n\n\nI will be available to assist and support you line by line during this course.\nThis course is carefully prepared, to save you time, and to increase your focus while learning without feeling bored.",
      "target_audience": [
        "New Programmers",
        "Software Engineering Newbies",
        "Python new developers",
        "Python Developers who want to master the new features of modern python v3.9.",
        "Programmers and developers who know other programming language but are new to python",
        "Anyone who wants to dive deeply into Python Programming without wasting time."
      ]
    },
    {
      "title": "The Complete C# Programming Course",
      "url": "https://www.udemy.com/course/the-complete-csharp-programming-course/",
      "bio": "Master C# and .NET Framework - learn with code challenges, exercises, and real-life examples!",
      "objectives": [
        "Learn the fundamentals of C# and .NET Framework",
        "Work with Primitive and Custom Data Types",
        "Debug your code to find and fix bugs that are causing unexpected behavior in your code",
        "Control the flow of code execution by using Conditional Statements (if/else, if/else if/else, switch)",
        "Work with the Console and Manipulate all of its aspects",
        "Effective ways to manipulate strings",
        "How to use loops in many different scenarios",
        "Work with One and Multi dimensional arrays",
        "Work with Lists and learn the difference between Lists and Arrays",
        "Confront and solve difficult problems on your own",
        "Create methods to write less code and improve its readability",
        "Understand and Implement The Best Object Oriented Programming (OOP) Practices",
        "Understand Fields & Properties, The relationship between them and the tidbits of Properties",
        "Create Constructors, Constructors Chaining, Automated Constructors and more",
        "The .this and .base keywords, what is their purpose, when, why and how to use them",
        "Namespaces and how they help us organize our code better",
        "Implementing the 5 Access Modifiers",
        "Understand the Concept behind the 4 Pillars of Object Oriented Programming",
        "Inheritance, Base and Derived Classes",
        "Abstraction, Abstract Classes and Interfaces, when to use which and what is the difference between them",
        "Encapsulation or how to hide your code",
        "Polymorphism, write less and more optimized code",
        "Cohesion & Coupling",
        "Many, many Quality Code Tips and Guidelines throughout the course"
      ],
      "course_content": {},
      "requirements": [
        "Nothing that isn't free! We use Visual Studio Community Edition, and I give a tutorial on how to download and install it",
        "No previous experience with coding is needed",
        "Strong desire to learn, coding requires a lot of time to master it!",
        "Both Windows PC or a Mac can be used with the course, but the course is recorded on Windows"
      ],
      "description": "Last year C# was named one of the most popular languages for mobile development and game development out there!\n\n\n--- Why learn C#?\nC# was designed by Microsoft and is a simple and modern programming language that's incredibly widely used by developers, and used by Microsoft for everything from Windows application development, to web development, and game design.\nSo it's a fantastically useful programming language to use, but how does taking this C# course help you? Well...\nAre you a young developer trying to increase your skill set and make yourself attractive employers?\nAre you an experienced coder looking to change your career path?\nDo you know a bit of C# but really want to hone your C# skills?\nOr perhaps you want to develop your own apps and websites?\nOr build games?! The incredibly popular Unity game engine uses C#!\nIf you answered 'YES!' to any of the above, this course is exactly what you need! Take your C# coding skills from novice to pro, and get the job you want.\n\n\n--- Why this course?\nWith over 20 hours of content, this is the biggest, best and most in-depth course yet from Instructor Tod Vachev.\nAs an instructor Tod has already taught over 70,000+ students to code, and has published a number of highly-rated and best-selling C# courses on Udemy... Tod takes you step-by-step through the fundamentals of C#, using regular challenges and practical exercises to make sure every student enrolled on the course is able to put theory in to practice, and use their C# skills with ease!\nStudents loved his previous courses!\n***** Outstanding course put together by a teacher who knows how to teach well.\n***** Clear communication and beginner friendly without dumbing it down\n***** The course progressively (and logically) builds concept upon concept. The lectures are short and very manageable. Excellent!\n\n\n---Challenges and exercises\nThis is a really hands-on course! Throughout each section you'll complete in-lecture exercises and coding challenges. Experience shows that this is the best way to learn, practice and internalise the fundamentals of C#.\nEach topic has a new challenge, and after you've had a go at completing the exercise/challenge by yourself, the instructor will go through every step of the exercise on screen - giving you tips an tricks as he does so!\nBy the end of the course you'll have the skills and confidence to build your own projects (and more!)\n\n\n--- Is this course for you?\nNo coding experience required, this course takes your from beginner to pro - and (other than enrolling in the course) everything you need to succeed is included in the course!\n\n\nThere’s no better time to become a professional developer, so enroll in the course now and you can start learning C# immediately!\nGood luck!",
      "target_audience": [
        "Beginners - This course is suitable for anyone who wants to learn how to code, no previous experience is required!",
        "Intermediates - Refresh your C# knowledge and learn the latest tips, tricks and methods",
        "Anyone who want to learn Object Oriented Programming and take their coding skills to the next level"
      ]
    },
    {
      "title": "The Complete Python 3 Course: Go from Beginner to Advanced!",
      "url": "https://www.udemy.com/course/learn-python-3-from-beginner-to-advanced/",
      "bio": "Complete Guide to learning how to program in Python. Go from Beginner to Advanced level in Python with coding exercises!",
      "objectives": [
        "Go from Beginner to Advanced in Python Programming by learning all of the basics to Object Orientated Programming.",
        "Gain general knowledge in regard to Python programming language",
        "Write scripts for general productivity tasks",
        "Read and comprehend Python code",
        "Gain knowledge in regard to general programming concepts"
      ],
      "course_content": {},
      "requirements": [
        "Should be willing to learn and treat this as a full course - please take notes and put lessons into practice for maximum benefit.",
        "Only the very basic computer skills are needed",
        "Access to a computer with internet connection."
      ],
      "description": "========================= TESTIMONIALS =========================\n\"Everything is explained perfectly!\" - Mouheb\n\n\"Great Teacher. I like his teaching style, step by step approach, easy to follow him. Lectures is very engaging. Well structured and organized course content\" - Faisal\n\"Overall, this is a very high quality course. Taking the course has *shown* me what is possible even before I thought of searching for it.\" - Kevin\n\"Great course overall! I started off as a complete beginner and feel much more confident about coding with Python\" - Frank S\n\"Great set of Python Tutorials. The instructor walks you through the classes and materials in an easy to understand manor. A++\" - Mirko\n\n\"Just did my first program very early on, which was exciting\" - Chloe\n===============================================================\nIf you want to learn Python to advance your skills, then this is the course for you!\nIf you have no previous knowledge or experience in Python, you will like that the course begins with Python basics. Even if you have some experience in programming in Python, this course can help you learn some new information you had missed before. Each section of the course is linked to the previous one in terms of utilizing what was already learned and each topic is supplied with lots of examples which will help students in their process of learning. Upon the completion of this course, you should be able to write programs that have real-life applications.\nWhat I think is the best about this course is that you can search questions others have had, post your own questions, and get answers to challenges you are currently facing in learning and using Python.  You get paid Python expert technical support in this course here to answer every single question you ask!\nIf you have any suggestions on topics that have not been covered, you can send them via private message. I will do my best to cover them as soon as possible.\nThank you for reading this. I hope to see you in the course soon and I hope you will enjoy your time learning as much as I have!",
      "target_audience": [
        "For people who are new to Python",
        "For Programming Beginners",
        "Anyone who has always wanted to learn Python",
        "For people looking to transition from another language to Python",
        "This is not intended for advanced Python Programmers",
        "People of any age, gender or country but must understand Business English",
        "No prior programming knowledge is needed."
      ]
    },
    {
      "title": "The Complete Regular Expressions Course with Exercises",
      "url": "https://www.udemy.com/course/the-complete-regular-expressions-course-with-exercises-for-beginners/",
      "bio": "Learn All Regular Expressions for PHP Javascript Python Java Ruby Perl and Unix systems with exercises from scratch.",
      "objectives": [
        "Easily work with Complete Syntax of Regular Expressions",
        "Have better understanding of Regex topics.",
        "Create easy and complex regular expressions",
        "Work with any supported Regexp Engine",
        "Increase code Optimization",
        "Proudly stand in Market"
      ],
      "course_content": {
        "Course": [
          "Course",
          "Dont be this guy"
        ],
        "Establishing Environment": [
          "What is Regular Expression",
          "RE Engines",
          "RE Offline Engines",
          "RE Online Engines"
        ],
        "All about Characters": [
          "Basic Syntax",
          "Literal Characters",
          "Modes",
          "Meta Characters",
          "WildCard",
          "Character Set",
          "Character Ranges",
          "Restricting RE",
          "Escaping Meta Characters",
          "Escaping Sets",
          "Ending Chapter"
        ],
        "Quantifiers and Repetitions": [
          "Quantifiers and Repetitions",
          "Limiting Repetition",
          "Greedy Expressions",
          "Lazy Expressions",
          "Greedy Lazy Testing"
        ],
        "Groups": [
          "Groups",
          "Alternation",
          "Nested Alternation",
          "Anchors",
          "Another Anchors Example",
          "Other Alternative Anchors",
          "Word Boundaries"
        ],
        "Advance Topics in Groups": [
          "Capturing and Back-references",
          "Capturing and Back-references Examples",
          "Application",
          "Non Capturing Groups"
        ],
        "Assertions": [
          "Look Around Assertions",
          "Positive Look Ahead Assertions",
          "Positive Look Ahead Assertions Example 1",
          "Positive Look Ahead Assertions Example 2",
          "Negative Look Ahead Assertions with Example",
          "Look Behind Assertions types with Examples",
          "Uni-Codes"
        ],
        "Projects": [
          "All Project Expressions files",
          "Names",
          "Name Exercise",
          "Email",
          "Email Exercise",
          "URLs",
          "Web Address URLs Exercise",
          "IP Addresses",
          "IP Exercise",
          "Dates",
          "Date Exercise",
          "Times",
          "Time Exercise",
          "Postal Codes",
          "ZIP Code Exercise",
          "Credit Crad Numbers",
          "CCN Exercise",
          "Passwords",
          "Password Exercise"
        ],
        "Last": [
          "Bonus Lecture",
          "For more"
        ]
      },
      "requirements": [
        "No Knowledge required of Regular Expressions. This course will teach students everything about Regex from Scratch"
      ],
      "description": "In today’s world we have to deal with a lot of data coming from different sources.  Data from social media , blogs , companies anything you name.   And for a developer its a hell of job for you to work only with relevant data whether you are searching a database, validating user inputs on forms or even in the process of building a website. And this is the place where RE can make your work a lot easy,.\nKnowing Regex, how to use regular expressions effectively is a valuable skill that can quickly take your skill-set to  top. Logic in programming language requires a long coding work but regular expressions can do the same job within 2 to 3 lines. Regular expressions are such an incredibly convenient tool, available across so many languages that most developers will learn them sooner or later.\nRE act like a filter, and they will filter only relevant data which programmer asked for. So, They can save your time, reduce your coding work and increase your productivity.   That's why, RE is a must skill for back-End developers and Data Scientists,\nIn this course we will look into RE as a whole because they are supported in every Programming language and Unix based systems.\nCourse Road-Map\nSetting up the environment\nRegular expression basic syntax\nworking with simple text, characters, numbers\nQuantifiers and Repetitions\nGreedy and Lazy Approaches\nLearning Groups\nAdvance Topics\nGroup Capturing\nBack-References\nAssertions with all types\nAll Exercise files\nProject\n\n\nRegular Expressions for Names\nRegular Expressions for Email\nRegular Expressions for Website URL\nRegular Expressions for matching IP Addresses\nRegular Expressions for Dates\nRegular Expressions for  Times\nRegular Expressions for  Postal Codes\nRegular Expressions for matching credit card numbers\nRegular Expressions for creating strong Passwords\n\n\nIf you are a complete beginner or want to take your skills at the next level this is the right course for you.\nSo, learn RE and tell others that you know how to work with texts easily better  than anyone else with the power of RE. Feel free to preview this course . I will see you inside.\n--------------------------------------------------------------------------------------------------------------------\nThis course is for complete beginners and for those who have some knowledge of Regular Expressions.\n-----------------------------------------------------------------------",
      "target_audience": [
        "Beginners",
        "Back-End developers",
        "Data Science Aspirants"
      ]
    },
    {
      "title": "C Programming Masterclass: Pointers & Advanced C Language",
      "url": "https://www.udemy.com/course/c-programming-pointers-from-zero-to-hero/",
      "bio": "C Programming Advanced Topics: Pointers, Memory, Low-Level C Language and Embedded C Preparation",
      "objectives": [
        "Introduction To Pointers For Beginners",
        "Pointers Declaration, Initialization, and Usage",
        "Pointers Dereferencing",
        "Multiple Indirection",
        "Pointers Arithmetics",
        "Generic Pointers",
        "Dynamic Memory Allocation",
        "\"malloc\" function",
        "\"calloc\" function",
        "\"realloc\" function & \"issues\"",
        "\"free\" function",
        "Dangling Pointers",
        "Memory Leakage Tool - Valgrind",
        "Pointers Arithmetic",
        "\"sizeof\" operator",
        "Arrays & Pointers",
        "Strings & Pointers",
        "A few Secrets of Strings using Pointers",
        "Function Pointers",
        "Arrays of Pointers to Functions",
        "Structs & Pointers",
        "Debugger & Debugging",
        "2D Matrix with Pointers",
        "Introduction to Computer Architecture",
        "Data & Structs Alignment",
        "Sequential and Textual Files",
        "Structural and Binary Files",
        "Project Management",
        "MACRO",
        "Enums",
        "Constants",
        "Bitwise Operations (Embedded)",
        "Bit Fields"
      ],
      "course_content": {
        "Welcome Aboard!": [
          "Course Introduction",
          "About the course",
          "Quick Update: scanf & CRT - how to work with it?"
        ],
        "Pointers - Introduction to Basics": [
          "Introduction to Pointers + General Visualization",
          "Why using Pointers? [Reasons & Motivation]",
          "Another reasons and motivation behind the usage of pointers",
          "Declaration & Usage of Pointers",
          "Pointers Initialization",
          "Short Dereference",
          "Challenge #1 - Printing Value & Address of a Variable",
          "Challenge #2 - Guessing the Output",
          "Exclusive Pass By Reference Guide",
          "Quick Summary"
        ],
        "Pointers Arithmetic & “sizeof” operator": [
          "Pointers Arithmetic Introduction",
          "Pointers Arithmetic Examples",
          "Rules - Summary",
          "Pointers Arithmetic - DIY Exercises",
          "The \"sizeof\" Operator - Introduction",
          "The \"sizeof\" Operator - Basic Practice",
          "\"sizeof\" & Static Arrays",
          "\"sizeof\" & Pointers"
        ],
        "Pointers Concept and Beyond": [
          "Exercise - Swap Function",
          "Milestone #1 - Develop Your Real Swap Function!",
          "Milestone #1 - Solution",
          "Multiple Indirection",
          "Generic Pointer (void star) - What is “void *”? [Generic Universal Pointer]",
          "Generic Swap Function (including \"memcpy\" function)",
          "Assignment: Implementing Different Data Swapping Techniques in C"
        ],
        "Arrays & Pointers - Theory & Practical Exercises": [
          "Arrays - Memory Representation",
          "Passing an Array to a Function",
          "Search if an Element is in a Given Array",
          "Challenge#1 [Question]: Function to Find Maximum Value of an Array and Return it",
          "Challenge#1 [Solution]: Function to Find Maximum Value of an Array and Return it",
          "Challenge #2 [Question]: Calculates the Average Value of an Array (using 2 func)",
          "Challenge #2 [Solution]: Calculates the Average Value of an Array (using 2 func)",
          "Input & Print Functions - (useful for any given array)",
          "Challenge #3 - Finding and Passing by Pointer - “Min” & “Max” values of an array",
          "Challenge #3.1 [Additional] - Function to Update the Average by Reference",
          "Challenge #3.1 [Solution] - Function to Update the Average by Reference",
          "Challenge #4 - Does Array Has An Element With Good Neighbors - Question",
          "Challenge #4 - Does Array Has An Element With Good Neighbors - Solution",
          "Challenge #5 - Function To Find If Array Is Sorted Or Not - Question",
          "Challenge #5 - Iterative Solution",
          "Challenge #5 - Advanced Recursive Solution [Using Recursion & Functions]",
          "Challenge #6 -Reverse Array using Pointers Arithmetic - Iter. & Recursive - Q.",
          "Challenge #6 -Reverse Array using Pointers Arithmetic - Iter. & Recursive - S.",
          "(old version) - Exercise - Reverse Array Using Recursion And Pointer Arithmetic",
          "Challenge #7 - Count and Print the Frequency of Each Array's Element - Question",
          "Challenge #7 - Count and Print the Frequency of Each Array's Element - Solution",
          "Challenge #8 - Find & Return the \"Second Smallest\" Element - Question",
          "Challenge #8 - Find & Return the \"Second Smallest\" Element - Solution",
          "Challenge #9 - Find 2 specific elements in Sorted Array O(n^2) & O(n) - Question",
          "Challenge #9 - Find 2 specific elements in Sorted Array O(n^2) & O(n) - Solution",
          "Challenge #9 - Find 2 specific elements - Optimized Solution",
          "ATTENTION! Problem with Returning a Static Array from a Function",
          "Extra Practice #1 - Recursion - is Array of Integers a Palindrome - Question",
          "Extra Practice #1 - Recursion - is Array of Integers a Palindrome - Solution",
          "Extra Practice #2 - Exchanging Signs Array Recursively - Question",
          "Extra Practice #2 - Exchanging Signs Array - Solution",
          "Extra Practice #3 - Maximum of 2 Adjacent Elements (using pointers) - Question",
          "Extra Practice #3 - Maximum of 2 Adjacent Elements (using pointers) - Solution",
          "Extra Practice #4 - Print Array Elements using Pointers in C - Question",
          "Extra Practice #4 - Print Array Elements using Pointers in C - Solution",
          "Extra Practice #5 - Recursively using Pointers & Functions - Find Array Average",
          "Extra Practice #5 - Recursively using Pointers & Functions - Find Average - Sol.",
          "Extra Practice #6 - Adjacent Elements Parts Sorted in Floating Point Array - Q.",
          "Extra Practice #6 - Adjacent Elements Parts Sorted in Floating Point Array - S.",
          "Extra Practice #7 - Print Number in Binary using Recursion Function - Question",
          "Extra Practice #7 - Print Number in Binary using Recursion Function - Solution"
        ],
        "Arrays Swapping Exercises - Intermediate to Expert Questions!": [
          "Swapping in O(n) Complexity",
          "Swapping in O(1) Complexity",
          "SwapArray(O1) - Further Visualization & Additional Clarification - part 1",
          "SwapArray(O1) - Further Visualization & Additional Clarification - part 2"
        ],
        "Dynamic Memory Allocation": [
          "What is DMA and why we may need it?",
          "“malloc\" function",
          "Challenge #1 - Creating and Returning a Dynamically Allocated Array from a Func",
          "Challenge #2 - Print Dynamically Allocated Array",
          "“calloc” function",
          "“free” function",
          "Dangling Pointer",
          "Finding Memory Leakages [Valgrind]",
          "“realloc” function",
          "“realloc” issues",
          "\"realloc\" - practical code example",
          "Implementing your own “universal realloc function” - Question",
          "Implementing your own “universal realloc function” - Solution #1",
          "Implementing your own “universal realloc function” - Solution #2 - using memcpy",
          "Adjustable Reallocation + Performance - Question",
          "Adjustable Reallocation + Performance - Explanation & Solution",
          "IMPORTANT Question - Create and Pass 1D Array using Pointer to Pointer!",
          "IMPORTANT Solution - Create and Pass 1D Array using Pointer to Pointer!",
          "Assignment: Mastering Dynamic Memory Allocation in C"
        ],
        "Advanced Exercises - Pointers & DMA": [
          "Exercise #1 - Creating a “new array” with NO DUPLICATES",
          "Exercise #2 - Splitting “source array” into ODD and EVEN arrays",
          "Exercise #3 - “Lower Case” & “Upper Case” arrays allocation",
          "Advanced: Practical Universal Insert Function - Question",
          "Advanced: Practical Universal Insert Function - Solution",
          "Advanced: Practical Universal Remove Function - Question",
          "Advanced: Practical Universal Remove Function - Solution",
          "Question - Copy an Array and pass a new one by Reference",
          "Solution - Copy an Array and pass a new one by Reference"
        ],
        "2D Dynamically Allocated Arrays (Matrix)": [
          "Dynamic Matrix - Introduction",
          "Arrays of Pointers - Introduction & Usage",
          "Usage of Arrays of Pointers VS Static 2D Arrays",
          "Creating a Totally Dynamically 2D Array",
          "Developing the “allocate2DMatrix” function",
          "Developing the “print2DMatrix” function",
          "Developing the “freeMatrix” function",
          "Practice Questions - 2D Dynamic Arrays - Question",
          "Swap 2 rows in 2D Dynamic Array - using Universal Approach (solution)",
          "Swap 2 columns in 2D Dynamic Array - for 2D Integer Arrays",
          "Question - 2 functions - lower and upper triangle matrix functions",
          "Solution - 2 functions - lower and upper triangle matrix creation",
          "Question - write two functions to PRINT - lower and upper triangle matrix",
          "Solution - 2 functions to print - lower and upper triangle matrix",
          "Intermediate: 2D Matrix Allocation and Passing by Reference Function - Question",
          "Intermediate: 2D Matrix Allocation and Passing by Reference Function - Solution"
        ],
        "Strings & Pointers": [
          "Returning a string from a function - example with \"strConcat\"",
          "**Exclusive** Extra Lecture on Strings & Pointers"
        ]
      },
      "requirements": [
        "Basic knowledge of C programming language - ideally having completed my \"C Programming for Beginners\" course on Udemy",
        "A computer with Windows, Linux or Mac OS",
        "At least 4GB RAM (recommended)"
      ],
      "description": "Welcome to the \"Advanced C Programming Masterclass: Pointers & Memory in C\"! This best-seller course is designed to elevate your C programming skills, with a particular focus on the C language, topics related to embedded C, and advanced C.\nIntroduction\nC programming language still remains one of the most popular and used languages in 2025 and has great career options in different industries, such as:\n- Cyber Security.\n- Smart Homes & Smart Cities.\n- Drones.\n- And especially in Embedded Systems.\n\n\nWhat will you learn in this course?\nThere is an 'ancient' phrase saying \"to become an expert in C - you need to master pointers\".\nOne of the main objectives of this course is designed to take your basic knowledge of pointers (one of the most significant topics) to the next level. The goal is to take the basic skills you've gained so far in C programming and take this knowledge to a whole new level.\nWe will cover pointers, memory addressing, pointers to functions, advanced concepts of structs and dynamic memory allocation, and so much more.\nThe beauty of this course is that it regularly gets updated with new material. And the material being added to the course these days includes lots of information in the low-level programming (the bits and bytes), preparation for usage of Embedded C in Embedded Systems, and other very important topics for the next generation of engineers.\nThis course covers the topics in-depth, from different angles, and with various visualizations and illustrations - that should make the learning process of pointers and low-level programming much easier and fun for you.\nAlso, you will get a whole dedicated section on how to use a debugger and what is the debugging process that may help you so much in developing your future applications.\nAfter completing this course you will gain plenty of new skills and knowledge that may improve your chances of getting a job position as a C Developer as well as increasing your chances to pass the exam (if you're still a student).\n\n\nWhat's different about this course?\nVlad Budnitski will be your instructor for this course.\nHe has years of experience working as a Software Developer (also working with complex systems developed in C language). As well as 4 years of experience teaching C Programming for Beginners and Advanced C Programming in College.\nSo you got lucky on this one because you will get knowledge from a practical software developer and experienced instructor.\nYou will get a handpicked, concise, and straight to the point material that you will be amazed by the way these complicated pointers can be taught.\nThis course is also guided with concrete exercises, challenges, and full solution videos - that will help you to practice the materials.\n\n\nWho's this course for?\nFirst of all, this course is not for \"absolute beginners\" and it requires you to have at least the basic knowledge of programming. It's assumed you have some knowledge of the basics in C - preferably having completed our \"C Programming for Beginners\" course (here on Udemy).\nThis course is great both for students in college as well as graduates who need to learn and understand pointers in depth.\nIn addition, if you're planning to explore and master the Embedded Systems domain using Embedded C - then this course is a great preparation of various topics for the Embedded Domain. Once you master all the concepts of this course you'll be a few steps closer to proceeding and mastering Embedded Systems, programming Micro Controllers, etc.\nSo, once again, why this course?\n\n\nInvestment of Time: We've spent hundreds of hours perfecting this course to make your C language learning experience engaging and fun.\n\nBest-Seller Status: Our course stands out among others. It's a top choice for learners due to its in-depth, easy-to-understand approach to complex C programming topics.\n\nEase of Learning: Don't worry about getting confused or lost. We're experts at breaking down difficult concepts into easily digestible content.\n\nStaying Current: We keep our content fresh and relevant with constant updates and improvements. Currently, we offer over 40 hours of practical C programming content.\n\nHands-On Training: Theory is good, but practice is better. We provide lots of exercises, complete with video solutions to help cement your knowledge.\n\nCommunity Support: Got questions or doubts? Our active Q&A community is here to provide answers and support your learning journey.\n\n\nList of topics\nOur course covers a wide variety of C programming topics including:\n\n\nThe ABCs of Pointersin C Language: From declaration, initialization, usage, to dereferencing and more\nUnraveling Complex C Programming Concepts: Multiple indirection, pointer arithmetic, and generic pointers\nMemory Management: Dive into dynamic memory allocation, using C functions like malloc, calloc, realloc, and free\nAdvanced C Topics: Learn about dangling pointers, using the Valgrind memory leak tool, sizeof operator, arrays, strings, and the secrets of using pointers in strings\nFunction Mastery: Grasp function pointers, arrays of pointers to functions, structs, and pointers\nDebugging Skills: Enhance your problem-solving capabilities with debugger and debugging techniques in C\nFurther Exploration: Delve into 2D matrices with pointers, computer architecture, data and structs alignment, sequential and textual files, structural and binary files, and project management\nDetailed Insights: Understand MACRO, Enums, Constants, Bitwise Operations (Embedded), and Bit Fields\nAnd more!\n\n\nWords From Our Students\nCheck out what our students have to say about their experience with us:\n\n\n“The lecturer explains the material clearly and intelligibly. The teaching material is well developed. So far, so good!” - Andrejs Ogurcovs\n\n\n“This course is amazing for embedded systems engineering. Inside of this course there are a lot of examples of curriculum also about pointers that makes it helpful for learning.Finally I have understood to pointers. I wıll use in embedded systems that i have learnt knowledge about c programming in this lecturer.Thanks for your effort Vlad. Best regards.” - Emre Çakır\n\n\n“This course is AWESOME AWESOME AWESOME. I had so many courses for C, and all of them copied each other. They mention about pointers in just 1 (ONE) video (10 minutes). If you have a programming experience, start from this course. AWESOME AWESOME AWESOME. If I could have gave 1000 starts, I would do this. The examples, exercises, slides, topics, the voice of the teacher, everything is flawless” - beyza Erdoğan\n\n\n“Having this opportunity to review C and Pointers is pretty awesome. I have learnt a lot from Vlad about C which could be regarded as the fundamental of almost every programming language. I have taken Vlad's course from C Bootcamp to this advanced pointer course, and now I am confident to say that I know about C because I understand pointers now!! Hoping there would be more algorithm contents in the future, thanks Vlad!” - Matsu Chen\n\n\n“Hands down this is the best course I have ever done. Visual clarification was very useful for understanding what is happening behind the scenes. I hope Vlad makes extensions of this course with more advanced topics and exercises. Thanks Vlad!” - Venelin Stoyanov\n\n\n“Vlad did a great job explaining, illustrating, and covering many essential topics in pointers with enough examples. After completing this course, I feel more confident in using pointers in c programming.” - Abdel Alkuor\n\n\n“I did the first course C Programming Language for Beginners and I liked it. This course is in the same level or more until now. Thank you so much.” - João Henrique Berg dos Santos\n\n\n“I struggled so much understanding pointers and how they work, and why do I need them, I also struggled with the dynamic memory allocation, but after that course I think everything cleared, and even if I am still not working perfectly with these things, I finally understood them and how they work. Thank you so much Vlad! It was pleasure watching your videos!” - Julia Vasileva\n\n\n“Highly recommend taking this course for any student in college. Saved me so much time and effort. It was clearly explained, straight to the point, covered in a couple of hours more than my teacher covered in the entire semester.” - Nikolay\n\n\nDo you still have doubts?\nThat's OK. Pointers can get us all confused to some extent... If you're still unsure if this course is exactly what you're looking for, feel free to go over the full detailed curriculum.\nIn addition, we offer a full money-back guarantee for 30 days. So, you can enroll risk-free today, and get ready to master the world of advanced C programming! We can't wait to start this journey with you.",
      "target_audience": [
        "Basic knowledge (and Beyond) C Programming Developers",
        "Students at the Computers and Engineering Faculties",
        "C programmers who need to learn and understand Pointers In Depth",
        "This course is not aimed for \"total beginners\". It's better to have some basic knowledge in C Programming before enrolling in this course. I would suggest purchasing my \"C Programming for Beginners\" course first, fully complete it and then come back to get ultimate experience with Pointers."
      ]
    },
    {
      "title": "2025 C Programming Bootcamp - The Complete C Language Course",
      "url": "https://www.udemy.com/course/c-programming-bootcamp-for-beginners/",
      "bio": "C Programming 2025: Master the Fundamentals of C Programming Language. Join the Comprehensive C Bootcamp Masterclass!",
      "objectives": [
        "Understand the fundamentals of programming",
        "Write efficient and optimized code",
        "Solve real-world problems using C programming",
        "Develop programming skills",
        "Apply programming best practices",
        "Use C programming in software development projects",
        "Communicate programming concepts"
      ],
      "course_content": {
        "Basics of C language": [
          "Comment Lines in C",
          "Variables in C",
          "Installation",
          "Arithmetic Operators, Shorthand Arithmetic, Increment & Decrement",
          "Relational Operators",
          "Logical Operators",
          "Ternary Operators",
          "Bit-wise Operators",
          "Conditional Statements : If, If-Else stmts",
          "Nested If statement",
          "Else if ladder",
          "Switch Statement",
          "Example for Switch"
        ],
        "Looping Statements in C": [
          "While Loop",
          "While loop example",
          "Sum of digits in a given number",
          "For loop",
          "Finding factorial of a given number using For Loop",
          "Replacing For loop with while loop",
          "Do-while Loop",
          "Do-while loop Example",
          "Find the Output of the Given Program",
          "Quiz on Basics & Loops in C"
        ],
        "Functions in C": [
          "Function & its Components",
          "Categories of functions",
          "Factorial Using Functions",
          "GCD Using Functions",
          "Sum of Digits Using Functions",
          "Parameter Passing Mechanisms",
          "Example program on Parameter Passing Mechanisms"
        ],
        "Assignments": [
          "find the length of a string.",
          "Concatenate two strings"
        ],
        "Storage Classes & Recursion in C": [
          "Storage Classes & Types - In Detail Explanation",
          "Auto vs Static Storage Class",
          "Recursion in C",
          "Factorial Using Recursion",
          "Sum of n numbers using Recursion",
          "Fibonacci Series Using Recursion",
          "Quiz on Functions, Storage Classes & Recursion in C"
        ],
        "Arrays in C": [
          "1D Array & Compile-time Initialization",
          "Run time Initialization & Finding Sum of elements in array",
          "Linear Search in arrays",
          "Finding frequency of given element in a sorted array",
          "Sorting an Array",
          "2D Arrays - Initialization, Reading & Displaying",
          "Working with 2D arrays/Matrices - Programs",
          "Multi-Dimensional Arrays",
          "Quiz on Arrays in C"
        ],
        "Strings in C": [
          "String Initialization, Accessing & Displaying",
          "Copying Strings & Finding Length Of strings",
          "Finding reverse of the given string",
          "String Concatenation",
          "Quiz on Strings"
        ],
        "Pointers": [
          "Understanding Pointers",
          "Double Pointers",
          "Example program to illustrate pointer & Double pointer",
          "Pointers as parameters to function",
          "Pointer to a function",
          "Pointer Arithmetic",
          "Accessing String Using Pointers",
          "Finding Length of the string using pointers",
          "String Concatenation Using Pointers",
          "String Comparision Using Pointers",
          "Pointers & 1D arrays",
          "Pointers & 2D arrays"
        ]
      },
      "requirements": [
        "you will need a computer with a C compiler, a text editor or IDE, C programming textbooks, and a positive mindset for learning and practicing."
      ],
      "description": "C programming is a powerful and versatile language that has been around for several decades. It is widely used in various domains, including systems programming, game development, database management, and more. Learning C programming can open up many career opportunities and enable you to build robust and efficient software applications.\nWelcome to our C programming course! In this course, you will learn the fundamental concepts of C programming, including data types, variables, operators, control structures, functions, recursion, arrays, strings, pointers, Dynamic memory, Structures and unions.\nOur course is structured in a way that is easy to follow, even if you have no prior programming experience. We will provide clear explanations of each concept, accompanied by practical examples to help you understand how to apply them in real-world scenarios. Our instructors are experienced programmers who have a passion for teaching, and they are always available to answer any questions you may have.\nIn addition to the theoretical concepts, we also provide hands-on exercises, quizzes, and programming assignments to help you reinforce your learning. We believe that practice is essential to learning programming, and our course is designed to provide you with ample opportunities to practice and apply what you have learned.\nAt the end of our C programming course, you will have a solid understanding of the language and be able to use it to develop practical applications. You will also be equipped with the skills needed to write efficient and optimized code, which is essential for any software development project. So, whether you're a beginner or an experienced programmer looking to expand your skill set, our C programming course is the perfect place to start.\n\n\n“C Language is definitely here to STAY!”\n\nC is HIGHLY USEFUL & HIGHLY EFFICIENT.\nAlso, it’s considered that by learning C Programming you’re definitely going to make your programming fundamentals VERY STRONG.\nAnd finally, to answer a question that a lot of you may have - there is a HIGH DEMAND for C Developers in the market - at both large companies as well as startups - and the salaries are usually PRETTY HIGH! :)\nSo C Programming - usually pays off.\n\n\nIn this course, you'll learn the fundamentals of programming using C Language - including different concepts such as:\n\n\nBasics in C\nConditions & Control Flow (controlling the execution flow of a C Program)\nDifferent types of Loops (including For, While, and Do-While in C)\nFunctions\nStorage Classes & Recursions (Concepts + C Usage)\nArrays in C\nStrings\nPointers\nDynamic Memory Management\nStructures\nUnions\n\n\nSoftware Requirements:\nA C compiler: Students will need a C compiler installed on their computer to write and run C programs. There are many different compilers available, both free and commercial. Some popular options include GCC (GNU Compiler Collection), Clang, and Microsoft Visual Studio. Students should choose a compiler based on their operating system (e.g., Windows, macOS, Linux) and personal preferences.\nA code editor or integrated development environment (IDE): Students will need a program to write and edit their C code. Some popular options include Visual Studio Code, Sublime Text, and Eclipse. An IDE like Code::Blocks or Dev-C++ can also be used, which typically include a code editor, compiler, and debugger in one package.\nAdditional Materials:\nA textbook or online resource: While not strictly necessary, having a reference text or online resource can be very helpful when learning C programming. Some recommended resources include \"The C Programming Language\" by Brian Kernighan and Dennis Ritchie, \"C Programming Absolute Beginner's Guide\" by Greg Perry and Dean Miller, and \"Learn C the Hard Way\" by Zed A. Shaw.\nPractice problems: To truly master C programming, students will need to practice writing code. There are many online resources that offer coding challenges and exercises.\nAppropriate Mindset:\nPatience and persistence: C programming can be challenging, especially for beginners. Students should expect to encounter errors and spend time debugging their code. It's important to stay patient and persistent in the face of these challenges.\nA willingness to learn: C programming is a complex topic, but it can be mastered with practice and dedication. Students should be open to learning new concepts and techniques and be willing to put in the time and effort required to become proficient in C programming.\nOverall, to succeed in a C programming course, you will need a computer with a C compiler, a text editor or IDE, C programming textbooks, and a positive mindset for learning and practicing.\n\n\nAfter taking course, you need to practice the syntax and start writing C code and execute it. This practice will definitely help you to solve assignments correctly.\n\n\nHappy Learning!!",
      "target_audience": [
        "Computer Science students: C programming is often a core requirement for computer science students, and this course can help them develop a solid understanding of the language.",
        "Engineers: Engineers who work in software development or embedded systems often need to know C programming, making this course a valuable resource.",
        "Web Developers: C programming is not typically used for web development, but it is still a valuable language to know for optimizing and integrating back-end systems.",
        "Game Developers: C programming is widely used in game development, making this course a must-have for aspiring game developers.",
        "System Administrators: C programming is an essential skill for system administrators, as it enables them to develop and optimize system-level software.",
        "Data Analysts: C programming is used in data analysis and manipulation, and this course can help data analysts build a stronger foundation in the language.",
        "Scientists: Scientists often need to develop software for data analysis or simulation, and this course can provide them with the programming skills needed to develop such software.",
        "Artificial Intelligence and Machine Learning Professionals: C programming is used in developing and optimizing AI and ML algorithms, making this course valuable for AI and ML professionals.",
        "IT Professionals: C programming is a valuable skill for IT professionals who work in software development, system administration, or network programming.",
        "Anyone interested in learning programming: C programming is a widely used and versatile language, and this course can be beneficial for anyone who wants to learn how to program."
      ]
    },
    {
      "title": "Python OOP : Four Pillars of OOP in Python 3 for Beginners",
      "url": "https://www.udemy.com/course/python-oops-beginners/",
      "bio": "Python OOP Simplified: Learn Object Oriented Programming using Python in a way that you really understand",
      "objectives": [
        "You will have a complete understanding of Object Oriented Programming in Python",
        "Classes and Objects, the 'self' parameter, and other technicalities of Object Oriented Programming in Python will no longer haunt you",
        "You will understand how Abstraction, Encapsulation, Inheritance and Polymorphism gives a good design to your Python code",
        "You will gain the much needed confidence to start reading Object Oriented code written by other Python developers"
      ],
      "course_content": {
        "Introduction and Course Structure": [
          "Introduction"
        ],
        "Installation of Python (if you haven't already)": [
          "Installation for Windows",
          "Installation for Mac",
          "Installation for Linux"
        ],
        "Classes and Objects": [
          "Understanding Classes and Objects",
          "Implementation of Classes and Objects in Python"
        ],
        "Attributes and Methods": [
          "Class Attributes and Instance Attributes",
          "Understanding the 'self ' parameter",
          "Static Methods and Instance Methods",
          "init() method - Create a fully initialised object"
        ],
        "Abstraction and Encapsulation - The first two pillars of OOP": [
          "Abstraction and Encapsulation",
          "Performing Abstraction and Encapsulation in Python"
        ],
        "Inheritance - The third pillar of OOP": [
          "Understanding Inheritance and Performing a Single Inheritance in Python",
          "Performing a Multiple Inheritance in Python",
          "Performing a Multilevel Inheritance in Python",
          "Public, Protected and Private - Naming Conventions in Python"
        ],
        "Polymorphism - The final pillar of OOP": [
          "Overriding and the super() method",
          "The Diamond Shape Problem in Multiple Inheritance",
          "Overloading an Operator",
          "Implementing an Abstract Base Class (ABC)"
        ],
        "Final Project - Simulate a Banking System": [
          "Problem Statement",
          "Project Solution - Part 1",
          "Project Solution - Part 2",
          "Congratulations!"
        ],
        "Bonus Lecture": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You need to have a computer that runs on either Windows or Linux or a Mac OS. Installation of Python will be taken care of.",
        "You need to be familiar with the basics of Python such as Variables, Data Types, Conditional Statements, etc",
        "You should have written a few basic programs in Python to understand the syntax of the language",
        "Good internet connectivity to talk Python along with me"
      ],
      "description": "Python is one of the most sought after programming language. This course will teach you Object Oriented Programming, using Python as the programming language. You need to be familiar with the basics of Python such as Variables, Data Types, etc\nBy learning OOP using Python , you are taking your Python skills to the intermediate level from where you can pursue other advanced Python modules.\nWith the spike in growth of Data Science, Python developers are much in demand. With increase in number of Python developers, it is very important to let potential employers spot you from the rest of the 'usual' Python crowd. This is where having the knowledge of OOP becomes very important. By being able to write well designed code in Python , you are giving yourself a boost to climb up the ladder of your Python journey.\nThis course will help you understand how Abstraction, Encapsulation, Inheritance and Polymorphism - the four pillars, hold together the world of Object Oriented Programming in Python\nHave you ever stumbled into someone else's Python code and wondered how to create Classes and Objects and other designs of OOP ? Well, this course will teach you how to start creating your own OOP designs in Python\nI have related all the concepts to real world examples to help you understand them better. And with Python as the programming language, it couldn't get any simpler!\nEnrol today and take your Python skills to the next level!\n\n\nLast updated - 11 November 2018 => Added Closed Captions in English",
      "target_audience": [
        "You are looking to enhance your Python skills by learning the basics of Object Oriented Programming",
        "You tried other Python OOP courses, but found it difficult to understand how OOP works",
        "The syntax of other programming languages makes it difficult for you to understand the concept of OOP. (Trust me, Python makes it easy)",
        "Without usage of appropriate examples, the language of OOP was always difficult for you to grasp"
      ]
    },
    {
      "title": "The Java Design Patterns Course",
      "url": "https://www.udemy.com/course/java-design-patterns-course/",
      "bio": "Understand the how and the why of the gang of four design patterns using Java.",
      "objectives": [
        "Understand all 23 of the Gang of Four's design patterns and how to implement them in Java.",
        "Be able to demonstrate industry best practices in the implementations of Java design patterns code you write.",
        "Obtain a solid understanding of what design patterns are, how to implement them but also WHY you should!",
        "Acquired the design patterns skills you need to become a senior Java developer."
      ],
      "course_content": {
        "Introduction": [
          "Welcome to Class!",
          "Class Organization",
          "Overview",
          "Advantages of Design Patterns",
          "Types of Design Patterns",
          "Selecting and Using Design Patterns"
        ],
        "Installing Required Software": [
          "6 Month Free Trial of IntelliJ Ultimate Edition - Please Read",
          "Install JDK for Windows",
          "Installing and Configuring IntelliJ IDEA on Windows",
          "Installing JDK 11 on a Mac",
          "Installing and Configuring IntelliJ IDEA on a Mac",
          "Installing JDK 11 on a Linux Machine",
          "Installing and Configuring IntelliJ IDEA on a Linux Machine"
        ],
        "Principles and Strategies of Design": [
          "Overview",
          "Design Smells",
          "Programming to an interface",
          "Using Composition Over Inheritance",
          "Delegation Principles",
          "The Single Responsibility Principle",
          "The Open Closed Principle",
          "The Liskov Substitution Principle",
          "The Interface Segregation Principle",
          "Dependency Inversion",
          "Dependency Injection"
        ],
        "UML": [
          "Overview",
          "Class Diagrams",
          "Drawing a Class Diagram",
          "Example Class Diagrams"
        ],
        "Creational Design Patterns": [
          "Overview"
        ],
        "Factory Method": [
          "Overview",
          "Implementation (Abstract Creator)",
          "Implementation (Concrete Creator)",
          "Implementation (Static Method Creator)",
          "(Challenge) Factory Method",
          "(Challenge Solution) Factory Method"
        ],
        "Abstract Factory Method": [
          "Overview",
          "Implementation",
          "(Challenge) Abstract Factory Method",
          "(Challenge Solution) Abstract Factory Method"
        ],
        "Singleton": [
          "Overview",
          "Singleton vs. Dependency Injection",
          "Implementation Overview",
          "Implementation (Lazy Evaluation)",
          "Implementation (Synchronized method)",
          "Implementation (Double Checked Locking)",
          "Implementation (Eager Evaluation)",
          "Implementation (Bill Pugh)",
          "(Challenge) Singleton",
          "(Challenge Solution) Singleton"
        ],
        "Builder": [
          "Overview",
          "Implementation (Overview)",
          "Implementation (Example)",
          "(Challenge) Builder",
          "(Challenge Solution) Builder"
        ],
        "Prototype": [
          "Overview",
          "Implementation",
          "Problems with the Cloneable Interface",
          "(Challenge) Prototype",
          "(Challenge Solution) Prototype"
        ]
      },
      "requirements": [
        "You should have a general understanding of Java - ideally by going through this channels Java Crash Course or Java Masterclass",
        "A Windows computer, Linux machine, or a Mac so that the free IDE can be downloaded and install (full instructions included).",
        "An open mind to learn something new and exciting which may make a huge difference in your future career."
      ],
      "description": "So you have some Java experience under your belt, but are trying to figure out what to do next to make it easier to get that next job or consulting gig, and to stand out from the crowd.\nMaybe you have heard of design patterns before and have seen programmers who know them and are able to implement them are held in very high regard.\nOne thing is clear, Java programmers with design pattern experience are in high demand.  Design patterns are heavily used in the real world, so it's essential that Java programmers learn how to identify design patterns and implement them.\nAnd that's what you are going to learn in this course!\nPerhaps you tried to learn about design patterns in the past, but struggled to understand them.  This course is going to give you the core design patterns experience you need!\nThis course is unique in comparison to other design patterns courses.\nWhy?  It not only teaches how to use design patterns, but perhaps more importantly, it teaches why you should use them!  Why they are the best approach and how using them can make you a super productive and awesome Java Programmer.\nThe reality is that Java developers who truly understand how to use design patterns are in high demand.\nSo what specifically is included in this course?\nThis course focuses on the details and a thorough understanding of all design patterns from the Gang of four.\nWho are the Gang of four?\nErich Gamma, Richard Helm, Ralph Johnson and John Vlissides released a book in 1994 that was and is still considered a classic.  The concepts are still very relevant in 2019!\n\nThis course is all about showing you how to use their design patterns in todays software development environment.\nYou will learn detailed aspects of common design patterns (23 from the Gang of four) using the Java programming language.\nWhy should I bother with Design Patterns?\nIn programming terms, a design pattern is a solution to a common problem that occurs when writing software.  Think of it as more like a template than actual code - its a how-to to solve a problem that can be re-used in many different situations.\nUsing design patterns gives you a way to solve common problems with a proven solution!  So learning java design patterns and architecture and being able to use and implement them are critical to take your Java programming to new levels.\nWhat you will learn in this course.\nYou will learn how to implement specific design patterns in addition to learning why they are the best approach and how they make you a super productive and awesome Java programmer.\n\nMany, many examples and challenges are provided to test your understanding of every pattern that you have learned.\n\nThis course is unique to other courses here at Udemy in that the details and the why are explained. We do not just go through projects and provide a how-to.  You will learn WHY you should be using a particular design pattern and the benefits to doing so.\nJason Fedin, you instructor is an expert Java developer, and has one of the most popular C programming languages on Udemy (published on this channel).\nAs a professional programmer, with over 18 years of commercial experience, you can be assured you are learning from a true professional and learning the real-world skills you need to know to succeed.\nIf you are ready to get started, click on that enroll button and start taking your Java skills to new levels!",
      "target_audience": [
        "If you are a beginner programmer, then this course is probably not for you. In that scenario consider taking a Java or C# crash course from this channel.",
        "Programmers who have a reasonable understanding of the basics of Java, ready to take their skills to new levels.",
        "Existing Java programmers who want to obtain skills in Design Patterns to move into more senior programming positions."
      ]
    },
    {
      "title": "Scala Applied, Part 2",
      "url": "https://www.udemy.com/course/stairway-to-scala-applied-part-2/",
      "bio": "Introduction to programming in the Scala language. Scala language features.",
      "objectives": [
        "Understand Scala's composition and inheritance features",
        "Create abstract classes and pure abstract members (methods and fields)",
        "Override and overload methods",
        "Create primary and auxiliary constructors",
        "Call superclass constructors and methods",
        "Understand and use parametric fields",
        "Create factory methods in companion objects",
        "Construct simple DSLs (Domain Specific Languages)",
        "Understand top and bottom types and how Scala uses them",
        "Write correct equals and hashCode methods",
        "Use traits to mix behavior into classes",
        "Know the different styles of packages and visibility modifiers",
        "Be able to import anything from anywhere",
        "Write pre-conditions and post-conditions",
        "Test your code with unit testing"
      ],
      "course_content": {
        "Course Introduction and Exercises": [
          "Download the exercises for this course",
          "Download Slides and Exercises"
        ],
        "Module 7 - Composition and Inheritance": [
          "01 - Introduction",
          "02 - Agenda",
          "03 - Classes and Abstract Classes",
          "04 - Abstract Classes",
          "05 - Anonymous Classes and Overrides",
          "06 - Uniform Access",
          "07 - val, def and lazy val",
          "08 - Inheriting and Extends",
          "09 - Invoking Superclasses",
          "10 - Alternative Car Definition",
          "11 - override keyword",
          "12 - override keyword continued",
          "13 - final keyword",
          "14 - final keyword continued",
          "15 - final classes",
          "16 - case classes",
          "17 - Domain Models",
          "18 - Cars and Vehicles",
          "19 - Parking Structure",
          "Composition and inheritance",
          "20 - Module 07 Exercises"
        ],
        "Module 8 - Hierarchy, Types and Options": [
          "01 - Module 08 Introduction",
          "02 - Agenda",
          "03 - Top Classes",
          "04 - Top Types Example",
          "05 - Organization From the Top",
          "06 - Bottom Classes",
          "07 - Null and Nothing",
          "08 - Even More Nothing",
          "09 - Scala Type Calculus",
          "10 - Scala Type Inference Tricks",
          "11 - Primitives and Implicit Conversions",
          "12 - Rich Wrappers",
          "13 - @specialized",
          "14 - @specialized generation",
          "15 - Extension Methods and Implicit Classes",
          "16 - Value Class",
          "17 - Nil, Null, Nothing, None",
          "18 - Option",
          "19 - Working with Option",
          "20 - Option continued",
          "21 - equals and hashCode",
          "22 - Generate with IDEA",
          "23 - Follow this formula",
          "24 - Sub classes",
          "25 - Just use case classes",
          "26 - Product Types",
          "27 - Product Type Features",
          "Scala's Type Hierarchy",
          "28 - Module 8 Exercises",
          "29 - Module 8 Puzzlers explanations"
        ],
        "Module 9 - Traits": [
          "01 - Module 09 Introduction",
          "02 - Agenda",
          "03 - Multiple Inheritance",
          "04 - Traits Compared to Interfaces",
          "05 - Creating a Trait",
          "06 - Using a Trait in a Class",
          "07 - Polymorphism and Rich Interfaces",
          "08 - Multiple Traits",
          "09 - How'd it do that?",
          "10 - Stacking Traits",
          "11 - Stacking Traits - Quiz",
          "12 - Stacking Traits 1",
          "13 - Stacking Traits 2",
          "14 - Stacking Traits 3",
          "15 - Construction Composition",
          "16 - Traits vs Classes",
          "17 - Trait Initialization",
          "18 - Trait Initialization Fixes",
          "19 - abstract override",
          "20 - Implementing the Abstract",
          "21 - Traits with Type Parameters",
          "22 - Another CompareAge class",
          "23 - Selfless Traits",
          "Traits",
          "24 - Exercises for Module 9"
        ],
        "Module 10 - Packages, Imports and Scope": [
          "01 - Module 10 Introduction",
          "02 - Agenda",
          "03 - Public, Protected and Private",
          "04 - Packages",
          "05 - Package Structure Alternatives",
          "06 - Namespace Notation",
          "07 - More Parts of the Model",
          "08 - Package Visibility",
          "09 - At the top level",
          "10 - wine package",
          "11 - The PairWine object",
          "12 - Package Objects",
          "13 - Importing from an object",
          "14 - Importing from an instance",
          "15 - Importing Fu: Renaming",
          "16 - Selective Importing",
          "17 - Companion Objects",
          "Packages and Imports",
          "18 - Module 10 Exercises"
        ],
        "Module 11 - Testing in Scala": [
          "01 - Module 11 Introduction",
          "02 - Agenda",
          "03 - Pre and Post Conditions",
          "04 - Eliding",
          "05 - Requirements",
          "06 - Testing",
          "07 - Scalatest",
          "08 - FunSuite",
          "09 - FunSpec",
          "10 - Matchers",
          "11 - Matchers 2",
          "12 - Matchers 3",
          "13 - Unit vs Integration Testing",
          "14 - Scalamock",
          "15 - Unit Testing with Mocks",
          "16 - Advantages of Mocks",
          "17 - Mocks vs Stubs",
          "18 - Fakes",
          "19 - Property Driven Testing",
          "20 - Custom Property Generators",
          "21 - Testing with Futures",
          "22 - Waiting for the Future",
          "23 - whenready",
          "24 - Full Async Suites",
          "Assertions and Unit Testing",
          "25 - Module 11 Exercises"
        ]
      },
      "requirements": [
        "Students should follow and complete the Stairway to Scala Setup instructions, available for free on Udemy, before starting this course",
        "Students should have also completed Stairway to Scala Applied Part 1 or have equivalent skills before starting this course",
        "Students will need a laptop or desktop computer with sufficient performance and resources to compile and run the coding exercises"
      ],
      "description": "Scala Applied, Part 2 covers Scala features that are different from other languages or maybe unique to Scala. It is intended to follow on from Part 1, and dovetails nicely into that flow.\n\n\nWhile part 1 covered common concepts from other languages in Scala, part 2 concentrates on the parts of the language that are more specific to Scala and may be unfamiliar when coming from other programming languages, either the features themselves or the syntax for using them, taught by an instructor with over 15 years experience programming in Scala, and more than a dozen years teaching it.\n\n\nAs part of the larger Scala Applied 3 part course, this will prepare you with everything you need for day-to-day development in the Scala language.\n\n\nIn particular, by following this course you will:\n\n\nUnderstand Scala's composition and inheritance features\nCreate abstract classes and pure abstract members (methods and fields)\nOverride and overload class methods\nCreate primary and auxiliary constructors\nCall superclass constructors and methods\nUnderstand and use parametric fields\nCreate factory methods in companion objects\nConstruct simple DSLs (Domain Specific Languages)\nUnderstand top and bottom types and how Scala uses them\nWrite correct equals and hashCode methods\nUse traits to mix behavior into classes\nKnow the different styles of packages and visibility modifiers\nBe able to import anything from anywhere\nWrite pre-conditions and post-conditions\nTest your code with unit testing",
      "target_audience": [
        "Anyone wanting to learn the Scala programming language",
        "This is part 2 of a 3 part course, please check you have skills equivalent to part 1 before taking this course",
        "We do assume the student has some programming knowledge in a modern programming language"
      ]
    },
    {
      "title": "Learning Python for Data Analysis and Visualization Ver 1",
      "url": "https://www.udemy.com/course/learning-python-for-data-analysis-and-visualization/",
      "bio": "Learn python and how to use it to analyze,visualize and present data. Includes tons of sample code and hours of video!",
      "objectives": [
        "Have an intermediate skill level of Python programming.",
        "Use the Jupyter Notebook Environment.",
        "Use the numpy library to create and manipulate arrays.",
        "Use the pandas module with Python to create and structure data.",
        "Learn how to work with various data formats within python, including: JSON,HTML, and MS Excel Worksheets.",
        "Create data visualizations using matplotlib and the seaborn modules with python.",
        "Have a portfolio of various data analysis projects."
      ],
      "course_content": {
        "Intro to Course and Python": [
          "Course Intro",
          "Course FAQs"
        ],
        "Setup": [
          "Installation Setup and Overview",
          "IDEs and Course Resources",
          "iPython/Jupyter Notebook Overview"
        ],
        "Learning Numpy": [
          "Intro to numpy",
          "Creating arrays",
          "Using arrays and scalars",
          "Indexing Arrays",
          "Array Transposition",
          "Universal Array Function",
          "Array Processing",
          "Array Input and Output"
        ],
        "Intro to Pandas": [
          "Series",
          "DataFrames",
          "Index objects",
          "Reindex",
          "Drop Entry",
          "Selecting Entries",
          "Data Alignment",
          "Rank and Sort",
          "Summary Statistics",
          "Missing Data",
          "Index Hierarchy"
        ],
        "Working with Data: Part 1": [
          "Reading and Writing Text Files",
          "JSON with Python",
          "HTML with Python",
          "Microsoft Excel files with Python"
        ],
        "Working with Data: Part 2": [
          "Merge",
          "Merge on Index",
          "Concatenate",
          "Combining DataFrames",
          "Reshaping",
          "Pivoting",
          "Duplicates in DataFrames",
          "Mapping",
          "Replace",
          "Rename Index",
          "Binning",
          "Outliers",
          "Permutation"
        ],
        "Working with Data: Part 3": [
          "GroupBy on DataFrames",
          "GroupBy on Dict and Series",
          "Aggregation",
          "Splitting Applying and Combining",
          "Cross Tabulation"
        ],
        "Data Visualization": [
          "Installing Seaborn",
          "Histograms",
          "Kernel Density Estimate Plots",
          "Combining Plot Styles",
          "Box and Violin Plots",
          "Regression Plots",
          "Heatmaps and Clustered Matrices"
        ],
        "Example Projects.": [
          "Data Projects Preview",
          "Intro to Data Projects",
          "Titanic Project - Part 1",
          "Titanic Project - Part 2",
          "Titanic Project - Part 3",
          "Titanic Project - Part 4",
          "Intro to Data Project - Stock Market Analysis",
          "Data Project - Stock Market Analysis Part 1",
          "Data Project - Stock Market Analysis Part 2",
          "Data Project - Stock Market Analysis Part 3",
          "Data Project - Stock Market Analysis Part 4",
          "Data Project - Stock Market Analysis Part 5",
          "Data Project - Intro to Election Analysis",
          "Data Project - Election Analysis Part 1",
          "Data Project - Election Analysis Part 2",
          "Data Project - Election Analysis Part 3",
          "Data Project - Election Analysis Part 4"
        ],
        "Machine Learning": [
          "Introduction to Machine Learning with SciKit Learn",
          "Linear Regression Part 1",
          "Linear Regression Part 2",
          "Linear Regression Part 3",
          "Linear Regression Part 4",
          "Logistic Regression Part 1",
          "Logistic Regression Part 2",
          "Logistic Regression Part 3",
          "Logistic Regression Part 4",
          "Multi Class Classification Part 1 - Logistic Regression",
          "Multi Class Classification Part 2 - k Nearest Neighbor",
          "Support Vector Machines Part 1",
          "Support Vector Machines - Part 2",
          "Naive Bayes Part 1",
          "Naive Bayes Part 2",
          "Decision Trees and Random Forests",
          "Natural Language Processing Part 1",
          "Natural Language Processing Part 2",
          "Natural Language Processing Part 3",
          "Natural Language Processing Part 4"
        ]
      },
      "requirements": [
        "Basic math skills.",
        "Basic to Intermediate Python Skills",
        "Have a computer (either Mac, Windows, or Linux)",
        "Desire to learn!"
      ],
      "description": "This course will give you the resources to learn python and effectively use it analyze and visualize data! Start your career in Data Science!\nYou'll get a full understanding of how to program with Python and how to use it in conjunction with scientific computing modules and libraries to analyze data.\nYou will also get lifetime access to over 100 example python code notebooks, new and updated videos, as well as future additions of various data analysis projects that you can use for a portfolio to show future employers!\nBy the end of this course you will:\n- Have an understanding of how to program in Python.\n- Know how to create and manipulate arrays using numpy and Python.\n- Know how to use pandas to create and analyze data sets.\n- Know how to use matplotlib and seaborn libraries to create beautiful data visualization.\n- Have an amazing portfolio of example python data analysis projects!\n- Have an understanding of Machine Learning and SciKit Learn!\nWith 100+ lectures and over 20 hours of information and more than 100 example python code notebooks, you will be excellently prepared for a future in data science!\n\n\nPlease make sure you read the entire page to understand if the course is the correct version for you.",
      "target_audience": [
        "Anyone interested in learning more about python, data science, or data visualizations.",
        "Anyone interested about the rapidly expanding world of data science!"
      ]
    },
    {
      "title": "Become a Professional Python Programmer",
      "url": "https://www.udemy.com/course/become-a-professional-python-programmer/",
      "bio": "Learn all the important skills Python programmers need to get all the best programming jobs",
      "objectives": [
        "Understand and implement basic Python code",
        "Create and run a real-world Python program",
        "Access and parse the web with Python",
        "Manage a database and remote server",
        "Run code via a VPS",
        "Create a website with Python",
        "Visualize multiple forms of both 2D and 3D graphs, like line graphs, scatter plots, bar charts, and more",
        "Load data from files or from internet sources for data visualization.",
        "Load data from files or from internet sources for data visualization",
        "Customize graphs, modifying colors, lines, fonts, and more",
        "Visualize Geographical data on maps",
        "Input and output data from a variety of data types",
        "Visualize,combine and manipulate dataset",
        "Develop in the real world using Python Django",
        "Create Django web applications to solve a multitude of problems or needs"
      ],
      "course_content": {
        "Python programming for beginners": [
          "Installation",
          "Print and Strings",
          "Math",
          "Variables",
          "While Loops",
          "For Loops",
          "If Statements",
          "If Else Statements",
          "If Elif Else Statements",
          "Functions",
          "Function Parameters",
          "Global and Local Variables",
          "Common Python Errors",
          "Writing to a File",
          "Appending to a File",
          "Reading From a File",
          "Classes",
          "Input and Statistics",
          "Import Syntax",
          "Making Modules",
          "Error Handling - Try and Accept",
          "Lists vs Tuples and List Manipulation",
          "Dictionaries",
          "Final Project",
          "Final Project Solution"
        ],
        "Python web programming": [
          "Introduction",
          "Python Programming Introduction",
          "Object Oriented Programming Part 1",
          "Object Oriented Programming Part 2",
          "Modules Part1",
          "Modules Part2",
          "Python Programming Recap",
          "Basic Database (SQLite) with Python Introduction",
          "SQLite Introduction",
          "Creating Database And Table",
          "Inserting Data",
          "Inserting Dynamic Data",
          "Reading Data",
          "Limit, Update, and Delete",
          "Basic Database (SQLite) with Python Recap",
          "Using Python with the Internet Introduction",
          "urllib module",
          "urllib.requests",
          "urllib headers",
          "XML Intro",
          "Parsing XML",
          "Using Python with the Internet Recap",
          "Working with HTML Introduction",
          "Web Page Structure",
          "Web Page Structure 2",
          "Nav bar",
          "HTML’s body",
          "Comments, footers, and divs",
          "Parsing Paragraph Data",
          "Working with HTML Recap",
          "Intro to Web Server Programming",
          "Creating a VPS",
          "Interacting with our VPS",
          "FileZilla",
          "PySFTP",
          "Web Server Programming Recap",
          "MySQL database with Python Introduction",
          "MySQL basics",
          "MySQL Part 2",
          "Database Connection",
          "Inserting into Database",
          "Adding logic to insert",
          "Nohup",
          "Crontab",
          "MySQL database with Python Recap",
          "Python's Flask Web development Framework Introduction",
          "Flask setup",
          "Flask backend setup",
          "Basic Website",
          "Templates and Errors",
          "Variables And Logic",
          "Bootstrap incorporation",
          "More on Bootstrap",
          "Adding more pages to our site",
          "Extending Templates",
          "Additional Information",
          "Section Conclusion"
        ],
        "Data visualization with python and matplotlib": [
          "Introduction",
          "Getting Matplotlib And Setting Up",
          "Different types of basic Matplotlib charts Introduction",
          "Basic matplotlib graph",
          "Labels, titles and window buttons",
          "Legends",
          "Bar Charts",
          "Histograms",
          "Scatter Plots",
          "Stack Plots",
          "Pie Chart",
          "Loading data from a CSV",
          "Loading data with NumPy",
          "Different types of basic Matplotlib charts Recap",
          "Basic Customization Options Introduction",
          "Source for our Data*",
          "Parsing stock prices from the internet*",
          "Plotting basic stock data*",
          "Modifying labels and adding a grid*",
          "Converting from unix time and adjusting subplots*",
          "Customizing ticks",
          "Fills and Alpha",
          "Add, remove, and customize spines*",
          "Candlestick OHLC charts*",
          "Styles with Matplotlib*",
          "Creating our own Style*",
          "Live Graphs*",
          "Adding and placing text*",
          "Annotating a specific plot*",
          "Dynamic annotation of last price*",
          "Basic Customization Options Recap",
          "Advanced Customization Options Introduction",
          "Basic subplot additions*",
          "Subplot2grid *",
          "Incorporating changes to candlestick graph*",
          "Creating moving averages with our data*",
          "Adding a High minus Low indicator to graph*",
          "Customizing the dates that show*",
          "Label and Tick customizations*",
          "Share X axis*",
          "Multi Y axis*",
          "Customizing Legends*",
          "Advanced Customization Options Recap",
          "Geographical Plotting with Basemap Introduction",
          "Downloading and installing Basemap",
          "Basic basemap example",
          "Customizing the projection",
          "More customization, like colors, fills, and forms of boundaries",
          "Plotting Coordinates*",
          "Connecting Coordinates*",
          "Geographical Plotting with Basemap Recap",
          "3D graphing Introduction",
          "Basic 3D graph example using wire_frame",
          "3D scatter plots",
          "3D Bar Charts",
          "More advanced Wireframe example",
          "3D graphing Recap",
          "Section Conclusion"
        ],
        "Data analysis with python and pandas": [
          "Introduction",
          "Getting Pandas and Fundamentals",
          "Introduction to Pandas",
          "Creating and Navigating a Dataframe",
          "Slices, head and tail",
          "Indexing",
          "Visualizing The Data",
          "Converting To Python List Or Pandas Series",
          "Pandas Recap",
          "IO Tools Introduction",
          "Read Csv And To Csv",
          "io operations",
          "Read_hdf and to_hdf",
          "Read Json And To Json",
          "Read Pickle And To Pickle",
          "IO Tools Recap",
          "Pandas Operations Introduction",
          "Column Manipulation (Operatings on columns, creating new ones)",
          "Column and Dataframe logical categorization",
          "Statistical Functions Against Data",
          "Moving and rolling statistics",
          "Rolling apply",
          "Pandas Operations Recap",
          "Handling for Missing Data / Outliers Introduction",
          "dropNa",
          "Filling Forward And Backward Na",
          "Detecting outliers",
          "Handling for Missing Data / Outliers Recap",
          "Combining Dataframes Introduction",
          "Concatenation",
          "Appending data frames",
          "Merging dataframes",
          "Joining dataframes",
          "Combining Dataframes Recap",
          "Advanced Operations Introduction",
          "Basic Sorting",
          "Sorting by multiple rules",
          "Resampling basics time and how (mean, sum etc)",
          "Resampling to ohlc",
          "Correlation And Covariance Part1",
          "Correlation and Covariance part 2",
          "Mapping custom functions",
          "Graphing percent change of income groups",
          "Buffering Basics",
          "Buffering Into And Out Of Hdf5",
          "Advanced Operations Recap",
          "Working with Databases Introduction",
          "Writing to reading from database into a data frame",
          "Resampling data and preparing graph",
          "Finishing Manipulation And Graph",
          "Section Conclusion"
        ],
        "Learn Python Django From Scratch": [
          "Introduction",
          "Overview of Final Project",
          "Introduction to Django",
          "Django Installation and Configuration",
          "MVC Applied to Django",
          "Basic Views and Templates",
          "Models, Database and Migration",
          "Django Recap",
          "Creating a User Authentication System Introduction",
          "Setting up a simple user authentication system",
          "Login and session variables",
          "Social registration: Allowing user to register with their preexisting social",
          "Creating a User Authentication System Recap",
          "Frontending Introduction",
          "Template language and static files usage",
          "Twitter Bootstrap Integration",
          "Static File Compression and Template Refactoring",
          "Frontending Recap",
          "E-Commerce Introduction",
          "Preparing The Storefront",
          "Adding a Shopping Cart",
          "PayPal Integration",
          "Stripe Integration with Ajax",
          "E-Commerce Recap",
          "File Uploading, Ajax and E-mailing Introduction",
          "File Uploading",
          "Working with Forms",
          "Advanced e-mailing",
          "File Uploading, Ajax and E-mailing Recap",
          "Geolocation and Map Integration Introduction",
          "Adding a Map Representation",
          "Advanced Map Usage",
          "Geolocation and Map Integration Recap",
          "Django Power-Ups: Services and Signals Introduction",
          "Building a Web Service with Tastypie",
          "Django Signals",
          "Django Power-Ups: Services and Signals Recap",
          "Testing Your Site Introduction",
          "Adding the debug toolbar",
          "Unit testing",
          "Logging",
          "Testing Your Site Recap",
          "Section Conclusion"
        ],
        "Python game development - Create a flappy bird clone": [
          "Introduction to the Section & the Game",
          "Graphics Setup",
          "Creating Input Controls",
          "Boundaries, Crash Events and Menu Creation",
          "Creating Obstacles Using Polygons",
          "Game Logic - Using Block Logic",
          "Game Logic - Success Or Failure",
          "Creating the Score Display",
          "Adding Colors and Difficulty Levels"
        ],
        "Python Object Oriented Programming Fundamentals": [
          "Introduction",
          "Installing Python IDE",
          "Essential Constructs Introduction",
          "Class Construct",
          "The Special __init__ Method",
          "Attributes",
          "Methods",
          "Class Variables",
          "Obtaining Class Attribute Values",
          "The Main Method",
          "Essential Constructs Recap",
          "Exercise 1 Live Demo",
          "Project Explanation",
          "The Python Object Introduction",
          "How to Create an Object",
          "Obtaining Object Attributes",
          "Changing Object Attribute Values",
          "Accessing Objects Methods Part 1",
          "Accessing Objects Methods Part 2",
          "The PHP Object Recap",
          "Exercise 2 Live Demo",
          "Project Explanation",
          "The Constructor/Destructor Magic Methods Introduction",
          "The Constructor Part 1",
          "The Constructor Part 2",
          "Deconstructor",
          "Public Access modifiers",
          "Private Access Modifiers",
          "The Constructor/Destructor Magic Methods Recap",
          "Exercise 3 Live Demo",
          "Project Explanation",
          "Class Inheritance Introduction",
          "Building The Child Class Part 1",
          "Building The Child Class Part 2",
          "Building The Child Class Part 3",
          "Building The Parent Class Part 1",
          "Building The Parent Class Part 2",
          "Importing Classes",
          "Overriding Methods",
          "Class Inheritance Recap",
          "Exercise 4 Live Demo",
          "Project Explanation",
          "Final Project Live Demo",
          "Final Project Explanation Part 1",
          "Final Project Explanation Part 2",
          "Section Conclusion"
        ],
        "Python Scrapy": [
          "Introduction",
          "Scrapy Introduction",
          "Text Extraction",
          "Scrapy Execution",
          "Scraping with CSS",
          "Another XPath Scrape",
          "Project Instructions",
          "Project Solution",
          "Section Summary"
        ],
        "Python Scipy": [
          "Introduction",
          "Basic Computations",
          "Complex Functions",
          "Integrals",
          "Double Integrals",
          "Statistics",
          "Project (Linear Algebra)",
          "Section Summary"
        ],
        "Python NumPy": [
          "Introduction",
          "What is Numpy",
          "Basic Mathematics",
          "Tour of Numpy I",
          "Tour of Numpy II",
          "Matrices",
          "Deviations",
          "Eigen Values",
          "Covariance",
          "Project (Determinants)",
          "Section Summary"
        ]
      },
      "requirements": [
        "PC, Mac or Linux Operating Systems",
        "Up to $5 for a Digital Ocean VPS. VPS cost can be per hour, at an average of $5 a month, so the cost of the server can actually be much less than this.",
        "Python 3 should be installed",
        "The course is taught using PyCharm as the editor, as there is a free multiplatform version available. This is not required, but recommended",
        "Git is used for version control throughout the course, so it is advised to have it installed and ready for use"
      ],
      "description": "Python programming is one of the most demanded skill sets in today's job market, and for good reason. Python allows you to do just about anything you can think of; web development, data analytics, game development - even controlling robots!\nThis Python Programming Professional Bundle is designed to get you up to speed with all the major Python skills you need right now. Learn on your own time and at your own pace, just be sure to learn this stuff.\nWhat Can You Learn?\nPython Programming for Beginners: If your knowledge of Python and programming is limited – or even non-existent – then this course is the perfect starting point for you. You'll be guided through the installation process and the various features and functions of Python, and then you'll put your knew found knowledge to practical use by solving 'real life' programming problems. Ideal for both programming beginners or experienced programmers new to Python.\nPython Web Programming: Python is one of the most concise and easily understood programming languages out there, and one of its most popular applications is the web. This is the definitive python web programming course, designed for programmers, web developers, app creators, and anyone who wants to become 'code literate'. Not only will you acquire an in-depth understanding of the programming language and its application for the web, you'll get hands-on experience building programs too.\nPython Game Development: Create a Flappy Bird Clone: As well as web development, data visualisation and analysis, and a host of other applications, Python is a programming language perfectly suited to game development. With this course, you'll learn the easy way. Rather than working through hours of lectures and exercises, you'll literally create a game as you go. Who said picking up new skills can't be fun?\nData Visualisation with Python and Matplotlib: Companies are finally waking up to the benefits that big data and data analysis can have for their business. However, the majority of them lack the know-how to turn this data into something easily understood, readable, and presentable. That's where data visualisation comes in. Using Python in conjunction with Matplotlib, you can create just about any 2D or 3D graphs, bar charts, scatter plots, and more.\nData Analysis with Python and Pandas: Data analysis is one of the most sought-after skills from the biggest companies in the world, and guesses what? Python can be used to do it. Working with Pandas, you'll learn how to import and export data in a wide variety of forms, and organise and manipulate it into whatever way you need. Combined with our Data Visualisation with Python course below, it's all your need to become a genuine data guru.\nLearn Python Django from Scratch: If you already have some experience with Python, web development or both, then this is the perfect course to take your expertise to the next level. Working in conjunction with Django you'll create a website from scratch featuring map integration, e-commerce functionality and a host of other complex features. Master this skillset, and you'll be all set to take the web by storm with database-driven yet simple and beautiful sites.\nGo Where the Money is\nCompanies such as Google, Yahoo!, Disney, Nokia, and IBM all use Python. In fact, among programming languages, Python had the largest year-on-year job demand growth — at 19% — as of March 2013. This growth has been increasing ever since. Notably, the overall hiring demand for IT professionals dipped year over year by 5% as of January 2014, except for Python programmers which increased by 8.7%. In New York, Python developers ranked #8 of the most in-demand tech workers, making an average of $106k/year. On the other side of the Atlantic, Python programmers also enjoy a strongly rising demand for their skills as shown by the following graph.",
      "target_audience": [
        "Programmers",
        "Python developers",
        "People who want to create web applications",
        "People who want to learn programming",
        "People interested in Python databases",
        "People seeking to learn a variety of ways to visually display data",
        "People who seek to gain a deep understanding of options for visualizing data.",
        "People looking for methods to normalize the handling of multiple data types and databases"
      ]
    },
    {
      "title": "Python 3 For Beginners in 2020!",
      "url": "https://www.udemy.com/course/python-masterclass-for-beginners/",
      "bio": "Python for beginners! Create Python 3 Real-World Applications from Scratch. In this Python 3 Course.",
      "objectives": [
        "Learn Python 3 even if you are beginner",
        "Basic Python features like variables, conditions, loops, functions, list, tuples, sets, dictionaries...",
        "Learn class based Object Oriented Programming in Python",
        "Create Python GUI with TkInter",
        "Build several real-world applications like Text Editor and Paint",
        "Have great understanding of Python 3 and it's features"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Say Hello :)",
          "Join our Facebook group for more FREE educational content!",
          "Install Visual Studio"
        ],
        "Installing Python": [
          "Install Python",
          "Install Python Extension",
          "First Program \"Hello World\""
        ],
        "Python Basics": [
          "Variables",
          "Starting Of Operations",
          "Closer look at numbers",
          "Casting (Changing the data type)",
          "Strings",
          "Getting the input",
          "FIRST APPLICATION: Calculator",
          "Advanced Operators",
          "Basics Of Python"
        ],
        "Python Conditions": [
          "Logical Operators",
          "Conditions (if)",
          "Conditions (Else if)",
          "Conditions (Else)",
          "APPLICATION: Conditions",
          "Conditions"
        ],
        "Python Data Structures": [
          "Lists",
          "Tuples",
          "Sets",
          "List Operations",
          "Tuple Operation",
          "Set Operation",
          "Data Structures in Python"
        ],
        "Loops in Python": [
          "For Loop",
          "Range",
          "While Loop",
          "Break, Continue",
          "Dictionaries",
          "Loops in Python"
        ],
        "Python I/0": [
          "Creating new Files",
          "Writing & Appending",
          "Read Files",
          "Deleting Files and Directories",
          "Try, Except, Finally"
        ],
        "Functions in Python": [
          "Python Functions 1",
          "Python Function 2",
          "Why to use functions?",
          "Recursion",
          "Debugging Recursion"
        ],
        "Modules in Python": [
          "Modules and how to import them",
          "Modules 2",
          "How to Install Modules (PIP)"
        ],
        "OOP in Python": [
          "What is OOP?",
          "Class",
          "Class, Attribute, Instances",
          "Self, Methods",
          "Constructor, Deleting",
          "What is Inheritance?",
          "Inheritance",
          "Protection of Attributes and Methods",
          "Iterators"
        ]
      },
      "requirements": [
        "None"
      ],
      "description": "Do you want to learn Python 3?\nYou have come to the right place, welcome to the Python 3 for beginners course,\nwhere you will learn how to create real-world Python applications from scratch\nWhy should you learn Python?\nPython is one of the fastest-growing programming languages on the planet.\nEven compared to other popular languages. Python is way ahead.\nIt is also projected to be one of the most popular programming languages way into the future\nIt doesn't matter whether you want to focus on Web applications, Games, Machine learning or Data Science, Python is used everywhere.\nWho is this course for?\nBeginners with no experience with python 3\nProgrammers with experience in other programming languages\nAnyone who knows the basics of python but wants to learn more in-depth\nAnyone who wants to start with programming\nWhat you can find inside the course?\nHow to install Python 3\nHow to install Visual Studio Code\nVariables\nOperations with Variables\nCasting\nCode Branching (if, else if, else)\nPython Data Structures (Lists, Tuples, Sets, Dictionaries)\nLoops (for, while)\nBreak & continue statements\nWork with files (create, open, write, append)\nException Handling\nFunctions\nRecursive Functions\nHow to debug applications\nModules and PIP\nObject-Oriented Programming\nInheritance\nProtection\nIterators\nSimple Algorithms (for improvement of problem-solving skills)\nTkInter GUI\nFrames, Buttons, Entry, Grid, Menu, Canvas, Rectangles, Lines, Oval...\nYou will also create real-world graphical applications:\nTODO list\ntext editor\ngraphical editor\n\n\nWe have over 80 high-quality video lectures\ncombined with articles and quizzes.\nSo that you can test your python skills.\n\n\nIf you don't understand something or if you need help with something. You can always reach out to me. Mostly I respond within a day.\n\n\nAt the end of this course, you will get a certificate of completion.\nThat you can put on your resume or on your LinkedIn profile.\nThe course comes with an amazing 30-day money-back guarantee\nSo you can try the course, risk-free.\n\n\nSo do you want to learn Python 3?\nEnroll today and I will see you in the course",
      "target_audience": [
        "Anyone who wants to start with Python 3 programming",
        "Anyone who wants to create applications with TkInter and Python 3",
        "Even complete beginner who have no experience with programming in Python"
      ]
    },
    {
      "title": "Learn to Program with C# from Scratch | C# Immersive",
      "url": "https://www.udemy.com/course/learn-coding-with-c-from-scratch-c-comprehensive-course/",
      "bio": "Mastering C# 10 with the modern features, know how it works. Become A Professional C# Developer in no time!",
      "objectives": [
        "Introduction to coding with C#",
        "C# Tools and Setup",
        "Variables, Data Types, Conversions, Operators, and Doing Math",
        "Strings and Working with text using C# Techniques",
        "Making Different Decisions: if - else if - else, and switch - case",
        "Loops, Repetitions, and Iterators: while, do while, for, and foreach",
        "Working with Arrays in depth",
        "The Power of Methods in C#",
        "Object-Oriented Programming: Classes, Objects, Access Modifiers, and More",
        "Interfaces and Enumerations"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience needed. You will learn everything you need to know"
      ],
      "description": "Hello and welcome to the Learn to Program with C# from Scratch | C# Immersive Course.\nIn this course, you will learn all the C# fundamentals needed to become a Professional C# Programmer quickly and efficiently.\nC# is so popular, powerful, easy, simple, Object-Oriented, and widely used Programming language.\nYou can use the C# programming language for building:\nDesktop Applications\nMobile Applications\nWeb Applications\nGames using Unity\nVR Applications\nAll that and More\nTherefore, learning this programming language opens up many opportunities for you.\nAnd in this comprehensive course, you will master all the C# 10 concepts with the modern features.\nAll the course concepts will be explained first theoretically, and then practically using the Visual Studio Community 2022 IDE.\nC# has a great community, So if you encounter any problems, you will find the solution easily.\nBy the end of this course, you'll master:\nIntroduction to coding with C#\nC# working tools\nVariables, Data Types, Conversions, Operators, and Doing Math\nStrings and Working with text using C# Techniques\nMaking Different Decisions: if - else if - else, and switch - case\nLoops, Repetitions, and Iterators: while, do while, for, and foreach\nWorking with Arrays in depth\nThe Power of Methods in C#\nObject-Oriented Programming: Classes, Objects, Access Modifiers, and More\nInterfaces and Enumerations\nAll that and more with real examples\nThis course will be constantly updated with the support of the instructor.\nSo, what are you waiting for, enroll now to go through a comprehensive course of one of the most popular and powerful programming languages on the market for , C#.\nBecome A Professional C# Developer in no time!\nWe have a lot to cover in this course.\nLet's get started!",
      "target_audience": [
        "C# New Developers",
        "Programming and Software Development Engineering Newbies",
        "Programmers, Developers, and Engineers who know other programming language but are new to C#"
      ]
    },
    {
      "title": "Become a Junior Java Software Developer",
      "url": "https://www.udemy.com/course/become-a-junior-java-software-developer/",
      "bio": "Complete practical and conceptual Java programming course for beginners",
      "objectives": [
        "Be comfortable with writing and designing Java applications",
        "Apply core concepts of object-oriented programming to a project",
        "Build holistic, real-world practical applications from the ground up",
        "Write common algorithms covered in computer science courses",
        "Talk confidently about Java programming and object-oriented programming",
        "Network with recruiters, hiring managers, and tech professionals",
        "Walk into your first job interview and code review with confidence",
        "Invitation to participate in internship through SDET University!"
      ],
      "course_content": {},
      "requirements": [
        "Basic experience working with a computer",
        "Basic understanding of analytical problem solving",
        "Windows or Mac (course taught from Windows)"
      ],
      "description": "Finally, a complete Java software development essentials course that includes real internship opportunities for qualified students!\nI not only teach the core topics of Java, but also covers necessary analytical skills like Algorithms and practical skills like reading and handling data from files, and job-specific skills like building a Student database and analyzing the criteria of passwords.\nThis course was developed by a combination of developers, recruiters, and business managers that together outlined and curated a curriculum based on the hiring needs and requirements in the industry. Designed for individuals looking to kick-start a new career in software development, this course starts at the beginning assuming no previous knowledge in programming.\nAll relevant slides and notes\nPractical training\nConceptual lectures\nLearning assignments\nMini assessment quizzes\nI focus on keeping the training practical and applicable to a real-world project. While learning the concepts is important, you must demonstrate your knowledge by being able to write programs, analyze what’s happening behind the scenes, and have a working understanding of basic algorithms and computations.\nWhile not created based on Oracle’s certification program, this course will help prepare you for the Programmer Level I Exam to earn the Oracle Certified Associate certificate.\nGet comfortable with controlling the flow of programs\nUnderstand and apply the core concepts of object-oriented programming\nKnow the different data structures and practice traversing through arrays and collections\nMaster the common algorithms in computer science\nLearn topics conceptually and practically to ace your job interview",
      "target_audience": [
        "Career-changers looking to start from scratch",
        "Recent graduate looking to get job-specific training",
        "Current student looking preparing for the job market",
        "QA / manual testers looking to transition to automation"
      ]
    },
    {
      "title": "The Mac Terminal Course for Beginners",
      "url": "https://www.udemy.com/course/the-mac-terminal-course/",
      "bio": "Learn the Mac Terminal From Total Beginner to writing your first Script, with real world exercises solved in details",
      "objectives": [
        "Move within different directories from anywhere to anywhere",
        "Use the manual with ease",
        "Create any kind of files, copy, delete or rename files or folders",
        "Combine commands together",
        "Redirect the output of any command into different files",
        "Introduction to create your own commands",
        "Change the ownership of files and foolders",
        "And much more..."
      ],
      "course_content": {
        "Introduction and Basic Informations": [
          "Introduction",
          "Locate The Terminal",
          "Terminal Settings",
          "First Fundamental Commands",
          "Terminal Overview",
          "Pdf for the Lessons"
        ],
        "KNOW your files and folders": [
          "Basic Commands",
          "Organization of files in Mac\\Linux Systems",
          "Ls -L. Understand the Terminal Output",
          "Ls Command Options",
          "Ls and File Command",
          "More Useful Commands",
          "The Manual",
          "Tab Completion",
          "Exercises Section 2",
          "Solutions Exercises Section 2"
        ],
        "ACCESS your files and folders": [
          "Change Directory: cd",
          "Text files: Less, More, Cat.",
          "Any file: Open, xdg-open",
          "BONUS: Shortcuts",
          "Exercises Section 3",
          "Solutions Exercises Section 3"
        ],
        "CREATE/EDIT your files and folders": [
          "Create files: Touch",
          "Edit text files: Nano",
          "Rename and move files: mv",
          "Copy and remove Files: cp, rm",
          "Star Sign: *",
          "Directories",
          "Redirect text content",
          "Exercises Section 4",
          "Solution Exercises Section 4"
        ],
        "Permissions and Ownership": [
          "Super User: Sudo",
          "Change Ownership: Chown-Chgrp",
          "Change Ownership to folders",
          "NEW! Change Permission: Chmod",
          "Exercises Section 5",
          "Solution Exercises Section 5"
        ],
        "Advanced Topics": [
          "Pipe",
          "Find inside your computer: Find",
          "Find in Text: Grep",
          "Alias Commands",
          "NEW! Variables",
          "NEW! Read From Input: Read",
          "NEW! Execute Files: ./",
          "NEW! Location of Commands: Which",
          "NEW! Expand Command: $()",
          "UNIX Login file ( IMPORTANT )",
          "Exercises Section 6",
          "Solution Exercises Section 6",
          "Bonus Lectures. Secure Your Knowledge and Skills Now."
        ],
        "Bonus Section: Introduction to Shell Scripting": [
          "Intro to Shell Scripting",
          "Execute",
          "The First Script",
          "Editors and Read",
          "Script Open",
          "Arithmetic Expressions",
          "IF Conditions",
          "Else",
          "IF on Strings",
          "For Loops"
        ],
        "Conclusion!": [
          "Conclusion!"
        ],
        "Bonus Lecture": [
          "Bonus Lectures :A Subject for Super-Programmers"
        ]
      },
      "requirements": [
        "Own a Mac",
        "Very basic computer skills"
      ],
      "description": "*** Course access includes Homework exercises solved in detailed Video Lessons and 1-on-1 instructor support ***\nYou can finally understand and use the your Terminal.\nWhether you're starting from square one or trying to get better with the Command Line on the Mac, this is the right place to be. This course explain the command line using a  Mac, remember also that all the commands are the same in any Linux system.\nEverything is explained at a slow pace and thoroughly to make sure you can follow everything.\nThis course will give you a clear understanding of how your Terminal works. While most Terminal courses focus on a list of commands I will let you understand how it works with real world examples designed to make you independent.\n\nFor those who want to go to the next Level, You will also find an introduction to Bash Shell Scripting\nBy the end of the course you'll be writing terminal commands with ease allowing you to:\n\nGet any information about any files or folders in your mac\nUse the manual with ease\nMove within different directories from anywhere to anywhere\nOpen any kind of file with the proper application\nCreate any kind of files, copy, delete or rename files or folders\nRedirect the output of any command into different files\nCombine commands together\nFind anything in your system and search any file with different options\nCustomize your shell\nUnderstand the permission system\nChange the ownership of files or folders, and change the group ownership\nCreate  Shell Scripts\nand much more...",
      "target_audience": [
        "Any Mac user who is not yet familiar with the terminal",
        "Terminal users who have basic skills but want to get better at it",
        "Programmers, developers or software engineers needing to learn the Terminal.",
        "Students looking for an engaging and highly interactive approach to Terminal training"
      ]
    },
    {
      "title": "[NEW] Spring Boot 3, Spring 6 & Hibernate for Beginners",
      "url": "https://www.udemy.com/course/spring-hibernate-tutorial/",
      "bio": "Spring Boot 3: Learn Spring 6, Spring Core, Spring REST, Spring MVC, Spring Security, Thymeleaf, JPA, Hibernate, MySQL",
      "objectives": [
        "NEW FOR SPRING BOOT 3, SPRING 6 and IntelliJ (free version)",
        "You will TYPE IN EVERY LINE of code with me in the videos. I EXPLAIN every line of code to help you learn!",
        "LEARN key Spring Boot 3 features: Core, Annotations, Java Config, Spring REST, Spring MVC, AOP, Hibernate/JPA and Maven",
        "I am a RESPONSIVE INSTRUCTOR ... post your questions and I will RESPOND in 24 hours.",
        "POPULAR VIDEOS for: Spring Boot 3, Spring Boot REST APIs, Spring Boot Security, Spring Data JPA, Spring Data REST, OpenAPI, Swagger and Thymeleaf",
        "Join an ACTIVE COMMUNITY of 400,000+ students that are already enrolled! Over 82,000+ Reviews - 5 STARS",
        "Develop code using MODERN development tools: IntelliJ (free version) and Maven",
        "You can DOWNLOAD all source code and PDFs. Perfect for offline LEARNING and REVIEW.",
        "Students have LANDED NEW JOBS with the skills from this course. Spring Boot and Hibernate developers are in HIGH-DEMAND!"
      ],
      "course_content": {
        "NEW - Spring Boot 3 Quick Start": [
          "Introduction",
          "How To Take This Course and How To Get Help",
          "Downloading the Source Code, PDFs and Course Links",
          "Java Development Environment Checkpoint",
          "Spring Boot Overview",
          "Spring Boot Initialzr Demo",
          "Spring Boot - Create a REST Controller",
          "Spring Projects",
          "What is Maven?",
          "Maven Project Structure",
          "Maven Key Concepts",
          "Exploring Spring Boot Project Files - Part 1",
          "Exploring Spring Boot Project Files - Part 2",
          "Spring Boot Starters",
          "Spring Boot Parents for Starters",
          "Spring Boot Dev Tools - Overview",
          "Spring Boot Dev Tools - Coding",
          "Spring Boot Actuator - Overview",
          "Spring Boot Actuator - Accessing Endpoints - Part 1",
          "Spring Boot Actuator - Accessing Endpoints - Part 2",
          "Spring Boot Actuator - Securing Endpoints - Overview",
          "Spring Boot Actuator - Securing Endpoints - Coding",
          "Run Spring Boot apps from the Command Line - Overview",
          "Run Spring Boot apps from the Command Line - Prep",
          "Run Spring Boot apps from the Command Line - Microsoft Windows",
          "Run Spring Boot apps from the Command Line - macOS / Linux",
          "Injecting Custom Application Properties - Overview",
          "Injecting Custom Application Properties - Coding",
          "Configuring the Spring Boot Server - Overview",
          "Configuring the Spring Boot Server - Coding"
        ],
        "NEW - Spring Core": [
          "What is Inversion of Control?",
          "Defining Dependency Injection - Overview - Part 1",
          "Defining Dependency Injection - Overview - Part 2",
          "Constructor Injection - Coding - Part 1",
          "Constructor Injection - Coding - Part 2",
          "IDE Warning - No Usages",
          "Constructor Injection - Behind the Scenes",
          "Component Scanning - Overview",
          "Component Scanning - Coding - Part 1",
          "Component Scanning - Coding - Part 2",
          "Setter Injection - Overview",
          "Setter Injection - Coding",
          "Field Injection",
          "Qualifiers - Overview",
          "Qualifiers - Coding - Part 1",
          "Qualifiers - Coding - Part 2",
          "Primary - Overview",
          "Primary - Coding",
          "Lazy Initialization - Overview",
          "Lazy Initialization - Coding - Part 1",
          "Lazy Initialization - Coding - Part 2",
          "Bean Scopes - Overview",
          "Bean Scopes - Coding",
          "Bean Lifecycle Methods - Overview",
          "Bean Lifecycle Methods - Coding",
          "Special Note about Prototype Scope - Destroy Lifecycle Method",
          "Java Config Bean - Overview",
          "Java Config Bean - Coding - Part 1",
          "Java Config Bean - Coding - Part 2"
        ],
        "NEW - Hibernate/JPA CRUD": [
          "Hibernate / JPA Overview",
          "Hibernate, JPA and JDBC",
          "Setting Up Development Environment",
          "Setting Up Database Table - Overview",
          "Setting Up Database Table - Coding",
          "Setting Up Spring Boot Project - Overview",
          "Setting Up Spring Boot Project - Coding - Part 1",
          "Setting Up Spring Boot Project - Coding - Part 2",
          "JPA Annotations - Overview",
          "JPA Annotations - Coding",
          "Saving a Java Object with JPA - Overview - Part 1",
          "Saving a Java Object with JPA - Overview - Part 2",
          "Saving a Java Object with JPA - Coding - Part 1",
          "Saving a Java Object with JPA - Coding - Part 2",
          "Primary Keys",
          "Changing Index of MySQL Auto Increment",
          "Reading Objects with JPA - Overview",
          "Reading Objects with JPA - Coding",
          "Querying Objects with JPA - Overview",
          "Querying Objects with JPA - Coding - Part 1",
          "Querying Objects with JPA - Coding - Part 2",
          "Updating Objects with JPA - Overview",
          "Updating Objects with JPA - Coding",
          "Deleting Objects with JPA - Overview",
          "Deleting Objects with JPA - Coding - Part 1",
          "Deleting Objects with JPA - Coding - Part 2",
          "Create Database Tables from Java Code - Overview",
          "Create Database Tables from Java Code - Coding - Part 1",
          "Create Database Tables from Java Code - Coding - Part 2"
        ],
        "NEW - REST CRUD APIs": [
          "What Are REST Services - Part 1",
          "What Are REST Services - Part 2",
          "JSON Basics",
          "Spring Boot REST HTTP Basics",
          "Postman Demo",
          "Spring Boot REST Controller - Overview - Part 1",
          "Spring Boot REST Controller - Overview - Part 2",
          "Spring Boot Rest Controller - Coding",
          "JSON Jackson Data Binding",
          "Spring Boot REST POJO - Overview",
          "Spring Boot REST POJO - Coding - Part 1",
          "Spring Boot REST POJO - Coding - Part 2",
          "Spring Boot REST Path Variables - Overview",
          "Spring Boot REST Path Variables - Coding - Part 1",
          "Spring Boot REST Path Variables - Coding - Part 2",
          "Spring Boot REST Exception Handling - Overview - Part 1",
          "Spring Boot REST Exception Handling - Overview - Part 2",
          "Spring Boot REST Exception Handling - Coding - Part 1",
          "Spring Boot REST Exception Handling - Coding - Part 2",
          "Spring Boot REST Exception Handling - Coding - Part 3",
          "Spring Boot REST Exception Handling - Coding - Part 4",
          "Spring Boot REST Global Exception Handling - Overview",
          "Spring Boot REST Global Exception Handling - Coding",
          "Spring Boot REST API Design - Best Practices",
          "Spring Boot REST API Design - API Design of Real-Time Projects",
          "Spring Boot REST Project Overview",
          "Spring Boot REST Setup Sample Data",
          "Spring Boot REST Create Project",
          "Spring Boot REST DAO",
          "Spring Boot REST DAO - Coding - Part 1",
          "Spring Boot REST DAO - Coding - Part 2",
          "Spring Boot REST DAO - Coding - Part 3",
          "Spring Boot Define Service Layer - Overview",
          "Spring Boot Define Service Layer - Coding",
          "Spring Boot DAO: Add, Update, Delete - Overview",
          "Spring Boot DAO: Add, Update, Delete - Coding",
          "Spring Boot Service: Add, Update, Delete - Coding",
          "Spring Boot REST: Get Single Employee - Coding",
          "Spring Boot REST: Add Employee - Coding",
          "Spring Boot REST: Update Employee - Coding",
          "Spring Boot REST: PATCH - Overview - Part 1",
          "Spring Boot REST: PATCH - Overview - Part 2",
          "Spring Boot REST: PATCH - Coding - Part 1",
          "Spring Boot REST: PATCH - Coding - Part 2",
          "Spring Boot REST: PATCH - Coding - Part 3",
          "Spring Boot REST: Delete Employee - Coding",
          "Spring Boot REST: Spring Data JPA - Overview",
          "Spring Boot REST: Spring Data JPA - Coding - Part 1",
          "Spring Boot REST: Spring Data JPA - Coding - Part 2",
          "Spring Boot REST: Spring Data REST - Overview",
          "Spring Boot REST: Spring Data REST - Coding - Part 1",
          "Spring Boot REST: Spring Data REST - Coding - Part 2",
          "Spring Boot REST: Spring Data REST Configs and Sorting - Overview",
          "Spring Boot REST: Spring Data REST Configs and Sorting - Coding",
          "Spring Boot REST: OpenAPI and Swagger - Overview",
          "Spring Boot REST: OpenAPI and Swagger - Coding - Part 1",
          "Spring Boot REST: OpenAPI and Swagger - Coding - Part 2",
          "Spring Boot REST: OpenAPI and Swagger - Coding - Part 3",
          "Spring Boot REST: OpenAPI and Swagger - Coding - Part 4",
          "Spring Boot REST: Using Swagger with Spring Data REST"
        ],
        "NEW - REST API Security": [
          "Spring Boot REST API Security Overview",
          "Spring Boot REST API Security - Coding - Part 1",
          "Spring Boot REST API Security - Coding - Part 2",
          "Spring Boot REST API Security - Basic Configuration - Overview",
          "Spring Boot REST API Security - Basic Configuration - Coding",
          "Spring Boot REST API Security - Restrict URLs based on Roles - Overview",
          "Spring Boot REST API Security - Restrict URLs based on Roles - Coding - Part 1",
          "Spring Boot REST API Security - Restrict URLs based on Roles - Coding - Part 2",
          "Spring Boot REST API Security - Restrict URLs based on Roles - Coding - Part 3",
          "403 ERROR with PUT REQUEST - Spring Data REST",
          "Spring Boot REST API Security - PATCH - Overview",
          "Spring Boot REST API Security - PATCH - Coding",
          "Spring Boot REST API Security - JDBC Authentication - Plain Text - Overview",
          "Spring Boot REST API Security - JDBC Authentication - Plain Text - Coding Part 1",
          "Spring Boot REST API Security - JDBC Authentication - Plain Text - Coding Part 2",
          "Spring Boot REST API Security - JDBC Authentication - Plain Text - Coding Part 3",
          "Spring Boot REST API Security - BCrypt Encryption - Overview - Part 1",
          "Spring Boot REST API Security - BCrypt Encryption - Overview - Part 2",
          "Spring Boot REST API Security - BCrypt Encryption - Coding",
          "Spring Boot REST API Security - JDBC Authentication - Custom Tables - Overview",
          "Spring Boot REST API Security -Custom Tables - Coding - Part 1",
          "Spring Boot REST API Security -Custom Tables - Coding - Part 2",
          "Spring Boot REST API Security -Custom Tables - Coding - Part 3",
          "FAQ: Spring Boot REST API Security - Custom Tables with JPA/Hibernate"
        ],
        "NEW - Spring MVC": [
          "Spring Boot - Spring MVC with Thymeleaf - Overview",
          "Spring Boot - Spring MVC with Thymeleaf - Coding - Part 1",
          "Spring Boot - Spring MVC with Thymeleaf - Coding - Part 2",
          "Spring Boot - Spring MVC with Thymeleaf and CSS - Overview",
          "Spring Boot - Spring MVC with Thymeleaf and CSS - Coding",
          "Spring Boot - Spring MVC Behind the Scenes",
          "Spring Boot - Hello World Form and Model Overview",
          "Spring Boot - Hello World Form and Model - Coding - Part 1",
          "Spring Boot - Hello World Form and Model - Coding - Part 2",
          "Spring Boot - Adding Data to Spring MVC Model - Overview",
          "Spring Boot - Adding Data to Spring MVC Model - Coding - Part 1",
          "Spring Boot - Adding Data to Spring MVC Model - Coding - Part 2",
          "Spring Boot - Spring MVC Binding Request Params - Overview",
          "Spring Boot - Spring MVC Binding Request Params - Coding",
          "Spring Boot - GetMapping and PostMapping - Overview",
          "Spring Boot - GetMapping and PostMapping - Coding - Part 1",
          "Spring Boot - GetMapping and PostMapping - Coding - Part 2",
          "Spring Boot - Spring MVC Form Data Binding - Text Fields - Overview",
          "Spring Boot - Spring MVC Form Data Binding - Text Fields - Coding - Part 1",
          "Spring Boot - Spring MVC Form Data Binding - Text Fields - Coding - Part 2",
          "Spring Boot - Spring MVC Form Data Binding - Text Fields - Coding - Part 3",
          "Spring Boot - Spring MVC Form Data Binding - Drop-Down Lists - Overview",
          "Spring Boot - Spring MVC Form Data Binding - Drop-Down Lists - Coding - Part 1",
          "Spring Boot - Spring MVC Form Data Binding - Drop-Down Lists - Coding - Part 2",
          "Spring Boot - Spring MVC Form Data Binding - Radio Buttons - Overview",
          "Spring Boot - Spring MVC Form Data Binding - Radio Buttons - Coding - Part 1",
          "Spring Boot - Spring MVC Form Data Binding - Radio Buttons - Coding - Part 2",
          "Spring Boot - Spring MVC Form Data Binding - Check Boxes - Overview",
          "Spring Boot - Spring MVC Form Data Binding - Check Boxes - Coding - Part 1",
          "Spring Boot - Spring MVC Form Data Binding - Check Boxes - Coding - Part 2",
          "Spring Boot - Spring MVC Validation - Overview",
          "Spring Boot - Spring MVC Validation - Setup Dev Environment",
          "Spring Boot - Spring MVC Validation - Required Fields - Overview",
          "Spring Boot - Spring MVC Validation - Required Fields - Coding - Part 1",
          "Spring Boot - Spring MVC Validation - Required Fields - Coding - Part 2",
          "Spring Boot - Spring MVC Validation - Required Fields - Coding - Part 3",
          "Spring Boot - Spring MVC Validation - Required Fields - Coding - Part 4",
          "Spring Boot - Spring MVC Validation - Required Fields - Coding - Part 5",
          "Spring Boot - Spring MVC Validation - @InitBinder - Overview",
          "Spring Boot - Spring MVC Validation - @InitBinder - Coding",
          "Spring Boot - Spring MVC Validation - Validate a Number Range - Overview",
          "Spring Boot - Spring MVC Validation - Validate a Number Range - Coding",
          "Spring Boot - Spring MVC Validation - Applying Regular Expressions - Overview",
          "Spring Boot - Spring MVC Validation - Applying Regular Expressions - Coding",
          "Spring Boot - Spring MVC Validation - Make Integer Fields Required",
          "Spring Boot - Spring MVC Validation - Strings for Int Fields and Custom Messages",
          "Spring Boot - Spring MVC Validation - Debugging Tips for Custom Error Names",
          "Spring Boot - Spring MVC Validation - Custom Validation - Overview - Part 1",
          "Spring Boot - Spring MVC Validation - Custom Validation - Overview - Part 2",
          "Spring Boot - Spring MVC Validation - Custom Validation - Coding - Part 1",
          "Spring Boot - Spring MVC Validation - Custom Validation - Coding - Part 2",
          "Spring Boot - Spring MVC Validation - Custom Validation - Coding - Part 3",
          "Spring Boot - Spring MVC Validation - Custom Validation - Coding - Part 4",
          "Spring Boot - Spring MVC Validation - Custom Validation - Coding - Part 5"
        ],
        "NEW - Spring MVC CRUD": [
          "CRUD Database Project - Overview",
          "CRUD Database Project - Set up",
          "CRUD Database Project - Get Employees - Coding - Part 1",
          "CRUD Database Project - Get Employees - Coding - Part 2",
          "CRUD Database Project - Get Employees - Coding - Part 3",
          "CRUD Database Project - Get Employees - Coding - Part 4",
          "CRUD Database Project - Add Employees - Overview",
          "CRUD Database Project - Add Employee - Coding - Part 1",
          "CRUD Database Project - Add Employee - Coding - Part 2",
          "CRUD Database Project - Add Employee - Coding - Part 3",
          "CRUD Database Project - Update Employee - Overview",
          "CRUD Database Project - Update Employee - Coding",
          "CRUD Database Project - Delete Employee - Overview",
          "CRUD Database Project - Delete Employee - Coding"
        ],
        "NEW - Spring MVC Security": [
          "Spring MVC Security - Overview",
          "Spring MVC Security - Demo",
          "Spring MVC Security - Project Set Up - Part 1",
          "Spring MVC Security - Project Set Up - Part 2",
          "Spring MVC Security - Dev Testing with Private/Incognito Windows",
          "Spring MVC Security - Basic Configuration - Overview",
          "Spring MVC Security - Basic Configuration - Coding",
          "Spring MVC Security - Custom Login Form - Overview - Part 1",
          "Spring MVC Security - Custom Login Form - Overview - Part 2",
          "Spring MVC Security - Custom Login Form - Coding - Part 1",
          "Spring MVC Security - Custom Login Form - Coding - Part 2",
          "Spring MVC Security - Custom Login Form - Coding - Part 3",
          "Spring MVC Security - Login Form Error Message - Overview",
          "Spring MVC Security - Login Form Error Message - Coding",
          "Spring MVC Security - Custom Login Form with Bootstrap - Overview",
          "Spring MVC Security - Custom Login Form with Bootstrap - Coding",
          "Spring MVC Security - Logout - Overview",
          "Spring MVC Security - Logout - Coding",
          "Spring MVC Security - Display User ID and Roles - Overview",
          "Spring MVC Security - Display User ID and Roles - Coding",
          "Spring MVC Security - Restrict URLs Based on Roles - Overview",
          "Spring MVC Security - Restrict URLs Based on Roles - Coding - Part 1",
          "Spring MVC Security - Restrict URLs Based on Roles - Coding - Part 2",
          "Spring MVC Security - Restrict URLs Based on Roles - Coding - Part 3",
          "Spring MVC Security - Restrict URLs Based on Roles - Coding - Part 4",
          "Spring MVC Security - Custom Access Denied Page - Overview",
          "Spring MVC Security - Custom Access Denied Page - Coding - Part 1",
          "Spring MVC Security - Custom Access Denied Page - Coding - Part 2",
          "Spring MVC Security - Display Content Based on Roles - Overview",
          "Spring MVC Security - Display Content Based on Roles - Coding - Part 1",
          "Spring MVC Security - Display Content Based on Roles - Coding - Part 2",
          "Spring MVC Security - JDBC Authentication - Plain Text - Overview",
          "Spring MVC Security - JDBC Authentication - Plain Text - Coding - Part 1",
          "Spring MVC Security - JDBC Authentication - Plain Text - Coding - Part 2",
          "Spring MVC Security - JDBC Authentication - Plain Text - Coding - Part 3",
          "Spring MVC Security - JDBC Authentication - Plain Text - Coding - Part 4",
          "Spring MVC Security - JDBC Authentication - BCrypt Encryption - Overview Part 1",
          "Spring MVC Security - JDBC Authentication - BCrypt Encryption - Overview Part 2",
          "Spring MVC Security - JDBC Authentication - BCrypt Encryption - Coding",
          "Spring MVC Security - JDBC Authentication - Custom Tables - Overview",
          "Spring MVC Security - JDBC Authentication - Custom Tables - Coding - Part 1",
          "Spring MVC Security - JDBC Authentication - Custom Tables - Coding - Part 2",
          "FAQ: Spring MVC Security - Custom Tables with JPA/Hibernate",
          "FAQ: Spring MVC Security - User Registration and Public Landing Page"
        ],
        "NEW - JPA / Hibernate Advanced Mappings": [
          "JPA / Hibernate Advanced Mappings Overview - Part 1",
          "JPA / Hibernate Advanced Mappings Overview - Part 2",
          "@OneToOne Mapping Overview - Part 1",
          "@OneToOne Mapping Overview - Part 2",
          "@OneToOne Mapping Overview - Part 3",
          "@OneToOne Mapping - Database Setup",
          "@OneToOne Mapping - Set up Spring Boot Project - Part 1",
          "@OneToOne Mapping - Set up Spring Boot Project - Part 2",
          "@OneToOneMapping - Coding - Create InstructorDetail entity",
          "@OneToOneMapping - Coding - Create Instructor entity",
          "@OneToOneMapping - Coding - Create the DAO",
          "@OneToOneMapping - Coding - Develop the Main App",
          "@OneToOneMapping - Coding - Run the Main App",
          "@OneToOneMapping - Find Instructor by ID",
          "@OneToOneMapping - Delete Instructor by ID",
          "@OneToOneMapping - Bi-Directional - Overview",
          "@OneToOneMapping - Bi-Directional - Coding - Part 1",
          "@OneToOneMapping - Bi-Directional - Coding - Part 2",
          "@OneToOneMapping - Bi-Directional - Cascade Delete - Coding",
          "@OneToOneMapping - Bi-Directional - Only Delete Instructor Details - Coding",
          "@OneToMany - Overview - Part 1",
          "@OneToMany - Overview - Part 2",
          "@OneToMany - Coding - Set Up Database Tables",
          "@OneToMany - Coding - Create Course entity",
          "@OneToMany - Coding - Annotate Course entity",
          "@OneToMany - Coding - Annotate Instructor entity",
          "@OneToMany - Coding - Create Main App",
          "@OneToMany - Coding - Finish Main App and Run It!",
          "@OneToMany - Fetch Types: Eager vs Lazy - Overview - Part 1",
          "@OneToMany - Fetch Types: Eager vs Lazy - Overview - Part 2",
          "@OneToMany: Fetch Types - Eager vs Lazy - Coding",
          "@OneToMany: Lazy Find Courses - Overview",
          "@OneToMany: Lazy Find Courses - Coding - Part 1",
          "@OneToMany: Lazy Find Courses - Coding - Part 2",
          "@OneToMany - JOIN FETCH Courses - Overview",
          "@OneToMany - JOIN FETCH Courses - Coding - Part 1",
          "@OneToMany - JOIN FETCH Courses - Coding - Part 2",
          "@OneToMany - Update Instructor",
          "@OneToMany - Update Course",
          "@OneToMany - Delete Instructor",
          "@OneToMany - Delete Course",
          "@OneToMany - Uni-Directional - Overview",
          "@OneToMany - Uni-Directional - Coding - Database Set Up",
          "@OneToMany - Uni-Directional - Coding - Create Review Entity",
          "@OneToMany - Uni-Directional - Coding - Refactor Course Entity",
          "@OneToMany - Uni-Directional - Coding - Update DAO and Main App",
          "@OneToMany - Uni-Directional - Coding - Retrieve Course and Reviews",
          "@OneToMany - Uni-Directional - Coding - Delete Course and Reviews",
          "@ManyToMany - Overview - Part 1",
          "@ManyToMany - Overview - Part 2",
          "@ManyToMany - Coding - Set up Database Tables",
          "@ManyToMany - Coding - Set up Spring Boot Project",
          "@ManyToMany - Coding - Create Student entity",
          "@ManyToMany - Coding - Map Course to Student",
          "@ManyToMany - Coding - Map Student to Course",
          "@ManyToMany - Coding - Create Course and Students",
          "@ManyToMany - Coding - Find Course and Students",
          "@ManyToMany - Coding - Find Student and Courses",
          "@ManyToMany - Coding - Add More Courses to Students",
          "@ManyToMany - Coding - Delete Course",
          "@ManyToMany - Coding - Delete Student"
        ],
        "NEW - AOP: Aspect-Oriented Programming": [
          "AOP - The Business Problem",
          "AOP Solution and AOP Use Cases",
          "AOP Concepts and Terminology",
          "Comparing Spring AOP and AspectJ - Part 1",
          "Comparing Spring AOP and AspectJ - Part 2",
          "AOP - @Before Advice - Overview - Part 1",
          "AOP - @Before Advice - Overview - Part 2",
          "AOP - @Before Advice - Coding - AOP Project Set Up",
          "AOP - @Before Advice - Coding - Create Target Object - AccountDAO",
          "AOP - @Before Advice - Coding - Create Aspect",
          "AOP - @Before Advice - Test the AOP Aspect",
          "AOP - Pointcut Expressions - Overview",
          "AOP - Pointcut Expressions - Coding - Match any addAccount Method - Part 1",
          "AOP - Pointcut Expressions - Coding - Match any addAccount Method - Part 2",
          "AOP - Pointcut Expressions - Coding - Match only AccountDAO addAccount",
          "AOP - Pointcut Expressions - Coding - Match any add* Method",
          "AOP - Pointcut Expressions - Coding - Match any Return Type",
          "AOP - Pointcut Expressions - Overview - Match on Method Parameters",
          "AOP - Pointcut Expressions - Coding - Match Method Parameter Types",
          "AOP - Pointcut Expressions - Coding - Match Method with Account and more Params",
          "AOP - Pointcut Expressions - Coding - Match Method with Any Params",
          "AOP - Pointcut Expressions - Coding - Match Any Method in a Package",
          "AOP: Pointcut Declarations - Overview",
          "AOP: Pointcut Declarations - Coding - Part 1",
          "AOP: Pointcut Declarations - Coding - Part 2",
          "AOP: Combining Pointcuts - Overview",
          "AOP: Combining Pointcuts - Coding - Part 1",
          "AOP: Combining Pointcuts - Coding - Part 2",
          "AOP: Ordering Aspects - Overview",
          "AOP: Ordering Aspects - Coding - Part 1",
          "AOP: Ordering Aspects - Coding - Part 2",
          "AOP: Ordering Aspects - Coding - Part 3",
          "AOP: Read Method Arguments with JoinPoints - Overview",
          "AOP: Read Method Arguments with JoinPoints - Coding - Part 1",
          "AOP: Read Method Arguments with JoinPoints - Coding - Part 2",
          "AOP: Progress Check",
          "AOP: @AfterReturning Advice - Overview",
          "AOP: @AfterReturning Advice - Coding - Part 1",
          "AOP: @AfterReturning Advice - Coding - Part 2",
          "AOP: @AfterReturning Advice - Coding - Part 3",
          "AOP: @AfterReturning Advice - Modify Return Value - Overview",
          "AOP: @AfterReturning Advice - Modify Return Value - Coding",
          "AOP: @AfterThrowing Advice - Overview",
          "AOP: @AfterThrowing Advice - Coding - Part 1",
          "AOP: @AfterThrowing Advice - Coding - Part 2",
          "AOP: @After Advice - Overview",
          "AOP: @After Advice - Coding",
          "AOP: @Around Advice - Overview",
          "AOP: @Around Advice - Coding - Part 1",
          "AOP: @Around Advice - Coding - Part 2",
          "AOP: @Around Advice - Coding - Part 3",
          "@Around Advice - Handle Exception - Overview",
          "@Around Advice - Handle Exception - Coding - Part 1",
          "@Around Advice - Handle Exception - Coding - Part 2",
          "AOP: @Around Advice - Rethrow Exception",
          "AOP: Integrating AOP with Spring MVC CRUD App - Overview",
          "AOP: Integrating AOP with Spring MVC CRUD App - Coding - Part 1",
          "AOP: Integrating AOP with Spring MVC CRUD App - Coding - Part 2",
          "AOP: Integrating AOP with Spring MVC CRUD App - Coding - Part 3",
          "AOP: Integrating AOP with Spring MVC CRUD App - Coding - Part 4",
          "AOP: Integrating AOP with Spring MVC CRUD App - Coding - Part 5"
        ]
      },
      "requirements": [
        "Basic Java knowledge is required",
        "Basic HTML knowledge is helpful"
      ],
      "description": "NEW FOR SPRING BOOT 3 AND SPRING 6\nPOPULAR IDE - IntelliJ (free version)\n\n\n#1 BEST SELLING SPRING BOOT & HIBERNATE COURSE ON UDEMY - 440,000+ STUDENTS ENROLLED\nTHIS COURSE HAS THE #1 STUDENT ENROLLMENT OF ANY SPRING BOOT COURSE ON UDEMY!\nOVER 91,000 REVIEWS - 5 STARS!\n\n\nUPDATED TO SPRING BOOT 3\n\n\nTHIS COURSE COVERS SPRING BOOT 3 AND SPRING 6\nLEARN these HOT TOPICS in Spring Boot 3 and Spring 6:\nSpring Boot 3\nSpring Framework 6\nSpring Boot 3 REST API\nSpring Boot 3 Core\nSpring Boot 3 Annotations\nSpring Boot 3 Java Configuration (all Java, no xml)\nSpring Boot 3 and Spring MVC\nSpring Boot 3 Hibernate/JPA CRUD\nSpring Boot 3 Security\nSpring Boot OpenAPI and Swagger\nMaven\n\n\nREAL-TIME PROJECTS\nSpring Boot 3 REST API (with full database CRUD real-time project)\nSpring Boot 3 REST API + OpenAPI and Swagger (with full database CRUD real-time project)\nSpring Boot 3 REST API Security (with password encryption in the database)\nSpring Boot 3 with JPA and Spring Data JPA (with full database CRUD real-time project)\nSpring Boot 3 with Spring Data REST (with full database CRUD real-time project)\nSpring Boot 3 with Spring MVC, Thymeleaf (with full database CRUD real-time project)\nSpring Boot 3 Spring MVC Security (with password encryption in the database)\n\n\n\n\nCOURSE UPDATES\nUpdated course to SPRING BOOT 3 and SPRING 6\n\n\nThis course covers the LATEST VERSIONS of Spring Boot 3, Spring 6 and Hibernate 6!\nBuild a complete Spring Boot REST API + Hibernate/JPA CRUD app ... all from scratch! (real-time project)\nYou will learn about: Spring Boot Core, Spring Boot MVC, Spring Boot Security, Spring Boot REST API, Spring Data JPA, Spring Data REST, Thymeleaf, AOP and Hibernate/JPA ... all connected to a MySQL database\n\n\nBy the end of this course, you will create all of the source code for a complete Spring Boot REST APIs for a full CRUD REST API real-time project.\nYou will also develop a Spring Boot MVC - Hibernate/JPA CRUD real-time project.\n\n\nYou will type in every line of code with me in the videos ... all from scratch.\nI explain every line of code that we create. So this isn't a copy/paste exercise, you will have a full understanding of the code.\n\n\nI am a RESPONSIVE INSTRUCTOR . Post your questions and I will RESPOND in 24 hours.\n\n\nJoin 440,000+ students that are already enrolled!\nOver 91,000+ Reviews! (the most reviews for any Spring Boot & Hibernate course on Udemy, 4x the nearest competitor)\n\n\n=\nSample of the reviews:\nBest Spring Boot course by far across all learning platforms for me. Best course structure and instructor always demonstrates in depth knowledge by covering the necessary basics. Really really incredible good presentation and structure, a lot of other instructors can learn a lot from you Chad. - Muzi P.\n\n\nI worked in some company, so I can say that this course is 100% industry oriented. The best course for learning Spring Framework. Getting replies within 24 hours. - Premang\n\n\nI'm adding to my review following Chad's recent updates to his course to cover Spring Boot, JPA, etc. After finishing the course originally, I found another Spring Boot class, and after working on this other class, I appreciate more what Chad has done here. He's made Spring Boot for CRUD applications with Thymeleaf very easy to follow and learn. I've taken half a dozen other software courses, and while other instructors might be good, Chad is the gold standard here. I can't recommend him highly enough. - Dave Zeltserman\n\n\nThis is the best tutorial I've seen so far for Spring/Hibernate, each step is well explained and the tutorial videos are made to a high standard. I highly recommend this course! - Rob\n\n\nHats off to you Chad, the best Spring fundamentals course I have done on Udemy thus far. You never disappoint. - Morebodi Modise\n\n\nChad is an excellent natural teacher. His course is well organized. He makes difficult concepts very easy to understand. - Julie Hodgson\n\n\n=\nLive Coding - I code all of the real-time projects from scratch\nAll source code is available for download\nResponsive Instructor - All questions answered within 24 hours\n\n\n=\nPDFs of all lectures are available for download\nClosed-Captions / Subtitles available for English and other languages (new!)\nProfessional video and audio recordings (check the free previews)\n\n\n=\nWhat Is Spring Boot?\nSpring Boot is the modern development approach for building enterprise application. Spring Boot minimizes the configuration required for setting up Spring projects. By using Spring Boot, you can accelerate your development speed and leverage the auto-configuration features. This course covers the latest version of Spring Boot 3.\n\n\nWhat Is Spring?\nSpring is an enterprise Java framework. It was designed to simplify Jakarta EE development and make developers more productive. Spring makes use of Inversion of Control and Dependency Injection to promote good software coding practices and speed up development time. This course covers the latest version of Spring 6.\nThis course covers Spring Core, Annotations, All Java Spring Configuration, Spring AOP, Spring MVC, Spring Security, Spring REST, Spring Boot and Spring Data JPA.\n\n\nWhat Is Hibernate/JPA?\nHibernate/JPA is an Object-to-Relational-Mapping (ORM) framework. It simplifies database access for Java applications. By using the framework, you can easily store and retrieve Java objects by setting up some simple configuration mappings.\nThis course covers basic Hibernate/JPA CRUD. Also, advanced Hibernate/JPA mappings are covered for one-to-one, one-to-many and many-to-many.\n\n\nBenefits of Taking This Spring Boot and Hibernate Course\nKnowing Spring Boot and Hibernate can get you a job or improve the one you have. It's a skill that will put you more in demand in the enterprise Java industry, and make your software life easier, that's why it's so popular.\nNearly every job posting asks for skills in Spring Boot and Hibernate!\nThis course will help you quickly get up to speed with Spring Boot and Hibernate. I will demystify the technology and help you understand the essential concepts to build a real Spring Boot and Hibernate application from scratch.\n\n\nYou Will Learn How To\nSpring Boot\nWhat is Spring Boot?\nCreating a Project with Spring Boot Initializr\nDevelop a REST API Controller with Spring Boot\nExplore the Spring Boot Project Structure\nLeverage Spring Boot Starters - A Curated List of Dependencies\nInherit Defaults with Spring Boot Starter Parents\nAutomatically Restart with Spring Boot Dev Tools\nAdd DevOps functionality with Spring Boot Actuator Endpoints\nSecure Spring Boot Actuator Endpoints\nRun Spring Boot apps from the Command-Line\nUse the Spring Boot Maven Plugin to package and run Spring Boot apps\nInject custom application properties into a Spring Boot REST Controller\n\n\nMaven\nSimplify your build process with Maven\nCreate Maven POM files and add dependencies\nRun Maven builds from the IDE\nUse Maven during the development of Real-Time Projects for Spring Boot MVC, Spring Boot Security, Spring Boot REST API and Hibernate/JPA\n\n\nSpring Core\nBuild a complete Spring MVC and Hibernate/JPA CRUD Project ... all from scratch\nSet up your Spring Boot and Hibernate/JPA\nWire beans together in the Spring container using Inversion of Control\nConfigure the Spring container for Dependency Injection\nDefine Spring Beans using the Component annotation\nPerform auto-scanning of Spring beans to minimize configuration\nAutomatically wire beans together using Autowired annotation\nApply all Java configuration to Spring Beans (no xml)\n\n\nSpring REST APIs\nOverview of REST APIs\nInvestigating Spring Boot REST support\nSending JSON data over HTTP\nJSON Data Binding with the Jackson project\nConverting JSON data to Java POJO with Jackson\nDeveloping a Spring Boot REST API\nSetting up a Spring Boot REST project with Maven\nCreating the Spring Boot REST Controller using RestController\nRunning the Spring Boot REST Controller with the IDE\nTesting Spring Boot REST Web Services with Postman\nParameterize Spring Boot REST API endpoints using PathVariable\nAdd Spring Boot REST exception handling with ExceptionHandler\nIntegrate global Spring Boot REST exception handling with ControllerAdvice\nLeverage ResponseEntity for fine-grained control of Spring Boot REST HTTP response\nBuild Spring Boot REST API to execute CRUD actions on the Database with Hibernate/JPA\nCreate a Real-Time Project using Spring Boot REST API with full database CRUD\n\n\nSpring REST API CRUD\nDevelop a REST API Controller with Spring Boot with full CRUD support\nConfigure Spring Boot Data Source for MySQL Database\nCreate DAO implementations using JPA Entity Manager\nApply Best Practices by integrating a Service Layer\nExpose REST API endpoints in Controller code (GET, POST, PUT and DELETE)\nAccess the REST API using Postman\n\n\nSpring Boot and Spring Data JPA\nMinimize boilerplate code with Spring Data JPA and the JpaRepository\nRefactor existing REST API to integrate with Spring Data JPA\nLeverage new features of the the Java Optional pattern with JpaRepository\nTest the Spring Data JPA repository with Postman\n\n\nSpring Boot and Spring Data REST\nAccelerate your development process with Spring Data REST\nLeverage Spring Data REST to eliminate custom code for controllers and service\nAutomatically expose REST endpoints for your JPA Repositories\nCustomize REST base path endpoints\nApply pagination and sorting to REST API endpoints\nConfigure default page sizes for REST APIs\nInvestigate HATEOAS compliant REST responses\nTest Spring Data REST with Postman\n\n\nSpring Security\nSecure your REST APIs and web applications with Spring Boot Security\nSet up your Maven pom.xml file with Spring Boot Security starter\nConfigure Spring Boot Security with all Java configuration (no xml)\nCreate custom Spring Boot Security login pages with Bootstrap CSS\nAdd logout support using default features of Spring Boot Security\nLeverage Spring Boot Security support for Cross Site Request Forgery (CSRF)\nDefine users and roles for authentication\nDisplay user login info and role using Spring Boot Security tags\nRestrict access to URLs based on user role\nHide and Display content based on user role\nAdd JDBC authentication, store user accounts and passwords in the database\nStore encrypted passwords in the database using bcrypt\nRegister new users and encrypt passwords using Java code\nCreate a Spring Security Real-Time Project using authorization, authentication and database encryption\n\n\nSpring MVC\nSet up your Spring Boot MVC environment with configs and directories\nCreate controllers using Controller annotation\nRead HTML form data using RequestParam\nLeverage Spring Boot MVC model to transport data between controller and view page\nDefine Request Mappings for GET and POST requests\nMinimize coding with Spring Boot MVC Form data binding\nLeverage Thymeleaf expressions to access data from the Spring Boot MVC Model\nApply CSS stylesheets to your Thymeleaf templates\n\n\nSpring MVC Validation\nCreate a Spring MVC Validation project using the Spring Initializr website\nApply validation rules for required fields, number ranges and regular expressions\nLeverage the InitBinder and StringTrimmerEditor to trim white spaces\nConfigure error messages using the messages properties file\nDevelop a custom validation rule using annotations\n\n\nSpring Boot and Thymeleaf\nDevelop view templates with Thymeleaf in Spring Boot projects\nExamine the auto-configuration of Thymeleaf in Spring Boot projects\nCreate a Spring Boot project with Thymeleaf using the Spring Initializer website\nDevelop a Spring Boot MVC Controller and a Thymeleaf template\n\n\nSpring Boot, Thymeleaf and Database CRUD\nDevelop a real-time project with Thymeleaf and Spring Boot with full database CRUD support\nIntegrate the Repository to execute CRUD actions on the Database with Spring Data JPA\nApply best practices with the Service layer design pattern\nCreate a Controller to handle web browser requests\nDevelop Thymeleaf templates to render database results\nBeautify your Thymeleaf templates with Bootstrap CSS\n\n\nAOP: Aspect Oriented Programming\nSet up a Spring Boot project for AOP\nApply AOP concepts: Aspects, advices and pointcut expressions\nAdd logging messages using the Before advice\nDefine pointcut expressions to match on parameters, return types and packages\nCreate reusable pointcut expressions\nCombine pointcut expressions using logical operators\nControl the execution order of aspects using Order\nAccess method execution metadata using JoinPoints\nLeverage JoinPoints to read method arguments\nApply an AfterReturning advice to post-process the data\nIntegrate AfterThrowing advice to access exceptions\nDevelop an AOP Advice using Around to pre-process and post-process method calls\nIntegrate AOP into a Spring MVC CRUD app\n\n\nCompared to other Spring Boot/Hibernate courses\nThis course is fully up to date and covers the latest versions of Spring Boot 3, Spring 6 and Hibernate 6. The course also includes new content on Spring Boot 3, Spring Data JPA, Spring Data REST and Thymeleaf.\nBeware of other Udemy Spring/Hibernate courses. Most of them are outdated and use old versions of Spring and Hibernate. Don’t waste your time or money on learning outdated technology.\nAlso, I create all of the code from scratch in this course. Beware of other courses, those instructors simply copy/paste from their github repo or they use pre-written code. Their approach is not ideal for real-time learning.\nTake my course where I show you how to create all of the code from scratch. You can type the code along with me in the videos, which is the best way to learn.\nI am a very responsive instructor and I am available to answer your questions and help you work through any problems.\nFinally, all source code is provided with the course along with setup instructions.\n\n\nStudent Reviews Prove This Course's Worth\nThose who have reviewed the course have pointed out that the instruction is clear and easy to follow, as well as thorough and highly informative.\nMany students had also taken other Spring Boot and Hibernate courses in the past, only to find that this Spring Boot and Hibernate course was their favorite. They enjoyed the structure of the content and the high quality audio/video.\n\n\nSample of the Student Reviews:\nBest Spring Boot course by far across all learning platforms for me. Best course structure and instructor always demonstrates in depth knowledge by covering the necessary basics. Really really incredible good presentation and structure, a lot of other instructors can learn a lot from you Chad. - Muzi P.\n\n\nI worked in some company, so I can say that this course is 100% industry oriented. The best course for learning Spring Framework. Getting replies within 24 hours. - Premang\n\n\nChad Darby has done a superb job organizing this course, and has made Spring Framework, MVC, AOP, Hibernate, Security easy to learn and use. I have a bs and ms in CS, have been developing software for 25 years, and have taken many courses over the years at the different companies I've been at and Chad is easily the best instructor I've had. - Dave Zeltserman\n\n\nThis is the best tutorial I've seen so far for Spring/Hibernate, each step is well explained and the tutorial videos are made to a high standard. I highly recommend this course! - Rob\n\n\nHats off to you Chad, the best Spring fundamentals course I have done on Udemy thus far. You never disappoint. - Morebodi Modise\n\n\nChad is an excellent natural teacher. His course is well organized. He makes difficult concepts very easy to understand. - Julie Hodgson\n\n\nQuality Material\nYou will receive a quality course, with solid technical material and excellent audio and video production.\nMy courses have received rave 5 star reviews and over 700,000 students have taken the courses. Also, these courses are the most popular courses in their respective categories.\nSimilar thing for this Spring Boot course, it is ranked as #1 best seller for Spring courses.\nI also have an active YouTube channel where I post regular videos. In the past year, I’ve created over 300 video tutorials (public and private). My YouTube channel has over 6.8 million views and 40k subscribers. So I understand what works and what doesn’t work for creating video tutorials.\n\n\nNo Risk – Udemy Refund\nFinally, there is no risk. You can preview 25% of the course for free. Once you purchase the course, if for some reason you are not happy with the course, Udemy offers a 30-day refund (based on Udemy's Refund Policy).\nSo you have nothing to lose, sign up for this course and learn how to build Spring Boot and Hibernate Real-Time Projects from scratch!\n\n\nTarget Audience\nJava Developers with basic Java experience",
      "target_audience": [
        "The course is appropriate for all Java developers: beginners to advanced"
      ]
    },
    {
      "title": "MATLAB Master Class: Go from Beginner to Expert in MATLAB",
      "url": "https://www.udemy.com/course/matlab-essentials-for-engineering-and-science-students/",
      "bio": "MATLAB programming, data structures, apps, data science, regular expressions, text processing, task automation",
      "objectives": [
        "Develop beginer to advance level skills of Programming with MATLAB",
        "Create a portfolio of Many MATLAB projects to apply for MATLAB jobs",
        "Gain Hands-On experience with MATLAB for visualizing, analyzing and formulating intermediate and some advanced level problems using MATLAB programming skills",
        "Experience some real world applications of MATLAB in solving problems",
        "Be able to use MATLAB for data science and machine learning",
        "Build GUIs and Desktop applications with MATLAB",
        "Build power regexes and use them to identify patterns in the input text"
      ],
      "course_content": {},
      "requirements": [
        "We cover everything from scratch and therefore do not require any prior knowledge of MATLAB",
        "The installation of MATLAB software on your machine is a must for this course so that you are able to run the commands and scripts that we cover during the course. If you do not have the MATLAB software installed than you may consider the following options",
        "1. You may download a free trail copy of the software from the MATHWORK website. This is for limited time use",
        "2. If you are student or employee, you may contact your School or employer for a free copy. Many universities offer a free student version of the software",
        "3. You may consider downloading the Octave which is a free and has nearly identical functionality as that of MATLAB. (I would not recommend this option since you may not be able to have access to all the functions that we cover in this course)",
        "4. If none of the above works for you, then you may purchase the student version directly from Mathworks website which is significantly lower in cost compare to its full version"
      ],
      "description": "Basic Course Description\nMATLAB (matrix laboratory) is one of the fundamental and leading programming language and is a must learn skill for anyone who want to develop a career in engineering, science or related fields. Excellent MATLAB programming skills is therefore a crucial factor in making or breaking your career.\nAt 37+ hours of video tutorials, this MATLAB course is one of the most comprehensive MATLAB course online which will take from beginner to professional.  This course is designed from a perspective of a student who has no prior knowledge of MATLAB and who is a MATLAB beginner.\nThroughout this comprehensive course, we cover a massive amount of skills and techniques including:\nBasic maths and matrix manipuation functions\nData import and visualization\nMATLAB Programming, problem solving , logic development and the use of customized functions\nSymbolic functions and variables for advance math operations\nFile and directory handling\nLive scripts and sharing of results\nAdvance data types including cells, tables, time tables and map containers\nData science classification, clustering and dimensionality reduction with MATLAB\nEssential data preprocessing tasks such as outliers, missing values, categorical attributes handling\nBuilding regular expressions for textual processing\nBuilding GUIs using Guide and AppDesigner\nAutomating tasks by controlling mouse, keyboard, running scripts from command window, batch files\nWeb, email and other internet related operations\nGenerating ppts, word files and pdfs\nCode debugger and analyzer, exception handling, startup, finish and diary functions.\nThe course ensures that you learn by including\nPractice exercise questions along with solutions\nChallenging Exercise Questions\nQuizes and\nTakeaway code templates\nBy taking this course, you will become a fluent MATLAB programmer and you'll be so good so that you can get a reasonable job offer as a MATLAB developer and use the language professionally.\nDon't just rely on my word, check what some of our existing students have to say about the same course\n\"I had viewed the video in the propose sequence, as well, as I had looked at some videos outside of the instructor propose sequence, and only had one thing to say: - This course is excellent!!!!!!!!!!!!!\"  Gabriel Federo Hungria\n\"I have gone through the course on MATLAB Gui by the instructor. It was an A++ experience. He is the best instructor, really professional and knows exactly what to teach. Thanks for your wonderful contribution to help us understand MATLAB.\" Kunal Singh\n\"Very interesting course, complete functionality of Matlab was explained and the quizzes further helped with the learning process.\" Hassan Ayub\nPleaset note… I am very confident that you will like the course and therefore provides you with a FULL money back guarantee for 30 days! So there is a ZERO risk and nothing to loose.\nFinally, i am super excited to teach you matlab, so hit enroll and enjoy learning MATLAB",
      "target_audience": [
        "Anyone looking to build a strong career in science or engineering through Excellent MATLAB coding skills",
        "Anyone wanting to advance their skills of real world problem solving with MATLAB based scientific computing"
      ]
    },
    {
      "title": "The Complete Apache Groovy Developer Course",
      "url": "https://www.udemy.com/course/apache-groovy/",
      "bio": "Learn how to program using Apache Groovy.",
      "objectives": [
        "Create Groovy Applications from Scratch",
        "Use the Groovy Console",
        "Write Groovy Applications in IntelliJ",
        "Understand the different features of the Groovy Language",
        "Retain Information through quizzes and exercizes"
      ],
      "course_content": {
        "Introduction": [
          "Introduction and Goals for this course",
          "What is Groovy?",
          "Source Code",
          "The Groovy Website & Documentation",
          "Groovy Books & Additional Resources",
          "How to get the most out of this course"
        ],
        "Getting Started": [
          "Intro",
          "Installing the Java JDK on Windows",
          "Installing the Java JDK on Mac OSX",
          "Installing Groovy on Windows",
          "SDKMAN",
          "groovysh",
          "groovyc",
          "Groovy Console",
          "Hello, IntelliJ",
          "[Exercise] 3 ways to Hello Groovy",
          "[Exercise Review] 3 ways to Hello, Groovy",
          "From Java to Groovy",
          "Getting Started With Groovy"
        ],
        "Groovy Basics": [
          "Intro",
          "Imports",
          "Keywords",
          "Comments",
          "Assertions",
          "Scripts",
          "Classes",
          "[Exercise] Create Your own Class",
          "[Exercise Review] Create your own Class",
          "Numbers",
          "Groovy Control Structure",
          "Annotations & AST Transformations",
          "[Exercise] Using AST Transformations",
          "[Exercise Review] Using AST Transformations",
          "Operators",
          "Grapes",
          "Learning Groovy Basics"
        ],
        "Simple Data Types": [
          "Data Types Intro",
          "Java Data Types",
          "Groovy Data Types & Optional Typing",
          "Data Types",
          "Working with numbers",
          "Operator Overloading",
          "[Exercise] Operator Overloading",
          "[Exercise Review] Operator Overloading",
          "Strings",
          "Regular Expressions"
        ],
        "Collections": [
          "Collections Intro",
          "Ranges",
          "Lists",
          "Maps",
          "[Exercise] Using Collections",
          "[Exercise Review] Using Collections"
        ],
        "Closures": [
          "Intro",
          "What are Closures?",
          "Creating Closures",
          "Closure Parameters",
          "Closure Quiz",
          "Collections Methods",
          "Curry Methods",
          "Closure Scope & Delegates",
          "[Exercise] Using Closures",
          "[Exercise Review] Using Closures"
        ],
        "Control Structures": [
          "Intro",
          "The Groovy Truth",
          "The Groovy Truth",
          "Conditional Structures",
          "Looping",
          "Exception Handling",
          "[Exercise] Control Structures",
          "[Exercise Review] Control Structures"
        ],
        "Object Oriented Programming (OOP)": [
          "Intro",
          "Classes / Fields / Local Variables",
          "Constructors & Methods",
          "Organizing Classes into Packages",
          "Classes Quiz",
          "Inheritance",
          "Interfaces",
          "Traits",
          "Groovy Beans",
          "[Exercise] What makes up a class",
          "[Exercise Review] What makes a class"
        ],
        "Runtime MetaProgramming": [
          "Intro to Runtime Metaprogramming",
          "Meta Object Protocol (MOP)",
          "Customizing the MOP",
          "MetaClass",
          "Runtime Metaprogramming",
          "Category Classes",
          "Intercept / Cache / Invoke Pattern",
          "[Exercise] Runtime Metaprogramming",
          "[Exercise Review] Runtime Metaprogramming"
        ],
        "Compile Time MetaProgramming": [
          "Intro",
          "@ToString",
          "@EqualsAndHashCode",
          "@TupleConstructor",
          "@Canonical",
          "@Singleton",
          "@Sortable",
          "@Immutable",
          "@TypeChecked",
          "@CompileStatic",
          "@Builder",
          "[Exercise] AST Transformations",
          "[Exercise Review] AST Transformations"
        ]
      },
      "requirements": [
        "Some experience using any programming language"
      ],
      "description": "Are you looking to learn a new language? Learning a new language helps expand your skill set as a developer and make you more marketable to employers. If you aren't learning a new language because it's not the one you use at work, I think you're missing out on the benefits. I often find that seeing how other languages solve problems makes me a better developer with the languages I use on a day to day basis. I am here to tell you all about an awesome dynamic language called Apache Groovy.\nWhat is Apache Groovy?\nApache Groovy is a powerful, optionally typed and dynamic language, with static-typing and static compilation capabilities for the Java platform, aimed at improving developer productivity thanks to a concise, familiar and easy to learn syntax. It integrates smoothly with any Java program and immediately delivers to your application powerful features, including scripting capabilities, Domain-Specific Language authoring, runtime and compile-time meta-programming and functional programming.\nWho Should Learn Apache Groovy?\nI am going to teach you everything you need to know to start using the Groovy programming language. This course is really designed for 2 different types of people and I think you will both benefit from it. If you’re a beginner programmer with a some experience in another language like Python or Ruby, this course is for you. Dynamic languages are generally thought of as easier for total beginners to learn because they’re flexible and fun. If you’re an existing Java Developer (Beginner or Experienced), this course is also for you. You will learn Groovy compliments the Java language and makes some of the complex tasks from Java concise and easy.\nEnroll Today\nI have spent a lot of time putting together what I think is the most complete course on Groovy on the market today. Please take the time to watch the preview videos and If you like what you see, click that enroll button and I will see you inside!",
      "target_audience": [
        "Developers of all levels who have some experience in another language",
        "Java developers of all levels"
      ]
    },
    {
      "title": "Complete Python For Absolute Beginners",
      "url": "https://www.udemy.com/course/complete-python-2023-for-absolute-beginners/",
      "bio": "Build a complete understanding of Python from the ground up!",
      "objectives": [
        "You will be able to program in Python professionally",
        "You will learn how to leverage the power of Python to solve tasks.",
        "Build a complete understanding of Python from the ground up!",
        "Build GUIs and Desktop applications with Python"
      ],
      "course_content": {
        "Introduction and Setup": [
          "Introduction to Python",
          "Installing Python on Windows and Mac Operating Systems",
          "Python IDE Setup, Code Editors, Python Extensions."
        ],
        "Working with Variables": [
          "Variables and Coding style Guides"
        ],
        "Data Structures": [
          "Understanding Data Types in Python",
          "Strings in Python",
          "String Methods and Formatted Strings",
          "Python List",
          "Tuples"
        ],
        "Control Flows - If & Else Statements": [
          "Conditional Statements"
        ],
        "Python Loops": [
          "Loops in Python"
        ],
        "Understanding Functions, Methods and Procedures": [
          "Functions in Python, Methods and Procedures",
          "Parameters and Arguments in Python",
          "Function Return Statements in Python"
        ],
        "Imports, Modules and Packages": [
          "Imports Statements & Modules",
          "Python Objects - Understanding Attributes and Methods"
        ],
        "Project - Building GUI Application": [
          "Part 1 - Build a Calculator GUI App Using Python and Tkinter",
          "Part 2 - Build a Calculator GUI App Using Python and Tkinter"
        ]
      },
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know",
        "Access to a computer with an internet connection."
      ],
      "description": "In this course, you'll learn the fundamentals of the Python programming language, along with programming best practices. You’ll learn to represent and store data using Python data types and variables, and use conditionals and loops to control the flow of your programs. You’ll harness the power of complex data structures like lists, sets, dictionaries, and tuples to store collections of related data.\nThis is the most comprehensive, yet straight-forward, course for the Python programming language. We cover the basics of how one constructs a program from a series of simple instructions in Python. Anyone with moderate computer experience should be able to master the materials in this course.\nThis course includes an overview of the various tools available for writing and running Python, and gets students coding quickly. Whether you have never programmed before, already know basic syntax, or want to learn about the advanced features of Python, this course is for you! In this course we will teach you Python 3. Lastly, you’ll learn to find and use modules in the Python Standard Library and other third-party libraries.\n\n\nWe will start by helping you get Python installed on your computer, regardless of your operating system, MacOS, or Windows, we've got you covered.\nWe cover a wide variety of topics, including:\nInstalling Python\nCode Editors, Python Extensions\nVariable and style Guides\nData Types\nPython Strings\nList\nTuples\nIf and else\nLoops\nRecycling Code with Functions\nUseful Python Modules\nBuilding App with Tkinter",
      "target_audience": [
        "If you are a complete beginner then this course will be everything you need to become a Python professional"
      ]
    },
    {
      "title": "VB.Net for Beginners Step by Step Projects and Exercises",
      "url": "https://www.udemy.com/course/visual-basic/",
      "bio": "Learn Visual Basic .Net and Windows Forms (WinForms) by doing programming projects for beginners",
      "objectives": [
        "Practice and understand loops, arrays, structures, LINQ, Databases, OOP and more",
        "Code beginner and intermediate projects using VB .net (former Visual Basic)",
        "Become an intermediate programmer by understanding the how and why of each line in your program",
        "Think like a programmer",
        "Uderstand project requirements and choose the right approach to each solution",
        "Construct, identify, and use Windows Form Controls effectively"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Variables, Input, Output": [
          "Calculator",
          "Repair Bill",
          "Change For a Dollar",
          "Length Conversion",
          "Car Loan",
          "Unit Price"
        ],
        "Decisions": [
          "Rental Cost",
          "Nutrition",
          "Car Loan",
          "Quadratic Equation",
          "Restaurant Menu",
          "College Admissions"
        ],
        "Functions, Sub Procedures, Modular Design": [
          "Grade Point Average",
          "Restaurant Bill",
          "Furniture Order",
          "Proverbs",
          "Stick Game",
          "Loan Calculator"
        ],
        "Repetition and Loops": [
          "Caffeine Absorbtion",
          "Rule of 72",
          "Projectile Motion",
          "Depreciation",
          "Alphabetical Order",
          "Parantheses",
          "Palindrome",
          "Individual Retirement Account (IRA)",
          "Binary Search"
        ],
        "Arrays, LINQ, Structures, Array of structures, 2-dimensional arrays": [
          "Unit Conversion",
          "ISBN Validator",
          "Curve Grades",
          "Bachelor Degrees",
          "Rudimentary Translator",
          "Soccer League",
          "Poker",
          "Airline Reservation",
          "Game of Life",
          "Directory Assistance",
          "Fuel Economy"
        ],
        "Text files, StreamReader, StreamWriter, XML, More LINQ": [
          "Baseball",
          "U.S. Senate",
          "File of Names",
          "Telephone Directory",
          "Universal Product Code (UPC)",
          "Baseball 2"
        ],
        "Aditional Controls, Menus, Random class, Multi Form programs, Graphics Object": [
          "Membership List",
          "Voting Machine",
          "Inventory Control",
          "Airplane Seating Chart",
          "Underdog and the World Series",
          "Spread of Epidemic",
          "Business Travel Expenses"
        ],
        "Databases, Querying tables with LINQ, Basic data selection and filtering": [
          "Orders and Inventory Management",
          "Grade Book"
        ],
        "OOP, Classes and Objects, Inheritance and Polymorphism, Events, Array of Objects": [
          "Bank Account",
          "Black Jack"
        ]
      },
      "requirements": [
        "Students should have installed Visual Studio in order to follow along",
        "Students should be actively learning Visual Basic",
        "Students should be familiar with the programming concepts presented in the exercises"
      ],
      "description": "VB .net is an excellent programming language. Beginners can appreciate it’s English-like syntax, and more advanced programmers can appreciate its vast libraries and flexibility. It’s part of the .Net family of languages, and as such, it allows you to program some truly amazing solutions. So, congratulations on choosing to learn this amazing language. :-)\n\nAs it is common among beginner programmers, the enthusiasm to learn often is not enough to make the leap from beginner to intermediate.\nThe bad news is: code fear is real, and it hinders, or even stops your progress.\nThe good news is: you can learn to eliminate it! And all it takes is a little practice and determination. And that’s where this course will help you greatly!\nThe course goes over Visual Basic programming projects from a popular college Visual Basic textbook: \"Introduction to Programming Using Visual Basic\" by David Schneider. I show you how to put the theory you learned into practice by showing you how to solve each exercise and walking you through all the Why’s and How’s.\nYou and I will go on a journey to program simple solutions, such as a Calculator, all the way to complex solutions such as Bank Account and Black Jack simulator.\nBecause the course goes over ALL exercises from one text book, some of the concepts are repeated across multiple exercises. The course is not meant to follow any particular guidline where each exercise builds up on the previous one, but rather serves as a comprehensive reference, allowing students to skip exercises that present concepts the student is already familiar with.\n\nIn the process, you will learn the ins and outs of Visual Basic language. You will learn how to translate the project requirements into a working code. You will learn to use many different programming concepts, such as Conditional Statements, Loops, Arrays, Multi-dimensional arrays, LINQ, OOP, databases… and pick the right one for your solution. But above all, you will learn to think like a programmer!\nThis course is all about practice. Therefore, to benefit from this course, you need to be an active student. It doesn't matter if you are self-taught or attend a programming course. What matters is the time and effort you are willing to put into learning and practicing your skills.\nThere are no lectures in this course. However, I do my best to explain what I am trying to accomplish with each line of code, and touch on common pitfalls, too.\nThis is a course for beginner VB .net programmers who need to put the concepts and theory they learned into practice and for people who prefer to learn by doing.\nIf that's you, then let's start coding!",
      "target_audience": [
        "The course is best suited for college students taking Visual Basic classes, or self-taught students.",
        "Beginners who are currently learning how to program in Visual Basic and need a guided practice exercises.",
        "Students who need to put the concepts and theory they learned into practice.",
        "Beginner VB .Net programmers seeking to cement the knowledge by doing short programming projects that are challenging, yet not out of his/her skill set exercises.",
        "Students who take Visual Basic classes and struggle with their homework, or students who need a little help or a reference will love this course."
      ]
    },
    {
      "title": "The Unity C# Survival Guide",
      "url": "https://www.udemy.com/course/the-unity-c-survival-guide/",
      "bio": "Created in partnership with Unity Technologies: Master C# with Unity in this Complete Guide!",
      "objectives": [
        "Master C# with Unity",
        "Beginner C# concepts (variables, if-statements, methods, etc.)",
        "Intermediate C# Concepts (lists, dictionaries, abstract classes, etc)",
        "Advanced C# Concepts (delegates, events, lambda expressions, design patterns, etc)",
        "Interview Prep",
        "Unity quick tips and challenges",
        "How to program from scratch"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Why You Need The Unity C# Survival Guide"
        ],
        "1. Unity Quick Tips": [
          "Install Unity Hub",
          "Unity Collaborate",
          "Change Gameobject Position",
          "User Input",
          "Simple Movement",
          "Collectible Gameobjects",
          "Pause System",
          "Post Processing Effects 2018.x +",
          "Destructible Crate",
          "What are Quaternions & Euler Angles?",
          "Quaternion Identity",
          "Quaternion LookRotation",
          "Quaternion Slerp"
        ],
        "2. Variables": [
          "Script Overview",
          "Variables",
          "Common Data Types",
          "Challenge: Master Variables P1",
          "Challenge Review: Master Variables P1",
          "Challenge: Master Variables P2",
          "Challenge Review: Master Variables P2",
          "Challenge: Tip Calculator",
          "Challenge Review: Tip Calculator",
          "Challenge: Quiz Grade Average",
          "Challenge Review: Quiz Grade Average",
          "Best Practices for Variables",
          "Want More Challenges?"
        ],
        "3. If-Then Logic": [
          "If-Statements",
          "Challenge: Master If-Statements P1",
          "Challenge Review: Master If-Statements P1",
          "Challenge: Master If-Statements P2",
          "Challenge Review: Master If-Statements P2",
          "Challenge: Master If-Statements P3",
          "Challenge Review: Master If-Statements P3",
          "Else-If Statements",
          "Challenge:Quiz Grades",
          "Challenge Review: Quiz Grades",
          "Challenge: Master If-Statements P4",
          "Challenge Review: Master If-Statements P4",
          "Challenge: Speed Program",
          "Challenge Review: Speed Program",
          "Want More Challenges?"
        ],
        "4. Switch Statements": [
          "Switch Statements",
          "Challenge: Master Switch Statements P1",
          "Challenge Review: Master Switch Statements P1",
          "Challenge: Master Switch Statements P2",
          "Challenge Review: Master Switch Statements P2",
          "Challenge: Weapon Select Program",
          "Challenge Review: Weapon Select Program",
          "Want More Challenges?"
        ],
        "5. Loops": [
          "For Loops",
          "for Loops Understanding Continued",
          "Break Out of Loops",
          "For Loops Presentation Example",
          "When Do I Use For Loops In Games?",
          "Foreach Loop Quick Explanation",
          "Do while Loop",
          "While Loop",
          "Challenge: Ultimate Print Outs",
          "Challenge Review: Ultimate Print Outs",
          "Challenge: How Fast You Going?",
          "Challenge Review: How Fast You Going?",
          "Want More Challenges?"
        ],
        "6. Arrays": [
          "Array Syntax",
          "Access Array Elements",
          "Challenge: Array Master",
          "Challenge Review: Array Master",
          "Challenge: Randomly Choose One",
          "Challenge Review: Randomly Choose One",
          "Print Out All Elements Using For Loop",
          "Print Out All Elements Using Foreach Loop",
          "Looping Through Data Presentation",
          "Looping Practical Example",
          "Challenge: Convert For Loop",
          "Challenge Review: Convert For Loop",
          "Want More Challenges?"
        ],
        "7. Functions Vs. Methods": [
          "Functions Vs. Methods",
          "Method Parameters",
          "Challenge: Pass the Object with Color",
          "Challenge Review: Pass the Object with Color",
          "Return Type Functions",
          "Change Positions 4 Ways",
          "Challenge: Are You Alive?",
          "Challenge Review: Are You Alive?",
          "Practical Presentation Return Array",
          "Challenge: Position Matters",
          "Challenge Review: Position Matters",
          "Want More Challenges?"
        ],
        "8. Classes": [
          "Classes for Behaviors",
          "Custom Classes",
          "Serialized Custom Class RPG Item Database Example",
          "Challenge: Customer Database",
          "Challenge Review: Customer Database",
          "Understand When and Why to Use Custom Classes",
          "RPG Spell System Presentation",
          "Class Inheritance",
          "Bank System Inheritance Example",
          "Protected Data Members",
          "Virtual Methods & Overriding",
          "Q&A on Using MonoBehavior Custom Classes",
          "Structs and Memory Management: Value Types Vs. Reference Types (Interview Prep)",
          "Want More Challenges?"
        ],
        "9. Static Types": [
          "Working with Static Types",
          "Instance Members Vs. Static Members (Interview Prep)",
          "Practical Example of Working with Static Types",
          "Utility Helper Classes",
          "Challenge: Random Color Helper",
          "Challenge Review: Random Color Helper",
          "Initializing Static Members with a Static Constructor",
          "Want More Challenges?"
        ]
      },
      "requirements": [
        "Passion for programming"
      ],
      "description": "This course is authorized by and made in partnership with Unity Technologies.\n\n\nHave you been struggling to learn how to code in C# with Unity?   If so, you have found the course you’ve been searching for!  This course is designed for beginner to advanced or professional programmers alike.  For beginners, sequential completion of the lessons is recommended, as it will teach you the basics of coding using interactive challenges and problem solving techniques.  The course progresses in difficulty, and upon completion, you will have gone from a novice C# developer to an advanced, job ready, C# developer.  For advanced or professional coders, this course is meant as a reference guide to help you survive in the workplace.  Rusty on delegates and events? Check out the section of this course that focuses exclusively on them, and teaches you how to implement them into your projects.  For seasoned coders, sequential progression through the course is not necessary; The Unity C# Survival Guide is flexible, allowing developers to use it for their specific needs.  New content is frequently added, so you can rest assured that your survival guide is always up to date.  This is the only C# in Unity programming course authorized by and made in partnership with Unity Technologies.\n\n\nIn This Course, You Will:\nMaster C# with Unity\nBecome a career-ready programmer in C#\nImplement advanced coding logic into your own projects\nDiscover game programming patterns\nProficiency in abstract classes and interfaces\nLearn best practice implementations\nPractice typical job interview questions that programmers commonly face\nAnd much more!\n\n\nThis course will take you through over 50 interactive challenges, designed to help you master beginner to advanced C# concepts.  The first section, created for novice C# developers, covers variables, “if” statements, loops, and arrays.\n\n\nThe second section focuses on intermediate concepts, like properties, name spaces, enums, and dictionaries.\n\n\nThe third section focuses on advanced concepts, like abstract classes, delegates and events, lambda expression, and linq.  This section ends with interview practice problems, compiled from industry professionals who work for Cartoon Network, American Gaming Systems, Facebook, Oculus and more!\nIn addition to the sections organized by difficulty, there is also a “Unity Quick Tips” section, dedicated on how to do anything in Unity, such as creating character controllers, explosion effects, and how to fire a weapon.  The quick tips section also includes a Unity Editor overview, to help beginners get accustomed to Unity, and/or help seasoned developers learn about new features in Unity as Unity updates the editor.  If you’re looking for a “how to” section, this is a great place to start.\n\n\nIf there is something in the Survival Guide that is not covered, please send us a message, and we will add it to the course!\n\n\nWhy Learn C# with Unity?\n\nWe are entering a revolutionary period in Technology and at the front is Unity Technologies. Unity is no longer just a game engine, but a complete real time rendering platform that’s powering applications within the fields of games, AI, automotive, film, architecture, construction, sales & services, marketing & training, medical, and so much more. The games industry is $120B. Now consider how all these new emerging markets are adopting Unity into their workflows and that number quickly jumps to a trillion dollar marketplace for C# developers. Not convinced? In 2018, companies like Coca-Cola, AT&T, GE, Facebook, Google, Uber, Nissan, Lexus, Tesla, Deepmind, AGS, Disney and many other large corporations adopted Unity into their workflows.\n\nIf you’re serious about a career with with C# and Unity, I will help you reach your goals. I’ll see you inside the course.",
      "target_audience": [
        "Beginner C# Unity Developers",
        "Intermediate C# Unity Developers",
        "Advanced C# Unity Developers",
        "Professional Developers"
      ]
    },
    {
      "title": "Go Bootcamp: Master Golang with 1000+ Exercises and Projects",
      "url": "https://www.udemy.com/course/learn-go-the-complete-bootcamp-course-golang/",
      "bio": "Master and Deeply Understand Google's Go from Scratch with Illustrated In-Depth Tutorials & 1000+ Hands-On Exercises.",
      "objectives": [
        "Learn from a Go Contributor",
        "Learn Go Tips & Tricks that you can't find easily anywhere else",
        "Go from a total Go beginner to a confident Go programmer",
        "Practice Go with 1000+ Exercises (with included solutions)",
        "Understand Go In-Depth with Animated Illustrations (Pass Interviews)",
        "Learn the Go internals and common Go idioms and best-practices",
        "Create a Log File Parser that parses log files",
        "Create a Spam Masker that masks spammy words within a block of text",
        "Create a command-line Retro Led Clock that shows time",
        "Create Console Animations, Dictionary Programs, and more"
      ],
      "course_content": {
        "Basics": [
          "Installation and Resources",
          "Introduction to Variables",
          "Example: Path Separator",
          "When to use a short declaration?",
          "Let's convert a value!",
          "⭐️ Get input from terminal ⭐️",
          "Learn the basics of os.Args",
          "Naming Things: Recommendations",
          "★ EXERCISES ★",
          "What is a Raw String Literal?",
          "How to get the length of a utf-8 string?",
          "Example: Banger: Yell it back!",
          "★ STRINGS EXERCISES ★",
          "Constants and iota",
          "★ IOTA EXERCISES ★",
          "⭐️ Print Formatted Output ⭐️",
          "Println vs Printf",
          "What is an Escape Sequence?",
          "How to print using Printf?",
          "The verbs can be type-safe too!",
          "★ PRINTF EXERCISES ★",
          "⭐️ If Statement ⭐️",
          "If Statement",
          "Else and Else If",
          "★ IF STATEMENT EXERCISES ★",
          "Tiny Challenge: Validate a single user",
          "Solution: Validate a single user",
          "Tiny Challenge: Validate multiple users",
          "Solution: Validate multiple users",
          "⭐️ Error Handling ⭐️",
          "What is a nil value?",
          "What is an error value?",
          "Error handling example",
          "Challenge: Feet to Meter",
          "Solution: Feet to Meter",
          "What is a Simple Statement?",
          "Scopes of simple statements",
          "Famous Shadowing Gotcha",
          "★ ERR HANDLING EXERCISES ★",
          "⭐️ Switch Statement ⭐️",
          "Learn the Switch Statement Basics",
          "What is a default clause?",
          "Use multiple values in case conditions",
          "Use bool expressions in case conditions",
          "How does the fallthrough statement work?",
          "What is a short switch?",
          "Tiny Challenge: Parts of a Day",
          "Solution: Parts of a Day",
          "If vs Switch: Which one to use?",
          "★ SWITCH EXERCISES ★",
          "⭐️ Loops ⭐️",
          "There is only one loop statement in Go",
          "How to break from a loop?",
          "How to continue a loop? (+BONUS: Debugging)",
          "Create a multiplication table",
          "How to loop over a slice?",
          "For Range: Learn the easy way!",
          "★ LOOP EXERCISES #1 ★"
        ],
        "Projects: For Go Basics": [
          "Randomization in Go",
          "Randomization and Go",
          "Seed the randomizer with time",
          "Write the Game Logic",
          "Prove Yourself: Randomization",
          "★ RANDOMIZATION EXERCISES ★",
          "Mini Project: Word Finder",
          "Build the Word Finder Program",
          "Labeled Break and Continue",
          "Break from a Switch using Labels",
          "Yes there is a \"goto\" statement in Go",
          "Prove Yourself: Labeled Statements",
          "★ LABELED STATEMENT EXERCISES ★"
        ],
        "Arrays and Memory Layout": [
          "Learn Go's Fixed Arrays",
          "Introduction and Roadmap",
          "What is an array in Go?",
          "Let's create an array",
          "Learn the gotcha when using a for range on arrays",
          "Prove Yourself: Arrays #1",
          "What is a composite literal?",
          "Refactor the Hipster's Love Bookstore to array literals",
          "Tiny Challenge #1: Moodly",
          "Can you compare array values?",
          "Can you assign an array value to another one?",
          "★ ARRAYS EXERCISES #1 ★",
          "How to use multi-dimensional arrays?",
          "Tiny Challenge #2: Moodly",
          "Learn the rarely known feature of Go: The Keyed Elements",
          "Learn the relation between composite and unnamed types",
          "Prove Yourself: Arrays #2",
          "Recap: Arrays",
          "★ ARRAYS EXERCISES #2 ★"
        ],
        "Project: Write a Retro Clock": [
          "Grab the Slides!",
          "Challenge: Retro Led Clock",
          "Challenge Explanation",
          "Let's print the digits",
          "Let's print the clock",
          "It's time to animate the clock!",
          "★ RETRO CLOCK EXERCISES ★"
        ],
        "Slices and Internals": [
          "Slices: Master Go's Dynamic Arrays",
          "Introduction and Roadmap",
          "Learn the differences between slices and arrays",
          "Can you compare a slice to another one?",
          "Create a unique number generator",
          "Prove Yourself: Slices vs Arrays",
          "★ SLICE EXERCISES ★",
          "Append: Let's grow a slice!",
          "Prove Yourself: Appending",
          "★ APPEND EXERCISES ★",
          "Slicing: Let's cut that slice!",
          "How to create pagination using slices? (+ Sprintf)",
          "Prove Yourself: Slicing",
          "★ SLICING EXERCISES ★",
          "⭐️ Slice Internals ⭐️",
          "What is a Backing Array?",
          "Prove Yourself: Backing Array",
          "What's a slice header?",
          "What does a slice header look like in the actual Go runtime code?",
          "Prove Yourself: Slice Header",
          "What is the capacity of a slice?",
          "Extend a slice using its capacity",
          "Prove Yourself: Capacity",
          "When does the append function create a new backing array?",
          "Animate: When the backing array of a slice grows?",
          "Prove Yourself: Mechanics of Append",
          "★ SLICE INTERNALS EXERCISES ★",
          "⭐️ Advanced Operations ⭐️",
          "Full Slice Expressions: Limit the capacity of a slice",
          "make(): Preallocate the backing array",
          "copy(): Copy elements between slices",
          "How to use multi-dimensional slices?",
          "Prove Yourself: Advanced Slice Operations",
          "★ ADVANCED SLICE OPS EXERCISES ★"
        ],
        "Project: Write a File Finder": [
          "Build an Empty File Finder Program",
          "Fetch the Files",
          "Write to a file",
          "Optimize!",
          "★ FILE FINDER EXERCISES ★"
        ],
        "Project: Animate a Bouncing Ball": [
          "Project: Animate a Bouncing Ball",
          "Challenge",
          "Challenge Document",
          "Step #1: Create and Draw the Board",
          "Step #2: Optimize by adding a Buffer",
          "Step #3: Animate the Ball",
          "★ BOUNCING BALL EXERCISES ★"
        ],
        "UTF-8: Encode and Decode": [
          "Learn how to encode and decode UTF-8 strings",
          "Introduction and Roadmap",
          "★ Resources ★",
          "Let's learn the basics of bytes, runes and strings",
          "Let's write a character-set program",
          "Let's convert, index, and slice bytes, runes and strings",
          "How can you decode a string?",
          "String Header: Why strings are immutable?",
          "Recap: Strings Revisited",
          "Prove Yourself: Strings, Bytes, and Runes",
          "★ UTF-8 EXERCISES ★"
        ],
        "Project: Create a Spam Masker": [
          "Project: Let's Build a Spam Masker",
          "Challenge",
          "Challenge Document",
          "Detect the link patterns",
          "Mask the links",
          "★ Text Wrapper Challenge ★",
          "Let's build a Unicode text wrapper"
        ],
        "Maps and Internals": [
          "Learn Go's Maps and Internals",
          "Create an English to Turkish dictionary",
          "Populate the dictionary",
          "Map Internals: How maps work behind the scenes?",
          "Prove Yourself: Maps",
          "★ MAP EXERCISES ★"
        ]
      },
      "requirements": [
        "Access to a computer with an internet connection."
      ],
      "description": "Go is a programming language created by Google, and this course is the most intuitive, in-depth, and highest-quality Go course on Udemy, with an insane level of attention to detail. You'll understand both the why and how. We've included thousands of animations, exercises, quizzes, examples, challenges, projects, and so on. By the end of the course, you'll become a confident Go programmer from scratch.\nWhy should you take this course now?\nWatch ultra-detailed, entertaining, intuitive, and easy to understand illustrations and animations.\nSolve 1000+ hands-on exercises (solutions are also included).\nCreate projects including a log parser, file scanner, spam masker, and more.\nLearn Go programming tips and tricks that you can't find easily anywhere else.\nLearn the Go internals and common Go idioms and best-practices.\nWhy should you learn Go (aka Golang and Go lang)?\nGo is one of the most desired, easy to learn, and the highest paying programming languages. There are 1+ million Go programmers around the world, and the number is increasing each day exponentially. It's been used by Google, Facebook, Twitter, Uber, Docker, Kubernetes, Heroku, and many others.\nGo is Efficient like C, C++, and Java, and Easy to use like Python and Javascript. It's Open-Source, Simple, Powerful, Efficient, Cross-Platform (OS X, Windows, Linux, ...), Compiled, Garbage-Collected, and Concurrent.\nGo is best for Command-line Tools, Web APIs, Distributed Network Applications like Microservices, Database Engines, Big-Data Processing Pipelines, and so on.\nWhat are you going to learn from this course (briefly)?\nGo OOP: Interfaces and Methods\nInternals of Methods and Interfaces\nFunctions and Pointers: Program design, pass by value, and addressability.\nImplicit interface satisfaction\nType assertion and Type Switch\nEmpty interface: []interface{} vs interface{}\nValue, Pointer, and Nil Receivers\nPromoted Methods\nFamous Interfaces\nTips about when to use interfaces\nfmt.Stringer, sort.Sort, json.Marshaler, json.Unmarshaler, and so on.\nComposite Types: Arrays, Slices, Maps, and Structs\nInternals of Slices and Maps\nBacking array, slice header, capacity, and map header\nJSON encoding and decoding, field tags, embedding\nMake, copy, full Slice expressions and append mechanics\nUTF-8 encoding and decoding\nGo Type System Mechanics\nType inference, underlying, predeclared, and unnamed types.\nUntyped constants and iota.\nBlank Identifier, short declaration, redeclaration, scopes, naming conventions\nI/O\nProcess Command-Line Arguments, printf, working with files, bufio.Scanner, ...\nHow to create your own Go packages\nHow to run multiple Go files, and how to use third-party packages\nGo tools\nDebugging Go code, go doc, and others.\n...and more.",
      "target_audience": [
        "Take this course as the best companion to fully understand the official Go Spec and book.",
        "Beginners who have never programmed before.",
        "Programmers switching languages to Go.",
        "Go programmers who want to level up their skills!",
        "Go programmers who want to learn the internals of slices, maps, interfaces, and so on."
      ]
    },
    {
      "title": "100 Days of Code: The Complete Python Pro Bootcamp",
      "url": "https://www.udemy.com/course/100-days-of-code/",
      "bio": "Master Python by building 100 projects in 100 days. Learn data science, automation, build websites, games and apps!",
      "objectives": [
        "You will master the Python programming language by building 100 unique projects over 100 days.",
        "You will learn automation, game, app and web development, data science and machine learning all using Python.",
        "You will be able to program in Python professionally",
        "You will learn Selenium, Beautiful Soup, Request, Flask, Pandas, NumPy, Scikit Learn, Plotly, and Matplotlib.",
        "Create a portfolio of 100 Python projects to apply for developer jobs",
        "Be able to build fully fledged websites and web apps with Python",
        "Be able to use Python for data science and machine learning",
        "Build games like Blackjack, Pong and Snake using Python",
        "Build GUIs and Desktop applications with Python"
      ],
      "course_content": {
        "Day 1 - Beginner - Working with Variables in Python to Manage Data": [
          "What you're going to get from this course",
          "START HERE",
          "Downloadable Resources and Tips for Taking the Course",
          "Day 1 Goals: what we will make by the end of the day",
          "DO NOT SKIP - Download and Setup PyCharm for Learning",
          "Printing to the Console in Python",
          "Printing Practice",
          "String Manipulation and Code Intelligence",
          "Debugging Practice",
          "The Python Input Function",
          "Python Variables",
          "Variables",
          "Variable Naming",
          "Variable Naming Quiz",
          "Day 1 Project: Band Name Generator",
          "Congratulations! Well done!"
        ],
        "Day 2 - Beginner - Understanding Data Types and How to Manipulate Strings": [
          "Day 2 Goals: what we will make by the end of the day",
          "Python Primitive Data Types",
          "Data Types Quiz",
          "Type Error, Type Checking and Type Conversion",
          "Mathematical Operations in Python",
          "BMI Calculator",
          "Number Manipulation and F Strings in Python",
          "Mathematical Operations Quiz",
          "Day 2 Project: Tip Calculator",
          "You are already in the top 50%"
        ],
        "Day 3 - Beginner - Control Flow and Logical Operators": [
          "Day 3 Goals: what we will make by the end of the day",
          "Get Access to the Monthly App Brewery Newsletter",
          "Control Flow with if / else and Conditional Operators",
          "Introducing the Modulo",
          "Nested if statements and elif statements",
          "BMI Calculator with Interpretations",
          "Multiple If Statements in Succession",
          "Pizza Order Practice",
          "Logical Operators",
          "Logical Operators Quiz",
          "Day 3 Project: Treasure Island",
          "Share and Show off your Project!"
        ],
        "Day 4 - Beginner - Randomisation and Python Lists": [
          "Day 4 Goals: what we will make by the end of the day",
          "Random Module",
          "Understanding the Offset and Appending Items to Lists",
          "Who will pay the bill?",
          "IndexErrors and Working with Nested Lists",
          "List and IndexError Quiz",
          "Day 4 Project: Rock Paper Scissors",
          "Programming is like going to the Gym"
        ],
        "Day 5 - Beginner - Python Loops": [
          "Day 5 Goals: what we will make by the end of the day",
          "Using the for loop with Python Lists",
          "Highest Score",
          "for loops and the range() function",
          "FizzBuzz",
          "Day 5 Project: Create a Password Generator",
          "Hard Work and Perseverance beats Raw Talent Every Time"
        ],
        "Day 6 - Beginner - Python Functions & Karel": [
          "Day 6 Goals: what we will make by the end of the day",
          "Defining and Calling Python Functions",
          "The Hurdles Loop Challenge",
          "Indentation in Python",
          "Code Indentation Quiz",
          "While Loops",
          "Hurdles Challenge using While Loops",
          "Jumping over Hurdles with Variable Heights",
          "Final Project: Escaping the Maze",
          "Why is this *so* Hard?! Can I really do this?"
        ],
        "Day 7 - Beginner - Hangman": [
          "Day 7 Goals: what we will make by the end of the day",
          "How to break a Complex Problem down into a Flow Chart",
          "Step 1 - Picking a Random Words and Checking Answers",
          "Step 2 - Replacing Blanks with Guesses",
          "Step 3 - Checking if the Player has Won",
          "Step 4 - Keeping Track of the Player's Lives",
          "Step 5 - Improving the User Experience",
          "The Benefits of Daily Practice"
        ],
        "Day 8 - Beginner - Function Parameters & Caesar Cipher": [
          "Day 8 Goals: what we will make by the end of the day",
          "Functions with Inputs",
          "Life in Weeks",
          "Positional vs. Keyword Arguments",
          "Love Calculator",
          "Caesar Cipher Part 1 - Encryption",
          "Caesar Cipher Part 2 - Decryption",
          "Caesar Cipher Part 3 - Reorganising our Code",
          "How You Can *Stay* Motivated"
        ],
        "Day 9 - Beginner - Dictionaries, Nesting and the Secret Auction": [
          "Day 9 Goals: what we will make by the end of the day",
          "The Python Dictionary: Deep Dive",
          "Grading Program",
          "Nesting Lists and Dictionaries",
          "Python Dictionaries Quiz",
          "The Secret Auction Program Instructions and Flow Chart",
          "Motivation and the Accountability Trick"
        ],
        "Day 10 - Beginner - Functions with Outputs": [
          "Day 10 Goals: what we will make by the end of the day",
          "Functions with Outputs",
          "Multiple return values",
          "Leap Year",
          "Docstrings",
          "Functions Quiz",
          "The Calculator Project",
          "How to Get a Good Night's Sleep"
        ]
      },
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know",
        "A 64-bit Mac or PC computer with 4GB of memory and access to the internet",
        "No paid software required - I'll teach you how to use PyCharm, Jupyter Notebooks and Google Colab",
        "I'll walk you through, step-by-step how to get all the software installed and set up"
      ],
      "description": "Welcome to the 100 Days of Code - The Complete Python Pro Bootcamp, the only course you need to learn to code with Python. With over 500,000 5 STAR reviews and a 4.8 average, my courses are some of the HIGHEST RATED courses in the history of Udemy!\n100 days, 1 hour per day, learn to build 1 project per day, this is how you master Python.\nAt 60+ hours, this Python course is without a doubt the most comprehensive Python course available anywhere online. Even if you have zero programming experience, this course will take you from beginner to professional. Here's why:\nThe course is taught by the lead instructor at the App Brewery, London's best in-person programming Bootcamp.\nThe course has been updated and you'll be learning the latest tools and technologies used at large companies such as Apple, Google and Netflix.\nThis course doesn't cut any corners, there are beautiful animated explanation videos and tens of real-world projects which you will get to build. e.g. Tinder auto swiper, Snake game, Blog Website, LinkedIn Auto Submit Job Application\nThe curriculum was developed over a period of 2 years, with comprehensive student testing and feedback.\nWe've taught over 600,000 students how to code and many have gone on to change their lives by becoming professional developers or starting their own tech startup.\nYou'll save yourself over $12,000 by enrolling, and still get access to the same teaching materials and learn from the same instructor and curriculum as our in-person programming Bootcamp.\nThe course is constantly updated with new content, with new projects and modules determined by students - that's you!\n\n\nWe'll take you step-by-step through engaging video tutorials and teach you everything you need to know to succeed as a Python developer.\nThe course includes over 65 hours of HD video tutorials and builds your programming knowledge while making real-world Python projects.\n\n\nThroughout this comprehensive course, we cover a massive amount of tools and technologies, including:\nPython 3 - the latest version of Python\nPyCharm, Jupyter Notebook, Google Colab\nPython Scripting and Automation\nPython Game Development\nWeb Scraping\nBeautiful Soup\nSelenium Web Driver\nRequest\nWTForms\nData Science\nPandas\nNumPy\nMatplotlib\nPlotly\nScikit learn\nSeaborn\nTurtle\nPython GUI Desktop App Development\nTkinter\nFront-End Web Development\nHTML 5\nCSS 3\nBootstrap 4\nBash Command Line\nGit, GitHub and Version Control\nBackend Web Development\nFlask\nREST\nAPIs\nDatabases\nSQL\nSQLite\nPostgreSQL\nAuthentication\nWeb Design\nDeployment with GitHub Pages, Heroku and GUnicorn\nand much much more!\nBy the end of this course, you will be fluently programming in Python and you'll be so good at Python that you can get a job or use the language professionally.\nYou'll also build a portfolio of 100 projects that you can show off to any potential employer. Including:\nBlackjack\nSnake Game\nPong Game\nAuto Swipe on Tinder\nAuto Job Applications on LinkedIn\nAutomate Birthday Emails/SMS\nFully Fledged Blog Website\nBuild Your Own Public API\nData Science with Google Trends\nAnalysing Lego Datasets\nGoogle App Store Analysis\nand much much more!\nSign up today, and look forward to:\nVideo Lectures\nCode Challenges and Exercises\nFully Fledged Projects\nQuizzes\nProgramming Resources and Cheatsheets\nDownloads\nOur best selling 12 Rules to Learn to Code eBook\n$12,000+ Python Pro Bootcamp course materials and curriculum\n\n\nDon't just take my word for it, check out what existing students have to say about my courses:\n\"Angela is just incredible, awesome and just fantastic in this course. I've never had such an instructor; detailed in every aspect of the course, gives precise explanations, gives you the anxiety to learn etc. She's got that ability to make fun while explaining things for better understanding. I really love this course.\" - Ekeu MonkamUlrich\n\"Angela is very thorough without ever being boring. I've taken MANY online courses in my life including my Bachelors and Masters degrees. She is by far the best instructor I've ever had. This course is packed with thousands of dollars worth of great instruction, and paced well enough for anyone to pick coding up and run with it- Thank you!\" - J Carlucci\n\"Love the way Angela explains things. Easy to follow and full of logic. I can say she must spend a lot of energy creating this great course. Thank you and I recommend it to all who's interested in coding!\" - Yiqing Zheng\n\"So far (on my third day) this course has taught me more than I was able to learn in multiple other programming courses. This course is clearly outlined and builds upon itself gradually in an easy to understand way.\" - Normal Ramsey\n\"It's a different approach to teaching Web Development. I like that you are given everything possible to succeed from the onset.\" - Ronick Thomas\nThe tutor is simply AMAZING, by far the best tutor I have ever had. I would give her 10 stars out of 5. She is not just punching the code and talking to herself, but she is actually explaining things. She keeps on giving really useful hints and she will give you a great load of other references. I always knew what I was doing and why I was doing it. All the extra challenges have just made me remember and understand things better. - Peter Dlugos\n\n\n\n\nREMEMBER… I'm so confident that you'll love this course that we're offering a FULL money-back guarantee for 30 days! So it's a complete no-brainer, sign up today with ZERO risk and EVERYTHING to gain.\nSo what are you waiting for? Click the buy now button and join the world's highest-rated development course.",
      "target_audience": [
        "If you want to learn to code from scratch through building fun and useful projects, then take this course.",
        "If you want to start your own startup by building your own websites and web apps.",
        "If you are a complete beginner then this course will be everything you need to become a Python professional",
        "If you are a seasoned programmer wanting to switch to Python then this is the quickest way. Learn through coding projects.",
        "If you are an intermediate Python programmer then you know 100 days of code challenges will help you level up."
      ]
    },
    {
      "title": "The Complete Python Course | Learn Python by Doing in 2025",
      "url": "https://www.udemy.com/course/the-complete-python-course/",
      "bio": "Go from Beginner to Expert in Python by building projects. The best investment for your Python journey!",
      "objectives": [
        "From foundations to expert, learn about every major Python topic, working with Python 3.",
        "Write professional-grade Pythonic code with all the best practices and avoiding common pitfalls.",
        "Master Object-Oriented Programming and structure your Python programs like a professional.",
        "Swiftly understand complex topics like decorators, algorithms, and asynchronous programming in Python.",
        "Automate extracting data from websites using web scraping libraries like BeautifulSoup and Selenium.",
        "Learn how to write desktop applications with Python and Tkinter.",
        "Interact with REST APIs using Python and build a currency converter!",
        "Develop a life-long love for programming with Python!"
      ],
      "course_content": {},
      "requirements": [
        "Access to a computer with an internet connection. Everything else we use in the course is publicly available and we'll guide you through getting it.",
        "There are no other requirements, besides getting started!"
      ],
      "description": "Welcome to the Complete Python Course!\nLearn Python from a software developer. If you want to master Python and write efficient, elegant, and simple code, this is the course you've been looking for!\nEven if you have no programming experience, this course will give you a super-strong foundation and teach you how to use Python to achieve any goal.\nWe've crafted every piece of content to be concise and straightforward, while never leaving you confused:\nHundreds of code-along videos with in-depth explanations\nDozens of presentations with animated diagrams\nQuizzes\nCoding exercises\nPython projects for you to learn to make real Python applications\n\n\nWhy Choose THIS Course?\nGet a broader and deeper experience in Python than with any other Udemy course on the market.\nStart at zero and become an expert whilst learning all about the inner workings of Python.\nLearn how to write professional Python code like a professional Python developer.\nEmbrace simplicity and develop good programming habits.\nExplore advanced Python, such as decorators, asynchronous development, and managing project dependencies\nImprove your Python code with formatters and linters\nStore data in a database so it's accessible and searchable.\nLearn about web development using Flask, to create websites that you can share with users.\nExtract information from existing websites using web scraping.\nControl your browser using Selenium, to automate using almost any website!\nLearn to interact with REST APIs to fetch data from other web applications.\nCreate desktop GUIs using Tkinter, and turn them into executable applications you can share with non-technical users.\nStart working with unit testing in Python by learning about the unittest library\n\n\nWho Is This Course For?\nBeginners who have never programmed before.\nProgrammers with experience in other languages who want to kickstart their Python programming.\nProgrammers who know some Python but want to round off their skills and become truly proficient.\n\n\nWhat Am I Going to Get From This Course?\nLifetime access to over 300 code-along lectures covering all aspects of Python, from the foundations to advanced concepts.\nComplete written notes and code for you to read and refer to as you progress through the course.\nMilestone projects for you to complete throughout the course. These provide a challenge and an opportunity for you to apply what you've learned. We always go over the code after to show you how we would tackle them.\nQuizzes and coding exercises for you to check your understanding.\nHigh-quality help and support. Every year we personally help thousands of students. We don’t leave a single question unanswered.\n\n\nHere's a breakdown of some of the topics this course covers!\nCommand Line Basics\nInstalling Python\nRunning Python Code\nStrings and Numbers\nString Formatting\nLists, Dictionaries, Tuples, and Sets\nFunctions and lambdas\nDecorators\nScope\nargs/kwargs and default parameter values\nThe concept of mutability\nBuilt-in Functions\nDebugging and Error Handling\nType hinting (new in Python 3.8)\nCreating your own error classes\nModules and installing libraries\nObject Oriented Programming, in a lot of depth\nComposition and Inheritance\nFile I/O\nDatabase interactions\nUnit testing\nRegex (Regular Expressions)\nWeb Scraping\nAlgorithms and Data Structures\nAnd much, much more!\n\n\nFeel free to read through the course curriculum, as well as watch the free lectures of this course. I'm sure you'll enjoy them.\nBut don't take my word for it! Read through some of these reviews and see what other students are saying:\n> \"Excellent teaching ability combined with deep understanding of the subject has produced one of the best online courses I've taken in decades. Fabulous work! Thank you!\" - Maria Iano\n> \"Really amazing course. would recommend to all the students or programmers who want to learn python from scratch.\" - Hriday Panchal\n> \"Exactly the course I needed!!! Explanations are clear, lots of examples, and everything you need in python! thanks so much.\" - Julien Palleau\n> \"Another amazing offering from Jose. This course offers the most comprehensive look at Python available. Consider, for example, the extensive treatment regarding asynchronous development, or the detailed introduction to web development with Flask, or the Tkinter GUI introduction. I have had several other offerings by Jose here on Udemy. Always get far more than I expected.\" - Martin Dwyer\n> \"Honestly, I don’t know much about other courses, but after taking a quick peek at some of them, I can safely say that this is the most complete Python course in Udemy. [...] Definitely recommended for those who want to begin their Python journey but don’t know where to start.\" - Mateo Delgadillo Karam\n\n\nAlso remember: we have a 30-day money-back guarantee, so sign up and try the course totally risk-free!\nI'll see you on the inside.",
      "target_audience": [
        "Beginner programmers who want to get into one of the most popular and loved languages in the world",
        "Programmers from other languages who want to kickstart their Python journey",
        "Python programmers who want to refresh their skills and tackle advanced topics like algorithms and asynchronous programming"
      ]
    },
    {
      "title": "Learn C# Programming (In Ten Easy Steps)",
      "url": "https://www.udemy.com/course/learn-c-sharp-programming-in-ten-easy-steps/",
      "bio": "The simplest way to learn C# programming.",
      "objectives": [
        "Master C# programming concepts from the ground up",
        "Use the source code examples to learn step-by-step",
        "Understand the special features of C#: object orientation, the .NET framework, error-handling, serialization"
      ],
      "course_content": {},
      "requirements": [
        "Visual Studio (either the free Community edition or a commercial edition). We explain how to download and install this in the course."
      ],
      "description": "Learn C# Programming (in ten easy steps) [Version 2] is suitable for beginner programmers or anyone with experience in another programming language who needs to learn C# from the ground up. Step-by-step it explains how to write C# code to develop Windows applications using either the free Visual Studio Community Edition or a commercial edition of Microsoft Visual Studio. This is the completely revised and updated second version of this course.\nC# is one of the most widely used an important of all modern programming languages. If you need to learn C# quickly and painlessly, this is the perfect course.\n\nYou will begin by learning the core features of programming – variables, constants, functions and data types. You will move on rapidly to learn about Object Orientation and the more advanced features of C# and the .NET framework such as file-handling, data-streaming, dealing with exceptions (errors) and overriding methods. Even if you start out as a complete beginner, by the end of this course you will have built a really solid foundation of programming knowledge and skills.\nAll the source code of sample projects is provided ready for you to download, run and modify. The course also includes an eBook that provides even more information on the topics being discussed. And there are also interactive quizzes to test your understanding of each major topic.\nThe course instructor, Huw Collingbourne, is Director of Technology with SapphireSteel Software, a company that specialises in Visual Studio development tools (written in C#) for professional programmers.\nLearn C# Programming (in ten easy steps) is the fastest and simplest way to help you make the move from coding novice to professional programmer. The first version of this course was launched in 2012. The current version has been completely re-made and expanded with numerous new lessons.\nAs an added bonus, the complete version 1 of the course (almost 4 additional hours of video instruction) is also included as a free download.\nThere is also an extra bonus project (a drag-and-drop application launchpad) that will help you extend your skills while programming a genuinely useful application.",
      "target_audience": [
        "Beginners – if you’ve never coded before, you can learn C# step by step",
        "Programmers switching to C# from some other language such as Ruby, Python, C or Java"
      ]
    },
    {
      "title": "Learn TestNG using IntelliJ IDEA",
      "url": "https://www.udemy.com/course/learn-testng-using-intellij-idea/",
      "bio": "Mastering TestNG with IntelliJ IDEA for Java Developers and Selenium Automation Testers",
      "objectives": [
        "TestNG Framework,IntelliJIDEA Tool"
      ],
      "course_content": {
        "Introduction to TestNG": [
          "Introduction to TestNG"
        ],
        "Create & Run Tests in TestNG": [
          "Create , Run Tests in TestNG & Reports"
        ],
        "Annotations in TestNG": [
          "Annotations in TestNG"
        ],
        "Prioritizing Tests": [
          "Prioritizing & Disabling Tests"
        ],
        "Dependency Tests": [
          "Dependency Tests"
        ],
        "Grouping Tests": [
          "Grouping Tests"
        ],
        "Assertions": [
          "Assertions"
        ],
        "Parameters in TestNG": [
          "Parameters in TestNG"
        ],
        "DataProvider in TestNG": [
          "DataProvider in TestNG"
        ],
        "Parallel Tests": [
          "Parallel Tests"
        ]
      },
      "requirements": [
        "Basic Java Programming"
      ],
      "description": "Course Title: Mastering TestNG with IntelliJ IDEA for Java Developers and Selenium Automation Testers\nCourse Introduction: Welcome to \"Mastering TestNG with IntelliJ IDEA,\" a comprehensive course tailored for Java Developers and Selenium Automation Testers. TestNG has emerged as the go-to framework for Java-based test automation, particularly in conjunction with Selenium. Its open-source nature and powerful features make it a preferred choice for testing professionals.\nIntelliJ IDEA, an advanced Integrated Development Environment (IDE), is intricately designed to enhance developer productivity. Packed with user-friendly features, IntelliJ IDEA provides an environment that fosters efficient coding and testing practices.\nCourse Overview:\nModule 1: Introduction to TestNG\nUnderstanding the significance of TestNG in Java-based test automation.\nExploring the key features and benefits of TestNG.\nInstalling and configuring TestNG in IntelliJ IDEA.\nModule 2: Create & Run Tests in TestNG\nCreating and organizing test classes in TestNG.\nConfiguring test methods and understanding execution flow.\nExecuting tests and analyzing results.\nModule 3: TestNG Report\nGenerating and interpreting TestNG reports.\nLeveraging report functionalities for effective test analysis.\nIntegrating reports into continuous integration processes.\nModule 4: Annotations in TestNG\nDeep dive into TestNG annotations and their roles.\nUtilizing annotations for setup, teardown, and test execution control.\nModule 5: Prioritizing Tests\nManaging test execution order using priority.\nOptimizing test suites for maximum efficiency.\nModule 6: Dependency Tests\nUnderstanding test dependencies and their impact on execution.\nHandling dependencies to ensure test reliability.\nModule 7: Grouping Tests\nGrouping tests for better organization and execution control.\nImplementing group-based testing strategies.\nModule 8: Assertions\nImplementing assertions for effective validation.\nHandling assertion failures gracefully.\nModule 9: Parameters in TestNG\nPassing parameters to test methods.\nDynamic test data and its impact on test cases.\nModule 10: DataProvider in TestNG\nLeveraging DataProvider for data-driven testing.\nIntegrating external data sources with TestNG tests.\nModule 11: Parallel Tests\nRunning tests in parallel for faster execution.\nConfiguring parallelism for optimal resource utilization.\nModule 12: TestNG Listeners\nUnderstanding TestNG listeners and their applications.\nImplementing custom listeners for enhanced reporting and test control.\nConclusion: By the end of this course, you will have a comprehensive understanding of TestNG and IntelliJ IDEA, equipping you with the skills needed to efficiently create, manage, and execute robust test suites. Whether you are a Java developer or a Selenium automation tester, this course will empower you to elevate your testing practices to new heights. Join us on this learning journey and unlock the full potential of TestNG in your test automation endeavors.",
      "target_audience": [
        "Java Programmers,Automation Testers"
      ]
    },
    {
      "title": "Master MATLAB through Guided Problem Solving",
      "url": "https://www.udemy.com/course/master-matlab-through-guided-problem-solving/",
      "bio": "Become an expert in MATLAB Programming and Scientific Computing. Advance your career in Engineering Physics Biology etc",
      "objectives": [
        "Intermediate to advanced MATLAB programming proficiency. This is *the only course* that develops intermediate and advanced programming skills.",
        "Experience with real-world applications including signal processing, matrix decompositions, spectral analysis, linear and nonlinear model-fitting, and statistic",
        "Gain skills to solve challenging problems in MATLAB, as opposed to memorizing syntax rules.",
        "Data science projects and problem-solving in MATLAB"
      ],
      "course_content": {},
      "requirements": [
        "A computer with MATLAB or Octave installed.",
        "Many people have access to MATLAB through their school, university, or company.",
        "MATLAB also offers student licenses and free 30-day trials.",
        "Octave is a free cross-platform scientific computing environment that has nearly identical functionality as MATLAB.",
        "Some prior expose to MATLAB programming is highly recommended.",
        "This course starts from the basics but builds quickly to intermediate/advanced programming levels.",
        "Previous experience with other programming languages can be beneficial but is not necessary."
      ],
      "description": "MATLAB is the premier programming language of scientific computing in university, research, and industry.\n\nExcellent MATLAB programming skills can make or break a career in engineering, physics, biology, finance, and many other fields.\n\nBut how do you learn how to program in MATLAB? Sure, you can watch some tutorial videos online, but those videos generally focus on the most basic coding skills, like what is a variable and how to write a for-loop.\n\nThose are important foundations, but they won't make you competitive. If you want to be competitive, you need to become a master at MATLAB programming. And that's what you'll learn in this course.\nThis course is different from other MATLAB programming courses!\n\nRather than having short videos that presents a simple piece of MATLAB syntax, this course starts from the real-world perspective: Problems in data science that you can solve with MATLAB.\n\nDo you need to learn how to filter your signal in MATLAB?  There's a section for that!\n\nDo you have a complicated formula and you need to translate it into MATLAB code and make a graph that simulates the formula with different parameters? Yeah, there's a section on that as well!\n\nDo you need to make a movie of a 3D simulation changing in color over time and then export as an .avi file? This course covers that as well!\nMaybe you want to learn how to make textured landscapes using fractal math, or use SVD to compute the low-rank approximation of a data matrix, or use nonlinear search methods to fit a 3-parameter Gaussian model to data? You guessed it -- it's all covered in this course!\nIf you are looking for a slow, gentle course that will take baby-steps to teach you what you could have learned on your own, then this is not that course.\n\nIf you want to gain confidence in solving real-world problems in MATLAB coding to advance your studies, your research, and your career by learning MATLAB programming from a single course with >35 hours of hands-on instruction from a world-class scientist, teacher, and writer, then this course is definitely right for you.\n\nKey topics covered.\nThe basic stuff: loops, functions, IO, etc. Core skills you need to be able to progress with MATLAB for scientific computing or data science.\n\nThe more intermediate and advanced topics in the course include:\n2D and 3D plotting, and data animations (movies)\nImage and time series segmentation\nCalculus and differential equations\nUnivariate and multivariate time series cleaning and analysis\nSpectral (Fourier) and time-frequency analyses\nLinear algebra including eigendecomposition, orthogonalization, and principal components analysis\nGenerating fractal pictures and time series\nNonparametric statistics and nonlinear model fitting\nGet started today!\nThere is no doubt that MATLAB is the premier programming language of scientific computing and data science in university, research, and industry.\nThe sooner you sign up for this course, the sooner you will be able to advance your career in engineering, physics, biology, finance (or other fields using MATLAB).\nWhy not get started today?\nClick the Signup button to sign up for the course!",
      "target_audience": [
        "Anyone looking to build a career in engineering, physics, biology, finance, and many other fields by building Excellent MATLAB coding skills",
        "Anyone wanting to progress beyond watching simple MATLAB tutorials to actually becoming an expert in MATLAB programming by solving real problems in scientific computing"
      ]
    },
    {
      "title": "R Tidyverse Reporting and Analytics for Excel Users",
      "url": "https://www.udemy.com/course/r-tidyverse-reporting-and-analytics-for-excel-users/",
      "bio": "From Excel To Big Data and Interactive Dashboard Visualizations in 5 Hours",
      "objectives": [
        "How R implements common Excel functions and how it can actually be faster, easier and more flexible than the familiar Excel methods. By the end of this course you will have the knowledge to work with large sets of data faster and easier than you ever thought possible. This course uses the tidyverse libraries in R which provide an elegant solution for solving 99% of our reporting requirements. Tidyverse is incredibly well supported and by focusing solely on this one set of libraries we can massively shortcut the amount of time that is required to get up and running with R. Many beginner courses in R will start teaching what is known as base R which covers the original methods for working with R that have been enhanced and simplified through the tidyverse. Although it maybe useful to have some understanding of base R it is neither a requirement of this course or a requirement to becoming really productive in the R language. As we go through the exercises we are going to be comparing to the most common way that processes are typically carried out in Excel."
      ],
      "course_content": {},
      "requirements": [
        "You should be comfortable with vlookups, if statements and pivot tables in Excel"
      ],
      "description": "If you use Excel for any type of reporting or analytics then this course is for you. There are a lot of great courses teaching R for statistical analysis and data science that can sometimes make R seem a bit too advanced for every day use. Also since there are many different ways of using R that can often add to the confusion. The reality is that R can be used to make your every day reporting analytics that you do in Excel much faster and easier without requiring any complex statistical techniques while at the same time giving you a solid foundation to expand into those areas if you so wish. This course uses the Tidyverse standards for using R which provides a single, comprehensive and easy to understand method for using R without complicating things via multiple methods. It's designed to build upon the the skills you are already familiar with in Excel to shortcut your learning journey.\nWhen I first started using R I thought that it could be a good replacement for the automation type processes I used to write in VBA. This can be quite off putting for a lot of Excel users as VBA often adds an extra layer of complexity to your work and is often only something which is done to automate a process which has already been established in Excel. One of the key benefits of Excel is that you are working directly with the data without having to go through the complexity and overhead of using a programming language.\nProgramming languages such as VBA are actually very difficult for working with data as there isn't even any concise way of referencing common data elements such as named table columns. To carry out an operation on every row would take several lines of code which runs slow and ends up hiding your formula which actually contains your business logic.\nDespite all of this people use VBA anyway as once you invest the time to setup your processes you can run the exact same steps thousands of times with a click of a button.\nWhat if there were a way to work directly with your data as simply as Excel but also have more programming power than VBA? That's what R can do for you.\nSince I've started using R people have asked me when it would be beneficial to use R instead of Excel. Here are some examples\n1. vlookups and sumifs on large datasets can run very slowly in Excel. I've helped people to replace multiple lines of vlookups that take 80 minutes to run in Excel with a single function in R that takes less than 1/10th of a second.\n2. Exploring and analysing your data in R can be Viewed in a simple table like Excel but also has a wide range of other methods which can be more effective.\n3. Dashboards and visualisations are much richer and easier to construct than in Excel\n4. Distributing your work in Excel can be beneficial since almost everyone has Excel installed. The problems with this are that not everyone always has the same version of Excel or addins installed which means your work might not be compatible. Also files are usually emailed around which can very quickly lead to hundreds of untracked copies of your Excel files with slight variations in them. The outputs from R can be simple Excel or csv files however your output can also be a web app that can be centrally stored and tracked on a server compatible with any web browser on your computer or smart phone.\n5. Team collaboration and version control in Excel is done via shared workbooks and track changes. Turning on these features in Excel disables some of Excels best features and still results in file locking. Team collaboration in R is done on github which allows you to easily work across teams without file locking issues and full audit histories of your work.\nThe beauty of R is that once you start using it you will no longer have to make a special investment of time to automate your processes after your analysis is done. Practically anything that you can do in Excel you'll be able to do faster and better for even your first round of analysis and will leave you with an script which means your work is reproducible and automated from the very beginning.\nEven though your existing Excel skills will help you to pick up R one of the hardest things is that you're so familiar with Excel that it's too easy to keep on using it. I used Excel for years and spent thousands of hours studying how to use it more efficiently, I even taught advanced courses in it. It seemed obvious to me at the time that it was one of the most efficient ways to work with data. Even though working with a programming language might be more powerful it often had too much over head and was too removed from the actual data analysis. R is the programming language I wish I learnt 20 years ago. Perhaps somewhat counter intuitively you'll end up spending less time thinking about how to put a piece  of work together than Excel and more time looking at your data in new ways that you've probably never even thought of.",
      "target_audience": [
        "If you are currently using Excel to deliver a regular reporting requirement this course will be a good fit for you. This course is designed to introduce R to non programmer Excel users who are already familiar with Pivot Tables, vlookups ,if statements and charts."
      ]
    },
    {
      "title": "Web Scraping with Python: BeautifulSoup, Requests & Selenium",
      "url": "https://www.udemy.com/course/web-scraping-with-python-beautifulsoup/",
      "bio": "Web Scraping and Crawling with Python: Beautiful Soup, Requests & Selenium",
      "objectives": [
        "Python Refresher: Review of Data Structures, Conditionals, File Handling",
        "How Websites are Hosted on Servers; Basic Calls to Server (GET, POST Methods)",
        "Web Scraping with Python Beautiful Soup and Requests",
        "Using Selenium to handle JavaScript and AJAX",
        "Diverse Web Scraping Exercises",
        "Source codes (*.py files) for all Exercises can be downloaded",
        "Q&A board to send your questions and get them answered quickly"
      ],
      "course_content": {
        "Web Scraping Course Overview": [
          "Web Scraping Course Overview"
        ],
        "Python Refresher: Data Structures (Optional)": [
          "Lists",
          "Dictionaries",
          "Tuples",
          "List Comprehensions - Part 1",
          "List Comprehensions - Part 2",
          "Inline - if else and List Comprehensions",
          "Installing xlrd and XlsxWriter to Read/Write to Excel Files",
          "Wrting to Excel Files",
          "Reading from Excel Files",
          "Python Editor & Other Software",
          "Exercise #1: YOU: Web Scraping Expert"
        ],
        "How Servers Work": [
          "How Websites are Hosted",
          "HTML Revision"
        ],
        "BeautifulSoup Warm-up Exercise": [
          "BeautifulSoup Solved Exercise",
          "Simple Scraper"
        ],
        "Installing Required Python Packages": [
          "Installing Required Python Packages"
        ],
        "Introduction to Requests Python Library": [
          "Requests Get Method",
          "User Agent",
          "Installing fake_useragent Package"
        ],
        "Introduction to Beautiful Soup Python Library": [
          "Web Scraping with Beautiful Soup - Overview",
          "Web Scraping with Beautiful Soup - Overview P.2",
          "Accessing Tags",
          "Navigable Strings"
        ],
        "Navigating with Beautiful Soup - Going Down": [
          "Navigating through Tag Names",
          "Contents and Children Methods",
          "Descendants Method"
        ],
        "Navigating with Beautiful Soup - Going Up": [
          "Parent Method",
          "Parents Method"
        ],
        "Navigating with Beautiful Soup - Going Sideways": [
          "next_sibling",
          "previous_sibling",
          "next_siblings & previous_siblings"
        ]
      },
      "requirements": [
        "Some prior programming experience in Python (e.g. Data Structures and OOP) will help. The course includes a full Python refresher section.",
        "Complete beginners may wish to take a beginner Python course first, and then transition to this course afterwards.",
        "This course adopts a step-by-step approach and requires you to open a Python editor, download available *.py code files, and start applying the provided examples and exercises.",
        "Python 3: Codes of this course are tested on Python 3. It is up to you to adapt them if you want to run them in Python 2."
      ],
      "description": "Web Scraping (also termed Screen Scraping, Web Data Extraction, Web Harvesting, etc.) is a technique for extracting large amounts of data from websites  and save the the extracted data to a local file or to a database.\nIn this course, you will learn how to perform web scraping using Python 3 and the Beautiful Soup, a free open-source library written in Python for parsing HTML.\nWe will use lxml, which is an extensive library for parsing XML and HTML documents very quickly; it can even handle messed up tags. We will also be using the Requests module instead of the already built-in urllib2 module due to improvements in speed and readability.\nFinally, we will use Selenium alongside Beautiful Soup to crawl AJAX & JavaScript driven pages.\n\nThe course cover the following topics: accessing web pages programmatically; scraping web pages to extract the required data using Beautiful Soup to parse web pages; interacting with web pages to do different things with them programmatically; and using Selenium for web scraping and when we need it.\nBy the end of this course, you will be able to understand how websites and servers function, diverse data extraction techniques, and methods of handling and organizing data.\nThis Web Scraping course covers the following topics:\n\nReview of data structures (Lists, Dictionaries, Tuples, File Handling)\nHow websites are hosted on servers\nCalls to the server (GET, POST methods)\nReview of HTML and CSS\nRequests Module and BeautifulSoup Module overview\nParsing HTML using BeautifulSoup\nFiltering elements using BeautifulSoup and navigating the Parse Tree\nJavaScript and AJAX overview\nSelenium and the need for it\nSelecting elements using Selenium\nCSS selectors\nXPath selectors\nNavigating pages using Selenium\nPractical Projects",
      "target_audience": [
        "Those who want to learn how to use Python for web scraping and data extraction."
      ]
    },
    {
      "title": "Java 17: Learn and dive deep into Java",
      "url": "https://www.udemy.com/course/best-java-course/",
      "bio": "Java 17 Fundamentals, OOP, Lambdas, Generics, Stream API, Collections, IO, and JUnit 5 With real-life examples",
      "objectives": [
        "Learn Java from basic syntax to advanced topics.",
        "You will see many examples similar to what you will encounter in your job as a Software Engineer.",
        "You will be able to implement industry best practices, conventions, and guidelines.",
        "Ability to answer java trivia interview questions and code challenges.",
        "Think creatively to tackle code challenges.",
        "You will dive deep in Object Oriented Programming principles.",
        "Have deep understanding to Collections framework and be able to choose the right data structure."
      ],
      "course_content": {
        "Welcome to the Course": [
          "Intro to the Course"
        ],
        "Introduction to Java": [
          "Download and Install JDK (Java Development Kit)",
          "Where to Write Java Code",
          "Download and Install IntelliJ IDEA",
          "IntelliJ IDEA First Look",
          "Organizing the Code in Java",
          "What is Compiled Code?",
          "Compiled Code in IntelliJ IDEA",
          "JDK, JRE, and JVM in Depth",
          "Is Java Slow?",
          "print() and println() methods in Java",
          "Introduction to Comments in Java",
          "Section Quiz"
        ],
        "Primitive Data Types": [
          "Introduction to Variables",
          "Variables Naming Conventions",
          "Introduction to Primitive Data Types",
          "Integral Data Types",
          "Arithmetic Operators Part 1",
          "Arithmetic Operators Part 2",
          "Assignment Operators",
          "booleans and Relational Operators",
          "char Data Type",
          "Type Inference",
          "Escape Sequences and printf method",
          "User Input",
          "Scanner Methods and More Examples",
          "Wrapper Classes",
          "Section Quiz"
        ],
        "Conditionals": [
          "if-else Statement",
          "Nested-If example",
          "if-else Statement (Example)",
          "Exercise - even or odd",
          "Logical Operators (AND & OR)",
          "Exercise - fizz-buzz",
          "Logical Not (Negating boolean Values)",
          "Ternary Operators (Elvis Operator)",
          "Exercise - insurance rate",
          "Switch Statement",
          "Introduction to Debugging",
          "Section Quiz"
        ],
        "Iterations in Java": [
          "While Loop",
          "do-while Loop",
          "For Loop",
          "Jump Statements and Conditional Debugging",
          "Exercise on Iterations in Java Part 1",
          "Exercise on Iterations in Java Part 2",
          "Nested Loops",
          "Nested Loops Exercise Part 1",
          "Nested Loops Exercise Part 2",
          "Section Quiz"
        ],
        "Arrays and Strings": [
          "Introduction to Arrays Part 1",
          "Introduction to Arrays Part 2",
          "Traversing Arrays",
          "Exercise on Arrays",
          "Two-dimensional Arrays",
          "Two-dimensional Arrays Exercise",
          "Strings Immutability",
          "new String",
          "Strings are Arrays of Characters",
          "Strings Traversal",
          "Strings Methods",
          "StringBuilder",
          "Section Quiz"
        ],
        "OOP Part 1 (classes, methods, static keyword)": [
          "Classes and Objects",
          "Methods",
          "Method Signature and Method Overload",
          "Pass by Value VS. Pass by Reference",
          "Class Constructor",
          "Access Modifiers",
          "this Keyword",
          "Static Variable",
          "Static Block",
          "Static Method",
          "Static Nested Classes and Inner-Classes",
          "Section Quiz"
        ],
        "OOP Part 2 (Inheritance and record class)": [
          "Introduction to Inheritance",
          "Protected Access Modifier",
          "Method Overriding (Runtime Polymorphism)",
          "final and sealed Keywords",
          "Encapsulation (getters and setters)",
          "Object Methods (getClass)",
          "Object Methods (hashCode, equals, toString)",
          "Record Class (data carrier)",
          "Section Quiz"
        ],
        "OOP Part 3 (Abstract classes and Interfaces)": [
          "The Diamond Problem",
          "Abstract classes and Methods",
          "Interfaces in Java",
          "Multiple Inheritance using Interfaces",
          "Interface vs. Abstract Class",
          "OOP Principles",
          "Object Oriented Principles",
          "instanceOf Operator",
          "Enumerations"
        ],
        "Exception Handling": [
          "Introduction to Exception Handling",
          "try-catch and Checked Exceptions",
          "try-with-resource and Exception Propagation",
          "Custom Exception"
        ]
      },
      "requirements": [
        "Laptop, preferably with two monitors, one for the course, and the other one for practice.",
        "Basic Programming knowledge.",
        "IntelliJ IDEA Community Edition",
        "Java Standard Edition (SE) version 17 or later."
      ],
      "description": "Welcome to the Learn and dive deep into Java course.\n\n\nThis course is for:\nStudents.\nGraduates\nSelf-taught Software Engineers\nBootcamp graduates.\nInterview Preparation.\nTechnical Managers.\nSoftware engineers with 0-3 years of experience\nor If you always want to stay up-to-date (this course will be updated regularly to cover the latest Java features)\n\n\nCourse prerequisite:\nYou need a laptop, preferably connected to two screens, one for the course and the other for practice.\nTo stand out as a software engineer, you should be patient, inquisitive, and detail-oriented.\nNo prior programming experience is totally fine. I'm explaining all concepts here in a very simple and straightforward way.\nI will use IntelliJ IDEA Community Edition to write Java Code in this course. It is free, modern, and preferred among Java developers.\n\n\nI chose Java for this course for many reasons:\nIt is a must-know programming language taught in all computer science programs.\nUsing Java, you can develop countless types of applications that run on any operating system.\nJava is the second preferred programming language among the top 25 tech giants.\n\n\nCourse overall objectives:\nProvide detailed and organized material that makes you land a job and start working from day one.\nThis course will cover most Java topics, data structure, and some algorithms so you can pass job interviews.\nThere will be a questions and answers section to answer students' questions.\n\n\nI will update this course every three months.\nI will answer all your questions within 48 hours, and some questions will get a video response.\n\n\nThis course covered in detail the following topics:\nJava Fundamentals (Data Types, Conditionals, Iterations, Arrays, Strings, Exception Handling).\nObject Oriented Programming (Classes, Methods, Static, Inheritance, Record, Abstract classes, Interfaces).\nLambda expressions, Generics, Stream API.\nCollections Framework (in-depth).\nComing Soon Multithreading, Data Structure in Java, and more.",
      "target_audience": [
        "Computer Science Students are interested in learning and applying Java.",
        "Self-taught Developers want to take their knowledge to the next level.",
        "Java Bootcamp graduates/java developers preparing for job interviews.",
        "Java Developers who want to stay up-to-date with the latest java new features and updates."
      ]
    },
    {
      "title": "Microsoft SQL for Beginners",
      "url": "https://www.udemy.com/course/microsoft-sql-for-beginners/",
      "bio": "A comprehensive course to teach you how to complete SQL queries using Microsoft SQL Server and the T-SQL language.",
      "objectives": [
        "Complete literal SELECT statements.",
        "Complete basic SELECT statements querying against a single table",
        "Filter data using the WHERE clause",
        "Sort data using the ORDER BY clause",
        "Learn about database design and normalization",
        "Using joins, return columns from multiple tables in the same query",
        "Understand the difference between the INNER JOIN, LEFT/RIGHT OUTER JOIN, and FULL OUTER JOIN",
        "Complete SQL statements that use aggregate functions",
        "Group data together using the GROUP BY clause",
        "Filter groups of data using the HAVING clause"
      ],
      "course_content": {
        "Introduction to SELECT Statements": [
          "START HERE: Introduction Lecture",
          "How to Install Microsoft SQL Server Express",
          "How to Download and Install SQL Server Express",
          "How to Attach the AdventureWorks Database",
          "Introduction to T-SQL and Database Concepts",
          "Literal SELECT Statements - Part 1",
          "Literal SELECT Statements - Part 2",
          "Literal SELECT Statement Practice Problems",
          "Basic SELECT Statements - Part 1",
          "Basic SELECT Statements - Part 2",
          "Basic SELECT Statements - Part 3",
          "Basic SELECT Statement Practice Problems"
        ],
        "Filtering Data with the WHERE Clause": [
          "Using the WHERE Clause - Part 1",
          "Using the WHERE Clause - Part 2",
          "Using the WHERE Clause - Part 3",
          "Using the WHERE Clause - Part 4",
          "Using the WHERE Clause - Part 5",
          "Using the WHERE Clause - Part 6",
          "Using the WHERE Clause - Part 7",
          "WHERE Clause Practice Problems"
        ],
        "Sorting Data with the ORDER BY Clause": [
          "Sorting with the ORDER BY Clause - Part 1",
          "Sorting with the ORDER BY Clause - Part 2",
          "ORDER BY Clause Practice Problems"
        ],
        "Querying Multiple Tables with Joins": [
          "Using the INNER JOIN - Part 1",
          "Using the INNER JOIN - Part 2",
          "INNER JOIN Practice Problems",
          "Using the LEFT OUTER JOIN - Part 1",
          "Using the LEFT OUTER JOIN - Part 2",
          "Using the LEFT OUTER JOIN - Part 3",
          "LEFT/RIGHT OUTER JOIN Practice Problems"
        ],
        "Aggregate Functions": [
          "Aggregate Functions - Part 1",
          "Aggregate Functions - Part 2",
          "Aggregate Function Practice Problems"
        ],
        "Grouping Data with the GROUP BY Clause": [
          "Grouping with the GROUP BY Clause - Part 1",
          "Grouping with the GROUP BY Clause - Part 2",
          "GROUP BY Clause Practice Problems"
        ],
        "Filtering Groups with the HAVING Clause": [
          "Filtering Groups with the HAVING Clause - Part 1",
          "Filtering Groups with the HAVING Clause - Part 2",
          "HAVING Clause Practice Problems"
        ]
      },
      "requirements": [
        "I assume you have absolutely NO SQL or database background before taking this course.",
        "You will need to have a Windows-based computer to run Microsoft SQL Server."
      ],
      "description": "Do you want to learn a skill that can help you earn nearly $100,000 per year? If so, then this course is for you!\nSQL (Structured Query Language) is the language we use to interact with databases that store data. This allows us to retrieve data with ease and simplicity. As terms like business intelligence and big data become more familiar, businesses will need more people to learn the SQL language.\nThis course will teach you how to use the SQL language within Microsoft SQL Server, one of the most popular database engines in the world.\nYou will have plenty of video lessons to teach you the majority of the content. Each section includes practice problems or additional e-books to help reinforce what you learn in the video tutorials.",
      "target_audience": [
        "Anyone who works with data, tables, or databases!",
        "Those who work in organizations where the company typically uses Microsoft databases. This course uses Microsoft SQL Server and T-SQL (Microsoft SQL) variant of the SQL language. Those who work with Oracle, DB2, or MySQL might not gain as much from this course.",
        "If you work in: marketing, finance, accounting, operations, sales, manufacturing, healthcare, financial services, or any other industry/function that collects information",
        "Someone who wants to learn skills that give them the potential to earn near SIX figures!"
      ]
    },
    {
      "title": "Master Python by Coding 100 Practical Problems",
      "url": "https://www.udemy.com/course/python-video-workbook/",
      "bio": "A 100% hands-on course to learn Python by coding 100 Python exercises and compare your code with the provided solutions.",
      "objectives": [
        "Solve 100 Python scored assignments ranging from beginner to expert levels.",
        "Know your Python skill level via the collected points.",
        "Solve assignments in many areas: data analysis, image processing, visualizations, web apps, and much more.",
        "Compare your solutions to the correct Python solutions for every exercise. You will have the Teacher’s Edition!",
        "You will know the category level of your Python programming skills by the end of the course.",
        "Have unlimited access to your instructor: Ardit Sulce"
      ],
      "course_content": {
        "Exercise 1 to 25": [
          "Course Introduction",
          "Required Tools",
          "Best Practices",
          "Helpful Resources",
          "Exercise 1 - Variable Updating",
          "Exercise 1: Solution",
          "Exercise 2 - Naming Rules",
          "Exercise 2: Solution",
          "Tips",
          "Exercise 3 - Compare vs Assign",
          "Exercise 3: Solution",
          "Daily Python Projects",
          "Exercise 4 - TypeError",
          "Exercise 4: Solution",
          "Exercise 5 - Sequence Indexing",
          "Exercise 5: Solution",
          "Exercise 6 - Sequence Slicing",
          "Exercise 6: Solution",
          "Exercise 7 - Sequence Slicing",
          "Exercise 7: Solution",
          "Exercise 8 - Negative Indexing",
          "Exercise 8: Solution",
          "Exercise 9 - Negative Slicing",
          "Exercise 9: Solution",
          "Exercise 10 - Sequence Item Picking",
          "Exercise 10: Solution",
          "Continuing",
          "Exercise 11 - Ranges",
          "Exercise 11: Solution",
          "Exercise 12 - More Ranges",
          "Exercise 12: Solution",
          "Exercise 13 - Ranges of Strings",
          "Exercise 13: Solution",
          "Exercise 14 - Removing Duplicates",
          "Exercise 14: Solution",
          "Exercise 15 - Simple Dictionary",
          "Exercise 15: Solution",
          "Exercise 16 - Accessing Dictionary Items",
          "Exercise 16: Solution",
          "Exercise 17 - Dictionary Items Sum Up",
          "Exercise 17: Solution",
          "Exercise 18 - KeyError",
          "Exercise 18: Solution",
          "Exercise 19 - Add Dictionary Key",
          "Exercise 19: Solution",
          "Exercise 20 - Apply Function to Dictionary Items",
          "Exercise 20: Solution",
          "Exercise 21 - Dictionary Filtering",
          "Exercise 21: Solution",
          "Exercise 22 - Formatted Print",
          "Exercise 22: Solution",
          "Exercise 23 - Multilevel Indexing",
          "Exercise 23: Solution",
          "Exercise 24 - Iterate Dictionary",
          "Exercise 24: Solution",
          "Exercise 25 - Print Alphabet",
          "Exercise 25: Solution"
        ],
        "Exercise 26 to 50": [
          "Exercise 26 - Print Range",
          "Exercise 26: Solution",
          "Exercise 27 - Acceleration Calculator",
          "Exercise 27: Solution",
          "Exercise 28 - TypeError",
          "Exercise 28: Solution",
          "Exercise 29 - Liquid Volume Calculator",
          "Exercise 29: Solution",
          "Exercise 30 - Arguments",
          "Exercise 30: Solution",
          "Exercise 31 - Function Blueprint",
          "Exercise 31: Solution",
          "Exercise 32 - Global Variables",
          "Exercise 32: Solution",
          "Exercise 33 - Local Variable",
          "Exercise 33: Solution",
          "Exercise 34 - Local Vs. Global Variables",
          "Exercise 34: Solution",
          "Exercise 35 - String Splitter",
          "Exercise 35: Solution",
          "Exercise 36 - Word Counter",
          "Exercise 36: Solution",
          "Exercise 37 - Advanced Word Counter",
          "Exercise 37: Solution",
          "Exercise 38 - NameError",
          "Exercise 38: Solution",
          "Exercise 39 - AttributeError",
          "Exercise 39: Solution",
          "Exercise 40 - TypeError",
          "Exercise 40: Solution",
          "Exercise 41 - Letters in File",
          "Exercise 41: Solution",
          "Exercise 42 - Iterating Multiple Sequences",
          "Exercise 42: Solution",
          "Exercise 43 - Letters Two by Two",
          "Exercise 43: Solution",
          "Exercise 44 - Letters Three by Three",
          "Exercise 44: Solution",
          "Exercise 45 - One File per Letter",
          "Exercise 45: Solution",
          "Exercise 46 - Letter Extractor",
          "Exercise 46: Solution",
          "Exercise 47 - Conditioned Letter Extractor",
          "Exercise 47: Solution",
          "Exercise 48 - IndentationError",
          "Exercise 48: Solution",
          "Exercise 49 - Pass",
          "Exercise 49: Solution",
          "Exercise 50 - Text Input",
          "Exercise 50: Solution",
          "Daily Python Projects"
        ],
        "Exercise 51 to 75": [
          "Exercise 51 - EOF",
          "Exercise 51: Solution",
          "Exercise 52 - String Formatting",
          "Exercise 52: Solution",
          "Exercise 53 - Multilevel Dictionary",
          "Exercise 53: Solution",
          "Exercise 54 - Modifying Multilevel Dictionaries",
          "Exercise 54: Solution",
          "Exercise 55 - Adding to Multilevel Dictionaries",
          "Exercise 55: Solution",
          "Exercise 56 - Dictionary to JSON",
          "Exercise 56: Solution",
          "Exercise 57 - JSON to Dictionary",
          "Exercise 57: Solution",
          "Exercise 58 - Add to JSON",
          "Exercise 58: Solution",
          "Exercise 59 - Enumerator",
          "Exercise 59: Solution",
          "Exercise 60 - Infinite Printer",
          "Exercise 60: Solution",
          "Exercise 61 - Timed Printer",
          "Exercise 61: Solution",
          "Exercise 62 - Progressive Timed Printer",
          "Exercise 62: Solution",
          "Exercise 63 - Progressive Time Printer with Threshold",
          "Exercise 63: Solution",
          "Exercise 64 - Executing Next Statement",
          "Exercise 64: Solution",
          "Exercise 65 - Ignoring Next Statement",
          "Exercise 65: Solution",
          "Exercise 66 - Translator",
          "Exercise 66: Solution",
          "Exercise 67 - Advanced Translator",
          "Exercise 67: Solution",
          "Exercise 68 - User Friendly Translator",
          "Exercise 68: Solution",
          "Exercise 69 - Requests",
          "Exercise 69: Solution",
          "Exercise 70 - File from URL",
          "Exercise 70: Solution",
          "Exercise 71 - Letter Counter",
          "Exercise 71: Solution",
          "Exercise 72 - Google Searcher",
          "Exercise 72: Solution",
          "Exercise 73 - Data Multiplier",
          "Exercise 73: Solution",
          "Exercise 74 - File Concatenator",
          "Exercise 74: Solution",
          "Exercise 75 - Data Plotter",
          "Exercise 75: Solution"
        ],
        "Exercise 76 to 100": [
          "Exercise 76 - Date and Time Generator",
          "Exercise 76: Solution",
          "Exercise 77 - Year of Birth Calculator",
          "Exercise 77: Solution",
          "Exercise 78 - Password Generator",
          "Exercise 78: Solution",
          "Exercise 79 - Password Checker",
          "Exercise 79: Solution",
          "Exercise 80 - Advanced Password Checker",
          "Exercise 80: Solution",
          "Exercise 81 - Username and Password Checker",
          "Exercise 81: Solution",
          "Exercise 82 - Astronomy",
          "Exercise 82: Solution",
          "Exercise 83 - Monitor Size Detector",
          "Exercise 83: Solution",
          "Exercise 84 - Pyglet",
          "Exercise 84: Solution",
          "Exercise 85 - Data Cleaner",
          "Exercise 85: Solution",
          "Exercise 86 - Data Checker",
          "Exercise 86: Solution",
          "Exercise 87 - Add Missing Data",
          "Exercise 87: Solution",
          "Exercise 88 - Data Filter",
          "Exercise 88: Solution",
          "Exercise 89 - Database Filter",
          "Exercise 89: Solution",
          "Exercise 90 - Database to CSV Converter",
          "Exercise 90: Solution",
          "Exercise 91 - CSV to Database",
          "Exercise 91: Solution",
          "Exercise 92 - File Counter",
          "Exercise 92: Solution",
          "Exercise 93 - Recursive File Counter",
          "Exercise 93: Solution",
          "Exercise 94 - URL Cleaner",
          "Exercise 94: Solution",
          "Exercise 95 - Comma Separated Input",
          "Exercise 95: Solution",
          "Exercise 96 - File Writer",
          "Exercise 96: Solution",
          "Exercise 97 - Advanced File Writer",
          "Exercise 97: Solution",
          "Exercise 98 - Desktop GUI",
          "Exercise 98: Solution",
          "Exercise 99 - Data Writer Web App",
          "Exercise 99: Solution",
          "Exercise 100 - Username and Password Checker Web App",
          "Exercise 100: Solution",
          "Your Python Skill Level",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A working computer (Windows, Mac, or Linux).",
        "Basic knowledge of Python."
      ],
      "description": "Unlike standard video courses that walk you through the learning process, in this course, you will learn and improve your Python skills by solving 100 different Python assignments on your own. The assignments range from easy to advanced and each assignment comes with the solution provided by the instructor so you can compare your code with that of the instructor.\nThe course works best for those who already know Python basics that are variables, basic data types, functions, loops, and conditionals. If you don’t know Python basics, please, take a Python for beginners course first. Besides the exercises, the course also contains short and to-the-point videos tackling key Python concepts related to the exercises.\nThe exercises become more difficult as you progress through the course. The topics that the problems cover vary widely. You will find problems such as simple password generators, removing duplicates, finding the smallest file, fixing bugs in existing programs, and even creating chatbots from scratch. The wide range of exercises helps to improve your Python skills in all important areas.\nThis course will also increase your confidence when applying for jobs. The skills you learn in this class are common questions in programming job interviews. You will be prepared!",
      "target_audience": [
        "People who know Python basics, but lack the confidence to solve coding problems on their own."
      ]
    },
    {
      "title": "The Ultimate Python Programming Tutorial",
      "url": "https://www.udemy.com/course/the-ultimate-python-programming-course/",
      "bio": "Python Programming tutorial for beginners. This Python Training Course Comes with Certification of Completion",
      "objectives": [
        "To teach real programming skills that transfer to real life development",
        "Build a solid understanding of Python Programming"
      ],
      "course_content": {
        "Introduction": [
          "Working Files - Download These First",
          "What This Course Covers"
        ],
        "Installing Python": [
          "Installing Python In Windows",
          "Installing Python On A Mac"
        ],
        "Writing Your First Program - Hello, World!": [
          "Entering And Running A Program In Windows",
          "Entering And Running A Program On A Mac",
          "Exercise 1"
        ],
        "Python Basic Data Types And Variables": [
          "Expressions, Statements, Variables",
          "Working With Numbers",
          "Working With Strings",
          "Working With Booleans",
          "Working With Lists",
          "Working With Dictionaries",
          "Working With Tuples",
          "Exercise 1",
          "Exercise 2"
        ],
        "Python Input/Output": [
          "Using The Print Function - Part 1",
          "Using The Print Function - Part 2",
          "Getting Input From The User",
          "Exercise 1"
        ],
        "Making Decisions - if Statements": [
          "The Relational Operators",
          "The Logical Operators",
          "Simple if Statement",
          "if-else Statement",
          "if-elif Statement",
          "Exercise 1",
          "Exercise 2"
        ],
        "while Loops": [
          "Introduction To while Loops",
          "Count-Controlled while Loops",
          "Event-Controlled while Loops",
          "Using continue",
          "Using break",
          "Working With Files - Part 1",
          "Working With Files - Part 2",
          "Exercise 1",
          "Exercise 2"
        ],
        "for Loops": [
          "Introduction To for Loops - Part 1",
          "Introduction To for Loops - Part 2",
          "for Loops With Lists",
          "for Loops With Tuples",
          "for Loops With Dictionaries",
          "for Loops With Files",
          "Exercise 1",
          "Exercise 2"
        ],
        "Iterators": [
          "Understanding Iterators",
          "Using iter And next",
          "Iterators And Dictionaries",
          "Other Iterators",
          "Exercise 1"
        ],
        "List Comprehensions": [
          "Introduction To List Comprehensions",
          "Using List Comprehensions With Files",
          "Exercise 1"
        ]
      },
      "requirements": [
        "A basic understanding of web design or fundamental programming skills"
      ],
      "description": "In this online Python course from O'Reilly Media, you will learn how to program with the popular development language. This tutorial is designed for the beginner, and you do not need to have any experience at all with programming or development in order to learn how to program with Python using this video tutorial.\nSome of the topics that this course covers throughout the ultimate Python for beginners training include installing Python, data types and creating variables, input and output, decision making and repetition, iterators, list comprehension and functions. He also covers variable scope, modules - creating and using pre-built ones, object oriented programming, inheritance, exception handling and using data structures.\nBy the completion of this python for beginners video based training course on Python programming, you will be comfortable with Python and how to apply it to developing applications. Throughout the course you will apply what you learn in real-world examples, reinforcing what Mike is teaching you. Working files are included to allow you to use the same source material that the author does in this training course\nTake this course now online Python course and master your skill!",
      "target_audience": [
        "Web Masters, Programmers, Entrepreneurs"
      ]
    },
    {
      "title": "Java from Zero to First Job, Practical Guide, 2000+ examples",
      "url": "https://www.udemy.com/course/java-development-for-beginners-learnit/",
      "bio": "Java Core, TDD, Streams, Lambdas, JPA/Hibernate, SQL, Build Tools, Git, Web Servers, HTML,Servlets, JSP, Spring Boot etc",
      "objectives": [
        "Java :)",
        "Learn the Java basics, including syntax and primitive data types",
        "Get necessary knowledge to demonstrate your skills of Java to future employers",
        "Students will learn programming basics which will help them to understand any other programming language",
        "Interview practice tests",
        "In this course you will get knowledge which is needed to proceed with understanding of Android, Spring Framework and other enterprise frameworks",
        "Object-oriented programming",
        "Understand difference between Java 8, 9, 11, 13, 14, 15, 16, 17",
        "Learn best practices from true programmer",
        "Learn how to write scalable, readable and maintainable clean code",
        "30+ coding exercises",
        "You will learn source code of the tutor. All homework is completed with the Trainer",
        "Learn how to use integrated development environments to create Java programs",
        "Debugging tools",
        "Eclipse IDE",
        "SOLID principles",
        "Git",
        "Java Collections Framework",
        "Implementations of the List interface",
        "Map Interface and Implementations",
        "Set Interface and Implementations",
        "Best practices of using collections in Java",
        "Performance comparision of different collections",
        "Functional programming in Java",
        "Lambda functions",
        "Method references",
        "Clean Architecture Design",
        "GoF Patterns (Creational, Structural and Behavioral)",
        "Test-driven development",
        "BDD and ATTD",
        "Integration Testing",
        "JUnit 5",
        "Mockito",
        "Powermock",
        "Reflection API",
        "Optional class",
        "How to work with date and time in Java",
        "Modules in Java",
        "Migration to a modular application",
        "Relational Databases",
        "SQL",
        "Database Architecture",
        "JDBC",
        "I18N & L10N (Internationalization and Localization with Java)",
        "Database normalization & Normal forms",
        "Database optimization",
        "Indexes in Databases",
        "Data Modelling",
        "Database Architecture",
        "DML",
        "DDL",
        "Postman",
        "Web API",
        "HTTP Methods",
        "Servlets",
        "Web Filters",
        "Events Handling in Web Application",
        "Error Handling in Web Application",
        "JSP",
        "JSTL",
        "Custom Tags in JSP",
        "OWASP Top 10",
        "Secure Coding in Java",
        "Logging in Java",
        "JPA (Jakarta Persistence API, Java Persistence API)",
        "Hibernate",
        "Spring Framework",
        "Spring Core",
        "Spring IoC (Inversion of control) & Spring DI (Dependency Injection)",
        "Spring MVC",
        "Spring Security",
        "Spring Data JPA",
        "Spring JDBC",
        "Spring AOP",
        "REST Architecture",
        "Spring Boot",
        "Creating of the Web application (online shop) using Srping Framework",
        "OpenAI API",
        "ChatGPT",
        "Best Practices of using ChatGPT",
        "Slack Messanger API",
        "Jira Software Cloud API",
        "ChatGPT, Slack, Jira Integration via Java Spring Boot Web App",
        "Create Web App via Spring Boot, ChatGPT, Jira, Slack for Project Management Operations Automation",
        "OpenAI API",
        "ChatGPT",
        "Best Practices of using ChatGPT",
        "Slack Messenger API",
        "Jira Software Cloud API",
        "Create Web App via Spring Boot, ChatGPT, Jira, Slack for Project Management Operations Automation",
        "ChatGPT, Slack, Jira Integration via Java Spring Boot Web App"
      ],
      "course_content": {
        "Introduction": [
          "Why Java and why this course? What is JDK, JRE and JVM?",
          "Communication plan",
          "Tips to Improve Your Course Taking Experience",
          "Unlimited access to 'Learn IT' application for students",
          "Additional Free Learning Materials to Use During the Course",
          "Free AI Bot for My Students Only – No Sign-Up, FREE, Just Practice"
        ],
        "Java Basics": [
          "About Latest Java Version",
          "JDK Installation",
          "First application: Hello World App",
          "Hello World: .bat or .sh",
          "Homework Solution: .bat file creation",
          "Integrated Development Environment, Eclipse Overview",
          "Comments in Java source code",
          "Quiz: Java Basics - Check yourself"
        ],
        "Primitive Data Types, Variables and Arrays": [
          "Primitive types and variables",
          "Number Systems",
          "Arrays",
          "Quiz: Primitive data types, variables and arrays - Check yourself"
        ],
        "Eclipse: Tips and Tricks": [
          "Packages: creation and package presentation in eclipse",
          "Plugins: how to install free plugins, eclipse marketplace, workspace styles",
          "Code Refactoring in Eclipse"
        ],
        "Operators and Operations with primitive types": [
          "Operators in Java",
          "Operations with integers and floating-point numbers, BigDecimal type",
          "Math class, NaN, Infinity",
          "Type of the expression in Java",
          "Compare primitive and reference types & Java Memory Model",
          "Read user input from console",
          "Simple console integer calculator",
          "Calculate Area of Triangle",
          "Calculate Circle Circumference",
          "Homework review: Operators and Operations",
          "Quiz: Operators and Operations with primitive types - Check yourself"
        ],
        "Strings in Java": [
          "String: object creation and main methods overview",
          "String comparison: How to compare Strings and what is String Pool",
          "Escape Sequences in Java",
          "String Formatting",
          "Regular expressions in Java",
          "Format floating-point number",
          "Split Words",
          "Homework review: String",
          "Quiz: Strings in Java - Check yourself"
        ],
        "Control Statements": [
          "'if - else' construction",
          "Admin and Guest mode for application",
          "Simple Number Calculator",
          "Homework review: 'if' statement",
          "'switch' construction",
          "User Activity Selector",
          "Homework review: 'switch' statement",
          "Quiz: Control Statements - Check yourself"
        ],
        "Miscellaneous": [
          "Random numbers generation"
        ],
        "Iteration Statements (Loops) in Java": [
          "'while' loop",
          "'do-while' loop",
          "'for' with condition loop",
          "'for each' loop",
          "Nested loops",
          "Jump Statements - Break and Continue",
          "Labels in Java",
          "Print digits from new line",
          "Pyramid in console",
          "Print matrix to console",
          "Homework review: Iteration Statements (Loops)",
          "Quiz: Iteration Statements (Loops) in Java - Check yourself"
        ],
        "Methods in Java": [
          "Methods in Java: Overview",
          "Parameter Passing Mechanism in Java",
          "Recursive methods",
          "Variable Length Arguments",
          "Find max int in array",
          "Draw empty rectangle",
          "Calculate Amount of Words",
          "Filter String array",
          "Rotate Matrix",
          "Extend Array",
          "Greatest Common Divisor",
          "Sum all digits in number",
          "String Processor",
          "Turn each first letter in a word to capital",
          "Convert decimal to Roman numbers and vice versa",
          "Homework review: Methods",
          "Quiz: Methods in Java - Check yourself"
        ]
      },
      "requirements": [
        "You want to learn Java while having fun :)",
        "No programming experience needed. You will learn everything you need to know."
      ],
      "description": "Welcome to the fundamental and the most complete course 'Java from Zero to First Job'.  As it's declared in the course name, it's created for people who want to learn programming from scratch. You need to know how to turn on your computer, no other knowledge is required for this course :) The rest will be covered in lessons.\nJust read some reviews to learn what other people say about the course:\nVinit:\n\"I am senior Java developer having 10+ years of experience. I have role to train new Folks for java. I have enrolled in 20+ courses in Java for different authors to check what is the best content available on Udemy but the way u have explained the concepts and provided homework and coding exercises(in test format) is incredibly outstanding. I am 100% sure whoever takes this course, will be able to crack java interviews. Thanks for this hard work which you have put on this course. Cheers!!\"\n\n\nAkram Kozak:\n\"I can see that he is totally clear in explaining everything and he also cares about his students all the time and never skips the smallest detail about teaching them. Thank you for the course.\"\n\n\nJosua Hamonangan:\n\"Love this course.. Love with the visualization, it makes it simplier to understand.. THANKS A LOT\"\n\n\nEmanuele Verrienti:\n\"Before buying the complete Java course, I finished the previous one for free, so without any second thoughts or doubts I believe that the instructor absolutely deserves 5 full stars for the course he created and the commitment. Moreover the English language used is VERY CLEAR (and I'm italian!) therefore whoever affirms/writes the opposite is clearly in \"bad faith\" (probably \"competition\"?! ). So, completing my review, I believe that anyone who wants to learn Java and do it with an updated course should definitely buy this course.\"\n\n\nDenys Malik:\n\"Great course. It is well-structured and has a big amount of practice. I've got a lot of useful info from it. Thank you.\"\n\n\nEslam Abd El-azize Mohamed Mohamed:\n\"wow its very cool course\"\n\n\nKavindu Harshitha:\n\"Best JAVA course highly recommended Thank you for this course\"\n\n\nSabrina Maia Quirino:\n\"Teaches incredibly well, he makes it easy to understand!\"\n\n\nDayana Pergament:\n\"The teacher explains every little details. I love learning from him thank you so much for this\"\n\n\nIshan Kapoor:\n\"GREAT TEACHER WITH GREAT TEACHING STYLE!!\"\n\n\nAnd thousands of other reviews and happy students!\n\n\nBefore starting the creation of this course, our team attentively investigated feedbacks for existing courses on the Udemy platform and tried to focus on the feedbacks for the top-rated courses to understand what can be improved in this course and make it, even more, better from the quality standpoint. After analysis, we understand what will help students to learn Java in a more efficient way. In this course:\n- High concentration of useful material in each lesson\nSometimes you can notice that watching 5 minutes of our lesson is equivalent to watching other 30 minutes lessons.\nThis is because time spent for preparation for the lesson (script for the lesson, lesson structure) and video editing (to cut boring pieces of the lesson or time when the program loads) sometimes 10 times as much (sometimes even 20) as the final lesson duration after video editing.\nOnly your homework and coding exercises including the EXAM task might take approximately 20 hours to implement.\nAlso, each topic is separated from another. In case some concept will be explained in the next lesson and you don't need to worry about understanding this in the scope of this lesson - the instructor will make an announcement when a specific topic will be covered.\nGo and try it yourself! We will appreciate your feedback.\n- Relevant knowledge\nAfter our team investigated other Java courses on Udemy we realized that most of them have nothing in common with real life. The information which is shared there is very old and significantly out of date. For example, the instructor teaches a framework which is not been used already for 15 years. Or instructors do stress on the programming design which is not used anymore at all!\nThe instructor of this course is a consultant in a top-rated IT outsourcing company and helps to bring cutting-edge solutions in IT for all his clients. Feel free to check the LinkedIn page of the instructor and check skills endorsement. More than 18 thousand people across all over the world (BTW most of them are from the top 100 companies of the world) evaluated the skills of Andrii Piatakha.\nWith this course, you can be sure that you will spend your time learning the right things from one of the best IT consultants in the world.\n- Sequence of lessons\nAfter the years of teaching offline, and based on the feedback of students who are passing online courses we realized how important the sequence of lessons is while teaching Java. The same issue is with the books where information is completely unstructured what makes things even more complex. For example, how students can learn object-oriented programming from the first lesson if they don't know yet the java syntax basics? Or how a student can implement a home task if he/she doesn't aware of java methods specifics, or doesn't know yet how to read program input?\nSo in this course, you can be sure, that you will not get a home task to implement without having enough information to implement it. The program which is in this course is proven by many students who completed it offline and now work as software engineers in outsourcing companies and as freelancers.\n- Interview practice tests\n\nBeing an IT consultant in different companies, the tutor of this course was in charge of driving the interview process in companies to make sure, that company selects the best people. That's why the first interview is always test. In case the test is completed, the candidate is invited to have a conversation. That's why in this course we want to prepare you to complete tests successfully!\nEspecially for our students, we prepared tests that could be used to evaluate their knowledge during the interview process.\n2 tests. 90 questions each (180 interview tests in total). 120 minutes each.\nYou can read explanations for answers! That also can help you to learn the material better. Don't wait, try it now!\n- Q&A support\nThe significant difference between the online and offline learning processes is the instructor's availability. If you are in one room with a tutor he always can help you to get understand the specific concepts or to help fix your code on your computer.\nIn this course, we are supporting students with answers to any questions flagged in the Q&A section. In case there will be recurring questions - separate video lessons will be created to show how to address the issue.\nSo with this course you are not just getting video materials, code exercises, source code, access to the free mobile application without limits (which is still pretty cool, huh? :) ), but you also get tutor support and answers to your questions along with this course.\n- Open source code\nWe hide nothing from our students! Including the source code for the home task solutions and source code of examples that were shared during the lesson. Having the source code you can just copy and paste it to run it on your local computer to understand how things work better.\n- Free mobile App without limits for our students\nKnowing Java is one skill. Be able to pass interviews in the company - that is another skill :) Nowadays a lot of companies use tests to select candidates on the first level of interview. We developed applications to practice skills specifically for such purposes.\nIn this course, we will provide you link to download our FREE mobile app for android. (soon it will be also available for iOS platforms)\nThe instructor of this course comes up with hundreds of tests that are used to test the knowledge of candidates. With this application, you will be well-prepared for the interview.\nAlso, only for our students - there is no limit on attempts to pass certification. In the course, we will tell you how to set up a special bonus code that will remove restrictions for our students inside the app.\n- Coding exercises\nTo learn to program is not enough just watching videos and reading books. You also need to have a lot of practice. In this training course, you will have different practical tasks which will help you learn and understand Java better.\nOne of the key tasks where you can practice your knowledge is the implementation of a backend system for an online store. Also, you have a lot of tasks that use domain-specific terminology: accounts, transactions, users, carts, menu, services, etc. So that means you are learning programming without abstract concepts like it is written in the books or in other courses. You learn domain-specific terminology and during the lessons, we investigate specific extracts from code that can give you a clear vision of how you can apply the knowledge in real life.\n\n\n\n\nSo don't wait! Take a look at the lessons' preview if you still have doubts!\nBuy this course today, and you will get all updates for FREE!\nRight now our team keeps working on the next lessons for this course. We are preparing for you a lot of other topics and coding exercises! Our goal - to create a web application together with you. Buy this course today, and you will receive all updates for free! Isn't that cool? :)\n\n\nFor those who successfully passed this training course, or for students who were recognized for asking amazing questions, there is a special offer from the IT-Bulls company! The creator of this course is IT-Bulls company CEO and Founder. We are always in search of talents to run our amazing startups together with you. Probably you always dreamed about running your own startup? In this course, you will be able to find the team who will teach you how to do that and (in particular cases) will be glad to help with implementation!\nHope you enjoy this course! And remember, we appreciate all your feedback! Your feedback will help us to become even better! Your feedback will help us to create to best Java course ever!\nSee you at the lessons! :)",
      "target_audience": [
        "Everyone who wants to learn java from scratch",
        "People who wants to learn programming basics",
        "Future software engineers of web applications",
        "Future android developers",
        "Future test automation engineers"
      ]
    },
    {
      "title": "Qt 5 QML For Beginners: The Fundamentals",
      "url": "https://www.udemy.com/course/qt_quick_qml_tutorial_for_beginners/",
      "bio": "Build Cross Platform Fluid And Dynamic UIs. Run Them on Windows, Mac, Linux, Android,iOS and Embedded.",
      "objectives": [
        "The basics of working with the QML language",
        "Working with Qt Quick basic elements and building your own in QML",
        "Signals and slots in QML",
        "Working with input elements",
        "Working with Javascript in QML",
        "Positioning elements in QML",
        "Running your QML Apps on Android",
        "Qt Quick Controls 2 framework",
        "Working with Dialogs in QML",
        "Models,Views and Delegates",
        "Transforms,Transitions and Animations",
        "Networking : Fetching HTTP Data and JSON(REST) APIs",
        "Settings and Local Storage"
      ],
      "course_content": {
        "Introduction": [
          "Important notice: PLEASE READ!",
          "Get Help (Fast)",
          "Welcome",
          "Install Qt & Tools on Windows",
          "Installing Qt & Tools on Linux",
          "Running your QML Applications",
          "Join the Official Support Channels",
          "About Qt Technologies"
        ],
        "Dissecting the QML Syntax": [
          "QML Syntax : An Overview",
          "Basic Types of the QML Language-Part1",
          "Basic Types of the QML Language-Part2",
          "Property Binding in QML",
          "The QtQuick Global Object",
          "Properties and Handlers"
        ],
        "Qt Quick Basic Elements": [
          "A tour of Qt Quick basic Elements Part 1 : Item, Rectangle and Text",
          "A tour of Qt Quick basic Elements Part 2 : Image",
          "Building your own custom elements"
        ],
        "Signals and Slots": [
          "Signals and Slots Explained",
          "Signals and Slots Demo1",
          "Signals and Slosts Demo2 ( Have two external components communicate)"
        ],
        "User Input Elements": [
          "User Input Elements Overview",
          "TextInput Element",
          "TextEdit Element",
          "MouseArea , Drag and Drop",
          "Keys Attached Properties",
          "Key Navigation",
          "Focus Scope"
        ],
        "Working with Javascript": [
          "How Javacript fits into QML",
          "Javascript Used in QML Code",
          "Functions and Scope",
          "Direct Import of External JS Files",
          "Indirect Import of External JS Files"
        ],
        "Qt Quick Positioning": [
          "Qt Quick Positioning Offerings(Intro)",
          "Anchors Part1",
          "Anchors Part2",
          "Positioners",
          "Layouts",
          "Flow"
        ],
        "Qt and Qt Quick on Mobile Devices": [
          "Qt on Multiple Platforms",
          "Android Environment Setup",
          "Running your Qt Quick App on Android",
          "Qt on IOS"
        ],
        "Qt Quick Controls": [
          "Qt Quick Controls Introduction",
          "Button Control",
          "Button Control (Mobile) : Yet another Qt on Android Demo",
          "Busy Indicator Control",
          "CheckBox Control",
          "ComboBox Control",
          "Delay Button",
          "Dial Control",
          "Frame",
          "GroupBox, RadioButton and CheckBox",
          "SwipeView and PageIndicator",
          "ProgressBar",
          "RangeSlider",
          "Flickable and ScrollBar",
          "Slider",
          "Switch",
          "Page, SwipeView and TabBar",
          "Background Property of the TextArea Control",
          "TextArea",
          "TextField and Label",
          "SplitView Control",
          "Drawer Control",
          "SpinBox Control",
          "Application Window and Menus (Desktop)"
        ],
        "Dialogs": [
          "Introduction to Dialogs in Qt Quick",
          "ColorDialog",
          "FileDialog",
          "FontDialog",
          "MessageDialog",
          "CustomDialogs",
          "Qt5.12 Note : Dialog Component Binding Loop Warning"
        ]
      },
      "requirements": [
        "Open mind and strong willingness to learn",
        "A basic understanding of Javascript will be useful but not required",
        "An eye for design"
      ],
      "description": "Important note : There is an update of this  course to Qt 6. If  you're just starting out, that's what you should take. Take this if you have a specific reason to target Qt 5.\nQt Quick (QML) is the latest and greatest technology from the Qt Framework, to build slick looking , fluid, dynamic and cross platform User Interfaces that can run mobile devices(Android,IoS, touch devices (embedded) and any major desktop platform out there(Linux,Windows,Mac). Qt Quick can be used to build stand-alone applications, but it can also be interfaced and/or extended with a C++ back end.\nThe main aim of this course is to help you succeed in becoming a Qt Quick/QML GUI Designer and do so in the most effective amount of time possible. The course is packed with lots of straight to the point, easy to understand  demos, that are carefully designed to help you master a given Qt Quick  UI development topic at hand.\nThe target student is anyone willing to add Qt Quick/QML UI design to their stack of skills. While Qt Quick is built on top of Qt and C++, no knowledge of Qt or C++ is required. The course will equally be useful to both designers willing to jump into Qt Quick and existing C++ developers willing to level up their skills in fluid UI design.\nWe start by getting your development environment set up and get you to run your first Qt Quick application. We then jump into topics like\nDissecting the QML Syntax , where we explore subjects like the QML syntax, Basic Types of QML,  Properties and Handlers,Property Binding and the Qt Quick Global Object;\nQt Quick Basic Elements, and look at elements like Rectangle,Text, Image and Item;\nSignals and Slots;\nWorking with Javascript, where we explore the javascript environment available to you in QML, where and how to type your Javascript code in QML files, functions and scope and importing external Javascript files;\nUser Input Elements : TextInput, TextEdit, MouseArea and drag and drop, Keys Attached Properties, KeyNavigation and FocusScope\nQt Quick Positioning and explore subjects like Anchors, Positioners, Layouts and Flow\nQt Quick on Mobile Devices : we take you on a detailed journey on how to run your Qt Quick Apps on Android and guide you on how you would do the same on IoS.\nQt Quick Controls  where we explore a host of Ui Components available and ready to be consumed by your awesome apps ;\nDialogs : ColorDialog, FileDialog,FontDialog, MessageDialog and Custom Dialogs\nModel , View and Delegate where we explore the pieces of the puzzle needed to take advantage of the Model View Delegate Architeture in Qt Quick\nTransitions, Transforms and Animations  : Oooh Animations! This is the most fun and captivating subject for me in Qt Quick. We take you on a tour of how you animate your Qt Quick Components and bring your designs to life using tricks like states and transitions.\nNetwork : We show you how to download HTTP data using XmlHttpRequest and how to consume REST APIs in your Qt Quick apps using the same Javascript Object\nStorage : We first use the Settings component from the Qt.labs module to save and load your applications settings and do the same thing using the LocalStorage module that is backed by an embedded SQLite database.\nQt is the platform of choice for thousands of software projects and some of the most successful companies on the planet. Learning Qt Quick will certainly level up your abilities in taking advantage of this rich and awesome framework. Please check out some of the preview videos and lets get you STARTED building slick and fluid User Interfaces with Qt Quick.",
      "target_audience": [
        "Designers willing to jump into Qt Quick Prototyping and UI Design",
        "Existing Qt C++ Programmers willing to add Qt Quick to their Arsenal",
        "Anyone willing to build Fluid and Dynamic User Interfaces capable of running on desktop, mobile and embedded devices"
      ]
    },
    {
      "title": "Python for Absolute Beginners",
      "url": "https://www.udemy.com/course/python-for-absolute-beginners-u/",
      "bio": "Learn Python programming from scratch with hands-on exercises in this Python course!",
      "objectives": [
        "Program fluently in Python",
        "Use Pycharm to write their Python programs",
        "Understand computer science concepts such as flow control and functions"
      ],
      "course_content": {
        "Introduction": [
          "Python and Pycharm Installation",
          "Setup and First Project"
        ],
        "Python Basics": [
          "Variables and Assignment",
          "Basic Data Types",
          "Variables and Assignment Exercises",
          "Variables and Assignment Exercises Solution",
          "Comments and Math Operators",
          "Comments and Math Operators Quiz",
          "Comments and Math Operators Review Exercises",
          "Comments and Math Operators Review Exercise Solution",
          "print()",
          "print() exercises",
          "print() exercises solutions",
          "More On Floats",
          "More On Floats Quiz",
          "Programming Challenge: Grocery Store Purchase",
          "Grocery Store Purchase Solution with integers",
          "Grocery Store Purchase Solution with round()"
        ],
        "Strings Part 1": [
          "strings",
          "Strings Exercises",
          "Strings Exercises Solution",
          "type() and str()",
          "Escape Sequences",
          "type(), str(), and escape sequences exercises",
          "type(), str(), and escape sequences exercises solution",
          "Programming Challenge: Asterisk Triangle",
          "Asterisk Triangle Solution",
          "input()",
          "Programming Challenge: Monty Python",
          "Monty Python Solution",
          "int() and float()",
          "int() exercise",
          "int() exercise solution(s)"
        ],
        "functions": [
          "functions",
          "function with no parameters exercise",
          "function with no parameters exercise solution",
          "function with 1 parameter exercise",
          "function with 1 parameter exercise solution",
          "Programming Challenge: Volume of a Rectangular Prism",
          "Volume of a Rectangular Prism Solution",
          "Programming Challenge: Celsius to Fahrenheit",
          "Celsius to Fahrenheit Solution with integers",
          "Celsius to Fahrenheit Solution with round()",
          "importing modules",
          "Programming Challenge: Miles Per Gallon",
          "Miles Per Gallon Solution",
          "variable scope",
          "variable scope quiz"
        ],
        "flow control": [
          "Intro to Flow Control",
          "comparison operators quiz",
          "boolean operators quiz",
          "if statements",
          "else statements",
          "nested if and else statements",
          "Programming Challenge: Grade Determiner",
          "Grade Determiner Solution",
          "elif statements",
          "Programming Challenge: Roman Numeral Equivalent",
          "Roman Numeral Equivalent Solution",
          "truthy and falsey values"
        ],
        "introduction to loops": [
          "while loops",
          "While Loops Exercise",
          "While Loops Exercise Solution",
          "Programming Challenge: Sum of Numbers From A Positive Integer",
          "Sum of Numbers From a Positive Integer Solution",
          "for loops",
          "For Loops Exercise",
          "For Loops Exercise Solution",
          "Programming Challenge: Find The Number of Characters in A String",
          "Find The Number of Characters in A String Solution",
          "range()",
          "range() quiz",
          "Programming Challenge: Fizz Buzz",
          "Fizz Buzz Solution",
          "Programming Challenge: Factorial",
          "Factorial Solution"
        ],
        "strings part 2": [
          "string methods 1",
          "string methods 1 exercises",
          "string methods 1 exercise solutions",
          "string methods 2",
          "string methods 2 exercises",
          "string methods 2 exercise solutions",
          "len()",
          "Programming Challenge: String Reverser",
          "String Reverser Solution",
          "Programming Challenge: Word Counter",
          "Word Counter Solution",
          ".format()"
        ],
        "lists": [
          "introduction to lists",
          "introduction to lists exercises",
          "introduction to lists exercises solutions",
          "indexes and list slicing",
          "indexes and list slicing exercises",
          "indexes and list slicing exercises solutions",
          "del and list methods",
          "del and list methods exercises",
          "del and list methods exercises solutions",
          "Lists vs. Strings"
        ],
        "dictionaries": [
          "introduction to dictionaries",
          "introduction to dictionaries exercises",
          "introduction to dictionaries exercises solution",
          "dictionary methods 1: .keys(), .values(), .items(), and .get()",
          "dictionary methods 1 exercises",
          "dictionary methods 1 exercises solution",
          "dictionary methods 2: .fromkeys(), .pop(), and .popitem()",
          "dictionary methods 2 exercises",
          "dictionary methods 2 exercises solution",
          "dictionary methods 3: .clear(), .copy(), and .update()",
          "dictionary methods 3 exercises",
          "dictionary methods 3 exercises solution",
          "dictionary methods 4: .setdefault()",
          "dict()"
        ],
        "tuples": [
          "introduction to tuples",
          "tuple looping and step",
          "tuple methods"
        ]
      },
      "requirements": [
        "A computer",
        "Access to the internet",
        "An interest in learning Python",
        "High level of proficiency in English because of the technical language used in some of the lecture videos",
        "Basic math knowledge: addition, subtraction, multiplication, division, knowledge of types of numbers such as integers and decimal numbers, exponentiation, etc."
      ],
      "description": "Learn Python, a programming language with a wide variety of well-paying jobs in many fields, including data science and web development.\nIt is relatively easy to learn when compared to pretty much any other programming language since most of the time, using Python to do something will take less lines of code than with another programming language.\nIn this course, you will be taught the fundamentals of Python through video lectures, quizzes, review exercises, and programming challenges.",
      "target_audience": [
        "People interested in programming who have no prior programming experience",
        "Newer Python programmers who need a refresher on Python",
        "Students taking a Python class in school who want a supplementary learning resource",
        "Programming hobbyists",
        "Anyone else who is interested in learning Python",
        "This course is NOT for experienced Python programmers"
      ]
    },
    {
      "title": "Java Foundations: The Complete Course with Java 21 Updates",
      "url": "https://www.udemy.com/course/neutrino-java-foundations/",
      "bio": "Covers Java 21 & Earlier, Streams/Lambdas, Regex, TDD/Testing, Optionals, JDBC/SQL Intro to Spring & More Using IntelliJ",
      "objectives": [
        "Foundations of the Java programming language",
        "Object-oriented programming",
        "Classes & Objects",
        "Functional programming with Lambdas & Streams API",
        "Testing & Test-Driven Development (TDD) with JUnit",
        "Regular Expressions",
        "Powerful features of IntelliJ IDE (Editor): Refactoring, Debugger, Creation of Project Types: Native, Maven, Gradle",
        "JDBC & SQL",
        "Reflection API",
        "Creating Annotations",
        "Basics of Web application programming with the Spring Framework"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience needed.",
        "You should be familiar with downloading files to your computer from the Internet.",
        "You should know how to find files on your computer.",
        "You should know how to install typical software on your computer."
      ],
      "description": "Note: This course is intended for absolute beginners to programming OR those who don't mind a slower pace to learning Java. If you're looking for a faster-paced course, this may not be for you (though you can play back at 2x speed & may still find great things to learn). Also, even for those who already know some basic Java, you could skip over the parts you already know and focus on those you may not, like Regex, Streams/Lambdas API, Optionals, Date/Time, SQL/Database/JDBC sections that even seasoned Java developers may not know as well as they should. Many of my sections on these APIs are as long or longer than MANY stand-alone courses dedicated to just one of these topics - for similar prices. Check out my preview videos from each of those sections to gauge how deep I go into each topic.\nIf you're interested in starting a new career as a professional software developer, learn the fundamentals from an instructor who has interviewed, hired, managed & mentored numerous developers over the years. This course will teach you all the REAL Java skills you need to land your first job and excel. It focuses on skills you're actually likely to use most often and tries to de-emphasize more \"academic\" knowledge.   The instructor has taken his experiences and observations of both successful and unsuccessful developer candidates to create a course that tries to ensure success in landing highly-coveted developer roles\nIn this course, you'll learn such topics as:\n\nObject Oriented Programming (OOP)\nToo many so-called \"Java\" developers have learned the syntax of the language but have no idea how to harness its actual power to write sophisticated software that's easier to maintain and collaborate on.\nRegular Expressions\nAnother unfortunate observation is that a majority of Java developers are very weak with Regular Expressions. This is unfortunate because so much of what Java tends to be used for, involves processing text and checking that it is valid or parsing key information out of it. Without the use of Regular Expressions, these tasks require considerable amounts of error-prone code that is inflexible and difficult to maintain.\nFunctional Programming with Lambdas & Streams API\nAnother sore-spot among a large number of Java developers. As of 2023, Java 21 is out, but the Functional programming APIs of Lambdas & Streams were introduced into Java with version 8. We've observed that developers simply aren't keeping up with these powerful (not-so-new anymore) techniques that help keep Java competitive and efficient in an increasingly functional programming world. You can sift through large datasets with ease and significantly less code with these APIs.\nOptionals\nTony Hoare, the inventor of the programming concept of \"null\", called its invention his \"billion-dollar mistake\" dating back to 1965. That mistake has gone on to wreak havoc across numerous programming language ever since. Optionals seek to remedy that mistake. Unfortunately, not enough Java developers have learned and embraced the power of using Optionals. This topic seeks to remedy that shortcoming\nJava 8 Date/Time API\nJava was introduced in 1995 and heralded as the great, shiny new programming language of our time. To a large degree, one could argue that it is indeed, that. However, mistakes were made along the way. One of those mistakes was the way dates & times were handled. Java 8 made major strides in fixing those mistakes, but as with Optionals, Lambdas and many other topics mentioned, not enough developers have taken the time to learn the new and greatly improved Java 8 Date/Time API. We'll show you how to keep time the right way.\nWorking with Databases & SQL\nOne of the topics where it seems Java developers actually have kept up (mostly) is in learning modern ways to work with databases in Java - primarily through the use of frameworks like Spring Boot. However, one unfortunate side-effect of the massive levels of abstraction these frameworks afford us, is that many developers have little-to-no idea of what these frameworks are doing or how to use them to maximum effect. We'll peel back the covers and give a solid foundation of the basics to better empower developers as they inevitably continue to use frameworks to make this work easier.\nAn Introduction to The Spring Framework & Spring Boot\nThe Spring Framework & its sibling, Spring Boot, have absolutely revolutionized modern Java software development - particularly for business. Dare I say virtually no company doing Java these days, even considers doing it without Spring or at least one of its few and much less popular competitors. You WILL have to learn Spring to be a true and well-rounded Java developer competitive in the job market. Though this course if focused on the fundamentals of Java, we knew we had to whet your appetite for the full(er) stack of Java development. Spring is what most companies use to enable their Java applications to become web applications and web services and talk to databases. This module will set you up for Neutrino's upcoming course dedicated to the topic in full (because it deserves its own course).\n\n\nSo, if you're willing to put in the work, come join us and begin the next phase of your career.",
      "target_audience": [
        "People with little to no experience programming (If you're already proficient w/another language, watch preview videos to confirm the pacing is to your liking. The first half of course is paced for absolute beginners)",
        "People interested in starting a new career as a professional software developer",
        "Students wanting to learn Java or the basics of modern computer programming",
        "People interested in learning more about Object-Oriented Programming (OOP)"
      ]
    },
    {
      "title": "Computer Graphics with Modern OpenGL and C++",
      "url": "https://www.udemy.com/course/graphics-with-modern-opengl/",
      "bio": "Learn the theory and code behind modern OpenGL graphical applications so you can make games, simulations and more!",
      "objectives": [
        "Create 3D graphical applications using C++ and OpenGL",
        "Use and understand GLEW and GLFW",
        "Draw 3D objects to a window",
        "Use OpenGL shaders (vertex, fragment and even geometry shaders!)",
        "Use and understand uniform variables",
        "Use the GLM (OpenGL Maths) library for 3D transforms",
        "Translate, Rotate and Scale 3D objects",
        "Understand and use the concepts of interpolation to streamline 3D applications",
        "Use Indexed Draws to simplify 3D model construction",
        "Understand and use both orthogonal and perspective projections",
        "Implement a user controlled camera to navigate 3D worlds using keyboard and mouse input",
        "Apply textures to 3D models to give them more detail",
        "Apply the Phong Lighting model to add realistic lighting to a 3D scene",
        "Use three types of light: Direction, Point and Spot Lights (and have multiple Point/Spot Lights in a scene!)",
        "Import 3D models made in external applications such as Blender and 3DSMax using the Assimp library",
        "Apply both Directional Shadows and Omnidirectional Shadows",
        "Shadow Mapping optimisation techniques",
        "How to apply MULTIPLE Omnidirectional Shadow sources to a scene",
        "Implement a Skybox to increase the scope of a 3D scene using cubemaps"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of C++, including the use of pointers/references",
        "Mathematical background helps but is not necessary",
        "Visual Studio using C++ and Windows are advised, however the code and theory are relevant to Mac/Linux systems, you just won't be able to follow along 1-to-1 with IDE use!"
      ],
      "description": "Hi! Welcome to the Computer Graphics with Modern OpenGL and C++ course!\nThis course is designed to be unique from most other OpenGL courses out there, because it not only teaches you the code needed to use OpenGL, but it also teaches you the THEORY behind it all! This is immensely important for any aspiring graphics or game developer, because understanding the theory behind what we do enables you to form your own graphical style!\nI intend to help you understand both HOW and WHY we do what we do, so you can create your own systems derived from the foundations of graphical development, pushing you further ahead of all your competitors out there.\nThis course is designed to teach you modern OpenGL and graphics techniques without any prior knowledge of graphical theory. All you need is some C++ experience and preferably an understanding of trigonometry.\nThis course will receive constant support, to ensure you learn everything there is to know, beyond just the basics that most other courses will teach you. As an example of this, this series already covers things as advanced as Shadow Mapping, a rare commodity among OpenGL courses (especially when it comes to Shadow Mapping for MULTIPLE Point Lights!!).\nSo I hope you take an interest in this course and enjoy watching it as much as I do making it!",
      "target_audience": [
        "People who want to learn OpenGL from scratch as well as the theory behind Computer Graphics"
      ]
    },
    {
      "title": "Practice Java by Building Projects",
      "url": "https://www.udemy.com/course/practice-java-by-building-projects/",
      "bio": "Ultimate Java interview prep course! 100% focused on applying object-oriented design in real-world applications",
      "objectives": [
        "Build 5 complete, end-to-end Java applications from scratch",
        "Implement core object-oriented programming techniques",
        "Optimize applications with best practices and sharpen your programming skills",
        "Master design principles and apply proper architecture to solve problems",
        "Apply inheritance, interfaces, access modifiers, encapsulation, polymorphism",
        "Use data structures and arrays to handle data sets and collection of objects",
        "Develop your own utility class to read data and export results to a file",
        "Analyze data from a file and apply conditional operations to make decisions",
        "Design a real-world project with abstract classes and abstract methods",
        "Use constructors, overloading, and overriding to enhance applications"
      ],
      "course_content": {
        "Introduction": [
          "The Ultimate Java Prep Guide",
          "Survey of Course Projects",
          "Course Pre-Requesites",
          "Preparing the Java Environment"
        ],
        "Build an Email Administration Application": [
          "Overview of the Email Application",
          "Creating the Outline for the Email Admin Class",
          "Implementing the Constructor",
          "Defining the Email Department",
          "Generating a Random Password",
          "Creating the Email Syntax",
          "Implementing Class Set Methods",
          "Implementing Class Get Methods",
          "Using the Show Info Method"
        ],
        "Build a Student Database Application": [
          "Overview of the Student Database Application",
          "Creating the Outline for Student Class",
          "Initializing the Student Constructor",
          "Creating the Unique Student ID",
          "Implementing the Enrollment Method",
          "Implementing the Pay Tuition Method",
          "Cleaning Up and Finishing Touches",
          "Creating an Array of Objects"
        ],
        "Build a New Bank Account Application": [
          "Overview of the Bank Application",
          "Setting up the Project Architecture",
          "Creating the Outline for All Bank Accounts and Interest Rate",
          "Using Super Constructors with Inheritance",
          "Listing Account Shared Properties",
          "Initializing New Accounts with Constructors and Super Constructor",
          "Generating the Account Number",
          "Generating Account Number by Account Type",
          "Implementing the ShowInfo Method",
          "Implementing the Savings Account Safety Deposit Box",
          "Implementing the Checking Account Debit Card",
          "Setting up the Interest Rate Interface and Implementation",
          "Implementing Account Shared Transactions",
          "Implementing the Compound Interest Rate Method",
          "Enhancing Application with Correct Access Specifiers",
          "Writing a CSV Reader Utility",
          "Determining Which New Account to Open",
          "Creating a List of Objects"
        ]
      },
      "requirements": [
        "Familiar with Java development environment",
        "Knowledge of object-oriented programming concepts recommended",
        "Consider enrolling in my \"Become a Junior Java Software Developer\" course"
      ],
      "description": "If your goal is to GET HIRED, then you need to PASS THE INTERVIEW!\nAs a trainer for over 6 years, one of the most common questions I get asked is \"I'm new to programming, how can I get better and prepare for a job interview?\" My answer is \"Practice, practice, practice!\" I created this course to help people see the core Java concepts in action. This will help you understand the ideas and know how to apply them in an application.\n\nThe BEST way to prepare for a technical interview is to get practice building applications and applying core principles of object-oriented design. I've designed this course to accomplish that objective.\nMany people fail interviews because:\nThey don't grasp object-oriented programming concepts\nThey can't apply object-oriented design in an actual program\nThey haven't practiced developing their applications by hand\nThey haven't debugged their code and overcome challenges\nThis course is designed for someone who simply wants to get better at understanding and applying Java design and object-oriented programming. It is perhaps the most effective thing you can do to prepare for your job interview. Forget about flashcards, forget about quizzes. Start practicing!\nIn my Practical Java course, you will build realistic projects from scratch. We will approach each program analytically and outline our approach to implement the solution. Then, piece by piece we will write the code to create a fully functioning application.\nUnderstand client scenarios and requirements\nApproach each problem analytically\nWrite our solution outline\nImplement code step-by-step\nApply core principals of object-oriented design\nEveryone hoping to start out in Java needs to practice! It's not enough to learn and watch, but you must try yourself! So enroll in this course and get typing!\nNote: this course was build for someone who has some working knowledge and familiarity of Java or application design. If you are new to Java, I recommend enrolling in my \"Become a Junior Java Software Developer\" course first.",
      "target_audience": [
        "Current students or recent graduates",
        "Anyone looking to practice Java",
        "Someone preparing for a Java interview",
        "Someone starting a new Java project",
        "Anyone wanting a refresher on object-oriented programming or application architecture"
      ]
    },
    {
      "title": "Java Best Practices: Improve Your Java Coding Standards",
      "url": "https://www.udemy.com/course/java-best-practices/",
      "bio": "Discover good Java programming practices and learn pragmatic clean code rules. IntelliJ IDEA Ultimate license included!",
      "objectives": [
        "Discover pragmatic Java best practices",
        "Understand how to write clean code in Java",
        "Improve your coding standards",
        "Learn important factors in Java code review",
        "Uncover what veteran developers prioritise in code"
      ],
      "course_content": {
        "Introduction": [
          "Who should take this course?",
          "How to use this course",
          "Free IntelliJ IDEA Ultimate license for my students",
          "Have a suggestion?"
        ],
        "Data Types": [
          "Watch out for float and double precision",
          "Don’t concatenate many strings",
          "Pick the right data type for ids",
          "Choose primitives over boxed primitives",
          "Understand date and time challenges",
          "Float precision",
          "Data Types"
        ],
        "Methods": [
          "Pick the scope of method responsibility carefully",
          "Validate parameters",
          "Design method signatures carefully",
          "Return appropriate results",
          "Always use @Override",
          "Refactor a food ordering service",
          "Methods"
        ],
        "Classes and interfaces": [
          "Restrict access as much as possible",
          "Favour immutability",
          "Consider using static factory methods",
          "Consider using builders",
          "Design utility classes correctly",
          "Use dependency injection",
          "Make a class immutable",
          "Classes and interfaces"
        ],
        "Exceptions": [
          "Throw appropriate exceptions",
          "Throw exceptions in if blocks",
          "Design catch blocks carefully",
          "Use meaningful error messages",
          "Work on the exceptions",
          "Exceptions"
        ],
        "Modern Java Elements": [
          "What is this section about?",
          "[Java 7] Use try-with-resources",
          "[Java 10] Use var correctly",
          "[Java 14] Use records",
          "[Java 14/21] Prefer switch expressions and pattern matching"
        ],
        "General Programming Rules": [
          "Follow popular naming conventions",
          "Use libraries",
          "Don’t optimise code too early",
          "Program to interfaces where appropriate",
          "Where to use interfaces",
          "General Programming Rules"
        ],
        "Other": [
          "Avoid Java serialisation",
          "Package by feature, not by layer",
          "Follow unit test best practices",
          "Other"
        ],
        "Summary": [
          "Congratulations!",
          "LinkedIn: Show your new skills!",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Comfortable level of Java knowledge",
        "(Optional) Some professional experience as a software developer",
        "Willingness to learn :)"
      ],
      "description": "Note: All students of this course receive a 6-month license for IntelliJ IDEA Ultimate — the industry-leading Java IDE trusted by professionals worldwide.\n\n\nWelcome! My name's Adrian and I'm a professional Software Developer. Elevate your Java expertise with this Java Best Practices course! Designed for Java enthusiasts with some prior experience, this course takes you beyond the basics to explore the art of writing professional-grade clean Java code. Discover the industry's top practices, tips, and techniques that seasoned developers use. Uncover the secrets to designing robust software and enhancing your coding skills. Whether you're a junior-level developer or looking to refine your professional journey, this course empowers you with the knowledge to excel.\n\n\nCOURSE OVERVIEW\nThis course offers a collection of practical tips and best practices employed by experienced Java developers. It's structured into modules covering Data Types, Methods, Classes and Interfaces, Exceptions, and more. Each lesson can be taken independently and is accompanied by a simple code example. Modules also feature quizzes and coding exercises to give you a more hands-on experience.\n\n\nCOURSE ADVANTAGES\n• encourages microlearning – all lessons are no more than 10 minutes and are independent of each other: you can learn even if you only have a few minutes a day!\n• based on practice – instead of useless academic theory, you learn the best developing practices drawn from my work experience,\n• reasonably priced – compared to stationary developer bootcamps, the course is much cheaper, so you save not only time but also money,\n• available anywhere, anytime – the online form lets you run the course in the most convenient place (at home, work or in a café) and time (while commuting by metro or relaxing at home after work), so you can adjust it to your agenda,\n• accessible on desktop, mobile and TV – you can display my lectures on the device of your choice, so you don’t have to stick to your PC,\n• certificate of completion – after completing the course, you will receive a printable certificate that will make your resume more attractive.",
      "target_audience": [
        "People preparing for their first job in IT",
        "Students of Computer Science degree courses",
        "Junior or Mid-Level Java developers",
        "Developers transitioning to Java from other languages",
        "Software Architects who need a basic understanding of practical Java",
        "Other IT professionals who support Java applications"
      ]
    },
    {
      "title": "Pyomo Bootcamp: Python Optimization from Beginner to Advance",
      "url": "https://www.udemy.com/course/optimization-in-python/",
      "bio": "Guide for building optimization probelm (operation research) in Pyomo Jupyter and solve it using CPLEX, Gurobi and IPOPT",
      "objectives": [
        "Write simple and complex pyomo models",
        "LP, MIP, MINLP, NLP ,QCP, MIQCP",
        "How to mathematically formulate your optimization problems in Python?",
        "Practice Exercises to Confirm the Learnings",
        "How to find the duality coefficients of the constraints ?",
        "Build the skills you need to get your first Operation research / Optimization job /OR Scientist position",
        "Build a complete understanding of Pyomo models from the ground up!",
        "How to start coding your optimization problem in Python (pyomo)? Linear programming, Mixed Integer programming, Quadratic programming, Non-linear Programming",
        "Is it suitable for Mechanical engineering ? Yes, for example : design problems",
        "Suitable for Chemical engineering ? Yes, Optimal design of chemical systems, optimal operation of chemical units, pooling-blending, optimal control of a process",
        "Is it suitable for Electrical engineering ? Yes, for example : optimal operation and planning of power plants, optimal power flow and etc.",
        "Is it suitable for Civil engineering ? Yes for example in traffic management, bridge design , reinforcement planning and etc.",
        "Google Colab and Neos Server"
      ],
      "course_content": {
        "Introduction": [
          "Intro",
          "Python and Pyomo Installation",
          "Visualization in Python",
          "MatPlotLib package"
        ],
        "Pyomo Elements": [
          "Pyomo Elements",
          "Basic knowledge about optimization and decision making",
          "Abstract or Concrete Models? Via a simple Example",
          "Update a parameter in an Abstract Models",
          "Create a Dat file for AbstractModel",
          "How to call a .dat file for initializing the instance in Abstract Models",
          "Analysing the output"
        ],
        "30+ Solved Projects": [
          "How to use the examples in this course?",
          "Biggest rectangle inside a circle",
          "Biggest cylinder inside a Sphere",
          "Fastest route",
          "Heron problem",
          "Steiner problem",
          "System of linear equations",
          "Hostile brothers in a rectangle",
          "N-Queens",
          "Circle placement in a rectangle",
          "Biggest equal sized circles inside a unity circle",
          "Clash of clans",
          "Biggest circle on a surface with obstacles",
          "Center of mass",
          "Min Queens to cover the chess board",
          "Connected tree",
          "Spanning tree with degree constraints",
          "Connected tour",
          "Conference allocation",
          "Max flow",
          "Graph Node Coloring",
          "Graph Edge Coloring",
          "Chess board colouring",
          "Facility allocation",
          "Curve fitting",
          "Paper company",
          "Transportation",
          "Access to Dual values of Constraints",
          "N-Queens"
        ],
        "Some variants of previously solved examples": [
          "Hostile brothers in a triangle",
          "Hostile brothers in a circle",
          "Circle placement in a circle",
          "Circle placement in a half-circle",
          "Circle placement in a triangle",
          "Center of mass (negative mass)"
        ],
        "How to use Google Colab and Neos Server ?": [
          "How to use Google Colab and Neos Server ?"
        ],
        "Extra lectures": [
          "Pareto optimal front",
          "Dynamic Transportation Problem",
          "Data manipulation in Pyomo",
          "Rectangle Placement",
          "Advanced Examples on Github",
          "Bonus lecture"
        ]
      },
      "requirements": [
        "You’ve either already got it or it’s FREE. Here’s the checklist:",
        "No extensive prior knowledge of Python is required",
        "Your enthusiasm to learn this go-to programming language",
        "A desire to learn new concepts like Python coding",
        "A passion for decision making and optimisation",
        "A computer - Windows, Mac, and Linux are all supported",
        "Setup and installation instructions are included for each platform.",
        "No need for any licence to run your codes",
        "It’s a valuable lifetime skill which you can’t un-learn!"
      ],
      "description": "**Brand New For 2024 - Pyomo Bootcamp: Python Optimization from Beginner to Advance Course on Udemy**\nJoin your 65000 fellow researchers and experts in operation research industry in learning the fundamentals of the optimal decision making and optimization.\nLearn Pyomo in 3 days.\nWhat is Pyomo used for ?\nWhat does Pyomo stand for ?\nIs Pyomo Open source ?\nHow do I download Pyomo ?\nIf you just want to learn Python then this course is not for you\nif you want to learn Optimization modeling in Python then Welcome to the Pyomo Bootcamp: Python Optimization from Beginner to Advance course!\nLearn\nLinear programming (LP)\nMixed Integer Programming (MILP)\nNon-linear Programming (NLP)\nMulti-objective Optimization\nFormulating the optimization problems\n\n\nI will walk you through every step of Python coding with real-life case studies, actual experiments, and tons of examples from around different disciplines.\nBy the end of this course, you'll be able to:\nBuild the skills you need to get your first Python optiimization programming job\nMove to a more senior software developer position\n…then you need a solid foundation in Optimization and operation research Python programming. And this course is designed to give you those core skills, fast.\nCode your own optimization problem in Python (Pyomo package) .\nReceive your official certificate\nThe developed course is suitable for you even if you have no background in the power systems.\nIn this Optimization course you will learn:\nHow to formulate your problem and implement it in Python (Pyomo) and make optimal decisions in your real-life problems\nHow to code efficiently, get familiarised with the techniques that will make your code scalable for large problems\nHow to design an action block with a clearly defined conversion goal\nHow to run sensitivity analysis in Python to predict the outcome of a decision if a situation turns out to be different compared to the key predictions.\nFor your convenience the course is broken into two sections :\nGeneral Python coding (Pure Pyomo, elements, loops, multi-objectives, conditional statements, Examples)\nMore than 40 solved examples\n... and much, much more!\n\n\nBy finishing this course, you will have the power to transform your coding skills into a powerful decision making making. .\nIf you think this Python (Pyomo)  coding is complicated, it's not.\nIf you think Python (Pyomo) coding is time-taking, it's not.\nIf you think watching this course won't make a difference in your professional career ... think again.\nI've consulted with several companies and researchers around the world and have consulted them on how to use optimization techniques in their business. Trust me, I learned all this the hard way.\nAlong with the video content of the course, there are many extra.\nWhat if you have questions?\nAs if this course wasn’t complete enough, we offer full support, answering any questions you have 7 days a week (whereas many instructors answer just once per week, or not at all).\nThis means you’ll never find yourself stuck on one lesson for days on end. With our hand-holding guidance, you’ll progress smoothly through this course without any major roadblocks.\n\n\nDownloadable resources and guides\nAn audio version of the course to listen on the go\nQ&A videos the answer your specific questions\nAssignments that make you productive while taking the course\nAn instructor who truly cares about your success\nThis is the course on landing page design I wish I had when I was first starting out!\nOUR PROMISE TO YOU\nWe'll be here for you every step of the way. If you have any questions about the course content or anything related to this topic, you can always post a question in the course or send me a direct message.\nWe want to make this the best course on how to use Python (Pyomo). So if there is any way we can improve this course, just tell us and we'll make it happen.\n\n\nEnroll today and enjoy:\nLifetime access to the course and all future updates\nOver 4 hours of high quality, up to date video lectures\nExercises and feedback\nAccess to the student-only discussion forum\n30 day, no questions asked, money-back guarantee\n\n\nWith our 30-day 100% money-back guarantee, there's no reason to hesitate.\nI'll give you two more reasons why you should enrol right this second:\nYour investment in this course will quickly be paid back even just by implementing some of the techniques I share with you. There are hundreds of gold nuggets to choose from, making this course the best investment in your own education and future success.\nWhile today is still the best day you can get started with Python (Pyomo) coding, it will get harder for engineers as the markets get more and more competitive. You want to start as soon as you can (like now) to take advantage of this growing market. Instead of struggling and trying to do everything yourself, just learn from someone who has already figured it out.\nI CAN'T WAIT TO SEE YOUR SUCCESS\nSee you inside!",
      "target_audience": [
        "Anyone who needs to make some sort of decisions",
        "Any discipline that requires optimization and decision making",
        "Academics or industry experts in operation research and optimization",
        "Entrepreneurs",
        "Business Owners involved in Energy/Healthcare/Service providers/ and other industries"
      ]
    },
    {
      "title": "Java Programming Masterclass: Beginner to Expert (Java 17+)",
      "url": "https://www.udemy.com/course/the-complete-java-programming-bootcamp-zero-to-mastery-in-java/",
      "bio": "Master Core Java, OOP, Collections, Threads & More. Build Real Projects & Crack Java Coding Interviews Easily.",
      "objectives": [
        "Become a professional Java developer and prepare confidently for coding interviews",
        "Understand Java fundamentals and Object-Oriented Programming deeply",
        "Write clean, efficient, and bug-free Java code using best practices",
        "Debug Java programs like a pro and avoid common programming pitfalls",
        "Master key concepts: Classes, Objects, Inheritance, Polymorphism, and Encapsulation",
        "Build real-world Java projects to reinforce your learning",
        "Use advanced topics like Threads, Collections, and Exception Handling effectively",
        "Go from complete beginner to job-ready Java programmer in just one course"
      ],
      "course_content": {
        "Introduction to Java Programming": [
          "Welcome to Java Masterclass",
          "How Java works?",
          "JRE Vs. JDK Vs. JVM",
          "History of Java",
          "*Note",
          "Java Code Structure : Understand How Java code will looks like?"
        ],
        "Java Setup": [
          "JDK(Java) Installation",
          "Intellij IDEA Installation",
          "Your First Java Project - Say Hello to Java Program",
          "Your First Excercise",
          "Solution - Coding Excercise 1: Your First Excercise"
        ],
        "Classes and Objects - A Blueprint and its Actuals [Java Programming Basics]": [
          "Understand Class and Object in Java",
          "Experiencing Class and Object",
          "Life of Objects",
          "Package and Imports in Java",
          "Java API's - Using the Java Library",
          "Access Modifiers - How/When to use Access Modifiers in Java?",
          "Classes & Objects Understanding",
          "Solution - Coding Excercise 2: Classes & Objects Understanding",
          "Package & imports Understanding",
          "Solution - Coding Excercise 3: Package & imports Understanding",
          "Time to Test Your Understanding"
        ],
        "Java Variables: Know your variables and It's capacity": [
          "Introduction to Java Variables",
          "Default values to Variables",
          "Variable Assignments",
          "Type Casting",
          "variables Understanding",
          "Solution - Coding Excercise 4: variables Understanding",
          "Scope of the Variables",
          "Modifiers for Variables",
          "Operators in Java",
          "Operators understanding",
          "Solution - Coding Excercise 5: Operators understanding",
          "Wrapper Classes in Java",
          "Java Array",
          "Stack and Heap Memory"
        ],
        "Java Methods - How Objects Behave": [
          "Understanding Methods in java",
          "Structure of Method in Java",
          "Modifiers for Method",
          "Lambda expression (Optional)",
          "Method Understanding",
          "Solution - Coding Excercise 6: Method Understanding",
          "Method Understanding",
          "Solution - Coding Excercise 7: Method Understanding"
        ],
        "Flow Control in Java - Decide How You Want to GO!": [
          "IF Statements",
          "Switch Statements",
          "Loops in Java",
          "Smart Type Checks with instanceof (Java 16)",
          "Pattern Matching in Switch Statements (Java 17)",
          "Loops Understanding",
          "Solution - Coding Excercise 8: Loops Understanding",
          "Loops Understanding",
          "Solution - Coding Excercise 9: Loops Understanding"
        ],
        "Java Constructors": [
          "Understanding Constructors",
          "Varities of Constructors",
          "Rules for Constructors",
          "Access Modifiers for Constructors",
          "Constructors Understanding",
          "Solution - Coding Excercise 10: Constructors Understanding"
        ],
        "Static Members in Java : Make use of same copy": [
          "Understanding of Static Members"
        ],
        "Inheritance - One of the Pillor of Object Oriented Programming in Java": [
          "Inheritance",
          "Is-A & Has-A Relationship",
          "Interface",
          "Abstract Classes",
          "Java 17 Sealed Classes – Restricting Inheritance"
        ],
        "Encapsulation in Java Programming - Protect Your Class members in Java": [
          "Encapsulation",
          "Records in Java – Cleaner Data Classes (Java 17)"
        ]
      },
      "requirements": [
        "No experience with Java or any other Programming knowledge needed. I'll teach you everything you need to know!",
        "A strong work ethic, passionate to learn Java programming",
        "Any computer and OS will work — Windows, macOS or Linux. We will set up your IDE the course."
      ],
      "description": "Become a Confident Java Developer in Just 7 Days — From Zero to Job-Ready Skills\nAre you ready to master Java and open the door to a high-paying developer career? Whether you're an absolute beginner or looking to brush up your Java skills, this complete Java Programming Masterclass is all you need.\nTaught by a senior developer with 15+ years of experience, this course helps you learn Core Java step-by-step, with real-world coding examples, interview prep tips, and hands-on practice — all in a structured, engaging format.\n\n\nWhat You’ll Learn\nYou’ll cover everything from Java basics to advanced concepts like multithreading, collections, and exception handling — with hands-on projects, quizzes, and interview prep.\n\n\nWhy Learn Java?\nMost in-demand skill in the job market\nUsed by top companies like Amazon, Google, Netflix\nIdeal for backend systems, mobile apps, web servers, and enterprise software\nMassive community, tons of libraries, and future-proof\n\n\nWhy This Course is Special\nStructured like a bootcamp — suitable for both beginners & intermediate learners\nPacked with animated videos, hands-on coding demos, and real interview scenarios\nIncludes quizzes, PDFs, sample code, and practice projects\nUpdated for Java 17+ and designed to reflect current hiring needs\nBased on real-world development and hiring experience\n\n\nHear From Our Students\n★★★★★ “Instructor teaching is very impressive. He explains from scratch with real-world experience.” – Ramganesh\n★★★★★ “One of the best Java courses I’ve taken. Straight to the point and full of value.” – Charli\n★★★★★ “Amazingly structured course. I finally understand core Java deeply. Thank you Vinoth!” – Bailee Down\n\n\nFAQs\nQ: I’m new to programming. Will I be able to follow along?\nYes. This course is beginner-friendly and explains every concept clearly, even if you’ve never written a single line of code.\nQ: Is this course suitable for interviews or job prep?\nAbsolutely. You’ll not only learn Java, but also the deeper concepts and patterns that recruiters look for.\nQ: Do I get lifetime access and updates?\nYes! Buy once, access forever — including future updates and added content.\n\n\nInstructor: Vinoth\nI’m a passionate developer and trainer with 15+ years of professional experience in Java, backend development, and large-scale systems. I’ve helped thousands of students land their dream jobs by teaching the exact skills the industry demands today.\n\n\nAre You Ready to Transform Your Career?\nIf you're serious about learning Java and building a strong foundation, this is the only course you’ll need.\n\nEnroll now and let’s get started — see you inside the course!",
      "target_audience": [
        "Absolute beginners with no prior programming experience",
        "Students or professionals switching to Java from other languages",
        "Anyone preparing for Java coding interviews or job roles",
        "Developers who want to strengthen their Java fundamentals and best practices",
        "Intermediate programmers looking to master Core Java and real-world coding techniques"
      ]
    },
    {
      "title": "Complete PYTHON Programming for Beginners - 2025",
      "url": "https://www.udemy.com/course/easy-way-to-learn-python-for-beginners-2021/",
      "bio": "The easiest way to learn Python in-depth and build complex, scalable programs!",
      "objectives": [
        "You will learn to create professional real-world programs in Python the ultimate OOP way!",
        "Learn how to plan your Python programs before writing them!",
        "Learn and apply proper design principles when programming in Python!",
        "Learn to troubleshoot code issues using debuggers!",
        "Get a deep understanding of how Python works under the hood!",
        "Learn to write highly organized modular code!",
        "You will build large real-world Python applications."
      ],
      "course_content": {
        "Introduction of scripting": [
          "Scripting and types of Scripting languages",
          "Difference between scripting and programming language"
        ],
        "Explanation of Programming language paradigm": [
          "Programming language paradigm"
        ],
        "Introduction of Python": [
          "History of python",
          "Python file extensions"
        ],
        "Explanation of Python script": [
          "Python script mode",
          "Installation of Python and Pycharm"
        ],
        "About Python": [
          "Characteristics and features of python",
          "Python comments"
        ],
        "Anaconda Framework": [
          "Explanation of Anaconda framework",
          "Anaconda python",
          "Working with SPYDER IDE",
          "Working with JUPYTER NOTEBOOK"
        ],
        "IDE and Debugging": [
          "Pycharm IDE",
          "Debugging Python code"
        ],
        "Explanation of Variables": [
          "Python variables",
          "Explanation of python code(or) statement"
        ],
        "Python Datatypes": [
          "Python Numerical Datatypes"
        ],
        "Python Literals": [
          "Python Binary,octa,Hexa decimal literals"
        ]
      },
      "requirements": [
        "Access to a computer (Windows, Mac, or Linux)"
      ],
      "description": "On successful completion of the course, you will be able to program in the professional object-oriented programming (OOP) paradigm in Python, which allows you to start your programmer career. All professional Python programmers develop applications the OOP way. You, too, will be able to write complex, scalable programs in Python on completion of this course.\nThe course follows a practical approach where students learn by actively problem-solving towards the tangible goal of creating real-world Python programs. The course covers real-world Python programs that you will develop using the object-oriented programming (OOP) paradigm.\nApart from learning Python, in this course, students also learn to use all the necessary tools and techniques they need to become a professional Python programmer. These are software design principles, writing highly organized code, code planning, code refactoring, SQL databases, and more.\nWe designed this course for both absolute and non-absolute beginners. However, if you are an intermediate who knows Python well, you may still benefit from the course because it covers some advanced Python and programming concepts that you will hardly find anywhere else. Advanced concepts, such as abstract classes, class methods, composition, refactoring, etc., will be comprehensively covered and practiced in the course.\n\n\nDo I need previous experience with other programming languages to take this course?\nNo. In fact, in this course, you will not merely learn Python syntax. You will understand Python from the inside-out from the computer science perspective so that you will have a deeper understanding of how programming works.",
      "target_audience": [
        "Absolute Beginners",
        "Non-Absolute Beginners",
        "Intermediates"
      ]
    },
    {
      "title": "Complete Linux Bootcamp for Beginners",
      "url": "https://www.udemy.com/course/complete-linux-shell-training-for-beginners/",
      "bio": "Learn Linux Shell Programming with Bash, GREP and SED for Beginners",
      "objectives": [
        "Get Acquainted with Terminal very Well",
        "Learn Using Scripts to Automate Tasks",
        "Proper Understand of Regex with Grep and Sed"
      ],
      "course_content": {
        "Introduction to Shell": [
          "Introduction",
          "Starting with Terminal",
          "Basic Directories Commands",
          "File Listing in Shell",
          "File Permissions",
          "Changing File Permissions"
        ],
        "Directories, Wilcards and More": [
          "Making and Removing Directories",
          "Usage of Wildcards",
          "File Operations",
          "Removing Non Empty Directories",
          "Redirection and Piping"
        ],
        "Exploring Shell Environment": [
          "Writing and Running a Hello World Script",
          "Removing the ./ Resolution",
          "Running Scripts in the Current Open Shell",
          "Intro to Variables",
          "Saving Shell State in .bashrc"
        ],
        "Shell Commands": [
          "Exit Status of Shell Commands",
          "Tests and the if Statement",
          "Command Line Arguments",
          "Guessing Game",
          "Loops",
          "The Case Statement"
        ],
        "Regex with Grep and Sed": [
          "Intro to Regex",
          "Learn Switches : -i, -v, -c",
          "More on Switches : -l, -L, -n, -h",
          "Other Command Line Switches",
          "Piping Other Commands To Grep",
          "Meta Characters In Regular Expressions",
          "Example Of Validating E-mail Addresses",
          "Example Of Validating US Phone Numbers"
        ],
        "Intro to Sed": [
          "Sed Introduction",
          "Suppressing Output With -n, And Back Expressions",
          "Address Notation",
          "Printing Line Numbers With The = Command",
          "Other Commands And Scripting Sed"
        ]
      },
      "requirements": [
        "Any Linux Based Operating System",
        "Knowledge of any Command Line is Helpful, but Not Necessary"
      ],
      "description": "This course is teaches the fundamentals of linux shell using the terminal, some insight on bash shell and we will investigate various aspects of the shell, for example scripting, using utilities like grep and sed, C and Perl programming in linux, controll flow as well as the file structure. You will also find out how to navigate the directory structure, reveal the contents of directories, the best way to understand and work with file permissions, how to replicate, move, and remove directories and files. We'll also cover regular expression syntax in the context of learning grep, then use what we have learned as we work.\nThe course is in six units, and contains over four hours of demos and discussion.\nSome of the topics are as below :\nEverything about directories\nUnderstanding and working with file permissions\nCopying, moving, and removing files.\nUsing redirection and piping.\nMake executable scripts\nVariables and how to use them\nThe if statement and demos\nHandling command line arguments\nLoops (while, until, and for)\nThe case statement\nUnderstand Grep\nRegular expression syntax\nVarious validations\nWhat is sed\nVarious Sed Usage Examples\n\n\nI hope you join me as we explore linux together.",
      "target_audience": [
        "Any Fresher Who Wants to Learn Basic Linux Shell Commands",
        "Expert who Needs to Brush up Basic Linux Shell Skills"
      ]
    },
    {
      "title": "Python 3: Deep Dive (Part 3 - Dictionaries, Sets, JSON)",
      "url": "https://www.udemy.com/course/python-3-deep-dive-part-3/",
      "bio": "Dictionaries, Sets, Related Data Structures, Serialization/Deserialization",
      "objectives": [
        "Associative Arrays",
        "Hash Tables and Hash Functions",
        "Python's implementation of hash tables",
        "Dictionaries and Sets",
        "Defining hash functions for our custom classes and why that is useful",
        "Creating customized dictionaries using the UserDict class",
        "defaultdict",
        "OrderedDict and Python3.6+ equivalences",
        "Counter (multi-sets)",
        "ChainMap",
        "Serialization and Deserialization",
        "JSON serialization/deserialization",
        "Intro to JSONSchema, Marshmallow, PyYaml and Serpy 3rd party libraries"
      ],
      "course_content": {
        "Introduction": [
          "Course Overview",
          "Prerequisites",
          "Course Slides"
        ],
        "Associative Arrays - Theory!": [
          "Introduction",
          "Associative Arrays",
          "Hash Maps",
          "Python Dictionaries",
          "Python's hash() Function"
        ],
        "Dictionaries": [
          "Introduction",
          "Creating Dictionaries - Lecture",
          "Creating Dictionaries - Coding",
          "Common Operations - Lecture",
          "Common Operations - Coding",
          "Dictionary Views - Lecture",
          "Dictionary Views - Coding",
          "Updating, Merging, and Copying - Lecture",
          "Updating, Merging, and Copying - Coding",
          "Custom Classes and Hashing - Lecture",
          "Custom Classes and Hashing - Coding"
        ],
        "Coding Exercises": [
          "Exercises",
          "Solution 1",
          "Solution 2",
          "Solution 3"
        ],
        "Sets": [
          "Introduction",
          "Basic Set Theory",
          "Python Sets",
          "Creating Sets - Lecture",
          "Creating Sets - Coding",
          "Common Operations - Lecture",
          "Common Operations - Coding",
          "Set Operations - Lecture",
          "Set Operations - Coding",
          "Update Operations - Lecture",
          "Update Operations - Coding",
          "Copying Sets - Lecture",
          "Copying Sets - Coding",
          "Frozen Sets - Lecture",
          "Frozen Sets - Coding",
          "Dictionary Views - Lecture",
          "Dictionary Views - Coding"
        ],
        "Project 1": [
          "Project 1 - Goals",
          "Project 1 - Solution"
        ],
        "Serialization and Deserialization": [
          "Introduction",
          "Pickling - Lecture",
          "Pickling - Coding",
          "JSON Serialization - Lecture",
          "JSON Serialization - Coding",
          "Custom JSON Encoding - Lecture",
          "Custom JSON Encoding - Coding",
          "Using JSONEncoder - Lecture",
          "Using JSONEncoder - Coding",
          "Custom JSON Decoding - Lecture",
          "Custom JSON Decoding - Coding",
          "Using JSONDecoder - Lecture",
          "Using JSONDecoder - Coding",
          "JSON Schema",
          "Marshmallow --> Archived",
          "PyYaml",
          "Serpy"
        ],
        "Specialized Dictionaries": [
          "Introduction",
          "DefaultDict - Lecture",
          "DefaultDict - Coding",
          "OrderedDict - Lecture",
          "OrderedDict - Coding",
          "OrderedDict and Python 3.6 Dicts",
          "Counter - Lecture",
          "Counter - Coding",
          "ChainMap - Lecture",
          "ChainMap - Coding",
          "UserDict - Lecture",
          "UserDict - Coding"
        ]
      },
      "requirements": [
        "This is an advanced course, so a solid Python foundation is necessary",
        "Jupyter Notebooks",
        "functional programming (zip, map, sorted, any, all, etc)",
        "lambdas, closures and decorators",
        "built-in decorators such as @lru_cache, @singledispatch and @wraps",
        "iterables, iterators, generators and context managers",
        "variable scopes and namespaces (globals, locals, etc)",
        "ability to install 3rd party libraries (e.g. pip install)"
      ],
      "description": "This course is an in-depth look at Python dictionaries.\nDictionaries are ubiquitous in Python. Classes are essentially dictionaries, modules are dictionaries, namespaces are dictionaries, sets are dictionaries and many more.\nIn this course we'll take an in-depth look at:\nassociative arrays and how they can be implemented using hash maps\nhash functions and how we can leverage them for our own custom classes\nPython dictionaries and sets and the various operations we can perform with them\nspecialized dictionary structures such  as OrderedDict and how it relates to the built-in Python3.6+ dict\nPython's implementation of multi-sets, the Counter class\nthe ChainMap class\nhow to create custom dictionaries by inheriting from the UserDict class\nhow to serialize and deserialize dictionaries to JSON\nthe use of schemas in custom JSON deserialization\na brief introduction to some useful libraries such as JSONSchema, PyYaml and Serpy\n\n\n***** Prerequisites *****\nPlease note that this is a relatively advanced Python course, and a strong knowledge of some topics in Python is required.\nBeyond the basics of Python (loops, conditional statements, exception handling, built-in data types, creating classes, etc), you should also have an in-depth understanding of the following topics:\nfunctions and functional programming (recursion, *args, **kwargs, zip, map, sorted, any, all, etc)\nlambdas, closures and decorators (including standard decorators such as @singledispatch, @wraps, etc)\niterables, iterators, generators and context managers\nnamed tuples\nvariable scopes and namespaces (globals, locals, etc)\nFor this course you will also need to install some 3rd party libraries, so you need to be comfortable with doing this using the tool of your choice (e.g. pip, conda, etc)\nFinally, most of the code in this course is illustrated using the freely available  Jupyter Notebooks, so you will need that as well.",
      "target_audience": [
        "Python developers who want a deeper understanding of Python dictionaries and related topics"
      ]
    },
    {
      "title": "BASH Programming Course: Master the Linux Command Line!",
      "url": "https://www.udemy.com/course/bash-programming/",
      "bio": "Go from beginner to advanced with the Linux command line in this BASH programming course!",
      "objectives": [
        "In Depth understanding of Bash programing",
        "Mastery of Linux command line",
        "Knowledge is applicable to jobs related to Linux system maintenance and administration",
        "UpWork, Freelancer market"
      ],
      "course_content": {
        "Introduction": [
          "Intro"
        ],
        "Setting up the environment": [
          "Set up part 1",
          "Set up part 2"
        ],
        "Unique Characters": [
          "Terminal customization and hash character",
          "Characters Hash SemiColon",
          "Characters Dot Double quotes Single quotes Comma Double comma",
          "Backslash Slash Backquote Null command",
          "[exclamation mark] [asterix] [question mark]",
          "Parenthesis and Curly braces",
          "Characters OR AND Dash Modulo Tilde Plus Tilde Minus Caret Double Caret"
        ],
        "Variables and Parameters": [
          "Variables and Parameters part 1",
          "Variables and Parameters part 2",
          "Variables and Parameters part 3",
          "Variables and Parameters part 4"
        ],
        "Return Values": [
          "Return Values part 1",
          "Return Values part 2"
        ],
        "Conditional statments": [
          "Conditional Statments part 1",
          "Conditional Statments part 2"
        ],
        "Variables Continued": [
          "Built in variables part 1",
          "Built in variables part 2",
          "Built in variables part 3",
          "Modifying the properties of variables",
          "Random number generation"
        ],
        "Loops": [
          "For Loop",
          "While Loop",
          "Until Loop",
          "Break and Continue Part 1",
          "Break and Continue Part 2",
          "Case Construct",
          "Select Construct"
        ],
        "Internal commands": [
          "Printf",
          "Read",
          "Eval and Set",
          "More on set + unset",
          "getopts",
          "shopt type jobs disown",
          "fg kill command"
        ],
        "Regular Expressions": [
          "Grep Demo",
          "Demo for sed Extended regular expressions",
          "Globing"
        ]
      },
      "requirements": [
        "Set up a Linux virtual machine. There are no hidden charges as all the resources are free. Set up part is explained in section 2"
      ],
      "description": "Welcome! Here you can learn you how to master Linux command line ( BASH ). What do I mean by this? Ever seen a system admin in a movie or some devious hacker using a terminal? Do you want the same knowledge? Well you are in the right place!\nThis course is designed to take you from beginner to advanced in the Linux command line using bash (Bourne-again shell), a Unix shell and command language. You get 10+ hours of HD videos full of useful tutorials founded on motivation and excitement for learning bash programming! You can count on an answer to every question you ask in the course from a linux command line expert which gives you peace of mind that you can get help with every challenge you have as you learn!\nI wish you the very best of luck with your studies and I hope that we shall have some fun together in this course!\n\nFully subtitled in both English and Spanish!",
      "target_audience": [
        "Anyone who is interested in mastering Linux command line ( BASH ) will find this course will benefit them a great deal."
      ]
    },
    {
      "title": "Mastering critical SKILLS in Data Structures using C++",
      "url": "https://www.udemy.com/course/dscpp-skills/",
      "bio": "Understand DS inner details & design decisions effects + Solve ~130 problems to enhance your problem-solving skills",
      "objectives": [
        "Learn from basic to advanced data structures",
        "~180 explained problems from Easy to Medium to Hard + quizzes",
        "Well-written and modular short codes",
        "Short but very informative and deep material",
        "A fundamental step toward improving problem solving skills",
        "A fundamental step toward interviews preparation",
        "Algorithms course should be an easier learning experience"
      ],
      "course_content": {
        "Getting Started": [
          "What is a Data Structure?",
          "Why Data Structures?",
          "Effective usage of the course",
          "Resources and Students Community",
          "Important Note"
        ],
        "Vector": [
          "Vector",
          "Appending operation",
          "Capacity Trick",
          "Insertion",
          "Abstract Data Type",
          "The missing steps",
          "Vector Homework - 5 Medium Challenges",
          "Vector Homework - Solutions"
        ],
        "Asymptotic Complexity": [
          "Asymptotic Complexity (1)",
          "Asymptotic Complexity (2)",
          "Quiz",
          "Asymptotic Complexity (3)",
          "Asymptotic Complexity (4)",
          "Quiz"
        ],
        "Singly Linked List": [
          "The Node",
          "Display Nodes",
          "Singly Linked List",
          "Traversal",
          "Effective Coding and Debugging for linked list",
          "SLL Homework 1 - 6 Easy Challenges",
          "SLL Homework 1 - Solutions",
          "Deletion",
          "Logical and physical Data Structures",
          "Important Update",
          "Quiz",
          "SLL Homework 2 - 5 Easy Challenges",
          "SLL Homework 2 - 5 Easy Challenges NOTE",
          "SLL Homework 2 - Solutions p1 p2 p3",
          "SLL Homework 2 - Solutions p4 p5",
          "SLL Homework 3 - 6 Medium Challenges",
          "SLL Homework 3 - Solutions p1 p2 p3",
          "SLL Homework 3 - Solutions p4 p5 p6",
          "SLL Homework 4 - 5 Medium to Hard Challenges",
          "SLL Homework 4 - Solutions p1 p2 p3",
          "SLL Homework 4 - Solutions p4 p5"
        ],
        "Doubly Linked List": [
          "Doubly Linked List",
          "DLL Insertion",
          "DLL Deletion",
          "Quiz",
          "DLL Homework 1 - 4 Easy to Medium Challenges",
          "DLL Homework 1 - Solutions",
          "DLL Homework 2 - 4 Medium to Hard Challenges",
          "DLL Homework 2 - Solutions p1",
          "DLL Homework 2 - Solutions p2",
          "DLL Homework 2 - Solutions p3",
          "DLL Homework 2 - Solutions p4"
        ],
        "Project: Sparse Array and Matrix": [
          "Description",
          "Solution Part 1",
          "Solution Part 2"
        ],
        "Stack": [
          "What is Stack",
          "Array-based Stack",
          "Homework 1 - 6 Easy to Medium Challenges",
          "Homework 1 - Solutions p1 p2 p3",
          "Homework 1 - Solutions p4",
          "Homework 1 - Solutions p5 p6",
          "Homework 2 - 6 Medium to Hard Challenges",
          "Homework 2 - Solutions p1",
          "Homework 2 - Solutions p2 p3",
          "Homework 2 - Solutions p4",
          "Homework 2 - Solutions p5",
          "Homework 2 - Solutions p6",
          "Linked-list-based Stack",
          "Infix, Postfix and Prefix Notation",
          "Infix to Postfix 1",
          "Infix to Postfix 2",
          "Quiz",
          "Homework 3 - 5 Medium to Hard Challenges",
          "Homework 3 - Solutions p1 p2 p3",
          "Homework 3 - Solutions p4 p5"
        ],
        "Queue": [
          "Simple Queue",
          "Circular Queue",
          "Linked-list-based Queue",
          "Homework 1 - 4 Easy to Medium Challenges",
          "Homework 1 - solutions",
          "Homework 2 - 3 Medium to Hard Challenges",
          "Homework 2 - Solutions",
          "Quiz",
          "STL Vector, Stack, Queue"
        ],
        "Binary Tree": [
          "Trees",
          "Binary Tree Node",
          "Binary Tree Traversal 1",
          "Binary Tree Traversal 2",
          "Binary Tree Traversal 3",
          "Binary Tree Types",
          "Binary Tree Formulas",
          "Quiz",
          "Binary Tree Creation",
          "Homework 1 - 6 Easy Challenges",
          "Homework 1 - Solutions",
          "Homework 2 - 6 Medium to Hard Challenges",
          "Homework 2 - Solutions",
          "Level Order Traversal",
          "Homework 3 - 3 Medium to Hard Challenges",
          "Homework 3 - solutions",
          "Binary Tree Generation",
          "Homework 4 - 2 Medium Challenges",
          "Homework 4 - solutions",
          "Binary Tree Serialization",
          "Homework 5 - 3 Medium Challenges",
          "Homework 5 - solutions"
        ],
        "Binary Search Tree": [
          "Binary Search Tree",
          "BST Insertion",
          "Homework 1 - 5 Easy to Medium Challenges",
          "Homework 1 - solutions p1 p2 p4 p5",
          "Homework 1 - Solutions p2 FIX",
          "Homework 1 - Solution p3",
          "BST Min & Successor 1",
          "BST Min & Successor 2",
          "Quiz",
          "Homework 2 - 3 Medium Challenges",
          "Homework 2 - solutions p1",
          "Homework 2 - solutions p2 p3",
          "Homework 3 - 4 Medium to Hard Challenges",
          "Homework 3 - Solutions",
          "BST Deletion 1",
          "BST Deletion 2",
          "BST Deletion 3- Design Consequences",
          "Quiz",
          "Homework 4 - 3 Easy to Medium Challenges",
          "Homework 4 - solutions p1 p2",
          "Homework 4 - p3 Solution"
        ]
      },
      "requirements": [
        "Programming skills, Recursion, Pointers and Class Little Basics"
      ],
      "description": "Almost all other courses focus on knowledge. In this course, we focus on gaining real skills.\nOverall:\nThe course covers basic to advanced data structures\nLearn the inner details of the data structures and their time & memory complexity analysis\nLearn how to code line-by-line\nSource code and Slides and provided for all content\nAn extensive amount of practice to master the taught data structures (where most other content fails!)\n~180 problems from easy to hard!\n\n\nContent:\nAsymptotic Complexity\nVector\nSingly Linked List\nDoubly Linked List\nProject: Sparse Array and Matrix\nStack\nQueue\nBinary Tree\nBinary Search Tree\nBinary Heap\nAVL Tree\nLetter Tree (Trie)\nHash Table\nExtensive Homework sets with video solutions\n\n\nTeaching Style:\nInstead of long theory then coding style, we follow a unique style\nI parallelize the concepts with the codes as much as possible\nGo Concrete as possible\nUse Clear Visualization\n\n\nBy the end of the journey\nSolid understanding of Data Structures topics in C++\nMastering different skills\nAnalytical and Problem-Solving skills\nClean coding for data structures\nBlack-box applying on DS\nWith the administered problem-solving skills\nYou can start competitive programming smoothly [DS type]\nSmooth start in Algorithms course\nOne more step toward interviews preparation\n\n\nPrerequisites\nProgramming Skills:\nUp to arrays & functions\nComfortable with recursive functions\nComfortable with pointers\nBasics of OOP: Just Class, Private and Public Sections.\nPreferred:\nLearning and using STL\nProject Building Skills\nBasic Programming Problem-Solving Skills\n\n\nIt is going to be a transformative experience. Please read reviews to get a flavour of that. It is not going to be easy work. It will be Stanford-like course. You can skip homework if you want easier or shorter learning experience.\n\n\nDon't miss such a unique learning experience!",
      "target_audience": [
        "Mastering inner details of several important data structures",
        "Not just learn, but strongly apply & alter data structures",
        "whoever want to master more of computer science fundamentals"
      ]
    },
    {
      "title": "Learn Python: The Complete Python Programming Course",
      "url": "https://www.udemy.com/course/pythonforbeginners/",
      "bio": "Learn A-Z everything about Python, from the basics, to advanced topics like Python GUI, Python Data Analysis, and more!",
      "objectives": [
        "Create their own Python Programs",
        "Become an experienced Python Programmer",
        "Parse the Web and Create their own Games"
      ],
      "course_content": {
        "Up and Running With Python": [
          "Installing Python",
          "Hello World"
        ],
        "The Basics (Data Types)": [
          "Variables",
          "Multiple Assignment",
          "Data Types and Ints",
          "Strings",
          "Placeholders",
          "Lists/Arrays",
          "List Functions",
          "Dictionaries",
          "Dictionary Functions",
          "Tuples",
          "Exercise Files"
        ],
        "Conditions and Loops": [
          "If-Else Statements",
          "Relational Operators",
          "Nested If/Else",
          "Elif Statements",
          "Logical Operators",
          "For Loops",
          "While Loops",
          "Nested For Loops",
          "Pass, Break and Continue",
          "Try and Except",
          "Commenting",
          "Quick Tips",
          "Exercise Files"
        ],
        "Functions!": [
          "Creating our own Functions",
          "Global and Local Vars",
          "Abs and Bool",
          "Help and Dir",
          "Eval and Exec",
          "Str, Int, Float",
          "Recap and Sum"
        ],
        "Classes! (Object Orientated Programming)": [
          "Basics of Classes",
          "Functions in Classes",
          "Class Attributes",
          "Inheritance",
          "Overriding Methods"
        ],
        "File Input/Output": [
          "Creating a File",
          "Creating a File (Windows)",
          "Reading a File",
          "Writing to a File",
          "Appending to Files",
          "Copying Files"
        ],
        "Using Python Modules": [
          "Random Module - Randint",
          "Guessing Game",
          "Guessing Game Challenge",
          "Random Module - Shuffle and Choice",
          "Sys Module",
          "Time Module",
          "Turtle Module",
          "For Loops in Turtle",
          "Up and Down Functions",
          "Coloring in Turtle",
          "Functions in Turtle",
          "Exercise Files"
        ],
        "Crawling The Web": [
          "Re Module",
          "Crawling The Web (Stocks)",
          "Stock Quotes (.py)",
          "Crawling The Web (Weather)",
          "Weather (.py)",
          "Crawling The Web (Definition)",
          "Definition (.py)"
        ],
        "Beautiful Soup HTML Parsing": [
          "Intro to Beautiful Soup",
          "Installing the Beautiful Soup Module",
          "Prettify with Soup",
          "Drilling Down",
          "Functions in Soup",
          ".String and .Parent",
          "Searching in Soup",
          "Weather Parsing",
          "Antonym Parsing"
        ],
        "MatPlotLib - Charts, Plots and 3D Figures!": [
          "Intro to MatPlotLib",
          "First Graph!",
          "Understanding the MatPlotLib Interface",
          "Graph Labels",
          "Creating a Graph from a File",
          "Understanding SubPlots and Figures",
          "Coloring of Graph",
          "Multiple Plots in a Graph",
          "Multiple Graphs in a Figure",
          "What about 3 graphs?",
          "Bar Graphs Intro",
          "Modifying our Bar Graph",
          "Pie Chart Intro",
          "Modifying our Pie Chart",
          "Adding a Legend",
          "3D Graphics Intro",
          "3D Scatter Plots",
          "Multiple 3D Scatter Plots",
          "3D Bar Graphs",
          "3D Wireframes"
        ]
      },
      "requirements": [
        "Macintosh (OSX)/ Windows(Vista and higher) Machine",
        "Internet Connection"
      ],
      "description": "Do you want to become a programmer? Do you want to learn how to create games, automate your browser, visualize data, and much more?\nIf you’re looking to learn Python for the very first time or need a quick brush-up, this is the course for you!\nPython has rapidly become one of the most popular programming languages around the world. Compared to other languages such as Java or C++, Python consistently outranks and outperforms these languages in demand from businesses and job availability. The average Python developer makes over $100,000 - this number is only going to grow in the coming years.\nThe best part? Python is one of the easiest coding languages to learn right now. It doesn’t matter if you have no programming experience or are unfamiliar with the syntax of Python. By the time you finish this course, you'll be an absolute pro at programming!\nThis course will cover all the basics and several advanced concepts of Python. We’ll go over:\nThe fundamentals of Python programming\nWriting and Reading to Files\nAutomation of Word and Excel Files\nWeb scraping with BeautifulSoup4\nBrowser automation with Selenium\nData Analysis and Visualization with MatPlotLib\nRegex parsing and Task Management\nGUI and Gaming with Tkinter\nAnd much more!\nIf you read the above list and are feeling a bit confused, don’t worry! As an instructor and student on Udemy for almost 4 years, I know what it’s like to be overwhelmed with boring and mundane. I promise you’ll have a blast learning the ins and outs of python. I’ve successfully taught over 200,000+ students from over 200 countries jumpstart their programming journeys through my courses.\nHere’s what some of my students have to say:\n“I wish I started programming at a younger age like Avi.  This Python course was excellent for those that cringe at the thought of starting over from scratch with attempts to write programs once again. Python is a great building language for any beginner programmer. Thank you Avi!”\n\n\n“I had no idea about any programming language. With Avi's lectures, I'm now aware of several python concepts and I'm beginning to write my own programs. Avi is crisp and clear in his lectures and it is easy to catch the concepts and the depth of it through his explanations. Thanks, Avi for the wonderful course, You're awesome! It's helping me a lot :)”\n\n\n\"Videos are short and concise and well-defined in their title, this makes them easy to refer back to when a refresher is needed. Explanations aren't convoluted with complicated examples, which adds to the quick pace of the videos. I am very pleased with the decision to enroll in this course. Not only has it increased the pace I'm learning Python but I actively look forward to continuing the course, whenever I get the chance. Avi is friendly and energetic, absolutely delightful as an instructor.”\nSo what are you waiting for? Jumpstart your programming journey and dive into the world of Python by enrolling in this course today!",
      "target_audience": [
        "Even if you haven't touched coding before, it won't matter. The easy step-to-step lectures will quickly guide you through everything you'll need to know about coding, mainly Python. This course is here for you to get accustomed and familiar with Python and its syntax. And above all, Python is one of the easiest coding languages to learn, and there's a lot you can do with it."
      ]
    },
    {
      "title": "Python PCEP: Become Certified Entry-Level Python Programmer",
      "url": "https://www.udemy.com/course/python-pcep/",
      "bio": "Learn Python from scratch and pass the PCEP exam (Certified Entry-Level Python Programmer)",
      "objectives": [
        "Start programming from scratch",
        "Understand Python basics",
        "Prepare for PCEP-30-02 exam",
        "Get basic Python skills for Software Development, Data Science, Machine Learning etc.",
        "Apply for entry-level Python jobs",
        "Code along with me for real-life programming practice"
      ],
      "course_content": {},
      "requirements": [
        "A computer with Internet access",
        "Basic computer literacy",
        "Willingness to learn :)"
      ],
      "description": "Welcome! My name's Adrian and I'm a professional Software Developer. If you've never written code before and want to try programming for yourself, then you've just found an excellent course for that!\nAccording to statistics, Python is in the top 3 programming languages all around the world. It is much easier and quicker to learn that most other languages. At the same time, it's extremely popular among software developers, data analysts and other IT professions. All of this makes it an excellent choice for your first programming language.\n\n\nCOURSE OVERVIEW\nIn this course, you'll learn the fundamentals of Python 3 and you'll get prepared for the Certified Entry-Level Python Programmer exam (PCEP). You don't need any programming experience. I'll show you how to install Python and start writing code from scratch. We'll then delve straight into the code together. You'll aso have a chance to create your own programs.\nThis course has 5 main modules, each one focusing on a different exam block. At the end of each module, you'll have a chance to solve an exam quiz to check your skills.\nThis course also comes with a mock PCEP exam at the very end. It will have the same format as your actual exam, with the same passing grade and time limit. It will show you what kinds of questions you can expect.\n\n\nCOURSE ADVANTAGES\n• concise – the short video lectures focus on the most important aspects: there are just 4 hours of videos to get you started ASAP\n• based on practice – instead of useless academic theory, you learn the best developing practices drawn from my work experience,\n• reasonably priced – compared to stationary developer bootcamps, the course is much cheaper, so you save not only time but also money,\n• available anywhere, anytime – the online form lets you run the course in the most convenient place (at home, work or in a café) and time (while commuting by metro or relaxing at home after work), so you can adjust it to your agenda,\n• accessible on desktop, mobile and TV – you can display my lectures on the device of your choice, so you don’t have to stick to your PC,\n• certificate of completion – after completing the course, you will receive a printable certificate that will make your resume more attractive.",
      "target_audience": [
        "Beginners with no programming experience",
        "Wanna-be software developers and data analysts",
        "People who need the minimum of Python for Machine Learning, Data Science and Artificial Intelligence",
        "Beginner programmers who want to pass PCEP-30-02"
      ]
    },
    {
      "title": "Microsoft Excel VBA Fundamentals - Learn Basic Coding Skills",
      "url": "https://www.udemy.com/course/microsoft-excel-vba-fundamentals/",
      "bio": "The Beginner's Guide to Excel VBA (One)",
      "objectives": [
        "VBA (Visual Basic for Applications) programming language",
        "Learn how to use the VB code editor",
        "Get a general knowledge about the event procedures",
        "Get a profound knowledge about the Initialize Event",
        "Get a full understanding of Sub procedures",
        "Learn how to write a clean and easy to maintain code",
        "Separation of concerns",
        "Understand the master-slave approach",
        "Learn how to debug the code",
        "Learn how to manipulate objects using the code",
        "Learn how and when to use a With…End With-statement"
      ],
      "course_content": {
        "Course Preview": [
          "What's the Best Approach to Learning Excel VBA?",
          "What's Covered in this course?"
        ],
        "Download the Date and Time Picker (Latest Version)": [
          "Date and Time Picker Demo",
          "Link to YouTube Integration Tutorials",
          "Date and Time Picker Files - Download Completed Version"
        ],
        "Introduction": [
          "Welcome",
          "Recommended Learning Procedure",
          "What is VBA?",
          "Important Word - Before we begin"
        ],
        "Source files": [
          "Source File (Developer Environment)",
          "Source File (Designing the Date Picker)",
          "Source File (VBA Coding)",
          "Source File (Enabling the Top Navigation)",
          "Source File (The Date Display Defaults - Nested Loops)"
        ],
        "Setting up the Developer Environment": [
          "Introduction",
          "Saving a Macro-Enabled Workbook",
          "Adding the Developer Tab",
          "Accessing the VBA Editor",
          "Understanding the VBA Editor",
          "Adding a UserForm",
          "The Toolbox",
          "The Properties Window",
          "Test Driving the Properties Window"
        ],
        "Designing the Date Picker": [
          "Introduction",
          "Learning from the Windows Calendar",
          "Designing the Header – Marking Boundary",
          "Designing the Header - Month Display",
          "Designing the Header - Year Display",
          "Adding the Days Section",
          "Adding the Date Section",
          "Adding the Footer"
        ],
        "VBA Coding": [
          "Introduction",
          "Introducing the Code Editor",
          "Understanding the Initialize Event",
          "Understanding the initialize event - Continued…",
          "Working With the Properties of Child Objects",
          "Adding and Calling Private Sub Procedures",
          "Event Procedures & User-Defined Procedures",
          "Header Settings - Month Display",
          "Header Settings - Year Display"
        ],
        "Working with Constants": [
          "Using RGB function to set colours",
          "Working with Constants - Procedure Level",
          "The downside of a procedure-level constant",
          "Working with Constants - Module Level",
          "Adding more constants",
          "Working with Constants - Enumeration",
          "Arranging Display - Separation of Concerns"
        ],
        "Looping Through a Range of Objects": [
          "Configuring the Days Section",
          "Eliminating Redundancy",
          "The Looping Technique",
          "Accessing the Controls Collection",
          "Indirect Referencing of Labels",
          "Dynamically Updating the Left Position",
          "Testing the Left Position",
          "Coding the Days Captions"
        ],
        "Nested Loops": [
          "Introduction",
          "Setting the Default Properties of the Label R1C1",
          "Setting the Default Properties of the 1st Row",
          "Nested Loop Statements",
          "Enabling the Dynamic Top Row Position",
          "Module - Summary",
          "Course Summary & Conclusion",
          "Link to Part 2 of the Beginner ‘s Guide to Excel VBA"
        ]
      },
      "requirements": [
        "Basic understanding of Microsoft Excel",
        "Zero knowledge of VBA",
        "You must be using Microsoft Excel 2010 to 365"
      ],
      "description": "Microsoft Excel VBA Fundamentals course is designed to teach relevant basic coding skills for VBA programming. It is for those who aspire to become a VBA programmer and don’t know where to start. It is also suitable for those who automate their spreadsheets by recording macros but seek to learn how to write the code themselves.\n\n\nWhat should you expect in this course?\nThis course is entitled: Learn basic coding skills, it is NOT entitled Learn VBA basics\nTherefore, we are focusing on the skill of writing a VBA code that is clean, maintainable, and easy to understand.\nThis is what you may call pre-basics or basics that are really basic; something you need to learn before you dive into Excel VBA concepts.\nYour journey in your VBA career will start by learning:\nWhat is VBA?\nWhat are the tools used by a VBA programmer?\nHow to design an object, because before you start to learn how to write a VBA code, you need to understand what an object is. Otherwise, you will not understand the language at all.\nAfter that, I will teach you how to send system commands that will manipulate the behaviour of the object you just created.\nIt is a very short course, but that will be enough to get you started.\nWhat you will learn here is always a missing key to those who are struggling to understand VBA concepts, or to those who think they have understood the concepts, but when faced with a real-world project they get stuck and wonder why.\n\n\nAlmost every Excel VBA programmer did not start here,\nthey started by solving one problem and they got excited\nand moved on to the next problem and another and their enthusiasm was amplified because programming is fun.\nHowever, when they were tasked to build a project, programming became a very stressful thing because a project comes with plenty of related but different problems. Therefore, projects need someone who really knows what he or she is doing.\n\n\nNow, before you start solving Excel VBA problems,\nyou need to understand that VBA is a language, and like all languages, it can be learned.\nSo, you need to understand what Excel VBA is about\nIf it is a language,\nyou must understand who or what are you talking to\nYou must also learn how to ask and get the information you are looking for, tell and be understood.\nThat’s what communication or language is all about; relaying information “to and from”.\nIn other words, you must learn how to structure a VBA code that can send clear commands to the system so that the system can in turn execute those commands without fail.\nIMPORTANT: It is easier to learn the technique of writing computer commands if you are doing it without being clouded by complex VBA concepts that are deemed basic.\nThis is what this course intends to achieve, putting you on the right path.\nThe good thing is that this course is practical, which means, you learn and test your learning with what you are taking part in building.\n\n\nThis is part 1 of the Beginner's Guide series. After this course, you can go ahead and study VBA basic concepts whether with me (in part 2) or somewhere else and everything will be clear because you now possess the most important thing, a clear understanding of VBA coding.\n\n\nSo, if you are looking for where to start learning VBA, this is the right place to start; it is a beginner’s guide.\n\n\nCLEARING MISCONCEPTIONS: What you SHOULD NOT EXPECT in this course\n\n\nIf you are an expert, or your basics are in order, and if you are here to download the date picker (used as a guinea pig for our practical learning), PLEASE DO NOT TAKE THIS COURSE. Otherwise, this will be a waste of your time.\nTime is very precious, let me clarify all the misconceptions about this course so that you won’t find yourself enrolled in the wrong course. Please pay careful attention to the following:\nCourse Title\nPlease check the title carefully before you enrol, this course is NOT entitled Learn VBA basics, it is instead entitled Learn basic coding skills, it is important not to confuse the two.\nTherefore, I’m NOT going to teach you all the VBA basics concepts in this course. So, if what you want, is to learn all VBA concepts, PLEASE DO NOT TAKE this course.\nIf you are interested in the in-depth study of the Excel VBA basic concepts, please also enrol in the course entitled Microsoft Excel VBA - Solving Complex Problems Using Basics.\nDate Picker\nIn this course, you are NOT going to build the date picker from the start to the end. Instead, you are going to take part in building the initial stages of the date picker. The entire date picker is a very complex tool and can only be built by a complex VBA coder who has also mastered advanced VBA concepts.\nThe Date Picker shown in the preview video is NOT available for download in this course. If you are looking for a downloadable date picker, please subscribe to a course entitled Microsoft Excel VBA - Solving Complex Problems Using Basics.\n\n\nThank you",
      "target_audience": [
        "If you aspire to become a Microsoft Excel VBA coder, this is the right course for you",
        "If all you know is to record macros to automate your spreadsheet",
        "If you have tried VBA coding before and it seemed too complicated for you"
      ]
    },
    {
      "title": "Mastering LINQ with C# and .NET",
      "url": "https://www.udemy.com/course/linqlinq/",
      "bio": "Learn .NET's secret sauce for querying collections and databases",
      "objectives": [
        "Create and execute LINQ queries on data sets",
        "Perform ad hoc data queries on in-memory and external data sources",
        "Query databases",
        "Write your own LINQ operators",
        "Use advanced libraries and approaches for data querying"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Getting Started with LINQ": [
          "Overview",
          "How LINQ Works",
          "IEnumerable<T>",
          "Implementing IEnumerable<T>",
          "Start Using LINQPad",
          "Generation Operations",
          "Summary"
        ],
        "Linq Operators in Detail": [
          "Overview",
          "Reminder re: Samples",
          "Converting Data Types: Cast, ToXxx and AsXxx",
          "Projection Operations: Select and SelectMany",
          "Filtering Data: OfType and Where",
          "Projection and Filtering",
          "Sorting Data: OrderBy, ThenBy, Reverse",
          "Grouping Data: GroupBy and IGrouping<T>",
          "Set Operations: Distinct, Except, Intersect, Union",
          "Set Operations",
          "Quantifier Operations: All, Any and Contains",
          "Partitioning Data: Skip(While) and Take(While)",
          "Quantifiers and Partitioning",
          "Join Operations: Join and GroupJoin",
          "Equality Operations (SequenceEqual, NUnit comparisons)",
          "Element Operations: First, Last, Single, ElementAt",
          "Concatenation Operations (Concat)",
          "Aggregation Operations: Aggregate, Count, Statistical Functions",
          "Aggregation Operations",
          "Summary"
        ],
        "LINQ and Databases": [
          "Overview",
          "The Magic of Expression Trees (Expression<T>)",
          "IQueryable<T>",
          "LINQ to Entities (Entity Framework)",
          "Async LINQ Queries (Entity Framework)",
          "Summary"
        ],
        "Parallel LINQ": [
          "Overview",
          "AsParallel and ParallelQuery",
          "Cancellation and Exceptions",
          "Merge Options",
          "Custom Aggregation",
          "Summary"
        ],
        "Extra Topics": [
          "Overview",
          "LINQ to XML (System.Xml.Linq)",
          "LINQ Support in ReSharper/Rider",
          "MoreLINQ",
          "Course Summary",
          "Would You Like to Know More?"
        ]
      },
      "requirements": [
        "Basic knowledge of C#",
        "Basic understanding of C# collection types (e.g., array, list, etc.)",
        "Understanding of extension methods"
      ],
      "description": "This is a comprehensive course on a technology called Language Integrated Query (LINQ). LINQ is a core part of .NET that is responsible for helping us iterate through, filter, search, transform and manipulate collections, be it local objects (arrays, lists, etc.) or remote objects (e.g., databases).\nThis course covers:\nWhat LINQ is, how it's implemented and what interfaces it uses\nMain LINQ operators (there are lots of them!)\nUsing LINQ to query databases (LINQ to Entities)\nTechnologies with LINQ support (e.g., LINQ to XML)\nParallel LINQ (PLINQ) and how to use it to parallelize your queries\nExtra topics (e.g., LINQ tool support in Rider/ReSharper, using MoreLINQ)",
      "target_audience": [
        "Beginner and experienced .NET/C# developers",
        "Anyone interested in modern approaches to data query",
        "Database administrators interested in writing data query C#"
      ]
    },
    {
      "title": "SAP ABAP Training - in Plain English",
      "url": "https://www.udemy.com/course/sap-abap-training/",
      "bio": "ABAP for absolute beginners - No Programming knowledge required",
      "objectives": [
        "Write ABAP Programs",
        "Interpret existing ABAP programs",
        "Be conversant with most major programming constructs and paradigms, specifically Enterprise Application programming"
      ],
      "course_content": {
        "Day 0 - Getting Started": [
          "Business Context",
          "How is this course Organized",
          "Is this course for you ?",
          "SAP GUI Installation"
        ],
        "Day 1 - Your first ABAP Program": [
          "Program 1 - Hello World",
          "Program 2 - Stock list ( Part 1 )",
          "Program 2 - Stock List ( Part 2 )",
          "Program 3 - List of Countries",
          "Program 4 - List of Materials ( Part 1 )",
          "Program 4 - List of Materials ( Part 2 )",
          "Program 4 - List of Materials ( Part 3 )",
          "Exercise",
          "Solution + notes",
          "Quiz"
        ],
        "Day 2 - Programs on Sales and Procurement Business Processes": [
          "Introduction - Business Processes",
          "Sales Orders Table Creation - 1",
          "Sales Orders Table Creation - 2",
          "Program 5 - Sales Order List",
          "Purchase Order Cycle",
          "Create Purchase Order Tables",
          "Program 6 - Purchase Order List",
          "Primary Key Adjustment",
          "Debugging - Baby Steps",
          "Program 7 - List of Electronic Materials - Part 1",
          "Program 7 - List of Electronic Materials - Part 2",
          "Program 8 - Materials in Japanese Language - Part 1",
          "Program 8 - Materials in Japanese Language - Part 2",
          "Program 9 - Stock by Plant and Storage Location",
          "Program 10 - Japanese Material Stock Listing",
          "Quiz"
        ],
        "Day 3 - Database design": [
          "Importance of Database design",
          "Normalization",
          "Tables - Hands on",
          "Foreign Keys",
          "Program 11 and 12 - Customer Listing - v1",
          "Exercise",
          "Solution"
        ],
        "Day 4 - Classical Reports": [
          "Summary so far ( Days 1 to 3 )",
          "Sales Order Data",
          "Program 13 - Part 1",
          "Program 13 - Part 2",
          "Program 13 - Part 3 ( SELECT-OPTIONS )",
          "Program 13 - Summary",
          "Program 14 - Sales Documents of type Quotations",
          "Program 15 - All Sales Documents",
          "SELECT-OPTIONS - What else can the user do with it",
          "SELECT-OPTIONS - OBLIGATORY and DEFAULT values",
          "Program 15 - Summary",
          "Program 16 - List of Materials by User - v1 ( Part 1 ) - Events Overview",
          "Program 16 - List of Materials by User - v1 ( Part 2 ) - INITIALIZATION event",
          "A different take on Events",
          "Program 16-A - List of Materials by User - v2 ( Part 1 )",
          "Program 16-A - List of Materials by User - v2 ( Part 2 )",
          "Program 16-B - List of Materials by User - v3 ( Part 1)",
          "Program 16-B - List of Materials by User - v3 ( Part 2)"
        ],
        "Day 5 - Internal Table Operations - 1": [
          "Program 17 - Sales of All Materials",
          "Program 18 - Sales value by Order and Material",
          "Program 19 - Materials Ordered so far",
          "Theory - INSERT and APPEND syntax",
          "Program 20-A - Orders Table - V1",
          "Program 20-B - Orders Table - v2",
          "Program 20-C - Orders Table - v3 - Part 1",
          "Program 20-C - Orders Table -v3 - Part 2"
        ],
        "Day 6 - Internal Table Operations - 2": [
          "Program 21 - Invoiced Value ( Paid & unpaid ) - v1",
          "Program 21-a - Invoiced Value ( Paid & unpaid ) - v2",
          "Program 21-b - Invoiced Value ( Paid vs unpaid ) - v3",
          "THEORY - MODIFY Statement",
          "Program 22 - Language specific Material Description",
          "THEORY - Types of Internal Tables",
          "Program 24 - Hashed Internal Tables - Part 2"
        ],
        "Day 7 - Interactive Reports": [
          "What is Interactive Report",
          "Program 24 - Interactive Report - 1 Level - v1",
          "Program 24 - Interactive Report - 2 Levels - v2",
          "Program 24 - Interactive Report - TOP-OF-PAGE - v3",
          "Program 24 - Interactive Report - GET CURSOR - v4"
        ],
        "Day 8 - Modularization & PF Status": [
          "Overview of Modularization",
          "Program 25 - Subroutines",
          "Program 25 ..contd.. - Using and Changing",
          "Program 25 - Subroutines - Summary",
          "Program 26 - INCLUDE",
          "What is FM - Function Module",
          "Program 27 - Function Module",
          "Program 28 - What is PF-STATUS",
          "Program 28 - PF-Status Conclusion"
        ],
        "Day 9 - ALV Grid Reports": [
          "Program 29 - v0 - WRITE vs ALV Reports",
          "Program 29 - v1 - What is Field Catalog",
          "Program 29 - v2 - Expanded Field Catalog",
          "Program 29 - v3 - Key Fields, Column Position, Hide",
          "Program 29 - v4 - Sorting and Sub-totals",
          "Program 29 - v5 - Events",
          "Program 29 - v6 - PF-STATUS",
          "Open SQL",
          "Program 30 -Business Requirement",
          "Program 30 - Create a Database Table",
          "Program 30 - PF STATUS",
          "Program 30 - Insert Rows - Part 1",
          "Program 30 - Insert Rows - Part 2",
          "Program 30 - Delete Rows",
          "Program 30 - Save",
          "Program 30 - Hotspot",
          "Program 30 - Summary + Notes + Source Code"
        ]
      },
      "requirements": [
        "None at all"
      ],
      "description": "** Disclaimer ** -\nI do NOT do Live Training. SAP is a registered trademark of SAP AG in Germany and many other countries. I am NOT associated with SAP.\nSAP software and SAP GUI are proprietary SAP software. Neither Udemy nor me are authorized to provide SAP Access. You can officially get SAP Access to practice on SAP system from SAP's website. I am not allowed by Udemy to place a link here. Please google \"SAP Access\" and you can find the URL for the same\n** End of Disclaimer **\nWhat is this course all about ?\nWelcome to SAP ABAP programming for absolute beginners. ABAP is the programming language of SAP - the most popular ERP. In the world of SAP consulting, there are 3 types of consultants.\nFunctional Consultants ( SD, MM, FI etc )\nTechnical Consultants ( ABAP, WebDynpro, Workflow, Fiori  etc )\nBasis & security consultants ( Basis Admin, GRC etc )\nThis course lays the foundation for anybody ( irrespective of programming background ) to be a technical consultant.\nI don't know Programming / Coding Scares me\nProgramming is all about \"logical\" thinking. If you are a logical thinker ( which is a silly question, isn't it ? ) you can be a programmer. You need to be patient though. You don't need degrees or anything special background to learn this course. If there is one requirement, that is Patience. If you are impatient, I do not suggest you take this course - or for that matter any programming course.\nNot just me. I know many who are not comfortable with programming\nThe worry is real. I understand. Programming is like learning a new language. How long does it take for you to learn Spanish or French ? Many months if not years. And the more you speak, the more you learn. Same thing applies for programming. The more you program, the more you feel at home with ABAP.\nHow does this course make programming easy ?\nStaying true to the title of the course - 'in Plain English' is the USP of this course. I left the first 3 hours of the course open for preview. Please go through it before you buy this course. Beginners to programming require a flat learning curve to make them feel comfortable - that is precisely what this course intends to achieve.\nWhat this course is not ?\nThis is neither the most comprehensive, nor the most elaborate course in ABAP. Although folks with programming knowledge can greatly benefit from this course, this course is NOT designed for them. This course is tailor made for folks with no programming experience.\nAlso, not everybody needs to know ABAP. For example, functional consultants or system administrators need not learn ABAP. Unless you plan to become techno-functional, you need not take this course if you are a functional consultant.\nHow to make the best of this course ?\nFor those with no programming experience, I suggest you do the following.\nTry to complete every exercise on your own.\nDon't just listen - Practice. Get access to an IDES system.\nPost your questions in the forum.\nReview what you learnt with the attached notes.\nFor those having some programming experience, this course can be pretty slow. Here are some tips to make this go a bit faster.\nYou can skip the exercises.\nBased on the title, feel free to skip certain parts.\nUse the attached notes for quick reference.",
      "target_audience": [
        "Anyone who wants to learn SAP ABAP language",
        "If you have some kind of programming background, this course will be much easier ( but a bit boring because everything is taught from scratch )"
      ]
    },
    {
      "title": "C Programming Bootcamp - The Complete C Language Course",
      "url": "https://www.udemy.com/course/c-programming-for-beginners-programming-in-c/",
      "bio": "C Programming 2025: Master the Fundamentals of C Programming Language. Join the Comprehensive C Bootcamp Masterclass!",
      "objectives": [
        "Fundamentals of Programming",
        "Summarized & Concise Material [Saving TONS of Time!]",
        "OVER 100 Practical Exercises!",
        "Animated Explanation & Illustrations - Explaining \"Hard Topics\" EASY",
        "C Programming Language Concepts & Usage",
        "C Program Structure",
        "Using Input & Output functions",
        "Usage of Variables - declaration | initialization | access",
        "Casting",
        "Control Flow - if | if-else | switch-cases",
        "Logical Operators",
        "Loops - while | do-while | for",
        "Functions - declaration | definition | usage",
        "1D Arrays - Why do we need them & How they can be used?",
        "2D Arrays - Matrices",
        "Introducing \"#define\"",
        "Pointers - Time to Sweat! - Why | When | How",
        "Strings - Creating, Reading, Manipulating & Printing",
        "Recursion - Concept | Usage",
        "Constants",
        "Unions"
      ],
      "course_content": {
        "Welcome to Course!": [
          "Welcome!",
          "Curriculum - What you're going to LEARN"
        ],
        "Introduction to General Programming Fundamentals!": [
          "General Concept - User & Developer",
          "General Concept - Computer as a Unit to EXECUTE COMMANDS",
          "General Concept - Computer Additional Common Parts",
          "General Concept - What are Programming Languages?"
        ],
        "Environment Setup - Choosing Your IDE": [
          "IDE - Code Blocks - Windows | Linux | Mac OS",
          "CodeBlocks - Download & Setup",
          "CodeBlocks - Start New Project",
          "Online Compilers Solution - Just Get Started!",
          "NOTE for MAC Users or Users who didn't manage to install IDE!"
        ],
        "[Optional: Setup for MAC Students]": [
          "General Introduction to XCode for Mac Users",
          "Download & Install XCode on MAC",
          "Making Sure \"gcc\" is Installed",
          "Download & Install CodeBlocks - MAC",
          "Starting a new CodeBlocks Project - MAC",
          "NOTE for MAC Users or Users who didn't manage to install IDE!"
        ],
        "Additional IDEs Setup [Optional Section]": [
          "Visual Studio Windows - Download",
          "Visual Studio Windows - Getting Started",
          "Visual Studio Code Windows - Download & Install",
          "Visual Studio Code Windows Official - Getting Started",
          "Eclipse - Getting Started using C (Windows)",
          "CodeLite Windows - Download & Install",
          "CodeLite Windows - Getting Started"
        ],
        "Welcome First Program [+3 Full Exercises & Video Solutions]": [
          "C Program Structure",
          "Welcome printf() function!",
          "Challenge #1 - Print Your First Name And Last Name!",
          "Challenge #1 Solution",
          "Challenge #2 - Print Your Full Name, Age, And Gender!",
          "Challenge #2 Solution",
          "Challenge #3 - Print An \"Isosceles Triangle\"",
          "Challenge #3 Solution",
          "End of Section: Practice Your Knowledge!"
        ],
        "Comments & Format Specification": [
          "Comments in C Language",
          "Format Specifications in C - Why And How They Should Be Used",
          "Format Specification Exercise - Download The PDF File",
          "Milestone #1 - Building Your First Calculator A",
          "Milestone #1 - Solution! [Make sure to Compare with your answers]",
          "End of Section: Practice Your Knowledge!"
        ],
        "Practical Exercises & Solutions - Part #1: Basics of C Programming": [
          "Print Rectangle of Asterisks - Question",
          "Print Rectangle of Asterisks - Solution",
          "Print Asterisks Pattern - Question",
          "Print Asterisks Pattern - Solution",
          "Print X Shape - Question",
          "Print X Shape - Solution",
          "Print Your Birth Year - Question",
          "Print Your Birth Year - Solution"
        ],
        "Variables & Data Types - From Zero To Hero!": [
          "Variables Introduction",
          "Variables - General Concept In Programming",
          "Variables - Complete Usage in C Language",
          "Variables Code Example #1",
          "Challenge #1 - Find your Year of Birth!",
          "Challenge #1 - Solution",
          "Challenge #2 - Calculate Rectangle's Area",
          "Challenge #2 - Solution",
          "Practical Assignment: Calculate Rectangle's Perimeter",
          "Casting Introduction",
          "Casting in C Programming Language",
          "Challenge #3 - Calculating your Average Grade",
          "Challenge #3 - Solution",
          "Milestone 2 - Weather Station A",
          "General SWAP in Programming",
          "SWAP in C Language",
          "Basic Practical Assignment: Implement Swap between 2 Floating Point Numbers",
          "Variables - Summary! You're doing GREAT!"
        ],
        "Practical Exercises & Solutions - Part #2: Variables & Data Types": [
          "Arithmetic Sequence - General Introduction and Explanation",
          "n-th Term of Arithmetic Sequence - Question",
          "n-th Term of Arithmetic Sequence - Solution",
          "Sum of Arithmetic Sequence - Question",
          "Sum of Arithmetic Sequence - Solution",
          "Employee Salary Calculator - Question",
          "Employee Salary Calculator - Solution",
          "Finding a Driving Time - Question",
          "Finding a Driving Time - Solution",
          "Convert Seconds into Hours, Minutes, and Seconds - Question",
          "Convert Seconds into Hours, Minutes, and Seconds - Solution",
          "Removing Decimal Part from an Integer - Question",
          "Removing Decimal Part from an Integer - Solution",
          "Sum of Triple Digits - Question",
          "Sum of Triple Digits - Solution",
          "Print Reversed Number - Question",
          "Print Reversed Number - Solution",
          "Distance Between 2 Points - Question",
          "Distance Between 2 Points - Solution",
          "Efficient Calculation Example - Question",
          "Efficient Calculation Example - Solution"
        ]
      },
      "requirements": [
        "A computer with Windows, Linux or Mac OS",
        "4GB RAM (recommended)",
        "No prior knowledge is required! This course if for Absolute Beginners!"
      ],
      "description": "This course has been optimized to meet the requirements and demands of students who are eager to learn the C Programming Language in the most easy and attractive manner. Including handpicked coding materials and over 100 exercises with full video solutions - this bestseller course is expected to provide you with everything you need to get started (for beginners) as well as provide you with beneficial knowledge if you're working at High-tech industry (especially in the Embedded, Microcontrollers, Cyber, and other domains).\n\n\nAbout the Instructor\nBSc in Computer Science & BSc in Electronic Engineering\nPractical experience working as an Engineer at some of the leading High-tech companies such as “Mobileye - an Intel Company” as well as a Cyber Systems Startup.\nOver 3 years of experience working as a lecturer in the Academy - teaching students from 3 different faculties.\nThis combination of the knowledge and experience gained over the years made me feel eager and passionate about sharing my knowledge with students.\nIt got me wonder - why not help so many students to learn c programming in an easy and fun way? I mean learning the c language can feel like a nightmare.. but C can be actually kind of fun - if we do it right!\nAnd that's what I aim to achieve - Teaching you \"C Programming\" in plain English.\nSo I hope you're ready for our C Programming Language Bootcamp Journey! :)\n\n\nLast Update 2025 - Who's this course for?\nC students in college/university.  Has been optimized to meet the needs of the beginner students.\nHigh-tech employees, especially but not limited to, at the Embedded Systems, Microcontrollers, and Cyber Security domains.\nAbsolute beginners and hobbyists who want to get the first taste of programming using the c language.\nSo if you belong into one of these - then I think you're ABSOLUTELY going to LOVE this course!\n\n\nWhat is C Programming Language?\n\nC Language is the “mother” of all programming languages.\nC first appeared almost 50 years ago and has been used for the development of:\nOperating Systems - C as its core.\nCore parts of famous databases (such as Oracle and MySQL) - Yes, even MySQL was developed using C.\nCyber-Systems - I personally was programming C to develop a cyber system.\nSmart Homes & Smart Cities\nSystems including Sensors and Micro Controllers (especially in Embedded Systems) - Common usage to programming an MCU using C Programming  Language.\nAlso, if you're familiar with Python Programming Language - then you better know that a lot of Python efficient libraries are actually implemented in C.\n\n\n“C Language is definitely here to STAY!”\n\nC is HIGHLY USEFUL & HIGHLY EFFICIENT.\nAlso, it’s considered that by learning C Programming you’re definitely going to make your programming fundamentals VERY STRONG.\nAnd finally to answer a question that a lot of you may have - there is a HIGH DEMAND for C Developers in the market - at both large companies as well as startups - and the salaries are usually PRETTY HIGH! :)\nSo C Programming - usually pays off.\n\n\n[C Programming - Course Information]\nIn this course, you’ll learn the fundamentals of programming using C Language - including different concepts such as:\nProgramming Concepts (General + C Language)\nInput & Output (what it is and how it can be used in C)\nHow variables work\nConditions & Control Flow (controlling the execution flow of a C Program)\nDifferent types of Loops (including For, While, and Do-While in C)\nFunctions\nArrays in C\nPointers\nUsing Strings in C Programming\nRecursions (Concepts + C Usage)\nConstants\nUnions\nAnd maybe some additional sections in C Programming Language\nEach and every one of the major topics are being taught with plenty of exercises (of course, in C Programming Language) with full video solutions.\n\n\n[Sections Structure]\nAt every section, you will be given with:\nIntroduction to the General Concept without the C language.\nImplementing Concept in C Programming Language.\nHands-On Exercises Challenges + FULL VIDEO SOLUTION - using C Programming.\nCool Milestones such as:\nDeveloping a Calculator in C.\nDeveloping your own Weather Station in C.\nC Password Guess Program.\nAnd many more \"c\" Cool Milestones that will make you feel how the Theoretical and Practical knowledge are getting together!\nAdditional Sections - OPTIONAL.\nBy the end of the course - you should be able to analyze and solve various c programming problems on your own.\nSo if you're a Total Beginner, a student or you're just curious about the topic – this course is ABSOLUTELY FOR YOU!\n*Also, if you're a Programmer who wants to make a Career Change to C Programming (from Python Programming, JavaScript and Web Development, C#, or any other).\n\n\nShould you enroll?\nIf you're still unsure - then no worries. I'm so confident about my course and what it will teach you so that you get Udemy's 30-day money-back guarantee.\nDoubts - Out. Enroll \"C\" - In.\nLet's go!",
      "target_audience": [
        "People totally new to programming [no prior knowledge required]",
        "Beginner C Developers",
        "Students at the Academy",
        "High-tech employees - Embedded Systems, Microcontrollers, and Cyber Security domains",
        "Programmers who wants to make a Career Change to C Programming (from Python Programming, JavaScript and Web Development, C#, or any other).",
        "Graduated Engineers that want to repeat Summarized & Concise Material"
      ]
    },
    {
      "title": "Design Patterns in Swift",
      "url": "https://www.udemy.com/course/design-patterns-swift/",
      "bio": "Discover the modern implementation of design patterns with Swift",
      "objectives": [
        "Recognize and apply design patterns",
        "Refactor existing designs to use design patterns",
        "Reason about applicability and usability of design patterns",
        "Implement each pattern in a coding exercise"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "SOLID Design Principles": [
          "Overview",
          "Single Responsibility Principle",
          "Open-Closed Principle",
          "Liskov Substitution Principle",
          "Interface Segregation Principle",
          "Dependency Inversion Principle",
          "Summary"
        ],
        "Builder": [
          "Overview",
          "Life Without Builder",
          "Builder",
          "Fluent Builder",
          "Faceted Builder",
          "Builder Coding Exercise",
          "Summary"
        ],
        "Factories": [
          "Overview",
          "Point Example",
          "Factory Method",
          "Factory",
          "Inner Factory",
          "Abstract Factory",
          "Factory Coding Exercise",
          "Summary"
        ],
        "Prototype": [
          "Overview",
          "Copy Constructors",
          "Explicit Deep Copy Interface",
          "Prototype Coding Exercise",
          "Summary"
        ],
        "Singleton": [
          "Overview",
          "Singleton Implementation",
          "Testability Issues",
          "Singleton in Dependency Injection",
          "Monostate",
          "Singleton Coding Exercise",
          "Summary"
        ],
        "Adapter": [
          "Overview",
          "Vector/Raster Demo",
          "Adapter Caching",
          "Adapter Coding Exercise",
          "Summary"
        ],
        "Bridge": [
          "Overview",
          "Bridge",
          "Bridge Coding Exercise",
          "Summary"
        ],
        "Composite": [
          "Overview",
          "Geometric Shapes",
          "Neural Networks",
          "Composite Coding Exercise",
          "Summary"
        ],
        "Decorator": [
          "Overview",
          "Custom String Builder",
          "Multiple Inheritance",
          "Dynamic Decorator Composition",
          "Static Decorator Composition",
          "Decorator Coding Exercise",
          "Summary"
        ]
      },
      "requirements": [
        "Good understanding of Swift",
        "Familiarity with latest Swift features",
        "Good understanding of object-oriented design principles"
      ],
      "description": "Course Overview\nThis course provides a comprehensive overview of Design Patterns in Swift from a practical perspective. This course in particular covers patterns with the use of:\nThe latest versions of the Swift programming language\nUse of modern programming approaches: dependency injection, reactive programming and more\nUse of modern developer tools\nDiscussions of pattern variations and alternative approaches\nThis course provides an overview of all the Gang of Four (GoF) design patterns as outlined in their seminal book, together with modern-day variations, adjustments, discussions of intrinsic use of patterns in the language.\nWhat are Design Patterns?\nDesign Patterns are reusable solutions to common programming problems. They were popularized with the 1994 book Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma, John Vlissides, Ralph Johnson and Richard Helm (who are commonly known as a Gang of Four, hence the GoF acronym).\nThe original book was written using C++ and Smalltalk as examples, but since then, design patterns have been adapted to every programming language imaginable: Swift, C#, Java, PHP and even programming languages that aren't strictly object-oriented, such as JavaScript.\nThe appeal of design patterns is immortal: we see them in libraries, some of them are intrinsic in programming languages, and you probably use them on a daily basis even if you don't realize they are there.\nWhat Patterns Does This Course Cover?\nThis course covers all the GoF design patterns. In fact, here's the full list of what is covered:\nSOLID Design Principles: Single Responsibility Principle, Open-Closed Principle, Liskov Substitution Principle, Interface Segregation Principle and Dependency Inversion Principle\nCreational Design Patterns: Builder, Factories (Factory Method and Abstract Factory), Prototype and Singleton\nStructrural Design Patterns: Adapter, Bridge, Composite, Decorator, Façade, Flyweight and Proxy\nBehavioral Design Patterns: Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Null Object, Observer, State, Strategy, Template Method and Visitor\nWho Is the Course For?\nThis course is for Swift developers who want to see not just textbook examples of design patterns, but also the different variations and tricks that can be applied to implement design patterns in a modern way.\nPresentation Style\nThis course is presented as a (very large) series of live demonstrations. All demos are single-file, so you can download the file attached to the lesson and run it in CLion, XCode or another IDE of your choice (or just on the command line).\nThis course does not use UML class diagrams; all of demos are live coding. I use Visual Studio Code for the demos.",
      "target_audience": [
        "Beginner and experienced developers",
        "Anyone interested in design patterns"
      ]
    },
    {
      "title": "Learn Python & Ethical Hacking From Scratch",
      "url": "https://www.udemy.com/course/learn-python-and-ethical-hacking-from-scratch/",
      "bio": "Write 20+ hacking programs to learn hacking and programming at the same time | No prior knowledge required",
      "objectives": [
        "180+ videos (25 hours) on Python programming & ethical hacking",
        "Write over 20 hacking and security programs",
        "Learn 2 topics at the same time - Python programming & Ethical Hacking",
        "No programming, hacking or Linux knowledge required",
        "Write programs in Python 2 and 3",
        "Write cross platform programs that work on Windows, Apple Mac OS & Linux",
        "Have a deep understanding on how computer systems work",
        "Install hacking lab & needed software (on Windows, Apple Mac OS and Linux)",
        "Start from 0 up to a high-intermediate level",
        "Learn by example, by writing exciting programs",
        "Model problems, design solutions & implement them using Python",
        "Have a strong base & use the skills learned to write any program even if its not related to hacking",
        "Understand what is Hacking, what is Programming, and why are they related",
        "Design a testing lab to practice hacking & programming safely",
        "Interact & use the Linux terminal",
        "Understand what MAC address is & how to change it",
        "Write a python program to change MAC address",
        "Use Python modules and libraries",
        "Understand Object Oriented Programming",
        "Write object oriented programs",
        "Model & design extendable programs",
        "Write a program to discover devices connected to the same network",
        "Read, analyse & manipulate network packets",
        "Understand & interact with different network layers such as ARP, DNS, HTTP ....etc",
        "Write a program to redirect the flow of packets in a network (ARP spoofer)",
        "Write a packet sniffer to filter interesting data such as usernames and passwords",
        "Write a program to redirect DNS requests (DNS Spoofer)",
        "Intercept and modify network packets on the fly",
        "Write a program to replace downloads requested by any computer on the network",
        "Analyse & modify HTTP requests and responses",
        "Inject code in HTML pages loaded by computers on the same network",
        "Downgrade HTTPS to HTTP",
        "Write a program to detect ARP Spoofing attacks",
        "Write payloads to download a file, execute command, download & execute, download execute & report .....etc",
        "Use sockets to send data over TCP",
        "Send data reliably over TCP",
        "Write client-server programs",
        "Write a backdoor that works on Windows, Apple Mac OS and Linux",
        "Implement features in the backdoor such as file system access, upload and download files and persistence",
        "Write a remote keylogger that can register all keystrikes and send them by Email",
        "Interact with files using python (read, write & modify)",
        "Convert python programs to binary executables that work on Windows, OS X and Linux",
        "Convert malware to torjans that work and function like other file types like an image or a PDF",
        "Bypass Anti-Virus Programs",
        "Understand how websites work, the technologies used and how to test them for weaknesses",
        "Send requests towebsites and analyse responses",
        "Write a program that can discover hidden paths in websites",
        "Write a program that can map websites and discover all links, subdomains, files and directories",
        "Extract and submit forms using python",
        "Run dictionary attacks and guess login information on login pages",
        "Analyse HTML using Python",
        "Interact with websites using Python",
        "Write a program that can discover vulnerabilities in websites"
      ],
      "course_content": {
        "Introduction": [
          "Teaser",
          "Course Introduction",
          "Introduction to Python Programming & Ethical Hacking",
          "Initial Overview",
          "Initial Preparation",
          "Installing Kali Linux as a VM on Windows",
          "Installing Kali Linux as a VM on Apple Mac OS (Intel & Silicon Chips)",
          "Installing Kali Linux as a VM on Linux",
          "Basic Overview of Kali Linux",
          "The Terminal & Linux Commands",
          "More Powerful Linux Terminal with AI Features",
          "Python 2 VS Python 3 & Writing Our First Program",
          "Installing & Using a Python IDE"
        ],
        "Writing a MAC Address Changer - Python Basics": [
          "What is MAC Address & How To Change it",
          "Using Python Modules & Executing System Commands",
          "Implementing a Very Basic MAC Changer",
          "Variables & Strings",
          "Using Variables in MAC Changer",
          "Getting Input From The User",
          "Handling User Input",
          "Handling Command-line Arguments",
          "Initialising Variables Based on Command-line Arguments",
          "Python Functions",
          "Returning Values From Functions",
          "Decision Making in Python",
          "Using Conditional Statements in MAC Changer"
        ],
        "MAC Changer - Algorithm Design": [
          "Introduction to Algorithms",
          "Reading Output Returned By System Commands",
          "Introduction to Regular Expressions (Regex)",
          "Extracting a Substring Using Regex",
          "Refactoring & Housekeeping",
          "Implementing The Validation Algorithm",
          "Python 3 Compatibility"
        ],
        "Programming a Network Scanner": [
          "Introduction & Teaser",
          "Installing Windows as a Virtual Machine",
          "Installing Windows as a Virtual Machine on Apple Silicon Computers",
          "Introduction to ARP",
          "Designing an Algorithm To Discover Clients on The Same Network",
          "Using Scapy To Create an ARP Request",
          "Combining Frames To Broadcast Packets",
          "Sending & Receiving Packets",
          "Introduction Lists in Python",
          "Iterating Over Lists & Analysing Packet",
          "Using Escape Characters To Improve Program Output",
          "Introduction to Dictionaries in Python",
          "Improving the Program Using a List of Dictionaries",
          "Iterating Over Nested Data Structures",
          "Get IP Range Using Command Line Arguments",
          "Testing The Network Scanner With Python 3"
        ],
        "Writing an ARP Spoofer": [
          "What is ARP Spoofing?",
          "Intercepting Data in a Network Using arpspoof",
          "Creating an ARP Response",
          "Sending ARP Responses",
          "Extracting MAC Address From Responses",
          "Introduction to Loops in Python",
          "More on Loops & Counters",
          "Dynamic Printing",
          "Exception Handling in Python",
          "Implementing a Restore Function",
          "Restoring ARP Tables on Exception",
          "Fix Dynamic Printing"
        ],
        "Writing a Packet Sniffer": [
          "Introduction & Teaser",
          "Sniffing Packets Using Scapy",
          "Extracting data From a Specific Layer",
          "Analysing Sniffed Packets & Extracting Fields From Layers",
          "Analysing Fields & Extracting Passwords",
          "Extracting URLs",
          "Capturing Passwords From Any Computer Connected to the Same Network",
          "Strings & Bytes in Python 3"
        ],
        "Writing a DNS Spoofer": [
          "Intercepting Packets - Creating a Proxy",
          "Converting Packets to Scapy Packets",
          "Introduction to DNS Spoofing",
          "Filtering DNS Responses",
          "Analysing & Creating a Custom DNS Response",
          "Modifying Packets On The Fly",
          "Redirecting DNS Responses",
          "Conversion Between Strings & Bytes"
        ],
        "Writing a File Interceptor": [
          "Introduction & Teaser",
          "Filtering Traffic Based on the Port Used",
          "Analysing HTTP Requests",
          "Intercepting HTTP Requests",
          "Modifying HTTP Responses on The Fly",
          "Intercepting & Replacing Downloads on The Network",
          "Testing The File Interceptor With Python 3"
        ],
        "Writing a Code Injector": [
          "Introduction & Teaser",
          "Analysing HTTP Responses",
          "Replacing a Substring Using Regex",
          "Decoding HTTP Responses",
          "Modifying HTTP Responses & Injecting Javascript Code in HTML Pages",
          "Refactoring & Housekeeping",
          "Debugging Issues in Python",
          "Using Groups & None-capturing Regex",
          "Recalculating Content Length",
          "Test The Code Injector With Python 3",
          "BeEF Overview & Basic Hook Method",
          "Hooking Computers Using code_injector",
          "Basic BeEF Commands",
          "Delivering Malware Using BeEF"
        ],
        "Bypassing HTTPS": [
          "How to Bypass HTTPS",
          "Bypassing HTTPS & Sniffing Login Credentials",
          "Replacing Downloads on HTTPS Pages",
          "Injecting Code in HTTPS Pages"
        ]
      },
      "requirements": [
        "Basic IT knowledge",
        "No Linux, programming or hacking knowledge required.",
        "Computer with a minimum of 4GB ram/memory",
        "Operating System: Windows / Apple Mac OS / Linux"
      ],
      "description": "Last Update: May 2024\nWelcome to my comprehensive course on python programming and ethical hacking. The course assumes you have NO prior knowledge in any of these topics, and by the end of it you'll be at a high intermediate level being able to combine both of these skills to write python programs to hack computer systems exactly the same way that black hat hackers do. That's not all, you'll also be able to use the programming skills you learn to write any program even if it has nothing to do with hacking.\nThis course is highly practical but it won't neglect the theory, we'll start with basics of ethical hacking and python programming and installing the needed software. Then we'll dive and start programming straight away. You'll learn everything by example, by writing useful hacking programs, no boring dry programming lectures.\n\n\nThe course is divided into a number of sections, each aims to hack a specific system!  You'll first learn how this system works and its weaknesses, then you'll lean how to write a python program to exploit these weaknesses and hack it. As we write the program I will teach you python programming from scratch covering one topic at a time. By the end of the course you're going to have a number of ethical hacking programs written by yourself (see below) from backdoors, keyloggers, credential harvesters, network hacking tools, website hacking tools and the list goes on. You'll also have a deep understanding on how computer systems work, how to model problems, design an algorithm to solve problems and implement the solution using python .\n\n\nAs mentioned in this course you will learn both ethical hacking and programming at the same time, here are some of the topics that will be covered in the course:\n\n\nProgramming topics:\nProgramming in python 2 and 3.\nUsing modules and libraries.\nVariables, types, etc.\nHandling user input.\nReading and writing files .\nFunctions .\nLoops .\nData structures.\nRegex.\nDecision making.\nRecursion.\nThreading.\nObject oriented programming.\nPacket manipulation using scapy.\nNetfilterqueue.\nSocket programming.\nString manipulation.\nExceptions.\nSerialisation.\nCompiling programs to binary executables.\nSending & receiving HTTP requests.\nParsing HTML.\n+ more!\n\nHacking topics:\nBasics of network hacking / penetration testing .\nChanging MAC address & bypassing filtering .\nNetwork mapping.\nARP Spoofing - redirect the flow of packets in a network.\nDNS Spoofing - redirect requests from one website to another.\nSpying network devices / clients.\nAnalysing network traffic such as usernames, passwords, visited urls, etc.\nInject code in pages loaded by computerd connected to the same network.\nReplace files on the fly as they get downloaded by computers on the same network.\nDetect ARP spoofing attacks.\nBypass HTTPS.\nCreate malware for Windows, Apple Mac OS and Linux.\nCreate trojans for Windows, Apple Mac OS and Linux.\nHack Windows, Apple Mac OS and Linux using custom backdoors.\nBypass Anti-Virus programs.\nSteal credentials using fake prompts .\nDisplay fake updates .\nUse own keylogger to spy on everything typed on Windows & Linux.\nBasics of website hacking / penetration testing .\nDiscover subdomains .\nDiscover hidden files and directories in a website .\nRun wordlist attacks to guess login information .\nDiscover and exploit XSS vulnerabilities .\nDiscover weaknesses in websites using own vulnerability scanner.\n\n\nPrograms you'll build in this course:\nYou'll learn all the above by implementing the following hacking programs\nmac_changer - changes MAC Address to anything we want .\nnetwork_scanner - scans network and discovers the IP and MAC address of connected clients.\narp_spoofer - runs an ARP spoofing attack to redirect the flow of packets in the network allowing us to intercept data.\npacket_sniffer - filters intercepted data and displays usernames, passwords, visited links, etc.\ndns_spoofer - redirects DNS requests, eg: redirects requests to from one domain to another.\nfile_interceptor - Intercepts downloads and replaces them with any file we want .\ncode_injector - injects code in intercepted HTML pages.\narpspoof_detector - detects ARP spoofing attacks.\nexecute_command payload - executes a system command on the computer it gets executed on.\nexecute_and_report payload - executes a system command and reports result via email .\ndownload_and_execute payload - downloads a file and executes it on target system .\ndownload_execute_and_report payload - downloads a file, executes it, and reports result by email .\nreverse_backdoor - gives remote control over the system it gets executed on, allows us to\nAccess file system.\nExecute system commands .\nDownload & upload files.\nkeylogger - records key-strikes and sends them to us by email.\ncrawler - discovers hidden paths on a target website .\ndiscover_subdomains - discovers subdomains on target website .\nspider - maps the whole target website and discovers files, directories and links.\nguess_login - runs a wordlist attack to guess login information.\nvulnerability_scanner - scans a target website for weaknesses and produces a report with all findings .\n\n\nAs you build the above you'll learn:\nSetting up a penetration testing lab to practice hacking safely.\nInstalling Kali Linux and Windows as virtual machines inside ANY operating system.\nLinux Basics .\nLinux terminal basics .\nHow networks work .\nHow clients communicate in a network.\nAddress Resolution Protocol - ARP .\nNetwork layers.\nDomain Name System - DNS .\nHypertext Transfer Protocol - HTTP .\nHTTPS .\nHow anti-virus programs work .\nSockets.\nConnecting devices over TCP .\nTransferring data over TCP .\nHow website work .\nGET & POST requests.\nAnd more!\n\n\nCheckout the curriculum and the course teaser for more info!\n\n\nWith this course you'll get 24/7 support, so if you have any questions you can post them in the Q&A section and we'll respond to you within 15 hours.\n\n\nNotes:\nThis course is created for educational purposes only and all the attacks are launched in my own lab or against devices that I have permission to test.\nThis course is totally a product of Zaid Sabih & zSecurity, no other organisation is associated with it or a certification exam. Although, you will receive a Course Completion Certification from Udemy, apart from that NO OTHER ORGANISATION IS INVOLVED.",
      "target_audience": [
        "Anybody interested in learning Python programming",
        "Anybody interested in learning ethical hacking / penetration testing"
      ]
    },
    {
      "title": "Mastering Parallel programming with CUDA platform",
      "url": "https://www.udemy.com/course/mastering-parallel-programming-with-cuda-platform/",
      "bio": "Unofficial guide to parallel programming on GPU's with CUDA from basic concepts to advance algorithm implementations.",
      "objectives": [
        "All the basic knowladge about CUDA programming",
        "Ability to desing and implement optimized parallel algorithms",
        "Basic work flow of parallel algorithm design",
        "Advance CUDA concepts"
      ],
      "course_content": {
        "Introduction to CUDA programming and CUDA programming model": [
          "Very very important",
          "Introduction to parallel programming",
          "Parallel computing and Super computing",
          "Let's investigate some background.",
          "How to install CUDA toolkit and first look at CUDA program",
          "Basic elements of CUDA program",
          "Organization of threads in a CUDA program - threadIdx",
          "Organization of thread in a CUDA program - blockIdx,blockDim,gridDim",
          "Programming exercise 1",
          "Unique index calculation using threadIdx blockId and blockDim",
          "Unique index calculation for 2D grid 1",
          "Unique index calculation for 2D grid 2",
          "Memory transfer between host and device",
          "Programming exercise 2",
          "Sum array example with validity check",
          "Sum array example with error handling",
          "Sum array example with timing",
          "Extend sum array implementation to sum up 3 arrays",
          "Device properties",
          "Summary"
        ],
        "CUDA Execution model": [
          "Understand the device better",
          "All about warps",
          "Warp divergence",
          "Resource partitioning and latency hiding 1",
          "Resource partitioning and latency hiding 2",
          "Occupancy",
          "Profile driven optimization with nvprof",
          "Parallel reduction as synchronization example",
          "Parallel reduction as warp divergence example",
          "Parallel reduction with loop unrolling",
          "Parallel reduction as warp unrolling",
          "Reduction with complete unrolling",
          "Performance comparison of reduction kernels",
          "CUDA Dynamic parallelism",
          "Reduction with dynamic parallelism",
          "Summary"
        ],
        "CUDA memory model": [
          "CUDA memory model",
          "Different memory types in CUDA",
          "Memory management and pinned memory",
          "Zero copy memory",
          "Unified memory",
          "Global memory access patterns",
          "Global memory writes",
          "AOS vs SOA",
          "Matrix transpose",
          "Matrix transpose with unrolling",
          "Matrix transpose with diagonal coordinate system",
          "Summary"
        ],
        "CUDA Shared memory and constant memory": [
          "Introduction to CUDA shared memory",
          "Shared memory access modes and memory banks",
          "Row major and Column major access to shared memory",
          "Static and Dynamic shared memory",
          "Shared memory padding",
          "Parallel reduction with shared memory",
          "Synchronization in CUDA",
          "Matrix transpose with shared memory",
          "CUDA constant memory",
          "Matrix transpose with Shared memory padding",
          "CUDA warp shuffle instructions",
          "Parallel reduction with warp shuffle instructions",
          "Summary"
        ],
        "CUDA Streams": [
          "Introduction to CUDA streams and events",
          "How to use CUDA asynchronous functions",
          "How to use CUDA streams",
          "Overlapping memory transfer and kernel execution",
          "Stream synchronization and blocking behavious of NULL stream",
          "Explicit and implicit synchronization",
          "CUDA events and timing with CUDA events",
          "Creating inter stream dependencies with events"
        ],
        "Performance Tuning with CUDA instruction level primitives": [
          "Introduction to different types of instructions in CUDA",
          "Floating point operations",
          "Standard and Instrict functions",
          "Atomic functions"
        ],
        "Parallel Patterns and Applications": [
          "Scan algorithm introduction",
          "Simple parallel scan",
          "Work efficient parallel exclusive scan",
          "Work efficient parallel inclusive scan",
          "Parallel scan for large data sets",
          "Parallel Compact algorithm"
        ],
        "Bonus: Introduction to Image processing with CUDA": [
          "Introduction part 1",
          "Introduction part 2",
          "Digital image processing",
          "Digital image fundametals : Human perception",
          "Digital image fundamentals : Image formation",
          "OpenCV installation"
        ]
      },
      "requirements": [
        "Basic C or C++ programming knowladge",
        "How to use Visual studio IDE",
        "CUDA toolkit",
        "Nvidia GPU",
        "You should be familiar with basic setup of a C++ project, how to change project properties etc"
      ],
      "description": "This course is an in-depth, unofficial guide to parallel programming using GPU computing techniques with C++. We'll begin by exploring foundational concepts such as the GPU programming model, execution structure, and memory hierarchy. From there, you’ll dive into hands-on development, implementing advanced parallel algorithms optimized for high-performance graphics processors.\n\n\nSince performance is at the heart of GPU-based computing, this course places a strong emphasis on optimization techniques. You’ll learn how to fine-tune your code for maximum speed and efficiency, and apply industry-standard tools for profiling and debugging, including nvprof, nvvp, memcheck, and GDB-based GPU debuggers.\nThe course includes the following core sections:\nIntroduction to GPU programming concepts and execution models\nUnderstanding execution behavior on parallel processors\nDeep dive into memory systems: global, shared, and constant memory\nUsing streams to manage concurrent execution\nFine-tuning instruction-level behavior for performance\nImplementing real-world algorithms using GPU acceleration\nProfiling and debugging tools overview\nTo reinforce learning, this course includes programming exercises and quizzes designed to help you internalize each concept.\nThis is the first course in a masterclass series on GPU-based parallel computing. The knowledge you gain here will form a strong foundation for exploring more advanced topics in future courses.\nAs GPUs continue to drive innovation in fields like AI and scientific computing, mastering these tools and techniques will set you apart in the tech industry.\n\n\nNote: This course is not affiliated with or endorsed by NVIDIA Corporation. CUDA is a registered trademark of NVIDIA Corporation, used here solely for educational reference purposes.",
      "target_audience": [
        "Any one who wants to learn CUDA programming from scartch to intermidiate level"
      ]
    },
    {
      "title": "Java Masterclass - Beginner to Expert Guide: Java & JavaFX",
      "url": "https://www.udemy.com/course/the-complete-java-9-masterclass-beginner-to-expert/",
      "bio": "Building Java FX, Springboot and Vaadin Java Applications. Includes Advanced Java Concepts",
      "objectives": [
        "Have a Full Java Programming Language Core Knowledge",
        "Build JavaFX User Interfaces and Applications",
        "Build Scalable, Maintainable and Clean Java Programs",
        "Learn how to Use Many Java Enterprise Frameworks like SpringBoot and Vaadin to Build Java Enterprise Applications",
        "Become a Well-Rounded Java Programmer - who can see the big picture of Applications to be built",
        "Architecting Robust Java Applications"
      ],
      "course_content": {
        "Getting Started": [
          "What you'll get from this Java Course?"
        ],
        "Introductions - Windows PC: Java Development Environment Setup": [
          "Install Java, JDK and JRE (Windows PC)",
          "Install Java JDK on Ubuntu",
          "How To Setup JAVA_HOME on Windows 10",
          "Install Eclipse IDE and Create Your First Hello World App",
          "Install IntelliJ on Windows",
          "Installing IntelliJ - Linux Ubuntu"
        ],
        "Install and Setup for MAC Users": [
          "Download Eclipse IDE for Java Programmers (Mac OSX)",
          "Why are we Using 2 Distinct IDE'S - IntelliJ and Eclipse",
          "Hello World - First Java Program",
          "Install IntelliJ on Mac"
        ],
        "What's New in Java 9": [
          "Install Java 9 JDK and Run HelloWorld",
          "Install Java 9 JDK - Windows PC",
          "Java 9 - Understanding new Features and Java Acronyms",
          "Java 9 - New Features - Part 2",
          "Java 9 - Intro to Jshell",
          "Java 9 - Process API - New Features",
          "The Java Platform Module System",
          "The Java Platform Module System - Benefits",
          "What is a Module?",
          "How to Create a Module - Presentation",
          "Create Our First Module with IntelliJ",
          "Java 9 - HTTP/2 New Feature",
          "Module Project Source Code"
        ],
        "Explore IntelliJ and Eclipse IDE": [
          "Explore IntelliJ IDE",
          "Explore Eclipse IDE"
        ],
        "How To Ask Great Questions?": [
          "How To Ask Great Questions, Politely?"
        ],
        "Introduction to Java Language - From Scratch - Deep Dive": [
          "What's Java Programming Language - Why such a Popular Language?",
          "The Java Compilation Process",
          "How to Download Source code",
          "Hello World - Again!",
          "Java Variables - Ints and Concatenation",
          "Java Variables - Floats, Char and Doubles, shorts",
          "Variable - Booleans",
          "Java Fundamentals - Worksheet 1",
          "Source code"
        ],
        "Methods and Operations in Java": [
          "Java Basic Operations",
          "Relational Operators and If Statements",
          "For and While Loops",
          "Introduction to Methods and Parameters",
          "Methods and Return Types",
          "Source code - Methods"
        ],
        "Java Advanced Concepts - Object Oriented Programming Part 1": [
          "Introduction to Classes and Objects",
          "Instance or Member Variables - Access Control",
          "Encapsulation - Java Access Modifier - Intro to constructors",
          "Encapsulation Java Access Modifier Getters and setters",
          "Overloading Constructors",
          "Introduction to Inheritance in Java",
          "Inheritance Part 2",
          "Error Handling in Java ( Exceptions in Java)",
          "Multiple Catch Block and Finally Block",
          "The Java Class Library",
          "The Object Class",
          "Java Fundamentals - Classes, Objects and Methods",
          "Source code"
        ],
        "Java Advanced Concepts - Object Oriented Programming - Part 2": [
          "Java Composition Design Pattern",
          "Polymorphism Overloading Methods",
          "Polymorphism - Override Methods",
          "Polymorphic Arguments",
          "Project Source code"
        ]
      },
      "requirements": [
        "Have a Computer and know how to turn it on and off.",
        "Willingness and drive to learn, strong work ethics, a doer mentality",
        "You - show up ready to learn!"
      ],
      "description": "If you want to learn Java from not knowing anything to a paid Java Developer, this is a course for you!\nJava is one of the most popular languages in the World. It's used by companies like  Google, Accenture, Target, CenturyLink, Intel, Symantec, T-Mobile, eBay, Capital One, Groupon, New Relic, Nielsen, Uber, Spotify, Philips, Chegg, Yelp, Okta, Slack, Thomson Reuters, Opower, Zillow, Cloudera, Netflix, Canon, TripAdvisor and many more.\nThis means the demand is not scarce.  With Java Skills, you will always have a job, and companies all over the world will be coming to you!\nThis course is designed to teach you everything you need to know about Java to build high-end, efficient, and scalable Java applications.\nIf you want to become:\na highly paid Java Developer\nan expert Java Programmer companies want to hire\na Freelancer Java Programmer who builds Enterprises Java Applications\na person who can build their own business applications using Java Programming Language\nan Android Developer\na Java Web/Enterprise Applications Developer\nbetter at Java ( sharpen your Java Knowledge and go deep into learning Advanced Java)\na Certified Java Developer...\n... much more...\n\n\nThen this course is for you and much more... You'll be immersed into Java from the first lecture to the end.   You will also receive a Certificate of Completion so you can present it to your potential employer.\n\n\nWhy this Course?  Why is this the best Course To Learn Java?\nWell, if you are here is probably because you've either looked online for Java tutorials or maybe watched a lot of youtube videos and still can't really grasp core Java Programming Principles.\nYou see, out there on the Internet, you can find a lot of information, but the problem is that everything is scattered around. Very frustrating actually to learn the right way since all you get is fragments of information.  This is where this Complete Java MasterClass shines - it takes you from nothing to actually building amazing Java Applications, and MOST importantly, you'll learn the Ins and Outs of Java Programming Language.  With the knowledge you gain from this course, you can build any Java Based Application - Web Applications, Android Mobile Apps, Desktop Applications, and even program your DVD Player!\nHere's a list of some of the things you'll learn:\nEverything pertaining to Java - Java keywords, Java lingo (operators, if statements, for loops, switch statements, while loops) and many other basic, fundamentals that will help you have a solid Java knowledge.\nI will show you how to install all the tools you need to run Java programs, such as IntelliJ (the development tool used to code in Java ).  It will also show you how to install the Java libraries onto yoItchine (Windows, Linux and Mac).  By the way, if you are using Eclipse, Jedit, Notepad, Netbeans, or any other IDE, it's all good - you will still be learning a lot from this course.\nI will show you how to think like a Pro Programmer when learning Java, and how to use the Java knowledge and transfer it to build Android Apps , Web Apps (using many other Java Frameworks like Spring Framework, Hibernate and more)\nJava Object-Oriented Programming so you can re-use code and write truly scalable and efficient code.\nYou'll Learn JavaFX library and build amazing User Interfaces that will make your potential employers want to hire you right away!\nAnd so much more...\n\n\n\n\nMy goal in this course is to give you everything I know about Java to be the best Java Programmer in the market! So that you become a Well-Rounded Java Programmer!  All I teach you is what I wished I had known when I first started learning to program in Java.\n\n\nDon't just take my word for it; see what my past students had to say about my courses and my teaching style:\n\"Very well thought-out course. Flows smoothly with great delivery. I have been developing Android Apps for several years, and I still found this course informative, relevant, and helpful. I would recommend everyone take this course if you are new to Android or returning for a refresher course.\"  - Douglas Pillsbury\n\n\n\"Great course. Very easy in understanding and friendly learning. Good Job Sir. Thanks for this.\" - Muhammad Adnan\n\n\n\"I am delighted with this course. I have only attended the Android part because I had a basic knowledge of Java. I really like how Paulo teaches. He goes step by step, and you can understand everything. My first language is not English, but he speaks very; clearly, I can understand every word. Also, he is a happy guy, and you can hear that through the courses that he really loves what he is doing. \" - Antal Bereczki\n\n\n\"This course is ideal for beginners. This guy is a good teacher. As i get deeper, i feel i am gaining more and more power...haha.\nI honestly thought this is the best money I have ever spent in my life. This course is worth the money 100 times over. OMG, this good.\nPaulo, you are FANTASTIC !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\" - Sean\n\"So far one of the best courses and instructors I have experienced in Udemy.\" - Jim Landon\nAre you afraid that maybe since you are an experienced developer and have never done Java before, you won't learn Java?  Take a look at what one of my students said about my course and teaching style:\n\"As a web developer, I always thought that learning Android development will be hard. But with this course, it's a piece of cake!\" - Saša Lacković\n\n\nStudents love my course so much that they can't even contain themselves... Look at what one student wrote:\n\"If there's something more than 5 stars, I would have given to this course.\nReally great content, along with a detailed explanation.\nKeep going on by updating and enhancing the content of this course. Personally, I enjoy every lecture I attend.\nPAULO... YOU ARE BEST OF THE BEST :)\nThanks a lot for this great course,\nBest regards.\" - Bassel Nasief\n\n\nSign up today, and look forward to:\nOver 30 hours of HD 1080p video content\nSource code\nAssignments\nBuilding several fully-fledged Java Applications\nAll the knowledge you need to start building any Java Application you want - Web, Desktop, and more.\nThousands of dollars worth of design assets\nMy best selling From Zero to a Pro Mobile Developer eBook\n\n\nIt's proven that the best way to learn something is by immersing yourself in the subject you are trying to learn.  If you want to master Java Programming, then you are in the right place.\nBy the end of this course, you will master Java Programming no matter the level of experience you are at right now.  In this comprehensive course, you will be learning by doing, by coding alongside me.\nYou'll understand exactly what I am doing and why.  You will hone this Java Programming craft.\n\n\nWhy learn Java compared to other programming languages?\nIf you do a quick google search, you'll find that Java is the most popular Programming Language in use according to the TIOBE index since it's the ONLY language that works across all computer platforms.  Java has the capability to run into different devices ( Android included) without needing to be recompiled for each one.  Hence, the slogan \"Write once; run anywhere.\"\nThis is why Java is everywhere.  Literally, everywhere!  Can you see the potential of making a perfect living by becoming a Java Developer?\nGive yourself the competitive advantage by learning the most popular programming language of all times - Java!  If you know Java, you'll always be competitive in the market.  You will be at the top of the food chain!\nREMEMBER… I'm so confident that you'll love this course that we're offering a FULL money-back guarantee for 30 days! So it's a complete no-brainer, sign up today with ZERO risks and EVERYTHING to gain.\nSo what are you waiting for? Click the Enroll now button and join the world's most highly rated Java 9 Masterclass - Beginner to Expert.\n\n\nWho is the target audience?\nIf you are an absolute beginner at coding, then take this course.\nIf you are a seasoned programmer, take this course to speed with Java, JavaFX, and Java Web Development with SpringBoot and Vaadin Frameworks quickly.\nIf you are switching from C++ to Java then this is a fast-track way of doing it. You can get started straight away with the Intermediate Java Language section.\nIf you are a pro developer and want to quickly get up to date with JavaFX, Springboot, and Vaadin, this is the course.\n\n\nEnroll today!\n\n\nSee you inside.",
      "target_audience": [
        "Anyone who wants to learn Java Programming Language",
        "Anyone who wants to learn JavaFX, Java Web Application Development, Java Databases"
      ]
    },
    {
      "title": "Learn TDD in Java",
      "url": "https://www.udemy.com/course/learn-tdd-in-java/",
      "bio": "Learn Test Driven Development through a concise programming interview question",
      "objectives": [
        "Write code, tests first",
        "Use IDE shortcuts more proficiently",
        "Understand what an interviewer is looking for in a pairing code interview"
      ],
      "course_content": {
        "Introduction": [
          "What is TDD?",
          "IntelliJ Cheat Sheets",
          "Download IntelliJ",
          "Project creation with IntelliJ and Maven",
          "Project Overview"
        ],
        "Learn TDD": [
          "The Does Nothing Test",
          "Do the simplest thing possible",
          "A better test",
          "Our first proper implementation",
          "Iterating our test coverage",
          "You must know how to operate your IDE",
          "Improving our implementation",
          "You don't need null checks",
          "Refactoring our test for ease and beauty",
          "The second requirement",
          "Cut refactoring time down from 15 minutes to 15 seconds with this one shortcut",
          "A harder requirement with edge cases",
          "After Red and Green comes Refactor",
          "The big solution unveil",
          "Java 7 code solution",
          "Moving the solution to Java 8",
          "Final Solution Code"
        ]
      },
      "requirements": [
        "A good basic understanding of Java",
        "IntelliJ IDE (available free from http://cjiq.co/intellij)"
      ],
      "description": "This course teaches Test Driven Development from the ground up using an example paired programming interview question.  This interview question is taken from a real interview which I ran for several years and continues to be used in a number of institutions.\nThe interview is conducted as a TDD, pair-programming challenge. This is important to note. It was not the eventual solution that mattered so much as the journey there. Sometimes we would hire people who didn’t get the solution, and other times we wouldn’t hire people who did.\nThe Challenge\nImplement a “movie store” (like blockbusters or Netflix). The store needs to hold a number of movies (let’s say a maximum of 100, but for our testing purposes 4 or 5 is sufficient). We need to be able to search the movie store for titles based on a number of different criteria.\nSounds pretty simple huh?\nIt’s amazing how many people it trips up though.\nIn the interview we would reveal each requirement one by one. As we’re doing TDD we’re building the requirements one at a time. Just like in the interview, I'll reveal each requirement one at a time.\nThe goals\nThe solution should have beautiful, clean code, without repetition or hacks. It should be code that you would be proud to have in production.\nIt should be well tested.\nYou do not need to worry about databases, threading, user interfaces, API access or 3rd party libraries. This a pure Java question.\nYou should be mindful about performance, but it’s not a major concern.\nYou should not over engineer the solution.\nThe solution\nDon’t worry if you’ve never done TDD- I even teach you how to do TDD from the start.\nThis course is approximately an hour long and comes with all the code available to download.\nThe training is about much more than just coming up with a solution- we discuss many of the areas that candidates fall down in interview and how to avoid them.",
      "target_audience": [
        "Junior/Mid level Java developers who want to know about TDD",
        "Anyone going for a Java coding interview"
      ]
    },
    {
      "title": "Python for Data Structures, Algorithms, and Interviews!",
      "url": "https://www.udemy.com/course/python-for-data-structures-algorithms-and-interviews/",
      "bio": "Get a kick start on your career and ace your coding interviews!",
      "objectives": [
        "Create a great resume",
        "Have a LinkedIn and Github profile for recruiters",
        "Understand all major Data Structures and Algorithms",
        "Ace coding interviews after preparing with the course's mock interviews"
      ],
      "course_content": {
        "Course Setup": [
          "Course Introduction",
          "Full Course Curriculum Overview",
          "How to get help for the Course!",
          "Course FAQ"
        ],
        "Company and Job Types": [
          "Company Types Overview",
          "Job Type Overviews"
        ],
        "Resume Preparation": [
          "Resume Preparation",
          "Resume Creation Tools",
          "List of Resume Creation Websites",
          "Resume Checklist Review"
        ],
        "Online Presence": [
          "LinkedIn",
          "GitHub",
          "Personal Website and Portfolio"
        ],
        "Networking": [
          "Building a Network",
          "Networking Events"
        ],
        "Job Searching": [
          "Organization of Job Search",
          "Job Search Sites",
          "List of Job Boards and Sites",
          "Company Matching Sites",
          "List of Company Matching Sites"
        ],
        "During the Interview (Non-Technical)": [
          "Overview of Interview Section",
          "5 Steps of an Interview",
          "Tough Interview Questions",
          "Questions for Students",
          "Special Case Interview Questions"
        ],
        "Post Interview": [
          "Salary Negotiations",
          "Salary Questions and Answers",
          "Preparing References"
        ],
        "Technical Break Section": [
          "Technical Overview",
          "Getting Help for the Technical Section",
          "Questions Disclosure"
        ],
        "Introduction to Jupyter Notebooks": [
          "Course Material Installation Guide",
          "Windows - Course Material Installations",
          "Mac OSX - Course Material Installations",
          "Jupyter Notebooks Overview",
          "Course Notebooks",
          "Interview Notebooks"
        ]
      },
      "requirements": [
        "Basic to Intermediate Python skills."
      ],
      "description": "PLEASE NOTE: IF YOU ARE A COMPLETE BEGINNER TO PYTHON, CHECK OUT MY OTHER COURSE: COMPLETE PYTHON BOOTCAMP TO LEARN PYTHON!\nWelcome to Python for Data Structures, Algorithms and Interviews!\nThis is the most comprehensive course online to help you ace your coding interviews and learn about Data Structures and Algorithms! This course takes advantage of the easy to read Python programming language to efficiently teach you what you need to know to land the tech job of your dreams!\nThis course will teach you everything you need to know to get a great job in the software technology field, including:\nCreating a great resume\nCreating LinkedIn and GitHub profiles for recruiters to find\nBuilding and leveraging a network for job opportunities\nThe latest job searching tools available online\nNon-Technical Interview Questions and Answers\nPost-Interview topics (Salary Negotiation and References Preparation)\nJupyter Notebooks Overview\nAlgorithm Analysis and Big-O Notation\nArray Sequences\nStacks Queues and Deques\nLinked Lists\nRecursion\nTrees\nSearching and Sorting Algorithms\nGraph Algorithms\nRiddles and Brainteasers\n4 Mock Interviews!\nAchieve your career goals and get a fantastic job in technology by enrolling in this course!",
      "target_audience": [
        "Students familiar with Python programming looking to start a career in tech!"
      ]
    },
    {
      "title": "Python for Financial Analysis and Algorithmic Trading",
      "url": "https://www.udemy.com/course/python-for-finance-and-trading-algorithms/",
      "bio": "Learn numpy , pandas , matplotlib , quantopian , finance , and more for algorithmic trading with Python!",
      "objectives": [
        "Use NumPy to quickly work with Numerical Data",
        "Use Pandas for Analyze and Visualize Data",
        "Use Matplotlib to create custom plots",
        "Learn how to use statsmodels for Time Series Analysis",
        "Calculate Financial Statistics, such as Daily Returns, Cumulative Returns, Volatility, etc..",
        "Use Exponentially Weighted Moving Averages",
        "Use ARIMA models on Time Series Data",
        "Calculate the Sharpe Ratio",
        "Optimize Portfolio Allocations",
        "Understand the Capital Asset Pricing Model",
        "Learn about the Efficient Market Hypothesis",
        "Conduct algorithmic Trading on Quantopian"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction to Course",
          "Course Overview Lecture (DON'T SKIP THIS!)",
          "Did you skip the last lecture? Please go back and view it!",
          "Course FAQ"
        ],
        "Course Materials and Set-up": [
          "Note on yml File",
          "Course Installation Guide"
        ],
        "Python Crash Course": [
          "Welcome to the Python Crash Course",
          "Introduction to Crash Course",
          "Python Crash Course Part One",
          "Python Crash Course Part Two",
          "Python Crash Course Part Three",
          "Python Crash Course Exercises",
          "Python Crash Course Exercise Solutions"
        ],
        "NumPy": [
          "Welcome to NumPy",
          "Introduction to NumPy",
          "NumPy Arrays",
          "Numpy Operations",
          "Numpy Indexing",
          "NumPy Review Exercise",
          "Numpy Exercise Solutions"
        ],
        "General Pandas Overview": [
          "Welcome to Pandas",
          "Introduction to Pandas",
          "Series",
          "DataFrames",
          "DataFrames Part Two",
          "DataFrames Part Three",
          "Missing Data",
          "Group By with Pandas",
          "Merging, Joining, and Concatenating DataFrames",
          "Pandas Common Operations",
          "Data Input and Output",
          "General Pandas Review Exercises",
          "General Pandas Exercise Solutions"
        ],
        "Visualization with Matplotlib and Pandas": [
          "Welcome to Visualization",
          "Introduction to Visualization in Python",
          "Matplotlib Basics - Part One",
          "Matplotlib Basics - Part Two",
          "Matplotlib Part Three",
          "Matplotlib Exercise",
          "Matplotlib Exercise Solutions",
          "Pandas Visualization Overview",
          "Pandas Time Series Visualization",
          "Pandas Visualization Exercise Overview",
          "Pandas Visualization Exercise Solutions"
        ],
        "Data Sources": [
          "Introduction to Data Sources",
          "Note on Pandas Datareader",
          "Pandas DataReader",
          "Quandl"
        ],
        "Pandas with Time Series Data": [
          "Welcome to Pandas for Time Series",
          "Introduction to Time Series with Pandas",
          "Datetime Index",
          "Time Resampling",
          "Time Shifts",
          "Pandas Rolling and Expanding"
        ],
        "Capstone Stock Market Analysis Project": [
          "Welcome to the Capstone Project!",
          "Stock Market Analysis Project",
          "Stock Market Analysis Project Solutions Part One",
          "Python Stock Market Analysis Solutions - Part Two",
          "Stock Market Analysis Project Solutions Part Three",
          "Stock Market Analysis Project Solutions Part Four"
        ],
        "Time Series Analysis": [
          "Welcome to Time Series Analysis",
          "Introduction to Time Series",
          "Time Series Basics",
          "Introduction to Statsmodels",
          "ETS Theory",
          "EWMA Theory",
          "EWMA Code Along",
          "ETS Code Along",
          "ARIMA Theory",
          "ACF and PACF",
          "ARIMA with Statsmodels",
          "Quick Note on Second Milk Difference!",
          "ARIMA Code Part Two",
          "ARIMA Code Part Three",
          "ARIMA Code Part Four",
          "Discussion on choosing PDQ"
        ]
      },
      "requirements": [
        "Some knowledge of programming (preferably Python)",
        "Ability to Download Anaconda (Python) to your computer",
        "Basic Statistics and Linear Algebra will be helpful"
      ],
      "description": "Welcome to Python for Financial Analysis and Algorithmic Trading! Are you interested in how people use Python to conduct rigorous financial analysis and pursue algorithmic trading, then this is the right course for you!\nThis course will guide you through everything you need to know to use Python for Finance and Algorithmic Trading! We'll start off by learning the fundamentals of Python, and then proceed to learn about the various core libraries used in the Py-Finance Ecosystem, including jupyter, numpy, pandas, matplotlib, statsmodels, zipline, Quantopian, and much more!\nWe'll cover the following topics used by financial professionals:\nPython Fundamentals\nNumPy for High Speed Numerical Processing\nPandas for Efficient Data Analysis\nMatplotlib for Data Visualization\nUsing pandas-datareader and Quandl for data ingestion\nPandas Time Series Analysis Techniques\nStock Returns Analysis\nCumulative Daily Returns\nVolatility and Securities Risk\nEWMA (Exponentially Weighted Moving Average)\nStatsmodels\nETS (Error-Trend-Seasonality)\nARIMA (Auto-regressive Integrated Moving Averages)\nAuto Correlation Plots and Partial Auto Correlation Plots\nSharpe Ratio\nPortfolio Allocation Optimization\nEfficient Frontier and Markowitz Optimization\nTypes of Funds\nOrder Books\nShort Selling\nCapital Asset Pricing Model\nStock Splits and Dividends\nEfficient Market Hypothesis\nAlgorithmic Trading with Quantopian\nFutures Trading",
      "target_audience": [
        "Someone familiar with Python who wants to learn about Financial Analysis!"
      ]
    },
    {
      "title": "Complete Python Bootcamp For Everyone From Zero to Hero 2025",
      "url": "https://www.udemy.com/course/python-foreveryone/",
      "bio": "Master Python Programming by building 100+ REAL PROJECTS . Learn OOP, Automation,GUI,REST and more to create your APPs.",
      "objectives": [
        "You will master the Python programming language by building 100+ projects.",
        "Be able to use Python programming for data scraping and automation",
        "Build GUIs and Desktop applications with Python programming",
        "Create a portfolio of real Python projects to apply for developer jobs",
        "You will learn Selenium, Beautiful Soup, Request, Flask, Pandas SQLite, MySQL, PostgreSQL, Seabon, and Matplotlib."
      ],
      "course_content": {},
      "requirements": [
        "No programming experience needed - you will learn everything you need to know.",
        "Access to a computer with an internet connection."
      ],
      "description": "Welcome to Complete Python Bootcamp for Everyone, the best and the most comprehensive Python course on the internet.\nAt 86+ hours, this Python course is without a doubt the most comprehensive and detailed Python course available anywhere online. If you are someone who has zero programming experience, this course will take you from beginner to professional.\nLearning Python is one of the fastest ways to improve your career prospects as it is one of the most in demand tech skills! This course will help you in better understanding every detail of Python programming and how these concepts are implemented in high level programming language.\nWe'll take you step-by-step through engaging video tutorials and teach you everything you need to succeed as a professional programmer.\nThe course has been updated to be 2023 ready and you'll be learning the latest tools and technologies used at large companies such as Apple, Google, Microsoft, Amazon and more.\nThis course explains everything in details with beautiful animated explanation videos and tens of real life projects which you will get to build. e.g. Ping Pong Game, Snake game, Blackjack , Form Filler and more.\nThe curriculum was developed based on my 10+ years programming experience over a period of 2 years.\nWe've taught over 100,000 students how to code and many have gone on to change their lives by becoming professional developers at top tech companies or starting their own tech startup.\nYou do not need to waste your money on expensive bootcamps out there, the course teaches the same curriculum with lifetime access.\nThe course is constantly updated with new content, with new projects and modules determined by students - it is a lifetime course.\nWe'll take you step-by-step through engaging video tutorials and teach you everything you need to know to succeed as a Python developer.\nThe course includes over 86+ hours of HD video tutorials and builds your programming knowledge while making real-world Python projects.\nThe course will guide you master Python Programming language from beginner to advanced\n\n\nThroughout this comprehensive course, we cover a massive amount of tools and technologies, including:\n\n\nPART 1 Getting Started With Python\n\nSection 1 - Why We Program?\nGetting Started with Python\nWhy Should You Learn to Write Programs?\nComputer Hardware Architecture\nInstalling Python on Mac\nInstalling Python on Windows\nLearning a New Language\nThe First Conversation with Python\nWhat is a Bug? What are the Types of Bug?\nWhat is Debugging?\nInterpreter and Compiler\nBug, Debugging and Error Types\nCode Editors and IDEs\nGetting Started with Code Editors\nIntroduction Quiz\nPrint Statement\nSolution to Print Statement Coding Exercise\nSection 2 - Variables, Expressions and Statements\nValues and Types\nVariables\nValues and Types Quiz\nVariables Quiz\nCoding Exercise Switch Values\nSwitch Values\nOperations and Expressions\nInput Function - Asking the User for Input\nCoding Exercise Input Function\nType Errors and Type Conversion\nComments in Python\nVariable Naming\nVariable Naming Quiz\nCoding Exercise - Data Types - Weeks in Years\nf Strings and Rounding Numbers\nMathematical Operations Quiz\nSection 3 - Real Python Projects ( Variable, Expressions and Statements)\nProject 1 Greeting\nProject 2 Band Name Generator\nProject 3 Gross Pay\nProject 4 Celsius to Fahrenheit\nProject 5 Trip Cost Calculator\nSection 4 - Conditional Execution\nBoolean Expressions\nConditional Execution (IF)\nCoding Exercise - Even or Odd\nNested Conditionals\nChained Conditionals (IF/ELIF/ELSE)\nBody Mass Index (BMI) Calculator\nMultiple IF Statements\nCoding Exercise - Burger Order\nLogical Operators\nTry and Except\nConditional Execution\nSection 5 - Real Python Projects ( Conditional Execution)\nProject 6 - Gross Pay with Overtime\nProject 7 - Leap Year\nProject 8 - Love Calculator\nProject 9 - Gross Program using Try and Except\nProject 10 - Score Checker\nSection 6 - Python Functions\nFunction Calls and Built in Functions - Type and Math Functions\nBuilt in Functions\nWhat is a Module? - Python Math Module\nModule Quiz\nCoding Exercise - Area of Circle\nCoding Exercise - Factorial\nRandomisation in Python\nCoding Exercise -Random - Coin Toss\nCreating New Functions - User Defined Functions\nIndentation in Python\nIndentation Quiz\nFunctions in Practice\nFunction with Inputs - Parameters and Arguments\nCoding Exercise - Area of Square\nCoding Exercise - Volume Converter\nPositional and Keyword Arguments\nCoding Exercise - Painting the Wall\nFunctions with Outputs\nCoding Exercise - Concatenate\nMultiple Returns\nPassword Controller\nSolution to Password Controller\nDocstrings\nPrint or Return?\nWhy Functions?\nSection 7 - Real Python Projects (Python Functions)\nProject 11 - Leap Year with Function\nProject 12 - Gross Pay with Functions\nProject 13 - Cold, Warm and Hot\nProject 14 - Maximum of Three Numbers\nSection 8 - Iteration (Lists)\nUnderstanding the Lists\nFor Loop\nUpdating Variables\nCoding Exercise - Highest Score\nCoding Exercise - Find Integer Numbers\nCoding Exercise - Sum of Above Average Scores\nLoop Over Custom Function\nUsing range() Function with For Loop\nCoding Exercise - Adding Odd Numbers\nCoding Exercise - Adding Even Numbers in ANY Range\nFor Loop in Practice\nWhile Loop\nWhile Loop in Practice - Hurdle 2\nFinishing iterations with CONTINUE and BREAK\nFactorial using Loop\nMaximum and Minimum of Input Numbers\nSection 9 - Real Python Projects (Iteration)\nProject 15 - Dice Rolling Simulator\nProject 16 - Fizz Buzz Game\nProject 17 - Guessing the Number\nProject 18 - Password Generator\nProject 19 - Rock, Paper and Scissors\n\n\nPART 2 Python Data Structures\n\n\nSection 10 - Introduction to Data Structures\nWhat is a Data Structure?\nWhat is an Algorithm?\nWhy are Data Structures and Algorithms important?\nTypes of Data Structures\nSection 11 - Strings\nWhat is a String?\nCoding Exercise - Sum of Digits of 2 Digit Number\nString Traversal\nCoding Exercise - Backward Traversal\nCoding Exercise - Sum of Digits\nCoding Exercise - Count Characters in a String\nString Operations\nCoding Exercise - First and Last 2 Characters\nString Methods\nCoding Exercise - Replace Character in a String\nString Methods Quiz\nParsing Strings\nEscape Sequence\nString Formatting\nCoding Exercise - Format a String\nCoding Exercise - Print Pattern\nProject 20 - String Formatting\nSection 12 - More on Python Lists\nMore on Lists\nCoding Exercise - Square Of Items\nIndex Out Of Range\nList Operations\nIndex Quiz\nCoding Exercise - Reverse a List using Slice Operator\nList Methods Practice\nCoding Exercise - Update the First Occurrence\nCoding Exercise -First and Last Characters\nList and Functions\nCoding Exercise - Create a List from Two Lists\nCoding Exercise - Remove and Add\nCoding Exercise - Three Equal Chunks\nStrings and Lists\nCoding Exercise - Format List\nNested List\nCoding Exercise - Add Item in Nested List\nCoding Exercise - Extend Nested List\nObjects and Values\nCoding Exercise - List Addition with Function\nCoding Exercise - Concatenate Two Lists in One List Item Wise\nSection 13 - Real Python Projects (List)\nProject 21 - Bill Roulette\nProject 22 - Find the Gold\nProject 23 - Escaping the Maze (From Previous Section)\nProject 24 - Cryptography with Python Caesar Cipher\nHow to Encrypt Data?\nDebugging Encrypt Function\nHow to Decrypt Data?\nDebugging Decrypt Function\nPutting Encrypt and Decrypt Together\nCode Optimization\nProject 25 - Practice What We Learned\nDividing the Program into Steps\nProject 26 - Putting Everything Together (Hangman)\nSection 14 - Dictionaries\nWhat is a Dictionary?\nCreating Dictionary and Accessing Dictionary Elements\nInsert/Update an Element in Dictionary\nCoding Exercise - Generate Dictionary\nTraverse / Search for Element in Dictionary\nCoding Exercise - Multiply Dictionary Items\nCoding Exercise - Student Grades\nRemove Elements from Dictionary\nCoding Exercise - Rename Key\nIN / NOT IN Operators with Dictionary\nCoding Exercise - Count Characters in a Word\nNested Dictionaries\nHandling Missing Keys in Dictionary - get() and setdefault() methods\nKeys in Dictionary - fromkeys() and keys() methods\nCoding Exercise - Group Value Types\nDictionary items() Method\nCoding Exercise - Length of Dictionary Values\nDictionary update() Method\nCoding Exercise - Concatenate Three Dictionaries\nDictionary values() Method\nCoding Exercise - Remove Empty Items\nReference to Dictionary - copy() Method\nCoding Exercise - Merge Two Dictionary\nDeep Copy\nCoding Exercise - Custom Deep Copy for List Values\nDictionary Operations and built in Python Functions\nDictionary vs List\nDictionary Quiz\nSection 15 - Real Projects (Dictionary)\nProject 27 - Calculate Total Price\nProject 28 - Blind Auction Program\nProject 29 - Quiz APP\nSection 16 - Tuples\nWhat is a Tuple?\nWhy Tuples?\nUnpacking Tuples\nCoding Exercise Sum Tuple Elements using Unpack\nTraverse Tuple - Enumerate()\nCoding Exercise Even Index with Enumerate\nSearching in Tuple\nTuple Operations / Functions\nCoding Exercise Find Most Frequent Item\nNested Tuples\nNested Tuple Indexing\nTuple vs List\nCoding Exercise Convert Tuple to Dictionary\nTuple Quiz\nProject 30 - English to Pig Latin\nProject 31 - Music APP\n\n\nSection 17 - Sets\nWhat is Set? Set Terminology\nSets in Python\nSet Membership\nAdding Members to Set\nCoding Exercise Adding Members from List\nCoding Exercise Remove Duplicates\nDeleting Items from Set\nDelete Restricted Items Using Remove Method\nUnion Set\nCoding Exercise Combine Sets\nCoding Exercise Union List of Sets\nSet Intersection\nSet Subtraction\nSet Symmetric Difference\nModifying Sets\nSubsets and Supersets\n\n\nSection 18 - Real Projects (Sets)\nProject 32 - Powerball Lottery\nSection 19 - Data Structures and Algorithms in Python\nPython Programming Data Structures\nPython Programming Algorithms\n\n\nPART 3 Recursion, Regular Expressions, Files and OOP\n\n\nSection 20 - Recursion\nWhat is Recursion?\nWhy do we need Recursion?\nThe Logic Behind Recursion\nRecursive vs Iterative Solution\nHow to write a recursive solution in steps?\nFibonacci Numbers using Recursion\nCoding Exercise 'a' to the power 'b' - using Recursion\nSection 21 - Project 33 - Flooder Game\nbext Module in Python\nSection 22 - Scope in Python\nGlobal vs Local Scope\nBlock Scope in Python\nModify Global Variable\nPython Constants and Global Scope\nScope Quiz\nProject 34 - BlackJack - Practice What we have learnt\nSection 23 - Debugging - Find and Fix Programming Errors\nIdentify the Problem (Error)\nReproduce the Bug\nAnalyse Each Line\nFix Errors - IDE Messages\nUsing print() in Debugging\nDebugger Tools\nError Types - Syntax Errors\nRuntime Errors\nLogical Errors\nHandling the Errors\nRaise Your Own Exceptions\nHandling Exceptions\nSection 24 - Regular expressions\nWhat is Regular Expression?\nMetacharacters\nGroups and Alteration\nRepetition in Regular Expression Patterns ( ?, *,)\nGreedy and Non Greedy Matches\nCharacter Classes\nCustom Character Classes\nCaret, Dollar and Dot / Dot-Star\nAnchors\nGrouping Constructs\nRegex Matching with Flags\nre Searching Functions\nre Substitution Functions\nre Utility Functions\nProject 35 - Phone and Email Scraper\nSection 25 - Local Development Environment - Installing PyCharm\nSteps for setting up Local Development Environment\nDownload PyCharm (Windows/Mac)\nInstall PyCharm on Mac\nInstall PyCharm on Windows\nCommon Features of PyCharm\nProject 36 - Strong Password Detection using Local Development Environment\nSection 26 - Files and Directories\nFile Systems\nTerminal on Mac and Command Prompt Windows\nRelative and Absolute File Paths\nQuiz Paths\nNavigate the File System with OS Module\nGet File Details with OS Module\nList All Files in Directory Recursively\nFilename Matching with glob Module\nPython's New Pathlib Module\nOperating System Differences\nFind Last Modified File using Pathlib\nFile System Modules (os, glob, pathlib)\nProject 38 - Display a Directory Tree\nProject 39 - Rename all Files in a Directory TODO\nOpen and Read Files Text Files\nFile Cursor, Read Line and Read Lines\nSearching Through a File\nReading File Challenge / Exercise\nParsing Text File\nFile Modes\nWriting to Files\nPrinting a Text to Files\nTime Table Exercise - (File Writing)\nWhat is a Binary File?\nWriting and Reading to Binary File\nShelve Module\nData Manipulation with Shelve\nMoving and Copying Files\nDeleting Files\nProject 40 - Quiz using Files\nSection 27 - Object Oriented Programming - OOP\nWhat is OOP? Why we need it?\nObject Oriented Thinking\nOOP Concepts Classes, Objects, Attributes and Mehtods\nConstructing Objects - Accessing Attributes and Methods\nBlackJack OOP\nClasses - Create Your Own Class\nClass Attributes\nClass Methods\nChecking Instance Types\nEncapsulation\nGetters and Setters\nInheritance\nInheritance with Parameters\nInheritance Challenge\nOverriding Methods\nProject 41 - Bike Rental System using OOP\ndatetime Module in Python\n\n\nPART 4 PYTHON AUTOMATION - Automate Daily ROUTINE TASKS\n\n\nSection 28 - Excel Automation - Openpyxl Library\nIntroduction - Advantages and Use Cases of Openpyxl\nReading Excel Spreadsheets\nIterating Through Excel\nColumns, Rows and Cells\nManipulate Excel Data\nProject 42 - Automate Daily Routine Excel Task\nCreate Spreadsheet, Sheets and Update Cells\nManage Rows and Columns\nGenerate Random Excel Data - Challenge\nExcel Formulas\nCell Styles\nConditional Formatting\nCharts\nLine Charts - Coding Challenge\nProject 43 - Transpose Excel File from Rows to Columns\nSection 29 - PDF Automation\nExtract PDF Metadata and Text\nCreate, Merge and Copy PDFs\nSplit, Rotate and Overlay\nDecrypt and Encrypt\nProject 44 - Combine Specific Pages (add cover page) to PDF\nSection 30 - Web Scraping with Beautiful Soup\nWhat is Web Scraping?\nBasic HTML Skills\nParsing HTML with Beautiful Soup\nFind and Select Specific Elements\nSteps for Web Scraping a Real Website\nDo All Websites Allow Web Scraping?\nProject 45 - Beautiful Soap - Airpods rating on Amazon\nSection 31 - Selenium Library - Python BOTs\nWhy Selenium?\nSetup Selenium\nHow Select Elements in Website\nScrap Data using Selenium\nHow to Clicking Buttons and Filling Text Fields\nSending Special Keys and Browser Buttons\nProject 46 - Selenium - Follow on Instagram\nSection 32 - GUI Automation\nWhat is GUI Automation? Installing PYAUTOGUI Module\nMouse Movement\nMouse Interaction\nMouse Drag - Challenge\nScreenshot and Image Recognition\nControlling the Keyboard and Show Messages\nProject 47 - GUI Automation - Looking Busy\nProject 48 - Form Filler\nSection 33 - Working with CSV Data - The Pandas\nReading CSV\nData Types and Basic Statistics\nPandas Data Structures - Series\nAccessing Series Elements\nPandas Data Structures - DataFrame\nAccessing DataFrame\nQuery Dataset\nGroup and Aggregate the Data\nWrite to CSV\n\n\nPART 5 - Graphical User Interface (GUI) in Python\n\n\nSection 34 - Turtle Module\nIntroduction to Turtle Graphics\nMove Turtle\nDraw Shape - Challenge\nDrawing and Filling Present Shapes\nDrawing Polygons\nDraw Dashed Shapes\nRGB Color - Generate Random Color\nScreen and Turtle Properties\nMove Random Directions - Challenge\nHow to Create Games with Turtle\nWrite Method - Default Values for Function Arguments\nProject 49 - Draw Panda\nProject 50 - Draw National Flag of India\nProject 51 - Draw National Flag of Your COUNTRY\nProject 52 - Schengen Countries\nProject 53 - Turtle Race\nProject 54 - Snake Game using OOP\nSection 35 - Tkinter Module\nIntroduction to Tkinter\nCreating and Configuring Widgets\nUnlimited Positional and Keyword Arguments (*args and **kwargs)\nWidget Placement - Geometry Managers\nHandling Events\nLabel Widget\nButton Widget\nCheck and Radio Buttons\nEntry Widget\nCombobox and Spinbox\nProgress Bar and Scale\nOrganize Widgets with Frame\nFrame Widget\nTop Level Window Widget\nPaned Window Widget\nNotebook Widget - Tabs\nProject 55 - Feedback Form\nProject 56 - Pomodoro App\nProject 57 - Text Editor\n\n\nPART 6 - Working with Databases in Python\n\n\nSection 37 - Introduction to Databases\nSection 38 - Using SQLite in Python\nSection 39 - Project 58 - Password Manager using SQLite\nSection 40 - SQLAlchemy Core\nSection 41 - Project 59 -  Password Manager using SQLAlchemy Core\nSection 42 - SQLAlchemy ORM\nSection 43 - Project 60 -  Password Manager using SQLAlchemy ORM\nSection 44 -  Using MySQL in Python\nSection 45 - Project 61 Employee Management System using MySQL\nSection 46 -  Using PostgreSQL in Python\nSection 47 -  Project 62 - HCM using PostgreSQL\n\n\nPART 7 - Advanced Python\n\n\nSection 48 - List Comprehension\nSection 49 - Project 63 - NATO Phonetic Alphabet\nSection 50 - Lambda Functions\nSection 51 - Generators\nSection 52 - Decorators\nSection 53 - Project 64 - Cache Fibonacci Series\nSection 54 - Applications Programming Interfaces (APIs)\nSection 55 - Project 65 - Random Joke Generator API\nSection 56 - Project 66 - International Space Station Location API\nSection 57 - Web Services - RESTful APIs with Flask\n\n\nSection 58 - Data Analyses and Visualization\nMatplotlib\nSeaborn\nSection 59 - Real Projects\nProject 66 - 100\n\n\n\n\nSign up today, and look forward to:\n\n\nVideo Lectures\nLecture Slides\nCode Challenges and Exercises\nReal Life Projects\nQuizzes\nProgramming Resources and Notes\nDownloads\n\n\nDon not just take my word for it, check out what existing students have to say about my courses:\n\n\n\"Great explaining and has a ton of exercises, and he is updating it till this day. He codes a lot in the course, and he is fast at it, so for people looking for a fast paced course, this is a great option!.\" - Hyper O.\n\n\n\"The teacher is great! he explains everything in full details especially with real life examples. he uses the right algorithm in making his teaching methods effective so students don't get bored and sleepy.\" - Precious Ogbonna Nwakama\n\n\n\"Nicely explained with graphics for non non programmers. Thank you. Amazingly simple to understand. Best wishes to the instructor.\" - Shahnawaz Ayon\n\n\n\"- Amazing Explanation\n-The guy explains everything.\n-He explains with diagrams. Then with algorithm. Then with code.\n-This three times explanation makes the topics very retentive for a learner.\n.\" - Abinash Dash\n\n\n\"Thats how a course should be! Excellent explanation and lot of coding excercises to practice.\nI read some comments on the accent of the trainer being not so good and all, but its very clear in fact!\nAm excited for the next sections...\n.\" - Siddhesh Sule\n\n\n\"Excellent course for those looking to understand data structures and algorithms from beginner to advanced level. The theoretical explanations are well done, along with concrete real life examples. All data structures and algorithms described and then implemented, which makes the concepts easier to understand and gives you a chance to apply them in a real practice. The top tech's interview questions and answers sections are excellent bonus which allow for preparing real interviews.\"\n- Johanna David\n\n\nSo what are you waiting for? Click the buy now button and join the world's best and most comprehensive development course.",
      "target_audience": [
        "If you want to learn Python from scratch through building fun and useful projects, then take this course.",
        "If you want to start your own startup by building your own apps.",
        "If you are an experienced programmer wanting to switch to Python then this is the quickest way through real coding projects.",
        "If you are an intermediate Python programmer this course will help you to level up."
      ]
    },
    {
      "title": "Java/Apache Maven: Stop Building Java Programs the Hard Way!",
      "url": "https://www.udemy.com/course/apachemaven/",
      "bio": "Apache Maven: Secrets of Building and Managing Java and Java Spring Projects. Learn to use the Java Build Tool.",
      "objectives": [
        "Set up your development environment for Java and Maven",
        "Use Maven in 'Real World' Scenarios",
        "Gain the knowledge of Maven Fundermentals and how to apply them",
        "Learn about Maven Plugins and how to effectively use them!",
        "Learn about the Maven LifeCycles",
        "Learn how to Customise the Maven LifeCycles to suit your needs!",
        "Learn about Transitive Dependencies and how they are resolved!",
        "Learn how to build and deploy a Java console application as a stand alone executable jar",
        "Learn how to build and deploy a Java Web application that uses the Spring MVC framework"
      ],
      "course_content": {
        "WELCOME": [
          "Introduction to Maven Course 101",
          "Objectives of Apache Maven"
        ],
        "GETTING STARTED": [
          "Suggested Course Environment",
          "How to Installing & Set-Up Apache Maven",
          "Setting-Up Maven with Eclipse IDE",
          "Setting Up Development Environment for the Course"
        ],
        "Some additional detail on Setting up Apache Tomcat": [
          "How to Install and set up Apache Tomcat 7",
          "Setting Up Apache Tomcat 7 with Eclipse IDE"
        ],
        "JUST ENOUGH MAVEN...": [
          "Just Enough Maven for our 1st Practical",
          "Creating our 1st Maven Project",
          "Discover the Standard Maven Directory Layout",
          "Discover How to Import a Java Maven Project into the Eclipse IDE",
          "Create a New Maven Project in the Eclipse IDE",
          "Import a Java Maven Project into Eclipse IDE from GitHub"
        ],
        "Introduction to the POM or Project Object Model": [
          "Introducing the POM",
          "POM packaging Types"
        ],
        "LIFECYCLES": [
          "Introduction to Life-Cycles",
          "\"Default\" Life-Cycle"
        ],
        "PLUGINS": [
          "Introduction to Plugins",
          "Plugin Configuration",
          "Javadoc Plugin",
          "Surefire Plugin"
        ],
        "Phases": [
          "Goals with LifeCycles",
          "Site Life-Cycle"
        ],
        "CUSTOMISING THE LIFECYCLES": [
          "Customising a Life-Cycle - Part 1",
          "Customising a Life-Cycle - Part 2",
          "Customising a Life-Cycle - Part 3"
        ],
        "TRANSITIVE DEPENDENCIES": [
          "Introduction to Dependencies",
          "Overview of the Sample Web Application",
          "Overview of the Sample Web Application POM",
          "Transitive Dependencies"
        ]
      },
      "requirements": [
        "Some knowledge of Java",
        "Eclipse IDE is used so some knowledge of it or different IDE would be useful"
      ],
      "description": "***NOW UPDATE in 2019!!***\nFor Java, why do we need a Build Tool like Maven, when we have an Integrated Development Environment (IDE) ?\nDoing a Java build in an IDE is OK “Only” when it’s a simple project, for a single developer but once you go beyond that things start getting complicated and you'll need a build tool, such as Maven.\nWith complicated Java and Spring Framework projects you need to think about many more things. For example; other project dependencies, sharing code, version control etc...\nThis Maven Course, is an introduction to the widely used Java Build Automation Tool - Apache Maven and is completely hands-on. The course is easy to follow and uses Maven from both the command line and through an Integrated Development Environment (IDE).\nYou will learn how to install and set up the environment correctly, so you can use Maven from the command line and from the Eclipse IDE.\nLearn how to use Maven in 'Real World Java' scenarios, so you can apply your new knowledge in 'Real World Java' projects, straight away!\nUsing examples you will learn about the Maven Repository, Plugins, LifeCycles, Customizing the LifeCycles and Transitive Dependencies. How to make the most of the Eclipse IDE and its m2Eclipse plugin to view and resolve project dependencies.\nYou will be up and running with Maven in only 4 hours!!",
      "target_audience": [
        "Java developers",
        "Anyone who wishes to professionally build and deploy their Java Applications",
        "new Java developers"
      ]
    },
    {
      "title": "OutSystems Reactive for Beginners",
      "url": "https://www.udemy.com/course/outsystems-reactive-web-for-beginners/",
      "bio": "The Beginning of your OutSystems Journey",
      "objectives": [
        "What is OutSystems and the OutSystems Community",
        "How to create an OutSystems web application from data modeling to screens implementation",
        "Low Code Application Development",
        "How to create an application in Reactive Web",
        "How to debug and monitor using the platform tools"
      ],
      "course_content": {},
      "requirements": [
        "Knowledge of relational databases and basic programming concepts are recommended."
      ],
      "description": "Learn what is OutSystems and how easy and fast you can create your first application using the most complete low-code platform on the market. With this course, you will create a simple application with OutSystems Reactive Web to manage your expenses and bank transactions, going from data model definition to application screens and also learning how you can debug and monitor your application using the platform tools.",
      "target_audience": [
        "Web developers that want to learn what OutSystems has to offer, focus on the newest version of the Platform with the reactive web development approach."
      ]
    },
    {
      "title": "Kotlin for Beginners: Learn Programming With Kotlin",
      "url": "https://www.udemy.com/course/kotlin-course/",
      "bio": "Learn Kotlin from scratch! Grasp object-orientation and idiomatic Kotlin to realize coding projects and Android apps!",
      "objectives": [
        "Create professional applications using Kotlin, the new Java-based programming language developed by Jetbrains",
        "Understand the concepts of the Kotlin language and how it integrates neatly with Java",
        "Understand the basics of object-oriented software development, the most important development paradigm",
        "Understand the principles behind other object-oriented languages like Java, C++, PHP, C#, Scala, or Swift",
        "Use Intellij, the popular Java (and Kotlin) IDE, to write code effectively and professionally",
        "Read code and write your Kotlin code as well"
      ],
      "course_content": {
        "Welcome!": [
          "Introduction (What You're Going To Get Out Of This Course!)",
          "How To Make The Most Of This Course"
        ],
        "What is Kotlin?": [
          "A Brief Overview",
          "Try It Out In 30 Seconds!"
        ],
        "Getting the Tools": [
          "Downloading the JDK",
          "Downloading IntelliJ",
          "Setting up IntelliJ"
        ],
        "Getting Started With Kotlin!": [
          "Using Kotlin Interactively in REPL",
          "Variables",
          "Variables",
          "Primitive Types & Strings",
          "Variables and Data Types",
          "Expressions vs. Statements",
          "Expressions vs. Statements",
          "Nullable Variables",
          "Nullables",
          "Your First Stand-Alone App"
        ],
        "Conditional Statements": [
          "Conditional Statements Using \"if\"",
          "if Statements",
          "Conditional Statements Using \"when\"",
          "when Statements",
          "When to Use \"if\" vs \"when\"",
          "Conditional Statements Using \"if\" and \"when\"",
          "Conditional Expressions",
          "More Advanced \"when\" Constructs",
          "Advanced Conditionals",
          "Coding Challenge: Conditionals"
        ],
        "Arrays and Lists": [
          "Arrays vs. Lists",
          "Arrays in Kotlin",
          "Lists in Kotlin",
          "Arrays and Lists in Kotlin"
        ],
        "Lucky Loop": [
          "\"for\" Loops",
          "\"while\" Loops",
          "Loops Using \"for\" and \"while\"",
          "Using \"break\" and \"continue\" Statements",
          "Naming loops",
          "Using break, continue and return",
          "Coding Challenge: Using Loops"
        ],
        "Congrats Novice!": [
          "Congratulations!",
          "All The Basics (Recap What You've Learned!)",
          "Coding Challenge: Loops, Lists and Conditionals"
        ],
        "Functions": [
          "Functions",
          "Functions",
          "Code Along: Reversing A List"
        ],
        "Object-Oriented Programming -- Part I": [
          "Starting with Object-Orientation",
          "The Basics of Object-Orientation",
          "Your First Class",
          "Methods",
          "Properties and Methods",
          "Constructors",
          "Object Creation",
          "Coding Challenge: Classes",
          "Named Parameters & Default Values",
          "Named Parameters & Default Values",
          "Open Classes and Inheritance",
          "Open Classes and Inheritance",
          "Abstract Classes",
          "Abstract Classes",
          "Open vs. Abstract",
          "Open vs. Abstract",
          "Interfaces",
          "Interfaces",
          "Object-Orientation - Part I"
        ]
      },
      "requirements": [
        "We will go through all setup you need in order to use Kotlin",
        "You must be able to install new software on your computer (JDK + IntelliJ), we will go through the actual process inside the course."
      ],
      "description": ">> This is the only Udemy course that is referenced from the official Kotlin website as well as the official Android developers website for people who want to learn Kotlin, whether for Android or other purposes!\n>> Learn programming in Kotlin, the most beautiful modern programming language based on Java!\n\n>> Join this beginner-friendly course to learn to write code with an awesome and easy-to-learn language!\n>> Expand your expertise as a Java or Android Developer and improve the quality of your code!\n>> I'll answer every question you have, help you personally if you get stuck and listen to your feedback! Join 15,000+ happy students of mine on Udemy!\nThis course will teach you programming in Kotlin! We begin with the basics so this course is completely suitable for beginners. You will put what you learn into practice in several coding challenges. So at the end, you'll be able to create your own applications in Kotlin.\nIf you're an Android developer, you can use this course to get up to speed with this awesome language. Kotlin will allow you to maintain a cleaner and more expressive code base, use concepts that go beyond even Java 8, and write more robust apps for Android.\n\n\n\nTopics covered include:\nVariables & nullable types (null safety)\nConditionals: if and when\nLoops: for and while\nFunctions\nObject orientation: classes, objects, interfaces, inheritance etc.\nData classes (a handy feature in Kotlin)\nUPDATE: more object-orientation + binary and hexadecimal numbers\nUPDATE: the information hiding principle + generics\n\n\nThis course also covers object-orientation, the major development paradigm you need to grasp in today's world. But we will also look at functional programming concepts that will make your life much easier.\nOnce you understand these, you will also be able to understand other object-oriented languages, including Java, PHP, C++, C#, Scala, or Swift. They all use this same basic paradigms.\n\n\nSo get in now to help shape this course and become part of the community inside!",
      "target_audience": [
        "You do not need programming skills, we will start from scratch and slowly make our way to intermediate and more advanced topics",
        "You should be excited to learn an awesome new programming language!",
        "You will need basic skills in handling a PC, so you should know how to install and run applications on your computer.",
        "Android developers who want to get started with Kotlin"
      ]
    },
    {
      "title": "Rust: The Complete Developer's Guide",
      "url": "https://www.udemy.com/course/rust-the-complete-developers-guide/",
      "bio": "Become a Rust engineer. Understand ownership, lifetimes, traits, generics, and much more through practical projects",
      "objectives": [
        "Master Rust's unique ownership system and borrowing rules for efficient memory management",
        "Understand and implement Rust's powerful enum types and pattern matching",
        "Develop proficiency in creating and organizing Rust projects using modules",
        "Learn to handle errors effectively using the Result type and various error-handling techniques",
        "Gain expertise in working with Rust's iterator system for efficient data processing",
        "Explore advanced lifetime concepts to manage complex memory relationships",
        "Implement generic types and traits to write flexible, reusable code",
        "Understand the differences between various Rust data structures like arrays, vectors, and slices",
        "Learn to work with external crates to extend your Rust programs' functionality",
        "Develop practical skills through hands-on projects and exercises, including file I/O operations"
      ],
      "course_content": {
        "Foundations of Rust: Setup and First Steps": [
          "Introduction",
          "Rust Installation",
          "Local Rust Install",
          "Creating and Running Rust Projects",
          "Disabling Inlay Type Hints",
          "Course Resources"
        ],
        "Core Concepts: The Building Blocks of Rust": [
          "Representing Data with Structs",
          "Adding Functionality to Structs",
          "Arrays vs Vectors",
          "Mutable vs Immutable Bindings",
          "Implementations and Methods",
          "Implicit Returns",
          "Installing External Crates",
          "Using Code from Crates",
          "Shuffling a Slice",
          "Splitting a Vector",
          "Project Review",
          "A Taste of Rust"
        ],
        "Ownership and Borrowing: Rust's Unique Memory System": [
          "Project Overview",
          "Defining Structs",
          "Adding Inherent Implementations",
          "A Mysterious Error",
          "Unexpected Value Updates",
          "The Goal of Ownership and Borrowing",
          "The Basics of Ownership",
          "Owning and Moving Values",
          "Visualizing Ownership and Moves",
          "More on Owning and Moving",
          "Exercise Overview",
          "Exercise Solution",
          "Another Quick Exercise",
          "A Quick Exercise Solution",
          "Writing Useful Code with Ownership",
          "Working Around Ownership",
          "Introducing the Borrow System",
          "Immutable References",
          "Working with References",
          "Exercise On References",
          "References Exercise Solution",
          "Mutable References",
          "Handling Mutable References",
          "Exercise on Mutable Refs",
          "Solution on Mutable Refs",
          "Copy-able Values",
          "Understanding Copies vs Moves"
        ],
        "Lifetimes Explored: Understanding Memory Management": [
          "Basics of Lifetimes",
          "Lifetimes",
          "Deciding on Argument Types",
          "Back to the Bank Impl",
          "Implementing Deposits and Withdrawals",
          "Accounts and Bank Implementation",
          "Project Wrapup"
        ],
        "Enums Unleashed: Pattern Matching and Options": [
          "Project Overview",
          "Defining Enums",
          "Declaring Enum Values",
          "Adding Implementations to Enums",
          "Pattern Matching with Enums",
          "When to Use Structs vs Enums",
          "Adding Catalog Items",
          "Unlabeled Fields",
          "Enums",
          "The Option Enum",
          "Option From Another Perspective",
          "Replacing Our Custom Enum with Option",
          "Other Ways of Handling Options",
          "The Option Enum",
          "Excercise Overview",
          "Exercise Solution"
        ],
        "Project Architecture: Mastering Modules in Rust": [
          "Modules Overview",
          "Rules of Modules",
          "Refactoring with Multiple Modules"
        ],
        "Handling the Unexpected: Errors and Results": [
          "Project Overview",
          "Reading a File",
          "The Result Enum",
          "The Result Enum in Action",
          "Types of Errors",
          "Matching on Results",
          "Empty OK Variants",
          "Exercise Around the Result Enum",
          "Exercise Solution",
          "Using a Result When Reading Files",
          "Tricky Strings",
          "The Stack and Heap",
          "Strings, String Refs, and String Slices",
          "When to Use Which String",
          "Strings",
          "Finding Error Logs",
          "Understanding the Issue",
          "Fixing Errors Around String Slices",
          "Writing Data to a File",
          "Alternatives to Nested Matches",
          "The Try Operator",
          "When to Use Each Technique"
        ],
        "Iterator Deep Dive: Efficient Data Processing": [
          "Project Overview",
          "Basics of Iterators",
          "Using For Loops with Iterators",
          "Iterator Consumers",
          "Iterator Adaptors",
          "Vector Slices",
          "Reminder on Ownership and Borrowing",
          "Iterators with Mutable Refs",
          "Mutable Vector Slices",
          "Collecting Elements from an Iterator",
          "How Collect Works",
          "Moving Ownership With Into_Iter",
          "Inner Maps",
          "Reminder on Lifetimes",
          "Iterators Wrapup",
          "Collect Excercise",
          "Exercise Solution",
          "The Filter Method",
          "Filter Solution"
        ],
        "Advanced Lifetimes: Mastering Rust's Memory Model": [
          "Lifetime Annotations",
          "A Missing Annotation",
          "A Review of Borrowing Rules",
          "What Lifetime Annotation Are All About",
          "Common Questions Around Lifetimes",
          "Lifetime Elision",
          "Common Lifetimes"
        ],
        "Generics and Traits: Writing Flexible, Reusable Code": [
          "Project Setup",
          "Issues with Number Types",
          "The Basics of Generics",
          "Trait Bounds",
          "Multiple Generic Types",
          "Super Solve Flexibility",
          "App Overview",
          "Building the Basket",
          "Generic Structs",
          "More on Generic Structs",
          "Implementing a trait",
          "Generic Trait Bounds (Final Lecture)"
        ]
      },
      "requirements": [
        "Experience in another programming language, such as Javascript, Python, Go, or similar"
      ],
      "description": "Welcome to the most comprehensive and hands-on course for learning Rust from the ground up!\nRust is revolutionizing systems programming with its focus on memory safety, concurrency, and performance. But with its unique concepts and syntax, many find Rust challenging to learn. That's where this course comes in – providing you with a clear, structured path to Rust mastery.\nWhat sets this course apart? We focus on building a rock-solid foundation in Rust's core concepts. No fluff, no skipping steps – just pure, essential Rust knowledge that will set you up for success in any Rust project.\n\n\nRust's most challenging concepts are covered:\nRust's ownership model? Explained in great detail!\nLifetimes and borrowing? Its here!\nTraits and generics? You'll use them to write flexible code\n\n\nThis course is designed for developers who want to truly understand Rust, not just copy-paste code. Whether you're coming from Javascript, Python, or any other language, you'll find a welcoming introduction to Rust's unique paradigms.\n\n\nRust has been voted the \"most loved programming language\" in the Stack Overflow Developer Survey for seven consecutive years. It's not just hype – major companies like Microsoft, Google, and Amazon are increasingly adopting Rust for critical systems. By mastering Rust, you're not just learning a language; you're future-proofing your career.\n\n\nHere's a (partial) list of what you'll learn:\nDive deep into Rust's type system and how it ensures memory safety\nMaster pattern matching and destructuring for elegant, expressive code\nHarness the power of Rust's error handling with Result and Option types\nExplore Rust's module system to organize and scale your projects\nImplement common data structures and algorithms the Rust way\nUse cargo to manage dependencies and build your projects with ease\nA solid grasp of Rust's syntax and core concepts\nThe ability to write safe, efficient, and idiomatic Rust code\nConfidence to tackle real-world Rust projects and contribute to the ecosystem\nA deep and fundamental understanding of error handling\nThe skills to optimize code for performance and memory usage\nAnd much more!\n\n\nHow This Course Works:\nThis isn't just another \"follow along\" coding course. We've structured the learning experience to ensure you truly internalize Rust's concepts:\nConcept Introduction: Clear, concise explanations of each Rust feature\nLive Coding: Watch as we implement concepts in real-time, explaining our thought process\nChallenges: Test your understanding with carefully crafted coding exercises\nProject Work: Apply your skills to build progressively complex projects\nBest Practices: Learn idiomatic Rust and industry-standard coding patterns\n\n\nThis is the course I wish I had when I was learning Rust. A course that focuses on the hardest parts, gives clear explanations, and discusses the pros and cons of different design options. Sign up today and join me in mastering Rust!",
      "target_audience": [
        "Engineers looking to learn the basics of Rust"
      ]
    },
    {
      "title": "Complete Guide to Protocol Buffers 3 [Java, Golang, Python]",
      "url": "https://www.udemy.com/course/protocol-buffers/",
      "bio": "Google Protobuf with examples and exercises. Code in Java Go Python. Say Goodbye to JSON & XML. Pre-req to gRPC",
      "objectives": [
        "Write simple and complex .proto files",
        "Practice Exercises to Confirm the Learnings",
        "Leverage Imports and Packages appropriately",
        "Generate Code using `protoc` in any language",
        "Code in Java with Protocol Buffers",
        "Understand how Data Evolution works for Protobuf",
        "Learn about advanced Protocol Buffers concepts"
      ],
      "course_content": {
        "Course Introduction": [
          "Why Protocol Buffers?",
          "How are Protocol Buffers used?",
          "Course Structure",
          "About your instructor",
          "Important Message"
        ],
        "Code Download & VSCode Setup": [
          "Code Download",
          "VSCode Setup (optional)"
        ],
        "Protocol Buffers Basics I": [
          "First Message",
          "Defaults",
          "Scalar Types",
          "Tags",
          "Repeated Fields",
          "Enumerations (Enums)",
          "Comments",
          "Practice Exercises I",
          "Solution to Practice Exercises I"
        ],
        "Protocol Buffers Basics II": [
          "Defining Multiple Messages in the Same File",
          "Nesting Messages",
          "Imports",
          "Packages"
        ],
        "Exercise II and Solutions": [
          "Practice Exercise II",
          "All in One Proto File",
          "Nested Messages",
          "Imports",
          "Packages"
        ],
        "Setting up Protoc Compiler": [
          "Setup Protoc Compiler",
          "Using Protoc",
          "Practice Using Protoc"
        ],
        "Java Programming with Protocol Buffers": [
          "Important Message",
          "Setup & Code Download in Java",
          "Gradle Project Setup & Code Generation",
          "Simple Message Creation in Java",
          "Creating a Complex Message in Java",
          "Dealing with Enums in Java",
          "Dealing with Maps in Java",
          "Dealing with OneOfs in Java",
          "Serializing/Deserializing (Binary)",
          "Serializing/Deserializing (JSON)",
          "Java Options",
          "Practice Exercise Java (self-guided)"
        ],
        "Golang Programming with Protocol Buffers": [
          "Important Message",
          "Setup & Code Download in Golang",
          "Code generation in Golang",
          "Simple Proto Struct in Golang",
          "Complex Proto Struct in Golang",
          "Enum Proto Struct in Golang",
          "Handling OneOfs in Golang",
          "Handling Maps in Golang",
          "Reading and Writing to Disk",
          "Reading and Writing to JSON",
          "Practice Exercise Golang (self-guided)"
        ],
        "Python Programming with Protocol Buffers": [
          "Important Message",
          "Setup & Code Download in Python",
          "Code generation in Python",
          "Simple Proto Message in Python",
          "Complex Proto Message in Python",
          "Enum Proto Message in Python",
          "Handling OneOfs in Python",
          "Handling Maps in Python",
          "Reading and Writing to Disk",
          "Reading and Writing to JSON",
          "Practice Exercise Python (self-guided)"
        ],
        "Data Evolution with Protobuf": [
          "The Need for Updating Schemas",
          "Rules for Data Evolution",
          "Renaming Fields",
          "Removing Fields",
          "Reserved Keyword",
          "Beware of Defaults"
        ]
      },
      "requirements": [
        "Some programming background (Java, Python or Go for example)",
        "Previous experience with other formats such as XML or JSON is preferred"
      ],
      "description": "Protocol Buffers (protobuf) is a fundamental data serialization format that every Data Engineer should know about. It is leveraged by many top tech companies such as Google and enables micro-services to transfer data in a format that is safe and efficient.\nIn this course, we are going to explore in depth, with hands-on lectures, all the aspects of Protocol Buffers 3.\nIn just a few hours, you will know everything you need to know to create simple and complex .proto files, and write code in your Favourite Programming language such as Java, Python and Go. Protocol Buffers generates all the boilerplate code for you!\nStop using XML and JSON and start using a Data Format that will allow you to create the most efficient APIs.\n\nComplete Guide to Protocol Buffers 3 is the best way to get a great overview of all the possibilities offered by Protocol Buffers\n> Write simple and complex .proto files\n> Practice Exercises to Confirm the learnings\n> Leverage Imports and Packages appropriately\n> Generate Code using `protoc`\n> Code in Java, Go and Python with Protocol Buffers\n> Learn about advanced Protocol Buffers concepts\nNote: This course assumes you have some knowledge about Programming and JSON / XML\n\n\nSection outline:\nProtocol Buffers Course Introduction: Get an understand of the course objectives, how the course is structured, download the course code and get ready!\nProtocol Buffers Basics I: Learn how to create your first messages using Scalar Types. Practice with 5 exercises\nProtocol Buffers Basics II: Learn how to create complex messages, and organise your code in different files and packages. Practice with 4 exercises\nSetting up Protoc Compiler: Setup the protoc compiler and learn how to generate code in any language\nJava Programming with Protocol Buffers: Write your Protocol Buffers Data in Java\nGolang Programming with Protocol Buffers: Write your Protocol Buffers Data in Golang\nPython Programming with Protocol Buffers: Write your Protocol Buffers Data in Python\nData Evolution with Protobuf: Evolve your protocol buffers file in a safe way in order to add or remove fields without breaking previous code\nProtocol Buffers Advanced: Advanced Types in Protocol Buffers as well as Options, Integer Types, and an introduction to RPC Services with gRPC\n\n\nInstructor\nMy name is Clément Jean, and I'll be your instructor in this course. I teach about Protocol Buffers and gRPC with my focus always on helping my students improve their professional proficiencies. I am also the author of some of the most highly-rated & best-selling courses.\nWith development being a widely accepted and pursued career, I've decided it's time for students to properly learn about Protocol Buffers. So, let’s kick start the course! You are in good hands!\n\n\nThis Course Also Comes With:\nLifetime Access to All Future Updates\nA responsive instructor in the Q&A Section\nLinks to interesting articles, and lots of good code to base your next template onto\nUdemy Certificate of Completion Ready for Download\nA 30 Day \"No Questions Asked\" Money Back Guarantee!\nI hope to see you inside the course!",
      "target_audience": [
        "Developers who want to understand how to write .proto files and write code to create Protocol Buffer data",
        "Architects who want to understand how Protocol Buffers works and be useful for their solution archicture"
      ]
    },
    {
      "title": "JavaScript for Beginners - The Complete introduction to JS",
      "url": "https://www.udemy.com/course/javascript-for-beginners-the-complete-introduction-to-js/",
      "bio": "Learn all the Basics of JavaScript and create various basic JavaScript programs and applications",
      "objectives": [
        "Create your own basic programs with JavaScript",
        "Be able to use JavaScript on a daily basis",
        "Learn at your own pace with different practical exercices at each class",
        "Learn how to use JavaScript the right way",
        "Understand basic and more complexe JavaScript functions",
        "Learn Different Tips and Trics to improve your JavaScript skills"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Introduction to JavaScript",
          "Downloading your text Editor"
        ],
        "Programming in JavaScript": [
          "Writing our first line of code",
          "Various Data Types",
          "Working with variables",
          "Basic string methods Part 1",
          "Basic string methods Part 2",
          "Working with numbers",
          "Google console and taking user input",
          "Practicing everything Part 1",
          "Practicing everything Part 2"
        ],
        "More Programming": [
          "Using arrays Part 1",
          "Using Arrays Part 2",
          "Creating Basic Functions",
          "Practice Part 1",
          "Practice Part 2",
          "Practice Part 3"
        ],
        "Statements and Loops": [
          "Introduction to Statements",
          "Practicing the IF statement Part 1",
          "Practicing the IF statement Part 2",
          "The Basics of Loops",
          "The basics of the FOR loop",
          "Understanding the WHILE loop"
        ],
        "Final Project": [
          "Final Project part 1",
          "Final Project Part 2",
          "Final Project Part 3",
          "Conclusion",
          "Thank you",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Owning a computer",
        "Wanting to learn JavaScript programming",
        "No experience required"
      ],
      "description": "Learning how to properly program in any programming language can be very complicated espescially if you never did any programming before. having the capacity to program in JavaScript is not different. This is why, this course have been created, to helpyou learn, properly program and understand everything you need to know about JavaScript to be able to master this programming language. If you:\n- Need to learn the basics of JavaScript for work\n- Always wanted to create various projects with this programming language\n- Are currently in school and have to understand some Javascript concepts\n- are simply curious about this programming language\nThen you are definely at the right place and will probably love this course and everything that it has to oofer. Indeed, not only you will learn and understand all the basic concepts and everything aroud JavaScript programming  but you will have a lot of practice throught out this course. The goal here is that by the end of this course you have a solid and strong understand of how to write your code with Javascript and be able to create your own JavaScript programs and applications.\nThe structure of the course\nThe way this course have been built, is made to help you understand and learn everything you need to know about Java script. Indeed, you will understand all the basics of this programming language. From the starting point where you are going to learn what to instal and how to do it to write your first basic lines of code to the more advanced part that contains things such as statements, functions and loop and various practical projects, this course has everything you need to start your JavaScript programming journey. Also, this course has been created not only to help you learn JavaScript but to also, help you have a clear understanding of all the basics of this programming language. Also, this course will teach something very important that can be used in any other programming language and it's the programming logic. Indeed, by creating various applications, you will learn to think like a programmer and this can be applied in any other programming language. In other words, if you don't have any programming experience prior to this course, by completing it you will learn the programming logic and this will help succed not only in JavaScript but it's useful in any other programming language.\nAlso, this course is built around a very simple but effective logic that is learning by practice. Indeed, this simply means that this course is definely not theoritical even if it contains some classes that present various Javascript concepts. In other words, this course is built on a logic of learning by practice . This means that you will find plenty of exercices all over the course to help you understand and master this programming language to finaly achieve your end goal of learning how to program in JavaScript.\nFor who is this course designed\nThere is a lot of JavaScript courses that exist all over the internet. But, this course is definely different. Indeed, all the concepts that can be found in this course are simplified to help you understand them more in depth and a lot easier. Also, it's important to mention that each element in this course is presented with a multitude of various programming examples that will allow you to practice everything that you will learn all over the course. In other words, if you never wrote a single line of code or did any programming prior this course and you always wanted to start somewhere then you will probably love this course. The way this course is presented and structured is here to help you achieve your obective of starting in the programming world and have a solid understanding of JavaScript programming by the end of this course.\nWhy should I take this course\nIf programming in JavaScript is something that you always had a passion for and you always wanted to learn more about that programming language then you should definitely take this course. The first thing that this course will teach you is understanding the logic of programming or in other words how to think like a programmer and how to use with JavaScript . You will also learn various JavaScript  concepts as well as create various JavaScript  prrograms and applications all over the course.\nThere is no risk involved in taking this course\nThis course comes with a 100% satisfaction guarantee, this means that if your are not happy with what you have learned, you have 30 days to get a complete refund with no questions asked. Also, if there is any concept that you find complicated or you are just not able to understand, you can directly contact me and it will be my pleasure to support you in your learning.\nThis means that you can either learn amazing skills that can be very useful in your professional or everyday life or you can simply try the course and if you don't like it for any reason ask for a refund.\nYou can't lose with this type of offer !!\n\n\nENROL NOW and start learning today :)",
      "target_audience": [
        "people curious about programming",
        "People interested to learn how to program in JavaScript"
      ]
    },
    {
      "title": "C Programming Step by Step - Complete Tutorial For Beginners",
      "url": "https://www.udemy.com/course/c-for-technical-interview/",
      "bio": "C language tutorial from basics with C operator,loop,array,pointer,function,parameter,string,recursion,structure,file.",
      "objectives": [
        "if else statements, loop - while, for and do while loop with many examples.",
        "Array - 1D and 2D, why we need them and how to use them effectively.",
        "String in C - NULL terminated character arrays.",
        "Writing function, parameter passing to function. Returning value from function.",
        "storage class - auto, static, extern and register",
        "Pointer - in depth understanding.",
        "Relationship between arrays and pointers.",
        "Array of pointers.",
        "Command line arguments",
        "Reading and writing with files, both text and binary.",
        "Recursion - how it works, recursion vs iteration in depth discussion - Towers of Hanoi",
        "Various string utilities - sprintf, strtok and many others",
        "Function pointers",
        "bitwise operators in C programming."
      ],
      "course_content": {
        "Introduction and guidance to follow the course.": [
          "Introduction",
          "A note on screen resolution.",
          "Course dash-board, Q/A section, basic guidance to follow the course.",
          "How to do the coding exercises, please watch."
        ],
        "How to download, install and use compilers and various IDEs for C programming.": [
          "A brief note on IDE and Compiler",
          "Download install and use Xcode(on OSX) for writing C programs",
          "Compile using Mac terminal and write program on sublime text.",
          "Using Visual Studio Code on MacOS for C program.",
          "How to download and install Codeblocks for Mac",
          "Download Install and Use Code::Blocks for your C programs.",
          "Compiling from Windows terminal using gcc",
          "Using Visual Studio Code for Windows.",
          "Download, install and use Microsoft Visual Studio 2019 Community edition.",
          "Using Netbeans in Mac"
        ],
        "Fundamentals that you always need to know": [
          "Understanding the first program.",
          "Just print Hello World",
          "Variables and data types in C programming.",
          "Printing content of variable using printf",
          "Reading data from keyboard into variable using scanf.",
          "Have you understood printf and scanf?",
          "Initialization of variable, octal and hexadecimal initialization.",
          "Arithmetical Operators in C",
          "Do some arithmetic work",
          "Console I/O and Variable declarations",
          "Dealing with characters",
          "Characters - Do you know them?",
          "Flushing problem while taking character input",
          "Idea of casting",
          "Assignment to test your idea about data type casting.",
          "The secret of printf",
          "The secret of scanf",
          "The most neglected operator - Assignment operator",
          "Relational operators for comparing values",
          "Can you take this challenge?",
          "Introduction to Logical Operator, AND operation",
          "Logical OR operation",
          "Logical NOT operation",
          "Unary increment and decrement operator",
          "Short circuit feature of AND and OR operation",
          "How concrete is your foundations"
        ],
        "Branching, taking course of action on the basis of result of condition": [
          "\"To be or not to be\" - how to decide using if-else",
          "Going further, the if-else-if structure",
          "\"Mood of Pupeta the funny creature\" - Test your skill on if-else",
          "Another programming example on if-else-if, this will help you more.",
          "Are you sure you can answer this? Take a look.",
          "Ops! Not done yet, here is some more information on if-else",
          "Print remark according to the age.",
          "Make it smart using conditional operator, the only ternary operator in C",
          "Nested if-else, checking leap year.",
          "Understand switch-case",
          "Decision making, how bold you are?",
          "Practice if-else statement"
        ],
        "Do it again and again until satisfied, technique for iteration.": [
          "Introduction to loop, while loop.",
          "Quiz on While loop",
          "While loop - Programming Example 1",
          "While loop - Programming Example 2",
          "Find sum of all numbers which are divisible by 3 but not divisible by 5 up to a positive integer n.",
          "Take a challenge on while loop, here is interesting \"predict output\" on while.",
          "Assignment: While loop - 1",
          "All about smart looking for loop",
          "Pattern Printing",
          "First do then check, do-while loop",
          "How to break a loop early: use of 'break' keyword",
          "The other loop utility: 'continue' keyword",
          "Generating random numbers, the rand() function",
          "Quiz 3. Check how you can iterate.",
          "Hi_Lo_Game",
          "A dice game"
        ],
        "Array: the collection": [
          "Introduction to one dimensional array",
          "Initialisation of one dimensional array",
          "Allocating array dynamically, Example input output operations with array",
          "A programming example using 1-D array",
          "One dimensional array - first assignment.",
          "Second assignment on one dimensional array",
          "Introduction to two dimensional array",
          "2-D array programming example",
          "Print transpose of a matrix.",
          "Generate Magic Square",
          "Are you comfortable with 1-D arrays?",
          "Test your understanding with 2 Dimensional arrays."
        ],
        "Way to store and manipulate string in C programming": [
          "Introduction to string, using character array for storing string",
          "How to input string from keyboard",
          "Finding the length of string",
          "Searching and counting target in string",
          "Library function for string operations, string.h",
          "Find longest word in a string",
          "Check if a string is a Palindrome or not.",
          "count frequency of digits in a string.",
          "Quiz on string (NULL terminated character array)"
        ],
        "Modularise your program using function.": [
          "Introduction to function",
          "Prototype or signature of function, declaring a function.",
          "Write a simple function.",
          "Quiz on Function preliminaries",
          "Create your own library, distribute functions to others.",
          "Function example 1, a function to check prime number",
          "More example on function",
          "Another example, a function to test Armstrong Number",
          "Write a function to to check a character.",
          "Develop a function to find the area of a rectangle.",
          "Find sum of all prime numbers upto n.",
          "Quiz on function"
        ],
        "Rock-Paper-Scissor game - a modularise approach": [
          "Rock-Paper-Scissor game - Part 1",
          "Rock-Paper-Scissor game - Part 2"
        ],
        "Recursion, how to write recursive functions.": [
          "Introduction to recursion.",
          "Introduction continues...",
          "Recursion vs Iteration, the big debate, Concept of TAIL recursion.",
          "The debate continues... when exactly iteration is preferable.",
          "Still in debate... when recursion is preferable.",
          "Tower of Hanoi, the classical example of recursion.",
          "Implementation of Tower of Hanoi",
          "Another example, Fibonacci term.",
          "Test your knowledge on recursion."
        ]
      },
      "requirements": [
        "No prerequisites, course is for absolute beginners."
      ],
      "description": "I have been teaching this course to the undergraduate engineering students for last 15 years in class room. This course is well designed and covered almost all the topics that one should know while learning C language. Will not only help the student to build a solid foundation on the topic but will boost their confidence to face technical interviews boldly.\nThe course contents are mostly video lectures. I would encourage absolute beginners to follow the lectures strictly in chronological manners, please start from the very first video and go to the next one only if you are done with the previous. However, though not recommended, but students with some previous knowledge could jump lectures if they are confident.\nThe course is structured basically for the new programmers who may not have any previous experience with any programming language. From the very basic to advanced topics. Simple program to complex one in step-by-step.\nOne should take this course to build a career as a programmer. Programming in C has been considered as foundation for any programming language. If one is confident with C, then can start learning any other language like PHP, C++ or Java.",
      "target_audience": [
        "This course is A-Z on C programming language, therefore, anyone can take this course, even absolute beginners in programming will face no problem doing this course",
        "Any undergraduate student having C programming in curriculum",
        "If you have previous experience in C programming or with any other programming language then this course is going to make your foundation more strong"
      ]
    },
    {
      "title": "JavaScript For Beginners - Learn JavaScript From Scratch",
      "url": "https://www.udemy.com/course/javascript-for-beginners-learn-javascript-from-scratch/",
      "bio": "Learn The JavaScript Programming Language Completely From Scratch Without Frameworks",
      "objectives": [
        "JavaScript Variables and Strings",
        "How To Work With Numbers in JavaScript",
        "Conditional Statements",
        "JavaScript Functions",
        "JavaScript Loops",
        "JavaScript Arrays",
        "JQuery"
      ],
      "course_content": {
        "JavaScript Basics": [
          "What You Will Be Learning Throughout This Course",
          "Creating Your Very First JavaScript Program",
          "Some Examples of Good Text Editing Programs For Coding",
          "What is JavaScript and Some Live Examples Of it On The Web",
          "How To Access The External Files For Each Lesson of The Course",
          "JavaScript Basics",
          "How To Link an External JavaScript Files to an HTML Document",
          "What is The JavaScript Console",
          "JavaScript Console Challenge",
          "The Solution To The Problem",
          "Summary Of Our Introduction To JavaScript",
          "How To Ask For Help?",
          "How To Write Comments in JavaScript?"
        ],
        "Using Variables and Storing Information": [
          "What is a Variable?",
          "How To Assign Names To Your Variables?",
          "An Introduction to Strings and Numbers",
          "How To Capture Input From a User",
          "Combining Strings Together",
          "Working With Strings in Further Details",
          "The Variable Coding Challenge",
          "Solution To The Variable Coding Challenge",
          "Quiz on Variables and Section 2"
        ],
        "Working With Numbers In JavaScript": [
          "What Are Numbers",
          "How To Subtract Numbers With JavaScript",
          "How We Do Math In JavaScript",
          "Working With The Math Object",
          "The Numbers Challenge",
          "Solution To The Numbers Challenge",
          "Review For Working With Numbers"
        ],
        "Working With Conditional Statements": [
          "What are Conditional Statements?",
          "Comparison Operators",
          "Working With Booleans",
          "Comments in JavaScript",
          "Combining Multiple Tests Into a Single Condition",
          "Working With Conditional Statements Challenge",
          "The Conditional Statements Challenge Solution"
        ],
        "Working With JavaScript Functions": [
          "What Are Functions",
          "How To Return a Value From a Function",
          "Giving Information To a Function",
          "The Variable Scope",
          "Working With Functions Challenge",
          "Working With Functions Solution"
        ],
        "Working With JavaScript Loops": [
          "What is a loop",
          "Working Further With While Loops",
          "Do While Loops",
          "Working With For Loops",
          "How To Break Out of a Loop",
          "The JavaScript Loop challenge",
          "Solution to The JavaScript Loop Challenge"
        ],
        "Working With JavaScript Arrays": [
          "What is an Array",
          "How to Access Items in an Array",
          "How To Add Items To An Array",
          "How To Remove Items From An Array"
        ],
        "Jquery Basics": [
          "Section on JQuery Coming Soon!",
          "Introductory To JQuery",
          "How To Download and Install JQuery"
        ],
        "JavaScript Object Oriented Programming": [
          "How To Create a Basic Object In JavaScript",
          "Introductory To JavaScript Methods"
        ],
        "BONUS 1 - JavaScript Q and A VIDEOS": [
          "Should You Focus Exclusively on JavaScript?",
          "Why Is JavaScript Such a Pain To Learn?"
        ]
      },
      "requirements": [
        "Anyone Who Wants To Learn About JavaScript Can Enroll In This Course!"
      ],
      "description": "Tired of taking programming course after programming course and nothing seems to stick or make sense?\n\nLet me show you how I helped over 22,253 students learn this wonderful programming language we call JavaScript.\nWith over 10 years of experience as a web developer I will show you how to become a JavaScript developer.\nJavaScript For Beginners\nThis course is a step by step guide that will take your hand and guide you through the absolute basics and show you everything you need to learn in order to get started with JavaScript. I've put a lot of effort into this course to make sure that the videos are recorded in high quality, the audio is clear, and the lessons are engaging and informative.\nIf you are looking for the best course on Udemy to learn JavaScript then I stand by this course. With over 2,400 reviews at and average of 4.5 stars I promise you will not be disappointed with your purchase.\nThis course is perfect for beginners to JavaScript or if you are completely new to web development as well. Come join me and let's tackle this extraordinary language one step at a time.\nWhat You Will Be Learning In This Course\nIn this course you will be learning everything that a beginner JavaScript developer needs to know in order to progress at a rapid pace and work within the language with confidence and consistency. Let's go over what we will be covering in the different sections of this course:\nJavaScript Basics - In the first module you will be learning the very basics of JavaScript. Syntax, basic keywords and creating your very first JavaScript program will be covered here. You will also get an introductory to the JavaScript console which can be very effective for debugging your programs.\nVariables - In module number 2 you will be learning all about variables and strings. At the end of module 2 you will have a basic project to build as well as a quiz that will test you on everything you have learned so far.\nNumbers - Numbers can be effective in JavaScript for doing basic and advanced math calculations. In this module you will learn how to generate random numbers and do very basic math functions in JavaScript. Your final project for this module will be to create a program that generates a random number every-time it is run.\nConditional Statements - Now it's time to start adding more flexibility to your programs. In this module you will learn how conditional statements can really add a new layer of depth to your programs. The final project for this module will be to build a interactive math quiz.\nFunctions - Functions can be used to create reusable code and make our lives as JavaScript Developers a heck of a lot easier. In this module you will learn about the basic different types of functions you can create. The final project will have you building your own function.\nLoops - Loops are used to repeat certain actions over and over again. In this module you will learn about the different types of loops there are in JavaScript. Your final project will touch upon our quiz program we created earlier and make it even more advanced!\nArrays - Arrays are used in JavaScript to store information in an easier way. You will be learning about the different types of arrays in this module.\nAre you ready to start your JavaScript career?\nStill not convinced? Check out these customer reviews from real students who have purchased this course:\n\n\nJust what a real beginner is looking for.WHY we do things, WHAT are those things and HOW and WHY we use commands.Not just a tutorial (as many of the others). Considering there's plenty of free learning JS around, this course is way too good for a free-course just because of the good explanations, examples, reviews, tests, material...First time I get to like JS as it made sense progressively.\nTHANK YOU!\nGuillermo Díaz Cortés\n\n\nThis course will get you started with basic understanding of JavaScript. Hands -on examples are good. Beginners should go through this course.\n\nDivek\nThis is an excellent little intro to javascript. Easy pace and clear examples making it perfect for beginners.\n\nJob Abbot\n\n\nI look forward to seeing you enrolled in the course, sign-up now!",
      "target_audience": [
        "Anyone Interested In Learning About JavaScript Should Take This Course"
      ]
    },
    {
      "title": "Solve 250 Python Exercises",
      "url": "https://www.udemy.com/course/python-exercises/",
      "bio": "Solve 250 coding exercises to boost your Python skills and prepare for a test or interview. Python Cheat Sheet included!",
      "objectives": [
        "You will solve 250 coding exercises ranging from beginner to advanced level and covering all the key Python concepts.",
        "You are going to DOWNLOAD a comprehensive Python CHEAT SHEET, as well as a PDF Course Notebook.",
        "You will have MY FULL SUPPORT for every course-related question or suggestion, plus the help of the community.",
        "You will have LIFETIME ACCESS TO COURSE UPDATES and new content, anytime, anywhere, on any device."
      ],
      "course_content": {
        "Some Initial Thoughts": [
          "Just starting out in programming? Read this!",
          "Interested in getting certified in Python?"
        ],
        "Installing Python for Testing Your Solutions": [
          "How to Install Python on Windows",
          "How to Install Python on macOS"
        ],
        "Download the Python Cheat Sheet": [
          "Download the PDF Cheat Sheet",
          "EXTRA: Download a Python Notebook"
        ],
        "Solve 250 Coding Exercises in Python": [
          "How to Properly Solve a Coding Exercise on Udemy",
          "Exercise 1 - Strings",
          "Exercise 1 - Solution",
          "Exercise 2 - Strings",
          "Exercise 2 - Solution",
          "Exercise 3 - Strings",
          "Exercise 3 - Solution",
          "Exercise 4 - Strings",
          "Exercise 4 - Solution",
          "Exercise 5 - Strings",
          "Exercise 5 - Solution",
          "Exercise 6 - Strings",
          "Exercise 6 - Solution",
          "Exercise 7 - Strings",
          "Exercise 7 - Solution",
          "Exercise 8 - Strings",
          "Exercise 8 - Solution",
          "Exercise 9 - Strings",
          "Exercise 9 - Solution",
          "Exercise 10 - Strings",
          "Exercise 10 - Solution",
          "Exercise 11 - Strings",
          "Exercise 11 - Solution",
          "Exercise 12 - Strings",
          "Exercise 12 - Solution",
          "Exercise 13 - Strings",
          "Exercise 13 - Solution",
          "Exercise 14 - Strings",
          "Exercise 14 - Solution",
          "Exercise 15 - Strings",
          "Exercise 15 - Solution",
          "Exercise 16 - Strings",
          "Exercise 16 - Solution",
          "Exercise 17 - Strings",
          "Exercise 17 - Solution",
          "Exercise 18 - Strings",
          "Exercise 18 - Solution",
          "Exercise 19 - Strings",
          "Exercise 19 - Solution",
          "Exercise 20 - Strings",
          "Exercise 20 - Solution",
          "Exercise 21 - Strings",
          "Exercise 21 - Solution",
          "Exercise 22 - Strings",
          "Exercise 22 - Solution",
          "Exercise 23 - Strings",
          "Exercise 23 - Solution",
          "Exercise 24 - Strings",
          "Exercise 24 - Solution",
          "Exercise 25 - Strings",
          "Exercise 25 - Solution",
          "Exercise 26 - Numbers & Booleans",
          "Exercise 26 - Solution",
          "Exercise 27 - Numbers & Booleans",
          "Exercise 27 - Solution",
          "Exercise 28 - Numbers & Booleans",
          "Exercise 28 - Solution",
          "Exercise 29 - Numbers & Booleans",
          "Exercise 29 - Solution",
          "Exercise 30 - Numbers & Booleans",
          "Exercise 30 - Solution",
          "Exercise 31 - Numbers & Booleans",
          "Exercise 31 - Solution",
          "Exercise 32 - Numbers & Booleans",
          "Exercise 32 - Solution",
          "Exercise 33 - Numbers & Booleans",
          "Exercise 33 - Solution",
          "Exercise 34 - Numbers & Booleans",
          "Exercise 34 - Solution",
          "Exercise 35 - Numbers & Booleans",
          "Exercise 35 - Solution",
          "Exercise 36 - Lists",
          "Exercise 36 - Solution",
          "Exercise 37 - Lists",
          "Exercise 37 - Solution",
          "Exercise 38 - Lists",
          "Exercise 38 - Solution",
          "Exercise 39 - Lists",
          "Exercise 39 - Solution",
          "Exercise 40 - Lists",
          "Exercise 40 - Solution",
          "Exercise 41 - Lists",
          "Exercise 41 - Solution",
          "Exercise 42 - Lists",
          "Exercise 42 - Solution",
          "Exercise 43 - Lists",
          "Exercise 43 - Solution",
          "Exercise 44 - Lists",
          "Exercise 44 - Solution",
          "Exercise 45 - Lists",
          "Exercise 45 - Solution",
          "Exercise 46 - Lists",
          "Exercise 46 - Solution",
          "Exercise 47 - Lists",
          "Exercise 47 - Solution",
          "Exercise 48 - Lists",
          "Exercise 48 - Solution",
          "Exercise 49 - Lists",
          "Exercise 49 - Solution",
          "Exercise 50 - Lists",
          "Exercise 50 - Solution",
          "Exercise 51 - Lists",
          "Exercise 51 - Solution",
          "Exercise 52 - Lists",
          "Exercise 52 - Solution",
          "Exercise 53 - Lists",
          "Exercise 53 - Solution",
          "Exercise 54 - Lists",
          "Exercise 54 - Solution",
          "Exercise 55 - Lists",
          "Exercise 55 - Solution",
          "Exercise 56 - Lists",
          "Exercise 56 - Solution",
          "Exercise 57 - Lists",
          "Exercise 57 - Solution",
          "Exercise 58 - Lists",
          "Exercise 58 - Solution",
          "Exercise 59 - Lists",
          "Exercise 59 - Solution",
          "Exercise 60 - Lists",
          "Exercise 60 - Solution",
          "Exercise 61 - Sets",
          "Exercise 61 - Solution",
          "Exercise 62 - Sets",
          "Exercise 62 - Solution",
          "Exercise 63 - Sets",
          "Exercise 63 - Solution",
          "Exercise 64 - Sets",
          "Exercise 64 - Solution",
          "Exercise 65 - Sets",
          "Exercise 65 - Solution",
          "Exercise 66 - Sets",
          "Exercise 66 - Solution",
          "Exercise 67 - Sets",
          "Exercise 67 - Solution",
          "Exercise 68 - Sets",
          "Exercise 68 - Solution",
          "Exercise 69 - Tuples",
          "Exercise 69 - Solution",
          "Exercise 70 - Tuples",
          "Exercise 70 - Solution",
          "Exercise 71 - Tuples",
          "Exercise 71 - Solution",
          "Exercise 72 - Tuples",
          "Exercise 72 - Solution",
          "Exercise 73 - Tuples",
          "Exercise 73 - Solution",
          "Exercise 74 - Tuples",
          "Exercise 74 - Solution",
          "Exercise 75 - Tuples",
          "Exercise 75 - Solution",
          "Exercise 76 - Tuples",
          "Exercise 76 - Solution",
          "Exercise 77 - Tuples",
          "Exercise 77 - Solution",
          "Exercise 78 - Ranges",
          "Exercise 78 - Solution",
          "Exercise 79 - Ranges",
          "Exercise 79 - Solution",
          "Exercise 80 - Ranges",
          "Exercise 80 - Solution",
          "Exercise 81 - Ranges",
          "Exercise 81 - Solution",
          "Exercise 82 - Ranges",
          "Exercise 82 - Solution",
          "Exercise 83 - Ranges",
          "Exercise 83 - Solution",
          "Exercise 84 - Ranges",
          "Exercise 84 - Solution",
          "Exercise 85 - Ranges",
          "Exercise 85 - Solution",
          "Exercise 86 - Dictionaries",
          "Exercise 86 - Solution",
          "Exercise 87 - Dictionaries",
          "Exercise 87 - Solution",
          "Exercise 88 - Dictionaries",
          "Exercise 88 - Solution",
          "Exercise 89 - Dictionaries",
          "Exercise 89 - Solution",
          "Exercise 90 - Dictionaries",
          "Exercise 90 - Solution",
          "Exercise 91 - Dictionaries",
          "Exercise 91 - Solution",
          "Exercise 92 - Dictionaries",
          "Exercise 92 - Solution",
          "Exercise 93 - Dictionaries",
          "Exercise 93 - Solution",
          "Exercise 94 - Dictionaries",
          "Exercise 94 - Solution",
          "Exercise 95 - Dictionaries",
          "Exercise 95 - Solution",
          "Exercise 96 - Dictionaries",
          "Exercise 96 - Solution",
          "Exercise 97 - Dictionaries",
          "Exercise 97 - Solution",
          "Exercise 98 - Dictionaries",
          "Exercise 98 - Solution",
          "Exercise 99 - Dictionaries",
          "Exercise 99 - Solution",
          "Exercise 100 - Dictionaries",
          "Exercise 100 - Solution",
          "Exercise 101 - Data Type Conversions",
          "Exercise 101 - Solution",
          "Exercise 102 - Data Type Conversions",
          "Exercise 102 - Solution",
          "Exercise 103 - Data Type Conversions",
          "Exercise 103 - Solution",
          "Exercise 104 - Data Type Conversions",
          "Exercise 104 - Solution",
          "Exercise 105 - Data Type Conversions",
          "Exercise 105 - Solution",
          "Exercise 106 - Data Type Conversions",
          "Exercise 106 - Solution",
          "Exercise 107 - Data Type Conversions",
          "Exercise 107 - Solution",
          "Exercise 108 - Data Type Conversions",
          "Exercise 108 - Solution",
          "Exercise 109 - Data Type Conversions",
          "Exercise 109 - Solution",
          "Exercise 110 - Data Type Conversions",
          "Exercise 110 - Solution",
          "Exercise 111 - Conditionals",
          "Exercise 111 - Solution",
          "Exercise 112 - Conditionals",
          "Exercise 112 - Solution",
          "Exercise 113 - Conditionals",
          "Exercise 113 - Solution",
          "Exercise 114 - Conditionals",
          "Exercise 114 - Solution",
          "Exercise 115 - Conditionals",
          "Exercise 115 - Solution",
          "Exercise 116 - Conditionals",
          "Exercise 116 - Solution",
          "Exercise 117 - Conditionals",
          "Exercise 117 - Solution",
          "Exercise 118 - Conditionals",
          "Exercise 118 - Solution",
          "Exercise 119 - Conditionals",
          "Exercise 119 - Solution",
          "Exercise 120 - Conditionals",
          "Exercise 120 - Solution",
          "Exercise 121 - Conditionals",
          "Exercise 121 - Solution",
          "Exercise 122 - Conditionals",
          "Exercise 122 - Solution",
          "Exercise 123 - Conditionals",
          "Exercise 123 - Solution",
          "Exercise 124 - Conditionals",
          "Exercise 124 - Solution",
          "Exercise 125 - Conditionals",
          "Exercise 125 - Solution",
          "You're Halfway There!",
          "Exercise 126 - Conditionals",
          "Exercise 126 - Solution",
          "Exercise 127 - Conditionals",
          "Exercise 127 - Solution",
          "Exercise 128 - Conditionals",
          "Exercise 128 - Solution",
          "Exercise 129 - Conditionals",
          "Exercise 129 - Solution",
          "Exercise 130 - Conditionals",
          "Exercise 130 - Solution",
          "Exercise 131 - Conditionals",
          "Exercise 131 - Solution",
          "Exercise 132 - Conditionals",
          "Exercise 132 - Solution",
          "Exercise 133 - Conditionals",
          "Exercise 133 - Solution",
          "Exercise 134 - Conditionals",
          "Exercise 134 - Solution",
          "Exercise 135 - Conditionals",
          "Exercise 135 - Solution",
          "Exercise 136 - Loops",
          "Exercise 136 - Solution",
          "Exercise 137 - Loops",
          "Exercise 137 - Solution",
          "Exercise 138 - Loops",
          "Exercise 138 - Solution",
          "Exercise 139 - Loops",
          "Exercise 139 - Solution",
          "Exercise 140 - Loops",
          "Exercise 140 - Solution",
          "Exercise 141 - Loops",
          "Exercise 141 - Solution",
          "Exercise 142 - Loops",
          "Exercise 142 - Solution",
          "Exercise 143 - Loops",
          "Exercise 143 - Solution",
          "Exercise 144 - Loops",
          "Exercise 144 - Solution",
          "Exercise 145 - Loops",
          "Exercise 145 - Solution",
          "Exercise 146 - Loops",
          "Exercise 146 - Solution",
          "Exercise 147 - Loops",
          "Exercise 147 - Solution",
          "Exercise 148 - Loops",
          "Exercise 148 - Solution",
          "Exercise 149 - Loops",
          "Exercise 149 - Solution",
          "Exercise 150 - Loops",
          "Exercise 150 - Solution",
          "Exercise 151 - Loops",
          "Exercise 151 - Solution",
          "Exercise 152 - Loops",
          "Exercise 152 - Solution",
          "Exercise 153 - Loops",
          "Exercise 153 - Solution",
          "Exercise 154 - Loops",
          "Exercise 154 - Solution",
          "Exercise 155 - Loops",
          "Exercise 155 - Solution",
          "Exercise 156 - Loops",
          "Exercise 156 - Solution",
          "Exercise 157 - Loops",
          "Exercise 157 - Solution",
          "Exercise 158 - Loops",
          "Exercise 158 - Solution",
          "Exercise 159 - Loops",
          "Exercise 159 - Solution",
          "Exercise 160 - Loops",
          "Exercise 160 - Solution",
          "Exercise 161 - Exceptions",
          "Exercise 161 - Solution",
          "Exercise 162 - Exceptions",
          "Exercise 162 - Solution",
          "Exercise 163 - Exceptions",
          "Exercise 163 - Solution",
          "Exercise 164 - Exceptions",
          "Exercise 164 - Solution",
          "Exercise 165 - Exceptions",
          "Exercise 165 - Solution",
          "Exercise 166 - Exceptions",
          "Exercise 166 - Solution",
          "Exercise 167 - Exceptions",
          "Exercise 167 - Solution",
          "Exercise 168 - Exceptions",
          "Exercise 168 - Solution",
          "Exercise 169 - Exceptions",
          "Exercise 169 - Solution",
          "Exercise 170 - Exceptions",
          "Exercise 170 - Solution",
          "Exercise 171 - Functions",
          "Exercise 171 - Solution",
          "Exercise 172 - Functions",
          "Exercise 172 - Solution",
          "Exercise 173 - Functions",
          "Exercise 173 - Solution",
          "Exercise 174 - Functions",
          "Exercise 174 - Solution",
          "Exercise 175 - Functions",
          "Exercise 175 - Solution",
          "Exercise 176 - Functions",
          "Exercise 176 - Solution",
          "Exercise 177 - Functions",
          "Exercise 177 - Solution",
          "Exercise 178 - Functions",
          "Exercise 178 - Solution",
          "Exercise 179 - Functions",
          "Exercise 179 - Solution",
          "Exercise 180 - Functions",
          "Exercise 180 - Solution",
          "Exercise 181 - Functions",
          "Exercise 181 - Solution",
          "Exercise 182 - Functions",
          "Exercise 182 - Solution",
          "Exercise 183 - Functions",
          "Exercise 183 - Solution",
          "Exercise 184 - Functions",
          "Exercise 184 - Solution",
          "Exercise 185 - Functions",
          "Exercise 185 - Solution",
          "Exercise 186 - Functions",
          "Exercise 186 - Solution",
          "Exercise 187 - Functions",
          "Exercise 187 - Solution",
          "Exercise 188 - Functions",
          "Exercise 188 - Solution",
          "Exercise 189 - Functions",
          "Exercise 189 - Solution",
          "Exercise 190 - Functions",
          "Exercise 190 - Solution",
          "Exercise 191 - Files",
          "Exercise 191 - Solution",
          "Exercise 192 - Files",
          "Exercise 192 - Solution",
          "Exercise 193 - Files",
          "Exercise 193 - Solution",
          "Exercise 194 - Files",
          "Exercise 194 - Solution",
          "Exercise 195 - Files",
          "Exercise 195 - Solution",
          "Exercise 196 - Files",
          "Exercise 196 - Solution",
          "Exercise 197 - Files",
          "Exercise 197 - Solution",
          "Exercise 198 - Files",
          "Exercise 198 - Solution",
          "Exercise 199 - Files",
          "Exercise 199 - Solution",
          "Exercise 200 - Files",
          "Exercise 200 - Solution",
          "Exercise 201 - Regular Expressions",
          "Exercise 201 - Solution",
          "Exercise 202 - Regular Expressions",
          "Exercise 202 - Solution",
          "Exercise 203 - Regular Expressions",
          "Exercise 203 - Solution",
          "Exercise 204 - Regular Expressions",
          "Exercise 204 - Solution",
          "Exercise 205 - Regular Expressions",
          "Exercise 205 - Solution",
          "Exercise 206 - Regular Expressions",
          "Exercise 206 - Solution",
          "Exercise 207 - Regular Expressions",
          "Exercise 207 - Solution",
          "Exercise 208 - Regular Expressions",
          "Exercise 208 - Solution",
          "Exercise 209 - Regular Expressions",
          "Exercise 209 - Solution",
          "Exercise 210 - Regular Expressions",
          "Exercise 210 - Solution",
          "Exercise 211 - Regular Expressions",
          "Exercise 211 - Solution",
          "Exercise 212 - Regular Expressions",
          "Exercise 212 - Solution",
          "Exercise 213 - Regular Expressions",
          "Exercise 213 - Solution",
          "Exercise 214 - Regular Expressions",
          "Exercise 214 - Solution",
          "Exercise 215 - Regular Expressions",
          "Exercise 215 - Solution",
          "Exercise 216 - Regular Expressions",
          "Exercise 216 - Solution",
          "Exercise 217 - Regular Expressions",
          "Exercise 217 - Solution",
          "Exercise 218 - Regular Expressions",
          "Exercise 218 - Solution",
          "Exercise 219 - Regular Expressions",
          "Exercise 219 - Solution",
          "Exercise 220 - Regular Expressions",
          "Exercise 220 - Solution",
          "Exercise 221 - Regular Expressions",
          "Exercise 221 - Solution",
          "Exercise 222 - Regular Expressions",
          "Exercise 222 - Solution",
          "Exercise 223 - Regular Expressions",
          "Exercise 223 - Solution",
          "Exercise 224 - Regular Expressions",
          "Exercise 224 - Solution",
          "Exercise 225 - Regular Expressions",
          "Exercise 225 - Solution",
          "Exercise 226 - Regular Expressions",
          "Exercise 226 - Solution",
          "Exercise 227 - Regular Expressions",
          "Exercise 227 - Solution",
          "Exercise 228 - Regular Expressions",
          "Exercise 228 - Solution",
          "Exercise 229 - Regular Expressions",
          "Exercise 229 - Solution",
          "Exercise 230 - Regular Expressions",
          "Exercise 230 - Solution",
          "Exercise 231 - Classes",
          "Exercise 231 - Solution",
          "Exercise 232 - Classes",
          "Exercise 232 - Solution",
          "Exercise 233 - Classes",
          "Exercise 233 - Solution",
          "Exercise 234 - Classes",
          "Exercise 234 - Solution",
          "Exercise 235 - Classes",
          "Exercise 235 - Solution",
          "Exercise 236 - Classes",
          "Exercise 236 - Solution",
          "Exercise 237 - Classes",
          "Exercise 237 - Solution",
          "Exercise 238 - Classes",
          "Exercise 238 - Solution",
          "Exercise 239 - Classes",
          "Exercise 239 - Solution",
          "Exercise 240 - Classes",
          "Exercise 240 - Solution",
          "Exercise 241 - Other Concepts",
          "Exercise 241 - Solution",
          "Exercise 242 - Other Concepts",
          "Exercise 242 - Solution",
          "Exercise 243 - Other Concepts",
          "Exercise 243 - Solution",
          "Exercise 244 - Other Concepts",
          "Exercise 244 - Solution",
          "Exercise 245 - Other Concepts",
          "Exercise 245 - Solution",
          "Exercise 246 - Other Concepts",
          "Exercise 246 - Solution",
          "Exercise 247 - Other Concepts",
          "Exercise 247 - Solution",
          "Exercise 248 - Other Concepts",
          "Exercise 248 - Solution",
          "Exercise 249 - Other Concepts",
          "Exercise 249 - Solution",
          "Exercise 250 - Other Concepts",
          "Exercise 250 - Solution",
          "Wow, you really did it! 250 Python exercises!"
        ],
        "10 Ways to Earn Money and Build a Portfolio with Python": [
          "Putting Your Python Skills to Work - Part 1",
          "Putting Your Python Skills to Work - Part 2",
          "Download the Presentation"
        ],
        "Final Section": [
          "Closing Thoughts",
          "Get your Certificate of Course Completion!",
          "Get Certified in Python Programming!"
        ]
      },
      "requirements": [
        "Prior basic-to-intermediate Python experience is required.",
        "You just need a laptop or PC and a decent Internet connection.",
        "You need a strong desire to grow and boost your Python skills."
      ],
      "description": "Practice and boost your Python skills with 250 coding exercises.\nI am answering all your questions, usually in less than 24 hours.\nNo slides, no boring theory, no rambling, no chitchat. Just practice!\nAll my Python courses have received thousands of 5* reviews.\nOver 100,000 satisfied students across several e-learning platforms.\nPython Cheat Sheet and a Certificate of Completion are included.\n\n\nNote! It is strongly recommended that you have some basic-to-intermediate Python experience, or go through my Python Bootcamp: Learn, Code, Build course before attempting to solve the practice activities in this course.\n\n\nWhat others have to say about my courses?\n\"What an incredible value and learning experience!\" by Sean A.\n\"Excellent material. Kudos to a great instructor with a vast level of creativity.\" by Anthony W.\n\"The instructor is an excellent professional, skillful and engaging.\" by Georgios T.\n\"I can say this man is going on smoothly and perfectly, explaining in the most empirical way.\" by Kolapo A.\n\n\nWhy would you take this course?\nDo you want to become a better Python Developer without having to spend a lot on boring theoretical courses?\nDo you want to expand and solidify your Python skills in an organized way, with the help of 250 coding exercises?\nDo you want to prepare for an interview and upgrade your career in a 100% hands-on fashion, with instructor support available?\n\n\nWhat's this course all about?\nYou will have to solve 250 coding exercises ranging from beginner to advanced level and covering all the key Python concepts taught in my Python Bootcamp: Learn, Code, Build Udemy course.\nThis course contains practice activities covering the following Python concepts: strings, lists, tuples, ranges, sets, dictionaries, conditionals, loops, exceptions,  functions, file operations, regular expressions, classes and objects, comprehensions, lambda functions, among others.\nOn top of that, you will get my Python Beginner's Cheat Sheet PDF, two videos covering 10 ways to earn money and build a portfolio using your Python skills, a certificate of completion and lifetime access to the course and any upcoming updates.\n\n\nHow is this course structured?\nSection 1: Some Initial Thoughts\nSection 2: Installing Python for Testing Your Solutions\nSection 3: Download the Python Cheat Sheet\nSection 4: Solve 250 Coding Exercises in Python\nSection 5: 10 Ways to Earn Money and Build a Portfolio with Python\nSection 6: Final Section\n\n\nImportant information before you enroll!\nDon't forget you are covered by a 30-day money back guarantee, full refund, no questions asked.\nOnce enrolled, you have unlimited, 24/7, lifetime access to the course from any device.\nYou will have instant and free access to any updates that I'm going to add to the course.\nYou will benefit from my full support regarding any question related to the course content.\n\n\nI strongly encourage you to boost your Python skills and take your job and career to the next level!\nLet's get started!\nEnroll now and I'll see you in the first lecture!",
      "target_audience": [
        "Junior/Intermediate Python developers and any kind of IT geeks who wish to take their Python programming skills to the next level.",
        "Anyone wanting to solidify their Python programming knowledge and skills using hundreds of coding exercises."
      ]
    },
    {
      "title": "Python for Time Series Data Analysis",
      "url": "https://www.udemy.com/course/python-for-time-series-data-analysis/",
      "bio": "Learn how to use Python , Pandas, Numpy , and Statsmodels for Time Series Forecasting and Analysis!",
      "objectives": [
        "Pandas for Data Manipulation",
        "NumPy and Python for Numerical Processing",
        "Pandas for Data Visualization",
        "How to Work with Time Series Data with Pandas",
        "Use Statsmodels to Analyze Time Series Data",
        "Use Facebook's Prophet Library for forecasting",
        "Understand advanced ARIMA models for Forecasting"
      ],
      "course_content": {
        "Introduction": [
          "Course Overview - PLEASE DO NOT SKIP THIS LECTURE",
          "Course Overview Check",
          "Course Curriculum Overview",
          "FAQ - Frequently Asked Questions"
        ],
        "Course Set Up and Install": [
          "Installing Anaconda Python Distribution and Jupyter"
        ],
        "NumPy": [
          "NumPy Section Overview",
          "NumPy Arrays - Part One",
          "NumPy Arrays - Part Two",
          "NumPy Indexing and Selection",
          "NumPy Operations",
          "NumPy Exercises",
          "NumPy Exercise Solutions"
        ],
        "Pandas Overview": [
          "Introduction to Pandas",
          "Series",
          "DataFrames - Part One",
          "DataFrames - Part Two",
          "Missing Data with Pandas",
          "Group By Operations",
          "Common Operations",
          "Data Input and Output",
          "Pandas Exercises",
          "Pandas Exercises Solutions"
        ],
        "Data Visualization with Pandas": [
          "Overview of Capabilities of Data Visualization with Pandas",
          "Visualizing Data with Pandas",
          "Customizing Plots created with Pandas",
          "Pandas Data Visualization Exercise",
          "Pandas Data Visualization Exercise Solutions"
        ],
        "Time Series with Pandas": [
          "Overview of Time Series with Pandas",
          "DateTime Index",
          "DateTime Index Part Two",
          "Time Resampling",
          "Time Shifting",
          "Rolling and Expanding",
          "Visualizing Time Series Data",
          "Visualizing Time Series Data - Part Two",
          "Time Series Exercises - Set One",
          "Time Series Exercises - Set One - Solutions",
          "Time Series with Pandas Project Exercise - Set Two",
          "Time Series with Pandas Project Exercise - Set Two - Solutions"
        ],
        "Time Series Analysis with Statsmodels": [
          "Introduction to Time Series Analysis with Statsmodels",
          "Introduction to Statsmodels Library",
          "ETS Decomposition",
          "EWMA - Theory",
          "EWMA - Exponentially Weighted Moving Average",
          "Holt - Winters Methods Theory",
          "Holt - Winters Methods Code Along - Part One",
          "Holt - Winters Methods Code Along - Part Two",
          "Statsmodels Time Series Exercises",
          "Statsmodels Time Series Exercise Solutions"
        ],
        "General Forecasting Models": [
          "Introduction to General Forecasting Section",
          "Introduction to Forecasting Models Part One",
          "Evaluating Forecast Predictions",
          "Introduction to Forecasting Models Part Two",
          "ACF and PACF Theory",
          "ACF and PACF Code Along",
          "ARIMA Overview",
          "Autoregression - AR - Overview",
          "Autoregression - AR with Statsmodels",
          "Descriptive Statistics and Tests - Part One",
          "Descriptive Statistics and Tests - Part Two",
          "Descriptive Statistics and Tests - Part Three",
          "ARIMA Theory Overview",
          "Choosing ARIMA Orders - Part One",
          "Choosing ARIMA Orders - Part Two",
          "ARMA and ARIMA - AutoRegressive Integrated Moving Average - Part One",
          "ARMA and ARIMA - AutoRegressive Integrated Moving Average - Part Two",
          "SARIMA - Seasonal Autoregressive Integrated Moving Average",
          "SARIMAX - Seasonal Autoregressive Integrated Moving Average Exogenous - PART ONE",
          "SARIMAX - Seasonal Autoregressive Integrated Moving Average Exogenous - PART TWO",
          "SARIMAX - Seasonal Autoregressive Integrated Moving Average Exogenous - PART 3",
          "Vector AutoRegression - VAR",
          "VAR - Code Along",
          "VAR - Code Along - Part Two",
          "Vector AutoRegression Moving Average - VARMA",
          "Vector AutoRegression Moving Average - VARMA - Code Along",
          "Forecasting Exercises",
          "Forecasting Exercises - Solutions"
        ],
        "Deep Learning for Time Series Forecasting": [
          "Introduction to Deep Learning Section",
          "Perceptron Model",
          "Introduction to Neural Networks",
          "Keras Basics",
          "Recurrent Neural Network Overview",
          "LSTMS and GRU",
          "Keras and RNN Project - Part One",
          "Keras and RNN Project - Part Two",
          "Keras and RNN Project - Part Three",
          "Keras and RNN Exercise",
          "Keras and RNN Exercise Solutions",
          "BONUS: Multivariate Time Series with RNN",
          "Quick Check on MultiVariate Time Series Notebook and Data",
          "BONUS: Multivariate Time Series with RNN"
        ],
        "Facebook's Prophet Library": [
          "Overview of Facebook's Prophet Library",
          "Facebook's Prophet Library",
          "Facebook Prophet Evaluation",
          "Facebook Prophet Trend",
          "Facebook Prophet Seasonality"
        ]
      },
      "requirements": [
        "General Python Skills (knowledge up to functions)"
      ],
      "description": "Welcome to the best online resource for learning how to use the Python programming Language for Time Series Analysis!\nThis course will teach you everything you need to know to use Python for forecasting time series data to predict new future data points.\nWe'll start off with the basics by teaching you how to work with and manipulate data using the NumPy and Pandas libraries with Python. Then we'll dive deeper into working with Pandas by learning about visualizations with the Pandas library and how to work with time stamped data with Pandas and Python.\nThen we'll begin to learn about the statsmodels library and its powerful built in Time Series Analysis Tools. Including learning about Error-Trend-Seasonality decomposition and basic Holt-Winters methods.\nAfterwards we'll get to the heart of the course, covering general forecasting models. We'll talk about creating AutoCorrelation and Partial AutoCorrelation charts and using them in conjunction with powerful ARIMA based models, including Seasonal ARIMA models and SARIMAX to include Exogenous data points.\nAfterwards we'll learn about state of the art Deep Learning techniques with Recurrent Neural Networks that use deep learning to forecast future data points.\nThis course even covers Facebook's Prophet library, a simple to use, yet powerful Python library developed to forecast into the future with time series data.\nSo what are you waiting for! Learn how to work with your time series data and forecast the future!\nWe'll see you inside the course!",
      "target_audience": [
        "Python Developers interested in learning how to forecast time series data"
      ]
    },
    {
      "title": "Learn Socket Programming in C from Scratch",
      "url": "https://www.udemy.com/course/learn-socket-programming-in-c-from-scratch/",
      "bio": "Master the socket programming concepts and start building networked applications in C programming language",
      "objectives": [
        "Understand Socket Programming in C",
        "Learn how to create server and clients and communicate between them",
        "Learn about TCP programming",
        "Learn all about HTTP server programming"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Socket Programming Basics": [
          "Introduction to Sockets",
          "Coding Sockets in C",
          "Data transfer over sockets",
          "Communicating on the same machine"
        ],
        "HTTP Protocol": [
          "Introduction to HTTP",
          "Building the HTTP Server",
          "Testing our Web Server",
          "Advance Concepts"
        ],
        "Summary": [
          "Summary",
          "Bonus Lecture: More Interesting Stuff, Offers and Discounts"
        ]
      },
      "requirements": [
        "Students should have basic knowledge of C before starting this course",
        "Basic knowledge of Linux"
      ],
      "description": "Learn socket programming concepts in our short yet comprehensive course on C programming. On popular demand we bring together a practical and professional tutorial which starts with basic C communication concepts and take it to building of HTTP servers. If you want to start using sockets in your C applications this is the course to start learning.\nThe course will teach:\nConcepts of port communication\nSockets and their use\nData transfer between systems\nHTTP protocol\nBuilding HTTP server\nAdvance C programming concepts\nStart now and build the next generation C communication Apps.",
      "target_audience": [
        "Students who want to learn advance socket programming using C"
      ]
    },
    {
      "title": "Python Programming Bible | Networking, GUI, Email, XML, CGI",
      "url": "https://www.udemy.com/course/pythonv3/",
      "bio": "Python 3 is one of the most popular programming languages. Companies like Facebook, Microsoft and Apple all want Python",
      "objectives": [
        "Python programming",
        "Application programming",
        "Semantics of general programming",
        "The format of coding applications",
        "All the functions of Python programming",
        "Application programming"
      ],
      "course_content": {},
      "requirements": [
        "Passion for learning Python",
        "Basic computer knowledge and skills",
        "Passion for programming",
        "Basic knowledge of computer science is optional"
      ],
      "description": "Learn about everything there is to know about Python Applications and How To Program Them. A step by step process is used to show explain every facet of these topics.\nGain a good understanding of the following concepts with this course:\nWhat Python is?\nHow to program in the Python language\nFeatures of the Python programming language\nCoding semantics\nWebsite programming\nDesign practises of applications\nApplication programming\nGUI programming\nCGI programming\nNetwork programming\nEmail programming\nXML programming\nPython is fast becoming a worldwide Tour De Force that is requested by all companies such as Google, Facebook and Microsoft. This course will ensure you are not left as more and more companies request this awesome language. This course will teach your everything about programming Python applications and websites.\nYou will receive all the knowledge to use and leverage the powerful technology behind these amazing and wonderful platforms.\nOver 205,000 students have enrolled on my courses and all of them are extremely satisfied. You will also be satisfied with this course. If you do not like the course, remember that within 30 days you can request a full refund. I guarantee you satisfaction.\nIf you have any questions regarding the topics covered in this course, please feel free to ask. I'm always happy to help those who want to learn.\n\n\nTo summarise this is what you get:\n• Lifetime access to HD quality videos. No monthly subscription. Learn at your own pace, whenever you want.\n• All videos are downloadable. Learn wherever you want, even without an internet connection!\n• Downloadable starter code and final code for each section.\n• Free helpful support in the course Q&A when you have questions or get stuck.\n• Multiple coding challenges to practice your new skills (solutions included).\nSounds great? Then start this adventure today by clicking the “Take this course\" button, and join me in the only course that you will need!",
      "target_audience": [
        "Anyone looking to learn about Python",
        "People looking to learn about programming",
        "Those seeking to understand how Python works",
        "People seeking guidance on how to create Python based programs",
        "Beginners and experts in this field",
        "People seeking more knowledge on the various features of the Python programming language"
      ]
    },
    {
      "title": "Learn to Code with Python 3",
      "url": "https://www.udemy.com/course/python3-for-beginners/",
      "bio": "Go from beginner to advanced with the Python programming language!",
      "objectives": [
        "Introduction to Python and Setup",
        "Python Programming Basics",
        "Functions - Coding Exercises",
        "Lists, Tuples and Dictionaries",
        "Files in Python 3",
        "Error Handling",
        "Object Oriented Programming",
        "Date & Time",
        "Regular Expressions",
        "Interacting with HTTP",
        "Networking in Python 3",
        "Threading",
        "E-mails, PDFs, Images"
      ],
      "course_content": {
        "Introduction and Setup": [
          "Introduction",
          "Why is Python worth learning?",
          "Installing Python 3 on Windows",
          "Installing Python 3 on Linux and Mac",
          "Taking a closer look at Python 3 IDLE",
          "Section 1 Quiz"
        ],
        "Python Programming Basics": [
          "Math operators",
          "Strings",
          "Variables and variable naming rules",
          "Our first program",
          "Type, len, str, int, float, functions",
          "True or false boolean",
          "If-statement",
          "If and else",
          "Using elif for multiple statements",
          "While loop",
          "Infinite loops with break",
          "Using continue in a loop",
          "For loop",
          "Importing Python libraries"
        ],
        "Functions - Coding Exercises": [
          "Defining functions in Python",
          "Local and global variables",
          "Coding guess the number program",
          "Reverse a string function",
          "Calculate the area of a circle program",
          "Simple Python calculator",
          "Removing vowels from a string program",
          "Find the largest number out of three"
        ],
        "Lists, Tuples and Dictionaries": [
          "Python lists",
          "Creating smaller lists out of a bigger one",
          "Manipulating lists and elements",
          "Append, insert, remove, sort",
          "Tuples",
          "Introduction to dictionaries",
          "Values, keys, items, get",
          "Dictionary comprehension part 1",
          "Dictionary comprehension part 2",
          "Advanced string manipulation",
          "Upper, lower, isupper, islower",
          "Split, strip, join, startswith, endswith"
        ],
        "Files in Python 3": [
          "Navigating through system with OS library",
          "Reading and writing to files",
          "Reversing text from a file"
        ],
        "Error Handling": [
          "Try and except",
          "Try and finally"
        ],
        "Object Oriented Programming": [
          "Classes",
          "Changing class attributes",
          "Built in class attributes",
          "Using your class in a different program",
          "Using your class in a program",
          "Implementing students count option",
          "Class inheritance",
          "Overriding methods in a class"
        ],
        "Date & Time": [
          "Printing and calculating date and time",
          "Different date formats"
        ],
        "Regular Expressions": [
          "Extracting useful data",
          "Regex part 1",
          "Regex part 2"
        ],
        "Interacting with HTTP": [
          "Performing HTTP GET requests",
          "Performing POST requests",
          "Handling website re-directions",
          "Beautiful Soup",
          "Encoding in requests",
          "Session objects and cookies",
          "SSL certificates, authentication, etc.",
          "JSON library and proxies"
        ]
      },
      "requirements": [
        "Basic computer usage",
        "An open mind!"
      ],
      "description": "If you would like to learn how to code, master the Python programming language, and get a job in data science or coding, you are going to LOVE this course! Python is the #1 programming language for beginners due to its simple syntax, wide range of applications, and helpful community resources. This course was designed for absolute beginners. We will cover setting up a Python environment, programming basics, object oriented programming, regular expressions, interacting with HTTP, networking and much more. Enroll now to receive over 17 hours of HD video tutorials with English captions, and a certificate of completion!\n\n\n3 Coding Projects in the course:\n• Python calculator - We will use what we learn in the Python basics section to code our first program.\n• Web Scraping - We will code a simple web scraper to demonstrate how to interact with HTTP using Python.\n• Chat program - We will code a chat program using WebSockets to demonstrate the basics of networking with Python.\n\n\nTopics covered in the course:\n• Introduction to Python and Setup\n• Python Programming Basics\n• Functions - Coding Exercises\n• Lists, Tuples and Dictionaries\n• Files in Python 3\n• Error Handling\n• Object Oriented Programming\n• Date & Time\n• Regular Expressions\n• Interacting with HTTP\n• Networking in Python 3.\n• Threading\n• E-mails, PDFs, Images\n\n\nStill not sold? Check out a few of the awesome reviews this course has received from customers:\n• \"This course is perfect for beginners looking to learn the basics. The content is very detailed and comprehensive. I followed instructions to install Python 3 and started coding alongside Joseph in each lesson - it was as simple as that.“\n• \"Well structured with plenty of practical tests/quizzes. Especially liked the development of a Poker Game!“\n• \"I am a student who had 0 experience in coding before joining the course. The instructor explains everything from the basics as well as the usage of every function. Thank you!\"",
      "target_audience": [
        "Students interested in learning the Python programming language.",
        "Students who wish to pursue a career in software development."
      ]
    },
    {
      "title": "Computer Programming for Beginners",
      "url": "https://www.udemy.com/course/computer-programming-for-beginners/",
      "bio": "Learn the basic concepts of programming using Python and JavaScript",
      "objectives": [
        "Learn the basic concepts used in Computer Programming.",
        "Create basic programs using Python and JavaScript.",
        "Get hands-on, step-by-step experience writing code.",
        "Includes 4 hands-on coding exercises that enable you to learn by doing and get instant feedback on your code!"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Basic Programming Concepts": [
          "What is programming?",
          "Programming Languages",
          "Variables",
          "Conditional Statements",
          "Console",
          "Loops",
          "Comments",
          "Errors",
          "Functions and Methods",
          "Basic Programming Concepts"
        ],
        "Basic Python Programming": [
          "Installation and Setup of Python IDLE",
          "Python Console",
          "Hello World in Python",
          "Answer and Explanation for Hello World in Python Coding Exercise",
          "Variables in Python",
          "Conditional Statements in Python",
          "If-Else Statements in Python",
          "Answer and Explanation for If-Else Statements in Python Coding Exercise",
          "Loops in Python",
          "For Loops in Python",
          "Answer and Explanation for For Loops in Python Coding Exercise",
          "While Loops in Python",
          "Answer and Explanation for While Loops in Python Coding Exercise",
          "Comments in Python",
          "Errors in Python",
          "Functions in Python",
          "Python Programming Concepts"
        ],
        "Basic JavaScript Programming": [
          "Installation and Setup of Notepad++",
          "JavaScript Console",
          "Variables in JavaScript",
          "Conditional Statements in JavaScript",
          "Loops in JavaScript",
          "Comments in JavaScript",
          "Errors in JavaScript",
          "Functions in JavaScript",
          "Basic JavaScript Programming"
        ],
        "Conclusion and Course Summary": [
          "Summary",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You don't need any prior programming knowledge or experience",
        "You should be able to use a PC at beginner level."
      ],
      "description": "This course is meant to introduce people who have no programming experience to the world of computer science. With the tech industry becoming one of the most trending fields in the job market, learning how to program can be one of the most important and meaningful skills. This course will teach the basic, foundation concepts of programming in an easy-to-follow manner.\n\n\nThe first part of the course will get students acquainted with some basic concepts used in programming and will lay the conceptual groundwork that the rest of the course will build upon. After learning the basic terms and concepts of computer programming, the next two sections of the course allow students to practice these concepts hand-on.\n\n\nStudents will follow along with basic examples in two programming languages: Python and JavaScript. Both languages are easy for beginners to learn and are very user friendly. This course won’t make you an expert programmer, but it will give you an exciting first look at programming and a foundation of basic concepts with which you can start your journey learning computer programming.\n\n\nUpdate: The course now features hands-on coding exercises where you can put the programming skills you learned to use and get instant feedback on your code! The best way to learn programming is by doing!",
      "target_audience": [
        "Anyone with little to no programming experience.",
        "Anyone who wants to learn to code.",
        "Anyone who wants to learn programming but doesn't know where to start."
      ]
    },
    {
      "title": "Learn Python: Python for Beginners",
      "url": "https://www.udemy.com/course/learn-python/",
      "bio": "Python introduction for beginners. Learn complete Python from scratch!",
      "objectives": [
        "Create fully functional Python programs",
        "Understand user input",
        "Learn about loop structures and conditionals",
        "Correctly execute operations in Python",
        "Work with Python file handling",
        "Create and modify data structures in Python",
        "Manipulate strings and data"
      ],
      "course_content": {
        "Getting Started": [
          "Welcome!",
          "Install Python",
          "About Python",
          "Hello World"
        ],
        "The Basics": [
          "Basic Syntax",
          "Variables",
          "Strings",
          "Lists",
          "Dictionaries",
          "Tuples",
          "Extra: Tuple Unpacking",
          "Exercise",
          "Exercise Solution"
        ],
        "Conditionals and Loops": [
          "If-Else Statements",
          "For Loops",
          "While Loops",
          "Pass, Break, and Continue",
          "Extra: Exercise Loop"
        ],
        "User Input": [
          "User Input and Casting",
          "Exceptions"
        ],
        "Functions and Files": [
          "Understanding Functions",
          "Opening and Reading Files",
          "Writing to Files",
          "Copying a File"
        ],
        "Classes and Objects": [
          "Creating Classes",
          "Objects"
        ],
        "Graphics and Animatons": [
          "Tkinter Intro"
        ]
      },
      "requirements": [
        "Internet Connection",
        "Mac OSX or PC with Windows Vista or Newer or Linux"
      ],
      "description": "Do you want to become a programmer?\n\nDo you want to be able to create games, work with files, manipulate data, and much more?\nIf you want to learn programming or are learning Python for the first time, then you've come to the right place!\nPython is a powerful, modern programming language that has the capabilities required for experienced programmers, while being easy enough for beginners to learn. Python is a well-developed, stable, and fun programming language that is suitable for complex and simple development projects. Programmers love Python because of how simple and easy it is to use.\nThis course has everything you need to get started with Python. We'll first start with the basics of Python - learning about strings, variables, and data types. Then, we'll move on to loops and conditionals. Once we're done with that, we'll learn about functions and files in Python. All of this will culminate towards building a fun game using the concepts we've learned in Python. The entire course is filled with exercises that challenge you so that you get the best experience possible.\nI hope you're excited to dive into Python with this course. So what are you waiting for? Let's get started!",
      "target_audience": [
        "Programmers",
        "Students and Teachers",
        "Beginners",
        "Anyone who wants to learn to program with Python!"
      ]
    },
    {
      "title": "Python for Beginners with Examples",
      "url": "https://www.udemy.com/course/ardit-sulce-python-for-beginners/",
      "bio": "A Python course for the busy ones to learn Python programming. Learn and practice Python by building two complete apps.",
      "objectives": [
        "Learn Python from scratch",
        "Learn all Python basics such as variables, functions, conditionals, loops, text processing, file processing and more.",
        "Learn the basics by using real-world examples",
        "Create a command-line-based program",
        "Create a desktop app that converts between different units",
        "Create a standalone version of the desktop app that runs on Windows, Mac, and Linux computers",
        "Learn the wxPython GUI library to develop desktop graphical user interfaces",
        "Create a web application that runs on the browser",
        "Deploy a web application to a live server so everyone who has a browser can use it",
        "Learn the Flask web framework to do web development with Python"
      ],
      "course_content": {
        "Getting Started": [
          "Course Introduction",
          "Your First Python Program",
          "Helpful Resources",
          "The Command Line",
          "The Python Shell",
          "Your Second Python Program"
        ],
        "Python Basics": [
          "Variables",
          "Strings",
          "Numbers",
          "Variables, strings, and numbers",
          "Variables (E)",
          "Get Variable Value (E)",
          "Programming Tip ✏️",
          "Math Operators",
          "Math Operators (E)",
          "Builtin Functions",
          "Simple Sum (E)",
          "Lists",
          "Lists (E)",
          "List Indexing and Slicing",
          "List Slicing Examples",
          "Ranges",
          "Indexing (E)",
          "Slicing (E)",
          "More on Indexing (E)",
          "More on Slicing (E)",
          "List Indexing (E)",
          "Indexing and Slicing",
          "Append to List (E)",
          "Remove from List (E)",
          "Append from List to List (E)",
          "Concatenate List Items (E)",
          "Tuples",
          "Dictionaries",
          "Create Dictionary (E)",
          "Sequences, collections, strings and iterations",
          "More Operations with Dictionaries",
          "User Input",
          "Conditionals",
          "Conditionals with Multiple Conditions",
          "Conditionals (Q)",
          "Custom Functions",
          "Custom Function Example",
          "Create Function (E)",
          "Exponential Function (E)",
          "Custom Functions: Return Vs. Print",
          "Custom Functions with Conditionals",
          "Calculate Length (E)",
          "Solution (E)",
          "Custom Functions with Multiple Parameters",
          "Sum up Function (E)",
          "Function Output (E)",
          "Custom Functions with Default Parameters",
          "Function with Default Parameters (E)",
          "Weather Function (E)",
          "Solution (E)",
          "Functions and if-else (E)",
          "Solution (E)",
          "Functions and if-elif-else (E)",
          "Solution (E)",
          "Opening Files in Python",
          "Working with File Paths",
          "Processing File Content",
          "Reading Files (E)",
          "Solution (E)",
          "For Loops",
          "For Loops (E)",
          "Solution (E)",
          "For Loops (Q)",
          "For Loop with Conditional Block (E)",
          "Solution (E)",
          "File Content Length (E)",
          "Solution (E)",
          "Functions, Conditionals, and Loops (E)",
          "Solution (E)",
          "Writing to a Text File",
          "Appending to a Text File",
          "Reading and Appending to a Text File",
          "Writing Multiple Lines in a Text File (E)",
          "Tip: Writing Multiple Lines in a Text File (E)",
          "Solution (E)"
        ],
        "Beyond the Basics": [
          "Section Introduction",
          "Setting Up",
          "While Loop",
          "While Loop with Password Checker",
          "String Formatting",
          "Modules, Libraries, and Packages",
          "Installing Python Libraries",
          "Dates and Times",
          "Datetime Formatting Codes",
          "Looping Over Multiple Sequences",
          "The \"with\" Context Manager",
          "Files, Loops, Functions, and Conditionals (E)",
          "Solution (E)",
          "Merging Text Files (E)",
          "Tip: Merging Text Files (E)",
          "Solution (E)",
          "What are Objects in Python?"
        ],
        "A Real World Desktop App": [
          "From Command Line to Graphical User Interface (GUI)",
          "Making a \"Bare Bone\" GUI",
          "Creating the Widgets",
          "Making the GUI Interactive",
          "Distributing the Program: Making a Standalone Executable"
        ],
        "A Real World Web App": [
          "Preview of the Web App",
          "Creating a Bare-Bone App",
          "Creating an App with User Widgets",
          "Finishing the App",
          "Distributing the Program: Deploying the App to a Live Server"
        ],
        "Offers for my Other Python Courses": [
          "Bonus lecture ⭐️✔️",
          "Test Video 1",
          "Test Video 2"
        ]
      },
      "requirements": [
        "A working computer (Windows, Mac, or Linux)",
        "No prior knowledge of Python is required"
      ],
      "description": "This Python course has everything you need to know to start coding in Python and not even that, by the end of the course, you will know how to build complete programs and also build graphical user interfaces for your programs so you can impress your employer or your friends. I will guide you step by step, starting from the basics and always assuming you don't have previous programming experience or a computer science degree. In fact, most people who learn Python come from a wide variety of careers.\nThis course is designed to teach you Python and give you a real feel of how to use Python in a real environment. You will get this real-world Python experience by gaining free access to a remote server where Python is already installed. You will write and run Python programs directly on that remote computer in an easy fashion by simply using your internet browser. This will also allow you to run Python programs 24/7 on that server and let the apps do interesting tasks while you sleep. That will make you understand Python's real power in a real server environment, and I will guide you through the entire process.\nThe course is ideal for those who haven't programmed before. It also works for experienced programmers who don't know Python because the course offers you a training package so dense with information and practical activities you will not need to look further.\nBesides videos, you will also find a lot of Python exercises in the course. These are interactive exercises that you can solve directly on the Udemy exercise interface. The course also contains quizzes that will help you constantly check the knowledge you get during the videos. This variety of learning material will help you solidify your Python skills and give you a fun learning experience.\nThis course has all you need to get you started. After you take it, you will be ready to go to the next level of specializing in one of the Python fields, such as data science or web development. Python is one of the most needed skills nowadays. Sign up today!",
      "target_audience": [
        "Those who don't know where to start with learning Python.",
        "Those who want to use Python regardless of the technology field they want to apply the language to.",
        "Those who need a complete guide on how to start and continue their career with Python."
      ]
    },
    {
      "title": "Master Computer Vision™ OpenCV4 in Python with Deep Learning",
      "url": "https://www.udemy.com/course/master-computer-vision-with-opencv-in-python/",
      "bio": "Master OpenCV4 like a pro while learning Dlib, Deep Learning Computer Vision (Keras, TensorFlow & Caffe) + 21 Projects!",
      "objectives": [
        "Understand and use OpenCV4 in Python",
        "How to use Deep Learning using Keras & TensorFlow in Python",
        "Create Face Detectors & Recognizers and create your own advanced face swaps using DLIB",
        "Object Detection, Tracking and Motion Analysis",
        "Create Augmented Reality Apps",
        "Programming skills such as basic Python and Numpy",
        "How to use Computer Vision in executing cool startup ideas",
        "Understand Neural and Convolutional Neural Networks",
        "Learn to build simple Image Classifiers in Python",
        "Learn to build an OCR Reader for Credit Cards",
        "Learn to Perform Neural Style Transfer Using OpenCV",
        "Learn how to do Multi Object Detection in OpenCV (up to 90 Objects!) using SSDs (Single Shot Detector)",
        "Learn how to convert black and white Images to color using Caffe",
        "Learn to build an Automatic Number (License) Plate Recognition (ALPR)",
        "Learn the Basics of Computer Vision and Image Processing"
      ],
      "course_content": {
        "Course Introduction and Setup": [
          "Introduction",
          "Introduction to Computer Vision and OpenCV",
          "About this course",
          "READ THIS - Guide to installing and setting up your OpenCV4.0.1 Virtual Machine",
          "Recomended - Setup your OpenCV4.0.1 Virtual Machine",
          "Installation of OpenCV & Python on Windows",
          "Installation of OpenCV & Python on Mac",
          "Installation of OpenCV & Python on Linux",
          "Set up course materials (DOWNLOAD LINK BELOW) - Not needed if using the new VM"
        ],
        "Basics of Computer Vision and OpenCV": [
          "What are Images?",
          "How are Images Formed?",
          "Storing Images on Computers",
          "Getting Started with OpenCV - A Brief OpenCV Intro",
          "Grayscaling - Converting Color Images To Shades of Gray",
          "Understanding Color Spaces - The Many Ways Color Images Are Stored Digitally",
          "Histogram representation of Images - Visualizing the Components of Images",
          "Creating Images & Drawing on Images - Make Squares, Circles, Polygons & Add Text"
        ],
        "Image Manipulations & Processing": [
          "Transformations, Affine And Non-Affine - The Many Ways We Can Change Images",
          "Image Translations - Moving Images Up, Down. Left And Right",
          "Rotations - How To Spin Your Image Around And Do Horizontal Flipping",
          "Scaling, Re-sizing and Interpolations - Understand How Re-Sizing Affects Quality",
          "Image Pyramids - Another Way of Re-Sizing",
          "Cropping - Cut Out The Image The Regions You Want or Don't Want",
          "Arithmetic Operations - Brightening and Darkening Images",
          "Bitwise Operations - How Image Masking Works",
          "Blurring - The Many Ways We Can Blur Images & Why It's Important",
          "Sharpening - Reverse Your Images Blurs",
          "Thresholding (Binarization) - Making Certain Images Areas Black or White",
          "Dilation, Erosion, Opening/Closing - Importance of Thickening/Thinning Lines",
          "Edge Detection using Image Gradients & Canny Edge Detection",
          "Perspective & Affine Transforms - Take An Off Angle Shot & Make It Look Top Down",
          "Mini Project 1 - Live Sketch App - Turn your Webcam Feed Into A Pencil Drawing"
        ],
        "Image Segmentation & Contours": [
          "Segmentation and Contours - Extract Defined Shapes In Your Image",
          "Sorting Contours - Sort Those Shapes By Size",
          "Approximating Contours & Finding Their Convex Hull - Clean Up Messy Contours",
          "Matching Contour Shapes - Match Shapes In Images Even When Distorted",
          "Mini Project 2 - Identify Shapes (Square, Rectangle, Circle, Triangle & Stars)",
          "Line Detection - Detect Straight Lines E.g. The Lines On A Sudoku Game",
          "Circle Detection",
          "Blob Detection - Detect The Center of Flowers",
          "Mini Project 3 - Counting Circles and Ellipses"
        ],
        "Object Detection in OpenCV": [
          "Object Detection Overview",
          "Mini Project # 4 - Finding Waldo (Quickly Find A Specific Pattern In An Image)",
          "Feature Description Theory - How We Digitally Represent Objects",
          "Finding Corners - Why Corners In Images Are Important to Object Detection",
          "SIFT, SURF, FAST, BRIEF & ORB - Learn The Different Ways To Get Image Features",
          "Mini Project 5 - Object Detection - Detect A Specific Object Using Your Webcam",
          "Histogram of Oriented Gradients - Another Novel Way Of Representing Images"
        ],
        "Object Detection - Build a Face, People and Car/Vehicle Detectors": [
          "HAAR Cascade Classifiers - Learn How Classifiers Work And Why They're Amazing",
          "Face and Eye Detection - Detect Human Faces and Eyes In Any Image",
          "Mini Project 6 - Car and Pedestrian Detection in Videos"
        ],
        "Augmented Reality (AR) - Facial Landmark Identification (Face Swaps)": [
          "Face Analysis and Filtering - Identify Face Outline, Lips, Eyes Even Eyebrows",
          "Merging Faces (Face Swaps) - Combine Two Faces For Fun & Sometimes Scary Results",
          "Mini Project 7 - Live Face Swapper (like MSQRD & Snapchat filters!!!)",
          "Mini Project 8 - Yawn Detector and Counter"
        ],
        "Simple Machine Learning using OpenCV": [
          "Machine Learning Overview - What Is It & Why It's Important to Computer Vision",
          "Mini Project 9 - Handwritten Digit Classification",
          "Mini Project # 10 - Facial Recognition - Make Your Computer Recognize You"
        ],
        "Object Tracking & Motion Analysis": [
          "Filtering by Color",
          "Background Subtraction and Foreground Subtraction",
          "Using Meanshift for Object Tracking",
          "Using CAMshift for Object Tracking",
          "Optical Flow - Track Moving Objects In Videos",
          "Mini Project # 11 - Ball Tracking"
        ],
        "Computational Photography & Make a License Plate Reader": [
          "Mini Project # 12 - Photo-Restoration",
          "Mini Project # 13 - Automatic Number-Plate Recognition (ALPR)"
        ]
      },
      "requirements": [
        "Little to no programming knowledge is needed, but basic programing knowledge will help",
        "Windows 10 or Ubuntu or a MacOS system",
        "A webcam to implement some of the mini projects"
      ],
      "description": "Welcome to one of the most thorough and well-taught courses on OpenCV, where you'll learn how to Master Computer Vision using the newest version of OpenCV4 in Python!\n======================================================\nNOTE: Many of the earlier poor reviews was during a period of time when the course material was outdated and many of the example code was broken, however, this has been fixed as of early 2019 :)\n======================================================\nComputer Vision is an area of Artificial Intelligence that deals with how computer algorithms can decipher what they see in images! Master this incredible skill and be able to complete your University/College Projects, automate something at work, start developing your startup idea or gain the skills to become a high paying ($400-$1000 USD/Day) Computer Vision Engineer.\n======================================================\nLast Updated Aug 2019, you will be learning:\nKey concepts of Computer Vision & OpenCV (using the newest version OpenCV4)\nImage manipulations (dozens of techniques!) such as transformations, cropping, blurring, thresholding, edge detection and cropping.\nSegmentation of images by understanding contours, circle, and line detection. You'll even learn how to approximate contours, do contour filtering and ordering as well as approximations.\nFeature detection (SIFT, SURF, FAST, BRIEF & ORB) to do object detection.\nObject Detection for faces, people & cars.\nExtract facial landmarks for face analysis, applying filters, and face swaps.\nMachine Learning in Computer Vision for handwritten digit recognition.\nFacial Recognition.\nMotion Analysis & Object Tracking.\nComputational photography techniques for Photo Restoration (eliminate marks, lines, creases, and smudges from old damaged photos).\nDeep Learning ( 3+ hours of Deep Learning with Keras in Python)\nComputer Vision Product and Startup Ideas\nMulti-Object Detection (90 Object Types)\nColorize Black & White Photos and Video (using Caffe)\nNeural Style Transfers - Apply the artistic style of Van Gogh, Picasso, and others to any image even your webcam input\nAutomatic Number-Plate Recognition (ALPR\nCredit Card Number Identification (Build your own OCR Classifier with PyTesseract)\n======================================================\nYou'll also be implementing 21 awesome projects!\n======================================================\nOpenCV Projects Include:\nLive Drawing Sketch using your webcam\nIdentifying Shapes\nCounting Circles and Ellipses\nFinding Waldo\nSingle Object Detectors using OpenCV\nCar and Pedestrian Detector using Cascade Classifiers\nLive Face Swapper (like MSQRD & Snapchat filters!!!)\nYawn Detector and Counter\nHandwritten Digit Classification\nFacial Recognition\nBall Tracking\nPhoto-Restoration\nAutomatic Number-Plate Recognition (ALPR)\nNeural Style Transfer Mini Project\nMulti-Object Detection in OpenCV (up to 90 Objects!) using SSD (Single Shot Detector)\nColorize Black & White Photos and Video\nDeep Learning Projects Include:\nBuild a Handwritten Digit Classifier\nBuild a Multi-Image Classifier\nBuild a Cats vs Dogs Classifier\nUnderstand how to boost CNN performance using Data Augmentation\nExtract and Classify Credit Card Numbers\n======================================================\nWhat previous students have said:\n\n\"I'm amazed at the possibilities. Very educational, learning more than what I ever thought was possible. Now, being able to actually use it in a practical purpose is intriguing... much more to learn & apply\"\n\"Extremely well taught and informative Computer Vision course! I've trawled the web looking for Opencv python tutorials resources but this course was by far the best amalgamation of relevant lessons and projects. Loved some of the projects and had lots of fun tinkering them.\"\n\n\"Awesome instructor and course. The explanations are really easy to understand and the materials are very easy to follow. Definitely a really good introduction to image processing.\"\n\"I am extremely impressed by this course!! I think this is by far the best Computer Vision course on Udemy. I'm a college student who had previously taken a Computer Vision course in undergrad. This 6.5 hour course blows away my college class by miles!!\"\n\n\"Rajeev did a great job on this course. I had no idea how computer vision worked and now have a good foundation of concepts and knowledge of practical applications. Rajeev is clear and concise which helps make a complicated subject easy to comprehend for anyone wanting to start building applications.\"\n======================================================\n\nWhy Learn Computer Vision in Python using OpenCV?\nComputer vision applications and technology are exploding right now! With several apps and industries making amazing use of the technology, from billion-dollar apps such as Pokémon GO, Snapchat and up and coming apps like MSQRD and PRISMA.\nEven Facebook, Google, Microsoft, Apple, Amazon, and Tesla are all heavily utilizing computer vision for face & object recognition, image searching and especially in Self-Driving Cars!\nAs a result, the demand for computer vision expertise is growing exponentially!\nHowever, learning computer vision is hard! Existing online tutorials, textbooks, and free MOOCs are often outdated, using older incompatible libraries or are too theoretical, making it difficult to understand.\nThis was my problem when learning Computer Vision and it became incredibly frustrating. Even simply running example code I found online proved difficult as libraries and functions were often outdated.\nI created this course to teach you all the key concepts without the heavy mathematical theory while using the most up to date methods.\nI take a very practical approach, using more than 50 Code Examples.\nAt the end of the course, you will be able to build 12 Awesome Computer Vision Apps using OpenCV in Python.\n\nI use OpenCV which is the most well supported open-source computer vision library that exists today! Using it in Python is just fantastic as Python allows us to focus on the problem at hand without being bogged down by complex code.\nIf you're an academic or college student I still point you in the right direction if you wish to learn more by linking the research papers of techniques we use.\nSo if you want to get an excellent foundation in Computer Vision, look no further.\nThis is the course for you!\nIn this course, you will discover the power of OpenCV in Python, and obtain skills to dramatically increase your career prospects as a Computer Vision developer.\nYou get 3+ Hours of Deep Learning in Computer Vision using Keras, which includes:\nA free Virtual Machine with all Deep Learning Python Libraries such as Keras and TensorFlow pre-installed\nDetailed Explanations on Neural Networks and Convolutional Neural Networks\nUnderstand how Keras works and how to use and create image datasets\nBuild a Handwritten Digit Classifier\nBuild a Multi-Image Classifier\nBuild a Cats vs Dogs Classifier\nUnderstand how to boost CNN performance using Data Augmentation\nExtract and Classify Credit Card Numbers\nAs for Updates and support:\nI will be continuously adding updates, fixes, and new amazing projects every month!\nI will be active daily in the 'questions and answers' area of the course, so you are never on your own.\nSo, are you ready to get started? Enroll now and start the process of becoming a master in Computer Vision today!",
      "target_audience": [
        "Beginners who have an interest in computer vision",
        "College students looking to get a head start before starting computer vision research",
        "Anyone curious using Deep Learning for Computer Vision",
        "Entrepreneurs looking to implement computer vision startup ideas",
        "Hobbyists wanting to make a cool computer vision prototype",
        "Software Developers and Engineers wanting to develop a computer vision skillset"
      ]
    },
    {
      "title": "Python Programming for Beginners in Data Science",
      "url": "https://www.udemy.com/course/just-enough-python/",
      "bio": "This Python for beginners course teaches you \"just enough\" python training online with Python 3 for Data Science",
      "objectives": [
        "Learn just enough Python Programming to do Data Science, Machine Learning and Deep Learning",
        "Have a good understanding of the core concepts of Python Programming",
        "Form a good programming base to be able to apply it to Machine Learning Algorithms",
        "Just enough Object Oriented Python as well"
      ],
      "course_content": {
        "Day 0 - Python Setup": [
          "Why Python",
          "About the Course",
          "Python Setup",
          "Hello World in Python",
          "Python IDE Setup",
          "Print Hello world on the console"
        ],
        "Day 1 - Python Basics": [
          "What are Variables",
          "Variables - Types of Numbers",
          "Variables - Strings, Boolean & Reserved Keywords",
          "Variables Quiz",
          "Variables - Quiz",
          "Assign variables",
          "Swap two variables in Python",
          "Variables - Recap",
          "Variables - Challenge - Discussion",
          "Type Conversion",
          "Type Conversion Quiz",
          "Type conversion Coding Exercise",
          "Correct errors in Type Conversion",
          "Type Conversion Quiz Discussion",
          "Arithmetic Operators",
          "Comparision Operators",
          "Comparison operators quiz",
          "Operator Precedence",
          "Operator Precedence Quiz",
          "Logical Operators",
          "Combine Logical operators"
        ],
        "Day 1 (contd) - Flow Control": [
          "if statement",
          "python blocks",
          "Find out if a number is positive, negative or zero",
          "nested if statement",
          "elif statement",
          "else statement",
          "flow control quiz - discussion",
          "flow control challenges - discussion",
          "if statement - Find the oldest students among the three"
        ],
        "Day 2 - Loops": [
          "for loop",
          "Odd numbers between 1 and 20",
          "While loop",
          "Sum of numbers from 1 to 1000",
          "Operator Precedence Exercise",
          "Challenge Discussion - 1",
          "Challenge Discussion - 2",
          "Challenge Discussion - 3",
          "for vs while loop",
          "Break Statement - Theory",
          "Break Statement - Program",
          "for-else statement",
          "Nested loops"
        ],
        "Day 3 - Strings & Functions": [
          "What are Strings",
          "Sub-strings",
          "Split strings",
          "Strip strings",
          "Other String Functions",
          "Cheatsheet",
          "Challenges",
          "Python Functions",
          "Create your own Function",
          "Nth Fibonacci Number",
          "Sum of numbers divisible by 5 between any two given numbers",
          "doc string",
          "function arguments",
          "Python functions - Summary",
          "Python Built-in Functions",
          "Python Built-in functions Summary",
          "Sum of all alternate odd numbers",
          "First Prime Numbers between a given range of numbers",
          "Print a pattern",
          "Reverse a string"
        ],
        "Day 4 - Data Structures - Lists": [
          "What are Lists",
          "Challenge",
          "List Indexing and Merging",
          "List Manipulation",
          "Challenge - Average Grades v3",
          "Challenge contd.",
          "Challenge contd.",
          "Nested Lists",
          "Enumerate Lists",
          "Merge and Sort Lists",
          "List Slicing",
          "Python Dictionary",
          "get-vs-index",
          "Challenge - Vowels",
          "Dictionary access",
          "Dictionary - Key & Value objects",
          "Challenge - 1",
          "Challenge - 2",
          "Challenge - 2 ( contd)",
          "Dictionary - Deletion",
          "Parts of an URL"
        ],
        "Day 5 - Data Structures (contd.)": [
          "Python Tuples",
          "Python Tuples ( contd. )",
          "Python Sets",
          "Set Operations (Union, Intersection, Difference etc )",
          "Python Sets - (contd)",
          "Python Sets - Summary"
        ],
        "Day 6 - Object Oriented Python": [
          "What is Object Oriented Python",
          "Write your first Python Class",
          "Attributes & Methods in a class"
        ],
        "Day 7 - I/O & Exceptions": [
          "I/O - Input / Output",
          "I/O - contd.",
          "Exceptions"
        ],
        "Day 8 - Python Standard Library": [
          "Date Object",
          "Quiz Discussion",
          "Time delta",
          "Time",
          "Date time",
          "File Operations - Read files",
          "File operations - Write & Append files",
          "File Operations - Exception Handling",
          "Math Module"
        ]
      },
      "requirements": [
        "None in general - This is a beginner's course",
        "A PC or Mac with good internet connections.",
        "All required software (like Python executable, IDE etc) can be downloaded",
        "Enough enthusiasm to learn the course through its quizzes and exercises."
      ],
      "description": "Data Science, Machine Learning, Deep Learning & AI are hot areas right now. But to learn these, for some of us programming is a bit of a problem. Not all of us are from a programming background. Or some come from a Java background and might not know Python.\n\n\nThese days, Python is the de-facto ( almost ) programming language for Data Science. So,  to fill that gap, we have created a course that covers just enough Python for you to start up and running with any of you the Machine learning algorithms you are interested in.\n\n\nPython Programming -\nPython programming is one of the core skills required for any Data Scientist. However, not all wanna-be data scientists have the required programming background let alone Python skills. This Python online training program is designed to let you start all the way from the basics. It teaches you the basic skills in python. Here are some of the topics we will discuss in the course. You don't have to understand these topics just yet. The listing is to just give a good inventory of the topics that we will be covering in this Python course.\nvariables, type conversions, flow control, operators & Expressions.\nLoops - for & while loops , nested loops, for else loops\nStrings, built-in and user defined functions\nData Structures - Lists, Dictionaries, Tuples, Sets\nObject Oriented Python\nI/O, exceptions\nStandard library - date/time, file I/O, math, statistics & random numbers.\nFor any data scientist, these are the absolute essentials of python.\n\n\nWhat about Data Science & Machine Learning ?\nThis course does NOT teach you data science or machine learning. Python is a broad purpose programming langauge. It can be  used for a variety of purposes like building websites, process automation, devops, Data science etc. However, this Python programming course is designed specifically to cater to the needs of the Machine Learning or Data Science learner. By the end of this course, you will be in a good position to apply your python skills to apply to any of the Machine Learning or Data Science algorithms in Python.\n\n\nWho this course is not for ?\nAlthough most newbies or experienced folks will benefit from this course, it is not suitable for\nthose experienced in Python already.\nthose who already have some Python programming experience, but wish to learn more about its application in Data Science or Machine learning.\nFree Preview\nWe have deliberately kept quite a number of videos for free preview. Hopefully, this will enable you to judge our Python Programming course before you take it. Either way, Udemy's 30 day return program will hopefully help you with a refund in case you don't like the course. However, we are absolutely positive you will like the course.",
      "target_audience": [
        "Non-Programmers interested to learn Python as their first language",
        "Non-Python Programmers interested in learning Python for Machine Learning and Data Science"
      ]
    },
    {
      "title": "Java for Beginners - Learn all the Basics of Java",
      "url": "https://www.udemy.com/course/java-for-beginners-learn-all-the-basics-of-java/",
      "bio": "Learn Java programming with various java projects- Understand key Java elements and be able to create basic java apps",
      "objectives": [
        "Learn how to use Java the right way",
        "Understand complex functions in Java",
        "Be able to use Java on a daily basis",
        "Create your own basic programs with Java",
        "Learn at your own rythm with different practical exercices at each course",
        "Learn Different Tips and Trics to improve your programming skills"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is Java and course structure",
          "Setting Up everything"
        ],
        "Let's start": [
          "Writing our first lines of code",
          "Understanding Data types",
          "Creating and using variables",
          "Basic math operations",
          "Scanner method and String",
          "Scanner method, numbers and boolean",
          "Java operators",
          "Comparing in Java",
          "The basics of the IF function",
          "Practicing with the IF function",
          "Creating a car selector Part 1",
          "Creating a car selector Part 2",
          "Basic Data storage",
          "The basics of loops",
          "Writing simple loops",
          "Creating a car color finder",
          "Creating an average to GPA converter",
          "Creating a basic test",
          "Collection lists and maps",
          "The basics of lists",
          "The basis of maps",
          "Introduction to class and objects",
          "Final Project Part 1",
          "Final Project Part 2",
          "Final Project Part 3",
          "Final Project Part 4",
          "Final Project Part 5",
          "Conclusion",
          "Thank you",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Wanting to learn programming in Java",
        "Having a computer",
        "no experience required"
      ],
      "description": "Learning the how to program in any programming language can be very complicated especially if you never did any programming before. Programming in java is not different, but this course is here to help master this programming language. If you :\n- Need to learn the basics of this programming language for work\n- Are in school and need to understand certain Java concepts\n- Want to create various projects with this programming language\n- Simply are curious about this topic\nThen you will probably love this course. Not only you will learn all the basics of java programming but you will also have a lot of practice throughout the course. Indeed, but the end of this course you will have a solid basis of Java programming and will be able to create on your own various Java applications.\n\n\nThe structure of the course\nThe way this course is created and structured is really made to help you learn all this basics of this programming language. From installing the right tools and writing your basic lines of code to creating more advanced apps, this course has everything you need to start your java programming journey. Also, this course has been made to cover all the basic concepts around Java programming. This way, you will understand the logic behind this programming language and will be able to create applications on your own. Indeed, if you have never programmed before, the hardest part is really to understand the programming logic and this course has everything you need to succed in java programming.\nAlso, this course is built around a simple logic of learning by practice. In other words, this course is not only theoritical and it contains a lot of practice to allow to understand in depth this programming language. Indeed, the best way to learn something is by practicing it this is why this course contains many exercices and examples to help achieve your goal of learning how to program with Java.\n\n\nFor who is this course designed\nThere is a lot of different Java courses that exist all over the internet. But, this diffferent, all the concepts that are presented are simplified to help you understand them in depth. Also, each element that is presented comes with various programming examples this way you will be able to practice everything. In other words, if you have never did any programming in your life and always wanted to start somewhere then you will probably love this course. The way this course is presented and structured is here to help you have a solid understanding of java programming by the end of this course.\nWhy should I take this course\nIf programming with java is something that you always wanted to learn, then you should definitely take this course. The first thing that this course will teach you is understanding the programming logic and how to use it with Java. Also, you will learn different Java concepts as well as create various Java appliactions and projects\nThere is no risk involved in taking this course\nThis course comes with a 100% satisfaction guarantee, this means that if your are not happy with what you have learned, you have 30 days to get a complete refund with no questions asked. Also, if there is any concept that you find complicated or you are just not able to understand, you can directly contact me and it will be my pleasure to support you in your learning.\n\n\nThis means that you can either learn amazing skills that can be very useful in your professional or everyday life or you can simply try the course and if you don't like it for any reason ask for a refund.\nYou can't lose with this type of offer !!\n\n\nENROL NOW and start learning today :)",
      "target_audience": [
        "people curious about programming",
        "People interested to learn how to program in python"
      ]
    },
    {
      "title": "C++ Complete Training Course for C++ Beginners All In One",
      "url": "https://www.udemy.com/course/c-complete-training-course-for-beginners-2022/",
      "bio": "Learn C++ Programming language with C++ Complete Training Course for C++ Beginners C++ basics And C++ Advanced",
      "objectives": [
        "You will learn C++ concepts such as console output, C++ Variables and Data Types, C++ Operators And more",
        "You will learn how to write a complete C++ program that takes user input, processes and outputs the results",
        "You will learn common programming constructs as they are implemented in C++ including C++ 11. Topics include the use of C++ for memory management, file input/o",
        "You will learn about references, exceptions, and object-oriented programming C++",
        "You will learn Basic data structures such as linked lists, stacks, and queues are covered in terms of their usage and implementation using C++."
      ],
      "course_content": {
        "C++ Complete Training Course for Beginners 2022": [
          "C++ Arrays",
          "C++ Real Bitwise Operator",
          "C++ Relational Operators",
          "C++ Logical Operators.",
          "C++ Assignment Operators",
          "C++ The # Operators",
          "C++ The ## Operators",
          "C++ Raise Function",
          "C++ Pointers To Structure",
          "C++ Namespaces With directives",
          "C++ The Signal() Function",
          "Class Member Functions",
          "C++ Operator Overloading",
          "C++ Thread Joining And Detaching",
          "Dynamic Memory Allocation For Arrays.",
          "C++ Nested Namespaces.",
          "C++ Multiple Inheritance",
          "C++ Operator Precedence",
          "C++ Function Overloading",
          "C++ Function Template",
          "C++ Inheritance",
          "C++ Function like a Macros",
          "C++ Function Call by Pointer.",
          "C++ Define Objects",
          "C++ Function Call by Reference",
          "C++ Function call by Value",
          "C++ Accessing Structure Members",
          "C++ Class Template",
          "C++ Calling a Function",
          "C++ Default Values For Parameters",
          "bonus lecture"
        ]
      },
      "requirements": [
        "Basic Understanding of Computers",
        "No prior knowledge of C++, everything will be covered in this course"
      ],
      "description": "C++ Complete Training Course 2022\nThis course will help you learn C++ basics and give you hands-on experience to create your own projects and work with computer memory. With its adaptability and fast rendering, you’ll find the C++ programming language used everywhere, from web browsers to game development and operating systems to science and machine learning tools.\nThis C++ Programming Course is designed to meet the industry benchmarks. This C++ programming course will give you extensive knowledge of Object-Oriented Programming in C++, Coding Styles and Design Patterns, Generic Programming and Standard Template Library.\nThe course examines common programming constructs as they are implemented in C++ including C++ 11. Topics include the use of C++ for memory management, file input/output (I/O), pointers, references, exceptions, and object-oriented programming. Basic data structures such as linked lists, stacks, and queues are covered in terms of their usage and implementation using C++.\nAlso, this course has been created to help you learn all the basics concepts that are the core of C++ Programing. This way, you will not only program in this language, but you will also understand the logic behind this programming language and will be able to create various applications in it on your own. Indeed, if you don’t have prior programming experience, the hardest part is understanding the programming logic and this course covers all the topics to help you succeed in C++ programming.\nSubjects/topics you will learn through the course are\nC++ Overview\nFunctions and variables\nClasses\nOperator Overloading\nInitialization and Assignment\nStorage Management\nInheritance\nPolymorphism\nException\nTemplates\nSee you Inside the course. Thank you",
      "target_audience": [
        "Beginner in C++ development",
        "Beginner in software development"
      ]
    },
    {
      "title": "Java Bootcamp: Learn Java with 100+ Java Projects",
      "url": "https://www.udemy.com/course/the-complete-java-development-bootcamp/",
      "bio": "Master Core Java: OOP, Collections, Lambda, Streams, Threads & Real-World Projects",
      "objectives": [
        "Be able to program in Java professionally.",
        "Get hands-on experience and solve 100+ coding exercises.",
        "Learn Java best practices from a professional developer.",
        "Become proficient in Java 17.",
        "Learn advanced Java concepts that you can present to prospective employers.",
        "Acquire the Java skills needed to pursue Web Development (Spring Boot), Android Development, Automation, and more!"
      ],
      "course_content": {
        "Module 1 - Java Fundamentals": [
          "Course Outline",
          "Reasons to Learn Java",
          "Join the community",
          "Frequently Asked Questions",
          "Discover More Valuable Content"
        ],
        "Java → Spring Boot → Docker → Kubernetes": [
          "From Java Basics to Cloud-Ready Applications"
        ],
        "Getting Started": [
          "Roadmap",
          "Installing a JDK (Windows)",
          "Installing a JDK (Mac)",
          "Downloading Visual Studio Code with Java Extensions",
          "Preparing for the Next Lesson",
          "Running your First Code (Mac)",
          "Running your First Code (Windows)",
          "Terminal Commands (Mac)",
          "Terminal Commands (Windows)",
          "Common Terminal Errors (Mac)",
          "Common Terminal Errors (Windows)",
          "My Advice",
          "Quiz 1.1",
          "Inlay Hints",
          "Customize your Editor",
          "Workbooks and Challenges (Mac)",
          "Workbooks and Challenges (Windows)",
          "Preparing for Workbook 1.1",
          "Workbook 1.1",
          "Workbook Video Solutions",
          "Workbook Code Solutions",
          "Cheat Sheet"
        ],
        "Getting Started (Challenge)": [
          "Your Initials",
          "Solution"
        ],
        "Variables": [
          "Roadmap",
          "Variables",
          "Updating Variables",
          "Quiz 2.1",
          "Workbook 2.1",
          "String",
          "char",
          "Quiz 2.2",
          "Workbook 2.2",
          "long",
          "double",
          "Quiz 2.3",
          "Math Operators",
          "Workbook 2.3",
          "Type Casting",
          "Quiz 2.4",
          "Workbook 2.4",
          "Build an Interactive Application using Scanner",
          "Debugging",
          "The Next Line Trap",
          "Quiz 2.5",
          "Workbook 2.5",
          "Cheat Sheet"
        ],
        "Variables (Challenge)": [
          "Chatbot",
          "Solution"
        ],
        "Booleans and Conditionals": [
          "Roadmap",
          "The Boolean",
          "Comparison Operators",
          "Comparing Strings",
          "Quiz 3.1",
          "Workbook 3.1",
          "if - else statements",
          "Quiz 3.2",
          "Workbook 3.2",
          "if - else if - else",
          "Quiz 3.3",
          "Workbook 3.3",
          "Workbook 3.4",
          "Logical Operators",
          "Quiz 3.4",
          "Quiz 3.5",
          "Workbook 3.5",
          "Switch Statements",
          "Workbook 3.6",
          "Dealership Project",
          "Workbook 3.7",
          "Cheat Sheet"
        ],
        "Booleans and Conditionals (Challenge)": [
          "Trivia Quiz",
          "Solution"
        ],
        "Functions": [
          "Roadmap",
          "Introduction to Functions",
          "Method vs. Function",
          "Quiz 4.1",
          "Workbook 4.1",
          "Parameters",
          "Quiz 4.2",
          "Workbook 4.2",
          "Return Values",
          "Quiz 4.3",
          "Return Values – Part 2",
          "Void Functions vs. Value-returning Functions",
          "Quiz 4.4",
          "Workbook 4.3",
          "Doc Comments",
          "Workbook 4.4",
          "Scope",
          "Built-in Functions",
          "Quiz 4.5",
          "Workbook 4.5",
          "Dice Project (1)",
          "Quiz 4.6",
          "Dice Project (2)",
          "Cheat Sheet"
        ],
        "Functions (Challenge)": [
          "Rock Paper Scissors (Part 1)",
          "Solution - Part 1",
          "Rock Paper Scissors (Part 2)",
          "Solution - Part 2"
        ]
      },
      "requirements": [
        "A commitment to learn Java"
      ],
      "description": "Are you ready to take your programming skills to the next level? Our comprehensive Java course is designed to help you build a solid foundation in one of the world's most popular programming languages, opening up a world of opportunities for your career.\nJoin us as we guide you through the essentials of Java, from basic syntax and data structures to advanced concepts like lambda expressions, inheritance, and stream operations. With our interactive course format, you'll have access to workbooks and challenges that will help you apply your newfound knowledge and reinforce your learning.\nHere's a sneak peek into what you can expect in this course:\nModule 1: Java Fundamentals\nVariables\nConditionals\nFunctions\nLoops\nArrays\nModule 2: Object-Oriented Programming\nObjects\nImmutable Objects\nList Collections\nMap Collections\nException Handling\nEnums\nInheritance\nHigher-order Functions\nLambda Expressions\nStream Operations\nInterfaces\nInteractive Learning Experience - Our course is designed with your success in mind. Hundreds of Workbooks and challenges will help you practice and apply what you've learned, ensuring you're ready to tackle real-world problems.\nBoost Your Career Prospects - With a thorough understanding of Java, you'll be well-equipped to excel in various domains like web development, mobile app development, automation, and more.\n\n\nDon't miss out on this opportunity to enhance your programming skills and gain a competitive edge in the industry. Enroll in our Java course today and get ready to transform your programming journey! We can't wait to see you in class!",
      "target_audience": [
        "If you want to learn Java by building fun projects.",
        "If you want to learn by doing. This course includes 100 exercises and challenges.",
        "If you want to take ONE course that covers everything you need to learn about Java."
      ]
    },
    {
      "title": "Java Object Oriented Programming:OOPS OOAD & Design Patterns",
      "url": "https://www.udemy.com/course/java-object-oriented-programming-analysis-design-oops-ooad/",
      "bio": "Master Object Oriented in Java, SOLID Design principles, Design Patterns, OOPs philosophy with best practices - 2/e 2019",
      "objectives": [
        "Master OOPs",
        "Object oriented design in Java",
        "Deep understanding of OOPs with OOAD",
        "Design Principles | SOLID and others",
        "Design Patterns",
        "Best Practices"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Resources"
        ],
        "Prerequisites to Learn OOPS and OOAD": [
          "Introduction",
          "First Look : Classes and Objects",
          "Variable and Methods",
          "Import and Packages",
          "Different Access Modifiers",
          "Non Access modifiers | Abstract",
          "Non Access modifiers | Static & Final",
          "Summary"
        ],
        "Object Oriented Programming concepts": [
          "Introduction",
          "Data Hiding",
          "Interface and Abstract classes",
          "1st Pillar | Abstraction",
          "Second Pillar | Encapsulation",
          "Third Pillar | Inheritance",
          "Inheritance Types",
          "Association HAS-A",
          "4th Pillar | Polymorphism | Method Signatures",
          "Method Overloading",
          "Method Overriding",
          "More Method Overriding",
          "Summary"
        ],
        "Some Philosophy of Object Oriented paradigm": [
          "Introduction",
          "Encapsulation",
          "Abstraction",
          "Inheritance",
          "Polymorphism",
          "Interface | Why at all ?",
          "Cohesion | Why needed ?",
          "Coupling | Keeping it loose",
          "Summary"
        ],
        "Design Principles | Art and craft OOPs": [
          "Introduction",
          "DRY | Keep it Dry",
          "KISS",
          "Yagni",
          "SLAP | WHY?",
          "Delegation | why its important",
          "SOLID | Single responsibility principle",
          "SOLID | Open Closed principle",
          "SOLID | Liskov Substitution principle",
          "SOLID | Interface segregation principle",
          "SOLID | Dependency Inversion principle",
          "Summary"
        ],
        "UML for Class diagram and Sequence Diagram | design diagrams": [
          "UML : Class diagram",
          "UML : Sequence diagram"
        ],
        "Design Patterns | Already thought by experts": [
          "Introduction",
          "Type 1 : Creational Design patterns Introduction",
          "Prototype Design Pattern",
          "Builder Design Pattern",
          "Singleton Design pattern",
          "Factory Method Design Pattern",
          "Abstract Factory Design Pattern",
          "Type 2 : Behavioural Design Patterns Introduction",
          "Chain Of Responsibility Pattern",
          "Command Design Pattern",
          "Interpreter Design Pattern",
          "Iterator Design Pattern",
          "Mediator Design Pattern",
          "Memento Design Pattern",
          "Observer Design Pattern",
          "State Design Pattern",
          "Strategy Design Pattern",
          "Template Design Pattern",
          "Visitor Design Pattern",
          "Type 3: Structural Design Pattern Introduction",
          "Adapter Design Pattern",
          "Bridge Design Pattern",
          "Composite Design Pattern",
          "Decorator Design Pattern",
          "Facade Design Pattern",
          "Flyweight Design Pattern",
          "Proxy Design Pattern",
          "Design Patterns - Summary"
        ],
        "Best Practices": [
          "Introduction",
          "Technical Debt",
          "High Cohesion",
          "Loose Coupling",
          "Primitive Obsession - Code smell",
          "Comment Why - Not What",
          "Summary"
        ],
        "Thank You": [
          "Thank you!"
        ]
      },
      "requirements": [
        "Java Basics",
        "Patience to Learn"
      ],
      "description": "Best in class course if your objective is to build a Solid Foundation on OOPs and get your basics strong.\nThis course Course Object Oriented Programming & Design in Java is created with a clear objective in mind to build a solid foundation in Object Oriented Programming.\nBecause Solid and Strong Basics can lead to solve any programming problem! and help to write more elegant Machine and Human friendly code.\nObject Oriented programming is there for quite a while now but we found that the course covers either only programming syntax and concepts of OOPs or Design Principl and patterns.\nIt is essential that when you start learning OOPs you should also learn many other related things like Design Principles, Object oriented design and Design Patterns as well because without learning these concepts your knowledge portfolio for OOPs is not complete.\nSo we bring to you this course where we will not only cover Object Oriented Programming concepts in Java but also Design Patterns, and Design principles along with best practices and OOPs philosophy.\nThis course also have sections where we will discuss about OOPs philosophy that will improve your thinking in Object oriented world.We have also created a small section on UML where we will discuss mainly class diagram and Sequence diagram that will help us learning design patterns.\nOutline of what we have covered in this course\nPrerequisites to Learn OOPs\nClasses, Objects\nVariables-Methods-constructors\npackages, import keyword\nAccess Modifiers\nNon-Access Modifiers\nYou may skip this section if you already know these concepts. After completing the same as we will be prepared to start the Journey. We will start discussing the actual OO concepts\nOOPs Concepts\nData Hiding\nInterfaces and Abstract class\nAbstraction\nEncapsulation\nInheritance - ISA relationship\nTypes of inheritance\nAssociation with concepts of aggregation\nHAS-A Relationship and composition\nPolymorphism - Overloading and overriding\nThis section will cover the basics of OOPs concept related to Java and in general.\nIn Next section of the course we will Quickly discuss some philosophical Angles of OOPs to improve your thinking in Object Oriented world. This section will not have\nmuch of a coding but will after completing this you will certainly feel more confident and connected to Object Oriented World.\nAfter you start thinking clearly in OOPs we will start some of the very Important Design Principles in OOPs. These principles are the De Facto standard for object Oriented design for several years.\nDesign Principles\nSOLID principles\nDRY\nKISS\nYAGNI\nSLAP\n\n\nAfter completing this section you will be very confident and artistic in Object oriented programming.\nAfter completing this we will have a section on Quick UML where we will discuss Class and Sequence Diagram because that is necessary to learn Design Patterns\nUML\nClass Digram\nSequence Daigram\nWe will use a lot of Sequence diagram and Class diagram in while discussing Design Patterns.Then we will come to a very popular topic in OOPs world and that is Design Patterns.We will discuss all 23 GOF design Patterns with the help of UML Code and Sequence diagram.\nCreational Design Patterns\nPrototype Design Pattern\nBuilder Design Pattern\nSingleton Design Pattern\nFactory Method\nAbstract Factory Design Pattern\n\n\nBehavioural Design Patterns\nChain Of Responsibility Pattern\nCommand Design Pattern\nInterpreter Design Pattern\nIterator Design Pattern\nMediator Design Pattern\nMemento Design Pattern\nObserver Design Pattern\nState Design Pattern\nStrategy Design Pattern\nTemplate Design Pattern\nVisitor Design Pattern\n\n\nStructural Design Pattern\nAdapter Design Pattern\nBridge Design Pattern\nComposite Design Pattern\nDecorator Design Pattern\nFacade Design Pattern\nFlyweight Design Pattern\nProxy Design Pattern\nAfter completing this we will discuss some of the coding best practices\nBest practices.\nTechnical Debt\nHigh Cohesion\nLoose Coupling\nPrimitive Obsession - Code smell\nComment why not what\nHope this should be enough for you to become comfortable in Object Oriented programming and design in Java.\n\n\nWe have crafted the content, code examples and all other stuff in a way so that by end of this complete course you start feeling extremely comfortable and Confident in Programming OOPs.\nSo I am excited to welcome you again to this course hope we will have a very fruitful Journey with a clear objective to learn OOPs and OOPs design.\nAll the Best in building a SOLID foundation.\nThis course come with a 30 Days Money back guarantee so do't worry if it does not fit into your needs.\n\n\nWelcome Again! and Happy Learning\nTeam Basics>Strong;",
      "target_audience": [
        "Student how wants to master OOPs",
        "Want to learn Object oriented design in Java",
        "Deep understanding of OOPs with OOAD",
        "Design Principles | SOLID and others",
        "Design Patterns",
        "Best Practices"
      ]
    },
    {
      "title": "Learn Python - Python Programming For Beginners From Scratch",
      "url": "https://www.udemy.com/course/python-introduction/",
      "bio": "Python is a highly paid programming language and is great for beginners. Learn Python from scratch with code exercises.",
      "objectives": [
        "Create simple python applications and move on to more advanced courses"
      ],
      "course_content": {
        "Introduction": [
          "The Zen of Python"
        ],
        "Hello World": [
          "Installation",
          "Hello World",
          "Hello World"
        ],
        "Variables and Comments": [
          "Variables",
          "Comments",
          "Variables and Comments Quiz"
        ],
        "Arithmetic and Concatenation": [
          "Intermediate Conditionals",
          "Arithmetic",
          "Addition",
          "Concatenation",
          "Concatenation",
          "Arithmetic and Concatenation Quiz"
        ],
        "Data Structures": [
          "Lists",
          "List Indices",
          "List Indices Intermediate",
          "Tuples",
          "Dictionaries",
          "Data Structures Quiz"
        ],
        "Control Flow": [
          "Conditionals",
          "Conditionals",
          "Loops",
          "For Loops",
          "Control Flow Quiz"
        ],
        "String and List Methods": [
          "String Methods",
          "String Indices",
          "List Methods",
          "Sort a List",
          "List Length Method",
          "String and List Methods Quiz"
        ],
        "Typecasting and Escape Sequences": [
          "Typecasting",
          "Escape Sequences",
          "Typecasting and Escape Sequences Quiz"
        ],
        "Getting User Input": [
          "User Input",
          "User Input Quiz"
        ],
        "Functions": [
          "Creating Functions",
          "Functions Quiz"
        ]
      },
      "requirements": [
        "A computer and a desire to learn"
      ],
      "description": "Are you interested in learning Python?\nPython is the future of software development. This high-level programming language is commonly regarded as the best programming language to learn for beginners.  And now you can learn it all from the comfort of your home.. in your own time.. without having to attend class.\nLearning Python will give you more opportunities for jobs and career advancement because Python is one of the most requested skills today.\n\n\n5-Star Testimonials\nI know this that this is a beginner's course. The instructor has a calm and patient voice. It appears that he wants you to learn how to do it. 5 stars earned! I am glad that I took the first step!\nExtremely good instructor. His pace is very normal and his explanation is really great. When he was explaining the concepts, Python looked really simple for me, even though this was the first overview i had.\nYes, the videos are very easy to follow and understand.\n\n\nWhy learn Python?\nIt's fun and easy to learn\nHigh salaries\nPython is used for many kinds of development\nPython is the future of AI and Machine Learning.\nDiversity and flexibility\nAnd many more\n\n\nWho is this for?\nThis course is for anyone who wants to take their skills to the next level. Python is a programming language that many believe to be the future of software development. No previous programming experience required. This course is also a great reference for those who are experienced with Python.\n\n\nThis course comes with a 30 day money back guarantee! If you are not satisfied in any way, you'll get your money back.",
      "target_audience": [
        "Anyone who is interested in learning to code"
      ]
    },
    {
      "title": "Complete C# Masterclass",
      "url": "https://www.udemy.com/course/complete-csharp-masterclass/",
      "bio": "Master C# Programming from A to Z. Dive deep into .NET, OOP, Clean Code, LINQ, WPF, Generics, Unit Testing, and more.",
      "objectives": [
        "Learn the fundamentals of programming using C#",
        "Learn how to use variables, methods, loops, conditions",
        "Fully understand how OOP (object oriented programming) works and how to use it",
        "Build beautiful GUIs (Graphical User Interfaces) with WPF (Windows Presentation Foundation)",
        "Create video games using C# and Unity 3D",
        "Learn how to handle errors and avoid them",
        "Work with files, folders, text and paths in .NET framework",
        "Learn how to use LINQ and Lambda Expressions",
        "Learn how to use Databases with MSSQL",
        "Learn advanced techniques like threading and asynchronus development",
        "Learn how to use C# generics to build senior-level software",
        "Learn Clean Code with SOLID and all of its best practices"
      ],
      "course_content": {},
      "requirements": [
        "Visual Studio Community Edition (FREE)",
        "A Windows (10) PC is required for the WPF and Database portions of the course"
      ],
      "description": "Learn C# from A to Z with this Masterclass and become a C# Software Developer.\n\n\nIn this course, you are going to discover how to become a C# developer by learning all the real-world software development skills that you'll need.\n\n\nAre you ready to dive deep into the world of C# and .NET framework development?\n\n\nI have created a course that makes the path to becoming a skilled C# developer as easy as possible, all with this C# Masterclass!\n\n\nYou start off by learning the C# basics and programming concepts in general:\nVariables\nArrays\nIf Statements\nLoops\nBuilding Algorithms & Logic\n\n\nThen you learn the pillars of object-oriented programming:\nClasses\nMethods\nObjects\nInheritance\nPolymorphism\nClean Code\nSOLID principles\n\n\nOnce you mastered them, you will go into advanced C# Topics, such as:\nEvents\nDelegates\nInterfaces\nGenerics\nDatabases\nLINQ\nWPF\nUnit Testing\n\n\nThe C# Masterclass is full of amazing exercises and best practices that'll help you get into professional C# development in a fast and fun way.\n\n\nIn addition to the C# development topics you'll also dive into some of the most popular Frameworks that C# developers use around the world! Such as WPF for building Desktop applications and Unity for building Games.\n\n\nI'm here to help!\nI know that learning to code can be hard at times, and sometimes you just get stuck. But no worries, I am here to help you. Me and my team answer each question as quickly as we can and make sure that you reach your goal of becoming a developer.\n\n\nWho is this course for?\nThe course is for anyone, who wants to learn C# and wants to become professionally good in C# programming. No experience is required whatsoever. It is designed so that anyone who can handle a mouse and keyboard will succeed in finishing it.\n\n\nFull 30-Day Money-Back Guarantee\nThis course comes with a 30-day full money-back guarantee. Take the course, watch every lecture, and do the exercises, and if you are not fully satisfied, ask for a full refund within 30 days. All your money back, no questions asked.\nAbout me, your instructor:\nMy name is Denis Panjuta, and in my courses, I have taught over 500.000 students how to code. I have a Bachelor of Engineering from the University of Applied Sciences in Constance (Germany). I love teaching and creating high-quality courses. My mission? Teaching 10.000.000 people how to code.\n\n\nSee, this is the only C# course you will ever need.\n\n\nYou will learn all the C# skills that you need to know to succeed in C# and .NET coding!\n\n\nDon’t waste any more time and become a C# software engineer by starting this course now.",
      "target_audience": [
        "Everyone who wants to learn C#",
        "Every developer that needs to learn C# for their job",
        "Everyone who wants become a software developer",
        "Everyone who wants to build PC programs with a beautiful UI using WPF",
        "Everyone who wants to learn C# to build video games with Unity 3D"
      ]
    },
    {
      "title": "Java from Beginner to Expert",
      "url": "https://www.udemy.com/course/java-from-beginner-to-expert/",
      "bio": "Java for beginners! Learn Java step by step, become a Java expert, and start building apps with Spring Boot today!",
      "objectives": [
        "the semantics of Java (the meaning of words)",
        "what is a compiler / IDE",
        "variables / types of variables",
        "operators - arithmetic, assigment, logical, bitwise",
        "conditions like if / else / switch",
        "arrays / multi-dimensional arrays",
        "loops - for / while / do-while",
        "methods, overloading/overriding methods, passing variables to methods etc.",
        "object oriented programming",
        "reference variables",
        "constructors",
        "interfaces",
        "exceptions",
        "packages",
        "polymorphism",
        "down casting",
        "lambda expressions",
        "classes/abstract classes",
        "and many more",
        "spring boot"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to my Java course",
          "What is Java? Why Java is so special?",
          "Assumptions in this course"
        ],
        "Basics": [
          "Downloading and installing editor",
          "Creating the project, compilation and execution of your first Java program",
          "Comments",
          "Basics - very important lesson - do not skip!",
          "Java Basics"
        ],
        "Useful shortcus": [
          "Useful shortcuts that will save you lots of time",
          "Useful shortcuts in JAVA - to PRINT"
        ],
        "Variables": [
          "Variables and type of variables",
          "Naming variable conventions",
          "EXERCISE: Test Your Knowledge of Java Variable Naming Conventions",
          "Casting to different type",
          "Check your knowledge about Variables (Updated April 25')",
          "Practise your variables knowledge.",
          "Why Isn’t My Value Converting Properly? Understanding Type Casting in Java"
        ],
        "Operators": [
          "Arithmetic operators",
          "Relational operators (Comparison operators)",
          "Logical operators",
          "Check your knowledge about Operators",
          "Practise what you've learnt about Java"
        ],
        "Conditions": [
          "Conditional statements",
          "What are curly brackets {} used for",
          "Exercise: Age Checker",
          "Switch",
          "Conditional operator ?:",
          "Check your knowledge about Conditional Statements"
        ],
        "Arrays": [
          "Single dimensional arrays",
          "Multi-dimensional arrays",
          "Why Is Only One Row Showing? Understanding 2D Array Iteration",
          "Check your knowledge about Arrays (updated Jul 24')"
        ],
        "Loops": [
          "What is loop? 'While' and 'do while' loop",
          "Loop 'for'",
          "Foreach loop (enhanced loop 'for')",
          "Exercise: Nested loops - multiplication table",
          "Instruction break and continue",
          "EXERCISE: summing up values from an array",
          "[LABS] Working with Arrays: Print, Sum, Average, Count",
          "Check your knowledge about Loops (updated April 25')"
        ],
        "Object Oriented Programming (OOP)": [
          "Introduction to Object Oriented Programming - Basics",
          "Creating the objects using constructors",
          "'this' keyword",
          "Methods",
          "[NOTES] Summary of OOP basics",
          "Why Doesn’t My Object Do Anything? Understanding Object Creation and Method Calls",
          "How to get the data from user in console? Scanner class",
          "EXERCISE: Account Balance",
          "Coffee Vending Machine",
          "Overloading methods",
          "Static properties and methods",
          "Packages and access modificators",
          "Private variables | setters and getters | encapsulation",
          "References vs Primitive Variables",
          "Passing references / primitive variables through methods",
          "How to compare Strings properly?",
          "EXERCISE: Creating the bottle class",
          "Inheritance",
          "Method overriding & polymorphism",
          "protected keyword",
          "Access Modificators - Rehearsal",
          "Abstract classes and methods",
          "instanceof keyword + EXERCISE of abstraction",
          "Downcasting and late binding",
          "Class Object - how to compare objects",
          "method toString",
          "Final classses/methods/properties",
          "Interfaces",
          "EXERCISE: Sorting objects using implementation of interface",
          "Nested classes and the difference between inner and static class",
          "EXERCISE: Practical nested class",
          "Anonymous classes",
          "Aggregation",
          "Check your knowledge about OOP (Updated Aug 25')"
        ],
        "Lambda Expressions (Java 8)": [
          "What is lambda expression and why do we need it?",
          "Default interface methods",
          "Method References",
          "Stream API"
        ]
      },
      "requirements": [
        "Everything is described in the course. You do not need to do anything before this course."
      ],
      "description": "This Java course is designed for people who don't have any knowledge about programming.\nEven if you've never written a single line of code or don't know what programming is all about — I’ll guide you step by step, and everything will soon make sense.\nYou’ll break the myth that programming is only for the few.\nWith the right guidance, Java is easy to learn - and incredibly powerful once you master it.\n\n\nWhy learn Java?\nJava is one of the highest-paying and most in-demand programming languages in the world.\nThanks to its “Write once, run anywhere” philosophy, Java powers:\nAndroid apps\nDesktop applications\nWeb backends\nGames\nand more!\nDid you know? One of the most popular games ever created — Minecraft — was built using Java.\nIf you're interested in Android development, Java is the foundation.\n\nIt’s the primary language for building Android apps, and a must-know for mobile developers.\n\n\nWhat’s in this Java course?\nThis course contains over 15 hours of content, combining clear explanations with hands-on coding.\nYou’ll start from the basics of Java syntax and logic, and gradually build up to more advanced components of the Java language.\nThroughout the course, you’ll write many small programs in pure Java, helping you learn through doing, not just watching.\n\n\n---\nBut that’s not all!\nWould you like to learn Java Spring Boot but don't know where to start?\nThis course will take you from the basics to a level where you'll confidently build a complete enterprise application on your own.\nNo unnecessary theory - just practical solutions used in real-world companies.\nIf you're interested in building modern backend applications, working in IT, or creating solid REST APIs, you're in the right place!\n\"Straight to the point\" — practice before theory!\nMany courses begin with long theoretical introductions covering Spring architecture, design patterns (MVC, Dependency Injection), and more.\nIn my course, we jump straight into practice. You'll see how Spring Boot works first, and only then will I explain why it works that way. Theory is integrated into practical examples rather than being served in isolation.\nI emphasize understanding the \"why\" — not just the \"how.\"\nYou won't just learn how to use annotations, methods, or classes. I'll explain why they are needed, what problems they solve, and how they work under the hood. This understanding will prevent you from blindly copying code and instead empower you to write efficient and scalable applications.\nGradual introduction to complexity\nI won’t overwhelm you with too much information at once.\nWe start with simple concepts and gradually introduce more advanced topics.\nFor example, we’ll first add users manually before connecting to a database; we’ll use Spring Security’s default configuration before customizing it.\nWhat will you learn?\nSpring Boot from scratch — even if you’ve never used this framework before.\nBuilding REST APIs — manage users, tasks, and data using Spring Boot and Hibernate.\nApplication security — Spring Security will help you protect your API from unauthorized access.\nWhy enroll?\nLearn by building a real-world project — step by step, you’ll create a complete application.\nNo unnecessary theory — focus on real coding challenges.\nPrepare for real-world Spring Boot development — beyond just writing code, you'll also learn about testing and deployment.\nAttention! I've added for FREE 2,5h content about the basics of creating apps in Android Studio. Learn how to create Android Apps :-)\nOver 350,000 students have enrolled in my courses, and all of them are happy. You will also be satisfied with this course. If you do not like the course, remember that you can take for 30 days a full refund. I guarantee your satisfaction.\n\n\nGot questions while learning Java?\nAsk away! I’m always happy to help students who are eager to grow.\n\n\nPlease check out the free lessons! See for yourself the exceptional quality of the course and enjoy it!\nJoin NOW and become Java Expert today!",
      "target_audience": [
        "This Java course is meant for everyone. No prior knowledge about Java is needed. Everything is described from the beginning to expert level."
      ]
    },
    {
      "title": "Learn the Vulkan API with C++",
      "url": "https://www.udemy.com/course/learn-the-vulkan-api-with-cpp/",
      "bio": "Learn the fundamentals of the popular Vulkan API for modern graphics rendering using C++!",
      "objectives": [
        "Create 3D graphical applications using C++ and the Vulkan API",
        "What the Vulkan API is",
        "Set up Vulkan to work on a GPU",
        "Create essential Vulkan elements such as the Swapchain, Pipeline, and Command Buffers",
        "Load in models from external files",
        "Descriptor Sets and Push Constants (including Dynamic Uniform Buffers)",
        "Implementing a Depth Buffer",
        "Using Textures",
        "Subpasses and Multiple Subpasses"
      ],
      "course_content": {
        "Introduction": [
          "About This Course"
        ],
        "Vulkan Core": [
          "[THEORY] Overview of Vulkan",
          "[CODE] Setup & Compatibility Test",
          "[THEORY] Instances, Devices, and Validation Layers",
          "[CODE] Window, Instances, and Devices",
          "[CODE] Validation Layers",
          "[THEORY] Surfaces, Image Views, and the Swapchain",
          "[CODE] Swapchain Part 1: The Surface",
          "[CODE] Swapchain Part 2: Creating the Swapchain and Image Views",
          "[THEORY] Graphics Pipeline",
          "[CODE] Graphics Pipeline Part 1: Shader Modules",
          "[CODE] Graphics Pipeline Part 2: Fixed Functionality and the Render Pass",
          "[THEORY] Framebuffers, Command Buffers, and Synchronization",
          "[CODE] Framebuffer and Command Buffers",
          "[CODE] Drawing and Synchronisation",
          "[THEORY] Resource Loading",
          "[CODE] Resource Loading Part 1: Vertex Input",
          "[CODE] Resource Loading Part 2: Index Buffers and Staging Buffers"
        ],
        "Important Techniques": [
          "[THEORY] Descriptor Sets and Push Constants",
          "[CODE] Descriptor Sets: Uniform Buffers",
          "[CODE] Descriptor Sets: Dynamic Uniform Buffers",
          "[CODE] Push Constants",
          "[THEORY] Depth Buffer",
          "[CODE] Depth Buffer",
          "[THEORY] Textures",
          "[CODE] Textures Part 1: Image Setup & Pipeline Barriers",
          "[CODE] Textures Part 2: Samplers & Descriptors",
          "[CODE] Model Loading",
          "[THEORY] Subpasses",
          "[CODE] Subpasses"
        ],
        "Outro": [
          "Summary and Further Reading",
          "[BONUS] Bonus Content"
        ]
      },
      "requirements": [
        "Good understanding of C++",
        "Graphics Theory knowledge (not mandatory but will make things significantly easier!)",
        "Visual Studio and Windows are advised, however the code and theory are relevant to Mac/Linux systems, you just won't be able to follow along 1-to-1 with IDE use!"
      ],
      "description": "Learn one of the hottest new Graphics APIs in the industry!\nThe Vulkan API was released in 2016 as the high-performance successor to OpenGL, and is already used in a wide range of modern graphical applications, including video games such as Doom Eternal, Red Dead Redemption 2, and Rainbow Six: Siege.\nIf you're looking for the most modern, high-quality graphics, then look no further than Vulkan!\nThe Vulkan API is very new when compared to most graphics APIs out there, and so there aren't yet that many in-depth tutorials to help you learn it. I hope to fix that with this course!\nIn this course, you will learn how to set up and use a Vulkan application, as well as implement several key features exclusive to Vulkan itself, such as Descriptor Sets, Push Constants, and Subpasses. Each aspect is explained in great amounts of detail, to ensure you really understand what all the parts mean, and how they all connect together.\nI want to help you learn. If you still don't understand something after a lesson, then you just have to let me know! If something didn't make sense, or you just want clarification on a subject, I'll try my best to give you a more detailed insight into those intricacies, and ensure you have a proper understanding of Vulkan.\nIt is my goal, that when you finally finish the course, you will have enough knowledge of Vulkan to create your own Vulkan applications, and eventually gain enough experience to design the graphical applications you have only dreamed of!",
      "target_audience": [
        "People who know a bit about graphics and want to learn the latest cutting-edge graphics API."
      ]
    },
    {
      "title": "Programming with Python : HandsOn Introduction for Beginners",
      "url": "https://www.udemy.com/course/python-programming-beginners/",
      "bio": "Eliminate roadblocks to learn programming: Start writing your own programs in Python 3 from scratch",
      "objectives": [
        "Obtain a strong understanding on the fundamentals of programming",
        "Understand the basics of Python language",
        "Write your own independent programs in Python"
      ],
      "course_content": {
        "Introduction and Course Structure": [
          "Introduction and Course Structure"
        ],
        "Setting up of development environment and writing your first Python Program": [
          "Installation for Windows",
          "Installation for Mac",
          "Installation for Linux"
        ],
        "Variables and Data Types": [
          "What is a variable and how to define one?",
          "Rules to define a variable",
          "Data Types in Python"
        ],
        "Numbers": [
          "What are numbers and different types of Numbers in Python"
        ],
        "Operators": [
          "What is an operator ?",
          "Different types of operators"
        ],
        "String": [
          "What is a string and how to define one?",
          "String operations"
        ],
        "List": [
          "What is a list and how to create one?",
          "List operations"
        ],
        "Tuple": [
          "What is a tuple and how to create one ?"
        ],
        "Dictionary": [
          "What is a dictionary and how to create one ?",
          "Dictionary operations"
        ],
        "Conditional Statements": [
          "What are conditional statements ?",
          "Different types of conditional statements",
          "Using logical operators in conditional statements",
          "Program - Check if a number is multiple of 3 and 7"
        ]
      },
      "requirements": [
        "Access to a PC running on Windows, Linux or Mac",
        "Internet connection to setup development environment"
      ],
      "description": "This course has been specifically designed for beginners who have been looking to obtain a hands-on learning experience with Python, teaching you concepts of programming right from the basics and Python being the most simplest language for a beginner to start with.\nIt is the right time to start learning the in-demand Python language because of its gaining popularity in the fields on Data Science, Backend Development, Internet of Things, etc. Keep yourself equipped with the most sought-after skills!\nA lot of exercise problems, programming lectures, PDF notes have been included to provide you with a great learning experience!\nYou will work on a project at the end of this course, which has been designed for you to implement all the topics which you would have mastered by the end of this course to give you enough confidence to start writing your own independent programs in Python.\nThis course currently has an average rating of 4.6 stars from 11,000+ reviews, which makes it the perfect course for you to get started with Python programming!\nAll your questions in the Q&A section will be answered within a timeframe of 24 hours. I'm looking forward to be seeing you on the inside!",
      "target_audience": [
        "Beginners who are passionate to learn programming even if they haven't written a single line of code in their entire life",
        "Beginners who are looking for a right course to get started with Python",
        "Beginners who are searching for a course with hands-on programming exercises"
      ]
    },
    {
      "title": "Python Tkinter Masterclass - Learn Python GUI Programming",
      "url": "https://www.udemy.com/course/python-tkinter-masterclass/",
      "bio": "Build Python Tkinter Desktop Applications",
      "objectives": [
        "The fundamentals of Python GUI programming.",
        "Understand how to create your own Python GUI applications with the Tkinter GUI Library.",
        "Learn how to use advanced Python functions",
        "Learn to Build commercial Desktop Applications with Python Tkinter",
        "Get the most out of the sqlite database for Python projects"
      ],
      "course_content": {
        "Basic Tkinter Widgets": [
          "Creating Your First GUI Application",
          "Using Labels",
          "Using Buttons",
          "Using an Entry Widget",
          "Grid Layout",
          "Using CheckBoxes",
          "Radio Buttons",
          "ComboBox",
          "SpinBox",
          "MessageBox",
          "Text Editor",
          "Place Geometry Manager",
          "Frames"
        ],
        "Advanced Tkinter Widgets": [
          "ProgressBar",
          "PanedWindow widget",
          "Tabs",
          "ListBox Widget",
          "Using Images",
          "How to Create a Menu for Our Apps",
          "How to Create the TreeView Widget",
          "Creating a Scrollbar",
          "Using the Canvas Widget",
          "Using Style for Our Apps",
          "Using Open file Dialog",
          "Save File Dialog",
          "Color Dialog"
        ],
        "Calculator APP": [
          "Creating App Window and Buttons",
          "Creating Operator Buttons of Calculator",
          "Other App Buttons",
          "Creating Status Bar and Operator Function"
        ],
        "Address Book APP": [
          "What we are Going to Build",
          "Creating App's Main Window",
          "Creating Main Window Buttons",
          "Creating my People Window",
          "Creating Design of my People Window",
          "Creating Design of Add People Window",
          "Adding People to Database",
          "Displaying People",
          "Updating Person Part1",
          "Updating Person Part2",
          "Display Person Window",
          "Deleting Person from Database",
          "Creating About us Window and Finishing the Project"
        ],
        "Library Management System APP": [
          "What we will Build",
          "Creating Main Window Design",
          "Creating Main Window Design Part2",
          "Creating Main Window Design Part3",
          "Creating Main Window Design Part4",
          "Creating sqlite Database for App",
          "Adding Books to Database",
          "Adding Books to Database Part 2",
          "Adding Members to Database",
          "Displaying Books",
          "Searching in Database",
          "Listing Books",
          "Creating Statistics Window",
          "Updating ListBox",
          "Lend Book Window Part1",
          "Lend Book Window Part2"
        ],
        "Text Editor App": [
          "What we will Build",
          "Creating Main Template",
          "Creating File Menu",
          "Creating Edit Menu",
          "Creating View Menu",
          "Creating Themes Menu",
          "Creating Text Editor",
          "Creating StatusBar",
          "Creating Toolbar",
          "Creating Font Family and FontSize functions",
          "Creating Text bold Function",
          "Creating Text italic Function",
          "Creating Text Underline Function",
          "Creating Functions for Text Alignment Buttons",
          "Displaying How Many Letters and Words in Text Editor",
          "Creating New Menu Item Function",
          "Creating Open Menu Item Function",
          "Creating Save Menu Item Function",
          "Creating Save as Menu Item Function",
          "Creating Exit Menu Function",
          "Creating Edit Menu Functions",
          "Creating Themes for the Application",
          "Creating Find Dialog Window Design",
          "Creating Find Dialog Window Functions",
          "Updating ScrollBar",
          "Creating View Menu Functions"
        ],
        "Extra Information - Source code, and other stuff": [
          "Source Codes",
          "Bonus Lecture and Information"
        ]
      },
      "requirements": [
        "A basic knowledge of Python is recommended - A good pre-requisite would be the Python Masterclass available on this channel",
        "A computer running Windows or Linux, or a Mac so that the free IDE can be downloaded and install (full instructions included)."
      ],
      "description": "Have you done some Python programming but want to take your skills to the next level?  Maybe you just want to add GUI programming to your box of tricks.\nOr take your Python scripts to a new level by introducing a graphical user interface to your boring console applications.\nI am sure if you are reading this you already know that Python rocks.  It's got some serious horsepower and putting applications together takes less code compared to traditional languages like Java and C#.\nBy not having the skills to build GUI apps, you are seriously limiting your potential.\nThis course is designed to help remove that limitation.\nIf you are looking to learn Python GUI programming, quickly and efficiently then you are in the right place.\nVolkan Atış, your instructor is a very experienced developer, and knows Python GUI application development inside out.  And is now here to pass on those skills to you.\nWhats covered in the course?\nPython GUI Programming using TkInter (which is Pythons default de facto standard for building GUI Apps).\nNot only will you learn how to use Python to build Desktop applications, but Volkan will take you on a journey where you will also explore advanced GUI programming, creating actual Python applications, using Sqlite advanced database queries  and loads more!\nWhy is this course different?\nThis is a comprehensive course on TkInter - no details about the Tkinter Module & GUI Programming is skipped.\nYou will build real life projects to see TkInter in action in a realistic scenario.\nWhat you will learn in this course?\nYou will learn how to build real GUI Python programs using TkInter and by the end of the course will be a super productive and skilled Python TkInter programmer.\n\nVolkan Atış, your instructor is an expert Python developer so you can be assured you are learning from a true professional and learning the real-world skills you need to know to succeed.\nIf you are ready to get started, click on that enroll button and start taking your Python GUI skills to new levels",
      "target_audience": [
        "If you are a beginner programmer, then this course is probably not for you. In that scenario consider taking the Python Masterclass from this channel.",
        "Programmers who have a reasonable understanding of Python, and are ready to take their skills to new levels.",
        "Existing Python programmers who want to build GUI applications using TkInter."
      ]
    },
    {
      "title": "Java Masterclass 2025: 130+ Hours of Expert Lessons",
      "url": "https://www.udemy.com/course/java-the-complete-java-developer-course/",
      "bio": "Gain real-world experience with OOP, coding exercises, and problem-solving for job-ready Java development skills",
      "objectives": [
        "Learn the core Java skills needed to apply for Java developer positions in just 14 hours.",
        "Be able to sit for and pass the Oracle Java Certificate exam if you choose.",
        "Be able to demonstrate your understanding of Java to future employers.",
        "Learn industry \"best practices\" in Java software development from a professional Java developer who has worked in the language for close to 25 years.",
        "Acquire essential java basics for transitioning to the Spring Framework, Java EE, Android development and more.",
        "Obtain proficiency in Java 17, as well as older versions incluing Java 11 and Java 8.",
        "Java 21 features coming soon!"
      ],
      "course_content": {},
      "requirements": [
        "A computer with either Windows, Mac or Linux to install all the free software and tools needed to build your new apps (I provide specific videos on installations for each platform).",
        "A strong work ethic, willingness to learn, and plenty of excitement about the awesome new programs you’re about to build.",
        "Nothing else! It’s just you, your computer and your hunger to get started today."
      ],
      "description": "Step into the world of programming with our Java Programming Masterclass, meticulously updated for 2024. Since its inception in 2016, this course has evolved continuously, ensuring you receive the latest and most relevant Java education. Purchase once and gain access to a lifetime of updates without any additional cost.\nJoin an expansive community of over 832,000 students who have chosen my in-depth Java programming course for its thorough and detailed curriculum. Like Benhur G., who appreciates that \"all lessons helpful in your Java Programming journey are included,\" you'll find our course suitable for all levels of expertise.\nWhether you're aiming to:\nSecure your first Java programming job\nAdvance to a senior software developer role\nPrepare for the Oracle Java certification exam\nDevelop your own Java applications\nOur Java Masterclass is your comprehensive resource for achieving these goals and more.\nWhy Java?\nIts enduring presence in the tech world is unmatched, making it a wise choice for both budding and experienced programmers. Its popularity, as evidenced by Java's top 3 ranking in language use worldwide, promises abundant career opportunities.\nOur course is designed to provide a real-world perspective on programming. As Pallala gowtham R. notes, \"Tim's emphasis on coding over theory is exceptional,\" enabling you to build practical coding skills that are rare to find alongside theoretical knowledge.\nBemnet Bekele B. finds the course \"very good\" and appreciates that \"every topic is explained in detail,\" making it accessible for beginners. Similarly, Suyash praises the \"detailed explanation of JAVA language,\" highlighting the instructor’s dedication to ensuring students grasp each concept through repetition and clarity.\nThis Masterclass isn’t just about quantity but quality. With over 100 hours of content, the course is structured to facilitate learning at your own pace. Devansh R. finds the course \"very helpful,\" noting that even with intermediate Java knowledge, there were many new things to learn.\nThe course is curated to give you a solid grounding in Java essentials in just the first 14 hours. Bhuvanendra's experience is a testament to this: \"After completing the first 8 sections, I can see myself improved a lot in the way I write code.\"\nWith Java 17 as the focal point, you're learning a version with long-term support and current industry relevance. Moreover, as new versions like Java 21 emerge, this course will adapt, providing you with the most contemporary and robust Java education available.\nChoose this course for its bestseller status and join a thriving learning community backed by exceptional reviews. My commitment to quality and continuous improvement means you receive an education that’s both current and comprehensive.\nYou're not just enrolling in a course; you're gaining a partner in your learning journey. With support to address your questions from myself, teaching assistants, and the community, and regular updates to the content, you'll never feel stuck.\nTake the leap today with our 30-day, full money-back guarantee. Whether you seek to develop remarkable programs or embark on a transformative career, you have everything to gain.\nEnroll now and become part of a legacy of success. Your Java journey begins here.",
      "target_audience": [
        "New coders seeking to start a career in tech with foundational Java skills.",
        "Software devs aiming to update their Java knowledge to the latest version.",
        "Professionals targeting the Oracle Java Certification for career growth.",
        "Self-taught programmers looking to formalize and deepen their Java expertise.",
        "Tech enthusiasts interested in building Java applications for personal or professional use."
      ]
    },
    {
      "title": "Python Programming for Beginners",
      "url": "https://www.udemy.com/course/python-and-python-django-for-beginners-2-course-package/",
      "bio": "Recently updated with new, better Python development content for beginners.",
      "objectives": [
        "Understand and implement basic Python code",
        "Gain a knowledge of basic programming concepts",
        "Create and run a real-world Python program"
      ],
      "course_content": {
        "Getting Started with Python": [
          "Installation",
          "Print and Strings",
          "Math"
        ],
        "Variables, Loops and Statements": [
          "Variables",
          "While Loops",
          "For Loops",
          "If Statements",
          "If Else Statements",
          "If Elif Else Statements"
        ],
        "Functions and Variables": [
          "Functions",
          "Function Parameters",
          "Global and Local Variables"
        ],
        "Understanding Error Detection": [
          "Common Python Errors"
        ],
        "Working with Files and Classes": [
          "Writing to a File",
          "Appending to a File",
          "Reading From a File",
          "Classes"
        ],
        "Intermediate Python": [
          "Input and Statistics",
          "Import Syntax",
          "Making Modules",
          "Error Handling - Try and Except",
          "Lists vs. Tuples and List Manipulation",
          "Dictionaries"
        ],
        "Final Project": [
          "Final Project",
          "Final Project Solution"
        ],
        "Bonus Material": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A computer",
        "PC, Mac or Linux Operating Systems OK"
      ],
      "description": "Learn Python with Python Programming for Beginners from Stone River eLearning.\nDelving into the world of coding can be intimidating. With so many complex languages and implementation possibilities, it's easy to become overwhelmed. By starting off with Python programming, you'll learn a simple, versatile and highly readable code that you can execute on a wide variety of systems quickly and easily.\nMaster one of the most popular programming languages in the world\nUnderstand and implement basic Python code\nCreate and run a real-world Python program\nGain a knowledge of basic programming concepts\nLearn a simple, streamlined coding language quickly and easily\nIf you've never written a single line of code or if you're well-versed in multiple program languages, Python Programming for Beginners will enable you to better understand programming concepts.\nWidely regarded as one of the most simple and versatile programming languages out there, Python is used for web programming, video game building, microchip testing, desktop apps, and so much more. Used by programmers, developers, designers and everyone in between, it's one of the easiest programming languages to learn, and definitely the best starting point for new coders. This course will not only give you an understanding of the code, but will enable you to create and run real world Python programs too.\nCourse Overview\nThis course includes over 26 lectures and almost 4 hours of content, designed specifically for Python programming beginners.\nYou will be guided through the installation process and the basic concepts of Python programming, getting to grips with the language as a whole. From there, you'll dive straight into the specifics, learning the variables, loops and statements of the language and getting to grips with the function parameters, variables and common errors.\nDuring this course you'll have the opportunity to put your knowledge to practical use by working with files and classes, importing syntax and making modules, and most importantly, by building your own Python program from scratch.\nYou'll walk away with detailed knowledge of one of the most widely used programming languages in the world. You'll have gained a foundation of skills that will enable you to progress to more complex coding languages, as well as understanding the underlying principles of all programming languages. In short, you'll have everything you need to become a proficient programmer.",
      "target_audience": [
        "Programmers",
        "People who want to learn programming",
        "People who want to create web applications",
        "Python developers"
      ]
    },
    {
      "title": "The Complete Python Course: Go From Beginner To Advanced",
      "url": "https://www.udemy.com/course/pythoncourse/",
      "bio": "In this complete course students will learn Python which is an easy and fun programming language.",
      "objectives": [
        "Understand the basic as well as core concepts of Python programming language",
        "Acquire enhanced skills with Python graphics",
        "Design, create, develop, and code Python games",
        "Read and write external data files using Python",
        "Implement functions and call built-in Python functions",
        "Debug an entire program and handle errors in Python",
        "Implement basic Python structures such as if statements, loops, and functions"
      ],
      "course_content": {
        "Module 1 - Introduction and Course Agenda": [
          "Welcome To The Complete Python Course! Learn What This Course Can Do For You!",
          "Introduction and Course Agenda",
          "Why Program?"
        ],
        "Module 2 - Basics Of Python": [
          "Download PyCharm 2020",
          "Your First Python Hello World Program",
          "Versions of Python - Download",
          "Downloading Python",
          "Python Interpreter And Idle",
          "Nuts And Bolts Of A Sample Program",
          "Python Strings",
          "Getting Input",
          "Reading And Writing Files - Part 1",
          "Reading And Writing Files - Part 2",
          "Python Expressions"
        ],
        "Module 3 - Integer Arithmetic": [
          "Creating Your First Program - Part 1",
          "Creating Your First Program - Part 2",
          "Placing Comments In Code",
          "Introduction To Strings - Part 1",
          "Introduction To Strings - Part 2"
        ],
        "Module 4 - Functions And Variables": [
          "What Are Functions?",
          "Print Function",
          "Escape Codes",
          "Input Function"
        ],
        "Module 5 - Function Definition": [
          "Global Variables",
          "Concept Of Dictionaries",
          "Concepts Of Lists",
          "What Are Tuples?",
          "Introduction To Loops - Part 1",
          "Introduction To Loops - Part 2"
        ],
        "Module 6 - Graphics & Conditionals": [
          "Working With Graphics",
          "Conditional Execution",
          "IF Statement",
          "Additional IF Statements",
          "The While Loop"
        ],
        "Module 7 - Projects": [
          "Project A",
          "Project B",
          "Conclusion"
        ],
        "PYTHON ADVANCED - Module 1- Introduction": [
          "Introduction and Course Agenda",
          "Python Refresher"
        ],
        "Module 2 - Data Structures": [
          "Advanced Lists",
          "List Comprehension",
          "Sets and Dictionaries",
          "Looping Techniques",
          "Modules",
          "Packages",
          "Time Functionality"
        ],
        "Module 3 - Writing GUI In Python": [
          "GUI Introduction",
          "Creating TK Widget",
          "Creating Buttons and Labels",
          "Canvas Widget",
          "Message Widget",
          "Radio Buttons",
          "Data Entry Widget",
          "Oval Objects"
        ]
      },
      "requirements": [
        "Basic knowledge of computer is all you need to get started",
        "This course is intended for people who have never programmed before. A knowledge of grade school mathematics is necessary"
      ],
      "description": "Welcome To The Complete Python Course: Go From Beginner To Advanced\n[October 2021] Note: Python 3.5.1 has been superseded by Python 3.5.6. Added new lectures\n\n\nHere Is Everything You Will Learn In Our Complete Course:\nPython is an easy and fun language to learn, and it is now one of the most popular programming languages, suitable for almost any task from developing graphical user interfaces to building web applications.\nFrom the very basics to advanced concepts, this Python programming course is perfect for students wanting to become web or game developers. This course is also open to all learners who wish to gain an understanding of the basic components of computer programming. You will learn basic computer programming concepts and terminologies such as variables, constants, operators, integer arithmetic, expressions, object orientation, function definition, loops, and advanced data structures as well as GUI programming, CGI scripting, advanced graphics, networking, and much more\nWith the right mindset, understanding, and application of the teachings in this course, you will instantly begin to move towards mastering Python!\nWhen we learn something new, I add it to the course - at no additional cost to you! This is a course that will continue to add more and more to every aspect of your life.\nIn addition to the Udemy 30-day money back guarantee, you have my personal guarantee that you will love what you learn in this course. If you ever have any questions please feel free to message us directly and we will do our best to get back to you as soon as possible!\nSee you in the course\nSincerely,\nJoe Parys and Syed Raza",
      "target_audience": [
        "This course is designed for students who wish to become developers",
        "There are no prerequisites for this course",
        "If you want to become proficient at Python games and graphics development, then this course is for you!"
      ]
    },
    {
      "title": "Java Puzzles to Eliminate Code Fear",
      "url": "https://www.udemy.com/course/eliminate-code-fear/",
      "bio": "The fastest way to actually master Java programming and become a dangerous developer!",
      "objectives": [
        "tackle any programming problem and once and for all have a command over the coding profession",
        "apply razor sharp logic skills you learned in the course to tackle any coding challenges that come your way",
        "gain massive confidence to rock coding interviews and be a dangerous programmer in the industry"
      ],
      "course_content": {
        "Basics of Programming in Java": [
          "Course Structure",
          "How to Setup your development environment",
          "Basics of Java Programming & the Main Method",
          "Dedicated TA Support",
          "Join our Online Community (Discord)",
          "IMPORTANT - Download the Assignments Here!",
          "Basics of String Manipulation + Assignment",
          "String Manipulation Continued + Solution",
          "Conditionals & Program Flow + Assignment & Solution",
          "Using While Loops + Assignment & Solution",
          "Using For Loops + Assignment & Solution",
          "Nested For Loops & Using the Eclipse debugger",
          "Using Arrays + Assignment & Solution",
          "Introducing Recursion + Assignment",
          "Recursion Continued + Solution"
        ],
        "Coding Exercises: Java Programming Basics": [
          "Search for a Number in an Integer Array",
          "Find the Last Occurrence of a Number in an Integer Array"
        ],
        "Programming Puzzles": [
          "Download Assignments Here. IMPORTANT!!",
          "Watch Before Moving Forward - IMPORTANT !",
          "Logic Centric Puzzles + Solutions",
          "More Logic Centric Puzzles + Solutions",
          "Concluding Logic Puzzles + Solutions",
          "Looping Puzzles + Solutions",
          "Looping Puzzles Continued + Solutions",
          "Recursion Puzzles",
          "More Recursion Puzzles"
        ],
        "Advanced Recursion Coding Challenges": [
          "Advanced Recursion Challenge 1",
          "Advanced Recursion Challenge 2",
          "Advanced Recursion Challenge 3"
        ],
        "Object Oriented Programming in Java": [
          "Class And Object",
          "Program Flow",
          "Java Behind The Scenes",
          "Application Runtime",
          "Class Inheritance",
          "Interfaces and Abstractions",
          "Abstract Classes"
        ],
        "Basic Data Structures You Should Learn": [
          "Abstract Data Types (Newly Added)",
          "Stacks",
          "Stacks (HW Solution)",
          "Queues"
        ],
        "Course Extras!": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Have access to internet and the willingness to learn computer programming"
      ],
      "description": "Welcome to Java Puzzles to Eliminate Code Fear!\nAre you frustrated by coding puzzles that even seasoned developers find challenging?\nDo you wish to sharpen your logic skills and gain mastery over Java’s fundamental constructs?\nAre you looking for a hands-on, practical approach that transforms theory into real coding expertise?\nIf you answered yes to any of these questions, you’re in the right place.\nWhat Makes This Course Stand Out?\nThis course is built on the core principles of problem-solving in Java.\nInspired by insights from Jeff Atwood’s “Why Can't Programmers Program?”, it strips away unnecessary complexity to focus on what truly matters: mastering the building blocks of programming.\nEvery lesson zeroes in on method-level coding—covering string manipulation, loops, logic, recursion, and more—so you build a rock-solid foundation to tackle any coding challenge with confidence.\nThe motivation behind this course came from an article titled \"Why Can't Programmers Program?\" by Jeff Atwood. It talks about how poorly many candidates perform in coding interviews.\nWhy Java Puzzles and Problem Solving are Essential for your Career?\nSurprisingly a large fraction of applicants, even those with masters’ degrees and phds in computer science, fail during interviews when asked to carry out basic programming tasks such as iterate over a loop and print numbers from 1 -10 . Or solve the common fizz buzz problem. And I’ve experienced this first hand when I interview candidates for software development positions.\nThey could have an impressive academic background as well as experience in various technologies and software projects, but when posed with an interesting programming problem, their code falls apart. The fact is, you don’t need a college education to become a good programmer. Simply there is a big divide between people who can program and those that can’t. It's my experience that the difference has to do with mastering the fundamental building blocks of programming.\nAnd that’s basically method level coding and the mastery of topics like string manipulation, lists, loops, logic and recursion. These are fundamental granular components shared by all programming languages. Think of these as the tools a programmer can use to solve problems. And you really gotta know your tools well to be proficient at the craft!\nYou can’t learn programming by reading books. The fact is you just need a lot of practice. If you want to be a superb programmer, you have to program a lot and work on solving challenging problems that stretch your capabilities. This course offers a systematic and structured way for you to acquire that practice using only a subset of the java language without getting side tracked in other areas of software development. Every concept comes with a coding challenge. I ask you to try solving the challenge on your own before I go over the solution in detail. This approach has worked time and time again for my students.\nKEY BENEFITS OF JAVA PUZZLES MASTERY\nMastering Java Puzzles will empower you to:\nEnhance Critical Thinking: Transform your approach to problem-solving with hands-on coding challenges.\nBoost Interview Confidence: Acquire the skills needed to ace coding interviews and excel in your career.\nSolidify Core Concepts: Gain deep insights into Java’s essential tools, enabling you to write efficient, robust code.\nBridge Theory and Practice: Move seamlessly from learning concepts to applying them in real-world scenarios.\nKEY TAKEAWAY\nJava Puzzles isn’t just another programming course—it’s a transformative journey that empowers you to conquer coding challenges, master Java fundamentals, and evolve into a truly dangerous developer. Embrace the challenge and unlock your full potential!",
      "target_audience": [
        "If you want to sharpen your programming skills by solving a bunch of programming problems to finally have a command over the programming profession, this course is for you!",
        "If you want to become a kick-ass problem solver using java, this course is definitely for you!",
        "If you want to just watch lectures passively while having popcorn without working on the programming puzzles, then this course is NOT for you!"
      ]
    },
    {
      "title": "Beginning Object-oriented Programming with C#",
      "url": "https://www.udemy.com/course/beginning-oop-with-csharp/",
      "bio": "Learn OOP fundamentals applied to the C# programming language",
      "objectives": [
        "Understand why C# is organized the way it is",
        "Learn how to step from procedural to proper object-oriented design",
        "Construct larger classes out of smaller ones",
        "Combine behavior to construct complex features"
      ],
      "course_content": {
        "The Dawn of C#": [
          "Introducing the C# Programming Language",
          "What Follows in This Course",
          "Installing the Visual Studio",
          "The Dawn of Computer Programming",
          "Inventing Procedural Programming Constructs",
          "Summary"
        ],
        "Inventing Objects": [
          "Hitting the Limitation of Procedural Programming",
          "Seeing the First Glimpse of Objects",
          "The Dawn of Objects",
          "Speaking the Language of Objects",
          "Managing Memory Allocations",
          "Summary"
        ],
        "Introducing C# Language Syntax": [
          "Introducing C# Language Syntax",
          "Outlining Code Blocks and Instructions",
          "Defining Block Instructions",
          "Method Definitions in C#",
          "Understanding Access Modifiers",
          "Understanding Program Entry Point",
          "Running the Console Application",
          "Exercise",
          "Summary"
        ],
        "Inventing Object-oriented Programming": [
          "Understanding the Need to Vary Implementation",
          "Inventing Polymorphic Classes",
          "Inventing Virtual Functions",
          "Implementing Polymorphic Method Calls",
          "Understanding Virtual Functions",
          "Virtual Methods in C#",
          "Exercise",
          "Summary"
        ],
        "Introducing Visual Studio Projects and Solutions": [
          "Understanding .NET Assemblies",
          "Understanding Solution and Project Elements",
          "Introducing Customer’s Requirements",
          "Designing Classes",
          "Initializing Objects",
          "Summary"
        ],
        "Designing an Object Model": [
          "Adding Behavior to Classes",
          "Implementing the ToString Method",
          "Modeling the Domain with Classes",
          "Removing Code Duplication",
          "Naming Domain-related Methods",
          "Implementing Domain-related Methods",
          "Stepping from Procedural to Object-oriented Programming",
          "Providing Placeholders for Unimplemented Methods",
          "Autonomous Exercise",
          "Summary"
        ],
        "Applying the \"Tell, Don't Ask\" Principle to Objects": [
          "Chaining Method Calls",
          "Introducing Expression-bodied Methods",
          "Introducing the “Tell, Don’t Ask” Principle",
          "Implementing Private Methods on a Class",
          "Pattern Matching Expressions in C#",
          "Completing the Calendar Model",
          "Understanding the Top-down Development Style",
          "Completing the Model",
          "Demonstrating the Model",
          "Summary"
        ],
        "Improving on Fundamental Principles of Object-oriented Design": [
          "Benefiting from the Deep Domain Model",
          "Combining Existing Features to Build New Ones",
          "Understanding Method Overloading",
          "Introducing Requests for Polymorphism",
          "Ordering User Stories before Implementing Them",
          "Introducing the Open-closed Principle",
          "Isolating Varying Operations in Classes",
          "Autonomous Exercise",
          "Summary"
        ],
        "Implementing Polymorphic Classes": [
          "Revisiting Dynamic Method Calls",
          "Understanding Dependencies and Dependency Injection",
          "Implementing Dependency Injection",
          "Using the Dependency",
          "Pulling Out a Derived Class",
          "Understanding Abstract Methods and Classes",
          "Practicing Object Substitution Principle",
          "Substituting Objects at Run Time",
          "Summary"
        ],
        "Reiterating Principles of Object-oriented Design": [
          "How to Learn Programming",
          "Reiterating Classes and Objects",
          "Reiterating Object-oriented Design",
          "Reiterating Method Composition",
          "Reiterating Dependency Injection and Object Composition",
          "Designing for Evolution",
          "Refactoring and Redesigning Code",
          "Summary"
        ]
      },
      "requirements": [
        "Knowledge of any programming language (including C#) is a plus"
      ],
      "description": "In this course, you will learn the basic principles of object-oriented programming, and then learn how to apply those principles to construct an operational and correct code using the C# programming language and .NET. As the course progresses, you will learn such programming concepts as objects, method resolution, polymorphism, object composition, class inheritance, object substitution, etc., but also the basic principles of object-oriented design and even project management, such as abstraction, dependency injection, open-closed principle, tell don't ask principle, the principles of agile software development and many more.\nAfter completing this course, you will be qualified to continue learning the principles of object-oriented design, and to start developing applications that will be modeling different business domains.\nThis course differs from other similar courses in that it first devises the C# programming language from scratch, and the .NET Runtime that makes the object-oriented code run. Only after completing this task shall we step on to using the programming concepts to implement customer's requirements in C#.\nThe reason for such an extreme experiment is to teach the programmers that any object-oriented language is only a tool, which relies on a small set of operations that are already implemented for us - such as silently passing the this reference or resolving function addresses from the object reference at run time. I find great danger in writing code without understanding what happens when a piece of object-oriented code is taken for execution.",
      "target_audience": [
        "Beginner C# developers curious about modern programming practices",
        "C# programmers who wish to improve their fundamental skills"
      ]
    },
    {
      "title": "Learn and Understand C++",
      "url": "https://www.udemy.com/course/learn-c-plus-plus-from-beginner-to-advanced/",
      "bio": "Take this course to learn C++ which you can use for ethical hacking, game development, and most software you use daily!",
      "objectives": [
        "Understand C++ Code",
        "Write C++ Code",
        "Create Basic applications in C++"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Set Up": [
          "Set Up"
        ],
        "First C++ Program": [
          "The most basic C++ program",
          "Hello world, printing to monitor",
          "More advanced print formats",
          "Variables in C++ part 1",
          "Variables in C++ part 2"
        ],
        "Interaction with user": [
          "Getting data from standard input (keyboard)",
          "First \"useful\" program - calculate sum",
          "Constant variables in C++, macro constants",
          "The auto keyword, new in C++11",
          "Comments"
        ],
        "More advanced examples": [
          "Inclusion of other libraries",
          "if-else statement: conditional execution",
          "Logical operators part 1",
          "Logical operators part 2",
          "Relational operators",
          "Comma operator"
        ],
        "Repeating code executions - loops": [
          "for loop",
          "while loop",
          "do while loop",
          "for each loop (new in C++11)",
          "break statement",
          "continue statement",
          "goto",
          "Infinite loops",
          "Nested loops"
        ],
        "Arrays - basics": [
          "Declaration and usage",
          "Memory representation",
          "Array initialization",
          "Simple array algorithms",
          "C string"
        ],
        "Functions - basics": [
          "Concept and usage",
          "Functions with return values",
          "Functions that do not accept anything and do not return anything",
          "Basics lambda anonymous functions new in C++11"
        ],
        "Exception handling": [
          "Explanation and usage part 1",
          "Explanation and usage part 2",
          "Standard exceptions",
          "Generic catch block",
          "Nested try-catch blocks",
          "Exception propagation"
        ],
        "Structures in C++": [
          "Concept and usage",
          "Attributes and structure initialization",
          "static attributes",
          "Arrays of struct"
        ]
      },
      "requirements": [
        "Basic Computer skills will be sufficient"
      ],
      "description": "* Subtitles available in both English & Spanish *\nIf you want to learn C++ to advance your skills, gain the ability to program games, and create your own software, you might love this course!  You can go from beginner to advanced with C++ using this course because it has 9+ hours of video that might motivate you to keep learning and programming in C++!\nIf you have no previous knowledge or experience in C++, you will like that the course begins with C++ basics. If you have learned about C++ already in another course and want to improve what you already know, the course has hours of different topics in C++ with one topic per section. Each section is linked to the previous one in terms of utilizing what was already learned. Each topic is supplied with lots of examples which help students in their process of learning. Also, some new features introduced in C++11 standard are explained. This is what makes it interesting for both beginner and advanced students. Even if you already have a lot of experience in programming in C++, this course can help you learn some new information you had missed before. Upon the completion of this course, you should be able to write programs that have real-life applications.\nWhat I think is the best about this course is that you can search questions others have had, post your own questions, and get answers to challenges you are currently facing in learning and using C++.  You get paid C++ expert technical support in this course here to answer every single question you ask!\nIf you still are not sure about taking the course, maybe these stories of what the students before you experienced will be more useful than whatever I can say about this course. Maybe you can see if you identify with where they were when they took the course and what they got out of it. These are all copied from the course reviews below.\nSo far I'm enjoying it, explanation of subjects are easy to understand.\n\nVery clear instruction, easy to understand.\nStraight forward. No fluff like some other courses where they take you on tangents about stuff you will probably never encounter.\nIf you any suggestions you have on topics that have not been covered, you can send them via private message. I will do my best to cover them as soon as possible.\nThank you for reading this. I hope to see you in the course soon and I hope you will enjoy your time learning as much as I have!",
      "target_audience": [
        "Complete beginners who wish to learn C++",
        "No previous programming knowledge is needed"
      ]
    },
    {
      "title": "Python : Comprehensive Bootcamp (Beginner To Professional)",
      "url": "https://www.udemy.com/course/python-comprehensive-bootcamp-beginner-to-professional/",
      "bio": "Learn Python from scratch to confidently building applications.",
      "objectives": [
        "Learn Python from the ground up.",
        "Learn how to setup a python development environment.",
        "Learn how to create desktop applications",
        "Learn how to create console applications",
        "Learn how to create web applications",
        "Learn about Python Data Types and casting",
        "Python String Methods and Formatting",
        "Python Data Structures",
        "Python Functions",
        "Python Decorators",
        "Python Control Flow Statements",
        "Python Modules and Packages",
        "Working with external files in Python",
        "Working with dates and times",
        "Handling exception errors",
        "Version control system with Git and Github",
        "Web scrapping with Python",
        "Python and Machine Learning",
        "Python and data science",
        "Web development with Django",
        "Python Object Oriented Programming",
        "Building API from scratch"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "High and low level programming languages",
          "Compilers and Interpreters",
          "What is Python"
        ],
        "Introduction to Command Line Interface": [
          "What is command line",
          "How to access comandline interface",
          "What you can do with commandline",
          "Useful Commands"
        ],
        "Python Installation and Setup": [
          "Installing Python on Windows",
          "Installing Python3 on Macs",
          "Installing Pycharm on Windows",
          "Changing Pycharm Theme",
          "Pycharm windows configuration: Part 1",
          "Pycharm windows configuration: Part 2",
          "Installing Pycharm on Macs",
          "Pycharm mac configuration",
          "Installing Atom Text Editor"
        ],
        "Interacting with Python": [
          "Interacting using Python Shell",
          "Interacting using Python File",
          "Python Expressions",
          "Python Code Comments",
          "Python Code Indentation",
          "Python Variables",
          "Creating Variables",
          "Getting Input from Users"
        ],
        "Python Operators": [
          "Introduction to Python Operators",
          "Python Arithmetic Operators",
          "Python Assignment Operators",
          "Python Comparison Operators",
          "Python Logical Operators",
          "Python Identity Operators",
          "Python Membership Operators",
          "Binary Numbers",
          "Python Bitwise Operators: Part 1",
          "Python Bitwise Operators: Part 2",
          "Python Operator Precedence"
        ],
        "Python Data Types": [
          "Python Number Data Type",
          "Python String Data Type",
          "Python Boolean Data Type",
          "Casting Data Types"
        ],
        "Python String Methods and Formatting": [
          "Python String Methods : Part 1",
          "Python String Methods : Part 2",
          "Python String Formatting : Part 1",
          "Python String Formatting : Part 2"
        ],
        "Python Data Structures": [
          "What are data structures",
          "Python List",
          "Creating a Python List",
          "Accessing elements in a list",
          "Python List Methods: Part 1",
          "Python List Methods: Part 2",
          "Python Tuple : Part 1",
          "Python Tuple : Part 2",
          "Python SET",
          "Python SET Methods",
          "Python Dictionary",
          "Python Dictionary Methods",
          "Creating a directory for Python Files"
        ],
        "Python Control Flow Statements": [
          "Introduction to control flow",
          "if statements",
          "Else statements",
          "ELif statements",
          "While Loops",
          "For Loops",
          "Nested For Loops",
          "Break Statement",
          "Continue Statement",
          "For Loop and break statement",
          "For Loop and continue statement",
          "For Loop and else statement",
          "For Loop and Range Statement"
        ],
        "Python Functions": [
          "What are Python Functions",
          "Python Return Keyword Value",
          "Default Parameter Value",
          "Keyword Arguments",
          "Functions returning other functions",
          "Assigning Functions To Variables",
          "Global and Local Variable Scopes",
          "Nesting Functions",
          "Nesting Functions Accessing Variable Scope",
          "Function Pass Keyword",
          "Passing functions as arguments",
          "VarArgs Parameter",
          "Anonymous Functions",
          "Python DocStrings",
          "Python Decorators",
          "Python Function Vs Python Method"
        ]
      },
      "requirements": [
        "You will need some software installed. The course will show you step by step",
        "You need a computer or mac with internet access"
      ],
      "description": "Python is a dynamic modern object -oriented programming language  and can be used to do a lot of things both big and small.   Python is what is referred to as a high level language. That means it is a language that is closer to humans than computer.It is also known as a general purpose programming language due to it's flexibility. Python is an interpreted language that does not need to be complied like for example java programming language. It is interpreted and run on the fly the same time.\n\n\nPython has been used in a lot of places like in creating games, for statistical data and visualization,speech and face recognition.\nSome of the biggest websites on this planet earth use python in one way or another. Examples include:\nGoogle\nYoutube\nFacebook\nNasa\nDisney\nPixar\nReddit\nPinterest\nInstagram\nSpotify\nSurvey Monkey\nYahoo Maps\n\n\nTopics covered include:\nInteracting with Python in various ways\nPython Operators\nPython Data Types\nData type casting\nPython String Methods and Formatting\nPython Data Structures\nPython Functions\nPython DocStrings\nPython Decorators\nPython Control Flow Statements\nPython Modules and Packages\nWorking with external files in Python\nWorking with dates and times\nWorking with calendars\nHandling exception errors\nVersion control system with Git and Github\nWeb scrapping with Python\nPython and Machine Learning\nWeb development with Django\nCreating a database driven application\nPython Object Oriented Programming\n\n\nProjects we will create:\nCreate a web based todo app and deploy to cloud\nDatabase CRUD  app with SQL Server and Python\nMP3 Player\nLottery Number Simulator\nLoan calulator\nCreate a basic calculator\nCreate a digital clock\nCreate a number guessing game\nCreate a random number generator\nCreate a countdown timer\nCreate a lottery number simulator",
      "target_audience": [
        "Beginners to Python"
      ]
    },
    {
      "title": "Modern C++ Concurrency in Depth ( C++17/20)",
      "url": "https://www.udemy.com/course/modern-cpp-concurrency-in-depth/",
      "bio": "modern c++ concurrency features including memory model, lock free data structure, thread pools, coroutines.",
      "objectives": [
        "Learn Concurrent programming in C++ including feature in C++17/20 standards.",
        "You will learn how to implement useful concurrent data structures and algorithms using latest C++ features."
      ],
      "course_content": {
        "Thread management guide": [
          "Setting up the environment for the course",
          "Introduction to parallel computing",
          "Quiz : Parallel programming in general",
          "Uses of parallel programming.",
          "How to launch a thread",
          "Programming exercise 1 : Launching the threads",
          "Joinability of threads",
          "Join and detach functions",
          "How to handle join, in exception scenarios",
          "Programming exercise 2 : Trivial sale a ship model",
          "How to pass parameters to a thread",
          "Problematic situations may arise when passing parameters to a thread",
          "Transferring ownership of a thread",
          "Some useful operations on thread",
          "Programming excersice 3 : Sail a ship with work queues",
          "Parallel accumulate - algorithm explanation",
          "Parallel accumulate algorithm implementation",
          "Thread local storage",
          "Debugging a application in Visual studio",
          "Thread management"
        ],
        "Thread safe access to shared data and locking mechanisms": [
          "Introduction to locking mechanisms",
          "Concept of invarient",
          "mutexes",
          "Things to remember when using mutexes",
          "Thread safe stack implementation : introduction to stack",
          "Thread safe stack implementation : implementation",
          "Thread safe stack implementation : race condition inherit from the interface",
          "Dead locks",
          "unique locks",
          "Mutex and locks"
        ],
        "Communication between thread using condition variables and futures": [
          "introduction to condition variables",
          "Details about condition variables",
          "Thread safe queue implementation : introduction to queue data structure",
          "Thread safe queue implementation : implementation",
          "introduction to futures and async tasks",
          "async tasks detailed discussion",
          "Parallel accumulate algorithm implementation with async task",
          "Introduction to package_task",
          "Communication between threads using std::promises",
          "Retrieving exception using std::futures",
          "std::shared_futures"
        ],
        "Lock based thread safe data structures and algorithm implementation": [
          "introduction to lock based thread safe data structures and algorithms",
          "queue data structure implementation using linked list data structure",
          "thread safe queue implementation",
          "Parallel STL introduction",
          "parallel quick sort algorithm implementation",
          "parallel for each implementation",
          "parallel find algorithm implementation with package task",
          "parallel find algorithm implementation with async",
          "Partial sum algorithm introduction",
          "Partial sum algorithm parallel implementation",
          "Introduction to Matrix",
          "Parallel Matrix multiplication",
          "Parallel matrix transpose",
          "Factors affecting the performance of concurrent code"
        ],
        "C++20 Concurrency features": [
          "Jthread : Introduction",
          "Jthread : Our own version implementation",
          "C++ coroutines : Introduction",
          "C++ coroutines : resume functions",
          "C++ coroutines : Generators",
          "C++ Barriers"
        ],
        "C++ memory model and atomic operations": [
          "Introduction to atomic operations",
          "Functionality of std::atomic_flag",
          "Functionality of std::atomic_bool",
          "Explanation of compare_exchange functions",
          "atomic pointers",
          "General discussion on atomic types",
          "Important relationships related to atomic operations between threads",
          "Introduction to memory ordering options",
          "Discussion on memory_order_seq_cst",
          "Introduction to instruction reordering",
          "Discussion on memory_order_relaxed",
          "Discussion on memory_order_acquire and memory_order_release",
          "Important aspects of memory_order_acquire and memory_order_release",
          "Concept of transitive synchronization",
          "Discussion on memory_order_consume",
          "Concept of release sequence",
          "Implementation of spin lock mutex"
        ],
        "Lock free data structures and algorithms": [
          "Introduction and some terminology",
          "Stack recap",
          "Simple lock free thread safe stack",
          "Stack memory reclaim mechanism using thread counting",
          "Stack memory reclaim mechanism using hazard pointers",
          "Stack memory reclaim mechanism using reference counting"
        ],
        "Thread pools": [
          "Simple thread pool",
          "Thread pool which allowed to wait on submitted tasks",
          "Thread pool with waiting tasks",
          "Minimizing contention on work queue",
          "Thread pool with work stealing"
        ],
        "Bonus section : Parallel programming in massively parallel devices with CUDA": [
          "Setting up the environment for CUDA",
          "Elements of CUDA program",
          "Organization of threads in CUDA program 1",
          "Organization of threads in CUDA program 2",
          "Unique index calculation for threads in a grid",
          "Unique index calculation for threads in a 2D grid",
          "Unique index calculation for threads in a 2D grid 2",
          "Timing a CUDA program",
          "CUDA memory transfer",
          "Sum array example",
          "Error handling in a CUDA program",
          "CUDA device properties"
        ]
      },
      "requirements": [
        "Basic of c++ programming , some knowledge about data structures and algorithms would be helpful"
      ],
      "description": "C++ programming language can be categorized under many topics. Some say its a general purpose programming language, some say its a object oriented version of C. But I liked to categorized it under system programming language. One characteristic of any system programming language including C++ is that language should be able to execute faster compare to other languages like java etc.\nC++ paradigm took sharp turn with the introduction of C++11 standards. The most notable difference with previous version is the introduction of new memory model. Memory model is the key part of any language, and the performance of all the functionalities depends on that language memory model. With new c++ memory model, we can exploit tremendous power of  modern multi core processors.\nProgramming a proper C++ code with better memory reclaim mechanism is tough task. But if we want to code thread safe code which can harvest underline processors true power is much more difficult task. In this course we will have in depth discussion on  C++ concurrency features including memory model. We will implements thread safe data structures and algorithms, both lock based manner and lock free manner. Proper lock free implementations of data structures and algorithms will provide unprecedented performance output. Let me listed down key aspects we cover in this course below.\n1.Basics of C++ concurrency(threads, mutex, package_task, future ,async, promise)\n2.Lock based thread safe implementation of data structures and algorithms.\n3.C++ memory model.\n4.Lock free implementation of data structures and algorithms.\n5.C++20 concurrency features.\n5. Proper memory reclaim mechanism for lock free data structures.\n6. Design aspects of concurrent code.\n7. In depth discussion on thread pools.\n8. Bonus section on CUDA programming with C and C++.",
      "target_audience": [
        "Anyone who wants to widen you skills with c++ programming."
      ]
    },
    {
      "title": "JavaScript - The Complete Guide 2025 (Beginner + Advanced)",
      "url": "https://www.udemy.com/course/javascript-the-complete-guide-2020-beginner-advanced/",
      "bio": "Modern JavaScript from the beginning - all the way up to JS expert level! THE must-have JavaScript resource in 2025.",
      "objectives": [
        "Learn JavaScript from scratch and in great detail - from beginner to advanced",
        "All core features and concepts you need to know in modern JavaScript development",
        "Everything you need to become a JavaScript expert and apply for JavaScript jobs",
        "Project-driven learning with plenty of examples",
        "All about variables, functions, objects and arrays",
        "Object-oriented programming",
        "Deep dives into prototypes, JavaScript engines & how it works behind the scenes",
        "Manipulating web pages (= the DOM) with JavaScript",
        "Event handling, asynchronous coding and Http requests",
        "Meta-programming, performance optimization, memory leak busting",
        "Testing, security and deployment",
        "And so much more!"
      ],
      "course_content": {},
      "requirements": [
        "NO prior JavaScript knowledge is required",
        "Basic web development knowledge is recommended",
        "Basic understanding of HTML and CSS helps but is NOT required"
      ],
      "description": "Join the most comprehensive and in-depth JavaScript course on Udemy and learn JavaScript from the ground up, in great detail with this bestselling course!\nJavaScript is THE most important programming language you need to learn as a web developer - and with this course, you make sure that you will not miss a single thing you have to know as a JavaScript developer!\nThis is the most comprehensive and modern course you can find on JavaScript - it's based on all my JavaScript knowledge AND teaching experience. It's both a complete guide, starting with the core basics of the language, as well as an extensive reference of the JavaScript language and environment, ensuring that both newcomers as well as experienced JavaScript developers get a lot out of this course!\nIt's a huge course packed with important knowledge and helpful content:\nFrom the core basics, over advanced concepts and JavaScript specialties, all the way up to expert topics like performance optimization and testing - this course has it all. My goal was to create your go-to resource for the JavaScript language, which you can not just use for learning it but also as a resource you can come back to and look up important topics.\nThe course is based on my experience as a long-term JavaScript developer as well as a teacher with more than 2,500,000 students on Udemy as well as on my YouTube channel Academind. It's packed with examples, demos, projects, assignments, quizzes and of course videos - all with the goal of giving you the best possible way of learning JavaScript.\nWhat's in the course?\nThis course is obviously packed with content - I therefore strongly recommend that you check out the full course curriculum to get a clear idea of all the topics covered in the course. In general, here's what you'll find in the course:\nModern JavaScript from the start: The JavaScript syntax changed over time - in this course, you'll learn the latest syntax from the start (you'll also learn about the old one though, so that you can work in ANY JS project)\nALL the Basics: Variables, constants, functions, how scripts are loaded etc\nArrays & Objects: We'll explore these very important data structures in great detail\nControl Structures: Understand how to run code conditionally and in loops\nA look behind the Scenes: How JavaScript engines work behind the scenes and what that means for us\nDeep dives into Core Concepts: ALL the special things about JavaScript function, different syntaxes\nWorking with the DOM: How to manipulate web pages dynamically via JavaScript (including deep dives and different use-cases)\nEvents in JavaScript: Learn how to listen to a broad variety of events (e.g. drag & drop) and execute appropriate code\nClasses & Object-oriented Programming: Learn how to work with classes, prototypes, the \"this\" keyword, constructor functions and much more\nAsynchronous and Synchronous Programming: We'll explore callbacks, promises, async/ await and other important tools and language features to execute code correctly\nHttp Requests: Learn how to send Http requests via JavaScript\nTooling, Optimizations & Browser Support: Code splitting, producing small code and ensuring that scripts work in all browsers  - this matters and hence is covered in great detail\nLibraries & Frameworks: Learn about libraries like Axios or frameworks like React.js - why they matter and how to use them\nNode.js: Whilst focusing on the browser-side for the majority of the course (because the syntax is the same), we'll also have a dedicated section on Node.js to learn all about that JS host environment\nSecurity & Performance Optimizations: Of course security matters, so does performance - no surprise that both is covered in the course!\nAutomated Testing: Testing manually is hard work and can be unreliable - in this course you'll also get an introduction into automated testing\nWhat are the course prerequisites?\nNO JavaScript knowledge is required - you'll learn it from scratch!\nYou also need NO programming experience other than basic web development knowledge (e.g. how the web works)\nBasic HTML and CSS knowledge is recommended but not a must-have",
      "target_audience": [
        "Beginner web development students who have no or only little JavaScript experience",
        "Also developers who know the basics about JavaScript and want to deepen their knowledge",
        "Advanced JavaScript developers who want to learn more about the nitty-gritty details and dive into advanced concepts",
        "Everyone interested in learning JavaScript and all about how it works"
      ]
    },
    {
      "title": "Java Persistence: Hibernate and JPA Fundamentals",
      "url": "https://www.udemy.com/course/hibernate-and-jpa-fundamentals/",
      "bio": "A simple-to-follow and easy-to-understand course on Java Persistence API (JPA) with Hibernate",
      "objectives": [
        "By the end of this course, you'll be having a strong foundation on Java Persistence with Hibernate",
        "The fundamentals and some of the advanced JPA features for Object/Relational Mapping, Querying, Caching, Performance and Concurrency",
        "The fundamentals of First & Second Level Caching, N+1 Selects Problem & Batch Fetching, Optimistic Locking & Versioning",
        "The fundamentals of Entity Relationships, Inheritance Mapping & Polymorphic Queries",
        "The fundamentals of Querying database using JPQL and Criteria API (JPA)",
        "The fundamentals of Handling Long Conversations with Merging Detached Object and Extended Persistence Context",
        "The fundamentals of Database Isolation Rules",
        "Some of the Best Practices of Java Persistence with Hibernate"
      ],
      "course_content": {
        "About this Course": [
          "Introduction"
        ],
        "Understanding object/relational persistence": [
          "Object Relational Impedance Mismatch",
          "Object Relational Mapping",
          "Installing MySQL",
          "Installing Eclipse IDE",
          "Lab - Object Relational Mapping",
          "Lab Exercise - Object Relational Mapping"
        ],
        "Getting Started with Hibernate and JPA Annotations": [
          "What is Hibernate",
          "Hello World with Hibernate and JPA Annotations",
          "Lab - Hello World with Hibernate and JPA Annotations",
          "Note for Hibernate 5+ Users",
          "Note for Hibernate 6 Users",
          "Lab Exercise - Hello World with Hibernate and JPA Annotations",
          "Logging",
          "Lab Exercise - Logging",
          "Manipulating Objects",
          "Lab - Manipulating Objects",
          "Lab Exercise - Manipulating Objects"
        ],
        "Mapping Concepts": [
          "Aggregation and Composition",
          "Entities and Value Types",
          "Component Mapping",
          "Lab Exercise - Component Mapping",
          "Mapping Associations",
          "Cascades",
          "Lab Exercise - Cascades",
          "One-To-Many Relationship",
          "Lab Exercise - One-To-Many Relationship",
          "orphanRemoval",
          "One-To-One Relationship",
          "Derived Identifiers with @MapsId",
          "Many-To-Many Relationship",
          "Lab Exercise - Many-To-Many Relationship",
          "Mapping Enums",
          "Lab Exercise - Mapping Enums",
          "Mapping Collections of Value Types",
          "Lab Exercise - Mapping Collections of Value Types",
          "Composite Keys",
          "Lab Exercise - Composite Keys",
          "Foreign-Key in Composite Primary-Key using MapsId",
          "Book Store with Hibernate and JPA Annotations",
          "Mapping JSON"
        ],
        "Getting Started with JPA": [
          "What is JPA",
          "Hibernate as JPA Provider",
          "Working with Objects",
          "Lab Exercise - Working with Objects",
          "Caching Objects",
          "Lab Exercise - Caching Objects (covers more on PersistenceContext)",
          "SQL Joins",
          "Lazy Fetching",
          "Lab Exercise - Lazy Fetching",
          "@OrderBy",
          "Bytecode Enhancement (Lazy Fetching Basic Attributes)",
          "Equals and HashCode",
          "Lab Exercise - Equals and HashCode",
          "Query Language",
          "Lab Exercise - Query Language (covers more on Flushing)",
          "Criteria API (JPA)",
          "Pre-INSERT Identifier Generation",
          "SEQUENCE Id generation strategy in Hibernate 6",
          "Inheritance Mapping and Polymorphic Queries",
          "Lab Exercise - Inheritance Mapping and Polymorphic Queries",
          "Embeddable Inheritance (in Hibernate 6.6)",
          "@ConcreteProxy (in Hibernate 6.6)",
          "Lifecycle Callbacks",
          "Lab Exercise - Lifecycle Callbacks",
          "Stored Procedures",
          "Database Functions",
          "Database Views",
          "Batch Processing",
          "Logging Slow Queries",
          "N + 1 Selects Problem",
          "Lab Exercise - N + 1 Selects Problem",
          "Batch Fetching",
          "Lab Exercise - Batch Fetching",
          "Entity Graphs",
          "Lab Exercise - Entity Graphs",
          "Merging Detached Objects",
          "Lab Exercise - Merging Detached Objects",
          "Optimistic Locking and Versioning",
          "Lab - Optimistic Locking and Versioning",
          "Lab Exercise - Optimistic Locking and Versioning",
          "Isolation Rules",
          "Lab Exercise - Isolation Rules",
          "Caching and Object Identity",
          "Lab Exercise - Caching and Object Identity",
          "Second Level Caching",
          "Lab Exercise - Second Level Caching",
          "Query Cache"
        ],
        "Best Practices": [
          "Best Practices"
        ]
      },
      "requirements": [
        "Fundamental understanding of Java",
        "Prior exposure to SQL will be be helpful",
        "Maven (the course provides source-code as Maven projects)"
      ],
      "description": "If you’re a Java programmer who wants to learn the fundamentals and some of the advanced topics of Java Persistence with Hibernate, then you’re the one this course is designed for.\nWe'll be working with Hibernate 4 (with updates for Hibernate 5 & 6), and using Hibernate as a JPA Provider for the most part of this course.\nYou'll be learning the fundamentals and some of the advanced JPA features for Object/Relational Mapping, Querying, Caching, Fetching Strategies, Performance Optimizations and Concurrency.\nWe’ll also talk about Best Practices and how to resolve some of the common performance bottlenecks.\nThe course includes many Lab-Exercises in which we have tasks, Q&A and quizzes for students to revise the concepts learnt in the lectures. We also have expanded discussions on some of those lab-exercises.\nWe also discuss the SQL at runtime and the performance implications of it.\nThe Maven source-code provided with the course currently uses the Hibernate version 6.\nWe try to keep updating the course by adding more and new relevant topics as well. For example, the most recent topic added to the course was Embeddable Inheritance, which was introduced in Hibernate version 6.6.\nWe've used MySQL in the course as the RDBMS.",
      "target_audience": [
        "Java developers who want to learn Java persistence API (JPA) with Hibernate",
        "Professionals working on Java/JavaEE/Spring technologies"
      ]
    },
    {
      "title": "JSF 2.2 - Java Server Faces for Beginners - Build a DB App",
      "url": "https://www.udemy.com/course/jsf-tutorial/",
      "bio": "JSF 2.2 - Build a Real JSF Web Application that connects to a Database - Most Popular JSF course",
      "objectives": [
        "Build a fully functioning JSF web application from scratch",
        "Set up your JSF development environment with Tomcat and Eclipse",
        "Read HTML form data with JSF",
        "Apply HTML form validation with built-in JSF rules and custom rules",
        "Integrate Managed Beans to handle business logic",
        "Display data using tables",
        "Add database support with JDBC: query, insert, update and delete"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction",
          "Download Source Code",
          "Download PDF of Slides",
          "Closed Captions and Subtitles Available for English"
        ],
        "Getting Started With JSF": [
          "JSF Overview",
          "Setting Up the Development Environment: Overview",
          "Installing Tomcat on Windows",
          "Installing Tomcat on Mac",
          "Installing Eclipse on Windows",
          "Installing Eclipse on Mac",
          "Connecting Eclipse to Tomcat",
          "FAQ: HELP! - Can't Start Tomcat - Ports are in Use!",
          "JSF Behind the Scenes",
          "JSF Hello World - Part 1",
          "JSF Hello World - Part 2",
          "JSF Hello World - Part 3",
          "Typo Correction: Can't find facelet tag library for uri http://xmlns.jcp.org/js"
        ],
        "Reading User Input with HTML Forms": [
          "HTML Forms Overview",
          "JSF Forms and Managed Beans",
          "Drop-Down Lists - Part 1",
          "Drop-Down Lists - Part 2",
          "Radio Buttons",
          "Checkboxes",
          "Pre-populating JSF Forms"
        ],
        "Validating HTML Forms": [
          "JSF Validation Features - Overview",
          "Configuring Required Fields - Part 1",
          "Configuring Required Fields - Part 2",
          "Validating Number Range and Length",
          "Validating with Regular Expressions",
          "Implementing Custom Validation"
        ],
        "Implementing Business Logic with Managed Beans": [
          "Calling Methods on Managed Bean from JSF Page",
          "Managed Bean Scopes - Part 1",
          "Managed Bean Scopes - Part 2"
        ],
        "Displaying Data using Lists and Tables": [
          "Displaying Data using Lists",
          "Displaying Data using Tables",
          "Applying CSS Styles to Tables"
        ],
        "Build A Complete Database Web App with JDBC": [
          "Student Database Project Overview and Demo",
          "Download JDBC Source Code",
          "Installing the MySQL Database on MS Windows",
          "Installing the MySQL Database on Mac",
          "Setting up our Project Database with Sample Data",
          "Setup Tomcat Connection Pool",
          "Sample Application Architecture - Part 1",
          "Sample Application Architecture - Part 2",
          "Additional Resources - Design Patterns",
          "JDBC - List Students",
          "JDBC - Add a Student to the Database",
          "JDBC - Update Student in the Database - Part 1",
          "JDBC - Update Student in the Database - Part 2",
          "JDBC - Delete a Student from the Database",
          "JDBC Project Review"
        ],
        "Summary": [
          "Thank You and Please Leave a Rating for the course"
        ],
        "Appendix": [
          "FAQ: Deploying To Tomcat using WAR files",
          "FAQ: How to Import Eclipse Projects",
          "FAQ: How to add Search features to the JSF App?"
        ],
        "Bonus": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Basic knowledge of Java is required.",
        "Basic HTML knowledge if helpful."
      ],
      "description": "The most popular JSF course based on the largest number of students and excellent reviews.\nJoin over 5,000 successful students.\nThe course has 1,000+ Reviews! (the most for any JSF course, #toprated)\n---\nLearn how to connect JSF to a Database ... Step-by-Step.\nBy the end of this course, you will source code for a complete JSF CRUD application that connects to a database.\nYou will understand every line of code for the project. I explain everything, step-by-step.\n\n\n---\nSample Reviews\n\nThe best tutorial about JSF that I found online. I would strongly recommend. - Iurie Borozan\n\nOne of the best tutorial series i have ever seen because it is well organized step by step which leads anyone to understand completely. - Arshath Shameer\n----\nCovers JSF 2.2\n\nAll source code is available for download\nResponsive instructor available to answer all of your questions.\nProfessional video and audio recordings (check the free previews)\n----\nWhat Is JSF?\nJava Server Faces is a popular web application framework for Java. In fact, it is the standard web application framework for Java EE. Granted there are other web frameworks around, but most corporate Java positions expect Java developers to have experience with JSF since it is an integral part of Java EE.\n----\n\nBenefits of Taking This JSF Course\nKnowing JSF can get you a job or improve the one you have. It's a skill that will put you more in demand in the modern web development industry, and make your software life easier, that's why it's so popular and backed by Oracle.\nThis course will help you quickly get up to speed with JSF. I will demystify JSF and help you understand the essential concepts to build a real JSF web application from scratch.\nBuild a Real JSF Application from Scratch\nThis JSF course  is project based and you will build a fully functioning JSF web application from scratch.\nWe start off with a brief overview of JSF. Then I show you how to setup your development for JSF by installing Tomcat and Eclipse. Next, you learn how to use the standard JSF UI components for reading HTML form data and displaying output text.\nAdvanced coverage includes how to implement HTML form validation. I also show you how to display information in tables.\nFinally, the course includes JSF and JDBC database integration. You learn how to leverage JDBC queries, inserts, updates and deletes in a JSF application.\nAt the end of this JSF course, you will have a fully functional JSF application that connects to a database. You can use this application as a starting point for your project.\nAll of the source code and database scripts are provided.\n----\nYou Will Learn How To\nBuild a fully functioning JSF web application from scratch\nSet up your JSF development environment with Tomcat and Eclipse\nRead HTML form data with JSF\nPerform HTML form validation with built-in and custom rules\nIntegrate Managed Beans to handle business logic\nDisplay data using tables\nAdd database support with JDBC: query, insert, update and delete\nBuild a complete database web app with JDBC\n----\nStudent Reviews Prove This Course's Worth\nStudents who take this course seem to love it. In fact, more than 3,000 students have already enrolled. The course has 200+ 5-star reviews ... the most for any JSF course on Udemy.  #toprated\nThose who have reviewed the course have pointed out that the instruction is clear and easy to follow, as well as thorough and highly informative. Other students enjoy the use of relevant examples throughout the course, as these make the content even easier to comprehend.\nCheck out all of the great reviews in the review section ... a lot of happy students :-)\n\n---\n\nCompared to other JSF courses on Udemy\nThis JSF course is project based and you'll build a real JSF application that connects to a database ... all from scratch.\nI am a very responsive instructor and I am available to answer your questions and help you work through any problems.\nFinally, all source code is provided with the course along with setup instructions.\n----\nQuality Material\nYou will receive a quality course, with solid technical material and excellent audio and video production.\nThis is my third course at Udemy. My first two courses were Eclipse IDE for Beginners and Java Database Connection (JDBC). These courses have received rave 5-star reviews and over 140,000 students have taken the courses.\nI also have an active YouTube channel where I post regular videos. In the past year, I've created over 500 video tutorials (public and private). My YouTube channel has over 2 million views. So I understand what works and what doesn't work for creating video tutorials. I won't ramble on and on wasting time ... my videos are short and to the point.\n----\nPrerequisites\nBasic knowledge of Java is required.\nBasic HTML knowledge is helpful.\n----\nTarget Audience\nJava Developers: any level\n----\nNo Risk – Udemy Refund\nFinally, there is no risk. You can preview 25% of the course for free. Once you purchase the course, if for some reason  you are not happy with the course, Udemy offers a 30-day refund (based on Udemy's Refund Policy).\nSo you have nothing to lose, sign up for this course and learn how to build JSF applications from scratch!",
      "target_audience": [
        "The course is appropriate for all Java developers: beginners to advanced"
      ]
    },
    {
      "title": "Data Visualization with Python for Beginners",
      "url": "https://www.udemy.com/course/making-graphs-in-python-using-matplotlib-for-beginners/",
      "bio": "Learn how to start visualizing all your data directly in your code",
      "objectives": [
        "Make line plots in Python",
        "Make scatter plots in Python",
        "Make 1-dimensional and 2-dimensional histogram plots",
        "Customize your plots by adding colour and changing line styles",
        "Customize your axis by changing the tick labels",
        "Add custom titles and labels to your plots",
        "Add custom text to your plots",
        "Adjust the size of your figures",
        "Add a legend to your plots",
        "Be able to save your figures in a desired format to your computer",
        "Change the scale of the axis to better graph logarithmic data"
      ],
      "course_content": {
        "Setup and Installation": [
          "Introduction to Matplotlib and Installing Anaconda",
          "Jupyter Notebooks Intro",
          "Inline Plotting"
        ],
        "Line and Scatter Plots": [
          "Making a Scatter Plot",
          "Understanding Figures",
          "Creating Axes",
          "Making a Line Plot",
          "Exercise Sheet 1 Intro",
          "Reading the Data From Txt File",
          "Reading the Data From CSV File",
          "Data Visualization Sheet 1 Exercise 1 Solution",
          "Data Visualization Sheet 1 Exercise 2 Solution"
        ],
        "Graph Customization, Annotation, and Formatting": [
          "Changing the X and Y Limits",
          "Adding a Title and Axis Labels",
          "Adding in Equations Into Text",
          "Adding and Formatting Axis Ticks",
          "Customizing Tick Labels",
          "Data Visualization Exercise Sheet 2",
          "Data Visualization Sheet 2 Exercise 1 Solution",
          "Data Visualization Sheet 2 Exercise 2 Solution",
          "Adding a Legend",
          "Adding Text Annotations",
          "Customizing our Graph Edges",
          "Using Plot Styles",
          "Saving Our Plots",
          "Data Visualization Exercise Sheet 3",
          "Data Visualization Sheet 3 Datetime Intro",
          "Data Visualization Sheet 3 Exercise 1 Solution",
          "Data Visualization Sheet 3 Exercise 2 Solution Part 1",
          "Data Visualization Sheet 3 Exercise 2 Solution Part 2",
          "Data Visualization Sheet 3 Exercise 2 Solution Part 3",
          "Data Visualization Sheet 3 Exercise 3 Solution"
        ],
        "Histograms, Bar Graphs, Pie Charts, and Additional Graphs": [
          "Histograms",
          "Advanced Histograms and Patches",
          "Bar Graphs",
          "Error Bars on Bar Graphs",
          "Box and Whisker Plots",
          "Pie Charts",
          "2-Dimensional Histograms",
          "Data Visualization Exercise Sheet 4",
          "Data Visualization Sheet 4 Exercise 1 Sample Solution",
          "Data Visualization Sheet 4 Exercise 2 Sample Solution",
          "Data Visualization Sheet 4 Exercise 3 Sample Solution",
          "Data Visualization Sheet 4 Exercise 4 Sample Solution",
          "Data Visualization Sheet 4 Exercise 5 Sample Solution"
        ],
        "Images and Color Scales": [
          "Loading and Showing Images",
          "Colormaps",
          "Adding a Colorbar to Our Axis",
          "Data Visualization Exercise Sheet 5",
          "Data Visualization Sheet 5 Exercise 1 Sample Solution",
          "Data Visualization Sheet 5 Exercise 2 Sample Solution Part 1",
          "Data Visualization Sheet 5 Exercise 2 Sample Solution Part 2"
        ],
        "3D Graphing & Animating": [
          "3D Line and Scatter Plots",
          "Changing View Angles and Animating Our Graphs",
          "Data Visualization Exercise Sheet 6 Intro",
          "Data Visualization Sheet 6 Exercise 1 Sample Solution"
        ]
      },
      "requirements": [
        "Basic Python knowledge",
        "A Python 3 Environment to Code in"
      ],
      "description": "Data and analytics are becoming increasingly important in our world and in modern day businesses. Usually data analytics at one point or another also means including or creating graphics. This can help you get a better sense of the data as well as help you better communicate your findings to others.\n\nPython is a favourite among data professionals, and performing analytics in Python is becoming increasingly more common. Therefore, it's great to be able to also directly create custom graphs alongside all the analytics.\n\nIn this course we'll start with some basic setup, and then get into different types of plots that we can create as well as how we can customize them.\n\nWe'll start off covering basic line and scatter plots, just to get a hang of the library, and then move further to create a larger variety of graphs. You'll learn how to add error bars, how to use and represent colours for intensities, how to use images in your plots, as well as how to create 3d plots.\n\nAdditionally, we'll spend some time looking at the customization options that Matplotlib provides, so that we can change the way our axes and axis ticks and labels look, learn how to add annotations and math formulas, or also how to hide parts of a graph so that we have a reduced and cleaner version.",
      "target_audience": [
        "Anyone interested in analyzing data",
        "Anyone who needs to visualize data",
        "People who want to incorporate data visualization into their code",
        "Anyone who is interested in expanding their Python knowledge"
      ]
    },
    {
      "title": "React - The Complete Guide 2025 (incl. Next.js, Redux)",
      "url": "https://www.udemy.com/course/react-the-complete-guide-incl-redux/",
      "bio": "Dive in and learn React.js from scratch! Learn React, Hooks, Redux, React Router, Next.js, Best Practices and way more!",
      "objectives": [
        "Learn React from the ground up and finish the course as an advanced React developer",
        "Build multiple high-quality demo apps, including a fullstack app built with NextJS",
        "Join more than 900,000 students in this course & more than 3,000,000 students I taught across all my courses",
        "Build fullstack React apps with NextJS 14+",
        "Follow along locally or in a cloud development environment",
        "Learn all about React Hooks and React Components",
        "Manage complex state efficiently with React's Context API & React Redux",
        "Build standalone React apps & applications connected to a backend via HTTP",
        "Learn about routing & route-related data fetching with React Router",
        "Implement user authentication in React apps",
        "Get started with React Unit Testing"
      ],
      "course_content": {},
      "requirements": [
        "JavaScript + HTML + CSS fundamentals are absolutely required",
        "You DON'T need to be a JavaScript expert to succeed in this course!",
        "ES6+ JavaScript knowledge is beneficial but not a must-have",
        "NO prior React or any other JS framework experience is required!"
      ],
      "description": "This bestselling course by the author of \"React Key Concepts\" has turned more students into ReactJS developers than any other courses - more than 900,000 and counting!\n-\nUpdated December 2024:\nFully updated for React 19!\n- Added brand-new section on \"Form Actions\" (introduced by React 19)\n- Added brand-new section on React Server Components (stable with React 19)\n- Updated multiple lectures to adjust for smaller changes due to React 19\nUpdated earlier 2024:\nAdded brand-new content (~3h) on the NextJS App Router\nAdded a brand-new \"Best Practices & Patterns\" section\nUpdated 2023:\nUpdated the entire first half of the course (re-recorded lectures, other half was updated at beginning of year already)!\nImproved explanations & demo projects. Course now covers even more key concepts & best practices.\nAdded brand-new section on React Query (Tanstack Query)\nAdded brand-new section on animating React apps with Framer Motion\nAdd two new practice projects\nAdded more coding exercises\nAdded brand-new JS Refresher section\nTons of minor improvements & fixes\nThis course is completely up-to-date with the very latest version of React with all the core, modern features you need to know & teaches you React in a practical, hands-on way!\nCompletely re-recorded majority of second half of course (incl. routing, authentication)\n\n\nA Course For Busy Customers & Business Professionals!\nThis course also comes with two paths which you can take: The \"complete\" path (full >40h course) and the \"summary\" (fast-track) path (~4h summary module) - you can choose the path that best fits your time requirements!\n\n\nReact.js is THE most popular JavaScript library you can use and learn these days to build modern, reactive user interfaces for the web.\nThis course teaches you React in-depth, from the ground up, step by step by diving into all the core basics, exploring tons of examples and also introducing you to advanced concepts as well.\nYou'll get all the theory, tons of examples and demos, assignments and exercises and tons of important knowledge that is skipped by most other resources - after all, there is a reason why this course is that huge! :)\nAnd in case you don't even know why you would want to learn React and you're just here because of some ad or \"the algorithm\" - no worries: ReactJS is a key technology as a web developer and in this course I will also explain WHY it's that important!\n\n\nWelcome to \"React - The Complete Guide\"!\nThis course will teach you React.js in a practice-oriented way, using all the latest patterns and best practices you need. You will learn all the key fundamentals as well as advanced concepts and related topics to turn you into a React.js developer.\nThis is a huge course because it really covers EVERYTHING you need to know and learn to become a React.js developer!\nNo matter if you know nothing about React or if you already got some basic React knowledge (not required but also not a problem), you will get tons of useful information and knowledge out of this course!\nMy goal with this course is to ensure that you feel confident working with React, so that you can apply for React jobs, use it in your own projects or simply enhance your portfolio as a developer - whatever your goal is: This course gets you there!\n\n\nI kept this course updated since its initial launch to ensure that you always learn React in the best possible and up-do-date way!\n\n\nWhat's in this course?\nA thorough introduction to React.js (What is it and why would you use it?)\nAll the core basics: How React works, building components with React & building UIs with React\nComponents, props & dynamic data binding\nWorking with user events and state to create interactive applications\nA (thorough) look behind the scenes to understand how React works under the hood\nDetailed explanations on how to work with lists and conditional content\nReact Hooks (in-depth)!\nWorking with built-in Hooks and building custom Hooks\nHow to debug React apps\nStyling React apps with \"Styled Components\" and \"CSS Modules\"\nWorking with \"Fragments\" & \"Portals\"\nDealing with side effects\nClass-based components and functional components\nSending Http requests & handling transitional states + responses\nHandling forms and user input (incl. validation)\nUsing React Form Actions\nRedux & Redux Toolkit\nRouting with React Router\nUnderstanding React Server Components\nAn in-depth introduction into Next.js\nDeploying React Apps\nImplementing Authentication\nUnit Tests\nCombining React with TypeScript\nAdding Animations\nTons of examples and demo projects so that you can apply all the things you learned in real projects\nAnd so much more - check out the full curriculum on this page!\nThis really is the \"Complete Guide\" - promised!\nAnd best of all?\nYou don't need any prior React knowledge!\nThis course starts with zero knowledge assumed! All you need is basic web development and JavaScript knowledge (though the course even includes a brief JavaScript refresher to ensure that we're all on the same page!).\nCheck out the full curriculum, the free preview videos and join the course risk-free thanks to the 30-day money-back guarantee!",
      "target_audience": [
        "Students who want to learn how to build reactive and fast web apps",
        "Anyone who's interested in learning an extremely popular technology used by leading tech companies like Netflix",
        "Students who want to take their web development skills to the next level and learn a future-proof technology"
      ]
    },
    {
      "title": "Python for Computer Vision with OpenCV and Deep Learning",
      "url": "https://www.udemy.com/course/python-for-computer-vision-with-opencv-and-deep-learning/",
      "bio": "Learn the latest techniques in computer vision with Python , OpenCV , and Deep Learning!",
      "objectives": [
        "Understand basics of NumPy",
        "Manipulate and open Images with NumPy",
        "Use OpenCV to work with image files",
        "Use Python and OpenCV to draw shapes on images and videos",
        "Perform image manipulation with OpenCV, including smoothing, blurring, thresholding, and morphological operations.",
        "Create Color Histograms with OpenCV",
        "Open and Stream video with Python and OpenCV",
        "Detect Objects, including corner, edge, and grid detection techniques with OpenCV and Python",
        "Create Face Detection Software",
        "Segment Images with the Watershed Algorithm",
        "Track Objects in Video",
        "Use Python and Deep Learning to build image classifiers",
        "Work with Tensorflow, Keras, and Python to train on your own custom images."
      ],
      "course_content": {
        "Course Overview and Introduction": [
          "Course Overview",
          "FAQ - Frequently Asked Questions",
          "Course Curriculum Overview",
          "Getting Set-Up for the Course Content"
        ],
        "NumPy and Image Basics": [
          "Introduction to Numpy and Image Section",
          "NumPy Arrays",
          "What is an image?",
          "Images and NumPy",
          "NumPy and Image Assessment Test",
          "NumPy and Image Assessment Test - Solutions"
        ],
        "Image Basics with OpenCV": [
          "Introduction to Images and OpenCV Basics",
          "Opening Image files in a notebook",
          "Opening Image files with OpenCV",
          "Drawing on Images - Part One - Basic Shapes",
          "Drawing on Images Part Two - Text and Polygons",
          "Direct Drawing on Images with a mouse - Part One",
          "Direct Drawing on Images with a mouse - Part Two",
          "Direct Drawing on Images with a mouse - Part Three",
          "Image Basics Assessment",
          "Image Basics Assessment Solutions"
        ],
        "Image Processing": [
          "Introduction to Image Processing",
          "Color Mappings",
          "Blending and Pasting Images",
          "Blending and Pasting Images Part Two - Masks",
          "Image Thresholding",
          "Blurring and Smoothing",
          "Blurring and Smoothing - Part Two",
          "Morphological Operators",
          "Gradients",
          "Histograms - Part One",
          "Histograms - Part Two - Histogram Eqaulization",
          "Histograms Part Three - Histogram Equalization",
          "Image Processing Assessment",
          "Image Processing Assessment Solutions"
        ],
        "Video Basics with Python and OpenCV": [
          "Introduction to Video Basics",
          "Connecting to Camera",
          "Using Video Files",
          "Drawing on Live Camera",
          "Video Basics Assessment",
          "Video Basics Assessment Solutions"
        ],
        "Object Detection with OpenCV and Python": [
          "Introduction to Object Detection",
          "Template Matching",
          "Corner Detection - Part One - Harris Corner Detection",
          "Corner Detection - Part Two - Shi-Tomasi Detection",
          "Edge Detection",
          "Grid Detection",
          "Contour Detection",
          "Feature Matching - Part One",
          "Feature Matching - Part Two",
          "Watershed Algorithm - Part One",
          "Watershed Algorithm - Part Two",
          "Custom Seeds with Watershed Algorithm",
          "Introduction to Face Detection",
          "Face Detection with OpenCV",
          "Detection Assessment",
          "Detection Assessment Solutions"
        ],
        "Object Tracking": [
          "Introduction to Object Tracking",
          "Optical Flow",
          "Optical Flow Coding with OpenCV - Part One",
          "Optical Flow Coding with OpenCV - Part Two",
          "MeanShift and CamShift Tracking Theory",
          "MeanShift and CamShift Tracking with OpenCV",
          "Overview of various Tracking API Methods",
          "Tracking APIs with OpenCV"
        ],
        "Deep Learning for Computer Vision": [
          "Introduction to Deep Learning for Computer Vision",
          "Machine Learning Basics",
          "Understanding Classification Metrics",
          "Introduction to Deep Learning Topics",
          "Understanding a Neuron",
          "Understanding a Neural Network",
          "Cost Functions",
          "Gradient Descent and Back Propagation",
          "Keras Basics",
          "MNIST Data Overview",
          "Convolutional Neural Networks Overview - Part One",
          "Convolutional Neural Networks Overview - Part Two",
          "Keras Convolutional Neural Networks with MNIST",
          "Keras Convolutional Neural Networks with CIFAR-10",
          "LINK FOR CATS AND DOGS ZIP",
          "Deep Learning on Custom Images - Part One",
          "Deep Learning on Custom Images - Part Two",
          "Deep Learning and Convolutional Neural Networks Assessment",
          "Deep Learning and Convolutional Neural Networks Assessment Solutions",
          "Introduction to YOLO v3",
          "YOLO Weights Download",
          "YOLO v3 with Python"
        ],
        "Capstone Project": [
          "Introduction to CapStone Project",
          "Capstone Part One - Variables and Background function",
          "Capstone Part Two - Segmentation",
          "Capstone Part Three - Counting and ConvexHull",
          "Capstone Part Four - Bringing it all together"
        ],
        "BONUS SECTION: THANK YOU!": [
          "BONUS LECTURE"
        ]
      },
      "requirements": [
        "Must have clear understanding of Python Basics",
        "Windows 10 or MacOS or Ubuntu",
        "Must have Install Permissions on Computer",
        "WebCam if you want to learn the video streaming content"
      ],
      "description": "Welcome to the ultimate online course on Python for Computer Vision!\nThis course is your best resource for learning how to use the Python programming language for Computer Vision.\nWe'll be exploring how to use Python and the OpenCV (Open Computer Vision) library to analyze images and video data.\nThe most popular platforms in the world are generating never before seen amounts of image and video data. Every 60 seconds users upload more than 300 hours of video to Youtube, Netflix subscribers stream over 80,000 hours of video, and Instagram users like over 2 million photos! Now more than ever its necessary for developers to gain the necessary skills to work with image and video data using computer vision.\nComputer vision allows us to analyze and leverage image and video data, with applications in a variety of industries, including self-driving cars, social network apps, medical diagnostics, and many more.\nAs the fastest growing language in popularity, Python is well suited to leverage the power of existing computer vision libraries to learn from all this image and video data.\nIn this course we'll teach you everything you need to know to become an expert in computer vision! This $20 billion dollar industry will be one of the most important job markets in the years to come.\nWe'll start the course by learning about numerical processing with the NumPy library and how to open and manipulate images with NumPy. Then will move on to using the OpenCV library to open and work with image basics. Then we'll start to understand how to process images and apply a variety of effects, including color mappings, blending, thresholds, gradients, and more.\nThen we'll move on to understanding video basics with OpenCV, including working with streaming video from a webcam.  Afterwards we'll learn about direct video topics, such as optical flow and object detection. Including face detection and object tracking.\nThen we'll move on to an entire section of the course devoted to the latest deep learning topics, including image recognition and custom image classifications. We'll even cover the latest deep learning networks, including the YOLO (you only look once) deep learning network.\nThis course covers all this and more, including the following topics:\nNumPy\nImages with NumPy\nImage and Video Basics with NumPy\nColor Mappings\nBlending and Pasting Images\nImage Thresholding\nBlurring and Smoothing\nMorphological Operators\nGradients\nHistograms\nStreaming video with OpenCV\nObject Detection\nTemplate Matching\nCorner, Edge, and Grid Detection\nContour Detection\nFeature Matching\nWaterShed Algorithm\nFace Detection\nObject Tracking\nOptical Flow\nDeep Learning with Keras\nKeras and Convolutional Networks\nCustomized Deep Learning Networks\nState of the Art YOLO Networks\nand much more!\nFeel free to message me on Udemy if you have any questions about the course!\nThanks for checking out the course page, and I hope to see you inside!\nJose",
      "target_audience": [
        "Python Developers interested in Computer Vision and Deep Learning. This course is not for complete python beginners."
      ]
    },
    {
      "title": "The Ultimate Excel Programmer Course",
      "url": "https://www.udemy.com/course/ultimate-excel-programmer/",
      "bio": "Learn Excel VBA from Scratch with Dan Strong, Bestselling Excel Expert with Over 180K Students Worldwide!",
      "objectives": [
        "Automate and Customize data entry forms",
        "Choose the right Loop for each task",
        "Master the CELLS and RANGE objects in multiple scenarios",
        "Create multiple Variable styles to match your need",
        "Customize your VBA Editor and Understand all the Toolbars and options",
        "Debug and Troubleshoot code like a boss!",
        "Record, Modify or Write Macros from scratch",
        "Make Custom Formulas/Functions on the fly",
        "Breeze through IF THEN statements and conquer all the Logical Operators",
        "Batch out inter-active MessageBoxes, InputBoxes and give users CHOICES!",
        "Generate Basic Reports that can be printed",
        "Add filters to report menus to narrow the records",
        "Take control of forms, Buttons, Drop-down menus, Checkboxes and option buttons AND so much more. . .",
        "Trigger code from a number of different methods - from Clicking on a cell - to De-Selecting a worksheet.",
        "Set up Special Commands when a workbook: Opens or closes, is selected, any cell or certain cells are selected, right before printing, etc. . .",
        "Manipulate Userforms for data entry, report generation, editing tables/databases - ALL within your control. Restrict the flow of data OR make the Userform(s) responsive, calculating, INTUITIVE.",
        "Streamline your work and the work of others.",
        "Put Excel ON AUTOPILOT. . .",
        "Trigger Macros using Worksheet and UserForm Controls (Buttons, Shapes, DropDowns, ListBoxes, Click Actions, Loads of Fun Controls)",
        "Change Cell Properties using code - Cell Color, Font Properties (Bold, Italic, Underline, etc), Borders and more!",
        "Master Beginning to Advanced Math with Variables and Learn Proper Use, Declaration and Scope",
        "Learn String Functions, Concatenation and How to Control Case-Sensitivity with VBA Functions",
        "Create Your Own Functions to be used In VBA or in a Cell!",
        "Uncover Advanced Search Functions Only Available in VBA",
        "Fun with Date and Time Math to Calculate Duration, Length and Intervals",
        "PROJECTS: Create Full Games, Learn From Coding Exercises and Enjoy Mid-Lecture Challenges!",
        "Discover and Master the VBE (Visual Basic Editor) and All the Mysterious Buttons and Features Within!",
        "Deal With Errors and Learn How To Prevent Them",
        "Feed Information from One Macro to Another using ByRef and ByVal Methods",
        "Utilize Variable Types: Constants, Static, Module-Level, Public, Private, 'Option Private Module', etc",
        "BONUS #1: Free e-book \"Excel VBA Master Keyboard Shortcuts\" - Now with more shortcuts (for PC and Mac) than anywhere else",
        "BONUS #2: Free Image Tools For Better Looking Buttons, Images and Form Backgrounds",
        "BONUS #3: Free Mouse Icons Packs To Customize MouseOver Effect on Many Controls Including a UserForm Background!",
        "Three Methods of Accessing a Worksheet using Code",
        "Get the Boundaries of a Range of Cells the way Pros do (Better LastRow and LastCol Techniques)",
        "Dynamically Sort or Filter Data. You can have multiple sort options, each assigned to different buttons!",
        "Utilize User-Input (MessageBoxes, InputBoxes, UserForms) and Use Conditional Logic (IF THEN, CASE STATEMENTS, AND, OR, NOT) to Control Direction",
        "Insert Worksheet Functions into Cells Programmatically Using Regular or R1C1 Notation",
        "Practice Code Slimming and Efficiency Techniques, such as WITH/ END WITH statements",
        "Speed Up Your Code Massively with Dan's \"VBA Speed Hacks\"",
        "Get Random Numbers to Generate Passwords, Create FileNames, Produce Random Actions In Games/Projects, Speed Tests",
        "Search Cells and Strings with Advanced Pattern Matching & Comparison, LIKE Operator and InStr Functions",
        "Advanced MessageBox Features (Including Special Icons, Direction, Buttons: Yes/No, Yes/No/Cancel, Abort/Retry and many more...)",
        "Create Optional UDF Parameters and choose Volatile or Non-Volatile Functionality"
      ],
      "course_content": {
        "The Range Object": [
          "Course Intro and Download Kit",
          "Getting FAST Help and Other Freebies with Excel Ninjas Group",
          "Get the Developer Ribbon (PC and Mac)",
          "What Is The Range Object and Your First Macro From Scratch",
          "Adding Secondary or Subsequent Commands",
          "Debugging in Excel VBA and Stepping Through Code",
          "Three Easy Ways To Test Or Store A Value",
          "How and When To Record a Macro (Plus Clean Up Tips)",
          "Three Main Data Type Notations For Entering Into Cells",
          "Several Ways of Triggering Macros (Intro To Buttons and Fun Controls)",
          "Exercise 01 - Objectives Overview",
          "Exercise 01 - Solution",
          "Affecting Multiple Cells With One Range Command",
          "Using a Named Range with the Range Object",
          "Tips and Best Practices For Better Development Skills",
          "Range Object Quiz"
        ],
        "Range Properties": [
          "VALUE, TEXT and FORMULA Properties - Reading and Writing Functions To a Cell",
          "Row and Column Properties",
          "SELECT Method",
          "COUNT Property",
          "Exercise 02a - Objectives Overview",
          "Exercise 02a - Solution",
          "ADDRESS Property",
          "NUMBERFORMAT Property",
          "FONT Collection - BOLD, ITALIC, UNDERLINE Properties",
          "Exercise 02b - Objectives Overview",
          "Exercise 02b - Solution",
          "Add Color To Cells, Inside and Out (4 Ways)",
          "Properties Quiz"
        ],
        "The Cells Object": [
          "Intro To The Cells Object",
          "Using The Cells Object and Practical Applications",
          "Using Column Letters instead of Numbers",
          "Using Cells Positionally within a Range",
          "Affecting ALL Cells in a Worksheet",
          "Exercise 03 - Objectives Overview",
          "Exercise 03 - Solution",
          "Using Range Object With Cells Object (To Affect Multiple Cells)",
          "Cells Quiz"
        ],
        "Variables": [
          "Intro to Variables",
          "Math With Variables",
          "Variable Declaration and Different Variable Types",
          "Variable Type Demonstration",
          "String Manipulation - Concatenation Examples",
          "String Manipulation - Len, Left, Right Functions",
          "String Manipulation - Mid Function (2 Methods)",
          "String Manipulation - Replace Function",
          "String Manipulation - Format Function",
          "String Manipulation - InStr Function and Practice Projects",
          "Date and Time Functions and Fun DateTime Math Tricks",
          "CDate and DateDiff Functions",
          "Exercise 04 - Objectives Overview",
          "Exercise 04 - Solution",
          "Scope and Heirarchy of Variables and Procedures",
          "VARIABLE SCOPES - Public, Private and other Variables",
          "Procedural Scopes - Public Versus Private Subs, Option Private Module",
          "Using Constants",
          "Passing Values to Another Procedure - ByRef vs ByVal",
          "Variables Quiz"
        ],
        "Toolbars and Menus": [
          "File Menu Walkthrough",
          "Edit Menu Walkthrough",
          "View Menu Walkthrough Pt 1",
          "View Menu Pt 2 - Watch Window, Locals Window and Immediate Window",
          "Insert, Format and Debug Menu Walkthrough",
          "Run and Tools Menu Walkthrough",
          "Toolbars Quiz"
        ],
        "Super Important Tools and Excel Logic": [
          "Three Ways To Access Other Sheets - Sheet Name, Index and CodeName",
          "Get the Last Row of Your Data Set",
          "Get the Last (Rightmost) Column of Your Data Set",
          "Get the Next Row in Your Data Set - Data Entry Basics",
          "Recording a Macro 101",
          "Dynamically Sorting The Employee Data",
          "Absolute vs Relative References and OFFSET() Function",
          "R1C1 Notation and How To Use In Formulas",
          "Using Worksheet Functions in the VBE",
          "Random Password Generator - Objectives Overview",
          "Random Password Generator - Solution",
          "Using With and End With",
          "If Then Statement",
          "Using Is Not Equal To And The NOT Operator",
          "AND, OR and NOT Operators",
          "Exercise 06a - Objectives Overview",
          "Exercise 06a - Solution",
          "Using ELSE and ELSEIF Commands",
          "Rock, Paper, Scissors Game - Objectives Overview",
          "Rock, Paper, Scissors Game - Solution",
          "The LIKE Operator",
          "Compare Strings With Case Insensitivity Using UCase and LCase",
          "Comparitive Operators With Text and Numbers (IsNumeric Function)",
          "Two Ways to Use If Then Statements in a One-Liner of Code",
          "Using GOTO and Labels, Common Uses, Error Routing",
          "Select Case as Alternative to IF THEN Statements",
          "Advanced MessageBox Features",
          "User Interaction - Message Box with Yes, No Buttons",
          "Exercise 06b - Objectives Overview",
          "Exercise 06b - Solution",
          "User Defined Functions 101",
          "User Defined Functions - Optional Parameters",
          "Volatile vs Non-Volatile Functions",
          "Super Important Info Quiz"
        ],
        "Loops and Report Writing Basics": [
          "Intro To Loops",
          "The FOR NEXT Loop",
          "Fun With The FOR NEXT Loop",
          "Beginning Our First Report Using Loops",
          "How To Loop Through Each Character In A String Or Phrase",
          "Morse Code Generator - Objectives Overview",
          "Morse Code Generator - Solution",
          "Increment Columns And Rows - Loops Within A Loop",
          "How and When To Exit A Loop, Sub Or Function",
          "Intro To User Interaction With An InputBox",
          "Specialized InputBox Method to Prompt for Numbers, Ranges, Etc",
          "More User Interaction Demos To Follow Along",
          "Name Definition Game - Objectives Overview",
          "Name Definition Game - Solution",
          "Printable Report Part 1 - Getting Items On Report Sheet",
          "Printable Report Part 2 - Clearing Last Report",
          "Printable Report Part 3 - Ensuring Visibility and Autoselect Report Sheet",
          "Seven Hacks To Massively Speed Up Your Code",
          "Exercise 07a - Objectives Overview",
          "Exercise 07a - Solution",
          "Sending Reports To the Printer or Using Automatic Print Preview",
          "The FOR EACH Loop",
          "Intro To DO LOOPS",
          "Help With Infinite Loops - INTERRUPTING A MACRO AND PHANTOM BREAKS",
          "Do Loop - While and Until Operators",
          "BONUS - Loop Through Multiple Files in a Folder and Scrape Data From Each",
          "Exercise 07b - Objectives Overview",
          "Exercise 07b - Solution",
          "Loops and Reports Quiz"
        ],
        "EVENTS: Worksheet Events made Easy": [
          "Intro To Events",
          "Selection Change - Macros When You Change The Active Cell",
          "Running Events Manually and Break Points",
          "Worksheet Activate Event and Intro to Me Keyword",
          "Worksheet Deactivate Event",
          "BeforeDelete Event - for Worksheet Deletion",
          "BeforeDoubleClick Event - Trigger a Macro When You Double Click",
          "Excel Dialog Boxes",
          "The Intersect Function - Test Whether Target Is Within a Range Of Cells",
          "BeforeRightClick Event and Customizing Right Click Context Menu Pt 1",
          "Customizing the Right Click Context Menu Pt 2 - Adding Custom Buttons",
          "Exercise 08a - Objectives Overview",
          "Exercise 08a - Solution",
          "Worksheet Calculate Event",
          "Worksheet Change Event and Preventing Endless Loops",
          "Exercise 08b - Objectives Overview",
          "Exercise 08b - Solution",
          "FollowHyperlink Event",
          "Final Thoughts on Worksheet Events and Review Other Events",
          "Tic Tac Toe Game - Objectives Overview",
          "Tic Tac Toe Game - Solution",
          "Worksheet Events Quiz"
        ],
        "WorkBook Events": [
          "Workbook Events Intro",
          "Workbook Open and Environ Function",
          "Useful Workbook-Level Commands - Opening, Saving and Closing",
          "Login Program - Objectives Overview",
          "Login Program - Solution",
          "Workbook Activate Event",
          "Workbook BeforeSave Event",
          "Workbook AfterSave Event - Make Backup Copy Upon Successful Save",
          "BeforeClose and BeforePrint Events",
          "Workbook Deactivate Event",
          "NewChart Event",
          "NewSheet Event",
          "Exercise 09 - Objectives Overview",
          "Exercise 09 - Solution",
          "SheetActivate Event - 3 Ways to Specify Which Sheets To Trigger Macro",
          "SheetDeactivate Event",
          "Comparing Workbook to Worksheet Events, Delete, Double-click, Right-click, Calcu",
          "PivotTable Auto Update Exercise - Objectives Overview",
          "PivotTable Auto Update Exercise - Solution",
          "WindowActivate and WindowDeactivate - Windows vs Workbooks vs Sheets",
          "WindowResize Event - Force A Minimum Width For Your App"
        ],
        "Worksheet Controls": [
          "Intro To Controls",
          "CommandButtons on Windows and Mac - Wage Calculator",
          "Adding An Image and Formatting Button (ActiveX and Form)",
          "CommandButton Properties Overview (ActiveX and Form)",
          "Populate Calendar Project - Objectives Overview",
          "Populate Calendar Project - Solution Pt 1",
          "Populate Calendar Project - Solution Pt 2",
          "Intro to ActiveX Key-Press Listeners",
          "KeyDown Event",
          "Capturing Shift, Alt, Ctrl (or some combination) Using the Shift Variable",
          "KeyPress Event on a CommandButton",
          "MouseMove Event and Using Statusbar for Notifications",
          "Manipulate Worksheet Form Control Label Text (PC,Mac)",
          "Simulating a MouseLeave Like Event with an Invisible Label",
          "MouseUp and MouseDown Events - Left, Middle, and Rightclick, Shift, Alt and Ctrl",
          "TextBox Properties Overview (ActiveX)",
          "TextBox Shapes as Form Controls",
          "TextBox Change() Event and Tips",
          "TextBox Change() Event Pt 2",
          "Controlling Tab Order With Worksheet ActiveX Controls",
          "Restrict User Input With KeyDown Event",
          "GotFocus and LostFocus Events",
          "Selecting All Text When Receiving Focus",
          "Ensure User Input Exercise (Overview)",
          "Ensure User Input Exercise (ActiveX Solution for PC)",
          "Ensure User Input Exercise (Form Control Solution for Mac,PC)",
          "Automating Report Options With A Checkbox",
          "TripleState and LinkedCell Properties with a Checkbox",
          "OptionButton Overview, Grouping and Alignment",
          "Homemade Quiz using Option Buttons, CommandButton and Compliance Checking",
          "Compliance Checking With Dynamic Button Visibility and Bonus OB Exercise",
          "Intro to SpinButtons (ActiveX and Form Control)",
          "SpinButtons with Textboxes and Numbers",
          "SpinButton - Changing Size, Position and Other Properties, Not Just Value",
          "SpinButton with Dates in a Textbox",
          "Four Neat Uses for ActiveX Labels",
          "ActiveX Labels Pt 2",
          "Intro To ComboBoxes, Dropdowns and Properties - Updating a List",
          "Intro To Form Control ComboBoxes, Index Function",
          "Two Methods For Dynamic Ranges For Your Lists (ActiveX and Form ComboBox)",
          "Get Specific Items in Your Combobox List, Clear All (ActiveX and Form Control)",
          "Adding Customized Multiple Columns Using .AddItem Method (ActiveX)",
          "ListBox Basics and Properties Overview (ActiveX and Form Control)",
          "ListBox Practice: Dynamic Cell Manipulation, ListIndex, List (ActiveX & Form)",
          "Additional Ways To Fill A List Quickly, Remove & Change Entries (ActiveX & Form)",
          "Using and Manipulating MultiSelect Items in a Listbox (ActiveX and Form)",
          "Dynamic ListBoxes Using .ADDITEM and More (ActiveX and Form Controls)",
          "Creating Headers For Your ListBox Creatively",
          "Make and Utilize INVISIBLE Columns - Special Trick (ActiveX)",
          "ScrollBar Control On A Worksheet And Lookup Practice",
          "Image Control - 2 Ways to Assign a Picture (ActiveX)",
          "Toggle Button Basics and Load Webpage On Image Banner Ad Click",
          "Inserting a Shape Object as Picture and Why Not To Use Pictures.Insert",
          "A Note On Third Party Enhanced Amazing ActiveX Controls"
        ]
      },
      "requirements": [
        "You should already have Microsoft Excel (version 2003 and up). Obviously the newer the better, but VBA works the same in all versions. It's just that newer versions have more options, thus more VBA Commands to control those options.",
        "Very very basic Excel skills needed for this course (like opening the program, how to click on cells and type things.) You really don't need any Excel experience, because I'll take you from Start to Finish in this course. I was just trying to be funny."
      ],
      "description": "Teach Excel to Do Your Work FOR YOU. . .\nMicrosoft Office is everywhere, installed on over 750 million computers, but most users only know how to set up a basic table or maybe even do a few formulas here and there.\nIn my course, I teach you how to take Excel by the horns and make it do whatever you want, whenever you want. It can go through loads of information and create a printable report for you. You can make custom forms so that you can access, analyze, edit, or add new information quickly to your data tables/ worksheets.\nExcel programming utilizes a simple but effective tool called \"VBA\" - the hidden programming language that runs quietly in the background while you work. It’s very easy and straight-forward to use.\nI'll show you the easiest tricks to learn this basic language in a fun, progressive method. Learn at your own pace. With each of my short, info-packed lectures, you'll learn another essential skill that you can immediately use. You'll find yourself handling these Automation tools instantly and in any spreadsheet you already use every day. If there's one thing I'm good at - and my students are good at - it's AUTOMATION.\nMy motto is, \"If I'm not making everybody's job easier, quicker and more enjoyable, I don't deserve to have this job\" - and that's what I live by.\nTake this course and access your true potential.\nOh, and I want to be the first to hear about your New Raise you get once you're making Excel Programs and running everything on autopilot for your co-workers!\n-Dan\n\n\nHere's what some of the students are saying:\n“I love this course. Extremely easy to follow along. If you are looking to learn more about Excel this is it!” - Jim C.\n\n“Loving this course! The information is presented quite clear and concise, and it is a really great way of learning VB really fast, yesterday I was a total ignorant of the subject. Today I programmed my first macro and cannot wait to learn more.” - Marcela T.\n“I had experimented with VBA previously, but I really feel like this course is exactly what I needed to take my Excel knowledge to the next level. In only 2 weeks I've improved my reporting exponentially and it's all thanks to this course!\" - Ryan S.\n\n“You can't go wrong with Daniel Strong!” - Steven S.\n\n“The presenter explains in detail and demonstrates what he's covering, easy to follow along and learn!” - David B.\n“Teaches you the fundamental of VBA programming without any prior experience. Shows with easy to follow Example!. thanks for the video!”  - Sean C.\n\"I've taken several different VBA courses here on Udemy and this one from Daniel is by far the most interesting and easy to understand. I've done exactly 107 lectures so far and already was able to automate 80% of my tasks at work that I've been doing manually for years... I'm angry with myself because of the time I wasted by not buying this course earlier. I can't even imagine what I will be able to do after finishing the entire course :)\" - Robert\n\n“Well explained, easy to understand lectures. Enjoyable and informative videos.” - Marlena\n\n“Very clear explanations broken down in short videos. Daniel goes at a slow pace that is easy to follow and understand, even for people with no programming experience.” - Gustavo P.\n“Best course on VBA ever taken. Thanks a lot!” - Nikita L.\n“This is an excellent course!!!  There's a lot of good, useful \"stuff\" here.  The examples are practical and real-world!” - Todd W.\n“Wow, I thought I knew a little bit about Excel but clearly I had only seen the tip of the iceberg. This course has opened my eyes to the true power of VBA within excel. Great course, fantastic instructor.” - Scott K.\n“By large and far, one of the best step by step guide to VBA programming I have ever seen. I have been playing around with VBA for over a year now, have watched countless videos and have read numerous articles and \"How-to\" guides, but I have never seen something this complete, this throughout. I am amazed at how little I actually new about the VBA world. Thanks a million!” - Alex B.\n“Everything I have been looking for, you would have to buy multiple books for this level of instruction!” - Luke S.\n\"Excellent VBA basic to advance tutorial.\" – Sandeep G.\n\n“This course is good for beginners and for experienced programmers.  Experienced programmers may want to skip through some sections on basics, but it is good to see how the basics work in the context of and excell worksheet.  He goes over different events and triggers (like buttons) to execute code.  This is a really good course if you plan to do some pretty complex vba code with forms and reports.”  - Christian H.\n\n“Very helpful if you do any type of data analysis.” – Jonathan D.\n“I think this is an excellent gateway to the tools we need to use going forward. I like the\nhands on nature.” – Andre C.\n“Much better than other classes and seminars. Great course.” – Mark S.\n“The instructor made VBA easy and straight forward to use.” – Min Z.\n“Very thorough and practical.” – Juan S.\n\n\n***Now Available for Offline Viewing!***",
      "target_audience": [
        "This Excel course is for anyone who wants to learn Automation secrets in Excel VBA. It’s for complete newbies and/or students looking for a refresher or Reference tool, to pick and choose relevant lessons for their projects. No prior programming knowledge is needed.",
        "This course is probably not for you if you’re looking to learn super advanced report authoring, which will be covered in a future course specifically on this topic. We will, however, make sure you know how to make good solid reports from your data and many tricks to make them look good.",
        "Beginning to Advanced Excel users who are ready to Automate their projects and use extremely customizable macros, build their own UserForms and learn the fundamentals of programming in a safe, easy, progressive way"
      ]
    },
    {
      "title": "Design Patterns in JavaScript",
      "url": "https://www.udemy.com/course/design-patterns-javascript/",
      "bio": "Discover the modern implementation of design patterns in JavaScript",
      "objectives": [
        "Recognize and apply design patterns",
        "Refactor existing designs to use design patterns",
        "Reason about applicability and usability of design patterns"
      ],
      "course_content": {
        "Introduction to Object-Oriented JavaScript": [
          "Introduction",
          "Tools of the Trade"
        ],
        "SOLID Design Principles": [
          "Overview",
          "Single Responsibility Principle",
          "Open-Closed Principle",
          "Liskov Substitution Principle",
          "Interface Segregation Principle",
          "Dependency Inversion Principle",
          "Summary"
        ],
        "Builder": [
          "Gamma Categorization",
          "Overview",
          "Builder",
          "Builder Facets",
          "Builder Coding Exercise",
          "Summary"
        ],
        "Factory": [
          "Overview",
          "Factory Method",
          "Factory",
          "Abstract Factory",
          "Factory Coding Exercise",
          "Summary"
        ],
        "Prototype": [
          "Overview",
          "Explicit Copying",
          "Copy Through Serialization",
          "Prototype Factory",
          "Prototype Coding Exercise",
          "Summary"
        ],
        "Singleton": [
          "Overview",
          "Singleton Implementation",
          "Monostate",
          "Singleton Problems",
          "Singleton Coding Exercise",
          "Summary"
        ],
        "Adapter": [
          "Overview",
          "Adapter",
          "Adapter Caching",
          "Adapter Coding Exercise",
          "Summary"
        ],
        "Bridge": [
          "Overview",
          "Bridge",
          "Bridge Coding Exercise",
          "Summary"
        ],
        "Composite": [
          "Overview",
          "Geometric Shapes",
          "Neural Networks",
          "Composite Coding Exercise",
          "Summary"
        ],
        "Decorator": [
          "Overview",
          "Decorator",
          "Decorator Coding Exercise",
          "Summary"
        ]
      },
      "requirements": [
        "Good understanding of JavaScript",
        "Familiarity with latest JavaScript language features",
        "Good understanding of object-oriented design principles",
        "A computer with latest JS and NodeJS versions and (hopefully) an IDE"
      ],
      "description": "Course Overview\nThis course provides a comprehensive overview of Design Patterns in JavaScript from a practical perspective. This course in particular covers patterns with the use of:\nThe latest versions of the JavaScript programming language\nUse of modern programming libraries and frameworks\nUse of modern developer tools such as JetBrains WebStorm\nDiscussions of pattern variations and alternative approaches\nThis course provides an overview of all the Gang of Four (GoF) design patterns as outlined in their seminal book, together with modern-day variations, adjustments, discussions of intrinsic use of patterns in the language.\nWhat are Design Patterns?\nDesign Patterns are reusable solutions to common programming problems. They were popularized with the 1994 book Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma, John Vlissides, Ralph Johnson and Richard Helm (who are commonly known as a Gang of Four, hence the GoF acronym).\nThe original book GoF book used C++ and Smalltalk for its examples, but, since then, design patterns have been adapted to every programming language imaginable: C#, Java, Swift, Python and now — JavaScript!\nThe appeal of design patterns is immortal: we see them in libraries, some of them are intrinsic in programming languages, and you probably use them on a daily basis even if you don't realize they are there.\nWhat Patterns Does This Course Cover?\nThis course covers all the GoF design patterns. In fact, here's the full list of what is covered:\nSOLID Design Principles: Single Responsibility Principle, Open-Closed Principle, Liskov Substitution Principle, Interface Segregation Principle and Dependency Inversion Principle\nCreational Design Patterns: Builder, Factories (Factory Method and Abstract Factory), Prototype and Singleton\nStructrural Design Patterns: Adapter, Bridge, Composite, Decorator, Façade, Flyweight and Proxy\nBehavioral Design Patterns: Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Strategy, Template Method and Visitor\nWho Is the Course For?\nThis course is for JavaScript developers who want to see not just textbook examples of design patterns, but also the different variations and tricks that can be applied to implement design patterns in a modern way. For example, the use of Symbol.iterator allows objects (including iterator objects) to be iterable and lets scalar objects masquerade as if they were collections.\nPresentation Style\nThis course is presented as a (very large) series of live demonstrations being done in JetBrains WebStorm and presented using the Kinetica rendering engine. Kinetica removes the visual clutter of the IDE, making you focus on code, which is rendered perfectly, whether you are watching the course on a big screen or a mobile phone.\nMost demos are single-file, so you can download the file attached to the lesson and run it in WebStorm, Atom or another IDE of your choice (or just run them from the command-line).\nThis course does not use UML class diagrams; all of demos are done via live coding.",
      "target_audience": [
        "Software engineers",
        "Web developers",
        "Designers",
        "Architects"
      ]
    },
    {
      "title": "Deploy Java Spring Apps Online to Amazon Cloud (AWS)",
      "url": "https://www.udemy.com/course/deploy-java-spring-apps-online/",
      "bio": "Learn how to deploy your Java Spring Apps online to showcase your Spring Skills! (Live Internet Access)",
      "objectives": [
        "Deploy your Java Spring Apps online for live Internet access",
        "Showcase your Java Spring skills to prospective employers",
        "Create a custom Domain Name that points to your Java Spring App",
        "This course will INSTANTLY set you apart from the competition!",
        "We are RESPONSIVE INSTRUCTORS .... post your questions and we will RESPOND in 24 hours.",
        "You can DOWNLOAD all source code and PDFs. Perfect for offline LEARNING and REVIEW."
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction",
          "Downloading the Source Code and PDFs"
        ],
        "Getting Started with Amazon Web Services": [
          "Amazon Web Services Overview",
          "AWS - Key Services - Part 1",
          "AWS - Key Services - Part 2",
          "Custom Domain Name Registration - Cost",
          "Create a Free AWS Developer Account - Demo",
          "Create an Elastic Beanstalk Server - Demo",
          "Deploy HelloWorld JSP App - Overview",
          "Deploy HelloWorld JSP App - Demo: Import Project",
          "Deploy HelloWorld JSP App - Demo: Build WAR file with Maven",
          "Deploy HelloWorld JSP App - Demo: Create App and Upload WAR to Elastic Beanstalk",
          "HEADS UP - Stay in the AWS Free Tier"
        ],
        "Deploy Java Spring Apps to Amazon Cloud": [
          "Deploy HelloWorld Spring App - Overview",
          "Deploy HelloWorld Spring App - Demo - Import and Test Locally",
          "Deploy HelloWorld Spring App - Demo - Deploy to Elastic Beanstalk"
        ],
        "Deploy MySQL Database in AWS with RDS": [
          "Deploy MySQL Database in AWS with RDS - Overview",
          "Deploy MySQL Database in AWS with RDS - Demo - Create Instance",
          "Deploy MySQL Database in AWS with RDS - Demo - Configure Database",
          "Deploy MySQL Database in AWS with RDS - Demo - Create Table",
          "HEADS UP: Stay in the AWS Free Tier"
        ],
        "Deploy Real-Time CRUD Spring App to Amazon Cloud": [
          "Overview of Real-Time CRUD Spring App",
          "Test Spring App Locally - Part 1",
          "Test Spring App Locally - Part 2",
          "Deploy Real-Time CRUD Spring App to Amazon Cloud - Demo - Part 1",
          "Deploy Real-Time CRUD Spring App to Amazon Cloud - Demo - Part 2",
          "Heads Up - 502 Proxy Error (MySQL Database Connection)"
        ],
        "Creating a Custom Domain Name with AWS Route 53": [
          "Creating a Custom Domain Name - Overview",
          "Registering the Domain Name",
          "Creating Record Sets for Domain Name",
          "Testing the Domain Name",
          "HEADS UP - Stay in the AWS Free Tier"
        ],
        "Appendix": [
          "Deploying Spring Boot JAR file with Thymeleaf on AWS",
          "Deploying Spring Boot WAR file with Thymeleaf on AWS",
          "Deploying Spring Boot WAR file with JSP on AWS"
        ],
        "Bonus": [
          "Bonus"
        ]
      },
      "requirements": [
        "Basic Java Spring knowledge is required",
        "No previous experience with Amazon Cloud needed",
        "Free AWS developer account requires a credit card for registration (no charges to card, verification only)."
      ],
      "description": "STAND OUT FROM THE CROWD BY SHOWCASING YOUR JAVA SPRING APP ONLINE!\nDeploy your Java Spring apps for Live Internet access!  no more \"localhost\" :-)\nIncludes deploying a MySQL database in the Amazon Cloud (AWS)\n---\nBenefits of Taking This Java Spring Course\nHave you developed a Spring app locally on your computer? Everything is running fine on \"localhost\". But wouldn't you like to showcase this app to prospective employers for live Internet access? What you need is a custom domain name and URL that points to your Spring App online. Now, how awesome would it be to share this URL to a prospective employer? Beyond prospective employers, you can also use this to impress your work colleagues and friends.\nIn this course, we'll cover all of the steps required to deploy your Java Spring App online to the Amazon cloud.\n\n\nYou Will Learn How To\nDeploy a Java Spring App online to the Amazon Cloud (AWS) - Live Internet Access\nCreate a free AWS Developer Account\nLaunch an Elastic Beanstalk Server\nBuild a Java Web Application Archive (WAR)\nDeploy a database in the Amazon Cloud\nPopulate the database with our custom tables and data\nDeploy an End-to-End Spring App to the Amazon Cloud\nAdd a Custom Domain Name that points to our Spring App\n\n\nWhat is the Amazon Cloud (AWS)?\nThe Amazon Cloud is a suite of online services for application deployment and management. It is similar to a normal web host, but you can use it for much. It has a rich set of features for modern cloud computing.\n\n\nDo I have to pay to use the Amazon Cloud (AWS)?\nNo, you do not have to pay. Amazon offers a free developers account for 12 months. Free AWS developer account requires a credit card for registration (no charges to card, verification only).\nWe'll show you how to set up a free AWS developer account in this course.\n\n\nCompared to other Spring courses\nThis is the ONLY course that shows you how to deploy Spring 5 apps to the Amazon Cloud. This will give your apps live Internet access.\n\n\nNo Risk – Udemy Refund\nFinally, there is no risk. You can preview 25% of the course for free. Once you purchase the course, if for some reason  you are not happy with the course, Udemy offers a 30-day refund (based on Udemy's Refund Policy).\nSo you have nothing to lose, sign up for this course and learn how to deploy Java Spring Apps Online to the Amazon Cloud!\n\nTarget Audience\nJava Spring Developers with basic Spring experience",
      "target_audience": [
        "The course is appropriate for all Java Spring developers: beginners to advanced"
      ]
    },
    {
      "title": "C# .NET For Beginners",
      "url": "https://www.udemy.com/course/c-net-for-beginners/",
      "bio": "An introduction to programming using C# and Microsoft's .NET platform",
      "objectives": [
        "Students of this course will learn the fundamentals of C# programming."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Lecture 2 Sandbox",
          "Lecture 3 Hello World!",
          "Lecture 3 Quiz",
          "Lecture 4 Variables Datatypes and Operators Part 1",
          "Lecture 4 Quiz",
          "Lecture 5 Variables Datatypes and Operators Part 2",
          "Lecture 5 Quiz"
        ],
        "Flow Control": [
          "Lecture 6 Flow Control - If Statement",
          "Lecture 6 quiz",
          "Lecture 7 Flow Control - Switch, While and For",
          "Lecture 7 Quiz",
          "Lecture 8 FLow Control - Foreach",
          "Lecture 8 Quiz"
        ],
        "Data Structures": [
          "Lecture 9 - Arrays",
          "Lecture 9 Quiz",
          "Lecture 10 - Strings",
          "Lecture 10 Quiz",
          "Lecture 11 - Structures and Enumerations",
          "Lecture 11 Quiz",
          "Lecture 12 - Classes Part 1",
          "Lecure 12",
          "Lecture 13 - Classes Part 2",
          "Lecture 13 Quiz",
          "Lecture 14 - Classes Part 3",
          "Lecture 14 Quiz",
          "Lecture 15 - Classes Part 4",
          "Lecture 15 Quiz"
        ],
        "Section 4 - Miscellaneous Topics of Importance": [
          "Lecture 16 - Namespaces and Error Handling",
          "Lecture 16 Quiz",
          "Lecture 17 - File I/O",
          "Lecture 17 Quiz"
        ],
        "Section 5 - Summary": [
          "Lecture 18 - Summary 1",
          "Lecture 19 - Summary 2"
        ]
      },
      "requirements": [
        "Students must have access to a laptop or desktop computer."
      ],
      "description": "This course introduces inexperienced students to programming using the C# programming language within the Microsoft .NET framework. This is the first in a four-course series on C# programming. All of the courses within the series will be free through the Udemy platform.\nThis course includes approximately 4.25 hours of instruction. All lecture notes and program source code are included for the student's review.\nSuccessful students will have a strong willingness to learn, a heavy interest in programming, mathematics and logic and the time to commit not only to the course, but to practicing the programming examples.\nRick Phillips, the course instructor, has a Ph.D. from the University of Wisconsin with over 25 years experience in IT. Rick programs in multiple languages and is considered an expert in database design, optimization and internationalization.\nStudents taking the course will be required to download and install Microsoft's Visual Studio. As such, successful students will need to have access to a personal laptop or desktop. Smartphones and tablets are not sufficient for this programming course.",
      "target_audience": [
        "C# .NET for Beginners is appropriate for any individual seeking to learn the fundamentals of the C# programming language."
      ]
    },
    {
      "title": "Java Programming: Learn Core Java and Improve Java Skills",
      "url": "https://www.udemy.com/course/java-programming-learn-java-and-improve-core-java-skills/",
      "bio": "Learn core Java Programming with this core Java course.This java programming course will take you more experienced level",
      "objectives": [
        "java programming; learn core java programming and improve java skills and android app development",
        "Proficiency in Java 11, java 12, java 14",
        "Proficiency in Eclipse",
        "Obtain Core Java skills",
        "Essential Java basics",
        "What Java is and how it works",
        "Programming fundamentals with Java",
        "Java Development Kit - JDK",
        "Java Runtime Environment – JRE",
        "Java Virtual Machine - JVM",
        "All concepts of Object-Oriented Programming (core java programming)",
        "How to use ‘static’ keyword and ‘nested and inner’ classes",
        "Super Classes and Sub Classes",
        "Strings",
        "Wrapper Classes",
        "Throw vs Throws",
        "Exceptions",
        "Java Swing",
        "Layouts and Grid Layout",
        "Enum Types and more",
        "Arrays",
        "Collections",
        "Lambda Expression",
        "Date and Time",
        "Java Input/Output (Java I/O)",
        "The instructor has great examples and does a good job of not just speaking in technical jargon the whole time unless he has gone over what the term means.",
        "He does go slightly past what some people would consider basic Java, but not without explaining it thoroughly.",
        "Whether you need a basic introduction to Java and website building using Selenium WebDriver, or are continuing your Android app developer education",
        "Oak academy’s top-rated Java instructors specialize in a wide array of Java programming practices",
        "In object-oriented programming, models called “objects” represent either a programming entity or an abstract concept.",
        "Several fields use Java, including Android app development, desktop applications that work on many operating systems, server-side applications, and more.",
        "Oracle, the owner of the Java programming language, has the Oracle Certified Developer: Java SE 11 Developer program",
        "One of the biggest advantages of Java is that it runs on a Java Virtual Machine (JVM), meaning that you can execute Java code on any platform that has a JVM"
      ],
      "course_content": {
        "Introduction to Core Java Programming": [
          "What We Will Learn In This Java Course?",
          "Project Files and Course Documents",
          "FAQ About Java programming, java core, Java new features ( java 12, java 11)"
        ],
        "Environment Setup": [
          "Getting Started With Java? ( JDK, JRE and JVM )",
          "Installing Java on Windows",
          "Installing Java on Linux",
          "Installing Java on Mac",
          "Quiz"
        ],
        "Development Environment": [
          "What is IDE?",
          "Download and Run Eclipse",
          "First Java Program - Hello World",
          "Compiling and Running Applications",
          "Closer Look at the First Java Program",
          "2"
        ],
        "Basics of Java Syntax": [
          "Closer Look at the Java",
          "What Are Variables?",
          "Basic Output",
          "Basic Input",
          "Comments",
          "Data Types",
          "Hexadecimal Octal and Binary Data Types",
          "Type Conversion & Type Casting",
          "1",
          "3",
          "Input & Output"
        ],
        "Operators": [
          "Arithmetic Operators",
          "Assignment Operators",
          "Unary Operators",
          "Equality and Relational Operators",
          "Conditional Operators",
          "Bitwise and Bitshift Operators",
          "Char Data Type",
          "Operator Precedence",
          "Expressions, Statements and Blocks",
          "Quiz"
        ],
        "Arrays": [
          "Introduction to Arrays",
          "Sorting Arrays",
          "Searching Arrays",
          "Multi-dimensional Arrays",
          "Quiz"
        ],
        "Control Flow Statements": [
          "If, If-Else Statement",
          "If-Else - If Ladder Statement, Nested If Statement",
          "Switch-Case Statement",
          "Project 1: Calculator",
          "For Loops",
          "For-Each Loop",
          "While Loop",
          "Infinite Loop",
          "Do - While Loop",
          "Break Keyword",
          "Continue Keyword",
          "Return Keyword",
          "Labeled Loops",
          "Project 2: Fibonacci Series",
          "Quiz"
        ],
        "Methods ( Functions )": [
          "What is Method?",
          "Method Calling",
          "Types of Methods & Method Return Types",
          "Java Var-Args",
          "Method Overloading",
          "Project 3: Find Exponential Number",
          "Quiz",
          "Creating Method in Java"
        ],
        "Java Object Oriented Concept": [
          "Object & Class",
          "Stack & Heap",
          "Access Modifiers",
          "Naming Conventions",
          "Constructors",
          "Packages",
          "“Static” Keyword",
          "Static import",
          "Nested & Inner Classes",
          "Local inner classes",
          "Quiz",
          "Decleration fileds"
        ],
        "Object Oriented Programming": [
          "Section Overview",
          "Inheritance",
          "Sealed Class",
          "Method Overriding",
          "“Super” and “This” Keywords",
          "“Final” Keyword",
          "Abstract Classes",
          "Interfaces",
          "Polymorphism",
          "Encapsulation",
          "Anonymous Class",
          "Quiz"
        ]
      },
      "requirements": [
        "No prior knowledge is required about Java 11, java 10, java 14 and all core java programming.",
        "Basic Computer Knowledge",
        "Desire to learn Java and Java Core Skills",
        "A computer with a 64-bit operating system",
        "We prefered Windows OS (64-bit) but this is not mandatory. You can prefer to use other Operating Systems. We also provided specific videos on installations for each platform",
        "We prefered Eclipse which is a powerful and advanced text editor with a lot of plug-ins and tools",
        "Desire to build app with core java programming, android app development selenium webdriver",
        "Nothing else! It’s just you, your computer and your ambition to get started today"
      ],
      "description": "Hello there,\nWelcome to the Java Programming: Learn Java and Improve Core Java Skills course online.\nLearn core Java Programming with this core Java course. This java programming course will take you a more experienced level\nThis Java Programming online course is one of the most awesome Udemy courses which teach step by step and follow the methodology in introducing concepts and demos ( learn by doing ) to the students so that they can learn with ease Java and learn the core Java skills needed to apply for Java developer positions.\nUdemy’s top-rated Java instructors specialize in a wide array of Java programming practices. Whether you need a basic introduction to Java and website building using Selenium WebDriver or are continuing your Android app developer education, Udemy has you covered.\nThis Java Programming course is project-based and we will do 7 awesome projects during the course. During the course, we will do more than 50 coding exercises.\nIn this course you will learn;\nWhat Java is and how it works,\nProgramming Fundamentals with Java,\nEclipse\nJava Development Kit - JDK,\nJava Runtime Environment – JRE,\nJava Virtual Machine - JVM\nAll Concepts of Object-Oriented Programming\nHow To Use ‘Static’ Keyword and ‘Nested and Inner’ Classes\nSuper Classes and Sub Classes\nStrings,\nWrapper Classes,\nThrow and Throws\nExceptions,\nSwing\nLayouts and Grid Layout\nEnum Types and more\nWhy would you want to take this course?\nOur answer is simple: The quality of teaching.\nWhen you enroll Java Programming online course, you will feel the OAK Academy`s seasoned developers' expertise.\nNo Previous Knowledge is needed!\nThis course will take you from a beginner to a more experienced level.\nThis Java course takes you from absolute beginner core concepts, like showing you the free tools you need to download and install, to writing your very first Java program. You will learn the core java skills step by step with hands-on examples. If you are from the field and need a refresher this course will be a guide for you, too. Every time you come back to this course you will learn something new or improve yourself.\nFresh Content\nOwners of Java ( Oracles ) are releasing new versions of Java at least twice a year and it’s no secret how technology is advancing at a rapid rate. It’s crucial to stay on top of the latest knowledge. With this course, you will always have a chance to follow the latest trends.\nWhat is Java?\nJava is a programming language and platform initially developed by Sun Microsystems and now owned by Oracle. Java is inspired by C and C++ and uses an object-oriented programming model, which means that concepts or things are represented as “objects” that have data fields and methods. One of the biggest advantages of Java is that it runs on a Java Virtual Machine (JVM), meaning that you can execute Java code on any platform that has a JVM, without re-compilation. This is different from C and C++, which require re-compilation for every hardware platform you execute the code on. Java has many other advantages, including automatic memory management. This eliminates hard-to-understand pointers used in languages like C, which can help Java developers write better code in a shorter period of time.\nWhat does it mean that Java is an object-oriented programming language?\nJava is an object-oriented programming (OOP) language, which means concepts or things are represented as “objects” that have data fields and methods. In object-oriented programming, models called “objects” represent either a programming entity or an abstract concept. These objects are created and assembled independently of one another but can work with each other in logical ways. Objects are manifestations of classes and can inherit code allowing for code re-use, which can drastically reduce code duplication if used correctly. Additionally, encapsulation, another core OOP concept, allows you to create code with the implementation hidden. Although, in many cases, writing OOP code in Java (and other OOP languages) can take longer than using a procedural language, the benefits obtained with OOP, namely code reusability, encapsulation of data, and readability of code, often result in code that is easier to maintain in the long run.\nWhat is Java used for?\nJava is a very versatile language. Several fields use Java, including Android app development, desktop applications that work on many operating systems, server-side applications, and more. The virtual machine required to run Java programs has been ported to numerous operating systems allowing Java to run on virtually all hardware. According to the TIOBE index, Java has consistently been in the top 3 most-used and popular languages since its initial release in the 1990s. Many developers still consider Java the language of choice in areas such as enterprise and application servers, and even in embedded systems development. Many Fortune 500 companies rely on Java to run their core systems and employers often view Java experience on a résumé as favorable due to its popularity.\nWhat certification is best for Java?\nOracle, the owner of the Java programming language, has the Oracle Certified Developer: Java SE 11 Developer program, which is easily the best certification to obtain for Java developers. The main reason why it’s the best certification, is, unlike most other certifications for Java, the Oracle certification is both well known and universally accepted by employers all over the world. The exam is challenging. You also must bring an ID with you to the exam, so you cannot get anyone to take it for you. Certification is really valuable for both the certification holder and for future employers. There are few, if any, other certification programs so universally accepted as Oracle’s Java certification. Thus, getting Java certification is one of the surest ways to give yourself an advantage over other job seekers in the marketplace.\nVideo and Audio Production Quality\nAll our contents are created/produced as high-quality video/audio to provide you the best learning experience.\nYou will be,\n· Seeing clearly\n· Hearing clearly\n· Moving through the course without distractions\nThe instructor has great examples and does a good job of not just speaking in technical jargon the whole time unless he has gone over what the term means. He does go slightly past what some people would consider basic Java, but not without explaining it thoroughly.\nYou'll also get:\nLifetime Access to The Course\nFast & Friendly Support in the Q&A section\nUdemy Certificate of Completion Ready for Download\nDive in now!\nJava Programming: Learn Core Java and Improve Java Skills\nWe offer full support, answering any questions.\nSee you in the course!",
      "target_audience": [
        "Beginners with no previous coding experience in java programming, selenium webdriver, core java, java 11",
        "Programmers who are looking to sharpen their java programming skills to the expert level",
        "Anyone who wants to learn important subjects of core Java like Strings, Exceptions, Swing and Enum Types and etc.",
        "Anyone who wants to create desktop applications, web applications, enterprise applications, mobile applications, computer games with Java",
        "Anyone who are planning job transformation and want to become Java developer",
        "Anyone who are beginner but wants to become expert",
        "Anyone who wants to become a computer programmer",
        "People who want to create beautiful apps with java programming, core java",
        "People who want to learn game development fundamentals and android app development"
      ]
    },
    {
      "title": "Learn to Program with Java for Complete Beginners - Part 1",
      "url": "https://www.udemy.com/course/learn-to-program-with-java-1/",
      "bio": "For absolute beginners, this professional training course will teach you how to create programs from scratch using Java.",
      "objectives": [
        "Explain what computer programs are and what computer programming is about.",
        "Discuss the terminology and concepts of computer programming.",
        "Write and compile simple computer programs.",
        "Describe basic computer language data types.",
        "Interact with computer programs using your terminal screen and keyboard.",
        "Evaluate expressions used in computer programs."
      ],
      "course_content": {},
      "requirements": [
        "Basic typing skills and comfort with file system operations are recommended."
      ],
      "description": "Course Summary\nWith over 80 videos and 8 hours of content, this online training course is designed to introduce the complete beginner to computer programming using the Java language. The course begins with definitions of basic terminology as well as the typical \"Hello, World!\" program. You will learn about basic Java data types next so that you can declare and use variables in your programs. From there, you will learn to read information from the user and output information to the screen. Finally, you will learn to create and evaluate expressions using arithmetic, relational and logical operators.\nIf you are an experienced programmer who wants to learn Java, please see our Introduction to Java Programming course, instead.\nHands On Learning\nUnlike other online training courses, you are encouraged to actively participate in the learning experience by running example files during lectures and performing coding challenges during labs. Each lab session includes review videos so you can compare your solution to the instructor's.\nBonus Content\nThis training course comes complete with working example and lab solution files as well as a link to optionally purchase the workbook used in the video at a discount.\nAbout the Instructor\nJamie Romero is a dynamic instructor and expert Java programmer. He has taught over 375 classes to programmers from companies like Hewlett-Packard, Lockheed Martin, Boeing, and Walt Disney. Jamie's energetic style and up-beat attitude are just what you need for an online training course.\nSome recent comments about Jamie's Udemy courses:\n\"I have taken numerous courses online to learn Java but I think this course is much better than all those courses collectively. I am on my 27th Lecture and I am extremely satisfied with my progress. If you are reading this and looking for a good Java course to start, trust me take this course right now. Don't waste your time and money somewhere else.\"\n\"I have subscribed to various other java tutorials online but no one does as good as Jamie Romero. Thank you for coming up with such a wonderful course , sir. You are awesome.\"\n\"Jamie has a great personality and voice for teaching students. His engaging and pleasant style makes it easy and fun to follow along. The courses are never bogged down in lengthy descriptions of topics that loses the viewer.\"",
      "target_audience": [
        "This is a first course in computer programming so anyone with basic computer skills should be successful.",
        "If you already have programming experience and want to learn Java, then take Learn by the Byte's Introduction to Java Programming course instead."
      ]
    },
    {
      "title": "Ethereum Blockchain Developer Bootcamp With Solidity (2025)",
      "url": "https://www.udemy.com/course/blockchain-developer/",
      "bio": "Become An Ethereum Blockchain Developer With One Course. Master Solidity, Web3.JS, Truffle, Metamask, Remix & More!",
      "objectives": [
        "Solidity Programming By Building Projects",
        "Blockchain Usage (Theory + Practice)",
        "Smart Contract Usage (Theory + Practice)",
        "Using Ethereum's Core Development Tools",
        "The Development Functions Of Ethereum",
        "Truffle Development By Building Projects",
        "How Decentralized Technology Works",
        "The Purpose And Structure Of Solidity Code"
      ],
      "course_content": {},
      "requirements": [
        "You Will Need A Computer Running Linux, MacOS, Or Windows",
        "A Basic Understanding Of Web Technologies",
        "Proficiency In A Programming Language Is Advantageous But Not Mandatory"
      ],
      "description": "Welcome to the Ethereum Blockchain Developer Bootcamp With Solidity course. It is the only course you will need to become a skilled Ethereum blockchain developer.\n\nThis course has over 50,000 students and 4,700 five-star reviews. That makes it one of the most highly-rated, popular, and up-to-date Ethereum blockchain development courses online.\n\nThe course includes over 20 hours of video tutorials, updated companion guides, step-by-step projects, and a responsive discussion board. All of that content is how you will master Ethereum blockchain development\n\nHere's why this course will take you from zero to blockchain developer:\n\n• The instructor is a co-creator of the industry-standard Ethereum certification\n\n• You will be learning with all of the latest blockchain development tools\n\n• You will learn blockchain development by building complete and usable projects\n\n• You get access to the same materials used in $10,000+ in-person bootcamps\n\n• The course is updated to reflect the latest changes in the ecosystem\n\nBy the end of this course, you will have a portfolio of projects you can show to potential employers. You’ll be confident enough that you’ll be able to use your new skills professionally\n\nRead the experience of some existing students:\n\n\"The level of detail and the careful explanation of them is unexpected. Saved hours of digging up documentation and tests - solved many questions I had even with some experience. Thanks.\" – Daniel Porto\n\n\"I have been slowly working through this course for a couple of months and have been loving it. The instruction comes at the perfect pace. The teachers are knowledgeable, and the supporting resources are packed with great labs and helpful information. Also, important for this space, the resources get updated. When doing labs, I often notice that the last date is within the past week. I have taken other development courses, and this is by far the best. For aspiring ethereum developers, I would recommend this course!\" – Walton Jones\n\n\"I am enjoying every lab in this course. Everything is updated. There are helpful files for quick reference while you are trying to code alone. Honestly one of the best, if not the best, Udemy course I have taken so far. Every question I had got answered in the deep dive explanation lesson that followed the practical lesson. I could not ask for more! Thank you.\" – Saeed Dawod\n\nYou’ll love this course. But if you don’t, there’s a 30-day money-back guarantee. You have nothing to lose and everything to gain by learning one of the most profitable skills. See you inside the course.",
      "target_audience": [
        "Individuals Who Want To Learn One Of The Most In-Demand Skills",
        "Technologists Who Want To Pivot Towards A High Paying Career",
        "Developers Who Want To Build Ethereum Blockchain Apps With Solidity",
        "Professionals Who Want To Confidently Add ‘Blockchain Developer’ To Their Resume"
      ]
    },
    {
      "title": "HMI Programming & Design - FactoryTalk View ME SCADA PLC",
      "url": "https://www.udemy.com/course/hmi-programming-design-factorytalk-view-me-scada-plc/",
      "bio": "HMI Programming SCADA PLC Systems Design | Develop HMI PLC Applications in Factory Talk View ME",
      "objectives": [
        "Create fully functional HMI Programs",
        "Understand and apply HMI Development best practices to their designs."
      ],
      "course_content": {
        "HMI Hardware & Software Overview": [
          "Hardware Overview",
          "Software Overview - FactoryTalk View Studio",
          "FAQ"
        ],
        "Core HMI Development Fundamentals": [
          "Section Introduction",
          "New Application & FTView Studio Overview",
          "Creating & Working with Displays",
          "Working with Drawing Objects - Text Field, Images & Shapes",
          "Working with Push Buttons - Momentary Push Button Creation",
          "IMPORTANT: Linking HMI to PLC Tags",
          "Numeric and String Displays & Objects",
          "Display Navigation & Pop-Up Display Management",
          "Leveraging Image Library and Symbol Factory"
        ],
        "Building a Full HMI Application": [
          "HMI Development Project Intro",
          "Creating the Application & Display Navigation Menu",
          "Designing the Main Screen",
          "Designing the Main Screen Part 2 / 2",
          "Integrating HMI Tags into the Project & Testing",
          "Testing our Application on a Real HMI",
          "Adding a Numeric Entry & Display Objects to our HMI Program"
        ],
        "HMI Development Advanced Concepts": [
          "HMI Based Tags Overview & Tutorial",
          "HMI Files & Extensions Management - .APA & .MER files",
          "HMI User Permissions Part 1 / 2",
          "HMI User Permissions Part 2 / 2",
          "HMI Parameter Files Overview & Example",
          "HMI Using Multiple Images for State Display",
          "HMI Alignment Tools & Object Positioning"
        ],
        "HMI Development Project - Chemical Process | Tanks, Valves, Recipes & More": [
          "Initializing the Application & Creating the Navigation System",
          "Main Screen Layout and Development",
          "Main Screen Instrumentation Development and Layout",
          "Building the Controls Pop-Up Screen",
          "Animating the Main Screen Level Displays",
          "Building the Recipe Screen",
          "Finalizing the Main System Screen Faceplates"
        ],
        "Bonus Content": [
          "\"Industrial Automation Programmers, Engineers & Technicians\" LinkedIn Group",
          "Other Courses (90% OFF)"
        ]
      },
      "requirements": [
        "Basic computer skills",
        "Basic mathematics",
        "General understanding of control systems",
        "(Optional) FactoryTalk View Studio OR any related HMI design software"
      ],
      "description": "The goal of this class is to equip you with the knowledge required to develop your own HMI applications on FactoryTalk View Studio and deploy them into Machine Edition (ME).\nWe will start by going over the core features of developing HMI applications. These features include connecting to the terminal, setting up communications to a live PLC, developing multiple displays as well as an array of features on top of these displays. The core section will cover absolutely everything you need to know in order to get started building your own stand alone applications.\nIn the subsequent sections of the class, we will be going over a simple project followed by advanced features of HMI development.\nThe final section (currently in development) will provide you with a larger project which will leverage the core as well as the advanced features covered in the previous sections.\nWhat are the requirements for the class?\nYou don't need any hardware or software to follow the lectures, however, it is highly recommended to get some practice before going into an interview (if that's your goal). If that's not possible, I would advise spending some time working with an emulator.\nWhat can I expect from this class?\nThe main objective of this course is to get you job-ready by the time you finish the last lecture.\nYou will have a good understanding of what an HMI does, how it does it as well as what the outcomes of those actions are.\nYou will be comfortable creating basic HMI screen layouts and troubleshoot complex existing ones.\nYou will have a better understanding of manufacturing systems as a whole.\nWhat is the target audience for the class?\nElectrical Engineers looking for a crash course on HMIs.\nElectrical Technicians / Electricians looking to expand their knowledge into controls.\nSoftware Engineers who are seeking to learn about controlling hardware.\nManufacturing Operators looking to progress in their career.\nAnyone interested in how manufacturing processes are executed.",
      "target_audience": [
        "Manufacturing Technicians",
        "Operators",
        "Electricians",
        "Electrical Engineers",
        "Contractors working with HMI development",
        "Integrators"
      ]
    },
    {
      "title": "Python for Beginners with Telusko",
      "url": "https://www.udemy.com/course/python-tutorials-for-by-navinreddy/",
      "bio": "Python Programming, OOP in Python, Database connectivity, Web Development using Python with Telusko",
      "objectives": [
        "How to write a code",
        "Learn Python Language",
        "Build Apps using Python",
        "Building Web Application using Python"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Python Installation",
          "Getting Started with Python"
        ],
        "Variables and Types": [
          "Variables",
          "List",
          "Tuple | Set",
          "Set Path in Windows And Help",
          "Sublime Text Editor",
          "More on Variables",
          "Data Type"
        ],
        "Operators": [
          "Operators in Python",
          "Number System Conversion",
          "Bitwise Operator"
        ],
        "Math and User Input": [
          "Import Math Function",
          "Working with PyCharm | Run | Debug | Trace | py file",
          "User Input | Command Line"
        ],
        "Conditionals and Loops": [
          "If Elif Else Statement",
          "While Loops",
          "For Loop",
          "Break Continue Pass",
          "Break vs Continue vs Pass",
          "Printing Patterns",
          "For Else",
          "Prime Number"
        ],
        "Arrays and Numpy": [
          "Array",
          "Accepting array values from User in Python Search in Array",
          "Why Numpy? Installing Numpy in Pycharm",
          "Ways of Creating Array",
          "Copying an Array",
          "Working With Matrix"
        ],
        "Functions": [
          "Functions",
          "Functions Arguments",
          "Type of Arguments",
          "Keyworded Variable Length Arguments in Python",
          "Global Keyword",
          "Pass List to a Function",
          "Fibonacci Sequence",
          "Factorial",
          "Recursion",
          "Factorial Using Recursion",
          "Anonymous Functions | Lambda",
          "Filter Map Reduce",
          "Decorators"
        ],
        "Modules": [
          "Modules",
          "Special Variable __name__",
          "Special Variable __name__ 2"
        ],
        "OOPs Concepts": [
          "Introduction",
          "Class and Object",
          "__init__ method",
          "Constructor, Self and Comparing Objects",
          "Types of Variables",
          "Types of Method",
          "Inner Class",
          "Inheritance",
          "Constructor in Inheritance",
          "Introduction to Polymorphism",
          "Duck Typing",
          "Operators Overloading",
          "Method Overloading and Method Overriding",
          "Iterator",
          "Generators",
          "Exception Handling"
        ],
        "Miscellaneous": [
          "MultiThreading",
          "File handling",
          "Comments",
          "IDLE Previous Command | Clear Screen?",
          "is Python Compiled or Interpreted Language?",
          "Swap 2 Variables",
          "Git | PyCharm | GitHub",
          "GitHub Code Contribution",
          "Anaconda Setup",
          "Jupyter Notebook Setup"
        ]
      },
      "requirements": [
        "This course is for absolute beginners"
      ],
      "description": "You will learn Python in this course.\nPython is one of the fastest-growing languages.\nPython is interpreted, object-oriented, high-level, procedure-oriented language\nIt has different versions\nThe reason behind it is that there are a huge number of libraries available on the market, many companies and developers are using them, and they can be implemented in many areas.\nIt is a general-purpose language, as it can be used in Machine learning, GUI, Software Development, Web development, and many more.\nGoogle, YouTube, Dropbox, NASA, and Yahoo use python\n\n\nDjango is a powerful, high-level web framework built with Python that follows the Model-View-Template (MVT) architectural pattern. The Django Software Foundation (DSF) is in charge of maintaining it as a free and open-source framework. The primary objective of Django is to simplify the development process of complex, database-driven websites.\nA framework, in general, is a set of pre-written code and tools that provide a structure for building applications. It offers a foundation and common functionalities, allowing developers to focus on application-specific logic rather than dealing with low-level details. Django provides numerous built-in features and libraries that assist in handling common web development tasks, such as URL routing, form handling, authentication, and database management.\nThere are several reasons why developers choose Django for web development. Firstly, Django emphasizes the concept of \"batteries included,\" meaning it comes with a wide range of ready-to-use components, reducing the need for external libraries. This saves development time and effort. Additionally, Django promotes the use of reusable code through its modular design, enabling developers to build applications quickly and efficiently.\nDjango can be used to develop both static and dynamic websites. For static websites, Django can serve as a content management system (CMS) where developers can easily manage and update the site's content. For dynamic websites, Django's MVT pattern plays a crucial role. The MVT architecture separates the application logic into three components:\nModel: Represents the data structure and database schema. It defines the data models, relationships, and interactions with the database.\nView: Handles the business logic and acts as an intermediary between the model and the template. It processes requests, retrieves data from the model, and prepares it for rendering.\nTemplate: Defines the presentation logic and represents the user interface. It determines how the data is displayed to the user.\nThe MVT pattern promotes a clean separation of concerns, making the code more maintainable, reusable, and testable. Django's built-in ORM (Object-Relational Mapping) simplifies database operations, providing an intuitive way to interact with the database without writing complex SQL queries.\nOverall, Django's robust features, scalability, security measures, and its supportive community make it an excellent choice for building large-scale, database-driven websites efficiently and effectively.",
      "target_audience": [
        "Beginners who want to get into software development, web development, machine learning"
      ]
    },
    {
      "title": "Python for Absolute Beginners: Learn Python in a Week!",
      "url": "https://www.udemy.com/course/python-programming-for-absolute-beginners/",
      "bio": "A Python 3 Practical Programming Course for Absolute Beginners - Learn how to Code in Python 3.12 (2024 Edition)",
      "objectives": [
        "Go from a total beginner to a confident Python programmer",
        "Understand and implement basic Python Code",
        "Automate Tasks on the computer by writing simple Python Programs",
        "Build Python Projects",
        "Be able to program in Python professionally"
      ],
      "course_content": {
        "Course Overview": [
          "Introduction",
          "Course Resources & Important Notes for New Students",
          "Why Learn Python?",
          "Five (5) Beginner Tips for Learning Python Programming"
        ],
        "Setting Up Python": [
          "Introduction",
          "Download & Install Python 3 (Windows)",
          "Download & Install Python 3 on macOS",
          "Download & Install Python 3 on Ubuntu Linux",
          "Using the Python Shell",
          "Setting Up Python (SUMMARY)",
          "Code Editors",
          "Setting Up Python"
        ],
        "Your First Python Program": [
          "Introduction",
          "Writing our first Python Program",
          "Let’s make some mistakes",
          "Creating a Variable",
          "Create a Variable",
          "Adding Comments",
          "CHALLENGE: Interact with IDLE (Python Shell)",
          "How to Find Help",
          "Writing your first Python program (SUMMARY)",
          "Your First Python Program"
        ],
        "Strings and String Methods": [
          "Introduction",
          "What is a String?",
          "EXERCISE: What Is a String",
          "SOLUTION: What Is a String",
          "Manipulate Strings with Methods",
          "EXERCISE: Change the Case",
          "SOLUTION: Change the Case",
          "EXERCISE: Remove Whitespace",
          "SOLUTION: Remove Whitespace",
          "String Indexing",
          "String Slicing",
          "EXERCISE: String Slicing",
          "SOLUTION: String Slicing",
          "String Concatenation",
          "EXERCISE: String Concatenation",
          "SOLUTION: String Concatenation",
          "Exercise: String Concatenation",
          "Concatenate 2 Variables",
          "String Formatting",
          "F-Strings: An Improved String Formatting Syntax",
          "EXERCISE: Streamline Your Prints",
          "SOLUTION: Streamline Your Prints",
          "Exercise : Strings",
          "Interact With User Input()",
          "EXERCISE: Interact With User Input",
          "SOLUTION: Interact With User Input",
          "Working With Strings and Numbers",
          "EXERCISE: Work With Strings and Numbers",
          "SOLUTION: Work With Strings and Numbers",
          "Print() Formatting Methods",
          "Finding a String in a String",
          "EXERCISE: Find a Letter in a String",
          "SOLUTION: Find a Letter in a String",
          "Strings and String Methods (SUMMARY)",
          "PROJECT: Create a Receipt Printing Program",
          "Strings and String Methods"
        ],
        "Numbers and Math": [
          "Introduction",
          "Numeric Types in Python",
          "Integers",
          "EXERCISE: Define Integer Literals",
          "SOLUTION: Define Integer Literals",
          "Floating Point Numbers",
          "Arithmetic & Comparison Operators",
          "Logical (Boolean) & Chained Comparison Operators",
          "Floating-Point Representation Error",
          "Math Functions and Number Methods",
          "Numbers Formatted as Strings",
          "EXERCISE: Show a Percentage",
          "SOLUTION: Show a Percentage",
          "Complex Numbers",
          "The Remainder (% Modulo) Operator",
          "BMI Calculator",
          "Switch the values stored in the Variables a and b",
          "Reading Numbers with the Input Function",
          "Input exercise",
          "Numbers and Math (SUMMARY)",
          "CHALLENGE: Calculating a Percentage",
          "CHALLENGE: Calculating an Average",
          "CHALLENGE: Converting a Math Formula to a Programming Statement",
          "Numbers and Math"
        ],
        "Functions and Loops": [
          "Introduction",
          "Executing a Function",
          "Creating Your Own Functions",
          "EXERCISE: Greet Someone",
          "SOLUTION: Greet Someone",
          "Documenting Your Functions",
          "EXERCISE: Cube",
          "SOLUTION: Cube",
          "List of Python Built-In Functions",
          "Writing while and for Loops",
          "EXERCISE: Print Integers",
          "SOLUTION: Print Integers",
          "Function Arguments",
          "Types of Functions",
          "Keyword Arguments",
          "Default Arguments",
          "xargs",
          "xxargs",
          "Exercise: Functions",
          "Functions and Loops (SUMMARY)",
          "Functions and Loops"
        ],
        "Scopes": [
          "Introduction",
          "Understanding Scope",
          "Introducing the LEGB Rule",
          "Exploring the Local, Enclosing, and Global Scope",
          "Inspecting the Built-in Scope",
          "Using the global Statement",
          "Preventing Pitfalls",
          "Scopes (Summary)"
        ],
        "Conditional Logic": [
          "Introduction",
          "Adding Logic to Your Code",
          "Building Complex Expressions",
          "Controlling the Flow of Your Program",
          "Creating Nested if Statements",
          "For Loops",
          "Breaking Out of the Pattern",
          "Recovering From Errors",
          "Using the try and except Keywords",
          "EXAMPLES of Using the if Statement in an Application",
          "EXAMPLES of Using the for Statement",
          "PROJECT: Guessing Game",
          "PROJECT: Improved Guessing Game (version 2) - PART 1",
          "PROJECT: Improved Guessing Game (version 2) - PART 2",
          "PROJECT: Improved Guessing Game (version 2) - PART 3",
          "Statements and Loops"
        ],
        "Lists - Tuples - Dictionaries - Sets": [
          "What is a List?",
          "Working with Lists",
          "Making Numerical Lists",
          "Printing Lists",
          "Exercise: Lists",
          "Lists",
          "Tuples",
          "Tuple Assignment, Packing, and Unpacking",
          "Working with Dictionaries",
          "Sets",
          "Exercise 7: Dictionaries",
          "Dictionaries"
        ],
        "Advanced Methods of Lists & Dictionaries": [
          "Using if Statements with Lists",
          "Using for Loops with Lists",
          "Using a while Loop with Lists and Dictionaries",
          "Creating Stacks Using Lists",
          "Searching and Sorting Lists",
          "Looping Through a Dictionary",
          "Replacing the switch statement with a dictionary",
          "Working with the Counter Object",
          "Advanced Methods of Lists & Dictionaries"
        ]
      },
      "requirements": [
        "A computer with an internet connection",
        "No programming experience is required",
        "This course was recorded with Python v3.9 but it's also compatible with Python v2"
      ],
      "description": "COMPLETELY REDONE IN 2024, WITH OVER 150 BRAND-NEW VIDEOS! (with Python 3.12)\n\n\nStart coding in Python immediately!\nIf you are a beginner in Programming, then this course will help you learn Python Programming fast. Python is an incredibly efficient language: your programs will do more in fewer lines of code than many other languages would require. It is also used in scientific fields for academic research and applied work.\nWhy you should take this Python course:\nIt’s the Perfect Length: The course is just 12 hours long, so you’ll actually be able to finish it and get your certificate.\nIt’s Practical: You actually use Python to create things. You can see you’ve understood because you make Python projects that work!\nMy goal was to create a Course for people of any age who have never programmed in Python before or have never programmed at all, so you can build programs that work.\nThe course is full of examples and projects that are carefully chosen to demonstrate each concept so that you can gain a deeper understand of the language. It is designed to serve as a single, all-inclusive learning resource for all Python newcomers, whether they will be using Python 2.X, Python 3.X, or both\nWe cover a wide variety of topics, including:\nCommand Line Basics\nInstalling Python\nRunning Python Code\nStrings\nLists\nDictionaries\nTuples\nSets\nNumber Data Types\nPrint Formatting\nFunctions\nScope\nBuilt-in Functions\nDebugging and Error Handling\nModules\nObject Oriented Programming\nInheritance\nFile I/O\nAdvanced Methods\nand much more!\nAre you looking to learn practical Python Programming you can put to use instantly? If so, then this is the course for you. It’s entirely project based and it’s full of examples which are fully explained and easy to understand. It has been recorder in full HD 1080p. If you get stacked don’t worry. I have fast and fully support through the discussion board.\nTry out the course for a full 30 days, with a Udemy-approved Zero Risk, 30 Day 100% Money Back Guarantee! You have absolutely nothing to lose and everything to gain!\nAt the end of this Python class you will be given a Certificate of Completion.\nPython is a great language to learn, so enroll in this course and let’s get started!",
      "target_audience": [
        "Complete Programming Beginners who have never programmed before",
        "People with willingness for learning",
        "Students transitioning over from another programming language to Python",
        "Office workers, students, and administrators would want to improve their productivity",
        "This course is a language tutorial, not a reference, and not an application course"
      ]
    },
    {
      "title": "The Complete Quantum Computing Course",
      "url": "https://www.udemy.com/course/quantum-computers/",
      "bio": "Learn everything you need to know about Quantum Computers, develop circuits to execute on them with Python and Qiskit!",
      "objectives": [
        "Quantum Computing",
        "Quantum Programming",
        "Qiskit",
        "Python",
        "Quantum Computers"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "How To Use This Course?",
          "Presentation for the Course"
        ],
        "Mathematical Foundations": [
          "Intro to Mathematical Foundations",
          "How Classical Computers Work?",
          "Probability",
          "Statistics",
          "Complex Numbers",
          "Matrix",
          "Matrix Operations",
          "Special Matrices",
          "Lineer Transformation"
        ],
        "Qubit and Physics": [
          "Qubit Introduction",
          "Superposition and Interference",
          "Entanglement",
          "Qubit State",
          "Braket",
          "Multi Qubit"
        ],
        "Python from Scratch": [
          "Introduction to Python from Scratch",
          "Anaconda Installation for Windows Users",
          "Anaconda Installation for MAC Users",
          "Numbers",
          "Variables",
          "Downloading Notebooks",
          "Python from Scratch All GitHub Links",
          "String",
          "Advanced String",
          "Variable Attributes",
          "Lists",
          "Lists Advanced",
          "Dictionary",
          "Sets",
          "Tuples",
          "Boolean",
          "Logical Comparisons",
          "If Statements",
          "Statements Continued",
          "Statements Practical Usage",
          "For Loop",
          "For Loop Practical Usage",
          "Break Continue Pass",
          "While Loop",
          "Useful Methods",
          "Zip and Random",
          "Lists Advanced",
          "Sublime Text for Windows Users",
          "Command Prompt for Windows Users",
          "Sublime Text for MAC Users",
          "Terminal for MAC Users",
          "Input and Output",
          "Functions Explained",
          "Functions Advanced",
          "Functions Practical Usage",
          "Scope",
          "Class",
          "Methods",
          "Class Practical Usage",
          "Inheritance",
          "Special Methods",
          "Error Handling",
          "Using Libraries",
          "Writing Own Modules",
          "Imported vs Direct"
        ],
        "Qiskit 101": [
          "Introduction to Qiskit",
          "Classical Gates",
          "IBM Signup",
          "Quantum Gates",
          "Entanglement",
          "Qiskit",
          "First Circuit",
          "Running on Simulator",
          "Getting Real Quantum Computer Properties",
          "Running on Real Quantum Computer",
          "Toffoli",
          "GitHub Links"
        ],
        "Teleportation": [
          "Introduction to Teleportation",
          "Phase",
          "Phase and Bloch Sphere",
          "Phase ve Bloch Sphere GitHub Link",
          "Superdense Coding",
          "Quantum Teleportation",
          "Teleporation in Qiskit",
          "Quantum Teleportation GitHub Link"
        ],
        "Bernstein Vazirani": [
          "Introduction to Bernstein Vazirani",
          "Quantum Algorithms",
          "Bernstein Vazirani Algorithm",
          "Improving Codes",
          "Bernstein Vazirani GitHub Link"
        ],
        "Deutsch": [
          "Introduction to Deutsch",
          "Deutsch Algorithm",
          "Creating Algorithm",
          "Deutsch in Qiskit",
          "Deutsch GitHub Link"
        ],
        "Grover's": [
          "Introduction to Grover's",
          "Classical Search Algorithm",
          "Applying Grover's on Qiskit",
          "Grover's GitHub Link",
          "Aqua and Dinner Party",
          "Dinner Party GitHub Link"
        ],
        "Shor's": [
          "Introcution to Shor's",
          "Shor's Algorithm",
          "Classical Way GitHub Link",
          "Shor Easy Way",
          "Shor Easy Way GitHub Link",
          "Quantum Fourier Transform",
          "Quantum Phase Estimation",
          "Extra Links"
        ]
      },
      "requirements": [
        "High school level mathematics",
        "A computer with at least 4GB of RAM"
      ],
      "description": "Welcome to the Complete Quantum Computing Course!\nQuantum computers are expected to change our lives drastically in upcoming years. We know we can solve specific problems in minutes in Quantum computers while we can solve them in thousands of years in classical computers. If you want to get ahead of the technology and learn about future, then you are at the right place!\nThroughout the course we will start from scratch and understand principals of quantum mechanics and how to use them in quantum computers. We will write our own codes to execute on real quantum computers using IBM Qiskit technology. If you have high school level of mathematical knowledge, you can take this course.\nTraining is given by Atil Samancioglu, who has more than 250.000 students worldwide on Programming & Cyber Security along with the Codestars, serving more than 1 million students online. Atil is co-founder of Academy Club & Pera Games and he also teaches programming in Bogazici University in Turkey.\nSome of the topics that will be covered throughout the course:\nQuantum Computer and Classical Computer principals\nProbability, Statistics, Matrices\nSuperposition\nEntanglement\nInterference\nQubit\nSuperdense Coding\nQuantum Teleportation\nBernstein Vazirani Algorithm\nDeutsch Algorithm\nShor Algorithm\nGrover Algorithm\nPython from Scratch\nQuantum Fourier Transform\nQuantum Phase Estimation\nTraining will start from completely zero and you will be able to reach the trainer in Q&A section if you have anything in your mind. All materials used in the training will be shared via GitHub and Udemy. Throughout the course we will use real Quantum Computers as well as simulators using IBM Qiskit framework. Python programming language will be delivered from scratch to all the way up to the details.\nWhen you complete this training you will be able to understand theory and practice of Quantum Computing, write your own circuits and execute codes on real quantum computers. You will easily adapt your quantum knowledge to other Quantum computers rather than IBM. Since IBM is the only provider for quantum computers on cloud, without paying any fee right now, all examples will be executed on IBMQ.\nHappy coding!",
      "target_audience": [
        "Students who want to learn about Quantum Computing",
        "Students who want to learn about Python",
        "Quantum Computing enthusiasts"
      ]
    },
    {
      "title": "60 Days of Java : The Complete Java Masterclass",
      "url": "https://www.udemy.com/course/javamasterclass/",
      "bio": "Master Java by building real-world projects. Learn JavaFX, Spring Boot, REST APIs, and more!",
      "objectives": [
        "Master Java from A to Z: Begin with the basics of Java programming and progress to advanced concepts.",
        "Understand object-oriented programming (OOP) and its core principles—classes, inheritance, polymorphism, and more.",
        "Build real-world projects including a fully functional To-Do App and REST APIs.",
        "Develop desktop applications using JavaFX for sleek, responsive user interfaces.",
        "Work with Spring Boot to build robust, scalable web applications and microservices.",
        "Learn data handling and file processing in Java, including working with databases using Spring Data and H2.",
        "Master concurrency, threads, and asynchronous programming for creating high-performance applications.",
        "Dive into cybersecurity to learn how to secure your applications and data.",
        "Work with RESTful APIs: Learn to design, build, and consume REST APIs using Spring Boot.",
        "Version control with Git & GitHub: Collaborate effectively and manage your codebase.",
        "Clean code and best practices: Learn to write high-quality, maintainable code"
      ],
      "course_content": {
        "Day 1: Introduction to Java and JDoodle Basics": [
          "How to get the most out of this course!",
          "Follow your Daily Success with out Check Off List!",
          "Java Development Career Path - Why Learning Java is a Great Investment",
          "JOIN THE COMMUNITY! - LINKS -",
          "Intro",
          "Introduction to Java",
          "Quick overview of JDoodle",
          "Displaying Text on The Screen Intro",
          "Hello World - Displaying Text",
          "Understanding the Predefined Code",
          "Common Errors you can run into",
          "Search for errors and fix them with Gen AI",
          "Let's Practice: Fun with Print Statements",
          "Debugging Basics - How to Solve Errors",
          "Additional java features",
          "print vs println - comments and escape sequences",
          "(Optional theory) Java Under the hood",
          "Numbers and basic Math",
          "(Optional) Getting Started with JDoodle",
          "Introduction",
          "What´s next? - DOWNLOAD SOURCE - Get your Downloadables here!",
          "ADVANCED EXERCISE: Displaying Text with Java and Escape Sequences"
        ],
        "Day 2: Variables and Data Types in Java": [
          "Intro",
          "Variables Intro and Naming Conventions",
          "Declaring and Initializing variables",
          "Datatypes Quick Overview",
          "Datatypes For Whole Numbers",
          "Datatypes For Floating Point Numbers Float and Double",
          "Datatype Char",
          "Datatype Boolean",
          "Datatype String",
          "Declaring multiple variables at once",
          "Arithmetics with variables",
          "TypeCasting Implicit and explicit",
          "Let's Practice: Shape Transformation",
          "Variables and Data types",
          "What´s next? - DOWNLOAD SOURCE - Get your Downloadables here!",
          "ADVANCED EXERCISE: Variable Manipulation and Data Types in Java"
        ],
        "Day 3: Handling User Input and Simple Calculations": [
          "Intro",
          "Introduction to Handling User Inputs",
          "User Input with Text and the Scanner Class",
          "User Input with Numbers and simple addition",
          "Next Line Buffer behaviour",
          "Let's Practice: Calorie counter pro",
          "Solution Calories Counter Pro",
          "Overview of Operators",
          "Modulo Operator",
          "Unary, Increment, Decrement Operators",
          "Relational Operators",
          "Compound Operators",
          "What´s next? - DOWNLOAD SOURCE - Get your Downloadables here!",
          "ADVANCED EXERCISE: Handling User Input and Simple Calculations"
        ],
        "Day 4: String Manipulation and Comparison": [
          "Intro",
          "Strings Overview",
          "Strings Creation and Concatenation",
          "Strings length and charAt method",
          "String Comparison with == Comparing References",
          "String Comparison with equal and equalIgnoreCase",
          "String Comparison with compareTo - lexicographically",
          "Cutting strings using substring()",
          "String replace, toUpperCase, toLowerCase",
          "String format with strings and numbers",
          "Operator Precedence and Associativity",
          "Java Basics - Part 2",
          "Let's Practice: Simple Interest Calculator",
          "What´s next? - DOWNLOAD SOURCE - Get your Downloadables here!",
          "ADVANCED EXERCISE: String Manipulation and Comparison in Java"
        ],
        "Day 5: Setting Up the Java Development Environment": [
          "Intro",
          "DISCLAIMER: KEEP AN EYE ON YOUR VERSION",
          "Overview JDK and IDE",
          "(Optional) Advanced knowledge about JDK",
          "Installing the JDK and Java Environment Variable",
          "Programming Java Without any IDE just the text editor",
          "Why IDE?",
          "Installing IntelliJ IDEA",
          "Setting up IntelliJ and creating our first project",
          "Some cool features of IntelliJ IDEA",
          "Autocompletion and closing a project",
          "Starting from an empty project and unused Variables",
          "Renaming refactoring",
          "Let's Practice: Budget Tracker Plus",
          "Budget Exercise Solution",
          "What´s next? - DOWNLOAD SOURCE - Get your Downloadables here!",
          "ADVANCED EXERCISE: Budget Tracker Plus in Java"
        ],
        "Day 6: Control Statements - If, Else, and Ternary Operators": [
          "Intro",
          "Control Statements in Java overview",
          "If Statement",
          "Nested If Statement",
          "Logical Operators",
          "Let's Practice: Chatbot",
          "If Statements Exercise Chatbot",
          "If Else Control Statements",
          "Nested If Else Control Statements",
          "If Else If Else",
          "If Else If Else - Understanding the Flow using Breakpoints",
          "Ternary Operators",
          "Let's Practice: Galaxy Weather Advisor",
          "Control Statements",
          "What´s next? - DOWNLOAD SOURCE - Get your Downloadables here!",
          "ADVANCED EXERCISE: Galaxy Weather Advisor"
        ],
        "Day 7: Switch Statements and Enums in Java": [
          "Intro",
          "Presentation of the Day - Switch Control Statement",
          "Basic Switch Statement",
          "Default and break",
          "Break and fall through",
          "If Statements vs Switch Statements",
          "Switch Statements with Char",
          "Switch Statements with Strings",
          "Enums and Switch",
          "Why Enums",
          "Switch within switch and prep for exercise",
          "Let's Practice: Text based Adventure",
          "Text based Adventure Game with Switch Statement",
          "Java Switch Statements",
          "What´s next? - DOWNLOAD SOURCE - Get your Downloadables here!",
          "ADVANCED EXERCISE: The Ultimate Adventure Game Using Switch Statements"
        ],
        "Day 8: Loops - For, While, and Do-While Loops": [
          "Intro",
          "Loops Introduction Presentation For Loop",
          "For Loops",
          "Let's Practice: Star Pyramid Builder (Beginner)",
          "Nested For Loops",
          "Pyramids with for loops",
          "Interview Question Fibonacci Sequence",
          "Job Interview question: Fibonacci sequence",
          "While Loop",
          "Do While Loop",
          "Break Keyword in Loops",
          "Continue Keyword in Loops",
          "Labels and break and continue",
          "Let's Practice: Controlling loops",
          "Loops",
          "Interview Question Harshad Number",
          "Job Interview Question: Harshad Number",
          "What´s next? - DOWNLOAD SOURCE - Get your Downloadables here!",
          "ADVANCED EXERCISE: Simple Calculator with Loops"
        ],
        "Day 9: Introduction to Arrays": [
          "Intro",
          "Introduction to Arrays",
          "Declaring, Initializing, Accessing and Modifying arrays",
          "Array Length and For Loops to iterate through arrays",
          "Enhanced For Loop - For Each Loop",
          "Sum, min and max of an array",
          "Let´s Practice: Rearranging Array Challenge",
          "Rearranging Array Challenge Solution",
          "Arrays Class and common methods",
          "Arrays toString and sort Methods",
          "Array binarysearch method",
          "CopyOf and by value vs by reference",
          "Arrays Fill and equals",
          "Java Arrays",
          "What´s next? - DOWNLOAD SOURCE - Get your Downloadables here!",
          "ADVANCED EXERCISE: Array Shuffle and Operations"
        ],
        "Day 10: Working with 2D Arrays": [
          "Intro",
          "2D Arrays overview",
          "2D Arrays - Declaration, initialization and iteration",
          "2D Arrays - Easier initialization",
          "2D Arrays - Enhanced for loops",
          "2D Arrays - get the largest number",
          "2D Arrays - get the sum of all items in a 2d array",
          "2D Arrays - Exercise",
          "Job Interview Question: Diagonal Sum",
          "ArrayList Intro",
          "ArrayList and its methods",
          "Let's Practice: Space Travel Simulator",
          "Quiz: Strings & Arrays",
          "What´s next? - DOWNLOAD SOURCE - Get your Downloadables here!",
          "ADVANCED EXERCISE: Space Travel Simulator with 2D Arrays"
        ]
      },
      "requirements": [
        "No prior programming experience is required; I will teach you everything from the beginning.",
        "A PC or Mac with internet access and a Java development environment (we’ll set this up together).",
        "Optional: IntelliJ IDEA (for the integrated development environment portion of the course) and Visual Studio Code."
      ],
      "description": "Welcome to the Complete Java Masterclass, the only course you need to master Java development from the ground up. This comprehensive program is designed to take you from a complete beginner to an advanced-level Java developer by combining a perfect balance of theory, practical projects, and professional-level best practices.\nWe will begin with Java fundamentals—variables, data types, control statements, and loops—ensuring a solid understanding of the language basics. As we progress, you'll learn the ins and outs of object-oriented programming, error handling, collections, file handling, and much more.\nBy the time you finish this course, you'll be equipped to build desktop applications with JavaFX, create REST APIs with Spring Boot, work with databases, implement cybersecurity practices for scalable, real-world applications.\nWhat makes this course unique?\nProject-based learning: You'll build multiple real-world projects, such as a To-Do Application and a full-featured Expense Tracker with Spring Boot, which will help you apply your knowledge in real-world scenarios.\nModern development practices: You'll learn how to develop professional-grade applications using Spring Boot, JavaFX, and REST APIs, ensuring you're up-to-date with industry standards.\nComprehensive curriculum: Covering everything from basic Java syntax to multi-threading, dependency injection, everything you need to become a Junior developer.\nSupportive community and instructor: I'm here to help. Throughout the course, I’ll be answering questions and providing feedback on your code and projects to ensure you stay on track and succeed.\nWho is this course for?\nAspiring software developers who want to learn Java and build professional applications.\nExisting developers looking to switch to Java or deepen their knowledge of Java and Spring Boot.\nStudents and professionals wanting to build desktop applications with JavaFX or create web services with Spring Boot.\nJava beginners with no prior experience who are eager to master one of the most widely used programming languages.\nCourse content:\nYou’ll learn Java through a structured path of 60 days, with each day introducing key topics and practical exercises:\nDay 1-15: Learn Java fundamentals, control statements, loops, arrays, and user input handling.\nDay 16-20: Dive into object-oriented programming (OOP) with inheritance, polymorphism, encapsulation, and interfaces.\nDay 21-25: Explore the Java Collections Framework, Exception handling, and best practices for clean, maintainable code.\nDay 26-30: Build desktop applications with JavaFX, using powerful UI components and animations.\nDay 31-40: Work with Spring Boot to build robust web applications and RESTful APIs. Learn Git, manage versions, and publish.\nDay 41-50: Integrate databases, create secure applications, Implement session management, Implement Stateless and Scalable authentication, Role Based Access Control, and Making a robust backend microservice\nDay 51-60: Making REST calls from Java desktop apps, Handling Authentication from Desktop apps, Creating an interactive expense tracker UI, Creating Sharable JAR file and using your own app\nProject Highlights:\nTo-Do Application: Build a feature-rich task manager with JavaFX, learning how to develop interactive desktop applications with clean and maintainable code.\nExpense Tracker: Develop a scalable, secure Expense Tracker using Spring Boot and REST APIs, where you'll manage data and user authentication.\nBuilding REST APIs: Master API creation with Spring Boot, integrating database connectivity and security features.\nInstructor:\nMy name is Denis Panjuta, and I've been teaching programming for over a decade. I've helped over 500,000 students around the world to master coding through my carefully structured courses. With a background in engineering and years of experience in Java, I’m here to guide you step-by-step to ensure you build professional-level applications with confidence.\nYour satisfaction guaranteed:\nI’m so confident in the quality of this course that I offer a 30-day full money-back guarantee. If you're not completely satisfied, you can get a full refund—no questions asked.\nGet started today!\nThis course is your way to mastering Java programming and stepping into the world of professional software development. Whether you want to build desktop applications, REST APIs, or learn the latest in Java development practices, this is the course for you.\nJoin now and start your journey to becoming a Java developer!",
      "target_audience": [
        "Aspiring software developers who want to learn Java and build professional applications.",
        "Existing developers looking to switch to Java or deepen their knowledge of Java and Spring Boot.",
        "Students and professionals wanting to build desktop applications with JavaFX or create web services with Spring Boot.",
        "Java beginners with no prior experience who are eager to master one of the most widely used programming languages."
      ]
    },
    {
      "title": "Rust Programming For Beginners",
      "url": "https://www.udemy.com/course/rust-coding-for-beginners/",
      "bio": "Learn the fundamentals of how to code and develop software applications using the Rust programming language.",
      "objectives": [
        "Fundamentals of computer programming concepts such as conditional logic, loops, and data transformations.",
        "How real-life requirements can be translated into working applications.",
        "Solid understanding of the basics of Rust programming.",
        "How to make your programs reliable through the use of automated testing and by leveraging features of the Rust language."
      ],
      "course_content": {
        "Getting Started": [
          "Download Data Files",
          "Introduction",
          "Installation",
          "Fundamentals: Data Types",
          "Fundamentals: Variables",
          "Fundamentals: Functions",
          "Fundamentals: Println macro",
          "Fundamentals: Control Flow",
          "Fundamentals: Repetition",
          "Comments",
          "Coding Exercise: Functions",
          "Demo: Numeric Types & Arithmetic",
          "Coding Exercise: Basic Math"
        ],
        "Making Decisions": [
          "Coding Exercise: Logic with If & Else (Part 1)",
          "Coding Exercise: Logic with If & Else (Part 2)",
          "Fundamentals: Match",
          "Demo: Match",
          "Coding Exercise: Basic Match (Part 1)",
          "Coding Exercise: Basic Match (Part 2)"
        ],
        "Repetition": [
          "Demo: Loop",
          "Coding Exercise: Loop",
          "Demo: While Loop",
          "Coding Exercise: While Loop"
        ],
        "Working With Data": [
          "Working With Data: Enums",
          "Demo: Enums",
          "Coding Exercise: Enums",
          "Working With Data: Structs",
          "Demo: Structs",
          "Coding Exercise: Structs",
          "Working With Data: Tuples",
          "Demo: Tuples",
          "Coding Exercise: Tuples"
        ],
        "Intermediate Concepts": [
          "Fundamentals: Expressions",
          "Demo: Expressions",
          "Coding Exercise: Expressions",
          "Fundamentals: Intermediate Memory",
          "Ownership",
          "Demo: Ownership",
          "Coding Exercise: Ownership",
          "Demo: Implementing Functionality",
          "Coding Exercise: Implementing Functionality"
        ],
        "Data Collections": [
          "Data Structures: Vectors",
          "Demo: Vectors & For Loops",
          "Coding Exercise: Vectors & For Loops",
          "Strings",
          "Demo: Strings",
          "Coding Exercise: Strings"
        ],
        "Advanced Concepts": [
          "Demo: Deriving Functionality",
          "Type Annotations",
          "Enums Revisited",
          "Demo: Advanced Match",
          "Coding Exercise: Advanced Match",
          "Working With Data: Option",
          "Demo: Option",
          "Coding Exercise: Option",
          "Demo: Generating Documentation",
          "Demo: Accessing Standard Library Documentation",
          "Coding Exercise: Accessing Standard Library Documentation",
          "Working With Data: Result",
          "Demo: Result",
          "Coding Exercise: Result",
          "Coding Exercise: Result & Question Mark Operator",
          "Data Structures: Hashmaps",
          "Demo: Hashmap Basics",
          "Coding Exercise: Hashmap Basics"
        ],
        "Real World": [
          "Demo: User Input",
          "Coding Exercise: User Input",
          "Project 1: Menu-Driven Billing Application",
          "Demo: Basic Closures",
          "Demo: Map Combinator",
          "Coding Exercise: Map Combinator",
          "Demo: Modules",
          "Demo: Testing",
          "Coding Exercise: Testing"
        ],
        "Refining Your Code": [
          "Demo: Option Combinators",
          "Coding Exercise: Option Combinators",
          "Demo: Iterators",
          "Coding Exercise: Iterators",
          "Demo: Ranges",
          "Fundamentals: Traits",
          "Demo: Traits",
          "Coding Exercise: Traits",
          "Demo: If...let...else",
          "Demo: While...let",
          "Demo: External Crates",
          "Activity: External Crates",
          "Demo: Default Trait",
          "Demo: const",
          "Demo: Modules As Separate Files"
        ],
        "Final Project": [
          "Demo: Custom Error Types",
          "Coding Exercise: Custom Error Types",
          "Demo: New Type Pattern",
          "Coding Exercise: New Type Pattern",
          "Project 2: Personal Contacts Manager",
          "Fundamentals: Advanced Memory",
          "Demo: Passing Closures To Functions",
          "Demo: Lifetimes"
        ]
      },
      "requirements": [
        "Comfortable doing typical tasks on a computer such as installing applications and working with zip files"
      ],
      "description": "This course is for the beginner who wants to learn how to code without getting overwhelmed by technical jargon and computer science topics. Rust Programming For Beginners is specifically designed to teach the core programming concepts necessary to get started building applications while also providing a solid foundation for future learning.\nThe best way to learn programming is to write engaging and interesting programs. This course features 30 coding exercises to complement the lectures, and are designed with real-world applications in mind. Each exercise presents a problem with hints on how to implement a solution, so you can get the practice you need to be successful. The exercises are accompanied with a video demonstrating a possible implementation for the exercise, and line-by-line commentary on how the code accomplishes the task and why it works.\nThe information in this course is introduced in a thoughtful order, which means you will always be aware of what every bit of code in a program is doing, and how it works the way it does. There is no need to wait until later in the course, or to study more advanced topics, in order to fully understand the code when presented. This is accomplished by building up knowledge through concise, easy to follow lectures that can be reviewed quickly.\nIn this course, you will learn:\nCritical concepts necessary to work with code, without overwhelming detail\nCreation of digital solutions for real-world problems\nReading and writing application code in the Rust programming language\nUtilization of the Rust ecosystem to efficiently develop applications\nAutomated testing to enhance the reliability of your solutions\nHow to make your projects easier to work with through the use of generated documentation\nFoundational computer science topics such as computer memory, program logic, and simple data structures\nThis course isn't just for beginner programmers, but any programmer who wishes to learn Rust. If you have experience coding in a high level memory-managed language such as Python, JavaScript, or C#, then this course is a great introduction to the Rust programming language and it's unique memory model and syntax.\nSign up today to learn the concepts of programming and how to build applications in Rust!",
      "target_audience": [
        "Non-coders who want to learn how to code",
        "Existing programmers who want to learn a low-level language"
      ]
    },
    {
      "title": "The Complete Pandas Bootcamp 2025: Data Science with Python",
      "url": "https://www.udemy.com/course/the-pandas-bootcamp/",
      "bio": "Now with ChatGPT for Pandas, Online Exercises, Seaborn, Machine Learning. Fully Updated (Pandas 3.x) as of Sep 2024",
      "objectives": [
        "Bring your Data Handling & Data Analysis skills to an outstanding level.",
        "Learn and practice all relevant Pandas methods and workflows with Real-World Datasets",
        "Learn Pandas based on NEW Version 2.x (already anticipating 3.x)",
        "Import, clean, and merge messy Data and prepare Data for Machine Learning",
        "Master a complete Machine Learning Project A-Z with Pandas, Scikit-Learn, and Seaborn",
        "Analyze, visualize, and understand your Data with Pandas, Matplotlib, and Seaborn",
        "Practice and master your Pandas skills with Quizzes, 150+ Exercises, and Comprehensive Projects",
        "Import Financial/Stock Data from Web Sources and analyze them with Pandas",
        "Learn and master the most important Pandas workflows for Finance",
        "Learn the Basics of Pandas and Numpy Coding (Appendix)",
        "Learn and master important Statistical Concepts with scipy"
      ],
      "course_content": {
        "Getting Started": [
          "Overview / Student FAQ",
          "Tips: How to get the most out of this course",
          "Did you know that...?",
          "More FAQ / Important Information",
          "Installation of Anaconda",
          "Opening a Jupyter Notebook",
          "How to use Jupyter Notebooks",
          "Introduction to Role Plays (NEW Feature!)",
          "Getting started in Data Science & Analysis: a Friendly Introduction",
          "Downloads (Get all Course Materials here!) **UPD Sep 24**"
        ],
        "---- PART 1: PANDAS FROM ZERO TO HERO (BUILDING BLOCKS) ----": [
          "Intro to Tabular Data / Pandas",
          "Download Course Materials Part 1 (Reminder)"
        ],
        "**NEW** Pandas Coding with your personal assistant - ChatGPT": [
          "Introduction",
          "Coding assistance for Pandas Coding using GPT-3.5 / GPT-4o mini (free)",
          "Pandas Data Analysis using GPT-4 / GPT-4o mini (Plus Subscription)"
        ],
        "Pandas Basics (DataFrame Basics I)": [
          "Create your very first Pandas DataFrame (from csv)",
          "Loading a CSV-file into Pandas",
          "How to read CSV-files from other Locations",
          "Pandas Display Options and the methods head() & tail()",
          "First Data Inspection",
          "Summary Statistics",
          "Built-in Functions, Attributes and Methods with Pandas",
          "Make it easy: TAB Completion and Tooltip",
          "First Steps",
          "Explore your own Dataset: Jupyter Coding Exercise 1 (Intro)",
          "Explore your own Dataset: Jupyter Coding Exercise 1 (Solution)",
          "Selecting Columns",
          "Selecting one Column with the \"dot notation\"",
          "Selecting Columns",
          "Zero-based Indexing and Negative Indexing",
          "Selecting Rows with iloc (position-based indexing)",
          "Slicing Rows and Columns with iloc (position-based indexing)",
          "Position-based Indexing Cheat Sheets",
          "Position-based Indexing 1",
          "Position-based Indexing 2",
          "Selecting Rows with loc (label-based indexing)",
          "Slicing Rows and Columns with loc (label-based indexing)",
          "Label-based Indexing Cheat Sheets",
          "Label-based Indexing 1",
          "Label-based Indexing 2",
          "Indexing and Slicing with reindex()",
          "Summary, Best Practices and Outlook",
          "Indexing and Slicing",
          "Jupyter Coding Exercise 2 - Intro",
          "Jupyter Coding Exercise 2 - Solution",
          "**NEW** Coding Exercises with ChatGPT",
          "Advanced Indexing and Slicing (optional)",
          "Which Role Play do you like most?",
          "First Day on the Job – Understanding a New Dataset",
          "Helping a New Intern Explore a Dataset"
        ],
        "Excursus: How to avoid and debug Coding Errors (incl. ChatGPT)": [
          "Introduction",
          "Test your debugging skills!",
          "Major reasons for Coding Errors",
          "The most commonly made Errors at a glance",
          "Omitting cells, changing the sequence and more",
          "IndexErrors",
          "Indentation Errors",
          "Misuse of function names and keywords",
          "TypeErrors and ValueErrors",
          "**NEW** Debugging Pandas Errors with ChatGPT",
          "Getting help on StackOverflow.com",
          "How to traceback more complex Errors",
          "Problems with the Python Installation",
          "External Factors and Issues",
          "Errors related to the course content (Transcription Errors)",
          "Summary and Debugging Flow-Chart",
          "**NEW** The Debugging Flow-Chart with ChatGPT"
        ],
        "Pandas Series and Index Objects": [
          "Intro",
          "First Steps with Pandas Series",
          "Analyzing Numerical Series with unique(), nunique() and value_counts()",
          "Maximum Value in a numerical column",
          "Most common Value in a numerical column",
          "Analyzing non-numerical Series with unique(), nunique(), value_counts()",
          "Unique Values in a Text Column",
          "Most common value in a text column",
          "Creating Pandas Series (Part 1)",
          "Creating Pandas Series (Part 2)",
          "Creating Pandas Series from scratch",
          "Indexing and Slicing Pandas Series",
          "Sorting of Series and Introduction to the inplace - parameter",
          "Sorting \"inplace\"",
          "nlargest() and nsmallest()",
          "The n largest values in a Pandas Series",
          "idxmin() and idxmax()",
          "Manipulating Pandas Series",
          "Pandas Series",
          "Jupyter Coding Exercise 3 (Intro)",
          "Jupyter Coding Exercise 3 (Solution)",
          "First Steps with Pandas Index Objects",
          "Creating Index Objects from Scratch",
          "Selecting Column Labels of a DataFrame",
          "Changing Row Index with set_index() and reset_index()",
          "Resetting an Index",
          "Changing Column Labels",
          "Renaming Index & Column Labels with rename()",
          "Renaming Column Labels",
          "Pandas Index objects",
          "Jupyter Coding Exercise 4 (Intro)",
          "Jupyter Coding Exercise 4 (Solution)"
        ],
        "DataFrame Basics II": [
          "Intro",
          "Filtering DataFrames by one Condition",
          "Filtering with one Condition",
          "Filtering DataFrames by many Conditions (AND)",
          "Filtering DataFrames by many Conditions (OR)",
          "Filtering with many Conditions",
          "Advanced Filtering with between(), isin() and ~",
          "Advanced Filtering",
          "any() and all()",
          "Search with any()",
          "Removing Columns",
          "Removing Rows",
          "Removing Columns",
          "Adding new Columns to a DataFrame",
          "Creating Columns based on other Columns",
          "Adding new Columns",
          "Adding Columns with insert()",
          "Creating DataFrames from Scratch with pd.DataFrame()",
          "Creating new DataFrames",
          "Adding new Rows (hands-on approach)",
          "DataFrame Basics II",
          "Jupyter Coding Exercise 5 (Intro)",
          "Jupyter Coding Exercise 5 (Solution)",
          "Exploring an Employee Survey Dataset (Interactive Coding Lab)"
        ],
        "Manipulating Elements in a DataFrame / Slice +++Important, know the Pitfalls!+++": [
          "Intro",
          "Best Practice (How you should do it)",
          "Chained Indexing: How you should NOT do it (Part 1)",
          "Chained Indexing: How you should NOT do it (Part 2)",
          "View vs. Copy",
          "Simple Rules what to do when...",
          "Manipulating DataFrames / Slices",
          "Coding Exercise 6 (Intro)",
          "Coding Exercise 6 (Solution)"
        ],
        "DataFrame Basics III": [
          "Intro",
          "Sorting DataFrames with sort_index() and sort_values() (Version 1.0 Update)",
          "Ranking DataFrames with rank()",
          "nunique() and nlargest() / nsmallest() with DataFrames",
          "Summary Statistics and Accumulations",
          "The agg() method",
          "Coding Exercise 7 (Intro)",
          "Coding Exercise 7 (Solution)",
          "User-defined Functions with apply(), map() and applymap()",
          "Hierarchical Indexing (Part 1)",
          "Hierarchical Indexing (Part 2)",
          "String Operations (Part 1)",
          "String Operations (Part 2)",
          "Coding Exercise 8 (Intro)",
          "Coding Exercise 8 (Solution)"
        ],
        "Visualization with Matplotlib": [
          "Intro",
          "The plot() method",
          "Customization of Plots",
          "Histograms (Part 1)",
          "Histograms (Part 2)",
          "Barcharts and Piecharts",
          "Scatterplots",
          "Coding Exercise 9 (Intro)",
          "Coding Exercise 9 (Solution)"
        ]
      },
      "requirements": [
        "A desktop computer (Windows, Mac, or Linux) capable of storing and running Anaconda. The course will walk you through installing the necessary free software.",
        "An internet connection capable of streaming videos.",
        "Ideally some Spreadsheet Basics/Programming Basics (not mandatory, the course guides you through the basics)"
      ],
      "description": "**Latest course update and full review in September 2024. Now with ChatGPT for Pandas and more than 20 Udemy Online Coding Exercises - NEW Feature**\n\n\nWelcome to the web´s most comprehensive Pandas Bootcamp. This is the only Pandas course you´ll ever need:\nmost comprehensive course with 36+ hours of video content\nnew AI features like Pandas Coding and Advanced Data Analysis with ChatGPT\n150+ Coding Exercises (Online and Offline Exercises)\nPractical Case Studies for Data Scientists and Finance Professionals\nFully updated to Pandas 2.2 and already anticipating Pandas 3.x\n\n\nThis course has one goal: Bringing your data handling skills to the next level to build your career in Data Science, Machine Learning, Finance & co. It has five parts:\nPandas Basics - from Zero to Hero (Part 1).\nThe complete data workflow A-Z with Pandas: Importing, Cleaning, Merging, Aggregating, and Preparing Data for Machine Learning. (Part 2)\nTwo Comprehensive Project Challenges that are frequently used in Data Science job recruiting/assessment centers: Test your skills! (Part 3).\nApplication 1: Pandas for Finance, Investing and other Time Series Data (Part 4)\nApplication 2: Machine Learning with Pandas and scikit-learn (Part 5)\n\n\nWhy should you learn Pandas?\nThe world is getting more and more data-driven. Data Scientists are gaining ground with $100k+ salaries. It´s time to switch from soapbox cars (spreadsheet software like Excel) to High Tuned Racing Cars (Pandas)!\nPython is a great platform/environment for Data Science with powerful Tools for Science, Statistics, Finance, and Machine Learning. The Pandas Library is the Heart of Python Data Science. Pandas enables you to import, clean, join/merge/concatenate, manipulate, and deeply understand your Data and finally prepare/process Data for further Statistical Analysis, Machine Learning, or Data Presentation. In reality, all of these tasks require a high proficiency in Pandas! Data Scientists typically spend up to 85% of their time manipulating Data in Pandas.\n\n\nCan you start right now?\nA frequently asked question of Python Beginners is: \"Do I need to become an expert in Python coding before I can start working with Pandas?\"\nThe clear answer is: \"No! Do you need to become a Microsoft Software Developer before you can start with Excel? Probably not!\"\nYou require some Python Basics like data types, simple operations/operators, lists and numpy arrays. In the Appendix of this course, you can find a Python crash course. This Python Introduction is tailor-made and sufficient for Data Science purposes!\nIn addition, this course covers fundamental statistical concepts (coding with scipy).\nIn Summary, if you primarily want to use Python for Data Science or as a replacement for Excel, this course is a perfect match!\n\n\nWhy should you take this Course?\nIt is the most relevant and comprehensive course on Pandas.\nIt is the most up-to-date course and the first that covers Pandas Version 2.x. The Pandas Library has experienced massive improvements in the last couple of months. Working with and relying on outdated code can be painful.\nPandas isn´t an isolated tool. It is used together with other Libraries: Matplotlib and Seaborn for Data Visualization | Numpy, Scipy and Scikit-Learn for Machine Learning, scientific, and statistical computing. This course covers all these Libraries.\nChatGPT for Pandas Coding and advanced Data Analytics included!\nIn real-world projects, coding and the business side of things are equally important. This is probably the only Pandas course that teaches both: in-depth Pandas Coding and Big-Picture Thinking.\nIt serves as a Pandas Encyclopedia covering all relevant methods, attributes, and workflows for real-world projects. If you have problems with any method or workflow, you will most likely get help and find a solution in this course.\nIt shows and explains the full real-world Data Workflow A-Z: Starting with importing messy data, cleaning data, merging and concatenating data, grouping and aggregating data, Explanatory Data Analysis through to preparing and processing data for Statistics, Machine Learning, Finance, and Data Presentation.\nIt explains Pandas Coding on real Data and real-world Problems. No toy data! This is the best way to learn and understand Pandas.\nIt gives you plenty of opportunities to practice and code on your own. Learning by doing. In the exercises, you can select the level of difficulty with optional hints and guidance/instruction.\nPandas is a very powerful tool. But it also has pitfalls that can lead to unintended and undiscovered errors in your data.  This course also focuses on commonly made mistakes and errors and teaches you, what you should not do.\nGuaranteed Satisfaction: Otherwise, get your money back with a 30-Days-Money-Back-Guarantee.\n\n\nI am looking forward to seeing you in the course!",
      "target_audience": [
        "Everyone who want to step into Data Science. Pandas is Key to everything.",
        "Data Scientists who want to improve their Data Handling/Manipulation skills.",
        "Everyone who want to switch Data Projects from Excel to more powerful tools (e.g. in Research/Science)",
        "Investment/Finance Professionals who reached the limits of Excel."
      ]
    },
    {
      "title": "C++ Programming for Beginners",
      "url": "https://www.udemy.com/course/c-plus-plus-programming-beginners/",
      "bio": "Enter the world of computer science, learn to code and solve problems using C++",
      "objectives": [
        "Programming Fundamentals & Concepts",
        "Converting Logic into C++ Code",
        "Complete Modern C++ Syntax",
        "Object Oriented Programming",
        "C++ Standard Template Library",
        "Problem Solving"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction to Course",
          "Course Logistics",
          "Code Repository"
        ],
        "Logical Thinking-I Flowcharts": [
          "Building Blocks of Flowchart",
          "Flowchart - Simple Interest",
          "Flowchart - Largest Number",
          "Flowchart - Sum of First N Numbers",
          "Flowchart - Sum of Multiple Inputs",
          "Flowchart - Prime Number",
          "Flowchart - GCD",
          "Flowchart - Bank Employee",
          "Flowchart - Bank Guard",
          "Assignment - Flowcharts"
        ],
        "Logical Thinking-II Pseudocode": [
          "Pseudocode - Notation",
          "Pseudocode - SImple Interest",
          "Pseudocode - Sum 1 to N",
          "Pseudocode - Sum of N Numbers",
          "Pseudocode - Prime or Not",
          "Pseudocode - GCD",
          "Pseudocode - Star Pattern",
          "Pseudocode - Star Pyramid",
          "Pseducode Assignment"
        ],
        "C++ Getting started": [
          "C++ Boilerplate",
          "Sublime Text + Compiler Setup",
          "Building & Running Code",
          "Hello, World!",
          "Solution : Hello, World!",
          "Input & Output",
          "Square of Number",
          "Solution : Square of Number"
        ],
        "C++ Diving Deeper": [
          "Preprocessor Directive",
          "Identifiers",
          "Keywords",
          "Main",
          "Namespaces",
          "Comments",
          "Summary",
          "Hello You!",
          "Solution - Hello You!"
        ],
        "Variables, Datatypes & Storage": [
          "Variables",
          "Datatypes",
          "Using sizeOf Operator",
          "Binary Number System",
          "Storage of Integers",
          "Data type Modifiers",
          "Storage of Negatives Numbers",
          "Range of Signed vs Unsigned Integers",
          "Storage of Floats & Doubles",
          "Storage of Characters",
          "Storage of Booleans",
          "Constants",
          "Typecasting",
          "Explicit Typecasting",
          "Typecasting Challenge",
          "Find the sum",
          "Solution - Find the sum",
          "Find the Average Marks",
          "Solution - Find the Average Marks",
          "Find the Ceil",
          "Ceil, Floor & Round Functions",
          "Find the Floor",
          "Simple Interest Calculator",
          "Solution - Simple Interest Calculator"
        ],
        "Operators & Expressions": [
          "Arithmetic Operators",
          "Assignment Operators",
          "Increment Decrement Operators",
          "Relational Operators",
          "Logical Operators",
          "Bitwise Operators - I",
          "Bitwise Operators - II"
        ],
        "Flow Control - Conditional Statements": [
          "If Statement",
          "If-Else",
          "If Else-if Else",
          "Multiple If Blocks",
          "Problem - Electricity Bill Calculator",
          "Ternary Operator",
          "Switch Case",
          "Problem - Calculator",
          "Odd or Even Number",
          "Solution - Odd Even",
          "Cash Withdrawal",
          "Solution - Cash Withdrawal",
          "Predict the Grade",
          "Solution - Predict the Grade",
          "Electricity Bill Calculator",
          "Solution - Electricity Bill Calculator",
          "Fixed Deposit Interest",
          "Simple Calculator"
        ],
        "Flow Control - Loops": [
          "While Loop",
          "While Example - Sum of N Inputs",
          "For Loop",
          "For - While Equivalence",
          "Problem - Sum of Digits of a Number",
          "Problem - Star Pattern",
          "Problem - For ABCD Pattern",
          "Problem - Print Reverse of a Number",
          "Problem - Reverse the Actual Number",
          "Break",
          "Continue",
          "Problem - Prime Number Check",
          "How to Submit Codes?",
          "Find Largest",
          "Do While",
          "Nested Loops",
          "Problem - Number Pyramid",
          "Loops",
          "Sum of digits",
          "Sum of odd digits",
          "Sum of digits at odd position",
          "Fizz Buzz Problem",
          "Check Prime Number",
          "Armstrong Number",
          "Factorial of a Number",
          "Fibonacci Series",
          "Prime Numbers Till N"
        ],
        "Pattern Problems": [
          "Pattern 1",
          "Pattern 2",
          "Pattern 3",
          "Pattern 4",
          "Pattern 5",
          "Pattern 6",
          "Pattern 7",
          "Pattern 8"
        ]
      },
      "requirements": [
        "No Pre-requisites",
        "Passion to learn coding"
      ],
      "description": "Are you an absolute beginner looking forward to kickstart your journey in the programming domain. Coding can be hard skill learn to learn for many but no more. Welcome to C++ Programming Essentials, the most fundamental course that every aspiring programmer should take to kickstart their journey in the world of programming. The course teaches you the fundamental building blocks of programming and builds a logical thinking mindset using C++ as our programming language. Many concepts taught in the course are also relevant to other languages like Java, Python, JavaScript etc with few changes in the coding syntax\n\nYou will understand the basic concepts and techniques to break down a given problem into smaller parts by drawing flowcharts, write pseudocode, and then diving deep into C++  topics like -\nvariables, datatypes, flow control using branching & loops, functions, arrays, character arrays & strings, recursion, bitmasking & OOPs concepts.\n\nCourse Features\nHD Videos\nIntuitive Explanations\nBeginner Friendly Teaching\nTested Industry vetted curriculum\nAssignments & Q-A Support\nCertificate of Completion\n\nThe course is your first step towards problem solving, and will help you to get your basics right. After this course, you can easily pursue a course on learning a programming language of your choice, followed by Data Structures, Algorithms & Competitive Programming. Many top companies like Google, Facebook, Amazon, Directi, CodeNation, Goldman Sachs etc encourage algorithmic programming and conduct coding competitions to hire smart people who can solve problems.\n\nThis course is taught by Prateek Narang, who is not just a software engineer but a teacher by heart and many bestseller courses on Udemy in Algorithms category! He has worked with companies like Google, and has co-founded two startups including Coding Minutes, which is now a part of Scaler Academy.",
      "target_audience": [
        "Beginners looking forward to start learning programming",
        "Developers who want to learn C++ Syntax",
        "Students who want to learn data structures & algorithms in C++ later"
      ]
    },
    {
      "title": "Design Patterns in Python",
      "url": "https://www.udemy.com/course/design-patterns-python/",
      "bio": "Discover the modern implementation of design patterns in Python",
      "objectives": [
        "Recognize and apply design patterns",
        "Refactor existing designs to use design patterns",
        "Reason about applicability and usability of design patterns"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The SOLID Design Principles": [
          "Overview",
          "Single Responsibility Principle",
          "Open-Closed Principle",
          "Liskov Substitution Principle",
          "Interface Segregation Principle",
          "Dependency Inversion Principle",
          "Summary"
        ],
        "Builder": [
          "Gamma Categorization",
          "Overview",
          "Builder",
          "Builder Facets",
          "Builder Inheritance",
          "Builder Coding Exercise",
          "Summary"
        ],
        "Factories": [
          "Overview",
          "Factory Method",
          "Factory",
          "Abstract Factory",
          "Factory Coding Exercise",
          "Summary"
        ],
        "Prototype": [
          "Overview",
          "Prototype",
          "Prototype Factory",
          "Prototype Coding Exercise",
          "Summary"
        ],
        "Singleton": [
          "Overview",
          "Singleton Allocator",
          "Singleton Decorator",
          "Singleton Metaclass",
          "Monostate",
          "Singleton Testability",
          "Singleton Coding Exercise",
          "Summary"
        ],
        "Adapter": [
          "Overview",
          "Adapter (no caching)",
          "Adapter (with caching)",
          "Adapter Coding Exercise",
          "Summary"
        ],
        "Bridge": [
          "Overview",
          "Bridge",
          "Bridge Coding Exercise",
          "Summary"
        ],
        "Composite": [
          "Overview",
          "Geometric Shapes",
          "Neural Networks",
          "Composite Coding Exercise",
          "Summary"
        ],
        "Decorator": [
          "Overview",
          "Python Functional Decorators",
          "Classic Decorator",
          "Dynamic Decorator",
          "Decorator Coding Exercise",
          "Summary"
        ]
      },
      "requirements": [
        "Good understanding of Python",
        "Familiarity with latest Python language features",
        "Good understanding of object-oriented design principles",
        "A computer with the latest Python release and (hopefully) an IDE"
      ],
      "description": "Course Overview\nThis course provides a comprehensive overview of Design Patterns in Python from a practical perspective. This course in particular covers patterns with the use of:\nThe latest versions of the Python programming language\nUse of modern programming approaches: dependency injection, reactive programming and more\nUse of modern developer tools such as JetBrains PyCharm\nDiscussions of pattern variations and alternative approaches\nThis course provides an overview of all the Gang of Four (GoF) design patterns as outlined in their seminal book, together with modern-day variations, adjustments, discussions of intrinsic use of patterns in the language.\nWhat are Design Patterns?\nDesign Patterns are reusable solutions to common programming problems. They were popularized with the 1994 book Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma, John Vlissides, Ralph Johnson and Richard Helm (who are commonly known as a Gang of Four, hence the GoF acronym).\nThe original book was written using C++ and Smalltalk as examples, but since then, design patterns have been adapted to every programming language imaginable: C#, Java, Python and even programming languages that aren't strictly object-oriented, such as JavaScript.\nThe appeal of design patterns is immortal: we see them in libraries, some of them are intrinsic in programming languages, and you probably use them on a daily basis even if you don't realize they are there.\nWhat Patterns Does This Course Cover?\nThis course covers all the GoF design patterns. In fact, here's the full list of what is covered:\nSOLID Design Principles: Single Responsibility Principle, Open-Closed Principle, Liskov Substitution Principle, Interface Segregation Principle and Dependency Inversion Principle\nCreational Design Patterns: Builder, Factories (Factory Method and Abstract Factory), Prototype and Singleton\nStructrural Design Patterns: Adapter, Bridge, Composite, Decorator, Façade, Flyweight and Proxy\nBehavioral Design Patterns: Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Strategy, Template Method and Visitor\nWho Is the Course For?\nThis course is for Python developers who want to see not just textbook examples of design patterns, but also the different variations and tricks that can be applied to implement design patterns in a modern way. For example, the use of decorators and metaclasses allows us to prepackage certain patterns for easy re-use.\nPresentation Style\nThis course is presented as a (very large) series of live demonstrations being done in JetBrains PyCharm and presented using the Kinetica rendering engine. Kinetica removes the visual clutter of the IDE, making you focus on code, which is rendered perfectly, whether you are watching the course on a big screen or a mobile phone.\nMost demos are single-file, so you can download the file attached to the lesson and run it in PyCharm, IDLE or another IDE of your choice.\nThis course does not use UML class diagrams; all of demos are done via live coding.",
      "target_audience": [
        "Software engineers",
        "Designers",
        "Architects"
      ]
    },
    {
      "title": "Secure Coding in C/C++",
      "url": "https://www.udemy.com/course/secure-coding-in-cpp/",
      "bio": "Master Secure C/C++ Programming: Uncover Flaws, Learn Defensive Programming Techniques & Design Robust, Secure Software",
      "objectives": [
        "Become a proficient C/C++ programmer who prioritizes security",
        "Learn defensive programming techniques",
        "Understand common security flaws in C/C++ programming",
        "Walk through a real-world style attack case, spot red flags in sloppy code, and learn to apply secure, clean C/C++ coding to fix real issues.",
        "Master secure coding practices"
      ],
      "course_content": {
        "Introduction to Secure Programming": [
          "A Turbulent Tale: System Crash at 30,000 Feet",
          "What You Should Know",
          "Join the Official Student Group"
        ],
        "Balancing Freedom and Responsibility": [
          "The Hazards of Manual Memory Management",
          "Pointer Pitfalls",
          "The Double-Edged Sword: Low-Level System Access",
          "Risky Type Conversions",
          "Library Landmines: Dangerous Functions",
          "Tread with Caution: Legacy Code",
          "Recognizing Security Pitfalls"
        ],
        "Common Security Flaws in C and C++ Programming": [
          "Unleashing Chaos with Stack and Heap Overflows",
          "Overstepping Limits: Integer Overflows",
          "Uncontrolled Format Strings: When Small Mistakes Cause Big Problems",
          "The Dangers of Improper Error Handling",
          "When Code Collides: Race Conditions",
          "Spotting Security Flaws in Code"
        ],
        "Principles of Secure C and C++ Programming": [
          "Minimizing Attack Surface Area",
          "Principle of Least Privilege",
          "Fail-safe Defaults",
          "Defense in Depth",
          "Testing Your Knowledge of Secure Coding Principles",
          "One-on-One with the Security Lead"
        ],
        "Secure Memory Management in C and C++": [
          "C Memory Management",
          "C Memory Management Mistakes - Part 1",
          "C Memory Management Mistakes - Part 2",
          "Beyond the Basics: Subtle C Memory Management Errors",
          "C++ Memory Management: new and delete",
          "C++ Memory Management: Initialization and Placement new",
          "C++ Memory Management: Error Handling",
          "Smart Pointers: Safer Memory Management in C++",
          "Spotting the Invisible: Null Pointer Mystery",
          "Taming the Ghost of Freed Memory",
          "Securing Memory Deallocation",
          "Sealing the Memory Leak",
          "The Great Memory Mismatch"
        ],
        "CASE STUDY: The JPEG That Hijacked the Car": [
          "Why this Case Study Matters",
          "Bug in the System",
          "Band Aid",
          "Butterfly Effect",
          "Kill Switch",
          "Fixing the Code",
          "Lessons Learned"
        ],
        "Conclusion": [
          "Where to Go from Here?",
          "Secure Coding in C/C++: Your Quick Reference Guide",
          "Bonus Lecture: Learn More from Karoly + Useful Links"
        ]
      },
      "requirements": [
        "Some familiarity with C/C++ programming is necessary."
      ],
      "description": "Join us in the Secure Coding in C/C++ course and take your programming skills to the next level. Delve into the world of secure coding practices for C and C++ languages. Gain the knowledge and skills to uncover security flaws, defend your code against vulnerabilities, and design robust and secure software applications.\n\n\nThroughout this course, you'll learn essential techniques and best practices for secure programming in C and C++. We'll start by exploring common security vulnerabilities and their potential impact on software systems. You'll understand the importance of secure coding principles and how they form the foundation for building secure applications.\n\n\nWe'll delve into topics such as input validation, secure memory management, proper error handling, and secure file and data handling. You'll discover how to mitigate risks associated with buffer overflows, format string vulnerabilities, and other common coding pitfalls. With hands-on exercises and real-world examples, you'll gain practical experience in identifying and resolving security issues in your code.\n\n\nOur instructor will guide you through each concept, providing clear explanations and practical demonstrations. Using the course Q&A, you'll have the opportunity to engage in discussions with fellow learners, sharing insights and learning from their experiences. Quizzes and coding assignments will help you solidify your understanding and apply secure coding practices in real-world scenarios.\n\n\nBy the end of this course, you'll have a deep understanding of secure programming principles, techniques, and tools specific to C and C++. You'll be equipped with the skills to write secure, reliable, and robust code that can withstand potential attacks and protect sensitive data.\n\n\nJoin us on this journey to becoming a skilled and confident secure C/C++ programmer. Enroll now and take a significant step towards enhancing the security of your software applications.",
      "target_audience": [
        "C/C++ developers who want to write functional, robust and secure code",
        "Programmers who want to master secure C/C++ coding practices",
        "Developers who want to understand the common security flaws that can arise in C and C++ programs",
        "Anyone who wants to explore the most common C and C++ vulnerabilities, and how to prevent them"
      ]
    },
    {
      "title": "Golang for Beginners",
      "url": "https://www.udemy.com/course/golang-for-beginners/",
      "bio": "Learn the Go programming language with Hands-On labs",
      "objectives": [
        "Build programs in Golang",
        "Read and make sense of source codes of Open Source applications written in Golang",
        "Gain hands-on experience using challenging coding exercises on our labs",
        "Understand concepts with animated illustrations in our lectures",
        "Get instant feedback on your programs through our lab exercises"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience needed. You will learn everything you need to know.",
        "No software installation required. Our labs give you everything you need to practice.",
        "A curious mind open to learn new things :)"
      ],
      "description": "It’s important to learn new skills, but it’s even more important to learn the right skills.\n\nWhy Golang? Well, Golang has been the most popular language to learn over the past 3 years, and is easily one of the top trending programming languages of the past decade.\n\nBut the reason why it’s popular is because it’s the true programmer’s language. It was built with the idea to make work a lot easier for programmers all over the world. And it does exactly that.\nGo or Golang is a programming language developed and maintained by Google. It is a free and open-source language. It’s easy to learn, it’s scalable and it has fast execution.\n\nThis course requires zero experience in programming or coding. All it takes is some discipline and following our easy-to-understand curriculum.\n\n\nThis course won’t just throw content at you. We’ve made sure that what you learn will actually stick. After each module, you’ll get access to practice questions to truly understand the concepts we teach you.\n\n\nYou’ll also get access to our hands-on labs. Our labs can be accessed right in your browser without having to set up any lab environment yourself. We validate your work and give you feedback instantly.\n\n\nOur hands-on labs will give you the experience you need to excel in your DevOps career.\n\nIn this course, you will learn:\nData types\nVariables\nArrays\nSlices\nMaps\nOperators\nControl flow\nFunctions\nand other Go concepts.",
      "target_audience": [
        "Beginners in Programming",
        "Beginners in Golang",
        "Anyone who wants to learn the most popular programming language of this decade"
      ]
    },
    {
      "title": "Python PCAP: Pass Certified Associate in Python Programming",
      "url": "https://www.udemy.com/course/python-pcap/",
      "bio": "Take your basic Python to the next level and pass the PCAP exam (Associate level)",
      "objectives": [
        "Take the next step in Python: from beginner to intermediate level",
        "Prepare for PCAP-31-0x exam",
        "Get intermediate Python skills for Software Development, Data Science, Machine Learning etc.",
        "Apply for entry-level Python jobs",
        "Code along with me for real-life programming practice",
        "Create three practical programs"
      ],
      "course_content": {
        "Introduction": [
          "What is the PCAP certificate?",
          "Who is this course for?",
          "What should you already know?",
          "The necessary tools",
          "Getting started with Anaconda",
          "Online tools",
          "Ready?"
        ],
        "Modules and Packages": [
          "Introduction to modules",
          "Importing modules",
          "Math module",
          "Random module",
          "Further comment: random.sample",
          "Platform module",
          "platform.python_version_tuple() vs. platform.version()",
          "Extra: PyPI repository",
          "Using \"random\"",
          "Sample solution: Using \"random\"",
          "Creating your own modules",
          "Running own modules directly and indirectly",
          "Own modules: practical example",
          "Creating own modules",
          "Sample solution: Creating own modules",
          "Module locations: sys.path",
          "Using packages in Python",
          "Quiz: Modules and Packages"
        ],
        "Strings": [
          "Internal string representation",
          "Basic string operations",
          "Searching inside strings",
          "Joining, splitting and sorting strings",
          "Working with strings",
          "Sample solution: Working with strings",
          "Comparing strings",
          "Quiz: Strings",
          "Mini Project: Random password generator"
        ],
        "Object-Oriented Programming (OOP)": [
          "Introduction to OOP",
          "Classes and objects",
          "Encapsulation and abstraction",
          "Instance variables",
          "Class variables",
          "Comparison: instance, class and local variables",
          "Methods",
          "Can you have a default value for the self constructor parameter?",
          "Deck of cards",
          "Sample solution: Deck of cards",
          "Reflection and introspection",
          "Introduction to inheritance",
          "Inheriting properties",
          "Inheriting class variables and methods",
          "Overriding properties and methods",
          "isinstance() an 'is' operator",
          "Multiple inheritance",
          "The __bases__ property",
          "Diamond problem",
          "Quiz: Object-Oriented Programming",
          "Mini Project: Rock-paper-scissors game"
        ],
        "Exceptions": [
          "Important: Exceptions in PCEP and PCAP exams",
          "(PCEP&PCAP) Introduction to exceptions",
          "Can you catch SyntaxErrors?",
          "(PCEP&PCAP) Exception hierarchy",
          "(PCEP&PCAP) Propagating exceptions",
          "(PCEP&PCAP) Assertion exceptions",
          "Try... except with else",
          "The finally keyword",
          "The raise keyword",
          "Exceptions as objects",
          "Creating your own exceptions",
          "Quiz: Exceptions"
        ],
        "Miscellaneous": [
          "List comprehensions",
          "Lambda functions",
          "map() and filter() with lambdas",
          "Closures",
          "Introduction to file handling",
          "Text file reading basics",
          "Text file writing basics",
          "Counting words in files",
          "Sample solution: Counting words in files",
          "Binary file basics",
          "Reading binary files: read() vs readinto()",
          "File handling modes",
          "Predefined streams",
          "Stream errors",
          "Quiz: Miscellaneous",
          "Mini Project: To-do list"
        ],
        "Congratulations!": [
          "Congratulations!"
        ],
        "Mock PCAP exam": [
          "PCAP: Mock Exam"
        ],
        "Extra": [
          "Course Jupyter files",
          "Bonus lecture",
          "LinkedIn: Show your new skills!"
        ]
      },
      "requirements": [
        "Basic Python knowledge (PCEP-level knowledge)",
        "A device with Internet access",
        "Willingness to learn :)"
      ],
      "description": "Welcome! My name's Adrian and I'm a professional Software Developer. If you already know basic Python and want to take another step with your skills, then you've just found an excellent course for that! Along the way, you will also create three practical Python programs!\nAccording to statistics, Python is in the top 3 programming languages all around the world. It is much easier and quicker to learn that most other languages. At the same time, it's extremely popular among software developers, data analysts and other IT professions. All of this makes it an excellent choice for your first programming language.\n\n\nCOURSE OVERVIEW\nIn this course, you'll learn intermediate-level Python 3 and you'll get prepared for the Certified Associate in Python Programming exam (PCAP). You will need basic Python skills (entry-level PCEP exam knowledge) to start this course. I'll show you how to install Python and all the necessary tools. You will code along with me andhave a chance to write three practical programs to practice your skills.\nThere are 5 exam blocks when you sit the PCAP exam. Consequently, this course has 5 main modules, each one focusing on a different exam block. At the end of each module, you'll have a chance to solve an exam quiz to check your skills.\nThis course also comes with a mock PCAP exam at the very end. It will have the same format as your actual exam, with the same passing grade and time limit. It will show you what kinds of questions you can expect.\n\n\nCOURSE ADVANTAGES\n• concise – the short video lectures focus on the most important aspects: there are just a few hours of videos to get you started ASAP\n• based on practice – instead of useless academic theory, you learn the best developing practices drawn from my work experience,\n• reasonably priced – compared to stationary developer bootcamps, the course is much cheaper, so you save not only time but also money,\n• available anywhere, anytime – the online form lets you run the course in the most convenient place (at home, work or in a café) and time (while commuting by metro or relaxing at home after work), so you can adjust it to your agenda,\n• accessible on desktop, mobile and TV – you can display my lectures on the device of your choice, so you don’t have to stick to your PC,\n• certificate of completion – after completing the course, you will receive a printable certificate that will make your resume more attractive.",
      "target_audience": [
        "People who want to pass the PCAP Associate-Level exam",
        "People who passed the PCEP entry-level exam and want to continue studying",
        "Beginners with some basic programming experience",
        "Wanna-be software developers and data analysts",
        "People who need intermediate Python for Machine Learning, Data Science and Artificial Intelligence"
      ]
    },
    {
      "title": "Introduction to Java EE",
      "url": "https://www.udemy.com/course/java-ee-fundamentals/",
      "bio": "Learn the Fundamentals of Java EE and Learn How to Package & Deploy an App",
      "objectives": [
        "Introduce Java EE technologies to Java users",
        "Students will get a good understanding of Java EE",
        "Learn How to Package & Deploy an App",
        "Deployment options",
        "Setting up your deployment"
      ],
      "course_content": {},
      "requirements": [
        "basic understanding of Java"
      ],
      "description": "In this 2 part course we'll go over the fundamentals of Java EE and learn how to package & deploy an app.\nJava Platform, Enterprise Edition (Java EE) is a widely used enterprise computing platform developed under the Java Community Process. The platform provides an API and runtime environment for developing and running enterprise software, including network and web services, and other large-scale, multi-tiered, scalable, reliable, and secure network applications.\nThis course will provide students with an overview of Java EE and will show some details of its programming model. You'll learn about what Java EE is, how it compares to the Java language, should you transition to it, and which type of application would benefit from it.\nIn part two of the course, you'll learn how to package & deploy an app. We'll explain how to package your application correctly and reviews three different options: deployment to a local environment with glassfish, deploying to the cloud with Azure and AWS, and deploying to Docker containers. Learn about the typical uses and benefits of each option, so you can pick the best strategy for your workflow and your end user.",
      "target_audience": [
        "Programmers",
        "Java Developers",
        "anyone looking to understand Java EE"
      ]
    },
    {
      "title": "C# for Beginners - Coding From Scratch",
      "url": "https://www.udemy.com/course/c-and-net-core-for-beginners/",
      "bio": "Everything you need to get going with C# and .NET",
      "objectives": [
        "A good understanding of the most important aspects of the C# language and use it to create programs",
        "The fundamentals of the C# language and .NET Core",
        "The syntax and structure of a C# program",
        "Important keyboard shortcuts in Visual Studio",
        "Work with local variables and fields (class variables)",
        "How to create and call methods, provide arguments, handling return types and tuples",
        "Working with if and switch statements, conditional operators",
        "Working with the for, while, do while and for each loop",
        "Creating and indexing arrays",
        "Use generic collections such as List, Stack, Queue and Dictionary",
        "Work with classes and objects, static members and access modifiers such as private, protected and public",
        "Work with properties (automatic, full, read-only etc)",
        "Read and write text files to disk",
        "Throw, catch and handle exceptions",
        "How to work with reference types and value types",
        "How C# relates to Common Intermediate Language (CIL), JIT compilation and native code",
        "Deploying .NET Core console applications"
      ],
      "course_content": {},
      "requirements": [
        "Visual Studio Community (Free)"
      ],
      "description": "Platform: C# and .NET\n\n\nLearning to Program in C# and .NET\nThis course in C# and .NET doesn't require any prior knowledge in programming as I will guide you through every step you need to become productive using the C# language and the .NET platform. My ambition with this course is to firmly ground all theory in code that you and I write in the editor together. Please don't just watch the content - let's both of us code every line together :)\n\n\nBuilding the Hangman game\nAs we'll pick up new skills along the way, we will keep adding code to our hangman game - an application that we will write from start to finish throughout this course!\n\n\n100% Code Compatibility\nThe code in this course is 100% compatible with the latest version of .NET. Any version of Visual Studio (Community, Professional etc.) will work great, but if you're already comfortable in VS Code or Rider, you can certainly keep using that.\n\n\n100% Money-Back Guarantee\nThis course comes with a 30-day full money-back guarantee. Take the course, go through the lectures, do the exercises, and if you're not happy, ask for a refund within 30 days. All your money back, no questions asked.",
      "target_audience": [
        "People who are new to C# (or new to programming in general)",
        "People who needs to refresh their knowledge of C#",
        "Anyone looking to get into the C# language and .NET Core"
      ]
    },
    {
      "title": "Python 3: Project-based Python, Algorithms, Data Structures",
      "url": "https://www.udemy.com/course/python-programming-algorithms-data-structures/",
      "bio": "Learn programming with Python 3; visualize Algorithms and Data Structures and implement them in projects with Python",
      "objectives": [
        "Learn Python 3 from scratch, in-depth",
        "Understand the fundamentals of programming languages",
        "Learn to visualize Algorithms, Data Structures, Program Execution and Information flow",
        "Learn to use Python to build projects",
        "Algorithms (basic to advanced) - sort, search, insert, delete",
        "Data Structures - elementary to complex",
        "Become proficient in technical interview topics"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Live help, office hours and Python e-book",
          "Course structure and content overview"
        ],
        "Development environment setup": [
          "[IMPORTANT] - Note to beginners, please don't skip this",
          "Section intro and overview",
          "Command line basics cheat sheet",
          "Download and install Python",
          "Setup Atom as text editor (setup used in this course)",
          "Exploring Jupyter Notebooks interface (optional)"
        ],
        "Python in-depth": [
          "Section intro and overview",
          "Command line/Terminal basics",
          "Strings, variables, top down execution flow",
          "Strings basics - I",
          "Let's get started!",
          "(IMPORTANT) A note on quizzes, coding exercises and assessment tests",
          "Strings: concatenation, indexing, slicing, python console",
          "Strings basics - II",
          "String methods, functions and import statements",
          "Strings basics - III",
          "Strings basics exercise",
          "Print formatting and special characters",
          "Print formatting basics",
          "Numbers, math, type casting and input",
          "Math fun",
          "Numbers practice",
          "Assessment test - Python basics: Text, numbers and print formatting",
          "Introduction to branching (if, elif, else) and conditionals",
          "Building if, elif, else blocks incrementally",
          "Branching practice",
          "Lists, dicts, sets and tuples - Intro to compound data types in Python",
          "Compound data types",
          "Lists - an in-depth look 1",
          "Lists 1",
          "Lists practice",
          "Lists - an in-depth look 2",
          "Lists 2",
          "More lists practice",
          "Dictionaries, sets and tuples",
          "Compound data types",
          "Dictionaries practice",
          "Sets and Tuples practice",
          "Iterators, for loops, generators, list comprehension",
          "For loops, generators and list comprehension",
          "Assessment test - Lists, dicts, tuples, sets and iteration",
          "While loops, enumerate, zip",
          "While loops and more generators",
          "Functions - an introductory look",
          "Function basics - 1",
          "Functions - implementation step by step",
          "Functions basics - 2",
          "Functions - execution context, frames, mutable vs. immutable arguments in-depth",
          "Functions",
          "Functions warm-up",
          "(Challenge exercise) Function and logic practice",
          "Assessment test - Functions, data types, iterators",
          "Classes and objects - an introductory look",
          "Classes intro",
          "Building a custom Student class and intro to special methods",
          "Custom object intro",
          "Add some methods to the class",
          "Special methods and what they are",
          "Special methods",
          "Reading from and writing to files",
          "Read/write ops",
          "Add read functionality and utilize special and static methods",
          "Inheritance, subclasses and complete example class",
          "Classes practice",
          "Bonus Python specific content (Optional)",
          "Python specifics - Lambda expressions",
          "Lambda expressions and map function",
          "Lambda expressions coding practice",
          "Generators - under the hood",
          "Build your own generators using yield"
        ],
        "Algorithms - Sort, performance, complexity and big O notation": [
          "Introduction to section 4 and overview of the material covered in it",
          "Bubble sort demonstration and complexity analysis",
          "Bubble sort implementation",
          "Selection sort demonstration and complexity analysis",
          "Selection sort implementation",
          "Complexity quiz",
          "Insertion sort demonstration and assignment handoff",
          "Insertion sort programmatic execution step by step",
          "Performance measures - deep dive with a programmatic view",
          "Performance measure - calculation",
          "O(nlog(n)) performance and algorithm prerequisites",
          "Analyze log(n), visualize the math behind it and how it relates to algorithms",
          "Merge sort visualization and complexity analysis",
          "Implement merge function - part 1",
          "Implement merge function - part 2",
          "Implement merge function - part 3",
          "A look at the recursive divide function",
          "In-depth look at execution context of recursive divide function",
          "Recursion mini-project 1 - Countdown timer",
          "Recursion mini-project 2 - Factorial",
          "Recursion mini-project 3 - Fibonacci series",
          "Complete merge sort algorithm and analyze updated execution context",
          "Algorithm complexity quiz",
          "Quicksort demo",
          "Quicksort implementation",
          "Section final project objective and motivation",
          "Project specs and runtime execution intro",
          "Project phase 1: Build random int list generator",
          "Project phase 2: Get input from user for size and range",
          "Project phase 3: Add functions, calculate and analyze runtime",
          "Project phase 4: Extract redundancies, create function and cleanup code",
          "Project phase 5: Add multiple run functionality and perform additional testing"
        ],
        "Algorithms - Search and abstract data structures": [
          "Introduction to section 5",
          "Intro to search - Linear, Bisection/Binary search",
          "Search",
          "Bisection/Binary search - Iterative implementation",
          "Bisection search - recursive implementation",
          "Project handoff: Bringing it together",
          "Project conclusion walkthrough",
          "Hashmaps and O(1) search complexity",
          "Operation complexity",
          "Hash project 1: Define and set up class blueprint with __init__ and __str__",
          "Hash project 2: Set up insert and hashing functionality for data structure",
          "Hash project 3: Add update functionality",
          "Hash project 4: Build search method",
          "Project: Use hash structure in a practical exercise - Quote finder",
          "Project: Complete quote finder using hash table",
          "Intro to linear data structures - Linked Lists",
          "Linked list",
          "Build a custom linked list",
          "Recursively reverse a linked list",
          "Visualize Stacks and Queues, and their operations",
          "Stacks and Queues",
          "Introduction to Trees and Binary Search Trees",
          "Trees",
          "In-order traversal of a Binary Search Tree",
          "Traversal order",
          "Build a Binary Search Tree from scratch - Insert",
          "BST from scratch - In-order traversal",
          "Traversal implementation",
          "BST from scratch - Search",
          "BST from scratch - Delete demo",
          "BST - Deleting leaf nodes",
          "BST - Deleting nodes with 1 child node",
          "BST - Deleting nodes with 2 children",
          "Binary Search Trees",
          "Project: Job Scheduler using Binary Search Trees - Introduction",
          "Project: Job Scheduler execution flow",
          "Project: Job Scheduler implementation tips and notes",
          "Thank you for taking the course and next steps"
        ]
      },
      "requirements": [
        "Access to a computer (Mac, Windows, Linux) with internet connection"
      ],
      "description": "Join the most comprehensive and beginner friendly course on learning to code with Python - one of the top programming languages in the world - and using it to build Algorithms and Data Structures with Projects utilizing them from scratch.\nYou will get:\n1) 14+ hours of animation heavy instructional video\n2) 14 coding exercises using Udemy's internal python coding environment\n3) Quizzes to test your understanding at every step\n4) 80+ Python scripts with practice exercises and lecture notes\n5) Live help channel and designated office hours with the instructor\n6) Multiple assessment tests to test your progress\n7) A free Python e-book\nand much, much more!\nThis course is truly one of a kind and focused solely on your learning.\nCheck out some of the amazing reviews it's receiving:\nFrom Ryan - \"I've only had it for one day and it's been absolutely incredible. Wonderful instructor that does a terrific job of explaining complex topics. I'm not even a quarter of the way in and I already feel that I've gotten exponentially more than what I paid.\"\nFrom Jason - \"Great course, the instructor is clearly well-versed with Python programming and gives very clear instruction. I particularly found the algorithms and data structures section to be valuable. Strongly recommend this course, the best Python programming course I've taken by a significant margin.\"\nFrom Rob - \"As a software engineer that needs to get up to speed on some Python for a data-science project, this was perfect. It's in-depth where it needs to be, clear, and very well put together.\"\nI will walk you step-by-step through the fascinating world of Python programming using visualizations of programs as they execute, algorithms as they run and data structures as they are constructed. Nothing is left to the imagination, we'll see it all and then build it all.\nSince it caters to a broad spectrum of students, the course is split in two parts, part 1 focusing on the Python programming language and part 2 focusing on Algorithms, Data Structures, Performance Analysis and larger scale projects. Details below:\nPart 1: Python and programming fundamentals\nText - Strings\nNumbers - Ints and Floats\nExecution flow control - Branching with if/elif/else\nCompound data types - Lists, Dictionaries, Tuples, Sets\nIterables and Iteration with generators, for and while loops and more!\nFunctions, execution context and frames, building custom functions\nList comprehension\nLambda expressions\nGenerators and creating your own generators with yield\nObjects and building classes, methods, special methods\nReading from and writing to files using context managers\nProjects\nVisualization with each topic and more!\nPart 2: Algorithms, Data Structures and Performance Analysis\nSorting algorithms (basic) - Bubble sort, Selection sort, Insertion sort\nSorting algorithms (advanced) - Merge sort, Quick sort\nBig O notation, complexity analysis, divide and conquer, math visualizations\nRecursion in-depth with examples\nSearching algorithms - Bisection search, hashing\nData Structures with Linked lists, Stacks, Queues, Trees, Binary Search Trees\nOperations with Data structures - insert, search, update, delete\nMultiple projects with increasing level of complexity that tie the concepts together\nVisualizations of every algorithm, data structure and operations and more!\nSo whether you are interested in learning the top programming language in the world in-depth\nOR interested in learning the fundamental Algorithms, Data Structures and performance analysis that make up the core foundational skillset of every accomplished programmer/designer or software architect\nOR you are looking to ace your next technical interview\nOR all 3 above - This is the course for you!\nAnd on top of that, it comes with a 30 day money back guarantee. If you are not satisfied in any way, you will not only get your money back but you also get to keep the free e-book and tons of downloadable practice exercises and code just for trying it out!\nSo what are you waiting for? Learn to code with Python while building projects and implementing algorithms and data structures, and gain a core competency in Computer Science that will advance your career and increase your knowledge in the most effective way!",
      "target_audience": [
        "Beginners who have never programmed before",
        "Programmers switching to Python",
        "Job interview candidates looking to understand the subject matter behind technical interview questions",
        "Intermediate and advanced programmers looking to understand algorithms and data structures",
        "Anyone looking to understand the foundations of computer science",
        "Anyone looking to learn how to visualize programs and information flow"
      ]
    },
    {
      "title": "Modern Gradle Fundamentals",
      "url": "https://www.udemy.com/course/modern-gradle-fundamentals/",
      "bio": "Learn how to efficiently structure and build software projects with Gradle 7 or 8",
      "objectives": [
        "The fundamental Gradle concepts",
        "How to structure Gradle projects - efficiently to work with and maintainable",
        "Understanding the Gradle DSL (Kotlin and Groovy variant)",
        "Gradle build configuration: Settings File, Build Files and Convention Plugins",
        "Gradle build execution: Tasks, Task Inputs/Outputs, Task Dependencies",
        "Dependency management: Scopes/Configurations, Repositories, Versioning",
        "Configuring Testing with Gradle",
        "Using Java to configure Gradle"
      ],
      "course_content": {
        "Project Structure": [
          "Introduction",
          "Gradle Configuration Language - Gradle's DSL",
          "Define a Project Structure - Settings File and Gradle Wrapper",
          "Give Meaning to Components/Subprojects - Build Files",
          "Centralise Build Configuration - Convention Plugins",
          "Compose an Application - add Dependencies",
          "Run the Build - with Incremental Building and Caching"
        ],
        "Configure and Register Tasks": [
          "Configure Tasks added by Plugins",
          "Register new Tasks using existing Task Implementations",
          "Implement your own Build Logic in a Task",
          "Make your Project accessible through Lifecycle Tasks"
        ],
        "Dependency Management": [
          "Dependency Scopes (aka Configurations)",
          "Central Place for Dependency Versions - Platform Project (Option 1)",
          "Central Place for Dependency Versions - Dependency Version Catalog (Option 2)",
          "Conflicts and Component Metadata Rules"
        ],
        "Testing": [
          "Source Sets",
          "Configure Testing"
        ],
        "Using Groovy or Java for Build Configuration (instead of Kotlin)": [
          "The Groovy DSL",
          "Write Convention Plugins in Java"
        ],
        "Summary": [
          "Summary"
        ]
      },
      "requirements": [
        "You should be familiar with IntelliJ IDEA and the programming languages (e.g. Java) for which you want to setup a project with Gradle. You do not need any prior knowledge about Gradle itself."
      ],
      "description": "Gradle is one of the most advanced build tools for Java and other JVM languages like Kotlin, Groovy and Scala.\nIn this course you learn how to structure your software project with Gradle to get the most out of it.\nThis course is hands-on. Together, we build up a project from scratch, learning Gradle features one-by-one. While we do this on the example of a Java project, the gained knowledge can be transferred to any kind of software project built with Gradle.\nWhatever automation task you would like to tackle: This course is for you to unlock the full power of Gradle.\nNo prior Gradle knowledge is required and you learn the latest best practices of Gradle 7 and beyond.\nThe video instructions are packed with information. To follow along, you will likely pause the videos regularly to explore the example and make sure it works for you. You should plan in ~3 times the duration of a video to work through the corresponding lecture.\nTopics Overview\nGradle Configuration Language (Gradle's DSL)\nDefine a Project Structure - Settings File and Gradle Wrapper\nGive Meaning to Components/Subprojects - Build Files\nCentralise Build Configuration - Convention Plugins\nCompose an Application - add Dependencies\nRun the Build - with Incremental Building and Caching\nConfigure Tasks added by Plugins\nRegister new Tasks using existing Task Implementations\nImplement your own Build Logic in a Task\nMake your Project accessible through Lifecycle Tasks\nDependency Scopes (aka Configurations)\nCentral Places for Dependency Versions - Platform Projects / Dependency Version Catalogs\nConflicts and Component Metadata Rules\nSource Sets\nConfiguring Testing\nKotlin vs Groovy DSL\nWriting Build Configuration in Java",
      "target_audience": [
        "Java Developers",
        "Android Developers",
        "Kotlin Developers",
        "Scala Developers",
        "Groovy Developers"
      ]
    },
    {
      "title": "Write Asynchronous C# Code With Tasks and PLINQ",
      "url": "https://www.udemy.com/course/write-asynchronous-csharp-code-with-task-parallel-library-and-plinq/",
      "bio": "A comprehensive course teaching you how to write asynchronous C# code with the Task Parallel Library and PLINQ.",
      "objectives": [
        "Learn how to write robust asynchronous C# code",
        "Master the fundamentals of multi-threaded code",
        "Learn how to use Threads",
        "Learn how to use the Task class",
        "Use a Task network to implement MapReduce",
        "Parallelise any LINQ query with PLINQ",
        "Learn the difference between Tasks and PLINQ",
        "How to create Task continuations",
        "... and much more!"
      ],
      "course_content": {
        "Introduction": [
          "About This Course",
          "Meet Your Instructor",
          "Introducing the Task Parallel Library And PLINQ",
          "Windows, OS/X Or Linux?",
          "Background Info - About Me"
        ],
        "Multi-Threaded Code Fundamentals": [
          "Section Introduction",
          "How To Start A Thread",
          "Race Conditions",
          "Resolve Race Conditions With Thread Locking",
          "The Lock Statement",
          "Thread Synchronisation With AutoResetEvents",
          "Section Recap",
          "Multi-Threaded Code Fundamentals"
        ],
        "Working With Tasks": [
          "Section Introduction",
          "How To Start A Task",
          "Working With Tasks",
          "Initialising And Cancelling Tasks",
          "Parent And Child Tasks",
          "Task Continuations",
          "When Should You Use Tasks?",
          "Convert a sentence to pig latin",
          "Section Recap",
          "Working With Tasks"
        ],
        "Using Parallel LINQ": [
          "Section Intro",
          "When Should You Use PLINQ?",
          "Word Reversal With PLINQ",
          "PLINQ And Item Ordering",
          "Limitations Of PLINQ",
          "Section Recap",
          "Using Parallel LINQ"
        ],
        "Final Words": [
          "Course Recap",
          "Bonus Offer"
        ]
      },
      "requirements": [
        "You need a Windows, Mac or Linux laptop with Microsoft Visual Studio, Xamarin Studio or Monodevelop",
        "You should be a beginner, intermediate, or advanced C# developer",
        "That's it!"
      ],
      "description": "Today we have beautiful libraries for writing multi-threaded C#, and there is simply no excuse for writing bad asynchronous code. In this course I will teach you how to write rock-solid code using Tasks and Parallel LINQ that works perfectly on your first try.\nI wrote a multi-threaded conversion utility a year ago that successfully migrated 100,000 documents from SharePoint 2010 to SharePoint 2013. The program worked flawlessly the first time because I used PLINQ.\nSound good?\nWriting multi-threaded code by hand is hard. I’ll prove it to you by showing you some code that exchanges data between two threads. You will be surprised how difficult it is to do this reliably.\nBut then I’ll show you how trivially easy it is to write asynchronous C# code using the Task Parallel Library and Parallel LINQ. These amazing frameworks allow anyone to write robust multi-threaded code that can take a beating.\nBy the end of the course you will be fluent in both the Tasks Parallel Library and Parallel LINQ.\nWhy should you take this course?\nYou should take this course if you are a beginner or intermediate C# developer and want to take your skills to the next level. Working with Tasks and Parallel LINQ might sound complicated, but all of my lectures are very easy to follow, and I explain all topics with clear code and many instructive diagrams. You'll have no trouble following along.\nOr maybe you're working on a critical asynchronous section of C# code in a lage project, and need to make sure your code scales reliably over multiple CPU cores? The tips and tricks in this course will help you immensely.\nOr maybe you're preparing for a C# related job interview? This course will give you an excellent foundation to answer any asynchronous programming questions they might throw at you.",
      "target_audience": [
        "Beginner, intermediate, and advanced C# programmers who want to learn about the Task Parallel Library and Parallel LINQ",
        "Developers who are about to take a job interview and need to prepare for asynchronous code questions",
        "Professionals who are writing a section of asynchronous code in a large C# project"
      ]
    },
    {
      "title": "Learn Selenium with Python, PyTest & Frameworks",
      "url": "https://www.udemy.com/course/learn-selenium-with-python-d/",
      "bio": "Selenium WebDriver using Python & PyTest framework",
      "objectives": [
        "You will learn how to write test scripts using Selenium WebDriver.",
        "You will know how to identify identify various web elements using Locators",
        "You will know how to design frameworks from scratch.",
        "You will able to work on Real time projects after you completed this course."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Python Programming": [
          "Python Programming Basics(Part-1)",
          "Python Programming - Operators, Control Statements",
          "Python Programming - Loops, Numbers, Strings",
          "Python Programming - Collections - List, Tuple",
          "Python Programming - Collections - Dictionary & Set",
          "Python Programming - Functions, Local & Global Variables"
        ],
        "Python Object Oriented Programming Concepts": [
          "Class, Object , Methods & Constructors",
          "Inheritance & Polymorphism",
          "Modules & Packages",
          "Exception Handling & Working with Files"
        ],
        "Selenium WebDriver": [
          "Introduction & Setup WebDriver in PyChamp",
          "Locators- Part1",
          "Locators-Part2 (XPath)",
          "Locators-Part3 (XPath Axis)",
          "WebDriver Commands",
          "Waits",
          "Working with WebElements",
          "Working with Alerts, Frames & Browser Windows",
          "Handling Notification Popups & WebTables",
          "Handling Date Pickers",
          "Handling Mouse Actions",
          "Keyboard Actions, File Upload & Download",
          "Boostrap DropDowns, Screenshots, Cookies, Headless testing",
          "Data Driven Testing - Excel",
          "Data Driven Testing - Database"
        ],
        "PyTest Framework": [
          "PyTest framework(Part 1)",
          "PyTest framework(Part 2)",
          "PyTest framework (Part 3)",
          "Page Object Model"
        ],
        "Hybrid Automation Framework Step by Step Development -eCommerce Project": [
          "Framework Part 1",
          "Framework Part 2",
          "Framework Part 3",
          "Framework Part 4",
          "Framework Part 5",
          "Framework Part 6"
        ]
      },
      "requirements": [
        "Software Testing Concepts",
        "No prior knowledge of Python, everything will be covered in this course"
      ],
      "description": "Selenium, an open-source automation testing tool, empowers testers to interact with web-based applications seamlessly. Compatible with browsers like Firefox, Chrome, Edge, Opera, and Safari, Selenium extends its support across Windows, Linux, and Macintosh platforms. This comprehensive Selenium course is designed to take participants from fundamental Selenium concepts to an expert level, providing a thorough exploration of web page interaction using Selenium. Practical examples from live websites will illustrate each topic, focusing on best practices with Selenium WebDriver and PyTest. This course is an inclusive guide covering everything from the basics to advanced topics.\nCourse Topics:\nModule 1: Automation & Selenium Overview\nUnderstanding Software Testing and its types\nChallenges in Manual testing and how Automation overcomes them\nFunctionality and components of Automation tools\nThe role of Programming in Automation\nOverview, components, and advantages/disadvantages of Selenium WebDriver\nModule 2: Python Essentials for Selenium\nIntroduction to Python and its installation\nPython basics: variables, data types, control statements\nPython OOPs concepts, modules, and exception handling\nWorking with text files and databases\nModule 3: Selenium WebDriver\nIntroduction to WebDriver and its architecture\nEnvironment setup and configuration\nCreating and executing automated test cases on multiple browsers\nLocators, commands, waits, browser and element commands\nHandling various web elements, alerts, iframes, and browser windows\nAdvanced topics like handling date picker, web tables, mouse and keyboard actions, file uploads and downloads, screenshots, cookies, headless browser testing, and data-driven testing using MS-Excel\nModule 4: PyTest\nIntroduction and installation of PyTest\nNaming conventions, test cases, and fixtures\nRunning tests in various ways, skipping tests, grouping tests\nParallel testing, parameterization, command line arguments\nHTML report generation\nModule 5: Logs & Page Object Model\nGenerating logs\nPage Object Model pattern and Page Factory\nModule 6: Hybrid Framework with POM – Live Project\nUnderstanding Automation Frameworks and their types\nDesigning a Hybrid Driven Framework step by step\nProject implementation with page objects, utilities, configuration files, automation, data-driven, and database test cases\nPyTest HTML reports, logs, email notifications\nExecution through command line and bat files\nModule 7: CI – Continuous Integration (Git, Github & Jenkins)\nIntroduction to Continuous Integration\nWorkflow of Git & Github, Git commands\nOverview of Jenkins and Maven integration\nRunning Selenium test scripts through Jenkins",
      "target_audience": [
        "Manual Testers, Those who wanted to shift career to automation."
      ]
    },
    {
      "title": "Python for Absolute Beginners | Python Beginner to Pro",
      "url": "https://www.udemy.com/course/the-complete-python-programmer-bootcamp/",
      "bio": "Beginner friendly Python! Become a fluent Python programmer Learn the Python basics then build inspiring Python projects",
      "objectives": [
        "Go from Python beginner to Python proficiency. You will become a confident Python programmer with a good knowledge of the foundations and their applications",
        "This is a hands on course with numerous coding examples and challenges at the end of each section. This is very important as you learn Python best by doing it",
        "Acquire the pre-requisite Python skills to work with Python in fields such as Data Science, Machine Learning, Artificial Intelligence and Web Development",
        "Install Python and write your first program",
        "How to use basic Python structures: strings, lists, and dictionaries",
        "How to use a Jupyter Notebook and how to work with .py files",
        "Create and use functions and Lambdas",
        "Understand what classes are and how they relate to objects",
        "Learn to think computationally",
        "Handle Exceptions",
        "Interesting and useful modules e.g. the datetime and Collections module",
        "Use of Git and Github: essential skills for all professional programmers",
        "Work with virtual environments in Python. An essential skill which is often missed from other courses.",
        "Introduction to the essential data science libraries of matplotlib and Pandas",
        "You will work on a big capstone project related to computer vision where you'll build your own image recognition system",
        "All the concepts are broken down into simple steps"
      ],
      "course_content": {
        "Welcome! Course introduction": [
          "What's inside the course?",
          "Why code? Why Python?",
          "The best way to take the course",
          "Download all resources",
          "Some good news"
        ],
        "Setting up the environment": [
          "Installing Anaconda and introducing Spyder",
          "Introducing Spyder"
        ],
        "Python basics + Hands-on coding": [
          "PRINT function",
          "Your help needed"
        ],
        "Variables and strings - Exercises": [
          "The solution",
          "Variables",
          "Strings",
          "Let's write a program",
          "Question 1",
          "Question 2",
          "Question 3",
          "Question 4",
          "Question 5"
        ],
        "Conditionals": [
          "Intro to conditionals",
          "Logical operators",
          "Not TRUE is FALSE",
          "IF statement",
          "More on strings",
          "More strings!",
          "Practical challenge"
        ],
        "For loops": [
          "Intro to For loops",
          "Loops and lists",
          "A little more on variables",
          "Lists",
          "The power of lists and loops and working together",
          "Some list methods",
          "While loops",
          "Modulus",
          "Practical challenge"
        ],
        "Dictionaries": [
          "Modules",
          "Dictionaries",
          "Zip function",
          "More string methods",
          "Tuples",
          "More than 1 dimension",
          "Import counters (1/2)",
          "Import counters (2/2)"
        ],
        "Files and functions": [
          "Files and functions",
          "Appending to a file",
          "Functions",
          "Fibonacci in a function",
          "Recursion",
          "More on functions",
          "Practical challenge"
        ],
        "Classes": [
          "Objects",
          "Class",
          "__Init__",
          "Class variables",
          "Methods",
          "Inheritance",
          "Practical exercise 1",
          "Practical exercise 2"
        ],
        "General tips": [
          "General tips"
        ]
      },
      "requirements": [
        "The course is suitable for all students. We will start from the very basics.",
        "We will show students how to install the Anaconda package for free.",
        "All you need is a computer, Anaconda will run on Windows, macOS or Linux"
      ],
      "description": "Python for Absolute Beginners 2024\nThis Python course is different. It will not only teach you Python, it will give you a problem solving super-power using Python code! And that will make all the difference, especially if you are pursuing a career in data science, AI, web development, big data, web testing, or programming for smart devices in Python.\nHave you always wanted to learn one of the world’s most popular programming languages? If so, this is the perfect course for you. It will teach you how to program in Python and help to prepare you for coding challenges frequently posed during job interviews.\nIn this comprehensive course, we will cover several key topics:\n⁃ Why program? Why study Python?\n⁃ How to install Python\n⁃ Hands-on programming with strings\n⁃ Print function\n⁃ Variables\n⁃ Conditionals\n⁃ Loops\n⁃ Data structures\n⁃ Modules\n⁃ Files\n⁃ OOP and Classes and Objects\n⁃ Time complexity\n⁃ Big O\n⁃ Stacks\n⁃ Debugging\n\n\nThere are many exercises and projects throughout the course, some of our favourites are:\n⁃ The Sierpinski Triangle\n⁃ The Towers of Hanoi\n⁃ And the Computer Vision capstone project\nYou'll also learn how to use python to validate credit card numbers, you'll be introduced to the data visualization and plotting package matplotlib, there's a short introduction to Pandas and you'll gain a thorough understanding of how to work with Jupyter notebooks.\nIn addition there is a section on Git and Github and you will learn how to work with virtual environments in python.\nThe author of this course, Giles McMullen-Klein, is one of the best-known Python and data science vloggers on YouTube where more than 500,000 subscribers follow his videos.\nThere are several reasons why this course is different and why Giles could be the perfect Python teacher for you:\n· Engaging, informative and fun! Giles’ lectures are entertaining and will inspire you to learn Python\n· Motivating ,enthusiastic and effective – Giles’ passion for coding in Python and teaching the language is infectious\n· Develop a thorough understanding of Python\n· Carefully crafted lectures and superb quality of production (Full HD videos) + animations and callouts\n· Practice, practice, practice – the course contains dozens of exercises to help you master the Python programming concepts covered in the lessons\n365 Careers’ team is very excited about this project. The creation of a Python course has been an ambition of ours for quite some time. but as we were not prepared to make any compromises on the quality of the course content, we needed to choose the right partner. Luckily, Giles was as excited about working with us as we were with him and together, after much hard, work we have created what we believe to be a first-class learning experience. We are confident that programming novices will benefit from Giles’ authenticity combined with our visual approach to teaching which includes our much-loved graphics and animations.\nTo date, employees from 80 of the Fortune 100 companies have taken our courses. 3,000,000 students have given us an average rating of 4.5 stars. And we are confident that this is the perfect course for you if you want to become a Python programmer.\nSounds great, doesn’t it? Are you ready for a life-changing adventure? If you are serious about learning Python, this is the only bootcamp you will need.\nThe course comes with a 30-day money-back guarantee. If you decide it wasn’t for you, you will be refunded in full (+keep all the downloaded resources free of charge)!\nNo risk for you, so go ahead, click the “Buy now” button and start your Python programmer journey today!",
      "target_audience": [
        "Anyone who wants to learn Python, this course is suitable for beginners with no programming experience",
        "Programmers in other languages who want to learn Python 3",
        "Python programmers who want to learn coding best practice",
        "Anyone who is interested in the fastest-growing and most popular programming language in 2021",
        "People interested in a data science, web development, big data, web testing, or an AI Python programming career",
        "Python beginners"
      ]
    },
    {
      "title": "Complete Python Programming Masterclass Beginner to Advanced",
      "url": "https://www.udemy.com/course/complete-python-programming-masterclass-beginner-to-advanced/",
      "bio": "Learn to Program like a Pro with Python. Start with Python Programming Basics and progress to a Python Professional.",
      "objectives": [
        "Learn Proper Python Syntax",
        "Learn Basics of Programming with Python (Variables, Operators, Logic...)",
        "Develop Python Modules to Create Re-Usable Code",
        "Work with Python Loops to Repeat Blocks of Code",
        "Learn Object Oriented Python Programming Concepts"
      ],
      "course_content": {
        "Course Introduction": [
          "Welcome",
          "Course Overview"
        ],
        "Getting Setup with Python": [
          "Download Python",
          "Installing Python",
          "Confirm Python Installation",
          "Running Python Code with Command Line",
          "Python .py Files",
          "Python -- Getting Setup Quiz"
        ],
        "Variables and Types": [
          "Python Variables",
          "More Python Variables",
          "Python Numbers",
          "Python Strings",
          "String Methods",
          "string Methods Reference",
          "Python Casting Data Types",
          "Python Variables and Types Quiz"
        ],
        "Python Operators": [
          "Python Mathematical Operators",
          "Python Assignment Operators",
          "Python Comparison Operators",
          "Python Operators Reference",
          "Python Operators Quiz"
        ],
        "Python Collections": [
          "Python List Data Type",
          "List Constructor",
          "List Append Method",
          "More List Methods",
          "List Methods Reference",
          "Python Tuple Data Type",
          "List Type vs Tuple Type",
          "Python Set Data Type",
          "Set Methods",
          "Python Dictionary Data Type",
          "Python Collections Quiz"
        ],
        "Python Shell and IDLE": [
          "Working with Python Shell",
          "Working with Python Editor IDLE",
          "Python IDLE Shortcut Keys",
          "Python Whitespace",
          "Python Comments",
          "Python Shell and IDLE Quiz"
        ],
        "Python Modules": [
          "Understanding Python Modules",
          "Importing Modules",
          "dir() Python Method",
          "help() Python Method",
          "Module Alias",
          "Python Modules Quiz"
        ],
        "Python Program Flow": [
          "If Condition Python Statements",
          "Elif Keyword",
          "If... Else Conditions",
          "AND Condition in an If Statement",
          "OR Condition in an If Statement",
          "While Loops",
          "break Keyword",
          "continue Keyword",
          "For Loops",
          "Looping through String Values",
          "Range Function in For Loops",
          "For Loop Else Statement",
          "Python Program Flow Quiz"
        ],
        "Project #1 -- Python Magic 8 Ball Game": [
          "Project #1 Preview",
          "Project #1 - Python Magic 8 Ball Instructions",
          "Solution Step #1 -- Setting up the Magic 8 Ball Responses",
          "Solution Step #2 -- Capture User Question Input and Respond",
          "Solution Step #3 -- Exit the App"
        ],
        "Working with Files": [
          "Opening Text Files with Python",
          "Reading Text Files with Python",
          "Using a Loop to Read all Content in a Text File",
          "Writing to a Text File with Python",
          "Creating a Text File"
        ]
      },
      "requirements": [
        "Computer with Internet Access",
        "No Prior Programming Experience Necessary"
      ],
      "description": "Python is used in thousands of applications around the world, by some of the most recognizable companies. Python is used for various types of applications, including;\nWeb Development\nScientific Computing\nEducation\nDesktop GUIs\nSoftware Development\nBusiness Applications\nNeedless to say, Python is one of most sought after programming skills on the market.\nWHAT YOU'LL LEARN IN THIS PYTHON COURSE\nThis Python course starts with the basics and by the end you'll be mastering advance level Python concepts. Some of the topics include;\nPython Programming Fundamentals\nPython Syntax (How to write Python Code)\nUse the Command Prompt to Write Python\nUnderstanding Whitespace in Python Code\nPython Variables\nPython Data Types\nPython Operators\nExecute Python Code in the Python Shell and Write Re-Useable Code in the Python IDLE\nPython Logical Statements (If...Else)\nPython Loops (While, For Loops)\nPython Intermediate/Advanced Topics\nPython Lists, Dictionaries, Tuples and Sets (Collection Objects)\nGather Input from Users\nPython Functions\nPython Modules\nPython Classes (Object Oriented Programming)\nCreate Custom Python Classes\nHandling Files with Python\nError Handling\nThroughout the course you will find quizzes to gauge your understanding of the material and build your confidence. The video lectures will walk you step by step through mastering key Python concepts, while each section will build upon the knowledge you gain from the previous section. Additional resources, including PDFs, completed Python files and web resources will provide you will additional information. All course material, including the video lectures are available for download so you can learn offline.\nAfter you've mastered key Python programming concepts, you'll find projects to challenge your understanding. Each project will give you an opportunity to put what you've learned to practice by creating games and interacting with business data using Python.\nCreate a Magic 8 Ball Game\nRead and Write .CSV files\nAs you go through the course, participate in the QA section to ask questions, share what you've learned and interact with your instructor and other students. With Udemy's 30 Day Money Back Guarantee, you'll find comfort in learning how to program using Python. And, at the end of the course, you'll receive a Certificate of Completion that you can print and proudly share with friends, co-workers and the world.\nSo, don't lose another moment, Enroll Now and begin learning how to program with Python.",
      "target_audience": [
        "Beginner Python Programmers",
        "Programmers New to Python Looking to Learn Python Syntax"
      ]
    },
    {
      "title": "Java Programming: Step by Step from A to Z",
      "url": "https://www.udemy.com/course/java-programming-step-by-step-from-a-to-z/",
      "bio": "Everything you need to know about Java programming to make you first steps as a software engineer",
      "objectives": [
        "Java programming fundamentals"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "More About Operators": [
          "More about operators",
          "Logical operators",
          "Ternary operators",
          "Type comparison operator"
        ],
        "WrapperClasses, Autoboxing & Unboxing": [
          "Wrapper classes",
          "Autoboxing and unboxing",
          "Wrapper classes main methods",
          "Number and boolean wrapper classes and methods",
          "Character wrapper classes and methods"
        ],
        "Memory Management": [
          "Garbage collection overview",
          "Garbage collection - finalize ()",
          "Stack memory and heap memory",
          "Heap memory example"
        ],
        "Overloading & Overriding": [
          "More about constructors - overloading",
          "Constructor overloading",
          "Method overloading",
          "Overloading vs. overriding in Java"
        ],
        "Everything about Strings": [
          "More about Strings (String Pool)",
          "String comparison",
          "String intern() method",
          "String methods",
          "More about Strings (immutability)",
          "StringBuilder and StringBuffer",
          "StringBuilder examples"
        ],
        "Enums, Dates & Time": [
          "Enums overview",
          "Enums example",
          "Dates and time overview",
          "Dates and time - classic way",
          "Dates and time - new way"
        ],
        "Conditional Statements & Loops": [
          "More about \"if\" statements (nested if)",
          "Nested if example",
          "More about for loops (nested loops)",
          "Nested loops example"
        ],
        "Arrays, Varargs & ArrayList": [
          "More about arrays",
          "Array methods",
          "Passing / returning arrays - anonymous arrays",
          "Multidimensional arrays overview",
          "Multidimensional arrays example",
          "Varargs overview",
          "Varargs example",
          "ArrayLists overview",
          "ArrayLists methods"
        ],
        "Generics & Collections Framework": [
          "Generics overview",
          "Generic methods",
          "Generic classes",
          "Wildcards overview",
          "Generic upper bounded wildcards",
          "Generic lower bounded wildcards",
          "Generic unbounded wildwards"
        ]
      },
      "requirements": [
        "Internet connection"
      ],
      "description": "This course is about Java programming language. The Java Programming: Step by Step from A to Z course stands on its own but relies on the free beginner course so I strongly recommend that you start with the First Steps in Java FREE course and then continue with this course.\nCurriculum\noperators\nwrapper classes\ngarbage collection\nstack and heap memory\nStrings\nenums\ndate and time\ngenerics theory and examples\ncollections and data structures\nexceptions and errors\nabstraction, encapsulation and polymorphism,\nserialization\nlambda expressions\nJava streams theory and examples as well\nmultithreading theory and examples\ndesign patterns\nWe are going to discuss the theory behind each concept and then we take a look at the concrete implementation in Java as well.\nThanks for joining the course, let's get started!\nWe are going to discuss the theory behind each concept and then we take a look at the concrete implementation in Java as well.\nThanks for joining the course, let's get started!\nWe are going to discuss the theory behind each concept and then we take a look at the concrete implementation in Java as well.\nThanks for joining the course, let's get started!\nYou will get lifetime access to 110+ lectures plus slides and source codes for the lectures!\nThis course comes with a 30 day money back guarantee! If you are not satisfied in any way, you'll get your money back.\nSo what are you waiting for? Learn Java in a way that will advance your career and increase your knowledge, all in a fun and practical way!",
      "target_audience": [
        "Beginner programmers curious about Java programming language"
      ]
    },
    {
      "title": "Build Undetectable Malware Using C Language: Ethical Hacking",
      "url": "https://www.udemy.com/course/build-undetectable-malware-using-c-language-ethical-hacking/",
      "bio": "In This Advance Ethical Hacking Course You Will Learn How To Create Your Own Penetration Testing Tool With C Programming",
      "objectives": [
        "You Will Learn Ethical Hacking Using C language",
        "You Will Learn To Code Your Own Penetration Testing Tools",
        "You Will Learn Socket Programming In C",
        "You Will Learn How To Hack Windows 10 Using Your Own Tool",
        "You Will Learn How The Keylogger In C Works",
        "You Will Learn How To Create Persistance Inside of Our Malware",
        "You Will Learn How To Compile Windows C Programs In Linux",
        "You Will Learn How To Hide An Executable & Make It Look Like Image, PDF or Any Other File Type",
        "You Will Learn How To Bypass Antivirus Programs By Changing Binary Values",
        "You Will Learn How To Embed An Executable Inside Another Executable",
        "You Will Learn How To Create Auto Connect Every 10 Seconds",
        "You WIll Learn How To Create a Backdoor In C Language",
        "You Will Learn Malware Development"
      ],
      "course_content": {
        "Introduction & Welcome To Hacking With C!": [
          "Ethical Hacking Advanced - Learn How To build Undetectable Malware Using C",
          "What Are We Going To Learn In This Course & What You Need To Know!",
          "Our Malware In Action & Hacking Fully Secured And Updated Windows 10 Machine",
          "How To Make An .EXE Transform Into Any Other File Type (.jpg, .pdf, .mp4 ... )"
        ],
        "Hiding Our Program & Defining Connection Points": [
          "Explaining Malware Structure & Including Needed Libraries",
          "Hiding Our Program Console Window",
          "Defining Connection Points To Our Backdoor",
          "Note for next lecture (\"goto instruction\" in C programming)",
          "Attempting Connection Every 10 Seconds With Our Target"
        ],
        "Building Shell Function & Executing Commands": [
          "Creating Our Shell Function",
          "Executing Commands On Target Machine",
          "Server Socket Initiation",
          "Making Server Compatible With Our Backdoor",
          "Testing Our Malware For Command Execution"
        ],
        "Switching Directories Inside Of A Program": [
          "Changing Our Program Directory"
        ],
        "Creating Persistance & Nesting Our Program In Windows Registry": [
          "Taking A Look At Windows Registry",
          "Interacting With Registry In Order To Start Our Program Automaticly"
        ],
        "Adding Keylogger To Our Malware": [
          "Understanding Keylogger Code",
          "Adding Keylogger Function To Our Backdoor"
        ],
        "Hacking Windows 10": [
          "Updating Our Server Code",
          "Hacking Windows 10 Target With Our Program",
          "\"You Have Been Hacked\"",
          "Is It a Browser Or Backdoor ?"
        ]
      },
      "requirements": [
        "Programming Skills Are A Huge Plus - but not required",
        "Previous Basic Ethical Hacking Knowledge Is Needed",
        "Computer With A Minimum Of 4GB Ram/Memory",
        "Optional - Have Kali Linux Installed"
      ],
      "description": "Would you like to learn how to Build Undetectable Malware Using C?\nOr Maybe You Would like to learn more advanced Cyber Security or Ethical Hacking for personal or professional development?\nYou will be able to do all of this as so much more...\nBy enrolling in our  Advanced Course Where We Show You...\nHow To Build Undetectable Malware Using C Language From Scratch\n___________________________________________________________________\n⇉ This course is one of the Largest, Most Comprehensive Advanced Cyber Security & Ethical Hacking Courses on the Internet! (New Updates For 2025!)\n⇉ Join 950,000+ Students Who Have Enrolled in our Udemy Courses!\n⇉ 10,000+ Five Star Reviews Show Students Who Enrolling Are Getting Real Results!\n⇉ You Get Over 75+ Lectures and 3+ hours of HD content!\n⇉ Watch the Promo Video to see how you can Get Started Today!\nDon’t Delay! Click the \"Buy Now\" Button For Instant Life-Time Access!\n___________________________________________________________________\nIn our advanced ethical hacking course our goal is to help you learn how to build your own ethical hacking tools using the C language. We recommend before you enroll in this advanced course that you have previous ethical hacking knowledge and programming training. If you are a beginner and want to learn more advanced ethical hacking techniques, skills, and programming, you can still enroll in this course. That being said, this is still a much more advanced ethical hacking course so please make sure you feel comfortable with some of the material before enrolling. The skills you learn in this course can help translate into the workplace and help you further your career as a cyber security and ethical hacking professional.\nHere are all of the benefits to enrolling in our Advanced Ethical Hacking Course Today!\nYou will learn all of the following skills listed below!\nLearn How Hackers Make Their Hacking Tools!\nLearn How To Perform Socket Programming In C!\nLearn How To Connect Two Machines Over The Internet!\nLearn How To Hide Your Program Inside Of A Registry!\nLearn How To Capture What Target Inputs In Keyboard Using Keylogger Coded In C!\nLearn How To Create Backdoor For Windows 10!\nLearn How To Hide Your Malware Inside Of An Image Or Any Other File Type!\nLearn Basics Of Malware Development\n_________________________________________________________________________\nWith the right mindset, understanding, and application, you will instantly begin learning how to Build Undetectable Malware Using C Language.\nWhen we learn something new we add it to the course - at no additional cost to you! This is a course that will continue to add more and more to every aspect of your life.\n_________________________________________________________________________\nWhat we can't do in this Course..\nWe can't guarantee your success – this course does take work on your part. But it can be done!\nWe are also not responsible for your actions. You are responsible for 100% of the decisions and actions you make while using this course.\n_________________________________________________________________________\nSee you in the course!\nSincerely,\nAleksa & Joe",
      "target_audience": [
        "This course is for Anyone Who Wants To Find Out How Hackers Get Access To Machines And Servers!",
        "This course is for Anyone Who Wants To Learn How To Create Their Own Hacking Tools!",
        "This course is for you if you are Interested In Ethical Hacking & Cyber Security!",
        "This course is for Anyone Interested In Seeing How Malware Works",
        "This course is for Anyone Interested In How Hackers Create Their Tools"
      ]
    },
    {
      "already_crawled_in": "it-and-software/IT Certifications",
      "url": "https://www.udemy.com/course/oracle-java-associate-certification-exam-course-1z0-808/"
    },
    {
      "title": "SQL Programming Basics",
      "url": "https://www.udemy.com/course/sql-intro/",
      "bio": "Learn the Fundamentals of SQL Programming",
      "objectives": [
        "Learn the fundamentals of SQL",
        "Learn how to request data from a server, limit and sort the responses, aggregate data from multiple tables"
      ],
      "course_content": {},
      "requirements": [
        "A PC or Mac"
      ],
      "description": "SQL is a special-purpose programming language designed for managing data in a relational database, and is used by a huge number of apps and organizations.\nIn this course you'll learn the core concepts of the SQL programming language. You'll learn how to use SQL to store, query, and manipulate data.\nLearn how to request data from a server, limit and sort the responses, aggregate data from multiple tables with joins, and edit and delete data.\nWe'll then show you the basics of creating tables and selecting data in various different ways.\nYou'll learn important concepts associated with relational databases. You will run SQL commands to create database tables and define data element types..\nBy the end of this course you should have a good understanding of the SQL programming language.",
      "target_audience": [
        "Anyone interested in learning SQL and Databases"
      ]
    },
    {
      "title": "Modern Java: Mastering Features from Java 8 to Java 21",
      "url": "https://www.udemy.com/course/modern-java-learn-java-8-features-by-coding-it/",
      "bio": "\"Master Java 8 to Java 21: Functional Programming, Records, Sealed Classes, Pattern Matching, and more through hands-on.",
      "objectives": [
        "Learn Java 8, Java ll, Java 17, Java 21 Features by coding it.",
        "Learn Functional programming in Java",
        "Complete understanding of Lambdas, Streams , Optional via code.",
        "Students will be able to implement the new Java 8 concepts in real time",
        "Learn to build complex Streams Pipeline.",
        "Learn the new Date/Time Libraries in Java 8",
        "Learn to use Method Reference , Constructor reference syntax.",
        "Learn and understand Parallel Programming with the Streams.",
        "Student will be able to upgrade their Java knowledge with the new Functional Features.",
        "This course will be continuously updated.",
        "LVTI, TextBlocks, Enhanced Switch, Record Classes",
        "Learn Pattern Matching to write concise and structured code",
        "Use Sealed Class to apply controlled Inheritance",
        "Java Platform Module System(JPMS) and its benefits",
        "All the new features in Modern Java"
      ],
      "course_content": {
        "Getting Started": [
          "Course Introduction",
          "Pre-requisites"
        ],
        "Getting Started Modern Java": [
          "Introduction to Modern Java : Big Picture"
        ],
        "Local Set Up": [
          "Java Installation"
        ],
        "Source Code and Slides for the course": [
          "Source Code",
          "Slides"
        ],
        "Why Java 8 ?": [
          "Why Java 8 is important ?",
          "Imperative vs Declarative Programming - Example 1",
          "Imperative vs Declarative Programming - Example 2"
        ],
        "Introduction to Lambda": [
          "What is Lambda ?",
          "Lab : Implement Runnable using Lambda",
          "Lab : Implement Comparator using Lambda"
        ],
        "Lambdas and Functional Interfaces": [
          "Introduction to Functional Interfaces",
          "Lab : Consumer Functional Interface - Part 1",
          "Lab : Consumer Functional Interface - Part 2",
          "Lab : BiConsumer Functional Interface",
          "Lab : Predicate - Functional Interface - Part 1",
          "Lab : Predicate - Functional Interface - Part 2",
          "Lab : Combining Predicate + Consumer",
          "Lab : BiPredicate",
          "Lab : Function - Function Interface- Part 1",
          "Lab : Function - Function Interface- Part 2",
          "Lab : BiFunction Functional Interface",
          "Lab : UnaryOperaror and BinaryOperator Functional Interface",
          "Lab : Supplier - Functional Interface"
        ],
        "Constructor and Method References": [
          "Method Reference",
          "Lab : Method Reference - Function",
          "Lab : Method Reference - Consumer",
          "Lab : Refactor Lambda Expression to Method Reference",
          "Constructor Reference"
        ],
        "Lambdas and Local variables ( Effectively Final )": [
          "Lab : Local Variables in Lambda Expression",
          "Effectively Final Variables in Lambda and its advantages"
        ],
        "Streams API": [
          "Introduction to Streams",
          "How Stream API works ?",
          "Comparing Streams vs Collections",
          "Lab : How to debug Stream Operations?"
        ]
      },
      "requirements": [
        "Students should have a basic knowledge about Java.",
        "Students should have knowledge about IDE such as Eclipse, Intellij IDEA",
        "At least Java 8 is needed for this course. Any Java version greater than Java 8 works too"
      ],
      "description": "[ Major Update : Complete Course updated on December 2024 ]\nLearn the new Java 8, Java ll, Java 17, Java 21 Features by coding it,This is a pure coding course and you will get a complete understanding of all the Java 8, Java ll, Java 17, Java 21 features by coding it\nWhy Should I take this course ?\nThis course will help the Java developers to build their knowledge on the new Java 8 features\nAll the new features such as Lambdas, Streams , Optionals, Functional Interfaces and Parallel Programming will be explained via code\nThis course will give you the confidence on implementing new Java 8 features in real Java projects\nBy the end of this course you will have a complete understanding of new Java 8 functional features\nCourse Overview :\nSection 1 - Getting Started:\nThis section explains about what will be covered in this course\nSection 2 - Why Java-8 ?:\nThis section covers Why Java 8 is important?\nThis section explains about difference between Imperative Programming and Declarative Programming\nSection 3 - WorkSpace Setup - Mac/Windows:\nThis section covers the installation of Java and IntelliJ in Mac and Windows\nSection 4: Introduction to Lambda\nThis section covers the Why Lambda is needed , Lambdas Syntax and How to implement Lambdas ?\nImplement the Runnable interface using Lambdas\nImplement the Comparator interface using Lambdas\nSection 5: Lambdas and Functional Interfaces\nThis section covers the new Functional Interfaces that got introduced as part of Java 8\nConsumer Functional Interface\nPredicate Functional Interface\nFunction Functional Interface\nSupplier Functional Interface\nSection 6 : Constructor and Method References\nThis section covers the new Method Reference and the Constructor Reference\nHow Method Reference simplifies the code\nHow to use Method reference along with Lambdas\nHow to use Constructor Reference to create new objects\nSection 7 : Lambdas and Local variables ( Effectively Final )\nThis section covers the local variable and how it should used in Lambdas\nDefinition of Effectively Final scope of a variable\nSection 8 : Streams API\nThis section covers the Streams API which is one of the important feature that got introduced as part of Java8\nHow the Stream API Works Internally ?\nHow Collections are different from Streams ?\nHow to debug a Stream ?\nSection 9 : Streams API Operations\nThis section covers different Streams API operations that can be used in Streams to achieve an objective\nStreams Operations such as :\nmap()\nflatMap()\ndistinct()\ncount()\nfilter()\nreducer()\nMap, Filter and Reduce pattern\nmax()\nmin()\nlimit()\nskip()\nallMatch(), anyMatch() and noneMatch()\nfindAny() and findFirst()\nExplanation of Stream operations that are Short Circuit operations\nSection 10 : Streams API - Factory Methods\nThis section covers different Streams API factory method that can be used to create Streams\nSection 11: Numeric Streams\nThis section covers the Introduction to Numeric Streams which can be used to perform some numeric related operations\nSection 12: Terminal Operations Streams\nThis section covers different way to collect the data from the Streams Pipeline\nTerminal Operations such as :\njoining()\ncounting()\nmapping()\nmax(), min()\nsum()\naverage()\ngroupingBy()\npartitioningBy()\nSection 13: Streams API - Parallel Processing\nThis section covers how to perform the Parallel processing using Streams\nHow Parallel Programming makes use of the processors in your machine to perform concurrency operations?\nHow Parallel Programming works internally ?\nHow to check the performance between the sequential and parallel programming ?\nScenarios when not to use parallel programming\nSection 14: Optional\nThis section covers What is Optional and the benefits of Optional\nHow Optional can help you avoid Null Pointer exception\nExploring the different operations that are part of Optional such as :\nempty()\nofNullable()\nof()\norElse()\norElseGet()\norElseThrow()\nisPresent()\nifPresent()\nmap()\nflatMap()\nfilter()\nSection 12: Streams API - Parallel Processing\nThis section covers how to perform the Parallel processing using Streams\nHow Parallel Programming makes use of the processors in your machine to perform concurrency operations?\nHow Parallel Programming works internally ?\nHow to check the performance between the sequential and parallel programming ?\nScenarios when not to use parallel programming\nSection 13: Optional\nThis section covers What is Optional and the benefits of Optional\nHow Optional can help you avoid Null Pointer exception\nExploring the different operations that are part of Optional such as :\nempty()\nofNullable()\nof()\norElse()\norElseGet()\norElseThrow()\nisPresent()\nifPresent()\nmap()\nflatMap()\nfilter()\nSection 14: New Date/Time Libraries\nThis section covers new Date/Time Libraries such as LocalDate, LocalTime, LocalDateTime\nHow to find the difference between the LocalDate, LocalTime and LocalDateTime using Period, Duration\nHow to represent the time in the Machine Readable Format using Instant\nHow to use the TimeZone using the ZonedDateTime\nHow to Format the Date using the DateTimeFormatter\n\n\nSection 15: Local Variable Type Inference (LVTI) using var\nIn this section, we will code and learn about the LVTI feauture to simply local variable declaration using type inference.\nSection 16: Text Blocks\nIn this section, we will code and learn about the TextBlocks which enhances the power of String in Java.\nSection 17: Enhanced Switch\nIn this section, we will code and learn about the new Switch which is an expression.\nSwitch - as an Expression\nMultiline switch expression using \"yield\"\nEnhanced Switch are exhaustive\nSection 18 : Records\nIn this section, we will code and explore the record classes concept in Modern Java.\nRecords Classes\nCustom Constructors and Validations in Record Classes\nObject Equality in Record Clases\nSection 19  : Pattern Matching\nIn this section, we will code and learn about pattern matching.\nIntroduction to Pattern Matching\nRecord Patterns - Pattern Matching on Records\nGuarded Patterns\nSection 20 : ChekoutService Application [ Real Time Usecase]\nIn this section, we will implement a realtime application using all the modern java concepts that we have learned so far.\nSection 21 : Simple Web Server\nIn this section, I will give you a demonstration of jwebserver and how it serves the files and folders as resources.\nSection 22 : New Http Client\nIn this section, we will code and explore the new HTTP Client that has support for HTTP2/Websockets.\nNew HttpClient - GET Request to retrieve movie by ID\nJUnit test for the HTTP Client\nBuild HTTPClient in Asynchronous mode\nBuild HTTP Client - GET Request to Retrieve AllMovies\nSection 23 : Java Platform Module System (JPMS)\nIn this section, we will code and learn about how to build java application using JPMS or modules.\nIntroduction to JPMSBuild a Java app using JPMS\nWorking with Multiple Modules\nWorking with Multiple Modules - Transitively\nUnnamed Modules and Automatic Modules\n\n\nBy the end of this course you will have a complete understanding of all the Java 8, Java ll, Java 17, Java 21  features and implement it in real Java projects",
      "target_audience": [
        "Anyone willing to learn the new Java Features like Lambdas, Streams, Parallel Programming, New Data Time Libraries and etc.,",
        "Java developers who would like to take their knowledge to the next level to write more concise and readable code"
      ]
    },
    {
      "title": "Learn Spring Boot - Rapid Spring Application Development",
      "url": "https://www.udemy.com/course/spring-boot-intro/",
      "bio": "Spring Boot gives you all the power of the Spring Framework without all of the complexity. Start writing apps today!",
      "objectives": [
        "Create Spring MVC Applications",
        "Connect to databases using Spring Data",
        "Secure your applications using Spring Security",
        "Create an executable JAR of your application",
        "Build REST Services in Spring Boot"
      ],
      "course_content": {
        "Introduction": [
          "About Me & About This Course",
          "The Spring Framework",
          "Spring Boot",
          "Source Code for This Course",
          "Introduction Quiz",
          "[Exercise] - Spring Documentation"
        ],
        "Development Environment": [
          "Development Environment Intro",
          "Installing Java on Windows",
          "Install Java on Mac OSX",
          "Install Groovy on Windows",
          "Gradle on Windows",
          "Spring CLI on Windows",
          "SDK Man",
          "Installing IntelliJ on Windows",
          "Installing IntelliJ on Mac OSX"
        ],
        "Hello, Spring Boot!": [
          "Hello, Spring Boot Intro",
          "Hello, World! Creating Your First Spring Boot Application",
          "[Exercise] Create your first Spring Boot Application",
          "Spring Initializer",
          "Build Tools Overview",
          "Maven Build",
          "Gradle Build",
          "Build Tools",
          "Starter POMs",
          "Creating Executable JARs",
          "Spring DevTools & Live Reload",
          "[Exercise] Building Your First Real World Application"
        ],
        "Spring Boot Fundamentals": [
          "Spring Boot Fundamentals Introduction",
          "Spring Beans & Dependency Injection",
          "Spring Beans & Dependency Injection Demo",
          "Spring Beans & Dependency Injection",
          "Application Properties & YAML Configuration",
          "Configuration Properties",
          "Profiles",
          "Auto Configuration",
          "Configuration",
          "Spring Core Fundamentals Exercise"
        ],
        "Developing Web Applications": [
          "Developing Web Applications Intro",
          "Spring MVC Intro",
          "Web Application Demo",
          "Developing Web Applications",
          "Static Content",
          "Bower",
          "Template Engines",
          "Thymeleaf Demo",
          "GSP Demo",
          "Static Content & The View Layer",
          "Internationalization (i18n)",
          "Error Handling",
          "Exception Handling",
          "[Exercise] Creating a web application"
        ],
        "Data Access with Spring Boot": [
          "Data Access Introduction",
          "Creating an Application using H2's in-memory database",
          "Creating Entities & Repositories",
          "H2 In-memory & JPA Quiz",
          "Loading Data",
          "Refactor",
          "Refactor Blog Part 2",
          "Production Database",
          "Spring Data JDBC",
          "NoSQL - MongoDB",
          "[Exercise] Data Access with JPA & h2 Exercise",
          "Spring Data JPA - Creating Queries Part 1",
          "Spring Data JPA - Creating Queries Part 2"
        ],
        "Security": [
          "Security Introduction",
          "Spring Security Intro",
          "Spring Security - Custom Configuration Part 1",
          "Spring Security - Custom Configuration Part 2",
          "Spring Security Basics",
          "Spring Security Custom Login Form",
          "Spring Security & JPA",
          "[Exercise] Securing you application"
        ],
        "Building REST APIs": [
          "REST API Intro",
          "HTTP Request Methods (Verbs)",
          "HTTP Status Codes",
          "Content Negotiation",
          "HTTP Clients",
          "Building A REST API",
          "REST Components",
          "Error Handling",
          "Hypermedia",
          "Hypermedia Demo",
          "REST Template",
          "[Exercise] Building a REST API"
        ],
        "CRUD": [
          "CRUD Starter",
          "Read",
          "Create",
          "Validation",
          "Update",
          "Delete",
          "[Exercise] Building a CRUD Application"
        ],
        "Guides": [
          "Guides Intro",
          "Sending Email",
          "Scheduling Tasks",
          "Spring Boot Resources",
          "Project Lombok"
        ]
      },
      "requirements": [
        "Students should be familiar with the Java programming language",
        "Web Development Experience (HTML / CSS / JavaScript)",
        "A computer that can run Java + IntelliJ or Eclipse",
        "Familiar with MVC will help but is not required."
      ],
      "description": "Do you want to learn how to use Spring Boot to create engaging applications? Do you want to learn it in mere minutes instead of suffering for days trying to learn various programming languages? Are you a Spring Developer looking to hone your skills or just someone who is looking to expand their programming skill set?\nThen this course, offered by Udemy and created by a Cleveland based Software Engineer, Dan Vega is the right choice for you. This particular course offered, called “Learn Spring Boot” is designed to introduce you to Spring Boot through showing you an opinionated view of the building of Spring applications through both the Java and Groovy programming languages. It is a crash course, one where very little knowledge of both of these programming languages is recommended and where any prior knowledge of the Spring Framework is not at all necessary in order to learn.\nSo what is Spring Boot and why is it necessary to learn? Spring Boot and the Spring Framework makes it easy to create both powered and production grade applications and services that run on their own and can be maintained with a minimum fuss. It also provides production ready features such as metrics, health checks and even externalized configuration. It is software designed to run anywhere, meaning you can create executable JARs, which is one of the most favorable features of this type of program.\nWhile learning this type of application might seem like a daunting task, this course structures Spring Boot and Spring Framework learning in an easy to comprehend fashion. Featuring topics like an Introduction into the Framework as well as step by step guidelines into creating your first application, this course is perfect for almost any user. The only requirements in order to excel at this courses’ teaching of Spring Boot is some familiarity with Java and Groovy programming languages, some web development experiences as well as a computer that is capable of running both Java + Intellij or Eclipse.\nBesides this course offering lifetime access to all eighty featured lectures and over ten hours of teaching content, it also offers you the opportunity to create Spring MVC applications and also tutorials on how to connect to various databases using Spring Data. This course will be extremely beneficial to students who are new to Spring Boot, students who are unfamiliar with Spring Framework or those who are looking into writing their own apps. This course applies to all of these cases.\nComing with nearly all five star ratings, this course from Dan Vega and Udemy comes highly reviewed and rated. Dan’s teaching style is described as “detailed” and “responsive” and his “obvious love and enthusiasm for the framework is infectious”. And since it is a course open to all skill levels and understandings, it is one of the best choices on the Udemy market for those looking to learn the ins and outs of the Spring Boot Framework as well as those looking to hone their skills in Java web development.",
      "target_audience": [
        "Students new to Spring Boot",
        "Students new & existing to the Spring Framework",
        "You should NOT take this course if you have never used Java before."
      ]
    },
    {
      "title": "Bash Scripting and Shell Programming (Linux Command Line)",
      "url": "https://www.udemy.com/course/bash-scripting/",
      "bio": "Learn bash programming for Linux, Unix, & Mac. Learn how to write bash scripts like a pro & solve real-world problems!",
      "objectives": [
        "Write shell scripts that can be used on Linux, Mac, and Unix operating systems.",
        "Automate tasks using shell scripts.",
        "Create complex scripts that take advantage of advanced bash shell features."
      ],
      "course_content": {},
      "requirements": [
        "Some knowledge of the command line would be helpful, but not required."
      ],
      "description": "JOIN THE THOUSANDS OF SUCCESSFUL STUDENTS WHO HAVE ALREADY MASTERED BASH PROGRAMMING AND THE LINUX OPERATING SYSTEM WITH ONE OF MY TOP RATED COURSES!\nIf you want to learn how to write bash shell scripts like a pro, solve real-world problems, or automate repetitive and complex tasks, read on.\nHello. My name is Jason Cannon and I'm the author of Linux for Beginners, Python Programming for Beginners, and the founder of the Linux Training Academy. I started my IT career in the late 1990's as a Unix and Linux System Engineer and I'll be sharing my real-world bash scripting and shell programming experience with you throughout this course.\n\nBy the end of this course you will be able to create bash scripts with ease. You'll learn how to take tedious and repetitious tasks and turn them into programs that will save you time and simplify your life on Linux, Unix, or MAC systems.\n____________________\nHere is what you will get and learn by taking this Bash Scripting course:\nA step-by-step process of writing bash shell scripts that solve real-world problems.\nThe #1 thing you must do every time you create a bash script.\nHow to quickly find and fix the most common shell scripting errors.\nFor those of you who want to start programming right away, watch the two video shell scripting crash course. If you do nothing else than watch these two videos you'll be ahead of most bash programmers.\nHow to accept input from a user and then make decisions on that input.\nHow to accept and process command line arguments.\nWhat special variables are available, how to use them in your shell scripts, and when to do so.\nA shell script creation check list -- You'll never have to guess what to include in each of your shell scripts again. Just use this simple check list.\nA shell script template (boilerplate). Use this format for each of your shell scripts. It shows exactly what to include and where everything goes. Eliminate guesswork!\nPractice exercises with solutions so you can start using what you learn right away.\nReal-world examples of shell scripts from my personal collection.\nA download that contains the scripts used in the presentations and lessons. You'll be able to look at and experiment with everything you're learning.\nQuizzes after each section just to make sure you're learning the most important aspects of shell scripting.\nLearn to Program Using Any Shell\nWhat you learn in this course can be applied to any shell, however the focus is on the bash shell and you'll learn some really advanced bash features. Again, whether you're using bash, bourne (sh), KornShell (ksh), C shell (csh), Z shell (zsh), or even the tcsh shell, you'll be able to put what you learn in this course to good use.\nPerfect for Linux, Unix, Mac and More!\nAlso, you'll be able to use these scripts on any Linux environment including Ubuntu, Debian, Linux Mint, RedHat, Fedora, OpenSUSE, Slackware, Kali Linux and more. You're scripts will even run on other operating systems such as Apple's Mac OS X, Oracle's Solaris, IBM's AIX, HP's HP-UX, FreeBSD, NetBSD, and OpenBSD. (Sorry, this course is NOT for Windows scripting or powershell scripting.)\nHere's What People Are Saying About Jason and His Courses:\n\"Another amazing course by Jason Cannon. This course helped propel my bash scripting to a whole new level. Now, I can't stop automating my work flow! :) Pretty soon everything will do everything itself.\" --Fernando Garcia, Udemy Student\n\n\"Excellent course on Linux! It is the best way to get started using Linux that I have come across.\" --Chris Bischoff, Udemy student\n\"This class was a great review of the 2 Linux classes I took in school. I learned plenty of new stuff and got a great refresher on things I haven't used in some time. I did well on my interview and got the job I was looking for. Thanks!\" --Alan Derrick, Udemy student\n\n\n\"This was a great course! Learned a lot from it!\" --Ricardo José Crosara Junior, Udemy student\n\"Excellent starter course. Very good and complete guide to get you started on working on Linux.\" --Brian Mulder, Udemy student\n\"Great course! Easy to understand for beginners and a great refresher for experienced users!\" --Spencer Ball, Udemy student\n\"Very well laid out course. Thanks Jason!\" --Eric Etheredge, Udemy student\n\"Love it... it's absolutely one of the best courses I've taken here on Udemy.\" --Idriss N, Udemy student\n\"Awesome Course! Another great one. Thanks Jason!\" --John Wilmont, Udemy student\n\"Excellent Course! Having come from a moderate understanding of Linux, this course has given me a deeper and more streamlined understanding of Linux. Definitely worth the money.\" --Armando Cabrera, Udemy student\n\"Fantastic course and very beautifully explained.\" --S John, Udemy student\n\"Great course, great instructor. I enjoyed every minute of it. I recommend this course 100%.\" --Alfredo, Udemy student\n\"I am lovin' it. Nice way to begin one's journey into Linux.\" --Rohit Gupta, Udemy student\n____________________\nDownloads of All the Material Covered\nWhen you enroll in this Bash Scripting video training course, you'll receive access to all the slides and shell scripts used in the lessons. You can download them and refer to them when you want to jog your memory or double-check your work.\nEnroll now and to learn how to write bash shell scripts like a pro!",
      "target_audience": [
        "Anyone interested in shell scripting or shell programming."
      ]
    },
    {
      "title": "Introduction to Java for Programmers",
      "url": "https://www.udemy.com/course/introduction-to-java-programming/",
      "bio": "With over 200 videos and 20 hours of content, this Java training course will teach you to program in Java 7 and Eclipse.",
      "objectives": [
        "Write stand-alone applications using the Java language and the Eclipse IDE.",
        "Accurately implement Object-Oriented concepts using Java features such as classes, interfaces and references.",
        "Create well-scoped classes using packages.",
        "Write programs which both handle and create exceptions.",
        "Read and write data using input and output streams.",
        "Use the Java Collections Framework to work with groups of objects."
      ],
      "course_content": {
        "Course Introduction": [
          "Course Overview",
          "Optimizing your Udemy Experience",
          "Do You Need the Course Manual?",
          "How to Get the Optional Course Manual",
          "Download Student Files",
          "Windows 10 Setup",
          "Computer Setup"
        ],
        "Getting Started with Java": [
          "Objectives",
          "What is Java?",
          "How to Get Java",
          "A First Java Program",
          "About Your First Java Program",
          "Compiling and Interpreting Applications",
          "The JSDK Directory Structure",
          "Labs",
          "Lab Review"
        ],
        "Eclipse": [
          "Objectives",
          "Introduction to Eclipse",
          "Installing Eclipse",
          "Running Eclipse for the First Time",
          "Editors, Views, and Perspectives",
          "Creating a Project and Class",
          "Running a Java Application",
          "Debugging a Java Application",
          "Importing Existing Java Code into Eclipse"
        ],
        "Datatypes and Variables": [
          "Objectives",
          "Primitive Datatypes",
          "Declarations",
          "Variable Names",
          "Numeric Literals",
          "Character Literals",
          "Strings and String Comparisons",
          "String API Documentation",
          "Immutable Strings",
          "String Literals",
          "Arrays",
          "More Arrays",
          "Non-Primitive Datatypes",
          "The Dot Operator",
          "Labs",
          "Labs 1 and 2 Review",
          "Lab 3 Review",
          "Labs 4-6 Review",
          "Lab 7 Review"
        ],
        "Operators and Expressions": [
          "Objectives",
          "Expressions",
          "Assignment Operator",
          "Arithmetic Operators",
          "Relational Operators",
          "Logical Operators",
          "Increment and Decrement Operators",
          "Operate-Assign Operators",
          "The Conditional Operator",
          "Operator Precedence",
          "Implicit Type Conversions",
          "The Cast Operator",
          "Labs",
          "Lab 1 Review",
          "Lab 2 Review",
          "Lab 3 Review"
        ],
        "Control Flow": [
          "Objectives",
          "Statements",
          "Conditional (if) Statements",
          "Adding an else if",
          "Conditional (switch) Statements",
          "while and do-while Loops",
          "for Loops",
          "Looping Through an Array",
          "Enhanced for Loop",
          "The continue Statement",
          "The break Statement",
          "Labs",
          "Labs 1-4 Review",
          "Labs 5-6 Review"
        ],
        "Methods": [
          "Objectives",
          "Methods",
          "Calling Methods",
          "Defining Methods",
          "Method Parameters",
          "Scope",
          "Labs",
          "Lab 1 Review",
          "Lab 2 Review"
        ],
        "Object-Oriented Programming": [
          "Objectives",
          "Introduction to Object-Oriented Programming",
          "Classes and Objects",
          "Fields and Methods",
          "Encapsulation",
          "Access Control",
          "Inheritance",
          "Polymorphism",
          "Demonstrating Polymorphism with Arrays",
          "Best Practices",
          "Labs",
          "Lab Review"
        ],
        "Objects and Classes": [
          "Objectives",
          "Opening the Examples in Eclipse",
          "Defining a Class",
          "Creating an Object",
          "Viewing Object Creation in the Debugger",
          "Instance Data and Class Data",
          "Using the final and this Keywords",
          "Methods",
          "Avoiding Code Duplication",
          "Defining Constructors",
          "Calling Constructors",
          "Generating Constructors with Eclipse",
          "Access Modifiers",
          "Encapsulation",
          "Labs",
          "Labs 1-2 Review",
          "Lab 3 Review",
          "Lab 4 Review",
          "Lab 5 Review"
        ],
        "Using Java Objects": [
          "Objectives",
          "Printing to the Console with printf",
          "More Printing to the Console with printf",
          "StringBuilder and StringBuffer",
          "Methods and Messages",
          "The toString() Method",
          "The equals() Method",
          "The hashCode() Method",
          "Parameter Passing",
          "Parameter Passing Example",
          "Destroying Objects",
          "Using the Primitive-Type Wrapper Classes",
          "Enums",
          "Labs",
          "Lab 1 Review",
          "Lab 2 Review",
          "Labs 3-4 Review",
          "Labs 5-6 Review"
        ]
      },
      "requirements": [
        "Prior programming experience is required.",
        "Knowledge of Object-Oriented concepts is helpful.",
        "You must install Java 7 and Eclipse to participate in the hands-on portions of the course."
      ],
      "description": "Course Summary\nWith over 200 videos and 20 hours of content, this online Java training course is designed to provide a solid foundation in Java programming and Eclipse for programmers who are already proficient in another language. Besides learning the basic structure and syntax of the language, you will also learn object-oriented principles and how they are applied in Java applications. In addition, this training course covers more advanced features of the language such as abstract classes, interfaces, generics, packages, and exception handling. Finally, you will learn two foundational API libraries: I/O streams and collections. This online training course is current to Java 7 and uses the Eclipse IDE.\nIf you are a complete beginner with no programming experience, please see our Learn to Program with Java for Complete Beginners courses, instead.\nHands On Learning\nUnlike other online training courses, you are encouraged to actively participate in the learning experience by running example files during lectures and performing coding challenges during labs. Each lab session includes review videos so you can compare your solution to the instructor's.\nBonus Content\nThis training course comes complete with working example and lab solution files as well as a link to optionally purchase the workbook used in the video at a discount.\nAbout the Instructor\nJamie Romero is a dynamic instructor and expert Java programmer. He has taught over 350 classes to programmers from companies like Hewlett-Packard, Lockheed Martin, and Boeing. Jamie's energetic style and up-beat attitude are just what you need for an online training course.\nSome recent comments about Jamie's classes:\n\"Jamie was a great instructor. He cut through the fluff and gave us the core of what I need to start using Java right away.\"\n\"Great instructor that knows the material and is enthusiastic about Java. It helped very much in getting through the course.\"\n\"Jamie exhibits a mastery of the material, to such a degree that his ability to explain it is very effective. Explanations are very detailed, and presented in a very understandable way. He is an excellent instructor.\"",
      "target_audience": [
        "This training course is designed for programmers who want to move into the Java language."
      ]
    },
    {
      "title": "Java In-Depth: Become a Complete Java Engineer!",
      "url": "https://www.udemy.com/course/java-in-depth-become-a-complete-java-engineer/",
      "bio": "Java Programming Bootcamp with Spring Boot, Best Practices, Design Rules & Java EE Project — Updated for Java 21",
      "objectives": [
        "Industry-oriented, comprehensive bootcamp updated to Java 21 to help you master Core & Advanced Java, including JVM internals",
        "Master best practices, design rules, and coding conventions for writing well-designed, professional Java code",
        "Get real-world experience by developing an instructor-led Java EE-based Web application with MySQL as database",
        "Set firm foundation in Java for the rest of your career. It is akin to a Master's Program in Java",
        "If entire course is done systematically, your Java skills will be on par with engineers at top product companies like Google",
        "Master Object-Oriented Programming concepts by using a real-world application as a case study",
        "Master Exceptions, Collections, Generics, Multithreading, Databases, Functional-style Programming, etc. with best practices",
        "Over 20 Coding Exercises and several challenging Quizzes to validate your learning",
        "[NEW} Spring Boot & Spring Framework Sections (incl. Maven) have been added"
      ],
      "course_content": {
        "Course Introduction": [
          "Why Yet Another Java Course?",
          "Course Structure & Guidance for Doing this Course",
          "Schedule for College Students"
        ],
        "Java: A High-level Overview": [
          "Chapter Introduction",
          "What is Java & Who is Using It?",
          "Story behind Java's Creation ~ A Brief History",
          "Compilation",
          "Platform Dependency + Demo",
          "Interpreter",
          "Platform Independence in Java + Demo",
          "Java Virtual Machine (JVM)",
          "An Overview of Java SE",
          "Java SE Release Cycles & Release History",
          "Installing JDK 17 on Windows",
          "Installing Java on Mac",
          "Installing Java on Linux",
          "Setting Classpath Environment Variable",
          "Writing First Java Program + Demo",
          "Conclusion ~ Chapter 1",
          "Chapter 2 Quiz",
          "Important Q&A Discussions!"
        ],
        "Classes, Objects and their Members": [
          "Chapter Introduction",
          "Class & Objects",
          "Demo: Absolute Java Basics",
          "Identifiers - A Note on Naming Rules",
          "Variables: Introduction",
          "Demo: Declaring & Re-initializing Variables",
          "Currency Converter - Creating a Class with Variables",
          "Variables: Primitive Types",
          "Primitive Variables: Integers + Demo",
          "Demo: Other Integer Literal Formats",
          "Primitive Variables: Floating-point Numbers + Demo",
          "Demo: Floating-point Pitfalls",
          "Primitive Variables: Character Data Type + Demo",
          "Demo: Alternate ways to initialize char variables",
          "Demo: Primitive Variables: Boolean Data Type",
          "Quiz: Primitive Variables",
          "Demo: Variable Kinds - Instance, Static, and Local Variables",
          "Cafe Order Processor ~ Putting Instance & Static Variables to Work",
          "Demo: Multi-variable Declaration Statements",
          "Variables: Type Casting + Demo",
          "Variables: Object References + Demo",
          "Statements + Demo",
          "Arrays + Demo",
          "Currency Converter - Array Creation & Accessing its Elements",
          "2D Arrays",
          "3D Arrays + Demo",
          "Methods: Introduction + Demo",
          "Method Types ~ Instance & Static Methods + Demo",
          "Summary on Accessibility of Members from Static & Instance Methods",
          "Currency Converter ~ Invoking Methods of an Object",
          "How Data is Passed to Methods in Java? + Demo",
          "Method Overloading + Demo",
          "Methods: varargs + Demo",
          "Brief Summary on varargs Parameter",
          "Constructors + Demo",
          "Constructor Overloading + Demo",
          "Demo: Constructor Overloading ~ Alternate way of delegating",
          "Minor Note on Method Invocation & Implicit Narrowing Conversion",
          "Demo: this Reference",
          "Demo: Reinitializing Object References ~ More Brainstorming! (Incl. Assignment)",
          "Minor Note on Executing StudentTest and a Java 11 Feature",
          "Implementing Instructor Class ~ Manipulating Arrays with Object References",
          "Review of Exercise Solution with Best Practices",
          "Cafe Order Processor ~ Taking Customer Orders via Constructors",
          "Conclusion",
          "Chapter Quiz",
          "Important Q&A Discussions!"
        ],
        "Method Building Blocks: Operators & Control-flow Statements": [
          "Chapter Introduction",
          "Operators",
          "Arithmetic Operators + Demo",
          "Arithmetic Operation Precedence & Promotion Rules + Demo",
          "Minor Clarification on Arithmetic Operator Precedence Rule",
          "Quiz: Arithmetic Operators",
          "Note on Student Class",
          "Demo: Comparison Operators",
          "Logical Operators with Operator Precedence + Demo",
          "Car Price Estimator ~ Coding Exercise for Comparison & Logical Operators",
          "Car Price Estimator ~ Putting Comparison & Logical Operators into Action",
          "Car Price Estimator - Exercise Solution Review",
          "Bitwise Operators + Demo",
          "Quick Note on Bitwise Operators with Boolean Operands",
          "Bit Shift Operators",
          "Quiz: Bitwise & Bit Shift Operators",
          "Control-flow: Demo: if-statement",
          "Amusement Park Ticket Price Calculator ~ Putting if statements into Action",
          "Switch Statement: Introduction + Demo",
          "Switch Restrictions + Demo",
          "Cafe Order Processor ~ Menu with Switch Statement",
          "Arrow Labels in Switch (Java 14)",
          "Switch Expressions (Java 14)",
          "Cafe Order Processor ~ Menu with Switch Expression",
          "Quiz: switch Statement",
          "Control-flow: Ternary + Demo",
          "Additional Notes on Ternary Operator",
          "Control-flow: for Statement + Demo",
          "Demo: More for Statement ...",
          "Another Look at Nested for Statement",
          "Manipulating Arrays & Matrices with for Statements",
          "Demo: for-each Statement",
          "Variable Scope",
          "Exercise",
          "Computing GPA ~ Putting Operators & Control-flow to Test",
          "Computing GPA - Exercise Solution Review",
          "Demo: while Statement",
          "Demo: do Statement (incl. Scanner Class for taking Input)",
          "Demo: Blocks",
          "Demo: break Statement",
          "Labeled Statement & Labeled break",
          "continue Statement & Labeled continue",
          "Practice: break & continue Statements",
          "Recursion + Demo",
          "Minor Correction in Binary Search Code",
          "Conclusion"
        ],
        "Packages, Strings and Information Hiding Design Principle": [
          "Chapter Introduction",
          "Java API",
          "Accessing Packages + Demo",
          "Creating Packages & Classpath Management + Demo",
          "Naming Packages",
          "Access Levels + Demo",
          "More on private Modifier + Demo",
          "Quiz: Packages",
          "Strings: Introduction",
          "String Class + Demo",
          "Demo: replace() vs replaceAll(regex) & join()",
          "Generating URL Path Variables: Strings Coding Exercise (Problem Discussion)",
          "Generating URL Path Variables ~ Putting String Methods in Action",
          "Coding Exercise Solution Review: Generating URL Path Variables",
          "Demo: Text Parsing with substring() & indexOf()",
          "Calculating Term Frequency in a Document",
          "String Pool & Interning + Demo",
          "String Immutability",
          "String Concatenation + Demo",
          "String Concatenation Performance",
          "Escape Sequences + Demo",
          "Sentiment Analysis: Mining Pros & Cons ~ Putting String Class to Test",
          "Information Hiding - Use Accessor Methods",
          "Demo: Enhancing Student Example with Information Hiding",
          "Minimize Accessibility of Classes & Members",
          "Conclusion",
          "Chapter Quiz",
          "Important Q&A Discussions!"
        ],
        "Programming with Eclipse IDE": [
          "Introduction",
          "Installing Eclipse",
          "Writing a Java Program in Eclipse",
          "Eclipse Build Process",
          "Importing Demo Code",
          "Source Code Navigation",
          "Automatic Source Code Cleaning & Generation",
          "Shortcuts Cheat Sheet"
        ],
        "More java.lang & Coding Conventions": [
          "Chapter Introduction",
          "Note on Few Demos",
          "Demo: Math Class",
          "Initializers: Static & Instance + Demo",
          "Note on Instance Initialization Blocks",
          "final Variable + Demo",
          "Constant Variables + Demo",
          "Boxed Primitives & Static Factory Methods+ Demo",
          "Demo: Uses of Boxed Primitives",
          "Autoboxing + Demo",
          "Boxed Primitives & Immutability",
          "Prefer Primitives over Boxed Primitives",
          "Parsing API Response ~ Let's make use of Boxed Primitives & String class",
          "Coding Conventions: Introduction",
          "Naming Conventions: Typographical Rules",
          "Naming Conventions: Grammatical Rules",
          "Coding Conventions: Structuring Programs",
          "Coding Conventions: Stylistic + Demo",
          "Coding Conventions: Comments + Demo",
          "Conclusion",
          "Chapter Quiz"
        ],
        "Case Study: A Social Bookmarking Application": [
          "thrill.io ~ A Social Polymarking App!",
          "Case Study"
        ],
        "Serious OOP: Inheritance & Polymorphism": [
          "Inheritance",
          "Access Modifiers & Inheritance + Demo",
          "IS-A Test",
          "Hospital Management System (HMS) ~ Let's put Inheritance into practice!",
          "Polymorphism + Demo",
          "Casting Objects & instanceof Operator + Demo",
          "Extending HMS with a Billing Component ~ Putting Polymorphism into Practice!",
          "Type Safety",
          "Method Overriding + Demo",
          "Minor Correction in First Method Overriding Rule",
          "Method Binding + Demo",
          "What is Not Overridden? (final Method is one of them) + Demo",
          "Demo: Fields are Not Overridden",
          "Object Class + Demo",
          "Constructor Chaining + Demo",
          "Note on Constructor Inheritance",
          "Preventing Inheritance",
          "Conclusion",
          "Chapter Quiz"
        ],
        "More Serious OOP: Abstract Classes & Interfaces": [
          "New Requirement: thrill.io for Kids",
          "Abstract Classes & Methods + Demo",
          "Demo: Constructors in Abstract Classes",
          "Prefer Class Hierarchies over Tagged Classes",
          "Computing Health Insurance Premium for Staff ~ Let's put Abstract Classes & Methods into practice!",
          "New Requirement: Sharing Bookmarks",
          "Multiple Inheritance & Diamond Problem",
          "Interfaces",
          "Update to Interfaces due to Java 9",
          "More on Interfaces",
          "Note on Next Lecture on Interfaces",
          "Demo: Interfaces",
          "Interfaces: A Conceptual View",
          "Prefer Interfaces over Abstract Classes",
          "Refer Objects via Interfaces",
          "Computing Health Insurance Premium for Staff (Part 2) ~ Let's put Interfaces into practice!",
          "Marker Interfaces",
          "Cloneable Interface + Demo",
          "Deep Cloning of Objects",
          "default Methods (Java 8) + Demo",
          "Recap of default Methods",
          "default Methods: Other Benefits + Demo",
          "Static Methods in Interfaces + Demo",
          "Private Methods in Interfaces",
          "Conclusion",
          "Chapter Quiz",
          "Important Q&A Discussions!"
        ]
      },
      "requirements": [
        "The 3 P's: Passion, Patience, and Perseverance. Please note it is not a crash course!!",
        "Top Concentration. Around an year of your self-study effort is carefully packed into 80 hours. So, no fluff!!"
      ],
      "description": "Recent Updates:  *** Updated to Java 21 ***\nJul - Sep '25: New sections on Spring Boot & Spring Framework have been added along with a short Maven tutorial to serve as a precursor.\nMar '25: Added in-depth lectures on Pattern Matching for switch (Java 21) & Pattern Matching for instanceof (Java 16) in Modern Java section. These important new features enable in writing concise, safer, and efficient code.\nJuly '24: In-depth lectures on industry-standard Naming Conventions (under the Coding Conventions series) have been added. These conventions are followed in the Java library and recommended by companies like Google.\nCourse Introduction:\nThis Master Course has been meticulously developed for over a decade and follows a unique, industry-vetted curriculum to help you become a Complete & Professional Java Engineer. Its goal is to equip you with Java skills that are needed to be part of top engineering teams like the ones at Google and Amazon. It has over 135,000 students from over 170 countries ranging from complete beginners to experienced Java professionals. Top companies like IBM, TCS, Cognizant, Wipro, and others are actively using this course to upskill their employees. It has been consistently ranked as one of Udemy's top 3 paid Java courses and has helped countless students start their professional journey as \"confident\" Java programmers.\nWhat Our Students are Saying:\n\"One of the best courses I have taken on coding in general! On par with courses you can take from Stanford Engineering Everywhere.\"  ~ Kaloyan T.\n\"I'm leaving this review a couple years after having completed this course. This is hands down the greatest online course I've ever taken. Extremely in-depth, extremely thorough, and Dheeru was always helpful when I asked questions. To really benefit from this course, you'll have to sit there and bang your head but if you take careful notes and make sure you can explain each step you're taking to solve a problem, you'll come out on top. I am now a data engineer and this course is one of the biggest catalysts for my transition into tech.\" ~ Carlvin Sanon\n\"This is by far the best advanced as well as beginner course I have ever read/seen since Andre LaMothe quit writing\" ~ Stephen Jonson\n\"Absolutely amazing, complete and in depth course. I would recommend this course to everyone interested in Java and programming in general. Dheeru Mundluru is an exemplary and responsive instructor. He explains the concepts with such clarity and with examples that every thing makes perfect sense. When I started this course, I only had vague idea of programming and now after completing this course I have a solid foundation to build upon. I would certainly say that due to this course I have fell in love with Java language and its ecosystem\" ~ Muhammad Arsal Abdullah\n\"The Instructor is highly competent. He is a world-class instructor ... Taking this course will definitely give you a tremendous appreciation for this great language\" ~ Carrel d'Haiti\n\"It helped me pass a paid internship interview in a reputable company and now i am getting a job.\" ~ Stephen\n\"... I have been a Java developer for 8 years and hold a Masters degree in Computer Science ... This is honestly the very best online Java video course on the market... wish I had have had a course like this when I first started\" ~ Clive Stewart\n\"The JVM internals section of this course itself is worth buying this course. Excellent teaching style.\" ~ Ryan Trang\nCourse Overview:\nThis course was built not just to teach Java, but with a larger goal of helping you become a complete & professional Java engineer right by the end of this course. To achieve this, it takes a holistic teaching approach:\nCovers most of the Java language features at a very in-depth level.\nIncorporates tons industry-standard best practices and design rules..\nGuides you in building a Java EE Web application using Eclipse, with real-world conventions and professional workflows.\nIf the entire course is done systematically, your Java skills will be on par with engineers at top-tier companies like Google. All your questions are answered in-depth, often within 24 hours — over 10,000 questions have already been answered!\nSpecial Note for College Students: Lecture 3 offers guidance on weekly and semester goals, helping you integrate this course smoothly into your academic schedule.\nCourse Specifics:\nThe course starts with a bird's-eye view of Java, from its origins to installing Java and writing your first program. Even the most basic concepts like compilation vs. interpretation are thoroughly explained.\nFrom there, it dives deep into:\nLanguage Basics\nObject-Oriented Concepts and Design\nJVM Internals\nException Handling, IO, Collections, Generics, and Concurrency (aka Multithreading)\nDatabase Design (Normalization) & Implementation (SQL, JDBC), Enums, and Nested Classes\nFunctional-style Programming using Java 8 Features (Lambdas, Streams)\nModern Java Features like Switch Expressions (Java 14), Record Classes (Java 16), Pattern Matching for Switch (Java 21)\nYou’ll also get:\nAn excellent Eclipse IDE tutorial, which teaches how to use Eclipse professionally for effectively writing, debugging and even testing Java programs using the JUnit framework.\nA concise Maven tutorial to prepare you for the Spring Framework section.\nA solid introduction to Java/Jakarta EE (Servlets, JSP, and JSTL) and Spring Boot & Spring Framework (incl. Spring MVC).\nEach lecture has been very carefully crafted explaining the motivation behind every concept. Each concept is clearly explained with well thought out examples & illustrations and is demonstrated in code. Object-oriented concepts like inheritance and polymorphism are taught through a real-world case-study, which is also implemented as part of the course project. Numerous challenging coding exercises and quizzes are included to reinforce what you've learned.\nInstructor-Led Project:\nThe course project involves building a bookmarking Web application that helps users bookmark items like Books, Movies, and Web pages and is built progressively as new concepts are learned. The project is instructor-led and is implemented using professional coding conventions & best practices. It follows good object-oriented design, incorporates MVC architectural pattern and also uses Test-Driven Development (TDD) methodology. Java EE stack comprising technologies like Servlets, JSP, and JSTL are used for building the application with MySQL as the database and Apache Tomcat as the Web server. Parts of the project use advanced multi-threading capabilities.\nWhy This Course Is Unique:\nThroughout the course, you’ll learn best practices and design principles—not just how to code, but how to write well-designed, maintainable, and professional-grade software. This is one of the highlights of the course and will make you truly complete!\nStory behind Creating this Course:\nThe idea for building this Master Course has taken its roots during the instructor's (Dheeru Munduru) experience as a Principal Software Engineer in Silicon Valley. After working for several years with many excellent engineers, Dheeru realized   that even strong teams sometimes struggled to build effective solutions. This led to several rounds of \"code refactoring\" resulting in loss of valuable time for the organization. He realized this was because programming is often not taught the right way in most universities and colleges. Students typically learn only the core language features, with little or no emphasis on best practices or design rules required to write well-designed, professional-level code. Due to this, developers are often ill-equipped when they have to come up with good solutions for complex problems. This leads to quick ad-hoc & incomplete learning, which often not only result in bad solutions, but also more importantly causes lot of stress on developer's part.\nThis made Dheeru realize that a more holistic approach to teaching is needed where programming language features are taught along with best practices & design principles needed for building well-designed robust software. This course is a result of this realization and it has taken him a decade of full-time effort. He will continue to devote himself in building this course towards making it one of the best Java courses out there.\nJoin Today:\nJoin thousands of learners around the world and start your journey to becoming a complete, confident, and industry-ready Java engineer. Let this be the course that transforms your career!",
      "target_audience": [
        "Complete beginners. We got you covered. We'll start from compilation & interpretation.",
        "Programmers switching from other languages",
        "Java professionals who are not feeling confident about their existing Java skills",
        "Java professionals who want to learn about industry-standard best practices & software design rules. One must know this stuff to write complex industry-grade software."
      ]
    },
    {
      "title": "Object Oriented Programming - Basics to Advance (Java OOP)",
      "url": "https://www.udemy.com/course/oop-learnit/",
      "bio": "Learn OOP, SOLID principles with Java examples. Implement backend part for online store by the end of the course",
      "objectives": [
        "Object-oriented programming",
        "SOLID Principles",
        "Best practices in OOP Architecture",
        "Exam task: implement backend for online store",
        "A lot of coding exercises",
        "GoF Design Patterns",
        "Clean Code Design in OOP"
      ],
      "course_content": {
        "Introduction": [
          "Communication plan",
          "Unlimited access to Learn-IT application for students",
          "Tips to Improve Your Course Taking Experience",
          "Additional Free Learning Materials to Use During the Course",
          "Free AI Bot for My Students Only – No Sign-Up, FREE, Just Practice"
        ],
        "OOP Basics": [
          "Object-oriented programming: Basics",
          "Classes & Objects",
          "Different types of Classes, Abstract keyword and Abstract classes",
          "Interfaces"
        ],
        "OOP Core Principles - Inheritance, Polymorphism, Encapsulation and Abstraction": [
          "Inheritance",
          "Polymorphism and 'final' keyword",
          "'static' keyword",
          "Encapsulation",
          "Object, JNI and Object class overview",
          "Quiz: Object-oriented programming - Check yourself"
        ],
        "SOLID Principles": [
          "SOLID principles overview & Single Responsibility Principle",
          "Open / Closed Principle",
          "Liskov Substitution Principle",
          "Interface Segregation Principle",
          "Dependency Inversion Principle",
          "Quiz: SOLID Principles - Check yourself"
        ],
        "PRACTICE: Coding exercises to practice SOLID principles": [
          "Single Responsibility Principle: User Registration and Authentication Refactoring Exercise",
          "Open / Closed Principle: Shape Refactoring Challenge",
          "Liskov Substitution Principle: Square and Rectangle Refactoring Challenge",
          "Interface Segregation Principle: Worker Refactoring Challenge",
          "Dependency Inversion Principle: Car-Engine Refactoring Challenge"
        ],
        "Methods": [
          "Methods in Java: Overview",
          "Parameter Passing Mechanism in Java",
          "Recursive methods",
          "Variable Length Arguments",
          "Find max int in array",
          "Draw empty rectangle",
          "Calculate Amount of Words",
          "Filter String array",
          "Rotate Matrix",
          "Extend Array",
          "Greatest Common Divisor",
          "Sum all digits in number",
          "String Processor",
          "Turn each first letter in the word to capital",
          "Convert decimal to Roman numbers and vice versa",
          "Homework review: Methods",
          "Quiz: Methods in Java - Check yourself"
        ],
        "===== OOP: Interview Preparation =====": [
          "How to be prepared for the interview?",
          "Part 1: OOP Interview - Questions and Answers",
          "Part 2: OOP Interview - Questions and Answers"
        ],
        "Practice: EXAM OOP & Object-Oriented e-Commerce console applications": [
          "Exam and homework for OOP topic",
          "Payments and Transacations processing",
          "Books Management",
          "Presents Management",
          "EXAM: Back-end application for online store"
        ],
        "Object-oriented Architecture, Clean Code Design (Advanced)": [
          "Clean Code Architecture, Coupling & Cohesion",
          "Tell, Don’t Ask Pricniple & Data Structures",
          "Law of Demeter",
          "KISS Principle in OOP",
          "YAGNI Principle in OOP",
          "DRY Principle in OOP | Part 1",
          "DRY Principle in OOP | Part 2 - Practice",
          "Packaging Pricniples p.1: Cohesion Principles",
          "Packaging Pricniples p.2: Coupling Principles and Others"
        ],
        "GoF Design Patterns of Software Architecture in OOP": [
          "GoF Patterns: Overview",
          "Creational Patterns",
          "Structural Patterns, p.1",
          "Structural Patterns, p.2",
          "Behevioral Patterns, p.1",
          "Behevioral Patterns, p.2",
          "Behevioral Patterns, p.3"
        ]
      },
      "requirements": [
        "Knowing any programming language basics",
        "Understanding Java syntax"
      ],
      "description": "From this course, you can learn Object-Oriented Programming from basics to advanced concepts.\nAll code examples in the course are written in Java but that's doesn't mean you can't apply the knowledge from this course in other programming languages. You can easily use the knowledge from this course in any language if you want to build applications with the help of an object-oriented programming approach.\nThere are a lot of other courses on this topic. So, why would you choose exactly this course? Here are just a few reasons:\n\n- Coding exercises\nTo learn to program is not enough just watching videos and reading books. You also need to have a lot of practice. In this training course, you will have different practical tasks which will help you learn and understand Java better.\nOne of the key tasks where you can practice your knowledge is the implementation of a backend system for an online store. Also, you have a lot of tasks that use domain-specific terminology: accounts, transactions, users, carts, menu, services, etc. So that means you are learning programming without abstract concepts like it is written in the books or in other courses. You learn domain-specific terminology and during the lessons, we investigate specific extracts from code that can give you a clear vision of how you can apply the knowledge in real life.\n\n- Open source code\nWe hide nothing from our students! Including the source code for the home task solutions and source code of examples that were shared during the lesson. Having the source code you can just copy and paste it to run it on your local computer to understand how things work better.\nYou are allowed to use all source code examples for learning purposes. This helps significantly to configure the environment and make tests work, especially in case students didn't work with any testing framework in the past.\n\n- Q&A support\nThe significant difference between the online and offline learning process is the instructor's availability. If you are in one room with a tutor he always can help you to get understand the specific concept or to help fix your code on your computer.\nIn this course, we are supporting students with answers to any questions flagged in the Q&A section. In case there will be recurring questions - separate video lessons will be created to show how to address the issue.\nSo with this course you are not just getting video materials, code exercises, source code, access to the free mobile application without limits (which is still pretty cool, huh? :) ), but you also get tutor support and answers to your questions along with this course.\n\n- Relevant knowledge\nAfter our team investigated other Java courses on Udemy we realized that most of them have nothing in common with real life. The information which is shared there is very old and significantly out of date. For example, the instructor teaches a framework which is not been used already for 15 years. Or instructors do stress on the programming design which is not used anymore at all!\nThe instructor of this course is a consultant in a top-rated IT outsourcing company and helps to bring cutting-edge solutions in IT for all his clients. Feel free to check the LinkedIn page of the instructor and check skills endorsement. More than 19 thousand people across all over the world (BTW most of them are from the top 100 companies of the world) evaluated the skills of Andrii Piatakha.\nWith this course, you can be sure that you will spend your time learning the right things from one of the best IT consultants in the world.\n\n- Free mobile App without limits for our students\nKnowing Java is one skill. Be able to pass interviews in the company - that is another skill :) Nowadays a lot of companies use tests to select candidates on the first level of interview. We developed applications to practice skills specifically for such purposes.\nIn this course, we will provide you link to download our FREE mobile app for android. (soon it will be also available for iOS platforms)\nThe instructor of this course comes up with hundreds of tests that are used to test the knowledge of candidates. With this application, you will be well-prepared for the interview.\nAlso, only for our students - there is no limit on attempts to pass certification. In the course, we will tell you how to set up a special bonus code that will remove restrictions for our students inside the app.\n\n- High concentration of useful material in each lesson\nSometimes you can notice that watching 5 minutes of our lesson is equivalent to watching another 30 minutes lesson.\nThis is because time spent for preparation for the lesson (script for the lesson, lesson structure) and video editing (to cut boring pieces of the lesson or time when the program loads) sometimes 10 times as much (sometimes even 20) as the final lesson duration after video editing.\nAlso, each topic is separated from another. In case some concept will be explained in the next lesson and you don't need to worry about understanding this in the scope of this lesson - the instructor will make an announcement when a specific topic will be covered.\nGo and try it yourself! We will appreciate your feedback.\n\n\n\n\nSo don't wait! Take a look at the lessons' preview if you still have doubts!\nBuy this course today, and you will get all updates for FREE!\nFor those who successfully passed this training course, or for students who were recognized for asking amazing questions, there is a special offer from the IT-Bulls company! The creator of this course is IT-Bulls company CEO and Founder. We are always in search of talents to run our amazing startups together with you. Probably you always dreamed about running your startup? In this course, you will be able to find the team who will teach you how to do that and (in particular cases) will be glad to help with implementation!\nHope you enjoy this course! And remember, we appreciate all your feedback! Your feedback will help us to become even better! Your feedback will help us to create to best Java course ever!\nSee you at the lessons! :)",
      "target_audience": [
        "Beginner Software Engineers",
        "Middle Software Engineers who wants to learn more about OOP",
        "Developers with shallow knowledge in OOP programming"
      ]
    },
    {
      "title": "Angular Step by Step for beginners",
      "url": "https://www.udemy.com/course/angular-tutorial/",
      "bio": "This course teaches Angular from basic to advanced level by creating a Customer data entry project.",
      "objectives": [
        "Understanding Node NPM, CLI , VS ,Typescript and Webpack build tool.",
        "Understanding Module and Component architecture in angular. Understanding important properties of component like templateurl , styleurl and selector.",
        "Understanding configuration files like Angular json , tsconfig json , package json file and semantic versioning.",
        "Understanding Routing ,router-outlet , routeLink and Lazy loading",
        "Angular validation using formgroup , formcontrols and validators.",
        "Creating loosely coupled architecture using DI ( Dependency Injection) and providers.",
        "Implementing reusable user controls using input , output and event emitters.",
        "Making http calls , understanding httpclient , http interceptors and fixing double entry problem",
        "Integrating Angular with visual studio , MVC core and WebAPI.",
        "Unit testing using Jasmine and Karma."
      ],
      "course_content": {
        "Lab 1 :- Running your First Angular Application": [
          "Running your first Angular Application (Full flow of Angular explained)",
          "Test your Angular Knowledge"
        ],
        "Lab 2 :- Creating a Customer user interface with Grid": [
          "Creating UI , Component and Model",
          "Lab 2 Quiz"
        ],
        "Lab 3 - Creating MasterPage page,Supplier page ,Home page & enabling navigation": [
          "Lab 3 :- Routing - Creating Masterpage with proper navigation"
        ],
        "Lab 4 :- Increasing Performance using Lazy Loading": [
          "Lab 4 :- Increasing Performance using Lazy Loading"
        ],
        "Lab 5 :- Implementing Validation in Angular": [
          "Lab 5 :- Validation in Angular"
        ],
        "Lab 6 :- Dependency Injection and Providers": [
          "Lab 6 :- Dependency Injection and Providers"
        ],
        "Lab 7 :- Input , Output and Event Emitters": [
          "Lab 7 :- Input , Output and Event Emitters"
        ],
        "Lab 8 :- Making HTTP calls using Angular.": [
          "Lab 8 :- Making HTTP calls using Angular."
        ],
        "Lab 9 :- Integrating MVC core with Angular using visual studio": [
          "Lab 9 :- Integrating MVC core with Angular using visual studio"
        ],
        "Lab 10:- Migrating Angular 6 to Angular 7": [
          "Lab 10:- Migrating Angular 6 to Angular 7"
        ]
      },
      "requirements": [
        "Basic JavaScript and HTML knowledge needed.",
        "Basic programming knowledge is needed.",
        "You do not need to know any old Angular version of Angular."
      ],
      "description": "This tutorial teaches Angular using a project. So a simple customer screen is taken and around the same the whole course revolves. Remember the best way to learn any technology is by doing a project.\nBelow are complete details of the course :-\nChapter 1  :- Node and NPM\nChapter 2  :- Running first app & Angulr CLI\nChapter 3  :- VS Code editor.\nChapter 4  :- TypeScript\nChapter 5  :- CLI project folder structure\nChapter 6  :- The config JSON files\nChapter 7  :- ng serve vs ng build\nChapter 8  :- Angular the binding framework\nChapter 9  :- Component and Modules\nChapter 10 :- Expression , Decorators and TemplateURL\nChapter 11 :- Declaration and BootStrap in Modules\nChapter 12 :- The main.ts file for module startup\nChapter 13 :- Index.html and the selector tag\nChapter 14 :- Polyfills\nChapter 15 :- Webpack :- Packaging and deploying\nChapter 16 :- Vendor.js and Runtime.js\nChapter 17 :- Angular File naming Convention\nChapter 18 :- Creating Customer UI\nChapter 19 :- Creating Customer Model\nChapter 20 :- Consuming model in component\nChapter 21 :- ngModel , One way and Two way binding\nChapter 22 :- Expressions\nChapter 23 :- Understanding and Intrepeting Errors\nChapter 24 :- FormsModule\nChapter 25 :- *ngForLoop\nChapter 26 :- package.lock.json and versioning\nChapter 27 :- Using source code of the tutorial.\nChapter 28 :- Thinking Uniform , Thinking Master Pages\nChapter 29:- Creating Angular UI and its components.\nChapter 30 :- Organizing project folders, modules & components.\nChapter 31 :- Masterpage and selector\nChapter 32 :- Grouping components in to Modules.\nChapter 33 :- Understanding UI loading in selector.\nChapter 34 :- Routing and Routing collection\nChapter 35 :- router-outlet and routerLink\nChapter 36 :- RouterModule and loading routes in Angular.\nChapter 37 :- Understanding the flow of Angular with routing.\nChapter 38 :- Performance issues due to eager loading.\nChapter 39 :- Implementing Lazy loading\nChapter 40 :- Dividing project in to self contained Angular modules.\nChapter 41 :- Self contained routes for self contained modules.\nChapter 42 :- loadChildren :- The heart of lazy loading\nChapter 43:- Understanding path structure for folders and loadChildren.\nChapter 44:- forRoot and forChild\nChapter 45:- Multiple Modules , Multiple builds and Multiple outputs.\nChapter 46:- CommonModule for Lazy Loading\nChapter 47:- Seeing the physical separate modules in the \"dist\" folder.\nChapter 48:- Revising Angular architecture with Lazy routing\nChapter 49 :- Validation object model.\nChapter 50 :- Appropriate place to put validations\nChapter 51 :-Formgroup , FormControl , Validators and FormBuilder\nChapter 52 :- Using Angular validation :- The CCC process.\nChapter 53 :- Creating validations\nChapter 54 :- Applying validations to the UI\nChapter 55 :- Checking validation status\nChapter 56 :- ReactiveForms\nChapter 57 :- ngModelOption standalone\nChapter 58 :- Display errors for individual validations.\nChapter 59 :- The dirty flag.\nChapter 60 :- Centralizing validation code for reusability.\nChapter 61: - Definition of a good architecture\nChapter 62: - Concrete classes and tight coupling\nChapter 63: - Provider - provides things to component.\nChapter 64: - Creating providers: - Provide & UseClass\nChapter 65: - Interfaces issues with Angular DI\nChapter 66: - Finally understanding Dependency Injection\nChapter 67: - Seeing the actual fruits of Dependency Injection\nChapter 68: - Centralized and Conditional DI\nChapter 69: - Injector and tokens - Conditionnal DI\nChapter 70: - Dynamic collections\nChapter 71: - Revising Angular DI architecture\nChapter 72 :- Defining a user control\nChapter 73 :- Interactions :- Input, output and event emitters\nChapter 74 :- Creating user control and its components\nChapter 75 :- Creating user control component and importance of selector\nChapter 76 :- The @input decorator\nChapter 77 :- Stters and custom component naming convention\nChapter 78 :- Creating the Grid UI of the user control\nChapter 79 :- Defining output and event emitters\nChapter 80 :- Understanding the user control flow\nChapter 81 :- Importing and running the user control\nChapter 82 :- Debugging and watching the full flow.\nChapter 83 :- Json-server , the fake webserver\nChapter 84 :- Configuring json-server & db.json.\nChapter 85 :- importing and creating  http component object\nChapter 86:-  Making HTTP Post calls and the subscribe method.\nChapter 87 :- Import HTTP Module at the module level.\nChapter 88 :- Implementing DTO( Data transfer objects)\nChapter 89 :- Lambdas and Callback\nChapter 90 :- Angular HTTP Client.\nChapter 91 :- Using HttpClient\nChapter 92 :  Simplicity of HttpClient.\nChapter 93:-  Interceptors in HttpClient\nChapter 94:-  The double data post\nChapter 95 :- Defining the scope of the tutorial.\nChapter 96 :- Using Angular template and its limitation\nChapter 97 :- Respecting individual build and compilation.\nChapter 98 :- MVC wwwroot folder and Angular\nChapter 99 :- Issues with ng serve and integration\nChapter 100 :- Bootstrapping through MVC\nChapter 101 :- Deployurl concept.\nChapter 102 :- Integrating Webapi with Angular Http\nChapter 103 :- Debugging Angular and MVC\nChapter 104 :- Ahh the camel case and pascal case issue\nChapter 105:- Integrating Grunt with Task runner explorer\nChapter 106 :- Grunt configuration using appsettings.json\nChapter 107 :- Prebuild and Postbuild style\nChapter 108 :- Double tooling VS code and Visual studio\nChapter 109 :- Create new project using ng new command.\nChapter 110 :- Copy the code in to newly created projects.\nChapter 111 :- Run ng serve , fix errors http to httpclient\nChapter 112 :- Test and you are all set\nChapter 113 :- Integration testing vs Unit Testing\nChapter 114 :- Black Box vs White Box\nChapter 115 :- Jasmine and Karma\nChapter 116 :- Understanding Jasmine syntaxes , BDD , Describe and it.\nChapter 117 :- BeforeEach,BeforeAll,AfterEach and AfterAll\nChapter 118 :- The TestBed API\nChapter 119 :- Angular loading flow.\nChapter 120 :- Fixture the baseline.\nChapter 121 :- DebugElement , componentInstance and nativeElement\nChapter 122 :- Assertion - expect , tobeTruthy , toEqual\nChapter 123 :- Synching DOM's DetectChanges.\nChapter 124 :- QuerySelectors.\nChapter 125 :- Running Angular test\nChapter 126 :- Writing a complex unit test for the Customer screen",
      "target_audience": [
        "This course is for people who are new to Angular and want to start from basic and go to advanced level."
      ]
    },
    {
      "title": "The Complete Python Bootcamp From Zero to Hero in Python",
      "url": "https://www.udemy.com/course/complete-python-bootcamp/",
      "bio": "Learn Python like a Professional Start from the basics and go all the way to creating your own applications and games",
      "objectives": [
        "You will learn how to leverage the power of Python to solve tasks.",
        "You will build games and programs that use Python libraries.",
        "You will be able to use Python for your own work problems or personal projects.",
        "You will create a portfolio of Python based projects you can share.",
        "Learn to use Python professionally, learning both Python 2 and Python 3!",
        "Create games with Python, like Tic Tac Toe and Blackjack!",
        "Learn advanced Python features, like the collections module and how to work with timestamps!",
        "Learn to use Object Oriented Programming with classes!",
        "Understand complex topics, like decorators.",
        "Understand how to use both the Jupyter Notebook and create .py files",
        "Get an understanding of how to create GUIs in the Jupyter Notebook system!",
        "Build a complete understanding of Python from the ground up!"
      ],
      "course_content": {
        "Course Overview": [
          "Auto-Welcome Message",
          "Course Introduction",
          "Course Curriculum Overview",
          "Why Python?",
          "Course FAQs"
        ],
        "Python Setup": [
          "Command Line Basics",
          "Import Note on the Installation Lectures",
          "Installing Python (Step by Step)",
          "Installing Python on Windows and updated Jupyter Notebook Introduction",
          "Installing Python on Mac and updated Jupyter Notebook Introduction",
          "Running Python Code",
          "Quick Note on how to download the Course Material",
          "Getting the Notebooks and the Course Material",
          "Git and Github Overview (Optional)",
          "Quick Note on the Github Documentation"
        ],
        "Python Object and Data Structure Basics": [
          "Introduction to Python Data Types",
          "Python Numbers",
          "Numbers: Simple Arithmetic",
          "Numbers - FAQ",
          "Numbers Quiz",
          "Variable Assignments",
          "Introduction to Strings",
          "Quick Print Check",
          "Indexing and Slicing with Strings",
          "String Indexing",
          "String Slicing",
          "String Properties and Methods",
          "Strings -FAQ",
          "Strings Quiz",
          "Print Formatting with Strings",
          "Print Formatting FAQs",
          "Print Formatting",
          "Lists in Python",
          "Lists",
          "Lists - FAQ",
          "Lists Quiz",
          "Dictionaries in Python",
          "Dictionaries",
          "Dictionaries - FAQ",
          "Dictionaries Quiz",
          "Tuples with Python",
          "Tuples Quiz",
          "Sets in Python",
          "Sets",
          "Booleans in Python",
          "Sets and Booleans Quiz",
          "I/O with Basic Files in Python",
          "File I/O",
          "Resources for More Basic Practice",
          "Python Objects and Data Structures Assessment Test Overview",
          "Python Objects and Data Structures Assessment Test Solutions"
        ],
        "Python Comparison Operators": [
          "Comparison Operators in Python",
          "Chaining Comparison Operators in Python with Logical Operators",
          "Comparison Operators Quiz"
        ],
        "Python Statements": [
          "If Elif and Else Statements in Python",
          "For Loops in Python",
          "While Loops in Python",
          "Useful Operators in Python",
          "List Comprehensions in Python",
          "Python Statements Test Overview",
          "Python Statements Test Solutions"
        ],
        "Methods and Functions": [
          "Methods and the Python Documentation",
          "Quick Note on Python Versions",
          "Introduction to Functions",
          "def Keyword",
          "Basics of Python Functions",
          "Logic with Python Functions",
          "Tuple Unpacking with Python Functions",
          "Interactions between Python Functions",
          "Overview of Quick Function Exercises #1-10",
          "Quick Check on Solutions Link",
          "Functions #1: print Hello World",
          "Functions #2: print Hello Name",
          "Functions #3 - simple Boolean",
          "Functions #4 - using Booleans",
          "Functions #5: simple math",
          "Functions #6: is even",
          "Functions #7: is greater",
          "*args and **kwargs in Python",
          "Functions #8: *args",
          "Functions #9: pick evens",
          "Functions #10: skyline",
          "Function Practice Exercises - Overview",
          "Function Practice Exercises - Solutions",
          "Function Practice - Solutions Level One",
          "Function Practice - Solutions Level Two",
          "Function Exercise Solutions - Challenge Problem",
          "Lambda Expressions, Map, and Filter Functions",
          "Nested Statements and Scope",
          "Methods and Functions Homework Overview",
          "Methods and Functions Homework - Solutions"
        ],
        "Milestone Project - 1": [
          "Introduction to Warm Up Project Exercises",
          "Displaying Information",
          "Accepting User Input",
          "Validating User Input",
          "Simple User Interaction",
          "First Python Milestone Project Overview",
          "Milestone Project Help",
          "Solution Overview for MileStone Project 1 - Part One",
          "Solution Overview for MileStone Project 1 - Part Two"
        ],
        "Object Oriented Programming": [
          "Object Oriented Programming - Introduction",
          "Object Oriented Programming - Attributes and Class Keyword",
          "Object Oriented Programming - Class Object Attributes and Methods",
          "Object Oriented Programming - Inheritance and Polymorphism",
          "Object Oriented Programming - Special (Magic/Dunder) Methods",
          "Object Oriented Programming - Homework",
          "Object Oriented Programming - Homework Solutions",
          "Object Oriented Programming - Challenge Overview",
          "Object Oriented Programming - Challenge Solution"
        ],
        "Modules and Packages": [
          "Quick note on the PyPi website",
          "Pip Install and PyPi",
          "Modules and Packages",
          "__name__ and \"__main__\""
        ],
        "Errors and Exceptions Handling": [
          "Errors and Exception Handling",
          "Errors and Exceptions Homework",
          "Errors and Exception Homework - Solutions",
          "Update for Pylint Users",
          "Pylint Overview",
          "Running tests with the Unittest Library"
        ]
      },
      "requirements": [
        "Access to a computer with an internet connection."
      ],
      "description": "Become a Python Programmer and learn one of employer's most requested skills of 2023!\n\nThis is the most comprehensive, yet straight-forward, course for the Python programming language on Udemy! Whether you have never programmed before, already know basic syntax, or want to learn about the advanced features of Python, this course is for you! In this course we will teach you Python 3.\nWith over 100 lectures and more than 21 hours of video this comprehensive course leaves no stone unturned! This course includes quizzes, tests, coding exercises and homework assignments as well as 3 major projects to create a Python project portfolio!\nLearn how to use Python for real-world tasks, such as working with PDF Files, sending emails, reading Excel files, Scraping websites for informations, working with image files, and much more!\nThis course will teach you Python in a practical manner, with every lecture comes a full coding screencast and a corresponding code notebook! Learn in whatever manner is best for you!\nWe will start by helping you get Python installed on your computer, regardless of your operating system, whether its Linux, MacOS, or Windows, we've got you covered.\nWe cover a wide variety of topics, including:\nCommand Line Basics\nInstalling Python\nRunning Python Code\nStrings\nLists\nDictionaries\nTuples\nSets\nNumber Data Types\nPrint Formatting\nFunctions\nScope\nargs/kwargs\nBuilt-in Functions\nDebugging and Error Handling\nModules\nExternal Modules\nObject Oriented Programming\nInheritance\nPolymorphism\nFile I/O\nAdvanced Methods\nUnit Tests\nand much more!\nYou will get lifetime access to over 100 lectures plus corresponding Notebooks for the lectures!\n\nThis course comes with a 30 day money back guarantee! If you are not satisfied in any way, you'll get your money back. Plus you will keep access to the Notebooks as a thank you for trying out the course!\nSo what are you waiting for? Learn Python in a way that will advance your career and increase your knowledge, all in a fun and practical way!",
      "target_audience": [
        "Beginners who have never programmed before.",
        "Programmers switching languages to Python.",
        "Intermediate Python programmers who want to level up their skills!"
      ]
    },
    {
      "title": "The Complete Job Control Language (JCL) Course.",
      "url": "https://www.udemy.com/course/the-complete-job-control-language-jcl-course/",
      "bio": "Mainframe JCL Procedures, SORT, GDGs, Libraries, Utilities such as IEBCOPY, IEBGENER etc are explained in detail.",
      "objectives": [
        "You will learn SORT in JCL",
        "You will be able to code Utilities of JCL",
        "You will code 50+ JCL programs",
        "You will code Procedures in JCL",
        "You will be able to Install Mainframe Emulator on your Personal Computer",
        "You will be able to submit programs to the Mainframe Computer",
        "You will be able to troubleshoot JCL programs on Mainframe Computer",
        "You will be able to create and edit GDGs",
        "You will understand JOB Processing on Mainframes",
        "You will be able to create and edit different types of datasets",
        "You will be able to code and understand Libraries in JCL",
        "You will also get all the presentations used in the course so you wont have to take notes"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Course Overview",
          "JCL Programs used in the course"
        ],
        "What is JCL?": [
          "Batch Processing",
          "JCL Overview",
          "JCL syntax"
        ],
        "Statements": [
          "JOB statement",
          "EXEC statement",
          "DD statement",
          "Please leave a review for my course."
        ],
        "Execution of JCL program": [
          "Lets run our first JCL",
          "Job Processing",
          "Return Codes",
          "SDSF in z/OS",
          "OUTLIST in MVS"
        ],
        "Defining Datasets": [
          "Create a PS dataset",
          "Create a PDS dataset",
          "Delete a PS/PDS dataset",
          "Create a PS and PDS dataset in one JCL"
        ],
        "Generation Data Groups (GDG)": [
          "GDG Overview",
          "Create a GDG",
          "Alter a GDG",
          "Referencing a GDG",
          "Delete a GDG generation",
          "Delete a GDG"
        ],
        "Libraries": [
          "JOBLIB",
          "STEPLIB",
          "JCLLIB"
        ],
        "Procedures": [
          "InStream Procedures",
          "Symbolic Parameters",
          "Cataloged Procedure and Nested Procedure",
          "SET Statement",
          "Overriding Datasets"
        ],
        "Conditional processing in JCL": [
          "COND parameter",
          "COND parameter without any Step name",
          "COND parameter in the JOB statement",
          "COND=(0,LE) ------ Never execute a step",
          "COND=(4095,LT) ------ Always execute a step",
          "COND=ONLY and COND=EVEN",
          "IF statement",
          "IF ELSE statement"
        ],
        "================ SORT ==========================": [
          "IMDB list",
          "Sort syntax",
          "Sort Multiple fields",
          "Copy a dataset"
        ]
      },
      "requirements": [
        "You have to arrange your own Mainframe ID. Mainframe ID will not be provided with the course.",
        "You should know what a Mainframe is.",
        "You should be aware of TSO/ISPF commands on mainframes."
      ],
      "description": "Note: You have to arrange your own Mainframe ID. Mainframe ID will not be provided with the course.\n\n\nWelcome to the most elaborate and detailed course about Mainframe JOB CONTROL LANGUAGE (JCL) on the whole internet.\n\n\nThis course has been the bestseller and top reviewed course about JCL on Udemy. I have exclusively built this course for UDEMY platform.\n\n\nYou will get:\nJCL from scratch to advanced level.\nLectures in whiteboard animation format.\n50+ JCL programs along with code. You can download these programs as well.\nMonthly updates on new programs added to the course.\nProfessionally made subtitles(transcripts) in English. There are translated subtitles in 20 languages as well.\n\n\nEnglish, Spanish, Portuguese, Simplified Chinese, Hindi, French, German, Dutch, Irish, Turkish, Vietnamese, Arabic, Bengali, Dutch, Hebrew, Italian, Japanese, Korean, Russian and Thai.\n\n\n*****For this course I have made some whiteboard animation videos to make learning easy***********\nThe lectures which have whiteboard animation are: BATCH PROCESSING, JCL Overview.\nBecause of this, you can learn these topics easily.\nI have also attached all the presentations in this course so you do not have to take notes while watching the lectures.\nI also have attached all the JCL programs used in this course.\n******************************************************************************************************************\nThis is a practical JCL tutorial on a Mainframe computer. You have a basic understanding of Mainframe systems but not sure how to start coding? This course will teach you what you need to know. This is the first step for anyone who wants to start coding Programs on Mainframe systems so you can start a new career as a Mainframe Professional.\n\nThis Course is DIRECT and TO THE POINT.\nOver 8+ hours of video content, with presentations and code used in the course.\nI also UPDATE this course periodically to include even more Videos and Projects. New Resources and Articles are also added.\nIf you ever have any questions please feel free to message me directly and i will do my best to get back to you as soon as possible!\n____________________________________________________________________________________________________________________\nBuild a foundation in Mainframe with this tutorial.\nYou will Learn:\nWhat a JCL is.\nThe various Statements and how to code them in a JCL Program.\nRunning and diagnosing JCL programs on a Mainframe\nProcedures used in JCL\nDifferent utilities of JCL\nGeneration Data Group\nParameters used in JCL\nConditional processing in JCL\nVarious Utilities used in JCL\nSORT\nand much more.......\nMainframe is extensively used in large corporations which deal with huge amount of data every day. Over 70% of the global Fortune 500 companies use Mainframe to run their business for everything from cloud to mobile to big data and analytics. Now, there are 1.1 million customer transactions per second on Mainframes compared with just 40,000 searches on Google per second. IBM is the leading manufacturer of the Mainframe Systems.\nContent and Overview  Through this course, you’ll learn about the JOB Control Language on the Mainframe system.\nStarting with an overview of the JCL, this course will take you through the types of statements used in JCL.\nWith these basics mastered, the course will take you through the different operation that you can do on a dataset, will introduce the GDG and its use in the Mainframe systems.\nYou will then learn SORT using IMDB dataset.\nUpon completion you will be literate in JOB Control Language, understand how a JCL program is coded and executed on a Mainframe.",
      "target_audience": [
        "IT professionals who want to make a career in Mainframes.",
        "Mainframe Professionals who want to brush up their knowledge about JCL.",
        "JCL revision before your interview"
      ]
    },
    {
      "title": "Master the Art of Writing Clean Code in C#",
      "url": "https://www.udemy.com/course/clean-code-csharp/",
      "bio": "Learn how to write clean and maintainable code in C# as bequeathed by Uncle Bob. Learn how to perform refactoring in C#.",
      "objectives": [
        "Give best names for functions, variables and other API members",
        "Understand and rely on programming metaprinciples such as DRY, YAGNI, KISS and others",
        "Write clean functions",
        "Detect common architectural smells and refactor the problems",
        "Apply principles of functional programming",
        "Apply Dependency Injection and avoid common DI-related smells",
        "Write clean unit tests",
        "Practice Test-Driven Development"
      ],
      "course_content": {
        "Before Taking the Course": [
          "How to Ask Questions",
          "Download Source Code",
          "Join .NET Community of Students",
          "Motivation for Writing Clean Code"
        ],
        "Programming Metaprinciples": [
          "Outline",
          "DRY - Don't Repeat Yourself",
          "KISS - Keep it Simple, Stupid",
          "YAGNI - You Ain't Gonna Need It",
          "Separation of Concerns (SoC)",
          "Command-Query Separation Principle (CQS)",
          "Principle of Least Astonishment",
          "Encapsulation and Information Hiding",
          "Conclusion"
        ],
        "Naming API Members": [
          "Outline",
          "General Principles of Naming",
          "About Naming Once Again",
          "Naming Conventions in .NET",
          "Conclusion"
        ],
        "Writing Clean Functions": [
          "Outline",
          "Variable Declaration on the Top",
          "Magic Numbers",
          "\"Stringly\" Typed Smell",
          "Property VS Method",
          "Implementing Parameters",
          "Too Many Parameters",
          "Too Long Methods",
          "Creational Patterns VS Constructors",
          "\"Extract Method\" Refactoring",
          "Simplifying Complex Logic",
          "Sequence of Arguments",
          "Guard Clauses and Early Returns",
          "Poor Conditional Clauses",
          "Output Parameters",
          "Comments",
          "Prefer Positive if-Statements",
          "Conclusion"
        ],
        "Common Architectural Design Smells": [
          "Outline",
          "Primitives Obsession",
          "Violation of Law of Demeter",
          "Temporal Coupling",
          "Refactoring to \"Template Method\" Design Pattern",
          "Refactoring to \"Strategy\" Design Pattern",
          "Refactoring to \"State\" Design Pattern",
          "Conclusion"
        ],
        "Functional Programming: Extendibility and Immutability": [
          "Outline",
          "Programming Paradigms",
          "Defining Functional Programming",
          "Functions, Functions, and Functions Again",
          "Why Functional Programming?",
          "Immutability. Intro",
          "Immutability of Structures",
          "Temporal Coupling and Immutability",
          "Pipelining",
          "Extending IDisposable",
          "General Extensions",
          "Extending StringBuilder",
          "Abusing Extension Methods",
          "Builder Design Pattern. Immutability and Testability",
          "Errors and Functional Programming",
          "Errors Handling: Pipelining by Method Chaining",
          "Conclusion"
        ],
        "DI-Related Anti-Patterns & Refactorings": [
          "Outline",
          "Control Freak",
          "Hidden Dependencies and Service Locator",
          "Temporal Coupling and Constructor Injection",
          "Constructor Over-Injection",
          "Ambient Context",
          "Facade Service",
          "Property Injection Means Bastard Injection?",
          "Cyclic Dependencies",
          "Conclusion"
        ],
        "Clean Unit Tests": [
          "Outline",
          "Singletons and Static Classes",
          "Too Many Interfaces",
          "Removing Interfaces",
          "Testing Trivial Code",
          "Test Single Concern",
          "More Unit Testing Best Practices",
          "Conclusion"
        ],
        "Clean Code and TDD": [
          "Outline",
          "What is TDD?",
          "Red / Green / Refactor",
          "Three Laws of TDD",
          "Reading Roman Numerals",
          "Continuous Testing",
          "Tic-Tac-Toe (Crosses and Noughts)",
          "Conclusion",
          "BONUS Lecture"
        ]
      },
      "requirements": [
        "You should already be familiar with the basics of C#"
      ],
      "description": "Learn how to design and implement types in C# so that the other developers won't hate you when using one of the types developed by you. It means you are going to learn how to write code of the high quality: readable, understandable and reliable.\nImprove your knowledge in object-oriented programming in the context of clean coding and building types of high quality.\nLearn how to give the best names for API members\nLearn all the tricks related to writing clean functions\nAvoid common architectural smells. Get rid of unpleasant smells\nApply principles of functional programming: achieve immutability, remove side effects, extend types\nAvoid smells related to dependency injection\nWrite cleaner unit tests\nPractice Test-Driven Development\nFoundations of building object-oriented infrastructures\nDespite the fact that C# is a very rich on features language, it's very common to see poorly designed and implemented types in a real world. In fact, C# is one of the richest on features language among object-oriented languages in the world nowadays. But with great power comes great responsibility. It's challenging  to use all those features in a right way.\nYou probably have already heard the following well-known statement: most code sucks. Well, this course is all about how to produce code which doesn't suck.\nOwning skills of producing a well-designed and well-implemented types is the prerequisite for the other developers to treat you as a real professional.\nContent and Overview\nThis course is aimed at all the C# developers, from beginners to seniors. Topics which are covered in the course are relevant for all kinds of C# developers since all developers design and implement APIs. The topics complexity is very different. There are plenty of very simple topics, and at the same time, there are topics which require from you a solid C# background. There are plenty of code examples throughout this course, so you will learn both theoretical and practical material.\nThe course covers the following topics:\nMeta Principles: DRY, KISS, YAGNI, SoC, CQS, PoLA, Encapsulation\nHow to give better names for API members and what naming conventions exist in the .NET platform and suited for C#\nCommon problems encountered by C# developers in the process of designing and implementing APIs: classes vs structures, creational patterns vs constructors,  poor naming, excessively long methods, output parameters and so on.\nCommon Architectural Design Smells such as Primitive Obsession, Hidden Dependencies, Violation of Law of Demeter and other.\nFunctional Programming: immutability, temporal coupling, pipelining, extending IDisposable, Builder Design Pattern, abusing extension methods, dealing with errors\nDI-related anti-patterns: control freak, hidden dependencies, temporal coupling, ambient context, facade service, bastard injection, cyclic dependencies\nClean Unit Tests: singletons and static classes, excessive number of interfaces, testing trivial code, testing of a single concern, different best practices\nPracticing TDD: definition, 3 laws, parsing roman numerals, continuous testing, implementing Tic-Tac-Toe\nThe list is far from being complete. The course covers a great number of topics. Enroll and start Mastering the Art of Writing Clean Code in C#!\n------------------------------------------------------------\nKeywords related to the course:\nC# Clean Code\nC# Best Practices\nAPI in C#\nBuilding API in C#\nClean Code in C# tutorial\nRefactoring",
      "target_audience": [
        "Beginner and intermediate level C# developers"
      ]
    },
    {
      "title": "Python Mega Course : Go Beginner to Expert in Python3",
      "url": "https://www.udemy.com/course/complete-python-bootcamp-expert-course/",
      "bio": "Python Programming Beginner to Advanced. MongoDB, SQLite, List, Tuple , OOP, Datastructure etc",
      "objectives": [
        "Learn to use udemy python professionally, learning both Python2 and Python3!",
        "Learn advanced features, like the collections module and how to work with Pymongo!",
        "list slice, Dictionary, methods, dictionary append",
        "List",
        "Go from Beginner to Advanced in Python Programming by learning all of the basics to Object Orientated Programming.",
        "Tuple",
        "if , Else ,Else if , Loop , While Loop",
        "Learn to use Object Oriented Programming with classes!",
        "Gain knowledge in regard to general programming concepts",
        "Have a fundamental understanding of the Python programming language.",
        "Database with Sqlite and MongoDb",
        "Use Pycharm to write their Python programs",
        "Data Structures",
        "Learn advanced features, like the collections module"
      ],
      "course_content": {
        "Getting Start With Python": [
          "Introduction",
          "Python3 Vs Python2",
          "How this Course is Structured",
          "How to Install Python On windows",
          "How to install Python on Linux",
          "How to install Python On Mac",
          "Run a Basic Syntax with Complete Understanding on Print Function",
          "Coding Exercise 1",
          "Coding Exercise 2",
          "Variables & multiple assignment of variable - Don't Miss this Concept",
          "Coding Exercise 3",
          "Variable Declaration",
          "Reassigning Variables",
          "Swap variables",
          "Coding Exercise 4",
          "Scope Variable (Local and global variables in Python)",
          "Assignment No 1",
          "Quiz No 1",
          "What is Difference Between a program and a Script",
          "The Assert Statement",
          "Strings you need to Grab complete concept",
          "Data Types In Python Major Concept",
          "Coding Challenge #5",
          "What is Len Function in String",
          "Assignment no 2"
        ],
        "Hands on Operators and other Key Concepts": [
          "Operators ( Arithmetic Operator in Python)",
          "Operators (Assignment Operator in Python)",
          "Write the Equation to Calculate an Average in one line with Operator",
          "Assignment No 3",
          "Using of Assignments operator and Shorthand",
          "Comparison Operators",
          "Equal/Not Equals Operators",
          "Logical Operators in Python",
          "IS and ISNOT in Python",
          "Inverting boolean in python",
          "Bitwise Operators",
          "Assignment No 4"
        ],
        "Order! Order! (Decision Making and Loops in Python)": [
          "If Statement",
          "Else Statements",
          "Elif Statements in Python",
          "Assignment No 5",
          "Nested If Else Statement",
          "Decision Making",
          "For loop in python",
          "While loop in python",
          "Break,Continue and Pass Statement",
          "Nested Loop",
          "Assignment No 6",
          "Loops With Else block of Code",
          "Fibonacci Series in Python",
          "Coding Challenge #6"
        ],
        "Functions in Python": [
          "What is Function and How to Define a function",
          "Calling a function",
          "Function arguments and Return Vs Print",
          "Nested Functions",
          "What is Module",
          "Coding Challenge #7",
          "Assignment No 7"
        ],
        "String Indexing and Slicing And String": [
          "Regular Indexes",
          "Negative Indexes",
          "Slices",
          "Remove the Character of index value",
          "Append In Python",
          "String Format Method",
          "String Indexing and Slicing",
          "neutralize_uppercase",
          "Max character",
          "Taking a User Input",
          "Coding Exercise",
          "Coding Exercise"
        ],
        "Collections in Python": [
          "Introduction to Python Lists",
          "Change List Item Value",
          "Mutable List",
          "How to write list Literally vs Programmatically",
          "Check if Item exists in list",
          "Introduction to the Tuples",
          "Access Tuple Item",
          "Delete Tuple",
          "Iterating Lists",
          "Indexing and Slicing on Tuples",
          "Using list as a Stack",
          "Using List as a Queue",
          "Growing Lists (Shuffle List & Concatenation )",
          "Introduction to Dictionaries",
          "Updating a Dictionary",
          "Concatenate two Dictionaries",
          "Sort a Dictionary",
          "Delete Dictionary Elements",
          "Length of a Dictionary",
          "Key exists in Dictionary",
          "Introduction to Sets",
          "Convert dictionary into list",
          "Using Pop Method delete Item From dictionary",
          "Tree in Python",
          "Nested Loop Using List"
        ],
        "Exceptions in Python": [
          "Introduction to Exceptions",
          "Handling Exceptions",
          "Raising Exceptions",
          "Try Except and Finally",
          "Breaking Math operation and use ZeroDivisionError"
        ],
        "Object Oriented Programming In Python": [
          "Introduction To OOP and Key of OOP",
          "Classes and Objects",
          "Python Constructor",
          "Initializing the Object",
          "Run a Simple Empty Class Example",
          "instance method with classes and object",
          "Object Methods",
          "Self Parameter",
          "Delete Object and Property",
          "Accessing Class Attributes from instances",
          "Inheritance",
          "Multiple Child Classes Inheritance",
          "Multilevel Inheritance",
          "Multiple Inheritance",
          "Method Overriding",
          "Python Encapsulation",
          "Polymorphism",
          "Data Abstraction",
          "Setters and Getters",
          "Super Keyword"
        ],
        "The Python Knowledge you need To know": [
          "Lambda Function",
          "Dictionary Comprehension",
          "Map",
          "Filter",
          "Reduce",
          "Iterator"
        ],
        "SQLite Database Programming In Python": [
          "Creating a Database and Database Connection",
          "Python Database Create Table",
          "Python Database Insert Operation",
          "Python Database READ Operation",
          "Python Database Update Operation",
          "Python Database DELETE Operation",
          "Python Database Limit"
        ]
      },
      "requirements": [
        "Basic IT knowledge",
        "Access to a computer with an internet connection."
      ],
      "description": "Welcome to the learn Udemy Python Bootcamp: Go Beginner to Expert in Python3!\nThis is the most comprehensive, straight-forward, course for the Python programming language on Udemy! Whether you have never programmed before, already know basic syntax, or want to learn about the advanced features of Python, this course is for you In this course we will teach you Python 3.\nIf you want to learn Udemy Python tutorial for beginners Python is the most in-demand language. It is used for Data Science, Machine Learning Python, Python Django, NLP (Natural language processing), AI (Artificial Intelligence), Data Mining, GUI-Based Desktop Programs, Develop Games and 3D Graphics With Python and Network Programming. So this course is best for your to shine your Skills in python. Take this course and learn everything that you need to learn in python.\n\nPlease Read Curriculum Before Taking The Course:\nRun a Basic Syntax with Complete Understanding on Print Function\nVariables & multiple assignments of variable\nVariable Declaration\nReassigning Variables\nSwap variables\nScope Variable\nThe Assert Statement\nStrings\nData Types In Major Concept\nWhat is Len Function in String\nArithmetic Operator\nAssignment Operator\nComparison Operators\nEqual/Not Equals Operators\nLogical Operators\nIs and Isnot\nInverting boolean\nBitwise Operators\nIf Statements\nElse Statements\nElif Statements\nNested If Else Statement\nFor loop\nwhile loop\nBreak, Continue, and Pass Statement\nNested Loop\nLoops With Else block of Code\nFibonacci Series i\nWhat is Function and How to Define a function\nCalling a function\nFunction arguments and Return Vs Print\nNested Functions\nWhat is Module\nRegular Indexes\nNegative Indexes\nSlice\nlist slice\nRemove the Character of the index value\ndictionary append\nString Format Method\nString Indexing and Slicing\nDictionary methods\nneutralize_uppercase\nMax character\nTaking a User Input\nLists\nChange List Item Value\nMutable List\nHow to write list Literally vs Programmatically\nCheck if Item exists in list\nTuples\nAccess Tuple Item\nDelete Tuple\nIterating Lists\nIndexing and Slicing on Tuples\nUsing list as a Stack\nUsing List as a Queue\nGrowing Lists (Shuffle List & Concatenation )\nDictionaries\nUpdating a Dictionary\nConcatenate two Dictionaries\nSort a Dictionary\nDelete Dictionary Elements\nLength of a Dictionary\nKey exists in Dictionary\nIntroduction to Sets\nConvert dictionary into a list\nUsing Pop Method delete Item From the dictionary\nTree in Python\nNested Loop Using List\nIntroduction to Exceptions\nHandling Exceptions\nRaising Exceptions\nTry Except and Finally\nBreaking Math operation and use ZeroDivisionError\nIntroduction To OOP and Key of OOP\nClasses and Objects\nConstructor\nInitializing the Object\nRun a Simple Empty Class Example\ninstance method with classes and object\nObject Methods\nSelf Parameter\nDelete Object and Property\nAccessing Class Attributes from instances\nInheritance\nMultiple Child Classes Inheritance\nMultilevel Inheritance\nMultiple Inheritance\nMethod Overriding\nEncapsulation\nPolymorphism\nData Abstraction\nSetters and Getters\nSuper Keyword\nLambda Function\nDictionary Comprehension\nMap\nFilter\nReduce\nDatabase Sqlite:\nCreating a Database and Connection\nCreate Table\nInsert Operation\nREAD Operation\nUpdate Operation\nDELETE Operation\nLimit\nMongoDB:\nInstall MongoDB\nOverview on Creating Database in CMD\nConnection\nCreate Collection\nInsert Document\nFind Operation\nQuery\nUpdate Operation\nDelete Operation\nlimit Operation\nDrop The Collection\nPlease feel free to explore the curriculum and watch some of the free preview videos!\nYou will get lifetime access & 30-day money-back guarantee. If you are not satisfied in any way, you'll get your money back.\nSo what are you waiting for?  Start learning With Funky Programmer Today. Advance your career and increase your knowledge in a practical way!",
      "target_audience": [
        "Anybody who is interested in learning Python programming",
        "Programmers switching languages to Python3."
      ]
    },
    {
      "title": "Python 3: Deep Dive (Part 1 - Functional)",
      "url": "https://www.udemy.com/course/python-3-deep-dive-part-1/",
      "bio": "Variables, Functions and Functional Programming, Closures, Decorators, Modules and Packages",
      "objectives": [
        "An in-depth look at variables, memory, namespaces and scopes",
        "A deep dive into Python's memory management and optimizations",
        "In-depth understanding and advanced usage of Python's numerical data types (Booleans, Integers, Floats, Decimals, Fractions, Complex Numbers)",
        "Advanced Boolean expressions and operators",
        "Advanced usage of callables including functions, lambdas and closures",
        "Functional programming techniques such as map, reduce, filter, and partials",
        "Create advanced decorators, including parametrized decorators, class decorators, and decorator classes",
        "Advanced decorator applications such as memoization and single dispatch generic functions",
        "Use and understand Python's complex Module and Package system",
        "Idiomatic Python and best practices",
        "Understand Python's compile-time and run-time and how this affects your code",
        "Avoid common pitfalls"
      ],
      "course_content": {},
      "requirements": [
        "Basic introductory knowledge of Python programming (variables, conditional statements, loops, functions, lists, tuples, dictionaries, classes).",
        "You will need Python 3.6 or above, and a development environment of your choice (command line, PyCharm, Jupyter, etc.)"
      ],
      "description": "Hello!\nThis is Part 1 of a series of courses intended to dive into the inner mechanics and more complicated aspects of Python 3.\nThis is not a beginner course!\nIf you've been coding Python for a week or a couple of months, you probably should keep writing Python for a bit longer before tackling this series.\nOn the other hand, if you've been studying or programming in Python for a while, and are now starting to ask yourself questions such as:\nI wonder how this works?\nis there another, more pythonic, way, of doing this?\nwhat's a closure? is that the same as a lambda?\nI know how to use a decorator someone else wrote, but how does it work? How do I write my own?\nwhy do some boolean expressions not return a boolean value? How can I use that to my advantage?\nhow does the import mechanism in Python work, and why am I getting side effects?\nand similar types of question...\nthen this course is for you.\n\n\nTo get the most out of this course, you should be prepared to pause the coding videos, and attempt to write code before I do! Sit back during the concept/theory videos, but lean in for the code videos!\n\n\nPlease make sure you review the pre-requisites for this course (below)  - although I give a brief refresh of basic concepts at the beginning of the course, those are concepts you should already be very comfortable with as you being this course.\nIn this course series, I will give you a much more fundamental and deeper understanding of the Python language and the standard library.\nPython is called a \"batteries-included\" language for good reason - there is a ton of functionality in base Python that remains to be explored and studied.\nSo this course is not about explaining my favorite 3rd party libraries - it's about Python, as a language, and the standard library.\nIn particular this course is based on the canonical CPython. You will also need Jupyter Notebooks to view the downloadable fully-annotated Python notebooks.\nIt's about helping you explore Python and answer questions you are asking yourself as you develop more and more with the language.\n\n\nIn Python 3: Deep Dive (Part 1) we will take a much closer look at:\nVariables - in particular that they are just symbols pointing to objects in memory (references)\nNamespaces and scopes\nPython's numeric types\nPython boolean type - there's more to a simple or statement than you might think!\nRun-time vs compile-time and how that affects function defaults, decorators, importing modules, etc\nFunctions in general (including lambdas)\nFunctional programming techniques (such as map, reduce, filter, zip, etc)\nClosures\nDecorators\nImports, modules and packages\nTuples as data structures\nNamed tuples\n\n\n\n\nCourse Prerequisites\nThis is an intermediate to advanced Python course.\nTo have the full benefit of this course you should be comfortable with the basic Python language including:\nvariables and simple types such as str , bool , int  and float  types\nfor  and while  loops\nif...else...  statements\nusing simple lists , tuples , dictionaries  and sets\ndefining functions (using the def  statement)\nwriting simple classes using the class  keyword and the __init__  method, writing instance methods, creating basic properties using @property decorators\nimporting modules from the standard library (e.g. import math)\n\n\nYou should also:\nhave Python 3.6 (or higher) installed on your system\nbe able to write and run Python programs using either:\nthe command line, or\na favorite IDE (such as PyCharm),\nhave Jupyter Notebooks installed (which I use throughout this course so as to provide you fully annotated Python code samples)",
      "target_audience": [
        "Anyone with a basic understanding of Python that wants to take it to the next level and get a really deep understanding of the Python language and its data structures.",
        "Anyone preparing for an in-depth Python technical interview."
      ]
    },
    {
      "title": "Java Programming Masterclass: Learn Java From Scratch",
      "url": "https://www.udemy.com/course/java-programming-course/",
      "bio": "Java Programming For Beginners, Learn Java From Scratch, Become A Java Developer Learning Java Right From The Basics.",
      "objectives": [
        "Gain Essential Skills To Apply For Junior Java Developer Positions",
        "Learn Java Programming Right From the Basics Like Accepting User Input, Variables, Data Types and more",
        "Be Able To Answer Java Developer Interview Questions",
        "Learn, Understand & Implement How Object Oriented Programming Works In Java & Learn The OOP Way Of Solving Programming Problems",
        "Learn How To Manipulate Strings In Java Using The String Class & String Methods, Build A Password Validator, Frequency Counter & Find & Replace Program",
        "Solve Complex Coding Challenges Based on Real World Applications",
        "Learn Java Collections Like Array List, Linked List, Hash Set & Tree Set",
        "Learn How to Use Access Specifiers as Public, Private & Protected To Regulate Access To Classes",
        "Learn About Java Collections Framework, ArrayList, Linked List, HashSet, Linked HashSet, TreeSet Along With Their Associated Methods",
        "Learn Lambda Expressions, Block Lambdas & Generic Functional Interfaces",
        "Learn & Implement Generics, Generic Methods, Generics With Multiple Parameters & Generic Bounded Types",
        "Learn & Understand How Multithreading Works In Java, Create a New Thread, Reference Main Thread & Life Cycle of a Thread"
      ],
      "course_content": {},
      "requirements": [
        "No prior programming experience is required"
      ],
      "description": "The Complete Java Masterclass: Learn Java From Scratch\nHere Is What You Get By Enrolling In This Course:\nWord-By-Word Explanation: In the entire course, I explain each line of code, without skipping a single line of code.\nAwesome Quality Content: Over 16+ hours of HD Videos.\nWell Structured & Easy To Learn: Course has been specially designed to make it easy for the students to learn Java in a simple manner.\n24 X 7 Support: I will always be there to guide you in your journey to become Python expert.\n\n\nHere Is Everything You Will Learn In This Complete Course:\nIn this hands-on course, you will learn Java right starting from scratch to the level where you can write complex Java programs using concepts like OOP, Inheritance, Interfaces, Generics etc.\nThis course will teach you Java right from scratch from a very basic level and will gradually move you towards more advanced topics.\nIn addition to the concepts taught, this course also has specially designed Practice Examples which will challenge you and make you think and test what you have learned.\n\n\nThe Complete Course is divided into 12 Major sections.\nHere is a brief description of what you will learn in each section.\n\n\nSection 1: Installing required tools.\nIn this section we will learn how to download and install the required tools and setup the development environment to start programming in Java.\n\n\nSection 2: Data types, Arrays & Accepting user input.\nIn this section we will learn about the different types of data types in Java. We will learn about primitive and non-primitive data types in Java and also how they are different from each other. In primitive data types we will learn about int, char, float & boolean. In case of the non-primitive data types, we will cover Arrays. In addition to data types, we will also learn about the \"Scanner\" class which allows us to accept data from the user via the input console. We also learn how to create a very interesting program for calculating interest.\n\n\nSection 3: Conditional & Loops.\nIn this section we will broadly cover two major topics i.e conditionals & loops. We will start off with an introduction to the \"if\" conditional statement and will learn how program flow can be changed using the conditional statement. Before writing the code for the conditional \"if\" we first in depth about how exactly the conditional statements work internally. We then take a coding example to understand the if statement and also learn about how we can nest together multiple \"if\" statements.\nWe then learn about the switch case which is also a conditional which can be used to alter the flow of execution of a program. After which we move ahead to learn about logical operators which play a major role in conditionals and in deciding the flow of execution of a program. We cover logical \"AND\" & \"OR\" operators in Java and use them with conditionals.\nNext we learn about loops, the for and the while loop which allow us to iterate or repeat a set of code multiple number of times. We also learn how to use these loops to iterate through an array to access individual array elements. We also learn about a special for loop called as the enhanced for loop which can also be used to iterate an array.\nNow that we know how to use loops to iterate arrays, we now dive deeper into multi-dimensional array. We also write a Java program to find odd & even numbers from a given array, we perform this task using a combination of conditionals, arrays & loops.\nTo further strengthen the concepts we learned, we also have a set of challenging practice examples at the end of this section.\nSection 4: Object Oriented Programming.\nOOP is the heart and code of Java and hence in this section we spend a great deal of time to understand and learn Object Oriented Programming in Java. We start off by learning what exactly does OOP mean and how the OOP methodology works. We then learn about how to create objects and classes in Java and see how objects are created internally.\nWe then learn about class methods and learn their significance in OOP. We write different methods, make methods return values and also learn how to create class methods that accept parameters. After which we learn about constructors which help us to initialise classes in Java and also learn how to create parametrised constructors.\nWe then move on to learn the \"this\" keyword in Java and it's significance, we take an example to learn how \"this\" keyword can be used to access instance variables and class methods. We then learn about method overloading and constructor overloading and take an example to overload class methods in Java.\nWe then learn about access modifiers in Java and use them in conjunction with class attributes and methods. We learn about access modifiers such as public, private & protected and learn in depth about how they allow certain part of the code to be shared and to be kept hidden.\nUp next, we learn about inheritance which is another most important features of Java. We learn how to make a class inherit attributes and methods of other classes using the extends keyword. We just don't cover the regular inheritance but also cover Hierarchical and Multi-level inheritance as well.\nMarching ahead we learn about method overriding and learn how to override methods form the parent class in Java. We also learn how to prevent method overriding using the \"final\" keyword.\n\n\nSection 5: Exception handling.\nIn this section we learn, what are exceptions? How exceptions can be thrown, caught & handled. We learn how to use try blocks to enclose the exception prone code such that we can handle an exception when it occurs. We will also learn how to nest multiple try blocks inside each other to catch multiple exceptions in a given program. Apart from this we also learn how to create our very own custom exceptions and also how to throw them when needed.\nThis section is also backed by a solid set of practice example, one to handle invalid user ID and other one to handle negative bank deposits.\n\n\nSection 6: Java I/O\nThis section deals with the basic I/O operations in Java i.e reading input from user, displaying output to the user, reading from files, writing to files etc. In this section we will cover a couple of classes from the Java I/O package and also their methods which allow us to perform I/O operations. We start off by learning how Java I/O works and then learn about the BufferedReader class which is used to accept user input and the PrintWriter class used to display the output to the user. We will also learn how to read and write data to the files using the associated classes. At the end, we write a program which can store data into a file so that even if the program execution ends, the data would still be preserved in the file.\n\n\nSection 7: Strings\nThis section is all about string class and its methods. String is one of the most widely used data structure in Java and hence we learn and understand various string methods. Some of the string method which will be covered in this section are length, charAt, getChar, toCharArray, equals, regionMatches, substring, concat, toUpperCase, toLowerCase.\nIn addition to this we also learn about the StringBuffer class as well which has the exact same methods as the string class but is immutable.\nThis section also includes a challenging set of practice examples like a password length validator, frequency counter, password checker & a find and replace program.\n\n\nSection 8: Packages & Interfaces.\nWe will learn about what are Packages in Java, why they are required and how to create and use them. We will also learn how access modifiers can be used with packages to prevent access to certain classes and its methods. We also learn about interfaces, how they are created and why they are required.\nAs a practice example we will build a mini banking software that makes use of interfaces to impose banking rules.\n\n\nSection 9: Java collections.\nWe learn what are Java collections, what is an ArrayList, how to implement an ArrayList and also learn multiple ArrayList methods which allow us to add items or objects to the ArrayList and manipulate them. We will also learn about LinkedList and learn how to create a LinkedList and use LinkedList methods to manipulate items inside a LinkedList. In a similar way we also learn about List interface, HashSet, LinkedHashSet & TreeSet along with their respective methods.\n\n\nSection 10: Lambda Expressions.\nIn this section we cover lambda expressions and its usage, we will learn how to write a lambda expression in Java along with a functional interface. We will also learn how to enclose a chunk of code into lambdas using block lambdas. We will also learn about using generic functional interface and how to pass arguments to a lambda expression.\n\n\nSection 11: Generics.\nThis section covers generics in java, we will first start off with an introduction to generics and then will actually implement generics using a coding example. We will learn how to add multiple parameters to a generic, the different generic methods and bounded type generics.\n\n\nSection 12: Multithreading.\nMultithreading is another important concept in the Java programming language. In this section we study multithreading in detail. We will learn what is a thread, what is a life cycle and different stages of a thread. We will learn how to reference and access the main thread in a Java program and how to manipulate it. We will also learn about different ways to create a thread in Java i.e using the runnable interface and using a thread class. We will also create multiple threads and observe how they behave and execute in a multithreaded environment.\nTo conclude we will also learn about a couple thread methods such as the join and the yield method which can be performed on a thread.\n\n\n\n\nSo let's begin the journey of becoming an expert Java Programmer.\nIn addition to the Udemy 30-day money back guarantee, you have my personal guarantee that you will love what you learn in this course. If you ever have any questions please feel free to message me directly and I will do my best to get back to you as soon as possible!\n\n\nMake sure to enrol in the course before the price changes.\nTake yourself one step closer towards becoming a professional Java developer by clicking the \"take this course button\" now!\nJoin the journey.\nSincerely,\nAshutosh Pawar",
      "target_audience": [
        "Students who are complete beginners to Java",
        "Students who know other programming languages and want to learn Java",
        "Students who aspire to work as a Java developer"
      ]
    },
    {
      "title": "The C++20 Masterclass : From Fundamentals to Advanced",
      "url": "https://www.udemy.com/course/the-modern-cpp-20-masterclass/",
      "bio": "Learn and Master Modern C++ From Beginning to Advanced in Plain English : C++11, C++14, C++17, C++20 and More!",
      "objectives": [
        "C++ 20",
        "Ranges",
        "Concepts",
        "Modules",
        "Coroutines",
        "C++ 17",
        "C++ 14",
        "C++ 11",
        "C++98",
        "Operator Overlading",
        "classes",
        "variables and data types",
        "Inheritance",
        "Polymorphism",
        "Const correctness",
        "static variables",
        "Class Templates",
        "Exceptions",
        "Move semantics",
        "Stl containers, iterators and algorithms",
        "Function like entities and callbacks",
        "Lambda expressions",
        "Character manipulation and strings",
        "Return value optimization",
        "And much more!"
      ],
      "course_content": {
        "Welcome": [
          "Welcome",
          "Get Help (Fast)",
          "Getting the most out of the course",
          "Source code, Slides and Questions [IMPORTANT]"
        ],
        "Environment Setup - [Windows - Linux - Mac]": [
          "The Tools"
        ],
        "Environment setup - Windows": [
          "Windows setup introduction",
          "Install and setup VS Code on Windows",
          "Microsoft Visual Studio Install - Windows",
          "VS Code setup with MSVC",
          "Install GCC & Clang - Windows",
          "Configure VS Code for GCC - Windows",
          "Configure VS Code for Clang - Windows",
          "Windows template project - All compilers",
          "Windows Development Environment setup - Summary"
        ],
        "Environment setup - Linux": [
          "Linux environment setup - Introduction",
          "Install & setup VS Code on Linux",
          "Install GCC on Linux",
          "Configure VS Code for GCC - Linux",
          "Install Clang on Linux",
          "Configure VS Code for Clang - Linux",
          "Template Project - All compilers - Linux"
        ],
        "Environment setup - Mac": [
          "Introduction",
          "Install and Setup Visual Studio Code",
          "Install GCC and Clang",
          "Configure VS Code for gcc",
          "Configure VS Code for Clang",
          "Template Project - All compilers"
        ],
        "Environmet setup - Other options": [
          "Online Compilers",
          "About other IDEs",
          "So you think you know more about C++, let's find out!"
        ],
        "Diving In": [
          "Project Template",
          "Your First C++ Program",
          "Comments",
          "Errors",
          "Statements and Functions",
          "Data input and output",
          "Data Output",
          "C++ Program Execution Model",
          "C++ core language Vs Standard library Vs STL",
          "Program Structure",
          "The program wants to know where you live",
          "Summary"
        ],
        "Variables and Data Types": [
          "Introduction",
          "Number Systems",
          "Decimals and Integers",
          "Integer Modifiers",
          "Fractional Numbers",
          "Declare and initialize variables",
          "Booleans",
          "Characters And Text",
          "Auto",
          "Assignments",
          "Data Representation in memory",
          "Number systems",
          "Auto",
          "Let's see how you'd use your data types",
          "Summary"
        ],
        "Operations on Data": [
          "Introduction",
          "Basic Operations",
          "Precedence and Associativity",
          "Prefix/Postfix Increment & Decrement",
          "Compound Assignment Operators",
          "RelationalOperators",
          "Logical Operators",
          "Output formatting",
          "Numeric Limits",
          "Math Functions",
          "Area of a hexagon",
          "Weird Integral Types",
          "Celcius to Fahrenheit",
          "Area and Volume of a Box",
          "So you think you know more about C++. Let's find out",
          "Summary"
        ],
        "Literals and Constants": [
          "Introduction",
          "Literals",
          "Constants",
          "Constant Expressions",
          "constinit",
          "So you think you know more about C++? Let's find out!",
          "Summary"
        ]
      },
      "requirements": [
        "Strong drive and willingness to learn",
        "Access to a PC or Mac with an internet connection",
        "I'll teach you the rest"
      ],
      "description": "Welcome to the C++ 20 Masterclass! A course designed to teach you cutting edge modern C++ from the absolute beginning all the way to very advanced topics, the topics you need in areas where C++ is used massively in modern times. Want to be a confident game developer? High performance applications in the financial sector, how about powerful software modules on top of which server systems, network infrastructure, database systems, even operating systems themselves run on top of? Well C++ is the dominant language used in these areas and many more! C++ is the programming language even other programming languages and technologies like NodeJS, PHP, Java, JavaScript and many more are written in.\nBy learning modern C++, you will be setting yourself up for success in writing software that runs devices ranging from bare metal embedded devices,  to mainstream electronic tech products like fridges, toasters, to networking infrastructure like routers and switches, all the way to power plants, manufacturing facilities and medical equipment. C++ is simply everywhere!\nThis course was carefully designed in a way  that it  will make you ready to take on technologies  and industries where C++ is widely used, by teaching you Modern C++ the way it is used in industry, and you will learn and master how to use shiny new features from the latest C++ standard (C++20) like ranges, modules coroutines, concepts, the three way comparison infrastructure and many more features spread out through out chapters and lectures in the course.\nThis course will teach you modern C++ from the absolute beginning all the way to a point where you can use advanced features like function templates, class templates, polymorphism, move semantics, functors , callbacks, STL container, iterators and algorithms, I will even show you how to build iterators for your own collection types, giving you the tools to  plug into the infrastructure provided by the C++ standard library to tune it to your own needs. Here are some of the things you'll get to master through this course :\nC++20\nC++17\nC++14\nC++11\nC++98\nRanges\nModules\nConcepts\nCoroutines\nClasses\nVariables and data types\nFunctions\nInheritance\nPolymorphism\nConst correctness\nStatic variables\nStorage duration\nLinkage\nOne Definition rule\nOperator Overloading\nThree way comparison infrastructure\nFunction like entities\nMove semantics\nSTL containers, iterators and algorithms\nAnd much more!\nBy the time you're done with the course, you will be ready to use modern C++ with standards C++ 11,C++14, C++17 and C++ 20,  but you will also have the tools necessary to read, understand and work with older C++ code bases with C++98 and below out there, making your  C++ skills valuable across a wide range of areas regardless of the C++ standard in use.\nThe course was designed with complete beginners in mind. So if you have never programmed a computer before, don't worry, I will be with you every step of the way, showing you around, teaching you the tools, constructs and mechanisms necessary to build real C++ projects.\nExisting C++ developers or experienced developers from other programming languages will also get a lot of value from the course as we cover advanced topics not covered in other online courses and books as far as I can tell. These include things like building  your own iterators, callback functions and many more.\nNow C++ is a very powerful language used by big companies like Microsoft, Apple, Google, NASA, and many more across a wide range  of products and I can talk about it all day. I am privileged to have been using it in my daily work for the last decade and I am  excited to share my accumulated knowledge with you in this course.\nIf you are serious about learning and mastering cutting edge modern C++, then this course is designed with the skill, the patience and the depth needed to get there as efficiently as possible. Please check some of the preview lectures, and lets get you started with modern C++ development, using C++ 20 as our base standard.",
      "target_audience": [
        "Aspiring developers",
        "Students and researchers",
        "Existing C++ developers willing to spice up on C++ 20"
      ]
    },
    {
      "title": "Data Visualize Data with D3.js The Easy Way",
      "url": "https://www.udemy.com/course/data-visualize-data-with-d3js-the-easy-way/",
      "bio": "Learn how to use D3.js to create data driven graphics and documents. A beginners guide to getting started with D3",
      "objectives": [
        "Learn how to use D3 to visualise data",
        "A easy to follow course that teaches you how to use D3 to create dynamic and interactive graphics from data driven input"
      ],
      "course_content": {
        "Introduction": [
          "Important - Download These First - Working Files",
          "Introduction To Data Visualization With D3",
          "What You Will Need",
          "Setting Up Your Development Environment",
          "Using The Project Template",
          "Reading The D3 Documentation",
          "How To Access Your Working Files"
        ],
        "Javascript Essentials": [
          "Reviewing Arrays And Objects",
          "Using The Map And Filter Array Methods",
          "Using Special D3 Array Functions"
        ],
        "Creating A Simple Bar Chart": [
          "Creating The SVG Element Programatically",
          "Creating Bars From Data",
          "Scaling Data",
          "Styling The Bars With CSS",
          "Adding Text To The Chart",
          "Adding Flexibility With A Chart Function",
          "Using SVG Groups"
        ],
        "Creating A Complex Bar Chart": [
          "Working With Arrays Of Objects",
          "Creating An Ordinal Scale",
          "Setting Color With Color Scales",
          "Adding X And Y Axes",
          "Flipping The Axes",
          "Adding Gridlines",
          "Rotating The X Axis Text",
          "Adding Axis Labels",
          "Updating The Plot Function With Best Practices"
        ],
        "Making The Chart Interactive": [
          "Adding A Sort Button To The Webpage",
          "Sorting Data",
          "Updating The Chart With Changes In Data",
          "Updating The Axes With Changes In Data",
          "Animating Changes In Data",
          "Responding To Other Mouse Events"
        ],
        "Creating A Line Chart": [
          "Working With Dates",
          "Plotting Time Data",
          "Formatting A Time Scale Axis",
          "Drawing A Path",
          "Shading An Area Of The Chart",
          "Exploring Path Options And Styling"
        ],
        "Creating A Scatter-Plot": [
          "Scatterplot Overview",
          "Examining The Data",
          "Plotting The Data",
          "Creatively Scaling The Data Points",
          "Plotting Groups Of Data Points",
          "Adding The Y Axis And Gridlines",
          "Adding The X Axis And Gridlines",
          "Styling The Data Categories",
          "Adding Interactivity - Data Detail",
          "Adding Interactivity - Chart Key And Labels",
          "Loading External CSV Data"
        ],
        "Conclusion": [
          "0801 Wrap Up"
        ]
      },
      "requirements": [
        "PC or Mac"
      ],
      "description": "This Learning to Visualize Data with D3.js training course from Infinite Skills teaches you how to build data visualizations with the D3 JavaScript library. This course is designed for users that already have some HTML, CSS, and JavaScript programming experience.\nYou will start by learning the basics of D3, including how to bind data from JavaScript arrays to elements, scale data, and style simple data visualizations with CSS. From there, This course will show you how to introduce interactivity into your data visualization, including how to add a sort button, animate changes, and respond to other mouse events. This video tutorial will also cover how to create a line chart and a scatter-plot data visualization.\n\nOnce you have completed this computer based training course, you will have developed a solid working knowledge of D3, and be able to build your own data visualizations. Working files are included, allowing you to follow along with the author throughout the lessons.",
      "target_audience": [
        "Users how have a basic understanding of HTML and CSS"
      ]
    },
    {
      "title": "Assembly Language Adventures: Complete Course",
      "url": "https://www.udemy.com/course/x86-asm-foundations/",
      "bio": "Learn the language of your computer",
      "objectives": [
        "Learn to code on the x86 Architecture using Assembly Language",
        "Gain solid understanding about low level concepts.",
        "Understand how your computer works",
        "Become a tough person"
      ],
      "course_content": {
        "Intro": [
          "About this course",
          "Where are the exercises?",
          "Tools - File Explorer",
          "Tools - Hex Editor",
          "Tools - Text Editor"
        ],
        "The Binary numeric system": [
          "Addition and Subtraction",
          "Base Conversion (Part 1)",
          "Base Conversion (Part 2)",
          "Hexadecimal Base",
          "Hexadecimal Base (Bonus)",
          "Signed Numbers (Part 1)",
          "Signed Numbers (Part 2)",
          "Signed Numbers (Part 3)"
        ],
        "x86 Architecture": [
          "Basic History",
          "Basic Structure",
          "First Instructions (Part 1)",
          "First Instructions (Part 2)",
          "Basic Arithmetic (Part 1)",
          "Basic Arithmetic (Part 2)",
          "Basic Arithmetic (Part 3)",
          "Basic Arithmetic (Part 4)"
        ],
        "Introduction to FASM": [
          "fasm intro",
          "fasm installation",
          "First Programs - bare",
          "First Programs - console (Part 1)",
          "First Programs - console (Part 2)",
          "First Programs - first program (Part 1)",
          "First Programs - first program (Part 2)",
          "Basic Assembly Errors (Part 1)",
          "Basic Assembly Errors (Part 2)"
        ],
        "Branching": [
          "Branching Intro (Part 1)",
          "Branching Intro (Part 2)",
          "JMP Examples",
          "Flags Register (Part 1)",
          "Flags Register (Part 2)",
          "Flags Register (Part 3)",
          "Flags Register (Part 4)",
          "Basic Conditional Branching",
          "More Conditional Branching (Part 1)",
          "More Conditional Branching (Part 2)",
          "Structured Branching (Part 1)",
          "Structured Branching (Part 2)",
          "Structured Branching (Part 3)"
        ],
        "Signed Operations": [
          "Signed Operations (Part 1)",
          "Signed Operations (Part 2)",
          "Signed Operations (Part 3)"
        ],
        "Bitwise Operations": [
          "Intro to Boolean Algebra (Part 1)",
          "Intro to Boolean Algebra (Part 2)",
          "Intro to Boolean Algebra (Part 3)",
          "Intro to Boolean Algebra (Part 4)",
          "Bitwise Instructions (Part 1)",
          "Bitwise Instructions (Part 2)",
          "Practical Bit Games"
        ],
        "Memory": [
          "Memory Intro (Part 1)",
          "Memory Intro (Part 2)",
          "Memory Examples - reverse (Part 1)",
          "Memory Examples - reverse (Part 2)",
          "Memory Examples - get_addr",
          "Memory Examples - corrupt",
          "Data definition",
          "Data sections",
          "Basic Memory Instructions",
          "LEA",
          "Structures (Part 1)",
          "Structures (Part 2)",
          "Structures (Part 3)",
          "Memory Ideas (Part 1)",
          "Memory Ideas (Part 2)",
          "Memory Ideas (Part 3)",
          "Addressing Rules Of Thumb"
        ],
        "Strings": [
          "ASCII",
          "Character Map",
          "String Representation",
          "UTF8 Example",
          "First String Instructions (Part 1)",
          "First String Instructions (Part 2)",
          "REP Prefixes (Part 1)",
          "REP Prefixes (Part 2)"
        ],
        "Subroutines and The Stack": [
          "Subroutines Intro",
          "The Stack",
          "Call and Ret (Part 1)",
          "Call and Ret (Part 2)",
          "Calling Conventions (Part 1)",
          "Calling Conventions (Part 2)",
          "Local State (Part 1)",
          "Local State (Part 2)"
        ]
      },
      "requirements": [
        "No prior knowledge is assumed!"
      ],
      "description": "Learn Assembly Language\nThe x86 Adventures series teaches you your computer's  language - x86 Assembly language, from scratch. No prior knowledge is assumed.\n\n\n[Complete Course]\nThis is the full collection of x86 Assembly Adventures. It covers everything from the real basics to being an independent (and tough) x86 Assembly programmer.\n\n\nMain topics covered:\nThe Binary System\nThe x86 Architecture\nIntro to Flat Assembler\nBranching\nSigned and Bitwise Operations\nMemory\nStrings\nSubroutines and the Stack\nReading the Manuals\nDebugging\nDealing with Windows API\n\n\nWhy learn x86 Assembly Language?\nYou are the kind of person who really likes to know how things work. In this course you are going to get solid understanding on how   computer programs work from the inside.\nBecome a better programmer - Knowing how things work down there will help you take better decisions, even as a high level programmer. If you  were always wondering what is the stack, or what are those pointers everyone talks about, you came to the right place.\nWrite faster code - When you really want to get the most of your processor, writing in raw Assembly is needed. We are not going to talk    about optimizations in this course, however you will get a solid foundations so that you can continue exploring on your own.\nYou want to become a reverse engineer or a security researcher, read the code of viruses or look for software vulnerabilities. As most of    the time the original source code will not be available to you, solid understanding of x86 Assembly Language is mandatory.\n\n\nCourse structure\nThe course is made of video lectures. A lecture could be  from a  presentation, or a real world example, showing me doing stuff at the computer.  Almost every video lecture is accompanied by some kind of exercise. The exercises are open source, and you can get them from github.\nIt is crucial that you complete the exercises. You will  learn a lot from the lectures, but it is pretty much a waste of your time and  money if you don't do the exercises. (Or at least verify that  you know how to do them, if you are more experienced).\n\n\nCourse tech stack\nNo prior knowledge is assumed for this course, but I do assume some things regarding your system, so make sure that everything here describes you:\nYou are using a Windows operation system. (The course videos use Windows 7). It is recommended to use at least Windows XP. (This means it will work perfectly on Windows 7 and Windows 10).\nYou have an x86 processor. We study 32 bit x86, but this course will also work on 64 bit processors.\nFor the tech savvy, some more details about the tools we are going to use in this course:\nAssembly flavor: x86 32 bits protected mode.\nAssembler: The Flat Assembler (FASM)\nDebugger: WinDbg.\nUsing Linux? Most of the exercises were ported to Linux, however the videos show me using windows 7. Please contact me if you are not sure.",
      "target_audience": [
        "Absolute beginners",
        "Experienced programmers",
        "People who really want to know how things work",
        "Programmers who want to improve their skills",
        "Programmers who want to write faster code",
        "Anyone who wants to get into the reverse engineering or security industry"
      ]
    },
    {
      "title": "C# Developers: Learn the Art of Writing Clean Code",
      "url": "https://www.udemy.com/course/clean-code/",
      "bio": "Learn the techniques to write better C# code and stand out in technical interviews",
      "objectives": [
        "Tell the difference between good and bad good",
        "Identify the smells in your code",
        "Refactor your code in a safe and fast way using ReSharper",
        "Write clean code that reveals the intent",
        "Decompose long methods into smaller, more maintainable ones",
        "Refactor lengthy switch statements into an object-oriented design",
        "Simplify nested / complex conditional blocks",
        "Remove duplicated code",
        "Design the proper signature for your methods"
      ],
      "course_content": {
        "Introduction": [
          "About the Course",
          "About Your Instructor",
          "Source Code",
          "Asking Questions"
        ],
        "Common Code Smells": [
          "Poor Names",
          "Poor Naming Conventions",
          "Poor Method Signatures",
          "Long Parameter List",
          "Output Parameters",
          "Variable Declarations on the Top",
          "Magic Numbers",
          "Nested Conditionals",
          "Switch Statements",
          "Duplicated Code",
          "Comments",
          "Long Methods"
        ],
        "Complete Refactoring Examples": [
          "WebForms Example - Part 1",
          "WebForms Example - Part 2"
        ],
        "Additional Resources": [
          "Final Words",
          "Bonus"
        ]
      },
      "requirements": [
        "C# (at any level)"
      ],
      "description": "These days, anyone can code. But if you want to get a job as an intermediate or senior-level C# developer, you must know how to write clean, maintainable code.\n\n\nAs Martin Fowler said:\n\"Any fool can write code that a computer can understand. Good programmers write code that humans can understand.\" - Martin Fowler\n\n\nPoorly written code is hard to understand, maintain and test. But what does separate poorly written code (aka code that smells) from beautiful code that talks?\n\n\nIn this course, Mosh, author of several best selling C# courses on Udemy, walks you through common code smells found in C# programs and shows you how to refactor them using ReSharper. Refactoring is changing the design of the existing code without changing its external behaviour.\n\n\nIn every lecture, you'll see an example of a popular code smell with Mosh's commentary about what is wrong with that code and more importantly, why. You'll then learn how to change the code in a safe and step-by-step fashion while minimising breaking changes. All the source codes presented in the lectures are available for download so you can practice these techniques on your own.\n\n\n\n\nBy the end of this course, you'll be able to\n\nSpot the smells in your code\nRefactor your code using safe and fast refactoring techniques with ReSharper\nWrite clean code that is more readable and maintainable\nBreak long methods into smaller, more maintainable ones\nSimplify nested / complex conditional blocks\nDesign the proper signature for your methods\nRemove duplicated code\nRefactor long switch/case blocks into an object-oriented design using polymorphism\nAnd more...\n\n\nUnderstanding and using these techniques are absolutely essential skills that every C# developer must have.\n\n\n\n\nWHAT OTHER STUDENTS WHO HAVE TAKEN THIS COURSE SAY:\n\n\n\n\"This is a must have tutorial for every programmer. It includes the most valuable tips I have received for 5 years. Thank you Mosh you helped me a lot.\" -Se He\n\n\n\"Just Love It! Its the 4th course i bought from Mosh, and i do not regret spending any money. I'm working as a developer for 2-3 years now but keep loosing myself in code written by me / others. I can finally understand why and what to change. Thanks Mosh!\" -Klaus Prünster\n\n\n\"This course was really great at explaining clean coding practices in a way which is easy to follow and understand. Highly recommended!\" -Edin Livnjak\n\n\n\"Another fantastic course from Mosh. I have't seen another course that explains these essential concepts so clearly. In my opinion all Developers should be taught this type of thing before being let loose within a work environment.\" -Mark Baker\n\n\n\"This course is awesome! It's highly detailed (but easy to understand nonetheless). It has, for me personally, the right amount of information density; Mosh picked exactly the right speed of teaching and progressively intensifies the content, which is great! It is definitively worth the time and money, and one can clearly see the passionate effort the author has put in the creation of these materials. Big respects!!\" -Raphael Beck\n\n\n\n\n\n\n100% MONEY-BACK GUARANTEE\nThis course comes with a 30-day money back guarantee. If you're not happy, ask for a refund, all your money back, no questions asked.\n\n\n\n\nSo, do you want to take your C# skills to the next level?\nEnrol in the course now and you'll see the difference between clean and smelly code within a few minutes.",
      "target_audience": [
        "Any C# developer who has an interest in improving the quality of their code"
      ]
    },
    {
      "title": "Python And Django Framework And HTML 5 Stack Complete Course",
      "url": "https://www.udemy.com/course/python-and-django-framework-and-html-5-complete-course-2022/",
      "bio": "Beginner to Expert Python, Learn Python Complete Full Stack Course With Python, Django Framework and HTML 5 Course",
      "objectives": [
        "Go from Beginner to Advanced in Python Programming by learning all of the basics to Object Orientated Programming.",
        "Write scripts for general productivity tasks Read and comprehend Python code Gain knowledge in regard to general programming concepts",
        "Use variables to store, retrieve and calculate information",
        "Utilize core programming tools such as functions and loops",
        "Django Framework With Building Projects",
        "Django for creating robust websites and web apps",
        "Build website and web applications HTML and CSS for front end web development",
        "HTML 5 Introduction, Use of Tags , Forms, Tables In HTML 5,"
      ],
      "course_content": {
        "Python Programming Course": [
          "Python Installing Anaconda",
          "Tutorial 2-Python Overview",
          "Tutorial 3-Python Variables And Constants",
          "Tutorial 4-Python Class And Objects(demonstration)",
          "Tutorial 5 -Python Array Implementation",
          "Tutorial 6-Python Keywords And Identifiers.",
          "Tutorial 7-Python Tuples",
          "Tutorial 8-Python sets.",
          "Tutorial 9-Python Different Modules",
          "Tutorial 10-Python Directory And File management.",
          "Tutorial 11-Python Dictionary",
          "Tutorial 12-Python Strings",
          "Tutorial 13-Python Data Type Conversion",
          "Tutorial 14-Python Numbers",
          "Tutorial 15-Python Namespace and scope",
          "Tutorial 16-Python global local nonlocal.",
          "Tutorial 17-Python Global Keywords.",
          "Tutorial 18-Python Iterators",
          "Tutorial 19-Python Iterations Using for",
          "Tutorial 20-Python Inheritance",
          "Tutorial 21-Python Multiple Inheritance",
          "Tutorial 22-Python Function Arguments",
          "Tutorial 23-Python Functions",
          "Tutorial 24-Python break statement.",
          "Tutorial 25-Python continue statement",
          "Tutorial 26-Python Errors And Exceptions",
          "Tutorial 27-Python Try, Except And Finally",
          "Tutorial 28-Python User Defined Exception",
          "Tutorial 29-Python OOP Approach",
          "Tutorial 30-Python Nested Dictionary Implementation",
          "Tutorial 31-Python Operator Overloading",
          "Tutorial 32-Python Statements And Comments",
          "Tutorial 33-Python Pass Statement",
          "Tutorial 34-Python Generators",
          "Tutorial 35-Python Decorators",
          "Tutorial 36-Python While Loop",
          "Tutorial 37-Python use of If,elif,else",
          "Tutorial 38-Python Matrix Implementation",
          "Tutorial 39-Python Regular Expressions",
          "Tutorial 40-Python List Comprehension",
          "Tutorial 41-Python Recursion",
          "Tutorial 42-Python Input, Output And Import",
          "Tutorial 43-Python Shallow And Deep Copy",
          "Tutorial 44-Python Lamda Function",
          "Tutorial 45-Python Assert",
          "Tutorial 46-Python @property"
        ],
        "Django Complete Course": [
          "Tutorial 1-Introduction to Django .Getting started",
          "Tutorial 4- Django Templates",
          "Tutorial 5-Django Templates Render a Template",
          "Tutorial 6-Django Templates + Render a Template",
          "Tutorial 7-Getting Started with Images in Django",
          "Tutorial 8-Getting Started with Images in Django(2).",
          "Tutorial 9-Image Inside a Template",
          "Tutorial 10- Bootstrap 4 Forms With Django.",
          "Tutorial 11- Bootstrap 4 Forms With Django (Backend Code)",
          "Tutorial 12- Django Working with forms.",
          "Tutorial 13-Django Working with forms",
          "Tutorial 14-Django Alert Handling in Forms",
          "Tutorial 15-Django Alert Handling in Forms",
          "Tutorial 16-404 Error Handling Page",
          "Tutorial 17-Django How To Make a Calculator App in Django (Part 1)",
          "Tutorial 18- Django How To Make a Calculator App in Django (Part 2)",
          "Tutorial 19-Django How To Make a Calculator App in Django (Part 3).",
          "Tutorial 20-Adding Instructions and Submitting Query",
          "Tutorial 21-Django Evaluation of Query and Adding Try Except Block",
          "Tutorial 22-Creating a Poll App in Django",
          "Tutorial 23-Solving Problem,Adding list Django",
          "Tutorial 24-Django Adding Suggestions during Search Bar",
          "Tutorial 25- Django Making a Backend Dictionary To Store"
        ],
        "Introduction": [
          "HTML 5 Introduction",
          "HTML Attributes",
          "HTML Basic Tags",
          "HTML Phrase Tags",
          "HTML Comments",
          "HTML Blocks",
          "HTML Fonts",
          "HTML SVG.",
          "HTML Formatting Tags",
          "HTML Forms.",
          "HTML List Tags",
          "HTML Tables",
          "HTML Media Element 1",
          "HTML Media Element 2"
        ]
      },
      "requirements": [
        "A computer, Access to the internet, An interest in learning Python",
        "Only the very basic computer skills are needed"
      ],
      "description": "Learn Full Stack Course With  Python, Django framework, And HTML 5 From the Beginning in Full Stack Course 2022\nCreated thorough, extensive, but easy-to-follow Hours of content that you’ll easily understand and absorb.\nThe course starts with the basics of  Python fundamentals, programming, and user interaction in full-stack course\n\n\nThe curriculum is going to be very hands-on as we walk you from start to finish to become a professional HTML 5, Python developer. We will start from the very beginning by teaching you HTML 5 Basics then Python basics and programming fundamentals, and then going into advanced topics and different career fields in Python so you can get real-life practice and be ready for the real world.\n\n\nThe topics covered in this course are:\n* Beginner to Expert Python contents:\n\n\nArray implementation\nFile methods\nKeywords and Identifiers\nPython Tuples\nPython Basics\nPython Fundamentals\nData Structures\nObject-Oriented Programming with Python\nFunctional Programming with Python\nLambdas\nDecorators\nGenerators\nTesting in Python\nDebugging\nError Handling\nRegular Expressions\nComprehensions\nModules\n\n\nDjango Framework With Building Projects:\nDjango Web Framework, you will learn the fundamentals of web applications. web applications using Python Django Web Framework.\nBuild website and web applications\nHTML and CSS for front-end web development\nBootstrap for responsive web design\nPython\nDjango for creating robust websites and web apps\n* BUILD A WEB APPLICATION USING  DJANGO FRAMEWORK:\n\n* Brief Introduction To HTML 5:\nHTML Basic Tags\nHTML List Tags\nHTML Attributes\nHTML Forms\nHTML SVG\nHTML Blocks\nSee you inside the course!",
      "target_audience": [
        "For Complete Python Programming Beginners",
        "For People New to Python,Django Framework And HTML5"
      ]
    },
    {
      "title": "Rust Programming Course: From Beginner to Expert 2.0",
      "url": "https://www.udemy.com/course/rust-programming-master-class-from-beginner-to-expert/",
      "bio": "Learn the most loved programming language of programmers",
      "objectives": [
        "Develop beginer to advance level skills of Rust Programming",
        "Learn the basic syntax of Rust and its feature of memory safety",
        "Developed an understanding of advance level concepts such as generics, traits, lifetimes and closures",
        "Gain Hands-On experience of solving some intermediate to advance level problems using RUST"
      ],
      "course_content": {
        "Course Orientation": [
          "Course introduction",
          "Version 2.0 of the Course",
          "Advice",
          "Installing Rust and Web-based Enviroment for Executing Programs",
          "Running and Compiling your First Program",
          "VS Code Setting",
          "Tell us About the Course",
          "Links to Useful Books on Rust",
          "Quick Reference Material"
        ],
        "---- Part 1: Basic Programming with Rust ----": [
          "Code Files Used in the Section"
        ],
        "Quick Startup": [
          "Variables and Constants",
          "Practice on Variables",
          "Primitive Data Types",
          "Compound Data Types",
          "Practice on Data Types",
          "Functions and Code Blocks",
          "Mutability in Function Parameters",
          "Practice on Functions",
          "Conditionals",
          "Control Flow",
          "Practice on Conditionals and Control Flow",
          "Comments and More on Printing",
          "Variable Conventions and Statics",
          "Compiler Directives",
          "Error Messages and Error Codes",
          "Operators in Rust",
          "Associativity and Operator Overloading",
          "Operators Precedence",
          "Test Your Knowledge"
        ],
        "Ownership": [
          "Ownership Basics",
          "Ownership in Functions",
          "Practice on Ownership",
          "Borrowing Basics",
          "Borrowing in Functions",
          "Practice on Borrowing",
          "Dereferencing",
          "Let's Test Your Knowledge",
          "Extra: Good to know"
        ],
        "Custom and Library Provided Useful Types": [
          "Structs Basics",
          "Practice on Structs",
          "Adding Functionality to Structs",
          "Enums",
          "Practice on Enums",
          "Option",
          "Practice on Option",
          "Result",
          "Practice on Result",
          "Extra: HashMaps",
          "Practice on HashMaps",
          "Casting of References (Prerequisite for Method Chaining)",
          "Method Chaining Constraints",
          "Pattern Matching Contexts (Prerequisite for Destructured Struct Parameters)",
          "Destructured Struct Parameters",
          "Let's Test Your Knowledge"
        ],
        "Organizing Your Code": [
          "Code Organization",
          "Modules Basics",
          "Practice on Modules",
          "Visualizing and Organizing Modules",
          "A note on the previous lecture",
          "Re-exporting and Privacy",
          "Practice on Re-exporting and Privacy",
          "Using External Dependencies",
          "Publishing your Crate",
          "Let's Test Your Knowledge"
        ],
        "Testing Code": [
          "Unit Testing (Basics)",
          "Unit Testing (Testing Panics)",
          "Controlling Tests Execution",
          "Practice on Testing",
          "Integration Tests",
          "Extra: Benchmark Testing"
        ],
        "---- Part 2: Intermediate Level Concepts ----": [
          "Code Files Used in the Section"
        ],
        "Flexibility and Abstraction with Generics and Traits": [
          "Generics",
          "Practice on Generics",
          "Traits",
          "Practice on Traits",
          "Trait Bounds",
          "Practice on Trait Bounds",
          "Supertraits",
          "Practice on Supertraits",
          "Trait Objects",
          "Practice on Trait Objects",
          "Derived Traits and Marker Traits",
          "Associated Types in Traits",
          "Practice on Associated Types",
          "Choosing Associated vs Generic Type"
        ],
        "Functional Programming Aspects": [
          "Closures",
          "Practice on Closures",
          "Functional Pointers",
          "Practice on Functional Pointers",
          "Iterators",
          "IntoIter",
          "Practice on Iterators and IntoIter",
          "Iterating over Collections",
          "Combinators",
          "Practice for Iterating over Collections and Combinators",
          "Extra - Iterating Through Option"
        ]
      },
      "requirements": [
        "We cover everything from scratch and therefore do not require any prior knowledge of Rust"
      ],
      "description": "Programming languages usually have some tradeoffs. There are low level languages like C anc C++ usually have speed and control at the cost of memory safety. On the other hand, we high level languages such as python or java script are more safer but are not very efficient from power and speed perspectives. With rust we have best of both the worlds. More specifically, it is a system programming language which means they have speed and control but at the same time are much much better because of the safety features just like high level languages. This makes rust so clearly standout among all the other programming languages.\nIts popularity is increasing day by day and is therefore being adapted by bigger companies world wide. Google is also planning to use Rust in the Linux kernel, Microsoft, meanwhile, has turned to Rust to reduce memory-related bugs in Windows and Facebook has also forged closer ties with Rust, joining the Rust Foundation. All these are clear indications that Rust is gaining significant attention of the community.\nAt 18+ hours of video tutorials, this course will take you from beginner to master level.  This course is designed from a perspective of a student who has no prior knowledge of RUST and who is a RUST beginner.\nThroughout this comprehensive course, we cover a massive amount of skills and techniques including:\nBasic rust programming syntax and Common Rust Collectors\nEnums, Traits,  Structures, Generics, Lifetimes and Closures\nRust Module System, the use of External Crates and Publishing Crates\nSmart Pointers and Commonly used Data Structures including Linklists, Trees, BST and Doubly Linklists\nAdvance Techniques including Macros, Concurrency and Aysnc Programming\nReal Life Problem where we will learn solving 13 Real Life problems in rust\nEfficient programming skills including Design Patterns, Efficient handling of Options, Strings and Structures\nVariance and Sizedness in rust\nDropping Values and their Relevant Issues\nTextual Processing and Directory Handling\nWebprogramming\nThe course ensures that you learn by doing\nPractice exercise questions along with solutions\nQuizes and\nAssignments\nBy taking this course, you will become a fluent in RUST programming and you'll be so good so that you can confidently and professionlay code in the language.\nDon't just rely on my word, check what some of our existing students have to say about my courses.\n\"I had viewed the video in the propose sequence, as well, as I had looked at some videos outside of the instructor propose sequence, and only had one thing to say: - This course is excellent\"  Gabriel Federo Hungria\n\"I have gone through the course on MATLAB Gui by the instructor. It was an A++ experience. He is the best instructor, really professional and knows exactly what to teach. Thanks for your wonderful contribution to help us understand MATLAB.\" Kunal Singh\n\"Very interesting course, complete functionality of Matlab was explained and the quizzes further helped with the learning process.\" Hassan Ayub\nPleaset note… I am very confident that you will like the course and therefore provides you with a FULL money back guarantee for 30 days! So there is a ZERO risk and nothing to loose.\nFinally, i am super excited to teach you RUST programming, so hit enroll and enjoy learning RUST",
      "target_audience": [
        "Anyone looking to build a strong career in programming through excellent Rust coding skills"
      ]
    },
    {
      "title": "The Complete Python Developer Certification Course",
      "url": "https://www.udemy.com/course/the-complete-python-developer-certification-course/",
      "bio": "Master Python and pass the PCEP-30-01 and the PCAP-31-02 Exams and become an industry ready python developer!",
      "objectives": [
        "MASTER the Content Required to Pass the PCEP-30-01 and the PCAP-31-02 Exams",
        "Code Along With Me to PRACTICE and IMPLEMENT Everything You Learn",
        "An In-depth Understanding of Object Oriented Programming",
        "SOLVE 25+ Assignments with In-depth Solution Videos",
        "Gain the Knowledge Required to Solve Any Python Problem",
        "Learn the Python Coding Fundamentals",
        "Go Over the Best Practices Used in the Industry",
        "Apply for Python Developer Jobs with Confidence"
      ],
      "course_content": {
        "Introduction": [
          "Configuring Our Dev Environment and Creating Our First Program",
          "Python Developer Environment Setup",
          "Basics of Variables",
          "Dedicated TA Support",
          "Join our Online Community (Discord)",
          "Basic Datatypes in Python",
          "How to proceed in this course",
          "Basic Arithmetic in Python",
          "Indexing and Slicing Strings",
          "Basic String Methods",
          "Formatting Strings Using the Format Method",
          "Strings are Immutable",
          "Assignments Source Code and Setup",
          "Section 1 Assignments"
        ],
        "Coding Exercises: Python Basics": [
          "Hello, World!",
          "Fix the Buggy Code",
          "Bakery needs your help with cookies count",
          "Grocery Store needs your help with Inventory Summary",
          "Embedding a Word in a Tag",
          "Custom String Merge",
          "Insert Word in the Middle"
        ],
        "Lists, Tuples and Dictionaries": [
          "Lists in Python",
          "Assignment: List Assignment",
          "Accessing Elements in Nested Lists",
          "Finding Index Positions in Lists and Counting Duplicates",
          "Tuples in Python",
          "Dictionaries in Python",
          "Comparison Operators",
          "Section 2 Assignments"
        ],
        "Coding Exercises: Lists, Tuples and Dictionaries": [
          "Welcome Bot Simulator with Lists",
          "List Basics: Add, Remove, and Access",
          "Dictionary Basics: Create and Access",
          "Dictionary Iteration: Keys and Values",
          "Dictionaries: Merging Dictionaries"
        ],
        "Functions and Variable Scope": [
          "Introduction to Creating Functions",
          "*args and **kwargs in Python",
          "Basics of Variable Scope",
          "Scope and Nested Functions",
          "Section 3 Assignments"
        ],
        "Coding Exercises: Functions and Variable Scope": [
          "String Transformer",
          "Merging Dictionaries",
          "List Iteration — Sum and Average",
          "Squares of Evens",
          "Combine Lists Without Duplicates",
          "Split String into Unique Characters",
          "Multi Combine List and String",
          "Get Last List Argument",
          "Get Second-to-Last Item from Keyword List"
        ],
        "Control Flow": [
          "Control Flow: If & Else Statements",
          "Control Flow: Elif Statements",
          "For Loops",
          "Pass Statement in For Loops",
          "While Loops",
          "Looping and Unpacking with Dictionaries and Tuples",
          "Range, Enumerate, and Zip Functions",
          "More Handy Functions and the Random Package",
          "Accepting Input From a User",
          "Section 4 Assignments: Part 1",
          "Section 4 Assignments: Part 2",
          "Section 4 Assignments: Part 3",
          "Section 4 Assignments: Advanced Assignment",
          "HW: Another Coding Puzzle To Flex Your Brain"
        ],
        "Coding Exercises: Control Flow": [
          "Even or Odd?",
          "Sum of N Natural Numbers",
          "Personal Info Management 1",
          "Personal Info Management 2",
          "Number Range Checker",
          "String Pattern Matcher",
          "List Element Counter",
          "Temperature Converter",
          "Password Strength Checker",
          "Time Calculator"
        ],
        "Modules, Packages and Object Oriented Programming in Python": [
          "Revisiting the Difference between Methods and Functions",
          "Classes and Objects",
          "Classes Attributes vs Object Attributes",
          "Calling Python Code That is Saved in Another File",
          "Inheritance and Polymorphism",
          "Abstract Classes and Methods",
          "Practical Application of OOP",
          "Double Under (Dunder) Methods",
          "Python Script Files",
          "Python Modules and Using Code from Other Files",
          "Python Packages",
          "Understanding the if __name__ == __main__ Syntax",
          "Section 5 Assignment",
          "HW: Assignment Bank Account Management System OOP"
        ],
        "Coding Exercises: Modules, Packages and OOP": [
          "Animal Class Hierarchy",
          "Encapsulation with BankAccount",
          "Circle Operations"
        ]
      },
      "requirements": [
        "Access to a computer with an internet connection and a passion to become a Python developer"
      ],
      "description": "Welcome to The Complete Python Developer Certification Course!\nAre you an absolute beginner eager to master Python and confidently pass the PCEP-30-01 and PCAP-31-02 exams?\nDo you want to build a strong coding foundation and become an industry-ready Python developer?\nAre you seeking hands-on practice instead of just watching endless videos?\nDo you want clear guidance and practical assignments to truly absorb Python concepts?\nIf you answered yes to any of these questions, you’re in the right place.\nWhat Makes This Course Stand Out?\nExam-Focused Roadmap: Specifically designed to help you excel in the PCEP-30-01 (Certified Entry-Level Python Programmer) and PCAP-31-02 (Certified Associate in Python Programming) exams.\nHands-On Learning: Over 20+ assignments and coding projects where you code alongside the instructor, reinforcing concepts through real-world practice.\nPractical Explanations & “No Student Left Behind” Model: Every concept—variables, data types, control flow, OOP, and more—is broken down with step-by-step solutions and clear, digestible explanations.\nCareer-Focused Approach: Build the confidence and skill set to pursue roles in web development, data science, machine learning, or automation. Learn how Python can open doors to high-paying tech careers.\nBeginner-Friendly: No prerequisites required. The course starts from the very basics, ensuring you have a solid foundation before moving on to intermediate and advanced topics.\nWhy This Course Is Essential:\nGetting certified as a Python developer is one of the best moves you can make to enter the job market as a developer! Python is ranked as the 2nd most in-demand programming language in the world. It can be applied in web applications, data science, machine learning, self-driving cars, automation, and much more! Python is THE language to know if you're looking to get into programming, or even revamp your current career. The starting salary for a Python developer is around $75,000. This can quickly double to over $150,000 after 5-6 years of experience.\nThere are tons of Python courses out there. However, most of them expect you to learn through just watching and that is not an effective way to learn! I want my students to get their hands dirty and code along with me, and work on the 20+ assignments that I have spread out through the course. I hold your hand throughout the process and walk you through everything. My \"no student left behind\" model has worked for thousands of my students across all 15 of the courses that I have published.\nThis course has no prerequisites, and it is perfect for anyone that is looking to land a job as an entry level Python developer. I've structured it to be simple and straightforward- I waste no time, and dive right into the code with various assignments along the way. We start off with the fundamental topics such as variables, datatypes, strings, lists, dictionaries and so on. We then expand on these fundamentals to learn more comprehensive topics such as functions, if and else statements, for and while loops and thoroughly master Object Oriented Programming.\nWe finish off the course by covering classes, inheritance, python script files, file IO and more. At the end of each section, there are assignment lectures which give you the chance to practice everything that we have covered. In the assignment video, I give in-depth solutions and explain WHY we solve things a certain way. I don't want you to just sit back and watch a bunch of videos, I want you to get your hands dirty and practice writing code.\n\n\nLatest Course Updates:\n(Sept 2025): Added 3 Labs on File IO and Exception Handling\n(July 2025) Added 32 New Coding Exercises for five course sections\n(Mar 2025): Added 2 New Coding Exercises on Dynamic Function Arguments\n(Jan 2025) : Added a Comprehensive OOP Coding Exercise on Circle Operations\n(Nov 2024) : Added Source Code for ALL Lectures in the GitHub Repository\n(2023) : Improved Online Community Support\n(2022) : Added 2 New Python Homework Projects\nImportant Announcement: This course will be constantly updated with more assignments, quizzes, and lectures to enrich your knowledge of Python Programming Language.\n\n\nTopics Covered in the Complete Python Developer Certification Course:\nGetting Started with Python\nInstallation and environment setup\nVariables and data types\nStrings and String methods\nControl Flow & Data Structures\nif/else statements, for loops, while loops\nBasic I/O operations\nLists, tuples, dictionaries, sets\nFunctions and Variable Scope\nWriting and calling functions\nScope and nested functions\nObject-Oriented Programming (OOP)\nClasses and objects\nInheritance, polymorphism, encapsulation\nPython Packages and Modules\nFile I/O Operations & Exception Handling\nReading/writing to files\nWorking with OS Module and Command Line\nPrepare for PCEP & PCAP Exams with Practice Test\n\n\nKEY BENEFITS OF PYTHON MASTERY\nHigh Demand, High Pay: Python ranks among the most sought-after languages worldwide, making it a surefire path to lucrative job opportunities.\nVersatility: Use Python in web apps, data science, machine learning, and automation—one language, countless possibilities.\nStrong Community & Ecosystem: Python has an extensive library ecosystem and active developer community, ensuring continuous support and innovation.\nPersonal and Professional Growth: Mastering Python cultivates problem-solving skills and coding best practices that will benefit you in all tech domains.\nCertification Edge: Holding PCEP and PCAP certifications validates your expertise, giving you a competitive advantage in the job market.\n\n\nIMPORTANT NOTE FOR STUDENTS:\nEvery exercise and its solution are provided directly in the lectures.\nIn several lectures, I ask students to pause the video and complete the assignment before resuming to watch my solution.\nMAKE SURE YOU WORK OUT THE PROBLEMS ON YOUR OWN BEFORE MOVING ON TO MY SOLUTION!!\n\n\nSTUDENT REVIEWS\nWith over 21,000 enrolled students and a 4.6 star-rating, this is a Udemy best-selling course.\nDon’t just take it from me, take it from other students that have taken this course.\n★★★★★ Here’s some testimonials from students that took this course ★★★★★\n\"This course is fantastic! Instructor is excellent to explain details in easy ways. I do appreciate this course because it helped me a lot to solve many doubts I had. This course has lots of assignments. I do recommend to do it in a serious manner. I did it. This struggle helped me to build up my skill. If you hesitate to take this course, you must take it and you will never regret. Thanks a lot, Mr. Ahmad for providing this wonderful course!\" - Nahoko\n\"By far the best online course I've taken so far. The instructor explains everything clearly and did a great job with the examples. Definitely worth every penny.\" - Julie\n\"It is excellent way to start learning python. I am loving it and it is driving me to go to advance level\" - Vishal\n\"So far, I have learned 4 and half lessons and those basic fundamental knowledge match exactly what I expect. Very clear explanation and example regarding each python data type and structure. I just can't wait to learn more interesting content.\" - Lin\n\"Reasonably paced for most users, even seasoned developers should use this course. His videos are as close to live lectures as possible.\" - Elliot\n\"Imtiaz does a great job reminding us of the topics we already covered as they reappear. He also does a great job covering the topic on its initial presentation. His style gives a nice continuous flow that means I can focus on the topic at hand without running back to prior topics for clarity.\" - Niles\n\n\nKEY TAKEAWAY\nMastering Python is one of the smartest moves you can make if you want to break into the tech industry or advance your current career. By the end of this course, you’ll be fully prepared to take on Python certification exams and tackle real-world programming challenges with confidence.\n\n\nEnroll today to master Python. As always, I offer a 30 day money back guarantee if you're not satisfied, but you won't need it.",
      "target_audience": [
        "Anyone that wants to ace the PCEP-30-01 and the PCAP-31-02 Exams",
        "Anyone that wants to get tons of practice in writing Python code",
        "Anyone that wants to be a highly paid Python Developer",
        "Anyone that wants to learn how to program in Python"
      ]
    },
    {
      "title": "How to design & develop REST microservices in Golang (Go)",
      "url": "https://www.udemy.com/course/golang-how-to-design-and-build-rest-microservices-in-go/",
      "bio": "All you need to integrate SQL & NoSQL databases, search engines and all the tools that you need in your REST API.",
      "objectives": [
        "How to structure and organize your microservice.",
        "Domain Driven Development.",
        "Hexagonal architecture applied.",
        "MySQL integration and configuration.",
        "Integrate Cassandra DB in your microservices.",
        "Elasticsearch integration and configuration.",
        "Logging to standard output and log files.",
        "DAO pattern implementation.",
        "How to build, publish and use a custom Go library.",
        "Testing all the layers of your application.",
        "How dependencies work in Go."
      ],
      "course_content": {
        "Introducción": [
          "Course goal: What we're going to build",
          "A quick preview",
          "These are all of the repos!"
        ],
        "Creating our projects: Users API": [
          "Create projects in Github",
          "HTTP frameworks",
          "Basic application structure: MVC pattern",
          "Starting from our domain",
          "How to structure our domain persistence",
          "Working with dates"
        ],
        "MySQL integration": [
          "Configure MySQL client in Go",
          "How to insert rows",
          "How to read rows",
          "How to handle MySQL errors",
          "How to update rows",
          "How to delete rows",
          "How to find rows"
        ],
        "Fixing the mistakes we made": [
          "How to marshal structs",
          "Services structure",
          "No logging system"
        ],
        "Creating our projects: OAuth API": [
          "OAuth authentication",
          "Domain Driven Development",
          "DDD - Starting with the domain",
          "DDD - Project structure"
        ],
        "Cassandra integration": [
          "Introduction to Cassandra DB",
          "Cassandra Go client",
          "How to insert, get and update records",
          "Tune our get session implementation"
        ],
        "Making the authentication work": [
          "Authenticating users",
          "Generating access tokens",
          "Different requests for the two APIs"
        ],
        "Golang libraries & dependencies": [
          "Creating a shared OAuth library",
          "How dependencies work: go modules",
          "Defining transitive dependencies",
          "Creating a shared utils library"
        ],
        "Creating our projects: Items API": [
          "Application structure: MVC & gorilla/mux",
          "Configure our mux router",
          "Introduction to Elasticsearch",
          "Adding ElasticSearch client",
          "Index documents in ES",
          "Moving our logger to the utils library",
          "Improving our errors library",
          "Dependencies: Using modules in all projects",
          "How to get documents by ID",
          "Searching documents in ES",
          "Homework: Add delete and update endpoints"
        ],
        "Testing": [
          "Testing our application: OAuth client"
        ]
      },
      "requirements": [
        "Just complete the Golang tour available at Golang's website",
        "Nice to have: Part 1 of this course"
      ],
      "description": "Welcome!\n\n\nIn this second part of the series I'm working with MySQL, Cassandra and Elasticsearch as persistence layers and we're going to create 3 different microservices using different design patterns: MVC, featured MVC and Domain Driven Development implementing the Hexagonal architecture.\n\n\nAt the end of the course you'll learn:\nHow to structure our application's packages and code.\nMVC pattern, Domain Driven Development and Hexagonal Architecture applied!\nHow to configure MySQL client in Go. DAO pattern implemented.\nHow to configure and use CassandraDB client in Go.\nHow to configure and use Elasticsearch in Go.\nTesting and mocking database integrations.\nStress test the microservice with goroutines.\nHow dependencies work in Go. Usage of Go modules.\nHow to build, publish, use and share a custom Go library.\nApplication design patterns.\nPreparing our distributed logging system.\nReal life examples and exercises.\n\n\nI'm sure you're going to enjoy this course! if you have any doubts, please check the reviews on my other courses so you can get an idea about what you're about to get. This is real life and industry experience!\n\n\nHope to hear from you!\nFede.",
      "target_audience": [
        "Software engineers.",
        "Software developers.",
        "Technical leaders.",
        "Architects.",
        "Anyone who wants to get serious about microservices in Go."
      ]
    },
    {
      "title": "OOP Object Oriented Programming In PHP 7",
      "url": "https://www.udemy.com/course/oop-object-oriented-programming-in-php-7/",
      "bio": "Learn advanced object oriented programming with simple code examples. This Course includes almost all OOP PHP7 topics.",
      "objectives": [
        "Most of the topics of object oriented programming given in PHP manual.",
        "Apply Advanced OOP concepts in your applications.",
        "Add OOP skill in your CV."
      ],
      "course_content": {
        "Overview of the course": [
          "Sections Overview"
        ],
        "Introduction to Object Oriented Programming": [
          "Introduction To Object Oriented Programming"
        ],
        "Basics of Object Oriented Programming": [
          "Classes And Objects",
          "Properties And Methods",
          "Creating Classes And Objects In PHP",
          "Creating And Accessing Properties",
          "Print The Whole Object",
          "Defining And Calling Methods",
          "Accessing Object Properties From Methods",
          "Parameters And Return Value Of Methods",
          "PHP Source Files Used In \"Basics of Object Oriented Programming\" Lectures",
          "Simple Calculator",
          "Solution: Simple Calculator"
        ],
        "Visibility": [
          "Visibility",
          "Php Source Files Used In \"Visibility\" Section",
          "Visibility Quiz"
        ],
        "Class Constants": [
          "Class Constants",
          "Php Source Files Used In \"Class Constants\" Section",
          "Class Constants Quiz"
        ],
        "Data Encapsulation": [
          "Data Encapsulation",
          "Php Source Files Used In \"Data Encapsulation\" Section",
          "CreditCard Class (shopping using credit card)",
          "Solution: CreditCard Class (shopping using credit card)",
          "Withdraw Money From Credit Card",
          "Solution: Withdraw Money From Credit Card"
        ],
        "Inheritance": [
          "Inheritance",
          "Real Life Example Of Inheritance",
          "Visibility Level Protected In Inheritance",
          "ISA Vs HASA",
          "Php Source Files Used In \"Inheritance\" Section",
          "Inheritance"
        ],
        "Overriding": [
          "Overriding",
          "Preserving Parent Class Functionality in overriding",
          "Php Source Files Used In \"Overriding\" Section"
        ],
        "Final Keyword": [
          "Final Classes And Methods",
          "Php Source Files Used In \"Final Keyword\" Section"
        ],
        "Abstract classes and methods": [
          "Abstract Classes And Methods",
          "Php Source Files Used In \"Abstract Classes And Methods\" Section",
          "Abstract Classes And Methods Quiz"
        ]
      },
      "requirements": [
        "Little knowledge of basic PHP."
      ],
      "description": "1st section of the course starts with an introduction to object oriented programming. What is OOP? and why we need it ? and what was before OOP?. A little detail about procedural language.We will also learn how to add OOPness in our programming. Then the advantages of object oriented programming.\nIn 2nd section we will discuss the basics of OOP with real life example and then how to map it in objects, classes, properties and method.\nThen how to create objects and classes in php? How to add properties and methods? How to use them? And at the end of this section we will learn about parameters and return values of a method.\n3rd section describes the visibility and its three levels. Then why we need to define public, private or protected visibility of properties and methods in a class.\n4th section describes the concept of constants in classes.\n5th section describes about data encapsulation. Why we need it? And how to implement it and then the benefits of encapsulation.\nIn 6th section we will discuss about inheritance with real life example. Then how to translate it in classes, properties and methods in php code. What is ISA and HASA relationship and where to use ISA and where to use HASA in classes and objects.\n7th section describes the problem when a child class needs its own version of parent class method then how overriding of method  solves this problem. Then how you can preserve parent class method’s functionality while overriding.\n8th section describes how you can block inheritance and method overriding using final keyword.\n9th section describes what is the meaning of abstract in real world, then what is the meaning of abstract classes, why we need i? What are the abstract methods and why we need it? Then we will also discuss how to create abstract classes and methods in php.\nAt the end what are the key points for abstract classes and methods.\nIn 10th section we will discuss what happens when two classes from completely different class hierarchies need some similar behaviour and how interface solve this problem.\nIn 11th section we will discuss what happens when an object is born and when it dies. How we can handle things in both situations using constructor and destructor. How to define and use constructor and destructor using magic methods __construct() and __destruct().\n12th section describes a situation where we need only one copy of properties and methods for all objects of a class. Static keyword can solve this problem. So we will see how we can create and use static properties and methods without creating an object of a class.\nIn 13th section describes that there are 15 magic methods in php. So we will discuss these magic methods one by one in detail.\n14th section is the biggest one in this course. In this we will discuss about errors and exceptions.\nWhat supposed to be an error in php? How they happen? What are the different types of errors? .how you can trigger errors by yourself? And what are the logical error? Then we will see how we can report errors when they happen and how you can change error reporting settings in php.ini. We will also learn the 4 ways to deal with errors. Then how to use an error handler and at last how you can log error messages.\nAfter errors we will discuss about what may be the risky behavior of your code and  how we can use exceptions to handle that risky behaviour. We will see how we can try some risky behaviour then how we can throw an exception if anything wrong happens and how we can catch that exception. Then the detail discussion on exception class in php and the stack trace for the exception. Then how you can make your own custom exceptions by extending php’s built in exception class. Why we need to use try with multiple catches and how to re-throw an exception. What happens when there is an uncaught exception in your code.what is an exception handler.\nThen at the end of this section we will discuss the changes in errors and exceptions in php7.\n15th section describe how you can autoload classes in your code without using include and require statements. Then the use of autoloader function for this purpose. Then we will discuss to autoload namespace classes in your code using Psr-0 and Psr-4 autoloading standards but before that we will discuss what are the namespaces in php.\n16th section is about object serialization. Why we need to serialize an object. Then when and  how to unserialize it. We will also learn how to do task that are prior to serializing an object using __sleep() magic method.Then how to do task right away after unserializing an object using __wakeup() magic method.\n17th section is about cloning of an object in which we will discuss two types of cloning that are shallow copy and deep copy. In deep copy cloning we will also discuss about __clone() magic method. Then we will see recursive cloning and then double linking problem in cloning. At the end we will discuss Deep copy cloning using serialization.\n18th section is about Type hinting. In this we will see how we can use non scalar and scalar data types for type hinting. We will also discuss about strict scalar data types and TypeError exception thats been introduced in php7.\nIn 19th section we will learn two ways of comparing objects. First one is using Comparison operator (==)  and 2nd one is using  Identity operator (===).\n\n20th section is about overloading an object. we will learn How to do property overloading Using  __get(), __set(), __isset() and __unset() magic methods. Then how to do method overloading Using __call(), __callStatic() magic methods.\n\n21st section describes about traits. First we will discuss deadly diamond of death problem in multiple inheritance. Then single inheritance and its limitations. Then how traits provide multiple inheritance thing in php. Then what will be the precedence order if a parent class and a trait have same method and then what will be the precedence order if a trait and current class have the same method. We will also discuss to use multiple traits and then how to compose a trait from other traits.\nAt the end we will discuss abstract and static trait members and trait properties.\n22nd section describes late static binding. For this first we will discuss some basic concepts of binding like what is binding, early binding and late binding?\nThen what is the problem with early binding of self keyword and at the end its solution which is late static binding.\n23rd section describes object iteration. First we will get some idea about some basic concepts like traverse, iterate and iterate using loops. Then what is object iteration and how you can iterate an object using Iterator Interface and IteratorAggregate Interface .",
      "target_audience": [
        "If you are a newborn in php and have a very basic knowledge of php.",
        "If you need php7 object oriented knowledge.",
        "If you want to learn Object Oriented Programming using real life examples.",
        "If you want to learn OOP concepts in detail.",
        "If you wanted to add object oriented programming skill in your CV.",
        "If you wanted to add some serious OOPness in your programming.",
        "If you need prompt response from your instructor."
      ]
    },
    {
      "title": "C# 12 - Ultimate Guide - Beginner to Advanced | Master class",
      "url": "https://www.udemy.com/course/c-sharp-oop-ultimate-guide-project-master-class/",
      "bio": "Learn C# by doing | C# projects | Bootcamp for C# Interview | Advanced C# | .NET 9 | LINQ | Interview Questions",
      "objectives": [
        "Confidently speak about most of the essential concepts of C#",
        "Crack C# job interviews easier",
        "Solve most common bugs and issues in C# applications",
        "Understand further technologies of .net (in future), such as Asp .Net, Asp .Net Core, Xamarin etc. easier, with strong-base knowledge of C#",
        "Create C# Apps from scratch and scale it up to any level",
        "Write OOP code easier with industry-standards and best practices like a Pro",
        "Add C# to your prior knowledge of any technology (Asp .Net Core, Xamarin, Unity etc.), to get new career opportunities"
      ],
      "course_content": {},
      "requirements": [
        "Basic programming skills (Basic level) in any one programming language (such as 'C' language) is recommended"
      ],
      "description": "Learn C# by doing, with real world projects.\n\n\nTestimonials\n- \"I have completed other courses on C#. While some of those instructors are trully excellent, including Moshe Hamedani, and othe courses on PluralSight, indeed i swore by PluralSight before coming to Udemy, Mr Vardhan has to be commended. This is trully the most comprehensive course a new C# learner needs to form a solid understanding not only of the basics but intermediate level subjects. If you want to learn C# and have full confidence that you are at least intermediate level after your course, take this course. Thank you sir for your dedication to the learner. Too often instructors create courses with the learner not in mind, but just to get something decent out there. This is so thorough and presented so that you will understand without ambiguity Thank you again sir!.\" - David Odoom\n- \"By the way, your content is the best for .NET so far! I'm not exaggerating or flattering. I really mean it! I've checked other .NET courses too, but they don't have the quality that your content has. Your content not only helps to lay basic foundation of the concept, but it also enables to think and tackle the advanced use cases. And the beauty is that your course is absolutely consistent with the official docs. Please make more content.\" - Asadullah Ehsan\n- \"Great course, Focused on point with no distractions, straightforward, highly organized and really great effort. Thanks.\" - Nishma\n- \"As a computer engineering graduate, I can easily say that this course really helped me to brush up my C# skills and the tutor (Mr. Harsha) is a caring person. He usually answers your questions in 12 hours.\" - Tayfun Odabaşı\n- \"I have some programming experience. I like the flow of the instruction, and the fact that the quizzes allow for some creativity\" - Michael\n- \"Best Teacher ever hope more success for you and more courses for us\" - Mohmd alkhatib\n- \"I am still on the first sections of the course , but i wanted to write this review because this is a very good course on C# ,very clear in depth explanation and cover all the topics of C# , i only wish i have found this course sooner . update , i finished have the course still think this is the best C# course i have taking so far.\" - Moustamid Karim\n- \"I like the background info. Extra effort was put in the graphics. I'm early in the course, but look forward to the rest..\" - Mark Workman\n- \"Concepts are explained in very well manner\" - Akanksha\n- \"This course is amazing! Such a great instructor. Concepts are clearly and intelligently presented. I have a few C# courses and this one is by far my favorite. He doesn't just touch on a topic and bam you're on to the next one. He gives several examples and by the time that section is finished, you feel you really understand that concept. I can't give this course enough praise! I'm a professional C# dev and this course is helping fill in the gaps of my understanding. Thank you for such a great course!\" - Business\n- \"Incredible course for anyone looking to start with C# and OOP. I'm halfway through, and thus far every single concept has been explained in an easy-to-understand manner. The instructor also does a fantastic job of reinforcing the topics he's discussing by reiterating them multiple times in different ways and in different scenarios.\" - Vincent\n...and more reviews.\n\n\n- - - -\n\n\nPOTENTIAL BENEFITS OF THIS COURSE\nBy the end of this course, you will create all of the source code for a complete C# project, by using collections as backend for storage.\nYou will type in every line of code with me in the videos ... all from scratch. No copy-paste of ready-made code.\nI explain every line of C# code that we create. So this isn't a copy/paste exercise, you will have a full understanding of the code.\nI am a RESPONSIVE INSTRUCTOR. Post your questions and I will RESPOND in 24 hours, ASAP.\nAll source code is available for download.\nEnglish captions are available.\n\n\n- - - -\n\n\nList of topics that ARE covered in this course:\n- .Net Basics: Introduction to .NET, CLI, CLR, .NET Framework Architecture, Versions of .Net Framework, Overview of .Net Core, Introduction to Visual Studio, Basics of C#\n- Language Basics: System.Console class, Variables, Primitive Types, Control Statements\n- OOP Fundamentals: OOP Basics, Classes, Objects, Object References\n- Fields: Fields, Static Fields, Constants, Readonly Fields\n- Methods: Methods, Encapsulation, Abstraction, Polymorphism, Local Variables, Parameters, this keyword, Static methods, Default arguments, Named arguments, Method overloading, ref, out, out declaration, in, ref returns, params modifier, Local functions, Static local functions, Recursion\n- Type Conversion: Type conversion, Implicit casting, Explicit casting, Parse, TryParse, Conversion methods\n- Constructors: Constructors, Static constructors, Constructor overloading, Object initializer\n- Properties: Properties, Readonly properties, Writeonly properties, Automatic properties, Automatic properties accessibility, Automatic property initializers, Indexers\n- Inheritance: Inheritance, Various types of inheritance, base keyword, Calling parent class's constructor, Method hiding, Method overriding, Sealed classes, Sealed methods\n- Abstract Classes and Interfaces:  Abstract classes, Abstract methods, Interfaces, Dynamic polymorphism with interfaces, Multiple inheritance, Interface inheritance, Explicit interface implementation\n- Namespaces: Namespaces, Nested namespaces, Importing namespaces, Creating using alias, Using static\n- Partial & Static Classes:  Partial classes, Partial methods, Static classes, Enumerations\n- Structures: Structures, Readonly structures, Primitive types as structures\n- System.Object: System.Object class, Overriding methods of System.Object class, Boxing, Unboxing\n- Generics: Generic classes, Multiple generic parameters, Generic constraints, Generic methods\n- Working with Null: Nullable types, Null Coalescing operator, Null propagation operator\n- Extension Methods: Extension methods, Pattern matching, Implicitly typed variables, Dynamically typed variables, Inner classes\n- Garbage Collection: Garbage Collection, Generations of GC, Destructors, Finalize, IDisposable, Using Declaration\n- Delegates and Events: Single-Cast Delegates, Multi-Cast Delegates, Events, Auto-implemented events, Anonymous methods, Lambda expressions, Inline lambda expressions, Expression bodied members, Switch expression, Func, Action, Predicate, EventHandler, Expression Trees\n- Arrays: Creating arrays, Arrays with for loop, Arrays with foreach loop, Methods of System.Array class, Mult-Dim arrays, Index from-end operator, Jagged arrays, Array of objects\n- Collections: Working with various collections, List, Dictionary, SortedList, Hashtable, ArrayList, Stack, Queue, HashSet, typeof operator, Collection of objects, Object relations, IEnumerator vs IEnumerable, Iterators and Yield return, Custom Collections, ICollection, IList, IEquatable, IComparable, IComparer, Covariance and Contravariance\n- Anonymous types, Tuples, Value Tuples, Discards, String, DateTme, StringBuilder, Math\n- LINQ Basics\n- Exception Handling\n- System .IO namespace (File handling, Directory handling, File Streams)\n- Serialization (Binary, Json, Xml)\n- C# 9 and 10: Top level statements, File scope namespaces, Global using, Module initializer, Nullable reference types, Target-typed New expressions, Pattern Matching, Parameterless struct constructors, Records\n- C# 11: Raw string literals, List pattern, Slice pattern, Var pattern, File local types, Required members, Auto default structs, Ref fields\n- C# 12: Primary Constructors in Non-Record classes & structs, Collection Expressions, Default Parameters in Lambda Expressions, Alias any type\n\n\n\n\n- - - -\n\n\nPORTFOLIO PROJECT\nA mini project, \"Banking application\", where the bank user can create / edit bank accounts and also can perform deposit, withdraw, balance enquiry, account statement etc. operations.\nSome of the above features are given as assignments; so that you can exercise coding practices based on the guidelines provided.\n\n\n- - - -\n\n\nList of C# 3.0 New Features covered in this course:\nAuto-Implemented Properties\nAnonymous Types\nLambda Expressions\nExpression Trees\nExtension Methods\nImplicitly Typed Local Variables / Type Inference\nPartial Methods\nObject Initializer\nCollection Initializer\nLINQ\nList of C# 4.0 New Features covered in this course:\nDynamically Typed Variables\nNamed Arguments\nOptional Arguments\nCovariance and Contravariance\nList of C# 5.0 New Features covered in this course:\nAsync & Await\nList of C# 6.0 New Features covered in this course:\nStatic Imports (using static)\nException Filters (catch when)\nAuto-Implemented Property Initializers\nNull Propagator\nString Interpolation\nnameof operator\nList of C# 7.0 New Features covered in this course:\nOut Variable Declaration\nTuples\nDiscards\nPattern Matching\nLocal Functions\nExpression Bodied Members\nList of C# 7.1 New Features covered in this course:\nDefault literals\nInferred Tuple Element Names\nList of C# 7.2 New Features covered in this course:\n'private protected' access modifier\n'in' parameter modifier\nList of C# 7.3 New Features covered in this course:\nRef returns\n== operator on tuples\nList of C# 8.0 New Features covered in this course:\nreadonly structs\nSwitch Expressions\nUsing Declarations\nStatic Local Functions\nList of C# 9 and 10 New Features covered in this course:\nTop level statements\nFile-scope namespaces\nGlobal 'using'\nModule initializers\nNullable reference types\nNull forgiving operator\nTarget-typed 'new' expressions\nPattern Matching\nExtended Property Pattern Matching\nInit-only properties\nParameter-less struct constructors\nRecords\nList of C# 11 New Features covered in this course:\nRaw String Literals\nList Pattern\nSlice Pattern\nVar Pattern\nFile Local Types\nRequired Members\nAuto Default Structs\nRef Fields\nList of C# 12 New Features covered in this course:\nPrimary Constructors in Non-Record Classes & Structs\nCollection Expressions\nDefault Parameters in Lambda Expressions\nAlias Any Type\n\n\n- - - -\n\n\nNo Risk – Money-Back Guarantee\nFinally, there is no risk. You can preview first few lectures of the course for free. Once you purchase the course, if for some reason you are not happy with the course, Udemy offers a 30-day money back guarantee.\nSo you have nothing to lose, sign up for this course and learn how to build C# Projects from scratch!\n\n\nKey Points about this Course:\nAll C# programs are demonstrated using 'Console Applications' and 'Class Library' projects in Visual Studio 2019 / 2022.\nEach concept is first explained theoretically like understanding what is that concept, different types / syntax to write code. And then we will show the same with a real-world-like scenario. At last, I'll explain where exactly we use this concept in real-word applications.\nAll the concepts explained in both theoretically, diagrammatically and practically.\nWe use Visual Studio 2019 for up to C# 8; and Visual Studio 2022 for C# 9, 10, 11 and 12 features.\nVideo lectures are not downloadable.\n\n\n- - - -\n\n\nThe following topics are NOT covered in this course:\nMulti-Threading\nADO .NET\nEntity Framework\nWPF / WCF\nWinForms\nCryptography\nAssemblies\n\n\nThis course is offered by Web Academy by Harsha Vardhan. Any watermark stating \"Harsha Web University\" is from our old branding and does not represent an academic institution. This course is for educational purposes only and is not affiliated with any university or degree-granting institution.",
      "target_audience": [
        "Fresher / Experienced, who wants to understand C# with complete theoretical and real-world hands-on experience.",
        "Developers, who already have knowledge on any one programming language and wants to become C# Developer / .Net Developer"
      ]
    },
    {
      "title": "Python from Zero-to-Hero (Beginner Level)",
      "url": "https://www.udemy.com/course/python-from-zero-to-hero-beginner-level/",
      "bio": "Get familiar with Python, a modern programming language and start coding your first programs",
      "objectives": [
        "Python programing fundamentals",
        "Get ready for advanced topics in Python",
        "Simple and easy projects to implement",
        "Working with tuples, lists and sets in Python",
        "Control the flow of a program using conditional statements and loops"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Day 1: Python editors and Python applications": [
          "Install Python Editor",
          "First Python Program",
          "Python Examples"
        ],
        "Day 2: Working with variables and data types in Python": [
          "Variables & Data Types - Part1",
          "Variables & Data Types - Part2",
          "Variables & Data Types - Part3",
          "Variables & Data Types - Part4"
        ],
        "Day 3: Work with strings & casting different datatypes": [
          "String Concatenate & f-String",
          "String Concatenate Quiz",
          "String Cast & Slice",
          "String Cast & Slice Quiz",
          "String Methods - Part1",
          "String Methods - Part2",
          "String Methods Quiz"
        ],
        "Day 4: Do different operations using Operators in Python": [
          "Operators in Python",
          "Comparison & Logical Operators",
          "Operators Precedence",
          "Get User Input"
        ],
        "Day 5: Working with Lists": [
          "Lists in Python",
          "Access To List Items",
          "Add/Remove Items in Lists",
          "List Methods",
          "List Operators"
        ],
        "Day 6 : How to use tuples and sets in Python": [
          "Tuples in Python",
          "Edit Tuples",
          "Tuple Methods & Operators",
          "Sets in Python",
          "Add/Remove Items from Sets",
          "Set Methods - Join",
          "Set Methods - Difference",
          "Set Methods - Comparison"
        ],
        "Day 7: Conditional statements and loops": [
          "Conditions",
          "Project : Simple Calculator",
          "While loop in Python - Part 1",
          "While loop in Python - Part 2",
          "For loop in Python",
          "Project: Multiplication Table"
        ],
        "What's Next?": [
          "What's Next?"
        ]
      },
      "requirements": [
        "No programming experience is needed"
      ],
      "description": "Welcome to the course Python from Zero-to-Hero in Beginner Level.\nIn this course you will learn the basic fundamentals of Python as a modern programming language.\nUsing Python you can write programs for any platform like: Web, Windows, Games, Machine Learning, Data Science and many other applications. So if you are interested in writing program for any fields, you can go through this course and get familiar with the basics of Python.\n\nIn this course you will learn:\nSyntax of Python programming language\nHow to install an editor to start coding with Python\nDifferent data types and how to define variables and use them in python\nUsing different operators to calculate or compare different variables and values\nMore complex data types like lists, tuples and sets\nLoops and conditions in Python\nand more...\nWhat is included in the package:\nUp-to-date HD-quality videos, that are easy to search and reference\nDownloadable final code for each section\nHands-On Projects: Practical projects to apply your knowledge and build a portfolio.\nCertification: Receive a certificate of completion to showcase your skills.\n\n\n30-DAY FULL MONEY-BACK GUARANTEE\nThis course comes with a 30-day full money-back guarantee. Take the course, watch every lecture, and do the exercises, and if you feel like this course is not good enough for you, ask for a full refund within 30 days. All your money back, no questions asked.\nSo you have nothing to lose, sign up for this course and learn how to build Python Projects from scratch!\n\n\nBy end of this course, you will become ready to continue learning advanced topics in Python, especially if you find your interest in any area of Python applications. So don't hesitate and join to this course. You will learn how to start programming in Python through this course.",
      "target_audience": [
        "Every one who wants to learn a new programming language",
        "Every one who already knows at least one programming language"
      ]
    },
    {
      "title": "Python Programming for Beginners and Kids - Anyone Can Code",
      "url": "https://www.udemy.com/course/python-for-beginners-anyone-can-code/",
      "bio": "Beginners can learn Python programming by coding fun programs. Learn Python 3 basics, 2D graphics, and create a game.",
      "objectives": [
        "Learn the parts of a computer and what they do - RAM, CPU, and storage",
        "How to write simple programs in Python",
        "How to handle input and output",
        "How to use variables to store data while your program runs",
        "How to use loops to write code to repeat steps until a condition is met.",
        "How to use logic and control to change the flow of execution",
        "How to use turtle graphics to draw colorful graphics",
        "Fundamental Python skills you can continue to build on",
        "How to use the debugger",
        "How to generate random numbers",
        "How to use functions to re-use code and break up programs into smaller pieces",
        "How to create a simple arcade style game"
      ],
      "course_content": {
        "Introduction": [
          "Why choose this course?",
          "About Me",
          "What You'll Learn",
          "Optimizing Your Learning Experience",
          "Downloading Python Software",
          "Setting Up Our Python Editor - Thonny",
          "Getting Familiar with Thonny"
        ],
        "Hardware and Software": [
          "What is a computer?",
          "What is software?",
          "Quick Review of Hardware and Software",
          "Hardware and Software Quiz"
        ],
        "Working with Output": [
          "Introduction to Output",
          "Example 1- Output with the print() function",
          "Example 1 Continued - Adding Notes to Your Program",
          "Example 2 - More Escape Characters for Text Formatting",
          "Example 3 - Making Your Computer Speak",
          "Programming Challenge 1 - Print Your Superheroes",
          "Programming Challenge 1 - Solution",
          "Programming Challenge 2 - Upside Down Triangle",
          "Programming Challenge 2 - Solution",
          "Programming Challenge 3 - Backslash and Tabs to Make a Rectangle",
          "Programming Challenge 3 - Solution",
          "Programming Challenge 4 - A Famous Quote",
          "Programming Challenge 4 - Solution",
          "Programming Challenge 5 - Poetic Python - Reciting Poetry",
          "Programming Challenge 5 - Solution"
        ],
        "Working with Variables and Keyboard Input": [
          "Introducing Variables",
          "Example 4 - Creating Variables and Using the Debugger",
          "Example 5 - Getting Keyboard Input",
          "Example 5 Continued - Formatting Output with Variables",
          "Example 6 - Replacing words in a sentence with user input",
          "Example 7 - Making the Computer Speak our Sentence Built from User Input",
          "Programming Challenge 6 - Creating a Simple Word Game",
          "Programming Challenge 6 - Solution"
        ],
        "Doing Math with Python": [
          "Introduction to Expressions and Operators",
          "Hands On Practice with Math Expressions",
          "The Modulus Operator",
          "Using Operators with Strings",
          "Operator Precedence Cheat Sheet",
          "Example 8 - Computing the Area of a Rectangle",
          "Example 9 - Computing the Area of a Triangle from User Input",
          "Programming Challege 7 - Evaluating Math Expressions",
          "Programming Challenge 7 - Solution",
          "Programming Challenge 8 - Calculating Your Age in Dog Years",
          "Programming Challenge 8 Solution"
        ],
        "Lists and Tuples": [
          "Introduction - What is a List?",
          "Example 10 - Creating a List Variable",
          "Example 11 - Accessing Individual Items in a List",
          "Changing Individual Values in a List",
          "Example 12 - Getting the Number of Items in a List",
          "Example 13 - Adding Items to a List",
          "Example 14 - Combining Lists to Make a New List",
          "Example 15 - Multiplying a List",
          "Example 16 - Remove an Item from a List using a Value",
          "Example 17 - Remove an Item from a List by Position",
          "Example 18 - Counting How Many Times an Item Appears in A List",
          "What is a Tuple?",
          "Example 19 - Hands On with Tuples",
          "Programming Challenge 9 - Heroes and Villains List Challenge",
          "Programming Challenge 9 - Solution",
          "Programming Challenge 10 - Heroes and Villains Tuples",
          "Programming Challenge 10 - Solution"
        ],
        "Introduction to Turtle Graphics": [
          "Introducing Turtle Graphics - Pixels and Coordinates",
          "Example 20 - Drawing a Red Square with Goto",
          "Setting Your Turtle Speed",
          "Programming Challenge 11 - Draw a Green Rectangle",
          "Programming Challenge 11 - Solution",
          "Example 21 - Forward, Backward, Left, and Right Functions",
          "Programming Challenge 12 - Using Forward, Backward, Left, and Right",
          "Programming Challenge 12 - Solution",
          "Example 22 - Drawing Circles",
          "Example 23 - Filling Shapes with Color",
          "Example 24 - Drawing Polygons and Irregular Shapes",
          "Example 25 - Erasing Turtle Drawings and Setting the Window Background Color",
          "Programming Challenge 13 - Draw Your Own Emoji",
          "Programming Challenge 13 Solution - Drawing an Emoji",
          "Programming Challenge 14 - Drawing Challenge",
          "Programming Challenge 14 - Solution",
          "Example 26 - Drawing Text",
          "Programming Challenge 15 - Draw Your Name",
          "Programming Challenge 15 - Solution",
          "Example 27 - A Nicer Way to Get Input",
          "Programming Challenge 16 - Practice with numinput() and textinput()",
          "Programming Challenge 16 - Solution",
          "Turtle Graphics Documentation"
        ],
        "Writing Programs that Make Decisions": [
          "Introduction - Booleans",
          "Hands On with Comparison Operators",
          "Example 28: Making decisions with the if statement",
          "Example 28-2: Age Program in Turtle Graphics",
          "Hands On - Writing expressions with AND and OR",
          "Example 29 - Display Different Messages for Different Age Ranges",
          "Example 30 - Park Admission Calculator",
          "Programming Challenge 17 - Weather Alert!",
          "Programming Challenge 17 - Weather Alert! - Solution",
          "Programming Challenge 18 - Mood Graphics",
          "Programming Challenge 18 - Mood Graphics - Solution",
          "Example 31 - Enhancing the Weather Alert with Nested If",
          "Programming Challenge 19 - Weather Alert 2.0",
          "Programming Challenge 19 - Solution"
        ],
        "Loops - Writing Code that Repeats and Counts": [
          "Introducing Loops",
          "Example 32 - Making Python Count",
          "Example 33 - Using Input Variables to Control a For Loop",
          "Programming Challenge 20 - Counting Practice 1",
          "Programming Challenge 20 - Solution",
          "Programming Challenge 21 - Skip Counting",
          "Programming Challenge 21 - Solution",
          "Programming Challenge 22 - Counting and User Input",
          "Programming Challenge 22 - Solution",
          "Example 34 - The Fruit Loops",
          "Programming Challenge 23 - The Color Loop Animation",
          "Programming Challenge 23 - Solution",
          "Example 35 Part 1 - Counting with a While Loop",
          "Example 35 Part 2 - More Counting with While Loops",
          "Programming Challenge 24 - Skip Count with a While Loop",
          "Programming Challenge 24 - Skip Count with a While Loop - Solution",
          "Example 36 - The Fruit Tuple While Loop",
          "Programming Challenge 25 - The Color Loop Using a While Loop",
          "Programming Challenge 25 - Solution",
          "Example 37 - Growing 5 Point Star",
          "Example 38 - For Loop Color Spiral",
          "Example 39 - Looping Fan",
          "Example 40 - Rows and Columns of Polka Dots",
          "Programming Challenge 26 - Rows and Columns of Squares",
          "Programming Challenge 26 - Solution"
        ],
        "Re-using Code with Functions": [
          "Introducing Functions - Making Code Reusable",
          "Example 41 - Defining and Using Functions",
          "Programming Challenge 27 - Write Your Own Greeting Function",
          "Programming Challenge 27 - Solution",
          "Example 42 - Using a Function to Perform a Calculation",
          "Challenge 28 - Create a Function to Calculate the Area of a Circle",
          "Challenge 28 - Solution",
          "Example 43 - Variable Visibility (aka Scope)",
          "Example 44 - Making One Function that can Draw Different Spirals",
          "Challenge 29 - Make a Function to Draw a Star with Turtle Graphics",
          "Challenge 29 - Solution"
        ]
      },
      "requirements": [
        "The ability to type 15 words per minute is recommended",
        "A PC or Mac computer or laptop",
        "Curiosity to learn and experiment. This course can be enjoyed by both adults and kids (5th Grade and above recommended).",
        "Students should understand basic Math operations (multiplication, division, remainder, addition, and subtraction) with decimal numbers."
      ],
      "description": "Python Programming for Beginners - Beginners Can Learn to Code in Python 3 with Simple and Fun Hands On Videos\nDo you want to learn to code? Maybe you are interested in programming as a career or a hobbyist who wants to create code for your own projects? Or, maybe you’re a parent with a kid who would love to write code.  If so then this is the course you're looking for. This course is designed to teach Python programming to absolute beginners.   Kids as young as 5th grade have completed this entire course successfully.\nFollowing my step-by-step videos you will write fun and entertaining programs – and at the same time gain core programming skills. This course is loaded with 10 hours of fun hands-on examples and challenges.\nYou’ll make your computer talk, draw colorful 2D graphics, and we’ll cap off the course by creating an arcade style space game – complete with animation, keyboard controls, and sound effects.  That's not all with over 140 lectures, challenges, and solutions there are many more cool programs you will create.  All you need is a Mac or PC and a little curiosity.  At the end of this course, you will have gained basic programming skills that you can continue to build on.\n\n\nPython is One of the Most Popular Programming Languages\nPython is one of the top programming languages in use.   Companies like Netflix, Google, Instagram, and Facebook all use Python.   Many universities now teach Python in their introductory computer science classes.   Python is even used in some college science classes such as Physics for simulations.    If you want to pursue a career in software development, this course is a great first step into programming.   Or, you may just want to learn as a hobby or for fun to express your creativity in your own projects!\n\n\n30 Day Money Back Guarantee\nThis course includes a 30-day 100% money back guarantee. So, what are you waiting for? Sign up and start your programming journey right now!",
      "target_audience": [
        "Beginning Python programmers who are curious about learning Python as their first programming language",
        "Those wanting to take a first step in exploring programming"
      ]
    },
    {
      "title": "Python GUI Development with PyQt6 & Qt Designer in 2025",
      "url": "https://www.udemy.com/course/python-gui-development-with-pyqt6/",
      "bio": "Learn how to build Graphical User Interface (GUI) applications with Python, PyQt6 and Qt Designer",
      "objectives": [
        "Introduction to PyQt6 and Installation Process",
        "Working with Qt Designer and building Apps using Qt Designer",
        "Converting Qt Designer UI file to PY file",
        "Learn how to use different widgets and UI component with PyQt6 and Qt Designer",
        "Learn how to create simple notepad application with PyQt6",
        "Learn how to connect your PyQt6 application with MySQL Database",
        "Learn how to draw different shapes like rectangle, circle and ellipses with PyQt6",
        "Working with QtQuick and QML (Qt Markup Language)",
        "Learn building different charts like PieChart, LineChart, BarChart and DonutChart in PyQt6",
        "Creating library management system in PyQt6, Qt Designer and MySQL database.",
        "Learn how to convert PyQt PY file to EXE file",
        "Learn how to make stand alone installer for your PyQt application"
      ],
      "course_content": {},
      "requirements": [
        "Should be familiar with Python Programming Language"
      ],
      "description": "This is a course on building Graphical User Interface (GUI) Applications with Python and PyQt6 in 2025, this course is divided in to different parts and sections, in the first part we are going to have a simple introduction to PyQt , after that we go through installation process and what IDE we want to use, in the second part we focus on using different widgets and UI components in PyQt6, in the third part we create a simple notepad application, fourth part is about database handling in PyQt6, basically we are using MySQL database, in the fifth part we work on 2D graphics and drawing, the sixth part is about QtQuick and QML (Qt Markup Language), in the seventh part we focus on working with different charts using PyQtChart, the charts will be created using PyQt and also QtQuick.\nin the eight part we create a simple library management system with PyQt6 and Qt designer, in the ninth part we talk about QtMultiMedia and PyQtWebEngine, we will create a simple media player also a simple web browser in PyQt, also we convert our PyQt PY file to EXE file and at the end we create installer for our application. there are different versions of PyQt, in this course we want to use the latest version of PyQt and that is called PyQt6.",
      "target_audience": [
        "Those who are interested in building GUI applications using Python, PyQt6 and Qt Designer",
        "Beginner and advanced developers in python who wants to learn PyQt6 GUI Development",
        "Students who want to learn a new skill in Python and wants to create desktop GUI applications"
      ]
    },
    {
      "title": "Learn Rust by Building Real Applications",
      "url": "https://www.udemy.com/course/rust-fundamentals/",
      "bio": "Fundamentals of the Rust Programming Language",
      "objectives": [
        "The fundamentals of the Rust Programming Language",
        "Low level memory management",
        "Rust’s unique approach to memory safety",
        "How to troubleshoot common compiler errors"
      ],
      "course_content": {
        "Getting Started": [
          "Course Introduction",
          "What is Rust",
          "Installing Rust",
          "Setting Up the Development Environment",
          "Cargo"
        ],
        "Manual Memory Management": [
          "Code for this section",
          "Introduction",
          "The Stack",
          "The Heap",
          "Smart Pointers",
          "Explore the Memory Layout in GDB",
          "Memory Management"
        ],
        "Building a Command Line Application": [
          "Code for this section",
          "Introduction",
          "Basic Data Types",
          "Functions",
          "Macros",
          "Mutability",
          "The Standard Library",
          "Ownership",
          "References and Borrowing",
          "Explore the Ownership and Borrowing in GDB",
          "Finishing Touches",
          "Rust Basics"
        ],
        "Building a HTTP Server From Scratch": [
          "Code for this section",
          "Introduction",
          "The HTTP Protocol and the Architecture of Our Server",
          "Structs",
          "Strings",
          "Enums",
          "The Option Enum",
          "Organising Our Code into Modules",
          "Listening for TCP Connections",
          "The Result Enum",
          "Loops",
          "Tuples",
          "The Match Expression",
          "Arrays",
          "Logging the Incoming Requests to the Console",
          "Traits and Type Conversions",
          "Custom Errors",
          "Advanced Error Handling",
          "Iterating Over Strings",
          "Converting an Option into a Result",
          "Parsing Values From Strings",
          "The \"If Let\" Expression",
          "Lifetimes - Part 1",
          "Lifetimes - Part 2",
          "Lifetimes",
          "Silencing Compiler Warnings",
          "Representing the Query String Using a Hash Map - Part 1",
          "Representing the Query String Using a Hash Map - Part 2",
          "The Derive Attribute",
          "Modelling the HTTP Response",
          "Copy and Clone Types",
          "Writing Data to a TCP Stream",
          "Dynamic vs Static Dispatch",
          "Custom Traits",
          "Implementing Getters",
          "Routing Incoming Requests",
          "Working with Environment Variables",
          "Serving HTML Files",
          "Serving Arbitrary Files Securely",
          "Final Quiz",
          "Next Steps"
        ]
      },
      "requirements": [
        "Basic Computer Science Knowledge",
        "Experience in at least one other programming language"
      ],
      "description": "You have probably heard of the Rust Programming Language - a modern systems language that is blazingly fast, guarantees memory safety without the use of a garbage collector and most importantly is fun to write. It has a great community and excellent tooling. These are just some of the reasons why Rust was voted the most loved programming language for five years in a row. Rust is the proof that systems programmers can have nice things.\nIn this course you will learn the fundamentals of Rust. The format will be a bit different than most other courses. Instead of jumping between unrelated concepts in every video and showing examples that have nothing to do with the real world use of the language, we will learn entirely through practice.\nTogether we will build real Rust applications and introduce new concepts when we need them to solve actual problems.\n\n\nTo start there will be a short theoretical section on low level memory management.\nThen to introduce the basics of Rust we will build a simple command line application. This will provide us with the necessary knowledge to tackle a much larger project.\nFor our big project we will build a working HTTP server from scratch. We will write our custom implementation of the HTTP protocol and we will build a functioning web server with it. This will let us introduce all of the fundamental and some advanced features of the Rust language.",
      "target_audience": [
        "Developers interested in a safe systems programming language"
      ]
    },
    {
      "title": "Shell Scripting: Discover How to Automate Command Line Tasks",
      "url": "https://www.udemy.com/course/shell-scripting-linux/",
      "bio": "Learn shell programming for Linux, Unix, & Mac. Learn how to write shell scripts like a pro & solve real-world problems!",
      "objectives": [
        "Write shell scripts that can be used on Linux, Mac, and Unix operating systems.",
        "Automate tasks using shell scripts.",
        "Create complex scripts that take advantage of advanced bash shell features."
      ],
      "course_content": {
        "Start Here - Course Overview and Downloads": [
          "Course Overview",
          "Course Downloads, Including the scripts used in the course and a cheat sheet"
        ],
        "Shell Scripting, Succinctly": [
          "Section Introduction",
          "Shell Scripting, Part I",
          "Shell Scripting, Part II",
          "Shell Scripting",
          "Practice Exercises"
        ],
        "Exit Statuses and Return Codes": [
          "Exit Statuses and Return Codes",
          "Exit Status Demo",
          "Exit Statuses and Return Codes",
          "Practice Exercises"
        ],
        "Functions": [
          "Functions, Part I",
          "Functions, Part II",
          "Functions",
          "Practice Exercises",
          "Review"
        ],
        "Shell Script Checklist and Template": [
          "Shell Script Checklist and Template (Video)",
          "Shell Script Check List and Template"
        ],
        "Wildcards": [
          "Introduction to Wildcards",
          "Wildcard Introduction, Part I",
          "Wildcard Introduction, Part II",
          "Wildcards in Shell Scripts",
          "Wildcard Scripting Demo",
          "Wildcards",
          "Practice Exercises"
        ],
        "Case Statements": [
          "Case Statements",
          "Case Statements",
          "Practice Exercises"
        ],
        "Logging": [
          "Logging",
          "Logging",
          "Practice Exercises"
        ],
        "While Loops": [
          "While Loops, Part I",
          "While Loops, Part II",
          "While Loops",
          "Practice Exercises"
        ],
        "Debugging": [
          "Debugging Essentials",
          "More Debugging Tips",
          "Debugging",
          "Practice Exercises"
        ]
      },
      "requirements": [
        "Some knowledge of the command line would be helpful, but not required.",
        "Access to a Mac, Unix, or Linux computer."
      ],
      "description": "JOIN THE OTHER THOUSANDS OF SUCCESSFUL STUDENTS WHO HAVE ALREADY MASTERED SHELL SCRIPTING AND THE LINUX OPERATING SYSTEM WITH THIS TOP RATED COURSES!\nIf you want to learn how to write shell scripts like a pro, solve real-world problems, or automate repetitive and complex tasks, read on.\nHello. My name is Jason Cannon and I'm the author of Linux for Beginners, Python Programming for Beginners, and an instructor to thousands of satisfied students. I started my IT career in the late 1990's as a Unix and Linux System Engineer and I'll be sharing my real-world shell scripting and bash programming experience with you throughout this course.\nBy the end of this course you will be able to create shell scripts with ease.  You'll learn how to take tedious and repetitious tasks and turn them into programs that will save you time and simplify your life on Linux, Unix, or MAC systems.\n____________________\nHere is what you will get and learn by taking this Shell Scripting course:\nA step-by-step process of writing shell scripts that solve real-world problems.\nThe #1 thing you must do every time you create a shell script.\nHow to quickly find and fix the most common shell scripting errors.\nFor those of you who want to start scripting right away, watch the two video shell scripting crash course.  If you do nothing else than watch these two videos you'll be ahead of most shell programmers.\nHow to accept input from a user and then make decisions on that input.\nHow to accept and process command line arguments.\nWhat special variables are available, how to use them in your shell scripts, and when to do so.\nA shell script creation check list -- You'll never have to guess what to include in each of your shell scripts again.  Just use this simple check list.\nA shell script template (boilerplate).  Use this format for each of your shell scripts.  It shows exactly what to include and where everything goes.  Eliminate guesswork!\nPractice exercises with solutions so you can start using what you learn right away.\nReal-world examples of shell scripts from my personal collection.\nA download that contains the scripts used in the presentations and lessons.  You'll be able to look at and experiment with everything you're learning.\nQuizzes after each section just to make sure you're learning the most important aspects of shell scripting.\nLearn to Program Using Any Shell\nWhat you learn in this course can be applied to any shell, however the focus is on the bash shell and you'll learn some really advanced bash features.  Again, whether you're using bash, bourne (sh), KornShell (ksh), C shell (csh), Z shell (zsh), or even the tcsh shell, you'll be able to put what you learn in this course to good use.\nPerfect for Linux, Unix, Mac and More!\nAlso, you'll be able to use these scripts on any Linux environment including Ubuntu, Debian, Linux Mint, RedHat, Fedora, OpenSUSE, Slackware, Kali Linux and more.  You're scripts will even run on other operating systems such as Apple's Mac OS X, Oracle's Solaris, IBM's AIX, HP's HP-UX, FreeBSD, NetBSD, and OpenBSD.\nHere's What People Are Saying About Jason and His Courses:\n\"Another amazing course by Jason Cannon. This course helped propel my bash scripting to a whole new level. Now, I can't stop automating my work flow! :) Pretty soon everything will do everything itself.\"  --Fernando Garcia, Udemy Student\n\"Excellent course on Linux! It is the best way to get started using Linux that I have come across.\" --Chris Bischoff, Udemy student\n\"This class was a great review of the 2 Linux classes I took in school. I learned plenty of new stuff and got a great refresher on things I haven't used in some time. I did well on my interview and got the job I was looking for. Thanks!\" --Alan Derrick, Udemy student\n\"This was a great course! Learned a lot from it!\" --Ricardo José Crosara Junior, Udemy student\n\"Excellent starter course. Very good and complete guide to get you started on working on Linux.\" --Brian Mulder, Udemy student\n\"Great course! Easy to understand for beginners and a great refresher for experienced users!\" --Spencer Ball, Udemy student\n\"Very well laid out course. Thanks Jason!\" --Eric Etheredge, Udemy student\n\"Love it... it's absolutely one of the best courses I've taken here on Udemy.\" --Idriss N, Udemy student\n\"Awesome Course! Another great one. Thanks Jason!\" --John Wilmont, Udemy student\n\"Excellent Course! Having come from a moderate understanding of Linux, this course has given me a deeper and more streamlined understanding of Linux. Definitely worth the money.\" --Armando Cabrera, Udemy student\n\"Fantastic course and very beautifully explained.\" --S John, Udemy student\n\"Great course, great instructor. I enjoyed every minute of it. I recommend this course 100%.\" --Alfredo, Udemy student\n\"I am lovin' it. Nice way to begin one's journey into Linux.\" --Rohit Gupta, Udemy student\n____________________\nAdditional Course Content - Downloads of All the Material Covered\nAs an added benefit for enrolling in this Shell Scripting video training course, you'll receive access to all the slides and shell scripts used in the lessons. You can download them and refer to them when you want to jog your memory or double-check your work.\nEnroll now and to learn how to write shell scripts like a pro!",
      "target_audience": [
        "Anyone interested in shell scripting or shell programming.",
        "Do not take this course if you are only interested in Windows scripting."
      ]
    },
    {
      "title": "Programming Java for Beginners - The Ultimate Java Tutorial",
      "url": "https://www.udemy.com/course/learn-to-program-with-java/",
      "bio": "Learn Java Programming at your own Pace. Comes Complete with Working Files and a Verifiable Certificate of Completion.",
      "objectives": [
        "Learn Java Programming from a professional trainer from your own desk.",
        "112 lectures (9.75 hours of content) teaching you object-oriented programming, classes, objects, loops, and much more!",
        "Suitable for beginner programmers and ideal for users who learn faster when shown.",
        "Visual training method, offering users increased retention and accelerated learning.",
        "Breaks even the most complex applications down into simplistic steps."
      ],
      "course_content": {
        "Introduction": [
          "Working Files - Download These First",
          "What This Course Covers and What You Need",
          "Biographical Information on the Author"
        ],
        "Getting Started": [
          "Downloading and Installing The JDK",
          "Overview And Setting Up The JDK"
        ],
        "Writing Your First Java Program - Hello, World!": [
          "Entering The Program",
          "Compiling And Running The Program",
          "Correcting Errors",
          "Exercise - Modifying The Hello, World! Program"
        ],
        "Java Building Blocks - Data Types and Variables": [
          "Intruduction to Data Types",
          "Data Types - int, double",
          "Data Types Continued - string, char And bool",
          "Variable Naming Rules",
          "Declaring Variables",
          "Assigning Data To Variables",
          "Exercise - Say Hello To Others"
        ],
        "Introduction to Classes and Objects": [
          "Classes and Objects",
          "Class Data Members",
          "Creating Constructors",
          "toString Method, Creating Class Objects",
          "Accessor Methods",
          "Exercise - A Simple Class"
        ],
        "Arithmetic Operators And Expressions": [
          "The Standard Java Arithmetic Operators",
          "Arithmetic Operator Order Of Operations",
          "Final Variables",
          "Math Class",
          "Mixing Arithmetic Data Types",
          "Exercise 1 - Translating A Formula To Java Code"
        ],
        "Java Input And Output": [
          "Writing Special Characters - Newlines And Tabs",
          "Formatted Output With printf",
          "Using The Scanner To Input Names",
          "Using The Scanner To Input Strings",
          "Exercise - A Simple Question And Answer Program"
        ],
        "Making Decisions": [
          "Relational Operators",
          "Logical Operators",
          "Simple if-else Statement",
          "Nested if-else Statements",
          "The if-else if Statement - Part 1",
          "The if-else if Statement - Part 2",
          "Exercise 1 - A Question And Answer Program",
          "Exercise 2 - A Calculator Program"
        ],
        "Performing Repetition": [
          "The while Loop - Introduction",
          "Count-controlled while Loops",
          "Condition-controlled while Loops",
          "Results-controlled while Loops",
          "The for Loop - Part 1",
          "The for Loop - Part 2",
          "break and continue",
          "Exercise 1 - Looping q And a",
          "Exercise 2 - Looping Calculator",
          "Exercise 3 - for Loop Exercise"
        ],
        "Methods": [
          "Defining A Method - Part 1",
          "Defining A Method - Part 2",
          "Methods With Multiple Parameters",
          "Predicate Methods",
          "Void Methods",
          "Pass By Value",
          "Exercise 1 - Three Example Methods",
          "Exercise 2 - Adding Methods To The Calculator Program"
        ]
      },
      "requirements": [],
      "description": "Learn the basic concepts, tools, and functions that you will need to build fully functional programs with the popular programming language, Java.\nBuild a strong foundation in Java and object-oriented programming with this tutorial for beginners.\nJava Development Kit Installation\nTypes and Operators\nObject-Oriented Programming (OOP), Classes, and Objects\nLoops and Conditionals\nA Powerful Skill at Your Fingertips\nLearning the fundamentals of Java puts a powerful and very useful tool at your fingertips. Java is free, easy to learn, has excellent documentation, and is the base for all object-oriented programming languages.\nJobs in java development are plentiful, and being able to learn Java will give you a strong background to more easily pick up other object-oriented languages such as C++, C#, Ruby, and Pascal.\nContent and Overview\n\nSuitable for beginning programmers, through this course of 115 lectures and 10 hours of content, you’ll learn all of the Java fundamentals and establish a strong understanding of the concept behind object-oriented programming (OOP). Each chapter closes with exercises, putting your new learned skills into practical use immediately.\nStarting with the installation of the Java Development Kit, this course will take you through Java variable types, operators, and how to use them. By creating classes and objects, you’ll a establish a strong understanding of OOP.\nWith these basics mastered, the course will take you through program flow control by teaching you how to use for loops, while loops, and conditional if-else statements to add complexity and functionality to your programs.\nStudents completing the course will have the knowledge to create functional and useful Java programs.\nComplete with working files and code samples, you’ll be able to work alongside the author as you work through each concept, and will receive a verifiable certificate of completion upon finishing the course.",
      "target_audience": []
    },
    {
      "title": "Shopify Development - Learn Shopify Liquid Programming",
      "url": "https://www.udemy.com/course/learn-shopify-liquid-programming/",
      "bio": "Understand how Liquid template programming works and start customizing your Shopify themes",
      "objectives": [
        "Shopify Liquid Programming - Learn how to write Liquid codes (Objects, Tags, and Filters).",
        "Understand and learn different Liquid objects that you can use to display in the Shopify storefront",
        "Have a deep understanding of Liquid tags to control the flow of your Shopify store. Learn how to use Liquid tags to create conditions and loops",
        "Learn how to use Filters to modify an object or an output",
        "Learn how to use handles in Liquid to get a very-specific data from a Shopify store"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Liquid",
          "Programming vs. Template languages",
          "Becoming a Shopify partner",
          "Creating a development store",
          "Downloading the course's theme"
        ],
        "Objects": [
          "Introduction to Objects",
          "Global objects",
          "Content objects",
          "Fixing the missing \"Add Section\" button using settings data",
          "Fixing the missing \"Add Section\" button using JSON Template",
          "Let's review what we learned!"
        ],
        "Tags": [
          "Introduction to Tags",
          "Control Flow Tags",
          "Understanding the basics of Operators in Liquid",
          "Iteration Tags",
          "Theme Tags",
          "Let's practice for a little bit!"
        ],
        "Filters": [
          "How to use Filters"
        ],
        "Creating variables": [
          "Creating variables using assign",
          "Creating variables using capture",
          "Increment & Decrement Tag",
          "[PRACTICE!] Creating variables"
        ],
        "Object handles": [
          "What is a handle and how to use it?"
        ],
        "Liquid examples": [
          "How To Use The Files in the Assets Folder",
          "How to create paginations & reuse it in other templates",
          "How To Create a Simple Navigation using Linklists"
        ],
        "Sections & Schema": [
          "What are sections again?",
          "How to create input settings",
          "How to use the input settings",
          "How to add sections using theme editor",
          "How to use section blocks to create a simple FAQ section"
        ]
      },
      "requirements": [
        "You must know the fundamentals of programming or at least you understand how variables work, how conditions work, and how loop/iteration works",
        "You, at least, should know Shopify specifically the admin area."
      ],
      "description": "Do you want to learn Liquid programming so that you can customize or understand the codes of your Shopify theme? If yes, then you have come to the right place!\n\n\nWelcome to the Shopify Liquid Programming course! In this course, my goal is to help you understand what is Liquid like what it does, and how to use it.\n\n\nWe’re going to cover the following features of Liquid:\nObjects - Getting values from Shopify, and making our own\nTags - Making loops, conditional statements and getting templates/sections\nFilters - Changing returned values\nIf you are a Shopify store owner and want to understand how a Shopify store is running, then learning Liquid can be extremely helpful.\n\n\nWhy Take This Course?\nOne of the biggest mistakes that people make is that they customize their Shopify theme aimlessly. What they usually do is Google the features that they’re looking for, then they will copy a code from someone else and apply it to their Shopify store without understanding the code that they copied and pasted. This can be a BIG issue since Shopify themes are vulnerable to code injections.\n\n\nThat’s why I’m here to help you avoid making that mistake!\n\n\nBefore Taking This Course\nNow, what are the things that you need to know before taking this course? To get the best experience out of this course, it’s highly recommended that you know how to use Shopify. Meaning, you should know your way around Shopify from admin, to the settings, and to the storefront.\n\n\nNext, you must know at least the basics of programming (Like the operators, or data types). Though I will do my best to explain what is going on in each lesson so that even if you have less programming knowledge, you’ll be able to understand the code. In addition, for each lesson, I will provide resources related to the lessons (e.g. PDFs or articles) so that you can use those resources to learn more about Liquid.\n\n\nAnother thing that you can do is post questions in the QnA section. So if you have questions, you can post them in the QnA. I will also include in this course, quizzes or questionnaires so that you can test yourself if you can finally use Liquid.\n\n\nSo are you ready to learn Liquid? If yes, join me and I will see you on the other side.",
      "target_audience": [
        "Anyone or web developers who wants to learn Shopify Liquid",
        "Those wanting to understand how pages in Shopify stores are being rendered or displayed"
      ]
    },
    {
      "title": "C# Developers: Double Your Coding Speed with Visual Studio",
      "url": "https://www.udemy.com/course/visual-studio-tips-tricks/",
      "bio": "Fast Coding Techniques that Every C# Developer Must Know",
      "objectives": [
        "Over 60 keyboard shortcuts that speed up your coding",
        "Learn to write more code with less typing",
        "Learn to use your keyboard like a pro and rely less on the mouse",
        "Learn to navigate in your projects and find files, classes and members more quickly",
        "Learn to compile, run and debug applications faster",
        "Learn about great add-ons that make coding fun and easy"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Memorization Techniques",
          "How to Watch This Course",
          "Using the Exercise Files",
          "Downloading the Shortcut Keys PDF",
          "Asking Questions"
        ],
        "Visual Studio Tips & Tricks": [
          "Text Navigation - Part I",
          "Text Navigation - Part II",
          "Text Selection",
          "Deleting Text",
          "Commenting Code",
          "Bookmarks",
          "Expanding and Collapsing Code",
          "Working with Tabs & Windows",
          "Find & Replace",
          "Running & Debugging",
          "Compiling the Application",
          "Code Snippets",
          "Formatting Code"
        ],
        "Version Control Systems (VCS)": [
          "Integrate Subversion into Visual Studio",
          "Team Foundation Service"
        ],
        "ReSharper": [
          "Introduction",
          "Keyboard Schemes",
          "Camel Humps",
          "Suggesting Names",
          "Initializing Private Fields from Constructor",
          "Auto-Importing Namespaces",
          "Navigation",
          "Code Selection",
          "Live Templates"
        ],
        "Summary": [
          "Shortcut Keys"
        ],
        "Additional Resources": [
          "Final Words",
          "Bonus"
        ]
      },
      "requirements": [
        "Visual Studio 2010 or higher",
        "Basic knowledge of Visual Studio"
      ],
      "description": "If you want to be a real pro C# coder, you need to master your keyboard and Visual Studio. You need to be able to navigate in your code base, find and modify code in seconds. Great coders hardly ever use the mouse. They do everything with the keyboard. They use shortcuts and some tricks to type less and generate more code in less time. And that is what this course is all about.\n\n\n\nIn this course, Mosh, author of six 5-star C# courses, shares with you lots of shortcuts and tricks that help you find, write and modify code in less time.\n\nIn particular, you'll learn\n\nHow to quickly find files, classes and methods. Say goodbye to Solution Explorer and navigating between folders to find classes.\n\nHow to navigate in the code like a pro: no more clicking back and forth to navigate between members of classes. Jump from one method to another and come back to where you were.\n\n\nHow to compile, run and debug applications faster and more effectively.\n\n60+ shortcuts that will boost your productivity (both on Windows and Mac)\n\nHow to reduce your chance of getting RSI (repetitive strain injury)\n\n\n\n\nIdeal Student\nThis course is most suited to junior C# developers new to Visual Studio. But even if you've been programming in Visual Studio for a few years, you may still learn tips and tricks that you're not aware of. There is a whole section dedicated to ReSharper, which is one of the greatest plug-ins for Visual Studio. If you've never used ReSharper before, this course is a must for you.\n\n\n\n\nFull Money-back Guarantee\n\nThis course comes with a 30-day full money-back guarantee. No questions asked. If you don't learn anything from this course, ask for a refund within 30 days. All your money back.\n\n\n\"Every Visual Studio programmer in the world needs to take this short course. Seriously! Take it. Now! The value per money is simply immense.\" Gino Costescu\n\n\n\"Excellent tips and tricks: I've been using Visual Studio for years and even being a seasoned user, I found the tips and tricks offered in this course to be extremely helpful.\" - Jake Janes\n\n\n\"Thank you for your classes! There are awesome, ninja coding skills on the way!\" - Fredy Guibert\n\n\n\"Great course! It's neat and systematic and shows some usefull tricks for VS.\" - Nikola Kratka\n\n\n\"I've been using VS for many years. So, I'm quite familiar with navigating VS with the keyboard, but I still learned some very cool tricks.\" - Jason E. Rice\n\n\n\"Great course, great instructor: You did a great job. I'd take any other course you'd teach.\" - Saif Ahsanullah\n\n\n\"Very clear, helpful and to the point: The course is very helpful. I was looking for this kind of course because I'm a professional web developer with 3 year-exprience, with a very poor performance keyboard with Visual Studio, so your course is helping me a lot.\" - Antonio Marques Taltavull\n\n\n\"Awesome! Great instructor, short and too the point, really helped my programming! Hardly took an hour of my time to learn the basic concepts. Love it!\" - Eshan Singh\n\n\nAbout Your Instructor\n\nMosh (Moshfegh) Hamedani is a software engineer with 15 years of experience. He has been involved in the design and implementation of numerous projects of varying size and complexity, including web applications, mobile apps, desktop applications and frameworks.\n\n\nSo, do you want to learn the time-saving techniques of pro C# developers? Take the course now and get started.",
      "target_audience": [
        "Any .NET developer who wants to increase their productivity and write code fast",
        "Any .NET developer who wants to master their keyboard skills"
      ]
    },
    {
      "title": "Learn C# for Beginners Crash Course",
      "url": "https://www.udemy.com/course/learn-csharp-for-beginners-crash-course/",
      "bio": "Obtain C# Programming Language Skills With This C# Tutorial. Acquire Essentials Skills To Get a C# Developer Job Today.",
      "objectives": [
        "Learn the core C# skills needed to apply for C# developer positions in just 10 hours.",
        "Have a fundamental understanding of the C# programming language.",
        "Understand how to create your own C# programs.",
        "Have the skills and understanding of C# to confidently apply for Microsoft C# programming jobs.",
        "Acquired the pre-requisite C# skills to move into specific advanced branches - ASP .NET, .NET Framework, Unity Game development etc",
        "Be able to demonstrate industry best practices in the C# code you write.",
        "Obtain a solid understanding of what debugging and refactoring is and how to do it."
      ],
      "course_content": {
        "Mastering C# Fundamentals: Course Overview and Essential Tools Setup": [
          "C# Crash Course Kickoff: Your Rapid Path to Becoming a Proficient C# Developer",
          "Free Companion Course: Essential Computer Concepts for Aspiring Programmers",
          "Demystifying C#: Understanding the Language, .NET, Compilation, and Runtime",
          "Essential C# Development Tools: .NET SDK and Choosing the Right IDE",
          "Step-by-Step Guide: Installing Visual Studio for C# Development on Windows",
          "Setting Up Your Mac: Installing Visual Studio for Seamless C# Development",
          ".NET on Linux: Installing the .NET SDK and Visual Studio Code Step-by-Step",
          "Optimizing Visual Studio: Key Settings for Enhanced C# Coding Productivity",
          "Your First C# Project: Creating a \"Hello World\" Console Application",
          "Visual Studio for Mac Users: Troubleshooting and Ensuring Smooth Code Execution",
          "Breaking Down \"Hello World\": Understanding Your First C# Program's Components",
          "Demystifying C# Code: Understanding Namespaces, Classes, Methods, and Braces",
          "Practical C# Dot Notation: Accessing Methods and Building a Simple Eliza Program",
          "Bringing Eliza to Life: Implementing User Input and Program Looping in C#",
          "Deep Dive into C# Program Structure: Namespaces, Classes, Methods, and More",
          "C#, .NET, CLR, Program Structure, Namespaces, and Using Directives: A Summary",
          "Quiz: Assess Your Knowledge of Interpreted vs Compiled Languages and C# Setup"
        ],
        "C# Coding Fundamentals: Variables, Types, Input/Output, and Basic Syntax": [
          "Answering Your Common Questions About Starting a Career in Programming",
          "Free YouTube Video Resource: Access Programming Career Question and Answers",
          "Introduction to C# Variables, Types, Console Class, and Program Examples",
          "Understanding Variables and Expressions: Create a Guess the Number Game",
          "Clarifying var Versus Explicit Type Declarations (int, string) in C#",
          "Putting It Together: Building and Running the 'Guess the Number' Game in C#",
          "The Importance of Using Variables in C#: Enhance and Modify the Number Game",
          "Code Challenge: Initializing Variables and Refining the Guess the Number Game",
          "C# Naming Conventions: Classes, Methods, Variables (PascalCase, camelCase)",
          "Challenge: Refactor Code to Align With Established C# Naming Conventions",
          "Comprehensive Solution and Explanation for the Naming Convention Challenge",
          "Section Summary: Reviewing Variables, Naming Conventions, and Code Modification",
          "Quiz: Test Your Knowledge on Variable Names, Types, and C# Naming Conventions"
        ],
        "Mastering C# Console Input and Output: ReadKey, ReadLine, Formatting": [
          "Introduction to C# Console Input/Output: ReadKey, ReadLine, Write, WriteLine",
          "Capturing User Keystrokes with ReadKey: ConsoleKeyInfo, KeyChar, Modifiers - 1",
          "Mastering ReadKey Across Windows, Mac, and Linux: Handling Modifier Keys - 2",
          "Practical ReadKey: Implementing User Input in the HammerBitcoin C# Game",
          "Reading User Input Strings with Console.ReadLine and Converting to Numbers",
          "Safe Numeric Input: Reading and Parsing Numbers in the HammerBitcoin Game",
          "Displaying Data with Console.WriteLine: Introducing String Interpolation in C#",
          "Enhancing Output: String Interpolation Alignment and Field Width Control",
          "Formatting Output with String Interpolation: Currency, Decimals, and More",
          "Recap of Console Input/Output: ReadKey, ReadLine, String Interpolation",
          "Quiz: C# Console Input, Output, ReadKey, ReadLine, and String Interpolation"
        ],
        "Comprehensive Guide to C# Types, Operations, and Introductory Concepts": [
          "Introduction to C# Types and Expressions: Integers, Floating-Points, Booleans",
          "Exploring C# Primitive Data Types: Byte, sbyte, short, and Their Ranges",
          "Deep Dive into Integer Types in C#: Choosing Between int and long",
          "Working with Floating-Point Numbers: Understanding float and double in C#",
          "Precision Matters: Exploring float and double Precision in C#",
          "Ensuring Accuracy with the Decimal Type: High-Precision Arithmetic in C#",
          "Understanding Decimal Accuracy: Avoiding Floating-Point Precision Issues",
          "C# Expressions: Combining Variables and Operators for Dynamic Calculations",
          "Mastering Boolean Expressions: The Foundation of Conditional Logic in C#",
          "Combining Conditions: Using AND (&&) and OR (||) in C# Boolean Expressions",
          "Storing True/False Values: Introduction to Boolean Variables in C#",
          "Practical Booleans: Implementing Logic in the HammerBitcoin Game",
          "Solution and Full code walk through of the Boolean Expression Challenge",
          "Introduction to Object-Oriented Programming: Understanding Classes and Objects",
          "Creating and Using Class Instances: A Practical Car Example in C#",
          "Fields: Storing Data Within C# Classes",
          "Class Constructors: Initializing Objects in C#",
          "Access Modifiers: Understanding Private and Public Members in C#",
          "Summary of C# Types, Expressions, and Classes",
          "Quiz: C# Types, Expressions, Classes, and Objects"
        ],
        "Mastering C# Loop Control: For, While, and Do-While Loop Techniques": [
          "C# Flow Control Essentials: Loops and the Visual Studio Debugger",
          "Maximizing C# Documentation: The Microsoft Language Reference",
          "Mastering C# For Loops: Initialization, Condition, and Iteration",
          "Mastering C# Code Execution: A Deep Dive into Visual Studio Debugger",
          "Advancing with C# For Loops: Incrementing, Decrementing, Challenges",
          "Mastering Nested For Loops in C#: A Comprehensive Practical Guide",
          "Adapting VS Code for Enhanced C# Console Application Debugging",
          "Mastering C# Debugging: Breakpoints and Code Analysis in HammerBitcoin",
          "Exploring For Loops in C#: A Deep Dive into the ElizaIsSilly Project",
          "Analyzing Eliza's Response Logic: Understanding C# Code Flow",
          "C# While Loops: Controlling Program Flow with Conditional Execution",
          "Optimizing Menu Display: C# While Loop Challenge Solution Explained",
          "C#: Comparing Code Approaches: Efficiency, Readability, and Best Practices",
          "Introduction to C# Do-While Loops: Ensuring Code Block Execution",
          "Mastering Do-While Loops in C#: A Practical ElizaIsSilly Conversion",
          "Comprehensive C# Loop Control and Debugging Techniques: Section Review",
          "C# For/While Loop and Debugging Knowledge Check: Quiz for Section 5"
        ],
        "Mastering C# Conditionals: if/else and switch Statements": [
          "Introduction to Decision Making in C# with Conditional Statements",
          "Implementing the if Statement in C#: Rock Paper Scissors Game Logic",
          "Enhancing Conditional Logic with else Clauses in C# if Statements",
          "Building Complex Conditions: Combining if, else if, and Logical Operators",
          "Challenge: Displaying Computer's Choice in Rock Paper Scissors Game",
          "Solution: Implementing Conditional Logic to Determine Computer's Choice",
          "Creating a Repeatable Game Loop with do-while and User Input Validation",
          "Efficient Decision Making: Introducing the switch Statement in C#",
          "Handling Unmatched Cases with the default Keyword in switch Statements",
          "Consolidating Code: Executing the Same Logic for Multiple switch Cases",
          "Terminating Loop Execution Early: Using the break Statement in C#",
          "Skipping Loop Iterations with the continue Statement in switch construct",
          "Understanding the Scope of break and continue Statements within Loops",
          "A Brief Overview of the goto Statement: When (Not) to Use It",
          "Simplifying if/else Logic: The Ternary Conditional Operator in C#",
          "Challenge: Optimizing Hiring Logic with the C# Ternary Operator in Code",
          "C# Ternary Operator Solution: Streamlining Conditional Employee Hiring Code",
          "C# Conditionals Recap: If/Else, Switch, Ternary, Constants, and Efficiency",
          "Comprehensive Quiz on If/Else, Switch Statements and Flow Control in C#"
        ],
        "Mastering C# Methods: Parameters, Arguments, and Flow Control": [
          "Introduction to Methods, Parameters, Arguments, and Return Values in C#",
          "Mastering Method Calls: Understanding Execution Flow with the Debugger",
          "Exploring Nested Methods: How Methods Call Other Methods in C#",
          "Deep Dive into Method Parameters: Enhance Functionality with Inputs",
          "Hands-On Challenge: Implementing Parameterized Braking in Your C# Car Clas",
          "C# Coding Challenge Solution: Preventing Negative Speed with Conditional Logic",
          "Creating a Text-Based Driving Game: Applying Method Concepts in C#",
          "Access Modifiers: Controlling Method Visibility with public and private",
          "Returning Values from Methods: Enhancing Functionality and Control Flow",
          "Best Practices: Eliminating Duplicate Code for Improved Code Maintainability",
          "Refactoring C# Code: Streamlining Logic by Eliminating Redundant Routines",
          "Understanding Value vs. Reference: Mastering Argument Passing in C# Methods",
          "Mastering Pass by Reference: Modifying Variables Within C# Methods",
          "Refactoring a C# Car Game, creating parameters, adding a new direction",
          "Completing the Refactoring: Implementing Multi-Directional Movement",
          "Understanding Variable Scope: Local vs. Global Variables in C#",
          "Eliminating Global Variables: Enhancing Code Maintainability in C#",
          "Variable Scope in C#: A Comprehensive Summary and Practical Challenge",
          "Refactoring Challenge Solution: Enhancing the Bitcoin Miner Project in C#",
          "Continuing the Refactoring Solution: Enhancements and Best Practices",
          "C# Methods, Parameters, and Flow Control: A Comprehensive Section Summary",
          "C# Methods, Parameters and Variable Scope Comprehensive Quiz"
        ],
        "C# Operators: Arithmetic, Relational, and Logical Operations": [
          "Introduction to C# Operators and Their Significance in Programming",
          "Understanding C# Arithmetic Operators and Operator Precedence Rules",
          "Exploring C# Primary Operators: Member Access, and Increment/Decrement",
          "Best Practices: Why to Avoid Increment/Decrement (++ and --) in Expressions",
          "Deep Dive into C# Operator Precedence: Arithmetic and Parentheses",
          "Practical Applications of the C# Remainder Operator (%) in Programming",
          "Implementing the Remainder Operator in Rock, Paper, Scissors Game Logic",
          "Comprehensive Guide to C# Relational and Conditional Operators",
          "C# Short-Circuit Evaluation: Optimizing with Conditional AND (&&) and OR (||)",
          "Mastering C# Assignment Operators: =, +=, -=, =, /= for Efficient Coding",
          "C# Operators Proficiency Check: Arithmetic, Relational and Logical Quiz"
        ],
        "C# String Manipulation: Mastering Techniques": [
          "Introduction to C# Strings: Unicode, Immutability, and Basic Operations",
          "Mastering C# String Indexing: Accessing Characters and Avoiding Errors",
          "Determining C# String Length: Avoiding IndexOutOfRangeException Errors",
          "Finding Substrings with IndexOf: Case Sensitivity in C# String Searches",
          "C# String Comparison: Mastering Case-Insensitive String Searching",
          "Finding All Substring Matches: LastIndexOf and Iterative Search in C#",
          "Modifying C# Strings: Using Insert and Remove for Precise Manipulation",
          "Comprehensive Guide to C# String Methods: Exploring the .NET Documentation",
          "C# String Equality: Understanding == vs. .Equals() for Comparisons",
          "Understanding Value and Reference Types in C#: Part 1 - String Immutability",
          "C# String Immutability Explained: Consequences and Practical Examples",
          "Efficient String Building in C#: Introducing the StringBuilder Class",
          "Mutable Reference Types in C#: Deep Dive into StringBuilder Behavior",
          "Comparing Objects in C#: Equality and Reference Types with StringBuilder",
          "StringBuilder Methods: Append, Clear, and Efficient Method Chaining in C#",
          "StringBuilder Challenge Solution: Reference Comparison and Method Chaining in C#",
          "Advanced StringBuilder: AppendFormat, AppendLine, etc.",
          "C# Method Overloading: Understanding and Using Overloaded Methods",
          "C# StringBuilder and ToString(): Searching and Source Code Exploration",
          "C# String Manipulation Quiz: Test Your Knowledge of Strings and StringBuilder"
        ],
        "C# Classes: Design, OOP, and Implementation": [
          "Introduction to Object-Oriented Programming and C# Classes",
          "Designing a C# Airport Model: Setting Up Classes",
          "Visualizing C# Code: Introduction to Class Diagrams",
          "Understanding C# Class Members: Fields, Properties, Methods",
          "C# Constructors and Fields: Initialization and Readonly",
          "C# Properties: Accessing Data with Getters and Setters",
          "Enhancing Code Quality: The Importance of Using C# Properties",
          "Applying OOP: The Single Responsibility Principle in C#",
          "C# Backing Fields and Auto-Implemented Properties",
          "Mastering C# Enumerated Types: Defining Custom Value Sets",
          "Correcting Maximum Speed Calculation for Units in C#",
          "Comprehensive Solution: C# Enum Units Challenge",
          "Additional Content and Course Updates",
          "Course Roadmap C# Sections 7-12, Strings, Classes, Data Structures"
        ]
      },
      "requirements": [
        "A Windows computer, or a Mac so that the free Microsoft Visual Studio IDE can be downloaded and install (full instructions included).",
        "An open mind to learn something new and exciting which may make a huge difference in your future career.",
        "Linux users: Visual studio is not available for your platform, but you can follow along with Visual Studio Code."
      ],
      "description": "If you are like most people wanting to learn a programming language, you don't have much spare time.  What time you have is extremely valuable.   What you need is a course that will teach the essential C# programming skills quickly.\nThink of a word processing program like Microsoft word - it has lots of advanced features that most people never use.   It's the same with computer programming.  A typical programming language has many parts that rarely get used, and a lot of what is taught in a typical computer course or textbook never gets used in the real world by professional developers.\n\nSo why learn it all?  It makes much more sense to learn just want you need to learn to become productive, and be then able to apply for C# developer positions.   If you really want to learn these other parts of the language, then you can later, and its highly likely you will pick it up faster anyway at that point because of the skills you have already learned.\n\nThat's what this course is all about - giving you the skills you need quickly without any fluff or useless information.\nThe course is aimed at complete beginners.  No previous experience is necessary or assumed. If you are coming from another programming language like Java or C++, then you will also feel right at home here, and you can skip any of the introductory parts if you wish.  But keep in mind there are subtle differences in C# compared to Java, so it's probably a good idea to watch all videos anyway.\n\nHere is a review from a student in this course.\n\n\"Just like any other course thought by Tim Buchalka, the course is excellent!!!!\" - Jean Uwumuremyi\n\nHere is what a student said about another of the instructors courses.\n\n\"I am a newbie to programming but have an interest in learning and finding ways to perhaps apply data analysis in my current or perhaps future jobs. This course on Python gave me an awesome comprehensive base as a new programmer and I really enjoyed Tim's manner and the pace of the lectures!\" - Michael Jareo\n\nWhat will you learn in the course?\nYou will learn about many important C# code concepts including.\nCreating a C# basic program\nAll about the C# compiler\nAnswers to questions like What is a C# class, What is a C# property, how do you use a C# namespace and so on.\nBut importantly how to debug and refactor C# code, and how to get the best out of Microsoft's Visual Studio which is used in the course - We include tips and installation videos covering both Windows and Mac.  And Visual Studio Code is also discussed for linux users who do not have native version of Visual Studio available to them.\nCheck out the curriculum on this page for a list of what is covered in the course.\nAlong the way we will work with a lot of C# example code.  We'll start with badly written code, and go through it thoroughly to improve it and make it bug free.  This is an essential skill and you will learn that in this course.\nThe course uses a combination of small snippets of code, and then larger real world projects that you can run and edit and improve - you will learn how to think as a programmer and how to make the most out of the c# programming language.\nWhat about course updates?\nThe course will get regular updates - We already have a document in the course that outlines what content is still to be added - We envisage it will be around sixteen hours once done.\nThe instructors have built up a good history of updating their courses in the past on Udemy and this will continue in this course.\nWhat about the instructors?\nYour instructors Tim and Jean-Paul have a combined 70 years of professional software development experience between them.  They have worked for prestigious  companies such as IBM, Mitsubishi, Fujitsu and Saab. Their professional experience means you are learning from true experts with real commercial programming experience.\nTheir other courses on Udemy have attracted hundreds of thousands of students and tens of thousands of reviews - they have an enviable record of creating courses that teach people what they need to learn to become productive and successful programmers.  Many of their students have applied for and obtained programming jobs after going through their training.\n\nHere is another comment from a student in another of the instructors courses.\n\"I messaged once a few months ago when finishing you Java course on how it helped me also as a refresher on my c# skills.  Long story short, the owner of the Software Development company I work for now, after seeing my skills by accident, he asked me if I was looking for a job, I said not really but I would be interested in seeing what all was about, he asked for my resume,  set up an interview and he made me a quick test to see how far I was skill-wise and I finished the test with flying colors. He offered me a long term full time job right on the spot with a starting salary superior to what I was doing ($70,000 USD/yr to start and $75,000 USD/yr after six months if everything goes fine), really nice hours and benefits. So now I am coding with a real purpose and what I was doing for free in my free time, now is earning me a living, I've been working there for a month now and it has been great for them and for me. \" - Miguel Lara\nWhat about if you have questions?\nAs if this course wasn’t complete enough, Tim and Jean-Paul offer full support, answering any questions you have 7 days a week (whereas many instructors answer just once per week, or not at all).\nThis means you’ll never find yourself stuck on one lesson for days on end. With their hand-holding guidance, you’ll progress smoothly through this course without any major roadblocks.\nStudent Quote: \"In the course there are several challenges, and when in need of a hint; questions asked are replied swift and elaborate. Feels like one-on-one support. It exceeds my expectations!” - Arjo Tibben\n\nThere’s no risk either!\nThis course comes with a full 30 day money-back guarantee. Meaning if you are not completely satisfied with the course or your progress, simply let the instructors know and they will refund you 100%, every last penny no questions asked.\nYou either end up with C# skills, go on to develop great programs and potentially make an awesome career for yourself, or you try the course and simply get all your money back if you don’t like it…\nYou literally can’t lose.\nReady to get started, developer?\nEnrol now using the “Add to Cart” button on the right, and get started on your way to creative, advanced C# brilliance. Or, take this course for a free spin using the preview feature, so you know you’re 100% certain this course is for you.\nSee you on the inside (hurry, the C# class is waiting!)",
      "target_audience": [
        "This course is perfect for absolute beginners with no previous programming experience.",
        "It's also great if you know an existing programming language like Java and want to become skilled in C#.",
        "Unity game developers who want to understand C# in more detail to help write games.",
        "Xamarin developers wanting to become more proficient with C#."
      ]
    },
    {
      "title": "The Complete C# and Object-Oriented Programming Course",
      "url": "https://www.udemy.com/course/the-complete-c-sharp-developer-course/",
      "bio": "The one and only course you need to learn C# 8 and object-oriented programming (C# From A To Z | Source Code Included)",
      "objectives": [
        "Install and work with Visual Studio 2019 (Windows and Mac)",
        "Learn the fundamentals of programming using C# 7.2 and C# 8",
        "Understand Iaas, PaaS, SaaS and Serverless",
        "Work with Azure Functions",
        "Working with nulls in C# 8",
        "Working The New Asynchronous Streams",
        "Understanding and working with positional patterns",
        "Work with object-oriented programming (OOP) as a professional.",
        "Master the classes and understand the different types of classes (static, abstract, partial, sealed and more).",
        "Learn the structures and enumerations and how to use them.",
        "The differences between classes and structs.",
        "Learn to encrypt and decrypt your data using C#.",
        "Understand Inheritance, Encapsulation, Polymorphism and Abstraction.",
        "Get familiar with Composition, Aggregation and Association.",
        "Understand the loops (For, Foreach, While and more).",
        "Master the powerful lambda expressions.",
        "Understand anonymous methods and how to create them.",
        "How to manipulate strings (Replace, Remove, Insert, Substring and more).",
        "Read and write files easily with C#.",
        "Build caesar cipher (encryption and decryption) yourself.",
        "Learn how to create different types of methods.",
        "The difference between static and non-static methods.",
        "How to use recursive methods.",
        "How to use the extension methods.",
        "Understand the difference between pass by reference and pass by value.",
        "How to use optional and named arguments.",
        "Work with arrays including multidimensional arrays and jagged arrays.",
        "Get familiar with the advanced concepts (Multithreading, Recursing, Generics & many more).",
        "Master the non-generics collections (ArrayLists, Hashtables, Stacks, Queues and more).",
        "Master the generics collections (List<T>, dictionary<K,V>, SortedList<K,V> and more).",
        "How to create generic classes, methods and arguments.",
        "How to debug and find errors easily in your code.",
        "Understand how stacks and queues work with real examples.",
        "How to handle exceptions (Exception Handling).",
        "How to use params keyword.",
        "How to use Stopwatch class.",
        "Understand how older tuples and new enhanced tuples work.",
        "Learn how to use NuGet and install packages.",
        "How to work with Delegates and Events.",
        "Delegates vs direct methods call.",
        "Work with Func, Action and Predicate delegates.",
        "Learn how to use timers in C#.",
        "Make your application speaks using SpeechSynthesizer.",
        "Dynamic and Var keywords and differences between them.",
        "How to use LINQ (Language-Integrated Query).",
        "How to check C# version and how to change it.",
        "Understand what is synchronous programming.",
        "Understand what is asynchronous programming.",
        "Differences between synchronous and asynchronous programming.",
        "Learn multi-threading theory and create multi-threaded applications.",
        "Understand deadlocks and how to solve them.",
        "Understand lock keyword, Mutex, Monitor and Semaphores.",
        "How to use tasks, manage them and even cancel them.",
        "How to work with async and await keywords.",
        "Understand what is Serialization and Deserialization and how to use them.",
        "How to use attributes and create custom attributes.",
        "Understand the preprocessor directives and how to use them.",
        "Understand assemblies and versions.",
        "Work efficiently and smoothly with Visual Studio 2017.",
        "Work with comparison operators.",
        "Learn how to create variables and convert their datatypes in different ways.",
        "Understand how compilers work",
        "Conditional statements (if and switch statements).",
        "How to use DateTime and TimeSpan.",
        "Understand the logical operators.",
        "How to use arithmetic operators.",
        "DLL files (Dynamic Link Libraries), How and why we use them.",
        "How to decompile DLL files.",
        "How to protect your DLL files.",
        "Building new switch expressions",
        "Using tuple like patterns on switch statements",
        "Using property patterns to match on properties",
        "Working with new range operator",
        "Using hat operator"
      ],
      "course_content": {
        "The Fundamentals of C# Programming - Part 1": [
          "Course Introduction",
          "Important Before You Start | The Course Guide",
          "Introduction to The Chapter",
          "Programming Languages (Low Level Programming VS High Level Programming)",
          "Compilers vs Interpreters",
          "How Compilers Work",
          "What C# Can Do?",
          "Install Visual Studio 2019 Preview For Windows",
          "Install Visual Studio 2019 Preview For Mac",
          "Walk-through Visual Studio 2019 Preview",
          "What is .Net Core? (Article)",
          "Data Types and Variables - Part 1",
          "Data Types and Variables - Part 2",
          "Data Types and Variables - Part 3",
          "Casting and Type Conversion",
          "Comments",
          "Var Keyword",
          "History About C# Language",
          "Summary",
          "Chapter One Quiz"
        ],
        "The Fundamentals of C# Programming - Part 2": [
          "Introduction to The Chapter",
          "Data Types In-Depth",
          "Float, Double and Decimal",
          "DateTime",
          "DateTime Exercise",
          "Error Types",
          "Naming Conventions",
          "ReadLine",
          "Arithmetic Operators",
          "Arithmetic Operators Exercise",
          "Precedence of Operators",
          "Conditional Statements - if",
          "Conditional Statements - switch",
          "Comparison Operators",
          "Logical Operators",
          "More Logical Operators",
          "Even or Odd Exercise",
          "Assignments (1,2,3)",
          "Summary",
          "Chapter Two Quiz"
        ],
        "The Fundamentals of C# Programming - Part 3": [
          "Introduction to The Chapter",
          "TryParse",
          "Constants",
          "Command Prompt",
          "String Manipulation - Part 1",
          "String Manipulation - Part 2",
          "String Manipulation Exercise",
          "Escape Sequences",
          "String Interpolation",
          "Loops - Part 1 (For Loop)",
          "Loops - Part 2 (While Loop and Do While Loop)",
          "Loops - Part 3 (Nested Loops)",
          "Loops Exercise",
          "Math - Part 1",
          "Math - Part 2",
          "Random Numbers",
          "Arrays",
          "Assignments (4,5,6)",
          "Summary",
          "Chapter Three Quiz"
        ],
        "Object-oriented Programming in C# - Part 1": [
          "Introduction to The Chapter",
          "Object-oriented Programming",
          "Methods - Part 1 (The Basics)",
          "Methods - Part 2 (Parameters and Return Type)",
          "Simple Method Exercise",
          "Methods - Part 3 (Value vs Reference)",
          "Methods - Part 4 (Overloaded Methods)",
          "Overloaded Methods Exercise",
          "Classes",
          "Constructors",
          "DateTime Exploration",
          "Static Methods",
          "Scope",
          "Inheritance",
          "Encapsulation",
          "Vehicle Inheritance Exercise",
          "Polymorphism",
          "Abstraction",
          "Cars Exercise",
          "Region Keyword",
          "Summary",
          "Chapter Four Quiz"
        ],
        "Object-oriented Programming in C# - Part 2": [
          "Introduction to The Chapter",
          "Sealed Classes",
          "Static Classes",
          "Nested Classes",
          "Partial Classes",
          "Namespaces",
          "Structs",
          "Classes VS Structs",
          "Enumerations",
          "Country Exercise",
          "Country Exercise Solution - Part 1",
          "Country Exercise Solution - Part 2",
          "This keyword",
          "Interfaces",
          "Interfaces VS Abstract Classes",
          "Exception Handling",
          "Exception Exercise",
          "Composition",
          "Aggregation",
          "Association",
          "Assignments (7,8)",
          "Summary",
          "Chapter Five Quiz"
        ],
        "Advanced C# - Part 1": [
          "Introduction to The Chapter",
          ".NET Framework",
          "Debugging",
          "DebugWriteLine",
          "Build, Rebuild and Clean",
          "string VS String",
          "Documentations",
          "Snippets",
          "Custom Snippets",
          "Files : Write",
          "Files : Read",
          "File Creator Exercise",
          "Introduction to Cryptography",
          "Cryptography in C#",
          "Caesar Cipher Exercise",
          "Console Colors",
          "Digit Separator",
          "Default Keyword",
          "Assignments (9,10)",
          "Summary",
          "Chapter Six Quiz"
        ],
        "Advanced C# - Part 2": [
          "Introduction to The Chapter",
          "Introduction to Collections",
          "Non-generic ArrayList",
          "Non-generic Hashtable",
          "Non-generic SortedList",
          "Non-generic Stack",
          "Non-generic Queue",
          "Non-generic BitArray",
          "List of Animals and Trainers Exercise",
          "Generic List <T>",
          "Generic Dictionary",
          "Generic SortedList",
          "Generic SortedDictionary",
          "Generic Stack",
          "Generic Queue",
          "KeyValuePair",
          "NameValueCollection",
          "List of Animals Exercise",
          "Generic Classes",
          "Generic Exercise - Part 1",
          "Generic Exercise - Part 2",
          "Tuples",
          "Nested Tuples",
          "Tuples with Methods",
          "Tuples Exercise",
          "Value Tuples",
          "Nested Value Tuples",
          "Value Tuples with Methods",
          "Value Tuples Exercise",
          "Assignments (11, 12, 13, 14, 15)",
          "Summary",
          "Chapter Seven Quiz"
        ],
        "Advanced C# - Part 3": [
          "Introduction to The Chapter",
          "Recursive Methods",
          "Recursive Methods Exercise",
          "Optional Arguments",
          "Named Arguments",
          "Generic Arguments",
          "Params Keyword",
          "Params Exercise",
          "Local Functions or Nested Functions",
          "Extension Methods",
          "Extension Method Exercise",
          "Stopwatch",
          "Delegate",
          "More About Delegates",
          "Delegates VS Method Calls",
          "Delegates Exercise",
          "Delegate Multicast",
          "Generic Delegates",
          "Anonymous Methods",
          "Lambda Expressions",
          "Lambda Expressions with Generic List",
          "Generic Delegate : Func",
          "Generic Delegate : Action",
          "Generic Delegate : Predicate",
          "Func with Anonymous Method & Lambda Expression",
          "Action with Anonymous Method & Lambda Expression",
          "Events",
          "More Events",
          "Timers",
          "Expression-bodied Members",
          "Assignments (16,17,18)",
          "Summary",
          "Chapter Eight Quiz"
        ],
        "Advanced C# - Part 4": [
          "Introduction to The Chapter",
          "Nullable Types",
          "Conditional Operator (Ternary Operator)",
          "Conditional Operator Exercise",
          "Safe Navigation Operator",
          "Introduction to LINQ",
          "LINQ Method Syntax",
          "LINQ Method Syntax Exercise",
          "LINQ Query Syntax",
          "LINQ Query Syntax Exercise",
          "Sorting Data Using LINQ",
          "LINQ Queries with Methods",
          "TimeSpan",
          "Introduction to Multithreading",
          "Creating Threads",
          "Managing Threads",
          "Thread Exercise 1",
          "Thread Exercise 2",
          "Multithreading (Article)",
          "Multithreaded Applications",
          "ParameterizedThreadStart",
          "Deadlocks and Lock Keyword",
          "Monitor Class",
          "Mutex",
          "Semaphore",
          "Introduction to Asynchronous Programming",
          "Tasks",
          "Passing Parameters to Tasks",
          "Tasks with Return Value",
          "Checking Tasks Status",
          "Cancelling Tasks",
          "Waiting for Tasks",
          "Task Run",
          "Async and Await",
          "Concurrent Collections (ConcurrentBag)",
          "Assignments (19,20,21,22)",
          "Summary",
          "Chapter Nine Quiz"
        ],
        "Advanced C# - Part 5": [
          "Introduction to The Chapter",
          "SpeechSynthesizer",
          "Speak Method Exercise",
          "Starting and Stopping a Process",
          "Notepad Exercise",
          "Multidimensional Arrays",
          "Multidimensional Arrays Exercise",
          "Jagged Arrays",
          "Jagged Array of Multidimensional Arrays Exercise",
          "Indexers",
          "Dynamic Keyword",
          "Var vs Dynamic",
          "Readonly",
          "Static Directives",
          "Preprocessor Directives",
          "IsNullOrEmpty",
          "Destructors",
          "Using Statement",
          "Assemblies",
          "CultureInfo",
          "Versions",
          "RegionInfo",
          "Attributes",
          "Custom Attributes",
          "Reflections",
          "Serialization and Deserialization",
          "GUID",
          "StringBuilder",
          "Pattern Matching",
          "Ref Return or Ref Local",
          "IEnumerable and IEnumerator",
          "Yield Keyword",
          "DLL Files",
          "Decompile DLL Files",
          "Protect DLL Files",
          "Assignments (23,24)",
          "Summary",
          "Chapter Ten Quiz"
        ]
      },
      "requirements": [
        "Visual Studio Community (The free edition of Visual Studio)"
      ],
      "description": "[Update C# 8]\nThe next major version of C# is officially released which is C# 8.0. We were expecting it for quite some time, we had the chance to learn all the minor features and enhancements included in C# 7.1, 7.2 and 7.3, and I can say I am quite excited about the new capabilities Microsoft keep adding to C#.\nIn chapter 11 we will be discussing the new features and enhancements of C# 8 with easy to follow examples to make you understand what each feature is about.\n------------\nHello and welcome to The Complete C# and Object-Oriented Programming Course, The one and only course you will need to learn C# and object-oriented programming. This is more like a collection of many courses brought together to help you learn C# and how to use it efficiently. This course is by far the most comprehensive and effective on the market. Here's why:\nThe course will teach you almost everything you need to know regarding the powerful C# language.\nThis course start with you from zero experience in programming and starts to level up to the object-oriented programming till you reach the advanced concepts and topics of C# (Asynchronous Programming, LINQ,Generics, Collections, Delegates and more).\nIt will help you learn any programming languages other than C# later, because the course discusses almost every programming concepts and of course how to implement it in C#.\nYou will experience more than 200 examples, 30 exercises, 24 assignments and over 150 quiz questions.\nYou will learn about the new features in C# (7.1 - 7.2 - 7.3 and 8) like Enhanced tuples, out variables, local functions, expression bodied members, pattern matching and other more features.\nThis course will cover different encryption and decryption methods, plus explaining the theory of cryptography.\nYou will be very familiar with Visual Studio and many of its features like snippets and how to use them and even create custom snippets.\nYou will learn about real world staff like naming conventions, the small little differences between data types, terminologies, programming concepts and more.\nUnderstand the advanced concepts such as multithreading, the synchronous and asynchronous programming.\nGet familiar with the .Net framework structure and understand is the .Net framework\nLearn the history of C# language and differences between each version of C#.\nLearn how to work like professionals.\n\n\nWhat other students who have taken this course say:\n\"I enjoyed the course. It's comprehensive and covers most of everything you'd want to know about C# and .NET. There's plenty of exercises and assignments in the course to help reinforce lessons. The course could be improved with the addition of a course project, but the instructor has assured that there will be another course forthcoming that will cover this. I recommend this course for anyone who wants to learn more about C# and the .NET framework.\"\n\n\n\"I am about 1/4 throught this course, and i have to say its brilliant. I have tried to learn how to program with many different languages using may different courses on udemy and have given up either because the course moved to fast or was to technical for me to understand. However this course is fantastic the material presented is very easy to digest and very informative while still engaging. So far i have learnt about using build in metods such as DateTime methods for my programs, creating and useing classes using inheritance, encapsulation and polymorphism. The course progresses on a nice incline in difficulty to test you on what you have just learnt and it has coding exercises, assignments and also quizes to test yourself with. The instructor is also very friendly and is quick to answer your questions with a good level of detail. I would recommend this course for anyone wanting to learn c# or learn how to program in general using c# as a first language.\"\n\n\n\"This course clearly covered the topics to understanding the language from a first-steps approach. I highly recommend to anyone who wishes to learn the language and requires a video tutorial with enough exercises. -- Thanks Ahmad\"\n\n\n\"I've enrolled in countless other C# courses on UDEMY but always end up either getting bored or end up getting confused. In this course so far, the course has assignments which keep it fun for me, plus it cover all topics clearly to prevent me from getting confused. Thank You.\"\n\n\n\"The course is comprehensive and well explained, undoubtedly the author knows what he is talking about and is pretty experienced with this kind of topics.Examples were short enough to make obvious what each pattern is all about. Author points out issues in different approaches and provides a solution.Never seen these kind of explanations before...Overall I find this course excellent\"\n\n\n\"Great course!! The instructor has comprehensive knowledge about the C# language and is able to present the programming concepts and paradigms in a way that is easily understandable.The presentation is very detailed and concise which is greatly appreciated.I feel ready to implement the knowledge gained\"\n\n\nStudents also said that this course was:\nComprehensive Curriculum\nFriendly\nDirect & To-the-point\nGet ready to start a journey of 20+ hours of C#, 20+ hours will make you a C# guru.\nSo what are you waiting for....let's start!",
      "target_audience": [
        "Complete beginners, no prior experience is required.",
        "Developers switching from other languages.",
        "Programmers who are not feeling confident about their programming skills.",
        "People who are looking for a career change.",
        "Students looking for a course to refresh and incredibly increase their knowledge.",
        "If you want to take only one course to learn everything to be C# developer."
      ]
    },
    {
      "title": "60-Minute Kotlin Quick Start for Java Developers",
      "url": "https://www.udemy.com/course/kotlin-for-developers/",
      "bio": "Go from Experienced Java Developer to Kotlin in One Hour",
      "objectives": [
        "Download and use the IntelliJ IDE",
        "Get to know Kotlin's Playground",
        "Write Kotlin programs",
        "Use Kotlin for any desktop application",
        "Get to know kotlin's syntax",
        "Learn Kotlin lambda expressions and functional programming",
        "Learn how OOP is done in Kotlin.",
        "How to convert Java code into Kotlin"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Kotlin Overview",
          "Kotlin Installation"
        ],
        "Basic Syntax": [
          "Section Overview",
          "First Program",
          "Variables and Arithmetics",
          "Strings",
          "Conditionals",
          "When",
          "Loops",
          "Arrays",
          "Convert Java Code to Kotlin"
        ],
        "Functions and Lambdas": [
          "Function Declaration and Usage",
          "Lambda Expressions"
        ],
        "OOP in Kotlin": [
          "Classes and Objects",
          "Null Safety",
          "Data Class"
        ],
        "What's Next?": [
          "What's Next?"
        ]
      },
      "requirements": [
        "A knowledge in programming (Java or other language) is required."
      ],
      "description": "Kotlin in one hour?!\nWell, yes!\nWhy an hour? Because that's all you need as an experienced developer!\n\nWe'll see the basics constructs of the language - variables, conditionals, loops, strings and arrays. Being an experienced developer you probably don't need an explanation of \"what a loop is\" but you want to see how loop is done in Kotlin. This is my attitude through all this course - I won't waste your time in telling you things you already know. I'll try to show you new things and give you the direction to go on.\n\nDevelopers: want a fast introduction to Kotlin? If you're familiar with Java, I can help you get up to speed in just a couple of of hours.\n\nKotlin is a fascinating new language that's attracted lots of attention, including from Google. In this short course you'll get to know Kotlin and its essentials. You'll be able to start writing code in no time.\n\nIf you are an experienced developer and heard the buzz about Kotlin - this course is for you.\nIf you are a Java developer and want to dive into Kotlin, I'll help you translate your Java knowledge into Kotlin expertise in no time.\n\nIf you are a Java developer and heard all those talking about Kotlin, but you don't know where to start - start here. Your java knowledge will be translated quickly into kotlin.\nIn this course I'll show you the essentials of this young and amazing language. We'll work with the IntelliJ IDE but if you just want to taste the language without any downloads or installations - that's fine, I'll introduce the Kotlin Playground which is a great tool for writing and evaluating Kotlin on line without any configurations.\nWe'll see how Kotlin's functions work, and how functional programming is done in Kotlin.\nWe'll see how OOP is done in Kotlin and what are the main improvements over java.\nFinally, I'll give you some suggestions to what else can be done and which topics you might want to get interested in the Kotlin's ecosystem.\nHope you choose to take this course and get to know Kotlin, a fascinating new language!\nRead what other students thought about this course in the reviews section.\n\"As a senior Android developer, i've searched for a *brief and practical* Kotlin course that include all the information to get started with the new language. this course does exactly it - took me all the way from IDE setup to the little but crucial differences from Java. All in all - great value for money\"",
      "target_audience": [
        "Developers who want to know the new language",
        "Android developers who want to start using Kotlin",
        "Project Managers who consider migrating to Kotlin in current or future project"
      ]
    },
    {
      "title": "Java for Beginners",
      "url": "https://www.udemy.com/course/java-for-beginners-telusko/",
      "bio": "Java fundamentals, OOP, Exceptions, Threads in Java with Telusko",
      "objectives": [
        "Java Programming Language",
        "Building Applications using Java",
        "Core and Advance features of Java Language",
        "Exceptions, Threads and Collection API"
      ],
      "course_content": {},
      "requirements": [
        "Basic Computer knowledge"
      ],
      "description": "We are glad you decided to learn how to do Java development. In this course, you'll learn the most important and in-demand skills for core Java development. Especially if you have a job interview or a Java project to complete. This course is designed for complete beginners with no background in Java and will teach you everything you need to know to become an expert.\nYou will learn how to create classes and interfaces, as well as how to write many methods that include variables, operators, data types, loops, conditional statements, exception handling, and threads. Furthermore, you will everything in practical way.\nJava is not difficult, its a structured programming language used by big companies.\nJava is used in Android, Enterprise application development, web sites, Big data, AI and many more.\nNavin Reddy (that's me:P) is the instructor for this course, and he has a YouTube channel called Telusko with over 2 million subscribers.\nI have industry experience of 13 years worked on Java, Spring, JS, AWS, Kotlin, Blockchain etc.\nI love exploring different technologies and sharing my knowledge with everyone.\n\n\nI hope you will enjoy the course and practise along side.\nYou will find the source code in the github repository.",
      "target_audience": [
        "Developers who want to work on Java Technology and Build enterprise applications"
      ]
    },
    {
      "title": "QR Code Generator Using JavaScript",
      "url": "https://www.udemy.com/course/qr-code-generator-using-javascript/",
      "bio": "Learn How To Generate QR Code Using JavaScript & How To Create QR Code Generator Website",
      "objectives": [
        "Detail About QR Code",
        "How To Generate QR Code",
        "How To Generate QR Code Using JavaScript",
        "How To Create QR Code Generator Website"
      ],
      "course_content": {},
      "requirements": [
        "Basic Knowledge Of HTML"
      ],
      "description": "In This Course , You Will Learn How To Generate QR Code Using JavaScript From Scratch. This Course is In English Language. In This Course , We Have Used Google Chart API For Generating The QR Code. Also , In This Course , You Will Learn How To Host Our QR Code Generator Website For Free , So That Anyone Can Access It Anytime , From Anywhere !\n\n\nThis Course is For You If...\nYou Want To Learn How To Generate QR Code Using JavaScript\nYou Want To Create Your Own QR Code Generator Website\nIn This Course , The Generated QR Code Will Be Of Multiple Size :\n100x100\n150x150\n200x200\n250x250\n300x300\nIn This Course , I Have Explained Each & Every Concepts , Logic & Codes Which Are Required To Generate QR Codes Using JavaScript\n\n\nRequirement\nText Editor Like Visual Studio Code Or Notepad ++\nWhats Included in This Course\nLectures\nResource\nI'm The Right Teacher For You ?\nI Tried My Best To Teach You in Easy Words in This Course.\nCovered in This Course :\nIntroduction\nDetail About QR Code\nGoogle Chart API\nLogic\nHow To Create HTML & JavaScript File\nJavaScript Function\nAccessing Elements Using JavaScript (TextBox & TextArea)\nAccessing Elements Using JavaScript (Paragraph , Div & Image)\nChanging Values\nIf Else\nQR Code Generator\nHosting QR Code Generator Website For Free\nExtra:\nConclusion\nOutcome Of This Course\nYou Will Learn How To Generate QR Code Using JavaScript\nYou Will Learn How To Create Or Host QR Code Generator Website For Free\nYou Will Get Knowledge in JavaScript",
      "target_audience": [
        "Who Want To Learn How To Create QR Codes",
        "Who Want To Generate QR Code Using HTML & JavaScript",
        "Who Want To Create QR Code Generator Website"
      ]
    },
    {
      "title": "ROS 2 for Beginners (ROS Jazzy - 2025)",
      "url": "https://www.udemy.com/course/ros2-for-beginners/",
      "bio": "Master ROS2 Basics and Become a Robot Operating System Developer | Step By Step | Robotics Programming | Python and C++",
      "objectives": [
        "Master ROS 2 core concepts",
        "Build a complete ROS 2 application from A to Z",
        "Use Robot Operating System 2 with both Python and Cpp",
        "Discover ROS 2 Tools and how to use them",
        "Learn best practices for ROS 2 development",
        "Practice a lot with many activities and a final project",
        "ROS 2 Nodes, Topics, Services, Parameters, Launch Files, and much more"
      ],
      "course_content": {},
      "requirements": [
        "Programming basics in Python and/or C++",
        "Some basics in Object Oriented Programming (OOP) are welcome, although not 100% mandatory",
        "You need to know how to use basic commands in a terminal",
        "And of course, a strong willingness to learn",
        "Precision: No need to know anything about ROS 1!"
      ],
      "description": "In this course, I will take you, step by step, in a few hours, from a complete beginner to a ROS 2 developer who can write scalable robotics applications.\n\n\n→ You are learning ROS 2 from scratch?\n\n\nAnd you may ask yourself: Where to start? How to learn? What to do first?\nWhen I first got started using Robot Operating System, it was really hard for me to answer those questions. Thus, learning ROS/ROS2 was hard. But it doesn’t have to be, if you learn with the right resources.\nAlso, something I noticed is that when people are teaching ROS 2 (in 2025), they are often making comparisons with ROS 1. But, what if you don’t know ROS 1 ???\nI have created this course so you can properly learn ROS 2 from the beginning, with no prior knowledge in Robot Operating System, and without having to waste weeks, or even months, trying to find what to do. You can say goodbye to this big learning curve everyone faces when learning ROS 2.\nThe course is structured so that you can follow it, one step at a time, and get everything you need in the right order. At the end of the course, you’ll be confident enough to start your own Robot Operating System 2 application.\n\n\n→ How do I teach?\n\n\nHere’s my teaching method, in 3 points:\nStep by step.\nGoing to the point.\nPractice, practice, practice.\nThat’s it. No useless stuff and distraction, just the important things you need in order to create ROS 2 applications.\nMy experience with Robot Operating System is very practical. I actually used it to build a robotic arm that is now on the market. So I had no other choice than being practical and going to the point. And that’s the way I want to teach you.\n\n\nHere's what students say about this course:\n\"Probably the best Udemy course I've ever taken. I started the course as a complete novice at ROS (and with very basic C++ and Python skills for that matter) and by the time I finished the course had a good understanding of the basically functionality of ROS and was able to complete the final project using the skills I had picked up throughout the course. Thank you Edouard!\" - Ben M.\n\"Been struggling to learn ROS on my own for quite some time to the point I almost gave up, this course finally made me understand what is going on there.\" - Danylo B.\n\"Great course, with a knowledgeable instructor that explains things in a concise manner. Perfect course for software developers who want to start with robotics.\" - Simon Z.\n\n\n→ What are you going to learn?\n\n\nHere are the main concepts you’ll see in this course:\nROS2 Installation, Workspace, Packages, …\nROS2 Nodes\nROS2 Topics\nROS2 Services\nROS2 Custom Messages\nROS2 Parameters\nROS2 Launch Files\n...\nEach section/module of the course is focused on one ROS 2 key concept. For each concept, you’ll get:\nConcept explanation, with the context, and why you need to learn that.\nStep by Step “how to” videos (for both Python and Cpp).\nAn activity to practice + detailed solution video.\nA recap + code download of everything we did in the section.\nI like to start with the “why” question, which is, to me, the most important question you can ask. If you understand the “why”, then everything after that will make sense because you know where you’re going, and why you’re going there.\nI also take the time to write all the code with you. Some teachers and instructors like to show you a huge bunch of code and then tell you “ok this code does that”. I personally don’t do this. When I write code, I write it completely, with you, and I explain why I’m writing what I write.\nAt the end of the course, you will have the opportunity to work on a complete project, using the Turtlesim simulation. This will help you practice more on everything you’ll see in the course, and that will be your first real project from A to Z.\nAlong the course you’ll also learn how to use ROS 2 tools to debug your application, monitor what’s going on, and build your code.\nWith everything you’ll learn + the best practices I’ll give you, you will be ready to start any ROS2 project with a good foundation.\nSo… Why should you guess what to learn? Start learning ROS 2 now with this complete and structured course!\n\n\n→ Note - this course is not for you if you:\nAre already a ROS 2 advanced or expert developer.\nHave never used Python or C++ before.\nAlso, this is not a “ROS 1 to ROS 2” guide. This is a course where you learn ROS 2 from scratch, with no ROS 1 knowledge required.",
      "target_audience": [
        "Students, Engineers, Researchers, Teachers, Developers, Hobbyists.",
        "Anyone who wants to learn about ROS 2 from scratch, and not waste time.",
        "People who want to build scalable robotics applications, faster.",
        "ROS1 developers who are still at a beginner level and want to start learning ROS 2."
      ]
    },
    {
      "title": "C++ Programming Step By Step From Beginner To Ultimate Level",
      "url": "https://www.udemy.com/course/c-programming-step-by-step-from-beginner-to-ultimate-level/",
      "bio": "Discover C++ basics then Expert on Object Oriented Programming OOP, C++ Data structure, STL, C++ Projects with C++ 11/14",
      "objectives": [
        "Learn to program with one of the most powerful programming languages C++.",
        "Learn the concepts of Programming C++, Object oriented programming.",
        "Learn C++ using a curriculum that covers C++ material of most university courses.",
        "Be in a position to apply for jobs requiring good C++ knowledge.",
        "You will Learn Data Structure Concept.",
        "functions, overloading functions, passing variables to functions etc.",
        "You will Test your knowledge and expertise with exercises.",
        "How to work with files - fstream library (i/o operation on files) operators - arithmetic, assigment, logical, bitwise conditions like if / else / switch arrays / multi-dimensional arrays loops - for / while / do-while.",
        "You will learn Includes Quizzes, Live Coding Exercises, Challenge Coding Exercises and Assignments etc."
      ],
      "course_content": {},
      "requirements": [
        "C++ Compiler and IDE, Like CodeBlocks , Devc++, eclipse etc.",
        "No Programming knowledge required",
        "Access to a computer running Windows, Mac OS X or Linux",
        "Course will covers C++ programming concepts in detail. you don't need to worry about basics ."
      ],
      "description": "This is Specially Designed course to covers C++ from very basic to Ultimate Level.You may be new to Programming or you have already Studied and Implemented Programming but still you feel that you need to learn more deep about C++ programming  in detail so what are you looking for take this course today.\nThis course covers C++ from very basic to more advanced features.Maybe you have some experience with other programming languages, but want to learn C. It's a great language to add to your resume!.The object oriented programming concepts are clearly explained, you will learn classes, objects, inheritance, polymorphism, Operator overloading, Data Structure ,Pointer, file handling,Dynamic Memory allocation,Recursion, apart from basic programming concepts like variables, branching and looping, functions, reference parameters, arrays, string ,vectors hands on the real life project in C++.\nThe course will be constantly refined in the future based on student feedback!\nCourse Curriculum/Content\nIntroduction\nIntroduction\nSetting Up Environment and Code, Compile and Execute in different IDE\nHands on Download and Install First IDE Code::Blocks\nHands on Download and Install 2nd IDE Dev-C++\nUnderstand Our first program and prints <Hello World> - 1\nUnderstand Our first program and prints <Hello World> - 2\nHands on C++ Basics , variables, data types, Modifier Type Casting Etc\nComprehend C++ DataType Concept\nComprehend C++ Variables that how variable store Memory\nC++ Data Type Concept and Variable together\nHands on C++ Reference Variable how we use It\nComprehend C++ program which takes User Input from Keyboard\nUnderstand the C++ Input and Out Streams\nC++ Type Casting / Type Convention and types\nConstant and literal in C++ #1\nConstant in C++ #2\nModifier and its type in C++ #1\nModifier and its type in C++ #2\nHands on C++ Operators and its type\nAll in one C++ Operator and its type\nHands on Increment ++ and Decrements -- Operators in C++\nArithmetic Operator in C++\nC++ the size of comma and Conditional operator\nRelational Operators in C++\nLogical And, logical or <and> logical not Operator\nHands on Control Flow , Statement Loops and If Else statement\nSome Basics of Control Flow and Statement\nIf statement in C++\nIF else IF statement in C++\nElse if Statement in C++\nStatement Control All in One with Explanation\nC++ program that Run LEAP YEAR\nC++ Switch Case Statement #1\nC++ Break Statement\nC++ Continue Statement\nC++ Switch Case and break Statement #2\nC++ program that runs Goto Statement #1\nC++ program that runs Goto Statement #2\nC++ loops and its types\nC++ Loops and While Loop\nC++ Do-While Loop #1\nC++ Do while loop #2\nThe program with Explanation of C++ Infinite Loop\nC++ for Loop #1\nC++ for Loop #2\nC++ Program that run Nested for Loop #1\nC++ Program that run Nested for Loop #2\nThe Program that Prints Half pyramids Triangle in for loop\nThe Program that Prints Half pyramids Using Alphabets\nHands on Functions in C++\nFunctions in C++ All in One\nUser Define Functions in C++\nBasic Function in C++ Library Function with help of cmath library\nFunction call its reference in C++\nHands on Arrays and its type in C++\nUnderstand the basic concept of Array in C++\nArrays in C++ #1\nArrays in C++ #2\nPass Array in Function\nExercise and concept of 2d or Two dimensional Array\nHands on Pointer in C++\nIntroduction to Pointer in C++\nNull Pointer in C++\nThe program that runs Pointer and Array together\nVoid Pointer in C++\nHands on String in C++\nString in C++ #1\nString in C++ #2 Printing Individual Characters\nString in C++ #3 Taking String as Input\nString in C++ #4 Multi word String\nString in C++ #5 Get String with Pointer\nHands on Dynamic Memory in C++\nUnderstanding the Concept of Dynamic memory in C++\nDynamic Memory allocation with array\nCurrent Date and time in C++\nFormat the using Struct (tm) in C++\nHands on Beyond the Basics on C++\nStructure in C++\nStructure pointer in C++\nConvert Character array to string in C++\nC++ program that run Structure and function together\nProgram that run Two arrays count all pairs whose sum is an odd number\nHands on Object oriented Programming in C++\nUnderstand basics of OOP\nClasses and Object in C++\nAccessing Data Member with Classes in C++\nClass Member of Function in C++\nThe Concept of access specifiers in c++ (Public , Protected , Private)\nUnderstand the Class Constructor and destructor in C++\nCopy Constructor n C++\nFriend Function in C++\ninline Function in C++\nThis Pointer in C++\nHands on Inheritance In C++\nUnderstand basics of Inheritance\nProgram to Run Inheritance in c++\nMultiple Inheritance\nHands On Advance object Oriented Programming\nFunction Overloading in C++\nEncapsulations in C++\nAbstraction or data hiding concept in c++\nException handling in c++\nPolymorphism in C++\nClass Template in C++\nRecursion in C++\nHands on File Handling in C++\nUnderstand File Handing Basics\nFile Handling - Text File\nFile Handling - Writing to a File\nHands on the Data Structure of C++\nWhat is the Data Structure\nData Structure -Stack in C++\nData Structure - Queue in C++\nWhy enrolling in this course is the best decision you can make.\nBy the end of this course, you will understand the fundamentals of the C++ Programming Language,OOP Data Structures, and make yourself more marketable for entry level programming positions.\nYou will understand variables and the different data types, be able to utilize functions and arrays, understand the concept of pointers, learn about control flow (decision statements and iteration).You will be in a position to apply for real-time programming positions, and truly understand the core language that most modern languages are based on!\nWhy do I need to learn C++?\nC++ allows you to have a lot of control as to how you use computer resources, so in the right hands its speed and ability to cheaply use resources should be able to surpass other languages. Thanks to C++'s performance, it is often used to develop game engines, games, and desktop apps.\n\n\nAfter completing this course you will be confident enough to take up any challenging problem in coding using C++ Programming.\nReady to get Take this course today, ?\nEnroll now using the Buy Now button on the right. So what are you waiting for? Learn C++ in a way that will Ultimate your career and increase your knowledge, all in a fun and practical way!",
      "target_audience": [
        "Beginners - (who want to learn c++ from Basics to Ultimate)",
        "Course Covers more than University Syllabus.",
        "Anyone who want to increase career by learning one the most in-demand programming languages C++."
      ]
    },
    {
      "title": "Ultimate C# Masterclass for 2026",
      "url": "https://www.udemy.com/course/ultimate-csharp-masterclass/",
      "bio": "In-depth .NET programming course from basics to advanced with OOP & LINQ. Focus on clean code, performance and practice.",
      "objectives": [
        "Gain an in-depth understanding of C#.",
        "Write high-performance, efficient C# code.",
        "Master object-oriented programming principles.",
        "Learn essential design patterns.",
        "Write clean, maintainable code of excellent quality.",
        "Prepare for C# job interviews with confidence.",
        "Practice with browser-based exercises and advanced projects.",
        "Use Visual Studio like a pro.",
        "Create unit tests with NUnit and Moq.",
        "Master asynchrony and multithreading."
      ],
      "course_content": {},
      "requirements": [
        "No programming experience is needed. I'll teach you everything you need to know.",
        "A computer (Windows/macOS) with an access to the Internet.",
        "No paid software is needed; all tools used in this course are free."
      ],
      "description": "Welcome to the \"Ultimate C# Masterclass\" course - the only course you need to master C#!\n\n\nWith 47 hours of video, 67 coding exercises, 86 quizzes, and 16 assignments, this course is packed with hands-on learning.\n\n\nAs a .NET Technical Lead with over a decade of experience, I'll be guiding you every step of the way—whether you're a complete beginner or an experienced developer looking to level up.\n\n\nWhy learn C#?\nC# is the backbone of modern software development, powering desktop applications, web services, cloud computing, and game development with Unity.\nMastering C# isn’t just about learning syntax—it’s about writing efficient, maintainable, and professional-grade code. That’s exactly what this course will teach you.\n\n\nWhat makes this course different?\nWe go beyond syntax. You'll learn why all the things we learn are needed and how to use them right.\nWe emphasize clean code and good design principles from the start.\nDesign patterns will be demonstrated in practice, not just as abstract concepts that seem impossible to apply in real-world challenges.\nRefactoring will be something we practice all the time.\nYou'll gain hands-on experience through implementing various projects, from processing API data to analyzing PDF files.\nYou'll learn how things work under the hood, and thanks to that, you will gain an in-depth understanding of C#.\nYou'll master asynchrony, multithreading, and performance tuning.\nYou'll practice unit testing with NUnit and Moq to build reliable software.\n\n\nNo fluff. No endless theory. You’ll learn by doing. You will solve dozens of coding exercises right in the browser.\n\n\nAdditional perks:\nFull Git repository with all code shown in the course.\n30-day money-back guarantee—if you're not satisfied, get a full refund, no questions asked.\n\n\nC# is one of the most in-demand programming languages today. Learn it the right way and accelerate your career.\n\n\nEnroll now and start coding like a pro!",
      "target_audience": [
        "Complete Beginners – We start from scratch, covering all fundamentals.",
        "Intermediate Developers – Take your skills further with advanced topics.",
        "Self-Taught Programmers – Connect the dots and solidify your knowledge.",
        "Programmers switching languages to C#."
      ]
    },
    {
      "title": "Web Scraping in Python Selenium, Scrapy + ChatGPT Prize 2024",
      "url": "https://www.udemy.com/course/web-scraping-course-in-python-bs4-selenium-and-scrapy/",
      "bio": "Updated 2024 | 4 projects with Beautiful Soup, Selenium and Scrapy | ChatGPT for web scraping",
      "objectives": [
        "Learn to scrape website from scratch with Beautiful Soup",
        "Learn the essential stuff you need before learning web scraping (Python, HTML, XPath)",
        "How to use ChatGPT for web scraping",
        "4 web scraping projects (from beginner to advanced projects)",
        "Handle pagination with any scraping tool",
        "Learn to scrape JavaScript website with Selenium and Scrapy-Splash",
        "Store the extracted Data in MongoDb & SQLite3",
        "Scrape infinite scroll websites",
        "Login to websites using Selenium & Scrapy"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge in Python",
        "Internet Access"
      ],
      "description": "Have you ever thought about how important is data in our everyday life?\nIt doesn't matter if you're a data scientist, data analyst, or programmer, getting access to the data you need is important! This is why some of the top Fortune 500 companies such as Walmart, Target, and CNN use web scraping to stay ahead with data. We can say this is one of their best secret weapons.\nWelcome to Web Scraping in Python with BeautiuflSoup, Selenium, and Scrapy!\nThe most complete and project-oriented course. In this course, we're going to learn web scraping solving cool projects that will help us scrape data off some of the most well-known websites. To name a few:\n\n\nAmazon Audible\nTwitter\nGoogle\nFootball Stats\nWorldometers\nMovie pages\n\n\nThis is the most complete web scraping course in Python and is split into 3 parts: BeautiuflSoup, Selenium, and Scrapy. My goal is that you become an expert in web scraping. This is why only 10% of the content of this course is focused on Beautiful Soup, while 40% is dedicated to Selenium and 50% to Scrapy.\n\n\nWhy I built the course this way?\nBeautiful Soup has a lot of limitations, but it's still useful for a gentle introduction to web scraping. In contrast, if you learn Selenium you will be able to scrape any website. and if you add Scrapy to your toolkit you will be able to scrape any website faster than with any other web scraping library. Throughout this course, you will see the power of web scraping with each Python library.\n\n\nWhat makes this course different from the others, and why you should enroll?\nThis is the most updated and complete web scraping course in Python. You will be using Python 3.7, Scrapy 2.4, Selenium 3.141.0 and BS4\nThis is the most project-based course you will find. We will scrape many of the most well-known websites\nYou will have an in-depth step by step guide on how to become a professional web scraper.\nYou will learn how to use Selenium, Scrapy, and Splash to scrape JavaScript-driven websites. You won't find any tutorials out there that teach how to use these web scraping tools the way I do in this course.\nYou will learn how to use ChatGPT for web scraping\n30 days money back guarantee by Udemy\n\n\nAt the end of the course, you'll know how to build your own web scraper to obtain new data, learn the best techniques for web scraping and more.\n\n\nJoin me now and let's start scraping the web together!",
      "target_audience": [
        "Anyone who wants to scrape data from any website with Beautiful Soup, Selenium, and Scrapy",
        "Data Scientists who want to take their skills to the next level",
        "Web developers looking to obtain new information or automate tasks",
        "Anyone who wants to stop spending hours manually copying data off a website, and wants to automate this task"
      ]
    },
    {
      "title": "The Complete Guide To Mastering Python",
      "url": "https://www.udemy.com/course/the-complete-guide-to-mastering-modern-python/",
      "bio": "A modern & essential guide to mastering the Python programming language",
      "objectives": [
        "Master the most important concepts of the Python language, and start using them from day 1.",
        "You will be able to program with the Python language professionally.",
        "Expand your thinking in ways you never thought possible.",
        "Start building your own career with a new advanced skillset.",
        "Gain confidence in creating your own projects.",
        "Create and host your very own API.",
        "AsyncIO",
        "Multithreading",
        "Multiprocessing"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "Preparation"
        ],
        "Introduction to Python": [
          "Installation",
          "Your First Program",
          "Syntax Is Important",
          "A Very Important Shortcut",
          "Typing Comments",
          "Intro Quiz"
        ],
        "Python Basics": [
          "Creating Variables",
          "What Are Constants?",
          "The Data Types",
          "Adding Type Hints",
          "Type Conversion",
          "Type Conversion",
          "Integers",
          "The Basic Operators",
          "Strings",
          "F-Strings",
          "Booleans",
          "Lists",
          "Tuples",
          "Sets",
          "Dictionaries",
          "Formatting Shortcut",
          "Python Basics Test"
        ],
        "Control & Flow": [
          "If...Else",
          "Shorthand If...Else",
          "For Loop",
          "For Loop",
          "While Loop",
          "Break & Continue",
          "Pass",
          "Loop...Else"
        ],
        "Functions": [
          "Creating A Function",
          "Parameters & Arguments",
          "Creating A Function",
          "Returning From A Function",
          "Recursion",
          "*Args & **Kwargs",
          "* & /"
        ],
        "Error Handling": [
          "User Input",
          "Try...Except",
          "Else...Finally",
          "Raise",
          "Fixing Unknown Errors"
        ],
        "Packages & Modules": [
          "Importing Modules",
          "Importing Packages",
          "Installing External Packages",
          "Package VS. Library"
        ],
        "Python Basics 2": [
          "The \"With\" Keyword",
          "Refactoring",
          "Truthy & Falsy",
          "What Are Enums?",
          "Comparing Floats",
          "if __name__ == \"__main__\"",
          "Scopes",
          "Nonlocal & Global"
        ],
        "Lists (Extended)": [
          "List Comprehensions",
          "List Comprehensions",
          "Slicing Lists With \"::\"",
          "Modifying Lists In A Loop"
        ],
        "OOP": [
          "What is OOP?",
          "Classes & Objects",
          "What is self?",
          "Class Variables & Instance Variables",
          "Getters & Setters",
          "__init__()",
          "Constructors",
          "__str__() & __repr__()",
          "__eq__",
          "Methods VS Functions",
          "Private & Protected",
          "Inheritance",
          "super()",
          "@classmethod & @staticmethod",
          "@abstractmethod",
          "Protocols",
          "__init__ vs __new__"
        ]
      },
      "requirements": [
        "No programming experience is necessary, we will cover everything from 0 in this course.",
        "You will need a computer, and access to an internet connection."
      ],
      "description": "Are you ready to become a true Python programmer and learn some of the most demanded skills on the market?\n\n\nWho is this course for?\nThis course is for anyone who wants to gain a very profound understanding of the Python language, so that you can take advantage of one of the most important tools of the century. Whether your are a beginner, or have experience with code, I will start from the very basics, and build up to the most important and advanced aspects of the Python programming language. You will also have the option to ask questions at any point during the course to profound your understanding of the Python programming language.\n\n\nWhy should you pick this course and not the others?\nThere are thousands of Python courses on the internet, so why should you pick this one? Well, to put it simply, I believe that I teach programming concepts in a far more effective way than a majority of the courses on the Internet. I make sure to only teach what's essential and needed, so that you don't waste time with code that you will never see or use in your entire career. I'm a self-taught professional and will teach you how you can be the same!\n\n\n30 Day Money-Back Guarantee\nDuring the first 30 days of this course you can opt in to get your money back. Whether it's because you feel that this course is not right for you, or changed your mind about learning Python, you can easily request a refund which will be handled kindly by Udemy.",
      "target_audience": [
        "Those who are ready to take a serious step into a future with Python."
      ]
    },
    {
      "title": "Reactive Programming in Modern Java using Project Reactor",
      "url": "https://www.udemy.com/course/reactive-programming-in-modern-java-using-project-reactor/",
      "bio": "Learn to write fast performing Asynchronous and NonBlocking code using the Reactive Programming principles and Reactor.",
      "objectives": [
        "What is Reactive Programming?",
        "When to use Reactive Programming ?",
        "Write Reactive Code using Project Reactor",
        "Different Operators that are part of Project Reactor",
        "Reactive Streams Specification",
        "Build Non Blocking Rest Clients using Spring WebClient",
        "Unit Test the Reactive Code using JUnit5",
        "Reactive Types Flux/Mono"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction & Objectives",
          "Prerequisites"
        ],
        "Course Slides & Source Code": [
          "Course Slides",
          "Source Code"
        ],
        "Introduction to Reactive Programming": [
          "Why Reactive Programming?",
          "What is Reactive Programming ?",
          "Introduction to Reactive Streams"
        ],
        "Getting Started with Project Reactor": [
          "Introduction to Project Reactor",
          "Reactor Reactive Types - Flux and Mono"
        ],
        "Setting up the Project for this course": [
          "Project SetUp"
        ],
        "Functional Programming in Modern Java": [
          "Imperative Style vs Functional Style"
        ],
        "Lets create our very first Flux and Mono": [
          "Let's write our very first Flux",
          "Let's write our very first Mono",
          "Reactive Stream Events",
          "Testing Flux using JUnit5",
          "Testing Mono using JUnit5"
        ],
        "Transforming Flux and Mono": [
          "Transform using map() Operator",
          "Transforming Data Using Operators in Project Reactor",
          "Reactive Streams are Immutable",
          "Filter using filter() Operator",
          "Map , Filter Operators in Mono",
          "Advanced transform using the flatMap() Operator",
          "Asynchronous Operations using flatMap() Operator",
          "Advanced transform using the concatMap() Operator",
          "flatMap( ) operator in Mono",
          "flatMapMany( ) operator in Mono",
          "Transform using the transform() Operator",
          "Handling empty data using defaultIfEmpty and switchIfEmpty() Operators",
          "DefaultIfEmpty and SwitchIfEmpty in Mono Operator"
        ],
        "Combining Flux and Mono": [
          "Introduction to Combining Reactive Streams",
          "concat() & concatWith() operator",
          "Assignment for Writing JUnit5 Test Cases for concatWith() using Flux and Mono",
          "Combining Reactive Streams using merge() and mergeWith() Operators",
          "Assignment for Writing JUnit5 Test Cases for mergeWith using Flux and Mono",
          "Combining Reactive Streams using mergeSequential() operator",
          "Combining Reactive Streams using zip and zipWith() Operator",
          "Assignment for Writing JUnit5 Test Cases for zipWith using Flux and Mono"
        ],
        "Build Movie ReactiveService using Project Reactor": [
          "Overview of this MovieService",
          "Retrieve all of the MovieInfo",
          "Retrieve MovieInfo by movieId",
          "Implement getMovieById using FlatMap operator in Mono"
        ]
      },
      "requirements": [
        "Prior Java Experience is mandatory",
        "Experience writing test cases using JUnit",
        "Experience working with Intellij or any other IDE"
      ],
      "description": "Reactive Programming is a new programming paradigm that's well suited for applications that are required to perform better under heavy load.\nReactive Programming is built on the foundation of reactive streams specification. Project Reactor is an implementation of Reactive Streams Specification.\nCode that's written using Reactive programming has these qualities:\nFundamentally Asynchronous\nNon Blocking\nFunctional Programming Style of code\nBackpressure support\nThis course is designed to provide both theoretical and practical knowledge about reactive programming using Project Reactor. This is a pure hands-on oriented course and all the concepts are explained by writing code.\nCourse Curriculum:\nSection 1: Getting Started With the Course\nThis section covers the course objectives and the prerequisites that are needed to make the most out of this course.\nSection 2: Introduction to Reactive Programming\nIn this section, I will introduce you to reactive programming and its related concepts. The following topics are covered in this section\nWhy Reactive Programming?\nWhat is Reactive Programming?\nIntroduction to Reactive Streams\nSection 3: Getting Started with Project Reactor\nIn this section, I will introduce you to the reactive library project reactor, and the reactive types Flux and Mono that forms the foundation for Project Reactor\nIntroduction to Project Reactor\nReactor Reactive Types - Flux and Mono\nSection 4: Setting up the Project for this course\nIn this section, I will set up the base project that will be used for the rest of this course.\nSection 5: Functional Programming in Modern Java\nIn this section, I will explain Functional Programming and the benefits that are tied with this programming style\nImperative Style vs Functional Style\nSection 6: Let's create our very first Flux and Mono\nIn this section, I will code and explain the reactor types Flux and Mono using simple examples\nThe following topics are covered as part of this lecture:\nLet's write our very first Flux\nLet's write our very first Mono\nReactive Stream Events\nTesting Flux using JUnit5\nSection 7: Transforming Flux and Mono\nIn this section, I will code and explain different operators that can be used to transform data from one form to another using project reactor\nThe following topics are covered as part of this section:\nTransforming Data Using Operators in Project Reactor\nTransform using map() Operator\nReactive Streams are Immutable\nFilter using filter() Operator\nAdvanced transform using the flatMap() Operator\nAsynchronous Operations using flatMap() Operator\nAdvanced transform using the concatMap() Operator\nflatMap( ) operator in Mono\nflatMapMany( ) operator in Mono\nTransform using the transform() Operator\nHandling empty data using defaultIfEmpty and switchIfEmpty() Operators\nSection 8: Combining Flux and Mono\nIn this section, I will code and explain different operators that can be used to combine the reactive streams using project reactor\nThe following topics are covered as part of this section:\nIntroduction to Combining Reactive Streams\nCombining Reactive Streams using merge() and mergeWith() Operators\nCombining Reactive Streams using mergeSequential() Operators\nCombining Reactive Streams using zip and zipWith() Operators\nSection 9: Build Movie ReactiveService using Project Reactor\nIn this section, we will build the Reactive MovieService using all the skills that we have acquired so far\nOverview of this MovieService\nRetrieve all of the MovieInfo\nRetrieve MovieInfo by movieId\nSection 10: doOn* CallBacks - Peeking into a Sequence\nIn this section, I will code and explain the techniques to peek into the individual events that's emitted by the publisher\nSection 11: Exception/Error Handling in Flux and Mono\nIn this section, I will cover the different exception handling strategies that are part of the Project reactor\nThe following topics are covered as part of this section:\nExceptions in Reactive Streams\nIntroduction to Exception Handling Operators\nonErrorReturn() : Exception Handling Operator\nonErrorResume() : Exception Handling Operator\nonErrorContinue() : Exception Handling Operator\nonErrorMap() : Exception Handling Operator\ndoOnError() : Catching Exceptions and Throw the error\nError Handling Operators in Mono\nSection 12: Implement Exception Handling in Movies Reactive Service\nIn this section, I will implement the exception handling in the MoviesReactiveService.\nException Handling in MoviesReactiveService using onErrorMap\nTest Exception in MoviesReactiveService using Mockito\nSection 13 : Retry, Repeat using retry(), retryWhen(), repeat()\nIn this section, I will code and implement different techniques to retry the exceptions in the Reactive Streams using Project Reactor\nThe following topics are covered as part of this section:\nRetry Exceptions using retry() and retry(n)\nRetry Specific Exceptions using retryWhen()\nRepeat a Sequence using repeat() and repeat(n)\nRepeat a Sequence repeatWhen()\nSection 14: Reactors Execution Model - Schedulers, Threads, and Threadpool\nIn this section, I will explain the threads and the execution model behind the project reactor\nThe following topics are covered as part of this section:\nReactor Execution Model\nSwitching Threads using publishOn()\nSwitching Threads using subscribeOn()\nSection 15: Making Blocking Calls in MovieReactiveService\nIn this section, we will add an enhancement to the MoviesReactive Service by adding a blocking call in to the pipeline.\nMaking Blocking calls in MovieReactiveService\nIn this lecture, we will code and learn about how to make blocking calls using project reactor\nSection 16: BackPressure\nIn this section, I will explain the concept of backpressure in reactive programming\nThe following topics are covered as part of this section:\nIntroduction to BackPressure\nLet's implement BackPressure\nWrite a JUnit test for BackPressure\nHandling Backpressure using onBackpressureDrop()\nHandling Backpressure using onBackpressureBuffer()\nHandling Backpressure using onBackpressureError()\nSection 17: Explore Data Parallelism in Project Reactor\nIn this section, I will explain about introducing parallelism into the reactive pipeline\nThe following topics are covered as part of this section:\nParallelism using parallel() and runOn() operators\nParallelism using flatmap() operator\nParallelism using flatMapSequential() operator\nSection 18: Cold & Hot Streams\nIn this section, I will explain about cold and hot streams in Reactive Programming\nThe following topics are covered as part of this section:\nCold & Hot Streams\nCold Streams\nHot Streams - ConnectableFlux and different options\nSection 19: JUnit Testing using VirtualTimeScheduler\nIn this section, I will explain the use of VirtualTimer to decrease the execution time of test cases.\nStepVerifier using VirtualTimeScheduler\nSection 20: Build NonBlocking RestClient using WebClient\nIn this section, we will write a nonblocking rest client using Spring WebClient\nThe following topics are covered as part of this section:\nOverview of the Reactive Movie API\nBuild the non-blocking MovieInfoService RestClient\nBuild the non-blocking Review RestClient\nBuild getAllMovies non-blocking MovieReactiveService Client\nBuild getMovieById non-blocking MovieReactiveService Client\nIntegrate WireMock for Integration Tests\n\n\nSection 21: Programmatically Creating a Flux\nIn this section, I will code and explain the techniques that are available to create a flux programmatically.\nThe following topics are covered as part of this section:\nCreate a Flux using create()\nCreate a Flux using push()\nSection 22: Debugging in Project Reactor\nIn this section, I will demonstrate different approaches that are available when it comes to debugging reactor error messages.\nThe following topics are covered as part of this section:\nDebug Exceptions using \"checkpoint\" operators\nDebug Exceptions using Hooks.onOperatorDebug()\nProduction-ready Global Debugging using \"ReactorDebugAgent\"\n\n\nBy the end of this course, you will have a complete understanding of Reactive Programming, write code using the Reactive Programming Principles, and when to use them in your project.",
      "target_audience": [
        "Any Java Developer who is interested in exploring Reactive Progrmming",
        "Any Java Developer who has the need to write fast performing code under heavy load",
        "Any Java Developer who is interested in learning all the features of the \"Reactor\" Reactive Programming Library"
      ]
    },
    {
      "title": "The Complete Python 3 Masterclass - From Beginner To Pro",
      "url": "https://www.udemy.com/course/the-complete-python-masterclass/",
      "bio": "Python for beginners, Learn Python Programming and build your own Python programs: Data Science, Machine Learning, etc.",
      "objectives": [
        "From 0 to 100: From beginner to python all-rounder",
        "Become a sought-after developer",
        "Write real desktop applications with Qt",
        "Use a crawler to extract data from web pages",
        "Challenge yourself with quizzes and exercises",
        "Everything explained with simple examples",
        "Understand the \"why\" behind it",
        "Evaluate data and create DataScience analyses",
        "Learn and understand object oriented programming"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Download the course material here AND DISCORD",
          "Install required tools and Hello World",
          "Udemy Reviews Update",
          "FAQ - Frequently Asked Questions",
          "Get the most from Tutorials.EU"
        ],
        "Python Basics": [
          "Intro",
          "Important note",
          "Numbers in Python",
          "Variables in Python",
          "Strings in Python",
          "Number or String?",
          "[skip if solved] Sample solution Quiz: Number or String"
        ],
        "Python Bascis Part 2": [
          "Lists in Python",
          "Lists in Python",
          "[skip if solved] Sample solution Quiz: Lists in Python",
          "Lists - pop function",
          "Handout: Lists in Python",
          "Motivation",
          "Convert Data 1",
          "Convert Data 2",
          "Comments",
          "Comment s in Python",
          "[skip if solved] Sample solution Quiz: Comments",
          "For your reading",
          "Exercise Sheet",
          "[skip if solved] Sample solution Python Basics"
        ],
        "Control Structures": [
          "Intro",
          "if, else",
          "Comparison Operators",
          "Connect Expressions And Booleans",
          "Leaflet: Comparison Operators",
          "If & Booleans",
          "[skip if solved] Sample solution Quiz: If & Booleans",
          "The In Operator",
          "The Not Operator",
          "Leaflet: Operators and Lists",
          "The Not Operator",
          "[skip if solved] Sample solution Quiz: The Not Operator",
          "elif"
        ],
        "Control Structures Part 2": [
          "While Loop",
          "For Loop",
          "When To Use Which Loop?",
          "In, Loops,...",
          "[skip if solved] Sample solution Quiz: In, Loops,...",
          "Loops (break, continue)",
          "Excursus: How to Handle Problems",
          "Project: Trump Twitter Bot",
          "Leaflet: Loops",
          "Challenge Sheet Control Structures",
          "[skip if solved] Sample solution Challenge Control Structures"
        ],
        "Functions": [
          "Intro",
          "Functions",
          "Functions 2",
          "Outlook - Objects",
          "Intro: Opening a File",
          "Open a File",
          "Write a File",
          "File And the With Keyword",
          "Open CSV",
          "Read And Skip Rows in CSV",
          "Excursus: Drawing Graphics",
          "Info: Birth statistics",
          "Birth Statistics",
          "Challenge Birthstatistics",
          "Quiz Double Checking Your Solution",
          "[skip if solved] Sample solution Challenge Birth Statistics",
          "Leaflet: Functions and Methods",
          "Challenge Paper - Functions",
          "Tips on how to solve Functions Challenge",
          "[skip if solved] Sample solution Challenge Functions"
        ],
        "Lists in Python": [
          "Lists Intro",
          "Working with Lists",
          "List Slicing",
          "List Slicing",
          "[skip if solved] Sample solution Quiz: List Slicing",
          "List Comprehension",
          "Outlook - Tuple & Dictionaries",
          "Dictionaries",
          "Dictionaries",
          "[skip if solved] Sample solution Quiz: Dictionaries",
          "Tupel",
          "Packing and Unpacking of Tuples",
          "Dictionaries and Loops",
          "Challenge: Dictionaries & Loops",
          "Tips: Dictionaries & Loops",
          "Check Your Solution: Challenge Dictionaries & Loops",
          "[skip if solved] Sample solution Challenge Dictionaries & Loops",
          "Nest Data Structures",
          "Leaflet: Dictionaries, Lists and Tuples"
        ],
        "Object Oriented Programming": [
          "Intro",
          "Class and Method",
          "Constructor and Methods",
          "Why Private Properties and Methods?",
          "Private Properties and Methods",
          "Why do We Encapsulate Data?",
          "Special Methods",
          "Inheritance in Python",
          "Challenge: Inheritance and Object Orientation",
          "[skip if solved] Sample solution Challenge: Inheritance and Object Orientation",
          "Check Types Of Variables",
          "In Python Everything is an Object",
          "How to name Variables, Classes and Methods",
          "Static Variables",
          "Leaflet: Object Orientation",
          "Challenge: Object Orientation",
          "[skip if solved] Sample solution Challenge: Object Orientation"
        ],
        "Module in Python": [
          "Intro",
          "Load Code from a seperate File",
          "Different Ways to Import Modules",
          "Create Modules in a Folder",
          "Modules",
          "Leaflet: Module in Python",
          "[skip if solved] Sample solution Quiz: Modules",
          "Example of a Module"
        ],
        "Crawler": [
          "Intro",
          "Excursus: What is HTML?",
          "Get HTML Code",
          "beautifulsoup",
          "Excursus: CSS-Selectors 1",
          "Excursus: CSS-Selectors 2",
          "Find Elements 1",
          "Find Elements 2",
          "Find Elements - urllib",
          "Challenge: Crawl Multiple Pages",
          "Solution: Crawl Multiple Pages",
          "Note: Encoding, Writing a File",
          "Challenge: Store Results as CSV",
          "Solution: Store Results as CSV",
          "Open CSV File with Excel",
          "Generators",
          "Use Generators with a Crawler",
          "Install PyCharm and Make a Real Program from our Crawler",
          "Make a Real Program from our Crawler"
        ]
      },
      "requirements": [
        "No programming skills are required",
        "A computer (Windows / Mac / Linux) with an Internet connection is sufficient"
      ],
      "description": "This course makes you a professional Python 3 developer- no matter if you are a Python beginner, have already programmed a bit, or just want to discover the advanced features of Python 3. It is the ideal Python for beginners course.\nThis course contains over 250 lessons, countless quizzes, tests, practical projects, fact sheets, and exercises - the easiest way if you want to become a Python 3 developer.\nNO PROGRAMMING SKILLS ARE REQUIRED - PYTHON FOR BEGINNERS\nFirst a small overview of what this course offers you:\nUnderstand the basics of Python 3 development\nUnderstand object orientation\nDevelop your own applications in Python 3 development\nChallenge your knowledge with various quizzes and exercises\nEasy repetition of knowledge: Extensive fact sheets\nVarious practical examples:\nExtract data from web pages with a web crawler\nWrite real desktop applications with Qt\nDevelop a web server with Flask\nApply Data Analysis with Python 3\nDevelop a face detection software\nDevelop a simple machine learning application\nAnd much more...\nPython 3 is an incredibly cool programming language that can be used for various purposes. Therefore, it is not only important that you learn Python yourself, but also which tools complement Python perfectly. And that's why I developed this Python for beginners course - to make you a highly skilled in Python development, no matter what direction you want to go after the course.\nAfter completing this Python for beginners course you can write desktop applications, master Python website development, extract data from other websites, collect additional data via cool forms, and evaluate it automatically with Python - the complete workflow.\nTo this end, we will look at various additional tools in the course:\nThe Data Science - Stack: Numpy, Pandas and Matplotlib\nWeb - Crawling with \"requests\" and \"beautifulsoup\"\nWeb - Development with Flask\nInteractive programs with Jupyter notebooks\nDesktop applications with PyQt\nMy goal is that after completing this Python for beginners course you will be very good at Python development - no matter what purpose you want to use Python for later. This makes you perfectly prepared for future jobs and projects.\nFrameworks allow you to save loads and loads of effort and time, when building your programs.\nNumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays.\nIn computer programming, pandas is a software library written for the Python programming language for data manipulation and analysis. In particular, it offers data structures and operations for manipulating numerical tables and time series for maximum Python development capabilities.\nBuild a web crawler with \"requests\" and \"beautifulsoup\"  which allows you to read data from a website and reuse it how ever you like.This is a super powerful tool, which comes in handy in so many occasions.\nWith Flask you can build websites with Python. Flask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries.  So you can get started with it super fast.\nIn this Python for beginners course you will also learn how to use PyQt. With PyQt you can build beautiful GUIs (Graphical User Interfaces). Either with code, or by just using the Qt Creator, which allows you to drag and drop your UI elements onto your Window. That is not only convenient, but also decreases the development time, required to build desktop applications.\nMachine learning is a super interesting and demanded area. Python is the programming language to go with, when it comes to Machine Learning. So hop aboard and ride with the Python hype train. As you will learn the basics of machine learning with Python in this Python for beginners course. At the end you are skilled in Python development to the highest degree.\n\nHOW IS THE PYTHON FOR BEGINNERS COURSE STRUCTURED:\nFirst you learn, how the very basics of Python work. This includes variables, functions, loops, if statements, etc.\nThen you learn how to use object oriented programming. These skills whill not only help you with Python programming, but also with other programming Languages.  As soon as you feel confortable with those skills, you will learn more advanced topics and build more and more interesting and real world applications such as a web crawler, a twitter bot, a website with flask, data science with numpy, pandas and matplotlib.Each chapter contains multiple quizzes, leaflets/handouts and exercises, which help you to progress steadily.\nSo you see, the course will make you a complete Python developer in no time.\n\nWHO IS THIS COURSE FOR?\nThe course is for anyone, who wants to learn Python and wants to become professionally good in Python programming. No experience is required what so ever. It is for total Python beginners. It is designed that anyone who can handle a mouse and keyboard will succeed finishing it. The only real requisite is the desire to learn.\n\n30-DAY FULL MONEY-BACK GUARANTEE\nThis Python for beginners course comes with a 30-day full money-back guarantee. Take the course, watch every lecture, and do the exercises, and if you feel like this Python for beginners course is not for you, ask for a full refund within 30 days. All your money back, no questions asked.\n\nABOUT YOUR INSTRUCTOR:\nMy name is Denis Panjuta and in my courses I have taught over 50.000 students how to code. I have a Bachelor of Engineering at the University of Applied Sciences in Constance (Germany). I love teaching and creating high quality courses. My mission is, to teach programming to over 100.000 people!\nAs you see, this is the only Python course you will ever need!\nYou will learn all the Python fundamentals, all Python basics and everything that you need to know to succeed in Python  programming and building your own cool applications.\nSo don’t waste any more time and start to make your dreams and ideas come true by taking this course now!",
      "target_audience": [
        "Beginners who want to get started with the programming language Python",
        "Advanced developers who want to experience various Python application scenarios",
        "In short: who want to use Python productively - whether as a hobby or for the job"
      ]
    },
    {
      "title": "Mainframe: The Complete COBOL Course From Beginner To Expert",
      "url": "https://www.udemy.com/course/mainframe-the-complete-cobol-course-from-beginner-to-expert/",
      "bio": "Become an Expert on COBOL Programs by coding it. Run COBOL Programs with JCL. Basic TSO/ISPF operations are also covered",
      "objectives": [
        "Execute COBOL Program with confidence",
        "Develop COBOL Programs along the way as you take the program",
        "Build a strong knowledge base on COBOL from Scratch to Advanced level",
        "To be able to clear the Job interviews on Cobol",
        "Programmed to debug the program and to check for any errors for a program",
        "Advance, boost and expand the skill set on COBOL if you have a fair understanding of COBOL",
        "Redesign and code a Particular program in multiple ways",
        "This course does not include VSAM.",
        "This Course also include a section on COBOL-DB2 and I have coded some COBOL DB2 Programs as well."
      ],
      "course_content": {
        "Introduction to COBOL": [
          "Introduction",
          "Important Information about this Course",
          "History and Versions of COBOL",
          "Structure of a COBOL Program",
          "Coding Rules in COBOL",
          "DIVISIONS in COBOL"
        ],
        "Let us connect to Mainframe using our Personal computer": [
          "Understand background connection between Local Operating system and Mainframe",
          "Let us connect to MVS 3.8 on our Local computer",
          "Common Question which students ask about MVS 3.8J Tur(n)key",
          "Connect to Modern Mainframe server using an IP address other than localhost",
          "About Mainframe id"
        ],
        "Variables, Literals, Figurative Constants, Data Types, Levels and Much more.": [
          "Variables, Literals and Figurative Constants",
          "Data Types in COBOL",
          "Lets understand about the General Level Numbers in COBOL",
          "Advance(Special) Level Numbers",
          "Explore a program with various level numbers in Detail",
          "DISPLAY and MOVE in COBOL",
          "ACCEPT in COBOL",
          "Relation of ACCEPT statement with SYSIN and SYSOUT Parameter of JCL",
          "Lets Create our First HELLO WORLD Program"
        ],
        "Basic commands, Creation of PS and PDS, SPOOL, DISPLAY, MOVE and ACCEPT": [
          "Basic commands to start with",
          "Let us create datasets (PS and PDS) - Optional",
          "SPOOL - Analyze the process where you can see the output of your program"
        ],
        "Arithmetic Operations in COBOL": [
          "Arithmetic Operations - ADD",
          "Lets code an Example of ADD statement",
          "Arithmetic Operation - SUBTRACT",
          "Arithmetic Operation - MULTIPLY",
          "Arithmetic Operations - DIVIDE",
          "Example of DIVIDE in COBOL",
          "COMPUTE in COBOL",
          "Examples of COMPUTE in COBOL"
        ],
        "Conditional Processing and Iterations": [
          "IF-ELSE Statement",
          "Example of IF-ELSE statement in COBOL",
          "Lets understand the EVALUATE statement in COBOL",
          "Different Types of EVALUATE statements",
          "Example of EVALUATE Statement - Part 1",
          "Example of EVALUATE Statement - Part 2",
          "Different Types of PERFORM statements",
          "Examples of PERFORM Statements"
        ],
        "Internal Table in COBOL - ARRAYS": [
          "Lets understand what is Internal Table in COBOL-ARRAYS",
          "Lets create a 1-Dimensional Array with confidence",
          "Lets create a 2-Dimensional Array with confidence",
          "INDEXED BY in Arrays",
          "SUBSCRIPT in Arrays",
          "Difference between INDEX and SUBSCRIPT"
        ],
        "Searching for Records in table - Using SEARCH and SEARCH-ALL": [
          "Understanding SEARCH and SEARCH-ALL",
          "Lets code a Program to execute SEARCH-ALL Operation"
        ],
        "String Handling in COBOL": [
          "What is String operations in COBOL",
          "Lets understand STRING operation in detail",
          "Lets Code a Program to perform STRING Operation",
          "Lets Explore STRING operation further",
          "Lets Understand UNSTRING Operation",
          "Lets analyze a sample UNSTRING Program",
          "Lets Explore UNSTRING Operation further",
          "Analyse the output of the UNSTRING Operation",
          "INSPECT in COBOL",
          "Lets Code a PROGRAM to execute INSPECT"
        ],
        "CALL - Inter Program Communication": [
          "Lets master the different Types of Control passing",
          "What is CALL and Different types of CALL",
          "Lets code a CALLING program and a CALLED Program",
          "CALL by Content"
        ]
      },
      "requirements": [
        "You should have a PC with internet connection",
        "If you have a mainframe id then it will be beneficial. I have provided few free tools but they have certain limiations and you cannot practice all the commands and programs in the free tool",
        "You should know the basics of TSO/ISPF and JCL. I have provided few basic TSO/ISPF commands and some amount of JCL as well. If you are not comfortable, you can take my courses on TSO/ISPF and JCL first before taking this course.",
        "The Course also contains COBOL DB2 programs towards the end of the course and to code this, you should have basic idea of the DDL and DML operations in DB2.",
        "As basics of TSO/ISPF and JCL is required. If you do not know these topics, i recommend you to enroll for my course on \"Mainframe: The Complete TSO/ISPF Course from Beginner to Expert\" & \"Mainframe: The Complete JCL Course from Beginner to Expert\"first and then take this course."
      ],
      "description": "'Udemy COBOL Course with best ratings and review-Best Seller'.\n-> Get the COBOL Certification which you can showcase in your CV.\n-> Best  COBOL Online Training ever.\nJoin this course which is the best COBOL course on UDEMY. I will Code everything along the way!!!\n\"This is the Best Seller Course on Udemy and it is also the highest-rated course on Udemy\"\n“There’s a reason this course is a bestseller and highest rated on Udemy...”\nSome of the Reviews from my students!!!!\n\"After taking the full Course, I guess it has all the necessary information. Really appreciate the hard work put in by the Instructor. I never thought that Mainframes will be easy.\"\n\"Sandeep, I really enjoyed the training offered: - TSO - JCL - Cobol Congratulations on the work, I have recommended the courses to several colleagues who are also starting on mainframes. Thank you\"\n\"Perfect course for COBOL\"\n\n\nCaptions\nThe Course has the most accurate Captions. Have a look.\nDo you want to start on COBOL but have no experience with COBOL?\nIf you have some prior knowledge of COBOL or if are a complete fresher, you are at the right place. The Course teaches you COBOL right from Scratch to an Advanced level.\nWhat makes this Course unique and a Best Seller?\nWell, the course has everything you need to master COBOL Programming. If you want to build a career in Mainframe, then COBOL is a 'MUST TO HAVE' skill.\nThere’s no risk involved in taking this Course!\nThis course comes with a 30-day money-back guarantee. I am sure that this is the best course on COBOL and you can compare the content provided in this course against any COBOL Course I guarantee you that you will not get such good structured content anywhere. Still, if you are not completely satisfied with the course, please let us know and we will provide a refund without asking any questions.\nWhat if you are stuck?\nI personally answer all the questions which are asked here. If you are stuck anywhere, ask a question or you can message me directly and I will answer all your doubts.\nAre you getting updated content?\nYes, I keep updating the content to make sure, I provide all the information to my students.\nIs CICS Included in this course?\nNo, this course does not include CICS at this point in time.\n\n\nThe Course is a complete COBOL course -\nThe course starts with an Introduction to COBOL, its history, and versions of COBOL\nData types, Structure, and various level clauses are covered in detail\nA complete demonstration of executing a program is shown\nHow to compile and execute a program is covered with ease.\nAll 4 DIVISIONS of COBOL are illustrated, edited, documented, and defined.\nMost of the programs are coded while explaining, tested, and debugged in front of you.\nThe Quality ad Quantity of the course is great. It covers all the topics in COBOL starting from Scratch.\nBasic details of TSO/ISPF and JCL are also included along with COBOL.\nMultiple programs have been coded, assembled, and aligned to suit the theory part which we covered.\nNote:\nTo understand the complete Mainframe, a professional must have COBOL skills on the Mainframe server",
      "target_audience": [
        "Anyone who wants to master COBOL can take up this course. This teaches COBOL from Scratch to Advanced level",
        "If you have knowledge on Mainframe then it will be beneficial but if you don't know what are Mainframe, i have explained about mainframes at the beginning of the course.",
        "Basic TSO/ISPF commands and basic knowledge of JCL will be useful but is not necessary",
        "The Course also contains COBOL DB2 programs towards the end of the course and to code this, you should have basic idea of the DDL and DML operations in DB2."
      ]
    },
    {
      "title": "The Windows Presentation Foundation WPF Guide for beginners",
      "url": "https://www.udemy.com/course/the-windows-presentation-foundation-wpf-course-for-beginners/",
      "bio": "Become an Advanced WPF Developer Who Can Handle XAML and Code Behind in His/Her Sleep And Build Beautiful GUIs",
      "objectives": [
        "Be able to build desktop apps that use WPF (Windows Presentation Foundation)",
        "Build metro style applications using Mah Apps",
        "Understand the Ins and Outs of WPF (Windows Presentation Foundation)",
        "Learn to build the GUI of an entire app from scratch. In this case the GUI of the Microsoft App Store",
        "Become a better C# Developer",
        "Understand Events and Delegates",
        "Be able to build complex Graphical User Interfaces using XAML and Code Behind"
      ],
      "course_content": {
        "Course Intro": [
          "Welcome to the course and how to get most out of it",
          "Hello World using WPF",
          "Introduction to XAML",
          "XMLNS and Window XAML in default code in detail",
          "The App Config File explained",
          "Accessing Properties of UI Elements in Csharp Code",
          ".Net Core vs .Net Framework",
          "Section 1 Quiz",
          "Get The Most Out Of This!",
          "Your first task to become a successful developer..."
        ],
        "Controls": [
          "Intro Controls Chapter",
          "Textblock in XAML",
          "Textblock in Code Behind",
          "Labels",
          "TextBox",
          "Buttons and some events",
          "Radio Buttons",
          "Checkboxes",
          "Passwordbox",
          "Images",
          "Sliders - Databinding and Triggers",
          "Calendar",
          "DatePicker",
          "Expander",
          "Section 2 Quiz"
        ],
        "Panels": [
          "Intro Panels Chapter",
          "Grids part 1",
          "Grid spanning",
          "Stackpanels",
          "Wrap Panel",
          "DockPanel",
          "Canvas",
          "CatYears Part 1",
          "CatYears Part 2 - Build UI with only Csharp",
          "Section 3 Quiz"
        ],
        "Menu": [
          "Intro Menu Chapter",
          "Menu Control",
          "Toolbar Control",
          "Context Menu",
          "StatusBar",
          "Section 4 Quiz"
        ],
        "Dialogs": [
          "Open a File and displaying its text",
          "Filter selectable file types and start folder",
          "Save Text File with SaveFileDialog",
          "Section 5 Quiz"
        ],
        "Databinding": [
          "Intro Databinding Chapter",
          "Intro to databinding",
          "Databinding with noODP",
          "Databinding with enum ObjectDataProvider Combobox",
          "Databinding List to Class",
          "Section 6 Quiz"
        ],
        "Navigation and Events": [
          "Intro Navigation Chapter",
          "Events Basics",
          "Routed Events - Bubbling, Tunneling, Direct",
          "Navigation and Events",
          "Page Intro",
          "Navigation 1 - Navigate from one page to the next",
          "Navigation 2 - Navigate forward and back a page",
          "Navigation 2b - Events and Delegates",
          "Navigation 3 - Using Delegates and Events to Move between Pages",
          "Section 7 Quiz"
        ],
        "Animations and other topics": [
          "Intro - Mixed Concepts Chapter",
          "Animations 01 - Animation with XAML",
          "Animations 02 - Animation with Csharp",
          "Commands- 01 - Setting up the Close Command",
          "Linq intro",
          "Filter odd and even Numbers",
          "Linq - 02 - sort a list with linq",
          "Speech Synthesiser",
          "Section 8 Quiz"
        ],
        "MVC and user controls": [
          "Intro Custom User Controls Chapter",
          "User Controls Intro",
          "Setting up the Project and creating our first custom User Control",
          "MVC",
          "Creating the PostLikedBy User control",
          "Refactoring and Using Parent UserControls",
          "Adding a Video Model and Creating a Video Post UserControl",
          "Adding infinite scrolling and creating of new element",
          "Generating random images for our instagram scroller ending",
          "Section 9 Quiz"
        ],
        "Dependency Properties": [
          "Introduction to Dependency Properties",
          "Using a Dependency Poperty",
          "Creating our own Dependency Property and using it"
        ]
      },
      "requirements": [
        "3 Months of experience in C#",
        "A Windows PC"
      ],
      "description": "Finally, my WPF Guide For Beginners is available to you :)\nA lot of my students from the C# Masterclass course asked me to build a WPF course, and here we go, the course is live now and you can get it now and update your skills along with learning something new and potentially affecting your career as a developer.\nThe course will cover everything you need to know about the Windows Presentation Framework (WPF). You will learn what XAML is and how it is used to create modern interfaces with the help of C#.\nYou will build a Windows store application that makes use of interface items most commonly in use today!\nWe are even going to use the incredible third-party library Mah-apps, which allows us to built beautiful windows metro-style applications.\nWhat you will find inside the course?\nYou will start with the Basics of WPF with simple controls, panels, things like buttons, and text fields to ease you into the topic and showing you how XAML works.\nThen you will get the demos and presentations covering more complex topics such as\nCustom User Controls\nData Binding\nEvents and Delegates\nAnimations\nCommands\nand Navigation\nAnd of course, we will build something huge together. In my courses, you not only learn something, but you use it in practice, so we will build a Windows store application UI that makes use of interface items most commonly in use today.\nAlso, be sure, we will be here for you on every step, starting with my explanations and additional materials with step-by-step instructions and afterward, if you will have troubles or questions - we will answer them in the Q&A section.\nAre you ready to become an even better developer? Are you ready to be equipped with amazing new skills? And become much more valuable for your employer or your customers? Then join me in this WPF journey\nTHIS COURSE FOR?\nThis course is for C# developers with at least 3 months of experience. Check out my Complete C# Masterclass before starting this course!\n30-DAY FULL MONEY-BACK GUARANTEE\nThis course comes with a 30-day full money-back guarantee. Take the course, watch every lecture, and do the exercises, and if you feel like this course is not for you, ask for a full refund within 30 days. All your money back, no questions asked.\nABOUT YOUR INSTRUCTOR:\nMy name is Denis Panjuta and in my courses, I have taught over 200.000 students how to code. I have a Bachelor of Engineering at the University of Applied Sciences in Constance (Germany). I love teaching and creating high-quality courses. My mission is, to teach programming to over ten million people!",
      "target_audience": [
        "Anyone who wants to be able to build their own Desktop Applications with a great GUI"
      ]
    },
    {
      "title": "Object Oriented Programming with C# - Beginner to Advanced",
      "url": "https://www.udemy.com/course/object-oriented-programming-with-csharp-beginner-to-advanced/",
      "bio": "Detailed step-by-step guide to Classes, Interfaces and many other OOP Concepts - Object-Oriented Programming Concepts",
      "objectives": [
        "Understand and Implement The Best Object Oriented Programming (OOP) Practices",
        "Write Better and Cleaner Code",
        "Understand Fields & Properties, The relationship between them and the tidbits of Properties",
        "Create Constructors, Constructors Chaining, Automated Constructors and more",
        "The .this and .base keywords, what is their purpose, when, why and how to use them",
        "Namespaces and how they help us organize our code better",
        "Implementing the 5 Access Modifiers",
        "Understand the Concept behind the 4 Pillars of Object Oriented Programming",
        "Inheritance, Base and Derived Classes",
        "Abstraction, Abstract Classes and Interfaces, when to use which and what is the difference between them",
        "Encapsulation or how to hide your code",
        "Polymorphism, write less and more optimized code",
        "Cohesion & Coupling",
        "Many, many Quality Code Tips and Guidelines throughout the course"
      ],
      "course_content": {
        "Introduction": [
          "Brief Introduction to the Course",
          "BONUS: Shortcuts and Quality Code Tips PDF",
          "BONUS: Magic Destroyers Project - Guidelines PDF"
        ],
        "The Building Blocks of a Class (Object)": [
          "Intro to Object Oriented Programming - OOP",
          "Creating a Basic Object (Class) in C#",
          "Fields and Properties - The Variables of a Class and The Difference Between Them",
          "The Actions of a Class - Methods",
          "Constructing a Class - What is The Purpose of Constructors?",
          "Structuring The Files in Our Project - Namespaces",
          "The Building Blocks of a Class - Source Code"
        ],
        "Project Part 1": [
          "Project Part 1 - Introduction to the Project, Class and Class Members Creation",
          "Project Part 1.1 - Creating Classes, Folders and Namespaces",
          "Project Part 1.2 - Populating Classes",
          "Project part 1 - Source Code"
        ],
        "Properties": [
          "Hiding Fields with Properties",
          "Read, Write and ReadWrite Properties",
          "Logic to Validate Properties",
          "Exceptions in Object Oriented Programming",
          "Properties - Source Code"
        ],
        "Project Part 2": [
          "Project Part 2 - Adding & Validating The Properties of our Classes",
          "Project Part 2 - Enveloping Fields with Properties and Validation",
          "Project Part 2 - Properties - Source Code"
        ],
        "Constructors": [
          "The THIS Keyword, When and Why to Use It",
          "It All Comes Together",
          "Multiple Constructors in a Single Class",
          "Reusing Constructors - Constructors Chaining",
          "Generating Automated Constructors",
          "Constructors - Source Code"
        ],
        "Project Part 3": [
          "Project Part 3 - Final Constructors for our Classes",
          "Project Part 3.1 - The \"this.\"",
          "Project Part 3.2 - Additional Constructors",
          "Project part 3.3 - Constructors Chaining",
          "Project Part 3 - Source Code"
        ],
        "Access Modifiers": [
          "Public and Private Access Modifiers",
          "Internal and Protected Access Modifiers",
          "Access Modifiers - Source code"
        ],
        "Static": [
          "Static Fields And Their Purpose",
          "Constants in C# - Const and ReadOnly and The Difference Between Them",
          "Static Methods",
          "Static Class (Singleton Design Pattern) And What You Can Do With It",
          "Enumerations - Limit The Input Options To Defend Your Code",
          "Static - Source code"
        ],
        "Project Part 4": [
          "Project Part 4 - Adding Static Classes and Members, and Enums Where Necessary",
          "Project Part 4.1 - Constants",
          "Project Part 4.2 - Enumerations",
          "Project Part 4.3 - Static Classes",
          "Project Part 4 - Source Code"
        ]
      },
      "requirements": [
        "Students MUST have Coding Experience, Preferably with C# (other languages like Java are ok)",
        "Experience with Visual Studio - Creating new solutions, projects, files. The course provides tutorials.",
        "Visual Studio Installed on your PC (the course has tutorial)"
      ],
      "description": "This course will lay the foundations of Object Oriented Programming (OOP) in your mind, allowing you to progress to more systematic and cleaner Programming methods.\nThe course is aimed at students who have at least some coding experience, preferably with C# (but Java or any other similar language is also acceptable).\nThere are so many things that you will learn in this course, some of the most noted ones are:\nWhat is an object and a class\nWhat is object oriented programming\nClass Constructors\nNamespaces\nShould you or should you not use the \"this\" keyword\nFields and Properties\nDifferent ways in which Properties can be used\nConst and Readonly constants, the difference between them and how to use them\nStatic Fields and Static (Singleton) Classes\nEnumerations\nAccess Modifiers\nThe 4 Pillars of Object Oriented Programming - Inheritance, Abstraction, Encapsulation, Polymorphism\nMany, many quality code guidelines\nEach of these topics will be looked upon in great detail, and each of them are accompanied by a variety of Exercises. Practice makes perfect.\nThere are tons and tons of tutorials on Youtube, so why would you have to pay for this course?\nThe answer is very simple, in this course you will get every single lecture systemized in such way, that it ensures smooth transition between the previous and the following topic. Guaranteeing great learning experience.\nThere are no stones left unturned, everything is explained in great detail (but not too much, that would be boring :) )\nThe video lectures in the course are produced with the highest possible audio and video quality. No static noises to disturb you while you watch the videos, no blurry images, everything is crystal clear with crisp audio!",
      "target_audience": [
        "Anyone who want to learn Object Oriented Programming and take their coding skills to the next level",
        "Anyone who wants to refresh their knowledge about Object Oriented Programming",
        "Anyone who has interest in the field"
      ]
    },
    {
      "title": "Efficient Java Multithreading and Concurrency with Executors",
      "url": "https://www.udemy.com/course/efficient-java-multithreading-with-executors/",
      "bio": "Learn how to use the modern Executors framework to do everything that you can do with the Threads API ... and more!",
      "objectives": [
        "Exploit the ninja techniques learned from this course to write safe and error free multithreading code in the first iteration itself.",
        "Become confident to move away from the old Threads-API and use the modern Executors-API for all multi-threading needs instead.",
        "Understand and exploit the various pro techniques to avoid the pitfalls while using Executors.",
        "Understand and leverage the similarities & differences between the Threads-API and the Executors-API.",
        "Rightly judge which Executor pool to use for which needs.",
        "Differentiate between safe and error-prone multi-threading code.",
        "Appreciate the reasons why Executors API was built even though the Threads API already existed.",
        "Write efficient multi-threading code by utilizing a plethora of pro tips and techniques.",
        "Get the Source Code of all the examples!"
      ],
      "course_content": {},
      "requirements": [
        "You should already have a solid grasp of Core Java.",
        "You should already know about the basic concepts of multi-threading viz. what are threads, why are threads required, various states they can be in, what is synchronization, what is locking, etc.",
        "You should have Eclipse IDE and JDK 1.7 or higher installed on your machine.",
        "You should already know how to use Eclipse IDE for Java programming."
      ],
      "description": "Learn all the concepts of Java's Executors API from scratch in combination with parallel concepts of the Threads API. Develop skills and deepen your knowledge of advanced multi-threading concepts by learning various tips & techniques and becoming aware of pitfalls when using Executors API. And ... refresh your advanced Threads-API concepts as well.\nDo you know how to return values using the normal Threads API and its Runnables?\nDo you know the various ways of terminating threads midway for both the APIs?\nDo you know how to 'join threads' using Executors?\nDo you know that you cannot catch stray exceptions leaked out from a thread by using try-catch block - neither in the Threads API nor in the Executors one? And that this can lead to third-party code killing your scalable, high-performance and high-availability enterprise application?\nDo you know how to check if a task has finished execution using both the APIs?\nDo you know what are daemon threads and how to create them using Executors?\nDo you know how to name Executor threads?\nDo you know the various ways to schedule tasks for running in future using both the APIs? Do you know the various 'types' of scheduling?\nIf the answer to any of these questions is 'no', then this course is for you (provided that you know Java and the basics of multi-threading already)! Learning from HD quality videos and nearly 6 hours of content will help you convert all these \"nos\" to \"yeses\" ... and will also give you an edge over your peers! Not only will this course help you learn how to get things done the multi-threaded way but also how to avoid the mistakes and pitfalls and thereby, increase your efficiency and productivity. All those long bug-fixing hours that you save can be spent finishing your other pending work or even for pleasure!\nAvoid the pitfalls while writing multi-threaded code by learning pro-tips\nIn my 19 years of experience building large enterprise applications, I have made all the mistakes in multi-threading that can be made. And believe me - multi-threading bugs are costly and multi-weekend-destroying to resolve.\nI have used my vast experience to craft this course in such a manner so as to highlight the pitfalls that await a programmer and also provide tips to avoid those pitfalls. By going through this course, you will be years ahead of your peers who are yet to make all the mistakes that I have made.\nContent and Overview\nIt is difficult to directly move from an older to a newer way of doing things if you are not comfortable with the older way also - you won't be able to map things from the old way to the new way. So, this course has been structured in such a way that the Threads-API way of doing things are explained first and then the corresponding way to do them using the Executors-API is explained. This will help you understand not only the advanced concepts of Executors but also those of the Threads-API.\nSo, this course is suitable for programmers who want to learn about the Executors API from scratch. It is also beneficial for those who want to refresh their concepts or learn the techniques of doing various operations using the Threads-API. Detailed examples along with the source-code are provided on every concept for both the APIs.\nThe course starts with the basics first - 'How to create and run threads', 'How to name the threads' and 'How to return values from threads' - using both the APIs. And then, it gradually moves on to increasingly advanced concepts like 'Terminating Threads', 'Catching Exceptions', 'Waiting for threads to finish without wasting CPU cycles', etc.\nBEFORE YOU BUY THIS COURSE, DON'T FORGET TO WATCH THE FREE PREVIEW VIDEO ON 'PRE-REQUISITES AND COURSE STRUCTURE' IN SECTION-1!",
      "target_audience": [
        "This course is meant for all Java professionals who are familiar with Java's Threads-API but who are not comfortable with the Executors-Framework yet. For example - if you know how to terminate normal threads but not how to terminate Executor tasks or threads, then this course is for you.",
        "Even if you do not know how to terminate normal threads, return values from normal threads and the like - then also this course is for you. Professionals who are still using the old Threads-API and want to have more practical knowledge about some advanced concepts of this API can also benefit from this course as Threads-API is also covered in detail.",
        "If you love to have deep knowledge of underlying concepts of a technology or topic rather than just shallow familiarity, then this course is for you.",
        "This course is probably not for you if you are looking to learn about Java multi-threading from scratch!",
        "This course is definitely not for you if you do not know how to code in Java!"
      ]
    },
    {
      "title": "Java 11 For Complete Beginners",
      "url": "https://www.udemy.com/course/java-11-complete-beginners/",
      "bio": "Learn Modern Java From Scratch",
      "objectives": [
        "Computer programming in Java"
      ],
      "course_content": {},
      "requirements": [
        "Understand basic computer use: installing programs, opening files, etc."
      ],
      "description": "This course teaches you computer programming in the Java language from scratch.\nI'll be typing all the source code in front of your eyes and we'll be using Java version 11-12, taking advantage of many features that have been added to Java over the past few years -- including streams, method references and lambda expressions.\nAlong the way we'll create a number of projects, including two desktop apps.\nThis is a completely updated and revised version of my popular Java for Complete Beginners course, which has gathered over 1.3 million subscribers on Udemy. In addition to newer Java features, this revised course includes lots of exercises to increase your fluency.",
      "target_audience": [
        "Anyone who wants to learn computer programming",
        "New Java developers who want to improve their knowledge",
        "Experienced developers who want an introduction to newer features in Java: streams, method references, lambda expressions."
      ]
    },
    {
      "title": "The Essential Kotlin Programming Course (Android Developers)",
      "url": "https://www.udemy.com/course/the-essential-kotlin-programming-course-android-developers/",
      "bio": "A deep dive exploring the Kotlin Programming Language",
      "objectives": [
        "Understand all concepts of the Kotlin Programming Language",
        "Learn Object-Oriented Programming Concepts",
        "Understand the relationship between Kotlin and Java",
        "Understand the best approaches for utilizing Kotlin in Android",
        "Create your first Android Application using Kotlin",
        "Learn the concept of Lambdas and High Order Functions",
        "Understand the importance of Extension Functions",
        "Learn about the Kotlin Standard Library",
        "Understand how Kotlin is a Null Safe Language",
        "Learn how to use the Collection Classes in Kotlin",
        "Understand the use of Generics in the Kotlin Programming Language",
        "Develop the Skills necessary to utilize the IntelliJ and Android Studio IDE's to create Kotlin applications",
        "Understand the importance of a Statically Typed Language and Type Inference"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to Class!",
          "Class Organization",
          "Overview of Kotlin",
          "Language Features",
          "Object Oriented Programming",
          "Functional Programming",
          "Advantages of Using Kotlin"
        ],
        "Installing the Required Software": [
          "Installing the JDK (Java Development Kit)",
          "Intstalling the IntelliJ IDEA (Integrated Development Environment)"
        ],
        "Starting to Write Code": [
          "Kotlin Tools",
          "Creating an IntelliJ Project",
          "Exploring the IntelliJ Environment",
          "Compiling and Running your first application (Hello World)",
          "Variations of the Hello World Program (code along)"
        ],
        "Miscellaneous": [
          "Packages",
          "Comments"
        ],
        "Variables and Data Types": [
          "Overview",
          "Static Typing and Type Inference",
          "Mutable and Immutable Variables",
          "Basic Data Types",
          "Program to print the area of a rectangle (Code Along)",
          "A program to convert minutes to years and days (code along)",
          "String and String Templates",
          "A program that demonstrates Strings and String Templates (code along)",
          "Any and Any? Types",
          "The Unit Type (void)",
          "The Nothing Type (never returns)",
          "Explicit Casts and Smart Casts",
          "SmartCast Example (code along)"
        ],
        "Operators": [
          "Basic Operators",
          "Other Operators (in, index, invoke, is)",
          "Using the in Operator, Example (code along)"
        ],
        "Nullability": [
          "Nullable Types",
          "Safe Call Operator (?)",
          "Elvis Operator (?:)",
          "as? (Safe Cast) Operator",
          "Not Null Assertions (!!)",
          "A program that demonstrates Null Safety (code along)"
        ],
        "Control Flow": [
          "Overview",
          "If Statements and Expression",
          "When Statement and Expression",
          "A program that demonstrates the When construct (code along)",
          "While and Do-While loops",
          "Ranges and Progressions",
          "For Loop",
          "return and jump",
          "Guess the Number Program (code along)"
        ],
        "Functions": [
          "Basics",
          "Top Level Functions",
          "Member and Local Functions",
          "Named Parameters/Arguments",
          "Default Parameters/Arguments",
          "Infix Calls",
          "Variable Arguments (var-args) and the Spread Operator",
          "Overloaded Functions",
          "A program that demonstrates method overloading (code along)",
          "Extension Functions"
        ],
        "Standard Library Functions": [
          "apply, let, and with",
          "run, lazy, and use",
          "repeat, (require, assert, and check)"
        ]
      },
      "requirements": [
        "A computer running Microsoft Windows, Linux or the Mac operating systems",
        "Students should have at least 4GB of ram on their computer",
        "No programming experience, all concepts taught in this class!"
      ],
      "description": "Students will learn all aspects of the Kotlin Programming Language.  They will also understand how to apply this knowledge to more effectively write Android applications. This class does not focus on the server side programming aspects of Kotlin.  This class does not focus on Android programming.  This class focuses on the Kotlin Programming Language and the advantages of using Kotlin when writing Android applications.  You will learn how to effectively use this language to make programming fun and interesting in Android. I will cover every concept in the Kotlin language and provide exercises to help you learn the language.  This course is a deep dive into the Kotlin language, it does not just cover the basics.  By the end of this course you will fully understand the Kotlin langauge and how to use it to write Android applications.\n\nIf you have previously used Kotlin on an Android platform, I'm sure this course will deepen your understanding of it. If you have never used it, no problem, you will see that it can help you become a more efficient Android developer.\nThroughout the course, you can always contact me personally to get help when you're stuck. I check the discussions regularly to help you at every step along the way.\nLastly, this course is constantly updated and refined based on student feedback. I really appreciate each and every of my students so I listen to your feedback and act on it.",
      "target_audience": [
        "This course is for anyone who would like to fully understand the concepts of the Kotlin Programming Language",
        "This course is for anyone who would like to create android mobile applications using the Kotlin Programming Language"
      ]
    },
    {
      "title": "Complete C# Course – Beginner to Expert (C# 12 Updated 2024)",
      "url": "https://www.udemy.com/course/complete-c-sharp-programming-course-beginner-to-expert/",
      "bio": "Learn Professional C# Coding! 26 Hours of Content, 6 Hands-On Projects, Updated 2024 with C# 12 and .Net 8",
      "objectives": [
        "Master C# Programming with a hands-on approach focused on getting you professional C# experience you can use to GET A JOB!",
        "Updated videos on C# 12, .Net 8, and Visual Studio 2022",
        "Built a 3D Marvel Contest of Champions fighting game in Unity using C# with 4 playable characters and enemy AI logic!",
        "Understand HOW to implement all of the major search and sort algorithms in computer science, and WHEN to use each approach",
        "Take a DEEP DIVE into collections and data structures and become a master at understanding the PROS and CONS of each!",
        "Learn ADVANCED topics like asynchronous coding, threading, delegates, generics, recursion, bitwise operations and MORE",
        "Start out with basic or no C# knowledge and build up to being able to LAND A JOB using C# after taking this course!",
        "Gain a hands-on understanding of ALGORITHMS like A*, Dijkstra’s, N choose K, Kruskal’s, and more!",
        "Understand all 23 Gang of 4 design patterns and HOW TO IMPLEMENT EACH OF THEM, in C# in an easy-to-understand manner",
        "Start from Zero and Go to Hero with this ALL IN ONE, COMPREHENSIVE C# programming course!",
        "Course is PACKED with interview questions and focuses on teaching you HOW TO THINK LIKE A COMPUTER PROGRAMMER",
        "Build 6 HANDS-ON APPLICATIONS including a web app, mobile app, database app, AI program, Machine Learning program, and a video game!",
        "Build the coding skills and deep understanding of computer science, data structures, and algorithms to pass coding interviews with TOP TIER TECH COMPANIES!",
        "Understand what Dependency Injection is and how to implement it using C# code",
        "Prepare for the Microsoft Certification Exam 70-483 the C# CERTIFICATION EXAM that Microsoft offers!",
        "Boost programming experience with hands-on CODING EXERCISES! Practice the C# skills you learned and get instant feedback!",
        "Learn about CRYPTOGRAPHY and how to encrypt messages into ciphertext!",
        "Get hands-on experience coding PROJECT EULER coding challenge problems to build your math and problem solving skills!",
        "Learn about how to use LINQ - Language Integrated Query to work with collections and leverage its strengths in your coding!"
      ],
      "course_content": {},
      "requirements": [
        "A computer with Windows, Mac, or Linux",
        "Eagerness and willingness to learn C# programming and build some awesome projects",
        "Note: All software and programs for this course are FREE (GitHub and Mixamo require email to sign up)"
      ],
      "description": "The goal of this course is to take a student with little or no experience programming in C# and to make them a complete master of the language.\nWhether you want to:\nBuild the skills you need to land your first C# programming job\nMove to a more senior software developer position\nAce a coding interview at a top tier tech company like Google, Apple, Facebook, or Microsoft\nTake the Microsoft Certification Exam 70-483 that tests your C# knowledge\nBuild professional quality video games in the Unity game engine\nOr just learn C# to be able to build professional quality apps\n…this complete C# tutorial is the course you need to do all of this, and more.\n\n\nWhy should you learn C#?\nC# is an in-demand skill, and one of the most popular programming languages in the world.\nIt is powerful, flexible, and well supported and is used in a wide variety of industries including Investment Banking, Mobile App Development, Web Development, and Game Development.\nThis course will teach you not only C#, but the key computer science concepts like Data Structures and Algorithms, Searching and Sorting, and Gang of Four Design Patterns. This course will help you ace interviews and get a job.\n\n\nHow is the course structured?\nThe course goes in order building up from basic to intermediate and then to advanced.\n\n\nMost sections of the course have a quiz at the end, then a video explaining the answers to the quiz questions, and have several interview questions with detailed answers that relate to that section. That means as you learn the material you will be mastering crucial interview questions based on the subject matter you are learning.\n\n\nAt the end of the course there are 7 real world project where you build apps and a video game using C# and absorbing all kinds of knowledge about industry software and key programming techniques.\n\n\nThere is also a section in the course with a beginner, intermediate, and advanced C# quiz, a full length practice test on C#, and several videos where I show you how to solve a bunch of potential interview questions and coding problems using C# and the techniques you learned in the course.\n\n\nWhat topics are taught in this course?\nFundamentals of Computer Science\nSetup and Install Visual Studio on your Computer\nGetting Started with C#\nData Types\nWorking with DateTime data in C#\nControl Flow Statements and Loops\nUser Input and Files\nFunctions\nInterfaces and Abstract Classes\nData Structures and Collections\nAdvanced C# Coding\nREGEX - Regular Expressions\nC# Namespaces\nDocumenting Your Code\nSearching and Sorting\nObject Oriented Programming\nC# Generics\n.NET Framework\nBitwise Operations in C#\nThreading in C#\nLINQ - Language Integrated Query\nVersion Control - GitHub and SourceTree\nC# Debugging, Exception Handling, and Unit Tests\nReflection in C#\nRefactoring C# Code\nTypes of Algorithms\nImplementing Algorithms in C#\nOptimizing Code\nDesign Patterns\nC# 8.0 New Features\nC# 9, 10 and 11 New Features\nC# 12 New Features (2024 Update)\nHow to Write Good Code\nLanding a Programming Job\nC# Programming Practice Videos, Quizzes, and Tests\nIntro to C# Hands-On Projects: Build Real World Apps!\nHands-On: Building a Database Application using Microsoft SQL Server and C#\nHands-On: Building a Web App using ASP .Net and C#\nHands-On: Building a Mobile App using Xamarin C# (Windows and Mac only)\nHands-On: Building an Artificial Intelligence / Neural Network using C#\nHands-On: Building a Machine Learning app using ML .Net and C#\nHands-On: Building a 3D Marvel Fighting Game using C#\nCoding Challenges: Project Euler\nCryptography\nDependency Injection\n\n\nHow is this course different than the other C# courses on Udemy?\n\n\nThis course is a through, comprehensive tutorial on the C# programming language.\n\n\nSome courses teach you the theory, others teach through hands-on projects. This course combines both approaches.\n\n\nIn addition to teaching beginner, intermediate, and advanced C#, this course also breaks down all the Gang of Four design patterns, teaches searching and sorting techniques, and data structures and algorithms.\n\n\nThis course has more practice material than the other courses, with a quiz after most sections to test your knowledge, links to free online learning resources, and videos that walk you through solving coding interview and challenge questions using the C# techniques you have learned.\n\n\nThis is the only C# course you will ever need.\n\n\nI made this course to be the only C# course you will ever need. A course that you can come back to and master the advanced techniques, and a course that you can pick-and-choose what to learn based on your goals and interests.\n\n\nThere is no filler material and no nonsense in this course. If I added a video or resource to this course, it is because I believe it to be important to your journey as a programmer. To truly reap the benefits of C#, and become a master of the C# programming language, you should strive to complete as much of the course as you can.\n\n\nAre there real-world projects in this course where you can apply the skills you learn hands-on?\n\n\nThere are! In fact, you will build 6 hands-on apps in this course! You will use your C# skills to develop:\nA database application using Microsoft SQL Server and C#\nA Web App using ASP .Net\nA cross-platform Mobile App using Xamarin\nA neural network AI program using C#\nA machine learning program using ML .Net and C#\nA 3D Marvel Fighting game using Unity, Mixamo, and C#\n\n\nI will walk you through building each of these projects step by step, so don’t worry about getting overwhelmed or stuck! My students know I break down the big concepts into digestible pieces of information that anyone can understand.\n\n\nWho is your instructor?\n\n\nMy name is Rob Gioia and I currently work as a Mobile Software Engineer in New York City. C# is my favorite programming language, and every industry job that I have held has used C# as the primary programming language.\n\n\nDuring my time working with C# both in the professional and personal capacity, I’ve used C# to:\nTeach students how to program when I worked as a teacher’s assistant at the New Jersey Institute of Technology\nBuild virtual reality games to therapy children with convergence insufficiency, an eye disorder, and gamify their treatment.\nBuild a lifestyle Scratch to Win mobile app with over 10 million installs (there was some Java programming involved in this one as well :-) )\nDevelop card trader apps based around high end Intellectual Property like Marvel, Disney, and Star Wars.\nCreate Udemy courses that students have used to build full length video games using Unity and C#.\n\n\nI also took part in the Google Interview process during October 2018 and used C# during the phone interview. I continued on in the interview process but obtained another high paying job in the process, an opportunity to work on a Marvel Collect app among other top intellectual property mobile apps.\n\n\nMy background has been gaming focused, but I want to emphasize that this is NOT A GAME DEVELOPMENT or UNITY COURSE! C# can be used in so many other capacities, and this course is meant to make you a master of C#, and then teach you how to build all kinds of projects using this powerful programming language.\n\n\nWhat if you have questions?\n\n\nAny questions you have can be posted to the Q&A forum or messaged to me on Udemy. I check my Udemy account every day to see if students have questions, and do my best to be as responsive and helpful as possible.\n\n\nIf you get stuck at any point during this course, send me a message and I will get you unstuck!\n\n\nThere is no risk in taking this course!\n\n\nThis course comes with a full 30 day money-back guarantee. You either end up with C# skills, go on to develop great programs and potentially make an awesome career for yourself, or you try the course and simply get all your money back if you don’t like it…\n\n\nYou literally can’t lose.\n\n\nAre you ready to master the C# programming language and build an awesome set of software engineering skills? Then enroll now using the “Add to Cart” button on the right!",
      "target_audience": [
        "Anyone that wants to master the C# programming language, one of the most popular programming languages in the world.",
        "This course is perfect for absolute beginners with no previous coding experience, to intermediates looking to sharpen their skills to the expert level.",
        "Professional C# developers that want to deepen their skills to advance to a higher, more senior position at their company.",
        "Those looking to build creative and advanced C# apps for either personal use or for high-paying clients as a self-employed contractor.",
        "Anyone that wants to be able to ace coding interviews at top-tech companies like Google, Apple, Facebook, and Microsoft.",
        "Students that want to build professional quality video games using C# and the Unity game engine"
      ]
    },
    {
      "title": "Learn JAVA Programming - Beginner to Master",
      "url": "https://www.udemy.com/course/java-se-programming/",
      "bio": "Deep Dive in Core Java programming -Standard Edition. A Practical approach to learn Java. Become a Java Expert",
      "objectives": [
        "Learn Java Programming for Standard Edition Java SE",
        "Learn Multithreaded Programming",
        "Learn GUI Programming",
        "Learn Database Programming"
      ],
      "course_content": {
        "Introduction": [
          "Instructor's Note",
          "Download and Install JDK",
          "First Java Program using Notepad",
          "Installing JDK on macOS and First Program",
          "Skeleton of Java Program",
          "Exploring First of Skeleton Program",
          "Reading from Keyboard",
          "Reading with Scanner",
          "Student Challenge : Write your First Java Program",
          "Quiz"
        ],
        "Data Types - Variables and Literals": [
          "Data Types",
          "Check Size and Range of Data Types",
          "What are Variables?",
          "Rules for Variables Names",
          "What are Literals?",
          "Integral Data Types in Detail",
          "Check Binary Bits of an Integer",
          "Float and Character Datatypes in Detail",
          "Visiting UniCode.org",
          "Quiz"
        ],
        "Setup Java Environment": [
          "Installing Notepad++",
          "Installing Eclipse",
          "Installing NetBeans",
          "Installing IntelliJ"
        ],
        "Features and Architecture": [
          "Compiler vs Interpreter",
          "How Java is Platform Independent",
          "Platform Independent Demo",
          "JVM Architecture",
          "JVM Architecture Details",
          "Features of Java"
        ],
        "Operator and Expressions": [
          "Arithmetic Operators and Expressions",
          "Practice : Arithmetic Operators",
          "Student Challenge : Calculate Area",
          "Student Challenge : Quadratic Equation",
          "Student Challenge : Cuboid",
          "Increment and Decrement Operators",
          "Practice: Increment and Decrement Operators",
          "Bitwise Operator - AND , OR & XOR",
          "Bitwise Operator - Left Shift , Right Shift & NOT",
          "Practice: Bitwise Operators",
          "Bit Masking and Merging",
          "Student Challenge : Masking and Swapping",
          "Widening and Narrowing",
          "Quiz"
        ],
        "String Class and Printing": [
          "Printing using System.out.println",
          "Formatted Output #1",
          "Formatted Output #2",
          "String Object",
          "Creating String Objects",
          "String Methods #1",
          "Practising String Methods",
          "String Methods #2",
          "Practising String Methods 2",
          "String Methods #3",
          "Practising String Methods 3",
          "Regular Expressions",
          "String Matching with Regular Expressions",
          "Student Challenge: String methods",
          "Student Challenge: Regular Expression #1",
          "Student Challenge: Regular Expression #2",
          "Quiz"
        ],
        "Conditional Statements": [
          "Relational and Logical Operators",
          "Conditional Statements",
          "Practising Conditional Statement",
          "Student Challenge: 3 Simple Tasks",
          "Student Challenge: Find Radix",
          "Student Challenge: Type of Website",
          "Switch Case",
          "Practising Switch Case",
          "Student Challenge: Day in Words",
          "Student Challenge: Menu Driven Program",
          "Quiz"
        ],
        "Loops": [
          "while Loop and do..while Loop",
          "Practising Loops",
          "for Loop",
          "Practising For Loop",
          "Student Challenge : Factorial",
          "Student Challenge : Armstrong Number",
          "Student Challenge : Palindrome",
          "Student Challenge : Display Number in Words",
          "Student Challenge : Fibonacci",
          "Nested Loops",
          "Student Challenge: Patterns1",
          "Student Challenge: Patterns2",
          "Student Challenge: Patterns3",
          "Quiz"
        ],
        "Arrays": [
          "One-Dimensional Arrays",
          "Practising 1D Array",
          "Student Challenge: Find Second Largest Element",
          "Student Challenge : Rotation of Array",
          "Student Challenge : Increasing Size of Array",
          "Two-Dimensional Array",
          "Practising 2D Array",
          "Student Challenge: Matrix Multiplication",
          "Quiz"
        ],
        "Methods": [
          "What are methods",
          "Writing Methods",
          "Passing Object as Parameters",
          "Practising Object Passing",
          "Parameter Passing in Java",
          "Student Challenge : Find Prime number",
          "Method Overloading",
          "Practising Method Overloading",
          "Student Challenge: overload Validate method",
          "Variable Arguments",
          "Practising Variable Arguments",
          "Student Challenge: Calculate Discount",
          "CommandLine Arguments",
          "Student Challenge: Sum. of Numbers from CommandLine",
          "Recursion",
          "Quiz"
        ]
      },
      "requirements": [
        "Basic Knowledge of Programming Required",
        "Tools : JDK",
        "IDE : Netbeans , Eclipse or IntelliJ"
      ],
      "description": "The course consists of JAVA features, Java SE\nConcept of programming are made simple and easy.\nEvery topic is explained with real-life examples.\nThis course is designed to make you familiar with JAVA Programming in detail.\nBy the end of the course you will understand Java extremely well and will be able to build your own Java applications.\nAfter completion of the course, you will be as productive as a software developer.\nThe course is taken right from basics to all the features in JAVA.\nBasic topics like – Methods, Object-Orientation and Inheritance are explained.\nFeatures like – Multithreading, AWT, Swing, Collection Framework and Networking are also covered in a detailed manner.\n\n\nWho this course is for\nBeginner in java programming, want to learn in-depth java programming\nThis course is ultimate for absolute beginners and the intermediate looking to improve their aptitude to expert level\nStudents who want to learn java perfectly\n\n\nCourse Contents:\nIntroduction to Java\nSetup Java Environment.\nOperator and Expressions.\nString Class and Printing.\nConditional Statements.\nLoops.\nArrays.\nMethods.\nObject-Oriented Programming.\nInheritance.\nAbstract Classes\nInterfaces\nInner Classes\nStatic and Final\nPackages\nException Handling\nMultithreading\njava.lang Package\nAnnotations and Javadoc\nLambda Expressions\nJava IO\nCollection Framework\nNetwork Programming\nAWT\nSwing\n\n\nSupport from Instructor\nif you are a beginner then follow the course in same order and practice everything you learn.\nyou can always ask question in Q&A section. you will find it below every lecture. Please don't use messages for asking doubts.\nYour questions will be answered within 48 hours. before asking a question please check the question and answer for previously asked question.",
      "target_audience": [
        "Beginners Programmers - who want to Master Java Programming Skills",
        "Java Programmers - who want improve their Java Programming Skills.",
        "Students : who are taking Java as a course in academics."
      ]
    },
    {
      "title": "PHP for Beginners",
      "url": "https://www.udemy.com/course/php-for-beginners-/",
      "bio": "Build a Content Management System from Scratch with PHP and MySQL",
      "objectives": [
        "Learn how to create a dynamic website using the most popular website programming language",
        "Build a working CMS in PHP and MySQL from scratch",
        "Learn how to secure your code",
        "Learn how to write reusable, more maintainable code using programming standards",
        "Learn how to structure your code using object-oriented programming techniques",
        "Learn the theory but then put it into practice in a CMS project",
        "Style your site using Bootstrap",
        "How to integrate third-party code into your site",
        "How to store data in a relational database and use this from PHP code",
        "Learn all aspects of a basic web application in PHP: login, CRUD operations, sending emails, uploading files, Ajax"
      ],
      "course_content": {},
      "requirements": [
        "Access to a computer running Windows, Mac OS X or Linux."
      ],
      "description": "Are you wanting to get into Web development, but are not sure where to start?\nSo maybe you tried out some PHP and MySQL tutorials on Youtube, but found them too hard or outdated, and feel that you need a more comprehensive introduction.\nMaybe you want to learn how to write PHP the right way.  Secure code, OOP ready, and maximising re-usability as well as finding out about PHP programming standards to adopt and adhere too?\nPerhaps your boss or client threw you in the deep end with a PHP and MySQL project, and you need to get up to speed with PHP, fast.\nWhatever the reason, this course is for you.\nThis course is going to teach you how to create web applications using PHP and MySQL.  Specifically, you will learn PHP and then create you own content management system (CMS) from scratch.\n\nWhy PHP?\nPHP is the most popular website programming language in the world.  The combination of PHP and MySQL is used extensively to create web applications, and developers with these key skills are in high demand.  This course is going to teach you how to create web applications in PHP using the MySQL database.\nWhat will you learn in this course?\nYou will learn  how to create a dynamic website using the most popular website programming language in the world, PHP.\nDave Hollingworth, your instructor will teach you the PHP programming language, and take you through the steps to build a working CMS in PHP and MySQL from scratch.\nAlong the way, you will learn how to secure your code, how to write reusable, more maintainable code using programming standards, and how to structure your code using object-oriented programming techniques.\nDave will teach you the theory and then put the theory into practice when building the CMS.\nYou will also learn how to style your site using Bootstrap, how to integrate third-party code into your site, how to store data in a relational database and use this from PHP code, and more.\nThe course is very thorough, and goes through everything from installing a web server on your own computer, and editor to writing the code to create your web app.  Towards the end of the course you will even learn how to upload the code and make your code live on the internet (very useful if you already have your own Hosting account).  This is not necessary to complete the course though.\nIn summary, the course will teach you the core skills you need to know to become a productive PHP programmer.\nWhy this course?\n\nFirstly, Dave has been creating web applications since 1999, when he created his first web application for a major insurance company.  In addition he has been teaching IT for many years.\nAs a result, you will be learning the best practices from an experienced developer.\nDave will teach you the theory but then show how to put those techniques into practice.  You will start building a CMS application from early on in the course and new techniques and theory are introduced as and when they're needed to build the next part of the CMS.\nNew code is introduced one word or one line at a time, so you will never get bogged down or overwhelmed.\nYou will also learn real-world developer skills such as referring to and getting the most out of the documentation. This is an essential skill for developers to learn.\n\nAfter completing this course, you will have the necessary skills to be able to create your own web applications with PHP and MySQL.\n\nThe sooner you sign up for this course, the sooner you will have the skills and knowledge you need to increase your job or consulting opportunities.    PHP developers are in high demand!\nYour new job or consulting opportunity awaits!\nWhy not get started today?\nClick the Signup button to sign up for the course!",
      "target_audience": [
        "Anyone wanting to learn both the PHP language and how to create web applications"
      ]
    },
    {
      "title": "Learn to Code with Python",
      "url": "https://www.udemy.com/course/learn-to-code-with-python/",
      "bio": "The complete Python bootcamp for 2024. Learn Python 3 from beginner to expert. Build complete Python applications.",
      "objectives": [
        "Master programming in Python, a popular language that powers codebases in tech companies like Instagram, Pinterest, Dropbox and more",
        "Dive into the mechanics of Python's data structures including strings, lists, dictionaries, tuples, and sets",
        "Apply your knowledge to solve common interview questions, algorithms and coding challenges",
        "Explore a dynamic curriculum with videos, quizzes, written assignments, in-browser coding challenges and more",
        "Progress from core language fundamentals to advanced features like classes, decorators and unit testing",
        "Build complete projects including card games, web scraping tools, and more!"
      ],
      "course_content": {
        "Setup & Introduction": [
          "Welcome to the Python Programming Language",
          "About Me",
          "About You",
          "Download Course Files",
          "FREE DOWNLOAD: Learn to Code with Python Course Notes PDF",
          "Note on Installation Videos",
          "macOS - Use the Terminal to Issue Commands to Your Operating System",
          "macOS - Download and Install Python 3",
          "macOS - Download and Install Visual Studio Code",
          "Windows - Use the Command Prompt to Issue Commands to Your Operating System",
          "Windows - Download and Install Python 3",
          "Windows - Download and Install Visual Studio Code",
          "macOS + Windows - Installing VSCode Plugins",
          "macOS + Windows - Configuring VSCode Project Settings",
          "macOS - Run Python File",
          "Windows - Run Python File",
          "The Visual Studio Code (VSCode) Interface and Helpful Shortcuts",
          "The Interactive Prompt (REPL)",
          "Setup and Installation",
          "OPTIONAL: Words of Motivation",
          "General Housekeeping"
        ],
        "Welcome to Python": [
          "Objects: Strings",
          "Intro to Functions",
          "The print Function I: Outputting a Single Argument",
          "Strings and the print Function",
          "The print Function II: Outputting Multiple Arguments",
          "The print Function III: Parameters and Arguments",
          "Comments",
          "Intro to Coding Exercises",
          "Outputting Text with the print Function (3.8)",
          "Coding Exercise SOLUTION: Outputting Text with the print Function",
          "Welcome to Python Section Review",
          "Parameters, Arguments and Comments"
        ],
        "Numbers, Booleans and Equality": [
          "Mathematical Expressions",
          "Division, Floor Division, and the Modulo Operator",
          "Mathematical Operators",
          "The Boolean Data Type, The Equality Operator (==) and Inequality Operator (!=)",
          "Boolean Mathematical Operators",
          "Boolean Mathematical Expressions",
          "The type Function",
          "The type Function",
          "Type Conversion with the int, float and str Functions",
          "Type Conversion",
          "Numbers, Booleans, and Equality Section Review"
        ],
        "Variables": [
          "Intro to Variables",
          "Variable Naming Rules",
          "Declaring Variables (3.8)",
          "Coding Exercise SOLUTION: Declaring Variables",
          "Multiple Variable Assignments",
          "Augmented Assignment Operator",
          "Collecting User Input with the input Function",
          "Convert Fahrenheit Temperature to Celsius",
          "The NameError, ValueError, TypeError and SyntaxError Exceptions",
          "Variables, Input, and Errors Quiz",
          "Variables Section Review"
        ],
        "Functions": [
          "Intro to Functions",
          "Parameters and Arguments",
          "Positional Arguments and Keyword Arguments",
          "Declaring Return Values for Functions",
          "The Basics of Functions (3.8)",
          "Coding Exercise SOLUTION: The Basics of Functions",
          "Default Arguments",
          "Default Arguments (3.8)",
          "Coding Exercise SOLUTION: Default Arguments",
          "The None Type",
          "BONUS: Function Annotations",
          "Functions",
          "Functions Section Review"
        ],
        "Strings: The Basics": [
          "Length, Concatenation and Immutability",
          "Length, Concatenation, and Immutability (3.8)",
          "Coding Exercise SOLUTION: Length, Concatenation, and Immutability",
          "String Indexing with Positive Values",
          "String Indexing with Negative Values",
          "String Indexing",
          "String Indexing (3.8)",
          "Coding Exercise SOLUTION: String Indexing",
          "String Slicing I: Slicing by Range",
          "String Slicing I",
          "String Slicing II: Slicing by Steps",
          "String Slicing II",
          "String Slicing (3.8)",
          "Coding Exercise SOLUTION: String Slicing",
          "Escape Characters",
          "The in and not in Operators for Checking Inclusion of a Substring within a Strin",
          "Strings: The Basics Section Review"
        ],
        "Strings: Methods": [
          "The find and index Methods",
          "Researching the rfind Method",
          "The startswith and endswith Methods",
          "The count Method to Count Occurrences of Value in a String",
          "The find and count Methods (3.8)",
          "Coding Exercise SOLUTION: The find and count Methods",
          "The capitalize, title, lower, upper and swapcase Methods to Change Casing",
          "Boolean Methods for Strings",
          "Casing Methods for Strings",
          "The lstrip, rstrip, and strip Methods",
          "The replace Method",
          "String Cleanup Methods (3.8)",
          "Coding Exercise SOLUTION: String Cleanup Methods",
          "The format Method",
          "Formatted String Literals (f-strings)",
          "Strings: Methods Section Review"
        ],
        "Control Flow": [
          "REVIEW: The Boolean Data Type, Equality and Inequality",
          "The if Statement",
          "The bool Function (Truthiness and Falsiness)",
          "if Statements (3.8)",
          "Coding Exercise SOLUTION: if Statements",
          "The else Statement",
          "The elif Statement",
          "if, else and elif (3.8)",
          "Coding Exercise SOLUTION: if, else and elif",
          "Conditional Expressions (Ternary Operator Equivalent)",
          "Declaring Multiple Conditions with the and Keyword",
          "Declaring Multiple Conditions with the or Keyword",
          "Using the not Keyword to Negate an Expression",
          "Nested if Statements",
          "More Boolean Evaluations",
          "Multiple Conditions (3.8)",
          "Coding Exercise SOLUTION: Multiple Conditions",
          "Using the while Loop to Iterate While a Condition is True",
          "FizzBuzz",
          "A Brief Intro to Recursion I",
          "A Brief Intro to Recursion II",
          "Recursion (3.8)",
          "Coding Exercise SOLUTION: Recursion",
          "Control Flow Section Review"
        ],
        "Lists: The Basics": [
          "Intro to Lists",
          "Creating Lists (3.8)",
          "Coding Exercise SOLUTION: Creating Lists",
          "The in and not in Operators on a List",
          "List Basics",
          "Select a List Element by Positive or Negative Index Positions",
          "Indexing into List (3.8)",
          "Coding Exercise SOLUTION: Indexing into List",
          "Slice Multiple Elements from a List",
          "Slicing Elements (3.8)",
          "Coding Exercise SOLUTION: Slicing Elements",
          "List Slicing",
          "List Problems (3.8)",
          "Coding Exercise SOLUTION: List Problems",
          "Lists: The Basics Section Review"
        ],
        "Lists: Iteration": [
          "Iteration with the For Loop",
          "List Iteration (3.8)",
          "Coding Exercise SOLUTION: List Iteration",
          "Iteration with Conditional Logic",
          "More List Iteration (3.8)",
          "Coding Exercise SOLUTION: More List Iteration",
          "Iterate in Reverse with the reversed Function",
          "The enumerate Function",
          "The enumerate Function (3.8)",
          "Coding Exercise SOLUTION: The enumerate Function",
          "The range Function",
          "The break Keyword",
          "The continue Keyword",
          "enumerate, range, break and continue",
          "Command Line Arguments with argv",
          "Lists: Iteration Section Review"
        ]
      },
      "requirements": [
        "A Windows, MacOS, or Linux computer",
        "An Internet connection",
        "A modern text editor (Visual Studio Code is installed and used in the course)",
        "Persistence and dedication!"
      ],
      "description": "Student Testimonials:\nThe course is extremely well organized with tons of great explanations and exercises for each and every topic imaginable! The instructor is a very good teacher, and gives great feedback, while rapidly answering any questions you may have. Highly recommend the course to anyone interested in Python or programming in general. - Sathvik H.\n\nThe most comprehensive and personalized learning experience in a programming course. Highly recommend to anyone interested, regardless of experience! - Danny N.\n\nThe instructor is great. Everything is really well explained. Appropriate for complete beginners as a intro to programming if that is needed. Also good if you are coming from other languages. The instructor also speaks super clearly. - Jon\nLearn to Code with Python is a comprehensive introduction to programming in Python, the most popular programming language in the world. Python powers codebases in companies like Google, Facebook, Pinterest, Dropbox, and more. It is used in a variety of disciplines including data science, machine learning, web development, natural language processing, and more.\nOver more than 58 hours of video content, we'll tackle the language from A to Z, covering everything you need to know about Python to be an effective developer in 2020.\nThe course is jam-packed with:\n58+ hours of video, with new content added frequently\nFREE 300-page PDF study manual with all the code samples written throughout the course\n60+ coding challenges that you can complete in your browser\n40+ multiple-choice quizzes\n35+ written assignments\nComplete programming projects including Texas Hold-Em Poker\nLearn to Code with Python is designed from the ground up to take you from novice to professional. Complete beginners are welcome; no prior experience is needed!  Over 400+ videos, we'll work our way from language fundamentals to advanced features. Topics covered include...\nSetup & Installation\nVariables\nData types\nFunctions and Methods\nControl Flow\nLists and tuples\nDictionaries\nSets\nModules\nDecorators\nClasses\nException Handling\nThe Python Standard Library\nUnit testing\nRegular Expressions\nVirtual Environments\nWeb Scraping\n...and more!\nThroughout the entire journey, I'll be coding alongside you step by step in the code editor. You'll also have the opportunity to test your knowledge through numerous coding challenges, quizzes, and written assignments.\nPython holds a special place in my heart -- it was the first language I ever learned! I'm honored to be able to pass on years of knowledge to a new group of avid learners. Whether you are a novice who's never written a line of code before or an experienced developer looking to dive into a new language, there’s something for you to enjoy in Learn to Code with Python.\nThanks for checking out the course!",
      "target_audience": [
        "New developers eager to tackle a powerful but simple programming language",
        "Existing programmers looking to learn Python, the world's most popular programming language",
        "Anyone eager to learn the most in-demand skill set of the 21st century!"
      ]
    },
    {
      "title": "Learn Python in 250 Minutes",
      "url": "https://www.udemy.com/course/python-3-in-100-minutes/",
      "bio": "Master Python Programming Fundamentals and Build 3 Practical Projects From Scratch",
      "objectives": [
        "Variables and data types & Comparison operators",
        "For and while loops & Functions",
        "Logical Operators & Conditional statements (If-else)",
        "Fundamentals of Python Programming"
      ],
      "course_content": {},
      "requirements": [
        "Access to a computer with an internet connection",
        "Computer: Mac OS, Windows or Linux",
        "No previous experience with Python or coding is required"
      ],
      "description": "# This course is for the absolute beginners who want to learn the fundamentals of python programming language.\n# This course will teach you the basics of programming in a practical, easy and fun way!\n# Here are 5 reasons to learn Python right now!\n(1) Easy to learn: Python is the easiest programming language to learn. In fact, at the end of this single course, you’ll be able to master Python and its applications regardless of your previous experience with programming.\n(2) High Salary: Did you know that the average Python programmer in the U.S. makes approximately $116 thousand dollars a year? With “Python 3 Beginning to Pro Masterclass” you’re setting yourself for up for increased earning potential that can only rise from here.\n(3) Scalability: It’s true, Python is easy to learn. But it’s also an extremely powerful language that can help you create top-tier apps. In fact, Google, Instagram, YouTube, and Spotify are all built using Python.\n(4) Versatility: What’s more, Python is by far the most versatile programming language in the world today! From web development to data science, machine learning, computer vision, data analysis and visualization, scripting, gaming, and more, Python has the potential to deliver growth to any industry.\n(5) Future-proof Career:  The high demand and low supply of Python developers make it the ideal programming language to learn today. Whether you’re eyeing a career in machine learning or artificial intelligence, learning Python is an invaluable investment in your career.",
      "target_audience": [
        "Anyone who wants to learn Python",
        "Beginners who have just started to learn Python"
      ]
    },
    {
      "title": "Working with Concurrency in Go (Golang)",
      "url": "https://www.udemy.com/course/working-with-concurrency-in-go-golang/",
      "bio": "Learn the advantages and pitfalls of concurrent programming with the Go programming language",
      "objectives": [
        "Learn about the various ways Go makes working with concurrent programing simple",
        "Understand how concurrency works, and its advantages and pitfalls",
        "Learn how WaitGroups, Mutexes, and channels work",
        "Master concurrency by working with classic computer science problems, and by building a real-world example"
      ],
      "course_content": {},
      "requirements": [
        "A good understanding of the Go programming language",
        "A Windows, Macintosh, or Linux computer with a connection to the Internet"
      ],
      "description": "Go, often referred to as Golang, is well-known for making it remarkably easy to work with concurrency. In order to make a particular function run concurrently, all we have to do is prepend the word \"go\" to the function call, and it cheerfully runs in the background, as a GoRoutine. Go's built in scheduler takes are of making sure that a given GoRoutine runs when it should, and as efficiently as it can.\nHowever, this does not mean that working with concurrency is simple in Go—thread safe programming takes careful planning, and most importantly it requires that developers have an absolutely solid understanding of how Go deals with concurrency.\nIn the standard library, Go offers us several ways of dealing with concurrently running parts of our program, right in the standard library: sync.WaitGroup, which lets us wait for tasks to finish; sync.Mutex, which allows us to lock and unlock resources, so that no two GoRoutines can access the same memory location at the same time; and finally, Channels, which allow GoRoutines to send and receive data to and from each other.\nGo's approach to concurrency is fairly straightforward, and is more or less summed up this mantra: Don't communicate by sharing memory; instead, share memory by communicating. Channels are the means by which we usually share memory by communicating.\nIn this course, we'll cover the use of WaitGroups, Mutexes, and Channels, and we'll do so in detail. We'll also cover some of the problems inherent in concurrency, including early program termination and race conditions. Initially, we'll gain a good understanding of how these things work by solving some of the classic problems found in the field of computer science, including the Dining Philosophers, the Producer/Consumer problem, and the Sleeping Barber. These problems are classics for a reason: they force a developer to figure out the best approach to working with code that run concurrently, or in parallel.\nFinally, we'll finish the course out with a more \"real-world\" problem, where we have to register a customer for some kind of subscription service, and take care of invoicing, registration, and all the things necessary to get a new customer up and running. We'll do so, naturally, as quickly as we can by dividing the necessary tasks up into smaller tasks, and having them run concurrently.\nPlease note that this course requires you to download Docker Desktop from Docker. If you are a Udemy Business user, please check with your employer before downloading software.",
      "target_audience": [
        "Go programmers who want to understand how Go works with concurrent programming"
      ]
    },
    {
      "title": "Automate the Boring Stuff with Python Programming",
      "url": "https://www.udemy.com/course/automate/",
      "bio": "A practical programming course for office workers, academics, and administrators who want to improve their productivity.",
      "objectives": [
        "Automate tasks on their computer by writing simple Python programs.",
        "Write programs that can do text pattern recognition with \"regular expressions\".",
        "Programmatically generate and update Excel spreadsheets.",
        "Parse PDFs and Word documents.",
        "Crawl web sites and pull information from online sources.",
        "Write programs that send out email notifications.",
        "Use Python's debugging tools to quickly figure out bugs in your code.",
        "Programmatically control the mouse and keyboard to click and type for you."
      ],
      "course_content": {
        "Python Basics": [
          "Get Python Installed",
          "Just a check in.",
          "Basic Terminology and Using IDLE",
          "Writing Our First Program",
          "Lecture 2 Quiz"
        ],
        "Flow Control": [
          "Flow Charts and Basic Flow Control Concepts",
          "If, Else, and Elif Statements",
          "While Loops",
          "For Loops"
        ],
        "Functions": [
          "Python's Built-In Functions",
          "Writing Your Own Functions",
          "Global and Local Scopes"
        ],
        "Handling Errors with try/except": [
          "Try and Except Statements"
        ],
        "Writing a Complete Program: Guess the Number": [
          "Writing a \"Guess the Number\" Program"
        ],
        "Lists": [
          "The List Data Type",
          "For Loops with Lists, Multiple Assignment, and Augmented Operators",
          "List Methods",
          "Similarities Between Lists and Strings"
        ],
        "Dictionaries": [
          "The Dictionary Data Type",
          "Data Structures"
        ],
        "More About Strings": [
          "Advanced String Syntax",
          "String Methods",
          "String Formatting"
        ],
        "Running Programs from the Command Line": [
          "Launching Python Programs from Outside IDLE"
        ],
        "Regular Expressions": [
          "Regular Expression Basics",
          "Regex Groups and the Pipe Character",
          "Repetition in Regex Patterns and Greedy/Nongreedy Matching",
          "Regex Character Classes and the findall() Method",
          "Regex Dot-Star and the Caret/Dollar Characters",
          "Regex sub() Method and Verbose Mode",
          "Regex Example Program: A Phone and Email Scraper"
        ]
      },
      "requirements": [
        "No programming experience is required.",
        "Downloading and installing Python is covered at the start of the course.",
        "Basic computer skills: surfing websites, running programs, saving and opening documents, etc."
      ],
      "description": "If you're an office worker, student, administrator, or just want to become more productive with your computer, programming will allow you write code that can automate tedious tasks. This course follows the popular (and free!) book, Automate the Boring Stuff with Python.\nAutomate the Boring Stuff with Python was written for people who want to get up to speed writing small programs that do practical tasks as soon as possible. You don't need to know sorting algorithms or object-oriented programming, so this course skips all the computer science and concentrates on writing code that gets stuff done.\nThis course is for complete beginners and covers the popular Python programming language. You'll learn basic concepts as well as:\nWeb scraping\nParsing PDFs and Excel spreadsheets\nAutomating the keyboard and mouse\nSending emails and texts\nAnd several other practical topics\nBy the end of this course, you'll be able to write code that not only dramatically increases your productivity, but also be able to list this fun and creative skill on your resume.",
      "target_audience": [
        "Office workers, students, small/home business workers, and administrators would want to improve their productivity.",
        "Aspiring software engineers who want to add skills to their programming toolbelt.",
        "Computer users who have heard the \"learn to code\" message, but want practical reasons to learn programming.",
        "Experienced Python software engineers can skip the first half of the course, but may find the later parts that cover various third-party modules helpful.",
        "While this course doesn't cover specific devops tools, this course would be useful for QA, devops, and admins who want to learn scripting in Python."
      ]
    },
    {
      "title": "Functional & Reactive programming in Java : Modern Style",
      "url": "https://www.udemy.com/course/functional-programming-and-reactive-programming-in-java/",
      "bio": "Java Programming MasterClass, Design Patterns,Data Structures,Lambda,Streams,Collectors,Collections,Optionals & RxJava",
      "objectives": [
        "Functional Programming in Java",
        "Reactive Programming In Java",
        "Streams and Parallel Streams how they work under the Hood",
        "Collectors and How Collectors Works under the Hood",
        "RxJava 3.0",
        "Functional Data Structures",
        "Collections in Functional Way",
        "Java 8 and 8+",
        "Advanced Concepts of Java Like Optional and Much More"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction"
        ],
        "Why Functional Programming and Why to Bother": [
          "Why to Learn Functional Programming",
          "Course Resources"
        ],
        "Lambda and Functional Interface": [
          "Introduction",
          "First Cute Lambda",
          "Functional Interfaces",
          "How Lambda Works Under the Hood",
          "Imperative V/s Declarative",
          "Summary"
        ],
        "Practice Lambda with different signatures": [
          "Introduction",
          "Practice Lambda - 1",
          "Practice Lambda - 2",
          "Practice Lambda - 3",
          "Practice Lambda - 4",
          "Summary"
        ],
        "Predefined Functional Interfaces and Practice": [
          "Introduction",
          "Predefined Functional Interfaces",
          "Generic Functional Interfaces",
          "Predicate",
          "Consumer",
          "Supplier",
          "Function",
          "UnaryOperator",
          "BiFunction",
          "BinaryOperator",
          "Summary"
        ],
        "Method and Constructor Reference": [
          "Introduction",
          "Method Reference",
          "Constructor Reference",
          "Summary"
        ],
        "Optional for Null Pointer": [
          "Introduction",
          "Dangers of Null",
          "Introducing Optional",
          "Getting the values Back",
          "Operators Part - 1",
          "Operators Part - 2",
          "Summary"
        ],
        "Functional Programming in Depth": [
          "Introduction",
          "What is Functional Programming",
          "Functional Programming Concepts",
          "Functions as First class Citizens",
          "No Side Effects - Pure Functions",
          "Higher Order Functions",
          "Referencial Transparency",
          "Functional Programming Techniques",
          "Designing APIs In Functional Way",
          "Chaining",
          "Composition",
          "Closures",
          "Currying",
          "Lazy Evaluation",
          "Tail Call Optimisation aka TCO",
          "Summary"
        ],
        "Design Patterns in Functional Way": [
          "Introduction",
          "Iterator Design Pattern",
          "Strategy Design Pattern",
          "Decorator Design Pattern",
          "Creating Fluent Interfaces",
          "Factory Method Pattern",
          "Builder Design Pattern",
          "Command Design Pattern",
          "Summary"
        ],
        "Streams and Parallel Streams in depth": [
          "Introduction",
          "Streams Introduction",
          "Observing the Stream",
          "Stream Pipeline",
          "Streams are not data Containers",
          "Filter Operations",
          "Map Operations",
          "Reduce Operations",
          "Streams are Lazy",
          "Numeric Streams",
          "Numeric Streams - Methods",
          "Bounded Streams",
          "Infinite Streams",
          "Stream.of and FlatMap",
          "Parallel Streams",
          "Stateless and stateful operations",
          "Setting Parallelism",
          "Summary and BrainMapping"
        ]
      },
      "requirements": [
        "Fundamental Java",
        "Passion to Learn"
      ],
      "description": "================\nSome of our feedback received to help you make the decision.\n\n★★★★★\nNo Words!! Explaination is very simple with nice examples . I recomment his course for every one who wants to learn Functional programming. I used to feel that functional programming is difficult. Functional programming is made very simple. I am very happy with this instructor. Especially, voice of instructor is very sweet\n★★★★★\nIs the most simple and clear explanation of lambda.\n★★★★★\nExcelente curso, todo muy bien explicado y con ejercicios. Gracias\n★★★★★\nStrict and concise with short brief examples\n================\n\n\nCourse Details what we cover :\nBest in Class Master Course to learn Advanced Java Concepts -\nFunctional Programming\nReactive Programming\nOptional wrapper to null\nFunctional Data Structures\nFunctional Design Patterns\nStreams and Parallel Streams\nStream and Parallel Streams Deep Dive\nCollectors\nCollectors how they work internally\nFunctional Data Structures\nCollections in Functional Way\nReactive Java\nRxJava 3.x\nThis is a Very detailed Course on the subject of Functional Programming & Reactive with a lot of programming practice. We have covered all the prospective like Data Structures, Design Patterns, Collections in Functional Programming.\nThis is a must-have course for Developers or professionals who wants to understand the Concepts in Deep.\n\n\nHope you will find the content useful, we have designed the course in a way so that you can immediately use the learning in your next project.\n\n\nAll The Best and Happy Learning!\nBasics>Strong;",
      "target_audience": [
        "Who want to learn Java 8 concepts like Functional Interfaces, Lambdas, Streams",
        "Who Want to learn Functional Programming in Deep",
        "Who Want to learn advanced Java Concepts",
        "Who Want to learn Reactive programming"
      ]
    },
    {
      "title": "JavaScript 2019: JavaScript ES6 Certification Course",
      "url": "https://www.udemy.com/course/javascript-es6-certification-course/",
      "bio": "Earn the JavaScript Specialist Certification while Learning JavaScript ES6",
      "objectives": [
        "JavaScript syntax, style and usage with a focus on developing apps",
        "Be Current with ES6 Syntax and Usage",
        "Fundamental to Advanced JavaScript Concepts including Promises, Classes, and Arrow Functions",
        "Integration of JavaScript with HTML5 Code for Web Applications"
      ],
      "course_content": {
        "Your First Lines of Code": [
          "Video"
        ],
        "JavaScript Variables": [
          "Video"
        ],
        "JavaScript Operators": [
          "Video"
        ],
        "If This Then That": [
          "Video"
        ],
        "Iterating with Loops. Iterating with Loops.": [
          "Video"
        ],
        "Arrays": [
          "Video"
        ],
        "Functions": [
          "Video"
        ],
        "ES6: Let, var and const": [
          "Video"
        ],
        "ES6 Functions": [
          "Video"
        ],
        "ES6 Maps": [
          "Video"
        ]
      },
      "requirements": [
        "Successful Students in this course know fundamental HTML",
        "Mac, PC or Linux"
      ],
      "description": "My Guarantee:  If this is not the best course you've taken on Udemy, please take advantage of Udemy's refund policy and get your money back!\nYes, I am THAT confident that you will be beyond satisfied with this JavaScript Course and Certification program.\nMy name is Mark Lassoff, and I am the author and instructor for this course.  If you've heard my name before it's because 1.5 million people have learned to code from me online on Udemy and other venues.  That's a lot of folks!\nDon't be fooled by those 20+ hour courses that also claim to teach JavaScript.  This course and certification program will teach you everything you need to know, and won't waste your time with superfluous information designed to make the course seem more valuable.   Javascript 2019: JavaScript ES6 Certification Course is for folks who don't have time to waste and want the recognition that being a certified professional carries.\nIf you're looking for something that is beyond just a course, that sets you up for success and guarantees your learning you should read on.\nCertification:  The Recognition You Deserve\nEnrolling in this course will make you a candidate for the Framework JavaScript Specialist Certification.  This Certification is earned by completing all the lessons in the course and turning in each lab exercise and final project as directed the course content.  There is NO exam required to earn your certification.   (We think the actual code you write is a much better indicator of your knowledge than artificial exam!)\nAs an JavaScript Specialist, you are uniquely qualified to help companies, brands and development firms to create high-quality JavaScript code. Your knowledge will be critical to teams that develop apps with JavaScript as you help them create high quality, highly maintainable code.\nThis certification is not just a piece of paper to hang on your wall. The JavaScript Specialist Designation is validated by Credential (dot net). That means your certification will appear on an independent Credential page accessible by private URL. You'll also be able to list the certification on your LinkedIn account so everyone can see your accomplishment. (Employers have been known to scan for certified individuals on LinkedIn.)\n\n\nHelp When You Need It\nYou're not trying to complete your certification alone. We have an active, helpful community of members and expert instructors standing by to help you and answer questions. The community is also where you'll get to know the other members, share experiences and your success as you complete certification.\n\n\nThe Framework Success System\nYour success is our success.\nThat's why we've invested heavily in the Framework Success System. We're not just making shows about tech-- but we're helping you learn valuable skills that will start your career in digital technology.\nHere's what you need to know about our system:\nI. You'll Learn More Quickly From Our Videos with the Framework Video Countdown\nEach new video we produce will display the subjects covered in the video along the right-hand side of the screen. This will help you navigate through the video and rapidly find any portions of the video you need to rewatch for reference or review.\nII. You'll get a second exposure to all the information presented in a video from the Framework Course Guide\nEveryone learns a little differently. Years of academic research has told us that.\nOur unique course guides review all of the critical points made in the video lectures, giving you a second exposure to the information. This second exposure will help you retain the material and be able to apply it to your own digital development work.\nThe Framework Course Guide is like getting a free JavaScript book with your course.\nIII. You Gain Experience with Confidence-Building Activities\nWith every video, Framework Television includes a series of activities that will help you retain the information in the video and the course guide. Digital development is a learn-by-doing activity and the more you practice, the more successful you'll be.\nWe want to help you achieve your goals, and the Framework Success System supports your success.\n\n\nTo Sum It Up\nWith our \"best course you've taken\" guarantee, online help community, no-exam-required certification, and proven success system, enrolling in this program is a no-brainer.  Click the enroll button and get on the road to success with JavaScript!",
      "target_audience": [
        "Anyone who wants to learn web development",
        "Those interested in a career in coding",
        "People who want to earn certification and be recognized for their achievement",
        "People who want to create applications professionally or just for fun!"
      ]
    },
    {
      "title": "Oracle Certification: Mastering Java for Beginners & Experts",
      "url": "https://www.udemy.com/course/java-series/",
      "bio": "Java is one of the most popular programming languages. Companies like Facebook, Microsoft and Apple all want Java",
      "objectives": [
        "Java programming",
        "Application programming",
        "Semantics of general programming",
        "The format of coding applications",
        "All the functions of Java programming",
        "Application programming"
      ],
      "course_content": {},
      "requirements": [
        "Passion for learning Java",
        "Basic computer knowledge and skills",
        "Passion for programming",
        "Basic knowledge of computer science is optional"
      ],
      "description": "Learn about everything there is to know about Java Applications and How To Program Them. A step by step process is used to show explain every facet of these topics.\nGain a good understanding of the following concepts with this course:\nWhat Java is?\nOracle Java Certification\nHow to program in the Java language\nFeatures of the Java programming language\nCoding semantics\nWebsite programming\nDesign practises of applications\nApplication programming\nObject Oriented programming\nNetwork programming\nEmail programming\nApplet programming\nMultithreading programming\nJava is fast becoming a worldwide Tour De Force that is requested by all companies such as Google, Facebook and Microsoft. This course will ensure you are not left as more and more companies request this awesome language. This course will teach your everything about programming Java applications and websites.\nYou will receive all the knowledge to use and leverage the powerful technology behind these amazing and wonderful platforms.\nOver 205,000 students have enrolled on my courses and all of them are extremely satisfied. You will also be satisfied with this course. If you do not like the course, remember that within 30 days you can request a full refund. I guarantee you satisfaction.\nIf you have any questions regarding the topics covered in this course, please feel free to ask. I'm always happy to help those who want to learn.\n\n\nTo summarise this is what you get:\n• Lifetime access to HD quality videos. No monthly subscription. Learn at your own pace, whenever you want.\n• All videos are downloadable. Learn wherever you want, even without an internet connection!\n• Downloadable starter code and final code for each section.\n• Free helpful support in the course Q&A when you have questions or get stuck.\n• Multiple coding challenges to practice your new skills (solutions included).\nSounds great? Then start this adventure today by clicking the “Take this course\" button, and join me in the only course that you will need!",
      "target_audience": [
        "Anyone looking to learn about Java",
        "Developers looking to learn the skills needed to acquire the Oracle Java Certification",
        "People looking to learn about programming",
        "Those seeking to understand how Java works",
        "People seeking guidance on how to create Java based programs",
        "Beginners and experts in this field",
        "People seeking more knowledge on the various features of the Java programming language"
      ]
    },
    {
      "title": "Angular Essentials (Angular 2+ with TypeScript)",
      "url": "https://www.udemy.com/course/angular-essentials-angular-2-angular-4-with-typescript/",
      "bio": "The most efficient way to dive into Angular 2+ if you got limited time or need to refresh the basics!",
      "objectives": [
        "Build highly reactive and user-friendly web applications running in the browser (driven by JavaScript)",
        "Dive deeper into Angular with very solid fundamentals taught by this course"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "What is Angular?",
          "Join our Online Learning Community",
          "How does Angular Work?",
          "MUST READ: Angular CLI - Latest Version",
          "Creating Your First App",
          "Editing the First App",
          "Understanding the Project Structure",
          "How does an Angular App Start?",
          "What you'll learn in this Course",
          "Optional: TypeScript Essentials",
          "How to get the Course Source Code & Ask Questions",
          "Useful Resources & Links"
        ],
        "Understanding Components": [
          "Module Introduction",
          "Configuring the Editor",
          "Templates and the DOM",
          "How Angular Reads Your Components",
          "Adding Custom Components",
          "Outputting Content via String Interpolation",
          "Listening to (User) Events",
          "Binding to Properties",
          "All at the same Time: Two-Way-Binding",
          "Time to Practice - Component Basics",
          "[OPTIONAL] Assignment Solution",
          "Binding Component Properties",
          "Listening to your Custom Events",
          "Multiple Components & Using the CLI for Component Generation",
          "Time to Practice - Beyond Component Basics",
          "[OPTIONAL] Assignment Solution",
          "Understanding Scoped Component Styles",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Debugging & Using 3rd Party Libraries": [
          "Module Introduction",
          "How to Handle Angular Errors (and Error Messages)",
          "Debugging Code with Developer Tools & Sourcemaps",
          "Deeper Insights with Augury",
          "Using CSS Frameworks with Angular (and the Angular CLI)",
          "Using JS Libraries with Angular (and the Angular CLI)",
          "Wrap Up",
          "Useful Links & Resources"
        ],
        "Extra Features with Directives": [
          "Module Introduction",
          "What are Directives?",
          "Outputting Lists with ngFor",
          "Controlling CSS Classes with ngClass",
          "More on Directives",
          "Conditionally Outputting Content via ngIf",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Angular in Practice: Starting the Course Project": [
          "Module Introduction",
          "Planning the App",
          "Getting Started",
          "Filling Components with Life",
          "Managing Data in our Application",
          "Passing Data via Property Binding",
          "Using ngClass to Provide the User Feedback",
          "Passing Data via Event Binding",
          "Wrap Up"
        ],
        "Amazing Data Management with Services": [
          "Module Introduction",
          "What are Services?",
          "Creating a Service",
          "How NOT to Use Services",
          "Injecting Services",
          "Understanding Dependency Injection",
          "Cleaning up the Project",
          "Injecting Services into Services",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Handling User Input with Forms": [
          "Module Introduction",
          "Creating a Form in the Template",
          "Handling Forms with Angular",
          "How to use Submitted Values",
          "Validating User Input (with Angular)",
          "More Validation Methods",
          "Using the Form State to Give Visual Feedback",
          "The Different Faces of ngModel",
          "An Alternative to the Approach Shown in This Module",
          "Using the Reactive Approach",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Changing Pages with Routing": [
          "Module Introduction",
          "Server-side vs Client-side Routing",
          "Adding a Header Component",
          "Adding Routing to the Application",
          "Navigating with Router Links",
          "Handling Unknown Routes with Wildcards and Redirects",
          "Using Child Routes and Route Parameters",
          "Extracting Route Paramters",
          "Fixing Page Reload Issues",
          "Cleanup & Missing Reactivity",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Reactivity, RxJS and Observables": [
          "Module Introduction",
          "Angular 6 & RxJS 6",
          "Understanding subscribe()",
          "Using Subjects as Event Emitters",
          "Managing Subscriptions",
          "More on RxJS and Observables",
          "Dive Deeper into RxJS",
          "Wrap Up"
        ],
        "Connecting to APIs via Http": [
          "Module Introduction",
          "Installing the Angular Http Service",
          "Injecting the Angular Http Service",
          "Sending a GET Request",
          "Sending a POST Request",
          "Transforming Responses",
          "Updating the UI",
          "Further Options",
          "Fixing a \"Bug\" we Introduced into Our Project",
          "Wrap Up",
          "Useful Resources & Links"
        ]
      },
      "requirements": [
        "You should bring solid JavaScript knowledge",
        "NO Angular knowledge is required at all"
      ],
      "description": "Angular is an amazing JavaScript (TypeScript) framework which allows you to build small, medium or large Single-Page-Applications (SPAs). Since the code runs entirely in the browser, you can build user experiences which are way faster than traditional websites could ever be!\nThe skills required to build such SPAs are in high demand since this kind of web app is very popular and allows you to build almost mobile-like, highly reactive user experiences. Indeed most modern web applications are built as SPAs today!\nAs the creator of the 5-star rated, BESTSELLING Angular course here on Udemy, I know what I'm talking about and I know what the core features of Angular are which you need to learn.\nIt's my goal to allow you to focus on these core features to get the quickest and best introduction into Angular, you can find!\nLearning Angular never is a wrong choice and with this course, it's more correct than it ever was before! This course gives you the fastest and most efficient way of diving into Angular. If you don't want or can't take my Complete Guide on Angular or you want to get a feeling for Angular before doing so, this course is for you! It's also your #1 choice if you already know Angular but want to have resource for refreshing your basic Angular knowledge as fast as possible.\nWhilst this course is much shorter, it gives you all the core insights into Angular you need. It focuses on the heart of Angular, the most important features Angular offers you and even shows you how to build a complete Angular app!\nTelling by the length of the course, you might not believe it, but you'll actually learn about all these topics:\nWhat Angular is\nWhat TypeScript is - including a super-efficient introduction to it\nHow to use the CLI to create Angular projects and manage them\nHow Angular apps start and work\nWhich role components play and how to use them\nHow to bind and pass data\nHow to debug your app\nHow to use other, 3rd party JS libraries in an Angular app\nHow to use directives\nHow you may manage application state with services\nHow to turn your SPA into an \"illusionary\" MPA with routing\nHow to handle user input with forms\nHow to send Http requests\nHow to build your project, optimize it and deploy it\nMuch more!",
      "target_audience": [
        "Anyone who wants to learn how to create reactive web applications providing awesome user experiences",
        "Everyone interested in building single-page-applications (SPAs) with one of the most powerful frameworks you can use as of today"
      ]
    },
    {
      "title": "Learn C++ by Creating",
      "url": "https://www.udemy.com/course/learn-to-program-cpp/",
      "bio": "Learn Programming Basics in C++ with a project based approach",
      "objectives": [
        "Create a portfolio of C++ projects using... C++",
        "Get your computer ready to program in C++ using Visual Studio. (Level 0: Getting Started)",
        "Create an application that handles standard output. (Level 1: Hello World!)",
        "Create an application that handles input. (Level 2: Nice to Meet You)",
        "Create an application that manipulates strings. (Level 3: Name the Great)",
        "Create an application that has a conversation. (Level 4: Chatbot)",
        "Create an application that does Arithmetic. (Level 5: Integer Calculator)'",
        "Create an application that does math with decimals. (Level 6: Decimal Calculator)",
        "Create an application that uses if statements (Level 7: Correct Answer)",
        "Create an application that uses if and else statements (Level 8: Incorrect Answer)",
        "Create an application that uses if, else if, and else statements (Level 9: Old Enough to Vote)",
        "Discuss some of the fundamentals of computer programming"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Level 0: Getting Started",
          "It won't work!",
          "Self Check for Level 0"
        ],
        "Hello World": [
          "Level 1A: Hello World",
          "Level 1B: Hello World Walkthrough",
          "Self Check for Level 1"
        ],
        "Nice to Meet You": [
          "Level 2: Nice to Meet You",
          "Self Check for Level 2"
        ],
        "Name the Great": [
          "Level 3: Name the Great",
          "Self Check for Level 3"
        ],
        "Chatbot": [
          "Level 4: Chatbot",
          "Self Check for Level 4"
        ],
        "Integer Calculator": [
          "Level 5: Integer Calculator",
          "Self Check for Level 5"
        ],
        "Decimal Calculator": [
          "Level 6: Decimal Calculator",
          "Self Check for Level 6"
        ],
        "Correct Answer": [
          "Level 7: Correct Answer",
          "Self Check for Level 7"
        ],
        "Incorrect Answer": [
          "Level 8: Incorrect Answer",
          "Self Check for Level 8"
        ],
        "Old Enough to Vote": [
          "Level 9: Old Enough to Vote",
          "Self Check for Level 9"
        ]
      },
      "requirements": [
        "Students will need to be familiar with computers, but no special software or skills are required to get started."
      ],
      "description": "Learning C++ programming can be very intimidating, but we will be working on building our skills one level at a time. All of the lectures are hands on video lessons to get you creating your own programs.\nThis is a great course for beginners or a nice refresher for anyone who has not used C++ in a while.\nIn this course you will learn how to...\nGet your computer ready to program in C++ using Visual Studio. (Level 0: Getting Started)\nCreate an application that handles standard output. (Level 1: Hello World!)\nCreate an application that handles input. (Level 2: Nice to Meet You)\nCreate an application that manipulates strings. (Level 3: Name the Great)\nCreate an application that has a conversation. (Level 4: Chatbot)\nCreate an application that does Arithmetic. (Level 5: Integer Calculator)'\nAND MANY MORE!",
      "target_audience": [
        "People who have never used C/C++ programming before.",
        "People who desire to solidify and remember some basics of C++ that they may have forgotten.",
        "People who prefer to learn by doing instead of simply watching videos"
      ]
    },
    {
      "title": "Complete Python 3 Masterclass Journey",
      "url": "https://www.udemy.com/course/complete-python-3-masterclass-journey/",
      "bio": "Master Python 3! Use story based learning to go from a beginner to being able to create real programs with Python!",
      "objectives": [
        "Create your own Python scripts to automate tasks.",
        "Read CSV Files with Python.",
        "Be able to work with PDF files in Python.",
        "Manipulate images with Python.",
        "Learn how to create functions with Python.",
        "Use Object Oriented Programming with Python.",
        "Send and receive emails automatically with Python.",
        "Decryption , Encryption, and Hashing with Python.",
        "Plot geographical points on Google Maps with Python.",
        "Read files and apply regular expressions with Python.",
        "Scrape websites for information using Python."
      ],
      "course_content": {},
      "requirements": [
        "A computer with internet access.",
        "Permission to download files and Python on to your computer"
      ],
      "description": "Welcome to the Complete Python Masterclass Journey!\nThis course is designed to take you from a complete beginner in programming all the way to becoming an effective programmer that can use Python to solve real tasks! I'm Jose Portilla and I am the most popular Python instructor on the Udemy platform. I've taught Python programming at Fortune 500 companies and I'm very excited to bring the same quality of material to Udemy! Python is used by some of the world's largest companies to accomplish all kinds of tasks.\nThis course is also completely different than any other course on Udemy, it incorporates a narrative story that helps engage students and also provides context to the different tasks you have to accomplish. We utilize project based learning to effectively teach Python and give you the skills to put Python on your resume. We have numerous projects and tasks for you to practice what you are learning.\nIn addition to this we have Question and Answer forums where Teaching Assistants and myself are present to help answer any questions you may have, we also have a chat channel where you can talk to other students to team up on your own projects!\nWe will cover a lot of topics in this course! Including:\nBasic Python Data Types such as numbers, variables, lists, dictionaries, tuples, sets, and more.\nKey Control Flow - This is the logic that helps run your code, such as if, elif, and else statements.\nLoops - We'll show you how to become an expert user of for loops and while loops so you can effectively program.\nFunctions - You will learn how to create clean, reusable functions that help automate tasks that you repeat.\nObject Oriented Programming (OOP) - We will explain OOP in a clear and steady way, helping you master one of Python's most powerful features.\nWeb Scraping - Learn to use the BeautifulSoup and Requests libraries to perform web scraping.\nCSV Files - You'll be able to use Python's built in csv library to work with csv data with Python.\nPDF Files - Learn about the PyPDF2 library that allows you to read PDF files pro grammatically.\nZip Files - See how Python can zip files and extract information from already compressed zip files.\nOS Module - Discover how to  perform operating system level commands with Python's os module.\nImages - You will learn how to edit and resize images with Python.\nDecryption and Encryption - See how to use the cryptography library with Python to encode and decode encrypted messages.\nGeographical Mapping - We'll show you how to use Python in conjunction with the Google Map's API to plot information on a map!\nand so much more!\nAll of this content also comes with a 30-day money back guarantee, so you can try out the course risk free for a full 30 days.\nI'll see you inside the course!\nJose Portilla",
      "target_audience": [
        "Anyone interested in learning how to program with Python!"
      ]
    },
    {
      "title": "Absolute Introduction to Object Oriented Programming in Java",
      "url": "https://www.udemy.com/course/absolute-introduction-to-object-oriented-programming-in-java/",
      "bio": "Prerequisite to \"Master Object Oriented Design in Java\".",
      "objectives": [
        "You will understand the basics of Object Oriented Programming",
        "Understand class inheritance and what it means for objects"
      ],
      "course_content": {},
      "requirements": [
        "Have eclipse and the JDK installed on their computer"
      ],
      "description": "Welcome to Absolute Introduction to Object Oriented Programming in Java.\nThis course is designed to be slow-paced, simple and rich in demystifying the question: What really is an object in computer programming?\nThese course lectures serve as a crucial foundation for mastering the concept of OOP (Object Oriented Programming).\nIf you have ever written a Java class before and ran the program in Eclipse but did not quite understand what is going on behind the scenes, then this course is for you. By the end of these videos, you will understand the difference between a class, and an object.\nYou'll know how objects are constructed and what exactly happens when the program is run. We will also go over important OOP (Object Oriented Programming) techniques such as inheritance and polymorphism.\nWhat Makes This Course Stand Out?\nShort & Practical: We cover Java fundamentals topics in Object Oriented Programming to build your confidence.\nBeginner-Friendly: No prior programming experience? No worries! We guide you through every core concept, ensuring a strong foundation in Java.\nClear Explanations & Step-by-Step Guidance: Complex topics such as Java Stack and Heap are broken down into an easy-to-understand lesson.\nWhy This Course Is Essential:\nThe Absolute Introduction to Object Oriented Programming in Java Course is designed to help you master the fundamental components for mastering the Core Java development concepts. Especially if you're going for a job interview or have a Java Project that needs your best performance. This course assumes no prior Java experience so prior Java so it will take you from zero to hero!\nThe course topics mainly focus on Object Orientation which I think is not stressed enough in other Java courses so I've got a complete focus on that throughout the lectures. You'll get plenty of practice writing classes and interfaces as well as countless methods with loops and if-else statements, as well as how to debug software using Eclipse.\nTopics covered in the Absolute Introduction to Object Oriented Programming in Java course:\nBasics of Java Program\nClasses and Objects in Java\nProgram Flow\nConstructors\nJava Stack and Heap\nReference and Instance Variables\nInheritance and Polymorphism\nInterfaces and Abstractions\nAbstract Class\nKey Benefits of Java Mastery\nVersatility & Demand: Java powers everything from enterprise applications to Android development. Mastering it opens up numerous career paths.\nStrong Foundation: A solid grasp of OOP, data handling, and concurrency sets you up to learn any new language or framework with ease.\nHigh Earning Potential: Skilled Java developers remain in high demand across multiple industries.\nReal-World Skills: Practical projects and industry-relevant examples ensure you can hit the ground running in any Java-related role.\nKEY TAKEAWAY\nDon’t miss the opportunity to build a strong foundation in Java—a versatile, high-demand language used by top companies worldwide. By the end of this course, you will be ready to work with multiple classes in Java and be prepared to take the more challenging and top ranked course: Master Object Oriented Design in Java - HW + Solutions\nCheck out the preview lectures and join today!\nEnroll now and take the first step toward mastering Core Java for a successful programming career!",
      "target_audience": [
        "Students that have a basic understanding of if statements and simple methods in java",
        "Student's who have only written single class java programs. This course will help you understand how to use multiple classes!"
      ]
    },
    {
      "title": "ROS 2 Nav2 [Navigation 2 Stack] - with SLAM and Navigation",
      "url": "https://www.udemy.com/course/ros2-nav2-stack/",
      "bio": "Finally Understand the Nav2 Stack with ROS2 - SLAM, Mapping, Navigation, Gazebo Simulation, Python Code - Step by Step",
      "objectives": [
        "Discover the Navigation 2 stack with hands-on experiments",
        "Create a map with SLAM in ROS2",
        "Make a robot navigate while avoiding obstacles",
        "Work with Navigation using a Gazebo simulation",
        "Understand the Nav2 architecture",
        "Tune the Navigation parameters",
        "Experiment with the global planner, local planner, and recovery behavior",
        "Create your own custom world in Gazebo building editor",
        "Get the steps to adapt a custom ROS2 robot for the Navigation 2 stack",
        "Control Nav2 with Python using the Simple Commander API",
        "Get to know what TFs are important for the navigation",
        "Understand the map and odom frames",
        "Use the slam_toolbox package for mapping and SLAM",
        "Practice more with additional activities and challenges"
      ],
      "course_content": {
        "Introduction": [
          "Welcome to the ROS2 Nav2 Course!",
          "What Is the Navigation (2) Stack, and Why Do We Need It?",
          "How to get the most out of this course"
        ],
        "Setup and Installation for ROS2 and Nav2": [
          "Intro",
          "PLEASE READ - INSTRUCTIONS FOR DIFFERENT ROS AND GAZEBO VERSIONS",
          "[Recap] Install and Setup ROS2 on Ubuntu 22.04",
          "Install the Navigation 2 Stack",
          "Install the Tools We’ll Need For the Course"
        ],
        "Generate a Map with SLAM (Simultaneous Localization and Mapping)": [
          "Intro",
          "Make the Robot Move in the World",
          "Generate and Save a Map with SLAM in ROS2",
          "What’s Inside the Generated Map?",
          "SLAM Activity - Create a New Map in Turtlebot3 House",
          "SLAM Activity - Solution"
        ],
        "Make a Robot Navigate with Nav2": [
          "Intro",
          "PLEASE READ - FOR ROS 2 JAZZY / GAZEBO HARMONIC",
          "A Quick Fix We Need To Do Before Starting",
          "Make the Robot Navigate Using the Generated Map",
          "Waypoint Follower - Go Through Multiple Nav2 Goals",
          "Dynamic Obstacle Avoidance",
          "Navigation Activity - Navigation with turtlebot3_house",
          "Navigation Activity - Solution"
        ],
        "Understand the Nav2 Stack": [
          "Intro",
          "Global Planner, Local Planner and Costmaps",
          "Parameters",
          "Recovery Behavior",
          "TFs and Important Frames",
          "The Nav2 Architecture - Explained Step by Step"
        ],
        "Build Your Own World for Navigation in Gazebo": [
          "Intro",
          "Build and Save a World in the Gazebo Building Editor",
          "Import a Floor Plan",
          "Add Objects To the World",
          "Make Turtlebot3 Navigate In That World (Step 1)",
          "Make Turtlebot3 Navigate In That World (Step 2)",
          "Make Turtlebot3 Navigate In That World (Step 3)",
          "Tips: How To Fix and Improve Maps with Gimp",
          "Custom World Activity - Make a Robot Navigate into a Generated Maze",
          "Custom World Activity - Solution (Step 1)",
          "Custom World Activity - Solution (Step 2)",
          "Custom World Activity - Solution (Step 3)"
        ],
        "Intro to Adapting a Custom Robot for Nav2 (Steps Overview)": [
          "Intro",
          "TF/URDF",
          "Input/Output - Odometry, Sensors and Controller",
          "Run Navigation With Your Custom Robot (using slam_toolbox)",
          "Launch File + Parameters"
        ],
        "Interact Programmatically With the Navigation Stack": [
          "Intro",
          "Discover what Topics and Actions are Used",
          "Simple Commander API - Install and Set the Initial Pose",
          "Simple Commander API - Send a Nav2 Goal",
          "Simple Commander API - Waypoint Follower + Downloadable Template",
          "Simple Commander API Activity - Create a Robot Patrol",
          "Simple Commander API Activity - Solution"
        ],
        "Conclusion": [
          "What to do next?",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Ubuntu 22.04 or Ubuntu 24.04 installed on your computer",
        "Basic knowledge in Linux command line and Python programming",
        "Basic knowledge in ROS2 (command lines, topics, writing a Python node, etc)",
        "NO hardware required - you can follow the entire course with a Gazebo simulation!"
      ],
      "description": "You have learned ROS 2 basics and want to start with SLAM and the Navigation 2 stack?\nOr you have already started but you feel completely lost?\nIn this course you will finally understand what the Navigation 2 stack is, step by step. And you will be able to apply this knowledge to your own ROS2 robotics projects.\nAnd to get started, no need to buy any hardware! You will be able to complete the course with a Gazebo simulation.\n\n\n-- Why this course?\n\n\nI realized that (while doing it myself) learning the Navigation stack is really not easy. If you thought that learning ROS2 was hard, then wait until you start with Nav2!\nThere are not so many resources online, and just getting started with the existing documentation can be a nightmare - unless you’re already a ROS expert. For many parts, in order to understand, you need so many prerequisites in ROS2 that it can become overwhelming.\nBecause of this, understanding Navigation2 would take you weeks of painful learning and frustration. That’s actually exactly what happened to me. And I don’t wish that to you.\nThat’s why I created this course: so you can SAVE COUNTLESS HOURS and learn the Navigation 2 stack with minimum knowledge of ROS2, in the easiest possible way.\nInstead of dropping you in a sea of documentation I will guide you to make you experiment first, and then progress in a smooth way towards a practical understanding.\nTo be clear, this course is not for complete ROS2 beginners, you need to have some ROS2 basics. But then, once you have the basics, you will be able to easily follow the course and learn Nav2 efficiently.\nMy goal is to make Navigation accessible to anyone with a basic to intermediate level of ROS2.\n\n\n-- How do I teach?\n\n\nIf you’ve taken other ROS 2 courses from me you know that I’m not here to waste your time.\nMy teaching method is quite simple:\nStep by step\nGoing to the point\nLearn while doing\nAlso I strongly focus on the “why” behind what you learn. The goal is not just to make you blindly repeat some steps, but to understand why those steps matter.\n\n\nAnd don’t take my word for it - here are some reviews from fellow students/researchers/engineers/teachers who took my ROS 2 course on Udemy:\n“Best course on ROS2 I’ve taken! Other courses (different sites/platforms) made it confusing but this course makes it so clear and easy to understand while letting you try on your own. I am definitely learning a lot in a painless and simple way. I should have gotten this course from the beginning.” - Miguel Martinez G.\n“Overall very satisfied. I’ve a strong background in programming, but at a higher level (web mostly) and the elegant, fluent and clean approach of this course has leveraged my introduction to the ROS environment in a short amount of time, without the struggle of going through a lot of documentation” - Devis D.\n“This is the best course in ROS2 I’ve ever seen” - Aleksandar K.\n“Great course content, straight to the point and very easy to follow” - Kevin M.\n\n\n-- What will you do and learn in the course?\n\n\nYou will follow a progression line that allows you to experiment first, so you get an intuitive approach to Navigation. And only then we reinforce the learning with some explanations and a bit of theory, followed by more practice.\nIn the course you will:\nInstall ROS2 and the Navigation 2 stack.\nGenerate and save a map with SLAM (Simultaneous Localization and Mapping).\nMake a robot navigate using this map.\nUnderstand how Navigation 2 works and what are the different components of the stack: global planner, local planner, recovery behavior, TFs, etc.\nBuild a custom Gazebo world to be able to create a simulation of your own environment.\nDiscover the steps to adapt your own robot for the Navigation 2 stack.\nInteract with Nav2 using the Python Simple Commander API.\nEach section is built on top of the previous ones, and you will reinforce what you’ve learned with extra challenges to practice more.\n\n\nSo, to learn the Navigation stack and save countless hours, don’t wait anymore and enroll in the course today!\n\n\nOh and you don’t take any risk here, because you also get a 30-day money back guarantee if you’re not fully satisfied - no questions asked.\nSee you in the course!\n\n\n\n\nNote - this course is not for you if:\nYou are a complete ROS 2 beginner. In this case, you need to learn ROS 2 Basics first\nYou want to learn the Navigation 1 Stack for ROS1 (not exactly the same thing)",
      "target_audience": [
        "ROS developers who want to learn how to use the Navigation 2 stack",
        "Engineers/Teachers/Researchers/Anyone interested in programming mobile robots with Robot Operating System 2",
        "Anyone wanting to learn how to perform SLAM and Navigation using a simplified approach",
        "Anyone lost in the ROS2 Navigation docs"
      ]
    },
    {
      "title": "Java Data Structures and Algorithms Masterclass",
      "url": "https://www.udemy.com/course/java-data-structures-and-algorithms-masterclass/",
      "bio": "100+ DSA Interview Questions for Cracking FAANG with Animated Examples for Deeper Understanding and Faster Learning",
      "objectives": [
        "Learn, implement, and use different Data Structures",
        "Learn, implement and use different Algorithms",
        "Become a better developer by mastering computer science fundamentals",
        "Learn everything you need to ace difficult coding interviews",
        "Cracking the Coding Interview with 100+ questions with explanations",
        "Time and Space Complexity of Data Structures and Algorithms",
        "Recursion",
        "Big O",
        "Dynamic Programming",
        "Divide and Conquer Algorithms",
        "Graph Algorithms",
        "Greedy Algorithms"
      ],
      "course_content": {
        "Introduction": [
          "Curriculum Walkthrough",
          "What is a data structure?",
          "What is an algorithm?",
          "Why are Data Structures and Algorithms important?",
          "Types of Data Structures",
          "Types of Algorithms",
          "Lecture Notes",
          "Motivation"
        ],
        "Big O Notation": [
          "What is Big O?",
          "Big O Notations - (Big O, Big Omega, Big Theta)",
          "Big O - O(1)",
          "Big O - O(N)",
          "Drop Constants",
          "Big O - O(N^2)",
          "Drop Non Dominant Terms",
          "Big O - O(logN)",
          "Add vs Multiply",
          "Space Complexity",
          "How to Measure the Code using Big O?",
          "Big O Quiz"
        ],
        "Arrays": [
          "What is an Array?",
          "Types of Arrays",
          "Arrays in Memory",
          "Create an Array",
          "Insertion in Array",
          "Accessing Elements in Array",
          "Array Traversal",
          "Search for Array Element",
          "Delete Array Element",
          "Time and Space Complexity of 1D Arrays",
          "Create Two Dimensional Array",
          "Insertion - Two Dimensional Array",
          "Accessing Two Dimensional Array Element",
          "Traverse Two Dimensional Array",
          "Searching Two Dimensional Array",
          "Delete Two Dimensional Array Element",
          "Time and Space Complexity of 2D Arrays",
          "When to Use/Avoid Arrays",
          "Download Resources"
        ],
        "PROJECT 1 - Arrays": [
          "Goals - what you will make by the end of this section",
          "Calculate Average Temperature",
          "Find the Days Above Average Temperature",
          "Download Resources"
        ],
        "Array - CODING EXERCISES - LeetCode - Cracking FAANG Interview Questions": [
          "Middle Function",
          "Solution to Middle Function",
          "2D Arrays",
          "Solution to 2D Arrays",
          "Best Score",
          "Solution to Best Score",
          "Missing Number",
          "Solution to Missing Number",
          "Duplicate Number",
          "Solution to Duplicate Number",
          "Remove Duplicates from Sorted Array - LeetCode 26",
          "Solution to Remove Duplicates from Sorted Array - LeetCode 26",
          "Best Time to Buy and Sell Stock - LeetCode 121",
          "Solution to Best Time to Buy and Sell Stock - LeetCode 121",
          "Two Sum - LeetCode 1",
          "Solution to Two Sum - LeetCode 1",
          "Finding a Number in an Array",
          "Solution - Finding a Number in an Array",
          "Max Product of Two Integers",
          "Solution - Max Product of Two Integers",
          "IsUnique / Contains Duplicate - LeetCode 217",
          "Solution - IsUnique / Contains Duplicate - LeetCode 217",
          "Permutation",
          "Solution - Permutation",
          "Rotate Matrix",
          "Rotate Matrix / Image - LeetCode 48",
          "Download Resources"
        ],
        "ArrayList": [
          "What is ArrayList?",
          "ArrayList in Memory",
          "Creating ArrayList",
          "Insertion in ArrayList",
          "Accessing Elements in ArrayList",
          "Traversal of ArrayList",
          "Search for an Element in ArrayList",
          "Delete an Element for ArrayList",
          "Time and Space Complexity of ArrayList"
        ],
        "Cracking Big O Interview Questions - Arrays": [
          "Question 1 - Time Complexity of Method that returns Sum and Product of Array",
          "Question 2 - Time Complexity of Print Pairs Method",
          "Question 3 - Time Complexity of Print Unordered Pairs Method",
          "Question 4 - Find Time Complexity for Given Method",
          "Question 5 - Find Time Complexity for Given Method",
          "Question 6 - Time Complexity of Reverse Array Function",
          "Question 7 - Equivalent to O(N)"
        ],
        "Linked List": [
          "What is a Linked List?",
          "Linked List vs Array",
          "Types of Linked List",
          "Linked List in the Memory",
          "Creation of Singly Linked List",
          "Insertion in Singly Linked List in Memory",
          "Insertion Algorithm in Singly Linked List",
          "Insertion Method in Singly Linked List",
          "Traversal of Singly Linked List",
          "Searching in Singly Linked List",
          "Deletion of a Node from Singly Linked List",
          "Deletion Method in Singly Linked List",
          "Deletion of Entire Singly Linked List",
          "Time and Space Complexity of Singly Linked List",
          "Download Resources"
        ],
        "Linked List Coding Exercises": [
          "Singly Linked List - Push",
          "Solution to Singly Linked List - Push",
          "Singly Linked List - Pop",
          "Solution to Singly Linked List - Pop",
          "Singly Linked List - Insert",
          "Solution to Singly Linked List - Insert",
          "Singly Linked List - Get",
          "Solution to Singly Linked List - Get",
          "Singly Linked List - Rotate",
          "Solution to Singly Linked List - Rotate",
          "Singly Linked List - Set",
          "Solution to Singly Linked List - Set",
          "Singly Linked List - Remove",
          "Solution to Singly Linked List - Remove"
        ],
        "Circular Singly Linked List": [
          "Create Circular Singly Linked List",
          "Insertion in Circular Singly Linked List",
          "Insertion Algorithm in Circular Singly Linked List",
          "Insertion Method Circular Singly Linked List",
          "Traversal of Circular Singly Linked List",
          "Searching a Node in Circular Singly Linked List",
          "Deletion of a Node from Circular Singly List",
          "Deletion Algorithm in Circular Singly Linked List",
          "Deletion Method in Circular Singly Linked List",
          "Delete Entire Circular Singly Linked List",
          "Time and Space Complexity of Circular Singly Linked List",
          "Download Resources"
        ]
      },
      "requirements": [
        "Basic Java Programming skills"
      ],
      "description": "Welcome to the Java Data Structures and Algorithms Masterclass, the most modern, and the most complete Data Structures and Algorithms in Java course on the internet.\nAt 45+ hours, this is the most comprehensive course online to help you ace your coding interviews and learn about Data Structures and Algorithms in Java. You will see 100+ Interview Questions done at the top technology companies such as Apple,Amazon, Google and Microsoft and how to face Interviews with comprehensive visual explanatory video materials which will bring you closer towards landing the tech job of your dreams!\nLearning Java is one of the fastest ways to improve your career prospects as it is one of the most in demand tech skills! This course will help you in better understanding every detail of Data Structures and how algorithms are implemented in high level programming language.\nWe'll take you step-by-step through engaging video tutorials and teach you everything you need to succeed as a professional programmer.\nAfter finishing this course, you will be able to:\nLearn basic algorithmic techniques such as greedy algorithms, binary search, sorting and dynamic programming to solve programming challenges.\nLearn the strengths and weaknesses of a variety of data structures, so you can choose the best data structure for your data and applications\nLearn many of the algorithms commonly used to sort data, so your applications will perform efficiently when sorting large datasets\nLearn how to apply graph and string algorithms to solve real-world challenges: finding shortest paths on huge maps and assembling genomes from millions of pieces.\n\n\nWhy this course is so special and different from any other resource available online?\n\n\nThis course will take you from very beginning to a very complex and advanced topics in understanding Data Structures and Algorithms!\nYou will get video lectures explaining concepts clearly with comprehensive visual explanations throughout the course.\nYou will also see Interview Questions done at the top technology companies such as Apple,Amazon, Google and Microsoft.\nI cover everything you need to know about technical interview process!\n\n\nSo whether you are interested in learning the top programming language in the world in-depth and interested in learning the fundamental Algorithms, Data Structures and performance analysis that make up the core foundational skillset of every accomplished programmer/designer or software architect and is excited to ace your next technical interview this is the course for you!\n\n\nAnd this is what you get by signing up today:\n\n\nLifetime access to 44+ hours of HD quality videos. No monthly subscription. Learn at your own pace, whenever you want\nFriendly and fast support in the course Q&A whenever you have questions or get stuck\nFULL money back guarantee for 30 days!\n\n\nThis course is designed to help you to achieve your career goals. Whether you are looking to get more into Data Structures and Algorithms , increase your earning potential or just want a job with more freedom, this is the right course for you!\nThe topics that are covered in this course.\nSection 1 - Introduction\nWhat are Data Structures?\nWhat is an algorithm?\nWhy are Data Structures and Algorithms important?\nTypes of Data Structures\nTypes of Algorithms\nSection 2 - Recursion\nWhat is Recursion?\nWhy do we need recursion?\nHow Recursion works?\nRecursive vs Iterative Solutions\nWhen to use/avoid Recursion?\nHow to write Recursion in 3 steps?\nHow to find Fibonacci numbers using Recursion?\nSection 3 - Cracking Recursion Interview Questions\nQuestion 1 - Sum of Digits\nQuestion 2 - Power\nQuestion 3 - Greatest Common Divisor\nQuestion 4 - Decimal To Binary\nSection 4 - Bonus CHALLENGING Recursion Problems (Exercises)\npower\nfactorial\nproductofArray\nrecursiveRange\nfib\nreverse\nisPalindrome\nsomeRecursive\nflatten\ncaptalizeFirst\nnestedEvenSum\ncapitalizeWords\nstringifyNumbers\ncollectStrings\nSection 5 - Big O Notation\nAnalogy and Time Complexity\nBig O, Big Theta and Big Omega\nTime complexity examples\nSpace Complexity\nDrop the Constants and the non dominant terms\nAdd vs Multiply\nHow to measure the codes using Big O?\nHow to find time complexity for Recursive calls?\nHow to measure Recursive Algorithms that make multiple calls?\nSection 6 - Top 10 Big O Interview Questions (Amazon, Facebook, Apple and Microsoft)\nProduct and Sum\nPrint Pairs\nPrint Unordered Pairs\nPrint Unordered Pairs 2 Arrays\nPrint Unordered Pairs 2 Arrays 100000 Units\nReverse\nO(N)  Equivalents\nFactorial Complexity\nFibonacci Complexity\nPowers of 2\nSection 7 - Arrays\nWhat is an Array?\nTypes of Array\nArrays in Memory\nCreate an Array\nInsertion Operation\nTraversal Operation\nAccessing an element of Array\nSearching for an element in Array\nDeleting an element from Array\nTime and Space complexity of One Dimensional Array\nOne Dimensional Array Practice\nCreate Two Dimensional Array\nInsertion - Two Dimensional Array\nAccessing an element of Two Dimensional Array\nTraversal - Two Dimensional Array\nSearching for an element in Two Dimensional Array\nDeletion - Two Dimensional Array\nTime and Space complexity of Two Dimensional Array\nWhen to use/avoid array\n\n\nSection 8 - Cracking Array Interview Questions (Amazon, Facebook, Apple and Microsoft)\nQuestion 1 - Missing Number\nQuestion 2 - Pairs\nQuestion 3 - Finding a number in an Array\nQuestion 4 - Max product of two int\nQuestion 5 - Is Unique\nQuestion 6 - Permutation\nQuestion 7 - Rotate Matrix\nSection 9 - CHALLENGING Array Problems (Exercises)\nMiddle Function\n2D Lists\nBest Score\nMissing Number\nDuplicate Number\nPairs\n\n\nSection 10 - Linked List\nWhat is a Linked List?\nLinked List vs Arrays\nTypes of Linked List\nLinked List in the Memory\nCreation of Singly Linked List\nInsertion in Singly Linked List in Memory\nInsertion in Singly Linked List Algorithm\nInsertion Method in Singly Linked List\nTraversal of Singly Linked List\nSearch for a value in Single Linked List\nDeletion of node from Singly Linked List\nDeletion Method in Singly Linked List\nDeletion of entire Singly Linked List\nTime and Space Complexity of Singly Linked List\nSection 11 - Circular Singly Linked List\nCreation of Circular Singly Linked List\nInsertion in Circular Singly Linked List\nInsertion Algorithm in Circular Singly Linked List\nInsertion method in Circular Singly Linked List\nTraversal of Circular Singly Linked List\nSearching a node in Circular Singly Linked List\nDeletion of a node from Circular Singly Linked List\nDeletion Algorithm in Circular Singly Linked List\nMethod in Circular Singly Linked List\nDeletion of entire Circular Singly Linked List\nTime and Space Complexity of Circular Singly Linked List\nSection 12 - Doubly Linked List\nCreation of Doubly Linked List\nInsertion in Doubly Linked List\nInsertion Algorithm in Doubly Linked List\nInsertion Method in Doubly Linked List\nTraversal of Doubly Linked List\nReverse Traversal of Doubly Linked List\nSearching for a node in Doubly Linked List\nDeletion of a node in Doubly Linked List\nDeletion Algorithm in Doubly Linked List\nDeletion Method in Doubly Linked List\nDeletion of entire Doubly Linked List\nTime and Space Complexity of Doubly Linked List\nSection 13 - Circular Doubly Linked List\nCreation of Circular Doubly Linked List\nInsertion in Circular Doubly Linked List\nInsertion Algorithm in Circular Doubly Linked List\nInsertion Method in Circular Doubly Linked List\nTraversal of Circular Doubly Linked List\nReverse Traversal of Circular Doubly Linked List\nSearch for a node in Circular Doubly Linked List\nDelete a node from Circular Doubly Linked List\nDeletion Algorithm in Circular Doubly Linked List\nDeletion Method in Circular Doubly Linked List\nEntire Circular Doubly Linked List\nTime and Space Complexity of Circular Doubly Linked List\nTime Complexity of Linked List vs Arrays\nSection 14 - Cracking Linked List Interview Questions (Amazon, Facebook, Apple and Microsoft)\nLinked List Class\nQuestion 1 - Remove Dups\nQuestion 2 - Return Kth to Last\nQuestion 3 - Partition\nQuestion 4 - Sum Linked Lists\nQuestion 5 - Intersection\nSection 15 - Stack\nWhat is a Stack?\nWhat and Why of Stack?\nStack Operations\nStack using Array vs Linked List\nStack Operations using Array (Create, isEmpty, isFull)\nStack Operations using Array (Push, Pop, Peek, Delete)\nTime and Space Complexity of Stack using Array\nStack Operations using Linked List\nStack methods - Push , Pop, Peek, Delete and isEmpty using Linked List\nTime and Space Complexity of Stack using Linked List\nWhen to Use/Avoid Stack\nStack Quiz\n\n\nSection 16 - Queue\nWhat is a Queue?\nLinear Queue Operations using Array\nCreate, isFull, isEmpty and enQueue methods using Linear Queue Array\nDequeue, Peek and Delete Methods using Linear Queue Array\nTime and Space Complexity of Linear Queue using Array\nWhy Circular Queue?\nCircular Queue Operations using Array\nCreate, Enqueue, isFull and isEmpty Methods in Circular Queue using Array\nDequeue, Peek and Delete Methods in Circular Queue using Array\nTime and Space Complexity of Circular Queue using Array\nQueue Operations using Linked List\nCreate, Enqueue and isEmpty Methods in Queue using Linked List\nDequeue, Peek and Delete Methods in Queue using Linked List\nTime and Space Complexity of Queue using Linked List\nArray vs Linked List Implementation\nWhen to Use/Avoid Queue?\nSection 17 - Cracking Stack and Queue Interview Questions (Amazon,Facebook, Apple, Microsoft)\nQuestion 1 - Three in One\nQuestion 2 - Stack Minimum\nQuestion 3 - Stack of Plates\nQuestion 4 - Queue via Stacks\nQuestion 5 - Animal Shelter\nSection 18 - Tree / Binary Tree\nWhat is a Tree?\nWhy Tree?\nTree Terminology\nHow to create a basic tree in Java?\nBinary Tree\nTypes of Binary Tree\nBinary Tree Representation\nCreate Binary Tree (Linked List)\nPreOrder Traversal Binary Tree (Linked List)\nInOrder Traversal Binary Tree (Linked List)\nPostOrder Traversal Binary Tree (Linked List)\nLevelOrder Traversal Binary Tree (Linked List)\nSearching for a node in Binary Tree (Linked List)\nInserting a node in Binary Tree (Linked List)\nDelete a node from Binary Tree (Linked List)\nDelete entire Binary Tree (Linked List)\nCreate Binary Tree (Array)\nInsert a value Binary Tree (Array)\nSearch for a node in Binary Tree (Array)\nPreOrder Traversal Binary Tree (Array)\nInOrder Traversal Binary Tree (Array)\nPostOrder Traversal Binary Tree (Array)\nLevel Order Traversal Binary Tree (Array)\nDelete a node from Binary Tree (Array)\nEntire Binary Tree (Array)\nLinked List vs Python List Binary Tree\nSection 19 - Binary Search Tree\nWhat is a Binary Search Tree? Why do we need it?\nCreate a Binary Search Tree\nInsert a node to BST\nTraverse BST\nSearch in BST\nDelete a node from BST\nDelete entire BST\nTime and Space complexity of BST\nSection 20 - AVL Tree\nWhat is an AVL Tree?\nWhy AVL Tree?\nCommon Operations on AVL Trees\nInsert a node in AVL (Left Left Condition)\nInsert a node in AVL (Left Right Condition)\nInsert a node in AVL (Right Right Condition)\nInsert a node in AVL (Right Left Condition)\nInsert a node in AVL (all together)\nInsert a node in AVL (method)\nDelete a node from AVL (LL, LR, RR, RL)\nDelete a node from AVL (all together)\nDelete a node from AVL (method)\nDelete entire AVL\nTime and Space complexity of AVL Tree\nSection 21 - Binary Heap\nWhat is Binary Heap? Why do we need it?\nCommon operations (Creation, Peek, sizeofheap) on Binary Heap\nInsert a node in Binary Heap\nExtract a node from Binary Heap\nDelete entire Binary Heap\nTime and space complexity of Binary Heap\nSection 22 - Trie\nWhat is a Trie? Why do we need it?\nCommon Operations on Trie (Creation)\nInsert a string in Trie\nSearch for a string in Trie\nDelete a string from Trie\nPractical use of Trie\nSection 23 - Hashing\nWhat is Hashing? Why do we need it?\nHashing Terminology\nHash Functions\nTypes of Collision Resolution Techniques\nHash Table is Full\nPros and Cons of Resolution Techniques\nPractical Use of Hashing\nHashing vs Other Data structures\nSection 24 - Sort Algorithms\nWhat is Sorting?\nTypes of Sorting\nSorting Terminologies\nBubble Sort\nSelection Sort\nInsertion Sort\nBucket Sort\nMerge Sort\nQuick Sort\nHeap Sort\nComparison of Sorting Algorithms\nSection 25 - Searching Algorithms\nIntroduction to Searching Algorithms\nLinear Search\nLinear Search in Python\nBinary Search\nBinary Search in Python\nTime Complexity of Binary Search\n\n\nSection 26 - Graph Algorithms\nWhat is a Graph? Why Graph?\nGraph Terminology\nTypes of Graph\nGraph Representation\nGraph in Java using Adjacency Matrix\nGraph in Java using Adjacency List\n\n\nSection 27 - Graph Traversal\nBreadth First Search Algorithm (BFS)\nBreadth First Search Algorithm (BFS) in Java - Adjacency Matrix\nBreadth First Search Algorithm (BFS) in Java - Adjacency List\nTime Complexity of Breadth First Search (BFS) Algorithm\nDepth First Search (DFS) Algorithm\nDepth First Search (DFS) Algorithm in Java - Adjacency List\nDepth First Search (DFS) Algorithm in Java - Adjacency Matrix\nTime Complexity of Depth First Search (DFS) Algorithm\nBFS Traversal vs DFS Traversal\nSection 28 - Topological Sort\nWhat is Topological Sort?\nTopological Sort Algorithm\nTopological Sort using Adjacency List\nTopological Sort using Adjacency Matrix\nTime and Space Complexity of Topological Sort\n\n\nSection 29 - Single Source Shortest Path Problem\nSWhat is Single Source Shortest Path Problem?\nBreadth First Search (BFS) for Single Source Shortest Path Problem (SSSPP)\nBFS for SSSPP in Java using Adjacency List\nBFS for SSSPP in Java using Adjacency Matrix\nTime and Space Complexity of BFS for SSSPP\nWhy does BFS not work with Weighted Graph?\nWhy does DFS not work for SSSP?\nSection 30 - Dijkstra's Algorithm\nDijkstra's Algorithm for SSSPP\nDijkstra's Algorithm in Java - 1\nDijkstra's Algorithm in Java - 2\nDijkstra's Algorithm with Negative Cycle\nSection 31 - Bellman Ford Algorithm\nBellman Ford Algorithm\nBellman Ford Algorithm with negative cycle\nWhy does Bellman Ford run V-1 times?\nBellman Ford in Python\nBFS vs Dijkstra vs Bellman Ford\nSection 32 - All Pairs Shortest Path Problem\nAll pairs shortest path problem\nDry run for All pair shortest path\nSection 33 - Floyd Warshall\nFloyd Warshall Algorithm\nWhy Floyd Warshall?\nFloyd Warshall with negative cycle,\nFloyd Warshall in Java,\nBFS vs Dijkstra vs Bellman Ford vs Floyd Warshall,\nSection 34 - Minimum Spanning Tree\nMinimum Spanning Tree,\nDisjoint Set,\nDisjoint Set in Java,\nSection 35 - Kruskal's and Prim's Algorithms\nKruskal Algorithm,\nKruskal Algorithm in Python,\nPrim's Algorithm,\nPrim's Algorithm in Python,\nPrim's vs Kruskal\nSection 36 - Cracking Graph and Tree Interview Questions (Amazon,Facebook, Apple, Microsoft)\nSection 37 - Greedy Algorithms\nWhat is Greedy Algorithm?\nWell known Greedy Algorithms\nActivity Selection Problem\nActivity Selection Problem in Python\nCoin Change Problem\nCoin Change Problem in Python\nFractional Knapsack Problem\nFractional Knapsack Problem in Python\nSection 38 - Divide and Conquer Algorithms\nWhat is a Divide and Conquer Algorithm?\nCommon Divide and Conquer algorithms\nHow to solve Fibonacci series using Divide and Conquer approach?\nNumber Factor\nNumber Factor in Java\nHouse Robber\nHouse Robber Problem in Java\nConvert one string to another\nConvert One String to another in Java\nZero One Knapsack problem\nZero One Knapsack problem in Java\nLongest Common Sequence Problem\nLongest Common Subsequence in Java\nLongest Palindromic Subsequence Problem\nLongest Palindromic Subsequence in Java\nMinimum cost to reach the Last cell problem\nMinimum Cost to reach the Last Cell in 2D array using Java\nNumber of Ways to reach the Last Cell with given Cost\nNumber of Ways to reach the Last Cell with given Cost in Java\nSection 39 - Dynamic Programming\nWhat is Dynamic Programming? (Overlapping property)\nWhere does the name of DC come from?\nTop Down with Memoization\nBottom Up with Tabulation\nTop Down vs Bottom Up\nIs Merge Sort Dynamic Programming?\nNumber Factor Problem using Dynamic Programming\nNumber Factor : Top Down and Bottom Up\nHouse Robber Problem using Dynamic Programming\nHouse Robber : Top Down and Bottom Up\nConvert one string to another using Dynamic Programming\nConvert String using Bottom Up\nZero One Knapsack using Dynamic Programming\nZero One Knapsack - Top Down\nZero One Knapsack - Bottom Up\nSection 40 - CHALLENGING Dynamic Programming Problems\nLongest repeated Subsequence Length problem\nLongest Common Subsequence Length problem\nLongest Common Subsequence  problem\nDiff Utility\nShortest Common Subsequence  problem\nLength of Longest Palindromic Subsequence\nSubset Sum Problem\nEgg Dropping Puzzle\nMaximum Length Chain of Pairs\nSection 41 - A Recipe for Problem Solving\nIntroduction\nStep 1 - Understand the problem\nStep 2 - Examples\nStep 3 - Break it Down\nStep 4 - Solve or Simplify\nStep 5 - Look Back and Refactor\nSection 41 - Wild West",
      "target_audience": [
        "Anybody interested in learning more about data structures and algorithms or the technical interview process!",
        "Self-taught programmers who have a basic knowledge in Java and want to be professional in Data Structure and Algorithm and begin interviewing in tech positions!",
        "Students currently studying computer science and want supplementary material on Data Structure and Algorithm and interview preparation for after graduation!",
        "Professional programmers who need practice for upcoming coding interviews."
      ]
    },
    {
      "title": "Advanced C++ Programming Training Course",
      "url": "https://www.udemy.com/course/advanced-c-programming/",
      "bio": "Take your C++ Programming Training Course Will Take Your Skills To The Next Level.",
      "objectives": [],
      "course_content": {
        "01. Introduction/Inheritance": [
          "Working Files - Download These First",
          "What This Course Covers",
          "Review Building A Base Class",
          "Creating A Derived Class",
          "Using Protected Members Part 1",
          "Using Protected Members Part 2",
          "Constructors And Destructors",
          "Exercise 1",
          "Exercise 2"
        ],
        "02. Polymorphism": [
          "Understanding Polymorphism",
          "Base Class Pointers",
          "Virtual Functions",
          "Abstract Classes",
          "Exercise 1",
          "Exercise 2"
        ],
        "03. Generic Programming": [
          "Why Generic Programming",
          "Generic Functions",
          "Defining Class Template",
          "Class Template Specialization",
          "Function Templates With Multiple Data Types",
          "Class Templates With Multiple Data Types",
          "Exercise 1",
          "Exercise 2"
        ],
        "04. Exception Handling": [
          "Exception Overview",
          "Throwing Exceptions",
          "Catching Exceptions",
          "Catch All Exception Handlers",
          "Exercise 1"
        ],
        "05. Stream Input/Output": [
          "Stream Overview",
          "Managing Stream Output",
          "Managing Stream Input",
          "String Streams",
          "Exercise 1"
        ],
        "06. Sequential Containers": [
          "Vectors Review",
          "Using Lists Part 1",
          "Using Lists Part 2",
          "Using Deques Part 1",
          "Using Deques Part 2",
          "Exercise 1",
          "Exercise 2"
        ],
        "07. Associative Containers": [
          "Working With The Pair Class",
          "Using Maps Part 1",
          "Using Maps Part 2",
          "Using Sets",
          "Multimaps And Multisets",
          "Exercise 1",
          "Exercise 2"
        ],
        "08. Generic Algorithms": [
          "Read Only Algorithms",
          "Read Write Algorithms",
          "Sorting Algorithms",
          "Iterators Front Back Inserter",
          "Iterators Reverse",
          "Exercise 1"
        ],
        "09. Non-STL Data Structures": [
          "Stacks Part 1",
          "Stacks Part 2",
          "Queues Part 1",
          "Queues Part 2",
          "Binary Trees Part 1",
          "Binary Trees Part 2",
          "Adv CPP 0907 Linked Lists Part 1",
          "Linked Lists Part 2",
          "Linked Lists Part 3",
          "Exercise 1",
          "Exercise 2",
          "Exercise 3"
        ],
        "10. Non-STL Algorithms": [
          "Linear Search",
          "Binary Sear",
          "Adv CPP 1003 Selection Sort",
          "Adv CPP 1004 Insertion Sort",
          "Merge Sort",
          "Quick Sort",
          "Exercise 1"
        ]
      },
      "requirements": [],
      "description": "A Verifiable Certificate of Completion is presented to all students who undertake this course.\nCourse Duration: 6.5 Hours - 80 Lessons\nAbout This Course\nIn this Advanced C++ training course, expert trainer, author and developer Professor McMillan teaches you advanced tools and techniques for developing programs with C++. This tutorial continues where Professor McMillan left off with the Beginners Learning C++ training course from Infinite Skills.\nYou jump right in to the training with a review of Inheritance. You will learn advanced topics in this training course such as Polymorphism, creating templates, working with exception handling, stream input/output management, associative containers, algorithms, stacks, queues and binary trees, different search and sort methods, namespaces and working with advanced string class methods.\nBy the completion of this advanced training course for C++, you will have an in-depth understanding of how to apply advanced programming techniques to achieve your software development needs. Working files are included to allow you to learn using the same files that the author using in this video training course for C++\nAbout Infinte Skills\nInfiniteSkills is an innovator in the field of technology computer software training. The firm's progressive approach teaches complex topics by focusing on task-oriented training.This allows users to intuitively grasp a wide range of skills they can seamlessly integrate into their daily workflow. This Advanced C++ course is just one course from the huge selection of training videos offered by Infinite Skills",
      "target_audience": []
    },
    {
      "title": "Docker, From Zero To Hero: Become a DevOps Docker Master",
      "url": "https://www.udemy.com/course/docker-from-zero-to-hero/",
      "bio": "Become a Docker DevOps Master by learning from scratch the technology that is changing the world with containers!",
      "objectives": [
        "You will be able to understand how Docker works, integrate it into your daily work and make your life a fun place with Docker.",
        "You will be able to Dockerize any application.",
        "You will be able to design productive and efficient strategies that will ease the creation and deployment of your applications.",
        "You can instruct your colleagues about the use of this tool."
      ],
      "course_content": {
        "Introduction - What is Docker?": [
          "Introduction - What is Docker?",
          "What is a container?",
          "What is an image?",
          "Containers vs Virtual Machines",
          "Basics of a Dockerfile",
          "Docker's Architecture",
          "Layering in Docker",
          "Are you ready?",
          "References",
          "Bonus"
        ],
        "Installation": [
          "Notes on Installation",
          "Installation on Ubuntu",
          "Installation on Debian",
          "Installation on CentOs",
          "Installation on Windows & Mac OS"
        ],
        "Resources for this course": [
          "Where can I get the samples used in this course?"
        ],
        "Docker Images - Your first touch": [
          "What is a \"Official Docker Image\"?",
          "Where are my local images?",
          "Create your first Docker Container!",
          "Notes on Dockerfiles",
          "What is a Dockerfile?",
          "Build your first Image using a Dockerfile",
          "Notes on creating a Docker Container",
          "Test your image by creating a Docker Container"
        ],
        "Docker Images - Learn about Dockerfiles": [
          "The FROM instruction - Take any image as a base!",
          "The RUN instruction rocks!",
          "Copy files with COPY",
          "Download files from Internet using ADD",
          "Want to build like a pro? Use the ENV instruction",
          "Being organized matters! Understand the WORKDIR instruction",
          "Metadata on the way! Use LABELs to follow the best practices",
          "Quick Tip: Browse the content of an image by creating a container",
          "Keep it up! Handle USERs in your Dockerfile",
          "Make your images flexible! Use ARGs in the build process",
          "Notes on the CMD",
          "What is the CMD?",
          "Understand the output from the CMD"
        ],
        "Docker Images - Build advanced images": [
          "Be careful with the context!",
          "Dockerignore - Start ignoring the things you don't need!",
          "Let's talk about best practices when building images",
          "Notes on building an image with SSL and PHP",
          "Building an Image with HTTP + SSL/TLS + PHP - I",
          "Notes on building an image with SSL and PHP",
          "Building an Image with HTTP + SSL/TLS + PHP - II",
          "What is a dangling image?",
          "Removing dangling images!",
          "Notes on NGINX + PHP",
          "Back to building! Create an image with Nginx + PHP 7",
          "Do you like challenges? Let's keep building our NGINX image",
          "Let's solve the challenge from the previous lesson!",
          "Basics for MultiStage Build in Docker",
          "Notes on Multi-Stage Build",
          "Got the idea? Now let's build a real image with MultiStage!",
          "Check your knowledge!",
          "Feel comfortable with images? Let's check it!"
        ],
        "Docker Containers - Learn how containers work in depth": [
          "What is a Docker Container?",
          "Listing and creating containers",
          "Remove and Rename Containers",
          "More tips... Start, Stop, Map Ports!",
          "Understand the Container's FileSystem",
          "Notes on containers",
          "Learn how to create environment variables in Containers",
          "Let's launch a MySQL Container for the first time",
          "Mapping ports in MySQL!",
          "More databases? Let's create a PostgreSQL Container",
          "DevOps Style? Jenkins as a container!",
          "For hungry containers only :D Learn how to apply limits",
          "Copy files from your host to your container - Docker cp",
          "Turn a container into an image with one command!",
          "Notes on overriding the CMD on the fly",
          "Tip: Override the CMD when running a container!",
          "More tips: Destroy containers automatically",
          "Just one more tip: Change the Docker Root Directory",
          "Check your knowledge!",
          "Feel comfortable with containers? Let's check it!"
        ],
        "Docker Volumes - Persist data in containers": [
          "What is a Docker Volume?",
          "Why are volumes so important? Let's check it using MySQL",
          "Bind Volumes: Map folders to your container",
          "\"Normal\" Volumes: Manage your volumes with the Docker CLI",
          "Anonymous Volumes: Be careful if you want to use them!",
          "Understand some differences when using volumes",
          "Back to the Dockerfile! Understand the VOLUME instruction",
          "Dangling volumes. Yes, here we have more dangling stuff",
          "MongoDB - Persist data in a NoSQL container",
          "Jenkins again! Persist your Jobs and configurations",
          "Developing a website? Share your data with a Docker Nginx Container",
          "Go deeper! Share volumes between containers"
        ],
        "Docker Networks - Learn how to get containers communicated": [
          "Introduction - Networking in Docker",
          "Notes on the networking section",
          "What's the default network in Docker?",
          "Ping containers in the default network",
          "Create your own network",
          "Embedded DNS! Ping containers by name in the same network",
          "Connect and disconnect networks",
          "Assign a static IP to a container",
          "The Host Network",
          "The None Network"
        ],
        "Docker Compose - Put everything you learned together!": [
          "Introduction - Why Compose?",
          "Notes on Docker Compose installation",
          "How do I install Docker Compose?",
          "Let's go! First steps in Compose",
          "Environment variables in Compose",
          "Volumes in Compose",
          "Networking in Compose",
          "Build Docker images using Docker Compse",
          "Notes on overriding the CMD",
          "Overwrite the CMD of an image with Compose",
          "Install Drupal + PostgreSQL",
          "Install Joomla + MySQL",
          "Install PrestaShop + MySQL",
          "Install WordPress + MySQL"
        ]
      },
      "requirements": [
        "A stable internet connection is needed",
        "A machine running Linux/Mac/Windows is required",
        "No previous Docker experience needed",
        "Linux background is nice to have but not mandatory"
      ],
      "description": "This course requires you to download docker from the official Docker Repositories as well as images from Docker Hub. If you are a Udemy Business user, please check with your employer before downloading software.\nAre you tired of struggling to learn Docker? Does it feel too complicated or confusing? Have you heard about it but still don't fully understand what it's all about?\nThat ends here! By the end of this course, you'll become a Docker expert!\nLearning by doing is the most effective way to understand Docker, and this course is packed with hands-on exercises to help you master it. You'll build real-world applications like:\nMySQL\nPostgres\nJenkins\nWordPress\nPrestaShop\nMongoDB\nNginx & Apache\nSSL & Tomcat\nDrupal\n…and many more!\nYou'll cover essential topics such as:\nImages\nContainers\nVolumes\nNetworks\nDocker Compose\n…and much more!\nThis course doesn't just teach theory — you'll gain practical experience that you can immediately apply to real-world projects. Whether you're looking to advance your career, manage complex applications more efficiently, or simply understand how containers work, this course has everything you need. No matter your level of experience, you'll be guided step-by-step to ensure you fully understand each concept.\nWhat are you waiting for? Start your Docker journey now!",
      "target_audience": [
        "Developers who want to get in touch with Docker",
        "System Administrators willing to learn about containers",
        "DevOps Engineers looking for faster processes"
      ]
    },
    {
      "title": "Java Tutorial for Complete Beginners",
      "url": "https://www.udemy.com/course/java-tutorial/",
      "bio": "Learn to program using the Java programming language",
      "objectives": [
        "Learn to program in Java"
      ],
      "course_content": {
        "Introduction": [
          "Introduction and Installation",
          "What Java Is and How It Works",
          "Getting a Job and What to Study After Completing Basic Java",
          "How To Get The Most Out Of This Course"
        ],
        "Programming Core Java": [
          "A Hello World Program",
          "Using Variables",
          "Strings: Working With Text",
          "While Loops",
          "For Loops",
          "\"If\"",
          "Getting User Input",
          "Do ... While",
          "Switch",
          "Arrays",
          "Arrays of Strings",
          "Multi-Dimensional Arrays",
          "Classes and Objects",
          "Methods",
          "Getters and Return Values",
          "Method Parameters",
          "Setters and \"this\"",
          "Constructors",
          "Static (and Final)",
          "String Builder and String Formatting",
          "The toString Method",
          "Inheritance",
          "Packages",
          "Interfaces",
          "Public, Private, Protected",
          "Polymorphism",
          "Encapsulation and the API Docs",
          "Casting Numerical Values",
          "Upcasting and Downcasting",
          "Using Generics",
          "Generics and Wildcards",
          "Anonymous Classes",
          "Reading Files Using Scanner",
          "Handling Exceptions",
          "Multiple Exceptions",
          "Runtime vs. Checked Exceptions",
          "Abstract Classes",
          "Reading Files With File Reader",
          "Try-With-Resources",
          "Creating and Writing Text Files",
          "The Equals Method",
          "Inner Classes",
          "Enum Types: Basic and Advanced Usage",
          "Recursion: A Useful Trick Up Your Sleeve",
          "Serialization: Saving Objects to Files",
          "Serializing Arrays",
          "The Transient Keyword and More Serialization",
          "Passing by Value"
        ],
        "The Java Collections Framework": [
          "ArrayList: Arrays the Easy Way",
          "Linked Lists",
          "HashMap: Retrieving Objects via a Key",
          "Sorted Maps",
          "Sets",
          "Using Custom Objects in Sets and as Keys in Maps",
          "Sorting Lists",
          "Natural Ordering",
          "Queues",
          "Using Iterators",
          "Implementing Iterable",
          "Deciding Which Collection to Use",
          "Complex Data Structures"
        ],
        "Appendix": [
          "Eclipse Shortcuts",
          "Getting a Job Extended Version: What you need, a strategy for finding work, and my story.",
          "Ten Tips for Improving Your Coding",
          "Debugging in Eclipse"
        ],
        "What's New In Java 8?": [
          "Lambda Expressions"
        ],
        "Tests": [
          "Basic Java Programming: Test Your Knowledge"
        ],
        "Source Code": [
          "Source Code"
        ],
        "Bonus": [
          "Bonus: Learn Advanced Java"
        ]
      },
      "requirements": [
        "Basic fluency with computers"
      ],
      "description": "Learn to program in the Java programming language. This course assumes no prior programming knowledge, just a desire to learn to program.",
      "target_audience": [
        "Anyone who wants to learn Java"
      ]
    },
    {
      "title": "JavaScript Fundamentals: A Course for Absolute Beginners",
      "url": "https://www.udemy.com/course/javascript-fundamentals-a-course-for-absolute-beginners/",
      "bio": "Learn JavaScript Fundamentals from the Scratch",
      "objectives": [
        "Explain what is JavaScript and its environment contexts",
        "Understand the difference between JavaScript and EcmaScript",
        "Explain Data Types",
        "Describe the difference beween coercion and casting as well as JavaScript's implicit casting",
        "Explain Complex Data Types",
        "Discuss the basics of JavaScript: Rules of language and quirks",
        "Learn how to create your own objects",
        "Explain Control Flow",
        "Define Basic Functional Programming Statements",
        "Understand Error Handling"
      ],
      "course_content": {
        "JavaScript Fundamentals": [
          "Introduction to JavaScript",
          "Getting Started",
          "What is JavaScript",
          "ECMA Script",
          "JavaScript Debugger and Objects",
          "JavaScript Variables",
          "Primitives in JavaScript",
          "JavaScript Strings",
          "JavaScript Numbers",
          "JavaScript Booleans",
          "Check Your Understanding : 1",
          "Miscellaneous 1",
          "JavaScript Functions",
          "Arrays and Type of Arrays Used in JavaScript",
          "Importance of JSON in JavaScript",
          "Regular Expressions",
          "Usage of Dates in JavaScript",
          "Check Your Understanding : 2",
          "Miscellaneous 2",
          "Define Comparisons, Conditionals and Loops",
          "Conditionals control the logic flow in JavaScript",
          "Check Your Understanding : 3",
          "Miscellaneous 3",
          "Functioning programming concepts in JavaScript",
          "Errors: How to deal with Errors",
          "Final Project"
        ]
      },
      "requirements": [
        "Anyone with a passion for learning a new tool and who has completed at least high school education.",
        "Knowledge of programming language is not necessary but is an advantage."
      ],
      "description": "JavaScript is an excellent computer programming or script language from Netscape. It has a close resemblance in ways of its capability with Microsoft's Visual Basic, Sun's Tcl, the UNIX-derived Perl, and IBM's REXX. As a whole, script languages are easier and faster to code unlike the more structured and compiled languages such as C and C++. Though script languages take longer to process than compiled languages, they are very useful for shorter programs. JavaScript is lightweight and so is most commonly used as a part of web pages, whose implementations allow the web pages to be more user interactive.\nLiveScript as it was known earlier, JavaScript made its first appearance in Netscape 2.0. The core of the language has been implanted in Netscape, Internet Explorer, and other web browsers. JavaScript is designed majorly for creating network-centric applications. It balances and integrates with both Java and HTML. Client-side JavaScript is the most common form of the language. This helps in making a web page not just a static HTML, but more user interactive. User-initiated events such as button clicks, link navigation, and other actions that the user initiates openly or implicitly can be done using JavaScript. Apart from its increased interactivity, it provides rich interfaces to webpages and can provide immediate response to the visitors.  There is also lesser server interaction using JavaScript. JavaScript does not require any expensive tool to start working, a simple text editor like Notepad is enough.\nAll these qualities make it a very important tool for someone who is interested in creating dynamic web pages. Our course JavaScript Fundamentals will give the students a good idea on the basics of JavaScript.",
      "target_audience": [
        "Students with a little knowledge of JavaScript and want to learn it from the scratch."
      ]
    },
    {
      "title": "The Self-Taught Programmer",
      "url": "https://www.udemy.com/course/self-taught-programmer/",
      "bio": "The Definitive Guide to Programming Professionally",
      "objectives": [
        "Start to program in Python 3 and build your first program.",
        "Learn Object-oriented programming and create a powerful Python program to get you hooked.",
        "Learn to use tools like Git, Bash, and regular expressions. Then use your new coding skills to build a web scraper.",
        "Study Computer Science fundamentals like data structures and algorithms.",
        "Finish with best coding practices, tips for working with a team, and advice on landing your first programming job."
      ],
      "course_content": {
        "Part I Introduction to Programming": [
          "Welcome",
          "The Self-Taught Programmer Community",
          "Exercise Solutions",
          "Inspiration I",
          "Installing Python",
          "Getting Started",
          "Your first program",
          "Win One!",
          "Syntax Errors",
          "Intro to Programming",
          "Feedback",
          "Printing a Different String",
          "Math",
          "Calculate",
          "Data Types",
          "Arithmetic Operators",
          "Arithmetic Operators Exercise 1",
          "Arithmetic Operators Exercise 2",
          "Arithmetic Operators Exercise 3",
          "Comparison Operators",
          "Comparison Operators Exercise",
          "Logical Operators",
          "Logical Operators Exercise 1",
          "Logical Operators Exercise 2",
          "Statements",
          "Statements Exercise",
          "Functions",
          "Functions Exercise 1",
          "Functions Exercise 2",
          "Functions Exercise 3",
          "Built-In Functions",
          "Built-In Functions Exercise",
          "Win Two!",
          "Exceptions",
          "Exception Handling",
          "Type a Number",
          "Scope",
          "Lists",
          "Lists Exercise 1",
          "Lists Exercise 2",
          "Lists Exercise 3",
          "Tuples",
          "Tuples Exercise",
          "Dictionaries",
          "Dictionaries Exercise",
          "Containers in Containers",
          "Containers in Containers Exercise",
          "Strings Part I",
          "Strings Exercise 1",
          "Strings Exercise 2",
          "Strings Exercise 3",
          "Strings Exercise 4",
          "Strings Exercise 5",
          "Strings Part II",
          "Strings II Exercise 1",
          "Strings II Exercise 2",
          "Strings II Exercise 3",
          "Strings II Exercise 4",
          "For-Loops",
          "For-Loops Exercise 1",
          "For-Loops Exercise 2",
          "For-Loops Exercise 3",
          "While-Loops",
          "Guess a Number",
          "While-Loops Exercise",
          "Modules",
          "Modules Exercise",
          "Create a Module",
          "Files",
          "CSV Files",
          "CSV Movies",
          "Hangman",
          "Modify Hangman",
          "Win Three!"
        ],
        "Part II Introduction to Programming Paradigms": [
          "Inspiration II",
          "Procedural Programming",
          "Functional Programming",
          "Object-Oriented Programming",
          "The Four Pillars of OOP",
          "Four Pillars Exercise 1",
          "Four Pillars Exercise 2",
          "Try Inheritance",
          "More OOP",
          "More OOP Exercise 1",
          "More OOP Exercise 2",
          "More OOP Exercise 3",
          "Live Coding: E-commerce",
          "War",
          "Win Four!"
        ],
        "Part III Introduction to Programming Tools": [
          "Inspiration III",
          "Operating Systems",
          "Bash",
          "Practice Bash",
          "Vim",
          "Regular Expressions",
          "Practice Regular Expressions",
          "Match Two",
          "Package Managers",
          "Download a Package",
          "Version Control",
          "Live Coding: PyCharm",
          "Web Scraper",
          "Web Scraper Video Notes",
          "Create a GitHub Portfolio",
          "Win Five!"
        ],
        "Part IV Introduction to Computer Science": [
          "Inspiration IV",
          "Algorithms",
          "Big O Notation",
          "Combine Two Lists",
          "Recursion",
          "Binary Search",
          "Find the Duplicate",
          "Last Digit",
          "Last Digit Exercise",
          "Find the Intersection of Two Lists",
          "Algorithms Challenge",
          "Data Structures",
          "Data Structures Exercise 1",
          "Data Structures Exercise 2",
          "Hash Tables",
          "Linked Lists",
          "Create a Linked List",
          "Search a Linked List",
          "Win Six!"
        ],
        "Part V Land a Job": [
          "Inspiration V",
          "Best Practices",
          "Climbing the Freelance Ladder",
          "Creating the Perfect Freelance Profile",
          "Applying for Freelance Programming Jobs",
          "Landing Your First Full-Time Job",
          "Preparing for Your First Full-Time Job",
          "Next Steps",
          "Congratulations! Win Seven!"
        ]
      },
      "requirements": [
        "This course assumes you have no prior programming knowledge. It is for beginners!",
        "All you need to get started is a computer. Any computer will do!"
      ],
      "description": "I am a self-taught programmer. After a year of self-study, I learned to program well enough to land a job as a software engineer II at eBay. Once I got there, I realized I was severely under-prepared. I was overwhelmed by the amount of things I needed to know but hadn't learned yet. My journey learning to program, and my experience at my first job as a software engineer were the inspiration for this course.\n\n\nThis course is not just about learning to program; although you will learn to code. If you want to program professionally, it is not enough to learn to code; that is why, in addition to helping you learn to program, I also cover the rest of the things you need to know to program professionally that classes and books don't teach you. The Self-taught Programmer is a roadmap, a guide to take you from writing your first Python program, to passing your first technical interview. I divided the course into five sections:\n\n\n1. Learn to program in Python 3 and build your first program.\n2. Learn Object-oriented programming and create a powerful Python program to get you hooked.\n3. Learn to use tools like Git, Bash, regular expressions and databases. Then use your new coding skills to build a web scraper.\n4. Study Computer Science fundamentals like data structures and algorithms.\n5. Finish with tips for working with a team and landing a programming job.\n\n\nYou CAN learn to program professionally. The path is there. Will you take it?",
      "target_audience": [
        "New programmers.",
        "Anyone that wants to learn how to go from a complete beginner to a software engineer.",
        "Anyone that wants to learn to program to improve their career!"
      ]
    },
    {
      "title": "Python for beginners - Learn all the basics of python",
      "url": "https://www.udemy.com/course/python-for-beginners-learn/",
      "bio": "Learn how to program in python- python functions-python basic apps - python tips and tricks - Other Python features",
      "objectives": [
        "Learn how to use Python 3 the right way",
        "Understand complex functions in python",
        "Be able to use python on a daily basis",
        "Create your own basic programs with python"
      ],
      "course_content": {
        "Introduction": [
          "Getting Started with Python",
          "Variables and Multiple Assignment",
          "Playing with the print function",
          "Using variables in python",
          "String manipulation",
          "Different number manipulation",
          "Understanding the input function on python",
          "Practice part 1",
          "Practice part 2"
        ],
        "Part 2": [
          "Adding comments on your project",
          "The utility of functions",
          "How to use the return statement",
          "Understanding the if statement Part 1",
          "Understanding the if statement Part 2",
          "Understanding the if statement Part 3",
          "Working with lists",
          "Using functions with lists",
          "Difference between lists and tuples",
          "What is a dictionary in python",
          "Introduction to while loop structure",
          "Understanding For loops",
          "Practice : Creating and blocking passwords",
          "Practice: Testing combinations",
          "Creation of a basic encryption app",
          "Working with classes and objects",
          "Dealing with errors"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "Having a computer",
        "Wanting to learn programming in python",
        "no experience required"
      ],
      "description": "Programming can sometimes be very hard to learn especially if you have no experience in this field. But, this course have everything that you need to be able to start your programming career or improve your programming skills by learning all the basis of python. If you :\n- Are in school and want to learn how to program in python\n- Need to learn this programming language for work\n- Want to start a personal project that requires you to have programming knowledge\n- simply want to learn a new skill\nThen you will love this course. Not only you will have by the end of the course a very solid base of this programming language but you will also be able create small and simple application right after the course.\n\n\nThe structure of the course\nThe way the course is made is really done to help you learn all the basics of this programming language. From installing your text editor to writing your first lines of code to create your small apps everything is structured to help you achieve your goal of learning how to program in python. This course is also teach many python functions and formulas and give a complete understanding of those. The goal is really to help you have a complete understanding of this programming language. Indeed, the hardest part is not to learn the language but to think like a programmer and this is exactly what this course is going to teach you.\nAlso, this course has been built on a concept of learning by practice. In other words, in each class you will learn the theory about every concept and then you will have a lot of practice to help you reach your full potential and give you a better understanding of the topic. This way, by practicing you will be able to write lines of code by yourself and understand the logic behind each command that you write down.\n\n\nFor who is this course designed\nThere are many python courses out there, but this one is different. Indeed, this python course will teach you by example all the basics of this programming language. Also, since this course is an introduction it can be great for people who have never worked with python before. Indeed, even if you never programmed in your life this course will give you a solid basis about how to properly work with python. The goal of this course is teaching you how to think like a programmer and create small and basics python projects.\nWhy should I take this course\nIf you want to learn programming then you should definitely take the course. Not only you will have created a lot of small apps by the end of it you will also have a very good knowledge of different python concepts. Also you will understand the logic behind this programming language as well as many of it's functions.\nThere is no risk involved in taking this course\nThis course comes with a 100% satisfaction guarantee, this means that if your are not happy with what you have learned, you have 30 days to get a complete refund with no questions asked. Also, if there is any concept that you find complicated or you are just not able to understand, you can directly contact me and it will be my pleasure to support you in your learning.\n\n\nThis means that you can either learn amazing skills that can be very useful in your professional or everyday life or you can simply try the course and if you don't like it for any reason ask for a refund.\nYou can't lose with this type of offer !!\nENROLL NOW and start learning today",
      "target_audience": [
        "People interested to learn how to program in python",
        "people curious about programming"
      ]
    },
    {
      "title": "Get started with MATLAB and ChatGPT for scientific coding",
      "url": "https://www.udemy.com/course/matlab-programming-mxc/",
      "bio": "Learn the key MATLAB programming skills that separate experts from novices: debugging, functions, and visualization",
      "objectives": [
        "Introduction to MATLAB",
        "How to write scripts and functions",
        "Visualize data in 2D and 3D",
        "Control statements",
        "Develop your programming style",
        "Think like a programmer",
        "Find and fix bugs!",
        "Learn the most common coding mistakes and how to avoid them",
        "Strategies for planning and organizing your code"
      ],
      "course_content": {},
      "requirements": [
        "Prior experience with MATLAB is NOT necessary!",
        "But a bit of programming familiarity (in any language) will be helpful.",
        "Either MATLAB or Octave (a free MATLAB-like program) installed on your computer.",
        "Mathematics background is NOT necessary."
      ],
      "description": "Welcome to \"Get started with MATLAB for scientific coding\"!\nThis course is designed to revolutionize your journey to mastering MATLAB, one of the industry's leading programming languages for data visualization, numerical computation, and algorithm development.\nThis course is unique in that it integrates ChatGPT, a powerful AI language model developed by OpenAI, to support and enhance your learning experience.\n\n\nWho is this course for?\nWhether you're a student trying to grapple with MATLAB for your coursework, a researcher aiming to analyze large data sets, or a professional seeking to enhance your coding skills, this course is tailored for you. No prior programming knowledge is required -- I start from the basics and gradually build up to more complex topics.\n\n\nWhat will you learn?\nThis course takes a comprehensive and engaging approach to learning MATLAB, covering everything from the basics of MATLAB's desktop environment, variable types, scripts and functions, to data import/export, control statement architecture, and data visualization techniques.\nBut you won't stop there... you will be introduced to ChatGPT and learn how to utilize this AI tool effectively to aid your coding journey. ChatGPT can translate natural language into code, improve your code, help in choosing the right coding structures, assist in debugging, and even explain complex code in plain English! This unique blend of learning to code while having an AI assistant is a novelty that sets our course apart.\n\n\nThroughout the course, you will:\nUnderstand the MATLAB desktop environment and how to use MATLAB as a calculator\nLearn about different types of variables including numbers, strings, logic, and structures\nGain insights into the organization of scripts and functions, and the significance of function inputs and outputs\nDevelop skills to read and write data in MATLAB, text, and Excel formats\nMaster control statements such as if-else, for-loops, and while-loops\nLearn about data visualization and figure plotting in MATLAB\nGet introduced to coding errors and debugging strategies, including the FIP (find, inspect, plot) strategy\nAnd much more...\n\n\nCourse highlights:\nDetailed explanations of core MATLAB concepts with clear, visual examples\nPlenty of hands-on exercises and practical applications to solidify your understanding\nInteractive guidance from ChatGPT to assist with coding problems, debugging, and understanding complex concepts\nAccess to downloadable resources and code files for offline study and practice\n\n\nWhy choose this course?\nYour instructor, Mike (that's me!), brings over 20 years of experience teaching programming and data visualization. With a deep understanding of the hurdles that students face when learning MATLAB, I have designed this course not just to teach MATLAB, but to build strong, transferable programming skills. My teaching is complemented by ChatGPT, which is available for interactive programming help and guidance.\nBy the end of this course, you will not only be proficient in MATLAB programming, but also develop a strong understanding of scientific coding principles. Above all, you will learn how to work in tandem with AI tools like ChatGPT to enhance your coding skills and productivity.\nSo why wait? Enroll now and embark on a transformative journey of learning MATLAB with ChatGPT. I hope to see you soon in the course.",
      "target_audience": [
        "Students who need MATLAB for courses",
        "Scientists who need MATLAB for research",
        "Someone who will use MATLAB as a tool to understand math or engineering principles",
        "Experienced programmers who are new to MATLAB",
        "Anyone interested in learning about programming!"
      ]
    },
    {
      "title": "Concurrency in Go (Golang)",
      "url": "https://www.udemy.com/course/concurrency-in-go-golang/",
      "bio": "Learn the Why's and How's of concurrency in Go.",
      "objectives": [
        "How to spin Goroutines and communicate data between them.",
        "How to avoid Race conditions and Deadlocks.",
        "How to synchronize the execution of Goroutines.",
        "How Go Scheduler works.",
        "How to build streaming pipelines with Goroutines and Channels.",
        "How to propagate data across API boundary."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of Go Programming Language like loops, functions, methods.",
        "Installation of Go compiler and any IDE on the laptop."
      ],
      "description": "Questions that comes to all Developers is whether they are utilising the available Computing resource efficiently?\nCourse Overview\nThe course could be divided into five parts.\nConcurrency Primitives\nDeep Dive into Concurrency Primitives\nConcurrency Patterns\nContext Package\nBonus Section - Interfaces\nIn the course we try to answer these questions.\nConcurrency Primitives\nWhat are the limitations of Threads?\nWhat are advantages of goroutines over OS threads?\nHow do we avoid race condition?\nHow Channels are used to communicate data?\nHow do we implement timeout and non-blocking communication?\nWhen do we use mutex and channels?\nHow to synchronise execution of goroutines?\nHow to detect race condition in Go?\nDeep Dives into Concurrency Primitives\nHow Go scheduler works?\nHow does context switching works?\nHow channel send and receive works underneath?\nConcurrency Patterns\nHow to construct streaming pipelines with Goroutines and Channels?\nHow to Fan-out and Fan-in computationally intensive stages?\nHow do we avoid Goroutine Leaks?\nContext Package\nHow we can propagate request scoped data and cancellation signal across API boundaries?\nCoding Exercises\nEach concept is followed by a Coding Exercise.\nExercises blueprint are shared on Github.\nSample Applications\nWe will build\nBlueprint of web crawler.\nImage processing pipeline.\nHTTP Server Timeouts with Context Package.\nBonus Section - Interfaces\nHow to define common behaviour between different objects as abstract type?\nHow Interface provides an abstraction for higher level functions?",
      "target_audience": [
        "Students looking for Basic to Advanced Go Programming Concepts"
      ]
    },
    {
      "title": "Python Bootcamp 2025 | Learn Python Programming Masterclass",
      "url": "https://www.udemy.com/course/learn-python-programming-with-jafricode-tutorials/",
      "bio": "Complete Python Bootcamp | Learn Python Programming Masterclass with Practical Code (Notes + Source Code) in 99 Days.",
      "objectives": [
        "You will be 100% Cleared, How to work with Python Properly",
        "At the end of Course, you will become a Python Developer, just need to do practice",
        "You will learn, How to solve Real World Problems using Python Coding",
        "You will learn Complete Core Python topics as Basics, Operators, Data Types, Flow Control, Functions etc",
        "You will learn, how to Create a Project in Python for your practice",
        "You will get Python related Assignments and Tasks for your Programming Improvement",
        "You will get Special Support, if you face any issue while Learning with us",
        "You will be able to solve Real World Problems, if you do hard work and if you cleared topics as we discussed in this master Python programming course",
        "You will learn how to Create and Execute Python files in Different Methods",
        "You will be able to create a website project at the end of this Python Programming Course",
        "You will be able to learn python data science, python django, machine learning python and more advance Python based technology after this course",
        "You will learn python programming masterclass with theoratical concepts as well as practical",
        "Python bootcamp will be helpful for students to become a professioanl Python developer to work in Python based industries."
      ],
      "course_content": {
        "Very Very Important for Students": [
          "Big Updates Are Coming But Watch This First"
        ],
        "Python Course Introduction": [
          "Python Bootcamp Course Assistant: Ask & Learn",
          "Course Content",
          "Instructor Important Guidelines",
          "How to start this Python Course?",
          "Course Content"
        ],
        "Last Course Updates 01 October, 2025": [
          "New Updates"
        ],
        "Day 01 Python Programming with Basics": [
          "Introduction to Python Day 01",
          "Scope of Python - Day 01",
          "Examples of Python - Day 01",
          "Python Jobs Opportunities -Day 01",
          "Python Developers Salaries - Day 01",
          "Python Different Fields - Day 01",
          "Companies that Used Python - Day 01",
          "Next Topic for Day 02",
          "Day 01 Article",
          "Assignment Day 01"
        ],
        "Day 02 | Python Programming Installation": [
          "Difference between Python2 and Python3",
          "Download And Installation Of Python Day -02",
          "Python is Installed or Not",
          "Assignment Day 02",
          "Next Day Topic for Day 03",
          "Day 02 Article",
          "Setup and Versions | Roll Play"
        ],
        "Day 03 | Python Programming Hello World": [
          "Introduction to IDE",
          "Python Hello World Program using CMD Prompt",
          "Python Hello World Program using Notepad",
          "Python Hello World Program using Notepad p p",
          "Python Hello World Program using VS Code",
          "Assignment Day 03",
          "Day 03 Article",
          "Writing Your Hello World | Roll Play"
        ],
        "Day 04 | Python Programming I/O Function": [
          "Input and Output Function in Python",
          "Exercises 1",
          "Exercises 2",
          "Exercises 3",
          "Day 04 Article"
        ],
        "Day 05 | Python Programming Basic Concepts": [
          "Python2 and Python3 Practical",
          "Comments in Python",
          "What is Program in Python",
          "Statements in Python",
          "Separator in Python",
          "Indentation in Python",
          "Assignment Day 05",
          "Day 05 Article"
        ],
        "Extra Study P 02 | Solve Problems with Python Programming": [
          "04 Python Exercise with Solution with Algorithm including Assignment",
          "05 Python Exercise with Solution with Algorithm including Assignment",
          "06 Python Exercise with Solution with Algorithm including Assignment"
        ],
        "Day 06 | Python Programming Variables": [
          "What is Variable in Python",
          "Declaration and Initialization of Variable in Python",
          "What is Expression",
          "What is Undefined Variable in Python",
          "Types of Variables in Python",
          "Assignment Day 06",
          "Day 06 Article"
        ]
      },
      "requirements": [
        "There is no prerequisite for learning Python but it is best to have already knowledge of programming language as data types, variables, if-else, loops, function, etc",
        "You did not need to buy any software etc for this course",
        "You did not to learn any other programming langauge like C, C++, PHP etc",
        "You should have to hard-working and make practices and write Python code with me, this the main requirement for this course",
        "You should have your laptop or mobile phone to get video lectures and attempt assignments + Quiz"
      ],
      "description": "2025 Python Bootcamp | Learn Python Programming Masterclass\nAre you ready to master Python programming and take your coding skills to the next level? Welcome to the 2025 Python Bootcamp – Learn Python Programming Masterclass! Whether you’re a beginner or an experienced programmer, this course will guide you step by step to become a confident Python developer. From data science projects to Django web applications, this course has everything you need to succeed.\nWhy You Should Enroll in This Python Bootcamp\nPython is one of the most versatile and powerful programming languages today. Used in data science, AI, web development, automation, and more, Python skills are highly in demand. In this Learn Python Programming Masterclass, you will:\nLearn Python from scratch with real examples and projects\nExplore advanced Python programming concepts for practical applications\nGain hands-on experience in NumPy, Pandas, Tkinter, and Django\nFollow a structured 100 Days of Code approach to strengthen your skills daily\nBenefit from insights inspired by top instructors like Angela Yu\nWith 40+ hours of video lectures, quizzes, and mini projects, this masterclass ensures that you don’t just learn Python—you apply it in real-world scenarios.\nWhat’s New in This 2025 Python Bootcamp?\nWe continuously update this course to make sure you learn the most relevant and in-demand Python skills:\nPandas with Programming Examples – Manipulate and analyze data like a pro\nNumPy – Master numerical computations and advanced math operations\nOpenpyXL for Excel – Automate Excel tasks effortlessly\nPython Mini Projects – Apply concepts in real-world scenarios\nAdvanced Python Programming Concepts – Hands-on exercises with examples\nPython Automation & Tkinter Projects – Build GUI applications and automate tasks\nPython Django Framework – Develop dynamic and interactive websites\n100 Days of Python Coding Challenges – Learn Python consistently and efficiently\nWho Is This Course For?\nThis Python Bootcamp is perfect for:\nBeginners who want to learn Python programming from scratch\nProgrammers aiming to level up their skills in data science, AI, or Django web development\nStudents and professionals who want to follow a 100 Days of Code roadmap\nAnyone inspired by instructors like Angela Yu and looking for practical, hands-on learning\nWhat Will You Learn in This Masterclass?\nBy the end of this Learn Python Programming Masterclass, you will be able to:\nWrite efficient Python code using loops, functions, and advanced constructs\nUse NumPy and Pandas for data analysis and visualization\nAutomate tasks with Python and build your own applications\nDevelop desktop apps using Tkinter\nCreate dynamic web applications with Django\nComplete 100 Days of Code challenges to solidify your learning\nBuild a portfolio with mini projects and real-world applications\nAdvantages of Enrolling\nWhen you enroll in this course, you get:\nFull video lectures with practical examples\nStep-by-step problem solutions and assignments\nDownloadable notes and source code\nLifetime access with updates included\nSpecial support from the instructor for guidance and mentorship\nAfter Completing This Python Bootcamp\nYou will have the skills and confidence to:\nBuild Python-based applications, websites, and games\nUse Python in data science, machine learning, and AI projects\nDevelop projects using Django and Flask frameworks\nContribute to open-source Python projects\nFreelance and offer Python solutions to clients\nAutomate tasks and increase productivity in your personal and professional projects\nTeach or consult others in Python programming\nMotivation to Enroll\nWith Python’s growing popularity in tech, data science, AI, and web development, there has never been a better time to start learning. Join thousands of students worldwide, follow the 100 Days of Code roadmap, and gain hands-on experience inspired by top instructors like Angela Yu.\nEnroll today in the Learn Python Programming Masterclass and start your journey to becoming a confident, skilled Python developer!",
      "target_audience": [
        "The Master in Python Programming course is for those interested students who want to become a good Python Developer",
        "Also, this course is for those students who want to improve their programming skill",
        "This course is for those students who want to learn artificial intelligence, data science, data analysis, and web development. After this course, they will be able to do that."
      ]
    },
    {
      "title": "The Complete Java Certification Course",
      "url": "https://www.udemy.com/course/master-practical-java-development/",
      "bio": "Become a confident industry ready core Java developer and get certified as a Java professional!",
      "objectives": [
        "How to write Java Programs from scratch and have loads of fun in the process",
        "Go from zero to hero in writing industry ready Java programs",
        "Gain enough experience to pass a core Java Programming interview and perform well on the job",
        "Be prepared to take the Java Certification Exam for OCAJP 1Z0-808"
      ],
      "course_content": {
        "Introduction": [
          "Course Overview",
          "Join our Online Community (Discord)"
        ],
        "Development Environment Setup": [
          "Download and Install JDK",
          "Download Latest version of Eclipse",
          "Dedicated TA Support",
          "Setup Java and Eclipse (Windows)",
          "How to Proceed in this Course"
        ],
        "Getting Started": [
          "What is a computer program",
          "Lecture 2: First Java Program"
        ],
        "The Very Basics of Java": [
          "Lecture 3: Variables and Data Types",
          "Lecture 4: More on Data Types",
          "Lecture 5: Working with Arrays",
          "Lecture 6: Control Flow using if-else and switch statements"
        ],
        "Coding Exercises: Basics of Java": [
          "Print Hello World...",
          "Fixing a Junior Developer’s Buggy Code",
          "Identify Odd or Even and Print a Message",
          "Day of the Week",
          "Welcome Bot Simulator Part 1 (Beginner Level)",
          "Welcome Bot Simulator Part 2: Guest Type Detector (Intermediate Level)"
        ],
        "Understanding Methods": [
          "Lecture 7: Methods in Java",
          "Lecture 8: Method Visibility and Static vs. Instance"
        ],
        "Coding Exercises: Methods": [
          "Find the Number of Days in a Month and the Season",
          "Grade the Student and Validate the Leap year",
          "Check the Valid Triangle and Traffic Light",
          "Type Conversion",
          "Basic Operators"
        ],
        "Understanding Object Orientation": [
          "Lecture 9: Class and Object",
          "Lecture 10: Program Flow",
          "Lecture 11: Program Structure and Application Runtime",
          "Lecture 12: Java Stack + Heap with Reference Variables",
          "Lecture 13: Class Inheritance",
          "Career Advice",
          "Lecture 14: Interfaces",
          "Lecture 15: Abstract Classes",
          "Application Runtime Quiz",
          "Interfaces and Abstract Classes Quiz"
        ],
        "Coding Exercises: Object Oriented Programming": [
          "Student Information Management (v1.0)",
          "Multiple Student Info Management (v2.0)",
          "Update Student Age (v3.0)",
          "Animal and Dog",
          "Printable Book",
          "Shape Area"
        ],
        "Putting it Together with Strings, Nested Loops and Debugging": [
          "Lecture 16: Working with Strings",
          "Lecture 17: While Loops",
          "Lecture 18: For Loops",
          "Lecture 19: Nested For Loops and Debugger"
        ]
      },
      "requirements": [
        "A computer with Windows or Mac operating system (I provide instructions on how to setup the dev environment for each)",
        "The desire to learn the most popular programming language in the world - Java",
        "No other prerequisites"
      ],
      "description": "Welcome to the Complete Java Certification Course!\nAre you a complete beginner aiming to learn Java from scratch?\nDo you want to build robust applications or confidently tackle coding interviews?\nHave you struggled with understanding Object-Oriented Programming (OOP) or modern Java features like Lambdas and Streams?\nDo you need a hands-on course that bridges theory and real-world application?\nIf you answered yes to any of these questions, you’re in the right place. This course is carefully crafted to help you become a job-ready Java developer and succeed in certification exams.\nWhat Makes This Course Stand Out?\nComprehensive & Practical: We cover everything from Java fundamentals to advanced topics like multi-threading, JDBC, and functional programming with Lambdas and Streams.\nHands-On Projects: Reinforce your skills by working on practical assignments—like building a car dealership management system or processing stock market data.\nBeginner-Friendly: No prior programming experience? No worries! We guide you through every core concept, ensuring a strong foundation in Java.\nClear Explanations & Step-by-Step Guidance: Complex topics such as concurrency or generics are broken down into easy-to-understand lessons.\nJob-Ready Skills: By the end of the course, you’ll master the Java Programming language, learn how to apply it effectively to solve problems and enhance your career prospects.\nWhy This Course Is Essential:\nThe Complete Java Certification Course is designed to help you master the most in-demand and critical components for becoming a Core Java developer. Especially if you're going for a job interview or have a Java Project that needs your best performance. This course assumes no prior Java experience so prior Java so it will take you from zero to hero!\nThe topics covered include Object Orientation which I think is not stressed enough in other Java courses so I've got a special focus on that throughout the lectures. You'll get plenty of practice writing classes and interfaces as well as countless methods with loops and if-else statements, Exception Handling and File Processing as well as how to debug software using Eclipse. You'll also be mastering the Collections Framework and diving deep into Java Generics. You'll learn all there is to know about Multi-Threading and the JDBC API for working with a MySQL Database.\nThere are also Practical Projects scattered throughout the course so that you can practice the concepts as you learn them. For example one of the projects is related to a car dealership management system and another assignment involves processing files with stock market data. So as you can see, I tried to keep the projects professional and industry-relevant rather than cloning a game like Flappy Bird.\nI want this course to be the ultimate go-to resource for anyone who is looking to become a core Java programmer so I intend on adding more content to this course based on new technologies and student feedback. The content is Java 9 ready which means I'll show you how to upgrade to the latest version of Java which is version 9 and I'll teach you how to configure Eclipse to work with both Java 8 as well as version 9.\nLatest updates include Lambdas and Streams with Java 9 Features.\nImportant Announcement: This course will be constantly updated with more assignments, quizzes, and lectures to enrich your knowledge of Java.\n\n\nTopics covered in the Complete Java Certification Course:\nJava Basics\nVariables\nData Types\nArrays\nControl Flow\nMethods and Method Visibility\nObject-Oriented Programming in Java\nClasses and Objects\nProgram Flow, Structure and Constructors\nApplication Runtime\nJava behind-the-scenes\nClass Inheritance\nInterfaces\nAbstract Classes\nConnecting the dots\nStrings\nWhile, For Loops, and Nested For Loops\nDebugging 101\nPRACTICAL PROJECT: Car Dealership\nBuilding and Deploying Java Programs with JAR Files\nCloning Java Objects\nJava Comparable Interface\nSerialization in Java\nCompile Java Programs with Command Line\nCreate and Deploy Executable Programs using JARs\nCreate JAR File with Command Line\nFile Processing\nFile Processing with Exception Handling and Keyboard Input\nBuffered File Reader with Try Catch and Finally\nTry with Resources and the AutoCloseable Interface\nThe Collections Framework\nLists and Custom Types\nHashSet, LinkedHashSet and Hashcode\nCollection Methods\nComparable Interface\nHashMap, LinkedHashMap and TreeMap\nPRACTICAL PROJECT: Stock Market Data Processor\nJava Generics with Wildcards\nPRACTICAL PROJECT: Data Analytics Processor\nConcurrency in Java\nThreads and Runnable Interface\nThread Safety Using Synchronization\nProducer Consumer Pattern Using (1) wait() and notify() and (2) BlockingQueue\nThread Pools and Executor Framework\nJDBC API (Java Database Connectivity)\nJShell and Java 9 Features\nLambda Expressions\nFunctional Interfaces\nLambdas with practice assignments\nStreams API\n\n\nKey Benefits of Java Mastery\nVersatility & Demand: Java powers everything from enterprise applications to Android development. Mastering it opens up numerous career paths.\nStrong Foundation: A solid grasp of OOP, data handling, and concurrency sets you up to learn any new language or framework with ease.\nHigh Earning Potential: Skilled Java developers remain in high demand across multiple industries.\nReal-World Skills: Practical projects and industry-relevant examples ensure you can hit the ground running in any Java-related role.\n\n\nIMPORTANT NOTE FOR STUDENTS:\nEvery exercise and its solution are provided directly in the lectures.\nIn several lectures, I ask students to pause the video and complete the assignment before resuming to watch my solution.\nMAKE SURE YOU WORK OUT THE PROBLEMS ON YOUR OWN BEFORE MOVING ON TO MY SOLUTION!!\n\n\nSTUDENT REVIEWS\nWith over 105,000 enrolled students and a 4.5 star-rating, this is a Udemy best-selling course.\nDon’t just take it from me, take it from other students who have taken this course.\n★★★★★ Here are reviews from real students who took this course ★★★★★\n★★★★★ Instructions are very clear and easy to follow. I know nothing about java and so far I’m keeping up just fine.\n★★★★★ Easy to understand the difficult topics as well. Overall nice course. Learnt the basic java concepts very well and also collections framework and JDBC topics are also very nicely explained.\n★★★★★ The explanation of each concept is done very well. This is a great course for beginners.\n★★★★★ This course is awesome! The teacher is very thorough with his explanations of the theory and application. I'm really enjoying it!\n★★★★★ Yes it is for sure the best!! As it covers all the topic from basic to advanced topics in java.\n★★★★★ I am taking my second semester of Java programming at university. I signed up for this course to augment my university studies. I learn more from this one course with a better understanding of programming principles than I have learned at university.The university gives me college credit; this course will get me a job!\n★★★★★ I'm taking a class about object-oriented programming in relation to Java. However, the reading material uses quite a bit of technical lengthy jargon that I simply get confused. This class has been extremely helpful in presenting concepts in a straightforward and simple way. I can understand what he's explaining and it makes sense. This is a fantastic course and I'd recommend it to anyone who is feeling discouraged about learning about object-oriented programming.\n★★★★★ Congratulations – the instructor has turned complicated topics into easy interactive components. High praises to the instructor are in order. The instructor was very knowledgeable, worked at a good pace, and most importantly, was very good at communicating.\n\n\nKEY TAKEAWAY\nDon’t miss the opportunity to build a strong foundation in Java—a versatile, high-demand language used by top companies worldwide. By the end of this course, you’ll have the confidence, knowledge, and practical skills to develop robust Java applications, excel in interviews, and even pursue official Java certifications.\nI'm confident that you'll enjoy this course at least as much if not more than my other popular Java courses, but as always you've got a 30 day money back guarantee no questions asked! Check out the preview lectures and join today!\nEnroll now and take the first step toward mastering Core Java for a successful programming career!",
      "target_audience": [
        "Anyone interested in breaking into the Java development career",
        "Anyone with the desire to learn Java development",
        "Anyone who would like to be an Oracle certified Java developer"
      ]
    },
    {
      "title": "Ultimate Rust 2: Intermediate Concepts",
      "url": "https://www.udemy.com/course/ultimate-rust-2/",
      "bio": "Rust for the daily practitioner",
      "objectives": [
        "How to write idiomatic, well-tested, documented Rust code",
        "Threads, channels, closures, iterators, code documentation, std library traits, error handling, testing, benchmarks, logging, attributes, turbofish and more!",
        "Rust concepts beyond the fundamentals taught in the \"Ultimate Rust Crash Course\"",
        "How to use Rust to make video game prototypes"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Exercises Overview"
        ],
        "Lectures & Exercises": [
          "Idiomatic Code",
          "Exercise - Idiomatic Code",
          "Documentation",
          "Exercise - Documentation",
          "Publishing",
          "Exercise - Publishing",
          "Iterators",
          "Closures",
          "Exercise - Closures & Iterators",
          "Common Traits",
          "Exercise - Traits",
          "Creating Errors",
          "Handling Errors",
          "Exercise - Errors",
          "Unit Tests",
          "Integration Tests",
          "Benchmarks",
          "Exercise - Testing",
          "Logging",
          "Exercise - Logging",
          "Multithreading",
          "Channels",
          "Exercise - Threads & Channels"
        ],
        "Project: Game Prototype with Rusty Engine": [
          "Project Overview",
          "Tutorial: Configuration",
          "Tutorial: Engine Initialization",
          "Tutorial: Game State",
          "Tutorial: Game Logic Function",
          "Tutorial: Sprites",
          "Tutorial: Colliders",
          "Tutorial: Keyboard Input",
          "Tutorial: Mouse Input",
          "Tutorial: Text",
          "Tutorial: Audio",
          "Tutorial: Timer",
          "Tutorial: Engine & Game Structs",
          "Game Walkthrough: Common Setup",
          "Game Walkthrough: Road Race"
        ]
      },
      "requirements": [
        "A beginner's knowledge of Rust (taking the \"Ultimate Rust Crash Course\" is recommended)",
        "Intermediate+ experience with general programming concepts and languages.",
        "Rust installed and ready to use - this is a hands-on course!"
      ],
      "description": "Join Nathan Stocks for a fast-paced, entertaining, curiously-informative, hands-on even deeper dive into the Rust programming language. This is the second course in the Ultimate Rust series following the Ultimate Rust Crash Course. If you like that course, you'll love this one!\nThis is a hands-on course! Not only are there targeted exercise for each topic discussed, there are also a series of project scenarios that walk you through using what you've learned to put together playable game prototypes that work on macOS, Linux, and Windows!  These projects will make use of Rusty Engine, a game engine developed specifically for this course to keep game engine concepts to a minimum so you can focus on using exactly what you learned in this course.\nRust is a systems programming language that eliminates entire classes of bugs and security vulnerabilities, has zero-cost abstractions like C and C++, is fun to program in, and lets systems programmers have nice things. No wonder Rust is gaining traction in spaces as diverse as game engines, high-performance computing, embedded devices, and web programming! Learn how to write high-performance code without the worry of crashes or security vulnerabilities. Join a vibrant community of developers where diversity, inclusion, and just plain being nice are all first-class objectives.",
      "target_audience": [
        "Experienced systems programmers, software developers, engineers, wizards, warriors, and hobbits",
        "Any developer who needs to run code fast, efficiently, securely, under tight restraints, or with a minimum of bugs.",
        "Anyone planning to use Rust frequently"
      ]
    },
    {
      "title": "JavaScript Algorithms and Data Structures Masterclass",
      "url": "https://www.udemy.com/course/js-algorithms-and-data-structures-masterclass/",
      "bio": "The Missing Computer Science and Coding Interview Bootcamp",
      "objectives": [
        "Learn everything you need to ace difficult coding interviews",
        "Master dozens of popular algorithms, including 6 sorting algorithms!",
        "Implement 10+ data structures from scratch",
        "Improve your problem solving skills and become a stronger developer"
      ],
      "course_content": {
        "Introduction": [
          "Curriculum Walkthrough",
          "Join The Community!",
          "What Order Should You Watch In?",
          "How I'm Running My Code",
          "Download All Slides Here!"
        ],
        "Big O Notation": [
          "Intro to Big O",
          "Timing Our Code",
          "Counting Operations",
          "Visualizing Time Complexities",
          "Official Intro to Big O",
          "Simplifying Big O Expressions",
          "Big O Time Complexity Quiz",
          "Big O Time Complexity Quiz 2",
          "Space Complexity",
          "Big O Space Complexity Quiz",
          "Logs and Section Recap"
        ],
        "Analyzing Performance of Arrays and Objects": [
          "PREREQUISITES",
          "Section Introduction",
          "The BIG O of Objects",
          "Object Operations Quiz",
          "When are Arrays Slow?",
          "Big O of Array Methods",
          "Array Operations Quiz"
        ],
        "Problem Solving Approach": [
          "PREREQUISITES",
          "Introduction to Problem Solving",
          "Step 1: Understand The Problem",
          "Step 2: Concrete Examples",
          "Step 3: Break It Down",
          "Step 4: Solve Or Simplify",
          "Step 5: Look Back and Refactor",
          "Recap and Interview Strategies"
        ],
        "Problem Solving Patterns": [
          "PREREQUISITES",
          "Intro to Problem Solving Patterns",
          "Frequency Counter Pattern",
          "Frequency Counter: Anagram Challenge",
          "Frequency Counter - validAnagram",
          "Anagram Challenge Solution",
          "Multiple Pointers Pattern",
          "Multiple Pointers: Count Unique Values Challenge",
          "Multiple Pointers - countUniqueValues",
          "Count Unique Values Solution",
          "Sliding Window Pattern",
          "Divide And Conquer Pattern"
        ],
        "100% OPTIONAL Challenges": [
          "IMPORTANT NOTE!",
          "Frequency Counter - sameFrequency",
          "Frequency Counter / Multiple Pointers - areThereDuplicates",
          "Frequency Counter - constructNote",
          "Frequency Counter - findAllDuplicates",
          "SOLUTIONS PART 1",
          "Multiple Pointers - averagePair",
          "Multiple Pointers - isSubsequence",
          "Frequency Counter / Multiple Pointer - findPair",
          "SOLUTIONS PART 2",
          "Sliding Window - maxSubarraySum",
          "Sliding Window - minSubArrayLen",
          "Sliding Window - findLongestSubstring",
          "SOLUTIONS PART 3",
          "Divide and Conquer - countZeroes",
          "Divide and Conquer - sortedFrequency",
          "Divide and Conquer - findRotatedIndex",
          "SOLUTIONS PART 4"
        ],
        "Recursion": [
          "PREREQUISITES",
          "Story Time: Martin & The Dragon",
          "Why Use Recursion?",
          "The Call Stack",
          "Our First Recursive Function",
          "Recursion Quiz",
          "Our Second Recursive Function",
          "Writing Factorial Iteratively",
          "Writing Factorial Recursively",
          "Common Recursion Pitfalls",
          "Helper Method Recursion",
          "Pure Recursion"
        ],
        "Recursion Problem Set": [
          "START HERE!",
          "power",
          "factorial",
          "productOfArray",
          "recursiveRange",
          "fib",
          "SOLUTIONS FOR THIS SECTION"
        ],
        "Bonus CHALLENGING Recursion Problems": [
          "NOTE ON THIS SECTION",
          "reverse",
          "isPalindrome",
          "someRecursive",
          "flatten",
          "SOLUTIONS PART 1",
          "capitalizeFirst",
          "nestedEvenSum",
          "capitalizeWords",
          "stringifyNumbers",
          "collectStrings",
          "SOLUTIONS PART 2"
        ],
        "Searching Algorithms": [
          "PREREQUISITES",
          "Intro to Searching",
          "Intro to Linear Search",
          "Linear Search Exercise",
          "Linear Search Solution",
          "Linear Search BIG O",
          "Intro to Binary Search",
          "Binary Search PseudoCode",
          "Binary Search Exercise",
          "Binary Search Solution",
          "Binary Search BIG O",
          "Naive String Search",
          "Naive String Search Implementation"
        ]
      },
      "requirements": [
        "Basic knowledge of JavaScript syntax",
        "NO experience with data structures or computer science needed!"
      ],
      "description": "Updated with a brand new section on Dynamic Programming!\nThis course crams months of computer science and interview prep material into 20 hours of video. The content is based directly on the last semester of my in-person coding bootcamps, where my students go on to land 6-figure developer jobs. I cover the exact same computer science content that has helped my students ace interviews at huge companies like Google, Tesla, Amazon, and Facebook. Nothing is watered down for an online audience; this is the real deal :)   We start with the basics and then eventually cover “advanced topics” that similar courses shy away from like Heaps, Graphs, and Dijkstra’s Shortest Path Algorithm.\nI start by teaching you how to analyze your code’s time and space complexity using Big O notation.  We cover the ins and outs of Recursion.  We learn a 5-step approach to solving any difficult coding problem. We cover common programming patterns. We implement popular searching algorithms. We write 6 different sorting algorithms: Bubble, Selection, Insertion, Quick, Merge, and Radix Sort.   Then, we switch gears and implement our own data structures from scratch, including linked lists, trees, heaps, hash tables, and graphs.  We learn to traverse trees and graphs, and cover Dijkstra's Shortest Path Algorithm.  The course also includes an entire section devoted to Dynamic Programming.\nHere's why this course is worth your time:\nIt's interactive -  I give you a chance to try every problem before I show you my solution.\nEvery single problem has a complete solution walkthrough video as well as accompanying solution file.\nI cover helpful \"tips and tricks\" to solve common problems, but we also focus on building an approach to ANY problem.\nIt's full of animations and beautiful diagrams!\nAre you looking to level-up your developer skills? Sign up today!",
      "target_audience": [
        "Anyone preparing for programming interviews",
        "Anyone interested in improving their problem solving skills",
        "Anyone looking to become a better developer!"
      ]
    },
    {
      "title": "Learn Multithreading with Modern C++",
      "url": "https://www.udemy.com/course/learn-modern-cplusplus-concurrency/",
      "bio": "Learn how to write portable threaded C++ code which unleashes the power of modern multi-processor hardware!",
      "objectives": [
        "How to write portable multi-threaded code in C++",
        "Basic principles of multi-threading which will be applicable in all languages",
        "Understanding of concurrency",
        "Knowledge of C++17 parallel algorithms"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Lecturer Introduction",
          "Guide to Exercises and Source Code"
        ],
        "Review of Modern C++ Features": [
          "Modern C++ Overview Part One",
          "Modern C++ Overview Part Two",
          "Modern C++ Overview Part Three",
          "Modern C++ Overview Part Four",
          "Modern C++ Overview Part Five"
        ],
        "Introduction to Concurrency": [
          "Concurrency Introduction",
          "Concurrency Motivation",
          "Concurrency Overview",
          "Threaded Program Structure",
          "A Brief History of C++ Concurrency",
          "Launching a Thread",
          "Launching a Thread",
          "Thread Function with Arguments",
          "Computer with Single Processor",
          "Computer with Single Processor and Cache",
          "Computer with Multiple Processors",
          "Synchronization Issues"
        ],
        "Getting Started with Threads": [
          "System Thread Interface",
          "The C++ Thread Class",
          "Managing a Thread",
          "Multiple Threads",
          "Data Races",
          "Data Races",
          "Data Race Consequences"
        ],
        "Working with shared data": [
          "Critical Sections",
          "Mutex Introduction",
          "Mutex Class",
          "Internally Synchronized Class",
          "Lock Guard",
          "Unique Lock",
          "Timeouts and Mutexes",
          "Multiple Reader,Single Writer",
          "Shared Mutexes",
          "Shared Data Initialization",
          "Thread-local Data",
          "Lazy initialization",
          "Double-checked Locking",
          "Deadlock",
          "Deadlock Practical",
          "Deadlock Avoidance",
          "Deadlock Avoidance Practical",
          "Livelock",
          "Livelock Practical",
          "Livelock",
          "Mutex Conclusion"
        ],
        "Thread Synchronization": [
          "Thread Coordination",
          "Thread Coordination Practical",
          "Condition Variables",
          "Condition Variables",
          "Condition Variables with Predicate",
          "Condition Variable Practical",
          "Futures and Promises Overview",
          "Future and Promise Classes",
          "Futures and Promises Examples",
          "Promises with Multiple Waiting Threads"
        ],
        "Atomic Types": [
          "Integer Operations and Threads",
          "Atomic Types",
          "Double-checked Locking Reprise",
          "Atomic Operations",
          "Lock-free Programming",
          "Lock-free Programming Continued",
          "Lock-free Programming Practical",
          "Lock-free Programming Practical Continued"
        ],
        "Asynchronous Programming": [
          "Asynchronous Programming",
          "Packaged Task",
          "Packaged Task Assignment",
          "The async Function",
          "The async Function and Launch Options",
          "Choosing a Thread Object"
        ],
        "Parallelism": [
          "Parallelism Overview",
          "Parallelism Overview Continued",
          "Data Parallelism Practical",
          "Standard Algorithms Overview",
          "Execution Policies",
          "Algorithms and Execution Policies",
          "New Parallel Algorithms",
          "New Parallel Algorithms Continued",
          "Parallel Algorithms Practical",
          "New Parallel Algorithms Conclusion"
        ],
        "Practical Data Structures for Concurrent Programming": [
          "Data Structures and Concurrency",
          "Shared Pointer",
          "Monitor Class",
          "Monitor Class Continued",
          "Semaphore",
          "Concurrent Queue",
          "Concurrent Queue with Condition Variable",
          "Thread Pools",
          "Thread Pool Basic Implementation",
          "Thread Pool with Multiple Queues",
          "Thread Pool with Work Stealing",
          "Thread Pool with Work Stealing Continued"
        ]
      },
      "requirements": [
        "Familiarity with Advanced Modern C++ features such as lambda expressions and move semantics",
        "Access to C++11 compiler (C++14 preferred.) Parallel algorithms require C++17",
        "Intended for students who have taken my courses \"Learn Advanced Modern C++\" or \"Update to Modern C++\"",
        "Proficiency in English (B2 level, preferably C1)"
      ],
      "description": "Please note that this course is currently being updated. All the videos are being re-recorded, and new material will be added. I will try to minimize disruption, but there may be times when it is unavoidable.\nMultithreading is used in many areas of computing, including graphics processing, machine learning and Internet stores. An understanding of threads is essential to make full use of the capabilities of modern hardware.\nC++ now provides direct support for threads, making it possible to write portable multithreaded programs which have well-defined behaviour, without requiring any external libraries.\nThis course thoroughly covers the basics of threading and will prepare you for more advanced work with threads. Source code is provided for all the examples. No previous knowledge of threading is required, but you should be comfortable with programming in C++ at an intermediate level, using \"Modern\" features such as smart pointers and move semantics.\nWe start with the concepts of multithreading and learn how to launch threads in C++. We look at the problems which can occur with multiple threads and how to avoid them.\nC++ provides tools which allow us to work at a higher level of abstraction than system threads which share data; we cover condition variables and promises with futures. We will also look at asynchronous, lock-free and parallel programming, including atomic variables and the parallel algorithms in C++17. We will finish the course by implementing a concurrent queue and thread pool, which will bring together the material you have learnt.\nThere are downloadable exercises for each video, with solutions, so you can check your understanding as you learn, gaining familiarity and confidence with the material. There are also some optional assignments, which are more challenging.\nI will be actively supporting the course. I will respond promptly if you have any questions or experience difficulties with the course content. Please feel free to use the Q&A feature or alternatively you can send me a private message.",
      "target_audience": [
        "Programmers with a good knowledge of C++ but little or no exposure to multithreading"
      ]
    },
    {
      "title": "Learn Python Programming Masterclass",
      "url": "https://www.udemy.com/course/python-the-complete-python-developer-course/",
      "bio": "This Python For Beginners Course Teaches You The Python Language Fast. Includes Python Online Training With Python 3",
      "objectives": [
        "Have a fundamental understanding of the Python programming language.",
        "Have the skills and understanding of Python to confidently apply for Python programming jobs.",
        "Acquire the pre-requisite Python skills to move into specific branches - Machine Learning, Data Science, etc..",
        "Add the Python Object-Oriented Programming (OOP) skills to your résumé.",
        "Understand how to create your own Python programs.",
        "Learn Python from experienced professional software developers.",
        "Understand both Python 2 and Python 3."
      ],
      "course_content": {},
      "requirements": [
        "You’ve either already got it or it’s FREE. Here’s the checklist:",
        "A computer - Windows, Mac, and Linux are all supported. Setup and installation instructions are included for each platform.",
        "Your enthusiasm to learn this go-to programming language. It’s a valuable lifetime skill which you can’t un-learn!",
        "Everything else needed to start programming in Python is already included in the course."
      ],
      "description": "Whether you want to:\n- build the skills you need to get your first Python programming job\n- move to a more senior software developer position\n- get started with Machine Learning, Data Science, Django or other hot areas that Python specialises in\n- or just learn Python to be able to create your own Python apps quickly.\n…then you need a solid foundation in Python programming. And this course is designed to give you those core skills, fast.\nThis course is aimed at complete beginners who have never programmed before, as well as existing programmers who want to increase their career options by learning Python.\nThe fact is, Python is one of the most popular programming languages in the world – Huge companies like Google use it in mission critical applications like Google Search.\nAnd Python is the number one language choice for machine learning, data science and artificial intelligence. To get those high paying jobs you need an expert knowledge of Python, and that’s what you will get from this course.\nBy the end of the course you’ll be able to apply in confidence for Python programming jobs. And yes, this applies even if you have never programmed before. With the right skills which you will learn in this course, you can become employable and valuable in the eyes of future employers.\nHere’s what a few students have told us about the course after going through it.\n“I had very limited programming experience before I started this course, so I have really learned a lot from the first few sections. It has taken me from essentially zero programming skill to a level where I'm comfortable using Python to analyze data for my lab reports, and I'm not even halfway done the course yet. There are other courses out there which focus on data analysis, but those courses are usually targeted at people who already know how to program which is why I chose this course instead. “ – Christian DiMaria\n\n“I have been puttering through your Python course . In that time, though, and without finishing it yet I've been able to automate quite a bit at my work. I work in a school system and unifying data from our various student information systems can be incredibly frustrating, time consuming, and at times challenging. Using your course, I've learned enough to write applications that turn massive text files into dictionaries that get \"stitched\" together like a database and output to properly formatted CSV files and then uploaded via SFTP to various systems for secure processing. Our teachers, students, and the tech department have greatly benefitted from this automation. I just wanted to drop you a note thanking you for helping me learn this skill.” – Keith Medlin\n\n“This course was great. Within 3 weeks I was able to write my own database related applications.” – Theo Coenen\n\nAnd there are many more students who love the course – check out all the reviews for yourself.\nWill this course give you core python skills?\nYes it will.  There are a range of exciting opportunities for Python developers. All of them require a solid understanding of Python, and that’s what you will learn in this course.\nWill the course teach me data science, machine learning and artificial intelligence?\nNo, it won’t do that – All of these topics are branches of Python programming.  And all of them require a solid understanding of the Python language.\nNearly all courses on these topics assume that you understand Python, and without it you will quickly become lost and confused.\nThis course will give you that core, solid understanding of the Python programming language.\nBy the end of the course you will be ready to apply for Python programming positions as well as move on to specific areas of Python, as listed above.\nWhy should you take this course?\nThere are a lot of Python courses on Udemy – Your instructors, Tim and Jean-Paul are pretty unique in that between them they have around 70 years of professional programming experience.  That’s more than a lifetime of skills you get to learn Python from.\nYou can enrol in the course safe in the knowledge that they are not just teachers, but professional programmers with real commercial programming experience, having worked with big companies like IBM, Mitsubishi, Fujitsu and Saab in the past.\nAs such you will not only be learning Python, but you will be learning industry best practices for Python programming that real employers demand.\nAnd if that’s not enough take a read of some of the many reviews from happy students – there are around 100,000 students who have left around 19,000 reviews.\nThis is one of the most popular courses on Python programming on Udemy.\nHere’s just some of what you’ll learn\n(It’s okay if you don’t understand all this yet, you will in the course)\n·       All the essential Python keywords, operators, statements, and expressions needed to fully understand exactly what you’re coding and why - making programming easy to grasp and less frustrating\n·       You will learn the answers to questions like What is the Python For Loop, what is Python used for, how Python switch the traditional syntax of code, and more.\n·       Complete chapters on object-oriented programming and many other aspects of Python, including tKInter (for building GUI Interfaces) and using databases with Python.\n·       Although this is primarily a Python 3 course, a python developer will need to work with Python 2 projects from time to time – We’ll show the difference in both versions to make sure you understand how things work differently in each version.\n·        How to develop powerful Python applications using one of the most powerful Integrated Development Environments on the market, IntelliJ IDEA! - Meaning you can code functional programs easier.  IntelliJ has both a FREE and PAID version, and you can use either in this course.  PyCharm will also work just fine.\n(Don’t worry if you want to use another IDE. You’re free to use any IDE and still get the most out of this course).\n\nDoes the course get updated?\nIt’s no secret how technology is advancing at a rapid rate. New, more powerful hardware and software are being released every day, meaning it’s crucial to stay on top with the latest knowledge.\n\nA lot of other courses on Udemy get released once, and never get updated.  Learning from an outdated course and/or an outdated version of Python can be counter productive and even worse it could teach you the wrong way to do things.\nFor example if you apply some parts of Python 2 to Python 3 code, you will get completely different results.\nWe cover differences like this in the course and also continually update the course as well.\nWhat if you have questions?\nAs if this course wasn’t complete enough, we offer full support, answering any questions you have 7 days a week (whereas many instructors answer just once per week, or not at all).\nThis means you’ll never find yourself stuck on one lesson for days on end. With our hand-holding guidance, you’ll progress smoothly through this course without any major roadblocks.\nThat’s just one reason why Tim was voted top 10 in the  Udemy instructor awards (out of a whopping 18,000 instructors), and quickly became a top-rated, bestselling instructor on the Udemy site.\nStudent Quote: “Tim and JP are excellent teachers and are constantly answering questions and surveying students on new topics they will like to learn. This isn't a Python course it’s THE Python course you need.” – Sean Burger\nThere’s no risk either!\nThis course comes with a full 30 day money-back guarantee. Meaning if you are not completely satisfied with the course or your progress, simply let Tim or J-P know and they will refund you 100%, every last penny no questions asked.\nYou either end up with Python skills, go on to develop great programs and potentially make an awesome career for yourself, or you try the course and simply get all your money back if you don’t like it…\nYou literally can’t lose.\nReady to get started, developer?\nEnrol now using the “Add to Cart” button on the right, and get started on your way to creative, advanced Python brilliance. Or, take this course for a free spin using the preview feature, so you know you’re 100% certain this course is for you.\nSee you on the inside (hurry, your Python class is waiting!)",
      "target_audience": [
        "Beginners with no previous programming experience looking to obtain the skills to get their first programming job.",
        "Anyone looking to to build the minimum Python programming skills necessary as a pre-requisites for moving into machine learning, data science, and artificial intelligence.",
        "Existing programmers who want to improve their career options by learning the Python programming language.",
        "If you are an expert Python programmer with extensive knowledge, and many years’ experience, then this course is probably not for you."
      ]
    },
    {
      "title": "ASP NET Core,MVC,C#,Angular, ChatGPT & EF Crash Course",
      "url": "https://www.udemy.com/course/aspnet-core-aspnet-5mvc-6cweb-api-ef-crash-course/",
      "bio": "Learn How To Build Cross Platform Web Apps in ASP.NET Core Utilizing MVC, C#, Web Api, Angular & Entity Framework Core",
      "objectives": [
        "Create ASP NET Core Web Apps on Windows, Linux, and Mac OS",
        "Learn about the new modular HTTP request pipeline in ASPNET Core",
        "Examine and Implement all of the new features of MVC",
        "Comprehend Object Oriented Programming Concepts with C#",
        "Develop and consume an API Service in ASPNET Core WEB API",
        "Build Entity Framework Code First Data Access Techniques",
        "Implement Angular within our ASP NET Core Application",
        "Consume web api services with Angular data binding techniques",
        "Learn How to Target Multiple Platforms with the .NET Core CLI"
      ],
      "course_content": {
        "New Course Update: Full ChatGPT Chatbot Code User Doc, Video and Source Code": [
          "User Documentation Video and PDF",
          "User Manual How to Video",
          "Source Code",
          "User Documentation"
        ],
        "Course Introduction": [
          "What is ASP.NET Core?",
          "Download Introduction Slide Deck Here"
        ],
        "Software Installation - Visual Studio 2019, VS Code, Node.JS, & ASP.NET Core": [
          "Section Overview",
          "Visual Studio 2019, VS Code, VS for Mac & ASP.NET Core Installation",
          "Linux - Asp.Net Core Installation on Ubuntu",
          "LInux - Install VS Code, Node.Js, Yeoman & Asp.Net Core Generator",
          "Mac OSX - Asp.Net Core Installation",
          "Mac OSX - Install Node.Js, Yeoman, VS Code & the Asp.Net Core Generator",
          "Section Summary",
          "Download Introduction Slide Deck Here",
          "Linux - Create Your First Console & Web Application"
        ],
        "Create & Examine Our First ASP.NET Core 1.0 Web & Console App": [
          "Section Overview",
          "Windows - Create Your First Console Application Project - .Net CLI",
          "Windows - Create Your First Web Application Project - VS 2015",
          "Mac OSX - Create Your First Console & Web Application",
          "ASP.NET Full Framework App vs an ASP.NET Core App Comparision",
          "DEMO - ASP.NET Full Framework App vs an ASP.NET Core App Comparision",
          "File Stucture - Project.Json, Appsettings.Json & Global.Json",
          "File Structure - Startup.CS",
          "Client Side Package Managers - Bower & Gulp",
          "Client Side Package Management - Bundleconfig.json",
          "File Structure - wwwroot & MVC 6",
          "Cheat Sheet - New .NET CLI Commands & Software Installation Guide",
          "Section Summary",
          "Download Introduction Slide Deck & First Project Download"
        ],
        "Create Course Project & C# Refresher + C# 6.0 New Features": [
          "Section Overview",
          "Create Course Web Project & Configure Project.Json",
          "Configure Startup.cs File Dependenies",
          "Create Appsettings.json Configuration File",
          "MVC Folder Structure Setup",
          "Configure LaunchSettings.json Profile",
          "Install & Configure Bower & Gulp",
          "Add Application Insights Telemetry Microsoft Azure",
          "C# & C# 6.0 Object-oriented programming Introduction",
          "C# Class Creation, Object Intialization & Constructors",
          "C# Variables & Data Types",
          "C# - Properties & Fields",
          "C# Access Modifiers",
          "C# Methods",
          "C# Access Modifiers - Demo",
          "C# Arrays",
          "C# Interfaces",
          "C# Conditional Branching & Looping",
          "C# .Net History & C# 6.0 Learning Objectives",
          "C# 6.0 Static Classes & Methods",
          "C# 6.0 String Interpolation",
          "C# 6.0 Initialization of Auto-Properties",
          "C# 6.0 Null Conditional Operator",
          "C# 6.0 Try-Catch-Finally Block Await Async",
          "C# 6.0 Expression bodied Methods & Properties",
          "Section Summary",
          "Download Introduction Slide Deck & Project Source Code"
        ],
        "MVC & MVC 6 Features & RC2 to 1.0 Migration": [
          "Section Overview",
          "MVC - Conceptual Overview",
          "MVC - Setup Project Structure",
          "MVC Controllers - Conventional Routing",
          "MVC Controllers - Attribute Routing",
          "MVC Controllers - Action Results & Return Types",
          "MVC Controllers - View Rendering Model Data",
          "MVC Controllers - View Rendering List Model Data",
          "MVC Models - Conceptual Overview",
          "MVC Models - VIewModels",
          "MVC Models - Data Annotation",
          "MVC - Dependency Injection",
          "MVC Views - Conceptual Overview",
          "MVC Views - Layout File",
          "MVC Views - _ViewStart File",
          "MVC Views - _ViewImports File",
          "MVC Views - TagHelpers",
          "RC2 to .Net Core 1.0 Update Installation",
          "RC2 vs .Net Core 1.0 Differences",
          "MVC Views - PartialViews",
          "MVC Views - ViewComponents",
          "Build Our App - Login Page Layout",
          "Build Our App - Logged In Page Layout",
          "Build Our App - Login Form Creation",
          "Build Our App - Form Post",
          "Section Summary",
          "Source Code Download"
        ],
        "Learn Entity Framework Core & Build Restful Api Services on Windows & Mac OSX": [
          "Section Overview",
          "EF Core - Conceptual Overview",
          "EF Core - Sql Server & Command Tooling package installation (Project.Json)",
          "EF Core - Dependency Injection Inject DBContext into Configure Services",
          "EF Core - Create Entities for our Data Model",
          "EF Core - Create DbContext",
          "EF Core - First Migration in VS 2015",
          "EF Core - .NET CLI EF Core Commands",
          "EF Core - Exclude & Include Types, Data Annotations, Fluent Api",
          "EF Core - Primary & Composite Keys",
          "EF Core - Required & Maxlength Attributes",
          "EF Core - Generated Property Values",
          "EF Core - Concurrency Tokens",
          "EF Core - Indexes",
          "EF Core - Table Mappings",
          "EF Core - Column Mappings & Data Types",
          "EF Core - Computed Columns",
          "Build Our App - Login & Register Model Entity Powerpoint",
          "Build Our App - Create our Login & Register Entity Model & ViewModel",
          "Build Our App - Register our DbContext",
          "Build Our App - ResetPassword & ForgotPassword ViewModel",
          "Build Our App - Create the Register, Forgot & Reset Password Views",
          "Build Our App - Asp.Net Core Identity Core Introduction",
          "Build Our App - Asp.Net Core Identity Core Installation",
          "Build Our App - Create Our Identity Login & Register Controller",
          "Build Our App - Create Our User & LogOff Method in Identity",
          "Build Our App - Create Our ResetPassword & Forgot Password Method Logic",
          "Create Microsoft Azure Account & SendGrid Email Cloud Service Account",
          "Build Our App - Configure User Secrets for Send Grid Api Key & Email Send Class",
          "Build Our App - Send Test Email using Send Grid Cloud Email Service",
          "Build Our App - Register User,Reset Password,Forgot Password & Confirm Password",
          "SMS Account Creation - Twilio",
          "Build Our App - Create Sms Interface & Properties related to our Sid & Token",
          "Build Our App - Send SMS Test Message using Twilio",
          "Create Account - External Login Provider with OAuth2 Facebook",
          "Build Our App - Configure Facebook User Secrets & Facebook Autho2 Credentials",
          "Build Our App - Build Our External Login Provider To Facebook",
          "Powerpoint - Entity Model Diagram for the Profile Context",
          "Build Our App - EF Core Context Add Individual, Organization & Hobby Entities",
          "Build Our App - Data Annotations & OnModelCreating Enhancements in our Context",
          "Build Our App - Initialize Data into our Profile Context",
          "Build Our App - Add a Foreign Key Constraint on our Entities",
          "Build Our App - DashboardViewModel with our Entities",
          "Build Our App - Build our IProfileRepository Class",
          "Build Our App - Dashboard Index View",
          "Build Our App - Build a JSON API Service",
          "Build Our App Api - CRUD Operations - Create",
          "Build Our App Api - CRUD Operations - Edit",
          "Build Our App Api - CRUD Operations - Delete",
          "Build Our App Api - CRUD Operations - Detail",
          "Section Summary"
        ],
        "Typescript Introduction & Installation": [
          "Learning Objectives",
          "Typescript - Introduction",
          "Typescript - Installation",
          "Typescript - Create your First Typescript File",
          "Typescript - Tsconfig.json",
          "Typescript - var vs let variable declarations",
          "Typescript - Interfaces",
          "Typescript - Classes",
          "Typescript - Functions",
          "Typescript - Enums",
          "Typescript - Generics",
          "Typescript - Modules",
          "Typescript - Namespaces",
          "Typescript - Iterators",
          "Typescript - Modifiers",
          "Typescript - Compile",
          "Section Summary"
        ],
        "Angular 2 Installation & Introduction": [
          "Angular 2 - Section Overview",
          "Angular 2 - Definition & Architecture",
          "Angular 2 - Angular-Cli Installation",
          "Angular 2 - Angular-.NetCore-Spa Generator",
          "Angular 2 - Angular Module Definition",
          "Angular 2 - File Structure & App.Modules.ts",
          "Angular 2 - Angular Components Definition",
          "Angular 2 - Angular Components & Class Implementation",
          "Angular 2 - Angular Templates Definition",
          "Angular 2 - Angular Templates Implementation",
          "Angular 2 - Angular Data-Binding Definition",
          "Angular 2 - Angular Data-Binding Demo",
          "Angular 2 - Angular Input Definition",
          "Angular 2 - User Input Onkey Demo",
          "Angular 2 - Forms Definition",
          "Angular 2 - Forms Part 1 Demo Class creation",
          "Angular 2 - Forms Part 2 Demo Forms Module",
          "Angular 2 - Forms Part 3 Demo Forms Template & Data Binding",
          "Angular 2 - Forms Part 4 Validation",
          "Angular 2 - Dependency Injection Definition",
          "Angular 2 - Dependency Injection Demo",
          "Angular 2 - Http Definition",
          "Angular 2 - Http Demo Create Json File",
          "Angular 2 - Http Demo Create Service",
          "Angular 2 - Promise VS Observable",
          "Angular 2 - Http Observable map to Json Filse",
          "Angular 2 - Conclusion"
        ],
        ".Net Core Upgrade - Migrate from the Project.json to the .Csprog File": [
          ".Net Core Upgrade - Section Overview",
          ".Net Core Upgrade - Upgrade our Project in VS 2017",
          ".Net Core Upgrade - Why Microsoft left the project.json file?",
          ".Net Core Upgrade - Upgrade our Project via the .Net CLI",
          ".Net Core Upgrade - Project.json vs .Csproj",
          ".Net Core Upgrade - Conclusion"
        ]
      },
      "requirements": [
        "A computer with Windows, Linux, or Mac OS Operating System Installed",
        "Visual Studio Code (Free. Used for Mac OS or Linux OS. I will demonstrate the installation process)",
        "Visual Studio 2022 (Free. Used for Windows OS. I will demonstrate the installation process)",
        "Desire to learn",
        "Commitment to the course"
      ],
      "description": "Update: 8/17/2023 - Work-in-progress alert! Our upcoming course will empower you to craft a cutting-edge ChatGPT Bot solution using .NET and Angular. Working on all the videos but the source code, documentation, and video how-to are uploaded.  We'll leverage the power of Entity Framework to seamlessly store data in a SQL Server Database. Stay tuned!\n\n\nUnleash the Potential of ASP.NET Core\nASP.NET Core is a game-changer for crafting web applications using ASP.NET and C#. Join our comprehensive course and unlock the art of building ASP.NET Core Web Applications from scratch. In this hands-on experience, you'll delve into MVC, Entity Framework Core, Web API, Angular, and various C# features.\nOnce your ASP.NET Core Web App is ready, we'll guide you through the seamless deployment process on Microsoft Azure.\nWhy choose ASP.NET Core?\nASP.NET Core is a versatile, open-source, cross-platform framework, perfectly suited for creating modern, cloud-based web applications with .NET.\nRevolutionizing Web App Development\nWhile traditional ASP.NET is reliable, it's based on an older platform that has accumulated redundant code over time. This legacy code, dating back over 15 years to ASP.NET 1.0, may still load unnecessarily in your web projects, potentially impacting performance.\nEnter ASP.NET Core—a leaner, more efficient framework that eliminates unnecessary loading, boosting your web app's performance.\nDesigned for the Modern Era\nASP.NET Core is tailor-made for modern web applications. It's cloud-ready, with built-in environment-based configuration and seamless support for dependency injection.\nMoreover, it enables cross-platform development on Windows, Mac, and Linux. By embracing open source, ASP.NET Core actively encourages community contributions and developer engagement.\nEmbark on your journey to mastery of ASP.NET Core today. Unleash the power of streamlined, modern web application development. This is more than just a course—it's your ticket to success!",
      "target_audience": [
        "Anyone who is interested in learning ASP NET Core, C#, Angular, Entity Framework, Web API, and MVC",
        "Basic knowledge of ASPNET and C# is preferred but not required",
        "Some familiarity with Angular but not required"
      ]
    },
    {
      "title": "Java Programming for Complete Beginners",
      "url": "https://www.udemy.com/course/java-programming-complete-beginner-to-advanced/",
      "bio": "Learn Core Java Skills including the lastest version of Java",
      "objectives": [
        "Learn core Java skills from complete beginner to advanced features"
      ],
      "course_content": {
        "Java Programming - Part 1": [
          "Installing JDK and Eclipse IDE",
          "Your First Hello World Program",
          "Variables",
          "Strings",
          "Quiz 1",
          "While Loops",
          "For Loops",
          "If Statements",
          "Quiz 2",
          "Getting User Input",
          "Comments, Variable Scope, Do While Loops",
          "Switch Statements",
          "Arrays",
          "Multidimensional Arrays, Nested For Loops",
          "Classes, Methods, and Objects",
          "Return Types and Method Parameters",
          "Packages",
          "Constructors and this vs. this()",
          "Static and Final",
          "Inheritance and Access Modifiers",
          "Polymorphism",
          "Encapsulation",
          "Casting Numerical Values",
          "Interfaces",
          "Anonymous Classes",
          "Reading Files with Scanner Class",
          "StringBuilder",
          "toString Method",
          "The Equals Method",
          "Ternary Operator"
        ],
        "Project - Guess The Word Game": [
          "Setting Up The Game",
          "Game Logic - Part 1",
          "Game Logic - Part 2",
          "Game Logic - Part 3"
        ],
        "Java Programming - Part 2": [
          "Handling Exceptions",
          "Multiple Exceptions",
          "Runtime Exceptions",
          "Abstract Classes",
          "Inner Classes",
          "Passing by Value",
          "Lambda Expressions",
          "Enums - Advanced Usage",
          "Serialization",
          "Serializing Multiple Objects and Transient Keyword",
          "ArrayList & LinkedList",
          "HashMap",
          "LinkedHashMap and TreeMap",
          "HashSet, LinkedHashSet and TreeSet",
          "Sorting Lists"
        ],
        "Java Multithreading": [
          "Starting Threads",
          "Volatile Keyword",
          "Synchronized Keyword",
          "Multiple Locks",
          "Thread Pools",
          "CountDownLatch",
          "Wait & Notify",
          "Re-entrant Locks",
          "Semaphores"
        ],
        "New Java Features (from Java 10 to Java 22)": [
          "Switch Expressions",
          "var Keyword",
          "Text Blocks",
          "Sealed Classes",
          "Record Classes",
          "Virtual Threads",
          "Unnamed Classes & Unnamed Variables",
          "Sequenced Collection",
          "Sequenced Set",
          "Sequenced Map"
        ],
        "Coding Exercises": [
          "Banking System",
          "Counting and Displaying Even Numbers",
          "Polymorphism",
          "Student Grades",
          "Website Access Age Verification",
          "Shopping Cart",
          "Movie Rating System using HashSet in Java",
          "Using Multiple Locks to Synchronize Threads with Bank Accounts"
        ]
      },
      "requirements": [
        "No previous programming knowledge is required",
        "All the tools needed are free to install",
        "Willingness to learn"
      ],
      "description": "Do you want to learn how to code and land a cool Java programming job? Java is a really popular language for creating applications and websites.\nIt's awesome because the code you write can run on any computer. Now is a great time for Java programmers to find jobs and freelance gigs.\nThis course is taught by super knowledgeable Java experts certified by Oracle. Once you finish, understanding Java will be a breeze. Moreover, this course includes the updates of Java.\nThe course covers each topic and makes things easy with simple examples. You get coding notebooks with each lesson for practice.\nLearning Java can open up exciting opportunities in the tech industry. Java is widely used, making it a valuable skill for employers. This course not only equips you with the knowledge but also provides hands-on practice with coding notebooks.\nThe instructors, certified by Oracle, bring a wealth of expertise to guide you through the learning process. Whether you're a complete beginner or looking to enhance your coding skills, this course is suitable for all types of learners.\nDon't miss the chance to improve your career and be part of the Java programming community.\nEnroll today and embark on a journey to master these valuable and in-demand skills!",
      "target_audience": [
        "Anyone who wants to learn Java Programming"
      ]
    },
    {
      "title": "Python Mega Course: Build 20 Real-World Apps and AI Agents",
      "url": "https://www.udemy.com/course/the-python-mega-course/",
      "bio": "Learn Python from Beginner to Pro. Build 20 Real-World Apps with Python Including AI Agents with LangChain.",
      "objectives": [
        "Build 20 real-world Python apps and AI Agents from scratch.",
        "Automate repetitive tasks using Python scripts.",
        "Create your own web apps, data science tools, and desktop GUIs.",
        "Master core Python concepts through a hands-on, project-based approach.",
        "Integrate Python with modern AI tools like LangChain to build intelligent Agents and Assistants.",
        "Work with APIs, web scraping, and data processing to solve real problems.",
        "Gain the confidence to tackle any new Python project on your own.",
        "Build apps using essential Python libraries -including PyQt, Flask, Django, Pandas, Selenium, LangChain, and more."
      ],
      "course_content": {
        "First Steps: Capturing and Storing User Input (Variables, User Input, Lists)": [
          "Welcome to the Python Mega Course",
          "Helpful Resources",
          "Today's Goals",
          "Installing Python and PyCharm",
          "Getting Started with PyCharm",
          "Building the Task Manager App - The First Step",
          "Printing Out Text",
          "Printing Out Any Text",
          "Getting User Input",
          "Declaring Variables",
          "Storing User Input in Lists",
          "Creating Lists of Variables",
          "Creating Lists of Variables and Strings",
          "Printing List of Strings",
          "Printing the Type",
          "What is a bug?",
          "Coding Experiments",
          "Bonus Example",
          "Bug-Fixing Exercises",
          "Programming Tool/Concept of the Day: The Python Console",
          "FAQ",
          "Quiz, Day 1",
          "Cheatsheet, Day 1",
          "Course Cheatsheets",
          "Programming Terms: A to Z Glossary",
          "How to use Role Play for Checking Your Skills",
          "Section Skill Check"
        ],
        "Make Your App Interactive (Methods, While Loops)": [
          "Recap of Yesterday",
          "Getting User Input Repeatedly",
          "Infinite While Loops",
          "Storing User Input Repeatedly",
          "Append Item to List",
          "Capitalize Text",
          "Coding Experiments",
          "Capitalize Method",
          "Capitalize All Words",
          "Bonus Example",
          "Coding Exercise: Infinite While-Loop",
          "Coding Exercise: While-Loop and User Input",
          "Bug-Fixing Exercises",
          "Programming Tool/Concept of the Day: How to Find the Code You Need",
          "Tip",
          "Find the Code",
          "FAQ",
          "Quiz, Day 2",
          "Cheatsheet, Day 2",
          "Section Skill Check"
        ],
        "Control Program Flow for Smart Features (Match-Case, For Loops)": [
          "Recap of Yesterday",
          "Todo List View and Program Exit",
          "Match-Case",
          "Improving the Program Output",
          "For-Loop",
          "Code Experiments",
          "Match-Case with Bitwise Operator",
          "For-Loop and Title Case",
          "Bonus Example",
          "For-Loop with Numbers",
          "Bug-Fixing Exercises",
          "Programming Tool/Concept of the Day: What Surprisingly is Python",
          "FAQ",
          "Quiz, Day 3",
          "Cheatsheet, Day 3",
          "Section Skill Check"
        ],
        "Manipulate Data (List Indexing, Tuples)": [
          "Recap of Yesterday",
          "Add an \"Edit\" Feature",
          "Coding Experiments",
          "List of Serial Numbers",
          "List of Items",
          "Bonus Example",
          "String Replace",
          "String Replace and For-Loop",
          "Appending Items to List",
          "Tuple of Tuples",
          "Assigning Variables",
          "Bug-Fixing Exercises",
          "Programming Tool/Concept of the Day: Text Editors, Code Editors, IDE, PyCharm",
          "FAQ",
          "Quiz, Day 4",
          "Cheatsheet, Day 4",
          "Section Skill Check"
        ],
        "Display and Structure Output (Enumeration, f-strings)": [
          "Recap of Yesterday",
          "Numbered Todos",
          "List of Three Items",
          "List of Four Items",
          "Enumeration 1",
          "Enumeration 2",
          "Improving the Program Output",
          "Enumeration and f-strings",
          "Enumeration, f-strings, and Capitalizing",
          "Add a \"Complete Todo\" Feature",
          "Removing Items",
          "Good to Know: Q&A",
          "Code Experiments",
          "Finding the Length",
          "Length Calculation in For-Loop",
          "Bonus Example",
          "For-Loop and Sorted List",
          "Bug-Fixing Exercises",
          "Programming Tool/Concept of the Day: How to Ask Good Programming Questions",
          "FAQ",
          "Quiz, Day 5",
          "Cheatsheet, Day 5",
          "Section Skill Check"
        ],
        "Persist Data with Files (Processing Text Files, Reading/Writing)": [
          "Recap of Yesterday",
          "Storing Items in Text Files",
          "Getting Todo Items from Text Files",
          "How Data Types are Created",
          "Code Experiments",
          "Bonus Example",
          "Read File and Print",
          "Read File, Modify, and Print",
          "Read File and Analyze its Content 1",
          "Read File and Analyze its Content 2",
          "Creating a Text File",
          "The zip() Function",
          "Creating Multiple Text Files",
          "Coding Exercise: Adding to Text File",
          "Coding Exercise: Generate Multiple Text Files",
          "Coding Exercise: Reading Multiple Files",
          "Bug-Fixing Exercises",
          "Programming Tool/Concept of the Day: Online Python Communities",
          "FAQ",
          "Quiz, Day 6",
          "Cheatsheet, Day 6",
          "Section Skill Check"
        ],
        "Optimize and Annotate Your Code (List Comprehensions, Code Comments)": [
          "Recap of Yesterday",
          "Improving the Program Output",
          "Code Experiments",
          "Bonus Example",
          "List Comprehension",
          "Length and List Comprehension",
          "Type Conversion and List Comprehension",
          "List Comprehension on Numbers",
          "Sum of Numbers",
          "Bug-Fixing Exercises",
          "Programming Tool/Concept of the Day: Usages of Python in Real Life",
          "FAQ",
          "Quiz, Day 7",
          "Cheatsheet, Day 7",
          "Section Skill Check"
        ],
        "Master File Management (Context Managers, With Statement)": [
          "Recap of Yesterday",
          "Optimising the Code",
          "Editing and Completing Todo Items",
          "With Context Manager -File Reading",
          "With Context Manager -Analyzing Content",
          "Code Experiments",
          "Bonus Example",
          "With Context Manager -File Writing",
          "With Context Manager and For-Loop",
          "With Context Manager with Reading and Writing",
          "Bug-Fixing Exercises",
          "Programming Tool/Concept of the Day: Steps of Creating and Maintaining a Program",
          "FAQ",
          "Quiz, Day 8",
          "Cheatsheet, Day 8",
          "Section Skill Check"
        ],
        "Decision Making in Apps (If/Elif/Else, Dictionaries)": [
          "Recap of Yesterday",
          "Improving the \"Add\" Feature",
          "Optimising the Program",
          "Code Experiments",
          "Bonus Example",
          "Password Validation",
          "Advanced Password Validation",
          "List of Floats",
          "Dictionary of Tuples",
          "List Slicing 1",
          "List Slicing 2",
          "List Slicing 3",
          "Bug-Fixing Exercises",
          "Programming Tool/Concept of the Day: High vs. Low Level Programming Languages",
          "FAQ",
          "Quiz, Day 9",
          "Cheatsheet, Day 9",
          "Section Skill Check"
        ],
        "Stop Your App from Crashing (Error Handling, Try-Except)": [
          "Recap of Yesterday",
          "Fixing Two Bugs in the Program",
          "Anticipating Program Errors",
          "Code Experiments",
          "Bonus Example",
          "Percentage Calculator with Error Handling",
          "Advanced Error Handling",
          "For Loops and Conditionals 1",
          "For Loops and Conditionals 2",
          "Loops and Slicing",
          "Loops, Slicing, and String Manipulation",
          "Bug-Fixing Exercises",
          "FAQ",
          "Quiz, Day 10",
          "Cheatsheet, Day 10",
          "Section Skill Check"
        ]
      },
      "requirements": [
        "A computer running Windows, macOS, or Linux",
        "No prior programming experience needed"
      ],
      "description": "This course is designed to teach you Python by building practical applications from the ground up. It starts with the basics and gradually moves into more advanced topics, using real-world examples to help you understand how Python is used in practice.\nYou'll build 20 different apps throughout the course, each focusing on a specific area of Python programming. These include:\nAutomation scripts\nWeb applications\nAPIs\nData science tools\nWeb scraping programs\nDesktop apps with a graphical interface\nAI agents using Python and LangChain\nEach app is developed step by step, with clear explanations along the way. You don't need any prior programming experience to follow the course. The only requirement is that you’re willing to follow along and write code as you go.\nThe course includes a recently added section on building AI apps with Python and LangChain, reflecting the latest developments in Python’s use in automation and artificial intelligence.\nRather than focusing heavily on programming theory, the course emphasizes building usable tools. That way, you gain both a solid understanding of Python and the confidence to apply it in your own projects.\nIf you're looking for a course that is hands-on, practical, and beginner-friendly, this is a comprehensive option to get started with Python programming.\nTake a look to some of the great reviews students have left:\n\"This course has been INCREDIBLE! Ardit's step-by-step approach has really helped me develop my skills as a new Python developer. I'm loving being able to work through the projects, along with then using the new skills I've learnt in exercises. I'd highly recommend this course to anyone who is interested in learning Python. Thanks Ardit!\" - Braden Clark\n\n\"An excellent course, I strongly recommend it to anyone wanting to learn python as a beginner. Not only did I learn a lot of valuable information during this course, I actually really enjoyed doing it!\" -Daphne Sullivan\n\n\"This is the best course I've ever taken on Udemy. The lectures are straight to the point and easy to understand. The best thing about the course is that it is based on actually useful projects. When taking other courses, what really unmotivated me was that it was all theory, with examples that weren't even close to the reality of a programmer, and I couldn't see how I'd apply that in a real program. With Ardit's course, I can finally start coding what had so far been just ideas.\" -Maria Eduarda de Medeiros Lima Siqueira",
      "target_audience": [
        "Complete beginners who want to finally understand Python by building real projects",
        "Self-taught coders who feel stuck in tutorials and want to apply their skills",
        "Professionals and students who want to automate tasks, analyze data, or build tools",
        "Anyone who has tried learning Python before but it didn’t stick",
        "Learners who want to go beyond theory and build apps they can actually use"
      ]
    },
    {
      "title": "C# Memory Tricks: Learn How To Master The Garbage Collector",
      "url": "https://www.udemy.com/course/csharp-memory-tricks-learn-how-to-master-the-garbage-collector/",
      "bio": "This course teaches you advanced C# memory management tricks that every professional .NET developer must know.",
      "objectives": [
        "Learn how the Garbage Collector works",
        "Master .NET memory optimization",
        "Discover the truth about finalizers",
        "Learn how to measure the memory footprint of your code",
        "The unexpected memory footprint of List resizing",
        "Structs versus classes - which one is better?",
        "What assumptions does the GC make about object size and lifetime?",
        "Manual deallocation with the Dispose pattern",
        "... and much more!"
      ],
      "course_content": {},
      "requirements": [
        "You need a Windows, Mac or Linux laptop with Microsoft Visual Studio, Xamarin Studio or Monodevelop",
        "You should be a beginner, intermediate, or advanced C# developer",
        "That's it!"
      ],
      "description": "Modern computers have loads of memory. But it's very easy to burn through it all in seconds if your code is not efficient about allocating and using memory.\nDid you know that one simple mistake can make your code allocate 1600 times more memory than absolutely necessary?\nDon't be 'that developer' who keeps crashing the development server with an OutOfMemory exception!\nAnd you certainly don't want to be responsible for inflating the hardware budget. Can you imagine having to explain to your team that 512 GB of memory is not enough to run your code on the production server?\nLet me help you.\nIt doesn't have to be like this. If you have a good understanding of the garbage collection process and follow a few simple best practices, you can dramatically reduce the memory footprint of your code.\nSound good?\nIn the last 10 years I have learned the secrets of garbage collection in .NET, and in this course I am going to share them all with you.\nIn a series of short lectures I will take a detailed look at the garbage collection process. I will show you all of the memory allocation problems you can expect when writing C# code, like unexpected boxing, string duplication, collection resizing, and more. I'll teach you quick and easy strategies to resolve these problems.\nBy the end of this course you will be able to master the garbage collector.\nWhy should you take this course?\nYou should take this course if you are a beginner or intermediate C# developer and want to take your skills to the next level. Garbage collection and memory management might sound complicated, but all of my lectures are very easy to follow and I explain all topics with clear code and many instructive diagrams. You'll have no trouble following along.\nOr maybe you're working on a critical section of code in a C# project, and need to make sure your memory usage is as efficient as possible? The tips and tricks in this course will help you immensely.\nOr maybe you're preparing for a C# related job interview? This course will give you an excellent foundation to answer any questions they might throw at you.",
      "target_audience": [
        "Beginner, intermediate, and advanced C# programmers who want to learn how to master the garbage collector.",
        "Developers who are about to take a job interview and need to prepare for questions about memory allocation in .NET",
        "Professionals who are writing a section of mission-critical code in a large C# project"
      ]
    },
    {
      "title": "Learn How To Code: Google's Go (golang) Programming Language",
      "url": "https://www.udemy.com/course/learn-how-to-code/",
      "bio": "The Ultimate Comprehensive Course - Perfect for Both Beginners and Experienced Developers",
      "objectives": [
        "The ultimate comprehensive course",
        "For beginners and experienced devs",
        "Taught by a university professor",
        "From beginning to advanced concepts",
        "Concurrency, channels, benchmarking",
        "Testing, error handling, documentation",
        "Hands-on exercises with solutions",
        "Access to valuable code base",
        "This course is tried, tested, and proven",
        "Over 2.65 Million students taught",
        "Lifetime course access",
        "Learn at your own pace",
        "100% satisfaction guaranteed"
      ],
      "course_content": {},
      "requirements": [
        "No prerequisite knowledge is required to take this course. This course starts at the very beginning and will teach you everything you need to know to be an outstanding programmer."
      ],
      "description": "This course is the ultimate comprehensive resource for learning the Go Programming Language.\nThis course is perfect for both beginners and experienced developers. The course is full of examples, hands-on exercises, solutions to the hands-on exercises, and an amazing code repository.\nThis course is taught by one of the world's leading Go Programming Trainers, Todd McLeod. Todd was the first university professor in America to teach Go at the university level. Todd has taught over 3.25 Million students how to use the Go Programming Language. This course is tried, tested, and proven to train beginners and experienced developers how to use Go.\nThis course has a tremendous amount of content and resources so that you can learn everything you need to know - whatever is appropriate for your ability level.\nWhen you enroll in this course, you will have lifetime access to the course. You will be able to learn at your own pace. You will always be able to come back to the content to review it, or learn additional concepts when you are ready for them.\nThis course also comes with a 100% Satisfaction Money Back Guarantee.\nI know that this is absolutely the best course in the entire world for learning the Go Programming Language.\nI know that you are going to be completely satisfied with the course.\nAnd, if for any reason the course does not work for you, then within the first 14 days, you can receive a full refund.\nSo enroll now!\nYou will get great value from this course and, more importantly, you will have a great time learning the greatest programming language every made - The Go Programming Language - The fastest growing, highest paying programming language in America.\nJoin me on this incredible journey. Sign-up Today.\nGo is an open source programming language that makes it easy to build simple, reliable, and efficient software.\nGo is an amazing choice for a language as it was developed by some of the same individuals who created the C programming language, Unix, and UTF-8 - some of the most influential contributions to computer science. Robert Griesemer, Rob Pike, and Ken Thompson created Go to be a modern language that easily uses multiple cores, easily implements concurrency, easily works in distributed environments, and easily allows the programmer to write programs - it has a very lean and user-friendly syntax.\nGo was created by luminaries in computer science at one of the best, if not the very best, software engineering firm to have ever existed - Google.\nThe credentials of Go are unsurpassed.\nBut why did Google create a new language?\nIn Google’s words, “Go was born out of frustration with existing languages and environments for systems programming. Programming had become too difficult and the choice of languages was partly to blame. One had to choose either efficient compilation, efficient execution, or ease of programming; all three were not available in the same mainstream language. Programmers who could were choosing ease over safety and efficiency by moving to dynamically typed languages such as Python and JavaScript rather than C++ or, to a lesser extent, Java. Go is an attempt to combine the ease of programming of an interpreted, dynamically typed language with the efficiency and safety of a statically typed, compiled language. It also aims to be modern, with support for networked and multicore computing. Finally, working with Go is intended to be fast: it should take at most a few seconds to build a large executable on a single computer. To meet these goals required addressing a number of linguistic issues: an expressive but lightweight type system; concurrency and garbage collection; rigid dependency specification; and so on. These cannot be addressed well by libraries or tools; a new language was called for.”\nIn my opinion, Go is the best programming language that you can be learning today. I began programming in 1982 with BASIC, I have worked with many languages, and Go is the best language which I have ever used. Go is also the top-paid programming language in America today.\nCome learn about the greatest programming language ever created. You will leave with resources and code samples to start making all of your software and apps really go.",
      "target_audience": [
        "This is a first semester university level programming course.",
        "This course is ideal for beginners wanting to learn programming.",
        "This course is perfect for experienced programmers wanting a thorough introduction to the Go programming language.",
        "This course is perfect for experienced programmers wanting to fill in gaps in their programming knowledge."
      ]
    },
    {
      "title": "Java Programming for Complete Beginners [2025]",
      "url": "https://www.udemy.com/course/java-programming-tutorial-for-beginners/",
      "bio": "Java Programming for Beginners. Learn Core Java, Java Object Oriented Programming and Spring Boot. Get Interview Ready!",
      "objectives": [
        "HANDS-ON with EXERCISES and PUZZLES: Learn Object Oriented Programming with Java",
        "CLEAR YOUR JAVA INTERVIEWS: GET ALL the SKILLS to demonstrate an EXPERTISE with Java Programming"
      ],
      "course_content": {
        "Introduction to Course - Java Programming": [
          "[NEW ADDITION] World's Best Java Interview Guide",
          "Step 01 - Course Overview - Java Programming For Absolute Beginners",
          "Course Downloads - Course Guide and Presentation",
          "DO NOT SKIP - in28minutes Learning Community"
        ],
        "Installing Java": [
          "Recommended Java Version - Java 21 or HIGHER",
          "Step 00 - Installing Java - Overview",
          "Step 01 - Installing Java - Windows",
          "Step 02 - Installing Java - Mac",
          "Step 03 - Installing Java - Linux",
          "Step 04 - Troubleshooting Java Installation"
        ],
        "Introduction to Java Programming with Jshell using Multiplication Table": [
          "Step 00 - Step By Step Problem Solving with Programming",
          "Step 01 - Introduction to Multiplication Table challenge",
          "Step 02 - Getting Started with JShell",
          "Step 03 - Break Down Multiplication Table Challenge",
          "Step 04 - Java Expression - An Introduction",
          "Step 05 - Java Expression - Exercises",
          "Step 06 - Java Expression - Puzzles",
          "Section Quiz 1",
          "Code Snippets For Next Step - Printing Output To Console",
          "Step 07 - Printing output to console with Java",
          "Step 08 - Printing output to console with Java - Exercise Statements",
          "Do You Want to Help Us?",
          "Step 09 - Printing output to console with Java - Exercise Solutions",
          "Step 10 - Printing output to console with Java - Puzzles",
          "JShell Tip - Multiple Lines of Code",
          "Step 11 - Advanced Printing output to console with Java",
          "Step 12 - Advanced Printing output to console with Java - Exercises",
          "Section Quiz 2",
          "Step 13 - Introduction to Variables in Java",
          "Step 14 - Introduction to Variables in Java - Exercises and Puzzles",
          "Step 15 - 4 Important Things to Know about Variables in Java",
          "Step 16 - How are variables stored in memory?",
          "Step 17 - How to name a variable?",
          "Section Quiz 3",
          "Step 18 - Understanding Primitive Variable Types in Java",
          "Step 19 - Understanding Primitive Variable Types in Java - Choosing a Type",
          "Java Tip - String Concatenation",
          "Step 20 - Java Assignment Operator",
          "Step 21 - Java Assignment Operator - Puzzles on Increment, Decrement and Compoun",
          "Step 22 - Programming Tips : JShell - Shortcuts, Multiple Lines and Variables",
          "Section Quiz",
          "Step 23 - Java Conditionals and If Statement - Introduction",
          "Step 24 - Java Conditionals and If Statement - Exercise Statements",
          "Step 25 - Java Conditionals and If Statement - Exercise Solutions",
          "Step 26 - Java Conditionals and If Statement - Puzzles",
          "Step 27 - Java For Loop to Print Multiplication Table - Introduction",
          "Step 28 - Java For Loop to Print Multiplication Table - Exercise Statements",
          "Step 29 - Java For Loop to Print Multiplication Table - Exercise Solutions",
          "Step 30 - Java For Loop to Print Multiplication Table - Puzzles",
          "Step 31 - Getting Started with Programming - Revise all Terminology",
          "Section Quiz 5",
          "How to remember things for long time"
        ],
        "Introduction to Java Method with Multiplication Table": [
          "Maximizing Learning Efficiency with Playback Speed",
          "Step 00 - Section 02 - Methods - An Introduction",
          "Code Reference For Next Step",
          "Step 01 - Your First Java Method - Hello World Twice and Exercise Statements",
          "Step 02 - Introduction to Java Methods - Exercises and Puzzles",
          "Step 03 - Programming Tip - Editing Methods with JShell",
          "Code Reference For The Next Step",
          "Step 04 - Introduction to Java Methods - Arguments and Parameters",
          "Step 05 - Introduction to Java Method Arguments - Exercises",
          "Step 06 - Introduction to Java Method Arguments - Puzzles and Tips",
          "Step 07 - Getting back to Multiplication Table - Creating a method",
          "Step 08 - Print Multiplication Table with a Parameter and Method Overloading",
          "Step 09 - Passing Multiple Parameters to a Java Method",
          "Step 10 - Returning from a Java Method - An Introduction",
          "Step 11 - Returning from a Java Method - Exercises",
          "Step 12 - Methods - Section Review",
          "DO NOT SKIP: FLASH CARDS",
          "Section Quiz",
          "How to be consistent?"
        ],
        "Introduction to Java Platform": [
          "Step 00 - Section 03 - Overview Of Java Platform - Section Overview",
          "Step 01 - Overview Of Java Platform - An Introduction - java, javac, bytecode an",
          "DO NOT SKIP - OPTIONAL HANDS-ON",
          "Step 02 - Java Class and Object - First Look",
          "Step 03 - Create a method in a Java class",
          "Step 04 - Create and Compile Planet.java class",
          "Step 05 - Run Planet class with Java - Using a main method",
          "Step 06 - Play and Learn with Planet Class",
          "Step 07 - JDK vs JRE vs JVM",
          "About Your Instructor"
        ],
        "Introduction to Eclipse - First Java Programming Project": [
          "Step 00 - Installing Eclipse - Windows",
          "Step 00 - Installing Eclipse - Mac",
          "Step 01 - Creating a New Java Project with Eclipse",
          "Step 02 - Your first Java class with Eclipse",
          "Step 03 - Writing Multiplication Table Java Program with Eclipse",
          "Step 04 - Adding more methods for Multiplication Table Program",
          "Eclipse Tip - Save Actions",
          "Do Not use Modules for now",
          "Step 05 - Programming Tip 1 : Refactoring with Eclipse",
          "Step 06 - Programming Tip 2 : Debugging with Eclipse",
          "Step 07 - Programming Tip 3 : Eclipse vs JShell - How to choose?",
          "How to Stay UpTo Date With Technology Changes"
        ],
        "Java Coding Exercises - Set 1": [
          "Introduction To Java Coding Exercises",
          "My 10 Rules for Happy Programmers",
          "Coding Exercise: Hello Coding Exercises",
          "Coding Exercise: Print Hello World",
          "Solution Video For Coding Exercise: Print Hello World",
          "Coding Exercise: Time Converter",
          "Solution Video For Coding Exercise: Time Converter",
          "Coding Exercise: Exam Result Checker",
          "Solution Video For Coding Exercise - Exam Result Checker",
          "Coding Exercise: Sum of Squares of First N Numbers",
          "Solution Video For Coding Exercise - Sum of Squares of First N Numbers",
          "Story of in28minutes"
        ],
        "Github Book For Java Programming": [
          "Github Book"
        ],
        "Introduction To Java Object Oriented Programming": [
          "Step 00 - Introduction to Object Oriented Programming - Section Overview",
          "Step 01 - Introduction to Object Oriented Programming - Basics",
          "Step 02 - Introduction to Object Oriented Programming - Terminology - Class, Obj",
          "Step 03 - Introduction to Object Oriented Programming - Exercise - Online Shoppi",
          "Step 04 - Create Motor Bike Java Class and a couple of objects",
          "Step 05 - Exercise Solutions - Book class and Three instances",
          "Step 06 - Introducing State of an object with speed variable",
          "Step 07 - Understanding basics of Encapsulation with Setter methods",
          "Step 08 - Exercises and Tips - Getters and Generating Getters and Setters with E",
          "Step 09 - Puzzles on this and initialization of member variables",
          "Step 10 - First Advantage of Encapsulation",
          "Step 11 - Introduction to Encapsulation - Level 2",
          "Step 12 - Encapsulation Exercises - Better Validation and Book class",
          "Step 13 - Introdcution to Abstraction",
          "Step 14 - Introduction to Java Constructors",
          "Step 15 - Introduction to Java Constructors - Exercises and Puzzles",
          "Step 16 - Introduction to Object Oriented Programming - Conclusion",
          "Do You Want To Help Us?",
          "DO NOT SKIP - FLASH CARDS",
          "Section Quiz",
          "What should I do when I face a challenge"
        ],
        "Java Coding Exercises - Set 2": [
          "Coding Exercise: Inches to Object (Feet, Inches)",
          "Solution Video For Coding Exercise - Inches to Object (Feet, Inches)",
          "Coding Exercise: Create a Square class",
          "Solution Video For Coding Exercise - Create a Square class",
          "Coding Exercise: Create a Point class with 2 d co-ordinates x,y",
          "Solution Video For Coding Exercise - Create a Point class with 2 d co-ordinates",
          "Coding Exercise: RGB Color Class",
          "Solution Video For Coding Exercise - RGB Color Class",
          "All Work and No Play Makes You a Dull Kid"
        ]
      },
      "requirements": [
        "You have an attitude to learn while having fun :)",
        "You have ZERO Programming Experience and Want to Learn Java"
      ],
      "description": "LEARN JAVA PROGRAMMING WRITING 200+ JAVA PROGRAMS, PUZZLES & EXERCISES. Get Interview Ready!\nRECOMMENDED for absolute beginners to Java and Programming!\nBONUS - Java Interview Guide with 200+ Questions and a companion website\nBONUS - Learn to Build REST API with Spring, Spring Boot, and JPA\n\n\n8 Things YOU need to know about this JAVA PROGRAMMING Course\n#1: Nearing 300,000 Learners - One of the highest-rated Java Courses on Udemy!\n#2: Designed for ABSOLUTE BEGINNERS to Java Programming (Core + Advanced)\n#3: HANDS-ON - Write 100+ Programs - The best way to learn Java Programming is to get your hands dirty!\n#4: PUZZLES and EXERCISES to help reinforce your learning\n#5: One of the first courses to be updated to JAVA 24. Covers all new features in Java 9, Java 10, Java 11, Java 12, Java 13, Java 14, Java 15, Java 16, Java 17, Java 18, Java 19, Java 20, Java 21, Java 22, Java 23 and Java 24.\n#6: FREE 150 Page Course Companion Web Site\n#7: BONUS - Learn to Build REST API with Spring, Spring Boot, and JPA (Hibernate)\n#8: BONUS - Java Interview Guide with 200+ Questions and a companion website\n\n\nWHAT OUR LEARNERS ARE SAYING:\n5 STARS - The best Java course out there for Beginners. Highly recommended.\n5 STARS - This course exceeded all my expectations. HIGHLY RECOMMENDED!\n5 STARS - Great mix of theory and exercises!\n5 STARS - What a great course!!!\n5 STARS - This is the best Java course I've come across. It's straight to the point without any missing details. You can get an idea of what you're getting into working with Java fast with this course. I really like it.\n5 STARS - Never thought taking an online course will be so helpful. The instructor is quite engaging, gives a good amount of exercises.\n5 STARS - This course is wonderful! I really enjoy it. It really is for beginners, so it's very helpful for people which don't know anything about programming.\n5 STARS - It's very well thought out. I enjoy the constant exercises and the challenge they present to make things happen.\n\n\nCOURSE OVERVIEW\nJava is one of the most popular programming languages. Java offers both object-oriented and functional programming features.\nWe take a hands-on approach using a combination of JShell and Eclipse as an IDE to illustrate more than 200 Java Coding Exercises, Puzzles, and Code Examples. This course assumes no previous ( beginner ) programming or Java experience. If you’ve never programmed a computer before, or if you already have experience with another programming language and want to quickly learn Java, this is a perfect course for you.\nIn more than 250 Steps, we explore the most important Core Java Programming Language Features\nBasics of Java Programming - Expressions, Variables, and Printing Output\nJava Operators - Java Assignment Operator, Relational and Logical Operators, Short Circuit Operators\nJava Conditionals and If Statement\nMethods - Parameters, Arguments, and Return Values\nObject-Oriented Programming - Class, Object, State, and Behavior\nBasics of OOPS - Encapsulation, Abstraction, Inheritance, and Polymorphism\nBasics about Java Data Types - Casting, Operators, and More\nJava Built-in Classes - BigDecimal, String, Java Wrapper Classes\nConditionals with Java - If Else Statement, Nested If Else, Java Switch Statement, Java Ternary Operator\nLoops - For Loop, While Loop in Java, Do While Loop, Break and Continue\nImmutability of Java Wrapper Classes, String and BigDecimal\nJava Dates - Introduction to LocalDate, LocalTime and LocalDateTime\nJava Array and ArrayList - Java String Arrays, Arrays of Objects, Primitive Data Types, toString and Exceptions\nIntroduction to Variable Arguments\nBasics of Designing a Class - Class, Object, State and Behavior. Deciding State and Constructors.\nUnderstanding Object Composition and Inheritance\nJava Abstract Class and Interfaces. Introduction to Polymorphism.\nJava Collections - List Interface(ArrayList, LinkedList and Vector), Set Interface (HashSet, LinkedHashSet and TreeSet), Queue Interface (PriorityQueue) and Map Interface (HashMap, HashTable, LinkedHashMap and TreeMap() - Compare, Contrast and Choose\nGenerics - Why do we need Generics? Restrictions with extends and Generic Methods, WildCards - Upper Bound and Lower Bound.\nFunctional Programming - Lambda Expression, Stream and Operations on a Stream (Intermediate Operations - Sort, Distinct, Filter, Map and Terminal Operations - max, min, collect to List), Functional Interfaces - Predicate Interface, Consumer Interface, Function Interface for Mapping, Method References - static and instance methods\nIntroduction to Threads and MultiThreading - Need for Threads\nImplementing Threads - Extending Thread Class and Implementing Runnable Interface\nStates of a Thread and Communication between Threads\nIntroduction to Executor Service - Customizing the number of Active Threads. Returning a Future, invokeAll, and invokeAny\nIntroduction to Exception Handling - Your Thought Process during Exception Handling. try, catch, and finally. Exception Hierarchy - Checked Exceptions vs Unchecked Exceptions. Throwing an Exception. Creating and Throwing a Custom Exception - CurrenciesDoNotMatchException. Try with Resources - New Feature in Java 7.\nList files and folders in Directory with Files list method, File walk method and find methods. Read and write from a File.\nCovers Java New Features from Java 8 to Java 24 (incl. Java 17, Java 21)\nJava 8 – Embraced functional programming with Lambda expressions and Streams.\nJava 9 – Introduced modularization to the Java Platform - enabling faster startup and less memory footprint for Java applications\nJava 10 to NOW – Started the six-month release cycle for faster updates and quick feedback. (Java 10 to Java 25 to ..)\nJava 11 to NOW – Reduced code verbosity\nSwitch Expressions – More concise conditional logic. (Java 14)\nText Blocks – Simplifies multi-line strings. (Java 15)\nRecords – Reduces boilerplate for data objects. (Java 16)\nPattern Matching – Enhances code readability and conciseness. (Java 16)\nSealed Classes - Controlled inheritance of your class hierarchies. (Java 17)\nUnnamed Variables & Patterns – Allows ignoring unused variables in code. (Java 22)\nMarkdown Documentation Comments – Enhances Javadoc with Markdown support (Java 23)\nStream Gatherers – Introduces new ways to aggregate stream data. (Java 24)\nJava 21 to NOW:\nProject Loom – Virtual threads for high-performance concurrency. (Java 21)\nCloud & Container-Ready – Optimized for modern cloud-native applications.\n\n\nStart Learning Now. Hit the Enroll Button!",
      "target_audience": [
        "You have ZERO programming experience and want to learn Java Programming",
        "You are a Beginner at Java Programming and want to Learn to write Great Java Programs",
        "You want to learn the Basics of Object Oriented Programming with Java",
        "You want to learn the Basics of Functional Programming with Java"
      ]
    },
    {
      "title": "Markdown Mastery: Simple yet Powerful Writing Format",
      "url": "https://www.udemy.com/course/markdown/",
      "bio": "A Comprehensive Guide to the Markdown Writing Format offering both technical examples and hands-on demos.",
      "objectives": [
        "Understand the reasons for learning Markdown",
        "Write confidently using the Markdown format",
        "Use enhanced flavors of Markdown when appropriate",
        "Use Markdown in a variety of scenarios as a writing format",
        "Export Markdown into publishing formats like HTML or PDF",
        "Use Markdown on mobile and cloud-based workflows"
      ],
      "course_content": {
        "Introduction": [
          "Course Welcome and Goals",
          "What is Markdown and why it matters?"
        ],
        "Markdown Editor Setup": [
          "Editor Overview",
          "Welcome to StackEdit"
        ],
        "Markdown Basics": [
          "Introducing the Original Markdown",
          "Paragraphs and Line Breaks",
          "Headers",
          "Showing Emphasis",
          "Quotes",
          "Code Styles and Blocks",
          "Ordered and Unordered Lists",
          "Horizontal Rules",
          "Using Links in Documents",
          "Images",
          "Inline HTML"
        ],
        "Enhanced Markdown": [
          "Enhanced Markdown Overview",
          "StackEdit Settings Adjustment",
          "Tables",
          "Fenced Code Blocks"
        ],
        "Using Markdown": [
          "Using Markdown Overview",
          "StackEdit Settings for Using Markdown",
          "Outlining and Brainstorming with Markdown",
          "Note-taking with Markdown, Part 1: Editorial on iOS",
          "Note-taking with Mardown, Part 2: Back to StackEdit",
          "Markdown and Wordpress; Writing a Blog Post",
          "Novel Example, Part 1: Formatting a Novel",
          "Novel Example, Part 2: Exporting to Another Format"
        ],
        "Conclusion": [
          "Review and Final Words",
          "Bonus: Exclusive Student Discounts"
        ]
      },
      "requirements": [
        "Basic Computer Skills",
        "No other skills required"
      ],
      "description": "Markdown Mastery: Simple Yet Powerful Writing Format\nAre you looking for a writing format not encumbered by commercial, closed-format? Would you like that format to be based on plain text? However, not complex like HTML.\nIn this course, students will learn about the Markdown format which is great as a source writing format for notes, outlines, blog posts, and perhaps even a novel. Academic theory, technical demos, and practical examples are all balance in this course to provide a comprehensive treatment of Markdown and its various uses.\nCourse Outline\nIntroduction and Setup provides an introduction to this course and setup the editor used throughout the course.\nOnce we understand the benefits and purpose of Markdown and have an editor ready to go, we start off with Markdown Basics that covers all the core aspects of the Markdown syntax (formatting).\nWith the foundations in place, we move on to extended or enhanced flavor (variations) of Markdown. These enhancements have been nearly universally adopted, they are nearly as well supported as the original core of Markdown.\nWith the Markdown format primer out of the way, the course shifts from technical execution of various features of Markdown to practical examples and use-cases of Markdown in action.\nCourse Features\nPresentations provide audio/video training of conceptual ideas. Since few like slide-ware presentations, slide-presentations are kept to a minimum.\nScreencasts provide a video of the instructor's computer system with any actions, commands, or screens displayed and narrated. There is nearly 1 hour of screencast based video training in order to step through each of the various aspects of this course.\nSpecial Notes\nThe technical (formatting) parts of this course are also part of the \"Git Complete\" course. However, much of this course is unique -- especially the practical examples provided.",
      "target_audience": [
        "Note-takers",
        "Software Engineers working with GitHub or BitBucket",
        "Writers",
        "Anyone that wants an easy to remember, but powerful text formatting",
        "Anyone that wants a mobile and cloud-enabled writing, outlining, and note-taking workflow",
        "Software and Web Developers that write project documentation, including README files"
      ]
    },
    {
      "title": "[NEW] Python Bootcamp: Beginner to Master Programming",
      "url": "https://www.udemy.com/course/python-programming-for-beginners-with-exercises/",
      "bio": "Beginner to Python Programming? Get FREE access to 200+ Python Programming Labs for Learning, Practice and Interview.",
      "objectives": [
        "You will learn to program with Python",
        "You will solve hundreds of Python Exercises",
        "You will solve hundreds of Python Puzzles",
        "You will become proficient with Python Programming"
      ],
      "course_content": {
        "Course Overview - Python Programming": [
          "Python Bootcamp - Course Introduction",
          "Course Downloads - Course Presentation"
        ],
        "Python Cloud IDE Environment – Code Without Installation": [
          "Getting Started with Python Programming - Objectives",
          "Getting Started with Learning Labs",
          "Learning Lab - Getting Started with Printing Text",
          "Learning Lab: Getting Started with Printing Text",
          "DO NOT SKIP - in28minutes Learning Community",
          "Python Coding Exercise - Hello Coding Exercises",
          "Python Coding Exercise: Hello Coding Exercises",
          "Python Coding Exercise: Hello World",
          "Python Coding Exercise - Hello World"
        ],
        "Getting Started with Python - Operators and Expressions": [
          "Maximizing Learning Efficiency with Playback Speed",
          "Learning Lab - Playing with Operators And Expressions",
          "Learning Lab: Playing with Operators And Expressions",
          "Python Coding Exercise: Print Number of Minutes in a Day",
          "Python Coding Exercise - Print Number of Minutes in a Day",
          "Python Coding Exercise: Print Number of Seconds in a Day",
          "Python Coding Exercise - Print Number of Seconds in a Day",
          "FIRST MILESTONE How to remember things for long time"
        ],
        "Getting Started with Python - Built-in Functions": [
          "Learning Lab: Exploring Python Built-in Functions",
          "Learning Lab - Exploring Python Built in Functions",
          "Python Coding Exercise: Calculate Absolute Value",
          "Python Coding Exercise - Calculate Absolute Value",
          "Python Coding Exercise: Calculate Power of a Number",
          "Python Coding Exercise - Calculate Power of a Number",
          "Puzzles - Playing with Builtin Functions",
          "Puzzles: Playing with Builtin Functions",
          "Python Coding Exercise: Finding the Maximum Number",
          "Python Coding Exercise - Finding the Maximum Number",
          "Getting Started with Python Programming - Summary",
          "Section Quiz - Getting Started with Python Programming"
        ],
        "Introduction to Variables & Assignment in Python": [
          "Introduction to Variables & Assignment - Objectives",
          "Learning Lab - Introduction to Variables",
          "Learning Lab: Introduction to Variables",
          "Coding Exercise: Creating and Printing Variables",
          "Coding Exercise - Creating and Printing Variables",
          "Coding Exercise: Understanding Case Sensitivity in Python Variables",
          "Coding Exercise - Understanding Case Sensitivity in Python Variables",
          "Coding Exercise: Variable Names Starting with an Underscore in Python",
          "Coding Exercise - Variable Names Starting with an Underscore in Python",
          "Learning Lab - Playing with Assignment in Python",
          "Learning Lab: Playing with Assignment in Python",
          "Puzzles - Playing with Assignment",
          "Puzzles: Playing with Assignment",
          "Coding Exercise: Variable Assignment and Mathematical Operations",
          "About Your Instructor",
          "Coding Exercise - Variable Assignment and Mathematical Operations",
          "Coding Exercise: Updating Variable Values",
          "Coding Exercise - Updating Variable Values",
          "Coding Exercise: Variable Assignment and Expression Evaluation",
          "Coding Exercise - Variable Assignment and Expression Evaluation",
          "Make the Best Use of Coding Exercises",
          "My 10 Rules for Happy Programmers",
          "Introduction to Variables & Assignment - Summary",
          "Section Quiz - Variables & Assignment in Python",
          "How to be consistent?"
        ],
        "Introduction to For Loop in Python Programming": [
          "Introduction to For Loop - Objectives",
          "Learning Lab - Introduction to For Loop in Python 01",
          "Learning Lab - Introduction to For Loop in Python 02",
          "Learning Lab: Introduction to For Loop in Python",
          "Coding Exercise: Print Sum of Squares Of First 10 Numbers",
          "Coding Exercise - Print Sum of Squares Of First 10 Numbers",
          "Coding Exercise: Print Sum of Cubes Of First 10 Numbers",
          "Coding Exercise - Print Sum of Cubes Of First 10 Numbers",
          "Coding Exercise: Print Factorial Of 6",
          "Coding Exercise - Print Factorial Of 6",
          "Do You Want to Help Others Like You?",
          "Puzzles - Playing with For Loop and range function",
          "Puzzles: Playing with For Loop and range function"
        ],
        "Nested Loop & Pattern Printing in Python": [
          "Learning Lab - Introduction to Nested For Loops in Python",
          "Learning Lab: Introduction to Nested For Loops in Python",
          "Learning Lab - Printing a Square Pattern with Nested For Loops",
          "Learning Lab: Printing a Square Pattern with Nested For Loops",
          "Learning Lab - Printing Right Angled Triangle with Nested For Loops",
          "Learning Lab: Printing Right-Angled Triangle with Nested For Loops",
          "High Level vs Low Level Programming Languages",
          "Introduction to For Loop - Summary",
          "Section Quiz - For Loop in Python",
          "How to Stay UpTo Date With Technology Changes"
        ],
        "Master Functions in Python Programming": [
          "Getting Started with Functions - Objectives",
          "Learning Lab - Getting Started with Functions in Python",
          "Learning Lab: Getting Started with Functions in Python",
          "Learning Lab - Python Functions Can Return Values 01",
          "Learning Lab - Python Functions Can Return Values 02",
          "Learning Lab: Python Functions Can Return Values",
          "Coding Exercise: Calculate the Cube of a Number",
          "Coding Exercise - Calculate the Cube of a Number",
          "Coding Exercise: Calculate Product of Four Numbers",
          "Coding Exercise - Calculate Product of Four Numbers",
          "Coding Exercise: Calculate Average of Five Numbers",
          "Coding Exercise - Calculate Average of Five Numbers",
          "Story of in28minutes",
          "Coding Exercise: Calculate the Third Angle of a Triangle",
          "Coding Exercise - Calculate the Third Angle of a Triangle",
          "Coding Exercise: Calculate the Sum of Squares of First n Even Numbers",
          "Coding Exercise - Calculate the Sum of Squares of First n Even Numbers",
          "Learning Lab - Default Function Arguments in Python",
          "Learning Lab: Default Function Arguments in Python",
          "Puzzles - Playing with Functions",
          "Puzzles: Playing with Functions",
          "Coding Exercise: Calculate Factorial",
          "Coding Exercise - Calculate Factorial",
          "Getting Started with Functions - Summary",
          "Section Quiz - Functions in Python",
          "What should I do when I face a challenge"
        ],
        "Introducing Data Types in Python Programming": [
          "Introducing Data Types - Objectives",
          "Learning Lab - Numeric Data Types",
          "Learning Lab: Numeric Data Types",
          "Coding Exercise: Calculate Simple Interest",
          "Coding Exercise - Calculate Simple Interest",
          "Learning Lab - Numeric Types and Operations in Python",
          "Learning Lab: Numeric Types and Operations in Python",
          "Learning Lab - Playing with Decimal",
          "Learning Lab: Playing with Decimal",
          "Learning Lab - Boolean Types in Python",
          "Learning Lab: Boolean Types in Python",
          "Puzzles - Playing with Data Types and more",
          "Puzzles: Playing with Data Types and more",
          "Coding Exercise: Library Access Permission",
          "Coding Exercise - Library Access Permission",
          "Coding Exercise: Vehicle Eligibility for Race",
          "Coding Exercise - Vehicle Eligibility for Race",
          "Introducing Data Types - Summary",
          "Section Quiz - Data Types in Python",
          "All Work and No Play Makes You a Dull Kid"
        ],
        "Introduction to Conditional Statements in Python": [
          "Exploring Conditionals in Python - Objectives",
          "Learning Lab - Introduction to Conditionals in Python",
          "Learning Lab: Introduction to Conditionals in Python",
          "Learning Lab - Comparing Values with if Statements",
          "Learning Lab: Comparing Values with if Statements",
          "Coding Exercise: Check for a Valid Triangle",
          "Coding Exercise - Check for a Valid Triangle",
          "Coding Exercise: Calculate the Sum of Divisors",
          "Coding Exercise - Calculate the Sum of Divisors",
          "Coding Exercise: Check if a Number is a Perfect Number",
          "Coding Exercise - Check if a Number is a Perfect Number",
          "Coding Exercise: Find Last Digit of a Number",
          "Coding Exercise - Find Last Digit of a Number",
          "Learning Lab - Logical Operators - and, or, not, Logical ^ (XOR)",
          "Learning Lab: Logical Operators - and, or, not, Logical ^ (XOR)",
          "Coding Exercise: Are Both Numbers Even",
          "Coding Exercise - Are Both Numbers Even",
          "Coding Exercise: Check if a Year is a Leap Year",
          "Coding Exercise - Check if a Year is a Leap Year",
          "Learning Lab - Logical Operations - NOT and NOT EQUAL TO",
          "Learning Lab: Logical Operations - NOT and NOT EQUAL TO",
          "Coding Exercise: Is it a Right Angled Triangle?",
          "Coding Exercise - Is it a Right Angled Triangle?",
          "Learning Lab - If, Else, and Elif in Python",
          "Learning Lab: If, Else, and Elif in Python",
          "Puzzles - Playing with Conditionals",
          "Puzzles: Playing with Conditionals",
          "Coding Exercise: Student Grades A to F based on Marks",
          "Coding Exercise - Student Grades A to F based on Marks",
          "Learning Lab - Understanding Python Keywords",
          "Learning Lab: Understanding Python Keywords",
          "Coding Exercise: Weather Advisor",
          "Coding Exercise - Weather Advisor",
          "Exploring Conditionals in Python - Summary",
          "Section Quiz - Conditionals in Python",
          "How to be Productive - 3 Tips"
        ]
      },
      "requirements": [
        "No programming experience is needed",
        "This course is designed for absolute beginners to Python"
      ],
      "description": "LEARN PYTHON PROGRAMMING WRITING 200+ PYTHON LABS, PUZZLES & EXERCISES\n\n\n\"Fun filled learning environment\"\n\"Never Believe Learning Code Is So Much Fun\"\n\"takes fears away\"\n\n\nDiscover a fun-filled learning environment designed to make Python programming enjoyable and accessible to everyone. Whether you're starting from scratch or looking to solidify your fundamentals, this course is tailored for you.\n\n\nRECOMMENDED for absolute beginners to Python and Programming!\nPython is one of the top programming languages today. Python is used to build web applications, machine learning applications, data engineering apps and a lot more.\nIn this course, you will learn Python programming from ZERO.\n\n\nWhy Choose This Course?\n\n\nAbsolute Beginner Friendly: No prior Python programming knowledge required.\nExtensive Practice: Solve over 200 Python labs and coding exercises, alongside hundreds of puzzles to strengthen your problem-solving skills.\nNo Setup Hassle: Learn Python directly in your browser with the Udemy Python Coding Exercise Platform. No need to install Python or set up an IDE on your local machine.\nExpert Guidance: Led by Ranga Karanam, a seasoned educator and creator of acclaimed courses in Programming, Cloud, and DevOps.\nHands-On Learning: Embrace a hands-on, step-by-step approach that demystifies Python programming and builds your confidence.\nI'm Ranga Karanam. I'm the founder of in28minutes and creator of some of the worlds most popular courses on Programming, Cloud and DevOps. I'm certified on multiple clouds - Azure, GCP and AWS and I've helped a MILLION learners around the world acquire new tech skills. Rest assured you are in great hands.\nI'm a great believer that the best way to learn is by doing and we designed this course to be hands-on. You will learn Python with more than 150 learning labs and coding exercises.\nWe will be using the Udemy Python Coding Exercise Platform to write and execute Python code. So, you don't need anything other than a browser installed on your machine to learn from this course.\nProgramming is a lot easier to learn if you see it as a fun activity, and that's what we would want to enable during this course. Help you have fun with programming.\nWe will take a hands on, step by step approach.\nBy the end of the course, you will know everything to start your journey to a great Python Programmer.\n\n\nAre you ready to become an expert on Python Programming? What are you waiting for?\n\n\nEnroll now and start your Python programming adventure today!",
      "target_audience": [
        "You are beginner to programming",
        "You want to learn programming with Python",
        "You want to solve a number of Python programming exercises",
        "You want to learn Python Fundamentals"
      ]
    },
    {
      "title": "RabbitMQ : Messaging with Java, Spring Boot And Spring MVC",
      "url": "https://www.udemy.com/course/rabbitmq-messaging-with-java-spring-boot-and-spring-mvc/",
      "bio": "Java Messaging Service (JMS) with Spring Framework. Learn Asynchronous Messaging, Queue, Exchange & Routing Of Messages",
      "objectives": [
        "Java Messaging Service (JMS)",
        "RabbitMQ Message Broker",
        "How to create Exchange & Queue",
        "Publishing Message To RabbitMQ",
        "Consuming Message From RabbitMQ",
        "Different Types Of Exchanges With Examples",
        "RabbitMQ With Spring Boot Using Rabbit Template and Rabbit Listener",
        "RabbitMQ With Spring MVC Using Rabbit Template and Rabbit Listener",
        "Spring Boot, Spring Cloud and Spring MVC Applications Deployment To Pivotal Cloud Foundry",
        "Spring Boot & RabbitMQ On Heroku (Cloud Platform)"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Introduction to JMS and RabbitMQ": [
          "Understanding Of Java Messaging Service (JMS)",
          "What is Exchange and Queue ?",
          "Different Types Of Exchanges",
          "RabbitMQ Installation"
        ],
        "Getting Started With RabbitMQ": [
          "Create Queue in RabbitMQ",
          "Publishing Message To Queue",
          "Consuming Message From Queue",
          "Multiple Consumers Scenario & Round Robin Fashion",
          "Purge The Messages"
        ],
        "Real Time Example With JSON Message": [
          "Understanding Real Time Scenario To Use RabbitMQ",
          "Publishing JSON Message To Queue"
        ],
        "Direct Exchange": [
          "What is Direct Exchange ?",
          "Creating Direct Exchange & Binding Queues with it",
          "Publishing Message To Direct Exchange",
          "Consuming Message From Queue",
          "Knowledge Brush Up Quiz"
        ],
        "Fanout Exchange": [
          "What is Fanout Exchange ?",
          "Creating Fanout Exchange & Binding Queues with it",
          "Publishing Message To Fanout Exchange"
        ],
        "Topic Exchange": [
          "What is Topic Exchange ?",
          "Creating Topic Exchange & Binding Queues with it",
          "Publishing Message To Topic Exchange"
        ],
        "Headers Exchange": [
          "What is Headers Exchange ?",
          "Creating Headers Exchange & Binding Queues with it",
          "Publishing Message To Headers Exchange",
          "Knowledge Brush Up Quiz"
        ],
        "RabbitMQ With Spring Boot": [
          "Introduction To RabbitMQ With Spring Boot & Rabbit Template",
          "Spring Boot Project Set Up & Configuration",
          "Rabbit Template With Spring Boot",
          "Rabbit Listener With Spring Boot",
          "Publishing Message To Headers Exchange Using Rabbit Template",
          "Rabbit Listener With Spring Boot & Headers Exchange"
        ],
        "RabbitMQ With Spring MVC": [
          "Introduction To RabbitMQ With Spring MVC & Rabbit Template",
          "Spring MVC Project Set Up & Configuration",
          "Rabbit Template With Spring MVC",
          "Rabbit Listener With Spring MVC",
          "Publishing Message To Headers Exchange Using Rabbit Template",
          "Rabbit Listener With Spring MVC & Headers Exchange"
        ]
      },
      "requirements": [
        "Knowledge Of Core Java Required.",
        "Having Knowledge of Spring Boot OR Spring MVC will add an advantage."
      ],
      "description": "***** Some Reviews From Students *****\nLearned everything I needed to about RabbitMQ is this course. EXCELLENT!\nGood course on rabbitmq. have learned a lot. specially rabbitmq with pivotal cloud foundry is very much interesting.\nIt covers technical details about RabbitMQ and how to use them from Java, that's what I was looking for.\nGood explanation in simple terms.\nExcellent course on RabbitMQ. Have learned in deep about exchange, queue and best part is that it covers all with Spring boot and Spring MVC. Finally learned how to use RabbitMQ on cloud using Pivotal Cloud Foundry.\nReal life example given to relate with different component is really helpful.\n\n\nRabbitMQ : It is an open  source message broker software. You might have heard Java Messaging Service (JMS) by which two Java applications can communicate with each other.\nUsing RabbitMQ message broker two Java applications can interact with each other in same way as we human being do by text message.\nMessage can not go directly from one Java app to other and hence we need Queue and Exchange.\nDo not aware of RabbitMQ ,Queue, Exchange OR JMS ? If YES, then you came to right place as you will learn all these things in this course. You can say Its all in one for you.\nThis course is all about RabbitMQ starting with Core Java and then using RabbitMQ with Spring Boot and Spring MVC.\nAt the end you will learn to deploy your RabbitMQ Spring MVC and Spring Boot application to Pivotal Cloud Foundry (PCF).\nLet me give you an idea that what you will learn from this course.\nYou will learn concept of Java Messaging Service (JMS) & RabbitMQ Message Broker.\nYou will learn how to publish and consume messages using core Java.\nYou will learn different types of exchanges like Direct, Fanout, Topic and Headers Exchange.\nYou will learn to use RabbitMQ in Spring Boot application using Rabbit Template and Rabbit Listener.\nYou will learn to use RabbitMQ in Spring MVC application using Rabbit Template and Rabbit Listener.\nSpring Boot, Spring Cloud and Spring MVC Applications Deployment To Pivotal Cloud Foundry.\nSpring Boot and RabbitMQ Deployment To Heroku (Cloud Platform)\n\n\nCourse Topics & Lectures :-\n• Introduction to JMS and RabbitMQ\nUnderstanding Of Java Messaging Service (JMS)\nWhat is Exchange and Queue ?\nDifferent Types Of Exchanges\nRabbitMQ Installation\n\n\n• Getting Started With RabbitMQ\nCreate Queue in RabbitMQ\nPublishing Message To Queue\nConsuming Message From Queue\nMultiple Consumers Scenario & Round Robin Fashion\nPurge The Messages\n\n\n• Real Time Example With JSON Message\nUnderstanding Real Time Scenario To Use RabbitMQ\nPublishing JSON Message To Queue\n\n\n• Direct Exchange\nWhat is Direct Exchange ?\nCreating Direct Exchange & Binding Queues with it\nPublishing Message To Direct Exchange\nConsuming Message From Queue\n\n\n• Fanout Exchange\nWhat is Fanout Exchange ?\nCreating Fanout Exchange & Binding Queues with it\nPublishing Message To Fanout Exchange\n\n\n• Topic Exchange\nWhat is Topic Exchange ?\nCreating Topic Exchange & Binding Queues with it\nPublishing Message To Topic Exchange\n\n\n• Headers Exchange\nWhat is Headers Exchange ?\nCreating Headers Exchange & Binding Queues with it\nPublishing Message To Headers Exchange\n\n\n• RabbitMQ With Spring Boot\nIntroduction To RabbitMQ With Spring Boot & Rabbit Template\nSpring Boot Project Set Up & Configuration\nRabbit Template With Spring Boot\nRabbit Listener With Spring Boot\nPublishing Message To Headers Exchange Using Rabbit Template\nRabbit Listener With Spring Boot & Headers Exchange\n\n\n• RabbitMQ With Spring MVC\nIntroduction To RabbitMQ With Spring MVC & Rabbit Template\nSpring MVC Project Set Up & Configuration\nRabbit Template With Spring MVC\nRabbit Listener With Spring MVC\nPublishing Message To Headers Exchange Using Rabbit Template\nRabbit Listener With Spring MVC & Headers Exchange\n\n\n• RabbitMQ On Cloud\nIntroduction To Pivotal Cloud Foundry (PCF)\nCreating Account On Pivotal Cloud Foundry (PCF)\nCreating RabbitMQ Service On Pivotal Cloud Foundry (PCF)\nSpring Boot Deployment To Pivotal Cloud Foundry (PCF)\nSpring Boot Deployment To PCF Using Spring Cloud\nSpring MVC Deployment To Pivotal Cloud Foundry (PCF)\n\n\n• Default Exchange\nWhat Is Default Exchange ?\nDefault Exchange Example\n\n\n• Exchange To Exchange Binding\nIntroduction To Exchange To Exchange Binding\nBind Exchange with Another Exchange\nExchange To Exchange Binding In Action\n\n\n• RabbitMQ On Heroku (Cloud Platform)\nIntroduction To Heroku\nCreate Account On Heroku\nVerify Account On Heroku\nDownload and Install Git\nDownload & Install Heroku CLI\nCreate Heroku Application\nGetting RabbitMQ on Heroku\nHeroku CLI Login\nDeploy Spring Boot App On Heroku\n\n\nNow what are you waiting for ?\nGrab the course quickly and get started to learn RabbitMQ message broker with Java. Spring MVC, Spring Boot, Spring Cloud and deploy your RabbitMQ Spring MVC and Spring Boot application to Pivotal Cloud Foundry (PCF).\nSee you in the course.",
      "target_audience": [
        "Any Java Developer Curious For RabbitMQ and Java Messaging Service (JMS)"
      ]
    },
    {
      "title": "Mastering Reactive Extensions with C# and .NET",
      "url": "https://www.udemy.com/course/rxdotnet/",
      "bio": "A complete course on Rx.NET",
      "objectives": [
        "Create and consume observable sequences",
        "Generate sequences using Observable factory methods",
        "Quickly work with sequences using Subject classes",
        "Combine multiple sequences into a single stream",
        "Master time-related sequence processing"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Introduction"
        ],
        "Key Interfaces": [
          "Overview",
          "Observer Design Pattern",
          "IObserver<T>",
          "IObservable<T>",
          "Key Interfaces",
          "Summary"
        ],
        "Subjects": [
          "Overview",
          "Subject<T>",
          "Unsubscribing",
          "Proxy and Broadcast",
          "ReplaySubject<T>",
          "BehaviorSubject<T>",
          "AsyncSubject<T>",
          "Implementing IObservable",
          "Subjects",
          "Summary"
        ],
        "Fundamental Sequence Operators": [
          "Overview",
          "Simple Factory Methods",
          "Observable.Create",
          "Sequence Generators",
          "Converting Into Observables",
          "Sequence Filtering",
          "Sequence Inspection",
          "Sequence Transformation",
          "Sequence Aggregation",
          "Fundamental Sequence Operators",
          "Summary"
        ],
        "Advanced Sequence Operators": [
          "Overview",
          "Exception Handling",
          "Sequence Combinators",
          "Time-Related Sequence Processing",
          "Reactive Extensions Event Broker",
          "Advanced Sequence Operators",
          "Summary",
          "Course Summary",
          "Bonus Lecture: Other Courses at a Discount"
        ]
      },
      "requirements": [
        "Good understanding of C# and .NET",
        "Good understanding of LINQ"
      ],
      "description": "This course covers Reactive Extensions, a technology for working with streams of data in a reactive fashion. With Reactive Extensions, you can ingest, filter analyze and re-broadcast data streams. You can also build your own components which generate reactive streams for others to produce.\nReactive Extensions started its life as a .NET technology, but has since been ported to every other language imaginable, including even JavaScript. This course shows how Rx can be used specifically with C# and .NET.\nTopics Covered\nThe reactive paradigm and push collections\nKey Rx operators\nRx's Subject classes that help working with observable sequences\nFundamental Stream Operators\nAdvanced Stream Operators, including operations on multiple streams\nPre-requisites\nThis is an intermediate-level course, designed for serious .NET programmers wishing to expand their arsenal of .NET related skills. To take the course, you will need the following:\nGood knowledge of C# and .NET framework\nGood understanding of .NET application development (esp. collections/data storage)\nGood knowledge of LINQ\nCursory knowledge of TPL may be benefitial\nCourse Materials\n\n100% hands-on, with live demonstrations of every topic covered\nPresented in Visual Studio 2017\nEvery lesson comes with a single-file demo\nEnd-of-section quizzes are available\nLearning Outcomes\nBy the end of the course, students should:\nUnderstand the use of reactive sequences\nAppreciate key observable/observer .NET interfaces and how to use them\nEfficiently use Subject classes for setting up simple scenarios\nApply single-stream operators, including operators involving time\nApply advanced operators, including multi-stream operators",
      "target_audience": [
        "Experienced .NET developers",
        "Anyone interested in the Reactive paradigm"
      ]
    },
    {
      "title": "The Rust Programming Language",
      "url": "https://www.udemy.com/course/rust-lang/",
      "bio": "Learn a modern, powerful yet safe systems programming language!",
      "objectives": [
        "Solve problems in Rust",
        "Understand Rust's strengths and weaknesses",
        "Effectively leverage Rust's memory safety guarantees",
        "Write applications and libraries",
        "Test and document your code"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Installing and Configuring Rust",
          "Hello, Rust!",
          "Introducing the Cargo Package Manager",
          "Rust in IntelliJ IDEA"
        ],
        "Types and Variables": [
          "Numbers on the Computer",
          "Application Entrypoint",
          "Core Data Types",
          "Operators",
          "Scope and Shadowing",
          "Declaring and Using Constants",
          "Stack and Heap",
          "Debugging Rust Applications with CLion"
        ],
        "Control Flow": [
          "If Statement",
          "While and Loop",
          "For Loops",
          "Match Statement",
          "Combination Lock"
        ],
        "Data Structures": [
          "Structs",
          "Enumerations",
          "Unions",
          "Option<T> and if let/while let",
          "Arrays",
          "Slices",
          "Tuples",
          "Pattern Matching",
          "Generics"
        ],
        "Standard Collections": [
          "Overview",
          "Vec(tor)",
          "HashMap",
          "HashSet",
          "Iterators"
        ],
        "Characters and Strings": [
          "Strings",
          "String Formatting (format!)",
          "Number Guessing Game"
        ],
        "Functions": [
          "Functions and Function Arguments",
          "Methods",
          "Closures",
          "Higher-Order Functions"
        ],
        "Traits": [
          "Traits",
          "Trait Parameters",
          "Into",
          "Drop",
          "Operator Overloading",
          "Static Dispatch",
          "Dynamic Dispatch",
          "Why Dynamic Dispatch?",
          "Vectors of Different Objects"
        ],
        "Lifetime and Memory": [
          "Ownership",
          "Borrowing",
          "Lifetime",
          "Lifetime in Structure Implementation",
          "Reference-Counted Variables (Rc)",
          "Atomic Reference-Counted Variables (Arc)",
          "Using a Mutex for Thread-Safe Mutability"
        ],
        "Advanced Topics": [
          "Circular References"
        ]
      },
      "requirements": [
        "Basic knowledge of computer science",
        "A computer with a Rust-enabled IDE (VisualRust, intellij-rust, etc.)"
      ],
      "description": "This course will teach you the fundamentals of Rust, a modern programming language that has the both the power of native code as well as the safety of some managed languages. In this course you will learn the following:\nHow to download and install Rust; how to compile programs and (optionally) work with an IDE.\nLearn about fundamental data types and how to use them to declare variables.\nUndersand arrays, vectors and strings, the concept of slices.\nLearn to create functions, methods, closures, higher-order functions.\nUnderstand how to create various data structures such as structs and enums; also traits.\nMaster Rust's explicit take on the concept of lifetime with ownership, borrowing, lifetime specifiers, lifetime elision.\nLearn how to safely share data around your (possibly multithreaded) application with Rc, Arc and Mutex.\nUse Rust's package managent using Cargo.\nLearn about other useful topics: documentation, conditional compilation, testing.\nThis course, like all my other courses, will be supplemented with additional lectures based on participants' requests.",
      "target_audience": [
        "Systems programmers",
        "Experienced developers interested in Rust",
        "C/C++ programmers"
      ]
    },
    {
      "title": "Java Course for Complete Beginners with Practical Examples",
      "url": "https://www.udemy.com/course/practical-java-course/",
      "bio": "Learn Java programming through examples for absolute beginners! Become a Java Developer and obtain core Java skills!",
      "objectives": [
        "Learn the core Java skills needed to apply for Java developer positions",
        "Obtain the latest Java features with real-life examples so you can learn much faster and easier",
        "Learn tips-and-tricks of Java development that can make a huge difference when you apply for a job",
        "Acquire essential Java knowledge through practical examples from many areas of life",
        "Understand complex Java features through simple explanation and with meaningful examples",
        "Use the Java knowledge you gained to learning Spring, Java EE or Android development and more"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "What is Java?",
          "Why Java?",
          "Course Structure",
          "How to get the most out of this course?",
          "Course overview",
          "Course Resources"
        ],
        "Enviroment Setup": [
          "Tools you'll need",
          "JetBrains - IntelliJ Partnership",
          "JDK install for Windows",
          "IntelliJ install for Windows",
          "JDK install for MacOS",
          "IntelliJ install for MacOS",
          "JDK install for Linux",
          "IntelliJ install for Linux"
        ],
        "Beginner level - Java Fundamentals": [
          "Introduction",
          "Share your thoughts!",
          "Your first Java program",
          "Sandbox",
          "How Java code builds up?",
          "How to get the source code?",
          "Variables",
          "Data types - Primitives",
          "Data types - Primitives - CODING",
          "Data types - Primitives: Conversion",
          "Data types - Primitives: Conversion - CODING",
          "Data types - Primitives - PRACTICE",
          "Data types - Primitives - QUIZ",
          "Data types - Object references - Part 1",
          "Data types - Object references - Part 2",
          "Data types - Object references - CODING - Part 1",
          "Data types - Object references - CODING - Part 2",
          "Operators - Part 1",
          "Operators - Part 2",
          "Operators - CODING - Part 1",
          "Operators - CODING - Part 2",
          "Operators - CODING - Part 3",
          "Operators - CODING - Part 4",
          "Operators - CODING - Part 5",
          "Loops (for, while, do-while, break, continue)",
          "Loops - CODING - Part 1",
          "Loops - CODING - Part 2",
          "Control flow",
          "Control flow - CODING",
          "Control flow - PRACTICE",
          "Code blocks",
          "Code blocks - CODING",
          "Methods",
          "Methods - CODING",
          "Methods - PRACTICE",
          "Arrays",
          "Arrays - CODING",
          "Beginner Section Summary"
        ],
        "Beginner level - Final Practice": [
          "Beginner Level - FINAL PRACTICE"
        ],
        "Intermediate level - Object Oriented Programming": [
          "Introduction",
          "Packages",
          "Packages - CODING",
          "Object Oriented Programming - Introduction",
          "Classes and Objects - Part 1",
          "Classes and Objects - Part 2",
          "Classes and Objects - CODING - Part 1",
          "Classes and Objects - CODING - Part 2",
          "Classes and Objects - PRACTICE",
          "Access modifiers",
          "Access modifers - CODING",
          "1/4 Object-Oriented Principle - Inheritance",
          "Inheritance - CODING - Part 1",
          "Inheritance - CODING - Part 2",
          "Inheritance - PRACTICE",
          "2/4 Object-Oriented Principle - Encapsulation",
          "Encapsulation - CODING - Part 1",
          "Encapsulation - CODING - Part 2",
          "Encapsulation - PRACTICE",
          "3/4 Object-Oriented Principle - Abstraction",
          "Abstraction - CODING - Part 1",
          "Abstraction - CODING - Part 2",
          "Abstraction - PRACTICE",
          "4/4 Object-Oriented Principle - Polymorphism",
          "Polymorphism - CODING - Part 1",
          "Polymorphism - CODING - Part 2",
          "Polymorphism - PRACTICE",
          "Final keyword",
          "Final keyword - CODING",
          "Static keyword",
          "Static keyword - CODING",
          "String functions",
          "String functions - CODING",
          "Comments",
          "Comments - CODING",
          "Clean Code (DRY, KISS, YAGNI)",
          "Default Values",
          "Default Values - CODING",
          "Intermediate Section Summary"
        ],
        "Intermediate level - Final Practice": [
          "Intermediate Level - FINAL PRACTICE - Introduction",
          "Intermediate Level - FINAL PRACTICE - Part 1",
          "Intermediate Level - FINAL PRACTICE - Part 2"
        ],
        "Advanced level - Collections, Generics, Exceptions, File handling": [
          "Introduction",
          "Enum",
          "Enum - CODING",
          "Inner Classes (Nested-, Anonymous- and Method local inner classes)",
          "Inner Classes - CODING - Part 1",
          "Inner Classes - CODING - Part 2",
          "JDK vs JRE vs JVM",
          "JDK vs JRE vs JVM - CODING",
          "Array functions",
          "Array functions - CODING",
          "Math functions",
          "Math functions - CODING",
          "Debugging",
          "Time Types (Dates, Calendars, Timezones)",
          "Time Types - CODING - Part 1",
          "Time Types - CODING - Part 2",
          "Input and Output (System.out, System.in, System.err and Scanner class)",
          "Input and Output - CODING",
          "String vs StringBuilder vs StringBuffer",
          "String vs StringBuilder vs StringBuffer - CODING",
          "Object - THE SUPERCLASS",
          "Object - clone() - CODING",
          "Object - equals() - CODING",
          "Object - finalize() - CODING",
          "Object - getClass() - CODING",
          "Object - hashCode",
          "Object - hashCode() - CODING",
          "Object - toString() - CODING",
          "Collections - Introduction",
          "Collections - ArrayList - CODING - Part 1",
          "Collections - ArrayList - CODING - Part 2",
          "Collections - Vector - CODING",
          "Collections - LinkedList",
          "Collections - LinkedList - CODING",
          "Generics - Part 1",
          "Generics - Part 1 - CODING 1/2",
          "Generics - Part 1 - CODING 2/2",
          "Generics - Part 2",
          "Generics - Part 2 - CODING 1/2",
          "Generics - Part 2 - CODING 2/2",
          "Exceptions",
          "Exceptions - CODING - Unchecked exception",
          "Exceptions - CODING - Checked exception",
          "Exceptions - CODING - Recovery and try-with-resource",
          "Exceptions - CODING - Custom exception and checked vs unchecked exceptions",
          "Exceptions - CODING - throws keyword and catch with multiple exceptions",
          "Exceptions - CODING - Bad practices",
          "Exceptions - The most commonly thrown exceptions",
          "StringTokenizer and String's split function - CODING",
          "File Handling - File class - File creation - CODING",
          "File Handling - File class - Rename and Delete - CODING",
          "File Handling - File class - Directories - CODING",
          "File Handling - File class - Other useful functions - CODING",
          "File Handling - FileReader - CODING",
          "File Handling - BufferedReader - CODING",
          "File Handling - Scanner - CODING",
          "File Handling - BufferedReader vs Scanner",
          "File Handling - FileWriter - CODING",
          "File Handling - BufferedWriter - CODING",
          "File Handling - PrintWriter - CODING",
          "File Handling - Path class - CODING",
          "File Handling - Copying files - CODING"
        ],
        "Advanced level - Final Practice": [
          "Hangman - Introduction",
          "Hangman - Reading the words",
          "Hangman - Random word",
          "Hangman - User input",
          "Hangman - Contains or not cointains",
          "Hangman - The user loses",
          "Hangman - The user wins"
        ],
        "Expert level - Collections, Multithreading, Streams, Lambda": [
          "Collections - Introduction (Maps, Sets, Queues)",
          "Collections - Maps",
          "Collections - HashMap - Creation and fundamental functions - CODING",
          "Collections - HashMap - Contains, getOrDefault and replace functions- CODING",
          "Collections - HashMap - Clear, size and how to loop through a HashMap- CODING",
          "Collections - LinkedHashMap - CODING",
          "Collections - TreeMap - CODING",
          "Collections - TreeMap - Extra functions 1/4 - CODING",
          "Collections - TreeMap - Extra functions 2/4 - CODING",
          "Collections - TreeMap - Extra functions 3/4 - CODING",
          "Collections - TreeMap - Extra functions 4/4 - CODING",
          "Collections - HashTable - CODING",
          "Collections - HashSet 1/2 - CODING",
          "Collections - HashSet 2/2 - CODING",
          "Collections - LinkedHashSet - CODING",
          "Collections - TreeSet - CODING",
          "Collections - EnumSet - CODING",
          "Collections - Queues",
          "Collections - LinkedList as a Queue - CODING",
          "Collections - LinkedList as a Deque - CODING",
          "Collections - Stack",
          "Collections - Stack with Deque - CODING",
          "Collections - ArrayDeque - CODING",
          "Collections - PriorityQueue - CODING",
          "Functional Programming",
          "Pre Functional Programming - CODING - Example 1",
          "Functional Programming - Functions as variables, but how?",
          "Functional Programming - Lambda expression examples",
          "Functional Programming - Functional type - CODING - Part 1",
          "Functional Programming - Functional type - CODING - Part 2",
          "Functional Programming - Functional type - CODING - Part 3",
          "Functional Programming - Functional type - EXAMPLE",
          "Functional Programming - Streams teaser - CODING",
          "Functional Programming - Built-in Interfaces",
          "Functional Programming - Consumer - CODING",
          "Functional Programming - BiConsumer - CODING",
          "Functional Programming - BiFunction - CODING",
          "Functional Programming - Predicate - CODING - Part 1",
          "Functional Programming - Predicate - CODING - Part 2",
          "Functional Programming - UnaryOperator - CODING",
          "Functional Programming - Supplier - CODING",
          "Streams - Introduction",
          "Streams - Introduction - CODING",
          "Streams - How to create a stream? - CODING",
          "Method reference - Introduction - CODING",
          "Method reference - CODING - Part 1(instance method reference of a certain class)",
          "Method reference - CODING - Part 2(instance method reference of an object)",
          "Method reference - CODING - Part 3(static method reference)",
          "Method reference - CODING - Part 4(constructor method reference)",
          "Streams - filter() - CODING",
          "Streams - forEach() - CODING",
          "Streams - sorted() - CODING",
          "Streams - distinct() - CODING",
          "Streams - map() - CODING",
          "Streams - collect() - CODING - Part 1 (toList, toSet, toMap, toCollection)",
          "Streams - collect() - CODING - Part 2 (joining, counting)",
          "Streams - collect() - CODING - Part 3 (summing, averaging, summerizing)",
          "Streams - collect() - CODING - Part 4 (partiningBy, groupingBy)",
          "Streams - collect() - CODING - Part 5 (maxBy(), minBy(), teeing())",
          "Streams - flatMap() - CODING",
          "Streams - reduce() - CODING",
          "Streams - limit(), skip() - CODING",
          "Streams - allMatch(), anyMatch, noneMatch() - CODING",
          "Streams - range() - CODING",
          "Streams - peek() - CODING",
          "Streams - findFirst(), findAny() - CODING",
          "Streams - count(), min(), max() - CODING"
        ],
        "Expert level - Final Practice": [
          "Find a new home in the galaxy - Introduction",
          "Find a new home in the galaxy - The biggest, coldest and hottest - CODING",
          "Find a new home in the galaxy - Top 10 most habitable",
          "Find a new home in the galaxy - Earth Sun distance"
        ]
      },
      "requirements": [
        "Since the whole course is from complete beginner level, You don't need any previous knowledge",
        "A normal computer, the operating system doesn't matter. I'll show you how to write and run Java code on Windows, Linux or Mac."
      ],
      "description": "Java Course with Practical Examples for Absolute Beginners is created with the goal to teach you Java in a clear and interesting way. Most of the books, tutorials or even courses don't give you the knowledge needed to get a job as a developer.\nWith over 100,000 students enrolled and one of the best ratings, this Java course can provide all the knowledge needed for developers.\n\n\nThis course is a great choice for you if want to:\nget the skills needed to be hired as a Java developer\nor you want to reach a more advanced level in your Java knowledge\nor you want to build your own project in Java\nor you are looking for a course that can give a good base for learning Android or Spring\nThis is a Java course that can help you to achieve any of these.\n\n\nThe course builds up from the very basics to the advanced and expert level. So you can find this course useful if you are a complete beginner or even if have previous Java knowledge and you would like to level up your skills.\n\n\nWhy would you learn Java?\nJava is one of the most popular programming languages and the whole course focuses on showing you the language features that are used at the biggest tech companies from the Fortune 500 list, like Apple, Netflix, Google or Amazon.\n\n\nWhile programming languages rise and fall, Java has been among the best programming languages for more than 20 years and by now it has more than 9 million Java developers all around the world. Also, one of the languages that constantly evolving based on business needs.\nOkay, but why should you take this course?\nMost of the courses and tutorials are very boring and the instructor is simply reading a prewritten text from a paper and you must be very aware not to fall asleep after 30 minutes.\nBut if you would like to learn Java easily without the unnecessary parts through interesting practical examples from many areas of life. Then this course can be a great choice for you.\n\n\nThis course is also tailored to teach you the necessary knowledge and not spending time on the unnecessary part. This course could have 80 hours but that would only be a waste of time. Moreover, the level-based structure helps you to see which level you're at.\n\n\nEvery concept has a very clear and simple explanation with real-life examples so it's easier to understand and remember the concepts.\n\n\nAlso, you can join a group of over 100,000 students who are already enrolled in the course. With over 5,000 ratings it's rated as one of the best courses.\n\n\nWhat will I learn in this course?\nHere is the list of the topics that you'll find in this Java course. You might not understand some of them, but they are all explained in the course:\nHow Java code builds up from the very bottom, variables, data types(primitives and object reference type). How to create your own types, classes. What's the difference between a class and an object\nOperators and how to use them. Core Java keywords (public, static, void, class, interface, enum). Loops, control flows and  different kinds of code blocks\nHow to develop Java applications the fastest way and how to use the best Java developer tool IntelliJ (which is completely free)\nHow methods work, how you can create your own methods and how to call them. What parameters are and how to add them to the methods. How to define arrays and where to use them\nClean code principles like DRY (Don't Repeat Yourself), KISS (Keep It Simple and Stupid), YAGNI (You Ain't Gonna Need It)\nHow to create, write, read, copy and delete files\nThe 4 Object-Oriented Principles (Inheritance, Encapsulation, Abstraction, Polymorphism) and how to use them in Java\nAnd many more...\n\n\nFor all the features and concepts simple explanation is used so you can understand even the complex parts much easier.\n\n\nThe whole course is full of useful tips and tricks that can be very helpful if you apply for a job or you are doing your own project.\n\n\nBesides these, there are practices that challenge your knowledge after every major concept and at the end of all levels. Those practices not only help you to test what you have learnt but it's also a great way to make you understand and remember more of the features and concepts. On top of these, life-like practices are very similar to the tasks that you would get as a Java developer.\n\n\nThe course has 5 separate levels: beginner, intermediate, advanced, expert and the 5th level, HERO. They build upon each other and they contain more and more complex features of Java.\n\n\nIs the course updated? Will it be updated when Java is updated?\nJava is changing and evolving based on industrial needs. This course keeps up to date with frequent updates as a new java update is released. So you can make sure that whenever you watch this course you'll see the most recent content and version of Java.\nBut generally, it doesn't matter whether you would like to learn Java 8, Java 11, Java 17 or the latest Java 23 because this course teaches you the most recent features of Java that are also used at big tech companies.\nYou might find the recent updates in the hero level or appendix sections but sometimes it's blended into the core of the course.\n\n\nMoreover, you'll get all the updates for free. So you need to buy this course only once and you'll have lifetime access to it with all the future updates.\n\n\nWith this course, you'll always get up-to-date and useful Java content in this course!\n\n\nWhat if you are stuck or you get an error? Can you ask for help?\nAbsolutely, one of the main features of this Java programming course is that I provide full support, so all your questions will be answered. It doesn't matter whether you have a small issue in your code or you ask for a code review or you need career advice. I'll respond to you as quickly as possible.\n\n\nBesides these I want you to learn as much as you can and don't let you be stuck for days due to an issue or a question that stops you from making further progress.\n\n\nMy motto, that you'll hear many times in the course: \"If you have any questions, feel free to ask!\"\n\n\nAre you hesitant? No worries! You can try it out risk-free!\nBesides the free preview lectures, this source comes with a 30-day money-back guarantee so if you are not satisfied with what you get in the course you can get a 100% refund and no questions asked.\n\n\nSo, you can end up buying a great course and potentially get a job as a developer or you can try the course and if you're not satisfied you can get all your money back.\nBasically, you can't lose on buying this course.\n\n\nShall we start it? Enroll today!\nAdd this course to your cart and start learning Java today! You can also just take this course to see whether it's really for your taste.\n\n\nSee you inside the course!",
      "target_audience": [
        "Complete beginners who curious to learn Java programming",
        "Java programmers who want to level up their skills",
        "Programmers who want to switch to Java"
      ]
    },
    {
      "title": "Complete Modern C++ (C++11/14/17)",
      "url": "https://www.udemy.com/course/beg-modern-cpp/",
      "bio": "Learn about move semantics, lambda expressions, smart pointers, concurrency, template, STL & more",
      "objectives": [
        "Use C++ as an object-oriented language",
        "Demystify function & class templates",
        "Use STL components in your applications",
        "Write real-world applications in C++",
        "Apply Modern C++ (C++11/14/17) in programs"
      ],
      "course_content": {
        "Start Here": [
          "Introduction",
          "Source Code",
          "Course Slides",
          "Required software",
          "Visual Studio 2015 Installation (DEPRECATED)",
          "Visual Studio 2017 Installation (DEPRECATED)",
          "Visual Studio 2019 Installation",
          "Code::Blocks Installation",
          "Cevelop Installation",
          "XCode Installation on MacOS"
        ],
        "Basic Language Facilities": [
          "What is C++?",
          "First C++ Program",
          "The C++ Compilation Process",
          "Primitive Types & Variables",
          "Basic Input/Output",
          "Functions Basics - Part I",
          "Functions Basics - Part II",
          "Overview of Debugging in Visual Studio",
          "Uniform Initialization (C++11)",
          "Pointers",
          "Assignment",
          "Reference",
          "Assignment",
          "Reference Vs Pointer",
          "The const Qualifier",
          "const Qualifer & Compound Types",
          "Assignment",
          "Automatic Type Inference (C++11)",
          "Basics Quiz - I",
          "Range-Based For Loop - I (C++11)",
          "Range-Based For Loop - II (C++11)",
          "Function Overloading",
          "Default Function Arguments",
          "Inline Functions",
          "Function Pointers",
          "Namespace",
          "Basics Quiz - II"
        ],
        "Memory Management - Part I": [
          "Dynamic Memory Allocation - Part I (malloc function)",
          "Dynamic Memory Allocation - Part II (new operator)",
          "Dynamic Memory Allocation - Part III (new[] operator)",
          "Dynamic Memory Allocation - Part IV (2D arrays)",
          "Dynamic Memory Allocation - Source Code Only"
        ],
        "Classes & Objects": [
          "Object Oriented Programming Basics",
          "Class",
          "Constructor & Destructor",
          "Structures",
          "Non-static Data Member Initializers (C++11)",
          "this Pointer",
          "Static Class Members",
          "Constant Member Functions",
          "Copy Constructor - Part I",
          "Copy Constructor - Part II",
          "Delegating Constructors (C++11)",
          "Default & Deleted Functions (C++11)",
          "Quiz I"
        ],
        "Move Semantics": [
          "L-values, R-values & R-value References (C++11)",
          "Move Semantics - Basics (C++11)",
          "Move Semantics - Implementation (C++11)",
          "Rule of 5 & 0",
          "Copy Elision",
          "std::move Function (C++11)",
          "Quiz"
        ],
        "Operator Overloading": [
          "Operator Overloading Demo Code",
          "Operator Overloading - Part I (Basics)",
          "Operator Overloading - Part II (Assignment Operator)",
          "Operator Overloading - Part III (Global Overloads)",
          "Operator Overloading - Part IV (Friend Keyword)",
          "Operator Overloading - Part V (Smart Pointer Basics)",
          "Operator Overloading - Part VI (Smart Pointers in C++11)",
          "Operator Overloading - Part VII (Rules)",
          "Type Conversions - Part I (Basics)",
          "Type Conversions - Part II (Primitive to User Type)",
          "Type Conversions - Part III (User to Primitive Type)",
          "Type Conversions - Part IV (User Defined to User Defined)",
          "Initialization Vs. Assignment & Member Initialization List",
          "Quiz"
        ],
        "Memory Management - Part II": [
          "Raw Pointers",
          "std::unique_ptr",
          "Sharing Pointers",
          "Sharing std::unique_ptr",
          "std::shared_ptr",
          "Weak Ownership",
          "std::weak_ptr Internals",
          "Circular References",
          "Deleter",
          "Dynamic Arrays",
          "Make Functions"
        ],
        "More C++ Goodies": [
          "Enums - Part I (Basics)",
          "Enums - Part II (Scoped Enums C++11)",
          "Strings - Part I (Raw Strings)",
          "Strings - Part II (std::string)",
          "Assignment I",
          "Strings - Part III (String Streams)",
          "Assignment II",
          "User-Defined Literals",
          "Constant Expressions - constexpr (C++11)",
          "std::initializer_list (C++11)",
          "Dynamic Array (std::vector)",
          "Assignment III",
          "Union - I",
          "Union - II",
          "Quiz"
        ],
        "Object Oriented Programming": [
          "Account Hierarchy Source Code",
          "Inheritance & Composition",
          "Inheritance & Access Modifiers",
          "Project - I (Introduction)",
          "Project - II (Account & Savings Class)",
          "Assignment - Error Handling",
          "Assignment",
          "Project - III (C++11 Inheriting Constructors)",
          "Project - IV (Virtual Keyword)",
          "Quiz I",
          "Project - V (Virtual Mechanism Internals - I)",
          "Project - VI (Virtual Mechanism Internals - II)",
          "Project - VII (override & final specifier in C++11)",
          "Project - VIII (Object Slicing)",
          "Project - IX (typeid Operator)",
          "Project - Part X (dynamic_cast Operator)",
          "Abstract Class",
          "Multiple (Diamond) Inheritance",
          "Quiz II"
        ],
        "Exception Handling": [
          "Exception Handling - Part I (Basics)",
          "Exception Handling - Part II (Multiple Catch Blocks)",
          "Exception Handling - Part III (Stack Unwinding)",
          "Exception Handling - Part IV (Nested Exceptions)",
          "Exception Handling - Part V (Constructor & Destructor)",
          "Exception Handling - Part VI - (noexcept keyword in C++11)",
          "Quiz"
        ]
      },
      "requirements": [
        "Basic programming knowledge in any computer language",
        "Some experience of writing programs in any language",
        "Modern C++ compiler, preferably Visual Studio 2015/17/19 Community (or XCode, Clang, g++, Cevelop, Eclipse CDT, Code::Blocks)"
      ],
      "description": "Learn C++ in depth with modern features introduced with C++11/14/17\nUpdated with C++17 features!\nC++ is a general purpose programming language invented by Bjarne Stroustrup. It is still one of the more popular programming languages, used for creating high performance applications across a wide variety of domains & platforms.\nIn 2011, C++11 was born. This revision added lot of new features to the language and it got a new name, Modern C++. This emphasizes writing C++ code using modern features of the language such as move semantics, automatic type inference, threading, lambda expressions, smart pointers and a lot more. C++11 was followed by C++14, that added even more features and enhanced existing ones. C++17 released in 2017 added a filesystem library (covered in the course), parallel versions of STL algorithms, new library types such as std::optional, std::any and more.\nThis course teaches C++ as an object oriented language with modern features. It focuses on teaching C++ concepts, both old and new, with clear examples. It builds upon the basic language facilities that are then used to build more complex programs with classes, operator overloading, composition, inheritance, polymorphism, templates, concurrency, etc. It even digs deep into assembly to understand few concepts better. After every few topics, a quiz is presented that tests your understanding of the previous topics. Have fun learning Modern C++.\nNote that this course is not for you if\nYou have never programmed before\nYou don't know ANY programming language\nYou want to learn basics of programming\nUpdate [April 19, 2020] : Biggest update so far. Added C++17 core language changes, template enhancement and new library types.\nUpdate [April 11, 2020] : Added content on copy elision, type traits, static_assert & generalized lambda capture, C++11 unions\nUpdate [Mar 25, 2020]: XCode installation & high-level concurrency (std::async)\nUpdate [Mar 1, 2019] : More videos added for memory management with smart pointers (shared_ptr, unique_ptr, weak_ptr_)\nUpdate [Oct 19, 2017] :Instructions added for installing Visual Studio Community 2017, Cevelop (Eclipse) & Code::Blocks\nUpdate [Sep 29, 2107] : Added more content on dynamic memory allocation (malloc, new[], 2D arrays, strings)\nUpdate [Sep 16, 2017] : C++ concurrency (std::thread, std::mutex, etc)\nUpdate [April 27, 2017] : Templates, Function Object, Lambda Expressions, Standard Template Library\nUpdate [Mar 23, 2017] : Virtual Inheritance, Exception handling, File I/O, std::filesystem (C++17)\nUpdate [Mar 4, 2017] : Strings, stringstreams, enums, inheritance, polymorphism\nUpdate [Feb 25, 2017] : Source Code of existing topics added",
      "target_audience": [
        "College students who want to learn Modern C++",
        "Expert C++ developers who want to migrate to Modern C++",
        "C++ developers with varying level of experience, who want to refresh basics of the C++ language and get acquainted with the new features",
        "Software professionals who want to learn & implement Modern C++",
        "Anyone who is comfortable with other languages like C, Java, C#, Python, etc, and wants to learn & apply Modern C++",
        "Anyone interested in learning C++"
      ]
    },
    {
      "title": "Java Basics for Beginners: Learn Coding with Java",
      "url": "https://www.udemy.com/course/java-programming-for-beginners-learn-coding-with-java/",
      "bio": "Learn Java Basics with Real Coding Examples. Become a Java Programmer From Complete Beginner",
      "objectives": [
        "Learn the fundamentals of Java",
        "Learn the core principles of Programming",
        "Learn the core Java skills needed for your first Java developer position",
        "Be able to demonstrate understanding of Java for Junior Java Developer position",
        "Be able to write Java code as a beginner",
        "Learn the basics of Object Oriented Programming",
        "Learn best practices and how to write high quality Java code"
      ],
      "course_content": {
        "Course Introduction": [
          "Welcome!"
        ],
        "Install Java JDK": [
          "Install Java JDK"
        ],
        "Install IntelliJ IDEA + Create Your First Java Application": [
          "Install IntelliJ IDEA + Create Your First Java Application"
        ],
        "Understand Basic Programming": [
          "Understand Basic Programming"
        ],
        "Learn Java Programming": [
          "Variables",
          "Getting User Input",
          "Building a Basic Calculator",
          "Building a Basic Greeting Program",
          "If-else statements - Your First Code Logic",
          "Switch Statements",
          "For Loops",
          "While and Do While Loops",
          "Methods",
          "Arrays",
          "Classes and Access Modifiers"
        ],
        "Thank You!": [
          "Thank You!"
        ]
      },
      "requirements": [
        "Desire to learn programming",
        "Students don't need any previous experience, everything in this course will be explained for absolute beginners"
      ],
      "description": "This course is updated frequently with new lessons, projects and resources!\nNovember 2021 - NEW! Downloadable Resources Added - Methods, Arrays, Classes and Access Modifiers\nApril 2021 - NEW!  Downloadable Resources Added - For loops and While loops\nMarch 2021 - NEW!  Downloadable Resources Added - Switch statements\nFebruary2021 - NEW! Downloadable Resources Added - Complete Java Tutorial, Variables and If-else statements pdf files\nJanuary 2021 - NEW! 3 eBooks added - \"Introduction to Programming using Java\", \"Learning Computer Programming using Java with 101 Examples\" and \"Teach Yourself Java in 21 Days\"\nStart Learning Java from Scratch!\nThis Course is Being Updated Constantly!\nLearn Java Fundamentals in 2 Hours, Not Months!\nThis course is for beginners or people who want to refresh their knowledge in programming with Java.\nSome Statistics:\n97% of Enterprise Desktops run Java\nJava is the number 1 choice for software developers\n3 billion mobile phones run Java\n89% of Desktops in the U.S. run Java\n125 million TV devices run Java\nWhy would you choose to learn Java?\nThere are a lot of programming languages to choose from.\nThe main reason why you should pick Java is popularity. According to many researches Java is easily in the top 3 programming languages in the world, if not #1. This means that companies are looking for Java developers, which are much less than the open positions. Java opens a career opportunity in a very profitable sector, such as IT. Java s a language is growing for the last 30 years, which means it's been established and it's not something that will become unpopular any time soon.\n\nJava is a popular choice for employers for a good reasons. You can use Java for many different purposes, such as:\nBuilding Web Applications\nGame Development\nMobile Development (Android mobile applications)\nDesktop Applications\nWindows client applications\nWindows services\nBackend services\nBlockchains and  Cryptocurrency\nInternet of Things (IoT) devices and much more\nIn the beginning of your Java learning experience, programming will be hard and that's why you should not try to learn everything at once.\nIn this course you will learn basic coding skills with Java and all the information you need to transfer to the IT field.\nAs a complete beginner you need to focus on the Fundamentals and build a solid foundation of your basic programming skills.\nIn this Java course you will get the best step-by-step training with real life coding examples and exercises.\nYou don't need anything to start with the course. We will start from absolute zero.\nFirst - We will Install Java JDK.\nAfter that - We will Install IntelliJ IDEA - this is the environment where we write our code.\nNext - You will understand the basics of programming (same for every programming language).\nAfter that I will teach you Fundamentals that you need to start with:\nVariables\nMethods/Functions\nClasses\nConditional Statements\nLoops\nInheritance (Basic OOP Principle)\nDebugging your code and more\n\n\nIf You Are Someone Who:\nWant to Learn Programming with Java\nWant to have Better Career Options\nWant to make More Money at Your Job or as a Freelancer\nWant to achieve Financial Freedom and Enjoy Life\nEnroll in the Course Today and Get Started!\n\nYou will also get:\n- Support and Answers to All Your Questions During the Course\n- Lifetime Access\n- Certificate of Completion\nNow go Ahead and Click the Enroll Button.\nI'll See You in the First Lesson!",
      "target_audience": [
        "Anyone who wants to learn programming with Java",
        "Anyone who wants to change career and enter the IT field",
        "Beginners with no coding experience who want to learn Java programming"
      ]
    },
    {
      "title": "JavaScript Basics made easy for beginners",
      "url": "https://www.udemy.com/course/course-javascript/",
      "bio": "Quick start to learning JavaScript for beginners, explore how to write JavaScript with script examples and exercises",
      "objectives": [
        "Explore how to build web applciations",
        "Add JavaScript to Web pages"
      ],
      "course_content": {
        "Introduction to JavaScript": [
          "Quick Start to JavaScript Coding",
          "Project Preview",
          "Intro to JavaScript DevTools",
          "adding JavaScript to HTML pages",
          "Commenting Console log JavaScript",
          "Variables in JavaScript",
          "Data types Null undefined JavaScript",
          "Document Object Model DOM JavaScript",
          "Code Exercise",
          "Source Code exercise 1",
          "JavaScript Operators",
          "JavaScript conditional operators",
          "JavaScript Functions",
          "JavaScript Advanced function",
          "JavaScript Condition statements",
          "Source Code",
          "JavaScript get input value",
          "JavaScript Switch statement",
          "Exercise Create Canned responses to users input",
          "Exercise 2 Source Code Canned Response",
          "For loops working with numbers",
          "More Loops JavaScript",
          "Source Code loops",
          "JavaScript Arrays",
          "JavaScript Objects examples",
          "JavaScript Math Object",
          "JavaScript Random Canned response values from array",
          "Project Source Code"
        ],
        "Build a Question Responder": [
          "Check if value is in string",
          "Add canned responses to questions",
          "Question asker Source Code",
          "JavaScript Loops for in and for of coding example"
        ],
        "JavaScript coding examples and code snippets": [
          "How to create arrays with JavaScript",
          "JavaScript Closures Examples",
          "JavaScript Image Gallery",
          "JavaScript xHR vs Fetch",
          "Closures with Dynamic Values",
          "Additional Course Resources: Access to Downloads, Applied Examples"
        ]
      },
      "requirements": [
        "Basic HTML",
        "Computer Knowledge",
        "Internet understanding"
      ],
      "description": "Explore what you can do with JavaScript\nMake your web pages interactive, use JavaScript to apply logic and create amazing things online.\nJavaScript is the language to use for creative and interactive content online.\nWithin the course explore how JavaScript can be used within web design to add interaction.  JavaScript programming is a great skill to develop and learn.   Explore the fundamentals you need to build JavaScript applications and create web interactions.\nWithin the course we cover\nthe tools to get started to write JavaScript\nWriting code\nJavaScript data types\nJavaScript Functions\nLoops with JavaScript\nArrays and Objects\nJavaScript Methods\nCreating a canned message application from scratch\nexercises to practice what you learned\nsource code to get started quickly\nexamples and samples of JavaScript\nMuch more\nLearn the JavaScript concepts used for web applications, user interfaces and how dynamic webpages can be created.\n\nTaught by an instructor with over 18 years of real world web development experience.  I'm here to help you learn JavaScript and ready to answer any questions you may have.",
      "target_audience": [
        "Web developers",
        "Web designers",
        "Anyone who wants to make interactive websites",
        "Anyone whoswants to learn more about using JavaScript"
      ]
    },
    {
      "title": "The Modern Javascript Bootcamp Course",
      "url": "https://www.udemy.com/course/javascript-beginners-complete-tutorial/",
      "bio": "The most up-to-date JS resource online! Master Javascript by building a beautiful portfolio of projects!",
      "objectives": [
        "Learn everything there is to know about Javascript - from scratch!",
        "Build beautiful web apps to add to your portfolio",
        "Get job ready with a deep understanding of the internals of JS",
        "Work with Node JS and Express",
        "Create a full E-Commerce app complete with authentication",
        "Automate testing your code by creating your own custom testing framework!",
        "Build your own physics-based JavaScript game",
        "Understand how Javascript developers work on a day-to-day basis",
        "Master the latest JS features like async and arrow functions"
      ],
      "course_content": {},
      "requirements": [
        "A Windows, MacOS, or Linux-based computer is required"
      ],
      "description": "Always bet on Javascript!\nFor years, top recruiters in industry have hired fresh engineers based solely on their knowledge of Javascript.  If you want to get a programming job, this is the language to learn! But learning Javascript is complicated!  There's fancy syntax, weird design patterns, and a billion resources online that might be giving you wrong - or even be out of date - information.\nWe built this course to solve your problems.  This is the best and most up-to-date resource online for becoming a Javascript professional as quickly as possible. Every minute of this course has been created with one goal in mind: teaching you how to become a great engineer.\n\n\nThe Modern Javascript Bootcamp focuses on cutting through unnecessary information and giving you just the facts, plain and simple.  You won't work with outdated frameworks, learn old styles of programming, or build boring apps.  Instead, you'll only spend time writing practical code that can be used today and in the future on your own projects.  You'll learn - from very early on in the course - how to write beautiful and reusable code that you'll be proud to show to a future employer.\nTwo of Udemy's greatest instructors - Colt Steele and Stephen Grider - collaborated to create this course.  Between the two of us, we have taught over one million engineers how to program.  Rest assured, you will be learning from the best.  We know how challenging it can be to understand a new programming from scratch, so we designed this course to offer you a step-by-step, guaranteed approach to becoming a Javascript master.\n\n\n___ Course Structure ___\nThis course is divided into two parts.  The first half of the course focuses on teaching you the basic syntax of Javascript.  Colt will walk you through core topics effortlessly, imparting jewels of JS wisdom along the way.  Included in the first half of the course are many programming exercises and small projects, so you can test your new-found knowledge out.  Each of these videos can be easily referenced in the future, so you can always come back and brush up on some topic whenever needed.\nThe second half of the course is focused on building some amazing projects.  Stephen will show you how to build some production-ready Javascript applications, including a fully-featured E-Commerce web app!  These projects are all styled to be absolutely beautiful, visually stunning apps that you will be proud to feature on your own personal portfolio.  The main goal of these projects is to highlight design patterns, and show you the 'right' and 'wrong' ways of writing code.  By the end, you'll be confident enough to work on your own personal projects with speed and finesse.\n\n\n___ What You'll Learn ___\nThis is a long course, with just about every fact about Javascript you could ever hope to know.  Here's a brief subset of the topics you'll cover:\nMaster the basics of the language, easily understanding variables, objects, arrays, and functions\nUnderstand how to design the structure of the code you write, leading to beautiful and easy-to-read programs\nLeverage Javascript's built-in methods to increase your productivity regardless of what libraries or frameworks you use\nDevelop practical skills around higher-order functions that you will utilize for years to come\nObserve how the Javascript and browser work together, and how to increase the performance of JS code\nBuild awesome projects to fill your personal portfolio\nBuild command line tools from scratch using Node JS\nFetch and manage information from third-party API's\nBuild a fully-featured E-Commerce application from scratch - including production-grade authentication!\n\n\nThis is the ultimate Javascript course.  There are many resources online for learning Javascript, but this is the only one that covers everything you need to know, from 'A' to 'Z', and a couple letters after that.  Master the basics with Colt, then build awesome projects with Stephen. We've taught a million other engineers how to code, and now it is your turn!",
      "target_audience": [
        "Anyone looking to understand and master Javascript"
      ]
    },
    {
      "title": "Introduction to Programming",
      "url": "https://www.udemy.com/course/introduction-to-programming-level-i/",
      "bio": "Professional Coding Skills for Beginners",
      "objectives": [
        "What is HTML5?",
        "How to Display HTML5 Code in a Browser",
        "The Tool to Use for Coding",
        "How HTML5 Documents are Structured",
        "Displaying Paragraph Text with HTMl5",
        "Displaying Heading Text with HTML5",
        "Displaying Lists",
        "What is CSS and How is it used?",
        "How to Apply CSS Styles",
        "Adjusting Font and Font Size",
        "How to Style Lists with CSS",
        "How to Use Classes and ID's",
        "Creating Internal and External Hyperlinks",
        "Displaying Images on a Page",
        "Playing Audio on a Page",
        "Playing Video on a Page",
        "How to Assemble and Code an MP3 Player",
        "Understand Basic Table Structure",
        "Understand Complex Table Structures",
        "Design a Table with CSs",
        "Obtain User Input",
        "Create Online Forms",
        "Accept Information in the Form of Numbers, Dates and Colors",
        "Create Form Dropdowns",
        "Create Submit and Reset Buttons for a Form",
        "Create Generic Buttons",
        "Create Radio Buttons and Check Boxes",
        "Style Forms with CSS",
        "Use the CSS Box Model",
        "Understand How to Create Borders, Background and Margins",
        "Understand Static, Fixed, Relative and Absolute Positioning Models",
        "Create Floating Elements",
        "Understand Responsive Design",
        "Apply Responsive Design for Mobile",
        "Use a Responsive Design Framework",
        "Write a Procedural Program in Python",
        "Run Python Command LIne Code",
        "Obtain Command Line Input in Python",
        "Output Strings with Print",
        "Output Expressions with Print",
        "Create Variables",
        "Use Input Statements",
        "Understand Programmatic Decision Making",
        "Use Simple and Complex If Statements",
        "Create While Loops",
        "Create For Loops",
        "Create Break and Continue Statements",
        "Understand the Role of Functions in Coding",
        "Create Parameterized Functions",
        "Create Functions that Return Values",
        "Create List Structures",
        "Create a Dictionary Data Structure",
        "Understand File Input/Output",
        "Write to a File",
        "Read in From a File",
        "Work with CSV (Comma Separated Value) Data",
        "Work with Dates in Python",
        "Work with Regular Expressions in Python",
        "Complete Basic Networking in Python",
        "Download and Parse XML"
      ],
      "course_content": {},
      "requirements": [
        "Windows or Mac",
        "Web Browser (Free)",
        "Python Software (Free)",
        "Text Editor (Free)"
      ],
      "description": "Have you ever said to yourself:  \"I'd like to learn programming, but where should I start?”\nThere is an overwhelming number of options that are available to those who want to learn.  Introduction to Programming is designed to give you the foundational skills that will prove important for any type of programming you want to do. You’ll learn to code web pages, create a mobile application and use external data sources. (Mobile covered in Level II of the course)\nThis course, which includes video lectures, lab exercises, and full program code will prepare you for entry-level jobs in development— or simply make you comfortable with code and confident in more advanced study.\nAs you build a portfolio of skills, you’ll also build a portfolio of completed projects that can be used to demonstrate your new skill sets.\nIn Level I of the course we focus on foundations-- The things that all developers need to know to be successful.  With each passing chapter of the course you'll learn new skills and demonstrate them in a lab exercise.\nTechnologies\nThis program will introduce participants to all of the following technologies:\nHTML5 and CSS:  Construct the visual aspects of web sites and mobile applications with this language pair\nPython:  You’ll learn the basics of coding and programming logic using the Python programming language\nIn Level II of the course we'll look at mobile technologies,Javascript, jQuery and SQL.\nWe Created Introduction to Programming For You\nIf you've been considering learning to code-- or have tried before and it didn't quite take-- then this course is for you. We're not teaching a random programming language, but, instead, laying a professional foundation with the skills today's programmers need to know.\nA mix of lecture and activity, this course is designed not just to expose you to important topics for new coders, but to help you retain the information and immediately put it to use.\nComprehensive and Efficient\nIntroduction to Programming is designed to provide a comprehensive introduction to the programming field.  However, we know you're busy and don't spend time on unnecessary theory and background.  You'll complete the course in just a few weeks worth of evenings-- however the lessons will stay with you throughout your programming career.\n\nProjects\nYou'll learn by doing in the Introduction to Programming program.  This course includes multiple projects to help you understand and remember what you're learning.  Here are just a few of the projects you'll complete:\n\nRestaurant Review Web Site: Post your favorite restaurant reviews on your own site\nMP3 Player:  Play your favorite music\nResponsive Design Web Site:  Make a web site work across multiple sized screens\nInterest Calcuator:  Figure out how long it will take you to get rich\nMagic 8 Ball:  Make those truly important decisions\nWeb Services Project:  Get data from an external source-- They key to many apps\nOver 500,000 Students LearnToProgram\nYou'll be among our community of over 500,000 students who've learned programming from one of our LearnToProgram courses. With over 250,000 students on Udemy alone, we've learned a few things about teaching people-- And those lessons are injected in to Introduction to Programming.\n\nWe're looking forward to seeing you in class!",
      "target_audience": [
        "Beginners who want to learn to code",
        "Teachers and Students",
        "People at the Beginning of Their Coding Career"
      ]
    },
    {
      "title": "Basics of Python & arcpy , the Python library of ESRI ArcGIS",
      "url": "https://www.udemy.com/course/python-arcpy1/",
      "bio": "Understand the syntax of Python and essentials of arcpy for geoprocessing",
      "objectives": [
        "Understand the essential concepts of the Python programming language.",
        "Develop in ArcGIS's arcpy package using Python."
      ],
      "course_content": {
        "Essentials of Python part I": [
          "Quick introduction to programming and its benefits.",
          "What is programming?",
          "What is Python?",
          "About Python",
          "Understanding variables - more depth on numeric",
          "About variables in general and more about numeric",
          "Variables - booleans",
          "Variables- booleans",
          "Variables - strings + commenting and user input",
          "Variables - strings",
          "Conditional statements",
          "Questions about conditional statements",
          "Lists and loops",
          "About the essentials of lists and loops",
          "Coding examples for lists and loops",
          "Lists and loops in practice"
        ],
        "Essentials of Python part II": [
          "Functions in Python",
          "Quiz about functions",
          "Reading data from .csv files",
          "Getting data from .csv",
          "OOP Concepts",
          "OOP essentials",
          "IDLE practice on OOP concepts",
          "More about OOP essentials"
        ],
        "Diving into ESRI's arcpy package": [
          "Describing the structure of arcpy",
          "arcpy structure",
          "Understand ESRI's arcpy documentation",
          "Questions about arcpy documentation",
          "MapDocument class",
          "About the MapDocument class",
          "Exploring MapDocument class in ArcMap",
          "More about MapDocument",
          "Layer class, AddLayer, and ListLayers functions",
          "Adding and manipulating layers in ArcMap",
          "Layers in action",
          "Layers coding",
          "arcpy tools",
          "About arcpy tools",
          "Practice coding with arcpy tools",
          "More questions about arcpy tools"
        ]
      },
      "requirements": [
        "To have access for ArcGIS and to know the basics of ArcGIS",
        "For programming skills, students do not need any experience. For ArcGIS, they should be familiar with basic terminologies."
      ],
      "description": "Increase your GIS salary by 50% average.\nWelcome everyone! This course teaches the essentials of the Python programming language to utilize arcpy, the  Python package for the leading GIS software, ArcGIS - ESRI. It is the first Udemy course about Python for arcpy. and it is very affordable compared to other similar training courses ranging from $1,000 - $2,000. If you work in the GIS business world or even your job has some GIS involved, I advice you to go ahead and take this course. It will help you promote in your job and increase your income.\n\nGIS is the most integrated field with many business and work disciplines such as IT, engineering, marketing, and planning. ArcGIS is the most used GIS software in the world. To become a stronger GIS professinal and to increase your salary in the GIS business world by 50% average, you need to learn how to program. Python is one of the most spreading programming languages in the IT world. ArcGIS's arcpy package is dependent on Python. The arcpy package can save you a lot of repeated tasks involved in geospatial data administration and analysis.\n\nIn this course, I don't assume that you are very familiar with Python. I will start from level zero and teach you what you need from Python in order to utilize arcpy easily. There is a quiz associated with each lecture so you can test yourself. You will learn how to access MXDs and their layers programmatically and also run geospatial analysis tools without opening ArcMap. I am explaining a lot of details in both Python and arcpy so you can really understand and master the concepts in practice.\nAgain welcome everyone and I hope you register and learn.",
      "target_audience": [
        "ESRI users, ArcMap users",
        "GIS interns, geography interns, geospatial interns, spatial interns",
        "GIS students, geography students, geospatial students, spatial students",
        "GIS technicians, geography technicians, geospatial technicians, spatial technicians",
        "GIS analysts, geospatial analysts, spatial analysts",
        "Python beginners, arcpy beginners, computer science students, computer science interns",
        "Data analysts, Data scientists",
        "Geomatics engineers, Civil engineers, environmental engineers"
      ]
    },
    {
      "title": "Java for Complete Beginners: Become Junior Java Developer",
      "url": "https://www.udemy.com/course/java-for-complete-beginers-programming-fundamentals/",
      "bio": "Java programming for complete beginners. Create Java applications, learn Java programming. Start programming in 2019",
      "objectives": [
        "Create simple programs in Java",
        "Understand Programing fundamentals",
        "Understand Object Oriented Programming"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Say Hello :)",
          "Join our Facebook Group",
          "What is Programing ?"
        ],
        "Getting Started": [
          "Java Development Kit",
          "Netbeans",
          "Creating New Project ( Hello World)",
          "Resources"
        ],
        "Variables": [
          "What is Variable ?",
          "Data Types",
          "CODE | Variables",
          "Assignment operation"
        ],
        "Conditions, Operators": [
          "Logical Operators",
          "Logical Operators 2",
          "IF Condition",
          "CODE | IF Condition",
          "SWITCH Condition",
          "CODE | Switch"
        ],
        "Arrays and Loops": [
          "What is Array ?",
          "CODE | Array",
          "What is Loop ?",
          "CODE | for loop",
          "CODE | while loop",
          "CODE | do while loop"
        ],
        "Functions": [
          "What is function ?",
          "CODE | Functions",
          "Why use function ?",
          "Ready For Applications ?"
        ],
        "Course Projects": [
          "Calculator",
          "SOLUTION | Calculator",
          "Sum of Array",
          "SOLUTION | Sum Of Array",
          "Biggest from Two Arrays",
          "SOLUTION | Biggest from Two Arrays",
          "Guess number",
          "SOLUTION | Guess Number"
        ],
        "Object Oriented Programming": [
          "What is Object Oriented Programming ?",
          "What is Class ?",
          "CODE | Class and objects",
          "Inheritance",
          "PROJECT | Animal Farm",
          "Object Oriented Programming"
        ],
        "Bonus": [
          "Bonus Lecture: Algorithms and Data Structures in Java"
        ]
      },
      "requirements": [
        "Computer"
      ],
      "description": "Learn to programme from scratch for complete beginners\nSave your precious time with this course. You will learn how to program in Java in a fast and easy way!\\\nYou don't need any experience in programming to take this course.This course is designed for complete beginners. All you need is Computer and ability to learn.\n\nAs the course name \"Java for complete beginners\" suggest This course is designed to help you start with programming, I explain important concepts such as Variables, Conditions, Loops or Functions. Then I show you how to use these things to create Simple applications in Java. Almost every programmer started by creating simple applications and almost every programmer is now earning decent money.\nThis course is mostly designed for beginner who wants to learn Java or programming fundamentals, if you are advanced and already familiar with programming fundamentals, or with programming in java. This course might not be for you.\nJava is the most used and popular programming language, by Indeed there were 26 268 Job openings in Java. And it was marked as Most in-demand Programming language.",
      "target_audience": [
        "Anyone who wants to learn Programming",
        "Anyone who wants to learn Java"
      ]
    },
    {
      "title": "One Week Python",
      "url": "https://www.udemy.com/course/one-week-python/",
      "bio": "A Quick and Effective Way To Learn Python, Made For Busy People",
      "objectives": [
        "Master modern Python fundamentals as quickly as possible",
        "Learn the Python you need to move on to Data Science or Web Development",
        "Work with 3rd party Python libraries and modules",
        "Complete dozens of exercises, quizzes, and projects",
        "You'll learn to code with Python while staying sane!"
      ],
      "course_content": {
        "Welcome & Introduction": [
          "Welcome To The Course!",
          "Join The Community!",
          "What This Course IS NOT",
          "Why You Should Learn Python",
          "What We Can Do With Python",
          "Download All Slides Here!"
        ],
        "Installation & Setup": [
          "Python Versions: They Actually Matter!",
          "2 Ways of Running Python",
          "Installation For Mac Users",
          "Installation For Windows Users",
          "OPTIONAL: VS Code Color Theme",
          "The \"No-Installation\" Option: REPL.it"
        ],
        "Python Numbers": [
          "Intro to Data Types",
          "Integers and Floats",
          "★ Numbers Basics Quiz",
          "OPTIONAL: Numeric Notations",
          "Basic Operators",
          "★ Basic Operators Quiz",
          "Lesser Known Operators",
          "★ Other Operators Quiz",
          "Python Comments"
        ],
        "Variables Basics": [
          "Introducing Variables",
          "★ Variables Quiz",
          "Variable Naming",
          "★ Variable Naming Quiz",
          "Assignment Operators",
          "★ Assignment Operators Quiz",
          "Numbers & Variables In The Wild",
          "The Print() Function",
          "★ Magic Trick Exercise"
        ],
        "Strings Basics": [
          "Introducing Strings",
          "★ Strings Basics Quiz",
          "String Variables",
          "String Operators",
          "★ String Variables Quiz",
          "String Indexing",
          "★ String Indexing Quiz",
          "The Special Value None"
        ],
        "A Little More On Strings": [
          "String Slices",
          "★ String Slice Quiz",
          "Revisiting Print()",
          "Escape Characters",
          "★ Escape Character Quiz",
          "Triple Quoted Strings",
          "Strings In The Wild",
          "★ Nico Hülkenberg Exercise"
        ],
        "Strings & Built-Ins": [
          "Introducing Functions!",
          "The Len Function",
          "★ Len Quiz",
          "The Input Function",
          "Type Casting",
          "★ Types Quiz",
          "★ Age Calculator Exercise",
          "F Strings",
          "★ F-Strings Quiz",
          "F-Strings and Type Casting In The Wild",
          "★ Shopping Cart Exercise"
        ],
        "The World Of Methods": [
          "Introducing Methods: Upper and Lower",
          "★ Quick String Methods Quiz",
          "Navigating The Docs",
          "Help() & ipython '?'",
          "Reading Function Signatures + Strip Methods",
          "★ Yet Another String Quiz!",
          "Replace",
          "Other String Methods",
          "Method Chaining",
          "★ Even More String Methods Quiz",
          "String Methods In The Wild",
          "★ Press Release Exercise"
        ],
        "Booleans": [
          "Introducing Booleans",
          "★ Booleans Quiz",
          "Comparison Operators",
          "Equality Operators",
          "★ Comparison Quiz",
          "Comparing Across Types",
          "Truthiness & Falseyness",
          "★ Truthy/Falsey Quiz",
          "The \"in\" Operator",
          "OPTIONAL: Comparing Strings",
          "Booleans In The Wild"
        ],
        "Conditionals Basics": [
          "Introducing Conditionals",
          "The If Keyword",
          "★ If Quiz",
          "The Elif Keyword",
          "★ Elif Quiz",
          "The Else Keyword",
          "★ Else Quiz",
          "★ Name Length Codealong",
          "Generating Random Numbers With Randint()",
          "★ Tweet Checker Exercise"
        ]
      },
      "requirements": [
        "No programming experience needed - I cover everything you need to know!",
        "A computer (mac, windows, or linux) and an internet connection"
      ],
      "description": "Don't waste your time with 60+ hour behemoth courses that you never finish!  Instead, try this quick and effective pathway to Python that was designed with your sanity in mind.   This course is the perfect first step into the world of data science, web dev, machine learning, or any other discipline that requires Python knowledge.\nAs an-person coding bootcamp instructor, I created this course to keep you engaged the entire way through.  It's full of exercises, quizzes, challenges, and projects.  The slides, diagrams, and cheatsheets were painstakingly designed to help you visualize the tricky concepts.  There are no 20-minute monster videos in this course; the average video is only 4 minutes long.  Everything about this course has been designed to make it actually completable!\nThis course covers all the Python essentials you need: everything from variables to data structures to object oriented programming and modules. You’ll fill up your Python toolbox so you can go on and tackle libraries like pandas, flask, scikitlearn, django, and more.\nWhat this course is not:  This course is not a complete guide to every single possible feature in the Python language.  It focuses on the 80% that is absolutely critical and worth your time, but there are other (much longer) courses that are more akin to Python textbooks that take the time to cover every feature.  In fact, I created one of those courses, and it happens to be 40 hours long!\nAs someone who has both created and purchased massive Udemy mega bootcamp courses, I know they are still the standard format on the platform, but maybe it’s time for something a bit more human and engaging. I thought it was worth a try at least.\nHere's a detailed breakdown of what we cover:\nPainless installation for all platforms and users\nWorking with numbers\nPython variables\nStrings and string methods\nBooleans\nConditional Logic\nBoolean Logic\nLoops\nFunctions\nScope\nLists\nDictionaries\nSets\nTuples\n*args and **kwargs\nWorking with errors\nCustom modules\n3rd party modules\nPIP\nObject Oriented Programming\nClasses",
      "target_audience": [
        "Anyone who wants to learn Python in as little time as possible",
        "Busy people who can't spend months completing a Python course",
        "Anyone who plans on learning Data Science or Machine Learning but first needs a Python foundation"
      ]
    },
    {
      "title": "Introduction to VHDL for FPGA and ASIC design",
      "url": "https://www.udemy.com/course/introduction-to-vhdl-for-fpga-and-asic-design/",
      "bio": "From VHDL basics to sophisticated testbench coding",
      "objectives": [
        "Practical FPGA and ASIC RTL design using VHDL"
      ],
      "course_content": {
        "Introduction to VHDL , a first look": [
          "Why VHDL",
          "First VHDL design",
          "Acquiring a VHDL simulator",
          "Download and install Altera Modelsim",
          "Vivado Simulator Demonstration",
          "Download and install Xilinx Vivado Simulator",
          "Modelsim (Altera Quartus) Demonstration",
          "Acquire and Run GHDL Simulator",
          "Simulate with EDA Playground",
          "Basic VHDL",
          "Lab 1 First VHDL Design",
          "Alternate Lab 1 Solution using Vivado"
        ],
        "Concurrent and Sequential VHDL": [
          "The VHDL Process",
          "Concurrent and Sequential Statements",
          "VHDL Hierarchy",
          "Testbench Demo with Vivado",
          "Testbench Demo with Modesim",
          "Concurrent and Sequential VHDL Quiz",
          "Lab 2 - Add Logic to the thermostat design, create a testbench."
        ],
        "RTL": [
          "Understanding the Flip-Flop",
          "Synchronous Design Methodolgy",
          "RTL Styles",
          "RTL",
          "Lab 3 - Adding Flip Flops to the Thermostat design"
        ],
        "VHDL Types": [
          "Multivalue logic (std_logic)",
          "Logic Arrays and Variables",
          "State Machines",
          "VHDL Types",
          "Lab 4 - Creating a state machine"
        ],
        "VHDL Operators": [
          "VHDL logical and relational operators",
          "Math Operators",
          "Functions, Procedures, and Packages",
          "VHDL Operators",
          "Lab 5 - Add counter to state machine"
        ],
        "Verification": [
          "Verification",
          "Self Checking Testbenches",
          "Verification",
          "Lab 6 - Self Checking Test Bench"
        ]
      },
      "requirements": [
        "Basic understanding of electronics and logic"
      ],
      "description": "Twelve lectures, starting from the basics of VHDL, including the entity, architecture, and process.  Explanations of the difference in sequential and concurrent VHDL.  Discussions of good synchronous design methodology.  Demonstrations on how to use the Altera Modelsim and Xilinx Vivado simulators. Six lab projects for hands-on experience, with the instructor showing how he would have done each lab.",
      "target_audience": [
        "Beginner FPGA or ASIC designer"
      ]
    },
    {
      "title": "Master Python Fast: 12-Day Bootcamp with Practice Exercises",
      "url": "https://www.udemy.com/course/the-complete-python-challenge-based-course/",
      "bio": "Master Python with Interactive Challenges: From Fundamentals to Real-World Applications",
      "objectives": [
        "Python Fundamentals: Understand Python basics including variables, data types, control structures, and functions.",
        "Problem-Solving Skills: Develop problem-solving and logical thinking skills through interactive Python challenges.",
        "Data Structures: Learn to use Python's data structures like lists, tuples, sets, and dictionaries effectively.",
        "Project Development: Gain confidence to approach, develop, and debug your own Python projects.",
        "Code Efficiency: Learn best practices for writing clean, efficient, and readable Python code.",
        "Online IDE Usage: Become proficient in using an online IDE, specifically Replit, enhancing coding flexibility and collaboration."
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Choosing the best IDE",
          "Creating my free Replit Account",
          "What is Python?",
          "How to get the most out of this course?"
        ],
        "Knowledge Base": [
          "The Print function",
          "Variables and Types",
          "Adding Comments to your code"
        ],
        "Challenge 1": [
          "First Challenge - Variables",
          "First Challenge - Solution"
        ],
        "Challenge 2": [
          "Second Challenge - Input",
          "Second Challenge - Solution"
        ],
        "Challenge 3": [
          "Third Challenge - Data Types",
          "Third Challenge - Solution"
        ],
        "Challenge 4": [
          "Fourth Challenge - Conditional Statements",
          "Fourth Challenge - Solution"
        ],
        "Challenge 5": [
          "Fifth Challenge - Even and Odd",
          "Fifth Challenge - Solution"
        ],
        "Challenge 6": [
          "Sixth Challenge - Loops",
          "Sixth Challenge - Solution"
        ],
        "Challenge 7": [
          "Seventh Challenge - Fibonacci Sequence",
          "Seventh Challenge - Solution"
        ],
        "Challenge 8": [
          "Eighth Challenge - Lists",
          "Eighth Challenge - Solution"
        ]
      },
      "requirements": [
        "A Computer and Internet Connection: You'll need a desktop or laptop and reliable internet to access the course materials and use the Replit online IDE."
      ],
      "description": "Master Python Fast: 12-Day Bootcamp with Practice Exercises\nAre you ready to start an exciting journey into the world of Python programming? Whether you're a complete beginner or an experienced developer looking to expand your skill set, this course is designed to help you master Python through interactive, challenge-based learning.\n\n\nWhat Makes This Course Unique?\n\n\nOur course is structured around 12 real-world, hands-on coding challenges, designed to build your Python expertise step by step.\nEach challenge focuses on a specific Python concept, such as:\n\n\nVariables and data types.\nLoops and control flow.\nFunctions and modular programming.\nWorking with lists, dictionaries, and more!\n\n\nTwo-Video Approach for Every Challenge:\n\n\nChallenge Introduction: The first video introduces the problem and explains the core Python concepts you'll need.\nSolution Walkthrough: The second video walks you through solving the challenge, ensuring you fully understand the logic and techniques involved.\n\n\nAdditional Course Features:\n\n\nPython Fundamentals Tutorials: Start with the basics and build a strong foundation before diving into complex challenges.\nReplit Integration: Practice coding directly in an online IDE with no installation required, making it accessible to everyone.\nActive Learning: Follow along with the videos to reinforce your skills and deepen your understanding.\n\n\nYour Instructor Andre:\n\n\nAndre is a seasoned Python developer with years of teaching experience. Known for his approachable and motivational style, Andre breaks down complex topics into digestible lessons that are both engaging and practical.\n\n\nWho Should Enroll?\n\n\nBeginners with no prior coding experience.\nDevelopers looking to learn Python for data science, web development, automation, or general-purpose programming.\nAnyone seeking an interactive, hands-on approach to learning Python.\nWhat You'll Achieve:\n\n\nBy the end of this course, you will:\n\n\nHave a solid foundation in Python programming.\nGain the confidence to tackle your own coding projects.\nBe equipped with the skills to pursue careers in data science, web development, or automation.\n\n\nDon't just learn Python — master it through challenges! Enroll today and start building your coding skills one challenge at a time.\nYour journey to Python expertise starts now!",
      "target_audience": [
        "Beginners: If you're new to programming, this course provides a friendly and engaging introduction to Python. You'll learn by doing, solving real-world challenges from the very start.",
        "Experienced Programmers: If you're already comfortable with another programming language and want to learn Python, this course will quickly bring you up to speed. You'll appreciate Python's simplicity and power, and the challenge-based format will keep you engaged.",
        "Hobby Coders: If you're interested in coding as a hobby, you'll find Python to be a versatile and fun language to learn. It's great for small projects and automating tasks.",
        "Career Changers: If you're considering a career in tech, this course offers a solid foundation in Python, a language widely used in many tech fields, including web development, data science, machine learning, and more."
      ]
    },
    {
      "title": "Master Object Oriented Design in Java - Homework + Solutions",
      "url": "https://www.udemy.com/course/mastering-object-oriented-design-in-java/",
      "bio": "Don't just learn Java! Learn to write practical industry standard object oriented software and super charge your career!",
      "objectives": [
        "Advance your programming skills from a junior level newbie to a competent intermediate level object oriented software developer",
        "Design and develop software using best practices in Object oriented programming",
        "Apply the 5 crucial object oriented design principles using Java",
        "Apply design patterns such as Strategy, Observer, Template Method, Factory, and Builder",
        "Make the leap into professional software craftsmanship and take your career to the next level!"
      ],
      "course_content": {
        "Introduction": [
          "How to make the most of this course",
          "Download Source Code for Lectures",
          "Join our Online Community (Discord)"
        ],
        "Introductory Principles in Object Orientation (Optional Prerequisite)": [
          "Class and Object (Optional Prerequisite)",
          "Dedicated TA Support",
          "Program Flow and Using Constructor (Optional Prerequisite)",
          "Object and Class",
          "Application Runtime (Optional Prerequisite)",
          "Java Behind The Scenes",
          "Class Inheritance (Optional Prerequisite)",
          "Application Runtime Quiz",
          "Interfaces and Abstractions (Optional Prerequisite)",
          "Abstract Classes (Optional Prerequisite)",
          "Interfaces and Abstract Classes",
          "Message From The Instructor"
        ],
        "Object Oriented Design Principles (SOLID)": [
          "Objects, Messages and Dependencies",
          "Forming Associations Between Objects",
          "Overview of Software Design",
          "Single Responsibility Principle",
          "UML Diagram - Single Responsibility",
          "Single Responsibility - Homework",
          "Quiz on Single Responsibility Principle",
          "Open Closed Principle & STRATEGY Pattern",
          "Open Closed Principle - Homework",
          "Quiz on the Open Closed Principle",
          "Dependency Inversion + TEMPLATE Pattern",
          "Dependency Inversion & Template pattern - Homework Solution",
          "UML Diagram - Dependency Inversion",
          "Quiz on Dependency Inversion principle",
          "Liskov Substitution Principle",
          "Liskov Substitution Principle UML",
          "Quiz on Liskov Substitution Principle",
          "The Interface Segregation Principle",
          "UML Diagram - Interface Segregation",
          "Quiz on Interface Segregation Principle"
        ],
        "Coding Exercises: Object Oriented Design Principles (SOLID)": [
          "Universal Remote Control with the Open/Closed Principle"
        ],
        "Object Oriented Design Patterns in Practice": [
          "Dependency Injection Part 1",
          "Dependency Injection Part 2 (Using Spring)",
          "Observer Pattern",
          "Observer Pattern - Homework Solution",
          "UML Diagram - Observer Pattern",
          "Coffee Shop Assignment (another application of the observer pattern)",
          "Builder Pattern",
          "Factory Design Pattern",
          "UML Diagram - Factory Pattern",
          "Singleton Design Pattern (Newly Added)",
          "Real world Project - Create an API using the Builder Pattern"
        ],
        "Course Extras!": [
          "Automatically generate UML diagrams from java code Tutorial",
          "Final Comments from Instructor",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You should have a java editor installed. We'll be using Eclipse.",
        "Install Jdk from oracle website",
        "Understand the basics of loops and conditionals."
      ],
      "description": "Welcome to Master Object-Oriented Design in Java – Homework + Solutions!\nAre you struggling to build Java programs beyond a few classes?\nDo you want to confidently design software using industry-standard object-oriented principles?\nAre you looking for hands-on exercises to practice real-world object-oriented design?\nIf so, this course is designed just for you!\nThis structured, learn-by-doing course will elevate your Java skills from beginner to professional-level software craftsmanship.\nSUPER CHARGE OF YOUR PROGRAMMING CAREER and acquire some seriously marketable skills!\nWhat Makes This Course Stand Out?\nComprehensive and Practical Approach: Learn core Object-Oriented Design (OOD) principles and best practices through hands-on coding exercises.\nMaster SOLID Principles: Discover and master the five crucial OOD principles.\nDeep Dive into Design Patterns: Learn and apply the most essential design patterns used in professional software development.\nHomework with Solutions: Reinforce learning with carefully designed assignments and step-by-step solution videos.\nCareer-Ready Skills: Move beyond syntax and develop the ability to architect scalable, maintainable software.\nWhy This Course Is Essential:\nJust because you learned how to use a hammer doesn't mean you are ready to construct a building. Similarly, It's not enough to just understand a programming language. That's just a tool that can be used to develop various programs. The real craftsmanship is in software DESIGN.\nThis course is designed to take a junior level programmer with limited knowledge about object orientation to a competent level object oriented software designer! I expect you to understand the basics of loops, methods and conditionals in Java. You'll be completing hands-on HOMEWORK Exercises through out the course! I have provided detailed video solutions to the exercises so that you can check your answers and get step by step instructions on how to tackle the object oriented design assignments.\nYou can find plenty of resources online for solving a programming puzzle or practicing algorithms. But… when it comes to object oriented design,  admittedly, there is limited material out there for you to practice. So  in this course, we use a LEARN-BY-DOING  approach to explore a series of progressively challenging exercises to  discover the 5 core object oriented design PRINCIPLES summarized by an  acronym called SOLID:\n(S). Single Responsibility\n(O). Open/Closed\n(L).  Liskov Substitution\n(l ). Interface Segregation\n(D). Dependency Inversion\nDuring this journey you'll get practice applying some of the most important DESIGN PATTERNS that competent developers must have under their belt. There are so many design patterns out there, but we'll be thoroughly covering only the most important ones. Save yourself the time from learning all the design patterns and going on a design frenzy. Focus on the 20% that covers 80% of the scenarios and add miles to your programming efficiency.\nThese cover 80% of patterns used out there in professional software development.\n1). Strategy Pattern\n2). Observer Pattern\n3). Builder pattern\n4). Factory method pattern\n5). Template Method Pattern\n6). Singleton Pattern\nThe topics can be applied to pretty much any object oriented language. But, we'll be using Java, so I expect you to be familiar with the basic language constructs such as classes, methods and interfaces. But don't worry if you don't know about these, I've taken the time to create 6 comprehensive prerequisite lessons on introduction to object orientation. In these lessons, new comers can learn about the basics of object orientation such as:\n1). Classes and objects\n2). Inheritance and polymorphism,\n3). Interfaces and abstract classes.\nI'm certain that, by practicing the concepts covered, you'll make a substantial leap forward in your programming career. I hope to see you in the coming lessons.\nThis course offers lectures on practical software development topics to immediately impact your programming skills. Things you can take to your interview and feel confident in your abilities!\nKEY BENEFITS OF MASTERING OBJECT-ORIENTED DESIGN\nMastering Object-Oriented Design (OOD) principles is crucial for building scalable, flexible, and maintainable software.\nGain an Industry Edge: Employers value developers who think in terms of design rather than just writing code.\nWrite Cleaner, More Efficient Code: Learn to eliminate code smells and improve modularity and reusability.\nAce Technical Interviews: Most top-tier companies assess design skills, not just coding ability.\nFuture-Proof Your Career: OOD principles and design patterns are applicable across multiple programming languages, not just Java.\nKEY TAKEAWAY\nBy the end of this course, you’ll not only understand Object-Oriented Programming but also apply SOLID principles and essential design patterns to write professional, high-quality software.\nTransform your Java skills and take your programming career to the next level – enroll now!",
      "target_audience": [
        "If you've had trouble creating java programs that contain more than 1 or 2 classes, this course is for you",
        "If you're afraid to show your code to senior developers, you MUST take this course",
        "If you want to design well constructed software this course is for you"
      ]
    },
    {
      "title": "Dependency Injection in C# and .NET with the Autofac Library",
      "url": "https://www.udemy.com/course/di-ioc-dotnet/",
      "bio": "An in-depth course on Dependency Injection and Inversion of Control",
      "objectives": [
        "Understand and leverage the benefits of dependency injection",
        "Plan and configure dependency injection containers",
        "Leverage dependency injection scopes, modules and other advanced capabilities",
        "Integrate dependency injection with popular frameworks (e.g., ASP.NET"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Dependency Injection and Inversion of Control": [
          "Dependency Injection and Inversion of Control",
          "An Overview of DI Frameworks",
          "Getting Started with Autofac"
        ],
        "Registration Concepts": [
          "Overview",
          "Scenario (Without DI)",
          "Registering Types (Reflection Components)",
          "Default Registrations",
          "Choice of Constructor",
          "Registering Instances (Instance Components)",
          "Lambda Expression Components",
          "Open Generic Components",
          "Summary",
          "Registration Concepts Quiz"
        ],
        "Advanced Registration Concepts": [
          "Overview",
          "Passing Parameters to Register()",
          "Delegate Factories",
          "Objects on Demand",
          "Property and Method Injection",
          "Scanning for Types",
          "Scanning for Modules",
          "Summary",
          "Advanced Registration Concepts Quiz"
        ],
        "Implicit Relationship Types": [
          "Overview",
          "Delayed Instantiation",
          "Controlled Instantiation",
          "Dynamic Instantiation",
          "Parameterized Instantiation",
          "Enumeration",
          "Metadata Interrogation",
          "Keyed Service Lookup",
          "Container Independence",
          "Summary",
          "Implicit Relationships Types Quiz"
        ],
        "Controlling Scope and Lifetime": [
          "Overview",
          "Instance Scope",
          "Captive Dependencies",
          "Disposal",
          "Lifetime Events",
          "Running Code at Startup",
          "Summary",
          "Scope and Lifetime Quiz"
        ],
        "Configuration": [
          "Overview",
          "Why Modules?",
          "Using Modules",
          "JSON/XML Configuration with Microsoft Configuration",
          "Component Options",
          "Configuration of Modules",
          "Summary",
          "Configuration Quiz"
        ],
        "Advanced Topics": [
          "Overview",
          "Registration Sources",
          "Adapters",
          "Decorators",
          "Circular Dependencies",
          "Attribute Based Metadata",
          "Aggregate Services",
          "Type Interceptors",
          "Summary",
          "Advanced Topics Quiz"
        ],
        "End of Course": [
          "ASP.NET MVC Integration",
          "Course Summary",
          "Bonus Lecture: Other Courses at a Discount"
        ]
      },
      "requirements": [
        "Confident knowledge of C# and .NET",
        "Good knowledge of object-oriented programming principles",
        "Confident use of an IDE (e.g., Visual Studio)"
      ],
      "description": "This is a course covering Dependency Injection in .NET using the Autofac library. The goal of the course is to provide in-depth coverage of the concept of dependency injection and give examples of how DI/IoC is used in the modern world.\nThis course covers the following topics:\nThe concepts of Dependency Injection and Inversion of Control and what they are for\nComponents and Services (terminology used by the Autofac container)\nComponent Registration including assembly and module scanning\nControlling Scope and Lifetime\nConfiguration including XML/JSON and Modules\nPlenty of advanced topics for the connoisseur",
      "target_audience": [
        "Beginner and Experienced .NET/C# Developers",
        "Anyone interested in modern approaches to Dependency Injection"
      ]
    },
    {
      "title": "Core Python for Everyone",
      "url": "https://www.udemy.com/course/core-python-for-everyone/",
      "bio": "Python",
      "objectives": [
        "Python"
      ],
      "course_content": {
        "Course Introduction (In brief)": [
          "Course Introduction ( In brief)"
        ],
        "Welcome to Python Programming World!!!": [
          "History of Python",
          "First Python Program",
          "Python Development Environment",
          "Programming Errors",
          "Python Data Types",
          "Python Installation & demo of First Python Program"
        ],
        "Structured Programming: Sequential & Selection Control Flow": [
          "Sequential Control Flow",
          "Selection Control Flow",
          "Pseudo Code & Flowchart",
          "Conditional Operator",
          "Operator Precedence",
          "Logical Operators"
        ],
        "Structured Programming: Iteration Control Flow": [
          "Iteration Control Flow",
          "while loop",
          "for loop",
          "break & continue (Jump Control Flow)",
          "Nested Loops",
          "Counter Controlled & Sentinel Controlled Loops"
        ],
        "Structured Programming: Function": [
          "Function",
          "Scope of a Variable",
          "Nested Function",
          "Team Work is Spirit",
          "Function: Advantages & Disadvantages",
          "Recursive Function",
          "Lambda ( Anonymous) Function"
        ],
        "List": [
          "List",
          "Linear & Binary Search",
          "Nested Lists",
          "List Methods"
        ],
        "Leftover Collections": [
          "Leftover Collections ( Introduction)",
          "Array",
          "Tuple",
          "Numpy",
          "Set & Dictionary",
          "Comparison of List, Array, Tuple, Numpy, Set & Dictionary"
        ],
        "String": [
          "String (Introduction)",
          "String Immutable",
          "String Functions"
        ],
        "Class": [
          "Class (Introduction)",
          "Objects & Method",
          "List & Objects",
          "Nested Class: Class as a Data Member of Another Class"
        ],
        "More about Class": [
          "More about Class",
          "Access Specifier"
        ]
      },
      "requirements": [
        "No"
      ],
      "description": "As you know, there are so many Python courses available in the market. Then, you may think why do I learn through this course? You will definitely experience that its not just another  Python course.\nThe objective of this course is to spread quality knowledge of Python, in a simple and easily understandable language with practical examples. It can be used by a wide range of students, right from budding programmers to practicing professionals.\nMore specifically, students/teachers of diploma/degree engineering, BCS, BCA, BSC, MSC, MCS, MCA etc will be benefited.\nPrior programming experience is not required to learn Python through this course.\nBeginner who will start journey of learning  Python  via this course will definitely acquire sound knowledge of Pythion.\nHappy Python Journey!!!\nFAQ:\nQ. I have never done programming as of now. Can I do this course?\nYes,  if you are familiar with basics related to computer even without any programming experienc you can easily  do this course.\nQ. I have done programming in C/C++ etc.  Can I do this course?\nAnyone who already have exposure of little bit programming can directly do this course from section 7.\nQ. I am already Python programmer. Is this course useful to me?\nAnyone who is already Python programmer can  go through the 9th section “Class”  & see if there is any value  addition in his/her knowledge.",
      "target_audience": [
        "Anyone who wants to learn Python programming"
      ]
    },
    {
      "title": "Master Python Programming in 2025: Zero to Expert in Python",
      "url": "https://www.udemy.com/course/master-python-programming-complete-python-bootcamp/",
      "bio": "Master Python programming from scratch with 100% hands-on projects. Learn in-demand technologies: AI, LLMs, Data Science",
      "objectives": [
        "You will MASTER all the Python 3 key concepts starting from Scratch. No prior Python knowledge is required.",
        "For each Key Concept you'll get a Hi-Quality HD Video, a Coding Section, a quiz, practice exercises and slides.",
        "Build a comprehensive understanding of Python 3 from the ground up. Write professional, Pythonic code using the best practices.",
        "Learn to work with Python control flow structures: if, for, while, break, continue, pass, exceptions, try-except-else-finally blocks etc.",
        "Master all the Python data structures: strings, lists, tuples, sets, dictionaries.",
        "Learn to work efficiently with Text and CSV files (including using Pandas).",
        "Master Network Automation using SSH, Paramiko, Netmiko, Telnet or Serial Connections.",
        "Learn to work with Pip and Python Modules: Sys, Os, Subprocess, Shutil, Random, Decimal.",
        "Learn how to send Emails with Python (SMTPLIB)",
        "Acquire an in-depth understanding of how to use multithreading and multiprocessing in Python.",
        "Acquire a good Understanding of Async IO and how to build Asynchronous Applications in Python",
        "Learn to use HTTP Requests Library and BeautifulSoup and create an automated web scraping application.",
        "Learn to work with SQL Databases in Python.",
        "Learn to efficiently work with Excel Files and automate spreadsheet-related tasks.",
        "Learn to Analyse Data with Pandas.",
        "Learn to Create Interactive Charts with Plotly.",
        "Acquire the prerequisite Python Skills to move into specific branches: AI, Machine Learning, Data Science, Network Automation, Web.",
        "Acquire an In-Depth Understanding of Decorators, Inner Functions and Closures.",
        "You will learn how to create web apps (front-ends) with Streamlit.",
        "You will learn how to use AI Coding companions such as Jupyter AI and GitHub Copilot.",
        "You will learn how to set up and use virtual environments (venv)"
      ],
      "course_content": {
        "Course Introduction": [
          "Why Python Programming? Why Now?",
          "The Complete Python Cheat Sheet",
          "Join Our Online Community!"
        ],
        "Setup the Programming Environment": [
          "Types of Python Installations",
          "Running Python Code in Colab (Cloud IDE)",
          "Installing Python on Windows",
          "Installing Python on Linux and macOS",
          "Setting Up PyCharm on Window",
          "Setting Up PyCharm on Linux and macOS",
          "Running Python Scripts using PyCharm",
          "Test Your Knowledge: Setup the Programming Environment"
        ],
        "Python Basics": [
          "Variables",
          "Naming Conventions",
          "Test Your Knowledge: Variables",
          "Comments",
          "Constants",
          "Test Your Knowledge: Comments and Constants",
          "Variable Basics",
          "Coding Exercise Solution",
          "Dynamic vs. Static Typing",
          "Built-in Types",
          "Numbers and Math Operators",
          "Test Your Knowledge: Built-in Types, Numbers and Math Operators",
          "Math Operators",
          "Coding Exercise Solution",
          "Conversions",
          "Coding Exercise Solution",
          "Assignment Operators",
          "Comparison Operators",
          "Identity Operators. Mutability vs. Immutability",
          "Test Your Knowledge: Assignment, Comparison and Identity Operators",
          "Floating Point Arithmetic: Issues and Limitations",
          "Solving the Float Problem. Writing Bugs-Free Code",
          "Test Your Knowledge: Floating Point Arithmetic",
          "Python Basics Cheat Sheet"
        ],
        "Hands-On Challenges: Python Basics": [
          "Challenges - Python Basics"
        ],
        "AI Coding with GitHub Copilot": [
          "Intro to GitHub Copilot",
          "GitHub Copilot: A Powerful Tool for Experienced Coders",
          "Setting Up GitHub Copilot in PyCharm"
        ],
        "Strings in Python": [
          "Intro to Strings",
          "Printing Special Characters",
          "Coding Exercise Solution",
          "Get User Input",
          "Converting Types",
          "Test Your Knowledge: String Basics, User Input and Conversions",
          "Converting Types",
          "Coding Exercise Solution",
          "Project: BMI Calculator",
          "String Indexing",
          "Concatenating and Repeating Strings",
          "String Indexing and Operations",
          "Coding Exercise Solution",
          "Test Your Knowledge: String Indexing, Concatenating and Repeating",
          "String Slicing",
          "Test Your Knowledge: String Slicing",
          "String Slicing 1",
          "Coding Exercise Solution",
          "String Slicing 2",
          "Coding Exercise Solution",
          "Formatting Strings: f-string",
          "F-strings with = for Debugging",
          "Test Your Knowledge: Formatting Strings",
          "Intro to String Methods",
          "Useful String Methods",
          "String Methods removeprefix() and removesuffix()",
          "Test Your Knowledge: String Methods",
          "String Methods",
          "Coding Exercise Solution",
          "Python Strings Cheat Sheet"
        ],
        "Hands-On Challenges: Python Strings": [
          "Challenges - Python Strings"
        ],
        "Program Flow Control in Python": [
          "Conditional Statements",
          "Indentation",
          "Nested if/elif/else Statements",
          "Test Your Knowledge: Conditional Statements and Indentation",
          "Boolean Variables",
          "Test Your Knowledge: If Elif and Else Statements",
          "Logical (Boolean) Operators: AND and OR",
          "Logical (Boolean) Operators: NOT",
          "Test Your Knowledge: Booleans",
          "If Elif and Else Statements",
          "Coding Exercise Solution"
        ],
        "Python Loops": [
          "For Loops",
          "Test Your Knowledge: For Loops",
          "Debugging Your Code: Step Through Your Program",
          "Ranges",
          "Ranges",
          "Coding Exercise Solution",
          "Loops and Ranges",
          "Test Your Knowledge: Loops and Ranges",
          "Project: Password Generator",
          "For, continue and pass Statements",
          "For, else and break Statements",
          "Test Your Knowledge: for, continue, break, else, pass",
          "For Loops",
          "Coding Exercise Solution",
          "While Loops",
          "Test Your Knowledge: For and While Loops",
          "While and continue Statements",
          "While and break Statement",
          "Test Your Knowledge: while, continue, break, else",
          "While Loops",
          "Coding Exercise Solution",
          "Walrus Operator",
          "Test Your Knowledge: The Walrus Operator",
          "Python Flow Control and Loops Cheat Sheet"
        ],
        "Hands-On Challenges: Flow Control and Loops": [
          "Challenges: Flow Control and Loops"
        ]
      },
      "requirements": [
        "A computer (Windows, Mac, or Linux) with an Internet connection.",
        "Very basic PC Skills such as downloading and installing a program, opening a terminal etc",
        "No prior Python knowledge is required. You will learn everything from scratch!",
        "Your time and enthusiasm to learn."
      ],
      "description": "Fully Updated for 2025: Master Python Programming in 2025: Zero to Expert in Python\nMaster Python programming from scratch and become a professional Python developer!\nWhy Choose This Course?\nComprehensive Curriculum: Covers every major Python programming topic, including the latest features in Python 3, GitHub Copilot, Jupyter AI, Object-Oriented Programming, Decorators, working with Excel and databases, web scraping, data science with Pandas, data visualization with Plotly, network automation, multiprocessing, threading, and much more.\nUp-to-Date Content: Regularly updated with new sections and lectures to ensure you learn the most current skills and tools.\nHands-On Experience: Engage in practical coding exercises, projects, quizzes, and challenges to solidify your understanding.\nExpert Instruction: Taught by a Senior Software Engineer and Professional Trainer with 20 years of experience.\nExclusive Community Access: Join a closed and exclusive Discord community with tens of thousands of members for support and networking.\nWhy Learn Python Programming in 2025?\nPython is the most in-demand programming language in today's job market, powering everything from web applications to data science and machine learning, LLMs and AI. Learning Python programming opens doors to careers in LLMs and AI, data science, network automation, and more.\nWhat You'll Learn\nPython Basics: Variables, data types, and operators.\nData Structures: In-depth understanding of strings, lists, tuples, sets, and dictionaries.\nControl Flow: Master conditionals and loops with if, while, and for statements.\nFunctions and Scope: Learn about functions, lambda expressions, and variable scope.\nAdvanced Topics: Dive into decorators, object-oriented programming, modules, and packages.\nFile Handling: Work with text files, CSV, and Excel files.\nError Handling: Manage errors and exceptions effectively.\nData Science: Perform data analysis with Pandas and visualize data with Plotly.\nWeb Scraping: Extract data using Requests and BeautifulSoup.\nConcurrency: Understand multiprocessing, multithreading, and async IO.\nNetwork Automation: Automate networks with Telnet and SSH using Paramiko and Netmiko.\nAI Coding Tools: Utilize GitHub Copilot and Jupyter AI for smarter coding.\nFront-End Development: Create interfaces for data science, machine learning, and AI apps using Streamlit.\nWhat Students Are Saying\n★★★★★ \"This is the only course you need to MASTER every key aspect of Python. Don't look for other Python programming courses because it's a waste of time.\"\n— Daniel A.\n★★★★★ \"An excellent course for anyone who wants to learn Python programming from scratch or just do a refresher. Everything is well explained, and the quizzes and coding exercises are very helpful. Highly recommended!\"\n— Tomaso\n★★★★★ \"Exactly what is required for someone who is familiar with programming languages. Andrei dives into the basics and explains very well. Assignments are helpful. Highly recommend it for someone who is interested in learning Python.\"\n— Nara\nAbout the Instructor\nAndrei Dumitrescu is a Senior Software Engineer and Professional Trainer with 20 years of experience. He holds numerous certifications and has trained hundreds of thousands of students in programming and networking.\nEnroll Now and Start Your Python Programming Journey Today!\nJoin thousands of successful students and take the first step toward mastering Python programming. Whether you're a beginner or looking to enhance your skills, this course has everything you need to become a proficient Python developer.\nCourse Highlights\nLifetime Access: Learn at your own pace and revisit the material anytime.\n30-Day Money-Back Guarantee: Full refund if you're not satisfied.\nNo Prior Experience Required: Perfect for beginners and seasoned programmers alike.",
      "target_audience": [
        "Beginners with no previous programming experience.",
        "Programmers switching languages to Python.",
        "Programmers who know Python basics and want to master Python.",
        "This course should not be attended by senior Python developers."
      ]
    },
    {
      "title": "Python for Beginners: Easy Python for Beginners Course",
      "url": "https://www.udemy.com/course/python-in-a-weekend/",
      "bio": "Jump into Python by Building Your First 3 Python-Based Apps. Python = Data Science, Machine Learning, App Development+",
      "objectives": [
        "Learn Python for Beginners for Machine Learning, Programming, Data Science, Coding & More",
        "Learn Python in One Weekend!",
        "You will learn the fundamentals of Python programming",
        "You will build 3 Python-based apps from scratch, and have the knowledge to start building your own",
        "Learn Python Basics: Variables, Strings, Comments, Booleans and If Statements",
        "Learn Python Fundamentals: Loops, Lists, Functions, Parameters and Dictionaries",
        "Learn Python Next Steps: Inputs, Imports and Object Oriented Programming with Classes"
      ],
      "course_content": {},
      "requirements": [
        "Access to a computer with an internet connection",
        "Everything you need to learn Python is in the course",
        "Just a few hours of your time to watch the lessons and practice"
      ],
      "description": "You're here because you want to learn Python, right?\nAnd you're looking for a Python course that can quickly teach you the basics?\nPerfect - this is the Python for Beginners course for you!\nWhether you want to be a data scientist or do app development, web development, or automation & machine learning - Python is the most popular programming language in the world and is essential to becoming a modern programmer.\nWhat makes this Python course different?\nWe realized that there are many Python courses and tutorials out there. But many of them are daunting for absolute beginners - and don't make Python as fun and easy as it can be.\nThat's why we've created Python in a Weekend, the Easiest Python for Beginners Course.\nWe truly believe the best way to learn Python is to just get started. You don't need to watch dozens of hours of lessons to learn the basics. For many of you, it's better to start with something a little more simple, and a lot more fun.\nThat's what this Python course is.\nWhat do you get with this course?\nInstant access to 4+ hours of easy-to-watch video lessons\nPractice files to follow along with\nInstructor feedback and support if you ever get stuck\nLifetime access to course updates\nKey concepts of this course?\nPython Basics: Variables, Strings, Comments, Booleans and If Statements\nPython Fundamentals: Loops, Lists, Functions, Parameters and Dictionaries\nPython Next Steps: Inputs, Imports and Object Oriented Programming with Classes\nBringing together concepts to create user friendly software\nWho is your instructor?\nYour lead instructor for this Python course is Nick Walter, one of the most popular and engaging instructors on Udemy.\nNick has partnered with Phil Ebiner and the Video School team to create this beginner Python course, and is super excited to share his knowledge with you.\nIf you want to quickly and easily learn Python, this is the course for you.\nRemember, there is a 100% money-back guarantee. There is no reason to hesitate. Enroll now, see if you enjoy the course, and start your programming dreams today!\nCheers,\nNick Walter & Phil Ebiner",
      "target_audience": [
        "Anyone who wants to learn Python from scratch",
        "Absolute beginners with NO programming experience",
        "Anyone who has experience with other programming languages, wanting to learn Python",
        "Anyone who wants to start a career in data science, machine learning, app development, web development, automation"
      ]
    },
    {
      "title": "Learn Python by making games",
      "url": "https://www.udemy.com/course/learn-python-by-making-games/",
      "bio": "The most fun way to learn programming",
      "objectives": [
        "You will learn how to use Python effectively",
        "You will create a portfolio of python games",
        "You will learn how to manage large project well",
        "You will learn object-oriented programming",
        "You will learn and implement advanced Python features",
        "You will develop a thorough understanding of Python"
      ],
      "course_content": {},
      "requirements": [
        "Access to some kind of computer"
      ],
      "description": "Learn the world's most popular programming language by making games!\n\n\nThis course includes an incredibly comprehensive, yet easy to follow, introduction to Python and uses that knowledge to create 4 sophisticated games using pygame. By the time you finish these projects you will have a strong understanding of Python and of coding in general. You will also have amazing projects for your portfolio.\n\n\nThe course contains over 130 videos and includes a huge amount of exercises so you can practice while you code along. You can also find the code for every video attach in the course. The course will start completely from scratch and I will begin by installing Python on Windows or MacOS; or you can use an online code editor. If you are in doubt, the entire first 11 hours are freely available both here on Udemy and on YouTube.\n\n\nThis course is going to cover every topic of Python, for example:\nAll of the datatypes (integers, strings, floats, booleans, lists, tuples, dictionaries etc)\nYou will learn classes and object-oriented programming\nInheritance, both simple and complex will be covered in detail\nYou will learn how to control the flow of the code using if, while, for and match\nYou will learn about functions and how to pass information around\nThere are many sections on scope to keep your code organized\nDecorators will be covered in depth\nFile handling will be used\n\n\nPython is one of the most desirable features on the job market and can get you into well-paying and interesting jobs. It is also a very easy to learn language that you can use as a starting point in your coding career. I am looking forward to seeing you in the course!",
      "target_audience": [
        "Everyone interested in programming"
      ]
    },
    {
      "title": "Learn Python Programming - Beginner to Master",
      "url": "https://www.udemy.com/course/learn-python-with-abdul-bari/",
      "bio": "Become a Python Expert. for Both Academics and Industry. 100+ Challenges",
      "objectives": [
        "Master Python Programming by doing 100+ Challenges",
        "Detail understanding of fundamentals",
        "Build Multithreaded Applications",
        "using Python for Database Programming",
        "Build GUI Applications",
        "Master art of Functional and Object-Oriented Programming",
        "Learn Modules - DataStructure, OS, NumPy, Math, DateTime and Tkinter"
      ],
      "course_content": {},
      "requirements": [
        "No Programming Experience Needed",
        "Laptop or PC with access to Internet"
      ],
      "description": "Learn Python Programming - course is curated for Beginner to Master.\nEvery topic is covered in depth with practical examples.\n100+ Challenges to make you expert in Problem Solving using Python\nBy the end of the course you will understand Python extremely well and will be able to build your own Python applications.\nResources are available for every lectures.\nAnswer Quiz at the end of major topics, to feel confident.\nDo Projects using Tkinter, GUI Programming.\nUse Laptop or PC to learn and practice Python.\nIDLE is used for demonstrating the concepts and PyCharm is used for Developing Programs. You can use any IDE, of your choice.\n\n\nCourse Content:\nFundamental Concepts and Features of Python\nLearn to use PyCharm, Jupyter Notebook and IDLE.\nExplore Numeric DataTypes\nConditional and Loop Statements\nExplore Advance Datatypes - List, Tuple, Set, Dictionary\nWrite Error-free Programs by Handling Exception\nMultithreaded Programs\nMore and more about Functions\nObject-Oriented Programming\nFile Handling and CSV Files\nDatabase Programming using Sqlite\nModules\nData Structures\nDate and Time\nOS\nMath\nNumPy\nGUI Programming using Tkinter\nDo Projects in GUI Programming\n\n\nYou can always ask Questions in Q&A section. you can find Q&A section under each video lecture.\nEvery Lecture contains notes in Resources.",
      "target_audience": [
        "A Complete Beginner",
        "Intermediate Python Programmer",
        "Programmers who want to switch to Python"
      ]
    },
    {
      "title": "Git for Geeks: Quick Git Training for Developers",
      "url": "https://www.udemy.com/course/git-for-geeks/",
      "bio": "Learn the core features of Git in less time for experienced software engineers new to Git",
      "objectives": [
        "Learn the key concepts of the Git source control system",
        "Step through the entire Git workflow",
        "Compare the different states in Git",
        "Manage files inside and outside the control of Git",
        "Create and manage repositories on GitHub and BitBucket",
        "Create branches and resolve conflicts with confidence",
        "Save work in progress with Stashes",
        "Mark special events with Tags",
        "Even a bit of time travel within Git repositories"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Audience and Approach",
          "Going Command Line"
        ],
        "Core Concepts": [
          "Core Concepts Overview",
          "What is Git?",
          "What is a Git Repository?",
          "How Commits Work"
        ],
        "Quick Installation": [
          "Quick Installation Overview",
          "Quick Install and Setup on Windows",
          "Installation Notes for Windows",
          "Quick Install and Setup on Mac OS X",
          "Installation Notes for Mac OS X"
        ],
        "The Basics: Foundations In Git": [
          "The Basics Overview",
          "Starting with a Empty Repository (git init)",
          "Git States / Basic Workflow",
          "The First Commit and the Basic Local Workflow (git add / git commit)",
          "Discover the Git Repository",
          "Starting with an Existing Project (git init)",
          "Going Deeper with Commits and Messages",
          "Commit Log and Showing Commit Details",
          "Combining Steps with Express Commits",
          "Backing Out Changes in Stage and the Working Directory",
          "Git History and Creating Custom Git Commands with Aliases",
          "Renaming and Deleting Files within Git",
          "Making Changes to Files Outside Git",
          "Excluding Unwanted Files from Git"
        ],
        "Advanced: Going Deeper with Git": [
          "Advanced Overview",
          "Comparing Changes (git diff / difftool)",
          "What are Branches",
          "Special Markers and HEAD",
          "Branching and Simple Merging (Easy Paths)",
          "Manual Merges and Conflict Resolution",
          "Marking Important Milestones with Tagging",
          "Saving Working in Progress with Stashing",
          "Repository Time Travel with Reset and Reflog (Undo Bad Commits)"
        ],
        "Going Remote with GitHub and BitBucket": [
          "Going Remote Overview",
          "What are Remote Repositories",
          "What is BitBucket?",
          "Sign up for BitBucket",
          "Remote Repository Creation",
          "Establish Relationship Between Local and Remote Repositories",
          "Updating Remote Repositories (git push)",
          "Removing the Remote Repository",
          "Comparing Services: GitHub vs BitBucket",
          "What is GitHub?",
          "Working with GitHub",
          "Cloning the Repository (git clone)",
          "Update! GitHub Changes Default Branch Name",
          "Update without Merge: Fetching Updates (git fetch)"
        ],
        "Conclusion": [
          "Final Words"
        ],
        "Bonus: Background": [
          "Background Overview",
          "About the Instructor",
          "A Brief History of Git",
          "Comparing Source Control Tools"
        ],
        "Bonus: Complete Windows Installation": [
          "Installation Overview",
          "Git for Windows Installation",
          "Git for Windows Settings and Tweaks",
          "Gitting Help",
          "Minimal Git Configuration",
          "Notepad++ Installation",
          "Notepad++ Git Integration",
          "P4Merge for Windows Installation",
          "P4Merge Git Integration"
        ],
        "Bonus: Complete Mac OS X Installation": [
          "Mac OS X Installation Overview",
          "Apple Git Installation",
          "Gitting Help",
          "Minimal Configuration",
          "TextMate 2 Installation",
          "TextMate 2 Configuration",
          "TextMate 2 Git Integration",
          "P4Merge for Mac OS X Installation",
          "P4Merge Git Integration",
          "Mac Git Prompt: Make Your Prompt Like Mine",
          "Resolve Problem with MacOS Upgrade Breaking Git (new!)"
        ]
      },
      "requirements": [
        "Basic computer skills",
        "Ability to install software on your computer",
        "Admin rights may be required for software installation"
      ],
      "description": "Git for Geeks\n\nThis course is designed to cut academic theory to just the key concepts and focus on basics tasks in Git in order to be productive quickly. Students can expect to learn the all the main features of Git in just two hours.\nNew! Closed captions throughout the course!\n\nCourse Outline\nCourse Introduction provides a welcome to this course with a few suggestions on how to get the most out of it. After that, we cover the minimum theory before getting our hands dirty with Git in the Core Concepts section.\nQuick Installation provides an overview on the installation process for all tools needed for this course. A more detailed set of instructions are available in the Bonus section.\nIn The Basics, we walk through all the commands needed to start a new project managed by Git (or enable Git for an existing project) all the way through making commits, including common file operations like moving and deleting files. We also cover how to exclude the wrong files from accidentally being committed and how to review your repository's history.\nWe then go a bit deeper in the Advanced section when we cover comparing changes, branching and merging (including merge conflict resolution), tagging milestones, saving temporary work, and even a bit of time travel.\nFinally, Going Remote covers publishing the locally created repository (previous sections) on GitHub and BitBucket. We cover the main concepts related to working with any remote Git repositories and compare the differences between the two most popular Git hosting services.\nAfter the main part of the course, this course offers several bonus sections that explore some topics in more detail for those that like more information.\nCourse Features\n\nPresentations provide audio/video training of conceptual ideas. Since few like slide-ware presentations, slide-presentations are kept to a minimum.\nScreencasts provide a video of the instructor's computer system with any actions, commands, or screens displayed and narrated. Excluding bonus lectures, this course offers about 2 hours of screencast videos.\nSeveral attachments throughout the course provide supplemental information, illustrations, or other reference material.",
      "target_audience": [
        "Anyone interested in using source control and specifically Git",
        "Software engineers, developers, programmers new to Git",
        "IT Managers or technical leads considering Git for version control on their team",
        "Freelancers or other creative professionals"
      ]
    },
    {
      "title": "How To Write Bulletproof Multi-Threaded C# Code",
      "url": "https://www.udemy.com/course/how-to-write-multi-threaded-csharp-code/",
      "bio": "This course teaches you how to write robust multi-threaded C# code. A skill every professional .NET developer must know",
      "objectives": [
        "Learn to write multi-threaded code",
        "Safely abort a thread",
        "How can two or more threads exchange data?",
        "The main reasons why multi-threaded code crashes",
        "Learn to resolve race conditions",
        "Use AutoResetEvent and ManualResetEvent in your code",
        "The Dining Philosopher problem",
        "Line up threads with the Barrier class",
        "... and much more!"
      ],
      "course_content": {},
      "requirements": [
        "You need a Windows, Mac or Linux laptop with Microsoft Visual Studio, Xamarin Studio or Monodevelop",
        "You should be a beginner, intermediate, or advanced C# developer",
        "That's it!"
      ],
      "description": "Do you know how to write robust multi-threaded C# code that does not crash?\nLets face it: writing multi-threaded code is hard. The sobering truth is that, unless you know exactly what you're doing, your code is pretty much guaranteed to crash in production.\nDon't let this happen to you!\nIt doesn't have to be like this. If you have a good understanding of multi-threaded programming and follow a few simple industry best practices, you can write robust code that can take a beating.\nI wrote a multi-threaded conversion utility a few years ago, that successfully migrated 100,000 documents from SharePoint 2010 to SharePoint 2013. The program worked flawlessly the first time, because I implemented all of the best practices for writing asynchronous C# code.\nSound good?\nIn this course I am going to share these practices with you.\nIn a series of short lectures I will cover many multi-threading topics. I will show you all of the problems you can expect in asynchronous code, like race conditions, deadlocks, livelocks and synchronisation issues. I'll show you quick and easy strategies to resolve these problems.\nBy the end of this course you will be able to write robust multi-threaded C# code that can take a beating.\nWhy should you take this course?\nYou should take this course if you are a beginner or intermediate C# developer and want to take your skills to the next level. Asynchronous programming might sound complicated, but all of my lectures are very easy to follow, and I explain all topics with clear code and many instructive diagrams. You'll have no trouble following along.\nOr maybe you're working on a critical section of code in a multi-threaded C# project, and need to make sure your code is rock-solid in production? The tips and tricks in this course will help you immensely.\nOr maybe you're preparing for a C# related job interview? This course will give you an excellent foundation to answer any threading-related questions they might throw at you.",
      "target_audience": [
        "Beginner, intermediate, and advanced C# programmers who want to learn how to write bulletproof multi-threaded C# code",
        "Developers who are about to take a job interview and need to prepare for threading-related questions",
        "Professionals who are writing a section of multi-threaded code in a large C# project"
      ]
    },
    {
      "title": "Learn C#.Net Core With Real World Examples",
      "url": "https://www.udemy.com/course/csharp-from-scratch/",
      "bio": "Master C# and .NET Core through Hands-On, Real-World Projects!",
      "objectives": [
        "Understand the foundations of the C# Programming language",
        "Create applications that run in the console",
        "Write logic using conditions and loops",
        "Understand Objects,Classes and Methods",
        "Understand inheritance",
        "Understand static and dynamic polymorphism"
      ],
      "course_content": {
        "Basic Programming In C# - Control Structures": [
          "Installling VS 2022",
          "Introduction to C# With Basic Operations",
          "var Vs dynamic - Control Structures",
          "for - foreach - Arrays",
          "Jagged Arrays - Structures - Array Of Structures"
        ],
        "Basic Object-Oriented Programming": [
          "Classes And Object (1 Of 2)",
          "Classes And Objects (2 of 2)",
          "Static Polymorphism - two Uses this Keyword - Properties",
          "Static (variables, constructors, methods, classes, properties) - namespaces",
          "Creating DLL - Using DLL - In Console and Windows - ExeVsDll",
          "Call By Value - Call By Ref - Out Parameters - Passing Arrays"
        ],
        "Advanced Object-Oriented Programming": [
          "Inheritance In Depth",
          "Constructor Chaining With base Keyword - Method Overriding",
          "interfaces - Multiple Inheritance - RealTime Implementation Of Interfaces",
          "System.Collections - Stack, Queue & ArrayList - System.Collections.Generic"
        ],
        "C#.Net Topics On Demand": [
          "Delegates In C#-I",
          "Delegates In C#-II",
          "Asynchronous Programming with Async and Await"
        ]
      },
      "requirements": [
        "VS 2022 or higher express edition",
        "No Programming Exprience Needed"
      ],
      "description": "Are you ready to take your C# and .NET Core skills to the next level? Whether you're a beginner or an experienced developer looking to deepen your knowledge, our course, \"Learn C#.Net Core With Real-World Examples,\" is the perfect fit for you!\nWhy Choose This Course?\nPractical Learning: Say goodbye to theoretical fluff. Dive straight into real-world projects and scenarios that mirror the challenges you'll face in the industry.\nComprehensive Coverage: From the basics to advanced concepts, we cover it all. You'll understand not just the \"how\" but also the \"why\" behind every piece of code you write.\nExpert Guidance: Learn from seasoned developers with years of experience in the field. Get insights into best practices, performance optimizations, and industry-standard coding practices.\nSupportive Community: Join a thriving community of learners and professionals. Share knowledge, ask questions, and collaborate on projects. You're not just signing up for a course; you're joining a network of like-minded individuals.\nWhat You'll Learn:\nCore C# Concepts: Understand the syntax, data types, control structures, and object-oriented programming principles that form the foundation of C#.\n.NET Core Fundamentals: Learn how to build, run, and deploy applications using the powerful .NET Core framework.\nBest Practices: Discover industry standards for code organization, testing, debugging, and performance tuning.\nCourse Highlights:\nInteractive Lessons: Engaging video tutorials with clear, step-by-step instructions.\nPractical Projects: Real-world examples that provide hands-on experience.\nDownloadable Resources: Access to all the source code and project files used in the course.\nLifetime Access: Learn at your own pace with lifetime access to the course materials.\nCertificate of Completion: Receive a certificate that you can showcase on your resume or professional profile.\nJoin Us Today!\nDon't miss out on this opportunity to boost your career with in-demand C# and .NET Core skills. Enroll now and start building quality applications with confidence.\n\nDisclaimer: Recorded Live Session\nPlease note that the content presented in this video course is a direct recording of a live session and has not undergone any editing or modifications. The purpose of this recording is to provide an authentic representation of the original session, including any interactions, discussions, and presentations as they occurred in real-time.\nWhile efforts have been made to ensure the accuracy and clarity of the material presented, please be aware that occasional technical issues, interruptions, or other unforeseen circumstances may have occurred during the live recording.\nThe views, opinions, and information shared in this course are those of the speakers and participants involved in the original live session and do not necessarily reflect the views of the organizers or hosts of this recording. We appreciate your understanding and encourage you to reach out if you have any questions or concerns regarding the content presented in this video course.\nThank you for your interest and participation.",
      "target_audience": [
        "Complete Beginners"
      ]
    },
    {
      "title": "Go: The Complete Developer's Guide (Golang)",
      "url": "https://www.udemy.com/course/go-the-complete-developers-guide/",
      "bio": "Master the fundamentals and advanced features of the Go Programming Language (Golang)",
      "objectives": [
        "Build massively concurrent programs with Go Routines and Channels",
        "Learn the advanced features of Go",
        "Understand the differences between commonly used data structures",
        "Prove your knowledge with dozens of included quiz questions",
        "Apply Interfaces to dramatically simplify complex programs",
        "Use types to future-proof your code and reduce the difficulty of refactors"
      ],
      "course_content": {
        "Getting Started": [
          "How to Get Help",
          "Course Resources",
          "Join Our Community!",
          "Environment Setup",
          "VSCode Installation",
          "Go Support in VSCode",
          "Gopls, undeclared name, type and module errors in VSCode"
        ],
        "A Simple Start": [
          "Boring Ol' Hello World",
          "Five Important Questions",
          "Go Packages",
          "Import Statements",
          "File Organization",
          "Test Your Knowledge: Packages",
          "How to Access Course Diagrams"
        ],
        "Deeper Into Go": [
          "Project Overview",
          "New Project Folder",
          "Variable Declarations",
          "Test Your Knowledge: Variable Assignment",
          "Functions and Return Types",
          "Test Your Knowledge: Functions",
          "Slices and For Loops",
          "Test Your Knowledge: Slices and For Loops",
          "OO Approach vs Go Approach",
          "Custom Type Declarations",
          "Receiver Functions",
          "Test Your Knowledge: Functions with Receivers",
          "Creating a New Deck",
          "Slice Range Syntax",
          "Multiple Return Values",
          "Test Your Knowledge: Multiple Return Values",
          "Byte Slices",
          "Deck to String",
          "Joining a Slice of Strings",
          "Saving Data to the Hard Drive",
          "Reading From the Hard Drive",
          "Error Handling",
          "Shuffling a Deck",
          "Random Number Generation",
          "Creating a go.mod File",
          "Testing With Go",
          "Errorf call has arguments but no formatting directives",
          "Writing Useful Tests",
          "Asserting Elements in a Slice",
          "Testing File IO",
          "Project Review",
          "Assignment: Even or Odd?",
          "Even or Odd Solution"
        ],
        "Organizing Data With Structs": [
          "Structs in Go",
          "Defining Structs",
          "Declaring Structs",
          "Updating Struct Values",
          "Embedding Structs",
          "Structs with Receiver Functions",
          "Pass By Value",
          "Structs with Pointers",
          "Pointer Operations",
          "Pointer Shortcut",
          "Gotchas With Pointers",
          "Test Your Knowledge: Pointers",
          "Reference vs Value Types",
          "Test Your Knowledge: Value vs Reference Types"
        ],
        "Maps": [
          "What's a Map?",
          "Manipulating Maps",
          "Iterating Over Maps",
          "Differences Between Maps and Structs",
          "Test Your Knowledge: Maps"
        ],
        "Interfaces": [
          "Purpose of Interfaces",
          "Problems Without Interfaces",
          "Interfaces in Practice",
          "Rules of Interfaces",
          "Extra Interface Notes",
          "The HTTP Package",
          "Reading the Docs",
          "More Interface Syntax",
          "Interface Review",
          "The Reader Interface",
          "More on the Reader Interface",
          "Working with the Read Function",
          "The Writer Interface",
          "The io.Copy Function",
          "The Implementation of io.Copy",
          "A Custom Writer",
          "Test Your Knowledge: Interfaces",
          "Assignment: Interfaces",
          "Interfaces Solution",
          "Assignment: Hard Mode Interfaces",
          "Hard Mode Interfaces Solution"
        ],
        "Channels and Go Routines": [
          "Website Status Checker",
          "Printing Site Status",
          "Serial Link Checking",
          "Go Routines",
          "Theory of Go Routines",
          "Channels",
          "Channel Implementation",
          "Blocking Channels",
          "Receiving Messages",
          "Repeating Routines",
          "Alternative Loop Syntax",
          "Sleeping a Routine",
          "Function Literals",
          "Channels Gotcha!",
          "Channels and Go Routines"
        ],
        "Extras": [
          "Bonus!"
        ]
      },
      "requirements": [
        "Solid experience with another programming language - Javascript, Python, Ruby, Java, or similar"
      ],
      "description": "Go is an open source programming language created by Google.  As one of the fastest growing languages in terms of popularity, its a great time to pick up the basics of Go!\nThis course is designed to get you up and running as fast as possible with Go.  We'll quickly cover the basics, then dive into some of the more advanced features of the language.  Don't be tricked by other courses that only teach you for-loops and if-statements!  This is the only course on Udemy that will teach you how to use the full power of Go's concurrency model and interface type systems.\nGo is designed to be easy to pick up, but tough to master.  Through multiple projects, quizzes, and assignments, you'll quickly start to master the language's quirks and oddities.  Go is like any other language - you have to write code to learn it!  This course will give you ample opportunities to strike out on your own and start working on your own programs.\nIn this course you will:\nUnderstand the basic syntax and control structures of the language\nApply Go's concurrency model to build massively parallel systems\nGrasp the purpose of types, which is especially important if you're coming from a dynamically typed language like Javascript or Ruby\nOrganize code through the use of packages\nUse the Go runtime to build and compile projects\nGet insight into critical design decisions in the language\nGain a sense of when to use basic language features\n\n\nGo is one of the fastest-growing programming languages released in the last ten years.  Get job-ready with Go today by enrolling now!",
      "target_audience": [
        "Anyone who wants to understand the fundamental features of Go"
      ]
    },
    {
      "title": "Databases with Python: MySQL, SQLite & MongoDB with Python",
      "url": "https://www.udemy.com/course/databases-with-python-mysql-sqlite-mongodb-with-python/",
      "bio": "Learn and understand how to work with SQL and NoSQL Databases with the Python Programming Language.",
      "objectives": [
        "Build and Manipulate Databases with Python",
        "Master SQL programming",
        "Installing and using the MySQL tools",
        "Using MySQL with Python",
        "Create, insert, update, filter and delete records, tables and databases in SQL",
        "Apply the SQL Commands in Python without installing programs",
        "Using SQLite with Python",
        "Master NoSQL programming",
        "Installing and using the MongoDB tools",
        "Using MongoDB with Python",
        "Create, insert, update, filter and delete documents and collections in NoSQL",
        "Get the instructor QA support"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to course",
          "What you should know",
          "What is MySQL?",
          "What is SQLite?",
          "What is MonogDB?"
        ],
        "MySQL with Python": [
          "Download MySQL",
          "Install MySQL",
          "MySQL Connector",
          "Creating database and testing",
          "Creating tables and checking",
          "PRIMARY KEY for tables",
          "Insert records into tables",
          "Adding many records",
          "SELECT and fetchall data",
          "SELECT COLUMNS",
          "Get the first record",
          "Filter the results",
          "Wildcard Characters",
          "Sorting the results",
          "Deleting records and preventing SQL injections",
          "Removing tables",
          "Updating tables and escaping values",
          "Limitation"
        ],
        "SQLite with Python": [
          "SQLite with Python Part 1",
          "SQLite with Python Part 2",
          "SQLite with Python Part 3",
          "SQLite with Python Part 4",
          "SQLite with Python Part 5",
          "SQLite with Python Part 6",
          "SQLite with Python Part 7",
          "SQLite with Python Part 8",
          "SQLite with Python Part 9",
          "SQLite with Python Part 10",
          "SQLite with Python Part 11"
        ],
        "MongoDB with Python": [
          "MongoDB with Python Part 1",
          "MongoDB with Python Part 2",
          "MongoDB with Python Part 3",
          "MongoDB with Python Part 4",
          "MongoDB with Python Part 5",
          "MongoDB with Python Part 6",
          "MongoDB with Python Part 7",
          "MongoDB with Python Part 8",
          "MongoDB with Python Part 9",
          "MongoDB with Python Part 10",
          "MongoDB with Python Part 11",
          "MongoDB with Python Part 12",
          "MongoDB with Python Part 13"
        ]
      },
      "requirements": [
        "The basics of Python",
        "Jupyter Notebook or any Python IDE"
      ],
      "description": "Hello and welcome to the Databases with Python: MySQL, SQLite & MongoDB with Python Course.\nUsing and manipulating databases is one of the most important and powerful skills that every developer should master well, because it is in great demand in the market constantly and with high salaries.\nSo, if you want to be a professional developer, engineer or data scientist, it is very important to be familiar with dealing with databases of all kinds.\nIn this course, you will learn how to use different types of databases with the Python programming language, from beginning to professionalism. You will master the use of SQL through MySQL and SQLite, and Also NoSQL through MongoDB.\n\n\nYou'll learn:\nBuild and Manipulate Databases with Python\nMaster SQL programming\nInstalling and using the MySQL tools\nUsing MySQL with Python\nCreate, insert, update, filter and delete records, tables and databases in SQL\nApply the SQL Commands in Python without installing programs\nUsing SQLite with Python\nMaster NoSQL programming\nInstalling and using the MongoDB tools\nPracticing MongoDB with Python\nCreate, insert, update, filter and delete documents and collections in NoSQL\nGet the instructor QA support\nand more.\nA database is a structured collection of data. It may be anything from a simple shopping list to a picture gallery or a place to hold the vast amounts of information in a corporate network.\nWhat is MySQL?\nMySQL is a relational database management system (RDBMS) developed by Oracle that is based on structured query language (SQL).\nMySQL is open source, flexible, high performance, secure, and easy to use.\nWhat is SQLite?\nSQLite is a software library that provides a relational database management system. The lite in SQLite means lightweight in terms of setup, database administration, and required resources.\nSQLite has the following noticeable features: self-contained, serverless, zero-configuration, transactional.\nWhat is MongoDB?\nMongoDB is an open-source NoSQL database management program used for large sets of distributed data.\nOrganizations can use Mongo DB for its ad-hoc queries, indexing, load balancing, aggregation, server-side execution and other features.\n\n\nHi, my name is Ahmed Ibrahim. I’m a software engineer and Data Science Professional, and I’ll be the instructor for this course.\nIf you have any questions during this course, please don’t hesitate to ask me questions, and I’ll answer you as soon as possible.\nSo, we have a lot to cover in this unique course.\nLet’s get started",
      "target_audience": [
        "Python developers",
        "Python Beginners who know the Python basics",
        "Intermediate Python developer",
        "Anyone who wants to use databases with Python",
        "Python developer who wants to advance his dev career",
        "Programmers, software developers, software engineers and data scientists",
        "Developers who curious about Databases"
      ]
    },
    {
      "title": "Python Programming Complete Beginners Course Bootcamp 2025",
      "url": "https://www.udemy.com/course/learn-python-from-scratch-its-usage-by-nasa-in-mars-rovers/",
      "bio": "2025 Complete Python Bootcamp || Python Beginners to advanced || Python Master Class || Mega Course",
      "objectives": [
        "Basics in Python programming",
        "Control structures, Containers, Functions & Modules",
        "OOPS in Python",
        "How python is used in the Space Sciences",
        "Working with lists in python",
        "Working with strings in python",
        "Application of Python in Mars Rovers sent by NASA"
      ],
      "course_content": {
        "Introduction": [
          "Variables in Python",
          "Swapping in python",
          "Datatypes in Python",
          "Type Conversion",
          "Programming Task"
        ],
        "Control Structures": [
          "If statement",
          "Examples on If statement",
          "If-else statement",
          "Examples on if-else statement",
          "Elif-statement in Python",
          "Elif statement Example",
          "Some more examples on Elif starement",
          "While loop",
          "Examples on While loop",
          "For loop & examples",
          "Break & Continue statement",
          "Programming Task",
          "Programming Task",
          "Programming Task",
          "Programming Task"
        ],
        "Containers : Understanding Lists, Tuples, Sets and Dictionaries": [
          "Introduction to Containers & Understanding Lists",
          "Tuples",
          "Manipulating Tuples",
          "Tuple Indexing & Slicing",
          "Unpacking Tuples",
          "Sets",
          "Sets part-1",
          "Sets part-2",
          "Dictionaries",
          "Programming Task",
          "Programming Task",
          "Programming Task",
          "Programming Task"
        ],
        "Working with Lists in Python": [
          "Working with List Methods in Python",
          "Finding Even numbers in a given list",
          "Interchanging first and last items in a List",
          "Checking List is Empty or not",
          "Finding elements which are appearing odd number of times",
          "Removing Duplicates from a list",
          "Finding Union of two lists",
          "Finding Intersection of two lists",
          "Find Common elements in three lists",
          "Programming Task",
          "Programming Task",
          "Programming Task",
          "Programming Task"
        ],
        "Exploring Strings": [
          "Basics of Strings",
          "Program to Count all letters, digits & special symbols",
          "Count all Occurrences of characters in a String",
          "Removing Empty Strings",
          "Reversing a given string",
          "Programming Task",
          "Programming Task",
          "Programming Task"
        ],
        "Functions, Recursion & Modules": [
          "Functions",
          "Example program1 on functions",
          "Example program2 on functions",
          "Example program3 on functions",
          "Write a Function to find duplicates in a List",
          "Write a Function to compute Cumulative product of numbers in a list",
          "Factorial Using recursion",
          "Fibonacci Series Using recursion",
          "Modules in Python",
          "Computing GCD of two given numbers",
          "Computing Mean, Median and Mode",
          "Find the output of the program",
          "Programming Task",
          "Programming Task"
        ],
        "Introduction to OOPS in Python": [
          "Creating a Vehicle class",
          "Inheriting Vehicle class",
          "Class for computing area of rectangle",
          "Class for computing area and perimeter of rectangle"
        ],
        "Project : Banking Domain": [
          "Problem Statement : Banking Application",
          "Implementation in Python"
        ],
        "Python for Communicating with NASA Mars Rovers": [
          "Part-1",
          "Part-2"
        ],
        "Bonus Lecture": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No programming experience needed"
      ],
      "description": "This course is designed to brush up basics in Python programming and Show how python is used in Space sciences.\nDelving into the world of coding can be intimidating. With so many complex languages and implementation possibilities, it's easy to become overwhelmed. By starting off with Python programming, you'll learn a simple, versatile and highly readable code that you can execute on a wide variety of systems quickly and easily.\n\n\nLearn a simple, streamlined coding language quickly and easily\nIf you've never written a single line of code or if you're well-versed in multiple program languages, Python Programming for Beginners will enable you to better understand programming concepts.\nWidely regarded as one of the most simple and versatile programming languages out there, Python is used for web programming, video game building, microchip testing, desktop apps, and so much more. Used by programmers, developers, designers and everyone in between, it's one of the easiest programming languages to learn, and definitely the best starting point for new coders. This course will not only give you an understanding of the code, but will enable you to create and run real world Python programs too.\n\n\nMaster one of the most popular programming languages in the world\nGain a knowledge of basic programming concepts\nUnderstand and implement basic Python code\nCreate and run a real-world Python program\n\n\nThe following topics are taught in Python :\n1) Basics of python\n2) Control structures in python\n3) Containers in python\n4) Working with Lists in python\n5) Exploring Strings\n6) Functions, Recursion & Modules in python\n7) OOPS in Python\n8) Python to communicate with NASA Mars Rovers.",
      "target_audience": [
        "Anyone can learn"
      ]
    },
    {
      "title": "Basic C# Clearly Explained",
      "url": "https://www.udemy.com/course/friendlyinvitationtocsharp/",
      "bio": "A Friendly Invitation To Real C#",
      "objectives": [
        "Understand the basics of creating and running a simple console program",
        "Understand how to print output to a console window",
        "Create variables and set their values",
        "Create variables and change their values and print them again",
        "Describe an object with different data types",
        "Understand how to use tool tips to understand code better",
        "Use method chaining to write less",
        "Use method nesting to write less code",
        "Please look at the curriculum to see the rest of the topics covered"
      ],
      "course_content": {
        "Why Choose C# and Visual Studio Community": [
          "Why C# matters, and what can be done with it",
          "Why Visual Studio, and confirming it can be installed",
          "Downloading and installing Visual Studio Community 2015"
        ],
        "Learning The Fundamentals of Programming In C#": [
          "Creating, understanding and running a simple program",
          "Printing one line of output to a console window",
          "Understanding the relationship between name spaces, classes and methods",
          "Understanding code better through tool tips",
          "Writing less code by changing the using statement",
          "Accessing project files",
          "Things change. How can changing, or unknown quantities be represented in C#?",
          "Carefully tracking variable values with the debugger",
          "Describing objects in the world with different data types",
          "Some useful key combinations to make working in Visual Studio easier",
          "Finding the definition of various code components inside Visual Studio",
          "Producing useful output through simple calculations",
          "Doing calculations inside WriteLine"
        ],
        "Doing Slightly More Sophisticated C#": [
          "Understanding the results of division using the slash symbol",
          "Seeing the difference in division between % and /",
          "Using C# in a realistic program",
          "Typing less code by using compound operators",
          "Understanding how to add 1 to a variable before and after it's used",
          "Representing quantities that never change",
          "Understanding the life cycle of variables",
          "Formatting output so it looks more professional",
          "Using the var keyword to make coding easier"
        ],
        "Collecting And Operating On Input": [
          "Making a program that can collect input and produce output",
          "Making a program that can collect numerical input and produce numerical output",
          "Writing more compact code with method nesting",
          "Processing input sequentially using method chaining",
          "Understanding why it's necessary to convert between data types"
        ],
        "Conclusion": [
          "Where to go from here to grow your skills"
        ]
      },
      "requirements": [
        "Student should be able to download and install Visual Studio Community 2015"
      ],
      "description": "Dear Visitor,\n\n\nC#, pronounced as C-sharp, is a powerful programming language from Microsoft. This course is only three hours long, with an average video length of about six minutes. The lessons are a combination of videos and presentations. Please be sure to look under \"view resources\" to find the code and the presentations. The code examples are simple and focus on only one or two concepts at a time to ensure you fully grasp the material presented. Since the concepts presented are of a fundamental nature, they apply to some extent also to languages like Java. The videos also including zooming, which means the key points are further emphasized to be sure you truly understand. C# has been and remains one of the most popular, and most powerful programming languages to learn. Let's get coding!\nNote: Template for promo licensed from PRESENTERMEDIA",
      "target_audience": [
        "Beginners should take this course",
        "Intermediate programmers should not take this course",
        "Advanced programmers should not take this course"
      ]
    },
    {
      "title": "TypeScript Masterclass 2025 Edition - React + NodeJS Project",
      "url": "https://www.udemy.com/course/typescript-course/",
      "bio": "TypeScript V5 Updated Course - Full Stack Development, TypeScript with ReactJS, ShadcnUI, Node.js, Express and MongoDB.",
      "objectives": [
        "Learn TypeScript from scratch starting with the basic type safety and types offered by TypeScript to advanced OOP features.",
        "Deep dive into Object Oriented Programming features offered by TypeScript. Includes lectures about classes, abstract classes, access modifiers and interfaces.",
        "Understand advanced TypeScript features such as Generics, Decorators, Totality, Type Widening, Mapped Types, Conditional Types and so on.",
        "Create a full stack application using TypeScript and learn how to use TypeScript with technologies like React, Shadcn/ui, Tanstack Query, NodeJs, MongodDB",
        "Use TypeScript with front-end frameworks like React JS, Tanstack/React Query, and Shadcn/ui",
        "Use TypeScript for back-end development using NodeJS, Express, Mongoose and MongoDB"
      ],
      "course_content": {
        "TypeScript Introduction": [
          "Introduction",
          "What Is TypeScript",
          "Setup Development Environment",
          "Setting Up TypeScript Compiler",
          "How TypeScript Helps You Catch Errors",
          "Your First TypeScript Program",
          "Deep Dive into the JavaScript File Generated by TypeScript",
          "TypeScript Type System",
          "Quiz for Introduction Section."
        ],
        "Primitive Types": [
          "Introduction To Primitive Types",
          "string, number and boolean",
          "null and undefined Types",
          "bigint Type",
          "symbol Type",
          "★ Practice: The Primitive Types ★",
          "★Solution: The Primitive Types★",
          "Quiz on primitive types",
          "Coding Exercise: Primitive Types"
        ],
        "Exploring TypeScript's Type System": [
          "Introduction To TypeSystem",
          "any Type",
          "unknown type",
          "Type Alias",
          "Inference, Annotation, Duck Typing and Declaration",
          "Union Types",
          "Coding Exercise: Union Types and Type Alias",
          "Quick Conditional Types",
          "Understanding Type Hierarchy",
          "Type Casting",
          "Coding Exercise: Conditional Types and Type Casting",
          "★Practice: Type System★",
          "★ Solution: Type System ★"
        ],
        "Objects In TypeScript": [
          "Introduction To Objects",
          "Working With Objects",
          "Type Alias For Objects",
          "Coding Exercise: Working With Objects",
          "Nested Objects",
          "Index Signatures With Objects",
          "Optional And Readonly Properties",
          "Union Types With Objects",
          "Coding Exercise: Nested Objects",
          "Discriminating Unions",
          "Intersection Types",
          "★Practice: Strictly Type an Object★",
          "★Solution: Strictly Type an Object★"
        ],
        "Arrays And Enums": [
          "Introduction To Arrays And Enums",
          "Strictly Typing Arrays",
          "Tuples",
          "Readonly Arrays and Tuples",
          "Coding Exercise: Arrays and Tuples",
          "Enums",
          "Enums are Available At Runtime",
          "Enums Vs Objects",
          "Computed Enums",
          "Enums as Unions and Types",
          "Coding Exercise: Enums",
          "★Practice: Arrays and Enums★",
          "★Solution: Arrays and Enums★",
          "Test your knowledge about TypeScript Types."
        ],
        "Functions In TypeScript": [
          "Declaring Functions",
          "Default and Optional Parameters",
          "Custom Parameters And Return Types",
          "Coding Exercise: Functions in TypeScript",
          "Function Call Signatures",
          "Anonymous Functions",
          "void and never Types",
          "Coding Exercise: Function Call Signatures",
          "Async Functions",
          "Rest Parameters And Arguments",
          "Parameter Destructuring",
          "Coding Exercise: Async Functions",
          "Introduction to Function Overloading",
          "Function Overloading In TypeScript",
          "★Practice: Functions in TypeScript★",
          "★Solution: Functions in TypeScript★",
          "Test your knowledge about functions in TypeScript"
        ],
        "Generics In TypeScript": [
          "What are Generics",
          "Generic Function Declarations",
          "Generic and Constraints With Arrays",
          "Generics With Objects",
          "keyof Type Operator",
          "Generic Default Values",
          "Implementing A Polymorphic Function",
          "Problems With Function Overloads",
          "Using Generics Instead Of Function Overloads",
          "★Practice: Implement Map Function★",
          "★Solution: Implement Map Function★"
        ],
        "Classes In TypeScript": [
          "What Are Classes",
          "Running TypeScript In Browser",
          "Creating First Class And Instance",
          "Constructor Function",
          "this Keyword",
          "Classes as Types",
          "Optional And Readonly Fields",
          "Inheritance With Classes",
          "super Method",
          "★ Practice: Classes Exercise 1 ★",
          "★Solution: Classes Exercise 1★",
          "Access Modifiers",
          "public Members",
          "protected Members",
          "private Members",
          "Which Access Modifier to Use?",
          "Overriding Methods In Child Classes",
          "Shorthand For Constructor",
          "More Control Over Classes",
          "Using Mutators - Setters",
          "Using Accessors - Getters",
          "Static Members",
          "Understanding Static Blocks",
          "Generics With Classes",
          "Generics Use Case",
          "Concrete Implementation With User Type",
          "Intro To Mixins",
          "Composing New Classes With Mixins",
          "★Practice: Classes Exercise 2★",
          "★Solution: Classes Exercise 2★",
          "Test your knowledge about classes and access modifiers"
        ],
        "Abstract Classes And Interfaces": [
          "Module Introduction - Abstract Classes And Interfaces",
          "Introduction To Abstract Classes",
          "Shared methods in Abstract Classes",
          "Protected Constructor And Child Classes",
          "Adding Holidays To Classes",
          "Print Holidays Method",
          "Method Overriding In Child Class",
          "Introduction to Abstract Methods",
          "Introduction to Interfaces",
          "Introduction to Interfaces",
          "Extending Interfaces using extends keyword",
          "Inheriting From Multiple Interfaces",
          "Interfaces and Generics",
          "Assigning Generics To Interfaces",
          "Using Multiple Types as Generics",
          "Using interfaces with classes",
          "Multiple Classes Using the Same Interface",
          "Implementing Multiple Interfaces",
          "Multiple inheritance in classes using interfaces",
          "Interfaces and Access Modifiers",
          "Declaration Merging Interfaces",
          "Difference Between a Type and an Interface",
          "Difference Between a Abstract Class and an Interface",
          "Difference Between Interfaces and Abstract Classes 2",
          "What should you use? Abstract Class or Interfaces",
          "See what you have learnt about interfaces."
        ],
        "The TypeScript Compiler": [
          "Module Introduction - The TypeScript Compiler",
          "Setting up a Base Project",
          "Including and Excluding Files",
          "rootDir and outDir",
          "Setting a Compilation Target",
          "TypeScript Core Libs",
          "Type Checking Options",
          "JS in Browser Using Liver Server",
          "Understanding Source Maps"
        ]
      },
      "requirements": [
        "Basic knowledge of JavaScript. You do not need to be an expert.",
        "NO prior TypeScript Knowledge Needed. You will learn TypeScript from scratch in this course.",
        "ReactJS and NodeJS Basic Knowledge needed if you intend to work on those modules."
      ],
      "description": "This isn’t just another TypeScript course—it’s the most up-to-date, comprehensive course available, fully updated in 2025 to align with the latest version of TypeScript and the most modern development practices.\nAnd yes, I’ll teach you TypeScript from scratch! Whether you’re a beginner or an experienced JavaScript developer, this course covers everything you need to master TypeScript.\n\n\nYou'll learn all the essential concepts, including:\nType Declarations & Inference – Understand how TypeScript manages types dynamically\nInterfaces & Type Aliases – Create structured, reusable code with confidence.\nClasses & Object-Oriented Programming (OOP) – Master encapsulation, inheritance, and polymorphism in TypeScript.\nDecorators (Stage 2 & Stage 3) – Implement powerful meta-programming techniques in your projects.\nGenerics – Write scalable, reusable functions and components.\nMapped & Conditional Types – Take type safety to the next level.\nModules & Namespaces – Organize and structure your code efficiently.\nTypeScript Compiler (tsc) & Configuration – Learn how TypeScript compiles into JavaScript and how to configure it for different environments.\nAdvanced TypeScript Features – Utility types, infer keyword, keyof operator, and template literal types.\nThe Inner Workings of TypeScript – Go under the hood to understand how TypeScript interprets and enforces type safety.\nAnd Lots More (See Curriculm for extensive list)\n\n\nThis course isn’t just about learning TypeScript in isolation. You’ll also apply it to build real-world applications using the latest tools and frameworks:\nFrontend Development – Use TypeScript with React, ShadcnUI, TailwindCSS, and TanStack Query.\nBackend Development – Build a robust Node.js API with Express, Mongoose, and MongoDB using TypeScript\n\n\nBy the end of this course, you’ll have mastered TypeScript in its entirety, gaining the skills to write scalable, high-performance applications that follow industry best practices.\n\n\nThis course contains 300+ Videos which in total contain more than 25 hours of content. I teach you the latest features of TypeScript in a very practical manner providing you with the in-depth knowledge you need to master TypeScript.\n\n\nOnce we are through with the theoretical part of the TypeScript and we understand the intrinsics of the language, we set off to build a full stack application. We build a task management application where you can create a new task and set the priority as well as the status of the task. We also build real-time task counters and work on a complete server state synchronization.\n\n\nWhile building the front end of this application, you learn how to use TypeScript with React, ShadcnUI and  Tanstack Query. And, when we build the REST API with Node as a backend service for the application, we get practical hands-on experience on how to use Typescript in conjunction with NodeJS along with Express, Mongoose, and MongoDB database. If you are a full-stack developer, you can enjoy and build the complete project with me. And of you, skillsets are limited to the backend or front-end. You can choose the module based on your skills as these modules are self-contained and do not have a dependency on each other.\n\n\nDetailed Breakdown Of Topics Covered In The Course:\nWhat is TypeScript\nHow TypeScript helps You Write Better Code\nIntroduction To Types\nDifferent types of types in TypeScript\nPrimitive types\nObject types\nArray types\nTuples\nEnums\nUnions\nIntersection types\nCustom types\nType inference\nVoid\nNever\nFunctions in TypeScript\nCall signatures\nFunction overloading\nPolymorphic functions\nGenerics\nClasses in TypeScript\nInheritance\nAccessors and Mutators\nConstructors\nAccess modifiers\nStatic members\nAbstract classes\nMethod Overriding\nInterfaces\nMultiple inheritance with interfaces\nTypeScript Compiler and how to modify it for your needs\nJavaScript Prototypes and Objects\nPrototypical inheritance\nProperty descriptors\nDecorators\nDecorator factories\nClass decorators\nMethod decorators\nParameter decorators\nDecorators on static members of a class\nProperty decorators\nMultiple decorators and execution sequence\nSubtypes and Supertypes\nTypecasting\nType widening\nTotality\nDiscriminated unions\nIndex Accessed types\nKeyOff operator\nMapped types\nConditional Types\nType definitions for third-party libraries\nBuilding a full stack application\nApplication front-end using - TypeScript with React,  ShadcnUI, React Query / Tanstack Query.\nApplication backend REST API using-  TypeScript with NodeJS, Mongoose, and MongoDB\n\n\nWhy You Should Learn TypeScript\nTypeScript is a strongly typed programming language that builds on JavaScript. TypeScript is a superset of JavaScript and can be used along with JavaScript, allowing slow and steady upgradation. TypeScript has been voted the second most loved programming language in the Stack Overflow 2020 Developer survey.\nSince the introduction of NodeJS to the community a decade ago, JavaScript has become the most widely used cross-platform programming language. While the size, scope, and complexity of JavaScript programs have grown exponentially, the JavaScript language's ability to express the relationships between different entities of code has not. The most common errors that programmers make are type errors: a specific type of value was used when a different type of value was expected. This could result from simple typos, a failure to understand a library's API surface, incorrect assumptions about runtime behavior, or other errors. TypeScript's goal is to be a static type checker for JavaScript programs.\nApart from providing type checking and strict types, TypeScript comes with a bunch of features that help you to write Object Oriented Code. These features are specific to TypeScript and do not exist in JavaScript.\n\n\nWho Should Take This Course?\nIf you are an existing JavaScript developer and want to up your JavaScript game with TypeScript. This course is a perfect fit for you.\nIf you already have some basic TypeScript knowledge and want to dive deep into advanced concepts. This course is a perfect fit for you.\nIf you want to learn how to use TypeScript and existing technologies such as React, ShadcnUI, Tanstack Query, Node.js, Mongoose and MongoDB. This course will help you learn TypeScript in conjunction with these technologies.\n\n\nWho Should Not Take This Course?\nSince TypeScript is a superset of JavaScript, this course is not for you if you have never worked on JavaScript. You do not need to be an expert at JavaScript but should have some basic knowledge of JavaScript to benefit from this course.\nSuppose you are a new programmer looking for your first programming language course. Then this course is not for you. Since TypeScript builds up on JavaScript, some prior knowledge of JavaScript programming is needed to be able to take this course.",
      "target_audience": [
        "A JavaScript developer who wants to learn TypeScript",
        "Developers who have NO prior experience with TypeScript",
        "A beginner TypeScript developer who wants to learn TypeScript",
        "Developers who want to use TypeScript with front-end frameworks like React JS and Material UI",
        "Developers who want to use TypeScript for backend REST API development with NodeJs and TypeORM"
      ]
    },
    {
      "title": "Full Stack: Angular and Java Spring Boot E-Commerce Website",
      "url": "https://www.udemy.com/course/full-stack-angular-spring-boot-tutorial/",
      "bio": "Build a Full Stack E-Commerce website with Angular and Java Spring Boot (includes Stripe Credit Card Payments)",
      "objectives": [
        "Develop a Full Stack E-commerce application with Angular front-end and Spring Boot back-end",
        "Learn how to build Angular front-end applications .... all from the beginning. We assume no prior knowledge of Angular.",
        "Develop a Spring Boot back-end using REST APIs and MySQL database",
        "Develop a shopping cart with Angular frontend and Spring Boot backend integration",
        "Process credit card payments using Stripe API",
        "Develop your code using modern development tools such as IntelliJ, VS Code, Maven and npm",
        "I am a RESPONSIVE INSTRUCTOR ... post your questions and I will RESPOND in 24 hours.",
        "Join an ACTIVE COMMUNITY of 80,000+ students that are already enrolled! Over 6,000+ Reviews - 5 STARS",
        "Full Stack developers with Angular and Spring Boot are in HIGH-DEMAND. Level up your career and become a FULL STACK developer!",
        "You can DOWNLOAD all source code and PDFs. Perfect for offline LEARNING and REVIEW."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "How To Take This Course and How To Get Help",
          "Download the Source Code and PDF Files"
        ],
        "Angular Overview": [
          "Angular Overview"
        ],
        "Set Up Development Tools": [
          "Set Up Development Tools"
        ],
        "TypeScript Crash Course - Fundamentals": [
          "TypeScript Overview",
          "Creating our first TypeScript application",
          "Defining Variables - Overview",
          "Defining Variables - Write Some Code",
          "Creating Loops and Arrays - Overview",
          "Creating Loops and Arrays - Write Some Code - Part 1",
          "Creating Loops and Arrays - Write Some Code - Part 2"
        ],
        "TypeScript Crash Course - Creating Classes": [
          "Creating Classes - Overview",
          "Creating Classes - Write Some Code",
          "Defining Accessors - Overview",
          "Defining Accessors - Write Some Code",
          "Configuring Compiler Options with tsconfig.json",
          "Parameter Properties",
          "TypeScript Modules: Import and Export"
        ],
        "TypeScript Crash Course - Inheritance and Interfaces": [
          "Inheritance - Overview",
          "Inheritance - Creating the Superclass and Subclass",
          "Inheritance - Pulling it all together in a Main App",
          "Inheritance - Developing a second Subclass",
          "Inheritance - Adding Shapes to an Array",
          "Abstract Classes - Overview",
          "Abstract Classes - Write Some Code",
          "Interfaces - Overview",
          "Interfaces - Write Some Code"
        ],
        "Angular Crash Course - Fundamentals": [
          "Getting Started with Angular",
          "Exploring the Angular Project",
          "Creating a New Angular Project",
          "Behind The Scenes of An Angular Project - Overview",
          "Behind The Scenes of An Angular Project - Demo",
          "Creating a New Angular Component - Overview - Part 1",
          "Creating a New Angular Component - Overview - Part 2",
          "Creating a New Angular Component - Write Some Code - Part 1",
          "Creating a New Angular Component - Write Some Code - Part 2",
          "Creating a New Angular Component - Write Some Code - Part 3"
        ],
        "Angular Crash Course - Bootstrap CSS, Conditionals and Formatting": [
          "Integrating Angular and Bootstrap CSS - Overview",
          "Integrating Angular and Bootstrap CSS - Write Some Code",
          "Angular Conditionals and Formatting - Overview",
          "Angular Conditionals and Formatting - Write Some Code",
          "FAQ: Angular Conditionals: How to highlight table row"
        ],
        "eCommerce Project - Spring Boot Backend": [
          "Project Overview",
          "Spring Boot Project Set Up",
          "HEADS UP: IntelliJ and Lombok",
          "Set Up Database Tables",
          "Create Spring Boot Starter Project",
          "Develop JPA Entities - Part 1",
          "Develop JPA Entities - Part 2",
          "Create REST APIs with Spring Data JPA Repositories and Spring Data REST",
          "REST APIs - Configure for Read Only - Overview",
          "REST APIs - Configure for Read Only - Write Some Code"
        ],
        "eCommerce Project - Angular Front End - Product List": [
          "Angular Project Overview - Part 1",
          "Angular Project Overview - Part 2",
          "Angular Project - Setup",
          "Angular Project - Create Product class and Product Service - Part 1",
          "Angular Project - Create Product class and Product Service - Part 2",
          "Angular Project - Update Angular Component",
          "Angular Project - Integrating Angular and Spring Boot for Full Stack App!",
          "Angular Project - Building an HTML Table",
          "Angular Project - Adding Product Images"
        ]
      },
      "requirements": [
        "Spring Boot experience is required.",
        "No experience required for Angular. I will teach you Angular from the beginning."
      ],
      "description": "#1 HIGHEST RATED - FULL STACK ANGULAR+SPRING BOOT COURSE ON UDEMY - OVER 6,000 REVIEWS - 5 STARS!\n\n\nNEW UPDATES: I ADDED NEW VIDEOS ON\n- STRIPE CREDIT CARD PAYMENTS\n- SECURITY: JWT, OAUTH2, OPENID CONNECT, SSL/TLS\n\n\n---\nLearn how to build a Full Stack E-commerce website with Angular and Java Spring Boot.\nAngular and Spring Boot are two of the hottest technologies for developing Full Stack applications.\nKnowing how to build Full Stack applications with Angular and Java Spring Boot can get you a job or improve the one you have.  These are hot skills and companies are desperately looking for developers. Some of the highest paying job posting are for Full Stack developers with Angular and Spring Boot experience.\nThis course will help you quickly get up to speed with Angular and Java Spring Boot. I will demystify the technology and help you understand the essential concepts to build a Full Stack application with Angular and Java Spring Boot.\nYou will also use modern development tools such as IntelliJ, Visual Studio Code, Maven and npm. All of the projects are based on Maven and npm, so you are free to use any tool that you want.\nDuring the course you will build a full stack E-commerce application. You will develop the code for the product catalog, shopping cart and checkout. In the checkout section of the course, you will learn how to process credit card payments with Stripe.\nThe course also shows you how to add security to your application. We will use JWT, OAuth2, OpenID Connect and SSL/TLS. You will add login/logout features, protect access to sensitive data.\n---\nIn this course, you will get:\n- All source code is available for download\n- Responsive Instructors: All questions answered within 24 hours\n- PDFs of all lectures are available for download\n- Professional video and audio recordings (check the free previews)\n- High quality closed-captions / subtitles available for English and 10+ other languages (new!)\n---\n\n\nCompared to other Full Stack courses\nThis course is up to date and covers the latest versions of Angular and Spring Boot. The course also includes new content on Credit Card Processing with Stripe.\nBeware of other Udemy Full Stack courses. Most of them are outdated and use old versions of Angular and Spring Boot. Don’t waste your time or money on learning outdated technology.\nTake my course where I show you how to develop a real-time full stack application with Angular and Spring Boot. You can type the code along with me in the videos, which is the best way to learn.\nI am a very responsive instructor and I am available to answer your questions and help you work through any problems.\nFinally, all source code is provided with the course along with setup instructions.\n\n\nStudent Reviews Prove This Course's Worth\nThose who have reviewed the course have pointed out that the instruction is clear and easy to follow, as well as thorough and highly informative.\nMany students had also taken other Full Stack courses in the past, only to find that this Full Stack course was their favorite. They enjoyed the structure of the content and the high quality audio/video.\n\n\nAmazing, above expectations!!!! Angular Spring Full Stack Best Course in Udemy ever!! - Driss Najih\n\n\nThis was not my first course on Angular and I am learning programming for over a year now, and I can say that it could have not been possible to present the material any better. This is how programming should be taught. Congrats Chad and Harinath, I wish you all the best. - Zoran Dzoic\n\n\nEasy to follow , clear instructions, knowledgeable teacher and up to date material, I love it so far. Honestly, it is the best so far. - Ramzi Haddad\n\n\nQuality Material\nYou will receive a quality course, with solid technical material and excellent audio and video production. I am a best-selling instructor on Udemy. Here's a list of my top courses.\nSpring and Hibernate for Beginners\nHibernate: Advanced Development Techniques\nDeploy Java Spring Apps Online to Amazon Cloud (AWS)\nJSP and Servlets for Beginners\nJavaServer Faces (JSF) for Beginners\nThese courses have received rave 5 star reviews and over 560,000 students have taken the courses. Also, these courses are the most popular courses in their respective categories.\nI also have an active YouTube channel where I post regular videos. In the past year, I’ve created over 800 video tutorials (public and private). My YouTube channel has over 6 million views and 38k subscribers. So I understand what works and what doesn’t work for creating video tutorials.\n\n\nNo Risk – Udemy Refund\nFinally, there is no risk. You can preview 25% of the course for free. Once you purchase the course, if for some reason  you are not happy with the course, Udemy offers a 30-day refund (based on Udemy's Refund Policy).\nSo you have nothing to lose, sign up for this course and learn how to build Full Stack E-Commerce website with Angular and Java Spring Boot from scratch!\nIt is time to level up your career and become a Full Stack developer with Angular and Java Spring Boot.\n\n\nTarget Audience\nJava Developers with Spring Boot experience\nNo experience required for Angular. I will teach you Angular from the beginning.",
      "target_audience": [
        "The course is appropriate for all Spring Boot developers."
      ]
    },
    {
      "title": "Python Beyond the Basics - Object-Oriented Programming",
      "url": "https://www.udemy.com/course/python-beyond-the-basics-object-oriented-programming/",
      "bio": "From Classes To Inheritance - OOP In-Depth For Python Programmers",
      "objectives": [
        "Design Reusable Object-Oriented Python Classes",
        "Apply OOP Concepts to handle complexity",
        "How to handle Errors"
      ],
      "course_content": {
        "Introduction To Object Oriented Python": [
          "Important - Download These First - Working Files",
          "What Is Object Oriented Programming And Why?",
          "Object-Oriented Python",
          "Modules Versus Classes"
        ],
        "Getting Started": [
          "Prerequisites And Toolkit",
          "Choosing An IDE Or Text Editor And Workflow"
        ],
        "Classes": [
          "Classes, Instances, Attributes And Methods",
          "Defining A Class",
          "Instance Methods",
          "Instance Attributes",
          "Encapsulation",
          "Init Constructor",
          "Class Attributes",
          "Working With Class And Instance Data",
          "Assignment 1",
          "Assignment 1 - Solution"
        ],
        "Inheritance And Polymorphism": [
          "Inheriting Attributes",
          "Inheritance Examples",
          "Polymorphism",
          "Inheriting The Constructor",
          "Multiple Inheritance And The Lookup Tree",
          "Decorators, Static And Class Methods",
          "Abstract Classes",
          "Method Overloading - Extending And Providing",
          "Composition Versus Inheritance",
          "Assignment 2",
          "Assignment 2 - Solution",
          "Assignment 2 For Extra Credit - Solution"
        ],
        "Advanced Features": [
          "Implementing Core Syntax",
          "Subclassing Built-Ins",
          "Attribute Encapsulation",
          "Private Variable Names",
          "With Context",
          "New Style Classes",
          "Assignment 3",
          "Assignment 3 - Supplementary Hints",
          "Assignment 3 - Solution"
        ],
        "Exceptions": [
          "Trapping And Raising Exceptions",
          "Custom Exceptions",
          "Assignment 4",
          "Assignment 4 - Solution"
        ],
        "Object Serialization": [
          "Pickle",
          "JSON",
          "YAML",
          "Assignment 5",
          "Assignment 5 - Solution"
        ],
        "Efficiency And Testing": [
          "Debugging - PDB",
          "Logging",
          "Benchmarking - The Timeit Module",
          "The Pytest Module - Part 1",
          "he Pytest Module - Part 2",
          "Assignment 6",
          "Assignment 6 - Solution"
        ],
        "Conclusion": [
          "What We Have Learned",
          "Where To Go From Here"
        ]
      },
      "requirements": [
        "This course is designed for users that already have a basic working knowledge of Python"
      ],
      "description": "In this Python Beyond the Basics - Object-Oriented Programming training course, expert author David Blaikie will teach you how to design Python classes, and how to implement object-oriented programming concepts in Python. This course is designed for users that already have a basic working knowledge of Python.\nYou will start by learning about classes, including defining a class, class attributes, and working with class and instance data. From there, David will teach you about inheritance and polymorphism. This video tutorial also covers advanced features, such as implementing core syntax, subclassing built-ins, and new style classes. You will also learn about exceptions and object serialization. Finally, David will teach you about efficiency and testing, including debugging, logging, and benchmarking.\nOnce you have completed this computer based training course, you will be fully capable of designing your own Python classes, as well as implementing object-oriented programming concepts in Python.",
      "target_audience": [
        "Anyone wanting to learn Object-Oriented programming with Python"
      ]
    },
    {
      "title": "Learn to Code with Rust",
      "url": "https://www.udemy.com/course/learn-to-code-with-rust/",
      "bio": "Master the Rust programming language from A-Z. Includes projects, quizzes, and more. Beginners welcome!",
      "objectives": [
        "Master programming in Rust, a fast, safe, and powerful language used in web development, command-line tools, blockchain, and many other domains",
        "Conquer Rust's ownership model, use references to reduce memory, and learn how the compiler prevents common memory problems",
        "Progress from core language fundamentals to advanced features like traits, lifetimes, and closures",
        "Understand Rust's core building blocks including structs, enums, hashmaps, and more",
        "Learn how to structure larger Rust projects using crates, modules, external dependencies, and more",
        "Explore a dynamic curriculum with videos, quizzes, written assignments, coding challenges, and more"
      ],
      "course_content": {},
      "requirements": [
        "A Windows, macOS, or Linux computer",
        "A modern text editor (Visual Studio Code is installed and used in the course)",
        "Persistence and dedication! No previous experience with programming is needed!"
      ],
      "description": "Learn to Code with Rust is a comprehensive introduction to programming in Rust, one of the fastest-growing programming languages in the world. Rust powers codebases in companies and products like Amazon, Microsoft, Firefox, Discord, and more. It is used in a variety of disciplines including web development, CLI programs, build tools, and databases.\nOver more than 60 hours of video content, we'll tackle the language from A to Z, covering everything you need to know about Rust to be an effective developer.\nThe course is jam-packed with:\n60+ hours of video, with new content added frequently\nMultiple-choice quizzes\nCoding challenges and projects\nSection reviews\nLearn to Code with Rust is designed from the ground up to take you from novice to professional. Complete beginners are welcome; no prior experience is needed!  Over 400+ videos, we'll work our way from language fundamentals to advanced features. Topics covered include...\nSetup & Installation\nVariables\nData types\nFunctions and Methods\nControl Flow\nOwnership and References\nSlices\nStructs\nEnums\nGenerics\nOption and Result Enums\nVectors\nProject Structure\nStrings\nHash Haps\nError Handling\nTraits\nLifetimes\nClosures\nIterators\nTesting\nRandomness\n...and more!\nThroughout the entire journey, I'll be coding alongside you step by step in the code editor. You'll also be able to test your knowledge through numerous coding challenges, quizzes, and written assignments.\nRust is known to be a challenging language to learn. For many concepts, I had to browse through different books, articles, and videos to understand what was happening. My hope here is to demystify the concepts and make it easier for new students to learn the language.\nThanks for checking out the course!",
      "target_audience": [
        "Aspiring programmers interested in learning one of the fastest-growing programming languages in the world",
        "Developers who are familiar with another language and curious to see the unique features of Rust"
      ]
    },
    {
      "title": "C PROGRAMMING made easy",
      "url": "https://www.udemy.com/course/c-programming-made-easy/",
      "bio": "Beginners first step to Coding world",
      "objectives": [
        "Get Confidence in writing C Programs, Clear knowledge on C Programming Concepts"
      ],
      "course_content": {
        "Software Installation": [
          "Install the required Software"
        ],
        "First C-Program [ \"Hello, World\" Program]": [
          "\"Hello World\" Program"
        ],
        "Programming Basics [printf, scanf, Data Types and Operators]": [
          "DATA TYPES in C Programming",
          "printf and scanf [Read values from user]",
          "Format Specifiers in C",
          "Operators in C"
        ],
        "CONTROL STRUCTURES in C Programming": [
          "Overview of Control Structures",
          "if, if..else, if..else if..else conditions",
          "Conditional (Or) Ternary Operator in C",
          "SWITCH Case in C",
          "\"FOR Loop\" in C Language",
          "\"While\" Loop in C Language",
          "\"do while\" Loop in C Language",
          "\"Nested for\" loop in C Language"
        ],
        "JUMP STATEMENTS in C Language": [
          "\"break\" in C Language",
          "\"continue\" in C Language",
          "\"goto\" in C Language"
        ],
        "FUNCTIONS in C Language": [
          "Functions - Declaring and Defining a function in C",
          "RECURSION in C"
        ],
        "ARRAYS in C-Language": [
          "Arrays - Introduction",
          "Arrays - In detail with examples"
        ],
        "Working with STRINGS in C": [
          "Character Arrays in C",
          "String Functions in C"
        ],
        "Math Functions in C": [
          "Inbuilt Math Functions in C"
        ],
        "Pointers and Memory Management in C": [
          "Pointers - Introduction",
          "Call by Value (vs) Call by Reference",
          "Memory Management in C"
        ]
      },
      "requirements": [
        "Basic knowledge of usage of computer"
      ],
      "description": "==========================\nC PROGRAMMING made easy\n==========================\nThis course is designed for students / professionals who are relatively to new (or) beginners to programming.\nThis course is designed to give hands-on programming knowledge in various concepts of C-Language.\nBelow concepts are covered with illustrated code samples. All code samples can be reviewed and practiced.\n==========\nTOPICS\n==========\nSoftware Installation Guidance\nHello World program in C\nData Types\nOperators\nControl Structures\nLoops - for, while, do while, nested loop\nJump Statements - break, continue, goto\nArrays - Sample programs\nFunctions\nRecursion\nPointers - Introduction\nCall by Value\nCall by reference\nStructures and Unions\nWorking with Files\nWorking with String and Math functions\n\n\nAlso, I would suggest to do hands-on along with me as and when I explain the concepts.\nProgramming is best learnt when you practice along.\n\n\nIn case, if you are not able to install the software., you can practice the code samples which I have explained in online C compilers as well.\n\n\nFeel free to write to me to include any additional topics related to this course which will benefit student community. I will consider including the same in this course.\nOnce again,\nThank you for enrolling for this course.\nHope you will enjoy the course as much as I enjoyed creating the course.\n\n\nRegards,\nMeganadha Reddy K\n17 Years of experience working for companies like Accenture, Deloitte, Cognizant, Capgemini etc.,\nCurrently working for a product based company.",
      "target_audience": [
        "Beginners who are new to programming or who want to revise or want to get good C Programming skills"
      ]
    },
    {
      "title": "Python for Data Analysis & Visualization",
      "url": "https://www.udemy.com/course/python-for-data-analysis-visualization/",
      "bio": "Master the main data analysis and visualization libraries in Python: Numpy, Pandas, Matplotlib, Seaborn, Plotly + more",
      "objectives": [
        "Python, we will be using Python3 in this course",
        "Data Analysis Libraries in Python such as NumPy and Pandas",
        "Data Visualization Libraries in Python such as Matplotlib and Seaborn",
        "How to analyse data",
        "Data Visualization",
        "Jupyter Notebooks IDE / Anaconda Distribution"
      ],
      "course_content": {},
      "requirements": [
        "No prior knowledge required"
      ],
      "description": "*This course requires you to download Anaconda. If you are a Udemy Business user, please check with your employer before downloading software.*\n\n\nLearn one of the most in demand programming languages in the world and master the most important libraries when it comes to analysing and visualizing data.\nThis course can be split into 3 key areas:\nThe first area of the course focuses on core Python3 and teaches you the essentials you need to be able to master the libraries taught in this course\nThe second area focuses on analysing and manipulating data. You will learn how to master both NumPy and Pandas\nFor the final part of the course you learn how to display our data in the form of interesting charts using Matplotlib,  Seaborn and Plotly Express\nYou will be using Jupyter Notebooks as part of the Anaconda Distribution. Jupyter is the most popular Python IDE available.\nThe course is packed with lectures, code-along videos, coding exercises and quizzes.\nOn top of that there are numerous dedicated challenge sections that utilize interesting datasets to enable you to make the most out of these external libraries.\nThere should be more than enough to keep you engaged and learning! As an added bonus you will also have lifetime access to all the lectures as well as lots of downloadable course resources consisting of detailed Notebooks.\nThe aim of this course is to make you proficient at using Python and the data analysis and visualization libraries.\nThis course is suitable for students of all levels and it doesn’t matter what operating system you use.\nCurriculum summary:\nSet Up & Installation\nCore Python\nPython Objects, Variables and Data Types\nControl Flow and Loops\nFunctions\nExternal Libraries\nData Analysis Libraries\nNumPy\nPandas\nConnecting to different Data Sources\nVisualization Libraries\nMatplotlib\nSeaborn\nPlotly Express\n4 dedicated Challenge Sections!",
      "target_audience": [
        "Python developers curious about the data analysis libraries",
        "Python developers curious about the data visualization libraries",
        "Anyone interested in learning Python",
        "Data Analysts",
        "Anyone working with data"
      ]
    },
    {
      "title": "Practical C++: Learn C++ Basics Step by Step",
      "url": "https://www.udemy.com/course/practical-cpp/",
      "bio": "Get Started Quickly with C++: Only Hands-on Lessons and Practice to Master C++ Basics.",
      "objectives": [
        "Master C++ Basics",
        "Get the fundamentals you need for your next C++ projects",
        "Write clean C++ code from the start",
        "Variables, functions, loops, conditions, and more.",
        "Use the C++ Standard Library (std)",
        "Install Visual Studio Code on Windows, Linux, and MacOS",
        "Install a compiler for C++",
        "Interact with the user from your program",
        "Practice your C++ skills with many exercises",
        "Learn a few modern C++ functionalities",
        "Compile and Run C++ code by yourself",
        "Create prototypes for your C++ functions",
        "Organize your C++ code with .hpp and .cpp files",
        "Understand what is a reference and how to use it",
        "Write OOP (Object Oriented Programming) Code with C++",
        "Intro to inheritance with OOP C++",
        "Learn the Best Practices from the start",
        "Learn by doing"
      ],
      "course_content": {
        "Introduction": [
          "Welcome!",
          "How to follow this course",
          "Install VS Code on Windows/Linux/MacOS",
          "Configure VS Code",
          "Create a C++ project for the course"
        ],
        "C++ Basics - Level 1": [
          "Intro",
          "Your First C++ Program",
          "Variables",
          "Variables - Data Types",
          "Variables - Constants",
          "Arrays",
          "Arrays with std::vector",
          "Get User Input",
          "C++ Level 1: Exercises",
          "C++ Level 1: Exercises - Solution"
        ],
        "C++ Basics - Level 2": [
          "Intro",
          "Functions",
          "Functions - Parameters",
          "Functions - Return Statement",
          "Variable Scope",
          "Comments",
          "Using namespace std",
          "C++ Level 2: Exercises",
          "C++ Level 2: Exercises - Solution"
        ],
        "C++ Basics - Level 3": [
          "Intro",
          "Conditional Statements with Booleans",
          "Combining Conditional Statements",
          "Conditions with If",
          "Else, else if",
          "For Loop",
          "While Loop",
          "Loops and Arrays",
          "C++ Level 3: Exercises",
          "C++ Level 3: Exercises - Solution"
        ],
        "C++ Basics - Level 4": [
          "Intro",
          "Functions - Pass Parameters by Copy or by Reference?",
          "Functions - Prototypes",
          "Organize your Code (.hpp and .cpp files)",
          "Compile and Run a C++ Program in the Terminal",
          "C++ Level 4: Exercises",
          "C++ Level 4: Exercises - Solution"
        ],
        "Extra: C++ OOP": [
          "Intro",
          "What is OOP, What are Classes?",
          "Create a C++ Class - Attributes, Constructor",
          "Add Methods to the Class",
          "Create an Object (Instance) from your Class",
          "Organize your C++ OOP Code",
          "Intro to Inheritance"
        ],
        "Conclusion": [
          "Best Practices when Writing C++ Code",
          "What to do next",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A computer and a strong will to learn, that’s it!"
      ],
      "description": "You are new to programming and you want to learn C++ Basics fast?\nOr… You’re already a C++ developer and want a quick and to-the-point refresher of the basics?\nAnd, you prefer to learn by doing? → This C++ course is for you.\nNo prerequisite needed for this course: just a computer and a strong will to learn.\n\n\n→ Why this course?\n\n\nC++ is a quite particular language: it’s one of the oldest one in the market (many other languages are in fact based on C++), and it’s used in every possible industry in the world.\nC++ is considered as “hard to learn”. Well, it’s maybe harder to learn than other languages such as Python or JavaScript, but in return, you get some huge advantages: you can code with one of the most powerful languages in the world - which opens many possibilities that are not available with other “less powerful” languages. Also, and this can be an important factor for you: if you’re looking for a job, having C++ knowledge will help you stand out, and maybe get a better salary. The reasoning here is quite simple: as C++ is harder, you have less competition, and companies are willing to pay more.\nAnd now, “harder” doesn’t mean “impossible”, if you have the right resources to start with.\nI’ve created this course with one thing in mind: to give you, as fast as possible, the knowledge and practice you really need to master C++ basics. No more, no less.\nAnd I’ve made the explanations as simple and easy as possible so you can get started and get motivated to learn more about C++.\nThis is not a complete 50h course where you learn everything about everything. No, this course is about going to the point and getting the basics.\nWith this practical C++ course you will get what you really need to start. Then you will be able to efficiently use this C++ foundation to learn and work in many different fields:\nVideo games\nEmbedded software\nRobotics (my favorite!)\nArtificial intelligence\nOperating systems\nAnd many more.\n\n\n→ How do I teach\n\n\nStep by step: each section, each lesson, is built on top of the previous one. 1 lesson = 1 small step towards your mastery of C++ Basics.\nHands-on: no complicated theoretical explanations, I directly write the code and explain at the same time. And I encourage you to write the code too!\nNo copy and paste: I won’t make some code magically appear on the screen without any explanation. I write all the code that I explain, and explain all the code that I write.\nTo the point: if I can explain something in 5 minutes, I don’t produce a 15 minutes video to make the course look longer.\nPractical: I teach you what you really need in order to do useful things with C++. This means focusing on what can give you the greatest value now.\nAdditional Practice: with each key concept you get some exercises to practice on exactly what you need to understand, so the learning is much more efficient.\nSo, if you like to learn by doing, and want to really understand what you do, you will love this course.\n\n\n→ What will you do and learn in this course?\n\n\nFirst, you will install the development tools (compiler, VS Code) you need to comfortably write C++ code - installation instructions for Windows, Linux, and MacOS. Yes, you can follow the course with any operating system you want!\nThen you will learn C++ with 4 different levels.\nFor each level you get:\nA quick introduction video to make the relation between different levels and explain what we are going to do.\nHands-on lessons (5-10 minutes long) to introduce new key concepts.\nAt the end of the level (section), some exercises to practice on the key points of the section, and also combine the concepts together.\nEach level builds directly on top of the previous levels. Here’s a quick overview of the concepts you will discover (and practice on):\nLevel 1: Write a program, variables, arrays, vectors, user input.\nLevel 2: Functions, scope, comments, namespaces.\nLevel 3: Conditions (if), for loops, while loops.\nLevel 4: References, prototypes, compilation from the terminal.\nExtra: you also get a bonus section at the end of the course, on C++ OOP (Object Oriented Programming). OOP is everywhere nowadays, and this is a nice addition to add to your skill set.\nNow, wait no more and enroll in this course today!\nYou also get a 30 days money-back guarantee. So, enroll now and if you’re not happy with the course, or if I don't deliver on what I said, simply get the refund.\nSee you in the course! :)",
      "target_audience": [
        "Programming beginners who want to start learning C++ with a comprehensive and to-the-point course.",
        "Programming beginners who learnt another language before and want to switch to C++.",
        "C++ developers who want to refresh their basics without wasting time.",
        "Anyone interested in working on video games, embedded software, robotics, artificial intelligence, operating systems, etc."
      ]
    },
    {
      "title": "Java for Absolute Beginners",
      "url": "https://www.udemy.com/course/java-for-absolute-beginners/",
      "bio": "A course on Java for complete beginners to computer programming, for those who want concepts explained in plain English.",
      "objectives": [
        "The fundamentals of Java",
        "How to understand and write simple Java programs",
        "Practice exercises to strengthen your coding knowledge"
      ],
      "course_content": {
        "First Steps": [
          "Downloading and installing IntelliJ IDEA",
          "Creating a new Java project"
        ],
        "Introduction to Java Code": [
          "A Java program is like a recipe",
          "A recipe's method and Java methods",
          "The structure of a basic program"
        ],
        "HelloWorld: Writing Our First Program": [
          "Displaying a message on the screen",
          "Formatting text using escape sequences",
          "A glimpse into methods and System.out.println()",
          "Using packages to organise our classes",
          "Coding Challenge 1 - HelloWorld"
        ],
        "Variables": [
          "Introduction to variables",
          "The int and double data types",
          "Variable manipulation and integer division",
          "The char, boolean, and String data types",
          "Variable naming rules and best practices",
          "Type casting"
        ],
        "User Input": [
          "Reading input using the Scanner",
          "Writing a question and answer program",
          "The System.out.format() method",
          "Applying System.out.format()",
          "Tokens and the nextLine() method",
          "Coding Challenge 2 - User Input"
        ],
        "Conditional Statements": [
          "Introduction to if-statements",
          "If, else-if, and else blocks",
          "Complex conditions with logical operators",
          "Checking String equality",
          "Nesting if-statements",
          "Lexical scope",
          "The switch statement",
          "Coding Challenge 3 - If-then Statements"
        ],
        "Loops": [
          "The while loop",
          "The for loop",
          "Break and continue",
          "The do-while loop",
          "The modulo operator",
          "Coding Challenge 4 - Loops"
        ],
        "Arrays": [
          "Introduction to arrays",
          "Adaptive iteration",
          "Simple processing using arrays",
          "Sizes, types, and fortune tellers",
          "Inputting data and generating a statistic",
          "Foreach loop",
          "Coding Challenge 5 - Arrays"
        ],
        "Methods (Functions)": [
          "Introduction to methods",
          "Passing data to methods",
          "Returning data from methods",
          "Passing and returning data",
          "References (part 1)",
          "References (part 2)",
          "Class/Static members"
        ],
        "Java Fundamentals Wrap Up": [
          "Program walkthrough: Tic-Tac-Toe",
          "Program walkthrough: Prime Numbers",
          "Coding Challenge 6 - End of Section Challenges"
        ]
      },
      "requirements": [
        "You should know how to use a computer at a basic level"
      ],
      "description": "Java for Absolute Beginners is designed for those who have no previous experience in computer programming/coding. This course aims to teach programming at a steady pace with straightforward explanations so that you are not left with a thousand questions. Topics are explained in plain English and with the necessary depth, enabling you to piece everything together with ease.\nThis course includes:\n\nVideos\nStarting at the basics and working our way to more advanced topics\nEasily digestible videos which tell you what you need to know without long-winded explanations or digressions\nConcepts described in detail without straying to far from the topic at hand\nCoding Exercises\nExercises at relevant stages\nExercise solutions",
      "target_audience": [
        "Those who have never programmed before, and wish to start their journey with Java",
        "Those who want concepts explained to them in a clear and logical way"
      ]
    },
    {
      "title": "SQL- The Complete Introduction to SQL programming",
      "url": "https://www.udemy.com/course/sql-the-complete-introduction-to-sql-programming/",
      "bio": "Learn the basics of SQL programming and Data manipulation with the use SQL",
      "objectives": [
        "Basic SQL programming",
        "Analysing basic Data with SQL",
        "Use various Key words to perform different tasks",
        "Understand all the theory of SQL",
        "Manipulate Data in different ways"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Introduction to SQL"
        ],
        "The basics of SQL": [
          "3- Understading what is a Data Base",
          "4- Understanding what is a Data base Part 2",
          "5- Starting out with relational Data base",
          "6-Different Key examples",
          "7-Understanding SQL"
        ],
        "Setting up everything and basics in programming with SQL": [
          "8- Seting up MySQL",
          "9- Understanding key words",
          "10- Data Types"
        ],
        "Starting out": [
          "11- Creating and deleting DataBases",
          "12- Adding tables and columns",
          "13- Modification of our tables",
          "14- adding other features and primary key",
          "15- Working with multiple tables and foreign key part 1",
          "16- Working with multiple tables and foreign key part 2",
          "17- First Visual representation of our Databases",
          "18- Using the Select tool part 1",
          "19- Using the Select tool part 2",
          "20- visualizing multiple tables",
          "21- table modification and looking for Data part 1",
          "22- table modification and looking for Data part 2",
          "23- table modification and looking for Data part 3",
          "24-Connecting tables together",
          "25-Conclusion",
          "Thank you",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Having a computer",
        "Wanting to learn about SQL"
      ],
      "description": "Programming can sometimes be very hard to learn especially if you have no experience in this field. But, this course have everything that you need to be able to start your programming career or improve your programming skills by learning all the basis of how to properly program with SQL. If you :\n- Are in school and want to learn how to program in SQL\n- Need to learn this programming language for work\n- Want to start a personal project that requires you to have programming knowledge\n- simply want to learn a new skill\nThen you will love this course. Not only you will have by the end of the course a very solid base of this programming language but you will also be able to work with simple Data bases and understand all the theory around SQL.\n\n\nThe structure of the course\nThe way the course is made is really done to help you learn all the basics of this programming language. From setting up everything and downloading all the required softwares and understanding all the basics to manipulate Data and create simple databases tables and more. This course has everything you need to start your SQL journey. The goal of this course is really here to help you learn a completely new skill so that you will be able to work by yourself with this programming language. Also, this course was made not only to teach you a new programming language but also to help you think like a programmer. This way, even if you work with any other programming language, you will find it easier to learn it.\nAlso, this course has been built on a concept of learning by practice. In other words, in each class you will learn the theory about every concept and then you will have a lot of practice to help you reach your full potential and give you a better understanding of the topic. This way, by practicing you will be able to write lines of code by yourself and understand the logic behind each command that you write down.\n\n\nFor who is this course designed\nThere are many SQL courses out there, but this one is different. Indeed, this SQLcourse will teach you by example all the basics of this programming language. Also, since this course is an introduction it can be great for people who have never worked with SQL and Databases before. Indeed, even if you never programmed in your life this course will give you a solid basis about how to properly work with SQL. The goal of this course is teaching you how to think like a programmer and create small and basics Data Bases with the use of SQL.\nWhy should I take this course\nIf you want to learn programming then you should definitely take the course. Not only you will have learned how to properly create various databases and perform various manipulations with Data using SQL by the end of it you will also have a very good knowledge of different SQL concepts. Also you will understand the logic behind this programming language as well as many of it's functions.\nThere is no risk involved in taking this course\nThis course comes with a 100% satisfaction guarantee, this means that if your are not happy with what you have learned, you have 30 days to get a complete refund with no questions asked. Also, if there is any concept that you find complicated or you are just not able to understand, you can directly contact me and it will be my pleasure to support you in your learning.\n\n\nThis means that you can either learn amazing skills that can be very useful in your professional or everyday life or you can simply try the course and if you don't like it for any reason ask for a refund.\nYou can't lose with this type of offer !!\nENROL NOW and start learning today :)",
      "target_audience": [
        "People interested to learn how to work with SQL",
        "people curious about working with Data Bases and SQL"
      ]
    },
    {
      "title": "Salesforce Devops With Salesforce DX",
      "url": "https://www.udemy.com/course/salesforce-devops-with-salesforce-dx/",
      "bio": "Implement Salesforce Devops with Salesforce DX in easy steps",
      "objectives": [
        "Salesforce DX",
        "Use GIT in salesforce",
        "Apex Debugging",
        "Using GITHub in Salesforce",
        "Continuous Integration",
        "Salesforce Branching Stratgey",
        "Salesforce CLI Command",
        "Source Control Management (SCM) with SFDX",
        "Data Manipulation & Export/Import relational records using DX",
        "Power of VsCode with Salesforce DX"
      ],
      "course_content": {
        "Introduction to Salesforce Devops with Salesforce DX tutorial": [
          "Introduction to Salesforce Devops with Salesforce DX tutorial"
        ],
        "Signup a new salesforce Org": [
          "Signup a new salesforce Org"
        ],
        "What is Devhub and how to enable it?": [
          "What is Devhub and how to enable it?"
        ],
        "Installation of Java": [
          "Installation of Java"
        ],
        "What Is Salesforce CLI and Installation process": [
          "What Is Salesforce CLI and Installation process"
        ],
        "Verify Salesforce CLI Path": [
          "Verify Salesforce CLI Path"
        ],
        "Lets Start with Visual Studio code for Salesforce Development": [
          "Lets Start with Visual Studio code for Salesforce Development"
        ],
        "What is Salesforce Extension pack and use of it in VS Code": [
          "Use Salesforce Extension Pack in Visual Studio Code"
        ],
        "Lets Create Salesforce DX Project": [
          "Lets Create Salesforce DX Project"
        ],
        "Understand Salesforce DX Project Structure": [
          "Understand Salesforce DX Project Structure"
        ]
      },
      "requirements": [
        "salesforce Admin",
        "salesforce developer"
      ],
      "description": "Salesforce DX is Salesforce's new tool for Salesforce Development and is essential to your success in coding on the Salesforce platform.\nYou will learn salesforce Devops with Salesforce DX in detail where we will start from compete basic of setting of various tools for salesforce DX and devops.\nStep by step process starting from signing up Salesforce Org to configuring Continuous integration to build the code with Jenkin.\nWe will learn many SFDX CLI commands and how can use efficiently with VS code and Command terminal\nSimple way to setup GIT,GITHUB,JENKIN, VS CODE, Apex Replay Debugger and many more plugin to make you excellent in salesforce DX development process.\nMost important, You will get detail explanation of salesforce development branching strategy and how can accommodate with version control and that you can implement this easily\nThis course is designed for all level of Salesforce Developer, Admin and Architect. Where Developer will learn about how to use Command Line , Admin will learn how to take advantage of SFDX with the help of VsCode and Architect will learn about development process using devops.\nHey why to think now, you are at the correct course to move your salesforce journey to next level with learning Salesforce Devops with Salesforce DX easily.",
      "target_audience": [
        "salesforce",
        "salesforce Consultant",
        "salesforce Developer",
        "Salesforce architect",
        "salesforce Admin"
      ]
    },
    {
      "title": "Build 10 Network Applications with Python",
      "url": "https://www.udemy.com/course/python-programming-for-real-life-networking-use/",
      "bio": "Learn Python from SCRATCH! Build 10 Network Applications using Python. Upgrade your Network Engineering skills today!",
      "objectives": [
        "Master all the Python 3 key concepts starting from scratch. No prior Python knowledge is required!",
        "Apply your new Python 3 skills to build various tools for network interaction and make your job easier.",
        "Use Python 3 for connecting via SSH to any network device and reading/writing configuration from multiple devices simultaneously.",
        "Use Python 3 for establishing SSH sessions to network devices, extract parameters like CPU utilization and build real-time graphs for performance monitoring.",
        "Use Python 3 for building a basic packet sniffer, capturing and analyzing network packets (ARP, ICMP, BOOTP) and saving packet data to a log file.",
        "Use Python 3 for building 5 additional network tools involving technologies such as SNMPv3, NMAP, DHCP Servers, LLDP and OSPF.",
        "Use Python 3 and specialized modules and commands to connect to and query network devices via an intermediary, remote Linux server.",
        "Get the full Python 3 code of 10 amazing network applications and customize each of them according to your networking needs.",
        "Ask for a raise at your current job or apply for a better position using the network automation skills gained from this course."
      ],
      "course_content": {
        "Introduction: First steps before diving into the course!": [
          "Quick Introductory Note",
          "Just starting out in programming? Read this!",
          "Interested in getting certified in Python?",
          "Course FAQ"
        ],
        "Python 3 - Basics": [
          "How to Install Python 3 on Windows",
          "How to Install Python 3 on macOS",
          "UPDATE! Python Versions",
          "The Python Interpreter & IDLE in Windows",
          "The Python Interpreter & IDLE in macOS",
          "Python 3 Basics - Scripts in Windows",
          "UPDATE! Saving a Python script in Notepad++",
          "Python 3 Basics - Scripts in macOS",
          "Python 3 - Reasons for the 'No such file or directory' error (or similar)",
          "Python 3 Basics - User Input",
          "Notebook - User Input",
          "User Input - Quiz",
          "Python 3 Basics - Variables",
          "Notebook - Variables",
          "Python 3 Basics - Keywords",
          "Python 3 - Data Types",
          "Python 3 Basics - Quiz"
        ],
        "Python 3 - Strings": [
          "Why learn all the Python topics below before building the network apps?",
          "Python 3 Strings - Introduction",
          "Python 3 Strings - Methods",
          "Python 3 Strings - Operators & Formatting",
          "Python 3 Strings - Formatting Using F-strings",
          "Python 3 Strings - Slices",
          "Python 3 Strings - Slicing Using a Step",
          "Notebook - Strings",
          "Strings - Quiz"
        ],
        "Python 3 - Numbers and Booleans": [
          "Python 3 Numbers - Math Operators",
          "Notebook - Numbers and Math Operators",
          "Numbers - Quiz",
          "Python 3 Booleans - Logical Operators",
          "Notebook - Booleans and Logical Operators",
          "Booleans - Quiz"
        ],
        "Python 3 - Lists": [
          "Python 3 Lists - Introduction",
          "Python 3 Lists - Methods",
          "Python 3 Lists - Slices",
          "Notebook - Lists",
          "Lists - Quiz"
        ],
        "Python 3 - Sets": [
          "Python 3 Sets - Introduction",
          "Python 3 Sets - Methods",
          "Python 3 Sets - Frozensets",
          "Notebook - Sets and Frozensets",
          "Sets - Quiz"
        ],
        "Python 3 - Tuples": [
          "Python 3 Tuples - Introduction",
          "Python 3 Tuples - Tuples vs. Lists",
          "Python 3 Tuples - Methods",
          "Notebook - Tuples",
          "Tuples - Quiz"
        ],
        "Python 3 - Ranges": [
          "Python 3 Ranges - Introduction",
          "Python 3 Ranges - Methods",
          "Notebook - Ranges",
          "Ranges - Quiz"
        ],
        "Python 3 - Dictionaries": [
          "Python 3 Dictionaries - Introduction",
          "Python 3 Dictionaries - Methods",
          "Python 3 - Conversions Between Data Types",
          "Notebook - Dictionaries and Conversions Between Data Types",
          "Dictionaries - Quiz"
        ],
        "Python 3 - Conditionals, Loops and Exceptions": [
          "Python 3 Conditionals - If / Elif / Else",
          "Notebook - If / Elif / Else Conditionals",
          "Python 3 Loops - For / For-Else",
          "Notebook - For / For-Else Loops",
          "Python 3 Loops - While / While-Else",
          "Notebook - While / While-Else Loops",
          "Python 3 Nesting - If / For / While",
          "Notebook - Nesting",
          "Python 3 - Break / Continue / Pass",
          "Notebook - Break / Continue / Pass",
          "Python 3 - Exceptions",
          "Python 3 - Try / Except / Else / Finally",
          "Notebook - Try / Except / Else / Finally",
          "Conditionals and Loops - Quiz"
        ]
      },
      "requirements": [
        "No prior Python knowledge is required! This training teaches you everything, from scratch.",
        "You should have a great desire to learn Python programming and do it in a hands-on fashion, without having to watch countless videos filled with slides and theory.",
        "You should already be familiar with networking concepts like: Switching, TCP/IP, CLI, SSHv2, Telnet, OSI Layers.",
        "You are going to use only free software throughout the course: Python, VirtualBox, Arista vEOS, Atom, Notepad++.",
        "All you need is a decent PC or laptop (2GHz+ CPU, 16GB RAM) and an Internet connection to download the free tools.",
        "Preferably, you should have a Windows OS to work on, to be fully synchronized with the course content."
      ],
      "description": "15+ hours of Python content designed for Network Engineers.\nI am updating the course frequently with new videos and code.\nFull Python applications, quizzes and notebooks are included.\nPython Cheat Sheet and 200+ pages PDF E-book are included.\nUdemy Bestselling Instructor with THOUSANDS of 5* reviews.\nOver 100,000 satisfied students across several e-learning platforms.\nCERTIFICATE of COMPLETION is also included at the end of the course.\n\n\n\"Have finished 35% of the course, so far it's the best  Python-for-network-engineer course I have ever attended, fundamental  topics are well demonstrated and explained, I strongly recommend this  course to any network engineers who want to master Python in a relatively short period of time.\" by Parry Wang\n\n\nWhat others have to say about my Python courses?\nBefore you read what I have to say, see what my students are saying about my courses:\n\"What an incredible value and learning experience!\" by Sean A.\n\"Excellent material. Kudos to a great instructor with a vast level of creativity.\" by Anthony W.\n\"I can say this man is going on smoothly and perfectly, explaining in the most empirical/foundational way.\" by Kolapo A.\n\n\nWhat's this course all about?\nPython Network Programming course aimed not only at network professionals, but at anyone having little or no experience in Python coding or network automation and a great desire to start learning Python from scratch.\nThis hands-on Python Network Programming training takes you from \"Hello World!\" to building 10 network applications with Python in no time.\n\n\nYou will learn Python concepts which are relevant to your networking job and build some amazing network tools:\n\n\nIntroduction - What's This Course All About?\nPython - Basics\nPython - Strings\nPython - Numbers and Booleans\nPython - Lists\nPython - Sets\nPython - Tuples\nPython - Ranges\nPython - Dictionaries\nPython - Conditionals, Loops and Exceptions\nPython - Functions and Modules\nPython - File Operations\nPython - Regular Expressions\nPython - Classes and Objects\nPython - Advanced Concepts and Tools\nPython - Download the Cheat Sheet\nPython - Download the E-Book\nSetting Up the Working Environment - Part #1\nNetwork Application #1 - Reading / Writing Device Configuration via SSH\nNetwork Application #2 - Building an Interactive Subnet Calculator\nNetwork Application #3 - Extracting Network Parameters & Building Graphs\nNetwork Application #4 - Building a Basic Network Packet Sniffer\nNetwork Application #5 - Config File Management and E-mail Notifications\n[EXTRA] Running Python Code via Remote Servers\nSetting Up the Working Environment - Part #2\nNetwork Application #6 - Read SNMPv3 objects with Python\nNetwork Application #7 - Build a Basic NMAP Tool with Python\nNetwork Application #8 - Build a Rogue DHCP Server Discovery Tool with Python\nNetwork Application #9 - Filter and Monitor LLDP Log Messages with Python\nNetwork Application #10 - Build an OSPF Network Discovery Tool with Python\nFinal Section\nSounds unbelievable given your current programming experience? Well, it's true! How?\nFirst, you will learn and practice every Python key concept, which is explained in one or more video lectures, followed by a short quiz. Each video is filled with relevant examples, in a learn-by-doing fashion and the quizzes will help you consolidate the main ideas behind each Python topic.\nAfter laying the foundation (and also exploring some advanced Python topics), you will dive right into the real-life network scenarios and apply your knowledge to build 10 great network tools using the power of Python.\nEquipped with working files, cheat sheets and Python code samples, you will be able to work alongside me on each lecture and each application. I will provide the full code for each application, so you can save time and start coding and testing on the spot.\nWe will use emulated Arista vEOS switches in VirtualBox and/or GNS3 to test our Python apps in a network environment, so you can see the actual results of running your Python code.\nI encourage you to learn Python, an amazingly beginner-friendly programming language and take your network engineering job to a higher level of automation.\n\n\nWhat others have to say about this course?\n\"I have been programming since 1978 and wanted to learn python. I have had no java or OOP experience, and I tried several 'paper' tutorials but got little out of them. The first part of this course is a steady walk through the Python language at just the right speed. The instructor seems to touch all the basis in a logical and methodical way while providing examples and explanations. I can only conclude the instructor is a professional educator who spent considerable time structuring and organizing the course. The result is evident. THIS IS A GREAT WAY TO LEARN PYTHON!\" by Larry Laswell\n\"I've tried learning from the books & multiple videos - most were too basic to make a practical app. Some books were too thick and made me sleep. But still none of the materials had the perfect balance like this course where all the basics were covered, instructions were concise, and Mihai walks you through how to create 7 practical apps step by step. I've also tried reading some advanced python book which didn't make sense because it was too advanced. Let me tell you, this is hands down \"that course that takes you up to beyond the basics\" to bridge you to the advance topics. Right now I'm hitting the advanced topics and it finally makes sense...\" by Joon Park\n\"Usually I'm not doing courses review but this time I will make an exception. During time I took a lot of trainings but very few provided by Udemy proved as having the right approach in teaching the audience. I will mark this one as being one of my personal top three best trainings as content's quality, technical explanations, and additional learning materials perspective. Long story short this course is a very simple, straight forward way of learning Python for managing IT networks.\" by Johnny Stanescu\n\"This is a great course for network engineers who would like to start automating their tasks. Geared towards beginners, this course teaches the fundamentals of programming and applying those concepts to networking. There is a lot of fluff about python on the internet, however the instructor managed to put together the necessary information to start automating the network. A working knowledge of TCP/IP is needed to get the most out of this course. Should you understand every lecture, you will be ready to start writing your own scripts according to your needs. In particular, I loved the use of scapy, an amazing tool which should be in the arsenal of anyone working with TCP/IP.\" by Costin-Alin Neacsu\n\"I've seen the blueprint and some demo videos and I was convinced right away. Without a doubt, it's one of the best trainings a network engineer can have. It gives you actual valuable and marketable skills that you can use in your daily job. Mihai explains the topics really well, with practical examples making it a fun way to learn. Highly recommended.\" by Vlad Vlaicu\n\n\nImportant information before you enroll!\nDon't forget you are covered by a 30-day money back guarantee, full refund, no questions asked.\nOnce enrolled, you have unlimited, 24/7, lifetime access to the course.\nYou will have instant and free access to any updates I'll add to the course.\nYou will benefit from my full support regarding any question you might have.\nCheck out the promo video at the top of this page and some of the free preview videos before enrolling!\n\n\"I would firstly thank you for making this course . Secondly, i did like the approach. You understand the mindset of the beginner. I would recommend this course for all those who want to consider using Python for network automation.\" by Pramod Ramu\n\n\nEnroll NOW and hop on the Python Network Programming and Automation train. Let's get started!",
      "target_audience": [
        "Network Administrators, Network Engineers, Network Managers, Systems Engineers.",
        "Network Quality Assurance Engineers, Network Analysts, Network Professionals.",
        "Python Developers Who Want to Apply Their Knowledge in Network Automation.",
        "Any other kind of IT geeks are welcome, as well."
      ]
    },
    {
      "title": "NEW-Comprehensive Go Bootcamp with gRPC and Protocol Buffers",
      "url": "https://www.udemy.com/course/gobootcampwithgrpcandprotocolbuffers/",
      "bio": "2025: Conquer all concepts of Go language: Basics to Advanced with extensive coverage on Protocol Buffers and gRPC.",
      "objectives": [
        "Comprehensive Examples of Basic Concepts.",
        "Detailed Explanation and Practice of Intermediate level Concepts in Go.",
        "Highly Extensive Section on Advanced Concepts in Golang.",
        "Detailed Explanation of GoRoutines: Complete Coverage with many examples to master the concept.",
        "Comprehensive Explanation and Extensive Practice on Protocol Buffers and gRPC.",
        "We will make REST API in Go.",
        "We will make a gRPC API in Go.",
        "How concurrency works in Go?",
        "Quizzes and Slides with downloadable PDF material.",
        "Git and Github.",
        "Pointers in Go.",
        "Detailed Explanation and Practical Examples of Struct, Maps, Slices in Go.",
        "Importance and Various Use Cases of CHANNELS in Go.",
        "Real Use Case Based API Examples with SQL and NoSQL Usage.",
        "API Folder Structure.",
        "Learn How to Plan Before Making an API. *** Important for beginners***",
        "Learn How to Make Professional, Industry Standard APIs",
        "MongoDB and MariaDB(Drop in replacement for MySQL)",
        "Advanced API Benchmarking Tools like wrk, h2load, ghz etc.",
        "Make HTTP2, HTTPS API.",
        "Learn How to Implement TLS/SSL in API.",
        "Learn How to Code Your Own Middleware from scratch",
        "Learn how to read Go Source Code and Find Solutions to Any Problem",
        "Learn to use Algorithms in Real World Cases",
        "Interview Preparation: Question Bank with 350+ Questions and Answers",
        "How Does Go runtime Work? Why is it important to understand it?",
        "Become an expert in using Reflect Package. Comprehensive use of Reflect in gRPC & REST API projects in this course."
      ],
      "course_content": {
        "Introduction": [
          "Greetings and Welcome!",
          "Some tips while using this course",
          "Course Content",
          "About Go Language",
          "Why choose Go?",
          "Go Playground",
          "Installing Go on Linux",
          "Installing Go on Windows",
          "Installing Go on Mac",
          "IDE/Code Editor",
          "Installing VS Code on Linux",
          "Installing VS Code on Windows",
          "Installing VS Code on Mac",
          "Setting Up Development environment: Extensions",
          "Resources"
        ],
        "Git": [
          "What is Git? What is VCS?",
          "Installing Git on Linux",
          "Installing Git on Windows",
          "Installing Git on Mac",
          "Github",
          "Github and Git : SSH",
          "git init",
          "git add",
          "git commit",
          "git remote",
          "git push"
        ],
        "Go Programming: Basics": [
          "Course Setup",
          "Important Note",
          "Hello World!",
          "Go Run",
          "Go Compiler",
          "The Standard Libary",
          "Import statement",
          "Data Types",
          "Variables",
          "Naming Conventions",
          "Constants",
          "Arithmetic Operations",
          "Loop: For (break continue)",
          "Loop: For (using as while)",
          "Operators",
          "Conditions: If else",
          "Conditions: Switch",
          "Arrays and Blank Identifier",
          "Slices",
          "Maps",
          "Range",
          "Functions",
          "Multiple Return Values",
          "Variadic functions",
          "Defer",
          "Panic",
          "Recover",
          "Exit",
          "Init function",
          "Basics Quiz",
          "Section Summary and Motivation"
        ],
        "Go Programming: Intermediate": [
          "Closures",
          "Recursion",
          "Pointers",
          "Strings and Runes",
          "Formatting Verbs",
          "Fmt package",
          "Structs",
          "Methods",
          "Interfaces",
          "Struct Embedding",
          "Generics",
          "Intermediate Quiz 1",
          "Errors",
          "Custom Errors",
          "String Functions",
          "String Formatting",
          "Text Templates",
          "Regular Expressions",
          "Time",
          "Epoch",
          "Time Formatting / Parsing",
          "Random Numbers",
          "Number Parsing",
          "Intermediate Quiz 2",
          "URL Parsing",
          "bufio package",
          "Base64 Coding",
          "SHA 256/512 Hashes / Hashing / Cryptography / Crypto Package",
          "Writing Files",
          "Reading Files",
          "Line Filters",
          "File Paths",
          "Directories",
          "Temporary Files and Directories",
          "Embed Directive",
          "Intermediate Quiz 3",
          "Command Line Arguments/Flags",
          "Command Line Sub Commands",
          "Environment Variables",
          "Logging",
          "JSON",
          "Struct Tags",
          "XML",
          "Go Extension",
          "Type Conversions",
          "IO package",
          "Math package",
          "Math package (Code Examples)",
          "Intermediate Quiz 4",
          "Section Summary and Motivation"
        ],
        "Go Programming: Advanced": [
          "Goroutines",
          "Channels - Introduction",
          "Unbuffered Channels and Runtime Mechanism",
          "Buffered Channels",
          "Channel Synchronization",
          "Advanced Quiz 1",
          "Channel Directions",
          "Multiplexing using Select",
          "Non blocking channel operations",
          "Closing Channels",
          "Advanced Quiz 2",
          "Context",
          "Timers",
          "Tickers",
          "Worker Pools",
          "Wait Groups",
          "Advanced Quiz 3",
          "Mutexes",
          "Atomic Counters",
          "Rate Limiting",
          "Rate Limiting - Token Bucket Algorithm",
          "Rate Limiting - Fixed Window Counter",
          "Rate Limiting - Leaky Bucket Algorithm",
          "Stateful Goroutines",
          "Sorting",
          "Advanced Quiz 4",
          "Testing / Benchmarking",
          "Executing Processes / OS Processes / Other Processes",
          "Signals",
          "Reflect",
          "Advanced Quiz 5",
          "Section Summary and Congratulations"
        ],
        "Go Programming: More About Concurrency": [
          "Concurrency vs Parallelism",
          "Race Conditions",
          "Deadlocks",
          "RWMutex",
          "sync.NewCond",
          "sync.Once",
          "sync.Pool",
          "for select statement",
          "Advanced Concurrency Quiz"
        ],
        "How Internet Works": [
          "URL/URI",
          "Request Response Cycle",
          "What is Frontend Dev/ Client Side",
          "What is Backend Dev/ API / Server Side",
          "HTTP 1/2/3, HTTPS",
          "Internet Quiz"
        ],
        "REST API Project": [
          "OS Choice for Development",
          "What is REST API",
          "Endpoints",
          "HTTP Client",
          "HTTP Server",
          "Ports",
          "Postman for API Testing",
          "Install wrk (Benchmarking Tool)",
          "Install Htop",
          "Benchmarking an API",
          "Modules - go mod init",
          "Let's begin making the API/Server",
          "Downloading Third Party/External Packages - go get <package link>",
          "Let's add HTTP2 and HTTPS to our API",
          "https certificates - SSL/TLS",
          "Postman for TLS + HTTP2 Requests",
          "Using Curl to make http2 request",
          "HTTP2/HTTPS/HTTP Connections, TLS Handshake",
          "mTLS and Postman Settings",
          "Benchmarking HTTP1 vs HTTP2 -H2Load BM Tool",
          "Serialization/Deserialization - Marshal/Unmarshal - Encode/Decode",
          "API Folder Structure",
          "API Planning Stage",
          "Basic Routing-CRUD-HTTP Methods",
          "Processing Requests",
          "Path Params",
          "Query Params",
          ".gitignore file",
          "Multiplexer (mux)",
          "Middlewares",
          "Middlewares - Security Headers",
          "Middlewares - CORS",
          "Middlewares - Response Time",
          "Middlewares - Compression",
          "Middlewares - Rate Limiter",
          "Middlewares - HPP",
          "Middlewares - Ordering",
          "Efficient Middleware Chaining",
          "Older Routing Technique (Pre Go 1.22)",
          "Getting All/Filtered/One Entry(ies) - GET",
          "Adding Single Entry/Multiple Entries - POST",
          "Handlers Refactoring",
          "MariaDB/MySQL - Introduction",
          "MariaDB Installation",
          "MariaDB GUI Tool - DBeaver Installation",
          "SQL Primer - CRUD - Command Line",
          "SQL Primer - CRUD - DBeaver",
          "Connect API to SQL",
          "Environment Variables (.env file)",
          "Creating our SQL Database",
          "Updating POST methods to post in Database",
          "Updating GET method to Fetch One Entry from Database",
          "Updating GET method to Fetch Multiple Entries from Database",
          "WHERE 1=1. WHY???",
          "Advanced Filtering Technique - GET - Getting Entries Based on Multiple Criteria",
          "Advanced Sort Order Technique - GET - Get Entries Based on Multiple Criteria",
          "Updating a 'Complete Entry' - PUT",
          "Modifying An Entry - PATCH",
          "Improving our PATCH function - Reflect Package",
          "Deleting An Entry - DELETE",
          "Modernizing Routes - Older Routing Technique and its Limitations",
          "Refactoring Mux",
          "Using Path Params for Specific Entry",
          "Modifying Multiple Entries - PATCH",
          "Deleting Multiple Entries - DELETE",
          "Modelling Data",
          "Refactoring Database Operations",
          "Error Handling",
          "Struct Tags",
          "Data Validation",
          "Students Database Creation",
          "CRUD for Students Route",
          "Students Routes and Testing",
          "New Subroutes",
          "Getting Student List for a Specific Teacher",
          "Getting Student Count for a Specific Teacher",
          "Router Refactoring",
          "Execs Router",
          "Execs Model and Database Table",
          "CRUD for Execs Route",
          "Passwords - Hashing",
          "Authorization and Authentication",
          "Cookies, Sessions and JWT",
          "Login Route Part 1 - Data Validation",
          "Login Route Part 2 - Password Hashing - Argon2",
          "Login Route Part 3 - JWT, Cookie",
          "Login Route Refactoring",
          "Logout",
          "Authentication Middleware - JWT",
          "Skipping Routes With Middlewares - PreLogin",
          "Update Password",
          "Sending Emails - MailHog",
          "Forgot Password",
          "Reset Password",
          "CSRF",
          "Adding Pagination",
          "Data Sanitization - XSS Middleware",
          "Authorization",
          "Middleware Sequence Revisited",
          "Code Obfuscation",
          "Adjustments Before Final Binary",
          "API Binary",
          "Extensive Benchmarking - Source Code v/s Go Binary v/s Obfuscated",
          "Section Summary and Motivation"
        ],
        "Protocol Buffers": [
          "What are Protocol Buffers?",
          "Syntax and Structure of .proto Files",
          "Packages in Protocol Buffers",
          "Messages in Protocol Buffers",
          "Fields in Protocol Buffers",
          "Field Types and Data Types",
          "Field Numbers",
          "Serialization and Deserialization",
          "RPC (Remote Procedure Call) in Protocol Buffers",
          "Versioning and Backward Compatibility",
          "Best Practices for .proto Files",
          "Installing Protoc Compiler to Generate Code from .proto Files",
          "Protocol Buffers in Practice",
          "Protocol Buffers Quiz"
        ],
        "gRPC": [
          "What is gRPC?",
          "Stubs",
          "What is Service?",
          "REST vs gRPC",
          "Creating Simple gRPC Server",
          "Creating a Simple gRPC Client",
          "gRPC + TLS",
          "Deep Dive - Proto Buf Packages + RPC",
          "gRPC Streaming",
          "Server Side Stream",
          "Client Side Stream",
          "BiDirectional Stream",
          "Advanced gRPC Features",
          "Metadata, Headers and Trailers",
          "Postman for gRPC",
          "gRPCurl for gRPC",
          "Protoc Gen Validate Plugin",
          "Combo API (gRPC + REST functionality in One API)",
          "Benchmarking Combo API - GHZ BM Tool",
          "gRPC Quiz"
        ]
      },
      "requirements": [
        "No programming experience/knowledge needed. You'll learn everything from scratch in this course.",
        "No prior knowledge of Go is needed, nor assumed.",
        "Linux/Mac/Windows/ChromeOS/UnixBasedOS PC with Internet connection."
      ],
      "description": "Released in 2025. BRAND NEW COURSE.\n* Master The Go Programming Language: Elevate Your Skills!  *\n$  A Job Landing Course  $\nStep into the world of Go programming with confidence and expertise through our comprehensive course designed to empower both novices and seasoned developers alike.\n$* Please check out my twitter/x profile for any active promotions/discounts that you can benefit from. *$\nGo Bootcamp with gRPC and Protocol Buffers\nWelcome to the ultimate journey into Go programming! Whether you're a beginner aiming to dive headfirst into software development or an experienced coder looking to sharpen your skills, this comprehensive course is tailored just for you.\nWhat You'll Learn\nConquer Go Language: From foundational concepts to advanced techniques, this course covers everything you need to know about Go. We start with the basics and progress to intricate topics like Protocol Buffers and gRPC, ensuring you grasp each concept with clarity and confidence.\nPractice Makes Perfect: Gain hands-on experience through extensive practice sessions. You'll not only understand basic and intermediate concepts deeply but also master advanced topics with practical examples and real-world projects.\nGoRoutines and Concurrency: Delve into GoRoutines, concurrency models, and understand how Go handles parallelism effortlessly. Through numerous examples and exercises, you'll become proficient in leveraging concurrency effectively.\nProtocol Buffers and gRPC: Explore the powerful combination of Protocol Buffers and gRPC, essential for building efficient and scalable APIs. Detailed explanations and extensive practice will equip you to integrate these technologies seamlessly into your projects.\nBuilding APIs: Learn to create RESTful and gRPC APIs in Go from scratch. Dive into API folder structures, planning strategies, and practical considerations to ensure your APIs are robust and scalable.\nData Structures and Pointers: Master the nuances of data structures like Structs, Maps, and Slices, and understand the critical role of pointers in Go programming.\nChannels: Uncover the importance of channels in Go for synchronization and communication between Goroutines, with practical use cases and scenarios.\nReal-World Projects: Apply your newfound skills to develop practical projects that simulate real-world scenarios, integrating SQL and NoSQL databases to create functional APIs.\nGit and GitHub: Learn essential version control skills using Git and GitHub, enabling you to collaborate effectively and manage your codebase efficiently.\nBenchmarking Techniques and Tools: Understand the significance of performance benchmarking in Go. Learn how to measure execution time, optimize code efficiency, and use industry-standard benchmarking tools to analyze and enhance the performance of your applications.\nCreate HTTP2 and HTTPS Servers: Dive into advanced networking by building secure and high-performance HTTP/2 and HTTPS servers in Go. Learn how to implement TLS encryption, optimize server response times, and handle concurrent client requests effectively.\nCode Obfuscation Tools: Explore techniques for protecting your Go code from reverse engineering. Learn how to use code obfuscation tools to make your compiled binaries harder to analyze, ensuring security for proprietary algorithms and sensitive business logic.\nWhy Choose This Course?\nComprehensive Learning: Designed for beginners and seasoned developers alike, this course requires no prior programming experience. You'll start from scratch and emerge with the ability to build professional-grade APIs and applications.\nPractical Approach: Each module includes quizzes, downloadable slides, and PDF materials to reinforce your learning. The emphasis on practical examples ensures you not only understand but can apply your knowledge immediately.\nCareer Readiness: By the end of the course, you'll possess the skills and confidence to tackle programming challenges in any professional setting. Whether you aspire to enter the job market or advance your current career, this course equips you with the expertise employers seek.\nJoin me on this transformative journey into Go programming. Let's unlock the full potential of your coding abilities and pave the way to your success in the dynamic world of software development. Enroll now and embark on your path to becoming an expert in using gRPC and Go programming language.",
      "target_audience": [
        "Complete Freshers/Novice in Programming",
        "Computer Science Students",
        "Anyone curious/wanting to learn Protocol Buffers and gRPC",
        "Coders interested in improving API performance",
        "Software Developers",
        "API Developers",
        "Go Developers",
        "Systems Engineer",
        "People with some Go Experience or those who have completed an Introductory Go course",
        "Anyone who wants to gain expertise in REST, Protocol Buffers, gRPC, Advanced Benchmarking",
        "Anyone who wants to gain command over concurrency in programming"
      ]
    },
    {
      "title": "The Complete Kotlin Developer Course",
      "url": "https://www.udemy.com/course/the-complete-kotlin-developer-course-java/",
      "bio": "Use Kotlin instead of Java. Kotlin is a new language that makes programming for Android or Javascript a dream.",
      "objectives": [
        "Learn Kotlin from the ground up",
        "Create 2 fully functional Android apps",
        "Build a command line tool",
        "Create Javascript code from Kotlin",
        "Conquer challenges to test your learning"
      ],
      "course_content": {
        "Welcome and Setup": [
          "Welcome and Download",
          "Get the Most out of This Course",
          "Our First Line of Kotlin Code"
        ],
        "Kotlin for Beginners": [
          "Intro",
          "Variables",
          "Strings and Integers",
          "Math and Comments",
          "If Statements and Booleans",
          "Lists and Arrays",
          "For Loops",
          "Maps",
          "Functions",
          "Classes",
          "Class Functions"
        ],
        "Making an Android App with Kotlin - The Resume": [
          "Intro",
          "Android Studio",
          "Layout",
          "Images",
          "New Activity",
          "Scroll View",
          "Call and Email"
        ],
        "Advanced Android App - Weather": [
          "Intro",
          "Sketch",
          "Constraint Layout",
          "Images",
          "ListViews",
          "Weather APIs",
          "FIX",
          "RetroFit",
          "Nullable",
          "Looping Through Forecasts",
          "Search Term"
        ],
        "Building a Command Line Tool with Kotlin": [
          "Intro",
          "Sketch and Planning",
          "WordMap",
          "Sorting Words",
          "Read A File",
          "Command Line"
        ],
        "Javascript and Kotlin": [
          "Intro",
          "JavaScript Build",
          "Reusing Code",
          "List Items"
        ],
        "Kotlin for Programmers": [
          "Intro",
          "Variables, Strings, and Ints",
          "Math and Comments",
          "If Statements and Booleans",
          "Lists and Arrays",
          "For Loops",
          "Maps",
          "Functions",
          "Classes",
          "Nullable",
          "Kotlin and Java"
        ],
        "BONUS: ToDo List Android App": [
          "Intro",
          "Sketch",
          "Floating Action Button",
          "Realm",
          "Saving ToDo Items",
          "ListView",
          "Completing ToDos",
          "Bold"
        ],
        "BONUS: Find Repo Android App": [
          "Intro",
          "Activities",
          "GitHub API",
          "Custom ListView Rows",
          "Downloading Images",
          "User Repos",
          "Thanks!",
          "Bonus"
        ]
      },
      "requirements": [
        "Any computer works, Mac or PC :)"
      ],
      "description": "Google is now officially supporting Kotlin in Android development. Kotlin is clearly the future for Java. Come learn it in this fun and exciting course!\nFor beginners or experienced programmers - If you are a complete beginner I have a section for you in the course that walks you through Kotlin step by step. If you have had previous programming experience, I have a section titled Kotlin for Programmers that will get you up to speed as quickly as possible.\nLearn with fully functional projects - I believe in learning by doing, so in this course you will create two Android apps, a command line tool, and Javascript for a website!\nChallenges to test your learning - As we move through the course I provide challenges that test your new skills and makes sure you're getting the most you can from this course.\nIf you're looking to make Android apps, command line tools, Javascript, or just want to learn a new programming language, this is the course for you!",
      "target_audience": [
        "Anyone wanting to learn Kotlin!"
      ]
    },
    {
      "title": "C Programming:The best approach to learn C Language",
      "url": "https://www.udemy.com/course/c-programming-the-best-approach-to-learn-c-language/",
      "bio": "Become a master of C Programming Language in an informal and practical way",
      "objectives": [
        "Write C programs in an effective way.",
        "Know pointers thoroughly and make their own programs.",
        "Operate on linked lists effectively.",
        "Allocate and deallocate memory spaces accordingly.",
        "Deploy and run their own real time applications",
        "Perform manipulations over stacks and queues."
      ],
      "course_content": {
        "Introduction to the Course": [
          "Introduction",
          "What you'll need",
          "What You'll Learn"
        ],
        "Variables, Data Types and Operators in C": [
          "Task in Module 1st",
          "Variables in C",
          "Data Types",
          "Operators"
        ],
        "Exploring More": [
          "Loop Statements in C",
          "Functions in C Language",
          "Implementing task 1",
          "Task 1 continued",
          "Task 1 continued",
          "program execution"
        ],
        "File Handling and Command Line Arguments": [
          "Task for Module 3rd",
          "File Handling in C",
          "Command Line Arguments in C"
        ],
        "Arrays and Character Array in C": [
          "Arrays in C Language",
          "Multi-dimensional Arrays in C",
          "Character Array in C Language",
          "Implementing task 2",
          "Task 2 continued",
          "Program execution"
        ],
        "Structures and Memory Management in C": [
          "Handson for Module 5th",
          "Structures in C",
          "Memory Management in C Language",
          "Dynamic Memory Allocation",
          "Malloc Function",
          "Calloc Function",
          "Free Function",
          "Realloc Function"
        ],
        "Pointers and Linked Lists": [
          "Pointers in C Language",
          "Linked List",
          "Types of Linked Lists",
          "Implementing task 3",
          "task 3 continued",
          "task 3 continued",
          "Task 3 continued",
          "Program execution"
        ],
        "String Handling Functions": [
          "Getting Started with Strings",
          "String Handling Functions"
        ],
        "Stacks and queues Data Structures in C Language": [
          "Stack Data Structure in C",
          "Queue in C Language"
        ],
        "Books and Pdfs": [
          "C Overview",
          "What you'll need",
          "What You'll Learn",
          "Task in Module 1st",
          "Variables in C",
          "Data Types",
          "Operators",
          "Loops Statements in C",
          "Functions in C",
          "Task for Module 3rd",
          "File Handling in C",
          "Command Line Arguments in C",
          "Arrays in C",
          "Character Arrays",
          "Task for Module 5th",
          "Structures in C",
          "Memory Management in C",
          "Dynamic Memory Allocation",
          "Malloc function",
          "Calloc function",
          "Free function",
          "Realloc function",
          "Pointers in C",
          "Linked list",
          "Types of Linked Lists",
          "Task for Module 8th",
          "Getting Started with Strings",
          "String Handling Functions",
          "Stack Data Structure in C",
          "Queues"
        ]
      },
      "requirements": [
        "This course is designed for beginner to advanced level of students.",
        "Prior knowledge of programming would be beneficial but not compulsory",
        "Basics of Computers",
        "Knowledge of any Text Editor on which you can write code"
      ],
      "description": "In this course, we'll explore C programming language in an informal and practical way. We'll start with the basics of C programming language, then quickly unravel the mystery of C programming language i.e the pointers. The course contains these topics which are the foundations of each programming language:\n-Variables, Data Types and Operators\n-Loop Statements and Functions\n-File Handling and Command Line Arguments\n-Arrays,Structures and Memory Management\n-Pointers and Linked Lists\n-String Handling Functions\n-Stacks and queues Data Structures in C Programming Language",
      "target_audience": [
        "Students who have no prior knowledge of programming and want to begin from the scratch.",
        "Proffessionals who wish to revive their C programming skills beginning from scratch moving to deeper concepts."
      ]
    },
    {
      "title": "The Complete MATLAB Mastery - From a Beginner to an Expert",
      "url": "https://www.udemy.com/course/the-complete-matlab-mastery-course-for-beginners/",
      "bio": "Learn From Top MATLAB Experts In The Field - MATLAB Basics, High Quality Code, Data Visualization, Loops and much more!",
      "objectives": [
        "You will have in-depth working knowledge of MATLAB, how MATLAB prefers to work, why to use some functions instead of others",
        "You will learn how to write High Quality, Documented and Speed Optimized MATLAB Code",
        "You will learn how to solve multi-initial conditions problems and visualize the results",
        "Customize MATLAB to Your Preferences",
        "Perform Various Arithmetic Operations with MATLAB",
        "Deep Understanding of Vectors",
        "Deep Understanding of Matrices",
        "How MATLAB Actually Prefers to Work",
        "Data Visualization - Visualize Your Experiments to Better Express Yourself",
        "Conditional Statements - If/elseif/else/switch",
        "Relational & Logical Operators",
        "How Loops Work - For and While Loops",
        "How to Use Nested Loops",
        "How to Create MATLAB Functions",
        "Inputs and Outputs of Functions",
        "Safeguarding Your Functions Against Incorrect Inputs"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Get To Know Your Workspace!",
          "Create Your Own Workspace Layout!",
          "Save Your Work In a File & The Holy Trinity of All (almost) M Files",
          "Quickest Way To Get Help from MATLAB",
          "Quiz 1 - Introduction to MATLAB - Test Yourself!"
        ],
        "Variables and Basic Functions in MATLAB": [
          "Variables intro",
          "Command Window Formatting",
          "Types in MATLAB",
          "Converting One Type to Another",
          "Naming convention",
          "Semicolon",
          "Quiz 2 - Variables and Basic Functions - Test Yourself!",
          "Variables - Source Code ZIP"
        ],
        "Basic Arithmetic Operations and Code Documentation": [
          "Basic Arithmetic Operations in MATLAB",
          "Order of Operations - Brackets, Become a Master of Brackets",
          "Exercise Order of Operations with Brackets",
          "Where Are The Pi and Euler Numbers?",
          "Comments and Sections - Correctly Document Your Code!",
          "Project 1 - Basic Arithmetics - Pythagorean Theorem",
          "Relational (Comparison) Operators in MATLAB",
          "Getting the Sign and the Absolute Value of a Number",
          "Finding Roots of Any Equations, Greatest Common Divisor, Least Common Multiple",
          "Permutations, Combinations and Prime Numbers",
          "Quiz 3 - Basic Arithmetic Operations and Documentation - Test Yourself!",
          "Basic Arithmetic Operations - Source Code"
        ],
        "The Basics of Vectors in MATLAB": [
          "Intro To Vectors - What are Vectors?",
          "Arithmetic Operations On Vectors",
          "Dot and Cross Products Between Two Vectors",
          "Extracting, Modifying and Selecting Subvectors",
          "Concatenating Vectors",
          "Length and Sum of Vectors",
          "Project 2 - Vectors Part 1 - Practice Comparing, Extracting, Selecting Vectors",
          "Quiz 4 - Vectors Part One - Test Yourself!",
          "Vectors Part One - Source Code ZIP"
        ],
        "Advanced Vector Techniques in MATLAB": [
          "Logical Selection and Extraction of Vectors and Subvectors",
          "Generating Random Numbers with Specific Ranges",
          "Sorting a Vector",
          "Find The Indexes of Specific Values in Vector",
          "Project 3 - Vectors Part 2 - Practice Finding Elements in Vectors",
          "Quiz 5 - Vectors Part Two - Test Yourself!",
          "Vectors Part Two - Source Code ZIP"
        ],
        "The Basics of Matrices in MATLAB": [
          "Intro to Matrices",
          "Arithmetic Operations on Matrices",
          "Get The Diagonal of a Matrix",
          "Size and Dimensions of a Matrix",
          "Extracting and Selecting Submatrices",
          "Logical Selection and Extraction of Matrices and Submatrices",
          "Project 4 - Matrices Part 1 - Generating Grayscale Images wit Matrices",
          "Project 5 - Matrices Part 2 - Manipulating Grayscale Images With Matrices",
          "Quiz 6 - The Basics of Matrices in MATLAB - Test Yourself!",
          "Matrices Part One - Source Code ZIP"
        ],
        "Advanced Matrix Techniques in MATLAB": [
          "Special Matrices in MATLAB Part 1 - Ones and Identity",
          "Special Matrices in MATLAB Part 2 - Zeros, Increase Your Code Speed 100 times!",
          "Concatenating Matrices, Vertically and Horizontally",
          "How does MATLAB Actually Work with Matrices - Sum, Min, Max",
          "Important Functions for Matrices Part 1",
          "Important Functions for Matrices Part 2",
          "Sorting Matrices with MATLAB",
          "Project 6 - Matrices Part 3 - Introduction to RGB Images and 3D-6D+ Matrices",
          "Project 7 - Matrices Part 4 - Manipulating RGB Images through Matrix Operations",
          "Project 8 - Matrices Part 5 - More Matrix (RGB Image) Manipulation Practice",
          "Quiz 7 - Advanced Matrix Techniques in MATLAB - Test Yourself!",
          "Matrices Part Two - Source Code ZIP"
        ],
        "Data Visualization - Visualize Your Data in a Meaningful Way, Express Yourself": [
          "Creating a Basic Plot",
          "Customizing a Plot - Color, LineStyle, LineWidth, Markers and More",
          "Labels and Grids on a Plot",
          "Automated Limits for your Plots",
          "Hold On! Multiple Graphs on The Same Plot",
          "Sprinkle Your Plot with a Legend",
          "Another Way for Multiple Plots - Subplot",
          "Project 9 - Data Visualization 1 - Data and Subplots",
          "Project 11 - Data Visualization 2 - Introduction to Handles",
          "Project 10 - Data Visualization 3 - More Common Properties in a Single Line",
          "Quiz 8 - Data Visualization - Visualize Your Data - Test Yourself!",
          "Data Visualization - Source Code ZIP"
        ],
        "Conditional Statements - Control the Flow In Your Code": [
          "The Logical Operators Explained",
          "Introduction to Conditional Statements - If/Else With Relational Operators",
          "Conditional Statements with Logical Operators",
          "Conditional Statements with Complex Logical Expressions",
          "Nested Conditional Statements",
          "Handling Multiple Cases - ElseIf",
          "Handling Multiple Cases - Switch",
          "Project 12 - Conditions 1 - Change Plot Properties Based On Some Conditions",
          "Project 13 - Conditions 2 - More Complex Plot Properties From Conditions",
          "Quiz 9 - Conditional Statements - Control the Flow In Your Code - Test Yourself!",
          "Conditional Statements - Source Code ZIP"
        ],
        "Loops - Write Less Code": [
          "How A Loop Works",
          "Indexing a Vector with a For Loop",
          "For Loop and Equations",
          "Justifying The Need of Loops - Sound Mini Project Part 1",
          "Nested For Loops - Essential for Working with Matrices",
          "Nested For Loops - Sound Mini Project Part 2",
          "While Loop - A Conditional Loop",
          "Break and Continue in a Loop",
          "Quiz 10 - Loops, Write Less Code - Test Yourself!",
          "Loops - Source Code ZIP"
        ]
      },
      "requirements": [
        "MATLAB already installed on your PC, free license works too",
        "No Prior Coding Knowledge is Required",
        "You will need ZIP software like WinZip or WinRar, to Unzip/Unrar the Source Code files",
        "Desire and Need to Learn MATLAB"
      ],
      "description": "This course will transform you from a MATLAB Novice into a MATLAB Master. The course was developed under the strict oversight of Hristo Zhivomirov who is one of the top 50 MATLAB contributors Worldwide (search for his name in Google).\nThe course is structured in a way that is suitable for both beginners and those that already have some experience with MATLAB, there is a lot of information for everyone.\nEverything in our world today can be viewed as some kind of a matrix, and I’m not talking about the Matrix Trilogy. For example\nMeasuring the temperature of a patient every 2 hours, can be represented with a one dimensional matrix, which is also called a vector\nMonochromatic (black and white) image is a two dimensional matrix, the values in each cell in the matrix is representing the gradation of the gray color\nMeasuring temperature in a room for example, rooms are 3D, so we need x, y, z to describe the position at which we take our measurements, and the value is the temperature, that is a three dimensional matrix\nMeasure now the change of that temperature over a period of time and the temperature becomes a fourth dimension\nNow add time in the mix and you get… a fifth dimension!\nActually MATLAB has no restrictions on dimensions, you can work with 4, 5, 6 and more dimensions in a single matrix!\nHow to handle The Matrix: It is not necessary to look for the red pill, like Neo had to – what you actually need is MATLAB, which means MATrix LABoratory contrary to popular belief. MATLAB is a programming language of high level and interactive programming environment that lets you easily implement numeric experiments and methods, allowing you to design algorithms, analyze data and visualize that data in a very, very powerful way.\nYou will learn:\nVariables, everything you need to know about variables in matlab, their types or lack of types, converting between different types, naming conventions, the semicolon operator and more\nBasic Arithmetic Operations in MATLAB, the most important thing in this section of the course are the Brackets and the Order of operations, many beginners get lost when they encounter complex expressions, and you will become a master of those\nRight after that we are diving into deep waters starting with Vectors, you will learn how to think in vectors and perform a variety of different operations on and with vectors. Concatenating vectors, extracting or selecting subvectors, and more\nMatrices are next on the line, but you wont need any pills, because I have you covered, you will learn everything you need to know about working with Matrices in MATLAB and you will also learn a trick in this section that will help you optimize your code and make it run up to 100 times faster!\nData visualization, because, well, whats the point of working with Data if you cant understand it or share it with other people, visualizing data is key in any area of work\nAnd finally we get to the actual MATLAB Programming by utilizing conditional statements, loops and functions to control the flow of your code, write less code, and make your code modular.\nEach section contains a source code file at the end so that you can download and review the code that I have written in the lectures!\nI hope that you will enjoy this course, as much as I did creating it, so lets dive right into it!\nI welcome you to the course!",
      "target_audience": [
        "Academics",
        "Researchers",
        "Engineers",
        "Students",
        "Anyone who has interest in working with Data"
      ]
    },
    {
      "title": "Complete Python 3 Programming Bootcamp: Beginner to Advanced",
      "url": "https://www.udemy.com/course/complete-python-programming-course-beginner-to-advanced/",
      "bio": "Learn Python Programming from Beginner to Advanced Level! Go from Zero to Hero in Python with Hundreds of Examples!",
      "objectives": [
        "Gain a Complete Knowledge of Python 3!",
        "Code Your Own Python Programs!",
        "Learn How to Install and Work with Python IDE Programs (Jupyter Notebook, Python IDLE, Sublime Text, etc.)",
        "Understand the Programming Logic, and Gain Detailed Knowledge in Regard to Python Programming Language",
        "Learn Python Data Types",
        "Understand Conditional Statements",
        "Rule the Control Flows of Your Programs using Python Loop Structures",
        "Create, Read and Write to Files on your System using Python",
        "Understand & Learn Every Python Concepts (Basic to Advanced)",
        "Learn (OOP) Object Oriented Programming in Python",
        "Get a Better Job and Income!",
        "Quizzes / Assignments",
        "Lifetime Support from the Authors",
        "And Much More Beyond These..."
      ],
      "course_content": {
        "Course Introductory Video": [
          "Course Introductory Video"
        ],
        "Course Overview": [
          "Why Should We Learn Python?",
          "How Should You Study This Course?"
        ],
        "Software Preparation & Installation": [
          "The Jupyter Notebook Installation",
          "The Jupyter Notebook Installation (Student Guide)",
          "Python 2 or Python 3 ?",
          "Install Python on Windows",
          "Install Python on Linux",
          "Python IDE Installation",
          "PyCharm IDE Installation (Quick-Reference Guide)",
          "Setting Up Sublime Text For Python Development",
          "Use of the Jupyter Notebook"
        ],
        "Python Programming Basics & Data Structures": [
          "Python Numbers (Integers & Floats)",
          "Python Variables (Part 1)",
          "Python Variables (Part 2)",
          "Python Basic Operators",
          "Python Strings - (Part 1)",
          "Python Strings - (Part 2)",
          "Python Print Function",
          "Python Output Formatting - Using format() function",
          "Python List - (Part 1)",
          "Python List - (Part 2)",
          "Python Tuple",
          "Python Dictionaries",
          "Python Sets",
          "Data Type Conversions",
          "Getting Inputs from the Users",
          "Python Basics and Python Data Structures Assignments",
          "Python Basics and Python Data Structures Assignments (Solutions)"
        ],
        "Python Conditionals & Control Structures": [
          "Comparison Operators",
          "Logical Operators",
          "Membership Operators",
          "Chained Comparison Operators",
          "If-Else Statements",
          "If-Elif-Else Statements"
        ],
        "Loops - The ease of programming!..": [
          "Introduction to Loops",
          "For Loop",
          "Range Function",
          "While Loop",
          "Python Break Statements",
          "Python Continue Statements",
          "Python Pass Statement",
          "List Comprehension in Python"
        ],
        "Python Functions - The Power of Programming!": [
          "Introduction to Functions & Methods",
          "What are the Functions, Python Built-in Functions",
          "How to Call Functions & Function Arguments in Python",
          "The Return Statement",
          "Function Parameter Types in Python - (Part 1)",
          "Function Parameter Types in Python - (Part 2)",
          "Global and Local Variables in Functions",
          "Lambda (Anonymous) Functions",
          "Coding Exercise : Sum of 2 integers within a particular range challenge",
          "Coding Exercise : Check whether the Given String is a Palindrome or Not"
        ],
        "Dealing with Errors and Exception Handling": [
          "What are the Exceptions?",
          "Exception Handling : Try - Except Statements",
          "Exception Handling : Try - Except - Else Statements",
          "Exception Handling : Try - Except - Finally Statements",
          "Exception Handling : Raising Exceptions"
        ],
        "Python Modules and Packages": [
          "What are modules in Python?",
          "How to Import and Use the Modules in Python?",
          "Making Your Own Modules",
          "Coding Exercise : Guess The Number Game"
        ],
        "Python Files I/O (File Handling in Python)": [
          "Python File Operations : How to open and close a file using Python?",
          "How to Write to Files Using Python?",
          "How to Read Files in Python?",
          "Python File Methods",
          "Python File Modes",
          "How to Modify the Files"
        ]
      },
      "requirements": [
        "A computer",
        "A passionate learner",
        "No prior programming experience is required!",
        "No paid tools are required as the tools required for this course are free."
      ],
      "description": "Would you like to become a job-ready Python Programmer or advance your existing Python skills?\nThen this is the \"right\" course for you!\nWelcome to the most comprehensive, practical, and well-organized \"Python 3\" Programming course on Udemy.\nYou'll be learning Python from scratch with this Professionally Designed Python Programming Course!\nBecome an Expert Python Programmer and learn one of the employers' most demanded skills of 2022!\nIf you have no previous knowledge or experience in Python programming, don't worry you will like that the course begins with Python basics. Even if you have some experience in programming in Python, this course can help you learn some new information you had missed before. Each section of the course is linked to the previous one in terms of utilizing what was already learned and each topic is supplied with lots of examples that will help students in their process of learning. Upon the completion of this course, you should be able to write programs that have real-world examples.\nWhat I think is the best about this course is that you can search questions others have had, post your own questions, and get answers to challenges you are currently facing in learning and using Python programming.\nHere is the list of topics that you’ll learn by the end of the course:\nCommand Line Basics\nInstalling Python\nInstalling various Python IDEs\nRunning Python Code\nPython Strings\nPython Lists\nPython Dictionaries\nPython Tuples\nPython Sets\nPython Number Data Types\nPython Output Formatting\nPython Conditional Statements\nPython Loops\nPython Functions\nPython Function's Scope\nPython args/kwargs\nPython Built-in Functions\nPython Debugging and Error Handling\nPython Modules\nPython External Modules\nObject-Oriented Programming Concepts in Python (OOP Python)\nFunctional Programming in Python\nPython Inheritance\nPython Polymorphism\nPython Iterator\nPython Decorator\nPython Generator\nPython Yield\nPython File I/O Operations\nPython Advanced Data Structures\nWorking with Databases in Python\nAnd much more!\nIf you have any suggestions on topics that have not been covered, you can send them via private message.\nWe will do our best to cover them as soon as possible.\nYou'll also get:\nLifetime Access to The Course\nWorking Document for Each Lesson\nFast & Friendly Support in the Q&A Section\nUdemy Certificate of Completion Ready for Download!\nNo-Risk – Money-Back Guarantee:\nFinally, there is no risk. You can preview 10% of the course for free. Once you purchase the course, if for some reason you are not happy with the course, Udemy offers a 30-day money-back guarantee.\nSo, you have nothing to lose, sign up now for this great Python programming course, and learn how to write your Python programs easily from scratch to master level!\nHope to see you on the course soon and I hope you will enjoy your time learning as much as I have!\nSo what are you waiting for?\nWe'll see you in the next lecture!",
      "target_audience": [
        "Anyone who wants to learn Python Programming",
        "University or college students",
        "Graduates or workers",
        "Python for Beginners",
        "Intermediates on Python",
        "Anyone who wants to improve Python skills",
        "Software developers (Java/.net/Ruby) who wants to learn Python"
      ]
    },
    {
      "title": "Technical Analysis with Python for Algorithmic Trading",
      "url": "https://www.udemy.com/course/technical-analysis-with-python-for-algorithmic-trading/",
      "bio": "Use Technical Analysis and Indicators for (Day) Trading. Create, backtest and optimize TA Trading Strategies with Python",
      "objectives": [
        "Make proper use of Technical Analysis and Technical Indicators.",
        "Use Technical Analysis for (Day) Trading and Algorithmic Trading.",
        "Convert Technical Indictors into sound Trading Strategies with Python.",
        "Backtest and Forward Test Trading Strategies that are based on Technical Analysis/Indicators.",
        "Create and backtest combined Strategies with two or many Technical Indicators.",
        "Create interactive Charts (Line, Volume, OHLC, etc.) with Python and Plotly.",
        "Visualize Technical Indicators and Trend/Support/Resistance Lines with Python and Plotly.",
        "Use Pandas, Numpy and Object Oriented Programming (OOP) for Technical Analysis and Trading.",
        "Load Financial Data from local files and the web.",
        "Simple Moving Average (SMA) strategies",
        "Exponential Moving Average (EMA) strategies",
        "Moving Average Convergence Divergence (MACD) strategies",
        "Relative Strength Index (RSI) strategies",
        "Stochastic Oscillator strategies",
        "Bollinger Bands strategies",
        "Pivot Point strategies",
        "Fibonacci Retracement strategies",
        "mixed strategies (combining two or many indicators)"
      ],
      "course_content": {
        "Getting Started": [
          "What is Technical Analysis? / Course Overview",
          "Tips: How to get the most out of this course",
          "Did you know...? (what Data can tell us about Technical Analysis)",
          "Student FAQ",
          "*** LEGAL DISCLAIMER (MUST READ!) ***",
          "Course Materials / Download (Updated: Dez 2024)"
        ],
        "Installing Python and Jupyter Notebooks": [
          "Overview",
          "Download and Install Anaconda",
          "How to open Jupyter Notebooks",
          "How to work with Jupyter Notebooks"
        ],
        "Technical Analysis with Python - an Introduction": [
          "Overview",
          "Setting up an environment with cufflinks, plotly and yfinance",
          "Commands used in previous Lecture",
          "Loading Financial Data from the Web",
          "Charting - Simple Line Charts",
          "Charting - Interactive Line Charts with Cufflinks and Plotly",
          "Excursus: Creating Interactive Charts with Python Scripts / in a Shell",
          "How to customize Plotly Charts",
          "Candlestick and OHLC Bar Charts",
          "Bar Size / Granularity",
          "Volume Charts",
          "Technical Indicators - Overview and Examples",
          "Trend Lines",
          "Support and Resistance Lines"
        ],
        "Technical Analysis - Theory and Use Cases": [
          "Section Overview",
          "Technical Analysis vs. Fundamental Analysis",
          "Technical Analysis and the Efficient Market Hypothesis (EMH)",
          "Technical Analysis - Applications and Use Cases",
          "An Introduction to Currencies (FOREX) and Trading"
        ],
        "Simple Moving Averages (SMA) and Introduction to Backtesting": [
          "Introduction",
          "Getting the Data",
          "A simple Buy and Hold \"Strategy\"",
          "Performance Metrics",
          "SMA Crossover Strategies - Overview",
          "Defining an SMA Crossover Strategy",
          "Vectorized Strategy Backtesting",
          "Finding the optimal SMA Strategy",
          "Generalization with OOP: An SMA Backtesting Class in action",
          "OOP: the special method __init__()",
          "OOP: the method get_data()",
          "OOP: the method set_parameters()",
          "OOP: the method test_strategy()",
          "OOP: the method plot_results()",
          "OOP: the method update_and_run()",
          "OOP: the method optimize_parameters()",
          "OOP: Docstrings and String Representation",
          "Trading Costs (Part 1)",
          "Trading Costs (Part 2)",
          "Trading Costs (Part 3)",
          "Special Case: Price/SMA Crossover"
        ],
        "Exponential Moving Averages (EMA)": [
          "Introduction",
          "EMA Crossover Strategies - Overview",
          "Getting the Data",
          "EMA vs. SMA",
          "Defining an EMA Crossover Strategy",
          "Vectorized Strategy Backtesting",
          "OOP Challenge: Create the EMA Backtesting Class (incl. Solution)",
          "The EMA Backtesting Class in Action"
        ],
        "SMA / EMA Crossover Strategies (Coding Challenge)": [
          "Introduction",
          "SMA / EMA Crossover Strategies - Overview",
          "Instructions & some Hints",
          "Solution"
        ],
        "Moving Average Convergence Divergence (MACD)": [
          "Introduction",
          "MACD Strategies - Overview",
          "Getting the Data",
          "Defining an MACD Strategy (Part 1)",
          "Defining an MACD Strategy (Part 2)",
          "Vectorized Strategy Backtesting",
          "The MACD Backtesting Class in Action",
          "OOP Challenge: Create the MACD Backtesting Class (incl. Solution)",
          "Alternative MACD Strategies and Interpretations"
        ],
        "Relative Strength Index (RSI)": [
          "Introduction",
          "RSI Strategies - Overview",
          "Getting the Data",
          "Defining an RSI Strategy (Part 1)",
          "Defining an RSI Strategy (Part 2)",
          "Vectorized Strategy Backtesting",
          "The RSI Backtesting Class in Action",
          "OOP Challenge: Create the RSI Backtesting Class (incl. Solution)",
          "Alternative RSI Strategies and Interpretations"
        ],
        "Working with two or many Indicators - MACD & RSI": [
          "Introduction",
          "A combined MACD / RSI Strategy - Overview",
          "Backtesting and Optimizing the Strategies separately",
          "Combining MACD with RSI and Backtesting"
        ]
      },
      "requirements": [
        "A desktop computer (Windows, Mac, or Linux) capable of storing and running Anaconda. The course will walk you through installing the necessary free software.",
        "An internet connection capable of streaming HD videos.",
        "Basic Python Coding Skills (Variables, Data Types, Lists, For Loops, Functions) -> This is not a Course for complete Python Beginners.",
        "Basic Coding Skills in Pandas, Numpy and Matplotlib",
        "Basic Knowledge of Trading / Investing would be great (not mandatory, but it helps)"
      ],
      "description": "**Fully revised and updated in November 2024**\n\n\n\"(How) Can I use Technical Analysis and Technical Indicators for Trading and Investing?\" - This is one of the most frequently asked questions in trading and investing.\nThis course clearly goes beyond rules, theories, vague forecasts, and nice-looking charts. (These are useful but traders need more than that.) This is the first 100% data-driven course on Technical Analysis. We´ll use rigorous Backtesting / Forward Testing to identify and optimize proper Trading Strategies that are based on Technical Analysis / Indicators.\nThis course will allow you to test and challenge your trading ideas and hypothesis. It provides Python Coding Frameworks and Templates that will enable you to code and test thousands of trading strategies within minutes. Identify the profitable strategies and scrap the unprofitable ones!\n\n\nThe course covers the following Technical Analysis Tools and Indicators:\nInteractive Line Charts and Candlestick Charts\nInteractive Volume Charts\nTrend, Support and Resistance Lines\nSimple Moving Average (SMA)\nExponential Moving Average (EMA)\nMoving Average Convergence Divergence (MACD)\nRelative Strength Index (RSI)\nStochastic Oscillator\nBollinger Bands\nPivot Point (Price Action)\nFibonacci Retracement (Price Action)\ncombined/mixed Strategies and more.\n\n\nThis is not only a course on Technical Analysis and Trading. It´s an in-depth coding course on Python and its Data Science Libraries Numpy, Pandas, Matplotlib, Plotly, and more. You will learn how to use and master these Libraries for (Financial) Data Analysis, Technical Analysis, and Trading.\nPlease note: This is not a course for complete Python Beginners (check out my other courses!)\n\n\nWhat are you waiting for? Join now and start making proper use of Technical Analysis!\nAs always, there is no risk for you as I provide a 30-Days-Money-Back Guarantee.\nThanks and looking forward to seeing you in the Course!",
      "target_audience": [
        "(Day) Traders and Investors who want to make proper use of Technical Analysis.",
        "(Day) Traders and Investors who want to professionalize their Business.",
        "Technical Analyst and Chartist who want to improve their work/analysis with powerful Python Coding",
        "Everyone who wants to do more with Technical Analysis than just telling vague stories and creating pretty charts."
      ]
    },
    {
      "title": "Mastering Grails. A Comprehensive Grails Course.",
      "url": "https://www.udemy.com/course/mastering-grails/",
      "bio": "Learn Grails The Easy Way. Infinite Skills Presents The Ideal Way To Learn How To Program with Grails",
      "objectives": [
        "Gain A Solid Understanding Of The Grails FrameWork"
      ],
      "course_content": {},
      "requirements": [
        "PC or Mac"
      ],
      "description": "This Learning Grails training course from Infinite Skills shows you how to create dynamic, data-centric web applications using the Grails framework. This course is designed for the absolute beginner, meaning no prior knowledge of Grails is required.\n\nYou will start by learning how to install Grails on your operating system and learn how to setup a basic project. You will learn how to create a basic application stack, including creating a controller, view, and model. Mike will show you how to design the data layer, teaching you about dynamic and static scaffolding, bootstrapping data, and various constraints. This video tutorial will also cover designing the web and logic layer, managing data with GORM, and adding finishing touches to the application. Finally, you will learn how to package the application and create and manage an AppFog account.\n\nOnce you have completed this computer based training course, you will be fully capable of building a working web application with Grails. Working files are included, allowing you to follow along with the author throughout the lessons.",
      "target_audience": [
        "Web Designers & Developers Of All Levels"
      ]
    },
    {
      "title": "Reactive Programming with Spring Framework 5",
      "url": "https://www.udemy.com/course/reactive-programming-with-spring-framework-5/",
      "bio": "Learn Reactive Programming with Spring Framework 5!",
      "objectives": [
        "Learn how to leverage the Reactive Programming Features of Spring Framework 5",
        "Build microservices with Spring WebFlux",
        "Leverage Reactive types in Spring Data MongoDB",
        "Functional Programming with Java",
        "Java 8 Streams"
      ],
      "course_content": {},
      "requirements": [
        "Knowledge of Java and the Spring Framework is required",
        "SQL Knowledge helpful",
        "Basic Docker skills recommended, but not required"
      ],
      "description": "NOTE: This course was completely recreated in May 2021 using Java 11 and Spring Boot 2.4.x.\nOne of the most interesting new features in Spring Framework 5 is Reactive Programming.\nReactive Programming is an important paradigm shift from the traditional object oriented programming commonly used with Java.\nReactive Programming adopts an immutable / functional style (which is fully explained in the course!).\nWhile Reactive Programming may not be an automatic way of making your code faster, it can help your code scale up better. Especially if you are dealing with streams of data.\nIn side this course, you will first learn the fundamental concepts of Reactive Programming. You'll learn why immutability and functional programming are important to Reactive Programming.\nNext, you'll get hands on experience with building a Reactive application to stream 'movie events' leveraging the Reactive data types and WebFlux - both new to Spring Framework 5.\nThese exercises help get you comfortable using the Reactive Programming APIs and functional programing style.\nFollowing is a whole section on using Spring Web Client. This is the reactive web client introduced in Spring Framework 5. Spring Web Client is the reactive equivalent of Spring RestTemplate.\nWhile Spring Web Client is the equivalent of Spring RestTemplate, Spring Web Flux is the equivalent of Spring MVC. You will learn how to use Spring Web Flux to create a RESTful API.\nThe JDBC API for accessing relational databases is blocking, and therefore not compatible with Reactive Programming. R2DBC is the reactive equivalent of JDBC. You will see how to use Spring Data R2DBC and reactive types to perform CRUD operations against a Relational Database.\nSpring Webflux also introduces a new functional style API for defining endpoints. You will see how to use this functional API to configure a RESTful API. Hello functional programming, good by Spring MVC annotated controller classes!\nWhere Reactive Programming really excels is dealing streams of data. You will see how to build a stock quote streaming service. Then how to stream those stock quotes into a MongoDB document store. And how to stream stock quotes to RabbitMQ Messages.\nCourse Extra - IntelliJ IDEA Ultimate\nStudents enrolling in the course can receive a free 120 day trial license to IntelliJ IDEA Ultimate! Get hands on experience using the Java IDE preferred by Spring Framework professionals!\nCourse Extra - Access to a Private Slack Community\nYou're not just enrolling in a course --> You are joining a community learning about Reactive Programming.\nWith your enrollment to the course, you can access an exclusive Slack community. Get help from the instructor and other Spring Framework Gurus from around the world - in real time! This community is only available to students enrolled in this course.\nWith your enrollment, you can join this community of awesome gurus!\nClosed Captioning / Subtitles\nClosed captioning in English is available for all course videos!\nPDF Downloads\nAll keynote presentations are available for you to download as PDFs.\nLifetime Access\nWhen you purchase this course, you will receive lifetime access! You can login anytime from anywhere to access the course content.\nNo Risk - Money Back Guarantee\nYou can buy this course with no risk. If you are unhappy with the course, for any reason, you can get a complete refund. The course has a 30 day Money Back Guarantee.\nAfter you complete this course, you will be comfortable in using the Reactive Programming features in your existing or new Spring Framework Applications.\n\n\nEnroll today and start learning Reactive Programming with Spring Framework 5!",
      "target_audience": [
        "Ideal for Spring Framework Developers wishing to learn Reactive Programming"
      ]
    },
    {
      "title": "The Complete C Developer Course - Build 7 Exciting Projects.",
      "url": "https://www.udemy.com/course/the-complete-c-developer-course-build-7-exciting-projects/",
      "bio": "Master the C Programming Language in 2025 by Building Exciting Projects for Students from Beginner to Advanced Levels.",
      "objectives": [
        "Start to write a code from a Basic \" Hello World ! \" Program .",
        "Get the indepth understanding of each & every concept of Programming Practically .",
        "Learn Fundamental Concepts such as :- Data Types, Constants, Decision making , String, Function, Array, Structure, Union, Pointer, Recursion, File Handling.",
        "Learn Advanced Concepts -: Memory Models, Mouse Programming, Advanced Pointers, Bit Programming, Storage classes, DMA, Graphics Programming",
        "Get Exercise Questions after every important lesson for practise .",
        "Quizzes to Test knowlege about the subject .",
        "Get top 15 programs for practise which can be asked in Exams or in Interviews with source code .",
        "Develop Mini File / Folder Protection software .",
        "Develop Own Dos command .",
        "Develop a Computer virus ( Just for educational purpose only ! ) .",
        "Develop a Computer game \" Blue Brick Hunter \" .",
        "Develop an Advanced Project \" Student Database Management System \" .",
        "Learn the ways of making money online/offline based on this course .",
        "Get All the Source code for download used in this Course !"
      ],
      "course_content": {},
      "requirements": [
        "Students Just Needs the Basic knowledge of Computers to enroll the course .",
        "A Computer with Windows / Mac / Linux ."
      ],
      "description": "Welcome to \" The Complete C Developer Course - Build 7 Exciting Projects \".\nGet Enrolled in the fastest-growing course Today, 45000+ Happy Students are already enrolled!\nMaster the C Programming Language by Building Computer Games, Computer software, and Computer viruses, Before moving to C++, Java, and Python.\nC is the most popular programming language in the world. C is generally used for developing operating systems, compilers, device drivers, etc. Do you know that most parts of the popular operating system UNIX are written in C. Popular programming languages like PHP, Python, and Ruby are also written in the c programming language.\nThis is the world's best c programming  Course which is designed for those who want to master c programming from the absolute beginning & creates the base for those who want to learn C++, java, and Objective-C - c. Also for those students who want to complete their final year projects on their own. This course covers each & every concept of the programming field in depth practically. Over 7 years of in-depth knowledge and experience is poured into this course by Instructor Prashant.\nBENEFITS OF ENROLLING IN THIS COURSE\nBecome a c programming expert in less than 8 weeks.\nSave time & money in the search for the best & easy to understand c  programming course.\nCovers almost all 32 keywords introduced in c.\nGet exercise questions/assignments.\nGet Quizzes to test the subject's understanding.\nGet a certificate of successful completion.\nGet 24x7 support.\nGet all the source codes for download.\nAfter successful completion of the course, section 30 explains to you how to make thousands of dollars a year online.\nThis course consists of 30 different sections and over 16 hours of HD video content.\nMAIN SECTIONS OF THE COURSE: -\nIntroduction.\n\nVariable / Constants / Data Types.\n\nHierarchy and associativity of operators.\n\nDecision-making & branching.\n\nLoop control structure.\n\nArray.\n\nPointer.\n\nFunction.\n\nStructure.\n\nUnion.\n\nCommon Error Handling & Debugging.\n\nString Handling.\n\nBest programming practices.\n\nFile I/O.\n\nAdvanced miscellaneous concepts.\n\nDate and Time Programming.\n\nSound Programming.\n\nPreprocessor directives.\n\nCommand-line arguments.\n\nDynamic memory allocation ( DMA ).\n\nStorage classes.\n\nBit-level programming ( Bitwise operators ).\n\nMemory models.\n\nKeyboard programming.\n\nMouse programming.\n\nGraphics programming.\n\nDevelop File / Folder protection software.\n\nDevelop your own Dos command.\n\nDesign a computer virus \" Screen killer \".\n\nDevelop a computer game \"Blue Brick Hunter \".\n\nDevelop an advanced Project on \" Student Database Management System \".\n\nLearn the Ways of Making Money on the Basis of this course!",
      "target_audience": [
        "For every Student who wants to Learn to code .",
        "For every Student who wants to understand each and every concept of programming in depth .",
        "For every Student who wants to Learn to build their final year projects on their own .",
        "For those who wants to make money while Learning to code .",
        "For Entrepreneurs who wants to start a small online Business ( about programming ) ."
      ]
    },
    {
      "title": "Learn Coding with Java from Scratch: Essential Training",
      "url": "https://www.udemy.com/course/learn-coding-with-java-from-scratch-essential-training-2022/",
      "bio": "Mastering Java 17 with the modern features, know how it works. Become A Professional Java Developer in no time!",
      "objectives": [
        "Introduction to coding with Java",
        "Java Tools and Setup",
        "Variables, Data Types, Casting, Operators, and doing Mathematics",
        "Strings and Working with text using Java Techniques",
        "Flow control and Making Different Decisions: if - else if - else, and switch - case",
        "Loops, Repetitions, and Iterations: while, do while, for, and Controlling blocks",
        "Working with Arrays in depth",
        "Methods and functional programming in Java",
        "Object-Oriented Programming: Classes, Objects, Attributes, Modifiers, and More",
        "Advanced Object-Oriented Programming: Inheritance, Interfaces, Enumerations and More"
      ],
      "course_content": {
        "Module 1: Introduction": [
          "Introduction",
          "Tools setup tips",
          "Download and Install Java",
          "Download and Install IDE",
          "First Program tips",
          "Java is Fun in InteliJ"
        ],
        "Module 2: Java Basics": [
          "Comments theory",
          "Comments hands-on",
          "Variables in Java theory",
          "Variables hands-on",
          "The basic data types theory",
          "Data Types hands-on",
          "Casting hands-on",
          "Operations theory",
          "Operators hands-on",
          "Math in Java theory",
          "Doing Math Op hands-on",
          "Inputs and Outputs hands-on"
        ],
        "Module 3: Strings and working with text": [
          "Strings in Java theory",
          "Strings and storing text op hands-on"
        ],
        "Module 4: Conditions and Decisions": [
          "Conditional Statements theory",
          "Conditional Statements hands-on",
          "Switch - case hands-on."
        ],
        "Module 5: Loops, Iterations, and Controlling Blocks": [
          "Loops in Java theory",
          "The while and do while loops hands-on",
          "The for loop and iterator hands-on",
          "Controlling loops hands-on"
        ],
        "Module 6: Working with Arrays": [
          "Arrays in Java theory",
          "Arrays in detail hands-on"
        ],
        "Module 7: Methods and Functional Programming": [
          "Methods in Java theory",
          "Methods hands-on"
        ],
        "Module 8: Object-Oriented Programming with Java": [
          "Java OOP theory",
          "OOP - Classes, Object, and More hands-on",
          "OOP - Constructors hands-on"
        ],
        "Module 9: Advanced Object-Orientation with Java": [
          "OOP - Inheritance hands-on",
          "Abstraction and Interfaces hands-on",
          "OOP - Enumerations hands-on"
        ]
      },
      "requirements": [
        "No programming experience needed. You will learn everything you need to know"
      ],
      "description": "Hello and welcome to the Learn Coding with Java from Scratch: Essential Training Course.\nIn this course, you will learn all the Java fundamentals needed to become a Professional Java Programmer quickly and efficiently.\nJava is so popular, powerful, easy, simple, secure, Object-Oriented, and widely used programming language.\n\n\nYou can use the Java programming language for building:\nGUI applications\nWeb servers and applications servers\nMiddleware applications\nWeb applications\nMobile applications\nEmbedded systems\nEnterprise applications\nScientific Applications\nGaming Applications\nBig Data technologies\nDistributed Applications\nCloud-based Applications\nAll this and More\nTherefore, learning this programming language opens up many opportunities for you.\nAnd in this immersive training course, you will master all the Java 17 concepts with the modern features.\nAll the course concepts will be explained first theoretically, and then practically using the IntelliJ IDEA Community Edition IDE.\nJava has a huge community, So if you encounter any problems, you will find the solution easily.\n\n\nBy the end of this course, you'll learn:\nIntroduction to coding with Java\nJava Tools and Setup\nVariables, Data Types, Casting, Operators, and doing Mathematics\nStrings and Working with text using Java Techniques\nFlow control and Making Different Decisions: if - else if - else, and switch - case\nLoops, Repetitions, and Iterations: while, do while, for, and Controlling blocks\nWorking with Arrays in depth\nMethods and functional programming in Java\nObject-Oriented Programming: Classes, Objects, Attributes, Modifiers, and More\nAdvanced Object-Oriented Programming: Inheritance, Interfaces, Enumerations and More\nAll this and More with practical examples\nThis course will be constantly updated with the support of the instructor.\nSo, what are you waiting for, enroll now to go through an immersive training course of one of the most popular and powerful programming languages on the market for , Java.\nBecome A Professional Java Developer in no time!\nWe have a lot to cover in this course.\nLet's get started!",
      "target_audience": [
        "Java New Developers and Programmers",
        "Programming and Software Development Engineering Newbies",
        "Programmers, Developers, and Engineers who know other programming language but are new to Java"
      ]
    },
    {
      "title": "Python 3: Deep Dive (Part 4 - OOP)",
      "url": "https://www.udemy.com/course/python-3-deep-dive-part-4/",
      "bio": "Python Object Oriented Programming (OOP)",
      "objectives": [
        "Python Object Oriented Concepts",
        "Classes",
        "Methods and Binding",
        "Instance, Class and Static Methods",
        "Properties",
        "Property Decorators",
        "Single Inheritance",
        "Slots",
        "Descriptors",
        "Enumerations",
        "Exceptions",
        "Metaprogramming"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Prerequisites",
          "Course Slides"
        ],
        "Classes": [
          "Introduction",
          "Objects and Classes - Lecture",
          "Objects and Classes - Coding",
          "Class Attributes - Lecture",
          "Class Attributes - Coding",
          "Callable Class Attributes - Lecture",
          "Callable Class Attributes - Coding",
          "Classes are Callables - Lecture",
          "Classes are Callables - Coding",
          "Data Attributes - Lecture",
          "Data Attributes - Coding",
          "Function Attributes - Lecture",
          "Function Attributes - Coding",
          "Initializing Class Instances - Lecture",
          "Initializing Class Instances - Coding",
          "Creating Attributes at Run-Time - Lecture",
          "Creating Attributes at Run-Time - Coding",
          "Properties - Lecture",
          "Properties - Coding",
          "Property Decorators - Lecture",
          "Property Decorators - Coding",
          "Read-Only and Computed Properties - Lecture",
          "Read-Only and Computed Properties - Coding",
          "Deleting Properties - Lecture",
          "Deleting Properties - Coding",
          "Some Questions on the Property Class",
          "Class and Static Methods - Lecture",
          "Class and Static Methods - Coding",
          "Python Builtin and Standard Types",
          "Class Body Scope - Lecture",
          "Class Body Scope - Coding",
          "Quick Recap"
        ],
        "Project 1": [
          "Project Description",
          "Project Solution - TimeZone",
          "Project Solution - Transaction Numbers",
          "Project Solution - Account Numbers, Names",
          "Project Solution - Preferred TimeZone",
          "Project Solution - Account Balance",
          "Project Solution - Interest Rate",
          "Project Solution - Transaction Codes",
          "Project Solution - Confirmation Codes",
          "Project Solution - Transactions",
          "Project Solution - Testing with unittest"
        ],
        "Polymorphism and Special Methods": [
          "Introduction",
          "__str__ and __repr__ Methods - Lecture",
          "__str__ and __repr__ Methods - Coding",
          "Arithmetic Operators - Lecture",
          "Arithmetic Operators - Coding",
          "Rich Comparisons - Lecture",
          "Rich Comparisons - Coding",
          "Hashing and Equality - Lecture",
          "Hashing and Equality - Coding",
          "Booleans - Lecture",
          "Booleans - Coding",
          "Callables - Lecture",
          "Callables - Coding",
          "The __del__ Method - Lecture",
          "The __del__ Method - Coding",
          "The __format__ Method - Lecture",
          "The __format__ Method - Coding"
        ],
        "Project 2": [
          "Project Description",
          "Project Solution"
        ],
        "Single Inheritance": [
          "Introduction",
          "Single Inheritance - Lecture",
          "Single Inheritance - Coding",
          "The object Class - Lecture",
          "The object Class - Coding",
          "Overriding - Lecture",
          "Overriding - Coding",
          "Extending - Lecture",
          "Extending - Coding",
          "Delegating to Parent - Lecture",
          "Delegating to Parent - Coding",
          "Slots - Lecture",
          "Slots - Coding",
          "Slots and Single Inheritance - Lecture",
          "Slots and Single Inheritance - Coding"
        ],
        "Project 3": [
          "Project 3 - Description",
          "Project Solution - Approach and Setup",
          "Project Solution - Validators and tests",
          "Project Solution - Resources class and tests",
          "Project Solution - CPU class and tests",
          "Project Solution - Storage class and tests",
          "Project Solution - HDD and SSD classes and tests"
        ],
        "Descriptors": [
          "Introduction",
          "Descriptors - Lecture",
          "Descriptors - Coding",
          "Getters and Setters - Lecture",
          "Getters and Setters - Coding",
          "Using as Instance Properties - Lecture",
          "Using as Instance Properties - Coding",
          "Strong and Weak References - Lecture",
          "Strong and Weak References - Coding",
          "Back to Instance Properties - Lecture",
          "Back to Instance Properties - Coding",
          "The __set_name__ Method - Lecture",
          "The __set_name__ Method - Coding",
          "Property Lookup Resolution - Lecture",
          "Property Lookup Resolution - Coding",
          "Properties and Descriptors - Lecture",
          "Properties and Descriptors - Coding",
          "Application - Example 1",
          "Application - Example 2",
          "Functions and Descriptors - Lecture",
          "Functions and Descriptors - Coding"
        ],
        "Project 4": [
          "Project Description",
          "Solution - Part 1",
          "Solution - Part 2"
        ],
        "Enumerations": [
          "Introduction",
          "Making the case for Enumerations",
          "Enumerations - Lecture",
          "Enumerations - Coding",
          "Aliases - Lecture",
          "Aliases - Coding",
          "Customizing/Extending Enums - Lecture",
          "Customizing/Extending Enums - Coding",
          "Automatic Values - Lecture",
          "Automatic Values - Coding"
        ]
      },
      "requirements": [
        "Strong knowledge of functional Python",
        "Closures and Decorators",
        "Iterators, Iterables and Generators",
        "Mapping Types, Hashing",
        "Some exposure to basic OOP"
      ],
      "description": "This Python3: Deep Dive Part 4 course takes a closer look at object oriented programming (OOP) in Python.\nMAIN COURSE TOPICS\nwhat are classes and instances\nclass data and function attributes\nproperties\ninstance, class and static methods\npolymorphism and the role special functions play in this\nsingle inheritance\nslots\nthe descriptor protocol and its relationship to properties and functions\nenumerations\nexceptions\nmetaprogramming (including metaclasses)\n\n\nCOURSE PREREQUISITES\nPlease note this is NOT a beginner level course. You must have a strong working knowledge of functional Python programming as well as some practical experience developing Python applications in order to fully benefit from this course.\nIn-depth functional Python programming\nfunctions, closures, scopes, decorators (using and writing them)\nzip, sorted, any, all, and the itertools module in general\nsequences, iterables, iterators and generators (what they are and how to implement the corresponding protocols)\ngenerators, yield, and context managers\nmapping types, hashing and relation to object equality\nsome prior knowledge of basic OOP concepts\nknow how to work with Python virtual environments and pip install\navailable Jupyter Notebook (freely available) to follow along with the course notebooks\nhow to use git\n[Please note that this is not a cookbook style course - I don't show you how to solve specific problems, but rather a broad and in-depth look at how OOP works in the context of Python, that will allow you to apply these concepts and techniques to your own problems.]",
      "target_audience": [
        "Experienced intermediate Python developers who want a more in-depth understanding of Python OOP"
      ]
    },
    {
      "title": "Python for Beginners - Learn Programming from scratch",
      "url": "https://www.udemy.com/course/python-for-beginners-learn-programming-from-scratch/",
      "bio": "Python For Beginners : This course is meant for absolute beginners in programming or in python.",
      "objectives": [
        "To learn the python language",
        "To learn the CORE skills to understand any programming language"
      ],
      "course_content": {
        "Programming fundamentals - Let's get some Theory": [
          "Introduction",
          "What is programming?",
          "What is Python?",
          "What is source code?",
          "New - Different Types of Languages",
          "Compile VS Interpreted Languages",
          "Strings and numbers",
          "Variables",
          "Lists, Arrays or Collections",
          "Conditional Code - If statements",
          "Loops",
          "Functions"
        ],
        "The Big Picture - Examples Of Different Languages": [
          "Intro",
          "Javascript Example",
          "Browsers and back-end languages",
          "PHP Example",
          "Program CLI's / executables",
          "Python Example"
        ],
        "WIndows OS - Python setup": [
          "Introduction of the command line / terminal",
          "Editor install",
          "Python install"
        ],
        "MAC OS - Python setup": [
          "Introduction of the command line / terminal",
          "Editor install",
          "Python install"
        ],
        "Ubuntu OS - Python setup": [
          "Introduction of the command line / terminal",
          "Editor install",
          "Code Editor extensions",
          "Python install",
          "Different ways of running Python scripts"
        ],
        "Getting Started with Python": [
          "Running Python IDLE and online",
          "Show hidden file extensions (OPTIONAL)",
          "VS editor clean output setup"
        ],
        "Python Basics - The Practical Approach - Fundamentals": [
          "Intro to python basics",
          "Exercise files",
          "Datatypes / strings",
          "Comments",
          "Numbers / Math",
          "Variables",
          "Constants",
          "Lists",
          "Tuples",
          "Dictionaries",
          "Booleans",
          "Sets",
          "Data casting"
        ],
        "UPDATED - Conditional structures - Fundamentals": [
          "intro to conditional code",
          "If Statements",
          "Loops",
          "Break and Continue"
        ],
        "UPDATED - Functions - Fundamentals": [
          "intro to functions",
          "Defining a function",
          "Functions with arguments",
          "Function variable scopes",
          "Unlimited arguments",
          "A better way to display data",
          "Default data",
          "Function return",
          "Lambda functions",
          "Unpacking",
          "Built in functions",
          "Built-in function with examples"
        ],
        "New - Python Classes / Objects - Intermediate": [
          "Defining a class and object",
          "Methods",
          "Modifying a class when returning string data",
          "Inheritance"
        ]
      },
      "requirements": [
        "NO programming knowledge required"
      ],
      "description": "NEW PYTHON CODE\nThis python for beginners course is geared to students who want to know how python works and also to those totally new to programming.\nThe python language has very simple syntax(way to write it) to learn and it is one of the most powerful languages to learn since it can used for a variety of things.\nHere are some:\nData analysis\nGame development\nVisualization\nWeb development\nRobotics\nand more....\n\n\nJobs in this field are really lucrative and knowing this language will give you an edge when finding a job and making a lot more money than other developers; python developers are not as many as in other languages since people think is hard. Python is super easy to learn but very powerful since it contains many possibilities.\n\nPython is growing faster and faster everyday and it has surpassed many other languages over the years for a lot of reasons, which you will find out soon enough.\n------------------------------------------------------------------------------\nWhy take this course?\nThis course starts with explaining what programming really is? Have you ever wondered how things actually work in a program?\n1. Teaches the foundation of GENERAL programming\nEvery student should have some foundations on what programming really is before learning any language, why? Because once you understand the core components of programming it will be a lot easier to learn any language and create better programs.\n2. New lectures added all the time\nWhen you like what you do, it reflects. This is not a job for me, so I wake up wanting to code and help my students. Basically you pay once, get the course forever and get extra values added all the time, you have to love that :)\n3. Fun place to be\n\nI love making my lectures fun and engaging, so no boring lectures here!\n4. The support you get in this course in unmatched\nhave you ever joined a class and received very little support or none at all? Well that is not going to happen in this class, because I love helping my students.",
      "target_audience": [
        "Student totally new to programming",
        "Student totally new to python"
      ]
    },
    {
      "title": "The Complete LabVIEW Essentials - Code & Acquire Data Now",
      "url": "https://www.udemy.com/course/learnlabview/",
      "bio": "Learn LabVIEW, Connect to Hardware and Write Professional Software. Taught by a Certified LabVIEW Architect and Expert.",
      "objectives": [
        "The essentials of LabVIEW from a beginner through to an intermediate level",
        "Connect to Hardware for Data Acquisition",
        "The LabVIEW Environment",
        "How code executes in LabVIEW",
        "Native and Custom Data Types",
        "Five types of File Handling",
        "Error Handling",
        "Building and distributing an application",
        "How to structure software in a professional way using design patterns",
        "The software design process"
      ],
      "course_content": {
        "Getting Started With LabVIEW": [
          "Welcome to the course",
          "What is LabVIEW?",
          "LabVIEW Case Studies",
          "Careers In LabVIEW",
          "Installing LabVIEW",
          "The LabVIEW Environment",
          "What's New in LabVIEW 2023Q3?",
          "Parts of a VI",
          "Creating a VI",
          "VI Front Panel",
          "Front Panel Tools",
          "Creating a Front Panel",
          "Front Panel Summary",
          "Block Diagram",
          "Rules of Dataflow",
          "Highlight Execution",
          "Functions Palette",
          "Quick Drop",
          "Creating a Block Diagram",
          "Block Diagram Demonstration Summary",
          "Help Introduction",
          "Context Help",
          "Detailed Help",
          "Example Finder",
          "Module Summary"
        ],
        "Dataflow and Datatypes": [
          "Module Introduction",
          "String Introduction",
          "Demonstration String Functions 1",
          "Demonstration String Functions 2",
          "Demonstration String Functions 3",
          "Dialog Boxes",
          "Booleans",
          "Boolean Switching Mechanical Action",
          "Numeric Representation",
          "Coercion Dots",
          "Numeric Functions",
          "Numeric Display Format",
          "Troubleshooting Introduction",
          "Broken Run Arrows",
          "Highlight Execution",
          "Pause",
          "Probes",
          "Retain Wire Values",
          "Breakpoints",
          "More Datatypes",
          "Datatype Conversion",
          "Number to String Conversion",
          "String to Number Conversion",
          "Format Into String Function",
          "Scan From String Function",
          "Enumerated Types (Enums)",
          "Clusters",
          "Type Definitions",
          "Types of Control",
          "Array Introduction",
          "Creating Arrays",
          "Array Functions Part 1",
          "Array Functions Part 2",
          "Array Functions Part 3",
          "Multidimensional Arrays",
          "Error Handling Introduction",
          "Automatic Error Handling",
          "Manual Error Handling",
          "Module Summary"
        ],
        "Structures": [
          "Decision Making Code",
          "Case Structures",
          "Case Structures - Enums",
          "Case Structures - Numeric",
          "Case Structures - Error Handling",
          "Case Structure - Tunnels",
          "Diagram Disable Structure",
          "Loops Introduction",
          "Run Continuous Button",
          "While Loops",
          "Software Timing",
          "For Loop Introduction",
          "For Loop Condition Terminal",
          "Auto Indexing Arrays using For Loops",
          "Conditional Tunnels",
          "For Loop Concatenating Tunnels",
          "Loop Feedback using Shift Registers",
          "Stacked Shift Registers",
          "Event Driven Code",
          "Notify and Filter Events",
          "Event Structure Recommendations",
          "State Machine Introduction",
          "Module Summary"
        ],
        "Connecting to Hardware": [
          "Introduction to Data Acquisition",
          "NI Measurement and Automation Explorer (NI MAX)",
          "NI MAX - NI DAQ Test Panels",
          "Simulating NI DAQ Devices",
          "Testing Non-NI Instruments",
          "Using NI DAQ Devices in LabVIEW",
          "DAQ Assistant Digital Input Output",
          "DAQmx API Part 1",
          "DAQmx API Part 2",
          "DAQmx Pro Tips",
          "Using Non-NI Instruments",
          "Connecting to a Serial Instrument",
          "NI Instrument Driver Network",
          "Module Summary"
        ],
        "Organising Applications": [
          "Module Introduction",
          "Customer Requirements",
          "Event Based State Machine",
          "Customizing the State Machine",
          "Using SubVIs",
          "Updating the Project to Acquire Data",
          "Analyse Data",
          "Popup Boxes",
          "Documentation",
          "LabVIEW Project",
          "Project Explorer Tools",
          "Course Project Recap"
        ],
        "File Handling": [
          "File Handling Module Introduction",
          "File Types - Configuration Files",
          "INI Files in LabVIEW",
          "Data Files Introduction",
          "Data Files - CSV File",
          "Data Files - Text File",
          "Data Files - TDMS File",
          "Recovery File - Binary File",
          "File Paths",
          "Creating Directories",
          "Updating the Course Project",
          "Implementing Saving Data Files",
          "Implementing Opening Data Files",
          "Implementing Configuration and Recovery Files",
          "Module Summary"
        ],
        "Building an Application": [
          "Project Requirements",
          "Custom Run Time Menus",
          "Standalone Applications",
          "Conditional Disable Structure",
          "Building an Executable",
          "Building an Installer",
          "Module Summary"
        ],
        "VI Server: Controlling the UI Programmatically": [
          "Bonus Section: Section Introduction",
          "Control Property Nodes",
          "VI Property Nodes",
          "Invoke Nodes",
          "VI Invoke Nodes",
          "Control References",
          "Module Summary"
        ]
      },
      "requirements": [
        "None"
      ],
      "description": "With almost 10 hours of training videos, demonstration code, and exercises, this course has been curated by an experienced LabVIEW professional to ensure beginners to LabVIEW are taught the most important topics, whilst also learning best programming practices.\nFrom module 5 onwards, we will design, develop, document and deploy a course project based on customer requirements. This course project will teach you how to effectively create great code quickly!\nLabVIEW is everywhere. There was a saying when I worked for National Instruments (NI - the inventors of LabVIEW) that ‘If You Can Turn It On, Drive It, Or Fly It, Changes are NI and LabVIEW Made It Happen’. This is certainly what I have experienced in my career when working for several different industries. LabVIEW is used by:\nResearch & Development (R&D) teams to create software for test, measurement and control applications.\nProduction lines to manufacture products.\nEngineers to monitor the structural integrity of buildings, bridges and tunnels.\nAnd many more scientists and engineers around the world!\nLabVIEW is widely used by scientists and engineers for the following reasons:\nDevelopment Time: A graphical programming environment like LabVIEW means (with appropriate training), anyone can develop large and often complex applications without requiring a software or computer science degree.\nData Acquisition: Arguably, the most powerful aspect of LabVIEW is its ability to interface with any type of hardware. LabVIEW is excellent at communicating with any interface port on your PC using a huge array of communication protocols. If you own hardware from several different suppliers, there will be a way of making them all work together using LabVIEW.\nInteroperability: LabVIEW is a single development environment that can be used to create applications for desktop (Windows, Mac and Linux), embedded targets (Raspberry Pi, and other Real-Time Operating Systems (RTOS)) and even FPGAs (a type of programmable circuit).\nIf you are wanting to learn a versatile programming language that can be a gateway into several industries, then learn LabVIEW.\n\n\nThis training covers the following objectives:\nModule 1: Getting Started with LabVIEW\nPrepare you and your computer to get the most out of this course.\nUnderstand what LabVIEW can be used for and who should be using LabVIEW.\nLearn how to navigate the LabVIEW environment and understand the components of a Virtual Instrument (VI).\nModule 2: Dataflow and Datatypes\nUnderstand how to use and manipulate the key datatypes in LabVIEW.\nUse the debugging tools available in LabVIEW.\nFurther your understanding of datatypes in LabVIEW.\nUnderstand what error handling is and how to implement it.\nModule 3: Structures\nLearn how to make decision making code using case structures, and how to disable code using diagram disable structures.\nUnderstand how and when to use While Loops and For Loops, and the caveats of using the Run Continuous Button.\nImplement event driven code in LabVIEW, and understand the differences between polling code and event driven code.\nUnderstand the basic concepts and implementation of a State Machine.\nModule 4: Connecting to Hardware\nFind out what a data acquisition device is, and how to communicate with them using NI MAX.\nUnderstand the key components of the DAQmx driver and how to use it in LabVIEW.\nLearn what NI-VISA is and how it can be used to communicate with non-NI instruments.\nModule 5: Organising Applications\nTo understand the design process.\nFind out the purpose of SubVIs and how to create them.\nLearn the key features of a LabVIEW project and how to organize your code.\nModule 6: File Handling\nTo understand the updated customer requirements for the course project.\nUnderstand how file types differ, and how to choose the appropriate file type.\nUnderstand the differences between path types and how to create directories in LabVIEW.\nUpdate the course project to meet all the customer’s requirements.\nModule 7: Building an Application\nUnderstand the updated customer requirements for the course project.\nLearn how to create a custom run-time menu.\nUnderstand and create standalone applications.",
      "target_audience": [
        "Scientists, Engineers, Students or anyone who wishes to learn LabVIEW",
        "Anyone who needs to control, test, analyse or create software generally should learn LabVIEW"
      ]
    },
    {
      "title": "Pre-Programming: Everything you need to know before you code",
      "url": "https://www.udemy.com/course/pre-programming-everything-you-need-to-know-before-you-code/",
      "bio": "Increase your chance of success learning to code and communicating with other developers",
      "objectives": [
        "Better understand the fundamentals of how programming works",
        "Understand the fundamentals of how computers work and how that relates to modern web technology",
        "Choose what programming language and path they want to pursue in their career",
        "Understand and apply the 8 basic concepts of programming",
        "Evaluate, install, and modify any content management system",
        "Understand world technology trends like responsive design, pair programming, PaaS systems, and the growth of APIs",
        "Make a decision about what technology and ecosystem interests you",
        "Correctly understand and apply the concept of a programming framework",
        "Call out your friends for not knowing the difference between a framework, library, and IDE (they'll love you)",
        "Communicate with others about technology in a way that doesn't immediately give away your inexperience",
        "Impress your friends during drinks with random factoids about Bill Gates & Steve Jobs",
        "Finally understand the reason Comcast keeps billing you $29.99"
      ],
      "course_content": {
        "The basics": [
          "Course Overview",
          "Join our community on Slack!",
          "Why care about computers?",
          "What is a computer?",
          "How does a computer work?",
          "How do computers send & receive information?",
          "Machinespeak & The Matrix",
          "What's an operating system?",
          "Operating systems in the modern era",
          "Desktop software",
          "Quiz",
          "ACTIVITY: Get involved",
          "Review & Recap: Section 1",
          "Review sheets & course activities - all in one PDF"
        ],
        "The Internet": [
          "The history of the internet",
          "The anatomy of the internet",
          "Domain, IP, DNS",
          "How do browsers work?",
          "How does mobile internet work?",
          "The anatomy of a website",
          "The anatomy of a mobile site",
          "OPTIONAL: Let's talk about Netscape",
          "Quiz",
          "Review & Recap: Section 2"
        ],
        "Front, back, & stacks": [
          "What is front-end vs. back-end?",
          "ACTIVITY: Front or Back? Look at job descriptions and see which is which",
          "What do I mean by language?",
          "HTML",
          "ACTIVITY: Let's try out some HTML",
          "CSS",
          "ACTIVITY: Let's try modifying a CSS sheet",
          "JavaScript",
          "ACTIVITY: Let's try Javascript",
          "Let's talk about back-end",
          "Python",
          "PHP",
          "Ruby",
          "What's a tech stack?",
          "Common stacks for web",
          "Quiz",
          "Review & Recap: Section 3"
        ],
        "Core concepts of coding": [
          "Intro to the core concepts of programming",
          "Intro to Sublime",
          "Syntax",
          "Variables",
          "Printing",
          "Commenting",
          "Strings",
          "Arrays",
          "Quiz",
          "Review & Recap: Section 4"
        ],
        "Frameworks & APIs": [
          "What is a framework?",
          "Front-end frameworks",
          "Back-end frameworks",
          "What's an IDE? How is this different?",
          "Libraries",
          "What is an API?",
          "ACTIVITY: Make a mashup",
          "Quiz",
          "Review & Recap: Section 5"
        ],
        "Content management systems": [
          "What is a CMS?",
          "The big three CMS: Wordpress, Drupal, Magento",
          "Let's look at Wordpress",
          "The new guard CMS: WYSIWYG, Squarespace, Weebly, Shopify",
          "Let's look at Shopify",
          "Picking one over the other",
          "ACTIVITY: SquareSpace or WordPress?",
          "Quiz",
          "Review & Recap: Section 6"
        ],
        "Advanced concepts": [
          "GIT",
          "OOP",
          "ACTIVITY: Find examples of software bugs",
          "Continuous integration",
          "Review & Recap: Section 7"
        ],
        "Tech trends": [
          "Full stack JS",
          "Pair programming",
          "Full stack design",
          "Hybrid apps",
          "Responsive design",
          "Saas, Paas, & Iaas",
          "SWIFT",
          "Review & Recap: Section 8"
        ],
        "Choose your path": [
          "Intro to section 9",
          "Web development vs. software engineering vs. hackers vs. full stack design",
          "How do you choose?",
          "How to learn front-end development",
          "How to learn back-end development",
          "PHP, Ruby, Python",
          "Should I specialize in new technologies?",
          "ACTIVITY: Job titles",
          "Extra resources",
          "Review & Recap: Section 9"
        ],
        "Bonus Section": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Access to the internet",
        "A sense of humor"
      ],
      "description": "60%+ of people who try to learn how to program end up quitting.\nWhy?\nIs it because \"programming just isn't for everyone\"?\nOr is it because only those with experience in hard sciences can learn it?\nNo, neither of those are true. It's simply due to the fact that the vast majority of people who try don't have a basic understanding of the technology they're going to use.\nHow exactly can you tackle responsive design if you don't know how a browser works?\nHow are you going to create a desktop application if you don't know what makes your computer freeze constantly (besides porn, obviously)?\nHow are you going to hide your confused facial expression the next time your site's server crashes because of a \"node socket problem\" in your full stack Javascript?\nIf you've ever taken your computer to a technician and said \"Make it work\" or \"It don't work good. Me cry\" then you're exactly who needs this course.\nOver the next 10 years the United States is expected to add over 2 million programming jobs. Jobs that pay well over $100,000 a year. And that's just the United States (Merica').\nSo if you're trying to jump on the coding gravy train, put down your bronze statuette of Elon Musk standing on Mars, and start filling in the gaps in your \"tech literacy\". Even if you yourself do not become a \"coding ninja\" yourself all the future coding ninjas you work with with thank you (and tell you to stop calling them coding ninjas).\nAbout your instructor:\nHi, I'm Evan Kimbrell. I too struggled to learn the basics of programming. If failing to program were a sport, I'd be on the Dream Team.\nToday, I run a web and mobile development agency called Sprintkick and over the last 4 years we've built and managed over 100+ web & mobile applications.\nHow does one so technologically challenged manage to pull this off? Well, first off I would disagree with \"technologically challenged\" (come on) and second it was actually straight forward. I just had to spend a concerted amount of time learning what I needed to know about basic computer, web, and programming technology as well as modern technology trends and advanced concepts.\nThis course is an accelerated path designed to get you to \"I get it\" and finally start communicating correctly & effectively about technology.",
      "target_audience": [
        "Anyone interested in learning how to program that is already struggling or intimidated by the process",
        "Anyone who wants to better communicate with development teams they work with",
        "Anyone who wants to hire, vet, & manage developers more effectively",
        "Anyone who is simply interested in getting an in depth understanding of modern web & mobile technology trends"
      ]
    },
    {
      "title": "Learn To Program with Delphi and Object Pascal",
      "url": "https://www.udemy.com/course/learn-to-program-with-pascal/",
      "bio": "Master Object Pascal programming with Lazarus or Delphi",
      "objectives": [
        "Cross-platform development with Lazarus on Mac, Windows or even Linux",
        "Downloadable source code for Lazarus on Windows and Mac or Delphi on Windows",
        "A 124-page eBook, The Little Book Of Pascal, explains all the topics in depth"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction",
          "The Little Book Of Pascal (eBook)",
          "Source Code Archive",
          "Read Me First!",
          "Installing the software",
          "Your first program: 'Hello world'",
          "Load and run a sample project",
          "A quick tour of a Pascal code file"
        ],
        "Fundamentals of Pascal": [
          "Variables",
          "Constants",
          "Comments"
        ],
        "Procedures and Functions": [
          "Procedures And Functions",
          "Passing arguments by value and by reference",
          "Form Methods",
          "Sample program: calculating interest rates"
        ],
        "Data Types, Operators and Scope": [
          "Data Types",
          "Parameters and type-checking",
          "Arithmetic Operators",
          "Scope"
        ],
        "Loops and Arrays": [
          "'for' Loops",
          "Case Statements",
          "'while' and 'repeat' loops",
          "Arrays"
        ],
        "User-defined Types and File IO": [
          "User-defined types",
          "Records",
          "File IO",
          "Saving and loading text files"
        ],
        "Object Orientation": [
          "Introduction to Object Orientation",
          "Classes and Objects",
          "Saving and Loading Objects"
        ],
        "Class Hierarchies": [
          "How to create a class hierarchy",
          "Forms and controls as Objects",
          "Code completion for classes",
          "Virtual methods",
          "Properties",
          "Getter Properties"
        ],
        "Exception-handling and Debugging": [
          "Exceptions",
          "Error-recovery",
          "Debugging"
        ],
        "Going Further": [
          "Write an adventure game!",
          "Serialization",
          "Additional Resources",
          "Going further...",
          "And finally..."
        ]
      },
      "requirements": [],
      "description": "Simply the fastest way to learn to program Object Pascal – either with the industry-standard Delphi system on Windows or with the multi-platform Lazarus and Free Pascal. Just drag-and-drop, click and code!\nThe knowledge you gain will give to entry to the world of commercial application development using Lazarus or Delphi.\nDelphi has an elegant drag-and-drop IDE with lots of integrated coding and debugging tools. You can download a free copy of Delphi for Windows, or you can use the free, open-source Lazarus IDE for designing and coding languages on Windows, Mac or Linux. Full source code of all the example projects is provided with this course.\n\nWhat you will learn:\nThe fundamentals of programming – from the ground up\nObject orientation – its principles and practice\nThe Object Pascal language – for neat, elegant, maintainable programming\n\nWho should take the course\n\n\nBeginners – if you’ve never coded before, you can learn pascal step by step\nThis Pascal programming tutorial is also feasible for those Programmers who’ve used other languages – Ruby, Python or Java  but want to extend their knowledge? This is for you!\nCross-platform developers – with Lazarus and Free Pascal, write  on one OS, compile on a different one!\nHuw Collingbourne has programmed in Object Pascal since the first release of Delphi in 1995. For over 10 years he was the Delphi programming columnist for PC Plus magazine in the UK. This course gives you in-depth instruction in programming with Delphi and the Object Pascal language.",
      "target_audience": []
    },
    {
      "title": "Learn C++ for Game Development",
      "url": "https://www.udemy.com/course/learn-cpp-for-ue4-unit-1/",
      "bio": "Learn the basics of C++ to prepare you for game development programming!",
      "objectives": [
        "Students will be able to start programming in Unreal Engine with C++ without being intimidated by its advanced techniques.",
        "Students will have a solid understanding of C++ basics.",
        "Students will learn both theory and practice with classroom style whiteboard talks, and lab style hands-on programming sessions."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Input/Output Streams, Variables, Truth Values, Relational Operators": [
          "Joining the Community!",
          "Getting Started - Downloading Visual Studio",
          "Jetbrains Rider is now Free for Non-Commercial Use",
          "Your First Game - \"You Died!\" - Printing Text to the Screen",
          "Variables and Data Types",
          "Statements and Expressions",
          "Truth Values",
          "Relational Operators",
          "If Statement - How to Use the Truth Values with Relational Operators",
          "If Statement - Hands On Programming Lecture",
          "If/Else Statement - Use Else to Provide Code for When the Condition is False",
          "If/Else Statement - Hands On Programming Lecture",
          "Else If - Adding Even More Functionality to your If Statements",
          "Else If - Hands On Practice with Else If Statements"
        ],
        "Scope, Identifiers, Keywords, and Functions": [
          "Scope - What Do Those Curly Braces Do Anyway?",
          "Identifiers - You Can't Name Your Stuff Just Anything!",
          "Keywords - The Forbidden Words You Cannot Use For Your Identifiers",
          "Functions - Create Routines for your Programs",
          "Functions - Hands On Programming Lecture"
        ],
        "Increment Operators, Loops, Overloading, Classes, and Inheritance": [
          "Functions Revisited - More Practice With Functions",
          "Increment Operators - Manipulate Your Numbers with Handy Operators",
          "Increment Operators - Hands On Practice With Computations",
          "While Loops - Let Your Code do the Work For You",
          "While Loops - Hands On Practice",
          "Do While - Another Flavor of the For Loop",
          "For Loops - Looping For A Specified Number of Iterations",
          "For Loops - Hands On Looping Practice",
          "References - Variables Which Are Aliases for Other Variables",
          "References - Hands On Practice with Variable Aliases",
          "Function Overloading - Multiple Versions of a Function",
          "Function Overloading - Get a Load of Function Overloading Hands On!",
          "Strings - How Strings Work in C++",
          "Strings - How to Use Them",
          "Constants - Variables That Can Never Change",
          "AND / OR and Truth Tables - The Tools Of Logic",
          "AND / OR In Practice - Hands On With The Tools Of Logic",
          "Arrays - Multiple Values, One Variable",
          "Arrays - Feel the Power of Arrays in Practice",
          "Enums - Named Constants that Programmers Use for Program States",
          "Enums - Use Enums in Your Code!",
          "Switch Statements - More Efficient than If Statements in Series",
          "Switch Statements - Use Switch Statements to Make Code More Efficient!",
          "Structs - A Custom Data Type With Member Variables and Functions",
          "Structs in Practice - Hands on With Structs",
          "Pointers - Variables that Point to Addresses of Data",
          "Pointers in Practice - Hands on With Pointers",
          "Objects and Classes - The Magic of Object Oriented Programming",
          "Objects and Classes In Practice - Hands-On Class Creation",
          "Constructors - The Function that Gets Called When an Object is Created",
          "Constructing Constructors - Let's Create Our Own Custom Constructors!",
          "Inheritance - How Classes Can Inherit From Other Classes",
          "Inheritance in Practice 1 - Hands On with Inheritance",
          "Inheritance in Practice 2 - Hands On with Inheritance",
          "Inheritance in Practice 3 - Hands On with Inheritance",
          "Access Modifiers - public, private, and protected",
          "Using Access Modifiers - Mark Up Our Classes with Access Modifiers"
        ],
        "Static, Virtual, Dynamic Memory, Destructors, Polymorphism, and Header Files": [
          "Stack and Heap - How Dynamic Memory Works",
          "Stack and Heap - Practice with Dynamic Memory",
          "Destructors - Clean-Up Functions",
          "Destructors - Hands-On Practice Destructing",
          "The Static Keyword - Static Variables",
          "Practice with Static",
          "Virtual Functions - Overriding Inherited Methods (Functions)",
          "Creating Virtual Functions",
          "Polymorphism - The True Power of Object Oriented Programming",
          "Polymorphism - Hands-On Practice with Inheritance Hierarchies",
          "Multiple Inheritance - How A Class Can Inherit From More Than One Parent",
          "Casting - Converting From One Type To Another",
          "Practice With Casting",
          "Header Files - How Large Programs are Organized",
          "Practice with Header Files",
          "Congratulations!"
        ]
      },
      "requirements": [
        "No programming experience necessary. Must have a computer and internet.",
        "Visual Studio Community is used (the free version) and students will not need to purchase any software."
      ],
      "description": "There are many C++ tutorials for Unreal Engine or other game engines out there, but most just assume you have a solid background in C++, or they cover the basics quickly. This is because Unreal Engine C++ is already too complicated to cover learning an entire programming language plus Unreal Engine programming in a single course. This course is designed to teach you C++ from the ground up, starting at absolute beginner level content and working up to advanced level techniques. This course will prepare you for programming video games in Unreal Engine, Cryengine, Lumberyard, or any game engine. Unreal Engine is not used in this course. This is a course on the basics of C++.",
      "target_audience": [
        "Anyone who wishes to program video games in Unreal Engine but does not yet know how to code in C++.",
        "Beginners with no programming experience, or programmers who wish to brush up on the basics of C++.",
        "Those who want to become video game programmers and gain a solid understanding of C++.",
        "Anyone who wishes to learn programming in C++."
      ]
    },
    {
      "title": "Complete JAVASCRIPT with HTML5,CSS3 from zero to Expert-2025",
      "url": "https://www.udemy.com/course/build-responsive-website-using-html5-css3-js-and-bootstrap-p/",
      "bio": "Learn HTML5, CSS3, JavaScript by building a modern looking responsive website.",
      "objectives": [
        "At the end of this course, You will have a great skills set like HTML5, CSS3, JavaScript",
        "You will see, the complete web development process from start to finish project.",
        "You will learn about media queries and will be able to make website perfect for responsive design.",
        "You will learn about web design guidelines which you can apply to real world web projects.",
        "You will be able to build modern looking website which will look great on all the small & wide screens.",
        "You will get complete code for real responsive website"
      ],
      "course_content": {},
      "requirements": [
        "A Text Editor"
      ],
      "description": "Want to learn Web Design & Web Development Skills? Then this is the RIGHT course For you! Many languages came and disappear but JavaScript is language that is enjoying a high run and demand in the programming world. The very first things you need to learn HTML5, CSS3, JavaScript and JQuery to become a Web Developer and off-course some Web Design Guidelines. This course will exactly teach you all these New Skills to become a good Web Developer. In this course, you will also learn Web Design Guidelines, which you can apply to Real World Websites.\n\n\nThis course will first give basic understanding of HTML5, CSS3, JavaScript, JQuery and then by combining all these skills, you will Build a Modern Looking Responsive Website which will look Great on all the Small and Wide Screens.\n\n\nJavaScript is THE most important programming language you need to learn as a web developer - and with this course, you make sure that you will not miss a single thing you have to know as a JavaScript developer!\n\n\nThis is the most comprehensive and modern course you can find on JavaScript - it's based on all my JavaScript knowledge AND teaching experience. It's both a complete guide, starting with the core basics of the language, as well as an extensive reference of the JavaScript language and environment, ensuring that both newcomers as well as experienced JavaScript developers get a lot out of this course!\n\n\nIt's a huge course because it's packed with important knowledge and helpful content. From the core basics, over advanced concepts and JavaScript specialties, all the way up to expert topics like performance optimization and testing - this course has it all. My goal was to create your go-to resource for the JavaScript language, which you can not just use for learning it but also as a resource you can come back to and look up important topics.",
      "target_audience": [
        "This course is for anyone who want to learn web design and web development skills. This course will teach you some web design guideline and you will learn HTML5, CSS3, JS, jQuery & Bootstrap at ground level."
      ]
    },
    {
      "title": "Data Structures A-Z : Data Structures + Algorithms Bootcamp",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-the-complete-guide/",
      "bio": "Become ace in data structures & algorithms & Crack the code interview by getting mastery in data structures & algorithms",
      "objectives": [
        "Understand the coding principles and Understand How to write code in efficient way by help of choosing right data structures and efficient algorithms",
        "How to choose right data structures and right algorithms for your need",
        "Understand concept behind data structures like Arrays, Linked Lists, Hash tables, Trees, Graph, Stacks, Queues, and Sort algorithms and Search algorithms",
        "Understand the fundamentals of the Data structures and Algorithms",
        "Understand popular algorithms, and how to use it when you need.",
        "Learn everything you need to crack difficult coding interviews.",
        "Reason about applicability and usability of Data Structures"
      ],
      "course_content": {},
      "requirements": [
        "A strong work ethic, enthusiasm to learn, and plenty of excitement about the awesome new skill you are going to build.",
        "No experience with data structures or computer science needed!"
      ],
      "description": "Congratulations!  You've found the most popular, most complete, and most up-to-date resource online for learning Data structures and Algorithms.\nDo you want to crack your next coding interview? Do you want to be a master in solving challenging Algorithms?\nAre you interested in the field of Data structures? Are you interested to play around with complex Algorithms?  Then this course is for you!\nYou need to understand algorithms and data structures because I've seen code written by people who didn't understand Data structures and algorithms; and trust me, you don't want to be that guy.\nThe entire course is based around a single goal: Turning you into a professional programmer & capable of writing code as a professional.\nAre you scared about the coding interview? Join me in this Adventure, Crack your coding interview by getting mastery in data structures & algorithms.\nThere are lots of free tutorials and videos on YouTube. Why would you want to take this course? The answer is simple: Quality of teaching. So, from the very beginning to the very end, you'll be confident that you'll be in good hands and watching every minute of the course, unlike reading many free tutorials and videos, do not waste your precious time. Each section is equipped with a balanced mix of theory and Implementation.\nIt's my goal to make clear Data structures and Algorithms as much as possible and ensure your success. I want everyone to benefit from my courses, that's why we'll dive deeply into Data structures and Algorithms concepts and why I made sure to also share the knowledge that's helpful to programmers\nI can promise you that, this is the most comprehensive and modern course you can find on data structures & algorithms on udemy or anywhere else- it's based on all my knowledge And teaching experience. It's both a complete guide, starting with the core basics of the language, as well as an extensive reference of the data structures & algorithms, ensuring that both newcomers, as well as experienced developers, get a lot out of this course! It's my goal to make you clear about the concepts of data structures & algorithms as much as possible. To accomplish this, throughout the course, extensive use of slides and graphics is being utilized in order to aid the understanding and memorability of complex concepts. Moreover, the course is packed with practical exercises that are based on real-life examples. So not only will you learn the theory, but you will also get some hands-on practice building your own project. This course is designed to be fast at getting you started but also get you deep into the \"why\" of things. Simply the fastest and best way to learn the latest skills. Look at the scope of topics in the Session and see the breadth of skills you will learn.\n\n\nWhy it’s the only course you need to learn Data Structures and Algorithms?\nThis course is everything you need from start to end regardless of your experience.\nIt's an interactive course. Instead of explaining the concepts with Powerpoint slides, I will take you to the classroom again.\nThese course videos are designed very carefully to make you more engaging and you won’t get bored while watching the course videos. Unlike other learning videos which you can find on other courses or on YouTube, this course is carefully designed with full of animated content that will make learners grasp the concepts quickly and easily. In this way, you can understand even hard topics/concepts easily.\nWhile you take this course, you will feel the simplicity of learning the language, This is because time spent for preparation for the videos (script for the videos and video structure) and video editing (to cut boring pieces of the lesson or time when the program loads) is huge. And also the structure of the course is created based on beginners in mind. And also this course will be a good reference for those who are already having good knowledge of data structures and algorithms.\nDon’t take my word for it. Check the reviews and see what other students are saying\n★★★★★\nNo Words!! The explanation is very simple and clear, And its perfect combination of theory plus practical on Data structure, And I'm simply amazed by the instructor as they make such a hard topic like Data structure very easy to learn.\nAnd it's crisp and straight to the point and examples are really great and the way in which the presenter describes the topic is also very helpful.\nThanks a lot! - Giada\n★★★★★\nThe Concepts are presented in a simpler & detailed way in a short span of time. This is the best course for learning data structures from scratch. Tree part has the best explanation. Sir, you helped me face my fears regarding data structures & coding & have boosted up my confidence. Sir, please post courses on competitive coding Vinoth Sir cause you are the best. - Divyakanti Batabyal\n★★★★★\nIt's a good experience so far, I'm loving the content! I'll give a full review once I'm done. So far I feel it's a very valuable course. Update: After finishing the course I am very happy with it. This is a wonderful course and Vinoth, you have really done an awesome job. Before this course I really don't have much knowledge of Data Structures, this course is designed, which made me really confident about my learning. Thanks a lot, Vinoth. Keep up the great work! - Gayathri\n★★★★★\nIt is evident that Vinoth has put a lot of thought into planning this course. It is well organized and the topics lead nicely into one another. Moreover, Vinoth's teaching experience helps the complex topics to grasp easily. I am really enjoying the course and think Vinoth's teaching style is stellar - Ravi\n★★★★★\nIn a very simple and clear manner, the trainer is explaining things and giving us chance to think and develop our own logic for implementing data structures. It really makes complex things simple !!! I found the videos and code samples very clear and precise. A very good foundation course on data structure -Abhishek Agarwal\n★★★★★\nthe way of teaching is very good, sir is teaching with real-time examples which helps us to easily understand the topic. Sir made this course very easy for me to understand, such a great teacher - Aditya Bohra\n★★★★★\nThis course is a good match for me, Till start, to end its well-executed, Content and syllabus is good, for me as a beginner is very useful, i learnt lots of thing from this course, Thank you very much for such a wonderful course. thanks - Magnus\n★★★★★\nExplained clearly, This course covers all the basics and beyond. I learnt what I want to learn plus much more. Vinoth explains clearly, I enjoyed the way he taught, very precisely and briefly. Honestly, the course is good for beginners - Noel\n★★★★★\nI found this course is much valuable for me, especially Tree and Graph sections are awesome, Neat presentation, easily understandable course, overall its must have taken the course who what to understand data structures and algorithms from the base. Thanks - Abinav\n★★★★★\nIncredibly comprehensive course! I found this course really well laid out and easy to get to grips with, concepts were introduced in a very logical manner which made it easy to follow. Overall this course matched my expectations and expanding my current knowledge of data structures. Thanks - Trinity\n★★★★★\nSuper Good! The teaching style, content and quality of the course all are excellent. Over this is the perfect material for data structures and algorithms. I will highly recommend this course to my friends. Thanks a lot for such a wonderful course. - Celia\n\n\nWhy you should learn Data Structures and Algorithms:\nIndustry Demand for Data Structures and Algorithms: Top tier tech brands such as Google, Facebook, Microsoft, Youtube, etc. focus more on designing things in the most optimal manner that improves user experience and enhances tracking and managing. These companies ask most of the questions related to Data Structures and Algorithms in interviews to assess a candidate's approach for solving any real-world problem.\nSolve the problem more efficiently: The search engine may provide source code for solving the issue or steps for you to fix the issue. But, the real programmer understands the Application Programming Interface internals including data structure and make the decision.\nImproving problem-solving and analytical skills: Data Structures and Algorithms are not only crucial to land your dream job, but it also helps in improving problem-solving and analytical skills that can prompt you to think out-of-the-box solutions.\nUse the Right tool to solve the problem: The data structure and algorithm provide a set of techniques to the programmer for handling the data efficiently. The programmer should understand the core concepts of data handling the data. Data structure and algorithms help you to decide the right tool for your job\nFurthermore, it will also enable your future endeavours as it is something that will never go out of demand considering the rapid evolution of technologies and an increasing amount of data.\n\n\nHere’s just some of what you’ll learn\n(It’s okay if you don’t understand all this yet, you will in the course)\nThis course is fun and exciting, but at the same time, we dive deep into Data Structures and Algorithms. Specifically, you will learn :\n· Understanding the core principles of coding.\n· Understanding code complexity and how to write code efficiently and various levels of complexity.\n· Basics of Data Structures and algorithms\n· Basic data structures (Arrays, linked list, and Hash Table)\n· Tree data structures\n· Graph data structures\n· Algorithms to apply Graph in product implementation\n· Searching algorithms\n· Various Sorting algorithms\n\n\nFrequently Asked Questions:\nWill I be able to learn Data Structures and Algorithms and find a job after completing this course?\nYES, This course covers all the topics in a very detailed way which you need to know to become a professional Data Structures and Algorithms. However, you will be able to learn Data Structures and Algorithms and be job-ready heavily depends on you once you completed this course.\nIf you merely watch the videos, you will hardly learn anything without trying things on your computer. Instead, try the code on your computer, change the code, run it, improve it further, rerun it, fix the possible errors, try making a similar app, repeat, ask questions in the Q&A when you get stuck, and try to solve all the exercises in the course. That way, you will undoubtedly learn how to use Data Structures and Algorithms and find a job.\nHow much time will I need to complete the course?\nThat depends on how much effort you can put into learning the language. If you dedicatedly follow the course, you can complete the course in 1 week. And If you practice the programs in day to day life, You will be getting familiar with the Data Structures and Algorithms in a very short period.\nI don't know anything about programming. Will I still be able to learn Data Structures and Algorithms?\nAbsolutely YES. This course assumes you have no previous knowledge of any programming.\nDo I need to have any prior knowledge to take this course?\nA big NO. You don’t need any prior knowledge to take this course. I have designed this course which makes it comfortable even for beginners. It starts from the absolute beginner level initially and gradually moving to complex and advanced level topics. And also this course is filled up full of practical and fun examples. You will learn the core skills step by step with hands-on experience. And If you are already comfortable with coding and need to refresher your skill, this course will be suitable for you, too. Every time you come back to this course you will learn something new or improve yourself.\nDoes the course expire?\nNo. Once you buy the course, it's yours. I update the content regularly, and all the updates come to you for free in the one-time purchase you make.\nWill I get support if I get stuck?\nYes. Feel free to drop a question in the Q&A, and I will answer your questions within the same day. I covered almost everything that you need to become expert in Data Structures and Algorithms. if you feel, this course wasn’t complete enough, I offer full support, answering any questions you have 7 days a week.\n\n\nWhat if I have questions?\nAs if this course wasn’t complete enough, I offer full support, answering any questions you have 7 days a week.\n\n\nWhat’s stopping you from signing up today?\nYou don’t have enough time? Not an issue. I’ve designed this course so you can learn everything you need in as little as ONE week.\nYou’re still weighing up the value? Listen. I’ve made this course bigger, better and more affordable—with even more content and more coding tips and best practices —than EVER before. And In this course, I show you how to create all of the code from scratch. You can type the code along with me in the videos, which is the best way to learn. And I am a very responsive instructor and I am available to answer your questions and help you work through any problems.\nYou don’t have any previous experience? Seriously, not a problem. This course is expertly designed to teach everyone from complete beginners, right through to pro developers. (And yes, even pro developers take this course to quickly absorb the latest skills, while refreshing existing ones).\nStraight up: There's no other course that teaches you that, so join thousands of other students who have successfully applied their data structures and algorithms in the real world. Sign up and start learning the expert in data structures and algorithms today!\nSounds great, doesn’t it? Are you ready for a life-changing adventure? If you are serious about your career as a software developer, this is the only Bootcamp you will need. Then don't waste your time with random tutorials or incomplete youtube videos. This course is an easy-to-follow, all-in-one packages that will take your skills to the next level.\nBuy this course today, and you will get all updates for FREE!\nEnroll now and begin your journey towards the most lucrative, adventurous and exciting career path you can imagine! Or, take this course for a free spin using the preview feature, so you know you’re 100% certain this course is for you.\n\n\n100% MONEY-BACK GUARANTEE\nThis course comes with a 30-day full money-back guarantee. Take the course, go through the lectures, do the exercises, and if you're not happy, ask for a refund within 30 days. All your money back every last penny questions asked.\nYou either end up with an expert in Data Structures and algorithms skills, go on to develop great programs and potentially make an awesome career for yourself, or you try the course and simply get all your money back if you don’t like it… (And why not give such a guarantee? I certain this course will provide a ton of value for you)\nYou literally can’t lose.\nSee you on the inside (hurry, Data structures, and algorithm class is waiting!)",
      "target_audience": [
        "Anyone who want to take their programming skills to the next level and learn a future-proof programming",
        "Anyone who want to become intelligent programmer",
        "Anyone who is Feeling scared about coding interview",
        "Anyone who wants to strengthen their problem-solving skills"
      ]
    },
    {
      "title": "PHP Development",
      "url": "https://www.udemy.com/course/calebthevideomaker2-php-development-classes/",
      "bio": "No prerequisite skills, but buckle up and prepare to develop! Covering many aspects of PHP.",
      "objectives": [
        "Introduce the topics of servers and clients",
        "Introduce basic Web Development",
        "Assist viewers in learning all standardized programming concepts and structures. This includes the basics (if statements) as well as more advanced topics.",
        "Begin teaching PHP specific structures and start developing PHP programs",
        "DIVE INTO PHP AND WEB APP DEVELOPMENT!"
      ],
      "course_content": {
        "Web Development Introduction": [
          "Introduction: What is PHP?",
          "Servers, Clients, and How the Internet Works",
          "How does a Local Server Work",
          "Installing Xampp for Local Server PHP Development",
          "What gets sent to the Browser"
        ],
        "Operators and Data Types": [
          "Comments",
          "Variables",
          "Strings",
          "Single Quotes vs Double Quotes",
          "String Concatenation",
          "Arithmetic Operators",
          "Increment Decrement Operators",
          "Assignment Operators",
          "Assigning by Reference",
          "Constants",
          "Unary, Binary and Ternary Operators"
        ],
        "Control flow structures and more operators": [
          "If Conditional",
          "Comparison Operators",
          "Logical Operators",
          "Short Circuiting"
        ],
        "Conclusion": [
          "Elseif Conditional",
          "Switch and Break",
          "While Loop",
          "Do While Loop",
          "For Loop",
          "Introducing Arrays",
          "Introducing Arrays pt2",
          "Creating Arrays",
          "Multidimensional Arrays",
          "Foreach Loop, How to Iterate through all Array values",
          "Creating Indexed and Associative arrays in PHP",
          "Using the array function for Creating Arrays and Multidimensional Arrays in PHP",
          "Using The Foreach loop to use all Array Values in PHP",
          "All Control Flow Structures that we Learned in PHP",
          "Functions",
          "Functions Pt2",
          "Functions Pt3",
          "Include and Require Functions",
          "Absolute vs Relative Paths",
          "Dynamic Page Titles",
          "Variable Scope",
          "Superglobal Arrays",
          "Creating an HTML Form",
          "Creating a Dynamic Header and Footer",
          "Adding New Page Links to our Header File",
          "Introduction to Form Handling",
          "Understanding $_REQUEST Form Handling",
          "isset() and !empty()",
          "How to Check if Submitted Forms have a Value",
          "Creating Our News Letter Form",
          "Checking Our News Letter Form for Values",
          "Dynamic Page for Buy or Girl",
          "Hacking our Webform",
          "$_POST method and Accessing Form Values Directly",
          "Single Page Form Validation Introduction Part 1",
          "Single Page Form Validation Introduction Part 2",
          "Creating Our Single Page Form Validation",
          "Introduction to Sticky Forms",
          "Why I choose to use isset() for Sticky Forms",
          "Overview Text File"
        ]
      },
      "requirements": [
        "XAMPP or any form of web server (Don't worry, I give instructions on how to set this up).",
        "notepad++ (free program)"
      ],
      "description": "This course is offered to allow for download and anytime use as well as for anybody who wishes to support my YouTube channel. This course is still in development and by becoming a student to this course you will receive any future video within this series for FREE! When created, they will be added to this course and you can download them as you please (This does not ensure new content). There is also a lot of content already, which will begin your PHP experience! By enrolling in this course I will know that there is an interest in this material and I will be motivated to create EVEN MORE! Thank you to everyone who contributes!\nAbout this course:\nThis is an introductory course that dives into the basics of many topics in PHP programming, so far including:\nIntroduction\nServers and Clients\nvariables and constants\ndatatypes\nStrings and numbers\narrays\netc...\noperators\ncontrol structures (if, while, for, etc...)\nfunctions\nand many of the great possibilities with PHP!",
      "target_audience": [
        "Beginners",
        "basic web developers",
        "anyone needing a php video reference",
        "anyone who wants to be able to watch these videos anywhere!"
      ]
    },
    {
      "title": "Advanced C Programming: Pointers",
      "url": "https://www.udemy.com/course/advanced-c-programming-pointers/",
      "bio": "Master pointers, addresses and memory allocation in C",
      "objectives": [
        "Pointers and addresses",
        "Indirection and multiple indirection",
        "Generic pointers and casts",
        "Memory allocation and reallocation",
        "Pointer arithmetic",
        "Singly and doubly linked lists",
        "Queues and stacks",
        "Deep and shallow copying",
        "Common pointer errors"
      ],
      "course_content": {},
      "requirements": [
        "You should understand at least the basics of C programming"
      ],
      "description": "To be an expert C programmer you need to master the use of pointers. This course explains pointers in real depth. It explains pointer variables, pointer arithmetic, indirection, memory allocation, how to create and maintain linked lists and how to use function pointers. In fact, by the time you finish this course, you will know pointers inside out. You will understand what they are, how they work and how to make sure that they don’t make your programs crash!\nThis is not a course for beginners. It is aimed at programmers who already have a good working knowledge of C programming and who need to take the next step in mastering C by gaining a deep understanding of pointers.\nIf you’ve struggled with pointers  and can’t quite figure out what all those ‘arrow diagrams’ really mean or what exactly is the relationship between pointers and addresses, this is the course for you. In a series of short, tightly-targeted lessons, you will learn all about:\ncomputer memory and how pointers access it\nhow memory is allocated\nwhy copying data using pointers can cause program errors\nwhy some pointers are ‘generic’\nwhat happens when you ‘cast’ pointers to specific types\nhow to create singly and doubly linked lists\nhow to use stacks and queues\nhow to avoid memory leaks and other common problems\n...and much more.\nThe source code for all the example programs is provided, so if you need to try out my code you can load it and run it in your preferred C IDE or code editor.",
      "target_audience": [
        "Any C programmer who needs to understand pointers in depth"
      ]
    },
    {
      "title": "Gradle Fundamentals",
      "url": "https://www.udemy.com/course/gradle-fundamentals/",
      "bio": "Learn the fundamentals of Gradle",
      "objectives": [
        "Learn and understand the fundamentals of Gradle.",
        "Learn how to setup and use Gradle.",
        "Learn how to build a Java project with Gradle.",
        "How to create Gradle tasks and use Gradle in the cloud.",
        "How to add dependency to a project and create a library module.",
        "Learn about the Gradle project structure."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of Java Programming Language"
      ],
      "description": "Gradle is an extensive build tool and dependency manager for programming projects. Gradle can automate the building, testing, publishing, deployment and more of software packages or other types of projects such as generated static websites, generated documentation or anything else.\nIn this course students will learn the core concepts of Gradle and how to use Gradle to manage building, testing and deploying your Java application.\nWe will first go through some Gradle fundamentals and how to build a Java project with Gradle, add a dependency to a project,  and create a library module. We'll also get into the Gradle project structure, Gradle tasks, Gradle in the cloud, and more.\nStudents will learn by doing, by working through exercises designed to build on the presented material and explore.",
      "target_audience": [
        "Anyone interested in learning Gradle",
        "Java programmers"
      ]
    },
    {
      "title": "Comprehensive Ruby Programming",
      "url": "https://www.udemy.com/course/comprehensive-ruby-programming-tutorial/",
      "bio": "Learn how to program in the Ruby programming language, starting from scratch and moving to advanced coding techniques.",
      "objectives": [
        "Build programs in the Ruby programming language",
        "Know how to work with the Ruby syntax",
        "Create custom algorithms",
        "Work with loops and iterators",
        "Learn object oriented programming",
        "Work with OOP inheritance",
        "Start building real life programs in Ruby"
      ],
      "course_content": {},
      "requirements": [
        "This course starts at the beginning with how to install Ruby and work with it on multiple machines, so simply have a computer that's connected to the Internet and you'll be ready."
      ],
      "description": "Course updated April 2021: Ruby 3 tutorials added along with a deep dive into Ruby modules and a Ruby Gem walk through that shows how to generate QR Codes in Ruby.\nCoding has become one of the most critical skills you can have for furthering your career. Whether you are an experienced developer who wants to learn a new language or you are new to programming, this course can be your comprehensive Ruby coding guide. Starting with the foundational principles such as syntax and scaling up to advanced topics like metaprogramming and big data analysis, I wanted to create a curriculum that will give you all of the tools you need to be a professional Ruby developer. A few of the key topics that you will learn in this course are:\nObject oriented programming\nBuilt in Ruby methods\nCore programming skills\nCustom algorithm development\nBig data analysis\nMetaprogramming\nUsing Ruby Gem libraries\nRegular Expressions\nRuby programming best practices\nAn introduction to the Ruby on Rails and Sinatra web frameworks\nBuilding 10 Ruby programs that solve complex Project Euler mathematical equations\nAnd much more!\nWith over a decade of real world development experience, I have engineered this curriculum to ensure it focuses on the skills you will need to be a professional Ruby developer. Each section has an interactive quiz to ensure you are understanding the material and you also will be given access to the source code for each lesson. After you have completed all of the videos and quizzes you will be given a certificate of completion in Comprehensive Ruby Programming and you will be ready to start building real world Ruby projects. Finally, in addition to the video lectures and quizzes, I will also be your code mentor throughout the course and will walk you through any challenges that you may face.",
      "target_audience": [
        "This is a comprehensive course for learning the Ruby programming language. It's required to have a firm knowledge of Ruby prior to building web applications with frameworks such as Rails and Sinatra and this will give you the tools necessary to become a developer."
      ]
    },
    {
      "title": "Complete UiPath RPA Developer Course: Build 7 Robots",
      "url": "https://www.udemy.com/course/complete-uipath-rpa-developer-course/",
      "bio": "Master Robotic Process Automation (RPA) and UiPath - go from beginner to advanced.",
      "objectives": [
        "Design, develop and deploy state-of-the-art RPA robots.",
        "Automate 7 real-world business processes from scratch.",
        "Master the UiPath Framework and learn RPA best practices.",
        "Analyse and identify processes that are best fit for RPA.",
        "Confidently tackle the UiPath activities that are most commonly used in enterprise solutions."
      ],
      "course_content": {
        "Introduction": [
          "What is RPA?",
          "Get the Robots Here",
          "Join Our Private Facebook RPA Group",
          "The Story of Work by UiPath",
          "Classic Design vs Modern Design",
          "Installing UiPath Studio",
          "Building Your First Robot",
          "RPA process candidate selection",
          "Quick announcement and a favor…",
          "RPA process candidate selection quiz"
        ],
        "Exploring UiPath Studio (Modern Design)": [
          "Installing the Chrome Extension",
          "[Practice Activity] Installing Firefox and Edge Extensions",
          "Activities Panel",
          "Project Panel",
          "Snippets Panel",
          "Properties Panel",
          "Expression Editor",
          "Outline Panel",
          "Variables Panel",
          "Variables Scopes",
          "Arguments Panel",
          "Imports Panel",
          "Output Panel",
          "Panel Mechanics",
          "Running Files in Debug and Run Mode",
          "Copy and Pasting Tips",
          "Designer Panel",
          "Follow Along",
          "Quiz: UiPath Studio Interface"
        ],
        "Robot 1: Clothing Consultant": [
          "[Demo] Clothing Consultant Bot",
          "Download Robot 1 Resources",
          "Creating a New Project",
          "Input Dialog",
          "Opening Google in the Edge Browser",
          "'Use Application/Browser' Activity Properties",
          "Searching Google",
          "Type Into Activity Properties",
          "[Practice Activity] Keyboard Shortcut",
          "Get Text",
          "Fix Conversion Error In Get Text",
          "[Practice Activity] Scraping the Weather",
          "Get Text Properties",
          "Flowcharts",
          "[Practice Activity] Or Condition",
          "Using Flow Decision",
          "Convert String to Integer",
          "Using Boolean Conditions",
          "[Practice Activity] Check If Too Hot",
          "Concatenating Strings",
          "Using the Workflow Analyzer",
          "Quiz: Robot 1",
          "Download Robot 1"
        ],
        "Robot 2: Data Capturing": [
          "[Demo] Robot 2: Data Capturing",
          "Download Robot 2 Resources",
          "Creating a New Project",
          "Download Project Resources",
          "Adding Project Resources",
          "Creating New Workflows",
          "Reading in Customer Data",
          "Signing Up",
          "Opening the Web Application",
          "For Each Row in DataTable",
          "Demonstrating If Activity",
          "Ensuring Best Practice",
          "Type Into",
          "Click Add",
          "[Practice activity] Type Last Name",
          "[Practice Activity] Clicking Radio Buttons",
          "Descriptors Overview",
          "[Practice Activity] Type Into Other Fields",
          "Select Item",
          "How To Speed Up the Bot",
          "Running the Bot Fast",
          "Running the Bot Slowly",
          "[Practice Activity] Read Range",
          "[Practice Activity] Use Desktop Application",
          "While Activity",
          "Getting a Data Item From a Data Table",
          "Typing Into Desktop App",
          "[Practice Activity] Type Last Name",
          "[Practice Activity] If Condition",
          "[Practice Activity] Type Into the Remaining Text Fields",
          "[Practice Activity] Select Item",
          "[Practice Activity] Click 'Save' Button",
          "Running Parallel",
          "Debugging a Bug",
          "Analyze Project",
          "Quiz: Robot 2",
          "Download Robot 2"
        ],
        "Robot 3: The Automation Challenge": [
          "[DEMO] Robot 3: The Automation Challenge",
          "Download Robot 3 Resources",
          "Sequence vs Flowchart",
          "Adding Excel File to Project",
          "Fix problem: Not able to see challenge.xlsx in Project Panel?",
          "[Practice Activity] Read Range With Excel Activities",
          "Output DataTable",
          "Disabling Activities",
          "Maximising the Browser",
          "Zoom to 100%",
          "Refresh Browser",
          "Clicking Start",
          "[Practice Activity] For Each Row and Log Message",
          "Renaming Activities For Best Practice",
          "Using UI Explorer",
          "Changing the Anchor",
          "Testing Recommended Input Mode",
          "[Practice Activity] Click Submit in the Background",
          "Testing",
          "How to Handle Selectors That Don't Work",
          "Fallback Type Into",
          "Try Catch",
          "[Practice Activity] Try Type Sector",
          "[Practice Activity] Type Automation Tool and Test",
          "[Practice Activity] Type Date and Test",
          "[Practice Activity] Type Annual Saving and Test",
          "[Practice Activity] Type Address and Test",
          "Clicking ReCAPTCHA Box",
          "Disable Click Activity If Already Clicked",
          "Speed Optimisations and Final Run",
          "Speed of Selectors and Fallback",
          "Project Analyzer",
          "Get on the Leaderboard",
          "Quiz: Robot 3",
          "Download Robot 3"
        ],
        "Robot 4: Real Estate Web Scraping": [
          "[DEMO] Robot 4: Real Estate Web Scraping",
          "Download Robot 4 Resources",
          "Create a New Process",
          "[Practice Activity] Get User Input",
          "Opening an Incognito Browser",
          "Using Input Modes",
          "Understanding Window Attach Mode",
          "Using Chromium API",
          "Click Using Strict Selector",
          "[Practice Activity] Check Houses Box",
          "Table Extraction",
          "Extract URL",
          "Output Data Table",
          "Filter Data Table",
          "Install Excel Add In",
          "Write Data Table to Excel",
          "Delete Excel Sheet",
          "Insert Column",
          "[Practice Activity] Insert Two More Columns",
          "Write Cell For Each Row in Excel",
          "[Practice Activity] Write Cell",
          "Trim Method",
          "[Practice Activity] Split method",
          "Format Cells",
          "Delete Column",
          "[Practice Activity] Calculate Price Per Sqft",
          "Sort Range",
          "Project Analyzer",
          "Debugging Using Breakpoints",
          "Run the Project",
          "Quiz: Robot 4",
          "Download Robot 4"
        ],
        "Robot 5: PDF Data Scraping": [
          "[Demo] PDF Data Scraping",
          "Download Robot 5 Resources",
          "Creating a New Project",
          "Downloading and Unzipping 1000 PDF invoices",
          "7 Zip",
          "For Each File in Folder",
          "[Practice Activity] Log File Being Processed",
          "Installing Adobe Acrobat DC PDF Reader",
          "Opening and Closing PDF Invoices",
          "[Practice Activity] Zoom PDF",
          "Change Adobe Version",
          "Change Adobe Security Settings",
          "Change Adobe Accessibility Settings",
          "Understanding UI Frameworks",
          "Get text",
          "Using Strict Selectors With Wildcards",
          "Understanding How Descriptors Work in Detail",
          "[Practice Activity] Scrape Date",
          "Custom Date and Time Format Strings",
          "Scraping Methods and Preview Extraction",
          "[Practice Activity] Scrape Company Name",
          "Adding Anchors to Strict Selectors",
          "[Practice Activity] Scrape Total",
          "Exception Handling",
          "[Practice Activity] Download Output Sheet from Google Drive",
          "Update: How to view .xlsx file",
          "Deciding How to Add Data Into Output Sheet",
          "Build Data Table",
          "Add Data Row",
          "Debug Error in Previous Lesson",
          "Append Range",
          "Clear Data Table",
          "[Practice Activity] Output Failed Items",
          "Output Exception Message",
          "Move Successful Invoices",
          "[Practice Activity] Move Failed Invoices",
          "Analyze Project",
          "Download Robot 5"
        ],
        "Robot 6: Optical Character Recognition": [
          "[DEMO] Robot 6: Optical Character Recognition",
          "Download Robot 6 Resources",
          "Creating a New Project",
          "Add Receipts to Project Folder",
          "[Practice Activity] For Each File in Folder",
          "[Practice Activity] Try Catch",
          "The Two OCR Scraping Methods",
          "Why and How to Use OCR?",
          "[Practice Activity] Use Application and Zoom",
          "Get OCR Text",
          "Types of OCR Engines",
          "Read PDF Text with OCR",
          "Optimizing OCR Accuracy",
          "Connecting Google Cloud Vision OCR API",
          "Best Practices for Working with API Keys",
          "Orchestrator Assets",
          "Regular Expressions (RegEx)",
          "[Practice Activity] Assign List Item to Variable",
          "Sanity Check",
          "[Practice Activity] Get Date Using RegEx",
          "Convert US Date String to DateTime",
          "Convert Non-US Date String to DateTime",
          "[Practice Activity] Extract Sale Amount to Double Variable",
          "Summing Sales Amounts",
          "Generating Custom Output Log Reports",
          "Output Unique File Names",
          "[Practice Activity] Project Analyzer",
          "Final Run",
          "Quiz: Robot 6",
          "Download Robot 6"
        ],
        "Robot 7: Email Automation": [
          "[DEMO] Robot 7: Email Automation",
          "Download Robot 7 Resources",
          "Creating a New Project",
          "Install Mail Package",
          "Connect to Your Gmail Account",
          "For Each Email",
          "Send dummy emails",
          "[Practice Activity] Loop Through Dummy Emails",
          "Mark Emails as Read or Unread",
          "[Practice Activity] Mark Emails as Read",
          "Renaming Activities",
          "How to Retrieve the Email Date, Sender and Body",
          "Save Mails",
          "[Practice Activity] Save Emails with Condition",
          "Download Email Attachments",
          "Forward Emails",
          "Delete Email",
          "Move Email",
          "Create List",
          "Append Item To List",
          "Append More Items to List",
          "Convert List to String",
          "Send Email",
          "Create Text File Email Template",
          "Generating Email body",
          "Debugging Email Sending",
          "Project Analyzer",
          "Google Cloud Client ID and Secret",
          "Quiz: Robot 7",
          "Download Robot 7"
        ],
        "UiPath Orchestrator Overview": [
          "Publishing Workflows",
          "Connect Orchestrator Unattended Licence",
          "Update Process and Passing Arguments",
          "Jobs",
          "Triggers",
          "Assets",
          "Queues",
          "Other Orchestrator Features"
        ]
      },
      "requirements": [
        "No previous programming / coding knowledge required.",
        "A Microsoft Windows computer with an internet connection (UiPath has no Mac version).",
        "Have basic-level computer literacy; familiarity with MS Excel, PDFs, notepad, websites and desktop applications."
      ],
      "description": "Welcome to the Complete UiPath RPA Developer Course: Build 7 Robots where you will learn everything you need to know to get started as a Robotic Process Automation (RPA) developer. Learn and master UiPath Studio and then build state-of-the-art software robots from scratch.\nThe best part about this course is that this course is entirely project-based, which means you will be getting hands-on experience and learn the skills you need on how to build real-world software robots in an enterprise setting. So if you're the type of person who 'learns by doing', then this course is for you.\nWe start off by learning what RPA is, how to choose the best processes fit for RPA, installing UiPath onto your machine and then building your first simple robot. We then explore UiPath Studio learning all about the user interface to get a basic understanding on how to use UiPath Studio. Once we cover all the basics we then take a deep dive into building real-world software robots ranging in complexity from beginner to advanced. In this course we build the following robots:\nRobot 1: Clothing Consultant (Beginner)\nA user enters a city name, the robot then scrapes Google for the temperature and weather in that city, the robot then processes the data and makes a decision which will then suggest a clothing type to the user.\nRobot 2: Data Capturing (Beginner)\nA common daily task of a Data Capturer's life is copy-pasting data from an excel spreadsheet into a web or desktop application. This robot fully-automates that task. The robot copy-pastes 100 lines of customer data into their respective input fields of a web application and desktop application. The robot even performs both the web and desktop app data capturing simultaneously. This gets the job done in a fraction of the time that a human could with 100% accuracy.\nRobot 3: The Automation Challenge (Intermediate)\nThis is an RPA challenge which I created to test an RPA Developer's ability to build a robust software robot. The goal of this challenge is to create a workflow that will input data from a spreadsheet into the form fields on the screen. Beware! The fields will change position on the screen after every submission, throughout 10 rounds, thus the workflow must correctly identify where each spreadsheet record must be typed every time.\nRobot 4: Real Estate Web Scraping (Intermediate)\nA user enters a city name, the robot then scrapes thousands of real estate listing data in that city off the web. The data is then exported into a MS Excel spreadsheet, including the prices of the property, number of bedrooms, number of bathrooms and suburb location.\nRobot 5: PDF Invoice Data Scraping (Advanced)\nImagine the job of an admin employee is to copy-paste text from a PDF invoice into an excel spreadsheet and then repeat this task 1000 times for 1000 different invoices. Not only is this job extremely tedious and boring, but a human is very likely to make mistakes along the way. This robot fully-automates that process by looping through every PDF file in a folder, scraping the text and \"pastes\" the text into a spreadsheet. This robot is 8 times faster than a human with a 0% error rate.\nRobot 6: Optical Character Recognition (Advanced)\nWhat happens when the PDF file is a scanned image, such as a printed receipt? How will UiPath read the text? The answer is Optical Character Recognition (OCR) which converts text in image format to actual text. This robot loops through scanned receipt PDFs, scrapes the text and exports it into a text file.\nRobot 7: Email Automation (Advanced)\nIn this robot, you will learn how to integrate your UiPath bot with your Gmail account, and perform all sorts of email operations. Including, reading emails, saving emails, deleting emails, moving emails, and downloading attachments. It then automatically sends an output report email to the developer displaying all logs of what emails have been processed.\nWhy am I qualified to teach you? I am a qualified Industrial and Systems Engineer, experienced RPA developer, Top 10% most engaging instructor on Udemy in 2021 and founder of FutureRPA, a software automation consultancy where we use RPA to streamline our clients' business processes. I've incorporated everything I've learned in my years of engineering and teaching to make this course not only more effective but more engaging. The course includes:\nOver 300 Lectures and 30 hours of on-demand video content.\n7 Real-world projects\n60 Activities\n14 Quizzes.\n7 Assignments.\nAnd the best part… Robots!\nAs an extra, I will give you all 7 Robots we build completely free. You can use these robots as templates and modify them to build your own custom robots.\nIn an effort to continuously improve this course, I will be building new robots and adding more content to this course with time. You will be notified via an educational announcement every time I add new content to the course. Student satisfaction is important to me, so if there is anything specific you want me to teach in this course that you feel that I have not yet covered, please feel free to send me a message and I will add it to the course.\nBy the end of this course, not only will you be comfortable with building your own software robots but it will help you land that high-paying RPA job that you want.",
      "target_audience": [
        "Beginners to UiPath curious about Robotic Process Automation (RPA).",
        "Anyone who wants to land a high-paying RPA developer / architect / analyst job in the near future.",
        "White-collar employees wanting to save time, reduce errors, and improve efficiency by automating common business tasks.",
        "Business leaders who want to automate business processes."
      ]
    },
    {
      "title": "C# Basics for Beginners: Introduction to Programming with C#",
      "url": "https://www.udemy.com/course/c-sharp-introduction/",
      "bio": "Learn C# Fundamentals in 1 Hour and Dive Into the Programming World. C# Programming Basics Explained for Beginners",
      "objectives": [
        "Learn the basics of Programming with C#",
        "Learn the fundamentals of C# and .NET Framework",
        "Work with primitive and non-primitive types",
        "Work with conditional statements",
        "Work with loops",
        "Write clean C# Code",
        "Work with Arrays"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Installing Visual Studio - Your Development Environment": [
          "Install Visual Studio and Create Your First Project"
        ],
        "Learn Programming Fundamentals with C#": [
          "Understand Basic Programming",
          "Understand Variables",
          "Boolean - True or False",
          "Variables - Homework",
          "Variables - Homework Explained",
          "Creating Simple Calculator",
          "Creating Simple Greeting Program",
          "If-else statements - Your First Code Logic",
          "Switch Statements",
          "Conditional - Statements Homework",
          "Conditional Statements - Homework Explained",
          "For Loops",
          "While Loops",
          "Loops - Homework",
          "Loops - Homework Explained",
          "Methods",
          "Methods - Homework",
          "Methods - Homework Explained",
          "Arrays",
          "Arrays - Homework",
          "Arrays - Homework Explained"
        ],
        "Bonus": [
          "Bonus"
        ]
      },
      "requirements": [
        "Desire to learn programming",
        "Students don't need any previous experience, everything in this course will be explained for absolute beginners"
      ],
      "description": "Start Learning C# from Scratch!\nThis course is for beginners or people who want to refresh their knowledge in programming with C#.\nThe course is an Introduction to Programming and It is going to give you an overview of C# Console Application Development.\nC# is very intuitive and easy to learn programming language, which can be used for many different purposes, such as:\nBuilding Web Applications\nGame Development\nMobile Development (iOS and Android mobile applications)\nDesktop Applications\nWindows Client Applications\nWindows Services\nBackend Services\nBlockchains and  Cryptocurrency\nInternet of Things (IoT) devices and much more\nIn the beginning of your C# learning experience, programming will be hard and that's why you should not try to learn everything at once.\nIn this course you will learn basic coding skills with C# and all the information you need to transfer to the IT field.\nAs a complete beginner you need to focus on the Fundamentals and build a solid foundation of your basic programming skills.\nIn this C# course you will get the best step-by-step training with real life coding examples and exercises.\nYou don't need anything to start with the course. We will start from absolute zero.\nFirst - We will Install Visual Studio - this is the environment where we write our code.\nNext - You will understand the basics of programming (doesn't matter the programming language).\nAfter that I will teach you Fundamentals that you need to start with, such as:\nVariables\nMethods/Functions\nNext - We will start writing logic in our code, using:\nConditional Statements\nLoops\nAnd we will finish with more complex programming, introducing you to:\nArrays\n\n\nIf You Are Someone Who:\nWant to Learn Programming with C#\nWant to have Better Career Options\nWant to make More Money at Your Job or as a Freelancer\nWant to achieve Financial Freedom and Enjoy Life\nIs asking yourself \"Is Programming for Me?\"\nEnroll in the Course Today and Get Started!\n\nThis course comes with a 30-day 100% Money Back Guarantee, so if you aren't happy with your purchase, I will refund your course - no questions asked!\nYou will also get:\n- Support and Answers to All Your Questions During the Course\n- Lifetime Access\n- Certificate of Completion\nNow go Ahead and Click the Enroll Button.\nI'll See You in the First Lesson!",
      "target_audience": [
        "Anyone who wants to learn the basics of programming with C#",
        "Beginners with no coding experience who want to see if programming is their thing"
      ]
    },
    {
      "title": "Java Training Complete Course for Java Beginners All in One",
      "url": "https://www.udemy.com/course/java-training-complete-course-2022/",
      "bio": "Learn Java Programming language with Java Complete Training Course for Java Beginners, Java Basics And Advanced Course",
      "objectives": [
        "You will learn how to write a complete Java program that takes user input, processes and outputs the results",
        "You will learn OOPS concepts in Java",
        "You will learn java concepts such as console output, Java Variables and Data Types, Java Operators And more",
        "You will be able to use Java for Selenium in testing and development"
      ],
      "course_content": {
        "Introduction": [
          "Java Hello World Program",
          "Java Arithmetic Operators",
          "Java Unary Operators",
          "Java Bitwise Operators",
          "Java Relational Operators",
          "Java Conditional Operator",
          "Java Input And Output Techniques",
          "Java Strings",
          "Java String Functions",
          "Java String Buffer and String Builder",
          "Java Static Keyword",
          "Java Class And Objects",
          "Java Boolean Datatype",
          "Java Character Type Data",
          "Java This Keyword",
          "Java User Defined Exceptions",
          "Java Switch Case Statement",
          "Java Array",
          "Java Array List",
          "Java Thread Synchronization",
          "Java Vectors",
          "Java Packages",
          "Java Polymorphism Function Overriding",
          "Java Sets.",
          "Java Real Type Data.",
          "Java Stack Class",
          "Java Queue.",
          "Java Programming Abstraction",
          "Java Polymorphism functions overloading",
          "Java Priority queue",
          "Java Inheritance",
          "Java Linked List",
          "Java Interfaces",
          "Java Multithreading by extending thread class",
          "Java Commenting Techniques",
          "Java Hash Map",
          "Java Functions",
          "Java Hash Table",
          "Java Multithreading by runnable interface",
          "Java Final Keyword",
          "Java Comparator To Sort",
          "Java Continue Statement",
          "Java Break Statement",
          "Java For Loop",
          "Java While Loop",
          "Java File Handling",
          "Java Constructor Of A Class",
          "Java Exception Handling",
          "Java Enumeration and iterators",
          "Java Wrapper Classes",
          "Java Access Specifiers",
          "Java Built-In Exceptions",
          "bonus lecture"
        ]
      },
      "requirements": [
        "Basic Understanding of Computers",
        "No prior knowledge of Java, everything will be covered in this course"
      ],
      "description": "Why Learn Java?\nJava is a general-purpose, versatile and popular programming language. It's great as a first language because it is concise and easy to read, and it is also a good language to have in any programmer's stack as it can be used for everything from web development to software development and scientific applications.\nTake-Away Skills:\nThis course is a great introduction to both fundamental programming concepts and the Java programming language. By the end, you'll be comfortable programming in Core Java.\nThis Course is the first of a series of courses that make up the Core Java Specialization. The Core Java Specialization, in turn, is part of a series of programming specializations and designed to provide the skill set necessary to be hired as an IT developer using Java in many corporate environments. This course includes hands-on practice and will give you a solid knowledge of the Java language. After completing this course, you will be able to identify Java’s benefits, program in basic Java syntax using Java data types, and incorporate branches and loops. The audience for this course: - Anyone interested in learning Java - Programmers - Technical Managers - Application Developers\nTopics Covered:\nModule-1: Java Fundamentals\nBasic Java Program\nCompile and run a Java program\nUnderstanding console output\nJava Variables and Data Types\nJava Operators\nConditional statements\nLoops\nBreak and continue\nArrays\nSingle Dimensional array\nDouble Dimensional array\nString Class\nString methods\nModule-2: Java OOPS Concepts\nClasses and Objects\nJava methods\nPassing parameters to the methods\nCall by value and call by reference\nJava Constructor\nMethod Overloading\nConstructor Overloading\nthis keyword\nStatic variables and methods\nJava Inheritance\nMethod Overriding\nsuper keyword\nfinal keyword\nJava Interfaces\nJava Packages\nAccess Modifiers\nException Handling\nArray List\nHash Map\nJDBC\nSee you Inside the course. Thank you",
      "target_audience": [
        "Beginner in Java development",
        "Beginner in software development"
      ]
    },
    {
      "title": "Scrapy: Powerful Web Scraping & Crawling with Python",
      "url": "https://www.udemy.com/course/scrapy-tutorial-web-scraping-with-python/",
      "bio": "Python Scrapy Tutorial - Learn how to scrape websites and build a powerful web crawler using Scrapy, Splash and Python",
      "objectives": [
        "Creating a web crawler in Scrapy",
        "Crawling a single or multiple pages and scrape data",
        "Deploying & Scheduling Spiders to ScrapingHub",
        "Logging into Websites with Scrapy",
        "Running Scrapy as a Standalone Script",
        "Integrating Splash with Scrapy to scrape JavaScript rendered websites",
        "Using Scrapy with Selenium in Special Cases, e.g. to Scrape JavaScript Driven Web Pages",
        "Building Scrapy Advanced Spider",
        "More functions that Scrapy offers after Spider is Done with Scraping",
        "Editing and Using Scrapy Parameters",
        "Exporting data extracted by Scrapy into CSV, Excel, XML, or JSON files",
        "Storing data extracted by Scrapy into MySQL and MongoDB databases",
        "Several real-life web scraping projects, including Craigslist, LinkedIn and many others",
        "Python source code for all exercises in this Scrapy tutorial can be downloaded",
        "Q&A board to send your questions and get them answered quickly"
      ],
      "course_content": {
        "Scrapy vs. Other Python Web Scraping Frameworks": [
          "Scrapy vs. Beautiful Soup vs. Selenium",
          "Course Tips (Must Read)"
        ],
        "Scrapy Installation": [
          "Linux Scrapy Installation",
          "Mac Scrapy Installation",
          "Windows Scrapy Installation",
          "Scrapy Installation Instructions",
          "Python Editor: Sublime Text"
        ],
        "Building Basic Spider with Scrapy": [
          "Scrapy Simple Spider - Part 1",
          "Scrapy Simple Spider - Part 2",
          "Scrapy Simple Spider - Part 3"
        ],
        "XPath Syntax": [
          "Using XPath with Scrapy",
          "Tools to Easily Get XPath"
        ],
        "Q&A": [
          "Scrapy Basics",
          "Do you have questions so far?",
          "XPath Syntax"
        ],
        "Building More Advanced Spider with Scrapy": [
          "Scrapy Advanced Spider - Part 1",
          "Scrapy Advanced Spider - Part 2",
          "Scrapy Advanced Spider - Part 3",
          "Scrapy Advanced Spider - Part 4",
          "Scrapy Architecture"
        ],
        "Web Scraping Best Practices": [
          "Avoid Getting Banned!"
        ],
        "Deploying & Scheduling Scrapy Spider on ScrapingHub": [
          "ScrapingHub: Deploying & Scheduling Scrapy Spiders (UPDATED)"
        ],
        "Logging into Websites Using Scrapy": [
          "Logging into Websites Using Scrapy"
        ],
        "Scrapy as a Standalone Script (UPDATED)": [
          "Scrapy as a Standalone Script (UPDATED)"
        ]
      },
      "requirements": [
        "Python Level: Intermediate. This Scrapy tutorial assumes that you already know the basics of writing simple Python programs and that you are generally familiar with Python's core features (data structures, file handling, functions, classes, modules, common libraries, etc.).",
        "Python 2.7+ or Python 3.3+",
        "Any operating system (Linux, Mac, Windows) is good.",
        "Positiveness and willingness to learn new things and to ask questions (if any) at the Q&A board of the course.",
        "If you do not know what Scrapy is or why you should use it, please read the course description and watch the preview lectures BEFORE joining the course."
      ],
      "description": "Why this course?\nJoin the most popular course on Web Scraping  with Scrapy, Selenium and Splash.\nLearn from the a professional instructor, Lazar Telebak, full-time Web Scraping Consultant.\nApply real-world examples and practical projects of Web Scraping popular websites.\nGet the most up-to-date course and the only course with 10+ hours of playable content.\nEmpower your knowledge with an active Q&A board to answer all your questions.\n30 days money-back guarantee.\n\n\nScrapy is a free and open source web crawling framework, written in Python. Scrapy is useful for web scraping and extracting structured data which can be used for a wide range of useful applications, like data mining, information processing or historical archival. This Python Scrapy tutorial covers the fundamentals of Scrapy.\nWeb scraping is a technique for gathering data or information on web pages. You could revisit your favorite web site every time it updates for new information, or you could write a web scraper to have it do it for you!\nWeb crawling is usually the very first step of data research. Whether you are looking to obtain data from a website, track changes on the internet, or use a website API, web crawlers are a great way to get the data you need.\nA web crawler, also known as web spider, is an application able to scan the World Wide Web and extract information in an automatic manner. While they have many components, web crawlers fundamentally use a simple process: download the raw data, process and extract it, and, if desired, store the data in a file or database. There are many ways to do this, and many languages you can build your web crawler or spider in.\nBefore Scrapy, developers have relied upon various software packages for this job using Python such as urllib2 and BeautifulSoup which are widely used. Scrapy is a new Python package that aims at easy, fast, and automated web crawling, which recently gained much popularity.\nScrapy is now widely requested by many employers, for both freelancing and in-house jobs, and that was one important reason for creating this Python Scrapy course, and that was one important reason for creating this Python Scrapy tutorial to help you enhance your skills and earn more income.\nIn this Scrapy tutorial, you will learn how to install Scrapy. You will also build a basic and advanced spider, and finally learn more about Scrapy architecture. Then you are going to learn about deploying spiders, logging into the websites with Scrapy. We will build a generic web crawler with Scrapy, and we will also integrate Splash and Selenium to work with Scrapy to iterate our pages. We will build an advanced spider with option to iterate our pages with Scrapy, and we will close it out using Close function with Scrapy, and then discuss Scrapy arguments. Finally, in this course, you will learn how to save the output to databases, MySQL and MongoDB. There is a dedicated section for diverse web scraping solved exercises... and updating.\nOne of the main advantages of Scrapy is that it is built on top of Twisted, an asynchronous networking framework. \"Asynchronous\" means that you do not have to wait for a request to finish before making another one; you can even achieve that with a high level of performance. Being implemented using a non-blocking (aka asynchronous) code for concurrency, Scrapy is really efficient.\nIt is worth noting that Scrapy tries not only to solve the content extraction (called scraping), but also the navigation to the relevant pages for the extraction (called crawling). To achieve that, a core concept in the framework is the Spider -- in practice, a Python object with a few special features, for which you write the code and the framework is responsible for triggering it.\nScrapy provides many of the functions required for downloading websites and other content on the internet, making the development process quicker and less programming-intensive. This Python Scrapy tutorial will teach you how to use Scrapy to build web crawlers and web spiders.\nScrapy is the most popular tool for web scraping and crawling written in Python. It is simple and powerful, with lots of features and possible extensions.\n\n\nPython Scrapy Tutorial Topics:\n\nThis Scrapy course starts by covering the fundamentals of using Scrapy, and then concentrates on Scrapy advanced features of creating and automating web crawlers. The main topics of this Python Scrapy tutorial are as follows:\nWhat Scrapy is, the differences between Scrapy and other Python-based web scraping libraries such as BeautifulSoup, LXML, Requests, and Selenium, and when it is better to use Scrapy.\nThis tutorial starts by how to create a Scrapy project and and then build a basic Spider to scrape data from a website.\nExploring XPath commands and how to use it with Scrapy to extract data.\nBuilding a more advanced Scrapy spider to iterate multiple pages of a website and scrape data from each page.\nScrapy Architecture: the overall layout of a Scrapy project; what each field represents and how you can use them in your spider code.\nWeb Scraping best practices to avoid getting banned by the websites you are scraping.\nIn this Scrapy tutorial, you will also learn how to deploy a Scrapy web crawler to the Scrapy Cloud platform easily. Scrapy Cloud is a platform from Scrapinghub to run, automate, and manage your web crawlers in the cloud, without the need to set up your own servers.\nThis Scrapy tutorial also covers how to use Scrapy for web scraping authenticated (logged in) user sessions, i.e. on websites that require a username and password before displaying data.\nThis course concentrates mainly on how to create an advanced web crawler with Scrapy. We will cover using Scrapy CrawlSpider which is the most commonly used spider for crawling regular websites, as it provides a convenient mechanism for following links by defining a set of rules. We will also use Link Extractor object which defines how links will be extracted from each crawled page; it allows us to grab all the links on a page, no matter how many of them there are.\nFurthermore there is a complete section in this Scrapy tutorial to show you how to combine Splash or Selenium with Scrapy to create web crawlers of dynamic web pages. When you cannot fetch data directly from the source, but you need to load the page, fill in a form, click somewhere, scroll down and so on, namely if you are trying to scrape data from a website that has a lot of AJAX calls and JavaScript execution to render webpages, it is good to use Splash or Selenium along with Scrapy.\nWe will also discuss more functions that Scrapy offers after the spider is done with web scraping, and how to edit and use Scrapy parameters.\nAs the main purpose of web scraping is to extract data, you will learn how to write the output to CSV, JSON, and XML files.\nFinally, you will learn how to store the data extracted by Scrapy into MySQL and MongoDB databases.",
      "target_audience": [
        "This Scrapy tutorial is meant for those who are familiar with Python and want to learn how to create an efficient web crawler and scraper to navigate through websites and scrape content from pages that contain useful information.",
        "NEW Update: This Scrapy course now includes a dedicated section about Splash and how to use it with Scrapy to extract data from JavaScript websites."
      ]
    },
    {
      "title": "Python 3 Programming: Beginner to Pro Masterclass",
      "url": "https://www.udemy.com/course/python-3-beginner-to-pro/",
      "bio": "Learn Python 3 with more than 100 Practical Exercises and 20 Hands-on Practical Projects",
      "objectives": [
        "DIVE INTO PYTHON WORLD WITH PYTHON FUNDAMENTALS:",
        "Variables and data types & Comparison operators",
        "Logical Operators & Conditional statements (If-else)",
        "For and while loops & Functions",
        "Lists and list comprehensions",
        "Dictionaries and dictionaries comprehensions",
        "Lambdas and built-in functions & Modules & Maps and Filters",
        "Processing csv files & Methods & Matplotlib",
        "Pandas & Numpy & Seaborn",
        "Use OpenCV applied on Video Stream to Draw Yourself"
      ],
      "course_content": {
        "*******BEGINNER PYTHON FUNDAMENTALS - PART A *********": [
          "Introduction and Welcome Message",
          "Get the Materials",
          "Environment Setup",
          "EXTRA: Learning Paths",
          "Updates on Udemy Reviews",
          "Environment Setup",
          "Basic Mathematical Operations",
          "Precedence - order of operation",
          "Variable Assignment",
          "Math operations, precedence, variables assignment Exercises Questions",
          "Math operations, precedence, variables assignment Exercises Solutions 1",
          "Math operations, precedence, variables assignment Exercises Solutions 2",
          "Print Operation",
          "Get User Input",
          "Print and Get User input Exercises Questions",
          "Print and Get User input Exercises Solutions Part 1",
          "Print and Get User input Exercises Solutions Part 2",
          "Strings Concept",
          "Strings Exercises Questions",
          "Strings Exercises Solutions Part 1",
          "Strings Exercises Solutions Part 2",
          "Lists Concept",
          "Lists Exercises Questions",
          "Lists Exercises Solutions Part 1",
          "Lists Exercises Solutions Part 2",
          "Dictionaries and Booleans Concept",
          "Dictionaries and Booleans Exercises Questions",
          "Dictionaries and Booleans Exercises Solutions Part 1",
          "Dictionaries and Booleans Exercises Solutions Part 2",
          "Dictionaries and Booleans Exercises Solutions Part 3",
          "Tuples and Sets Concept",
          "Tuples and Sets Exercises Questions",
          "Tuples and Sets Exercises Solutions"
        ],
        "*******BEGINNER PYTHON FUNDAMENTALS - PART B *********": [
          "Comparison Operators - Concept",
          "Logical Operators - Concept",
          "Conditional Statements - Concept",
          "Conditional Statements, logical and Comparison Operators - Exercises Overview",
          "Conditional Statements, logical and Comparison Operators - Exercises Solutions#1",
          "Conditional Statements, logical and Comparison Operators - Exercises Solutions#2",
          "Conditional Statements, logical and Comparison Operators - Exercises Solutions#3",
          "Conditional Statements, logical and Comparison Operators - Exercises Solutions#4",
          "Loops - For Loops Concept",
          "Loops - enumerate",
          "Loops - range",
          "Loops - Break and Continue",
          "Loops - Nested Loops",
          "Loops - List Comprehension",
          "Loops - While Loops",
          "Loops - Exercises Questions Overview",
          "Loops - Exercises Solutions part #1",
          "Loops - Exercises Solutions part #2",
          "Loops - Exercises Solutions part #3",
          "Loops - Exercises Solutions part #4",
          "Loops - Exercises Solutions part #5",
          "Functions - Concept",
          "Functions - Built in functions",
          "Functions - lambda Expressions",
          "Functions - Map",
          "Functions - Filter",
          "Functions - Exercises Questions Overview",
          "Functions - Exercises Solutions Part #1",
          "Functions - Exercises Solutions Part #2",
          "Functions - Exercises Solutions Part #3",
          "Functions - Exercises Solutions Part #4",
          "Files - Concept Part 1",
          "Files - Concept Part 2",
          "Files - Concept Part 3",
          "Files - Exercises Questions Overview",
          "Files - Exercises Solutions Part #1",
          "Files - Exercises Solutions Part #2",
          "Files - Exercises Solutions Part #3"
        ],
        "*******BEGINNER PYTHON FUNDAMENTALS - Part C *******": [
          "Numpy Basics - Part 1",
          "Numpy Basics - Part 2",
          "Pandas - Part 1",
          "Pandas - Part 2",
          "Matplotlib - Part 1",
          "Matplotlib - Part 2",
          "Matplotlib - Part 3",
          "Seaborn"
        ],
        "*******PRACTICAL PROJECTS IN PYTHON *******": [
          "Project #1 - Build a Guessing Game",
          "Project #2 - Draw Cartoon of Images Using OpenCV - Part A",
          "Project #2 - Draw Cartoon of Images Using OpenCV - Part B",
          "Project #3 - Build a Fortune Teller Game",
          "Project #4 - Detect Lane Lines for Self-driving Cars - Part A",
          "Project #4 - Detect Lane Lines for Self-driving Cars - Part B",
          "Project #5 - Build your Zodiac Sign Application",
          "Project #6 - Build a Tic-Tac-Toe Game",
          "Project #7 - Draw a Sketch of your Face Using the WebCam",
          "Project #8 - Amazon Alexa Reviews Analysis - Part 1 - Project Overview",
          "Project #8 - Amazon Alexa Reviews Analysis - Part 2 - Importing data",
          "Project #8 - Amazon Alexa Reviews Analysis - Part 3 - Data Visualization",
          "Project #8 - Amazon Alexa Reviews Analysis - Part 4 - Word Cloud",
          "Project #8 - Amazon Alexa Reviews Analysis - Part 5 - Feature Engineering",
          "Project #9 - Build a Daily Planner - Part #1",
          "Project #9 - Build a Daily Planner - Part #2",
          "Project #9 - Build a Daily Planner - Part #3",
          "Project #10 - Predict Future Avocado Prices Using Facebook Prophet - Part 1",
          "Project #10 - Predict Future Avocado Prices Using Facebook Prophet - Part 2",
          "Project #10 - Predict Future Avocado Prices Using Facebook Prophet - Part 3",
          "Project #10 - Predict Future Avocado Prices Using Facebook Prophet - Part 4",
          "Project #10 - Predict Future Avocado Prices Using Facebook Prophet - Part 5",
          "Project #11 - Manipulate PDF Files - Part 1",
          "Project #11 - Manipulate PDF Files - Part 2",
          "Project #11 - Manipulate PDF Files - Part 3",
          "Project #11 - Manipulate PDF Files - Part 4",
          "Project #11 - Manipulate PDF Files - Part 5",
          "Project #12 - Detect Faces and Eyes in Images! Part 1",
          "Project #12 - Detect Faces and Eyes in Images! Part 2",
          "Project #12 - Detect Faces and Eyes in Images! Part 3",
          "Project #12 - Detect Faces and Eyes in Images! Part 4"
        ],
        "****** MACHINE LEARNING IN PYTHON ********": [
          "Download Machine Learning Course Package",
          "Introduction to Artificial Intelligence and Machine Learning",
          "Supervised, Unsupervised, and Reinforcement Learning",
          "Deep Learning and Big Picture",
          "Case Study 1 - Introduction to Linear Regression",
          "Case Study 1 - Least Sum of Squares",
          "Case Study 1 - Problem Statement and Data Importing",
          "Case Study 1 - Data Visualization and Data Splitting",
          "Case Study 1 - Model Training",
          "Case Study 1 - Model Testing and Evaluation",
          "Case Study 2 - Business Case and Problem Statement",
          "Case Study 2 - Problem in Machine Learning Vocabulary",
          "Case Study 2 - Data Visualization",
          "Case Study 2 - Model Training",
          "Case Study 2 - Model Evaluation",
          "Case Study 2 - Improving the Model",
          "Case Study 2 - Conclusion",
          "Case Study 3 - Introduction",
          "Case Study 3 - Artificial Neural Networks Basics",
          "Case Study 3 - Convolution Neural Network (CNN) Overview",
          "Case study 3 - Convolution Operation in Action!",
          "Case Study 3 - Rectified Linear Units (RELU)",
          "Case Study 3 - Max Pooling and Down-sampling",
          "Case Study 3 - Regularization and Dropouts",
          "Case Study 3 - Coding Part 1 - Problem Statement and Data Import",
          "Case Study 3 - Data Visualization",
          "Case Study 3 - CNN Model Building",
          "Case Study 3 - CNN Model Training",
          "Case Study 3 - CNN Model Evaluation Part 1",
          "Case Study 3 - CNN Model Evaluation Part 2"
        ],
        "Congratulations!! Don't forget your Prize :)": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Access to a computer with an internet connection.",
        "Computer. Mac OS, Windows or Linux.",
        "No previous experience with Python or coding is required."
      ],
      "description": "We are on a mission to create the most complete Python programming guide in the World.\nFrom Python basics to techniques used by pros, this masterclass provides you with everything you need to start building and applying Python.\n“Python Beginner to Pro Masterclass” is our flagship Python course that delivers unique learning with 3 immersive courses packed into 1 easy-to-learn package:\nFirst, prepare yourself by learning the basics and perfect your knowledge of the language with a beginner to pro Python programming course.\nNext, build on your knowledge with a practical, applied and hands-on Python course with over 20 real-world applications problems and 100 coding exercises to help you learn in a practical, easy and fun way. These will be invaluable projects to showcase during future job interviews!\nFinally, push your boundaries with a data science and machine-learning course covering practical machine learning applications using Python. Dive into real-life situations and solve real-world challenges.\n\n\nSo, why is Python the golden programming language these days? And what makes it the best language to learn today?\nPython ranks as the number one programming language in 2018 for five simple reasons that are bound to change the shape of your life and career:\n(1)   Easy to learn: Python is the easiest programming language to learn. In fact, at the end of this single course, you’ll be able to master Python and its applications regardless of your previous experience with programming.\n(2)   High Salary: Did you know that the average Python programmer in the U.S. makes approximately $116 thousand dollars a year? With “Python 3 Beginning to Pro Masterclass” you’re setting yourself for up for increased earning potential that can only rise from here.\n(3)   Scalability: It’s true, Python is easy to learn. But it’s also an extremely powerful language that can help you create top-tier apps. In fact, Google, Instagram, YouTube, and Spotify are all built using Python.\n(4)   Versatility: What’s more, Python is by far the most versatile programming language in the world today! From web development to data science, machine learning, computer vision, data analysis and visualization, scripting, gaming, and more, Python has the potential to deliver growth to any industry.\n(5)   Future-proof Career:  The high demand and low supply of Python developers make it the ideal programming language to learn today. Whether you’re eyeing a career in machine learning or artificial intelligence, learning Python is an invaluable investment in your career.",
      "target_audience": [
        "Anyone who wants to learn Python.",
        "Beginners who have just started to learn Python",
        "Professionals who want to learn Python through Real World Applications",
        "Professionals who want to obtain particular skill, such as Web Scraping, Working With Databases, Build Websites, etc"
      ]
    },
    {
      "title": "Databricks SQL for Data Analysts",
      "url": "https://www.udemy.com/course/databricks-sql-for-data-analysts/",
      "bio": "Your Hands-On Guide to Data Analysis with Databricks. Master Azure Databricks SQL and Unity Catalog.",
      "objectives": [
        "Azure Databricks",
        "SQL",
        "Delta Lake",
        "Unity Catalog",
        "Data Visualization",
        "Data Analysis",
        "Big Data"
      ],
      "course_content": {
        "Set Up and Overview of Databricks": [
          "Course Overview",
          "Introduction to Big Data (Optional)",
          "Apache Spark Ecosystem (Optional)",
          "Overview of Databricks",
          "Azure Account Set Up",
          "Azure Portal Overview",
          "Cost Management and Billing",
          "Important Databricks Access Issue: Solution for Azure Personal Domains",
          "Creating a Databricks Premium Workspace",
          "Databricks Workspace User Interface",
          "Unity Catalog Overview",
          "Enabling Unity Catalog - Overview",
          "ADLS Overview and Storage Creation",
          "Access Connector for Databricks",
          "Global Administrator Pre-requisite Check",
          "Enabling Unity Catalog",
          "Creating a SQL Warehouse"
        ],
        "Introduction to Queries": [
          "Your First Query",
          "Switching Catalogs and Schemas",
          "Scheduling Queries",
          "Adding Comments to Queries",
          "Course Resources - SQL Code Download"
        ],
        "Catalogs, Schemas, Tables and Views": [
          "Creating Catalogs",
          "Creating Schemas",
          "Data Types in Databricks SQL",
          "Overview of Tables in Databricks",
          "Creating Managed Tables with SQL",
          "Creating Managed Tables in Hive Metastore",
          "Creating Managed Tables using the Data Explorer",
          "Creating an External Storage Location",
          "Creating External Tables",
          "Overriding Unity Catalog’s Default Managed Table Storage Location",
          "Truncate Table",
          "Alter Table",
          "Drop Tables, Schemas and Catalogs"
        ],
        "Data Analysis with SQL": [
          "Select Statement Recap",
          "Select Distinct",
          "Note on the JC_BIKE_DATA_22 Table",
          "Filtering Records with the WHERE Clause",
          "Filtering Records Based on Multiple Conditions",
          "Filtering Records with the IN and LIKE Operators",
          "Deleting Records",
          "Databricks SQL Built In Functions Overview",
          "String Functions",
          "Numerical Functions",
          "Date and Timestamp Functions",
          "Converting Strings to Dates/Timestamps",
          "Conditional Functions",
          "Aggregate Functions",
          "Group By Clause",
          "Filtering Aggregated Tables with the Having Clause",
          "Joining Tables Overview",
          "Joining Tables Demo",
          "Order By and Limit Clauses",
          "SQL Order of Execution",
          "Subqueries",
          "Views",
          "Set Operators",
          "SQL Challenge 1",
          "SQL Challenge 2",
          "SQL Challenge 3",
          "SQL Challenge 4",
          "SQL Challenge 5",
          "Schema Clean Up"
        ],
        "Delta Lake": [
          "Medallion Architecture and Last Mile ETL",
          "Medallion Architecture Demo",
          "Benefits of Delta File Format",
          "Upsert / Merge Into",
          "Table Audit History and Time Travel"
        ],
        "Query Alerts and Monitoring": [
          "Query History and Profile",
          "Query Caching in Databricks SQL",
          "Query Alerts"
        ],
        "Visualizations and Dashboards in Databricks SQL": [
          "Visualizations and Dashboards Overview",
          "Our First Chart in Databricks SQL",
          "Line and Area Charts",
          "Combo Chart",
          "Pie Chart",
          "Scatter and Bubble Plots",
          "Histograms",
          "Box Plots",
          "Heatmaps",
          "Sankey Charts",
          "Tables",
          "Pivot Tables",
          "Counters",
          "Additional Guidance on Charts in Databricks SQL",
          "Exploratory Data Analysis Challenge",
          "Adding Missing Data to the JC_BIKE_DATA_22 Table",
          "Creating a View to Simplify Upcoming Demos",
          "Query Filters",
          "Query Parameters",
          "Query Parameters (Dates)",
          "Dashboards in Databricks",
          "Introduction to Dashboards",
          "Creating a Dataset Using SQL",
          "Adding Parameters to Dashboards",
          "Adding Filters to Dashboards",
          "Text Boxes",
          "Seasonal Analysis by Rider Type Challenge",
          "Legacy Dashboards",
          "Legacy - Introduction to Dashboards",
          "Legacy - Adding Parameters to Dashboards",
          "Legacy - Adding Filters to Dashboards",
          "Legacy - Trip Duration Analysis Challenge",
          "Legacy - Rider Type Analysis Challenge"
        ],
        "Access Control, Data Governance and Unity Catalog": [
          "Administrative Roles in Databricks",
          "Adding a New User to our Azure Account",
          "Adding a New User to our Databricks Environment",
          "Workspace Admin Settings",
          "Workspace Object Access Control",
          "SQL Warehouse Access Control",
          "Folder Access Control",
          "Query Access Control",
          "Dashboard Access Control",
          "Workspace Object Access Control - Summary",
          "Unity Catalog Securable Objects and Privileges",
          "Granting and Revoking Privileges with SQL (Unity Catalog)",
          "Granting and Revoking Privileges via the Data Explorer (Unity Catalog)",
          "Redacting Data with Dynamic Views (PII)",
          "Data Discovery",
          "Data Lineage",
          "Delta Sharing Overview",
          "Databricks to Databricks Delta Sharing",
          "Open Delta Sharing"
        ],
        "Congratulations on completing the course!": [
          "Congratulations",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No prior experience needed",
        "Azure Account (set up instructions provided)"
      ],
      "description": "Databricks is one of the most in demand big data tools around. More than 9,000 organizations worldwide — including and over 40% of the Fortune 500 — rely on the Databricks Lakehouse Platform.\n\n\nWe will be focussing specifically on the Databricks SQL Platform.\n\n\nDatabricks SQL is a powerful tool used for querying and analyzing large datasets, making it highly relevant in today's data-driven world. Learning this skill can enhance your employability and career prospects.\n\n\nThis course can be taken by experienced data analysts who are interested in learning about Databricks or even aspiring Data Analysis with no prior experience. I will teach you everything you need to know including how to code in SQL!\n\n\nIt can also be taken as a guide for students who are aiming to achieve the Databricks Data Analyst Certification.\n\n\nThe course is packed with lectures and hands-on development. This should be more than enough to keep you engaged and learning!\n\n\nThe course is aimed at teaching you Data Analysis on Databricks, Unity Catalog and the Databricks Lakehouse Architecture.\n\n\nThe curriculum is extensive and will cover a variety of areas including:\nSet Up and Overview\nDatabricks Queries\nStoring and Managing Data with Databricks\nExternal and Managed Tables\nData Analysis with SQL\nData Lakehouse Architecture\nDelta File Format\nData Visualization and Dashboards\nAccess Control and Data Governance\nUnity Catalog",
      "target_audience": [
        "Anyone wanting to learn Databricks SQL",
        "Students studying for the Databricks Data Analyst Certification",
        "Aspiring Cloud Data Analysts"
      ]
    },
    {
      "title": "Java Spring Tutorial Masterclass - Learn Spring Framework 5",
      "url": "https://www.udemy.com/course/java-spring-framework-masterclass/",
      "bio": "Can't Find a good Spring Tutorial? Finally Understand Spring 5 With Spring Core, Spring MVC, Spring Boot 2 and more",
      "objectives": [
        "Be able to apply in confidence for Spring developer jobs.",
        "Master the core skills needed to become a Spring Framework developer.",
        "Obtain the skills to create your own Spring 5 projects.",
        "Confidently be able to transition to other Java EE technologies.",
        "Learn industry \"Best Practices\" for Spring 5 development from professional developers.",
        "Have the ability to demonstrate your knowledge of Spring Framework development.",
        "Understand core technologies like Spring Core, Spring MVC, and other technologies.",
        "Know how Spring fits in the Java Enterprise Edition (Java EE) space."
      ],
      "course_content": {},
      "requirements": [
        "You’ve either already got it or it’s FREE. Here’s the checklist:",
        "A computer - Windows, Mac, and Linux are all supported. Setup and installation instructions are included for each platform.",
        "Your ENTHUSIASM to learn the worlds #1 web framework, and then to showcase it on your RESUME!",
        "Everything else needed to start programming in the Spring Framework is already included in the course."
      ],
      "description": "There is no doubt that having Spring Framework skills on your résumé will make you a more employable Java developer.\n\nSpring developers are in high demand and are paid handsomely.  However, the framework is huge.  That’s because it consists of lots of modules and projects.  Learning it can take you months.  You will often find that a Java Spring tutorial or training course will focus on parts of the framework that don’t get used that much.\n\nWhat Spring technologies should you focus on initially?\n\nMany Java spring courses teach you all sorts of things you really don’t need to know when you are starting out.\n\nIf you are just starting out with Spring, the areas that will have the biggest impact for you are Spring Core, Spring MVC and Spring Boot 2.\n\nSpring Core is an application framework and inversion of control (ioc) container for the java platform.\n\nSpring MVC, or Spring Web MVC to be more precise is a web framework and provides Model View Controller architecture. It’s built around a DispatcherServlet.\nSpring Boot 2.0 is a way to create standalone Spring based Applications that you can just run – so it simplifies the entire process of creating and deploying Spring apps – It can embed databases and do all sorts of configuration automatically.\n\nThese three areas are a great place to start – just having these skills will take you a long way.  Of course, there is more to learn, but these are the areas to focus on initially.\n\nWhy this course is perfect if you want to learn Spring 5 fast.\n\nFirstly, here are some comments about the course.\n\"Great and deep understanding of Spring in this course. Perfect speed, new technologies, and explanation of every detail. \" - Arkadiusz Siry\n\"Amazing.Very good instructions\" - Emmanuel Akono Sarsah\n\nCheck the reviews for more - This is one of the highest rated Spring courses on Udemy.\n\nA Java Spring tutorial needs to teach you the core technologies listed above as an absolute minimum.  This course will get you up to speed with those technologies.\n\nHaving good knowledge of a Java template engine that works with the Spring 5 framework, and a detailed understanding of the build tools (for building single and multi module projects) is highly desirable.\n\nWe’ve added comprehensive training for Thymeleaf 4 as well as Maven 3 in the course to give you those skills.\n\nThis content is ready for you to get started with today.  We’ve been working hard on some final training that we believe will round out a Spring developers skills perfectly.\n\nThe final content we are in the process of adding to the course now is for Gradle (another build tool), Spring Data (provides access to persistence stores), JPA (Java Persistence Layer), Hibernate (Object Relational Mapping tool) and database versioning (like source control but for databases).\n\nThis content will be provided to existing students in the course for free in the coming weeks.\nBonus Free Spring training\n\nOur original course was released with Spring 4 which was the current version at the time – we created a course around that, using the Eclipse editor.\n\nUnlike other Udemy Spring courses, we completely upgraded the content to Spring 5 – We re-recorded what is effectively a brand new course for Spring 5 using JetBrains award winning IntelliJ IDEA and released if free to existing students.\n\nThis older content is still available for you to access after you have been through the brand new training – It’s still useful as some companies still use Spring 4 technology.\n\nWhat skills do you need to take the course?\n\nThis course is for anyone who wants to get into Spring framework programming.  We assume you have never used Spring previously.\n\nAny Java Enterprise edition (Java EE) technology requires you to know at least some Java programming. That’s because Java EE is built on top of the Java Standard Edition (Java SE).  That’s the regular Java language.\n\nThe Spring Framework is built on top of Java EE, and thus you need to have some basic Java programming skills to be able to go through this course.\n\nIf you’ve been through at least some of the Java Masterclass on Udemy (created by one of the instructors in this course) or similar Java training, then you will have no problem going through the course.\n\nWho are the instructors?\n\nYour instructors are Tim Buchalka and Goran Lochert.  Both have many years of commercial programming experience using the technologies taught in the course.\n\nTim has been working with Java for 18 years, and Goran is both Spring certified and Oracle Java certified.\n\nThey have a number of very successful Udemy courses, including Tim’s Java Masterclass and Goran’s Oracle Java Certification course.\n\nHere’s what’s important. There’re lot of people teaching Spring who are not developers. We’re developers with many years’ experience with JEE and Spring, who also teach Spring.\n\nAnd you guessed it. Learning Spring the “wrong way” is not only a wasted opportunity, it may harm your career in the long run.  If you don’t follow industry best practices when creating Spring projects, you not going to fit in well with a future employer.\n\nBecause you are working with career professional developers, you will learn Spring 5 the right way in this course.\n\nWhat if you have questions?\nAs if this course wasn’t complete enough, we offer full support, answering any questions you have 7 days a week (whereas many instructors answer just once per week, or not at all).\nThis means you’ll never find yourself stuck on one lesson for days on end. With our hand-holding guidance, you’ll progress smoothly through this course without any major roadblocks.\nThat’s just one reason why Tim was voted top 10 in the  Udemy instructor awards (out of a whopping 18,000 instructors), and quickly became a top-rated, bestselling instructor on the Udemy site.\nStudent Quotes: “I loved the course because the instructor was really good and explained everything + the support team is really quick in answering our questions the course is worth buying, and i would suggest people to buy it.” –Hamza Shahid\n\nThere’s no risk either!\nThis course comes with a full 30 day money-back guarantee. Meaning if you are not completely satisfied with the course or your progress, simply let Tim or J-P know and they will refund you 100%, every last penny no questions asked.\nYou either end up with Spring framework skills, go on to develop great programs and potentially make an awesome career for yourself, or you try the course and simply get all your money back if you don’t like it…\nYou literally can’t lose.\nReady to get started, developer?\nEnrol now using the “Add to Cart” button on the right, and get started today. Or, take this course for a free spin using the preview feature, so you know you’re 100% certain this course is for you.",
      "target_audience": [
        "The course is 100% for you if you’re wanting to become a Spring programmer!",
        "However, if you’re already an expert Spring programmer with years of experience and knowledge of all the latest updates, then this course is not for you.",
        "You should at list some basic Java knowledge Java experience - check out the Java Masterclass on Udemy if you need those skills."
      ]
    },
    {
      "title": "ES6, ES7 & ES8, TIME to update your JavaScript / ECMAScript!",
      "url": "https://www.udemy.com/course/es6-es7-and-es8-its-time-to-update-your-javascript/",
      "bio": "ECMAScript Next is here. It's time to modernize your JavaScript.",
      "objectives": [
        "Know a basic timeline of ECMAScript and the JavaScript language",
        "Use the new methods and options available in modern releases of JavaScript",
        "Differentiate between the versions of JavaScript",
        "Transition easier between JavaScript and other programming langauges"
      ],
      "course_content": {},
      "requirements": [
        "You should be comfortable reading and writing JavaScript.",
        "You should have access to a browser or computer where you can run JavaScript."
      ],
      "description": "If you have spent anytime coding in JavaScript, you have heard about ES6, ECMAScript, or ES2015. Maybe it was an obnoxious co-worker trying to put you down, another Udemy course keeps mentioning it, or you saw it on a Stack Overflow answer. If you're not familiar with it, or are still wondering what the difference is between ECMAScript and Javascript, it's the update that occurred in 2015 and subsequent years. Considering the history of JavaScript (which started in 1995), there was no update between 2000 and 2008, then again after that from 2008 until 2015, ECMAScript 2015 it is a BIG deal. It modernizes JavaScript. Smaller, but still important changes were released in ES7 (2016) and ES8 (2017).\nI will take you through all the changes, one at a time in a modular approach. This means that you can do chapters as needed, out of order, etc. without serious issues. There is a significant history lesson in order to place JavaScript and ECMAScript in context and we'll do comparisons to other languages so you get a feel for why certain things were added or changed. I also do frequent comparisons between JavaScript and other languages like C, Java, and Python. You do NOT need to know these languages to appreciate the nuances; they are simply helpful at understanding the reasons behind the ECMAScript standard, JavaScript, and update.\nI am still adding challenges for the various sections. Challenges that are already in, are in all caps (i.e., CHALLENGE) and are a great way to apply and practice! This course will challenge your JavaScript as you learn many new features, but also as you learn how JavaScript and ECMAScript relates to other languages (C, Java, etc.).\n\nCourse Layout\nIntro\nES6 Easy Wins\nClasses\nArray Changes\nMap Constructor and Weak Map\nSet Constructor and Weak Set\nPromises\nES8 (Async)\nProxy Constructor and Reflect Object\nGenerators and iterators",
      "target_audience": [
        "New JavaScript programmers",
        "CodeSchool students who need a review",
        "Anyone who's been using JavaScript for a long time and wants an update",
        "Java, C#, Python (etc.) developers who are being forced to write JavaScript and want it to look/behave more normal than what's on StackOverflow"
      ]
    },
    {
      "title": "Master Ethereum & Solidity Programming From Scratch",
      "url": "https://www.udemy.com/course/master-ethereum-and-solidity-programming-with-real-world-apps/",
      "bio": "Ethereum & Solidity Programming For Beginners. Learn Blockchain Technology. Build Smart Contracts for ICO, Token,Lottery",
      "objectives": [
        "Fully updated for 2023 and the latest version of Solidity and Ethereum.",
        "Understand the Ethereum Blockchain Platform (accounts, addresses, ether, gas, opcodes, transactions, blocks, mining, etc).",
        "Have a very good understanding of Solidity Contract Programming Language (syntax and concepts like state variables, storage, functions, visibility, mappings).",
        "Understand concepts like Events, Function Modifiers, Contract Inheritance, Abstract Contracts & Interfaces, etc.",
        "Design, create and deploy a fully-compliant ERC20 Token and launch an Initial Coin Offering (ICO).",
        "Design, develop and deploy a smart contract for a decentralized Lottery.",
        "Design, develop and deploy a smart contract for a decentralized Auction Platform.",
        "Understand good practices for developing Ethereum Smart Contracts and see real-world examples to comprehend what are the advantages of Blockchain Technologies.",
        "Design, develop and deploy a smart contract for a decentralized Fund Raising Platform.",
        "Understand what InterPlanetary File System (IPFS) is and how it works. Installing and running an IPFS Node on Linux and Windows."
      ],
      "course_content": {
        "The Ethereum Blockchain Platform": [
          "Introduction to Ethereum",
          "Join Our Online Community!",
          "Ethereum Nodes",
          "Ethereum Accounts and Ethereum Addresses",
          "Creating an Ethereum Account Using MetaMask",
          "Creating an Ethereum Account Using MyEtherWallet (MEW)",
          "Ether (ETH)",
          "Testnets (Sepolia vs. Goerli vs. Rinkeby)",
          "Testnets and Faucets (Goerli)",
          "How to Transfer ETH",
          "Gas, GasPrice, GasLimit and Opcodes",
          "Ethereum Block Explorer",
          "Ethereum Transactions, Blocks",
          "Ethereum Transaction’s Fields",
          "Ethereum 2.0 (ETH2). PoW vs. PoS",
          "Eth2 Sharding",
          "Links to Original Bitcoin & Ethereum White Papers",
          "Quiz for the Ethereum Blockchain"
        ],
        "Challenges - The Ethereum Blockchain Platform": [
          "Challenges - The Ethereum Blockchain Platform"
        ],
        "Master The Solidity Programming Language": [
          "Remix IDE",
          "Compilation In Depth: ABI and Bytecode",
          "Contract Deployment on JS VM",
          "Contract Deployment on Rinkeby Using Remix and MetaMask",
          "Quiz for Programming Environment",
          "The Structure of a Smart Contract",
          "Solidity Basic Syntax Rules",
          "State and Local Variables",
          "Functions, Setters, and Getters",
          "The Constructor",
          "Coding - Variables and Functions",
          "Quiz for Solidity State Variables and Functions",
          "Variable Types: Booleans and Integers",
          "SafeMath, Overflows and Underflows",
          "Fixed-Size Arrays",
          "Coding - Fixed-Size Arrays",
          "Dynamically-Sized Arrays",
          "Coding - Dynamic Arrays",
          "Bytes and String Types",
          "Structs and Enums",
          "Coding - Structs and Enums",
          "Mappings",
          "Coding - Mappings",
          "Quiz for Solidity Data Types",
          "Storage vs. Memory (Solidity Gotchas)",
          "Quiz for Storage vs. Memory",
          "Built-In Global Variables - Part 1",
          "Built-In Global Variables - Part 2",
          "Coding - Global Variables",
          "Quiz for Global Variables",
          "Contract’s Address and Balance: Payable, Receive and Fallback Functions",
          "Coding - Receiving Ether",
          "Accessing the Contract’s Balance",
          "Protecting the Contract’s Balance",
          "Coding - The Contract's Balance",
          "Quiz for Contract's Balance",
          "Variables and Functions Visibility: Private, Public, Internal, External -Part1",
          "Variables and Functions Visibility: Private, Public, Internal, External -Part2",
          "Coding - Visibility Specifiers",
          "Quiz for Contract Balance and Visibility"
        ],
        "Challenges - Solidity Programming": [
          "Challenges - Solidity Programming"
        ],
        "Project #1 - The Lottery Smart Contract": [
          "Smart Contract Planning and Design",
          "Defining the State Variables and the Constructor",
          "Entering the Lottery",
          "Validation. The Require Statement",
          "How to Select the Winner?",
          "Random Numbers in Solidity",
          "Selecting the Winner and Sending Contract Balance",
          "Resetting the Lottery",
          "Contract Review",
          "Deploying the Contract to Rinkeby Test Network",
          "Lottery Smart Contract Source Code"
        ],
        "Challenges - The Lottery Smart Contract": [
          "Challenges - The Lottery Contract"
        ],
        "Project #2 - The Auction Smart Contract": [
          "Smart Contract Planning and Design",
          "Defining the State Variables and the Constructor",
          "Function Modifiers",
          "Placing a Bid",
          "Testing the placeBid() Function",
          "Canceling the Auction",
          "Important Security Consideration. Withdrawal Pattern",
          "Finalizing the Auction",
          "Testing the Contract. Final Words",
          "Solving a Big Security Vulnerability",
          "Scalability. Deployment Thousands of Auction Contracts",
          "Contract that Deploys Another Contract",
          "Auction Contract Creator",
          "Auction Smart Contract Source Code"
        ],
        "Project #3 - The CrowdFunding Smart Contract": [
          "Solving a Real-World Problem",
          "Planning and Design",
          "Defining the State Variables and the Constructor",
          "Contributing to the CrowdFunding Campaign",
          "Getting a Refund",
          "Creating a Spending Request",
          "Voting For a Request",
          "Making a Payment",
          "Testing the Contract",
          "Solidity Events",
          "Adding Events to the Smart Contract",
          "CrowdFunding Smart Contract Source Code"
        ],
        "Project #4 - Implementing an ERC20 Token": [
          "Contract Inheritance in Solidity",
          "Abstract Contracts and Interfaces",
          "Ethereum Tokens. What is ERC20?",
          "Defining the Token Contract’s State Variables",
          "Defining the Token Contract’s Constructor and Mandatory Functions",
          "Testing and Deploying the ERC20 Token on Rinkeby Testnet",
          "ERC20 Token - allowed, transferFrom(...) and approve(...) Functions",
          "ERC20 Token - Full Implementation",
          "Final Tests",
          "ERC20 Token Contract Source Code"
        ],
        "Project #5 - Implementing and Running an Initial Coin Offering (ICO)": [
          "What is an ICO?",
          "Planning the ICO Smart Contract",
          "Defining the ICO State Variables and the Constructor",
          "The ICO States. ICO Emergency Stop and Restart",
          "The Invest Function",
          "Testing the ICO",
          "Locking Up Tokens",
          "Burning Tokens",
          "ICO and ERC20 Token Deployment on Rinkeby Testnet. Testing the ICO",
          "The ICO Smart Contract Source Code"
        ]
      },
      "requirements": [
        "This Course is NOT FOR COMPLETE BEGINNERS in Programming.",
        "Basic knowledge of programming concepts in ANY language (variables, functions, return values, etc)",
        "A Linux, Mac or PC with an Internet connection. No paid software required.",
        "Very basic knowledge of the Blockchain technology (Bitcoin)."
      ],
      "description": "This course covers every core concept of Ethereum, Solidity and Blockchain Technology with 5 Hands-On Projects.\nThis Ethereum and Solidity Programming course covers every major topic of Ethereum and Solidity, including Smart Contracts Compilation and Deployment on the Blockchain, ABI, Bytecode, Transactions and Calls, Gas, State Variables, Solidity Global Variables, Getter and Setter Functions, Receive, Fallback and Payable Functions, all Solidity Data Types, Events, Accessing and Protecting the Contract’s Balance, Visibility Specifiers and many more!\nThis Course is NOT FOR COMPLETE BEGINNERS in Programming.\nI’m constantly updating the course to be the most comprehensive, yet straightforward, Ethereum, Solidity & Blockchain Programming course on the market!\n\n\nThis course IS NOT like any other Ethereum and Solidity Programming course you can take online. At the end of this Hands-On Course, you will MASTER all the key concepts of the Ethereum Blockchain and Solidity and you will become an effective Ethereum Blockchain Developer for the future that comes.\nJust starting with Blockchain,  Technology Smart Contracts Development and Solidity Programming? Perfect, I've got you covered! This course starts out assuming you're new to these technologies.\nOr maybe you've already tried to learn Ethereum Blockchain Development and Solidity Programming by yourself and now you want to put all the pieces together? I'm here to help you, this course has everything you need to know about Ethereum Blockchain Development and Solidity Programming Language.\nYou'll have lifetime access and you can return and look for a specific Ethereum feature or Solidity syntax anytime you want.\n\n\nAll presentations and Ethereum Smart Contracts used in this course are available for download.\nMany Ethereum Smart Contracts such as the ERC20 Token, the ICO are ready to be used with no or very few changes.\nThere are many courses on Ethereum Blockchain Development and Solidity Programming. Why should you learn from me?\nI'm a Practitioner and a Blockchain Enthusiast. Welcome to the real world! I have almost 20 years of experience as a Software Engineer. Since I started with Ethereum and Blockchain Development, I've been using or studying technology almost on a daily basis.\nI'm an Educator and I know how to make a syllabus. For the last 10 years, I've trained thousands of people on Linux, Networking, Security, or Programming.\nThis course doesn't cover JavaScript Frameworks, Front-Ends, or details about Web3 interaction with the Ethereum Blockchain. It's focused on Back-End Smart Contracts Development. Basic knowledge of any programming language (C, C++, JavaScript) is required!\n\n\nTESTIMONIALS\n\"Very detailed and well explained. Andrei completely broke down the barriers to understanding Solidity and Blockchain programming, so many basics that are fundamental to understanding this tech were clearly explained. Very Impressive!\" by Peter Olisa\n\"Highly recommended course. Goes directly to the point, explaining many examples of real-life smart contracts. Instead of a lot of JavaScript front-end programming, as in other courses, it goes directly to dApp development. Very useful indeed.\" by Jose Ferdandez\n\"The course is well structured and really in-depth. The instructor does a really good job explaining the concepts, with examples. I would recommend this course to anyone interested in the subject.\" by Andrei Buiu\n\n\nThe topics covered in this course are:\nWhat is the Ethereum Blockchain Platform\nEthereum Accounts, Addresses, Transactions & Blocks, Gas, Opcodes, and Mining\nTools used for Ethereum Development\nEthereum Smart Contract Compilation, ABI, Bytecode, and Deployment to different Ethereum Blockchains\nSolidity Syntax\nIn-depth details about Solidity State Variables and Functions\nSolidity Fixed-Size Arrays, Dynamic Arrays, Structs, Enums, Mappings, Global Variables, etc\nContract Address and Balance: Sending Ether to a Contract, Payable & Fallback Functions\nAccessing the Contract Balance\nVariables and Functions Visibility: Private, Public, Internal, External\nEvents\nContract Inheritance, Abstract Contracts & Interfaces\nReal-World examples of how to create secure Smart Contracts for a decentralized unstoppable Lottery, Auction or CrowdFunding Platform, ERC20 Token, and ICO\nWhat is the InterPlanetary File System (IPFS) and how IPFS works? IPFS Examples.\nInstalling and Running an IPFS Node on Linux\nInstalling and Running an IPFS Node on Windows\nEvery topic includes many live examples. This course will show you the best design patterns for developing production-ready smart contracts with Ethereum Blockchain and Solidity.\n\n\nAfter taking this course, you'll be able to:\nHave an in-depth understanding of the Ethereum Blockchain and Solidity Programming Language;\nUnderstand what are the components of the Ethereum Blockchain Platform;\nUnderstand why Smart Contracts and Blockchain Technologies are revolutionary technologies;\nCreate different Smart Contracts to solve real-world problems;\nPlan, design and develop a Smart Contract for a decentralized Auction Platform;\nPlan, design and develop a Smart Contract for a decentralized CrowdFunding Platform;\nPlan, design, develop and deploy your own Fully-Compliant ERC20 Token;\nPlan, design, develop and deploy your own Initial Coin Offering (ICO);\nInstall and use the InterPlanetary File System (IPFS) on Linux or Windows;\nThe skills you’ll learn in this Ethereum and Solidity course will boost your career and make you more valuable in the job market. This course could change your life!",
      "target_audience": [
        "Engineers who want to understand the Ethereum Blockchain Platform and how to build DApps with it.",
        "Programmers who want a good understanding of the Solidity Programming Language.",
        "Anyone with a little bit of software development experience interested in cutting-edge technologies."
      ]
    },
    {
      "title": "JSP, Servlets and JDBC for Beginners: Build a Database App",
      "url": "https://www.udemy.com/course/jsp-tutorial/",
      "bio": "JSP: Covers JSP 2.3 and Servlets 3.1 - Most Popular JSP/Servlet course",
      "objectives": [
        "Build a fully functioning JSP and Servlets web application from scratch",
        "Set up your JSP/Servlet development environment with Tomcat and Eclipse",
        "Explore JSP scripting elements: Expressions, Scriptlets and Declarations",
        "Read HTML form data with JSP and Servlets",
        "Manage application state with Sessions to track unique user actions",
        "Leverage Cookies to personalize a web site for a specific user",
        "Integrate the JSP Standard Tag Library (JSTL) to minimize scriptlet code",
        "Build a Multi-Lingual app using Internationalization and JSTL",
        "Build an MVC application with JSP and Servlets",
        "Generate HTML Tables with JSP and Servlets",
        "Add database support with JDBC: query, insert, update and delete",
        "Build a complete database web app with JDBC"
      ],
      "course_content": {
        "Course Introduction": [
          "Introduction",
          "Download Source Code and PDFs",
          "How To Take This Course - Type the Code with Me!",
          "How To Get Help",
          "Closed Captions and Subtitles Available for English"
        ],
        "Getting Started with JSP": [
          "JSP and Servlets Overview",
          "FAQ: Are JSP and Servlets still used in 2024? ... umm yep!",
          "Setting Up the Development Environment Overview",
          "Installing Tomcat on MS Windows",
          "Install Tomcat on Mac",
          "Installing Eclipse on MS Windows",
          "Install Eclipse on Mac",
          "Connecting Eclipse to Tomcat",
          "FAQ: HELP! - Can't Start Tomcat - Ports are in Use!"
        ],
        "JSP Fundamentals": [
          "JSP Hello World",
          "JSP Expressions",
          "JSP Scriptlets",
          "JSP Declarations",
          "Calling a Java Class from JSP",
          "JSP Built-In Objects",
          "Including Files in JSP"
        ],
        "Reading HTML Form Data with JSP": [
          "HTML Forms Overview - Part 1",
          "HTML Forms Overview - Part 2",
          "Drop-Down Lists",
          "Radio Buttons",
          "Checkboxes - Overview",
          "Checkboxes - Write some Code!",
          "FAQ: How to handle when user doesn't select a checkbox?"
        ],
        "State Management with JSP": [
          "Tracking user actions with Sessions - Overview",
          "Tracking user actions with Sessions - Write some Code!",
          "FAQ: Session Tracking - How does the TO DO LIST demo work?",
          "FAQ: For TO DO list example, I'm able to enter empty items. How to fix this?",
          "FAQ: How Do I Prevent Duplicate Items on Browser Reload?",
          "FAQ: Details on PageContext and Session objects",
          "Personalize Content with Cookies - Overview",
          "Personalize Content with Cookies - App Demo",
          "Personalize Content with Cookies - Write some Code!",
          "FAQ: How To Handle White-Space in Cookie Values?"
        ],
        "JSP Standard Tag Library (JSTL) - Core Tags": [
          "JSP Tags Overview",
          "Install JSTL JAR files",
          "Where can I download the JSTL JAR files from the Internet?",
          "FAQ: Why Two JAR files for JSTL?",
          "JSTL Core Tags - Looping with forEach - Overview",
          "JSTL Core Tags - Project Setup",
          "JSTL Core Tags - Looping with forEach - Write some Code!",
          "JSTL Core Tags - Looping with forEach - Building HTML Tables",
          "FAQ: Reading Cookies with JSTL",
          "JSTL Core Tags - Testing Conditionals with the IF tag",
          "JSTL Core Tags - choose Tag"
        ],
        "JSP Standard Tag Library (JSTL) - Function Tags": [
          "JSTL Function Tags - length, toUpperCase and startsWith",
          "JSTL Function Tags - split and join"
        ],
        "Build a Multi-Lingual App with JSTL - i18n Tags": [
          "Multi-Lingual / Internationalization Overview",
          "Multi-Lingual / Internationalization Messages",
          "Build a Multi-Lingual App with JSTL - Step 1",
          "Build a Multi-Lingual App with JSTL - Step 2",
          "Build a Multi-Lingual App with JSTL - Step 3"
        ],
        "Servlet Fundamentals": [
          "Hello World Servlet - Overview",
          "Hello World Servlet - Let's Write some Code",
          "Comparing Servlets and JSP - What's the Difference",
          "Reading HTML Form Data with Servlets - Overview",
          "Reading HTML Form Data with Servlets - Let's Write some Code",
          "HTML Forms - Difference between GET and POST",
          "Reading Servlet Parameters - Overview",
          "Reading Servlet Parameters - Let's Write some Code",
          "FAQ: Can you define per servlet parameters?",
          "FAQ: How To Redirect from JSP to Servlet?"
        ],
        "MVC - Build an MVC App with Servlets and JSP": [
          "MVC with Servlets and JSP - Overview",
          "MVC with Servlets and JSP - Let's Write some Code",
          "MVC with Servlets and JSP - In More Detail",
          "MVC with Servlets and JSP - Part 1 - Create Student Class",
          "MVC with Servlets and JSP - Part 2 - Create StudentDataUtil",
          "MVC with Servlets and JSP - Part 3 - Create MVC Servlet",
          "MVC with Servlets and JSP - Part 4 - Create JSP View with HTML Tables"
        ]
      },
      "requirements": [
        "Basic Java knowledge is required",
        "Basic HTML knowledge is helpful"
      ],
      "description": "The Most Popular JSP/Servlet course!\nJoin 34,000+ students that are already enrolled!\nOver 7,000+ Reviews! (the most reviews for any JSP/Servlet course on Udemy)\n---\nBuild a JDBC Database Web App with JSP and Servlets - CRUD: query, insert, update and delete\nBy the end of this course, you will create all of the source code for a complete MVC CRUD application.\nYou will type in every line of code with me in the videos ... all from scratch.\nI explain every line of code that we create. So this isn't a copy/paste exercise, you will have a full understanding of the code.\n---\nSample Reviews\n★★★★★\nExcellent JSP Primer. The code works flawlessly ... top notch quality! - Zac Smith\n\n\n★★★★★\nThe Best JSP course for any Beginner. This course will meet or exceed your expectations! - Macuei Mathiang\n\n\n★★★★★\nI am really enjoying learning JSP from this wonderful tutorials and the way Chad explains them with such a great simplicity makes me feel like I am in a classroom with him and he is mentoring me face to face. - Vishal Rangras\n---\nCovers JSP 2.3 and Servlet 3.1\nLive Coding - Watch me code all of the projects from scratch\nResponsive Instructor - All questions answered within 24 hours\n---\nAll source code is available for download\nPDFs of all the slides available for download\n---\nProfessional video and audio recordings (check the free previews)\nClosed-Captions / Subtitles available for English (new!)\n---\nWhat Is Java Server Pages (JSP)?\nJSP (JavaServer Pages) is a popular web application solution for Java. JSP helps developers create dynamically generated HTML web pages on the fly. JSP is similar to PHP, but it uses the powerful Java programming language instead.\n\n\nBenefits of Taking This JSP/Servlets Course\nKnowing JSP and Servlets can get you a job or improve the one you have. It's a skill that will put you more in demand in the modern web development industry, and make your software life easier, that's why it's so popular and backed by Oracle.\nThis course will help you quickly get up to speed with JSP and Servlets. I will demystify the technology and help you understand the essential concepts to build a real JSP/Servlet web application from scratch.\n\n\nBuild a Real JSP/Servlet Application from Scratch\nThis course is project based and you will build a fully functioning JSP/Servlet web application from scratch.\nWe start off with a brief overview of JSP and Servlets. Then I show you how to setup your development for JSP by installing Tomcat and Eclipse. Next, I show you how to connect Eclipse and Tomcat for rapid application development.\nWe cover the key JSP scripting elements: Expressions, Scriptlets and Declaration. For each scripting element, I show you working code examples along with the appropriate use-case and best practices.\nYou learn about the built-in objects available in JSP. Code examples demonstrate the most common built-in objects.\nNext, we cover how to read HTML form data with JSP. This includes reading form data for text fields, drop-down lists, radio buttons and checkboxes.\nThen you learn how to manage application state with Sessions and Cookies. You make use of the built-in session object to keep track of actions for a unique user. You also leverage Cookies to personalize a web site for a specific user.\nFinally, the course includes JDBC database integration. You learn how to leverage JDBC queries, inserts, updates and deletes in a JSP/Servlet web application.\nAt the end of this course, you will have a fully functional JSP/Servlet web application that connects to a database. You can use this application as a starting point for your project.\nAll of the source code and database scripts are provided.\n\n\nYou Will Learn How To\nBuild a fully functioning JSP/Servlet web application from scratch\nSet up your JSP/Servlet development environment with Tomcat and Eclipse\nExplore JSP scripting elements: Expressions, Scriptlets and Declarations\nRead HTML form data with JSP and Servlets\nInclude additional files in your JSP file for a standard look-and-feel\nManage application state with Sessions to track unique user actions\nLeverage Cookies to personalize a web site for a specific user\nBuild a Multi-Lingual app using Internationlization with JSTL\nBuild an MVC application with JSP and Servlets\nAdd database support with JDBC: query, insert, update and delete\nBuild a complete database web app with JDBC\n\n\nStudent Reviews Prove This Course's Worth\nThose who have reviewed the course have pointed out that the instruction is clear and easy to follow, as well as thorough and highly informative.\nOther students enjoy the use of relevant examples throughout the course, as these make the content even easier to comprehend.\nMany students had also taken other JSP courses in the past, only to find that this JSP course was their favorite. They enjoyed the structure of the content and the high quality audio/video.\nCheck out all of the great reviews in the review section ... a lot of happy students :-)\n\nCompared to other JSP/Servlet courses\nMost importantly, this course is project based and you'll build a real JSP/Servlets web application that connects to a database ... all from scratch.\nI am a very responsive instructor and I am available to answer your questions and help you work through any problems.\nFinally, all source code is provided with the course along with setup instructions.\n\nQuality Material\nYou will receive a quality course, with solid technical material and excellent audio and video production. This is my fourth course at Udemy.\nMy first three courses on Udemy were:\nEclipse IDE for Beginners\nJava Database Connection (JDBC)\nJavaServer Faces (JSF) for Beginners\n\n\nThese courses have received rave 5 star reviews and over 60,000 students have taken the courses. Also, these courses are the most popular courses in their respective categories.\nI also have an active YouTube channel where I post regular videos. In the past year, I’ve created over 300 video tutorials (public and private). My YouTube channel has over 4.5 million views. So I understand what works and what doesn’t work for creating video tutorials.\n\n\nNo Risk – Udemy Refund\nFinally, there is no risk. You can preview 25% of the course for free. Once you purchase the course, if for some reason  you are not happy with the course, Udemy offers a 30-day refund (based on Udemy's Refund Policy).\nSo you have nothing to lose, sign up for this course and learn how to build JSP/Servlet applications from scratch!\n\n\nTarget Audience\nJava Developers with basic Java experience",
      "target_audience": [
        "The course is appropriate for all Java developers: beginners to advanced"
      ]
    },
    {
      "title": "The Complete SAP Workflow Training",
      "url": "https://www.udemy.com/course/sap-workflow-training-sap-workflow-tutorial/",
      "bio": "The only course you need to become an SAP Workflow Expert !",
      "objectives": [
        "What is SAP Workflow",
        "SAP Workflow Advantages",
        "SAP Workflow Examples",
        "How to create a basic SAP Workflow",
        "How to built complex SAP Workflow processes",
        "BOR - creation of Business Object Repository objects",
        "Workflow Builder",
        "Dialog and background tasks",
        "Business objects, Inheritance, and delegations of them",
        "Containers",
        "Bindings",
        "Events",
        "User assignments with roles",
        "User assignments with rules",
        "Organizational structures",
        "In fact just all about SAP Workflow :)"
      ],
      "course_content": {
        "Intro": [
          "Welcome to my course",
          "Workflow existed a long time ago",
          "Disadvantages of traditional paper-based workflow",
          "Workflow definition",
          "Our paper process in the SAP system",
          "Advantages of using Workflow",
          "Example of SAP workflow usage"
        ],
        "How to create a basic SAP Workflow": [
          "Business case",
          "SAP Workflow Builder",
          "We create Workflow on the SAP system to the end"
        ],
        "SAP Workflow Architecture": [
          "How SAP Workflow works",
          "Dialog and background activities",
          "What is Business Object ? / Examples",
          "How are standard BOR events triggered",
          "How to create a custom Business Object",
          "Inheritance and Delegation",
          "What are containers, binding"
        ],
        "Workflow agents assigment": [
          "Agents assigment",
          "Responsible Agents",
          "Roles",
          "Workflow rules",
          "Organizational structure",
          "Expressions",
          "Other ways to assign agents, summary"
        ],
        "Events": [
          "Workflow events in general",
          "Event called by standard",
          "Event called by ABAP code",
          "Event called by Change documents"
        ],
        "Thanks for watching": [
          "Thanks for watching"
        ]
      },
      "requirements": [
        "Navigation the SAP GUI",
        "No ABAP programming is needed",
        "Willingness to learn :-)"
      ],
      "description": "After completing this course you will be able to create your own complex SAP workflow from scratch. You will deal with maintenance, analysis, and debugging of existing SAP workflow processes without any problem. Shortly speaking, you will update the SAP Workflow into your profile and take your professional career to the next level.\n\n\nThat is the complex SAP Workflow directly rooted in my experience, it gathers all I would like to know when I started my SAP Workflow projects. Everything is shown on the live SAP System, communicated in a simple and understandable way. The course starts with an introduction of what SAP Workflow is, later creation of the simplest SAP workflow on the System.\nWe go through all aspects of SAP Workflow, like:\n- Workflow Builder,\n- dialog and background tasks,\n- business objects, Inheritance, and delegations of them,\n- Workflow built on classic SE24 objects,\n- containers, bindings, events,\n- user assignments with roles, rules, organizational structures,\n- and all is presented on the newest SAP HANA system.\nThe best part is, that I'm constantly updating it with new content.\nI invite you to an adventure with new technology. I hope that thanks to this course you will increase your SAP competencies, get a new job, get a promotion, or simply become better professionals.",
      "target_audience": [
        "SAP users who want to understand what SAP workflow is",
        "SAP consultants who want to learn SAP Workflow",
        "This course is for functional and technical consultants"
      ]
    },
    {
      "title": "Advanced Scratch Programming for Kids",
      "url": "https://www.udemy.com/course/advanced-scratch-programming/",
      "bio": "Learn to code amazing games in Scratch! For advanced Scratchers: kids, parents and teachers",
      "objectives": [
        "Make high-quality games in Scratch",
        "Program visual effects",
        "Create stories, charcters and levels",
        "Draw perfect shapes",
        "Learn advanced programming techniques"
      ],
      "course_content": {
        "Introduction": [
          "Getting Started"
        ],
        "Auto-Draw": [
          "What We'll Build",
          "Drawing Squares",
          "Drawing Perfect Shapes",
          "Drawing Stars",
          "Drawing Spirals and Optical Illusions",
          "Snowflakes!",
          "Snowflakes, Part 2",
          "Snowflakes, Part 3"
        ],
        "Bubble Frenzy": [
          "Intro",
          "Programming the Main Menu",
          "Moving the Bubble",
          "Growing the Bubble",
          "Popping the Bubble",
          "Scoring",
          "Power-Ups: Invincible",
          "Power-Ups: Speed",
          "Power-Ups: Dizzy",
          "Programming Sound Loops (optional)"
        ],
        "Black & White: The Platformer": [
          "Intro",
          "Moving the Player",
          "Making the Player Jump",
          "Staying on White",
          "Jumping Off Walls",
          "Color Swaps and Player Reset",
          "Completing Levels",
          "Programming All the Levels, Winning the Game"
        ],
        "Space Defender": [
          "Intro",
          "Starting the Game",
          "Visual Effects: Programming the Stars",
          "Visual Effects: Programming Space Nebulas",
          "Moving the Player Ship",
          "Firing Lasers",
          "Easy Enemies",
          "Player Ship Takes Damage",
          "Generating Explosion Effects",
          "Harder Enemies",
          "Harder Enemies, Part 2",
          "Harder Enemies, Part 3",
          "Harder Enemies, Part 4",
          "Levels and Winning the Game, Version 1.0",
          "Boss Fights!",
          "Boss Fights, Part 2",
          "Boss Fights, Part 3",
          "Game Complete, Version 2.0",
          "Player Power-Ups: Extra Life",
          "Player Power-Ups: More Lasers",
          "Player Power-Ups: Shield",
          "Game Complete, Version 3.0!"
        ],
        "Congratulations!": [
          "Congratulations!"
        ]
      },
      "requirements": [
        "Must already know how use Scratch basic blocks"
      ],
      "description": "In this course, we'll learn how to make AMAZING games with Scratch! This is the follow-up to the immensely popular course \"Programming for Kids and Beginners: Learn to Code in Scratch\".\nWe already assume you know how to code in Scratch. In this course, I'll show you some advanced tips that will allow you to make high-quality games in Scratch. In this course, we'll learn how to program\nperfect shapes\nautomatic drawings\noptical illusions\nperfectly symmetrical snowflakes\nsound loops\nstories and characters\npower-ups and lives\nintelligent enemies\nvisual effects\nboss fights\nexplosions, lasers and more\nAs before, we'll learn by doing. The course is designed so that you create the games and applications with your own two hands. But what makes this course truly unique is the teaching method I've used live 4+ years. We learn a variety of computer science topics, but we hide the complexity behind characters, animations, analogies and fun!\nThat's because, in these carefully designed lessons, we train our intuition to make sense of what we want to achieve and how to get there. This will help you quickly master the basics. After this course, you'll learn text-based programming languages at a blazing speed and quickly make sense of any piece of code.\nThe content is designed to be fun! I made these games to optimize learning computer science topics while having fun along the way. I will also update the course on a regular basis with new content - and challenges!\nThis course is designed for\nparents or teachers who want to give their children the best skills and most fun\nkids and beginners who want to learn to code games\nanyone new to programming who doesn't know where to start\nI can't wait to have you in the course!\nThe course is regularly updated with new material, tips and tricks that you can use in your games and projects!\nPlease note that Udemy is a big place. Those under 18 may use this course only if a parent or guardian opens their account, handles any enrollments, and manages their account usage. I'm pretty sure you're doing that anyway, but it's worth emphasizing.",
      "target_audience": [
        "Scratch users (kids, parents, teachers) who want to make some high-quality, advanced games"
      ]
    },
    {
      "title": "Java Servlet, JSP and Hibernate: Build eCommerce Website",
      "url": "https://www.udemy.com/course/java-servlet-jsp-and-hibernate-build-a-complete-website/",
      "bio": "Code Functional Bookshop Website with Java Servlet and Hibernate framework. Full-stack Development. Job-ready Skills.",
      "objectives": [
        "Program a complete e-commerce website that sells books using Java Servlet, JSP and Hibernate framework",
        "Build a Bookstore website that allows the customer to browse books, view details, search books, write reviews and register account and purchase books",
        "PayPal payment integration (including credit card payment)",
        "Build the admin panel that allows managers to manage books, customers, reviews and orders",
        "Use Hibernate framework with JPA for the data access layer",
        "Use Java Servlet for the controller layer",
        "Use JSP and JSTL for the view layer",
        "Use HTML, CSS, Javascript and jQuery for the view layer",
        "Build Mobile-first, Responsive Website with Bootstrap",
        "Design and manage Database with MySQL",
        "Code unit tests with JUnit",
        "Package and Deploy the website with Tomcat server"
      ],
      "course_content": {
        "Getting Started": [
          "Why These Technologies are Chosen"
        ],
        "User's Requirement Analysis": [
          "Understand User's Requirement",
          "Analyze User's Requirements"
        ],
        "Project Design": [
          "Design User Interface",
          "Database Design",
          "Technical Design",
          "Understand Project's Naming Conventions"
        ],
        "Setup Software Programs": [
          "Note about Software Versions",
          "Install Java Development Kit",
          "Setup Eclipse IDE",
          "Install Apache Tomcat server",
          "Install MySQL Database Server"
        ],
        "Get Referential Project Code": [
          "Get Access to GitHub Repo",
          "Browse Referential Code in Web Browser",
          "Download Project Code from GitHub",
          "Clone Project Code from GitHub",
          "Disconnect from Remote Repository"
        ],
        "Create Database": [
          "Create Database Using MySQL Command Line Client",
          "Execute Script in MySQL Workbench",
          "Alter Tables in MySQL Workbench",
          "Create the rest tables using MySQL Workbench"
        ],
        "Setup Project in Eclipse": [
          "Create Java Dynamic Web Project",
          "Configure Dependencies in Maven",
          "Create Packages and Directories",
          "Add Apache Tomcat and Test the Server"
        ],
        "Create Java Model Classes": [
          "Understand JPA and Hibernate",
          "Mapping a Model Class Manually",
          "Create JPA Configuration File",
          "Write a test program",
          "Generate Code for Model Classes"
        ],
        "Code DAO Classes": [
          "Class Design for DAO",
          "Introduction to JUnit",
          "Code UserDAOTest Class"
        ],
        "Create Website's Home Page": [
          "Code Home Page for the Website's Front-End"
        ]
      },
      "requirements": [
        "Have basic knowledge in Java, JSP, Servlet and Hibernate",
        "A little knowledge about HTML, CSS, Javascript and jQuery (optional)"
      ],
      "description": "Dear potential students / future talented developers:\nThis course helps you master practical Java programming skills you need to create professional real-world websites from begin to end - Adding an awesome experience to your résumé. Earn job-ready skills!\n\n\nWhy using Java Servlet, JSP, JSTL and Hibernate framework???\nYou know, Java Servlet, JavaServer Pages (JSP) and JSTL are the core technologies in Java EE, which is the platform for building web applications running on Java Virtual Machine (JVM). If you're beginner in Java EE, you should master these technologies before going with frameworks like Spring or Struts, which are based on Java EE's core technologies. That means you will learn those frameworks faster and easier when you have foundation of Java Servlet and related technologies.\nAnd Hibernate is the most popular ORM (Object-Relational Mapping) framework that makes programming with data access layer much more easily.\n\n\nYou will learn how to build a sophisticated, functioning e-commerce website that sells books online!\nBy completing this course, you will be able to confidently apply for any Java web development jobs, or doing Java freelance projects online.\nThis is a complete hands-on programming course in which you will see I type every single line of code. No boring theory.\n\"Covers every detail of a real world application\" - said student Anastasios Lelakis\n\n\nWhat makes this course different?\nIn this course, I use a lot of UML diagrams and pictures to help you understand how things work so you can follow along the course easily.\n\"I enjoy the way and approach you have used in demonstrating with diagrams, tables and step by step explanation\" - said student Ioryaasa Godfrey Akpera\n\n\nThis course is built and taught by a Java expert who has been programming Java for 18 years.\nWith over 62 hours of video, you learn every step of the development process. So you can learn from zero experience.\nYou learn to build a complete e-commerce website with all functionalities.\nYou get rapid support from the instructor who will reply your questions within few hours, not days.\n\n\n\"The course is very well structured and the teacher Nam explains everything step by step in a clear way. Whenever you have a question, he usually replies within 1-2 days and helps you out. Very much enjoying this course and hope to use this knowledge to start building out my own webapps!\" - said student Eugene\n\n\nIn this course, you will learn how to apply core technologies in Java EE like Servlet, JSP, JSTL and Hibernate framework to build a complete website to sell books online.\n\n\nOn the back-end side (Admin control panel) you will develop the following features:\nUsers management (include admin login/logout)\nCategory management.\nBook management.\nReview management.\nCustomer management.\nOrder management.\nStatistics (admin dashboard)\n\n\nOn the front-end side (shopping website), you will develop the following features:\nHomepage: List newly published books; best-selling books; most-favored books\nList books in a category\nView book details\nSearch books\nShopping Cart\nCustomer Registration\nWrite reviews for books\nPlace order (Checkout)\nPayPal Payment Integration (include credit card payment)\nIn addition, there are also many assignments from easy to hard to help you practice.\n\n\nWhy should you buy this course?\nAcquire the skills to build e-commerce websites with Java\nTo learn fast from expert - this will save you a lot of time and avoid trials and errors\nBy completing the project in this course, you earn an awesome experience which you can proudly include in your resume - so you can get Java programming job easier.\nIf you're a final year student, consider to make your final year project from this course.\nAdvance your Java programming skills to a new level.\n\n\n\"Amazing experience after this course. Thank you instructor.\" - said student Dhara Patel\n\n\n*** SPECIAL BONUS ***\nYou will get a copy of my book \"How to Become a Successful Freelance Programmer\" (sold on Amazon) in which you will learn the strategies to build a successful freelance career (I completed 142 projects with average rating 4.8 during 5 years - so you can too). Therefore, by taking this course and being gifted this book, you will be having much greater confident in your programming career.\n\n\nFeel free to explore the full course content and watch the free previews.\nEnroll this course today! I'm looking forward to see you inside.",
      "target_audience": [
        "Beginners in Java programming",
        "Beginners in Java Servlet, JSP and Hibernate framework",
        "Students who want to learn hands-on Java programming skill to build e-commerce websites",
        "Those who want to go from beginner to intermediate level in Java programming"
      ]
    },
    {
      "title": "Complete Kotlin development masterclass",
      "url": "https://www.udemy.com/course/kotlinmasterclass/",
      "bio": "Master the fundamentals and advanced features of Kotlin development",
      "objectives": [
        "Kotlin development",
        "Kotlin coroutines",
        "Functional programming",
        "Object Oriented Programming",
        "Kotlin language fundamentals",
        "Kotlin extensions",
        "Generics",
        "Principles of software development"
      ],
      "course_content": {},
      "requirements": [
        "Mac or PC",
        "Interest in software development"
      ],
      "description": "This course is a unique experience on Udemy.\nThere are loads of Kotlin resources online to choose from, but this is the only course that takes you from a complete beginner in software development, teaches you the fundamentals, advanced topics, and makes you an expert in this field.\nIn addition, you have loads of practice exercises, challenges and projects to work on. I didn't just add a bunch of exercises at the end. Instead, each concept is put in code and practiced so that we make sure you apply and learn everything through action.\nYou get over 30 hours of on-demand videos, exercises and most importantly projects to apply the knowledge we talk about.\nI've spent years building applications in Kotlin, and years again teaching people how to build code for themselves.\nThis is the most complete course I've ever done, and it's all to help you on your journey to become an expert developer.\nWe will cover basic topics such as\nlanguage fundamentals\ncollections\nflow control\nloops\nhandling errors and exceptions\nfunctions\npackages\nAs well as advanced topics such as\nObject Oriented Programming\nPrinciples of development\nStandard functions\nTypes of classes\nExtensions\nGenerics\nCoroutines\nAnd we will put everything in practice through examples and projects.\nIf you want to take ONE COURSE to master Kotlin take this course.",
      "target_audience": [
        "Complete newbies",
        "Intermediate developers",
        "Beginner developers",
        "Java developers"
      ]
    },
    {
      "title": "Google Apps Script Complete Course Beginner to Advanced",
      "url": "https://www.udemy.com/course/apps-script-course/",
      "bio": "Learn to power up your Google Suite of products using Apps Script to connect - automate - add advanced functionality",
      "objectives": [
        "Create custom functions within G Suite Apps Docs Sheets Slides Gmail Drive and more",
        "Create Google Script to power Google Apps",
        "Use Google Script to to add functionality automation and more to Google Docs Sheets plus"
      ],
      "course_content": {},
      "requirements": [
        "JavaScript and basic HTML and CSS knowledge",
        "Internet Access",
        "Google Account",
        "Basic Web development understanding",
        "JavaScript knowledge is REQUIRED"
      ],
      "description": "Google Apps Script is a coding language in the cloud that is based on JavaScript - allowing you to connect the Google Workspace Services to do amazing advanced functionality within your Google Workspace.\nIncrease the power of your favorite Google apps — like Calendar, Docs, Drive, Gmail, Sheets, and Slides. Apps Script lets you do more with Google. All on a JavaScript platform in the cloud.G Suite Services.\nCourse content covers every step to get started with Google Scripts including an overview of the editor and what it does and how to use it.  Followed by more detailed syntax and code examples of applying Google Script in real world projects.  Perfect for students of all levels, with a step by step approach for anyone who has not used Google Script Before.\nApps Script allow you to power up your favorite Google apps and do more with them, way more.\nAutomate, add functionality, use spreadsheet data, create documents, interact with emails, generate reports, use data the list is endless on all the amazing things you can do with Google Apps Script.\nWarning once you start using Google Apps Script you may want to use it for everything!!!\nJust like JavaScript apps script is easy to write, uses the same structure as JavaScript and core fundamental functionality.   If you know JavaScript you can get started with apps script in minutes.  Functions, variables, loops, and more the same syntax as JavaScript.   With the added power of Google Classes you can connect data from your Google Apps and build on it.  Its the easy way to power up your applications.\nCourse will cover\nStandalone script\nIDE editor\nQuick demo to setup and get started with.\nDocument - DocumentApp\nGet document\nDocument body\nGet elements within body\nCreate docs on the fly\nDocument UI for alerts and responses.  Interact with users.\nSelection of data and construction of content\nStyling your doc content\nSpreadsheet - SpreadsheetApp\nHow to Get spreadsheet data\nCreate spreadsheets and update, create and use the data\nGet ranges - select sheets and get content\nGet Sheet data and iterate through it to output it\nWrite to spreadsheet using script\nSpreadsheet UI for added interactions with users\nUpdate sheet with new data\nSidebar menu update sheet show sheet data and more\nGoogle Sites - Standalone scripts\nSites class and how to use them\nSites dashboard navigation and use\nDesign sites interface with options to create pages and more\nAdd scripts to sites to create data driven and interactive pages\nOutput and setup sites content quickly and easily\nGoogle Drive - DriveApp Class\nGet drive data and use it\nSetup files create new files\nMove files from one folder to another\nGet folder contents and list it\nCreate files copy files and update files\nSearch drive files and folders\nGet permissions and set permissions\nList files from folders in Google Sheet show permissions update permissions\nCalendar Calendar - CalendarApp Class\nCreate events\nGet event details\nUpdate color style\nOutput events to Google Sheet\nUsing Calendar events checking availability and more\nGmail - GmailApp Class\nSend message\nGet inbox contents from folder\nCreate labels and move files\nGet counts of emails and content\nMark Emails as read\nTrack emails and use the content\nSearch emails\nStar Messages\nStep by step training lessons\nThis course covers everything you need to learn about Google Apps Script, including practice exercises, loads of examples, source code and step by step training.  Along with friendly support in the Q&A to help you learn and answer any questions you may have.\nTry it now you have nothing to lose, comes with a 30 day money back guarantee.\nTaught by a knowledge instructor with many years of web development experience, ready to help you learn.\nJoin now and create your own Google Scripts Apps see what is possible.",
      "target_audience": [
        "Anyone who wants to create amazing things using Google Scripts",
        "JavaScript developers who want to empower Google suite of products",
        "Web developers who want to incorporate Google Script functionality",
        "Application developers who want to access the power of Google G Suite",
        "App Script Google Script developers"
      ]
    },
    {
      "title": "Practical Python: Learn Python Basics Step by Step- Python 3",
      "url": "https://www.udemy.com/course/practical-python-3/",
      "bio": "Get started quickly with Python (Python 3): Only Hands-on Lessons and Practice to Master Python basics.",
      "objectives": [
        "Master Python basics",
        "Learn Python with Python 3",
        "Install Python 3 on Windows, Linux, and MacOS",
        "Run Python instructions in the Python Shell",
        "Install and use a Python IDE (PyCharm)",
        "Variables, Data Types, Lists, Functions, Conditions, Loops, etc.",
        "Get user input with Python",
        "Read files with Python",
        "Use a built-in Python module in your code",
        "Create your own Python module to use in other files",
        "Start a Python program from the terminal (Windows, Linux, MacOS)",
        "Discover Python OOP (Object Oriented Programming)",
        "Intro to inheritance and composition (OOP)",
        "Learn the Best Practices from the start",
        "Practice on key concepts with many exercises",
        "Learn by doing"
      ],
      "course_content": {
        "Introduction": [
          "Welcome!",
          "How to follow this course",
          "Install Python on Windows",
          "Install Python on Linux",
          "Install Python on MacOS"
        ],
        "Python Basics - Level 1": [
          "Intro",
          "Write Your First Python Statement",
          "Numbers and Operations",
          "Variables",
          "Variables - Data types",
          "Lists",
          "Get User Input",
          "Cast a Type to Another Type",
          "Python Level 1: Exercises",
          "Python Level 1: Exercises - Solution"
        ],
        "Python Basics - Level 2": [
          "Intro",
          "Install a Python IDE (PyCharm)",
          "Write and Execute Your First Python Program",
          "Comments",
          "Functions",
          "Function Parameters",
          "Function Return Statement",
          "Variable Scope",
          "Python Level 2: Exercises",
          "Python Level 2: Exercises - Solution"
        ],
        "Python Basics - Level 3": [
          "Intro",
          "Conditional Statements with Booleans",
          "Combine Different Conditional Statements",
          "Conditions with if",
          "Else, else if",
          "For Loop",
          "While Loop",
          "Use Loops to Iterate on Python Lists",
          "Python Level 3: Exercises",
          "Python Level 3: Exercises - Solution"
        ],
        "Python Basics - Level 4": [
          "Intro",
          "Read from a File",
          "Write to a File",
          "Use a Python Module",
          "Create Your Own Python Module",
          "Run a Python Script from the Terminal",
          "Python Level 4: Exercises",
          "Python Level 4: Exercises - Solution"
        ],
        "Extra: Python OOP": [
          "Intro",
          "What is OOP, What are Classes",
          "Create a Python Class",
          "Add Class Methods",
          "Create an Object (Instance) from your Class",
          "Organize your OOP Files",
          "Inheritance - Derive a Class from Another Class",
          "Composition - Use a Class Inside Another Class"
        ],
        "Conclusion": [
          "Best Practices When Writing Python Code",
          "How to Go Further from There",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "A computer and a strong will to learn, that’s it!"
      ],
      "description": "You are new to programming and want to learn Python Basics fast?\nOr... You’re already a Python developer and want to get a quick refresher?\nAnd, you prefer to learn by doing? → This Python course is for you.\nNo need to know any programming or Python to get started. Just a strong motivation to learn.\nThe course is entirely done with the newest Python version: Python 3 (note that Python 2 is not supported anymore!)\n\n\n→ Why this course?\n\n\nI wanted to create a course to teach you just the Python basics - nothing more, nothing less → By taking the time to explain the basics well, to give you the foundation you need to start any other project or learning path.\nSo, to be clear, this course is not an “all-in-one 60h course with 45 projects” that’s going to take you 6 months to complete. I’m definitely not saying those courses are bad, just that I’m taking a different approach focused on the basics.\nAnd this is not a course to become a Python “expert” in 1 day or 1 week neither. The instructors who try to sell you that are actually lying, all they want is you to give them more money by giving you false beliefs. Here I’m being 100% honest: you won’t be able to get a senior software developer job out of this course, let’s be realistic.\nBut, and this is important: at the end of this course, you will have a strong foundation on Python basics, and you will be able to build on that foundation with confidence.\nYou will then be able to start learning:\nWeb development\nVideo games\nRobotics (my favorite!)\nArtificial intelligence\nData science\nAnd much more…\nI focused on making the course as short as possible. No fluff and distracting stuff. Just the core basics you really need, explained in an easy way so you can clearly understand, and reinforced with practice.\n\n\n→ How do I teach?\n\n\nStep by step: each section, each lesson, is built on top of the previous one. 1 lesson = 1 small step towards your mastery of Python Basics.\nHands-on: no complicated theoretical explanations, I directly write the code and explain at the same time. And I encourage you to write the code too!\nNo copy and paste: I won’t make some code magically appear on the screen without any explanation. I write all the code that I explain, and explain all the code that I write.\nTo the point: if I can explain something in 5 minutes, I don’t produce a 15 minutes video to make the course look longer.\nPractical: I teach you what you really need in order to do useful things with Python. This means focusing on what can give you the greatest value now.\nAdditional Practice: with each key concept you get some exercises to practice on exactly what you need to understand, so the learning is much more efficient.\nSo, if you like to learn by doing, and want to really understand what you do, you will love this course.\n\n\n→ What are you going to do and learn in this course?\n\n\nFirst, you will install Python on your computer (videos for Windows, Linux, and MacOS).\nThen the course is divided into 4 Python levels. For each level you get:\nA quick introduction video to make the relation between different levels and explain what we are going to do.\nHands-on lessons (most of them are about 5 minutes long) to introduce new key concepts.\nAt the end of the level (section), some exercises to practice on the key points of the section, and also combine concepts together.\nHere’s an overview of what you’ll see in each level:\nLevel 1: Python shell, variables, data types, lists, user input\nLevel 2: Python IDE (PyCharm), comments, functions, scope\nLevel 3: conditions (if), for loops, while loops\nLevel 4: read/write to a file, use and create Python modules, run a Python program from the terminal\nExtra: you also get a bonus section after the 4 levels, on Python OOP (Object Oriented Programming). This is a nice addition to your skill set, because OOP is used almost everywhere with Python.\n\n\nNow, don’t wait any longer and enroll in this course today!\nYou also get a 30 days money-back guarantee if you’re not fully satisfied. So just get started now, and if I don’t deliver on what I said, please do get the refund.\nSee you in the course! :)",
      "target_audience": [
        "Complete beginners who want to learn the programming and Python basics in an easy way",
        "Programming beginners who started with another language and want to jump to Python",
        "Python developers who want a quick and to-the-point refresher of the basics.",
        "Anyone interested in web development, robotics, artificial intelligence, video games development, data science, etc."
      ]
    },
    {
      "title": "Java Application Performance Tuning and Memory Management",
      "url": "https://www.udemy.com/course/java-application-performance-and-memory-management/",
      "bio": "Discover how coding choices, benchmarking, performance tuning and memory management can optimize your Java applications",
      "objectives": [
        "What can cause performance issues in our applications, and how to resolve them.",
        "The choices available to us as developers at design-time - how to make good coding choices for optimal performance.",
        "How to configure the virtual machine to provide better performance at run-time.",
        "The JVM's Just In Time compiler.",
        "How the virtual machine manages memory.",
        "Performance testing and benchmarking."
      ],
      "course_content": {
        "Chapter 1 - Introduction": [
          "What do we mean by performance, and what versions of Java does this course cover",
          "Example code provided with this course",
          "Using different JDK and JVM vendors",
          "The structure of this course",
          "How to get support while you're taking this course"
        ],
        "Chapter 2 - Just In Time Compilation and the Code Cache": [
          "What is bytecode?",
          "The concept of \"Just In Time Compilation\"",
          "Introducing the first example project",
          "Finding out which methods are being compiled in our applications",
          "The C1 and C2 Compilers and logging the compilation activity",
          "Tuning the code cache size",
          "Remotely monitoring the code cache with JConsole"
        ],
        "Chapter 3 - Selecting the JVM": [
          "The differences between the 32 bit and 64 bit JVM",
          "Specifying which compiler to use at runtime",
          "Turning off tiered compilation",
          "Tuning native compilation within the Virtual Machine"
        ],
        "Chapter 4 - How memory works - the stack and the heap": [
          "Introduction - the structure of Java's memory",
          "How the stack works",
          "How the heap works",
          "The heap and the stack together - an example"
        ],
        "Chapter 5 - Passing objects between methods": [
          "What does \"passing by value\" mean?",
          "What does \"passing by reference\" mean?",
          "Passing objects into methods",
          "The final keyword and why it's not the same as a constant",
          "Why the final keyword doesn't stop an object's values from being changed"
        ],
        "Chapter 6 - Memory exercise 1": [
          "Instructions for the exercise",
          "Walkthrough of the solution"
        ],
        "Chapter 7 - Escaping References": [
          "Introduction - what is an escaping reference?",
          "Strategy 1 - using an iterator",
          "Strategy 2 - duplicating collections",
          "Strategy 3 - using immutable collections",
          "Strategy 4 - duplicating objects",
          "Strategy 5 - using interfaces to create immutable objects",
          "Strategy 6 - using modules to hide the implementation"
        ],
        "Chapter 8 - Memory Exercise 2": [
          "Instructions for the exercise",
          "Walkthrough of the solution"
        ],
        "Chapter 9 - The Metaspace and internal JVM memory optimisations": [
          "The role of the Metaspace",
          "The PermGen",
          "Are objects always created on the heap?",
          "The String Pool",
          "Interning Strings"
        ],
        "Chapter 10 - Tuning the JVM's Memory Settings": [
          "How the string pool is implemented",
          "Understanding the size and density of the string pool",
          "Tuning the size of the string pool",
          "Tuning the size of the heap",
          "Shortcut syntax for heap tuning flags"
        ]
      },
      "requirements": [
        "Basic working knowledge of Java programming is needed, but you don't need to be a Java expert!"
      ],
      "description": "In this course we'll understand what can cause performance issues in our applications, and how to resolve them. This includes a review of some of the options available to us as developers at design-time - how to make good coding choices for optimal performance. For example, when should you pick an ArrayList over a LinkedList? How much difference does the StringBuilder really make? Is Lambda syntax more or less efficient at certain operations?  We'll also learn about various ways that we can configure the virtual machine to provide better performance at run-time, with a range of runtime arguments. We'll also be diving deep into how the virtual machine manages memory, and how the garbage collection process works and impacts on application performance.\nAlong the way we'll be learning about the Just In Time compiler, performance testing and benchmarking, decompiling bytecode, using the GraalVM as an alternative virtual machine and more.\nAbout Java Versions: This is the second iteration of this course and it is designed for all the current versions of Java that have long term support (Java 8 , Java 11 and Java 17). You can follow along with any of these versions. You can also use either the Oracle or the OpenJDK JVMs.  For developers using other JVM languages (such as Kotlin, Scala and Groovy) all of the JVM configuration parts of this course will still be relevant, and some of the coding choices may be useful to consider also. (Note that there's even a review of whether Kotlin provides better or worse performance than Java!)",
      "target_audience": [
        "Java programmers who are looking to deepen their knowledge of how the Java Virtual Machine works",
        "Application developers who have a problem with a poorly performing application",
        "All java developers who want to be better programmers"
      ]
    },
    {
      "title": "Python Network Programming for Network Engineers (Python 3)",
      "url": "https://www.udemy.com/course/python-network-programming-for-network-engineers-python-3/",
      "bio": "Program networks using Python version 3. Learn network programmability with this practical GNS3 and Cisco course",
      "objectives": [
        "Learn network programmability with GNS3 and Python version 3",
        "Learn how to automate the configuration of network devices with Python",
        "Learn how to leverage NAPALM for network automation",
        "Use Netmiko for SSH connections to routers and switches",
        "Quick start guide using Telnet and SSH - get started in 20 minutes!",
        "Learn how to scale your network scripts"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Answering your questions",
          "Udemy Tips and Tricks"
        ],
        "Lab Setup": [
          "Important - please read",
          "GNS 2.2 GUI Install",
          "GNS3 2.2 VM Install",
          "GNS3 IOS images",
          "CML (VIRL 2.0) Install Part 1",
          "CML (VIRL 2.0) Install Part 2",
          "EVE-NG Installation",
          "EVE-NG Cisco Images",
          "DevNet: Free CML"
        ],
        "Quick Start Guide to Network Automation": [
          "Quick Start 1: GNS3 Lab Setup and IDEs",
          "Quick Start 2: Telnet Script creation",
          "Quick Start 3: Telnet Script Test",
          "Quick Start 4: Telnet to a switch and create VLANs",
          "Quick Start 5: Loops",
          "Quick Start 6: PEP8: Python Style Guide",
          "Quick Start 7: Configure switch VLANs using loops",
          "Quick start 8: Create a multiple switch network",
          "Quick Start 9: Open a file of switch IP addresses",
          "Quick Start 10: Configure multiple switch with a loop",
          "Quick Start 11: Loops within loops",
          "Quick Start 12: Backup Network Device Configurations"
        ],
        "Netmiko: Use SSH for Network Automation": [
          "Netmiko Part 1: Introduction",
          "Netmiko Part 2: Enable SSH on switches in network",
          "Netmiko Part 3: Your first Netmiko SSH Script",
          "Netmiko Part 4: Script for multiple switches",
          "Netmiko Part 5: Run script and configure multiple devices",
          "Netmiko Part 6: File of multiple Cisco commands",
          "Netmiko Part 7: Program multiple switches with file of commands",
          "Netmiko Part 8: Script to program entire network",
          "Netmiko Part 9: Run script to program entire network"
        ],
        "NAPALM": [
          "NAPALM Introduction (P75_12)",
          "NAPALM Python 3 versus 2.7",
          "Ubuntu versus Network Automation Container",
          "Install NAPALM (P68_13)",
          "NAPALM connect to switch 1 (P68_14)",
          "JSON and more commands (P68_16)",
          "Mac address table, ARP cache (P68_17)"
        ],
        "NAPALM and BGP": [
          "Use NAPALM to retrieve BGP neighbor information: Part 1 (P75_1)",
          "Use NAPALM to retrieve BGP neighbor information: Part 2 (P75_2)",
          "Use NAPALM to retrieve BGP neighbor information: Part 3 (P75_3)",
          "NAPALM: Multiple BGP neighbors (P75_4)",
          "NAPALM and bigger BGP Network Part 1 (P75_5)",
          "NAPALM and bigger BGP network Part 2 (P75_5b)"
        ],
        "Use NAPALM for device configuration audit and changes": [
          "Use NAPALM to configure Access lists (P75_6)",
          "Check if ACL already exists and add if missing (P75_7)",
          "Use NAPALM for auditing device configs (P75_8)",
          "Use NAPALM to add multiple config files (P75_9)",
          "NAPALM: Multiple config files, multiple devices (P75_10)"
        ],
        "Iteration Examples: Netmiko scripts": [
          "Netmiko Iteration: Script Overview",
          "Netmiko Iteration (Script 1): Basic Script",
          "Netmiko Iteration (Script 2): Open a file of commands",
          "Netmiko Iteration (Script 3): Configure multiple devices using a file of devices",
          "Netmiko Iteration (Script 4): Remove passwords from script",
          "Netmiko Iteration (Script 5): Except (Error) Handling",
          "Netmiko Iteration (Script 6): Determine device types and run specific device typ",
          "Netmiko Iteration (Script 7): Iterate device type script"
        ],
        "Netmiko Scaling": [
          "Part 1: Encrypted Password File",
          "Part 2: Netmiko Sequential Part 1",
          "Part 3: Netmiko Sequential Part 2",
          "Part 4: Netmiko Multithreading",
          "Part 5: Netmiko Thread Pools"
        ],
        "Python Theory": [
          "Theory topics - very short (P62_14_15)",
          "Keep learning (P61_26)",
          "2.7 and 3 setup (P61_27)",
          "2.7 and 3 examples (P61_28)",
          "Basic Hello World Scripts (P61_29_30)"
        ]
      },
      "requirements": [
        "Basic Networking Knowledge (CCNA Level)",
        "Basic understanding of GNS3"
      ],
      "description": "Learn Network Programmability and Network Automation using GNS3 and Python version 3.\nThis course is based on Python 3.\nWant to program networks using Python, but not sure where to start? Well, this course will show you how you can start programming Cisco networks within 20 minutes.\nThis course was created for network engineers. There are too many other Python courses out there that try to make network engineers software developers. Instead of teaching network automation, they teach you Python theory. This course is different.\nThis course is practical. I won't talk about programming in abstract terms and make you wait before you can start automating networks. I will show you how you can quickly and easily start network programming by using GNS3, Cisco IOS and Python.\nYou will see demonstrations of the configuration of both Cisco routers and switches in GNS3. For example, how to configure multiple VLANs on a multiple switches, or how to configure OSPF on a router and more.\nThis course shows you practical examples of using Python to programmatically configure Cisco network devices rather then just talking about it.\nThe days of configuring Cisco networks only with the command line interface (CLI) are drawing to a close. You need to add network programmability using Python and APIs to your skill set.\nLearn how to automate networks using:\n- Telnet\n- SSH\n- Paramiko\n- Netmiko\n- NAPALM\nTools such as NAPALM and Netmiko make it easy to configure and interact with network devices using an API such as NETCONF or using SSH. Don't reinvent the wheel. Use the tools available to you to quickly and easily automate your networks.\n\nSome comments about the course:\n\"Knowing the material from just the first video would have saved me hours of work and rework in the past.\"\n\"It's the easiest, most fun, and most valuable course I've completed yet on Python Programming for Networking. Love it! Thanks again David!!!\"\n\"Excellent course on Network Programming using Python with lot's of practical network configuration examples.\"\n\"Great way of explanation.Nice video and inspiring words! Thank you so much David. You are genius.\"\n\"I've been doing network automation for a while, even so, I've learned new things through this course. The instructor start from a basic example, adding improvements in each step. It's a skill that's worth it.\"\n\"A must for all network engineers who want to learn python!!! I had very \"very\" basic programming skills, and couldn't just get the bridge between network and programming (mainly Python - since that's where the hype is now), this course was amazing, I have never been glued to a training course since I can remember. The couple of things I loved the most about this course: 1- David's clear voice. 2- Real world application, not only will David interduce different real-world practical modules that you can import and use, but he shows you how to apply them on ios devices.\"\n\"Excellent course on Network Programming using Python with lot's of practical network configuration examples. High quality content.\"",
      "target_audience": [
        "Network Engineers",
        "Network Architects",
        "If you are interested in network automation",
        "If you are interested in network programmability",
        "Anyone wanting to learn how to apply Python programming to network automation"
      ]
    },
    {
      "title": "Software Engineer Interview Unleashed",
      "url": "https://www.udemy.com/course/software-engineer-interview-unleashed/",
      "bio": "Learn how to make yourself ready for software engineer interviews from a former Google interviewer.",
      "objectives": [
        "Overall interview process",
        "Who they want to hire",
        "How they interview candidates",
        "Good/poor signals",
        "Interview questions",
        "How to prepare phone/onsite interviews",
        "Phone/onsite interview examples"
      ],
      "course_content": {},
      "requirements": [
        "Some coding skills.",
        "Great if you understand hash map and binary search tree, but not required."
      ],
      "description": "Are you a software engineer? And do you want to get a job at great software engineering companies like Google, Meta, OpenAI, or NVidia? If yes, you are at the right place!\nGetting a job offer from those companies is very challenging but not something you cannot get. You have already spent hundreds of thousands of dollars for your study and degrees, and I believe you are almost ready to get job offers. However, there are several missing pieces that you need to learn throughout this course.\n\n\nGetting a job offer means so many things:\nYour income would increase by a large amount, in some cases even more hundred thousand dollars.\nBetter chance for your career development.\nYou can work with great people.\n\n\nIn this course, you will learn:\nOverall interview processes for internship position, full-time SWE, PhD candidates, and experienced SWEs.\nHow to start your interview process.\nHow to well prepare those technical interviews.\nWatch actual examples of phone and onsite interviews and see how they are evaluated.\n\n\nRequirements\nSome coding skills, but not much.\nGreat if you understand hash map and binary search tree, but not required.\nDesire to work as a software engineer.\n\n\nWhat to learn in this course\nOverall interview process\nWho they want to hire\nHow they interview candidates\nGood/poor signals\nInterview questions\nHow to prepare phone/onsite interviews\nExamples.\n\n\nTarget Audiences\nCollege freshman/sophomore, looking for engineering practicum intern.\nCollege junior/senior or MS/PhD, majoring CS or related eng/science degree, looking for engineering intern.\nNew college grad majoring engineering, looking for a fulltime position.\nExperienced software engineer/researcher, looking for a career advance.",
      "target_audience": [
        "College freshman/sophomore, looking for engineering practicum intern.",
        "College junior/senior or MS/PhD, majoring CS or related eng/science degree, looking for engineering intern.",
        "New college grad majoring eng, looking for a fulltime position.",
        "Experienced software engineer/researcher, looking for a career advance."
      ]
    },
    {
      "title": "Learn Advanced Python Programming",
      "url": "https://www.udemy.com/course/learn-advanced-python-programming/",
      "bio": "Make yourself a Pro by learning Advance Level Python Concepts and make Professional Python based Applications",
      "objectives": [
        "Develop Real time and Advance Python Based Applications using advance concepts",
        "Enhance your knowledge to a Professional Level",
        "Enhance your Game Development knowledge",
        "Learn the Intuition behind Advance Level Concept"
      ],
      "course_content": {
        "Installing Python and Setting up an IDE": [
          "Installing Python and Setting up an IDE"
        ],
        "Linked List": [
          "Introduction to Linked List",
          "Why Linked List",
          "Pros and Cons of Linked List",
          "Structure of Linked List",
          "Types of Linked List",
          "Create and Traverse a SLL",
          "Insertion at End of SLL (Intuitions)",
          "Insertion at End of SLL",
          "Insertion at Start of SLL (Intuitions)",
          "Insertion at Start of SLL",
          "Insertion in Between of SLL (Intuitions)",
          "Insertion in Between of SLL",
          "Delete a Node in SLL (Intuitions)",
          "Delete a Node in SLL",
          "Count No of Elements in SLL",
          "Removing Duplicates from Unsorted SLL",
          "Removing Duplicates from Sorted SLL",
          "Swap Nodes in a SLL",
          "Creation of DLL",
          "Append to a DLL (Intuitions)",
          "Append to a DLL",
          "Insertion at Start of DLL (Intuitions)",
          "Insertion at Start of DLL",
          "Insertion in Between of DLL (Intuitions)",
          "Insertion in Between of DLL",
          "Deletion from End of DLL (Intuitions)",
          "Deletion from End of DLL",
          "Deletion from Start of DLL (Intuitions)",
          "Deletion from Start of DLL",
          "Deletion from In between of DLL (Intuitions)",
          "Deletion from In between of DLL",
          "Creation of CLL",
          "Insertion of Start of CLL (Intuitions)",
          "Insertion at Start of CLL",
          "Insertion at End of CLL (Intuitions)",
          "Insertion at End of CLL",
          "Insertion In between of CLL (Intuitions)",
          "Insertion In between of CLL",
          "Delete from a CLL (Intuitions)",
          "Delete from a CLL",
          "Difference btw SCLL and DCLL"
        ],
        "Magic Functions": [
          "Magic Functions- Introduction",
          "Binary Operators-Magic Methods",
          "Unary Operators-Magic Methods",
          "Comparison Operators-Magic Methods",
          "Extended Assignment Operator-Magic Methods",
          "Examples-Magic Methods"
        ],
        "Threads": [
          "Section Overview",
          "Process vs Thread",
          "Main Thread",
          "Ways of Creating Threads in Python",
          "Using Functions to create Thread",
          "Thread Names",
          "Targeting Multiple Thread",
          "Creating Thread by extending the Thread Class",
          "Creating Thread without extending the Thread Class",
          "Multi-Threading",
          "Sleep Method",
          "Programming the Scenario",
          "Producer Consumer Problem",
          "Synchronization with Locks",
          "Semaphores"
        ],
        "Socket Programming": [
          "Section Overview",
          "What is a Socket",
          "Network and Internet",
          "TCP vs UDP",
          "Lets start Socket Programming",
          "Server Side",
          "Client Side",
          "File Server",
          "File Client",
          "GUI Based Chat Room Overview",
          "Chat Room Server side",
          "Chat Room Client Side"
        ],
        "Python Comprehension": [
          "Comprehension Introduction",
          "List Comprehension",
          "Dictionary Comprehension"
        ],
        "Decorators": [
          "Meta Programming- Introduction",
          "Decorators Introduction",
          "Function Decorators",
          "More on Function Decorators",
          "Class Decorators",
          "Meta Classes - Introduction",
          "Creating Meta Classes"
        ],
        "Descriptors": [
          "Descriptors- Introduction",
          "Get, Set and Del Descriptors",
          "Calling a Descriptor",
          "Decorator Protocol"
        ],
        "Random Module": [
          "All about Random Module"
        ],
        "Simple Mail Transfer Protocol(SMTP)": [
          "Section Overview",
          "Understanding SMTP",
          "Sending Emails using the SMTP module",
          "Sending Rendered HTMLEmails",
          "Sending Emails with some kind of Attachment"
        ]
      },
      "requirements": [
        "Basics of Python is required",
        "Basics Object Oriented Concepts",
        "Laptop with at least 2GB of RAM Required"
      ],
      "description": "In this course I will take you from a basic knowledge of Python to using more Advanced features of the language. We will make some advance Python Applications like Download Manager using Advance Concepts to make you a Professional Programmer able to get good jobs in this field. This course is for those who have learnt some Basics Python and want to deepen the knowledge of Python and are looking for the Next Step. You will never be able to succeed in Programming Field until you learn Advance Concepts so that is why I have made this course to make you guys capable to design your own Applications and be a successful Programmer.\n\n\nThis Course is also for those who want to get a Job on the basis of their Python Skills. Special Attention is given to those Topics that are being asked in the interview quite often. For this reason, we have given a lot of time on the intuition part of Advance Concepts so that you actually know what is happening behind the scenes and how Python is doing it. We then implemented these Concepts in Python with Proper Real World Examples so that the Concepts make a lot of Sense to you. Just by sticking on the Basics concept will not do the job. You have to learn advance concepts to be a Professional so just take this Course and become a Pro Programmer...\n\n\n\n\nLets Get Started...",
      "target_audience": [
        "Anyone who has done the basics of Python and wish to become a pro in Python by developing advance Applications",
        "Anyone who wish to learn advance Gaming Concepts",
        "Anyone who wish to learn the science of Animations",
        "Anyone who wish to learn the Intuition behind Advance Level Concept"
      ]
    },
    {
      "title": "GraphQL API with Java Spring Boot & Spring Framework",
      "url": "https://www.udemy.com/course/graphql-with-java-spring-boot-query-mutation-schema-resolver-edge-jpa/",
      "bio": "GraphQL API with Java Spring Boot & Spring Data JPA and MySQL. Learn GraphQL Query, Mutation, Schema, Resolver, Edge",
      "objectives": [
        "You will learn GraphQL with Spring Boot",
        "You will learn What is GraphQL ?",
        "You will learn What is GraphQL Query ?",
        "You will learn What is GraphQL Mutation ?",
        "You will understand difference between GraphQL and REST APIs",
        "You will learn GraphQL Query and Mutation with Spring Boot and Spring Data JPA",
        "You will learn to write GraphQL queries to get the data"
      ],
      "course_content": {},
      "requirements": [
        "Need to have basic knowledge of Java Programming Language & Apache Maven",
        "Need to have basic knowledge of Spring Boot and Spring Data JPA"
      ],
      "description": "***** Some Reviews From Students *****\nbest course on graphql. learned a lot.\nlearning in simple words and explained very well. thanks\nA very good introductory course to learn GraphQL from scratch and implementing the backend in Java using Spring.\nVery informative. Easy concept explanations and equally well practicals.\n\n\nIn this course you are going to learn to GraphQL With Spring Boot and Spring Data JPA.\n\n\nNow a days Spring framework is widely used among Java Developers and specifically Spring Boot is in high demand to develop REST APIs.\nThe problem with REST APIs is that it is giving fixed response in the format of the JSON ( JavaScript Object Notation ). So there comes GraphQL in picture. GraphQL provides flexibility that in request itself we can ask which fields we want in response and it populates only those fields.\nIn simple words we can say select * query in SQL database is like REST API while ability to provide columns (fields) with query and to return only those fields is GraphQL.\nGraphQL boosts performance of your application and it gives consumers flexibility that which attributes they want in response. REST API has problem of under and over fetching of data because of fixed structure of response and GraphQL eliminates this by providing only those attributes which are asked in the request.\n\n\nIn this course you will learn GraphQL in detail with Spring Boot and Spring Data JPA using MySQL database. In this course you will learn :-\nWhat is GraphQL ?\nDifference between GraphQL and REST API\nWhat is Query in GraphQL ?\nWhat is Mutation in GraphQL ?\nWhat is Schema in GraphQL ?\nWhat is Resolver in GraphQL ?\nWhat is Edge in GraphQL ?\nIn this course you will learn to create GraphQL Query and Mutation with Spring Boot. You will learn to create Resolver with Edge in Spring Boot.\n\n\nProject lombok is used to avoid boiler plate code in your Java Application. In this course you learn how to use Project Lombok with Spring Boot Application and you will learn -\nHow to have getter methods for Java Class using @Getter Annotation.\nHow to have setter methods for Java Class using @Setter Annotation.\nHow to have constructor for Java Class using @NoArgsConstructor and @AllArgsConstructor Annotations.\nAfter finishing the course you will be able write GraphQL queries as shown in Promo video and also you will be able to deploy your GraphQL-Spring Boot Application to Heroku which is Cloud Platform.\nLets start journey of GraphQL with Spring Boot and Spring Data JPA.\n\n\nCourse Topics & Lectures :-\nIntroduction\nIntroduction\nAltair GraphQL Client\nIntroduction To GraphQL\nWhat is GraphQL ?\nWhat is GraphQL Query ?\nWhat is GraphQL Mutation ?\nWhat is GraphQL Schema ?\nGraphQL vs REST API\nProject Lombok With Spring Boot\nWhat is Lombok and Why We Need Lombok ?\nSpring Boot App For Lombok\nLombok Installation\nGetters and Setters With Lombok\nConstructors With Lombok\nGetting Started With GraphQL\nSpring Boot App with REST APIs\nSetting Up Spring Boot App with GraphQL\nWriting First Query with GraphQL\nDefining GraphQL Schema\nRun Query with GraphQL and Spring Boot\nRunning GraphQL Query with AltAir plugin\nGraphQL Query\nGraphQL with Input Data\nJSON Inputs For GraphQL Query\nValidations with GraphQL Schema\nChange URL Of Application\nGraphQL Query With Spring Data JPA\nGraphQL App with Spring Data JPA\nGraphQL Query with Response Model Class\nFlexibility Of Response with GraphQL Query\nGet List Of Data with GraphQL Query\nGraphQL Resolver\nWhat is Resolver in GraphQL ?\nCreating First Resolver with GraphQL\nGetting Data with GraphQL Resolver\nMore with GraphQL Resolver\nGraphQL Edges\nWhat is Node and Edge in GraphQL ?\nWhy Need Data Filter On Edge ?\nData Filter with GraphQL Edge\nGet Filtered Data with GraphQL Edge\nGet All Data with GraphQL Edge and Filter\nGraphQL Mutation\nCreate Mutation with GraphQL\nMutation Input Schema with GraphQL\nRunning First Mutation with GraphQL\nMore with GraphQL Query\nEnum As Input For Query\nEnum In GraphQL Schema\nQuery Data By Enum\nGraphQL-Spring Boot Deployment to Heroku (Cloud Platform)\nIntroduction To Heroku\nCreate Account On Heroku\nVerify Account On Heroku\nDownload and Install Git\nDownload & Install Heroku CLI\nCreate Heroku Application\nGetting MySQL Database on Heroku\nUploading data From Local MySQL to Heroku MySQL (SQL Dumping)\nHeroku CLI Login\nDeploy Spring Boot App On Heroku\nCheck Logs For Heroku Application\nHeroku Application Settings\nGraphQL Variable\nWhat is GraphQL Variable ?\nGraphQL Variable with Query\nGraphQL Variable with Mutation\nMultiple GraphQL Variables\nGraphQL Client with Spring Boot\nUpdating GraphQL App with Latest Versions\nIntroduction To GraphQL Client\nCreate GraphQL Client Spring Boot App\nGraphQL Client To Call GraphQL Query\nGraphQL Client with Variable\nGraphQL Client To Call GraphQL Mutation",
      "target_audience": [
        "Any Java Developer wants to learn GraphQL with Spring Boot"
      ]
    },
    {
      "title": "Programming Numerical Methods in Python",
      "url": "https://www.udemy.com/course/programming-numerical-methods-in-python/",
      "bio": "A Practical Approach to Understand the Numerical Methods",
      "objectives": [
        "Program the numerical methods to create simple and efficient Python codes that output the numerical solutions at the required degree of accuracy.",
        "Create and manipulate arrays (vectors and matrices) by using NumPy.",
        "Use the plotting functions of matplotlib to present your results graphically.",
        "Apply SciPy numerical analysis functions related to the topics of this course."
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Roots of High-Degree Equations": [
          "Introduction and Simple Iterations Method",
          "Simple Iterations Method: Code I (for Loop)",
          "Simple Iterations Method: Code II (while Loop)",
          "Convergence vs Divergence",
          "Newton-Raphson Method",
          "Bisection Method: Algorithm",
          "Bisection Method: Code",
          "False Position (Regula Falsi) Mehtod",
          "Secant Method",
          "User-Defined Functions & Run-Time Input",
          "Root Finding in SciPy & Summary"
        ],
        "Interpolation and Curve Fitting": [
          "Introduction and Linear Interpolation Method",
          "Lagrange's Method: Algorithm",
          "Lagrange's Method: Code",
          "Newton's Method: Algorithm",
          "Newton's Method: Code",
          "Linear Regression: Algorithm",
          "Linear Regression: Code I (for Loop)",
          "Linear Regression: Code II (NumPy Arrays)",
          "Polynomial Fit: Algorithm",
          "Polynomial Fit: Code",
          "Interpolation Functions of SciPy",
          "Curve Fitting Functions of SciPy & Summary"
        ],
        "Numerical Differentiation": [
          "Introduction and Finite Differences Method",
          "Finite Differences Method: Code I",
          "Finite Differences Method: Code II",
          "Plotting Derivative Curves",
          "Numerical Differentiation Function in SciPy & Summary"
        ],
        "Numerical Integration": [
          "Introduction & Trapezoidal Rule: Algorithm",
          "Trapezoidal Rule: Code",
          "Simpson's 1/3 Rule: Algorithm",
          "Simpson's 1/3 Rule: Code",
          "Simpson's 3/8 Rule: Algorithm",
          "Simpson's 3/8 Rule: Code",
          "Double Integration: Algorithm",
          "Double Integration: Code",
          "Quadrature in SciPy & Summary"
        ],
        "Systems of Linear Equations": [
          "Introduction & Gauss Elimination Method: Algorithm",
          "Gauss Elimination Method: Code I (Elimination)",
          "Gauss Elimination Method: Code II (Back-Substitution)",
          "Gauss Elimination Method: Code III (Modifications)",
          "Jacobi's Method: Algorithm",
          "Jacobi's Method: Code",
          "Gauss-Seidel's Method",
          "Diagonal Dominance",
          "Linear System Solution in NumPy and SciPy & Summary",
          "Gauss-Jordan Method: Procedure",
          "Gauss-Jordan Method: Algorithm & Code"
        ],
        "Ordinary Differential Equations": [
          "Introduction & Euler's Method",
          "Second Order Runge-Kutta's Method",
          "Fourth Order Runge-Kutta's Method",
          "Fourth Order Runge-Kutta's Method: Plot Numerical and Exact Solutions",
          "Higher-Order ODE's: Algorithm",
          "Higher-Order ODE's: Code",
          "Higher-Order ODE's: Plotting Solutions",
          "ODE Solution in SciPy & Summary"
        ]
      },
      "requirements": [
        "You should have a good background in algebra and calculus, in addition to the basic knowledge about computers",
        "A Python IDE and its libraries NumPy, matplotlib and SciPy should be installed on your computer.",
        "No previous experience in programming in Python is required."
      ],
      "description": "Many of the Numerical Analysis courses focus on the theory and derivations of the numerical methods more than the programming techniques. Students get the codes of the numerical methods in different languages from textbooks and lab notes and use them in working their assignments instead of programming them by themselves.\nFor this reason, the course of Programming Numerical Methods in Python focuses on how to program the numerical methods step by step to create the most basic lines of code that run on the computer efficiently and output the solution at the required degree of accuracy.\nThis course is a practical tutorial for the students of Numerical Analysis to cover the part of the programming skills of their course.\nIn addition to its simplicity and versatility, Python is a great educational computer language as well as a powerful tool in scientific and engineering computations. For the last years, Python and its data and numerical analysis and plotting libraries, such as NumPy, SciPy and matplotlib, have become very popular programming language and tool in industry and academia.\nThat’s why this course is based on Python as programming language and NumPy and matplotlib for array manipulation and graphical representation, respectively. At the end of each section, a number of SciPy numerical analysis functions are introduced by examples. In this way, the student will be able to program his codes from scratch and in the same time use the advanced library functions in his work.\nThis course covers the following topics:\nRoots of High-Degree Equations\nInterpolation and Curve Fitting\nNumerical Differentiation\nNumerical Integration\nSystems of Linear Equations\nOrdinary Differential Equations",
      "target_audience": [
        "The students who currently study their first course in numerical methods and need to understand how the methods are coded in detail.",
        "The students who need to create their own numerical analysis codes or use Python numerical libraries for their course, project or thesis works."
      ]
    },
    {
      "title": "Secure Coding and Design Best Practices in NodeJs JavaScript",
      "url": "https://www.udemy.com/course/secure-coding-and-design-best-practices-in-nodejs-javascript/",
      "bio": "Secure Coding in JavaScript with Design Principles and practice - helpful in PCI-DSS compliance",
      "objectives": [
        "Secure Coding Design Principles",
        "Secure Design code Practices",
        "Secure Coding in NodeJs",
        "Secure Coding in JavaScript"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the Course"
        ],
        "On Boarding": [
          "OnBoaring",
          "Introduction to Secure Coding",
          "Course Resources"
        ],
        "Secure Design": [
          "What Are Secure Design Principles",
          "Economy of mechanism",
          "Fail Safe Defaults",
          "Complete Mediation",
          "Open Design",
          "Least Privilege",
          "Psychological Acceptability",
          "Separation of Privilege",
          "Least Common Mechanism",
          "Work Factor",
          "Compromise Recording",
          "Summary"
        ],
        "Secure Coding Practices": [
          "Introduction",
          "Strong Authentication",
          "Strong Authentication Demo",
          "Strong Authentication Measures",
          "Access Control",
          "Demo : Importance of Secure Access Control",
          "Secure Configuration",
          "Secure Configuration Demo",
          "Sensitive Data Protection",
          "Sensitive Data Protection Demo",
          "Serialization and Deserialization",
          "Secure Deserialization Demo",
          "Relying on Trusted Components",
          "Relying on Trusted Components Demo",
          "Precise Logging And Monitoring",
          "Precise Logging Demo",
          "Server Side Request Validations",
          "Injection And inclusion",
          "SQL Injection Demo",
          "Other Things to be careful About"
        ],
        "Understanding Risks - OWASP-TOP-10": [
          "OWASP 10",
          "OWASP 10 Link",
          "OWASP 10 - Demo"
        ],
        "Security Management": [
          "Setting up Product Development Model and Lifecycle",
          "Analysis of written code",
          "Analysis of written code : Helper Tools",
          "Corrections in Code or design",
          "Timely vulnerability checkups and Security Trainings",
          "OWASP Dependency Check",
          "Summary"
        ],
        "Course Summary and Thank you": [
          "Thank you!"
        ]
      },
      "requirements": [
        "JavaScript basics Knowledge"
      ],
      "description": "Secure Coding and Design Practice in NodeJs JavaScript\n\n\nSecure coding is a way of writing computer programs that makes them less vulnerable to security threats like hacking and viruses or data leaks.\nWhen we write software, we want to make sure it is built in a way that keeps it safe from the attackers who might want to break in and do real bad things, like steal information or cause damage to the application or data.\nOne of the rough truth is that new vulnerabilities are constantly being discovered, which can compromise the security of software systems. This means that even if a software application was secure at one point in time, it may become vulnerable to attack as new weaknesses are identified and exploited by attackers.\nWhat is the way to achieve this?\nThe answer is we have to follow certain guidelines and best practices at every stage of development that help us identify and address potential security risks. By doing this, we can better protect sensitive data and prevent unauthorised access or manipulation of the software by attackers.Also, focussing on applications security and updating the application time to time as per the updating security standards.\nIt's essential to prioritise secure coding practices because most businesses today rely on software to run their operations. Software can either be custom-made specifically for the business or purchased from other companies. Building software can be a time-consuming and costly process, but unfortunately, the security of the software often doesn't receive enough attention\nIt is not part of day to day programming by developers. There are a few challenges that architects and developers face to achieve code security:\nLack of knowledge:\nMany new developers may not have a comprehensive understanding of secure coding practices and may not be aware of the potential vulnerabilities in their code.\nLimited resources:\nSmall teams or individual developers may not have the resources to implement complex security measures or to conduct thorough testing of their code.\nTime constraints: Developers may be under pressure to deliver code quickly, which can lead to shortcuts being taken and security being overlooked.\nEvolving threats:\nThe security landscape is constantly changing, and new threats can emerge quickly. Developers need to stay up-to-date with the latest threats and vulnerabilities to ensure that their code remains secure.\nCompatibility issues:\nSecure coding can sometimes conflict with other requirements, such as compatibility with legacy systems or third-party software, which can make it difficult to implement.\nThese are the challenges faced during the development. The best solution to this is to know the security practices prior to start a new development so that they can be taken in consideration from the very start.This means making sure that all developers understand the basics of secure coding practices and that security is considered throughout the development process Developers should educate themselves on secure coding practices and keep themselves updated with new security vulnerabilities and their solutions.\n\n\nTOC :\n1. OnBoarding\n2. Introduction of Secure Coding\n3. Secure Design\n4. Understanding the RISKS\n5. Security Management\n6. Summary\n7.  Appendix",
      "target_audience": [
        "Developers who want to ship Secure code in production"
      ]
    },
    {
      "title": "Break Away: Programming And Coding Interviews",
      "url": "https://www.udemy.com/course/break-away-coding-interviews-1/",
      "bio": "A course that teaches pointers, linked lists, general programming, algorithms and recursion like no one else",
      "objectives": [
        "Know how to approach and prepare for coding interviews",
        "Understand pointer concepts and memory management at a very deep and fundamental level",
        "Tackle a wide variety of linked list problems and know how to get started when asked linked list questions as a part of interviews",
        "Tackle a wide variety of general pointer and string problems and know how to answer questions on them during interviews",
        "Tackle a wide variety of general programming problems which involve just plain logic, no standard algorithms or data structures, these help you get the details right!"
      ],
      "course_content": {
        "Introduction": [
          "Coding interviews are tough - but beatable"
        ],
        "Pointer and Arrays": [
          "Materials",
          "Introduction to pointers",
          "Pointer problems and arrays",
          "Pointer arithmetic",
          "Practice makes perfect - pointer problems"
        ],
        "Strings are just pointers at heart": [
          "Working with strings",
          "Pointer as arguments to functions",
          "Practice makes perfect - string problems"
        ],
        "Linked lists can be fun!": [
          "Pointers to pointers - bend your mind",
          "Pointers to pointers - reassignment and modification",
          "Get started with linked lists",
          "Warming up to - they get tricky quickly",
          "Cruising along - linked lists are fun aren't they?",
          "Autopilot - linked lists are easy after all",
          "Do not overlook the doubly linked list"
        ],
        "Bit Manipulation": [
          "Bit Manipulation - I",
          "Bit Manipulation - II",
          "Useful Bit Manipulation Techniques",
          "Get And Set The Nth Bit",
          "Print And Count Bits",
          "Reverse The Bits In An Integer"
        ],
        "General programming problems - practice makes perfect": [
          "Starting up - palindromes and points within a distance",
          "Play the Game Of Life and Break A Document Into Chunks",
          "Run Length Encoding And Adding Numbers Digit By Digit",
          "Sudoku Board Validation and Incrementing A Number In Another Number System"
        ],
        "Big-O Notation, Sorting And Searching Algorithms": [
          "Performance and Complexity",
          "Big O Notation",
          "Big O Notation More Examples",
          "Sorting Trade-Offs",
          "Selection Sort",
          "Bubble Sort",
          "Insertion Sort",
          "Shell Sort",
          "Merge Sort",
          "Quick Sort",
          "Binary Search - search quickly through a sorted list"
        ],
        "Recursion and the recursive sense": [
          "What is recursion - why is it so hard?",
          "Binary search - implemented recursively",
          "Find all subsets of a set",
          "Check whether 2 binary trees are the same",
          "Implement paint fill to color a region on screen",
          "Build A car Given Tasks And Dependencies",
          "Generate Anagrams Of A Word",
          "Help A Rat Find It's Way Through a Maze",
          "Place 8 Queens On A Board Safely"
        ],
        "Stacks And Queues": [
          "Meet The Stack - Simple But Powerful",
          "Building A Stack Using Java",
          "Match Parenthesis To Check A Well Formed Expression",
          "Find The Minimum Element In A Stack In Constant Time",
          "Meet The Queue - A Familiar Sight In Everyday Life",
          "The Circular Queue - Tricky But Fast",
          "Build A Queue With Two Stacks"
        ],
        "Binary Trees": [
          "Meet The Binary Tree - A Hierarchical Data Structure",
          "Breadth First Traversal",
          "Depth First - Pre-OrderTraversal",
          "Depth First - In-Order and Post-Order Traversal"
        ]
      },
      "requirements": [
        "This course requires some basic understanding of a programming language, preferably C. Some solutions are in Java, though Java is not a requirement"
      ],
      "description": "Programming interviews are like standard plays in professional sport - prepare accordingly. Don't let Programming Interview gotchas get you down!\nProgramming interviews differ from real programming jobs in several important aspects, so they merit being treated differently, just like set pieces in sport.\nJust like teams prepare for their opponent's playbooks in professional sport, it makes sense for you to approach programming interviews anticipating the interviewer's playbook\nThis course has been drawn by a team that has conducted hundreds of technical interviews at Google and Flipkart\nWhat's Covered:\n\nPointers: Memory layout of pointers and variables, pointer arithmetic, arrays, pointers to pointers, pointers to structures, argument passing to functions, pointer reassignment and modification - complete with visuals to help you conceptualize how things work.\nStrings: Strings, Character pointers, character arrays, null termination of strings, string.h function implementations with detailed explanations.\nLinked lists: Visualization, traversal, creating or deleting nodes, sorted merge, reversing a linked list and many many problems and solutions, doubly linked lists.\nBit Manipulation: Work with bits and bit operations.\nSorting and searching algorithms: Visualize how common sorting and searching algorithms work and the speed and efficiency of those algorithms\nRecursion: Master recursion with lots of practice! 8 common and uncommon recursive problems explained. Binary search, finding all subsets of a subset, finding all anagrams of a word, the infamous 8 Queens problem, executing dependent tasks, finding a path through a maze, implementing PaintFill, comparing two binary trees\nData Structures: Understand queues, stacks, heaps, binary trees and graphs in detail along with common operations and their complexity. Includes code for every data structure along with solved interview problems based on these data structures.\nStep-by-step solutions to dozens of common programming problems: Palindromes, Game of Life, Sudoku Validator, Breaking a Document into Chunks, Run Length Encoding, Points within a distance are some of the problems solved and explained.",
      "target_audience": [
        "YEP! New engineering graduate students who are interviewing for software engineering jobs",
        "YEP! Professionals from other fields with some programming knowledge looking to change to a software role",
        "YEP! Software professionals with several years of experience who want to brush up on core concepts",
        "NOPE! Other technology related professionals who are looking for a high level overview of pointer concepts."
      ]
    },
    {
      "title": "Master Go Programming (Golang): Complete Bootcamp",
      "url": "https://www.udemy.com/course/master-go-programming-complete-golang-bootcamp/",
      "bio": "Become a Pro Go Programmer: Learn Golang from Scratch with Hands-On Projects and Real-World Applications",
      "objectives": [
        "Become a professional Go programmer and get hired.",
        "You will MASTER all Go (Golang) key concepts starting from scratch. No prior Go knowledge is required.",
        "For each Go key concept you'll get HD Videos, coding sections, quizzes, practice exercises with solutions and slides.",
        "Build a COMPLETE understanding of Go from the ground. Write idiomatic, bug-free Go code using best practices.",
        "Learn to work with Go control flow structures: if, for, break, continue, switch, goto, labels etc.",
        "Master all Go data structures in depth: arrays, slices, strings, maps, structs.",
        "Learn to work efficiently with pointers.",
        "Learn to work efficiently with files.",
        "Master the full power of methods and interfaces (Go OOP).",
        "Understand Go concurrency in depth: WaitGroups, Mutexes, Buffered and Unbuffered Channels, Select Statement and Patterns.",
        "Build massively concurrent programs with Goroutines and Channels.",
        "Hundreds of hands-on exercises with solutions and quizzes.",
        "Go Packages and Modules in depth"
      ],
      "course_content": {},
      "requirements": [
        "A computer (Windows, Mac, or Linux) with an Internet connection. That's it!",
        "No prior Go programming knowledge is required. You will learn everything from scratch!",
        "PC Skills such as downloading and installing a program, opening a terminal and running basic commands etc",
        "Your time and enthusiasm to learn."
      ],
      "description": "Join the Ultimate Go Programming (Golang) Bootcamp and Propel Your Career!\n\n\nAre you ready to master Golang programming and become a proficient Golang developer? This comprehensive course is your one-stop destination to learn Go from the ground up. Whether you're a beginner or an experienced programmer aiming to upskill, this bootcamp will take you from zero to hero.\n\n\nWhy Learn Go (Golang)?\nIn-Demand Language: Go is rapidly becoming the language of choice for developers worldwide, used by industry giants like Google, Uber, Netflix, and Dropbox.\nHigh Performance: Combines the simplicity of Python with the efficiency of C++, perfect for scalable, high-performance applications.\nCareer Advancement: Mastering Go opens doors to exciting opportunities in software development, cloud services, and more.\nWhat Makes This Go Programming Course Unique?\nUp-to-Date Content: Fully updated for 2024, covering the latest features and best practices in Go programming.\nHands-on Learning: Over 100 practical coding exercises and real-world projects to reinforce your learning.\nExpert Instruction: Learn from a Senior Software Engineer with 20 years of experience and a passion for teaching.\nComprehensive Coverage: Dive deep into Go fundamentals, advanced topics, and everything in between.\nWhat You'll Learn:\nGo Setup and Tools:\nInstall Go, Git, and VSCode on Windows, Mac, and Linux.\nUse Go tools like go fmt to write idiomatic code.\nCore Concepts:\nVariables, constants, operators, data types, and control structures.\nUnderstanding of zero values, type conversions, and scopes.\nData Structures:\nWork with arrays, slices, maps, and structs effectively.\nManipulate strings, runes, bytes, and UTF-8.\nFunctions and Methods:\nMaster user-defined functions, variadic and anonymous functions.\nImplement methods and interfaces (Go OOP concepts).\nGo Packages and Modules:\nOrganize code with packages and modules.\nPublish your own modules on GitHub.\nConcurrency in Go:\nHarness goroutines, channels, mutexes, and waitgroups.\nAvoid data races and use the Go race detector.\nError Handling and File Operations:\nHandle errors gracefully.\nPerform file I/O operations using Go's standard library.\nReal-world Projects:\nBuild practical applications to solidify your understanding.\nEngage in coding sections full of examples.\nBonus Features of this Golang course:\nExclusive Online Community: Access to a private group for personalized support and networking.\nLifetime Access: Enjoy lifetime access to course materials, including future updates.\n30-Day Money-Back Guarantee: Enroll with confidence knowing you can get a full refund if you're not satisfied.\nTake the Leap and Transform Your Skills!\nDon't miss this opportunity to become a sought-after Go programmer. Enroll now and start your journey towards mastering Golang.\nWho This Go Bootcamp Is For:\nBeginners: Aspiring programmers starting from scratch.\nExperienced Developers: Professionals looking to add Go to their skillset.\nEnthusiasts: Anyone interested in building high-performance, scalable applications.\nEnroll Today and Unlock the Power of Go Programming!\nEmbark on a transformative learning experience and master the skills that top tech companies are seeking. Join now and let's get started with Golang!",
      "target_audience": [
        "Beginners with very basic programming experience.",
        "Programmers switching languages to Go.",
        "Programmers who know Go basics and want to master Golang.",
        "This course should not be attended by senior Go programmers."
      ]
    },
    {
      "title": "Python Demonstrations For Practice Course",
      "url": "https://www.udemy.com/course/python-for-beginners-demonstration-course/",
      "bio": "This course is a depth introduction to fundamental python programming concepts by demonstrations in Python programming .",
      "objectives": [
        "Demonstrations of All Basics and Essentials Concepts In Python Language",
        "Variables, Data Types, Type Conversion, Functions, Statements and Expressions All Demonstrations",
        "Getting Started,Values and Data Types, Operators and Operands, Function Calls",
        "Use variables to store, retrieve and calculate information",
        "Write scripts for general productivity tasks Read and comprehend Python code Gain knowledge in regard to general programming concepts"
      ],
      "course_content": {
        "Introduction": [
          "Tutorial 1-Installing Anaconda",
          "Tutorial 2-Python Overview(Demonstration)",
          "Tutorial 3-Python Variables And Constants",
          "Tutorial 4-Python Class And Objects(demonstration)",
          "Tutorial 5-Python Array Implementation",
          "Tutorial 6-Python Keywords And Identifiers",
          "Tutorial 7-Python Tuples",
          "Tutorial 8-Python sets",
          "Tutorial 9-Python Different Modules",
          "Tutorial 10-Python Directory And File management",
          "Tutorial 11-Python Dictionary",
          "Tutorial 12-Python Strings",
          "Tutorial 13-Python Data Type Conversion",
          "Tutorial 14-Python Numbers",
          "Tutorial 15-Python Namespace and scope",
          "Tutorial 16-Python Global, Local And Nonlocal",
          "Tutorial 17-Python Global Keyword",
          "Tutorial 18-Python Iterators",
          "Tutorial 19-Python Iterations Using for",
          "Tutorial 20-Python Inheritance",
          "Tutorial 21-Python Multiple Inheritance",
          "Tutorial 22-Python Function Arguments",
          "Tutorial 23-Python Functions",
          "Tutorial 24-Python break statement",
          "Tutorial 25-Python continue statement",
          "Tutorial 26-Python Errors And Exceptions",
          "Tutorial 27-Python Exceptions Try.except and finally",
          "Tutorial 28-Python User Defined Exception",
          "Tutorial 29--Python OOP Approach",
          "Tutorial 30-Python Nested Dictionary Implementation",
          "Tutorial 31-Python Operator Overloading",
          "Tutorial 32- Python Statements And Comments",
          "Tutorial 33-Python Pass Statement.",
          "Tutorial 34-Python Generators",
          "Tutorial 35-Python Decorators",
          "Tutorial 36--Python While Loop",
          "Tutorial 37-Use of if .elif and else",
          "Tutorial 38-Python Matrix Implementation",
          "Tutorial 39-Python Regular Expressions",
          "Tutorial 40- Python List Comprehension",
          "Tutorial 41-Python Recursion",
          "Tutorial 42-Python Input, Outpt And Import",
          "Tutorial 43-Python Read and Write Operations",
          "Tutorial 44-Python Lamda Function",
          "Tutorial 45-Python Assert",
          "Tutorial 46-Python @property"
        ]
      },
      "requirements": [
        "A computer, Access to the internet, An interest in learning Python",
        "Only the very basic computer skills are needed"
      ],
      "description": "Learn Python From Beginner To Advanced Level By Demonstrations\nThe course is created thorough, extensive, but easy to follow content which you’ll easily understand and absorb.\nThe course starts with the basics, including Python fundamentals, programming, and user interaction.\n\n\nThe curriculum is going to be very hands-on as we walk you from start to finish becoming a professional Python developer. We will start from the very beginning by teaching you Python basics and programming fundamentals, and then going into advanced topics and different career fields in Python so you can get real-life practice and be ready for the real world.\n\n\nThe topics covered in this course are:\n* Beginner to Expert Python contents:\n\n\nInstalling Anaconda\nPython Overview\nArray implementation\nFile methods\nKeywords and Identifiers\nPython Tuples\nPython Basics\nPython Fundamentals\nData Structures\nObject-Oriented Programming with Python\nFunctional Programming with Python\nLambdas\nDecorators\nGenerators\nTesting in Python\nDebugging\nError Handling\nRegular Expressions\nComprehensions\nModules\nSee you inside the course!",
      "target_audience": [
        "For Complete Programming Beginners",
        "For People Who want to learn Python Fundamentals and later transition into Data Science or Web Development",
        "For People New to Python"
      ]
    },
    {
      "title": "Live Project On ASP.Net Core 2.0 MVC(Formerly ASP.Net MVC 5)",
      "url": "https://www.udemy.com/course/aspnet-mvc-web-app-on-3-tier-architecture/",
      "bio": "EF Core 2.0 Code First With Repository & ASP.Net Core 2.0 MVC with MVVM, DI Patterns & Identity Server For Security...",
      "objectives": [
        "BOL - .Net Core 2.0 Class Library",
        "DAL - EF Core 2.0 Code First Aproach With Repository Pattern",
        "BLL - C#.Net Core 2.0 With Iterator Pattern",
        "UI - ASP .Net Core 2.0 MVC with MVVM Pattern, Bootstrap4, JQuery based Ajax Calls",
        "Dependency Injections For Loose coupling",
        "Identity Server For Authentication And Authorization",
        "BOL - EF Database First Approach",
        "DAL - EF With Repository Pattern",
        "BLL - C#.Net",
        "UI - ASP .Net MVC 5, Bootstrap3, JQuery based Ajax Calls With Server Side paging",
        "Membership Providers For Authentication And Authorization"
      ],
      "course_content": {
        "Introduction": [
          "Introduction To Course"
        ],
        "Analysis And Design": [
          "Requirements Gathering, Identifying Objects And Relationships",
          "Designing Database",
          "Database Implementation And Understanding Architecture",
          "Creating Solution And Projects"
        ],
        "Implementing All The Layers": [
          "Creating Business Object Layer Using Entity Framework",
          "UI Prototyping",
          "Designing Controllers And Actions",
          "Implementing Bootstrap"
        ],
        "Implementing User And Admin Module": [
          "Creating Data Access Layer Using Repository Design Pattern",
          "Creating Business Logic Layer And Implement BrowseUrLs",
          "Filtering BrowseURLs",
          "Implementing Custom Sorting in MVC on BrowseUrls table",
          "Implementing Custom Paging in MVC on BrowseUrls table",
          "Implementing ListUsers, ListCategory And DeleteCategory"
        ],
        "Architectural Enhancements And Validations": [
          "Implementing CreateCategory With Forms Validation",
          "Implementing SubmitUrl And Adding Base Class in BLL - AdminBsClass",
          "Creating Base Classes For BLL And Controllers",
          "Implementing Approve Urls And UserRegistration"
        ],
        "Securing Asp.Net MVC Web App": [
          "Implementing Authentication-I",
          "Implementing Authentication-II",
          "Implementing Authorization"
        ],
        "Applying Bootstrap Theme": [
          "Applying New Bootstrap Theme And Implementing Slider-I",
          "Applying New Bootstrap Theme And Implementing Slider-II"
        ],
        "Implementing Transactions": [
          "Binding Multiple Models To A Single View",
          "Working With Identity Field",
          "Transactions"
        ],
        "Ajaxifying An MVC App": [
          "Ajaxifying Demo",
          "Making A JQuery Based Ajax Call",
          "Implementing Approve And Reject ALL With Update Progress Bar",
          "Partial Page Update In MVC"
        ],
        "External Login": [
          "Login With Gmail",
          "Login With Facebook"
        ]
      },
      "requirements": [
        "SQL Server 2008 Express or Higher",
        "VS2013 express or higher"
      ],
      "description": "Formerly : ASP.Net MVC5 With EF Database First Approach (Section 1 to 10)\nNewly Added : ASP.Net Core 2.0 MVC With EF Core 2.0 Code First Approach (Section 11)\nAre you really excited to learn how to develop a 3-Tier arch using Asp.Net MVC, jQuery, Bootstrap, C#.Net, Entity Framework and MS SQL Server?\nThen you are going to learn it here with me from scratch..\nIn this course we are going to learn how to break requirements into objects and find relation among them. We will then learn designing database out of this objects and relationships. Moving forward we will also see how to design arch. of the project and implement various layers.\nWe are going to learn implementation of business object layer using Entity Framework and data access layer using repository design pattern and Entity Framework.\nFor user interface we will see Asp.Net MVC, jQuery and Bootstrap. We will learn how bootstrap makes our application responsive.We will also see how to implement custom sorting and paging. Moving ahead you will learn forms validations and business rules validations as well. We are going to secure our app using custom membership provider and role provider and publish it on web.\nIn Advance operations we will try to understand how to implement transactions, bind multiple models to single view and Ajaxyfiy  our Asp.Net web App. Finally we will also see few optimization techniques.\nAs we know very well that Microsoft .Net world is moving towards .Net core on a fast track and it's the right time for us to upgrade our technical skills to ASP.Net Core 2.0.\nTo help you out in making you remain up to date in the competitive world of IT. We will also learn how to create a live project using ASP.Net Core 2.0 MVC and Entity Framework Core 2.0 Code First Approach.\nNew Features Will Be Added:\nBOL - .Net Core 2.0 Class Library - (Updated On 28 July , 2018)\nDAL - EF Core 2.0 Code First Aproach With Repository Pattern\nBLL - C#.Net Core 2.0 With Iterator Pattern\nUI - ASP.Net Core 2.0 MVC with MVVM Pattern\nDependency Injections For Loose coupling\nIdentity Server For Authentication And Authorization\nSo, those who purchased \"ASP.Net MVC Live Project\" course will get this for free and it will be added at the bottom of the course.\nAs these are from a live recorded session you need to manage a little audio disturbances. Yes not much :)",
      "target_audience": [
        "Should be good at OOPs through C#.Net",
        "Should have good understanding of ASP .Net MVC and Entity Framework",
        "Should have good understanding of ASP .Net Core 2.0 MVC and EF Core 2.0 Code First Approach"
      ]
    },
    {
      "title": "Project Based Python Programming For Newbies & Beginners",
      "url": "https://www.udemy.com/course/project-based-python-programming-for-kids-beginners/",
      "bio": "Learn Hands-On Python Programming By Creating Games, GUIs and Graphics",
      "objectives": [
        "Build simple Python based games using programming loops and functions",
        "Draw graphics using the Python module Turtle",
        "Build Python Graphical User Interfaces(GUI) with Tkinter",
        "Get a handle on working with Python 2 and 3",
        "Be able to use the in-built Python modules for their own projects",
        "Beginners and children will be able to create their own projects and advance to more complicated concepts",
        "Use Microsoft Visual Studio Code-a powerful IDLE for practical programming and development in Python and other languages"
      ],
      "course_content": {
        "Introduction to Project Based Python Programming": [
          "Introduction to the Course & Me",
          "Scripts Used in the Course",
          "Python Installation for Windows",
          "Python Installation for Other OS",
          "Online Python IDLE",
          "Hello World in Python",
          "Python Coding with Visual Studio",
          "Some Common Python Terms",
          "Conclusion to Section 1",
          "Section 1 Quiz"
        ],
        "Diving into the Python Basics": [
          "Basic Arithmetic in Python",
          "Welcome to the World of Data Types",
          "Random Number Generation",
          "Working With Strings",
          "Get User Inputs",
          "Different Python Data Structures",
          "Tuples",
          "Lists",
          "Dictionaries",
          "Defining our Own Functions in Python-Basic",
          "Some More On Functions",
          "Conclusions to Section 2",
          "Section 2 Quiz"
        ],
        "Decision Making with Programming": [
          "Rationale for this section",
          "if-else loops",
          "elif in if-else loops",
          "while loop",
          "for loop",
          "More on Loops",
          "Nested For Loop",
          "Build a Number Guessing Game!!-Basic",
          "Build a Number Guessing Game!!-Advanced",
          "OPTIONAL:Build a Number Guessing Game!!-(More) Advanced",
          "Conclusion to Section 3",
          "Section 3 Quiz"
        ],
        "Graphics with Python": [
          "Working With Graphics in Python",
          "Draw a Square",
          "The Idea Behind Angles",
          "Draw a Rectangle Using Loops",
          "Create a Rectangle Function",
          "Code Along1: Draw an Equilateral Triangle",
          "Code Along2: Draw an Equilateral Triangle With Loops",
          "Code an Irregular Shape: Start a Snowflake",
          "Snowflakes!!",
          "Conclusions to Section 4",
          "Section 4 Quiz"
        ],
        "GUI Programming with Python": [
          "What is a GUI?",
          "Start with GUIs in Python",
          "Create a Simple Button With tkinter",
          "Add Functionality to the Button",
          "The Tkinter Grid",
          "Common Tkinter GUI Widgets",
          "Canvas for Drawing-part1",
          "Canvas for Drawing-part2",
          "Simple Expression Evaluator",
          "Start With the Temperature Conversion App",
          "Complete the App-1",
          "Complete the App-2",
          "Conclusions to Section 5"
        ],
        "Miscellaneous Section": [
          "Github"
        ]
      },
      "requirements": [
        "Should have an interest in programming",
        "Interest in learning Python programming",
        "Install Python 3.6 on your computer (the code will work on Windows, Mac, Linux and even Raspberry Pis)",
        "The course is especially suitable for beginners and/or children looking to get started with Python programming",
        "Just come along and dive in!!",
        "Children will benefit from adult guidance"
      ],
      "description": "Beginners and Newbies Can Now Learn Python the Fun and Easy Way\nTeach yourself (and your kids) to code fun games, graphics and GUI in Python, the powerful programming language used at tech companies and in academia.\n\n\n\nUnlike the other courses and books out there, this course provides a rare opportunity to learn the graphics and UX (User Experience) sides of Python – even as a beginner! Unlike the many other Python courses on Udemy, this course introduces you to this computer language by drawing shapes, coding a simple game, and designing GUIs (Graphic User Interfaces), including a functional GUI for a temperature converter app.\nGain a Firm Foundation in Python GUI Programming\nLearn the basics of Python game programming\nCraft elegant and useful Python GUIs\nCreate simple and practical applications in Python\nExplore the world of Python graphic design\nIf you want to learn to code, Python GUIs are the best way to start!\nI designed this programming course to be easily understood by absolute beginners, including nebies to the coding space. We start with basic Python programming concepts. Reinforce the same by developing games, graphics and GUIs. And finally we will develop a practical temperature converter app using Python.\nWhy Python?\nThe Python coding language integrates well with other platforms – and runs on virtually all modern devices. If you’re new to coding, you can easily learn the basics in this fast and powerful coding environment. If you have experience with other computer languages, you’ll find Python simple and straightforward. This OSI-approved open-source language allows free use and distribution – even commercial distribution.\nCan You Build a Career with Python?\nAbsolutely! On average, U.S. Python developers earn $109,000 per year. This powerful and widely-used language could be your or your child's ticket to a better life. With the rigorous grounding you get from this course, you’ll have the knowledge and confidence to step into higher-level Python courses.\nHow Can You Use Python?\nOnce you gain a basic knowledge of Python through this course, you can explore a diverse range of programming specialties:\nBuild Desktop/Laptop GUIs\nDesign Exciting and Immersive Games\nDevelop Websites and Apps\nAnalyze Scientific and Statistical Data\nCreate Educational Software\nAccess and Organize Databases\nManage Networks\nWho Uses Python?\nThis course gives you a solid set of skills in one of today’s top programming languages. Today’s biggest companies (and smartest startups) use Python, including Google, Facebook, Instagram, Amazon, IBM, and NASA. Python is increasingly being used for scientific computations and data analysis.\n\n\nYou Can Start Right Away, Without Prior Programming Experience\nDetailed instructions have been provided with regards to Python installation and getting started with Microsoft Visual Code, a powerful programming IDLE that will be a valuable tool for your programming journey. Hands-on coding instructions have been provided in the lecture videos to enable you to follow along. Additionally, working code examples have been provided for you to try and modify. Each video will teach you a new practical programming concept that you can apply in real time and quizzes will reinforce your learning.\nThe instructor is an Oxbridge trained researcher and always available to troubleshoot. You'll also receive an industry recognized Certificate of Completion upon finishing the course.\nNo Risk: Preview videos from the different sections for FREE, and enjoy a 30-day money-back guarantee when you enroll - zero risk, unlimited payoff!\n\n\n\n\nSign up for this course today and learn the skills you need to rub shoulders with today’s tech industry giants. Have fun, create and control intriguing and interactive Python GUIs, and enjoy a bright future!",
      "target_audience": [
        "Anyone who wants to learn to code",
        "People wanting to program in Python",
        "People interested in gaining hands-on Python skills and actually wanting to work through real life programming projects",
        "People interested in building games and GUIs",
        "Anyone looking to start with Python GUI development",
        "Programming beginners and children who want to create practical applications"
      ]
    },
    {
      "title": "Python for Beginners: Learn Python Programming (Python 3)",
      "url": "https://www.udemy.com/course/python-programming-projects/",
      "bio": "Learn Python Programming the Easy Way, Complete with Examples, Quizzes, Exercises and more. Learn Python 2 and Python 3.",
      "objectives": [
        "Write Python programs that can be used on Linux, Mac, and Unix operating systems."
      ],
      "course_content": {
        "Course Overview and Downloads": [
          "Course Overview",
          "Course Downloads (Includes Solutions to the Practice Exercises)"
        ],
        "Python Setup": [
          "Python 2 vs Python 3",
          "Installing Python on Windows",
          "Installing Python on Mac",
          "Installing Python on Linux",
          "Writing Python Programs",
          "Running Python Programs"
        ],
        "Strings and Variables": [
          "Section Overview",
          "Variables and Strings",
          "Functions and Printing",
          "String Methods",
          "String Concatenation",
          "Formatting Strings",
          "Section Summary",
          "Quiz 1",
          "Practice Exercises",
          "Solutions to the Practice Exercises - #1 - Video",
          "Solutions to the Practice Exercises - #1",
          "Solutions to the Practice Exercises - #2 - Video",
          "Solutions to the Practice Exercises - #2",
          "Solutions to the Practice Exercises - #3 - Video",
          "Solutions to the Practice Exercises - #3",
          "Review"
        ],
        "Numbers and Math": [
          "Section Overview",
          "Numbers, Numeric Operations, and Numeric Functions",
          "Comments",
          "Section Summary",
          "Quiz 2",
          "Practice Exercises",
          "Solutions to the Practice Exercises - #1",
          "Solutions to the Practice Exercises - #2"
        ],
        "Booleans and Conditionals": [
          "Section Overview",
          "Booleans",
          "Conditionals",
          "Section Summary",
          "Quiz 3",
          "Practice Exercises",
          "Solutions to the Practice Exercises - #1"
        ],
        "Functions": [
          "Section Overview",
          "Functions, Part I",
          "Functions, Part II",
          "Section Summary",
          "Quiz 4",
          "Practice Exercises",
          "Solutions to the Practice Exercises - #1",
          "Review"
        ],
        "Lists": [
          "Section Overview",
          "Lists",
          "Slices",
          "Exception Handling",
          "Loops",
          "Sorting and Ranges",
          "Section Summary",
          "Quiz 5",
          "Practice Exercises",
          "Solutions to the Practice Exercises - #1"
        ],
        "Dictionaries": [
          "Section Overview",
          "Dictionaries - Part I",
          "Dictionaries - Part II",
          "Section Summary",
          "Quiz 6",
          "Practice Exercises",
          "Solutions to the Practice Exercises - #1"
        ],
        "Tuples": [
          "Section Overview",
          "Tuples",
          "Section Summary",
          "Quiz 7",
          "Practice Exercises",
          "Solutions to the Practice Exercises - #1"
        ],
        "Files": [
          "Section Overview",
          "Files, Part I",
          "Files, Part II",
          "Section Summary",
          "Quiz 8",
          "Practice Exercises",
          "Solutions to the Practice Exercises - #1",
          "Solutions to the Practice Exercises - #2"
        ]
      },
      "requirements": [
        "Access to a computer that runs the Windows, Mac, or Linux operating system."
      ],
      "description": "JOIN THE OTHER THOUSANDS OF SUCCESSFUL STUDENTS WHO HAVE ALREADY MASTERED PYTHON PROGRAMMING WITH THIS TOP RATED COURSE!\nIf you want to learn how to write Python programs like a pro, code python like a boss, solve real-world problems, or automate repetitive and complex tasks, read on.\nHello. My name is Jason Cannon and I'm the author of Python Programming for Beginners, Linux for Beginners, and an instructor to thousands of satisfied students. I started my IT career in the late 1990's as a Unix and Linux System Engineer and I'll be sharing my real-world Python programming and coding experience with you throughout this course.\nBy the end of this course you will be able to create Python scripts with ease. You'll learn how to take tedious and repetitious tasks and turn them into programs that will save you time and simplify your life on Linux, Unix, or MAC systems.\n____________________\nHere is what you will get and learn by taking this Python Programming course:\nWhen to use Python 2 and when to use Python 3\nHow to install Python on Windows, Mac, and Linux.\nHow to prepare your computer for programming in Python.\nThe various ways to run a Python program on Windows, Mac, and Linux.\nSuggested text editors and integrated development environments to use when coding in Python.\nHow to work with various data types including strings, lists, tuples, dictionaries, booleans, and more.\nWhat variables are and when to use them.\nHow to perform mathematical operations using Python.\nHow to capture input from a user.\nWays to control the flow of your programs.\nThe importance of white space in Python.\nHow to organize your Python programs -- Learn what goes where.\nWhat modules are, when you should use them, and how to create your own.\nHow to define and use functions.\nImportant built-in Python functions that you'll use often.\nHow to read from and write to files.\nThe difference between binary and text files.\nVarious ways of getting help and find Python documentation.\nPractice exercises with solutions so you can start using what you learn right away.\nA download that contains the scripts used in the presentations and lessons. You'll be able to look at and experiment with everything you're learning.\nQuizzes after each section just to make sure you're learning the most important aspects of Python programming\nLearn to Program Using Python 2 and Python 3\nIn this course you'll learn when to use Python 2 and when to Use Python 3. The great news is that no matter which version of Python you choose to use, I've got you covered. I'll show you exactly how to program in both versions.\nPerfect for Windows, Linux, Unix, Mac, the Web and More!\n\nOnce you've completed this course you'll know how to write programs that will run on the Linux, Mac, and Windows operating systems. You can even take what you've learned and apply it web applications.\nSo... what can do with all this Python knowledge?\nPython is HOT right now. The demand in the IT job market for Python skills keeps growing and growing. If you're looking to get into programming as a career, level-up your existing career or open up new doors in the IT field, you really need to learn Python!\nHere's What People Are Saying About Jason and His Courses:\n\n\"I started this course and instantly started learning new things, just fantastic.\" --Steven Smith, Udemy student\n\"The instructor is knowledgeable and delivers the course in a way that's easy to follow... Clear, concise, and informative.\" --Regena Ingram, Udemy student\n\"Excellent course on Linux! It is the best way to get started using Linux that I have come across.\" --Chris Bischoff, Udemy student\n\"This was a great course! Learned a lot from it!\" --Ricardo José Crosara Junior, Udemy student\n\"Excellent starter course. Very good and complete guide to get you started on working on Linux.\" --Brian Mulder, Udemy student\n\"Great course! Easy to understand for beginners and a great refresher for experienced users!\" --Spencer Ball, Udemy student\n\"Very well laid out course. Thanks Jason!\" --Eric Etheredge, Udemy student\n\"Love it... it's absolutely one of the best courses I've taken here on Udemy.\" --Idriss N, Udemy student\n\"Awesome Course! Another great one. Thanks Jason!\" --John Wilmont, Udemy student\n\"Excellent Course! Having come from a moderate understanding of Linux, this course has given me a deeper and more streamlined understanding of Linux. Definitely worth the money.\" --Armando Cabrera, Udemy student\n\"Fantastic course and very beautifully explained.\" --S John, Udemy student\n\"Great course, great instructor. I enjoyed every minute of it. I recommend this course 100%.\" --Alfredo, Udemy student\n\"I am lovin' it. Nice way to begin one's journey into Linux.\" --Rohit Gupta, Udemy student\n____________________\nAdditional Course Content - Downloads of All the Material Covered\nAs an added benefit for enrolling in this Python Programming video training course, you'll receive access to all the slides, Python programs, and source code used in the lessons. You can download them and refer to them when you want to jog your memory or double-check your work.\nEnroll now and to learn how to write Python programs like a pro!",
      "target_audience": [
        "Anyone interested in Python programming, Python scripting, or computer programming in general.",
        "Those who want to become a highly paid Python developer.",
        "Those who want to open up doors in your IT career by learning one of the world's most popular and in-demand programming language: Python."
      ]
    },
    {
      "title": "Beginning C++ Programming - From Beginner to Beyond",
      "url": "https://www.udemy.com/course/beginning-c-plus-plus-programming/",
      "bio": "Obtain Modern C++ Object-Oriented Programming (OOP) and STL skills. C++14 and C++17 covered. C++20 info see below.",
      "objectives": [
        "Learn to program with one of the most powerful programming languages that exists today, C++.",
        "Obtain the key concepts of programming that will also apply to other programming languages",
        "Learn Modern C++ rather than an obsolete version of C++ that most other courses teach",
        "Learn C++ features from basic to more advanced such as inheritance and polymorphic functions",
        "Learn C++ using a proven curriculum that covers more material than most C++ university courses",
        "Learn C++ from an experienced university full professor who has been using and teaching C++ for more than 25 years",
        "Includes Quizzes, Live Coding Exercises, Challenge Coding Exercises and Assignments",
        "New Section: Learn to use Visual Studio Code with C++",
        "New Section: Learn all about using C++ Lambda Expressions"
      ],
      "course_content": {
        "Introduction": [
          "About the Course",
          "Why Learn C++?",
          "Modern C++ and the C++ Standard",
          "How does all this work?",
          "FAQ -- Please Read!"
        ],
        "Installation and Setup": [
          "Installation and Setup Overview",
          "Installing the C++ Compiler on Windows",
          "Installing CodeLite on Windows",
          "Configuring CodeLite on Windows",
          "Installing the C++ Compiler on Mac OSX",
          "Installing CodeLite on Mac OSX",
          "Configuring CodeLite on Mac OSX",
          "Using the Command-Line interface",
          "Installing CodeLite on Ubuntu Linux",
          "Configuring CodeLite on Ubuntu Linux",
          "Creating a Default CodeLite Project Template (All Versions)",
          "Using the Command-Line Interface on Windows",
          "Using the Command-Line Interface on Mac OSX",
          "Using the Command-Line Interface on Linux (Ubuntu)",
          "Using a Web-based C++ Compiler",
          "Using the Included Source Code Course Resources"
        ],
        "Curriculum Overview": [
          "Curriculum Overview",
          "Overview of the Section Challenge Exercises",
          "Overview of the Section Quizzes"
        ],
        "Getting Started": [
          "Section Overview",
          "An Overview of the CodeLite Interface",
          "Writing our first program",
          "Building our first program",
          "What are Compiler Errors?",
          "What are Compiler Warnings?",
          "What are Linker Errors?",
          "What are Runtime Errors?",
          "What are Logic Errors?",
          "Section Challenge",
          "Section Challenge - Solution",
          "Section 4 Quiz"
        ],
        "Structure of a C++ Program": [
          "Section Overview",
          "Overview of the Structure of a C++ Program",
          "#include Preprocessor Directive",
          "Comments",
          "The main() function",
          "Namespaces",
          "Basic Input and Output (I/O) using cin and cout",
          "Using cout and the insertion operator to say Hi to Frank",
          "Using cout and the insertion operator",
          "Using cin and the extraction operator",
          "Section 5 Quiz"
        ],
        "Variables and Constants": [
          "Section Overview",
          "What is a variable?",
          "Declaring and Initializing Variables",
          "Declaring and Initializing Variables",
          "Global Variables",
          "C++ Built-in Primitive Types",
          "What is the Size of a Variable (sizeof)",
          "What is a Constant?",
          "Declaring and Using Constants",
          "Section Challenge",
          "Section Challenge - Solution",
          "Section 06 Quiz"
        ],
        "Arrays and Vectors": [
          "Section Overview",
          "What is an Array?",
          "Declaring and Initializing Arrays",
          "Accessing and Modifying Array Elements",
          "Declaring, Initializing and Accessing an Array",
          "Multidimensional Arrays",
          "Declaring and Initializing Vectors",
          "Accessing and Modifying Vector Elements",
          "Declaring, Initializing and Accessing Vectors",
          "Section Challenge",
          "Section Challenge - Solution",
          "Section 07 Quiz"
        ],
        "Statements and Operators": [
          "Section Overview",
          "Expressions and Statements",
          "Using Operators",
          "The Assignment Operator",
          "Arithmetic Operators",
          "Using the Assignment Operator",
          "Using the Arithmetic Operators",
          "Increment and Decrement Operators",
          "Mixed Expressions and Conversions",
          "Testing for Equality",
          "Relational Operators",
          "Logical Operators",
          "Compound Assignment Operators",
          "Operator Precedence",
          "Logical Operators and Operator Precedence - Can you work?",
          "Section Challenge",
          "Section Challenge - Solution",
          "Section 08 Quiz"
        ],
        "Controlling Program Flow": [
          "Section Overview",
          "if Statement",
          "If Statement - Can you Drive?",
          "if else Statement",
          "If-Else Statement - Can you Drive?",
          "Nested if Statements",
          "Nested If Statements - Can you Drive?",
          "switch-case Statement",
          "Switch Statement - Day of the Week",
          "Conditional Operator",
          "Looping",
          "for Loop",
          "For loop - Sum of Odd Integers",
          "range-based for Loop",
          "Using the range-based for loop",
          "while Loop",
          "While loop exercise",
          "do while Loop",
          "Do-while loop exercise",
          "continue and break",
          "Infinite Loops",
          "Nested Loops",
          "Nested Loops - Sum of the Product of all Pairs of Vector Elements",
          "Section Challenge",
          "Section Challenge - Solution Part 1",
          "Section Challenge - Solution Part 2",
          "Section 09 Quiz"
        ],
        "Characters and Strings": [
          "Section Overview",
          "Character Functions",
          "C-Style Strings",
          "Working with C-style Strings",
          "Using C-style Strings",
          "C++ Strings",
          "Working with C++ Strings",
          "Using C++ Strings - Exercise 1",
          "Using C++ Strings - Exercise 2",
          "Section Challenge",
          "Section Challenge - Solution",
          "Section 10 Quiz",
          "Challenge Assignment - Letter Pyramid"
        ]
      },
      "requirements": [
        "Access to a computer running Windows, Mac OS X or Linux"
      ],
      "description": "Which programming language is often seen as a badge of honor among software developers?  C++\nWhich programming language can you learn that when added to your resume,  will often get you a job interview?  C++\nWhich programming language is routinely ranked in the top 5 programming languages by popularity, and been consistently in the top 10 for close to 20 years?  C++\nWhy you should learn C++\nMuch, if not most of the software written today is still written in C++ and this has been the case for many, many years.\nNot only is C++ popular, but it is also a very relevant language. If you go to GitHub you will see that there are a huge number of active C++ repositories and C++ is also extremely active on stack overflow.\nThere are many, many leading software titles written entirely or partly in C++. These include the Windows, Linux, and Mac OSX operating systems!\nMany of the Adobe products such as Photoshop and Illustrator,  the MySQL and MongoDB database engines, and many many more are written in C++.\nLeading tech companies use C++ for many of their products and internal research and development. These include Amazon, Apple, Microsoft, PayPal, Google, Facebook, Oracle, and many more.\nCan you see how learning C++ will open up more career opportunities for you?\nIf more professional companies are using C++, it stands to reason that there is going to be more of a demand for C++ programmers.\nBut the main reason programmers should probably learn C++  is because it is so powerful!\nWhat do I mean by powerful?\nC++ is super fast and is a general-purpose programming language that supports both procedure and object-oriented programming making it very flexible.\nIt can scale easily. And it can be portable as well.\nC++ can do many things that other languages just can't.\nThat's why nearly every major language has a way to interface with code written in C++.\nSince C++ has influenced so many languages, if you know C++ you'll likely see elements from C++ in new languages you learn.\nHow can a beginner learn C++?\n\nFind a good course, taught by an instructor with many years of experience in C++ is critical, as is the need for the instructor to have the necessary skills to be able to teach you the language.\nFrank Mitropolous, the instructor in this course has been using C++ for over 2 decades and has taught students in both university courses and industry training courses.  He even worked on a C++ compiler development project while he was in the industry.\nSo not only will you be learning C++ from an expert C++ programmer, but you'll also be taught by an instructor who has successfully taught at university level for many years.\nAs a result, you can take this course with confidence, knowing that you will learn C++ the right way, and in the shortest possible timeframe.\nWhich version of C++ should I learn?\nC++ has had many version releases and updates over the years.  It's a sad fact that most C++ courses do not teach Modern C++, but focus on old, obsolete versions of C++.\nFrank teaches you Modern C++ (specifically C++ 14 and C++17).\nLearn C++ the right way, with Modern C++, as taught by Frank in this course.\nWhat about C++20? Don't I need to learn about that as well?\nThis course currently covers C++14 and C++17 but is still valid if you ultimately want to learn C++20.\nC++20 is new and the reality is that C++20 compilers and tools are not yet ready for prime time and the industry is using mainly C++14.    So it's not really of any benefit for you to learn C++20 right now when the industry is not using it.\nIt's going to take many, many years for the industry to migrate to C++20 and that means jobs for C++20 are not going to be around for quite some time.\n\nWhat is available right now, are tons of jobs for Modern C++ developers, and you will obtain those skills in this course.\n\nIt's our sincere advice to focus on learning Modern C++ and not get too hung up on the latest and greatest versions of C++.\n\nAnd even if you really do want to learn C++20,  the new features in C++20 are mostly advanced features that require understanding the foundations of Modern C++.\n\nIf you don't learn the basics, you won't master any version of C++.\nLearning the foundations of Modern C++ should be your priority, which you will learn in this course!\nIs C++ difficult to learn?\nWith all the power and flexibility of C++ comes complexity.\nThere is no question that C++ is one of the most complex programming languages out there.\nBut with the right instructor and the right training, you really can get up to speed with C++ quickly, and that's what this course is all about.\nWhat will I learn in this course?\nThe course assumes no previous experience with C++ (or even programming in general), and you will end up with the skills to create your own programs in C++.\nKey topics covered include.\n* Looping with while, do/while for, range-based for statements and recursion\n* Performing calculations and displaying results\n* Functions\n* Pointers\n* Using existing classes and creating objects\n* Creating your own classes\n* Using Basic Standard Template Library classes such as Vector\n* Constructors and Destructors\n* Copy and Move semantics including Copy constructors, Move constructors, and copy and move assignment\n* How to overload operators\n* Using inheritance and class hierarchies\n* Using Polymorphic functions and dynamic binding\n* Using smart pointers\n* Using stream I/O\n* An introduction to the C++ STL\n* An introduction to Exception Handling\n* And much more.\n\nHow is this C++ course different from other courses?\n\nYou will learn Modern C++, for one.  Many, perhaps most other courses on Udemy teach you old, obsolete versions of C++.  If you are going to learn C++, it's imperative that you learn the Modern version to maximize your career opportunities and to ensure your skills are up to date.\nThe course format includes theory and concepts which are then reinforced with live code examples. Often the C++ debugger is used to step through code and analyze variables to better understand the behavior of C++. The instructor also uses a pen tablet to write on the screen and provide even more visual explanations.\nYou won't find better C++ training anywhere, and you will struggle to find someone with as much industry and training experience as your instructor Frank has.\nWhat do I get out of learning C++?\nMore career options for one!  C++ is one of the most popular programming languages used in games development.    It's also heavily used in embedded applications.  Your investment in time in learning C++ will reward you time and time again with more pay, and more opportunities, and frankly, more fun!\nAre you ready to get started?\nIf you are ready to get that first paid programming job or to move up to a more senior programming position, then this course is for you!\nYour new job or consulting opportunity awaits!\nWhy not get started today?\nClick the Signup button to sign up for the course!",
      "target_audience": [
        "This course is perfect for absolute beginners with no previous coding experience, or anyone wanting to add C++ to their existing skillset.",
        "Anyone looking to increase career options by learning one the most in-demand programming languages."
      ]
    },
    {
      "title": "Node.js - The Complete RESTful API Masterclass",
      "url": "https://www.udemy.com/course/build-restful-api-in-nodejs/",
      "bio": "Node.js : Build fast, scalable and powerful Nodejs RESTful APIs using Express & MongoDB from Development to Deployment",
      "objectives": [
        "Build modern, fast and scalable RESTful API with NodeJS",
        "Learn all about Advance Error Handling in Express",
        "Learn all about advance filter, sorting, pagination and more",
        "Handling File Uploads in Node",
        "Learn advanced authentication and authorization",
        "Learn all about API Security like: Data Sanitization, Limiting Request, NoSQL Injections",
        "Learn Advanced Mongoose Queries",
        "Learn How to make API Documentation",
        "Deployment on Heroku"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to Course"
        ],
        "Introduction to Node.js": [
          "Introduction to Node.js",
          "Initial Coding Environment",
          "First Application in Node.js"
        ],
        "Node.js [Behind the Scenes]": [
          "C++ Behind Node.js",
          "Callbacks in Node.js",
          "Event Loop in Node.js",
          "What is ThreadPool?",
          "Event Driven Architecture"
        ],
        "API & RESTful APIs": [
          "What is API & RESTful API?",
          "Why we need to build an API?"
        ],
        "Request, Header, Body, Status Codes etc": [
          "Creating First Server using HTTP",
          "Installing Postman",
          "HTTP Status Codes",
          "Sending Data in Response",
          "All About Headers",
          "Request Object, Params, Query"
        ],
        "Let's start Jobee RESTful API": [
          "Get Jobbee-API Project GitHub Link",
          "Basic Project Setup",
          "Installing & Setting up Nodemon",
          "Creating Basic route",
          "Creating Controller Method",
          "Setting up Postman Environment",
          "Install & Setup MongoDB Community Server [MacOS]",
          "Install & Setup MongoDB Community Server [WINDOWS]",
          "Important Note about Next Lecture",
          "Connecting API with Database",
          "Understanding Middlewares"
        ],
        "Using MongoDB - Adding Jobs Resource": [
          "Creating Job Model",
          "Create & Save New Job to Database",
          "Creating Slug for Job",
          "Display all Jobs",
          "Setting Up Location in Database",
          "Search Jobs within Distance/Radius",
          "Important Note about Next Lecture",
          "Update Job",
          "Delete Job",
          "Get Single Job by ID & Slug",
          "Get Jobs Statistics using Aggregation"
        ],
        "Advance Global Error Handling": [
          "Creating Error Handler Class",
          "Creating Errors Middleware",
          "Production Vs Development Errors",
          "Catching Async Errors",
          "Handling Unhandled Promise Rejection",
          "Handling Uncaught Expections",
          "Handle Unhandled Routes",
          "Validation & Mongose ID Error",
          "Using Error Handler + Bug Fixing"
        ],
        "Adding Filters to API": [
          "Advanced Filter for Jobs",
          "Sorting Jobs",
          "Limiting Fields for Jobs",
          "Search Jobs by Query",
          "Adding Pagination"
        ],
        "Authentication, Users & Authorization": [
          "Create User Model",
          "Encrypting Password while Registration",
          "Generate JSON Web Token",
          "Login User & Assign Token",
          "Sending JWT Token in Cookie",
          "Protect Routes from Unauthorized Users",
          "Store JWT Token in Postman",
          "Authorize User Roles and Permissions",
          "Adding User in Jobs",
          "Generate Forgot Password token",
          "Send Password Recovery Email",
          "Reset New Password",
          "Handle Wrong JWT Token & Expire JWT Error",
          "Logout User"
        ]
      },
      "requirements": [
        "Must know Vanilla JavaScript",
        "Must know basics of Node",
        "Nothing else, Just you and your Hard work"
      ],
      "description": "If you want to build powerful, scalable RESTful APIs using the latest technologies like Nodejs, Express, and MongoDB, you are at the right place. This course is all about RESTful APIs development with modern technologies.\n\n\nWhy do I learn Node.js?\nDo you know how much node.js developers make in the USA per annum?\nAccording to Indeed, Node.js developers earn around $126,000 per annum with exclusive benefits. Isn't that amazing to learn Node.js?\n\n\nNode.js is one of the best and hot technology right now in the market to build powerful REST APIs. Express.js & MongoDB help to make API quickly and efficiently. You can easily make super fast API with little effort with nodejs.\n\n\nThis course contains up-to-date videos of Node technology that will take you from the very basic level to the advanced stage, where you will be able to make modern and scalable RESTful APIs.\n\n\nLike my previous courses, this course is full of exciting projects. We have to build a powerful JOB API in this course that will help you to learn APIs in Node, Express & MongoDB practically. A lot of practical exciting stuff is included in this course so that you can get 100% of this course.\n\n\n\n\n===   Super Fiendly Support   ===\nIf you ever get stuck in any problem, I'm here to unstuck you. I always respond as fast as I can. Because I know there’s nothing worse than getting stuck into problems, especially programming problems. So, I am always here to support you.\n\n\n\n\n\n\nWHAT WE WILL COVER IN THIS COURSE?\nBuild modern, fast, and scalable RESTful API with NodeJS\nLearn all about Advance Error Handling in Express\nLearn all about advanced filters, sorting, pagination, and more\nHandling File Uploads\nLearn advanced authentication and authorization\nLearn all about API Security like: Data Sanitization, Limiting Request, HTTP Header Pollution\nLearn Advanced Mongoose Queries\nLearn How to make API Documentation\nDeploy on Heroku\n\n\nSo in the end, I am ready to teach all the exciting stuff to you right in the course. Click Enroll and I will see you inside the course.\nSee you!",
      "target_audience": [
        "Any developer who want to learn backend development",
        "Any one who wants to Build RESTful APIs",
        "Anyone who wants to improve his/her backend development skills"
      ]
    },
    {
      "title": "Advanced Scala and Functional Programming",
      "url": "https://www.udemy.com/course/advanced-scala/",
      "bio": "For Scala developers: become a top level Scala programmer so you can rock Spark, Akka, Cats or any Scala tool!",
      "objectives": [
        "Master the Scala language at the level of the best developers",
        "Master functional programming",
        "Design and implement complex systems, frameworks and APIs",
        "Confidently customize and enhance existing Scala tools",
        "Think and approach code with maturity and a deep understanding of implications"
      ],
      "course_content": {
        "Welcome": [
          "Welcome! Administrative and Setting up Dev Environment",
          "How to Make the Best Out of This Course"
        ],
        "A Taste of Advanced Scala": [
          "Welcome!",
          "Recap: The Scala Basics",
          "Dark Syntax Sugar",
          "Advanced Pattern Matching",
          "Advanced Pattern Matching, Part 2"
        ],
        "Advanced Functional Programming": [
          "Welcome!",
          "Partial Functions",
          "Functional Collections: A functional Set",
          "Enhancing A Functional Set",
          "A Functional Set, level 9000: A Potentially Infinite Set",
          "Moar Functional Collections!",
          "Currying and Partially Applied Functions",
          "Lazy Evaluation",
          "Lazy Evaluation Exercise: A Potentially Infinite Stream",
          "Infinite Streams Proficiency: More Exercises",
          "Monads",
          "Monads: Exercises"
        ],
        "Functional Concurrent Programming": [
          "Welcome!",
          "Intro to Parallel Programming on the JVM",
          "Concurrency Problems on the JVM",
          "JVM Thread Communication",
          "Producer-Consumer, Level 2",
          "Producer-Consumer, Level 3 + Excercises",
          "JVM Thread Communication Exercises",
          "Futures and Promises",
          "Futures, Part 2",
          "Futures, Part 3",
          "Futures, Part 4 + Exercises"
        ],
        "Implicits": [
          "Welcome!",
          "Enter Implicits",
          "Organizing Implicits",
          "Type Classes, Part 1",
          "Type Classes, Part 2",
          "Pimp My Library!",
          "Type Classes, Part 3",
          "A Type Class End-to-End example: JSON Serialization",
          "A Type Class Use Case: The Magnet Pattern",
          "Scala 3: Given Instances and Using Clauses",
          "Scala 3: Extension Methods"
        ],
        "Mastering the Type System": [
          "Welcome!",
          "Advanced Inheritance",
          "Variance",
          "Variance Exercises",
          "Type Members",
          "Inner Types and Path-Dependent Types",
          "Self Types",
          "Recursive Types and F-Bounded Polymorphism",
          "Higher-Kinded Types",
          "You Rock!"
        ]
      },
      "requirements": [
        "A good understanding of the Scala and functional programming, at the level of the Rock the JVM Scala beginners course",
        "Solid general programming foundations"
      ],
      "description": "Updated for Scala 3! This course is now fully compatible with both Scala 2 and Scala 3.\nIn this course, we will learn the tricks used by the top 1% of Scala developers. You'll write 2000+ lines of Scala code yourself, with guidance, and you will become a rockstar.\nThis course is for Scala programmers who need to design complex, scalable systems, or need to customize existing tools (e.g. Spark) or write their own.\nWhy mastering Scala:\nit's the hottest language based on the Java Virtual Machine - the number of Scala jobs has exploded, but demand is even higher\nScala offers significantly higher pay (> 20%) than same-level Java positions - the top Scala devs are paid 2x, 10x, even more!\nit's incredibly fun - once tasted Scala, you'll never want to get back\nyou will not have any trouble using some of the latest technologies written in Scala - Spark, Akka and more\nI like to get to the point and get things done. This course\ndeconstructs advanced Scala concepts into the critical pieces you need\nselects the most important ideas in Scala and separates them into the critical and nice-to-have\nsequences ideas in a way that \"clicks\" and makes sense throughout the process of learning\napplies everything in live code\nThe end benefits are still much greater:\na completely new level of skill with the Scala language\nsignificant bump in salary when you switch to Scala - return on investment for this course >100x in the first year alone!\nmore enjoyable work - Scala is fun!\nfuture-proof skills - you'll be able to work with some of the cutting edge technologies (Spark, Akka etc)\nThis course is for established programmers with experience with Scala and with functional programming at the level of the Rock the JVM Scala beginners course. I already assume a solid understanding of general programming fundamentals. If you've never coded before, this course is not for you.\nThe course is comprehensive, but you'll always see me get straight to the point. So make sure you have a good level of focus and commitment to become a badass programmer.\nI believe both theory and practice are important. That's why you'll get lectures with code examples, real life Scala code demos and assignments, plus additional resources, instructions, exercises and solutions. At the end of the course, you'll have written thousands of lines of Scala.\nI've seen that my students are most successful - and my best students work at Google-class companies and committing to Scala repositories - when they're guided, but not being told what to do. I have assignments waiting for you, where I offer my (opinionated) guidance but otherwise freedom to experiment and improve upon your Scala code.\nDefinitely not least, my students are most successful when they have fun along the way!\nSo join me in this course and let's rock the JVM!",
      "target_audience": [
        "Scala developers who need to design highly complex systems, APIs or frameworks",
        "Big data engineers who need to customize Spark code or other tools written in Scala"
      ]
    },
    {
      "title": "Python for Complete Beginners",
      "url": "https://www.udemy.com/course/python-with-google-colab/",
      "bio": "Step by Step Guide into Python Programming",
      "objectives": [
        "Python Basics",
        "Google Colab Programming",
        "Generating Code with AI",
        "Practical Python Examples"
      ],
      "course_content": {},
      "requirements": [
        "No programming experience needed - we start from Zero!"
      ],
      "description": "Welcome to Python for Beginners, the ultimate starting point for anyone looking to dive into the world of programming with Python. Whether you are a complete novice or someone looking to brush up on their skills, this course is designed to equip you with the essential knowledge and hands-on experience to become proficient in Python programming. We will use Google Colab, a free platform that does not require installing any additional software, and enables code execution on Google servers instead of locally, on your computer.\n\n\nWhat You'll Learn:\nThis comprehensive course is structured to provide you with a clear and practical understanding of Python, starting from the basics and progressing to more complex concepts. Here's what you'll cover:\nInput and Output methods, Variables and Data types including conversion between different types, Operators\nPrompting AI to generate code\nBranching: Conditional operators, If, If-else, If-elif-else\nLoops: While and For loops, Strings & loops\nFunctions in Python\nLists and Tuples\n\n\nWho This Course is For:\nAbsolute beginners with no prior programming experience\nIndividuals looking to learn Python for personal or professional development\nStudents and professionals who need a refresher on Python basics\n\n\nWhy Enroll:\nHands-On Learning: Engage in practical exercises to solidify your understanding.\nExpert Guidance: Learn from an experienced instructor who will guide you through each step.\nFlexible Learning: Access course materials anytime, anywhere, and learn at your own pace.\nSupportive Community: Join a community of learners and get support whenever you need it",
      "target_audience": [
        "Absolute beginners in Programming."
      ]
    },
    {
      "title": "Windows Presentation Foundation Masterclass",
      "url": "https://www.udemy.com/course/windows-presentation-foundation-masterclass/",
      "bio": "Leverage WPF with C# and XAML to build real world skills with Azure, REST, MVVM and Machine Learning",
      "objectives": [
        "Be able to build desktop apps that leverage WPF",
        "Be able to create your own cloud services",
        "Learn languages and patterns that open up opportunities to create iOS, Android and UWP applications using Xamarin",
        "Learn to better structure your code for easier maintenance, better code reuse, and greater compatibility with other projects (such as Xamarin and UWP)",
        "Build your own app from start to finish including its cloud services such as databases and file storage"
      ],
      "course_content": {},
      "requirements": [
        "Some previous programming experience in C# or a similar language like Java is recommended, but not essential",
        "Access to a computer running Windows (previously Windows 10, but Windows 7 or 8 is ok as well).",
        "If not running Windows natively, a Virtual machine running Windows is required."
      ],
      "description": "Do you know a little programming in C# or another language, but are struggling to get an interview, let alone a job?\nMaybe you are stuck in a low paying programming job, and want to move up to a better, more senior position.\nPerhaps you want to learn a new skill and expand your rèsumè.\nOr maybe you want to improve your .NET skills by learning a new and valuable framework.\nIf one or more of these things describe you, then I'd suggest you give serious consideration to this course.\nThis course will teach you how to create applications that have a rich user interface, using Microsoft's Windows Presentation Foundation (WPF).\nWhat is WPF ?\n\nWPF is part of the .NET framework and  provides a consistent programming model for building applications by separating the user interface from business logic.  It uses XAML (an XML based language) and C#.  The runtime libraries are included with all versions of Microsoft Windows since Windows Vista.  It's heavily supported by Microsoft and is a mature and powerful framework.\nWhy should you bother to learn it?\nMany, perhaps most enterprise level .NET applications are built in WPF because of it's ability to create loosely coupled apps where the business logic and presentation layer are separated.  This also applies to apps in general that are developed in .NET.  A good portion of Winforms based projects are being upgraded to WPF as well.\nWPF developers are in high demand and WPF is fully supported by Microsoft in the latest versions of Visual studio and .NET.  It's a key part of Microsoft's strategy moving forward.\nWhat will you learn in this course?\n\nWPF is developed using C# and XAML.  You will learn how to use WPF to build and access powerful REST services (specifically weather information and machine learning in this course).  You will also learn to create your own cloud services, and learn languages and patterns the open up future opportunities in Xamarin as well (iOS, Android and the Universal Windows Platform (UWP).\nIn addition, in this course you will learn C#, XAML, the MVVM (Model-View-ViewModel) architectural pattern, Azure App and Storage services, and SQLite and more.\nWhy enrolling in this course is the best decision you can make.\n\nOther courses focus on isolated examples on what you can do with WPF.  Not this course!  This course guides you through the creation of real world applications as you learn more and more about WPF. You will:\nBuild a calculator as you learn:\nC#\nXAML\nStyles\n\nBuild a contacts app as you learn:\nSQLite\nUsing ListViews\nCreating Custom Controls\n\nBuild a machine learning classifier as you learn:\nREST services\nPicking images from the computer\n\nBuild a weather app as you learn:\nThe MVVM architectural pattern\nMore REST\n\nBuild a notes app as you learn:\nMore WPF controls such as toolbar, speech to text, toggle buttons, comboboxes, context menus and rich text format editors\nTo add Azure App Services for cloud hosted databases\nTo add Azure Storage Account services for storing files in the cloud\nTo add Animations\nYour instructor, Eduardo Rosas, is a certified Xamarin Mobile Developer who has been building apps with C# and XAML since 2012.\n\nThis means you are learning from someone who has all the professional training, skills, and experience you need to teach you how to become proficient with WPF in the fastest possible way.  But all the while being taught the right way to program.\nIf you are ready to get that first paid programming job, or to move up to a more senior programming position, then this course is for you!\nAfter completing this course, you will have the necessary skills to be able to use create your own WPF desktop apps giving you increase career opportunities.\n\nThe sooner you sign up for this course, the sooner you will have the skills and knowledge you need to increase your job or consulting opportunities.    Your new job or consulting opportunity awaits!\nWhy not get started today?\nClick the Signup button to sign up for the course!",
      "target_audience": [
        "Anyone wanting to understand and use Windows Presentation Foundation (WPF)",
        "Anyone wanting to increase career options by learning an important Microsoft Windows development technology"
      ]
    },
    {
      "title": "Python for Data Analysis & Business Intelligence",
      "url": "https://www.udemy.com/course/python-foundations-for-data-analysis/",
      "bio": "Learn Python for data analysis & business intelligence, w/ real-world projects from a top Python data science instructor",
      "objectives": [
        "Master the building blocks of base Python, including data types, variables, loops, functions and more",
        "Learn how to use Jupyter Notebooks to write, manage, and comment your Python code",
        "Analyze and manipulate numeric data, text strings, lists, tuples, dictionaries and sets",
        "Explore raw data using conditional logic, nested loops, custom functions, and comprehensions",
        "Use Python's Openpyxl package to read & write data to Excel worksheets",
        "Build solid, foundational Python skills for data analysis & business intelligence"
      ],
      "course_content": {},
      "requirements": [
        "No Python or programming experience required (we'll cover everything you need to know!)",
        "We'll use Anaconda & Jupyter Notebooks (a free, user-friendly coding environment)"
      ],
      "description": "This is a hands-on, project-based course designed to help you master the core building blocks of Python for data analysis and business intelligence.\n\n\nWe'll start by introducing the Python language and ecosystem, installing Anaconda and Jupyter Notebooks where we'll write our first lines of code, and reviewing key Python data types and properties.\n\n\nFrom there we'll dive into foundational Python tools like variables, numeric and string operators, loops, custom functions, and more. You'll learn how to create and manipulate raw data, define conditional logic, loop through iterables or indices, and extract values stored in a wide variety of data types including dictionaries, lists, tuples, and more.\n\n\nThroughout the course you'll play the role of a Data Analytics Intern for Maven Ski Shop, the world's #1 store for skis, snowboards and winter gear. Using the skills you learn throughout the course, you'll help the Maven team track inventory, pricing, and sales performance using your Python data analytics skills.\nCOURSE OUTLINE:\n\n\nWhy Python for Data Analytics?\nIntroduce the Python analytics ecosystem and why it’s the programming tool of choice for many data analysts\n\n\nJupyter Notebooks\nInstall Anaconda and create your first Jupyter Notebook, a user-friendly Python coding environment designed for data analysis\n\n\nPython Data Types\nIntroduce native Python data types, common use cases, type conversion methods, and key concepts like iteration and mutability\n\n\nVariables\nLearn how to name and store values in memory using variables, as well as how to overwrite, delete and track them\n\n\nNumeric Data\nLearn how to work with numeric data, and use numeric functions to perform a range of arithmetic operations\n\n\nStrings\nLearn how to manipulate text via indexing and slicing, calculate string lengths, apply various string methods, and print f-strings to include variables\n\n\nConditional Logic\nLearn how to use IF statements and Boolean operators to establish conditional logic and control the flow of your programs\n\n\nSequence Data Types\nLearn how to create, modify, and nest lists, tuples, and ranges, all of which allow you to store many values within a single variable\n\n\nLoops\nUnderstand the logic behind For and While loops and learn how to refine loop logic and handle common errors\n\n\nDictionaries & Sets\nAddress the limitations of working with lists and explore common scenarios for using dictionaries and sets in their place\n\n\nFunctions\nLearn how to create custom functions in Python to boost productivity, and how to import external functions stored in modules or packages\n\n\nManipulating Excel Sheets\nImport the openpyxl package and manipulate data from an Excel worksheet using the Python skills you’ve learned throughout the course\n\n\nFinal Project\nImport and manipulate data from an Excel workbook\n\n\nJoin today and get immediate, lifetime access to the following:\n\n\n11+ hours of high-quality video\nPython Foundations PDF ebook (300+ pages)\nDownloadable project files & solutions\nExpert support and Q&A forum\n30-day money-back guarantee\n\n\nIf you're a data analyst, data scientist, or business intelligence professional looking to build a strong Python foundation and add powerful data analytics skills to your resume, this is the course for you!\n\n\nHappy learning!\n-Chris Bruehl (Python Expert & Lead Instructor, Maven Analytics)\n\n\n__________\nLooking for our full business intelligence stack? Search for \"Maven Analytics\" to browse our full course library, including Excel, Power BI, MySQL, Tableau and Machine Learning courses!\n\n\nSee why our courses are among the TOP-RATED on Udemy:\n\n\n\"Some of the BEST courses I've ever taken. I've studied several programming languages, Excel, VBA and web dev, and Maven is among the very best I've seen!\" Russ C.\n\n\n\"This is my fourth course from Maven Analytics and my fourth 5-star review, so I'm running out of things to say. I wish Maven was in my life earlier!\" Tatsiana M.\n\n\n\"Maven Analytics should become the new standard for all courses taught on Udemy!\" Jonah M.",
      "target_audience": [
        "Analysts or BI professionals looking for a deep introduction to basic Python",
        "Aspiring data scientists who want to build foundational Python programming skills",
        "Anyone interested in learning one of the most popular open source programming languages in the world",
        "Students looking to learn powerful, practical skills with hands-on projects and course demos"
      ]
    },
    {
      "title": "Advanced Topics in C#",
      "url": "https://www.udemy.com/course/advanced-topics-csharp/",
      "bio": "A discussion of the more complicated aspects of the C# language",
      "objectives": [
        "Apply sophisticated C# solutions to problems",
        "Explore different programming styles and approaches"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Introduction"
        ],
        "Numerics": [
          "Overview",
          "Integral Types",
          "BigInteger",
          "Floating-Point Types",
          "Decimal",
          "Introduction to SIMD",
          "SIMD Intrinsics",
          "Vector<T>",
          "Summary"
        ],
        "Reflection": [
          "Overview",
          "System.Type",
          "Inspection",
          "Construction",
          "Invocation",
          "Delegates and Events",
          "Attributes",
          "Summary"
        ],
        "Dynamic Programming": [
          "Overview",
          "Dynamic",
          "DynamicObject",
          "Dynamic for XML Parsing",
          "ExpandoObject",
          "Visitor Pattern with Dynamic Dispatch",
          "Summary"
        ],
        "Extension Methods": [
          "Overview",
          "Extension Methods",
          "Extension Methods on ValueTuples",
          "Extension Methods and Persistence",
          "Extension Method Patterns",
          "Extension Methods and the the Maybe Monad",
          "Summary"
        ],
        "Memory Management": [
          "Overview",
          "'in' Parameters",
          "'ref readonly' Variables",
          "'ref struct' and Span<T>",
          "Span<T> Demo",
          "Summary"
        ],
        "Assorted Topics": [
          "Overview",
          "Exploiting Disposable",
          "Duck Typing Mixins",
          "Continuation Passing Style",
          "Local Inversion of Control",
          "Mnemonics",
          "End of Course"
        ]
      },
      "requirements": [
        "Deep knowledge of the C# programming language",
        "Familiarity with key .NET data structures and algorithms",
        "Good command of modern IDEs and developer tools"
      ],
      "description": "This course presents a collection of interesting/unusual case studies where C# is used to solve a particular problem. This course is 100% practical, and demonstrates mainly the practical applications of C# in building solutions to common problems.\nThe main themes covered in this course are:\nNumerics — the specifics of how to work with numeric types in .NET, with a focus on SIMD data types and operations.\nReflection — how to operate reflection mechanisms to investigate assemblies and types, how to create types and invoke their members. Also a look at the practical use of reflection for working with attributes.\nMemory Management — a discussion of latest C# features for high performance computation, such as the passing of value types by reference, ref structs and Span<T>.\nExtension Methods — a seemingly simple mechanism has plenty of advanced uses.\nIn addition, this course comes with a section dedicated to assorted topics that also showcase advanced uses of C#. These topics include:\nExploiting IDisposable — shows how you can abuse the IDisposable/using mechanism in order to dynamically define operations as pairs of start/end calls. Useful for things like simple performance measurement.\nContinuation Passing Style — demonstrates how you can define complex algorithms in terms of sequentially invoked methods with customized return types indicating the result of the operation.\nLocal Inversion of Control shows that sometimes inversion of control happens at a local scale. Here we use extension methods to invert control on a bunch of different data types, providing useful functionality.\nBeyond the Maybe Monad — even though C# introduced the ?. operator in order to chain null checks together, the classic monad implementation, based on extension methods, is still relevant, as it can also handle other scenarios.\nMnemonics — not so much a C# language feature but rather an interesting way of defining huge sets of similar code templates that can be expanded quickly to the code constructs you need the most.\nCourse Pre-Requisites\nGood understanding of C#\nUnderstanding of object-oriented programming (OOP)\nExperience writing real-world C# applications\nCourse Organization\n100% hands-on\nDemonstrated either in Visual Studio or using the Kinetica rendering engine\nDemos are single .CS files\nHeavy use of IDE features\nAd-hoc use of 3rd-party packages\nEnjoy!",
      "target_audience": [
        "Experienced C# developers",
        "C#/.NET Architects"
      ]
    },
    {
      "title": "A 16 Hour C# Course With Microsoft Visual Studio 2013",
      "url": "https://www.udemy.com/course/csharpbasics/",
      "bio": "Quadruple Your Skills: Learn C# , Microsoft Visual Studio 2013, Debugging and SQL Server Basics!",
      "objectives": [
        "Find, download and install Visual Studio",
        "Create and run a simple console application",
        "Declare and initialize variables",
        "Learn how to use the locals and call stack windows in Visual Studio",
        "Learn how to step through a program line by line for maximum comprehension",
        "Learn how to perform arithmetic",
        "Learn to use various variable types",
        "Learn how to code for loops",
        "Learn how to code switch statements",
        "Learn how to construct simple classes",
        "Learn how to create objects, call functions, both object and static",
        "Learn how to use and code arrays for various data types",
        "Learn how to use the length property of arrays, and how to convert between data types",
        "Learn how to create a simple inheritance structure",
        "Learn how to call functions from client code",
        "Learn simple file writing and reading",
        "Learn how to create a simple application and install it on your computer",
        "Learn how to write generic classes and interfaces",
        "Learn how to work with Lambda expressions",
        "Learn how to work with SQL Server",
        "Learn how to use LINQ with Arrays and XML",
        "Learn how to use LINQ with SQL Server",
        "Learn how to update, delete, insert data with web pages and SQL Server",
        "Learn how to create and publish simple WPF apps",
        "Learn how to make simple Graphical User Interfaces and Display Files and Folders",
        "Learn how to work with threads",
        "Learn how to serialize and deserialize objects",
        "Learn how to create databases from code using the Entity Framework",
        "Learn how to create windows services",
        "Develop an Understanding of Windows Forms",
        "Understand How To Use Async and Await To Increase Program Responsiveness",
        "Learn How To Check for Existing Files and Append Text",
        "Learn How To Launch Another Program With C# Code",
        "Create Full Scale Applications That Synthesize Many Different Concepts",
        "Learn How To Work With Progress Bars",
        "Learn How To Save and Restore Control Values",
        "Learn How To Work With List Boxes",
        "Learn How To Build Events With Publishers and Subscribers",
        "Learn How To Build An Image Browser",
        "How to To Use Iron Python In C#"
      ],
      "course_content": {},
      "requirements": [],
      "description": "My name is Tom Owsiak.\nI'm the author of \"Beginning C# Hands-On-The Core Language\" from Packt Publishing. Let's take a look at every this course has to offer.\nI have an updated version of a  similar course with Visual Studio 2017.\nPlease search \"Learn C# with Visual Studio 2017 and Console Programs\"\nUpdate 8/24/2020: Added several new lessons on the bottom on concepts related to try/catch/finally and using blocks with C# 8.0.\nThis comprehensive C# course is designed for beginner programmers, as you won't be rushing through code. It focuses on the C# language rather than the graphical aspects of Windows programming. The focus at first is on simple Console applications. This course works with Visual Studio 2013, or Visual Studio 2015.\n\nYou'll learn in a detailed and deliberate way so you can set a foundation and move from basic to more advanced concepts easily.\nIn addition to learning C#, you'll also cover the Microsoft Visual Studio programming environment, which will serve as the perfect complement to your newfound C# skills.\nLearn C#, Visual Studio, and Object Oriented Programming\nStart Using the C# Programming Language to Work with Code and Data Through Simple Console Applications\nUnderstand the Microsoft Visual Studio Environment as It Relates to C#\nApply the Fundamentals of Object Oriented Programming to Data\nEnhance Your Programming Skills with a Foundation in C#\nThroughout this course, you'll learn the core concepts of C#, which can then be applied directly to other popular programming languages, including C++, C, Java, and JavaScript.\nContents and Overview\nYou'll start this course by learning the fundamentals of C# and Visual Studio, including configuring the layout, defining variables, interacting with users, and understanding data types, data conversions, and constants.\nTo work with code in a more advanced way, you'll tackle how to check simple conditions using if/else blocks, as well as how to use loops to do things like repeat blocks of code to work more efficiently.\nAfter covering various operators to evaluate and assign control structures, you'll learn how to use arrays to store collections of data.\nMoving on to Object Oriented Programming, you'll create objects that contain both data and functions to make your job even easier.\nBy the end of this course, you'll have a solid understanding of the most important aspects of C#, Visual Studio, and Object Oriented Programming.\nYou'll be able to use these new skills to advance your career as a programmer, as well as become a C# developer.\nNote: Promo template licensed from PRESENTERMEDIA\nNewer course:\n\"Learn C# with Visual Studio 2017 and Console Programs\". This one has lots of exercises.",
      "target_audience": [
        "Programming Novices",
        "People Who Understand That Rushing In General Results in Shallow Understanding",
        "People Who Like To Check Their Understanding"
      ]
    },
    {
      "title": "C# Basics for Beginners: Learn C# Fundamentals by Coding",
      "url": "https://www.udemy.com/course/csharp-tutorial-for-beginners/",
      "bio": "Master C# fundamentals in 6 hours - The most popular course with 50,000+ students, packed with tips and exercises!",
      "objectives": [
        "Learn the fundamentals of C# and .NET Framework",
        "Work with primitive types and expressions",
        "Work with non-primitive types (classes, structs, arrays and enums)",
        "Learn the difference between value types and reference types",
        "Control the flow of programs using conditional statements",
        "Use arrays and lists",
        "Work with files and directories",
        "Work with text",
        "Work with date and time",
        "Debug C# applications effectively"
      ],
      "course_content": {
        "Introduction": [
          "What is this Course",
          "About Me",
          "A Note on Taking this Course",
          "Asking Questions",
          "Before You Get Started"
        ],
        "Introduction to C# and .NET Framework": [
          "Introduction",
          "C# vs .NET",
          "What is CLR?",
          "Architecture of .NET Applications",
          "Getting Visual Studio",
          "Our First C# Application",
          "What is ReSharper?",
          "Fundamentals of C# and .NET",
          "Summary"
        ],
        "Primitive Types and Expressions": [
          "Introduction",
          "Variables and Constants",
          "Overflowing",
          "Scope",
          "Demo: Variables and Constants",
          "Type Conversion",
          "Demo: Type Conversion",
          "Operators",
          "What are Logical Operations?",
          "Demo: Operators",
          "Comments",
          "Primitive Types and Expressions",
          "Summary"
        ],
        "Non-Primitive Types": [
          "Introduction",
          "Classes",
          "Demo: Classes",
          "Structs",
          "Arrays",
          "Demo: Arrays",
          "Strings",
          "Demo: Strings",
          "Enums",
          "Demo: Enums",
          "Reference Types and Value Types",
          "Demo: Reference Types and Value Types",
          "Demo: Reference Types and Value Types",
          "Non-primitive Types",
          "Summary"
        ],
        "Control Flow": [
          "Introduction",
          "Conditional Statements",
          "Demo: If/Else and Switch/Case",
          "Exercises",
          "Iteration Statements",
          "Demo: For Loops",
          "Demo: Foreach Loops",
          "Demo: While Loops",
          "Random Class",
          "Control Flow",
          "Exercises",
          "Summary"
        ],
        "Arrays and Lists": [
          "Introduction",
          "Arrays",
          "Demo: Arrays",
          "Lists",
          "Demo: Lists",
          "Exercises",
          "Arrays and Lists",
          "Summary"
        ],
        "Working with Dates": [
          "Introduction",
          "DateTime",
          "TimeSpan",
          "Dates and Times Quiz",
          "Summary"
        ],
        "Working with Text": [
          "Introduction",
          "String",
          "Demo: String",
          "Live Coding: Summarising Text",
          "StringBuilder",
          "Demo: StringBuilder",
          "Working with Text",
          "Exercises",
          "Procedural Programming",
          "Summary"
        ],
        "Working with Files": [
          "Introduction",
          "System.IO Namespace",
          "Demo: File and FileInfo",
          "Demo: Directory and DirectoryInfo",
          "Demo: Path",
          "Exercises",
          "Working with Files",
          "Summary"
        ],
        "Debugging Applications": [
          "Introduction",
          "Debugging Tools in Visual Studio",
          "Removing Side Effects",
          "Defensive Programming",
          "Call Stack Window",
          "Locals and Autos Windows",
          "Debugging Applications",
          "Summary"
        ]
      },
      "requirements": [
        "Visual Studio Community Edition (FREE)"
      ],
      "description": "With over 50,000 happy students and 15,000+ positive reviews, this course is Udemy's most popular course for learning C# from scratch!\n\n\n\nC# is a beautiful cross-platform language that can be used to build variety of applications. With C#, you can build mobile apps (for Windows, Android and iOS), games, web sites and desktop applications.\n\n\nOnce you master fundamentals of C# and programming with .NET framework, you'll have lots of options in front of you. You can choose to build mobile apps if you prefer, or you can change job and work as a web developer. As long as you know the fundamentals well, switching to different technology stacks is pretty easy.\n\n\nIn this course, Mosh, author of several best-selling C# courses on Udemy, teaches you the fundamentals of C# programming in a clear, concise and step-by-step way. Note only that, but he'll also teach you best practices and shortcuts to help you become a better developer.\n\n\nEvery section comes with a few bite-sized video lectures and a quiz or programming exercises. These exercises are carefully chosen from academic and real-world examples to train your \"programming brain\". If you want to be a successful programmer, who has many high-paid job offers and freedom to \"choose\", you need to learn how to think like a programmer. And this is what you're going to get out of these exercises. All exercises come with solutions, so you can compare your solutions with Mosh's to find areas for improvement.\n\n\nThere are plenty of free tutorials and videos that teach you C# and they are great if all you want to learn is C# constructs. But if you want to learn C# and become a better programmer with a bright future and lots of options, this is the course for you. For every topic, not only will you learn the whats, but you'll also learn the whys, and hows. You'll see common errors that pop up as part of developing applications with C#. Mosh explains these errors in detail, and shows you how to resolve them.\n\n\n\n\n\nTHE COMPLETE C# PACKAGE\nThis course is the first part of Mosh's complete C# series on Udemy:\nPart 1: C# Basics for Beginners: Learn C# Fundamentals by Coding\nPart 2: C# Intermediate: Classes, Interfaces and Object-oriented Programming\nPart 3: C# Advanced: Take Your C# Skills to the Next Level\n\n\n\n\nWHAT OTHER STUDENTS WHO HAVE TAKEN THIS COURSE SAY:\n\"I’ve actually landed my first job as a Junior software developer. I owe a lot of it to you because your courses have been EXTREMELY helpful. May God bless you and your efforts to create high quality courses. This has really changed my life from working as a security guard and doing websites for free, now I am a professional.\" -Danish Jafri\n\n\n\"Great Instructor, Great Course, Mosh does a great job of breaking down the material and making it interesting.\" -Michael Gardner\n\n\n\"You can hear the passion in his voice which makes the course sound 10x more exciting then someone who just does it for the money.\" -Tim Medcalf\n\n\n\"Great Instructor, I love the way he teaches the course.\" -Edward Tkachev\n\n\n\"I love Mosh's approach of delivering the theory and then the practice. Audio and video quality are superb.\" -Paul Mooney\n\n\n\"You can definitely tell that Mosh is not only an experienced programmer, but he also cares deeply about producing great quality lessons and ensuring that his students are understanding the content.\" -David\n\n\n\n\n30-DAY FULL MONEY-BACK GUARANTEE\nThis course comes with a 30-day full money-back guarantee. Take the course, watch every lecture, and do the exercises, and if you feel like this course is not for you, ask for a full refund within 30 days. All your money back, no questions asked.\n\n\n\n\nABOUT YOUR INSTRUCTOR\nMosh (Moshfegh) Hamedani is a software engineer with 17 years of professional experience. He is the author of several best selling Udemy courses with more than 120,000 students in 192 countries. He has a Master of Science in Network Systems and Bachelor of Science in Software Engineering. His students describe him as passionate, pragmatic and motivational in his teaching.\n\n\nDo you want to start learning C# now?\nJoin the other 50,000+ happy students who have taken this course and start coding within a few minutes.",
      "target_audience": [
        "Newbies or students looking for a refresher on the basics of C# and .NET"
      ]
    },
    {
      "title": "C# Basics for Beginners - Learn C# Fundamentals by Coding",
      "url": "https://www.udemy.com/course/csharp-basics-for-beginners-learn-csharp-fundamentals-by-coding/",
      "bio": "This C# basics course will create an unshakeable solid programming skills and mindset foundation. Learn C# with examples",
      "objectives": [
        "Learn the fundamentals of C# and .NET Framework",
        "Work with Primitive Data Types",
        "Debug your code to find bugs that are making your code behave unexpectedly",
        "Control the flow of code execution by using Conditional Statements (if/else, if/else if/else, switch)",
        "Work with the Console and Manipulate all of its aspects",
        "Effective ways to manipulate strings",
        "How to use loops in many different scenarios",
        "Work with One and Multi dimensional arrays",
        "Work with Lists and learn the difference between Lists and Arrays",
        "Confront and solve difficult problems on your own",
        "Create methods to write less code and improve its readability"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the course",
          "Setup Your Developer Environment (Installing Visual Studio)",
          "Creating a New Project in Visual Studio 2017",
          "Say Hello to the World! (Your first program)",
          "BONUS: Useful Shortcuts That You Need to Know in Visual Studio",
          "BONUS: Initial Quality Code Guidelines",
          "BONUS: Shortcuts and Quality Code Tips as a PDF!",
          "Lets see what you've learned so far!",
          "Introduction - Source Code",
          "Introduction - Exercises and Solutions",
          "Quick Tip 1 - Perform Math Operations in C#"
        ],
        "Primitive Data Types Part 1 - All Primitive Data Types": [
          "What is a Variable and what is a Data Type?",
          "Quick Tip 2 - Input Variables From The Console",
          "Using Comments to Explain and Debug Your Code",
          "Brief Overview of Data Types",
          "Debugging Your Code and Tracking Values",
          "Create Integer Numbers",
          "The Tricky Floating Point Numbers",
          "Booleans - To Be or Not To Be?",
          "Characters - Single Lonely Characters",
          "Quick Tip 3 - Correct The Encoding Settings To Print Special Characters",
          "Store Anything Into a String!",
          "Objects and Vars and Why You Should NOT Use Them",
          "Let's see what you've learned so far!"
        ],
        "Primitive Data Types Part 2 - Basic Operations and Arrays": [
          "Introduction to Arrays - Things Start To Get Tricky!",
          "Converting any Data Type to a String",
          "String Tricks",
          "Converting, Parsing and Casting of Data Types",
          "Quick Tip 4 - Generate Random Numbers in C#",
          "Let's see what you've learned so far!",
          "Primitive Data Types - Source Code",
          "Primitive Data Types - Exercises and Solutions"
        ],
        "The All Mighty Console": [
          "Difference between .Write and .Writeline",
          "Formatting Strings the Correct Way!",
          "\"Escaping\" Special Characters in Strings!",
          "Read a character from the Console",
          "Read a line from the console",
          "Read a pressed key from the console",
          "Change the Colors of the Console and How to Clear it",
          "Quick Tip 5 - Output Colorful Messages The Easy Way!",
          "Change the Cursor Settings and the Title of the Console",
          "Control the Size of the Console",
          "Let's see what you've learned so far!",
          "The Console - Source Code",
          "The Console - Exercises and Solutions"
        ],
        "Operators and Expressions": [
          "The Arithmetic Operators - Do Some Math with C#",
          "The Logical Operators - To Be or Not To Be Part 2",
          "The Comparison Operators - Compare Numbers, Strings and Everything in Between",
          "The Assignment Operators - You Are Using Them All The Time Without Knowing!",
          "The Difference Between Unary, Binary and Ternary Operators!",
          "Quick Tip 6 - Check if a Number is Odd or Even",
          "Let's see what you've learned so far!",
          "Operators and Expressions - Source Code"
        ],
        "Conditional Statements - If that, then that, WHAT?, else dont, then WHAT?": [
          "If that do this, else do this",
          "If that do this, else if that do this, but if neither, do that",
          "Switch Until You Find the Correct Case! Switch-Case!",
          "Quick Tip 7 - Use Brackets To Bulletproof Your Code",
          "Let's see what you've learned so far!",
          "Conditional Statements - Source Code",
          "Conditional Statements - Exercises and Solutions"
        ],
        "Loops - Lets get down to business": [
          "What is a Loop and Create a Simple While Loops",
          "Create Do-While Loops and the Difference with While Loops",
          "Creating For Loops and The Difference with While Loops",
          "Quick Tip 8 - Reverse a For Loop",
          "Creating Foreach Loops - Another Loop? And the Difference with For Loop",
          "Creating Nested Loops - Things Start to Get Messy",
          "Let's see what you've learned so far!",
          "Loops - Source Code",
          "Loops - Exercises and Solutions"
        ],
        "Project 1 - Hangman": [
          "Project 1- Hangman",
          "Project 1 - Hangman - Bug Fixing",
          "Quick Tip 9 - Check Your Code for Styling Errors - StyleCop",
          "Project 1 - Source Code"
        ],
        "Arrays & Lists": [
          "What is an Array?",
          "Loop Through and Output an Array",
          "Value and Reference Types and The Difference Between Them",
          "Clone an Array The Correct Way!",
          "Reverse an Array - Let's do it ourselves!",
          "Sort an Array - Bubble Sort Algorithm Explanation",
          "Arrays Example - Check Array for Symmetry",
          "Quick Tip 10 - Input Integer Array With a Single Line of Code",
          "What is a List and how is it different from an Array?",
          "Lets see what you've learned so far!",
          "Arrays & Lists - Source Code",
          "Arrays & Lists - Exercises and Solutions"
        ],
        "Multidimensional Arrays": [
          "Introduction to Multidimensional Arrays",
          "Inputting Two Dimensional Arrays",
          "Outputting Two Dimensional Arrays",
          "Mini project 1 - Spiral Matrix",
          "Lets see what you've learned so far!",
          "Multidimensional Arrays - Source Code",
          "Multidimensional Arrays - Exercises and Solutions"
        ]
      },
      "requirements": [
        "Visual Studio Community Edition (It's free and the course has a tutorial on how to download and install it)",
        "No previous experience with coding is needed",
        "Strong desire to learn, coding requires a lot of time to master it!"
      ],
      "description": "In a digitalized world, such as the one we live in, not knowing how to code will put you at a disadvantage. Regardless of what your goal is, wether its to find a job as a developer or not, knowing a little bit of coding can be really handy from time to time.\nAnd C# is a great language to start. Why? Well what I like the most about C# is its structure, its a strong typed language. What does that mean? It means that everything is \"defined\" in C#, which in turn lets you write beautiful code, you will see that at one point writing the code becomes an art, it just looks beautiful when you structure it the correct way.\nLeave the aesthetics, with C# you can create anything, desktop application, websites, Android/iPhone applications, games, anything you can think of, you can create it with C#.\nBy learning to code with C# you will be able to jump quickly into any other language, if you need to at some point. The reason for that is, again, the strongly typed and well created hierarchy in C#, which will basicly teach you everything you need to know about coding in general.\nAll programming languages are pretty much the same, on the basic level the difference is only in the syntax. All of them have variables, loops, arrays etc., so if you think that you will need to jump to another language at some point, do not worry, you will be able to do that with ease. I myself started with C#, then I moved on to a little bit of Java, then a little JavaScript, then a little TypeScript, and if I didn't have the solid foundations that I have with C#, it wouldn't have been that easy!\nThis is why I am able to help you forge the most solid foundations that you may ever get in coding. Just like everything in life, your first exposure to something new is the most crucial one.\nThis course will teach you both the theory and the practice behind coding. You will learn by watching, by doing and mostly by struggling.\nYou will also find numerous examples and projects to practice what we are learning and nothing will be left out. At the end of each section there will be a short quiz that will test you for some of the tricky parts of that section.\nExercises are also provided so that you can try to code on your own, most of them will not be solved in the course, but you will get hints from time to time on how to solve some of the hard ones. And of course you can always ask a question in the QnA section of the course! I will answer within less than 24 hours!\nRemember, there is no such thing as a stupid question, the devil is in the details!\nPlus, you have a 30 days money back guarantee, so if the course does not meet your expectations, you can get your money back, no questions asked!\n***What are some of the students saying about the course:***\n(You can just scroll down a little and see the ratings for yourself in the ratings section)\nArris Hadjadj (5 Stars):\n\"If you are serious about learning C# , in great details great depth with a clear yet very deep explanation you know what you have to do. This instructor have a passion for teaching he does not leave anything behind until you hit the ha moment.i sincerely thank you for this awesome course.\"\n\n\nPeter Quin (5 Stars):\n\"The lectures are very well explained, no stone left unturned! The instructor's language is good and there are plenty of exercises! A+!!\"\n\nJohn (5 Stars):\n\"This course is excellent! I am not a complete beginner but I still learned a lot of new things and the exercises really sweat you!\"\n\nKelly (5 Stars):\n\"The bonus videos are great! I never knew that these shortcuts exist! I'm halfway through the course and I learned so many interesting things!\"\n\nJaryd Ambramson (5 Stars):\n\"4 Lessons in. I like the style alot. Easy to follow, but not too easy. Instructor has the knowledge and skills to produce a proper video. Let's hope he keeps it up throughout the course. Did have to run at 1.25% speed, but sounds good still.\"\n\nJacqui Ballard (5 Stars):\n\"Very easy to follow. The Instructor is very comfortable and is very helpful :)\"\nEnroll now and join all of these happy students!",
      "target_audience": [
        "This course is for anyone who wants to learn how to code, no previous experience is required",
        "Students looking for a C# course to refresh their knowledge"
      ]
    },
    {
      "title": "JavaScript And PHP And Python Programming Complete Course",
      "url": "https://www.udemy.com/course/javascript-and-php-and-python-programming-complete-course/",
      "bio": "Learn JavaScript And PHP And Python Programming language In One JavaScript And PHP And Python Complete Course",
      "objectives": [
        "Learn three programming languages In one course, For web development beginners",
        "Getting Started With Javascript Variables,Values and Data Types, Operators and Operands",
        "Write JavaScript scripts and Gain knowledge in regard to general javaScript programming concepts",
        "PHP Section Introduction to PHP, Various Operator types , PHP Arrays, PHP Conditional statements",
        "Getting Started with PHP 7 concepts PHP CSPRNG And PHP Scalar Declaration",
        "Getting Started with PHP Function Statements And PHP Decision Making",
        "Python section ,python operators and various operator types",
        "Python function statements and python decision making",
        "Python loops, various python loops used in combinations",
        "python use of lambda function and python command line arguments"
      ],
      "course_content": {},
      "requirements": [
        "Basic Computer Knowledge",
        "Basic HTML Knowledge"
      ],
      "description": "JavaScript And PHP And Python Programming language Complete Course\nSection 1- learn javascript programming language\nThe course is created with thorough, extensive, but easy-to-follow content that you’ll easily understand and absorb.\nThe course starts with the basics, including JavaScript fundamentals, programming, and user interaction.\n\n\nthe curriculum is going to be very hands-on as we walk you from start to finish to become a professional Javascript developer. We will start from the very beginning by teaching you Javascript basics and programming fundamentals, and then execute into real-life practice and be ready for the real world.\n\n\nwhile Javascript is complicated for beginners to learn, it is widely used in many web development areas.\nthis course gets you started with an introduction to JavaScript. It assumes that you're new to the language, so it gets you started with basic functionality such as creating functions, creating variables, and calling these lines of code from your standard HTML pages. It talks about events and triggers for custom event handling. It talks about pattern matching, searching for text within a page, flow control, and the document object model (DOM). We start off with the basics and move on to more complex functionality such as arrays and objects. We then discuss how to script common elements with JavaScript such as forms and tables. At the very end, we discuss major libraries such as Ajax, which allows you to make asynchronous calls to server-side scripts without reloading the web page in the server.\nMaster the fundamentals of writing Javascript scripts\nLearn core Javascript scripting elements such as variables and Objects\nDiscover how to work with lists and sequence data\nWrite Javascript functions to facilitate code reuse\nUse Javascript to read and write files\nMake their code robust by handling errors and exceptions properly\nSearch text using regular expressions\nThe topics covered in this course are:\n* javascript course contents:\nJavascript introduction\nJavascript array\nJavascript variables\nJavascript functions\nJavascript objects\nJavascript control statements\nJavascript cookies\nJavascript loop statements\nJavascript data structures\nJavascript error handling\nJavascript regular expressions\n\n\n\nsection 2- learn PHP programming language\nThis section will learn the basic structure of a web application and how a web browser interacts with a web server. You'll be introduced to the request/response cycle, including GET/POST/Redirect. You'll also gain an introductory understanding of Hypertext Markup Language (HTML), as well as the basic syntax and data structures of the PHP language, variables, logic, iteration, arrays, error handling, and superglobal variables, among other elements.\n\n\nThe topics covered in this PHP course are:\n\n\nPHP various operator types\nPHP arrays\nPHP conditional statements\nPHP loops\nPHP function statements\nPHP decision making\nPHP file Input and Output\nPHP web concepts\nPHP MySql API\nPHP CSPRNG\nPHP scalar declaration\nand more..\n\n\nSection 3- python programming language.\nThis course section provides an introduction to programming and the python language. students are introduced to core python programming concepts like conditionals, loops, variables, and functions. this section includes an overview of the various python aspects. It also provides hands-on coding exercises using commonly used writing custom functions, and reading and writing to files. this section or whole course may be more robust than some other courses, as it delves deeper into certain essential programming topics.\nwhat you will learn in this section:\nIdentify core aspects of programming and features of the Python language\nUnderstand and apply core programming concepts like conditionals, loops, variables, and functions\nUse different ways for writing and running Python code\nDesign and write fully-functional Python programs using commonly used data structures, custom functions, and reading and writing to files\npython various operator types\npython methods\npython conditional statements\npython loops\npython function statements\npython decision making\npython file Input and Output\npython datatypes.\nand more..\n\n\nThank you see you inside the course",
      "target_audience": [
        "Beginner Full Stack Developers",
        "Beginner Web Developer"
      ]
    },
    {
      "title": "PYTHON - A to Z Full Course for Beginners",
      "url": "https://www.udemy.com/course/python-django-programming-beginner-to-advance-tutorial-step-by-step/",
      "bio": "Learn:- Python 3, Python Programming, Python File Operation, Python Scratech Concepts, Python Advance Concepts real life",
      "objectives": [
        "Make New App Using the Python Knowledge",
        "We Start from very Basic Setup to Advance Level",
        "Basic to Advance Python Step by Step"
      ],
      "course_content": {
        "Python Overview": [
          "Python - Who can Take the Course",
          "Pre-requisite to take the Course",
          "Importance Of Python",
          "Future of Python",
          "Quiz : Test Your Knowledge",
          "Python - Job Opportunities",
          "Top Companies Using Python",
          "Applications of Python",
          "Quiz : Test Your Knowledge",
          "Reasons to work in Python",
          "Python Usage In Different Domains",
          "Quiz : Test Your Knowledge",
          "What are the Advantages of Python",
          "Quiz : Test Your Knowledge",
          "Types In Python",
          "What are the Versions of Python",
          "Quiz : Test Your Knowledge",
          "Features Of Python",
          "Quiz : Test Your Knowledge",
          "How to Switch into ML & DS",
          "Open Source Tools In Python",
          "Quiz : Test Your Knowledge",
          "Indentation in Python",
          "Quiz-Test Your Knowledge"
        ],
        "Python - Environment Setup": [
          "Jupyter In Online For Practice",
          "Python Jupyter Installation Process"
        ],
        "Python - Simple Basics": [
          "Python - Case Sensitive",
          "Quiz-Test Your knowledge",
          "Reserved Keywords in Python",
          "Quiz-Test Your Knowledge",
          "Python-Important Characters",
          "Quiz-Test Your Knowledge",
          "Python eval() function",
          "Quiz-Test Knowledge",
          "Range() & Xrange() functions",
          "Quizz-Test your knowledge",
          "Mutability & Immutability",
          "Quiz-Test Your Knowledge"
        ],
        "Built-in Functions": [
          "Python print() function",
          "Quiz-Test Your Knowledge",
          "Python type() function",
          "Quiz-Test Your Knowledge",
          "Python id() function",
          "Quiz-Test Your Knowledge",
          "Input operations",
          "Quiz-Test Your Knowledge"
        ],
        "Working with Input & Output Functions": [
          "Tip - To become an Expert in Python Coding",
          "Quiz-Test Your Knowledge",
          "Multiple input values from user",
          "Quiz-Test Your Knowledge",
          "Multiple input values from user with Separator",
          "Quiz-Test Your Knowledge",
          "Output operations"
        ],
        "Python - Comments": [
          "Python Comments",
          "Quiz-Test Your Knowledge",
          "Python-Single and Multi line Comments",
          "Quiz-Test Your Knowledge",
          "Python - Tips to Write an Efficient Code",
          "Quiz-Test Your Knowledge"
        ],
        "Python - 2.x &3.x differences": [
          "Why Migration from Python 2.x to Python 3.x",
          "Quiz-Test Your Knowledge",
          "Python 2.x _ 3.x differences",
          "Quiz-Test Your Knowledge"
        ],
        "Python Data Types": [
          "Datatypes Overview",
          "Quiz-Test Your Knowledge",
          "Basic Datatypes",
          "Quiz-Test Your Knowledge",
          "Integer Data Type",
          "Quiz-Test Your Knowledge",
          "Float Data Type",
          "Quiz-Test Your Knowledge",
          "Data Type Complex",
          "Quiz-Test Your Knowledge",
          "Bool Data Type",
          "Quiz-Test Your Knowledge",
          "String Data Type",
          "Quiz-Test Your Knowledge"
        ],
        "Python Variables": [
          "What is Variable In Python",
          "Quiz-Test Your Knowledge",
          "Global Variable In Python",
          "Quiz-Test Your Knowledge",
          "How Can We Define Global Variable In Python",
          "Quiz-Test Your Knowledge",
          "Local Variable In Python",
          "Quiz-Test Your Knowledge",
          "How Can We Define Local Variable In Python",
          "Quiz-Test Your Knowledge",
          "Global Keyword In Python",
          "Quiz-Test Your Knowledge"
        ],
        "Python Integer Types": [
          "What are the Integer form types",
          "Quiz-Test Your Knowledge",
          "Decimal Form",
          "Quiz-Test Your Knowledge",
          "Binary Form",
          "Quiz-Test Your Knowledge",
          "Octal Form",
          "Quiz-Test Your Knowledge",
          "Hexa Decimal Form",
          "Quiz-Test Your Knowledge",
          "Finding Base Values For Integer Forms-123",
          "Quiz-Test Your Knowledge"
        ]
      },
      "requirements": [
        "No prior programming knowledge"
      ],
      "description": "From this Basic course you are aware of very basic concepts about python programming language. We have 7+ years in python programming. Starts With very basic level. If you even don't have any programming knowledge that will be fine. You are able to learn every concept by an example.\nToday python has a grate demand in industry. So if you learn this language it will help you to get your dream job also! Python is a very easy to learn and powerful language. The size of the code is too small. If you want to build a simple Java or C program of Hello World it will take 6/7 line But in python it is just print \"hello world!\"\n\n\n\nPython setup\nPython IDE\nVariables\nPython Operators\nArithemetic Operator\nComparison Operator\nAssignment Operator\nBitwise Operator\nMembership Operator\nIdentity Operator\nIf Statement\nIf Else Statement\nBreak & Continue Statement\nFor Loop\nWhile Loop\nHome Assignment\nString\nNumber\nList\nDictionary\nFunction\nModule\nException\nHome Assignment\nFile Operation\nFile Reading\nFile Writing\nAppending File",
      "target_audience": [
        "Anybody Who wants to learn python without any prior programming Knowledge",
        "Suitable for Buginner"
      ]
    },
    {
      "title": "Practical Java concurrency with the Akka Actor Model",
      "url": "https://www.udemy.com/course/practical-java-concurrency-with-the-akka-actor-model/",
      "bio": "Learn how to avoid thread-safety issues, synchronization and blocking with a really practical hands-on course",
      "objectives": [
        "Concurrent Java programming using the Actor Framework",
        "How the Actor Model works and can be used as a better alternatives to Thread creation",
        "How to use the core Akka libraries to build robust, thread-safe, concurrent applications"
      ],
      "course_content": {
        "Chapter 1 - Introduction": [
          "Introduction",
          "Course files",
          "How to get support for this course"
        ],
        "Chapter 2 - Why do we need Akka?": [
          "An introduction to our first multi-threading example",
          "Basic concurrent programming in core Java",
          "Why concurrent programming in Java is difficult"
        ],
        "Chapter 3 - The Actor Model": [
          "The concepts of the actor design pattern",
          "What is an actor?",
          "Why does this model work?"
        ],
        "Chapter 4 - Creating our first actor": [
          "Setting up an Akka project",
          "Creating our first actor - constructors",
          "Creating our first actor - defining behaviors",
          "Instantiating actors and sending messages"
        ],
        "Chapter 5 - Going further with actors": [
          "Expanding the receiveBuilder",
          "Creating child actors",
          "Actor paths",
          "Starting the big prime example",
          "Exercise 1 - creating actors",
          "Exercise 1 - walktrhrough"
        ],
        "Chapter 6 - Going further with messages": [
          "Creating a custom message type",
          "Applying the custom message type to a behavior",
          "Using interfaces to support multiple message types",
          "Understanding message delivery guarantees"
        ],
        "Chapter 7 - Case Study 1 - Simulation example": [
          "Introducing the case study",
          "Architecting the solution",
          "Implementing the case study",
          "Scheduling and timers"
        ],
        "Chapter 8 - Going further with behaviors": [
          "Behaviors can change over time",
          "Exercise 2 - Changing behaviors",
          "Exercise 2 - walkthrough"
        ],
        "Chapter 9 - Actor lifecycles": [
          "Actors stopping themselves",
          "Stopping child actors",
          "Actor lifecycle methods"
        ],
        "Chapter 10 - Logging": [
          "Logging messages from actors",
          "Configuring log level output"
        ]
      },
      "requirements": [
        "Basic Java knowledge",
        "Some existing Java multi-threading programming is helpful but not essential",
        "No knowledge of Akka or Scala is needed"
      ],
      "description": "This course will cover how to use the Actor Model provided by the Akka framework to build robust, thread-safe concurrent applications with Java.\nWe'll be leaving behind the traditional problems with multi-threaded programming, such as dealing with non-thread safe variables, deadlocks, thread interruptions and more. Akka gives us a completely different approach. Instead of creating threads, using synchronization, locks, semaphores and countdownlatches, we'll learn how the actor model gives us a very different way to approach concurrent programming.\nLearning the actor model from scratch can be a challenge, so in this course we build up the knowlege step by step, meaning you'll have no problems following along and understanding everything we do. And the course is full of practical real-world scenarios, so that you'll be able to take what you learn and apply it to your own projects. Our main case study is that we'll be building a basic blockchain mining application.\nPlease note that although Akka is built in Scala, absolutely no Scala knowledge is needed for this course. This course covers Akka with Java and we won't be writing any Scala code. It's ideal for Java developers with some experience (although you certainly don't need to be an expert).\nThis course covers the newer Akka Typed API only.",
      "target_audience": [
        "Novice and experienced Java developers who need to enhance their concurrent programming skills."
      ]
    },
    {
      "title": "Scala & Functional Programming Essentials",
      "url": "https://www.udemy.com/course/rock-the-jvm-scala-for-beginners/",
      "bio": "Become a Scala programmer and get the skills you need to work with Spark, Akka, and any Scala framework!",
      "objectives": [
        "understand Scala code in production environments or open-source projects",
        "think code differently with functional programming",
        "write applications in Scala from scratch",
        "contribute to products and open-source projects written in Scala",
        "skills to start developing with powerful tools on top of Scala: Spark, Akka, Play"
      ],
      "course_content": {},
      "requirements": [
        "some experience with some other programming language - you've built something useful that works",
        "computer science fundamentals: memory, running time, how programs compile and run",
        "some Java knowledge is a plus, but not required"
      ],
      "description": "Updated for Scala 3! This course is now fully compatible with both Scala 2 and Scala 3.\nIn this course, we will learn the basics of Scala and functional programming, two highly in-demand topics in software industry today. Write 3000+ lines of Scala code yourself, with guidance, through 100+ examples and exercises.\nWhy Scala:\nit's currently the hottest language based on the Java Virtual Machine - the number of Scala jobs has exploded, but demand is even higher\nScala offers significantly higher pay (> 20%) than same-level Java positions\nit's incredibly fun - if you learn Scala, you'll hardly want to get back\nit unlocks the doors to some of the latest technologies - Spark, Akka and more\nI like to get to the point and get things done. This course\ndeconstructs Scala - which is otherwise hard to learn - into the critical pieces you need\nselects the most important Scala concepts and separates them into what's simple but critical and what's powerful\nsequences ideas in a way that \"clicks\" and makes sense throughout the process of learning\napplies everything in live Scala code\nThe end benefits are still much greater:\nsignificant bump in salary when you switch to Scala - return on investment for this course >100x in the first year alone!\nmore enjoyable work - Scala is fun!\nfuture-proof skills - you'll be able to work with some of the cutting edge technologies (Spark, Akka etc)\nThis course is for established programmers with otherwise no experience with Scala language or little to no experience with functional programming. I already assume a solid understanding of general programming fundamentals. If you've never coded before, this course is likely not for you.\nThe course is comprehensive, but you'll always see me get straight to the point. So make sure you have a good level of focus and commitment to become a badass programmer.\nI believe both theory and practice are important. That's why you'll get lectures with code examples, real life Scala code demos and assignments, plus additional resources, instructions, exercises and solutions.\nI've seen that my students are most successful - and my best students work at Google-class companies - when they're guided, but not being told what to do. I have assignments waiting for you, where I offer my (opinionated) guidance but otherwise freedom to experiment and improve upon your Scala code.\nDefinitely not least, my students are most successful when they have fun along the way!\nSo join me in this course and let's rock the JVM with Scala!",
      "target_audience": [
        "programmers with little or no experience with Scala or functional programming"
      ]
    },
    {
      "title": "Python for Beginners : Concise and Practical",
      "url": "https://www.udemy.com/course/python-basics-for-the-beginning-enthusiast/",
      "bio": "Learn Python from the beginning and get ready to use it in the future!",
      "objectives": [
        "Get started with Python",
        "Understand the building blocks of programming with Python",
        "Manipulate data with Python",
        "Create small programs with Python",
        "Import and use existing Python libraries",
        "Scrape websites with Python"
      ],
      "course_content": {},
      "requirements": [
        "Eager to learn and own a computer!"
      ],
      "description": "So, you've heard a lot about Python, but you don't know how to get started?  This Udemy course is exactly what you need!\nThis course will teach you all the fundamentals you need. Trust us, you won't need any other course to reach the intermediate/advanced level after this course.\nAmong other things, here's what you'll learn in this course:\nHow to get started with your Python setup\nThe building blocks of programming with Python\nHow to manipulate data with Python\nHow to create small Python programs\nHow to import and use existing Python libraries\nNOTICE\n: We will keep adding more and more content to the course to make it the best Python course for complete beginners.\nSo, what are you waiting for?! Click on BUY NOW and LET'S GET STARTED!",
      "target_audience": [
        "Anyone interested in learning Python",
        "Complete beginners to Python",
        "Users of other programming languages who want to get started with Python",
        "Hobbyists"
      ]
    },
    {
      "title": "Salesforce Integration With External Systems",
      "url": "https://www.udemy.com/course/salesforce-integration-with-external-systems/",
      "bio": "Learn about Salesforce integration API (SOAP | REST | Batch | Streaming | Outbound Messaging | Callouts) to connect",
      "objectives": [
        "Students will learn to Integrate Salesforce with External Systems",
        "Students will learn about Salesforce APIs (SOAP | REST | Batch | Streaming | Outbound Messaging | Apex Callouts)",
        "Students will learn to use each API to get data in and out of Salesforce effectively.",
        "Students will learn to publish Data to External System using Platform Events, Push Topics and Change Data Capture Events.",
        "Students will learn to use Postman and SOAP UI tools",
        "Students will learn to setup Visual Studio Code and Eclipse IDE",
        "Students will learn about BULK API and how to insert large sets of data using BULK API",
        "Students will learn to make REST API Callout from Lightning Web Component",
        "Students will learn to make REST API Callout from Aura Components"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of Salesforce Out of the box features is required for this course",
        "Students should know about basic Apex programming"
      ],
      "description": "Salesforce Integration with External Systems\nUnlock the Power of Seamless Connectivity\nSalesforce isn’t just the world’s #1 CRM—it’s the beating heart of countless businesses, powering billions of transactions every single day. But here’s the truth: Salesforce on its own is not enough.\nThe real magic happens when you connect Salesforce with the rest of your tech stack—enterprise apps, databases, custom systems, web services, and even streaming platforms.\nThat’s what this course is all about.\nWhy This Course?\nIf you’ve ever felt stuck trying to figure out which Salesforce API to use—or frustrated by the complexity of integrations—you’re not alone. Most admins, developers, and architects struggle with integrations because the documentation is overwhelming, fragmented, and not tied to real-world examples.\nThis course cuts through the noise. I’ll walk you step-by-step through all the major Salesforce integration patterns and APIs, explaining not just how they work but also when to use them.\nBy the end, you won’t just “know” Salesforce APIs—you’ll master them in real projects and confidently build integrations that actually deliver business value.\nWhat You’ll Learn\nHere’s a snapshot of the hands-on, practical skills you’ll walk away with:\nOverview of Salesforce APIs – Understand the big picture and where each API shines.\nSOAP API – Integrate Salesforce with enterprise-grade apps.\nREST API – Build lightweight, modern integrations in minutes.\nBulk API – Handle millions of records with ease.\nApex Callouts – Consume external services directly from Salesforce.\nLightning Web Components & Aura – Call external web services from your UI components.\nStreaming API (PushTopics, Platform Events, Change Data Capture) – Deliver real-time updates across systems.\nExternal System Data Flow – Fetch and send Salesforce data to apps like Java systems.\nEach section comes with real-world examples, clear explanations, and practical demos that mirror the scenarios you’ll face in your job.\nWho This Course Is For\nThis course is perfect if you are:\nA Salesforce Developer wanting to become the “go-to” integration expert on your team.\nA Salesforce Admin looking to understand how Salesforce connects with the wider ecosystem.\nAn Integration Architect or Technical Lead who needs to design scalable, reliable solutions.\nOr simply anyone preparing for Salesforce certifications that touch integrations.\nIf you want to level up your Salesforce career, this is your path.\nWhy Learn From Me?\nI’ve helped thousands of Salesforce professionals worldwide master Admin, Development, and Integration skills. I don’t just teach concepts—I translate them into practical, real-world use cases so you can apply what you learn immediately.\nMy students consistently tell me my courses gave them the confidence to land new jobs, pass certifications, and take on bigger projects.\nThe End Result\nBy the end of this course, you’ll be able to:\nConfidently pick the right Salesforce API for any scenario\nDesign integrations that are efficient, secure, and scalable\nBuild real-world solutions that connect Salesforce with external systems\nSupercharge your career by becoming an Integration Specialist\nJoin today and take your Salesforce skills to the next level.\nEnroll now in Salesforce Integration with External Systems, and start building the kind of integrations that make you an invaluable asset in the Salesforce ecosystem.",
      "target_audience": [
        "Salesforce Developers who are interested to learn about integrating Salesforce with External Systems",
        "Students who want to learn about different Salesforce API (SOAP | REST | Batch | Streaming | Outbound Messaging | Apex Callouts)",
        "If you are looking to become a Senior Salesforce Developer, this course is for you.",
        "If you are looking to pass your Salesforce Developer Certification, this course is for you.",
        "If you are a junior Salesforce developer and want to improve your skills to become a Senior developer, this course is for you.",
        "If you are interested to learn about more advanced concepts in Salesforce Development, this course is for you."
      ]
    },
    {
      "title": "Boost Your C# With Structural And Creational Design Patterns",
      "url": "https://www.udemy.com/course/boost-your-csharp-code-with-structural-and-creational-design-patterns/",
      "bio": "A complete guide to the first 12 structural and creational design patterns from the famous book by the Gang Of Four.",
      "objectives": [
        "Learn all 12 Structural and Creational Design Patterns",
        "What's up with Singletons?",
        "The benefit of the Prototype pattern",
        "Reduce memory with a Flyweight",
        "Expose subsystems with a Facade",
        "Wrap legacy components with the Adapter pattern",
        "The pros and cons of the Composite child management interface",
        "Multi-step object construction with the Builder pattern",
        "... and much more!"
      ],
      "course_content": {
        "Introduction": [
          "About This Course",
          "The Gang Of Four And The 23 Design Patterns",
          "Windows, OS/X or Linux?",
          "Background Info - About Me"
        ],
        "Creational Design Patterns": [
          "Section Introduction",
          "Abstract Factory Pattern",
          "Builder Pattern",
          "Factory Method Pattern",
          "Prototype Pattern",
          "Singleton Pattern",
          "Section Recap",
          "Creational Design Patterns"
        ],
        "Structural Design Patterns": [
          "Section Introduction",
          "Adapter Pattern",
          "Bridge Pattern",
          "Composite Pattern",
          "Decorator Pattern",
          "Facade Pattern",
          "Flyweight Pattern",
          "Proxy Pattern",
          "Section Recap",
          "Structural Design Patterns"
        ],
        "Final Words": [
          "Course Recap",
          "Bonus Offer"
        ]
      },
      "requirements": [
        "You need a Windows, Mac or Linux laptop with Microsoft Visual Studio, Xamarin Studio or Monodevelop",
        "You should be a beginner, intermediate, or advanced C# developer",
        "That's it!"
      ],
      "description": "In 1994 the \"Gang of Four\" published a book titled \"Design Patterns: Elements of Reusable Object-Oriented Software\". This book contains 23 fundamental software design patterns. It is regarded as the standard reference manual for object-oriented design theory and practice.\nIn this course I will teach you the first 12 design patterns. These are all 5 creational- and all 7 structural design patterns. You use these patterns to create new objects efficiently and to create structure in your application architecture.\nBy the end of the course you will be fluent in all 12 design patterns. With this knowledge you will be well on your way to become a Senior Application Architect.\nWhy should you take this course?\nYou should take this course if you are a beginner or intermediate C# developer and want to take your career to the next level. Some of the patterns (e.g. 'Bridge') might sound very complicated, but all of my lectures are very easy to follow, and I explain all topics with clear code and many instructive diagrams. You'll have no trouble following along.\nOr maybe you're working on the application architecture of a large project, and you need to create a robust design that is instantly clear to your team members? The patterns in this course will help you immensely.\nOr maybe you're preparing for a C# related job interview? This course will give you an excellent foundation to answer any software architecture questions they might throw at you.",
      "target_audience": [
        "Beginner, intermediate, and advanced C# programmers who want to learn the fundamental design patterns from the \"Gang of Four\".",
        "Developers who are about to take a job interview and need to prepare for software architecture questions.",
        "Professionals who are writing a section of mission-critical code in a large C# project"
      ]
    },
    {
      "title": "Learn Basic Commands in Linux Shell",
      "url": "https://www.udemy.com/course/learn-basic-commands-in-linux-shell/",
      "bio": "This course will teach you the basics of using the linux shell commands.",
      "objectives": [
        "Get Acquainted with Terminal very Well",
        "Understand how file Permission works"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Starting with Terminal",
          "Basic Directories Commands",
          "Understand File Listing",
          "How File Permission Works",
          "Changing File Permissions"
        ]
      },
      "requirements": [
        "Any Linux Based Operating System",
        "Knowledge of any Command Line is Helpful, but Not Necessary.",
        "Expert who Needs to Brush up Basic Linux Shell Skills"
      ],
      "description": "This course is teaches the basics of using the linux shell, and is intended as a first course in using the terminal. In next 30 minutes you will learn get familiar with linux terminal by understanding how navigate the directory structure, how to list content of directory and understand how file permissions works along with how to change file permissions.\nTopics include:\nHow to open the linux terminal\nAll about directories\nListing a directory’s contents\nUnderstanding file permissions\nChanging permissions\nThis course is a lite version of our main linux shell course for beginners.\nI hope you join me as we explore basic linux file and directory structure together.",
      "target_audience": [
        "Any Fresher Who Wants to Learn Basic Linux Shell Commands",
        "Expert who Needs to Brush up Basic Linux Shell Skills"
      ]
    },
    {
      "title": "The Complete C Programming Course for Beginners",
      "url": "https://www.udemy.com/course/the-complete-c-programming-course-for-beginners/",
      "bio": "C Programming: The Fundementals of C Programming Language from Ground UP with Illustrated + Hands on Coding Expalanation",
      "objectives": [
        "Understand Fundamentals of C Programming Language",
        "Learn One of the Most Popular & Widely Used Language in the World",
        "Master the C Programming Language from Ground Up",
        "Understand How to Write Clean & Efficient Code in C",
        "Learn How to Solve Problem Using C Programming Language"
      ],
      "course_content": {
        "Introduction": [
          "Let's start with this course",
          "Introduction",
          "Setting up environment for writting C",
          "Fresh 69 Coding Question + Solution (PDF Ebook)"
        ],
        "Simple C Program": [
          "Basic Structure of a C Program",
          "Hello World Program",
          "Details hash include (#include)",
          "How a C Program Execute"
        ],
        "DataTypes and Variables": [
          "Datatypes and variables",
          "Naming convention of a variable",
          "Printing value of a variable",
          "Datatypes with examples",
          "Precision",
          "Constants"
        ],
        "How Computer Store Data (char, int, float, double)": [
          "How computer store character",
          "How computer store integer",
          "Introduction to ieee-754",
          "How computer store floating point number",
          "How computer store double number",
          "Signed and Unsigned Integer"
        ],
        "Arithmetic Operator and Assignment Operator": [
          "Different types of operator in C",
          "Assignment operator",
          "Arithmetic operator",
          "Aside #include",
          "Getting input from user",
          "Aside New Line Metacharacter (\\n)"
        ],
        "Logical Operator & Relation Operator": [
          "Logical Operator",
          "Short Circuit",
          "Relational Operator"
        ],
        "Operator Associativity & Precedence": [
          "Precedence & Associativity",
          "Integer Division & Fractional Division"
        ],
        "Conditional Flow": [
          "If...Else Satement",
          "Nested if...else statement",
          "Checking a number even or odd using if else statement",
          "Switch Statement",
          "Checking a number even or odd using switch statement",
          "Find maximum of two integers",
          "Find maximum of three integers",
          "Find second largest of three integers"
        ],
        "Ternary Operator": [
          "What is ternary operator",
          "Find max of three integers using ternary operator",
          "Find second largest using ternary operator"
        ],
        "Control Flow": [
          "Introduction to loop",
          "for loop",
          "while loop",
          "do...while loop",
          "break and continue statement",
          "Infinite loop",
          "Nested Loop",
          "Keep asking for a positive input",
          "Sum of first n numbers",
          "Sum of even numbers upto n",
          "Sum of odd numbers upto n",
          "Factorial of a number",
          "GCD of a two numbers",
          "Prime number test",
          "Reverse an integer",
          "Palindrome number",
          "Print a triangle"
        ]
      },
      "requirements": [
        "A Computer or Laptop with Internet Connection",
        "No Programming Experience, All Concepts Taught in this Course"
      ],
      "description": "Welcome to 'The Complete C Programming Course for Beginners' course.\n\n\nIn this course, you'll have a detailed, step-by-step explanation of C Programming where you'll learn about the best ways to solve problems. This is the course I wish I had when I was learning myself for the first time. This course comes with a 30-day money-back guarantee. So nothing to lose!\n\n\nWhy you should learn C Programming Language?\nC is often considered to be the mother of all languages because so many other languages have been based on it.\nIf you want to be a better programmer, software engineer, C Programming is a great way to get started.\nThis course does not skip the details, this is a step-by-step and line-by-line explanation course. You will learn how to write high-quality code and become a great programmer. This course does not just present how to code in the C programming language, but, also explained all the details of \"why\". At the end of this course, you will fully understand the concepts of the C Programming language.\nLearning C programming will not only make you understand one of the most powerful Programming Languages of all time but also gives a strong base for developing Problem-solving Skills in the field of computer science and Engineering.\n\n\nBy the time you're finished with the course, you will be prepared for common technical coding interview questions.\nSee you inside the course!",
      "target_audience": [
        "Anyone Looking for How to Code in the C Programming language",
        "Who Want to Start Learning Programming Using C"
      ]
    },
    {
      "title": "The Art of Doing: Python Projects to Master the Fundamentals",
      "url": "https://www.udemy.com/course/the-art-of-doing/",
      "bio": "Computer Science Through Python Application. Learn by doing.",
      "objectives": [
        "Fundamental concepts of computer science that are transferable across ALL programming languages.",
        "Foundations of the Python language as well as how to import and work with 8 libraries such as random, matplotlib, and tkinter.",
        "How to actually write YOUR OWN programs. You will not sit back and watch. You will DO!",
        "40 \"Challenge Problems\" that include, a problem description, detailed guide, example output, and completed code.",
        "Communicate secretively with a friend by encoding/decoding information based on per-determined bodies of text.",
        "Simulate the Power Ball Lottery and see how adjusting the number of balls affects the likelihood of becoming a billionaire.",
        "See the devastating effect of interest on student loans and graph the results.",
        "Create a GUI interface that simulates the spread of an infectious disease throughout a population."
      ],
      "course_content": {
        "Introduction": [
          "Python Installation",
          "What is IDLE",
          "What is Pip",
          "Visual Studio Code Installation",
          "Downloading and Opening Course Resources"
        ],
        "Basic Data Types": [
          "The Print Function Lesson",
          "The Print Function Homework",
          "Using Variables Lesson",
          "Using Variables Homework",
          "Strings Lesson",
          "Strings Homework",
          "Integers and Floats Lesson",
          "Integers and Floats Homework",
          "Data Types and Casting Lesson",
          "Data Types and Casting Homework",
          "The Input Function Lesson",
          "The Input Function Homework",
          "String Formatting Options Lesson",
          "String Formatting Options Homework",
          "Project 1.1 Rectangle Calculator",
          "Project 1.2 Miles Per Hour Converter",
          "Project 1.3 Temperature Converter",
          "Project 1.4 Letter Counter",
          "Project 1.5 Right Triangle Calculator"
        ],
        "Lists": [
          "Creating a List Lesson",
          "Creating a List Homework",
          "Adding Elements to a List Lesson",
          "Adding Elements to a List Homework",
          "Removing Elements from a List Lesson",
          "Removing Elements from a List Homework",
          "Sorting Elements of a List Lesson",
          "Sorting Elements of a List Homework",
          "Tuples and Sets Lesson",
          "Tuples and Sets Homework",
          "Project 2.1 Favorite Teacher Survey",
          "Project 2.2 Grocery List App",
          "Project 2.3 Sorting Numbers",
          "Project 2.4 Grade Sorter App",
          "Project 2.5 Basketball Roster"
        ],
        "Iteration Part 1 - For Loops": [
          "For Loops Using a List or String Lesson",
          "For Loops Using a List or String Homework",
          "For Loops Using a Numerical Range Lesson",
          "For Loops Using a Numerical Range Homework",
          "Applications of For Loops Lesson",
          "Applications of For Loops Homework",
          "Nested For Loops Lesson",
          "Nested For Loops Homework",
          "The Random Library Lesson",
          "The Random Library Homework",
          "Project 3.1 Binary Hexadecimal Converter",
          "Project 3.2 Quadratic Equation Solver",
          "Project 3.3 Password Generator",
          "Project 3.4 Fibonacci Calculator",
          "Project 3.5 GPA Calculator"
        ],
        "Conditional Statements": [
          "Boolean Values Lesson",
          "Boolean Values Homework",
          "If/Else Statements Lesson",
          "If/Else Statements Homework",
          "If/Elif/Else Statements Lesson",
          "If/Elif/Else Statements Homework",
          "Logical AND and OR Lesson",
          "Logical AND and OR Homework",
          "Nested Conditionals Lesson",
          "Nested Conditionals Homework",
          "Control Statements Lesson",
          "Control Statements Homework",
          "Project 4.1 Shipping Accounts Manager",
          "Project 4.2 Guess My Number Game",
          "Project 4.3 Golf Score Tracker",
          "Project 4.4 Coin Toss Simulator",
          "Project 4.5 Rock Paper Scissors"
        ],
        "Dictionaries": [
          "Working with Dicitonaires Lesson",
          "Working with Dictionaries Homework",
          "Looping Through a Dictionary Lesson",
          "Looping Through a Dictionary Homework",
          "Nested Dictionaries Lesson",
          "Nested Dictionaries Homework",
          "Project 5.1 Morse Code Translator",
          "Project 5.2 The Thesaurus Project",
          "Project 5.3 Football Trivia Game",
          "Project 5.4 Library Inventory Management System",
          "Project 5.5 Database Administrator Program"
        ],
        "Iteration Part II - While Loops": [
          "While Loops Lesson",
          "While Loops Homework",
          "Controlling While Loops Lesson",
          "Controlling While Loops Homework",
          "Nested While Loops Lesson",
          "Nested While Loops Homework",
          "Modulo Division Review Lesson",
          "Modulo Division Review Homework",
          "Project 6.1 Prime Number Finder",
          "Project 6.2 Factor Generator",
          "Project 6.3 Caesar Cipher",
          "Project 6.4 Powerball Simulator",
          "Project 6.5 Hangman"
        ],
        "Functions": [
          "Built In Functions Lesson",
          "Built In Functions Homework",
          "Writing Your Own Functions Lesson",
          "Writing Your Own Functions Homework",
          "Return Values Lesson",
          "Return Values Homework",
          "Immutable Variable Scope Lesson",
          "Immutable Variable Scope Homework",
          "Mutable Variable Scope Lesson",
          "Mutable Variable Scope Homework",
          "Extra Function Practice Lesson",
          "Extra Function Practice Homework",
          "Project 7.1 Python Dice App",
          "Project 7.2 Python Calculator App",
          "Project 7.3 Python Banking App",
          "Project 7.4 Python Loan Calculator App",
          "Project 7.5 Tic Tac Toe Dual"
        ],
        "Classes": [
          "Initializing a Class Lesson",
          "Initializing a Class Homework",
          "Writing Class Methods Lesson",
          "Writing Class Methods Homework",
          "Another Look at Classes Lesson",
          "Another Look at Classes Homework",
          "Inheritance Lesson",
          "Inheritance Homework",
          "Another Look at Inheritance Lesson Part 1",
          "Another Look at Inheritance Lesson Part 2",
          "Another Look at Inheritance Homework",
          "Project 8.1 Pythonagotchi Simulator Part 1",
          "Project 8.1 Pythonagotchi Simulator Part 2",
          "Project 8.1 Pythonagotchi Simulator Part 3",
          "Project 8.2 Epidemic Outbreak Simulator Part 1",
          "Project 8.2 Epidemic Outbreak Simulator Part 2",
          "Project 8.2 Epidemic Outbreak Simulator Part 3",
          "Project 8.3 Yahtzee Part 1",
          "Project 8.3 Yahtzee Part 2",
          "Project 8.3 Yahtzee Part 3",
          "Project 8.3 Yahtzee Part 4",
          "Project 8.4 Casino Blackjack Part 1",
          "Project 8.4 Casino Blackjack Part 2",
          "Project 8.4 Casino Blackjack Part 3",
          "Project 8.4 Casino Blackjack Part 4",
          "Project 8.5 Pykemon Part 1",
          "Project 8.5 Pykemon Part 2",
          "Project 8.5 Pykemon Part 3",
          "Project 8.5 Pykemon Part 4"
        ],
        "Working with Files": [
          "Reading and Writing Text Files Lesson",
          "Reading and Writing Text Files Homework",
          "Reading and Writing JSON Files Lesson",
          "Reading and Writing JSON Files Homework",
          "Handling Exceptions with Try/Except Lesson",
          "Handling Exceptions with Try/Except Homework",
          "Reading and Writing Pickle Files Lesson",
          "Reading and Writing Pickle Files Homework",
          "Project 9.1 Personal Diary",
          "Project 9.2 Todo List Manager",
          "Project 9.3 Contacts Book Part 1",
          "Project 9.3 Contacts Book Part 2",
          "Project 9.4 Mob Crusher Part 1",
          "Project 9.4 Mob Crusher Part 2",
          "Project 9.4 Mob Crusher Part 3",
          "Project 9.4 Mob Crusher Part 4",
          "Project 9.5 Our Last Video"
        ]
      },
      "requirements": [
        "A working computer with internet connection and access to a web browser.",
        "Python 3 installed (optional).",
        "A desire to learn!"
      ],
      "description": "Hello, my name is Michael Eramo.  I am an experienced educator, life long learner, and a self-taught programmer.  I hold official Bachelor's Degrees in Music Industry, Education, and Physics, a Master's Degree in Mathematical Science, and a certificate in Software Development from Microsoft.  While I owe my extensive knowledge base in Music, Physics, Mathematics, and Education to the many great educators I have worked with, my understanding of Computer Science is all my own.\nI have never taken an \"official\" computer science course; I am completely self-taught.  However, do not let that deter you from taking this course!  Instead, let it motivate you that you too can learn anything you want to.  Not only have I done it, but I've come to realize what works best for the self-taught programmer, and I have perfected the process!\nSee, I had this deep fear right after my son was born that I was done growing as an individual; that the person I was at 30 was going to be the same person I was at 55.  I felt that there was literally ZERO time in the day to do anything other than go to work and be a dad.  That is, until I bought a book on Computer Science, and a sense of wonder was woken.  I've read countless books, watched hundreds of videos, and put in thousands of hours exploring and writing code.  I would routinely wake up at 3:00 AM to learn for a few hours before I had to go to my full time job, teaching high school, before I went to my part time job of teaching college.  Days were long, but getting up at 3:00 AM to read, to learn, or to code benefited me more than a few extra hours of sleep.  It helped me realize that I was never done learning; never done growing.  To me, that is what defines a life long learner.\nI have years of classroom experience as a high school Physics teacher, Computer Science teacher, and college Mathematics professor.  I am part of the New York State Master Teacher Program; a network of more than 800 outstanding public school teachers throughout the state who share a passion for their own STEM learning and for collaborating with colleagues to inspire the next generation of STEM leaders.  Most importantly, I know what motivates people to learn on their own; to find a way to create time to learn, when there is no time to be had.  I understand that time is valuable and that all learning should be engaging, meaningful, and have purpose.\nCombining my expertise as an educator and my own personal interest in self-taught computer science led me to a telling realization;  most educational material for the self-taught programmer is NOT EDUCATIONAL AT ALL.  Instead, it falls into one of two categories:\nWriting small \"snippets\" of programs that taken out of context, seem to serve no purpose at all and frankly, are beneath the user.  Prime examples include using a for loop to print out all even numbers from 1 to 100 or using if statements to respond to generic user input.  Here, users are bored and aren't challenge to create anything with meaning.  There is little purpose other than gaining what is essentially factual level knowledge.  It is a waste of your time.\nWatching others code whole \"applications\" without a true understanding of what is going on.  These are programs whose scope is beyond the user in which there is no clear guide to walk the user through the thought process without just giving them the answers.  Here, without proper support and guidance, the user just defaults to letting someone else unfold the solution for them.  There is little engagement in watching someone else work and rarely a thought generated on one's own.  It is a waste of time.\nYes, I will admit that some learning does take place in doing simple tasks or watching others complete complicated tasks.  In fact, much of how I learned was done this way.  However, I'm telling you it pales in comparison to the learning that takes place by DOING meaningful and appropriately challenging work.  This is the art of doing.\n\n\nThe art of doing is the art form of transforming oneself from a passive learner who watches, to one who sees the process of learning for what it truly is; a mechanism to better oneself.  In \"The Art of Doing\", I have worked very hard to put together 40 meaningful, engaging, and purposeful \"Challenge Problems\" for you to solve.\nEach challenge problem is differentiated for 3 levels of learning.\nFirst, you are given a description of the program you are to create and example output.  This allows users an opportunity to solve well defined problems that are meaningful and appropriate in scope.  Here, all of the solution is user generated. It is engaged learning.\nSecond, you are given a comprehensive guide that will assist you in thought process needed to successfully code your program.  This allows users appropriate assistance that tests their knowledge and forces them to generate the thoughts needed to solve the given problem.  It is meaningful learning.\nThird, you are given completed code, with comments, to highlight how to accomplish the end goal.  This allows users to reference a working version of the program if they are stuck and cannot solve a portion of the problem without assistance.  Rather than grow frustrated, the user can quickly reference this code to gain intellectual footing, and work back to solving the problem on their own.  It is purposeful learning.\nEngaging, meaningful, and with purpose.  These challenge problems are vehicles that not only teach computer science, but teach you the art of doing.  I guarantee that after completing them all you will consider yourself a life long learner and be proud to call yourself a self-taught programmer.",
      "target_audience": [
        "Beginner programmers who are looking for an opportunity to learn though application rather than direct instruction.",
        "Intermediate programers who are looking to test their skills."
      ]
    },
    {
      "title": "Advanced Java Topics: Java Reflection - Master Class",
      "url": "https://www.udemy.com/course/java-reflection-master-class/",
      "bio": "Create Powerful Java Applications, Algorithms and Libraries using Java Reflection API, Take Full Advantage of the JVM",
      "objectives": [
        "Build Powerful Applications and Libraries using Java Reflection",
        "Create Intelligent, Flexible and Compact Algorithms",
        "Architect your Code using Advanced Language Features, Annotations and Design Patterns",
        "Become an Expert in Java Reflection and Reflection API"
      ],
      "course_content": {
        "Introduction to Reflection": [
          "Introduction to Java Reflection",
          "Introduction to Java Reflection - Quiz",
          "Reflection API Gateway & Wildcards",
          "Reflection API Gateway in Practice",
          "Reflection API and Class<?> Object - - Quiz",
          "IDE Information Plugin - Class Analysis",
          "Solution - IDE Information Plugin - Class Analysis",
          "Reflection, Interfaces and Basic Recursion",
          "Solution - Reflection, Interfaces and Recurion"
        ],
        "Object Creation and Constructors": [
          "Constructor Discovery & Object Creation",
          "Constructor Discovery & Object Creation - - Quiz",
          "Restricted Constructor Access",
          "Restricted Constructor Access - Quiz",
          "Restricted Classes Instantiation - Automatic Dependency Injection Implementation"
        ],
        "Inspection of Fields & Arrays": [
          "Introduction To Fields",
          "Introduction to Fields - Quiz",
          "Reading Fields - JSON Serializer",
          "Object Size Calculation",
          "Solution - Object Size Calculator",
          "Introduction to Arrays",
          "Reading Arrays - JSON Serializer",
          "Reading Arrays",
          "Solution - Reading Arrays"
        ],
        "Field Modification & Arrays Creation": [
          "Setting Field Values - Generic Configuration File Parser",
          "Array Creation and Initialization",
          "Smart Array Concatenation",
          "Solution - Smart Array Concatenation"
        ],
        "Methods Discovery & Invocation": [
          "Introduction to Methods - Discovery & Analysis",
          "Method Discovery by Name and Parameters",
          "Method Invocation - Polymorphism Use Case",
          "Method Discovery and Invocation - Quiz",
          "Simple Testing Framework",
          "Solution - Simple Testing Framework"
        ],
        "Java Modifiers Discovery and Analysis": [
          "Java Modifiers & Reflection",
          "Java Modifiers - Quiz",
          "Improved JSON Serializer",
          "Solution - Improved JSON Serializer"
        ],
        "Annotations with Java Reflection": [
          "Introduction to Annotations & Meta-Annotations",
          "Introduction to Annotations & Meta-Annotations - Quiz",
          "Annotation Creation & Discovery. Automatic Class Loading",
          "Annotation Discovery",
          "Solution - Annotation Discovery",
          "Reading Annotation Objects & Annotation Elements",
          "Parameter Annotations & Graph Execution Example",
          "Field Annotations & Graph Execution",
          "Repeatable Annotations - Automatic Scheduling",
          "Repeatable Annotations - Quiz",
          "Security with Annotations - Part 1",
          "Solution - Security with Annotations - Part 1",
          "Security with Annotations - Part 2",
          "Solution - Security with Annotations - Part 2"
        ],
        "Dynamic Proxies": [
          "Introduction to the Proxy Design Pattern",
          "Dynamic Proxy Implementation",
          "Dynamic Proxy - Quiz",
          "Dynamic Caching Proxy Implementation",
          "Solution - Caching Dynamic Proxy Implementation"
        ],
        "Final Section - Performance, Safety and Best Practices": [
          "Performance, Safety and Best Practices"
        ],
        "Bonus Material": [
          "Bonus Lecture - Keep Learning"
        ]
      },
      "requirements": [
        "Basic Knowledge of Java"
      ],
      "description": "Welcome to the #1 Online Resource on Java Reflection\n\n\nDescription\nJava Reflection is one of the most powerful features of the Java language that allows you to utilize your JVM's capabilities to its full potential. And it's no coincidence that the most popular and widely used Java libraries and frameworks are powered by the Reflection API.\n\n\nBut Reflection is not reserved only for those libraries.\nYOU TOO can completely transform and re-architect your code and create unique and powerful applications, algorithms, and libraries in Java using Reflection.\n\n\nTeaching Philosophy\nIn this course, we will start from the basics and build our way up to complete mastery of Java Reflection through:\nTheory and API.\nPractical application of our skills in real-life examples and use cases.\nAlong the course, we also have plenty of quizzes and coding exercises to help you practice and validate your progress.\nThis is an advanced Java course, which will take your Java skills to a whole new level!\nYour mastery of Java Reflection will set you apart from any other Java developer.\nBy the End of the Course\nYou will be able to\nDiscover and Analyze Java Classes and Objects at Runtime\nInstantiate new Objects, Arrays, and Dynamic Proxies in a type-independent way\nInvoke methods dynamically\nRead and Update an Object state\nDefine your very own Annotations and combine them with Java Reflection code\nWrite powerful and intelligent algorithms\nJoin us today for this exciting journey and learning experience!",
      "target_audience": [
        "Student who wants to master Java Reflection",
        "Java Developer who wants to take their knowledge to complete mastery of Java"
      ]
    },
    {
      "title": "The Complete C Programming Bootcamp",
      "url": "https://www.udemy.com/course/the-complete-c-programming-bootcamp/",
      "bio": "Master C programming in Visual Studio Code. Learn pointers, macro and low level data manipulation. Embedded ready.",
      "objectives": [
        "Be able to create professional C programs with Visual Studio Code.",
        "Take on many challenges to create a portfolio of C projects.",
        "Master the use of pointers.",
        "Understand macros and the preprocessor.",
        "Be able to use C language to program firmware for embedded systems.",
        "Master the best technology to develop performance-critical applications.",
        "Work in system programming or in real-time programming.",
        "Learn professional developer best practices."
      ],
      "course_content": {
        "Kickstart Your C Programming Skills": [
          "What You Get With This Course",
          "Welcome to the Course",
          "Get Started With C Programming",
          "Create A Decimal To Hex Converter",
          "Printing to the Console in C",
          "The Anatomy of a C Program",
          "C Variables and Console Input",
          "Convert To Hexadecimal",
          "Top IDEs for C Programming"
        ],
        "Setup Visual Studio Code": [
          "Setup and Installation Introduction",
          "Setup Visual Studio Code On Windows",
          "Setup Visual Studio Code On Mac",
          "Setup Visual Studio Code On Linux"
        ],
        "Let's Start Using VS Code!": [
          "Let's Start Using VS Code Introduction",
          "Run Your First C Program",
          "Errors And Warnings",
          "Configuring Build Tasks",
          "Using Workspace Templates",
          "Working With VS Code"
        ],
        "Data Types and Variables": [
          "Data Types and Variables Introduction",
          "Variables and Constants",
          "Numeral Systems",
          "Integers",
          "Floating Points",
          "Characters",
          "Booleans",
          "Enum",
          "Typedef",
          "Challenge: Spaceship Thrust",
          "Challenge Review: Spaceship Thrust",
          "Challenge: Bunch Of Constants",
          "Challenge Review: Bunch Of Constants"
        ],
        "Operators": [
          "Operators Introduction",
          "Arithmetic Operators",
          "Increment and Decrement Operators",
          "Relational Operators",
          "Logical Operators",
          "Bitwise Operators",
          "Bitmasks",
          "Bit Manipulation",
          "Assignment Operators",
          "The sizeof Operator",
          "Casting and Implicit Conversions",
          "Summary and Other Operators",
          "Operators Precedence",
          "Challenge: Sphere",
          "Challenge Review: Sphere",
          "Challenge: Bit Selector",
          "Challenge Review: Bit Selector"
        ],
        "Control Flow": [
          "Control Flow Introduction",
          "If Else Statement",
          "Challenge: Even Odd",
          "Challenge Review: Even Odd",
          "Switch Statement",
          "Challenge: Days of the Week",
          "Challenge Review: Days of the Week",
          "While Loop",
          "Challenge: Minimum Power Of 2",
          "Challenge Review: Minimum Power Of 2",
          "For Loop",
          "Challenge: Sigma Drawing",
          "Challenge Review: Sigma Drawing",
          "Break and Continue",
          "Challenge: Planetary Alignment",
          "Challenge Review: Planetary Alignment",
          "Goto",
          "Challenge: Prime Numbers",
          "Challenge Review: Prime Numbers"
        ],
        "Functions": [
          "Functions Introductions",
          "How Functions Work",
          "Creating Functions",
          "Function Calls",
          "Scope Rules",
          "Challenge: Prime Numbers Improved",
          "Challenge Review: Prime Numbers Improved"
        ],
        "Debugging": [
          "Debugging Introduction",
          "Improve Your Code With Debugging",
          "Common Mistakes and Solutions",
          "Debugging in Visual Studio Code",
          "Let's Debug",
          "Common Mistakes in Action",
          "Common Mistakes in Action Take 2"
        ],
        "Pointers": [
          "Pointers",
          "Working With Pointers",
          "Defining and Accessing Pointers",
          "Let's Practice with Pointers",
          "Testing for a NULL Pointer",
          "Const Pointer and Const Data",
          "Functions And Pointers",
          "Challenge: Simple Swapper",
          "Challenge Review: Simple Swapper",
          "Challenge: Float Decomposition",
          "Challenge Review: Float Decomposition"
        ],
        "Arrays": [
          "Arrays Introduction",
          "Working with Arrays: The Wrong Way!",
          "Defining and Accessing Arrays",
          "Initializing Arrays",
          "Find the Size of an Array",
          "Pointers and Arrays",
          "Pointers Arithmetic",
          "Multidimensional Arrays",
          "Variable Length Arrays",
          "Challenge: Random Matrix",
          "Challenge Review: Random Matrix",
          "Challenge: Prime Numbers Further Improved",
          "Challenge Review: Prime Numbers Further Improved P1",
          "Challenge Review: Prime Numbers Further Improved P2"
        ]
      },
      "requirements": [
        "No programming experience needed - We'll guide you through fundamentals towards advanced topics",
        "A Mac or PC computer with access to the internet",
        "No paid software required - We'll develop all projects in Visual Studio Code, which is free"
      ],
      "description": "Welcome to The Complete C Programming Bootcamp, the only course you need to become a skilled C developer. It doesn't matter if you are an absolute beginner or come from technologies like python or javascript. Together we will walk the path that will make you a pro in a language that is the foundation of modern computer science.\nC is the most natural language when you learn to think the way a computer thinks. By learning C, you connect with everything that happens under the hood in your system. C is the key to developing performance-critical solutions, and this course is the key to exploring every detail of this programming language.\nWith Byte Garage, you will learn everything you need to become a true professional. We don't just scratch the surface. You will discover all the background, good practices, and things you need to pay special attention to with us.\nThis is a brand new course, coming from a brand new team. Here some topics you will learn:\nData Types and Variables\nOperators\nControl Flow\nFunctions\nDebugging\nPointers\nArrays\nStrings\nDynamic Memory Allocation\nStructures\nUnions\nPreprocessor and Macros\nFile Input and Output\nModular Programming\nThis course is particularly suitable for:\ncomplete beginners who want to learn programming in C\nwho want to learn programming closely with bare metal\nwho wants to work on the firmware of embedded systems and microcontrollers\nwho wants to work on high performance, high load, real-time software\nprogrammers who come from high-level languages curious to find out what happens under the hood",
      "target_audience": [
        "Who wants to become a C developers",
        "Who wants to learn the basics and good programming practices",
        "Firmware developers who want to improve their knowledge of the C language",
        "Who wants to program thinking closely with bare metal",
        "Who wants to know more details on low-level things",
        "Arduino developers who want to become more professional",
        "Python developers who want to understand what's going on under the hood"
      ]
    },
    {
      "title": "SAP ABAP on HANA +HANA Modelling for Beginners with Hands-On",
      "url": "https://www.udemy.com/course/sap-abap-on-hana-hana-modelling-for-beginners-with-hands-on/",
      "bio": "Best Course to Learn SAP ABAP on HANA + HANA Modelling in an easy Step by Step manner with Practical Examples",
      "objectives": [
        "You will be able to understand and create new objects on External Views, consume them in ABAP reports, use HANA Procedures, CDS views, AMDP procedures.",
        "This course is designed to help you in getting a job as a SAP ABAP on HANA Consultant in IT industry and to help existing ABAPers to move to HANA.",
        "With this course you'll get a good understanding of ABAP on HANA and work in real time.",
        "With this course you'll get a good understanding of ABAP on HANA and work in real time."
      ],
      "course_content": {
        "Introduction to SAP HANA": [
          "Introduction to SAP HANA"
        ],
        "HANA Modelling - Creation of Attribute, Analytical, Calculation Views": [
          "What are Attribute, Analytic & Calculation Views in HANA, how to use them?",
          "Practical Example of creating Tables, Attribute, Analytical, Calculation Views"
        ],
        "External Views": [
          "What are External Views how to use them in ABAP",
          "Practical Example of Creating and using an External View in ABAP Report"
        ],
        "HANA Stored Procedures": [
          "What is a HANA stored procedure, how to use it in SAP HANA",
          "Practical Example of Creating a HANA stored Procedure and invoking it"
        ],
        "CDS (Core Data Services) Views": [
          "What are CDS (Core Data Services) Views, how to use them?",
          "Practical Example of creating / using a CDS View"
        ],
        "AMDP (ABAP Managed Database Procedures) Procedures": [
          "What is an AMDP Procedure, how to use them?",
          "Practical Example of AMDP Procedure"
        ],
        "CDS with ODATA": [
          "How to use CDS view with ODATA service to update data in SAP tables?"
        ]
      },
      "requirements": [
        "Having Basic ABAP knowledge is good for this course but not mandatory, I have tried to explain all the concepts in detail and from basics.",
        "I have tried my best to explain in detail about each concept (in every lecture) so that even beginners can understand them.",
        "You should be having access to HANA system to practice the scenarios shown in this course."
      ],
      "description": "This course is designed for beginners who are trying to learn SAP ABAP on HANA , HANA Modelling or move from traditional ABAP to HANA. It covers all the basic concepts needed for you to start your career in SAP HANA. In the first few lectures we'll focus on HANA Modelling and later on move to External Views, stored Procedures, CDS Views, ODATA and AMDP Procedures in HANA. The following topics are covered in this course:\n1.  Attribute Views\n2. Analytical Views\n3. Calculation Views\n4. External Views\n5. HANA Procedures\n6. CDS Views\n7. ODATA\n8. AMDP Procedures\nI'll be adding more topics to this course as and when I find time.",
      "target_audience": [
        "ABAPers who are trying to learn HANA and progress in their career; SAP Functional consultants who want to learn basics of ABAP on HANA",
        "Beginners who are trying to get a job in IT industry in SAP HANA"
      ]
    },
    {
      "title": "Design Patterns in Java",
      "url": "https://www.udemy.com/course/design-patterns-java/",
      "bio": "Discover the modern implementation of design patterns in Java",
      "objectives": [
        "Recognize and apply design patterns",
        "Refactor existing designs to use design patterns",
        "Reason about applicability and usability of design patterns"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "SOLID Design Principles": [
          "Overview",
          "Single Responsibility Principle (SRP)",
          "Open-Closed Principle (OCP)",
          "Liskov Substitution Principle (LSP)",
          "Interface Segregation Principle (ISP)",
          "Dependency Inversion Principle (DIP)",
          "Summary"
        ],
        "Builder": [
          "Gamma Categorization",
          "Overview",
          "Builders in Java",
          "Builder",
          "Fluent Builder",
          "Fluent Builder Inheritance with Recursive Generics",
          "Faceted Builder",
          "Builder Coding Exercise",
          "Summary"
        ],
        "Factories": [
          "Overview",
          "Factory Method",
          "Factory",
          "Abstract Factory",
          "Factory Coding Exercise",
          "Summary"
        ],
        "Prototype": [
          "Overview",
          "Don't Use Cloneable",
          "Copy Constructors",
          "Copy Through Serialization",
          "Prototype Coding Exercise",
          "Summary"
        ],
        "Singleton": [
          "Overview",
          "Basic Singleton",
          "Serialization Problems",
          "Static Block Singleton",
          "Laziness and Thread Safety",
          "Inner Static Singleton",
          "Enum Based Singleton",
          "Monostate",
          "Multiton",
          "Testability Issues",
          "Singleton in Dependency Injection",
          "Singleton Coding Exercise",
          "Summary"
        ],
        "Adapter": [
          "Overview",
          "Vector/Raster Demo",
          "Adapter Caching",
          "Adapter Coding Exercise",
          "Summary"
        ],
        "Bridge": [
          "Overview",
          "Bridge",
          "Bridge Coding Exercise",
          "Summary"
        ],
        "Composite": [
          "Overview",
          "Geometric Shapes",
          "Neural Networks",
          "Composite Coding Exercise",
          "Summary"
        ],
        "Decorator": [
          "Overview",
          "String Decorator",
          "Dynamic Decorator Composition",
          "Static Decorator Composition",
          "Adapter-Decorator",
          "Decorator Coding Exercise",
          "Summary"
        ]
      },
      "requirements": [
        "Good understanding of Java",
        "Familiarity with latest Java features",
        "Good understanding of object-oriented design principles",
        "A computer with the latest JDK and (hopefully) an IDE"
      ],
      "description": "Course Overview\nThis course provides a comprehensive overview of Design Patterns in Java from a practical perspective. This course in particular covers patterns with the use of:\nThe latest versions of the Java programming language\nUse of modern programming approaches: dependency injection, reactive programming and more\nUse of modern developer tools such as IntelliJ IDEA\nDiscussions of pattern variations and alternative approaches\nThis course provides an overview of all the Gang of Four (GoF) design patterns as outlined in their seminal book, together with modern-day variations, adjustments, discussions of intrinsic use of patterns in the language.\nWhat are Design Patterns?\nDesign Patterns are reusable solutions to common programming problems. They were popularized with the 1994 book Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma, John Vlissides, Ralph Johnson and Richard Helm (who are commonly known as a Gang of Four, hence the GoF acronym).\nThe original book was written using C++ and Smalltalk as examples, but since then, design patterns have been adapted to every programming language imaginable: C#, Java, PHP and even programming languages that aren't strictly object-oriented, such as JavaScript.\nThe appeal of design patterns is immortal: we see them in libraries, some of them are intrinsic in programming languages, and you probably use them on a daily basis even if you don't realize they are there.\nWhat Patterns Does This Course Cover?\nThis course covers all the GoF design patterns. In fact, here's the full list of what is covered:\nSOLID Design Principles: Single Responsibility Principle, Open-Closed Principle, Liskov Substitution Principle, Interface Segregation Principle and Dependency Inversion Principle\nCreational Design Patterns: Builder, Factories (Factory Method and Abstract Factory), Prototype and Singleton\nStructrural Design Patterns: Adapter, Bridge, Composite, Decorator, Façade, Flyweight and Proxy\nBehavioral Design Patterns: Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Null Object, Observer, State, Strategy, Template Method and Visitor\nWho Is the Course For?\nThis course is for Java developers who want to see not just textbook examples of design patterns, but also the different variations and tricks that can be applied to implement design patterns in a modern way. For example, the use of recursive generics helps us build fluent interfaces even when inheritance is involved.\nPresentation Style\nThis course is presented as a (very large) series of live demonstrations being done in IntelliJ IDEA and presented using the Kinetica rendering engine. Kinetica removes the visual clutter of the IDE, making you focus on code, which is rendered perfectly, whether you are watching the course on a big screen or a mobile phone.\nMost demos are single-file, so you can download the file attached to the lesson and run it in IntelliJ, Eclipse or another IDE of your choice.\nThis course does not use UML class diagrams; all of demos are live coding. I use IntelliJ and various Maven packages where necessary.",
      "target_audience": [
        "Software engineers",
        "Designers",
        "Architects"
      ]
    },
    {
      "title": "C# Intermediate Programming : The First Steps",
      "url": "https://www.udemy.com/course/c-intermediate-programming-applications-driven-approach/",
      "bio": "A Great Way To Extend Your C# Beginner Skills By Solving More Advanced Real World Problems Using Windows Form Apps",
      "objectives": [
        "Program fluently in C# using the Microsoft Visual Studio IDE for Windows Machines",
        "Understand how to create a basic Windows Form Application ... No Console Apps",
        "Understand the basic concepts of Selection, Repetition, Methods and Exception Handling",
        "Understand the concepts of Arrays (one,two,three dimensional), Random numbers,Object Oriented Programming, String handling",
        "Understand the advanced concepts of Recursion, Sorting and Searching Techniques, Database Programming using SQL, Graphics and Animation Techniques",
        "Apply the programming skills learned to create meaningful computer applications from the world of Business, Science, Math, Cryptography, Graphics and Gaming",
        "Create Business applications which incorporate sorting, searching, data analysis and connecting to a database",
        "Create Science applications which incorporate probabilistic and deterministic simulations",
        "Create a Geography app which incorporate table lookups (searching) to determine the distance between two cities or the telephone code for a country",
        "Create Math app that illustrate the hidden pitfalls of computer arithmetic in the real world, and applications that solve mazes and puzzles using recursion",
        "Create Apps from the world of Cryptography which validate Social Insurance #'s, VIN, ISBN numbers and also create applications which code and decode messages.",
        "Create Graphics applications which incorporate drag and drop events",
        "Create 2d Game Applications which incorporate flicker free animation and allow the user to use the keyboard and mouse to control movement.",
        "Fully appreciate the wide range of applications that the study of Computer Science provides.",
        "* NEW * Create simple applications using the UI Paradigm Windows Presentation Foundation (WPF)",
        "* NEW * Extend the idea of coding and computational thinking by solving a series of advanced problems (CHALLENGES) from a wide variety of disciplines.",
        "*NEW 2025 * Learn how to integrate the OpenAI API within a WinForm App by implemeting the OpenAI .NET Library (NuGet Package)",
        "*NEW 2025 * Learn how to leverage the use of GitHub Copilot (AI) within the Visual Studio IDE"
      ],
      "course_content": {
        "Course Information": [
          "Welcome",
          "What You Need",
          "What You are Going to Learn"
        ],
        "The Basics Extended": [
          "Introduction ... Using Visual Studio Express",
          "Introduction to C# ... Creating Your First Apps",
          "More User Interface Controls and Events",
          "Entering and Outputting Data ... The Concept of Storage",
          "Mathematical Operators and Applications ... Part 1",
          "Mathematical Operators and Applications ... Part 2",
          "Selection Part 1 ... The IF Statement and Boolean Operators",
          "Selection Part 2 ... Applications",
          "User Defined Dialogs Part 1",
          "User Defined Dialogs Part 2",
          "Repetition ... User and Counter Controlled",
          "Repetition ... Applications (Counters and Accumulators)",
          "Combo Boxes and List Boxes",
          "Problem Solving Techniques",
          "Flowcharts",
          "Error Handling and Debugging",
          "Methods",
          "Methods Extended",
          "Data Files",
          "Extension ... Discovering New Controls",
          "The Basics Extended Quiz"
        ],
        "Handling Exceptions": [
          "Introduction to Exceptions",
          "Handling Exceptions Quiz"
        ],
        "Advanced Array Applications": [
          "One Dimensional Arrays",
          "One Dimensional Array Applications",
          "Advanced One Dimensional Array Applications",
          "Two Dimensional Arrays",
          "Two Dimensional Array Applications",
          "Two Dimensional Array Advanced Applications",
          "Multi Dimensional Arrays",
          "Array Quiz"
        ],
        "Mathematical Applications": [
          "Built-In Mathematical Functions ... Some of the more useful ones",
          "The Hidden Pitfalls of Computer Arithmetic ...The Concept of Tolerance",
          "The GCD and the Euclidean Algorithm",
          "Mathematical Applications Quiz"
        ],
        "Advanced Probabilistic Simulations": [
          "Random Numbers",
          "Applications",
          "Random Selection Without Duplication",
          "The Memory Game Application",
          "Building Discrete Random Distributions",
          "Probabilistic Simulations Quiz"
        ],
        "Object Oriented Programming": [
          "Introduction to OOP",
          "Intermediate OOP Concepts",
          "Practical Application ... Using Object Orient Programming",
          "Structures",
          "Object Oriented Programming Quiz"
        ],
        "String Applications": [
          "Introduction to Strings",
          "Concatenation and String Accumulators",
          "Number Problems ... Yes Number Problems with Strings",
          "Code Validations ... Social Insurance Numbers ... Credit Cards",
          "Other String Applications... ISBN (Books Identification)",
          "Cryptography",
          "More String Problem Challenges",
          "Strings Quiz"
        ],
        "Introduction to Recursion": [
          "Recursion Basics",
          "Interesting Applications of Recursion",
          "Solving Mazes",
          "Recursion Quiz"
        ],
        "Sorting and Searching": [
          "Sorting Basics ... The Bubble Sort",
          "Sorting ... The Next Step",
          "Advanced Sorting Techniques",
          "Sorting Application ... The Median Problem",
          "Sorting Multi-Field Records",
          "Using Classes and Structures to Sort Multi-Field Records",
          "Searching Techniques ... The Sequential Search",
          "Searching Techniques ... The Binary Search",
          "Searching Applications ... Table Lookups",
          "Sorting and Searching Quiz"
        ]
      },
      "requirements": [
        "All course material (demos, notes) will be available for download during each individual lecture. The only software required to start the course is the free version of Microsoft Visual Studio Express or Community Edition for Windows (link provided in intro lecture)",
        "Our focus will be working with Visual Studio on Windows machines... Unfortunately NOT MAC computers"
      ],
      "description": "Students will learn to create their own computer programs using the C# programming language. This programming course is meant for ANYONE WHO WANTS TO LEARN TO CODE. Of course we cover C# syntax but more importantly we introduce the PROBLEM SOLVING SKILLS necessary  to convert practical problems to solutions in code. You get paid for solving problems everything else is just a technicality.\nOur focus will be working with Visual Studio on WINDOWS machines .  All coding examples are fully compatible with the LATEST Visual Studio Edition (As of 2025 Visual Studio Community 2022 and Visual Studio 2026) for WINDOWS . Unfortunately they are not MAC compatible.\nA language like C# is typically learned \"in a vacuum,\" and stripped of potentially distracting visual elements or front-end graphical interfaces. This type of learning process  which is considered the standard approach  is great for communicating the fundamentals. It allows you to focus on the most important and basic programming concepts you will need to understand, and is often presented through the output of a static, text-based console window. However, learning a language in this console vacuum can also be bland and boring, and can often lead to students becoming disengaged entirely.\nStudents are more likely to remain engaged by learning how to build Windows applications from day one in tandem with learning the C# programming language. Therefore, my lectures are designed to keep you engaged with the process of learning C# fundamentals by presenting them through a series of lessons aimed at creating simple, Windows Form based applications.This course, by jumping right into apps with a Graphical User Interface, allows the learner to feel like they are learning concepts that produce a tangible result.\nThe first section of the course serves as a primer or refresher to get everybody up to speed.This course assumes absolutely nothing about what you already know, and skips no steps in getting you to know Windows Forms. It walks you carefully through every possible feature you can imagine, and has in its source code hundreds of existing projects you can learn from, or expand on to make your own project. It's worth sifting through a dozen mediocre Udemy courses to find a gem like this. It's pretty close to a one stop shop for taking you from knowing nothing about WinForms, to building your own applications.\n\nThis course has more hours of video instruction (30 + hours) , lectures (200+) and exercises and supplemental resources (400+)  than virtually any other Introductory C# course offered on Udemy.  All for one low price.\nStudents will be exposed to all the stages in software development and develop problem-solving skills as well as learn the syntax of the C# language.\nThe challenges/applications are drawn from a variety of situations in the home, school and workplace. They address a wide spectrum of interests including:\nBusiness\nsorting\nsearching\ndata analysis\nconnecting to a sequential and relational database (SQL)\nScience\nprobabilistic simulations  (using random numbers)\ndeterministic simulations (using concepts from physics and math Plinko Game )\nSocial Studies (Geography)\nDistance between two cities Table Lookups\nCountry Telephone codes\nMath\nhidden pitfalls of computer arithmetic in real world applications\nfamous mathematical algorithms and their applications (Euclidean Algorithm)\nsolving mazes and puzzles using the concept of recursion\nCryptography\nvalidating codes like SIN (social insurance numbers) , VIN, ISBN\ncoding and decoding messages using classical encryption techniques\na peek into more advanced techniques (Steganography)\nGraphics\ncreating a program that plays a classical memory game on a 4x4 grid\ncreating applications utilizing drag and drop events\nGaming\nanimation basics\nusing a back buffer (double buffer) to improve flicker\ncreating simple 2d games using keyboard and mouse movement and incorporating sound effects\nAI (New Mar 2025)\nLearn how to integrate the OpenAI API within a Windows Form App by implemeting the OpenAI .NET Library (NuGet Package) ... which provides a convenient way to access the OpenAI API.\n\n\nMy goal is not just to show you how to program, but to help you understand what you are doing, and why you are doing it . But,having said that, I will try to present the material in such a way that we don't get too hung up on rigid standards. Once you get a feel for the material you could certainly get more serious and take a university or college course or take a more advanced online course.\n\nNot only do the videos show you how to become a programmer in great detail, but each time an important concept is taught, I offer you a challenge that is designed to help you really understand what you have just learned.\nYou will go away and complete the challenge, and then come back and see the challenge answered and explained in detail in the video, allowing you to check your results!  I am online daily to respond to any problems you may encounter.\nHere's how I will help you to succeed:\no    Each lecture starts with a list of objectives or speaking notes\no    Every example covered in the lecture is available for download in the resources section  including the objectives or speaking notes\no    Almost every lecture has a set of Practice problems with full solutions provided\no    My writing and teaching follows the KISS principle : Keep It Super Simple.   I try to stay away from fancy computer terminology and try to teach like am speaking to a brand new user with little to no previous knowledge on the subject matter and  I am always available for help replying most times within a day.\nThis is NOT a static course, updates are made several times a month, with new Lectures and Challenge Problems (130 + as of Mar 2025  fully solved)  added on a continual basis.\nConsider this a first step in the process of learning C#, with the Challenge problems reviewing and extending the concepts covered in the course.  Below is a sampling of the topics touched upon.\nInterfaces\nA Deeper exposure to Collections and Generics(Lists/Queues/Dictionaries/Stacks)\nTuples\nAdvanced OOP concepts\nRegex\nLINQ\nWorking with DateTime\n\n\nAnd finally please do not judge a book by it's cover  don't judge the course by the title or this small description section, if you want to know exactly all the topics covered please go to:\nCOURSE CONTENT\nSections\nLectures  (press the down arrow) This will open up literally thousands of lines of very detailed lecture descriptions leaving no doubt what is and what is not covered.",
      "target_audience": [
        "This course is meant for individuals who are somewhat familiar with basic C# syntax or any other programming language but who would only consider themselves slightly above beginners. This programming course is meant for ANYONE WHO WANTS TO LEARN TO CODE . We cover C# syntax but more importantly we introduce the problem solving skills necessary to convert practical problems to solutions in code. The first section of the course serves as a refresher to get everybody up to speed.",
        "Not sure you have enough background to take the course ? Then I would recommend taking my first course \"C# Programming for Beginners: The First Steps\" before attempting this course"
      ]
    },
    {
      "title": "The Python Developer Essentials Immersive Bootcamp",
      "url": "https://www.udemy.com/course/new-python-programming-the-complete-guide-2021-edition/",
      "bio": "Learn the skills you need to become a Professional and Certified Python Developer with this Complete Training Course",
      "objectives": [
        "How to Program with Python and write a clean code",
        "The core Python concepts needed to become A Dev Professional",
        "Understand of how Python works behind the scenes",
        "Variables, Representing Data Types, and using Math",
        "Syntax and Recognize Code Blocks",
        "Understanding and Analyzing Errors",
        "Built-In Functions and Methods",
        "User-Defined and Anonymous Functions",
        "Structure all Data with Built-In Data Structures",
        "Flows Control for Programs",
        "Object-Oriented Programming",
        "Different types of Modules",
        "Handle Files using Python",
        "How to practice Python and building projects for tasks",
        "Get the Instructor QA support"
      ],
      "course_content": {
        "Introduction": [
          "Welcome",
          "Installing and Verifying Python",
          "Working with VS Code for Python",
          "Quiz 1"
        ],
        "Variables, Data Types, Printing and Getting classes": [
          "Basic data types theory",
          "Variables and Assignments theory",
          "Multiple assignments theory",
          "Naming variables theory",
          "Printing values to the screen theory",
          "Getting class type theory",
          "Variables and Assignments hands-on",
          "Multiple assignments hands-on",
          "Assign one Value to many variables hands-on",
          "Printing values to the screen hands-on",
          "Getting class type hands-on",
          "Quiz 2"
        ],
        "Math Operations": [
          "Math operations theory",
          "Math Orders theory",
          "Math operations hands-on",
          "Math Orders hands-on",
          "Quiz 3"
        ],
        "Comments and White Spaces": [
          "Comments theory",
          "White Spaces theory",
          "Comments hands-on",
          "White Spaces hands-on",
          "Quiz 4"
        ],
        "Errors": [
          "Error Types Theory",
          "Error Types hands-on"
        ],
        "Functions": [
          "Function types theory",
          "Functions built-in theory",
          "User defined functions theory",
          "Functions built-in hands-on",
          "User defined functions hands-on",
          "Calling many times hands-on",
          "Pass many arguments",
          "Return many values",
          "Anonymous Lambda",
          "Scope in Python"
        ],
        "Structured Data in Python": [
          "Lists theory",
          "Tuples theory",
          "Sets theory",
          "Dictionaries theory",
          "Create a list, change and insert",
          "Add and extend a list",
          "Delete and clear list items",
          "Create a Tuple, No change",
          "Accessing tuples and ranges",
          "Concatenate and delete tuples",
          "Create a set and get len",
          "Sets type and constructor to empty",
          "No Accessing for set items",
          "Adding items to a set",
          "Removing and clearing sets",
          "Creating dictionaries",
          "Dictionary len and type",
          "Dictionary all about accessing",
          "Dictionary all about updating values",
          "Adding one or many items in dictionary",
          "Deleting dictionary items and clearing"
        ],
        "Comparison, Logic, Additional, and Conditional Statements": [
          "Comparison operators theory",
          "Logical operator theory",
          "Conditional theory",
          "Comparison operators hands-on",
          "Logical operator hands-on",
          "Additional operators",
          "Conditional Statements hands-on"
        ],
        "Loops: Repeating and Iterating": [
          "While loops theory",
          "For loops theory",
          "The while loop in python hands-on",
          "The for loop hands-on",
          "for range break"
        ],
        "Working with Classes": [
          "Classes theory",
          "Classes and Objects Hands-On",
          "Objects Modifications",
          "Class Methods and Constructors",
          "Inheritance from other classes Hands-on"
        ]
      },
      "requirements": [
        "No prior knowledge of Python Programming is required",
        "Access to a computer and internet connection"
      ],
      "description": "Hello and welcome to The Python Developer Essentials Immersive Bootcamp for 2024\nLearn the skills you need to become a Professional Certified Python Developer with this Complete Training Course.\n\n\nEmbark on an exciting journey into the world of programming with our comprehensive Python Developer Essentials course. This beginner-friendly course meticulously guides you through the fundamentals of Python programming, equipping you with the essential skills to create your own powerful programs.\n\n\nUncover the Essentials of Python Programming\nDelve into the core concepts of Python, including:\nData Types and Variables: Master the building blocks of programs by understanding the different data types, such as integers, strings, and booleans, and how to store them in variables.\nOperators and Expressions: Unravel the power of operators to manipulate data and construct sophisticated expressions.\nControl Flow Statements: Learn how to control the flow of your programs using conditional statements like if-else and looping constructs like for and while loops.\nFunctions: Discover the power of functions to modularize your code, enhance reusability, and promote code organization.\nModules and Packages: Explore the concept of modules and packages to organize your code, share functionality, and leverage external libraries.\nObject-Oriented Programming (OOP): Grasp the principles of OOP, including classes, objects, inheritance, and polymorphism, to create maintainable and extensible code.\n\n\nHands-on Learning and Practical Applications\nReinforce your understanding through hands-on coding exercises and real-world examples. You'll learn to:\nWrite your first Python programs: Craft simple programs to grasp the basic syntax and structure of Python programming.\nManipulate data: Utilize data types, operators, and expressions to perform operations on data.\nControl program flow: Implement conditional statements and loops to control the execution of your programs based on specific conditions.\nDesign and implement functions: Create reusable functions to enhance code organization and modularity.\nUtilize modules and packages: Import and utilize modules and packages to access external functionality and organize your code.\nApply OOP principles: Design and implement classes and objects to create maintainable and extensible code.\n\n\nEmpower Yourself with Python Programming Skills\nBy completing this Python Basics course, you'll acquire the foundational skills to confidently navigate the world of Python programming. You'll be equipped to:\nSolve programming problems: Apply your newfound knowledge to tackle programming challenges and solve computational problems.\nAutomate tasks: Create scripts and programs to automate repetitive tasks, saving time and effort.\nDevelop web applications: Build interactive web applications using Python frameworks like Django and Flask.\nAnalyze data: Utilize Python libraries like NumPy, pandas, and matplotlib to analyze and visualize data.\nExplore machine learning: Explore the field of machine learning using Python libraries like scikit-learn.\nContribute to open-source projects: Engage in open-source projects to collaborate with experienced developers and gain real-world experience.\nUnleash your creativity and problem-solving skills with Python programming. Enroll today and embark on a fulfilling journey into the world of software development!\n\n\nSo, what are you waiting for, enroll now to go through an Immersive Training of the most popular Programming Language on the market, Python.\nBecome A Python Guru in no time!",
      "target_audience": [
        "New developers and Engineers",
        "Absolute Beginners in Python",
        "Programming and software development engineering newbies",
        "Developers and Engineers who know other programming language but are new to python",
        "Anyone who wants to master modern Python 3.9.1 the right way without wasting time"
      ]
    },
    {
      "title": "Introduction to JavaScript Object Notation (JSON)",
      "url": "https://www.udemy.com/course/json-training-a-javascript-object-notation-course/",
      "bio": null,
      "objectives": [
        "A handout with key terms and key points for each course section",
        "A quiz at the end of each section that tests your understanding of important JSON concepts, followed by a final exam at the end of the course.",
        "By the end of the course, you will be able to use JSON in your own applications with skill and confidence."
      ],
      "course_content": {
        "Introduction": [
          "Introduction to JSON",
          "Introduction to JSON Handout",
          "Introduction to JSON Quiz"
        ],
        "JSON Syntax": [
          "JSON Syntax",
          "JSON Syntax Handout",
          "JSON Syntax Quiz"
        ],
        "JSON Data Types": [
          "String, Number, Boolean and Null",
          "Object Data Type",
          "Array",
          "JSON Data Types Handout",
          "JSON Data Types Quiz"
        ],
        "JSON & Security Concerns": [
          "Cross Site Request Forgery (CSRF)",
          "Injection Attacks",
          "JSON & Security Concerns Handout",
          "JSON & Security Concerns Quiz"
        ],
        "JavaScript XMLHttpRequest & Web APIs": [
          "JavaScript XmlHttpRequest & Web APIs",
          "JavaScript XMLHttpRequest & Web APIs Handout",
          "JavaScript XMLHttpRequest & Web APIs"
        ],
        "JSON & Client Side Frameworks": [
          "JSON & Client Side Frameworks",
          "JSON & Client Side Frameworks Handout",
          "JSON & Client Side Frameworks Quiz"
        ],
        "JSON & NoSQL Databases": [
          "JSON & NoSQL Databases",
          "JSON & NoSQL Databases Handout",
          "JSON & NoSQL Databases Quiz"
        ],
        "JSON & Server Side Frameworks": [
          "JSON & Server Side Frameworks",
          "JSON & Server Side Frameworks Handout",
          "JSON & Server Side Frameworks Quiz"
        ],
        "Final Exam & Conclusion": [
          "Final Exam",
          "Conclusion"
        ]
      },
      "requirements": [
        "A basic understanding of JavaScript (beginner is fine)",
        "A basic understanding of Client Side vs Server Side (beginner is fine)"
      ],
      "description": "JSON stands for JavaScript Object Notation. JSON has become a widely accepted and popular format for data due to it’s platform neutral nature, lightweight format, and it’s ability to convert directly to native JavaScript Objects. JSON is being used everywhere from Web APIs, to noSQL databases, to server side language libraries and client side frameworks.\nThis course will give you a low level understanding of JSON syntax, data types, and formatting, followed by a high level introduction into the many applications of JSON out in the world today. This course will also address security concerns with JSON, so you can use JSON in your own applications with confidence.\nPutting JSON in your tool-belt is the first step. This course will give you not just an understanding of JSON syntax, but and understanding the role JSON is currently playing in the web today.\nIn Web Development there are a lot of buzzwords buzzing like:\nJSON Web APIs\nSingle Page Applications\nClient Side Model-View-Controller (or MVC)\nNoSQL Databases\nThis course seeks to inspire you in how you can use the new JSON in your toolbelt through exposing you to the role JSON plays in these technologies. Join me, Marie Taylor, and learn JSON today.",
      "target_audience": [
        "Programmers and Developers at any level"
      ]
    },
    {
      "title": "Learn Perl 5 By Doing It",
      "url": "https://www.udemy.com/course/perltutorial/",
      "bio": "Learn Perl by actually creating useful, working Perl programs for everything from web scraping to fixing your data.",
      "objectives": [
        "Learn how to use Perl for a variety of common tasks",
        "Learn how to use regular expressions"
      ],
      "course_content": {
        "Basic Perl: Getting Started": [
          "Installing Perl and Some Great Free Editors",
          "Hello World",
          "Downloading Text And Images - Updated",
          "Downloading Text and Images With Perl (Old Version!)",
          "Arrays and Checking Whether Files Exist",
          "Reading Files and Beginning Regular Expressions",
          "Writing Files and Replacing Text",
          "Wildcards in Regular Expressions",
          "Groups: Finding Out What You Actually Matched",
          "Quantifiers: Greedy vs. Non-Greedy",
          "Escape Sequences",
          "Numeric Quantifiers",
          "Test Your Perl and Regex Knowlege - First Test"
        ],
        "More on Reading Files Line By Line: Tips, Tricks and Vital Knowledge": [
          "Split and Reading CSV Files",
          "Join and Viewing Data Using Data::Dumper",
          "Chomp and Removing Spaces in Splits",
          "\"Pushing\" Onto Arrays",
          "Arrays of Arrays",
          "Hashes: Lookup Tables in Perl",
          "Iterating Over Hashes",
          "Arrays of Hashes",
          "Storing CSV Data in a Data Structure",
          "Validating CSV Data",
          "Cleaning CSV Data",
          "Test Your Perl and Regex Knowlege - Second Test"
        ],
        "Web Scraping and More Regular Expressions": [
          "Basic Web Scraping",
          "Character Classes",
          "Matching Repeatedly",
          "Collecting Repeated Matches All At Once"
        ],
        "Building a Complete Progam: Command Line Options": [
          "Getting Command Line Options",
          "Subroutines and Returning Values",
          "Multi-Line Strings and Comments",
          "Passing Arguments to Subroutines",
          "References to Hashes",
          "Checking Values in Hashes"
        ],
        "Parsing XML and Complex Data Structures": [
          "Finding All Files in a Directory and Filtering Arrays",
          "Processing Files One By One",
          "Parsing XML with Regular Expressions",
          "Using XML::Simple, and Extracting Data from Complex Structures",
          "Extracting Data from Complex Structures: A Complete Example",
          "Building Complex Data Structures"
        ],
        "Working with Databases": [
          "Free Databases to Use with Perl",
          "Creating Databases with MySQL",
          "Connecting to a Database",
          "Inserting Data into a Database",
          "Deleting Data and Executing Dataless SQL Commands",
          "Getting the IDs of Records You've Just Inserted",
          "Querying Databases",
          "Exporting Data"
        ],
        "Perl One-Liners": [
          "Running One-Line Perl Programs",
          "Replacing Text in Files",
          "Editing Files In-Place"
        ],
        "Modules and OO Perl": [
          "Modules",
          "Packages and Directories",
          "Object Orientation: A Brief Introduction",
          "Implementing OO in Perl"
        ],
        "Web Application Basics": [
          "Installing the Apache HTTP Server",
          "A Hello World Web App",
          "The CGI.pm Module",
          "Using URL Parameters",
          "Website Forms"
        ],
        "Basic Sysadmin Tasks": [
          "Moving, Copying and Deleting Files",
          "Executing System Commands"
        ]
      },
      "requirements": [
        "Basic knowledge of computer programming in any language."
      ],
      "description": "Discover some of the amazing things you can do with Perl 5, including downloading text and images from the Internet (just like Zuckerberg in The Social Network), reformatting data, importing and exporting data to and from databases, sysadmin-type tasks like renaming or moving files, fixing even huge amounts of data quickly and even creating web CGI scripts. In this course you'll also learn how to use regular expressions, those unbelievably useful little things that have now made their way into almost every serious programming language, yet remain the bête noire of many a developer.",
      "target_audience": [
        "Anyone who has some familiarity with basic programming in any language",
        "Anyone who wants to learn how to automate common tasks in IT"
      ]
    },
    {
      "title": "Advanced JavaScript Topics",
      "url": "https://www.udemy.com/course/learn-modern-javascript-advanced-topics/",
      "bio": "In Depth JavaScript Training for Mastering Important Patterns, the Power of Functions, OOP Concepts, JavaScript Projects",
      "objectives": [
        "Apply first-class and higher order functions in your coding practices.",
        "Explain the different scenarios that affect the value of this.",
        "Identify the object to which this is bound.",
        "Manipulate this binding to accomplish programing problems.",
        "Use prototypes in your coding.",
        "Understand and use IIFEs in your code.",
        "Define closure and take advantage of it in your code.",
        "Apply the namespace and module pattern to your coding projects.",
        "Create JSON files.",
        "Load and use JSON data in a project.",
        "Manipulate properties on JavaScript objects.",
        "Apply OOP principles to your JavaScript coding practices.",
        "Make use of constructors and Object create for setting up objects and prototypes.",
        "Understand and apply the true nature of JavaScript inheritance.",
        "Explain functional programming concepts.",
        "Apply functional programming techniques to your JavaScript projects."
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction",
          "Where will You Go with JavaScript?",
          "Tools You Will Need for this Course",
          "A Word about the Exercise Files"
        ],
        "Think Like a Programmer: Libraries and Frameworks": [
          "Think Like a Programmer: Libraries and Frameworks"
        ],
        "Advanced Concepts for Objects and Functions": [
          "Advanced Concepts for Functions and Objects",
          "REVIEW: Function Declarations and Function Expressions",
          "Functions are Objects",
          "First Class Functions",
          "Invoking Functions",
          "Creating JavaScript Objects",
          "Understanding this",
          "Examining this with Normal Function Invocation",
          "Normal Function Invocation Using strict mode",
          "Examining this with Method Invocation",
          "Understanding Prototypes",
          "Understanding the Prototype of Functions",
          "Using call and apply Function Methods",
          "Using the bind Function Method",
          "Invoking Functions as Constructors: The Magic of new",
          "Constructor Invocation and the Value of this",
          "Higher Order Functions, Callbacks and the Problem with this",
          "Arrow Functions",
          "REVIEW: Invoking Function and this",
          "Section Quiz"
        ],
        "Think Like a Programmer: DRY Coding": [
          "Abstraction and DRY Coding",
          "Abstraction and DRY Coding: Exercise 1",
          "OPTIONAL: Event Example",
          "OPTIONAL: Event Example Explained Part 1",
          "OPTIONAL: Event Example Explained Part 2"
        ],
        "Working with Objects": [
          "Working with Objects Introduction",
          "Detecting Properties on Objects",
          "Changing Property Attributes",
          "Exercise 2: Working with Objects",
          "Making Objects Immutable",
          "ES6 Object Features",
          "Understanding Method Chaining",
          "Section Quiz",
          "ES2020: Optional Chaining"
        ],
        "The Power of Functions": [
          "The Power of Functions Introduction",
          "Immediately Invoked Function Expressions (IIFEs)",
          "Exercise 3: Immediately Invoked Function Expressions",
          "Review of Scope",
          "Understanding Closure",
          "OPTIONAL: Closure Take 2"
        ],
        "Think Like a Programmer: Avoiding Globals": [
          "Avoiding Global Variables",
          "Using the Namespace Pattern"
        ],
        "The Power of Functions Continued": [
          "Closure: Exercise 4",
          "Namespace Pattern Exercise 5"
        ],
        "Think Like a Programmer: The Module Pattern": [
          "The Module Pattern Part 1",
          "Optional: Overview of Fill-In-Question Code",
          "The Module Pattern: Part 2",
          "The Module Pattern: Part 3",
          "The Module Pattern: Part 4",
          "Module Pattern Exercise 6",
          "Module Pattern Exercise 7"
        ],
        "Working with Data: JavaScript Objects and JSON": [
          "Introduction to Working with Data",
          "JSON Basics",
          "Creating a JSON File",
          "Loading a JSON File Using XMLHttpRequest",
          "Testing on a Server",
          "Setting Up a Local Server Using Node",
          "JSON Data Exercise 8",
          "Using Fetch to Load a JSON File"
        ]
      },
      "requirements": [
        "This is an advanced course in JavaScript, so you should have taken the beginning course: Learn Modern JavaScript: Getting Started or you should have a good familiarity with the basics of JavaScript."
      ],
      "description": "Advanced Topics picks up where the Getting Started course ended. You should now have some experience with JavaScript and understand the JavaScript language much better. Therefore, you are ready to learn more of the nuances and important patterns that advanced JavaScript developers know and use.\nIn Learn Modern JavaScript: Advanced Topics, we explore the more advanced techniques in JavaScript. You learn advanced concepts for objects and functions, the value of 'this', the power of functions using closure and IIFEs. You learn about the namespace and module patterns. You learn JSON and how to load a JSON file. You will follow along as we apply OOP concepts to a project. You get very familiar with the prototype, and these are just the main topics covered in this advanced course. A new bonus section helps you get familiar with functional programming concepts in JavaScript.\nThis course contains 15 sections and one bonus section, over 90 different lectures, over 17 hours of video, 4 quizzes, 9 assignments, 1 large project and several Think Like a Programmer sections with invaluable information for those intent on making JavaScript a career choice or a major part of their lives.\nIf you want to improve your JavaScript skills, this course is for you!",
      "target_audience": [
        "Anyone who wants to increase their JavaScript skills from basic to advanced."
      ]
    },
    {
      "title": "C Programming For Beginners - Master the C Language",
      "url": "https://www.udemy.com/course/c-programming-for-beginners-/",
      "bio": "C Programming will increase career options. Become a better dev in other languages by learning C. Pointers explained",
      "objectives": [
        "Understand the fundamentals of the C Programming Language",
        "Make yourself more marketable for entry level programming positions",
        "Create your first C Application",
        "Learn one of the most popular, widly used languages in the world",
        "Understand variables and the different data types",
        "Apply for real-time programming positions",
        "Understand the core language that most modern languages are based on",
        "Learn how to write high-quality code"
      ],
      "course_content": {
        "C Programming Language Fundamentals and Initial Setup": [
          "Introduction to C Programming: Core Concepts and Benefits",
          "Comprehensive Course Structure: Learning Methods and Approach",
          "Comprehensive Course Structure: Learning Methods and Approach",
          "C Programming Language: History, Advantages, and Key Uses",
          "Essential C Language Features: Efficiency, Portability, Power",
          "Step-by-Step C Program Creation: Editing, Compiling, Linking",
          "Introductory Quiz on C Programming Fundamentals"
        ],
        "Installing the Necessary Development Tools and Software": [
          "Navigating the Installation Process: A Platform-Specific Overview",
          "Windows C Compiler Setup: Installing and Configuring Cygwin (GCC, GDB, Make)",
          "Step-by-Step Guide to Downloading and Installing CodeLite",
          "Windows Development Environment: Linking CodeLite with the Cygwin C Compiler",
          "Mac Compiler Installation: Xcode Command Line Tools for C Development (GCC)",
          "Installing and Setting up CodeLite IDE for Cross-Platform C Development on macOS",
          "MacOS CodeLite Configuration: Integrating the IDE with the C Development",
          "Ubuntu Linux: Installing the Integrated Development Environment for C (CodeLite)",
          "Configuring CodeLite and Integrating The Build Essential package on Ubuntu Linux",
          "Creating Reusable C Project Templates for Streamlined Development in CodeLite",
          "Mastering the Terminal: An Introduction to the Command Line Interface for C",
          "Compiling and Running C Programs via the Cygwin Terminal on Windows: CLI Guide",
          "MacOS Terminal Mastery: Compiling, and Running C Programs from the Command Line",
          "Linux Command Line Essentials: Compiling and Running C Programs on Ubuntu",
          "Web-Based C Programming: Compiling and Executing Code in Online C Compilers"
        ],
        "Fundamentals of C: Writing Your First Code and Understanding Basic Syntax": [
          "CodeLite IDE Mastery: Navigating and Customizing the Development Environment",
          "From Code to Execution: Creating, Modifying, and Saving Your First C Program",
          "The Build Process: Compiling, Linking, and Running Your First C Program",
          "Understanding and Resolving Compiler Errors: Syntax and Semantic Error Analysis",
          "Compiler Warnings: Identifying and Addressing Potential Issues in C Code",
          "Linker Errors Demystified: Understanding and Troubleshooting Undefined Reference",
          "Runtime Errors: Dealing with Exceptional Events and Handling Program Crashes",
          "Identifying and Correcting Logic Errors: Debugging Strategies for C Programs",
          "(Challenge) Display Your Name: Applying C Fundamentals in a Practical Exercise",
          "(Demonstration) Program Output Solution Displaying Name: Detailed Walkthrough",
          "Deep Dive into C Program Structure: Main Function, Blocks, and Key Elements",
          "Section Quiz on Compiling, Running, and Debugging Basic C Programs"
        ],
        "C Programming Fundamentals: Input, Output, Preprocessing, and Comments": [
          "Improving Code Readability: Utilizing Single-Line and Multi-Line Comments in C",
          "Preprocessing in C: Understanding Directives and Their Impact on Compilation",
          "Header Files and Libraries: Implementing the #include Directive for Code Reuse",
          "Formatted Output: Mastering the printf Function for Displaying Data in C",
          "User Input in C: Reading Data from the Terminal with the scanf Function",
          "Quiz on Header Files, Comments, Basic Input and Output, and Preprocessing"
        ],
        "Variables and Data Types in C: Declaration, Initialization, and Usage": [
          "Introduction to Variables and Data Types in C: Memory, Storage, and Usage",
          "Fundamental Data Types in C: int, float, double, and _Bool Explained",
          "Enumerated Data Types (enum) and Character Representation (char) in C",
          "(Challenge) Enumerated Types: Defining and Utilizing Custom Data Types",
          "(Demonstration) Implementing Custom Data Types with Enums: A Practical Example",
          "Precision Output: Mastering Format Specifiers with printf for Variable Display",
          "(Challenge) Rectangle Calculations Area and Perimeter with Variable Manipulation",
          "(Demonstration) Calculating and Displaying Rectangle Dimensions: A C Program",
          "Understanding Command Line Arguments (argc, argv)",
          "Quiz Assessing Understanding of Variables, Data Types, Enums, and Basic I/O"
        ],
        "C Operators: Performing Calculations, Comparisons, and Manipulations": [
          "Introduction to Operators in C: Fundamentals and Categories",
          "Arithmetic, Logical, Assignment, and Relational Operators in C",
          "(Challenge) Time Conversion: Calculating Years and Days from Minutes",
          "(Demonstration) Step-by-Step Solution: Converting Minutes to Years and Days in C",
          "Bitwise Operators in C: Manipulating Data at the Bit Level",
          "Special Operators in C: Exploring the Cast and sizeof Operators",
          "(Challenge) Data Type Sizes: Using the sizeof Operator for Portability",
          "(Demonstration) Determining Data Type Sizes: Implementing the sizeof Operator",
          "Order of Operations: Understanding Operator Precedence and Associativity in C",
          "Quiz covering all information about operators, including bitwise and casting"
        ],
        "Mastering Program Flow Control with C Language Constructs": [
          "Getting Started with Program Control Flow in C: An Overview",
          "Implementing Conditional Logic: Detailed Guide to If Statements in C",
          "Calculating Weekly Pay with Overtime and Tiered Tax in C",
          "Step-by-Step Solution: Calculating Weekly Pay in C (Overtime and Taxes)",
          "Multi-way Branching: How to Use and Implement the Switch Statement in C",
          "Repetitive Code Execution: In-depth Guide to Using For Loops in C Language",
          "Mastering While and Do-While Loops for Effective C Code Iteration",
          "Effective Loop Management: Nested Loops and Control with Break/Continue",
          "Creating an Interactive 'Guess the Number' Game Using C.",
          "Building a 'Guess the Number' Game: A Complete C Programming Walkthrough",
          "Quiz 6"
        ],
        "Comprehensive Guide to Using Arrays in C Programming": [
          "Declaring, Initializing, and Accessing Elements: Arrays in C",
          "Initializing Arrays in C: Syntax, Partial, and Designated Values",
          "Comprehensive Guide to Generating Prime Numbers with C Arrays",
          "Solution Walkthrough: Implementing Prime Number Generation in C",
          "Understanding Multidimensional Arrays: Initialization & Uses in C",
          "Building a Weather Program: Rainfall Analysis with Two-Dimensional Arrays",
          "Mastering the Weather Program: A C Programming Code Demonstration",
          "Exploring Variable Length Arrays (VLAs) in C: A C99 Featur",
          "Quiz on Arrays in C"
        ],
        "Demystifying Function Parameters, Returns, and Scope in C": [
          "C Functions: Introduction, Advantages, and Syntax Essentials",
          "Mastering Function Definitions and Prototypes in C",
          "Mastering Function Definitions and Prototypes in C",
          "Mastering Data Return from C Functions: Types and the Return Statement",
          "Understanding Variable Scope in C: Local vs. Global Variables",
          "C Functions Challenge: Greatest Common Divisor, Absolute Value, Square Root",
          "C Programming Challenge Solution Walkthrough: Building Function",
          "C Tic-Tac-Toe Game Development: Project Design and Implementation Challenge",
          "Tic-Tac-Toe Game in C: Complete Solution Walkthrough and Code Review",
          "C Functions Quiz: Test Your Knowledge of Fundamentals, Scope, and More"
        ],
        "C Strings: In-Depth Guide to Character Arrays and String Functions": [
          "Introduction to Character Strings in C: Literals, Null Terminators",
          "Declaring and Initializing Strings in C: Character Arrays Explained",
          "Using const with Strings: Creating Immutable String Literals in C",
          "C Character Array Challenge: String Length, Concatenation, Comparison",
          "Hands-On C String Manipulation: Implementing String Functions",
          "String Manipulation in C: Searching, Finding, and Common Functions",
          "C String Function Challenge: String Reversal and Array Sorting",
          "String Function Challenge Solution Walkthrough",
          "Advanced String Operations in C: Searching, Tokenizing, and Analyzing",
          "Mastering String Conversions in C: Uppercase, Lowercase, and Numeric",
          "C Strings Quiz: Test Your Knowledge on Arrays, Functions and Manipula"
        ]
      },
      "requirements": [
        "A computer running Microsoft Windows, Linux or the Mac operating systems",
        "At least 4GB of ram is recommended",
        "No programming experience, all concepts taught in this class!"
      ],
      "description": "Have you never programmed a computer before, and think or have been told that C is a good programming language to get started with.  It is!\nMaybe you have some experience with other programming languages, but want to learn C.  It's a great language to add to your resume!\nOr perhaps you are stuck in a low paying programming job, and want to move up to a better, more senior position.  Learning C can help you!\n\nThe fact is, learning how to program in C is not only an excellent programming language to get started with, but it will also make you a better programming in other computer languages!\nWhy learn C ?\n\nC is often considered to be the mother of all languages because so many other languages have been based on it.\nThough C is simple it is one of the most powerful languages ever created.  Considering it was created over 40 years ago, it is still used heavily and is usually in the top 5 or 10 most popular and most widely programming languages in the world.\n\nLearning C can actually make you a better programming in other languages like C++, Java, or C# by equipping you with a mental model of what the computer is actually doing when you run your programs.\n\nBy learning how things really work \"under the hood\", and understand memory space, CPU architecture and so on, you can create more efficient programs, and obtain a huge advantage over other programmers in the process.\nIf you want to become a better developer, learning C is a great way to start!\nWhy enrolling in this course is the best decision you can make.\n\nBy the end of this course, you will understand the fundamentals of the C Programming Language, and make yourself more marketable for entry level programming positions.\nYou will understand variables and the different data types, be able to utilize functions and arrays, understand the  concept of pointers, learn about control flow (decision statements and iteration).\nYou will be in a position to apply for real-time programming positions, and truly understand the core language that most modern languages are based on!\nIf you have previously used the C programming language, then this course will deepen your understanding of it. If you have never used it, no problem, you will see that it can help you become a more efficient C developer.\n\nThe course will be constantly refined in the future based on student feedback!\nThis course does not skip on the details.  You will learn how to write high quality code and become an excellent problem solver.  This course does not just present how to code in the C programming language, but, also includes all the details on \"why\" you are doing the things you are doing.  At the end of this course, you will fully understand the concepts of the C Programming language.\n\nYour instructor, Jason Fedin has been teaching students for over 12 years via online classes at over 10 different online Universities. He has created many different class curriculums, ranging from mobile programming to bash scripting to Object-Oriented Design and of course the C programming language.\nAdditionally, he has been developing software for over 16 years in the real world at various companies, specializing in Object-Oriented Development and Mobile Applications.\nThis means you are learning from someone who has all the professional training, skills, and experience you need to teach you how to become proficient in the C programming language.\nIf you are ready to get that first paid programming job, or to move up to a more senior programming position, then this course is for you!\n\nYour new job or consulting opportunity awaits!\n\nWhy not get started today?\nClick the Signup button to sign up for the course!",
      "target_audience": [
        "Anyone looking to learn how to program in the C language"
      ]
    },
    {
      "title": "Fundamental Data Structures & Algorithms using C language.",
      "url": "https://www.udemy.com/course/data-structures-stack-queue-linkedlist/",
      "bio": "Learn Data Structures and algorithms for Stack, Queue, Linked List, Binary Search Tree and Heap ( using C Programming ).",
      "objectives": [
        "Recursion, Stack, Polish Notations, infix postfix, FIFO, Circular & Double Ended Queue, Linked List - Linear, Double & Circular, Stack & Queue using Linked List",
        "What is stack, algorithms for Push and Pop operation. Implementation of Stack data structure using C.",
        "Using Stack - checking parenthesis in an expression",
        "Using Stack - Understanding Polish notations, algorithm and implementation of infix to postfix conversion and evaluation of postfix expression",
        "What is a FIFO Queue, understanding Queue operations - Insert and delete, implementing FIFO Queue",
        "Limitations of FIFO queue, concept of Circular Queue - Implementation of Circular queue.",
        "Concept of Double ended queue, logic development and implementation of double ended queue.",
        "Concept of Linked List - definition, why we need linked list.",
        "Singly Linked List - developing algorithms for various methods and then implementing them using C programming",
        "Doubly Linked List - developing algorithm of various methods and then implementing them using C programming",
        "Circular Linked List - developing algorithm of various methods and then implementing them using C programming",
        "How to estimate time complexity of any algorithm. Big Oh, Big Omega and Big Theta notations.",
        "Recursion, concept of Tail recursion, Recursion Vs Iteration.",
        "Binary Tree, definition, traversal (in-order, pre-order and post-order), binary search tree, implementation.",
        "Heap - concept, definition, almost complete binary tree, insertion into heap, heap adjust, deletion, heapify and heap sort."
      ],
      "course_content": {},
      "requirements": [
        "Student should be conversant with basic C programming."
      ],
      "description": "This course will help the students ability to grasp the knowledge of data structures and algorithm using the C programming language. Knowledge of Data Structures and Algorithms are essential in developing better programming skills.\nThis course is based on the standard curriculum of Universities across the globe for graduate level engineering and computer application course.\nApart from step by step development of concepts students will also learn how to write algorithms and then how to write programs based on the algorithms in this course.\n\n\nYou will learn the following in this course:  (All implemented using C programming)\nFundamental of Data Structure concept\n\n\nWhy we need Data Structures\n\n\nStack - Idea, definition, algorithm, implementations.\n\n\nUsing Stack - Parenthesis checking, Polish Notation, Infix to postfix conversion and evaluation.\n\n\nFIFO Queue - Idea, definition, algorithm, implementation.\n\n\nCircular Queue using array - Idea, definition, algorithm, implementation.\n\n\nDouble ended queue using array - Idea, definition, algorithm, implementation.\n\n\nLinked List - Idea, definition, why we need linked list. Comparison with array.\n\n\nSingly Linked List - Development of algorithm for various operations and then Implementation of each of them\n\n\nCreating Stack and Queue using Singly Linked list - Implementation.\n\n\nDoubly Linked List - Idea, definition, algorithm of various operations and implementations.\n\n\nCircular Linked List - Idea, definition, algorithm and implementations.\n14. Calculating efficiency of algorithms, Worst Case (Big Oh), Average Case (Big Theta) and Best case (Big omega) complexities. How to calculate them for different algorithms.\n15. Binary Searching\n16. Recursion in detail. Example program using recursion and the critical comparison between Recursive approach and Iterative approach of problem solving.\n17. Binary Tree, definition, traversal (In, Pre and Post Order), Binary Search Tree implementation.\n18. Heap data structure,  definition, heap insertion, deletion, heap adjust, Heapify and heap sort.",
      "target_audience": [
        "Students who want to prepare themselve for interview of top companies like Google, Amazon or Microsoft.",
        "Students who are looking forward to be an efficient programmer, who are having data structures in their syllabus.",
        "Students who wants to have in dept knowledge about the Stack, Queue and Linked List, Efficiency of Algorithm, Binary Tree, Heap"
      ]
    },
    {
      "title": "Python Programming - Foundation Course for Data Engineers",
      "url": "https://www.udemy.com/course/python-foundation-course/",
      "bio": "Just Enough Python - Quickly Learn Python Programming Fundamentals for Data Engineers with a capstone project",
      "objectives": [
        "Learn Python 3 Programming Language",
        "Working with Python Types and Data Structures",
        "Working with Python Sequences and Advanced Data Types",
        "Python Control Structures and Loops",
        "Python Functions and Lambda",
        "Exception Handling",
        "Objects and Classes",
        "Packages and Modules",
        "More than 100 coding exercises",
        "Python Coding Project"
      ],
      "course_content": {},
      "requirements": [
        "You must have some programming experience in any other programming language"
      ],
      "description": "About the Course\nPython is a programming language.\nLearning a programming language goes into four parts.\n1. Learn the Language\n2. Practice Exercises\n3. Coding Challenge\n4. Project Challange\n\n\nWe designed this course in the same way. The first step is to learn the language and features.\nI will cover this part using video lectures to explain the concepts and show you some working examples.\nAll you need to do is to sit relaxed and observe the videos.\n\n\nThe second part is to practice what you learned.\nI will also include a set of simple practice exercises.\nYou might see some practice exercises in the middle of the section, or at the end.\nThese exercises will be super simple, and they will help you practice and play with what you learned in the given section.\n\n\nThe third part is to solve some complex coding challenges.\nThese are again exercises that I will include as a separate section.\nYou will get these challenges after you finish 2-3 sections and reach a logical level of your learning.\nThese challenges will present a random problem combining everything you learned in the previous sections.\nThey will be tough and tricky, but they will help you scale your knowledge to the next level.\n\n\nThe fourth and final step is to solve a more significant problem by applying everything you learned in this course.\nYou can call it a micro-project. The micro-project problem statement and the expectation are included as the last thing of this course. The micro-project allows you to apply all that you learned in this course and solve a business problem.\n\n\nNothing to worry about. You will also have access to one or more solutions for every given exercise and the micro-project.\nYou can try solving the given problems, and if you feel stuck, you can refer to the solution and other related material.\nHowever, we recommend that you give an honest try to do the exercises and referring to the solution should be the last thing.\n\n\nLooking forward to seeing you on the course.",
      "target_audience": [
        "Programmers willing to learn Python 3 Language"
      ]
    },
    {
      "title": "Hibernate: Advanced Development Techniques",
      "url": "https://www.udemy.com/course/hibernate-tutorial-advanced/",
      "bio": "Learn Advanced Hibernate techniques for Mapping Sets, Lists, Embeddable, Enums and Inheritance",
      "objectives": [
        "Apply advanced development techniques with Hibernate",
        "You will TYPE IN EVERY LINE of code with me in the videos. I EXPLAIN every line of code to help you learn!",
        "LEARN advanced Hibernate features: Mapping Sets, Lists, Embeddable, Enums and Inheritance",
        "I am a RESPONSIVE INSTRUCTOR ... post your questions and I will RESPOND in 24 hours.",
        "You can DOWNLOAD all source code and PDFs. Perfect for offline LEARNING and REVIEW."
      ],
      "course_content": {},
      "requirements": [
        "Basic Java knowledge is required",
        "Basic Hibernate knowledge is required",
        "Basic MySQL knowledge is required",
        "Basic Maven knowledge is required"
      ],
      "description": "This course covers advanced Hibernate development techniques. You will learn how to easily use Hibernate to map Sets, Lists, Embeddable, Enums and Inheritance.\n---\nYou will type in every line of code with me in the videos ... all from scratch.\nI explain every line of code that we create. So this isn't a copy/paste exercise, you will have a full understanding of the code.\n---\nLive Coding - I code all of the real-time projects from scratch\nAll source code is available for download\nResponsive Instructor - All questions answered within 24 hours\n---\nPDFs of all lectures are available for download\nProfessional video and audio recordings (check the free previews)\n---\n\n\nWhy You Should Take This Course?\nHibernate is an amazing framework for object-to-relational mapping. It is fairly easy to get started with Hibernate. However, when you need to apply advanced development techniques, it is hard to find helpful, up-to-date information. There is a ton of information available for free on the Internet, but most of it is outdated or poorly written.\nThis course provides the up-to-date information on advanced Hibernate techniques. In the course, we demystify the concepts and show you practical examples that work using the latest version of Hibernate. Also, you will receive technical support if you have questions about the course material.\n\n\nYou Will Learn How To\nCreate mappings for Java Sets, Lists (both unsorted and sorted)\nIntegrate embeddable components in Hibernate entities\nAdd support for enums with Hibernate\nApply various Hibernate inheritance strategies\nCompare the Hibernate inheritance strategies in terms of performance and table design\n\n\nQuality Material\nYou will receive a quality course, with solid technical material and  excellent audio and video production. This is my seventh course at Udemy.\nMy first six courses on Udemy were:\nEclipse IDE for Beginners\nJava Database Connection (JDBC)\nJavaServer Faces (JSF) for Beginners\nJSP and Servlets for Beginners\nSpring and Hibernate for Beginners\nDeploy Java Spring Apps to the Amazon Cloud (AWS)\nThese courses have received rave 5 star reviews and over 200,000 students have taken the courses. Also, these courses are the most popular courses in their respective categories.\nI also have an active YouTube channel where I post regular videos. In the past year, I’ve created over 300 video tutorials (public and private). My YouTube channel has over 4 million views and 32k subscribers. So I understand what works and what doesn’t work for creating video tutorials.\n\n\nNo Risk – Udemy Refund\nFinally, there is no risk. You can preview 25% of the course for free. Once you purchase the course, if for some reason  you are not happy with the course, Udemy offers a 30-day refund (based on Udemy's Refund Policy).\nSo you have nothing to lose, sign up for this course and learn how to apply advanced Hibernate development techniques!\n\n\nTarget Audience\nJava Developers with basic Hibernate experience",
      "target_audience": [
        "Experienced Hibernate developers who want to learn advanced development techniques"
      ]
    },
    {
      "title": "TypeScript for Professionals - by Basarat",
      "url": "https://www.udemy.com/course/typescript-for-professionals/",
      "bio": "Learn all about the TypeScript type system - taught by a Microsoft MVP",
      "objectives": [
        "Use TypeScript at your day to day job",
        "Learn the Basics of TypeScript's Type System",
        "Use Types for annotating any JavaScript Object",
        "Learn Advanced TypeScript concepts",
        "Create Complex Type Utility Functions"
      ],
      "course_content": {
        "Basics": [
          "Setup and Hello World",
          "Primitive Types",
          "Instance Types",
          "Arrays And Tuples",
          "Object Types and Type Aliases",
          "const declarations",
          "Functions",
          "Structural Typing",
          "Classes",
          "Target Compiler Option",
          "Generics",
          "Special Types : any and unknown",
          "JavaScript to TypeScript",
          "Creating a Frontend Project",
          "Type Assertions",
          "Type Casting",
          "Modules",
          "Type Declarations",
          "Creating an NPM Package",
          "Async Await",
          "ts-node"
        ],
        "Intermediate": [
          "Lexical this",
          "readonly modifier",
          "Union Types",
          "Literal Types",
          "Type Narrowing",
          "Discriminated Unions",
          "Class Parameter Properties",
          "Strict Compiler Option",
          "Null versus Undefined",
          "Intersection types",
          "Optional modifier",
          "Non-null Assertion Operator",
          "Interfaces",
          "Interface Declaration Merging",
          "Types versus Interfaces",
          "never type"
        ],
        "Advanced": [
          "implements keyword",
          "Definite Assignment Assertion",
          "User Defined Type Guards",
          "Assertion Functions",
          "Function Overloading",
          "Call Signatures",
          "Abstract Classes",
          "Index Signatures",
          "Readonly Arrays and Tuples",
          "Double Assertion",
          "const Assertion",
          "this parameter",
          "Generic Constraints",
          "Dealing with Temporal Uncertainty"
        ],
        "Expert": [
          "typeof type operator",
          "Lookup Types",
          "keyof type operator",
          "Conditional Types",
          "Conditional Types with Unions and never",
          "infer keyword and `ReturnType<T>`",
          "Mapped Types",
          "Mapped type modifiers",
          "Template Literal Type"
        ],
        "Super": [
          "Partial<T>",
          "Required<T>",
          "Readonly<T>",
          "Record<K,V>",
          "AutoComplete Literal Unions with Primitives",
          "Project References",
          "undefined vs optional",
          "satisfies operator",
          "PropertyKey",
          "ThisType<T> Utility",
          "Awaited<T> Utility",
          "String Manipulation Utilities",
          "Mapped Types as Clauses",
          "TypeScript Unions vs Intersection Mental Model",
          "TypeScript Enums are Bad"
        ]
      },
      "requirements": [
        "Beginner JavaScript knowledge"
      ],
      "description": "I've been teaching TypeScript since 2012 (since launch). While teaching Juniors as well as Experts, I gathered a few tricks to make it an easy and smooth learning experience. I share those experiences with you. The objective is simple:\n\n\nYou can feel confident about what TypeScript is and offers\nYou become a competent TypeScript / JavaScript developer\nA lot of effort has gone into this course to make sure you get all the knowledge you need, as quickly as possible.\nWhy TypeScript\nI've been teaching and working with JavaScript for the past 10 years. TypeScript is hands down the best way to learn JavaScript. Give a beginner JavaScript developer a workflow with the TypeScript compiler and they can actually learn stuff themselves thanks to TypeScript's excellent 1000+ compiler errors that prevent common mistakes.\nWhy this course\nI'm a Microsoft MVP (Most Valuable Professional) for TypeScript thanks to my teaching contributions in the form of books, various videos and answers on StackOverflow.\nThis provides the best guidance possible for all the ways you can use TypeScript for your JavaScript projects to give you the most chances of success in your professional career. This course is based on my experience in that area and curated based on key workshop insights.",
      "target_audience": [
        "Programmers looking to master TypeScript"
      ]
    },
    {
      "title": "Design Patterns in Go",
      "url": "https://www.udemy.com/course/design-patterns-go/",
      "bio": "Discover the modern implementation of design patterns in Go (golang)",
      "objectives": [
        "Recognize and apply design patterns",
        "Refactor existing designs to use design patterns",
        "Reason about applicability and usability of design patterns"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "SOLID Design Principles": [
          "Overview",
          "Single Responsibility Principle",
          "Open-Closed Principle",
          "Liskov Substitution Principle",
          "Interface Segregation Principle",
          "Dependency Inversion Principle",
          "Summary"
        ],
        "Builder": [
          "Overview",
          "Builder",
          "Builder Facets",
          "Builder Parameter",
          "Functional Builder",
          "Summary"
        ],
        "Factories": [
          "Overview",
          "Factory Function",
          "Interface Factory",
          "Factory Generator",
          "Prototype Factory",
          "Summary"
        ],
        "Prototype": [
          "Overview",
          "Deep Copying",
          "Copy Method",
          "Copy Through Serialization",
          "Prototype Factory",
          "Summary"
        ],
        "Singleton": [
          "Overview",
          "Singleton",
          "Problems with Singleton",
          "Singleton and Dependency Inversion",
          "Summary"
        ],
        "Adapter": [
          "Overview",
          "Adapter",
          "Adapter Caching",
          "Summary"
        ],
        "Bridge": [
          "Overview",
          "Bridge",
          "Summary"
        ],
        "Composite": [
          "Overview",
          "Geometric Shapes",
          "Neural Networks",
          "Summary"
        ],
        "Decorator": [
          "Overview",
          "Multiple Aggregation",
          "Decorator",
          "Summary"
        ]
      },
      "requirements": [
        "Good understanding of Go",
        "Familiarity with latest Go language features",
        "Good understanding of software design principles",
        "A computer with latest Go compiler and (hopefully) an IDE"
      ],
      "description": "Course Overview\nThis course provides a comprehensive overview of Design Patterns in Go from a practical perspective. This course in particular covers patterns with the use of:\nThe latest versions of the Go programming language\nUse of modern programming libraries and frameworks\nUse of modern developer tools such as JetBrains GoLand\nDiscussions of pattern variations and alternative approaches\nThis course provides an overview of all the Gang of Four (GoF) design patterns as outlined in their seminal book, together with modern-day variations, adjustments, discussions of intrinsic use of patterns in the language.\nWhat are Design Patterns?\nDesign Patterns are reusable solutions to common programming problems. They were popularized with the 1994 book Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma, John Vlissides, Ralph Johnson and Richard Helm (who are commonly known as a Gang of Four, hence the GoF acronym).\nThe original book GoF book used C++ and Smalltalk for its examples, but, since then, design patterns have been adapted to every programming language imaginable: C#, Java, Swift, Python, JavaScript and now — Go!\nThe appeal of design patterns is immortal: we see them in libraries, some of them are intrinsic in programming languages, and you probably use them on a daily basis even if you don't realize they are there.\nWhat Patterns Does This Course Cover?\nThis course covers all the GoF design patterns. In fact, here's the full list of what is covered:\nSOLID Design Principles: Single Responsibility Principle, Open-Closed Principle, Liskov Substitution Principle, Interface Segregation Principle and Dependency Inversion Principle\nCreational Design Patterns: Builder, Factories (Factory Method and Abstract Factory), Prototype and Singleton\nStructrural Design Patterns: Adapter, Bridge, Composite, Decorator, Façade, Flyweight and Proxy\nBehavioral Design Patterns: Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Observer, State, Strategy, Template Method and Visitor\nWho Is the Course For?\nThis course is for Go developers who want to see not just textbook examples of design patterns, but also the different variations and tricks that can be applied to implement design patterns in a modern way. For example, the use of the Composite pattern allows structures to be iterable and lets scalar objects masquerade as if they were collections.\nPresentation Style\nThis course is presented as a (very large) series of live demonstrations being done in JetBrains GoLand and presented using the Kinetica rendering engine. Kinetica removes the visual clutter of the IDE, making you focus on code, which is rendered perfectly, whether you are watching the course on a big screen or a mobile phone.\nMost demos are single-file, so you can download the file attached to the lesson and run it in GoLand, or another IDE of your choice (or just run them from the command-line).\nThis course does not use UML class diagrams; all of demos are done via live coding.",
      "target_audience": [
        "Software engineers",
        "Web developers",
        "Designers",
        "Architects"
      ]
    },
    {
      "title": "Build RESTFUL APIs using Kotlin and Spring Boot",
      "url": "https://www.udemy.com/course/build-restful-apis-using-kotlin-and-spring-boot/",
      "bio": "A complete hands on approach to learn the Kotlin language and build Restful APIs using Kotlin SpringBoot.",
      "objectives": [
        "Kotlin Programming Language and its benefits",
        "Write Code using Kotlin Programming Language",
        "Building Applications using Kotlin",
        "Build RestFul Services using SpringBoot and Kotlin",
        "Test Kotlin using JUnit5",
        "Kotlin and Java Interoperability",
        "Integrate Spring Data JPA with Kotlin",
        "Integration testing DB Layer using TestContainers & JUnit5",
        "Unit Testing Functions calls using Mockk Library"
      ],
      "course_content": {
        "Getting Started with the Course": [
          "Course Introduction",
          "Prerequisites"
        ],
        "Course Slides & Source Code": [
          "Course Slides",
          "Source Code"
        ],
        "Getting Started with Kotlin Programming Language": [
          "Introduction to Kotlin",
          "How Kotlin Works with the JVM?"
        ],
        "Kotlin Fundamentals": [
          "Project Setup",
          "Hello Kotlin!",
          "val & var variables in Kotlin",
          "Basic Types - Int, Long, Double, String",
          "Conditionals - If and when block",
          "Ranges & Loops",
          "while & do-While",
          "break, labels and return"
        ],
        "Functions in Kotlin": [
          "Defining and Invoking Functions",
          "Default Value Parameters & Named Arguments",
          "Top-Level Functions and Top-level Properties"
        ],
        "Classes, Interfaces and Inheritance": [
          "Introduction to class - Creating a class and objects",
          "Primary Constructors",
          "Secondary Constructors",
          "initializer code using init block",
          "Data Classes",
          "Create Employee Data Class",
          "Custom Getters and Setters",
          "Inheritance - Extending Classes",
          "Inheritance - Override Functions, Variables",
          "object keyword for creating instance of the class",
          "companion object Keyword",
          "Interfaces",
          "Interfaces - Handling Conflicting Functions",
          "Interfaces - Defining and Overrding Variables",
          "Visibility Modifiers",
          "Type Checking, Casting and Smart Cast",
          "Enum class"
        ],
        "Nulls in Kotlin": [
          "Nullable & Non-Nullable types in Kotlin",
          "Safe Call(?) ,Elvis Operator(?:),Non Null Assertion(!!) to deal with Null Values",
          "Invoking or assigning a Nullable Type to a Non-Nullable Type"
        ],
        "Collections, Arrays & Lamda Expressions": [
          "Introduction to Collections",
          "Introduction to Lamda Expressions",
          "Lambdas and Higher Order Functions",
          "Filter Operations on Kotlin Collections",
          "Map Operations on Kotlin Collections",
          "FlatMap Operations in Collections",
          "Working With HashMaps",
          "Lazy Evaluation of Collections using Sequences",
          "Nullability in Collections"
        ],
        "Exceptions In Kotlin": [
          "Handling Exceptions using try-catch"
        ],
        "Scope Functions": [
          "Introduction to Scope Functions",
          "apply & also Scope Function",
          "let Scope Function",
          "with & run Scope Function"
        ]
      },
      "requirements": [
        "Java 11 or Higher is Required",
        "Experience working with any IDE( Intellij, Eclipse)",
        "Experience working with Java",
        "Experience building application using SpringBoot",
        "Gradle or Maven Build tool Experience is must"
      ],
      "description": "Kotlin is the Modern, concise and safe programming language and  is one of the popular JVM language in this day and age.\nIt’s also interoperable with Java and other languages, and provides many ways to reuse code between multiple platforms for productive programming.\nThis course will focus on using Kotlin for Server-Side Development using SpringBoot framework. This is a pure hands-on oriented course which covers these two topics:\nCovers Kotlin Fundamentals thats necessary for Java Developers\nBuild RestFul APIs using SpringBoot and Kotlin\nSection 1: Getting Started With the Course\nThis section covers the course objectives and the prerequisites that are needed to make the most out of this course.\nSection 2: Getting Started with Kotlin Programming Language\nIn this section, I will introduce you to Kotlin Programming Language and why its a powerful language for enterprise development.\nIntroduction to Kotlin\nHow Kotlin Works with the JVM?\nSection 3: Kotlin Fundamentals\nIn this section, we will explore the fundamentals of Kotlin.\nval & var variables in Kotlin\nBasic Types - Int, Long, Double, String\nConditionals - If and when block\nRanges , Loops\nwhile & do-While\nbreak, labels and return\nSection 4: Functions in Kotlin\nIn this section, we will learn about functions in Kotlin and different ways of declaring and using them\nDefining and Invoking Functions\nDefault Value Parameters & Named Arguments\nTop-Level Functions and Top-level Properties\nSection 5: Classes, Interfaces and Inheritance\nIn this section, we will learn about classes, inheritance and interfaces in detail.\nIntroduction to class - Creating a class and objects\nPrimary Constructors\nSecondary Constructors\ninitializer code using init block\nData Classes\nCustom Getters and Setters\nInheritance - Extending Classes\nInheritance - Override Functions, Variables\nobject keyword for creating instance of the class\ncompanion object Keyword\nInterfaces\nInterfaces - Handling Conflicting Functions\nInterfaces - Defining and Overrding Variables\nVisibility Modifiers\nType Checking, Casting and Smart Cast\nEnum class\nSection 6: Nulls in Kotlin\nIn this section, we will learn about handling nulls in Kotlin\nNullable & Non-Nullable types in Kotlin\nSafe Call(?) , Elvis Operator(?:) & Non Null Assertion(!!) to deal with Null Values\nInvoking or assigning a Nullable Type to a Non-Nullable Type\nSection 7: Collections, Arrays & Lamda Expressions\nIn this section, I will introduce you to collections, arrays and lambda expressions in Kotlin\nIntroduction to Collections\nIntroduction to Lamda Expressions\nLambdas and Higher Order Functions\nFilter Operations on Kotlin Collections\nMap Operations on Kotlin Collections\nFlatMap Operations in Collections\nWorking With HashMaps\nLazy Evaluation of Collections using Sequences\nNullability in Collections\nSection 8 : Exceptions In Kotlin\nIn this section, I will cover the exceptions in kotlin and the techniques to handle them.\nHandling Exceptions using try-catch\nSection 9 : Scope Functions\nIn this section, I will introduce you all to scope functions in Kotlin and its usage.\nIntroduction to Scope Functions\napply & also Scope Function\nlet Scope Function\nwith & run Scope Function\nSection 10 : Getting Started with Kotlin and Spring Boot\nIn this section, I will explain the overview of the app we are going to build and build a very simple API.\nOverview of the app & Project Setup\nBuild a Simple Endpoint - Greeting Controller\nConstructor Injection in Spring\nSetting up different profiles in Spring Boot\nSet up Logging in Kotlin\nSection 11 : Integration/Unit Testing using Junit 5\nIn this section, I will code and explain about the techniques to write different types of test cases using spring boot and Kotlin.\nIntroduction to Automated Tests & Setting up JUnit5\nIntegration Test for Controller\nUnit Test for Controller - Using the Mockk Mocking library\nSection 12 : Build the Course Catalog Service\nIn this section, we will build the Course Catalog Service to manage the Courses\nSet up the Course Entity & CourseDTO\nCreate CourseRepository & Configure JPA in application.yml file\nBuild the POST Endpoint for adding new Course I\nntegration test for the POST endpoint using JUnit5\nBuild the Get Endpoint to retrieve all Courses\nIntegration test for the GET endpoint to retrieve all the courses\nBuild the Update Endpoint to update a Course\nIntegration test for the PUT endpoint using JUnit5\nBuild the DELETE endpoint to delete a Course\nSection 13: Unit Testing Controller layer (Web Tier)\nIn this section, we will code and learn about how to write unit tests for the controller\nSetting up the Unit Test for the CourseController\nUnit test for the Post Endpoint in CourseController\nUnit test for the GET Endpoint in CourseController\nUnit test for the PUT Endpoint in CourseController\nUnit test for the DELETE Endpoint in CourseController\nSection 14 : Bean Validation using Validators and ControllerAdvice\nIn this section, we will code and learn the different techniques to apply bean validations and handle exceptions using the ControllerAdvice Pattern\nName and Category as Mandatory using @NotBlank Annotation\nImplement Custom Error Handling using ControllerAdvice pattern\nHandle Global RuntimeException using ControllerAdvice Pattern\nSection 15 : Custom JPA queries using Spring Data JPA and DB Layer testing using @DataJpaTest\nIn this lecture, we will learn about the techniques to write custom JPA queries and the techniques to test the DB layer using the DataJpaTest\nRetrieve Courses By Name using JPA Query Creation Function\nRetrieve Courses By Name using Native SQL query\nTesting Mutliple sets of Data using @Parameterized test\nSection 16: GET Endpoint to retrieve Courses By Name using @RequestParam\nIn this section, we will code and learn about the usage of RequestParam in the controller endpoint.\nUse existing GET endpoint to retrieve Courses by Name\nWrite Integration test to retrieve course by Name\nSection 17 : Entity RelationShips using Spring Data JPA\nIn this section, I will explain the technique to express the relationships in JPA using Entity and Data classes in Kotlin\nAdding Instructor Entity in to the Course Catalog Service\nAdding the relationship in the Entity Class\nInstructor Controller to Manage Instructor Data\nUpdate CourseService to validate Instructor Data\nFix the CourseController Integration Tests\nFix the CourseController Unit Tests\nSection 18 : Integrating with Postgres DB\nIn this section, we will code and learn to integrate the postgres DB in to the course catalog service.\nSetting up the Postgres DB and App to interact with Postgres\nTest the app with Postgres DB\nSection 19 : Integration Testing using TestContainers\nIn this section, we will code and learn to integrate the testcontainers to run integration test.\nSetting Up TestContainers for the Integration Test\nConfigure @DataJpaTest with TestContainers\nSection 20 : Java & Kotlin Interoperability\nIn this section, we will code and learn about the interoperability between Java and Kotlin.\nInvoking Kotlin Code from Java Class\nInvoking Java Code from Kotlin\nUseful JVM annotations in Kotlin\nBy the end of this course, you will be comfortable writing code using the Koltin Programming language and Build RestFuL APIs using SpringBoot and Kotlin.",
      "target_audience": [
        "Developers who are interested in learning Kotlin Programming language",
        "Developers who are interested in building applications using Kotlin and SpringBoot",
        "Java developers who would like to learn Kotlin Programming Language"
      ]
    },
    {
      "title": "Python for Beginners (2024)",
      "url": "https://www.udemy.com/course/python-for-complete-beginners-1/",
      "bio": "A beginner Python course covering all of the basics you need to know",
      "objectives": [
        "Python Basics from Scratch",
        "Variables and Data Types in Python",
        "Input/Output in Python",
        "Working with Strings in Python",
        "Working with Numbers in Python (Arithmetic, Functions, etc.)",
        "Conditional Statements in Python",
        "Loops (While, For) in Python",
        "Lists in Python",
        "Tupes in Python",
        "Functions in Python"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Set-up and Getting Started": [
          "Installing and Setting Up Pycharm",
          "Print Statements"
        ],
        "Variables and Data Types": [
          "Variables",
          "Data Types",
          "Converting Between Data Types",
          "Quiz 1"
        ],
        "Working with String, Numbers, and Input": [
          "String Concatenation",
          "Working with Strings",
          "Working with Numbers",
          "Input Function",
          "Coding Exercises #1",
          "Quiz 2"
        ],
        "Conditional Statements (If/Elif/Else)": [
          "Conditional Statements",
          "Logical Operators",
          "Comparison Operators",
          "Practice Problem",
          "Coding Exercises #2",
          "Quiz 3"
        ],
        "Loops, Lists, and Tuples": [
          "While Loops",
          "Guessing Game",
          "Lists",
          "List Methods",
          "For Loops",
          "2D Lists and Nested Loops",
          "Tuples",
          "Coding Exercises #3",
          "Quiz 4"
        ],
        "Functions": [
          "Functions - Part 1",
          "Functions - Part 2",
          "Return Statement",
          "Coding Exercises #4",
          "Quiz 5"
        ]
      },
      "requirements": [
        "None"
      ],
      "description": "Learn the basics of Python in a quick and easy-to-understand course! This course will teach you the fundamentals of Python and covers practice problems so you can advance your Python skills quickly. You will learn about installing / setting up Python, input, output, variables, data types, converting between data types, strings, numbers, arithmetic, conditional statements, loops, lists, tuples, and functions.\n\n\nTopics Covered:\nInstalling and Setting up Python\nInput / Output\nVariables\nData Types\nConverting between Data Types\nWorking with Strings\nWorking with Numbers (Arithmetic, Math Functions, etc.)\nConditional Statements\nLoops (While, For)\nLists\nTuples\nFunctions\nSoftwares Used:\nPycharm (Platform for coding in Python)\nNote: The first video of the course will teach you how to set up Python and Pycharm so you can begin coding your problems right away! The course assumes you have no prior knowledge of Python or programming.\nInformation about the Instructor:\nAlgoSTEM is a non-profit organization led by Arushi Gupta and Akshaj Gupta that aims to increase accessibility to STEM education. Through its free online courses, AlgoSTEM has taught over 35,000 students worldwide. AlgoSTEM instructors are experienced and knowledgeable about the subjects they teach which include computer science, math, and various sciences.\nAlong with having multiple Udemy courses, AlgoSTEM has a popular YouTube channel called Algorythm that covers solutions to coding problems including those from Leetcode, Codeforces, Codechef, and various math competitions.",
      "target_audience": [
        "Anyone interested in learning Python",
        "Anyone interested in learning Computer Science"
      ]
    },
    {
      "title": "Golang: How to Build a Blockchain in Go Guide",
      "url": "https://www.udemy.com/course/golang-how-to-build-a-blockchain-in-go/",
      "bio": "Learn how to build a blockchain from scratch with Go Programming Language (Golang)",
      "objectives": [
        "Understand the theory and mechanisms behind Blockchain",
        "Understand the verification process with Blockchain transactions",
        "Understand consensus algorithm that's used for deriving nonce when mining",
        "Understand the theory behind sending/receiving cryptocurrency",
        "Learn how to develop a basic Blockchain using Go",
        "Understand hash's role in blockchain management",
        "Understand how Blockchain consensus mechanisms work"
      ],
      "course_content": {},
      "requirements": [
        "Not a requirement, but those who have experience with cryptocurrency may find this course easier to understand",
        "We will be developing using Go, so a basic understanding of Go is recommended"
      ],
      "description": "Now's the time!\nWith the emergence of Facebook's cryptocurrency, Libra, companies like Amazon, Microsoft, and IBM are also joining the virtual currencies trend. Blockchain development technology is anticipated to play a crucial role with IoT, medical, and even the real estate fields.\nStep up your career to the next level by learning more about this new technology!\n\n\nWhy this course?\n1. Learn by doing and not just listening!\nThis course provides a hands-on approach to learning about Blockchain concepts, intuition, and implementation. In this course, we'll be utilizing Blockchain technology and Go to develop a money transfer system.\n2. Easy to understand\nConfused by Blockchain? With much of Blockchain technology explained in complicated technical documents, many people may think of Blockchain as something that's confusing. But Blockchain and the technology underpinning the cryptocurrency, has the potential to revolutionize the platform for future network distribution systems.\n3. Blockchain is the future\nWith a blockchain network, cross-border money transfers and many other transactions involving digital assets can all be made possible by just about anyone with access to the internet. But have you ever thought about how Blockchain can provide a solution for many of the challenges of registration related to land ownership and real estate? Implementation of a blockchain-based registry can enable the ownership documents to be recorded and assigned to an owner's user account. With Blockchain, every transaction is traceable, timestamped, and indisputable. Used in this way, blockchain can provide a highly secure record of ownership that can't be manipulated or lost. The possibilities of the uses of blockchain are endless - from voting systems to issuance of IDs such as passports - all can be made possible with blockchain technology.\n\n\nBlockchain is the future and by understanding the concept and actually creating it from scratch, you'll be able to apply Blockchain in the real world.",
      "target_audience": [
        "Anyone interested in Blockchain and its applications",
        "Anyone who prefers to learn about Blockchain by actual coding rather than Power Point slide explanations"
      ]
    },
    {
      "title": "Self Driving and ROS 2 - Learn by Doing! Odometry & Control",
      "url": "https://www.udemy.com/course/self-driving-and-ros-2-learn-by-doing-odometry-control/",
      "bio": "Create a ROS2 Self-Driving robot with Python and C++. Master Odometry, Control and Sensor Fusion using Kalman Filters",
      "objectives": [
        "Create a Real Self-Driving Robot",
        "Mastering ROS2, the latest version of the Robot Operating System",
        "Implement Sensor Fusion algorithms",
        "Simulate a Self-Driving robot in Gazebo",
        "Programming Arduino for Robotics Applications",
        "Use the ros2_control library",
        "Develop a Controller",
        "Odometry and Localization",
        "Kalman Filters and Extended Kalman Filter",
        "Probability Theory",
        "Differential Kinematics",
        "Create a Digital Twin of a Self-Driving Robot",
        "Master the TF2 library"
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of Python or C++",
        "Basic knowledge of Linux",
        "No prior knowledge of ROS or ROS 2 required",
        "No prior knowledge of Robotics theory required",
        "No hardware required. All the course can be followed also using only the PC"
      ],
      "description": "Would you like to build a real Self-Driving Robot using ROS2, the second and last version of Robot Operating System by building a real robot?\n\n\nWould you like to get started with Autonomous Navigation of Robot and dive into the theoretical and practical aspects of Odometry and Control from industry experts?\n\n\nThe philosophy of this course is the Learn by Doing and quoting the American writer and teacher Dale Carnegie\nLearning is an Active Process. We learn by doing, only knowledge that is used sticks in your mind.\n\n\nIn order for you to master the concepts covered in this course and use them in your projects and also in your future job, I will guide you through the learning of all the functionalities of ROS, both from a theoretical and practical point of view.\n\n\nEach section is composed of three parts:\nTheoretical explanation of the concept and functionality\nUsage of the concept in a simple Practical example\nApplication of the functionality in a real Robot\n\n\nThere is more!\n\n\nAll the programming lessons are developed using both Python and C++. This means that you can choose the language you are most familiar with or become an expert Robotics Software Developer in both programming languages!\n\n\nBy taking this course, you will gain a deeper understanding of self-driving robots and ROS 2, which will open up opportunities for you in the exciting field of robotics.",
      "target_audience": [
        "Self-Driving enthusiast",
        "Makers and Hobbists keen on robotics",
        "Software developers who want to learn ROS 2 and Robotics",
        "Students or Engineers who want to learn how to build a robot from scratch",
        "Developers who already know ROS 2 and who want to use it in a real-world application",
        "ROS Developers who want to learn and migrate to ROS 2",
        "Robotics Engineers who want to develop skills in Autonomous Navigation",
        "Beginner Python developers curious about Self-Driving",
        "Beginner C++ developers curious about Self-Driving"
      ]
    },
    {
      "title": "The Python Bible™ | Everything You Need to Program in Python",
      "url": "https://www.udemy.com/course/the-python-bible/",
      "bio": "Build 11 Projects and go from Beginner to Pro in Python with the World's Most Fun Project-Based Python Course!",
      "objectives": [
        "Gain a Solid & Unforgettable Understanding of the Python Programming Language.",
        "Gain the Python Skills Necessary to Learn In-Demand Topics, such as Data Science, Web Development, AI and more.",
        "Build 11 Fun and Memorable Python Projects.",
        "Use Logic and Data Structures to Create Python Programs That Can Think.",
        "Use Object-Oriented Programming (An Industry-Standard Coding Technique) to Write High Quality Python Code.",
        "Use Raw Text Data in Python to Generate Automated Messages and Customise User Experiences.",
        "Use Loops in Python to Improve Code Efficiency and Maximize Your Productivity.",
        "Create Your Own Custom Python Functions to Simplify Your Code."
      ],
      "course_content": {},
      "requirements": [
        "All you need is a desktop/laptop and an internet connection"
      ],
      "description": "Why you should take this Python course:\nIt’s Entertaining: No boring lectures, just me talking you through fun and useful tasks and making you laugh along the way.\nIt’s Memorable: You’ll learn the “why” behind everything you do, so you remember the concepts and can use them on your own later.\nIt’s the Perfect Length: The course is just 9 hours long, so you’ll actually be able to finish it and get your certificate.\nIt Goes at the Perfect Pace: You will learn the Python fundamentals at a pace tailored to beginners. This means you won’t get left behind, and won’t waste time on irrelevant filler.\nIt’s Practical: You actually use Python to create things. It’s not just dry theory. You can see you’ve understood because you make 11 Python projects that work!\nIt’s Loved: The course has thousands of five-star reviews from happy students and is rated 4.6/5.\n========================= TESTIMONIALS ===========================\n\"I have tried many Python courses on Udemy, but this one is the best of them all.\"\n- Natalie - 5 Star Review\n\"Just WOW, if you want to start Python, this is the place!” - David Cristea  - 5 Star Review\n\"If you can take just one Python course, make sure it's this one.\" - A. Barbosa - 5 Star Review\n\"The information is extremely well presented. Best Python training I have found so far\" - Tanara  - 5 Star Review\n“I feel like I am sitting in a theater enjoying a show secretly embedded with Python skills.” - Amit Pradhan  - 5 Star Review\n\"I have other Python courses on Udemy but this one is the best by far. It explains things in a very hands-on and easy to follow method that will have you understanding what you are doing in no time.\" - Robert Rodono  - 5 Star Review\n\"This has helped me achieve my dream of being a programmer and I recently joined the FTC (US Federal Trade Commission)\" - Mica Moyer - 5 Star Review\n==================================================================\nThe Python Bible is the perfect Python course for beginners. Even if you have no programming experience, don’t worry because this is for people just like you.\nIn fact, almost 100,000 Python beginners from over 195 countries have used The Python Bible to learn the fundamentals of the Python programming language in a fun and practical way.\nThe Python Bible puts all the information you need in one place, with clear explanations, passionate delivery, and a series of memorable and engaging Python projects.\nThere’s no more hunting through YouTube, no more reading confusing blog posts. Everything you need is right here.\nThe Python Bible will take you from a complete beginner to mastering the fundamentals of Python in just 9 hours.\nAnd 9 hours is the perfect length to cover all the important core topics of Python programming without leaving you behind, and without wasting your time.\nHere’s what you will learn:\n1. Variables - Learn to conveniently store data in your Python programs!\n2. Numbers - Learn how numbers work behind the scenes in your Python programs!\n3. Strings - Master the written word and automate messages using text!\n4. Logic and Data Structures - Teach your Python programs to think and decide!\n5. Loops - Save time and effort, by making computers do the hard work for you!\n6. Functions - Automate Tasks by Creating your very own Python Functions that you can use over and over!\n7. OOP - Add Python to Your Resumé By Mastering Object-Oriented Programming, an industry-standard programming technique!\nWe will cover each of these topics step by step, building your skills at just the right pace, and by the end of the course you will have a strong understanding of Python programming and you’ll be ready to create Python scripts on your own.\nAs you go through the course, you will gain practical, hands-on experience with each of the concepts by working through 11 fun Python projects. In other words, You will learn everything by actually doing it!\nWith world-class instruction and fun Python projects, everything you learn will stick in your head long after you’re finished (and the good memories will probably make you smile).\nWhether you want to get into Data Science, Web Development, AI, or make cool robots with the Raspberry Pi, The Python Bible will teach you the core fundamentals of Python programming so you can get started confidently on your Python programming path!\nTry out the course for a full 30 days, with a Udemy-approved Zero Risk, 30 Day 100% Money Back Guarantee! You have absolutely nothing to lose and everything to gain!\nEnroll in the Python Bible Now! -- You'll be glad that you did!",
      "target_audience": [
        "For complete programming beginners",
        "For People who are new to Python",
        "For people who want to learn Python fundamentals to later transition into more specialised fields like Data Science or Web Development",
        "Not intended for seasoned developers"
      ]
    },
    {
      "title": "Spring Framework 5: Beginner to Guru",
      "url": "https://www.udemy.com/course/spring-framework-5-beginner-to-guru/",
      "bio": "Spring Framework 5: Spring MVC, Spring Data JPA, Hibernate - Complete Spring 7 & SpringBoot 4 Course Refresh in Process!",
      "objectives": [
        "Learn the Spring Framework from an instructor who has worked for Pivotal customers as a Spring Source consultant, and has spoken at Spring One",
        "Learn step by step how to build Spring applications using Spring Framework 5 and Spring Boot 2",
        "You will develop Spring applications using best practices such as SOLID OOP, GitHub, Test Driven Development, and Continuous Integration Testing",
        "You will understand how to access data using Spring Data JPA and Hibernate",
        "Use Spring Framework 5 to build an End to End Reactive application with MongoDB",
        "Learn About Reactive Programming with Spring Framework 5",
        "Build web applications using Spring MVC",
        "See how to run a Spring Boot application inside a Docker container",
        "Get access to a Spring Boot Application Cookbook"
      ],
      "course_content": {},
      "requirements": [
        "Basic Java knowledge is required",
        "HTML Knowledge is very helpful",
        "Knowledge of SQL and databases is helpful"
      ],
      "description": "NOTE: Currently this course is being completely refreshed for Spring Framework 7 and Spring Boot 4. The Spring Team expects to release these products to General Availability in the fall of 2025. matching the release Java 25, the next LTS release of Java. The updated content is being made available as it is completed.\nSpring Framework 7 and Spring Boot 4\nBrand new content for Spring Framework 7 and Spring Boot 4 is being added to the course.\nSince AI is changing how software engineers write software the new content is is being delivered using AI enabled development. Learn how you can develop Spring applications using AI Coding Agents, such as Claude Code, Cursor, or JetBrains Junie!\nThe first several sections on  Spring Framework 7 and Spring Boot 4 are available now in the course!\n\n\nSpring Framework 5 and Spring Boot 2\nLearn Spring with the most modern and comprehensive course available for Spring Framework 5 and Spring Boot 2. You will see how to build multiple real world applications using Spring Framework 5.\nThis course shows you Spring programing technologies and real world industry best practices.\nYou will learn to be a Spring Framework Guru!\n** What real Students are saying about this course **\n5 STARS - Really great course :) Tons of information about not only spring but also testing, docker, databases. Really recommend you this one! Thank you John :)\n5 STARS - John Thompson is one the best instructors on Udemy and is the best Spring instructor. Awesome voice and clear explanations and slides.\n5 STARS - I am an experienced Client side programmer with over 7 years of experience, currently in the process of migrating to the back-end. Before this course, I have tried many other courses, so I really mean this when I say it, this course is outstanding! The instructor is so expired and passionate about programming, It's addictive.\n5 STARS - This course covers Spring Framework from A - Z, including newer concepts like Reactive and Webflux. The apps built along the way mimic real world apps and the assignments help reinforce the learning along the way. It assumes some Java experience, although not much. Overall I feel competent in Spring after having taken this course.\n5 STARS - This has to be the best bang-for-buck course I've taken - ANYWHERE! This course covers a LOT of ground, getting your hands dirty with lots of other technologies and frameworks along the way (Mockito, Lombok, Docker, MySQL, H2, MongoDB, JUnit, CircleCI). If you're sitting on the fence about taking this course, take the plunge!\n5 STARS - Unparalleled quality. The sheer volume of content in this course is absurd. There are so many unique resources that you can take advantage of to help you learn Spring. I have never seen an instructor work this hard to provide his students value from a course.\nInside This Course\nThe in demand technologies you will use to build Spring Framework applications, include:\nSpring Framework 5\nSpring Boot 2\nSpring Data JPA\nSpring MVC\nSpring MockMVC\nSpring WebFlux\nSpring Web Client\nSpring Data MongoDB\nSpring RestDocs\nHibernate\nProject Lombok\nMapStruct\nMaven\nGradle\nJUnit 4 and JUnit 5\nMockito\nAll source code examples used in this course have been developed using the latest version of the Spring Framework - Spring Framework 5 and Spring Boot 2.\nYou will see how modern Spring Framework development is done by leveraging the features of Spring Boot 2.\nJump In and Build a Spring MVC App with Spring Boot!\nWe'll jump right into web development with the Spring Framework. I'll show you how kick off a Spring Boot project by using the Spring Initializr. We will then go step by step to build a simple Book / Author web application.\nYou will see how easy it is to use Spring Boot, Spring MVC, and Spring Data JPA to create a functional web application running under Tomcat with a H2 in-memory database.\nUse Test Driven Development!\nIn addition to teaching you Spring Framework 5, you will learn about modern best practices used in enterprise application development.\nAs we build the applications, you'll see me using Test Driven Development (TDD) with JUnit and Mockito.\nYou will learn how to test Spring applications using JUnit 4 and JUnit 5. While JUnit 5 has been released for some time, many companies are still using JUnit 4.\nSee how using Mockito mocks will keep your Spring Framework unit tests light and fast!\nYou'll also see how the Spring context can be used for more complex integration tests.\nThese techniques are best practices used by companies all over the world to build and manage large scale Spring Framework applications.\nGitHub Source Code\nYou will have complete access to all source code examples used in the course.\nIn each lesson where we write code, you will have a link to GitHub with two branches in the Github repository.\nThe first branch is the starting state of the code.\nThe second branch is the ending state of the code.\nYou can see exactly what changed in each lesson. Each step of the way, you have a working example you can use for troubleshooting.\nIn fact, you will get access to 24 (and growing!) different GitHub repositories - each packed with Spring Framework programming examples.\nAnd, you're encouraged to fork my GitHub repositories so you can share the Spring Framework applications, which you built, to future employers!\nContinuous Integration Builds\nSince we are using GitHub and have great test coverage, I also show you how easy it is to set up Continuous Integration builds with CircleCI.\nContinuous Integration builds are another best practice used by enterprise developers.\nUsing CircleCI makes your CI builds a snap!\nProject Lombok\nWe all know Java development can require a lot of boiler plate code. It's just the nature of Java.\nWould you like to see how to slash your boiler plate code using Project Lombok?\nSpring Data JPA and Hibernate\nSpring MVC and Hibernate have long been cornerstones of the Spring Framework. You will learn how to use Spring MVC, Spring Data JPA and Hibernate to build a real world web application. You'll learn about Hibernate configuration, and about the mapping of JPA entities.\nThe Thymeleaf template engine is hugely popular with the Spring community. You will see how easy Spring Boot makes using Thymeleaf with Spring MVC.\nWhile Bootstrap CSS is not a focus of the course, we will leverage Bootstrap CSS to make our web pages look awesome!\nSpring MVC\nSpring MVC has a lot of robust capabilities.\nI start you off showing you how to build recipe application (using TDD, of course).\nInitially, it's all happy path development. We go back and add custom exception handling, form validation, and internationalization.\nIn the course you will also learn how to use Spring MVC to create RESTful APIs.\nReactive Programming\nA big theme of Spring Framework 5 is Reactive Programming.\nInside the course we build a web application using Thymeleaf, Spring MVC, Spring Data MongoDB, and MongoDB.\nWe then take the MongoDB application we built and convert it to a Reactive application. You'll see how you can leverage the new Reactive types inside the Spring Framework from the data tier to the web tier.\nYou will get to see step by step how to convert a traditional Spring MVC application to an end to end reactive application using the WebFlux framework - which is brand new to Spring Framework 5.\nSpring Pet Clinic\nSpring Pet Clinic is a classic reference application used to demonstrate best practices. The Pet Clinic application actually has it's origin within the J2EE/JEE community.\nThe Spring Framework team took the original Pet Clinic application and rebuilt it using Spring, to demonstrate best practices.\nIn this course, we will re-create the Spring Pet Clinic application.\nYou will get to see how to create a Spring Framework application from the ground up. Step by Step.\nThe approach used to develop the Spring Pet Clinic application is slightly different than the other applications developed in the course.\nIn addition to showing you how to build a Spring Framework application, you will see best practices in software development.\nWe start off the Pet Clinic project by creating a GitHub repository. Then using Spring Initializer to generate the basic shell of Spring Boot project.\nNext you see how to use GitHub to mimic Agile development practices, such as using issues and a backlog.\nWe plan development of the Spring Pet Clinic using GitHub Issues. Planning work into issues creates a work backlog, which is an important Agile concept.\nIn fact, many organizations have a formal rule that no code is changed without having an issue or some type of ticket (in Github, Jira, or some other issue tracker)\nFrom there, we use GitHub issues to complete programming assignments. Lessons start with a GitHub ticket, then we complete the programming assignment.\nYou will see how to build a Spring Framework application, step by step, using best practices in software development.\nCourse Extra - IntelliJ IDEA Ultimate\nStudents enrolling in the course can receive a free 4 month trial license to IntelliJ IDEA Ultimate! Get hands on experience using the Java IDE preferred by Spring Framework professionals!\nCourse Extra - Access to a Private Slack Community\nYou're not just enrolling in a course --> You are joining a community learning Spring.\nWith your enrollment to the course, you can access an exclusive Slack community. Get help from the instructor and other Spring Framework Gurus from around the world - in real time! This community is only available to students enrolled in this course.\nThis is a very active Slack community with over 18,500 Spring Framework Gurus!\nThis is the largest online community of people learning Spring in the world.\nWith your enrollment, you can join this community of awesome gurus!\nCourse Extra - Spring Boot Cookbook!\nInside this course, I'm including a Spring Boot Cookbook. You will have complete examples of using the Spring Framework with popular open source technologies. When you get hired as a Spring Framework developer, you'll have ready made Spring Framework examples!\nMy Spring Boot Cookbook includes example Spring Boot projects for:\nMongoDB\nMySQL\nPostgres\nMaria DB\nDB2 Express\nNeo4J\nRedis\nCassandra\nActiveMQ\nRabbitMQ\nCourse Extra - Learn Docker!\nDocker is an exciting technology that is on fire right now!\nAs a course extra, I'm including the first 3 sections from my top rated Docker for Java Developers course. You will learn more about what Docker is and how you can deploy and run a Spring Boot application inside a Docker container.\nFor Java developers, Docker really is a game changer!\nClosed Captioning / Subtitles\nClosed captioning in English is available for all course videos!\nPDF Downloads\nAll keynote presentations are available for you to download as PDFs.\nLifetime Access\nWhen you purchase this course, you will receive lifetime access! You can login anytime from anywhere to access the course content.\nNo Risk - Money Back Guarantee\nYou can buy this course with no risk. If you are unhappy with the course, for any reason, you can get a complete refund. The course has a 30 day Money Back Guarantee.\nFuture Proof Your Programming Career\nThere is huge demand for Spring Framework developers. Downloads of Spring Boot are up 425% year over year, while Gartner Research is calling Java EE \"Obsolete\".\nThe market trends are clear.\nPopularity for JEE is rapidly declining.\nThe popularity for the Spring Framework is growing.\nSpring Framework 5 is packed with exciting and innovative new features making it a natural choice for enterprise application development.\n5 STARS - Excellent Course! It has a lot of useful material. The instructor is a passionate person and he is really helpful. You can always count on him. This course includes Slack Room. So, you can be part of the Java Community and there is always someone who help you. I recommend this course, it's really very good.\n5 STARS - The course is amazing and I am learning so much from this course. I am getting vibes that i'll become spring framework Guru!\n5 STARS - Right now it seems like he is cool and funny and seems to know what he does. He also seems to update the course regularly and to interact with his students. If I could give him more than 5 stars I definitely would!\n5 STARS - The lecture so amazing I learn this for about one month with great results I got new job as backend developer. Thank you GURU! Keep working for another great lecture!\n\n\nFuture proof your programming career. Start learning how to building modern applications using the Spring Framework and enroll in this course today!",
      "target_audience": [
        "This course is ideal for Java developers who wish to use the Spring Framework for enterprise application development"
      ]
    },
    {
      "title": "Teach Your Kids to Code: Learn to Program Python at Any Age!",
      "url": "https://www.udemy.com/course/teach-your-kids-to-code/",
      "bio": "Short, colorful apps and games you can use to teach and learn programming at any age! Chromebook, PC, Mac and Linux!",
      "objectives": [
        "Teach students to code apps and games in Python 3.9 for Chromebook, PC, Mac, or Linux",
        "Draw colorful spirals and shapes with Turtle graphics in Python",
        "Create fun, playable games like War, Yahtzee, and Rock-Paper-Scissors",
        "Code interactive apps that respond to user input and mouse clicks",
        "Master variables, loops and functions to prepare for more advanced programming courses (and a brighter future)!"
      ],
      "course_content": {},
      "requirements": [
        "A computer (PC, Mac, or Linux - even Chromebook!). You'll download and install the latest Python 3.9 (FREE!) with step-by-step instructions.",
        "If you can use a text editor (Notepad, Word, etc.), you can program in Python!",
        "No prior programming experience needed."
      ],
      "description": "Join over 38,000 students from 182 countries learning Python (and teaching it)!\nNow includes coding for Chromebook users! Teach yourself (and your students) to code fun, colorful apps and games in Python, the powerful programming language used at tech companies and in colleges worldwide. Learn coding step-by-step from Computer Science Professor Dr. Bryson Payne, author of the Amazon #1 New Release and Top 10 Best Seller, Teach Your Kids to Code: A Parent-Friendly Guide to Python Programming (No Starch Press).\nUpdates: New videos added to section 1 for coding on Chromebook, iPad and more!\nGive Your Kids a Huge Advantage in a High-Tech World\nQuickly master new problem-solving skills in Python with colorful, fun examples\nTeach beginners to code using Turtle graphics, with text-based games and apps for older learners\nBuild your own playable games and create beautiful graphics\nLearn the basics of coding, from variables to loops and functions, with interactive, engaging apps\n\nThis is the kind of course you can enjoy with your kids!\nPacked with fun examples, colorful graphics, and easy-to-follow plain English instruction, Teach Your Kids to Code is the course parents, teachers and students can enjoy together, as they build one of the top job skills of the 21st century! Python is a great first language for beginners, but it's powerful enough to be used in companies from Google to IBM.\nI designed this programming course to be easily understood by absolute beginners, with example code I used with my own students up to college freshmen.\nQuick, hands-on lessons will get you coding your own apps from scratch in minutes. Over 100 video lectures and six and a half hours of content in short, 2-to-8-minute videos will give you the practice you need to master the powerful new skill of coding.\nEverything you need to get started right away\nComplete with working code downloads and high-definition videos, you'll be able to work alongside a professor with 22 years' teaching experience and over 30 years of programming knowledge. You'll also receive a Certificate of Completion upon finishing the course.\nNo Risk: Preview videos from Sections 1, 2, and 4 now for FREE, and enjoy a 30-day money-back guarantee when you enroll - zero risk, unlimited payoff! And, we've made this course easy to afford at just $30 so parents and students can get started now!\nSign up for this course and get started coding today!\n* Programming Challenge Solutions added to all 7 Sections, plus new Bonus videos, including a new one with my son, Alex! New Turtle Gallery code and Q&A video added this month- keep the feedback and questions coming! Thanks! *\nPraise for Teach Your Kids to Code:\n\"Inspired\" - This is an inspiring course taught by an inspired teacher. The examples are well-chosen -- demonstrating principles through engaging, colorful projects rather than by teaching abstract principles first. While I wish the instructor weren't quite so repetitiously exuberant, this is at worst a minor stylistic blemish and might even be a plus for kids viewing it. — Kent Osband, Udemy student\n\"Excellent path into Python\" Not just for kids...use this course as the perfect Python primer. Clear examples, that build quickly into programs, leading to learning challenges. Bryson's delivery is well paced and good fun. — Sean Jon Darcy, Udemy student\n“Dr. Bryson Payne is a computer scientist and professor of the highest caliber, and with Teach Your Kids to Code, he brings the power of computers within easy reach for learners young and old.\"—Dr. Antonio Sanz Montemayor, Informatics Professor, Universidad Rey Juan Carlos, Spain\n“The concepts in Teach Your Kids to Code can help any young person enhance their college prospects and expand their career opportunities.\"—Dr. Raj Sunderraman, Department Chair of Computer Science, Georgia State University\n[For the Book version on Amazon] “Dr. Payne set us on the path that led us to our dream jobs! With Teach Your Kids to Code, he's providing parents and teachers everywhere the chance to do the same for the next generation of creative problem-solvers.\"—Shah and Susan Rahman, Riot Games",
      "target_audience": [
        "For beginners of any age, for teachers, or for parents working with students.",
        "Perfect for homeschooling parents or K-12 parents and teachers who want to give their students a HUGE advantage by learning to read and write code.",
        "Apps and games suitable for all age levels.",
        "Includes examples from chapters 1-7 of the book, Teach Your Kids to Code, by Dr. Bryson Payne (2015, No Starch Press).",
        "This online course does not include Pygame programming.",
        "This course is not for experienced Python coders, unless you want to code with your kids."
      ]
    },
    {
      "title": "C# Intermediate: Classes, Interfaces and OOP",
      "url": "https://www.udemy.com/course/csharp-intermediate-classes-interfaces-and-oop/",
      "bio": "An in-depth, step-by-step guide to classes, interfaces and object-oriented programming (OOP) with C#",
      "objectives": [
        "Work with classes, constructors, fields, properties, methods and indexers",
        "Use encapsulation to improve the robustness of the code and reduce the impact of change",
        "Re-use code using inheritance and composition",
        "Understand the problems with inheritance and how composition solves these problems",
        "Change the behaviour of an application by extending its code, rather than changing it",
        "Develop loosely-coupled, testable and extensible applications using interfaces"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of C# constructs: variables, type conversion, classes, conditionals and loops"
      ],
      "description": "Whether you want to use C# to build web apps, mobile apps, desktop apps or games, understanding C# classes, interfaces and principles of object-oriented programming is crucial.\nThis course is the second part of Mosh's best-selling C# series and is all about classes, interfaces and object-oriented programming. In essence, you'll learn:\n\n\nHow to work with classes, constructors, fields, properties, methods and indexers\n\n\nHow to use encapsulation to reduce the impact of change\n\n\nHow to improve the robustness of your code\n\n\nHow to re-use code using inheritance and composition\n\n\nWhy composition is better than inheritance\n\n\nHow to build extensible applications using polymorphism\n\n\nHow to develop loosely-coupled, extensible and testable applications using interfaces\n\n\n\n\nThere are lots of free tutorials and videos on YouTube. Why would you want to take this course?\nThe answer is simple: quality of teaching.\n\n\nMosh is a passionate software engineer with over 13 years of experience developing applications in C#. He is the author of several best-selling C# courses on Udemy and knows how to lead you through a series of baby steps in a logical way.\n\n\nSo, from the very beginning to the very end, you'll be confident that you'll be in good hands and watching every minute of the course, unlike the reading many free tutorials and videos, does not waste your precious time.\n\n\nEach section is equipped with a balanced mix of theory and practice. At the end of each section you'll get exercises to master the concepts you learn in that section.\n\n\nAnd one last reason: all videos are produced with high quality video/audio, to provide you the best learning experience.\n\n\n\n\nTHE COMPLETE C# PACKAGE\nThis course is the second part of Mosh's complete C# series on Udemy:\nPart 1: C# Basics for Beginners: Learn C# Fundamentals by Coding\nPart 2: C# Intermediate: Classes, Interfaces and Object-oriented Programming\nPart 3: C# Advanced: Take Your C# Skills to the Next Level\n\n\nWHAT OTHER STUDENTS WHO HAVE TAKEN THIS COURSE SAY:\n\"I’ve actually landed my first job as a Junior software developer. I owe a lot of it to you because your courses have been EXTREMELY helpful. May God bless you and your efforts to create high quality courses. This has really changed my life from working as a security guard and doing websites for free, now I am a professional.\" -Danish Jafri\n\n\n\n\"Your courses have given me the confidence to get out of my dead end job and apply for a full time coding job. I am very happy to say that I just finished the job interview and they gave me the job!!!\" -Dan Farnell\n\n\n\"Outstanding quality! I have come to learn that all Mosh's courses are top notch. This course is no different! The content is beautifully designed, well organized with great examples, and delivered in a clear and concise manner (with great video and audio quality)! I also loved that this course includes exercises. Fantastic stuff!\" -Roger Sæle\n\n\n\"Love it! This guy definitely knows what he's talking about. He strives to make his courses as comprehensive as possible and he teaches you several tricks along the way.\" -Jeb Watson\n\n\n\"As with all of his courses his passion and love for programming is infectious. He does a great job of intermixing theory with hard examples and cautions with practicality. If you learn better by watching and examples then reading and theory this is a must watch to move beyond the learning the syntax of c#.\" -Michael Paul\n\n\n\"Excellent course! All of Mosh's courses are very much worth taking if you really want to learn C# in a professional way. Not only does Mosh clearly describe the syntax of the language and explain the language concepts, but he also constantly emphasizes the importance of good programming practices\" -Tony Zampini\n\n\n\n\nABOUT YOUR INSTRUCTOR\nMosh (Moshfegh) Hamedani is a passionate software engineer and teacher with 13 years of experience building applications using C# (since the first release of .NET Framework in 2002). Mosh is a full-time developer and what you are going to learn in this course is the result of his day-to-day work as a hardcore programmer along with years of studying,\n\nMosh's students describe him as a passionate teacher who knows how to take a student on a series of logical steps and enriching them with a great mixed of theory and practice.\n\n\n\n\n100% MONEY-BACK GUARANTEE\n\nThis course comes with a 30-day full money-back guarantee. Take the course, go through the lectures, do the exercises, and if you're not happy, ask for a refund within 30 days. All your money back, no questions asked.\n\n\n\n\nSo do you want to take your C# skills to the next level? Then take this course now and get started!",
      "target_audience": [
        "Any C# developer who wants to master classes and interfaces",
        "Any C# programmer who wants to better understand object-oriented programming"
      ]
    },
    {
      "title": "Python Programming - From Basics to Advanced level",
      "url": "https://www.udemy.com/course/python-programming-beginner-to-advanced/",
      "bio": "This Python for beginners course will help you to become Zero to Hero. Learn Python Programming in Easy Way.",
      "objectives": [
        "Introduction to Python and Python 3",
        "Understand the basics: Data types, Loops, Conditional statements, Functions and Modules",
        "Learn object oriented programming in Python",
        "Know how to Read and Parse JSON and XML files",
        "Learn how to make your own web-scraping tool using Python"
      ],
      "course_content": {
        "Introduction & Basics": [
          "Why Python ?",
          "How to install Python and Sublime text",
          "Variable Declaration and Memory Allocation",
          "Builtin Python Datatypes",
          "Python Operators"
        ],
        "Conditional Statements and Loops": [
          "Conditional Statements | if, elif, else",
          "Iterating using For loop | Syntax",
          "Iterating using For loop | Continue | Break | enumerate",
          "Iterating using While Loop | Syntax",
          "Python Assignment - 1 | Conditional and Looping Statements"
        ],
        "Python Data Types - String, Lists, Tuple, Dictionaries": [
          "Str Data Type | Indexing | Slicing | Striding - Closer look at python data types",
          "Str Data Type | Built-in functions - Closer look at python data types",
          "List Data Type | Indexing | Slicing | Append - Extend - Insert - Closer look at",
          "List Data Type | Update and Delete Operations - Closer look at python data types",
          "Tuple Data Type - Closer look at python data types",
          "Dictionary Data Type | Storing and Accessing the data in dictionaries",
          "Dictionary Data Type | Update and Delete Operations",
          "Set Data Type | Add - Update - Delete operations",
          "Working with Math and Random Modules | Math functions | Random Number Generator"
        ],
        "Python Functions": [
          "Getting Started with User Defined Functions",
          "Parameter Passing Techniques | Positional - Default - Keyword Parameters",
          "Parameter Passing Techniques | Variable Length Positional and Keyword Parameters",
          "Writing Recursive Functions"
        ],
        "Python Modules and Packages": [
          "Creating Modules and Packages",
          "Introduction to RE Module | Regx Meta-characters",
          "RE Module | Groups"
        ],
        "Functional Programming": [
          "List Comprehension - Dict Comprehension",
          "Functional Programming | Map - Filter - Lambda",
          "Function Iterators | Generator functions",
          "Iterators and Itertools"
        ],
        "File Operation | JSON, XML Parsing": [
          "Getting started with file operations",
          "File Operations | Read - Write - Append",
          "Parsing JSON files using Python",
          "Parsing XML files using xmltodict"
        ],
        "Object Oriented Programming": [
          "Introduction to Object Oriented Programming",
          "Object Oriented Programming - Class Method and Static Method",
          "Object Oriented Programming - Inheritance"
        ],
        "Web Scraping and Database handling using Python": [
          "Web Scraping using BeautifulSoup",
          "Executing Database Queries Using Python | sqlite3 Module"
        ],
        "Python Decorators": [
          "Python Decorators",
          "Python Quiz"
        ]
      },
      "requirements": [
        "Basic problem solving skills",
        "Knowledge of any programming language will be an add-on"
      ],
      "description": "In this python course -\nWe will start with Python Installation and a few basics of Python. Along the journey,\nYou will Learn.\n1) All the Python data types and built-in methods in depth.\n2) User-defined functions, different parameter passing techniques, and object-oriented Python programming concepts.\n3) The must-know concepts in Python programming like list comprehension, map function, filter Function, generators, iterators, and itertools. 4) And also cover web scraping using beautifulSoup, multi-threading, and database access.\nOnce you reach here you can start the new journey to learn domain-specific python libraries like NumPy, Pandas, Matplotlib, Scikit-learn, TensorFlow, Keras for machine learning. Django, flask for web development. PySpark for big data processing and many more...\nBy the end of the course, you’ll be able to apply in confidence for Python programming jobs with the right skills which you will learn in this course.\n\nHere’s what a few students have told us about the Python programming course after going through it\n\"This course is so recommended to anyone who wants to learn python. It clearly teaches you several important things even experts fail to deliver. It also teaches so many different ways and how to tackle some interview questions. Very thorough and easy to understand. The instructor is amazing.\"- Aishwarya Baliga\n\"That was a very thorough and informative course. The instructor was very pleasant. Thank you!\" - Olga Abrosimova\n\"It's is explained very clearly, that a beginner can understand very well. Best teacher!!\"- Rapaka Sujana\n\"One the best course out on internet to learn python programming right from basics to advanced\" - Prithviraj Mane\n\"hi am newbee in Python. Still am in the early stages only. The tutor giving wonderful explanation and it's sounds very clear and understandable.\"- Mohamed Mohiadeen Rifay\nAnd many more.\n\nWhy a Python programming course.?\n\nPython is an interpreted, object-oriented, high-level programming language.\nPython is an open-source programming language with more than 1 million libraries and more than 100,000 active contributors.\nPython is also known for its simplicity as compared to other programming languages.\nArtificial Intelligence or Web Development or IoT or Big Data Analysis or Cloud Application Development or Automation domain you can find n number of use cases for Python.\nAnd Python is the number one language choice for machine learning, data science, and artificial intelligence. To get those high paying jobs you need expert knowledge of Python, and that’s what you will get from this course.\nPython Career Opportunities -\nPython developer: This is one of the most direct jobs that you can expect to land after acquiring this skill. What does a Python developer do? Here are a few key responsibilities:\nBuild websites\nResolve problems related to data analytics\nWrite codes that are both reusable and efficient\nOptimize data algorithms\nImplement data protection and security\nData analyst: This is a very interesting opportunity. It is especially for those who like working with huge amounts of data and finding meaning in that data. This is again a very popular job role. There are many companies that are looking for people who can work with the large sets of data that they have access to. These companies are looking for people skilled in Python because Pandas, SciPy, and other Python libraries come in very handy in accomplishing this task. No wonder more and more companies are looking for data analysts with experience in python to fill open positions.\nProduct manager: Product managers have a very important role to play when it comes to helping businesses to understand the market and why building one product will be better than building another. They study the market, research for new features related to a particular product or category and advocate the building of certain products with facts. Data is a very important part of the work they do. This is why most companies today are looking for product managers that are skilled in python.\nMachine learning engineer: If you don’t already know, then let us tell you that the job postings for this position have increased by more than 330% in the last couple of years. If you are skilled in python, you will be given preference over other candidates. A machine learning engineer builds and trains machines, programs, and other computer-based systems to apply their learned knowledge for making predictions. Python’s ability to work with data automation and algorithms makes it the ideal programming language that can be used in machine learning.\n\n\nStart your career as a python engineer and don't worry this course comes with a 30-day money-back guarantee!\nIf you are not satisfied in any way, you'll get your money back. (I’m sure you will enjoy this Python programming course)\n\nWish you the best for your Python programming journey.\n\n\nEnroll now!! See you in class.\n\nHappy learning!\nTeam Edyoda",
      "target_audience": [
        "Beginners looking to get started with Python Programming",
        "Beginners who want to be a Python Developer",
        "Beginner Python Developers curious about Web Scraping",
        "Developers who wish to master Python"
      ]
    },
    {
      "title": "JavaScript for Beginners: The Complete Course for Beginners",
      "url": "https://www.udemy.com/course/javascript-course-for-beginners-the-complete-javascript-for-beginners/",
      "bio": "The A to Z Course to Mastering JavaScript",
      "objectives": [
        "You’ll receive guidance through practical and fun code examples, critical theories about how JavaScript works behind the scenes",
        "You’ll learn how to plan application features, architect your code, debug code, and a lot of other real-world skills that you will need in your developer job",
        "You'll learn the very fundamentals of JavaScript to building modern and complex applications",
        "You'll learn all you need to know to become an experienced, self-assured, and up-to-date JavaScript developer"
      ],
      "course_content": {
        "Introduction to JavaScript": [
          "Introduction and History of JavaScript",
          "Syntax of JavaScript and overview",
          "JavaScript Implementation",
          "How to use HTML tags in JavaScript",
          "Course Materials"
        ],
        "Variables": [
          "Var in JavaScript",
          "Global and local var in JavaScript",
          "Advanced console.log"
        ],
        "Statements": [
          "If statement",
          "If else statement",
          "Condition ternary statement",
          "Switch statement",
          "If else if statement",
          "Break and continue statement",
          "Data types"
        ],
        "Operators": [
          "Arithmetic operator",
          "Assignment operator",
          "Comparison operator"
        ],
        "Popup Boxes": [
          "Alert boxes",
          "Confirm box",
          "Prompt box",
          "Functions",
          "Functions with parameters",
          "Function with return"
        ],
        "Events": [
          "Events in JavaScript"
        ],
        "Loops": [
          "While loop",
          "Do while loop",
          "For loop",
          "Nested loop"
        ],
        "Arrays": [
          "Arrays",
          "Modify and delete arrays",
          "Sort and revers methods",
          "Pop and push methods",
          "Shift and unshift method",
          "Concat and join method",
          "Slice and splice method",
          "The isArray method",
          "Indexof and lastindex method",
          "The forEach method",
          "The toString() valueOf() and fill() methods",
          "Include methods",
          "Some and every method",
          "Find and findindex method",
          "Filter method"
        ],
        "Objects and their methods": [
          "Objects",
          "Arrays objects",
          "For in loop"
        ],
        "String and its methods": [
          "String methods - Part 1",
          "String methods - Part 2",
          "String methods - Part 3"
        ]
      },
      "requirements": [
        "A basic understanding of HTML and CSS is a plus but not a must!",
        "Readiness, flexibility, and passion for learning"
      ],
      "description": "**Everything there is to know about JavaScript gift-wrapped in a single comprehensive course**\nJavaScript is the most popular programming language in the world. It powers the entire modern web. It provides millions of high-paying jobs across the globe. That's why you want to learn JavaScript too.\nWhether you want a career in front-end or back-end development - you must have a solid understanding of this universal language!\nAnd you came to the right place!\n\n\nWhy Choose This Course?\nThis course is a must-attend for four no-brainer reasons:\n• Comprehensive JavaScript Course: It's an all-in-one package that will take you from the very fundamentals of JavaScript to building modern and complex applications.\n• Modern JavaScript Made Easy: You’ll receive guidance through practical and fun code examples, critical theories about how JavaScript works behind the scenes, and beautiful and complete projects.\n• Think like a developer: You’ll learn how to plan application features, architect your code, debug code, and a lot of other real-world skills that you will need in your developer job.\n• From Beginner to Expert: Unlike other courses, this one contains beginner, intermediate, advanced, and even expert topics, so you don't have to buy any other course to master JavaScript from the ground up!\n\n\nIt is a fundamentals course that’s great for both beginners and experts alike. If you’re on the lookout for a course that starts from the basics and works up to the advanced topics, this is the best course for you.\nIt only teaches what you need to get started with JavaScript with no fluff. While this helps to keep the course pretty concise, it’s about everything you need to get started with the topic.",
      "target_audience": [
        "Anyone who wants to learn to program",
        "Web developers and designers",
        "Website owners",
        "Anyone who wants to refresh their knowledge of JavaScript",
        "Anyone who wants to create websites",
        "Anyone who wants to practice JavaScript",
        "Anyone who wants everything JavaScript in one place"
      ]
    },
    {
      "title": "Learn C# With Windows Forms and SQL Server",
      "url": "https://www.udemy.com/course/csharp6windowsforms/",
      "bio": "With a real database project!",
      "objectives": [
        "Create and runs Windows Forms applications",
        "Understand blocks of code, curly braces, comments",
        "Understand how to use string interpolation, and add new line characters",
        "Understand how to represent changing quantities with variables",
        "Understand how to use += and = operators",
        "Create and use objects like labels and their properties like Text",
        "Explain the meaning of a keyword",
        "Use several different data types like boolean, decimal, string and others",
        "Understand methods and how to use method chaining",
        "Use methods that convert values to numerical form for mathematical operations",
        "Read and operate on decimal data types",
        "Round calculation results and display formatted output",
        "Understand how to control the order of operations for mathematical symbols",
        "Control the layout of various control on a form",
        "Learn how to work with rich text boxes, and place variables in the right place to achieve certain effects",
        "Learn how to work with radio buttons, index variables and while loops that count up and count down",
        "Learn how to use foreach loops to repeat blocks of code",
        "Learn how to combine loops and if blocks to create powerful code",
        "Learn how to work with combo boxes, and the ternary operator to make decisions",
        "Learn about operators, operands, and how to combine them properly",
        "Learn how logical conditions are used to perform a variety of checks on operands",
        "Use the TryParse method to create stable applications that do not crash",
        "Use the Date time constructs to read and produce dates in a variety of formats",
        "Use various compound operators like /=, -= and the trackbar control",
        "Use date time pickers, and date time objects to make decisions",
        "Learn how to use tool tips, switch blocks, check list boxes",
        "Create methods using traditional and expression bodied member notation",
        "Understand the concept of a parameter and a return value",
        "Understand how to work with numeric up/down controls, and class files",
        "Understand how the private and public access modifiers matter and why static classes are needed",
        "Work with folder browsers, control enabling and disabling",
        "Learn how to use arrays, directories and foreach loops with arrays",
        "Understand how to work with collections and the datagridview control",
        "Work with lists to find the maximum, minimum, average and sum of list entries",
        "Work with arrays and convert arrays to lists",
        "Learn how to use the out keyword to create methods that can set multiple values so the methods are more useful",
        "Learn how to save files, and use try/catch blocks to create stable code",
        "Learn how to open files, and work with menu strips",
        "Learn how to search for, highlight and replace text",
        "Learn how to use font boxes, print preview controls and add ability to print",
        "Describe name spaces, classes, the major components of a Windows Forms project",
        "Learn how to create multiple document interface programs with multiple layouts",
        "Learn how to get and install SQL server and the management console",
        "Learn how to work with different database types in SQL server",
        "Learn how to use datagrid views, data adapters, data tables and basic SQL queries",
        "Learn how to insert records into tables",
        "Learn how different data types in SQL work",
        "Learn how to use the using statement and parameters",
        "Learn how to work with collections, binding sources, data updates",
        "Learn how to perform searches of data",
        "Learn how to save images and preview enlarged images",
        "Learn how to work with microsoft excel in code",
        "Learn how to export information from our program to excel using nested for loops",
        "Learn how to write records to a text file",
        "Learn how to export data to Microsoft word",
        "Learn how to download and save internet files using different methods"
      ],
      "course_content": {
        "How does this course work": [
          "Course overview"
        ],
        "Learning the fundamentals": [
          "Create and run the first program",
          "Display a message with a label",
          "Creating and using a single variable",
          "Describing objects with multiple data types",
          "Reading input, applying methods, and producing output",
          "Reading, converting and displaying values",
          "Doing practical math on two variables",
          "Representing unchanging quantities with constants",
          "General Visual Studio usage tips"
        ],
        "Controlling program flow": [
          "Using if/else blocks with check boxes",
          "Using if/else blocks with strings and methods",
          "Changing variable values using \"x++\" and \"++x\", Part 1",
          "Changing variable values using \"x++\" and \"++x\", Part 2",
          "Printing 1,2,3,4,5 with while loops and radio buttons, Part 1",
          "Printing 5,4,3,2,1 with while loops and radio buttons, Part 2",
          "Updating progress bars with for loops",
          "Iterating over collections with foreach loops, Part 1",
          "Iterating over collections with foreach loops, Part 2",
          "Using the ternary operator, Part 1",
          "Using the ternary operator, Part 2",
          "Creating more stable programs with TryParse"
        ],
        "Operators": [
          "Operators that evaluate and assign in place",
          "Checking two conditions with the logical and operator",
          "Checking two conditions with the logical or operator",
          "Combining logical operators to express more complex logic",
          "Making decisions with switch blocks and methods, Part 1"
        ],
        "Methods and arrays": [
          "Making decisions with switch blocks and methods, Part 2",
          "Create a static class for storing utility methods, Part 1",
          "Create a static class for storing utility methods, Part 2",
          "Folder browser project with arrays, Step 1",
          "Folder browser project with arrays, Step 2",
          "Datagrid view control project with loops, Step 1",
          "Datagrid view control project with loops, Step 2",
          "Using lists and out keyword, Part 1",
          "Using lists and out keyword, Part 2",
          "Making use of the Split method with params",
          "Using Linq methods, Part 1",
          "Using Linq methods, Part 2"
        ],
        "Creating, Saving, Reading, Previewing And Printing Files": [
          "Create the interface and add ability to save files",
          "Add the ability to read files and prevent crashes",
          "Add menu items that allow locating and highlighting a word",
          "Add features to change font, preview and print",
          "Add professional printing to printers and files",
          "Break from programming: High level overview of the many pieces of a project"
        ],
        "Database Project": [
          "Get SQL Server 2014 with management console",
          "Install SQL Server 2014",
          "Make the database to be used with the project",
          "Create the main form and the business forms",
          "Add interface components to the business contacts form",
          "Create the database model",
          "Write code to connect to the database",
          "Write code to save new records",
          "Write code to edit existing records",
          "Write code to delete existing records",
          "Write code to search for records",
          "Write code to save images, Part 1",
          "Write code to save images, Part 2",
          "Exporting the project as an installable file",
          "Add ability to export to excel, updated 8/3/2020",
          "Add ability to export records to text files",
          "Add ability to export data to Microsoft Word",
          "Making SQL Server keep the ID sequential using Identity_Cache",
          "Update to working with @ in the parameter names, 8/2/2020"
        ],
        "Miscellaneous": [
          "Download files synchronously and asynchronously",
          "Image viewer project",
          "File copier project, Part 1",
          "File copier project, Part 2"
        ],
        "Search all columns of data grid view project": [
          "Update to SQL Server 2019",
          "Setup the database in local DB",
          "Finish the mini project"
        ],
        "Using nullable data types with databases": [
          "Create a small table in SQL Server",
          "Create a small class in C#",
          "Write complete code using decimal nullables",
          "Add ability to display results in a label"
        ]
      },
      "requirements": [
        "Students must have Visual Studio Community 2015 Downloaded and Installed",
        "Please be sure to read the curriclum before enrolling so you can feel confident this course meets your needs.",
        "Please watch the free preview videos to be sure my style of presentation agrees with your learning style."
      ],
      "description": "Update\n8/3/2020: Replaced video 60 on exporting to Excel to clarify or improve some subtle technical details.\n8/8/2020: Added video 63 on how to work with the identity_cache in SQL Server to avoid identity gaps\nThank you for stopping by.\nMost important: Before enrolling, please take the time to read the course curriculum, and watch the free preview videos so you can be sure my way of presenting information is one that truly works for you. This will give you a strong indication of what to expect throughout the course. Please kindly do not enroll until you have done this. Also, please remember that I am only one person, and I cannot as one person think of everything that you might want covered. If that's the case, please send me a message and tell me what you feel should be added. Thank you.\nLessons 2-39: Introduction to C# as a review for those who are new to programming in C# or are coming from a different language.\nThis is not meant to be exhaustive but to simply prepare you for the database project.\nIt's a review of basic programming concepts.\nLessons 40-45: Text editor project to illustrate more advanced coding.\nThis project show more practical applications of C#.\nLessons 46-62: Variety of advanced techniques used in building a database project.\nHere you learn how to combine C# and SQL Server.\nThe code in these lessons gets quite sophisticated.\nMake sure you have MS Office installed for this part or you will not be able to complete the project.\nIf you're going to use the code as saved on GitHub for this part, it will be more challenging to configure than the code for the simple lessons.\nMake sure you look under lesson resources when you do this project. There are updates stored there.\nLessons 63-66: Miscellaneous small projects that show a variety of possibilities with C#.\nIt's important that you type and run all the code, as I do. To take it one step further, simply ask and answer this question: how can I make one meaningful modification to the code to produce a new effect? Consistently asking and answering this question as you watch the videos will allow you to improve your skills beyond what I show you.\nPlease note I develop the material at a relatively leisurely rate, so if I speak too slowly, please watch the videos at 1.25x.\nI'm the author of \"Beginning C# Hands-On The Core Language\" and \"C# Hands-On The Advanced Features\", both from PACKT.\nEach video is in HD, and project files can be downloaded from GitHub. The link needed is stored under lesson resources. Thank you for reading, and let's get coding!\nParts of promo video PowerPoint licensed from PresenterMedia.",
      "target_audience": [
        "This is a good course for those who want to learn C# through Windows Forms.",
        "This is not a course for those who want to learn C# through Console Applications",
        "This is a course for those interested in database projects."
      ]
    },
    {
      "title": "Essentials in JavaScript ES6 - A Fun and Clear Introduction",
      "url": "https://www.udemy.com/course/essentials-in-javascript-es6/",
      "bio": "A creative and fun course on JavaScript ES6! Has Webpack, Babel, React, and all the new syntax you need to code in ES6!",
      "objectives": [
        "Create ES6 applications from the ground up.",
        "Use the terminal/command-line application and a code editor to code.",
        "Look at ES6 code and understand keyword and concepts.",
        "Create live development servers with Webpack."
      ],
      "course_content": {
        "Introducing the Course": [
          "Introducing the Course",
          "Introducing the Instructor",
          "Presenting ES6",
          "Installing a Code Editor",
          "Setting Up With Node",
          "Getting the Source Code"
        ],
        "Setting Up ES6 Tools": [
          "Why We Need Babel",
          "How Babel Works",
          "Benefits of Webpack",
          "Set Up Project and Webpack 4",
          "Configure Webpack and Development Server",
          "Set Up Babel with Webpack",
          "Break: Babel and Webpack"
        ],
        "Coding New ES6 Syntax": [
          "Getting Help With Code",
          "Variable Scoping with Let",
          "Let's Scope 'lets'",
          "Constant-ly Scoping",
          "Can we manipulate constants?",
          "Template Literals/Strings",
          "Mastering Template Literals & ES6 Strings",
          "Coding Break: New ES6 Syntax"
        ],
        "Operating and Destructuring": [
          "Understanding the Spread Operator",
          "Butter Spread",
          "Destructuring Assignment - Arrays",
          "Destructuring the Fellowship (Array)",
          "Destructuring Assignment - Objects",
          "Destructuring Animals (Objects)",
          "Coding Break: Operating and Destructuring"
        ],
        "ES6 Functions and Methods": [
          "Arrow Functions",
          "Arrow Functions Ignoring This",
          "Archery (Arrow Functions)",
          "Helping With the Map Method",
          "Scaling Maps (Map Helper Method)",
          "Filtering in ES6",
          "Filtering For Stars (Filter Helper Method)",
          "Coding Break: Functions and Methods"
        ],
        "Modules in ES6": [
          "Exporting Values",
          "Exporting Expressions and by Default",
          "Exports and Imports (Modules)",
          "Break: Modules"
        ],
        "ES6 Classes": [
          "Presenting Object-Oriented Programming",
          "Setting Up an ES6 Class",
          "ES6 Classes",
          "Inheritance in ES6 Classes",
          "Inheriting Powers (Class Inheritance)",
          "Break: Classes"
        ],
        "Extending Upon ES6 with React": [
          "JSX in ES6",
          "ES6 Promises and More React",
          "ES6 JSX and Promises",
          "Overview: Extending Upon ES6 With React"
        ],
        "Concluding the Course": [
          "Final Remarks",
          "Bonus Lecture: In-Depth ES6 and ES7 Course!",
          "Be the First to Know about New Material and Courses!"
        ],
        "Deprecated Material": [
          "Deprecated: Setting Up With Webpack",
          "Deprecated: Setting Up With Webpack (extra notes)",
          "Deprecated: Webpack-ing Babel"
        ]
      },
      "requirements": [
        "Not much! Some basic JS will help."
      ],
      "description": "Turn yourself into a highly-demanded software engineer and developer by following this tutorial on JavaScript ES6. As one the most highly-paid languages, learning ES6 will open so many jobs and opportunities for you.\nThis course features a ton of diverse content, so you’ll learn ES6 in a stimulating, informative, and fun way.\nFilmed tutorials will get you typing code yourself. And these videos will make sure to explain the reason behind each new line and keyword.\nOptional quizzes and coding challenges reinforce key concepts. Also, coding breaks in each section let you approach the course at your own pace.\nJokes appear from time to time, especially in the breaks. So who knows, you might even slap your knee at some JavaScript humor!\nIf you’re still new, then this course gives a great intro to ES6. Or if you have a lot of experience, then you’ll find a nice overview of the language. Either way, this course if perfect for you!\nLet’s take the dive into JavaScript ES6 and start coding!",
      "target_audience": [
        "Someone who wants an intro to JavaScript ES6 and web development.",
        "An experienced developer who wants an overview of ES6."
      ]
    },
    {
      "title": "Mainframe: The Complete JCL Course from Beginner to Expert",
      "url": "https://www.udemy.com/course/the-complete-jcl-course-from-beginner-to-expert-on-mainframe/",
      "bio": "Become an expert on JCL. Jcls are used for COBOL Programs. Procedures, Utilities, GDG and basics of TSO/ISPF are covered",
      "objectives": [
        "Create your own JCL and execute it.",
        "Ultimate package of source code of at least 20 utilities and JCL.",
        "To clear the jobs interview on JCL",
        "Compile a COBOL program and run it using a JCL",
        "Understand JOB, EXEC and DD statements and code it by yourself",
        "Master the Keyword and positional parameters"
      ],
      "course_content": {
        "Introduction and Installation of Mainframe in PC": [
          "Welcome and Congratulations",
          "Understand background connection between Local Operating system and Mainframe",
          "A Note to all my students",
          "Let us connect to MVS 3.8 on our Local computer",
          "How to connect to Mainframe server using any other free emulator",
          "About Mainframe id"
        ],
        "Let us understand the JOB and JCL": [
          "What is a JOB?",
          "Overview of a JCL"
        ],
        "Let us start with the basics(optional)": [
          "Special note about this Section",
          "Some basic TSO/ISPF commands before we code a JCL (Optional)",
          "Let us create datasets (PS and PDS) - Optional"
        ],
        "Explore all the Statements in JCL": [
          "Code JOB Statement",
          "Code EXEC Statement",
          "Code DD Statement",
          "How to Execute a JCL to run a utility",
          "Lets us Create our first JCL to execute a Program",
          "SPOOL - Analyse the process where you can see the output of your program"
        ],
        "Explore all Parameters- Part 1": [
          "First thing first: JCLS coded in this course",
          "Code your CLASS Parameter in JCL",
          "Code your MSGCLASS Parameter in JCL",
          "Code your MSGLEVEL Parameter in JCL",
          "Code your TYPRUN Parameter",
          "Code your PRTY Parameter in JCL",
          "Lets code NOTIFY Parameter in JCL",
          "Code your RESTART Parameter in JCL",
          "Lets Execute a JCL with RESTART Parameter",
          "Code your PGM Parameter in JCL",
          "Code your REGION Parameter in JCL",
          "Code your TIME Parameter in JCL",
          "Lets us Code JCL with different TIME parameter and see the difference",
          "Lets explore ACCT Parameter further",
          "Lets explore PARM Parameter in your JCL",
          "Lets code a JCL with PARM Parameter to execute a COBOL Program"
        ],
        "Explore all Parameters- Part 2": [
          "Code your DSN Parameter in JCL",
          "Lets code DISP Parameter",
          "Lets Code a JCL with DISP Parameter",
          "Lets Code the SPACE Parameter",
          "UNIT and VOLUME Parameter",
          "Lets Code our DCB Parameter",
          "Lets understand the COND Parameter",
          "Lets explore various options in COND parameter further",
          "Lets code examples of COND parameter in JCL",
          "Lets explore Storage dumps in detail",
          "Lets code ADDRSPC Parameter in JCL",
          "Lets Code our SYSIN and SYSOUT Parameter"
        ],
        "Lets Explore Procedures": [
          "Lets understand PROCEDURE first",
          "Lets Code In-Stream PROCEDURE",
          "Lets Code Catalog PROCEDURE",
          "Lets Code a SYMBOLIC Parameter in JCL"
        ],
        "Explore GDG": [
          "Lets be confident on GDG",
          "Lets Create a GDG",
          "Note about LIMIT, EMPTY and NOEMPTY",
          "Lets Explore various Generations in GDG",
          "Alter the properties of a GDG",
          "Lets DELETE a GDG"
        ],
        "Lets explore the Libraries": [
          "Lets Explore JOBLIB Library",
          "Lets Explore STEPLIB Library",
          "Lets Explore JCLLIB Library",
          "Lets Explore COPYLIB Library"
        ],
        "Bonus - How to install the ZOS operating system on Hercules": [
          "A special note about ZOS",
          "Let us Connect to Mainframe in our local computer using Hercules",
          "Bonus Lecture: Let us stay connected"
        ]
      },
      "requirements": [
        "You should have a PC with internet connection",
        "If you have a mainframe id then it will be beneficial but it is not necessary. You can also use the free softwares which has some limitations",
        "If you are aware of TSO commands then it will be beneficial, some basic TSO commands are also covered in this course.",
        "Basics of TSO/ISPF is required. If you do not know TSO/ISPF, i recommend you to enroll for my course on \"Mainframe: The Complete TSO/ISPF Course from Beginner to Expert\" first and then take this course."
      ],
      "description": "\"Welcome to the Most In-Depth and Quality Content Course \"Mainframe: The Complete JCL Course from Beginner to Expert\" from a Real Expert with more than 15 years of Experience.\"\nThe Course is full of quality content that you will not find anywhere on the Internet\nLearn from an Expert who has a passion for training\nThe Course covers Real Training with the aim to provide knowledge that is similar to corporate training.\nYou can download all the JCL which is used in this course.\nSome of the Reviews from my students!!!!\n\"Sandeep, I really enjoyed the training offered: - TSO - JCL - Cobol Congratulations on the work, I have recommended the courses to several colleagues who are also starting on mainframes. Thank you\"\n\"Excellent classes. The instructor makes the session interactive and involves many practical examples and theories. The course provides in-depth knowledge of JCL and its related topic. I strongly recommend this course who is looking for serious learning of mainframe and JCL. Great Job!!!\"\nJoin this course which is the best seller JCL Course on UDEMY. I will Code a lot of JCL along the way!!!\n\n\"This the Best Seller Course on Udemy\"\n“There’s a reason this course is a bestseller and highest rated on Udemy...”\nWant to understand JCL with no previous coding experience and are confused about joining which course on JCL to understand from the basics to the advanced level?\nYou have come to the right place. This is the most complete and in-depth Course on JCL considered in UDEMY. If you do not believe me, Please have a look at the Course content carefully and ask a few questions from yourself.\nDoes a real-time expert teach the Course? I have more than 20  years of experience as an Instructor and more than 10 years of experience on Mainframe.I firmly believe that if an Instructor does not have good experience, he/she will flood the course with poor content.\nIs the Course content clear and Precise? I bet you will not get better Course content than this. Please have a look at all the courses and choose wisely.\nWill the Course be In-depth? The Course covers In-Depth knowledge of JCL. The amount of Knowledge that is covered in this course is great.\nHow is the quality of the Content? In Mainframes, there is a lot of low-quality content which is spread throughout the internet. Be wise in choosing the course which has the best content and is presented in an excellent way to provide maximum output.\nThe Course assumes no prior knowledge of Mainframes and teaches you from absolute beginners.\nMost of my students personally message me about their success with this Course.\nOnce you Enroll for this Course, you get a lifetime access to this course and you will get all the future updates. you also get a Certification of Completion once you complete the Course.\n\n\nCaptions\nThe Course has the most accurate Captions. Have a look.\nDo you want to start on Mainframe but have no experience with Mainframes?\nIf you have some prior knowledge of Mainframes or if are a complete fresher, you are at the right place. The Course teaches you to complete JCL right from Scratch to an Advanced level. The course goes one level up and provides all the necessary information to master JCL.\nWhat makes this Course unique and a Best Seller?\nWell, the course has everything you need to master JCL. If you want to build a career in Mainframe, JCL is a 'MUST TO HAVE' skill and this is the starting point of Mainframe.\nThere’s no risk involved in taking this Course!\nThis course comes with a 30-day money-back guarantee. I am sure that this is the best course on JCL and you can compare the content which is provided in this course against any JCL Course I guarantee you that you will not get such good structured content anywhere. Still, if you are not completely satisfied with the course, please let us know and we will provide a refund without asking any questions.\nWhat if you are stuck?\nI personally answer all the questions which are asked here. If you are stuck anywhere, ask a question or you can message me directly and I will answer all your doubts.\nAre you getting updated content?\nYes, I keep updating the content always to make sure, i provide all the information to my students.\nOnce you enroll for this course -\n\nYou will create multiple JCLs(Job Control Language)\nYou will be able to compile a COBOL program using a JCL.\nYou will be able to execute a COBOL program through JCL.\nYou will master the 3 statements in JCL.\nYou will understand how to check the status of JOBS in SPOOL(SDSF).\nYou will master more than 20 keyword and positional parameters\nYou will get the source code of more than 20 important utilities.\nNote:\nTo understand the complete Mainframe, a professional must have JCL skills on the Mainframe server",
      "target_audience": [
        "Anyone who wants to master JCL can take up this course. This teaches JCL from Scratch to Advanced level",
        "If you have knowledge on Mainframe then it will be beneficial but if you don't know what are Mainframe, i have explained about mainframes at the beginning of the course.",
        "Basic TSO/ISPF commands will be useful but is not necessary",
        "JCL is must to have skills before you start learning COBOL."
      ]
    },
    {
      "title": "Mastering Java Reactive Programming [ From Scratch ]",
      "url": "https://www.udemy.com/course/complete-java-reactive-programming/",
      "bio": "Unlock the Power of Reactive Programming, Asynchronous and Non-Blocking Programming using Reactor",
      "objectives": [
        "Master Reactive Programming: Learn how to build modern, scalable, and responsive applications using reactive techniques.",
        "Escape Blocking I/O: Write non-blocking code for efficient resource utilization.",
        "Asynchronous Programming: Learn how to perform operations without blocking threads.",
        "Operator Mastery: Discover the power of various operators for transforming, filtering, and combining data streams.",
        "Backpressure Control: Understand how to manage backpressure to prevent overwhelming your system.",
        "Threading and Schedulers: Optimize thread usage for efficient execution.",
        "Sinks and Publishers: Explore different mechanisms for delivering and receiving data.",
        "Advanced Techniques: Learn about concatenation, merging, zipping, and other advanced operators.",
        "Error Handling and Retry Mechanisms: Build robust systems that can recover from failures.",
        "Testing with Step Verifier: Write unit tests specifically for reactive code.",
        "Declarative Programming: Express your business logic in a concise and declarative manner.",
        "Context Management: Manage application context within reactive streams.",
        "Reactive Hooks and Callbacks: Leverage additional control mechanisms for reactive operations.",
        "Parallel Stream Processing: Utilize multicore processors for faster execution.",
        "Gain a Competitive Edge: Acquire in-demand skills that are highly sought after in the modern software development landscape.",
        "Deliver Responsive User Experiences: React swiftly to data changes and provide a smooth user experience.",
        "Enhance Scalability: Create applications that can handle increasing loads with ease."
      ],
      "course_content": {},
      "requirements": [
        "Knowledge on Java 8 or above",
        "It is a Hands-On course. You should be willing to write code!",
        "Curiosity and Patience to Learn a Complex Topic",
        "Comfortable with Indian Accent"
      ],
      "description": "Unleash the Power of Reactive Programming & enable stream based communication in your Microservices architecture.\nIt is a Hands-On Course. You should be willing to write code.\nThis course equips you with the skills to build modern, scalable, and responsive applications. Master the art of handling asynchronous data streams with Reactive Programming, a game-changing development paradigm.\nKey Benefits:\nBuild Efficient Systems: Escape the limitations of blocking operations and write code that's non-blocking and resource-saving.\nEnhance Scalability: Create applications that can handle increasing loads with ease.\nEmbrace Asynchronous Operations: React swiftly to data changes and deliver a smooth user experience.\nCraft Resilient Code: Develop robust systems that can handle errors gracefully and recover quickly.\nUnlock Advanced Techniques: Learn powerful operators for manipulating data streams, managing backpressure, and more.\nCourse Highlights:\nReactive Programming Fundamentals: Grasp core concepts, publishers (Mono & Flux), and understand hot vs. cold streams.\nAsynchronous Mastery: Perform operations without blocking threads, freeing up resources for other tasks.\nOperator Exploration: Discover the power of various operators for transforming, filtering, and combining data streams.\nBackpressure Control: Learn strategies to prevent overwhelming your system with data.\nThreading and Schedulers: Optimize thread usage and ensure efficient execution.\nSinks: Unicast, Multicast, Replay: Understand different mechanisms for delivering data to subscribers.\nAdvanced Techniques: Explore concatenation, merging, zipping, combination operators, and more.\nBatching with Buffer, Window & GroupBy: Process data in chunks for efficient handling.\nError Handling & Retry Mechanisms: Build robust systems that can recover from failures.\nTesting with Step Verifier: Write unit tests specifically for reactive code.\nDeclarative Programming: Express your business logic clearly and concisely.\nContext Management: Manage application context within reactive streams.\nReactive Hooks & Callbacks: Leverage additional control mechanisms for reactive operations.\nParallel Stream Processing: Unlock the potential of multicore processors for faster execution.\nBy the end of this course, you'll be able to:\nConfidently write reactive applications that are:\nHighly Scalable: Handle increasing workloads efficiently.\nResilient: Recover from errors gracefully.\nResponsive: Deliver a smooth user experience.\nThis course provides a solid foundation for anyone seeking to excel in the world of reactive programming.",
      "target_audience": [
        "Any Java Developer / Architect who is interested in Reactive Programming",
        "Anyone who is using Spring Boot / WebFlux"
      ]
    },
    {
      "title": "Project Development Using JAVA for Beginners - 2025",
      "url": "https://www.udemy.com/course/project-development-using-java-for-beginners-2020/",
      "bio": "Learn Java from scratch and become Software Engineer.",
      "objectives": [
        "You will Understand the BEST PRACTICES in Writing High Quality Java Code",
        "You will Learn to Write AWESOME Object Oriented Programs with Java",
        "You will learn ADVANCED Object Oriented Programming Concepts - Abstraction, Inheritance, Encapsulation and Polymorphism",
        "You will learn Basics of Functional Programming with Java",
        "You will learn the Basics of Object Oriented Programming - Interfaces, Inheritance, Abstract Class and Constructors",
        "You will Acquire ALL the SKILLS to demonstrate an EXPERTISE with Java Programming in Your Job Interviews",
        "You will Solve a Wide Range of Hands-on Programming EXERCISES with Java"
      ],
      "course_content": {
        "Introduction": [
          "End-to-End execution flow of Web-Application",
          "History of java"
        ],
        "Types of Applications": [
          "Introduction of Types of Applications",
          "Brief explanation on Types of Applications",
          "Introduction of MVC Architecture",
          "Step-By-Step to create MVC Architecture based applications"
        ],
        "Technologies combination used in project development": [
          "Layers in MVC architecture",
          "Technologies combination used in project development",
          "RBS and home page"
        ],
        "Java concepts": [
          "Java Concepts",
          "Terminologies and platform dependent and independent languages",
          "Installation of java in Computer"
        ],
        "Stepping into programming": [
          "Naming Conventions in java programs"
        ],
        "Comments,Identifiers and Keywords in Java": [
          "Explanation of comments in Java",
          "Explanation of Identifiers in Java",
          "Explanation of keywords in Java"
        ],
        "Working with Editplus Software": [
          "Explanation and Advantages of Editplus software",
          "Installation and setup of Editplus"
        ],
        "Java Basic Programming Elements": [
          "Explanation of Java Basic elements",
          "Explanation of Java Basic elements part-2"
        ],
        "Essential statements of java": [
          "Introduction to Essential statements in java",
          "Class in Java",
          "Main method in Java",
          "System.out.println() in java"
        ],
        "Datatypes in java": [
          "Need of Datatype in Java",
          "Definition of Datatype in Java",
          "Types of Datatypes in Java",
          "Types of Datatypes part-2",
          "Size of Datatypes in Java",
          "Internal memory creation of Datatype in java",
          "Limitations of Datatypes in Java",
          "Arrays in Java",
          "Arrays Limitations in Java",
          "Class in Java",
          "Example Class in Java",
          "Referenced Datatype calculation in Java",
          "Datatype Range calculation in Java"
        ]
      },
      "requirements": [
        "You have ZERO Programming Experience and Want to Learn Java",
        "You have an attitude to learn while having fun :)"
      ],
      "description": "Would you like to learn real world programming skills that will help you get your first java programming job?\nJava is one of the most popular programming languages used to create Web applications and platforms. It was designed for flexibility, allowing developers to write code that would run on any machine.\nSo it’s your time now to take advantage of a loads of jobs and freelance opportunities that are available for java programmers out there.\nThis course is provided by Oracle Certified professionals with many years’ experience in java programming\nThe course is very comprehensive and will be constantly updated. Once you have gone through this course you will be able to understand Java 12 features very easily. So, this course covers each topic in details and is focused to break down topics with simplified examples. Thus, it is for anyone who wants to learn java programming and no previous programming experience is required.\nThe object-oriented programming language comes up with a much-celebrated principle of Write Once Run Anywhere that allows the Java code to be executed on other platforms, that supports JAVA, without doing recompilation. The language is widely used in Android development along with Web Applications, Desktop Applications, Scientific Applications, etc. Also, top-notch companies like Adobe, Amazon, Flipkart, and many others are using JAVA and offering ravishing career opportunities to Java developers. Its significant demand in the tech world, huge community support,  several enriching features like multithreading, automatic memory allocation & garbage collection, platform independency, etc. ensures that JAVA will provide you with a lot of worthwhile career opportunities in the upcoming years as well.\nEnroll in this course now because its your time to get these highly paid and very on-demand skills.",
      "target_audience": [
        "You are a Beginner at Java Programming and want to Learn to write Great Java Programs",
        "You want to learn the Basics of Object Oriented Programming with Java",
        "You want to learn the Basics of Functional Programming with Java",
        "You have ZERO programming experience and want to learn Java Programming"
      ]
    },
    {
      "title": "Python Bootcamp: Learn, Code, Build",
      "url": "https://www.udemy.com/course/pythontutorial/",
      "bio": "Learn Python from SCRATCH and automate Excel, Databases, Testing, Networking or Data Analysis. Full Python apps inside!",
      "objectives": [
        "You will GAIN CONFIDENCE when asking your manager for a RAISE or going to any Junior or Intermediate Python Developer INTERVIEW.",
        "You will ultimately GAIN REAL-LIFE SKILLS: Excel Automation, Database Automation, Data Analysis etc. No silly little games, no useless apps, no filler content!",
        "You will MASTER all the Python key concepts starting FROM SCRATCH. No prior Python knowledge is required.",
        "You will get FREE NEW VIDEO LECTURES and RESOURCES regularly and learn the latest Python 3 concepts and use cases.",
        "You will have MY FULL SUPPORT for every course-related question or suggestion, plus the help of the community.",
        "You will have LIFETIME ACCESS TO COURSE UPDATES and new content, anytime, anywhere, on any device.",
        "You will be able to apply for and get involved in most Python 3 PROJECTS.",
        "You will be able to work with the Python interpreter and Python scripts.",
        "You will be able to work with Python strings and string methods.",
        "You will be able to work with Python lists, list methods and ranges.",
        "You will be able to work with Python sets, set methods and frozensets.",
        "You will be able to work with Python tuples and tuple methods.",
        "You will be able to work with Python dictionaries and dictionary methods.",
        "You will be able to work with Python control flow structures (if, for, while, break, continue, pass, exceptions, try-except-else-finally blocks).",
        "You will learn everything about properly handling syntax errors and exceptions in Python 3.",
        "You will be able to work with Python functions, namespaces and modules.",
        "You will be able to work with Python file operations: create, read, write, append, truncate, close.",
        "You will be able to work with Python patterns and regular expressions.",
        "You will be able to work with Python classes, objects and inheritance.",
        "You will be able to work with advanced Python tools (comprehensions, lambda functions, threading basics, iterators, generators, decorators).",
        "You will be able to apply the Python 3 knowledge you get from this course in quizzes, coding exercises and real-life scenarios.",
        "You will build a scientific, interactive calculator with a user menu and advanced math operations available.",
        "You will be able to work with Microsoft Excel files and automate boring spreadsheet-related tasks using Python 3.",
        "You will be able to work with PostgreSQL databases and automate boring database-related tasks using Python 3.",
        "You will be able to work with network devices (switches/routers) and automate networking tasks using SSH.",
        "You will be able to work with Pandas to perform data analysis operations on TXT, CSV, JSON, XLSX, HTML files and SQL databases.",
        "You will be able to work with Bokeh to perform data visualization and generate line / bar / pie / range / stocks / candlesticks charts.",
        "You will be able to work with Pytest to perform unit test automation, also learning advanced concepts like fixture functions or markers.",
        "You will be able work with Requests, Pandas and BeautifulSoup to get, load and parse webpage content, perform web scraping tasks and build an Excel database.",
        "You will learn all the basics of OOP, including classes, instances, constructors, attributes.",
        "You will learn the core concept of inheritance, including multi-level and multiple inheritance.",
        "You will learn to properly achieve polymorphism and how to use the method overriding concept.",
        "You will dive into advanced concepts, like overloading, magic methods, abstract classes/methods.",
        "You are going to build the necessary environment for using Django and developing web projects.",
        "You are going to create and configure your first Django project - a blog application.",
        "You are going to learn necessary concepts such as URLs, views, templates, forms, models.",
        "You are going to access the admin section provided by Django and create a user to login into it.",
        "You are going to learn to create simple tests and run them from the command line.",
        "You are going to learn how to push the code to git (Gitlab), a version control system.",
        "You are going to build the necessary environment for using Django Rest Framework and developing a REST API.",
        "You are going to learn and practice concepts such as pre-commit hooks, TDD, GitHub actions and running tests.",
        "You are going to learn and practice concepts such as models, APIView, serializers, generic views and filters.",
        "You are going to learn how to implement permissions and authentication with permission classes and API keys.",
        "You are going to learn to create simple tests and run them from the command line.",
        "You are going to learn how to push the code to a remote repository, on GitHub.",
        "You are going to build the necessary environment for using Django, Graphene and developing a GraphQL API.",
        "You are going to build a simple social media GraphQL API using Python 3, Django 3 and Graphene.",
        "You are going to learn the benefits of a GraphQL API versus a RESTful API.",
        "You are going to learn how to integrate GraphQL inside the Django ecosystem.",
        "You will use Python 3 for connecting via SSH to any network device and reading/writing configuration from multiple devices simultaneously.",
        "You will use Python 3 for building a subnet calculator, checking IP and Subnet Mask validity, and performing binary conversions.",
        "You will use Python 3 for building a basic packet sniffer, capturing and analyzing network packets (ARP, ICMP, BOOTP) and saving packet data to a log file.",
        "You will learn how to use Python, SSH, Netmiko and Linux for config file management and e-mail alerts.",
        "You will use Python 3 and specialized modules and commands to connect to and query network devices via an intermediary, remote Linux server.",
        "You will learn the most important methods and objects from Python's regular expression library.",
        "You will learn about metacharacters and special sequences from Python's regular expression library.",
        "You will learn about the extension notations and assertions from Python's regular expression library.",
        "You will build 5 small real-world projects using Python's advanced regular expression concepts.",
        "You will build a small real-world project for validating user account details using regular expressions.",
        "You will use the power of Python's regular expressions to filter employee data in Excel files.",
        "You will use Pandas and the power of Python's regular expressions to filter HTML page data.",
        "Additionally, you will also learn how to use a few other useful Python modules that might come in handy.",
        "You will get a Python 3 CHEAT SHEET filled with key concepts and examples.",
        "You will get a Python 3 200+ PAGES E-BOOK for free, to keep learning offline.",
        "You will learn 10 ways to earn money and build a portfolio with your Python skills.",
        "You will get over 500 practice activities to solidify your knowledge - quizzes and exercises."
      ],
      "course_content": {},
      "requirements": [
        "No prior Python knowledge is required. You will learn everything from scratch!",
        "You just need any kind of laptop or PC and a decent Internet connection. That's it!",
        "Preferably, you should have a Windows OS to work on, to be fully synchronized with the course content, although Linux or MacOS will work just as fine."
      ],
      "description": "Save TIME and MONEY by enrolling in a 100% hands-on Python course.\nLearn to write YOUR OWN Python scripts to AUTOMATE various tasks.\nYou might even get a RAISE or a BETTER JOB with these new skills.\n\n\nProbably the most PRACTICAL Python programming course on Udemy.\nNo slides, no boring theory, no rambling, no chitchat. Just hands-on CODING!\nNotebooks, code samples & 500+ PRACTICE ITEMS such as quizzes & exercises.\nDownloadable Python 3 CHEAT SHEET and 200+ pages PDF E-book are included.\nGet HUNDREDS of notebooks, downloadable CODE SAMPLES and additional resources.\nLearn REAL-LIFE skills: Excel / Database / Data Analysis / Network Automation & many more.\nUdemy Bestselling Instructor since 2015, with THOUSANDS of 5* REVIEWS.\nOver 100,000 SATISFIED STUDENTS across several e-learning platforms.\nCERTIFICATE of COMPLETION is also included at the end of the course.\n\n\nLatest course UPDATES in 2024!\nEnabling a Key-Feature in IDLE (Section 2)\nTwo New String Methods Introduced in Python 3.9 (Section 3)\nUseful Note on the Replace() String Method (Section 3)\nUpdate on F-strings in Python 3.8 (Section 3)\nSyntactic Formalization of F-strings in Python 3.12 (Section 3)\nDictionaries are Iterable in Reversed Order with Python 3.8 (Section 9)\nDictionary Merge & Update Operators in Python 3.9 (Section 9)\nThe New Bit_Count() Method Introduced in Python 3.10 (Section 9)\nException Notes with add_note() in Python 3.11 (Section 10)\nImproved Error & Exception Messages in Python 3.10/3.11 (Section 11)\nReturning Multiple Values from a Function (Section 12)\nUpdate on Positional-Only Parameters in Python 3.8 (Section 12)\nUpdate on \\N{name} Escapes in Python 3.8 (Section 14)\nFixing the REGISTRATION EMAIL Error at Arista Sign-Up (Section 22)\n\n\n\"This Python course is excellent!! I have taken a few Python courses previously from Udemy, this course is the best so far. The lectures are  kept short but contain a lot of info on the topic. I really like the  short quizzes to make sure you listened to the important points made in  the lectures. The best feature is the interactive coding to give you  immediate hands-on with the material to ensure you understood what you  thought you understood. Great Course!\" by Richard Mata\n\n\nWhat others have to say about my courses?\n\n\n\"What an incredible value and learning experience!\" by Sean A.\n\"Excellent material. Kudos to a great instructor with a vast level of creativity.\" by Anthony W.\n\"The instructor is an excellent professional, skillful and engaging.\" by Georgios T.\n\"I can say this man is going on smoothly and perfectly, explaining in the most empirical way.\" by Kolapo A.\n\n\nWhy would you take this course?\n\n\nDo you want to become a Python Developer from scratch, in less than 40 hours, without having to spend a lot of money on books and boring theoretical courses?\nDo you often hear things like \"You should learn Python!\" or \"Just write a Python script for that!\" or even \"Python is so easy to learn!\"? Python here, Python there, Python everywhere?\nAre you looking to apply your Python knowledge to specialize yourself in various areas of expertise, such as Databases, Excel, Web Development, Network Automation, Data Analysis and Visualization, Unit Testing etc.?\n\n\n\"As a Python beginner, I find this course is concise, easy to understand  and structured. Also, Mihai responses to my question during the course  promptly. I highly recommend this training course.\" by Johnny Wang\n\n\nWhat's this course all about?\n\n\nPython programming course aimed at anyone having little or no experience in coding and a great desire to start learning Python from SCRATCH. This hands-on training takes you from \"Hello World!\" to advanced Python topics in an organized and efficient way.\n\nFirst, you will learn and practice every Python key concept, which is explained in one or more video lectures, usually followed by quizzes and/or coding exercises.\nEach video is filled with relevant examples, created in a learn-by-doing fashion and the notebooks, quizzes and coding exercises will help you consolidate the main ideas behind each Python topic.\nAfter laying the foundation, you will start exploring some advanced Python topics, thus quickly growing your skills from ZERO to BEGINNER to INTERMEDIATE to ADVANCED to SUPERHERO level.\nYour first project will teach you how to build a scientific calculator in Python, having a basic user menu and performing both simple and intermediate math operations: addition, subtraction, multiplication, division, modulo, raising to a power, square root, logarithm, as well as trigonometric functions like sin, cos and tan.\nFinally, you will gain some real-life skills that you can use at most programming and IT-related jobs: Excel Automation, Database Automation, Data Analysis Automation, Test Automation, Web Scraping, Web App Development and Network Automation, among others, using Python.\nYou will also be able to download printable cheat sheets to have every Python concept at hand whenever you need it, as well as a 200+ pages Python E-book that can help you continue studying whenever you don't feel like watching videos or solving coding exercises. What more can you ask for?\n\n\n\n\n\"I am really enjoying this course thus far. 10-12 minutes into the course  and I've already written my first line of Python code, which I think  it's pretty cool, since I've never programmed before. I'm planning to finish this course and apply for a junior programmer, part-time job. Thanks for this training!\" by Andrei Vasilescu\n\n\nWhat are the steps you're going to take from ZERO to SUPERHERO Level in Python?\n\n\nIntroduction - What's This Course All About?\nZero Level: Python 3 - Basics\nBeginner Level: Python - Strings\nBeginner Level: Python - Numbers and Booleans\nBeginner Level: Python - Lists\nBeginner Level: Python - Sets\nBeginner Level: Python - Tuples\nBeginner Level: Python - Ranges\nBeginner Level: Python - Dictionaries\nIntermediate Level: Python - Conditionals, Loops and Exceptions\nIntermediate Level: Python - Handling Errors and Exceptions in Python\nIntermediate Level: Python - Functions and Modules\nIntermediate Level: Python - File Operations\nAdvanced Level: Python - Regular Expressions\nAdvanced Level: Python - Classes and Objects\nAdvanced Level: Python - Other Advanced Concepts\nGeneral Recap: Python - Cheat Sheet and 200+ Pages E-Book\nSolidify Your Python Skills: 500 Practice Items\nProject: Python - Build a Scientific Calculator with Python\nSuperhero Level: Automate Excel Tasks with Python\nSuperhero Level: Automate Database Tasks with Python\nSuperhero Level: Automate Network Tasks with Python\nSuperhero Level: Building an Interactive Subnet Calculator\nSuperhero Level: Building a Basic Network Packet Sniffer\nSuperhero Level: Config File Management and E-mail Notifications\nSuperhero Level: Running Python Code via Remote Servers\nSuperhero Level: Automate Data Analysis Tasks with Python\nSuperhero Level: Data Visualization with Bokeh and Python\nSuperhero Level: Automate Unit Testing with Python\nSuperhero Level: Automate Web Scraping with Python\nSuperhero Level: Diving into Object-Oriented Programming\nSuperhero Level: Build Your First Web Project with Django & Python\nSuperhero Level: Build an Expense Tracker REST API From Scratch\nSuperhero Level: Build a GraphQL API with Django and Graphene\nSuperhero Level: Advanced RegEx - Methods and Objects\nSuperhero Level: Advanced RegEx - Metacharacters and Special Sequences\nSuperhero Level: Advanced RegEx - Extension Notations and Assertions\nSuperhero Level: Small Real-Life Projects using Regex Concepts\nSuperhero Level: PROJECT - Validating User Account Details\nSuperhero Level: RegEx in Excel Files - Filtering Employee Data\nSuperhero Level: RegEx in Data Analysis: Filtering HTML Page Data\n[EXTRA] Useful Python Modules and Tools\n[EXTRA] 10 Ways to Earn Money and Build a Portfolio with Your Python Skills\nFinal Section\n\n\n\"Very thorough course. Includes plenty of details and examples without being boring. Explanations are given at a very practical level.\" by Gary Scarr\n\n\nImportant information before you enroll!\n\n\nDon't forget you are covered by a 30-day money back guarantee, full refund, no questions asked.\nOnce enrolled, you have unlimited, 24/7, lifetime access to the course.\nYou will have instant and free access to any updates I'll add to the course.\nYou will benefit from my full support regarding any question you might have.\nCheck out the promo video at the top of this page and some of the free preview videos before enrolling!\n\n\n\"This is a real nice course and very unique compared to other courses available on Udemy. The unique thing about this is automation projects. The  best way to learn language and concepts is by applying them to  practical scenarios and that is what this course is all about.\" by Vinay Gupta\n\n\nI strongly encourage you to learn Python, an amazingly beginner-friendly programming language.\nLet's get started! Enroll now and I'll see you in the first lecture!",
      "target_audience": [
        "Anyone who wants to make the right choice when starting to learn programming.",
        "Test Engineers, Test Automation Engineers, Quality Assurance Engineers and Analysts.",
        "Network Engineers, Database Administrators, System Engineers, IT Engineers, Data Entry Operators.",
        "Any kind of IT geeks who wish to learn the Python 3 programming language from scratch.",
        "This course is for beginners only and should not be attended by senior developers."
      ]
    },
    {
      "title": "Coding for Beginners 1: You Can Learn to Code!",
      "url": "https://www.udemy.com/course/coding-for-beginners-you-can-learn-to-code/",
      "bio": "The perfect course for complete beginners. Friendly - No experience required. Go from scratch to coding a real app!",
      "objectives": [
        "Experiment confidently, and have fun with coding.",
        "Understand the common, foundation level concepts that apply in most programming languages before you go on to learn the syntax.",
        "Move into learning a dedicated programming language, such as Scratch, Python, JavaScript, Ruby, C# or Go (to name just a few!)",
        "Open up a whole new world of digital creativity!"
      ],
      "course_content": {},
      "requirements": [
        "No prior knowledge of coding or computer programming is required. This is a course aimed at the complete beginner :)",
        "To complete the interactive elements of the course, you'll need a desktop or laptop computer with an internet connection.",
        "During the course, you're going to install Python onto your computer. We'll be downloading it from the official source (it's free), and don't worry, we'll walk you through it - but you will need permission to install a downloaded program on your computer.",
        "We'll also be using an online program called Scratch. It's also free, and you don't need to know anything about Scratch before we begin, we'll walk you through it."
      ],
      "description": "Become a Coder, have fun, and learn one of the most employer requested skills for 2025\n\n\nThe first course in the widely acclaimed 'Coding for Beginners' series\nOver 100k happy beginners taught, many of whom now work in coding\nSo beginner friendly, this course has been selected as the syllabus to train brand new professional Software Engineers from scratch\nJust updated with a major new course update for Scratch 3 (the latest version of Scratch)\n\n\nHave you ever wondered if you could code? Well.. you can. In fact; enrol now and you could have written your first lines of Python code before your next drinks break!\n\n\nCoding for Beginners is  the most beginner friendly coding course on Udemy. It doesn't matter if you've never even seen a line of computer code before - if you're interested, or just wondering if you could learn to code, then this is the course for you.\n\n\n\" - Take this course before taking any others\"\n\n\nThis course is perfect for students who are thinking about learning a specific coding language, but don't want to get dropped in at the deep end. Coding for Beginners has been specifically designed as a generic, foundation level course, to introduce you to many of the common coding concepts that you'll go on to use in whichever programming language you choose to learn next - giving you a real head start before you start mastering a dedicated language, and it's syntax.\n\n\nStart here: With over 30 lectures and more than 7 hours of video, this comprehensive course will teach you the very basics of computer coding, also called programming, from the ground up. Starting with foundation level theory, and moving into pseudo coding, and practical exercises - Coding for Beginners includes video lectures, screencasts, tests, assignments, and a beginner level project - building a simple app in both Scratch and Python.\n\n\nGet ready to learn:\n\n\nCoding is something we already do everyday\nCoding in programming languages is something you can achieve\nIf you can read and write, you can code!\n\n\nWe'll answer questions like:\n\n\nWhat is code, and why do we need it?\nWhy are there so many coding languages?\nWhat's the difference between coding and programming?\nWhat's the difference between front end and back end coding?\nIs coding a science or an art?\n\n\nAnd we'll introduce you to common coding concepts like:\n\n\nHow code runs\nBugs\nPseudo code\nDecomposing\nCommenting\nCommon data types\nArithmetic & operators\nLoops\nControl flow\nStoring data\nLists\nFunctions\n\n\nGet ready to code your first app\n\n\nPlan the app in pseudo code\nCode a proof of concept in Scratch\nCode a Minimum Viable Product in Python\nWe'll help you get setup in both Scratch and Python for the first time, and help you every step of the way. By the end of the course you'll be confident enough to keep coding in Scratch and Python on your own\nAs you transition from Scratch into Python, we'll help you to see that moving from a highly visual coding language (perfect to get started), into a much more powerful text based language (used by companies like LinkedIn and Google), isn't scary at all! In fact, we think you'll love it\n\n\nMove on from this course to discover the second course in the 'Coding for Beginners' series:- Coding for Beginners 2 - Get Started With Web Development\n\n\nCoding for Beginners has been created by Applause Interactive in the UK, and we believe in quality learning. Rest assured, this course comes with a 30 day money back guarantee. If you are not satisfied in any way, you'll get your money back.\n\n\nSo what are you waiting for?\n\n\nLet's unleash your creative potential, have some fun, and build some valuable digital skills for work and life. See you inside!",
      "target_audience": [
        "Write your first ever lines of code!",
        "Take this course if you are completely new to computer coding, and curious about what it is, how it works, and whether you could enjoy coding as a hobby or work skill.",
        "This course is not suitable for experienced programmers, who already understand the fundamentals of computer coding."
      ]
    },
    {
      "title": "Microsoft SQL from A to Z",
      "url": "https://www.udemy.com/course/microsoft-sql-from-a-to-z/",
      "bio": "The Complete Guide to SQL Querying",
      "objectives": [
        "Complete literal SELECT statements.",
        "Complete basic SELECT statements querying against a single table",
        "Filter data using the WHERE clause",
        "Sort data using the ORDER BY clause",
        "Learn about database design and normalization",
        "Using joins, return columns from multiple tables in the same query",
        "Understand the difference between the INNER JOIN, LEFT/RIGHT OUTER JOIN, and FULL OUTER JOIN",
        "Complete SQL statements that use aggregate functions",
        "Group data together using the GROUP BY clause",
        "Filter groups of data using the HAVING clause",
        "Use built-in SQL Server functions",
        "Understand SQL Server Data Types and Type Casting",
        "Work with Table Expressions: Derived Tables and CTEs",
        "Use CASE Statements",
        "Use Subqueries"
      ],
      "course_content": {
        "Introduction to SELECT Statements": [
          "START HERE: Introduction Lecture",
          "ALSO START HERE: T-SQL Training Guide",
          "Installing SQL Server Written Instructions",
          "How to Install Microsoft SQL Server Express",
          "How to Attach the AdventureWorks Sample Database",
          "Introduction to T-SQL and Database Concepts",
          "Literal SELECT Statements - Part 1",
          "Literal SELECT Statements - Part 2",
          "Literal SELECT Statement Practice Problems",
          "Basic SELECT Statements - Part 1",
          "Basic SELECT Statements - Part 2",
          "Basic SELECT Statements - Part 3",
          "Basic SELECT Statement Practice Problems"
        ],
        "Filtering Data with the WHERE Clause": [
          "Using the WHERE Clause - Part 1",
          "Using the WHERE Clause - Part 2",
          "Using the WHERE Clause - Part 3",
          "Using the WHERE Clause - Part 4",
          "Using the WHERE Clause - Part 5",
          "Using the WHERE Clause - Part 6",
          "Using the WHERE Clause - Part 7",
          "WHERE Clause Practice Problems"
        ],
        "Sorting Data with the ORDER BY Clause": [
          "Sorting with the ORDER BY Clause - Part 1",
          "Sorting with the ORDER BY Clause - Part 2",
          "ORDER BY Clause Practice Problems"
        ],
        "Querying Multiple Tables with Joins": [
          "Using the INNER JOIN - Part 1",
          "Using the INNER JOIN - Part 2",
          "INNER JOIN Practice Problems",
          "Using the LEFT OUTER JOIN - Part 1",
          "Using the LEFT OUTER JOIN - Part 2",
          "Using the LEFT OUTER JOIN - Part 3",
          "LEFT/RIGHT OUTER JOIN Practice Problems"
        ],
        "Aggregate Functions": [
          "Aggregate Functions - Part 1",
          "Aggregate Functions - Part 2",
          "Aggregate Function Practice Problems"
        ],
        "Grouping Data with the GROUP BY Clause": [
          "Grouping with the GROUP BY Clause - Part 1",
          "Grouping with the GROUP BY Clause - Part 2",
          "GROUP BY Clause Practice Problems"
        ],
        "Filtering Groups with the HAVING Clause": [
          "Filtering Groups with the HAVING Clause - Part 1",
          "Filtering Groups with the HAVING Clause - Part 2",
          "HAVING Clause Practice Problems"
        ],
        "Using SQL Server Functions": [
          "Using SQL Server Functions - Part 1",
          "Using SQL Server Functions - Part 2",
          "Using SQL Server Functions - Part 3",
          "Using SQL Server Functions - Part 4",
          "Using SQL Server Functions - Part 5",
          "Using SQL Server Functions - Part 6",
          "Using SQL Server Functions - Part 7",
          "Using SQL Server Functions - Part 8",
          "Nesting Functions - Part 1",
          "Nesting Functions - Part 2",
          "SQL String and Nesting Function Practice Problems",
          "Using Date Functions - Part 1",
          "Using Date Functions - Part 2",
          "Using Date Functions - Part 3",
          "Date Function Practice Problems",
          "NULL Handling Functions - Part 1",
          "NULL Handling Functions - Part 2",
          "NULL Handling Function Practice Problems"
        ],
        "SQL Server Data Types and Type Casting": [
          "The Basics of SQL Server Data Types and Type Casting Functions",
          "SQL Server Type Casting and Data Types Practice Problems"
        ],
        "Working with Table Expressions": [
          "Using Derived Tables - Part 1",
          "Using Derived Tables - Part 2",
          "Using Derived Tables - Part 3",
          "Using Derived Tables - Part 4",
          "Using Derived Tables - Part 5",
          "Derived Table Practice Problems",
          "Working with CTEs - Part 1",
          "Working with CTEs - Part 2",
          "Working with CTEs - Part 3",
          "Working with CTEs - Part 4",
          "Common Table Expression (CTE) Practice Problems"
        ]
      },
      "requirements": [
        "I assume that you have NO SQL or database background before taking this course.",
        "You need to have a Windows computer or the ability to run a Windows Operating System on your computer."
      ],
      "description": "This course is an extension of our previous course, \"Microsoft SQL for Beginners\".  This course, \"Microsoft SQL from A to Z\" contains all the course material and content from the previous course plus the additional MANY new lectures on more intermediate and advanced-level SQL querying topics.  Students who sign up for this course will also have access to our 150+ page \"Complete T-SQL Querying Guide\" as an added bonus to assist you in the learning process.\n\nDo you want to learn a skill that can help you earn nearly $100,000 per year? If so, then this course is for you!\nSQL (Structured Query Language) is the language we use to interact with databases that store data. This allows us to retrieve data with ease and simplicity. As terms like business intelligence and big data become more familiar, businesses will need more people to learn the SQL language.\nThis course will teach you how to use the SQL language within Microsoft SQL Server, one of the most popular database engines in the world.\nYou will have plenty of video lessons to teach you the majority of the content. Each section includes practice problems or additional e-books to help reinforce what you learn in the video tutorials.",
      "target_audience": [
        "Anyone who works with data, tables, or databases!",
        "Someone who wants to learn the foundational skill of big data and data analytics.",
        "Those who work in organizations where the company typically uses Microsoft databases. This course uses Microsoft SQL Server and T-SQL (Microsoft SQL) variant of the SQL language. Those who work with Oracle, DB2, or MySQL might not gain as much from this course.",
        "If you work in: marketing, finance, accounting, operations, sales, manufacturing, healthcare, financial services, or any other industry/function that collects information",
        "Someone who wants to learn skills that give them the potential to earn near SIX figures!"
      ]
    },
    {
      "title": "Kotlin for Java Developers",
      "url": "https://www.udemy.com/course/kotlin-for-java-developers/",
      "bio": "Use your Java skills to learn Kotlin fast. Enhance career prospects and master Kotlin, including Java interoperability",
      "objectives": [
        "Create Kotlin programs",
        "Understand the differences between Java and Kotlin",
        "Understand how Java and Kotlin programs interoperate"
      ],
      "course_content": {},
      "requirements": [
        "Ideally, have at least a basic knowledge of Java (not essential)",
        "A computer running Windows, Mac OS X or Linux"
      ],
      "description": "Are you a Java developer wondering if you need to learn Kotlin?\nMaybe you are an experienced Java developer who wants to learn Kotlin quickly, to be prepared for future project work.\nPerhaps instead, you're an Android app developer who knows Java well, but you want to be able to move forward with Kotlin for new Android development work.\nWell, with Google's recent focus on Kotlin for Android app development, this language has been launched into the mainstream, and you can be sure you will be seeing a lot more about it. It's also highly likely that you will be working with Kotlin in your Java projects in the near future.\nBecause Kotlin works anywhere Java works, and can even be called from Java code (and vice-versa), this brings with it a massive opportunity for Java developers. Being able to work with both Java and Kotlin is going to give you a massive advantage over other programmers.\n\nThis course was designed to teach Java developers how to use Kotlin in the shortest possible time.\n\nSarah Ettritch, your course instructor, is an experienced Java and Kotlin developer, with many years of software development experience. She is uniquely qualified to teach you how to use this powerful and exciting language.\nWhile you won't learn Android app development in this course, you will learn Kotlin, and also the key differences between Kotlin and Java.\nThere is an entire section dedicated to Java interoperability, which is vital for all Java developers to learn.\nIn addition, the Kotlin syntax is explored in detail.\nOver sixteen hours of videos are included in the course, making it one of the most comprehensive courses on the language.\nNow is the perfect time for you to learn Kotlin, while it's relatively new.  It has been around for a while, but only now is it being thrust into the limelight.\n\nIt's absolutely vital for Java developers to learn Kotlin to maximize future career opportunities. Objective-C developers who failed to transition to Swift, or were too slow doing so, were left behind. Don't make the same mistake they did!\nIf you are ready to greatly increase your career prospects by adding Kotlin experience to your skills and knowledge, then sign up for the course today.",
      "target_audience": [
        "Java programmers wanting to learn Kotlin"
      ]
    },
    {
      "title": "What's New in Java 9 - Modules and More!",
      "url": "https://www.udemy.com/course/whats-new-in-java-9/",
      "bio": "Improve Your Career Prospects by Learning About New Java 9 Features Like Modules, JShell, Processes and More.",
      "objectives": [
        "Understand the new features in Java 9",
        "Be able to use the new features in their own projects"
      ],
      "course_content": {},
      "requirements": [
        "It's desirable to have some knowledge of Java, or another object oriented language"
      ],
      "description": "Do you know some Java, but worry that with the recent release of Java 9, your skills are now outdated?\nMaybe you are a programmer in another language, but want to improve your career prospects by learning about Java 9?\nPerhaps you know Java 8 well, and want to find out about the new features in Java 9 so you can put them to use as quickly as possible?\nWhatever the reason, if you want to find out about the new features in Java that are relevant to the majority of Java developers, then this course is for you.\nThe goal of the course was not to simply go quickly through all the new features in Java 9 at a very high-level. Nor was the goal to get into such detail that we forget about the feature we are studying.\n\nInstead, the course was designed to help you really understand these new features.\n\nSo, we'll look at what motivated the changes in Java 9 so we can better understand why there are needed and what issues they address.\n\nThen simple, but relevant examples are provided to demonstrate each feature.\n\nYour instructor in this course is Frank Mitropoulos Ph.D, a university professor with over 23 years of software development teaching experience.\n\nWhat are some of the new features in Java 9?\nAmong the many new features in Java 9 are the Java Shell, The Java Platform Module System, and updates to the Process API.\n\nIn this course we'll look at the Java Shell in detail.\nWe think you will love the Java shell! It makes learning Java, exploring APIs, and experimenting with Java code so much easier and very productive.\n\nOnce you start using it, we think you will go back to it over and over again when you have to write small snippets of code and especially when you are learning a new concept.\n\nThe Java Platform Module System is probably the feature that most developers have heard about when they think about Java 9.\nThe Java 9 Platform Module System allows Java to move forward  by modularizing the JDK as well as adding modules as first class citizens to Java.\n\nThe module system is actually quite intuitive and we think you will understand it and appreciate its impact straight away.\n\nIn this course we explain the motivation and goals for the module system and  then we look at every detail. Along the way we create a modular JokeServer application that we take from not using modules at all, all the way through being completely modularized and having a JavaFX front end.\n\nFinally, we discuss some of the issues you may have when migrating existing non-modular code in Java 9 and we walk through a simple example.\nAnother exciting addition to Java 9 are the updates to the Process API.\nThe Process API allows developers to work with native processes directly in Java code.\n\nNo more hacky code and no more Java Native Interface code is needed to do things that were previously impossible to do directly in Java.\n\nIn this course we look at the main use-cases where the Process API can be used and show live code examples right in the Java shell. You won’t believe how easy we can now work with processes on any OS.\n\nThat's just an example of some of the content of What's New in Java 9.\nIf you are ready to learn about the wonderful new features of Java 9, then click the enrolling button and get started today.",
      "target_audience": [
        "Programmers in other languages wanting to understand new features of Java 9",
        "Java 7 or Java 8 programmers wanting to find out more about Java 9"
      ]
    },
    {
      "title": "Multithreading,Parallel & Asynchronous Coding in Modern Java",
      "url": "https://www.udemy.com/course/parallel-and-asynchronous-programming-in-modern-java/",
      "bio": "Learn to use Multithreading in Java using the ParallelStreams API and CompletableFuture API using the Hands-On approach.",
      "objectives": [
        "Learn to write code that provides faster results using the modern apis in Java",
        "Learn to write Asynchronous/Parallel Programming code using Functional Style APIs",
        "Learn to write parallel programming code using ParallelStreams",
        "Learn to write Asynchronous code using Completablefuture",
        "Learn to write code that uses all the cores in your machine",
        "Techniques and patterns that uses the modern concurrency apis to improve the overall performance of the code",
        "Concurrency vs Parallelism"
      ],
      "course_content": {},
      "requirements": [
        "Prior Java Experience",
        "Java 11 or higher",
        "Intellij or Eclipse or Similar IDE"
      ],
      "description": "This course is structured to give you the theoretical and coding experience writing parallel and asynchronous code using ParallelStreams and CompletableFuture. You will become very Fluent in writing Asynchronous/Parallel Code in Java once you complete this course.\nIf you are looking forward to writing High Performant Java code then this is the right course for you. This course covers the latest features that are available in Modern Java that helps you write fast performing code.\nThis course explicitly covers the following APIs in Modern Java:\nParallelStreams\nCompletableFuture\nGetting Started with Parallel and Asynchronous programming\nIn this section, I will explain about the need to learn about the Parallel and Asynchronous programming concepts in todays software development\nBriefly talks about the Evolution of Concurrency APIs in Java\nExplain about the difference between the Concurrency and Parallelism\nCourse Project SetUp\nIn this section, we will set up the base project for the whole course.\nThreads, Future, ForkJoin FrameWork, and its Limitations\nIn this section, I will explain about Threads, Future API, ForkJoin FrameWork and its limitations\nI will show a demonstration of all these concepts using code examples.\nThe limitations that are covered in the course sets the stage for ParallelStreams and CompletableFuture API\nGetting started with Parallel Streams\nIn this section, I will introduce you all to parallel streams and implement a simple example using Parallel Streams\nIntroduction to Streams API and ParallelStreams\nImplement a simple example using ParallelStreams\nWrite unit tests to test the ParallelStreams using JUnit5\nBuild Retail Checkout Application using Parallel Streams\nIn this section, we will build a simple Backend Retail Checkout application using Parallel Streams\nParallel Streams - Under the hood\nIn this section, I will cover the internals of parallel streams.\nI will explain about how ParallelStreams work under the hood\nCompare the performance of different collections when it's used against the ParallelStreams\nUsage of Collect vs Reduce terminal operators in Streams API and Parallel Streams\nOperators that can cause poor performance when it's used against ParallelStreams\nParallel Streams - Threading Model & Common ForkJoin Pool\nIn this section, I will explain about the execution engine behind the parallel Streams\nCovers the Threading model that's utilized behind the scenes by ParallelStreams\nConfiguring the ThreadPool for Faster Performance\nParallel Streams - Summary\nThis section summarizes everything that's discussed above that's related to ParallelStreams\nCovers the scenarios on \"when to use/when not to use\" ParallelStreams\nCompletableFuture\nIn this section, I will introduce you all to the CompletableFuture API\nExploring CompletableFuture Functions\nIn this section, I will code and explore the functions that are part of the CompletableFuture API\nExplore some of the key functions that are part of the CompletableFuture API\nWrite unit tests to test the CompletableFuture using JUnit5\nBuild a ProductService application using CompletableFuture\nIn this section, we will implement the ProductService example using CompletableFuture\nThis section will give you all an idea about how to use CompletableFuture in a real-world scenario\nCombining Streams and CompletableFuture\nIn this section, I will show you the techniques to combine Streams with CompletableFuture.\nI will explore this by adding an enhancement to the ProductService which is the InventoryService\nExplore the different options available to integrate Streams API with CompletableFuture\nException Handling/Recovery in CompletableFuture\nIn this section, I will introduce you to to the techniques/options that are to handle/recover exceptions using CompletableFuture\nI will explain and cover different exception handling and recovery techniques that are available in CompletableFuture\nhandle()\nexceptionally()\nwhenComplete\nI will compare and explain the difference of behaviors between them and provide recommendation on using different handlers for different use cases.\nImplement Exception Handling/Recovery in ProductService\nIn this lecture, I will show you techniques to implement the exception handling techniques in our ProductService\nImplement the exception handling and recovery technique in  ProductInfoService, ReviewService and  InventoryService\nCompletableFuture & ThreadPool\nIn this section, I will cover the ThreadPool and the different options that are available to use with CompletableFuture\nI will cover the default CommonForkJoin ThreadPool thats used to execute the CompletableFuture\nI will cover the techniques to use a Custom ThreadPool that can be used to execute the CompletableFuture\nThreads and Async Overloaded Methods in CompletableFuture\nI will cover the threads that are used to execute CompletableFuture\nI will show the technique to use Async() methods that's part of the CompletableFuture API to change the execution of threads in the CompletableFuture Pipeline\nBuild RestFul API Client using Spring WebClient and CompletableFuture\nIn this section, I will build a restful api client using Spring WebClient and Integrate with CompletableFuture to improve the performance of the api calls.\nI will code and demonstrate how to use Spring WebClient to build a rest client\nI will code and demonstrate the technique to integrate RestAPI calls with CompletableFuture to improve the overall performance of the code.\nHandle Multiple CompletableFutures - anyOf(), allOf()\nIn this section, I will code and explain about the techniques to handle multiple CompletableFutures.\nI will code and explore the allOf() function thats part of the CompletableFuture API\nI will code and explore the anyOf() function thats part of the CompletableFuture API\nBy the end of this course, you will have a complete understanding of ParallelStreams and CompletableFuture and how to use them in your projects.",
      "target_audience": [
        "Java Developers curious to write parallel programming code",
        "Java Developers curious to write Asynchronous programming code",
        "Java Developers interested in improving the knowledge about the Modern Concurrency APIs",
        "Java Developers interested in learning the ParallelStreams API",
        "Java Developers interested in learning the CompletableFuture API"
      ]
    },
    {
      "title": "Java for Testers",
      "url": "https://www.udemy.com/course/java-for-testers-dmitry/",
      "bio": "Start your test automation career by learning Java from this specifically designed for beginners course.",
      "objectives": [
        "We will start from scratch, prepare environment, install Java JDK and IDEs",
        "Learn basic things, data types, create the first project",
        "Then we will move to learn methods, classes, functions",
        "We will also spend time learning principles of Object-Oriented Programming,",
        "And we will end with test frameworks"
      ],
      "course_content": {},
      "requirements": [
        "No prior programming experience is required.",
        "This course is specifically designed for complete beginners."
      ],
      "description": "Learn Java and start automating tests tomorrow\n\n\nJava for testers course is specifically designed for manual testers that want to move into test automation.\nAll topics were carefully selected to match the needs of test automation engineers. Every step is explained in detail from the Java and IDE set up to running your first Java method.\n\n\nNo prior programming experience is required. This course is specifically designed for complete beginners.\n\n\nMore and more Software QA positions require some test automation, and in many cases, Selenium WebDriver experience. According to many recent surveys, Java is the most popular programming language used in test automation.\n\n\nThat's why, if you want to move from manual to automated testing, Java is a great choice of a programming language, as it will give you a lot of options on the job market.\n\n\nBenefits of this course:\nUnlike other java courses you can find online, this course is specifically designed for testers who want to move from manual testing to test automation.\nThis course contains all the useful info you need, to learn how to automate tests with Java.\nIncludes an overview of testing frameworks\nWe would not waste time on things, that test automation engineers don't use at all\nList of Major Components:\nWe will start from scratch, like preparations, installing java and IDEs\nLearning basic things, data types, creating the first project\nThen we will move to learn methods, classes, functions\nWe will also spend time learning principles of Object-Oriented Programming\nAnd we will end with test frameworks\nIdeal Student Description:\nI designed this course for testers that are tired of manually testing things.\nTesters that see, that it's getting harder and harder to find a manual only job\nTesters that want to increase their income, by learning how to automate tests\nThis is a java course, but it’s tailored for the test automation with java\n\n\nAt the end of this course, students will know all the basics of Java, how methods and classes work. How to write more complex code and know a few Java test frameworks.\n\n\nAnd most importantly, be able to receive a promotion at the current job, or get a new job that requires selenium or other test automation experience.",
      "target_audience": [
        "I designed this course for testers that are tired of manually testing things.",
        "Testers that see, that it's getting harder and harder to find a manual only job",
        "Testers that want to increase their income, by learning how to automate tests",
        "This is a java course, but it’s tailored for the test automation with java"
      ]
    },
    {
      "title": "Python Data Analysis: NumPy & Pandas Masterclass",
      "url": "https://www.udemy.com/course/python-pandas/",
      "bio": "Learn NumPy + Pandas for data analysis, data science & business intelligence, w/ a top Python data science instructor!",
      "objectives": [
        "Master the essentials of NumPy and Pandas, two of Python's most powerful data analysis packages",
        "Learn how to explore, transform, aggregate and join NumPy arrays and Pandas DataFrames",
        "Analyze and manipulate dates and times for time intelligence and time-series analysis",
        "Visualize raw data using plot methods and common chart options like line charts, bar charts, scatter plots and histograms",
        "Import and export flat files, Excel workbooks and SQL database tables using Pandas",
        "Build powerful, practical skills for modern analytics and business intelligence"
      ],
      "course_content": {},
      "requirements": [
        "We'll use Anaconda & Jupyter Notebooks (a free, user-friendly coding environment)",
        "Familiarity with base Python is strongly recommended, but not a strict prerequisite"
      ],
      "description": "This is a hands-on, project-based course designed to help you master two of the most popular Python packages for data analysis and business intelligence: NumPy and Pandas.\n\n\nWe'll start with a NumPy primer to introduce arrays and array properties, practice common operations like indexing, slicing, filtering and sorting, and explore important concepts like vectorization and broadcasting.\n\n\nFrom there we'll dive into Pandas, and focus on the essential tools and methods to explore, analyze, aggregate and transform series and dataframes. You'll practice plotting dataframes with charts and graphs, manipulating time-series data, importing and exporting various file types, and combining dataframes using common join methods.\n\n\nThroughout the course you'll play the role of Data Analyst for Maven Mega Mart, a large, multinational corporation that operates a chain of retail and grocery stores. Using the Python skills you learn throughout the course, you'll work with members of the Maven Mega Mart team to analyze products, pricing, transactions, and more.\n\n\nCOURSE OUTLINE:\n\n\nIntro to NumPy & Pandas\nIntroduce NumPy and Pandas, two critical Python libraries that help structure data in arrays & DataFrames and contain built-in functions for data analysis\n\n\nPandas Series\nIntroduce Pandas Series, the Python equivalent of a column of data, and cover their basic properties, creation, manipulation, and useful functions for analysis\n\n\nIntro to DataFrames\nWork with Pandas DataFrames, the Python equivalent of an Excel or SQL table, and use them to store, manipulate, and analyze data efficiently\n\n\nManipulating Python DataFrames\nAggregate & reshape data in DataFrames by grouping columns, performing aggregation calculations, and pivoting & unpivoting data\n\n\nBasic Python Data Visualization\nLearn the basics of data visualization in Pandas, and use the plot method to create & customize line charts, bar charts, scatterplots, and histograms\n\n\nMID-COURSE PROJECT\nPut your skills to the test with a brand new dataset, and use your Python skills to analyze and evaluate a new retailer as a potential acquisition target for Maven MegaMart\n\n\nAnalyzing Dates & Times\nLearn how to work with the datetime data type in Pandas to extract date components, group by dates, and perform time intelligence calculations like moving averages\n\n\nImporting & Exporting Data\nRead in data from flat files and apply processing steps during import, create DataFrames by querying SQL tables, and write data back out to its source\n\n\nJoining Python DataFrames\nCombine multiple DataFrames by joining data from related fields to add new columns, and appending data with the same fields to add new rows\n\n\nFINAL COURSE PROJECT\nPut the finishing touches on your project by joining a new table, performing time series analysis, optimizing your workflow, and writing out your results\n\n\nJoin today and get immediate, lifetime access to the following:\n\n\n13+ hours of high-quality video\nPython NumPy & Pandas PDF ebook (350+ pages)\nDownloadable project files & solutions\nExpert support and Q&A forum\n30-day Udemy satisfaction guarantee\n\n\nIf you're a data analyst, data scientist, business intelligence professional or data engineer looking to add Pandas to your Python skill set, this course is for you.\n\n\nHappy learning!\n-Chris Bruehl (Python Expert & Lead Python Instructor, Maven Analytics)\n\n\n__________\nLooking for our full business intelligence stack? Search for \"Maven Analytics\" to browse our full course library, including Excel, Power BI, MySQL, Tableau and Machine Learning courses!\n\n\nSee why our courses are among the TOP-RATED on Udemy:\n\n\n\"Some of the BEST courses I've ever taken. I've studied several programming languages, Excel, VBA and web dev, and Maven is among the very best I've seen!\" Russ C.\n\n\n\"This is my fourth course from Maven Analytics and my fourth 5-star review, so I'm running out of things to say. I wish Maven was in my life earlier!\" Tatsiana M.\n\n\n\"Maven Analytics should become the new standard for all courses taught on Udemy!\" Jonah M.",
      "target_audience": [
        "Analysts or BI professionals looking to learn data analysis with NumPy and Pandas",
        "Aspiring data scientists who want to build or strengthen their Python skills",
        "Anyone interested in learning one of the most popular open source programming languages in the world",
        "Students looking to learn powerful, practical skills with unique, hands-on projects and course demos"
      ]
    },
    {
      "title": "The Modern Python 3 Bootcamp",
      "url": "https://www.udemy.com/course/the-modern-python3-bootcamp/",
      "bio": "A Unique Interactive Python Experience With Nearly 200 Exercises and Quizzes",
      "objectives": [
        "Learn all the coding fundamentals in Python!",
        "Work through nearly 200 exercises and quizzes!",
        "Learn in-depth about Python 3 features",
        "Use Python to create an automated web crawler and scraper",
        "Make complex HTTP requests to APIs using Python",
        "Master the quirks of Python style and conventions",
        "Really Really Understand Object Oriented programming in Python",
        "Learn testing and TDD (Test Driven Development) with Python",
        "Write your own Decorators and higher order functions",
        "Write your own Generators and other Iterators",
        "Confidently work with Lambdas!",
        "Master tricky topics like Multiple Inheritance and Polymorphism",
        "Build games with Python",
        "Build larger projects that span across multiple files",
        "Work with all the Python data structures: lists, dictionaries, sets, tuples, and more!",
        "Become an expert at list and dictionary comprehensions",
        "Master built-in python functions like zip and filter",
        "Handle errors and debug code",
        "Write your own custom modules",
        "Work with files, including CSV"
      ],
      "course_content": {
        "Course Introduction": [
          "Course Introduction",
          "Join The Community!",
          "Python3 vs. Python2",
          "How The Exercises Work",
          "Where Should You Start?",
          "How The Course is Structured",
          "Download All Slides Here!"
        ],
        "MAC/LINUX Command Line Fundamentals": [
          "Why Use The Command Line?",
          "Command Line Installation: MAC",
          "Absolute Paths and PWD",
          "Using CD",
          "Using LS",
          "Command Line Fundamentals",
          "Making Directories with MKDIR",
          "Creating Files with TOUCH",
          "Quick Activity: Salamanders and Frogs",
          "Moving and Renaming with MV",
          "Deleting Files with RM",
          "Deleting Directories (Plus Tangents on Permissions and MAN Pages)",
          "Command Line Fundamentals II"
        ],
        "WINDOWS Command Line Fundamentals": [
          "Why Do You Need The Command Line?",
          "Using Powershell",
          "Paths, LS, and PWD",
          "Using The CD Command",
          "Command Line Fundamentals (Windows)",
          "OPTIONAL: Making Directories with MKDIR",
          "OPTIONAL: Making Files (it's...complicated)",
          "Creating a Touch Function",
          "OPTIONAL: Removing Files and Folders with RM",
          "Command Line Fundamentals II (Windows)"
        ],
        "MAC Python Setup": [
          "Installing Python: MAC",
          "Optional: Installing Sublime Text",
          "Our First Python Program!",
          "Say Your Name",
          "SOLUTION",
          "Important Note on Print and the Python Interpreter"
        ],
        "WINDOWS Python Setup": [
          "Installing Python On a PC",
          "Introducing Sublime Text",
          "Your First Python Program",
          "Print Your Name",
          "SOLUTION",
          "Important Note on Print and the Python Interpreter"
        ],
        "Numbers, Operators, and Comments": [
          "Section Introduction/Objectives",
          "Numbers: Ints and Floats",
          "Quick Ints and Floats Quiz",
          "Numbers: Basic Math",
          "Basic Math Refresher",
          "Quick Note: Comments",
          "One Question Quiz",
          "Numbers: Weirder Operators",
          "Numbers Quiz",
          "Introduction to the Python Documentation"
        ],
        "Variables and Strings": [
          "Variables and Data Types",
          "Introduction to Variables",
          "Bank Robbery Money",
          "SOLUTION",
          "Variable Naming Restrictions and Conventions",
          "Data Types Overview",
          "What The Heck is Dynamic Typing",
          "Super Quick One Question Quiz!",
          "The Special Value NONE",
          "Double Vs. Single Quotes",
          "Make Some Variables!",
          "SOLUTION",
          "String Escape Sequences",
          "Escape Sequence Practice",
          "SOLUTION",
          "String Concatenation",
          "String Concatenation Exercise",
          "SOLUTION",
          "String Formatting",
          "Formatting Strings",
          "SOLUTION",
          "Strings and Indexes (Indicies?)",
          "Converting Data Types",
          "Building a Mileage Convertor With User Input",
          "Variables and Data Types"
        ],
        "Boolean and Conditional Logic": [
          "Section Introduction and Objectives",
          "Getting User Input",
          "Intro to Conditionals",
          "Lucky Number 7",
          "SOLUTION",
          "Number is Odd",
          "SOLUTION",
          "Multiple Elifs",
          "A Word on Truthiness + A Quick Example",
          "The Joy of Comparison Operators",
          "Logical AND & OR",
          "Food Classifying Exercise",
          "SOLUTION",
          "LOGICAL NOT",
          "Boolean Logic Principles",
          "A Note on Is Vs. ==",
          "Bouncer Code-Along and Nested Conditionals",
          "Boolean & Conditional Logic in Python",
          "Positive or Negative Checking",
          "SOLUTION",
          "Calling in Sick",
          "SOLUTION"
        ],
        "Rock, Paper, Scissors": [
          "Rock, Paper, Scissor Mini Project: BASIC Version",
          "RPS Mini Project: BASIC Version Solution",
          "RPS Mini Project: Refactoring Time",
          "Another Cleaner RPS Solution",
          "RPS Mini Project: Playing Against The Computer",
          "RPS Mini Project: Computer AI Solution"
        ],
        "Looping in Python": [
          "Section Introduction",
          "IMPORTANT ANNOUNCEMENT ON LOOPS EXERCISES",
          "The Basics of For Loops",
          "Exploring Ranges In Depth",
          "Quick Ranges Quiz",
          "For Loop and Range Exercise",
          "SOLUTION",
          "EXERCISE: Screaming Repeating",
          "EXERCISE: Unlucky Numbers",
          "Introducing While Loops",
          "EXERCISE: Emoji Art",
          "EXERCISE: Stop Copying Me",
          "The Break Keyword",
          "Stuck in a Loop",
          "While Loop Exercise",
          "SOLUTION",
          "Loops"
        ]
      },
      "requirements": [
        "A computer! We've got you covered whether you have a Mac or a PC.",
        "Prepare to write thousands of lines of python exercises!",
        "No previous experience with Python or coding is required."
      ],
      "description": "Updated to include SQL + Python!\nWelcome to the Modern Python 3 Bootcamp!  I've launched my fair share of Udemy courses, but I've never done anything quite this crazy.\nThis course is a unique experience on Udemy. There are dozens of existing Python courses you can choose from, but this course is the only one that has nearly 200 interactive challenges you can complete right here in your browser. I didn't just tack on a couple of exercises at the end; this course is fully built around the coding exercises.   This course is all about getting you writing code ASAP, rather than sitting back watching a bunch of videos.\nIn development, I referred to this course as a hybrid between a typical Udemy course and an interactive Codecademy-style course.  You get over 25 hours of in-depth videos and my dumb jokes along with meticulously created exercises and quizzes to test your knowledge as you go.\nMany of the older Python courses still focus on Python 2.  This course is all about writing the most modern, up-to-date Python code, so Python 3 was the obvious choice.  The course covers all the latest additions and changes to the Python language.  The course also places a large emphasis on thinking like a Python developer, and writing code the \"Pythonic\" way.\nAs for the curriculum, This course teaches all the key topics covered by other Python courses, but also covers more advanced topics like web scraping, crawling, and testing, just to name a few.  Please feel free to explore the curriculum and watch some of the free preview videos!\nPython is consistently ranked in either first or second place as the most in-demand programming languages across the job market.  It has applications in data science, machine learning, web development, self-driving cars, automation, and many many other disciplines.  There has never been a better time to learn it!\n\nI'm spent years teaching people to program at in-person bootcamps in the San Francisco Bay Area.  In recent years, I've started bringing my methods from the classroom to the online world. In my first year teaching online, I was selected as the Best Newcomer Instructor in the Udemy Instructor Awards 2015.  I'm passionate about making the best possible online learning experiences that mirror my in-person courses.\nIf you want to take ONE COURSE to master Python take this course.",
      "target_audience": [
        "Anyone who wants to learn Python.",
        "Anyone who is curious about data science, machine learning, or web development",
        "Anyone who wants to get tons of practice with the interactive exercises."
      ]
    },
    {
      "title": "MATLAB/SIMULINK Bible | Go From Zero to Hero + ChatGPT!",
      "url": "https://www.udemy.com/course/matlabsimulink-biblego-from-zero-to-hero/",
      "bio": "Build 10 Practical Projects and go from Beginner to Pro in Simulink with this Project-Based Simulink Course!",
      "objectives": [
        "Develop Simulink models in a practical, fun and easy way.",
        "Develop, simulate and analyze electrical and mechanical systems in Simulink.",
        "Understand the basic concepts of control systems and develop your own controllers in Simulink.",
        "Understand control system theory, develop PID controllers, and tune these controllers in Simulink.",
        "Impress future (or current) employers with your marketable skills in MATLAB/Simulink"
      ],
      "course_content": {
        "Course Introduction and Welcome Message": [
          "Course Introduction and Learning Outcomes"
        ],
        "PROJECT #1: GENERATE, DISPLAY AND EXPORT SOURCE GENERATING SINE WAVE": [
          "Project Overview and Learning Outcomes",
          "Simulink Intro and Model Development",
          "Gain Multiplication",
          "Assignment Solution"
        ],
        "PROJECT #2: BUILD A MATHEMATICAL EQUATION (DIFFERENTIATION/INTEGRATION) SYSTEM": [
          "Project Overview and Learning Outcomes",
          "Differentiation and integration operation in Simulink",
          "Set an External Integrator Initial Condition",
          "Assignment Solution",
          "Implement a Mathematical Equation in Simulink",
          "Solve Mathematical equation Using Simulink"
        ],
        "PROJECT #3: SIMULATE A MASS SPRING DAMPER SYSTEM IN TIME DOMAIN": [
          "Project Overview and Learning Outcomes",
          "How to model a Mass Spring Damper system/Develop a System Free Body Diagram",
          "Develop a Simulink Model for a Mass Spring Damper System",
          "Simulate the system using various damper coefficient values",
          "Assignment Solution"
        ],
        "PROJECT #4: SIMULATE A MASS SPRING DAMPER SYSTEM IN S-DOMAIN USING SIMULINK": [
          "Project Overview and Learning Outcomes",
          "What is Laplace Transformation? and Why?",
          "Build a Transfer Function Using Simulink",
          "Simulate a System Using Impulse Response",
          "Assignment solution"
        ],
        "PROJECT #5: BUILD AND SIMULATE A BATTERY MODEL": [
          "Project Overview and Learning Outcomes",
          "What is a battery and how does it work?",
          "Develop a Simple battery model",
          "Develop and Simulate a Battery model in Simulink",
          "Battery model simulation in Simulink Using both charging/discharging resistances",
          "Assignment Solution"
        ],
        "PROJECT #6: BUILD PROPORTIONAL INTEGRAL DERIVITIVE (PID) CONTROLLER IN SIMULINK": [
          "Project Overview and Learning Outcomes",
          "What is a control system?",
          "What are the steps required to build a control system?",
          "Proportional Integral Derivative (PID) Contollers",
          "Developing a PID Controller in Simulink"
        ],
        "PROJECT #7: APPLY A PID CONTROLLER TO MASS SPRING DAMPER SYSTEM": [
          "Project Overview and Learning Outcomes",
          "Mass-spring damper system with PID controller in Simulink"
        ],
        "PROJECT #8: TUNE A PROPORTIONAL INTEGRAL DERIVITIVE (PID) CONTROLLER": [
          "Project Overview and Learning Outcomes",
          "How to evaluate the dynamic system performance?",
          "Build and Tune a PID controller using PID block in Simulink"
        ],
        "PROJECT #9: DEVELOP AND SIMULATE ADAPTIVE CRUISE CONTROL SYSTEM": [
          "Project Overview and Learning Outcomes",
          "Develop a vehicle dynamics model",
          "Develop a PID controller and Block Diagram Model Reduction basics",
          "BLock diagram/Model Reduction Exercise",
          "Assignment Solution",
          "Develop a PID controller in M-script"
        ]
      },
      "requirements": [
        "There is no prior experience required, even if you have never used MATLAB or Simulink before.",
        "Matlab and Simulink software. Downloadable from MathWorks website."
      ],
      "description": "This course will cover the basics of Simulink and students will be able to create Simulink models and run simulations of physical systems.\n\n\nSimulink is a powerful MATLAB-based tool used to design and simulate mechanical, electrical, electromechanical, and hydraulic systems using a large comprehensive drag and drop library.\n\n\nThe course includes a unique project-based learning approach and you are going to learn by doing! students will be able to develop fun, useful and practical Simulink models from scratch.\n\n\nIn this course, students will be able to:\n\nExperience a true practical project-based learning experience, we will build 10 Simulink projects together\nAccess all the Simulink models and slides,\nReceive a certificate of completion to post on LinkedIn profile to showcase your skills in Simulink to employers.\nReceive a risk free trial with 30 day money back guarantee so you can give a course a try risk free!\nCheck out the preview videos and the outline to get an idea of the projects we will be covering.\nWe will start from the basics and gradually build up your knowledge.\n\n\nSo who this course is for?\nThe course is targeted towards anyone wanting to gain a fundamental understanding of Matlab and Simulink and solve practical real world business problems.\n\n\nIn this course:\n(1) You will have a true practical project-based learning experience, we will build over 5 projects together\n(2) You will have access to all the codes, Simulink models and slides\n(3) You will get a certificate of completion that you can post on your LinkedIn profile to showcase your skills in Simulink and SimScape to employers.\n(4) All this comes with a 30-day money back guarantee so you can give a course a try risk free!\nCheck out the preview videos and the outline to get an idea of the projects we will be covering.\nEnroll today and let’s harness the power of Matlab Simulink and SimScape together!",
      "target_audience": [
        "For students who want to learn Simulink Fundamentals and develop their own Simulink Models.",
        "For Programming beginners who are new to MATLAB or Simulink.",
        "For engineers and scientists who are curious about control systems and system modeling"
      ]
    },
    {
      "title": "Advanced Java Programming",
      "url": "https://www.udemy.com/course/advanced-java-programming/",
      "bio": "Take Your Java Programming Skills To The Next Level. Become Proficient In Java Programming",
      "objectives": [
        "To build a deeper understanding of Java Programming and Development"
      ],
      "course_content": {
        "01. Introduction": [
          "Working Files - Download These First",
          "0101 What This Course Covers"
        ],
        "02. Generic Programming": [
          "0201 Building Generic Classes - Part 1",
          "0202 Building Generic Classes - Part 2",
          "0203 Creating Generic Interfaces",
          "0204 Building Generic Methods",
          "0205 Building Generic Classes With Different Types",
          "0206 Generic Programming - Exercise"
        ],
        "03. Sequential Collections": [
          "0301 The Collection, List, And Set Interfaces",
          "0302 The Queue And Dequeue Interfaces",
          "0303 The Arraylist Class",
          "0304 The Hashset Class",
          "0305 The Treeset Class",
          "0306 The Priorityqueue Class",
          "0307 Sequential Collections - Exercise 1",
          "0308 Sequential Collections - Exercise 2"
        ],
        "04. Associative Collections": [
          "0401 The Map Interface",
          "0402 The Treemap Class",
          "0403 The Hashmap Class",
          "0404 Associative Collections - Exercise"
        ],
        "05. Classic Data Structures": [
          "0501 Stacks",
          "0502 Queues",
          "0503 Binary Trees",
          "0504 Classic Data Structures - Exercise 1",
          "0505 Classic Data Structures - Exercise 2",
          "0506 Classic Data Structures - Exercise 3",
          "0507 Classic Data Structures - Exercise 4"
        ],
        "06. Sorting And Searching Algorithms": [
          "0601 Insertion Sort",
          "0602 Bubble Sort",
          "0603 Mergesort",
          "0604 Quicksort",
          "0605 Linear Search",
          "0606 Binary Search",
          "0607 Sorting And Searching Algorithms - Exercise 1",
          "0608 Sorting And Searching Algorithms - Exercise 2"
        ],
        "07. Exception Handling": [
          "0701 Exceptions Introduction - Uncaught Exceptions",
          "0702 Try-Catch Statement - Part 1",
          "0703 Try-Catch Statement - Part 2",
          "0704 Multiple Catch Clauses",
          "0705 Try-Catch-Finally",
          "0706 Exception Handling - Exercise"
        ],
        "08. Database Programming With JDBC": [
          "0801 Installing MySQL On Windows",
          "0802 Installing MySQL On Mac",
          "0803 Installing Connector/J",
          "0804 Connecting To A Database",
          "0805 Querying Data",
          "0806 Creating Database/Tables",
          "0807 Inserting Data",
          "0808 Updating Data",
          "0809 Database Programming With JDBC - Exercise"
        ],
        "09. Network Programming": [
          "0901 Working With URLs",
          "0902 Socket Programming Example",
          "0903 Socket Server Programming",
          "0904 Client Server Programming",
          "0905 Network Programming - Exercise"
        ],
        "10. GUI Development With Swing": [
          "1001 A Simple Example",
          "1002 Working With Text Fields",
          "1003 Working With Buttons",
          "1004 Working With Lists",
          "1005 Working With Scroll Panes",
          "1006 GUI Development With Swing - Exercise"
        ]
      },
      "requirements": [
        "The desire to be an \"A Level\" programmer"
      ],
      "description": "An Advanced Java Tutorial aimed towards the Developer Who Already has Learned the Fundamentals of Java Programming.\nIn this Advanced Java Programming training course, expert content provider Infinite Skills builds on the beginners Java course, and goes deeper into programming topics that help you to understand these more advanced Java concepts. Designed for the more experienced Java developer, you should have a good working knowledge of the Java programming language before going through this tutorial.\n\nSome of the advanced topics that you will cover in this Advanced Java Tutorialincludes; generic programming, sequential and associative data structures, classic data structures, sorting and searching, exception handling, database programming with JDBC, networking programming GUI development using Swing and an overview of Multithreading. You will also explore Java Applets, web applications (Servlets), advanced input and output classes, more advanced strings, regular expressions, Java graphics, and finally, closing off with a look at using Eclipse.\n\nBy the conclusion of this training course, you will have a clear understanding of each of the topics of Advanced Java Programming, which will allow you to go more in-depth with the concepts of your choice. Working files are included to allow you to learn the concepts using the same files that the author does throughout this computer based training course.\n</p>",
      "target_audience": [
        "Developers who already have an understanding of core Java Programming concepts"
      ]
    },
    {
      "title": "Java Basics: Learn to Code the Right Way",
      "url": "https://www.udemy.com/course/learn-java-programming/",
      "bio": "Learn Java Using this Course, Then Move on to Make Desktop, Web and Android Applications!",
      "objectives": [
        "Understand the basic fundamentals of Java",
        "Be ready to create Android apps with solid Java knowledge",
        "Be ready to create Java desktop or web apps"
      ],
      "course_content": {
        "Introduction and Setup": [
          "Introduction and Setup",
          "What is Programming?"
        ],
        "Beginning Java": [
          "Hello Java - Classes and Entry Point",
          "Variables in Java",
          "Operators in Java",
          "Homework - Make a Simple Calculator",
          "Java Cheat Sheet",
          "Converting Variable Types in Java",
          "Methods in Java",
          "Comparing Stuff in Java",
          "Arrays in Java",
          "Round and Round We Go - Loops in Java",
          "Classes and Objects in Java",
          "Inheritance in Java",
          "Summary of The Basics of Java Programming"
        ]
      },
      "requirements": [
        "You will need the internet to get our development environment",
        "A willingness to learn!"
      ],
      "description": "Does coding scare you? Think applications can only be made by geeks? Well I'm here to change that!\nLearn the basic concepts, tools, and functions that you will eventually use to build both desktop and mobile applications with the popular programming language, Java.\n\n-------------------------------\nThis course is for complete and utter beginners to programming and Java. If you don't know what fancy words like 'classes' and 'objects' mean then this is the course for you!\n-------------------------------\n\n\nSome Things You Will Learn\nVariables\nFunctions or Methods\nBasic Class Creation\nA bunch of other useful things!\n\n\nA Powerful Skill at Your Fingertips\nLearning to program in any language puts earning power into your hands. You will have the ability to make desktop or mobile applications (that make money) or hire yourself out at $60 - $150 per hour.\n\n\nContent and Overview\nI must repeat - this course is for complete and utter beginners only! I explain slowly and clearly for all to understand!\nStudents completing this course will have the knowledge to create their own desktop or mobile apps and create apps for paying customers.\nJoin today, forge a lucrative career path and never look back!",
      "target_audience": [
        "Beginners to Java programming should take this course",
        "Beginners to programming in general can take this course"
      ]
    },
    {
      "title": "Complete Java SE 8 Developer Bootcamp - OCA Prep Included",
      "url": "https://www.udemy.com/course/learn-java-se-8-and-prepare-for-the-java-associate-exam/",
      "bio": "Master the Foundations of Java and the Topics of the Oracle Certified Associate, Java SE 8 Programmer Exam (1Z0-808)",
      "objectives": [
        "Read and write basic command line programs in Java",
        "Know how to use an Integrated Development Environment (Eclipse) to develop and debug programs",
        "Generate HTML based documentation (Javadoc) for code",
        "Gain a solid understanding of the topics covered in the exam to become an Oracle Certified Associate, Java SE 8 Programmer (Java SE 8 Programmer I 1Z0-808)"
      ],
      "course_content": {
        "Welcome!": [
          "Course Overview",
          "Installing the Java SE Development Kit 8 (JDK)",
          "Installing Eclipse"
        ],
        "Getting Started with Java": [
          "Section Overview",
          "The Features of the Java Programming Language",
          "The Java Platform",
          "The Java Platform",
          "Editions and Versions",
          "The Java Development Kit (JDK)",
          "Your First Java Program - Part 1 (Code)",
          "Java Class and the \"main\" Method",
          "Your First Java Program - Part 2 (Compilation and Execution)",
          "Hello World Lab & Lab Files",
          "Java API Documentation (Javadocs)"
        ],
        "Introduction to Objects": [
          "Section Overview",
          "Object Oriented Programming (OOP)",
          "Objects vs. Primitives",
          "Objects vs. Primitives Addendum",
          "Stack & Heap",
          "Using Objects",
          "Q & A: \"Member\"",
          "Initializing Data",
          "Creating Object Types - Part 1",
          "Working with the Car Type",
          "Creating Object Types - Part 2",
          "Creating Object Types - Part 3",
          "A note on \"void\"",
          "Building Constructors",
          "Constructors and Default Values",
          "Default Constructor",
          "Q & A: Default vs. \"No-Arg\" Constructor",
          "Initialization Blocks",
          "Introduction to Objects Lab"
        ],
        "Static, Scope, and Garbage Collection": [
          "Section Overview",
          "Static Variables",
          "Static Methods",
          "Static Reference Variables and null",
          "Using Static Variables and Methods",
          "Static Initialization Block",
          "What's the Value?",
          "Quiz Explanation & Note About the Next Lecture",
          "\"this\" - Part 1",
          "\"this\" - Part 2",
          "\"this\" - Part 3",
          "Scope - Part 1",
          "Scope - Part 2",
          "Garbage Collection",
          "Java Memory Leaks",
          "Static Lab"
        ],
        "Packages": [
          "Section Overview",
          "Packages",
          "Packages and Imports",
          "Classpath",
          "More on Classpath",
          "JARs",
          "Packages Lab"
        ],
        "Java Conventions and Primitives": [
          "Section Overview",
          "Coding Standards",
          "Comments",
          "Javadoc",
          "Identifiers and Comments",
          "Primitive Data Types",
          "Primitive Literals",
          "Primitive Conversion",
          "Primitives",
          "Big Numbers",
          "Primitives Lab"
        ],
        "Java Syntax": [
          "Section Overview",
          "Condtionals - If / Else If / Else",
          "More on If/Else If/Else Statements",
          "Conditionals - Switch",
          "More on Switch",
          "Operators: Part 1",
          "Operators: Part 2",
          "More Operator Examples",
          "Loops",
          "Break, Continue, and Labels",
          "Enumerations (enum)",
          "Java Syntax Lab"
        ],
        "Strings": [
          "Section Overview",
          "String Objects",
          "String Operations and Operators",
          "Immutable Strings",
          "Concatenation Operator",
          "Working with Strings",
          "Pass By Value: Primitives",
          "Passing By Value: Objects",
          "Passing By Value Lab"
        ],
        "Encapsulation": [
          "Section Overview",
          "Encapsulation and Data Hiding",
          "Getters and Setters: Part 1",
          "Getters and Setters: Part 2",
          "Access Modifiers",
          "Encapsulation",
          "Encapsulation Lab"
        ],
        "Inheritance": [
          "Section Overview",
          "Inheritance: Part 1",
          "Inheritance: Part 2",
          "Chaining Constructors",
          "More On \"Protected\"",
          "Super and the First Statement Rule",
          "Overloading Methods",
          "Overriding Methods",
          "Covariant Returns",
          "The Three Faces of Final",
          "Revisiting the Switch Statement",
          "Know This For The Exam: Class/Object Invocation Order",
          "Inheritance Lab"
        ]
      },
      "requirements": [
        "You should have basic computer skills (comfortable working with a command prompt or terminal, installing software, setting environment variables, etc.)",
        "If you don't have any previous programming experience, you may find it helpful to read a brief introduction on the basic concepts (variables, functions, and control structures), such as the one found at http://codingintro.com/"
      ],
      "description": "Java is one of the most popular programming languages used in professional application development. As such, there is an extensive job market available to those who master its syntax. However, mastering a language as complex and vast as Java requires a developer to start with a solid programming foundation.  This class provides that foundation.  Those who are looking to start a career in software development, or developers who are looking to increase their marketability by learning the nuts and bolts of Java, will benefit from taking this course. To start the student on the “right track,” the lectures and labs go beyond basic syntax by including best practices and object oriented programming idioms.  In addition, the topics covered help prepare students for the Oracle Certified Associate, Java Programmer SE 8 exam (a certification which demonstrates to potential employers a fundamental level of proficiency with the language).  However, do note that this course is just as appropriate for someone who is not interested in taking the exam; if you want to learn Java, this is the course for you!",
      "target_audience": [
        "Developers who are looking to increase their marketability by learning the nuts and bolts of Java",
        "Those who are looking to start a career in software development",
        "Anyone looking to prepare for the exam to become an Oracle Certified Associate, Java Programmer SE 8 (Java SE 8 Programmer I 1Z0-808)"
      ]
    },
    {
      "title": "Python Development Professional Certification",
      "url": "https://www.udemy.com/course/python_development/",
      "bio": "Python Development Certification and preparing for other types of certification",
      "objectives": [],
      "course_content": {},
      "requirements": [],
      "description": "Welcome to the Python Development Assessment\nThat assessment helps to employees and companies in internal certification procedures.\nIts not a course with theory, its exam for certification / assessment\n\n\nUdemy doesn't provide certificates for exam type of courses yet. You may:\nInclude info about Assessment / Certification to your CV / Linked in (with choosing of MTF as a Educational Provider) after successful finishing of test\nWrite us with screens of finished tests for getting of MTF type of diploma\nplease also provide name/surname at Udemy and your preferred name for diploma\nIn case of any questions, or for certificate getting you may write us to email welcome  gtf . pt ot find the contacts at our web site gtf . pt\n\n\nCourse provided by MTF Institute of Management, Technology and Finance\nMTF is the global educational and research institute with HQ at Lisbon, Portugal, focused on business & professional hybrid (on-campus and online) education at areas: Business & Administration, Science & Technology, Banking & Finance.\nMTF R&D center focused on research activities at areas: Artificial Intelligence, Machine Learning, Data Science, Big Data, WEB3, Blockchain, Cryptocurrency & Digital Assets, Metaverses, Digital Transformation, Fintech, Electronic Commerce, Internet of Things.\nMTF is the official partner of: IBM, Intel, Microsoft, member of the Portuguese Chamber of Commerce and Industry.\nMTF is present in 208 countries and has been chosen by more than 380,000 students.\n\n\nAssessment Description:\nThe Python Development Assessment is a comprehensive test designed to evaluate the knowledge and proficiency of individuals in Python programming language. The assessment consists of 30 multiple-choice questions that cover various aspects of Python programming such as data types, control structures, functions, file handling, and object-oriented programming.\nPython is a widely used programming language, especially in the fields of data science, machine learning, and artificial intelligence. It has gained popularity among developers due to its simplicity, versatility, and readability. Python is also an interpreted language, meaning that it does not require a compilation process and is executed line by line, which makes it easy to debug and test.\nFor employees, the Python Development Assessment can be a valuable tool to assess their proficiency in Python and identify areas that need improvement. By taking the assessment, employees can demonstrate their knowledge and expertise in Python programming, which can increase their chances of getting hired or promoted.\nMoreover, the Python Development & Coding Assessment can be used by companies as part of their recruitment and hiring process. Python programming skills are in high demand, and companies need to ensure that they are hiring candidates who have the required skills and knowledge to work with Python. The assessment can help companies identify the right candidates for the job and reduce the time and resources required for the recruitment process.\nIn addition, the Python Development & Coding Assessment can also be used by companies to evaluate the skills and knowledge of their existing employees. By identifying knowledge gaps and areas that need improvement, companies can provide training and development opportunities to their employees, which can increase their productivity and contribute to the success of the company.\nOverall, Python development skills are highly sought after in the job market, especially in fields such as data science, machine learning, and artificial intelligence. Having a strong foundation in Python programming can open up a wide range of career opportunities for individuals.\nPython is also a popular language for building web applications, scripting, and automation. Many companies use Python to develop their internal tools and applications, which can improve the efficiency and productivity of their operations.\n\n\nLinked topics:\nAssessment\nCertification\nPython\nPython Development\nPython Coding\nPython Certification\nPython Assessment\nCoding Interview\nmachine learning\npython programming\nSoftware Engineering\nSoftware Development\nsoftware developer\nit business analyst\nit system analyst\nProgramming Fundamentals\nCoding",
      "target_audience": [
        "For anybody who want to get certification at Python Development or prepare to exams at other certification and learning providers"
      ]
    },
    {
      "title": "Python & Cryptocurrency API: Build 5 Real World Applications",
      "url": "https://www.udemy.com/course/coinmarketcap/",
      "bio": "Build five projects using live cryptocurrency data from the web. We will use the free CoinMarketCap crypto API.",
      "objectives": [
        "Use the CoinMarketCap API to create applications with real-time cryptocurrency data.",
        "Use APIs to fetch JSON from any website.",
        "Learn Python tips and tricks for parsing JSON and formatting information"
      ],
      "course_content": {
        "Introduction": [
          "CoinMarketCap Pro API Introduction",
          "Development Environment"
        ],
        "Global API Endpoint": [
          "Global API Endpoint",
          "Making Requests",
          "JSON trees"
        ],
        "Listings API Endpoint": [
          "Listings API Endpoint"
        ],
        "Quote API Endpoint": [
          "Quote API Endpoint"
        ],
        "Project 1: Cryptocurrency Portfolio": [
          "Project 1 Introduction",
          "Project 1 Implementation"
        ],
        "Project 2: Cryptocurrency Alerts": [
          "Project 2 Introduction",
          "Project 2 Implementation"
        ],
        "Project 3: Top 100 Cryptocurrency Ranker": [
          "Project 3 Introduction",
          "Project 3 Implementation"
        ],
        "Project 4: Future Value of Top 100 Cryptocurrencies": [
          "Project 4 Introduction",
          "Project 4 Implementation"
        ],
        "Project 5: Store Cryptocurrency Information in Excel for 1000 Currencies": [
          "Project 5 Introduction",
          "Project 5 Implementation"
        ]
      },
      "requirements": [
        "A computer and a desire to learn"
      ],
      "description": "Updated for the new PRO CoinMarketCap API in 2021!\nThe course was originally created with a version of the API that has since been depracated. This course has been revamped to include the latest PRO API!\nAre you interested in taking your Python skills to the next level?\nPython is the future of software development. Cryptocurrencies are the future of money. CoinMarketCap is the most up to date FREE API that you can access live cryptocurrency data today. And now you can learn it all from the comfort of your home.. in your own time.. without having to attend class.\nIn this course we will take a deep dive into the CoinMarketCap API endpoints and create 5 applications. We will be using the recently released CoinMarketCap v2 API.\nHear what Other Students Have To Say\n\"Great course! I love Python and Crypto and this makes perfect combination! Please make more courses similar to this!\"\n\"Great course for those interesting in Python and/or Crypto\"\n5 Bonus Projects:\nA Cryptocurrency Portfolio App\n\nTrack all of your crypto assets with ease. See the total value of all your crypto assets combined along with detailed information about each one. Positive and negative values are color coated green and red.\nA Real-Time Price Alert App\n\nGet notified when cryptocurrencies hit certain prices in USD. You can keep this program running in the background. Your computer will shout things like, 'Litecoin hit $1200!'.\n\nA Top 100 Cryptocurrency Ranking App\n\nSort by rank, daily percentage change, or daily volume. Positive and negative values are color coated green and red.\n\nPredict The Future Values of the Top 100 Cryptocurrencies\n\nExplore what the price of cryptocurrencies will be if the global market cap hits certain levels (such as world stock market levels)\n\nStore Real-Time Information on 1000 Cryptocurrencies in Excel Using Python\n\nLearn to store cryptocurrency information inside of excel workbooks using Python.\n\nMy name is Ian Annase, a software engineer who studies cryptocurrencies, astronomy, and who loves Python.\nI have created many applications with Python. I also have extensive experience with programming languages such as Java, Swift, C++, Javascript, and more.\nWhat’s stopping you from signing up to today?\nYou don't have enough time: Not a problem at all. We have designed the course so you can learn everything you need to know in less than 3 hours. In fact if you think that the course fell short on delivering topics then we will give you your MONEY BACK.\n\n\nBuy this course today and this is what you’ll get.\nI will show you how to use all aspects of the CoinMarketCap API, and show you some Python tricks along the way. Using APIs is fun and easy if you use the right tools! I will show you how to use these tools and more in this course.\nThe course is accompanied with all the Python code sample files.\n\n\nWhy learn the CoinMarketCap API?\nIt contains most up-to-date cryptocurrency information.\nUsing the API is a breeze once you learn these tools.\nMany global currencies such as GBP and JPY are supported and using them is shown in this course.\nThe CoinMarketCap API v2 is an improvement upon an API which is already great.\nWho is this for?\nThis course is for anyone who wants to take their skills to the next level. Python is a programming language that many believe to be the future of software development, and the CoinMarketCap API.",
      "target_audience": [
        "Anyone curious about using Python APIs or cryptocurrency",
        "Anyone interested in getting real-time information from APIs",
        "Anyone interested in creating their own projects using the CoinMarketCap API"
      ]
    },
    {
      "title": "C++: From Beginner to Expert",
      "url": "https://www.udemy.com/course/video-course-c-from-beginner-to-expert/",
      "bio": "If you’ve never written a line of code but want to learn how C++ works, this C++ course was made for you.",
      "objectives": [
        "How to use C++ language in action",
        "What is compiler / IDE / Variables / types of variables etc.",
        "How to work with files - fstream library (i/o operation on files)",
        "operators - arithmetic, assigment, logical, bitwise",
        "conditions like if / else / switch",
        "arrays / multi-dimensional arrays",
        "loops - for / while / do-while",
        "functions, overloading functions, passing variables to functions etc.",
        "structures",
        "referencers",
        "pointers",
        "dynamic allocation of memory",
        "creating project in IDE",
        "classes",
        "object oriented programming",
        "class and function templates",
        "namespaces",
        "exceptions",
        "input / output streams and validation of data",
        "STL: vector"
      ],
      "course_content": {
        "Introduction": [
          "Intro & info about 100+ exercises"
        ],
        "Basics": [
          "What is programming, compiler. Installing IDE",
          "Problems when compiling C++ project? Solution INSIDE for mac users too",
          "Basics of programming",
          "Variables",
          "Types of Variables",
          "Understanding Variables in C++",
          "Downloading data from the input",
          "Console Input in C++",
          "Basics Quiz (Updated Aug 25')"
        ],
        "Operators": [
          "Arithmetic and Assigment Operators",
          "Exercise: Swap Two Integer Values",
          "Explaining the Difference Between = and ==",
          "Relational Operators",
          "Logical Operators",
          "Fixing a Broken If Statement: Understanding Logical Operators",
          "Bitwise Operators (Advanced - Optional at start)",
          "Operators Quiz (Updated Feb 25')"
        ],
        "Conditions": [
          "Conditional Statements",
          "Switch",
          "Conditional Operator",
          "Calculator [EXERCISE]",
          "Conditional Statements Quiz (Updated Feb 25')"
        ],
        "Arrays": [
          "Arrays",
          "Multidimensional Arrays",
          "Array Quiz (Updated Sep 25')"
        ],
        "Loops": [
          "for",
          "Debugging an Array: Why Isn’t It Working?",
          "while and do while",
          "exercises, nested loops",
          "break and continue",
          "Why Did My Loop Stop Early? Understanding Break and Continue",
          "Loops Quiz (Updated April 25')"
        ],
        "Functions": [
          "pre-function Scope of Variables",
          "Functions",
          "Functions - return, and invoke explained in text",
          "Why Doesn’t My Function Give the Right Result? Understanding return and Function Calls",
          "How to solve coding exercises within Udemy Interface?",
          "Create function that adds nrs and return value",
          "Overloading functions",
          "Loops and functions - exercises",
          "Data Validation - exercise",
          "Why do we use cin.ignore and cin.clear()?",
          "Finding Extremes: Implementing Min and Max Functions in C++",
          "Functions Quiz (Updated April 25')"
        ],
        "References and enum": [
          "Enum Type",
          "Reference Variables",
          "Reference Variables in functions",
          "Why Didn’t My Function Change the Value? Understanding References in Functions",
          "Implement doubleValue function",
          "References and Enums Quiz (Updated April 25')"
        ],
        "Pointers": [
          "What are pointers?",
          "Name of array - Pointer",
          "Dynamic allocation of memory",
          "Strings and a pointer on a char type",
          "How to make sure to correctly free memory of dynamically allocated array?",
          "Functions and pointers",
          "I Changed the Value… or Did I? Understanding Pointers in Functions",
          "Lottery - pseudo-random numbers generator",
          "Type Casting",
          "Why do we need pointers?",
          "Pointers FAQ - most confusing parts explained!",
          "Exercise: Adding positive numbers in an array",
          "Pointers Quiz (Updated May 24')"
        ],
        "Modular C++ Project Setup": [
          "Creating project, external execution of program",
          "Preprocessor directives, Multi-file project"
        ]
      },
      "requirements": [
        "English language",
        "Code::Blocks IDE (free)"
      ],
      "description": "Save your precious time: Learn how to program in C++ in a fast and easy way!\nIf you want to learn how to program in C++ without confusion or stress - you're in the right place.\nI created this course to help beginners like you learn C++ step by step, in a way that’s clear, practical, and beginner-friendly.\nWe’ll start by understanding the fundamentals and syntax of C++ - so you build a solid base first.\n\nAs the course progresses, you’ll gradually apply what you’ve learned by writing real programs and practical examples.\nYou won’t just watch - you'll actively practice, and by the end, you’ll be writing your own C++ code with confidence.\n\n\nNo experience? No problem.\nI’ll walk you through everything from zero.\nEven if you’ve never written a single line of code or have no idea how C++ works - I’ll explain it all from the ground up.\nYou’ll finally understand how programming works, and I’ll help you break the myth that coding is only for “geniuses” or math experts.\nC++ is powerful, and I’ll show you that it’s also learnable.\nYou will bust the myth that programming is a difficult thing only for the few!\n\n\nHere’s how I’ll help you succeed:\nI’ll teach you the core concepts of C++, with real context and practical examples\nI’ll explain why we write things a certain way, not just what to type\nI’ll help you build projects so you can see your progress with every step\nI’ll show you how to use advanced C++ features with confidence\nI’ll make sure you truly understand what your code is doing\nI believe anyone can learn to program — including you — if they’re taught the right way.\nI believe that everyone has the ability to develop software if they are taught properly.\nIncluding you.\nEvery time I introduce something new, I’ll give you real context.\nBy the end, you’ll finally understand what your code is doing.\n\n\nOver 350,000 students have already joined my courses\nI’ve helped thousands of people just like you, and now it’s your turn.\nBut if it’s not what you expected, you’ve got 30 days to get a full refund — no questions asked.\n\n\nGot questions about C++ or anything from the course?\nI’m always happy to help. Just reach out - I reply to every message from students who are eager to learn.\nWatch the free preview lessons to see how I teach.\nDon’t buy a course blindly - make sure my teaching style fits you.\nJOIN NOW and become Expert in C++",
      "target_audience": [
        "beginner",
        "person who wants to understand programming"
      ]
    },
    {
      "title": "Java Swing (GUI) Programming: From Beginner to Expert",
      "url": "https://www.udemy.com/course/java-swing-complete/",
      "bio": "Learn how to create desktop and Internet GUI Java programs and take your Java programming to the next level.",
      "objectives": [
        "Learn how to write GUI (graphical user interface) applications in Java",
        "Understand the Java Swing framework",
        "Discover how to create database applications"
      ],
      "course_content": {},
      "requirements": [],
      "description": "This course teaches you how to create desktop and web-based applications using Java Swing, Java's built-in user interface toolkit. Each tutorial is fairly self-contained; but we'll also build two complete applications step by step along the way, so you can choose either to work through the whole course or to dip in and out.\nAmong other things we'll look at nearly all Swing widgets, we'll take a look at JDBC for database access, the graphics API, model-view-controller (MVC) architecture, serialization for saving data, the listener-event model and even basic animation.\nWhen you finish the course, you'll be an advanced Swing developer, capable of creating complex and scalable Swing GUI applications.",
      "target_audience": [
        "Java beginners who are OK with learning new stuff rapidly",
        "Fluent Java programmers who want to learn desktop programming in Java"
      ]
    },
    {
      "title": "x86 Assembly Language Programming From Ground Up™",
      "url": "https://www.udemy.com/course/x86-assembly-programming-from-ground-uptm/",
      "bio": "Build over 50 Assembly Programs - x86 Instruction Set, SIMD, Image Processing Algorithms, DSP Routines, MMX, SSE, AVX",
      "objectives": [
        "Master the x86 Core Instruction Set",
        "Understand the coding differences between x86-32 and x86 -64",
        "Master the x86 MMX Extension Instruction Set",
        "Master the x86 Streaming SIMD Extension (SSE) Instruction Set",
        "Master the x86 Advanced Vector Extension (AVX ) Instruction Set",
        "Develop Complex Image Processing Algorithms in x86 Assembly",
        "Develop Complex Mahtematical Algorithms in x86 Assembly",
        "Be able to understand and apply the IEEE- 754 Floating point standard",
        "Be able to create Lookup Tables and Jump Tables in x86 Assembly",
        "Be able to Write Robust Mixed C/C++ and x86 Assembly Code",
        "Master the MASM Assembler Syntax"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Getting Started": [
          "Setting Up the Development Environment",
          "Coding : Simple Assembly program",
          "Installing a Syntax Highlighter"
        ],
        "x86 Processors & Computer Architectures": [
          "Evolution of Intel Processors",
          "Harvard Architecture vs Von Neumann Architecture"
        ],
        "The Computing Device": [
          "Logic Gates",
          "From Transistors to Operating Systems",
          "Number Systems"
        ],
        "The Programmer's Model": [
          "Overview of x86 Data Types",
          "Basic x86 Microcomputer Design",
          "x86 Operating Modes",
          "Overview of the x86 Registers",
          "Coding : One Register to Rule Them All",
          "Overview of the x86 Flags",
          "Overview of the Floating Point Unit",
          "Overview of x86 Memory Models"
        ],
        "Introduction to x86 Assembly Language": [
          "Notice",
          "Overview of x86 Integers",
          "Introduction to Directives and Instructions",
          "Simple x86 Assembly Template",
          "Coding : Declaring Variables in Assembly",
          "Dealing with Data",
          "Endianness",
          "Notice",
          "Coding : Mixing C/C++ and Assembly"
        ],
        "Data Transfer Instructions": [
          "Operand Types",
          "Overview of the MOV Instruction",
          "Understanding Direct - Offset Operands",
          "Memory Addressing Modes"
        ],
        "Arithmetic Instructions": [
          "Notice",
          "The Increment and Decrement Instructions",
          "The Addition and Subtraction Instructions",
          "Data Operators and Directives",
          "Coding : Summing Array Elements",
          "Coding : Scanning an Array",
          "Coding : Using Pointers and Typedef"
        ],
        "Conditional Branching": [
          "The Jump and Loop Instructions",
          "Logic Instructions",
          "Condition Jump Instructions",
          "Instruction Operands"
        ],
        "The Nature of Mixing C/C++ and Assembly": [
          "Notice",
          "Coding : Computing the Sum of an Array",
          "Coding : Computing Signed Multiplication and Division",
          "Coding : Understanding C/C++ Calling Conventions",
          "Coding : Experimenting with different Addressing Modes",
          "Coding : Declaring Global Variables in C/C++ and using them in Assembly",
          "Coding : Experimenting with Conditional Codes"
        ]
      },
      "requirements": [
        "No programming experience needed - I'll teach you everything you need to know",
        "No paid software required - all assembly programs will be created in Microsoft Visual Studio",
        "I'll walk you through, step-by-step how to download and install Microsoft Visual Studio"
      ],
      "description": "Welcome to the x86 Assembly Programming From Ground Up™  course.\nCovering x86 Processor History , Architecture and Practical Assembly Programming,  this is the most comprehensive x86 assembly course online.\nI'll take you step-by-step through engaging and fun video tutorials and teach you everything you need to know to succeed as an x86 developer.\nBy the end of this course you will master  the x86 Core Instruction Set, the x86 MMX Extension Instruction Set, the x86 Streaming SIMD Extension (SSE) Instruction Set and the x86 Advanced Vector Extension (AVX ) Instruction Set. You will be able to develop complex Image Processing Algorithms in x86 Assembly. You will be able to develop complex mathematical algorithms in x86 assembly .You will also be able to write robust programs that mix C++ and x86 Assembly files.\nFurthermore, you will master every day  things like navigating arrays, computing the statistical properties of an array such as computing the mean and standard deviation of each row  and column. All of this written in assembly language. There is so much more. Please take a look at the full course curriculum.\nREMEMBER : I have no doubt you will love this course. Also it comes with a  FULL money back guarantee for 30 days!  So put simply, you really have nothing to loose and everything to gain.\nSign up and lets start writing some low level code.",
      "target_audience": [
        "If you are an absolute beginner to assembly programming, then take this course.",
        "If you are a seasoned programmer, then take this course to to get up to speed with the x86 architecture and assembly programming",
        "If you are switching from other architectures such ARM to x86 then this is a fast-track way of doing it. You can get started straight away with the x86 Instruction Set."
      ]
    },
    {
      "title": "Become a Good Matlab Programmer in 30 days",
      "url": "https://www.udemy.com/course/matlab-programming-fundamentals/",
      "bio": "This is the last time, you wish you could be a Matlab Programmer",
      "objectives": [
        "Matlab Programming",
        "Working with M-Files, Simulation Files, Functions and Scripts",
        "You are fully able to solve any engineering and technical project offered at University or College",
        "Be confident to solve new engineering problems and projects in your career"
      ],
      "course_content": {
        "Introduction to the Course": [
          "Important Note"
        ],
        "Introduction to Matlab Software and Matlab Suite": [
          "What is Matlab and why you should learn it too",
          "Why learn Matlab programming for your career ?",
          "Get to learn the Matlab User Interface",
          "How to save the workspace Results in Matlab environment",
          "How to use the CLC, Home and Help Commands in Matlab workspace ?",
          "Learn to run a Matlab Script like a Pro",
          "M-Files Matlab Script File Extension"
        ],
        "How to work with Mathematics in Matlab?": [
          "How to do the Basic Arithmetic functions in Matlab ?",
          "Math",
          "Create variables in Matlab and store data in them",
          "Variables",
          "Order of Operations in Matlab and how to do it the right way",
          "order of precedence in Matlab Operations",
          "Exponent & pi - Important friends of engineers",
          "pi & exponential",
          "Two sample Programs in Matlab",
          "Let's create comments in Matlab and when to use it",
          "Part 1: What is Symbolic toolbox and why I should know it very well ?",
          "Symbolic Toolbox",
          "Part 2: What is Symbolic toolbox and why I should know it very well ?",
          "Symbolic toolbox",
          "Part 3: What is Symbolic toolbox and why I should know it very well ?",
          "Chapter 2 Quizz",
          "I need your Help !",
          "Example: write a script that adds two variables together",
          "Solution to adding two variables"
        ],
        "How create, define and use Variables in Matlab like a pro?": [
          "Introduction to Variables in Matlab",
          "How to create, and manipulating variables in Matlab programming ?",
          "How to get Matlab results in different Formats ?",
          "What are Symbolic Variables, and let's build one together",
          "Let's do the calculations Symbolically. ( wish I knew it sooner )",
          "Symbolic Calculations"
        ],
        "Trigonometric Functions in Matlab": [
          "Essential Functions for engineers in Matlab",
          "Let's build Square Root function in Matlab",
          "Introduction to Trigonometry in Matlab",
          "Trigonometric Functions",
          "How to create and define Hyperbolic Functions in Matlab ?",
          "Exponential, Logarithm & Ln Functions in Matlab Programming",
          "Exponential"
        ],
        "Complex Numbers in Matlab Programming": [
          "Introduction to Complex Numbers in Matlab",
          "Complex Numbers in Matlab",
          "What are Complex Functions and how to build them in Matlab ?",
          "Complex Numbers 2",
          "Let's use Symbolic Toolbox and Complex Functions together",
          "Complex Numbers 3",
          "How to do the Symbolic Calculations using Complex numbers ?"
        ],
        "Vectors in Matlab - Let's lay the foundation": [
          "Introduction to Vectors in Matlab Programming",
          "How to change a vector in Matlab, change it and use it again ?",
          "Let's do some math on Vectors in Matlab",
          "What is the difference between Dot & Cross Products, and let's do it in Matlab",
          "How to use Statistics on Vectors in Matlab Programming ?",
          "How to extract vectors and manipulate data ?",
          "How to create Vectors and Extract data in Matlab ?",
          "Let's create some new vectors in Matlab",
          "Element by Element operation on vectors. Thanks Matlab is here !",
          "Let's make Mathematical Calculations on Vectors easy once and for all",
          "Let's build Random Vectors in Matlab and why they are so important ?",
          "Hey, I can do Statistical Analysis on Vectors too !"
        ],
        "Matrices - Let's see the Power of Matlab": [
          "Introduction to Matrices in Matlab Programming",
          "How to extract data from a Matrix ?",
          "Let's Learn to Multiply Matrices together",
          "Let's do the Element by Element Multiplication in Matrices.",
          "How to find Max, Min, Number of Elements in a Matrix ?",
          "How to augment a matrix the correct way ?",
          "Let's learn the important functions for working with Matrices here",
          "Get to know the Special Matrices we can use in Matlab Programming",
          "How create Transpose & Diagonal Matrices like a Pro?",
          "Let's solve equations using Matrices",
          "Trace, Inverse and even More features in Matrices",
          "How to works with matrices and do symbolic matrix calculations ?"
        ],
        "Introduction to Calculus, and Engineering Functions in MATLAB": [
          "How to create Functions in Matlab",
          "NEW: What is Anonymous Function ? and Why is it so important?",
          "An Introduction to Differentiation in Matlab",
          "Let do Differentiation Symbolically",
          "Let's Learn how to take Integration in Matlab",
          "How to do the Limit function in Matlab",
          "How to take Partial Derivatives for any function in Matlab"
        ],
        "Graphs & Plots in Matlab": [
          "Part 1 : Plotting in Matlab",
          "Part 2: Plotting in Matlab",
          "Part 3: Plotting in Matlab",
          "Part 4: Plotting in Matlab",
          "NEW: Let's do Matlab Plots the easy way"
        ]
      },
      "requirements": [
        "In this course we start from the very begining and no prior programming experience is required.",
        "Matlab Software",
        "Willing to Learn",
        "set daily schedule to watch the videos and complete quizzes"
      ],
      "description": "Welcome to the Ultimate Matlab Programming Course!\nDo you want to gain a competitive edge in your career? Are you looking to master one of the most important technical programming languages today? Look no further! Our comprehensive Matlab Programming course is designed to take you from a beginner level to an advanced level with over 15 hours of brand-new content.\nWhy Learn Matlab Programming?\nMatlab is not just another programming language; it's a powerful tool used by engineering companies to prototype and validate ideas before committing to building projects with other languages like Java, Python, C, and C++. In this course, we will guide you step-by-step, making it easy and understandable even if you are new to programming.\nWhat Makes Our Course Stand Out?\nLearn at your own pace: Whether you are an absolute beginner or already have some experience, our course caters to all levels, from introductory to advanced.\nGoogle-approved skills: Renowned former Google SVP/Product Management, Jonathan Rosenberg, recognizes Matlab as an essential skill to work at Google. This course offers you that very skill!\nContinuous updates: We are committed to keeping the course fresh and relevant. With new materials added every week, you'll stay up-to-date with the latest advancements in Matlab.\nComprehensive content: From Mathematics and Trigonometry to Loops, Conditions, and Advanced Plotting, our course covers it all. Plus, additional projects ensure you get hands-on practice.\nCourse Outline:\nAn Introduction to Course & All Resources\nAn Introduction to Matlab Software\nIntroduction to Mathematics in Matlab\nWorking with Variables in the Matlab Environment\nTrigonometric Functions in Matlab\nComplex Numbers in Matlab\nWorking with Vectors in Matlab\nWorking with Matrices in Matlab\nIntroduction to Calculus and Engineering Functions in Matlab\nGraphs and Plotting in Matlab\nLoops, Conditions, and Intro to Programming in Matlab\nProjects (Updated Weekly with new programming drills)\nImport Data from Excel to Matlab\nBonus Materials for the Course\nIntermediate & Advanced Topics in Matlab\nData Types and Data Structures in Matlab\nWorking with Files in Matlab Environment\nMatrices in Matlab (Intermediate Topics)\nScripts, Functions & M-Files in Matlab\nAdvanced Plotting Techniques in Matlab\nCreating Functions and Workflows in Matlab\nLogical Statements & Operations in Matlab\nAdditional Matlab Projects (Intermediate - Advanced Levels)\nNext Steps and Additional Resources, Certifications, and Benefits\nCareer Benefits and Future Updates:\nEnrolling in our course comes with more than just knowledge. We're invested in your success, offering future updates free of charge and providing valuable career tips in engineering. Embrace the opportunity to take your career to new heights with our in-demand Matlab skills.\nDon't Miss Out - Enroll Now!\nWhether you're a student, professional, or hobbyist, mastering Matlab will unlock countless opportunities in various fields. Join our course today and embark on a journey to becoming a proficient Matlab programmer. Remember, your enrollment also grants you access to all future updates, ensuring your skills stay current and relevant.\nTake the leap and become a Matlab expert! Enroll now and start your journey toward success!",
      "target_audience": [
        "Entrepreneurs",
        "Teachers",
        "Researchers",
        "High School and College Students",
        "Engineers in technical fields",
        "programmers",
        "Students"
      ]
    },
    {
      "title": "Python: From Zero to Hero - Code Your Way to the Top",
      "url": "https://www.udemy.com/course/the-python-programming-v39-comprehensive-bootcamp/",
      "bio": "Python 2024: Blast Off from Beginner to Pro - Your Coding Rocket Awaits",
      "objectives": [
        "Master the core Python skills needed to apply for python developer positions.",
        "Master industry best practices in Python software development from a professional software engineers.",
        "Go from a total beginner to an advanced python developer.",
        "A true understanding of how Python works behind the scenes.",
        "How to think in python like a python expert.",
        "Variables, Representing Data Types, and using Computational Power",
        "Data Structure for data organization, management and storage formatting",
        "Practical Flow control and Iterable aspects",
        "Building software by composing pure functions process",
        "Object-Oriented Programming model to organize software design",
        "Application containers and Handling all files",
        "Playing with Exception events and analyzing Errors",
        "Lightweight data-interchange format for humans",
        "Essentials to build Python programs from scratch.",
        "Get friendly and fast support in the Bootcamp Q&A."
      ],
      "course_content": {
        "Introduction to Python": [
          "Course Intro",
          "The Command Line and start coding",
          "Variables, Declarations, Holding different values and Assignments",
          "Identifiers rules, Keywords and Identifiers with examples",
          "Data Inputs and Outputs",
          "Common string operations",
          "String Detections",
          "Numbers and Numeric Types",
          "Hands-On Arithmetic Operations",
          "Hands-On comparisons and decisions",
          "Logical processes and choices",
          "Assignment operations in detail",
          "conditions cases and ternary in python",
          "Quiz 1",
          "Quiz 2"
        ],
        "Data Structure for data organization, management and storage formatting": [
          "Create a Python List",
          "List methods and operations 1",
          "List methods and operations 2",
          "Create Python tuples",
          "Tuple methods and operations 1",
          "Tuple methods and operations 2",
          "Tuple methods and operations 3",
          "Create Python Dictionaries",
          "dictionary methods and operations 1",
          "dictionary methods and operations 2",
          "Sets unordered collection, iterable, mutable and no duplicate elements.",
          "Quiz 3"
        ],
        "Practical Flow control and Iterable aspects": [
          "if conditional statements to make decisions",
          "catch anything which isn't caught by the preceding conditions",
          "Try this condition example",
          "condition in a single line replacing the multiline",
          "construct loops with while statements",
          "terminate the current loop and resume execution at the next statement",
          "executed if the condition in the while loop evaluates to False",
          "Positioning the increments",
          "iterating over sequences with for",
          "Quiz 4"
        ],
        "Building software by composing pure functions process": [
          "Group of related statements to specific tasks",
          "information that are passed into the block",
          "Pass Multiple data into the task",
          "giving something back or replying to the caller",
          "playing with keyword args",
          "have the arbitrary number of arguments",
          "common technique to conquer algorithms",
          "Building anonymous blocks",
          "work with multiple arguments for lambda anonymous",
          "solving problems using anonymous function inside functions",
          "Quiz 5"
        ],
        "Object-Oriented Programming model to organize software design": [
          "blueprint or prototype, bundling and functionality",
          "How to create multiple class objects",
          "handling classes and methods",
          "constructor in object oriented terminology",
          "groups of tasks that belong to the object",
          "representing the instance of the class",
          "best way to remove properties",
          "best way to remove objects",
          "modifying object properties",
          "building a super class and inheritance",
          "inherits all the methods and properties from another class",
          "Quiz 6"
        ],
        "Building Modules and SL Modules": [
          "Master all about creating modules",
          "playing with codes in modules",
          "module alias, rename, and more",
          "standard library modules",
          "Importing from file consisting of codes",
          "Quiz 7"
        ],
        "Playing with Files": [
          "Files handling L1",
          "Files Handling L2",
          "Files Handling L3"
        ],
        "Playing with Exception events and analyzing Errors": [
          "try and except block",
          "many exceptions",
          "else with exceptions",
          "finally with exceptions",
          "raising exceptions",
          "example of raising type of exceptions"
        ],
        "Lightweight data-interchange format for humans - JSON": [
          "Parse JSON - Convert from JSON to Python",
          "Convert from Python to JSON",
          "Convert Python objects into JSON strings",
          "Python read and display from JSON file",
          "Writing and placing JSON to a file",
          "Python pretty technique for JSON"
        ],
        "BONUS SECTION": [
          "Bonus lecture"
        ]
      },
      "requirements": [
        "No Python prior experience is required to take this bootcamp",
        "Computer and Text Editor or IDE or Online Editor"
      ],
      "description": "Ready to unlock the power of Python and launch your coding career into the stratosphere? Buckle up for The Python 2024: From Zero to Hero, your complete bootcamp to mastering this in-demand language and becoming a pro developer.\n\n\nThis isn't just any coding course – it's a transformation. We'll guide you, step-by-step, from absolute beginner to confident coder, equipped to tackle any programming challenge that comes your way.\n\n\nHere's what makes this bootcamp your launchpad to coding success:\nMaster the Essentials: Dive deep into variables, data types, and unleash the computational power of Python. Grasp data structures for effortless organization, and conquer practical flow control and iteration concepts.\nBuild Like a Pro: Learn to compose pure functions and build robust software. Embrace the object-oriented programming model for elegant software design. Master application containers and file handling like a seasoned developer.\nError-Proof Your Code: Confidently handle exceptions and analyze errors with ease. You'll be a debugging ninja in no time!\nSpeak the Language of Humans: lightweight data-interchange format that bridges the gap between code and human understanding.\nLearn by Doing: Reinforce your knowledge with numerous exercises and quizzes, ensuring you truly grasp every concept.\n\n\nNo More Feeling Lost:\nExpert Guidance: Get personalized support and clear explanations from our experienced instructor throughout the bootcamp. We're here to answer your questions and keep you motivated on your coding journey.\nHigh-Quality Training: Dive into a meticulously crafted curriculum with easy-to-follow demonstrations and practical examples. We make complex concepts approachable, even for complete beginners.\nA Community of Coders: Connect with fellow Python enthusiasts, share your progress, and learn from each other in a supportive and collaborative environment.\n\n\nWhy Python? It's Not Just Hype:\nThe Most Popular Language: Python reigns supreme in the programming world, opening doors to countless career opportunities.\nCoolest Kid on the Block: Python's elegant syntax and powerful features make coding a breeze. You'll be writing code that reads like plain English in no time!\nYour Imagination is the Limit: From web development to data science, artificial intelligence to machine learning, there's nothing Python can't do.\n\n\nThis bootcamp isn't just about coding – it's about unlocking your potential. You'll gain the skills, confidence, and mindset to succeed in the exciting world of software development.\nWhether you're a curious beginner or a seasoned pro looking to level up, The Python 2024 is your gateway to coding greatness.\n\n\nEnroll today and take your first step towards a brighter, more fulfilling future in tech!\n\n\nBonus Perks:\nLifetime access to the course materials: Keep learning and refreshing your skills at your own pace.\nRegular updates and new content: Stay ahead of the curve with the latest Python trends and advancements.\nExclusive community forum: Connect with other Python enthusiasts and share your coding journey.\n\n\nDon't wait – invest in your future. The Python 2024 awaits!",
      "target_audience": [
        "Python new developers",
        "Programming and software development engineering newbies",
        "Anyone who wants to dive deeply into Python 3.9 without wasting time",
        "Python developers who want to master the new features of modern python",
        "Programmers and developers who know other programming language but are new to python"
      ]
    },
    {
      "title": "Master Python programming by solving scientific projects",
      "url": "https://www.udemy.com/course/python-scientific-x/",
      "bio": "Learn scientific coding in Python from a warm-blooded scientist. Each video includes hands-on solved practice problems!",
      "objectives": [
        "Python",
        "Scientific programming",
        "Data visualization",
        "Time series analysis",
        "Modeling",
        "Regular expressions",
        "Spectral analysis",
        "Filtering",
        "Data clustering",
        "Gradient descent",
        "Text processing",
        "Data projects",
        "Data animation"
      ],
      "course_content": {
        "Introductions": [
          "Prerequisites and how to rock this course",
          "Code a Sierpinski triangle!",
          "Python via Google colab",
          "Local Jupyter notebooks via Anaconda",
          "Using the Q&A forum",
          "Index of functions in the course"
        ],
        "------------ Part 1: The basics ------------": [
          "Part 1: The basics"
        ],
        "Data types": [
          "Variables",
          "Math operators",
          "Printing and inputting",
          "Lists",
          "Tuples",
          "Booleans",
          "Dictionaries"
        ],
        "Indexing and slicing": [
          "Indexing",
          "Slicing"
        ],
        "Functions": [
          "Inputs and outputs",
          "Python libraries (numpy)",
          "Python libraries (pandas)",
          "Getting help on functions",
          "Creating functions",
          "Global and local variable scopes",
          "Classes and object-oriented programming"
        ],
        "Flow control": [
          "If-else statements",
          "For loops",
          "Continue",
          "While loops",
          "Initializing variables",
          "Function error checking and handling",
          "Multiple inputs with zip",
          "Single-line loops (list comprehension)",
          "Broadcasting in numpy"
        ],
        "Text and data visualization": [
          "fprintf and f-strings",
          "Plotting dots and lines",
          "Subplot geometry",
          "Making the graphs look nicer",
          "Adding annotations",
          "Seaborn",
          "Images",
          "Export plots in low and high resolution",
          "Sierpinski pseudocode, part II"
        ],
        "A brief aside on sharing code": [
          "Getting code from github/google-drive"
        ],
        "------------ Part 2: The projects ------------": [
          "Part 2: The projects"
        ],
        "Download all course materials": [
          "IMPORTANT: Download course materials",
          "Strategies for solving these projects"
        ]
      },
      "requirements": [
        "Know how to use a computer!",
        "Motivation to learn Python coding"
      ],
      "description": "Unleash Your Python Skills With Real World Scientific Projects\nWelcome to \"Master Python Programming by Solving Scientific Projects\". If you're searching for a course that takes a fresh, hands-on approach to learning Python while solving real-world scientific problems, you've found the right one. This course isn't just about learning a list of Python functions. It's about getting knee-deep into Python's capabilities, understanding its quirks, and leveraging it to tackle fascinating projects.\n\n\nWhy Choose This Course?\nPython is a dynamic language, widely used in the scientific community. But you're probably thinking, \"Why should I choose this Python course out of hundreds available on Udemy?\" Let's cut to the chase and focus on what makes this course unique:\nProblem Solving Approach: This course doesn't just teach Python; it reinforces the learning with an array of scientific projects that you might encounter in your academic, professional, or personal life. This strong focus on project-based learning equips you with hands-on coding experience. You'll learn how to think like a programmer and apply your skills in practical situations.\nTransparency: I’m not a Python fanatic who views it as the perfect language. I acknowledge that, like every language, Python has its idiosyncrasies. During this course, I will not shy away from Python's annoying or confusing aspects. Instead, I’ll give you a realistic and comprehensive understanding of the language, including its strengths and weaknesses.\nBroad Spectrum of Projects: From text processing to time series filtering, from simulating a brain circuit to plotting state-space trajectories, from biomedical signal processing to cryptocurrency investing, this course brings a wide range of projects to the table. Each project is meticulously crafted to ensure you gain the maximum knowledge and practical skills from it.\nInteractive Community: In the course Q&A, you'll have the chance to interact with me and your fellow students. Here, I discuss Python coding strategies, data types, scientific coding best practices, and more. Sharing your own clever code solutions and learning from others' experiences will further enhance your learning journey.\nCoding with ChatGPT: Gain insights on how to use ChatGPT, a sophisticated AI language model developed by OpenAI, to assist you with boilerplate code and debug your scripts. This interactive feature makes coding more intuitive and efficient, especially when you're stuck with bugs or need a quick solution.\n\n\nWhat should you do now?\nTake a look at the preview videos to get a glimpse of my teaching style and the course content.\nCheck out the reviews of this course. The positive feedback and experiences shared by students will give you a good sense of what to expect.\nAlso, do check out the reviews of my other courses to understand my dedication and passion for teaching.\nEmbark on this exciting journey and join today! Together, we will dive deep into the world of Python, solving intriguing scientific problems along the way. This course is more than just a learning experience—it's an adventure through the realms of Python and scientific coding.",
      "target_audience": [
        "Total beginners to Python",
        "(optional) some experience in other languages (e.g., MATLAB or R)",
        "Interest in using Python for data, science, engineering, physics, biology"
      ]
    },
    {
      "title": "Python Development & Data Science: Variables and Data Types",
      "url": "https://www.udemy.com/course/python-development-data-science-variables-and-data-types/",
      "bio": "Python Development, Data Science: Variables and Data Types Course by MTF Institute",
      "objectives": [
        "Python Development",
        "Variables and Data Types",
        "An overview of different data types",
        "Numeric Data Types",
        "Boolean Data",
        "input() function",
        "String as a data type",
        "Constants"
      ],
      "course_content": {
        "Introduction": [
          "Onboarding to the learning process",
          "Welcome to MTF"
        ],
        "Variables and Data Types": [
          "What is a variable",
          "An overview of different data types",
          "Numeric Data Types",
          "Boolean Data",
          "input() function",
          "String as a data type",
          "Constants"
        ],
        "Interactive Part, Next Steps and Answers to Questions": [
          "Interactive Part",
          "Congratulations with finishing from MTF",
          "Bonus Section: Next Steps"
        ]
      },
      "requirements": [
        "For a better learning experience, we suggest you to use a laptop / mobile phone / pen and paper for taking notes, highlighting important points, and making summaries to reinforce your learning."
      ],
      "description": "Welcome to course: Python Development & Data Science: Variables and Data Types\nits the module of program \"Professional Diploma in Python Development\"\nYou may join that course separately, or join the full program.\n\n\nCourse provided by MTF Institute of Management, Technology and Finance\nMTF is the global educational and research institute with HQ at Lisbon, Portugal, focused on business & professional hybrid (on-campus and online) education at areas: Business & Administration, Science & Technology, Banking & Finance.\nMTF R&D center focused on research activities at areas: Artificial Intelligence, Machine Learning, Data Science, Big Data, WEB3, Blockchain, Cryptocurrency & Digital Assets, Metaverses, Digital Transformation, Fintech, Electronic Commerce, Internet of Things.\nMTF is the official partner of: IBM, Intel, Microsoft, member of the Portuguese Chamber of Commerce and Industry.\nMTF is present in 208 countries and has been chosen by more than 380,000 students.\n\n\n\n\nCourse Author:\nStanisław Marek Halkiewicz\nI am a seasoned educator specializing in the domains of econometrics, statistics, statistical programming, and mathematics, boasting an extensive track record exceeding three years. Notably, I have imparted my expertise to students hailing from prestigious global universities, solidifying my standing as a sought-after tutor. I have made significant contributions in research endeavors spanning statistics, econometrics, and statistical programming. Furthermore, my professional trajectory encompasses a diverse spectrum, ranging from project management to business intelligence and Data Science.\n\n\nCourse Description:\nCourse designed to introduce individuals to the world of Python programming. Python has gained immense popularity in recent years for its simplicity, versatility, and readability. This course is ideal for beginners who are new to programming.\n\n\nImportance For Companies:\nVersatility: Python is versatile and can be used for a wide range of applications, from web development and data analysis to artificial intelligence and automation. Companies can benefit from having Python developers who can adapt to various projects.\n\n\nProductivity: Python's clean and readable syntax allows developers to write code more quickly and efficiently. This results in faster project development and reduced costs for companies.\n\n\nLarge Ecosystem: Python has a vast ecosystem of libraries and frameworks, making it easier for companies to find solutions to their specific needs. This reduces the need for reinventing the wheel.\n\n\nData Analysis and AI: Python is a go-to language for data analysis and machine learning. Companies can leverage Python to extract valuable insights from data and build AI-driven applications.\n\n\nCommunity and Support: Python has a strong and active community of developers. Companies can tap into this community for support, resources, and talent recruitment.\n\n\nImportance For Developers:\n\n\nCareer Opportunities: Learning Python opens up a wide range of career opportunities in various industries. Python developers are in high demand, and their skills are transferable to different domains.\n\n\nDiversity of Roles: Python developers can work in roles such as web developer, data analyst, data scientist, machine learning engineer, and more. This diversity allows developers to explore different areas of interest.\n\n\nEase of Learning: Python's straightforward syntax makes it an ideal choice for beginners in programming. It's also accessible to experienced developers looking to add another language to their skill set.\n\n\nContinuous Growth: Python is constantly evolving, with new libraries and frameworks being developed. This means that developers who invest in Python education can continue to grow their skill set over time.\n\n\nRemote Work Opportunities: Python development often allows for remote work, providing developers with flexibility in their careers.\n\n\nThe course provides a foundation for individuals looking to embark on a career in programming or expand their skill set. Python's significance in the tech industry, its versatility, and its demand in the job market make it a valuable asset for both companies and developers aiming to excel in today's technology-driven world.",
      "target_audience": [
        "Course Description: Introduction to Python Development is a course designed to introduce individuals to the world of Python programming. Python has gained immense popularity in recent years for its simplicity, versatility, and readability. This course is ideal for beginners who are new to programming.",
        "Course designed to introduce individuals to the world of Python programming. Python has gained immense popularity in recent years for its simplicity, versatility, and readability. This course is ideal for beginners who are new to programming. Importance For Companies: Versatility: Python is versatile and can be used for a wide range of applications, from web development and data analysis to artificial intelligence and automation. Companies can benefit from having Python developers who can adapt to various projects.",
        "Productivity: Python's clean and readable syntax allows developers to write code more quickly and efficiently. This results in faster project development and reduced costs for companies. Large Ecosystem: Python has a vast ecosystem of libraries and frameworks, making it easier for companies to find solutions to their specific needs. This reduces the need for reinventing the wheel. Data Analysis and AI: Python is a go-to language for data analysis and machine learning. Companies can leverage Python to extract valuable insights from data and build AI-driven applications.",
        "Community and Support: Python has a strong and active community of developers. Companies can tap into this community for support, resources, and talent recruitment.",
        "Importance For Developers: Career Opportunities: Learning Python opens up a wide range of career opportunities in various industries. Python developers are in high demand, and their skills are transferable to different domains. Diversity of Roles: Python developers can work in roles such as web developer, data analyst, data scientist, machine learning engineer, and more. This diversity allows developers to explore different areas of interest. Ease of Learning: Python's straightforward syntax makes it an ideal choice for beginners in programming. It's also accessible to experienced developers looking to add another language to their skill set.",
        "Continuous Growth: Python is constantly evolving, with new libraries and frameworks being developed. This means that developers who invest in Python education can continue to grow their skill set over time. Remote Work Opportunities: Python development often allows for remote work, providing developers with flexibility in their careers. The course provides a foundation for individuals looking to embark on a career in programming or expand their skill set. Python's significance in the tech industry, its versatility, and its demand in the job market make it a valuable asset for both companies and developers aiming to excel in today's technology-driven world."
      ]
    },
    {
      "title": "Introduction to Windows PowerShell 5.1",
      "url": "https://www.udemy.com/course/windows-powershell-training/",
      "bio": "Install PowerShell 5.1, Understand PowerShell Syntax, Setup a PowerShell IT lab, Manage Active Directory with Powershell",
      "objectives": [
        "Understand the Powershell command line",
        "How to write Powershell scripts to automate redundant tasks",
        "Install and Update Windows PowerShell",
        "Learn the Basics of Windows PowerShell 5.1",
        "Introduction to the Text Based Console and Intelligent Scripting Environment (ISE)",
        "Utilize the PowerShell Help System",
        "Finally Understand PowerShell Syntax",
        "Understand Objects, Properties and Methods",
        "Understand the PowerShell Pipeline",
        "Create and Manage Active Directory Users with PowerShell",
        "Create and Delete Organizational Units with PowerShell"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Windows PowerShell System Requirements"
        ],
        "Getting Started with Windows PowerShell": [
          "Section Overview",
          "The Basics of PowerShell",
          "PowerShell Versions and VSC",
          "Installing and Updating PowerShell",
          "The Text Based Console - Part 1 - An Overview",
          "The Text Based Console - Part 2 - An Overview",
          "The ISE - Part 1 (Intelligent Scripting Environment)",
          "The ISE - Part 2 - (Intelligent Scripting Environment)",
          "Setting up Visual Studio Code for PowerShell",
          "Quiz for Section 2 - Getting Started with Windows PowerShell"
        ],
        "Getting Help and Finding Commands": [
          "Section Overview",
          "Part 1- Getting Help and Finding Commands",
          "Part 2 - Getting Help and Finding Commands",
          "Part 3 Getting Help and Finding Commands",
          "Help System Questions",
          "Help System Answers 1 - 4",
          "Help System Answers 5 - 9",
          "Common Commands"
        ],
        "The Language of PowerShell - Command Syntax": [
          "Section Overview",
          "Command Syntax Part 1",
          "Command Syntax Part 2",
          "Command Syntax Part 3",
          "Command Syntax Questions",
          "Command Syntax Answers"
        ],
        "The Language of PowerShell - Objects and Properties": [
          "Section Overview",
          "Objects-Properties and Methods - Part 1",
          "Objects-Properties and Methods - Part 2",
          "Objects-Properties and Methods - Part 3",
          "Questions 1-9 - Objects-Properties and Methods -",
          "Answers to Questions 1-7",
          "Answers to Questions 8-9"
        ],
        "The Language of PowerShell - The Pipeline": [
          "Section Overview",
          "The Pipeline Part 1",
          "The Pipeline Part 2"
        ],
        "PowerShell Providers": [
          "What are PowerShell Providers",
          "How to Use PDDrive",
          "PowerShell Provider Cmdlets -1",
          "PowerShell Provider Cmdlets - 2",
          "Student Assignments"
        ],
        "PowerShell Arrays and Variables": [
          "PowerShell Variables",
          "PowerShell Arrays",
          "PowerShell Variables Challenge",
          "PowerShell Variables Solution"
        ],
        "PowerShell Loops": [
          "For Loops",
          "While Loops",
          "Do Loops",
          "ForEach Loops",
          "Loop Breaks"
        ],
        "PowerShell Functions and Conditional Statements": [
          "PowerShell Conditional Statements (If Then Else, Switch)",
          "Understanding PowerShell Functions and Function Scope",
          "PowerShell Functions",
          "PowerShell Conditional Statements and Functions Challenge",
          "PowerShell Conditional Statements and Functions Solution"
        ]
      },
      "requirements": [
        "The ability to run or install Windows Powershell"
      ],
      "description": "This course is designed to provide you with a solid foundation of Windows PowerShell 5.1. We will start with the basics of PowerShell 5.1 and end with you writing your own powerful automation scripts.\nIn this course we will cover the following major topics:\nThe basics of Windows PowerShell\nWindows PowerShell system requirements\nInstalling and Updating Windows PowerShell\nHow to use the CLI (Command Line Interface)\nHow to use the ISE (Intelligent Scripting Environment)\nHow to get help and find commands within the CLI\nGetting Started with Windows PowerShell\nGetting Help and Finding Commands\nThe Language of PowerShell - Command Syntax, Objects and Properties, and the Pipeline\nSetup your own PowerShell On Premises IT Lab\nBasic Active Directory Domain Administration with Windows Powershell\nAn introduction to Desired State Configuration made simple!\nAnd MUCH more!\nOnce we have covered this foundation, we will move on to writing PowerShell scripts. We will start with simple tasks before moving on to more advanced and complicated script writing.",
      "target_audience": [
        "Help Desk Professionals that would like to automate redundant tasks",
        "Beginners and experienced Powershell administrators who would like to sharpen their IT coding skills"
      ]
    },
    {
      "title": "Design Patterns in C# and .NET",
      "url": "https://www.udemy.com/course/design-patterns-csharp-dotnet/",
      "bio": "Discover the modern implementation of design patterns with C# and .NET",
      "objectives": [
        "Recognize and apply design patterns",
        "Refactor existing designs to use design patterns",
        "Reason about applicability and usability of design patterns"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "The SOLID Design Principles": [
          "Overview",
          "Single Responsibility Principle",
          "Open-Closed Principle",
          "Liskov Substitution Principle",
          "Interface Segregation Principle",
          "Dependency Inversion Principle",
          "Summary"
        ],
        "Builder": [
          "Gamma Categorization",
          "Overview",
          "Life Without Builder",
          "Builder",
          "Fluent Builder",
          "Fluent Builder Inheritance with Recursive Generics",
          "Stepwise Builder",
          "Functional Builder",
          "Faceted Builder",
          "Builder Coding Exercise",
          "Summary"
        ],
        "Factories": [
          "Overview",
          "Point Example",
          "Factory Method",
          "Asynchronous Factory Method",
          "Factory",
          "Object Tracking and Bulk Replacement",
          "Inner Factory",
          "Abstract Factory",
          "Abstract Factory and OCP",
          "Factory Coding Exercise",
          "Summary"
        ],
        "Prototype": [
          "Overview",
          "ICloneable is Bad",
          "Copy Constructors",
          "Explicit Deep Copy Interface",
          "Prototype Inheritance",
          "Copy Through Serialization",
          "Prototype Coding Exercise",
          "Summary"
        ],
        "Singleton": [
          "Overview",
          "Singleton Implementation",
          "Testability Issues",
          "Singleton in Dependency Injection",
          "Monostate",
          "Per-Thread Singleton",
          "Ambient Context",
          "Singleton Coding Exercise",
          "Summary"
        ],
        "Adapter": [
          "Overview",
          "Vector/Raster Demo",
          "Adapter Caching",
          "Generic Value Adapter",
          "Adapter in Dependency Injection",
          "Adapter Coding Exercise",
          "Summary"
        ],
        "Bridge": [
          "Overview",
          "Bridge",
          "Bridge Coding Exercise",
          "Summary"
        ],
        "Composite": [
          "Overview",
          "Geometric Shapes",
          "Neural Networks",
          "Composite Specification",
          "Composite Coding Exercise",
          "Summary"
        ],
        "Decorator": [
          "Overview",
          "Custom String Builder",
          "Adapter-Decorator",
          "Multiple Inheritance with Interfaces",
          "Multiple Inheritance with Default Interface Members",
          "Dynamic Decorator Composition",
          "Detecting Decorator Cycles",
          "Static Decorator Composition",
          "Decorator in Dependency Injection",
          "Decorator Coding Exercise",
          "Summary"
        ]
      },
      "requirements": [
        "Good understanding of C#",
        "Familiarity with latest C# features",
        "Good understanding of object-oriented design principles"
      ],
      "description": "Course Overview\nThis course provides a comprehensive overview of Design Patterns in C# and .NET from a practical perspective. This course in particular covers patterns with the use of:\nThe latest versions of C# and the .NET framework\nUse of modern programming approaches: dependency injection, reactive programming and more\nUse of modern developer tools such as ReSharper\nDiscussions of pattern variations and alternative approaches\nThis course provides an overview of all the Gang of Four (GoF) design patterns as outlined in their seminal book, together with modern-day variations, adjustments, discussions of intrinsic use of patterns in the language.\nWhat are Design Patterns?\nDesign Patterns are reusable solutions to common programming problems. They were popularized with the 1994 book Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma, John Vlissides, Ralph Johnson and Richard Helm (who are commonly known as a Gang of Four, hence the GoF acronym).\nThe original book was written using C++ and Smalltalk as examples, but since then, design patterns have been adapted to every programming language imaginable: C#, Java, PHP and even programming languages that aren't strictly object-oriented, such as JavaScript.\nThe appeal of design patterns is immortal: we see them in libraries, some of them are intrinsic in programming languages, and you probably use them on a daily basis even if you don't realize they are there.\nWhat Patterns Does This Course Cover?\nThis course covers all the GoF design patterns. In fact, here's the full list of what is covered:\nSOLID Design Principles: Single Responsibility Principle, Open-Closed Principle, Liskov Substitution Principle, Interface Segregation Principle and Dependency Inversion Principle\nCreational Design Patterns: Builder, Factories (Factory Method and Abstract Factory), Prototype and Singleton\nStructrural Design Patterns: Adapter, Bridge, Composite, Decorator, Façade, Flyweight and Proxy\nBehavioral Design Patterns: Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Null Object, Observer, State, Strategy, Template Method and Visitor\nWho Is the Course For?\nThis course is for .NET/C# developers who want to see not just textbook examples of design patterns, but also the different variations and tricks that can be applied to implement design patterns in a modern way. For example, the introduction of the DLR allows us to use an ImpromptuObject, so that our DynamicObject exposes any interface we desire. This allows for dynamic programming, and many design patterns are presented in terms of their static and DLR-based variations.\n\nPresentation Style\nThis course is presented as a (very large) series of live demonstrations being done in Microsoft Visual Studio. Most demos are single-file, so you can download the file attached to the lesson and run it in Visual Studio, Visual Studio Code, Rider or another IDE of your choice.\n\nThis course does not use UML class diagrams; all of demos are live coding. I use Visual Studio, various NuGet packages, R# unit test runner and even dotMemoryUnit.",
      "target_audience": [
        "Beginner and experienced developers",
        "Anyone interested in design patterns"
      ]
    },
    {
      "title": "Learn to Code with Ruby",
      "url": "https://www.udemy.com/course/learn-to-code-with-ruby-lang/",
      "bio": "Learn to program in the Ruby programming language. Newly updated in 2023 with Ruby 3.2. Complete beginners welcome!",
      "objectives": [
        "Learn to program in the Ruby programming language",
        "Master common Ruby objects like Strings, Arrays, Hashes, and more",
        "Solve popular coding challenges and algorithms with Ruby",
        "Dive into object-oriented programming including classes and more"
      ],
      "course_content": {
        "Introduction and Installation": [
          "Welcome to Ruby [SLIDES]",
          "Object-Oriented Programming [SLIDES]",
          "Ruby Installation Instructions",
          "macOS - Access and Work with the Terminal",
          "macOS - Install XCode Command Line Tools",
          "macOS - Install Homebrew",
          "macOS - Install rbenv",
          "macOS - Install Ruby",
          "macOS - Install VSCode Text Editor",
          "Windows - Access and Work with PowerShell",
          "Windows - Figure Out if System is 32-bit or 64-bit",
          "Windows - Install Ruby",
          "Windows - Install VSCode Text Editor",
          "Install VSCode Extensions",
          "Add VSCode to Your System PATH",
          "Download Course Materials",
          "Write First Ruby File and Run with Code Runner",
          "Write First Ruby File and Run with Terminal or PowerShell",
          "Interactive Ruby (IRB)",
          "Section Review [SLIDES]"
        ],
        "Getting Started": [
          "The puts Method",
          "Escape Characters",
          "The print Method",
          "The p Method",
          "Comments",
          "Outputting Text",
          "Multiline Comments",
          "Integers and Floating Point Numbers",
          "Basic Arithmetic in Ruby",
          "String Concatenation",
          "Intro to Exceptions: TypeError",
          "Output and Arithmetic",
          "Section Review [SLIDES]"
        ],
        "Variables": [
          "Variables [SLIDES]",
          "Declaring Variables",
          "Variable Declaration",
          "Coding Exercise Solution: Variable Declaration",
          "Exceptions: NameError",
          "Parallel Variable Assignment",
          "Swapping Variable Values",
          "Assignment Shortcuts",
          "Constants",
          "Section Review [SLIDES]"
        ],
        "Object Methods": [
          "Intro to Object Methods",
          "Integer Methods",
          "Intro to Object Methods",
          "Coding Exercise Solution: Intro to Object Methods",
          "Exceptions: NoMethodError",
          "Method Chaining",
          "The inspect Method",
          "The nil Object",
          "String Interpolation",
          "The gets Method",
          "The class Method",
          "Methods to Convert Objects",
          "Section Review [SLIDES]"
        ],
        "Booleans and Predicate Methods": [
          "Intro to Booleans",
          "The Equality Operator",
          "The Inequality Operator",
          "Mathematical Comparisons",
          "Predicate Methods",
          "Methods with Arguments (include?)",
          "Methods with Multiple Arguments",
          "Arithmetic Methods",
          "Float Methods",
          "Section Review [SLIDES]"
        ],
        "Methods": [
          "Intro to Methods",
          "Parameters and Arguments",
          "Multiple Method Parameters",
          "Manipulating Arguments",
          "Local Variables",
          "Return Values I",
          "Return Values II: Implicit Return Values",
          "Methods",
          "Coding Exercise Solution: Methods",
          "Optional Parameters and Default Arguments",
          "Optional Parameters and Default Arguments",
          "Coding Exercise Solution: Optional Parameters and Default Arguments",
          "Section Review [SLIDES]"
        ],
        "Blocks": [
          "Introduction to Blocks with the times Method",
          "Intro to Blocks",
          "Coding Exercise Solution: Intro to Blocks",
          "Block Variables",
          "Block Variables",
          "Coding Exercise Solution: Block Variables",
          "The upto and downto Methods",
          "The step Method",
          "Section Review [SLIDES]"
        ],
        "Conditionals": [
          "The if Statement",
          "Predicate Methods in if Statements",
          "Truthiness and Falsiness",
          "if Statements",
          "Coding Exercise Solution: if Statements",
          "if and elsif",
          "if and else",
          "if, else and elsif",
          "Coding Exercise Solution: if, else and elsif",
          "Multiple Conditions with And Operator (&&)",
          "Multiple Conditions with Or Operator (||)",
          "Multiple Conditions",
          "Coding Exercise Solution: Multiple Conditions",
          "Parentheses Precedence",
          "Nested if Statements",
          "Ternary Operator",
          "Call A Method from Another Method",
          "The case Statement",
          "The unless Keyword",
          "Statement Modifiers",
          "Conditional Assignment Operator",
          "Section Review [SLIDES]"
        ],
        "Strings I": [
          "Single Quotes vs Double Quotes",
          "Multiline Strings",
          "String Comparisons",
          "String Concatenation Options",
          "The length and size Methods",
          "Length and Comparison",
          "Coding Exercise Solution: Length and Comparison",
          "Intro to Index Positions",
          "Index Positions",
          "Coding Exercise Solution: Index Positions",
          "Extract Multiple Characters from a String",
          "String Slicing",
          "Coding Exercise Solution: String Slicing",
          "Overwrite Characters in String",
          "The insert Method",
          "The empty? and nil? Methods",
          "Case Methods",
          "The reverse Method",
          "Bang Methods on Strings",
          "Section Review [SLIDES]"
        ],
        "Loops": [
          "The while Loop",
          "The until Loop",
          "FizzBuzz Problem",
          "FizzBuzz Solution",
          "The next Keyword",
          "The break keyword",
          "Recursion I",
          "Recursion II",
          "Section Review [SLIDES]"
        ]
      },
      "requirements": [
        "Basic text editing skills",
        "Basic computer skills (web browsing, app installation, file navigation)"
      ],
      "description": "Welcome to the most comprehensive Ruby course available on Udemy! An in-depth overview of coding with Ruby, a popular programming language renowned for its simplicity and elegance. Whether you've never written a line of code before or are looking to learn a brand new language, this course covers all bases!\nLearn to Code with Ruby offers more than 40+ hours of video tutorials, 250+ lectures, and dozens of quizzes and coding exercises to test your knowledge as you proceed through the course.\n\nLessons include:\nInstallation and configuration for both Mac OS and Windows systems\nCommon programming concepts (variables, arithmetic, output)\nObjects and methods\nStrings\nNumbers\nBooleans\nMethods and Conditionals\nRanges\nArrays\nHashes\nBlocks, Procs, and Lambdas\nDates and times\nFile Input and Output\nRegular Expression\nClasses, Modules, and Inheritance\nand more!\nRuby is a language released by Yukihiro Matsumoto in 1995 that bills itself as \"a programmer's best friend\". Every aspect of Ruby is designed to make programming easier for the developer. There is no better first language if you're interested in learning how to program.\nRuby also serves as the foundation for Ruby on Rails, a popular web framework that powers over 1.2 million websites worldwide. The course offers an extensive introduction to the base language you'll need to know if you intend to tackle web development in the future.\nCheck out the sample videos below to get a taste of what the course has to offer!\nSo if you're ready to commit yourself, if you're eager to expand your knowledge of programming, if you're ready to discover what makes this elegant language so loved by developers, you are ready to Learn to Code with Ruby!\nThanks for checking out the course!",
      "target_audience": [
        "Beginning programmers who want to start with an easy, human-friendly language",
        "Intermediate coders who are interested in exploring the Ruby language in greater depth",
        "Web development folk curious about the foundation of Ruby on Rails"
      ]
    },
    {
      "title": "Master Drools Programming - Learn How to Write Drools Rules",
      "url": "https://www.udemy.com/course/master-drools/",
      "bio": "Learn how to run and write rules for Drools Rule Engine using DRL files and how to work with spredsheet decision tables",
      "objectives": [
        "Program rules in Drools 7 domain specific language",
        "Learn Drools language constructs like insert, modify, exists, forall, insertLogical, salience, agenda-group etc",
        "Create spreadsheet decision tables and spreadsheet templates",
        "What is Complex Event Processing and how Drools handles it",
        "How to use rule templates (DRT or Freemarker) and run dynamically defined DRL",
        "Understand different Drools running modes (active/passive, cloud/stream, sequential)",
        "How Drools works internally and what to keep in mind for writing faster performing rules"
      ],
      "course_content": {
        "1. Introduction": [
          "Introduction to the course",
          "What is a Rule Engine?",
          "How to Design Rules and When (not) to Use Drools",
          "Introduction to Drools Language Syntax"
        ],
        "2. Example Code and Running it Locally": [
          "Structure of Example Code",
          "Drools New Syntax - OOPath",
          "Get example code running with IntelliJ IDEA Community Edition",
          "Get example code running with Eclipse",
          "Get example code running with Visual Studio Code (VS Code)"
        ],
        "3. Stateless Sessions": [
          "Introduction to Stateless Sessions",
          "Stateless use cases",
          "Step1: First two rules to validate passports",
          "Step2: Split a rule",
          "Step3: Bind a variable",
          "Step4: Using the bound variable",
          "Steps 5 and 6: Avoid repetitions",
          "Stateless Sessions Summary"
        ],
        "4. Stateful Sessions": [
          "Introduction to Stateful Sessions",
          "Step1: Modify the Object in the Middle of Session",
          "Step2: Inference",
          "Stateful Sessions Summary"
        ],
        "5. Cross Products - Drools Version of SQL JOIN": [
          "Introduction to Cross Products",
          "Step1: Join Visa Application to a Passport",
          "Fixed a bug in the upcoming lecture",
          "Step2: Is the Passport Valid 6 Months After Trip?",
          "Step3: Check that the property is not already with the given value",
          "Pattern Matching and Cross Products Summary"
        ],
        "Insert new facts and determine the execution order": [
          "Intro to Adding New Facts & Setting Execution Order",
          "Rule Dialect Change",
          "Note about upcoming Step",
          "Step1: Create a New Fact and Insert it into the Session",
          "Step2: Control execution order with salience",
          "Step3: Control execution order with agenda groups",
          "Step4: Use agenda groups with salience",
          "Step5: Run a single rule from an activation group",
          "Bonus Step! Step 6. Set Focus to Agenda Group In Drools Rule.",
          "Summary of Adding Facts and Setting Execution Order"
        ],
        "Insert a fact logically and check that the fact does not exist": [
          "Introduction to Logical Insertion of Facts and Checking the Fact Does Not Exist",
          "Step1: Add Fact Using insertLogical()",
          "Using the optional \"this\" keyword on the left-hand-side of MVEL rules",
          "Step2: Create fact objects and check that fact does not exist",
          "Step3: Replace Changing of the Objects with Fact Objects",
          "Step4: Reduce the Number of Rules Needed by Eliminating Positive Cases",
          "Section Summary"
        ],
        "8. Exists and Forall Conditional Elements": [
          "Intro to working with groups of objects",
          "Step1: Rewrite visa application logic to support FamilyVisaApplications",
          "Step2: Exists keyword introduced",
          "Step3: Use forall to match a group of objects",
          "Step4: Use forall to extract objects from a group based on min/max value",
          "Step5: Forall with only one expression",
          "Summary of Working with Groups of Facts"
        ],
        "9. Spreadsheet Decision Tables": [
          "Spreadsheet decision tables intro",
          "A new GitHub repository for code examples",
          "Basic layout of a spreadsheet decision table",
          "Defining multiple action columns in a spreadsheet",
          "Using formulas in a spreadsheet decision table",
          "Set a custom DRL rule name and add a comment",
          "How to place several rule tables in one spreadsheet",
          "Multiple rule tables in one spreadsheet. Several parameters in a single cell.",
          "Join multiple fact objects in a spreadsheet decision table",
          "Using forall construct as a condition in spreadsheet decision tables",
          "Condition without a pattern in a spreadsheet decision table",
          "Set rule priority in a spreadsheet decision table",
          "Sequential attribute in RuleSet",
          "Using activation groups in spreadsheet decision tables",
          "Drools sequential mode",
          "Using custom labels in spreadsheet decision tables",
          "Recap Spreadsheet Decision Tables"
        ],
        "Rule templates and creating rules dynamically": [
          "Rule templates intro",
          "Using Drools Rule Templates (DRT) for creating rules",
          "Fetching template placeholder values from a tabular data source",
          "Use Freemarker templates instead of deprecated Drools Rule Templates (DRT)",
          "Declare intermediate types in DRL",
          "How to declare enumerations in and read back objects of type declared in DRL",
          "Create and insert objects into the session that have type declared in DRL",
          "Rule templates recap"
        ]
      },
      "requirements": [
        "You should have basic understanding of Java programming"
      ],
      "description": "We learn Drools DSL (Drools programming language) and go over the most common DSL constructs. We move in small steps and gradually introduce new concepts so it is easier to follow even for a beginner.\nThis way we cover the most common Drools topics like:\nwhat is a rule engine\nwhat is the difference between a method and a rule\nwhy one would use a rule engine instead of writing regular Java code\nunderstanding of the when/then clauses\nunderstanding in which order the rules fire and when the order is not known\nhow to control the execution using activation groups, agenda groups and salience\ndeclaring variables in DRL\ndifference between stateless and stateful sessions\ninserting facts and modifying existing objects in the session\ncross products (similar to SQL join)\nexists, forall and collect\nusing spreadsheet decision tables to create Drools rules\nusing templates for creating rules and feeding data into them from spreadsheets and other tabular data sources\ncomplex event processing (CEP) in Drools\ndifference between fact and event\ndeclaring facts and events in Java and inside DRL code\ndifferent rule execution modes (active/passive, cloud/stream, sequential)\ntime and length-based sliding windows\nentry-points\nglobal variables\ntimers\nhow Drools internal algorithm Phreak works\nThis course comes with two Java projects containing all the code we worked with during the course. The first project includes all the code examples in traditional Drools syntax and a second copy of all the rules in the new Drools OOPath syntax (introduced by Drools 8). The first project has been upgraded to run using Drools 10 (which was released in December 2024!).\nYou are encouraged to check out and run the code yourself to better understand and experiment with making changes to it. There are instructions on running the code in IntelliJ, Eclipse, and VS Code.\nAfter completing this course, you better understand which kinds of problems could be solved with Drools and how to write the most common business rules in Drools DSL.",
      "target_audience": [
        "Developers and system architects who need to understand what a rule engine is and which type of problems can be solved with it",
        "Anyone who needs to write rules in Drools DSL programming language",
        "Developers and system architects needing more info about adding Drools rule engine to their project",
        "Anyone who is considering using Drools for writing rules or processing stream of events"
      ]
    },
    {
      "title": "Complete Javascript & jQuery Course with Bonus Vue JS Intro",
      "url": "https://www.udemy.com/course/learn-javascript-from-beginner-to-advanced/",
      "bio": "Learn Javascript, jQuery and Ajax from the start + Bonus Intro to Vue JS 3. Incudes complete written course material!",
      "objectives": [
        "The basics of Javascript from Beginner to Advanced",
        "The jQuery Framework",
        "AJAX and HTTP Requests",
        "Get external data from APIs and Work with JSON format",
        "Build dynamic web applications with Javascript",
        "The basics of Front End Web Development"
      ],
      "course_content": {
        "First Steps With Javascript": [
          "Intro to the Course",
          "First Steps with Javascript",
          "Javascript Syntax",
          "DOM - Document Object Model",
          "Working With The DOM"
        ],
        "Basics of Javascript": [
          "Variables",
          "Data Types: Strings",
          "Data Types: Numbers (Part 1)",
          "Data Types: Numbers (Part 2)",
          "Data Types: Booleans",
          "Data Types: Null and Undefined",
          "List Of Exercises # 1",
          "List Of Exercises # 1 - Solution (Part 1)",
          "List Of Exercises # 1 - Solution (Part 2)",
          "Functions",
          "Data Types: Arrays",
          "Data Types - Objects",
          "Objects Methods",
          "List Of Exercises # 2",
          "List Of Exercises # 2 (Solution - Part 2)",
          "List Of Exercises # 2 (Solution - Part 1)"
        ],
        "Diving Deeper into Javascript": [
          "Events",
          "CSS Manipulation",
          "More getElement Methods",
          "For and For in Loops",
          "While Loops",
          "Conditionals",
          "Conditionals (Part 2)",
          "Nested Loops and Conditionals",
          "Variable Scope",
          "List Of Exercises # 3",
          "List Of Exercises # 3 (Solution - Part 1)",
          "List Of Exercises # 3 (Solution - Part 2)",
          "List Of Exercises # 3 (Solution - Part 3)",
          "BOM - Browser Object Model",
          "Date & Time",
          "Challenge: Calculating Date Intervals",
          "Time Methods",
          "Challenge: Clock",
          "Break and Continue",
          "Forms",
          "Forms (Part 2)",
          "The onchange Event",
          "List Of Exercises # 4",
          "List Of Exercises # 4 (Solution - Part 1)",
          "List Of Exercises # 4 (Solution - Part 2)",
          "List Of Exercises # 4 (Solution - Part 3)",
          "List Of Exercises # 4 (Solution - Part 4)",
          "List Of Exercises # 4 (Solution - Part 5)"
        ],
        "Project # 1 - WeDesign Website": [
          "Presentation of the project",
          "Mobile Menu",
          "About Us Section",
          "Services Section",
          "Contact Form",
          "Current Year on Copyright Message"
        ],
        "jQuery": [
          "jQuery - Intro",
          "jQuery - Syntax",
          "jQuery - DOM Manipulation",
          "jQuery - Forms",
          "jQuery - Forms (Part 2)",
          "jQuery - CSS Classes Manipulation",
          "jQuery - Events",
          "Challenge: jQuery Events",
          "jQuery - Effects",
          "jQuery - Animate"
        ],
        "Project # 2 - Tshirt Price Calculator": [
          "Presentation of the project",
          "Getting the Search Parameters",
          "Update Order Details",
          "Calculate the Price",
          "Update the Product Photo",
          "The Change Event For The Quantity and Style Filters",
          "The Change Event For The Color and Quality Filters",
          "Formatting the Price"
        ],
        "Advanced Javascript": [
          "Callback Functions",
          "Error Handling",
          "Namespaces",
          "JSON - Javascript Object Notation",
          "Local Storage & Session Storage",
          "Local Storage Practical Example"
        ],
        "Ajax": [
          "Ajax - Intro",
          "Ajax - Request",
          "Ajax - Response",
          "Ajax with jQuery",
          "List Of Exercises # 5",
          "List Of Exercises # 5 (Solution - Part 1)",
          "List Of Exercises # 5 (Solution - Part 2)",
          "List Of Exercises # 5 (Solution - Part 3)",
          "List Of Exercises # 5 (Solution - Part 4)"
        ],
        "Intro to Vue JS": [
          "Welcome to the Vue JS Intro!",
          "Setting up the Workspace",
          "Declarative Rendering and Data Objects",
          "Setting up Vue Dev Tools",
          "Directives and For Loops",
          "Event Handlers - The v-on Directive",
          "A Bug in Chrome Dev Tools",
          "Event Modifiers (Stop Propagation) and Attribute Binding",
          "Filling up The Order Details Section",
          "Working with Methods"
        ]
      },
      "requirements": [
        "A computer with access to the internet",
        "Some basic knowledge in HTML /CSS"
      ],
      "description": "In this course you will learn JAVASCRIPT in a very natural and intuitive way. Our step by step method of teaching mixed with exercises, real life examples, challenges and projects will make you feel very confident with the language and become a professional Javascript programmer in just a few weeks.\nThe course includes a complete jQuery section with exercises and a cool project where you will build an online t-shirt price calculator with multiple filters.\nThere's also one whole section about AJAX and JSON where we will get external data from APIs to use in our web applications. The ending project of this section is building a Quiz Game where users can play live and try to beat the computer on questions about Music, Science, History, Entertainment and many other topics.\nBONUS: We've recently included a new section fully dedicated to give you a great introduction to Vue JS. Get ready to learn modern web development with the most popular Javascript framework in the industry.\nIf you want to learn Javascript with ease and boost your developer career, just enroll in the course today. You will get instant lifetime access and money back guarantee so you can learn at your own pace anytime you want.",
      "target_audience": [
        "Students willing to become skilled Web Developers",
        "Students who are seeking to work as Javascript programmers",
        "Anyone who wants to learn how to build app applications using Javascript"
      ]
    },
    {
      "title": "Complete Web Automation with Excel VBA",
      "url": "https://www.udemy.com/course/complete-web-automation-with-excel-vba/",
      "bio": "Fill Out Web Forms Dynamically, Navigate Web Pages Intuitively, And Extract & Manipulate Data To Increase Efficiency!",
      "objectives": [
        "Locate elements using Basic Strategies (ID, Name, Tag, Class)",
        "Search for Links using Link Text or Partial Link Text!",
        "Master XPath Location strategies and functions for hard to pinpoint elements",
        "Deal with Popups, Alerts, Notifications and Frames like a boss!",
        "Utilize Attributes to unearth embedded content",
        "Pinpoint elements using Relative or Absolute Xpath",
        "Learn the secret benefits of CSS Selectors",
        "View and Parse inner html document information",
        "Use free extensions and tools to locate best Xpath or CSS Selectors",
        "Capture Groups of Elements into Arrays, Lists or Straight to Excel!",
        "Sort and Remove Duplicates from a List Object",
        "Locate all sub elements of a div, table, or larger parent element",
        "Determine if element Exists, is Enabled, Hidden, Selected, Checked or Unchecked",
        "Evaluate hidden CSS Properties, such as 'width', 'background color', etc",
        "Understand Regular Expression (RegEx) patterns and using pattern matching",
        "Get element Position and Size and Scroll element into View when necessary",
        "Create custom error messages to evaluate comparison (Equality, Contains, NotEquals, Matches, Fail…)",
        "Discern the difference between Assert and Verify operators",
        "Programmatically hover, click, click and hold, release, right click and double click with the Mouse",
        "Send Keyboard combination presses as well as regular word character presses to the browser",
        "Drag and Drop elements or text to another area or drag files for Upload programmatically",
        "Control Timeouts and Wait default settings for PageLoad, Element searches and Server timeouts",
        "Delay execution until controls are Visible, Enabled, Text is displayed or changed, Checkboxes/Optionbuttons are selected",
        "Wait for CSS special values change or meet conditions",
        "Log In using set credentials to site",
        "Test for the presence of Dialog popups",
        "Navigate with Basic Web Controls - Back, Forward, Reload, Close Driver, Close Single page, Urls",
        "Save and Load specific user profile for WebDriver execution",
        "Enter and Exit specific embedded Frame controls and their html content",
        "Open, Access and toggle multiple tabs/windows and Select by Index, Title or Window Handle",
        "Resize and Position Browser window to user specifications",
        "Save Screenshot of Browser, Web Element(s), or entire Desktop to Excel or to a file",
        "Copy Image directly to Excel OR to Clipboard",
        "Change image dimensions and resize",
        "Compare multiple image files, generating an image of differences",
        "Cast image elements into ActiveX Image Control on worksheet or Userform!",
        "Convert Web-Table into TableElement Object and manipulate as array or directly to Excel",
        "Extract specific Web-Table column(s) instead of whole table!",
        "Dynamically select one or more Dropdown or Listbox options programmatically or using mouse clicks",
        "Deselect all options or explore 'Options' collection and properties"
      ],
      "course_content": {
        "Introduction - Getting Started & Setup": [
          "Introduction and Course Download Files",
          "Getting FAST Help and Other Freebies with Excel Ninjas Group",
          "Getting & Installing Selenium",
          "Installation Troubleshooting (skip if you don't need this!)"
        ],
        "Selenium Basics": [
          "Opening a Web Page with Multiple Browsers (2 Methods)",
          "Web Elements 101 - Type in Textbox and Click Search Button (ID,Name Selectors)",
          "HTML Overview - Popular Tags and Attributes",
          "Strategies - \"Tag\"",
          "Awful-Valentine Site Expired, But We Downloaded It!",
          "Strategies - \"Class\"",
          "Exercise 02a - Question",
          "Exercise 02a - Answer",
          "Strategies - \"LinkText\"",
          "Looking At Attributes - More Than Just TEXT!",
          "Strategies - \"PartialLinkText\"",
          "Strategies - \"CSS Selectors\" Intro",
          "How to Install a Chrome Extension",
          "CSS Selector Helper for Chrome",
          "CSS Selector Tool - ChroPath and Technical Demonstration",
          "BONUS - ChroPath Serious Upgrades - Now Called SelectorsHub",
          "BONUS - Set Value versus SendKeys To TextBox",
          "BONUS - Create or Change Any Attribute Using Javascript",
          "BONUS - New Change Attribute Custom Function and Huge Demo",
          "Set Attributes With JavaScript Easily!"
        ],
        "Advanced Find With XPath": [
          "Introduction to XPath",
          "XPath Helper Tool",
          "ChroPath with XPath for Relative and Absolute Reference Types",
          "XPath Function - Contains()",
          "XPath Function - Text()",
          "XPath Function - AND, OR",
          "XPath Function - Starts-With()",
          "XPath - Axes",
          "XPath Function - Last()",
          "Selecting a Specific Index for XPath Query!",
          "Exercise 03a - Question",
          "Exercise 03a - Answer",
          "More XPath Resources",
          "Selenium VBA Code Snippets - Chapter 1-3"
        ],
        "Working With Multiple Elements At Once": [
          "Working With a Group Of Elements (FindElements)",
          "Looping Through a Set of Elements, Declaration Tips",
          "Grab the Text For Each Element Into A List",
          "Grabbing All Attribute Values into a List",
          "Add, Remove or Change an Element from a List",
          "Get Count of List Items or Web Elements",
          "Remove Duplicates Elements from List",
          "Sorting Your List",
          "Importing Items to Excel Directly!",
          "Looping Through a List of Attributes for a Set of Elements",
          "Exercise 04a - Question",
          "Exercise 04a - Answer",
          "Finding Elements within an Element"
        ],
        "Element Properties, Methods and Useful Information": [
          "Find the Active Element",
          "Understanding the 'By' Object",
          "Does The Element Exist Using 'By' Object",
          "Does Element Exist Using WebElement Object (2 Ways!)",
          "Value, Tagname, Text & Css Properties",
          "Specialty Text Variations",
          "Discover Whether Element is Displayed, Enabled, Present, Selected...",
          "Pagination - Clicking Next Until You Reach the Last Page",
          "Element Position and Size",
          "Scrolling Element Into View",
          "Regular Expression Patterns!",
          "Return Text Based on Regular Expression (RegEx)",
          "Automatically Download File to Custom Folders with SetPreference()",
          "SetPreference Extra example!"
        ],
        "Built In Comparison Operators": [
          "Assert vs Verify",
          "Equals Comparison Operator",
          "Not Equals",
          "Contains",
          "Custom Error Messages",
          "Matches & NotMatches",
          "Fail, False and True",
          "Selenium VBA Code Snippets - Chapter 4-6"
        ],
        "Mouse and Keyboard Actions": [
          "Click, Click and Hold, Release, Right Click & Double Click",
          "SendKeys and Keys Modifiers",
          "KeyDown, KeyUp",
          "Exercise 07a - Question",
          "Exercise 07a - Answer",
          "DragAndDrop - Swapping Elements, Better with JavaScript",
          "DragAndDrop - Element Disappears Once Dropped",
          "DragAndDrop - Dragging Text Programmatically",
          "DragAndDrop - Dragging File for Upload Programmatically",
          "Hover MenuItem and Click On Submenu Item",
          "Clear Out Text Entry Element"
        ],
        "Timeouts and Waits": [
          "TimeOuts and Wait DEFAULTS",
          "Basic Wait Command",
          "Exercise 08a - Question",
          "Exercise 08a - Answer",
          "Finding Elements With a Custom TimeOut Duration",
          "Wait Until Element is Displayed",
          "Wait For Specific Text or a Specific Attribute to Appear!",
          "Wait For CSS Special Value to Appear or Change",
          "Wait for Text To Appear or Change",
          "WaitNotElement and By.Any",
          "WaitEnabled or Wait Until Element is Displayed",
          "Wait For Selection With Checkboxes and OptionButtons",
          "Selenium VBA Code Snippets - Chapter 7-8"
        ],
        "Browser Window Control, Navigation and Focus": [
          "Alerts - Using Multi Options (OK and Cancel, OK Only & Text) with An Alert",
          "SetCredentials Troubleshooting Tips and Authorization Dialog Popups",
          "Custom Function Testing Whether Dialog Popup Is Present",
          "Basic Navigation - Back, Forward, Reload, Close Driver, Close Single page, Url",
          "Setting A Custom Profile For WebDriver Session",
          "How To Add A Chrome Extension To ChromeDriver Sessions",
          "Restoring a Web Session Using Cookies (Saved in Object Variable)",
          "Restoring a Web Session Using Cookies (Saved in Worksheet)",
          "Add Special Arguments to Customize Browser Options - Incognito or Hidden Window",
          "Special Arguments List",
          "Using a Portable Version of Chrome - GoogleChromePortable",
          "AddArguments Link and Examples",
          "Grab Html Page Source and Text From Parent Elements",
          "Exercise 09a - Question",
          "Exercise 09a - Answer",
          "Keep a Permanent WebDriver that Doesn't Close On Its Own",
          "Frames and Frame Nagivation",
          "BONUS - Frame Finder Custom Function",
          "BONUS - Switch To Nested Frame Custom Function",
          "Window, Tab Manipulation by Title, Index, Previous and Next",
          "Accessing Window By Name, Handle",
          "Close All Tabs Except Main Tab",
          "Several Ways To Open a New Tab In Current Session",
          "Window Sizing and Position",
          "Selenium VBA Code Snippets - Chapter 9"
        ],
        "Image and Clipboard Manipulation": [
          "Save a Screenshot of Your Browser, Dispose Image in System Memory",
          "Save Web Element as Image",
          "Save Entire Desktop Screen as Image",
          "Copy Image Directly to Excel OR To Clipboard",
          "Image Dimensions and Resizing",
          "Compare Two Images with CompareTo and DiffCount",
          "Put Web Image Into Worksheet ActiveX Image Control",
          "Load Image Into Userform Image"
        ]
      },
      "requirements": [
        "You should already have Microsoft Excel (version 2003, 2007, 2010, 2013 or 2016). Obviously the newer the better, but VBA works the same in all versions. It's just that newer versions have more options, thus more VBA Commands to control those options.",
        "Very very basic Excel skills needed for this course. IF you know Basic to Intermediate Excel VBA, you can surely find more ways to utilize this info, but is not required as I explain everything in detail."
      ],
      "description": "Using a website has become part of everyday life in both work and play. Many of us spend hours a day scouring the web or filling out tedious forms online for work!\nBut what if we can automate these processes that steal our precious time away from us? Introducing “Complete Web Automation with Excel VBA” course. In this jam-packed, progressive course, I share over eight hours of secrets to using the popular website testing program called Selenium, ( previously only available using complicated web languages such as JavaScript or PHP). This free tool is now available to all Microsoft Excel users, but there’s very little documentation for how to use it unless you are a web developer.\nThroughout the course, I take you through all the undocumented processes, enabling you to locate and interact with any element on a webpage using a variety of strategies, from basic text & attribute searches to Advanced strategies such as XPath, CSS Selectors, and Regular Expression (RegEx) functionalities.\nYou’ll learn how to fill out web forms dynamically, navigate web pages intuitively, and extract and manipulate data to increase efficiency.\nOnce you understand how to find an element (or group of elements), you'll learn to evaluate whether elements are hidden, enabled or disabled, visible, selected, checked or unchecked, and then we'll show you how to completely control mouse and keyboard commands and positioning. Then we’ll learn how and when to trigger macros with precision using \"Timeouts and Waits\"!\nIn addition to basic navigation, I'll show you how to Open, Access and Toggle multiple tab Windows, how to resize, re-position and auto-scroll your browser window as well as use login techniques with set credentials. You'll be able to deal with pop-ups, alerts, notifications and Frames like an expert. I'll even show you the secrets of controlling the clipboard, saving screenshots to your Excel file or even taking all or parts of online tables into your spreadsheets automatically. Finally, I'll take you through drop down menus and working with list boxes to complete your WebDriver mastery.\nThe course comes loaded with several examples in each section, including several engaging and challenging exercises to help you solidify what you've learned (with solution videos immediately following).\nYou’ll receive 100% of the source code, downloadable materials and course workbooks instantly, yours to keep FOREVER. In addition, you’ll receive LIFETIME ACCESS to the course videos, including updates, BONUS videos and lectures as they come out and any future source code and workbooks – Yours to keep – FREE.\nAll students will receive LIFETIME ACCESS to ask me any questions about the materials in the FORUM section – as well as chat with other students and help each other. As always, this is backed by a 30 day 100% No questions asked refund as well.\nSo Stop wasting your time with tedious online tasks when you can automate your online workflow Today!\nOrder “Complete Web Automation with Excel VBA” course Now!",
      "target_audience": [
        "This Excel course is for anyone who wants to learn Automation secrets in Excel VBA for controlling websites. No prior programming knowledge is needed."
      ]
    },
    {
      "title": "The Python Programming For Everyone Immersive Training",
      "url": "https://www.udemy.com/course/the-python-programming-for-anyone-immersive-training/",
      "bio": "Learn, Practice, Master, Think like Python Professionals & Be A Certified Python Super Hero in short time!",
      "objectives": [
        "Master the core Python skills needed to apply for python developer career positions",
        "A true understanding of how Python works behind the scenes.",
        "Go from a total beginner to an advanced python developer.",
        "Understanding Python syntax, Comments, Variables, Data Types, Operators and Numbers",
        "Working with Data Structures with Python new features",
        "How to think and make decision with control flow tools",
        "Deal with core functional Programming and OOP features for Novice.",
        "Get professional, friendly and fast support in the course Q&A for any kind of problems during this course."
      ],
      "course_content": {
        "Introduction to The Python Programming": [
          "Intro Intro to The Python use, tools and The installation process",
          "Start coding with your first app",
          "Python Command Line and shell",
          "code to make decision inside interpreter",
          "Comment benefits",
          "Numbers and Arithmetic order",
          "Numbers, division types and rest",
          "Numbers and exponents operations",
          "Numbers , width and height variables",
          "Numbers, NameError for n and simple example",
          "Round and using Underscore",
          "Strings of chars and special escaping",
          "Strings with print and without print",
          "Strings , new lines and the use of r",
          "Strings techniques, multi repetition, perfix example",
          "Strings, concat and accessing positions",
          "Strings, indexing with colon for word",
          "Strings, colons techniques",
          "Strings, replacing letters",
          "List of squares and indexing",
          "List of squares and cubes, adding exponents with method",
          "List of letters to play with items and length",
          "List inside another, dealing with inner lists",
          "Quiz 1"
        ],
        "Control Flow tools": [
          "control structure, conditions to make decisions",
          "iterating over a sequence with for loop",
          "generator to produce numbers within a range",
          "breaking control flow and continue",
          "pass as a placeholder for future code",
          "construct loops using a special statement",
          "Quiz 2"
        ],
        "Functional Programming": [
          "defining functions , groups, args with fib",
          "defining functions, calling fib and printing object",
          "defining functions, fib2 with append and return",
          "Default Argument Values app - prompt and retries and reminder 1",
          "Default Argument Values app - prompt and retries and reminder 2",
          "Default Argument Values app - prompt and retries and reminder 3",
          "Default Argument Values app - prompt and retries and reminder 4",
          "Default Argument Values app - prompt and retries and reminder 5",
          "keyword args techniques 1",
          "keyword args techniques 2",
          "keyword args techniques 3",
          "using anonymous function",
          "Anonymous function with a user groups",
          "Quiz 3"
        ],
        "Data Structures in Python": [
          "More about lists and methods 1",
          "More about lists and methods 2",
          "More about lists and methods 3",
          "list comprehension techniques 1",
          "list comprehension techniques 2",
          "list comprehension techniques 3",
          "playing with del statement for lists",
          "Tuples, Sequences and methods 1",
          "Tuples, Sequences and methods 2",
          "Tuples, Sequences and methods 3",
          "Sets and comprehensions 1",
          "Sets and comprehensions 2",
          "Sets and comprehensions 3",
          "dictionaries with methods and comprehension 1",
          "dictionaries with methods and comprehension 2",
          "dictionaries with methods and comprehension 3",
          "Quiz 4"
        ],
        "Different types of Modules": [
          "modules, importing and greeting",
          "modules creation and importing special dict from another",
          "modules, renaming, playing with mx",
          "modules from standard library 1",
          "modules from standard library 2"
        ],
        "Files Handling techniques": [
          "Files Handling techniques 1",
          "Files Handling techniques 2",
          "Files Handling techniques 3",
          "Files Handling techniques 4"
        ],
        "Object-Oriented Programming concepts": [
          "how to build a class",
          "building objects based on class",
          "assign values to object properties, and other operations",
          "create a function that belongs to an object",
          "Modifying Object Properties",
          "Delete Properties and Object Properties",
          "Quiz 5"
        ],
        "BONUS SECTION": [
          "Bonus lecture"
        ]
      },
      "requirements": [
        "No python prior experience is required to take this course.",
        "Computer and Text Editor or IDE"
      ],
      "description": "Welcome to The Python Programming For Everyone Immersive Training Course for Beginners.\nThis Immersive Masterclass covers all the essential topics to become a Professional Python developer from the ground up\nTopics like: variables, data types, Strings, data structures,  functional programming, different types of modules, files handling, object-oriented programming and many more.\nYou'll get A demonstration of each point in this training and an explanation of all theoretical and practical aspects in an easy way and in an easy language for anyone.\nAlso, you can test your skills using quizzes and be a certified python developer that can be hired and you can upload the certificate of completion to your profile.\nPython is one of the coolest, and best programming languages in terms of ease and features.\nIt is very easy for you to read the Python code, as if you were reading a regular English sentence.\nThe Python language can work with everything indisputably in many areas.\nWith Python, It is possible to do everything you imagine in the world of programming and data.\nPython can work in areas such as:\nData Science.\nMachine Learning.\nDeep Learning.\nArtificial intelligence.\nEthical Hacking.\nBlockchain Applications.\nWeb Scraping.\nWeb Applications.\nMobile Applications.\nDesktop Applications.\nGames Applications.\nBrowser Extensions.\nAnd many other fields.\nAnd you'll get a full support during this step by step course by the instructor if you encounter any problems or errors.\nLet's get started!",
      "target_audience": [
        "Python Beginners",
        "Anyone who wants to dive deeply into modern Python without wasting time",
        "Programming and Software development Newbies",
        "Programmers who know other Programming languages but are new to Python",
        "Python developers who want to master new features of modern python"
      ]
    },
    {
      "title": "Mastering Java + Spring Boot: REST APIs and Microservices",
      "url": "https://www.udemy.com/course/java-mastery-unleashing-the-power-of-programming/",
      "bio": "Complete Java SE + Spring Boot with REST API, JPA, MVC, Security, Microservices + SQL with MySQL +JDBC (Use 1.25x speed)",
      "objectives": [
        "Learn Java development environment setup",
        "Write your first Java program",
        "Basic programming constructs of java",
        "Learn Java identifiers, operators, control statements",
        "Selection looping and jump statements",
        "Arrays and methods",
        "Complete guide on Object oriented Java",
        "Rest API",
        "Springboot starters, spring security and more",
        "Microservices"
      ],
      "course_content": {},
      "requirements": [
        "A computer to practice",
        "Interest in Programming"
      ],
      "description": "Welcome to the Java Mastery course, your gateway to becoming a proficient Java developer. In this comprehensive course, you will delve into the intricacies of complete Core Java (Java SE), JDBC, SQL, Spring Boot with Restful Services, MVC architecture, JPA - Hibernate, Spring Security and Microservices development.\nCourse Overview: This course is designed for aspiring developers and programmers who want to master Java programming and its related technologies. Whether you're a beginner or an experienced developer looking to enhance your skills, this course offers a structured learning path to elevate your Java expertise.\nKey Learning Points:\nCore Java Fundamentals: Learn essential Java concepts such as object-oriented programming (OOP), data structures, algorithms, exception handling, and more.\nDatabase Connectivity (JDBC and SQL): Understand JDBC for database access and SQL for querying and managing databases effectively.\nSpring Boot with Restful Services: Dive into Spring Boot framework to develop robust Restful APIs for seamless communication between applications.\nMVC Architecture: Explore the Model-View-Controller (MVC) architecture for building scalable and maintainable Java applications.\nMicroservices Development: Master the art of designing, developing, and deploying microservices using Java and Spring Boot for agility and scalability.\nCourse Highlights:\nMaster Core Java Fundamentals: Understand and apply the core concepts of Java programming, including object-oriented programming (OOP), data structures, algorithms, and exception handling.\nEffective Database Connectivity: Learn how to interact with databases using JDBC (Java Database Connectivity) and SQL (Structured Query Language) to perform CRUD (Create, Read, Update, Delete) operations and manage data effectively.\nDevelop Robust Web Applications with Spring Boot: Gain proficiency in developing web applications using Spring Boot, a popular Java framework, and harness its capabilities to create scalable, efficient, and maintainable applications.\nCreate Restful APIs: Explore the principles of Restful services and learn how to design and implement Restful APIs using Spring Boot, facilitating seamless communication between client and server applications.\nUnderstand MVC Architecture: Dive into the Model-View-Controller (MVC) architecture and comprehend its role in building well-structured and modular Java applications, enhancing code organization and maintainability.\nEmbrace Microservices Architecture: Delve into microservices architecture and learn how to design, develop, and deploy microservices using Java and Spring Boot, enabling agility, scalability, and resilience in modern application development.\nHands-on Projects and Real-world Applications: Apply acquired knowledge through hands-on projects and real-world scenarios, consolidating understanding and gaining practical experience in Java development.\nIndustry-relevant Skills and Best Practices: Acquire industry-relevant skills and best practices in Java programming, database connectivity, web development, and microservices architecture, preparing for real-world challenges and demands of the industry.\nBuild a Strong Foundation for Career Advancement: Equip yourself with a solid foundation in Java programming and related technologies, enhancing your career prospects and paving the way for opportunities as a Java developer, backend developer, full-stack developer, or software engineer",
      "target_audience": [
        "Desire to Learn and make a carrier in Java Technologies"
      ]
    },
    {
      "title": "Web Scraping In Python: Master The Fundamentals",
      "url": "https://www.udemy.com/course/introduction-to-data-exractionweb-scraping-in-python/",
      "bio": "Learn to scrap the web fast and efficiently by building out an entire web scraping program in Python.",
      "objectives": [
        "Tackle new challenges by understand the underlying method/approach to take",
        "Scrape static webpages",
        "Be able to scrape websites that use Javascript",
        "Extract all sorts of data from websites",
        "Know what to look for and how to approach parsing a website",
        "Gather data from all over the internet",
        "Use recursion algorithms to search through website content"
      ],
      "course_content": {
        "Prerequisite knowledge": [
          "Installing Webscraping Prerequisite Libraries",
          "HTML Structure",
          "Status Codes",
          "Error codes",
          "Error Handling in Python",
          "Introduction to the Modulus Operation"
        ],
        "Static Data Extraction/Web Scraping": [
          "Intro to Requests",
          "Intro to BeautifulSoup",
          "Exercise Intro: Expand the Data Extraction",
          "Expand the Data Extraction Sample Solution",
          "Exercise Intro: Wikipedia Entry Scrap",
          "Wikipedia Entry Scrap Sample Solution",
          "Exercise Intro: Combining Data Sources",
          "Combining Two Data Sources Sample Solution",
          "Combining Two Data Sources Challenge Sample Solution",
          "How To Search For Code Implementation",
          "Your own web scrap"
        ],
        "Scraping Websites That Load Data With Javascript": [
          "Intro To Dynamic Webscraping",
          "Intro To Selenium",
          "Extracting Data Using Selenium",
          "Exercise: Selenium Documentation",
          "Extracting Hyperlink Value",
          "Dealing with Website Loading Times",
          "Headless Driver",
          "Exercise Intro: Continuously Saving Our Data",
          "Continuously Saving Our Data Sample Solution",
          "Adding Text Into A Form",
          "Pressing Buttons And Navigating On Site Pop-Ups",
          "Scraping a website that uses AJAX to generate content"
        ],
        "APIs overview": [
          "Introduction To APIs",
          "APIs"
        ]
      },
      "requirements": [
        "Basic Python knowledge",
        "A Python 3 Environment to Code in"
      ],
      "description": "Web scraping is the art of picking out data from a website by looking at the HTML code and identifying patterns that can be used to identify your data. This data can then be gathered and later used for your own analysis.\nIn this course we will go over the basic of web scraping and crawling, learning all about how we can extract data from websites, and all of this is guided along by a work example.\nIn the course will start with the simpler aspect of scraping static websites. We'll do this using requests to get the website data and use BeautifulSoup to effortlessly parse it.\n\nOnce we have a hang of the fundamentals we'll then get into dynamic websites that use Javascript to render their content. In this section of the course we'll be using Selenium to render the pages for us which will provide us with the full page of information. We'll also learn to do commonly needed things like clicking on buttons (e.g. when a page has a pop-up), or sending text into a form - in case your scraper needs to perform searches or login somewhere.\n\nAt the end of the course you should be able to go off on your own, and pick out most common websites, and be able to extract all the relevant data you may need just through using Python code.",
      "target_audience": [
        "Anyone interested in analyzing data",
        "Anyone who doesn't know how to start gathering data",
        "Anyone who wants to develop their ability to scrap data",
        "Anyone interested in starting with web scraping",
        "Anyone who is interested in expanding their Python knowledge",
        "Anyone who wants to gather a wide array of data to play with"
      ]
    },
    {
      "title": "Data Science: R Programming Complete Diploma",
      "url": "https://www.udemy.com/course/the-r-programming-for-everyone-a-z-comprehensive-bootcamp/",
      "bio": "Learn all the R skills you need to become a Professional and Certified R Programmer with this Complete Bootcamp",
      "objectives": [
        "The R working tools and environment for professionals",
        "The R syntax and how to explain and describe the code using comments",
        "Variables, Values and assignments",
        "All the Data types available in R",
        "Performing mathematical operations, type conversion built-in functions and many useful built-in functions for math operations",
        "Working with collection of characters and strings in R, also essential character operations",
        "Logical values and booleans",
        "Handling different operations on variables and values by using different types of operators",
        "All the Data Structures in R such as vectors, lists, matrices, data frames and factors. And also all the essential operations for these data structures",
        "Decision making by using conditional statements in R",
        "Repeat block of code and iterate over collections with loops",
        "Functional programming and code reusing",
        "Statistics and data analysis concepts: datasets, many built-in functions, techniques and tools for statistical operations",
        "Data visualizations and Graphics in R: drawing points, line plotting, pie charts, bar charts, histograms and more",
        "Get the instructor QA Support"
      ],
      "course_content": {
        "Module 0: Introduction": [
          "Introduction",
          "Downloading and Installing R",
          "Downloading and Installing the RStudio IDE",
          "Setup working directory"
        ],
        "Module 1: Variables, Data Types and Hints": [
          "Variables in detail 1",
          "Variables in detail 2",
          "Variables in detail 3",
          "Variables in detail 4",
          "Data types 1",
          "Data types 2",
          "Data types 3",
          "Code hints"
        ],
        "Module 2: Numbers and Math": [
          "Type of numbers",
          "Type conversion",
          "Math operations"
        ],
        "Module 3: Characters": [
          "Strings 1",
          "Strings 2",
          "Strings 3",
          "Strings 4",
          "Strings 5",
          "Strings 6",
          "Strings 7"
        ],
        "Module 4: Logical and operators": [
          "Logical values 1",
          "Logical values 2",
          "Operators 1",
          "Operators 2",
          "Operators 3",
          "Operators 4",
          "Operators 5"
        ],
        "Module 5: DS - Vectors": [
          "DS -Vectors 1",
          "DS -Vectors 2",
          "DS -Vectors 3",
          "DS -Vectors 4",
          "DS -Vectors 5",
          "DS -Vectors 6",
          "DS -Vectors 7"
        ],
        "Module 6: DS - Lists": [
          "DS - Lists 1",
          "DS - Lists 2",
          "DS - Lists 3",
          "DS - Lists 4"
        ],
        "Module 7: DS - Matrices": [
          "DS - Matrices 1",
          "DS - Matrices 2",
          "DS - Matrices 3",
          "DS - Matrices 4",
          "DS - Matrices 5"
        ],
        "Module 8: DS - Arrays": [
          "DS - Arrays 1",
          "DS - Arrays 2",
          "DS - Arrays 3",
          "DS - Arrays 4",
          "DS - Arrays 5"
        ],
        "Module 9: DS - Data Frame": [
          "DS - Data Frame 1",
          "DS - Data Frame 2",
          "DS - Data Frame 3",
          "DS - Data Frame 4",
          "DS - Data Frame 5",
          "DS - Data Frame 6"
        ]
      },
      "requirements": [
        "No programming experience needed. You'll learn everything you need to know"
      ],
      "description": "Hello and welcome to the exciting world of the R programming language.\n# Data Science: R Programming Complete Diploma\nR is one of the most powerful programming languages, for statistical computing and graphical presentation to analyze and visualize data.\nIn this course, I’m going to show you how to code with R from the R basics to the R advanced concepts.\nAlso, you will explore how the R programming language can be used today for data analysis and the production of beautiful data visualizations and graphics.\nThe best part? Every single topic and tool in this course will be explained theoretically and practically with real examples step by step.\n\n\nThis course will cover all the R essentials needed for everyone such as:\nThe R working tools and environment for professionals\nThe R syntax and how to explain and describe the code using comments\nVariables, Values and assignments\nAll the Data types available in R.\nPerforming mathematical operations, type conversion built-in functions and many useful built-in functions for math operations.\nWorking with collection of characters and strings in R, also essential character operations\nLogical values and Booleans.\nHandling different operations on variables and values by using different types of operators.\nAll the Data Structures in R such as vectors, lists, matrices, data frames and factors\nAnd also all the essential operations for these data structures.\ndecision making by using conditional statements in R.\nRepeat block of code and iterate over collections with loops.\nFunctional programming and code reusing.\nStatistics and data analysis concepts: datasets, many built-in functions, techniques and tools for statistical operations.\nGraphics and data visualizations in R: drawing points, line plotting, pie charts, bar charts, histograms and more.\nYou will learn and understand all these concepts and more.\n\n\nR is free open source, and very widely used by professional statisticians and data scientists.\nIt is also very popular in certain application areas, including bioinformatics. R is a dynamically typed interpreted language, and is typically used interactively. It has many built-in functions and libraries, and is extensible, allowing users to define their own functions and procedures using R, C or Fortran. It also has a simple object system. So, it's really powerful!\nSo, what are you waiting for, enroll now to go through a complete bootcamp of one of the most popular and powerful programming languages on the market for , R.\nBecome A Professional R Programmer and Data Scientist in no time!\nLet's get started",
      "target_audience": [
        "Beginner R Programmers",
        "New developers and Engineers",
        "Programming and software development engineering newbies",
        "Developers and Engineers who know other programming language but are new to R",
        "Developers curious about Learning R for data science",
        "Beginner Data Engineers/Scientists"
      ]
    },
    {
      "title": "Typescript: The Complete Developer's Guide",
      "url": "https://www.udemy.com/course/typescript-the-complete-developers-guide/",
      "bio": "Master Typescript by learning popular design patterns and building complex projects. Includes React and Express!",
      "objectives": [
        "Master design patterns for building large applications",
        "Integrate Typescript into React/Redux or Express projects",
        "Understand Composition vs Inheritance, and when to use each",
        "Write reusable code powered by classes and interfaces",
        "Assemble reusable boilerplates for your own Typescript projects"
      ],
      "course_content": {
        "Getting Started with Typescript": [
          "How to Get Help",
          "Join Our Community!",
          "Course Resources",
          "Typescript Overview",
          "Environment Setup",
          "Starter Files",
          "A First App",
          "Executing Typescript Code",
          "Reminder on npx tsx Command",
          "One Quick Change",
          "Catching Errors with Typescript",
          "Catching More Errors!"
        ],
        "What is a Type System?": [
          "Do Not Skip - Course Overview",
          "Types",
          "More on Types",
          "Examples of Types",
          "Where Do We Use Types?",
          "Types"
        ],
        "Type Annotations in Action": [
          "Type Annotations and Inference",
          "Annotations with Variables",
          "Object Literal Annotations",
          "Annotations Around Functions",
          "Understanding Inference",
          "The 'Any' Type",
          "Fixing the 'Any' Type",
          "Delayed Initialization",
          "When Inference Doesn't Work"
        ],
        "Annotations With Functions and Objects": [
          "More on Annotations Around Functions",
          "Inference Around Functions",
          "Annotations for Anonymous Functions",
          "Void and Never",
          "Destructuring with Annotations",
          "Annotations Around Objects"
        ],
        "Mastering Typed Arrays": [
          "Arrays in Typescript",
          "Why Typed Arrays?",
          "Multiple Types in Arrays",
          "When to Use Typed Arrays"
        ],
        "Tuples in Typescript": [
          "Tuples in Typescript",
          "Tuples in Action",
          "Why Tuples?"
        ],
        "The All-Important Interface": [
          "Interfaces",
          "Long Type Annotations",
          "Fixing Long Annotations with Interfaces",
          "Syntax Around Interfaces",
          "Functions in Interfaces",
          "Code Reuse with Interfaces",
          "General Plan with Interfaces",
          "Interfaces"
        ],
        "Building Functionality with Classes": [
          "Classes",
          "Basic Inheritance",
          "Instance Method Modifiers",
          "Fields in Classes",
          "Fields with Inheritance",
          "Where to Use Classes"
        ],
        "Design Patterns with Typescript": [
          "App Overview",
          "Updated Parcel Instructions",
          "Bundling with Parcel",
          "Project Structure",
          "IMPORTANT Info About Faker Installation",
          "Generating Random Data",
          "Type Definition Files",
          "Using Type Definition Files",
          "Export Statements in Typescript",
          "Defining a Company",
          "Note on Generating an API Key",
          "Adding Google Maps Support",
          "Required Update for New @types Library",
          "Google Maps Integration",
          "Exploring Type Definition Files",
          "Hiding Functionality",
          "Why Use Private Modifiers? Here's Why",
          "Adding Markers",
          "Duplicate Code",
          "One Possible Solution",
          "Restricting Access with Interfaces",
          "Implicit Type Checks",
          "Showing Popup Windows",
          "Updating Interface Definitions",
          "Optional Implements Clauses",
          "App Wrapup"
        ],
        "More on Design Patterns": [
          "App Overview",
          "Configuring the TS Compiler",
          "Concurrent Compilation and Execution",
          "A Simple Sorting Algorithm",
          "Sorter Scaffolding",
          "Sorting Implementation",
          "Two Huge Issues",
          "Typescript is Really Smart",
          "Type Guards",
          "Why is This Bad?",
          "Extracting Key Logic",
          "Separating Swapping and Comparison",
          "The Big Reveal",
          "Interface Definition",
          "Sorting Arbitrary Collections",
          "Linked List Implementation",
          "Completed Linked List Code",
          "Just...One...More...Fix...",
          "Integrating the Sort Method",
          "Issues with Inheritance",
          "Abstract Classes",
          "Why Use Abstract Classes?",
          "Solving All Issues with Abstract Classes",
          "Interfaces vs Abstract Classes"
        ]
      },
      "requirements": [
        "Basic knowledge of ES2015 Javascript"
      ],
      "description": "Composition vs Inheritance? You'll understand it.  Build your own web framework? You'll do it.  Typescript with React/Redux?  It's here!\n--------------------\nThis is the best course online for mastering Typescript.\nEvery other course online teaches you the basic syntax and features of Typescript, but only this course will show you how to apply Typescript on real projects, instructing you how to build large, successful projects through example.\nTypescript is a 'super-set' of Javascript.  That means that if you already know Javascript, you are ready to take this course.  Typescript adds in several important features to Javascript, including a type system.  This type system is designed to help you catch errors during development, rather than when you are running your code.  That means you'll be twice as productive by catching bugs earlier in development.  But besides the type system, Typescript also provides several tools for structuring large codebases and writing truly reusable code.\nMastering Typescript by reading the documentation alone is challenging.  Although you might know what a 'typed array' or an 'interface' is, the documentation (and other courses!) don't show you where to use this features, or how to use them effectively.  The goal of this course is to help you understand why each feature of Typescript exists, and exactly where to use them.\nTop companies are hungry for Typescript developers.  Some of the largest web apps today are being built with Typescript.  Employers are scrambling to find engineers who are fluent with this cutting edge system.  Solid knowledge of Typescript will make you far more employable, by giving you a unique skill that few other engineers possess.\nPlanning on building your own apps?  Using Typescript will help you structure your project correctly from day one, ensuring that you won't be crushed under technical debt at some critical stage of your company.  In this course, you'll learn how to write reusable code, with a tremendous emphasis on leveraging classes and interfaces to make swappable 'widgets'.  You will be able to reconfigure your apps on the fly to build wildly different features with only a minimum amount of effort\nLearn from someone who has worked on one of the largest Typescript projects around. On professional projects of my own, I have developed plugins for an open-source, browser-based code editor called Theia.  The Theia project is absolutely gargantuan in scale, encompassing hundreds of thousands of lines of code, all written in Typescript.  This project works only thanks to the power of Typescript.\nBut don't just take my word for it - check out the reviews for this course! You'll see that other engineers, just like yourself, have had great success and acquired a new understanding of how to build scalable web applications.\n--------------------\nThere is just too much content in this course to summarize in a few short words, but here is a partial listing of the different skills you'll master:\nUnderstand why Composition vs Inheritance is the most mis-understood topic in the Javascript community\nMaster the fundamental features of Typescript by working on real world projects\nWe'll build a custom front-end framework from scratch that you can use in place of React or Angular on your own personal projects\nComprehend the complex interplay between classes and interfaces, and why these two pieces of Typescript enable you to build incredibly reusable code\nDive deeper into Typescript with decorators, which we'll use to build a custom integration between Typescript and Express\nStructure your React and Redux applications more confidently by understanding how to couple them with Typescript\nSkip the documentation for third party libraries by fluently reading type definition files\nLearn just how smart Typescript is by experiencing how deeply it analyzes your code for errors\n\n\nI learned Typescript years ago by hard trial-and-error.  Now you can learn at 5x the speed I did.  This is the course that I wish I had when I first got started with Typescript.",
      "target_audience": [
        "Any Javascript developer looking to understand how to structure large codebases"
      ]
    },
    {
      "title": "Learn PHP Programming From Scratch",
      "url": "https://www.udemy.com/course/learn-php-programming-from-scratch/",
      "bio": "Over 50 hours of PHP programming goodness.",
      "objectives": [
        "Demonstrate understanding of PHP programming",
        "To learn the basics of PHP programming",
        "To learn PHP programming by working on projects",
        "To learn intermediate and advanced PHP programming"
      ],
      "course_content": {
        "Getting Started": [
          "Introduction to the Course",
          "What Is PHP?",
          "What Is PHP Used For?"
        ],
        "Learn the Basics of PHP Programming": [
          "Commenting Code",
          "Setting Up A Web Server",
          "Echo/Print",
          "Variables",
          "If Statements",
          "Arithmetic Operators",
          "Comparison Operators",
          "Triple Equals",
          "Logical Operators",
          "Switch Statement",
          "Arrays",
          "Multi-dimensional Arrays",
          "While Loop",
          "Do While Loop",
          "For Loops",
          "Foreach",
          "Functions",
          "Functions with Undefined Parameters",
          "Formatting Numbers",
          "$_GET",
          "$_POST",
          "Embedding PHP within HTML",
          "A better way to display HTML",
          "Arrays (Part 1/2)",
          "Arrays (Part 2/2)",
          "Cookies (Part 1)",
          "Cookies (Part 2)",
          "Checkboxes",
          "Radio Buttons"
        ],
        "Intermediate PHP": [
          "Sessions",
          "Explode (String to Array)",
          "Implode (Array to String)",
          "Ternary Operator (Inline IF statement)",
          "Quickly Return True or False",
          "Splitting A String By Spaces (Whitespace)",
          "Generate a Random Number"
        ],
        "PHP Data Objects (PDO)": [
          "Introduction",
          "Listing available drivers",
          "Setting up database",
          "Connecting",
          "Error levels",
          "Basic query",
          "Fetching results",
          "Looping",
          "Fetch all",
          "Fetch as object",
          "Row count",
          "Project - user class dates",
          "Escaping",
          "Prepared statements",
          "Inserting",
          "Last inserted id"
        ],
        "PHP and MySQLi Database Integration": [
          "Introduction",
          "Conecting to a database",
          "Connecting using php",
          "Creating database table",
          "Pulling single record",
          "Pulling multiple records",
          "Different result types",
          "Counting results",
          "Updating and affected rows",
          "Escaping",
          "Prepared statements for inserting",
          "Selecting prepared statements",
          "Free result",
          "Closing db connection"
        ],
        "Working with Laravel 4": [
          "Introduction to Our Project",
          "Installing Laravel",
          "The Database",
          "Creating the Home Page",
          "Templating",
          "PDO and SMTP E-mail",
          "Creating Accounts Part 1",
          "Creating Accounts Part 2",
          "E-mail Activation",
          "Signing In",
          "Signing Out",
          "Remember Me",
          "Changing Passwords",
          "User Profiles",
          "Account Recovery",
          "Migrations"
        ],
        "Common PHP Errors": [
          "Changing Maximum File Upload Size",
          "Cannot Modify Header Information",
          "Undefined Index",
          "Unexpected $end",
          "Supplied Argument Not A Valid MySQL Result Resource (MySQL)",
          "Access Denied (MySQL)"
        ],
        "PHP Security": [
          "Cookies",
          "File Includes",
          "File Uploading",
          "Null Byte",
          "Passing Variables",
          "Session Hijacking",
          "SQL Injection",
          "XSS (Cross-Site Scripting)"
        ],
        "BB Codes": [
          "Part 1",
          "Part 2",
          "Part 3"
        ],
        "How to Check If a Website is Up or Down": [
          "Part 1",
          "Part 2"
        ]
      },
      "requirements": [
        "A Computer",
        "A Desire to Learn"
      ],
      "description": "Do you want to be a web developer? Do you need to brush up on your PHP skills? Then you're in the right place!\nThis is the most comprehensive PHP course on Udemy. You will learn everything from the basics to more advanced PHP programming using real world examples and sample projects.\nCheck out the free sample videos to get a free taste of PHP!\nThis course is updated regularly with new content and new projects to work on, so even if you get through the entire course, there will always be more the next time you log in.\nWhat Is PHP?\nPHP is an open source (free) scripting language that allows you to create dynamic websites and work with servers. PHP is now used on over 20 million websites and over 1 million servers worldwide.",
      "target_audience": [
        "Aspiring web developers",
        "Current web developers",
        "PHP developers"
      ]
    },
    {
      "title": "Practical Data Structures & Algorithms in Java + HW",
      "url": "https://www.udemy.com/course/practical-data-structures-algorithms-in-java/",
      "bio": "Go from zero to hero in the most important algorithms and data structures using Java",
      "objectives": [
        "Gain Confidence for Coding Interviews",
        "Learn The Most Practical and Popular Data Structures & Algorithms in-depth rather than a rushed course on Computer Science",
        "Get practice translating sudo code & implementing algorithms with Assignments and Solutions",
        "Get an intuitive understanding of how many of the popular algorithms and data structures behave"
      ],
      "course_content": {
        "Introduction": [
          "Course Overview (Watch this First!)",
          "Join our Online Community (Discord)",
          "Dedicated TA Support",
          "Source Code For the Course"
        ],
        "Prerequisite: Intro to Object Oriented Programming": [
          "Quick Note: Upcoming Java Lectures",
          "Intro to OOP Class & Object",
          "Program Flow and Using the Constructor",
          "Application Runtime",
          "Java Behind The Scenes"
        ],
        "Prerequisite: The Collections Framework": [
          "Quick Note: Upcoming Java Lectures",
          "Working with Arrays",
          "Introduction to Collections",
          "Traversing Lists and Custom Types",
          "HashSet and LinkedHashSet with Hashcode",
          "Collection Methods and Using the Comparable Interface",
          "HashMap, LinkedHashMap and TreeMap"
        ],
        "Basic Data Structures: Array, Stack & Queue": [
          "Abstract Data Types",
          "Running Time of an Algorithm and Big O Notation",
          "Stack Data Structure (Java Practical) + HW",
          "Stacks Continued",
          "Using Stack from the Java Collections Framework",
          "Queue Data Structure (Java Practical)",
          "Using Queue from the Java Collections Framework"
        ],
        "Arrays HW: Exercises": [
          "Find Minimum and Maximum",
          "Buy & Sell Stocks"
        ],
        "Stacks HW: Exercises": [
          "Implement a Stack",
          "Valid Parentheses (using custom stack)",
          "Valid Parentheses (using Collections Framework)"
        ],
        "Queues HW: Exercises": [
          "Implement a Queue",
          "Reverse B Elements of an Array (using custom queue)",
          "Reverse B Elements of an Array (using Collections Framework)"
        ],
        "Linked Lists": [
          "Introduction to Linked Lists",
          "Singly Linked List (Java Practical)",
          "Circular Linked List (Java Practical)",
          "Doubly Linked List - Part 1 + HW (Java Practical)",
          "Doubly Linked List - Part 2",
          "Doubly Linked List - Part 3 + HW (Java Practical)"
        ],
        "Linked Lists HW: Exercises": [
          "Implement Linked List",
          "Efficient Linked List"
        ],
        "Popular Searching Algorithms": [
          "Basic Linear Search",
          "Binary Search (Overview)",
          "Binary Search (Java Practical) + HW",
          "Recursion in Java",
          "Recursive Search (Java Practical) + HW",
          "Big O Notation Part 2"
        ]
      },
      "requirements": [
        "The basics of programming such as if/else statements, loops & methods in some programming language"
      ],
      "description": "Welcome to Practical Data Structures & Algorithms in Java + Homeworks Course!\nAre you a beginner eager to master Data Structures and Algorithms in Java?\nDo you want to confidently tackle coding interviews or enhance your programming skills?\nHave you struggled with understanding how data structures work under the hood or how to apply algorithms in real-world scenarios?\nAre you seeking a structured, hands-on course that combines theory, implementation, and real-life applications?\nIf you answered yes to any of these questions, you’re in the right place.\nThis course is meticulously designed to provide a step-by-step approach, demystifying Data Structures and Algorithms while preparing you for practical programming challenges and career advancement.\nWhat Makes This Course Stand Out?\nComprehensive and Structured Content: Start from the basics and progress to advanced topics, with each concept logically and clearly explained.\nLearn by Doing: Gain hands-on experience through practical assignments and real-life examples for every data structure and algorithm covered.\nBeginner-Friendly: New to programming or Java? No worries! This course is designed to guide you from the ground up.\nDeep Understanding: Go beyond surface-level knowledge to truly grasp how data structures and algorithms work under the hood.\nCareer-Ready Skills: Equip yourself with in-demand knowledge to ace technical interviews and write efficient, elegant code.\nHomework with Solutions: Every assignment includes step-by-step solution videos to reinforce your learning.\nWhy This Course Is Essential:\nData Structures and Algorithms are the cornerstone of programming. By mastering them, you’ll unlock the ability to design optimized solutions, solve complex problems, and boost your programming confidence. This course bridges the gap between theory and practice, ensuring you’re job-ready and technically proficient.\nLatest Course Updates:\n(2025): Added beginner-friendly coding exercises on Array, Stack, Queue and Linked Lists.\n(Dec 2024): Added a new coding exercise with step-by-step solutions for Hash Table.\n(Nov 2024): Maintained and updated all course coding files, exercises and solutions in GitHub repository.\n(Oct 2024): Added a comprehensive coding exercises on Linked List & Array and supplementary reading material.\n(Sept 2024): Added NEW CONTENT on the Collections Framework and new coding exercise on Queue data structure.\n(2023): Enhanced the course with improved online community support to help students collaborate and resolve queries efficiently.\nImportant Announcement: This course will be constantly updated with more assignments, quizzes, and lectures to enrich your knowledge of data structures and algorithms.\n\n\nTopics covered in the Practical Data Structures & Algorithms in Java Course:\nIntro to Object-Oriented Programming in Java\nClasses and Objects\nProgram Flow and Constructor\nApplication Runtime\nJava behind-the-scenes\nThe Collections Framework\nLists and Custom Types\nHashSet, LinkedHashSet and Hashcode\nCollection Methods\nComparable Interface\nHashMap, LinkedHashMap and TreeMap\nRunning Time of an Algorithm and Big O Notation\nArray\nStack\nQueue\nLinked List\nSingly Linked List\nDoubly Linked List\nCircular Linked List\nBinary Search Trees\nHeap\nHash Tables\nGraph\nSearching Algorithms\nLinear Search\nBinary Search\nRecursive Search\nSorting Algorithms\nSelection Sort\nQuick Sort\nMerge Sort\nInsertion Sort\nRecursion\n\n\nKEY BENEFITS OF DATA STRUCTURES AND ALGORITHMS MASTERY\nIf I had to pick the single most important topic in software development, it would be data structures and algorithms. Think of it as the fundamental tools available to every computer programmer. The better you get with these tools the more confident a programmer you’ll become. Software development is a vast field requiring all kinds of skill-sets but getting good at this single topic is a huge leap forward in your programming journey and it’ll certainly pave the way for a successful programming career.\nThe topics in this course are going to cover data structures such as lists, stacks, queues, trees and some of the most powerful sorting, searching, and graph algorithms that have revolutionized the field of computing. Throughout the course I keep things practical and provide real life examples of how all of these algorithms work and when & where they can be applied to write efficient computer programs.\nI’ll be moving at a slow and steady pace introducing each topic followed by a PRACTICAL programming assignment so you can immediately apply what you learned. All homework assignments in the course will be accompanied with step by step solution videos demystifying each problem as I code up the solutions. My goal is to make sure, that after you complete this course you feel completely confident going into a coding interview because you will have built a solid foundation in computer programming. So go ahead and signup and I’ll see you in the course.\n\n\nSTUDENT REVIEWS\nDon’t just take it from me, take it from other students that have taken this course.\n★★★★★ Here’s some testimonials from students that took this course ★★★★★\n\"Explanations are just amazing. It cant get simpler than this. Thanks for creating this course.\" - Suman\n\"This has to be the best money I've spent on an online course. This course completely demystifies data structures and algorithms. Originally, I had feared learning the topic because of how notoriously \"difficult\" it is to grasp. But I promise you this isn't just another fancy online Ivy League course that uses a bunch of fancy terms without explaining anything. Imtiaz does an EXCELLENT job of explaining all the data structures and algorithms by starting from the VERY fundamentals of Java. I promise you will gain foundational knowledge of DS&A by taking this course. I cannot thank Imtiaz enough for making such a great course, honestly!\" - Daniel\n\"This course was exactly what I am looking for to improve my data structure skills. I do not have a computer science degree. However, I want to become a great software developer and I have been finding it difficult to understand data structure until I enrolled in this course.\" - Emmanuel\n\"I like the lots of homework and assignments in this course, because even for a well experienced software engineer it is fun to implement these algorithms.\" - AU\n\"I appreciate the whiteboard explanations because it helped me visualize how the algorithms work and the instructor was able to describe it clearly as well.\" - Nova\n\"I really enjoyed the course and learned a lot. I can really recommend this course. Imtiaz have the ability to explain complex topics in a logical and easy way, that make understand easier. I also like that he contentiously encourage is students to work through issues on their own.\" - Jaco\n\"Awesome. His way of explaining things and presenting data is awesome. I recommend this course to all experienced, new joinee employees as well as comp science / IT students.\" - Sumeet\n\n\nWhy wait? Take your programming skills to the next level and start mastering Data Structures and Algorithms today!",
      "target_audience": [
        "If you're fed up with academia centric courses on Data Structures & Algorithms and want to intuitively & practically understand how to implement and the most popular algorithms and data structures in software",
        "If you don't like math and want to learn popular data structures and algorithms at a deep level"
      ]
    },
    {
      "title": "Introduction To The C Language",
      "url": "https://www.udemy.com/course/introduction-to-the-c-language/",
      "bio": "Learn a language that was ranked amongst the top 3 programming laguages in the 2018 IEEE's survey.",
      "objectives": [
        "C Language Fundamentals",
        "Operators and Control Structures",
        "Variables",
        "Strings",
        "Arrays",
        "Pointers",
        "Funtions",
        "Conditional statements",
        "Loops",
        "Switch Statements"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course Files",
          "What is an IDE",
          "Instaling Code Blocks",
          "Configuring Code Blocks",
          "Testing Code Blocks"
        ],
        "2. C Language Fundamentals": [
          "What is a Program",
          "Commenting In C",
          "The C Preprocessor",
          "The C Compiling Process",
          "Variables",
          "Stack vs Heap Memory",
          "Arrays",
          "Strings",
          "Pointers",
          "Functions",
          "Structures"
        ],
        "3. Operators and Control Structures": [
          "Equality vs Assignment Operator",
          "Relational Operators",
          "Logical Operators",
          "Incrementing and Decrementing Operators",
          "If, Else If, Else Statements",
          "While Loop",
          "Do-While Loop",
          "For Loop",
          "Break vs Continue",
          "Switch Statement"
        ],
        "4. Useful C functions": [
          "C Library: <ctype.h>",
          "C Library: <stdio.h>",
          "C Library: <stdlib.h>",
          "C Library: <string.h>"
        ],
        "5. More Topics on C": [
          "Dynamic Arrays",
          "Linked Lists",
          "Text Files"
        ]
      },
      "requirements": [
        "General knowledge of computers and some programming experience would help."
      ],
      "description": "This course is a quick introduction the C programming language. You will first learn about the C language Basics such as variables, arrays, strings, and pointers. You will then learn about operators and control structures such as rational and logical operators, Conditional statements and loops. The course also includes a section on useful C language functions divided in 4 C language libraries. The course is meant to be for beginners, but some programming experience would be useful.",
      "target_audience": [
        "Beginer programmers interested in learning C language."
      ]
    },
    {
      "title": "JavaScript for Kids: Code Your Own Games and Apps at Any Age",
      "url": "https://www.udemy.com/course/javascript-for-kids/",
      "bio": "JavaScript coding course for beginners of all ages, build your own interactive games and apps in JavaScript!",
      "objectives": [
        "Code your own apps and games in JavaScript for Mac, Windows, or Linux, for beginners of all ages",
        "Create fun, playable games like a Guessing Game and a Bubble Draw app!",
        "Draw colorful graphics in JavaScript, including a new bonus Snake video game, great for beginners of any age",
        "Learn how to hack your browser and modify any web page for fun or for harmless practical jokes!",
        "Master variables, loops and functions to prepare for more advanced programming courses (and a brighter future)!"
      ],
      "course_content": {},
      "requirements": [
        "A computer (PC, Mac, or Linux - even Raspberry Pi!) and web browser are all you need to start coding!",
        "If you can use a text editor (Notepad, Word, etc.), you can program in JavaScript!",
        "No prior programming experience needed."
      ],
      "description": "Join over 60,000 students from 163 countries learning to code from Dr. Bryson Payne!\nBrand new course for 2021! Teach yourself to code fun, colorful apps and games in JavaScript, the powerful programming language that's included in every web browser and mobile device. Learn coding step-by-step from Computer Science Professor Dr. Bryson Payne, author of the Amazon #1 New Release and Top 10 Best Seller, Teach Your Kids to Code: A Parent-Friendly Guide to Python Programming (No Starch Press). Filmed in collaboration with Bund Media/Zhidao Education Technology, with subtitles in English and Chinese.\nUpdate: Pre-order Dr. Payne's new book, \"Go Hack Yourself\" on Amazon now!\nGives Children a Huge Advantage in a High-Tech World\nQuickly master new problem-solving skills in JavaScript with colorful, fun examples\nProgram apps using HTML5 Canvas graphics, web-based forms, even animated video games\nBuild your own playable games and create beautiful graphics right in your browser using a simple text editor\nLearn the basics of coding, from variables to loops, functions, and classes with interactive, engaging apps\nGreat for college and scholarship application portfolios\n\nThis is the kind of course you can enjoy at any age!\nPacked with fun examples, colorful graphics, and easy-to-follow plain English instruction, JavaScript for All is the course parents and teachers can enjoy, as they build one of the top job skills of the 21st century! JavaScript is a great first language for beginners, but it's powerful enough to be used in companies from Apple to Amazon and Google to IBM.\nI designed this programming course to be easily understood by absolute beginners, with example code I used with my own students all the way through the apps I teach to college freshmen.\nQuick, hands-on lessons will get you coding your own web apps and games from scratch in minutes. Over 40 video lectures and six hours of content in short, 2-to-8-minute videos will give you the practice you need to master the powerful new skill of coding.\nEverything you need to get started right away\nComplete with working code downloads and high-definition videos, you'll be able to work alongside a professor with 22 years' teaching experience and over 30 years of programming knowledge. You'll also receive a Certificate of Completion upon finishing the course.\nNo Risk: Preview videos from Sections 1, 2, and 4 now for FREE, and enjoy a 30-day money-back guarantee when you enroll - zero risk, unlimited payoff! And, we've made this course easy to afford so parents and students can get started now!\nEnroll in JavaScript for All and get started coding today!\n* Two bonus sections added with advanced video game apps you can customize and share with your friends! *\nPraise for Dr. Payne's books and online courses:\n\"Inspired\" - This is an inspiring course taught by an inspired teacher. The examples are well-chosen -- demonstrating principles through engaging, colorful projects... — Kent Osband, Udemy student\n\"Excellent path into coding\" Not just for kids...use this course as the perfect primer. Clear examples, that build quickly into programs, leading to learning challenges. Bryson's delivery is well paced and good fun. — Sean Jon Darcy, Udemy student\n\"Dr. Bryson Payne is a computer scientist and professor of the highest caliber, and he brings the power of computers within easy reach for learners young and old.\"—Dr. Antonio Sanz Montemayor, Informatics Professor, Universidad Rey Juan Carlos, Spain\n“Dr. Payne set us on the path that led us to our dream jobs! ...He's providing parents and teachers everywhere the chance to do the same for the next generation of creative problem-solvers.\"—Shah Rahman, Blizzard Games and Susan Rahman, Facebook",
      "target_audience": [
        "For students, teachers, parents, or any beginning JavaScript programmer who wants to have fun while they learn.",
        "Perfect for homeschooling parents or K-12 parents and teachers who want to give their students a HUGE advantage by learning to read and write code.",
        "Apps and games suitable for independent students to college students and lifelong learners"
      ]
    },
    {
      "title": "C++ programming step-by-step: From Beginner to Advanced",
      "url": "https://www.udemy.com/course/cplusplus-programming-step-by-step/",
      "bio": "Start with basics of C++ (v11 and v14) then master File I/O, Object Oriented Programming or OOP, STL, Functors, Lambda",
      "objectives": [
        "On completing the course you will have firm grip on C++ language. You will understand the object oriented programming OOPs concept in depth.",
        "You will understand the basic programming structures like branching and looping.",
        "You will understand details about pointers and dynamic memory allocation along with memory management techniques.",
        "You will understand all about functions, parameter passing by value and by reference.",
        "All about user defined types using struct and class. Constructor function, method overloading and dynamic polymorphism.",
        "You will learn operator overloading, friend functions.",
        "In depth understanding of Inheritance and dynamic polymorphism, how runtime polymorphism helps to write more flexible and dynamic code."
      ],
      "course_content": {},
      "requirements": [
        "You do not need to have any prior knowledge of programming. This is for absolute beginners.",
        "You only need to know how to create a folder and how to save files in folder in any operating system like Mac or Windows.",
        "You can start writing C++ program using any text editor like Notepad or Notepad++ or Sublime text or Atom",
        "You can also use advance IDEs like Visual Studio or Xcode or Code::Blocks - I will demonstrate how to download and install each of them - No Worries.",
        "You will also need C++ compiler - I will demonstrate how to install C++ compiler on your system at the beginning.",
        "You can also use online C++ compiler to compile and execute your program."
      ],
      "description": "This course will teach you C++ from scratch upto advance level step-by-step with Object oriented programming (OOP ) using C++11/14. The object oriented programming concepts are clearly explained, you will learn classes, objects, inheritance, runtime polymorphism, Operator overloading apart from basic programming concepts like variables, branching and looping, functions, reference parameters, arrays, string and vectors in C++.\nFile I/O has been discussed in details and in the Mini project File I/O is used extensively.\nYou will learn STL or standard template library in detail along with concept of functors and lambda.\nThe approach is 100% practical, hands on experience of learning will help you to get more confidence with C++ programming. You can follow me along side doing the programs in C++ and that will be best way to do the course. While following the instructor the students can do the programming side by side to grasp the concept and to build their ability to become a better programmer.\nThis course is based on the syllabus of course curriculum of major universities across the globe who has teaches C++ to the graduate level engineering or computer application course.\nThere are quizzes and tests alongside the video lectures in the course. Also, students can ask questions in the Q/A forums to get their doubt cleared.\nStudents will get Udemy certificate after successful completion of the course.",
      "target_audience": [
        "This course is for absolute beginners in programming. No previous knowledge in programming required.",
        "Beginner in programming and looking forward to start a career as a programmer, this course is for you. It is always recommended to start with C++ as it is a perfect blend of procedural and Object oriented programming.",
        "If you have C++ in your school or college curriculum then this course will perfectly match your need. This course is designed according to the academic syllabus of the college curriculum.",
        "You want to be a game programmer but you are kind of confused about the programming language to start with then start with C++ a natural choice for unreal engine."
      ]
    },
    {
      "title": "Python Programming Complete Beginners Course Bootcamp",
      "url": "https://www.udemy.com/course/python-programming-complete-beginner-course-bootcamp/",
      "bio": "Learn Python Programming. A Premium level course with over 500 examples! No prior knowledge is needed.",
      "objectives": [
        "Learn Python from ZERO on the latest version -> Python 3.x",
        "Learn how to install Python language and configure it on your computer",
        "Learn Python From A Real Team Lead that currently works in the IT industry",
        "Learn how to use Object Oriented Programming - OOP",
        "You will learn all questions that would be asked in interviews - It will be easy to find a job that way",
        "Learn how to use Data collections, variables, lists, if statements, error handling and much more",
        "Learn best practice implementations - Coding conventions which are global rules of programming",
        "Get over 3 hours of LIVE CODE sessions",
        "Learn to Test, Debug and Handle Errors in your Python programs",
        "Learn Functional Programming",
        "For each topic you will first learn the theoretial part -> and then you'll go through a practice part for that same topic",
        "Structured learning - each Topic is braken down into small indepth explanations",
        "BONUS : Learn how to use version control with GitHub",
        "Learn How to write code in the right way, Use Global Coding Conventions"
      ],
      "course_content": {},
      "requirements": [
        "This course DOES NOT require any prior knowledge. Python will by learned from ZERO",
        "NO previous Python or general coding experience is needed"
      ],
      "description": "This course is for students that are not familiar with Python at all, NO PRIOR KNOWLEDGE is required.\nAnd as well as for experienced programmers who are familiar with other languages, but are wishing to know Python as well.\n\nIf you are interested in becoming a Python Ninja, this course will provide you the right set of tools to program in Python as real professionals.\n\nThe course brings all core topics of Python in an perfectly ordered structured way, and as such, all topics will be broken down into these 4 parts:\nTheory lecture\nExample in code lecture\nHomework - Going over the assignments\nHomework - Resolving the assignments\nCourse's Unique Approach:\n\n1) 'Python Coding Conventions' are a set of global rules of coding structure, that will be discussed deeply for each topic during the course, which will make the difference between 'Medium' and 'Professional' programmer. Naming Conventions is an important subtopic that is rarely discussed in online courses, but can easily be fail you in job interviews.\n\n2) High Focus On Examples And Homework Across The Course:\nThis course is focused on what I was missing, back in the days when I took my Python Online course, EXAMPLES.\nThe course will bring you over 500 examples, and challenging homework assignments for each topic.\nuse comparison to check your answers vs instructor's attached source code at the end of every 'practice' session.\n\n3) High Focus On Independent Programming - Observation On Every Possible Angle For Each Topic:\nYou will get lots of examples for each topic & sub-topic so don't be surprised if you can handle complicated assignments in programming once you complete this course. During the homework, In some cases the students will be guided to look the answers in Google and Stack-overflow, an important skill that every professional programmer should have.\n\nThe Lecturer of the course, Dmitry, is an experienced Team Leader from the IT / Fintech industry.\nJoin and be a part of the future, learn all Pythons core topics and become a Python Ninja.\n\nCourse's Syllabus is the following :\nInstallations of PyCharm - Most popular IDE (Where we write our code)\nInstallations of Python , step-by-step configurations\nVariables - Strings\nVariables - String Formatting\nVariables - Integers\nVariables - Float\nComparison Operators & Boolean Variables\nCollections - List\nCollections - Dictionary\nCollections - Set\nCollections - Tuple\nConditions - 'If' and 'Else' Statements\nLoops - While\nLoops - For\nObjects Oriented Programming - Method\nObjects Oriented Programming - Classes\nObjects Oriented Programming - Inheritance\nException Handling - Try / Exception\nException Handling - Types Of Exceptions\nVersion Control - Github\n-\nThe recommended resolution to watch course's videos is 1080 HD\n-\nkey-words : programming,python,developer,web developer, beginner, course, udemy course, for beginners, variable, variables, collections, dictionary,set, list, tuple, string, float, integer, if statement, for loop, while loop, OOP, Objects Oriented Programming, try, except, pycharm, web developer, web development, automation developer, qa, qa engineer, debugging, debug, git, github, source-tree, sourcetree, agile, bug, jira, lifecycle,",
      "target_audience": [
        "People without knowledge in Python at all",
        "People who wish to be come Python Developers",
        "People who would like to get coding skills to upgrade their job positioning",
        "People that love step-by-step easy explantations",
        "Anyone that is interested in Python programming and haven't got the chance to write a single line of code",
        "Anyone looking to scale up their skills and master a new programming language",
        "Programmers who are familiar with other programming languages, but want to get stronger in Python",
        "Anyone that want to become a Python-Ninja, without any prior knowledge",
        "People who love to study hard & practice to get results"
      ]
    },
    {
      "title": "Secure Coding & Design Best Practices in Python",
      "url": "https://www.udemy.com/course/secure-coding-design-and-practices-in-python/",
      "bio": "Secure Coding Best Practices, Secure Coding Principles, Secure Coding in Python - helpful in PCI-DSS compliance",
      "objectives": [
        "Developers to learn how to code securly",
        "Security Best Practices and Principles",
        "Secure Coding",
        "Secure Coding & Design in Python"
      ],
      "course_content": {},
      "requirements": [
        "Having Programming Experience in Python is mandatory for this Course"
      ],
      "description": "Secure coding is a way of writing computer programs that makes them less vulnerable to security threats like hacking and viruses or data leaks.\nWhen we write software, we want to make sure it is built in a way that keeps it safe from the attackers who might want to break in and do real bad things, like steal information or cause damage to the application or data.\nOne of the rough truth is that new vulnerabilities are constantly being discovered, which can compromise the security of software systems. This means that even if a software application was secure at one point in time, it may become vulnerable to attack as new weaknesses are identified and exploited by attackers.\nWhat is the way to achieve this?\nThe answer is we have to follow certain guidelines and best practices at every stage of development that help us identify and address potential security risks. By doing this, we can better protect sensitive data and prevent unauthorised access or manipulation of the software by attackers.Also, focussing on applications security and updating the application time to time as per the updating security standards.\nIt's essential to prioritise secure coding practices because most businesses today rely on software to run their operations. Software can either be custom-made specifically for the business or purchased from other companies. Building software can be a time-consuming and costly process, but unfortunately, the security of the software often doesn't receive enough attention\nIt is not part of day to day programming by developers. There are a few challenges that architects and developers face to achieve code security:\nLack of knowledge:\nMany new developers may not have a comprehensive understanding of secure coding practices and may not be aware of the potential vulnerabilities in their code.\nLimited resources:\nSmall teams or individual developers may not have the resources to implement complex security measures or to conduct thorough testing of their code.\nTime constraints: Developers may be under pressure to deliver code quickly, which can lead to shortcuts being taken and security being overlooked.\nEvolving threats:\nThe security landscape is constantly changing, and new threats can emerge quickly. Developers need to stay up-to-date with the latest threats and vulnerabilities to ensure that their code remains secure.\nCompatibility issues:\nSecure coding can sometimes conflict with other requirements, such as compatibility with legacy systems or third-party software, which can make it difficult to implement.\nThese are the challenges faced during the development. The best solution to this is to know the security practices prior to start a new development so that they can be taken in consideration from the very start.This means making sure that all developers understand the basics of secure coding practices and that security is considered throughout the development process Developers should educate themselves on secure coding practices and keep themselves updated with new security vulnerabilities and their solutions.\n\n\nTOC :\n1. OnBoarding\n2. Introduction of Secure Coding\n3. Secure Design\n4. Understanding the RISKS\n5. Security Management\n6. Summary\n7.  Appendix",
      "target_audience": [
        "Developer who want to understand and learn Secure coding and Design in Python"
      ]
    },
    {
      "title": "Design Patterns in Modern C++",
      "url": "https://www.udemy.com/course/patterns-cplusplus/",
      "bio": "Discover the modern implementation of design patterns with С++",
      "objectives": [
        "Recognize and apply design patterns",
        "Refactor existing designs to use design patterns",
        "Reason about applicability and usability of design patterns",
        "Learn how to use different aspects of Modern C++"
      ],
      "course_content": {},
      "requirements": [
        "Good understanding of C++",
        "Awareness of features of Modern C++ (11/14/17/...)",
        "Understanding of OOP (encapsulation, polymorphism, inheritance)"
      ],
      "description": "Course Overview\nThis course provides a comprehensive overview of Design Patterns in Modern C++ from a practical perspective. This course in particular covers patterns with the use of:\nThe latest versions of the C++ programming language\nUse of modern programming approaches: dependency injection, use of coroutines, and more!\nUse of modern developer tools such as CLion and ReSharper C++\nDiscussions of pattern variations and alternative approaches\nThis course provides an overview of all the Gang of Four (GoF) design patterns as outlined in their seminal book, together with modern-day variations, adjustments, discussions of intrinsic use of patterns in the language.\nWhat are Design Patterns?\nDesign Patterns are reusable solutions to common programming problems. They were popularized with the 1994 book Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma, John Vlissides, Ralph Johnson and Richard Helm (who are commonly known as a Gang of Four, hence the GoF acronym).\nThe original book was written using C++ and Smalltalk as examples, but since then, design patterns have been adapted to every programming language imaginable: Swift, C#, Java, PHP and even programming languages that aren't strictly object-oriented, such as JavaScript.\nThe appeal of design patterns is immortal: we see them in libraries, some of them are intrinsic in programming languages, and you probably use them on a daily basis even if you don't realize they are there.\nWhat Patterns Does This Course Cover?\nThis course covers all the GoF design patterns. In fact, here's the full list of what is covered:\nSOLID Design Principles: Single Responsibility Principle, Open-Closed Principle, Liskov Substitution Principle, Interface Segregation Principle and Dependency Inversion Principle\nCreational Design Patterns: Builder, Factories (Factory Method and Abstract Factory), Prototype and Singleton\nStructrural Design Patterns: Adapter, Bridge, Composite, Decorator, Façade, Flyweight and Proxy\nBehavioral Design Patterns: Chain of Responsibility, Command, Interpreter, Iterator, Mediator, Memento, Null Object, Observer, State, Strategy, Template Method and Visitor\nWho Is the Course For?\nThis course is for C++ developers who want to see not just textbook examples of design patterns, but also the different variations and tricks that can be applied to implement design patterns in a modern way.\nPresentation Style\nThis course is presented as a (very large) series of live demonstrations being done in JetBrains CLion. Most demos are single-file, so you can download the file attached to the lesson and run it in CLion, XCode or another IDE of your choice (or just on the command line).\nThis course does not use UML class diagrams; all of demos are live coding.",
      "target_audience": [
        "Beginner and experienced C++ software developers",
        "Developers interested in implementations of design patterns",
        "Computer scientists"
      ]
    },
    {
      "title": "Python Bootcamp: Master Python with Real-World Projects",
      "url": "https://www.udemy.com/course/the-complete-python-for-beginner-master-python-from-scratch/",
      "bio": "From Beginner to Pro - Hands-On Python 3 Programming course: Learn Python from Zero to Hero with 13 Real World Projects.",
      "objectives": [
        "Learn Python in easy and simple way.",
        "How to use Python with PostgreSQL to Analyze Data.",
        "13 Python projects to Master The Python Powerful Skills you will learn.",
        "Learn how to code in Python in simple and easy way.",
        "Learn Python programming basics.",
        "Learn how to use Jupyter notebook and IPython for Python coding.",
        "Learn coding in Python by examples.",
        "Apply what you will learn in Python through exercises.",
        "Learn how to use and handle Python strings.",
        "Learn Python Data Structures.",
        "Learn how and when to use Control Flow and Loops in Python.",
        "Learn Python Functions Programming.",
        "Learn how to use Python to open files.",
        "Learn Object Oriented Programming(OOP) in Python.",
        "Learn Python by doing through Python Projects."
      ],
      "course_content": {},
      "requirements": [
        "No primer programming experience needed for this course.",
        "Computer and internet.",
        "Your enthusiasm to learn Python Basics and Python Object Oriented Programming.",
        "Everything else you need to learn Python Programming is already in this course."
      ],
      "description": "Become a Python Expert with this comprehensive programming course! Gain job-ready Python skills by completing 13 real-world projects for data analysis, games, web apps, and more.\n\n\nWhat you'll learn:\n\n\n- Python Basics: Variables, data types, strings, input/output\n- Control Flow: Conditional statements, loops\n- Functions: Defining, parameters, return values\n- Object Oriented Programming: Classes, inheritance\n- Data Analysis: NumPy, Pandas, visualization\n- Apps & Games: GUI, web scraping, pygame\n- Scripting: File I/O, command line automation\n\n\nThis course takes you from beginner to pro step-by-step. Start from the basics and progress to advanced topics through hands-on exercises and projects.\n\n\nLearn Python 3 and become an expert by building real-world apps from scratch. Enroll now and start your journey!\n\n\nThis comprehensive course is perfect for both beginners with no prior programming experience and experienced coders looking to expand their Python skills.\n\n\nThe instructor is a Python expert with years of teaching experience. He breaks down complex topics into easy-to-understand modules with clear explanations, visual aids, and real-world examples.\n\n\nBy the end of the course, you'll have built 13 complete Python programs from scratch, giving you the hands-on experience needed to apply for Python developer roles.\n\n\nThe projects cover a diverse range of domains, including data analysis, web development, gaming, automation scripting, and more. You'll get practical experience with:\n\n\n- Importing and analyzing datasets with Pandas\n- Building interactive web apps and GUIs\n- Scraping data from websites\n- Creating games with PyGame\n- Automating tasks by scripting the command line\n\n\nWith over 11 hours of video content, this is one of the most comprehensive Python courses available online. The curriculum is frequently updated to keep pace with the latest Python syntax and best practices.\n\n\nLearning by doing is the best way to master a new skill. This project-based course will give you the Python superpowers to start building real-world applications and land your dream coding job. Enroll today!",
      "target_audience": [
        "Beginner Python Programmer who want to master Python programming Concepts in simple and easy way.",
        "Python programmers willing to master python for data analytics.",
        "Students want to master Python programming basics.",
        "Students how want to learn how to use python Idle and, jupyter notebook (Ipython).",
        "Students want to apply Python knowledge through Python Projects",
        "Students want to learn how use impeded Python interpreter in Udemy.",
        "Students want to build the skills that is needed to get your first Python programming job.",
        "By the end of the course you’ll get the confidence to code in Python smoothly & fluently.",
        "Are you welling to learn Python Pandas & Data Visualization?"
      ]
    },
    {
      "title": "The Ultimate Python Basics - Bootcamp",
      "url": "https://www.udemy.com/course/python-basics-bootcamp/",
      "bio": "This Ultimate Python Basics course teaches you the basics of Python in the easiest and fastest way possible.",
      "objectives": [
        "Build a strong understanding of Python from zero knowledge.",
        "Basic principles of programming which can help you learn any language easily.",
        "Advanced coding techniques and concepts with efficient methods.",
        "Create your own programs that can solve real-world problems."
      ],
      "course_content": {
        "Understanding the Fundamentals": [
          "Introduction",
          "Installation",
          "Math Operators - Part 1",
          "Variables & Data Types - Part 1",
          "Variables & Data Types - Part 2",
          "Assignment Operators",
          "Concatenation",
          "Concatenation - Bonus Video",
          "The Input Function",
          "Basics - 1 Quiz"
        ],
        "Control and Flow": [
          "Comparison != Operators",
          "If, Elif and Else",
          "Logical Operators",
          "For Loops",
          "Nested For Loops"
        ],
        "Strengthening the Fundamentals": [
          "Manipulating Strings and Commenting",
          "More on Variables",
          "Indexing & Slicing Strings",
          "Indexing & Slicing Lists",
          "Exploring Modules"
        ],
        "Creating a Quiz!": [
          "Creating a Quiz - Starting with Functions",
          "Creating a Quiz - Score Management",
          "Creating a Quiz - Finishing Touches"
        ],
        "The Fundamentals (OLD CONTENT)": [
          "Variables & Concatenation",
          "Math Operators",
          "Inputs",
          "If Statements",
          "For Loops",
          "Lists",
          "Functions",
          "While Loops"
        ]
      },
      "requirements": [
        "A laptop to program with Python.",
        "At least 2GB of storage to store your files.",
        "No programming experience needed, you will learn everything through this course.",
        "A drink so that you can chill while learning Python."
      ],
      "description": "Are you looking for a perfect all-in-one bundled fast-paced python programming course?\nWith tutorials and easily understandable example walkthroughs, this bootcamp offers a seamless collection of videos taking you through the basics of Python in an exciting way.\nThis course takes content from the official Python Documentation and so offers in-depth yet simplified explanations for the fundamental concepts of Python. And best of all, it gets straight to the point without boring you with 20-minute videos.\nThe reviews themselves say this!\n\"After the completion of this course, it was a fascinating experience for me. The course content is very nice and the instructor was also very good. His way of explaining the course content is excellent. I am very happy with this course and it gives me great confidence in python. Finally, the course is short and sweet with excellent content.\" - Rao G\nWhy choose this course?\nOther Python courses are, simply put, too long! Before you even get halfway through you're often contemplating whether you even want to do it!\nTrust me, I've been there.\nHaving purchased a few courses with over 50 hours of content, I never managed to complete them because they drag out most of the content.\nBut this basics course goes straight to the point. It's the easiest and fastest course to introduce you to the most trending and popular language right now.\nAdditionally, to help teach you the best practices and to guide you in the right way to learn Python, I've taken this content from the official Python documentation so that I can deliver the most accurate content to you so that you can land that dream Python job.\nFurthermore, the course provides full support with the response team so any questions you may have about the lectures or the programs we work through can be answered. So if you're ever stuck, the support team can guide you so that you can make the program work.\nThis course is also constantly updated (at least once every year) with new content so, once enrolled, you get all the additional content for free! Upcoming topics explore the following:\nAdvanced programming techniques\nFile management\nCreating a jackpot machine\nCreating a parking machine\nIf you want to learn the basics of Python and use it to create awesome programs that can help you with real-world situations, this course is just for you!\nWhat are you waiting for? I'll see you there!\nKarthik Nandula",
      "target_audience": [
        "Anyone who is passionate about the Python programming language.",
        "Anyone who is willing to make their own awesome Python programs.",
        "Beginner programmers who want to learn programming from the ground up.",
        "Programmers who want to strengthen their basics."
      ]
    },
    {
      "title": "C# Advanced Topics: Prepare for Technical Interviews",
      "url": "https://www.udemy.com/course/csharp-advanced/",
      "bio": "Master the confusing C# constructs: Events, Delegates, Lambda Expressions, LINQ, Async/Await and more!",
      "objectives": [
        "Understand advanced C# features and apply them at work"
      ],
      "course_content": {
        "About this Course": [
          "About this Course",
          "Who is Your Instructor?",
          "How This Course is Organised",
          "Asking Questions",
          "Before You Get Started"
        ],
        "C# Advanced Topics": [
          "Test Your Knowledge",
          "Generics",
          "Delegates",
          "Lambda Expressions",
          "Events",
          "Extension Methods",
          "LINQ",
          "Nullable Types",
          "Dynamic",
          "Exception Handling",
          "Asynchronous Programming with Async / Await",
          "C# Advanced Topics Quiz",
          "Source Code",
          "What's New in C# 6"
        ],
        "What's Next": [
          "What You Should Learn after Advanced C#",
          "Additional Resources to Make You a Better Developer",
          "Final Words",
          "Bonus"
        ]
      },
      "requirements": [
        "Understanding of basic C# features (classes, objects, variables, constructors, etc)"
      ],
      "description": "Chances are you're familiar with the basics of C# and are hungry to learn more. Or you've been out of touch with C# for a while and are looking for a quick course as a refresher to get you up to speed with advanced C# constructs. If so, then this course is for you.\n\nIn C# Advanced Topics, the third part in Mosh's best-selling C# series, he walks you through the advanced features of C# that are frequently used in building real-world applications:\nException Handling\nGenerics\nDelegates\nEvents\nLambda Expressions\nExtensions Methods\nLINQ\nNullable Types\nDynamics\nAsynchronous Programming with Async / Await\nAnd more\n\n\nThere are lots of free tutorials and videos on YouTube. Why should you take this course?\nThis course has a clean structure with a perfect pace (not too fast to confuse you, and not too slow to bore you or waste your time). It gives you an in-depth understanding of advanced C# features, and is created by a C# expert and best-selling author with in-depth knowledge of the C# language and .NET Framework as well as 13 years of professional experience in the industry. So, from the very beginning to the very end, you'll be confident that you'll be in good hands. If you got questions along the way, Mosh is here to help you.\n\n\n\n\nMore than 16,000 happy students can't be wrong! Here is a glimpse of what Mosh's students say:\n\n\"I’ve actually landed my first job as a Junior software developer. I owe a lot of it to you because your courses have been EXTREMELY helpful. May God bless you and your efforts to create high quality courses. This has really changed my life from working as a security guard and doing websites for free, now I am a professional.\" -Danish Jafri\n\n\n\n\"Just finished this course today, it was absolutely brilliant! They way the course boils down huge topics, that would take hundreds of dry boring text books into short videos, while including not only theory but how professionals make the most of the concepts. The Man has serious passion about Development, his enthusiasm and experience really make these dense topics fun & easy to learn!\" -Conor McGarth\n\n\n\"This guy really knows what he is doing. I have been a developer for a while and he really knows how to break down what happens behind the scenes and how to create code that is extensible and reusable. I had peers telling me that paying for a course is not worth it but I went ahead and did it and I have learned so much from the videos. This course is definitely worth the price.\" -Justin Weinzimmer\n\"Mosh is a great teacher, explains things clearly, his lessons have a nice logical order, the course is engaging, he never bores, he DOES answer every single question. Highly recommended!\" -Frantisek Nagy\n\n\n\"Excellent! Another brilliant piece of instruction... I have grown to expect nothing less from Mosh!\" -Douglas Crowder\n\n\n\"One of my favorite aspects of Mosh's teaching style is his effort to retain relevance to real-world situations. As an experienced C# developer myself, I can tell you pretty much every topic in this course is important to a .Net developer, and Mosh does a good job of separating what you should understand conceptually versus how you'll likely be using the concepts in practice.\" -M.B\n\n\n\"The information that Mosh provides is extremely helpful. He does a great job of explaining things. Mosh has an interesting and fun style of presenting information. He covers the topics thoroughly and responds to questions in the discussions.\" -Jon Ownbey\n\n\n\nTHE COMPLETE C# PACKAGE\nThis course is the third part of Mosh's complete C# series on Udemy:\nPart 1: C# Basics for Beginners: Learn C# Fundamentals by Coding\nPart 2: C# Intermediate: Classes, Interfaces and Object-oriented Programming\nPart 3: C# Advanced: Take Your C# Skills to the Next Level\n\n\n100% MONEY-BACK GUARANTEE\nThis course comes with a 30-day money back guarantee. If you're not happy, ask for a refund, all your money back, no questions asked.\n\n\n\n\n\n\n\n\n\nABOUT YOUR INSTRUCTOR\n\nMosh (Moshfegh) Hamedani is a .NET developer with over 13 years of professional experience designing and implementing applications and frameworks using C# and .NET.          Mosh's students describe him as a passionate teacher who knows how to lead a student through a logical series of baby steps along with a perfect balance of theory and practice. Read his reviews to see what others say about him and his courses.                                        Mosh is academically educated with a Master of Science in Network Systems and a Bachelor of Science in Software Engineering. He is also a Microsoft Certified Technology Specialist (MCTS), Application Developer (MCAD), and Professional (MCP).\n\n\n\n\nDo you want to take your C# knowledge to the advanced level?\n\nThen take this course and get started.",
      "target_audience": [
        "Any developer who wants to take their C# skills to the advanced level"
      ]
    },
    {
      "title": "Learn Dart Programming for Flutter",
      "url": "https://www.udemy.com/course/learn-dart-programming/",
      "bio": "Build strong foundation in Dart programming language",
      "objectives": [
        "Programming logic foundation, read and write Kotlin with condition and control.",
        "Concept of OOPS in Dart, as other languages like Java, Kotlin, C++, PHP, C#, Scala, or Swift",
        "Use INTELLIJ IDE.",
        "Create basic as well as professional Flutter apps using Dart, the new Java-based programming language developed by Google"
      ],
      "course_content": {
        "Introduction": [
          "Dart Installation: Setup DartPad or INTELLIJ IDEA for Windows, Mac or Linux"
        ],
        "Getting Started": [
          "Dart Hello World : Write your First Dart Program",
          "Exploring Comments"
        ],
        "Exploring Variables and Data Types": [
          "Data Types and Variables in Dart",
          "Strings, Literals and String Interpolation",
          "Define Constants using 'final' and 'const' keyword"
        ],
        "Control Flow Statements": [
          "IF ELSE Conditional Statements",
          "Conditional Expressions",
          "SWITCH and CASE conditional statements"
        ],
        "Loop Control Statements": [
          "Introduction",
          "Explore FOR Loop and how it works",
          "Explore WHILE Loop and how it works",
          "Explore DO WHILE Loop and how it works",
          "BREAK Statement with Labelled FOR Loop",
          "CONTINUE Statement with Labelled FOR Loop"
        ],
        "Exploring Functions": [
          "Functions or Methods. Syntax and Properties",
          "Functions or Methods",
          "Functions Expressions",
          "Optional Positional Parameters",
          "Optional Named Parameters"
        ],
        "Exception Handling": [
          "How to handle Exceptions?",
          "Create custom Exception class"
        ],
        "Object Oriented Dart Programming": [
          "Explore Class, Objects, Instance Variables and Reference Variables",
          "Constructors: Default, Named and Parameterized",
          "Summary"
        ],
        "Leveraging Object Oriented Dart Programming Concepts": [
          "Getter, Setter and Private Instance Variables",
          "Exploring Inheritance",
          "Inheritance Demo",
          "Method Overriding: Polymorphism",
          "Default and Named Constructors during Inheritance",
          "Abstract Class and Abstract Method",
          "Interface",
          "Static Variables and Methods"
        ],
        "Lambdas and Higher-Order Functions": [
          "Exploring Lambdas",
          "Exploring Higher-Order Function",
          "Closures"
        ]
      },
      "requirements": [
        "No previous knowledge on Dart required. We will dive deep from very basics.",
        "Just a PC running Microsoft Windows/Linux/Mac running OS."
      ],
      "description": "2024 Update: My Udemy courses are not being updated anymore.\nI have joined Droidcon Academy and leading the platform. I will continue my passion for teaching by working with thousands of instructors and helping them create high-quality courses for you. Thank you for your enormous support.\n-\nLearn Dart Programming from scratch by Google. Prepare yourself for Flutter apps for Android and iOS and develop Web apps using Dart programming language.\nDart is an object-oriented language which can optionally trans-compile into JavaScript. It supports a varied range of programming aids like interfaces, classes, collections, generics, and optional typing.\nDart can be extensively used to create single-page web apps, Android and iOS apps. Single-page applications enable navigation between different screens of the website without loading a different webpage in the browser.\nIn this course you'll learn:\nDart Setup and required software Installation\nExploring the first Dart application\nBuilt-in Data Types and variable declarations\nConditional Statements\nLoops or Iterators\nFunctions and Methods\nException Handling\nObject Oriented concepts\nInheritance, Abstract Class, Interface and Polymorphism\nFunctional Programming: Lambdas and Higher-Order Functions\nDart Collection: List, Set and Map\nCallable classes\nSummary\nAll the source code is available on Smartherd GitHub repos. Feel free to check them out.",
      "target_audience": [
        "You should be eager to learn this awesome programming language!",
        "You do not need programming skills, we will start from scratch, heading towards intermediate and then to advanced topics.",
        "Anyone who wants to use Dart for existing and new Flutter Apps, get this for yourself."
      ]
    },
    {
      "title": "Java 21, Java 17, Java 11, Java 8 (adv.) and Spring Boot 3",
      "url": "https://www.udemy.com/course/ocp11_from_oca8/",
      "bio": "Master the latest topics; get Oracle OCP Certification (1Z0-830, 829, 819, 809) and code a Spring Boot application",
      "objectives": [
        "Apply functional programming techniques in Java i.e. lambda expressions (including method references) and Streams.",
        "Obtain the knowledge of many advanced Java concepts such as Concurrency, Generics/Collections, Localization, JDBC and IO/NIO.2.",
        "Master the important topics introduced Java since Java 8 e.g. modules, sealed classes, records, switch expressions, unnamed classes and instance main methods.",
        "Acquire the skills to pass the Java OCP exams."
      ],
      "course_content": {
        "Lambda Expressions": [
          "Lambdas - Introduction",
          "Lambdas - using a custom Functional Interface (in code)",
          "Lambdas - using Predicate (in code)",
          "API Functional Interfaces - Predicate and BiPredicate",
          "API Functional Interfaces - Supplier",
          "API Functional Interfaces - Consumer and BiConsumer",
          "API Functional Interfaces - Function and BiFunction",
          "API Functional Interfaces - UnaryOperator and BinaryOperator",
          "Lambdas - final and 'effectively final'",
          "Method References",
          "Bound Method References",
          "Unbound Method References",
          "Static Method References",
          "Constructor Method References",
          "The Importance of Context for Method References",
          "Lambdas Assignment",
          "Lambdas and Method References"
        ],
        "Cloning the Repositories": [
          "Cloning Advanced Java repo",
          "Cloning Spring Boot repos"
        ],
        "Streams": [
          "Introduction and Stream Pipelines",
          "Stream Laziness",
          "Creating Streams",
          "Terminal Operations",
          "Terminal Operations - reduce()",
          "Terminal Operations - collect()",
          "Terminal Operations - collect() - Collectors.toMap()",
          "Terminal Operations - collect() - Collectors.groupingBy()",
          "Terminal Operations - collect() - Collectors.partitioningBy()",
          "Intermediate Operations - filter(), distinct(), limit()",
          "Intermediate Operations - map(), flatMap(), sorted()",
          "Primitive Streams - Creating",
          "Primitive Streams - API",
          "Primitive Streams - Functional Interfaces",
          "Primitive Streams - Mapping Streams",
          "Code - mappingObjectStreams()",
          "Code - mappingPrimitiveStreams()",
          "Optionals",
          "Parallel Streams",
          "Streams Assignment"
        ],
        "Collections and Generics": [
          "Collections - Introduction",
          "Common Collection Methods in Code",
          "List",
          "Lists in Code",
          "Set",
          "Sets in Code",
          "Maps",
          "Maps in Code",
          "Queue and Deque",
          "Queue and Deque in Code",
          "PriorityQueue",
          "Avoiding exceptions while looping over Collections",
          "Sorting - Comparable and Comparator",
          "Code: Comparable - Product",
          "Code: Comparable and Comparator - Sorting Arrays and Lists - Dog",
          "Code: Sorting by Multiple Fields",
          "Code: TreeSet Comparable issue - how to resolve with Comparator",
          "Code: Binary Search",
          "Generics - Introduction",
          "Generics - polymorphism, extends, super",
          "Generics - super and extends (in detail)",
          "Generic Classes and Interfaces",
          "Generic Methods",
          "equals()",
          "hashCode()",
          "Hashing in code",
          "Watch out for mutable fields in hashing",
          "Collections Assignment"
        ],
        "Concurrency": [
          "Introduction",
          "Creating Threads",
          "sleep() and join()",
          "ExecutorService (Introduction)",
          "ExecutorService (code)",
          "Submitting Task Collections (code)",
          "Scheduling Tasks",
          "Thread Safety - Introduction",
          "Data Race Demo",
          "Atomic Classes",
          "AtomicInteger example (code)",
          "synchronized keyword",
          "synchronized example (code)",
          "Lock interface",
          "Lock example (code)",
          "Concurrent Collections - Introduction",
          "Concurrent Collections - API",
          "Concurrent Collections - SkipList Collections",
          "Concurrent Collections - CopyOnWriteCollections",
          "Concurrent Collections - BlockingQueue",
          "Concurrent Collections - synchronized collections",
          "Concurrency - Threading problems - Race Condition",
          "Concurrency - Threading problems - Deadlock",
          "Concurrency - Threading problems - Livelock and Starvation"
        ],
        "Localisation": [
          "Introduction and Creating locales",
          "Localising Numbers and Currencies (Introduction)",
          "Localising Numbers and Currencies",
          "Localising numbers using custom formats",
          "Localising Dates",
          "Locale.Category enums",
          "Resource Bundles, Property Files and Searching",
          "Resource Bundle Searching - Example"
        ],
        "JDBC": [
          "JDBC Introduction",
          "Banking Example Setup",
          "Connecting to a Database",
          "PreparedStatement",
          "BankService - SELECT one",
          "BankService - SELECT all",
          "Bank Service DELETE one/all",
          "BankService - INSERT",
          "BankService - UPDATE",
          "CallableStatement",
          "Resource Leaks"
        ],
        "Java I/O API": [
          "IO",
          "NIO.2"
        ],
        "Java 11 - Local Variable Type Inference (LVTI)": [
          "Local Variable Type Inference (LVTI)"
        ],
        "Java 11 - private Interface Methods": [
          "Private Interface Methods"
        ]
      },
      "requirements": [
        "Understand the fundamentals of Java such as classes, objects, inheritance, polymorphism and call by value. This course starts with lambda expressions.",
        "Access to an IDE such as Netbeans, Eclipse or IntelliJ.",
        "If preparing for any of the Java OCP certifications, ideally, you would use Enthuware in parallel (for excellent MCQ training)."
      ],
      "description": "[UPDATE April 2023] - MAJOR NEWS - this course has been selected by Udemy for inclusion in their Udemy Business program.\n\"Udemy Business is a curated (carefully chosen) selection of high-quality Udemy courses — like yours\" [Udemy email].\n\"Only 3% of all courses are chosen for Udemy Business.\" [Udemy email].\nSince that great recognition from Udemy, I have further improved the course by adding:\nSpring Boot 3\nJava 21, 22, 23\n2 Full OCP Certification Tests\n5 OCP Practice tests\nAll the code is now available on my GitHub repos\nSample reviews:\n\"This Course is most important course and very useful for JAVA developers.\" [Venkateswarlu T]\n\"I am nearing retirement. So far I have learned more about lambdas than in the rest of my lengthy career. I never understood them as well as I do today, and I am only 18 classes into this course. Congratulations to Sean.\" [Robert R]\n\"Great course, great explanation. The best course in Java I have seen so far.\" [Kaylan AD]\n\"The course is amazing, learned a lot of good things.\" [Rakesh L.]\n\"This course provides an exceptional hands-on learning experience with numerous practical examples, making it the best choice for staying up to date with the latest Java versions. The well-structured content and comprehensive approach ensure a deep understanding, making it an invaluable resource for Java developers.\" [Naveen KG]\n\"Amazing course.\" [Imran S.]\n\"this is really a fabulous course, explanation is so basic that I can watch entire course like a movie and never forget a single thing\" [Abhishek K.]\n\"This course is a jewel. Thank you for this course. Sean not only explains everything clearly, but he also solves lots of questions for edge cases, and when you ask a question, he answers. I passed the OCA with his course, and I hope to pass the OCP now.\" [Yigit K.]\n\"Yes exactly what i was looking for. Precise and short lecture at the same time keeping it detailed on the topic.. Excellent!\" [Anand K.]\n\"Dr. Kenedy is truly EXCELLENT. I passed my Java 17 certification thanks to its course ... with 86%\" [Francklin]\n\"Definitely the best Java course I've ever passed! It has detailed explanation of the most complex topics, and the code examples are really helpful. Special thanks to Dr. Seán for highlighting new Java 21 features. I couldn't wish more for this course.\" [Anna]\n\"A very good, comprehensive course with code tests. I highly recommend it. It's clear he has a great understanding of the subject.\" [Ricardo V.]\n\"Excellent - especially like the detail and pace - very good course.\" [Alan C]\n\"I thoroughly enjoyed your course! ... I especially appreciated the hands-on coding examples, which made understanding functional programming concepts in Java much easier. ... Your teaching style is very engaging... Highly recommend this course to anyone looking to master advanced Java concepts. Thank you for creating such a high-quality learning experience!\" [Srini B]\n\"Clearly explained, easy to follow and understand. Good code examples.\" [Ugyen N]\n\"Great presentation skills, algo great knowledge of the subject by the instructor. Perfect talking speed, pauses, indications with details. Content is excellent. One of the best courses so far.\" [Ricardo Q.]\n\"excellent course\" [EL B]\n\"Look, it really seems like the best course I've ever taken, without a lot of small talk, just good, well-structured content. Getting straight to the point.\" [Doug]\n\"Very useful exercises and really interesting syllabus\" [Laura]\n\"Excellent content.\" [Harinder C.]\n\"Clearly explained and easy to understand.\" [Thandekile V]\n\"Great course from Sean !!!\" [Patrick M]\n\"This course tests all the concepts from scratch end and covers all the topics. I am happy that I chose this course.\" [Joshi J]\n\"Easy to follow and straight to the point\" [Daniel M]\n\"Was easy to understand and simple examples.\" [Mark F]\n\"Great how detailed it is.\" [Ali A]\n\"very good and very useful\" [Lilian P]\n\"Excellent and useful explanations\" [José C]\n\"Explanation is very good and resources supplied helped to recall the learnings.\" [Javed]\n\"very condensed info. in a very simple way it teaches you a bunch of concepts is a very rapid way.\" [Esteban C]\n\"...I have just finished several sections and I can feel the instructor really has deep knowledge on Java with excellent teaching skills and demo skills and I already take many things into my job and improve a lot of my coding readability and performance...\" [Passakorn S]\n\"The course is very much helpful as it covers everything one need to know about the latest and useful features of different Java versions.\" [Arnab S]\n\"very well explained with example and a lot of practice assignment as well. Very high knowlegable.\" [Vikash K]\n\"Very good and complete course.\" [Gianni F]\n\n\nOverview:\nJava has now 4 LTS (Long Term Support) releases: 8, 11, 17 and 21. This course covers them all : it addresses advanced Java 8 programming in addition to Java 11, 17 and 21. Indeed I have added sections for both Java 22 and 23 (see below).\nThis course is a successor to my \"Java 8 OCA (1Z0-808) Certification - Master the Fundamentals\", which covers Java fundamentals in great detail. As a result, this course starts with lambdas i.e. fundamentals such as classes, interfaces, operators and methods are not in this course. It is important to realise that while familiarity with Java is helpful, certification is certainly not a pre-requisite.\nThis course starts with the advanced topics of Java 8 - lambdas, streams, collections, generics, concurrency etc. There are assignments for lambdas, streams and collections.\nJava 11 is then covered - LVTI, private interface methods, annotations, security and modules. Modules are examined in detail (with examples).\nJava 17 is covered next - sealed classes, records, switch expressions, pattern matching and text blocks. A significant assignment covering all topics is included.\nJava 21 then follows - unnamed classes and instance main methods, record patterns, pattern matching for switch, sequenced collections and virtual threads. An assignment that builds on the Java 17 assignment, is included.\nIn Java 22, I cover unnamed variables and patterns and in Java 23, markdown is covered.\nSpring Boot 3 Application is next - how RESTful applications work, dependency injection/inversion of control and testing with Postman. An assignment is used to reinforce the material and its solution is explained in detail.\n2 Full OCP Practice Tests - mimicking the OCP exam itself, all questions have detailed solutions. Not to be underestimated as a learning opportunity i.e. if you don't want to take the Tests, just play the videos solutions of interest.\n5 OCP Practice Quizzes - smaller versions of the Tests above; again, all questions have detailed solutions.\nTopics are presented with both general understanding and certification in mind i.e. the course caters for both. Regarding certification, Java 8 OCP (1Z0-809), Java 11 OCP (1Z0-819) and Java 17 OCP (1Z0-829) are targeted. This course would be a great training support in conjunction with the excellent MCQ Certification tool from Enthuware.\nThe theory of the topic is explained with lots of code examples used to reinforce the topic. The videos are annotated in detail to help the learner follow my explanations. Having access to the code is a great learning aid as you can get the code running and see what happens when you change it. In addition, the assignments/exercises are a great aid for learning.\n\n\nTopics include:\nSpring Boot 3 Application:\nconfiguring a Spring Boot application, including its dependencies\nunderstanding how RESTful applications work\nhow dependency injection/inversion of control operate\narchitecture overview\ncode explained in detail\ntesting the application with Postman\nan assignment with the solution explained in detail\nJava 23:\nMarkdown\nJava 22:\nUnnamed variables and unnamed patterns\nJava 21:\nUnnamed classes and instance main methods\nRecord patterns\nPattern matching for switch\nSequenced collections\nVirtual Threads\nJava 17:\nSealed classes\nRecords\nswitch expressions and pattern matching\nText blocks\nJava 11:\nModules\nprivate interface methods\nLVTI (local variable type inference)\nAnnotations\nSecurity\nJava 8 Advanced:\nLambda Expressions\nStreams\nGenerics\nCollections\nConcurrency\nJDBC\nFile IO\nNIO.2\nSerialisation\nLocalisation\n2 x OCP Certification Quizzes - As per Oracle OCP certification tests, each quiz contains 50 questions; has a time limit of 120 mins and requires 68% to pass.  Every question is explained with a video solution and in numerous cases I delve into code to further enhance the explanation. Even if you do not intend to do a Certification exam, these solution videos present lots of valuable information and therefore, provide many excellent learning opportunities.\n5 x OCP Practice Quizzes - There are 69 MCQ questions in total. As per the the Tests (see above), every question is explained with a video solution.\n\n\nMy background:\nI am a PhD-qualified University lecturer since 2002. For over 12 years, I have taught Java on a bespoke Masters on behalf of a highly regarded software company.\nI love teaching and this course has all my experience in explaining advanced concepts of Java. In addition, I have a strong attention to detail which lends itself perfectly to the Oracle Java Certification exams.",
      "target_audience": [
        "Students/software professionals who want to take their Java beyond the fundamentals and understand advanced Java topics.",
        "Students/software professionals wanting to master the new features introduced since Java 8",
        "Anyone preparing for Java OCP Certification."
      ]
    },
    {
      "title": "The Complete Python Developer",
      "url": "https://www.udemy.com/course/complete-python-developer-zero-to-mastery/",
      "bio": "How to become a Python 3 Developer and get hired! Build 12+ projects, learn Web Development, Machine Learning + more!",
      "objectives": [
        "Become a professional Python Developer and get hired",
        "Master modern Python 3.13(latest) fundamentals as well as advanced topics",
        "Learn Object Oriented Programming",
        "Learn Function Programming",
        "Build 12+ real world Python projects you can show off",
        "Learn how to use Python in Web Development",
        "Learn Machine Learning with Python",
        "Build a Machine Learning Model",
        "Learn Data Science - Analyze and Visualize Data",
        "Build a professional Portfolio Website",
        "Use Python to process: Images, CSVs, PDFs, and other Files",
        "Build a Web Scraper with Python and BeautifulSoup",
        "Use Python to send Emails and SMS",
        "Use Python to build a Twitter bot",
        "Learn to Test, Debug and Handle Errors in your Python programs",
        "Learn best practices to write clean, performant, and bug free code",
        "Learn to use Selenium and Python in Automation",
        "Set up a professional workspace with Jupyter Notebooks, PyCharm, VS Code + more"
      ],
      "course_content": {
        "Introduction": [
          "Course Outline",
          "Join Our Online Classroom!",
          "Exercise: Meet Your Classmates & Instructor",
          "ZTM Resources"
        ],
        "Python Introduction": [
          "What Is A Programming Language",
          "Python Interpreter",
          "How To Run Python Code",
          "Note: Jumping To Developer Environment",
          "IMPORTANT: Replit Code",
          "Our First Python Program",
          "Monthly Coding Challenges, Free Resources and Guides",
          "Python 2 vs Python 3",
          "Why So Many Languages?",
          "Exercise: How Does Python Work?",
          "ZTM Python Cheat Sheet",
          "Python Developer Monthly",
          "Endorsements On LinkedIN"
        ],
        "Python Basics": [
          "Learning Python",
          "Python Data Types",
          "How To Succeed",
          "Numbers",
          "Math Functions",
          "DEVELOPER FUNDAMENTALS: I",
          "Operator Precedence",
          "Exercise: Operator Precedence",
          "Optional: bin() and complex",
          "Variables",
          "Expressions vs Statements",
          "Augmented Assignment Operator",
          "Strings",
          "String Concatenation",
          "Type Conversion",
          "Escape Sequences",
          "Formatted Strings",
          "String Indexes",
          "Immutability",
          "Built-In Functions + Methods",
          "Booleans",
          "Exercise: Type Conversion",
          "DEVELOPER FUNDAMENTALS: II",
          "Exercise: Password Checker",
          "Lists",
          "List Slicing",
          "Matrix",
          "List Methods",
          "List Methods 2",
          "List Methods 3",
          "Common List Patterns",
          "List Unpacking",
          "None",
          "Dictionaries",
          "Python 3.7: Ordered Dict",
          "DEVELOPER FUNDAMENTALS: III",
          "Dictionary Keys",
          "Dictionary Methods",
          "Dictionary Methods 2",
          "Tuples",
          "Tuples 2",
          "Sets",
          "Sets 2"
        ],
        "Python Basics II": [
          "Breaking The Flow",
          "Conditional Logic",
          "Indentation In Python",
          "Truthy vs Falsey",
          "Ternary Operator",
          "Short Circuiting",
          "Logical Operators",
          "Exercise: Logical Operators",
          "is vs ==",
          "For Loops",
          "Iterables",
          "Exercise: Tricky Counter",
          "range()",
          "enumerate()",
          "While Loops",
          "While Loops 2",
          "break, continue, pass",
          "Our First GUI",
          "DEVELOPER FUNDAMENTALS: IV",
          "Exercise: Find Duplicates",
          "Functions",
          "Parameters and Arguments",
          "Default Parameters and Keyword Arguments",
          "return",
          "Exercise: Tesla",
          "Methods vs Functions",
          "Docstrings",
          "Clean Code",
          "*args and **kwargs",
          "Exercise: Functions",
          "Walrus Operator",
          "Scope",
          "Scope Rules",
          "global Keyword",
          "nonlocal Keyword",
          "Why Do We Need Scope?",
          "Exercise: Imposter Syndrome",
          "Python Exam: Testing Your Understanding"
        ],
        "Developer Environment": [
          "MAC - Python Install",
          "WINDOWS - Python Install",
          "WINDOWS - Get Terminal",
          "LINUX - Python Install",
          "Python Developer Tools",
          "Sublime Text",
          "Resources: Customizing Sublime Text 4",
          "Quick Note: Upcoming Video",
          "Optional: Terminal Commands",
          "iTerm Setup",
          "Using the Command Line/Terminal",
          "Visual Studio Code",
          "PyCharm",
          "Code Formatting - PEP 8",
          "Quick Note: Jupyter Notebooks",
          "Jupyter Notebooks",
          "Section Review"
        ],
        "Advanced Python: Object Oriented Programming": [
          "Note on Upcoming Sections",
          "What Is OOP?",
          "What is OOP? Part 2",
          "Creating Our Own Objects",
          "Attributes and Methods",
          "__init__",
          "Exercise: Cats Everywhere",
          "@classmethod and @staticmethod",
          "Reviewing What We Know So Far",
          "DEVELOPER FUNDAMENTALS: V",
          "Encapsulation",
          "Abstraction",
          "Private vs Public Variables",
          "Inheritance",
          "Inheritance 2",
          "Polymorphism",
          "Exercise: Pets Everywhere",
          "super()",
          "Object Introspection",
          "Dunder Methods",
          "Exercise: Extending List",
          "Multiple Inheritance",
          "MRO - Method Resolution Order"
        ],
        "Advanced Python: Functional Programming": [
          "Functional Programming",
          "What Is Functional Programming?",
          "Pure Functions",
          "map()",
          "filter()",
          "zip()",
          "reduce()",
          "Exercises: map, filter, zip, reduce",
          "Lambda Expressions",
          "Exercise: Lambda Expressions",
          "List Comprehensions",
          "Set and Dictionary Comprehension",
          "Exercise: Comprehensions",
          "We Still Have More To Go!"
        ],
        "Advanced Python: Decorators": [
          "Decorators",
          "Higher Order Functions",
          "Decorators 2",
          "Decorators 3",
          "Why Do We Need Decorators?",
          "Exercise: @authenticated"
        ],
        "Advanced Python: Error Handling": [
          "Errors in Python",
          "Error Handling",
          "Error Handling 2",
          "Exercises: Error Handling",
          "Error Handling 3"
        ],
        "Advanced Python: Generators": [
          "Generators",
          "Generators 2",
          "Generators Performance",
          "Under The Hood Of Generators",
          "Exercise: Fibonacci Numbers",
          "100 Python Exercises"
        ]
      },
      "requirements": [
        "A computer (Windows/Mac/Linux). That's it!",
        "No prior knowledge of Python is required.",
        "No previous programming experience is needed.",
        "Prepare to fall in love with Python and programming!"
      ],
      "description": "It's time to become a modern and complete Python developer! Join a live online community of over 900,000+ developers and a course taught by an industry expert that has actually worked both in Silicon Valley and Toronto. Graduates of Andrei’s courses are now working at Google, Tesla, Amazon, Apple, IBM, JP Morgan, Meta, + other top tech companies.\nLearn Python from scratch, get hired, and have fun along the way with the most modern, up-to-date Python course on Udemy (we use the latest version of Python). This course is focused on efficiency: never spend time on confusing, out of date, incomplete Python tutorials anymore.\nThis comprehensive and project based course will introduce you to all of the modern skills of a Python developer (Python 3) and along the way, we will build over 12 real world projects to add to your portfolio (You will get access to all the the code from the 12+ projects we build, so that you can put them on your portfolio right away)!\n\nThe curriculum is going to be very hands on as we walk you from start to finish of becoming a professional Python developer. We will start from the very beginning by teaching you Python basics and programming fundamentals, and then going into advanced topics and different career fields in Python so you can get real life practice and be ready for the real world.\n\nThe topics covered in this course are:\n\n\n- Programming Fundamentals\n- Python Basics\n- Python Fundamentals\n- Data Structures\n- Object Oriented Programming with Python\n- Functional Programming with Python\n- Lambdas\n- Decorators\n- Generators\n- Testing in Python\n- Debugging\n- Error Handling\n- Regular Expressions\n- Comprehensions\n- Modules\n- Virtual Environments\n- Developer Environments (PyCharm, Jupyter Notebooks, VS Code, Sublime Text + more)\n- File Processing: Image, CSV, PDFs, Text + more\n- Web Development with Python\n- Machine Learning with Python\n- Data Science with Python\n- Automation with Python and Selenium\n- Scripting with Python\n- Web Scraping with Python and BeautifulSoup\n- Image Detection\n- Data Visualizations\n- Kaggle, Pandas, NumPy, scikit-learn\n- Email and SMS with Python\n- Working with APIs (Twitter Bot, Password Checker, Translator)\n\n\nBy the end of this course, you will be a complete Python developer that can get hired at large companies. We are going to use Python to work with Email, Text Messages, CSV files, PDF files, Image Files, Data Visualizations, build our own machine learning model and perform Image detection. We are going to build a web scraper for HackerNews, build a Twitter bot,  build the most secure password checker and we will also build some automation tools using Selenium. But the best part? We will build an actual portfolio website using Python that your future employer and customers can contact you at. By the end, you will have a stack of projects you have built that you can show off to others.\n\n\nHere’s the truth: Most courses teach you Python and do just that. They show you how to get started. But the thing is you don’t know where to go from there or how to build your own projects.\n\n\nWhether you are new to programming, or want to level up your Python skills, or are coming from a different programming language, this course is for you. This course is not about making you just code along without understanding the principles so that when you are done with the course you don’t know what to do other than watch another tutorial. No! This course will push you and challenge you to go from an absolute beginner with no coding experience to someone that can go off, forget about me, and build their own applications and get hired.\n\n\nTaught By:\nAndrei Neagoie is the instructor of the highest rated Development courses on Udemy as well as one of the fastest growing. His graduates have moved on to work for some of the biggest tech companies around the world like Apple, Google, Amazon, JP Morgan, IBM, UNIQLO etc... He has been working as a senior software developer in Silicon Valley and Toronto for many years, and is now taking all that he has learned, to teach programming skills and to help you discover the amazing career opportunities that being a developer allows in life.\nHaving been a self taught programmer, he understands that there is an overwhelming number of online courses, tutorials and books that are overly verbose and inadequate at teaching proper skills. Most people feel paralyzed and don't know where to start when learning a complex subject matter, or even worse, most people don't have $20,000 to spend on a coding bootcamp. Programming skills should be affordable and open to all. An education material should teach real life skills that are current and they should not waste a student's valuable time.   Having learned important lessons from working for Fortune 500 companies, tech startups, to even founding his own business, he is now dedicating 100% of his time to teaching others valuable software development skills in order to take control of their life and work in an exciting industry with infinite possibilities.\nAndrei promises you that there are no other courses out there as comprehensive and as well explained. He believes that in order to learn anything of value, you need to start with the foundation and develop the roots of the tree. Only from there will you be able to learn concepts and specific skills(leaves) that connect to the foundation. Learning becomes exponential when structured in this way.\nTaking his experience in educational psychology and coding, Andrei's courses will take you on an understanding of complex subjects that you never thought would be possible.\nSee you inside the course!",
      "target_audience": [
        "Anyone who wants to master Python 3",
        "Anyone who wants to learn to code",
        "Anyone looking to level up their skills and master a new programming language",
        "Anyone who wants to get into: Web Development, Machine Learning, Data Science and other hot job markets"
      ]
    },
    {
      "title": "The Complete Data Structures and Algorithms Course in Python",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-bootcamp-in-python/",
      "bio": "100+ DSA Interview Questions for Cracking FAANG with Animated Examples for Deeper Understanding and Faster Learning",
      "objectives": [
        "Learn, implement, and use different Data Structures",
        "Learn, implement and use different Algorithms",
        "Become a better developer by mastering computer science fundamentals",
        "Learn everything you need to ace difficult coding interviews",
        "Cracking the Coding Interview with 100+ questions with explanations",
        "Time and Space Complexity of Data Structures and Algorithms",
        "Recursion",
        "Big O"
      ],
      "course_content": {},
      "requirements": [
        "Basic Python Programming skills"
      ],
      "description": "Welcome to the Complete Data Structures and Algorithms in Python Bootcamp, the most modern, and the most complete Data Structures and Algorithms in Python course on the internet.\nAt 40+ hours, this is the most comprehensive course online to help you ace your coding interviews and learn about Data Structures and Algorithms in Python. You will see 100+ Interview Questions done at the top technology companies such as Apple,Amazon, Google and Microsoft and how to face Interviews with comprehensive visual explanatory video materials which will bring you closer towards landing the tech job of your dreams!\nLearning Python is one of the fastest ways to improve your career prospects as it is one of the most in demand tech skills! This course will help you in better understanding every detail of Data Structures and how algorithms are implemented in high level programming language.\nWe'll take you step-by-step through engaging video tutorials and teach you everything you need to succeed as a professional programmer.\nAfter finishing this course, you will be able to:\nLearn basic algorithmic techniques such as greedy algorithms, binary search, sorting and dynamic programming to solve programming challenges.\nLearn the strengths and weaknesses of a variety of data structures, so you can choose the best data structure for your data and applications\nLearn many of the algorithms commonly used to sort data, so your applications will perform efficiently when sorting large datasets\nLearn how to apply graph and string algorithms to solve real-world challenges: finding shortest paths on huge maps and assembling genomes from millions of pieces.\n\n\nWhy this course is so special and different from any other resource available online?\n\n\nThis course will take you from very beginning to a very complex and advanced topics in understanding Data Structures and Algorithms!\nYou will get video lectures explaining concepts clearly with comprehensive visual explanations throughout the course.\nYou will also see Interview Questions done at the top technology companies such as Apple,Amazon, Google and Microsoft.\nI cover everything you need to know about technical interview process!\n\n\nSo whether you are interested in learning the top programming language in the world in-depth\nAnd interested in learning the fundamental Algorithms, Data Structures and performance analysis that make up the core foundational skillset of every accomplished programmer/designer or software architect and is excited to ace your next technical interview this is the course for you!\n\n\nAnd this is what you get by signing up today:\n\n\nLifetime access to 40+ hours of HD quality videos. No monthly subscription. Learn at your own pace, whenever you want\nFriendly and fast support in the course Q&A whenever you have questions or get stuck\nFULL money back guarantee for 30 days!\n\n\nWho is this course for?\nSelf-taught programmers who have a basic knowledge in Python and want to be professional in Data Structures and Algorithms and begin interviewing in tech positions!\nAs well as students currently studying computer science and want supplementary material on Data Structures and Algorithms and interview preparation for after graduation!\nAs well as professional programmers who need practice for upcoming coding interviews.\nAnd finally anybody interested in learning more about data structures and algorithms or the technical interview process!\nThis course is designed to help you to achieve your career goals. Whether you are looking to get more into Data Structures and Algorithms , increase your earning potential or just want a job with more freedom, this is the right course for you!\nThe topics that are covered in this course.\nSection 1 - Introduction\nWhat are Data Structures?\nWhat is an algorithm?\nWhy are Data Structures and Algorithms important?\nTypes of Data Structures\nTypes of Algorithms\nSection 2 - Recursion\nWhat is Recursion?\nWhy do we need recursion?\nHow Recursion works?\nRecursive vs Iterative Solutions\nWhen to use/avoid Recursion?\nHow to write Recursion in 3 steps?\nHow to find Fibonacci numbers using Recursion?\nSection 3 - Cracking Recursion Interview Questions\nQuestion 1 - Sum of Digits\nQuestion 2 - Power\nQuestion 3 - Greatest Common Divisor\nQuestion 4 - Decimal To Binary\nSection 4 - Bonus CHALLENGING Recursion Problems (Exercises)\npower\nfactorial\nproductofArray\nrecursiveRange\nfib\nreverse\nisPalindrome\nsomeRecursive\nflatten\ncaptalizeFirst\nnestedEvenSum\ncapitalizeWords\nstringifyNumbers\ncollectStrings\nSection 5 - Big O Notation\nAnalogy and Time Complexity\nBig O, Big Theta and Big Omega\nTime complexity examples\nSpace Complexity\nDrop the Constants and the non dominant terms\nAdd vs Multiply\nHow to measure the codes using Big O?\nHow to find time complexity for Recursive calls?\nHow to measure Recursive Algorithms that make multiple calls?\nSection 6 - Top 10 Big O Interview Questions (Amazon, Facebook, Apple and Microsoft)\nProduct and Sum\nPrint Pairs\nPrint Unordered Pairs\nPrint Unordered Pairs 2 Arrays\nPrint Unordered Pairs 2 Arrays 100000 Units\nReverse\nO(N)  Equivalents\nFactorial Complexity\nFibonacci Complexity\nPowers of 2\nSection 7 - Arrays\nWhat is an Array?\nTypes of Array\nArrays in Memory\nCreate an Array\nInsertion Operation\nTraversal Operation\nAccessing an element of Array\nSearching for an element in Array\nDeleting an element from Array\nTime and Space complexity of One Dimensional Array\nOne Dimensional Array Practice\nCreate Two Dimensional Array\nInsertion - Two Dimensional Array\nAccessing an element of Two Dimensional Array\nTraversal - Two Dimensional Array\nSearching for an element in Two Dimensional Array\nDeletion - Two Dimensional Array\nTime and Space complexity of Two Dimensional Array\nWhen to use/avoid array\nSection 8 - Python Lists\nWhat is a List? How to create it?\nAccessing/Traversing a list\nUpdate/Insert a List\nSlice/ from a List\nSearching for an element in a List\nList Operations/Functions\nLists and strings\nCommon List pitfalls and ways to avoid them\nLists vs Arrays\nTime and Space Complexity of List\nList Interview Questions\nSection 9 - Cracking Array/List Interview Questions (Amazon, Facebook, Apple and Microsoft)\nQuestion 1 - Missing Number\nQuestion 2 - Pairs\nQuestion 3 - Finding a number in an Array\nQuestion 4 - Max product of two int\nQuestion 5 - Is Unique\nQuestion 6 - Permutation\nQuestion 7 - Rotate Matrix\nSection 10 - CHALLENGING Array/List Problems (Exercises)\nMiddle Function\n2D Lists\nBest Score\nMissing Number\nDuplicate Number\nPairs\nSection 11 - Dictionaries\nWhat is a Dictionary?\nCreate a Dictionary\nDictionaries in memory\nInsert /Update an element in a Dictionary\nTraverse through a Dictionary\nSearch for an element in a Dictionary\nDelete / Remove an element from a Dictionary\nDictionary Methods\nDictionary operations/ built in functions\nDictionary vs List\nTime and Space Complexity of a Dictionary\nDictionary Interview Questions\nSection 12 - Tuples\nWhat is a Tuple? How to create it?\nTuples in Memory / Accessing an element of Tuple\nTraversing a Tuple\nSearch for an element in Tuple\nTuple Operations/Functions\nTuple vs List\nTime and Space complexity of Tuples\nTuple Questions\nSection 13 - Linked List\nWhat is a Linked List?\nLinked List vs Arrays\nTypes of Linked List\nLinked List in the Memory\nCreation of Singly Linked List\nInsertion in Singly Linked List in Memory\nInsertion in Singly Linked List Algorithm\nInsertion Method in Singly Linked List\nTraversal of Singly Linked List\nSearch for a value in Single Linked List\nDeletion of node from Singly Linked List\nDeletion Method in Singly Linked List\nDeletion of entire Singly Linked List\nTime and Space Complexity of Singly Linked List\nSection 14 - Circular Singly Linked List\nCreation of Circular Singly Linked List\nInsertion in Circular Singly Linked List\nInsertion Algorithm in Circular Singly Linked List\nInsertion method in Circular Singly Linked List\nTraversal of Circular Singly Linked List\nSearching a node in Circular Singly Linked List\nDeletion of a node from Circular Singly Linked List\nDeletion Algorithm in Circular Singly Linked List\nMethod in Circular Singly Linked List\nDeletion of entire Circular Singly Linked List\nTime and Space Complexity of Circular Singly Linked List\nSection 15 - Doubly Linked List\nCreation of Doubly Linked List\nInsertion in Doubly Linked List\nInsertion Algorithm in Doubly Linked List\nInsertion Method in Doubly Linked List\nTraversal of Doubly Linked List\nReverse Traversal of Doubly Linked List\nSearching for a node in Doubly Linked List\nDeletion of a node in Doubly Linked List\nDeletion Algorithm in Doubly Linked List\nDeletion Method in Doubly Linked List\nDeletion of entire Doubly Linked List\nTime and Space Complexity of Doubly Linked List\nSection 16 - Circular Doubly Linked List\nCreation of Circular Doubly Linked List\nInsertion in Circular Doubly Linked List\nInsertion Algorithm in Circular Doubly Linked List\nInsertion Method in Circular Doubly Linked List\nTraversal of Circular Doubly Linked List\nReverse Traversal of Circular Doubly Linked List\nSearch for a node in Circular Doubly Linked List\nDelete a node from Circular Doubly Linked List\nDeletion Algorithm in Circular Doubly Linked List\nDeletion Method in Circular Doubly Linked List\nEntire Circular Doubly Linked List\nTime and Space Complexity of Circular Doubly Linked List\nTime Complexity of Linked List vs Arrays\nSection 17 - Cracking Linked List Interview Questions (Amazon, Facebook, Apple and Microsoft)\nLinked List Class\nQuestion 1 - Remove Dups\nQuestion 2 - Return Kth to Last\nQuestion 3 - Partition\nQuestion 4 - Sum Linked Lists\nQuestion 5 - Intersection\nSection 18 - Stack\nWhat is a Stack?\nStack Operations\nCreate Stack using List without size limit\nOperations on Stack using List (push, pop, peek, isEmpty, )\nCreate Stack with limit (pop, push, peek, isFull, isEmpty, )\nCreate Stack using Linked List\nOperation on Stack using Linked List (pop, push, peek, isEmpty, )\nTime and Space Complexity of Stack using Linked List\nWhen to use/avoid Stack\nStack Quiz\nSection 19 - Queue\nWhat is Queue?\nQueue using Python List - no size limit\nQueue using Python List - no size limit , operations (enqueue, dequeue, peek)\nCircular Queue - Python List\nCircular Queue - Python List, Operations (enqueue, dequeue, peek, )\nQueue - Linked List\nQueue - Linked List, Operations (Create, Enqueue)\nQueue - Linked List, Operations (Dequeue(), isEmpty, Peek)\nTime and Space complexity of Queue using Linked List\nList vs Linked List Implementation\nCollections Module\nQueue Module\nMultiprocessing module\nSection 20 - Cracking Stack and Queue Interview Questions (Amazon,Facebook, Apple, Microsoft)\nQuestion 1 - Three in One\nQuestion 2 - Stack Minimum\nQuestion 3 - Stack of Plates\nQuestion 4 - Queue via Stacks\nQuestion 5 - Animal Shelter\nSection 21 - Tree / Binary Tree\nWhat is a Tree?\nWhy Tree?\nTree Terminology\nHow to create a basic tree in Python?\nBinary Tree\nTypes of Binary Tree\nBinary Tree Representation\nCreate Binary Tree (Linked List)\nPreOrder Traversal Binary Tree (Linked List)\nInOrder Traversal Binary Tree (Linked List)\nPostOrder Traversal Binary Tree (Linked List)\nLevelOrder Traversal Binary Tree (Linked List)\nSearching for a node in Binary Tree (Linked List)\nInserting a node in Binary Tree (Linked List)\nDelete a node from Binary Tree (Linked List)\nDelete entire Binary Tree (Linked List)\nCreate Binary Tree (Python List)\nInsert a value Binary Tree (Python List)\nSearch for a node in Binary Tree (Python List)\nPreOrder Traversal Binary Tree (Python List)\nInOrder Traversal Binary Tree (Python List)\nPostOrder Traversal Binary Tree (Python List)\nLevel Order Traversal Binary Tree (Python List)\nDelete a node from Binary Tree (Python List)\nEntire Binary Tree (Python List)\nLinked List vs Python List Binary Tree\nSection 22 - Binary Search Tree\nWhat is a Binary Search Tree? Why do we need it?\nCreate a Binary Search Tree\nInsert a node to BST\nTraverse BST\nSearch in BST\nDelete a node from BST\nDelete entire BST\nTime and Space complexity of BST\nSection 23 - AVL Tree\nWhat is an AVL Tree?\nWhy AVL Tree?\nCommon Operations on AVL Trees\nInsert a node in AVL (Left Left Condition)\nInsert a node in AVL (Left Right Condition)\nInsert a node in AVL (Right Right Condition)\nInsert a node in AVL (Right Left Condition)\nInsert a node in AVL (all together)\nInsert a node in AVL (method)\nDelete a node from AVL (LL, LR, RR, RL)\nDelete a node from AVL (all together)\nDelete a node from AVL (method)\nDelete entire AVL\nTime and Space complexity of AVL Tree\nSection 24 - Binary Heap\nWhat is Binary Heap? Why do we need it?\nCommon operations (Creation, Peek, sizeofheap) on Binary Heap\nInsert a node in Binary Heap\nExtract a node from Binary Heap\nDelete entire Binary Heap\nTime and space complexity of Binary Heap\nSection 25 - Trie\nWhat is a Trie? Why do we need it?\nCommon Operations on Trie (Creation)\nInsert a string in Trie\nSearch for a string in Trie\nDelete a string from Trie\nPractical use of Trie\nSection 26 - Hashing\nWhat is Hashing? Why do we need it?\nHashing Terminology\nHash Functions\nTypes of Collision Resolution Techniques\nHash Table is Full\nPros and Cons of Resolution Techniques\nPractical Use of Hashing\nHashing vs Other Data structures\nSection 27 - Sort Algorithms\nWhat is Sorting?\nTypes of Sorting\nSorting Terminologies\nBubble Sort\nSelection Sort\nInsertion Sort\nBucket Sort\nMerge Sort\nQuick Sort\nHeap Sort\nComparison of Sorting Algorithms\nSection 28 - Searching Algorithms\nIntroduction to Searching Algorithms\nLinear Search\nLinear Search in Python\nBinary Search\nBinary Search in Python\nTime Complexity of Binary Search\n\n\nSection 29 - Graph Algorithms\nWhat is a Graph? Why Graph?\nGraph Terminology\nTypes of Graph\nGraph Representation\nCreate a graph using Python\nGraph traversal - BFS\nBFS Traversal in Python\nGraph Traversal - DFS\nDFS Traversal in Python\nBFS Traversal vs DFS Traversal\nTopological Sort\nTopological Sort Algorithm\nTopological Sort in Python\nSingle Source Shortest Path Problem (SSSPP)\nBFS for Single Source Shortest Path Problem (SSSPP)\nBFS for Single Source Shortest Path Problem (SSSPP) in Python\nWhy does BFS not work with weighted Graphs?\nWhy does DFS not work for SSSP?\nDijkstra's Algorithm for SSSP\nDijkstra's Algorithm in Python\nDijkstra Algorithm with negative cycle\nBellman Ford Algorithm\nBellman Ford Algorithm with negative cycle\nWhy does Bellman Ford run V-1 times?\nBellman Ford in Python\nBFS vs Dijkstra vs Bellman Ford\nAll pairs shortest path problem\nDry run for All pair shortest path\nFloyd Warshall Algorithm\nWhy Floyd Warshall?\nFloyd Warshall with negative cycle,\nFloyd Warshall in Python,\nBFS vs Dijkstra vs Bellman Ford vs Floyd Warshall,\nMinimum Spanning Tree,\nDisjoint Set,\nDisjoint Set in Python,\nKruskal Algorithm,\nKruskal Algorithm in Python,\nPrim's Algorithm,\nPrim's Algorithm in Python,\nPrim's vs Kruskal\nSection 30 - Greedy Algorithms\nWhat is Greedy Algorithm?\nWell known Greedy Algorithms\nActivity Selection Problem\nActivity Selection Problem in Python\nCoin Change Problem\nCoin Change Problem in Python\nFractional Knapsack Problem\nFractional Knapsack Problem in Python\nSection 31 - Divide and Conquer Algorithms\nWhat is a Divide and Conquer Algorithm?\nCommon Divide and Conquer algorithms\nHow to solve Fibonacci series using Divide and Conquer approach?\nNumber Factor\nNumber Factor in Python\nHouse Robber\nHouse Robber Problem in Python\nConvert one string to another\nConvert One String to another in Python\nZero One Knapsack problem\nZero One Knapsack problem in Python\nLongest Common Sequence Problem\nLongest Common Subsequence in Python\nLongest Palindromic Subsequence Problem\nLongest Palindromic Subsequence in Python\nMinimum cost to reach the Last cell problem\nMinimum Cost to reach the Last Cell in 2D array using Python\nNumber of Ways to reach the Last Cell with given Cost\nNumber of Ways to reach the Last Cell with given Cost in Python\nSection 32 - Dynamic Programming\nWhat is Dynamic Programming? (Overlapping property)\nWhere does the name of DC come from?\nTop Down with Memoization\nBottom Up with Tabulation\nTop Down vs Bottom Up\nIs Merge Sort Dynamic Programming?\nNumber Factor Problem using Dynamic Programming\nNumber Factor : Top Down and Bottom Up\nHouse Robber Problem using Dynamic Programming\nHouse Robber : Top Down and Bottom Up\nConvert one string to another using Dynamic Programming\nConvert String using Bottom Up\nZero One Knapsack using Dynamic Programming\nZero One Knapsack - Top Down\nZero One Knapsack - Bottom Up\nSection 33 - CHALLENGING Dynamic Programming Problems\nLongest repeated Subsequence Length problem\nLongest Common Subsequence Length problem\nLongest Common Subsequence  problem\nDiff Utility\nShortest Common Subsequence  problem\nLength of Longest Palindromic Subsequence\nSubset Sum Problem\nEgg Dropping Puzzle\nMaximum Length Chain of Pairs\nSection 34 - A Recipe for Problem Solving\nIntroduction\nStep 1 - Understand the problem\nStep 2 - Examples\nStep 3 - Break it Down\nStep 4 - Solve or Simplify\nStep 5 - Look Back and Refactor",
      "target_audience": [
        "Anybody interested in learning more about data structures and algorithms or the technical interview process!",
        "Self-taught programmers who have a basic knowledge in Python and want to be professional in Data Structure and Algorithm and begin interviewing in tech positions!",
        "Students currently studying computer science and want supplementary material on Data Structure and Algorithm and interview preparation for after graduation!",
        "Professional programmers who need practice for upcoming coding interviews."
      ]
    },
    {
      "title": "The Java Spring Tutorial: Learn Java's Popular Web Framework",
      "url": "https://www.udemy.com/course/javaspring/",
      "bio": "Learn the hottest, most in-demand Java web framework, including web programming with Spring MVC and Hibernate. Lifetime access with no subscription on Udemy.",
      "objectives": [
        "Understand the fundamentals of the Java Spring framework",
        "Learn how to develop web and database applications with Spring",
        "Understand the basics of Hibernate for SQL-free database connectivity"
      ],
      "course_content": {
        "Getting Started": [
          "What is Spring?",
          "About Spring 4, and bug fix for final project",
          "Setting Up Your System",
          "Introducing Maven",
          "Using Maven on the Command Line",
          "Spring \"Hello World\"",
          "Class Path Contexts"
        ],
        "Basic Bean Configuration": [
          "Constructor Arguments",
          "Setting Bean Properties",
          "Dependency Injection",
          "Bean Scope",
          "Init and Destroy Methods",
          "Factory Beans and Methods",
          "The P Namespace",
          "Setting List Properties",
          "Lists of Beans",
          "Inner Beans",
          "Property Maps",
          "Arbitrary Maps as Bean Properties"
        ],
        "Autowiring": [
          "Autowiring by Type",
          "Autowiring by Name",
          "Autowiring by Constructor",
          "Default Autowiring",
          "Removing Autowire Ambiguities"
        ],
        "Wiring with Annotations": [
          "Adding Support for Annotation-Based Wiring",
          "The \"Autowired\" Annotation",
          "Optional Beans",
          "Using Qualifiers",
          "The Resource Annotation (JSR-250)",
          "Annotation-Based Init and Destroy Methods",
          "The Inject annotation (JSR-330)",
          "Automatic Bean Discovery",
          "Setting Property Values via Annotations"
        ],
        "Spring Expression Language (SPEL)": [
          "Introducing SPEL",
          "Using SPEL with Annotations",
          "Some useful SPEL Operators"
        ],
        "Working with Databases": [
          "Creating a Database with MySQL",
          "Using Property Files",
          "Implementing the DAO Pattern",
          "Downloading a Connector Jar",
          "Configuring Connection Pooling with Apache DBCP",
          "JDBC Templates",
          "Querying the Database",
          "Database Exceptions",
          "Named Parameters",
          "Update Statements",
          "Getting Placeholder Values from Beans",
          "Adding an Update Method to the DAO",
          "Batch Updates: Prepared Statements",
          "Transactions"
        ],
        "Web Application Basics with Spring MVC": [
          "A Basic Non-Spring Web App",
          "Bringing in Maven",
          "The Dispatcher Servlet",
          "Adding a Controller",
          "View Resolvers",
          "Adding Data to the Session",
          "Using Spring Data Models",
          "Using JSTL (JSP Standard Tag Library)",
          "Configuring a JNDI Data Source",
          "Bringing in the DAO Code",
          "Loading Bean Containers with ContextLoaderListener",
          "Creating a Datasource Bean",
          "Adding a Service Layer",
          "Adding a New Controller",
          "Getting URL Parameters"
        ],
        "Working with Web Forms": [
          "Creating a Form",
          "Getting Form Values",
          "Adding CSS Styles",
          "Serving Static Resources",
          "Adding Hibernate Form Validation Support",
          "More Form Validation Tags",
          "Making Forms Remember Values",
          "Displaying Form Validation Errors",
          "Creating a Custom Validation Annotation",
          "Hooking Up the Controller and Database Code",
          "Exception Handling in Spring MVC"
        ],
        "Aspect-Oriented Programming (AOP)": [
          "A Base Project for Working with Aspects",
          "A Simple Aspect Example",
          "Annotation-Based Aspects",
          "Wildcards in Pointcut Expressions",
          "Advice Types: After, Around and Others",
          "Proxies, Interfaces and Aspects",
          "The “Within” Pointcut Designator",
          "“This”, “Target” and Matching Subpackages",
          "Annotation-Specific PCDs",
          "The “Bean” PCD",
          "The “Args” PCD",
          "Getting Target Method Arguments",
          "Getting Arguments Using “Args”",
          "Combining Pointcuts",
          "Introductions: Adding Functionality Using Aspects"
        ],
        "Spring Security and Managing Users": [
          "Servlets Filters: A Review",
          "Adding a Spring Security Filter",
          "Adding a Spring Login Form",
          "Serving Static Resources: Access Rules",
          "Customising the Login Form",
          "Displaying Login Errors",
          "Authorising Users from a Database",
          "Adding a “Create Account” Form",
          "Making the “Create Account” Form Work",
          "Adding Validation to the User Form",
          "Dealing with Duplicate Usernames",
          "Storing Validation Messages in a Property File",
          "Using JQuery to verify the password",
          "Using Property File Values in JSPs",
          "Adding a Logout Link",
          "Working With Roles",
          "Outputting Text Based on Authentication Status",
          "Row Mapping with BeanPropertyRowMapper",
          "Using Custom Authentication Queries: Case Sensitive Usernames",
          "Method-Level Access Control",
          "Catching Secure Annotation Violations",
          "Adding “Remember Me” Functionality",
          "Encrypting Passwords"
        ]
      },
      "requirements": [
        "Fair knowledge of the Java programming language",
        "Knowledge of HTML, servlets and JSPs is recommended for the web section of this tutorial",
        "Some acquaintance with XML is helpful",
        "Knowledge of SQL and databases is helpful for the database-related parts of this tutorial"
      ],
      "description": "An introduction to the widely-used Java Spring framework. Discover how to wire together your Java objects using Spring and dependency injection. You'll learn how to set up your system for Spring development, how to use Maven, and how to work with databases using Spring and Hibernate and how to create web applications with Spring MVC. We'll also look at managing user accounts with Spring Security,JDBC, working with web forms, Apache tiles for building modular web pages, aspect-oriented programming (AOP) and using Log4J and JUnit.",
      "target_audience": [
        "Java developers",
        "Anyone with some fluency in Java and an interest in web or database programming"
      ]
    },
    {
      "title": "Python Programming Masterclass",
      "url": "https://www.udemy.com/course/python-programming-masterclass-s/",
      "bio": "Self Learning Course",
      "objectives": [
        "Python is a high-level language, which means that it is closer to human language than to machine language.",
        "Python is a very popular programming language, and it is used by a wide variety of people, from beginners to experienced developers.",
        "Python is also an interpreted language, which means that the code is executed line by line by the Python interpreter.",
        "Python is a dynamically typed language, which means that the type of a variable is not known until it is assigned a value."
      ],
      "course_content": {
        "Introduction to Python": [
          "Introduction to Python"
        ],
        "Installing Python and VS Code": [
          "Installing Python and VS Code"
        ],
        "Hello world in Python": [
          "Hello world in Python"
        ],
        "Variables": [
          "Variables"
        ],
        "Comments": [
          "Comments"
        ],
        "Addition": [
          "Addition"
        ],
        "Numbers": [
          "Numbers"
        ],
        "Plus operator": [
          "Plus operator"
        ],
        "Typecasting": [
          "Typecasting"
        ],
        "Input": [
          "Input"
        ]
      },
      "requirements": [
        "Python is a general-purpose programming language that can be learned by anyone, regardless of their age, education, or experience. However, there are some people who may be more likely to succeed in learning Python than others."
      ],
      "description": "Overview\nPython is a general-purpose programming language that is used for a wide variety of tasks, including:\n· Web development\n· Data science\n· Machine learning\n· Software development\n· System administration\n· Scientific computing\n· Scripting\nPython is a high-level language, which means that it is closer to human language than to machine language. This makes it easier to read and write Python code, and it also makes it more portable, meaning that Python code can be run on different platforms without having to be recompiled.\nPython is also an interpreted language, which means that the code is executed line by line by the Python interpreter. This makes Python programs faster to develop, as there is no need to compile the code before it can be run.\nPython is a dynamically typed language, which means that the type of a variable is not known until it is assigned a value. This can make Python code more flexible, but it can also make it more difficult to debug.\nPython is a very popular programming language, and it is used by a wide variety of people, from beginners to experienced developers. Python is also a very well-documented language, so there are many resources available to help you learn Python.\nBenefits of Learning\n· Easy to learn and use\n· Portable\n· Powerful\n· Versatile\n· Well-documented\n· Active community\nIf you are looking for a general-purpose programming language that is easy to learn and use, then Python is a great choice. Python is also a powerful language that can be used for a wide variety of tasks.\nHere are some of the things that Python is used for:\n· Web development\n· Data science\n· Machine learning\n· Software development\n· System administration\n· Scientific computing\n· Scripting\nIf you are interested in learning more about Python, there are many resources available online. You can also find many Python books and tutorials at your local library or bookstore.\nWho can learn?\nPython is a general-purpose programming language that can be learned by anyone, regardless of their age, education, or experience. However, there are some people who may be more likely to succeed in learning Python than others. These people include:\n· People with a logical mind. Python is a very logical language, so people who are good at thinking logically will be more likely to succeed in learning it.\n· People who are good at problem-solving. Python is a very powerful language, but it can also be very complex. People who are good at problem-solving will be more likely to be able to overcome the challenges of learning Python.\n· People who are persistent. Learning any new language takes time and effort. People who are persistent and willing to put in the work will be more likely to succeed in learning Python.\nOf course, even if you don't fit into any of these categories, you can still learn Python. With hard work and dedication, anyone can learn to program in Python.\nHere are some additional tips for learning Python:\n· Start with the basics. Don't try to learn everything about Python all at once. Start with the basics, such as variables, data types, and control flow. Once you have a good understanding of the basics, you can start learning more advanced concepts.\n· Find a good learning resource. There are many different resources available to help you learn Python. Books, tutorials, and online courses can all be helpful.\n· Practice regularly. The best way to learn Python is to practice regularly. Try to write some code every day, even if it's just a small program.\n· Don't be afraid to ask for help. If you get stuck, don't be afraid to ask for help. There are many online forums and chat rooms where you can get help from other Python programmers.\nWhat are the salary package specially in all over the world?\nCountry                           Average Salary (USD)\nUnited States                 $102,333\nSwitzerland                     $103,596\nUnited Kingdom             £55,000\nCanada                             $67,425\nGermany                          €69,292\nNetherlands                    €65,000\nAustralia                           AUD90,000\nIndia                                  ₹4,50,000\nBrazil                                 R$120,000\nChina                                 ¥120,000\nThese are just averages, and the actual salary you earn will depend on your individual circumstances. However, these numbers give you a good idea of the salary range for Python developers in different countries.\nAs you can see, the average salary for Python developers is highest in the United States and Switzerland. These countries are also home to some of the largest tech companies in the world, which means there is a high demand for skilled Python developers.\nThe salary range for Python developers is also quite wide. In some countries, entry-level Python developers can earn as little as $50,000 per year, while experienced developers can earn over $200,000 per year.\nIf you are interested in becoming a Python developer, it is important to research the salary range in your desired location. This will help you set realistic expectations and make sure you are compensated fairly for your skills.\nKey Features of Python:\n· Easy to learn and use. Python is a very readable language, and it has a simple syntax. This makes it easy for beginners to learn, and it also makes it a good language for experienced developers who want to write concise and efficient code.\n· Portable. Python code can be run on many different platforms, including Windows, macOS, Linux, and Raspberry Pi. This makes it a good language for developing applications that need to be portable.\n· Powerful. Python is a very powerful language, and it can be used to develop a wide variety of applications. This includes web applications, data science applications, and machine learning applications.\n· Versatile. Python can be used for a wide variety of tasks, including scripting, system administration, and scientific computing. This makes it a very versatile language.\n· Well-documented. Python has a very well-documented language, and there are many resources available to help you learn Python. This makes it easy to find help when you need it.\n· Active community. Python has a very active community, and there are many people who are willing to help you learn Python. This makes it a great language for beginners who want to get help from experienced developers.\nThese are just some of the key features of Python. If you are looking for a general-purpose programming language that is easy to learn, powerful, and versatile, then Python is a great choice.\nSome additional features of Python:\n· Object-oriented programming. Python supports object-oriented programming, which is a powerful way to organize code.\n· Automatic memory management. Python has automatic memory management, which means that you don't need to worry about manually allocating and freeing memory.\n· Large standard library. Python has a large standard library, which includes many useful functions and modules.\n· Extensible. Python is extensible, which means that you can add new features to the language.\n· Embeddable. Python can be embedded in other applications, such as web browsers and games.",
      "target_audience": [
        "Python is a general-purpose programming language that can be learned by anyone, regardless of their age, education, or experience. However, there are some people who may be more likely to succeed in learning Python than others."
      ]
    },
    {
      "title": "30 Days of Python | Unlock your Python Potential",
      "url": "https://www.udemy.com/course/30-days-of-python/",
      "bio": "Python is simple enough for beginners, powerful enough for the pros. Use it for IOT, Web Scraping, Big Data, and more.",
      "objectives": [
        "Understand the Basics of Python",
        "Build Applications using Python",
        "Send Emails with Python",
        "Scrape Websites with Python to pull data",
        "Scrape dynamic-loaded (javascript-loaded) Websites with Python",
        "Read and Parse emails using Python",
        "Read / Write CSV (comma separated values) files to work in Excel/Numbers",
        "Use the Twitter API to send tweets easily through a few lines of code",
        "Use the Yelp API to pull data about all businesses they have on their site"
      ],
      "course_content": {
        "Welcome": [
          "Welcome",
          "Getting Help",
          "YouTube & Suggestions"
        ],
        "Days 1: Basics": [
          "Setup, Strings, Variables, and Integers"
        ],
        "Day 2 & 3 | Lists, Dictionaries, Tuples, and Loops": [
          "Day 2 - Lists",
          "Day 2 (cont) - Dictionaries & Tuples",
          "Day 3 - Loops: For Loops, and While Loops"
        ],
        "Day 4: Conditionals": [
          "Day 4: Conditionals",
          "Day 4 (cont): Using Conditional Expressions"
        ],
        "Day 5: Functions": [
          "Functions Part 1",
          "Functions Part 2"
        ],
        "Day 6: Advanced Strings": [
          "Day 6 - String Substitution",
          "Day 6 - String Formatting and Substitutions All Together"
        ],
        "Days 7-9: Classes": [
          "Day 7: Classes",
          "Day 8 - Classes Part 2",
          "Day 9: Classes Part 3",
          "Class Part 4"
        ],
        "Days 10 - 15: Python CSV, and Email | Do something Real": [
          "Day 10: Setup Python to send Email with Gmail",
          "Day 11: HTML and Plain Text Emails through Python and Gmail",
          "Day 12 - Send Formatted Emails to a Set of Users",
          "Day 13 - Using External Template Files with Context Data in Python",
          "Day 14 - CSV Files with Python - Read, Write, & Append",
          "Day 15 - Functions to Dynamically Add Data to CSV with Python",
          "Day 16 - Edit CSV with Python Part 1",
          "Day 16 - Edit CSV with Python Part 2",
          "Day 17 - Read Data Function for CSV File",
          "Day 18 - Running Python Commands & Arguments in Terminal",
          "Day 19 - Integrating Part 1",
          "Day 20 - Integrating Part 2"
        ],
        "Days 21 - 24: Web Scraping with Python 3 Python Requests & BeautifulSoup": [
          "Day 21 - Web Scraping with Python 3 Python Requests & BeautifulSoup",
          "Day 22 - Web Scraping Part 2",
          "Day 23 - Web Scraping Part 3",
          "Day 24 - Web Scraping Part 4"
        ],
        "Day 25: Web Scraping on Javascript Driven HTML": [
          "Part 1 | Web Scraping on Javascript-Driven HTML using Python",
          "Part 2 | Web Scraping on Javascript-Driven HTML using Python"
        ]
      },
      "requirements": [
        "We show you how to install Python and how to work with it",
        "Mac OS X or Higher, Windows 8 or Higher, Linux"
      ],
      "description": "In early 2016, Python passed Java as the #1 beginners language in the world. Why? It's because it's simple enough for beginners yet advanced enough for the pros.\n\nSpaceX uses it to launch Rockets\nPixar uses Python to run their animation software\nInstagram & Pinterest use it to run their web application (backend via Django)\n\nCome learn with me and I'll show you how you can bend Python to your will. This course is great for beginners in Python at any age and any level of computer literacy.\nThe goal is simple: learn Python by building real projects step-by-step while we explain every concept along the way.  For the next 30 Days you're going to learn how to:\nScrape Data from nearly Any Website (including javascript-enabled sites)\nBuild your own Python applications for all types of automation\nSend Emails & SMS text messages to your friends our your customers\nRead & Write CSV, aka comma separated values, files to better store your data locally and work in popular programs like Microsoft Excel and Apple Numbers\nUnderstand the basics behind the Python programming language so you're ready to build more advanced projects like Web Applications",
      "target_audience": [
        "Entrepreneurs and Non-Technical Founders",
        "Anyone interested in learning Python",
        "Beginners",
        "Growth Hackers",
        "Anyone interested in learning how to Scrape Websites for data/big data analysis",
        "Anyone interested in Automating Email on their own terms"
      ]
    },
    {
      "title": "Python for Programmers",
      "url": "https://www.udemy.com/course/python-for-programmers/",
      "bio": "Learn the core of Python quickly with this course tailored to programmers",
      "objectives": [
        "Create complex Python scripts and programs",
        "Confidently write Python 3 code"
      ],
      "course_content": {
        "Welcome": [
          "Welcome",
          "Hello World",
          "Python 2 vs 3",
          "Mac Setup",
          "Windows Setup"
        ],
        "Numbers": [
          "Intro",
          "Variables and Ints",
          "Variables and Ints Exercise",
          "Floats",
          "Floats Exercise",
          "Math",
          "Math Exercise",
          "Advanced Math",
          "Advanced Math Exercise",
          "Conversion",
          "Conversion Exercise",
          "Outro"
        ],
        "Strings": [
          "Intro",
          "String Basics",
          "String Basics Exercise",
          "Comments and Triple Quotes",
          "Comments and Triple Quotes",
          "Escaping",
          "Escaping Exercise",
          "Concatenation",
          "Concatenation Exercise",
          "Methods and Functions",
          "Method and Functions Exercise",
          "Index, Characters, and Slicing",
          "Index, Characters, and Slicing",
          "Outro"
        ],
        "If Statements": [
          "Intro",
          "If, Else, Elif",
          "If, Else, Elif Exercise",
          "Conditionals",
          "Conditionals Exercise",
          "And and Or",
          "And and Or Exercise",
          "Outro"
        ],
        "PROJECT 1 - Grade Calc Bot": [
          "Kickoff",
          "Walkthrough"
        ],
        "User Input": [
          "Intro",
          "Input",
          "Input Exercise",
          "Turning Inputs Into Ints",
          "Turning Inputs Into Ints",
          "Try Except",
          "Try Except Exercise",
          "Outro"
        ],
        "Functions": [
          "Intro",
          "Functions",
          "Functions Exercise",
          "Parameters",
          "Parameters Exercise",
          "Advanced Parameters",
          "Advanced Parameters Exercise",
          "Return",
          "Return Exercise",
          "Outro"
        ],
        "Lists": [
          "Intro",
          "Lists",
          "Lists Exercise",
          "Advanced Lists",
          "Advanced Lists Exercise",
          "Tuples",
          "Tuples Exercise",
          "Sets",
          "Sets Exercise",
          "Outro"
        ],
        "Loops": [
          "Intro",
          "For Loops",
          "For Loop Exercise",
          "While Loops",
          "While Loop Exercise",
          "Break, Continue, Else",
          "Break, Continue, Else Exercise",
          "Outro"
        ],
        "PROJECT 2 - Hangman": [
          "Kickoff",
          "Walkthrough 1",
          "Walkthrough 2",
          "Walkthrough 3",
          "Walkthrough 4"
        ]
      },
      "requirements": [
        "You should have some experience with programming (doesn't have to be python)"
      ],
      "description": "Python for Programmers is the course to help you get up to speed on Python quickly. If you've always wanted to check out Python this is your chance.\nThis course uses in-browser programming exercises to make sure you are learning as you progress through the course. After each lecture, you are presented with an exercised designed to help test your knowledge.\nThis course can be completed in a weekend if pursued aggressively or could be a two week course if one section is completed every day.\nDon't waste time trying to figure out confusing documentation, take python for programmers and start learning now.",
      "target_audience": [
        "This course is meant for someone with some programing skill in a language other than Python",
        "If you have never programmed in any language before, this course might not be for you"
      ]
    },
    {
      "title": "Advanced C Programming Course",
      "url": "https://www.udemy.com/course/advanced-c-programming-course/",
      "bio": "Become a True Master of the C Programming Language - Confidently Apply for Real Time or Embedded C Jobs or contracts!",
      "objectives": [
        "Understand and be able to apply advanced concepts of the C programming language to create advanced C applications.",
        "Understand Function and Double Pointers, Recursion, Bit Manipulation, Macros, Signals and loads more (check curriculam on this page for full list).",
        "Learn all about threads and networking with Sockets.",
        "Master the art of problem solving in programming using efficient, proven methods.",
        "Be able to apply advanced C concepts to other programming languages.",
        "How to write high quality C code to make yourself more marketable for senior programming positions and be apply for real-time/embedded programming positions."
      ],
      "course_content": {},
      "requirements": [
        "Basic knowledge of the C programming language (ideally having completed our Beginners course on Udemy).",
        "A computer running Microsoft Windows, Linux or the Mac operating systems.",
        "At least 4GB of ram on your computer."
      ],
      "description": "What you will learn in this course?\nThe C programming language in 2020 is still one of the most popular and widely used languages. Having C programming skills gives you great career options, but learning the C language, particularly some of the trickier advanced stuff can be really difficult.\n\nThis course is designed to take your basic C skills to the next level and help you obtain mastery of the language by helping you understand advanced concepts of the C programming language, enabling you to master the art of problem-solving in programming using efficient, proven methods.\nYou’ll learn how to write high-quality C code and to make yourself more marketable for higher-level programming positions.\n\nJust some of the topics in this huge 28-hour course include Threads, Function Pointers, Double Pointers, Recursion, Networking using Sockets, Bit manipulation, Macros, Signals, Storage Classes and loads more.  Check the curriculum on this page for full details of what is included in this very comprehensive course.\n\nBy the end of this course, with your new-found skills, you will be able to apply for real-time/embedded C programming positions or any job that requires mastery of the C programming language and be able to apply your new skills developing your own Advanced C programs.\n\nWhat's different about this course?\n\nJason Fedin is your instructor in this course and this course takes the skills you learned in that course to the next level.\n\nThis course focuses on the details and a thorough understanding of all advanced C programming concepts. This is not just a how-to course, it is a \"why?\" course.\n\nYou will learn how to implement specific advanced C concepts such as multi-threading and double pointers, in addition to learning why they are the best approach and how they make you a high-quality C programmer.\n\nMany, many examples, challenges and quizzes are provided to test your understanding of every concept that you have learned.\n\nThis course is unique to other courses here at Udemy in that the details and the why are explained. We do not just go through projects and provide a how-to.\nWho is the course aimed at?\n\nThis is not a beginner's course.  It's assumed you have some knowledge of the C programming language, preferably having completed our Beginner course (here on Udemy) or similar training and/or commercial programming experience in C or a similar language.\nGetting started\nIf you are ready to get started, click on the enroll or Add to Cart button on this page and start taking your C Language skills to the next level.",
      "target_audience": [
        "This course is not aimed for beginners. If you have never used C programming before, then I would suggest you purchase our C Programming For Beginners course first, complete it then come back to take this advanced course.",
        "On the other hand, if you already have a basic or prior experience with C programming, then this course is for you!"
      ]
    },
    {
      "title": "Python on the Backend",
      "url": "https://www.udemy.com/course/python-on-the-back-end-for-beginners-http-server/",
      "bio": "Learn python back end development, build a website or APIs in Python, designed for students with Mac or Windows",
      "objectives": [
        "Build cool web applications and APIs for other clients to consume",
        "Learn how to serve a basic website with Python as the back end",
        "Turn your existing Python libraries into web APIs to be consumed by other developers with other languages",
        "Install, use and deploy Jupyter Notebooks",
        "Learn how to Implement Load Balancing for your Backend Python services",
        "Learn Backend Database programming with Python and PostgresSQL: connect, query, write and commit transactions."
      ],
      "course_content": {
        "Introduction": [
          "Why Backend Development?",
          "Course Outline"
        ],
        "What is Python?": [
          "What is Python?",
          "The Python Interpreter",
          "Compiled vs Interpreted Languages",
          "Global Interpreter Lock"
        ],
        "Getting Started Setup (Mac)": [
          "Setup Python3 on Mac",
          "Installing Tornado the Python HTTP Web Server on Mac",
          "Installing Visual Studio Code and Python Extension on Mac"
        ],
        "Getting Started Setup (Windows)": [
          "Setup Python3 on Windows",
          "Installing Tornado the Python HTTP Web Server on Windows",
          "Installing Visual Studio Code and Python Extension on Windows"
        ],
        "Building the Python HTTP Web Server": [
          "HTTP Protocol",
          "Building a simple GET HTTP method end point in Python",
          "Serving a simple HTML file from Python Web Server (Index.html)"
        ],
        "Input Parameters to Python API": [
          "Query Parameter vs Resource Parameter",
          "Building a GET end point with a query string parameter",
          "Building a GET end point with resource parameters"
        ],
        "Building Dynamic POST and GET JSON HTTP APIs": [
          "Building a JSON GET endpoint that reads from a text file on the backend",
          "Building a JSON POST endpoint that writes to a text file on the backend"
        ],
        "Consuming Python API from Javascript": [
          "Consuming the GET and POST API from Javascript/HTML",
          "Building an Image Upload Service with Python",
          "Spin three instances of tornado running on 3 different ports"
        ],
        "Jupyter Notebooks": [
          "What is Jupyter nootbook?",
          "Installing Jupyter Notebook on Mac",
          "Installing Jupyter Notebook on Windows",
          "Installing Jupyter Notebook on Docker",
          "Working with Jupyter Notebook (Twitter example)"
        ],
        "Bonus Section - Python and the Database, Docker Load balancing and more!": [
          "Load Balancing Python services with nginx",
          "Spinning Postgres Instance with Docker",
          "Database programming with Python",
          "Working with MySQL in Python",
          "Python and Postgres Server Side vs Client Side Cursors",
          "Stateless vs Stateful Web Applications in Python",
          "Django Architecture"
        ]
      },
      "requirements": [
        "Able to understand basic programming principles"
      ],
      "description": "Do you know Python and want to take it to the next level? How about writing a website in Python, or an API so your fellow developers can consume in JSON over simple HTTP. With the boom of microservices and API, developers who are used to working with Python writing scripts can now take their knowledge to the backend. This course will teach you the basic of web servers, how to setup the Python Web server and write interesting cool applications on the backend. By the end of the course you will be read to take on the world and write your own services and APIs, read and write from databases, do sophisticated load balancing on your Python services, work with Jupyter notebooks and much much more!",
      "target_audience": [
        "Beginner Python developers interested in building HTTP web APIs in Python",
        "Experienced Python developers who want to expose their Python libraries as a web service for other developers",
        "Data scientists who want to do heavy computational workload on the backend using vanilla Python or Jupyter notebooks",
        "Developers who want to use Python to build APIs that write to a backend database"
      ]
    },
    {
      "title": "Regular Expressions (Regex) with Python - Easy and Fast!",
      "url": "https://www.udemy.com/course/python-regular-expressions/",
      "bio": "4 Python Projects: Practical Applications in Log File Analysis, Data Cleanup, Input Validation, and Security Enhancement",
      "objectives": [
        "Pattern Detection - Look for occurrences of a pattern using a concise language",
        "Data Preparation - Locate and transform data of interest",
        "Data Validation - Validate Input and Improve Security by Preventing Injection Attacks",
        "Learn Techniques to Write High-Performance Patterns",
        "Hands-on projects",
        "Complements Machine Learning Skills"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Increase the speed of learning",
          "Source Code",
          "Anaconda Python"
        ],
        "Python Regex Language": [
          "Downloadable Resources",
          "Interactive Tool - Visually Observe and Build Regex",
          "Single Character Patterns",
          "Anchors",
          "Character Classes",
          "Quantifiers",
          "HTML input validation example",
          "Input Validation Example (Browser)",
          "Instructions for Quiz and Exercise",
          "Python Regex Language",
          "Postal Codes"
        ],
        "Python Regex Engine - Behind the scenes": [
          "Downloadable Resources",
          "One character at a time",
          "Left to Right",
          "Lab - Left to Right",
          "Greedy, Lazy and Backtracking Analogy",
          "Greedy, Lazy and Backtracking Examples",
          "Lab - Greedy, Lazy and Backtracking",
          "Groups, Backreference, Replacement",
          "Lab - Groups, Backreference, Replacement",
          "Look Ahead",
          "What is a mark character?",
          "Look Behind",
          "Look Behind – Why does the pattern not work?",
          "Python Regex - Five Key Points",
          "Exercise - Currency Symbol",
          "Solution - Currency Symbol",
          "Exercise - Match a number",
          "Solution - Match a number",
          "Exercise - List all cars not made by Honda",
          "Solution - List all cars not made by Honda",
          "Exercise - Webserver Log Parser",
          "Solution - Webserver Log Parser",
          "Exercise - Filter by price",
          "Solution - Filter by price",
          "Exercise - List cars that meet specified criteria",
          "Solution - List cars that meet specified criteria",
          "Exercise - Password Validation",
          "Solution - Password Validation"
        ],
        "Python Regex Performance": [
          "Downloadable Resources",
          "Exponential degradation - example of bad patterns and performance implication",
          "How to correct performance issues and optimize pattern",
          "Compiled versus Module Methods"
        ],
        "Coding with Python's regex Module": [
          "Downloadable Resources",
          "Introduction to Regex Features",
          "RE Module, Match method, Unit Testing",
          "Regex Best and Worst Performance",
          "RE Module - Search, FindAll, FindIter, Groups",
          "Unusual Behavior When Using FindAll",
          "RE Module - Find and Replace, Split",
          "Interactive Tool",
          "Python Regex Operation"
        ],
        "Project 1 - Log Parser": [
          "Log Data Parser Objective",
          "Exercise 1 - Write a pattern to capture header information",
          "Exercise 2 - Write a pattern to capture error message",
          "Exercise 3 - Write a pattern to capture metrics",
          "Solution - How to write log parser regex patterns",
          "Solution - Log Data to JSON",
          "[Event Recap] Mastering Python: Tackling Real-World Problems with Regex"
        ],
        "Project 2 - IoT Sensor Data": [
          "Sensor Data Parser Objective",
          "Exercise 1 - Capture Date Value",
          "Exercise 2 - Capture Temperature and Humidity Value",
          "Solution - How to write sensor data patterns",
          "Solution - Sensor Data to JSON"
        ],
        "Project 3 - Health Care Data": [
          "Health care Data Parser Objective",
          "Other Options for Parsing HTML",
          "Exercise 1- Cleanup pattern",
          "Exercise 2 - Write a pattern to capture a row",
          "Exercise 3 - Write a pattern to capture a cell",
          "Solution - How to write health care data patterns",
          "Solution - Health care data to CSV"
        ],
        "Project 4 - Network Configuration Parser": [
          "Network Configuration Parser",
          "Network Configuration Parser - Answer"
        ],
        "Interesting Question and Answers from the Discussion Forum": [
          "How to Remove Embedded Comma Inside Double Quotes",
          "How to Extract Unit Number from Postal Address",
          "Unusual Behavior When Using FindAll",
          "How to split text that uses comma and/or newline as separators"
        ]
      },
      "requirements": [
        "Familiarity with Python"
      ],
      "description": "Hi, and welcome to the Regular Expressions (Regex) with Python - Easy and Fast!\nRegular Expression (regex) is a pattern detection language – they are typically used to search patterns in text, extract matching values, and data validation.\nRegex is supported in many programming languages, including Python, C#, JavaScript, Perl, SQL, and more.\nThis course is designed to provide hands-on experience with regular expressions through various exercises and projects\nI am Chandra Lingam, and I am your instructor.\nHere are some typical uses of regular expression\nPattern Detection\nLook for occurrences of a pattern using a concise language\nData Preparation\nData clean-up and preparation is often one of the most time-consuming activities\nYou can define the structure of data as a regex pattern and parse data\nOne good application of this is AWS Glue and Athena.\nYou can use regex to define the structure of a record in a plain text file, Create a table and query the file using SQL\nInput Validation\nYou can implement a client-side check for input validation\nFor example, your app can guide the user to provide data in the correct format using regex.\nAs part of the zero-trust architecture, you need to validate input to your microservice\nWith regex, you can verify and validate data payloads in your service\nCloud Services\nSeveral cloud services use regex for advanced configuration.\nWith the AWS web application firewall, you can allow or deny traffic based on a regex pattern\nIn Google Workspace, you can use regex for content filtering, Gmail route configuration, and to search for content in google docs\nIn Google Analytics, you can use regex to locate and transform matching data in your data set\nRegex is also supported by several products such as SAP, Oracle, and SQL Server\nCurriculum\nThe source code for this course is distributed using Github – so, you always have access to up-to-date code\nAs part of resources, you will get this high-quality cheat-sheet for regex language\nAnd an interactive regex tool to write patterns\nIn the Python Regex features section, you will get familiar with various regex methods, their purpose, and how to unit test your pattern\nIn the regex language section, you will learn how to write patterns – starting from the simplest of patterns\nYou will also learn to incorporate regex in your HTML input types for validation\nRegex engine puts the onus on the developers, that is us, to write efficient patterns\nIn this section, you will gain knowledge of regular expression engine that will help you write optimal patterns\nThere are several exercises for you to apply your new skills\nWe then look at performance and how poorly written patterns can degrade exponentially\nYou will learn how to optimize the patterns and address performance issues\nThere are four hands-on projects in this course\nYou will learn how to apply the regex for distinctly different data sets – unstructured log data, IoT sensor data, and parsing medical test data in HTML format\nYou will get prompt support through the course Q&A forum and private messaging.\nI am looking forward to meeting you\nThank You!\nChandra Lingam\nCloud Wave LLC",
      "target_audience": [
        "Data Scientists",
        "System Administrators",
        "Data Analysts",
        "Developers"
      ]
    },
    {
      "title": "Complete Python With DSA Bootcamp + LEETCODE Exercises",
      "url": "https://www.udemy.com/course/complete-python-dsa-bootcamp/",
      "bio": "Master Python and Data Structures with Hands-on Projects and Coding Challenges for Tech Interviews and Beyond!",
      "objectives": [
        "Develop a solid foundation in Python, including syntax, data structures, and libraries, enabling learners to write efficient and clean code.",
        "Gain a comprehensive understanding of fundamental data structures (such as arrays, linked lists, stacks, queues, trees, and graphs) and algorithms",
        "Learn how to apply data structures and algorithms to solve practical problems, enhancing coding skills and preparing learners for technical interviews",
        "Build confidence in solving coding challenges and improve problem-solving skills through hands-on exercises and interview-style questions"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of programming concepts (variables, loops, and conditionals).",
        "Familiarity with Python syntax (data types, functions, and modules).",
        "No prior knowledge of data structures or algorithms is required; eagerness to learn is essential."
      ],
      "description": "Welcome to the \"Complete Python with DSA Bootcamp\"! This comprehensive course is designed to take you from a beginner to a confident programmer, mastering both Python and essential data structures and algorithms (DSA) needed for technical interviews and real-world applications.\nWhat You Will Learn\nIn this bootcamp, you will start with the fundamentals of Python programming. You will become familiar with Python syntax, data types, control structures, and functions. As you progress, you will dive into more advanced topics, including object-oriented programming and error handling, ensuring you have a solid foundation before moving on to data structures.\nNext, we will explore various data structures in detail. You will learn about arrays, lists, stacks, queues, linked lists, trees, and graphs. For each data structure, you will understand its use cases, advantages, and limitations. You will also implement these structures from scratch, reinforcing your understanding through practical exercises.\nAlgorithms are the backbone of problem-solving in programming. This course covers essential algorithms, including sorting (quick sort, merge sort) and searching (binary search), as well as more advanced topics like recursion and dynamic programming. You will learn to analyze the time and space complexity of algorithms, helping you to choose the most efficient solution for any problem.\nHands-On Projects and Coding Challenges\nThroughout the course, you will engage in hands-on projects and coding challenges that simulate real-world scenarios. Each section includes practical exercises to reinforce your learning, and you will work on projects that consolidate your understanding of Python and DSA. By the end of the course, you will have a portfolio of projects to showcase your skills to potential employers.\nWho This Course Is For\nThis course is ideal for beginners who want to learn Python and data structures from scratch. It’s also perfect for aspiring software developers and data scientists preparing for technical interviews, as well as professionals looking to transition into tech roles. Whether you’re a student or a working professional, this course will equip you with the skills and knowledge needed to excel in coding interviews and advance your career.\nCourse Structure\nThe course is structured into modules that progressively build on your knowledge. Each module contains video lectures, reading materials, and coding exercises, allowing you to learn at your own pace. You will also have access to a community of learners where you can ask questions, share insights, and collaborate on projects.\nWhy Choose This Course?\nComprehensive Curriculum: Covers Python programming, data structures, and algorithms in depth.\nExpert Instructor: Learn from an experienced instructor with over 13 years in data analytics and teaching.\nHands-On Approach: Engage in practical exercises and real-world projects that reinforce your learning.\nFlexible Learning: Access course materials anytime, anywhere, and learn at your own pace.\nJoin the \"Complete Python with DSA Bootcamp\" today and take your first step towards becoming a proficient programmer! Whether you aim to land a job in tech or simply want to enhance your coding skills, this course is your gateway to success. Enroll now and start your journey!",
      "target_audience": [
        "Beginners looking to learn Python and data structures from scratch.",
        "Aspiring software developers and data scientists preparing for technical interviews in product based companies",
        "Students seeking to enhance their programming skills and problem-solving abilities.",
        "Professionals transitioning to roles in tech who want a solid foundation in algorithms and data structures."
      ]
    },
    {
      "title": "MATLAB for Engineering Students Part 1",
      "url": "https://www.udemy.com/course/matlab-the-need-to-know-basics/",
      "bio": "Learn the MATLAB basics you need. Matrices, plotting, logicals, looping, functions & more are covered with many examples",
      "objectives": [
        "Create and modify vectors and matrices, visualize data using 2-D plots",
        "User-defined functions, if-elseif and switch case statements",
        "Perform looping tasks with for and while loops",
        "Plus more!"
      ],
      "course_content": {
        "Introduction to MATLAB": [
          "Slides and Examples",
          "MATLAB Desktop Environment",
          "MATLAB Desktop Environment Walkthrough",
          "Assigning Variables",
          "Assigning Variables Examples",
          "Variable Names and Type Casting",
          "Variable Names and Type Casting Examples",
          "Expressions & Formatting",
          "Expressions and Formatting Examples",
          "Quiz 1",
          "Built-In Functions & help",
          "Built-In Functions & Help Examples",
          "Relational Expressions",
          "Relational Expressions Examples"
        ],
        "Vectors and Matrices": [
          "Creating a Row Vector",
          "Linspace, Logspace and Concatenation",
          "Linspace, Logspace & Concatenation Examples",
          "Quiz 2",
          "Column Vectors",
          "Column Vectors Examples",
          "Matrices",
          "Matrices Examples",
          "Matrix Dimensions",
          "Matrix Dimensions Examples",
          "Quiz 3",
          "Min, Max",
          "Sum & Product",
          "Min, Max, Sum & Product Examples",
          "Matrix Math",
          "Matrix Math Examples",
          "Element by Element Operations",
          "Element by Element Operations Examples",
          "Matrix Multiplication & Vector Operations",
          "Matrix Multiplication & Vector Operations Examples",
          "Quiz 4",
          "Matrix Inverse & Logical Vectors",
          "Matrix Inverse and Logical Vectors Examples",
          "Quiz 5"
        ],
        "Basics of MATLAB Programming": [
          "Slides, Examples & Data Files",
          "Script Files & Comments",
          "Script Files & Comments Examples",
          "Input & Display",
          "Input & Display Examples",
          "Formatted Print Statements",
          "Formatted Print Statements Examples",
          "Quiz 6",
          "Scripts",
          "Scripts Examples",
          "Plotting",
          "Plotting Examples",
          "Plot Labels",
          "Plot Labels Examples",
          "Plot Functions",
          "Plot Functions Examples",
          "Load & Save",
          "Load & Save Examples",
          "Quiz 7",
          "User-Defined Functions",
          "User-Defined Functions & Local Variables",
          "User Defined Functions and Local Variables Examples",
          "Quiz 8"
        ],
        "Logical Statements": [
          "Slides and Examples",
          "Relational Expressions",
          "Relational Expressions Examples",
          "If Statement",
          "If Statement Examples",
          "If ElseIf Statements",
          "If ElseIf Statements Examples",
          "Quiz 9",
          "Switch Case",
          "Switch Case Examples",
          "Menu Function",
          "Menu Function Examples",
          "Quiz 10"
        ],
        "Looping": [
          "Slides, Examples & Data Files",
          "For Loops",
          "For Loops Examples",
          "Quiz 11",
          "Preallocation",
          "Preallocation Examples",
          "Subplot",
          "Subplot Examples",
          "Nested Loops",
          "Nested Loops Examples Part 1",
          "Nested Loops Examples Part 2",
          "Quiz 12",
          "While Loops",
          "While Loops Examples",
          "Quiz 13",
          "Vectorizing",
          "Vectorizing Examples"
        ]
      },
      "requirements": [
        "No programming knowledge is needed - the course assumes you have no prior experience",
        "MATLAB software will be required. We will be working many examples together. To get the most out of the course please have MATLAB installed on your machine. If you need access to MATLAB please visit the MathWorks website and search for 'Free Trial'. If you are a student, your institution may be able to provide you with a free student version. Please check with your school's IT department.",
        "Examples will consist of engineering and calculus topics so a basic knowledge of physics and calculus will be helpful,but it's not required."
      ],
      "description": "MATLAB - What is it & why you need it\nMATLAB is a widely-used software program that is found in many industries ranging from engineering to finance.  Users love it because it's easy to use and produces high quality graphics.  All you have to do to get started is learn to code in MATLAB.\nThis course will teach you just that!  We will start from the very beginning by introducing the desktop environment and work our way up to more complex topics like nested for loops.  We'll cover lots of examples and work through all of them step by step. Unlike many instructors, I don't assume you know more than you do.\n\n\nWhy this course instead of other online MATLAB courses?\nI have taught MATLAB many, many times.  I know what works for students and what doesn't.  This course is structured differently from others available online.  Other instructors just show themselves typing code in MATLAB as they explain the topics.  I don't think that's the best way for you to learn.\nIn this course, we will have a brief lecture with slides discussing the concepts.  You will also be provided with a downloadable booklet of examples for each chapter and we will work through them together. This gives you the opportunity to code while having someone walk you through it at the same time.\nThe only way to learn coding is to write code yourself so I have created 13 quizzes for you to test your knowledge.  Don't worry though, video solutions are provided in case you get stuck.\nAnother benefit of this course is the rigor of the examples and quizzes.  I don't always give simple one step problems.  Many of the problems you will work will require a combination of topics and steps, allowing you to further enhance your skills.\n\n\nHere's what you'll learn...\n\n-Matrices and Vectors\n-2-D Plotting\n-User-defined functions\n-Logical statements: if-elseif, switch-case\n-Looping techniques: for and while loops\n-And more!\n\n\nLet's take a closer look at what comes with the course...\n\nDownloadable items:\n-Lecture slides for each chapter to give you the background you need for each topic (5 Chapters)\n-Booklet of examples for each chapter to allow you to practice on your own or along with me in the videos\n-Quizzes (13 of them)\nVideos:\n-Lecture videos featuring detailed explanations of all topics\n-Explanations of all the examples to increase your comprehension\n-Solutions to all quizzes and exams in case you get stuck\nAnd just to make sure this class will work for you...\nFundamental topics from calculus and physics are used so it is  helpful (but not required) to know basics like vectors, derivatives, and  integrals.\nLet's get started...\n\nEnroll Now! There's no better time than now!",
      "target_audience": [
        "Engineering students wanting to learn MATLAB fundamentals",
        "Students who want to improve and apply their MATLAB skills using math and engineering examples",
        "Professionals looking to add a new skill to their portfolio"
      ]
    },
    {
      "title": "Learning Visual Basic .NET - A Guide To VB.NET Programming",
      "url": "https://www.udemy.com/course/learning-visual-basic-net/",
      "bio": "Want to learn how to program with VB.NET? This beginners guide to programming in Visual Basic.NET will show you how.",
      "objectives": [
        "Learn How To Program In VB.NET",
        "A Beginners Guide To Visual Basic.NET"
      ],
      "course_content": {
        "Introduction": [
          "Important - Download These First - Working Files",
          "0101 Introduction And Course Overview",
          "0103 Installing Visual Studio",
          "0104 How To Access Your Working Files"
        ],
        "Using The IDE": [
          "0201 Creating And Running A New Project",
          "0202 Copying And Compressing Projects",
          "0203 IDE Tour"
        ],
        "Building User Interfaces": [
          "0301 Creating Controls",
          "0302 Setting Properties At Design Time",
          "0303 Common Properties",
          "0304 Naming Controls",
          "0305 Anchoring Controls"
        ],
        "Common Controls": [
          "0401 Label And Textbox",
          "0402 Button",
          "0403 Check Box And Radio Button",
          "0404 Combo Box, Listbox, And Checked Listbox",
          "0405 Menus"
        ],
        "Container Controls": [
          "0501 Group Box, Panel, And Flow Layout Panel",
          "0502 Tab Control And Split Container",
          "0503 Table Layout Panel"
        ],
        "Events Handling": [
          "0601 Button and Menu Events",
          "0602 Paint Events",
          "0603 Scroll Bars"
        ],
        "Dialogs": [
          "0701 Message Box",
          "0702 Open File Dialog And Save File Dialog",
          "0703 Color Dialog And Font Dialog",
          "0704 Folder Browser Dialog"
        ],
        "Working With Forms": [
          "0801 Creating And Displaying New Forms",
          "0802 Re-Using Forms",
          "0803 Building Custom Dialogs"
        ],
        "Using Variables": [
          "0901 Declaring Variables And Performing Calculations",
          "0902 Using Constants",
          "0903 Understanding Scope",
          "0904 Arithmetic Operators",
          "0905 Enumerated Types"
        ],
        "Debugging": [
          "1001 Stepping Through Code",
          "1002 Using Watch Windows",
          "1003 Using Advanced Breakpoints",
          "1004 Handling Exceptions",
          "1005 Detecting Errors"
        ]
      },
      "requirements": [
        "No Prior Programming Experience Required"
      ],
      "description": "This Visual Basic .NET ( VB.NET ) training course from InfiniteSkills.com will teach you how to program from scratch with Visual Basic.\n\nYou will start by learning how to install and use the Visual Studio development environment. The course will then teach you how to build classes that define properties, methods, and events in VB.NET, as well as understand and use overloaded methods and operators and perform calculations. This video tutorial will also cover topics including debugging programs, working with data types, branching and looping statements, and use subroutines, functions, and object-oriented techniques. You will learn how to use LINQ to select, modify, and sort information, as well as easily read and write data in files. Finally, you will learn about printing and print previews.\n\nOnce you have completed this VB.NET training course, you will be fully capable of programming with Visual Basic.NET. Working files are included, allowing you to follow along with the author throughout the lessons.",
      "target_audience": [
        "Programmers and Developers"
      ]
    },
    {
      "title": "Perl Programming for Beginners",
      "url": "https://www.udemy.com/course/perl-programming-for-beginners/",
      "bio": "Perl application",
      "objectives": [
        "Design a Perl Application.",
        "Create automated applications that does the work for you,",
        "Create enhanced text analyzer applications."
      ],
      "course_content": {
        "Introduction to the Course": [
          "Course Introduction"
        ],
        "Introduction to Perl": [
          "Introduction",
          "Getting and Installing Perl",
          "Creating a First Perl Program",
          "More Advanced Perl Examples-1",
          "More Advanced Perl Examples-2",
          "Conclusion"
        ],
        "Working with Scalar Data": [
          "Introduction",
          "Working with Scalar Data",
          "Working with strings",
          "Working with numbers",
          "Working with variables",
          "Getting user input",
          "The chomp operator",
          "Decision-making with if statements",
          "Looping with while statements",
          "Conclusion"
        ],
        "Working with Arrays and Lists": [
          "Introduction",
          "Creating arrays",
          "Accessing arrays via indices",
          "Creating lists",
          "Performing assignment with lists",
          "Converting arrays into strings",
          "Using the foreach loop on arrays and lists",
          "Understanding scalar and list context",
          "Understanding <STDIN> in scalar context",
          "Conclusion"
        ],
        "Working with Subroutines": [
          "Introduction",
          "Subroutine definitions",
          "Calling subroutines",
          "Working with subroutine return values",
          "Subroutine arguments",
          "Using variable-length parameter lists",
          "Using the return operator",
          "Private variables in subroutines",
          "Conclusion"
        ],
        "Perl Input and Output": [
          "Introduction",
          "Receiving input from standard input",
          "Working with input from the diamond operator",
          "Sending output to standard output",
          "Using printf to format output",
          "Working with filehandles",
          "Handling fatal errors with die",
          "Conclusion"
        ],
        "Hashes": [
          "Introduction",
          "Hashes defined and demonstrated",
          "Accessing hash elements",
          "Working with hash functions",
          "Conclusion"
        ],
        "Working with Regular Expressions": [
          "Introduction",
          "Regular expressions defined",
          "Working with simple patterns",
          "Working with character classes",
          "Matching using m//",
          "Working with match modifiers",
          "Working with the binding operator",
          "Working with match variables",
          "Conclusion"
        ],
        "More on Regular Expressions": [
          "Introduction",
          "Matching in list context",
          "Performing substitutions using s///",
          "Working with the split function",
          "Working with the join function",
          "Conclusion"
        ],
        "Final Project": [
          "Final Project Overview",
          "Final Project Explanation Part 1",
          "Final Project Explanation Part 2",
          "Final Project Explanation Part 3"
        ]
      },
      "requirements": [
        "Students should be familiar with downloading software from the internet and installing the software onto a computer."
      ],
      "description": "The world of programming has become almost saturated with different languages, all created for different purposes but developed for use in multiple applications. For those just delving into the world of programming, this can be a little overwhelming. Luckily, there are plenty of languages that are simple to learn, highly versatile to use, and make a great starting point for gaining fluency in the coding universe. Perl is one of those languages, and this course will teach you everything you need to know.\nPerfect Perl the Easy Way\nWork with different data types including strings, numbers, variables and user input\nCreate and use array, subroutines, hashes, and regular expressions in Perl applications\nGain a conceptual understanding and practical skills to construct your own levels\nBecome competent with the Perl language family and its use in various applications\nPrepare a foundation of knowledge for learning other more complex languages.\nBecome an Expert in Perl Applications\nThis course has been specifically designed for those who have an interest in programming, but still consider themselves to be beginners. Those who already have programming experience but want to learn the basics and concepts of Perl will also find it perfectly suitable.\nWith over 70 lectures and 7.5 hours of content, this is a true crash course that will get you up to speed in no time. You'll get to grips with Perl fundamentals and design a Perl application, as well as creating automated applications that do the work for you and advanced text analyser applications. But don't worry – you'll work from the bottom up and progress at a pace that suits you, starting off with installation and creating more complex applications with each stage.\nAlong the way you'll pick up various Perl fundamentals like scalar data, arrays and lists, subroutines, input and output, hashes, and regular expressions before tackling your final project. By the end of the course, you'll be ready to use Perl in a wide range of real world applications.\nTools Used\nPerl is a family of general purpose dynamic programming languages originally developed for text manipulation. Over time it has undergone many expansions and revisions and is now used for everything from system administration to GUI development. As it borrows elements from many other programming languages, it makes an excellent jumping-off point for those just beginning to expand their knowledge of programming.",
      "target_audience": [
        "Students who have an interest in learning the basics of Perl Development.",
        "Students who have an interest in learning the basics and concepts of Perl.",
        "Students who have an interest in learning building simple to intermediate Perl applications."
      ]
    },
    {
      "title": "C Programming Tutorial for Absolute Beginners with Examples",
      "url": "https://www.udemy.com/course/c-programming-tutorial-for-absolute-beginners/",
      "bio": "If you’re ready to buckle down and learn C Programming here’s where you should start.",
      "objectives": [
        "Lay down the foundation of fundamental concepts",
        "Learn about core programming concepts",
        "By the end of this course, you should definitely be able to understand and write good C code.",
        "Correctly use C Code Commenting"
      ],
      "course_content": {
        "Getting Started": [
          "Installing CodeBlocks and Getting Started"
        ],
        "The Basics": [
          "First C Program and Understanding C Program Structure",
          "Simple input and output ( printf , scanf , placeholder )",
          "Comments",
          "Variables and Basic Datatypes",
          "Simple Math and and operators",
          "Q & A"
        ],
        "Statements": [
          "If Statements in C",
          "Example - If Statements in C",
          "if...else and Nested if...else statements in C",
          "Example - if...else and Nested if...else statements in C",
          "The ternary (conditional) operator in C",
          "Example - The ternary (conditional) operator in C",
          "Switch Statement in C",
          "Example - Switch Statement in C"
        ],
        "Loops": [
          "While Loop in C",
          "Example - While loop in C",
          "do..while Loop in C",
          "Example - do...while loop in C",
          "for Loop"
        ],
        "Functions": [
          "Functions in C",
          "Passing Parameters and Arguments in Function",
          "Return Values in Functions",
          "Scope Rules in C"
        ],
        "Arrays": [
          "Arrays in C",
          "Example - Arrays in C",
          "Muti-dimensional Arrays in C",
          "Passing Arrays as Function Arguments in C",
          "Example - Passing Arrays as Function Arguments in C"
        ],
        "Pointers": [
          "Pointers in C",
          "Array of Pointers",
          "Example - Array of pointers in C",
          "Passing Pointers as Function Arguments"
        ],
        "Advanced": [
          "Strings in C",
          "Example - Strings in C",
          "Structures in C",
          "Unions in C"
        ],
        "Install Eclipse IDE for C/C++ on Windows (Optional)": [
          "How to Install and Setup Eclipse IDE for C/C++ Development on Windows"
        ],
        "Examples Codes and Exercise": [
          "Example - Write a C program to Make Simple calculator",
          "Example - C program to check even or odd",
          "Example - C program to find Armstrong number",
          "Example - C Program to Find Prime Numbers",
          "Example - C Program to find the perfect numbers between a given range",
          "Example - Write a program to print Fibonacci series in c"
        ]
      },
      "requirements": [
        "The very basic understanding of C Programming Language",
        "The course is aimed to teach you C, whether you are an experienced programmer or just getting started"
      ],
      "description": "C Programming Language is the most popular computer language and most used programming language till now. It is very simple and elegant language.\n1) This is by far the most comprehensive C Programming course you'll find here, or anywhere else.\n2) This C Programming tutorial Series starts from the very basics and covers advanced concepts as we progress. This course breaks even the most complex applications down into simplistic steps.\n3) It is aimed at complete beginners, and assumes that you have no programming experience whatsoever.\n4) This C Programming tutorial Series uses Visual training method, offering users increased retention and accelerated learning.\nEvery programmer should and must have learnt C whether it is a Java or C# expert, Because all these languages are derived from C. In this tutorial you will learn all the basic concept of C programming language. Every section in this tutorial is downloadable for offline learning. Topics will be added additional to the tutorial every week or the other which cover more topics and with advanced topics.",
      "target_audience": [
        "Students",
        "New Developers",
        "A basic knowledge of programming is helpful but not necessary to get the most out of this course",
        "A genuine interest to learn."
      ]
    },
    {
      "title": "Testing Ruby with RSpec: The Complete Guide",
      "url": "https://www.udemy.com/course/testing-ruby-with-rspec/",
      "bio": "Master the art of test driven development (TDD) in Ruby using the RSpec Gem. No previous testing experience needed!",
      "objectives": [
        "Master the syntax and structure of RSpec, the most popular Ruby Gem for testing",
        "Utilize test-driven development principles to design and implement clean test specs in Ruby",
        "Explore the wide collection of RSpec matchers available to test your code",
        "Reduce dependencies in your test suite by mocking objects with class and instance doubles"
      ],
      "course_content": {},
      "requirements": [
        "Intermediate knowledge of the Ruby programming language (classes, objects, blocks, etc)",
        "Modern version of Ruby (>3.0)",
        "Text editor (VSCode is recommended)"
      ],
      "description": "Welcome to Testing Ruby with RSpec: The Complete Guide!\nThis course offers a comprehensive overview of the RSpec testing library for the Ruby programming language. RSpec is the most popular Ruby Gem of all time, with over 300 million downloads to date.\nIf you're new to the topic, testing is the practice of \"writing code that confirms that other code works as expected\". Tests control for regressions, which are changes to the code that break the program. Tests give you the confidence to refactor existing code because you know that you will honor the original purpose of the code.\nThe benefits of testing extend outside of your codebase. In this course, we'll cover test-driven development (TDD), a methodology in which we write our tests first, before the implementation. Test-driven development often leads to simpler, more decoupled code. Thus, testing can make you a better developer. Tests force you to think critically about the program and its features: the classes, the objects, the methods and more.\nTesting Ruby with RSpec begins with the RSpec essentials and proceeds to more complex topics including:\nInstallation\nProject Initialization\nTest-Driven Development (TDD)\nlet variables\nbefore and after Hooks\nSubjects\nShared Examples\nShared Context\nBuilt-in Matchers\nMocks and Doubles\nInstance Doubles\nClass Doubles\nAs a software engineer and consultant who's worked with Ruby for 5+ years, I'm excited to introduce you to the awesome RSpec library, its elegant syntax, and all of its fun quirks.\nThanks for checking out the course!",
      "target_audience": [
        "Intermediate Ruby developers interested in upgrading their skill set",
        "Programmers who want to explore the fundamentals of testing and TDD"
      ]
    },
    {
      "title": "Modern Web Scraping with Python using Scrapy Splash Selenium",
      "url": "https://www.udemy.com/course/web-scraping-in-python-using-scrapy-and-splash/",
      "bio": "Become an expert in web scraping and web crawling using Python 3, Scrapy, Splash and Selenium 2nd EDITION (2021)",
      "objectives": [
        "Understand the fundamentals of Web Scraping",
        "Scrape websites using Scrapy",
        "Understand Xpath & CSS Selectors",
        "Build a complete Spider from A to Z",
        "Store the extracted Data in MongoDb & SQLite3",
        "Scrape JavaScript websites using Splash & Selenium",
        "Build a CrawlSpider",
        "Understand the Crawling behavior",
        "Build a custom Middleware",
        "Web Scraping best practices",
        "Avoid getting banned while scraping websites",
        "Bypass cloudflare",
        "Scrape APIs",
        "Scrape infinite scroll websites",
        "Working with Cookies",
        "Deploy spiders locally and to the cloud",
        "Run spiders periodically",
        "Prevent storing duplicated data",
        "Build datasets",
        "Login to websites using Scrapy",
        "Download images and files using Scrapy"
      ],
      "course_content": {},
      "requirements": [
        "Basics of Python",
        "Internet access"
      ],
      "description": "Web Scraping nowadays has become one of the hottest topics, there are plenty of paid tools out there in the market that don't show you anything how things are done as you will be always limited to their functionalities as a consumer.\nIn this course you won't be a consumer anymore, i'll teach you how you can build your own scraping tool ( spider ) using Scrapy.\nYou will learn:\nThe fundamentals of Web Scraping\nHow to build a complete spider\nThe fundamentals of XPath & CSS Selectors\nHow to locate content/nodes from the DOM using XPath & CSS\nHow to store the data in JSON, CSV... and even to an external database(MongoDb & SQLite3)\nHow to write your own custom Pipeline\nFundamentals of Splash\nHow to scrape Javascript websites using Scrapy Splash & Selenium\nThe Crawling behavior\nHow to build a CrawlSpider\nHow to avoid getting banned while scraping websites\nHow to build a custom Middleware\nWeb Scraping best practices\nHow to scrape APIs\nHow to use Request Cookies\nHow to scrape infinite scroll websites\nHost spiders in Heroku for free\nRun spiders periodically with a custom script\nPrevent storing duplicated data\nDeploy Splash to Heroku\nWrite data to Excel files\nLogin to websites using Scrapy\nDownload Files & Images using Scrapy\nUse Proxies with Scrapy Spider\nUse Crawlera with Scrapy & Splash\nUse Proxies with CrawlSpider\n\n\nWhat makes this course different from the others, and why you should enroll ?\nFirst, this is the most updated course. You will be using Python 3.7, Scrapy 1.6 and Splash 3.0\nYou will have an in-depth step by step guide on how to become a professional web scraper.\n\n\nYou will learn how to use Splash & Selenium to scrape JavaScript websites and I can assure you, you won't find any tutorials out there that teaches how to really use Splash like I'll be doing in this course.\nYou will learn how to host spiders in Heroku as well as Splash(Exclusive).\nYou will learn how to create a custom script so spiders can run periodically without any intervention from you.\n30 days money back guarantee by Udemy\nSo whether you are a data analyst who wants to add web scraping to his tool set or someone else who wants to learn how to extract unstructured data from unstructured HTML web pages and then store back that data in a structured way to apply some data analysis on it then you are welcome to join this course.\n**STUDENTS THOUGHTS ABOUT THIS COURSE **\n\"I was particularly looking for web scraping using XPATHs and this course is addressing that. It also covers dynamic paging. A proper mix of theory and practical. A must-have for those who wants to do web scraping . GREAT learning experience !!! \". By Hiran Kumar\n\"90% of what I was searching for!!! Great job!! Clear explanations and great communication with Ahmed\". By Raylyson Estanista\n\"Admed’s Web scraping course is awesome . His approach using Python with scrapy and splash works well with all websites especially those that make heavy use of JavaScript. Ahmed is a gifted educator: expert communicator, passionate, conscientious and accessible to his students. I highly recommend this course and any of Ahmed Rafik’s Udemy courses. \". By Richard Blackmon\n\"Great course, and a nice introduction to Scrapy (I'm someone with no Python experience whatsoever).\". By I S\n\"Excellent course. Quick and thorough at the same time. Ahmed is incredibly responsive to the students and often replies to questions within minutes! Highest recommendation.\" By Robert Nolte\n\"That course is very good and explanation is crystal clear! The instructor is very supportive in case of questions. Highly recommended.\" By Shubina Ekaterina\n\"I like the course. Clear explanations and good comunication with Ahmed. All topics is interesting and full of information. I improved my skils in Scrapy. Author update course content by new videos. It's a big bonus) Explained more advance topics I never see in other courses. Thank you, Ahmed. Waiting for new videos)\". By Ruslan Romanenko",
      "target_audience": [
        "Anyone who wants to scrape data from any website",
        "Anyone who wants to learn Scrapy",
        "Anyone who wants to automate the task of copying contents from websites",
        "Anyone who wants to learn how to scrape Javascript websites using Scrapy-Splash & Selenium"
      ]
    },
    {
      "title": "Mastering 4 critical SKILLS using C++ 17",
      "url": "https://www.udemy.com/course/cpp-4skills/",
      "bio": "170 problems to enhance problem-solving skills. 6 projects for Project Building and Design Skills. High-quality quizzes",
      "objectives": [
        "Deep Dive with C++ 11/14/17 Modern Syntax from basic to advanced",
        "~170 problems from easy to medium to hard to gain level-1 problem-solving skills",
        "6 Projects from easy to hard with their solutions for projects-building skills",
        "MANY Quizzes to master the concepts",
        "FOUR critical skills to master not just one",
        "A proven curriculum: Many of my thousands students highly recommend it",
        "Short lectures, to the point, comprehensive and easy to get in an iterative style",
        "Learn from PhD holder in AI: Teaching, Training & Coaching for many years"
      ],
      "course_content": {},
      "requirements": [
        "Passion with building things!",
        "Passion with problem solving!",
        "Access to a computer."
      ],
      "description": "Almost all other courses focus on knowledge. In this course, we focus on 4 critical skills.\nOverall:\nThe course covers basic to advanced modern C++ syntax. Beginners in C++ will learn a lot!\nThe course helps you master the 4 most important skills for a programmer\nProgramming skills\nProblem-solving skills: rarely covered by other courses\nProject building skills: partially covered by other courses\nDesign skills: rarely covered by other courses\n7+ times practice & homework compare to other courses + 6 projects\nSpecial Teaching style: iterative, easy, and short\nThis is an English Course only.  1/3 Course now has Manual English subtitles. Remaining under-progress.\n\n\nContent\nBasic to advanced modern C++.\nFundamentals: Variables, Loops, Control Flow, Functions, Recursive Functions, Arrays\nAdvanced Topics: Pointers, STL, Templates, Headers, and Includes, Exception Handling, Compilation Process, Debugging\nObject-Oriented Programming (OOP): Classes, Objects, Inheritance, Polymorphism, Operator Overloading\nModern Topics in C++11/C++14/C++17:\nMove Semantics, Perfect Forwarding, Variadic Template, Folding expressions, Smart Pointers, Lambda Expressions, Wrappers (Optional, Variant, Any), Uniform initialization, noexcept, Structured Binding, Nested namespaces, misc.\nOOP: Member initializer, Defaulted and Deleted Functions, Delegating constructors, Inheriting Constructors\nSTL: Forward list, Initializer list, Array, Unordered containers\nDesign: Several principles and patterns are embedded in the homework & projects\nA huge set of Quizzes, Practice, Homework, and Projects\n2 styles of homework: Algorithmic (problem-solving) and applications\nSeveral software design concerns are embedded in the homework.\nSo you are getting introduced to Software Engineering & Design Patterns\nSeveral quizzes to master the concepts\nClarification: The core intentions of this course to provide very strong introduction to C++. Specifically up to the 6th project. After the last project, the course introduces some further modern C++ syntax (no quizzes/homework in this part). If you are new to C++, there is no course that competes with this one. But, if you are expert or target working with C++ in the market, you will need to good deeper after this course. A useful reference is \"C++17 - The Complete Guide\" book. Not that, this course provides some C++17 coverage but not all of it. However, the course provides pretty good coverage for C++11/14. Please consider the table of content if you are not new to C++ to satisfy your expectations.\n\n\nBuilding Skills: Practice, Homework, and Projects\nOne unique feature in this course is my education strategy:\nExplain, Administrate & Challenge\nEach video smoothly explains a simple concept(s)\nTypically followed by easy to medium practice to administrate the concept\nThen typically followed by an easy-medium-hard set of homework questions to challenge you\nExtensive homework from easy to medium to hard to help to build the skills.\nMost of the practice/homework questions are unique in this course\nProgramming questions are mainly from my competitive programming experience\nOOP questions are mostly invented to achieve several goals:\nMastering the OOP concepts\nEnforcing a lot of design heuristics & OOD\nPreparing you for design principles and patterns\nSmall-to-large set of projects to build up project building and design skills\nSolutions to all of them.\n\n\nBy the end of the journey\nSolid understanding of programming concepts using C++\nMastering the target 4 skills\nWith the administered problem-solving skills\nYou can start competitive programming smoothly in Div2-A/B Codeforces\nSmooth start in Data Structure course\nSmooth start in Algorithms course\nWith the administered project-building and design skills\nSmooth start in Software Engineering course\nLater, smooth start in one of the technology tracks in frontend or backend\nMore career options such as games or embedded development.\nDon't miss such a unique learning experience!",
      "target_audience": [
        "Whoever curious about programming",
        "Learned programming, but has weak skills due to trying little challenges and projects",
        "Experts in other programming languages migrating to C++"
      ]
    },
    {
      "title": "Thinking Beyond Java 8",
      "url": "https://www.udemy.com/course/thinking-beyond-java-8/",
      "bio": "Java 9 to 17 Step by Step: Modules, var, Records, Sealed Classes & More",
      "objectives": [
        "Starting from Java 9, navigate through every release up to Java 17",
        "Language Features",
        "Garbage Collectors like G1, ZGC, Epsilon, Shenandoah",
        "Super useful tools like Jpackage, JShell, JDK Flight Recorder, and more",
        "Performance-related improvements",
        "Removals and Deprecations",
        "Understand the new JDK release cycle and how the Java language and platform are evolving at a rapid pace",
        "Make well-informed decisions about moving beyond Java 8",
        "Tips on Migration(Examples on JAXB, Hibernate, and Spring Boot)"
      ],
      "course_content": {
        "Getting started": [
          "Course Introduction",
          "A glimpse of what you will learn from the course",
          "Understanding the Time-Based JDK Releases",
          "Is Java still free ?",
          "More about the LTS Release",
          "Java 17 is here: LTS release update and a new license(free ?)",
          "Source Code: Downloading and how to navigate?"
        ],
        "Exploring Java 9": [
          "Section Introduction",
          "Convenience Factory Methods for Collections: An Introduction",
          "Convenience Factory Methods for Collections: Understanding the characteristics",
          "Difference between the static factory of() and Collections.unmodifiableXXX()",
          "G1 Garbage Collector: An Introduction",
          "G1 Garbage Collector: An overview of how the G1 Garbage Collector works",
          "Compact Strings: The basics",
          "Compact Strings: Behind the scenes",
          "Indify String Concatenation: A peek into the bytecode",
          "Modularity: Why was it introduced?",
          "Modules: Understanding the basics",
          "Modules: Getting started with a modular application",
          "Modules: How to requires(s) another module?",
          "Modules: The unnamed module",
          "Modules: The automatic module",
          "Modules: Why do we need the automatic module?",
          "Modules: Quick summary of named, unnamed, and automatic modules",
          "Modules: Getting started with a multi-modular application, an example of two mod",
          "Modules: Advantages of the module system",
          "Understanding the Encapsulated Internal API's and jDeps",
          "jlink, The Java Linker: An Introduction",
          "jlink, The Java Linker: Using the tool with a single module",
          "jlink, The Java Linker: Using the tool with two modules",
          "JShell: An Introduction",
          "JShell: Exploring the commands",
          "Introduction to private methods in an interface",
          "A quick recap of the limit and skip methods introduced in JDK 8",
          "Stream API enhancement,takeWhile method: A prelude",
          "Stream API enhancement,takeWhile method: Understanding the basics",
          "Stream API enhancement,dropWhile method: Understanding the basics",
          "Stream API enhancement: Iterate using a Predicate",
          "Stream API enhancement: The ofNullable method",
          "Understanding the meaning of deprecation",
          "Deprecations and Removals",
          "Flow API in Java 9+: Complete Guide",
          "Exercise"
        ],
        "Exploring Java 10": [
          "Section Introduction",
          "Local-Variable Type Inference: An Introduction",
          "Local-Variable Type Inference: Java is still statically typed",
          "Local-Variable Type Inference: Where can it be used?",
          "Local-Variable Type Inference: Examples",
          "Local-Variable Type Inference: Some more examples",
          "Local-Variable Type Inference: Few more examples",
          "Local-Variable Type Inference: Final example",
          "Local-Variable Type Inference: Benefits and Summary",
          "A look at the orElseThrow method in the Optional class",
          "Using the copyOf method to create an unmodifiable list, set and map",
          "Application Class-Data Sharing: An Introduction",
          "Application Class-Data Sharing: Getting started with Class-Data sharing",
          "Application Class-Data Sharing: Getting started",
          "Application Class-Data Sharing: Benefits",
          "Improved Docker Container Detection in Java",
          "Exercise"
        ],
        "Exploring Java 11": [
          "Section Introduction",
          "HTTP Client API: Introduction and motivation",
          "HTTP Client API: An overview of the important components",
          "HTTP Client API: Sending asynchronous requests",
          "HTTP Client API: Summary",
          "Local-Variable Syntax for Lambda Parameters: An Introduction",
          "String API: repeat method",
          "String API: isBlank method",
          "String API: strip method",
          "String API: Difference between strip and trim method",
          "String API: lines method",
          "Epsilon Garbage Collector: An Introduction",
          "Z Garbage Collector: An Introduction",
          "Deprecations and Removals: Java EE and Corba",
          "Deprecations and Removals: Applets and Nashorn",
          "Deprecations and Removals: JavaFX & OpenJFX",
          "Launching Single-File Source-Code Programs: Getting started",
          "Writing scripts using Java: Combining Shebang & Single-File Source-Code Programs",
          "File API: Introduction to the readString and writeString methods",
          "Predicate interface: Improving the readability of the code using the not( )",
          "JDK Flight Recorder: An Introduction",
          "JDK Mission Control: An Introduction",
          "JDK Mission Control: Exploring the User Interface",
          "JFR: Creating a recording & viewing the recording in Mission Control",
          "Exercise"
        ],
        "Exploring Java 12": [
          "Section Introduction",
          "CompactNumberFormat: Formatting numbers in Compact form",
          "Teeing Collector: Composing two downstream collectors",
          "Files API: Determining equality between two files using the mismatch method",
          "Switch Expressions: A quick preview",
          "Shenandoah Garbage Collector: An Introduction",
          "String API: The indent method",
          "String API: The transform method",
          "Java Microbenchmark Harness(JMH): An Introduction",
          "Java Microbenchmark Harness(JMH): Getting started",
          "Java Microbenchmark Harness(JMH): How to benchmark?",
          "Java Microbenchmark Harness(JMH): Conclusion",
          "Exercise"
        ],
        "Exploring Java 13": [
          "Section Introduction",
          "Socket API: Introduction to the reimplementation",
          "Dynamic CDS Archives: An Introduction",
          "TextBlocks: A preview, an overview",
          "String API: The stripIndent method",
          "String API: The translateEscapes method",
          "String API: The formatted method",
          "Switch Expressions: Overview of the changes",
          "Garbage Collector: Enhancement to ZGC",
          "Exercise"
        ],
        "Exploring Java 14": [
          "Section Introduction",
          "Switch Expressions: An Introduction",
          "Switch Expressions: Understanding scope and yielding a value",
          "Switch Expressions: Mixing and matching",
          "Helpful NullPointerException: An Introduction",
          "Garbage Collector changes: Summary",
          "Records: A preview",
          "Pattern Matching for instanceof: A preview",
          "Exercise"
        ],
        "Exploring Java 15": [
          "Section Introduction",
          "Text Blocks: An Introduction",
          "Text Blocks: An Exploration",
          "Text Blocks: Introduction to the two escape sequences",
          "Text Blocks: Overview of what the compiler is doing",
          "Helpful NullPointerException: Overview of the changes",
          "Records: Understanding the basics",
          "Records: Understanding Local Records",
          "Sealed Class: An Introduction",
          "Sealed Class: Examples and Benefits",
          "Other notable changes: A quick summary",
          "Exercise"
        ],
        "Exploring Java 16": [
          "Section Introduction",
          "Records: Behind the scenes",
          "Records: Creating a record from Map.Entry",
          "Records: Using Records as a compound key in a Map",
          "Records: Using Records to return multiple values",
          "Records: Use cases",
          "Stream API: A quick recap of the flatMap method",
          "Stream API: Introduction to the mapMulti method",
          "Stream API: Refactoring using the mapMulti method & using the new toList method",
          "Pattern Matching for instanceof: An Introduction",
          "Pattern Matching for instanceof: Understand the scope of binding variables",
          "Pattern Matching for instanceof: Future",
          "Using Sealed Types and Records together",
          "Understanding how the JDK Internals are strongly encapsulated by default",
          "jpackage, packaging self-contained Java applications: An Introduction",
          "jpackage, packaging self-contained Java applications : Getting started",
          "Value-Based Classes: Warnings and motivation"
        ],
        "Exploring Java 17": [
          "Section Introduction",
          "Sealed Classes and Conversions",
          "Strong encapsulation of JDK Internals: The next step",
          "Quick overview of Removals and Deprecations",
          "Pattern Matching for switch: A preview",
          "Pattern Matching for switch: Compiling code with a preview feature using maven",
          "Pattern Matching for switch: Enhanced type checking in a switch statement",
          "Exercise"
        ]
      },
      "requirements": [
        "Programming experience with Java 8 (Some of the code examples contain Lambdas & Streams)",
        "A computer with the latest JDK and an IDE",
        "Basic understanding of Maven (Used only for a handful of lectures)"
      ],
      "description": "Java has changed more since Java 9 than at any time in its history.  From modules and `var` to records, sealed classes, text blocks, and switch expressions — the language is evolving fast, and keeping up can be a challenge.\nThis course gives you a step-by-step path from Java 9 through Java 17, making it simple to catch up with all the modern features while building confidence through hands-on exercises.\nBy the end of this course, you will:\nUnderstand how Java has evolved beyond Java 8\nMaster new language features like modules, var, records, sealed classes, text blocks, and switch expressions\nExplore new garbage collectors, library enhancements, tools, and deprecations\nLearn how the new JDK release cycle impacts developers\nGain confidence with practical exercises and solutions\nBe better prepared for interviews and real-world projects\n\n\nStarting from Java 9, we will incrementally move up to Java 17 and explore :\nLanguage Features, Garbage Collectors, Library enhancements, Tools, Removals and Deprecations, and a lot more.\nWe target a single Java release in every section.\nSome of the topics covered -\nText Blocks, Switch Expressions, Records, Pattern Matching for instanceof, Pattern Matching for switch, Sealed Classes\nGarbage Collectors - G1, Epsilon, ZGC, Shenandoah\nModularity, jdeps, jlink, jdeprscan\nImproved Docker Container Detection\nTool/Toolkit - Jpackage, JShell, JDK Flight Recorder\nFactory methods in Collections\nCompact Strings\nUnderstand how String concatenation works behind the scenes\nSome of the changes in the Stream API\nLocal Variable Type Inference along with recommendations on usage\nApplication Class Data Sharing\nThe new HTTP Client API\nHandy String API changes\nWriting scripts using the Java programming language\nTeeing Collector\nJMH (Java Microbenchmark Harness)\nEncapsulated JDK internals\nTips on Migration (Examples on JAXB, Hibernate, and Spring Boot)\nand more!\nNow includes a downloadable PDF guide on the Java Flow API (Java 9+) — a beginner-friendly reference that explains the core reactive programming interfaces with clear examples and key takeaways. This bonus resource strengthens your understanding and helps with interview preparation.\nThe course will immensely benefit Java developers interested in getting up to speed with the ever-evolving Java language.\nThere are lots of exercises (along with the solution) that will help you to gain confidence.\nThe course is not a migration guide but we do cover numerous areas that can have an impact on migration.\nWhat if you have questions?\nI offer full support, 7 days a week, answering any questions you have.",
      "target_audience": [
        "Java developers interested in getting up to speed with the ever-evolving Java language",
        "You want to learn the new features of modern Java"
      ]
    },
    {
      "title": "Complete Java Design Patterns masterclass",
      "url": "https://www.udemy.com/course/javadesignpatterns/",
      "bio": "Improve your coding skills by learning Software Design Patterns applied to Java development",
      "objectives": [
        "Design patterns",
        "Proper Java development",
        "Creational patterns",
        "Structural patterns",
        "Behavioural patterns",
        "Coding best practices"
      ],
      "course_content": {},
      "requirements": [
        "Java development knowledge",
        "Mac or PC"
      ],
      "description": "Knowing how to build well structured programs and apps, that are scalable and robust is essential for every developer.\nThat's why I've created this course on Design Patterns for Java.\nHere you will learn how to apply popular patterns to your code, such as Builder, Adapter, Abstract Factory, as well as lesser known but very useful patterns, such as Composite, Decorator, Strategy etc.\nThis course will teach you how to structure your code so that it is more maintainable as it grows, and that it's easier to debug and test. When building a new project, you are not trying to reinvent the wheel, but instead to implement the correct solutions to the problems that you encounter.\nIt will also teach you the terminology that you need when you communicate with top level developers. When they say they implemented a factory for a piece of code, or the added a builder pattern for the creation of a certain object, you will immediately know what they mean.\nThis course covers 3 types of design patterns\nCreational\nStructural\nBehavioural\nWe will also include code samples at each step of the way, so that you already know how to implement these patterns in practice.\nSign up today, and let's learn how to use Design Patterns in Java.",
      "target_audience": [
        "Beginner Java developers",
        "Intermediate Java developers"
      ]
    },
    {
      "title": "The Ultimate Python Bootcamp: Learn by Building 50 Projects",
      "url": "https://www.udemy.com/course/100-days-of-python/",
      "bio": "Only Python course that you need",
      "objectives": [
        "Understand and apply Python fundamentals including variables, data types, loops, and functions",
        "Handle exceptions and write clean, maintainable code using context managers",
        "Build real-world mini-projects while learning key Python modules and practices",
        "Explore object-oriented programming, decorators, iterators and more"
      ],
      "course_content": {},
      "requirements": [
        "No prior programming experience is needed",
        "A computer (Windows, macOS, or Linux) with internet access",
        "A code editor such as VS Code",
        "Curiosity to learn and consistency to practice daily"
      ],
      "description": "Only Python course that you will need. A python course that is take your python skills to production level.\nUnlock the full power of Python, one of the world’s most versatile and beginner-friendly programming languages. Whether you're just starting out or looking to reinforce your foundational knowledge with real-world applications, this course offers a structured and practical journey into Python.\nThis is not just another Python tutorial. Each concept is taught through relatable real-world examples, including our signature “chai shop” analogy that brings abstract ideas to life. The course is designed to help you not only understand Python syntax but also build the mental models necessary to apply Python in real projects confidently.\nFrom core data types and control flow to advanced topics like object-oriented programming, context managers, decorators, file handling, JSON, HTTP requests, and so much more. Every chapter is written with clarity and includes hands-on coding examples, detailed explanations, and output demonstrations. You’ll also dive into tools and modules from the Python standard library that are essential for any developer, such as json, requests, pathlib, and more.\nWhat you’ll learn:\nPython fundamentals: variables, strings, lists, tuples, dictionaries, sets\nFlow control using if-else statements, loops, and comprehensions\nFunctions, scopes, decorators, and assignment expressions\nObject-Oriented Programming: classes, inheritance, polymorphism, operator overloading, and data classes\nFile I/O: working with files, JSON, Pickle, Shelve, and compressed archives\nException handling and writing custom context managers\nHTTP requests with the requests library\nWriting clean, maintainable code\n\n\nWhy this course stands out:\nReal-world examples in every topic, explained with relatable scenarios\nComplete beginner to advanced coverage, in one cohesive curriculum\nProject-oriented learning with mini challenges and solutions after each concept\nBootcamp-style teaching with full code, outputs, and breakdowns\nBy the end of this course, you will not only be proficient in Python but also ready to apply it in practical applications, automation scripts, backend logic, and more.\nJoin us on this Python journey and build your confidence through hands-on learning that sticks.",
      "target_audience": [
        "Beginners who want to learn Python from scratch",
        "Students transitioning from other languages to Python",
        "Professionals looking to strengthen their Python fundamentals",
        "Anyone interested in building real-world Python projects and learning by doing",
        "Learners preparing for technical interviews or Python-based roles"
      ]
    },
    {
      "title": "Deep Learning Computer Vision™ CNN, OpenCV, YOLO, SSD & GANs",
      "url": "https://www.udemy.com/course/master-deep-learning-computer-visiontm-cnn-ssd-yolo-gans/",
      "bio": "2020 Update with TensorFlow 2.0 Support. Become a Pro at Deep Learning Computer Vision! Includes 20+ Real World Projects",
      "objectives": [
        "Learn by completing 26 advanced computer vision projects including Emotion, Age & Gender Classification, London Underground Sign Detection, Monkey Breed, Flowers, Fruits , Simpsons Characters and many more!",
        "Advanced Deep Learning Computer Vision Techniques such as Transfer Learning and using pre-trained models (VGG, MobileNet, InceptionV3, ResNet50) on ImageNet and re-create popular CNNs such as AlexNet, LeNet, VGG and U-Net.",
        "Understand how Neural Networks, Convolutional Neural Networks, R-CNNs , SSDs, YOLO & GANs with my easy to follow explanations",
        "Become familiar with other frameworks (PyTorch, Caffe, MXNET, CV APIs), Cloud GPUs and get an overview of the Computer Vision World",
        "How to use the Python library Keras to build complex Deep Learning Networks (using Tensorflow backend)",
        "How to do Neural Style Transfer, DeepDream and use GANs to Age Faces up to 60+",
        "How to create, label, annotate, train your own Image Datasets, perfect for University Projects and Startups",
        "How to use OpenCV with a FREE Optional course with almost 4 hours of video",
        "How to use CNNs like U-Net to perform Image Segmentation which is extremely useful in Medical Imaging application",
        "How to use TensorFlow's Object Detection API and Create A Custom Object Detector in YOLO",
        "Facial Recognition with VGGFace",
        "Use Cloud GPUs on PaperSpace for 100X Speed Increase vs CPU",
        "Build a Computer Vision API and Web App and host it on AWS using an EC2 Instance"
      ],
      "course_content": {},
      "requirements": [
        "Basic programming knowledge is a plus but not a requirement",
        "High school level math, College level would be a bonus",
        "Atleast 20GB storage space for Virtual Machine and Datasets",
        "A Windows, MacOS or Linux OS"
      ],
      "description": "Update: June-2020\nTensorFlow 2.0 Compatible Code\nWindows install guide for TensorFlow2.0 (with Keras), OpenCV4 and Dlib\nDeep Learning Computer Vision™ Use Python & Keras to implement CNNs, YOLO, TFOD, R-CNNs, SSDs & GANs + A Free Introduction to OpenCV.\nIf you want to learn all the latest 2019 concepts in applying Deep Learning to Computer Vision, look no further - this is the course for you! You'll get hands  the following Deep Learning frameworks in Python:\nKeras\nTensorflow 2.0\nTensorFlow Object Detection API\nYOLO (DarkNet and DarkFlow)\nOpenCV4\nAll in an easy to use virtual machine, with all libraries pre-installed!\n======================================================\nApr 2019 Updates:\nHow to set up a Cloud GPU on PaperSpace and Train a CIFAR10 AlexNet CNN almost 100 times faster!\nBuild a Computer Vision API and Web App and host it on AWS using an EC2 Instance!\nMar 2019 Updates:\nNewly added Facial Recognition & Credit Card Number Reader Projects\nRecognize multiple persons using your webcam\nFacial Recognition on the Friends TV Show Characters\nTake a picture of a Credit Card, extract and identify the numbers on that card!\n======================================================\nComputer vision applications involving Deep Learning are booming!\nHaving Machines that can 'see' will change our world and revolutionize almost every industry out there. Machines or robots that can see will be able to:\nPerform surgery and accurately analyze and diagnose you from medical scans.\nEnable self-driving cars\nRadically change robots allowing us to build robots that can cook, clean and assist us with almost any task\nUnderstand what's being seen in CCTV surveillance videos thus performing security, traffic management and a host of other services\nCreate Art with amazing Neural Style Transfers and other innovative types of image generation\nSimulate many tasks such as Aging faces, modifying live video feeds and realistically replace actors in films\nHuge technology companies such as Facebook, Google, Microsoft, Apple, Amazon, and Tesla are all heavily devoting billions to computer vision research.\nAs a result, the demand for computer vision expertise is growing exponentially!\nHowever, learning computer vision with Deep Learning is hard!\nTutorials are too technical and theoretical\nCode is outdated\nBeginners just don't know where to start\nThat's why I made this course!\nI  spent months developing a proper and complete learning path.\nI teach all key concepts logically and without overloading you with mathematical theory while using the most up to date methods.\nI created a FREE Virtual Machine with all Deep Learning Libraries (Keras, TensorFlow, OpenCV, TFODI, YOLO, Darkflow etc) installed! This will save you hours of painfully complicated installs\nI teach using practical examples and you'll learn by doing 18 projects!\nProjects such as:\nHandwritten Digit Classification using MNIST\nImage Classification using CIFAR10\nDogs vs Cats classifier\nFlower Classifier using Flowers-17\nFashion Classifier using FNIST\nMonkey Breed Classifier\nFruit Classifier\nSimpsons Character Classifier\nUsing Pre-trained ImageNet Models to classify a 1000 object classes\nAge, Gender and Emotion Classification\nFinding the Nuclei in Medical Scans using U-Net\nObject Detection using a ResNet50 SSD Model built using TensorFlow Object Detection\nObject Detection with YOLO V3\nA Custom YOLO Object Detector that Detects London Underground Tube Signs\nDeepDream\nNeural Style Transfers\nGANs - Generate Fake Digits\nGANs - Age Faces up to 60+ using Age-cGAN\nFace Recognition\nCredit Card Digit Reader\nUsing Cloud GPUs on PaperSpace\nBuild a Computer Vision API and Web App and host it on AWS using an EC2 Instance!\nAnd OpenCV Projects such as:\nLive Sketch\nIdentifying Shapes\nCounting Circles and Ellipses\nFinding Waldo\nSingle Object Detectors using OpenCV\nCar and Pedestrian Detector using Cascade Classifiers\nSo if you want to get an excellent foundation in Computer Vision, look no further.\nThis is the course for you!\nIn this course, you will discover the power of Computer Vision in Python, and obtain skills to dramatically increase your career prospects as a Computer Vision developer.\n======================================================\nAs for Updates and support:\nI will be active daily in the 'questions and answers' area of the course, so you are never on your own.\nSo, are you ready to get started? Enroll now and start the process of becoming a Master in Computer Vision using Deep Learning today!\n======================================================\nWhat previous students have said my other Udemy Course:\n\n\"I'm amazed at the possibilities. Very educational, learning more than what I ever thought was possible. Now, being able to actually use it in a practical purpose is intriguing... much more to learn & apply\"\n\"Extremely well taught and informative Computer Vision course! I've trawled the web looking for OpenCV python tutorials resources but this course was by far the best amalgamation of relevant lessons and projects. Loved some of the projects and had lots of fun tinkering them.\"\n\n\"Awesome instructor and course. The explanations are really easy to understand and the materials are very easy to follow. Definitely a really good introduction to image processing.\"\n\n\n\"I am extremely impressed by this course!! I think this is by far the best Computer Vision course on Udemy. I'm a college student who had previously taken a Computer Vision course in undergrad. This 6.5 hour course blows away my college class by miles!!\"\n\n\"Rajeev did a great job on this course. I had no idea how computer vision worked and now have a good foundation of concepts and knowledge of practical applications. Rajeev is clear and concise which helps make a complicated subject easy to comprehend for anyone wanting to start building applications.\"\n======================================================",
      "target_audience": [
        "Programmers, college students or anyone enthusiastic about computer vision and deep learning",
        "Those wanting to be on the forefront of the job market for the AI Revolution",
        "Those who have an amazing startup or App idea involving computer vision",
        "Enthusiastic hobbyists wanting to build fun Computer Vision applications"
      ]
    },
    {
      "title": "Java For Everyone - Zero to Hero",
      "url": "https://www.udemy.com/course/java-for-everyone-zero-to-hero/",
      "bio": "Core Java, OOPS, Collection, Exception Handling, Design Pattern",
      "objectives": [
        "Core concepts of Java including Variables, datatypes, operators, control statements, arrays, packages, classpath, user-input and debugging",
        "Design patterns And also you will learn how to debug code in eclipse.",
        "String with memory mapping Exception handling Java collections",
        "Object Oriented Programming concepts with read life examples"
      ],
      "course_content": {},
      "requirements": [
        "Basic computing knowledge is enough for this course. As I have designed this course considering that you don't have programming knowledge. And after this course you will be able to write code without any issue."
      ],
      "description": "This course is for anyone who wants to make career in Java Development, Automation Testing, Android Development.\n\n\nIn this course, we will focus on below topics in detail considering that you are non java developer. This course will give you lot of motivation as we have tried to put lot of examples of real word.\n\n\nVery unique way to explain Object Oriented Programming like A PIE concept.\n\n\nBasic Java\n\n\nBasic computing\nWhy Java?\nConfiguring Eclipse IDE for Java\nHow to create new java project?\nHow to create a new java class?\nRunning java class\nViewing the results of java program\nLearning Java\nIntroduction to Java programming\nData Types in Java Primitive Data types\nWrapper Classes\nDeclaring Variables\nWriting java program and running\nConditional Statements\nIf condition\nIf else condition\nIf else if condition (nested if)\nSwitch case statement\nExamples for all the above conditions\nLoop Statements\nWhile loop\nDo while\nFor loop\nFor each loop\nExamples for all the above loops\nArray\n\n\nHow to declare array\nHow to store values in array?\nReading values in array (1 D & 2 D)\nOOPS\nStatic, Static block\nInstance, Init block\nConstructor, chaining\nAbstraction\nPolymorphism\nInheritance\nEncapsulation\nPackage\nWhat is package?\nHow to create a package?\nHow to import package into a different class?\n\n\nCollection\nArrayList\nLinkedList\nHashSet\nTreeSet\nLinkedHashSet\nHashMap\nLinkedHashMap\nTreeMap\n\n\nException Handling\nCompileTime exception\nRunTime exception\nCustom Exception\nJava Design Patterns\nDesign Pattern Concepts\nSingleton\nFactory, Abstract Factory\n\n\nDebug Scripts in Eclipse\nUnderstanding Debug\nUsing Breakpoints\nVerify the values during debug\nUsing step over, step into\nTips for using Eclipse efficiently\n\n\nSo, don't think much and get started. I have trained more that 5000 students/IT professionals and now they all can write code in java.",
      "target_audience": [
        "Curious to learn new things, want to start career in Java, Automation, Web Development"
      ]
    },
    {
      "title": "Python Programming Beginners Tutorial : Python 3 Programming",
      "url": "https://www.udemy.com/course/a-laymans-guide-to-python/",
      "bio": "Python for Beginners Tutorial : Learn Python for Programmers : Python Programming Tutorial for Beginners : Best Python 3",
      "objectives": [
        "Develop a basic understanding of programming and the Python programming language.",
        "Write programs and solve problems using the logical constructs of Python.",
        "Demonstrate significant experience with the Python program development environment.",
        "Understand the concepts of Object-Oriented Programming used in Python: Classes, Attributes, Inheritance, Polymorphism.",
        "Work with the Python standard library."
      ],
      "course_content": {},
      "requirements": [
        "There are no pre-requisites to learn Python.",
        "Basic understanding of Computer Programming terminologies is sufficient.",
        "Basic concepts related to Programming and Database is beneficial but not mandatory."
      ],
      "description": "Learn Python from the basics - A Layman's guide to Python\nThis Python course is for beginners - anybody can take this course even without any prior programming experience. Every topic has been explained in detail and in a way that is easy to understand using examples. You can learn the course at your pace and practice the exercises provided at the end of the topics.\nIn the tutorials, the programming examples are demonstrated either using the Anaconda Jupyter Notebook or the Python IDLE application.\nWe recommend you to download the latest version (3.6) of Python from the Anaconda Distribution website (covered in the tutorial).\nPlease feel free to ask questions on any issue that you may face while taking the course, our team would be glad to help you.\n#python #programming #beginners #programmers",
      "target_audience": [
        "This Python course is for beginner and intermediate levels.",
        "Anybody can take this course even without any prior programming experience.",
        "Python does not have strict syntax rules and it reads like plain English and simple to understand for anyone who is new to programming. If you’re looking to learn coding or want to pick up another programming language, Python is a good choice."
      ]
    },
    {
      "title": "The Ultimate LINQ with C# Masterclass - Basics to Advanced",
      "url": "https://www.udemy.com/course/the-ultimate-linq-with-csharp-masterclass-basics-to-advanced/",
      "bio": "The only LINQ class you will ever need! Both Query and Method Syntaxes are covered in the course!",
      "objectives": [
        "You will understand all LINQ Operations",
        "LINQ Query Syntax",
        "LINQ Method Syntax",
        "LINQ Group Operations",
        "LINQ Join Operations",
        "Set Operations with LINQ Methods",
        "Partitioning Operations with LINQ Methods",
        "Quantifying Operations with LINQ Methods",
        "Aggregation Operations with LINQ Methods",
        "Concatenation Operations with LINQ Methods"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "BONUS: Useful Shortcuts and General Quality Code Tips PDF"
        ],
        "Basic LINQ Query": [
          "What is LINQ, Where does it Apply and How to Use it?",
          "IEnumerable",
          "LINQ Examples - Where, Select, Sorting, Multiple Conditions and More",
          "LINQ Queries on Objects",
          "Creating/Extracting New Objects with LINQ Queries - Select New",
          "The let Keyword - Internal Variables and Multiple from",
          "LINQ Examples - Source Code"
        ],
        "LINQPad Supportive Tool": [
          "LINQPad Introduction - Help Yourselves While Studying LINQ!"
        ],
        "Grouping LINQ Queries": [
          "Introduction to Grouping - group, by",
          "Group by Multiple Keys",
          "Extend a Group Query With into",
          "Grouping with Custom Keys",
          "How Many Items In Each Group?",
          "Grouping Source Code"
        ],
        "Joining LINQ Queries": [
          "Basic Join and Inner Join of Objects with LINQ Query - join",
          "Inner Join with Composite Key",
          "Group Join and Inner Group Join",
          "Left Outer Join",
          "Join Source Code"
        ],
        "Introduction to LINQ with Method Syntax (Lambda Operators)": [
          "Introduction to Method Syntax with Lambda Operators",
          "The Difference Between Select and Where in Method Syntax",
          "Short ForEach with Lambda and Linq Method",
          "Source Code"
        ],
        "Grouping with Method Syntax (Lambda Operators)": [
          "Grouping Introduction and Grouping by MultiKey",
          "Grouping by Custom Keys and Custom Final Objects",
          "Source Code"
        ],
        "Joining with Method Syntax (Lambda Operators)": [
          "Inner Join and Composite Join",
          "Group Join and Group Inner Join",
          "Left Outer Join - Anonymous and Type Final Objects",
          "Source Code"
        ],
        "Filtering, Converting and Ordering - Method and Query Syntax": [
          "Filtering a Collection by The Type of The Items in it",
          "Filtering with \"Where\" and Things To Consider",
          "Converting To Lists, Arrays and From One Type to Another",
          "Ordering with Method Syntax - Common Pitfall",
          "Filtering, Converting and Ordering - Source Code"
        ],
        "Cool Stuff in LINQ": [
          "Generating Sequences - Enumerable.Range",
          "Checking Collections for Equality",
          "Set Operations - Distinct, Intersect, Union, Except",
          "Quantifying Operations - All, Any, Contains",
          "Partitioning Operations - Skip, Take, SkipWhile, TakeWhile",
          "Concatenating Collections - The Concat Method",
          "Aggregation Operations - Aggregate, Sum, Min, Max",
          "Cool Stuff in LINQ - Source Code"
        ]
      },
      "requirements": [
        "Visual Studio Installed & Experience with Visual Studio",
        "Some Coding Experience with C# is Required - Conditions, Loops, Collections (Lists, Arrays)",
        "Basic knowledge of Object Oriented Programming"
      ],
      "description": "In this course you will learn everything you need to know about LINQ Operations and how to perform them.\nWe start off from the most basic operations and build towards more complex ones.\nBoth Query and Method syntax is covered in the course.\nAnd of course, all the source code will be provided for each of the sections in the course, in a nicely ordered and structured fashion, so that you can use the code to practice and learn.\n\nThe course is aimed at students that have some coding experience in general and with C# in particular, a little bit of OOP knowledge is required, for some of the lectures.\nThe topics that we are covering are:\nLINQ Basics with Query syntax – we will start with the most basic operations with query syntax and build towards more complex ones\nGrouping Operations with Query syntax – grouping allows you to group the items in a collection by a given common key, for example to group a list of people by their age. You will learn 5 different types of group operations\nJoining Operations with Query syntax – joining allows you to join two different collections by a common key, so its similar to grouping, but it just does it on two collections and not on one. You will learn the 3 major types of join operations and a few of their derivations\nThe Let keyword – that allows you to create internal variables inside your queries\nLINQPad – short introduction to this nice piece of software that you can use while you study LINQ to better visualize the results of the operations\nLINQ Basics with Method syntax – here we will reiterate what we have already learned about LINQ but this time you will leran how to perform these operations with Method Syntax. Method syntax makes some of the operations easier to implement than Query syntax\nGrouping with Method syntax\nJoining with Method syntax\nFiltering, Converting and Ordering with Method syntax – while by this point you will already be familiar with the basics of these operations, there are things that need to be considered while performing these operations with Method Syntax. You will learn what are the common pitfalls.\nCool Stuff in LINQ – Finally we will end with some cool operations that we can easily perform by using the LINQ Methods, how we can generate different sequences of numbers, characters, random numbers and many other things. More interesting things like Set, quantify, partition, concatenation and aggregation operations will also be explained\nThere are tons and tons of tutorials on Youtube and other websites, so why would you have to pay for this course?\n\nThe answer is very simple, in this course you will get every single lecture systemized in such way, that it ensures smooth transition between the previous and the following topic. Guaranteeing great learning experience.\nThere are no stones left unturned, everything is explained in great detail (but not too much, that would be boring :) )\nThe video lectures in the course are produced with the highest possible audio and video quality. No static noises to disturb you while you watch the videos, no blurry images, everything is crystal clear with crisp audio!",
      "target_audience": [
        "People that want to improve their skills with Collections",
        "People that want to learn the Ins and Outs of LINQ"
      ]
    },
    {
      "title": "Scala Applied, Part 1",
      "url": "https://www.udemy.com/course/stairway-to-scala-applied-part-1/",
      "bio": "Introduction to programming in the Scala language. Core syntax and concepts.",
      "objectives": [
        "Use the REPL (the Scala Interactive Shell) for experimentation and fun",
        "Understand the basics of Scala syntax, including val, var, def, if, while, try, for and more",
        "Create classes, objects and instances",
        "Define and use function literals and higher order functions",
        "Understand the basics of Scala's type inference and how to use it",
        "Write custom control structures to augment those built into the language",
        "Start down the path of a more functional style of programming",
        "Be ready for Part 2 of Stairway to Scala Applied, which will dig into some of the differences between Scala and other languages"
      ],
      "course_content": {
        "Course Introduction and Exercises": [
          "Course Introduction and Content",
          "Download Slides and Exercises"
        ],
        "Module 1 - Starting Scala": [
          "01 - Introduction",
          "02 - Module Agenda",
          "03 - The Scala REPL",
          "04 - Using SBT",
          "05 - First time in the REPL",
          "06 - Vals and Vars",
          "07 - Hiding a val with another val",
          "08 - Scala and Types",
          "09 - Defining a Method",
          "10 - If Expressions",
          "11 - If Expressions continued",
          "12 - Functional Style and try...catch...finally",
          "13 - Simple Loops",
          "14 - Do...While",
          "15 - Scala Scripts",
          "First Steps Quiz",
          "16 - Module 1 exercises"
        ],
        "Module 2 - Scala 101 and Worksheets": [
          "01 - Introduction",
          "02 - Module Agenda",
          "03 - Scala projects in IntelliJ",
          "04 - IntelliJ Worksheets",
          "05 - Method Parameters and Return Types",
          "06 - Methods with no return types",
          "07 - Expressions and Statements",
          "08 - Assignments and Unit",
          "09 - Tuples",
          "10 - Tuples continued",
          "11 - Re-writing Rules: Infix",
          "12 - Re-writing Rules: Apply",
          "13 - Re-writing Rules: Update",
          "14 - General Notes on Re-writing",
          "15 - Collections Intro",
          "16 - List Initialization and Cons",
          "17 - Sequences",
          "18 - Sets",
          "19 - Mutable vs Immutable",
          "20 - Maps",
          "21 - The -> Extension Method",
          "22 - Simple Map Iteration",
          "23 - More Functional Style",
          "24 - Opening and Reading a File",
          "Next Steps Quiz",
          "25 - Module 2 Exercises (and how to run them in IntelliJ)"
        ],
        "Module 3 - Classes, Objects, Apps and more": [
          "01 - Introduction",
          "02 - Module Agenda",
          "03 - Define a Scala Class",
          "04 - Constructors and Parameters",
          "05 - Parameters, Fields and Parametric Fields",
          "06 - A Rational Class",
          "07 - Checking Preconditions",
          "08 - Referencing Self",
          "09 - Infix Style and Symbolic Methods",
          "10 - Symbolic Methods continued",
          "11 - Auxiliary Constructors",
          "12 - Companion Objects",
          "13 - Companions and private",
          "14 - Method Overloading",
          "15 - Implicit Conversion",
          "16 - Implicit Rules",
          "Classes and Objects Quiz",
          "17 - Module 3 exercises"
        ],
        "Module 4 - Control Structures in Scala": [
          "01 - Introduction",
          "02 - Module Agenda",
          "03 - Expressions and Statements Recap",
          "04 - Unit and Side Effects",
          "05 - Alternatives to Returning Unit",
          "06 - Return this instead of Unit",
          "07 - If, ternary and types",
          "08 - val and var, IDE tricks",
          "09 - Try...catch...finally and type inference",
          "10 - While loop statement, and @tailrec",
          "11 - For Statements and Expressions",
          "12 - For...Yield",
          "13 - The Four Gs of For",
          "14 - For - more than just loops",
          "15 - Match expressions",
          "16 - Match Guards",
          "17 - More Matching",
          "18 - String Interpolation",
          "Built In Control Structures",
          "19 - Module 4 Exercises"
        ],
        "Module 5 - Functions and Closures": [
          "01 - Introduction",
          "02 - Module Agenda",
          "03 - Private Methods",
          "04 - Nested Methods",
          "05 - Scoping of Nested Methods",
          "06 - Function Literals",
          "07 - Passing Function Literals",
          "08 - How Functions Work",
          "09 - Other Methods on Function",
          "10 - Higher Order Functions",
          "11 - Writing a Higher Order Function",
          "12 - Placeholder Syntax",
          "13 - Placeholders with Types",
          "14 - Partial Application",
          "15 - Partial Application continued",
          "16 - Closures",
          "17 - Partial Functions",
          "18 - Partial Functions continued",
          "19 - Partial Functions, map vs collect",
          "20 - Var Args",
          "21 - Using Var Args",
          "22 - Var Args, Expansion",
          "23 - Default and Named Parameters",
          "Functions and closures"
        ],
        "Module 6 - Custom Control Structures": [
          "01 - Introduction",
          "02 - Module Agenda",
          "03 - Using the Contents of a File",
          "04 - Using Generics and Higher Order Functions",
          "05 - Calling the Generic Method",
          "06 - Currying Method Parameters",
          "07 - Curly Braces and Parens",
          "08 - Curried Generic Loan",
          "09 - Function Arity",
          "10 - Writing Our Own While Loop",
          "11 - By-name Functions",
          "Control Abstraction"
        ],
        "End of Scala Applied, Part 1": [
          "Thanks for taking the course"
        ]
      },
      "requirements": [
        "Knowledge of at least one other programming language, along with the fundamentals of computer programming is assumed",
        "Student should complete the free Stairway to Scala - Setup Instructions also available on Udemy to be ready to take this course."
      ],
      "description": "After taking Scala Applied part 1, you will be able to:\nUse the REPL (the Scala Interactive Shell) for experimentation and fun\nUnderstand the basics of Scala syntax, including val, var, def, if, while, try, for and more\nCreate classes, objects and instances\nDefine and use function literals and higher order functions\nUnderstand the basics of Scala's type inference and how to use it\nWrite custom control structures to augment those built into the language\nStart down the path of a more functional style of programming\nBe ready for Part 2 of Stairway to Scala Applied, which will dig into some of the differences between Scala and other languages\nThe course is half theory, half practice with hands on coding exercises built around test driven development examples. If you complete all three parts, with all the exercises, you will find that in addition to a strong grounding in the language theory, you will have the practical skills and comfort to code in Scala, as well as having the tools necessary to do so.\nUnlike many other courses that teach a specific aspect of the Scala language, for example reactive programming or functional concepts, Stairway to Scala Applied provides a balanced and thorough introduction to the whole language and its concepts, including libraries like Actors and Collections. It is intended to accelerate your Scala learning curve and make you able to use Scala productively by the end of the course.\nThe course is taught by two highly experienced Scala developers who use Scala on a daily basis for real world commercial projects, and have done so for several years each.\nMost of the lectures are practical demonstrations accompanied by a slide. You can download the slide deck and follow along on your computer, but the lectures are also presented using Udemy mashups, so the slide and practical demo can be switched between at will. If you hear typing, it's best to bring up the practical demo screencast instead of the slide in order to follow along.",
      "target_audience": [
        "Anyone interested in programming using the Scala programming language",
        "Students should have some programming experience in another language, but no prior Scala language knowledge is assumed.",
        "Developers wanting to get to a good working knowledge of Scala as quickly as possible"
      ]
    },
    {
      "title": "Ultimate Rust Crash Course",
      "url": "https://www.udemy.com/course/ultimate-rust-crash-course/",
      "bio": "Rust Programming Fundamentals",
      "objectives": [
        "Rust language basics, tooling, and ecosystem",
        "Fundamentals such as variables, scope, functions, modules, scalar & compound types, control flow, strings, structs, traits, enums, and more.",
        "Fun tips & tricks for using Rust and systems programming in general",
        "Concepts essential to understanding Rust such as ownership, references & borrowing, the memory model, and why Rust focuses on safety, concurrency, and speed."
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Exercises Overview"
        ],
        "Fundamentals": [
          "Cargo",
          "Variables",
          "Scope",
          "Memory Safety",
          "Exercise A - Variables",
          "Functions",
          "Exercise B - Functions",
          "Module System"
        ],
        "Primitive Types & Control Flow": [
          "Scalar Types",
          "Compound Types",
          "Exercise C - Simple Types",
          "Control Flow",
          "Strings",
          "Exercise D - Control Flow & Strings"
        ],
        "The Heart of Rust": [
          "Ownership",
          "References & Borrowing",
          "Exercise E - Ownership & References"
        ],
        "The Meat of Rust": [
          "Structs",
          "Traits",
          "Exercise F - Structs & Traits",
          "Collections",
          "Enums",
          "Exercise G - Collections & Enums"
        ],
        "Final Lectures": [
          "Closures",
          "Threads",
          "Exercise H - Closures & Threads"
        ],
        "Project - Invaders": [
          "Invaders Part 1 - Setup Audio",
          "Invaders Part 2 - Rendering & Multithreading",
          "Invaders Part 3 - The Player",
          "Invaders Part 4 - Shooting",
          "Invaders Part 5 - Invaders",
          "Invaders Part 6 - Winning & Losing"
        ],
        "Final Words": [
          "Thank You!"
        ]
      },
      "requirements": [
        "A basic understanding of general programming concepts",
        "Familiarity with other programming languages such as Python, C, etc. is helpful, but not required.",
        "Rust installed and ready to use - you'll learn more by doing the exercises!"
      ],
      "description": "Join Nathan Stocks for a fast-paced, entertaining, and curiously informative hands-on crash course in the Rust programming language.\nThis course will provide you with the fundamentals you need to boost you up Rust's steep learning curve.  This is a hands-on course with targeted exercises for each subject and projects for you to use your combined knowledge.  From using cargo to creating a project, to writing your code, to compiling and running it, this course has everything you need to get started. This course is kept up-to-date when Rust is updated with new features or major editions.\nRust is a systems programming language that eliminates entire classes of bugs and security vulnerabilities, has zero-cost abstractions like C and C++, is fun to program in, and lets systems programmers have nice things. No wonder Rust is gaining traction in spaces as diverse as game engines, high-performance computing, embedded devices, and web programming! Learn how to write high-performance code without the worry of crashes or security vulnerabilities. Join a vibrant community of developers where diversity, inclusion, and just plain being nice are all first-class objectives.\nThis course is the first in the Ultimate Rust series. If you like this course, then you'll love Ultimate Rust 2: Intermediate Concepts afterwards!",
      "target_audience": [
        "Aspiring systems programmers, software developers, engineers, wizards, warriors, and hobbits",
        "Any developer who needs to run code fast, efficiently, securely, under tight restraints, or with a minimum of bugs.",
        "A desire to begin using Rust"
      ]
    },
    {
      "title": "Three.js and TypeScript",
      "url": "https://www.udemy.com/course/threejs-tutorials/",
      "bio": "Learn Threejs, TypeScript and NodeJS to create interactive 3D content on the web.",
      "objectives": [
        "Learn the Basics of Threejs with many demonstrations and example code",
        "Setup a Development Environment using VSCode, Git and NodeJS",
        "Install TypeScript",
        "Create a Threejs project using NPM and package json",
        "Learn about the VIte bundler and serving ES6 modules to the browser clients.",
        "Create (or optionally Install) a Threejs TypeScript Boilerplate for use throughout the course",
        "Learn about the Threejs Scene, Camera and Renderer",
        "Learn about the Animation loop",
        "Learn about the Stats, Dat GUI and lil-gui panels",
        "Learn about Object3D base class, and the Rotation, Position, Scale, Visibility and Matrix properties",
        "Learn about Geometries such as Box, Sphere, Icosahedron, Plane, TorusKnot and more",
        "Learn about the Basic, Normal, Phong, Standard, Physical and other materials",
        "Learn about PBR Roughness and Metalness",
        "Learn about lighting using the Ambient, Directional, Point and Spot lights.",
        "Learn about shadows using both the Perspective and Orthographic shadow cameras.",
        "Learn about the Orbit, Trackball and Pointerlock mouse and touch interaction controls",
        "Learn about loaders such as the GLTF, DRACO, OBJ, Texture, RGBE and more",
        "Import third party glTF/glB animations",
        "Animate using Lerp, JEasings and the Animation Mixer",
        "Use Raycaster and how to use it for mouse picking 3D objects in the scene,",
        "Physics with Rapier",
        "The Rapier Debug Renderer",
        "Understanding Shapes for Collision Detection",
        "Provision, Deploy and Start our Threejs Projects to a Production server",
        "Matching Blender Lighting and Environment Maps",
        "Install Nginx Proxy, Point a Domain Name and Install SSL",
        "And many more very useful examples of Threejs"
      ],
      "course_content": {},
      "requirements": [
        "A Computer that you can install VSCode, Git and NodeJS",
        "A desire to code 3D web applications in Threejs and TypeScript"
      ],
      "description": "Welcome to my course on Three.js and Typescript.\nThree.js is a JavaScript library that allows developers to create exciting and very visual interactive 3D content on the internet.\nTypeScript introduces static type checking, which means you can explicitly define the types of variables, function parameters, and return values. This catches potential errors during development, making your code more robust and reliable.\nTypeScript also integrates well with modern IDEs and offers intelligent code hinting and autocompletion.\nThreejs has become a hugely valuable resource on the internet and provides millions of possibilities, however many new learners struggle in their early stages while trying to de-cypher the huge amount of resources on the internet.\nSo this is where this course will help you. It will guide you first with the essential basics of using Threejs and its related addons library, and as the course progresses, each now concept will build on the previous, and become increasingly more sophisticated, so that you understand the problem that each new concept was designed to solve.\nSo, at the end, you would have covered many of the requirements to understand how to build your own Threejs projects and also understand the official examples better. This is so you can confidently continue on your own to build much more complex applications in the future.\nAll the code demonstrated in the videos, is provided in this accompanying documentation, that you can access for free online, so that you can easily copy and paste and participate alongside the videos.\nSo, if you know that you like coding, you like seeing it work for yourself, and you like to experiment, and have millions of ideas that you want to explore, then this course is for you.\nThere is much to learn, but in the end you would have developed the techniques required to build your own Threejs projects and participate more effectively in the 3D developer community.\nThanks for taking part in my course, and I hope to see you there.\nSean",
      "target_audience": [
        "People interested in learning Threejs",
        "People interested in learning TypeScript",
        "People interested in creating interactive 3D applications, games or visualisations on the web"
      ]
    },
    {
      "title": "JavaScript Basics for Beginners",
      "url": "https://www.udemy.com/course/javascript-basics-for-beginners/",
      "bio": "JavaScript - Master the Fundamentals in 6 Hours",
      "objectives": [
        "Understand the fundamental concepts in JavaScript",
        "Learn problem-solving skills",
        "Learn and apply the best practices",
        "Avoid common pitfalls and mistakes other JavaScript developers make",
        "Write solid JavaScript code"
      ],
      "course_content": {
        "Getting Started": [
          "1- Welcome",
          "2- What is JavaScript?",
          "3- Setting Up the Development",
          "4- JavaScript in Browsers",
          "5- Separation of Concerns",
          "6- JavaScript in Node",
          "7- Source Code"
        ],
        "Basics": [
          "1- Variables",
          "2- Constants",
          "3- Primitive Types",
          "4- Dynamic Typing",
          "5- Objects",
          "Arrays",
          "Functions",
          "Types of Functions"
        ],
        "Operators": [
          "1- JavaScript Operators",
          "Arithmetic Operators",
          "3- Assignment Operators",
          "4- Comparison Operators",
          "5- Equality Operators",
          "6- Ternary Operators",
          "7- Logical Operators with Non-booleans",
          "8- Logical Operators with Non-Booleans",
          "BitWise Operators",
          "10- Operator Precedence",
          "11- Quiz",
          "12- Exercise- Swapping Variables"
        ],
        "Control Flow": [
          "1- If...else",
          "2- Switch...case",
          "3- For",
          "4- While",
          "5- Do...While",
          "6- Infinite Loops",
          "7- For...In",
          "8- For...of",
          "9- Break and Continue",
          "10- Max of Two Numbers",
          "11- Exercise- Landscape or Portrait",
          "12- Exercise- FizzBuzz",
          "13- Exercise- Demerit Points",
          "14- Exercise- Even and Odd Numbers",
          "15- Exercise- Count Truthy",
          "16- Exercise- String Properties",
          "17- Exercise- Sum of Multiples 3 and 5",
          "18- Exercise - Grade",
          "19- Exercise - Stars",
          "20- Exercise - Prime Numbers"
        ],
        "Objects": [
          "1- Basics",
          "2- Factory Functions",
          "3- Constructor Functions",
          "4- Dynamic Nature of Objects",
          "5- Constructor Property",
          "6- Functions are Objects",
          "7- Value vs. Reference Types",
          "8- Enumerating Properties of an Object",
          "9- Cloning an Object",
          "10- Garbage Collection",
          "11- Math",
          "12- String",
          "13- Template Literals",
          "14- Date",
          "15- Exercise 1- Address Object",
          "16- Exercise- Factory and Constructor Function",
          "17- Exercise 3- Object Equality",
          "18- Exercise 4- Blog Post Object",
          "19- Exercise 5- Constructor Functions",
          "20- Exercise 6- Price Range Objects"
        ],
        "Arrays": [
          "1- Introduction",
          "2- Adding Elements",
          "3- Finding Elements (Primitives)",
          "4- Finding Elements (Reference Types)",
          "5- Arrow Functions",
          "6- Removing Elements",
          "7- Emptying an Array",
          "8- Combining and Slicing Arrays",
          "9- The Spread Operator",
          "10- Iterating an Array",
          "11- Joining Arrays",
          "12- Sorting Arrays",
          "13- Testing the Elements of an Array",
          "14- Filtering an Array",
          "15- Mapping an Array",
          "16- Reducing an Array",
          "17- Exercise 1- Array from Range",
          "18- Exercise 2- Includes",
          "19- Exercise 3- Except",
          "20- Exercise 4- Moving an Element",
          "21- Exercise 5- Count Occurrences",
          "22- Exercise 6- Get Max",
          "23- Exercise 7- Movies"
        ],
        "Functions": [
          "1- Function Declarations vs. Expressions",
          "2- Hoisting",
          "3- Arguments",
          "4- The Rest Operator",
          "5- Default Parameters",
          "6- Getters and Setters",
          "7- Try and Catch",
          "8- Local vs. Global Scope",
          "9- Let vs Var",
          "10- The This Keyword",
          "11- Changing This",
          "12- Exercise 1- Sum of Arguments",
          "13- Exercise 2- Area of Circle",
          "14- Exercise 3- Error Handling"
        ]
      },
      "requirements": [
        "No coding experience is required to take this course."
      ],
      "description": "WHAT IS JAVASCRIPT?\nJavaScript is one of the most popular programming languages in the world, and growing faster than any other programming language. As a developer, you can use JavaScript to build web and mobile apps, real-time networking apps, command-line tools, and games.\n\n\n4 REASONS TO LEARN JAVASCRIPT\nJavaScript is a key tool for front-end, back-end, and full-stack developers.\nThe average annual salary for a JavaScript developer is $72,000.\nCompanies like Walmart, Netflix, and PayPal run big internal applications around JavaScript.\nHaving strong JavaScript knowledge will help you land your dream job.\n\n\nA STEP-BY-STEP, BEGINNER-FRIENDLY COURSE\nThis course is your first step towards a new career in web or mobile development. Here is what you get when enroll in this course:\n6 hours of HD videos\nBite-sized and easy-to-digest videos with \"no fluff”\n30 exercises and challenges with solutions\nExpert tips to become a JavaScript wizard\nNo more wasted time on disconnected, out-of-date tutorials\nLearn at your own pace - take your time if required\nUnlimited access - watch the course as many times as you wish\n30-day money-back guarantee - try it risk free! You have nothing to lose.\nCertificate of completion to present to your current or future employer\n\n\nWHY THIS COURSE?\nThere are several JavaScript courses on Udemy. So, what makes this course different? Here are 5 reasons:\nTaught by a senior coder and best-selling instructor - Mosh Hamedani\nMosh has 17 years of experience as a software engineer\nHe has produced 19 courses and many of them are best-selling courses\nHe has taught over 200,000 students in 192 countries\nNo fluff or unnecessary repetition - don't waste your time on long courses\nClear, concise, and practical training - start coding right away\nLearn how to think like a programmer - most, if not all, courses just teach you JavaScript features, not the art of problem solving\nJavaScript interview questions - many of the exercises in the course are picked from popular interview questions\nFun and engaging - just read Mosh's reviews and see what his students have to say\n\n\nWHO IS THIS COURSE FOR?\nAspiring developers - perhaps you learned a little bit of HTML and CSS and want to take your first JavaScript programming course. This course is an ideal starting point.\nExperienced developers with no degree in computer science - there are a lot of self-taught web developers out there who cannot solve basic programming problems, because they never attended a college. Don't be one of those! This course teaches you the fundamental programming skills that every developer must know.\nAnyone who wants to better understand JavaScript - chances are you've taken another course but didn't understand certain topics well. You can take this course to fill the gaps and strengthen your understanding of JavaScript.\nNO PRIOR KNOWLEDGE NEEDED\nYou don't need familiarity with JavaScript to take this course. You'll learn everything from scratch, step-by-step. A very basic familiarity with HTML will be helpful but it is not required.\n\n\nARE YOU READY TO MAKE THE FIRST STEP TOWARDS BECOMING A WEB OR MOBILE DEVELOPER?\nStop wasting your time on disconnected tutorials or super long courses. Enroll in the course to get started. With a 30-day money-back guarantee, what do you have to lose?",
      "target_audience": [
        "Anyone who wants to become a web developer",
        "Existing developers who need to strengthen their understanding of JavaScript"
      ]
    },
    {
      "title": "Intermediate to Advanced Python with 10 OOP Projects",
      "url": "https://www.udemy.com/course/the-python-pro-course/",
      "bio": "Everything you need to know to become an expert in Python including OOP, Git, APIs, databases, deployment, PEP8 and more",
      "objectives": [
        "Master Object-Oriented Programming (OOP) in Python",
        "Build 10 Python applications using object-oriented programming",
        "Learn databases, APIs, package development, Git, code refactoring, debugging, and more",
        "Build three advanced Python projects on your own",
        "Learn to write high quality code following the PEP8 Style Guide",
        "Learn how to deploy applications making them accessible to users globally"
      ],
      "course_content": {
        "Course Introduction": [
          "How This Course Will Make You a Pro",
          "What is the Best Python IDE?",
          "Helpful Resources",
          "Link to Download the IDE",
          "Preparing a Professional Coding Environment"
        ],
        "Application 1️⃣ (Section 2-7): Geometry Game": [
          "Welcome to App 1"
        ],
        "Introduction to Object Oriented Programming (OOP)": [
          "Find the Objects in This Code (Assignment)",
          "Python Language Elements from a Deep View",
          "What is a Python Object?"
        ],
        "Creating and Using Python Classes": [
          "Geometry Game Demonstration",
          "Find the Objects (Assignment)",
          "Answer: The Objects in the Code",
          "The Steps of Writing a Professional Program",
          "Creating a Python Class",
          "Creating a Class",
          "Using the Created Class to Create Objects",
          "What is \"self\"?",
          "More About \"self\"",
          "Creating Another Class",
          "Creating Class Methods",
          "The \"__init__\" Method Vs. Normal Methods",
          "Add a \"distance\" Method (Assignment)",
          "Answer: Adding a \"distance\" Method",
          "Adding a Method",
          "Adding One More Method"
        ],
        "More Practice with Classes": [
          "Creating a Second Class for our Program",
          "Wrapping Things Up",
          "Add a New Feature to the Program (Assignment)",
          "Answer: Adding a New Feature to the Program",
          "Code Improvement"
        ],
        "Setting up PyCharm for the Next Apps": [
          "Section Introduction",
          "Installing PyCharm on Windows",
          "Installing PyCharm on Mac",
          "Installing PyCharm on Linux",
          "How to Use PyCharm",
          "[IMPORTANT] File Resources and Python Libraries"
        ],
        "Inheritance in OOP": [
          "Problem Statement",
          "Investigating the Code",
          "Inheriting from the Rectangle Class",
          "Adding Methods to the Child Class",
          "Wrapping Things Up",
          "Inheriting from the Point Class",
          "Practice Inheritance"
        ],
        "Application 2️⃣ (Section 8-12): Flatmates' Bill Sharing": [
          "Welcome to Application 2"
        ],
        "Planning the Application in OOP Style": [
          "Installing the Libraries for App 2",
          "Preview of The Flatmates' Bill App",
          "Showcasing an App",
          "Planning the App",
          "Writing the Empty Classes",
          "Note"
        ],
        "Implementing the Application": [
          "Implementing the \"pays\" Method",
          "PyCharm Tip",
          "Generating a PDF Document",
          "Implementing the \"generate\" Method",
          "Polishing the Code",
          "Adding an Image to the PDF Document",
          "Changing the PDF Text Font",
          "Automatically View a PDF File"
        ]
      },
      "requirements": [
        "Students should already know Python basics that are variables, numbers, strings, lists, functions, conditionals, and loops."
      ],
      "description": "Are you ready to elevate your Python skills to the next level and become a proficient Python developer? Look no further! Our comprehensive course is designed to transform you into a Python pro by guiding you through the creation of 10 advanced Object-Oriented Programming (OOP) applications. As we code real-world programs, you will learn advanced Python concepts and also learn how to use professional software development tools and techniques such as Git, software design principles, code refactoring, advanced debugging, APIs, and much more.\nWhy Enroll in This Course?\nMaster OOP Concepts: Delve into the fundamentals of Object-Oriented Programming and understand how to create robust, modular, and scalable Python applications.\nHands-On Practice: Gain practical experience by building 10 real-world applications, starting with the Geometry Game and progressing to complex projects like the Flatmates' Bill Sharing, Math Painter, Webcam Photo Sharer, Flatmates' Bill Web App, Calories App, Automated Emails, Instant Dictionary Web App & API, and the Cinema Booking App.\nPyCharm Proficiency: Learn how to efficiently use the PyCharm IDE, setting up projects, and leveraging its powerful features for streamlined development.\nIn-Depth Application Development: Go beyond basics as you explore topics like inheritance, building user interfaces, web scraping, deploying applications, working with APIs, and databases, and even creating your own Python package.\nReal-World Deployment: Understand the process of deploying your applications, making them accessible to users globally, and handling feature requests and updates.\nProfessional Software Tools and Techniques: Learn how to use tools that professional developers use such Git, Figma, debuggers, etc., and learn software development techniques to write professional code such as software design principles, refactoring, writing organized code, etc.\nBonus Content: As a bonus, we've included an extra module on creating a Weather Forecast Package, providing you with a valuable skill set to develop and publish your Python libraries.\nWhat You'll Accomplish:\nBuild a Strong Foundation: Master Python from the ground up, learning essential concepts that will make you proficient in writing clean, efficient, and maintainable code.\nDevelop 10 Real-World Applications: Gain practical experience by building diverse applications, ensuring you can confidently tackle any programming challenge.\nUnderstand OOP Principles: Grasp advanced Object-Oriented Programming principles, enabling you to design and implement scalable and modular software solutions.\nBecome a Python Pro: Transform into a skilled Python developer, ready to take on complex projects and contribute to the world of software development.\nEnroll now and embark on a journey to becoming a Python expert! Whether you're a beginner looking to solidify your Python skills or an experienced developer aiming to enhance your proficiency, this course is tailored for you. Join us and unlock the full potential of Python development.",
      "target_audience": [
        "People who know Python basics already"
      ]
    },
    {
      "title": "Python OOP - Object Oriented Programming for Beginners",
      "url": "https://www.udemy.com/course/python-object-oriented-programming-oop/",
      "bio": "Learn Object Oriented Programming in Python with Step-by-Step Video Lectures, Projects, Exercises, Diagrams and More.",
      "objectives": [
        "The principles of Object Oriented Programming (OOP) using Python.",
        "How the elements of Object Oriented Programming work behind the scenes.",
        "Understand how classes work and how you can create instances from classes.",
        "Implement and call methods. Understand their purpose within classes.",
        "Define instance attributes and class attributes. Learn their differences.",
        "Use 'self' to refer to instances. Learn how it works behind the scenes.",
        "Work with inheritance to reuse code, improve design, and avoid repetition.",
        "Practice key aspects of OOP such as Docstrings and Special Methods."
      ],
      "course_content": {
        "Welcome to the Course: Python OOP Object Oriented Programming for Beginners": [
          "Welcome to the Course",
          "Key Information for Course Success",
          "PDF Resources: Progress Tracker, Notes, and Code Notebook",
          "A Warm Welcome: Introduce Yourself and Share Your Goals"
        ],
        "Introduction to Object Oriented Programming (OOP) and Key Concepts": [
          "Welcome to this Section | Introduction to Object-Oriented Programming (OOP)",
          "What is Object-Oriented Programming (OOP)?",
          "Advantages of Object Oriented Programming",
          "PDF Glossary and Important Acronyms",
          "Introduction to Object-Oriented Programming in Python",
          "Discussion Topic: Share your Thoughts"
        ],
        "Classes: The Blueprints of Object Oriented Programming (OOP)": [
          "Welcome to this Section | Introduction to Classes",
          "Downloadable Resources",
          "Introduction to Classes: The Building Blocks of OOP",
          "Python Class Naming Conventions",
          "How to Identify Classes in a Problem Description",
          "Classes in Python: Initial Syntax",
          "Example: Identify Classes in a Problem Description",
          "Learning Checkpoint: Classes",
          "Real-World Applications of Classes (Mini Project)",
          "Classes in Real-World Scenarios (Mini Project) - PDF Version for the Mobile App",
          "Discussion Topic: Share your Thoughts"
        ],
        "Instances and Instance Attributes: Use your Classes to Create Instances": [
          "Welcome to this Section | Instances and Instance Attributes",
          "Downloadable Resources",
          "Introduction to Instances and Instance Attributes",
          "Instance Attributes and __init__()",
          "Common __init__ Mistakes and How to Avoid Them",
          "Best Practices for Method Parameters",
          "Introduction to self",
          "Coding Session: Define Instance Attributes",
          "How to Create Instances",
          "Why skip 'self' when creating an instance?",
          "Learning Checkpoint: Instances",
          "Create an Instance in Python",
          "What is None?",
          "How to Access Instance Attributes",
          "Coding Session: Access Instance Attributes",
          "Default Arguments",
          "Best Practices for Default Arguments",
          "Iterating Over Sequences of Objects",
          "How to Update Instance Attributes",
          "Coding Session: Modify/Update Instance Attributes",
          "How to Delete an Instance Attribute",
          "Learning Checkpoint: Instance Attributes",
          "Bacteria and Instances (Practice)",
          "Bacteria and Instances (Practice) - PDF Version for the Mobile App",
          "Section Quiz | Check Your Knowledge",
          "Bakery: Fix the Classes (Mini Project)",
          "Bakery: Fix the Classes (Mini Project) - PDF Version for the Mobile App",
          "Discussion Topic: Share your Thoughts"
        ],
        "Class Attributes: Define Attributes Shared Across Instances": [
          "Welcome to this Section | Class Attributes",
          "Downloadable Resources",
          "Introduction to Class Attributes",
          "Class Attributes vs. Instance Attributes",
          "When to Use Class Attributes",
          "How to Define Class Attributes",
          "Coding Session: Define Class Attributes",
          "Learning Checkpoint: Class Attributes",
          "Class Attributes in Python",
          "How to Access Class Attributes",
          "Coding Session: Access Class Attributes",
          "Access a Class Attribute",
          "How to Modify Class Attributes",
          "Coding Session: Modify Class Attributes",
          "Modify a Class Attribute",
          "Section Quiz | Check Your Knowledge",
          "Employees and Class Attributes (Mini Project)",
          "Employees and Class Attributes (Mini Project) - PDF Version for the Mobile App",
          "Discussion Topic: Share your Thoughts"
        ],
        "Encapsulation and Abstraction: Key Principles of Object-Oriented Programming": [
          "Welcome to this Section | Encapsulation and Abstraction",
          "Downloadable Resources",
          "Introduction to Encapsulation",
          "Introduction to Abstraction",
          "Public vs. Non-Public Attributes in Python",
          "Coding Session 1: Public vs. Non-Public Attributes",
          "Coding Session 2: Public vs. Non-Public Attributes",
          "Helpful Resource on \"Private\" Variables",
          "Beyond Python: Access Modifiers in OOP",
          "Name Mangling",
          "Section Quiz | Check Your Knowledge",
          "Encapsulation and Abstraction (Mini Project)",
          "Encapsulation and Abstraction (Mini Project) - PDF Version for the Mobile App",
          "Discussion Topic: Share your Thoughts"
        ],
        "Properties, Getters, and Setters in Python | Learn to use @property": [
          "Welcome to this Section | Properties, Getters, and Setters",
          "Quick Tip: How to Leave or Update Your Review",
          "Downloadable Resources",
          "Introduction to Getters",
          "Introduction to Setters",
          "Coding Session 1: Getters and Setters",
          "Coding Session 2: Getters and Setters",
          "Getters and Setters",
          "How to use Properties | The Pythonic Way",
          "Coding Session: Properties",
          "Properties | Initial Syntax",
          "The @property Decorator",
          "What is a decorator?",
          "Coding Session: Using @property",
          "@property - The Three Methods",
          "Properties | @property",
          "Tips for Getters, Setters, and Deleters",
          "Section Quiz | Check Your Knowledge",
          "Add Properties to a Class (Mini Project)",
          "Add Properties to a Class (Mini Project) - PDF Version for the Mobile App",
          "Discussion Topic: Share your Thoughts"
        ],
        "Methods: Add Functionality to your Classes": [
          "Welcome to this Section | Methods",
          "Downloadable Resources",
          "Introduction to Methods in Python",
          "Coding Session: Methods",
          "Methods | Concept and Syntax",
          "Guidelines for Writing Method Names",
          "How to Call a Method",
          "Coding Session: How to Call a Method",
          "Alternative Syntax to Call a Method",
          "Non-Public Methods and Name Mangling",
          "How to Call a Method",
          "Calling a Method",
          "Default Arguments",
          "Coding Session: Default Arguments",
          "How to Call a Method from Another Method",
          "Coding Session: How to Call a Method from Another Method",
          "Returning a Value from a Method",
          "Define and Call a Method",
          "Method Chaining in Python",
          "Section Quiz | Check Your Knowledge",
          "Cash Register Methods (Mini Project)",
          "Cash Register Methods (Mini Project) - PDF Version for the Mobile App",
          "Discussion Topic: Share your Thoughts"
        ],
        "Project: Build a Dice Game with Python OOP": [
          "Welcome to this project: Dice Game",
          "Dice Game Description, Rules, and Logic",
          "New OOP Concept: Aggregation",
          "Aggregation vs. Composition",
          "Game Requirements and Object-Oriented Analysis",
          "Implementing the Die Class",
          "Implementing the Player Class",
          "Implementing the DiceGame Class (Part 1)",
          "Implementing the DiceGame Class (Part 2)",
          "Implementing Game Over",
          "Final Steps: Completing the Game",
          "Dice Game: Final Code",
          "Challenges to Practice your OOP Skills",
          "Discussion Topic: Share your Thoughts"
        ],
        "Objects in Memory: Learn How Objects Work Behind the Scenes": [
          "Welcome to this Section | Objects in Memory",
          "Downloadable Resources",
          "Python: Objects in Memory",
          "Object vs. Instance",
          "Built-in Data Types and Methods in Python",
          "The id() Function in Python",
          "Coding Session: the id() function",
          "The id() function",
          "Introduction to the \"is\" Operator",
          "Comparing Objects of User-Defined Classes with ==",
          "Coding Session: The \"is\" operator",
          "The \"is\" operator",
          "The \"is\" operator: Unexpected Results",
          "Different Output?",
          "Working with objects",
          "Let's Check that Objects are Passed by Reference",
          "Section Quiz | Check Your Knowledge",
          "Objects in Memory (Mini Project)",
          "Objects in Memory (Mini Project) - PDF Version for the Mobile App",
          "Discussion Topic: Share your Thoughts"
        ]
      },
      "requirements": [
        "Basic Python and programming knowledge (data types, variables, conditionals, loops, and functions).",
        "Basic knowledge of lists, tuples, and dictionaries is required to complete the mini projects.",
        "Python 3 and PyCharm, IDLE or any other Python IDE of your choice. PyCharm is used during the video lectures.",
        "Coding exercises can be submitted directly in the browser."
      ],
      "description": "Learn Object Oriented Programming (OOP) in Python with mini projects, hands-on practice, and carefully designed visual explanations. Understand how the elements and abstract concepts of OOP work behind the scenes. Apply your knowledge to new scenarios.\n\n\nObject Oriented Programming is Your Next Step Into the In-demand and Powerful World of Python\nCreate and work with classes and instances to write Python programs.\nUnderstand how they work behind the scenes.\nLearn when to use instance attributes vs. class attributes.\nImplement and call methods. Understand their purpose.\nTake advantage of the power of inheritance to avoid code repetition.\nUse key concepts like Docstrings and Special methods in your programs.\n\n\nStudent Reviews\nIt's a wonderful course! It's very methodical and detail. It helps you build a very strong foundation in OOP in python. Highly recommended for beginners. Xin Chu\nEven total noob will understand the OOP here :) Łukasz Bryzek\nI love how the instructor explains things in simple language and relates it to everyday life. I actually understand! I'm just at the beginning of the course and am excited about continuing. Donny Lobree\nI would strongly recommend this course if you are new to programming and want to master the basics of OOP. Demayne Collins\nThe learning sticks. The coverage of Python classes here, for me, has been better than how this topic has been covered in a couple of other Python classes I have from more well-established Python instructors. Hats of to the instructor for putting this together. Thomas P\nPerfect for persons without any clue in oop! Patrick Onegin\n\n\nCourse Updates\nThe course is frequently updated with new lectures, projects, and resources:\nMarch 2025 - NEW Updated PDF course handouts with refreshed content, examples, and style.\nNov 2024 - NEW Updated Unit 1, Quizzes (Sections 1-6), Coding Exercises (1-6), and Articles (Sections 1-6).\nOct 2023 - NEW Updated coding exercises.\nNov 2022 - NEW  New Mini Project (Cash Register Methods).\nNov 2022 - NEW  Updated quizzes and mini projects.\nNov 2022 - NEW  Updated quizzes with new questions and answers.\nNov 2022 - NEW  The special methods __iter__() and __next__().\nNov 2022 - NEW  Why cloned tuples have the same id.\nNov 2022 - NEW  How to delete an instance attribute.\nNov 2022 - NEW  How to iterate over instances.\nJuly 2022 - NEW New Project: Dice Game\nMay 2022 - NEW  Updated Section 1\nNov 2021 - NEW  Updated quizzes with detailed explanations for the answers.\nSept 2021 - NEW  Updated Tic-Tac-Toe Project (new lectures and code).\nJun 2021 - NEW Updated Python files and quizzes.\nJun 2021 - NEW  War Card Game Project.\nJun 2021 - NEW! Complete Course Update (New Lectures and Resources).\nApr 2021 - NEW! Final Project: Implementing a Data Structure with OOP (a Linked List).\nApr 2021 - NEW Q&A Featured Questions.\nApr 2021 - NEW  Downloadable PDF OOP Poster, notes format, and code format.\nNov 2020 - NEW  Tic-Tac-Toe Project.\nOct 2020 - NEW  Updated quizzes, mini projects, and first two sections.\nOct 2020 - NEW Badges to collect at the end of each section.\nOct 2020 - NEW Articles \"“What is None?” and \"Method Chaining\"\nOct 2020 - NEW Section quizzes.\nOct 2020 - NEW PDF study guide with questions to help you review.\nNov 2019 - NEW Complete course update with new video lectures and downloadable resources.\nSept 2019 - NEW Updated tips handout, content handout, and course wallpapers.\nSept 2019 - NEW Downloadable Python files for each section.\nSept 2019 - NEW PDF Handouts for each section.\nJuly 2019 - NEW Article \"Inheritance in Context\".\nJuly 2019 - NEW Solutions for the Coding Exercises.\nJuly 2019 - NEW New mini projects for each section.\n\n\nAdd New Python Skills To Your Resume\nPython is currently one of the most popular programming languages and its popularity continues rising every year. It is used for real-world applications in diverse areas such as Data Science, Game Development, Web Development, Machine Learning, Artificial Intelligence, and many more. Learning Object Oriented Programming in Python is your next step into the powerful world of computer science.\nObject Oriented Programming is key if you wish to expand your computer science skills and create maintainable and scalable programs. You will need to learn these concepts to implement data structures like trees, graphs, and linked lists. It's also key for game development, GUI programming, artificial intelligence, and many other areas. The concepts and techniques that you will learn in this course are easily transferable to other programming languages like Java, JavaScript, and many more.\n\n\nContent & Overview\nWith high-quality video lectures that include graphics and animations, you will learn and work with these concepts:\nClasses\nInstances\nInstance Attributes\nClass Attributes\nMethods\nThe 'self' parameter\nInheritance\nDocstrings\nSpecial Methods\nand more.\nYou will build a Tic-Tac-Toe game and a text-based version of the War Card Game following the principles of Object Oriented Programming.\n\n\nLearning Material & Resources\nThroughout the course, you will find these resources:\nVideo lectures: carefully designed graphics, animations, and explanations.\nDice Game: you will build an interactive dice game using the principles of Object-Oriented Programming.\nTic-Tac-Toe Game: you will build a working tic-tac-toe game using the principles of Object Oriented Programming.\nWar Card Game Project: you will create a text-based version of the War Card Game using the principles of Object Oriented Programming.\nFinal Project: you will implement a data structure in Python (a Linked List) with step-by-step explanations, practical exercises, and featured questions.\nMini Projects: you will apply your knowledge at the end of each section with mini projects.\nSolutions to the Mini Projects: each mini project has its corresponding solution.\nPDF Handouts: unique study guides with graphical summaries of the key aspects of each section.\nCoding Exercises: practice key concepts with the coding exercises.\nSolutions of the Coding Exercises: each coding exercise has its corresponding solution.\nQuizzes: check your knowledge interactively after each lecture with short quizzes that have unlimited attempts.\nPython Files: download the code used for each section as a compressed (.zip) file with individual python (.py) files.\nArticles: read complementary articles to expand your knowledge.\nCourse Poster: track your progress with a poster that you can cross out as you complete each section.\nCornell Notes Format: take notes with this PDF format and follow the Cornell Note-taking System.\nCode Notebook Format: download a PDF format to write your code manually if you prefer, and add your notes and comments.\nDiscussion Forums: ask questions on the discussion forums and discuss interesting topics with your peers.\n\n\nWhy is this course unique?\nThis course is unique because of its emphasis on providing visual and detailed explanations of how the elements of Object Oriented Programming (OOP) work behind the scenes, so you will not only learn how to use them in Python, you will actually understand what each line of code does behind the scenes.\nDuring the course, you will apply your knowledge by completing mini projects that simulate simplified real-world scenarios such as fixing classes in a bakery system, representing bacteria for educational software using instance attributes, implementing inheritance for a videogame, completing the system of a vending machine, and many more. Each mini project includes its corresponding solution.\nUnique study materials complement the course experience. You will find PDF handouts specifically designed for the course with a graphical summary of the key aspects of each section.\nYou will solve coding exercises directly on the browser and you will receive instant feedback for your submission.\nYou will check your knowledge with short Quizzes. The Quizzes provide instant feedback, so you can see the correct answer immediately. The quiz questions were designed to make you think more deeply about the topics presented.\nYou will receive a certificate of completion that you can add to your social media profiles to showcase your new skills.\nYou will also have lifetime access to the course and to all the new additions.\n\n\nYou are very welcome to watch the preview lectures and check out the full course curriculum.\nIf you are looking for an engaging, visual, and practical course, you've found it.\nAdd \"Object Oriented Programming in Python\" to your resume and showcase your new skills!",
      "target_audience": [
        "New developers who know the basics of Python and would like to expand their knowledge.",
        "Developers and Students who want to learn how to work with Object Oriented Programming.",
        "Self-taught developers who wish to dive into the world of Object Oriented Programming from the basics.",
        "Programmers who need to refresh their knowledge on this topic."
      ]
    },
    {
      "title": "Scala Applied, Part 3",
      "url": "https://www.udemy.com/course/stairway-to-scala-applied-part-3/",
      "bio": "Part 3 of Scala Applied, covering Scala's core libraries",
      "objectives": [
        "Use case classes to get lots of free, best practice functionality",
        "Contruct pattern matches like a Scala pro",
        "Create and use PartialFunctions",
        "Create, and manipulate Futures to avoid blocking and write reactive code",
        "Obtain an in-depth grounding in the Scala collections and examine the enormous potential and power in the collections API",
        "Know which collections to use in different circumstances to get desired performance",
        "Use Option types instead of nulls to virtually eliminate NullPointerExceptions",
        "Harness Java libraries effectively and safely, and even improve them in Scala",
        "Know how to mix Java and Scala on a project, if you need to",
        "Build your project using sbt",
        "Write custom tasks and settings in sbt"
      ],
      "course_content": {
        "Course Introduction and Exercises": [
          "Download the exercises for this course",
          "Download Slides and Exercises"
        ],
        "Module 12 - Pattern Matching": [
          "01 - Module 12 Introduction",
          "02 - Agenda",
          "03 - Simple Constant Patterns",
          "04 - match is an expression",
          "05 - Variable Loads",
          "06 - Binding vs Loading",
          "07 - Case Matters!",
          "08 - Case Matters Continued!",
          "09 - Guards",
          "10 - The Wrong Way to Guard",
          "11 - Matching Options",
          "12 - Matching Tuples",
          "13 - Matching Lists",
          "14 - Other Collections",
          "15 - Matching Try",
          "16 - Case Classes 1",
          "17 - Case Classes 2",
          "18 - Case Classes 3",
          "19 - Compound Pattern Matches",
          "20 - Typed Pattern Matches",
          "21 - Beware Type Erasure!",
          "22 - val and Pattern Matching",
          "23 - for and Pattern Matching",
          "24 - Partial Functions and Pattern Matches",
          "25 - Sealed Class Hierarchies",
          "26 - Extractors and unapply",
          "27 - Custom Extractors",
          "28 - Custom Seq Extractors",
          "29 - Module 12 Exercises",
          "Case Classes and Pattern Matching"
        ],
        "Module 13 - Lists": [
          "01 - Module 13 Introduction",
          "02 - Agenda",
          "03 - The Immutable Linked List",
          "04 - List Properties",
          "05 - Initializing Lists",
          "06 - Converting to Lists",
          "07 - List is Covariant",
          "08 - Constant Time Operations",
          "09 - Linear Time Operations",
          "10 - Operations that Depend on Position",
          "11 - Higher Order Functions",
          "12 - Predicate Based Functions",
          "13 - Folds",
          "14 - Fold Alternatives",
          "15 - Sorting",
          "16 - Even More Functions",
          "17 - And More",
          "18 - Permutations and Combinations",
          "19 - Indices, zip, unzip",
          "20 - Module 13 Exercises",
          "Working with Lists"
        ],
        "Module 14 - Collections": [
          "01 - Module 14 Introduction",
          "02 - Agenda",
          "03 - Other Collections",
          "04 - Sequences Performance",
          "05 - Sets and Maps Performance",
          "06 - LinearSeq vs IndexedSeq",
          "07 - mutable vs immutable",
          "08 - Consistent API",
          "09 - Easy Conversions",
          "10 - Other Sequences",
          "11 - The Mighty Vector",
          "12 - Vector (continued)",
          "13 - Immutable Sets",
          "14 - Sorted and Mutable Sets",
          "15 - Maps",
          "16 - Sorted and Mutable Maps",
          "17 - Key and Value Operations",
          "18 - Immutable Implementations",
          "19 - Mutable Implementations",
          "20 - Iterators",
          "21 - Views",
          "22 - Streams",
          "23 - Module 14 Exercises",
          "Collections"
        ],
        "Module 15 - Building Scala, SBT, Java Compatibility": [
          "01 - Module 15 Introduction",
          "02 - Agenda",
          "03 - Maven",
          "04 - Gradle",
          "05 - Other Options",
          "06 - SBT",
          "07 - Using SBT",
          "08 - SBT Project Source Layout",
          "09 - build.sbt",
          "10 - Example build.sbt",
          "11 - Example plugins.sbt",
          "12 - Making a Custom Setting",
          "13 - A Custom Task",
          "14 - Multiple Project Support",
          "15 - Mixing Scala and Java",
          "16 - Scala/Java Compile Cycle",
          "17 - Calling Java from Scala",
          "18 - Scala 2.12 and Java 8",
          "19 - Scala/Java Function Compatibility",
          "20 - Handling Nulls",
          "21 - Options to Nulls",
          "22 - Java -> Scala Collections",
          "23 - Boxed Types Trouble",
          "24 - Scala Traits and Java Interfaces",
          "25 - General Advice",
          "26 - Module 15 Exercises",
          "Build tools and integrating with Java"
        ],
        "Module 16 - Futures": [
          "01 - Module 16 Introduction",
          "02 - Agenda",
          "03 - Futures",
          "04 - Creating a Future",
          "05 - Some Initial Rules",
          "06 - Future States",
          "07 - Composing Futures",
          "08 - Futures with for",
          "09 - Async Evaluation",
          "10 - Forcing a Result",
          "11 - Other Future Operations",
          "12 - More Operations",
          "13 - Recovering from Failures",
          "14 - Dealing with Multiple Futures",
          "15 - Other Future Sequence Operations",
          "16 - Promises",
          "17 - A Broken Promise",
          "18 - Working with Java's Futures",
          "19 - Future Patterns - Batching",
          "20 - foldLeft and flatMap",
          "21 - Future Patterns - Retrying",
          "22 - Retrying (naive)",
          "23 - Retrying (loop)",
          "24 - Retrying with Back-off",
          "25 - Retrying with Back-off 2",
          "26 - Future Alternatives"
        ]
      },
      "requirements": [
        "Students should follow and complete the Stairway to Scala Setup Instructions, available for free on Udemy, before starting this course",
        "Students should have completed parts 1 and 2 of Stairway to Scala Applied, or have equivalent skills to having completed those two parts before starting this course",
        "Students will need a laptop or desktop computer with sufficient performance and resources to compile and run the coding exercises"
      ],
      "description": "Scala Applied, part 3 is the final part of this Scala programming language course. The course in its entirety is aimed at giving you a full, day-to-day working knowledge of Scala programming, including some of the most common core library APIs.\nThis part starts with a final language feature for Scala (continuing from the other language features covered in parts 1 and 2). Pattern matching, partial functions and case classes are examined, how they can be used together, and how partial functions can help you avoid certain runtime errors by validating input to a function before you call it.\nThen we delve into the collections API in the core libraries (a very in-depth 2 module examination of the capabilities and performance tradeoffs of the various collection options), and finish up with a look at using Scala on Java projects, using Java libraries from Scala and how to harness build tools (particularly SBT) to build your project and even write custom settings and tasks. Following that we look at the Futures API in the core libraries.\nThis course is also a good lead-in to the Stairway to Scala Advanced 3 part course which concentrates on in-depth language features, higher level functional abstractions, common patterns and idioms, type theory and other more advanced Scala concepts that will be particularly helpful for anyone writing their own libraries and APIs in Scala.",
      "target_audience": [
        "Anyone wanting to learn the Scala programming language",
        "This is part 3 of a 3 part course, please check you have skills equivalent to parts 1 and 2 before taking this course",
        "We do assume the student has some programming knowledge in a modern programming language other than Scala"
      ]
    },
    {
      "title": "Python for beginners - Learn all the basics of python",
      "url": "https://www.udemy.com/course/python-for-beginners-learn-all-the-basics-of-python/",
      "bio": "Learn how to program in python- python functions-python basic apps - python tips and tricks - Other Python features",
      "objectives": [
        "Learn how to use Python 3 the right way",
        "Understand complex functions in python",
        "Be able to use python on a daily basis",
        "Create your own basic programs with python",
        "Learn Different Tips and Trics to improve your programming skills",
        "Learn at your own rythm with different practical exercices at each course"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Why python",
          "Downloading and setting up python"
        ],
        "Let's start": [
          "Writing our first lines (hello world)",
          "Playing with the print function",
          "Using variables in python",
          "String manipulation",
          "Different number manipulation",
          "Understanding the input function on python",
          "Practice part 1",
          "Practice part 2"
        ],
        "Part 2": [
          "Adding comments on your project",
          "The utility of functions",
          "How to use the return statement",
          "Understanding the if statement Part 1",
          "Understanding the if statement Part 2",
          "Understanding the if statement Part 3",
          "Working with lists",
          "Using functions with lists",
          "Difference between lists and tuples",
          "What is a dictionnary in python",
          "Introduction to while loop structure",
          "Understanding For loops",
          "Practice : Creating and blocking passwords",
          "Practice: Testing combinations",
          "Creation of a basic encryption app",
          "Working with classes and objects",
          "Dealing with errors"
        ],
        "Conclusion": [
          "Conclusion",
          "Thank you",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "Having a computer",
        "Wanting to learn programming in python",
        "no experience required"
      ],
      "description": "Programming can sometimes be very hard to learn especially if you have no experience in this field. But, this course have everything that you need to be able to start your programming career or improve your programming skills by learning all the basis of python. If you :\n- Are in school and want to learn how to program in python\n- Need to learn this programming language for work\n- Want to start a personal project that requires you to have programming knowledge\n- simply want to learn a new skill\nThen you will love this course. Not only you will have by the end of the course a very solid base of this programming language but you will also be able create small and simple application right after the course.\n\n\nThe structure of the course\nThe way the course is made is really done to help you learn all the basics of this programming language. From installing your text editor to writing your first lines of code to create your small apps everything is structured to help you achieve your goal of learning how to program in python. This course is also teach many python functions and formulas and give a complete understanding of those. The goal is really to help you have a complete understanding of this programming language. Indeed, the hardest part is not to learn the language but to think like a programmer and this is exactly what this course is going to teach you.\nAlso, this course has been built on a concept of learning by practice. In other words, in each class you will learn the theory about every concept and then you will have a lot of practice to help you reach your full potential and give you a better understanding of the topic. This way, by practicing you will be able to write lines of code by yourself and understand the logic behind each command that you write down.\n\n\nFor who is this course designed\nThere are many python courses out there, but this one is different. Indeed, this python course will teach you by example all the basics of this programming language. Also, since this course is an introduction it can be great for people who have never worked with python before. Indeed, even if you never programmed in your life this course will give you a solid basis about how to properly work with python. The goal of this course is teaching you how to think like a programmer and create small and basics python projects.\nWhy should I take this course\nIf you want to learn programming then you should definitely take the course. Not only you will have created a lot of small apps by the end of it you will also have a very good knowledge of different python concepts. Also you will understand the logic behind this programming language as well as many of it's functions.\nThere is no risk involved in taking this course\nThis course comes with a 100% satisfaction guarantee, this means that if your are not happy with what you have learned, you have 30 days to get a complete refund with no questions asked. Also, if there is any concept that you find complicated or you are just not able to understand, you can directly contact me and it will be my pleasure to support you in your learning.\n\n\nThis means that you can either learn amazing skills that can be very useful in your professional or everyday life or you can simply try the course and if you don't like it for any reason ask for a refund.\nYou can't lose with this type of offer !!\nThis is why more than 125 000 students have already took the course !! Don't wait anymore\nENROL NOW and start learning today :)",
      "target_audience": [
        "People interested to learn how to program in python",
        "people curious about programming"
      ]
    },
    {
      "title": "Java: Multi-threading and Concurrency Simplified",
      "url": "https://www.udemy.com/course/java-multi-threading-by-sagar/",
      "bio": "Confidently transform single threaded code to multithreaded code, understand concurrent utils and much more..",
      "objectives": [
        "Understand Thread concepts - Designing, States, Priorities, Daemon Threads.",
        "Apply concurrency control techniques using synchronized blocks and locks.",
        "Understand the key components of java\\.util\\.concurrent package including Fork Join Framework",
        "Mock a simple HttpServer interaction",
        "Kick start thinking in distributed way"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Single Threaded vs Multi Threaded Apps",
          "Single Threaded App Example",
          "Notes - Single Threaded App Example",
          "True Parallelism vs Logical Parallelism",
          "Notes - True Parallelism vs Logical Parallelism"
        ],
        "Designing Multi-threaded applications": [
          "Designing Threads",
          "Designing Threads Explained",
          "Notes - Designing Threads",
          "Transform code to achieve parallelism",
          "Notes - Transform code to achieve parallelism",
          "Executor Service",
          "Notes - Executor Service",
          "Stopping Thread in the middle",
          "Notes - Stopping Thread in the middle",
          "Thread States",
          "Notes - Thread States",
          "Thread Priorities",
          "Notes - Thread Priorities",
          "Internal System Threads and ThreadGroup",
          "Notes - Internal System Threads and ThreadGroup",
          "Daemon Threads",
          "Notes - Daemon Threads",
          "Callable Task",
          "Notes - Callable Task",
          "Pattern search in folder - Serial approach",
          "Pattern search in folder - Parallel approach",
          "Notes - Pattern Search in folder",
          "Problem Set - 1",
          "Problem Set - 1 - Solution"
        ],
        "Concurrency Control": [
          "Need for Synchronization",
          "Synchronized methods",
          "Synchronized in case of static members",
          "The Problem with Synchronized Method and Solution with Synchronized Block",
          "Notes - Thread Synchronization",
          "Deadlocks and solution with lock sequencing",
          "Notes - Deadlocks and solution with lock sequencing",
          "Reentrant Locks",
          "Notes - Reentrant Locks",
          "Problem Set - 2",
          "Problem Set - 2 - Solution",
          "Thread Signaling Using wait and notify",
          "Producer and Consumer Problem",
          "Notes - Producer and Consumer Problem"
        ],
        "Mock HttpServer and ThreadLocal Pattern": [
          "HTTP and Mock multi-threaded HTTP Server",
          "ThreadLocal",
          "Notes - ThreadLocal"
        ],
        "java.util.concurrent package": [
          "BlockingQueue and revised producer and consumer problem",
          "Notes - BlockingQueue and revised producer and consumer problem",
          "PriorityBlockingQueue",
          "Notes - PriorityBlockingQueue",
          "Fork Join Framework",
          "Notes - Fork Join Framework",
          "Semaphore",
          "CountDownLatch",
          "CyclicBarrier",
          "Atomic Types (AtomicInteger, AtomicBoolean....)"
        ],
        "Kick Start Thinking Distributed": [
          "Scale up using Queues",
          "Heads up about Distributed Locks"
        ],
        "Source Code": [
          "Source Code for download"
        ],
        "What's next?": [
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "You should possess the basic knowledge in Object oriented programming in Java."
      ],
      "description": "Multi threading in Java is the most essential feature that each and every Java developer should understand and be able to confidently apply it in solving complex programming problems where concurrent execution is a must. With parallel processing there comes a risk, i.e. shared mutability and the ability of the developer to solve concurrency problems.\nThanks to the Java programming language that it makes the mighty multi-threaded application development a cake walk, if you assimilate few keys or core concepts you will be able to confidently design multi threaded applications with ease.\nTo design multi threaded applications developers need to look at it through a different perspective i.e. change the thinking from serial to parallel and it requires some effort. Keeping this in mind this course contains the essential lectures which can guide you in this regard.\nThis course was designed keeping the above points in mind and will help you understand these complex problems through simplified and easy to understand examples.\nCourse contents include\nUnderstanding Threads, Priorities, States, Daemon Threads.\nThread synchronization using synchronized blocks and locks.\nKey components of java.util.concurrent package including ForkJoinPool and ForkJoinTask(s).\nMock HttpServer to explain how HTTP works and simulate how a typical web server responds to the client requests.\nThreadLocal\nIntroduction to distributed locks\nAn overview of how to build scalable applications using Messaging Queues.\nIntroduction to Lambdas and Streams (Coming up)",
      "target_audience": [
        "Any one who is looking to add Multithreading and concurrency to their skill set along with Java"
      ]
    },
    {
      "title": "NodeJS - The Complete Guide (MVC, REST APIs, GraphQL, Deno)",
      "url": "https://www.udemy.com/course/nodejs-the-complete-guide/",
      "bio": "Master Node JS & Deno.js, build REST APIs with Node.js, GraphQL APIs, add Authentication, use MongoDB, SQL & much more!",
      "objectives": [
        "Work with one of the most in-demand web development programming languages",
        "Learn the basics as well as advanced concepts of NodeJS in great detail",
        "Build modern, fast and scalable server-side web applications with NodeJS, databases like SQL or MongoDB and more",
        "Understand the NodeJS ecosystem and build server-side rendered apps, REST APIs and GraphQL APIs",
        "Get a thorough introduction to DenoJS"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "What is Node.js?",
          "Join our Online Learning Community",
          "Installing Node.js and Creating our First App",
          "Understanding the Role & Usage of Node.js",
          "Course Outline",
          "How To Get The Most Out Of The Course",
          "Course Setup",
          "Working with the REPL vs Using Files",
          "Using the Attached Source Code"
        ],
        "Optional: JavaScript - A Quick Refresher": [
          "Module Introduction",
          "JavaScript in a Nutshell",
          "Refreshing the Core Syntax",
          "let & const",
          "Understanding Arrow Functions",
          "Working with Objects, Properties & Methods",
          "Arrays & Array Methods",
          "Arrays, Objects & Reference Types",
          "Understanding Spread & Rest Operators",
          "Destructuring",
          "Async Code & Promises",
          "Template Literals",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Understanding the Basics": [
          "Module Introduction",
          "How The Web Works",
          "Creating a Node Server",
          "The Node Lifecycle & Event Loop",
          "Controlling the Node.js Process",
          "Understanding Requests",
          "Sending Responses",
          "Request & Response Headers",
          "Routing Requests",
          "Redirecting Requests",
          "Parsing Request Bodies",
          "Understanding Event Driven Code Execution",
          "Blocking and Non-Blocking Code",
          "Node.js - Looking Behind the Scenes",
          "Using the Node Modules System",
          "Wrap Up",
          "Time to Practice - The Basics",
          "Useful Resources & Links"
        ],
        "Improved Development Workflow and Debugging": [
          "Module Introduction",
          "Understanding NPM Scripts",
          "Installing 3rd Party Packages",
          "Global Features vs Core Modules vs Third-Party Modules",
          "Using Nodemon for Autorestarts",
          "Global & Local npm Packages",
          "Understanding different Error Types",
          "Finding & Fixing Syntax Errors",
          "Dealing with Runtime Errors",
          "Logical Errors",
          "Using the Debugger",
          "Restarting the Debugger Automatically After Editing our App",
          "Debugging Node.js in Visual Studio Code",
          "Changing Variables in the Debug Console",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Working with Express.js": [
          "Module Introduction",
          "What is Express.js?",
          "Installing Express.js",
          "Adding Middleware",
          "How Middleware Works",
          "Express.js - Looking Behind the Scenes",
          "Handling Different Routes",
          "Time to Practice - Express.js",
          "Parsing Incoming Requests",
          "Limiting Middleware Execution to POST Requests",
          "Using Express Router",
          "Adding a 404 Error Page",
          "Filtering Paths",
          "Creating HTML Pages",
          "Serving HTML Pages",
          "Returning a 404 Page",
          "A Hint!",
          "Using a Helper Function for Navigation",
          "Styling our Pages",
          "Serving Files Statically",
          "Time to Practice - Navigation",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Working with Dynamic Content & Adding Templating Engines": [
          "Module Introduction",
          "Sharing Data Across Requests & Users",
          "Templating Engines - An Overview",
          "Installing & Implementing Pug",
          "Outputting Dynamic Content",
          "Official Pug Docs",
          "Converting HTML Files to Pug",
          "Adding a Layout",
          "Finishing the Pug Template",
          "Avoiding an Error",
          "Working with Handlebars",
          "Converting our Project to Handlebars",
          "Adding the Layout to Handlebars",
          "Working with EJS",
          "Working on the Layout with Partials",
          "Wrap Up",
          "Time to Practice - Templating Engines",
          "[OPTIONAL] Assignment Solution",
          "Useful Resources & Links"
        ],
        "The Model View Controller (MVC)": [
          "Module Introduction",
          "What is the MVC?",
          "Adding Controllers",
          "Finishing the Controllers",
          "Adding a Product Model",
          "Storing Data in Files Via the Model",
          "Fetching Data from Files Via the Model",
          "Refactoring the File Storage Code",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "Optional: Enhancing the App": [
          "Module Introduction",
          "Creating the Shop Structure",
          "Working on the Navigation",
          "Registering the Routes",
          "Storing Product Data",
          "Displaying Product Data",
          "Editing & Deleting Products",
          "Adding Another Item",
          "Useful Resources & Links"
        ],
        "Dynamic Routes & Advanced Models": [
          "Module Introduction",
          "Preparations",
          "Applied Changes",
          "Adding the Product ID to the Path",
          "Extracting Dynamic Params",
          "Loading Product Detail Data",
          "Rendering the Product Detail View",
          "Passing Data with POST Requests",
          "Adding a Cart Model",
          "Using Query Params",
          "Pre-Populating the Edit Product Page with Data",
          "Linking to the Edit Page",
          "Editing the Product Data",
          "Adding the Product-Delete Functionality",
          "Deleting Cart Items",
          "Displaying Cart Items on the Cart Page",
          "Deleting Cart Items",
          "Fixing a Delete Product Bug",
          "Wrap Up",
          "Useful Resources & Links"
        ],
        "SQL Introduction": [
          "Module Introduction",
          "Choosing a Database",
          "NoSQL Introduction",
          "Comparing SQL and NoSQL",
          "Setting Up MySQL",
          "Connecting our App to the SQL Database",
          "Basic SQL & Creating a Table",
          "Retrieving Data",
          "Fetching Products",
          "Fetching Products - Time to Practice",
          "Inserting Data Into the Database",
          "Fetching a Single Product with the \"where\" Condition",
          "Wrap Up",
          "Useful Resources & Links"
        ]
      },
      "requirements": [
        "General knowledge of how the web works is recommended but not a must-have",
        "Basic JavaScript knowledge is strongly recommended but could be picked up whilst going through the course",
        "NO NodeJS knowledge is required!"
      ],
      "description": "Join the most comprehensive Node.js course on Udemy and learn Node in both a practical and a theory-based way!\n-\nNode.js is probably THE most popular and modern server-side programming language you can learn these days!\nNode.js developers are in high demand and the language is used for everything from traditional web apps with server-side rendered views over REST APIs all the way up to GraphQL APIs and real-time web services. Not to mention its applications in build workflows for projects of all sizes.\nThis course will teach you all of that! From scratch with zero prior knowledge assumed. Though if you do bring some knowledge, you'll of course be able to quickly jump into the course modules that are most interesting to you.\nHere's what you'll learn in this course:\nNode.js Basics & Basic Core Modules\nParsing Requests & Sending Responses\nRendering HTML Dynamically (on the Server)\nUsing Express.js\nWorking with Files and generating PDFs on the Server (on-the-fly)\nFile Up- and Download\nUsing the Model-View-Controller (MVC) Pattern\nUsing Node.js with SQL (MySQL) and Sequelize\nUsing Node.js with NoSQL (MongoDB) and Mongoose\nWorking with Sessions & Cookies\nUser Authentication and Authorization\nSending E-Mails\nValidating User Input\nData Pagination\nHandling Payments with Stripe.js\nBuilding REST APIs\nAuthentication in REST APIs\nFile Upload in REST APIs\nBuilding GraphQL APIs\nAuthentication in GraphQL APIs\nFile Upload in GraphQL APIs\nBuilding a Realtime Node.js App with Websockets\nAutomated Testing (Unit Tests)\nDeploying a Node.js Application\nUsing TypeScript with Node.js\nExploring Deno.js\nAnd Way More!\nDoes this look like a lot of content? It certainly is!\nThis is not a short course but it is the \"Complete Guide\" on Node.js after all. We'll dive into a lot of topics and we'll not just scratch the surface.\nWe'll also not just walk through boring theory and some slides. Instead, we'll build two major projects: An online shop (including checkout + payments) and a blog.\nAll topics and features of the course will be shown and used in these projects and you'll therefore learn about them in a realistic environment.\n\n\nIs this course for you?\nIf you got no Node.js experience, you'll love this course because it starts with zero knowledge assumed. It's the perfect course to become a Node.js developer.\nIf you got basic Node.js experience, this course is also a perfect match because you can go through the basic modules quickly and you'll benefit from all the deep dives and advanced topics the course covers.\nAre you an advanced Node.js user? Check the curriculum then. Maybe you found no other course that shows how to use SQL with Node.js. Or you're interested in GraphQL. Chances are, that you'll get a lot of value out of this course, too!\n\n\nPrerequisites\nNO Node.js knowledge is required at all!\nNO other programming language knowledge (besides JavaScript, see next point) is required\nBasic JavaScript knowledge is assumed though - you should at least be willing to pick it up whilst going through the course. A JS refresher module exists to bring you up to the latest syntax quickly\nBasic HTML + CSS knowledge helps but is NOT required",
      "target_audience": [
        "Beginner or advanced web developers who want to dive into backend (server-side) development with NodeJS",
        "Everyone who's interested in building modern, scalable and high-performing web applications",
        "Experienced NodeJS developers who want to dive into specific features like using GraphQL with NodeJS"
      ]
    },
    {
      "title": "JDBC Servlets and JSP - Java Web Development Fundamentals",
      "url": "https://www.udemy.com/course/jdbcservletsandjsp/",
      "bio": "Create Java Web Applications from scratch in easy steps",
      "objectives": [
        "Develop Dynamic Web Applications",
        "Learn the fundamentals of JDBC and using the different interfaces in the JDBC API",
        "Learn , Create and Deploy Servlets",
        "Initialize parameters dynamically",
        "Learn how to manage sessions",
        "Understand how JSPs can help to separate Web logic and functionality from page layout",
        "Learn the meaning and importance of MVC",
        "Explore how to make JSPs smaller and more powerful with JSTL, custom tags",
        "Understand and Implement Connections Pooling",
        "Secure you web application",
        "Learn how to manage sessions"
      ],
      "course_content": {
        "Introduction": [
          "Instructor and Course Introduction",
          "Private Course Feedback Link",
          "How to make the best of this course",
          "Full Stack Developer Learning Path",
          "Downloading the completed projects",
          "Slides used in the course"
        ],
        "Software Setup": [
          "Update",
          "Installing Java",
          "Installing Eclipse",
          "Configuring JDK In Eclipse",
          "Installing Tomcat",
          "Configuring Tomcat in Eclipse",
          "Windows Only -Install Mysql",
          "Windows Only - Install Mysql Workbench",
          "MAC - Downloading MySql and MySql workbench",
          "MAC - Using MySql Workbench"
        ],
        "Web Application Basics": [
          "Web Application Basics",
          "Static vs Dynamic Web Applications",
          "Server Side Programming",
          "Static And Dynamic Web Applications"
        ],
        "Servlets Basics": [
          "Introduction",
          "Servlet Life Cycle Methods and Phases",
          "Web Application Folder Structure",
          "Servlets Introduction",
          "Servlet Annotations",
          "Update",
          "Hello World Servlet Project Creation",
          "Code the Servlet",
          "Register the Servlet",
          "UPDATE",
          "Application Flow",
          "The Addition Use Case",
          "Create the Servlet",
          "Register the Servlet",
          "Addition Application Flow",
          "Servlets"
        ],
        "JDBC Basic Concepts": [
          "Introduction",
          "JDBC Architecture Introduction",
          "JDBC API",
          "JDBC Drivers",
          "JDBC Client",
          "DriverManager",
          "JDBC Architecture Summary",
          "JDBC Basics"
        ],
        "JDBC In Action": [
          "Introduction",
          "Create the Account Table",
          "Steps to perform CRUD Operations",
          "JDBC Project Creation",
          "Configure the Driver Jar",
          "Troubleshooting",
          "Troubleshooting 2",
          "Troubleshooting 3",
          "Connect to the Database",
          "Connection String",
          "JDBC Statement",
          "Create an Account",
          "Update the balance",
          "Delete the Account",
          "JDBC Steps To Read Data",
          "JDBC ResultSet",
          "Reading the Accounts",
          "Navigating the ResultSet",
          "Clean up JDBC Resources",
          "The Service Provider Mechanism",
          "JDBC In Action"
        ],
        "Building Dynamic Web Applications": [
          "Introduction",
          "GET VS POST",
          "User Application Use Case",
          "Adding the mysql driver jar",
          "Create the User Table",
          "Create the User Servlet",
          "Implement the init and destroy methods",
          "Load the mysql jdbc driver class",
          "Implement the doPost method",
          "Create User Update Servlet",
          "Create the Read User Servlet",
          "Create Static HTML",
          "Create Dynamic HTML",
          "Read User Servlet Flow",
          "Delete User Assignment",
          "Delete User Assignment",
          "Building Dynamic Web Applications"
        ],
        "Init Parameters": [
          "Servlet Init Params Introduction",
          "Configuring Init Params using Annotations",
          "Use annotated init params",
          "Annotated Init Params in action",
          "Configure using web xml",
          "Use init params from web xml",
          "Init Parameters"
        ],
        "Servlet Context": [
          "Introduction",
          "Uses of ServletContext",
          "Context Parameters",
          "Configuring Context Parameters",
          "Using Context Parameters in the code",
          "Context Parameters in Action",
          "Context Parameters Assignment",
          "Context Parameters Assignment Solution",
          "ServletContext"
        ],
        "Prepared Statement": [
          "PreparedStatement",
          "Create the Product Table",
          "Create the Project",
          "Implement the init and destroy methods",
          "Add JDBC Driver Jar",
          "Implement the doPost Method",
          "PreparedStatement Assignment",
          "PreparedStatement Assignment Solution",
          "PreparedStatement"
        ]
      },
      "requirements": [
        "Basic Knowledge of Core Java is required",
        "An understanding of Web technologies like HTML and HTTP is helpful"
      ],
      "description": "Sample of the reviews:\nhighly recommended, usually the courses of Professor Bharath are characterized by their extensive explanation in the examples which he himself is writing the code and explaining in detail, you will learn a lot about this subject and enjoy it if you are passionate about Spring and its related topics - Edilberto Ramos Salinas\nVery Simple and easy to follow , helpful to learn about web application - chandrachood Raveendran\nA good, concise and enlightening course to introduce you to the basics and principals of Spring JPA and Hibernate. - Jack Richter\n---\nAll source code is available for download\nResponsive Instructor - All questions answered within 24 hours\nProfessional video and audio recordings (check the free previews)\n----\nFrom the top Java Web Services Course Instructor on UDemy!!!\nCovers Servlet 3.1 and JDBC 4\nThe course builds a strong understanding of JDBC Technology. It gives in to demonstrate why Servlets are the cornerstone of Java’s Web platform. It then shows how JSP is built on the Servlet architecture. Additionally, the class shows students how to use JSTL, custom tags and expression language to reduce Java code in Web pages while adding tremendous power and capability to those pages.\nThis is not a class that focuses on theory. Participants will find the course is loaded with practical labs and simulations. After taking this class, developers will be able to build Web applications that perform well, are scalable, and that are easier to maintain.\nJDBC,Servlets and JSP Course Prerequisite:\n\nBasic Knowledge of Core Java is required. An understanding of Web technologies like HTML and HTTP is helpful.\nJDBC,Servlets and JSP Course Objective\n\nLearn the fundamentals of JDBC and using the different interfaces in the JDBC API. Learn how to use Java servlets in the role of Web application control. Identify the options to state management in a Java Web application and understand the pros/cons of each. Understand how JSPs can help to separate Web logic and functionality from page layout.  Learn the meaning and importance of MVC",
      "target_audience": [
        "Students with java background",
        "Any one interested in learning the fundamentals of Java Database and Web Development"
      ]
    },
    {
      "title": "Python 3: Fundamentals",
      "url": "https://www.udemy.com/course/python3-fundamentals/",
      "bio": "Learn Python the right way!",
      "objectives": [
        "Learn Python fundamentals",
        "Basic to advanced data types",
        "Functional and Object Oriented programming",
        "Closures and decorators",
        "Datetime and timezone handling",
        "Reading and writing text, CSV and JSON files",
        "Making REST API requests",
        "Fundamentals of NumPy",
        "Fundamentals of Pandas",
        "Fundamentals of Matplotlib"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "(Optional - Skip if you know this) Windows Command Prompt: Primer"
        ],
        "Running Python": [
          "Introduction",
          "What is Python?",
          "Installing Python",
          "Installation - Mac",
          "Installation - Windows",
          "Using the Windows Python Launcher",
          "Course Materials (Jupyter Notebooks)",
          "Course Materials (Slides)",
          "Virtual Environments - What? Why? How? Overview",
          "Virtual Environments",
          "Creating Virtual Environments - Mac & Linux",
          "Creating Virtual Environments - Windows",
          "Installing Packages - Lecture",
          "Installing Packages - Coding",
          "Running Python - Lecture",
          "Running Python - Coding"
        ],
        "Python Basics": [
          "Introduction - Python Basics",
          "Basic Data Types - Lecture",
          "Basic Data Types - Coding",
          "Objects - Lecture",
          "Objects - Coding",
          "Variables - Lecture",
          "Variables - Coding",
          "Arithmetic Operators - Lecture",
          "Arithmetic Operators - Coding",
          "Operator Precedence - Lecture",
          "Operator Precedence - Coding",
          "Integer Division and Modulus - Lecture",
          "Integer Division and Modulus - Coding",
          "Comparison Operators - Lecture",
          "Comparison Operators - Coding",
          "Boolean Operators - Lecture",
          "Boolean Operators - Coding",
          "Exercises"
        ],
        "Conditional Execution": [
          "Introduction - Conditional Execution",
          "if...else... - Lecture",
          "if...else... - Coding",
          "elif - Lecture",
          "elif - Coding",
          "Ternary Conditional Operator - Lecture",
          "Ternary Conditional Operator - Coding",
          "Exercises"
        ],
        "Sequence Types": [
          "Introduction - Sequence Types",
          "Lists - Lecture",
          "Lists - Coding",
          "Tuples - Lecture",
          "Tuples - Coding",
          "Strings - Lecture",
          "Strings - Coding",
          "Slicing - Lecture",
          "Slicing - Coding",
          "Manipulating Sequences - Lecture",
          "Manipulating Sequences - Coding",
          "Copying Sequences - Lecture",
          "Copying Sequences - Coding",
          "Unpacking Sequences - Lecture",
          "Unpacking Sequences - Coding",
          "Exercises"
        ],
        "Strings": [
          "Introduction - Strings",
          "Unicode - Lecture",
          "Unicode - Coding",
          "Common String Methods - Lecture",
          "Common String Methods - Coding",
          "String Interpolation - Lecture",
          "String Interpolation - Coding",
          "Exercises"
        ],
        "Iteration": [
          "Introduction - Iteration",
          "The range Function - Lecture",
          "The range Function - Coding",
          "For Loops - Lecture",
          "For loops - Coding",
          "While Loops - Lecture",
          "While Loops - Coding",
          "Continue, Break and Else - Lecture",
          "Continue, Break and Else - Coding",
          "Exercises"
        ],
        "Dictionaries": [
          "Introduction - Dictionaries",
          "Associative Arrays and Dictionaries - Lecture",
          "Associative Arrays and Dictionaries - Coding",
          "Iterating Dictionaries - Lecture",
          "Iterating Dictionaries - Coding",
          "Working with Dictionaries - Lecture",
          "Working with Dictionaries - Coding",
          "Exercises"
        ],
        "Sets": [
          "Introduction - Sets",
          "Python Sets - Lecture",
          "Python Sets - Coding",
          "Common Set Operations - Lecture",
          "Common Set Operations - Coding",
          "Exercises"
        ],
        "Comprehensions": [
          "Introduction - Comprehensions",
          "List Comprehensions - Lecture",
          "List Comprehensions - Coding",
          "Dictionary and Set Comprehensions - Lecture",
          "Dictionary and Set Comprehensions - Coding",
          "Exercises"
        ]
      },
      "requirements": [
        "No prior Python knowledge required",
        "Prior experience solving problems \"algorithmically\" would be beneficial",
        "You should know how to install applications on your computer",
        "VERY IMPORTANT: You must have basic knowledge of how to use the command prompt (Windows) or terminal (Mac/Linux) - we use it to install and run Python and Jupyter Notebooks",
        "Basic Math"
      ],
      "description": "This Course in a Nutshell\nAimed at beginner Python developers, this course will provide you a fundamental understanding of how to program in Python. Your journey will take you from a total Python beginner to an intermediate level Python developer more than ready to tackle your own professional projects.\n\n\nAlthough not technically required, limited prior experience in any coding language, and a basic understanding of concepts such as looping, branching, etc will prove useful.\n\n\nThis course will provide you the solid foundation you will need to continue moving forward in your Python development endeavors. This course is not a \"here's how I do it, just type along please\" type of course - its goal is to make you understand each and every line of code we are going to write together, why we write it and why it works, giving you the knowledge to apply the same coding techniques to your own situation and problems.\n\nLike any good college level course, this course is fairly lengthy and will require time, not only for watching the videos, but also working on your own to explore the various topics, trying things out, and at the end of each section working on increasingly complex problems. It takes a certain amount of time to master a programming language, and this course is no exception. If you are looking for a quick and superficial intro to Python, then this course is probably not for you.\n\n\nVERY IMPORTANT: Before attempting this course you must have a basic knowledge of how to use the DOS prompt (Windows) or shell (Linux/Mac). This means how to open a prompt/shell on your computer, navigating the file structure using cd, creating and deleting directories, copying files/directories from one location to another, listing files in the current directory, etc. There are plenty of 20-30 minute tutorials available online that will teach you those simple basics.\n\n\nCourse Overview\nThis course balances theory and coding practice. Most subjects are two-part: a theory (or lecture) video where we cover a specific topic, explain how things work, followed by a practice (or coding) video which takes the lecture material and applies it using real code. I highly encourage you to take notes during the lectures, and code along with me during the coding videos - that's the beauty of online videos - you can pause, rewind, speed up, slow down as you need!\n\n\nAll the course slides (over 900 of them!) are available for download if you prefer that approach over taking your own notes - however I recommend you take your own notes, preferably after watching the corresponding code video - you'll remember things better that way!\n\n\nWe use Jupyter notebooks as the perfect tool for teaching and learning Python.\nJupyter notebooks support both Python code as well as interspersed markdown documentation. You will find that every code video in this course has a corresponding Jupyter notebook available in the course downloads, that not only reproduces all the code we do in the coding videos, but is fully annotated with explanations of the code, basically what I cover in the coding videos, and sometimes more!\n\n\nAll the notebooks and the data files we will work with, are available in the course downloads in the first section of this course as well as in GitHub.\n\n\nAt the end of each section, you will find a set of exercises with solutions. It is imperative that you work through these exercises, and only move on to the next section once you are able to do these exercises on your own. Each section of this course builds on top of the previous one!\n\n\nThe course is broadly broken down into three main parts:\n\n\nPython Basics\nWhat is Python\nHow to install Python\nHow to create and use virtual environments\nHow to run Python and Jupyter notebooks\nBasic data types including integers, floats, booleans\nBoolean operators\nArithmetic and comparison operators, as well as operator precedence\nConditional execution\nLooping (for and while)\nSequence types such as lists, tuples and strings\nWorking with sequence types (iterating, slicing, manipulating, copying, unpacking)\nMore on strings and Unicode\nDictionaries and sets\nPython's list, dictionary and set comprehensions\nExceptions and exception handling\nIterables and iterators, including generators\nWriting user defined functions and different ways of defining and passing arguments\nLambda functions\nSome of Python's built-in functions (such as zip, sorted, min, max, and round)\nIntermediate Python\nHigher order functions (passing and returning functions from functions)\nMaps (dictionaries)\nClosures\nAdvanced sorting and filtering\nDecorators - what they are, and how to write your own\nReading and writing text files\nPython's module and import system\nHow to work with dates and times\nHow to read and write CSV files\nRandom numbers and sampling\nA look at Python Math and Stats modules\nDecimal data type - for when floats aren't precise enough\nHow to write your own custom Classes (OOP)\n3rd Party Libraries\nthe pytz library for dealing with timezones and daylight savings\nthe dateutil library for parsing date/time strings\nWhat is JSON data, and how to read and write JSON\nWhat are REST APIs\nHow to use the requests library for HTTP/s requests (and how to interact with a REST API)\nFundamentals of the NumPy library for fast numerical computations\nFundamentals of the Pandas library for working with data sets (including indexing)\nFundamentals of the matplotlib library for charting data",
      "target_audience": [
        "Beginners who want to learn Python like a software engineer",
        "Students who want to gain a solid fundamental understanding of the Python language and ecosystem",
        "Software engineers with knowledge of other languages, but new to Python",
        "Not intended for students looking for a \"quick and light\" introduction to Python"
      ]
    },
    {
      "title": "Python Developer | Complete course",
      "url": "https://www.udemy.com/course/python-developer-complete-course/",
      "bio": "Learn programming by starting from zero, and create powerful projects with Python : Web, Mobile, Games, Desktop",
      "objectives": [
        "Learn programming by starting from the very beginning",
        "Get solid programming skills in Python",
        "Exploit all the power of Python through several projects",
        "Quickly learn the Web development from scratch : HTML & CSS",
        "Learn to create Full-Stack web applications with DJango",
        "Create you own professional website to show your new skills and portfolio",
        "Learn to create Mobile iOS and Android applications",
        "Learn how to create desktop applications with a user interface (Windows and Mac)",
        "Know how to develop any kind of project with Python",
        "Develop powerful and optimised algorithms",
        "Share the same source code do develop on every platform : Windows, Mac, iOS, Android"
      ],
      "course_content": {
        "Introduction": [
          "Your welcome gifts"
        ],
        "Installation": [
          "Python install (PC/MAC)",
          "Pycharm install (PC/MAC)",
          "Visual Studio Code install (PC/MAC)"
        ],
        "[1 - LEARN PROGRAMMING]": [
          "PART 1 : LEARN PROGRAMMING"
        ],
        "Python fundamentals - Level 1": [
          "Learn the basics and create your very first program",
          "How programming works ?",
          "First program",
          "« Name » variable",
          "Tip : How to be organised ?",
          "Ask the user for data",
          "Exercise : What is your age ?",
          "Tip : Graphical interface",
          "Comments",
          "Numeric variable",
          "Convert a string to a number",
          "Errors and exceptions management",
          "Tip : Cheat Sheet",
          "« While » loop",
          "Improve our program : Loop",
          "Use the debugger",
          "Exercise : Force the user to enter a name",
          "Tip : How long to become a developer ?",
          "Improve our program : Function",
          "Exercise : « Ask name » function",
          "Global variable and parameter",
          "Exercise : « display » function",
          "Conditions and « boolean » variable",
          "« elif » condition",
          "Exercise : Conditions",
          "« and / or » conditions",
          "Tip : Your feedback",
          "The « for » loop",
          "Floating numbers and optional parameter",
          "Formatted strings",
          "Synthesis and ideas"
        ],
        "Visual approach - Level 1": [
          "Learn Python with a visual approach",
          "Project creation",
          "Move the turtle",
          "Exercise : create a staircase",
          "Exercise : Draw a square",
          "Exercise : Multiple squares"
        ],
        "Project : \"The magic number\"": [
          "Beginner level project : The magic number",
          "Project creation",
          "Exercise : Ask for a number",
          "Exercise : Condition",
          "Exercise : Loop",
          "Exercise : Manage the invalid entry",
          "Min / max error case",
          "Random number",
          "Limit the number of lives : while loop",
          "Limit the number of lives : for loop"
        ],
        "Project : \"The maths game\"": [
          "Beginner level project : The maths game",
          "Project creation",
          "Exercise : Addition",
          "Exercise : Multiple questions",
          "Exercise : Points",
          "Exercise : Conditions",
          "Addition or multiplication",
          "Conclusion"
        ],
        "Python : Collections - Level 2": [
          "Collections with Python",
          "Tuples",
          "Lists",
          "Functions and tuples",
          "Slices"
        ],
        "Project : \"Pizzas v1\" - Lists": [
          "Intermediate project : Pizzas v1",
          "Exercise : Display the pizzas",
          "Exercise : First and last pizza",
          "Exercise : Add a pizza",
          "Exercise : Error on duplicate pizza",
          "Sort the list",
          "Exercise : Slices",
          "Improvements and problematics"
        ],
        "Object-oriented programming - Level 2": [
          "OOP with Python : Introduction",
          "Understanding object-oriented programming"
        ]
      },
      "requirements": [
        "No any prerequisites are required to follow this course",
        "You can use a Windows PC or a Mac",
        "All the needed software are free",
        "You can follow this course even if you have only 2 hours of time per week available"
      ],
      "description": "You want to become a developer and learn programming even if you are a total beginner ?\n\n\nThis complete course \"Python Developer\" will allow you to :\n- Learn programming, even if you don't have any previous knowledge about it.\n- Get solid programming skills with the Python language\n- Learn object-oriented programming\n- Know how to develop your own programs with your own algorithms\n- Be able to create any kind of projects : Desktop applications, Web, Mobile (iOS and Android), Games.\n\n\nThis course is different :\nMost of the other courses just teach you the basics and that's all.\nHere we will go further by doing complete and professional projects :\n- Learn to create games with the GALAXY project : 2.5D anti-gravity game that you will be able to deploy on your iOS or Android Phone.\n- Create an ultimate BeatBox with the MR BEAT project : Realtime audio, mixing, optimisations... this project will give you a big boost in your development skills. You will be able to choose your own sounds and to create any kind of rhythms.\n- EXCLUSIVITY : Develop a \"complete system\", with the \"Pizza\" project : Web server, database, REST API, mobile & desktop apps => ALL CONNECTED !\n\n\nBoost your career :\nYou will also learn Web development, with HTML and CSS languages. You will be able to create websites that can adapt to every screen sizes (Desktop, mobile and tablet) : that's what we call the \"responsive design\".\nWe will also create you very own professional website, with a modern and pro design :\n- Display your new skills\n- Create your online portfolio (with the \"super-projects\" of this course)\n- Publish your website with a custom domain name (example: your-name . com)\nMandatory if you are looking for a developer job or freelance clients.\n\n\nA true 5 in 1 bundle :\nYou only need one course : this one.\nOther courses will up-sell you other modules, and you will need to try to assemble the pieces of the puzzle together...\nHere you get everything at once :\n1 - Learn python (Beginner level)\n2 - Python Intermediate and Advanced\n3 - Web development : HTML and CSS\n4 - Complete web applications with DJANGO\n5 - Desktop & mobile Apps\n\n\nThe benefits ?\nWe will connect every parts of this course, in a consistent way. We will assemble all the parts of the puzzle, this is unique.\nWe will develop a web server, with its online database (SQL), and an admin area (HTML, CSS, PYTHON, DJANGO).\nThen we will develop a REST API (HTTP, JSON), so we can develop Desktop & Mobile applications on top (WINDOWS, MAC, iOS, Android), that will be able to connect to the server to ask for data.\nEverything is connected : if you change any data in the server, everything is automatically updated, on the web site, and on the mobile and desktop apps.\nWe will develop this complete system together from A to Z.\nThe possibilities are endless. And it will be possible for you to reuse that structure for your own powerful WEB/DESKTOP/MOBILE projects.\n\n\nShare the same source code between platforms :\nI will guide you to make the right technologic choices : the ones that bring the most significant results in no time.\nWith one single language (Python), we will create Desktop and Mobile apps, by sharing the same source code !\nWindows, Mac, iOS and Android => Divide your development time by 4.\nI will show you how to deploy your apps on your iOS / Android Phone or tablet.\n\n\nPrerequisite :\nNo prerequisite is required : This course is adapted to any person who wants to learn about programming, or to improve its skills.\nYou need to use a PC or MAC (I show both versions on the videos), and an internet connection.\n\n\n--\nAre you ready to start ?\n\n\nSee you inside the course !",
      "target_audience": [
        "Any person who wants to start learning programming",
        "Developers who wants to improve their skills and to develop multi-platform powerful applications"
      ]
    },
    {
      "title": "Python for Beginners: Complete Python Programming",
      "url": "https://www.udemy.com/course/python-programming-course/",
      "bio": "Python: Learn to code with Python programming language. Start coding in Python. Python Programming for Beginners. Python",
      "objectives": [
        "How to get up and running with Python",
        "Learn how to use Spyder and Jupyter Notebook",
        "Understand the basics of programming in Python",
        "Learn about variables, identifiers and operators",
        "Explore Python’s object types such as numbers, lists, and dictionaries",
        "Learn how to use conditional statements",
        "Learn how to use loops and create functions",
        "Understand the Numpy Module"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Setting Everything Up": [
          "Installation of Python and Environment"
        ],
        "Let's Code": [
          "Variable,identifier and keywords",
          "Operators,operands and operator precedence",
          "Conditional statements",
          "Input from users",
          "Iteration(Loop)",
          "Functions",
          "List",
          "List methods",
          "Tuple",
          "String",
          "Sets",
          "Dictionary",
          "Reading from and writing to files",
          "Errors and exceptions",
          "Namespace and scope rules",
          "Modules",
          "Numpy (Part 1)",
          "Numpy (Part 2)"
        ],
        "Conclusion": [
          "Conclusion"
        ]
      },
      "requirements": [
        "A PC with Windows, Mac or Linux.",
        "No prior knowledge of Python is required. Everything is included in the course."
      ],
      "description": "Pуthоn iѕ a high-level programming lаnguаgе. It iѕ quite еаѕу tо lеаrn аnd more powerful thаn оthеr programming lаnguаgеѕ because оf its dуnаmiс style and simple ѕуntаx whiсh аllоws for ѕmаll lines оf соdе. Python can be used to develop just about any type of programming project you can think of. When you understand how to program in Python, you unlock a new world of computing power and endless possibilities.\nStudents who want to start a саrееr in Artificial Intelligence аnd machine lеаrning should hаvе a basic undеrѕtаnding оf Pуthоn.  Once you’ve mastered the basics of this language, you’ll be able to create Python programs that easily perform useful and impressive feats of automation.\nThis course is a comprehensive introduction to Python that will have you writing clean and readable code in no time.  It doesn’t matter if you've never programmed anything before. This step-by-step course will provide you with everything you need to know, to be able to do more with Python than you ever thought possible!\nEnroll in this course and get a comprehensive, in-depth introduction to the core of the Python language.",
      "target_audience": [
        "People with no programming experience.",
        "People looking to gain programming skills in Python in order to get a programming job."
      ]
    },
    {
      "title": "Python Programming Beyond The Basics & Intermediate Training",
      "url": "https://www.udemy.com/course/python-programming-beyond-the-basics-intermediate-training/",
      "bio": "Learn, Think and Hands-on Python Intermediate concepts and Boost your Python Development Career in short time!",
      "objectives": [
        "Using and Building Iterators",
        "Block of statements Scopes",
        "Formatting strings",
        "Using and Building Generators",
        "Hands-On Regular Expressions",
        "Collections and Containers with functions",
        "Creating, installing and using Packages",
        "Mathematics and Statistics based on SL with function",
        "Working with Decorators and solving Problem",
        "A true understanding of how Intermediate Python topics work behind the scenes.",
        "Get professional, friendly and fast support in the course Q&A for any kind of problems during this course."
      ],
      "course_content": {},
      "requirements": [
        "Python basics and Python installed.",
        "Computer and any Text Editor or IDE"
      ],
      "description": "Hi, Welcome to the Python Programming Beyond The Basics And Intermediate Training.\nIn this course, you will get a hands-on Many important topics that need to be mastered in order to create applications of multiple scales and purposes in Python programming language.\nBy the end of this course, you’ll have the Intermediate concepts that every Python developer should have, and know how to use them practically in all the fields of the Python language.\nEven if you are in any field such as data science, web development or machine learning, it is very necessary to know all the concepts that we will talk about in this course, as well as how to use them in a theoretical and practical way as we will do, and this is in order to facilitate the creation of programs in the correct way as you want it without wasting time or complication.\nWe created this course for you if you want to boost your Python career to become a productive Python programmer .\n\nWhat are the topics that we will discuss in this course?\nFirst, we will talk about iterators in the Python language, how to use them, the concepts and functions related to them, how to create them, and what is the purpose of creating them easily.\nSimply, Iterator in Python is simply an object that can be iterated upon. An object which will return data, one element at a time.\nThis is a brief and simple definition of Python iterator.\nLet's go to the second section, which we will talk about.\nIn the second section we will talk about The Python scope Of all kinds and how to deal with them.\nNot all variables or functions can be accessed from anywhere in a program. The part of a program where a variable or function is accessible is called its scope.\nThe section that next, we'll talk about the string formatting To make sure a string will display as expected . and You’ll learn about these formatting techniques in detail and add them to your Python string formatting toolkit.\nAnd in the fourth section we will know all about:\nWhat generators in Python are and how to use them\nHow to build generator functions and expressions\nHow the Python yield statement works and the difference between yield and return.\nHow to use multiple Python yield statements in a generator function.\nHow to use advanced generator methods in your apps.\nThe section that next, you’ll learn everything about regular expressions in Python.\nThis is a very important topic, and we will talk about it in a detailed and practical way and with deep clarification. Actually, You’ll have all power of regular expressions, You will work with the re library, deal with pattern matching, and many more.\nBasically, Regular Expressions are a tool for matching patterns in text. This is a brief and simple definition of Regular Expressions.\nIn the next section, you’ll master the most commonly used data structures from the Python collections module.\nBasically, Collections in Python are containers that are used to store collections of data, for example, lists and dictionaries. These are built-in collections. Several modules have been developed that provide additional data structures to store collections of data. One such module is the Python collections module.\nThe collections module is used to improve the functionalities of the built-in collection containers.\nThe next section walks you through how to package a simple Python project. It will show you how to add the necessary files and structure to create the package, how to build the package, and how to use this Package.\nIn the next section, you’ll master all about math and statistics modules practically, and the functions that are used with them.\nSimply, the math module provides access to the mathematical functions defined by the C standard. and The statistics module provides functions for calculating mathematical statistics of numeric data.\nFinally, In the last part of this course you will learn something very important, which is decoration.\nIn this section on decorators, we’ll look at what they are and how to create and use them in detail.\nSimply and By definition, a decorator is a function that takes another function and extends the behavior of the latter function without explicitly modifying it. that’s it . We will simplify this topic very without complication, and with practical examples to illustrate.",
      "target_audience": [
        "Python Intermediate Developers",
        "Anyone who wants to dive deeply into Python v3.9 Intermediate Topics without wasting time",
        "Anyone who has finished the basics of Python and does not know where to go",
        "Python developers who want to master new features of modern python"
      ]
    },
    {
      "title": "Signal processing problems, solved in MATLAB and in Python",
      "url": "https://www.udemy.com/course/signal-processing/",
      "bio": "Applications-oriented instruction on signal processing and digital signal processing (DSP) using MATLAB and Python codes",
      "objectives": [
        "Understand commonly used signal processing tools",
        "Design, evaluate, and apply digital filters",
        "Clean and denoise data",
        "Know what to look for when something isn't right with the data or the code",
        "Improve MATLAB or Python programming skills",
        "Know how to generate test signals for signal processing methods",
        "*Fully manually corrected English captions!"
      ],
      "course_content": {
        "Introductions": [
          "Signal processing = decision-making + tools",
          "Using MATLAB in this course",
          "Using Octave-online in this course",
          "Using Python in this course",
          "Having fun with filtered Glass dance",
          "Download all the code and data files",
          "Writing code vs. using toolboxes/programs",
          "Using Udemy like a pro"
        ],
        "Time series denoising": [
          "MATLAB and Python code for this section",
          "Mean-smooth a time series",
          "Gaussian-smooth a time series",
          "Gaussian-smooth a spike time series",
          "Denoising EMG signals via TKEO",
          "Median filter to remove spike noise",
          "Remove linear trend (detrending)",
          "Remove nonlinear trend with polynomials",
          "Averaging multiple repetitions (time-synchronous averaging)",
          "Remove artifact via least-squares template-matching",
          "Code challenge: Denoise these signals!"
        ],
        "Spectral and rhythmicity analyses": [
          "MATLAB and Python code for this section",
          "Crash course on the Fourier transform",
          "Fourier transform for spectral analyses",
          "Welch's method and windowing",
          "Spectrogram of birdsong",
          "Code challenge: Compute a spectrogram!"
        ],
        "Working with complex numbers": [
          "MATLAB and Python code for this section",
          "From the number line to the complex number plane",
          "Addition and subtraction with complex numbers",
          "Multiplication with complex numbers",
          "The complex conjugate",
          "Division with complex numbers",
          "Magnitude and phase of complex numbers"
        ],
        "Filtering": [
          "MATLAB and Python code for this section",
          "Filtering: Intuition, goals, and types",
          "FIR filters with firls",
          "FIR filters with fir1",
          "IIR Butterworth filters",
          "Causal and zero-phase-shift filters",
          "Avoid edge effects with reflection",
          "Data length and filter kernel length",
          "Low-pass filters",
          "Windowed-sinc filters",
          "High-pass filters",
          "Narrow-band filters",
          "Two-stage wide-band filter",
          "Quantifying roll-off characteristics",
          "Remove electrical line noise and its harmonics",
          "Use filtering to separate birds in a recording",
          "Code challenge: Filter these signals!"
        ],
        "Convolution": [
          "MATLAB and Python code for this section",
          "Time-domain convolution",
          "Convolution in MATLAB",
          "Why is the kernel flipped backwards?!?!!?",
          "The convolution theorem",
          "Thinking about convolution as spectral multiplication",
          "Convolution with time-domain Gaussian (smoothing filter)",
          "Convolution with frequency-domain Gaussian (narrowband filter)",
          "Convolution with frequency-domain Planck taper (bandpass filter)",
          "Code challenge: Create a frequency-domain mean-smoothing filter"
        ],
        "Wavelet analysis": [
          "MATLAB and Python code for this section",
          "What are wavelets?",
          "Convolution with wavelets",
          "Scientific publication about defining Morlet wavelets",
          "Wavelet convolution for narrowband filtering",
          "Overview: Time-frequency analysis with complex wavelets",
          "Link to youtube channel with 3 hours of relevant material",
          "MATLAB: Time-frequency analysis with complex wavelets",
          "Time-frequency analysis of brain signals",
          "Code challenge: Compare wavelet convolution and FIR filter!"
        ],
        "Resampling, interpolating, extrapolating": [
          "MATLAB and Python code for this section",
          "Upsampling",
          "Downsampling",
          "Strategies for multirate signals",
          "Interpolation",
          "Resample irregularly sampled data",
          "Extrapolation",
          "Spectral interpolation",
          "Dynamic time warping",
          "Code challenge: denoise and downsample this signal!"
        ],
        "Outlier detection": [
          "MATLAB and Python code for this section",
          "Outliers via standard deviation threshold",
          "Outliers via local threshold exceedance",
          "Outlier time windows via sliding RMS",
          "Code challenge"
        ],
        "Feature detection": [
          "MATLAB and Python code for this section",
          "Local maxima and minima",
          "Recover signal from noise amplitude",
          "Wavelet convolution for feature extraction",
          "Area under the curve",
          "Application: Detect muscle movements from EMG recordings",
          "Full width at half-maximum",
          "Code challenge: find the features!"
        ]
      },
      "requirements": [
        "Basic programming experience in MATLAB or Python",
        "High-school math"
      ],
      "description": "Why you need to learn digital signal processing.\nNature is mysterious, beautiful, and complex. Trying to understand nature is deeply rewarding, but also deeply challenging. One of the big challenges in studying nature is data analysis. Nature likes to mix many sources of signals and many sources of noise into the same recordings, and this makes your job difficult.\nTherefore, one of the most important goals of time series analysis and signal processing is to denoise: to separate the signals and noises that are mixed into the same data channels.\nThe big idea of DSP (digital signal processing) is to discover the mysteries that are hidden inside time series data, and this course will teach you the most commonly used discovery strategies.\n\n\nWhat's special about this course?\nThe main focus of this course is on implementing signal processing techniques in MATLAB and in Python. Some theory and equations are shown, but I'm guessing you are reading this because you want to implement DSP techniques on real signals, not just brush up on abstract theory.\nThe course comes with over 10,000 lines of MATLAB and Python code, plus sample data sets, which you can use to learn from and to adapt to your own coursework or applications.\nIn this course, you will also learn how to simulate signals in order to test and learn more about your signal processing and analysis methods.\nYou will also learn how to work with noisy or corrupted signals.\n\n\nAre there prerequisites?\nYou need some programming experience. I go through the videos in MATLAB, and you can also follow along using Octave (a free, cross-platform program that emulates MATLAB). I provide corresponding Python code if you prefer Python. You can use any other language, but you would need to do the translation yourself.\nI recommend taking my Fourier Transform course before or alongside this course. However, this is not a requirement, and you can succeed in this course without taking the Fourier transform course.\n\n\nWhat should you do now?\nWatch the sample videos, and check out the reviews of my other courses -- many of them are \"best-seller\" or \"top-rated\" and have lots of positive reviews. If you are unsure whether this course is right for you, then feel free to send me a message. I hope you to see you in class!",
      "target_audience": [
        "Students in a signal processing or digital signal processing (DSP) course",
        "Scientific or industry researchers who analyze data",
        "Developers who work with time series data",
        "Someone who wants to refresh their knowledge about filtering",
        "Engineers who learned the math of DSP and want to learn about implementations in software"
      ]
    },
    {
      "title": "Learn Python Programming From A-Z: Beginner To Expert Course",
      "url": "https://www.udemy.com/course/learn-python-programming-from-a-z/",
      "bio": "Become a professional Python programmer and learn how to easily create programs, apps, scripts, games and so much more!",
      "objectives": [
        "How to become a professional Python Developer",
        "How to land your first job as a Python Developer",
        "How to use the basic Python structures: strings, lists, and dictionaries",
        "How to write Python scripts to perform automated actions",
        "How to use Python Object-Oriented Programming (OOP)",
        "How to create your own Python programs from scratch",
        "How to use core programming tools such as functions and loops",
        "How to use variables to store, retrieve and calculate information"
      ],
      "course_content": {
        "Introduction to Python Programming from A-Z": [
          "Intro To Python Section Overview",
          "What is Python Programming?",
          "Who is This Course For?",
          "Python Programming Marketplace",
          "Python Job Opportunities",
          "How To Land a Python Job Without a Degree",
          "Python Programmer Job Roles",
          "Python from A-Z Course Structure",
          "How to Maximize your learning from the course?"
        ],
        "Getting Familiar with Python": [
          "Getting Familiar with Python Section Overview",
          "Installing Python on Windows",
          "Installing Python on Windows Quiz",
          "Anaconda and Jupyter Notebooks Part 1",
          "Anaconda and Jupyter Notebooks Part 2",
          "Python Syntax",
          "Python Syntax Quiz",
          "Line Structure",
          "Line Structure Exercise",
          "Line Structure Quiz",
          "Comments",
          "Comments Quiz",
          "Joining Lines",
          "Joining Lines Quiz",
          "Multiple Statements on a Single Line",
          "Multiple Statements on a Single Line Quiz",
          "Indentation",
          "Indentation Quiz"
        ],
        "Basic Data Types": [
          "Basic Data Types Section Overview",
          "Python Variables",
          "Python Variables Quiz",
          "Integers and Floats",
          "Integers and Floats Quiz",
          "Integers and Floats Exercise",
          "String Overview",
          "String Overview Quiz",
          "String Overview Exercise",
          "String Overview Exercise Solution",
          "String Manipulation",
          "String Manipulation Quiz",
          "String Manipulation Exercise",
          "String Manipulation Exercise Solution",
          "String Indexing",
          "String Indexing Quiz",
          "String Slicing",
          "String Slicing Quiz",
          "Strings Exercise",
          "Strings Exercise Solution",
          "Boolean",
          "Printing",
          "Printing Quiz",
          "Mini Project 1 : Letter Counter"
        ],
        "Python Operators": [
          "Python Operators Section Overview",
          "Arithmetic Operators",
          "Arithmetic Operators Quiz",
          "Arithmetic Operators Exercise",
          "Arithmetic Operators Exercise Solution",
          "Assignment Operators",
          "Assignment Operators Quiz",
          "Assignment Operators Exercise",
          "Assignment Operators Exercise Solution",
          "Comparison Operators",
          "Comparison Operators Quiz",
          "Logical Operators",
          "StackOverFlow. Our new best friend !",
          "Logical Operators Quiz",
          "Logical Operators Exercise",
          "Logical Operators Exercise Solution",
          "Identity Operators",
          "Identity Operators Quiz",
          "Membership Operators",
          "Bitwise Operators",
          "Bitwise Operators Quiz"
        ],
        "Advanced Data Types": [
          "Python Advanced Data Types Section Overview",
          "List Overview",
          "Lists Exercise",
          "Lists Exercise Solution",
          "List Slicing and Indexing",
          "List Slicing and Indexing Quiz",
          "Tuples",
          "Tuples",
          "Tuples Exercise",
          "Tuples Exercise Solution",
          "Sets",
          "Sets Quiz",
          "Dictionaries",
          "Dictionaries Quiz",
          "Dictionaries Exercise",
          "Dictionaries Exercise Solution",
          "When to use each one?",
          "When to use each one Quiz",
          "Compound Data Types",
          "Compound Data Types Quiz",
          "Data Types Practice Test"
        ],
        "Control Flow Part 1": [
          "Control Flow Part 1 Section Overview",
          "Intro to Control Flow",
          "Basic Conditional Statements",
          "Basic Conditional Statements Quiz",
          "Basic Conditional Statements Exercise",
          "Basic Conditional Statements Exercise Solution",
          "More Conditional Statements",
          "More Conditional Statements Quiz",
          "More Conditional Statements Exercise",
          "More Conditional Statements Exercise Solution",
          "For Loops",
          "For Loops Quiz",
          "For Loops Exercise",
          "For Loops Exercise Solution",
          "While Loops",
          "While Loops Quiz"
        ],
        "Control Flow Part 2": [
          "Control Flow Part 2 Section Overview",
          "Break Statements",
          "Break Statements Quiz",
          "Break Statements Exercise",
          "Break Statements Exercise Solution",
          "Continue Statements",
          "Continue Statements Quiz",
          "Continue Statements Exercise",
          "Continue Statements Exercise Solution",
          "Zip Function",
          "Zip Function Quiz",
          "Zip Function Exercise",
          "Zip Function Exercise Solution",
          "Enumerate Function",
          "Enumerate Function Quiz",
          "Enumerate Function Exercise",
          "Enumerate Function Exercise Solution",
          "List Comprehension",
          "List Comprehension Quiz",
          "List Comprehension Exercise",
          "List Comprehension Exercise Solution"
        ],
        "Python Functions": [
          "Python Functions Section Overview",
          "Intro to Functions",
          "Python help Function",
          "Defining Functions",
          "Functions Exercise 1",
          "Functions Exercise 1 Solution",
          "Functions Exercise 2",
          "Functions Exercise 2 Solution",
          "Functions Exercise 3",
          "Functions Exercise 3 Solution",
          "Functions Exercise 4",
          "Functions Exercise 4 Solution",
          "Functions Exercise 5",
          "Functions Exercise 5 Solution",
          "Variable Scope",
          "Variable Scope Quiz",
          "Doc Strings",
          "Doc Strings Quiz"
        ],
        "User Input and Error Handling": [
          "User Input and Error Handling Section Overview",
          "Introduction to error handling",
          "User Input",
          "User Input Quiz",
          "User Input Exercise",
          "User Input Exercise Solution",
          "Syntax Errors",
          "Syntax Errors Quiz",
          "Exceptions",
          "Exceptions Quiz",
          "Handling Exceptions Part 1",
          "Handling Exceptions Part 2",
          "Handling Exceptions Exercise",
          "Handling Exceptions Exercise Solution",
          "Handling Exceptions Quiz",
          "Python Advanced Functions"
        ],
        "Python Advanced Functions": [
          "Python Advanced Functions Section Overview",
          "Lambda Functions",
          "Lambda Functions Quiz",
          "Lambda Functions Exercise",
          "Lambda Functions Exercise Solution",
          "Functions args and kwargs",
          "Functions args and kwargs Quiz",
          "Functions args and kwargs Exercise",
          "Functions args and kwargs Exercise Solution",
          "Iterators",
          "Iterators Quiz",
          "Generators and Yield",
          "Generators and Yield Quiz",
          "Map Function",
          "Map Function Quiz",
          "Map Function Exercise",
          "Map Function Exercise Solution",
          "Filter Function",
          "Filter Function Quiz",
          "Filter Function Exercise",
          "Filter Function Exercise Solution"
        ]
      },
      "requirements": [
        "Access to a computer with an internet connection."
      ],
      "description": "Welcome to the Learn Python Programming From A-Z: Beginner To Expert Course\nWhere you’re going to learn how to become a professional Python Developer and create programs, apps, scripts, games and so much more...\nIn this practical, hands-on course our main objective is to give you the education not just to understand the ins and outs of Python Programming, but also to learn exactly how the software development industry works, the different roles within a team, and how to land a Python Programming job without a degree.\nBlending practical work with solid theoretical training, we take you from the basics of Python Programming to mastery, giving you the training you need not just to create software programs, scrape websites, and build automations, but also the foundational understanding of data science and visualization so you can become a well-rounded Python Programmer.\nWe understand that theory is important to build a solid foundation, we understand that theory alone isn’t going to get the job done so that’s why this course is packed with practical hands-on examples that you can follow step by step.\nEven if you already have some coding experience, or want to learn about the advanced features of Python, this course is for you! In this course, you’ll learn Python 3.\nPython is the number one programming language choice for machine learning, data science, and artificial intelligence. In order to get those high paying programming jobs, you need the skills and knowledge of how to become an expert Python Programmer, and that’s exactly what you’ll learn in this course.\nTogether we’re going to give you the foundational education that you need to know not just on how to write code in Python, create various scripts and softwares but also how to get paid for your newly developed programming skills. The course covers 6 main areas:\n\n\n1: PYTHON COURSE INTRO\nThis intro section gives you a full introduction to the Python industry and marketplace, job opportunities and salaries, and the various Python job roles.\n- Python Industry and Marketplace\n- Python Job Opportunities\n- Landing a Job w/o a Degree\n\n\n2: BASIC/ADVANCED DATA TYPES\nThis section gives you a full introduction to the Python basic and advanced data types with hands-on step by step training.\n- Python Variables\n- Integers, Floats, and Complex Numbers\n- Strings\n- Operators\n- Lists, Tuples, Sets & Dictionary\n\n\n3: PYTHON CONTROL FLOW\nThis section gives you a full introduction to the Python Control Flow with hands-on step by step training.\n- Basic/Complex Conditional Statements\n- For Loops, While Loops\n- Break/Continue Statements\n- Zip/Enumerate Keywords\n\n\n4: BASIC/ADVANCED FUNCTIONS\nThis section gives you a full introduction to the Python basic and advanced functions with hands-on step by step training.\n- Help/Defining Function\n- Error Handling\n- Variable Scope\n- Doc Strings\n- Lambda Functions\n- Iterators + Generators\n- Map/Filter Functions\n\n\n5: SCRIPTING & LIBRARIES (includes numpy, pandas)\nThis section gives you a full introduction to the scripting and libraries with hands-on step by step training.\n- Scripting Basics\n- Python IDEs\n- Python Text Editors\n- Third Party Libraries\n- Numpy + Pandas\n- Data Visualization\n- Webscraping\n\n\n6: STARTING A CAREER IN PYTHON\nThis section gives you a full introduction to starting a career as a Python Programmer with hands-on step by step training.\n- Building a Brand\n- Personal Branding\n- Freelancing + Freelance websites\n- Importance of Having a website\n- Networking\n- Creating a Resume\nBy the end of the course you’ll be a professional Python Programmer and confidently apply for jobs and feel good knowing that you have the skills and knowledge to back it up.",
      "target_audience": [
        "Students who want to learn Python Programming from A-Z"
      ]
    },
    {
      "title": "Python For Maya: Artist Friendly Programming",
      "url": "https://www.udemy.com/course/python-for-maya/",
      "bio": "Learn to code with Python to work faster in Maya",
      "objectives": [
        "Develop tools in Python, inside and outside of Maya.",
        "Create advanced user interfaces to interact with their tools and manage assets.",
        "Have the skills necessary for a studio technical director."
      ],
      "course_content": {},
      "requirements": [
        "You will require a basic knowledge of Autodesk Maya, like creating and manipulating simple objects.",
        "You will need a working copy of Maya. Preferably 2017 and above, but 2011 should be the minimum. Links to the trial and educational version will be provided.",
        "No programming knowledge is required, but a basic understanding will help."
      ],
      "description": "Welcome to Python for Maya: Artist Friendly Programming!\nThis course will take you from your very first line of Python code to creating advanced user interfaces with all that fluidity we expect of a professional. You'll learn skills that will help you work faster by automating repetitive tasks so you can focus on the work you want to be doing. This can in turn also add incredible value to you on the job market and help you move up the ladder faster.\nWhether you're a beginner or already familiar with Python, there's a lot this course can offer you. Projects are split up by difficulty and there's a project for you whether you're a modeller, animator, rigger or lighter.\nHere's what we'll cover:\n\nPython Fundamentals: functions, classes, if statements, etc...\nAdvanced Python concepts like lambdas,partials, regular expressions, etc..\nWriting User Interfaces with Maya Cmds and Qt\nWriting data to disk and loading it back in to Maya as JSON\nCreating command line tools\nSetting up a professional workflow\nThe Qt interface framework: custom widgets, signals and slots, stylesheets etc\nAdditionally, this is currently the only course that covers changes introduced in Maya 2017.\nYou'll have full source code access with comprehensive comments to follow along with, as well as other resources that will help you learn when you're done.\nI taught myself Python several years ago when I was an artist, and today hundreds of artists use my tools everyday. I'll be using the same project driven methods to teach you Python.\nReady to start your programming journey? Let's go!\nResources\nThe most important resource is:\n\nhttps://github.com/dgovil/PythonForMayaSamples\nThis has:\nLinks to all the software you'll need.\nSource code for all our projects with comments.\nOther resources to further your education.\nWhat are the requirements?\nMaya 2011 or higher (2017 preferred).\nA computer with an internet connection\nThere will be links to everything else you need on the github page.\nWhat am I going to get from this course?\nYou'll have the skills to build tools that will speed up your work.\nThe necessary workflow to build code that can be shared with your team or studio.\nThe necessary skill set that we'd ask of a pipeline developer in major studios.\nWhat is the target audience?\nBeginners with no programming experience\nIntermediates with some experience looking to hone their skills",
      "target_audience": [
        "This course is for artists who want to learn Python programming to make tools, work more efficiently or add job value.",
        "The course is targeted to beginners with no programming experience as well as intermediate's who want to learn new skills."
      ]
    },
    {
      "title": "Python 3: Deep Dive (Part 2 - Iterators, Generators)",
      "url": "https://www.udemy.com/course/python-3-deep-dive-part-2/",
      "bio": "Sequences, Iterables, Iterators, Generators, Context Managers",
      "objectives": [
        "You'll be able to leverage the concepts in this course to take your Python programming skills to the next level.",
        "Sequence Types and the sequence protocol",
        "Iterables and the iterable protocol",
        "Iterators and the iterator protocol",
        "List comprehensions and their relation to closures",
        "Generator functions",
        "Generator expressions",
        "Context managers",
        "Creating context managers using generator functions",
        "Using Generators as Coroutines"
      ],
      "course_content": {
        "Introduction": [
          "Course Overview",
          "Pre-Requisites",
          "Python Tools Needed",
          "Course Slides"
        ],
        "Sequence Types": [
          "Introduction",
          "Sequence Types - Lecture",
          "Sequence Types - Coding",
          "Mutable Sequence Types - Lecture",
          "Mutable Sequence Types - Coding",
          "Lists vs Tuples",
          "Index Base and Slice Bounds - Rationale",
          "Copying Sequences - Lecture",
          "Copying Sequences - Coding",
          "Slicing - Lecture",
          "Slicing - Coding",
          "Custom Sequences - Part 1 - Lecture",
          "Custom Sequences - Part 1 - Coding",
          "In-Place Concatenation and Repetition - Lecture",
          "In-Place Concatenation and Repetition - Coding",
          "Assignments in Mutable Sequences - Lecture",
          "Assignments in Mutable Sequences - Coding",
          "Custom Sequences - Part 2 - Lecture",
          "Custom Sequences - Part 2A - Coding",
          "Custom Sequences - Part 2B - Coding",
          "Custom Sequences - Part 2C - Coding",
          "Sorting Sequences - Lecture",
          "Sorting Sequences - Coding",
          "List Comprehensions - Lecture",
          "List Comprehensions - Coding"
        ],
        "Project 1": [
          "Project Description",
          "Project Solution: Goal 1",
          "Project Solution: Goal 2"
        ],
        "Iterables and Iterators": [
          "Introduction",
          "Iterating Collections - Lecture",
          "Iterating Collections - Coding",
          "Iterators - Lecture",
          "Iterators - Coding",
          "Iterators and Iterables - Lecture",
          "Iterators and Iterables - Coding",
          "Example 1 - Consuming Iterators Manually",
          "Example 2 - Cyclic Iterators",
          "Lazy Iterables - Lecture",
          "Lazy Iterables - Coding",
          "Python's Built-In Iterables and Iterators - Lecture",
          "Python's Built-In Iterables and Iterators - Coding",
          "Sorting Iterables",
          "The iter() Function - Lecture",
          "The iter() Function - Coding",
          "Iterating Callables - Lecture",
          "Iterating Callables - Coding",
          "Example 3 - Delegating Iterators",
          "Reversed Iteration - Lecture",
          "Reversed Iteration - Coding",
          "Caveat: Using Iterators as Function Arguments"
        ],
        "Project 2": [
          "Project Description",
          "Project Solution: Goal 1",
          "Project Solution: Goal 2"
        ],
        "Generators": [
          "Introduction",
          "Yielding and Generator Functions - Lecture",
          "Yielding and Generator Functions - Coding",
          "Example - Fibonacci Sequence",
          "Making an Iterable from a Generator - Lecture",
          "Making an Iterable from a Generator - Coding",
          "Example - Card Deck",
          "Generator Expressions and Performance - Lecture",
          "Generator Expressions and Performance - Coding",
          "Yield From - Lecture",
          "Yield From - Coding"
        ],
        "Project 3": [
          "Project Description",
          "Project Solution: Goal 1",
          "Project Solution: Goal 2"
        ],
        "Iteration Tools": [
          "Introduction",
          "Aggregators - Lecture",
          "Aggregators - Coding",
          "Slicing - Lecture",
          "Slicing - Coding",
          "Selecting and Filtering - Lecture",
          "Selecting and Filtering - Coding",
          "Infinite Iterators - Lecture",
          "Infinite Iterators - Coding",
          "Chaining and Teeing - Lecture",
          "Chaining and Teeing - Coding",
          "Mapping and Reducing - Lecture",
          "Mapping and Reducing - Coding",
          "Zipping - Lecture",
          "Zipping - Coding",
          "Grouping - Lecture",
          "Grouping - Coding",
          "Combinatorics - Lecture",
          "Combinatorics - Coding (Product)",
          "Combinatorics - Coding (Permutation, Combination)"
        ],
        "Project 4": [
          "Project - Description",
          "Project Solution: Goal 1",
          "Project Solution: Goal 2",
          "Project Solution: Goal 3",
          "Project Solution: Goal 4"
        ],
        "Context Managers": [
          "Introduction",
          "Context Managers - Lecture",
          "Context Managers - Coding",
          "Caveat when used with Lazy Iterators",
          "Not just a Context Manager",
          "Additional Uses - Lecture",
          "Additional Uses - Coding",
          "Generators and Context Managers - Lecture",
          "Generators and Context Managers - Coding",
          "The contextmanager Decorator - Lecture",
          "The contextmanager Decorator - Coding",
          "Nested Context Managers"
        ]
      },
      "requirements": [
        "This is a relatively advanced course, so you should already be familiar with basic Python concepts, as well as some in-depth knowledge as described in the prerequisites in the course description. Please be sure you check those and make sure!",
        "You will need Python 3.6 or above, and a development environment of your choice (command line, PyCharm, Jupyter, etc.)"
      ],
      "description": "Part 2 of this Python 3: Deep Dive series is an in-depth look at:\nsequences\niterables\niterators\ngenerators\ncomprehensions\ncontext managers\nI will show you exactly how iteration works in Python - from the sequence protocol, to the iterable and iterator protocols, and how we can write our own sequence and iterable data types.\n\nWe'll go into some detail to explain sequence slicing and how slicing relates to ranges.\nWe look at comprehensions in detail as well and I will show you how list comprehensions are actually closures and have their own scope, and the reason why subtle bugs sometimes creep in to list comprehensions that we might not expect.\nWe'll take a deep dive into the itertools module and look at all the functions available there and how useful (but overlooked!) they can be.\nWe also look at generator functions, their relation to iterators, and their comprehension counterparts (generator expressions).\nContext managers, an often overlooked construct in Python, is covered in detail too. There we will learn how to create and leverage our own context managers and understand the relationship between context managers and generator functions.\nEach section is followed by a project designed to put into practice what you learn throughout the course.\nThis course series is focused on the Python language and the standard library. There is an enormous amount of functionality and things to understand in just the standard CPython distribution, so I do not cover 3rd party libraries - this is a Python deep dive, not an exploration of the many highly useful 3rd party libraries that have grown around Python - those are often sufficiently large to warrant an entire course unto themselves! Indeed, many of them already do!\n\n\n\n** Prerequisites **\nPlease note that this is a relatively advanced Python course, and a strong knowledge of some topics in Python is required.\nIn particular you should already have an in-depth understanding of the following topics:\n\nfunctions and function arguments\npacking and unpacking iterables and how that is used with function arguments (i.e. using *)\nclosures\ndecorators\nBoolean truth values and how any object has an associated truth value\nnamed tuples\nthe zip, map, filter, sorted, reduce functions\nlambdas\nimporting modules and packages\n\n\nYou should also have a basic knowledge of the following topics:\nvarious data types (numeric, string, lists, tuples, dictionaries, sets, etc)\nfor loops, while loops, break, continue, the else clause\nif statements\ntry...except...else...finally...\nbasic knowledge of how to create and use classes (methods, properties) - no need for advanced topics such as inheritance or meta classes\nunderstand how certain special methods are used in classes (such as __init__, __eq__, __lt__, etc)",
      "target_audience": [
        "Python developers who want a deeper understanding of sequences, iterables, iterators, generators and context managers."
      ]
    },
    {
      "title": "Learn Enterprise WPF with XAML from Scratch",
      "url": "https://www.udemy.com/course/enterprise-wpf-with-xaml-from-scratch/",
      "bio": "Windows Presentation Foundation tutorial: create powerful Windows apps with rich UI on WPF platform + Intro to MVVM",
      "objectives": [
        "Compose complex layouts",
        "Harness the full power of controls",
        "Apply data binding",
        "Create bindable properties",
        "Create and apply custom templates",
        "Create and apply resources",
        "Make UI looking stylish",
        "Develop full-fledged WPF applications"
      ],
      "course_content": {},
      "requirements": [
        "You should already be familiar with the basics of C#"
      ],
      "description": "Learn the WPF and XAML concepts and tools that you will need to build fully functional UI-applications with the modern UI-building framework, Windows Presentation Foundation (WPF). This is the best WPF course here on Udemy.\n\nTeaching Approach\nNo fluff, no ranting, no beating the air. I respect your time. The course material is succinct, yet comprehensive. All important concepts are covered. Particularly important topics are covered in-depth. Don't forget that this course has English subtitles, so if you don't understand my accent, feel free to turn them on.\nTake this course and you will be satisfied.\nBuild a strong foundation with this WPF Tutorial\nToday, almost all applications have rich UI, console applications are very specific. Learning the essentials of WPF and XAML puts a powerful and very useful tool at your fingertips. Being familiar with WPF will make it absolutely easy to move to Universal Windows Platform (UWP) if needed, because these technologies rely basically on the same principles and they are both based on XAML.\nContent and Overview\nThis course is primarily aimed at beginner to intermediate developers. It provides solid theoretical base reinforced by tons of practical material.\nWPF is a very wide platform and it’s impossible to cover all its features in a single course, or in a single book. That’s why this course includes all the topics needed for the developing of a full-fledged Windows UI-application, sacrificing some advanced topics such as interoperation with Windows Forms, skinning, creating custom markup extensions etc.\nThe most beneficial aspect of this course is that it gives you the deep understanding of the WPF platform. For example, you will understand how the layout process really works. It helps to compose XAML quicker. Sometimes you’ll find yourself baffled by the events system of WPF without deep understanding of how it really works.\nIn short, the course covers the following topics:\nBasic notions of UI-development\nControls\nLayout\nData-Binding\nCore-Types of WPF\nEvents and Dependency Properties\nTemplates\nResources\nStyles\nUser Controls\nCustom Controls\nWPF application model (threading model, app life-cycle)\nIn the end we will recap what you have learned and you will try to understand where you have to go further with intention to master your skills. Here we will have a discussion of different paths you can go on.\n------------------------------------------------------------\nKeywords related to the course:\nVisual Studio WPF\nWPF beginner tutorial\nXAML tutorial\nWPF and XAML tutorial",
      "target_audience": [
        "Beginners to quickly start developing Windows apps with rich UI",
        "Any experienced WPF-developer who would like to refine their knowledge in the platform"
      ]
    },
    {
      "title": "Django master course with real world practical project 2022",
      "url": "https://www.udemy.com/course/python-django-tkinter-complete-bundle-advance/",
      "bio": "Django from zero to hero : from learning all basic of python to advanced Django real world website project",
      "objectives": [
        "Learn the fundamentals of programming",
        "Learn the Python Programming Language",
        "Learn the Django & Bootstrap frameworks",
        "write a code for a real-world Python program",
        "Create a real world website with Python Django",
        "learn create UI with TKInter",
        "create and run real world text based RPG game"
      ],
      "course_content": {},
      "requirements": [
        "no need"
      ],
      "description": "please first look at free preview on course about Django at the bottom of this page , you will learn a lot\nHere’s a little outline of what we are presenting to you in this course.\nWe will be covering a number of basic topics and agendas that, by and on themselves, would be enough to get you started as a programmer, even if you may have zero to none prior acquaintance with programming.\nThe topics include whatever you are going to need as a programmer, we cover very basic topics such as Using Linux,  and Best IDE, which are the systematic pre-requirements for your hardware, and from there we set you up on the basics of Python programming language, as the most common programming language used by professionals around the world.\nIn our basic python programming course we use a lot of examples to make sure that all the points really hit home, topics such as variables, printing techniques, lists, various forms of loops, dictionaries, and tuple, and numerous practical and useful functions and classes are all dealt with through multiple examples that have been tested over and over again by the very best professionals in the game.\nTo make sure that you have totally mastered the topics, in due course you are going to be presented with entertaining exercises such as designing an rpg game, whose fulfilment is going to require all that you have been taught during the course, in the most involved and practical format possible, to make you thoroughly prepared for the real life projects ahead of you.\nOn the second level we are going to deal with the more advanced topics on python, with more practically-designed details and examples.\nWe further elaborate the topic of files, Json, and try and except .\nwe use tkinter as a platform for our UI course.\nTkinter being universally viewed as the best UI library for python available on the market, will be where we base our further instructions.\nWe will show you how to install tkinter, and how to apply its various and multilayered components in detail, with topics such as title , label , button , textbox , combo-box , radio button, scroll text, file menu , message box  and many more thoroughly elaborated through lots and lots of examples.\nWith the basic and more advanced topics of python out of the way, now we will be able to enter the practical realms of professional programming, in which we will learn how to make a webpage using the most common and powerful framework available for web-designing, Django.\nAfter being done with its installation manual and set up, we will provide you with a forty hour course, in which we cover all the details on often elaborate topics for starting, improving and creating the ultimate website that would be just as interactive as any that you have ever come across in real life.\nSo, if you have made up your mind about taking up this course, I need to reassure you again about the wonderful journey that lies ahead of you, through which you are going to walk the path of an ordinary beginner who becomes a professional web-designer.",
      "target_audience": [
        "beginner and professional"
      ]
    },
    {
      "title": "Javascript Practicals Crash Course",
      "url": "https://www.udemy.com/course/javascript-practicals-crash-course/",
      "bio": "Learn javascript Concepts With Javascript Practical Demonstrations",
      "objectives": [
        "Only Practical demonstrations of javascript concepts",
        "Practically Getting Started With Javascript Variables,Values and Data Types, Operators and Operands",
        "Write Javascript scripts and Gain knowledge in regard to general javascript programming concepts",
        "Introduction And Use of Javascript Variables, Javascript Arrays, Javascript Objects",
        "Introduction And Use Of Conditional Statements In Javascript"
      ],
      "course_content": {
        "Introduction": [
          "Javascript Variables Practical",
          "JavaScript Arrays Practical",
          "Javascript Operators Practical",
          "Javascript Functions Practical",
          "JavaScript Events Practical",
          "JavaScript Animation Practical",
          "Javascript Objects Practical"
        ]
      },
      "requirements": [
        "Basic HTML Knowledge",
        "Basic CSS Knowledge"
      ],
      "description": "Learn Javascript Programming Language with practical demonstrations\nThe course is easy-to-follow content that you’ll easily understand and absorb.\nThe course starts with the practice of basics, including JavaScript fundamentals, programming, and user interaction.\n\n\nThe curriculum is going to be very hands-on as we walk you from start to finish to become a professional Javascript developer. We will start from the very beginning by teaching you Javascript basics and programming fundamentals, and then execute into real-life practice and be ready for the real world.\n\n\nWhile Javascript is complicated for beginners to learn, it is widely used in many web development areas.\nThis course gets you started with an introduction to JavaScript. It assumes that you're new to the language, so it gets you started with basic functionality such as creating functions, creating variables, and calling these lines of code from your standard HTML pages. It talks about events and triggers for custom event handling. It talks about pattern matching, searching for text within a page, flow control and the document object model (DOM). We start off with the basics and move on to more complex functionality such as arrays and objects. We then discuss how to script common elements with JavaScript such as forms and tables. At the very end, we discuss major libraries such as Ajax, which allows you to make asynchronous calls to server-side scripts without reloading the web page in the server.\nMaster the fundamentals of writing Javascript scripts\nLearn core Javascript scripting elements such as variables and Objects\nDiscover how to work with lists and sequence data\nWrite Javascript functions to facilitate code reuse\nUse Javascript to read and write files\nMake their code robust by handling errors and exceptions properly\nSearch text using regular expressions\nThe topics covered in this course are practicals of:\n* Javascript Course Contents:\n\n\nJavascript Array\nJavascript Variables\nJavascript Functions\nJavascript Objects\nJavascript Control Statements\nJavascript Cookies\nJavascript Loop statements\nSee you inside the course",
      "target_audience": [
        "For Javascript Programming Beginners",
        "For People New to Javascript",
        "For People Who want to learn Javascript Fundamentals and later Transition into Web Development"
      ]
    },
    {
      "title": "C# Basics: Learn to Code the Right Way",
      "url": "https://www.udemy.com/course/learn-c-sharp-programming/",
      "bio": "Learn C# Using this Course, Then Move on to Make Windows, Server and .Net Applications!",
      "objectives": [
        "Understand the fundamentals of C#",
        "Have a solid grounding to make the leap to creating applications"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Alternative to C Sharp Pad"
        ],
        "Start Learning C#": [
          "Variables in C#",
          "Operators in C#",
          "Converting Variable Types in C#",
          "C# Cheat Sheet",
          "Comparing Stuff in C#",
          "Round and Round We Go - Loops in C#",
          "Arrays in C#",
          "Methods in C#",
          "Classes in C#",
          "Inheritance in C#",
          "Exceptions in C#",
          "Summary of The C# Language - Grasp the Basics"
        ]
      },
      "requirements": [
        "You will need access to the internet to take this course",
        "A willingness to learn!"
      ],
      "description": "Stop MESSING AROUND with courses that want to teach you \"everything you can do with C#\". If you're new to coding you absolutely do not need that! What you do need to succeed are:\nFundamentals.\nBasic ideas taught to in an unforgettable way!\nQuick, simple and easy lessons!\nIn this course I will show you how to code really basic C# and .Net applications. Nothing in here is left unexplained and nothing will make you want to give up the course!\nMaybe the world of coding scares you? Maybe you think that applications can only be made by geeks? Well I will change that opinion in under an hour!\nYou will learn the basic concepts, ideas and techniques that you will use to build your future desktop and mobile applications with the popular programming language, C#.\n-------------------------------\nThis course is for complete and utter beginners to programming and C#. If you don't know what fancy words like 'classes' and 'objects' mean then this is the course for you!\n-------------------------------\nSome Things You Will Learn\nHow we store things in a program (Variables)\nHow we \"do\" things in programs (Functions or Methods)\nHow we make templates for ease (Classes)\nAnd more!\n\nA Powerful Skill at Your Fingertips\n\nThis course is your gateway drug into the land of milk and honey (and lucrative software development contracts).\nLearning to program in any language gives you the ability to hire yourself out at rates of $60 - $150 per hour. My last mini project started at a quote of $16,000. I expect that proof of concept to expand to a 6 figure project. I can outsource a lot of that and keep a 50% profit just for organising it!\nThat's the kind of revenue you can expect eventually - but you have to start somewhere!\n\n\nThat \"Somewhere\" Starting Point is Here\n\nThis course is the best way for you to learn an award winning foundation in software development. I know it's the best because I started out as a beginner coder after being a dance teacher. You can imagine what a seamless transition that was!\nComing from a non development background I can completely sympathise with where you are as a beginner. That's why everything is explained simply and clearly - I want you to understand everything I say. I want you to be able to create your own software. I want you to succeed!\nJoin this course now and begin your journey towards the most lucrative, adventurous and exciting career path you can imagine!",
      "target_audience": [
        "Beginners to programming and C# should take this course",
        "Experienced programmers should not take this course"
      ]
    },
    {
      "title": "Python GUI Programming Using PyQt5",
      "url": "https://www.udemy.com/course/python-gui-programming-using-pyqt5/",
      "bio": "Build Python GUI Desktop Applications With PYQT and Master Sqlite",
      "objectives": [
        "The fundamentals of Python GUI programming.",
        "Understand how to create your own Python GUI applications with the PYQT Library.",
        "Learn how to use advanced Python functions",
        "Learn to Build commercial Desktop Applications with PYQT5",
        "Get the most out of the sqlite database for Python projects"
      ],
      "course_content": {
        "Basic PyQt5 Widgets": [
          "Installing PyQt5 Package",
          "Creating a Simple PyQt5 Window",
          "Using Label Widget",
          "Using Buttons",
          "Using LineEdit Widget",
          "Using Images",
          "Using CheckBoxes",
          "Using ComboBox Widget",
          "Using RadioButtons",
          "Using MessageBox Widget",
          "Using a SpinBox for our Application",
          "Using Text Editor Widget",
          "Using Timer Widget",
          "Using List Widget"
        ],
        "Rock Paper Scissors Game": [
          "What We are Going to Build",
          "Creating Game Window Part1",
          "Creating Game Window Part2",
          "Creating Play Game Function",
          "Creating Stop Game Function"
        ],
        "Advanced PyQt5 Widgets": [
          "Using HorizontalBox Layout",
          "Using VerticalBox Layout",
          "Using Layouts Together",
          "Using Form Layout",
          "Using Slider Widget",
          "Using Table Widget",
          "Using Tab Widget",
          "Using Menu Widget",
          "Using ToolBar",
          "Using OpenFile Dialog",
          "Using Font and Color Dialog",
          "Using Grid Layout",
          "Using ProgressBar Widget"
        ],
        "My Employees App": [
          "What we are Going to Build",
          "Creating App's Main Window",
          "Creating Layouts for App",
          "Creating Right Layout's Widgets",
          "Creating Database and Tables",
          "Creating Add Employee Window",
          "Creating Layouts for Add Person Window",
          "Creating Top Layout's Widgets",
          "Creating Bottom Layout's Widgets",
          "Using Style Sheet for Widgets",
          "Uploading Images to Project Directory",
          "Adding Records into Database",
          "Using Window Close Event",
          "Getting Records from Database and Listing Them",
          "Displaying First Record",
          "Creating Single Click Event for the List Widget",
          "Deleting a Record from Database",
          "Creating Update Window",
          "Creating Design of Update Window",
          "Creating Design of Update Window Part2",
          "Creating Update Function for Employee"
        ],
        "Music Player App": [
          "What we are Going to Build",
          "Creating Main Window",
          "Creating Layouts for Application",
          "Creating progressbar Widget",
          "Creating Buttons",
          "Creating Slider and Playlist",
          "Adding Sounds to Playlist",
          "Shuffling Playlist",
          "Playing Sounds",
          "Creating Function of Volume Slider",
          "Creating Mute Function",
          "Updating progressbar",
          "Creating Timer for Sounds",
          "Creating Previous Song Function",
          "Creating Next Song Function",
          "Using Style File for Widgets",
          "Creating Style Function for progressbar",
          "Creating Style Function for listwidget"
        ],
        "Product Management App": [
          "What we are Going to Build",
          "Creating Main Window",
          "Creating Toolbar Widget",
          "Creating Tab Widget",
          "Creating tab1 Layouts",
          "Creating Table Widget",
          "Creating Other Widgets",
          "Creating Widgets for Members Tab",
          "Creating Database",
          "Creating Add Product Window",
          "Creating Layouts for Window",
          "Creating Widgets for Window",
          "Uploading Images",
          "Inserting Products Into Database",
          "Creating Add Member Window",
          "Creating Design of Add Member Window",
          "Inserting Members Into Database",
          "Displaying Products",
          "Displaying Members",
          "Creating Double Click Event for Products",
          "Creating Design of Window",
          "Creating Widgets for Window",
          "Updating Image of Product",
          "Updating Product",
          "Deleting Products",
          "Creating Display Member Window",
          "Creating Layouts for Members Window",
          "Creating Widgets for Members Window",
          "Deleting Members from Database",
          "Updating Members",
          "Searching Products",
          "Searching Members",
          "Listing Products",
          "Creating Sell Product Window",
          "Creating Sell Product Window's Widgets",
          "Getting Values from Database for Products",
          "Updating Values For Products",
          "Creating Submit Window",
          "Creating Submit Window's Widgets",
          "Creating Submit Window's Widgets part2",
          "Finishing Sell Product Window",
          "Creating Widgets of Statistics Window",
          "Displaying Statistics",
          "Creating Style Sheet Functions part1",
          "Creating Style Sheet Functions part2"
        ],
        "Extra Information - Source code, and other stuff": [
          "Source Codes",
          "Bonus Lecture and Information"
        ]
      },
      "requirements": [
        "A basic knowledge of Python is recommended - A good pre-requisite would be the Python Masterclass available on this channel",
        "A computer running Windows or Linux, or a Mac so that the free IDE can be downloaded and install (full instructions included)."
      ],
      "description": "Python programmers are among the highest paid developers on the planet.  Lots of programmers are trying to build an edge as Python developers in order to stand out of the crowd.\nOne of the best ways for you to do this is by being able to create applications in Python that are cross-platform, and have a graphical user interface (GUI).\nThis course will allow you to add GUI programming using PYQT5 to your box of tricks.\n\nPYQT is a set of bindings that enable you to use the QT toolkit.    QT was created nearly 25 years ago and is continually improved, and is one of the most popular toolkits of it's type available.   Many companies have turned to QT to bring cross platform capabilities to their applications.\nProgrammers who are experienced with QT, and by extension PYQT are in high demand.\nThe latest version of PYQT is 5, so this course focuses on that version - PYQT5.\nIf you are looking to learn Python GUI programming and specifically QT and PYQT5 then this is the course for you.\nVolkan Atış, your instructor is a very experienced developer, and knows Python GUI application development inside out.  He is here to pass on those skills to you.\nWhats covered in the course?\nPython GUI Programming using PYQT5.\nNot only will you learn how to use Python to build Desktop applications, but Volkan will take you on a journey where you will also explore advanced GUI programming, creating actual Python applications, using Sqlite advanced database queries and loads more!\nKey topics in the course include:-\nPyQt5.\nPython GUI programming (beginner and advanced).\nPython advanced GUI programming.\nPython PyQt5 widgets.\nCreating real Python applications.\nSqlite advanced database queries.\nPython PyQt5 module widgets.\n\n\nWhat you will learn in this course?\nYou will learn how to build real GUI Python programs using PYQT5 and by the end of the course will be a super productive and skilled Python PYQT5 programmer.\n\nVolkan Atış, your instructor is an expert Python developer so you can be assured you are learning from a true professional and learning the real-world skills you need to know to succeed.\nIf you are ready to get started, click on that enroll button and start taking your Python GUI skills to new levels with PYQT5.",
      "target_audience": [
        "If you are a beginner programmer, then this course is probably not for you. In that scenario consider taking the Python Masterclass from this channel.",
        "Programmers who have a reasonable understanding of Python, and are ready to take their skills to new levels.",
        "Existing Python programmers who want to build GUI applications using TkInter."
      ]
    },
    {
      "title": "The Ultimate Python Masterclass: Build 24 Python Projects",
      "url": "https://www.udemy.com/course/python-masterclass-course/",
      "bio": "Python course for beginners, Learn Python,Data Analysis, PyQt6, Django, Flask, OpenCV, Python Projects and a lot more.",
      "objectives": [
        "Get Noticed By Top Companies By Building A Portfolio of 24 Real World Python Projects, Qualify for a Python Developer Jobs.",
        "Learn Python & Entire Frameworks Right From the Basics, No Prior Coding Knowledge Required.",
        "Learn How To Build Production Level Full Stack Web Applications With Python & Django",
        "Learn How To Use Python To Automate Social Media Posts Using Selenium",
        "Build Real World GUI Based Desktop, Database Oriented Applications in Python using Tkinter",
        "Learn How To Process Images & Videos Using OpenCV & Python",
        "Build Your Own Web Scraping Automation Tool Using Python",
        "Build Database Oriented Desktop Apps with Python, PostgreSQL & Tkinter.",
        "Learn How to Build Full Stack Web Applications with Python & Flask",
        "Learn The Most Popular Data Analysis Library Pandas & Perform Aata Analysis On A Comlpex Dataset Using Python & Pandas",
        "Learn Object Oriented Programming in Python",
        "Learn How To Perform File Compression & Decompression Using Python",
        "Analyse Supermarket Sales Data Using Exploratory Data Analysis With Python & Pandas",
        "Build a QR Code Generator Using Python To Convert URLs Into QR Codes",
        "Build A Text-To-Speech Converter Using Python",
        "Learn Cryptography By Hashing Passwords in Python",
        "Build A Production Level Full Stack Budget Tracker Web Application with Python & ChartJS",
        "Build A Desktop Based Calculator App Using Python & Tkinter",
        "Build A Video Downloader App with Python",
        "Learn PyQt6 To Build Real World Desktop Applications",
        "Build A Calculator App with PyQt6",
        "Build A Notepad App with PyQt6"
      ],
      "course_content": {
        "Introduction": [
          "Introduction To The Course"
        ],
        "Introduction To Python Programming Language": [
          "Python A High Level Programming Language",
          "Python A General Purpose Programming Language",
          "Python A Dynamic Typing & Garbage Collection In Python",
          "Quiz: Introduction To Python",
          "How To Use Section Notes For Effective Learning",
          "Section Notes",
          "Up Next"
        ],
        "Python & Pycharm Installation": [
          "Python Installation For Windows Users",
          "Python IDE PyCharm Installation For Windows Users",
          "Python Installation On Mac",
          "Python IDE PyCharm Installation On Mac",
          "Python Installation On Linux",
          "Python IDE PyCharm Installation On Linux",
          "How To Fix Installation Issues"
        ],
        "Python Shell To Write & Execute Code": [
          "Python Shell On Windows",
          "Python Shell On Mac",
          "Python Shell On Linux"
        ],
        "Python Basic Concepts": [
          "Python Basics: Basic Arithmetic Operations In Python",
          "Python Basics: Exponent & Modulus Operators",
          "Python Basics: Creating Strings & Using Escape Characters",
          "Python Basics: Accepting User Input",
          "Python Basics: Concatenation Of Strings",
          "Python Basics: Data Types",
          "Python Basics: Variable Declaration & Assignment",
          "Python Basics: Naming Conventions For Variables",
          "Python Basics: Operators",
          "Python Basics: Logical Operators",
          "Python Basics: Hello World Program Using PyCharm On Windows",
          "Python Basics: Hello World Program Using PyCharm On Mac",
          "Python Basics: Hello World Program Using PyCharm On Linux",
          "Python Basics: Adding Comments To Your Code",
          "Python Basics: Accepting Input & Adding Numbers",
          "Python Basics: Creating Username & Email Using Concatenation",
          "Python Basics: Comparing User Strings",
          "Python Basics: Creating A Simple Interest Calculator",
          "Python Basics: F Strings",
          "Python Basics: Creating A BMI Calculator",
          "Python Basics: Section Source code",
          "Hello World",
          "Division",
          "String Concatenation",
          "Escape Characters",
          "Escape Characters 2",
          "Volume of a container",
          "Python Basics",
          "Section Notes"
        ],
        "Python Data Structures: Lists, Dictionaries & Sets": [
          "Python Data Structures: Lists",
          "Python Data Structures: Storing Different Data Types In A List",
          "Python Data Structures: Negative Indexing",
          "Python Data Structures: List Slicing",
          "Python Data Structures: List Slicing Using Negative Indexing",
          "Python Data Structures: In & Not In Operators",
          "Python Data Structures: List Functions",
          "Python Data Structures: Addition & Multiplication Operation On Lists",
          "Python Data Structures: Nesting Lists",
          "Python Data Structures: Mutability Of Lists",
          "Python Data Structures: Tuples",
          "Python Data Structures: Dictionaries",
          "Python Data Structures: Creating Dictionaries Using dict()",
          "Python Data Structures: Get Method",
          "Python Data Structures: Update & Pop Method",
          "Python Data Structures: Items & Keys Method",
          "Python Data Structures: Set & Creating Sets",
          "Python Data Structures: Empty Set",
          "Python Data Structures: Set Operations",
          "Python Data Structures: Add & Remove Set Methods",
          "Python Data Structures: Searching Items In A List",
          "Python Data Structures: Adding & Removing Items",
          "Python Data Structures: Adding List Item At A Position",
          "Python Data Structures: Adding Products To A Dictionary",
          "Python Data Structures: Deleting Items From Dictionary",
          "Python Data Structures: Editing Dictionary Values",
          "Python Data Structures: Source code",
          "Creating A List",
          "Accessing List Items",
          "List Slicing",
          "Adding Item To List",
          "List, dictionaries and sets",
          "Coding Challenge 2",
          "Coding Challenge 2 Solution",
          "Section Notes"
        ],
        "Python Control Structures": [
          "Python Control Structures If Conditional Statement",
          "Python Control Structures: Understanding Indentation",
          "Python Control Structures: Accept User Input & Check If Condition",
          "Python Control Structures: Elif Statement",
          "Python Control Structures: Nested If",
          "Python Control Structures: Nested If Example",
          "Python Control Structures: Range Function",
          "Python Control Structures: For Loop",
          "Python Control Structures: Looping Through List",
          "Python Control Structures: Looping Through A Dictionary",
          "Python Control Structures: While Loop",
          "Python Control Structures: Break Statement",
          "Python Control Structures: Continue Statement",
          "Python Control Structures: Adding Items To Cart Using For Loop",
          "Python Control Structures: Adding Items Using While Loop",
          "Python Control Structures: Creating A List Of Products",
          "Python Control Structures: Adding Items To Cart",
          "Python Control Structures: Displaying Cart Items",
          "Python Control Structures: Incrementing The Quantity",
          "Python Control Structures: Calculating Total Cart Value",
          "Python Control Structures: Source code",
          "Section Notes",
          "Coding Challenge 3",
          "Coding Challenge 3 Solution",
          "Control Structures"
        ],
        "Python Functions": [
          "Python Functions: Introduction",
          "Python Functions: Passing Arguments To Functions",
          "Python Functions: Keyword Arguments",
          "Python Functions: Default Parameters",
          "Python Functions: Making Function Return A Value",
          "Python Functions: Calling A Function In Other Function",
          "Python Functions: Making A Function Return Multiple Values",
          "Python Functions: Passing List To A Function",
          "Python Functions: Returning List",
          "Python Functions: Local & Global Variables",
          "Python Functions: Accessing Global Variables Inside A Function",
          "Python Functions: Check If A String Is A Palindrome",
          "Python Functions: Function To Check Palindrome",
          "Python Functions: EMI Calculator",
          "Python Functions: Recursion In Python",
          "Python Functions: Factorial Using Recursion",
          "Python Functions: Variable Length Positional Arguments",
          "Python Functions: Variable Length Keyword Arguments",
          "Python Functions: Decorators",
          "Python Functions: Another Way Of Using Decorator",
          "Python Functions: Decorating Functions Accepting Arguments",
          "Python Functions: Decorating Functions Returning Values",
          "Python Functions: Source code",
          "Coding Challenge 4",
          "Coding Challenge 4 Solution",
          "Functions",
          "Section Notes"
        ],
        "Python Modules": [
          "Python Modules: Introduction",
          "Python Modules: Creating Our Own Module",
          "Python Modules: Random Module",
          "Python Modules: Datetime Module",
          "Python Modules: Source Code",
          "Section Notes",
          "Modules"
        ],
        "Python Errors & Exceptions": [
          "Python Errors & Exceptions: Introduction to errors & exceptions",
          "Python Errors & Exceptions: Syntax error",
          "Python Errors & Exceptions: Logical error",
          "Python Errors & Exceptions: Runtime error",
          "Python Errors & Exceptions: Try & except block",
          "Python Errors & Exceptions: Else block",
          "Python Errors & Exceptions: Finally block",
          "Python Errors & Exceptions",
          "Coding Challenge 5",
          "Coding Challenge 5 Solution",
          "Source Code",
          "Section Notes"
        ]
      },
      "requirements": [
        "No coding, or technical knowledge required.",
        "A computer with internet connection.",
        "No paid tools are required as the tools required for this course are free.",
        "Passion and curiosity to learn someting new."
      ],
      "description": "The Ultimate Python Masterclass: Build 24 Python Projects\nThis course is designed for beginners who want to learn Python programming language from scratch.\nLearn Python right from the basics, understand each and every Python concept in depth and test your knowledge by building a portfolio of production level real world Python projects.\nThe course contains two parts:\n1. Python Basics (Section 1 to Section 14)\n2. Python Projects(Section 15 to Section 44 )\nHere Is What You Get By Enrolling In This Course:\nWord-By-Word Explanation: In the entire course, I explain each line of code, without skipping a single line of code.\nHigh Quality Content: Over 77+ hours HD(1080p) Videos.\nWell Structured & Easy To Learn: Course has been specially designed to make it easy for the students to learn Python, Django, Data Analysis, PyQt6, Flask, Tkinter, OpenCV, File Compression, Desktop App development with PostgreSQL & Web Scraping.\n24 X 7 Support: I will always be there to guide you in your journey to become Python expert.\n\n\nHere Is Everything You Will Learn In This Complete Course:\nIn this hands-on course, you will learn Python right starting from scratch to the level where you can build almost anything with it, be it a fully functional database oriented web application or an automation tool.\nThis course will teach you Python right from scratch from a very basic level and will gradually move you towards more advanced topics.\nWe not just cover all the Python basics but also the most popular Python libraries such as Django, Flask, Tkinter & Selenium.\n\n\nThe Complete Course is divided into 17 Major sections.\nHere is a brief description of what you will learn in each section.\n\n\nSection 1: Python basics.\nThis section covers all the basics of Python, starting right from installing the required tools to covering topics like mathematical operators, strings, accepting user input, string operations, variables, conditionals like if, elif, control structures such as while & for loop, functions, modules & packages, lists, file handling, OOP in Python, regular expressions. Almost every basic Python concept is covered in this section.\n\n\nSection 2: Make GUI In Python Using Tkinter.\nOnce done with the basics, we know learn the Tkinter library which allows us to create desktop based applications with Python. We learn how to create GUI apps using Tkinter & Python and also build a fully functional Desktop app i.e a calculator.\n\n\nSection 3: Making Database Oriented Desktop Apps With Python & PostgreSQL.\nMaking a simple desktop app alone isn't sufficient, it needs a backend database to store some data. To do the same we learn how to connect our desktop apps to the backend. In this section we build a student management system software using Python, Tkinter to design the GUI & PostgreSQL database to store the data for our application in the backend.\n\n\nSection 4: File Compression & Encoding In Python.\nIn this section we will learn how to perform file compression in Python to reduce file size. We also learn how to de-compress the compressed data and the methods used for it. We build a GUI based file compression tool using Python & Tkinter and a file compression library.\n\n\nSection 5: Text To Speech Converter Using Python.\nText could be converted into speech/audio and that is exactly what is being covered in this specific section where we build a tool that generates audio from a given text. Not just that, we also learn how to convert an entire text file into mp3 which can be used to generate audiobooks from ebooks. We also learn how to convert the user input into speech.\n\n\nSection 6: Building A QR Code Generator With Python & Tkinter.\nWe build a simple tool that can convert any link and convert it into a QR code that can be scanned via any smartphone that has a QR code reader. This tool creates QR code images that can be shared anywhere and the entire tool is built using Python & Tkinter.\n\n\nSection 7: Video Downloader App With Python & Tkinter.\nIn this section we built another tool to build our Python skills. This tool accepts a video URL, asks us to select the path where we want to download the specified video and then downloads that video to the specified path on our operating system. Not just that, this tool will also be able to convert video files into pure mp3 files as well. We build this tool from scratch right from architecting the code to designing the functionality to creating a user interface, all of it done using Python.\n\n\nSection 8: Building A Credit Card Validator In Python Using Lhun's Algorithm.\nIn this section we will learn what is Lhun's algorithm and how it is used to validate credit cards. We learn how Lhun's algorithm can be implemented in Python and used to validate credit card numbers. This section is designed to teach algorithmic thinking and implementation in Python.\n\n\nSection 9: PyQT6\nIn this section we will learn PyQt which is one of the most popular Python libraries to build desktop applications using the QT Framework. We will learn the latest version of PyQt i.e PyQt6 and learn how it is different from Tkinter. We will cover all the essential concepts about building GUIs with PyQt and build a couple of sample applications like a calculator app and a fully functional notepad app. We will also build a fully functional paint application which allows us to draw using a pencil and a marker and also allow us to choose colours to draw, we can also save these drawings as an image file on our computer. In this paint application we learn how to track mouse movements and mouse actions such as clicking and releasing of a button.\n\n\nSection 10: Data Analysis With Python & Pandas.\nPython is being widely used in the data science domain and hence it is important to learn how to use Python to analyse data. Hence in this section we learn how to use the tools and techniques used to perform data analysis. We start off by learning the Pandas library which is used to perform data analysis and all the basic concepts like DataFrames, Reindexing, Indexing, Broadcasting and also learn how to perform data plotting and visualisation with the Matplotlib library.\nIn this section we also have a data science project which is based on analysing supermarket data to find insightful information which helps take better business decisions. We also learn how to represent data visually using multiple types of charts and bar graphs built using matplotlib.\n\n\nSection 11: Python Web Framework Django.\nThis section will teach you how to build full-stack web applications with Python & Django 3. Django is one of the most popular web frameworks for Python and is used to program the back-end side of out web app. In this section we will learn Django right from basics and will build a simple book store web application. We will learn how to create models, how to route URL requests, how to create different views for our web app, how to integrate HTML templates and a lot more.\nIn this section we also build a fully functional todo list application built using Django. This application performs all the basic CRUD operations which stands for Create, Read, Update & Delete data from the database. While building this application, we ensure that all the important concepts of Django are throughly covered and implemented.\n\n\nSection 12: Python Web Framework Flask.\nFlask is a micro web framework for Python used to build simpler web apps. If you want to develop some simple and small websites, you can do so using Flask. In this section we cover flask basics suck as Routing, Dynamic URLs, Templates, passing data to the server & site cookies.\n\n\nSection 13: REST APIs Using Python & Django Rest Framework.\nIn this section we learn how to build our own REST APIs using the Django Rest Framework. If you already have a Django web app built, you can create API endpoints for it using the Django Rest Framework. In this section we will build a fully functional REST API with features such as search, filtering & authentication.\n\n\nSection 14: Web Scraping in Python.\nPython can also be used to crawl websites and gather data from it. In this section we learn the same, we build a web crawler which crawls up any website of our choice and gathers links from it. Web crawlers are used by many search engines to rank websites and in this section we learn how to build a smaller version of it using Python.\n\n\nSection 15: Automation with Python & Selenium.\nPython is widely used for automation as well, especially for testing. Selenium web driver is one such tool which has been built for automating tests but the same can be used for automating other browser based tasks as well. In this section we learn how to automate tasks using Selenium and will also build a Facebook Bot that automatically posts status for us.\n\n\nSection 16: Best Practices: Writing Clean & Efficient Python Code.\nTo be a good Python engineer/ developer you need to know how to write clean, concise and efficient Python code. In this section we learn some of the best practice that you must follow while writing Python code so.\n\n\nSection 17: Network Programming In Python Using Sockets: Building A Chat Application.\nNetworking is an important concept in IT & Computer Science as it facilitates communication between devices or servers. Keeping this in mind, this section covers the basic networking concepts and we learn how to implement them using Python by building a simple desktop based chat application.  In this section we learn what is an IP address, what are ports, sockets and buffers and how they could be used to implement a communication program. We lean how sockets can be used for communication between process on the same and on different devices.\n\n\nSection 18: Image Processing With Python & OpenCV.\nPython can also be used to process and manipulate images and videos. In this section we learn how to use OpenCV library with Python to manipulate images. We learn some interesting things like capturing webcam video, tracking images from a live video, different image thresholding techniques, image blurring, averaging and Gaussian filtering.\n\n\n\n\nSo let's begin the journey of becoming an expert in Python.\nIn addition to the Udemy 30-day money back guarantee, you  have my personal guarantee that you will love what you learn in this  course. If you ever have any questions please feel free to message me  directly and I will do my best to get back to you as soon as  possible!\n\n\nMake sure to enrol in the course before the price changes.\nTake yourself one step closer towards becoming a professional Python developer by clicking the \"take this course button\" now!\nJoin the journey.\nSincerely,\nAshutosh Pawar",
      "target_audience": [
        "Beginners who want to learn Python.",
        "Beginners who want to learn Django.",
        "Beginners who want to learn Flask.",
        "Web Developers.",
        "Students who wish to learn a new skill to develop their career.",
        "Who want to get a job as a Python developer."
      ]
    },
    {
      "title": "Go - The Complete Guide",
      "url": "https://www.udemy.com/course/go-the-complete-guide/",
      "bio": "Learn Go (\"Golang\") from the ground up & in great depth by building multiple demo projects, incl. a REST API",
      "objectives": [
        "Learn Go from the ground up & in great depth",
        "Learn about values, variables, functions, pointers, packages & more",
        "Learn how to structure and store data with structs, arrays, slices & maps",
        "Work with Go's concurrency features like Goroutines & channels",
        "Build multiple demo projects",
        "Build a REST API with authentication & a SQL database as a major course project",
        "Join more than 2,500,000 students who've been taught by me across all my courses"
      ],
      "course_content": {},
      "requirements": [
        "Basic programming experience (with any language, doesn't matter) is strongly recommended",
        "NO prior Go knowledge is assumed"
      ],
      "description": "Unleash Your Potential - with Go and this course!\nWelcome to \"Go - The Complete Guide,\" the definitive online course meticulously designed for both newcomers and professionals eager to excel in the dynamic realm of Go programming.\n\n\nWhy Go?\nIn an era where efficiency and performance are paramount, Go stands out as a powerhouse. Designed by Google, it combines simplicity, robustness, and speed, making it the go-to language for modern backend development, cloud services, and high-performance applications.\nCourse Overview\nThis course is your comprehensive journey through the world of Go. From basic syntax to advanced features, this course covers every aspect needed to master Go.\nHere's what you'll learn:\nGo Fundamentals: Dive deep into Go syntax, variables, types, and control structures.\nConcurrent Programming: Unravel the power of Go's concurrency model with goroutines and channels.\nComplex Data Structures: Master arrays, slices, maps, and struct types for efficient data manipulation.\nAdvanced Features: Explore interfaces, error handling, and package management.\nReal-World Applications: Build practical, real-world applications to consolidate your learning.\nOptimization Techniques: Learn best practices and optimization techniques for writing efficient Go code.\nIn this course, you'll learn about all those core Go concepts by building multiple demo projects - including a complete REST API with user authentication & SQL database access!\nWho Should Enroll?\nThis course is tailored for:\nDevelopers looking to add a powerful language to their toolkit.\nBackend engineers aspiring to build scalable, high-performance applications.\nProfessionals seeking a deep, practical understanding of Go.\nWhy Choose This Course?\nExpert Instruction: Learn from an experienced Go developer & bestselling online course instructor.\nFlexible Learning: Access the course anytime, anywhere, at your pace.\nDemo Projects: Apply your knowledge by building multiple demo projects - e.g., a complete REST API\nCertificate of Completion: Earn a certificate to showcase your newfound Go expertise.\nReady to Go?\nEmbark on your journey to mastering Go. Enroll now and transform your career with the power of Go programming.",
      "target_audience": [
        "Beginner Go developers who want to learn the language in great depth",
        "Experienced Go developers who need a refresher",
        "Developers who got started with Go and want to dive deeper"
      ]
    },
    {
      "title": "Data Structures and Algorithms: Deep Dive Using Java",
      "url": "https://www.udemy.com/course/data-structures-and-algorithms-deep-dive-using-java/",
      "bio": "Learn about Arrays, Linked Lists, Trees, Hashtables, Stacks, Queues, Heaps, Sort algorithms and Search algorithms",
      "objectives": [
        "Learn the strengths and weaknesses of a variety of data structures, so you can choose the best data structure for your data and applications",
        "Code an implementation of each data structure, so you understand how they work under the covers",
        "Learn many of the algorithms commonly used to sort data, so your applications will perform efficiently when sorting large datasets",
        "Learn what’s available in the JDK for storing and sorting data, so you won’t waste time reinventing the wheel"
      ],
      "course_content": {
        "Introduction": [
          "Course Introduction and Updates by Tim Buchalka",
          "Data Structures and Algorithms: Course Overview",
          "IntelliJ Ultimate Edition: 6-Month Free Trial Instructions",
          "JDK 8 Installation Guide for Windows Users",
          "JDK 8 Installation Guide for macOS Users",
          "JDK 8 Installation Guide for Linux (Ubuntu)",
          "IntelliJ IDEA Installation Guide for Windows",
          "IntelliJ IDEA Installation Guide for macOS",
          "IntelliJ IDEA Installation Guide for Linux (Ubuntu)",
          "Understanding Data Structures: An Introduction",
          "Understanding Algorithms: An Introduction"
        ],
        "Arrays and Big-O Notation": [
          "Arrays: A Data Structure Introduction",
          "Java Arrays: A Quick Review and Refresher",
          "Big-O Notation: Understanding Time Complexity",
          "Arrays in Memory: Storage and Access",
          "Array Operations: Big-O Time Complexity"
        ],
        "Sort Algorithms Deep Dive": [
          "Introduction to Sorting Algorithms",
          "Bubble Sort Explained: Theory and In-Place Sorting",
          "Bubble Sort Implementation in Java: Step-by-Step Guide",
          "Stable vs. Unstable Sorting Algorithms Explained",
          "Selection Sort: In-Place Sorting Algorithm Explained",
          "Selection Sort Implementation in Java: A Practical Guide",
          "Insertion Sort: Theory and Step-by-Step Explanation",
          "Insertion Sort: Theory and Step-by-Step Explanation",
          "Shell Sort: An Efficient Sorting Algorithm Explained",
          "Shell Sort Implementation in Java: A Step-by-Step Guide",
          "Recursion Explained: A Deep Dive into Recursive Methods",
          "Merge Sort: Divide and Conquer Sorting Algorithm Explained",
          "Merge Sort Implementation in Java: A Practical Guide",
          "Quick Sort: Divide and Conquer Sorting Algorithm",
          "Quick Sort Implementation in Java: A Practical Guide",
          "Counting Sort: Linear Time Sorting Algorithm Explained",
          "Counting Sort Implementation in Java: A Step-by-Step Guide",
          "Radix Sort: Sorting Algorithm for Fixed Width Data",
          "Stable Counting Sort: Theory and Implementation",
          "Radix Sort Implementation in Java: A Practical Guide",
          "Sorting Arrays in Java: Using the Arrays Class",
          "Merge Sort Challenge: Descending Order Sorting",
          "Merge Sort Challenge Solution: Descending Order",
          "Insertion Sort Challenge: Recursive Implementation",
          "Insertion Sort Challenge Solution: Recursive Implementation",
          "Radix Sort Challenge: String Sorting Implementation",
          "Radix Sort Challenge Solution: String Sorting"
        ],
        "Mastering Lists in Java: Implementations and Applications": [
          "Introduction to Lists in Java: Exploring the java.util.List Interface",
          "Understanding Abstract Data Types (ADTs): Definitions and Core Concepts",
          "Deep Dive into ArrayLists: Capacity, Size, and Dynamic Array Implementation",
          "Vectors in Java: Thread-Safe Operations and Synchronization vs. ArrayList",
          "Singly Linked Lists: Conceptual Overview and Node-Based Data Organization",
          "Implementing a Singly Linked List in Java: Node Creation and List Operations",
          "Doubly Linked Lists: Theory, Bidirectional Traversal, and Node Relationships",
          "Implementing a Doubly Linked List in Java: Enhancing Node Connections",
          "JDK LinkedList Class: Exploring Java's Built-in Doubly Linked List Features",
          "Linked Lists Coding Challenge 1: Adding Before a Node in a Linked List",
          "Linked List Challenge 1 Solution Implementing Add Before in a Doubly Linked List",
          "Linked Lists Coding Challenge 2: Sorted Insertion into a Singly Linked List",
          "Linked List Challenge 2 Solution: Maintaining Sorted Order"
        ],
        "Stack Data Structures: Implementation and Use Cases": [
          "Introduction to Stacks: Fundamental Concepts and Applications",
          "Stack Operations and Principles: Understanding LIFO (Last-In, First-Out)",
          "Implementing Stacks with Arrays: Array-Backed Stack Data Structures",
          "Using JDK's LinkedList for Stacks: Leveraging Built-in Java Functionality",
          "Stack Challenge: Develop a Palindrome Checker Using Stack Operations",
          "Palindrome Checker Using Stacks: A Step-by-Step Solution and Code Walkthrough"
        ],
        "Mastering Queue Data Structures: Implementation and Applications in Java": [
          "Queue Data Structures: Introduction and Core Concepts for Beginners in Java",
          "Queue Fundamentals: FIFO Operations, Theory, and Time Complexity Analysis",
          "Implementing Queues with Arrays: A Practical Java Coding Guide with Resizing",
          "Enhancing Queues with Circular Arrays: Optimizing Space and Efficiency - Part 1",
          "Advanced Circular Queue Implementation: Resizing, Unwrapping, and Optimization",
          "Exploring Queue and Deque Interfaces in the Java Development Kit (JDK)",
          "Coding Challenge: Test Palindrome Recognition Skills Using a Queue and a Stack",
          "Palindrome Checker: Solution Using Stack and Queue in Java Detailed Walkthrough"
        ],
        "Hash Tables: Mastering Key-Value Data Structures for Efficient Data Retrieval": [
          "Introduction to Hash Tables: Key-Value Pairs, and Advantages in Data Access",
          "Hash Table Fundamentals: Hashing, Keys, Values, Load Factor and Collisions",
          "Implementing Hash Tables with Arrays: A Practical Java Coding Guide",
          "Collision Resolution in Hash Tables with Linear Probing and Rehasing Techniques",
          "Implementing the Remove Method when Using Linear Probing in Hash Tables",
          "Rehashing After Removing with Linear Probing for Improved Hash Table Performance",
          "Handling Hash Table Collisions with Chaining: A Linked List Approach",
          "Exploring HashMap, Hashtable, and LinkedHashMap in the Java Development Kit",
          "Bucket Sort Algorithm Explained: Understanding the Theory and Implementation",
          "Implementing the Bucket Sort Algorithm in Java: A Step-by-Step Code Example",
          "Hashtables Challenge #1: Develop a Hashing Function for Integer Array Mapping",
          "Hashing Function Challenge Solution: Creating an Integer to Array Index Mapper",
          "Hashtables Challenge #2: Removing Duplicates from a LinkedList Using a HashMap",
          "Hash Table Challenge #2 Solution: Eliminate Duplicates in a LinkedList Expertly"
        ],
        "Optimized Search Algorithms in Java: Linear and Binary Search": [
          "Introduction to Searching Algorithms: Arrays and Basic Concepts",
          "Implementing Linear Search: Step-by-Step Java Code and Time Complexity",
          "Implementing Linear Search: Step-by-Step Java Code and Time Complexity",
          "Binary Search Java Implementation: Iterative and Recursive Approaches"
        ],
        "Mastering Tree Data Structures: Implementation and Optimization in Java": [
          "A Comprehensive Introduction to Tree Data Structures in Java",
          "Fundamental Theory and Terminology of Tree Data Structures in Java",
          "Deep Dive into Binary Search Trees: Characteristics and Theory",
          "Implementing Insertion Operations in Binary Search Trees with Java",
          "Mastering Tree Traversal Techniques: In-Order, Pre-Order and Post-Order",
          "Implementing Get, Min, and Max Operations on Binary Search Trees",
          "Binary Search Tree Deletion: Handling Cases with Zero or One Child",
          "Implementing Node Deletion in Binary Search Trees: Zero and One Child",
          "Mastering Binary Search Tree Deletion: Handling Nodes with Two Children",
          "Implementing Deletion of Nodes with Two Children in Binary Search Trees",
          "Exploring Tree-Related Classes and Structures within the Java JDK",
          "Challenge Exercise: Implementing Pre-Order Traversal in Binary Trees",
          "Solution and Explanation for Pre-Order Traversal in Binary Trees",
          "Hands-On Practice: Insertion and Deletion Operations in Binary Trees"
        ],
        "Mastering Heaps: Priority Queues and Heapsort Algorithm in Java": [
          "Comprehensive Introduction to Heap Data Structures in Java",
          "Understanding the Underlying Theory and Properties of Heaps",
          "Efficiently Storing and Representing Heaps as Arrays in Java",
          "Implementing Insertion Operations in Max-Heaps Using Java",
          "Theory and Concepts of Deletion Operations in Heap Data Structures",
          "Implementing Deletion in Heaps: Handling All Cases with Java Code",
          "Implementing the Peek Operation for Efficient Heap Data Access",
          "Priority Queues: Understanding and Utilizing Heap-Based Implementations",
          "Heapsort Algorithm Explained: In-Place Sorting with Max-Heaps (Theory)",
          "Implementing the Heapsort Algorithm in Java: A Step-by-Step Guide"
        ]
      },
      "requirements": [
        "Previous experience with an object-oriented programming language, preferably Java (but any OO language is fine)."
      ],
      "description": "So you've worked with the basics of data structures and algorithms in Java (or another OO programming language) but feel like you need a deeper knowledge of how things work.\nMaybe you have taken other courses on this topic that focus more on teaching how to pass job interview tests (theory) instead of how to make good choices for the programs you develop (implementation).\nOr maybe you are ready to move from a junior programming position to a more senior one and need to get skilled in advanced concepts like data structures, and how to apply them to your own projects.\nWhatever the reason, if you are looking for a course that focus on the implementations to give you a complete understanding of how things work, then this is the course for you.\nThis course goes over the theory of how things work, but only to give you what you need to know to understand the implementation covered.\nComplete source code is included and available for you to download.\nThis is a hands-on course!  If you want to try understand things at a deep level, and work on implementations, rather than theory, then again, this is the course for you.\n\nTopics covered:-\nArrays\nLinked Lists\nTrees\nHashtables\nStacks\nQueues\nHeaps\nSort algorithms\nSearch algorithms\nThe course also spends more time than most other courses of its kind looking at what’s available in the JDK. Students wanting to understand how things work \"under the hood\" will benefit enormously from this course.\nWhy learn about data structures and algorithms?\n\nThe reality is, the more you learn about data structures and algorithms, the better a programmer you become.\nWhy?\nBecause, data structures and algorithms are effectively patterns for solving problems.   You want to add as many of them as you can to your skill-set.  By doing so, you will find you solve more problems, and use the right tools for the job, in a more elegant way.  And you will learn a heap of them in this course.\nWhy enrolling in this course is the best decision you can make.\n\nYour instructor, Sarah Ettritch has over 25 years’ software development experience and has been working with Java since JDK 1.1.  She has spent many years creating tools used by developers, which required a deep knowledge of data structures and algorithms, and is perfectly qualified to teach this course.\nMost courses focus on giving you the theory of how things work, so that you can take an interview.  Whilst the theory is important, the knowledge of how to implement these data structures and algorithms are of vital importance.\n\nThis course goes over the theory of how things work, but only to give you what you need to know to understand the implementation covered.   The main focus of the course is to give you a real understanding of how things work under the hood, so that you can apply this to future programming projects.\nIf you want to actually understand how things work, and be able to take that understanding and apply it to your own programs, then this course is for you.\nAfter completing this course, you will have a solid understanding of data structures and algorithms (both the theory, and the implementation).\n\nThe sooner you sign up for this course, the sooner you will have the skills and knowledge you need to increase your job or consulting opportunities.    Java developers with key skills and understanding of data structures and algorithms are in high demand and get paid extremely well.\n\nIf you are ready for that new job promotion or consulting opportunity, it's time to get started.\nWhy not get started today?\nClick the Signup button to sign up for the course",
      "target_audience": [
        "Developers who have some knowledge of Java (or another OO language) looking to understand data structures and algorithms at a deep level"
      ]
    },
    {
      "title": "C# in 6 Hours: From Beginner to Pro!",
      "url": "https://www.udemy.com/course/c-programming-step-by-step-made-easy-for-beginners/",
      "bio": "Master the Fundamentals and Level Up Your C# Programming Skills Quickly and Easily!",
      "objectives": [
        "C# Programming fundamentals",
        "variables, methods, loops, conditions",
        "OOP (Object Oriented Programming) simplified.",
        "Classes, Interfaces and Abstract classes",
        "Encapsulation, Polymorphism, Inheritance",
        "Error and Exception handling",
        "LINQ(Language Integrated Queries)",
        "Delegates, Anonymous methods and Lambda expressions",
        "Func, Action and Predicate",
        "Unit Testing and MOQ Testing",
        "Dependency Injection"
      ],
      "course_content": {},
      "requirements": [
        "None"
      ],
      "description": "Get ready to become a proficient C# programmer with our fully updated course! From beginners to advanced levels, you'll learn all the essential concepts of C# and Object-Oriented Programming in less than 7 hours.\nWe use a step-by-step approach, presenting each topic through small and simple programs, and then combining them into a final project. This method is the easiest way to learn C# that you will ever come across.\nLearning to program is an invaluable skill, and our course is designed to make the learning process easy and enjoyable. Many students struggle with the complex nature of programming, but our course is presented in a simple and straightforward way that makes it accessible to everyone.\nThe course has been tightly edited from a 3-week class, ensuring that you get all the important concepts of C# programming in just a few hours. The videos are designed to keep you engaged, with no pauses or wasted time. It's like watching Tik-Tok videos that teach you how to program!\nBy the end of this course, you will have a strong foundation in C# programming and the skills to take on more advanced topics. Don't miss out on the opportunity to learn C# quickly and easily. Join us today and start your journey to becoming a proficient C# programmer!\nReviews for my courses:\n\"I've tried learning C# on my own, but it always seemed too complex. This course made it so easy to understand, and I was able to build my first program within hours!\" - Sarah L.\n\"The step-by-step approach is fantastic! It's so much easier to follow along and build upon what you've learned in each section. Highly recommend this course to anyone wanting to learn C#.\" - John D.\n\"As a complete beginner to programming, I was nervous about taking this course. But the instructor was so engaging and made everything so clear. I was surprised at how quickly I was able to grasp the concepts of C# programming!\" - Tina M.\n\"I've taken other C# courses before, but this one was by far the best. The videos were edited so tightly, making it easy to follow along and not get bored. I've learned so much and can't wait to take on more advanced topics!\" - David R.\n\"This course is worth every penny! The instructor's teaching style is excellent, and I appreciated the real-life examples used to explain concepts. I now feel confident in my C# programming skills.\" - Emily S.\nJoin our satisfied students and become a proficient C# programmer in just a few hours!",
      "target_audience": [
        "Beginners"
      ]
    },
    {
      "title": "Learn Pro Advanced Python Programming",
      "url": "https://www.udemy.com/course/learn-pro-advanced-python-programming/",
      "bio": "Become a Professional Python Programmer by learning Advance Level Programming & using them to make real Applications",
      "objectives": [
        "Advance Level Programming in Python",
        "Make real time advance applications using Advance Level Concepts",
        "Make Machine Learning Models",
        "Use Machine Learning Models to make real time Applications",
        "Learn the Mathematics behind Machine Learning Models"
      ],
      "course_content": {},
      "requirements": [
        "Basic Knowledge of Python or any programming Level is required"
      ],
      "description": "In this course, I am going to make you a professional programmer by teaching you Advance Level Programming in Python. The Basic of any programming language is not enough to make real time applications therefor, i have covered most of the Advance Level Concepts in depth in this course. As grabbing the main concept behind Advance Topics is not simple therefor, special attention is given to the intuition part of each concept where we gonna understand these concepts with proper animated slides.\nAlso not only understanding these advance concepts are important but to make something real out of it is very important or else there is no reason to learn Advance Programming therefor we will also make real time Advance level Applications in Python using Advance level concepts. We will also learn Machine Learning in Python in depth by covering the Mathematics behind each model as well. Also we will use these Machine Learning Models to make something real out of it.\n\n\nI believe that after taking this course, you gonna feel much more satisfied and comfortable with your programming skill in Python as you will then be a professional programmer who is capable to give any job interview.. Also after taking this course, learning any Advance Level concept in any other language will be 10x more simpler.\n\n\nI wish you very best for the Course.",
      "target_audience": [
        "Anyone curious to learn Advance Level Programming",
        "Anyone curious to make Advance Level Applications",
        "Anyone Curious about Machine Learning Models"
      ]
    },
    {
      "title": "Building Cloud Infrastructure with Terraform",
      "url": "https://www.udemy.com/course/building-cloud-infrastructure-with-terraform/",
      "bio": "Create and manage cloud infrastructure as code",
      "objectives": [
        "Create Infrastructure in AWS and other cloud providers using Terraform",
        "Learn fundamental Terraform syntax",
        "Configure Terraform providers for different Cloud Service Providers",
        "Understand how to use variables, interpolations, and templates",
        "Package Terraform code into re-usable modules",
        "Bootstrap compute resources using Terraform Provisioners",
        "Manage Terraform state both local and remote using AWS object storage"
      ],
      "course_content": {
        "Introduction": [
          "Introduction",
          "Course DISCLAIMER",
          "What is Terraform",
          "Course Lab Guide"
        ],
        "Getting Started with Terraform": [
          "Getting Started with Terraform",
          "Coding with Terraform",
          "Terraform Syntax",
          "Lab 1.1 - Create an AWS Account",
          "Lab 1.2 - Download Terraform",
          "Lab 1.3 - Configure the Terraform AWS Provider",
          "Lab 1.4 - Create your First Resource",
          "Lab 1.5 - Change a Resource",
          "Lab 1.6 - Destroy a Resource"
        ],
        "Terraform Variables and Interpolations": [
          "Terraform Variables",
          "Using Variables",
          "Lab 2.1 - Storing AWS Crendentials in Variables",
          "Lab 2.2 - Create a Compute Resource",
          "Lab 2.3 - Using a Map as a Lookup Table",
          "Lab 2.4 - Setting Variables on the Command Line",
          "Lab 2.5 - Using Output Variables",
          "Interpolations",
          "Lab 2B.1 - Conditionals",
          "Lab 2B.2 - Using $count to Manage Multiple Instances",
          "Lab 2B.3 - Terraform Templates",
          "Lab 2B.4 - Simple Math"
        ],
        "Resource Dependencies": [
          "Resource Depedencies",
          "Lab 3 - Resource Dependencies"
        ],
        "Terraform Provisioners": [
          "Provisioners",
          "Lab 4.1 - Creating an SSH Key Pair",
          "Lab 4.2 - Allow SSH Traffic",
          "Lab 4.3 - Verify Connectivity",
          "Lab 4.4 - Install Apache using a Provisioner",
          "Lab 4.5 - Upload Files using a File Provisioner",
          "Lab 4.6 - Using an External Script with a Remote Execution Provisioner"
        ],
        "Data Sources": [
          "Terraform Data Sources"
        ],
        "Terraform Modules": [
          "Terraform Modules",
          "Lab 6.1 - Using the AWS VPC Module",
          "Lab 6.2 - Creating your own Module"
        ],
        "Terraform State": [
          "Terraform State",
          "Lab 7.1 - Importing an Pre-Existing Resource into Terraform",
          "Lab 7.2 - Configure Remote State using AWS S3"
        ],
        "Extras": [
          "Using an AWS Credentials file with the AWS Terraform Provider"
        ]
      },
      "requirements": [
        "Familiarity with cloud computing concepts, particularly infrastructure as a service and software defined networking.",
        "Experience using the Windows console or Linux shell."
      ],
      "description": "Cloud computing has taken over the IT landscape and is soon to outpace on-premise and in-house data centers as companies are starting to realize the efficiencies, cost savings, and flexibility the cloud can provide. Computing resources can be created and destroyed simply by calling an API. Entire virtual data centers can be created in a matter of minutes or hours.\nWhether your company or application was born in the cloud or transitioning to the cloud, you need tools to build and manage your infrastructure. Terraform from Hashicorp is one such tool that allows you to declare infrastructure as code in a simple, easy to understand language.\nManaging your infrastructure as code bridges the gap between dev and ops and provides an opportunity to include infrastructure management as part of the development lifecycle. When environments are declared in code they can be shared and used across your organization to provide consistent environments that align with your production environment.\nManaging infrastructure as code also provides a far more robust process for managing and tracking infrastructure since these processes can now be incorporated into CI/CD tooling and other automation processes.\nIn this course I will teach you the fundamentals of Terraform using Amazon Web Services as an example. Together we will walk through the basics of Terraform and ultimately create real infrastructure in AWS along the way.\nThis course makes use of the AWS Free Tier which offers the general public a certain number of FREE computing hours and storage space for one year. It is recommended that students sign up for an AWS Free Tier account.\n\n\nUdemy and the author of this course are not liable for any cloud service provider charges you may incur while executing the exercises in this course.",
      "target_audience": [
        "Anyone interested in building infrastructure in the cloud using code."
      ]
    },
    {
      "title": "Complete Guide for Salesforce integration With Live Scenario",
      "url": "https://www.udemy.com/course/salesforce-integration-bydebasis/",
      "bio": "Complete guide and one stop place to learn salesforce integration with live coding which covers many real time scenarios",
      "objectives": [
        "This course is designed to learn salesforce integration using different API like SOAP and REST.",
        "This course discuss about single sign on , named credentials, OAUTH and different mechanism for authentication.",
        "be multiplier hero in integration soon",
        "Implement many Live integration with this course."
      ],
      "course_content": {},
      "requirements": [
        "This designed from complete basic level to advance level and can be learn by anyone who are working on salesforce ecosystem."
      ],
      "description": "When you want to integrate or connect between two system, what are the easy steps to use and how can you do mastery on this , is detailed on this course. We have started this course from understanding what is integration to implementing complex live integration with live coding in step by step  for your easy learning.\nEvery session shared with written code which you can download and use it.\nWhy Integration? What are the reasons to go for Salesforce Integrations?\nHow easily can any application integrated with salesforce?\nReal-time scenarios on Business Level Integration\n\n\nDifferent types of API’s used in Salesforce Integration\n\n\nSOAP API\nWhat steps and design to follow for soap integration?\nDefining Web Service Classes\n\n\nIntroduction to salesforce SOAP API\n\n\nSOAP API Architecture\n\n\nDifferent types of WSDL files used in Salesforce Integration\n\n\nUsing Salesforce Provided Web services (Enterprise, Partner, Apex and Bulk API)\n\n\nXML Introduction\n\n\nIntegration one Salesforce instance to another using Partner WSDL\n\n\nConsuming external WSDL files in salesforce\n\n\nRemote site Settings\n\n\nXML Parsing for the SOAP XML responses\n\n\nReal-time Discussion and Frequently asked questions in SOAP API\nMajor difference between partner WSDL and Enterprise WSDL\nCommon Issues during WSDL parsing\n\n\nREST API\n\n\nIntroduction to Force dot com REST API\n\n\nREST Integration Architecture\n\n\nOauth Architecture and setup\nOauth2.0 Flows in salesforce\nJWT Bearer Token FLOW\n\n\nRemote site Settings\n\n\nDefining connected app for integration\n\n\nGenerating consumer key & consumer secret used in REST API callouts\n\n\nCreating REST Methods in Salesforce\n\n\nApex REST Annotations\n\n\nHTTP Request and Response Classes\n\n\nJSON Parsing for the REST JSON responses\n\n\nHttp Callouts in apex and its limitation Request and Response Data Considerations in Integrations\n\n\nIntegration design and considerations\n\n\nGovernor limits and API limits associated with Integration\nOverview of JSON and JSON class in salesforce\nMany Live integration examples\nIntegrate Salesforce org without Code using salesforce connect\nWrite test class for Integration\nLive integration Project step by step to implement together.",
      "target_audience": [
        "salesforce, salesforce administrator, salesforce developer, salesforce architect, salesforce technology specialist, salesforce consultant"
      ]
    },
    {
      "title": "Data Structures and Algorithms: In-Depth DSA using Python",
      "url": "https://www.udemy.com/course/learning-data-structures-algorithms-in-python-from-scratch/",
      "bio": "Learn Python Data Structures, Algorithms (DSA) with Animated Examples, includes Dynamic Programming, Backtracking etc...",
      "objectives": [
        "Learn Data Structures, Abstract Data Types and their implementation in Python",
        "Implementation of Searching Algorithms in Python",
        "Implementation of Stacks, Queues, Linked List, Binary Trees, Heaps and Graphs in Python",
        "Implementation of Binary Tree Traversal Techniques in Python",
        "Graph traversals techniques ie Depth First Search and Breadth-First Search in Python",
        "Implementation of Sorting Algorithms in Python",
        "Enhance Analytical Skill and efficiently use searching and sorting algorithms in real applications"
      ],
      "course_content": {
        "Course Overview": [
          "Course Introduction",
          "Get the most out of this course",
          "Why we need Data Structure ?",
          "Why Learn Algorithms ?",
          "Abstract Data Type (ADT)",
          "Python Installation on Windows",
          "PyCharm (IDE) Installation on Windows"
        ],
        "Bonus: Python Crash Course (Basics and Fundamentals)": [
          "First Python Program, Data Types and Variables",
          "Reading Input from User",
          "Numbers - Integers & Floating Point",
          "Arithmetic Operations and Expressions",
          "Boolean & None Data Types",
          "Strings",
          "Comparison or Relational Operators",
          "if, if-else and elif Statements",
          "Logical Operators and Comparison Statements",
          "Chaining Comparison Operators",
          "Membership Operators and If Statement",
          "For loop and the range() Function",
          "For Loops with Break, Continue and Pass Statements",
          "For Loop with else Clause",
          "While Loops",
          "While Loops with Break, Continue and Pass Statements",
          "While Loop with else Clause",
          "What are Lists?",
          "Using Lists and List Indexing",
          "What are Tuples ?",
          "Tuple Indexing",
          "Membership & Identity Operators",
          "What are Dictionaries?",
          "Using Dictionaries",
          "What are Functions?",
          "Writing Functions in Python?",
          "Importing Modules in Python",
          "Creating Your Own Modules",
          "Fundamentals of Object Oriented Programming",
          "Defining Classes & Creating Objects",
          "More on __init__ Method (Constructor)",
          "Understanding self Parameter",
          "Static and Local Variables"
        ],
        "Analysis of Algorithms": [
          "Time Complexity",
          "Order of Growth",
          "Asymptotic Analysis",
          "Big-Oh Notation",
          "Big Omega Notation",
          "Big Theta Notation",
          "Performance Summary",
          "Space Complexity",
          "Quiz",
          "Analysis of Algorithms"
        ],
        "Recursion and Analysis of Recursive Functions": [
          "How Recursion Works ?",
          "Iteration vs recursion lets Implement",
          "Time Complexity of Recursion - Recurrence Relation",
          "Recurrence Relation - Another example",
          "Types of Recursion - Tail and Head Recursion",
          "Types of Recursion - Tree Recursion",
          "Types of Recursion - Indirect Recursion",
          "Sum of N Natural Numbers",
          "Lets Implement Sum of N Numbers",
          "Factorial",
          "Lets Implement Factorial"
        ],
        "Searching Algorithms": [
          "Linear Search Algorithm",
          "Lets Implement Linear Search",
          "Binary Search Iterative Algorithm",
          "Lets Implement Binary Search using Iterations",
          "Binary Search Recursive Algorithm",
          "Lets Implement Binary Search using Recursion"
        ],
        "Sorting Algorithms": [
          "Sorting Introduction",
          "Stable and Unstable Sorting",
          "Selection Sort - Explanation, Algorithm and Analysis",
          "Selection Sort - Implementation",
          "Insertion Sort - Explanation, Algorithm and Analysis",
          "Insertion Sort - Implementation",
          "Bubble Sort - Explanation, Algorithm and Analysis",
          "Bubble Sort - Implementation",
          "Shell Sort - Explanation, Algorithm and Analysis",
          "Shell Sort - Implementation",
          "Merge Sort",
          "Merge Sort - Algorithm",
          "Merging - Algorithm",
          "Merge Sort - Complexity Analysis",
          "Merge Sort - Implementation",
          "Quick Sort",
          "Quick Sort - Algorithm",
          "Quick Sort - Complexity Analysis",
          "Quick Sort - Implementation",
          "Count Sort - Explanation, Algorithm and Analysis",
          "Count Sort - Implementation",
          "Radix Sort - Explanation, Algorithm and Analysis",
          "Radix Sort - Implementation",
          "Python's Built-in Sorting Functions",
          "Sorting Algorithms - Summary of Complexities"
        ],
        "Linked List": [
          "Why do we use Linked List",
          "Creating Node of Linked List",
          "Playing with the links of Linked List",
          "How to Create Linked List",
          "Displaying or Traversing Linked List",
          "Lets Implement Creating and Displaying Linked List",
          "Searching Element in Linked List",
          "Lets Implement Search in Linked List",
          "Insert Element at the Beginning of Linked List",
          "Lets Implement Insert Element at the Beginning of Linked List",
          "Insert Element Anywhere in between the Linked List",
          "Lets Implement Insert Element Anywhere in Between the Linked List",
          "Delete Element at Beginning of Linked List",
          "Lets Implement Delete Element at Beginning of the Linked List",
          "Delete Element at End of Linked List",
          "Lets Implement Delete Element at End of Linked List",
          "Delete Element Anywhere in between Linked List",
          "Lets Implement Delete Element Anywhere in between Linked List",
          "Circular Linked List",
          "Creating Circular Linked List",
          "Traversing Circular Linked List",
          "Lets Implement Creating and Displaying Circular Linked List",
          "Insert Element at the Beginning of Circular Linked List",
          "Lets Implement Insert Element at the Beginning of Circular Linked List",
          "Insert Element Anywhere in between the Circular Linked List",
          "Lets Implement Insert Element Anywhere in between the Circular Linked List",
          "Delete Element at Beginning of Circular Linked List",
          "Lets Implement Delete Element at Beginning of Circular Linked List",
          "Delete Element at End of Circular Linked List",
          "Lets Implement Delete Element at End of Circular Linked List",
          "Delete Element Anywhere in between Circular Linked List",
          "Lets Implement Delete Element Anywhere in between Circular Linked List",
          "Double Linked List",
          "Creating Node of Doubly Linked List",
          "Playing with links of Doubly Linked List",
          "Creating Doubly Linked List",
          "Traversing Doubly Linked List",
          "Lets Implement Creating and Displaying Doubly Linked List",
          "Insert Element at the Beginning of Doubly Linked List",
          "Lets Implement Insert Element at the Beginning of Doubly Linked List",
          "Insert Element Anywhere in between the Doubly Linked List",
          "Lets Implement Insert Element Anywhere in between the Doubly Linked List",
          "Delete Element at Beginning of Doubly Linked List",
          "Lets Implement Delete Element at Beginning of Doubly Linked List",
          "Delete Element at End of Doubly Linked List",
          "Lets Implement Delete Element at End of Doubly Linked List",
          "Delete Element Anywhere in between Doubly Linked List",
          "Lets Implement Delete Element Anywhere in between Doubly Linked List"
        ],
        "Stacks": [
          "What is Stack Data Structure ?",
          "Stacks using Arrays",
          "Lets Implement Stacks using Arrays",
          "Stacks using Linked List",
          "Lets Implement Stacks using Linked List"
        ],
        "Queues and DEque": [
          "What is Queue Data Structure ?",
          "Queues using Arrays",
          "Lets Implement Queues using Arrays",
          "Queues using Linked List",
          "Lets Implement Queues using Linked List",
          "What are Double Ended Queues (DEQue) ?",
          "Lets Implement Double Ended Queues using Arrays",
          "Lets Implement Double Ended Queues using Linked List"
        ],
        "Binary Trees": [
          "Trees Definition and Properties",
          "Trees - Terminology",
          "Trees - Height and Levels",
          "Degree of Node and Tree",
          "Binary Trees and it's Properties",
          "Proper Binary Tree",
          "Full Binary Tree",
          "Complete Binary Tree",
          "Full Vs Complete Vs Proper Binary Tree",
          "Binary Tree Representation - Array Based",
          "Binary Tree Representation - Linked Based",
          "Traversing Binary Trees",
          "Binary Trees Traversal - Preorder",
          "Binary Trees Traversal - Inorder",
          "Binary Trees Traversal - Postorder",
          "Binary Trees Traversal - Level Order",
          "Easy way of remembering Binary Trees Traversals",
          "Creating Binary Trees",
          "Function for Preorder Traversal",
          "Function for Inorder Traversal",
          "Function for Postorder Traversal",
          "Lets Implement Creating Binary Trees",
          "Lets Implement Traversing Binary Trees",
          "Lets Create Binary Trees",
          "Lets Create Binary Trees - Another Example",
          "Function for Level Order Traversal",
          "Lets Implement Level Order Traversal",
          "Count Number of Nodes in Binary Tree",
          "Lets Implement Count Operations of Binary Tree",
          "Find Height of Binary Tree",
          "Lets Implement Height Operations of Binary Tree"
        ]
      },
      "requirements": [
        "Prior knowledge of Programming any high level language",
        "Basic knowledge of Python Programming"
      ],
      "description": "This course will help you in better understanding of the basics of Data Structures and how algorithms are implemented in Python. This course consists of Videos which covers the theory concepts + implementation in python.\n\n\nThere’s tons of concepts and content in this course:\nBasics of data structures & Algorithms\nAnalysis of Algorithms (Big O, Time and Space complexity)\nRecursion & Analysis of Recursive Algorithms\nSearching Algorithms\nSorting Algorithms\nLinked List\nStacks\nQueues\nBinary Trees\nBinary Search Trees\nBalanced Binary Search Trees\nPriority Queues and Heaps\nHashing\nGraphs\nGraph Traversal Algorithms\nFollowed by Advanced Topics of Algorithms:\nSets and Disjoint Sets\nDivide and Conquer Approach - Introduction\nDivide and Conquer - Binary Search\nDivide and Conquer - Finding Maximum and Mininum\nDivide and Conquer - Merge Sort\nDivide and Conquer - Quick Sort\nDivide and Conquer - Selection Algorithm\nDivide and Conquer - Strassens Matrix Multiplication\nDivide and Conquer - Closest Pair\nDivide and Conquer - Convex Hull\nGreedy Method - Introduction\nGreedy Method - Knapsack Problem\nGreedy Method - Job Sequencing with Deadlines\nGreedy Method - Mininum Cost Spanning Tree (Prim's & Kruskal's Algorithms)\nGreedy Method - Optimal Storage on Trees\nGreedy Method - Optimal Merge Pattern\nGreedy Method - Single Source Shortest Path (Dijkstra's Algorithm)\nDynamic Programming - Introduction\nDynamic Programming - Multistage Graphs\nDynamic Programming - All Pairs Shortest Path\nDynamic Programming - Single Source Shortest Path\nDynamic Programming - Optimal Binary Search Trees\nDynamic Programming - 0/1 Knapsack Problem\nDynamic Programming - Reliability Design\nDynamic Programming - Travelling Salespersons Problem\nBacktracking - Introduction\nBacktracking - n-Queesn Problem\nBacktracking - Sum of Subsets Problem\nBacktracking - Graph Coloring Problem\nBacktracking - Hamiltonian Cycles Problem\nBacktracking - 0/1 Knapsack Problem\nBranch & Bound - Introduction\nBranch & Bound - n-Queens Problem\nBranch & Bound - Job Sequencing Problem\nBranch & Bound - 0/1 Knapsack Problem\n\n\nAgain, each of these sections includes detailed videos tutorial.",
      "target_audience": [
        "Students who want to have better understanding of Data Structures",
        "Python programmers curious about Data Structures",
        "IT Professional experimenting implementation of Data Structures in Python"
      ]
    },
    {
      "title": "Python For Beginners - Python Bootcamp - Python Programming",
      "url": "https://www.udemy.com/course/python-for-those-absolute-beginners-who-never-programmed/",
      "bio": "Build Python Programming Skills From Scratch - Basic Python For Absolute Beginners - Learn Python Step by Step",
      "objectives": [
        "Python programming with absolutely no programming background"
      ],
      "course_content": {
        "Introduction": [
          "Preview - Is this course for me?",
          "Python Installation & settings",
          "Python - Writing first program",
          "Write a simple program"
        ],
        "Python Language Basics": [
          "Python Arithmetic Operators",
          "Python Relational & Logical Operators",
          "Python Handling Strings",
          "Python Manipulating Strings",
          "Python Variables",
          "Python Data Types"
        ],
        "Python Program Flow Control Structures": [
          "Python IF-ELIF-ELSE",
          "Python Nested IF",
          "Python While Loop",
          "Python For... Loop",
          "Python Break Statement",
          "Python Continue Statement",
          "Python Pass Statement"
        ],
        "Python Handling Errors": [
          "Python Errors vs Exceptions - Difference & Concept",
          "Python Try Except Else Finally",
          "Python Raise Exception Statement"
        ],
        "Python Functions": [
          "Python Function Intro",
          "Python Function Arguments",
          "Python Lambda Function",
          "Python Function Recursion",
          "Python Global vs Local Scope"
        ],
        "Python Module": [
          "Python Module Introduction",
          "Python Import Modules",
          "Python Nested Functions",
          "Python Closures",
          "Python Decorators",
          "Exercise : Python Decorators",
          "Python __name__ Variable"
        ]
      },
      "requirements": [
        "Just desire to learn Python programming",
        "Python could be their first programming language to learn"
      ],
      "description": "Python For Those Absolute Beginners Who Never Programmed - course has been aptly named for what it means to deliver.\nYou may not have any programming background or might be not enough confident to believe that you also can be the best programmer. You never have had exposure to any programming language or even do not know what is programming. But this course will teach you all from scratch. Installation, basic concept of programming, syntax, conditional branching, loop, data types, handling the data, and everything you need to project yourself a confident not just a Python programmer, but even beyond that. This  course will keep evolving with time to include everything that everybody else as Python expert claims to know.\nPython as best career option - Python is the language which has presence everywhere from application development to web development, machine learning to artificial intelligence, database query to data analysis, statistical analysis to deep learning, you name the field and you will find the Python being preferably used in there.\nWhy study Python? For beginners there is no other computer language as much easy to learn as Python. It has a very sleek English like syntax. You need to write very small amount of code even for very complex problem. The Python has shown tremendous growth and it is much easy to get launched as python programmer with handsome salary. Python is the most sought after skill in these days. So one must learn Python as cross platform skill to stay in the groove even if already working.",
      "target_audience": [
        "Absolute beginners in programming",
        "Fresher willing to enter into programming but do not know where to start",
        "Working developers who want to add Python to their skill set"
      ]
    },
    {
      "title": "Learn C++ Programming -Beginner to Advance- Deep Dive in C++",
      "url": "https://www.udemy.com/course/cpp-deep-dive/",
      "bio": "Classroom and Hands-on sessions- Features of C++ 11 , Exception Handling and STL - for Both Academics and Industry",
      "objectives": [
        "Learn Basic concepts of Programming C++, OOPs,Exception Handling, STL, Features of C++ 11",
        "Learn Object-Oriented Programming Design Concept in C++ Perfectly with Examples",
        "Learn How to Develop an Application (Student Project in C++ )"
      ],
      "course_content": {
        "Introduction": [
          "Instructors Note"
        ],
        "Essential Fundamentals": [
          "Fundamentals",
          "How Computers Works",
          "Introduction to Number Systems",
          "What is a Program",
          "Low-level and High-Level Languages",
          "Compiler vs Interpreter",
          "What is an Operating System"
        ],
        "Program Development": [
          "Programming Paradigms/Methodologies",
          "What is an Algorithm",
          "What is a FlowChart",
          "Steps for Program Development and Execution"
        ],
        "Compiler and IDE Setup": [
          "Practice C++ online Compiler",
          "Setup CodeBlocks and Settings",
          "Setup Dev-C++ and Settings",
          "Setup Visual Studio",
          "Debugging in CodeBlocks",
          "Debugging in Dev-C++",
          "Debugging using Visual Studio",
          "Setup xcode"
        ],
        "C++ Basics": [
          "Skeleton of C++ Program",
          "Writing My First Program",
          "Demo - First Program",
          "Why Data Types",
          "Primitive Data Types",
          "Variables",
          "Arithmetic Operators and Expressions",
          "Operator Precedence & Expressions",
          "Program using Expression",
          "Area of a Triangle",
          "Practice Problem: Sum of First N Natural Numbers",
          "Sum of First n Natural Number",
          "Practice Problem :Roots of Quadratic Equations",
          "Finding roots of a Quadratic Equation",
          "Demo - Expressions",
          "Calculate Distance",
          "Calculate Simple Interest",
          "Calculate Volume of a Cylinder",
          "Calculate Distance between 2 point",
          "Compound Assignment",
          "Demo - Compound Assignment",
          "Increment and Decrement Operators",
          "Demo - Increment and Decrement Operators",
          "Overflow",
          "Demo - Overflow",
          "Bitwise Operators",
          "Demo - Bitwise Operators",
          "Enum and Typedef",
          "Demo enum and typedef",
          "Practice : Student Exercise #1",
          "Practice : Student Exercise #2",
          "Quiz on Basics"
        ],
        "Conditional Statements": [
          "Conditional Statement - if",
          "Practice Problem : Finding Maximum of 2 Numbers",
          "Maximum of 2 Numbers",
          "Number is Positive or Negative",
          "Check if Number is Odd or Even",
          "Demo - Conditional Statement",
          "Demo - Validation",
          "Logical Operators",
          "Compound Conditional Statement",
          "Check if Working Hours",
          "Practice Program using Compound Conditions",
          "Check Age of a person",
          "Check if a person is eligible for Offer",
          "Demo -Compound Condition",
          "Nested If",
          "Finding maximum of 3 numbers",
          "Practice Problem: Finding Maximum of 3 No.",
          "Practice Problem :Find Nature of Quadratic Roots",
          "Nature of Quadratic Roots",
          "Practice Problem :Display Grades for Student Marks",
          "Display Grades for Students Marks",
          "Calculate Discounted Bill Amount",
          "else if Ladder",
          "Display Day name",
          "Display Month Name",
          "Display Digit in words",
          "Practice Problem : Display Day name using else if ladder",
          "Short Circuit",
          "Demo - Short Circuit",
          "Dynamic Declaration",
          "Demo - Dynamic Declaration",
          "Switch Case - Branch and Control",
          "Demo - Switch Case",
          "Display Name of a Day",
          "Practice Problem : Switch - Program to Display Day name",
          "Practice Problem : Switch - Program using Menu Options",
          "Arithmetic operations using switch",
          "Practice Student Exercise #3",
          "Practice Student Exercise #4",
          "Quiz - Conditional Statements"
        ],
        "Loops": [
          "Loops - Iterative Statements",
          "for Loop",
          "Demo - Loops",
          "Infinite Loop",
          "Practice Problem :Multiplication Table",
          "Practice Problem : Sum of N number",
          "Practice Problem : Factorial of a number",
          "Practice Problem :Factors of a Number",
          "Practice Problem : Perfect Number",
          "Practice Problem : find Prime Number",
          "Sum of first N natural number",
          "Find Factorial of number",
          "Find factors of a number",
          "Check if a number is Perfect Number",
          "Check if a Number is Prime number",
          "Demo for Loops",
          "Practice Problem : Display Digits of a Number",
          "Practice Problem : check for Armstrong Number",
          "Practice Problem : Reverse a Number",
          "Display Digits of a number",
          "Check if a number is Armstrong Number",
          "Reverse a Number",
          "Check if a Number is a Palindrome",
          "Demo - Programs using While Loop",
          "Practice Problem : find GDC of 2 numbers",
          "Program for finding GCD",
          "Practice Student Exercise #5",
          "Quiz for Loops"
        ],
        "Arrays": [
          "Arrays - Introduction",
          "Arrays Declarations",
          "For Each Loop",
          "Display all Elements using For Each loop",
          "Practice Problem :Adding all Elements of Array",
          "Practice Problem :Finding Max element from Array",
          "Practice Problem :Linear Search",
          "Practice Problem :Binary Search",
          "Sum of all Elements of Array",
          "Find Maximum element from Array",
          "Find Minimum Element in an Array",
          "Count number of negative and positive numbers in Array",
          "Demo - Array Programs",
          "Nested Loops",
          "Demo - Nested Loop",
          "Practice Problem :Drawing Pattern 1",
          "Practice Problem :Drawing Pattern 2",
          "Practice Problem :Drawing Pattern 3",
          "Draw a Square of *",
          "Draw a Lower Triangle of *",
          "Draw a Upper Triangle of *",
          "Draw cross Lower Triangle of *",
          "Draw cross Upper Triangle of *",
          "Patterns using Nested Loops",
          "Multidimensional Array",
          "Demo - 2D Arrays",
          "Practice Problem :Matrix Operations",
          "Practice Student Exercise #6",
          "Practice Student Exercise #7",
          "Quiz for Arrays"
        ],
        "Pointers": [
          "Pointers - Introduction",
          "Demo - Pointers",
          "Why Pointers",
          "Heap Memory Allocation",
          "Demo - Dynamic Allocation",
          "Pointer Arithmetic",
          "Pointer Arithmetic",
          "Demo - Pointer Arithmetic",
          "Problems using Pointers",
          "Reference",
          "Demo - Reference",
          "Quiz for Pointers"
        ],
        "Strings": [
          "Introduction to String",
          "Reading and Writing String",
          "String Functions - Length , Concatenate and Copy",
          "String Function - Substring and Compare",
          "String Functions - Tokeniser and To Integer",
          "Class String",
          "Basic Functions of Class String",
          "Class String - Append and Insert Functions",
          "String Class - Replace and Swap Functions",
          "String Class - Copy and Find Functions",
          "String Class - Substring , Compare and Operators",
          "String Class - Iterator",
          "Practice Problem : Find Length of a String",
          "Practice Problem : Change Cases of Letters",
          "Practice Problem : Count Vowels and Words in a String",
          "Practice Problem : Checking Palindrome",
          "Practice Problem: Find username from email address"
        ]
      },
      "requirements": [
        "C++ Compiler and IDE, Like CodeBlocks , Eclipse , Xcode etc.",
        "No Programming knowledge required. Course covers C and C++ programming concepts in detail."
      ],
      "description": "This course covers C++ from very basic to more advanced features.\nConcepts of C++ programming are made very simple and easy.\nEvery topic is covered in greater detail.\nAll Lecture are discussed both on white board like a classroom session and practical demo.\nPrograms and Bullet points are provided as resource.\nEvery Topic is Explained with Real life Examples\n\nThis course also covers features of modern C++ 11.\nStudent Project at the end of Course\nCourse Highlights\nEvery Topic is covered on White Board\n\nPratical Session for each Topic\n\nSection wise Quiz\n\nSection wise Workbook Programs\n\nStudent Project\n\nYou will be learning concepts perfectly and also learn how to perfectly utilise features of C++. you will be confident to develop any type of Application using C++.\nWhat I will learn ?\nBasics - Datatypes and Variables\nOperators and Expressions\nConditional Statements\nLoops\nPointers\nFunctions\nFunction Overloading\nOops Concepts\nClasses and Objects\nConstructors\nDestructors\nOperator Overloading\nInheritance\nPolymorphism\nAbstract Classes\nFunction Overriding\nFriend Members\nStatic Members\nInner Classes\nTemplates\nException Handling\nI/O Streams\nSTL\nLambda Expressions\nFeatures on Modern C++ 11\nStudent Project",
      "target_audience": [
        "Beginners - (Concepts are Covered from Basics to Advance)",
        "Course Covers more than University Syllabus.",
        "If you already know C++ then you will definitely improve your understanding of programming and OOPs concepts."
      ]
    },
    {
      "title": "Ruby Programming For Everyone",
      "url": "https://www.udemy.com/course/ruby-programming-for-everyone/",
      "bio": "Learn Ruby Programming Fast!",
      "objectives": [
        "Ruby From Beginner To Advanced",
        "Object Oriented Programming",
        "Set Up A Cloud Dev Environment",
        "Variables, Strings, and Data Types",
        "Getting User Input and Output",
        "Conditional If/Else & Comparisons",
        "Arrays, Loops, And Hashes",
        "Methods, Classes and More!"
      ],
      "course_content": {
        "Ruby Programming Basics": [
          "Introduction",
          "First Things First: How To Get Support Fast!",
          "Install Sublime and Git Bash",
          "Install Ruby",
          "Hello World - First Ruby Program",
          "Printing To The Screen With Puts and Print",
          "String Manipulation",
          "Variables",
          "Getting User Input With Gets",
          "Git Bash Weirdness...",
          "Simple Math",
          "Converting To An Integer",
          "Comparison Operators",
          "Assignment Operators",
          "If/Else Conditional Statements"
        ],
        "Intermediate Ruby Programming": [
          "Arrays",
          "While Loops",
          "Each Loops",
          "Hashes",
          "Building FizzBuzz!",
          "Methods Part 1",
          "Methods Part 2"
        ],
        "Advanced Ruby Programming": [
          "Intro To Ruby Classes",
          "Ruby Classes Part 1",
          "Class Getters",
          "Class Setters",
          "Adding Perimeter and Area Methods",
          "Class Attr Accessor",
          "Creating a Draw Method",
          "Bonus Lecture"
        ]
      },
      "requirements": [
        "No programming skills or special tools are necessary to take this course",
        "You just need a computer with Internet access and a Web Browser"
      ],
      "description": "In this course we'll learn the Ruby programming language from an absolute Beginner level all the way to Advanced in no time at all!\n\n\nThis course is aimed at the absolute beginner, you don't need any coding experience at all!\n\n\nWe'll start out by setting up a development environment that has all the tools you need to start writing and running Ruby code.\n\n\nThen, we'll dive into very basic computer science concepts. Things like:\nPrinting to the Screen\nString Manipulation\nVariables\nGetting User Input\nSimple Math\nComparison Operators\nAssignment Operators\n\n\nAfter that, we'll move into more intermediate topics like:\nConditional If/Else Statements\nArrays\nWhile Loops\nEach Loops\nHashes\nFizzbuzz\n\n\nFinally we'll finish up with more advanced topics like:\nMethods\nClasses\n\n\nRuby is one of the greatest programming languages to learn, and learning has never been this easy!\n\n\nI'll see you on the inside!\n\n\n-John Elder",
      "target_audience": [
        "This course is aimed towards absolute beginners who want to learn the Ruby programming Language"
      ]
    },
    {
      "title": "Java Collections from basics to Advanced",
      "url": "https://www.udemy.com/course/collections-and-concurrent-collection-video-lectures-and-tutorials/",
      "bio": "Data Structure using Java Collection Framework - Including Concurrent Collections, Streams, Generics, Parallel Streams",
      "objectives": [
        "Data Structures using collections",
        "Java Collections framework",
        "Concurrent or synchronized Collections",
        "Lambda",
        "Streams",
        "Parallel Streams",
        "Arrays in Depth",
        "Generics"
      ],
      "course_content": {
        "Introduction": [
          "Introduction"
        ],
        "Java Arrays in Depth": [
          "Section introduction",
          "Arrays and Single D Array",
          "Multi-Dimensional Arrays",
          "Declaration and initialization,creation",
          "Playing with Syntax",
          "Traversing Arrays, Length of Array",
          "Types of Array based on elements it holds",
          "Assigning and Reassigning Array Objects to Array References",
          "Anonymous arrays",
          "Arrays Summary"
        ],
        "Collections Overview": [
          "Collections Overview"
        ],
        "Collection Framework": [
          "Collection Framework"
        ],
        "Collection and Collections": [
          "Collection Interface",
          "Collection vs Collections"
        ],
        "Generics Overview": [
          "Generics Overview"
        ],
        "Lists ArrayList LinkedList Vector and Stack and Cursors": [
          "List",
          "ArrayList",
          "Important concepts of ArrayList",
          "LinkedList",
          "LinkedList vs ArrayList",
          "Vector",
          "Stack",
          "Cursors",
          "Summary"
        ],
        "Set Its implementation class and more": [
          "Introduction",
          "HashSet",
          "LinkedHashSet",
          "SortedSet",
          "NavigableSet",
          "TreeSet",
          "Comaparable(I) and Comparator(I)",
          "Summary"
        ],
        "Queues": [
          "Queue Interface",
          "PriorityQueue",
          "Summary"
        ],
        "Maps & Trees in Depth - Working and its implementation classes": [
          "Map Introduction",
          "Hashing",
          "HashMap - Introduction",
          "HashMap - Internal Working",
          "Difference Between HashMap and HashTable",
          "LinkedHashMap",
          "IdentityHashMap",
          "WeakHashMap",
          "SortedMap",
          "NavigableMap",
          "TreeMap",
          "Summary"
        ]
      },
      "requirements": [
        "Basics Java",
        "Patience and zeal to Learn"
      ],
      "description": "BEST in Class course for Java Collections, underlying implementation of Data Structures used in Collections, Advanced Java Collections,Concurrent Collections, Java Generics , Java Lambda and Streams to deal with any kind of data.\nThis course will empower you to solve any data structure problem using Java.\nThis course will not only cover Java way to deal with data - Java Collection Framework and Advanced Java Collection APIs but also cover the Modern way of dealing with data in Java by covering Lambda and Streams APIs to make your life easier.\nWe will also explain the underlying data structure before coming to any collection implementation.\nWe will cover all the below topics in detail :\nArrays  - Basics Java Construct all Data structures are directly indirectly built upon arrays\nGenerics - Type safe and reuable Collections  would not have been possible without it.\nCollections - Yeah! Most of the data structures Java already supplies in form of Collections.\nConcurrent Collections - Collections  in multi threading environment,\nLambda Expression - New Java way of writing code\nStreams - Give sppeed to your collections and write clean and small code to do a lot of things.\nDetails :\nArrays\n01 -Arrays and Single D Arrays\n02- MultiDArrays\n03- Declaration and initialization,creation of Arrays\n04- Playing with Syntax\n05- Traversing Arrays,Length of Array\n06- Types of Array based on elements it holds\n07- Assigning and Reassigning Array Objects to Array References\n08- Anonymous arrays\nCollections -  Deep Dive ... we have broken this into multiple sections.\nList\n01 - List interface\n02 - Array Lists\n03 - Linked Lists\n04 - Vector\n05 - Stack\n06 - Cursors to travesrse the data...\nThen we will cover set under collections...\n01 - HashSet\n02 - LinkedHashSet\n03 - SortedSet\n04 - NavigableSet\n05 - TreeSet\n05 - Comparable and Comparator\nThen we will move to MAP - and this a very important we have explained this in very very detail ...\nBelive me if you want to know a Data Structure make sure you know Map.... the complexity of searching and placing an element in Map is O(1).\nIn Map we will cover...\n01-HashMap and its internal Working\n02-Difference bw HashMap and HashTable\n03-Linked HashMap\n04 - IdentityHashMap\n05 - WeakHashMap\n06 - Sorted Map\n07 - NavigableMap\n08 - TreeMap\n09- Summary Of Map\nThen we will move to the next section ... Concurrent Collections... and this section is also very detailed..\n01 Section Introduction\n02 Need of Concurrent Collections\n03 Concurrent Modification Exception\n04 How Concurrent Collection Solved the problems\n05 ConncurentHashMap Heirarchy and Methods\n06 ConncurentHashMap internal Implementation\n07 ConncurentHashMap in Multithreading Envoirnment Program Demo\n09 CopyonWrite ArrayList\n10 CopyOnWriteArrayList - Constctuctors and Methods\n11 CopyOnWriteArraySet\n\n\nAfter That we will start Lambda Expression the efficient may to write code started in Java 8 , we will also show you how you will be able to simplify your collection code using ... Lambda..\n01 - Lambda Introduction\n02 - Write Lambda Expression\n03 - Functinoal Interfaces\n04 - Invoke Lambda\n05-few more Examples of invoking Lambda\n06 Lambda Summary\n07 Lambda With Collections\n08  comparator - Lambda\n09 Sorting a List Without Lambda and With Lambda\n10 predefined Functional Interfaces - Predicates\n11  Predicates Example\n12 function\n13 consumer\n14 Supplier\n15 Double Colun Operator Method reference\n16 Double Colun Operator Constructor reference\nAfter that we will start Streams i think the most important concept to learn if you are using Java 8 and Beyond, this can process your data not simply but efficiently.\n01- Streams basics code to get familiar with Syntax\n02- stream in Detail - Filter() and Map() Methods\n04- More on Methods in Streams\n05- More on Streams\n06 - Parallel Streams\n07 - Sequential vs Parallel streams performance Comparison\n08- Summary Of Streams and what we learned\n\n\nWe will keep on covering Collections best Practice and common pitfalls\nBy End of this course you will start fall in Love in collections and with your data. You will also love Java's modern way of dealing with data using lambda and streams.\nWe have covered each and every topic in very much detail.\nLast but not least : This course comes with a 30 days money back guarantee if it does not fit in your needs,  and we are always available to answer your questions.\nHAPPY LEARNING\nBasics Strong",
      "target_audience": [
        "Students who wants Mater to Collections and Concurrent Collection in Java",
        "Master Java Streams and Lambda",
        "Master Generics",
        "Master Arrays",
        "Master Data Structures using collections"
      ]
    },
    {
      "title": "C Programming For Beginners",
      "url": "https://www.udemy.com/course/c-programming-for-beginners/",
      "bio": "Learn C in ten easy steps on Windows, Mac OS X or Linux",
      "objectives": [
        "Master C programming concepts from the ground up",
        "Use the source code examples to learn step-by-step",
        "Understand the special features of C: pointers, header files, null-terminated strings, buffers, IO",
        "Videos explain everything in minute detail",
        "Read the supplied eBook, The Little Book Of C, to explore the topics in even more depth",
        "Test your understanding with end-of-section quizzes"
      ],
      "course_content": {
        "Getting Ready": [
          "Welcome to the course",
          "C Editors and IDEs",
          "FAQ - Read This First!",
          "Install CodeLite (Windows or Mac)",
          "Install a C compiler on a Mac",
          "Introduction to CodeLite",
          "Using C++Builder",
          "Importing C Projects into C++Builder",
          "Programming C with NetBeans",
          "Importing Projects Into NetBeans",
          "Compiling C programs at the system prompt",
          "Visual Studio 2019",
          "Using Visual Studio",
          "The Little Book Of C -- (download)",
          "C Source Code Archive",
          "C Basics"
        ],
        "C programming basics": [
          "A first program - Hello world",
          "Arguments and return values",
          "Passing commandline arguments to your program",
          "How to open a command prompt on Windows or OS X",
          "printf",
          "Comments",
          "C Programs"
        ],
        "Variables, constants and types": [
          "Variables and types",
          "Integers and floating point numbers",
          "Constants",
          "More about constants",
          "Naming conventions",
          "Variables and constants"
        ],
        "Operators, tests and user input": [
          "Operators – equality and assignment",
          "Operators – tests and comparisons",
          "Compound assignment operators",
          "Increment and decrement operators",
          "if and else tests",
          "Problems with gets() and fgets()",
          "Input, buffers and flushing",
          "My own line-reading function",
          "Logical Operators",
          "Operators and tests"
        ],
        "Functions, arguments and switch": [
          "Functions",
          "Arguments",
          "Switch statements",
          "Switch statements in more detail",
          "Functions and switch"
        ],
        "Arrays, loops and break": [
          "Arrays",
          "Initializing arrays",
          "‘while’ loops",
          "‘do..while’ loops",
          "break",
          "break and continue",
          "Multidimensional arrays",
          "Arrays and loops"
        ],
        "Strings, chars and pointers": [
          "Strings, pointers and addresses",
          "Null-terminated strings",
          "Char arrays and pointers",
          "Arrays, pointers and assignment",
          "Strings and functions, stack and heap",
          "String functions",
          "char functions",
          "chars and strings",
          "Pointers and Strings"
        ],
        "Structs, enums, header files and scope": [
          "structs",
          "typedef",
          "Enums",
          "Header files",
          "A custom header file",
          "Scope",
          "Scope and external files",
          "Static functions and variables",
          "Compiling from the commandline",
          "Structs, enums, headers and scope"
        ],
        "File-handling": [
          "Opening and closing files",
          "File modes",
          "Reading and writing a text file",
          "Counting lines in a text file",
          "Search in a text file",
          "Files"
        ],
        "Binary files and memory allocation": [
          "Binary files",
          "Allocating and freeing memory",
          "Types and type casts",
          "Creating a CD database",
          "Saving and loading records in a binary file",
          "Adding records to a binary file",
          "Modifying records in a binary file",
          "Memory and pointers",
          "And finally…"
        ]
      },
      "requirements": [
        "A C compiler and code editor (both are available free)"
      ],
      "description": "The fastest, easiest way to learn to program C on a Mac or Windows. This course will teach you to program the C language from the ground up. You will learn everything from the very fundamentals of programming right through to the complexities of pointers, addresses and File IO. Maybe you've tried to master C before but failed. Or maybe you are new to C or new to programming. If so, this is the course for you!\nC is one of the most important of all programming languages. It is used to program desktop applications, compilers, tools and utilities and even hardware devices. The C language is fast and efficient – but it can be hard to learn. Unless you use this course. This course begins with a gentle introduction to C but quickly moves on to explain some of its most confusing features: everything from C's 'scoping' rules to the curious connection between arrays and memory addresses. By the end of the course you will have a deep understanding both of the C language itself and also of the underlying 'architecture' of your computer.\nWhat you will learn:\nThe fundamentals of programming – from the ground up\nHow to program on a Mac or on Windows\nThe nitty-gritty details of the C language\nAdvanced topics such as memory allocation, the stack and heap, and binary file IO\nWho should take the course\nBeginners – if you've never coded before, you can learn C step by step\nProgrammers switching to C from some other language such as Java, Ruby or Python\nCross-platform developers – there are C compilers for all major operating systems\nAnyone who needs to program C++ or Objective-C. The C language is the place to start",
      "target_audience": [
        "Newcomers to programming",
        "Programmers of other languages who want a fast way into C",
        "Anyone who needs to master C as a basis for using C++ or Objective-C"
      ]
    },
    {
      "title": "Introduction to TypeScript Development",
      "url": "https://www.udemy.com/course/introduction-typescript-development/",
      "bio": "Get ready to build React, Vue and Angular web and mobile applications by learning the TypeScript programming language.",
      "objectives": [
        "Be ready to move onto building Angular, React and Vue applications.",
        "Code with the TypeScript programming language.",
        "Work with TypeScript classes and object oriented programming concepts."
      ],
      "course_content": {},
      "requirements": [
        "Basic computer knowledge",
        "Mac, Linux or PC"
      ],
      "description": "April 2021 course update: Added an entire section that shows how to build a React application with TypeScript 4! Also added a new Advanced Techniques section\nDo you want to build Angular, React JS, or Vue JS web and mobile applications? If that's your goal it's vital that you learn the TypeScript programming language, and that's exactly what we're going to walk through in this course. My name is Jordan Hudgens, and I'll be your instructor for the course. In addition to being the lead instructor for devCamp I've also been building web applications for over a decade for organizations such as Eventbrite and Quip.\nAfter you have completed this course you'll be ready to start learning how to work with the React, Vue and Angular application frameworks. Angular 2 was rebuilt from the ground up in order to take advantage of modern development practices, and the framework creators actually built the new version completely in the TypeScript programming language. This is the reason why TypeScript is so important to learn for aspiring Angular developers.\nIn this course we're going to start with the basics and I'm going to show you how fun it is to build TypeScript programs. After you're familiar with the syntax, we're going to move onto more advanced TypeScript development techniques, such as: working with closures, object oriented programming, real time asynchronous development, and decorators.\nMy focus for this course isn't to teach you how to build TypeScript console applications. Instead, my goal is to teach you the skills you will need in order to build real world Angular 2 applications. And actually, this course includes the exact material we teach at our devCamp coding bootcamps prior to students going through our immersive Angular 2 course.\nThere are no technical pre-requisites to this course. The ideal student is an individual who wants to learn how to build Angular 2 applications. I will show you how to install and run TypeScript programs on both a Mac and a PC. And you can use either operating system to follow along with the course material.\nEach lesson of the course is paired with the source code that I used in the lecture so you can check your work.\nPlease feel free to review the course curriculum and I look forward to going through the material with you on your development journey!",
      "target_audience": [
        "Students who want to learn the foundational concepts required for Angular, React, or Vue development",
        "Students aspiring to learning the TypeScript programming language.",
        "No programming experience is necessary for this course"
      ]
    },
    {
      "title": "Python 101",
      "url": "https://www.udemy.com/course/kypython-101/",
      "bio": "Learn Regular Expressions, NumPy, Pandas, OOP and Database programming in addition to basic Python.",
      "objectives": [
        "Programming in Python with real confidence.",
        "Crystal clear understanding of all Python core concepts.",
        "Playing with Python Objects: Numbers, Strings, Booleans, Lists, Tuples, Sets and Dictionary objects.",
        "Writing Python functions, Iterators and generator functions.",
        "Manipulation of File Objects: Reading and Writing of Text and Binary Files.",
        "Creation of Python Classes and Objects and working with modules.",
        "Relational Database handling with Python using Sqlite3",
        "Working with Arrays and multi dimensional arrays using NumPy module.",
        "Skill with Series and DataFrame Objects of Pandas module."
      ],
      "course_content": {},
      "requirements": [
        "A Windows PC or Apple Mac with OSX.",
        "Internet Connection",
        "Some programming skill in any language will help."
      ],
      "description": "Learn Python Programming Today!\n\nLast update: December 2019.\nPython 101 is a comprehensive course covering all core concepts of Python starting from scratch. It also covers using Python with databases, multi-dimensional arrays with NumPy module and Series and DataFrames using the Pandas module.\n\nAll the lectures are taught with lots of practical examples using iPython notebooks. The course consists of over 110 lectures and 17 hours of video classes. All sections include downloadable practice code and quizzes.\nThe course is constantly updated with new topics.\nThis is an all-level course. Good for both fresh programmers and also to experienced programmers working with other languages.\nHere are some important topics of this course:\n\nPython and iPython Notebook installation.\n\nBasics of Python Objects like Strings, Numbers, Booleans, Container Objects, Operators,    Operator precedence and associativity rules.\n\nConditionals & Loops.\n\nString Objects.\n\nList Objects\n\nTuples, Sets, and Dictionaries.\n\nFunctions, Iterators, and Generators.\n\nPython Classes & Objects.\n\nFile Handling.\n\nModules\n\nExceptions Handling.\n\nDatabase Programming with Python.\n\nRegular Expressions.\nArrays with NumPy Module\n\nSeries and DataFrames with the Pandas module.\n\nQuick Review.\nThe Course is available to you forever on Udemy. and you can learn at your own pace. one can easily complete the course in a week's time, by spending a couple of hours a day.\n\nThank You.",
      "target_audience": [
        "Professional Programmers.",
        "IT Team Leaders / Managers.",
        "Web Developers.",
        "Computer Hobbyists.",
        "Database application developers.",
        "High School & College Students.",
        "Anyone who wants to learn programming.",
        "A must language for all the computer professionals."
      ]
    },
    {
      "title": "Mastering Regular Expressions in JavaScript",
      "url": "https://www.udemy.com/course/mastering-regular-expressions-in-javascript/",
      "bio": "Full of Opportunities to Learn by Doing. Unlock the Power of Regular Expressions or regex in your JavaScript cide,",
      "objectives": [
        "Create basic regular expressions for matching data.",
        "Make use of all the JavaScript methods that accept regular expressions.",
        "Understand the differences between the varied JavaScript methods used with regular expressions.",
        "Test regular expressions before deploying them in your code.",
        "Understand regular expression syntax.",
        "Define more complex patterns using regular expressions.",
        "Use metacharacters and characters sets in defining patterns.",
        "Take advantage of repetition and grouping.",
        "Use anchored expressions and lookahead assertions correctly.",
        "Include unicode when necessary.",
        "Solve common regular expression problems in JavaScript."
      ],
      "course_content": {},
      "requirements": [
        "Prior to taking this course, it is best if you have a working knowledge of JavaScript. As for tools, you will need a browser and a text editor."
      ],
      "description": "Regular expressions can help you more easily solve programming problems. They are an important tool in your coding toolbox. If you have dabbled with regular expressions or not even used them before, this course is for you. You will learn the syntax and participate in numerous examples and exercise to help you integrate regular expressions into your JavaScript code.\nIn Mastering Regular Expressions in JavaScript we focus on two main goals: Helping you learn regular expressions and construct them, and teaching you the powerful ways regular expressions can be used in JavaScript. If you work in the JavaScript language, this course will be most useful, but even if you work in another language you can use this course to learn about regular expressions as the syntax applies to many programming languages.\nThis course provides numerous opportunities to apply what is being taught. In fact one of the final sections is devoted to applying regular expressions, which basically presents different scenarios and then gives you a chance to solve them before  going through it with the instructor.\nThis course contains 9 sections, over 60 different lectures, over 5 hours of video tutorials, 5 exercises, 5 quizzes and 12 application lectures that will make sure you have what you need to use regular expressions in your JavaScript coding work.\nIf you are ready to master regular expressions, this course is for you!",
      "target_audience": [
        "This course is intended for JavaScript developers that would like to improve their skills in regular expressions. If you work in another language, the regular expression content can still be useful."
      ]
    },
    {
      "title": "Java for Complete Beginners",
      "url": "https://www.udemy.com/course/java-for-complete-beginners/",
      "bio": "The Course Where Programming and Fun Meet! Learn JAVA from Scratch With PLENTY of Free Resources and Challenges.",
      "objectives": [
        "The Fundamentals of Objected Oriented Programming",
        "Solid foundation in programming",
        "Ability to solve challenging problems with code",
        "Well rounded knowledge of Java"
      ],
      "course_content": {
        "Introduction": [
          "Introduction to the course"
        ],
        "Basics": [
          "Installation and variables",
          "Variables summary",
          "Variables Challenge",
          "Variables Challenge Solution",
          "Loops",
          "Loops Summary",
          "Loops Challenge",
          "Loops Challenge Solution",
          "Conditions",
          "Conditions Summary",
          "Conditions Challenge",
          "Conditions Challenge Solution",
          "Arrays",
          "Arrays Summary",
          "Arrays Challenge",
          "Arrays Challenge Solution",
          "User input and operators",
          "User input and operators Summary",
          "User Input Challenge",
          "User Input Challenge Solutions",
          "Substring Excercise",
          "Solution to substring exercise",
          "Problem Set: Loops, conditions, arrays, user input"
        ],
        "OOP: Building blocks": [
          "Methods",
          "Methods Summary",
          "Classes and objects",
          "Classes and Objects Summary",
          "Constructors",
          "Constructors Summary",
          "Getters and Setters",
          "Getters and setters summary",
          "Interfaces",
          "Interfaces Summary"
        ],
        "OOP: Concepts": [
          "Inheritance",
          "Inheritance Summary",
          "Polymorphism",
          "Polymorphism summary",
          "Encapsulation",
          "Encapsulation Summary",
          "Composition",
          "Composition Summary",
          "Abstract Classes",
          "Abstract Classes Summary",
          "See you soon"
        ]
      },
      "requirements": [
        "A device that supports JDK and JVM installation (such as a laptop or PC)"
      ],
      "description": "Q: What will I learn in this course?\n\nAns: You will learn the fundamentals of Java. We will initially learn about variables, conditions, loops, arrays, operators, and user input. Then we will take a closer look at classes, objects, and methods. Finally, we will go over the fundamentals concepts of Object-Oriented Programming: Inheritance, Encapsulation, Polymorphism, and Composition.\nWe will not merely glance over these topics but get a thorough understanding of what they are, how they work with each other, and what role they play.\nQ: How will this course be taught?\nAns: The videos will compromise of two parts: paper and computer. We will not directly dive into coding but rather gain an understanding of what the concept is and why it is important (on paper). Then we will move to the computer where I will lay out the syntax of the concept for you and give you ample examples and mini-challenges to strengthen your understanding of the concept.\nAdditionally, I will link a document for each video which will go over what we learned and will include additional resources for you to check out. I will also link the source code for each video.\nOnce you have a good understanding of the concept, there will be a video where I will present you with multiple challenges at the start of the video and spend the rest of the video solving each challenge I presented, explaining every line of code and the general logic of the solution.\nBy the end of this course, I hope that you have a good grasp of the concepts introduced in this course and are able to utilize them effectively.",
      "target_audience": [
        "Students new to programming",
        "Anyone looking to learn basics of Java quickly"
      ]
    },
    {
      "title": "C# Performance Tricks: How To Radically Speed Up Your Code.",
      "url": "https://www.udemy.com/course/csharp-performance-tricks-how-to-radically-optimize-your-code/",
      "bio": "This course will help you speed up your C# code and provides many tricks that every professional developer must know.",
      "objectives": [
        "Learn the fundamentals of the .NET Framework",
        "Enjoy a crash course in Common Intermediate Language",
        "What is boxing and unboxing, and how to avoid it?",
        "The strange performance gap between 1- and 2-dimensional arrays",
        "When should you use a StringBuilder?",
        "Garbage collector assumptions about object size and lifetime",
        "Using pointers in C# - is it worth the trouble?",
        "A super-fast way to construct new objects",
        "... and much more!"
      ],
      "course_content": {
        "Introduction": [
          "Course introduction",
          "Meet your instructor",
          "Introduction to code optimization",
          "Windows, OS/X or Linux?",
          "Background Info - About Me"
        ],
        "Fundamentals of the .NET Framework": [
          "Section introduction",
          "The Stack",
          "The Stack",
          "The Heap",
          "The Heap",
          "Value types",
          "Value types",
          "Reference types",
          "Reference types",
          "Boxing and unboxing",
          "Boxing and unboxing",
          "Immutable strings",
          "Immutable strings",
          "Section recap"
        ],
        "A crash course in Intermediate Language": [
          "Section introduction",
          "Common Intermediate Language",
          "Section recap",
          "Common Intermediate Language"
        ],
        "Basic optimizations: the low-hanging fruit": [
          "Section introduction",
          "How to prevent boxing and unboxing",
          "Fast string concatenation",
          "Fast collections",
          "Fast arrays",
          "Throwing and catching exceptions",
          "For versus Foreach",
          "Return character counts in a given input string",
          "Replace digits with words in a string",
          "Matrix multiplication",
          "Section recap",
          "Basic optimizations"
        ],
        "Intermediate optimizations": [
          "Section introduction",
          "Fast Garbage Collection - part 1",
          "Fast Garbage Collection - part 2",
          "Fast delegates",
          "Fast class factories",
          "Section recap",
          "Intermediate optimizations"
        ],
        "Advanced optimizations": [
          "Section introduction",
          "Arrays on the stack",
          "Pointers - part 1",
          "Pointers - part 2",
          "Background Info - Modifying String Constants",
          "Section recap",
          "Advanced optimizations"
        ],
        "Final words": [
          "Course recap",
          "Bonus Offer"
        ]
      },
      "requirements": [
        "You need a Windows, Mac or Linux laptop with Microsoft Visual Studio, Xamarin Studio or Monodevelop",
        "You should be a beginner, intermediate, or advanced C# developer",
        "That's it!"
      ],
      "description": "Do you know how to write fast C# code?\nYou may have already enrolled in a C# programming course, or learned the language at school or university. But here's a sobering fact: most courses only teach you how to write code, not how to write fast code.\nThe .NET Framework is huge. For any given problem there are many solutions, and it is not always clear which solution is the best choice.\nDid you know that adding strings together using the wrong Framework class will slow down your code by a factor of more than two hundred? And if you're not handling exceptions the right way, your code wil run a mind-boggling thousand times slower than normal.\nSlow C# code is a big problem. Slow code on the web will not scale to thousands of users. Slow code will make your user interface unusable. Slow code will make your mobile apps languish in the app store.\nSlow code is holding you back!\nI can help you.\nIn a series of short lectures I will cover many common performance bottlenecks. I will introduce each problem, and then write a small test program to measure the baseline performance. Then I will demonstrate each possible solution, and benchmark how each solution measures up.\nBut there's more! I will also dive into Common Intermediate Code (CIL), the language that the C# compiler compiles to. If this sounds daunting, don't worry! The CIL language is actually very easy to read and understand. I'll take you through the basics in a quick 15-minute lecture.\nBeing able to read CIL code is a very useful skill that will help you avoid many performance pitfalls and give you a deeper understanding of the .NET Framework.\nWhy should you take this course?\nYou should take this course if you are a beginner or intermediate C# developer and want to take your skills to the next level. All my lectures are very easy to follow, and I explain all topics with clear code and many instructive diagrams.\nOr you might be working on a critical section of code in a C# project, and need to make your code run as fast as possible. The tips and tricks in this course will help you immensely.\nOr maybe you're preparing for a C# related job interview? This course will give you an excellent foundation to answer any performance-related questions they might throw at you.",
      "target_audience": [
        "Beginner, intermediate, and advanced C# programmers who want to learn how to write fast code",
        "Developers who are about to take a job interview and need to prepare for performance-related questions",
        "Professionals who are writing a section of mission-critical code in a large C# project"
      ]
    },
    {
      "title": "Learn to Code in Python 3: Programming beginner to advanced",
      "url": "https://www.udemy.com/course/learn-python-programming-a-step-by-step-course-to-beginners/",
      "bio": "Python3 programming made easy with exercises, challenges and lots of real life examples. Learn to code today!",
      "objectives": [
        "The basic fundamentals of programming and writing computer code",
        "Using Python to solve real life problems with computer programs",
        "Work with JSON and send HTTP requests to Web Servers and APIs to get data from external services",
        "Statistics and Data Visualization",
        "An introduction to Machine Learning in Python",
        "Use Python to manipulate files, such as Excel sheets and TXT files"
      ],
      "course_content": {},
      "requirements": [
        "It is not required to have any previous experience in IT or programming",
        "You only need a computer"
      ],
      "description": "In this course, learning to code will be easy and intuitive for you. You will learn Python 3, one of the most popular programming languages in the world.\nWe will cover the basic fundamentals of programming and you will learn how to do exciting things in Python, like reading and writing on files, like Excel sheets or TXT files, working with JSON and sending HTTP requests to web servers and APIs.\nWe will also cover a little bit of Data Visualization, Statistics and Machine Learning in Python.\nThis course does not require previous experience in IT or programming, it was designed to help any person learn to code. By the end of the course you will be writing you own programs and thinking like a programmer. Your professional life will get a huge upgrade.\nThis course offers life time access, a certificate of conclusion and a 30-day money back guarantee. Don't miss this opportunity! Enroll now and start learning Python!",
      "target_audience": [
        "Any person who wants to learn to code from absolute beginner level",
        "Any person who wants to solve problems and create great services using Python programs"
      ]
    },
    {
      "title": "Terraform 101: The Ultimate Hands-On Guide [Azure Edition]",
      "url": "https://www.udemy.com/course/terraform-101-azure-edition/",
      "bio": "A Practical, Step-by-Step Guide to Building and Automating Azure Infrastructure with Terraform",
      "objectives": [
        "Understand what infrastructure-as-code (IaC) is and why it’s crucial for modern cloud management.",
        "Use Terraform CLI for deploying and managing cloud infrastructure.",
        "Code in HashiCorp Configuration Language (HCL) to automate your Azure Infrastructure",
        "Learn how to set up and start using Terraform on Microsoft Azure"
      ],
      "course_content": {},
      "requirements": [
        "Basic understanding of cloud platforms (e.g., Azure, AWS, or GCP)",
        "Familiarity with command-line interfaces (CLI)",
        "Experience with infrastructure concepts (servers, networking, etc.)",
        "A computer with admin access to install software like Terraform",
        "No prior Terraform experience needed; this is a beginner-friendly course"
      ],
      "description": "This course offers a beginner-friendly introduction to Terraform, covering the basics of the Terraform CLI and HashiCorp Configuration Language (HCL) in a cloud-agnostic way. You’ll learn how to set up Azure using the “azurerm” provider, starting with configuring a storage account for remote state management. Next, you’ll build a local runner (or script) that makes it easier to manage multiple environments directly from your own workstation. Then, you’ll set up key DevOps infrastructure, including Azure KeyVault for secret management and Azure Monitor for observability, capturing logs and metrics to ensure your deployments run smoothly.\nLeading you through these topics is Mark Tinderholt, currently a Principal Architect at Microsoft Azure. Mark brings a highly practical perspective drawn from over 25 years of real-world experience in software development, technology consulting, and leading teams. He has worked on everything from data center migrations to microservices architecture and multi-tenant SaaS solutions, all while driving DevOps culture at organizations both large and small. Because he’s not a typical “professional trainer,” but rather a veteran industry practitioner, his instruction is hands-on and focused on real-world scenarios. This approach makes learning both intuitive and immediately applicable to modern infrastructure challenges, ensuring that you gain the skills to succeed in today’s fast-paced Cloud and DevOps landscape.\nAs you progress, you’ll create an Azure Virtual Network and deploy a Linux Virtual Machine, exploring various connectivity options such as SSH and Azure Bastion. We'll also enable Entra ID Authentication and explore how to automate Entra ID using the \"azuread\" Terraform Provider. Finally, we'll look at the \"other\" Azure Terraform provider--the \"azapi\" Terraform Provider which unlocks Day Zero Support for new Azure services and features.\nThroughout the course, you’ll pick up best practices for structuring your Terraform code, handling multiple environments, and maintaining a reliable infrastructure as code workflow. By the end, you’ll have a strong grasp of Terraform fundamentals and Azure essentials—perfect if you’re just starting out with either technology or if you’re looking to solidify your cloud infrastructure skills. With Mark’s guidance, you’ll gain the confidence to design and deploy repeatable, scalable infrastructure on Azure using Terraform.",
      "target_audience": [
        "Cloud engineers and architects looking to automate infrastructure across multiple cloud platforms.",
        "DevOps professionals seeking to enhance their skills in infrastructure-as-code using Terraform.",
        "IT administrators aiming to simplify cloud resource management with automation.",
        "Developers who want to learn infrastructure provisioning using code.",
        "Beginners in cloud and DevOps with a basic understanding of cloud platforms, eager to learn Terraform from scratch."
      ]
    },
    {
      "title": "Complete Step By Step Java For Testers [2024 Updated]",
      "url": "https://www.udemy.com/course/complete-java-for-test-automation/",
      "bio": "A-Z guide for learning Java what's perfectly right for your Selenium WebDriver and Test Automation needs",
      "objectives": [
        "***** CODE FILES FOR EVERY LECTURE AVAILABLE TO DOWNLOAD",
        "Understand the concepts of Object Oriented Programming Language",
        "You will be able to EXPLAIN, DESIGN and IMPLEMENT efficient java Programs",
        "You will be able to understand all Java concepts required for Selenium WebDriver or any other Automation tool",
        "You will be confident to clear test automation interviews"
      ],
      "course_content": {
        "Introduction": [
          "Course Outcome - *** MUST WATCH ***",
          "Instructor Introduction",
          "How To Reach Me Anytime? *** MUST WATCH ***"
        ],
        "Setup and installation of required tools": [
          "Java Overview And Version Selection",
          "Java Install And Setup - Mac",
          "Java Install And Setup - Windows",
          "Install Eclipse - Windows",
          "Eclipse Installation - Mac"
        ],
        "Java Concepts - Data Types": [
          "First Program and Some Tips",
          "Variables And Data Types",
          "Default Variable Values",
          "Reference Data Type - Strings Example",
          "String Methods - Part 1",
          "String Methods - Part 2",
          "Strings Quiz *** Test Your Knowledge ***",
          "String Vs StringBuffer Vs StringBuilder *** Interview Question ***",
          "Arrays"
        ],
        "Classes And Methods -> Object Oriented Concepts": [
          "Methods Introduction",
          "Methods - Practical Example",
          "Understanding Return Type",
          "Class Introduction"
        ],
        "Getters And Setters -> Practical Examples": [
          "Getters-Setters And This Keyword - Part 1",
          "Getters-Setters And This Keyword - Part 2",
          "Getters-Setters And This Keyword - Part 3",
          "Constructors"
        ],
        "Conditional Statements and Loops": [
          "Conditional Statement",
          "Switch Statement",
          "While Loop",
          "For Loops"
        ],
        "Static Keyword": [
          "Static Keyword - Part 1",
          "Static Keyword - Part 2"
        ],
        "Practice Exercise": [
          "Practice Exercise With Solution + *** Interview Question ***",
          "Practice Exercise + Interview Question -> Reverse Characters Of A String",
          "Practice Exercise + Interview Solution -> Reverse Characters Of A String"
        ],
        "Inheritance, Access Modifiers And Abstraction": [
          "Inheritance",
          "Access Modifiers and Packages",
          "Abstract Class - Abstraction Part 1",
          "Interface - Abstraction Part 2",
          "Interface vs Abstract Class *** Interview Question ***",
          "Method Overloading",
          "More On Method Overloading",
          "Method Overriding",
          "Overloading vs Overriding *** Interview Question ***"
        ],
        "Exception Handling": [
          "Exceptions - Checked",
          "Exceptions - RunTime",
          "Reading Properties File"
        ]
      },
      "requirements": [
        "***** NO AUTOMATION / CODING EXPERIENCE NEEDED, beginners will be easily able to follow this course",
        "Java concepts are covered in the course, no experience needed",
        "Browsers (Firefox or Chrome)",
        "Windows/MAC computer",
        "All the required installation are covered in the lectures and documentation has been uploaded to the course"
      ],
      "description": "This is only Java related course and it's great because it covers just the right amount of Java which is needed for automation, but this course does not cover Selenium WebDriver or any other type of automation tool.\n\nThis is a comprehensive yet simple course on java programming language and it concentrates on Java programming concepts needed for Selenium WebDriver or any other Automation tool.\n\n** No Prior Coding Experience Needed **\nThis course assumes that you have no programming background. If you have some experience then, it's just a bonus point. You have never code, have some experience or have a lot of experience any other programming language, this course is one stop place for you.\nJava is one of the most and useful programming languages to learn You can build back-end of web applications and build robust test automation framework. Specially for Selenium WebDriver GUI automation, Java is most popular choice and has the largest community.\nYou will get the best in class support from the instructor for any question you have related to the course.\nThis course is very well structured:\nEach lecture consist of a video screencast and code files\nThere are quizzes, homework to test your knowledge\nHigh focus on practice and asking questions\nYou will also learn coding best practices\nMarket is never short of jobs in Java programming language, there are ample of jobs in both Java development and Automation Testing using Java.\nThis course is backed by udemy's 30-day money back guarantee.  If you are not satisfied for any reason, you will  get the money back. In addition to that you will keep all the code files of the course as a thank you for trying out the course !!!\nWhat are you waiting for? Enroll today and learn the powerful Java language !!!",
      "target_audience": [
        "Beginners with zero programming background",
        "Quality Assurance professionals and Manual testers looking to start career on test automation",
        "Testers who want to automate tools",
        "Experienced programmers with other programming language"
      ]
    }
  ]
}